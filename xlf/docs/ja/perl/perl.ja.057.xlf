<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="b01d04c5af24a4340d0f912c2ccf886a5fc1edcb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#exit-EXPR&quot;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/a&gt; function does not always exit immediately. It calls any defined &lt;code&gt;END&lt;/code&gt; routines first, but these &lt;code&gt;END&lt;/code&gt; routines may not themselves abort the exit. Likewise any object destructors that need to be called are called before the real exit. &lt;code&gt;END&lt;/code&gt; routines and destructors can change the exit status by modifying &lt;a href=&quot;perlvar#%24%3F&quot;&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/a&gt;. If this is a problem, you can call &lt;a href=&quot;posix#_exit&quot;&gt;&lt;code&gt;POSIX::_exit($status)&lt;/code&gt;&lt;/a&gt; to avoid &lt;code&gt;END&lt;/code&gt; and destructor processing. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;#exit-EXPR&quot;&gt; &lt;code&gt;exit&lt;/code&gt; &lt;/a&gt;関数は常にすぐに終了しません。定義済みの &lt;code&gt;END&lt;/code&gt; ルーチンを最初に呼び出しますが、これらの &lt;code&gt;END&lt;/code&gt; ルーチン自体が終了を中止しない場合があります。同様に、呼び出す必要のあるオブジェクトデストラクタは、実際の出口の前に呼び出されます。 &lt;code&gt;END&lt;/code&gt; ルーチンとデストラクタは&lt;a href=&quot;perlvar#%24%3F&quot;&gt; &lt;code&gt;$?&lt;/code&gt; &lt;/a&gt;変更することで終了ステータスを変更できますか？。これが問題である場合は、&lt;a href=&quot;posix#_exit&quot;&gt; &lt;code&gt;POSIX::_exit($status)&lt;/code&gt; &lt;/a&gt;を呼び出して、 &lt;code&gt;END&lt;/code&gt; およびデストラクタの処理を回避できます。詳細については、&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee540728eb307530289af963d36689ec3a1444d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#getprotobynumber-NUMBER&quot;&gt;&lt;code&gt;getprotobynumber&lt;/code&gt;&lt;/a&gt; function, even though it only takes one argument, has the precedence of a list operator, so beware:</source>
          <target state="translated">&lt;a href=&quot;#getprotobynumber-NUMBER&quot;&gt; &lt;code&gt;getprotobynumber&lt;/code&gt; の&lt;/a&gt;機能は、それが唯一の引数を取るにもかかわらず、リスト演算子の優先順位を持っているので、注意してください：</target>
        </trans-unit>
        <trans-unit id="9a1f9e63055c82c44f33e919de1bfed56733c2d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#last-LABEL&quot;&gt;&lt;code&gt;last&lt;/code&gt;&lt;/a&gt; command is like the &lt;code&gt;break&lt;/code&gt; statement in C (as used in loops); it immediately exits the loop in question. If the LABEL is omitted, the command refers to the innermost enclosing loop. The &lt;code&gt;last EXPR&lt;/code&gt; form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to &lt;code&gt;last LABEL&lt;/code&gt;. The &lt;a href=&quot;#continue-BLOCK&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; block, if any, is not executed:</source>
          <target state="translated">&lt;a href=&quot;#last-LABEL&quot;&gt; &lt;code&gt;last&lt;/code&gt; &lt;/a&gt;コマンドは次のようにある &lt;code&gt;break&lt;/code&gt; （ループ内で使った）Cの陳述。問題のループをすぐに終了します。LABELが省略されている場合、コマンドは最も内側の囲んでいるループを参照します。 &lt;code&gt;last EXPR&lt;/code&gt; 形式はPerl 5.18.0で入手可能な出発は、ラベル名は、実行時に計算することができ、そしてそれ以外に同じである &lt;code&gt;last LABEL&lt;/code&gt; 。&lt;a href=&quot;#continue-BLOCK&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;存在する場合、ブロックを、実行されません。</target>
        </trans-unit>
        <trans-unit id="889dc5e06ef6b79bfd7037342382aa88c842b099" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#next-LABEL&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; command is like the &lt;code&gt;continue&lt;/code&gt; statement in C; it starts the next iteration of the loop:</source>
          <target state="translated">&lt;a href=&quot;#next-LABEL&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;コマンドは次のようにあり &lt;code&gt;continue&lt;/code&gt; C内のステートメント。ループの次の反復を開始します。</target>
        </trans-unit>
        <trans-unit id="f6c37dbdd3d3faf157e953bebef6eeac7f43fa10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#oct-EXPR&quot;&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/a&gt; function is commonly used when a string such as &lt;code&gt;644&lt;/code&gt; needs to be converted into a file mode, for example. Although Perl automatically converts strings into numbers as needed, this automatic conversion assumes base 10.</source>
          <target state="translated">&lt;a href=&quot;#oct-EXPR&quot;&gt; &lt;code&gt;oct&lt;/code&gt; &lt;/a&gt;のような文字列場合関数が一般的に使用される &lt;code&gt;644&lt;/code&gt; 本の必要性は、例えば、ファイルモードに変換します。Perlは必要に応じて文字列を数値に自動的に変換しますが、この自動変換は基数10を想定しています。</target>
        </trans-unit>
        <trans-unit id="d2173488a74d711836ae18ee727857a8643388af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the external protocol. Uses &lt;a href=&quot;Net::Ping::External&quot;&gt;Net::Ping::External&lt;/a&gt; to do an external ping.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt;外部のプロトコルで使用される方法。用途&lt;a href=&quot;Net::Ping::External&quot;&gt;::ネットのPing ::外部&lt;/a&gt;外部のpingを行うこと。</target>
        </trans-unit>
        <trans-unit id="cc7c9b7850979e6e7def2184badf7bf1bc4a1d3d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the forking syn protocol.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt;フォークシンプロトコルで使用される方法。</target>
        </trans-unit>
        <trans-unit id="641eb29f28723359d8e506ee9152e1f38204dfa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the icmp protocol.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt; ICMPプロトコルで使用される方法。</target>
        </trans-unit>
        <trans-unit id="1957ff6c7452234943290c79fb5d121b6e83c5a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the icmpv6 protocol.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt;のICMPv6プロトコルで使用される方法。</target>
        </trans-unit>
        <trans-unit id="acd013c64eb2eb70a4842cac8e8d68d7939687f1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the stream protocol.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt;ストリームプロトコルで使用される方法。</target>
        </trans-unit>
        <trans-unit id="cbf91af075e5c18933e470cdffacd91d45bab2cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the syn protocol. Sends a TCP SYN packet to host specified.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt; SYNプロトコルで使用される方法。指定されたホストにTCPSYNパケットを送信します。</target>
        </trans-unit>
        <trans-unit id="e289226b6ef91e47994450b9dc7ca74494856a25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the tcp protocol.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt; TCPプロトコルで使用される方法。</target>
        </trans-unit>
        <trans-unit id="8bacd7d416bf9eb142f724a00d7ab4625004301a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method used with the udp protocol.</source>
          <target state="translated">&lt;a href=&quot;#ping&quot;&gt;「ピング」&lt;/a&gt; UDPプロトコルで使用される方法。</target>
        </trans-unit>
        <trans-unit id="be711bbef7a00d2eb13cc8d85cfba9b425e71aaf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;&quot;prop_value_aliases()&quot;&lt;/a&gt; function can be used to get all the synonyms of the bidi type name.</source>
          <target state="translated">&lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;「prop_value_aliases（）」&lt;/a&gt;関数は、双方向型の名前のすべての同義語を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4486da16fa0f4a006b57a0a44a17953ec38fd8dc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;&quot;prop_value_aliases()&quot;&lt;/a&gt; function can be used to get all the synonyms of the category name.</source>
          <target state="translated">&lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;「prop_value_aliases（）」&lt;/a&gt;関数は、カテゴリ名のすべての同義語を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1ce0427217e7e69e6e5a80f1afd684e23957d161" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;&quot;prop_value_aliases()&quot;&lt;/a&gt; function can be used to get all the synonyms of the combining class number.</source>
          <target state="translated">&lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;「prop_value_aliases（）」&lt;/a&gt;関数は、組み合わせたクラス番号のすべての同義語を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8854fb6583fec2754cd3983ea80d85f9b0022749" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; function can be used to get all the synonyms of the bidi type name.</source>
          <target state="translated">&lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases（）&lt;/a&gt;関数は、双方向型の名前のすべての同義語を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="76a16bb68fd364d030e4901c8f1d916862b53339" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; function can be used to get all the synonyms of the category name.</source>
          <target state="translated">&lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases（）&lt;/a&gt;関数は、カテゴリ名のすべての同義語を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2277466bc19ae0c38a8069cd1ac99be48d5794e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; function can be used to get all the synonyms of the combining class number.</source>
          <target state="translated">&lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases（）&lt;/a&gt;関数は、合成クラス番号のすべての同義語を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4904f3373dd8be370b7583b9b3b50ffe1a1a4b51" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_values%28%29&quot;&gt;&quot;prop_values()&quot;&lt;/a&gt; and &lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;&quot;prop_value_aliases()&quot;&lt;/a&gt; functions can be used as an alternative to this function; the first returning a simple list of the short bidi type names; and the second gets all the synonyms of a given bidi type name.</source>
          <target state="translated">&lt;a href=&quot;#prop_values%28%29&quot;&gt;「prop_values（）」&lt;/a&gt;及び&lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;「prop_value_aliases（）」&lt;/a&gt;関数は、この関数の代替として使用することができます。最初に短いbidiタイプ名の簡単なリストを返します。2つ目は、指定されたビディタイプ名のすべての同義語を取得します。</target>
        </trans-unit>
        <trans-unit id="b1feb25bb50a467b88daf8d606e828a649203e2c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_values%28%29&quot;&gt;&quot;prop_values()&quot;&lt;/a&gt; and &lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;&quot;prop_value_aliases()&quot;&lt;/a&gt; functions can be used as an alternative to this function; the first returning a simple list of the short category names; and the second gets all the synonyms of a given category name.</source>
          <target state="translated">&lt;a href=&quot;#prop_values%28%29&quot;&gt;「prop_values（）」&lt;/a&gt;及び&lt;a href=&quot;#prop_value_aliases%28%29&quot;&gt;「prop_value_aliases（）」&lt;/a&gt;関数は、この関数の代替として使用することができます。最初は短いカテゴリ名の簡単なリストを返します。2つ目は、指定されたカテゴリ名のすべての同義語を取得します。</target>
        </trans-unit>
        <trans-unit id="d0d02ad47d23ca3616a65821c3a3e94a1c4a3210" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_values()&quot;&gt;prop_values()&lt;/a&gt; and &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; functions can be used as an alternative to this function; the first returning a simple list of the short bidi type names; and the second gets all the synonyms of a given bidi type name.</source>
          <target state="translated">&lt;a href=&quot;#prop_values()&quot;&gt;prop_values（）&lt;/a&gt;と&lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases（）&lt;/a&gt;関数は、この関数の代替として使用することができます。最初は短い双方向タイプ名の単純なリストを返します。2番目は、指定されたBidiタイプ名のすべての同義語を取得します。</target>
        </trans-unit>
        <trans-unit id="ff1836f9843147fc775222ff3469395bcf43b303" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#prop_values()&quot;&gt;prop_values()&lt;/a&gt; and &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; functions can be used as an alternative to this function; the first returning a simple list of the short category names; and the second gets all the synonyms of a given category name.</source>
          <target state="translated">&lt;a href=&quot;#prop_values()&quot;&gt;prop_values（）&lt;/a&gt;と&lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases（）&lt;/a&gt;関数は、この関数の代替として使用することができます。最初は短いカテゴリ名の簡単なリストを返します。2番目は、指定されたカテゴリ名のすべての同義語を取得します。</target>
        </trans-unit>
        <trans-unit id="234f248bda745adf52767c8afed6c1179ce0b206" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#redo-LABEL&quot;&gt;&lt;code&gt;redo&lt;/code&gt;&lt;/a&gt; command restarts the loop block without evaluating the conditional again. The &lt;a href=&quot;#continue-BLOCK&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; block, if any, is not executed. If the LABEL is omitted, the command refers to the innermost enclosing loop. The &lt;code&gt;redo EXPR&lt;/code&gt; form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to &lt;code&gt;redo LABEL&lt;/code&gt;. Programs that want to lie to themselves about what was just input normally use this command:</source>
          <target state="translated">&lt;a href=&quot;#redo-LABEL&quot;&gt; &lt;code&gt;redo&lt;/code&gt; &lt;/a&gt;コマンドが再び条件を評価することなく、ループブロックを再開する。&lt;a href=&quot;#continue-BLOCK&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;存在する場合、ブロックを、実行されません。LABELが省略されている場合、コマンドは最も内側の囲んでいるループを参照します。 &lt;code&gt;redo EXPR&lt;/code&gt; 形式はPerl 5.18.0で入手可能な出発は、ラベル名は、実行時に計算することができ、そしてそれ以外に同一 &lt;code&gt;redo LABEL&lt;/code&gt; 。入力された内容について嘘をつきたいプログラムは、通常、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="0a519b9af5d08ee020d0e49465d3e607833a7248" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#search_invlist%28%29&quot;&gt;&quot;search_invlist()&quot;&lt;/a&gt; function is provided for finding a code point within an inversion list.</source>
          <target state="translated">&lt;a href=&quot;#search_invlist%28%29&quot;&gt;「search_invlist（）」&lt;/a&gt;関数は、反転リスト内のコード・ポイントを発見するために設けられています。</target>
        </trans-unit>
        <trans-unit id="8295b9c404465c68e21720ae88623e9c9b91d667" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#search_invlist()&quot;&gt;search_invlist()&lt;/a&gt; function is provided for finding a code point within an inversion list.</source>
          <target state="translated">&lt;a href=&quot;#search_invlist()&quot;&gt;search_invlist（）&lt;/a&gt;関数は、反転リスト内のコード・ポイントを発見するために設けられています。</target>
        </trans-unit>
        <trans-unit id="a99fc3c1e89a0b4e840a4661bca0de0880d27694" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../file/stat&quot;&gt;File::stat&lt;/a&gt; module provides a convenient, by-name access mechanism:</source>
          <target state="translated">&lt;a href=&quot;../file/stat&quot;&gt;ファイル:: STAT&lt;/a&gt;モジュールは便利、名前によるアクセス機構を提供します。</target>
        </trans-unit>
        <trans-unit id="f74e082436b86f6a01a3f1c31662df75f43fb323" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt; does not use a formal grammar because TAP is essentially a stream-based protocol. In fact, it's quite legal to have an infinite stream. For the same reason that we don't apply regexes to streams, we're not using a formal grammar here. Instead, we parse the TAP in lines.</source>
          <target state="translated">&lt;a href=&quot;../parser&quot;&gt;TAP ::パーサーは&lt;/a&gt; TAPは、本質的に、ストリームベースのプロトコルであるため、正式な文法を使用していません。実際、ストリームを無限にすることは非常に合法です。ストリームに正規表現を適用しないのと同じ理由で、ここでは正式な文法を使用していません。代わりに、TAPを行で解析します。</target>
        </trans-unit>
        <trans-unit id="9b27238d4d5342b8376d19c0241b7f8feab19452" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../perltie&quot;&gt;perltie&lt;/a&gt; section contains an example of tying handles.</source>
          <target state="translated">&lt;a href=&quot;../perltie&quot;&gt;perltieやの&lt;/a&gt;セクションでは、同点のハンドルの例が含まれています。</target>
        </trans-unit>
        <trans-unit id="6d31ab6a810582c2c717e2c46d057f9872d7ae58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../perltie&quot;&gt;perltie&lt;/a&gt; section uses a good example of tying scalars by associating process IDs with priority.</source>
          <target state="translated">&lt;a href=&quot;../perltie&quot;&gt;perltieやの&lt;/a&gt;部分は、優先的にプロセスIDを関連付けることにより、スカラーを結ぶの良い例を使用します。</target>
        </trans-unit>
        <trans-unit id="ef794a4d4eb5de692a3463fa7a1780b4cded7598" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../time/gmtime&quot;&gt;Time::gmtime&lt;/a&gt; and &lt;a href=&quot;../time/localtime&quot;&gt;Time::localtime&lt;/a&gt; modules provide a convenient, by-name access mechanism to the gmtime() and localtime() functions, respectively.</source>
          <target state="translated">&lt;a href=&quot;../time/gmtime&quot;&gt;時間:: gmtimeは&lt;/a&gt;と&lt;a href=&quot;../time/localtime&quot;&gt;時間:: localtimeの&lt;/a&gt;モジュールは、それぞれのgmtime（）やlocaltimeの（）関数に便利な、名前によるアクセス機構を提供します。</target>
        </trans-unit>
        <trans-unit id="7f59d8b64082e6585a0f86dcd5c37ba82d09b8aa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Algorithm::Loops&quot;&gt;Algorithm::Loops&lt;/a&gt; module also provides the &lt;code&gt;NextPermute&lt;/code&gt; and &lt;code&gt;NextPermuteNum&lt;/code&gt; functions which efficiently find all unique permutations of an array, even if it contains duplicate values, modifying it in-place: if its elements are in reverse-sorted order then the array is reversed, making it sorted, and it returns false; otherwise the next permutation is returned.</source>
          <target state="translated">&lt;a href=&quot;Algorithm::Loops&quot;&gt;アルゴリズム::ループ&lt;/a&gt;モジュールも提供 &lt;code&gt;NextPermute&lt;/code&gt; と &lt;code&gt;NextPermuteNum&lt;/code&gt; インプレース、それを修正する、効率的に重複する値が含まれている場合でも、アレイのすべての固有の順列を見つける機能を：その要素が逆ソート順に、配列が逆転している場合、並べ替えると、falseが返されます。それ以外の場合は、次の順列が返されます。</target>
        </trans-unit>
        <trans-unit id="d9f0381e14460ccca0ae56322db0a7c83995df5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Array::Iterator::Circular&quot;&gt;Array::Iterator::Circular&lt;/a&gt; creates an iterator object for circular arrays:</source>
          <target state="translated">&lt;a href=&quot;Array::Iterator::Circular&quot;&gt;アレイ::イテレータ::丸は&lt;/a&gt;、円形アレイのイテレータオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="bdf4aaa34018ae1ca4bf41f4b79cdbb9a0cff285" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;B::Xref&quot;&gt;B::Xref&lt;/a&gt; module can be used to generate cross-reference reports for Perl programs.</source>
          <target state="translated">&lt;a href=&quot;B::Xref&quot;&gt;B ::外部参照&lt;/a&gt;モジュールは、Perlプログラムのクロスリファレンスレポートを生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="f196a1609183db140dea47e36f3fc23cd9f51305" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Data::Diver&quot;&gt;Data::Diver&lt;/a&gt; module on CPAN can do it for you too. Its &lt;code&gt;Dive&lt;/code&gt; subroutine can tell you not only if the keys exist but also get the value:</source>
          <target state="translated">CPANの&lt;a href=&quot;Data::Diver&quot;&gt;Data :: Diver&lt;/a&gt;モジュールもそれを行うことができます。その &lt;code&gt;Dive&lt;/code&gt; サブルーチンは、キーが存在するかどうかだけでなく、値を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="94925a2d828e44c2072ac8bf9e5922e018a8e287" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Data::Dumper&quot;&gt;Data::Dumper&lt;/a&gt; module can pretty-print Perl data structures:</source>
          <target state="translated">&lt;a href=&quot;Data::Dumper&quot;&gt;データ::ダンパ&lt;/a&gt;モジュールはPerlのデータ構造をかなり-印刷することができます。</target>
        </trans-unit>
        <trans-unit id="f5057256958429150491aec28876109720171696" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Data::Dumper&quot;&gt;Data::Dumper&lt;/a&gt; module on CPAN (or the 5.005 release of Perl) is great for printing out data structures. The &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; module on CPAN (or the 5.8 release of Perl), provides a function called &lt;code&gt;dclone&lt;/code&gt; that recursively copies its argument.</source>
          <target state="translated">CPAN（またはPerlの5.005リリース）の&lt;a href=&quot;Data::Dumper&quot;&gt;Data :: Dumper&lt;/a&gt;モジュールは、データ構造を印刷するのに最適です。CPAN（またはPerlの5.8リリース）の&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;モジュールは、引数を再帰的にコピーする &lt;code&gt;dclone&lt;/code&gt; と呼ばれる関数を提供します。</target>
        </trans-unit>
        <trans-unit id="061063093e9b457e789ea7dfaed817ebef3e8fa9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Date::Calc&quot;&gt;Date::Calc&lt;/a&gt; module provides two functions to calculate these, too:</source>
          <target state="translated">&lt;a href=&quot;Date::Calc&quot;&gt;日付::のCalc&lt;/a&gt;モジュールは、あまりにも、これらを計算するための2つの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="414fad6d87355758dbe61a47fbcaa678d06818a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Devel::NYTProf&quot;&gt;Devel::NYTProf&lt;/a&gt; (New York Times Profiler) does both statement and subroutine profiling. It's available from CPAN and you also invoke it with the &lt;code&gt;-d&lt;/code&gt; switch:</source>
          <target state="translated">&lt;a href=&quot;Devel::NYTProf&quot;&gt;Develの:: NYTProf&lt;/a&gt;（ニューヨーク・タイムズプロファイラー）は、両方の文とサブルーチンのプロファイリングを行います。これはCPANから入手でき、 &lt;code&gt;-d&lt;/code&gt; スイッチを使用して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="dad6fcc6ed17db5c607714adee78b91a0147dac4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; module can decode base 64-encoded email message parts transparently so the developer doesn't need to worry about it.</source>
          <target state="translated">&lt;a href=&quot;Email::MIME&quot;&gt;メール:: MIMEの&lt;/a&gt;モジュールは透過的にその開発者はそれを心配する必要はありませんベース64でエンコードされた電子メールメッセージの一部をデコードすることができます。</target>
        </trans-unit>
        <trans-unit id="63fa62cd04b5ec9ae734d2f288b28465a83825b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; module, better known simply as &quot;MakeMaker&quot;, turns a Perl script, typically called &lt;code&gt;Makefile.PL&lt;/code&gt;, into a Makefile. The Unix tool &lt;code&gt;make&lt;/code&gt; uses this file to manage dependencies and actions to process and install a Perl distribution.</source>
          <target state="translated">&lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils :: MakeMakerのの&lt;/a&gt;よりよい単に「MakeMakerの」として知られているモジュールは、一般的に呼ばれる、Perlスクリプトをオン &lt;code&gt;Makefile.PL&lt;/code&gt; のMakefileに、。Unixツール &lt;code&gt;make&lt;/code&gt; は、このファイルを使用して、Perlディストリビューションを処理およびインストールするための依存関係とアクションを管理します。</target>
        </trans-unit>
        <trans-unit id="2a2f33574a7da40336507f2c618ec329b05bfc03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Find&quot;&gt;File::Find&lt;/a&gt; module, which comes with Perl, does all of the hard work to traverse a directory structure. It comes with Perl. You simply call the &lt;code&gt;find&lt;/code&gt; subroutine with a callback subroutine and the directories you want to traverse:</source>
          <target state="translated">&lt;a href=&quot;File::Find&quot;&gt;ファイル::検索&lt;/a&gt;のPerlモジュールが付属していますが、ディレクトリ構造を横断するハードワークのすべてを行います。Perlが付属しています。コールバックサブルーチンとトラバースするディレクトリを使用して、 &lt;code&gt;find&lt;/code&gt; サブルーチンを呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="06f493ee4e3ed13a3c3c25372d0b8e47b8faa82e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Find::Closures&quot;&gt;File::Find::Closures&lt;/a&gt;, which you can download from CPAN, provides many ready-to-use subroutines that you can use with &lt;a href=&quot;File::Find&quot;&gt;File::Find&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;File::Find::Closures&quot;&gt;ファイル::検索::クロージャ&lt;/a&gt;あなたはCPANからダウンロードすることができ、あなたが使用できることを多くのすぐに使用できるサブルーチンを提供し&lt;a href=&quot;File::Find&quot;&gt;、ファイル::検索します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="41be3e08eb17eb5dab7c9db97b667db51319891c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Find::Rule&quot;&gt;File::Find::Rule&lt;/a&gt; module, which you can download from CPAN, has a similar interface, but does the traversal for you too:</source>
          <target state="translated">&lt;a href=&quot;File::Find::Rule&quot;&gt;ファイル::検索::ルール&lt;/a&gt;あなたはCPANからダウンロードできるモジュールは、同様のインタフェースを持っていますが、あまりにもあなたのためのトラバーサルを行います。</target>
        </trans-unit>
        <trans-unit id="6c7bd1eef5bd53ddee501c6b8d48384c043b208a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Finder&quot;&gt;File::Finder&lt;/a&gt;, which you can download from CPAN, can help you create the callback subroutine using something closer to the syntax of the &lt;code&gt;find&lt;/code&gt; command-line utility:</source>
          <target state="translated">&lt;a href=&quot;File::Finder&quot;&gt;ファイル::ファインダー&lt;/a&gt;、あなたはCPANからダウンロードすることができ、あなたが近いの構文に何かを使用してコールバックサブルーチンを作成することができます &lt;code&gt;find&lt;/code&gt; コマンドラインユーティリティ：</target>
        </trans-unit>
        <trans-unit id="1c8b4aba1c450fd5e83e76f37c3b27a8ef91aa4e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Path&quot;&gt;File::Path&lt;/a&gt; module also has a legacy interface to the older &lt;code&gt;rmtree&lt;/code&gt; subroutine.</source>
          <target state="translated">&lt;a href=&quot;File::Path&quot;&gt;ファイル::パスの&lt;/a&gt;モジュールも古いのレガシーインタフェースあり &lt;code&gt;rmtree&lt;/code&gt; のサブルーチンを。</target>
        </trans-unit>
        <trans-unit id="c6eb5ba6674a28ab9cde2b0f4fa3385630b28d43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Path&quot;&gt;File::Path&lt;/a&gt; module, which comes with Perl, has a &lt;code&gt;remove_tree&lt;/code&gt; which can take care of all of the hard work for you:</source>
          <target state="translated">&lt;a href=&quot;File::Path&quot;&gt;ファイル::パス&lt;/a&gt;のPerlモジュールが付属していますが、持ってい &lt;code&gt;remove_tree&lt;/code&gt; あなたのためにハードワークのすべての世話をすることができます。</target>
        </trans-unit>
        <trans-unit id="785624fefaf011b1c3c4e26dff67213b765e81c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::ReadBackwards&quot;&gt;File::ReadBackwards&lt;/a&gt; module also has the advantage of setting the input record separator to a regular expression.</source>
          <target state="translated">&lt;a href=&quot;File::ReadBackwards&quot;&gt;ファイル:: ReadBackwardsは、&lt;/a&gt;モジュールは、正規表現の入力レコードセパレータを設定するという利点があります。</target>
        </trans-unit>
        <trans-unit id="2e7daf70cf70f962093675df7cd3c0bff0a54c56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::Spec&quot;&gt;&lt;code&gt;File::Spec&lt;/code&gt;&lt;/a&gt; modules provide methods to manipulate path specifications and return the results in native format for each platform. This is often unnecessary as Unix-style paths are understood by Perl on every supported platform, but if you need to produce native paths for a native utility that does not understand Unix syntax, or if you are operating on paths or path components in unknown (and thus possibly native) syntax, &lt;a href=&quot;File::Spec&quot;&gt;&lt;code&gt;File::Spec&lt;/code&gt;&lt;/a&gt; is your friend. Here are two brief examples:</source>
          <target state="translated">&lt;a href=&quot;File::Spec&quot;&gt; &lt;code&gt;File::Spec&lt;/code&gt; &lt;/a&gt;のモジュールは、パス指定を操作し、各プラットフォームのネイティブフォーマットで結果を返すためのメソッドを提供します。UnixスタイルのパスはサポートされているすべてのプラットフォームでPerlによって理解されるため、これは多くの場合不要ですが、Unix構文を理解しないネイティブユーティリティのネイティブパスを生成する必要がある場合、または不明なパスまたはパスコンポーネントを操作している場合（したがって、おそらくネイティブ）構文、&lt;a href=&quot;File::Spec&quot;&gt; &lt;code&gt;File::Spec&lt;/code&gt; &lt;/a&gt;はあなたの友達です。次に、2つの簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="2b19e201b91274dc82f186817a1d33cf7babd619" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;File::stat&quot;&gt;File::stat&lt;/a&gt; module provides a convenient, by-name access mechanism:</source>
          <target state="translated">&lt;a href=&quot;File::stat&quot;&gt;ファイル:: STAT&lt;/a&gt;モジュールは便利、名前によるアクセス機構を提供します。</target>
        </trans-unit>
        <trans-unit id="16818dfffaaf61b6c966f79b42c1f8e2b7feb79d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt; objects also have a &lt;code&gt;flush&lt;/code&gt; method. You can flush the buffer any time you want without auto-buffering</source>
          <target state="translated">&lt;a href=&quot;IO::Handle&quot;&gt;IO ::ハンドル&lt;/a&gt;も持っているオブジェクト &lt;code&gt;flush&lt;/code&gt; 方法を。自動バッファリングなしで、いつでもバッファをフラッシュできます</target>
        </trans-unit>
        <trans-unit id="bba763c04be417f13a8a4419a2a27f106dcca680" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;IO::Interactive&quot;&gt;IO::Interactive&lt;/a&gt; module does the best it can to give you an answer. Its &lt;code&gt;is_interactive&lt;/code&gt; function returns an output filehandle; that filehandle points to standard output if the module thinks the session is interactive. Otherwise, the filehandle is a null handle that simply discards the output:</source>
          <target state="translated">&lt;a href=&quot;IO::Interactive&quot;&gt;IO ::インタラクティブな&lt;/a&gt;モジュールはあなたに答えを与えるためにそれができる最善を尽くします。その &lt;code&gt;is_interactive&lt;/code&gt; 関数は、出力ファイルハンドルを返します。モジュールがセッションがインタラクティブであると判断した場合、そのファイルハンドルは標準出力を指します。それ以外の場合、ファイルハンドルは単に出力を破棄するnullハンドルです。</target>
        </trans-unit>
        <trans-unit id="5994860ba25215b560ca2d61fa7577cd91572e65" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;IO::Pty&quot;&gt;IO::Pty&lt;/a&gt; and &lt;a href=&quot;expect&quot;&gt;Expect&lt;/a&gt; modules from CPAN can help with this, as they provide a real tty (well, a pseudo-tty, actually), which gets you back to line buffering in the invoked command again.</source>
          <target state="translated">CPANの&lt;a href=&quot;IO::Pty&quot;&gt;IO :: Pty&lt;/a&gt;モジュールと&lt;a href=&quot;expect&quot;&gt;Expect&lt;/a&gt;モジュールは、実際のtty（実際には疑似tty）を提供するため、これに役立ちます。これにより、呼び出されたコマンドの行バッファリングに戻ることができます。</target>
        </trans-unit>
        <trans-unit id="57ff19b2be9bd948571db368af45b45f30d772d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;IPC::Open2&quot;&gt;IPC::Open2&lt;/a&gt; module (part of the standard perl distribution) is an easy-to-use approach that internally uses &lt;code&gt;pipe()&lt;/code&gt;, &lt;code&gt;fork()&lt;/code&gt;, and &lt;code&gt;exec()&lt;/code&gt; to do the job. Make sure you read the deadlock warnings in its documentation, though (see &lt;a href=&quot;IPC::Open2&quot;&gt;IPC::Open2&lt;/a&gt;). See &lt;a href=&quot;perlipc#Bidirectional-Communication-with-Another-Process&quot;&gt;&quot;Bidirectional Communication with Another Process&quot; in perlipc&lt;/a&gt; and &lt;a href=&quot;perlipc#Bidirectional-Communication-with-Yourself&quot;&gt;&quot;Bidirectional Communication with Yourself&quot; in perlipc&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;IPC::Open2&quot;&gt;IPC :: Open2の&lt;/a&gt;モジュール（標準Perl配布の一部）は、内部的に使用することを簡単に使用できるアプローチである &lt;code&gt;pipe()&lt;/code&gt; 、 &lt;code&gt;fork()&lt;/code&gt; 、および &lt;code&gt;exec()&lt;/code&gt; 仕事をします。ただし、ドキュメントのデッドロック警告を必ずお読みください（&lt;a href=&quot;IPC::Open2&quot;&gt;IPC :: Open2を&lt;/a&gt;参照）。&lt;a href=&quot;perlipc#Bidirectional-Communication-with-Another-Process&quot;&gt;perlipcの「別のプロセス&lt;/a&gt;との&lt;a href=&quot;perlipc#Bidirectional-Communication-with-Yourself&quot;&gt;双方向通信」&lt;/a&gt;およびperlipcの「自分との双方向通信」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0bfdae92972068b982647ca50573a173382b253e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;MIME::Base64&quot;&gt;MIME::Base64&lt;/a&gt; package handles this as well as the MIME/QP encoding. Decoding base 64 becomes as simple as:</source>
          <target state="translated">&lt;a href=&quot;MIME::Base64&quot;&gt;MIME :: Base64での&lt;/a&gt;パッケージハンドル本だけでなく、MIME / QPエンコーディング。Base64のデコードは次のように簡単になります。</target>
        </trans-unit>
        <trans-unit id="c81136d6431fd17ef0e4aa23b6bb0cdcdd4be5ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Net::Domain&quot;&gt;Net::Domain&lt;/a&gt; module, which is part of the Standard Library starting in Perl 5.7.3, can get you the fully qualified domain name (FQDN), the host name, or the domain name.</source>
          <target state="translated">&lt;a href=&quot;Net::Domain&quot;&gt;ネット::ドメイン&lt;/a&gt;のPerl 5.7.3以降で標準ライブラリの一部であるモジュールは、あなたの完全修飾ドメイン名（FQDN）、ホスト名、またはドメイン名を取得することができます。</target>
        </trans-unit>
        <trans-unit id="2e94a57c84c2082998da5d9e3718fef9c662bb23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Pod::Simple::Methody&quot;&gt;Pod::Simple::Methody&lt;/a&gt; interface is event-based, similar to that of &lt;a href=&quot;HTML::Parser&quot;&gt;HTML::Parser&lt;/a&gt; or &lt;a href=&quot;XML::Parser&quot;&gt;XML::Parser&lt;/a&gt;'s &quot;Handlers&quot;.</source>
          <target state="translated">&lt;a href=&quot;Pod::Simple::Methody&quot;&gt;ポッド::シンプル:: Methody&lt;/a&gt;インターフェースはイベントベースのものと同様である&lt;a href=&quot;HTML::Parser&quot;&gt;HTML :: Parserの&lt;/a&gt;か、&lt;a href=&quot;XML::Parser&quot;&gt;XML :: Parserの&lt;/a&gt;の「ハンドラ&quot;。</target>
        </trans-unit>
        <trans-unit id="3225637b7a30ef3b9b4ead58416b060ae1216f73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Proc::Daemon&quot;&gt;Proc::Daemon&lt;/a&gt; module, available from CPAN, provides a function to perform these actions for you.</source>
          <target state="translated">&lt;a href=&quot;Proc::Daemon&quot;&gt;PROC ::デーモン&lt;/a&gt;CPANから利用できるモジュールは、あなたのためにこれらのアクションを実行するための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="570fbc1b333b95e1cacbc6d622c051543a52e083" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Sys::Hostname&quot;&gt;Sys::Hostname&lt;/a&gt; module, part of the Standard Library, can also get the hostname:</source>
          <target state="translated">&lt;a href=&quot;Sys::Hostname&quot;&gt;Sys ::ホスト名&lt;/a&gt;モジュール、標準ライブラリの一部は、また、ホスト名を取得することができます：</target>
        </trans-unit>
        <trans-unit id="83438d62ddac1d3b0024cb20543586b81f4a2ed4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Sys::Hostname::Long&quot;&gt;Sys::Hostname::Long&lt;/a&gt; module takes a different approach and tries harder to return the fully qualified hostname:</source>
          <target state="translated">&lt;a href=&quot;Sys::Hostname::Long&quot;&gt;Sys ::ホスト名::ロング&lt;/a&gt;モジュールは異なるアプローチをとり、完全修飾ホスト名を返すために難しくしようとします：</target>
        </trans-unit>
        <trans-unit id="360df13e9e42398d87ddf7c87ae270331934433d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt; does not use a formal grammar because TAP is essentially a stream-based protocol. In fact, it's quite legal to have an infinite stream. For the same reason that we don't apply regexes to streams, we're not using a formal grammar here. Instead, we parse the TAP in lines.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser&quot;&gt;TAP ::パーサーは&lt;/a&gt;TAPは、本質的に、ストリームベースのプロトコルであるため、正式な文法を使用していません。実際、無限のストリームを持つことは非常に合法です。ストリームに正規表現を適用しないのと同じ理由で、ここでは正式な文法を使用していません。代わりに、TAPを行で解析します。</target>
        </trans-unit>
        <trans-unit id="da5808fca337034f35682036721a9427ccd81f04" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Task::Kensho&quot;&gt;Task::Kensho&lt;/a&gt; module has a list of recommended modules which you should review as a good starting point.</source>
          <target state="translated">&lt;a href=&quot;Task::Kensho&quot;&gt;タスク:: Kenshoの&lt;/a&gt;モジュールは、あなたが良い出発点として検討すべき推奨モジュールのリストを持っています。</target>
        </trans-unit>
        <trans-unit id="aafbf1ee7c517c584849dcba00f2431a29c861d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Term::Cap&quot;&gt;Term::Cap&lt;/a&gt; module can also get the special sequence if you want to deal with the low-level details of terminal control. The &lt;code&gt;Tputs&lt;/code&gt; method returns the string for the given capability:</source>
          <target state="translated">&lt;a href=&quot;Term::Cap&quot;&gt;ターム::キャップ&lt;/a&gt;あなたは、端末制御の低レベルの詳細に対処したい場合は、モジュールは、特別なシーケンスを得ることができます。 &lt;code&gt;Tputs&lt;/code&gt; メソッドは、指定された機能のための文字列を返します。</target>
        </trans-unit>
        <trans-unit id="000a3fd43d21166c2b39d6546fdf69078cc7d878" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Term::ReadKey&quot;&gt;Term::ReadKey&lt;/a&gt; module from CPAN offers an easy-to-use interface that should be more efficient than shelling out to &lt;b&gt;stty&lt;/b&gt; for each key. It even includes limited support for Windows.</source>
          <target state="translated">CPANの&lt;a href=&quot;Term::ReadKey&quot;&gt;Term :: ReadKey&lt;/a&gt;モジュールは、各キーを&lt;b&gt;sttyにシェル&lt;/b&gt;アウトするよりも効率的である、使いやすいインターフェースを提供します。Windowsの限定的なサポートも含まれています。</target>
        </trans-unit>
        <trans-unit id="e513d6d25a35bd468fa6dfadf342f7abd0a9398b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Test2::API::Context&quot;&gt;Test2::API::Context&lt;/a&gt; object, as well as all &lt;a href=&quot;Test2::Event&quot;&gt;Test2::Event&lt;/a&gt; types need to have access to information about where they were created. This object represents that information.</source>
          <target state="translated">&lt;a href=&quot;Test2::API::Context&quot;&gt;Test2を:: API ::コンテキスト&lt;/a&gt;オブジェクトだけでなく、すべての&lt;a href=&quot;Test2::Event&quot;&gt;Test2を::イベント&lt;/a&gt;タイプは、それらが作成された場所に関する情報へのアクセスを持っている必要があります。このオブジェクトはその情報を表します。</target>
        </trans-unit>
        <trans-unit id="25e3f2d15c3d0ceb7fdd915ea6fc508fa38a5afa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Test2::Event::Pass&quot;&gt;Test2::Event::Pass&lt;/a&gt; is a specially crafted and optimized event, using this will help the performance of passing tests.</source>
          <target state="translated">&lt;a href=&quot;Test2::Event::Pass&quot;&gt;Test2を::イベント::パスが&lt;/a&gt;テストに合格のパフォーマンスを助けるこれを使用して、特別に細工されたと最適化されたイベントです。</target>
        </trans-unit>
        <trans-unit id="64e3ab29916cf475d197cf70cfb13cb08a0c4ba1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Time::HiRes&quot;&gt;Time::HiRes&lt;/a&gt; module (part of the standard distribution as of Perl 5.8) measures time with the &lt;code&gt;gettimeofday()&lt;/code&gt; system call, which returns the time in microseconds since the epoch. If you can't install &lt;a href=&quot;Time::HiRes&quot;&gt;Time::HiRes&lt;/a&gt; for older Perls and you are on a Unixish system, you may be able to call &lt;code&gt;gettimeofday(2)&lt;/code&gt; directly. See &lt;a href=&quot;perlfunc#syscall&quot;&gt;&quot;syscall&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;Time::HiRes&quot;&gt;時間::ハイレゾ&lt;/a&gt;モジュール（Perlの5.8のような標準的なディストリビューションの一部）を用いて時間を計測 &lt;code&gt;gettimeofday()&lt;/code&gt; エポックからマイクロ秒の時間を戻すシステムコール、。古いPerl用の&lt;a href=&quot;Time::HiRes&quot;&gt;Time :: HiRes&lt;/a&gt;をインストールできず、Unixishシステムを使用している場合は、 &lt;code&gt;gettimeofday(2)&lt;/code&gt; を直接呼び出すことができる場合があります。&lt;a href=&quot;perlfunc#syscall&quot;&gt;perlfuncの「syscall」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7e6f85e54060d65479b4d06b632210eb849f1f0e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Time::Piece&quot;&gt;Time::Piece&lt;/a&gt; module exports a new &lt;code&gt;localtime&lt;/code&gt; that returns an object, and &lt;a href=&quot;Time::Seconds&quot;&gt;Time::Seconds&lt;/a&gt; exports the &lt;code&gt;ONE_DAY&lt;/code&gt; constant that is a set number of seconds. This means that it always gives the time 24 hours ago, which is not always yesterday. This can cause problems around the end of daylight saving time when there's one day that is 25 hours long.</source>
          <target state="translated">&lt;a href=&quot;Time::Piece&quot;&gt;時間::ワンピースの&lt;/a&gt;モジュールがエクスポート新しい &lt;code&gt;localtime&lt;/code&gt; のオブジェクトを返し、&lt;a href=&quot;Time::Seconds&quot;&gt;タイム::秒の&lt;/a&gt;輸出 &lt;code&gt;ONE_DAY&lt;/code&gt; を設定した秒数である定数。これは、常に24時間前の時刻を表示することを意味しますが、必ずしも昨日とは限りません。これにより、25時間の1日がある場合、夏時間の終わり頃に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae8d644c0f0739788e0fe94553d172a549be62ef" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Time::Piece&quot;&gt;Time::Piece&lt;/a&gt; module, which comes with Perl, replaces &lt;a href=&quot;localtime&quot;&gt;localtime&lt;/a&gt; with a version that returns an object. It also overloads the comparison operators so you can compare them directly:</source>
          <target state="translated">&lt;a href=&quot;Time::Piece&quot;&gt;時間::ピース&lt;/a&gt;のPerlモジュールが付属していますが、置き換え&lt;a href=&quot;localtime&quot;&gt;のlocaltimeを&lt;/a&gt;オブジェクトを返しバージョンで。また、比較演算子をオーバーロードして、直接比較できるようにします。</target>
        </trans-unit>
        <trans-unit id="8cc9a688570f19df6de24c492632ed7647b5575b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Time::gmtime&quot;&gt;Time::gmtime&lt;/a&gt; and &lt;a href=&quot;Time::localtime&quot;&gt;Time::localtime&lt;/a&gt; modules provide a convenient, by-name access mechanism to the &lt;a href=&quot;#gmtime-EXPR&quot;&gt;&lt;code&gt;gmtime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#localtime-EXPR&quot;&gt;&lt;code&gt;localtime&lt;/code&gt;&lt;/a&gt; functions, respectively.</source>
          <target state="translated">&lt;a href=&quot;Time::gmtime&quot;&gt;時間:: gmtimeは&lt;/a&gt;と&lt;a href=&quot;Time::localtime&quot;&gt;時間:: localtimeの&lt;/a&gt;モジュールは便利に、名前によるアクセス機構提供&lt;a href=&quot;#gmtime-EXPR&quot;&gt; &lt;code&gt;gmtime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#localtime-EXPR&quot;&gt; &lt;code&gt;localtime&lt;/code&gt; の&lt;/a&gt;それぞれの機能を。</target>
        </trans-unit>
        <trans-unit id="2b9edd1164f7fd428ef66d1f77bb74482f07ecc4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;Unicode::Tussle&quot;&gt;Unicode::Tussle&lt;/a&gt; CPAN module includes many programs to help with working with Unicode, including these programs to fully or partly replace standard utilities:</source>
          <target state="translated">&lt;a href=&quot;Unicode::Tussle&quot;&gt;ユニコード::闘争&lt;/a&gt;CPANモジュールは、完全にまたは部分的に標準ユーティリティを置き換えるために、これらのプログラムを含め、ユニコードでの作業を支援するために多くのプログラムが含まれています。</target>
        </trans-unit>
        <trans-unit id="4148a12496e441ea4f3ef8053e86029175f36271" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;autodie&quot;&gt;autodie&lt;/a&gt; pragma is very smart when it comes to working with Perl's built-in functions. The behaviour for these functions are fixed, and &lt;code&gt;autodie&lt;/code&gt; knows exactly how they try to signal failure.</source>
          <target state="translated">&lt;a href=&quot;autodie&quot;&gt;autodie&lt;/a&gt;プラグマそれはPerlの組み込み関数を扱うことになると非常にスマートです。これらの関数の動作は修正されており、 &lt;code&gt;autodie&lt;/code&gt; はそれらが失敗を通知しようとする方法を正確に認識しています。</target>
        </trans-unit>
        <trans-unit id="1b61ff031aeab44addeeb9ed990fdd03cf707db7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;b/xref&quot;&gt;B::Xref&lt;/a&gt; module can be used to generate cross-reference reports for Perl programs.</source>
          <target state="translated">&lt;a href=&quot;b/xref&quot;&gt;B ::外部参照&lt;/a&gt;モジュールは、Perlプログラムのクロスリファレンスレポートを生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1c782dc05843dae452f5fa426b35990195e14641" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; module allows you to present your error messages from the caller's perspective; this gives you a way to signal a problem with the caller and not your module. For instance, if you say this:</source>
          <target state="translated">&lt;a href=&quot;carp&quot;&gt;鯉の&lt;/a&gt;モジュールを使用すると、呼び出し側の視点から自分のエラーメッセージを提示することができます。これにより、モジュールではなく、呼び出し元に問題を通知する方法が提供されます。たとえば、次のように言ったとします。</target>
        </trans-unit>
        <trans-unit id="99917712f2804784fe8d984e9caf76b36fd4b3a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypt&quot;&gt;crypt&lt;/a&gt; function is unsuitable for hashing large quantities of data, not least of all because you can't get the information back. Look at the &lt;a href=&quot;../digest&quot;&gt;Digest&lt;/a&gt; module for more robust algorithms.</source>
          <target state="translated">&lt;a href=&quot;crypt&quot;&gt;暗号&lt;/a&gt;機能を使用すると、情報を取り戻すことができないためではない以上、すべてのデータを大量に、ハッシュ化には不向きです。より堅牢なアルゴリズムについては、&lt;a href=&quot;../digest&quot;&gt;ダイジェスト&lt;/a&gt;モジュールをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5477977d65c206b7b8a0bfb0ffcfed2d08e7d436" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;data/dumper&quot;&gt;Data::Dumper&lt;/a&gt; module can pretty-print Perl data structures:</source>
          <target state="translated">&lt;a href=&quot;data/dumper&quot;&gt;データ::ダンパ&lt;/a&gt;モジュールはPerlのデータ構造をかなり-印刷することができます。</target>
        </trans-unit>
        <trans-unit id="c389b29dcc18d72eca5cc18bef171945489bed86" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;data/dumper&quot;&gt;Data::Dumper&lt;/a&gt; module on CPAN (or the 5.005 release of Perl) is great for printing out data structures. The &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; module on CPAN (or the 5.8 release of Perl), provides a function called &lt;code&gt;dclone&lt;/code&gt; that recursively copies its argument.</source>
          <target state="translated">CPAN（またはPerlの5.005リリース）の&lt;a href=&quot;data/dumper&quot;&gt;Data :: Dumper&lt;/a&gt;モジュールは、データ構造の印刷に最適です。CPAN（または5.8リリースのPerl）の&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;モジュールは、引数を再帰的にコピーする &lt;code&gt;dclone&lt;/code&gt; と呼ばれる関数を提供します。</target>
        </trans-unit>
        <trans-unit id="3a7849edfc0302d7fe31cbb60d0e88c8f3db830b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;dbi&quot;&gt;DBI&lt;/a&gt; module provides an abstract interface to most database servers and types, including Oracle, DB2, Sybase, mysql, Postgresql, ODBC, and flat files. The DBI module accesses each database type through a database driver, or DBD. You can see a complete list of available drivers on CPAN: &lt;a href=&quot;http://www.cpan.org/modules/by-module/DBD/&quot;&gt;http://www.cpan.org/modules/by-module/DBD/&lt;/a&gt; . You can read more about DBI on &lt;a href=&quot;http://dbi.perl.org/&quot;&gt;http://dbi.perl.org/&lt;/a&gt; .</source>
          <target state="translated">&lt;a href=&quot;dbi&quot;&gt;DBIの&lt;/a&gt;モジュールは、Oracle、DB2、Sybaseのは、MySQL、Postgresqlの、ODBC、およびフラット・ファイルなど、ほとんどのデータベースサーバや種類、に抽象インタフェースを提供します。DBIモジュールは、データベースドライバー（DBD）を介して各データベースタイプにアクセスします。CPANで利用可能なドライバーの完全なリストを見ることができます：&lt;a href=&quot;http://www.cpan.org/modules/by-module/DBD/&quot;&gt;http&lt;/a&gt;：//www.cpan.org/modules/by-module/DBD/。DBIの詳細については、&lt;a href=&quot;http://dbi.perl.org/&quot;&gt;http：&lt;/a&gt; //dbi.perl.org/を参照してください。</target>
        </trans-unit>
        <trans-unit id="0fb29e7cd4504f7ca3895f71c6eb9fad7707159a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;encoding&quot;&gt;encoding&lt;/a&gt; module has been deprecated since perl 5.18 and the perl internals it requires have been removed with perl 5.26.</source>
          <target state="translated">&lt;a href=&quot;encoding&quot;&gt;符号化&lt;/a&gt;モジュールは、Perl 5.18以降廃止されており、それが必要とするPerlの内部は、Perl 5.26で除去されています。</target>
        </trans-unit>
        <trans-unit id="f90e864f3a759969a519520835fc4b34320f5652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; module, better known simply as &quot;MakeMaker&quot;, turns a Perl script, typically called &lt;code&gt;Makefile.PL&lt;/code&gt; , into a Makefile. The Unix tool &lt;code&gt;make&lt;/code&gt; uses this file to manage dependencies and actions to process and install a Perl distribution.</source>
          <target state="translated">&lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils :: MakeMakerのの&lt;/a&gt;よりよい単に「MakeMakerの」として知られているモジュールは、一般的に呼ばれる、Perlスクリプトをオン &lt;code&gt;Makefile.PL&lt;/code&gt; のMakefileに、。Unixツールの &lt;code&gt;make&lt;/code&gt; は、このファイルを使用して、Perlディストリビューションを処理およびインストールするための依存関係とアクションを管理します。</target>
        </trans-unit>
        <trans-unit id="b36a8fb9e123f79842afcd307b1051443b42499f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;file/find&quot;&gt;File::Find&lt;/a&gt; module, which comes with Perl, does all of the hard work to traverse a directory structure. It comes with Perl. You simply call the &lt;code&gt;find&lt;/code&gt; subroutine with a callback subroutine and the directories you want to traverse:</source>
          <target state="translated">&lt;a href=&quot;file/find&quot;&gt;ファイル::検索&lt;/a&gt;のPerlモジュールが付属していますが、ディレクトリ構造を横断するハードワークのすべてを行います。Perlが付属しています。コールバックサブルーチンとトラバースするディレクトリを指定して、 &lt;code&gt;find&lt;/code&gt; サブルーチンを呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="c85303530151e0f7d4bf77f032f56bce0f2d433a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;file/path&quot;&gt;File::Path&lt;/a&gt; module also has a legacy interface to the older &lt;code&gt;rmtree&lt;/code&gt; subroutine.</source>
          <target state="translated">&lt;a href=&quot;file/path&quot;&gt;ファイル::パスの&lt;/a&gt;モジュールも古いのレガシーインタフェースあり &lt;code&gt;rmtree&lt;/code&gt; のサブルーチンを。</target>
        </trans-unit>
        <trans-unit id="2e3abc4db13d619062f522429a3b20e4ff646e91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;file/path&quot;&gt;File::Path&lt;/a&gt; module, which comes with Perl, has a &lt;code&gt;remove_tree&lt;/code&gt; which can take care of all of the hard work for you:</source>
          <target state="translated">&lt;a href=&quot;file/path&quot;&gt;ファイル::パス&lt;/a&gt;のPerlモジュールが付属していますが、持ってい &lt;code&gt;remove_tree&lt;/code&gt; あなたのためにハードワークのすべての世話をすることができます。</target>
        </trans-unit>
        <trans-unit id="e423ba5fb093092e153154cd61200bfa0809ecf8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;file/stat&quot;&gt;File::stat&lt;/a&gt; module provides a convenient, by-name access mechanism:</source>
          <target state="translated">&lt;a href=&quot;file/stat&quot;&gt;ファイル:: STAT&lt;/a&gt;モジュールは便利、名前によるアクセス機構を提供します。</target>
        </trans-unit>
        <trans-unit id="147153b8beaaff8771aea84e885cb82d17734d7a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;findbin&quot;&gt;FindBin&lt;/a&gt; module, which comes with Perl, might work. It finds the directory of the currently running script and puts it in &lt;code&gt;$Bin&lt;/code&gt; , which you can then use to construct the right library path:</source>
          <target state="translated">&lt;a href=&quot;findbin&quot;&gt;FindBinの&lt;/a&gt; Perlのモジュールが付属していますが、うまくいくかもしれません。現在実行中のスクリプトのディレクトリを見つけて &lt;code&gt;$Bin&lt;/code&gt; に配置します。これを使用して、適切なライブラリパスを作成できます。</target>
        </trans-unit>
        <trans-unit id="177b530c271fe1dca56344e28974f18250fe298e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;findbin&quot;&gt;FindBin&lt;/a&gt; module, which comes with Perl, might work. It finds the directory of the currently running script and puts it in &lt;code&gt;$Bin&lt;/code&gt;, which you can then use to construct the right library path:</source>
          <target state="translated">Perlに付属の&lt;a href=&quot;findbin&quot;&gt;FindBin&lt;/a&gt;モジュールが機能する可能性があります。現在実行中のスクリプトのディレクトリを見つけて &lt;code&gt;$Bin&lt;/code&gt; に配置します。これを使用して、正しいライブラリパスを作成できます。</target>
        </trans-unit>
        <trans-unit id="6627242b752186d85aed5b69d9aaec46b0dd05af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Algorithm::Loops&quot;&gt;Algorithm::Loops&lt;/a&gt; module also provides the &lt;code&gt;NextPermute&lt;/code&gt; and &lt;code&gt;NextPermuteNum&lt;/code&gt; functions which efficiently find all unique permutations of an array, even if it contains duplicate values, modifying it in-place: if its elements are in reverse-sorted order then the array is reversed, making it sorted, and it returns false; otherwise the next permutation is returned.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Algorithm::Loops&quot;&gt;アルゴリズム::ループ&lt;/a&gt;モジュールも提供 &lt;code&gt;NextPermute&lt;/code&gt; と &lt;code&gt;NextPermuteNum&lt;/code&gt; インプレース、それを修正する、効率的に重複する値が含まれている場合でも、アレイのすべての固有の順列を見つける機能を：その要素が逆ソート順に、配列が逆転している場合、ソートし、falseを返します。それ以外の場合は、次の順列が返されます。</target>
        </trans-unit>
        <trans-unit id="7f004cbac628e9968204a02264b31a3bb1043a19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Array::Iterator::Circular&quot;&gt;Array::Iterator::Circular&lt;/a&gt; creates an iterator object for circular arrays:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Array::Iterator::Circular&quot;&gt;アレイ::イテレータ::丸は&lt;/a&gt;、円形アレイのイテレータオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="a8c05beafd26231c80f038931300ac0e459427b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI&lt;/a&gt; module provides an abstract interface to most database servers and types, including Oracle, DB2, Sybase, mysql, Postgresql, ODBC, and flat files. The DBI module accesses each database type through a database driver, or DBD. You can see a complete list of available drivers on CPAN: &lt;a href=&quot;http://www.cpan.org/modules/by-module/DBD/&quot;&gt;http://www.cpan.org/modules/by-module/DBD/&lt;/a&gt; . You can read more about DBI on &lt;a href=&quot;http://dbi.perl.org/&quot;&gt;http://dbi.perl.org/&lt;/a&gt; .</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBIの&lt;/a&gt;モジュールは、Oracle、DB2、Sybaseのは、MySQL、Postgresqlの、ODBC、およびフラット・ファイルなど、ほとんどのデータベースサーバや種類、に抽象インタフェースを提供します。DBIモジュールは、データベースドライバーまたはDBDを介して各データベースタイプにアクセスします。CPANで利用可能なドライバーの完全なリストを見ることができます：&lt;a href=&quot;http://www.cpan.org/modules/by-module/DBD/&quot;&gt;http&lt;/a&gt; : //www.cpan.org/modules/by-module/DBD/。DBIの詳細については、&lt;a href=&quot;http://dbi.perl.org/&quot;&gt;http：&lt;/a&gt; //dbi.perl.org/を参照してください。</target>
        </trans-unit>
        <trans-unit id="d99e17e2d810ab06df1befd3ba4deffe8e1f4100" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Data::Diver&quot;&gt;Data::Diver&lt;/a&gt; module on CPAN can do it for you too. Its &lt;code&gt;Dive&lt;/code&gt; subroutine can tell you not only if the keys exist but also get the value:</source>
          <target state="translated">CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/Data::Diver&quot;&gt;Data :: Diver&lt;/a&gt;モジュールもあなたのためにそれをすることができます。その &lt;code&gt;Dive&lt;/code&gt; サブルーチンは、キーが存在するかどうかだけでなく、値を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="2f20a46404ea5d10e8ff52857742923d6a8c636c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date::Calc&lt;/a&gt; module provides two functions to calculate these, too:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;日付::のCalc&lt;/a&gt;モジュールは、あまりにも、これらを計算するための2つの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="cffc0b8a618b23964a5ae541c5cad5a91da659e3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Devel::NYTProf&quot;&gt;Devel::NYTProf&lt;/a&gt; (New York Times Profiler) does both statement and subroutine profiling. It's available from CPAN and you also invoke it with the &lt;code&gt;-d&lt;/code&gt; switch:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Devel::NYTProf&quot;&gt;Develの:: NYTProf&lt;/a&gt;（ニューヨーク・タイムズプロファイラー）は、両方の文とサブルーチンのプロファイリングを行います。これはCPANから入手でき、 &lt;code&gt;-d&lt;/code&gt; スイッチを使用して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="36fe1514538dca6b4e14625a53ea351dc45f0bbb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; module can decode base 64-encoded email message parts transparently so the developer doesn't need to worry about it.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;メール:: MIMEの&lt;/a&gt;モジュールは透過的にその開発者はそれを心配する必要はありませんベース64でエンコードされた電子メールメッセージの一部をデコードすることができます。</target>
        </trans-unit>
        <trans-unit id="5544c90428de4242a1010e3b0f0f5fbfd72933f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/File::Find::Closures&quot;&gt;File::Find::Closures&lt;/a&gt;, which you can download from CPAN, provides many ready-to-use subroutines that you can use with &lt;a href=&quot;file/find&quot;&gt;File::Find&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/File::Find::Closures&quot;&gt;ファイル::検索::クロージャ&lt;/a&gt;あなたはCPANからダウンロードすることができ、あなたが使用できることを多くのすぐに使用できるサブルーチンを提供し&lt;a href=&quot;file/find&quot;&gt;、ファイル::検索します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="56af297ba8a5f6d4fadfc00398e4a75a93e0389e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/File::Find::Rule&quot;&gt;File::Find::Rule&lt;/a&gt; module, which you can download from CPAN, has a similar interface, but does the traversal for you too:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/File::Find::Rule&quot;&gt;ファイル::検索::ルール&lt;/a&gt;あなたはCPANからダウンロードできるモジュールは、同様のインタフェースを持っていますが、あまりにもあなたのためのトラバーサルを行います。</target>
        </trans-unit>
        <trans-unit id="b152dc512307ef4ac58f7c9208c20855dec936d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/File::Finder&quot;&gt;File::Finder&lt;/a&gt;, which you can download from CPAN, can help you create the callback subroutine using something closer to the syntax of the &lt;code&gt;find&lt;/code&gt; command-line utility:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/File::Finder&quot;&gt;ファイル::ファインダー&lt;/a&gt;、あなたはCPANからダウンロードすることができ、あなたが近いの構文に何かを使用してコールバックサブルーチンを作成することができます &lt;code&gt;find&lt;/code&gt; コマンドラインユーティリティ：</target>
        </trans-unit>
        <trans-unit id="1598869d41d1eca117a3416dff8d5309f0c6cfec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/File::ReadBackwards&quot;&gt;File::ReadBackwards&lt;/a&gt; module also has the advantage of setting the input record separator to a regular expression.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/File::ReadBackwards&quot;&gt;ファイル:: ReadBackwardsは、&lt;/a&gt;モジュールは、正規表現の入力レコードセパレータを設定するという利点があります。</target>
        </trans-unit>
        <trans-unit id="91110246c66bf6d661128beb45e4417253ba4c01" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Interactive&quot;&gt;IO::Interactive&lt;/a&gt; module does the best it can to give you an answer. Its &lt;code&gt;is_interactive&lt;/code&gt; function returns an output filehandle; that filehandle points to standard output if the module thinks the session is interactive. Otherwise, the filehandle is a null handle that simply discards the output:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Interactive&quot;&gt;IO ::インタラクティブな&lt;/a&gt;モジュールはあなたに答えを与えるためにそれができる最善を尽くします。その &lt;code&gt;is_interactive&lt;/code&gt; 関数は出力ファイルハンドルを返します。モジュールがセッションが対話型であると考える場合、そのファイルハンドルは標準出力を指します。それ以外の場合、filehandleは出力を単に破棄するnullハンドルです。</target>
        </trans-unit>
        <trans-unit id="6b13cf53c66e0915c0e8281e749fbd4b759e7ba2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Proc::Daemon&quot;&gt;Proc::Daemon&lt;/a&gt; module, available from CPAN, provides a function to perform these actions for you.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Proc::Daemon&quot;&gt;PROC ::デーモン&lt;/a&gt; CPANから利用できるモジュールは、あなたのためにこれらのアクションを実行するための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="078338e81125883115260ece46dd352b4457327c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Sys::Hostname::Long&quot;&gt;Sys::Hostname::Long&lt;/a&gt; module takes a different approach and tries harder to return the fully qualified hostname:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Sys::Hostname::Long&quot;&gt;Sys ::ホスト名::ロング&lt;/a&gt;モジュールは異なるアプローチをとり、完全修飾ホスト名を返すために難しくしようとします：</target>
        </trans-unit>
        <trans-unit id="d7d7335f50cc47451871f0f97f15916c1b4287d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Task::Kensho&quot;&gt;Task::Kensho&lt;/a&gt; module has a list of recommended modules which you should review as a good starting point.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Task::Kensho&quot;&gt;タスク:: Kenshoの&lt;/a&gt;モジュールは、あなたが良い出発点として検討すべき推奨モジュールのリストを持っています。</target>
        </trans-unit>
        <trans-unit id="96f2822c5bca6e995fc1a0007a9363af6e5934b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ReadKey&quot;&gt;Term::ReadKey&lt;/a&gt; module from CPAN offers an easy-to-use interface that should be more efficient than shelling out to &lt;b&gt;stty&lt;/b&gt; for each key. It even includes limited support for Windows.</source>
          <target state="translated">CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/Term::ReadKey&quot;&gt;Term :: ReadKey&lt;/a&gt;モジュールは、キーごとに&lt;b&gt;stty&lt;/b&gt;を使用するよりも効率的な、使いやすいインターフェースを提供します。Windowsの限定的なサポートも含まれます。</target>
        </trans-unit>
        <trans-unit id="32118c4d7f9e3bede84a1a66430b5426071bf4d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Tussle&quot;&gt;Unicode::Tussle&lt;/a&gt; CPAN module includes many programs to help with working with Unicode, including these programs to fully or partly replace standard utilities:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Tussle&quot;&gt;ユニコード::闘争&lt;/a&gt; CPANモジュールは、完全にまたは部分的に標準ユーティリティを置き換えるために、これらのプログラムを含め、ユニコードでの作業を支援するために多くのプログラムが含まれています。</target>
        </trans-unit>
        <trans-unit id="919f72853738df881eb6e91400681adc998b688b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://search.cpan.org/perldoc/strictures#VERSION-2&quot;&gt;strictures&lt;/a&gt; module on CPAN offers one example of a warnings subset that the module's authors believe is relatively safe to fatalize.</source>
          <target state="translated">CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/strictures#VERSION-2&quot;&gt;strictures&lt;/a&gt;モジュールは、モジュールの作成者が致命的に比較的安全であると信じている警告サブセットの1つの例を提供します。</target>
        </trans-unit>
        <trans-unit id="843917bc0f80fad466bd923d5aab8d1c0906f90e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt; objects also have a &lt;code&gt;flush&lt;/code&gt; method. You can flush the buffer any time you want without auto-buffering</source>
          <target state="translated">&lt;a href=&quot;io/handle&quot;&gt;IO ::ハンドル&lt;/a&gt;も持っているオブジェクト &lt;code&gt;flush&lt;/code&gt; 方法を。自動バッファリングなしでいつでもバッファをフラッシュできます</target>
        </trans-unit>
        <trans-unit id="5839e7279588dcb1c4433f17b527ae9a9d772eed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ipc/open2&quot;&gt;IPC::Open2&lt;/a&gt; module (part of the standard perl distribution) is an easy-to-use approach that internally uses &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; to do the job. Make sure you read the deadlock warnings in its documentation, though (see &lt;a href=&quot;ipc/open2&quot;&gt;IPC::Open2&lt;/a&gt;). See &lt;a href=&quot;perlipc#Bidirectional-Communication-with-Another-Process&quot;&gt;Bidirectional Communication with Another Process in perlipc&lt;/a&gt; and &lt;a href=&quot;perlipc#Bidirectional-Communication-with-Yourself&quot;&gt;Bidirectional Communication with Yourself in perlipc&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ipc/open2&quot;&gt;IPC :: Open2の&lt;/a&gt;モジュール（標準Perl配布の一部）は、内部的に使用することを簡単に使用できるアプローチである &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; 仕事をします。ただし、ドキュメントのデッドロック警告を必ず読んでください（&lt;a href=&quot;ipc/open2&quot;&gt;IPC :: Open2を&lt;/a&gt;参照）。&lt;a href=&quot;perlipc#Bidirectional-Communication-with-Another-Process&quot;&gt;perlipcの別のプロセス&lt;/a&gt;との&lt;a href=&quot;perlipc#Bidirectional-Communication-with-Yourself&quot;&gt;双方向通信&lt;/a&gt;およびperlipcの自分との双方向通信を参照してください。</target>
        </trans-unit>
        <trans-unit id="09e04b4b58ffa26e2662b854208dafbdb133126a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mime/base64&quot;&gt;MIME::Base64&lt;/a&gt; package handles this as well as the MIME/QP encoding. Decoding base 64 becomes as simple as:</source>
          <target state="translated">&lt;a href=&quot;mime/base64&quot;&gt;MIME :: Base64での&lt;/a&gt;パッケージハンドル本だけでなく、MIME / QPエンコーディング。Base 64のデコードは次のように簡単になります。</target>
        </trans-unit>
        <trans-unit id="0b7108620b7e75ec5ba066fc83c0e7f6113d802f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mro&quot;&gt;mro&lt;/a&gt; pragma provides some functions for manipulating the method cache directly.</source>
          <target state="translated">&lt;a href=&quot;mro&quot;&gt;MRO&lt;/a&gt;プラグマは、直接法のキャッシュを操作するためのいくつかの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="f076d77a637b12522b1379f81df9ca81640a9292" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net/domain&quot;&gt;Net::Domain&lt;/a&gt; module, which is part of the Standard Library starting in Perl 5.7.3, can get you the fully qualified domain name (FQDN), the host name, or the domain name.</source>
          <target state="translated">&lt;a href=&quot;net/domain&quot;&gt;ネット::ドメイン&lt;/a&gt;のPerl 5.7.3以降で標準ライブラリの一部であるモジュールは、あなたの完全修飾ドメイン名（FQDN）、ホスト名、またはドメイン名を取得することができます。</target>
        </trans-unit>
        <trans-unit id="76dc71fd851bfecf3d4eefc768e03ef389a05460" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; pragma affects all the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; calls after the pragma by setting default layers. If you want to affect only certain streams, use explicit layers directly in the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">&lt;a href=&quot;open&quot;&gt;オープン&lt;/a&gt;プラグマは、すべての影響 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; デフォルト層を設定することで、プラグマの後に呼び出されます。特定のストリームのみに影響を与えたい場合は、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 呼び出しで明示的なレイヤーを直接使用します。</target>
        </trans-unit>
        <trans-unit id="3b5f1dd446b40bac39fbf56bdb1eee6bbfa27f8d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; pragma affects all the &lt;code&gt;open()&lt;/code&gt; calls after the pragma by setting default layers. If you want to affect only certain streams, use explicit layers directly in the &lt;code&gt;open()&lt;/code&gt; call.</source>
          <target state="translated">&lt;a href=&quot;open&quot;&gt;オープン&lt;/a&gt;プラグマは、すべての影響 &lt;code&gt;open()&lt;/code&gt; デフォルト層を設定することで、プラグマの後に呼び出されます。特定のストリームのみに影響を与える場合は、 &lt;code&gt;open()&lt;/code&gt; 呼び出しで明示的なレイヤーを直接使用します。</target>
        </trans-unit>
        <trans-unit id="2cf8373e5ee8839618cf4f3d8412574499af0964" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt; module is one of several ways that Perl lets you define inheritance relationships.</source>
          <target state="translated">&lt;a href=&quot;parent&quot;&gt;親&lt;/a&gt;モジュールは、Perlを使用して、継承関係を定義することができますことを、いくつかの方法の一つです。</target>
        </trans-unit>
        <trans-unit id="4ba42fed843fbbf72076d217b81b8e5c3f052f2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perlrun#-C-%5Bnumber%2Flist%5D&quot;&gt;&lt;code&gt;-C&lt;/code&gt;&lt;/a&gt; command line option can specify that certain inputs to the program are Unicode, and the values of this can be read by your Perl code, see &lt;a href=&quot;perlvar#%24%7B%5EUNICODE%7D&quot;&gt;&quot;${^UNICODE}&quot; in perlvar&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlrun#-C-%5Bnumber%2Flist%5D&quot;&gt; &lt;code&gt;-C&lt;/code&gt; &lt;/a&gt;コマンドラインオプションを参照、プログラムへの特定の入力がUnicodeであり、この値は、あなたのPerlコードで読み取ることができるように指定することができます&lt;a href=&quot;perlvar#%24%7B%5EUNICODE%7D&quot;&gt;はperlvarに「$ {^ UNICODE}」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b0fe01583804e7c24edcd36bf4d1dc86edd7004" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C &lt;/a&gt; command line option can specify that certain inputs to the program are Unicode, and the values of this can be read by your Perl code, see &lt;a href=&quot;perlvar#%24%7b%5eUNICODE%7d&quot;&gt;${^UNICODE} in perlvar&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C&lt;/a&gt;コマンドラインオプションは、プログラムに特定の入力がUnicodeをしており、これの値は、あなたのPerlコードで読み取ることができるように指定することができ、参照&lt;a href=&quot;perlvar#%24%7b%5eUNICODE%7d&quot;&gt;はperlvarで$ {^ UNICODE}を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc877ff3004436e21e412f3d7536c1241e3ab1bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; documentation has general advice about data security. If you are using the &lt;a href=&quot;dbi&quot;&gt;DBI&lt;/a&gt; module, use placeholder to fill in data. If you are running external programs with &lt;code&gt;system&lt;/code&gt; or &lt;code&gt;exec&lt;/code&gt;, use the list forms. There are many other precautions that you should take, too many to list here, and most of them fall under the category of not using any data that you don't intend to use. Trust no one.</source>
          <target state="translated">&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;ドキュメントには、データセキュリティに関する一般的なアドバイスがあります。&lt;a href=&quot;dbi&quot;&gt;DBI&lt;/a&gt;モジュールを使用している場合は、プレースホルダーを使用してデータを入力します。 &lt;code&gt;system&lt;/code&gt; または &lt;code&gt;exec&lt;/code&gt; で外部プログラムを実行している場合は、リストフォームを使用してください。他にも注意すべき点がたくさんありますが、ここにリストするには多すぎます。それらのほとんどは、使用する予定のないデータを使用しないというカテゴリに分類されます。誰も信じない。</target>
        </trans-unit>
        <trans-unit id="1dd5f1da5843d43e215f1c5605c7bd2602ba3c8d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; documentation has general advice about data security. If you are using the &lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI&lt;/a&gt; module, use placeholder to fill in data. If you are running external programs with &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, use the list forms. There are many other precautions that you should take, too many to list here, and most of them fall under the category of not using any data that you don't intend to use. Trust no one.</source>
          <target state="translated">&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;ドキュメントには、データセキュリティに関する一般的なアドバイスがあります。&lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI&lt;/a&gt;モジュールを使用している場合は、プレースホルダーを使用してデータを入力します。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; で外部プログラムを実行している場合は、リスト形式を使用してください。他にも多くの予防策を講じる必要がありますが、ここにリストするには多すぎますが、それらのほとんどは、使用する予定のないデータを使用しないというカテゴリに分類されます。誰も信じない。</target>
        </trans-unit>
        <trans-unit id="a18edb94d1038cfdd671ad02ef0a771da5913e80" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt; section contains an example of tying handles.</source>
          <target state="translated">&lt;a href=&quot;perltie&quot;&gt;perltieやの&lt;/a&gt;セクションでは、同点のハンドルの例が含まれています。</target>
        </trans-unit>
        <trans-unit id="8d872a7f80e3dcd2bcfe4f77e0ab218cfcf5f3d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt; section uses a good example of tying scalars by associating process IDs with priority.</source>
          <target state="translated">&lt;a href=&quot;perltie&quot;&gt;perltieやの&lt;/a&gt;部分は、優先的にプロセスIDを関連付けることにより、スカラーを結ぶの良い例を使用します。</target>
        </trans-unit>
        <trans-unit id="e969c75d9a86d34240a9b4b0c3bacd72a35586a9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perlvar#%24%5EO&quot;&gt;&lt;code&gt;$^O&lt;/code&gt;&lt;/a&gt; variable and the &lt;a href=&quot;config#archname&quot;&gt;&lt;code&gt;$Config{archname}&lt;/code&gt;&lt;/a&gt; values for various DOSish perls are as follows:</source>
          <target state="translated">さまざまなDOSishperlの&lt;a href=&quot;perlvar#%24%5EO&quot;&gt; &lt;code&gt;$^O&lt;/code&gt; &lt;/a&gt;変数と&lt;a href=&quot;config#archname&quot;&gt; &lt;code&gt;$Config{archname}&lt;/code&gt; &lt;/a&gt;値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d3dddc8cefb2df3a4b2f380a117370ecb94e0324" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module (part of the standard Perl distribution) implements &lt;code&gt;ceil()&lt;/code&gt; , &lt;code&gt;floor()&lt;/code&gt; , and a number of other mathematical and trigonometric functions.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIXの&lt;/a&gt;モジュール（標準Perl配布の一部）を実装する &lt;code&gt;ceil()&lt;/code&gt; 、 &lt;code&gt;floor()&lt;/code&gt; 、および他の数学的及び三角関数の数。</target>
        </trans-unit>
        <trans-unit id="3cfd8963d803d863b1baabc1a6fb32761a10e916" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module (part of the standard Perl distribution) implements &lt;code&gt;ceil()&lt;/code&gt;, &lt;code&gt;floor()&lt;/code&gt;, and a number of other mathematical and trigonometric functions.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIXの&lt;/a&gt;モジュール（標準Perl配布の一部）を実装する &lt;code&gt;ceil()&lt;/code&gt; 、 &lt;code&gt;floor()&lt;/code&gt; 、および他の数学的及び三角関数の数。</target>
        </trans-unit>
        <trans-unit id="eb81881ffc1ffa7659057b3aad0d531c1c255d43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module can also format a date as the day of the year or week of the year.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIXの&lt;/a&gt;モジュールはまた、今年の年または曜日と日付の書式を設定することができます。</target>
        </trans-unit>
        <trans-unit id="f19febd4ca12ddc4d78578d816e9ed0531d16d0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module makes extensive use of this type.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIXの&lt;/a&gt;モジュールは、この型を多用します。</target>
        </trans-unit>
        <trans-unit id="dda44e28f3e372b46a40263a9e3342beb0a11995" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posix#getattr&quot;&gt;&lt;code&gt;POSIX::getattr&lt;/code&gt;&lt;/a&gt; function can do this more portably on systems purporting POSIX compliance. See also the &lt;a href=&quot;Term::ReadKey&quot;&gt;&lt;code&gt;Term::ReadKey&lt;/code&gt;&lt;/a&gt; module on CPAN.</source>
          <target state="translated">&lt;a href=&quot;posix#getattr&quot;&gt; &lt;code&gt;POSIX::getattr&lt;/code&gt; &lt;/a&gt;機能は、POSIX準拠を主張するシステムでより多くの移植性これを行うことができます。CPANの&lt;a href=&quot;Term::ReadKey&quot;&gt; &lt;code&gt;Term::ReadKey&lt;/code&gt; &lt;/a&gt;モジュールも参照してください。</target>
        </trans-unit>
        <trans-unit id="e9379f8868c28dae16be3be866b6601876aaeaba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;provide&quot;&gt;provide&lt;/a&gt; module from CPAN can be used to select one of several possible modules to load based on the version of Perl that is running.</source>
          <target state="translated">CPANの&lt;a href=&quot;provide&quot;&gt;provide&lt;/a&gt;モジュールを使用して、実行中のPerlのバージョンに基づいてロードするいくつかの可能なモジュールの1つを選択できます。</target>
        </trans-unit>
        <trans-unit id="2b0fd33e8403b054935aab9d8ee0ab65dd34b689" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt; module to alter behaviour and aid debugging.</source>
          <target state="translated">&lt;a href=&quot;re&quot;&gt;再の&lt;/a&gt; ALTER行動と援助デバッグするモジュール。</target>
        </trans-unit>
        <trans-unit id="82ec47dd24e184de112e4cf2a9605a038adc3316" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;strictures#VERSION-2&quot;&gt;strictures&lt;/a&gt; module on CPAN offers one example of a warnings subset that the module's authors believe is relatively safe to fatalize.</source>
          <target state="translated">CPANの&lt;a href=&quot;strictures#VERSION-2&quot;&gt;strictures&lt;/a&gt;モジュールは、モジュールの作成者が比較的安全に致命的になると信じている警告サブセットの一例を提供します。</target>
        </trans-unit>
        <trans-unit id="cb49b0f767217eaf2addd5f51c9329970eca01df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;sys/hostname&quot;&gt;Sys::Hostname&lt;/a&gt; module, part of the Standard Library, can also get the hostname:</source>
          <target state="translated">&lt;a href=&quot;sys/hostname&quot;&gt;Sys ::ホスト名&lt;/a&gt;モジュール、標準ライブラリの一部は、また、ホスト名を取得することができます：</target>
        </trans-unit>
        <trans-unit id="220edf79ba9ff4834b00c1168d4289b47c73eb1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;term/cap&quot;&gt;Term::Cap&lt;/a&gt; module can also get the special sequence if you want to deal with the low-level details of terminal control. The &lt;code&gt;Tputs&lt;/code&gt; method returns the string for the given capability:</source>
          <target state="translated">&lt;a href=&quot;term/cap&quot;&gt;ターム::キャップ&lt;/a&gt;あなたは、端末制御の低レベルの詳細に対処したい場合は、モジュールは、特別なシーケンスを得ることができます。 &lt;code&gt;Tputs&lt;/code&gt; メソッドは、指定された機能のための文字列を返します。</target>
        </trans-unit>
        <trans-unit id="e87c5439cafd856838e66bb969aac3bccda2430c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; and &lt;a href=&quot;threads/shared&quot;&gt;threads::shared&lt;/a&gt; modules are included in the core Perl distribution. Additionally, they are maintained as a separate modules on CPAN, so you can check there for any updates.</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;と&lt;a href=&quot;threads/shared&quot;&gt;スレッド::共有&lt;/a&gt;モジュールはコアPerl配布に含まれています。さらに、これらはCPANで個別のモジュールとして維持されるため、そこで更新を確認できます。</target>
        </trans-unit>
        <trans-unit id="f6686ccb369690f0486ecaf90ca58010d28981b5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; and &lt;a href=&quot;threads::shared&quot;&gt;threads::shared&lt;/a&gt; modules are included in the core Perl distribution. Additionally, they are maintained as a separate modules on CPAN, so you can check there for any updates.</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;と&lt;a href=&quot;threads::shared&quot;&gt;スレッド::共有&lt;/a&gt;モジュールはコアPerl配布に含まれています。さらに、それらはCPANで個別のモジュールとして維持されるため、更新がないか確認できます。</target>
        </trans-unit>
        <trans-unit id="2a9bb0674257a5140b5151993d5c3d3a37202400" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module provides the basic functions you need to write threaded programs. In the following sections, we'll cover the basics, showing you what you need to do to create a threaded program. After that, we'll go over some of the features of the &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module that make threaded programming easier.</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッドの&lt;/a&gt;モジュールを使用すると、スレッド化プログラムを作成するために必要な基本的な機能を提供します。次のセクションでは、基本をカバーし、スレッド化されたプログラムを作成するために必要なことを示します。その後、&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;化プログラミングを容易にするスレッドモジュールのいくつかの機能について説明します。</target>
        </trans-unit>
        <trans-unit id="2a739a40945ec3475dfa2806df561fe8eb1d910a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module provides the tools you need to create new threads. Like any other module, you need to tell Perl that you want to use it; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads;&lt;/code&gt; imports all the pieces you need to create basic threads.</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッドの&lt;/a&gt;モジュールを使用すると、新しいスレッドを作成するために必要なツールを提供します。他のモジュールと同様に、使用することをPerlに指示する必要があります。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads;&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用し&lt;/a&gt;ます。基本的なスレッドを作成するために必要なすべての部分をインポートします。</target>
        </trans-unit>
        <trans-unit id="5c7c73d979dc1bd0fbebb065f801ce33de931673" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module provides the tools you need to create new threads. Like any other module, you need to tell Perl that you want to use it; &lt;code&gt;use threads;&lt;/code&gt; imports all the pieces you need to create basic threads.</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッドの&lt;/a&gt;モジュールを使用すると、新しいスレッドを作成するために必要なツールを提供します。他のモジュールと同様に、Perlにそれを使用することを伝える必要があります。 &lt;code&gt;use threads;&lt;/code&gt; 基本的なスレッドを作成するために必要なすべての部分をインポートします。</target>
        </trans-unit>
        <trans-unit id="ac95afd4b80a6c32d7d4b6fc126fc11993d69484" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;time/gmtime&quot;&gt;Time::gmtime&lt;/a&gt; and &lt;a href=&quot;time/localtime&quot;&gt;Time::localtime&lt;/a&gt; modules provide a convenient, by-name access mechanism to the gmtime() and localtime() functions, respectively.</source>
          <target state="translated">&lt;a href=&quot;time/gmtime&quot;&gt;時間:: gmtimeは&lt;/a&gt;と&lt;a href=&quot;time/localtime&quot;&gt;時間:: localtimeの&lt;/a&gt;モジュールは、それぞれのgmtime（）やlocaltimeの（）関数に便利な、名前によるアクセス機構を提供します。</target>
        </trans-unit>
        <trans-unit id="27e7660ba02616c82b0460251677001be2bab8d2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module (part of the standard distribution as of Perl 5.8) measures time with the &lt;code&gt;gettimeofday()&lt;/code&gt; system call, which returns the time in microseconds since the epoch. If you can't install &lt;a href=&quot;time/hires&quot;&gt;Time::HiRes&lt;/a&gt; for older Perls and you are on a Unixish system, you may be able to call &lt;code&gt;gettimeofday(2)&lt;/code&gt; directly. See &lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;time/hires&quot;&gt;時間::ハイレゾ&lt;/a&gt;モジュール（Perlの5.8のような標準的なディストリビューションの一部）を用いて時間を計測 &lt;code&gt;gettimeofday()&lt;/code&gt; エポックからマイクロ秒の時間を戻すシステムコール、。古いPerl用の&lt;a href=&quot;time/hires&quot;&gt;Time :: HiRes&lt;/a&gt;をインストールできず、Unixishシステムを使用している場合は、 &lt;code&gt;gettimeofday(2)&lt;/code&gt; を直接呼び出すことができる場合があります。&lt;a href=&quot;functions/syscall&quot;&gt;syscallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70cd112c1d983694e459a2b5affce0b2c176b5e1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;time/piece&quot;&gt;Time::Piece&lt;/a&gt; module exports a new &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; that returns an object, and &lt;a href=&quot;time/seconds&quot;&gt;Time::Seconds&lt;/a&gt; exports the &lt;code&gt;ONE_DAY&lt;/code&gt; constant that is a set number of seconds. This means that it always gives the time 24 hours ago, which is not always yesterday. This can cause problems around the end of daylight saving time when there's one day that is 25 hours long.</source>
          <target state="translated">&lt;a href=&quot;time/piece&quot;&gt;時間::ワンピースの&lt;/a&gt;モジュールがエクスポート新しい &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; のオブジェクトを返し、&lt;a href=&quot;time/seconds&quot;&gt;タイム::秒の&lt;/a&gt;輸出 &lt;code&gt;ONE_DAY&lt;/code&gt; を設定した秒数である定数。これは、常に24時間前の時刻を提供することを意味し、昨日とは限りません。これにより、25時間の1日がある場合、夏時間の終わり頃に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ad7b96811e1e0447b346c7c68b0b6f49a0e303ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;time/piece&quot;&gt;Time::Piece&lt;/a&gt; module, which comes with Perl, replaces &lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt; with a version that returns an object. It also overloads the comparison operators so you can compare them directly:</source>
          <target state="translated">&lt;a href=&quot;time/piece&quot;&gt;時間::ピース&lt;/a&gt;のPerlモジュールが付属していますが、置き換え&lt;a href=&quot;functions/localtime&quot;&gt;のlocaltimeを&lt;/a&gt;オブジェクトを返しバージョンで。また、比較演算子をオーバーロードして、直接比較できるようにします。</target>
        </trans-unit>
        <trans-unit id="3b4c77d08ed357c92167918b7693fcf1d9ab7f90" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;universal#VERSION-%28-%5B-REQUIRE-%5D-%29&quot;&gt;default &lt;code&gt;VERSION&lt;/code&gt; method&lt;/a&gt;, inherited from the &lt;a href=&quot;universal&quot;&gt;&lt;code&gt;UNIVERSAL&lt;/code&gt;&lt;/a&gt; class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;universal#VERSION-%28-%5B-REQUIRE-%5D-%29&quot;&gt;デフォルトの &lt;code&gt;VERSION&lt;/code&gt; の方法&lt;/a&gt;から継承された、&lt;a href=&quot;universal&quot;&gt; &lt;code&gt;UNIVERSAL&lt;/code&gt; の&lt;/a&gt;クラスは、与えられたバージョンでは、変数の値よりも大きくcroaksであれば &lt;code&gt;$Module::VERSION&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b06bcf860d30364b7b86c5e727206450a5e8ad8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module provides the most reliable way to compare version numbers in all the various ways they might be provided or might exist within modules. Given two strings containing version numbers, &lt;code&gt;$v1&lt;/code&gt; and &lt;code&gt;$v2&lt;/code&gt;, they should be converted to &lt;code&gt;version&lt;/code&gt; objects before using ordinary comparison operators. For example:</source>
          <target state="translated">&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;モジュールは、彼らが提供される可能性がありますまたはモジュール内に存在する可能性のあるすべてのさまざまな方法でバージョン番号を比較するための最も信頼性の高い方法を提供します。バージョン番号 &lt;code&gt;$v1&lt;/code&gt; と &lt;code&gt;$v2&lt;/code&gt; を含む2つの文字列がある場合、通常の比較演算子を使用する前に、それらを &lt;code&gt;version&lt;/code&gt; オブジェクトに変換する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="7624d8ccf09fad70c6649ad6b1aa4fa701ecfb1c" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-C&lt;/b&gt; flag controls some of the Perl Unicode features.</source>
          <target state="translated">&lt;b&gt;-C&lt;/b&gt;フラグ制御PerlのUnicodeの機能の一部。</target>
        </trans-unit>
        <trans-unit id="eeee1b2385aaa3798bce91466fcda51762a843eb" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-C&lt;/b&gt; option only works if it is specified on the command line as well (with the same sequence of letters or numbers following). Either specify this option on the command line, or, if your system supports it, make your script executable and run it directly instead of passing it to perl.</source>
          <target state="translated">&lt;b&gt;-C&lt;/b&gt;それは（文字または数字以下の同じ配列を有する）だけでなく、コマンドラインで指定されている場合のオプションにのみ動作します。コマンドラインでこのオプションを指定するか、システムでサポートされている場合は、スクリプトを実行可能にして、perlに渡す代わりに直接実行します。</target>
        </trans-unit>
        <trans-unit id="adbe88919d7c337e67d217e417ae52c5e78e86cc" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-DL&lt;/b&gt; command-line switch is obsolete since circa Perl 5.6.0 (it was available only if Perl was built with &lt;code&gt;-DDEBUGGING&lt;/code&gt; ). The switch was used to track Perl's memory allocations and possible memory leaks. These days the use of malloc debugging tools like</source>
          <target state="translated">&lt;b&gt;-DL&lt;/b&gt;コマンドラインスイッチは、年頃のPerl 5.6.0（Perlはで構築された場合にのみ使用可能だったので廃止されました &lt;code&gt;-DDEBUGGING&lt;/code&gt; ）。このスイッチは、Perlのメモリ割り当てとメモリリークの可能性を追跡するために使用されていました。最近のようなmallocデバッグツールの使用</target>
        </trans-unit>
        <trans-unit id="10ff88d6a964ef244acd1861f020528cdc0021d6" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-DL&lt;/b&gt; command-line switch is obsolete since circa Perl 5.6.0 (it was available only if Perl was built with &lt;code&gt;-DDEBUGGING&lt;/code&gt;). The switch was used to track Perl's memory allocations and possible memory leaks. These days the use of malloc debugging tools like</source>
          <target state="translated">&lt;b&gt;-DL&lt;/b&gt;コマンドラインスイッチは、年頃のPerl 5.6.0（Perlはで構築された場合にのみ使用可能だったので廃止されました &lt;code&gt;-DDEBUGGING&lt;/code&gt; ）。このスイッチは、Perlのメモリ割り当てとメモリリークの可能性を追跡するために使用されました。最近のようなmallocデバッグツールの使用</target>
        </trans-unit>
        <trans-unit id="7a02c2d05901d298065bac05eaefdaf89b098f1d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-a&lt;/b&gt; option followed by the name of a perl api function will extract the documentation of this function from &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;-a&lt;/b&gt; perlのAPI関数の名前が続くオプションがこの関数のドキュメントを抽出します&lt;a href=&quot;perlapi&quot;&gt;はperlapi&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7458f799f2d3bc9e0821f8f30b793deae5a843f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-f&lt;/b&gt; option followed by the name of a perl built-in function will extract the documentation of this function from &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;-f&lt;/b&gt;組み込み関数のperlの名前が続くオプションがこの関数のドキュメントを抽出します&lt;a href=&quot;perlfunc&quot;&gt;はperlfunc&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1902e94f8bb188d5617c0fc133e4af994267a619" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-q&lt;/b&gt; option takes a regular expression as an argument. It will search the &lt;b&gt;q&lt;/b&gt;uestion headings in perlfaq[1-9] and print the entries matching the regular expression.</source>
          <target state="translated">&lt;b&gt;-q&lt;/b&gt;オプションは、引数として正規表現をとります。これは、検索する&lt;b&gt;q個の&lt;/b&gt; perlfaq [1-9]にuestion見出しおよび正規表現に一致するエントリを印刷します。</target>
        </trans-unit>
        <trans-unit id="5344e76d29fb1384ca26893a56599519b1faad07" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-v&lt;/b&gt; option followed by the name of a Perl predefined variable will extract the documentation of this variable from &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;-v&lt;/b&gt;のPerlの名前が続くオプションは、変数がこの変数のドキュメントを抽出しますあらかじめ定義&lt;a href=&quot;perlvar&quot;&gt;はperlvar&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c5ae0073660f495c2b0b0a5aff71edb22c20f2cb" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-verbose&lt;/b&gt; flag first prints out the &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; introduction before any other diagnostics. The $diagnostics::PRETTY variable can generate nicer escape sequences for pagers.</source>
          <target state="translated">&lt;b&gt;-verbose&lt;/b&gt;フラグは、最初のプリントアウト&lt;a href=&quot;perldiag&quot;&gt;はperldiagの&lt;/a&gt;他の診断の前に導入を。$ diagnostics :: PRETTY変数は、ポケットベル用のより適切なエスケープシーケンスを生成できます。</target>
        </trans-unit>
        <trans-unit id="ceb38ecccfec93207c00c9dee183b84b32a5f056" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;-w&lt;/b&gt; flag just sets the global &lt;code&gt;$^W&lt;/code&gt; variable as in 5.005. This means that any legacy code that currently relies on manipulating &lt;code&gt;$^W&lt;/code&gt; to control warning behavior will still work as is.</source>
          <target state="translated">&lt;b&gt;-w&lt;/b&gt;フラグは、単にグローバル設定 &lt;code&gt;$^W&lt;/code&gt; 5.005のように変数を。つまり、警告動作を制御するために現在 &lt;code&gt;$^W&lt;/code&gt; 操作に依存しているレガシーコードは、そのまま機能します。</target>
        </trans-unit>
        <trans-unit id="72bbdbcc137e1ec7edde830d8069bcdc7d47c4dc" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;AutoLoader&lt;/b&gt; is similar in purpose to &lt;b&gt;SelfLoader&lt;/b&gt;: both delay the loading of subroutines.</source>
          <target state="translated">&lt;b&gt;オートローダーは、&lt;/b&gt;と目的が類似している&lt;b&gt;のSelfLoader&lt;/b&gt;：両方の遅延サブルーチンのローディング。</target>
        </trans-unit>
        <trans-unit id="0f53ec7201e8a617c94e28662bed3af80a664f4d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;AutoLoader&lt;/b&gt; module works with the &lt;b&gt;AutoSplit&lt;/b&gt; module and the &lt;code&gt;__END__&lt;/code&gt; token to defer the loading of some subroutines until they are used rather than loading them all at once.</source>
          <target state="translated">&lt;b&gt;オートローダー&lt;/b&gt;とモジュールの動作&lt;b&gt;自動splitの&lt;/b&gt;モジュールと &lt;code&gt;__END__&lt;/code&gt; いくつかのサブルーチンのトークンに延期ロードは、彼らが一度にすべてをロードするのではなく、使用されるまで。</target>
        </trans-unit>
        <trans-unit id="93865b59868e970114227e97ec05c9ea3f594f39" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;ExtUtils::Embed&lt;/b&gt; kit on CPAN also contains all source code for the examples in this document, tests, additional examples and other information you may find useful.</source>
          <target state="translated">CPAN の&lt;b&gt;ExtUtils :: Embed&lt;/b&gt;キットには、このドキュメントの例のすべてのソースコード、テスト、追加の例、および役立つと思われるその他の情報も含まれています。</target>
        </trans-unit>
        <trans-unit id="78c68d8eddf3cc79f99821ef8cc24a0430101c54" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;IO&lt;/b&gt; extension, &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&quot;I/O Operators&quot; in perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;perlop&lt;/a&gt;の&lt;b&gt;IO&lt;/b&gt;拡張、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;、「I / O演算子」。</target>
        </trans-unit>
        <trans-unit id="d362af90dceed3d87816d0dcbc3d699668f7c9c9" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;IO&lt;/b&gt; extension, &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;IOの&lt;/b&gt;延長、&lt;a href=&quot;perlfunc&quot;&gt;perlfuncの&lt;/a&gt;、&lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;はperlopでI / O演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4ddb503abc843b9ef214b377226c71b441a111a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Pod::Hyperlink&lt;/b&gt; class is mainly designed to parse the contents of the &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; sequence, providing a simple interface for accessing the different parts of a POD hyperlink for further processing. It can also be used to construct hyperlinks.</source>
          <target state="translated">&lt;b&gt;ポッド::ハイパーリンクの&lt;/b&gt;クラスは、主の内容解析するために設計されて &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; さらに処理するためにPODハイパーリンクのさまざまな部分にアクセスするためのシンプルなインターフェイスを提供する、シーケンスを。ハイパーリンクを作成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="159cbd250976e52bd0b54f9fbb2c920f60501cf2" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; can replace the AutoLoader - just change 'use AutoLoader' to 'use SelfLoader' (though note that the &lt;b&gt;SelfLoader&lt;/b&gt; exports the AUTOLOAD function - but if you have your own AUTOLOAD and are using the AutoLoader too, you probably know what you're doing), and the &lt;code&gt;__END__&lt;/code&gt; token to &lt;code&gt;__DATA__&lt;/code&gt; . You will need perl version 5.001m or later to use this (version 5.001 with all patches up to patch m).</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;オートローダーを置き換えることができます- 「使用のSelfLoader」（ノートしかしそれにだけ変更「使用オートローダー」&lt;b&gt;のSelfLoader&lt;/b&gt;輸出AUTOLOAD機能-しかし、あなたはあなた自身のAUTOLOADを持って、あまりにもオートローダーを使用している場合、あなたはおそらく、あなたがしているものを知っています）やって、そして &lt;code&gt;__END__&lt;/code&gt; にトークン &lt;code&gt;__DATA__&lt;/code&gt; 。これを使用するには、perlバージョン5.001m以降が必要です（バージョン5.001からパッチmまでのすべてのパッチ）。</target>
        </trans-unit>
        <trans-unit id="b4c86354fde60d804671cf8056d3c10e6c5b0099" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; can replace the AutoLoader - just change 'use AutoLoader' to 'use SelfLoader' (though note that the &lt;b&gt;SelfLoader&lt;/b&gt; exports the AUTOLOAD function - but if you have your own AUTOLOAD and are using the AutoLoader too, you probably know what you're doing), and the &lt;code&gt;__END__&lt;/code&gt; token to &lt;code&gt;__DATA__&lt;/code&gt;. You will need perl version 5.001m or later to use this (version 5.001 with all patches up to patch m).</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;オートローダーを置き換えることができます- 「使用のSelfLoader」（ノートしかしそれにだけ変更「使用オートローダー」&lt;b&gt;のSelfLoader&lt;/b&gt;輸出AUTOLOAD機能-しかし、あなたはあなた自身のAUTOLOADを持って、あまりにもオートローダーを使用している場合、あなたはおそらく、あなたがしているものを知っています）やって、そして &lt;code&gt;__END__&lt;/code&gt; にトークン &lt;code&gt;__DATA__&lt;/code&gt; 。これを使用するには、perlバージョン5.001m以降が必要です（パッチmまでのすべてのパッチを含むバージョン5.001）。</target>
        </trans-unit>
        <trans-unit id="9cc1e94494f4935e31dcd4aca4dd8097e05b3034" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; exports the &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine to the package using the &lt;b&gt;SelfLoader&lt;/b&gt;, and this loads the called subroutine when it is first called.</source>
          <target state="translated">&lt;b&gt;SelfLoaderは&lt;/b&gt;エクスポート &lt;code&gt;AUTOLOAD&lt;/code&gt; の使用して、パッケージにサブルーチンを&lt;b&gt;のSelfLoaderを&lt;/b&gt;、それが最初に呼び出されると呼ばれるサブルーチンを、このロード。</target>
        </trans-unit>
        <trans-unit id="be3fad23fb52579393cf97f6d16c823542fd3d2f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; reads from wherever the current position of the &lt;code&gt;FOOBAR::DATA&lt;/code&gt; filehandle is, until the EOF or &lt;code&gt;__END__&lt;/code&gt; . This means that if you want to use that filehandle (and ONLY if you want to), you should either</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;現在の位置をどこから読み込む &lt;code&gt;FOOBAR::DATA&lt;/code&gt; ファイルハンドルはEOFまで、または、ある &lt;code&gt;__END__&lt;/code&gt; 。これは、そのファイルハンドルを使用したい場合（そして使用したい場合のみ）、</target>
        </trans-unit>
        <trans-unit id="11f27c5dcec516e53a8a4d6fd79ba993403bc153" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; reads from wherever the current position of the &lt;code&gt;FOOBAR::DATA&lt;/code&gt; filehandle is, until the EOF or &lt;code&gt;__END__&lt;/code&gt;. This means that if you want to use that filehandle (and ONLY if you want to), you should either</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;現在の位置をどこから読み込む &lt;code&gt;FOOBAR::DATA&lt;/code&gt; ファイルハンドルはEOFまで、または、ある &lt;code&gt;__END__&lt;/code&gt; 。つまり、そのファイルハンドルを使用する場合（および使用する場合のみ）、次のいずれかを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="0f59147d20cbbd96eaf3ce69c4654c447143a93e" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; will read from the FOOBAR::DATA filehandle to load in the data after &lt;code&gt;__DATA__&lt;/code&gt; , and load in any subroutine when it is called. The costs are the one-time parsing of the data after &lt;code&gt;__DATA__&lt;/code&gt; , and a load delay for the _first_ call of any autoloaded function. The benefits (hopefully) are a speeded up compilation phase, with no need to load functions which are never used.</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;後のデータで負荷へ:: FOOBARからのデータファイルハンドルを読み込みます &lt;code&gt;__DATA__&lt;/code&gt; 、それが呼び出された任意のサブルーチンでロード。コストは、 &lt;code&gt;__DATA__&lt;/code&gt; の後のデータの1回限りの解析、およびオートロードされた関数の_first_呼び出しのロード遅延です。利点は（うまくいけば）使用されない関数をロードする必要がないため、コンパイルフェーズが高速化されることです。</target>
        </trans-unit>
        <trans-unit id="661b13cb881f0c177baa79d2f9cc5c08efa1139f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; will read from the FOOBAR::DATA filehandle to load in the data after &lt;code&gt;__DATA__&lt;/code&gt;, and load in any subroutine when it is called. The costs are the one-time parsing of the data after &lt;code&gt;__DATA__&lt;/code&gt;, and a load delay for the _first_ call of any autoloaded function. The benefits (hopefully) are a speeded up compilation phase, with no need to load functions which are never used.</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;後のデータで負荷へ:: FOOBARからのデータファイルハンドルを読み込みます &lt;code&gt;__DATA__&lt;/code&gt; 、それが呼び出された任意のサブルーチンでロード。コストは、 &lt;code&gt;__DATA__&lt;/code&gt; 後のデータの1回の解析と、自動ロードされた関数の_first_呼び出しのロード遅延です。利点は（うまくいけば）コンパイルフェーズが高速化され、使用されない関数をロードする必要がないことです。</target>
        </trans-unit>
        <trans-unit id="b9076a846b441722c5113e39b9bcd0673ac55d99" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; will stop reading from &lt;code&gt;__DATA__&lt;/code&gt; if it encounters the &lt;code&gt;__END__&lt;/code&gt; token - just as you would expect. If the &lt;code&gt;__END__&lt;/code&gt; token is present, and is followed by the token DATA, then the &lt;b&gt;SelfLoader&lt;/b&gt; leaves the FOOBAR::DATA filehandle open on the line after that token.</source>
          <target state="translated">&lt;b&gt;SelfLoaderは&lt;/b&gt;からの読み取りを停止します &lt;code&gt;__DATA__&lt;/code&gt; それが発生した場合、 &lt;code&gt;__END__&lt;/code&gt; あなたが期待するのと同じように-トークンを。場合 &lt;code&gt;__END__&lt;/code&gt; のトークンが存在し、トークンのDATAが続き、その後&lt;b&gt;のSelfLoader&lt;/b&gt;葉FOOBAR ::そのトークンの後の行のデータがファイルハンドル開きました。</target>
        </trans-unit>
        <trans-unit id="ae4ca9e2af773bc53d6ebfbbbcbbb68e0e663b29" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; works by the user placing the &lt;code&gt;__DATA__&lt;/code&gt; token</source>
          <target state="translated">&lt;b&gt;SelfLoaderは&lt;/b&gt;置く、ユーザによって動作します &lt;code&gt;__DATA__&lt;/code&gt; トークンを</target>
        </trans-unit>
        <trans-unit id="b8a45570c1acb4c43b6a7805f6337844a9606503" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; works similarly to the AutoLoader, but picks up the subs from after the &lt;code&gt;__DATA__&lt;/code&gt; instead of in the 'lib/auto' directory. There is a maintenance gain in not needing to run AutoSplit on the module at installation, and a runtime gain in not needing to keep opening and closing files to load subs. There is a runtime loss in needing to parse the code after the &lt;code&gt;__DATA__&lt;/code&gt; . Details of the &lt;b&gt;AutoLoader&lt;/b&gt; and another view of these distinctions can be found in that module's documentation.</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;オートローダーと同様に動作しますが、後から潜水艦までピック &lt;code&gt;__DATA__&lt;/code&gt; の代わりに、「libに/オート」ディレクトリインチ インストール時にモジュールでAutoSplitを実行する必要がないことでメンテナンスが向上し、サブファイルをロードするためにファイルを開いたり閉じたりし続ける必要がないことでランタイムが向上します。 &lt;code&gt;__DATA__&lt;/code&gt; の後にコードを解析する必要があるため、ランタイムが失われます。&lt;b&gt;オートローダーの&lt;/b&gt;詳細とこれらの違いの別の見方は、そのモジュールのドキュメントにあります。</target>
        </trans-unit>
        <trans-unit id="7dcbf6c27d3fbecf0a1da02dbc8cbd5d7c319816" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SelfLoader&lt;/b&gt; works similarly to the AutoLoader, but picks up the subs from after the &lt;code&gt;__DATA__&lt;/code&gt; instead of in the 'lib/auto' directory. There is a maintenance gain in not needing to run AutoSplit on the module at installation, and a runtime gain in not needing to keep opening and closing files to load subs. There is a runtime loss in needing to parse the code after the &lt;code&gt;__DATA__&lt;/code&gt;. Details of the &lt;b&gt;AutoLoader&lt;/b&gt; and another view of these distinctions can be found in that module's documentation.</source>
          <target state="translated">&lt;b&gt;SelfLoaderは、&lt;/b&gt;オートローダーと同様に動作しますが、後から潜水艦までピック &lt;code&gt;__DATA__&lt;/code&gt; の代わりに、「libに/オート」ディレクトリインチインストール時にモジュールでAutoSplitを実行する必要がないことでメンテナンスのメリットがあり、サブをロードするためにファイルを開いたり閉じたりし続ける必要がないことでランタイムのメリットがあります。 &lt;code&gt;__DATA__&lt;/code&gt; の後にコードを解析する必要があるため、実行時に損失が発生します。&lt;b&gt;AutoLoaderの&lt;/b&gt;詳細とこれらの違いの別のビューは、そのモジュールのドキュメントに記載されています。</target>
        </trans-unit>
        <trans-unit id="94dafc36f54a138d4c7c8beed77372c0b7d94298" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Tie::Array&lt;/b&gt; implementation is a stub that simply croaks.</source>
          <target state="translated">&lt;b&gt;タイ::配列の&lt;/b&gt;実装は単にcroaksスタブです。</target>
        </trans-unit>
        <trans-unit id="6b199766c781a0ae9ebeafd1ad9efb33847e8a69" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Tie::Hash&lt;/b&gt; implementation is a stub that simply croaks.</source>
          <target state="translated">&lt;b&gt;タイ::ハッシュ&lt;/b&gt;実装は単にcroaksスタブです。</target>
        </trans-unit>
        <trans-unit id="4134fa729bc36043c1bbc4226f0d69bd4bd166dc" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Tie::StdArray&lt;/b&gt; package provides efficient methods required for tied arrays which are implemented as blessed references to an &quot;inner&quot; perl array. It inherits from &lt;b&gt;Tie::Array&lt;/b&gt;, and should cause tied arrays to behave exactly like standard arrays, allowing for selective overloading of methods.</source>
          <target state="translated">&lt;b&gt;タイ:: StdArrayの&lt;/b&gt;パッケージは、「内側」Perlの配列に恵まれ参照として実装されて結ばアレイに必要な効率的な方法を提供します。これは&lt;b&gt;Tie :: Arrayを&lt;/b&gt;継承し、タイド配列が標準配列とまったく同じように動作するようにし、メソッドの選択的なオーバーロードを可能にします。</target>
        </trans-unit>
        <trans-unit id="61ae2de46d00875a51e425357ad71e5ccdd2ad38" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Tie::StdHandle&lt;/b&gt; package provide most methods for file handles described in &lt;a href=&quot;../perltie&quot;&gt;perltie&lt;/a&gt; (the exceptions are &lt;code&gt;UNTIE&lt;/code&gt; and &lt;code&gt;DESTROY&lt;/code&gt; ). It causes tied file handles to behave exactly like standard file handles and allow for selective overwriting of methods.</source>
          <target state="translated">&lt;b&gt;タイ:: StdHandle&lt;/b&gt;パッケージはで説明したファイルハンドルのためのほとんどのメソッドを提供&lt;a href=&quot;../perltie&quot;&gt;perltieやを&lt;/a&gt;（例外はある &lt;code&gt;UNTIE&lt;/code&gt; や &lt;code&gt;DESTROY&lt;/code&gt; ）。これにより、関連付けられたファイルハンドルが標準のファイルハンドルとまったく同じように動作し、メソッドを選択的に上書きできます。</target>
        </trans-unit>
        <trans-unit id="4245a18625b67300aa61449aa8288d150f2262ee" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Tie::StdHandle&lt;/b&gt; package provide most methods for file handles described in &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt; (the exceptions are &lt;code&gt;UNTIE&lt;/code&gt; and &lt;code&gt;DESTROY&lt;/code&gt;). It causes tied file handles to behave exactly like standard file handles and allow for selective overwriting of methods.</source>
          <target state="translated">&lt;b&gt;タイ:: StdHandle&lt;/b&gt;パッケージはで説明したファイルハンドルのためのほとんどのメソッドを提供&lt;a href=&quot;perltie&quot;&gt;perltieやを&lt;/a&gt;（例外はある &lt;code&gt;UNTIE&lt;/code&gt; や &lt;code&gt;DESTROY&lt;/code&gt; ）。これにより、タイのファイルハンドルが標準のファイルハンドルとまったく同じように動作し、メソッドを選択的に上書きできるようになります。</target>
        </trans-unit>
        <trans-unit id="eacf0e41a2a5258a61ae34656b72764dd7acc141" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;Tie::SubstrHash&lt;/b&gt; package provides a hash-table-like interface to an array of determinate size, with constant key size and record size.</source>
          <target state="translated">&lt;b&gt;タイ:: SubstrHash&lt;/b&gt;パッケージは、一定のキーサイズとレコードサイズの確定サイズのアレイにハッシュテーブルのようなインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="a8a3a1e60f743e1378ee92d392f9857036d4b3d2" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;begincheck&lt;/b&gt; program makes it all clear, eventually:</source>
          <target state="translated">&lt;b&gt;begincheckの&lt;/b&gt;プログラムは最終的に、それはすべて明らかに：</target>
        </trans-unit>
        <trans-unit id="1112db1b82f4fc99681fd70d53f56d13ced227cf" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;encoding&lt;/b&gt; pragma changes this to use the specified encoding instead. For example:</source>
          <target state="translated">&lt;b&gt;エンコーディング&lt;/b&gt;プラグマは、これは指定された代わりに、エンコードを使用するように変更します。例えば：</target>
        </trans-unit>
        <trans-unit id="b7162377ab2247a065b27f7ed4e48c5d078da511" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;encoding&lt;/b&gt; pragma works by decoding string literals in &lt;code&gt;q//,qq//,qr//,qw///, qx//&lt;/code&gt; and so forth. In perl v5.8.0, this does not apply to &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt;. Therefore,</source>
          <target state="translated">&lt;b&gt;エンコーディング&lt;/b&gt;プラグマは、中に文字列リテラルをデコードすることによって動作します &lt;code&gt;q//,qq//,qr//,qw///, qx//&lt;/code&gt; など。perl v5.8.0では、これは &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; は適用されません。したがって、</target>
        </trans-unit>
        <trans-unit id="0567b6469c4f0ce811f82d15382d41c3cb9254e1" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;encoding&lt;/b&gt; pragma works by decoding string literals in &lt;code&gt;q//,qq//,qr//,qw///, qx//&lt;/code&gt; and so forth. In perl v5.8.0, this does not apply to &lt;code&gt;tr///&lt;/code&gt;. Therefore,</source>
          <target state="translated">&lt;b&gt;エンコーディング&lt;/b&gt;プラグマは、中に文字列リテラルをデコードすることによって動作します &lt;code&gt;q//,qq//,qr//,qw///, qx//&lt;/code&gt; など。perl v5.8.0では、これは &lt;code&gt;tr///&lt;/code&gt; は適用されません。したがって、</target>
        </trans-unit>
        <trans-unit id="80faef413c7207aab71b9f1d03988df6331ef791" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;file&lt;/b&gt; (or &lt;b&gt;string&lt;/b&gt;, in the case of &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;) that is currently being &lt;b&gt;compiled&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;ファイル&lt;/b&gt;（または&lt;b&gt;文字列&lt;/b&gt;の場合は、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を現在されている）&lt;b&gt;にコンパイル&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="b93fec3ba5d429ebcf5cae82011aef3ec4a01036" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;file&lt;/b&gt; (or &lt;b&gt;string&lt;/b&gt;, in the case of &lt;code&gt;eval&lt;/code&gt;) that is currently being &lt;b&gt;compiled&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;ファイル&lt;/b&gt;（または&lt;b&gt;文字列&lt;/b&gt;の場合は、 &lt;code&gt;eval&lt;/code&gt; を現在されている）&lt;b&gt;にコンパイル&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="bb5cf33051195df3d457e45e85209f2138dc4a05" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;first time&lt;/b&gt; the hook is hit in a serialization flow, you may have it return an empty list. That will signal the Storable engine to further discard that hook for this class and to therefore revert to the default serialization of the underlying Perl data. The hook will again be normally processed in the next serialization.</source>
          <target state="translated">&lt;b&gt;初めて&lt;/b&gt;のフックは、直列化の流れにヒットしたが、あなたはそれが空のリストを返す必要があります。これは、Storableエンジンに、このクラスのフックをさらに破棄するように通知し、そのため、基礎となるPerlデータのデフォルトの直列化に戻ります。フックは通常、次のシリアライゼーションで再び正常に処理されます。</target>
        </trans-unit>
        <trans-unit id="31b896e0d53803b62960180dd945e43dfa7f81e7" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;garbage collection&lt;/b&gt; of globals (and the running of any associated object destructors) that takes place when a Perl &lt;b&gt;interpreter&lt;/b&gt; is being shut down. Global destruction should not be confused with the Apocalypse, except perhaps when it should.</source>
          <target state="translated">Perl &lt;b&gt;インタープリター&lt;/b&gt;がシャットダウンされるときに行われるグローバルの&lt;b&gt;ガベージコレクション&lt;/b&gt;（および関連するオブジェクトデストラクタの実行）。地球規模の破壊は、おそらくそれが必要な場合を除いて、黙示録と混同されるべきではありません。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="987526f88e29534e7fb822b3987e499066378921" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;grouping&lt;/b&gt; metacharacters &lt;code&gt;()&lt;/code&gt; allow a part of a regex to be treated as a single unit. Parts of a regex are grouped by enclosing them in parentheses. The regex &lt;code&gt;house(cat|keeper)&lt;/code&gt; means match &lt;code&gt;house&lt;/code&gt; followed by either &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;keeper&lt;/code&gt; . Some more examples are</source>
          <target state="translated">&lt;b&gt;グルーピング&lt;/b&gt;メタ文字 &lt;code&gt;()&lt;/code&gt; は、正規表現の一部は、単一のユニットとして扱うことを可能にします。正規表現の一部は、括弧で囲むことによりグループ化されます。regex &lt;code&gt;house(cat|keeper)&lt;/code&gt; は、マッチ &lt;code&gt;house&lt;/code&gt; 後に &lt;code&gt;cat&lt;/code&gt; または &lt;code&gt;keeper&lt;/code&gt; が続くことを意味します。さらにいくつかの例は</target>
        </trans-unit>
        <trans-unit id="8b06519ab9371f66acf34ade00457226ccfb28ee" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;grouping&lt;/b&gt; metacharacters &lt;code&gt;()&lt;/code&gt; allow a part of a regex to be treated as a single unit. Parts of a regex are grouped by enclosing them in parentheses. The regex &lt;code&gt;house(cat|keeper)&lt;/code&gt; means match &lt;code&gt;house&lt;/code&gt; followed by either &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;keeper&lt;/code&gt;. Some more examples are</source>
          <target state="translated">&lt;b&gt;グルーピング&lt;/b&gt;メタ文字 &lt;code&gt;()&lt;/code&gt; は、正規表現の一部は、単一のユニットとして扱うことを可能にします。正規表現の一部は、括弧で囲むことによってグループ化されます。正規表現 &lt;code&gt;house(cat|keeper)&lt;/code&gt; は、マッチ &lt;code&gt;house&lt;/code&gt; 後に &lt;code&gt;cat&lt;/code&gt; または &lt;code&gt;keeper&lt;/code&gt; 続くことを意味します。他のいくつかの例は</target>
        </trans-unit>
        <trans-unit id="ba87bd98015a685039202791b8b4c178941ed0ba" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;interpolation&lt;/b&gt; of a scalar or array variable into a string.</source>
          <target state="translated">文字列へのスカラーまたは配列変数の&lt;b&gt;補間&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="fd9fd954815d11416f915389911ed3472be1a48a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;new()&lt;/b&gt; method can either be passed a set of key/value pairs or a single scalar value, namely the contents of a &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; sequence. An object of the class &lt;code&gt;Pod::Hyperlink&lt;/code&gt; is returned. The value &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; indicates a failure, the error message is stored in &lt;code&gt;$@&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;新しい（）&lt;/b&gt;メソッドは、いずれかのキー/値ペアのセットまたは単一のスカラー値、すなわち内容渡すことができ &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; 配列。クラス &lt;code&gt;Pod::Hyperlink&lt;/code&gt; のオブジェクトが返されます。値 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は失敗を示し、エラーメッセージは &lt;code&gt;$@&lt;/code&gt; 格納されます。</target>
        </trans-unit>
        <trans-unit id="22dcd0ec3aed7a2c1842ef98e2374e061c59b868" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;package&lt;/b&gt; in which the current statement is &lt;b&gt;compiled&lt;/b&gt;. Scan backward in the text of your program through the current &lt;b&gt;lexical scope&lt;/b&gt; or any enclosing lexical scopes until you find a package declaration. That&amp;rsquo;s your current package name.</source>
          <target state="translated">&lt;b&gt;パッケージ&lt;/b&gt;現在の文がされている&lt;b&gt;コンパイル&lt;/b&gt;。パッケージ宣言が見つかるまで、現在の&lt;b&gt;字句スコープ&lt;/b&gt;またはそれを囲む字句スコープを介して、プログラムのテキストを逆方向にスキャンします。これが現在のパッケージ名です。</target>
        </trans-unit>
        <trans-unit id="837534d7853b1df8d6be64303da76d4fb655fe6c" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;parse_text()&lt;/b&gt; method takes a given paragraph of text, and returns a parse-tree that contains one or more children, each of which may be a text-string, or an InteriorSequence object. There are also callback-options that may be passed to &lt;b&gt;parse_text()&lt;/b&gt; to customize the way it expands or transforms interior-sequences, as well as the returned result. These callbacks can be used to create a parse-tree with custom-made objects (which may or may not support the parse-tree interface, depending on how you choose to do it).</source>
          <target state="translated">&lt;b&gt;parse_text（）&lt;/b&gt;メソッドは、テキストの指定された段落を受け取り、テキスト文字列、またはInteriorSequenceオブジェクトであってもよいそれぞれが一つ以上の子供を含み、構文解析木を返します。また、&lt;b&gt;parse_text（）&lt;/b&gt;に渡すことができるコールバックオプションもあり、内部シーケンスを拡張または変換する方法と、返される結果をカスタマイズします。これらのコールバックを使用して、カスタムメイドのオブジェクトを使用して解析ツリーを作成できます（これは、選択した方法に応じて、解析ツリーインターフェイスをサポートする場合としない場合があります）。</target>
        </trans-unit>
        <trans-unit id="b2fcda0a32417727cdd721f28d0c908b93bc1f19" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;perlivp&lt;/b&gt; program is set up at Perl source code build time to test the Perl version it was built under. It can be used after running:</source>
          <target state="translated">&lt;b&gt;perlivpの&lt;/b&gt;プログラムは、それがもとで構築されたPerlのバージョンをテストするためのPerlソースコードのビルド時に設定されています。実行後に使用できます：</target>
        </trans-unit>
        <trans-unit id="dc37ad02e0c6923bebd0d4430ccd02307461404f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;podchecker&lt;/b&gt; command is provided for checking Pod syntax for errors and warnings. For example, it checks for completely blank lines in Pod blocks and for unknown commands and formatting codes. You should still also pass your document through one or more translators and proofread the result, or print out the result and proofread that. Some of the problems found may be bugs in the translators, which you may or may not wish to work around.</source>
          <target state="translated">&lt;b&gt;podcheckerの&lt;/b&gt;コマンドは、エラーと警告のためのポッドの構文をチェックするために提供されます。たとえば、Podブロックの完全に空白の行や、不明なコマンドやフォーマットコードをチェックします。また、ドキュメントを1人以上の翻訳者に渡して結果を校正するか、結果を印刷して校正する必要もあります。見つかった問題の一部は、翻訳者のバグである可能性があり、回避するかどうかは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="0a20174d8e3b5a76e2734d6eb6a0cf7707e14ad1" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;podchecker&lt;/b&gt; script that comes with this distribution is a lean wrapper around this module. See the online manual with</source>
          <target state="translated">&lt;b&gt;podcheckerの&lt;/b&gt;このディストリビューションに付属しているスクリプトは、このモジュールの周りリーンラッパーです。でオンラインマニュアルを参照してください</target>
        </trans-unit>
        <trans-unit id="d299b97d8bab37b1330370eb9473b8a413d005a5" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;quantifier&lt;/b&gt; metacharacters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , and &lt;code&gt;{}&lt;/code&gt; allow us to determine the number of repeats of a portion of a regex we consider to be a match. Quantifiers are put immediately after the character, character class, or grouping that we want to specify. They have the following meanings:</source>
          <target state="translated">&lt;b&gt;数量詞の&lt;/b&gt;メタ文字 &lt;code&gt;?&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、および &lt;code&gt;{}&lt;/code&gt; により、一致と見なす正規表現の一部の繰り返し数を決定できます。数量詞は、指定する文字、文字クラス、またはグループの直後に配置されます。それらの意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="eaae51c09e62ae41b20067864a8beaa2340f2425" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;quantifier&lt;/b&gt; metacharacters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, and &lt;code&gt;{}&lt;/code&gt; allow us to determine the number of repeats of a portion of a regex we consider to be a match. Quantifiers are put immediately after the character, character class, or grouping that we want to specify. They have the following meanings:</source>
          <target state="translated">&lt;b&gt;数量詞の&lt;/b&gt;メタ文字 &lt;code&gt;?&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、および &lt;code&gt;{}&lt;/code&gt; を使用すると、一致すると見なされる正規表現の一部の繰り返し数を判別できます。数量詞は、指定する文字、文字クラス、またはグループ化の直後に配置されます。それらには次の意味があります。</target>
        </trans-unit>
        <trans-unit id="9b54e7f659f70ec7a4f3708e917b8834ab10ef21" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;scalar values&lt;/b&gt; that you supply to a &lt;b&gt;function&lt;/b&gt; or &lt;b&gt;subroutine&lt;/b&gt; when you call it. For instance, when you call &lt;code&gt;power(&quot;puff&quot;)&lt;/code&gt; , the string &lt;code&gt;&quot;puff&quot;&lt;/code&gt; is the actual argument. See also &lt;b&gt;argument&lt;/b&gt; and &lt;b&gt;formal arguments&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;スカラー値&lt;/b&gt;あなたに供給していること&lt;b&gt;の機能&lt;/b&gt;または&lt;b&gt;サブルーチン&lt;/b&gt;あなたはそれを呼び出します。たとえば、 &lt;code&gt;power(&quot;puff&quot;)&lt;/code&gt; を呼び出すと、文字列 &lt;code&gt;&quot;puff&quot;&lt;/code&gt; が実際の引数になります。 「&lt;b&gt;引数」&lt;/b&gt;および「&lt;b&gt;仮引数&lt;/b&gt;」も参照してください。</target>
        </trans-unit>
        <trans-unit id="322845e84e15f9ba6a6f987f2f0f5a926b87542a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;scalar values&lt;/b&gt; that you supply to a &lt;b&gt;function&lt;/b&gt; or &lt;b&gt;subroutine&lt;/b&gt; when you call it. For instance, when you call &lt;code&gt;power(&quot;puff&quot;)&lt;/code&gt;, the string &lt;code&gt;&quot;puff&quot;&lt;/code&gt; is the actual argument. See also &lt;b&gt;argument&lt;/b&gt; and &lt;b&gt;formal arguments&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;スカラー値&lt;/b&gt;あなたに供給していること&lt;b&gt;の機能&lt;/b&gt;または&lt;b&gt;サブルーチン&lt;/b&gt;あなたはそれを呼び出します。たとえば、 &lt;code&gt;power(&quot;puff&quot;)&lt;/code&gt; を呼び出すと、文字列 &lt;code&gt;&quot;puff&quot;&lt;/code&gt; が実際の引数になります。&lt;b&gt;引数&lt;/b&gt;および&lt;b&gt;仮引数&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="4a023f0632e523744570838f6670cc7a9e367c0e" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;sigtrap&lt;/b&gt; pragma is a simple interface to installing signal handlers. You can have it install one of two handlers supplied by &lt;b&gt;sigtrap&lt;/b&gt; itself (one which provides a Perl stack trace and one which simply &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt;s), or alternately you can supply your own handler for it to install. It can be told only to install a handler for signals which are either untrapped or ignored. It has a couple of lists of signals to trap, plus you can supply your own list of signals.</source>
          <target state="translated">&lt;b&gt;SIGTRAPの&lt;/b&gt;プラグマはシグナルハンドラをインストールする簡単なインターフェースです。&lt;b&gt;sigtrap&lt;/b&gt;自体が提供する2つのハンドラー（Perlスタックトレースを提供するハンドラーと単純に &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; を提供するハンドラー）の1つをインストールするか、または独自のハンドラーを指定してインストールすることができます。トラップされないか無視されるシグナルのハンドラをインストールするように指示することができます。トラップする信号のリストがいくつかあります。さらに、独自の信号のリストを提供できます。</target>
        </trans-unit>
        <trans-unit id="9bf9f6bd9139c0d963b36b36175d399537dfc4fb" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;sigtrap&lt;/b&gt; pragma is a simple interface to installing signal handlers. You can have it install one of two handlers supplied by &lt;b&gt;sigtrap&lt;/b&gt; itself (one which provides a Perl stack trace and one which simply &lt;code&gt;die()&lt;/code&gt;s), or alternately you can supply your own handler for it to install. It can be told only to install a handler for signals which are either untrapped or ignored. It has a couple of lists of signals to trap, plus you can supply your own list of signals.</source>
          <target state="translated">&lt;b&gt;SIGTRAPの&lt;/b&gt;プラグマはシグナルハンドラをインストールする簡単なインターフェースです。&lt;b&gt;sigtrap&lt;/b&gt;自体が提供する2つのハンドラー（1つはPerlスタックトレースを提供し、もう1つは単に &lt;code&gt;die()&lt;/code&gt; sを提供する）のいずれかをインストールするか、インストールする独自のハンドラーを提供することができます。トラップされていないか無視されているシグナルのハンドラーをインストールするように指示することしかできません。トラップするシグナルのリストがいくつかあり、さらに独自のシグナルのリストを提供できます。</target>
        </trans-unit>
        <trans-unit id="d7c162ba3d4340b1ed67afae232423e0f505fd2b" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;value&lt;/b&gt; produced by a &lt;b&gt;subroutine&lt;/b&gt; or &lt;b&gt;expression&lt;/b&gt; when evaluated. In Perl, a return value may be either a &lt;b&gt;list&lt;/b&gt; or a &lt;b&gt;scalar&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;値は、&lt;/b&gt;によって生成される&lt;b&gt;サブルーチン&lt;/b&gt;又は&lt;b&gt;発現&lt;/b&gt;を評価します。Perlでは、戻り値は&lt;b&gt;リスト&lt;/b&gt;または&lt;b&gt;スカラーの&lt;/b&gt;いずれかです。</target>
        </trans-unit>
        <trans-unit id="7487920171bd7708f5f44fcbcd3a51b3cd669ff9" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;value&lt;/b&gt; returned to the parent &lt;b&gt;process&lt;/b&gt; when one of its child processes dies. This value is placed in the special variable &lt;code&gt;$?&lt;/code&gt; . Its upper eight &lt;b&gt;bits&lt;/b&gt; are the exit status of the defunct process, and its lower eight bits identify the signal (if any) that the process died from. On Unix systems, this status value is the same as the status word returned by</source>
          <target state="translated">&lt;b&gt;値は&lt;/b&gt;、親に戻った&lt;b&gt;プロセス&lt;/b&gt;の子プロセスダイの一つ。この値は、特殊変数 &lt;code&gt;$?&lt;/code&gt; に入れられます。。その上位8 &lt;b&gt;ビット&lt;/b&gt;は無効プロセスの終了ステータスであり、下位8ビットはプロセスが停止したシグナル（存在する場合）を識別します。Unixシステムでは、このステータス値は、によって返されるステータスワードと同じです。</target>
        </trans-unit>
        <trans-unit id="92fc59668896181422dc0c709aa06976d25a8bdd" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;value&lt;/b&gt; returned to the parent &lt;b&gt;process&lt;/b&gt; when one of its child processes dies. This value is placed in the special variable &lt;code&gt;$?&lt;/code&gt;. Its upper eight &lt;b&gt;bits&lt;/b&gt; are the exit status of the defunct process, and its lower eight bits identify the signal (if any) that the process died from. On Unix systems, this status value is the same as the status word returned by</source>
          <target state="translated">&lt;b&gt;値は&lt;/b&gt;、親に戻った&lt;b&gt;プロセス&lt;/b&gt;の子プロセスダイの一つ。この値は、特別な変数 &lt;code&gt;$?&lt;/code&gt; に配置されます。。その上位8&lt;b&gt;ビット&lt;/b&gt;は、無効なプロセスの終了ステータスであり、下位8ビットは、プロセスが停止した信号（存在する場合）を識別します。Unixシステムでは、このステータス値は、によって返されるステータスワードと同じです。</target>
        </trans-unit>
        <trans-unit id="f75f87bdfa0eb35c4f5fe0a1642de1f3532d7289" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;values&lt;/b&gt; you supply along with a program name when you tell a &lt;b&gt;shell&lt;/b&gt; to execute a &lt;b&gt;command&lt;/b&gt;. These values are passed to a Perl program through &lt;code&gt;@ARGV&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;値は、&lt;/b&gt;あなたが教えてくれたときには、プログラム名と一緒に供給する&lt;b&gt;シェルを&lt;/b&gt;実行する&lt;b&gt;コマンドを&lt;/b&gt;。これらの値は &lt;code&gt;@ARGV&lt;/code&gt; を介してPerlプログラムに渡されます。</target>
        </trans-unit>
        <trans-unit id="41ad86c2a0eef157efad4b1818e0188a3bba4d01" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;values&lt;/b&gt; you supply along with a program name when you tell a &lt;b&gt;shell&lt;/b&gt; to execute a &lt;b&gt;command&lt;/b&gt;. These values are passed to a Perl program through &lt;code&gt;@ARGV&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;値は、&lt;/b&gt;あなたが教えてくれたときには、プログラム名と一緒に供給する&lt;b&gt;シェルを&lt;/b&gt;実行する&lt;b&gt;コマンドを&lt;/b&gt;。これらの値は、@ &lt;code&gt;@ARGV&lt;/code&gt; 介してPerlプログラムに渡されます。</target>
        </trans-unit>
        <trans-unit id="8215a7b783f151c4ff06cfd84ff859eb48442e77" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;word anchor&lt;/b&gt;&lt;code&gt;\b&lt;/code&gt; matches a boundary between a word character and a non-word character &lt;code&gt;\w\W&lt;/code&gt; or &lt;code&gt;\W\w&lt;/code&gt; :</source>
          <target state="translated">&lt;b&gt;ワードアンカー&lt;/b&gt; &lt;code&gt;\b&lt;/code&gt; 単語文字と非単語文字との間の境界と一致し &lt;code&gt;\w\W&lt;/code&gt; または &lt;code&gt;\W\w&lt;/code&gt; ：を</target>
        </trans-unit>
        <trans-unit id="e0d33c43c6614d46185d88549fdc18a2c8537ffc" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;word anchor&lt;/b&gt;&lt;code&gt;\b&lt;/code&gt; matches a boundary between a word character and a non-word character &lt;code&gt;\w\W&lt;/code&gt; or &lt;code&gt;\W\w&lt;/code&gt;:</source>
          <target state="translated">&lt;b&gt;ワードアンカー&lt;/b&gt; &lt;code&gt;\b&lt;/code&gt; 単語文字と非単語文字との間の境界と一致し &lt;code&gt;\w\W&lt;/code&gt; または &lt;code&gt;\W\w&lt;/code&gt; ：を</target>
        </trans-unit>
        <trans-unit id="98df2a206a33c61c05323edbf28b990dfe8bb9b6" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;xsubpp&lt;/b&gt; program takes the XS code in the .xs file and translates it into C code, placing it in a file whose suffix is .c. The C code created makes heavy use of the C functions within Perl.</source>
          <target state="translated">&lt;b&gt;xsubppの&lt;/b&gt;プログラムは.xsファイル内のXSコードを取り、そのサフィックス.Cあるファイルにそれを置く、Cコードに変換します。作成されたCコードは、Perl内のC関数を多用します。</target>
        </trans-unit>
        <trans-unit id="e9db711485ba959f3d0b453c931365b6638809a5" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;xsubpp&lt;/b&gt; program uses rules to convert from Perl's data types (scalar, array, etc.) to C's data types (int, char, etc.). These rules are stored in the typemap file ($PERLLIB/ExtUtils/typemap). There's a brief discussion below, but all the nitty-gritty details can be found in &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt;. If you have a new-enough version of perl (5.16 and up) or an upgraded XS compiler (&lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; 3.13_01 or better), then you can inline typemaps in your XS instead of writing separate files. Either way, this typemap thing is split into three parts:</source>
          <target state="translated">&lt;b&gt;xsubppの&lt;/b&gt; Perlのデータ型Cのデータ・タイプ（整数、文字など）（スカラ、アレイ、等）へ変換するプログラムの使用規則。これらのルールは、タイプマップファイル（$ PERLLIB / ExtUtils / typemap）に格納されます。以下に簡単な説明がありますが、重要な詳細はすべて&lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemapにあり&lt;/a&gt;ます。新しいバージョンのperl（5.16以降）またはアップグレードされたXSコンパイラー（ &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; 3.13_01以上）を使用している場合は、個別のファイルを作成する代わりに、XSにタイプマップをインライン化できます。いずれにせよ、このタイプマップは3つの部分に分かれています。</target>
        </trans-unit>
        <trans-unit id="1082cc04157e373604ca98ab1606eeb58e2bd5d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt; $output &lt;/code&gt; argument may be:</source>
          <target state="translated">&lt;code&gt; $output &lt;/code&gt; 引数は次のようになります。</target>
        </trans-unit>
        <trans-unit id="fe02d79593918e0f0b57f9efa92b9388e3573b1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;)&quot;&lt;/code&gt; is out-of-place. Something apparently was supposed to be combined with the digits, or the &lt;code&gt;&quot;+&quot;&lt;/code&gt; shouldn't be there, or something like that. Perl can't figure out what was intended.</source>
          <target state="translated">&lt;code&gt;&quot;)&quot;&lt;/code&gt; アウトオブプレースです。明らかに数字と組み合わせることが想定されていたもの、または &lt;code&gt;&quot;+&quot;&lt;/code&gt; がそこにあるべきではない、またはそのようなものです。Perlは意図されたものを理解できません。</target>
        </trans-unit>
        <trans-unit id="b82e89101d474c0486e6c08a915553c14b105df6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;*&quot;&lt;/code&gt; quantifier is equivalent to &lt;code&gt;{0,}&lt;/code&gt;, the &lt;code&gt;&quot;+&quot;&lt;/code&gt; quantifier to &lt;code&gt;{1,}&lt;/code&gt;, and the &lt;code&gt;&quot;?&quot;&lt;/code&gt; quantifier to &lt;code&gt;{0,1}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;*&quot;&lt;/code&gt; に相当する数量詞 &lt;code&gt;{0,}&lt;/code&gt; 、 &lt;code&gt;&quot;+&quot;&lt;/code&gt; に数量詞 &lt;code&gt;{1,}&lt;/code&gt; 、および &lt;code&gt;&quot;?&quot;&lt;/code&gt; &lt;code&gt;{0,1}&lt;/code&gt; への数量詞。</target>
        </trans-unit>
        <trans-unit id="74bbd851b5114dd4dbacbd6abc257c5bbd630765" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;+&quot;&lt;/code&gt; is valid only when followed by digits, indicating a capturing group. See &lt;a href=&quot;perlre#%28%3FPARNO%29-%28%3F-PARNO%29-%28%3F%2BPARNO%29-%28%3FR%29-%28%3F0%29&quot;&gt;&lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;+&quot;&lt;/code&gt; 捕捉基を示し、数字が続く場合にのみ有効です。&lt;a href=&quot;perlre#%28%3FPARNO%29-%28%3F-PARNO%29-%28%3F%2BPARNO%29-%28%3FR%29-%28%3F0%29&quot;&gt; &lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="54034a923125cadab60eef06f26fcb91d4e7c351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;+&quot;&lt;/code&gt; is valid only when followed by digits, indicating a capturing group. See &lt;a href=&quot;perlre#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;(?PARNO)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;+&quot;&lt;/code&gt; 捕捉基を示し、数字が続く場合にのみ有効です。&lt;a href=&quot;perlre#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;（？PARNO）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="07bb712ac114a7fe219229eb5a67b484b3ca58ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;?&quot;&lt;/code&gt; and &lt;code&gt;&quot;+&quot;&lt;/code&gt; don't have any effect, as they modify whether to match more or fewer when there is a choice, and by specifying to match exactly a given numer, there is no room left for a choice.</source>
          <target state="translated">&lt;code&gt;&quot;?&quot;&lt;/code&gt; および &lt;code&gt;&quot;+&quot;&lt;/code&gt; は、選択肢がある場合に一致する数を増やすか減らすかを変更するため、効果がありません。指定された数値と完全に一致するように指定すると、選択する余地がなくなります。</target>
        </trans-unit>
        <trans-unit id="622f5262d7227133a18718033006d1fe595c3150" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;U&quot;&lt;/code&gt; template has been ported to mean &quot;Unicode&quot; on all platforms so that</source>
          <target state="translated">&lt;code&gt;&quot;U&quot;&lt;/code&gt; ようにテンプレートは、すべてのプラットフォームで「ユニコード」を意味するように移植されました</target>
        </trans-unit>
        <trans-unit id="d9a4c62629e10d33b540e16fc1ce8f7a3f41635f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;\x&quot;&lt;/code&gt; construct without curly braces should be followed by exactly two hex digits; this one is followed by three. This currently evaluates as equivalent to</source>
          <target state="translated">&lt;code&gt;&quot;\x&quot;&lt;/code&gt; 中括弧なしの構築物は、正確に二桁の数字が続くべきです。これには3つ続きます。これは現在、以下と同等と評価されます</target>
        </trans-unit>
        <trans-unit id="18a8e19a030c3c8f53e48396122990cc28295c5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;a&quot;&lt;/code&gt; is a valid modifier flag, but the &lt;code&gt;&quot;n&quot;&lt;/code&gt; is not, and raises this error. Likely what was meant instead was:</source>
          <target state="translated">&lt;code&gt;&quot;a&quot;&lt;/code&gt; 有効な修飾フラグですが、 &lt;code&gt;&quot;n&quot;&lt;/code&gt; ないが、このエラーが発生します。代わりに意味された可能性が高いものは次のとおりです：</target>
        </trans-unit>
        <trans-unit id="14e2e8dae7c922be26733e3e660b25612cc5ce26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;c&quot;&lt;/code&gt; and &lt;code&gt;&quot;C&quot;&lt;/code&gt; templates for &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; are dependent upon character set encoding. Examples of usage on EBCDIC include:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&quot;c&quot;&lt;/code&gt; および &lt;code&gt;&quot;C&quot;&lt;/code&gt; テンプレートは、文字セットのエンコーディングに依存しています。EBCDICでの使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3a90b3cf3b7660a315d348d508a144827f3fa53e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;c&quot;&lt;/code&gt; and &lt;code&gt;&quot;C&quot;&lt;/code&gt; templates for &lt;code&gt;pack()&lt;/code&gt; are dependent upon character set encoding. Examples of usage on EBCDIC include:</source>
          <target state="translated">&lt;code&gt;pack()&lt;/code&gt; の &lt;code&gt;&quot;c&quot;&lt;/code&gt; および &lt;code&gt;&quot;C&quot;&lt;/code&gt; テンプレートは、文字セットのエンコーディングに依存しています。EBCDICでの使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5c8f5308cfb898e8f57b9a7b021b28f517778138" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;code&quot;&lt;/code&gt; subroutine will only be used to filter parts of the source code that are not quotelikes, POD, or &lt;code&gt;__DATA__&lt;/code&gt; . The &lt;code&gt;quotelike&lt;/code&gt; subroutine only filters Perl quotelikes (including here documents).</source>
          <target state="translated">&lt;code&gt;&quot;code&quot;&lt;/code&gt; サブルーチンのみquotelikes、POD、又はないソースコードのフィルタ部品に使用される &lt;code&gt;__DATA__&lt;/code&gt; 。 &lt;code&gt;quotelike&lt;/code&gt; のサブルーチンは（ヒアドキュメントを含む）のPerl quotelikesをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="00d33c98d86ed179e5a669f2bc40830325b6bdf3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;code&quot;&lt;/code&gt; subroutine will only be used to filter parts of the source code that are not quotelikes, POD, or &lt;code&gt;__DATA__&lt;/code&gt;. The &lt;code&gt;quotelike&lt;/code&gt; subroutine only filters Perl quotelikes (including here documents).</source>
          <target state="translated">&lt;code&gt;&quot;code&quot;&lt;/code&gt; サブルーチンのみquotelikes、POD、又はないソースコードのフィルタ部品に使用される &lt;code&gt;__DATA__&lt;/code&gt; 。 &lt;code&gt;quotelike&lt;/code&gt; のサブルーチンは（ヒアドキュメントを含む）のPerl quotelikesをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="de5cb8ed1d57c1871e5453eb580a0076b635dfd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;use locale&quot;&lt;/code&gt; pragma</source>
          <target state="translated">&lt;code&gt;&quot;use locale&quot;&lt;/code&gt; プラグマ</target>
        </trans-unit>
        <trans-unit id="9e55a545076df6df5f2e5f8da5ca2fba9b8a556b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#!&lt;/code&gt; line is always examined for switches as the line is being parsed. Thus, if you're on a machine that allows only one argument with the &lt;code&gt;#!&lt;/code&gt; line, or worse, doesn't even recognize the &lt;code&gt;#!&lt;/code&gt; line, you still can get consistent switch behaviour regardless of how Perl was invoked, even if &lt;a href=&quot;#-x&quot;&gt;&quot;-x&quot;&lt;/a&gt; was used to find the beginning of the program.</source>
          <target state="translated">&lt;code&gt;#!&lt;/code&gt; ラインが解析されている間、ラインは常にスイッチについて検査されます。したがって、 &lt;code&gt;#!&lt;/code&gt; を含む引数を1つだけ許可するマシンを使用している場合 行、またはさらに悪いことに、 &lt;code&gt;#!&lt;/code&gt; 認識しません！行では、&lt;a href=&quot;#-x&quot;&gt;「-x」&lt;/a&gt;を使用してプログラムの先頭を見つけた場合でも、Perlがどのように呼び出されたかに関係なく、一貫したスイッチ動作を得ることができます。</target>
        </trans-unit>
        <trans-unit id="5361c21bc61e8999f4b7544ffeef33e12b0b1a2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#!&lt;/code&gt; line is always examined for switches as the line is being parsed. Thus, if you're on a machine that allows only one argument with the &lt;code&gt;#!&lt;/code&gt; line, or worse, doesn't even recognize the &lt;code&gt;#!&lt;/code&gt; line, you still can get consistent switch behaviour regardless of how Perl was invoked, even if &lt;b&gt;-x&lt;/b&gt; was used to find the beginning of the program.</source>
          <target state="translated">&lt;code&gt;#!&lt;/code&gt; ラインが解析されている間、ラインは常にスイッチについて検査されます。したがって、 &lt;code&gt;#!&lt;/code&gt; を使用して引数を1つだけ許可するマシンを使用している場合は、行、またはさらに悪いことに、 &lt;code&gt;#!&lt;/code&gt; も認識しません。&lt;b&gt;-x&lt;/b&gt;を使用してプログラムの先頭を検索した場合でも、Perlがどのように呼び出されたかに関係なく、一貫したスイッチ動作を得ることができます。</target>
        </trans-unit>
        <trans-unit id="108405af164a595d0a02e5242d4aac5c7a9939f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$OLD_PERL_VERSION&lt;/code&gt; form was added in Perl v5.20.0 for historical reasons but its use is discouraged. (If your reason to use &lt;code&gt;$]&lt;/code&gt; is to run code on old perls then referring to it as &lt;code&gt;$OLD_PERL_VERSION&lt;/code&gt; would be self-defeating.)</source>
          <target state="translated">&lt;code&gt;$OLD_PERL_VERSION&lt;/code&gt; フォームは歴史的な理由のためのPerl v5.20.0で追加されましたが、その使用は推奨されません。（ &lt;code&gt;$]&lt;/code&gt; を使用する理由が古いperlでコードを実行することである場合、それを &lt;code&gt;$OLD_PERL_VERSION&lt;/code&gt; と呼ぶことは自滅的です。）</target>
        </trans-unit>
        <trans-unit id="9a8b854056feda55458ac395207c0edacf4109d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; doesn't support &lt;code&gt;'IGNORE'&lt;/code&gt;; it has the same effect as &lt;code&gt;'DEFAULT'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$SIG{__DIE__}&lt;/code&gt; サポートされていない &lt;code&gt;'IGNORE'&lt;/code&gt; ; &lt;code&gt;'DEFAULT'&lt;/code&gt; と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="06cfb8f268bdf180a533e3982943c594a32d2955" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; hook is called even inside an &lt;code&gt;eval()&lt;/code&gt;. It was never intended to happen this way, but an implementation glitch made this possible. This used to be deprecated, as it allowed strange action at a distance like rewriting a pending exception in &lt;code&gt;$@&lt;/code&gt;. Plans to rectify this have been scrapped, as users found that rewriting a pending exception is actually a useful feature, and not a bug.</source>
          <target state="translated">&lt;code&gt;$SIG{__DIE__}&lt;/code&gt; フックがさえ内部で呼ばれている &lt;code&gt;eval()&lt;/code&gt; 。このように発生することは意図されていませんでしたが、実装の不具合によりこれが可能になりました。これは、 &lt;code&gt;$@&lt;/code&gt; 保留中の例外を書き換えるなど、離れた場所で奇妙なアクションを許可するため、非推奨になりました。保留中の例外の書き換えは実際には便利な機能であり、バグではないことがユーザーにわかったため、これを修正する計画は破棄されました。</target>
        </trans-unit>
        <trans-unit id="4fb2868e39025eacf0d00ec1478ba8ee01a99e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$VERSION&lt;/code&gt; variable is used to ensure that the .pm file and the shared library are &quot;in sync&quot; with each other. Any time you make changes to the .pm or .xs files, you should increment the value of this variable.</source>
          <target state="translated">&lt;code&gt;$VERSION&lt;/code&gt; 変数が.PMファイルと共有ライブラリがお互いに「同期」していることを確認するために使用されます。.pmファイルまたは.xsファイルに変更を加える場合は常に、この変数の値を増分する必要があります。</target>
        </trans-unit>
        <trans-unit id="2ee72eb90ddce6bbc0931d4e233b1341c5327087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$^O&lt;/code&gt; variable (&lt;code&gt;$OSNAME&lt;/code&gt; if you use &lt;code&gt;English&lt;/code&gt; ) contains an indication of the name of the operating system (not its release number) that your perl binary was built for.</source>
          <target state="translated">&lt;code&gt;$^O&lt;/code&gt; 変数（ &lt;code&gt;$OSNAME&lt;/code&gt; あなたが使用している場合 &lt;code&gt;English&lt;/code&gt; ）あなたのperlバイナリがために建てられたことをオペレーティングシステム（ないそのリリース番号）の名前の表示を含みます。</target>
        </trans-unit>
        <trans-unit id="3c4fecf66108e7576d4b50d6bd4010c1a13f5ea1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$^O&lt;/code&gt; variable (&lt;code&gt;$OSNAME&lt;/code&gt; if you use &lt;code&gt;English&lt;/code&gt;) contains an indication of the name of the operating system (not its release number) that your perl binary was built for.</source>
          <target state="translated">&lt;code&gt;$^O&lt;/code&gt; 変数（ &lt;code&gt;$OSNAME&lt;/code&gt; あなたが使用している場合 &lt;code&gt;English&lt;/code&gt; ）あなたのperlバイナリがために建てられたことをオペレーティングシステム（ないそのリリース番号）の名前の表示を含みます。</target>
        </trans-unit>
        <trans-unit id="d2aab00569329bab82f1ebc14faa8b668168dc31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$^O&lt;/code&gt; variable and the &lt;code&gt;$Config{archname}&lt;/code&gt; values for various DOSish perls are as follows:</source>
          <target state="translated">さまざまなDOSish perl の &lt;code&gt;$^O&lt;/code&gt; 変数と &lt;code&gt;$Config{archname}&lt;/code&gt; 値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="eba7fdbb831c55f9a441c12e1806775b9e1de0a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$array[1]&lt;/code&gt; is a single-element access to the array. It's going to return the item in index 1 (or undef if there is no item there). If you intend to get exactly one element from the array, this is the form you should use.</source>
          <target state="translated">&lt;code&gt;$array[1]&lt;/code&gt; 、アレイへの単一の要素へのアクセスです。インデックス1のアイテムを返します（アイテムがない場合はundef）。配列から要素を1つだけ取得する場合は、これを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2844c7d661123084d4f84dec0ab13e6bfc03da52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$buffer&lt;/code&gt; parameter can either be a scalar or a scalar reference.</source>
          <target state="translated">&lt;code&gt;$buffer&lt;/code&gt; パラメータは、いずれかのスカラーまたはスカラー参照することができます。</target>
        </trans-unit>
        <trans-unit id="27274181277155f678e99b9a2b287e41860c82ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$buffer&lt;/code&gt; parameter can either be a scalar or a scalar reference. The contents of the &lt;code&gt;$buffer&lt;/code&gt; parameter are destroyed after calling this function.</source>
          <target state="translated">&lt;code&gt;$buffer&lt;/code&gt; パラメータは、いずれかのスカラーまたはスカラー参照することができます。 &lt;code&gt;$buffer&lt;/code&gt; パラメータの内容は、この関数を呼び出した後に破棄されます。</target>
        </trans-unit>
        <trans-unit id="8c4fb1959a7d1bef1019739dc5a4ea212bbc1a3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$buffer&lt;/code&gt; parameter is modified by &lt;code&gt;inflate&lt;/code&gt; . On completion it will contain what remains of the input buffer after inflation. This means that &lt;code&gt;$buffer&lt;/code&gt; will be an empty string when the return status is &lt;code&gt;Z_OK&lt;/code&gt; . When the return status is &lt;code&gt;Z_STREAM_END&lt;/code&gt; the &lt;code&gt;$buffer&lt;/code&gt; parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</source>
          <target state="translated">&lt;code&gt;$buffer&lt;/code&gt; パラメータはによって変更される &lt;code&gt;inflate&lt;/code&gt; 。完了すると、インフレーション後の入力バッファーの残りが含まれます。つまり、戻りステータスが &lt;code&gt;Z_OK&lt;/code&gt; の場合、 &lt;code&gt;$buffer&lt;/code&gt; は空の文字列になります。戻りステータスが &lt;code&gt;Z_STREAM_END&lt;/code&gt; の場合、 &lt;code&gt;$buffer&lt;/code&gt; パラメータには、デフレートされたデータストリームの後に入力バッファに格納されたもの（もしあれば）が含まれます。</target>
        </trans-unit>
        <trans-unit id="735065db643a224d7abc76057afb08424a7f97a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$buffer&lt;/code&gt; parameter is modified by &lt;code&gt;inflate&lt;/code&gt;. On completion it will contain what remains of the input buffer after inflation. This means that &lt;code&gt;$buffer&lt;/code&gt; will be an empty string when the return status is &lt;code&gt;Z_OK&lt;/code&gt;. When the return status is &lt;code&gt;Z_STREAM_END&lt;/code&gt; the &lt;code&gt;$buffer&lt;/code&gt; parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</source>
          <target state="translated">&lt;code&gt;$buffer&lt;/code&gt; パラメータはによって変更される &lt;code&gt;inflate&lt;/code&gt; 。完了すると、インフレーション後に入力バッファーに残っているものが含まれます。これは、戻りステータスが &lt;code&gt;Z_OK&lt;/code&gt; の場合、 &lt;code&gt;$buffer&lt;/code&gt; が空の文字列になることを意味します。戻りステータスが &lt;code&gt;Z_STREAM_END&lt;/code&gt; の場合、 &lt;code&gt;$buffer&lt;/code&gt; パラメーターには、収縮したデータストリームの後に入力バッファーに格納されたもの（ある場合）が含まれます。</target>
        </trans-unit>
        <trans-unit id="4dd78ddf95d786af083e0413cd47b10ceef529f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$context&lt;/code&gt; passed in will be an instance of &lt;a href=&quot;Test2::API::Context&quot;&gt;Test2::API::Context&lt;/a&gt;. The &lt;code&gt;$exit&lt;/code&gt; argument will be the original exit code before anything modified it. &lt;code&gt;$$new_exit&lt;/code&gt; is a reference to the new exit code. You may modify this to change the exit code. Please note that &lt;code&gt;$$new_exit&lt;/code&gt; may already be different from &lt;code&gt;$exit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$context&lt;/code&gt; で渡されたのインスタンスになります&lt;a href=&quot;Test2::API::Context&quot;&gt;Test2を:: API ::コンテキスト&lt;/a&gt;。 &lt;code&gt;$exit&lt;/code&gt; 何がそれを修正する前に、引数は、元の終了コードになります。 &lt;code&gt;$$new_exit&lt;/code&gt; は、新しい終了コードへの参照です。これを変更して、終了コードを変更できます。 &lt;code&gt;$$new_exit&lt;/code&gt; はすでに &lt;code&gt;$exit&lt;/code&gt; とは異なる場合があることに注意してください</target>
        </trans-unit>
        <trans-unit id="d1f084c43da0252a420f089c62656f2a4438958f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$description&lt;/code&gt; is usually a test file name (but only by convention.) It is used as a unique identifier (see e.g. &lt;a href=&quot;#parsers&quot;&gt;&quot;parsers&quot;&lt;/a&gt;.) Reusing a description is a fatal error.</source>
          <target state="translated">&lt;code&gt;$description&lt;/code&gt; （だけ慣例により。）通常、テストファイル名であることが一意の識別子として使用されている（例えば参照&lt;a href=&quot;#parsers&quot;&gt;「パーサを」&lt;/a&gt;。）の記述を再利用するには、致命的なエラーです。</target>
        </trans-unit>
        <trans-unit id="4deaa69228d0bed93aa2331246fd160457f98868" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$description&lt;/code&gt; is usually a test file name (but only by convention.) It is used as a unique identifier (see e.g. &lt;a href=&quot;#parsers&quot;&gt;parsers&lt;/a&gt;.) Reusing a description is a fatal error.</source>
          <target state="translated">&lt;code&gt;$description&lt;/code&gt; （だけ慣例により。）通常、テストファイル名であることが一意の識別子として使用されている（例えば参照&lt;a href=&quot;#parsers&quot;&gt;パーサを&lt;/a&gt;。）の記述を再利用するには、致命的なエラーです。</target>
        </trans-unit>
        <trans-unit id="04558cf60bc9c7167d85368eb6635a2473770d4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$eof&lt;/code&gt; parameter needs a bit of explanation.</source>
          <target state="translated">&lt;code&gt;$eof&lt;/code&gt; パラメータは、説明のビットを必要とします。</target>
        </trans-unit>
        <trans-unit id="65f92aaac6b66cd674844396e8d45e3f370fce50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$eof&lt;/code&gt; parameter only needs to be used if &lt;b&gt;all&lt;/b&gt; of the following conditions apply</source>
          <target state="translated">&lt;code&gt;$eof&lt;/code&gt; 場合は、パラメータにのみ使用する必要があり&lt;b&gt;、すべての&lt;/b&gt;次の条件の適用は、</target>
        </trans-unit>
        <trans-unit id="8a410599f21ede34ce0c4e99388bf1aa3ff8199e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$gzerrno&lt;/code&gt; scalar holds the error code associated with the most recent</source>
          <target state="translated">&lt;code&gt;$gzerrno&lt;/code&gt; スカラーは、最新に関連付けられたエラーコードを保持しています</target>
        </trans-unit>
        <trans-unit id="6264c4349310ae2e82ed9dccab08bd7526a285d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$in_fh&lt;/code&gt; parameter may be any object that provides a &lt;b&gt;getline()&lt;/b&gt; method to retrieve a single line of input text (hence, an appropriate wrapper object could be used to parse PODs from a single string or an array of strings).</source>
          <target state="translated">&lt;code&gt;$in_fh&lt;/code&gt; パラメータが提供する任意のオブジェクトであってもよい&lt;b&gt;のgetline（）&lt;/b&gt;入力テキストの単一行を取得する方法（したがって、適切なラッパー・オブジェクトは、単一の文字列または文字列の配列から解析のPODに使用することができます）。</target>
        </trans-unit>
        <trans-unit id="e89b34e9c40c9e18afebc88c2be1c3150fecd52e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$input&lt;/code&gt; and &lt;code&gt;$output&lt;/code&gt; parameters can be either scalars or scalar references.</source>
          <target state="translated">&lt;code&gt;$input&lt;/code&gt; と &lt;code&gt;$output&lt;/code&gt; パラメータは、スカラーまたはスカラーリファレンスのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="d5ad245702c5052688f1d153e2fbd703e2f8f301" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; パラメータ</target>
        </trans-unit>
        <trans-unit id="daa9f5f9a1ef279c49e625124d1e76146ad5e7d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$level&lt;/code&gt; parameter defines the compression level. Valid values are 0 through 9, &lt;code&gt;Z_NO_COMPRESSION&lt;/code&gt; , &lt;code&gt;Z_BEST_SPEED&lt;/code&gt; , &lt;code&gt;Z_BEST_COMPRESSION&lt;/code&gt; , and &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; . If &lt;code&gt;$level&lt;/code&gt; is not specified &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;$level&lt;/code&gt; パラメータは、圧縮レベルを定義します。有効な値は0〜9、 &lt;code&gt;Z_NO_COMPRESSION&lt;/code&gt; 、 &lt;code&gt;Z_BEST_SPEED&lt;/code&gt; 、 &lt;code&gt;Z_BEST_COMPRESSION&lt;/code&gt; 、および &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; です。 &lt;code&gt;$level&lt;/code&gt; が指定されていない場合、 &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="898131faa0f3e8f99a6d077f4bd62a3c78ce8ae9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$level&lt;/code&gt; parameter defines the compression level. Valid values are 0 through 9, &lt;code&gt;Z_NO_COMPRESSION&lt;/code&gt;, &lt;code&gt;Z_BEST_SPEED&lt;/code&gt;, &lt;code&gt;Z_BEST_COMPRESSION&lt;/code&gt;, and &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt;. If &lt;code&gt;$level&lt;/code&gt; is not specified &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;$level&lt;/code&gt; パラメータは、圧縮レベルを定義します。有効な値は0から9、 &lt;code&gt;Z_NO_COMPRESSION&lt;/code&gt; 、 &lt;code&gt;Z_BEST_SPEED&lt;/code&gt; 、 &lt;code&gt;Z_BEST_COMPRESSION&lt;/code&gt; 、および &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; です。 &lt;code&gt;$level&lt;/code&gt; が指定されていない場合、 &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="cb33cd5cc665b9c3bd624d64f0ec40381e42cbac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$mon&lt;/code&gt; is zero-based: January equals &lt;code&gt;0&lt;/code&gt; . The &lt;code&gt;$year&lt;/code&gt; is 1900-based: 2001 equals &lt;code&gt;101&lt;/code&gt; . &lt;code&gt;$wday&lt;/code&gt; and &lt;code&gt;$yday&lt;/code&gt; default to zero (and are usually ignored anyway), and &lt;code&gt;$isdst&lt;/code&gt; defaults to -1.</source>
          <target state="translated">&lt;code&gt;$mon&lt;/code&gt; ゼロベースである：1月は等しい &lt;code&gt;0&lt;/code&gt; を。 &lt;code&gt;$year&lt;/code&gt; 1900ベースである：2001等しい &lt;code&gt;101&lt;/code&gt; 。 &lt;code&gt;$wday&lt;/code&gt; と &lt;code&gt;$yday&lt;/code&gt; デフォルトでゼロになり（通常は無視されます）、 &lt;code&gt;$isdst&lt;/code&gt; デフォルトは-1です。</target>
        </trans-unit>
        <trans-unit id="7421dc164fd8281f20128cde64ce3b745047d3c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$mon&lt;/code&gt; is zero-based: January equals &lt;code&gt;0&lt;/code&gt;. The &lt;code&gt;$year&lt;/code&gt; is 1900-based: 2001 equals &lt;code&gt;101&lt;/code&gt;. &lt;code&gt;$wday&lt;/code&gt; and &lt;code&gt;$yday&lt;/code&gt; default to zero (and are usually ignored anyway), and &lt;code&gt;$isdst&lt;/code&gt; defaults to -1.</source>
          <target state="translated">&lt;code&gt;$mon&lt;/code&gt; ゼロベースである：1月は等しい &lt;code&gt;0&lt;/code&gt; を。 &lt;code&gt;$year&lt;/code&gt; 1900ベースである：2001等しい &lt;code&gt;101&lt;/code&gt; 。 &lt;code&gt;$wday&lt;/code&gt; と &lt;code&gt;$yday&lt;/code&gt; デフォルトでゼロに設定され（通常は無視されます）、 &lt;code&gt;$isdst&lt;/code&gt; デフォルトで-1に設定されます。</target>
        </trans-unit>
        <trans-unit id="23cd0f7ae4d6af5b92c0f4a1db509d798cb0ac59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$name&lt;/code&gt; variable should be the key used to access the facet in a facets hashref. For instance the assertion facet has the key 'assert', the information facet has the 'info' key, and the error facet has the key 'errors'. You may include or omit the 's' at the end of the name, the method is smart enough to try both the 's' and no-'s' forms, it will check what you provided first, and if that is not found it will add or strip the 's and try again.</source>
          <target state="translated">&lt;code&gt;$name&lt;/code&gt; 変数は、ファセットハッシュリファレンスで、ファセットにアクセスするために使用されるキーでなければなりません。たとえば、アサーションファセットにはキー「assert」があり、情報ファセットには「info」キーがあり、エラーファセットにはキー「errors」があります。名前の末尾に「s」を含めたり省略したりできます。このメソッドは、「s」と「no-」の両方の形式を試すのに十分スマートです。最初に指定したものをチェックし、それが見つからない場合はチェックします。を追加または削除して、再試行します。</target>
        </trans-unit>
        <trans-unit id="d866868676edf3ef0ef337619cbb9d7d463b060f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータ</target>
        </trans-unit>
        <trans-unit id="c96d672905fea90a5656f24eb9f7936742884276" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$parser&lt;/code&gt; is a &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; ある&lt;a href=&quot;../parser&quot;&gt;TAP ::パーサ&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6143cd77ebc527cea165f0db3248c326b91b9c6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$parser&lt;/code&gt; is a &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; ある&lt;a href=&quot;TAP::Parser&quot;&gt;TAP ::パーサ&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0cde3685cee91824cf2720ce6f47ce3c1655541a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$tabstop&lt;/code&gt; variable controls how many column positions apart each tabstop is. The default is 8.</source>
          <target state="translated">&lt;code&gt;$tabstop&lt;/code&gt; 各タブストップがどのように多くの列の位置離れて変数を制御します。デフォルトは8です。</target>
        </trans-unit>
        <trans-unit id="07507ab596d7a55a579157466578b8c289c17f57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$whence&lt;/code&gt; parameter should be one of SEEK_SET, SEEK_CUR or SEEK_END.</source>
          <target state="translated">&lt;code&gt;$whence&lt;/code&gt; パラメータがSEEK_SET、SEEK_CURまたはSEEK_ENDの一つでなければなりません。</target>
        </trans-unit>
        <trans-unit id="78200cc1ea59e994c5d2418e77df8c6e8fa8185d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$whence&lt;/code&gt; parameter takes one the usual values, namely SEEK_SET, SEEK_CUR or SEEK_END.</source>
          <target state="translated">&lt;code&gt;$whence&lt;/code&gt; パラメータが1つの通常の値、すなわちSEEK_SET、SEEK_CURまたはSEEK_ENDをとります。</target>
        </trans-unit>
        <trans-unit id="d36c42de8f17d5532305a2dae875ef12d3135188" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$|&lt;/code&gt; is one of the per-filehandle special variables, so each filehandle has its own copy of its value. If you want to merge standard output and standard error for instance, you have to unbuffer each (although STDERR might be unbuffered by default):</source>
          <target state="translated">&lt;code&gt;$|&lt;/code&gt; はファイルハンドルごとの特殊変数の1つなので、各ファイルハンドルにはその値の独自のコピーがあります。たとえば、標準出力と標準エラーをマージする場合は、それぞれをバッファリング解除する必要があります（ただし、STDERRはデフォルトでバッファリングされない場合があります）。</target>
        </trans-unit>
        <trans-unit id="697d0e02c23a6252ba73964b72ba7fef06e6718b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%^H&lt;/code&gt; hash provides the same scoping semantic as &lt;code&gt;$^H&lt;/code&gt; . This makes it useful for implementation of lexically scoped pragmas. See &lt;a href=&quot;perlpragma&quot;&gt;perlpragma&lt;/a&gt;. All the entries are stringified when accessed at runtime, so only simple values can be accommodated. This means no pointers to objects, for example.</source>
          <target state="translated">&lt;code&gt;%^H&lt;/code&gt; ハッシュは、セマンティックとして同じスコープ提供 &lt;code&gt;$^H&lt;/code&gt; 。これにより、レキシカルスコープのプラグマの実装に役立ちます。&lt;a href=&quot;perlpragma&quot;&gt;perlpragmaを&lt;/a&gt;参照してください。実行時にアクセスされると、すべてのエントリが文字列化されるため、単純な値のみに対応できます。これは、たとえば、オブジェクトへのポインタがないことを意味します。</target>
        </trans-unit>
        <trans-unit id="1c509249d339b2febfc4d2738ff085bd8d0cc7d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%^H&lt;/code&gt; hash provides the same scoping semantic as &lt;code&gt;$^H&lt;/code&gt;. This makes it useful for implementation of lexically scoped pragmas. See &lt;a href=&quot;perlpragma&quot;&gt;perlpragma&lt;/a&gt;. All the entries are stringified when accessed at runtime, so only simple values can be accommodated. This means no pointers to objects, for example.</source>
          <target state="translated">&lt;code&gt;%^H&lt;/code&gt; ハッシュは、セマンティックとして同じスコープ提供 &lt;code&gt;$^H&lt;/code&gt; 。これにより、字句スコープのプラグマの実装に役立ちます。&lt;a href=&quot;perlpragma&quot;&gt;perlpragmaを&lt;/a&gt;参照してください。すべてのエントリは実行時にアクセスされるときに文字列化されるため、単純な値のみに対応できます。これは、たとえば、オブジェクトへのポインタがないことを意味します。</target>
        </trans-unit>
        <trans-unit id="0c6228356b1a9a18f543cd58f3d14ae5ed0885fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%s&lt;/code&gt; is expanded to be the filename (&lt;code&gt;&lt;a href=&quot;../functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; is used, so be careful to escape any other &lt;code&gt;%&lt;/code&gt; signs). The 'commands' are checked for sanity - they must contain the &lt;code&gt;%s&lt;/code&gt; , and the read open must end with the pipe sign, and the write open must begin with the pipe sign.</source>
          <target state="translated">&lt;code&gt;%s&lt;/code&gt; が（ファイル名であることが展開されている &lt;code&gt;&lt;a href=&quot;../functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 使用されているので、他のエスケープするように注意してください &lt;code&gt;%&lt;/code&gt; の徴候を）。「コマンド」の健全性がチェックされます-コマンドには &lt;code&gt;%s&lt;/code&gt; が含まれている必要があり、読み取りオープンはパイプ記号で終了し、書き込みオープンはパイプ記号で開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="2719188c4cf371193166be19d0cfafdbeb67f360" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%s&lt;/code&gt; is expanded to be the filename (&lt;code&gt;sprintf&lt;/code&gt; is used, so be careful to escape any other &lt;code&gt;%&lt;/code&gt; signs). The 'commands' are checked for sanity - they must contain the &lt;code&gt;%s&lt;/code&gt;, and the read open must end with the pipe sign, and the write open must begin with the pipe sign.</source>
          <target state="translated">&lt;code&gt;%s&lt;/code&gt; が（ファイル名であることが展開されている &lt;code&gt;sprintf&lt;/code&gt; 使用されているので、他のエスケープするように注意してください &lt;code&gt;%&lt;/code&gt; の徴候を）。'コマンド'の正常性がチェックされます。コマンドには &lt;code&gt;%s&lt;/code&gt; が含まれている必要があり、読み取りオープンはパイプ記号で終了し、書き込みオープンはパイプ記号で開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf6ebcc90a0416e4d456de5b17214b9e0b4a29e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; unary operator in the INPUT: section is used to tell &lt;b&gt;xsubpp&lt;/b&gt; that it should convert a Perl value to/from C using the C type to the left of &lt;code&gt;&amp;amp;&lt;/code&gt; , but provide a pointer to this value when the C function is called.</source>
          <target state="translated">INPUT：セクションの &lt;code&gt;&amp;amp;&lt;/code&gt; 単項演算子は、 &lt;code&gt;&amp;amp;&lt;/code&gt; の左側のCタイプを使用してPerl値をCとの間で変換する必要があることを&lt;b&gt;xsubpp&lt;/b&gt;に伝えるために使用されますが、C関数が呼び出されると、この値へのポインターを提供します。</target>
        </trans-unit>
        <trans-unit id="f377db487fb9db0d6201d5c112d20cdac0c1ec99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; unary operator in the INPUT: section is used to tell &lt;b&gt;xsubpp&lt;/b&gt; that it should convert a Perl value to/from C using the C type to the left of &lt;code&gt;&amp;amp;&lt;/code&gt;, but provide a pointer to this value when the C function is called.</source>
          <target state="translated">INPUT：セクションの &lt;code&gt;&amp;amp;&lt;/code&gt; 単項演算子は、 &lt;code&gt;&amp;amp;&lt;/code&gt; の左側にあるCタイプを使用してPerl値をCとの間で変換する必要があることを&lt;b&gt;xsubpp&lt;/b&gt;に通知するために使用されますが、C関数が呼び出されるときにこの値へのポインターを提供します。</target>
        </trans-unit>
        <trans-unit id="0b29d8efcd6e9fd3b54226af4554626aa17bc6d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers can also be used on &lt;code&gt;()&lt;/code&gt; groups to force a particular byte-order on all components in that group, including all its subgroups.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;&lt;/code&gt; 改質剤はまた、上で使用することができる &lt;code&gt;()&lt;/code&gt; そのすべてのサブグループを含む、そのグループ内のすべてのコンポーネントの特定のバイト順を強制するグループ。</target>
        </trans-unit>
        <trans-unit id="46a36b2037ff10a0c2a8e03718578280ecd8883f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers can only be used on floating-point formats on big- or little-endian machines. Otherwise, attempting to use them raises an exception.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子はビッグエンディアンかリトルエンディアンのマシン上の浮動小数点形式で使用することができます。それ以外の場合、それらを使用しようとすると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="99da10732816cfac1a93d49f7cb24d6856262342" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator is most often seen in a &lt;code&gt;while&lt;/code&gt; loop:</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子は、最も頻繁に見られ &lt;code&gt;while&lt;/code&gt; ループ：</target>
        </trans-unit>
        <trans-unit id="afce8c3936870dcddae71b2f62bcc6619bb65ebe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator performs a globbing operation (see above). In Perl versions earlier than v5.6.0, the internal glob() operator forks csh(1) to do the actual glob expansion, but csh can't handle more than 127 items and so gives the error message &lt;code&gt;Argument list too long&lt;/code&gt; . People who installed tcsh as csh won't have this problem, but their users may be surprised by it.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; オペレータが実行グロブ操作（上記参照）。v5.6.0より前のバージョンのPerlでは、内部glob（）オペレーターはcsh（1）をフォークして実際のグロブ拡張を実行しますが、cshは127を超えるアイテムを処理できないため、エラーメッセージ &lt;code&gt;Argument list too long&lt;/code&gt; ます。cshとしてtcshをインストールした人にはこの問題はありませんが、ユーザーは驚くかもしれません。</target>
        </trans-unit>
        <trans-unit id="83ef73a269b83405910162deabaede06a6badff3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator performs a globbing operation (see above). In Perl versions earlier than v5.6.0, the internal glob() operator forks csh(1) to do the actual glob expansion, but csh can't handle more than 127 items and so gives the error message &lt;code&gt;Argument list too long&lt;/code&gt;. People who installed tcsh as csh won't have this problem, but their users may be surprised by it.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; オペレータが実行グロブ操作（上記参照）。v5.6.0より前のPerlバージョンでは、内部glob（）オペレーターがcsh（1）をフォークして実際のglob拡張を実行しますが、cshは127を超える項目を処理できないため、エラーメッセージ「 &lt;code&gt;Argument list too long&lt;/code&gt; ます」が表示されます。tcshをcshとしてインストールした人はこの問題を抱えていませんが、ユーザーはそれに驚かれるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6640438652752fb93dc538db26332c2e258075d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol will return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for end-of-file only once. If you call it again after this, it will assume you are processing another &lt;code&gt;@ARGV&lt;/code&gt; list, and if you haven't set &lt;code&gt;@ARGV&lt;/code&gt; , will read input from STDIN.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 記号が返されます &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を一度だけファイルの終わりのために。あなたはこの後、再びそれを呼び出すと、それはあなたが別の処理をしていると仮定します &lt;code&gt;@ARGV&lt;/code&gt; のリストを、そしてあなたが設定されていない場合 &lt;code&gt;@ARGV&lt;/code&gt; を、STDINからの入力を読み込みます。</target>
        </trans-unit>
        <trans-unit id="3dc916b5527d8e3b6254129215dab620bcd909c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol will return &lt;code&gt;undef&lt;/code&gt; for end-of-file only once. If you call it again after this, it will assume you are processing another &lt;code&gt;@ARGV&lt;/code&gt; list, and if you haven't set &lt;code&gt;@ARGV&lt;/code&gt;, will read input from STDIN.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 記号が返されます &lt;code&gt;undef&lt;/code&gt; を一度だけファイルの終わりのために。この後に再度呼び出すと、別の &lt;code&gt;@ARGV&lt;/code&gt; リストを処理していると見 &lt;code&gt;@ARGV&lt;/code&gt; 、@ ARGVを設定していない場合は、STDINからの入力が読み取られます。</target>
        </trans-unit>
        <trans-unit id="eb62b601a884f58c8064f8b862089ac2459b0228" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'I'&lt;/code&gt; prefix is used during creation of &lt;code&gt;stdin&lt;/code&gt; ..&lt;code&gt;stderr&lt;/code&gt; via special &lt;code&gt;PerlIO_fdopen&lt;/code&gt; calls; the &lt;code&gt;'#'&lt;/code&gt; prefix means that this is &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; and that</source>
          <target state="translated">&lt;code&gt;'I'&lt;/code&gt; プレフィックスは作成時に使用されている &lt;code&gt;stdin&lt;/code&gt; .. &lt;code&gt;stderr&lt;/code&gt; を経由して、特別な &lt;code&gt;PerlIO_fdopen&lt;/code&gt; の呼び出し; &lt;code&gt;'#'&lt;/code&gt; であると接頭手段 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; で、その</target>
        </trans-unit>
        <trans-unit id="e4a1e4127c99792fcfccb34fc1ce371d9c5cbbcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'I'&lt;/code&gt; prefix is used during creation of &lt;code&gt;stdin&lt;/code&gt;..&lt;code&gt;stderr&lt;/code&gt; via special &lt;code&gt;PerlIO_fdopen&lt;/code&gt; calls; the &lt;code&gt;'#'&lt;/code&gt; prefix means that this is &lt;code&gt;sysopen&lt;/code&gt; and that</source>
          <target state="translated">&lt;code&gt;'I'&lt;/code&gt; プレフィックスは作成時に使用されている &lt;code&gt;stdin&lt;/code&gt; .. &lt;code&gt;stderr&lt;/code&gt; を経由して、特別な &lt;code&gt;PerlIO_fdopen&lt;/code&gt; の呼び出し; &lt;code&gt;'#'&lt;/code&gt; であると接頭手段 &lt;code&gt;sysopen&lt;/code&gt; で、その</target>
        </trans-unit>
        <trans-unit id="039ae207dd483bda31bf76d897310e5b8ac60fad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'nomethod'&lt;/code&gt; key is used to specify a catch-all function to be called for any operator that is not individually overloaded. The specified function will be passed four parameters. The first three arguments coincide with those that would have been passed to the corresponding method if it had been defined. The fourth argument is the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; key for that missing method. If the experimental &quot;bitwise&quot; feature is enabled (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;), a fifth TRUE argument is passed to subroutines handling &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; to indicate that the caller is expecting numeric behaviour.</source>
          <target state="translated">&lt;code&gt;'nomethod'&lt;/code&gt; キーは個別に過負荷にされていない任意の演算子のために呼ばれるキャッチオール機能を指定するために使用されます。指定された関数には4つのパラメーターが渡されます。最初の3つの引数は、対応するメソッドが定義されていれば、それに渡されていた引数と一致します。 4番目の引数は、欠落しているメソッドの &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; キーです。実験的な「ビット単位」機能が有効になっている場合（&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照）、5番目のTRUE引数が &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; を処理するサブルーチンに渡されます。、 &lt;code&gt;^&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; は、呼び出し元が数値の動作を期待していることを示します。</target>
        </trans-unit>
        <trans-unit id="7a25ce7c1bcfa6d33e234b18065c7c24fe6b0cdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'nomethod'&lt;/code&gt; key is used to specify a catch-all function to be called for any operator that is not individually overloaded. The specified function will be passed four parameters. The first three arguments coincide with those that would have been passed to the corresponding method if it had been defined. The fourth argument is the &lt;code&gt;use overload&lt;/code&gt; key for that missing method. If the &quot;bitwise&quot; feature is enabled (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;), a fifth TRUE argument is passed to subroutines handling &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; to indicate that the caller is expecting numeric behaviour.</source>
          <target state="translated">&lt;code&gt;'nomethod'&lt;/code&gt; キーは個別に過負荷にされていない任意の演算子のために呼ばれるキャッチオール機能を指定するために使用されます。指定された関数には4つのパラメーターが渡されます。最初の3つの引数は、対応するメソッドが定義されていた場合に渡される引数と一致します。 4番目の引数は、欠落しているメソッドの &lt;code&gt;use overload&lt;/code&gt; キーを使用することです。 「ビット単位」機能が有効になっている場合（&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照）、5番目のTRUE引数が &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; を処理するサブルーチンに渡されます。、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;~&lt;/code&gt; は、呼び出し元が数値の動作を期待していることを示します。</target>
        </trans-unit>
        <trans-unit id="a56ee7f30e7bca1dfc3e81783dadbc2bc19f727f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(a|b)*&lt;/code&gt; part can match at every char in the string, and then fail every time because there is no &lt;code&gt;z&lt;/code&gt; in the string. So obviously we can avoid using the regex engine unless there is a &lt;code&gt;z&lt;/code&gt; in the string. Likewise in a pattern like:</source>
          <target state="translated">&lt;code&gt;(a|b)*&lt;/code&gt; の部分は、文字列内のすべての文字に一致し、その後、何もありませんので、毎回失敗することができ &lt;code&gt;z&lt;/code&gt; の文字列では。したがって、文字列に &lt;code&gt;z&lt;/code&gt; がない限り、正規表現エンジンの使用を避けることができます。同様に次のようなパターンで：</target>
        </trans-unit>
        <trans-unit id="13f6771d5d5f30a227731a56b375d2b66657907c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*_BS&lt;/code&gt; file can put some code into the generated &lt;code&gt;*.bs&lt;/code&gt; file by placing it in &lt;code&gt;$bscode&lt;/code&gt; . This is a handy 'escape' mechanism that may prove useful in complex situations.</source>
          <target state="translated">&lt;code&gt;*_BS&lt;/code&gt; ファイルが生成さにいくつかのコードを置くことができます &lt;code&gt;*.bs&lt;/code&gt; に置くことで、ファイル &lt;code&gt;$bscode&lt;/code&gt; 。これは、複雑な状況で役立つことがある便利な「エスケープ」メカニズムです。</target>
        </trans-unit>
        <trans-unit id="b4a8908910386e1e7fa8ea911939f668d427bb11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*_BS&lt;/code&gt; file can put some code into the generated &lt;code&gt;*.bs&lt;/code&gt; file by placing it in &lt;code&gt;$bscode&lt;/code&gt;. This is a handy 'escape' mechanism that may prove useful in complex situations.</source>
          <target state="translated">&lt;code&gt;*_BS&lt;/code&gt; ファイルが生成さにいくつかのコードを置くことができます &lt;code&gt;*.bs&lt;/code&gt; に置くことで、ファイル &lt;code&gt;$bscode&lt;/code&gt; 。これは、複雑な状況で役立つ可能性のある便利な「エスケープ」メカニズムです。</target>
        </trans-unit>
        <trans-unit id="2ecae669ab5e752a1da7ac780070c852f9269859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*foo{THING}&lt;/code&gt; notation can also be used to obtain references to the individual elements of *foo. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*foo{THING}&lt;/code&gt; 記法も* FOOの個々の要素への参照を取得するために使用することができます。&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="255645a7c66228ebcb1a14a341007dcfb97aeb51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*x = \$y&lt;/code&gt; mechanism may be used to pass and return cheap references into or from subroutines if you don't want to copy the whole thing. It only works when assigning to dynamic variables, not lexicals.</source>
          <target state="translated">&lt;code&gt;*x = \$y&lt;/code&gt; メカニズムを使用すると、全体をコピーしたくない場合はサブルーチンにまたはから安いの参照を渡して、返すために使用することができます。字句ではなく、動的変数に割り当てる場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="fa1621299f61dcb4d1993cf9ac21afe7e26870e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; form is now obsolete and strongly deprecated.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; のフォームは廃止と強く非推奨です。</target>
        </trans-unit>
        <trans-unit id="6cc8f120eca26410795cc27186ae2b363ac834f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; prototype is a special alternative to &lt;code&gt;$&lt;/code&gt; that will act like &lt;code&gt;\[@%]&lt;/code&gt; when given a literal array or hash variable, but will otherwise force scalar context on the argument. This is useful for functions which should accept either a literal array or an array reference as the argument:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; のプロトタイプはに特別な代替案である &lt;code&gt;$&lt;/code&gt; のように動作します &lt;code&gt;\[@%]&lt;/code&gt; リテラル配列やハッシュ変数を与えられたが、それ以外の引数にスカラーコンテキストを強制するとき。これは、引数としてリテラル配列または配列参照のいずれかを受け入れる必要がある関数に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bb2105637115aa748fce8bf2036dcef89f13282b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; specifier is ignored if the option destination is not a scalar.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; のオプション先がスカラーでない場合、指定子は無視されます。</target>
        </trans-unit>
        <trans-unit id="6806c6a2e8d1792a36b6bbc8a8afc151b341b78f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; unary operator doesn't do anything in Perl. It exists to avoid syntactic ambiguities.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 単項演算子は、Perlで何もしません。構文のあいまいさを避けるために存在します。</target>
        </trans-unit>
        <trans-unit id="37675ebea1632ec83c2cb0e9f47bb19d76dac534" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-&amp;gt;&lt;/code&gt; syntax is also used when dereferencing a reference. It looks like the same operator, but these are two different operations.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;&lt;/code&gt; 参照を参照解除するときの構文も使用されています。同じ演算子のように見えますが、これらは2つの異なる操作です。</target>
        </trans-unit>
        <trans-unit id="d4b0e534108246bac541ccb7068bc25380ccc720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-&amp;gt;new()&lt;/code&gt; method is an alias for &lt;code&gt;-&amp;gt;create()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-&amp;gt;new()&lt;/code&gt; メソッドは、の別名である &lt;code&gt;-&amp;gt;create()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7955495872f4b4ea374a5a73bb5908daadd88feb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-&amp;gt;new()&lt;/code&gt; method is an alias for &lt;code&gt;-&amp;gt;create()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;new()&lt;/code&gt; メソッドは、の別名である &lt;code&gt;-&amp;gt;create()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8192632e359d95a2b8b1baa2f14ef188f64fb3bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--libpods&lt;/code&gt; option is no longer recognized as of Perl 5.26.</source>
          <target state="translated">&lt;code&gt;--libpods&lt;/code&gt; オプションはもはやPerlの5.26のとして認識されません。</target>
        </trans-unit>
        <trans-unit id="127cc52ec86933168c2c1aece6f9b232d7cd7b7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--rules&lt;/code&gt; option is used to control which tests are run sequentially and which are run in parallel, if the &lt;code&gt;--jobs&lt;/code&gt; option is specified. The option may be specified multiple times, and the order matters.</source>
          <target state="translated">&lt;code&gt;--rules&lt;/code&gt; のオプションは、テストが順次実行された場合にどのは、並行して実行される制御するために使用される &lt;code&gt;--jobs&lt;/code&gt; オプションが指定されています。オプションは複数回指定でき、順序が重要です。</target>
        </trans-unit>
        <trans-unit id="608a757f76e2d49976d1abe026a19ab9cb45d134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--state&lt;/code&gt; switch may be used more than once.</source>
          <target state="translated">&lt;code&gt;--state&lt;/code&gt; スイッチを複数回使用することができます。</target>
        </trans-unit>
        <trans-unit id="cc3c8ce0b0c852fbdda4091c52f36592afcdc410" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--state&lt;/code&gt; switch requires an argument which must be a comma separated list of one or more of the following options.</source>
          <target state="translated">&lt;code&gt;--state&lt;/code&gt; スイッチは、コンマは、以下の1つ以上のオプションのリストを分離しなければならない引数が必要です。</target>
        </trans-unit>
        <trans-unit id="377dc2d9444ba53f1e07b9f9c8ed4eb80a1854c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trap&lt;/code&gt; option will attempt to trap SIGINT (Ctrl-C) during a test run and display the test summary even if the run is interrupted</source>
          <target state="translated">&lt;code&gt;--trap&lt;/code&gt; オプションは、テスト実行中にトラップSIGINT（Ctrl + Cキー）にしようとすると、実行が中断された場合でも、テストの概要が表示されます</target>
        </trans-unit>
        <trans-unit id="e392f25b1c4fe3943f476468712579d620408f6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-A&lt;/code&gt; command line switch</source>
          <target state="translated">&lt;code&gt;-A&lt;/code&gt; コマンドラインスイッチ</target>
        </trans-unit>
        <trans-unit id="eb91ceec65f320f24de6ea1ba97059dfa04bc1be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-A&lt;/code&gt; omits the Autoloader code, &lt;code&gt;-X&lt;/code&gt; omits XS elements, &lt;code&gt;--skip-exporter&lt;/code&gt; omits the Exporter code, &lt;code&gt;--use-new-tests&lt;/code&gt; sets up a modern testing environment, and &lt;code&gt;-n&lt;/code&gt; specifies the name of the module.</source>
          <target state="translated">&lt;code&gt;-A&lt;/code&gt; は、オートローダコード、省略 &lt;code&gt;-X&lt;/code&gt; 省いXS要素を、 &lt;code&gt;--skip-exporter&lt;/code&gt; 輸出業者コード、省略 &lt;code&gt;--use-new-tests&lt;/code&gt; 近代的なテスト環境設定、および &lt;code&gt;-n&lt;/code&gt; 指定にモジュールの名前を。</target>
        </trans-unit>
        <trans-unit id="597b9a9c8e6ccba33470cbc78977519edc52f8e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-A&lt;/code&gt; omits the Autoloader code, &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; omits XS elements, &lt;code&gt;--skip-exporter&lt;/code&gt; omits the Exporter code, &lt;code&gt;--&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;-new-tests&lt;/code&gt; sets up a modern testing environment, and &lt;code&gt;-n&lt;/code&gt; specifies the name of the module.</source>
          <target state="translated">&lt;code&gt;-A&lt;/code&gt; は、オートローダコード、省略 &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; 、省いXS要素を &lt;code&gt;--skip-exporter&lt;/code&gt; 、輸出のコードを省略 &lt;code&gt;--&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;-new-tests&lt;/code&gt; 近代的なテスト環境設定、および &lt;code&gt;-n&lt;/code&gt; モジュールの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="c623c1943d0dabf76760d7670756f1a93a94f39a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-Dusecbacktrace&lt;/code&gt; also enables keeping the debug information when compiling/linking (often: &lt;code&gt;-g&lt;/code&gt; ). Many compilers/linkers do support having both optimization and keeping the debug information. The debug information is needed for the symbol names and the source locations.</source>
          <target state="translated">&lt;code&gt;-Dusecbacktrace&lt;/code&gt; は（：多くの場合もリンク/コンパイル時にデバッグ情報を保持できます &lt;code&gt;-g&lt;/code&gt; ）。多くのコンパイラ/リンカーは、最適化とデバッグ情報の保持の両方をサポートしています。デバッグ情報は、シンボル名とソースの場所に必要です。</target>
        </trans-unit>
        <trans-unit id="82d0f491a8ddd8c808b16ec9be7ca117f4caf1b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-Dusecbacktrace&lt;/code&gt; also enables keeping the debug information when compiling/linking (often: &lt;code&gt;-g&lt;/code&gt;). Many compilers/linkers do support having both optimization and keeping the debug information. The debug information is needed for the symbol names and the source locations.</source>
          <target state="translated">&lt;code&gt;-Dusecbacktrace&lt;/code&gt; は（：多くの場合もリンク/コンパイル時にデバッグ情報を保持できます &lt;code&gt;-g&lt;/code&gt; ）。多くのコンパイラ/リンカーは、最適化とデバッグ情報の保持の両方をサポートしています。シンボル名とソースの場所にはデバッグ情報が必要です。</target>
        </trans-unit>
        <trans-unit id="63378b07c96f9b709eea4a8451598ec112926512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; switches work as follows. The first block or so of the file is examined to see if it is valid UTF-8 that includes non-ASCII characters. If, so it's a &lt;code&gt;-T&lt;/code&gt; file. Otherwise, that same portion of the file is examined for odd characters such as strange control codes or characters with the high bit set. If more than a third of the characters are strange, it's a &lt;code&gt;-B&lt;/code&gt; file; otherwise it's a &lt;code&gt;-T&lt;/code&gt; file. Also, any file containing a zero byte in the examined portion is considered a binary file. (If executed within the scope of a &lt;a href=&quot;../perllocale&quot;&gt;use locale&lt;/a&gt; which includes &lt;code&gt;LC_CTYPE&lt;/code&gt; , odd characters are anything that isn't a printable nor space in the current locale.) If &lt;code&gt;-T&lt;/code&gt; or &lt;code&gt;-B&lt;/code&gt; is used on a filehandle, the current IO buffer is examined rather than the first block. Both &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; return true on an empty file, or a file at EOF when testing a filehandle. Because you have to read a file to do the &lt;code&gt;-T&lt;/code&gt; test, on most occasions you want to use a &lt;code&gt;-f&lt;/code&gt; against the file first, as in &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt; unless -f $file &amp;amp;&amp;amp; -T $file&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-T&lt;/code&gt; と &lt;code&gt;-B&lt;/code&gt; は、次のように仕事を切り替えます。ファイルの最初のブロックなどが調べられ、非ASCII文字を含む有効なUTF-8かどうかが確認されます。もしそうなら、それは &lt;code&gt;-T&lt;/code&gt; ファイルです。それ以外の場合は、ファイルの同じ部分で、奇妙な制御コードや上位ビットが設定された文字などの奇数文字が検査されます。 3分の1以上の文字が奇妙な場合、それは &lt;code&gt;-B&lt;/code&gt; ファイルです。それ以外の場合は &lt;code&gt;-T&lt;/code&gt; ファイルです。また、検査された部分にゼロバイトを含むファイルは、バイナリファイルと見なされます。 （ &lt;code&gt;LC_CTYPE&lt;/code&gt; を含む&lt;a href=&quot;../perllocale&quot;&gt;useロケールの&lt;/a&gt;範囲内で実行される場合、奇数文字は現在のロケールでは印刷可能でもスペースでもないものです。） &lt;code&gt;-T&lt;/code&gt; または &lt;code&gt;-B&lt;/code&gt; がファイルハンドルで使用されている場合、最初のブロックではなく、現在のIOバッファーが検査されます。 &lt;code&gt;-T&lt;/code&gt; と &lt;code&gt;-B&lt;/code&gt; はどちらも、ファイルハンドルをテストするときに、空のファイルまたはEOFのファイルに対してtrueを返します。 &lt;code&gt;-T&lt;/code&gt; テストを行うにはファイルを読み取る必要があるため、ほとんどの場合、 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt; unless -f $file &amp;amp;&amp;amp; -T $file&lt;/code&gt; ように-f $ file &amp;amp;&amp;amp; -T $ fileでない限り、最初にファイルに対して &lt;code&gt;-f&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c91ca83f347b61a13eb65089f07047ddb67d9622" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; switches work as follows. The first block or so of the file is examined to see if it is valid UTF-8 that includes non-ASCII characters. If, so it's a &lt;code&gt;-T&lt;/code&gt; file. Otherwise, that same portion of the file is examined for odd characters such as strange control codes or characters with the high bit set. If more than a third of the characters are strange, it's a &lt;code&gt;-B&lt;/code&gt; file; otherwise it's a &lt;code&gt;-T&lt;/code&gt; file. Also, any file containing a zero byte in the examined portion is considered a binary file. (If executed within the scope of a &lt;a href=&quot;perllocale&quot;&gt;use locale&lt;/a&gt; which includes &lt;code&gt;LC_CTYPE&lt;/code&gt; , odd characters are anything that isn't a printable nor space in the current locale.) If &lt;code&gt;-T&lt;/code&gt; or &lt;code&gt;-B&lt;/code&gt; is used on a filehandle, the current IO buffer is examined rather than the first block. Both &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; return true on an empty file, or a file at EOF when testing a filehandle. Because you have to read a file to do the &lt;code&gt;-T&lt;/code&gt; test, on most occasions you want to use a &lt;code&gt;-f&lt;/code&gt; against the file first, as in &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt; unless -f $file &amp;amp;&amp;amp; -T $file&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-T&lt;/code&gt; と &lt;code&gt;-B&lt;/code&gt; は、次のように仕事を切り替えます。ファイルの最初のブロックなどが調べられ、非ASCII文字を含む有効なUTF-8かどうかが確認されます。もしそうなら、それは &lt;code&gt;-T&lt;/code&gt; ファイルです。それ以外の場合は、ファイルの同じ部分で、奇妙な制御コードや上位ビットが設定された文字などの奇数文字が検査されます。 3分の1以上の文字が奇妙な場合、それは &lt;code&gt;-B&lt;/code&gt; ファイルです。それ以外の場合は &lt;code&gt;-T&lt;/code&gt; ファイルです。また、検査された部分にゼロバイトを含むファイルは、バイナリファイルと見なされます。 （ &lt;code&gt;LC_CTYPE&lt;/code&gt; を含む&lt;a href=&quot;perllocale&quot;&gt;useロケールの&lt;/a&gt;範囲内で実行される場合、奇数文字は現在のロケールでは印刷可能でもスペースでもないものです。） &lt;code&gt;-T&lt;/code&gt; または &lt;code&gt;-B&lt;/code&gt; がファイルハンドルで使用されている場合、最初のブロックではなく、現在のIOバッファーが検査されます。 &lt;code&gt;-T&lt;/code&gt; と &lt;code&gt;-B&lt;/code&gt; はどちらも、ファイルハンドルをテストするときに、空のファイルまたはEOFのファイルに対してtrueを返します。 &lt;code&gt;-T&lt;/code&gt; テストを行うにはファイルを読み取る必要があるため、ほとんどの場合、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt; unless -f $file &amp;amp;&amp;amp; -T $file&lt;/code&gt; ように-f $ file &amp;amp;&amp;amp; -T $ fileでない限り、最初にファイルに対して &lt;code&gt;-f&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7d03161bfdc601bdcaa9b51890ed40d35154d9a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; tests work as follows. The first block or so of the file is examined to see if it is valid UTF-8 that includes non-ASCII characters. If so, it's a &lt;code&gt;-T&lt;/code&gt; file. Otherwise, that same portion of the file is examined for odd characters such as strange control codes or characters with the high bit set. If more than a third of the characters are strange, it's a &lt;code&gt;-B&lt;/code&gt; file; otherwise it's a &lt;code&gt;-T&lt;/code&gt; file. Also, any file containing a zero byte in the examined portion is considered a binary file. (If executed within the scope of a &lt;a href=&quot;perllocale&quot;&gt;use locale&lt;/a&gt; which includes &lt;code&gt;LC_CTYPE&lt;/code&gt;, odd characters are anything that isn't a printable nor space in the current locale.) If &lt;code&gt;-T&lt;/code&gt; or &lt;code&gt;-B&lt;/code&gt; is used on a filehandle, the current IO buffer is examined rather than the first block. Both &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; return true on an empty file, or a file at EOF when testing a filehandle. Because you have to read a file to do the &lt;code&gt;-T&lt;/code&gt; test, on most occasions you want to use a &lt;code&gt;-f&lt;/code&gt; against the file first, as in &lt;code&gt;next unless -f $file &amp;amp;&amp;amp; -T $file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-T&lt;/code&gt; と &lt;code&gt;-B&lt;/code&gt; は、次のような作業をテストします。ファイルの最初のブロック程度を調べて、非ASCII文字を含む有効なUTF-8であるかどうかを確認します。もしそうなら、それは &lt;code&gt;-T&lt;/code&gt; ファイルです。それ以外の場合は、ファイルの同じ部分で、奇妙な制御コードや上位ビットが設定された文字などの奇妙な文字がないか調べられます。文字の3分の1以上が奇妙な場合、それは &lt;code&gt;-B&lt;/code&gt; ファイルです。それ以外の場合は &lt;code&gt;-T&lt;/code&gt; ファイルです。また、検査された部分にゼロバイトを含むファイルはすべてバイナリファイルと見なされます。 （ &lt;code&gt;LC_CTYPE&lt;/code&gt; を含む&lt;a href=&quot;perllocale&quot;&gt;使用ロケールの&lt;/a&gt;スコープ内で実行された場合、奇数文字は、現在のロケールでは印刷可能でもスペースでもないものです。） &lt;code&gt;-T&lt;/code&gt; または &lt;code&gt;-B&lt;/code&gt; がファイルハンドルで使用され、最初のブロックではなく現在のIOバッファーが調べられます。 &lt;code&gt;-T&lt;/code&gt; と &lt;code&gt;-B&lt;/code&gt; はどちらも、空のファイル、またはファイルハンドルをテストするときにEOFにあるファイルに対してtrueを返します。 &lt;code&gt;-T&lt;/code&gt; テストを実行するにはファイルを読み取る必要があるため、ほとんどの場合、 &lt;code&gt;next unless -f $file &amp;amp;&amp;amp; -T $file&lt;/code&gt; 、次のように、最初にファイルに対して &lt;code&gt;-f&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9bc0f3fa215c39800076a942f11672815853d1f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-Wall&lt;/code&gt; is by default on.</source>
          <target state="translated">&lt;code&gt;-Wall&lt;/code&gt; は上のデフォルトです。</target>
        </trans-unit>
        <trans-unit id="6dfbaa82d695de76db5a43cbdf063e4ffac5d9ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-Wtraditional&lt;/code&gt; is another example of the annoying tendency of gcc to bundle a lot of warnings under one switch (it would be impossible to deploy in practice because it would complain a lot) but it does contain some warnings that would be beneficial to have available on their own, such as the warning about string constants inside macros containing the macro arguments: this behaved differently pre-ANSI than it does in ANSI, and some C compilers are still in transition, AIX being an example.</source>
          <target state="translated">&lt;code&gt;-Wtraditional&lt;/code&gt; は一つのスイッチの下での警告の多くをバンドルするためのgccの迷惑な傾向の他の例である（多くのことを文句になるので、実際に展開することは不可能であろう）が、それは可能なを持っていることは有益であろういくつかの警告が含まれていませんマクロ引数を含むマクロ内の文字列定数に関する警告など、単独で。これは、ANSI以前とANSIでの動作が異なり、一部のCコンパイラはまだ移行中です。AIXがその例です。</target>
        </trans-unit>
        <trans-unit id="29f275b0f904c074e809dc11f6813898aaca641a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-a&lt;/code&gt; option is used to include all files that git tracks that you have changed. If at this time, you only want to commit some of the files you have worked on, you can omit the &lt;code&gt;-a&lt;/code&gt; and use the command &lt;code&gt;git add &lt;i&gt;FILE ...&lt;/i&gt;&lt;/code&gt; before doing the commit. &lt;code&gt;git add --interactive&lt;/code&gt; allows you to even just commit portions of files instead of all the changes in them.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; オプションは、変更されたことをgitのトラックというすべてのファイルをインクルードするために使用されます。この時点で、作業したファイルの一部のみをコミットする場合は、コミットを実行する前に、 &lt;code&gt;-a&lt;/code&gt; を省略し、コマンド &lt;code&gt;git add &lt;i&gt;FILE ...&lt;/i&gt;&lt;/code&gt; を使用できます。 &lt;code&gt;git add --interactive&lt;/code&gt; を使用すると、ファイル内のすべての変更ではなく、ファイルの一部をコミットすることもできます。</target>
        </trans-unit>
        <trans-unit id="dea68b3a7d6bdc421299da6629ccc22d6bd7b572" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-ansi&lt;/code&gt; (and its sidekick, &lt;code&gt;-pedantic&lt;/code&gt; ) would be nice to be on always, but unfortunately they are not safe on all platforms, they can for example cause fatal conflicts with the system headers (Solaris being a prime example). If Configure &lt;code&gt;-Dgccansipedantic&lt;/code&gt; is used, the &lt;code&gt;cflags&lt;/code&gt; frontend selects &lt;code&gt;-ansi -pedantic&lt;/code&gt; for the platforms where they are known to be safe.</source>
          <target state="translated">&lt;code&gt;-ansi&lt;/code&gt; （とその相棒、 &lt;code&gt;-pedantic&lt;/code&gt; は、システムヘッダと致命的なコンフリクト（Solarisが典型的な例である）原因など）は常にオンにいいだろうが、残念ながら、彼らはすべてのプラットフォーム上で安全ではない、彼らがすることができます。Configure &lt;code&gt;-Dgccansipedantic&lt;/code&gt; が使用されている場合、 &lt;code&gt;cflags&lt;/code&gt; フロントエンドは、安全であることがわかっているプラ​​ットフォームに対して &lt;code&gt;-ansi -pedantic&lt;/code&gt; -pedanticを選択します。</target>
        </trans-unit>
        <trans-unit id="3c0974d53dc0e4835c4ef757f3690c3874414b6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-ansi&lt;/code&gt; (and its sidekick, &lt;code&gt;-pedantic&lt;/code&gt;) would be nice to be on always, but unfortunately they are not safe on all platforms, they can for example cause fatal conflicts with the system headers (Solaris being a prime example). If Configure &lt;code&gt;-Dgccansipedantic&lt;/code&gt; is used, the &lt;code&gt;cflags&lt;/code&gt; frontend selects &lt;code&gt;-ansi -pedantic&lt;/code&gt; for the platforms where they are known to be safe.</source>
          <target state="translated">&lt;code&gt;-ansi&lt;/code&gt; （とその相棒、 &lt;code&gt;-pedantic&lt;/code&gt; は、システムヘッダと致命的なコンフリクト（Solarisが典型的な例である）原因など）は常にオンにいいだろうが、残念ながら、彼らはすべてのプラットフォーム上で安全ではない、彼らがすることができます。 Configure &lt;code&gt;-Dgccansipedantic&lt;/code&gt; が使用されている場合、 &lt;code&gt;cflags&lt;/code&gt; フロントエンドは、安全であることがわかっているプラ​​ットフォームに対して &lt;code&gt;-ansi -pedantic&lt;/code&gt; pedanticを選択します。</target>
        </trans-unit>
        <trans-unit id="cb94d9f2c59455332a30530ef3be81c2f437b975" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-h&lt;/code&gt; option will show a usage message.</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; オプションは、使用法のメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="2bf6b5a2450e550c35673777465af352e8fad7fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-m&lt;/code&gt; option is used to specify the commit message. If you omit it, git will open a text editor for you to compose the message interactively. This is useful when the changes are more complex than the sample given here, and, depending on the editor, to know that the first line of the commit message doesn't exceed the 50 character legal maximum. See &lt;a href=&quot;perlhack#Commit-message&quot;&gt;&quot;Commit message&quot; in perlhack&lt;/a&gt; for more information about what makes a good commit message.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; オプションは、コミットメッセージを指定するために使用されます。省略した場合、gitはメッセージをインタラクティブに作成するためのテキストエディタを開きます。これは、変更がここに示されているサンプルよりも複雑であり、エディターによっては、コミットメッセージの最初の行が50文字の有効な最大値を超えていないことを知っている場合に役立ちます。優れたコミットメッセージの詳細について&lt;a href=&quot;perlhack#Commit-message&quot;&gt;は、perlhackの「コミットメッセージ」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02d034bd54a852b799ddb0bca00601006bc9ad62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-newlex&lt;/code&gt; option produces a more readable &lt;code&gt;name =&amp;gt; value&lt;/code&gt; format, and is shown in the second example above.</source>
          <target state="translated">&lt;code&gt;-newlex&lt;/code&gt; オプションが読みやすい生成 &lt;code&gt;name =&amp;gt; value&lt;/code&gt; フォーマットを、上記第二の例に示されています。</target>
        </trans-unit>
        <trans-unit id="3ed7e26de1fd10b827d09512227b49a4f8d06d08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-nosp&lt;/code&gt; option eliminates reporting of SPECIALs, such as &lt;code&gt;0: SPECIAL
#1 &amp;amp;PL_sv_undef&lt;/code&gt; above. Reporting of SPECIALs can sometimes overwhelm your declared lexicals.</source>
          <target state="translated">&lt;code&gt;-nosp&lt;/code&gt; のようなスペシャルの報告オプションの排除、 &lt;code&gt;0: SPECIAL #1 &amp;amp;PL_sv_undef&lt;/code&gt; 以上。SPECIALの報告は、宣言された語彙を圧倒することがあります。</target>
        </trans-unit>
        <trans-unit id="063586d44811e787a3acc7fa9925ec22a0e1ef32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-pretty&lt;/code&gt; directive is called too late to affect matters. You have to do this instead, and</source>
          <target state="translated">&lt;code&gt;-pretty&lt;/code&gt; ディレクティブは問題に影響を与えるために遅すぎると呼ばれています。代わりにこれを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="64b5e1fcc02dcf849bd221c8c257f81fb47b92a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt; and &lt;code&gt;-qq&lt;/code&gt; options don't work correctly if perl isn't compiled with PerlIO support : STDOUT will be closed instead of being redirected to &lt;code&gt;$O::BEGIN_output&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; と &lt;code&gt;-qq&lt;/code&gt; STDOUTが閉じられますの代わりにリダイレクトされます。perlがPerlIOをサポートしてコンパイルされていない場合のオプションが正しく動作しません &lt;code&gt;$O::BEGIN_output&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29496d6f7bd6b984673c9ef63d5a96a39bc5fbb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt; and &lt;code&gt;-qq&lt;/code&gt; options don't work correctly if perl isn't compiled with PerlIO support : STDOUT will be closed instead of being redirected to &lt;code&gt;$O::BEGIN_output&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; と &lt;code&gt;-qq&lt;/code&gt; STDOUTが閉じられますの代わりにリダイレクトされます。perlがPerlIOをサポートしてコンパイルされていない場合のオプションが正しく動作しません &lt;code&gt;$O::BEGIN_output&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6261ab8564541d33e35c7ac1e97aa8a5e571dd14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-qq&lt;/code&gt; option behaves like &lt;code&gt;-q&lt;/code&gt;, except that it also closes STDERR after deparsing has finished. This suppresses the &quot;Syntax OK&quot; message normally produced by perl.</source>
          <target state="translated">&lt;code&gt;-qq&lt;/code&gt; のようなオプションの振る舞い &lt;code&gt;-q&lt;/code&gt; それも終わったデパース後STDERRを閉じていることを除いて、。これにより、perlによって通常生成される「構文OK」メッセージが抑制されます。</target>
        </trans-unit>
        <trans-unit id="cb173d8eff47f06c7e37f7374c7227453a2ad4d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-u&lt;/code&gt; switch causes the VMS debugger to be invoked after the Perl program is compiled, but before it has run. It does not create a core dump file.</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; スイッチは、Perlプログラムがコンパイルされた後、VMSのデバッガが呼び出されますが、それが実行される前に。コアダンプファイルは作成されません。</target>
        </trans-unit>
        <trans-unit id="1e542d84460c8b59074b5a3d74792d84cf2329fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; and &lt;code&gt;...&lt;/code&gt; flip-flop operators. Note that the &lt;code&gt;...&lt;/code&gt; flip-flop operator is completely different from the &lt;code&gt;...&lt;/code&gt; elliptical statement just described.</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; .と &lt;code&gt;...&lt;/code&gt; フリップフロップ演算子。 &lt;code&gt;...&lt;/code&gt; フリップフロップ演算子は、前述の &lt;code&gt;...&lt;/code&gt; 楕円ステートメントとは完全に異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8189082aec1c35ce34b10a2a482272d1f9442cdd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; range operator treats certain character ranges with care on EBCDIC platforms. For example the following array will have twenty six elements on either an EBCDIC platform or an ASCII platform:</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; 範囲演算子の扱いEBCDICプラットフォーム上で注意して、特定の文字範囲を。たとえば、次の配列には、EBCDICプラットフォームまたはASCIIプラットフォームのいずれかで26の要素があります。</target>
        </trans-unit>
        <trans-unit id="1bfc1b4066699d36e1a1c96b8bf42e5d376ee7e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;//&lt;/code&gt; matching operator is documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;. It operates on &lt;code&gt;$_&lt;/code&gt; by default, or can be bound to another variable using the &lt;code&gt;=~&lt;/code&gt; binding operator (also documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;//&lt;/code&gt; マッチング演算子は、に記載されて&lt;a href=&quot;perlop&quot;&gt;はperlop&lt;/a&gt;。デフォルトでは &lt;code&gt;$_&lt;/code&gt; で動作します。または、 &lt;code&gt;=~&lt;/code&gt; バインディング演算子を使用して別の変数にバインドすることもできます（&lt;a href=&quot;perlop&quot;&gt;perlopに&lt;/a&gt;も記載されています）。</target>
        </trans-unit>
        <trans-unit id="32ef826cb43c384876c66cdfd8ef3d6094273ed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;//a&lt;/code&gt; modifier, available starting in Perl 5.14, is used to restrict the matches of \d, \s, and \w to just those in the ASCII range. It is useful to keep your program from being needlessly exposed to full Unicode (and its accompanying security considerations) when all you want is to process English-like text. (The &quot;a&quot; may be doubled, &lt;code&gt;//aa&lt;/code&gt; , to provide even more restrictions, preventing case-insensitive matching of ASCII with non-ASCII characters; otherwise a Unicode &quot;Kelvin Sign&quot; would caselessly match a &quot;k&quot; or &quot;K&quot;.)</source>
          <target state="translated">&lt;code&gt;//a&lt;/code&gt; 修飾子はPerl 5.14で利用可能な出発は、ASCIIの範囲のものだけにwを\ \ Dの試合、\ sのを制限するために使用され、。英語のようなテキストを処理することだけが目的の場合、プログラムが完全なUnicode（およびそれに付随するセキュリティ上の考慮事項）に不必要に公開されないようにすると便利です。 （ &quot;a&quot;は &lt;code&gt;//aa&lt;/code&gt; のように2倍にするとさらに多くの制限が適用され、ASCIIと非ASCII文字の大文字と小文字を区別しない一致が防止されます。それ以外の場合、Unicodeの &quot;ケルビン記号&quot;は &quot;k&quot;または &quot;K&quot;と一致します。 。）</target>
        </trans-unit>
        <trans-unit id="4d28a339cbae1f464fa994976dfeef2db93a1d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/&lt;/code&gt; template character allows packing and unpacking of a sequence of items where the packed structure contains a packed item count followed by the packed items themselves. This is useful when the structure you're unpacking has encoded the sizes or repeat counts for some of its fields within the structure itself as separate fields.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; テンプレート文字は、梱包及び充填構造がパックアイテムそのものが続くパックされたアイテム数が含まれている項目のシーケンスの開梱ことができます。これは、解凍する構造体が、構造体自体内の一部のフィールドのサイズまたは繰り返し回数を個別のフィールドとしてエンコードしている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="11f550725d5f2471c6ff447b2d5f1594f1eb63d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/a&lt;/code&gt; modifier, available starting in Perl 5.14, is used to restrict the matches of &lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\s&lt;/code&gt;, and &lt;code&gt;\w&lt;/code&gt; to just those in the ASCII range. It is useful to keep your program from being needlessly exposed to full Unicode (and its accompanying security considerations) when all you want is to process English-like text. (The &quot;a&quot; may be doubled, &lt;code&gt;/aa&lt;/code&gt;, to provide even more restrictions, preventing case-insensitive matching of ASCII with non-ASCII characters; otherwise a Unicode &quot;Kelvin Sign&quot; would caselessly match a &quot;k&quot; or &quot;K&quot;.)</source>
          <target state="translated">&lt;code&gt;/a&lt;/code&gt; 修飾子、Perlの5.14に入手可能な出発は、の一致制限するために使用され &lt;code&gt;\d&lt;/code&gt; 、 &lt;code&gt;\s&lt;/code&gt; 、そして &lt;code&gt;\w&lt;/code&gt; ASCIIの範囲内のものだけです。英語のようなテキストを処理するだけの場合は、プログラムが完全なUnicode（およびそれに付随するセキュリティ上の考慮事項）に不必要にさらされないようにすることが役立ちます。 （「a」を2倍にして &lt;code&gt;/aa&lt;/code&gt; を指定すると、さらに多くの制限が提供され、ASCIIと非ASCII文字の大文字と小文字を区別しない一致が防止されます。そうでない場合、Unicodeの「ケルビン記号」は大文字と小文字を区別せずに「k」または「K」と一致します。 ）</target>
        </trans-unit>
        <trans-unit id="8377a1a6991c29f230dc12ce290846f6b362ebc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/a&lt;/code&gt; modifier, on the other hand, may be useful. Its purpose is to allow code that is to work mostly on ASCII data to not have to concern itself with Unicode.</source>
          <target state="translated">&lt;code&gt;/a&lt;/code&gt; 改質剤は、一方で、有用であり得ます。その目的は、主にASCIIデータで機能するコードが、Unicodeに関与する必要がないようにすることです。</target>
        </trans-unit>
        <trans-unit id="4128278fcab003f758fd62a9e37cfc1e76abe115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/a&lt;/code&gt;, &lt;code&gt;/d&lt;/code&gt;, &lt;code&gt;/l&lt;/code&gt;, and &lt;code&gt;/u&lt;/code&gt; modifiers (added in Perl 5.14) control the character set rules, but &lt;code&gt;/a&lt;/code&gt; is the only one you are likely to want to specify explicitly; the other three are selected automatically by various pragmas.</source>
          <target state="translated">&lt;code&gt;/a&lt;/code&gt; 、 &lt;code&gt;/d&lt;/code&gt; 、 &lt;code&gt;/l&lt;/code&gt; 、および &lt;code&gt;/u&lt;/code&gt; （Perlの5.14で追加）修飾子は、文字セットルールを制御するが、 &lt;code&gt;/a&lt;/code&gt; あなたが明示的に指定したい可能性がある唯一のものです。他の3つは、さまざまなプラグマによって自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="9d46362c6dee371fc1e41d5a94fbe9c509a82363" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/d&lt;/code&gt;, &lt;code&gt;/u&lt;/code&gt; , and &lt;code&gt;/l&lt;/code&gt; modifiers are not likely to be of much use to you, and so you need not worry about them very much. They exist for Perl's internal use, so that complex regular expression data structures can be automatically serialized and later exactly reconstituted, including all their nuances. But, since Perl can't keep a secret, and there may be rare instances where they are useful, they are documented here.</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; は、 &lt;code&gt;/u&lt;/code&gt; 、および &lt;code&gt;/l&lt;/code&gt; の修飾子は、おそらくあなたに非常に有用であること、そしてあなたが非常に多く、それらを心配する必要はありませんので、することはありません。これらはPerlの内部使用のために存在するため、複雑な正規表現データ構造を自動的にシリアル化し、後ですべてのニュアンスを含めて正確に再構成できます。しかし、Perlは秘密を守ることができず、それらが有用である場合がまれにあるため、ここに記載されています。</target>
        </trans-unit>
        <trans-unit id="12ab225e2a1f0826b5de7058218cdd1f025dae16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/d&lt;/code&gt;, &lt;code&gt;/u&lt;/code&gt;, and &lt;code&gt;/l&lt;/code&gt; modifiers are not likely to be of much use to you, and so you need not worry about them very much. They exist for Perl's internal use, so that complex regular expression data structures can be automatically serialized and later exactly reconstituted, including all their nuances. But, since Perl can't keep a secret, and there may be rare instances where they are useful, they are documented here.</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; は、 &lt;code&gt;/u&lt;/code&gt; 、および &lt;code&gt;/l&lt;/code&gt; の修飾子は、おそらくあなたに非常に有用であること、そしてあなたが非常に多く、それらを心配する必要はありませんので、することはありません。これらはPerlの内部使用のために存在するため、複雑な正規表現データ構造を自動的にシリアル化し、後ですべてのニュアンスを含めて正確に再構成できます。しかし、Perlは秘密を守ることができず、それらが役立つ場合がまれにあるかもしれないので、ここに文書化されています。</target>
        </trans-unit>
        <trans-unit id="7a635bd3deb5f6d1f8ced7e30d0ca4af436ee119" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/e&lt;/code&gt; will also silently ignore violations of strict, replacing undefined variable names with the empty string. Since I'm using the &lt;code&gt;/e&lt;/code&gt; flag (twice even!), I have all of the same security problems I have with &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; in its string form. If there's something odd in &lt;code&gt;$foo&lt;/code&gt; , perhaps something like &lt;code&gt;@{[ &lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; &quot;rm -rf /&quot; ]}&lt;/code&gt; , then I could get myself in trouble.</source>
          <target state="translated">&lt;code&gt;/e&lt;/code&gt; はまた静かに空の文字列で未定義の変数名を置き換える、厳しいの違反を無視します。 &lt;code&gt;/e&lt;/code&gt; フラグを使用しているため（2倍にも！）、文字列形式の &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; と同じセキュリティ問題があります。 &lt;code&gt;$foo&lt;/code&gt; &lt;code&gt;@{[ &lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; &quot;rm -rf /&quot; ]}&lt;/code&gt; ように、$ fooに奇妙なものがある場合、問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b81362cf7da8bf9fa9ba69433decc106d6e660e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/e&lt;/code&gt; will also silently ignore violations of strict, replacing undefined variable names with the empty string. Since I'm using the &lt;code&gt;/e&lt;/code&gt; flag (twice even!), I have all of the same security problems I have with &lt;code&gt;eval&lt;/code&gt; in its string form. If there's something odd in &lt;code&gt;$foo&lt;/code&gt;, perhaps something like &lt;code&gt;@{[ system &quot;rm -rf /&quot; ]}&lt;/code&gt;, then I could get myself in trouble.</source>
          <target state="translated">&lt;code&gt;/e&lt;/code&gt; はまた静かに空の文字列で未定義の変数名を置き換える、厳しいの違反を無視します。 &lt;code&gt;/e&lt;/code&gt; フラグを使用しているので（2回も！）、文字列形式の &lt;code&gt;eval&lt;/code&gt; で発生するのと同じセキュリティ問題がすべて発生します。 &lt;code&gt;$foo&lt;/code&gt; 何か奇妙なもの、おそらく &lt;code&gt;@{[ system &quot;rm -rf /&quot; ]}&lt;/code&gt; ようなものがある場合、私は自分自身を困らせる可能性があります。</target>
        </trans-unit>
        <trans-unit id="613bcc3a2284ecc4926054a5b934f30e880d5007" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/g&lt;/code&gt; modifier specifies global pattern matching--that is, matching as many times as possible within the string. How it behaves depends on the context. In list context, it returns a list of the substrings matched by any capturing parentheses in the regular expression. If there are no parentheses, it returns a list of all the matched strings, as if there were parentheses around the whole pattern.</source>
          <target state="translated">&lt;code&gt;/g&lt;/code&gt; で、文字列内の可能な回数だけマッチングである-修飾子指定するグローバルパターンマッチング。動作はコンテキストによって異なります。リストコンテキストでは、正規表現内のキャプチャ括弧に一致する部分文字列のリストを返します。括弧がない場合は、パターン全体を括弧で囲んでいるかのように、一致したすべての文字列のリストを返します。</target>
        </trans-unit>
        <trans-unit id="987314591903795033c1fec25347d7b594aec577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/l&lt;/code&gt; and &lt;code&gt;/u&lt;/code&gt; modifiers are automatically selected for regular expressions compiled within the scope of various pragmas, and we recommend that in general, you use those pragmas instead of specifying these modifiers explicitly. For one thing, the modifiers affect only pattern matching, and do not extend to even any replacement done, whereas using the pragmas give consistent results for all appropriate operations within their scopes. For example,</source>
          <target state="translated">&lt;code&gt;/l&lt;/code&gt; と &lt;code&gt;/u&lt;/code&gt; の修飾子は自動的にさまざまなプラグマの範囲内でコンパイルされた正規表現のために選択され、我々は一般的に、あなたの代わりに明示的にこれらの修飾子を指定するこれらのプラグマを使用することをお勧めされています。1つには、修飾子はパターンマッチングにのみ影響し、実行された置換にも拡張されませんが、プラグマを使用すると、スコープ内のすべての適切な操作に対して一貫した結果が得られます。例えば、</target>
        </trans-unit>
        <trans-unit id="2a3e23c2d6681fc3d86e431f129513cbcb6ae252" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/l&lt;/code&gt; and &lt;code&gt;/u&lt;/code&gt; modifiers are automatically selected for regular expressions compiled within the scope of various pragmas, and we recommend that in general, you use those pragmas instead of specifying these modifiers explicitly. For one thing, the modifiers affect only pattern matching, and do not extend to even any replacement done, whereas using the pragmas gives consistent results for all appropriate operations within their scopes. For example,</source>
          <target state="translated">&lt;code&gt;/l&lt;/code&gt; と &lt;code&gt;/u&lt;/code&gt; の修飾子は自動的にさまざまなプラグマの範囲内でコンパイルされた正規表現のために選択され、我々は一般的に、あなたの代わりに明示的にこれらの修飾子を指定するこれらのプラグマを使用することをお勧めされています。1つには、修飾子はパターンマッチングにのみ影響し、実行された置換にも拡張されませんが、プラグマを使用すると、スコープ内のすべての適切な操作に対して一貫した結果が得られます。例えば、</target>
        </trans-unit>
        <trans-unit id="9a222e38b5a40a1bf140094ce44f5b0c1b82a0ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/o&lt;/code&gt; option for regular expressions (documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlreref&quot;&gt;perlreref&lt;/a&gt;) tells Perl to compile the regular expression only once. This is only useful when the pattern contains a variable. Perls 5.6 and later handle this automatically if the pattern does not change.</source>
          <target state="translated">正規表現の &lt;code&gt;/o&lt;/code&gt; オプション（&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;および&lt;a href=&quot;perlreref&quot;&gt;perlrerefに記載&lt;/a&gt;）は、正規表現を1回だけコンパイルするようにPerlに指示します。これは、パターンに変数が含まれている場合にのみ役立ちます。Perl 5.6以降では、パターンが変更されない場合、これを自動的に処理します。</target>
        </trans-unit>
        <trans-unit id="02f1967b4475720a962bf35cfc3049c63165e0f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/x&lt;/code&gt; modifier causes whitespace to be ignored in a regex pattern (except in a character class and a few other places), and also allows you to use normal comments there, too. As you can imagine, whitespace and comments help a lot.</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; （文字クラスといくつかの他の場所を除いて）正規表現パターンに無視され、あまりにも、あなたはそこに通常のコメントを使用することができますすることが空白修飾子原因。ご想像のとおり、空白とコメントは非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="26a965e97d532904de76cbb5ec7fa62c78040c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0x&lt;/code&gt; prefix means a hexadecimal number, the digits are 0-9</source>
          <target state="translated">&lt;code&gt;0x&lt;/code&gt; 接頭辞は16進数を意味し、数字は0-9であります</target>
        </trans-unit>
        <trans-unit id="c084ffd08879b68d48b86f14b0edd6d007fd471f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; tag, now discouraged, is the old version of &lt;code&gt;:bsd_glob&lt;/code&gt; . It exports the same constants and functions, but its glob() override does not support iteration; it returns the last file name in scalar context. That means this will loop forever:</source>
          <target state="translated">&lt;code&gt;:&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; タグ、今落胆は、古いバージョンである &lt;code&gt;:bsd_glob&lt;/code&gt; 。同じ定数と関数をエクスポートしますが、glob（）オーバーライドは反復をサポートしていません。スカラーコンテキストで最後のファイル名を返します。つまり、これは永久にループします。</target>
        </trans-unit>
        <trans-unit id="4231c54d461bf5e25a3f991c3ecf987daad7c115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:ALL&lt;/code&gt; tag will get all of the above exports.</source>
          <target state="translated">&lt;code&gt;:ALL&lt;/code&gt; タグは、上記の輸出のすべてを取得します。</target>
        </trans-unit>
        <trans-unit id="f4ffb1e41b5af144e1e66d6009daba34fcfe78d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:bsd_glob&lt;/code&gt; export tag exports bsd_glob() and the constants listed below. It also overrides glob() in the calling package with one that behaves like bsd_glob() with regard to spaces (the space is treated as part of a file name), but supports iteration in scalar context; i.e., it preserves the core function's feature of returning the next item each time it is called.</source>
          <target state="translated">&lt;code&gt;:bsd_glob&lt;/code&gt; 輸出タグ輸出bsd_glob（）および以下に示す定数。また、呼び出し側パッケージのglob（）を、スペースに関してbsd_glob（）のように動作するものでオーバーライドします（スペースはファイル名の一部として扱われます）が、スカラーコンテキストでの反復をサポートしています。つまり、呼び出されるたびに次のアイテムを返すというコア関数の機能を保持します。</target>
        </trans-unit>
        <trans-unit id="e5933b7ecdff0d26d0d1ee137373273e087ab3ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:bytes&lt;/code&gt; , &lt;code&gt;:crlf&lt;/code&gt; , &lt;code&gt;:utf8&lt;/code&gt; , and any other directives of the form &lt;code&gt;:...&lt;/code&gt; , are called I/O</source>
          <target state="translated">&lt;code&gt;:bytes&lt;/code&gt; 、 &lt;code&gt;:crlf&lt;/code&gt; 、 &lt;code&gt;:utf8&lt;/code&gt; で、フォームの任意の他のディレクティブ &lt;code&gt;:...&lt;/code&gt; 、I / Oと呼ばれています</target>
        </trans-unit>
        <trans-unit id="586c160f0002e3dc300faf81c49d6dc770a315b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:bytes&lt;/code&gt; layer corresponds to &quot;binary mode&quot; and the &lt;code&gt;:crlf&lt;/code&gt; layer corresponds to &quot;text mode&quot; on platforms that distinguish between the two modes when opening files (which is many DOS-like platforms, including Windows). These two layers are no-ops on platforms where binmode() is a no-op, but perform their functions everywhere if PerlIO is enabled.</source>
          <target state="translated">&lt;code&gt;:bytes&lt;/code&gt; 「バイナリモード」とする層の対応を &lt;code&gt;:crlf&lt;/code&gt; （多くのDOSのようなWindowsを含むプラットフォームである）ファイルを開くときに、2つのモードを区別するプラットフォーム上で、「テキストモード」に層が対応します。これらの2つの層は、binmode（）が何もしないプラットフォームでは何もしませんが、PerlIOが有効になっている場合はどこでも機能を実行します。</target>
        </trans-unit>
        <trans-unit id="11a84ca57962b97df10238d25c4ab7c8ca38ba9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:bytes&lt;/code&gt;, &lt;code&gt;:crlf&lt;/code&gt;, &lt;code&gt;:utf8&lt;/code&gt;, and any other directives of the form &lt;code&gt;:...&lt;/code&gt;, are called I/O</source>
          <target state="translated">&lt;code&gt;:bytes&lt;/code&gt; 、 &lt;code&gt;:crlf&lt;/code&gt; 、 &lt;code&gt;:utf8&lt;/code&gt; で、フォームの任意の他のディレクティブ &lt;code&gt;:...&lt;/code&gt; 、I / Oと呼ばれています</target>
        </trans-unit>
        <trans-unit id="ec6da40dddc20e97c2aa930b3dff507bcb27589f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:default&lt;/code&gt; bundle represents the feature set that is enabled before any &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;:default&lt;/code&gt; バンドルは、任意の前に有効になっている機能セットを表し &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature&lt;/code&gt; 宣言を。</target>
        </trans-unit>
        <trans-unit id="09364c3e01a418de2009247f52456634c275c2f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:default&lt;/code&gt; bundle represents the feature set that is enabled before any &lt;code&gt;use feature&lt;/code&gt; or &lt;code&gt;no feature&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;:default&lt;/code&gt; バンドルは、任意の前に有効になっている機能セットを表し &lt;code&gt;use feature&lt;/code&gt; や &lt;code&gt;no feature&lt;/code&gt; 宣言を。</target>
        </trans-unit>
        <trans-unit id="229b3ff64bd12a209b4e991d14388add7cc976a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:glob&lt;/code&gt; tag, now discouraged, is the old version of &lt;code&gt;:bsd_glob&lt;/code&gt;. It exports the same constants and functions, but its glob() override does not support iteration; it returns the last file name in scalar context. That means this will loop forever:</source>
          <target state="translated">&lt;code&gt;:glob&lt;/code&gt; タグ、今落胆は、古いバージョンである &lt;code&gt;:bsd_glob&lt;/code&gt; 。同じ定数と関数をエクスポートしますが、glob（）オーバーライドは反復をサポートしていません。スカラーコンテキストで最後のファイル名を返します。つまり、これは永久にループします。</target>
        </trans-unit>
        <trans-unit id="a790449d8cd7160d313e0f6fd7d2b5f5cd711410" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:gzip_external&lt;/code&gt; requires one boolean argument.</source>
          <target state="translated">&lt;code&gt;:gzip_external&lt;/code&gt; は 1つのブール引数が必要です。</target>
        </trans-unit>
        <trans-unit id="bc95aee8e2b941e818640ac51c8f3c3052958780" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:gzip_external&lt;/code&gt; requires one string argument.</source>
          <target state="translated">&lt;code&gt;:gzip_external&lt;/code&gt; は、 1つの文字列引数が必要です。</target>
        </trans-unit>
        <trans-unit id="d6ef1d12b23a99b06dce59bf86591d40b628073e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:gzip_read_open&lt;/code&gt; argument must end with the pipe sign (|) and have the &lt;code&gt;%s&lt;/code&gt; for the filename. See &lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;&quot;USING THE EXTERNAL GZIP&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;:gzip_read_open&lt;/code&gt; （|）を持っていると引数がパイプ記号で終わらなければなりません &lt;code&gt;%s&lt;/code&gt; のをファイル名に。&lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;「外部Gzipの使用」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="20c0f5f557ffbe0666f0dfcd916d2b61a638ef52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:gzip_read_open&lt;/code&gt; argument must end with the pipe sign (|) and have the &lt;code&gt;%s&lt;/code&gt; for the filename. See &lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;USING THE EXTERNAL GZIP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;:gzip_read_open&lt;/code&gt; （|）を持っていると引数がパイプ記号で終わらなければなりません &lt;code&gt;%s&lt;/code&gt; のをファイル名に。&lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;外部GZIPの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c09f18a82aa110a317c88049c0e7c4128399d22c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:gzip_write_open&lt;/code&gt; argument must begin with the pipe sign (|) and have the &lt;code&gt;%s&lt;/code&gt; for the filename. An output redirect (&amp;gt;) is also often a good idea, depending on your operating system shell syntax. See &lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;&quot;USING THE EXTERNAL GZIP&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;:gzip_write_open&lt;/code&gt; （|）を持っていると引数がパイプ記号で始まる必要があります &lt;code&gt;%s&lt;/code&gt; のをファイル名に。オペレーティングシステムのシェル構文によっては、出力リダイレクト（&amp;gt;）もよく使用されます。&lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;「外部Gzipの使用」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="740fe127c4ced02d559ebb2a859c745ac796eb7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:gzip_write_open&lt;/code&gt; argument must begin with the pipe sign (|) and have the &lt;code&gt;%s&lt;/code&gt; for the filename. An output redirect (&amp;gt;) is also often a good idea, depending on your operating system shell syntax. See &lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;USING THE EXTERNAL GZIP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;:gzip_write_open&lt;/code&gt; （|）を持っていると引数がパイプ記号で始まる必要があります &lt;code&gt;%s&lt;/code&gt; のをファイル名に。オペレーティングシステムのシェル構文によっては、出力リダイレクト（&amp;gt;）もよくあります。&lt;a href=&quot;#USING-THE-EXTERNAL-GZIP&quot;&gt;外部GZIPの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="244205effe1c86456dd4171100ec82efbb0324f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:locale&lt;/code&gt; does not currently work with &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt;, only with the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma. The &lt;code&gt;:utf8&lt;/code&gt; and &lt;code&gt;:encoding(...)&lt;/code&gt; methods do work with all of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;code&gt;:locale&lt;/code&gt; 、現在では動作しません &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; だけで、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; プラグマ。 &lt;code&gt;:utf8&lt;/code&gt; と &lt;code&gt;:encoding(...)&lt;/code&gt; メソッドは、すべてと仕事を &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; プラグマ。</target>
        </trans-unit>
        <trans-unit id="868d235ace169d2c7fa342c5a97f5b35d506dd95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:locale&lt;/code&gt; does not currently work with &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;binmode()&lt;/code&gt;, only with the &lt;code&gt;open&lt;/code&gt; pragma. The &lt;code&gt;:utf8&lt;/code&gt; and &lt;code&gt;:encoding(...)&lt;/code&gt; methods do work with all of &lt;code&gt;open()&lt;/code&gt;, &lt;code&gt;binmode()&lt;/code&gt;, and the &lt;code&gt;open&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;code&gt;:locale&lt;/code&gt; 、現在では動作しません &lt;code&gt;open()&lt;/code&gt; と &lt;code&gt;binmode()&lt;/code&gt; だけで、 &lt;code&gt;open&lt;/code&gt; プラグマ。 &lt;code&gt;:utf8&lt;/code&gt; と &lt;code&gt;:encoding(...)&lt;/code&gt; メソッドは、すべてと仕事を &lt;code&gt;open()&lt;/code&gt; 、 &lt;code&gt;binmode()&lt;/code&gt; 、および &lt;code&gt;open&lt;/code&gt; プラグマ。</target>
        </trans-unit>
        <trans-unit id="b0a7c262fbc0be9a9844fe48c62a845c0f4528fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:locale&lt;/code&gt; sub-pragma</source>
          <target state="translated">&lt;code&gt;:locale&lt;/code&gt; サブプラグマ</target>
        </trans-unit>
        <trans-unit id="90148b6fce0bbabdeb9d2a0e71e782bdff20ba4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:mmap&lt;/code&gt; layer will not exist if the platform does not support &lt;code&gt;mmap()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;:mmap&lt;/code&gt; プラットフォームがサポートされていない場合は層が存在しません &lt;code&gt;mmap()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81e4222eb657623bdd73dc5a2ea005b2d704479c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:mmap&lt;/code&gt; layer will not exist if the platform does not support &lt;code&gt;mmap()&lt;/code&gt;. See &lt;a href=&quot;PerlIO::mmap&quot;&gt;PerlIO::mmap&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;:mmap&lt;/code&gt; プラットフォームがサポートされていない場合は層が存在しません &lt;code&gt;mmap()&lt;/code&gt; 。詳細については、&lt;a href=&quot;PerlIO::mmap&quot;&gt;PerlIO :: mmap&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd944a87b4f64134b2d5190fde7ca74a27bd05a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:raw&lt;/code&gt; layer is</source>
          <target state="translated">&lt;code&gt;:raw&lt;/code&gt; 層であります</target>
        </trans-unit>
        <trans-unit id="9474a45f1b69ac0f4649940b34d53df78423a114" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:raw&lt;/code&gt; pseudo-layer is</source>
          <target state="translated">&lt;code&gt;:raw&lt;/code&gt; 擬似層であります</target>
        </trans-unit>
        <trans-unit id="eb8af45fe08808536fe0e78893d59ec120f251eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:std&lt;/code&gt; subpragma on its own has no effect, but if combined with the &lt;code&gt;:utf8&lt;/code&gt; or &lt;code&gt;:encoding&lt;/code&gt; subpragmas, it converts the standard filehandles (STDIN, STDOUT, STDERR) to comply with encoding selected for input/output handles. For example, if both input and out are chosen to be &lt;code&gt;:encoding(utf8)&lt;/code&gt; , a &lt;code&gt;:std&lt;/code&gt; will mean that STDIN, STDOUT, and STDERR are also in &lt;code&gt;:encoding(utf8)&lt;/code&gt; . On the other hand, if only output is chosen to be in &lt;code&gt;:encoding(koi8r)&lt;/code&gt; , a &lt;code&gt;:std&lt;/code&gt; will cause only the STDOUT and STDERR to be in &lt;code&gt;koi8r&lt;/code&gt; . The &lt;code&gt;:locale&lt;/code&gt; subpragma implicitly turns on &lt;code&gt;:std&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;:std&lt;/code&gt; 独自にサブプラグマは影響を及ぼさないが、組み合わせる場合 &lt;code&gt;:utf8&lt;/code&gt; または &lt;code&gt;:encoding&lt;/code&gt; subpragmas、入力/出力ハンドルのために選択したエンコードに準拠する標準ファイルハンドル（STDIN、STDOUT、STDERR）に変換します。インプットとアウトの両方があるように選択される場合、例えば &lt;code&gt;:encoding(utf8)&lt;/code&gt; 、 &lt;code&gt;:std&lt;/code&gt; STDIN、STDOUT、およびSTDERRにもあることを意味する &lt;code&gt;:encoding(utf8)&lt;/code&gt; 。一方、出力のみが &lt;code&gt;:encoding(koi8r)&lt;/code&gt; に含まれるように選択されている場合、 &lt;code&gt;:std&lt;/code&gt; はSTDOUTとSTDERRのみが &lt;code&gt;koi8r&lt;/code&gt; に含まれるようにします。 &lt;code&gt;:locale&lt;/code&gt; サブプラグマは、暗黙的にオンに &lt;code&gt;:std&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2743b792818bf7f895d0f0b22baae763060aa81f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:void&lt;/code&gt; option is supported in &lt;a href=&quot;fatal&quot;&gt;Fatal&lt;/a&gt;, but not &lt;code&gt;autodie&lt;/code&gt; . To workaround this, &lt;code&gt;autodie&lt;/code&gt; may be explicitly disabled until the end of the current block with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie&lt;/code&gt; . To disable autodie for only a single function (eg, open) use &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie qw(open)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;:void&lt;/code&gt; オプションがサポートされ&lt;a href=&quot;fatal&quot;&gt;致命的&lt;/a&gt;ではなく、 &lt;code&gt;autodie&lt;/code&gt; 。これを回避するには、 &lt;code&gt;autodie&lt;/code&gt; は、明示的で、現在のブロックの終わりまで無効にすることも &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie&lt;/code&gt; 。単一の機能（たとえば、open）のみの自動ダイを無効にするには、 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie qw(open)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0969ef951925275c4d8bd4c9c51662e300f9c641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:void&lt;/code&gt; option is supported in &lt;a href=&quot;fatal&quot;&gt;Fatal&lt;/a&gt;, but not &lt;code&gt;autodie&lt;/code&gt;. To workaround this, &lt;code&gt;autodie&lt;/code&gt; may be explicitly disabled until the end of the current block with &lt;code&gt;no autodie&lt;/code&gt;. To disable autodie for only a single function (eg, open) use &lt;code&gt;no autodie qw(open)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:void&lt;/code&gt; オプションがサポートされ&lt;a href=&quot;fatal&quot;&gt;致命的&lt;/a&gt;ではなく、 &lt;code&gt;autodie&lt;/code&gt; 。これを回避するために、 &lt;code&gt;autodie&lt;/code&gt; が &lt;code&gt;no autodie&lt;/code&gt; 現在のブロックが終了するまで、autodieを明示的に無効にすることができます。単一の関数（たとえば、open）に対してのみ自動ダイを無効にするには &lt;code&gt;no autodie qw(open)&lt;/code&gt; 使用しません。</target>
        </trans-unit>
        <trans-unit id="67318be992f4377bb68fbe49ed99f910c657a047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method is used to create an instance of the filter. It is called indirectly by Perl when it encounters the &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt; MyFilter&lt;/code&gt; line in a source file (See &lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt; for more details on &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 方法は、フィルタのインスタンスを作成するために使用されます。ソースファイルで &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt; MyFilter&lt;/code&gt; 行を検出すると、Perlによって間接的に呼び出されます（&lt;a href=&quot;../../functions/import&quot;&gt;インポートの&lt;/a&gt;詳細については、 &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 参照してください）。</target>
        </trans-unit>
        <trans-unit id="69849addd7818fee9c7e8c167a05d6c0d2986859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; will</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 意志</target>
        </trans-unit>
        <trans-unit id="0eafa6355d483056647b2819a7f67215461c3497" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call returns an object, say &lt;code&gt;$o&lt;/code&gt; . You may call</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; コールは言う、オブジェクトを返す &lt;code&gt;$o&lt;/code&gt; 。あなたは電話するかもしれません</target>
        </trans-unit>
        <trans-unit id="51ffe3fc21c6601c2932126d4f4eca5123604eda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; construct can also be used to localize the deletion of array/hash elements to the current block. See &lt;a href=&quot;../perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;Localized deletion of elements of composite types in perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; の&lt;a href=&quot;delete&quot;&gt;削除&lt;/a&gt; EXPR構文を使用して、配列/ハッシュ要素の削除を現在のブロックにローカライズすることもできます。&lt;a href=&quot;../perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;perlsubの複合型の要素のローカライズされた削除を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b1621ad946434d6c08e6becea5950298e8d654de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; construct localizes the deletion to the current block at run time. Until the block exits, elements locally deleted temporarily no longer exist. See &lt;a href=&quot;../perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;Localized deletion of elements of composite types in perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; の&lt;a href=&quot;delete&quot;&gt;削除&lt;/a&gt; EXPRコンストラクトは、実行時に削除を現在のブロックにローカライズします。ブロックが終了するまで、一時的にローカルに削除された要素は存在しなくなります。&lt;a href=&quot;../perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;perlsubの複合型の要素のローカライズされた削除を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="413b32076323a1b9dc32ef8307740eba59479274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; function executes a system command</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 関数は、システムコマンドを実行します</target>
        </trans-unit>
        <trans-unit id="2195a8cff19304cef2dc99fbcce68cf6dbdaf4fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; function is not implemented on all versions of Windows. Check the documentation for your specific version of Perl.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 関数は、Windowsのすべてのバージョンで実装されていません。Perlの特定のバージョンのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="1cc7a7cd989d44101ffb59063ba0d9ec90f901e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; operator will attempt to insure that no translation of carriage control occurs on input from or output to this filehandle. Since this involves reopening the file and then restoring its file position indicator, if this function returns FALSE, the underlying filehandle may no longer point to an open file, or may point to a different position in the file than before &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; was called.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; のオペレータは、キャリッジ制御のない翻訳は、このファイルハンドルへの入力または出力に発生しないことを保証しようとします。これには、ファイルを再度開いてからファイル位置インジケーターを復元する必要があるため、この関数がFALSEを返すと、基になるファイルハンドルが開いているファイルを指さなくなったり、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; が呼び出される前とは異なる位置をファイルで指したりする場合があります。</target>
        </trans-unit>
        <trans-unit id="d7b9155394683e2730126a87d41bdd8b7ec8ee0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; functions work on whole characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; 関数は、全体の文字に取り組みます。</target>
        </trans-unit>
        <trans-unit id="b8d018fd592275cef4c6f8f9148b669393d46ef8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; operator uses the &lt;code&gt;sys$hash_password&lt;/code&gt; system service to generate the hashed representation of PLAINTEXT. If USER is a valid username, the algorithm and salt values are taken from that user's UAF record. If it is not, then the preferred algorithm and a salt of 0 are used. The quadword encrypted value is returned as an 8-character string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; 演算子は使用しています &lt;code&gt;sys$hash_password&lt;/code&gt; PLAINTEXTのハッシュされた表現を生成するシステムサービスを。USERが有効なユーザー名である場合、アルゴリズムとソルトの値はそのユーザーのUAFレコードから取得されます。そうでない場合は、優先アルゴリズムと0のソルトが使用されます。クワッドワードの暗号化された値は、8文字の文字列として返されます。</target>
        </trans-unit>
        <trans-unit id="51567ba352ff0d9256d32ae3d4a4cc5e55c3b1bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; construct can also be used to localize the deletion of array/hash elements to the current block. See &lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;Localized deletion of elements of composite types in perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; の&lt;a href=&quot;functions/delete&quot;&gt;削除&lt;/a&gt; EXPR構文を使用して、配列/ハッシュ要素の削除を現在のブロックにローカライズすることもできます。&lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;perlsubの複合型の要素のローカライズされた削除を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="205f4f4c053e1354b5fd41e9a973041210cd6cb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; construct localizes the deletion to the current block at run time. Until the block exits, elements locally deleted temporarily no longer exist. See &lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;Localized deletion of elements of composite types in perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; EXPR&lt;/code&gt; の&lt;a href=&quot;functions/delete&quot;&gt;削除&lt;/a&gt; EXPRコンストラクトは、実行時に削除を現在のブロックにローカライズします。ブロックが終了するまで、一時的にローカルに削除された要素は存在しなくなります。&lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;perlsubの複合型の要素のローカライズされた削除を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c330ed0d1614413aef6482d1172074b901ca8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; construct isn't a real loop that you can use loop control on.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; 構文を使用すると、上のループ制御を使用できることを本当のループではありません。&lt;a href=&quot;functions/do&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bf5bbfe9093c8abccc03e7c7efe8dbe3d8e0233d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt; operator can be a bit tricky though. You can't add or delete keys of the hash while you're using it without possibly skipping or re-processing some pairs after Perl internally rehashes all of the elements. Additionally, a hash has only one iterator, so if you mix &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; on the same hash, you risk resetting the iterator and messing up your processing. See the &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; entry in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt; 演算子は、ビットトリッキーしかしすることができます。Perlがすべての要素を内部的に再ハッシュした後、いくつかのペアをスキップしたり再処理したりせずに、ハッシュのキーを追加または削除することはできません。また、ハッシュにはイテレータが1つしかないため、同じハッシュに &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; を混在させると、イテレータがリセットされて処理が混乱するおそれがあります。詳細については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="6a7ce17abb69e82a8250b438247bf503d68963f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; operator returns the pairs in apparently random order, so if ordering matters to you, you'll have to stick with the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 事業者は、明らかにランダムな順序でペアを返すので、あなたに問題を注文する場合は、あなたがに固執する必要があります &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="1d704aced95cc8764eb35404aac65f2304fbf2d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; method wrapped an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; around a &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;, and so waited for a thread to exit, passing along any values the thread might have returned and placing any errors into &lt;code&gt;$@&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 方法は、ラップ &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 周り &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; スレッドが戻ったかもしれない任意の値に沿って通過するとに、エラーを置くと、その出口にスレッドを待っていました &lt;code&gt;$@&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80c53083069f05797eef5848d626cca139bde071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; feature enables the &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; keyword, which evaluates the argument passed to it as a string of bytes. It dies if the string contains any characters outside the 8-bit range. Source filters work within &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt;: they apply to the contents of the string being evaluated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; の機能が有効に &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; キーワード、バイトの文字列として渡された引数を評価しているし。文字列に8ビットの範囲外の文字が含まれている場合は、終了します。ソースフィルターは &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; 内で機能します。これらは、評価される文字列の内容に適用されます。</target>
        </trans-unit>
        <trans-unit id="013c20c8a39c1e9d213753c8f42aa60136c4133a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; function executes a system command</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 関数は、システムコマンドを実行します</target>
        </trans-unit>
        <trans-unit id="cc6b445e37f9fe0173dc131ac1ed2864194322f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; function's job is to turn your process into another command and never to return. If that's not what you want to do, don't use &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;. :)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 関数の仕事は、別のコマンドに、決してリターンにあなたのプロセスを有効にすることです。それがあなたがやりたいことではないなら、 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; を使わないでください。:)</target>
        </trans-unit>
        <trans-unit id="c64c8f5547bb2a6573770267608423f5c2aa4dc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/for&quot;&gt;for(each)&lt;/a&gt;&lt;/code&gt; modifier is an iterator: it executes the statement once for each item in the LIST (with &lt;code&gt;$_&lt;/code&gt; aliased to each item in turn).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/for&quot;&gt;for(each)&lt;/a&gt;&lt;/code&gt; 修飾子はイテレータです：それは一度（と、リスト内の各アイテムに対してstatementを実行 &lt;code&gt;$_&lt;/code&gt; 順番に各項目にエイリアス）。</target>
        </trans-unit>
        <trans-unit id="fcbb7f06dac39b4543299760a90086a0717180ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt; function, even though it only takes one argument, has the precedence of a list operator, so beware:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt; の機能は、それが唯一の引数を取るにもかかわらず、リスト演算子の優先順位を持っているので、注意してください：</target>
        </trans-unit>
        <trans-unit id="d7025a8a8790fde9485d755f6c425f01c04b8467" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime&lt;/a&gt;&lt;/code&gt; operator will function properly if you have a working CRTL &lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt; routine, or if the logical name SYS$TIMEZONE_DIFFERENTIAL is defined as the number of seconds which must be added to UTC to yield local time. (This logical name is defined automatically if you are running a version of VMS with built-in UTC support.) If neither of these cases is true, a warning message is printed, and &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime&lt;/a&gt;&lt;/code&gt; はのオペレータを使用すると、作業CRTLを持っている場合は正常に機能します &lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt; ルーチンを、または論理名SYS $ TIMEZONE_DIFFERENTIALは現地時間を得るためにUTCに追加しなければならない秒数として定義されている場合。 （この論理名は、組み込みUTCサポートを備えたバージョンのVMSを実行している場合に自動的に定義されます。）これらのどちらのケースにも該当しない場合、警告メッセージが出力され、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="5a3ff2f4c2a7967681e4811d9bc792e927dbfcbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; form is quite different from the other forms of &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;. In fact, it isn't a goto in the normal sense at all, and doesn't have the stigma associated with other gotos. Instead, it exits the current subroutine (losing any changes set by local()) and immediately calls in its place the named subroutine using the current value of @_. This is used by &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to &lt;code&gt;@_&lt;/code&gt; in the current subroutine are propagated to the other subroutine.) After the &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, not even &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; will be able to tell that this routine was called first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; の形式は、他の形態とは全く異なる &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 。実際、これは通常の意味でのgotoではなく、他のgotoに関連する汚名もありません。代わりに、現在のサブルーチンを終了し（local（）によって設定された変更は失われます）、その場所で、@ _の現在の値を使用して名前付きサブルーチンをすぐに呼び出します。これはで使用されている &lt;code&gt;AUTOLOAD&lt;/code&gt; の願いは別のサブルーチンをロードして、他のサブルーチンが最初に呼ばれたようふりをすることサブルーチン（への変更点を除いて &lt;code&gt;@_&lt;/code&gt; 現在のサブルーチンでは、他のサブルーチンに伝播されます。）後に &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; すらいない このルーチンが最初に呼び出されたことを知ることができます。</target>
        </trans-unit>
        <trans-unit id="8c6cdb8b9140a3413b924a1be37defd8094c23ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; form expects to evaluate &lt;code&gt;EXPR&lt;/code&gt; to a code reference or a label name. If it evaluates to a code reference, it will be handled like &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; , below. This is especially useful for implementing tail recursion via &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; __SUB__&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; 形式は、評価することを期待 &lt;code&gt;EXPR&lt;/code&gt; をコード参照またはラベル名に。コード参照に評価される場合、以下の &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; ように処理されます。これは、 &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; __SUB__&lt;/code&gt; を介して末尾再帰を実装する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="f9a08aec53b4872b20c38601dfe1ff47bb7271a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; form finds the statement labeled with LABEL and resumes execution there. It can't be used to get out of a block or subroutine given to &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;. It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it's usually better to use some other construct such as &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;. The author of Perl has never felt the need to use this form of &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; (in Perl, that is; C is another matter). (The difference is that C does not offer named loops combined with loop control. Perl does, and this replaces most structured uses of &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; in other languages.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; 形式は、標識で標識された文を見つけだし、そこから実行を再開します。 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; に指定されたブロックまたはサブルーチンから抜け出すために使用することはできません。これは、サブルーチンの外を含め、動的スコープ内の他のほぼすべての場所に移動するために使用できますが、通常、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; などの他の構成要素を使用する方が適切です。 Perlの作者は、この形式の &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; を使用する必要性を感じたことはありません（Perlでは、Cは別の問題です）。 （違いは、Cはループ制御と組み合わせた名前付きループを提供しないことです。Perlが提供し、これは他の言語での &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; のほとんどの構造化された使用を置き換えます。）</target>
        </trans-unit>
        <trans-unit id="fd5e7141b6809acf60b4ffb9ca0527589ab4d1fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;-&amp;amp;NAME form is highly magical, and substitutes a call to the named subroutine for the currently running subroutine. This is used by &lt;code&gt;AUTOLOAD()&lt;/code&gt; subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to &lt;code&gt;@_&lt;/code&gt; in the current subroutine are propagated to the other subroutine.) After the &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, not even &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; will be able to tell that this routine was called first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; - ＆NAMEの形式は非常に魔法で、現在実行中のサブルーチンの名前が付けられたサブルーチンへの呼び出しを置き換えます。これは、別のサブルーチンをロードし、最初に他のサブルーチンが呼び出されたように見せかける &lt;code&gt;AUTOLOAD()&lt;/code&gt; サブルーチンによって使用されます（現在のサブルーチンでの &lt;code&gt;@_&lt;/code&gt; への変更が他のサブルーチンに伝達される場合を除く）。 &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; でさえ、このルーチンが最初に呼び出されたことを認識できません。</target>
        </trans-unit>
        <trans-unit id="0f2fbb144491503128d3d631573fe99dbb58cb74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;-EXPR form expects a label name, whose scope will be resolved dynamically. This allows for computed &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;s per FORTRAN, but isn't necessarily recommended if you're optimizing for maintainability:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; -EXPRフォームは、その範囲を動的に解決されるラベル名を、期待しています。これにより、FORTRANごとに計算された &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; が可能になりますが、保守性を最適化している場合は、必ずしも推奨されません。</target>
        </trans-unit>
        <trans-unit id="747fd1051ce1561b7aad0a462ec80a7083e807f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;-LABEL form finds the statement labeled with LABEL and resumes execution there. It may not be used to go into any construct that requires initialization, such as a subroutine or a &lt;code&gt;foreach&lt;/code&gt; loop. It also can't be used to go into a construct that is optimized away. It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it's usually better to use some other construct such as &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;. The author of Perl has never felt the need to use this form of &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; (in Perl, that is--C is another matter).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; -labelフォームは標識で標識された文を見つけだし、そこから実行を再開します。サブルーチンや &lt;code&gt;foreach&lt;/code&gt; ループなど、初期化が必要な構成要素へのアクセスには使用できません。また、最適化された構成に移動するために使用することもできません。これは、サブルーチンの外を含む、動的スコープ内の他のほぼすべての場所に移動するために使用できますが、通常、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; などの他の構成を使用する方が適切です。Perlの作成者は、この形式の &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; を使用する必要性を感じたことはありません（Perlでは、Cは別の問題です）。</target>
        </trans-unit>
        <trans-unit id="b3e30e59d91f75eda248244fb51004176883c63f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; in scalar context returns the count. If you want the list of matching items, just use it in list context instead:</source>
          <target state="translated">スカラーコンテキストの &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; はカウントを返します。一致するアイテムのリストが必要な場合は、代わりにリストコンテキストで使用してください。</target>
        </trans-unit>
        <trans-unit id="612dabc89cee10beadc6c980b04dfdba8cc2e280" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; function also resets the iterator, which means that you may see strange results if you use this between uses of other hash operators such as &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; 関数は、次のような他のハッシュ演算子の使用の間、これを使用する場合は奇妙な結果を見ることができることを意味し、イテレータ、リセット &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84a92b66f23e84ffcea0f8036601109332768c0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; function can be used to test this functionality from within a program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; 機能は、プログラム内からこの機能をテストするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8f9dd8be24cd7b207201afca586d0393221c8761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; function in the parent's &lt;code&gt;if&lt;/code&gt; block is there to send a signal to our child process, currently running in the &lt;code&gt;else&lt;/code&gt; block, as soon as the remote server has closed its end of the connection.</source>
          <target state="translated">リモートサーバーが接続の終わりを閉じるとすぐに、親の &lt;code&gt;if&lt;/code&gt; ブロックの &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; 関数が存在して、現在 &lt;code&gt;else&lt;/code&gt; ブロックで実行されている子プロセスにシグナルを送信します。</target>
        </trans-unit>
        <trans-unit id="8bfb3b07d45ff01232bb221af626a6a5fb4ea5a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; command immediately exits the loop in question. The &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, if any, is not executed:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; コマンドループを即座に抜けます。 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 存在する場合、ブロックを、実行されません。</target>
        </trans-unit>
        <trans-unit id="ac302bdab0f919a07174f63d0969bebc85f1b892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; command is like the &lt;code&gt;break&lt;/code&gt; statement in C (as used in loops); it immediately exits the loop in question. If the LABEL is omitted, the command refers to the innermost enclosing loop. The &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; EXPR&lt;/code&gt; form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; LABEL&lt;/code&gt; . The &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, if any, is not executed:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; コマンドは次のようにある &lt;code&gt;break&lt;/code&gt; （ループ内で使った）Cの陳述。問題のループをすぐに終了します。LABELが省略されている場合、コマンドは最も内側の囲みループを参照します。 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; EXPR&lt;/code&gt; 形式はPerl 5.18.0で入手可能な出発は、ラベル名は、実行時に計算することができ、そしてそれ以外に同じである &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; LABEL&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 存在する場合、ブロックを、実行されません。</target>
        </trans-unit>
        <trans-unit id="506963259280dc353e83831a1d7243717b046918" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; Keyword</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; キーワード</target>
        </trans-unit>
        <trans-unit id="249bfee98e5c2e5ddbdeda77c1a70bb97c684fdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; function takes a shared variable and puts a lock on it. No other thread may lock the variable until the variable is unlocked by the thread holding the lock. Unlocking happens automatically when the locking thread exits the block that contains the call to the &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; function. Using &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; is straightforward: This example has several threads doing some calculations in parallel, and occasionally updating a running total:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; 関数は共有変数を取り、それにロックを置きます。ロックを保持しているスレッドによって変数がロック解除されるまで、他のスレッドは変数をロックできません。ロック解除スレッドは、 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; 関数の呼び出しを含むブロックを終了すると、自動的にロック解除されます。 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; の使用は簡単です。この例では、いくつかのスレッドがいくつかの計算を並行して実行し、時々合計を更新しています。</target>
        </trans-unit>
        <trans-unit id="844dd628839d69aa91981cfdf9d35b8aa941b210" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; is actually not required; you could just use:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; ISは、実際には必要ありません。あなたはただ使うことができます：</target>
        </trans-unit>
        <trans-unit id="15c7027f68a72fedc245e7d612cf00a82d9df24d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; is simply a modifier on something you might assign to. So when you do assign to variables in its argument list, &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; doesn't change whether those variables are viewed as a scalar or an array. So</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 単にあなたがに割り当てるかもしれない何かの修飾子です。したがって、引数リストの変数に割り当てても、それらの変数がスカラーと配列のどちらとして表示されても、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; は変更しません。そう</target>
        </trans-unit>
        <trans-unit id="82cb7d6fd4d7d98853ace6ba4000362cdc7fa762" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; operator declares the listed variables to be lexically confined to the enclosing block, conditional (&lt;code&gt;if/unless/elsif/else&lt;/code&gt;), loop (&lt;code&gt;for/foreach/while/until/continue&lt;/code&gt;), subroutine, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do/require/use&lt;/a&gt;&lt;/code&gt;'d file. If more than one value is listed, the list must be placed in parentheses. All listed elements must be legal lvalues. Only alphanumeric identifiers may be lexically scoped--magical built-ins like &lt;code&gt;$/&lt;/code&gt; must currently be &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;ized with &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; オペレータは、字句的に取り囲むブロック、（条件に限定することが記載されている変数を宣言します &lt;code&gt;if/unless/elsif/else&lt;/code&gt; ）、ループ（ &lt;code&gt;for/foreach/while/until/continue&lt;/code&gt; ）、サブルーチン、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; の、または &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do/require/use&lt;/a&gt;&lt;/code&gt; 'dファイル。複数の値がリストされている場合は、リストを括弧で囲む必要があります。リストされたすべての要素は、正当な左辺値でなければなりません。英数字のみ識別子はレキシカルスコープすることができる-のような魔法のような組み込み関数 &lt;code&gt;$/&lt;/code&gt; 現在する必要があります &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; と化し &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="598c24981891ed39a33542154be0ea54335c8268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; command is like the &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; statement in C; it starts the next iteration of the loop:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; コマンドは次のようにあり &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; C内のステートメント。ループの次の反復を開始します。</target>
        </trans-unit>
        <trans-unit id="4ac987f577bf457aa0aa7edd6027d43957e00541" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; command starts the next iteration of the loop:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; のコマンドは、ループの次の反復を開始します。</target>
        </trans-unit>
        <trans-unit id="90d027781b9d30c834bc3f75976b8010ac44b08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; keywords work differently.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; キーワードは異なる動作をします。</target>
        </trans-unit>
        <trans-unit id="5eeb76addad99da0bbdd65d75ec9e60f2b34827f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; pragma doesn't</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; プラグマはしていません</target>
        </trans-unit>
        <trans-unit id="7bf3b5adc84fde6d734586f4bec0209359aa5187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; lib&lt;/code&gt; statement deletes all instances of each named directory from @INC.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; lib&lt;/code&gt; 文は@INCから各指定されたディレクトリのすべてのインスタンスを削除します。</target>
        </trans-unit>
        <trans-unit id="1aa289805fbc7ad3a1863fbfa81d350e063c7221" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FOO, &quot;|-&quot;)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(BAR, &quot;-|&quot;)&lt;/code&gt; constructs are not yet implemented. This limitation can be easily worked around in new code by creating a pipe explicitly. The following example shows how to write to a forked child:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FOO, &quot;|-&quot;)&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(BAR, &quot;-|&quot;)&lt;/code&gt; 構築物はまだ実装されていません。この制限は、パイプを明示的に作成することにより、新しいコードで簡単に回避できます。次の例は、フォークされた子に書き込む方法を示しています。</target>
        </trans-unit>
        <trans-unit id="91b6442686235ec3446ecfbcfcc1b68ae5f717df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma serves as one of the interfaces to declare default &quot;layers&quot; (also known as &quot;disciplines&quot;) for all I/O. Any two-argument open(), readpipe() (aka qx//) and similar operators found within the lexical scope of this pragma will use the declared defaults. Even three-argument opens may be affected by this pragma when they don't specify IO layers in MODE.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; プラグマはすべてのI / Oのために（また、「分野」としても知られる）デフォルトの「層」を宣言するためのインターフェイスとして機能します。このプラグマの字句スコープ内で見つかった2つの引数を持つopen（）、readpipe（）（別名qx //）および類似の演算子は、宣言されたデフォルトを使用します。3つの引数のオープンでさえ、MODEでIOレイヤーを指定しない場合、このプラグマの影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="d568cb2b48539b711386365d8e03258e04c0c727" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; functions work transparently on all codepoints, not just on ASCII alone &amp;mdash; nor in fact, not even just on Unicode alone.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; 関数だけではないだけでASCIIに、すべてのコードポイントに透過的に動作する-も実際には、ないだけでも一人ではUnicodeに。</target>
        </trans-unit>
        <trans-unit id="48c955c71d75929afac22e8dfa9aad63b2004a10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; operator showed up in perl 5.005. It compiles a regular expression, but doesn't apply it. When you use the pre-compiled version of the regex, perl does less work. In this example, I inserted a &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; to turn each pattern into its pre-compiled form. The rest of the script is the same, but faster:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 演算子は、Perl 5.005に現れました。正規表現をコンパイルしますが、適用しません。コンパイル済みバージョンの正規表現を使用すると、perlはあまり機能しません。この例では、 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; を挿入して、各パターンを事前にコンパイルされた形式に変換しました。スクリプトの残りの部分は同じですが、より高速です。</target>
        </trans-unit>
        <trans-unit id="6086a140e1b37399f10a989a119aa2028d369c83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; command restarts the loop block without evaluating the conditional again. The &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, if any, is</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; コマンドが再び条件を評価することなく、ループブロックを再開する。 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 、であれば、ブロックを</target>
        </trans-unit>
        <trans-unit id="362e8253628830d9a4d5614fd639fe79bc546984" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; command restarts the loop block without evaluating the conditional again. The &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, if any, is not executed. If the LABEL is omitted, the command refers to the innermost enclosing loop. The &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; EXPR&lt;/code&gt; form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;
LABEL&lt;/code&gt; . Programs that want to lie to themselves about what was just input normally use this command:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; コマンドが再び条件を評価することなく、ループブロックを再開する。 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 存在する場合、ブロックを、実行されません。LABELが省略されている場合、コマンドは最も内側の囲みループを参照します。 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; EXPR&lt;/code&gt; 形式はPerl 5.18.0で入手可能な出発は、ラベル名は、実行時に計算することができ、そしてそれ以外に同一 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; LABEL&lt;/code&gt; 。入力されたばかりのものについて嘘をつきたいプログラムは、通常、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f9c130f1621f9ce97dabd985717a6055d0d6afd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; substitution operator is documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 置換演算子は、に記載されて&lt;a href=&quot;perlop&quot;&gt;はperlop&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="121511ae0b5d1fbb23eba64b638e8a05d463c939" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split()&lt;/a&gt;&lt;/code&gt; function is another place where a regexp is used. &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; /regexp/, string, limit&lt;/code&gt; separates the &lt;code&gt;string&lt;/code&gt; operand into a list of substrings and returns that list. The regexp must be designed to match whatever constitutes the separators for the desired substrings. The &lt;code&gt;limit&lt;/code&gt; , if present, constrains splitting into no more than &lt;code&gt;limit&lt;/code&gt; number of strings. For example, to split a string into words, use</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split()&lt;/a&gt;&lt;/code&gt; 関数は、正規表現を使用している別の場所です。 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; /regexp/, string, limit&lt;/code&gt; は、 &lt;code&gt;string&lt;/code&gt; オペランドを部分文字列のリストに分割し、そのリストを返します。正規表現は、目的の部分文字列のセパレータを構成するものと一致するように設計する必要があります。 &lt;code&gt;limit&lt;/code&gt; 、存在する場合、より多くないに分割を制約する &lt;code&gt;limit&lt;/code&gt; 文字列の数。たとえば、文字列を単語に分割するには、次を使用します</target>
        </trans-unit>
        <trans-unit id="7f7da5ebd320780203ed7d5e0028f1f486db3bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; keyword creates a lexical variable (following the same scoping rules as &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;) that persists from one subroutine call to the next. If a state variable resides inside an anonymous subroutine, then each copy of the subroutine has its own copy of the state variable. However, the value of the state variable will still persist between calls to the same copy of the anonymous subroutine. (Don't forget that &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; { ... }&lt;/code&gt; creates a new subroutine each time it is executed.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; キーワードは、（同じスコープ規則、次のレキシカル変数を作成 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; ）と次のサブルーチン呼び出しから持続することを。状態変数が匿名サブルーチンの内部にある場合、サブルーチンの各コピーには、状態変数の独自のコピーがあります。ただし、状態変数の値は、無名サブルーチンの同じコピーへの呼び出し間で引き続き保持されます。（ &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; { ... }&lt;/code&gt; は、実行されるたびに新しいサブルーチンを作成することを忘れないでください。）</target>
        </trans-unit>
        <trans-unit id="87a4764ce311581074e8327a658c6ee1ed914b66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-entry&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-return&lt;/a&gt;&lt;/code&gt; probes gain a fourth argument: the package name of the function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-entry&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-return&lt;/a&gt;&lt;/code&gt; 機能のパッケージ名：プローブは、四番目の引数を獲得します。</target>
        </trans-unit>
        <trans-unit id="fa495b532decb2c8f20d40c7506dd35df2aff6f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; built-in is considered to have failed in the following circumstances:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 内蔵のは、次の状況で失敗したとみなされます。</target>
        </trans-unit>
        <trans-unit id="007bfa453d22a010bcc25f103e9e741d0e19770d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; operator creates a subprocess, and passes its arguments to the subprocess for execution as a DCL command. Since the subprocess is created directly via &lt;code&gt;lib$spawn()&lt;/code&gt; , any valid DCL command string may be specified. If the string begins with '@', it is treated as a DCL command unconditionally. Otherwise, if the first token contains a character used as a delimiter in file specification (e.g. &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;]&lt;/code&gt;), an attempt is made to expand it using a default type of</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; オペレータは、サブプロセスを作成し、DCLコマンドとして実行するためのサブプロセスに引数を渡します。サブプロセスは &lt;code&gt;lib$spawn()&lt;/code&gt; を介して直接作成されるため、有効なDCLコマンド文字列を指定できます。文字列が「@」で始まる場合、無条件にDCLコマンドとして扱われます。それ以外の場合、最初のトークンにファイル指定で区切り文字として使用される文字が含まれている場合（例 &lt;code&gt;:&lt;/code&gt; または &lt;code&gt;]&lt;/code&gt; ）、デフォルトのタイプを使用してそれを拡張しようとします</target>
        </trans-unit>
        <trans-unit id="c442498b077f35c1d517c581c1d1aa5d5b6d170c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; function returns elapsed realtime since some point in the past (such as system startup), user and system times for this process, and user and system times used by child processes. All times are returned in clock ticks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; 関数戻り、子プロセスで使用される過去のある時点（例えば、システムの起動など）、このプロセスのユーザとシステム時間、およびユーザとシステム時代からリアルタイム経過しました。すべての時間はクロック刻みで返されます。</target>
        </trans-unit>
        <trans-unit id="80b97318408e6d656bf28c96d67c4dfdc24c2653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; operator translates whole characters. (Note that the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///CU&lt;/a&gt;&lt;/code&gt; functionality has been removed. For similar functionality to that, see &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;('U0', ...)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;('C0', ...)&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 演算子は、全体の文字を変換します。（ &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///CU&lt;/a&gt;&lt;/code&gt; 機能は削除されています。同様の機能については、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;('U0', ...)&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;('C0', ...)&lt;/code&gt; 参照してください）。</target>
        </trans-unit>
        <trans-unit id="11a568ea0ae08ef300d37d167d740832b4c2b16f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; alternative might look like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 選択肢は次のようになります。</target>
        </trans-unit>
        <trans-unit id="42f87c254ee8d81cee26e792f60cacaefbfbe36a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; counts the null bytes. The &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; call returns a list of name-value pairs each of which is taken apart in the &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; ヌルバイトをカウントします。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; コールがに間隔を取られそれぞれが名前と値のペアのリストを返し &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; ブロック。</target>
        </trans-unit>
        <trans-unit id="a53ff006297297281156ad4ddc8aef0830e3811c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; version is a clear winner. One solution is flexible, the other is fast - and it's appropriately the programmer's choice which to use.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; バージョンは明確な勝者です。1つのソリューションは柔軟性があり、もう1つのソリューションは高速です。これは、プログラマーが適切に使用する方法です。</target>
        </trans-unit>
        <trans-unit id="6f47b182b84a1df9e8040499b142da5e15a5a35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; Gotcha</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; ガッチャ</target>
        </trans-unit>
        <trans-unit id="5e2ca855aa217bd553e610f05dba85cf9019d5da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; pragma disables character semantics for the rest of the lexical scope in which it appears. &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; bytes&lt;/code&gt; can be used to reverse the effect of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; within the current lexical scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; 、それが表示されるレキシカルスコープの残りのためのプラグマ無効キャラクタ・セマンティクス。 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; bytes&lt;/code&gt; を使用して、現在の字句スコープ内の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; の&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;の影響を元に戻すことはでき&lt;a href=&quot;functions/no&quot;&gt;ません&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9fdef637aec2a8c40d4ef4a640873fd3daeaa545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; filetest&lt;/code&gt; statements affect file tests defined in their block, up to the end of the closest enclosing block (they are lexically block-scoped).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; filetest&lt;/code&gt; 文がアップし、最も近い外側のブロックの終わり（彼らは字句スコープのブロックされている）に、そのブロック内で定義されたファイルのテストに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="8744ea2543ae1b476ba91732c622f01f08c1038b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; pragma tells the Perl parser to allow UTF-8 in the program text in the current lexical scope (allow UTF-EBCDIC on EBCDIC based platforms). The &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; utf8&lt;/code&gt; pragma tells Perl to switch back to treating the source text as literal bytes in the current lexical scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; プラグマは、現在のレキシカルスコープ（EBCDICベースのプラットフォーム上でUTF-EBCDICを許可する）のプログラムのテキストにUTF-8を許可するようにPerlのパーサに指示します。 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; utf8&lt;/code&gt; プラグマは、現在のレキシカルスコープでリテラルバイトとしてソーステキストを処理に戻すためにPerlを伝えます。</target>
        </trans-unit>
        <trans-unit id="43067066e43761608ec314550d1ef0009ca78c23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; switch will warn you if it interprets a reserved word as a string. But it will no longer warn you about using lowercase words, because the string is effectively quoted.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマや&lt;b&gt;-w&lt;/b&gt;は文字列が予約語として解釈した場合、スイッチは、警告を表示します。ただし、文字列が効果的に引用符で囲まれているため、小文字の単語の使用に関する警告は表示されなくなりました。</target>
        </trans-unit>
        <trans-unit id="19cdd025fab18dcd164b56bb8b49804d47261c9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma produces some lovely diagnostics. One can also use the &lt;b&gt;-w&lt;/b&gt; flag, but its use is normally discouraged, because it gets applied to all executed Perl code, including that not under your control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマは、いくつかの素敵な診断を生成します。&lt;b&gt;-w&lt;/b&gt;フラグを使用することもできますが、ユーザーの制御下にないものも含め、実行されたすべてのPerlコードに適用されるため、通常は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="98ff32ffdb1aaec51b5964ab04fedf9b556042ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt; function, even though it only takes one argument, has the precedence of a list operator, so beware:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt; の機能は、それが唯一の引数を取るにもかかわらず、リスト演算子の優先順位を持っているので、注意してください：</target>
        </trans-unit>
        <trans-unit id="57bb7a10c9bf27aba4e74945efa7f4324ecc8306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; form is quite different from the other forms of &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;. In fact, it isn't a goto in the normal sense at all, and doesn't have the stigma associated with other gotos. Instead, it exits the current subroutine (losing any changes set by local()) and immediately calls in its place the named subroutine using the current value of @_. This is used by &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to &lt;code&gt;@_&lt;/code&gt; in the current subroutine are propagated to the other subroutine.) After the &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, not even &lt;code&gt;&lt;a href=&quot;caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; will be able to tell that this routine was called first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; の形式は、他の形態とは全く異なる &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 。実際、これは通常の意味でのgotoではなく、他のgotoに関連する汚名もありません。代わりに、現在のサブルーチンを終了し（local（）によって設定された変更は失われます）、その場所で、@ _の現在の値を使用して名前付きサブルーチンをすぐに呼び出します。これはで使用されている &lt;code&gt;AUTOLOAD&lt;/code&gt; の願いは別のサブルーチンをロードして、他のサブルーチンが最初に呼ばれたようふりをすることサブルーチン（への変更点を除いて &lt;code&gt;@_&lt;/code&gt; 現在のサブルーチンでは、他のサブルーチンに伝播されます。）後に &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; すらいない このルーチンが最初に呼び出されたことを知ることができます。</target>
        </trans-unit>
        <trans-unit id="e45cfef5656ef233c1972b6e6db8f04158149f58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; form expects to evaluate &lt;code&gt;EXPR&lt;/code&gt; to a code reference or a label name. If it evaluates to a code reference, it will be handled like &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; , below. This is especially useful for implementing tail recursion via &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; __SUB__&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; 形式は、評価することを期待 &lt;code&gt;EXPR&lt;/code&gt; をコード参照またはラベル名に。コード参照に評価される場合、以下の &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; &amp;amp;NAME&lt;/code&gt; ように処理されます。これは、 &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; __SUB__&lt;/code&gt; を介して末尾再帰を実装する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="a0fba7d2ee7cbb751d9b45951b63706bcd429d8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; form finds the statement labeled with LABEL and resumes execution there. It can't be used to get out of a block or subroutine given to &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;. It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it's usually better to use some other construct such as &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;. The author of Perl has never felt the need to use this form of &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; (in Perl, that is; C is another matter). (The difference is that C does not offer named loops combined with loop control. Perl does, and this replaces most structured uses of &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; in other languages.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; 形式は、標識で標識された文を見つけだし、そこから実行を再開します。 &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; に指定されたブロックまたはサブルーチンから抜け出すために使用することはできません。これは、サブルーチンの外を含め、動的スコープ内の他のほぼすべての場所に移動するために使用できますが、通常、 &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; などの他の構成要素を使用する方が適切です。 Perlの作者は、この形式の &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; を使用する必要性を感じたことはありません（Perlでは、Cは別の問題です）。 （違いは、Cはループ制御と組み合わせた名前付きループを提供しないことです。Perlが提供し、これは他の言語での &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; のほとんどの構造化された使用を置き換えます。）</target>
        </trans-unit>
        <trans-unit id="0ec2144df4bcb647e47e9a3fffb037716e0ff735" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; command is like the &lt;code&gt;break&lt;/code&gt; statement in C (as used in loops); it immediately exits the loop in question. If the LABEL is omitted, the command refers to the innermost enclosing loop. The &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; EXPR&lt;/code&gt; form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; LABEL&lt;/code&gt; . The &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, if any, is not executed:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; コマンドは次のようにある &lt;code&gt;break&lt;/code&gt; （ループ内で使った）Cの陳述。問題のループをすぐに終了します。LABELが省略されている場合、コマンドは最も内側の囲みループを参照します。 &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; EXPR&lt;/code&gt; 形式はPerl 5.18.0で入手可能な出発は、ラベル名は、実行時に計算することができ、そしてそれ以外に同じである &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; LABEL&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 存在する場合、ブロックを、実行されません。</target>
        </trans-unit>
        <trans-unit id="0dc04adeb5f33f6be3e55c3b75049d3460dd5faf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; command is like the &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; statement in C; it starts the next iteration of the loop:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; コマンドは次のようにあり &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; C内のステートメント。ループの次の反復を開始します。</target>
        </trans-unit>
        <trans-unit id="d03baace3369995824b0971e1012da68e7afe6a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;re#%27%2Fflags%27-mode&quot;&gt;use re '/foo'&lt;/a&gt;&lt;/code&gt; pragma can be used to set default modifiers (including these) for regular expressions compiled within its scope. This pragma has precedence over the other pragmas listed below that also change the defaults.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;re#%27%2Fflags%27-mode&quot;&gt;use re '/foo'&lt;/a&gt;&lt;/code&gt; プラグマは、その範囲内にコンパイルされた正規表現のために（これらを含む）セットデフォルトの修飾に使用することができます。このプラグマは、デフォルトを変更する以下にリストされている他のプラグマよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="d90f5477a728439ae001b7de4028bc5063fe8048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;re#'%2fflags'-mode&quot;&gt;use re '/foo'&lt;/a&gt;&lt;/code&gt; pragma can be used to set default modifiers (including these) for regular expressions compiled within its scope. This pragma has precedence over the other pragmas listed below that also change the defaults.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;re#'%2fflags'-mode&quot;&gt;use re '/foo'&lt;/a&gt;&lt;/code&gt; プラグマは、その範囲内にコンパイルされた正規表現のために（これらを含む）セットデフォルトの修飾に使用することができます。このプラグマは、デフォルトを変更する以下にリストされている他のプラグマよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="00f56e4e287b4dad7bb9b00175cad4e28ccf4f49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; command restarts the loop block without evaluating the conditional again. The &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, if any, is not executed. If the LABEL is omitted, the command refers to the innermost enclosing loop. The &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; EXPR&lt;/code&gt; form, available starting in Perl 5.18.0, allows a label name to be computed at run time, and is otherwise identical to &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;
LABEL&lt;/code&gt; . Programs that want to lie to themselves about what was just input normally use this command:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; コマンドが再び条件を評価することなく、ループブロックを再開する。 &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 存在する場合、ブロックを、実行されません。LABELが省略されている場合、コマンドは最も内側の囲みループを参照します。 &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; EXPR&lt;/code&gt; 形式はPerl 5.18.0で入手可能な出発は、ラベル名は、実行時に計算することができ、そしてそれ以外に同一 &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; LABEL&lt;/code&gt; 。入力されたばかりのものについて嘘をつきたいプログラムは、通常、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="98d8fed67bad4314d20d9f4fe777fa7ab53123e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=&amp;gt;&lt;/code&gt; operator (sometimes pronounced &quot;fat comma&quot;) is a synonym for the comma except that it causes a word on its left to be interpreted as a string if it begins with a letter or underscore and is composed only of letters, digits and underscores. This includes operands that might otherwise be interpreted as operators, constants, single number v-strings or function calls. If in doubt about this behavior, the left operand can be quoted explicitly.</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子（時々 、発音「脂肪カンマ」）は、それは文字またはアンダースコアで始まり、文字だけで構成されている場合、それは文字列として解釈されるその左側の単語を引き起こすことを除いて、コンマの同義語で、数字とアンダースコア。これには、演算子、定数、単一の数値のV文字列、または関数呼び出しとして解釈される可能性のあるオペランドが含まれます。この動作について疑問がある場合は、左のオペランドを明示的に引用できます。</target>
        </trans-unit>
        <trans-unit id="8399dbf8e2e784c4274bc7b091a4f7216970d51b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=&amp;gt;&lt;/code&gt; operator is helpful in documenting the correspondence between keys and values in hashes, and other paired elements in lists.</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子は、ハッシュのキーと値の対応関係、およびリスト内の他の対になった要素をドキュメントに有用です。</target>
        </trans-unit>
        <trans-unit id="efd3e2bb957eaa0ff2ef103df55bdfaea8225389" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=back&lt;/code&gt; command does not take any arguments.</source>
          <target state="translated">&lt;code&gt;=back&lt;/code&gt; コマンドは引数を取りません。</target>
        </trans-unit>
        <trans-unit id="2748bc14f635bff7b4cada98a19718c4d6f31834" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=begin&lt;/code&gt; directive can mark a section for a particular purpose. If the Pod parser doesn't want to handle it, it just ignores it. Label the comments with &lt;code&gt;comment&lt;/code&gt; . End the comment using &lt;code&gt;=end&lt;/code&gt; with the same label. You still need the &lt;code&gt;=cut&lt;/code&gt; to go back to Perl code from the Pod comment:</source>
          <target state="translated">&lt;code&gt;=begin&lt;/code&gt; ディレクティブは、特定の目的のためのセクションをマークすることができます。ポッドパーサーがそれを処理したくない場合は、無視します。コメントに &lt;code&gt;comment&lt;/code&gt; というラベルを付けます。同じラベルで &lt;code&gt;=end&lt;/code&gt; を使用してコメントを終了します。ポッドのコメントからPerlコードに戻るには、まだ &lt;code&gt;=cut&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="f59fd3ccb5e9b7feba1f1fe25b7136044c1d07fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=begin&lt;/code&gt; directive can mark a section for a particular purpose. If the Pod parser doesn't want to handle it, it just ignores it. Label the comments with &lt;code&gt;comment&lt;/code&gt;. End the comment using &lt;code&gt;=end&lt;/code&gt; with the same label. You still need the &lt;code&gt;=cut&lt;/code&gt; to go back to Perl code from the Pod comment:</source>
          <target state="translated">&lt;code&gt;=begin&lt;/code&gt; ディレクティブは、特定の目的のためのセクションをマークすることができます。ポッドパーサーがそれを処理したくない場合は、それを無視します。コメントに &lt;code&gt;comment&lt;/code&gt; ラベルを付けます。同じラベルで &lt;code&gt;=end&lt;/code&gt; を使用してコメントを終了します。ポッドコメントからPerlコードに戻るには、まだ &lt;code&gt;=cut&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="ef8064ce24f5339d152aec47e53a990ce73ae1e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=over&lt;/code&gt; command does not have a corresponding &lt;code&gt;=back&lt;/code&gt; before the next heading (&lt;code&gt;=head1&lt;/code&gt; or &lt;code&gt;=head2&lt;/code&gt; ) or the end of the file.</source>
          <target state="translated">&lt;code&gt;=over&lt;/code&gt; コマンドが対応する必要はありません &lt;code&gt;=back&lt;/code&gt; 次の見出しの前に（ &lt;code&gt;=head1&lt;/code&gt; または &lt;code&gt;=head2&lt;/code&gt; ）またはファイルの終わりを。</target>
        </trans-unit>
        <trans-unit id="e8028d211e346b9053331798c8e936f0c3ebfac6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;=over&lt;/code&gt; command does not have a corresponding &lt;code&gt;=back&lt;/code&gt; before the next heading (&lt;code&gt;=head1&lt;/code&gt; or &lt;code&gt;=head2&lt;/code&gt;) or the end of the file.</source>
          <target state="translated">&lt;code&gt;=over&lt;/code&gt; コマンドが対応する必要はありません &lt;code&gt;=back&lt;/code&gt; 次の見出しの前に（ &lt;code&gt;=head1&lt;/code&gt; または &lt;code&gt;=head2&lt;/code&gt; ）またはファイルの終わりを。</target>
        </trans-unit>
        <trans-unit id="8153dbca699722108378e052ce04788e510ab3df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@EXPORT&lt;/code&gt; array tells Perl which of the extension's variables and subroutines should be placed into the calling package's namespace. Because you don't know if the user has already used your variable and subroutine names, it's vitally important to carefully select what to export. Do</source>
          <target state="translated">&lt;code&gt;@EXPORT&lt;/code&gt; の配列は、呼び出し元のパッケージの名前空間に配置する必要がありエクステンションの変数とサブルーチンのPerlを伝えます。ユーザーが既に変数名とサブルーチン名を使用しているかどうかはわからないため、何をエクスポートするかを慎重に選択することが非常に重要です。行う</target>
        </trans-unit>
        <trans-unit id="59c8e98631ebe2ad43446558b18c0e9a67b97b20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@array[1]&lt;/code&gt; is an array slice, although it has only one index. You can pull out multiple elements simultaneously by specifying additional indices as a list, like &lt;code&gt;@array[1,4,3,0]&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;@array[1]&lt;/code&gt; 、それが唯一のインデックスを有するが、配列スライスです。 &lt;code&gt;@array[1,4,3,0]&lt;/code&gt; ように、リストとして追加のインデックスを指定することで、複数の要素を同時にプルできます。</target>
        </trans-unit>
        <trans-unit id="acd3d23d5c24e2e27f46834d267601cebe9f5684" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@array[1]&lt;/code&gt; is an array slice, although it has only one index. You can pull out multiple elements simultaneously by specifying additional indices as a list, like &lt;code&gt;@array[1,4,3,0]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@array[1]&lt;/code&gt; 、それが唯一のインデックスを有するが、配列スライスです。 &lt;code&gt;@array[1,4,3,0]&lt;/code&gt; ように、追加のインデックスをリストとして指定することで、複数の要素を同時に引き出すことができます。</target>
        </trans-unit>
        <trans-unit id="651c155493f8eecba5929c58d7483ab06d1863f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ACTUAL&lt;/code&gt; tells &lt;code&gt;NEXT&lt;/code&gt; that there must actually be a next method to call, or it should throw an exception.</source>
          <target state="translated">&lt;code&gt;ACTUAL&lt;/code&gt; は伝え &lt;code&gt;NEXT&lt;/code&gt; をそこに実際に呼び出すために、次の方法でなければならない、またはそれが例外をスローする必要があること。</target>
        </trans-unit>
        <trans-unit id="8e537d261fb0eb0877ceb1c6331c23797b3540cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Alias&lt;/code&gt; module implements localization of the basic types within the</source>
          <target state="translated">&lt;code&gt;Alias&lt;/code&gt; 内の基本的な種類のモジュールが実装ローカリゼーション</target>
        </trans-unit>
        <trans-unit id="2c6a8f1a286c25be4929a3d652924543120a4cba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Archive::Tar&lt;/code&gt; module can optionally use &lt;code&gt;Compress::Zlib&lt;/code&gt; (via the &lt;code&gt;IO::Zlib&lt;/code&gt; module) to access tar files that have been compressed with &lt;code&gt;gzip&lt;/code&gt; . Unfortunately tar files compressed with the Unix &lt;code&gt;compress&lt;/code&gt; utility cannot be read by &lt;code&gt;Compress::Zlib&lt;/code&gt; and so cannot be directly accesses by &lt;code&gt;Archive::Tar&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; モジュールは、必要に応じて使用することができます &lt;code&gt;Compress::Zlib&lt;/code&gt; （経由 &lt;code&gt;IO::Zlib&lt;/code&gt; で圧縮されているアクセスtarファイルにモジュールを） &lt;code&gt;gzip&lt;/code&gt; 。残念ながら、Unix &lt;code&gt;compress&lt;/code&gt; ユーティリティで圧縮されたtarファイルは &lt;code&gt;Compress::Zlib&lt;/code&gt; 読み取ることができないため、 &lt;code&gt;Archive::Tar&lt;/code&gt; 直接アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="c846109c9cdb2321e2be7662c4588cdc7ec88db7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Archive::Tar&lt;/code&gt; module can optionally use &lt;code&gt;Compress::Zlib&lt;/code&gt; (via the &lt;code&gt;IO::Zlib&lt;/code&gt; module) to access tar files that have been compressed with &lt;code&gt;gzip&lt;/code&gt;. Unfortunately tar files compressed with the Unix &lt;code&gt;compress&lt;/code&gt; utility cannot be read by &lt;code&gt;Compress::Zlib&lt;/code&gt; and so cannot be directly accessed by &lt;code&gt;Archive::Tar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; モジュールは、必要に応じて使用することができます &lt;code&gt;Compress::Zlib&lt;/code&gt; （経由 &lt;code&gt;IO::Zlib&lt;/code&gt; で圧縮されているアクセスtarファイルにモジュールを） &lt;code&gt;gzip&lt;/code&gt; 。残念ながら、Unix &lt;code&gt;compress&lt;/code&gt; ユーティリティで圧縮されたtarファイルは &lt;code&gt;Compress::Zlib&lt;/code&gt; 読み取ることができないため、 &lt;code&gt;Archive::Tar&lt;/code&gt; から直接アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="9b17fdbcd746a9f7c286b280ba85ada7dc1cad7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Archive::Tar&lt;/code&gt; module can optionally use &lt;code&gt;Compress::Zlib&lt;/code&gt; (via the &lt;code&gt;IO::Zlib&lt;/code&gt; module) to access tar files that have been compressed with &lt;code&gt;gzip&lt;/code&gt;. Unfortunately tar files compressed with the Unix &lt;code&gt;compress&lt;/code&gt; utility cannot be read by &lt;code&gt;Compress::Zlib&lt;/code&gt; and so cannot be directly accesses by &lt;code&gt;Archive::Tar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; モジュールは、必要に応じて使用することができます &lt;code&gt;Compress::Zlib&lt;/code&gt; （経由 &lt;code&gt;IO::Zlib&lt;/code&gt; で圧縮されているアクセスtarファイルにモジュールを） &lt;code&gt;gzip&lt;/code&gt; 。残念ながら、Unix &lt;code&gt;compress&lt;/code&gt; ユーティリティで圧縮されたtarファイルは &lt;code&gt;Compress::Zlib&lt;/code&gt; 読み取ることができないため、 &lt;code&gt;Archive::Tar&lt;/code&gt; 直接アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="43769b61441be000184345132a2a54dc3708064b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;B::COP&lt;/code&gt; class is used for &quot;nextstate&quot; and &quot;dbstate&quot; ops. As of Perl 5.22, it is also used for &quot;null&quot; ops that started out as COPs.</source>
          <target state="translated">&lt;code&gt;B::COP&lt;/code&gt; クラスは、 &quot;nextstate&quot;と&quot;dbstate&quot; OPSのために使用されています。Perl 5.22以降では、COPとして開始された「null」操作にも使用されます。</target>
        </trans-unit>
        <trans-unit id="1a2938ca3d630d110b73048269c361ea78fb5cb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;B&lt;/code&gt; module contains a set of utility functions for querying the current state of the Perl interpreter; typically these functions return objects from the B::SV and B::OP classes, or their derived classes. These classes in turn define methods for querying the resulting objects about their own internal state.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; のモジュールは、Perlインタプリタの現在の状態を問い合わせるためのユーティリティ関数のセットを含みます。通常、これらの関数はB :: SVおよびB :: OPクラス、またはそれらの派生クラスからオブジェクトを返します。次に、これらのクラスは、独自の内部状態について結果のオブジェクトを照会するためのメソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="40f9413962f128106cd0802b4a2c73013cd7ed0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;B&lt;/code&gt; module exports a variety of functions: some are simple utility functions, others provide a Perl program with a way to get an initial &quot;handle&quot; on an internal object.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; のモジュールの輸出のさまざまな機能：いくつかの簡単なユーティリティ関数ですが、他は内部オブジェクトの最初の「ハンドル」を取得する方法でPerlプログラムを提供しています。</target>
        </trans-unit>
        <trans-unit id="5c92116836eedf111e1da108ac269b10e9e38e79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;B&lt;/code&gt; module supplies classes which allow a Perl program to delve into its own innards. It is the module used to implement the &quot;backends&quot; of the Perl compiler. Usage of the compiler does not require knowledge of this module: see the</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; のモジュールは、独自の内臓を詳細に調べるにPerlプログラムを許可するクラスを提供します。これは、Perlコンパイラの「バックエンド」を実装するために使用されるモジュールです。コンパイラの使用には、このモジュールの知識は必要ありません。</target>
        </trans-unit>
        <trans-unit id="36e744ee541a84c63162e7b4ffbdc783bc6d5f1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; subroutines are not so much subroutines as named special code blocks, of which you can have more than one in a package, and which you can &lt;b&gt;not&lt;/b&gt; call explicitly. See &lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; と &lt;code&gt;END&lt;/code&gt; サブルーチンは、パッケージ内に複数のを持つことができたのという名前の特別なコードブロックほどサブルーチン、ではない、とどのあなたがすることができ&lt;b&gt;ません&lt;/b&gt;明示的に呼び出します。&lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;perlmodのBEGIN、UNITCHECK、CHECK、INIT、ENDを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="b8aea840d46b0e93fbdf7c5fc764686c8f3b8c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BEGIN&lt;/code&gt; forces the &lt;a href=&quot;#require-VERSION&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; to happen at compile time. The &lt;a href=&quot;#require-VERSION&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; makes sure the module is loaded into memory if it hasn't been yet. The &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; is not a builtin; it's just an ordinary static method call into the &lt;code&gt;Module&lt;/code&gt; package to tell the module to import the list of features back into the current package. The module can implement its &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; method any way it likes, though most modules just choose to derive their &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; method via inheritance from the &lt;code&gt;Exporter&lt;/code&gt; class that is defined in the &lt;a href=&quot;exporter&quot;&gt;&lt;code&gt;Exporter&lt;/code&gt;&lt;/a&gt; module. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;. If no &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; method can be found, then the call is skipped, even if there is an AUTOLOAD method.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 力が&lt;a href=&quot;#require-VERSION&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;、コンパイル時に発生します。&lt;a href=&quot;#require-VERSION&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;それはまだされていない場合は必ずモジュールがメモリにロードされますが。&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;組み込みではありません。これは、 &lt;code&gt;Module&lt;/code&gt; パッケージへの通常の静的メソッド呼び出しであり、機能のリストを現在のパッケージにインポートして戻すようにモジュールに指示します。モジュールは、&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;メソッドを好きなように実装できますが、ほとんどのモジュールは、&lt;a href=&quot;exporter&quot;&gt; &lt;code&gt;Exporter&lt;/code&gt; &lt;/a&gt;モジュールで定義されている &lt;code&gt;Exporter&lt;/code&gt; クラスからの継承を介して&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;メソッドを派生させることを選択します。&lt;a href=&quot;exporter&quot;&gt;Exporterを&lt;/a&gt;参照してください。いいえの場合&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;メソッドが見つかると、AUTOLOADメソッドがある場合でも、呼び出しはスキップされます。</target>
        </trans-unit>
        <trans-unit id="38a9cf1f5e3f21b86fcbb8df98f12cbc38b145e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BEGIN&lt;/code&gt; forces the &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; to happen at compile time. The &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; makes sure the module is loaded into memory if it hasn't been yet. The &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; is not a builtin; it's just an ordinary static method call into the &lt;code&gt;Module&lt;/code&gt; package to tell the module to import the list of features back into the current package. The module can implement its &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method any way it likes, though most modules just choose to derive their &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method via inheritance from the &lt;code&gt;Exporter&lt;/code&gt; class that is defined in the &lt;code&gt;Exporter&lt;/code&gt; module. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;. If no &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method can be found then the call is skipped, even if there is an AUTOLOAD method.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 力が &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 、コンパイル時に発生します。 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; それはまだされていない場合は必ずモジュールがメモリにロードされますが。 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 組み込みではありません。これは、 &lt;code&gt;Module&lt;/code&gt; パッケージへの通常の静的メソッド呼び出しであり、機能のリストを現在のパッケージにインポートするようにモジュールに指示します。ほとんどのモジュールは、 &lt;code&gt;Exporter&lt;/code&gt; モジュールで定義されている &lt;code&gt;Exporter&lt;/code&gt; クラスからの継承を介して &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを派生させることを選択しますが、モジュールは任意の方法で &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを実装できます。&lt;a href=&quot;exporter&quot;&gt;エクスポーターを&lt;/a&gt;参照してください。いいえの場合 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドが見つかると、AUTOLOADメソッドがあっても、呼び出しはスキップされます。</target>
        </trans-unit>
        <trans-unit id="a9fa3a73043129ebc13296822d30d370f57d9e72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BEGIN&lt;/code&gt; forces the &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; to happen at compile time. The &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; makes sure the module is loaded into memory if it hasn't been yet. The &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; is not a builtin; it's just an ordinary static method call into the &lt;code&gt;Module&lt;/code&gt; package to tell the module to import the list of features back into the current package. The module can implement its &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method any way it likes, though most modules just choose to derive their &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method via inheritance from the &lt;code&gt;Exporter&lt;/code&gt; class that is defined in the &lt;code&gt;Exporter&lt;/code&gt; module. See &lt;a href=&quot;../exporter&quot;&gt;Exporter&lt;/a&gt;. If no &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method can be found then the call is skipped, even if there is an AUTOLOAD method.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 力が &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 、コンパイル時に発生します。 &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; それはまだされていない場合は必ずモジュールがメモリにロードされますが。 &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 組み込みではありません。これは、 &lt;code&gt;Module&lt;/code&gt; パッケージへの通常の静的メソッド呼び出しであり、機能のリストを現在のパッケージにインポートするようにモジュールに指示します。ほとんどのモジュールは、 &lt;code&gt;Exporter&lt;/code&gt; モジュールで定義されている &lt;code&gt;Exporter&lt;/code&gt; クラスからの継承を介して &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを派生させることを選択するだけですが、モジュールは &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを任意の方法で実装できます。&lt;a href=&quot;../exporter&quot;&gt;エクスポーターを&lt;/a&gt;参照してください。いいえの場合 &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドが見つかると、AUTOLOADメソッドがあっても、呼び出しはスキップされます。</target>
        </trans-unit>
        <trans-unit id="9201471b5261b8b4c37aca6c270b666c4082753d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BEGIN&lt;/code&gt; will assure that the loading of</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; のロードことを保証します</target>
        </trans-unit>
        <trans-unit id="1df83aa021f2d25a04664c457983f82d52813309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;INIT&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; subroutines are not so much subroutines as named special code blocks, of which you can have more than one in a package, and which you can &lt;b&gt;not&lt;/b&gt; call explicitly. See &lt;a href=&quot;perlmod#BEGIN%2C-UNITCHECK%2C-CHECK%2C-INIT-and-END&quot;&gt;&quot;BEGIN, UNITCHECK, CHECK, INIT and END&quot; in perlmod&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; と &lt;code&gt;END&lt;/code&gt; サブルーチンは、パッケージ内に複数のを持つことができたのという名前の特別なコードブロックほどサブルーチン、ではない、とどのあなたがすることができ&lt;b&gt;ません&lt;/b&gt;明示的に呼び出します。&lt;a href=&quot;perlmod#BEGIN%2C-UNITCHECK%2C-CHECK%2C-INIT-and-END&quot;&gt;perlmodの「BEGIN、UNITCHECK、CHECK、INIT、およびEND」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="08a5cc1adfa77075f0adc752b299d298837ebeee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; blocks in code compiled by &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, string &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, or string &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; will not be executed if they occur after the end of the main compilation phase; that can be a problem in mod_perl and other persistent environments which use those functions to load code at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、string &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、またはstring &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; によってコンパイルされたコードの &lt;code&gt;CHECK&lt;/code&gt; および &lt;code&gt;INIT&lt;/code&gt; ブロックは、メインのコンパイルフェーズの終了後に発生した場合、実行されません。これは、mod_perlおよびこれらの関数を使用して実行時にコードをロードする他の永続的な環境で問題になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b104eb26cbd94be033237435dd68c95041e8eb25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; blocks in code compiled by &lt;code&gt;require&lt;/code&gt;, string &lt;code&gt;do&lt;/code&gt;, or string &lt;code&gt;eval&lt;/code&gt; will not be executed if they occur after the end of the main compilation phase; that can be a problem in mod_perl and other persistent environments which use those functions to load code at runtime.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 、string &lt;code&gt;do&lt;/code&gt; 、またはstring &lt;code&gt;eval&lt;/code&gt; によってコンパイルされたコードの &lt;code&gt;CHECK&lt;/code&gt; ブロックと &lt;code&gt;INIT&lt;/code&gt; ブロックは、メインのコンパイルフェーズの終了後に発生した場合は実行されません。これは、実行時にコードをロードするためにこれらの関数を使用するmod_perlおよびその他の永続的な環境で問題になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="981efa7d62f736b9f150f24425de3b13fd11e4dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CNS11643&lt;/code&gt; encoding files are not complete. For common &lt;code&gt;CNS11643&lt;/code&gt; manipulation, please use &lt;code&gt;EUC-TW&lt;/code&gt; in &lt;a href=&quot;Encode::HanExtra&quot;&gt;Encode::HanExtra&lt;/a&gt;, which contains planes 1-7.</source>
          <target state="translated">&lt;code&gt;CNS11643&lt;/code&gt; エンコードファイルが完全ではありません。一般的な &lt;code&gt;CNS11643&lt;/code&gt; の操作については、&lt;a href=&quot;Encode::HanExtra&quot;&gt;Encode :: HanExtra&lt;/a&gt;で &lt;code&gt;EUC-TW&lt;/code&gt; を使用してください。これには、プレーン1〜7が含まれています。</target>
        </trans-unit>
        <trans-unit id="9d8f4372f9a2ba513ea1d0d1264224c42f7ba97c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CNS11643&lt;/code&gt; encoding files are not complete. For common &lt;code&gt;CNS11643&lt;/code&gt; manipulation, please use &lt;code&gt;EUC-TW&lt;/code&gt; in &lt;a href=&quot;http://search.cpan.org/perldoc/Encode::HanExtra&quot;&gt;Encode::HanExtra&lt;/a&gt;, which contains planes 1-7.</source>
          <target state="translated">&lt;code&gt;CNS11643&lt;/code&gt; エンコードファイルが完全ではありません。共通のため &lt;code&gt;CNS11643&lt;/code&gt; の操作、使用してください &lt;code&gt;EUC-TW&lt;/code&gt; で&lt;a href=&quot;http://search.cpan.org/perldoc/Encode::HanExtra&quot;&gt;エンコード:: HanExtra&lt;/a&gt;、プレーン1-7が含まれています。</target>
        </trans-unit>
        <trans-unit id="82651f5375f4780d1c104db566c2ac41e7d83b9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CORE&lt;/code&gt; namespace gives access to the original built-in functions of Perl. The &lt;code&gt;CORE&lt;/code&gt; package is built into Perl, and therefore you do not need to use or require a hypothetical &quot;CORE&quot; module prior to accessing routines in this namespace.</source>
          <target state="translated">&lt;code&gt;CORE&lt;/code&gt; の名前空間は、内蔵のPerlの機能を元にアクセスすることができます。 &lt;code&gt;CORE&lt;/code&gt; のパッケージは、Perlに組み込まれているので、あなたが使用する必要はありませんか、この名前空間内のルーチンにアクセスする前に仮想の「CORE」モジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="8ae42d583657def46159ee7ad1318ba4bd6a3fc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compress::Zlib&lt;/code&gt; module can be split into two general areas of functionality, namely a simple read/write interface to</source>
          <target state="translated">&lt;code&gt;Compress::Zlib&lt;/code&gt; モジュールは、機能の二つの一般的な領域に、すなわち、単純な読み出し/書き込みインタフェースに分割することができ</target>
        </trans-unit>
        <trans-unit id="46e8d3223a09166ecaf398dcfdae3710dcb3dcb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DATA&lt;/code&gt; file handle by default has whatever PerlIO layers were in place when Perl read the file to parse the source. Normally that means that the file is being read bytewise, as if it were encoded in Latin-1, but there are two major ways for it to be otherwise. Firstly, if the &lt;code&gt;__END__&lt;/code&gt;/&lt;code&gt;__DATA__&lt;/code&gt; token is in the scope of a &lt;code&gt;use utf8&lt;/code&gt; pragma then the &lt;code&gt;DATA&lt;/code&gt; handle will be in UTF-8 mode. And secondly, if the source is being read from perl's standard input then the &lt;code&gt;DATA&lt;/code&gt; file handle is actually aliased to the &lt;code&gt;STDIN&lt;/code&gt; file handle, and may be in UTF-8 mode because of the &lt;code&gt;PERL_UNICODE&lt;/code&gt; environment variable or perl's command-line switches.</source>
          <target state="translated">&lt;code&gt;DATA&lt;/code&gt; はデフォルトでファイルハンドルがPerlのソースを解析し、ファイルを読み込む際にはPerlIO層が所定の位置にあったものは何でも持っています。通常、これは、ファイルがラテン語-1でエンコードされているかのようにバイト単位で読み取られることを意味しますが、それ以外の場合は2つの主要な方法があります。場合まず、 &lt;code&gt;__END__&lt;/code&gt; / &lt;code&gt;__DATA__&lt;/code&gt; トークンの範囲内にある &lt;code&gt;use utf8&lt;/code&gt; プラグマ次に &lt;code&gt;DATA&lt;/code&gt; のハンドルは、UTF-8モードになります。次に、ソースがperlの標準入力から読み取られている場合、 &lt;code&gt;DATA&lt;/code&gt; ファイルハンドルは実際には &lt;code&gt;STDIN&lt;/code&gt; ファイルハンドルにエイリアスされ、 &lt;code&gt;PERL_UNICODE&lt;/code&gt; 環境変数またはperlのコマンドラインスイッチのためにUTF-8モードになっている可能性があります。</target>
        </trans-unit>
        <trans-unit id="b6db4ade377c3bdb345b712f7106420996bb7261" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DB::OUT&lt;/code&gt; filehandle is opened to</source>
          <target state="translated">&lt;code&gt;DB::OUT&lt;/code&gt; ファイルハンドルを開放します</target>
        </trans-unit>
        <trans-unit id="3f0a37f63cf06fefd13078baff9b2ef8733fd16b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DB&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; packages are always omitted, as are any &quot;private&quot; packages that have leading underscores in the namespace (e.g. &lt;code&gt;Foo::_private&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;DB&lt;/code&gt; と &lt;code&gt;main&lt;/code&gt; パッケージはいつものように名前空間に先頭のアンダースコアを持っている任意の「プライベート」のパッケージがあり、省略されている（例えば &lt;code&gt;Foo::_private&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b7ced3778c80b0e6ddceec7627220df1317342e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DEBUG&lt;/code&gt; constant wipes the floor with even the &lt;code&gt;$debug&lt;/code&gt; variable, clocking in at minus zero seconds, and generates a &quot;warning: too few iterations for a reliable count&quot; message into the bargain. To see what is really going on, and why we had too few iterations when we thought we asked for 100000, we can use the very useful &lt;code&gt;B::Deparse&lt;/code&gt; to inspect the new code:</source>
          <target state="translated">&lt;code&gt;DEBUG&lt;/code&gt; の定数はさえで床を拭く &lt;code&gt;$debug&lt;/code&gt; マイナスでゼロ秒でクロッキング、変数、および生成：バーゲンへのメッセージ「警告信頼性の数はあまりにも数回の反復を」。実際に何が起こっているのか、および100000を要求したと思ったときに反復が少なすぎる理由を確認するには、非常に便利な &lt;code&gt;B::Deparse&lt;/code&gt; を使用して新しいコードを検査します。</target>
        </trans-unit>
        <trans-unit id="c9d4dcbece0076153dceb385297ea42930b3d2ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DOES&lt;/code&gt; method returns</source>
          <target state="translated">&lt;code&gt;DOES&lt;/code&gt; のメソッドが返します</target>
        </trans-unit>
        <trans-unit id="13b108bacf05fadc1d57d69518e2671634247ba4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Deparse&lt;/code&gt; flag makes Dump() run slower, since the XSUB implementation does not support it.</source>
          <target state="translated">&lt;code&gt;Deparse&lt;/code&gt; フラグは、ダンプ（）XSUB実装がそれをサポートしていないため、実行速度が遅くなります。</target>
        </trans-unit>
        <trans-unit id="1afec46de9e3c4185e7d2feb3396554e349575f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Devel::NYTProf&lt;/code&gt; and &lt;code&gt;Devel::FindAmpersand&lt;/code&gt; modules can help you find uses of these problematic match variables in your code.</source>
          <target state="translated">&lt;code&gt;Devel::NYTProf&lt;/code&gt; と &lt;code&gt;Devel::FindAmpersand&lt;/code&gt; モジュールは、あなたのコードでこれらの問題のマッチ変数の使用法を見つけるのを助けることができます。</target>
        </trans-unit>
        <trans-unit id="7a6b56d230ad8470a46e41fa3a6181ade20a4909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Devel::SmallProf&lt;/code&gt; profiler examines the runtime of your Perl program and produces a line-by-line listing to show how many times each line was called, and how long each line took to execute. It is called by supplying the familiar &lt;code&gt;-d&lt;/code&gt; flag to Perl at runtime.</source>
          <target state="translated">&lt;code&gt;Devel::SmallProf&lt;/code&gt; プロファイラは、あなたのPerlプログラムの実行時間を調べ、ライン・バイ・ラインの各ラインが呼び出された回数を表示するようにリストを生成し、どのくらいの各行は、実行するのにかかりました。これは、実行時におなじみの &lt;code&gt;-d&lt;/code&gt; フラグをPerlに提供することによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e3e899b88f5d9c103f9957a381fb75493e4ca219" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Devel&lt;/code&gt; namespace has several modules which you can use to profile your Perl programs.</source>
          <target state="translated">&lt;code&gt;Devel&lt;/code&gt; 名前空間には、あなたのPerlプログラムをプロファイルするために使用できるいくつかのモジュールがあります。</target>
        </trans-unit>
        <trans-unit id="f7b3b4bbb4e3a91049c3f2bf1c1599a52a4bab75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::&lt;/code&gt; interface is based on the interface originally developed by Neil Winton for his &lt;code&gt;MD5&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Digest::&lt;/code&gt; インターフェースは元々 、彼のためにニール・ウィントンによって開発されたインターフェイスに基づいて &lt;code&gt;MD5&lt;/code&gt; のモジュール。</target>
        </trans-unit>
        <trans-unit id="359f33360a7a83f14790bf4d659bef0945120eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::&lt;/code&gt; modules calculate digests, also called &quot;fingerprints&quot; or &quot;hashes&quot;, of some data, called a message. The digest is (usually) some small/fixed size string. The actual size of the digest depend of the algorithm used. The message is simply a sequence of arbitrary bytes or bits.</source>
          <target state="translated">&lt;code&gt;Digest::&lt;/code&gt; モジュールは、メッセージと呼ばれるいくつかのデータ、の、また「指紋」または「ハッシュ」と呼ばれるダイジェストを計算します。ダイジェストは（通常）小さい/固定サイズの文字列です。ダイジェストの実際のサイズは、使用するアルゴリズムによって異なります。メッセージは単に任意のバイトまたはビットのシーケンスです。</target>
        </trans-unit>
        <trans-unit id="5112b49f2609b19e911cd2f6a34cb7ffa7088cff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::MD5&lt;/code&gt; module allows you to use the RSA Data Security Inc. MD5 Message Digest algorithm from within Perl programs. The algorithm takes as input a message of arbitrary length and produces as output a 128-bit &quot;fingerprint&quot; or &quot;message digest&quot; of the input.</source>
          <target state="translated">&lt;code&gt;Digest::MD5&lt;/code&gt; モジュールを使用すると、Perlプログラム内からRSAデータセキュリティ社のMD5メッセージダイジェストアルゴリズムを使用することができます。このアルゴリズムは、任意の長さのメッセージを入力として受け取り、入力として128ビットの「フィンガープリント」または「メッセージダイジェスト」を出力として生成します。</target>
        </trans-unit>
        <trans-unit id="2adafeb0e9eb580775e9922353cdda9ed2fef18a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::MD5&lt;/code&gt; module is written by Gisle Aas &amp;lt;gisle@ActiveState.com&amp;gt;.</source>
          <target state="translated">&lt;code&gt;Digest::MD5&lt;/code&gt; モジュールはGisle Aasの&amp;lt;gisle@ActiveState.com&amp;gt;によって書かれています。</target>
        </trans-unit>
        <trans-unit id="048cfda097524929fcf424f6794f7c010276767b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::MD5&lt;/code&gt; module provide a procedural interface for simple use, as well as an object oriented interface that can handle messages of arbitrary length and which can read files directly.</source>
          <target state="translated">&lt;code&gt;Digest::MD5&lt;/code&gt; 、単純な使用のための手続きインタフェースだけでなく、直接ファイルを読み込むことができ、任意の長さとのメッセージを処理することができ、オブジェクト指向のインターフェイスを提供モジュール。</target>
        </trans-unit>
        <trans-unit id="417545c4adfbc434083e36d20bccbfb0f99aa98e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::base&lt;/code&gt; class provide implementations of the methods &lt;code&gt;addfile&lt;/code&gt; and &lt;code&gt;add_bits&lt;/code&gt; in terms of &lt;code&gt;add&lt;/code&gt; , and of the methods &lt;code&gt;hexdigest&lt;/code&gt; and &lt;code&gt;b64digest&lt;/code&gt; in terms of &lt;code&gt;digest&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Digest::base&lt;/code&gt; クラスは、メソッドの実装を提供 &lt;code&gt;addfile&lt;/code&gt; と &lt;code&gt;add_bits&lt;/code&gt; をするという点で &lt;code&gt;add&lt;/code&gt; 、およびメソッドの &lt;code&gt;hexdigest&lt;/code&gt; と &lt;code&gt;b64digest&lt;/code&gt; の面で &lt;code&gt;digest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c6996a284acc9e86940a92ab690a3ac4f18b4dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Digest::base&lt;/code&gt; class provide implementations of the methods &lt;code&gt;addfile&lt;/code&gt; and &lt;code&gt;add_bits&lt;/code&gt; in terms of &lt;code&gt;add&lt;/code&gt;, and of the methods &lt;code&gt;hexdigest&lt;/code&gt; and &lt;code&gt;b64digest&lt;/code&gt; in terms of &lt;code&gt;digest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Digest::base&lt;/code&gt; クラスは、メソッドの実装を提供 &lt;code&gt;addfile&lt;/code&gt; と &lt;code&gt;add_bits&lt;/code&gt; をするという点で &lt;code&gt;add&lt;/code&gt; 、およびメソッドの &lt;code&gt;hexdigest&lt;/code&gt; と &lt;code&gt;b64digest&lt;/code&gt; の面で &lt;code&gt;digest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="628d5f24b15638f2c6ff193717192cc425ae4155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DirHandle&lt;/code&gt; method provide an alternative interface to the opendir(), closedir(), readdir(), and rewinddir() functions.</source>
          <target state="translated">&lt;code&gt;DirHandle&lt;/code&gt; 方法はopendir関数（）、closedirの（）、READDIR（）、及びrewinddir（）関数の代替のインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="358ca39e53232388840862f052183678f86697cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dump()&lt;/code&gt; function takes one or two arguments: something to dump, and an optional limit for recursion and array elements (default is 4). The first argument is evaluted in rvalue scalar context, with exceptions for @array and %hash, which dump the array or hash itself. So &lt;code&gt;Dump @array&lt;/code&gt; works, as does &lt;code&gt;Dump $foo&lt;/code&gt; . And &lt;code&gt;Dump &lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; will call &lt;code&gt;&lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; in rvalue context, whereas &lt;code&gt;Dump ${\&lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;}&lt;/code&gt; will call it in lvalue context.</source>
          <target state="translated">&lt;code&gt;Dump()&lt;/code&gt; ダンプに何か、と再帰と配列の要素のためのオプションの制限（デフォルトは4です）：関数は、1つのまたは2つの引数を取ります。最初の引数は、配列またはハッシュ自体をダンプする@arrayおよび％hashを除いて、右辺値スカラーコンテキストで評価されます。したがって、 &lt;code&gt;Dump @array&lt;/code&gt; は &lt;code&gt;Dump $foo&lt;/code&gt; と同様に機能します。そして、 &lt;code&gt;Dump &lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; 呼ぶ &lt;code&gt;&lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; 一方、右辺値コンテキストで &lt;code&gt;Dump ${\&lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;}&lt;/code&gt; 左辺値コンテキストでそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="a13938ff22176b323e1b3258e2271152d9209b89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dump()&lt;/code&gt; function takes one or two arguments: something to dump, and an optional limit for recursion and array elements (default is 4). The first argument is evaluted in rvalue scalar context, with exceptions for @array and %hash, which dump the array or hash itself. So &lt;code&gt;Dump @array&lt;/code&gt; works, as does &lt;code&gt;Dump $foo&lt;/code&gt;. And &lt;code&gt;Dump pos&lt;/code&gt; will call &lt;code&gt;pos&lt;/code&gt; in rvalue context, whereas &lt;code&gt;Dump ${\pos}&lt;/code&gt; will call it in lvalue context.</source>
          <target state="translated">&lt;code&gt;Dump()&lt;/code&gt; ダンプに何か、と再帰と配列の要素のためのオプションの制限（デフォルトは4です）：関数は、1つのまたは2つの引数を取ります。最初の引数は、配列またはハッシュ自体をダンプする@arrayと％hashを除いて、右辺値スカラーコンテキストで評価されます。したがって、 &lt;code&gt;Dump @array&lt;/code&gt; は、 &lt;code&gt;Dump $foo&lt;/code&gt; と同様に機能します。そして、 &lt;code&gt;Dump pos&lt;/code&gt; 呼ぶ &lt;code&gt;pos&lt;/code&gt; 一方、右辺値コンテキストで &lt;code&gt;Dump ${\pos}&lt;/code&gt; 左辺値コンテキストでそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="cdbf79b7555598c068ba8d9743bee2fb95392923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dump()&lt;/code&gt; function, by default, dumps up to 4 elements from a toplevel array or hash. This number can be increased by supplying a second argument to the function.</source>
          <target state="translated">&lt;code&gt;Dump()&lt;/code&gt; 関数は、デフォルトで、最上位の配列またはハッシュから最大4つの要素をダンプします。この数は、関数に2番目の引数を指定することで増やすことができます。</target>
        </trans-unit>
        <trans-unit id="c95778d99c76e8e03e061209f2b6b5768436be5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;END&lt;/code&gt; block isn't called when untrapped signals kill the program, though, so if you use &lt;code&gt;END&lt;/code&gt; blocks you should also use</source>
          <target state="translated">&lt;code&gt;END&lt;/code&gt; のトラップされない信号は、あなたが使用している場合ので、かかわらず、プログラムを殺したときにブロックが呼び出されない &lt;code&gt;END&lt;/code&gt; のブロックを使用すると、使用もすべき</target>
        </trans-unit>
        <trans-unit id="f434d74067f98a36c01cbe9c20f7d7cf7b02ed54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EXPR&lt;/code&gt; following the modifier is referred to as the &quot;condition&quot;. Its truth or falsehood determines how the modifier will behave.</source>
          <target state="translated">&lt;code&gt;EXPR&lt;/code&gt; 修飾子以下は、「条件」と呼ばれています。その真偽によって、モディファイアの動作が決まります。</target>
        </trans-unit>
        <trans-unit id="0be035a23dc6f5f75a5bb7fdc10fe00056028240" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encode&lt;/code&gt; module knows about many encodings and has interfaces for doing conversions between those encodings:</source>
          <target state="translated">&lt;code&gt;Encode&lt;/code&gt; モジュールは、多くのエンコーディングを知っていて、それらの符号化方式との間の変換を行うためのインタフェースを持っています：</target>
        </trans-unit>
        <trans-unit id="5cdf933f51543c5ce4713919bd68bbd3f797378f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encode&lt;/code&gt; module provides the interface between Perl strings and the rest of the system. Perl strings are sequences of</source>
          <target state="translated">&lt;code&gt;Encode&lt;/code&gt; モジュールは、Perl文字列とシステムの残りの部分との間のインタフェースを提供します。Perl文字列はシーケンスです</target>
        </trans-unit>
        <trans-unit id="4968644a1dddd78111692e0824f91d81d4b5fde6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Env::import()&lt;/code&gt; function ties environment variables with suitable names to global Perl variables with the same names. By default it ties all existing environment variables (&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt; %ENV&lt;/code&gt; ) to scalars. If the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; function receives arguments, it takes them to be a list of variables to tie; it's okay if they don't yet exist. The scalar type prefix '$' is inferred for any element of this list not prefixed by '$' or '@'. Arrays are implemented in terms of &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;$Config::Config{path_sep}&lt;/code&gt; as the delimiter.</source>
          <target state="translated">&lt;code&gt;Env::import()&lt;/code&gt; と同じ名前のグローバル変数はPerlに適した名前を持つ関数の絆の環境変数。デフォルトでは、既存のすべての環境変数（ &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt; %ENV&lt;/code&gt; ）をスカラーに関連付けます。 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 関数が引数を受け取った場合、それらは結合する変数のリストであると見なします。それらがまだ存在しなくても大丈夫です。スカラー型の接頭辞「$」は、「$」または「@」の接頭辞が付いていないこのリストの要素に対して推定されます。配列は、 &lt;code&gt;$Config::Config{path_sep}&lt;/code&gt; を区切り文字として使用して、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; の観点から実装されます。</target>
        </trans-unit>
        <trans-unit id="5d5e15ad1a58fa2627594efcd21d9bd55ca58029" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Env::import()&lt;/code&gt; function ties environment variables with suitable names to global Perl variables with the same names. By default it ties all existing environment variables (&lt;code&gt;keys %ENV&lt;/code&gt;) to scalars. If the &lt;code&gt;import&lt;/code&gt; function receives arguments, it takes them to be a list of variables to tie; it's okay if they don't yet exist. The scalar type prefix '$' is inferred for any element of this list not prefixed by '$' or '@'. Arrays are implemented in terms of &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;, using &lt;code&gt;$Config::Config{path_sep}&lt;/code&gt; as the delimiter.</source>
          <target state="translated">&lt;code&gt;Env::import()&lt;/code&gt; と同じ名前のグローバル変数はPerlに適した名前を持つ関数の絆の環境変数。デフォルトでは、既存のすべての環境変数（ &lt;code&gt;keys %ENV&lt;/code&gt; ）をスカラーに関連付けます。 &lt;code&gt;import&lt;/code&gt; 関数が引数を受け取った場合、それらは結合する変数のリストである必要があります。それらがまだ存在していなくても大丈夫です。スカラー型の接頭辞「$」は、接頭辞「$」または「@」が付いていないこのリストの要素に対して推測されます。配列は、区切り文字として &lt;code&gt;$Config::Config{path_sep}&lt;/code&gt; を使用して、 &lt;code&gt;split&lt;/code&gt; と &lt;code&gt;join&lt;/code&gt; 観点から実装されます。</target>
        </trans-unit>
        <trans-unit id="2cb5e18a95e482684c2bead13158da2042ed8e01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="04fe8159aef76b700007013f5b9be387367b2a84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraFieldLocal&lt;/code&gt; option is used to store additional metadata in the local header for the zip file/buffer. The &lt;code&gt;ExtraFieldCentral&lt;/code&gt; does the same for the matching central header.</source>
          <target state="translated">&lt;code&gt;ExtraFieldLocal&lt;/code&gt; オプションは、zipファイル/バッファのローカルヘッダに追加のメタデータを格納するために使用されます。 &lt;code&gt;ExtraFieldCentral&lt;/code&gt; は一致中央ヘッダの同じこと。</target>
        </trans-unit>
        <trans-unit id="7dceaf4fc99f40b45472fc6396adb3cf093b19ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FREETMPS&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; pair will get rid of any values returned by the Perl subroutine (see next example), plus it will also dump the mortal SVs we have created. Having &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;SAVETMPS&lt;/code&gt; at the beginning of the code makes sure that no other mortals are destroyed.</source>
          <target state="translated">&lt;code&gt;FREETMPS&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; のペアはPerlサブルーチン（次の例を参照）によって返された値を取り除くだろう、プラスそれはまた、我々が作成した死を免れなSVをダンプします。持っ &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;SAVETMPS&lt;/code&gt; のコードの先頭にしても、他の人間が破壊されていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="140fe01c0b7ba42e4663eeef8254f0e842ecf849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FREETMPS&lt;/code&gt;/&lt;code&gt;LEAVE&lt;/code&gt; pair will get rid of any values returned by the Perl subroutine (see next example), plus it will also dump the mortal SVs we have created. Having &lt;code&gt;ENTER&lt;/code&gt;/&lt;code&gt;SAVETMPS&lt;/code&gt; at the beginning of the code makes sure that no other mortals are destroyed.</source>
          <target state="translated">&lt;code&gt;FREETMPS&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; のペアはPerlサブルーチン（次の例を参照）によって返された値を取り除くだろう、プラスそれはまた、我々が作成した死を免れなSVをダンプします。持っ &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;SAVETMPS&lt;/code&gt; のコードの先頭にしても、他の人間が破壊されていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="a6ea08916fc715ad11c85a7aa69540693ba076ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FREEZE&lt;/code&gt; method can return any number of values (i.e. zero or more). These values and the paclkage/classname of the object will then be encoded as a tagged JSON value in the following format:</source>
          <target state="translated">&lt;code&gt;FREEZE&lt;/code&gt; の方法は、値（すなわち、ゼロまたはそれ以上）の任意の数を返すことができます。これらの値とオブジェクトのパッケージ/クラス名は、次の形式でタグ付きJSON値としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="577b209cddb0e754330f4709ee24d502c593af10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;G_RETHROW&lt;/code&gt; flag can be used if you only need eval_sv() to execute code specified by a string, but not catch any errors.</source>
          <target state="translated">&lt;code&gt;G_RETHROW&lt;/code&gt; のあなただけeval_sv（）文字列で指定されたコードを実行しますが、すべてのエラーをキャッチしないようにする必要がある場合にフラグを使用することができます。</target>
        </trans-unit>
        <trans-unit id="94e4c30b0dc82b24659a532f35106fc4afecb721" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Host&lt;/code&gt; header is generated from the URL in accordance with RFC 2616. It is a fatal error to specify &lt;code&gt;Host&lt;/code&gt; in the &lt;code&gt;headers&lt;/code&gt; option. Other headers may be ignored or overwritten if necessary for transport compliance.</source>
          <target state="translated">&lt;code&gt;Host&lt;/code&gt; ヘッダーは、指定する致命的なエラーであるRFC 2616に従ったURLから生成された &lt;code&gt;Host&lt;/code&gt; では &lt;code&gt;headers&lt;/code&gt; オプションを選択します。トランスポートコンプライアンスのために必要な場合、他のヘッダーは無視または上書きされる場合があります。</target>
        </trans-unit>
        <trans-unit id="e1e824605b84cee8c0b954423f3ab5ef2eb2758b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IN&lt;/code&gt; /&lt;code&gt;OUTLIST&lt;/code&gt; /&lt;code&gt;IN_OUTLIST&lt;/code&gt; /&lt;code&gt;IN_OUT&lt;/code&gt; /&lt;code&gt;OUT&lt;/code&gt; keywords can be mixed with ANSI-style declarations, as in</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; / &lt;code&gt;OUTLIST&lt;/code&gt; / &lt;code&gt;IN_OUTLIST&lt;/code&gt; / &lt;code&gt;IN_OUT&lt;/code&gt; / &lt;code&gt;OUT&lt;/code&gt; のキーワードはのように、ANSI-スタイル宣言と混合することができます</target>
        </trans-unit>
        <trans-unit id="9f81634b914a660a9d16e3716c6017257055b0e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IN&lt;/code&gt;/&lt;code&gt;OUTLIST&lt;/code&gt;/&lt;code&gt;IN_OUTLIST&lt;/code&gt;/&lt;code&gt;IN_OUT&lt;/code&gt;/&lt;code&gt;OUT&lt;/code&gt; keywords can be mixed with ANSI-style declarations, as in</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; / &lt;code&gt;OUTLIST&lt;/code&gt; / &lt;code&gt;IN_OUTLIST&lt;/code&gt; / &lt;code&gt;IN_OUT&lt;/code&gt; / &lt;code&gt;OUT&lt;/code&gt; のキーワードはのように、ANSI-スタイル宣言と混合することができます</target>
        </trans-unit>
        <trans-unit id="2291d3950c0f7a1274711a429d0d47b0e9604c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INPUT&lt;/code&gt; and &lt;code&gt;OUTPUT&lt;/code&gt; sections have identical formats, that is, each unindented line starts a new in- or output map respectively. A new in- or output map must start with the name of the XS type to map on a line by itself, followed by the code that implements it indented on the following lines. Example:</source>
          <target state="translated">&lt;code&gt;INPUT&lt;/code&gt; と &lt;code&gt;OUTPUT&lt;/code&gt; セクションであることを、同じフォーマットを有する、それぞれ、インデントラインは、それぞれの新しいインまたは出力マップを開始します。新しい入力マップまたは出力マップは、それ自体が行にマップするXSタイプの名前で始まり、その後に次の行でインデントされてそれを実装するコードが続く必要があります。例：</target>
        </trans-unit>
        <trans-unit id="0839ebfa51c8f90f143d226a6a7f33a7ff311878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INT2PTR&lt;/code&gt; macro (defined in perl.h) casts an integer to a pointer of a given type, taking care of the possible different size of integers and pointers. There are also &lt;code&gt;PTR2IV&lt;/code&gt; , &lt;code&gt;PTR2UV&lt;/code&gt; , &lt;code&gt;PTR2NV&lt;/code&gt; macros, to map the other way, which may be useful in OUTPUT sections.</source>
          <target state="translated">&lt;code&gt;INT2PTR&lt;/code&gt; の（perl.hで定義された）マクロは整数とポインタの可能な異なるサイズの世話をして、指定されたタイプのポインタに整数をキャスト。 &lt;code&gt;PTR2IV&lt;/code&gt; 、 &lt;code&gt;PTR2UV&lt;/code&gt; 、 &lt;code&gt;PTR2NV&lt;/code&gt; マクロもあり、他の方法でマップするため、OUTPUTセクションで役立ちます。</target>
        </trans-unit>
        <trans-unit id="8dee4e81117d0288fc40b8cb09d886277f261bfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INT2PTR&lt;/code&gt; macro (defined in perl.h) casts an integer to a pointer of a given type, taking care of the possible different size of integers and pointers. There are also &lt;code&gt;PTR2IV&lt;/code&gt;, &lt;code&gt;PTR2UV&lt;/code&gt;, &lt;code&gt;PTR2NV&lt;/code&gt; macros, to map the other way, which may be useful in OUTPUT sections.</source>
          <target state="translated">&lt;code&gt;INT2PTR&lt;/code&gt; の（perl.hで定義された）マクロは整数とポインタの可能な異なるサイズの世話をして、指定されたタイプのポインタに整数をキャスト。他の方法でマップするための &lt;code&gt;PTR2IV&lt;/code&gt; 、 &lt;code&gt;PTR2UV&lt;/code&gt; 、 &lt;code&gt;PTR2NV&lt;/code&gt; マクロもあり、これはOUTPUTセクションで役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="7466a438605e61935ae6328f4fe2d9214ef781c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IN_OUT&lt;/code&gt; parameters are identical with parameters introduced with &lt;a href=&quot;#The-%26-Unary-Operator&quot;&gt;&quot;The &amp;amp; Unary Operator&quot;&lt;/a&gt; and put into the &lt;code&gt;OUTPUT:&lt;/code&gt; section (see &lt;a href=&quot;#The-OUTPUT%3A-Keyword&quot;&gt;&quot;The OUTPUT: Keyword&quot;&lt;/a&gt;). The &lt;code&gt;IN_OUTLIST&lt;/code&gt; parameters are very similar, the only difference being that the value C function writes through the pointer would not modify the Perl parameter, but is put in the output list.</source>
          <target state="translated">&lt;code&gt;IN_OUT&lt;/code&gt; のパラメータはで導入パラメータと同一である&lt;a href=&quot;#The-%26-Unary-Operator&quot;&gt;「＆単項演算子」&lt;/a&gt;とに入れ &lt;code&gt;OUTPUT:&lt;/code&gt; セクション（参照&lt;a href=&quot;#The-OUTPUT%3A-Keyword&quot;&gt;「OUTPUT：キーワード」&lt;/a&gt;）。 &lt;code&gt;IN_OUTLIST&lt;/code&gt; のパラメータは、ポインタによる値C関数書き込みはPerlのパラメータを変更していないだろうが、出力リストに入れていることを唯一の違いは非常に似ています。</target>
        </trans-unit>
        <trans-unit id="61f85903ef5f9040c0ff99931c044e8d15426a65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IN_OUT&lt;/code&gt; parameters are identical with parameters introduced with &lt;a href=&quot;#The-%26-Unary-Operator&quot;&gt;The &amp;amp; Unary Operator&lt;/a&gt; and put into the &lt;code&gt;OUTPUT:&lt;/code&gt; section (see &lt;a href=&quot;#The-OUTPUT%3a-Keyword&quot;&gt;The OUTPUT: Keyword&lt;/a&gt;). The &lt;code&gt;IN_OUTLIST&lt;/code&gt; parameters are very similar, the only difference being that the value C function writes through the pointer would not modify the Perl parameter, but is put in the output list.</source>
          <target state="translated">&lt;code&gt;IN_OUT&lt;/code&gt; のパラメータはで導入パラメータと同一である&lt;a href=&quot;#The-%26-Unary-Operator&quot;&gt;と単項演算子&lt;/a&gt;とに入れ &lt;code&gt;OUTPUT:&lt;/code&gt; セクション（参照&lt;a href=&quot;#The-OUTPUT%3a-Keyword&quot;&gt;OUTPUT：キーワード&lt;/a&gt;）。 &lt;code&gt;IN_OUTLIST&lt;/code&gt; のパラメータは、ポインタによる値C関数書き込みはPerlのパラメータを変更していないだろうが、出力リストに入れていることを唯一の違いは非常に似ています。</target>
        </trans-unit>
        <trans-unit id="e01d4a34408ea1bec61899bb0715159c8fcfc543" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IO::Dir&lt;/code&gt; package provides two interfaces to perl's directory reading routines.</source>
          <target state="translated">&lt;code&gt;IO::Dir&lt;/code&gt; パッケージは、perlのディレクトリの読み取りルーチンには、2つのインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="2e8c3db24464dee992cbd4fb5389ee4e7af6c03b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IO::Select&lt;/code&gt; package implements an object approach to the system &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; function call. It allows the user to see what IO handles, see &lt;a href=&quot;handle&quot;&gt;IO::Handle&lt;/a&gt;, are ready for reading, writing or have an exception pending.</source>
          <target state="translated">&lt;code&gt;IO::Select&lt;/code&gt; たパッケージには、システムへのオブジェクトのアプローチを実装 &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 関数呼び出しを。これにより、ユーザーはどのIOハンドルを参照するか、&lt;a href=&quot;handle&quot;&gt;IO :: Handle&lt;/a&gt;を参照するか、読み取り、書き込みの準備ができているか、または例外を保留することができます。</target>
        </trans-unit>
        <trans-unit id="d4a23c694ba8531eb134632f2092cafc7861a78d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IO::Select&lt;/code&gt; package implements an object approach to the system &lt;code&gt;select&lt;/code&gt; function call. It allows the user to see what IO handles, see &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;, are ready for reading, writing or have an exception pending.</source>
          <target state="translated">&lt;code&gt;IO::Select&lt;/code&gt; たパッケージには、システムへのオブジェクトのアプローチを実装 &lt;code&gt;select&lt;/code&gt; 関数呼び出しを。これにより、ユーザーは、IOが処理するもの、&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照、読み取り、書き込みの準備ができているか、または保留中の例外があるかを確認できます。</target>
        </trans-unit>
        <trans-unit id="b5b99267c0bd0ea1d7a95c4de6c3170224a12616" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IVdf&lt;/code&gt; will expand to whatever is the correct format for the IVs. Note that the spaces are required around the format in case the code is compiled with C++, to maintain compliance with its standard.</source>
          <target state="translated">&lt;code&gt;IVdf&lt;/code&gt; はIVをの正しい形式は何でもに拡大していきます。コードがC ++でコンパイルされる場合、標準への準拠を維持するために、フォーマットの周囲にスペースが必要であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="93e9868cf44653a0a473010fe2cd91001e0a676d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Interpolation&lt;/code&gt; module can also do a lot of magic for you. You can specify a variable name, in this case &lt;code&gt;E&lt;/code&gt; , to set up a tied hash that does the interpolation for you. It has several other methods to do this as well.</source>
          <target state="translated">&lt;code&gt;Interpolation&lt;/code&gt; モジュールはまたあなたのための魔法の多くを行うことができます。変数名（この場合は &lt;code&gt;E&lt;/code&gt; ）を指定して、補間を実行する結合ハッシュを設定できます。これを行うための方法は他にもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="329ab637f04429657f9fe6aaf5dca20594f33c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Interpolation&lt;/code&gt; module can also do a lot of magic for you. You can specify a variable name, in this case &lt;code&gt;E&lt;/code&gt;, to set up a tied hash that does the interpolation for you. It has several other methods to do this as well.</source>
          <target state="translated">&lt;code&gt;Interpolation&lt;/code&gt; モジュールはまたあなたのための魔法の多くを行うことができます。変数名（この場合は &lt;code&gt;E&lt;/code&gt; ）を指定して、補間を行うタイハッシュを設定できます。これを行うには、他にもいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="d3bc590cafc9b13c0e888463643b3750cf44fd73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LC_CTYPE&lt;/code&gt; locale also provides the map used in transliterating characters between lower and uppercase. This affects the case-mapping functions--&lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst()&lt;/a&gt;&lt;/code&gt;; case-mapping interpolation with &lt;code&gt;\F&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , or &lt;code&gt;\U&lt;/code&gt; in double-quoted strings and &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; substitutions; and case-independent regular expression pattern matching using the &lt;code&gt;i&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;LC_CTYPE&lt;/code&gt; のロケールも低いと大文字の間の文字を翻字に使用されるマップを提供します。これは、大文字と小文字をマッピングする関数 &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst()&lt;/a&gt;&lt;/code&gt; )に影響します。二重引用符で囲まれた文字列と &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 置換での &lt;code&gt;\F&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、または &lt;code&gt;\U&lt;/code&gt; した大文字小文字マッピングの補間。また、 &lt;code&gt;i&lt;/code&gt; 修飾子を使用した大文字と小文字を区別しない正規表現パターンマッチング。</target>
        </trans-unit>
        <trans-unit id="bc3c541f503e52e8ac4f6d3ffd90d52fc4128eb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LC_CTYPE&lt;/code&gt; locale also provides the map used in transliterating characters between lower and uppercase. This affects the case-mapping functions--&lt;code&gt;fc()&lt;/code&gt;, &lt;code&gt;lc()&lt;/code&gt;, &lt;code&gt;lcfirst()&lt;/code&gt;, &lt;code&gt;uc()&lt;/code&gt;, and &lt;code&gt;ucfirst()&lt;/code&gt;; case-mapping interpolation with &lt;code&gt;\F&lt;/code&gt;, &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt;, or &lt;code&gt;\U&lt;/code&gt; in double-quoted strings and &lt;code&gt;s///&lt;/code&gt; substitutions; and case-insensitive regular expression pattern matching using the &lt;code&gt;i&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;LC_CTYPE&lt;/code&gt; のロケールも低いと大文字の間の文字を翻字に使用されるマップを提供します。これは、ケースマッピングfunctions--影響 &lt;code&gt;fc()&lt;/code&gt; 、 &lt;code&gt;lc()&lt;/code&gt; 、 &lt;code&gt;lcfirst()&lt;/code&gt; 、 &lt;code&gt;uc()&lt;/code&gt; および &lt;code&gt;ucfirst()&lt;/code&gt; 。二重引用符で囲まれた文字列と &lt;code&gt;s///&lt;/code&gt; 置換で、 &lt;code&gt;\F&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、または &lt;code&gt;\U&lt;/code&gt; したケースマッピング補間。 &lt;code&gt;i&lt;/code&gt; 修飾子を使用した大文字と小文字を区別しない正規表現パターンマッチング。</target>
        </trans-unit>
        <trans-unit id="941219cd505be61ac26ba8728d69370c60e37046" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LC_NUMERIC&lt;/code&gt; controls the numeric output:</source>
          <target state="translated">&lt;code&gt;LC_NUMERIC&lt;/code&gt; は、数値出力を制御します。</target>
        </trans-unit>
        <trans-unit id="412121500ef04a2233556ed3ed8bb5c784494003" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LimitOutput&lt;/code&gt; option changes the behavior of the &lt;code&gt;$i-&amp;gt;bzinflate&lt;/code&gt; method so that the amount of memory used by the output buffer can be limited.</source>
          <target state="translated">&lt;code&gt;LimitOutput&lt;/code&gt; のオプションは、振舞いの変更 &lt;code&gt;$i-&amp;gt;bzinflate&lt;/code&gt; 出力バッファが使用するメモリの量を制限することができるようにする方法を。</target>
        </trans-unit>
        <trans-unit id="1b18a1d213993f63112fefb5d5804b6552cbf33b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LimitOutput&lt;/code&gt; option changes the behavior of the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method so that the amount of memory used by the output buffer can be limited.</source>
          <target state="translated">&lt;code&gt;LimitOutput&lt;/code&gt; のオプションは、振舞いの変更 &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 出力バッファが使用するメモリの量を制限することができるようにする方法を。</target>
        </trans-unit>
        <trans-unit id="3600b0d3775b442853dade84e908851ee6d60512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LimitOutput&lt;/code&gt; option is designed to help with this use-case.</source>
          <target state="translated">&lt;code&gt;LimitOutput&lt;/code&gt; のオプションは、このユースケースを支援するために設計されています。</target>
        </trans-unit>
        <trans-unit id="4e39cafde8d7c8f339d79044ffb14c41f2b59abf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Listen&lt;/code&gt; parameter is set to the maximum number of pending connections we can accept until we turn away incoming clients. Think of it as a call-waiting queue for your telephone. The low-level Socket module has a special symbol for the system maximum, which is SOMAXCONN.</source>
          <target state="translated">&lt;code&gt;Listen&lt;/code&gt; パラメータは、私たちは離れて、着信クライアントをオンにするまで、我々は受け入れることができ保留中の接続の最大数に設定されています。それはあなたの電話のためのキャッチホンのキューと考えてください。低レベルのソケットモジュールには、システムの最大値を表す特別な記号（SOMAXCONN）があります。</target>
        </trans-unit>
        <trans-unit id="39d8f8a92949aebb617dd074e69f347a559dd1fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale::Country&lt;/code&gt; module provides access to several code sets that can be used for identifying countries, such as those defined in ISO 3166-1.</source>
          <target state="translated">&lt;code&gt;Locale::Country&lt;/code&gt; モジュールは、ISO 3166-1に定義されたもののような国を識別するために使用することができるいくつかのコード・セットへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="7ce570b70dc3b1217c7829eb357747faae317306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale::Currency&lt;/code&gt; module provides access to standard codes used for identifying currencies and funds, such as those defined in ISO 4217.</source>
          <target state="translated">&lt;code&gt;Locale::Currency&lt;/code&gt; モジュールは、ISO 4217で定義されたもののような通貨と資金を識別するために使用される標準コードへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="e1ffcce2675347ee9e15ffb62b7a866fc9499f7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale::Language&lt;/code&gt; module provides access to standard codes used for identifying languages, such as those as defined in ISO 639.</source>
          <target state="translated">&lt;code&gt;Locale::Language&lt;/code&gt; モジュールは、ISO 639で定義されたようなもののような言語を識別するために使用される標準コードへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="aa76c519ff8997e91915d966da6aed9450ba1a90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale::Script&lt;/code&gt; module provides access to standards codes used for identifying scripts, such as those defined in ISO 15924.</source>
          <target state="translated">&lt;code&gt;Locale::Script&lt;/code&gt; モジュールは、ISO 15924で定義されているようなスクリプトを、識別するために使用される標準コードへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="e8120d017d19784f5ec18621659dfbf762367c0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MGVTBL&lt;/code&gt; has five (or sometimes eight) pointers to the following routine types:</source>
          <target state="translated">&lt;code&gt;MGVTBL&lt;/code&gt; は、以下のルーチンのタイプに5（時には8）のポインタがあります。</target>
        </trans-unit>
        <trans-unit id="cb0939f4e09d7100879a1f0cd7a45d518f685d85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math::Trig&lt;/code&gt; handles this by using the &lt;code&gt;Math::Complex&lt;/code&gt; package which knows how to handle complex numbers, please see &lt;a href=&quot;Math::Complex&quot;&gt;Math::Complex&lt;/a&gt; for more information. In practice you need not to worry about getting complex numbers as results because the &lt;code&gt;Math::Complex&lt;/code&gt; takes care of details like for example how to display complex numbers. For example:</source>
          <target state="translated">&lt;code&gt;Math::Trig&lt;/code&gt; 使用してこれを扱う &lt;code&gt;Math::Complex&lt;/code&gt; 複素数を扱う方法を知っているパッケージを参照してください&lt;a href=&quot;Math::Complex&quot;&gt;数学::複雑な&lt;/a&gt;詳細については。 &lt;code&gt;Math::Complex&lt;/code&gt; は、たとえば複素数の表示方法などの詳細を処理するため、実際には、結果として複素数を取得することを心配する必要はありません。例えば：</target>
        </trans-unit>
        <trans-unit id="62960d717ea2191ee6cb352f5b362492a57f4b7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math::Trig&lt;/code&gt; handles this by using the &lt;code&gt;Math::Complex&lt;/code&gt; package which knows how to handle complex numbers, please see &lt;a href=&quot;complex&quot;&gt;Math::Complex&lt;/a&gt; for more information. In practice you need not to worry about getting complex numbers as results because the &lt;code&gt;Math::Complex&lt;/code&gt; takes care of details like for example how to display complex numbers. For example:</source>
          <target state="translated">&lt;code&gt;Math::Trig&lt;/code&gt; 使用してこれを扱う &lt;code&gt;Math::Complex&lt;/code&gt; 複素数を扱う方法を知っているパッケージを参照してください&lt;a href=&quot;complex&quot;&gt;数学::複雑な&lt;/a&gt;詳細については。 &lt;code&gt;Math::Complex&lt;/code&gt; が複素数の表示方法などの詳細を処理するため、実際には結果として複素数を取得することについて心配する必要はありません。例えば：</target>
        </trans-unit>
        <trans-unit id="59d3e5116a50776a62b5e7307aca3591f0689480" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Moose&lt;/code&gt; authors hope that one day &lt;code&gt;Moo&lt;/code&gt; can be made obsolete by improving &lt;code&gt;Moose&lt;/code&gt; enough, but for now it provides a worthwhile alternative to &lt;code&gt;Moose&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; 著者は、1日のことを願ってい &lt;code&gt;Moo&lt;/code&gt; 改善することにより、時代遅れ行うことができ &lt;code&gt;Moose&lt;/code&gt; 十分な、しかし今のところは、に価値のある選択肢を提供 &lt;code&gt;Moose&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd61d23b6e3309b14f23bde3328a9b1cfdb75d47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Moose&lt;/code&gt; authors hope that one day &lt;code&gt;Moo&lt;/code&gt; can be made obsolete by improving &lt;code&gt;Moose&lt;/code&gt; enough, but for now it provides a worthwhile alternative to &lt;code&gt;Moose&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; 著者は、1日のことを願ってい &lt;code&gt;Moo&lt;/code&gt; 改善することにより、時代遅れ行うことができ &lt;code&gt;Moose&lt;/code&gt; 十分な、しかし今のところは、に価値のある選択肢を提供 &lt;code&gt;Moose&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc9a3a0a2d0497d18f72b7ad30f16ed602816e32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NEXT&lt;/code&gt; module adds a pseudoclass named &lt;code&gt;NEXT&lt;/code&gt; to any program that uses it. If a method &lt;code&gt;m&lt;/code&gt; calls &lt;code&gt;$self-&amp;gt;NEXT::m()&lt;/code&gt;, the call to &lt;code&gt;m&lt;/code&gt; is redispatched as if the calling method had not originally been found.</source>
          <target state="translated">&lt;code&gt;NEXT&lt;/code&gt; モジュールは、指定された疑似クラス追加 &lt;code&gt;NEXT&lt;/code&gt; を、それを使用するすべてのプログラムに。メソッド &lt;code&gt;m&lt;/code&gt; が &lt;code&gt;$self-&amp;gt;NEXT::m()&lt;/code&gt; を呼び出すと、 &lt;code&gt;m&lt;/code&gt; の呼び出しは、呼び出し元のメソッドが最初に見つからなかったかのように再ディスパッチされます。</target>
        </trans-unit>
        <trans-unit id="5cda22c66d7ae69cf0c1a687755ef0ea97e644b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NNTP&lt;/code&gt; protocol uses the &lt;code&gt;WILDMAT&lt;/code&gt; format for patterns. The WILDMAT format was first developed by Rich Salz based on the format used in the UNIX &quot;find&quot; command to articulate file names. It was developed to provide a uniform mechanism for matching patterns in the same manner that the UNIX shell matches filenames.</source>
          <target state="translated">&lt;code&gt;NNTP&lt;/code&gt; のプロトコルを使用し &lt;code&gt;WILDMAT&lt;/code&gt; のパターンの形式を。 WILDMAT形式は、ファイル名を明確にするためにUNIXの「find」コマンドで使用される形式に基づいて、Rich Salzによって最初に開発されました。これは、UNIXシェルがファイル名を照合するのと同じ方法でパターンを照合するための統一されたメカニズムを提供するために開発されました。</target>
        </trans-unit>
        <trans-unit id="8856a9c3b92894fbca75a7c6a84e03f49c7d82b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Net::FTP&lt;/code&gt; module provides two low-level methods called &lt;code&gt;stor&lt;/code&gt; and &lt;code&gt;retr&lt;/code&gt; that both return filehandles. These filehandles can used with the &lt;code&gt;IO::Compress/Uncompress&lt;/code&gt; modules to compress or uncompress files read from or written to an FTP Server on the fly, without having to create a temporary file.</source>
          <target state="translated">&lt;code&gt;Net::FTP&lt;/code&gt; モジュールと呼ばれる2つの低レベルのメソッドを提供 &lt;code&gt;stor&lt;/code&gt; および &lt;code&gt;retr&lt;/code&gt; 両方リターンファイルハンドルことを。これらのファイルハンドルを &lt;code&gt;IO::Compress/Uncompress&lt;/code&gt; モジュールで使用すると、一時ファイルを作成しなくても、FTPサーバーからの読み取りまたはFTPサーバーへの書き込みファイルをその場で圧縮または解凍できます。</target>
        </trans-unit>
        <trans-unit id="812543816e7e36906e0a41744e1b881bd6061a33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;O::import&lt;/code&gt; function loads the appropriate &lt;code&gt;B::Backend&lt;/code&gt; module and calls its &lt;code&gt;compile&lt;/code&gt; function, passing it OPTIONS. That function is expected to return a sub reference which we'll call CALLBACK. Next, the &quot;compile-only&quot; flag is switched on (equivalent to the command-line option &lt;code&gt;-c&lt;/code&gt; ) and a CHECK block is registered which calls CALLBACK. Thus the main Perl program mentioned on the command-line is read in, parsed and compiled into internal syntax tree form. Since the &lt;code&gt;-c&lt;/code&gt; flag is set, the program does not start running (excepting BEGIN blocks of course) but the CALLBACK function registered by the compiler backend is called.</source>
          <target state="translated">&lt;code&gt;O::import&lt;/code&gt; 機能ロード適切 &lt;code&gt;B::Backend&lt;/code&gt; モジュールとその呼び出し &lt;code&gt;compile&lt;/code&gt; それにオプションを渡し、関数。この関数は、CALLBACKと呼ぶサブ参照を返すことが期待されています。次に、「コンパイルのみ」フラグがオンになり（コマンドラインオプション &lt;code&gt;-c&lt;/code&gt; と同等）、CALLBACKを呼び出すCHECKブロックが登録されます。したがって、コマンドラインで言及されているメインのPerlプログラムが読み込まれ、解析されて、内部構文ツリー形式にコンパイルされます。以来 &lt;code&gt;-c&lt;/code&gt; フラグがセットされ、プログラムは（当然のブロックをBEGIN除く）に実行を開始しませんが、コンパイラのバックエンドで登録したコールバック関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d7e78f61b2ef3885efb7f8bb2d5b2723a7d2f5bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;O::import&lt;/code&gt; function loads the appropriate &lt;code&gt;B::Backend&lt;/code&gt; module and calls its &lt;code&gt;compile&lt;/code&gt; function, passing it OPTIONS. That function is expected to return a sub reference which we'll call CALLBACK. Next, the &quot;compile-only&quot; flag is switched on (equivalent to the command-line option &lt;code&gt;-c&lt;/code&gt;) and a CHECK block is registered which calls CALLBACK. Thus the main Perl program mentioned on the command-line is read in, parsed and compiled into internal syntax tree form. Since the &lt;code&gt;-c&lt;/code&gt; flag is set, the program does not start running (excepting BEGIN blocks of course) but the CALLBACK function registered by the compiler backend is called.</source>
          <target state="translated">&lt;code&gt;O::import&lt;/code&gt; 機能ロード適切 &lt;code&gt;B::Backend&lt;/code&gt; モジュールとその呼び出し &lt;code&gt;compile&lt;/code&gt; それにオプションを渡し、関数。この関数は、CALLBACKと呼ばれるサブ参照を返すことが期待されています。次に、「コンパイル専用」フラグがオンになり（コマンドラインオプション &lt;code&gt;-c&lt;/code&gt; と同等）、CALLBACKを呼び出すCHECKブロックが登録されます。したがって、コマンドラインで言及されているメインのPerlプログラムが読み込まれ、解析されて、内部構文ツリー形式にコンパイルされます。以来 &lt;code&gt;-c&lt;/code&gt; フラグがセットされ、プログラムは（当然のブロックをBEGIN除く）に実行を開始しませんが、コンパイラのバックエンドで登録したコールバック関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3d373b71890ff94863d227c7cfce5d1d697b7746" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OP *&lt;/code&gt; is op_free()ed at the end of</source>
          <target state="translated">&lt;code&gt;OP *&lt;/code&gt; の最後にあるop_free（）編</target>
        </trans-unit>
        <trans-unit id="998cf5d3020bb78a9ba1d3cad328d90e354a7767" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OUTLIST&lt;/code&gt; /&lt;code&gt;OUT&lt;/code&gt; parameter differ from &lt;code&gt;IN_OUTLIST&lt;/code&gt; /&lt;code&gt;IN_OUT&lt;/code&gt; parameters only by the initial value of the Perl parameter not being read (and not being given to the C function - which gets some garbage instead). For example, the same C function as above can be interfaced with as</source>
          <target state="translated">&lt;code&gt;OUTLIST&lt;/code&gt; / &lt;code&gt;OUT&lt;/code&gt; 異なるパラメータ &lt;code&gt;IN_OUTLIST&lt;/code&gt; / &lt;code&gt;IN_OUT&lt;/code&gt; の唯一ではないが読み取られるPerlのパラメータの初期値でパラメータが（ -いくつかのごみ代わりを取得し、C関数に与えられていません）。たとえば、上記と同じC関数をasとインターフェイスさせることができます。</target>
        </trans-unit>
        <trans-unit id="77d530437d7fdd465ebf5f4d28d1ba3ab2ce9989" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OUTLIST&lt;/code&gt;/&lt;code&gt;OUT&lt;/code&gt; parameter differ from &lt;code&gt;IN_OUTLIST&lt;/code&gt;/&lt;code&gt;IN_OUT&lt;/code&gt; parameters only by the initial value of the Perl parameter not being read (and not being given to the C function - which gets some garbage instead). For example, the same C function as above can be interfaced with as</source>
          <target state="translated">&lt;code&gt;OUTLIST&lt;/code&gt; / &lt;code&gt;OUT&lt;/code&gt; 異なるパラメータ &lt;code&gt;IN_OUTLIST&lt;/code&gt; / &lt;code&gt;IN_OUT&lt;/code&gt; の唯一ではないが読み取られるPerlのパラメータの初期値でパラメータが（ -いくつかのごみ代わりを取得し、C関数に与えられていません）。たとえば、上記と同じC関数を次のようにインターフェースできます。</target>
        </trans-unit>
        <trans-unit id="0628c399d26c3378a27108a14e1ac2344b8aefb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Open()&lt;/code&gt; method has lots of arguments because it combines the functions of perl's &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;PerlIO_open&lt;/code&gt; , perl's &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;PerlIO_fdopen&lt;/code&gt; and &lt;code&gt;PerlIO_reopen&lt;/code&gt; . The full prototype is as follows:</source>
          <target state="translated">&lt;code&gt;Open()&lt;/code&gt; 、それはPerlのの機能を兼ね備えているための方法は、引数がたくさんある &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;PerlIO_open&lt;/code&gt; 、perlの &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; で、 &lt;code&gt;PerlIO_fdopen&lt;/code&gt; と &lt;code&gt;PerlIO_reopen&lt;/code&gt; を。完全なプロトタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a364ca34d8039b509a216c6b70daa6a333bd164c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Open()&lt;/code&gt; method has lots of arguments because it combines the functions of perl's &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;PerlIO_open&lt;/code&gt;, perl's &lt;code&gt;sysopen&lt;/code&gt;, &lt;code&gt;PerlIO_fdopen&lt;/code&gt; and &lt;code&gt;PerlIO_reopen&lt;/code&gt;. The full prototype is as follows:</source>
          <target state="translated">&lt;code&gt;Open()&lt;/code&gt; 、それはPerlのの機能を兼ね備えているための方法は、引数がたくさんある &lt;code&gt;open&lt;/code&gt; 、 &lt;code&gt;PerlIO_open&lt;/code&gt; 、perlの &lt;code&gt;sysopen&lt;/code&gt; で、 &lt;code&gt;PerlIO_fdopen&lt;/code&gt; と &lt;code&gt;PerlIO_reopen&lt;/code&gt; を。完全なプロトタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9b50db457121e66e0a351ce78b3a957dc8ab0fb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PERL5DB&lt;/code&gt; environment variable can be used to define a debugger. For example, the minimal &quot;working&quot; debugger (it actually doesn't do anything) consists of one line:</source>
          <target state="translated">&lt;code&gt;PERL5DB&lt;/code&gt; の環境変数は、デバッガを定義するために使用することができます。たとえば、最小限の「機能する」デバッガー（実際には何もしない）は、1行で構成されます。</target>
        </trans-unit>
        <trans-unit id="d2bc99a442d5c0b29501891792cdc1fff80da05a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PERL_MAGIC_ext&lt;/code&gt; and &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; magic types are defined specifically for use by extensions and will not be used by perl itself. Extensions can use &lt;code&gt;PERL_MAGIC_ext&lt;/code&gt; magic to 'attach' private information to variables (typically objects). This is especially useful because there is no way for normal perl code to corrupt this private information (unlike using extra elements of a hash object).</source>
          <target state="translated">&lt;code&gt;PERL_MAGIC_ext&lt;/code&gt; と &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 魔法の種類は拡張子で使用するために特別に定義されており、Perl自身によって使用されることはありません。拡張機能は &lt;code&gt;PERL_MAGIC_ext&lt;/code&gt; マジックを使用して、プライベート情報を変数（通常はオブジェクト）に「アタッチ」できます。通常のperlコードがこのプライベート情報を破壊する方法はないので（ハッシュオブジェクトの追加の要素を使用する場合とは異なり）、これは特に便利です。</target>
        </trans-unit>
        <trans-unit id="8a6e94721b04748465ec2688a94fd6f249730156" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; interface for hashes</source>
          <target state="translated">ハッシュ用の &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; インターフェース</target>
        </trans-unit>
        <trans-unit id="bda510e29f461a0c3d4c9c5037a48e14d8e62436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PERL_SCAN_DISALLOW_PREFIX&lt;/code&gt; flag is always treated as being set for this function.</source>
          <target state="translated">&lt;code&gt;PERL_SCAN_DISALLOW_PREFIX&lt;/code&gt; のフラグは常に、この機能のために設定されているものとして扱われます。</target>
        </trans-unit>
        <trans-unit id="ebc956792cc9e74cf6710a9899c98dc65f9e9723" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POPi&lt;/code&gt; macro is used here to pop the return value from the stack. In this case we wanted an integer, so &lt;code&gt;POPi&lt;/code&gt; was used.</source>
          <target state="translated">ここでは、 &lt;code&gt;POPi&lt;/code&gt; マクロを使用して、スタックから戻り値をポップします。この場合は整数が必要なので、 &lt;code&gt;POPi&lt;/code&gt; を使用しました。</target>
        </trans-unit>
        <trans-unit id="441004a0b6f6f50d94cdd26e8efdb4418e11d7d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POSIX::getattr&lt;/code&gt; function can do this more portably on systems purporting POSIX compliance. See also the &lt;code&gt;Term::ReadKey&lt;/code&gt; module from your nearest &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org&quot;&gt;CPAN&lt;/a&gt; site.</source>
          <target state="translated">&lt;code&gt;POSIX::getattr&lt;/code&gt; 機能は、POSIX準拠を主張するシステムでより多くの移植性これを行うことができます。最寄りの&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org&quot;&gt;CPAN&lt;/a&gt;サイトの &lt;code&gt;Term::ReadKey&lt;/code&gt; モジュールも参照してください。</target>
        </trans-unit>
        <trans-unit id="30a4c7c0312ad4ebafbfc4ecde82010a30e5b1d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POSIX::localeconv()&lt;/code&gt; function allows you to get particulars of the locale-dependent numeric formatting information specified by the current underlying &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_MONETARY&lt;/code&gt; locales (regardless of whether called from within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; or not). (If you just want the name of the current locale for a particular category, use &lt;code&gt;POSIX::setlocale()&lt;/code&gt; with a single parameter--see &lt;a href=&quot;#The-setlocale-function&quot;&gt;The setlocale function&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;POSIX::localeconv()&lt;/code&gt; 関数は、現在の基本となることにより、指定されたロケール依存の数値書式設定情報の詳細を取得することができます &lt;code&gt;LC_NUMERIC&lt;/code&gt; と &lt;code&gt;LC_MONETARY&lt;/code&gt; （関わらずの範囲内から呼び出さかどうかのロケールを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; またはしません）。（特定のカテゴリの現在のロケールの名前だけが必要な場合は、 &lt;code&gt;POSIX::setlocale()&lt;/code&gt; を1つのパラメータで&lt;a href=&quot;#The-setlocale-function&quot;&gt;使用します。setlocale関数を&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="2b43e9db384d2d0a57a2a9c77f122fdc5d00196d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POSIX::localeconv()&lt;/code&gt; function allows you to get particulars of the locale-dependent numeric formatting information specified by the current underlying &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_MONETARY&lt;/code&gt; locales (regardless of whether called from within the scope of &lt;code&gt;use locale&lt;/code&gt; or not). (If you just want the name of the current locale for a particular category, use &lt;code&gt;POSIX::setlocale()&lt;/code&gt; with a single parameter--see &lt;a href=&quot;#The-setlocale-function&quot;&gt;&quot;The setlocale function&quot;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;POSIX::localeconv()&lt;/code&gt; 関数は、現在の基本となることにより、指定されたロケール依存の数値書式設定情報の詳細を取得することができます &lt;code&gt;LC_NUMERIC&lt;/code&gt; と &lt;code&gt;LC_MONETARY&lt;/code&gt; （関わらずの範囲内から呼び出さかどうかのロケールを &lt;code&gt;use locale&lt;/code&gt; またはしません）。 （特定のカテゴリーの現在のロケールの名前だけが必要な場合は、単一のパラメーターを指定して &lt;code&gt;POSIX::setlocale()&lt;/code&gt; を&lt;a href=&quot;#The-setlocale-function&quot;&gt;使用して&lt;/a&gt;ください。「setlocale関数」を参照してください。）</target>
        </trans-unit>
        <trans-unit id="1f685f77eea7b515d4045c7a67182dbbc7755a25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUSHMARK&lt;/code&gt; macro tells Perl to make a mental note of the current stack pointer. Even if you aren't passing any parameters (like the example shown in the section</source>
          <target state="translated">&lt;code&gt;PUSHMARK&lt;/code&gt; のマクロは、現在のスタックポインタの精神的なメモを作るためにPerlを伝えます。パラメータを渡していない場合でも（セクションで示した例のように</target>
        </trans-unit>
        <trans-unit id="163850ef5b169ef12088a9930a0f3972d7c61a0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUSHMARK&lt;/code&gt; macro tells Perl to make a mental note of the current stack pointer. Even if you aren't passing any parameters (like the example shown in the section &lt;a href=&quot;#No-Parameters%2C-Nothing-Returned&quot;&gt;&quot;No Parameters, Nothing Returned&quot;&lt;/a&gt;) you must still call the &lt;code&gt;PUSHMARK&lt;/code&gt; macro before you can call any of the</source>
          <target state="translated">&lt;code&gt;PUSHMARK&lt;/code&gt; のマクロは、現在のスタックポインタの精神的なメモを作るためにPerlを伝えます。でも、あなたは（セクションに示す例のように任意のパラメータを渡していない場合は&lt;a href=&quot;#No-Parameters%2C-Nothing-Returned&quot;&gt;「いいえパラメータ、何も返さを」&lt;/a&gt;あなたはまだ呼び出す必要があります） &lt;code&gt;PUSHMARK&lt;/code&gt; のマクロを使用するには、のいずれかを呼び出すことができます前に、</target>
        </trans-unit>
        <trans-unit id="07465ad7c738ebeee81550400552ecd67a850bce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUTBACK&lt;/code&gt; macro sets the global copy of the stack pointer to be the same as our local copy. If we didn't do this,</source>
          <target state="translated">&lt;code&gt;PUTBACK&lt;/code&gt; のマクロは、スタックポインタのグローバルコピーは、私たちのローカルコピーと同じになるように設定します。これを行わなかった場合、</target>
        </trans-unit>
        <trans-unit id="8baae86fdb4cb4e701226e31c2071774be7ff5cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PeerAddr&lt;/code&gt; can be a hostname or the IP-address on the &quot;xx.xx.xx.xx&quot; form. The &lt;code&gt;PeerPort&lt;/code&gt; can be a number or a symbolic service name. The service name might be followed by a number in parenthesis which is used if the service is not known by the system. The &lt;code&gt;PeerPort&lt;/code&gt; specification can also be embedded in the &lt;code&gt;PeerAddr&lt;/code&gt; by preceding it with a &quot;:&quot;.</source>
          <target state="translated">&lt;code&gt;PeerAddr&lt;/code&gt; は「XX.XX.XX.XX」フォーム上のホスト名またはIPアドレスをすることができます。 &lt;code&gt;PeerPort&lt;/code&gt; は番号またはシンボリックサービス名を指定できます。サービス名の後に括弧で囲まれた数字が続く場合があります。これは、サービスがシステムに認識されていない場合に使用されます。 &lt;code&gt;PeerPort&lt;/code&gt; の仕様も埋め込むことができる &lt;code&gt;PeerAddr&lt;/code&gt; 「：」とそれに先行することによって。</target>
        </trans-unit>
        <trans-unit id="354584d7434f3b3042f7e803f86eee0735ecb30f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PerlInterpreter*&lt;/code&gt; is being constructed via &lt;code&gt;perl_construct&lt;/code&gt; . This value is mostly there for completeness and for use via the underlying C variable &lt;code&gt;PL_phase&lt;/code&gt; . It's not really possible for Perl code to be executed unless construction of the interpreter is finished.</source>
          <target state="translated">&lt;code&gt;PerlInterpreter*&lt;/code&gt; 経由して構築されて &lt;code&gt;perl_construct&lt;/code&gt; 。この値は、完全を &lt;code&gt;PL_phase&lt;/code&gt; ため、および基礎となるC変数PL_phaseを介して使用するために主に存在します。インタプリタの構築が終了しない限り、Perlコードを実行することは実際には不可能です。</target>
        </trans-unit>
        <trans-unit id="98058838817e528c0fbf9fe55b4c498c1c669b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PerlInterpreter*&lt;/code&gt; is being constructed via &lt;code&gt;perl_construct&lt;/code&gt;. This value is mostly there for completeness and for use via the underlying C variable &lt;code&gt;PL_phase&lt;/code&gt;. It's not really possible for Perl code to be executed unless construction of the interpreter is finished.</source>
          <target state="translated">&lt;code&gt;PerlInterpreter*&lt;/code&gt; は、perl_constructを介して構築されてい &lt;code&gt;perl_construct&lt;/code&gt; 。この値は、完全を &lt;code&gt;PL_phase&lt;/code&gt; ため、および基になるC変数PL_phaseを介して使用するためにほとんど存在します。インタプリタの構築が完了しない限り、Perlコードを実行することは実際には不可能です。</target>
        </trans-unit>
        <trans-unit id="619b9e421badf230488baf0eee0a8b4f64f3d92d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REGlob&lt;/code&gt; example above does not implement all the support needed to cleanly override perl's &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; operator. The built-in &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; has different behaviors depending on whether it appears in a scalar or list context, but our &lt;code&gt;REGlob&lt;/code&gt; doesn't. Indeed, many perl built-in have such context sensitive behaviors, and these must be adequately supported by a properly written override. For a fully functional example of overriding &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, study the implementation of &lt;code&gt;File::DosGlob&lt;/code&gt; in the standard library.</source>
          <target state="translated">上記の &lt;code&gt;REGlob&lt;/code&gt; の例は、perlの &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 演算子を完全にオーバーライドするために必要なすべてのサポートを実装しているわけではありません。組み込み &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; は、スカラーコンテキストとリストコンテキストのどちらで表示されるかによって動作が異なりますが、 &lt;code&gt;REGlob&lt;/code&gt; では表示されません。実際、多くのperl組み込みにはそのような状況依存の動作があり、これらは適切に記述されたオーバーライドによって適切にサポートされる必要があります。 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; のオーバーライドの完全に機能する例については、標準ライブラリの &lt;code&gt;File::DosGlob&lt;/code&gt; 実装を調べてください。</target>
        </trans-unit>
        <trans-unit id="2793461193bbb08faabc42ded2214d9447a84314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REGlob&lt;/code&gt; example above does not implement all the support needed to cleanly override perl's &lt;code&gt;glob&lt;/code&gt; operator. The built-in &lt;code&gt;glob&lt;/code&gt; has different behaviors depending on whether it appears in a scalar or list context, but our &lt;code&gt;REGlob&lt;/code&gt; doesn't. Indeed, many perl built-in have such context sensitive behaviors, and these must be adequately supported by a properly written override. For a fully functional example of overriding &lt;code&gt;glob&lt;/code&gt;, study the implementation of &lt;code&gt;File::DosGlob&lt;/code&gt; in the standard library.</source>
          <target state="translated">上記の &lt;code&gt;REGlob&lt;/code&gt; の例は、perlの &lt;code&gt;glob&lt;/code&gt; 演算子を完全にオーバーライドするために必要なすべてのサポートを実装しているわけではありません。組み込みの &lt;code&gt;glob&lt;/code&gt; は、スカラーコンテキストとリストコンテキストのどちらに表示されるかによって動作が異なりますが、 &lt;code&gt;REGlob&lt;/code&gt; はそうではありません。実際、多くのPerlビルトインにはそのような状況依存の動作があり、これらは適切に記述されたオーバーライドによって適切にサポートされる必要があります。 &lt;code&gt;glob&lt;/code&gt; をオーバーライドする完全に機能する例については、標準ライブラリでの &lt;code&gt;File::DosGlob&lt;/code&gt; 実装を調べてください。</target>
        </trans-unit>
        <trans-unit id="541482224c51c4cb7a6cd08e437f820560b203ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Return&lt;/code&gt; and &lt;code&gt;Envelope&lt;/code&gt; parameters are used for DSN (Delivery Status Notification).</source>
          <target state="translated">&lt;code&gt;Return&lt;/code&gt; と &lt;code&gt;Envelope&lt;/code&gt; のパラメータは、DSN（配信ステータス通知）のために使用されています。</target>
        </trans-unit>
        <trans-unit id="0fb74752f70cdbcc4b24e6fe1a79d1c71cc57bd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reuse&lt;/code&gt; parameter is needed so that we restart our server manually without waiting a few minutes to allow system buffers to clear out.</source>
          <target state="translated">システムバッファーがクリアされるまで数分待たずにサーバーを手動で再起動するには、 &lt;code&gt;Reuse&lt;/code&gt; パラメーターが必要です。</target>
        </trans-unit>
        <trans-unit id="6ef497f2f64147d9fc11b64ad7836f6a54270b55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SIGALRM&lt;/code&gt; signal is sent after the specified number of seconds. Implemented using &lt;code&gt;setitimer()&lt;/code&gt; if available, &lt;code&gt;ualarm()&lt;/code&gt; if not. The &lt;code&gt;$interval_floating_seconds&lt;/code&gt; argument is optional and will be zero if unspecified, resulting in &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt;-like behaviour. This function can be imported, resulting in a nice drop-in replacement for the &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; provided with perl, see the &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;SIGALRM&lt;/code&gt; の信号が指定した秒数後に送信されます。使用して実装 &lt;code&gt;setitimer()&lt;/code&gt; 利用可能な場合、 &lt;code&gt;ualarm()&lt;/code&gt; ではない場合が。 &lt;code&gt;$interval_floating_seconds&lt;/code&gt; 引数はオプションで、指定されていない場合、その結果はゼロになり &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 様の挙動。この関数はインポート可能であり、perlで提供される &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; に代わる優れたドロップインになります。以下の&lt;a href=&quot;#EXAMPLES&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9c45565a357a5307165173264e504c30b567da1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SIGALRM&lt;/code&gt; signal is sent after the specified number of seconds. Implemented using &lt;code&gt;setitimer()&lt;/code&gt; if available, &lt;code&gt;ualarm()&lt;/code&gt; if not. The &lt;code&gt;$interval_floating_seconds&lt;/code&gt; argument is optional and will be zero if unspecified, resulting in &lt;code&gt;alarm()&lt;/code&gt;-like behaviour. This function can be imported, resulting in a nice drop-in replacement for the &lt;code&gt;alarm&lt;/code&gt; provided with perl, see the &lt;a href=&quot;#EXAMPLES&quot;&gt;&quot;EXAMPLES&quot;&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;SIGALRM&lt;/code&gt; の信号が指定した秒数後に送信されます。利用可能な場合は &lt;code&gt;ualarm()&lt;/code&gt; 使用し、利用できない場合は &lt;code&gt;setitimer()&lt;/code&gt; を使用して実装されます。 &lt;code&gt;$interval_floating_seconds&lt;/code&gt; 引数はオプションで、指定されていない場合、その結果はゼロになり &lt;code&gt;alarm()&lt;/code&gt; 様の挙動。この関数はインポートできるため、perlで提供される &lt;code&gt;alarm&lt;/code&gt; 代わりにドロップインを使用できます。以下の&lt;a href=&quot;#EXAMPLES&quot;&gt;「例」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="739f23e9e223585aacd76fc17b10f95586c4f592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSL_options&lt;/code&gt; attribute could also be used for such things as providing a client certificate for authentication to a server or controlling the choice of cipher used for the SSL connection. See &lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt; documentation for details.</source>
          <target state="translated">&lt;code&gt;SSL_options&lt;/code&gt; 属性もサーバーに認証用のクライアント証明書を提供するか、SSL接続に使用される暗号の選択を制御するようなものを使用することができます。詳細については、&lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO :: Socket :: SSLの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bcb26b9a2abefa95e1228823d5039552d2541e20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SUPER::&lt;/code&gt; bit tells Perl to look for the &lt;code&gt;print_info()&lt;/code&gt; in the &lt;code&gt;File::MP3&lt;/code&gt; class's inheritance chain. When it finds the parent class that implements this method, the method is called.</source>
          <target state="translated">&lt;code&gt;SUPER::&lt;/code&gt; ビットを探すためにPerlを伝え &lt;code&gt;print_info()&lt;/code&gt; で &lt;code&gt;File::MP3&lt;/code&gt; クラスの継承チェーン。このメソッドを実装する親クラスが見つかると、メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3f5b4cff6fbfe1c281604ef06c021cd92e1eaa6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SUPER&lt;/code&gt; modifier can</source>
          <target state="translated">&lt;code&gt;SUPER&lt;/code&gt; 修飾子缶</target>
        </trans-unit>
        <trans-unit id="371b5ebfc9cdf0db9a0a55eae240989e954cb726" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SUPER&lt;/code&gt; pseudo-class is resolved from the package where the call is made. It is</source>
          <target state="translated">&lt;code&gt;SUPER&lt;/code&gt; の疑似クラスは、呼び出しが行われているパッケージから解決されます。です</target>
        </trans-unit>
        <trans-unit id="00f36328e65732130767ca69dab4491f0365d24c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SUPER&lt;/code&gt; pseudo-class that was described earlier is</source>
          <target state="translated">&lt;code&gt;SUPER&lt;/code&gt; 前述した擬似クラスであります</target>
        </trans-unit>
        <trans-unit id="1a7a3a508d1d6570aa1ef0df5ea57827a95bbfc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SV_FORCE_UTF8_UPGRADE&lt;/code&gt; flag is now ignored.</source>
          <target state="translated">&lt;code&gt;SV_FORCE_UTF8_UPGRADE&lt;/code&gt; のフラグは、現在無視されます。</target>
        </trans-unit>
        <trans-unit id="ce9315ac1b0e03b32c4d0f032e1290883c21a935" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Script&lt;/code&gt; or &lt;code&gt;Script_Extensions&lt;/code&gt; properties are likely to be the ones you want to use when processing natural language; the &lt;code&gt;Block&lt;/code&gt; property may occasionally be useful in working with the nuts and bolts of Unicode.</source>
          <target state="translated">&lt;code&gt;Script&lt;/code&gt; または &lt;code&gt;Script_Extensions&lt;/code&gt; プロパティは、自然言語を処理するときに使用するものである可能性が高いです。 &lt;code&gt;Block&lt;/code&gt; プロパティは時折ユニコードのナットとボルトでの作業に有用であり得ます。</target>
        </trans-unit>
        <trans-unit id="0c768e6f5d4be03a1a932a1028083efcf53f3ba5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Script_Extensions&lt;/code&gt; or &lt;code&gt;Script&lt;/code&gt; properties are likely to be the ones you want to use when processing natural language; the &lt;code&gt;Block&lt;/code&gt; property may occasionally be useful in working with the nuts and bolts of Unicode.</source>
          <target state="translated">&lt;code&gt;Script_Extensions&lt;/code&gt; または &lt;code&gt;Script&lt;/code&gt; のプロパティは、自然言語を処理するときに使用するものである可能性が高いです。 &lt;code&gt;Block&lt;/code&gt; プロパティは時折ユニコードのナットとボルトでの作業に有用であり得ます。</target>
        </trans-unit>
        <trans-unit id="9e2c75703b39600771c0a8ce5df27de06d22689b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Script_Extensions&lt;/code&gt; property as modified by UTS 39 (&lt;a href=&quot;https://unicode.org/reports/tr39/&quot;&gt;https://unicode.org/reports/tr39/&lt;/a&gt;) is used as the basis for this feature.</source>
          <target state="translated">&lt;code&gt;Script_Extensions&lt;/code&gt; のUTS 39によって修正されプロパティは（&lt;a href=&quot;https://unicode.org/reports/tr39/&quot;&gt;https://unicode.org/reports/tr39/&lt;/a&gt;）この機能の基礎として使用されます。</target>
        </trans-unit>
        <trans-unit id="0daac5f890ff04f28fabf32094505977d698c4f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Storable::last_op_in_netorder()&lt;/code&gt; predicate will tell you whether network order was used in the last store or retrieve operation. If you don't know how to use this, just forget about it.</source>
          <target state="translated">&lt;code&gt;Storable::last_op_in_netorder()&lt;/code&gt; 述語は、ネットワーク順序が最後の店で使用されたかどうかを教えてくれたり、操作を取得します。これの使い方がわからない場合は、忘れてください。</target>
        </trans-unit>
        <trans-unit id="4f2453d7aa3fb23473e60b4a26a3d26672cf6341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TODO:&lt;/code&gt; and &lt;code&gt;$TODO&lt;/code&gt; syntax is generally pretty good about figuring out whether or not we're in a TODO test. However, often we find that this is not possible to determine (such as when we want to use &lt;code&gt;$TODO&lt;/code&gt; but the tests are being executed in other packages which can't be inferred beforehand).</source>
          <target state="translated">&lt;code&gt;TODO:&lt;/code&gt; と &lt;code&gt;$TODO&lt;/code&gt; 構文は、一般的に、我々はTODOテストにいるかどうかを考え出すについてかなり良いです。ただし、これを判断できないことがよくあります（ &lt;code&gt;$TODO&lt;/code&gt; を使用したいが、事前に推測できない他のパッケージでテストが実行されている場合など）。</target>
        </trans-unit>
        <trans-unit id="316a59c6c105ba5a65d5de6abf6871022622f157" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TO_JSON&lt;/code&gt; method may safely call die if it wants. If &lt;code&gt;TO_JSON&lt;/code&gt; returns other blessed objects, those will be handled in the same way. &lt;code&gt;TO_JSON&lt;/code&gt; must take care of not causing an endless recursion cycle (== crash) in this case. The name of &lt;code&gt;TO_JSON&lt;/code&gt; was chosen because other methods called by the Perl core (== not by the user of the object) are usually in upper case letters and to avoid collisions with any &lt;code&gt;to_json&lt;/code&gt; function or method.</source>
          <target state="translated">&lt;code&gt;TO_JSON&lt;/code&gt; 、それが望んでいる場合、このメソッドは、安全にダイを呼び出すことができます。 &lt;code&gt;TO_JSON&lt;/code&gt; が他の祝福されたオブジェクトを返す場合、それらは同じ方法で処理されます。この場合、 &lt;code&gt;TO_JSON&lt;/code&gt; は、無限の再帰サイクル（==クラッシュ）を引き起こさないように注意する必要があります。 &lt;code&gt;TO_JSON&lt;/code&gt; の名前が選択されたのは、Perlコアによって呼び出される他のメソッド（==オブジェクトのユーザーではない）は通常大文字であり、 &lt;code&gt;to_json&lt;/code&gt; 関数またはメソッドとの衝突を避けるためです。</target>
        </trans-unit>
        <trans-unit id="94063ef306bbe0bc69a744042850751f57d8165a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; macros are available for situations where using them would clarify intent. (But they always just mean the same as the integers 1 and 0 regardless, so using them isn't compulsory.)</source>
          <target state="translated">&lt;code&gt;TRUE&lt;/code&gt; と &lt;code&gt;FALSE&lt;/code&gt; マクロはそれらを使用すると、意図を明確だろうな状況のために用意されています。（ただし、これらは常に整数1および0と同じ意味であるため、使用は必須ではありません。）</target>
        </trans-unit>
        <trans-unit id="ca16843b685fa84c8313aca285e376c5597ef322" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TYPEMAP&lt;/code&gt; section should contain one pair of C type and XS type per line as follows. An example from the core typemap file:</source>
          <target state="translated">&lt;code&gt;TYPEMAP&lt;/code&gt; のセクションでは、C型と次のようにライン当たりXS型の一対を含むべきです。コアタイプマップファイルの例：</target>
        </trans-unit>
        <trans-unit id="ea8183d7125676dfc1989dcabf04b34c38b4f669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Thread-&amp;gt;self&lt;/code&gt; function returns a thread object that represents the thread making the &lt;code&gt;Thread-&amp;gt;self&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;Thread-&amp;gt;self&lt;/code&gt; 機能は製造スレッド表すスレッドオブジェクト戻り &lt;code&gt;Thread-&amp;gt;self&lt;/code&gt; 呼び出しを。</target>
        </trans-unit>
        <trans-unit id="5f72cf2b372d3d426c2948d6098fd6cd1afad651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Thread&lt;/code&gt; module provides multithreading support for Perl.</source>
          <target state="translated">&lt;code&gt;Thread&lt;/code&gt; モジュールはPerl用のマルチスレッドサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="7fe8315550458ad4289f70c4a27bed2792ae2d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Thread&lt;/code&gt; module served as the frontend to the old-style thread model, called</source>
          <target state="translated">&lt;code&gt;Thread&lt;/code&gt; と呼ばれる古いスタイルのスレッドモデルへのフロントエンドを務めモジュール、</target>
        </trans-unit>
        <trans-unit id="ab5cb47a9617fcafbcf6221a375828cf9de09e24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Time::HiRes&lt;/code&gt; module implements a Perl interface to the &lt;code&gt;usleep&lt;/code&gt; , &lt;code&gt;nanosleep&lt;/code&gt; , &lt;code&gt;ualarm&lt;/code&gt; , &lt;code&gt;gettimeofday&lt;/code&gt; , and &lt;code&gt;setitimer&lt;/code&gt; /&lt;code&gt;getitimer&lt;/code&gt; system calls, in other words, high resolution time and timers. See the &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; section below and the test scripts for usage; see your system documentation for the description of the underlying &lt;code&gt;nanosleep&lt;/code&gt; or &lt;code&gt;usleep&lt;/code&gt; , &lt;code&gt;ualarm&lt;/code&gt; , &lt;code&gt;gettimeofday&lt;/code&gt; , and &lt;code&gt;setitimer&lt;/code&gt; /&lt;code&gt;getitimer&lt;/code&gt; calls.</source>
          <target state="translated">&lt;code&gt;Time::HiRes&lt;/code&gt; モジュール実装A Perlインタフェースに &lt;code&gt;usleep&lt;/code&gt; 、 &lt;code&gt;nanosleep&lt;/code&gt; 、 &lt;code&gt;ualarm&lt;/code&gt; 関数、 &lt;code&gt;gettimeofday&lt;/code&gt; 、そして &lt;code&gt;setitimer&lt;/code&gt; が / &lt;code&gt;getitimer&lt;/code&gt; システムコール、換言すれば、高解像度時間とタイマー。使用&lt;a href=&quot;#EXAMPLES&quot;&gt;例&lt;/a&gt;については、以下の「例」セクションとテストスクリプトを参照してください。基礎となる &lt;code&gt;nanosleep&lt;/code&gt; または &lt;code&gt;usleep&lt;/code&gt; 、 &lt;code&gt;ualarm&lt;/code&gt; 、 &lt;code&gt;gettimeofday&lt;/code&gt; 、および &lt;code&gt;setitimer&lt;/code&gt; / &lt;code&gt;getitimer&lt;/code&gt; 呼び出しの説明については、システムのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="840bb1616acfc5f4c8448fa1adbdaac8f85745ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Time::HiRes&lt;/code&gt; module implements a Perl interface to the &lt;code&gt;usleep&lt;/code&gt;, &lt;code&gt;nanosleep&lt;/code&gt;, &lt;code&gt;ualarm&lt;/code&gt;, &lt;code&gt;gettimeofday&lt;/code&gt;, and &lt;code&gt;setitimer&lt;/code&gt;/&lt;code&gt;getitimer&lt;/code&gt; system calls, in other words, high resolution time and timers. See the &lt;a href=&quot;#EXAMPLES&quot;&gt;&quot;EXAMPLES&quot;&lt;/a&gt; section below and the test scripts for usage; see your system documentation for the description of the underlying &lt;code&gt;nanosleep&lt;/code&gt; or &lt;code&gt;usleep&lt;/code&gt;, &lt;code&gt;ualarm&lt;/code&gt;, &lt;code&gt;gettimeofday&lt;/code&gt;, and &lt;code&gt;setitimer&lt;/code&gt;/&lt;code&gt;getitimer&lt;/code&gt; calls.</source>
          <target state="translated">&lt;code&gt;Time::HiRes&lt;/code&gt; モジュール実装A Perlインタフェースに &lt;code&gt;usleep&lt;/code&gt; 、 &lt;code&gt;nanosleep&lt;/code&gt; 、 &lt;code&gt;ualarm&lt;/code&gt; 関数、 &lt;code&gt;gettimeofday&lt;/code&gt; 、そして &lt;code&gt;setitimer&lt;/code&gt; が/ &lt;code&gt;getitimer&lt;/code&gt; システムコール、換言すれば、高解像度時間とタイマー。以下の&lt;a href=&quot;#EXAMPLES&quot;&gt;「例」&lt;/a&gt;セクションと使用法のテストスクリプトを参照してください。基になる &lt;code&gt;nanosleep&lt;/code&gt; または &lt;code&gt;usleep&lt;/code&gt; 、 &lt;code&gt;ualarm&lt;/code&gt; 、 &lt;code&gt;gettimeofday&lt;/code&gt; 、および &lt;code&gt;setitimer&lt;/code&gt; / &lt;code&gt;getitimer&lt;/code&gt; 呼び出しの説明については、システムのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="db031bd2869c09fc69e58469a4b3b15d15dfaaa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF8_CHECK_ONLY&lt;/code&gt; flag overrides the behavior when a non-allowed (by other flags) malformation is found. If this flag is set, the routine assumes that the caller will raise a warning, and this function will silently just set &lt;code&gt;retlen&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt; (cast to &lt;code&gt;STRLEN&lt;/code&gt;) and return zero.</source>
          <target state="translated">&lt;code&gt;UTF8_CHECK_ONLY&lt;/code&gt; の非許容奇形（他のフラグによって）が発見された場合、フラグは、動作をオーバーライド。このフラグが設定されている場合は、ルーチンは、呼び出し側が警告を発生することを前提としており、この機能は黙っだけ設定されます &lt;code&gt;retlen&lt;/code&gt; に &lt;code&gt;-1&lt;/code&gt; （へのキャスト &lt;code&gt;STRLEN&lt;/code&gt; ）とゼロを返します。</target>
        </trans-unit>
        <trans-unit id="adde2e15da0476d4564064bbc384c4ca957b8d40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VERSION&lt;/code&gt; method returns the version number of the class (package).</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; の方法は、クラス（パッケージ）のバージョン番号を返します。</target>
        </trans-unit>
        <trans-unit id="d8baa2e2f7c0fd0a2f0c9455f11a42eb910290cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Win32::*&lt;/code&gt; modules in &lt;a href=&quot;http://search.cpan.org/perldoc/Win32&quot;&gt;Win32&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Win32::*&lt;/code&gt; のモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/Win32&quot;&gt;のWin32&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="365cfe3394d31517ee04bbcb7fdcf61281c556f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Win32::*&lt;/code&gt; modules in &lt;a href=&quot;win32&quot;&gt;Win32&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Win32::*&lt;/code&gt; のモジュール&lt;a href=&quot;win32&quot;&gt;のWin32&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c6c47ba9b1855f9e0e157ed96c1dac4112ef8de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Z&amp;lt;&amp;gt;&lt;/code&gt; sequence is supposed to be empty.</source>
          <target state="translated">&lt;code&gt;Z&amp;lt;&amp;gt;&lt;/code&gt; シーケンスが空になっています。</target>
        </trans-unit>
        <trans-unit id="4f3af2152fe286b612ed068b47a818a0a9d55853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\&lt;i&gt;digit&lt;/i&gt;&lt;/code&gt; notation also works in certain circumstances outside the pattern. See &lt;a href=&quot;#Warning-on-%5C1-Instead-of-%241&quot;&gt;&quot;Warning on \1 Instead of $1&quot;&lt;/a&gt; below for details.</source>
          <target state="translated">&lt;code&gt;\&lt;i&gt;digit&lt;/i&gt;&lt;/code&gt; 表記は、パターン外の特定の状況で動作します。詳細については、以下の&lt;a href=&quot;#Warning-on-%5C1-Instead-of-%241&quot;&gt;「$ 1ではなく\ 1に関する警告」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f3c164b87544e368a57522144bf31b4093cb008b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\&lt;i&gt;digit&lt;/i&gt;&lt;/code&gt; notation also works in certain circumstances outside the pattern. See &lt;a href=&quot;#Warning-on-%5c1-Instead-of-%241&quot;&gt;Warning on \1 Instead of $1&lt;/a&gt; below for details.</source>
          <target state="translated">&lt;code&gt;\&lt;i&gt;digit&lt;/i&gt;&lt;/code&gt; 表記は、パターン外の特定の状況で動作します。詳細については、以下&lt;a href=&quot;#Warning-on-%5c1-Instead-of-%241&quot;&gt;の$ 1ではなく\ 1に関する警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c49d42a1bfbc0b22f583d2817d2ce107934b83b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\C&lt;/code&gt; is unsupported in lookbehind, because the already treacherous definition of &lt;code&gt;\C&lt;/code&gt; would become even more so when going backwards.</source>
          <target state="translated">&lt;code&gt;\C&lt;/code&gt; のすでに危険な定義ので、後読みでサポートされていません &lt;code&gt;\C&lt;/code&gt; 後方に行くときなおさらなります。</target>
        </trans-unit>
        <trans-unit id="b97997ed1726a2dd70e1e88046ee54105827a12b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\G&lt;/code&gt; assertion can be used to chain global matches (using &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt;), as described in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;. It is also useful when writing &lt;code&gt;lex&lt;/code&gt; -like scanners, when you have several patterns that you want to match against consequent substrings of your string; see the previous reference. The actual location where &lt;code&gt;\G&lt;/code&gt; will match can also be influenced by using &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; as an lvalue: see &lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;. Note that the rule for zero-length matches (see &lt;a href=&quot;#Repeated-Patterns-Matching-a-Zero-length-Substring&quot;&gt;Repeated Patterns Matching a Zero-length Substring&lt;/a&gt;) is modified somewhat, in that contents to the left of &lt;code&gt;\G&lt;/code&gt; are not counted when determining the length of the match. Thus the following will not match forever:</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; アサーションは、チェーングローバルマッチ（使用するために使用することができる &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; で説明したように、）&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;はperlopで正規表現引用様演算子&lt;/a&gt;。文字列の後続の部分文字列と照合する複数のパターンがある場合に、 &lt;code&gt;lex&lt;/code&gt; のようなスキャナーを作成するときにも役立ちます。前のリファレンスを参照してください。実際の場所 &lt;code&gt;\G&lt;/code&gt; 一致するにも使用することによって影響され得る &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; 参照：左辺値として&lt;a href=&quot;functions/pos&quot;&gt;POSを&lt;/a&gt;。長さがゼロの一致のルール（長さ&lt;a href=&quot;#Repeated-Patterns-Matching-a-Zero-length-Substring&quot;&gt;がゼロの部分文字列と一致する繰り返しパターンを&lt;/a&gt;参照）は、 &lt;code&gt;\G&lt;/code&gt; 左側の内容が多少変更されていることに注意してください。一致の長さを決定するときにカウントされません。したがって、以下は永久に一致しません。</target>
        </trans-unit>
        <trans-unit id="e1ff47fb2c42daca3a8b3c8a3d0395f0593d6c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\G&lt;/code&gt; assertion can be used to chain global matches (using &lt;code&gt;m//g&lt;/code&gt;), as described in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt;. It is also useful when writing &lt;code&gt;lex&lt;/code&gt;-like scanners, when you have several patterns that you want to match against consequent substrings of your string; see the previous reference. The actual location where &lt;code&gt;\G&lt;/code&gt; will match can also be influenced by using &lt;code&gt;pos()&lt;/code&gt; as an lvalue: see &lt;a href=&quot;perlfunc#pos&quot;&gt;&quot;pos&quot; in perlfunc&lt;/a&gt;. Note that the rule for zero-length matches (see &lt;a href=&quot;#Repeated-Patterns-Matching-a-Zero-length-Substring&quot;&gt;&quot;Repeated Patterns Matching a Zero-length Substring&quot;&lt;/a&gt;) is modified somewhat, in that contents to the left of &lt;code&gt;\G&lt;/code&gt; are not counted when determining the length of the match. Thus the following will not match forever:</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; アサーションは、チェーングローバルマッチ（使用するために使用することができる &lt;code&gt;m//g&lt;/code&gt; で説明したように、）&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;はperlopの「正規表現引用様演算子」&lt;/a&gt;。また、 &lt;code&gt;lex&lt;/code&gt; のようなスキャナーを作成する場合、文字列の結果の部分文字列と照合するパターンがいくつかある場合にも役立ちます。前のリファレンスを参照してください。 &lt;code&gt;\G&lt;/code&gt; が一致する実際の場所は、左辺値として &lt;code&gt;pos()&lt;/code&gt; を使用することによっても影響を受ける可能性があります&lt;a href=&quot;perlfunc#pos&quot;&gt;。perlfuncの「pos」を&lt;/a&gt;参照してください。長さゼロの一致のルール（&lt;a href=&quot;#Repeated-Patterns-Matching-a-Zero-length-Substring&quot;&gt;「長さゼロの部分文字列に一致する繰り返しパターン」を&lt;/a&gt;参照）は、 &lt;code&gt;\G&lt;/code&gt; 左側の内容で多少変更されていることに注意してください。試合の長さを決定するときにカウントされません。したがって、以下は永久に一致するわけではありません。</target>
        </trans-unit>
        <trans-unit id="9300fc0425608314652e19b5173bc5fd7efd18c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\N&lt;/code&gt; character class, not to be confused with the named character sequence &lt;code&gt;\N{NAME}&lt;/code&gt; , denotes any non-newline character in a regular expression.</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 名前の文字列と混同しない文字クラス、 &lt;code&gt;\N{NAME}&lt;/code&gt; 、正規表現で任意の非改行文字を表します。</target>
        </trans-unit>
        <trans-unit id="6fc55e5a124a8f9ba1fb9b74d5a25063c2e050b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\N{...}&lt;/code&gt; construct explicitly refers to a Unicode code point, even if it is one that is also in ASCII. Therefore the string containing it must be Unicode.</source>
          <target state="translated">&lt;code&gt;\N{...}&lt;/code&gt; 構築物は、明示的にASCIIでもあるものであっても、Unicodeコードポイントを指します。したがって、それを含む文字列はUnicodeである必要があります。</target>
        </trans-unit>
        <trans-unit id="7f0273d79d748bac786c369cab505ed24fe2cfda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\d&lt;/code&gt; gets rid of needing to anchor the pattern, since it forces the result to only match &lt;code&gt;[0-9]&lt;/code&gt;, and the &lt;code&gt;[0-5]&lt;/code&gt; further restricts it.</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 、それが唯一の試合に結果を強制するので、アンカーにパターンを必要を取り除きます &lt;code&gt;[0-9]&lt;/code&gt; 、および &lt;code&gt;[0-5]&lt;/code&gt; それをさらに制限します。</target>
        </trans-unit>
        <trans-unit id="52316cb23d6228b5040f834369875ce8a00e4e55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\d\s\w\D\S\W&lt;/code&gt; abbreviations can be used both inside and outside of bracketed character classes. Here are some in use:</source>
          <target state="translated">&lt;code&gt;\d\s\w\D\S\W&lt;/code&gt; 略語は括弧文字クラスの内側と外側の両方を使用することができます。以下は使用中の一部です。</target>
        </trans-unit>
        <trans-unit id="dc3bb1079451a53e38a66554502d10e12737dc82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\d\s\w\D\S\W&lt;/code&gt; abbreviations can be used both inside and outside of character classes. Here are some in use:</source>
          <target state="translated">&lt;code&gt;\d\s\w\D\S\W&lt;/code&gt; 略語は、文字クラスの内側と外側の両方を使用することができます。以下は使用中の一部です。</target>
        </trans-unit>
        <trans-unit id="0f2c8f2ff00b285673d694a7e44211cdef772f8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\g&lt;/code&gt; and &lt;code&gt;\k&lt;/code&gt; notations were introduced in Perl 5.10.0. Prior to that there were no named nor relative numbered capture groups. Absolute numbered groups were referred to using &lt;code&gt;\1&lt;/code&gt; , &lt;code&gt;\2&lt;/code&gt; , etc., and this notation is still accepted (and likely always will be). But it leads to some ambiguities if there are more than 9 capture groups, as &lt;code&gt;\10&lt;/code&gt; could mean either the tenth capture group, or the character whose ordinal in octal is 010 (a backspace in ASCII). Perl resolves this ambiguity by interpreting &lt;code&gt;\10&lt;/code&gt; as a backreference only if at least 10 left parentheses have opened before it. Likewise &lt;code&gt;\11&lt;/code&gt; is a backreference only if at least 11 left parentheses have opened before it. And so on. &lt;code&gt;\1&lt;/code&gt; through &lt;code&gt;\9&lt;/code&gt; are always interpreted as backreferences. There are several examples below that illustrate these perils. You can avoid the ambiguity by always using &lt;code&gt;\g{}&lt;/code&gt; or &lt;code&gt;\g&lt;/code&gt; if you mean capturing groups; and for octal constants always using &lt;code&gt;\o{}&lt;/code&gt; , or for &lt;code&gt;\077&lt;/code&gt; and below, using 3 digits padded with leading zeros, since a leading zero implies an octal constant.</source>
          <target state="translated">&lt;code&gt;\g&lt;/code&gt; と &lt;code&gt;\k&lt;/code&gt; 表記はPerl 5.10.0で導入されました。それ以前は、名前の付いた、または相対的に番号が付けられたキャプチャグループはありませんでした。絶対番号のグループは、 &lt;code&gt;\1&lt;/code&gt; 、 &lt;code&gt;\2&lt;/code&gt; などを使用して参照され、この表記は引き続き受け入れられます（常にそうなる可能性があります）。ただし、 &lt;code&gt;\10&lt;/code&gt; は10番目のキャプチャグループ、または8進数の序数が010（ASCIIのバックスペース）の文字のいずれかであるため、9個を超えるキャプチャグループがある場合、あいまいさが生じます。 Perlは、少なくとも10個の左括弧がその前に開いている場合にのみ、 &lt;code&gt;\10&lt;/code&gt; を後方参照として解釈することにより、このあいまいさを解決します。同様に &lt;code&gt;\11&lt;/code&gt; 少なくとも11個の左括弧がその前に開いている場合にのみ後方参照です。等々。 &lt;code&gt;\1&lt;/code&gt; から &lt;code&gt;\9&lt;/code&gt; は常に後方参照として解釈されます。これらの危険を説明するいくつかの例を以下に示します。グループをキャプチャする場合は、常に &lt;code&gt;\g{}&lt;/code&gt; または &lt;code&gt;\g&lt;/code&gt; を使用して、あいまいさを回避できます。そして進定数のために常に使用し &lt;code&gt;\o{}&lt;/code&gt; またはのために &lt;code&gt;\077&lt;/code&gt; 、先行ゼロは、8進定数を意味するので、先行ゼロで埋め3桁を使用して、以下。</target>
        </trans-unit>
        <trans-unit id="15b6b1b5929104c2b72fb96a6e633ae2051f4ffd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\g&lt;/code&gt; and &lt;code&gt;\k&lt;/code&gt; notations were introduced in Perl 5.10.0. Prior to that there were no named nor relative numbered capture groups. Absolute numbered groups were referred to using &lt;code&gt;\1&lt;/code&gt;, &lt;code&gt;\2&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;\g&lt;/code&gt; と &lt;code&gt;\k&lt;/code&gt; 表記はPerl 5.10.0で導入されました。それ以前は、名前付きまたは相対番号付きのキャプチャグループはありませんでした。絶対番号のグループは、 &lt;code&gt;\2&lt;/code&gt; &lt;code&gt;\1&lt;/code&gt; 、\ 2、を使用して参照されました。</target>
        </trans-unit>
        <trans-unit id="517d2abbf8670e3eaf5c272713d99b8bf67cd7d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; form can be equivalently written as &lt;code&gt;\g{&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt; which avoids ambiguity when building a regex by concatenating shorter strings. Otherwise if you had a regex &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/$a$b/&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;$a&lt;/code&gt; contained &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; , and &lt;code&gt;$b&lt;/code&gt; contained &lt;code&gt;&quot;37&quot;&lt;/code&gt; , you would get &lt;code&gt;/\g137/&lt;/code&gt; which is probably not what you intended.</source>
          <target state="translated">&lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; 形式は同等のように書くことができる &lt;code&gt;\g{&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt; 短い文字列を連結することによって正規表現を構築する際にあいまいさを回避します。そうでない場合、正規表現 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/$a$b/&lt;/a&gt;&lt;/code&gt; があり、 &lt;code&gt;$a&lt;/code&gt; に &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; 含まれ、 &lt;code&gt;$b&lt;/code&gt; に &lt;code&gt;&quot;37&quot;&lt;/code&gt; が含まれている場合、 &lt;code&gt;/\g137/&lt;/code&gt; が得られますが、これはおそらく意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="03256d4028754b69d229d57c7593954c93901408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; form can be equivalently written as &lt;code&gt;\g{&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt; which avoids ambiguity when building a regex by concatenating shorter strings. Otherwise if you had a regex &lt;code&gt;qr/$a$b/&lt;/code&gt;, and &lt;code&gt;$a&lt;/code&gt; contained &lt;code&gt;&quot;\g1&quot;&lt;/code&gt;, and &lt;code&gt;$b&lt;/code&gt; contained &lt;code&gt;&quot;37&quot;&lt;/code&gt;, you would get &lt;code&gt;/\g137/&lt;/code&gt; which is probably not what you intended.</source>
          <target state="translated">&lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; 形式は同等のように書くことができる &lt;code&gt;\g{&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt; 短い文字列を連結することによって正規表現を構築する際にあいまいさを回避します。それ以外の場合、正規表現 &lt;code&gt;qr/$a$b/&lt;/code&gt; があり、 &lt;code&gt;$a&lt;/code&gt; に &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; 含まれ、 &lt;code&gt;$b&lt;/code&gt; に &lt;code&gt;&quot;37&quot;&lt;/code&gt; 含まれている場合は &lt;code&gt;/\g137/&lt;/code&gt; が返されますが、これはおそらく意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="1162dcf378fe4b180c42e9c8606223aea754f52f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__DATA__&lt;/code&gt; token tells the perl compiler that the perl code for compilation is finished. Everything after the &lt;code&gt;__DATA__&lt;/code&gt; token is available for reading via the filehandle FOOBAR::DATA, where FOOBAR is the name of the current package when the &lt;code&gt;__DATA__&lt;/code&gt; token is reached. This works just the same as &lt;code&gt;__END__&lt;/code&gt; does in package 'main', but for other modules data after &lt;code&gt;__END__&lt;/code&gt; is not automatically retrievable, whereas data after &lt;code&gt;__DATA__&lt;/code&gt; is. The &lt;code&gt;__DATA__&lt;/code&gt; token is not recognized in versions of perl prior to 5.001m.</source>
          <target state="translated">&lt;code&gt;__DATA__&lt;/code&gt; のトークンは、コンパイルのためのPerlコードが終了したことをperlのコンパイラに指示します。 &lt;code&gt;__DATA__&lt;/code&gt; トークンの後のすべては、ファイルハンドルFOOBAR :: DATAを介して読み取ることができます。FOOBARは、 &lt;code&gt;__DATA__&lt;/code&gt; トークンに達したときの現在のパッケージの名前です。これはちょうど同じ動作を &lt;code&gt;__END__&lt;/code&gt; は、「メイン」パッケージにはありませんが、他のモジュールの後にデータ &lt;code&gt;__END__&lt;/code&gt; は、データのに対し、後に、自動的に検索可能ではありません &lt;code&gt;__DATA__&lt;/code&gt; があります。 &lt;code&gt;__DATA__&lt;/code&gt; のトークンは、perlの前に5.001メートルのバージョンでは認識されません。</target>
        </trans-unit>
        <trans-unit id="aaae759fadc0ccc32d523d9d6a0dc772ae2d9269" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_r&lt;/code&gt; forms are automatically used, starting in Perl 5.28, if you compile your code, with</source>
          <target state="translated">&lt;code&gt;_r&lt;/code&gt; のフォームは自動的に、あなたのコードをコンパイルする場合は、Perlの5.28で始まる、使用されています</target>
        </trans-unit>
        <trans-unit id="e8e846812293eaeddc68b23ea744d79168534a2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;A&lt;/code&gt; , and &lt;code&gt;Z&lt;/code&gt; types gobble just one value, but pack it as a string of length count, padding with nulls or spaces as needed. When unpacking, &lt;code&gt;A&lt;/code&gt; strips trailing whitespace and nulls, &lt;code&gt;Z&lt;/code&gt; strips everything after the first null, and &lt;code&gt;a&lt;/code&gt; returns data with no stripping at all.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; 、および &lt;code&gt;Z&lt;/code&gt; の種類は、ちょうど一つの値をガツガツ食べるが、必要に応じてヌルやスペースでパディング、長さ数の文字列としてそれを詰めます。解凍すると、 &lt;code&gt;A&lt;/code&gt; は末尾の空白とnullを取り除き、 &lt;code&gt;Z&lt;/code&gt; は最初のnullの後のすべてを取り除き、 &lt;code&gt;a&lt;/code&gt; はまったく取り除いていないデータを返します。</target>
        </trans-unit>
        <trans-unit id="1a1b3cf59097aca7e4188f4992a603a0b5d6ae0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;Z&lt;/code&gt; types gobble just one value, but pack it as a string of length count, padding with nulls or spaces as needed. When unpacking, &lt;code&gt;A&lt;/code&gt; strips trailing whitespace and nulls, &lt;code&gt;Z&lt;/code&gt; strips everything after the first null, and &lt;code&gt;a&lt;/code&gt; returns data with no stripping at all.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; 、および &lt;code&gt;Z&lt;/code&gt; の種類は、ちょうど一つの値をガツガツ食べるが、必要に応じてヌルやスペースでパディング、長さ数の文字列としてそれを詰めます。開梱する際、 &lt;code&gt;A&lt;/code&gt; は、空白やヌル末尾ストリップ、 &lt;code&gt;Z&lt;/code&gt; は最初のヌル後のすべてを取り除き、そして無全く剥離と戻りデータ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="893b37c14397452b4b42e37cd794a8b9b2d1eb65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alarm()&lt;/code&gt; function is not implemented on all versions of Windows. Check the documentation for your specific version of Perl.</source>
          <target state="translated">&lt;code&gt;alarm()&lt;/code&gt; 関数は、Windowsのすべてのバージョンで実装されていません。特定のバージョンのPerlのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="d5cca45db774b8d4bbc26743f5dae5512cca0753" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;antlers&lt;/code&gt; import flag tells &lt;code&gt;Class::Accessor&lt;/code&gt; that you want to define your attributes using &lt;code&gt;Moose&lt;/code&gt; -like syntax. The only parameter that you can pass to &lt;code&gt;has&lt;/code&gt; is &lt;code&gt;is&lt;/code&gt; . We recommend that you use this Moose-like syntax if you choose &lt;code&gt;Class::Accessor&lt;/code&gt; since it means you will have a smoother upgrade path if you later decide to move to &lt;code&gt;Moose&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;antlers&lt;/code&gt; フラグが伝えインポート &lt;code&gt;Class::Accessor&lt;/code&gt; あなたが使用して属性を定義したいこと &lt;code&gt;Moose&lt;/code&gt; 構文様。あなたに渡すことができる唯一のパラメータ &lt;code&gt;has&lt;/code&gt; あります &lt;code&gt;is&lt;/code&gt; 。 &lt;code&gt;Class::Accessor&lt;/code&gt; を選択する場合は、このMooseに似た構文を使用することをお勧めします。これは、後で &lt;code&gt;Moose&lt;/code&gt; に移行することを決定した場合に、よりスムーズなアップグレードパスが得られることを意味します。</target>
        </trans-unit>
        <trans-unit id="96ee1d0dc9d201f79ce6ef0d53eb7c5448972089" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;antlers&lt;/code&gt; import flag tells &lt;code&gt;Class::Accessor&lt;/code&gt; that you want to define your attributes using &lt;code&gt;Moose&lt;/code&gt;-like syntax. The only parameter that you can pass to &lt;code&gt;has&lt;/code&gt; is &lt;code&gt;is&lt;/code&gt;. We recommend that you use this Moose-like syntax if you choose &lt;code&gt;Class::Accessor&lt;/code&gt; since it means you will have a smoother upgrade path if you later decide to move to &lt;code&gt;Moose&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;antlers&lt;/code&gt; フラグが伝えインポート &lt;code&gt;Class::Accessor&lt;/code&gt; あなたが使用して属性を定義したいこと &lt;code&gt;Moose&lt;/code&gt; 構文様。あなたに渡すことができる唯一のパラメータ &lt;code&gt;has&lt;/code&gt; あります &lt;code&gt;is&lt;/code&gt; 。 &lt;code&gt;Class::Accessor&lt;/code&gt; を選択する場合は、このMooseのような構文を使用することをお勧めします。これは、後で &lt;code&gt;Moose&lt;/code&gt; に移動することにした場合に、よりスムーズなアップグレードパスが得られることを意味します。</target>
        </trans-unit>
        <trans-unit id="30d4c5418acb92744951617bccd4c2bb4e907086" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as_number()&lt;/code&gt; function returns a BigInt from a Math::BigFloat. It uses 'trunc' as rounding mode to make it equivalent to:</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; 関数は、数学::ビッグフロートからのBigIntを返します。丸めモードとして「trunc」を使用して、以下と同等にします。</target>
        </trans-unit>
        <trans-unit id="a93f0f0ee3776b1d1340911a8e79d371cb0d5ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authors&lt;/code&gt; and &lt;code&gt;licenses&lt;/code&gt; methods may also be called as &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;license&lt;/code&gt;, respectively, to match the field name in the distmeta structure.</source>
          <target state="translated">&lt;code&gt;authors&lt;/code&gt; と &lt;code&gt;licenses&lt;/code&gt; 方法も呼ばれる &lt;code&gt;author&lt;/code&gt; と &lt;code&gt;license&lt;/code&gt; distmeta構造にフィールド名を一致させるために、それぞれ、。</target>
        </trans-unit>
        <trans-unit id="3e4be85862bcecd6790751ef47534ab240cde4eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autodie&lt;/code&gt; pragma has</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; プラグマあり</target>
        </trans-unit>
        <trans-unit id="92907be6274b88924410c3eb7108af17c084f529" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autodie&lt;/code&gt; pragma provides a convenient way to replace functions that normally return false on failure with equivalents that throw an exception on failure.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; プラグマは、通常、失敗した場合に例外をスロー同等で失敗した場合にはfalseを返す関数を置き換えるための便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="3ccf77f6494c4bb94f71a5890c3e377c22247ef4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autosplit&lt;/code&gt; interface splits the specified file into a hierarchy rooted at the directory &lt;code&gt;$dir&lt;/code&gt; . It creates directories as needed to reflect class hierarchy, and creates the file</source>
          <target state="translated">&lt;code&gt;autosplit&lt;/code&gt; インターフェースは、ディレクトリをルートとする階層に指定されたファイルを分割 &lt;code&gt;$dir&lt;/code&gt; 。クラス階層を反映するために必要に応じてディレクトリを作成し、ファイルを作成します</target>
        </trans-unit>
        <trans-unit id="9ec1a56ade0e6bb491c622b2d56bc77a622eb46d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autosplit&lt;/code&gt; interface splits the specified file into a hierarchy rooted at the directory &lt;code&gt;$dir&lt;/code&gt;. It creates directories as needed to reflect class hierarchy, and creates the file</source>
          <target state="translated">&lt;code&gt;autosplit&lt;/code&gt; インターフェースは、ディレクトリをルートとする階層に指定されたファイルを分割 &lt;code&gt;$dir&lt;/code&gt; 。クラス階層を反映するために必要に応じてディレクトリを作成し、ファイルを作成します</target>
        </trans-unit>
        <trans-unit id="cc73dbc80868b5e2537b36abd82d968f2ba4c751" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autosplit_lib_modules&lt;/code&gt; form is used in the building of perl. It takes as input a list of files (modules) that are assumed to reside in a directory &lt;b&gt;lib&lt;/b&gt; relative to the current directory. Each file is sent to the autosplitter one at a time, to be split into the directory &lt;b&gt;lib/auto&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;autosplit_lib_modules&lt;/code&gt; のフォームは、perlのの建物に使用されています。これは、現在のディレクトリに対して相対的なディレクトリ&lt;b&gt;lib&lt;/b&gt;にあると想定されているファイル（モジュール）のリストを入力として受け取ります。各ファイルは一度に1つずつ&lt;b&gt;オート&lt;/b&gt;スプリッターに送信され、ディレクトリ&lt;b&gt;lib / autoに&lt;/b&gt;分割されます。</target>
        </trans-unit>
        <trans-unit id="423004d21ce960dd9509db30e9f26d66964e12d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autotie&lt;/code&gt; mechanism supports this too. The following code:</source>
          <target state="translated">&lt;code&gt;autotie&lt;/code&gt; のメカニズムは、あまりにもこれをサポートしています。次のコード：</target>
        </trans-unit>
        <trans-unit id="eadb034339c34e003fe891167b8ebaef4be23657" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;av_clear&lt;/code&gt; function deletes all the elements in the AV* array, but does not actually delete the array itself. The &lt;code&gt;av_undef&lt;/code&gt; function will delete all the elements in the array plus the array itself. The &lt;code&gt;av_extend&lt;/code&gt; function extends the array so that it contains at least &lt;code&gt;key+1&lt;/code&gt; elements. If &lt;code&gt;key+1&lt;/code&gt; is less than the currently allocated length of the array, then nothing is done.</source>
          <target state="translated">&lt;code&gt;av_clear&lt;/code&gt; 機能は、AV *、アレイ内のすべての要素を削除し、実際の配列自体を削除しません。 &lt;code&gt;av_undef&lt;/code&gt; 関数は、配列プラス配列自体内のすべての要素を削除します。 &lt;code&gt;av_extend&lt;/code&gt; のそれが少なくとも含まれるように関数は、配列を拡張 &lt;code&gt;key+1&lt;/code&gt; 要素。場合は &lt;code&gt;key+1&lt;/code&gt; 、アレイの現在割り当てられている長さより短い、何も行われません。</target>
        </trans-unit>
        <trans-unit id="d6bd36bbe209d0e332f324c88cb8fab5da451e26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;av_store&lt;/code&gt; function, when given a tied array argument, merely copies the magic of the array onto the value to be &quot;stored&quot;, using &lt;code&gt;mg_copy&lt;/code&gt; . It may also return NULL, indicating that the value did not actually need to be stored in the array. [MAYCHANGE] After a call to &lt;code&gt;av_store&lt;/code&gt; on a tied array, the caller will usually need to call &lt;code&gt;mg_set(val)&lt;/code&gt; to actually invoke the perl level &quot;STORE&quot; method on the TIEARRAY object. If &lt;code&gt;av_store&lt;/code&gt; did return NULL, a call to &lt;code&gt;SvREFCNT_dec(val)&lt;/code&gt; will also be usually necessary to avoid a memory leak. [/MAYCHANGE]</source>
          <target state="translated">&lt;code&gt;av_store&lt;/code&gt; を用いて、「保存された」される値に単にコピー配列のマジック、tieされた配列の引数が与えられる機能、 &lt;code&gt;mg_copy&lt;/code&gt; を。また、NULLを返すこともあり、値を実際に配列に格納する必要がなかったことを示します。 [MAYCHANGE] &lt;code&gt;av_store&lt;/code&gt; れた配列でav_storeを呼び出した後、通常、呼び出し元は &lt;code&gt;mg_set(val)&lt;/code&gt; を呼び出して、TIEARRAYオブジェクトのperlレベルの「STORE」メソッドを実際に呼び出す必要があります。 &lt;code&gt;av_store&lt;/code&gt; がNULLを返した場合は、通常、メモリリークを回避するために &lt;code&gt;SvREFCNT_dec(val)&lt;/code&gt; の呼び出しも必要です。 [/ MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="e12306e741c00686916bfa82246266097410a872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;av_store&lt;/code&gt; function, when given a tied array argument, merely copies the magic of the array onto the value to be &quot;stored&quot;, using &lt;code&gt;mg_copy&lt;/code&gt;. It may also return NULL, indicating that the value did not actually need to be stored in the array. [MAYCHANGE] After a call to &lt;code&gt;av_store&lt;/code&gt; on a tied array, the caller will usually need to call &lt;code&gt;mg_set(val)&lt;/code&gt; to actually invoke the perl level &quot;STORE&quot; method on the TIEARRAY object. If &lt;code&gt;av_store&lt;/code&gt; did return NULL, a call to &lt;code&gt;SvREFCNT_dec(val)&lt;/code&gt; will also be usually necessary to avoid a memory leak. [/MAYCHANGE]</source>
          <target state="translated">&lt;code&gt;av_store&lt;/code&gt; を用いて、「保存された」される値に単にコピー配列のマジック、tieされた配列の引数が与えられる機能、 &lt;code&gt;mg_copy&lt;/code&gt; を。また、NULLを返す場合もあります。これは、値を実際に配列に格納する必要がないことを示します。 [MAYCHANGE]タイ配列で &lt;code&gt;av_store&lt;/code&gt; を呼び出した後、呼び出し元は通常 &lt;code&gt;mg_set(val)&lt;/code&gt; を呼び出して、TIEARRAYオブジェクトのperlレベルの「STORE」メソッドを実際に呼び出す必要があります。 &lt;code&gt;av_store&lt;/code&gt; がNULLを返した場合、メモリリークを回避するために、通常は &lt;code&gt;SvREFCNT_dec(val)&lt;/code&gt; の呼び出しも必要になります。 [/ MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="b0bf6421125301461c635d2914e7cd34219ce4cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;av_top_index&lt;/code&gt; function returns the highest index value in an array (just like $#array in Perl). If the array is empty, -1 is returned. The &lt;code&gt;av_fetch&lt;/code&gt; function returns the value at index &lt;code&gt;key&lt;/code&gt; , but if &lt;code&gt;lval&lt;/code&gt; is non-zero, then &lt;code&gt;av_fetch&lt;/code&gt; will store an undef value at that index. The &lt;code&gt;av_store&lt;/code&gt; function stores the value &lt;code&gt;val&lt;/code&gt; at index &lt;code&gt;key&lt;/code&gt; , and does not increment the reference count of &lt;code&gt;val&lt;/code&gt; . Thus the caller is responsible for taking care of that, and if &lt;code&gt;av_store&lt;/code&gt; returns NULL, the caller will have to decrement the reference count to avoid a memory leak. Note that &lt;code&gt;av_fetch&lt;/code&gt; and &lt;code&gt;av_store&lt;/code&gt; both return &lt;code&gt;SV**&lt;/code&gt; 's, not &lt;code&gt;SV*&lt;/code&gt; 's as their return value.</source>
          <target state="translated">&lt;code&gt;av_top_index&lt;/code&gt; 関数は、配列（Perlで同じよう$＃配列）で最高のインデックス値を返します。配列が空の場合、-1が返されます。 &lt;code&gt;av_fetch&lt;/code&gt; 関数は、インデックスに値を返す &lt;code&gt;key&lt;/code&gt; が、場合 &lt;code&gt;lval&lt;/code&gt; 非ゼロであり、その後 &lt;code&gt;av_fetch&lt;/code&gt; は、そのインデックスにはundef値を格納します。 &lt;code&gt;av_store&lt;/code&gt; の機能を格納値 &lt;code&gt;val&lt;/code&gt; のインデックスでの &lt;code&gt;key&lt;/code&gt; 、との参照カウントインクリメントしない &lt;code&gt;val&lt;/code&gt; 。したがって、呼び出し側はそれを処理する責任があり、 &lt;code&gt;av_store&lt;/code&gt; がNULLを返す場合、呼び出し側はメモリリークを回避するために参照カウントをデクリメントする必要があります。なお、 &lt;code&gt;av_fetch&lt;/code&gt; と &lt;code&gt;av_store&lt;/code&gt; はどちらも、戻り値として &lt;code&gt;SV*&lt;/code&gt; ではなく &lt;code&gt;SV**&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b720f9a7cf39478f335b0b67c7ecec4e7dd453ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;av_top_index&lt;/code&gt; function returns the highest index value in an array (just like $#array in Perl). If the array is empty, -1 is returned. The &lt;code&gt;av_fetch&lt;/code&gt; function returns the value at index &lt;code&gt;key&lt;/code&gt;, but if &lt;code&gt;lval&lt;/code&gt; is non-zero, then &lt;code&gt;av_fetch&lt;/code&gt; will store an undef value at that index. The &lt;code&gt;av_store&lt;/code&gt; function stores the value &lt;code&gt;val&lt;/code&gt; at index &lt;code&gt;key&lt;/code&gt;, and does not increment the reference count of &lt;code&gt;val&lt;/code&gt;. Thus the caller is responsible for taking care of that, and if &lt;code&gt;av_store&lt;/code&gt; returns NULL, the caller will have to decrement the reference count to avoid a memory leak. Note that &lt;code&gt;av_fetch&lt;/code&gt; and &lt;code&gt;av_store&lt;/code&gt; both return &lt;code&gt;SV**&lt;/code&gt;'s, not &lt;code&gt;SV*&lt;/code&gt;'s as their return value.</source>
          <target state="translated">&lt;code&gt;av_top_index&lt;/code&gt; 関数は、配列（Perlで同じよう$＃配列）で最高のインデックス値を返します。配列が空の場合、-1が返されます。 &lt;code&gt;av_fetch&lt;/code&gt; 関数は、インデックスに値を返す &lt;code&gt;key&lt;/code&gt; が、場合 &lt;code&gt;lval&lt;/code&gt; 非ゼロであり、その後 &lt;code&gt;av_fetch&lt;/code&gt; は、そのインデックスにはundef値を格納します。 &lt;code&gt;av_store&lt;/code&gt; の機能を格納値 &lt;code&gt;val&lt;/code&gt; のインデックスでの &lt;code&gt;key&lt;/code&gt; 、との参照カウントインクリメントしない &lt;code&gt;val&lt;/code&gt; 。したがって、呼び出し元はそれを処理する責任があり、 &lt;code&gt;av_store&lt;/code&gt; がNULLを返した場合、呼び出し元はメモリリークを回避するために参照カウントをデクリメントする必要があります。 &lt;code&gt;av_fetch&lt;/code&gt; に注意してくださいと &lt;code&gt;av_store&lt;/code&gt; はどちらも、戻り値として &lt;code&gt;SV*&lt;/code&gt; ではなく、 &lt;code&gt;SV**&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="78b7a8fbb40ab78219d70980fb393c043d50ef45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&lt;/code&gt; argument specifies the local_addr to bind to. By specifying a bind argument you don't need the bind method.</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; 引数はにバインドするLOCAL_ADDRを指定します。bind引数を指定することにより、bindメソッドは必要ありません。</target>
        </trans-unit>
        <trans-unit id="0be24d4311997148f32f98999c298c4120e52577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binmode&lt;/code&gt; function can be called on an opened handle to push additional layers onto the stack, which may also modify the existing layers. &lt;code&gt;binmode&lt;/code&gt; called with no layers will remove or unset any existing layers which transform the byte stream, making the handle suitable for binary data.</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; をする機能は、既存のレイヤを変更することがスタック上に追加の層をプッシュするために開かれたハンドルで呼び出すことができます。レイヤーなしで呼び出された &lt;code&gt;binmode&lt;/code&gt; は、バイトストリームを変換する既存のレイヤーを削除または設定解除し、ハンドルをバイナリデータに適したものにします。</target>
        </trans-unit>
        <trans-unit id="185e8e007341d198fca87c48c9798b7fe0dfa929" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binmode&lt;/code&gt; operator will attempt to insure that no translation of carriage control occurs on input from or output to this filehandle. Since this involves reopening the file and then restoring its file position indicator, if this function returns FALSE, the underlying filehandle may no longer point to an open file, or may point to a different position in the file than before &lt;code&gt;binmode&lt;/code&gt; was called.</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; のオペレータは、キャリッジ制御のない翻訳は、このファイルハンドルへの入力または出力に発生しないことを保証しようとします。これにはファイルを再度開いてからファイル位置インジケーターを復元することが含まれるため、この関数がFALSEを返すと、基になるファイルハンドルが開いているファイルを指していないか、 &lt;code&gt;binmode&lt;/code&gt; が呼び出される前とはファイル内の別の位置を指している可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca3e501abc26cf1405f0402c343ec30915264f88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; keywords from C become in Perl &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, respectively. Unlike in C, these do</source>
          <target state="translated">C の &lt;code&gt;break&lt;/code&gt; キーワードと &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; キーワードは、それぞれPerlの &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; になります。Cとは異なり、これらは</target>
        </trans-unit>
        <trans-unit id="cf097e70ce7b8cc145798b0019e84f65b1044b49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keywords from C become in Perl &lt;code&gt;last&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;, respectively. Unlike in C, these do</source>
          <target state="translated">Cの &lt;code&gt;break&lt;/code&gt; キーワードと &lt;code&gt;continue&lt;/code&gt; キーワードは、それぞれPerlの &lt;code&gt;last&lt;/code&gt; と &lt;code&gt;next&lt;/code&gt; になります。Cとは異なり、これらは</target>
        </trans-unit>
        <trans-unit id="787c128b8b97671abe15918465f291ec006979e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffered&lt;/code&gt; attribute of the &lt;a href=&quot;Test2::Event::Subtest&quot;&gt;Test2::Event::Subtest&lt;/a&gt; event will be set to the value of this flag. This means any formatter, listener, etc which looks at the event will know if it was buffered.</source>
          <target state="translated">&lt;a href=&quot;Test2::Event::Subtest&quot;&gt;Test2 :: Event :: Subtestイベント&lt;/a&gt;の &lt;code&gt;buffered&lt;/code&gt; 属性は、このフラグの値に設定されます。これは、イベントを見るフォーマッター、リスナーなどが、イベントがバッファリングされているかどうかを知ることを意味します。</target>
        </trans-unit>
        <trans-unit id="1750aab93908ada1ee29e1880f7061b67617e505" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cacheout&lt;/code&gt; function will make sure that there's a filehandle open for reading or writing available as the pathname you give it. It automatically closes and re-opens files if you exceed your system's maximum number of file descriptors, or the suggested maximum</source>
          <target state="translated">&lt;code&gt;cacheout&lt;/code&gt; の機能は必ず読んだり、あなたがそれを与えるパス名として利用できる書き込み用のファイルハンドルのオープンがあることになります。システムのファイル記述子の最大数、または推奨される最大数を超えると、ファイルを自動的に閉じて再度開きます。</target>
        </trans-unit>
        <trans-unit id="2c5778ca552de672cec71f94fb24332cb951e6b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;can&lt;/code&gt; method checks to see if the class or object it was called on has a method named &lt;code&gt;$method&lt;/code&gt; . This checks for the method in the class and all of its parents. If the method exists, then a reference to the subroutine is returned. If it does not then &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; それは上と呼ばれていたクラスやオブジェクトは、名前のメソッドがあるかどうかを確認するためのメソッドをチェック &lt;code&gt;$method&lt;/code&gt; 。これにより、クラス内のメソッドとそのすべての親がチェックされます。メソッドが存在する場合、サブルーチンへの参照が返されます。そうでない場合は、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b581c43bfa8c63ce0337f8cf0f51834457cb5241" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;can&lt;/code&gt; method checks to see if the class or object it was called on has a method named &lt;code&gt;$method&lt;/code&gt;. This checks for the method in the class and all of its parents. If the method exists, then a reference to the subroutine is returned. If it does not then &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; それは上と呼ばれていたクラスやオブジェクトは、名前のメソッドがあるかどうかを確認するためのメソッドをチェック &lt;code&gt;$method&lt;/code&gt; 。これにより、クラス内のメソッドとそのすべての親がチェックされます。メソッドが存在する場合は、サブルーチンへの参照が返されます。そうでない場合は、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a231f00f91910adc2ab3862d9199fc8f2fdda4f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;can_run&lt;/code&gt; function can tell you if a certain binary is installed and if so where, whereas the &lt;code&gt;run&lt;/code&gt; function can actually execute any of the commands you give it and give you a clear return value, as well as adhere to your verbosity settings.</source>
          <target state="translated">&lt;code&gt;can_run&lt;/code&gt; の機能は、特定のバイナリがインストールされている場合はあなたを伝えることができそうであればどこ、一方 &lt;code&gt;run&lt;/code&gt; 機能は、実際にあなたがそれを与え、あなたの冗長性の設定に明確な戻り値だけでなく、付着を与えるコマンドのいずれかを実行することができます。</target>
        </trans-unit>
        <trans-unit id="ae669119c46135f428f552580c056d83e94ae6fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char*&lt;/code&gt; string does not tell you the whole story, and you can't copy or reconstruct an SV just by copying the string value. Check if the old SV has the UTF8 flag set (</source>
          <target state="translated">&lt;code&gt;char*&lt;/code&gt; 文字列は、あなたの全体の話を教えてくれない、とあなただけの文字列値をコピーすることによってSVをコピーまたは復元することはできません。古いSVにUTF8フラグが設定されているかどうかを確認します（</target>
        </trans-unit>
        <trans-unit id="3b094d933bb88b4ae1f6722063975d6ce16a864f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;charnames&lt;/code&gt; pragma supports arguments &lt;code&gt;:full&lt;/code&gt; , &lt;code&gt;:loose&lt;/code&gt; , &lt;code&gt;:short&lt;/code&gt; , script names and &lt;a href=&quot;#CUSTOM-ALIASES&quot;&gt;customized aliases&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;charnames&lt;/code&gt; のプラグマがサポートする引数 &lt;code&gt;:full&lt;/code&gt; 、 &lt;code&gt;:loose&lt;/code&gt; 、 &lt;code&gt;:short&lt;/code&gt; 、スクリプト名および&lt;a href=&quot;#CUSTOM-ALIASES&quot;&gt;カスタマイズされた別名&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3385057bdbf70e4b65ad1d11db30e12395abd68a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;charnames&lt;/code&gt; pragma supports arguments &lt;code&gt;:full&lt;/code&gt;, &lt;code&gt;:loose&lt;/code&gt;, &lt;code&gt;:short&lt;/code&gt;, script names and &lt;a href=&quot;#CUSTOM-ALIASES&quot;&gt;customized aliases&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;charnames&lt;/code&gt; のプラグマがサポートする引数 &lt;code&gt;:full&lt;/code&gt; 、 &lt;code&gt;:loose&lt;/code&gt; 、 &lt;code&gt;:short&lt;/code&gt; 、スクリプト名および&lt;a href=&quot;#CUSTOM-ALIASES&quot;&gt;カスタマイズされた別名&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f351acbd57d2d1102a02f0ad7f0071439704163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chr()&lt;/code&gt; and &lt;code&gt;ord()&lt;/code&gt; functions work on whole characters.</source>
          <target state="translated">&lt;code&gt;chr()&lt;/code&gt; および &lt;code&gt;ord()&lt;/code&gt; 関数は、全体の文字に取り組みます。</target>
        </trans-unit>
        <trans-unit id="7bf018bbe36ec38be15a617cdd0dc65af5cb382c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cmp&lt;/code&gt; (and hence &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;) operators do not necessarily give the correct results when both operands are UTF-EBCDIC encoded strings and there is a mixture of ASCII and/or control characters, along with other characters.</source>
          <target state="translated">&lt;code&gt;cmp&lt;/code&gt; （従って &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; ）両方のオペランドがUTF-EBCDICエンコードされた文字列であり、ASCIIおよび/または制御文字の混合物が他の文字と一緒に、存在する場合にオペレータが必ずしも正しい結果を与えません。</target>
        </trans-unit>
        <trans-unit id="ec09ece4b13035db3b64ac6559a812694d130f2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;color&lt;/code&gt; function determines if colouring should occur or not. Passing it a true or false value will enable or disable colouring respectively, and the function called with no argument will return the current setting.</source>
          <target state="translated">&lt;code&gt;color&lt;/code&gt; 着色が発生したりべきではない場合、関数は決定されます。trueまたはfalseの値を渡すと、それぞれカラーリングが有効または無効になり、引数なしで呼び出された関数は現在の設定を返します。</target>
        </trans-unit>
        <trans-unit id="fcc832a2467057f7acfd689fa1bb07925f149ce1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;complicated&lt;/code&gt; function will return the same numeric &lt;code&gt;$result&lt;/code&gt; regardless of whether it is called in list or in scalar context.</source>
          <target state="translated">&lt;code&gt;complicated&lt;/code&gt; 機能は同じ数値を返します &lt;code&gt;$result&lt;/code&gt; 関係なく、それがリストまたはスカラーコンテキストで呼び出されているかどうかの。</target>
        </trans-unit>
        <trans-unit id="f67952b359119ecd8ea38089ffb10eb7987a4172" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_broadcast&lt;/code&gt; function works similarly to &lt;code&gt;cond_signal&lt;/code&gt; . &lt;code&gt;cond_broadcast&lt;/code&gt; , though, will unblock &lt;b&gt;all&lt;/b&gt; the threads that are blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on the locked variable, rather than only one.</source>
          <target state="translated">&lt;code&gt;cond_broadcast&lt;/code&gt; 関数はcond_signalと同様に機能し &lt;code&gt;cond_signal&lt;/code&gt; 。 &lt;code&gt;cond_broadcast&lt;/code&gt; は、かかわらず、ブロック解除されます&lt;b&gt;全て&lt;/b&gt;にブロックされたスレッド &lt;code&gt;cond_wait&lt;/code&gt; というだけのものよりも、ロックされた変数にします。</target>
        </trans-unit>
        <trans-unit id="2c18198f3431b0af0518f8194180bdd1d59f0718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_broadcast&lt;/code&gt; function works similarly to &lt;code&gt;cond_signal&lt;/code&gt;. &lt;code&gt;cond_broadcast&lt;/code&gt;, though, will unblock &lt;b&gt;all&lt;/b&gt; the threads that are blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on the locked variable, rather than only one.</source>
          <target state="translated">&lt;code&gt;cond_broadcast&lt;/code&gt; 機能は、と同様に動作します &lt;code&gt;cond_signal&lt;/code&gt; 。 &lt;code&gt;cond_broadcast&lt;/code&gt; は、かかわらず、ブロック解除されます&lt;b&gt;全て&lt;/b&gt;にブロックされたスレッド &lt;code&gt;cond_wait&lt;/code&gt; というだけのものよりも、ロックされた変数にします。</target>
        </trans-unit>
        <trans-unit id="a85c76c4fd238a57c5f21f762fcaeb20729d17df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_signal&lt;/code&gt; function takes a &lt;b&gt;locked&lt;/b&gt; variable as a parameter and unblocks one thread that's &lt;code&gt;cond_wait&lt;/code&gt; ing on that variable. If more than one thread is blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on that variable, only one (and which one is indeterminate) will be unblocked.</source>
          <target state="translated">&lt;code&gt;cond_signal&lt;/code&gt; 関数は、かかる&lt;b&gt;ロック&lt;/b&gt;だパラメータとブロック解除一つのスレッドとして変数を &lt;code&gt;cond_wait&lt;/code&gt; その変数のING。その変数の &lt;code&gt;cond_wait&lt;/code&gt; で複数のスレッドがブロックされている場合、ブロックが解除されるのは1つ（および不確定なスレッド）だけです。</target>
        </trans-unit>
        <trans-unit id="17177c8bfdab5cbbef640ed5fdbe840af84bd3e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_signal&lt;/code&gt; function takes a &lt;b&gt;locked&lt;/b&gt; variable as a parameter and unblocks one thread that's &lt;code&gt;cond_wait&lt;/code&gt;ing on that variable. If more than one thread is blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on that variable, only one (and which one is indeterminate) will be unblocked.</source>
          <target state="translated">&lt;code&gt;cond_signal&lt;/code&gt; 関数は、かかる&lt;b&gt;ロック&lt;/b&gt;だパラメータとブロック解除一つのスレッドとして変数を &lt;code&gt;cond_wait&lt;/code&gt; その変数のING。その変数の &lt;code&gt;cond_wait&lt;/code&gt; で複数のスレッドがブロックされている場合、ブロックが解除されるのは1つだけ（およびどれが不確定か）です。</target>
        </trans-unit>
        <trans-unit id="c5be06c4673c5f0381dc64821a424c5ce57dffbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_signal&lt;/code&gt; function takes a locked variable as a parameter and unblocks one thread that's &lt;code&gt;cond_wait&lt;/code&gt; ing on that variable. If more than one thread is blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on that variable, only one (and which one is indeterminate) will be unblocked.</source>
          <target state="translated">&lt;code&gt;cond_signal&lt;/code&gt; 関数は、パラメータとして、ロックされた変数を取り、だ一つのスレッドブロック解除 &lt;code&gt;cond_wait&lt;/code&gt; その変数のINGを。その変数の &lt;code&gt;cond_wait&lt;/code&gt; で複数のスレッドがブロックされている場合、ブロックが解除されるのは1つ（および不確定なスレッド）だけです。</target>
        </trans-unit>
        <trans-unit id="90834b3f231b489213b8a6d3ee5e7273db92badc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_signal&lt;/code&gt; function takes a locked variable as a parameter and unblocks one thread that's &lt;code&gt;cond_wait&lt;/code&gt;ing on that variable. If more than one thread is blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on that variable, only one (and which one is indeterminate) will be unblocked.</source>
          <target state="translated">&lt;code&gt;cond_signal&lt;/code&gt; 関数は、パラメータとして、ロックされた変数を取り、だ一つのスレッドブロック解除 &lt;code&gt;cond_wait&lt;/code&gt; その変数のINGを。その変数の &lt;code&gt;cond_wait&lt;/code&gt; で複数のスレッドがブロックされている場合、ブロックが解除されるのは1つだけ（およびどれが不確定か）です。</target>
        </trans-unit>
        <trans-unit id="076e7dbb91376a2a5dc565f0cafe6a8c9c90bfab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_wait&lt;/code&gt; function takes a &lt;b&gt;locked&lt;/b&gt; variable as a parameter, unlocks the variable, and blocks until another thread does a &lt;code&gt;cond_signal&lt;/code&gt; or &lt;code&gt;cond_broadcast&lt;/code&gt; for that same locked variable. The variable that &lt;code&gt;cond_wait&lt;/code&gt; blocked on is re-locked after the &lt;code&gt;cond_wait&lt;/code&gt; is satisfied. If there are multiple threads &lt;code&gt;cond_wait&lt;/code&gt; ing on the same variable, all but one will re-block waiting to reacquire the lock on the variable. (So if you're only using &lt;code&gt;cond_wait&lt;/code&gt; for synchronization, give up the lock as soon as possible). The two actions of unlocking the variable and entering the blocked wait state are atomic, the two actions of exiting from the blocked wait state and re-locking the variable are not.</source>
          <target state="translated">&lt;code&gt;cond_wait&lt;/code&gt; 関数は、かかる&lt;b&gt;ロックされ&lt;/b&gt;、別のスレッドが行うまで、パラメータとして変数を変数のロックを解除し、ブロック &lt;code&gt;cond_signal&lt;/code&gt; や &lt;code&gt;cond_broadcast&lt;/code&gt; その同じロックされた変数のために。 &lt;code&gt;cond_wait&lt;/code&gt; がブロックされた変数は、 &lt;code&gt;cond_wait&lt;/code&gt; が満たされた後に再度ロックされます。同じ変数に対して複数のスレッド &lt;code&gt;cond_wait&lt;/code&gt; が存在する場合、1つを除くすべてのスレッドが、変数のロックの再取得を待機して再ブロックします。 （つまり、 &lt;code&gt;cond_wait&lt;/code&gt; のみを使用している場合同期のために、できるだけ早くロックを放棄してください）。変数のロック解除とブロックされた待機状態への2つのアクションはアトミックです。ブロックされた待機状態からの終了と変数の再ロックの2つのアクションはアトミックではありません。</target>
        </trans-unit>
        <trans-unit id="439f35352dbf1d510415ebca01133fb2e86790ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_wait&lt;/code&gt; function takes a &lt;b&gt;locked&lt;/b&gt; variable as a parameter, unlocks the variable, and blocks until another thread does a &lt;code&gt;cond_signal&lt;/code&gt; or &lt;code&gt;cond_broadcast&lt;/code&gt; for that same locked variable. The variable that &lt;code&gt;cond_wait&lt;/code&gt; blocked on is re-locked after the &lt;code&gt;cond_wait&lt;/code&gt; is satisfied. If there are multiple threads &lt;code&gt;cond_wait&lt;/code&gt;ing on the same variable, all but one will re-block waiting to reacquire the lock on the variable. (So if you're only using &lt;code&gt;cond_wait&lt;/code&gt; for synchronization, give up the lock as soon as possible). The two actions of unlocking the variable and entering the blocked wait state are atomic, the two actions of exiting from the blocked wait state and re-locking the variable are not.</source>
          <target state="translated">&lt;code&gt;cond_wait&lt;/code&gt; 関数は、かかる&lt;b&gt;ロックされ&lt;/b&gt;、別のスレッドが行うまで、パラメータとして変数を変数のロックを解除し、ブロック &lt;code&gt;cond_signal&lt;/code&gt; や &lt;code&gt;cond_broadcast&lt;/code&gt; その同じロックされた変数のために。 &lt;code&gt;cond_wait&lt;/code&gt; がブロックされた変数は、 &lt;code&gt;cond_wait&lt;/code&gt; が満たされた後に再ロックされます。同じ変数で &lt;code&gt;cond_wait&lt;/code&gt; ingしている複数のスレッドがある場合、1つを除くすべてが、変数のロックを再取得するために待機を再ブロックします。 （つまり、 &lt;code&gt;cond_wait&lt;/code&gt; のみを使用している場合同期のために、できるだけ早くロックを解除します）。変数のロックを解除してブロックされた待機状態に入る2つのアクションはアトミックですが、ブロックされた待機状態を終了して変数を再ロックする2つのアクションはアトミックではありません。</target>
        </trans-unit>
        <trans-unit id="0fa04a005ef5fee3bbdeb8f830aca63065ce2e7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_wait&lt;/code&gt; function takes a &lt;b&gt;locked&lt;/b&gt; variable as a parameter, unlocks the variable, and blocks until another thread does a &lt;code&gt;cond_signal&lt;/code&gt; or &lt;code&gt;cond_broadcast&lt;/code&gt; for that same locked variable. The variable that &lt;code&gt;cond_wait&lt;/code&gt; blocked on is relocked after the &lt;code&gt;cond_wait&lt;/code&gt; is satisfied. If there are multiple threads &lt;code&gt;cond_wait&lt;/code&gt; ing on the same variable, all but one will reblock waiting to re-acquire the lock on the variable. (So if you're only using &lt;code&gt;cond_wait&lt;/code&gt; for synchronization, give up the lock as soon as possible.)</source>
          <target state="translated">&lt;code&gt;cond_wait&lt;/code&gt; 関数は、かかる&lt;b&gt;ロックされ&lt;/b&gt;、別のスレッドが行うまで、パラメータとして変数を変数のロックを解除し、ブロック &lt;code&gt;cond_signal&lt;/code&gt; や &lt;code&gt;cond_broadcast&lt;/code&gt; その同じロックされた変数のために。 &lt;code&gt;cond_wait&lt;/code&gt; がブロックされた変数は、 &lt;code&gt;cond_wait&lt;/code&gt; が満たされた後に再度ロックされます。同じ変数で &lt;code&gt;cond_wait&lt;/code&gt; を実行しているスレッドが複数ある場合、1つを除くすべてのスレッドが、変数のロックを再取得するのを待って再ブロックします。 （したがって、同期に &lt;code&gt;cond_wait&lt;/code&gt; のみを使用している場合は、できるだけ早くロックを放棄してください。）</target>
        </trans-unit>
        <trans-unit id="ad78498a67881045948d88db7f3bfb4f745feb3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond_wait&lt;/code&gt; function takes a &lt;b&gt;locked&lt;/b&gt; variable as a parameter, unlocks the variable, and blocks until another thread does a &lt;code&gt;cond_signal&lt;/code&gt; or &lt;code&gt;cond_broadcast&lt;/code&gt; for that same locked variable. The variable that &lt;code&gt;cond_wait&lt;/code&gt; blocked on is relocked after the &lt;code&gt;cond_wait&lt;/code&gt; is satisfied. If there are multiple threads &lt;code&gt;cond_wait&lt;/code&gt;ing on the same variable, all but one will reblock waiting to re-acquire the lock on the variable. (So if you're only using &lt;code&gt;cond_wait&lt;/code&gt; for synchronization, give up the lock as soon as possible.)</source>
          <target state="translated">&lt;code&gt;cond_wait&lt;/code&gt; 関数は、かかる&lt;b&gt;ロックされ&lt;/b&gt;、別のスレッドが行うまで、パラメータとして変数を変数のロックを解除し、ブロック &lt;code&gt;cond_signal&lt;/code&gt; や &lt;code&gt;cond_broadcast&lt;/code&gt; その同じロックされた変数のために。 &lt;code&gt;cond_wait&lt;/code&gt; がブロックされた変数は、 &lt;code&gt;cond_wait&lt;/code&gt; が満たされた後に再ロックされます。同じ変数で &lt;code&gt;cond_wait&lt;/code&gt; ingしているスレッドが複数ある場合、1つを除くすべてのスレッドが再ブロックされ、変数のロックを再取得するのを待ちます。 （したがって、同期に &lt;code&gt;cond_wait&lt;/code&gt; のみを使用している場合は、できるだけ早くロックを解除してください。）</target>
        </trans-unit>
        <trans-unit id="c05e65092ed5c30b3ec99766dc7198ef2d697366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; can have several forms. The first form is simply an integer in parentheses &lt;code&gt;(integer)&lt;/code&gt; . It is true if the corresponding backreference &lt;code&gt;\integer&lt;/code&gt; matched earlier in the regexp. The same thing can be done with a name associated with a capture group, written as &lt;code&gt;(&amp;lt;name&amp;gt;)&lt;/code&gt; or &lt;code&gt;('name')&lt;/code&gt; . The second form is a bare zero-width assertion &lt;code&gt;(?...)&lt;/code&gt;, either a lookahead, a lookbehind, or a code assertion (discussed in the next section). The third set of forms provides tests that return true if the expression is executed within a recursion (&lt;code&gt;(R)&lt;/code&gt; ) or is being called from some capturing group, referenced either by number (&lt;code&gt;(R1)&lt;/code&gt; , &lt;code&gt;(R2)&lt;/code&gt; ,...) or by name (&lt;code&gt;(R&amp;amp;name)&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; いくつかの形式を持つことができます。最初の形式は、括弧内の &lt;code&gt;(integer)&lt;/code&gt; です。対応する後方参照 &lt;code&gt;\integer&lt;/code&gt; が正規表現の最初の部分で一致した場合はtrueです。 &lt;code&gt;(&amp;lt;name&amp;gt;)&lt;/code&gt; または &lt;code&gt;('name')&lt;/code&gt; のように記述されたキャプチャグループに関連付けられた名前でも同じことができます。 2番目の形式は、先読み、後読み、またはコードアサーション（次のセクションで説明 &lt;code&gt;(?...)&lt;/code&gt; 、ゼロ幅のアサーション（？...）のみです。フォームの3番目のセットは、式が再帰内で実行された場合（ &lt;code&gt;(R)&lt;/code&gt; ）、または番号（ &lt;code&gt;(R1)&lt;/code&gt; 、 &lt;code&gt;(R2)&lt;/code&gt; 、...）または名前（ &lt;code&gt;(R&amp;amp;name)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ad47d7c085885e724ad5ee56f7fe5e436f8b9c0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context()&lt;/code&gt; function will always return the current context. If there is already a context active, it will be returned. If there is not an active context, one will be generated. When a context is generated it will default to using the file and line number where the currently running sub was called from.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; 関数は、常に現在のコンテキストを返します。アクティブなコンテキストがすでに存在する場合は、それが返されます。アクティブなコンテキストがない場合は、コンテキストが生成されます。コンテキストが生成されると、デフォルトで、現在実行中のサブが呼び出されたファイルと行番号が使用されます。</target>
        </trans-unit>
        <trans-unit id="4ec10fe3aaaca1b55ef86de9fafc8bbe404ebad2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context()&lt;/code&gt; method is your primary interface into the Test2 framework.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; メソッドは、Test2をフレームワークにあなたの主要なインタフェースです。</target>
        </trans-unit>
        <trans-unit id="bf42e706aa15e3b9613116ccaae1bce3997d5965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copy&lt;/code&gt; function takes two parameters: a file to copy from and a file to copy to. Either argument may be a string, a FileHandle reference or a FileHandle glob. Obviously, if the first argument is a filehandle of some sort, it will be read from, and if it is a file</source>
          <target state="translated">&lt;code&gt;copy&lt;/code&gt; からコピーするファイルとコピー先のファイル：関数は2つのパラメータを取ります。引数は、文字列、FileHandle参照、またはFileHandleグロブのいずれかです。明らかに、最初の引数がなんらかのファイルハンドルである場合は、それが読み取られ、ファイルの場合は</target>
        </trans-unit>
        <trans-unit id="bb585d66ac9e0baf39acd70331ff3f0f5eef7b95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cpp&lt;/code&gt; filter does not apply to the text of the Fred module, only to the text of the file that used it (&lt;code&gt;cpp_test&lt;/code&gt; ). Although the use statement on line 3 will pass through the cpp filter, the module that gets included (&lt;code&gt;Fred&lt;/code&gt; ) will not. The source streams look like this after line 3 has been parsed and before line 4 is parsed:</source>
          <target state="translated">&lt;code&gt;cpp&lt;/code&gt; フィルタは、それを使用したファイル（のテキストに、フレッド・モジュールのテキストには適用されません &lt;code&gt;cpp_test&lt;/code&gt; ）。3行目のuseステートメントはcppフィルターを通過しますが、含まれるモジュール（ &lt;code&gt;Fred&lt;/code&gt; ）は通過しません。3行目が解析された後、4行目が解析される前のソースストリームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="cb5beac8049360b845cf124791fe07ff9a12d34c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cpp&lt;/code&gt; filter does not apply to the text of the Fred module, only to the text of the file that used it (&lt;code&gt;cpp_test&lt;/code&gt;). Although the use statement on line 3 will pass through the cpp filter, the module that gets included (&lt;code&gt;Fred&lt;/code&gt;) will not. The source streams look like this after line 3 has been parsed and before line 4 is parsed:</source>
          <target state="translated">&lt;code&gt;cpp&lt;/code&gt; フィルタは、それを使用したファイル（のテキストに、フレッド・モジュールのテキストには適用されません &lt;code&gt;cpp_test&lt;/code&gt; ）。3行目のuseステートメントはcppフィルターを通過しますが、含まれるモジュール（ &lt;code&gt;Fred&lt;/code&gt; ）は通過しません。3行目が解析された後、4行目が解析される前のソースストリームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3a0e889b0f475939308ccb8373e116461d3751c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;create()&lt;/code&gt; method takes a reference to a subroutine and creates a new thread that starts executing in the referenced subroutine. Control then passes both to the subroutine and the caller.</source>
          <target state="translated">&lt;code&gt;create()&lt;/code&gt; メソッドは、サブルーチンへの参照を取得し、参照サブルーチンで実行を開始し、新しいスレッドを作成します。その後、制御はサブルーチンと呼び出し元の両方に渡されます。</target>
        </trans-unit>
        <trans-unit id="4daee3058488514b062a77504cbed0c79eee6390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypt&lt;/code&gt; operator uses the &lt;code&gt;sys$hash_password&lt;/code&gt; system service to generate the hashed representation of PLAINTEXT. If USER is a valid username, the algorithm and salt values are taken from that user's UAF record. If it is not, then the preferred algorithm and a salt of 0 are used. The quadword encrypted value is returned as an 8-character string.</source>
          <target state="translated">&lt;code&gt;crypt&lt;/code&gt; 演算子は使用しています &lt;code&gt;sys$hash_password&lt;/code&gt; PLAINTEXTのハッシュされた表現を生成するシステムサービスを。USERが有効なユーザー名である場合、アルゴリズムとソルト値はそのユーザーのUAFレコードから取得されます。そうでない場合は、優先アルゴリズムと0のソルトが使用されます。クアッドワード暗号化値は、8文字の文字列として返されます。</target>
        </trans-unit>
        <trans-unit id="b3224bd5303e6f5ddff9eaa9e8454f4b95ad9fcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;curlen&lt;/code&gt; length parameter passed in was too small, and the function was prevented from examining all the necessary bytes.</source>
          <target state="translated">&lt;code&gt;curlen&lt;/code&gt; 渡された長さパラメータが小さすぎ、および機能は、すべての必要なバイトを検査することを防止しました。</target>
        </trans-unit>
        <trans-unit id="39b2e5dabf98fd166f3cc23d1829d0ea566d66df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;declare()&lt;/code&gt; method always creates dotted-decimal version objects. When used in a module, you &lt;b&gt;must&lt;/b&gt; put it on the same line as &quot;use version&quot; to ensure that $VERSION is read correctly by PAUSE and installer tools. You should also add 'version' to the 'configure_requires' section of your module metadata file. See instructions in &lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; or &lt;a href=&quot;Module::Build&quot;&gt;Module::Build&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;declare()&lt;/code&gt; メソッドは常にドット区切りのバージョンのオブジェクトを作成します。モジュールで使用する場合、あなたは&lt;b&gt;しなければならない&lt;/b&gt;$ VERSIONはPAUSEとインストーラツールによって正しく読まれることを確実にするために「使用バージョン」と同じライン上に置きます。また、モジュールメタデータファイルの「configure_requires」セクションに「version」を追加する必要があります。詳細については、&lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;または&lt;a href=&quot;Module::Build&quot;&gt;Module :: Buildの&lt;/a&gt;手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="1af1cb7eb6b21f006259e64b150fa56903267e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete local EXPR&lt;/code&gt; construct can also be used to localize the deletion of array/hash elements to the current block. See &lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;&quot;Localized deletion of elements of composite types&quot; in perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;delete local EXPR&lt;/code&gt; 構築物はまた、現在のブロックに配列/ハッシュ要素の削除を局在化するために使用することができます。&lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;perlsubの「複合型の要素のローカライズされた削除」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="69524f53f96840e72cc2460d82457b60c364f5a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete local EXPR&lt;/code&gt; construct localizes the deletion to the current block at run time. Until the block exits, elements locally deleted temporarily no longer exist. See &lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;&quot;Localized deletion of elements of composite types&quot; in perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;delete local EXPR&lt;/code&gt; 構築物は、実行時に現在のブロックに削除を局在化します。ブロックが終了するまで、一時的にローカルに削除された要素は存在しなくなります。&lt;a href=&quot;perlsub#Localized-deletion-of-elements-of-composite-types&quot;&gt;perlsubの「複合型の要素のローカライズされた削除」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="30b3d6c14b075946962dafa1dc3a2886740f908a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;diagnostics&lt;/code&gt; Pragma</source>
          <target state="translated">&lt;code&gt;diagnostics&lt;/code&gt; プラグマ</target>
        </trans-unit>
        <trans-unit id="086b0e345be46fb23c5d4022bc1b3516ac49d7c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;display_format&lt;/code&gt; class method and the corresponding &lt;code&gt;display_format&lt;/code&gt; object method can now be called using a parameter hash instead of just a one parameter.</source>
          <target state="translated">&lt;code&gt;display_format&lt;/code&gt; のクラスメソッドと対応 &lt;code&gt;display_format&lt;/code&gt; のオブジェクトメソッドは、現在のパラメータハッシュの代わりにただ一つのパラメータを使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a9abe66ed186f7fcb344af8814b57766600779f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do {}&lt;/code&gt; construct isn't a real loop that you can use loop control on.</source>
          <target state="translated">&lt;code&gt;do {}&lt;/code&gt; 構文を使用すると、上のループ制御を使用できることを本当のループではありません。</target>
        </trans-unit>
        <trans-unit id="85937d63d0c2a7155254307de5c15a8dc64cc7fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;done&lt;/code&gt; method returns true if the thread you're checking has finished, and false otherwise.</source>
          <target state="translated">&lt;code&gt;done&lt;/code&gt; あなたがしているチェックがそうでなければ終了し、偽したスレッド場合はtrueメソッドが返します。</target>
        </trans-unit>
        <trans-unit id="322d30ea9fcb9b2fb4107fa041a490d3eef3fbe8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dontfrag&lt;/code&gt; argument sets the IP_DONTFRAG bit, but note that IP_DONTFRAG is not yet defined by Socket, and not available on many systems. Then it is ignored. On linux it also sets IP_MTU_DISCOVER to IP_PMTUDISC_DO but need we don't chunk oversized packets. You need to set $data_size manually.</source>
          <target state="translated">&lt;code&gt;dontfrag&lt;/code&gt; の引数はIP_DONTFRAGビットを設定しますが、ノートIP_DONTFRAGがまだソケットで定義されていない、と多くのシステムでは利用できませんされています。その後、無視されます。Linuxでは、IP_MTU_DISCOVERをIP_PMTUDISC_DOに設定しますが、特大のパケットをチャンクする必要はありません。$ data_sizeを手動で設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5c42a2b150a081cef9d9a1db39370eb144f13339" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;down&lt;/code&gt; method decreases the semaphore's count by the specified number (which must be an integer &amp;gt;= 1), or by one if no number is specified.</source>
          <target state="translated">&lt;code&gt;down&lt;/code&gt; 方法は、数が指定されていない場合、または1つによって（整数&amp;gt; = 1でなければならない）指定された数によってセマフォの数を減少させます。</target>
        </trans-unit>
        <trans-unit id="1d986e9044d0332c0e0b20d1b476092f758b1763" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;down_force&lt;/code&gt; method decreases the semaphore's count by the specified number (which must be an integer &amp;gt;= 1), or by one if no number is specified. This method does not block, and may cause the semaphore's count to drop below zero.</source>
          <target state="translated">&lt;code&gt;down_force&lt;/code&gt; の方法は、数が指定されていない場合、または1つによって（整数&amp;gt; = 1でなければならない）指定された数によってセマフォの数を減少させます。このメソッドはブロックせず、セマフォのカウントがゼロ未満になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="59032671c2f862c61987094dab4187139af577bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;down_nb&lt;/code&gt; method attempts to decrease the semaphore's count by the specified number (which must be an integer &amp;gt;= 1), or by one if no number is specified.</source>
          <target state="translated">&lt;code&gt;down_nb&lt;/code&gt; の数が特定されていない場合（&amp;gt; = 1の整数でなければならない）指定された数により、または1つによってセマフォの数を減少させる方法を試み。</target>
        </trans-unit>
        <trans-unit id="ad817bd0c55a8a17c45e80be5bfb80185a6f0a13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;down_timed&lt;/code&gt; method attempts to decrease the semaphore's count by 1 or by the specified number within the specified timeout period given in seconds (which must be an integer &amp;gt;= 0).</source>
          <target state="translated">&lt;code&gt;down_timed&lt;/code&gt; （&amp;gt; = 0の整数でなければならない）秒単位で与えられる指定されたタイムアウト期間内に1又は指定された数によってセマフォの数を減少させる方法を試み。</target>
        </trans-unit>
        <trans-unit id="81b4509e2a48be8cd2c584657729b851defbc375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;each()&lt;/code&gt; operator can be a bit tricky though. You can't add or delete keys of the hash while you're using it without possibly skipping or re-processing some pairs after Perl internally rehashes all of the elements. Additionally, a hash has only one iterator, so if you mix &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, or &lt;code&gt;each&lt;/code&gt; on the same hash, you risk resetting the iterator and messing up your processing. See the &lt;code&gt;each&lt;/code&gt; entry in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;each()&lt;/code&gt; 演算子は、ビットトリッキーしかしすることができます。Perlがすべての要素を内部的に再ハッシュした後、いくつかのペアをスキップまたは再処理せずに、ハッシュの使用中にハッシュのキーを追加または削除することはできません。さらに、ハッシュにはイテレータが1つしかないため、同じハッシュで &lt;code&gt;keys&lt;/code&gt; 、 &lt;code&gt;values&lt;/code&gt; 、または &lt;code&gt;each&lt;/code&gt; を混在させると、イテレータをリセットして処理を台無しにするリスクがあります。詳細については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;の &lt;code&gt;each&lt;/code&gt; エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="9eb0881abe1e42d6f6890023e371e6cf04aeaeaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;each&lt;/code&gt; operator returns the pairs in apparently random order, so if ordering matters to you, you'll have to stick with the &lt;code&gt;keys&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 事業者は、明らかにランダムな順序でペアを返すので、あなたに問題を注文する場合は、あなたがに固執する必要があります &lt;code&gt;keys&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="ac628ac906a6e8c64ae1a2404030120f69cfb8c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;else&lt;/code&gt; branch should be used for the really ultimate fallback, not for code specific to some platform.</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; ブランチはなく、いくつかのプラットフォームへのコードの特定のために、本当に究極のフォールバックのために使用すべきです。</target>
        </trans-unit>
        <trans-unit id="48ce45b8c5dc5a90ffb8cc26e428eb8e7134ca2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eogc&lt;/code&gt; flags are stripped out before being passed to the comp routine. The regex engine does not need to know if any of these are set, as those flags should only affect what Perl does with the pattern and its match variables, not how it gets compiled and executed.</source>
          <target state="translated">&lt;code&gt;eogc&lt;/code&gt; フラグはカンプ・ルーチンに渡される前に取り除かれています。正規表現エンジンは、これらのフラグが設定されているかどうかを知る必要はありません。これらのフラグは、Perlがパターンとその一致変数をどう処理するかだけに影響し、コンパイルと実行の方法には影響しないためです。</target>
        </trans-unit>
        <trans-unit id="5dcaf0131993c2fe373ceb68066111b75397ce84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equal()&lt;/code&gt; method takes two thread objects and returns true if the objects represent the same thread, and false if they don't.</source>
          <target state="translated">&lt;code&gt;equal()&lt;/code&gt; メソッドは、そうでない場合は、オブジェクトは同じスレッドを表し、falseの場合、真の2つのスレッド・オブジェクトとリターンを取ります。</target>
        </trans-unit>
        <trans-unit id="49890ceef3269a9849305b4a6f9b549bc3f0c714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errno&lt;/code&gt; value is optional. In versions of &lt;code&gt;autodie::exception&lt;/code&gt; 1.99 and earlier the code would try to automatically use the current value of &lt;code&gt;$!&lt;/code&gt;, but this was unreliable and is no longer supported.</source>
          <target state="translated">&lt;code&gt;errno&lt;/code&gt; 値はオプションです。 &lt;code&gt;autodie::exception&lt;/code&gt; 1.99以前のバージョンでは、コードは &lt;code&gt;$!&lt;/code&gt; 現在の値を自動的に使用しようとします。、しかしこれは信頼性が低く、サポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="bd5c1caef84073c78e4b57183c72209f1a463dd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eval&lt;/code&gt; method wrapped an &lt;code&gt;eval&lt;/code&gt; around a &lt;code&gt;join&lt;/code&gt;, and so waited for a thread to exit, passing along any values the thread might have returned and placing any errors into &lt;code&gt;$@&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 方法は、ラップ &lt;code&gt;eval&lt;/code&gt; 周り &lt;code&gt;join&lt;/code&gt; スレッドが戻ったかもしれない任意の値に沿って通過するとに、エラーを置くと、その出口にスレッドを待っていました &lt;code&gt;$@&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d80af1149bc4ce69fb624da74e40c6a5dafd9409" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;examples&lt;/code&gt; sub-directory has copies of all these filters implemented both as</source>
          <target state="translated">&lt;code&gt;examples&lt;/code&gt; サブディレクトリには、すべてのこれらのフィルタのコピーでは、どちらを実施しています</target>
        </trans-unit>
        <trans-unit id="1c3c6e01b0d3bd33a4ed4055dd31b80304ebc9d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exec&lt;/code&gt; function's job is to turn your process into another command and never to return. If that's not what you want to do, don't use &lt;code&gt;exec&lt;/code&gt;. :)</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数の仕事は、別のコマンドに、決してリターンにあなたのプロセスを有効にすることです。それがあなたのやりたいことではない場合は、 &lt;code&gt;exec&lt;/code&gt; を使用しないでください。:)</target>
        </trans-unit>
        <trans-unit id="cc84f2c59070bf508814fa3ebed34092fe0cca71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;experimental&lt;/code&gt; pragma exists to combine the required incantations into a single interface stable across releases of perl. For every experimental feature, this should enable the feature and silence warnings for the enclosing lexical scope:</source>
          <target state="translated">&lt;code&gt;experimental&lt;/code&gt; プラグマは、Perlのリリース間で単一のインタフェース安定に必要な呪文を組み合わせるために存在します。すべての実験的機能について、これにより、囲んでいる字句スコープの機能と無音の警告が有効になります。</target>
        </trans-unit>
        <trans-unit id="472a34a62dd6bdcf8df5e53d452c5f9dca79546f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra_mappings&lt;/code&gt; arguments takes a hash ref with the same type of structure as described in &lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt;, except with its values as one of the &lt;a href=&quot;#MERGE-STRATEGIES&quot;&gt;defined merge strategies&lt;/a&gt; or a code ref to a merging function.</source>
          <target state="translated">&lt;code&gt;extra_mappings&lt;/code&gt; 用に記載されているように引数は構造の同じタイプのハッシュリファレンスをとる&lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN ::メタ::仕様&lt;/a&gt;の一つとしてその値を除いて、&lt;a href=&quot;#MERGE-STRATEGIES&quot;&gt;定義されたマージ戦略&lt;/a&gt;またはマージ関数にコードREF。</target>
        </trans-unit>
        <trans-unit id="a371087f59ef9684a3303b0318405ae011e9ec34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract_delimited&lt;/code&gt; function formalizes the common idiom of extracting a single-character-delimited substring from the start of a string. For example, to extract a single-quote delimited string, the following code is typically used:</source>
          <target state="translated">&lt;code&gt;extract_delimited&lt;/code&gt; 関数は、文字列の先頭から単一文字で区切られた部分文字列を抽出する一般的なイディオムを定式化したものです。たとえば、単一引用符で区切られた文字列を抽出するには、通常次のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="01013bd276b6d8fe2331fe338d632601823957b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract_multiple&lt;/code&gt; subroutine takes a string to be processed and a list of extractors (subroutines or regular expressions) to apply to that string.</source>
          <target state="translated">&lt;code&gt;extract_multiple&lt;/code&gt; サブルーチンは、その文字列に適用するために処理される文字列と抽出（サブルーチンや正規表現）のリストを取ります。</target>
        </trans-unit>
        <trans-unit id="0234e9715d2d58dfe4e40eada785cc5d3ba85e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fail&lt;/code&gt; option indicates the action to be taken if a matching end tag is not encountered (i.e. before the end of the string or some &lt;code&gt;reject&lt;/code&gt; pattern matches). By default, a failure to match a closing tag causes &lt;code&gt;extract_tagged&lt;/code&gt; to immediately fail.</source>
          <target state="translated">&lt;code&gt;fail&lt;/code&gt; オプションは、対応する終了タグが遭遇していない場合に実行するアクションを示します（つまり、文字列の末尾または一部が前に &lt;code&gt;reject&lt;/code&gt; パターンの一致を）。デフォルトでは、終了タグとの一致に失敗すると、 &lt;code&gt;extract_tagged&lt;/code&gt; はすぐに失敗します。</target>
        </trans-unit>
        <trans-unit id="7fdb136937ca0405fd0e09f20f2a40c4f858261d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failed&lt;/code&gt; command reports all distributions that failed on one of &lt;code&gt;make&lt;/code&gt; , &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;install&lt;/code&gt; for some reason in the currently running shell session.</source>
          <target state="translated">&lt;code&gt;failed&lt;/code&gt; コマンドは次のいずれかに失敗したことをすべてのディストリビューションを報告 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; または &lt;code&gt;install&lt;/code&gt; 現在実行中のシェルのセッションで何らかの理由を。</target>
        </trans-unit>
        <trans-unit id="5ad80da9f3017cad820985c782b83967ca308a28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; hint to getaddrinfo(), or the family of the socket address passed to getnameinfo() is not supported.</source>
          <target state="translated">getaddrinfo（）への &lt;code&gt;family&lt;/code&gt; ヒント、またはgetnameinfo（）に渡されたソケットアドレスのファミリはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="acd804f7e1462316c1795d1b040a724ba816aee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; command just updates the &lt;code&gt;camel&lt;/code&gt; refs, as the objects themselves should have been fetched when pulling from &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; コマンドは、ちょうど更新 &lt;code&gt;camel&lt;/code&gt; から引いたときに自分自身がフェッチされている必要がありますオブジェクトとして、参考文献 &lt;code&gt;origin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aaa028e0e10b907654ea97ca6e2e56dbd54cf34e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; utility is available on FreeBSD. NetBSD and Dragonfly BSD may also have it from &lt;code&gt;pkgsrc&lt;/code&gt; . We only check for &lt;code&gt;fetch&lt;/code&gt; on those three platforms.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; ユーティリティはFreeBSD上で使用可能です。NetBSDとDragonfly BSDは、 &lt;code&gt;pkgsrc&lt;/code&gt; からそれを持っているかもしれません。これらの3つのプラットフォームでのみ &lt;code&gt;fetch&lt;/code&gt; をチェックします。</target>
        </trans-unit>
        <trans-unit id="88909127a630a0e568460e4ef567fdf6cebea70a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; utility is available on FreeBSD. NetBSD and Dragonfly BSD may also have it from &lt;code&gt;pkgsrc&lt;/code&gt;. We only check for &lt;code&gt;fetch&lt;/code&gt; on those three platforms.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; ユーティリティはFreeBSD上で使用可能です。NetBSDとDragonflyBSDも &lt;code&gt;pkgsrc&lt;/code&gt; から入手できます。これらの3つのプラットフォームでのみ &lt;code&gt;fetch&lt;/code&gt; をチェックします。</target>
        </trans-unit>
        <trans-unit id="9e227d5e7190288807dd09d5662a48f3b24c6088" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fforce&lt;/code&gt; pragma is a variant that emulates a &lt;code&gt;force get&lt;/code&gt; which erases the entire memory followed by the action specified, effectively restarting the whole get/make/test/install procedure from scratch.</source>
          <target state="translated">&lt;code&gt;fforce&lt;/code&gt; プラグマは、エミュレートバリアントである &lt;code&gt;force get&lt;/code&gt; メモリ全体を効果的に最初からインストール手順/全体のget /メイク/テストを再起動し、指定されたアクションが続く消去されます。</target>
        </trans-unit>
        <trans-unit id="67136aec5c09887a5fbdbeaf79603ace225d72fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; pragma enables compile-time and run-time verified class fields.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; プラグマは、コンパイル時と実行時にクラスのフィールドを検証できます。</target>
        </trans-unit>
        <trans-unit id="1da25c8608c050c137eec0fcb8b96dfa9d530dcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; , &lt;code&gt;flags&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; parameters are the direct equivalent of their dbopen() counterparts. The final parameter $DB_HASH performs the function of both the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;openinfo&lt;/code&gt; parameters in dbopen().</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; 、 &lt;code&gt;flags&lt;/code&gt; 及び &lt;code&gt;mode&lt;/code&gt; パラメータは、それらのdbopen（）対応の直接等価です。最終パラメータ$ DB_HASHの実行の両方の機能 &lt;code&gt;type&lt;/code&gt; と &lt;code&gt;openinfo&lt;/code&gt; のdbopenのパラメータ（）。</target>
        </trans-unit>
        <trans-unit id="d57b7b57482f3e0bdad4f727d65fbd7d3f8d08ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;flags&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; parameters are the direct equivalent of their dbopen() counterparts. The final parameter $DB_HASH performs the function of both the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;openinfo&lt;/code&gt; parameters in dbopen().</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; 、 &lt;code&gt;flags&lt;/code&gt; 及び &lt;code&gt;mode&lt;/code&gt; パラメータは、それらのdbopen（）対応の直接等価です。最終パラメータ$ DB_HASHの実行の両方の機能 &lt;code&gt;type&lt;/code&gt; と &lt;code&gt;openinfo&lt;/code&gt; のdbopenのパラメータ（）。</target>
        </trans-unit>
        <trans-unit id="711049b66f21cfb21f8abf404e302b9cb973606c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fileparse()&lt;/code&gt; routine divides a file path into its $dirs, $filename and (optionally) the filename $suffix.</source>
          <target state="translated">&lt;code&gt;fileparse()&lt;/code&gt; （オプション）ルーチン除算その$ dirsににファイルのパス、$ファイル名やファイル名$サフィックス。</target>
        </trans-unit>
        <trans-unit id="2894a076625213bf8472ba18a1068c216ff2972b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method is always the last thing called on the formatter,</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は、必ずフォーマッタで呼び出さ最後です</target>
        </trans-unit>
        <trans-unit id="2c20640b93e6e1928bfa39a7352c6c3efb0f1519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument can have &lt;code&gt;UNI_DISPLAY_ISPRINT&lt;/code&gt; set to display &lt;code&gt;isPRINT()&lt;/code&gt;able characters as themselves, &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; to display the &lt;code&gt;\\[nrfta\\]&lt;/code&gt; as the backslashed versions (like &lt;code&gt;&quot;\n&quot;&lt;/code&gt;) (&lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; is preferred over &lt;code&gt;UNI_DISPLAY_ISPRINT&lt;/code&gt; for &lt;code&gt;&quot;\\&quot;&lt;/code&gt;). &lt;code&gt;UNI_DISPLAY_QQ&lt;/code&gt; (and its alias &lt;code&gt;UNI_DISPLAY_REGEX&lt;/code&gt;) have both &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; and &lt;code&gt;UNI_DISPLAY_ISPRINT&lt;/code&gt; turned on.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数を持つことができる &lt;code&gt;UNI_DISPLAY_ISPRINT&lt;/code&gt; を表示するように設定 &lt;code&gt;isPRINT()&lt;/code&gt; は、それ自体としてできた文字を &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; を表示する &lt;code&gt;\\[nrfta\\]&lt;/code&gt; バックスラッシュバージョンとして（同様に &lt;code&gt;&quot;\n&quot;&lt;/code&gt; ）（ &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; がより好ましい &lt;code&gt;UNI_DISPLAY_ISPRINT&lt;/code&gt; ため &lt;code&gt;&quot;\\&quot;&lt;/code&gt; ）。 &lt;code&gt;UNI_DISPLAY_QQ&lt;/code&gt; （およびそのエイリアス &lt;code&gt;UNI_DISPLAY_REGEX&lt;/code&gt; ）では、 &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; と &lt;code&gt;UNI_DISPLAY_ISPRINT&lt;/code&gt; の両方がオンになっています。</target>
        </trans-unit>
        <trans-unit id="602708ab2289d55123d1e5cfa483278e5dc2b095" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument can have UNI_DISPLAY_ISPRINT set to display isPRINT()able characters as themselves, UNI_DISPLAY_BACKSLASH to display the \\[nrfta\\] as the backslashed versions (like '\n') (UNI_DISPLAY_BACKSLASH is preferred over UNI_DISPLAY_ISPRINT for \\). UNI_DISPLAY_QQ (and its alias UNI_DISPLAY_REGEX) have both UNI_DISPLAY_BACKSLASH and UNI_DISPLAY_ISPRINT turned on.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数は（UNI_DISPLAY_BACKSLASHが\\ためUNI_DISPLAY_ISPRINTよりも好ましい）（「\ n」のような）バックスラッシュバージョンとして\\ [nrfta \\]を表示するために、それ自体としてUNI_DISPLAY_BACKSLASHをisprintは（）ことができる文字を表示するUNI_DISPLAY_ISPRINTセットを有することができます。UNI_DISPLAY_QQ（およびそのエイリアスUNI_DISPLAY_REGEX）では、UNI_DISPLAY_BACKSLASHとUNI_DISPLAY_ISPRINTの両方がオンになっています。</target>
        </trans-unit>
        <trans-unit id="45b476535dde9c4df2a5ce21abd7562e13744b06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is as in &lt;a href=&quot;#pv_uni_display&quot;&gt;&quot;pv_uni_display&quot;&lt;/a&gt;().</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数は、のようにある&lt;a href=&quot;#pv_uni_display&quot;&gt;「pv_uni_display」&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="db2dfe02c9ae062f42652141438a9f9714c71cea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is as in &lt;a href=&quot;#pv_uni_display&quot;&gt;pv_uni_display&lt;/a&gt;().</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数がのようである&lt;a href=&quot;#pv_uni_display&quot;&gt;pv_uni_display&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="99738c77e0f1da5722068673963c4a8f215d0b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; can be:</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 指定できます。</target>
        </trans-unit>
        <trans-unit id="cefd6d4dfafa940aea51a92bdcb195eed2de69a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; method returned the flags for the thread - an integer value corresponding to the internal flags for the thread.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; スレッドの内部フラグに対応する整数値を-メソッドは、スレッドのためのフラグを返しました。</target>
        </trans-unit>
        <trans-unit id="8425d60192539121edf35ab62976eb395bc2a704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; option is optional and defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; オプションは、オプションで、デフォルトで &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cca4f06215bca47eddea026c40afe1b9a43be1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; parameter can be used to determine which of these operations the callbacks should respond to. The following flags are currently defined:</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; パラメータは、コールバックが応答する必要があり、これらの操作のどれかを決定するために使用することができます。現在、次のフラグが定義されています。</target>
        </trans-unit>
        <trans-unit id="459faaa5e3280fee22284d6b094987c77fa7de30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; parameter in all the</source>
          <target state="translated">すべての &lt;code&gt;flags&lt;/code&gt; パラメータ</target>
        </trans-unit>
        <trans-unit id="bfe1865df397f3698f54ec1b600413c38607abed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; parameter is a bitfield which indicates which of the &lt;code&gt;msixpn&lt;/code&gt; flags the regex was compiled with. It also contains additional info, such as if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; パラメータは、のかを示すビットフィールドである &lt;code&gt;msixpn&lt;/code&gt; 正規表現がコンパイルされたフラグ。また、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; が有効かどうかなどの追加情報も含まれています。</target>
        </trans-unit>
        <trans-unit id="6fd73fe1f5c776efd0dba4ac9a66a7649c62b563" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; parameter is a bitfield which indicates which of the &lt;code&gt;msixpn&lt;/code&gt; flags the regex was compiled with. It also contains additional info, such as if &lt;code&gt;use locale&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; パラメータは、のかを示すビットフィールドである &lt;code&gt;msixpn&lt;/code&gt; 正規表現がコンパイルされたフラグ。また、 &lt;code&gt;use locale&lt;/code&gt; が有効かどうかなどの追加情報も含まれています。</target>
        </trans-unit>
        <trans-unit id="600009146ad8caeb28aa4266bb11bcc93c6081be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; parameter is reserved for future use, and must always be zero.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; パラメータは、将来の使用のために予約されており、常にゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="41b4f74a7487e51319a762323a60ac4f87b549c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; parameter is reserved for future use. Currently it is only used by perl internally, so extensions should always pass zero.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; パラメータは、将来の使用のために予約されています。現在、これは内部でperlによってのみ使用されるため、拡張機能は常にゼロを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="b886ddfa56e0b9ebfe8f2070d41589a1086768dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush_cache()&lt;/code&gt; function will raise a run-time error unless the tied package provides a &lt;code&gt;CLEAR&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;flush_cache()&lt;/code&gt; 結ばれたパッケージが提供されない限り機能は、実行時エラーが発生します &lt;code&gt;CLEAR&lt;/code&gt; の方法を。</target>
        </trans-unit>
        <trans-unit id="124f73ccb9aad8a6d48616fcbcb3b56af5616b10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for(each)&lt;/code&gt; modifier is an iterator: it executes the statement once for each item in the LIST (with &lt;code&gt;$_&lt;/code&gt; aliased to each item in turn). There is no syntax to specify a C-style for loop or a lexically scoped iteration variable in this form.</source>
          <target state="translated">&lt;code&gt;for(each)&lt;/code&gt; 修飾子はイテレータです：それは一度（と、リスト内の各アイテムに対してstatementを実行 &lt;code&gt;$_&lt;/code&gt; 順番に各項目にエイリアス）。この形式では、Cスタイルのforループまたは字句スコープの反復変数を指定する構文はありません。</target>
        </trans-unit>
        <trans-unit id="8ee8bf6c49cb0d370b573c84b81eeff22daa626c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;force&lt;/code&gt; pragma may precede another command (currently: &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; , &lt;code&gt;test&lt;/code&gt; , or &lt;code&gt;install&lt;/code&gt; ) to execute the command from scratch and attempt to continue past certain errors. See the section below on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;code&gt;force&lt;/code&gt; ：（現在プラグマは、別のコマンド先行して &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; 、または &lt;code&gt;install&lt;/code&gt; 最初からコマンドを実行すると、過去の特定のエラーを継続しようとします）。以下の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="34f4026c135fb9c9e701839369f22ab72881f9e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; is the non-experimental way to set a topicalizer. If you wish to use the highly experimental &lt;code&gt;given&lt;/code&gt; , that could be written like this:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; のはのtopicalizerを設定するための非実験的な方法です。非常に実験的な &lt;code&gt;given&lt;/code&gt; を使用したい場合は、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="8adf50b4a12807b9b440b3e9dd59f76950784e30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; is the non-experimental way to set a topicalizer. If you wish to use the highly experimental &lt;code&gt;given&lt;/code&gt;, that could be written like this:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; のはのtopicalizerを設定するための非実験的な方法です。 &lt;code&gt;given&lt;/code&gt; た非常に実験的なものを使用したい場合は、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="de226564415ab69d6441fa2857763cf2ce5fdae3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; keyword is actually a synonym for the &lt;code&gt;for&lt;/code&gt; keyword, so you can use either. If VAR is omitted, &lt;code&gt;$_&lt;/code&gt; is set to each value.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; のキーワードは、実際の同義語である &lt;code&gt;for&lt;/code&gt; 、キーワード、あなたがいずれかを使用することができます。VARを省略すると、 &lt;code&gt;$_&lt;/code&gt; が各値に設定されます。</target>
        </trans-unit>
        <trans-unit id="eb1c9008000e928d5125162497dd929b484cbedf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; keyword is actually a synonym for the &lt;code&gt;for&lt;/code&gt; keyword. See &lt;code&gt;&lt;a href=&quot;perlsyn#Foreach-Loops&quot;&gt;&quot;Foreach Loops&quot; in perlsyn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; キーワードは、実際の同義語である &lt;code&gt;for&lt;/code&gt; のキーワード。 &lt;code&gt;&lt;a href=&quot;perlsyn#Foreach-Loops&quot;&gt;&quot;Foreach Loops&quot; in perlsyn&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="375dcc1d1d2f6f42cca4896811ca8fdfa2d3b491" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; keyword is actually a synonym for the &lt;code&gt;for&lt;/code&gt; keyword. See &lt;code&gt;&lt;a href=&quot;perlsyn#Foreach-Loops&quot;&gt;Foreach Loops in perlsyn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; キーワードは、実際の同義語である &lt;code&gt;for&lt;/code&gt; のキーワード。 &lt;code&gt;&lt;a href=&quot;perlsyn#Foreach-Loops&quot;&gt;Foreach Loops in perlsyn&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b86bb402e5da8037aee4e69efe060f892f194612" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; loop can also take a reference constructor for its loop variable, though the syntax is limited to one of the following, with an optional &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; after the backslash:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 構文は次のいずれかに限定されているもののループはまた、オプションで、そのループ変数の参照コンストラクタを取ることができ &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; バックスラッシュの後に：</target>
        </trans-unit>
        <trans-unit id="21bbc47a2581808651eb8a89a9f603b84e2a2657" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; loop can also take a reference constructor for its loop variable, though the syntax is limited to one of the following, with an optional &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, or &lt;code&gt;our&lt;/code&gt; after the backslash:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 構文は次のいずれかに限定されているもののループはまた、オプションで、そのループ変数の参照コンストラクタを取ることができ &lt;code&gt;my&lt;/code&gt; 、 &lt;code&gt;state&lt;/code&gt; 、または &lt;code&gt;our&lt;/code&gt; バックスラッシュの後に：</target>
        </trans-unit>
        <trans-unit id="d9c367bfb9bb4dab65fff1b13521d38572d69dfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; loop defaults to scoping its index variable dynamically in the manner of &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;. However, if the index variable is prefixed with the keyword &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, or if there is already a lexical by that name in scope, then a new lexical is created instead. Thus in the loop</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; の方法で動的にインデックス変数をスコープにループのデフォルトは &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 。ただし、インデックス変数の前にキーワード &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; が付いている場合、またはスコープ内にその名前のレキシカルがすでに存在する場合は、代わりに新しいレキシカルが作成されます。したがって、ループで</target>
        </trans-unit>
        <trans-unit id="fc6d0492eecb0b7b77ecb47ab19f74f65e2c9439" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; loop defaults to scoping its index variable dynamically in the manner of &lt;code&gt;local&lt;/code&gt;. However, if the index variable is prefixed with the keyword &lt;code&gt;my&lt;/code&gt;, or if there is already a lexical by that name in scope, then a new lexical is created instead. Thus in the loop</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; の方法で動的にインデックス変数をスコープにループのデフォルトは &lt;code&gt;local&lt;/code&gt; 。ただし、インデックス変数の前にキーワード &lt;code&gt;my&lt;/code&gt; が付いている場合、またはスコープ内にその名前のレキシカルがすでに存在する場合は、代わりに新しいレキシカルが作成されます。したがって、ループ内</target>
        </trans-unit>
        <trans-unit id="a4c4603cb509242d80999a110064359f577c21d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; loop iterates over a normal list value and sets the scalar variable VAR to be each element of the list in turn. If the variable is preceded with the keyword &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, then it is lexically scoped, and is therefore visible only within the loop. Otherwise, the variable is implicitly local to the loop and regains its former value upon exiting the loop. If the variable was previously declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, it uses that variable instead of the global one, but it's still localized to the loop. This implicit localization occurs</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; の通常のリスト値をループの反復と順番にリストの各要素であることがスカラー変数VARを設定します。変数の前にキーワード &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; が付いている場合は、レキシカルにスコープされているため、ループ内でのみ表示されます。それ以外の場合、変数は暗黙的にループに対してローカルであり、ループを終了すると元の値に戻ります。変数が以前に &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言されていた場合、グローバル変数ではなくその変数を使用しますが、それでもループにローカライズされています。この暗黙のローカリゼーションが発生します</target>
        </trans-unit>
        <trans-unit id="d0916d837b24f716ed6d234f4dd39fce8bf3c636" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foreach&lt;/code&gt; loop iterates over a normal list value and sets the scalar variable VAR to be each element of the list in turn. If the variable is preceded with the keyword &lt;code&gt;my&lt;/code&gt;, then it is lexically scoped, and is therefore visible only within the loop. Otherwise, the variable is implicitly local to the loop and regains its former value upon exiting the loop. If the variable was previously declared with &lt;code&gt;my&lt;/code&gt;, it uses that variable instead of the global one, but it's still localized to the loop. This implicit localization occurs</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; の通常のリスト値をループの反復と順番にリストの各要素であることがスカラー変数VARを設定します。変数の前にキーワード &lt;code&gt;my&lt;/code&gt; が付いている場合、その変数は字句スコープであるため、ループ内でのみ表示されます。それ以外の場合、変数は暗黙的にループに対してローカルであり、ループを終了すると以前の値に戻ります。変数が以前に &lt;code&gt;my&lt;/code&gt; で宣言されていた場合、グローバル変数の代わりにその変数を使用しますが、それでもループにローカライズされます。この暗黙のローカリゼーションが発生します</target>
        </trans-unit>
        <trans-unit id="bb381f2681e84a2954e18395a958e606ca6cba3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;frame&lt;/code&gt; option can be used to control the output of frame information. For example, contrast this expression trace:</source>
          <target state="translated">&lt;code&gt;frame&lt;/code&gt; オプションは、フレーム情報の出力を制御するために使用することができます。たとえば、次の式のトレースを対比します。</target>
        </trans-unit>
        <trans-unit id="591f72361e30bcbf229773b985f4b81bad64b394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gateway&lt;/code&gt; argument is only valid for IPv6, and requires a IPv6 address.</source>
          <target state="translated">&lt;code&gt;gateway&lt;/code&gt; 引数は、IPv6のためにのみ有効で、IPv6アドレスが必要です。</target>
        </trans-unit>
        <trans-unit id="01af8f56de621025abc07dc645713da63a5fe927" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_delimited_pat&lt;/code&gt; subroutine takes a single (string) argument and &amp;gt; builds a Friedl-style optimized regex that matches a string delimited by any one of the characters in the single argument. For example:</source>
          <target state="translated">&lt;code&gt;gen_delimited_pat&lt;/code&gt; サブルーチンは、単一の（文字列）の引数を取り、&amp;gt;単一の引数の文字のいずれかで区切られた文字列に一致するFriedlのスタイルに最適化正規表現を構築します。例えば：</target>
        </trans-unit>
        <trans-unit id="617ccfb027c1e5d2773071a87cbcedc95dc112aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_dup&lt;/code&gt; method assists in reading duplicate values from BTREE databases. The method can take the following forms:</source>
          <target state="translated">&lt;code&gt;get_dup&lt;/code&gt; BTREEデータベースから重複した値を読んで方法を支援。このメソッドは次の形式を取ることができます。</target>
        </trans-unit>
        <trans-unit id="38757d13de90c9736c762577e50e5a7475bfa2f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getname&lt;/code&gt; function returns the file specification associated with a Perl I/O handle. If an error occurs, it returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getname&lt;/code&gt; 機能は、Perl I / Oハンドルに関連付けられているファイル指定を返します。エラーが発生した場合は、 &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7ea986ecd3305b94f4546f1c6e3ce692488dd0fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getopt()&lt;/code&gt; function is similar, but its argument is a string containing all switches that take an argument. If no argument is provided for a switch, say, &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;, the corresponding &lt;code&gt;$opt_y&lt;/code&gt; will be set to an undefined value. Unspecified switches are silently accepted. Use of &lt;code&gt;getopt()&lt;/code&gt; is not recommended.</source>
          <target state="translated">&lt;code&gt;getopt()&lt;/code&gt; 関数は、類似しているが、その引数は、引数を取る全てのスイッチを含む文字列です。スイッチに引数が指定されていない場合、たとえば &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; の場合、対応する &lt;code&gt;$opt_y&lt;/code&gt; は未定義の値に設定されます。未指定のスイッチは黙って受け入れられます。 &lt;code&gt;getopt()&lt;/code&gt; の使用は推奨されません。</target>
        </trans-unit>
        <trans-unit id="d8dad5d808a96d01abfb75223a15354d771a92d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getopt()&lt;/code&gt; function is similar, but its argument is a string containing all switches that take an argument. If no argument is provided for a switch, say, &lt;code&gt;y&lt;/code&gt;, the corresponding &lt;code&gt;$opt_y&lt;/code&gt; will be set to an undefined value. Unspecified switches are silently accepted. Use of &lt;code&gt;getopt()&lt;/code&gt; is not recommended.</source>
          <target state="translated">&lt;code&gt;getopt()&lt;/code&gt; 関数は、類似しているが、その引数は、引数を取る全てのスイッチを含む文字列です。スイッチに引数が指定されていない場合、たとえば &lt;code&gt;y&lt;/code&gt; の場合、対応する &lt;code&gt;$opt_y&lt;/code&gt; は未定義の値に設定されます。指定されていないスイッチはサイレントに受け入れられます。 &lt;code&gt;getopt()&lt;/code&gt; の使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="c037451f79364fbd043155e0ffbbe91d2a70fbad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getopts()&lt;/code&gt; function processes single-character switches with switch clustering. Pass one argument which is a string containing all switches to be recognized. For each switch found, if an argument is expected and provided, &lt;code&gt;getopts()&lt;/code&gt; sets &lt;code&gt;$opt_x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the switch name) to the value of the argument. If an argument is expected but none is provided, &lt;code&gt;$opt_x&lt;/code&gt; is set to an undefined value. If a switch does not take an argument, &lt;code&gt;$opt_x&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;getopts()&lt;/code&gt; 関数は、スイッチクラスタリングを有する単一文字のスイッチを処理します。認識されるすべてのスイッチを含む文字列である1つの引数を渡します。見つかったスイッチごとに、引数が予期されて提供されている場合、 &lt;code&gt;getopts()&lt;/code&gt; は &lt;code&gt;$opt_x&lt;/code&gt; （ &lt;code&gt;x&lt;/code&gt; はスイッチ名）を引数の値に設定します。引数が期待されているが提供されていない場合、 &lt;code&gt;$opt_x&lt;/code&gt; は未定義の値に設定されます。スイッチが引数を取らない場合、 &lt;code&gt;$opt_x&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="91aef3725c2efdb205ada4f0830cb2c2f0326f3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getopts()&lt;/code&gt; function processes single-character switches with switch clustering. Pass one argument which is a string containing all switches to be recognized. For each switch found, if an argument is expected and provided, &lt;code&gt;getopts()&lt;/code&gt; sets &lt;code&gt;$opt_x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the switch name) to the value of the argument. If an argument is expected but none is provided, &lt;code&gt;$opt_x&lt;/code&gt; is set to an undefined value. If a switch does not take an argument, &lt;code&gt;$opt_x&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getopts()&lt;/code&gt; 関数は、スイッチクラスタリングを有する単一文字のスイッチを処理します。認識されるすべてのスイッチを含む文字列である1つの引数を渡します。見つかったスイッチごとに、引数が予期されて提供されている場合、 &lt;code&gt;getopts()&lt;/code&gt; は &lt;code&gt;$opt_x&lt;/code&gt; （ &lt;code&gt;x&lt;/code&gt; はスイッチ名）を引数の値に設定します。引数が必要であるが何も指定されていない場合、 &lt;code&gt;$opt_x&lt;/code&gt; は未定義の値に設定されます。スイッチが引数を取らない場合、 &lt;code&gt;$opt_x&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="fe182c59e721bf2edc44a9253eded06fe11c1a8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getopts()&lt;/code&gt; function returns true unless an invalid option was found.</source>
          <target state="translated">&lt;code&gt;getopts()&lt;/code&gt; 無効なオプションが見つかった場合を除き関数はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="a7db78679ac7caa25a3af4ac6eb9b08a0ab0fc92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gmtime&lt;/code&gt; operator will function properly if you have a working CRTL &lt;code&gt;gmtime()&lt;/code&gt; routine, or if the logical name SYS$TIMEZONE_DIFFERENTIAL is defined as the number of seconds which must be added to UTC to yield local time. (This logical name is defined automatically if you are running a version of VMS with built-in UTC support.) If neither of these cases is true, a warning message is printed, and &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;gmtime&lt;/code&gt; はのオペレータを使用すると、作業CRTLを持っている場合は正常に機能します &lt;code&gt;gmtime()&lt;/code&gt; ルーチンを、または論理名SYS $ TIMEZONE_DIFFERENTIALは現地時間を得るためにUTCに追加しなければならない秒数として定義されている場合。 （この論理名は、UTCサポートが組み込まれたバージョンのVMSを実行している場合、自動的に定義されます。）これらのいずれの場合も当てはまらない場合、警告メッセージが出力され、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ddf55542a974db500db0203f6bd0350de0ee8029" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto &amp;amp;NAME&lt;/code&gt; form is quite different from the other forms of &lt;a href=&quot;#goto-LABEL&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;. In fact, it isn't a goto in the normal sense at all, and doesn't have the stigma associated with other gotos. Instead, it exits the current subroutine (losing any changes set by &lt;a href=&quot;#local-EXPR&quot;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt;) and immediately calls in its place the named subroutine using the current value of &lt;a href=&quot;perlvar#%40_&quot;&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt;. This is used by &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to &lt;a href=&quot;perlvar#%40_&quot;&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt; in the current subroutine are propagated to the other subroutine.) After the &lt;a href=&quot;#goto-LABEL&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;, not even &lt;a href=&quot;#caller-EXPR&quot;&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; will be able to tell that this routine was called first.</source>
          <target state="translated">&lt;code&gt;goto &amp;amp;NAME&lt;/code&gt; の形式は、他の形態とは全く異なる&lt;a href=&quot;#goto-LABEL&quot;&gt; &lt;code&gt;goto&lt;/code&gt; &lt;/a&gt;。実際、それは通常の意味でのgotoではなく、他のゴトに関連する汚名はありません。代わりに、現在のサブルーチンを終了し（&lt;a href=&quot;#local-EXPR&quot;&gt; &lt;code&gt;local&lt;/code&gt; &lt;/a&gt;によって設定された変更をすべて失います）、&lt;a href=&quot;perlvar#%40_&quot;&gt; &lt;code&gt;@_&lt;/code&gt; &lt;/a&gt;現在の値を使用して名前付きサブルーチンをその場所ですぐに呼び出します。これはで使用されている &lt;code&gt;AUTOLOAD&lt;/code&gt; の願いは別のサブルーチンをロードして、他のサブルーチンが最初に呼ばれたようふりをすることサブルーチン（への変更点を除いて&lt;a href=&quot;perlvar#%40_&quot;&gt; &lt;code&gt;@_&lt;/code&gt; &lt;/a&gt;現在のサブルーチンでは、他のサブルーチンに伝播されます。）後に&lt;a href=&quot;#goto-LABEL&quot;&gt; &lt;code&gt;goto&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#caller-EXPR&quot;&gt; &lt;code&gt;caller&lt;/code&gt; &lt;/a&gt;さえない このルーチンが最初に呼び出されたことを知ることができます。</target>
        </trans-unit>
        <trans-unit id="b87b19f1c73c949cde9da8170870a148c4211b7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto EXPR&lt;/code&gt; form expects to evaluate &lt;code&gt;EXPR&lt;/code&gt; to a code reference or a label name. If it evaluates to a code reference, it will be handled like &lt;code&gt;goto &amp;amp;NAME&lt;/code&gt;, below. This is especially useful for implementing tail recursion via &lt;code&gt;goto __SUB__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;goto EXPR&lt;/code&gt; 形式は、評価することを期待 &lt;code&gt;EXPR&lt;/code&gt; をコード参照またはラベル名に。コード参照に評価される場合、以下の &lt;code&gt;goto &amp;amp;NAME&lt;/code&gt; ように処理されます。これは、 &lt;code&gt;goto __SUB__&lt;/code&gt; を介して末尾再帰を実装する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="5712e372b5c3349bd4c5753ceb08d65a1f34e0e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto LABEL&lt;/code&gt; form finds the statement labeled with LABEL and resumes execution there. It can't be used to get out of a block or subroutine given to &lt;a href=&quot;#sort-SUBNAME-LIST&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;. It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it's usually better to use some other construct such as &lt;a href=&quot;#last-LABEL&quot;&gt;&lt;code&gt;last&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#die-LIST&quot;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt;. The author of Perl has never felt the need to use this form of &lt;a href=&quot;#goto-LABEL&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt; (in Perl, that is; C is another matter). (The difference is that C does not offer named loops combined with loop control. Perl does, and this replaces most structured uses of &lt;a href=&quot;#goto-LABEL&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt; in other languages.)</source>
          <target state="translated">&lt;code&gt;goto LABEL&lt;/code&gt; 形式は、標識で標識された文を見つけだし、そこから実行を再開します。&lt;a href=&quot;#sort-SUBNAME-LIST&quot;&gt; &lt;code&gt;sort&lt;/code&gt; に&lt;/a&gt;指定されたブロックまたはサブルーチンから抜け出すために使用することはできません。サブルーチン外を含め、動的スコープ内の他のほとんどの場所に移動するために使用できますが、通常は、&lt;a href=&quot;#last-LABEL&quot;&gt; &lt;code&gt;last&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#die-LIST&quot;&gt; &lt;code&gt;die&lt;/code&gt; &lt;/a&gt;などの他の構成を使用することをお勧めします。 Perlの作者は、この形式の&lt;a href=&quot;#goto-LABEL&quot;&gt; &lt;code&gt;goto&lt;/code&gt; &lt;/a&gt;を使用する必要性を感じたことはありません（Perlでは、Cは別の問題です）。 （違いは、Cはループ制御と組み合わせた名前付きループを提供しないことです。Perlは提供します。これは他の言語での&lt;a href=&quot;#goto-LABEL&quot;&gt; &lt;code&gt;goto&lt;/code&gt; の&lt;/a&gt;ほとんどの構造化された使用に取って代わります。）</target>
        </trans-unit>
        <trans-unit id="60a01fb6d408173d3e22945b3c56ff55146388d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto&lt;/code&gt;-&amp;amp;NAME form is highly magical, and substitutes a call to the named subroutine for the currently running subroutine. This is used by &lt;code&gt;AUTOLOAD()&lt;/code&gt; subroutines that wish to load another subroutine and then pretend that the other subroutine had been called in the first place (except that any modifications to &lt;code&gt;@_&lt;/code&gt; in the current subroutine are propagated to the other subroutine.) After the &lt;code&gt;goto&lt;/code&gt;, not even &lt;code&gt;caller()&lt;/code&gt; will be able to tell that this routine was called first.</source>
          <target state="translated">&lt;code&gt;goto&lt;/code&gt; - ＆NAMEの形式は非常に魔法で、現在実行中のサブルーチンの名前が付けられたサブルーチンへの呼び出しを置き換えます。これは、別のサブルーチンをロードし、最初に他のサブルーチンが呼び出されたように見せかける &lt;code&gt;AUTOLOAD()&lt;/code&gt; サブルーチンによって使用されます（ただし、現在のサブルーチンでの &lt;code&gt;@_&lt;/code&gt; への変更は他のサブルーチンに伝播されます）。 &lt;code&gt;goto&lt;/code&gt; 、 &lt;code&gt;caller()&lt;/code&gt; でさえ、このルーチンが最初に呼び出されたことを知ることはできません。</target>
        </trans-unit>
        <trans-unit id="445db83ca6a37cdb271d1da44d8e4a2e039ee781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto&lt;/code&gt;-EXPR form expects a label name, whose scope will be resolved dynamically. This allows for computed &lt;code&gt;goto&lt;/code&gt;s per FORTRAN, but isn't necessarily recommended if you're optimizing for maintainability:</source>
          <target state="translated">&lt;code&gt;goto&lt;/code&gt; -EXPRフォームは、その範囲を動的に解決されるラベル名を、期待しています。これにより、FORTRANごとに計算された &lt;code&gt;goto&lt;/code&gt; が可能になりますが、保守性を最適化する場合は必ずしも推奨されません。</target>
        </trans-unit>
        <trans-unit id="3604bc760ddc7f229653ccec982fbb33374f75b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goto&lt;/code&gt;-LABEL form finds the statement labeled with LABEL and resumes execution there. It may not be used to go into any construct that requires initialization, such as a subroutine or a &lt;code&gt;foreach&lt;/code&gt; loop. It also can't be used to go into a construct that is optimized away. It can be used to go almost anywhere else within the dynamic scope, including out of subroutines, but it's usually better to use some other construct such as &lt;code&gt;last&lt;/code&gt; or &lt;code&gt;die&lt;/code&gt;. The author of Perl has never felt the need to use this form of &lt;code&gt;goto&lt;/code&gt; (in Perl, that is--C is another matter).</source>
          <target state="translated">&lt;code&gt;goto&lt;/code&gt; -labelフォームは標識で標識された文を見つけだし、そこから実行を再開します。サブルーチンや &lt;code&gt;foreach&lt;/code&gt; ループなど、初期化が必要な構成に入るには使用できません。また、最適化された構成に入るのに使用することもできません。サブルーチン外を含め、動的スコープ内の他のほとんどの場所に移動するために使用できますが、通常は、 &lt;code&gt;last&lt;/code&gt; や &lt;code&gt;die&lt;/code&gt; などの他の構成を使用することをお勧めします。Perlの作者は、この形式の &lt;code&gt;goto&lt;/code&gt; を使用する必要性を感じたことはありません（Perlでは--Cは別の問題です）。</target>
        </trans-unit>
        <trans-unit id="c2fadcd77a199834658c813ed1ecacfc31717619" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grammar_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;grammar_class&lt;/code&gt; はで説明したように、カスタマイズすることができ&lt;a href=&quot;#new&quot;&gt;、「新しいです」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="688985f64d8825090cd98452194bcbd67a98423b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grammar_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;grammar_class&lt;/code&gt; はで説明したように、カスタマイズすることができる&lt;a href=&quot;#new&quot;&gt;新しいです&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="777e123af8a17b58624e4e03631072776b99c240" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grep&lt;/code&gt; in scalar context returns the count. If you want the list of matching items, just use it in list context instead:</source>
          <target state="translated">スカラーコンテキストの &lt;code&gt;grep&lt;/code&gt; はカウントを返します。一致するアイテムのリストが必要な場合は、代わりにリストコンテキストで使用してください。</target>
        </trans-unit>
        <trans-unit id="361db5e35a8a030899f4185a6ca897ccf88b2984" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; formats pack a string that many nybbles (4-bit groups, representable as hexadecimal digits, &lt;code&gt;&quot;0&quot;..&quot;9&quot;&lt;/code&gt;&lt;code&gt;&quot;a&quot;..&quot;f&quot;&lt;/code&gt; ) long.</source>
          <target state="translated">&lt;code&gt;h&lt;/code&gt; 及び &lt;code&gt;H&lt;/code&gt; フォーマットでは、文字列をパック多くのニブル（16進数として表現4ビットのグループ、 &lt;code&gt;&quot;0&quot;..&quot;9&quot;&lt;/code&gt; &lt;code&gt;&quot;a&quot;..&quot;f&quot;&lt;/code&gt; ）長いです。</target>
        </trans-unit>
        <trans-unit id="282363bb17be47a4571b65bee183b55491c1858f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; formats pack a string that many nybbles (4-bit groups, representable as hexadecimal digits, &lt;code&gt;&quot;0&quot;..&quot;9&quot;&lt;/code&gt;&lt;code&gt;&quot;a&quot;..&quot;f&quot;&lt;/code&gt;) long.</source>
          <target state="translated">&lt;code&gt;h&lt;/code&gt; 及び &lt;code&gt;H&lt;/code&gt; フォーマットでは、文字列をパック多くのニブル（16進数として表現4ビットのグループ、 &lt;code&gt;&quot;0&quot;..&quot;9&quot;&lt;/code&gt; &lt;code&gt;&quot;a&quot;..&quot;f&quot;&lt;/code&gt; ）長いです。</target>
        </trans-unit>
        <trans-unit id="52b0ba82d51f8c56aed17fcdac89e94cd7a38305" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has()&lt;/code&gt; subroutine declares an attribute, and &lt;code&gt;Moose&lt;/code&gt; automatically creates accessors for these attributes. It also takes care of creating a &lt;code&gt;new()&lt;/code&gt; method for you. This constructor knows about the attributes you declared, so you can set them when creating a new &lt;code&gt;File&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;has()&lt;/code&gt; サブルーチンは、属性を宣言し、 &lt;code&gt;Moose&lt;/code&gt; 自動的にこれらの属性のアクセサを作成します。また、 &lt;code&gt;new()&lt;/code&gt; メソッドの作成も行います。このコンストラクタは宣言した属性を認識しているため、新しい &lt;code&gt;File&lt;/code&gt; を作成するときにそれらを設定できます。</target>
        </trans-unit>
        <trans-unit id="0b9970d46e3cdb5c6bbb0a61789e35dad5828ae7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has()&lt;/code&gt; subroutine declares an attribute, and &lt;code&gt;Moose&lt;/code&gt; automatically creates accessors for these attributes. It also takes care of creating a &lt;code&gt;new()&lt;/code&gt; method for you. This constructor knows about the attributes you declared, so you can set them when creating a new &lt;code&gt;File&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has()&lt;/code&gt; サブルーチンは、属性を宣言し、 &lt;code&gt;Moose&lt;/code&gt; 自動的にこれらの属性のアクセサを作成します。また、 &lt;code&gt;new()&lt;/code&gt; メソッドの作成も行います。このコンストラクターは、宣言した属性を認識しているため、新しい &lt;code&gt;File&lt;/code&gt; 作成するときにそれらを設定できます。</target>
        </trans-unit>
        <trans-unit id="76a592c009139dada36763e63a154e69a7ae21aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hide_buffered()&lt;/code&gt; method must return a boolean. This is used to tell buffered subtests whether or not to send it events as they are being buffered. See &lt;a href=&quot;Test2::API#run_subtest%28...%29&quot;&gt;&quot;run_subtest(...)&quot; in Test2::API&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;hide_buffered()&lt;/code&gt; メソッドは、ブール値を返す必要があります。これは、バッファリングされているサブテストに、バッファリング中にイベントを送信するかどうかを指示するために使用されます。詳細について&lt;a href=&quot;Test2::API#run_subtest%28...%29&quot;&gt;は、Test2 :: APIの「run_subtest（...）」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cfb4b1270d7a6c1577ddc7dc43612517ef56c1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; argument implicitly specifies the family if the family argument is not given.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; ファミリーの引数が指定されていない場合は、引数には暗黙のうちに家族を指定します。</target>
        </trans-unit>
        <trans-unit id="5a9683174ca55dfc5709630b38ddbf4013af69ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i!&lt;/code&gt; and &lt;code&gt;I!&lt;/code&gt; codes aren't different from &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; ; they are tolerated for completeness' sake.</source>
          <target state="translated">&lt;code&gt;i!&lt;/code&gt; そして &lt;code&gt;I!&lt;/code&gt; コードは &lt;code&gt;i&lt;/code&gt; や &lt;code&gt;I&lt;/code&gt; と変わりません。完全を期すために許容されます。</target>
        </trans-unit>
        <trans-unit id="788c747d1d57898e8c459685e81e82083e2bc64a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i!&lt;/code&gt; and &lt;code&gt;I!&lt;/code&gt; codes aren't different from &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt;; they are tolerated for completeness' sake.</source>
          <target state="translated">&lt;code&gt;i!&lt;/code&gt; そして &lt;code&gt;I!&lt;/code&gt; コードは &lt;code&gt;i&lt;/code&gt; や &lt;code&gt;I&lt;/code&gt; と同じです。それらは完全を期すために許容されます。</target>
        </trans-unit>
        <trans-unit id="441288d51b032bd9af407d3a9d7124153bae7480" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id()&lt;/code&gt; function is incorporated in</source>
          <target state="translated">&lt;code&gt;id()&lt;/code&gt; 関数に組み込まれています</target>
        </trans-unit>
        <trans-unit id="5b77bbf33fef07ab4b901464b3d1fbf57256a9cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id()&lt;/code&gt; function is provided in addition to the existing &lt;code&gt;Scalar::Util::refaddr()&lt;/code&gt; . Besides its short name it can be a little faster under some circumstances (and a bit slower under others). Benchmark if it matters. The working of &lt;code&gt;id()&lt;/code&gt; also allows the use of the class name as a</source>
          <target state="translated">&lt;code&gt;id()&lt;/code&gt; 関数は、既存のに加えて提供される &lt;code&gt;Scalar::Util::refaddr()&lt;/code&gt; 。その短い名前に加えて、状況によっては少し速くなる場合があります（他の状況では少し遅くなります）。必要に応じてベンチマーク。作業 &lt;code&gt;id()&lt;/code&gt; としても、クラス名を使用できます</target>
        </trans-unit>
        <trans-unit id="b2d4a03cd0e504b918c77f964222c03e6f8204c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id()&lt;/code&gt; function is provided in addition to the existing &lt;code&gt;Scalar::Util::refaddr()&lt;/code&gt;. Besides its short name it can be a little faster under some circumstances (and a bit slower under others). Benchmark if it matters. The working of &lt;code&gt;id()&lt;/code&gt; also allows the use of the class name as a</source>
          <target state="translated">&lt;code&gt;id()&lt;/code&gt; 関数は、既存のに加えて提供される &lt;code&gt;Scalar::Util::refaddr()&lt;/code&gt; 。その短い名前に加えて、状況によっては少し速くなる可能性があります（他の状況では少し遅くなります）。重要な場合はベンチマーク。 &lt;code&gt;id()&lt;/code&gt; の動作により、クラス名を</target>
        </trans-unit>
        <trans-unit id="1766324c2122418c9321a7a3323084287c423699" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; module is used to conditionally load another module. The construct:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; モジュールは条件付きで別のモジュールをロードするために使用されます。構成：</target>
        </trans-unit>
        <trans-unit id="1d508e8165fd2906f6e1a4da8eddef354ad1b2c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; module is used to conditionally load or unload another module. The construct</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; モジュールは、条件付きで他のモジュールをロードまたはアンロードするために使用されます。構成</target>
        </trans-unit>
        <trans-unit id="4b048e8a441fb17f85efa08c37a67df6bc5d9c00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement is straightforward. Because BLOCKs are always bounded by curly brackets, there is never any ambiguity about which &lt;code&gt;if&lt;/code&gt; an &lt;code&gt;else&lt;/code&gt; goes with. If you use &lt;code&gt;unless&lt;/code&gt; in place of &lt;code&gt;if&lt;/code&gt; , the sense of the test is reversed. Like &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;unless&lt;/code&gt; can be followed by &lt;code&gt;else&lt;/code&gt; . &lt;code&gt;unless&lt;/code&gt; can even be followed by one or more &lt;code&gt;elsif&lt;/code&gt; statements, though you may want to think twice before using that particular language construct, as everyone reading your code will have to think at least twice before they can understand what's going on.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 文は簡単です。 BLOCKは常に中かっこで囲まれているため、 &lt;code&gt;else&lt;/code&gt; が使用される &lt;code&gt;if&lt;/code&gt; あいまいさはありません。 ifの代わりに使用し &lt;code&gt;unless&lt;/code&gt; &lt;code&gt;if&lt;/code&gt; 、テストの意味が逆になります。同様に &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;unless&lt;/code&gt; 続けることができ &lt;code&gt;else&lt;/code&gt; 。1つ以上の &lt;code&gt;elsif&lt;/code&gt; ステートメントを続けることができ &lt;code&gt;unless&lt;/code&gt; て、特定の言語構成を使用する前に2度考えた方がよいかもしれません。コードを読んでいる人は、何が起こっているのかを理解する前に少なくとも2度考えなければならないからです。</target>
        </trans-unit>
        <trans-unit id="a3f74430f10fb167c78fb2a5e2886ee696f50106" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement is straightforward. Because BLOCKs are always bounded by curly brackets, there is never any ambiguity about which &lt;code&gt;if&lt;/code&gt; an &lt;code&gt;else&lt;/code&gt; goes with. If you use &lt;code&gt;unless&lt;/code&gt; in place of &lt;code&gt;if&lt;/code&gt;, the sense of the test is reversed. Like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt; can be followed by &lt;code&gt;else&lt;/code&gt;. &lt;code&gt;unless&lt;/code&gt; can even be followed by one or more &lt;code&gt;elsif&lt;/code&gt; statements, though you may want to think twice before using that particular language construct, as everyone reading your code will have to think at least twice before they can understand what's going on.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 文は簡単です。 BLOCKは常に中括弧で囲まれているため、 &lt;code&gt;else&lt;/code&gt; &lt;code&gt;if&lt;/code&gt; あいまいになることはありません。あなたが使用している場合 &lt;code&gt;unless&lt;/code&gt; の代わりに &lt;code&gt;if&lt;/code&gt; 、テストの意味が逆になります。同様に &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;unless&lt;/code&gt; 続けることができ &lt;code&gt;else&lt;/code&gt; 。1つ以上の &lt;code&gt;elsif&lt;/code&gt; ステートメントを続けることができ &lt;code&gt;unless&lt;/code&gt; 、その特定の言語構造を使用する前に2回考えたいと思うかもしれません。コードを読むすべての人は、何が起こっているのかを理解する前に少なくとも2回考える必要があるからです。</target>
        </trans-unit>
        <trans-unit id="e9f3b671cb1eeb07ae7f1604035f9acb4eeee7c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ihave&lt;/code&gt; command informs the server that the client has an article whose id is &lt;code&gt;MSGID&lt;/code&gt; . If the server desires a copy of that article, and &lt;code&gt;MESSAGE&lt;/code&gt; has been given the it will be sent.</source>
          <target state="translated">&lt;code&gt;ihave&lt;/code&gt; コマンドは、クライアントがIDです記事持っていることをサーバーに通知 &lt;code&gt;MSGID&lt;/code&gt; を。サーバーがその記事のコピーを希望し、 &lt;code&gt;MESSAGE&lt;/code&gt; が提供されている場合は、それが送信されます。</target>
        </trans-unit>
        <trans-unit id="31b23815f5a49e656771e950c98aed03ec7f0fc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ihave&lt;/code&gt; command informs the server that the client has an article whose id is &lt;code&gt;MSGID&lt;/code&gt;. If the server desires a copy of that article and &lt;code&gt;MESSAGE&lt;/code&gt; has been given then it will be sent.</source>
          <target state="translated">&lt;code&gt;ihave&lt;/code&gt; コマンドは、クライアントがIDです記事持っていることをサーバーに通知 &lt;code&gt;MSGID&lt;/code&gt; を。サーバーがその記事のコピーを希望し、 &lt;code&gt;MESSAGE&lt;/code&gt; が与えられている場合、それは送信されます。</target>
        </trans-unit>
        <trans-unit id="9aeda9f25872f01fa1451e80b809c2f965a34d18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; method is used to create an instance of the filter. It is called indirectly by Perl when it encounters the &lt;code&gt;use MyFilter&lt;/code&gt; line in a source file (See &lt;a href=&quot;perlfunc#import&quot;&gt;&quot;import&quot; in perlfunc&lt;/a&gt; for more details on &lt;code&gt;import&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 方法は、フィルタのインスタンスを作成するために使用されます。それが遭遇したときにはPerlによって間接的に呼び出され &lt;code&gt;use MyFilter&lt;/code&gt; ソースファイルの行を（参照&lt;a href=&quot;perlfunc#import&quot;&gt;はperlfuncで「輸入」&lt;/a&gt;の詳細については &lt;code&gt;import&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a41824798980582f7eebe5a9af3082e01f3a340" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;intercept { ... }&lt;/code&gt; tool lets you temporarily intercept all events generated by the test system:</source>
          <target state="translated">&lt;code&gt;intercept { ... }&lt;/code&gt; このツールは、テスト・システムによって生成されたすべてのイベントを傍受一時的に次のことができます。</target>
        </trans-unit>
        <trans-unit id="be9e48c7280cc08e3dbfd771c25dd8dc760ce4df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;io&lt;/code&gt; options mean that any subsequent open() (or similar I/O operations) in main program scope will have the &lt;code&gt;:utf8&lt;/code&gt; PerlIO layer implicitly applied to them, in other words, UTF-8 is expected from any input stream, and UTF-8 is produced to any output stream. This is just the default set via &lt;a href=&quot;perlvar#%24%7B%5EOPEN%7D&quot;&gt;&lt;code&gt;${^OPEN}&lt;/code&gt;&lt;/a&gt;, with explicit layers in open() and with binmode() one can manipulate streams as usual. This has no effect on code run in modules.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; オプションは、メインプログラムの範囲内の任意の）（オープン後続の（または類似のI / O操作が）を有するであろうことを意味 &lt;code&gt;:utf8&lt;/code&gt; PerlIOを層は暗黙UTF-8は、任意の入力ストリームから期待される、換言すれば、それらに適用され、UTF -8は任意の出力ストリームに対して生成されます。これは&lt;a href=&quot;perlvar#%24%7B%5EOPEN%7D&quot;&gt; &lt;code&gt;${^OPEN}&lt;/code&gt; &lt;/a&gt;を介したデフォルトの設定であり、open（）に明示的なレイヤーがあり、binmode（）を使用すると通常どおりストリームを操作できます。これは、モジュールで実行されるコードには影響しません。</target>
        </trans-unit>
        <trans-unit id="31aa9addcda21b8978ff9bf041daba569f826e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;io&lt;/code&gt; options mean that any subsequent open() (or similar I/O operations) in the current file scope will have the &lt;code&gt;:utf8&lt;/code&gt; PerlIO layer implicitly applied to them, in other words, UTF-8 is expected from any input stream, and UTF-8 is produced to any output stream. This is just the default, with explicit layers in open() and with binmode() one can manipulate streams as usual.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; オプションは、現在のファイルスコープ内の任意）（オープン後続の（または類似のI / O操作が）を有するであろうことを意味 &lt;code&gt;:utf8&lt;/code&gt; PerlIOを層は暗黙UTF-8は、任意の入力ストリームから期待される、換言すれば、それらに適用される、及びUTF-8は任意の出力ストリームに生成されます。これは単なるデフォルトであり、open（）に明示的なレイヤーがあり、binmode（）を使用すると、通常どおりストリームを操作できます。</target>
        </trans-unit>
        <trans-unit id="ea8cc24a093a2a51529b8db29000183dfdfc585d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isa&lt;/code&gt; method returns</source>
          <target state="translated">&lt;code&gt;isa&lt;/code&gt; メソッドが返します</target>
        </trans-unit>
        <trans-unit id="d80df4437426b10544ca2a3550913f7483c70900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keep_alive&lt;/code&gt; parameter enables a persistent connection, but only to a single destination scheme, host and port. Also, if any connection-relevant attributes are modified, or if the process ID or thread ID change, the persistent connection will be dropped. If you want persistent connections across multiple destinations, use multiple HTTP::Tiny objects.</source>
          <target state="translated">&lt;code&gt;keep_alive&lt;/code&gt; パラメータがだけ単一の宛先スキーム、ホストおよびポートへの、永続的な接続を可能にします。また、接続関連の属性が変更された場合、またはプロセスIDまたはスレッドIDが変更された場合、永続的な接続は切断されます。複数の宛先にまたがる持続的接続が必要な場合は、複数のHTTP :: Tinyオブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="82e537c44915ef2c8c7d2ba733eb7ee50f9fc357" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys()&lt;/code&gt; function also resets the iterator, which means that you may see strange results if you use this between uses of other hash operators such as &lt;code&gt;each()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; 関数は、次のような他のハッシュ演算子の使用の間、これを使用する場合は奇妙な結果を見ることができることを意味し、イテレータ、リセット &lt;code&gt;each()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59f328cf1649c302313e1693d9d3ed492ede670c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kill&lt;/code&gt; function can be used to test this functionality from within a program.</source>
          <target state="translated">&lt;code&gt;kill&lt;/code&gt; 機能は、プログラム内からこの機能をテストするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8b31ef1c90508af7c0b307ce12a58574a2fffa8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kill&lt;/code&gt; function in the parent's &lt;code&gt;if&lt;/code&gt; block is there to send a signal to our child process, currently running in the &lt;code&gt;else&lt;/code&gt; block, as soon as the remote server has closed its end of the connection.</source>
          <target state="translated">親の &lt;code&gt;if&lt;/code&gt; ブロックの &lt;code&gt;kill&lt;/code&gt; 関数は、リモートサーバーが接続の終了を閉じるとすぐに、現在 &lt;code&gt;else&lt;/code&gt; ブロックで実行されている子プロセスにシグナルを送信するためにあります。</target>
        </trans-unit>
        <trans-unit id="40b75cea7c9c256a2c7f367ec1f2a28305318646" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;klen&lt;/code&gt; parameter is the length of the key being passed in (Note that you cannot pass 0 in as a value of &lt;code&gt;klen&lt;/code&gt; to tell Perl to measure the length of the key). The &lt;code&gt;val&lt;/code&gt; argument contains the SV pointer to the scalar being stored, and &lt;code&gt;hash&lt;/code&gt; is the precomputed hash value (zero if you want &lt;code&gt;hv_store&lt;/code&gt; to calculate it for you). The &lt;code&gt;lval&lt;/code&gt; parameter indicates whether this fetch is actually a part of a store operation, in which case a new undefined value will be added to the HV with the supplied key and &lt;code&gt;hv_fetch&lt;/code&gt; will return as if the value had already existed.</source>
          <target state="translated">&lt;code&gt;klen&lt;/code&gt; パラメータは、（あなたがの値として0を渡すことができないことに注意してくださいに渡される鍵の長さである &lt;code&gt;klen&lt;/code&gt; キーの長さを測定するためにPerlを指示します）。 &lt;code&gt;val&lt;/code&gt; の引数は、スカラへのSVポインタが格納されている含まれており、 &lt;code&gt;hash&lt;/code&gt; （あなたがしたい場合は、ゼロ事前に計算されたハッシュ値である &lt;code&gt;hv_store&lt;/code&gt; があなたのためにそれを計算します）。 &lt;code&gt;lval&lt;/code&gt; パラメータは、これが実際に新しい未定義の値が供給鍵とを用いてHVに追加される場合に、ストア動作の一部であるかどうかを示すフェッチ &lt;code&gt;hv_fetch&lt;/code&gt; 値が既に存在していたかのように戻ります。</target>
        </trans-unit>
        <trans-unit id="ce7404a130e41b36d0d6586ea9856d3d751bce9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; command immediately exits the loop in question. The &lt;code&gt;continue&lt;/code&gt; block, if any, is not executed:</source>
          <target state="translated">&lt;code&gt;last&lt;/code&gt; コマンドループを即座に抜けます。 &lt;code&gt;continue&lt;/code&gt; 存在する場合、ブロックを、実行されません。</target>
        </trans-unit>
        <trans-unit id="55c1db6e5ea234d6a6e740b669d07b2f2f87de01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length(NAME)&lt;/code&gt; Keyword</source>
          <target state="translated">&lt;code&gt;length(NAME)&lt;/code&gt; キーワード</target>
        </trans-unit>
        <trans-unit id="d1b3be6dbaf0292e629ff79d5077e6e86e950020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;line numbers&lt;/code&gt; are a comma separated list of line numbers (some preceded by code letters) where that object is used in some way. Simple uses aren't preceded by a code letter. Introductions (such as where a lexical is first defined with &lt;code&gt;&lt;a href=&quot;../functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;) are indicated with the letter &quot;i&quot;. Subroutine and method calls are indicated by the character &quot;&amp;amp;&quot;. Subroutine definitions are indicated by &quot;s&quot; and format definitions by &quot;f&quot;.</source>
          <target state="translated">&lt;code&gt;line numbers&lt;/code&gt; 、そのオブジェクトが何らかの方法で使用される行番号（いくつかはコード文字によって先行）のカンマ区切りのリストです。簡単な使い方の前にコードレターはありません。イントロダクション（語彙が &lt;code&gt;&lt;a href=&quot;../functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で最初に定義される場所など）は、文字「i」で示されます。サブルーチンとメソッドの呼び出しは、文字「＆」で示されます。サブルーチン定義は「s」で、フォーマット定義は「f」で示します。</target>
        </trans-unit>
        <trans-unit id="236b6ae4af5c95ab170ad24f4ae0aa38234165ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;line numbers&lt;/code&gt; are a comma separated list of line numbers (some preceded by code letters) where that object is used in some way. Simple uses aren't preceded by a code letter. Introductions (such as where a lexical is first defined with &lt;code&gt;my&lt;/code&gt;) are indicated with the letter &quot;i&quot;. Subroutine and method calls are indicated by the character &quot;&amp;amp;&quot;. Subroutine definitions are indicated by &quot;s&quot; and format definitions by &quot;f&quot;.</source>
          <target state="translated">&lt;code&gt;line numbers&lt;/code&gt; 、そのオブジェクトが何らかの方法で使用される行番号（いくつかはコード文字によって先行）のカンマ区切りのリストです。単純な使用の前にコード文字はありません。イントロダクション（レキシカルが最初に &lt;code&gt;my&lt;/code&gt; で定義されている場合など）は、文字「i」で示されます。サブルーチンとメソッドの呼び出しは、文字「＆」で示されます。サブルーチン定義は「s」で示され、フォーマット定義は「f」で示されます。</target>
        </trans-unit>
        <trans-unit id="1df1ad78d22b500a60841a63c43cbb5af0dd2c94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lock()&lt;/code&gt; function takes a shared variable and puts a lock on it. No other thread may lock the variable until the variable is unlocked by the thread holding the lock. Unlocking happens automatically when the locking thread exits the block that contains the call to the &lt;code&gt;lock()&lt;/code&gt; function. Using &lt;code&gt;lock()&lt;/code&gt; is straightforward: This example has several threads doing some calculations in parallel, and occasionally updating a running total:</source>
          <target state="translated">&lt;code&gt;lock()&lt;/code&gt; 関数は共有変数を取り、それにロックを置きます。ロックを保持しているスレッドによって変数のロックが解除されるまで、他のスレッドは変数をロックできません。ロック解除は、ロックスレッドが &lt;code&gt;lock()&lt;/code&gt; 関数の呼び出しを含むブロックを終了するときに自動的に行われます。 &lt;code&gt;lock()&lt;/code&gt; の使用は簡単です。この例では、いくつかのスレッドが並行していくつかの計算を実行し、時折現在の合計を更新しています。</target>
        </trans-unit>
        <trans-unit id="ed26c2274a611c42add606638c2955102446922f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lock_store&lt;/code&gt; and &lt;code&gt;lock_nstore&lt;/code&gt; routine are equivalent to &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;nstore&lt;/code&gt; , except that they get an exclusive lock on the file before writing. Likewise, &lt;code&gt;lock_retrieve&lt;/code&gt; does the same as &lt;code&gt;retrieve&lt;/code&gt; , but also gets a shared lock on the file before reading.</source>
          <target state="translated">&lt;code&gt;lock_store&lt;/code&gt; と &lt;code&gt;lock_nstore&lt;/code&gt; ルーチンに相当している &lt;code&gt;store&lt;/code&gt; と &lt;code&gt;nstore&lt;/code&gt; 彼らは書き込み前に、ファイルに排他ロックを取得することを除いて、。同様に、 &lt;code&gt;lock_retrieve&lt;/code&gt; は &lt;code&gt;retrieve&lt;/code&gt; と同じですが、読み取る前にファイルの共有ロックも取得します。</target>
        </trans-unit>
        <trans-unit id="c09918116ac6368cc484da6987f7bb75bbaec828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lock_store&lt;/code&gt; and &lt;code&gt;lock_nstore&lt;/code&gt; routine are equivalent to &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;nstore&lt;/code&gt;, except that they get an exclusive lock on the file before writing. Likewise, &lt;code&gt;lock_retrieve&lt;/code&gt; does the same as &lt;code&gt;retrieve&lt;/code&gt;, but also gets a shared lock on the file before reading.</source>
          <target state="translated">&lt;code&gt;lock_store&lt;/code&gt; と &lt;code&gt;lock_nstore&lt;/code&gt; ルーチンに相当している &lt;code&gt;store&lt;/code&gt; と &lt;code&gt;nstore&lt;/code&gt; 彼らは書き込み前に、ファイルに排他ロックを取得することを除いて、。同様に、 &lt;code&gt;lock_retrieve&lt;/code&gt; は &lt;code&gt;retrieve&lt;/code&gt; と同じことを行いますが、読み取る前にファイルの共有ロックを取得します。</target>
        </trans-unit>
        <trans-unit id="931b71dd87fea82969167ed5b3226571750cd592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mail&lt;/code&gt; method can some additional ESMTP OPTIONS which is passed in hash like fashion, using key and value pairs. Possible options are:</source>
          <target state="translated">&lt;code&gt;mail&lt;/code&gt; 方法は、いくつかの追加のESMTPオプションのキーと値のペアを使用して、ハッシュ形式で渡される可能性があります。可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1672385883542a7bfdb246cc1c07640a71a68feb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;emake&lt;/code&gt; accept both real and complex arguments. When they cannot recognize the arguments they will die with error messages like the following</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; と &lt;code&gt;emake&lt;/code&gt; は両方の実数と複素数の引数を取ります。引数を認識できない場合、次のようなエラーメッセージが表示されて死亡します。</target>
        </trans-unit>
        <trans-unit id="c85fa07be63e0e0f2104a7ea90d6fd3b867aea55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make_path&lt;/code&gt; function creates the given directories if they don't exist before, much like the Unix command &lt;code&gt;mkdir -p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; の彼らは多くのUnixコマンドと同様に、以前に存在しない場合、この関数は、指定されたディレクトリを作成し &lt;code&gt;mkdir -p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36df2e300d21e511804bebffd14eb9e7ae60ac30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make_path&lt;/code&gt; function creates the given directories if they don't exists before, much like the Unix command &lt;code&gt;&lt;a href=&quot;../functions/mkdir&quot;&gt;mkdir&lt;/a&gt; -p&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; の彼らは以前に存在していない場合、この関数は、多くのUnixコマンドのように、与えられたディレクトリを作成し &lt;code&gt;&lt;a href=&quot;../functions/mkdir&quot;&gt;mkdir&lt;/a&gt; -p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="072d415ade3aa9a1737c770e2e53b08afe60d304" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match&lt;/code&gt; , &lt;code&gt;gmatch&lt;/code&gt; , &lt;code&gt;subst&lt;/code&gt; , &lt;code&gt;gsubst&lt;/code&gt; methods work like &lt;code&gt;&lt;a href=&quot;../functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s///g&lt;/a&gt;&lt;/code&gt;, respectively, but they are not aware of any pattern, but only a literal substring.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 、 &lt;code&gt;gmatch&lt;/code&gt; 、 &lt;code&gt;subst&lt;/code&gt; 、 &lt;code&gt;gsubst&lt;/code&gt; 方法の作業のような &lt;code&gt;&lt;a href=&quot;../functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s///g&lt;/a&gt;&lt;/code&gt; 、それぞれ、それらは任意のパターンを認識していないが、唯一のリテラルのストリング。</target>
        </trans-unit>
        <trans-unit id="3e1a1e48900b4f1b87b0c10e8e5f854b940363da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;gmatch&lt;/code&gt;, &lt;code&gt;subst&lt;/code&gt;, &lt;code&gt;gsubst&lt;/code&gt; methods work like &lt;code&gt;m//&lt;/code&gt;, &lt;code&gt;m//g&lt;/code&gt;, &lt;code&gt;s///&lt;/code&gt;, &lt;code&gt;s///g&lt;/code&gt;, respectively, but they are not aware of any pattern, but only a literal substring.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 、 &lt;code&gt;gmatch&lt;/code&gt; 、 &lt;code&gt;subst&lt;/code&gt; 、 &lt;code&gt;gsubst&lt;/code&gt; 方法の作業のような &lt;code&gt;m//&lt;/code&gt; 、 &lt;code&gt;m//g&lt;/code&gt; 、 &lt;code&gt;s///&lt;/code&gt; 、 &lt;code&gt;s///g&lt;/code&gt; 、それぞれ、それらは任意のパターンを認識していないが、唯一のリテラルのストリング。</target>
        </trans-unit>
        <trans-unit id="ece173d4e6c78d6e5935815075ac81cc7c62a227" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memory&lt;/code&gt; value is not an absolute or exact limit on the memory used. &lt;code&gt;Tie::File&lt;/code&gt; objects contains some structures besides the read cache and the deferred write buffer, whose sizes are not charged against &lt;code&gt;memory&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;memory&lt;/code&gt; 値が使用されるメモリ上の絶対または正確制限はありません。 &lt;code&gt;Tie::File&lt;/code&gt; オブジェクトには、読み取りキャッシュと据え置き書き込みバッファーのほかに、サイズが &lt;code&gt;memory&lt;/code&gt; に対して課金されない構造体がいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="e86eeea566744434422bb67f1ca33c0f448174c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memory&lt;/code&gt; value is not an absolute or exact limit on the memory used. &lt;code&gt;Tie::File&lt;/code&gt; objects contains some structures besides the read cache and the deferred write buffer, whose sizes are not charged against &lt;code&gt;memory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;memory&lt;/code&gt; 値が使用されるメモリ上の絶対または正確制限はありません。 &lt;code&gt;Tie::File&lt;/code&gt; オブジェクトには、読み取りキャッシュと遅延書き込みバッファ以外にいくつかの構造が含まれてい &lt;code&gt;memory&lt;/code&gt; 。これらのサイズはメモリに対して課金されません。</target>
        </trans-unit>
        <trans-unit id="19d121e9a361d9d72576c01fa16affeece8189c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mg_virtual&lt;/code&gt; field in the &lt;code&gt;MAGIC&lt;/code&gt; structure is a pointer to an &lt;code&gt;MGVTBL&lt;/code&gt; , which is a structure of function pointers and stands for &quot;Magic Virtual Table&quot; to handle the various operations that might be applied to that variable.</source>
          <target state="translated">&lt;code&gt;MAGIC&lt;/code&gt; 構造体の &lt;code&gt;mg_virtual&lt;/code&gt; フィールドは &lt;code&gt;MGVTBL&lt;/code&gt; へのポインターです。これは関数ポインターの構造体であり、その変数に適用される可能性のあるさまざまな操作を処理するための「マジック仮想テーブル」を表しています。</target>
        </trans-unit>
        <trans-unit id="7a8acc1e771fdb8b24c87ae131045c8c79a6a526" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mg_virtual&lt;/code&gt; field in the &lt;code&gt;MAGIC&lt;/code&gt; structure is a pointer to an &lt;code&gt;MGVTBL&lt;/code&gt;, which is a structure of function pointers and stands for &quot;Magic Virtual Table&quot; to handle the various operations that might be applied to that variable.</source>
          <target state="translated">&lt;code&gt;MAGIC&lt;/code&gt; 構造体の &lt;code&gt;mg_virtual&lt;/code&gt; フィールドは、 &lt;code&gt;MGVTBL&lt;/code&gt; へのポインタです。これは、関数ポインタの構造体であり、その変数に適用される可能性のあるさまざまな操作を処理するための「MagicVirtualTable」を表します。</target>
        </trans-unit>
        <trans-unit id="2676c3bd8442c2414026f369d263715f307f12fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mkpath()&lt;/code&gt; function provide the legacy interface of &lt;code&gt;make_path()&lt;/code&gt; with a different interpretation of the arguments passed. The behaviour and return value of the function is otherwise identical to &lt;code&gt;make_path()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mkpath()&lt;/code&gt; 関数は、のレガシーインタフェースを提供 &lt;code&gt;make_path()&lt;/code&gt; 渡された引数の異なる解釈を。関数の動作と戻り値は、それ以外は &lt;code&gt;make_path()&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="a5023c90eb5f90ef422233e2dd5d44f7824eab24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; related one will be matched against</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; に関連するものが照合されます</target>
        </trans-unit>
        <trans-unit id="47efd6577f009e8c4308e174f5b14a11ddfaec14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;move&lt;/code&gt; function also takes two parameters: the current name and the intended name of the file to be moved. If the destination already exists and is a directory, and the source is not a directory, then the source file will be renamed into the directory specified by the destination.</source>
          <target state="translated">&lt;code&gt;move&lt;/code&gt; 機能は、2つのパラメータを取ります：現在の名前とファイルの意図した名前が移動します。宛先がすでに存在し、ディレクトリであり、ソースがディレクトリでない場合、ソースファイルは宛先で指定されたディレクトリに名前変更されます。</target>
        </trans-unit>
        <trans-unit id="f9ad05dfff8b94ab9a9d935cf92a180ec9ff2c2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;my&lt;/code&gt; is actually not required; you could just use:</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; ISは、実際には必要ありません。あなたはただ使うことができます：</target>
        </trans-unit>
        <trans-unit id="38fd69505c43bd3a6104acf78cba741dff69018d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;my&lt;/code&gt; is simply a modifier on something you might assign to. So when you do assign to variables in its argument list, &lt;code&gt;my&lt;/code&gt; doesn't change whether those variables are viewed as a scalar or an array. So</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; 単にあなたがに割り当てるかもしれない何かの修飾子です。あなたはその引数リスト内の変数に代入を行うときに、 &lt;code&gt;my&lt;/code&gt; それらの変数がスカラーまたは配列として表示されているかどうかを変更しません。そう</target>
        </trans-unit>
        <trans-unit id="19231a9a0cfdbf1775816cb2ae3551e57856cb0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;my&lt;/code&gt; operator declares the listed variables to be lexically confined to the enclosing block, conditional (&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;unless&lt;/code&gt;/&lt;code&gt;elsif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;), loop (&lt;code&gt;for&lt;/code&gt;/&lt;code&gt;foreach&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;/&lt;code&gt;until&lt;/code&gt;/&lt;code&gt;continue&lt;/code&gt;), subroutine, &lt;code&gt;eval&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;require&lt;/code&gt;/&lt;code&gt;use&lt;/code&gt;'d file. If more than one value is listed, the list must be placed in parentheses. All listed elements must be legal lvalues. Only alphanumeric identifiers may be lexically scoped--magical built-ins like &lt;code&gt;$/&lt;/code&gt; must currently be &lt;code&gt;local&lt;/code&gt;ized with &lt;code&gt;local&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; オペレータは、字句的に取り囲むブロック、（条件に限定することが記載されている変数を宣言して &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;unless&lt;/code&gt; / &lt;code&gt;elsif&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; ）、ループ（ &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;foreach&lt;/code&gt; の/ &lt;code&gt;while&lt;/code&gt; / &lt;code&gt;until&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt; ）、サブルーチン、 &lt;code&gt;eval&lt;/code&gt; の、あるいは &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;require&lt;/code&gt; / &lt;code&gt;use&lt;/code&gt; 'dファイル。複数の値がリストされている場合は、リストを括弧で囲む必要があります。リストされているすべての要素は、正当な左辺値である必要があります。英数字の識別子のみが字句スコープになります- &lt;code&gt;$/&lt;/code&gt; ような魔法の組み込みは現在 &lt;code&gt;local&lt;/code&gt; なければなりません代わりに &lt;code&gt;local&lt;/code&gt; 化されました。</target>
        </trans-unit>
        <trans-unit id="82300ffe8ea8c4a83935f63ac88aba05d079a68e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;namlen&lt;/code&gt; arguments are used to associate a string with the magic, typically the name of a variable. &lt;code&gt;namlen&lt;/code&gt; is stored in the &lt;code&gt;mg_len&lt;/code&gt; field and if &lt;code&gt;name&lt;/code&gt; is non-null then either a &lt;code&gt;savepvn&lt;/code&gt; copy of &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt; itself is stored in the &lt;code&gt;mg_ptr&lt;/code&gt; field, depending on whether &lt;code&gt;namlen&lt;/code&gt; is greater than zero or equal to zero respectively. As a special case, if &lt;code&gt;(name &amp;amp;&amp;amp; namlen == HEf_SVKEY)&lt;/code&gt; then &lt;code&gt;name&lt;/code&gt; is assumed to contain an &lt;code&gt;SV*&lt;/code&gt; and is stored as-is with its REFCNT incremented.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;namlen&lt;/code&gt; 引数は魔法の文字列、変数の一般的に名前を関連付けるために使用されています。 &lt;code&gt;namlen&lt;/code&gt; に格納され &lt;code&gt;mg_len&lt;/code&gt; フィールドとIF &lt;code&gt;name&lt;/code&gt; その後のいずれかで非ヌルである &lt;code&gt;savepvn&lt;/code&gt; のコピー &lt;code&gt;name&lt;/code&gt; または &lt;code&gt;name&lt;/code&gt; 自体に記憶されている &lt;code&gt;mg_ptr&lt;/code&gt; かどうかに応じて、フィールド &lt;code&gt;namlen&lt;/code&gt; がゼロまたはそれぞれゼロよりも大きいです。特殊なケースとして、 &lt;code&gt;(name &amp;amp;&amp;amp; namlen == HEf_SVKEY)&lt;/code&gt; 場合、 &lt;code&gt;name&lt;/code&gt; は &lt;code&gt;SV*&lt;/code&gt; を含むと見なされ、そのままREFCNTがインクリメントされて格納されます。</target>
        </trans-unit>
        <trans-unit id="30007f38d6317a12ba00ec6e0a7e1a8a5a903fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; , &lt;code&gt;emake&lt;/code&gt; , &lt;code&gt;cplx&lt;/code&gt; , and &lt;code&gt;cplxe&lt;/code&gt; will also understand a single (string) argument of the forms</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;emake&lt;/code&gt; 、 &lt;code&gt;cplx&lt;/code&gt; 、および &lt;code&gt;cplxe&lt;/code&gt; はまた、フォームのシングル（文字列）の引数を理解します</target>
        </trans-unit>
        <trans-unit id="ed69370147fad222f299ba19e375b2bf7b98be5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; , &lt;code&gt;emake&lt;/code&gt; , &lt;code&gt;cplx&lt;/code&gt; , and &lt;code&gt;cplxe&lt;/code&gt; will also understand the case of no arguments: this means plain zero or (0, 0).</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;emake&lt;/code&gt; は、 &lt;code&gt;cplx&lt;/code&gt; 、および &lt;code&gt;cplxe&lt;/code&gt; は、この手段プレーンゼロか（0、0）：また、引数なしの場合を理解します。</target>
        </trans-unit>
        <trans-unit id="6c65b03e7c38b210fdc728780536955dda01e185" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; method returns a collator object.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; メソッドは、コレータオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="99af811bc283e732950a12fee28684ae132d20bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; method returns a collator object. If new() is called with no parameters, the collator should do the default collation.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; メソッドは、コレータオブジェクトを返します。パラメータなしでnew（）が呼び出された場合、照合はデフォルトの照合を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="ae0f663693f54f75cfb0a197fa36ce7749539dce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;emake&lt;/code&gt;, &lt;code&gt;cplx&lt;/code&gt;, and &lt;code&gt;cplxe&lt;/code&gt; will also understand a single (string) argument of the forms</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;emake&lt;/code&gt; 、 &lt;code&gt;cplx&lt;/code&gt; 、および &lt;code&gt;cplxe&lt;/code&gt; はまた、フォームのシングル（文字列）の引数を理解します</target>
        </trans-unit>
        <trans-unit id="b5852a1533162d9c64ba81a3a508d931f75c8fc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;emake&lt;/code&gt;, &lt;code&gt;cplx&lt;/code&gt;, and &lt;code&gt;cplxe&lt;/code&gt; will also understand the case of no arguments: this means plain zero or (0, 0).</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;emake&lt;/code&gt; は、 &lt;code&gt;cplx&lt;/code&gt; 、および &lt;code&gt;cplxe&lt;/code&gt; は、この手段プレーンゼロか（0、0）：また、引数なしの場合を理解します。</target>
        </trans-unit>
        <trans-unit id="66998427833c37a6112ac1501f01bdbb2d3aed3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new_root&lt;/code&gt; method is called when &lt;code&gt;Test2::API::Stack&lt;/code&gt; Initializes the root hub for the first time. Most formatters will simply have this call &lt;code&gt;$class-&amp;gt;new&lt;/code&gt;, which is the default behavior. Some formatters however may want to take extra action during construction of the root formatter, this is where they can do that.</source>
          <target state="translated">&lt;code&gt;new_root&lt;/code&gt; ののメソッドが呼び出されたとき &lt;code&gt;Test2::API::Stack&lt;/code&gt; を初期化し、初めてルートハブ。ほとんどのフォーマッタは、デフォルトの動作である &lt;code&gt;$class-&amp;gt;new&lt;/code&gt; 呼び出すだけです。ただし、一部のフォーマッターは、ルートフォーマッターの構築中に追加のアクションを実行したい場合があります。これは、そこで実行できる場所です。</target>
        </trans-unit>
        <trans-unit id="4c9d718f2247f950a12fdfc4b79710e6bdd5032a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new_root&lt;/code&gt; method is used when constructing a root formatter. The default is to just delegate to the regular &lt;code&gt;new()&lt;/code&gt; method, most formatters can ignore this.</source>
          <target state="translated">&lt;code&gt;new_root&lt;/code&gt; ののルートフォーマッタを構築する際の方法が使用されています。デフォルトでは、通常の &lt;code&gt;new()&lt;/code&gt; メソッドに委任するだけですが、ほとんどのフォーマッターはこれを無視できます。</target>
        </trans-unit>
        <trans-unit id="aeb14c874127fdd24641fa3165f1f47f1c0c5962" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; command starts the next iteration of the loop:</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; のコマンドは、ループの次の反復を開始します。</target>
        </trans-unit>
        <trans-unit id="9b10b638a2af4c10544e1d329f2b109151bd6354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; keywords work differently.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;exit&lt;/code&gt; 、および &lt;code&gt;continue&lt;/code&gt; キーワードは異なる動作をします。</target>
        </trans-unit>
        <trans-unit id="ebe7378b188460d4f95907a0bf8fffd8170aa799" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nntpstat&lt;/code&gt; command is similar to the &lt;code&gt;article&lt;/code&gt; command except that no text is returned. When selecting by message number within a group, the &lt;code&gt;nntpstat&lt;/code&gt; command serves to set the &quot;current article pointer&quot; without sending text.</source>
          <target state="translated">&lt;code&gt;nntpstat&lt;/code&gt; コマンドは次のようにある &lt;code&gt;article&lt;/code&gt; テキストが返されないことを除いてコマンド。グループ内のメッセージ番号で選択する場合、 &lt;code&gt;nntpstat&lt;/code&gt; コマンドは、テキストを送信せずに「現在の記事のポインター」を設定します。</target>
        </trans-unit>
        <trans-unit id="fef6e564421c89438d32761ce9e7776b6464e92d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no if&lt;/code&gt; construct assumes that a module or pragma has correctly implemented an &lt;code&gt;unimport()&lt;/code&gt; method -- but most modules and pragmata have not. That explains why the &lt;code&gt;no if&lt;/code&gt; construct is of limited applicability.</source>
          <target state="translated">&lt;code&gt;no if&lt;/code&gt; コンストラクトは、モジュールやプラグマが正しく実装していることを前提としてい &lt;code&gt;unimport()&lt;/code&gt; メソッドを-しかし、ほとんどのモジュールとプラグマはそうではありません。これが、noifコンストラクトの適用範囲が限られている理由を説明して &lt;code&gt;no if&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="a4f0c6076233a4be0a02d3164def9d1f31e4b673" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no if&lt;/code&gt; construct is mainly used to deactivate categories of warnings when those categories would produce superfluous output under specified versions of</source>
          <target state="translated">&lt;code&gt;no if&lt;/code&gt; 、それらのカテゴリが指定バージョンで余分な出力を生成するとき構築物は主に警告の非アクティブカテゴリに使用されています</target>
        </trans-unit>
        <trans-unit id="696981a277bda71ab876e23444c84e4c429ec79c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no lib&lt;/code&gt; statement deletes all instances of each named directory from @INC.</source>
          <target state="translated">&lt;code&gt;no lib&lt;/code&gt; 文は@INCから各指定されたディレクトリのすべてのインスタンスを削除します。</target>
        </trans-unit>
        <trans-unit id="acc82aa3e704adf455ebd4a8a84e684b82c4c216" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no sort&lt;/code&gt; pragma doesn't</source>
          <target state="translated">&lt;code&gt;no sort&lt;/code&gt; プラグマはしていません</target>
        </trans-unit>
        <trans-unit id="44265817f41c8d93c79e5cd86bbcac999ebebf51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no_proxy&lt;/code&gt; environment variable is supported in the format of a comma-separated list of domain extensions proxy should not be used for.</source>
          <target state="translated">&lt;code&gt;no_proxy&lt;/code&gt; のために使用すべきではない環境変数は、ドメイン拡張子プロキシのコンマで区切ったリストの形式でサポートされています。</target>
        </trans-unit>
        <trans-unit id="9a9f846f976939c6373f157aacddb5340df46521" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notest&lt;/code&gt; pragma skips the test part in the build process.</source>
          <target state="translated">&lt;code&gt;notest&lt;/code&gt; プラグマは、ビルドプロセスのテスト部分をスキップします。</target>
        </trans-unit>
        <trans-unit id="402cbf532fb5078e8455cec160e9e8dbd08504b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nvsize&lt;/code&gt; element is only present for file format v2.2 and higher.</source>
          <target state="translated">&lt;code&gt;nvsize&lt;/code&gt; の要素は、ファイル形式v2.2と高いためにのみ存在しています。</target>
        </trans-unit>
        <trans-unit id="c6ccaa6545aa4fe6352eb7229eabe18e5414aa4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;o conf&lt;/code&gt; command has various bells and whistles:</source>
          <target state="translated">&lt;code&gt;o conf&lt;/code&gt; コマンドは、様々な添えものを持っています</target>
        </trans-unit>
        <trans-unit id="20b61e97734fd2f3d96ceb929809c05aaac0cfef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;o?&lt;/code&gt; matches at the beginning of &quot;&lt;code&gt;foo&lt;/code&gt;&quot;, and since the position in the string is not moved by the match, &lt;code&gt;o?&lt;/code&gt; would match again and again because of the &lt;code&gt;&quot;*&quot;&lt;/code&gt; quantifier. Another common way to create a similar cycle is with the looping modifier &lt;code&gt;/g&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;o?&lt;/code&gt; 「 &lt;code&gt;foo&lt;/code&gt; 」の先頭で一致し、文字列内の位置は一致によって移動されないため、 &lt;code&gt;o?&lt;/code&gt; &lt;code&gt;&quot;*&quot;&lt;/code&gt; 数量詞があるため、何度も一致します。同様のサイクルを作成するもう1つの一般的な方法は、ループ修飾子 &lt;code&gt;/g&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="e1d6fb5846e3f0194a9a7d71677ca6c483145c33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;o?&lt;/code&gt; matches at the beginning of &lt;code&gt;'foo'&lt;/code&gt; , and since the position in the string is not moved by the match, &lt;code&gt;o?&lt;/code&gt; would match again and again because of the &lt;code&gt;*&lt;/code&gt; quantifier. Another common way to create a similar cycle is with the looping modifier &lt;code&gt;//g&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;o?&lt;/code&gt; &lt;code&gt;'foo'&lt;/code&gt; の先頭で一致し、文字列内の位置は一致によって移動されないため、 &lt;code&gt;o?&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; 数量詞のため、何度も一致します。同様のサイクルを作成するもう1つの一般的な方法は、ループ修飾子 &lt;code&gt;//g&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="8add6c5a9ee20cf8238a46e09a0cd46fe0b061c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; argument is stored in the &lt;code&gt;mg_obj&lt;/code&gt; field of the &lt;code&gt;MAGIC&lt;/code&gt; structure. If it is not the same as the &lt;code&gt;sv&lt;/code&gt; argument, the reference count of the &lt;code&gt;obj&lt;/code&gt; object is incremented. If it is the same, or if the &lt;code&gt;how&lt;/code&gt; argument is &lt;code&gt;PERL_MAGIC_arylen&lt;/code&gt; , or if it is a NULL pointer, then &lt;code&gt;obj&lt;/code&gt; is merely stored, without the reference count being incremented.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 引数はに格納され &lt;code&gt;mg_obj&lt;/code&gt; の分野 &lt;code&gt;MAGIC&lt;/code&gt; の構造。引数 &lt;code&gt;sv&lt;/code&gt; と同じでない場合は、 &lt;code&gt;obj&lt;/code&gt; オブジェクトの参照カウントがインクリメントされます。それが同じである場合、または &lt;code&gt;how&lt;/code&gt; 引数が &lt;code&gt;PERL_MAGIC_arylen&lt;/code&gt; である場合、またはNULLポインターである場合、 &lt;code&gt;obj&lt;/code&gt; は、参照カウントをインクリメントせずに単に格納されます。</target>
        </trans-unit>
        <trans-unit id="dca84bbcee637e6ee5a3f3b53c079982ba47b456" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; argument is stored in the &lt;code&gt;mg_obj&lt;/code&gt; field of the &lt;code&gt;MAGIC&lt;/code&gt; structure. If it is not the same as the &lt;code&gt;sv&lt;/code&gt; argument, the reference count of the &lt;code&gt;obj&lt;/code&gt; object is incremented. If it is the same, or if the &lt;code&gt;how&lt;/code&gt; argument is &lt;code&gt;PERL_MAGIC_arylen&lt;/code&gt;, &lt;code&gt;PERL_MAGIC_regdatum&lt;/code&gt;, &lt;code&gt;PERL_MAGIC_regdata&lt;/code&gt;, or if it is a NULL pointer, then &lt;code&gt;obj&lt;/code&gt; is merely stored, without the reference count being incremented.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 引数はに格納され &lt;code&gt;mg_obj&lt;/code&gt; の分野 &lt;code&gt;MAGIC&lt;/code&gt; の構造。 &lt;code&gt;sv&lt;/code&gt; 引数と同じでない場合は、 &lt;code&gt;obj&lt;/code&gt; オブジェクトの参照カウントが増加します。それが同じである場合、または &lt;code&gt;how&lt;/code&gt; 引数が &lt;code&gt;PERL_MAGIC_arylen&lt;/code&gt; 、 &lt;code&gt;PERL_MAGIC_regdatum&lt;/code&gt; 、 &lt;code&gt;PERL_MAGIC_regdata&lt;/code&gt; である場合、またはそれがNULLポインターである場合、 &lt;code&gt;obj&lt;/code&gt; は単に格納され、参照カウントはインクリメントされません。</target>
        </trans-unit>
        <trans-unit id="d80e9ad5ac5b4640a379da6ded2e4e7da8ef85d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;op-entry&lt;/code&gt; , &lt;code&gt;loading-file&lt;/code&gt; , and &lt;code&gt;loaded-file&lt;/code&gt; probes were added.</source>
          <target state="translated">&lt;code&gt;op-entry&lt;/code&gt; 、 &lt;code&gt;loading-file&lt;/code&gt; 、および &lt;code&gt;loaded-file&lt;/code&gt; のプローブを添加しました。</target>
        </trans-unit>
        <trans-unit id="f888b5670cd3a579164b6986631d6a361f670ffe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;op-entry&lt;/code&gt;, &lt;code&gt;loading-file&lt;/code&gt;, and &lt;code&gt;loaded-file&lt;/code&gt; probes were added.</source>
          <target state="translated">&lt;code&gt;op-entry&lt;/code&gt; 、 &lt;code&gt;loading-file&lt;/code&gt; 、および &lt;code&gt;loaded-file&lt;/code&gt; のプローブを添加しました。</target>
        </trans-unit>
        <trans-unit id="8a6cb40ac71f3af050d6baa8551cc82228d3a4f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open(FOO, &quot;|-&quot;)&lt;/code&gt; and &lt;code&gt;open(BAR, &quot;-|&quot;)&lt;/code&gt; constructs are not yet implemented. This limitation can be easily worked around in new code by creating a pipe explicitly. The following example shows how to write to a forked child:</source>
          <target state="translated">&lt;code&gt;open(FOO, &quot;|-&quot;)&lt;/code&gt; および &lt;code&gt;open(BAR, &quot;-|&quot;)&lt;/code&gt; 構築物はまだ実装されていません。この制限は、パイプを明示的に作成することにより、新しいコードで簡単に回避できます。次の例は、分岐した子に書き込む方法を示しています。</target>
        </trans-unit>
        <trans-unit id="fd1d994756f4894d537087cc5686928a7d382dd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; pragma serves as one of the interfaces to declare default &quot;layers&quot; (previously known as &quot;disciplines&quot;) for all I/O. Any open(), readpipe() (aka qx//) and similar operators found within the lexical scope of this pragma will use the declared defaults via the &lt;a href=&quot;perlvar#%24%7B%5EOPEN%7D&quot;&gt;&lt;code&gt;${^OPEN}&lt;/code&gt;&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; プラグマはすべてのI / Oのために（以前に「分野」としても知られる）デフォルトの「層」を宣言するためのインターフェイスとして機能します。このプラグマの字句スコープ内で見つかったopen（）、readpipe（）（別名qx //）および同様の演算子は、&lt;a href=&quot;perlvar#%24%7B%5EOPEN%7D&quot;&gt; &lt;code&gt;${^OPEN}&lt;/code&gt; &lt;/a&gt;変数を介して宣言されたデフォルトを使用します。</target>
        </trans-unit>
        <trans-unit id="5eb381293ba1d62c6bb1f8b641a8f8c1b0afc8bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ord&lt;/code&gt; and &lt;code&gt;chr&lt;/code&gt; functions work transparently on all codepoints, not just on ASCII alone &amp;mdash; nor in fact, not even just on Unicode alone.</source>
          <target state="translated">&lt;code&gt;ord&lt;/code&gt; と &lt;code&gt;chr&lt;/code&gt; 関数だけではないだけでASCIIに、すべてのコードポイントに透過的に動作する-も実際には、ないだけでも一人ではUnicodeに。</target>
        </trans-unit>
        <trans-unit id="df48f02864fb5733b7bb66ec5f70b228889d68c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os_unsupported()&lt;/code&gt; function provides a way to correctly exit your &lt;code&gt;Makefile.PL&lt;/code&gt; before calling &lt;code&gt;WriteMakefile&lt;/code&gt;. It is essentially a &lt;code&gt;die&lt;/code&gt; with the message &quot;OS unsupported&quot;.</source>
          <target state="translated">&lt;code&gt;os_unsupported()&lt;/code&gt; 関数が正しく終了するための方法を提供 &lt;code&gt;Makefile.PL&lt;/code&gt; を呼び出す前に &lt;code&gt;WriteMakefile&lt;/code&gt; を。これは基本的に、「OSがサポートされていません」というメッセージが表示された &lt;code&gt;die&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2f6e73c286e870319f1bf5046f6a37ff92d8c6ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;overloading&lt;/code&gt; pragma can be used to enable or disable overloaded operations within a lexical scope - see &lt;a href=&quot;overloading&quot;&gt;overloading&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;overloading&lt;/code&gt; を参照-プラグマはレキシカルスコープ内オーバー操作を有効または無効にするために使用することができる&lt;a href=&quot;overloading&quot;&gt;過負荷します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20efdbd26d83eb3c5a0a6712c2d992c599e01133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; formats should be used with care. Since Perl has no way of checking whether the value passed to &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; corresponds to a valid memory location, passing a pointer value that's not known to be valid is likely to have disastrous consequences.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; および &lt;code&gt;P&lt;/code&gt; フォーマットは注意して使用する必要があります。Perlには、&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; に&lt;/a&gt;渡された値が有効なメモリ位置に対応するかどうかをチェックする方法がないため、有効であることがわかっていないポインタ値を渡すと、悲惨な結果を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="22d5bf30a5d50f38a10cfc2d7578244917da917c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; formats should be used with care. Since Perl has no way of checking whether the value passed to &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; corresponds to a valid memory location, passing a pointer value that's not known to be valid is likely to have disastrous consequences.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; および &lt;code&gt;P&lt;/code&gt; フォーマットは注意して使用する必要があります。 Perlには、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; に渡された値が有効なメモリ位置に対応するかどうかをチェックする方法がないため、有効であることがわかっていないポインター値を渡すと、悲惨な結果になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="edad35170db1a049ca495222b3c0b5b8c415db1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; formats should be used with care. Since Perl has no way of checking whether the value passed to &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; corresponds to a valid memory location, passing a pointer value that's not known to be valid is likely to have disastrous consequences.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; および &lt;code&gt;P&lt;/code&gt; フォーマットは注意して使用する必要があります。 Perlには、 &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; に渡された値が有効なメモリ位置に対応するかどうかをチェックする方法がないため、有効であることがわかっていないポインター値を渡すと、悲惨な結果になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bc14cc8e3b01ab283787dc8c289608a88dca9ea7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p&lt;/code&gt; format packs a pointer to a null-terminated string. You are responsible for ensuring that the string is not a temporary value, as that could potentially get deallocated before you got around to using the packed result. The &lt;code&gt;P&lt;/code&gt; format packs a pointer to a structure of the size indicated by the length. A null pointer is created if the corresponding value for &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; is &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;; similarly with &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt;, where a null pointer unpacks into &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 個のフォーマットは、NULLで終わる文字列へのポインタをパックします。パックされた結果を使用する前に、文字列の割り当てが解除される可能性があるため、文字列が一時的な値ではないことを確認する必要があります。 &lt;code&gt;P&lt;/code&gt; のフォーマットは、長さによって示されたサイズの構造体へのポインタをパック。 &lt;code&gt;p&lt;/code&gt; または &lt;code&gt;P&lt;/code&gt; に対応する値が&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; の&lt;/a&gt;場合、nullポインターが作成されます。&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt;と同様に、nullポインタが&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; に&lt;/a&gt;アンパックされます。</target>
        </trans-unit>
        <trans-unit id="a342dbe90eb2666a6875f71f1fa1cb3e6e7241a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p&lt;/code&gt; format packs a pointer to a null-terminated string. You are responsible for ensuring that the string is not a temporary value, as that could potentially get deallocated before you got around to using the packed result. The &lt;code&gt;P&lt;/code&gt; format packs a pointer to a structure of the size indicated by the length. A null pointer is created if the corresponding value for &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;; similarly with unpack(), where a null pointer unpacks into &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 個のフォーマットは、NULLで終わる文字列へのポインタをパックします。文字列が一時的な値ではないことを確認する必要があります。パックされた結果を使用する前に、割り当てが解除される可能性があります。 &lt;code&gt;P&lt;/code&gt; のフォーマットは、長さによって示されたサイズの構造体へのポインタをパック。 &lt;code&gt;p&lt;/code&gt; または &lt;code&gt;P&lt;/code&gt; の対応する値が &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、nullポインターが作成されます。unpack（）と同様に、nullポインタが &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; にアンパックします。</target>
        </trans-unit>
        <trans-unit id="e2e0e3d979b5c34967b7ced67a74a5510cb236cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p&lt;/code&gt; format packs a pointer to a null-terminated string. You are responsible for ensuring that the string is not a temporary value, as that could potentially get deallocated before you got around to using the packed result. The &lt;code&gt;P&lt;/code&gt; format packs a pointer to a structure of the size indicated by the length. A null pointer is created if the corresponding value for &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;; similarly with unpack(), where a null pointer unpacks into &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 個のフォーマットは、NULLで終わる文字列へのポインタをパックします。文字列が一時的な値ではないことを確認する必要があります。パックされた結果を使用する前に、割り当てが解除される可能性があります。 &lt;code&gt;P&lt;/code&gt; のフォーマットは、長さによって示されたサイズの構造体へのポインタをパック。 &lt;code&gt;p&lt;/code&gt; または &lt;code&gt;P&lt;/code&gt; の対応する値が &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、nullポインターが作成されます。unpack（）と同様に、nullポインタが &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; にアンパックします。</target>
        </trans-unit>
        <trans-unit id="6cd57772719120a4cc44e7170b8984f064c5142a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paren&lt;/code&gt; parameter will be &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; for &lt;code&gt;$2&lt;/code&gt; and so forth, and have these symbolic values for the special variables:</source>
          <target state="translated">&lt;code&gt;paren&lt;/code&gt; のパラメータは次のようになります &lt;code&gt;1&lt;/code&gt; のための &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; のための &lt;code&gt;$2&lt;/code&gt; など、および特殊変数のためにこれらの記号の値を持っています：</target>
        </trans-unit>
        <trans-unit id="02d079f599dacaf5683c95e116afdd6471bd3c7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paren&lt;/code&gt; parameter will be &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; for &lt;code&gt;$2&lt;/code&gt; and so forth, and have these symbolic values for the special variables:</source>
          <target state="translated">&lt;code&gt;paren&lt;/code&gt; のパラメータは次のようになります &lt;code&gt;1&lt;/code&gt; のための &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; のための &lt;code&gt;$2&lt;/code&gt; など、および特殊変数のためにこれらの記号の値を持っています：</target>
        </trans-unit>
        <trans-unit id="3d81fd54d838a03f6a557d9a972a797c3d53d12e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method takes in anything that might be a version and returns a corresponding version object, doing any necessary conversion along the way.</source>
          <target state="translated">&lt;code&gt;parse()&lt;/code&gt; メソッドは、バージョンで、道に沿って必要な変換を行って、対応するバージョンのオブジェクトを返す可能性があるものになります。</target>
        </trans-unit>
        <trans-unit id="dc153b0fac70aafae4ce7fa649dc1cbd578affc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pass*&lt;/code&gt; and &lt;code&gt;fail*&lt;/code&gt; are optimal if they meet your situation, using one of them will always be the most optimal. That said they are optimal by eliminating many features.</source>
          <target state="translated">&lt;code&gt;pass*&lt;/code&gt; と &lt;code&gt;fail*&lt;/code&gt; 、彼らは常に最適になり、それらのいずれかを使用して、あなたの状況を満たしている場合に最適です。とはいえ、多くの機能を排除することで最適です。</target>
        </trans-unit>
        <trans-unit id="49927bc872809a6862bb2b73a995c90fcc3d0b9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; parameter is the scalar that was used as the pattern. Previous versions of Perl would pass two &lt;code&gt;char*&lt;/code&gt; indicating the start and end of the stringified pattern; the following snippet can be used to get the old parameters:</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; パラメータは、パターンとして使用したスカラーです。以前のバージョンのPerlは、文字列化されたパターンの開始と終了を示す2つの &lt;code&gt;char*&lt;/code&gt; を渡していました。次のスニペットを使用して、古いパラメーターを取得できます。</target>
        </trans-unit>
        <trans-unit id="db17bf3bf687b24a2fdb5945dac7eff0732c46a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perl&lt;/code&gt; related one will be matched against &lt;code&gt;$^X&lt;/code&gt; (but with the absolute path).</source>
          <target state="translated">&lt;code&gt;perl&lt;/code&gt; の関係する1つが照合されます &lt;code&gt;$^X&lt;/code&gt; （ただし、絶対パス付き）。</target>
        </trans-unit>
        <trans-unit id="5f5ee6756d1fcb64032b91cf7b890baca1e81e1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perl_alloc&lt;/code&gt; and &lt;code&gt;perl_clone&lt;/code&gt; API functions will automatically set the TLS slot to the interpreter they created, so that there is no need to do anything special if the interpreter is always accessed in the same thread that created it, and that thread did not create or call any other interpreters afterwards. If that is not the case, you have to set the TLS slot of the thread before calling any functions in the Perl API on that particular interpreter. This is done by calling the &lt;code&gt;PERL_SET_CONTEXT&lt;/code&gt; macro in that thread as the first thing you do:</source>
          <target state="translated">&lt;code&gt;perl_alloc&lt;/code&gt; と &lt;code&gt;perl_clone&lt;/code&gt; API関数は、自動的にインタプリタが常にそれを作成した同じスレッドにアクセスされた場合は何も特別な操作を行うために必要がないように、それらが作成インタプリタにTLSスロットを設定し、そのスレッドを作成したり、コールしませんでしたその後の他の通訳。そうでない場合は、その特定のインタープリターでPerl APIの関数を呼び出す前に、スレッドのTLSスロットを設定する必要があります。これを行うには、最初に、そのスレッドで &lt;code&gt;PERL_SET_CONTEXT&lt;/code&gt; マクロを呼び出します。</target>
        </trans-unit>
        <trans-unit id="97a02a3c258cf1103ffa6170e07625f674c4d40e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perldoc&lt;/code&gt; command line tool is part of the standard Perl distribution. To read the perlfaq:</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; コマンドラインツールは、標準のPerl配布の一部です。perlfaqを読むには：</target>
        </trans-unit>
        <trans-unit id="50ad124de63dc48f75c0f2545fa281fab8aa3db8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phase-change&lt;/code&gt; probe was added.</source>
          <target state="translated">&lt;code&gt;phase-change&lt;/code&gt; プローブが追加されました。</target>
        </trans-unit>
        <trans-unit id="04bb003d93ac0037aab6a2f453c58a6ac0c41912" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugin_list&lt;/code&gt; configuration parameter holds a list of strings of the form</source>
          <target state="translated">&lt;code&gt;plugin_list&lt;/code&gt; 設定パラメータは、次の形式の文字列のリストを保持しています</target>
        </trans-unit>
        <trans-unit id="a0b743645c5c1c48eeb64bb89437f58e73a4be52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; argument is only valid for a udp, tcp or stream ping, and will not do what you think it does. ping returns true when we get a &quot;Connection refused&quot;! The default is the echo port.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 引数には、UDP、TCPまたはストリームのpingのためにのみ有効であり、あなたはそれがないと思う何を行うことはありません。「接続が拒否されました」と表示されると、pingはtrueを返します。デフォルトはエコーポートです。</target>
        </trans-unit>
        <trans-unit id="a63eacc1cc33a9d0218e84fb4e04a60cb849a989" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pp_tie&lt;/code&gt; does a &lt;code&gt;CATCH_SET(TRUE)&lt;/code&gt; , then starts a second runops loop to execute the body of &lt;code&gt;TIEARRAY&lt;/code&gt; . When it executes the entertry op on line 3, &lt;code&gt;CATCH_GET&lt;/code&gt; is true, so &lt;code&gt;pp_entertry&lt;/code&gt; calls &lt;code&gt;docatch&lt;/code&gt; which does a &lt;code&gt;JMPENV_PUSH&lt;/code&gt; and starts a third runops loop, which then executes the die op. At this point the C call stack looks like this:</source>
          <target state="translated">&lt;code&gt;pp_tie&lt;/code&gt; はない &lt;code&gt;CATCH_SET(TRUE)&lt;/code&gt; 、その後のボディ実行する第runopsループを開始 &lt;code&gt;TIEARRAY&lt;/code&gt; を。それはライン3にentertry OPを実行すると、 &lt;code&gt;CATCH_GET&lt;/code&gt; は真であり、そう &lt;code&gt;pp_entertry&lt;/code&gt; は呼び出し &lt;code&gt;docatch&lt;/code&gt; し &lt;code&gt;JMPENV_PUSH&lt;/code&gt; を、次いでダイ演算を実行する第runopsループを開始します。この時点で、Cコールスタックは次のようになります。</target>
        </trans-unit>
        <trans-unit id="158d812c1686b0935b414c31c5100461991aaa3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pp_tie&lt;/code&gt; does a &lt;code&gt;CATCH_SET(TRUE)&lt;/code&gt;, then starts a second runops loop to execute the body of &lt;code&gt;TIEARRAY&lt;/code&gt;. When it executes the entertry op on line 3, &lt;code&gt;CATCH_GET&lt;/code&gt; is true, so &lt;code&gt;pp_entertry&lt;/code&gt; calls &lt;code&gt;docatch&lt;/code&gt; which does a &lt;code&gt;JMPENV_PUSH&lt;/code&gt; and starts a third runops loop, which then executes the die op. At this point the C call stack looks like this:</source>
          <target state="translated">&lt;code&gt;pp_tie&lt;/code&gt; はない &lt;code&gt;CATCH_SET(TRUE)&lt;/code&gt; 、その後のボディ実行する第runopsループを開始 &lt;code&gt;TIEARRAY&lt;/code&gt; を。それはライン3にentertry OPを実行すると、 &lt;code&gt;CATCH_GET&lt;/code&gt; は真であり、そう &lt;code&gt;pp_entertry&lt;/code&gt; は呼び出し &lt;code&gt;docatch&lt;/code&gt; し &lt;code&gt;JMPENV_PUSH&lt;/code&gt; を、次いでダイ演算を実行する第runopsループを開始します。この時点で、C呼び出しスタックは次のようになります。</target>
        </trans-unit>
        <trans-unit id="bdfe7fb594151a128519964cf51c5b075b56f64a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prereqs&lt;/code&gt; key in the top-level metadata and within &lt;code&gt;optional_features&lt;/code&gt; define the relationship between a distribution and other packages. The prereq spec structure is a hierarchical data structure which divides prerequisites into</source>
          <target state="translated">トップレベルのメタデータおよび &lt;code&gt;optional_features&lt;/code&gt; 内の &lt;code&gt;prereqs&lt;/code&gt; キーは、ディストリビューションと他のパッケージの間の関係を定義します。前提条件仕様構造は、前提条件を次のように分割する階層データ構造です。</target>
        </trans-unit>
        <trans-unit id="6f6012284b93fc2045dcbcea769da43a4a9d853f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prompt()&lt;/code&gt; function provides an easy way to request user input used to write a makefile. It displays the $message as a prompt for input. If a $default is provided it will be used as a default. The function returns the $value selected by the user.</source>
          <target state="translated">&lt;code&gt;prompt()&lt;/code&gt; 関数は、メイクファイルを書き込むために使用される要求のユーザ入力に簡単な方法を提供します。入力のためのプロンプトとして$ messageを表示します。$ defaultが指定されている場合、それがデフォルトとして使用されます。この関数は、ユーザーが選択した$ valueを返します。</target>
        </trans-unit>
        <trans-unit id="251a318ac7ae399ceb208b84bc39666205a2a077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prove&lt;/code&gt; command supports a &lt;code&gt;--state&lt;/code&gt; option that instructs it to store persistent state across runs. This module encapsulates the results for a single test suite run.</source>
          <target state="translated">&lt;code&gt;prove&lt;/code&gt; コマンドがサポートされてい &lt;code&gt;--state&lt;/code&gt; それが実行間の永続的な状態を保存するように指示するオプションを選択します。このモジュールは、単一のテストスイート実行の結果をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="225b0b123ca124089a53e65a14a10e06fffd421b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prove&lt;/code&gt; command supports a &lt;code&gt;--state&lt;/code&gt; option that instructs it to store persistent state across runs. This module encapsulates the results for a single test.</source>
          <target state="translated">&lt;code&gt;prove&lt;/code&gt; コマンドがサポートされてい &lt;code&gt;--state&lt;/code&gt; それが実行間の永続的な状態を保存するように指示するオプションを選択します。このモジュールは、単一のテストの結果をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="630214733172c835a26947747354eba32ad3911c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prove&lt;/code&gt; command supports a &lt;code&gt;--state&lt;/code&gt; option that instructs it to store persistent state across runs. This module implements that state and the operations that may be performed on it.</source>
          <target state="translated">&lt;code&gt;prove&lt;/code&gt; コマンドがサポートされてい &lt;code&gt;--state&lt;/code&gt; それが実行間の永続的な状態を保存するように指示するオプションを選択します。このモジュールは、その状態と、その状態で実行される可能性のある操作を実装します。</target>
        </trans-unit>
        <trans-unit id="ebc7b6c659bfd339fe90d4f36223bdf0f00d2207" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qr//&lt;/code&gt; operator showed up in perl 5.005. It compiles a regular expression, but doesn't apply it. When you use the pre-compiled version of the regex, perl does less work. In this example, I inserted a &lt;code&gt;map&lt;/code&gt; to turn each pattern into its pre-compiled form. The rest of the script is the same, but faster:</source>
          <target state="translated">&lt;code&gt;qr//&lt;/code&gt; 演算子は、Perl 5.005に現れました。正規表現をコンパイルしますが、適用しません。コンパイル済みバージョンの正規表現を使用すると、perlの動作が少なくなります。この例では、 &lt;code&gt;map&lt;/code&gt; を挿入して、各パターンをコンパイル済みの形式に変換しました。スクリプトの残りの部分は同じですが、より高速です。</target>
        </trans-unit>
        <trans-unit id="89a8c0b3ff5aa42089f6c9d44d37572f7b89a880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;re '/flags'&lt;/code&gt; pragma (introduced in Perl 5.14) turns on the given regular expression flags until the end of the lexical scope. See &lt;a href=&quot;re#%27%2Fflags%27-mode&quot;&gt;&quot;'/flags' mode&quot; in re&lt;/a&gt; for more detail.</source>
          <target state="translated">&lt;code&gt;re '/flags'&lt;/code&gt; （Perlの5.14で導入）プラグマはレキシカルスコープの終わりまで与えられた正規表現フラグをオンにします。詳細については、&lt;a href=&quot;re#%27%2Fflags%27-mode&quot;&gt;「/ flags」モードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="16ee1aae608f6953af89e472ae38b6d9068b7d8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;re '/flags'&lt;/code&gt; pragma (introduced in Perl 5.14) turns on the given regular expression flags until the end of the lexical scope. See &lt;a href=&quot;re#'%2fflags'-mode&quot;&gt;'/flags' mode in re&lt;/a&gt; for more detail.</source>
          <target state="translated">&lt;code&gt;re '/flags'&lt;/code&gt; （Perlの5.14で導入）プラグマはレキシカルスコープの終わりまで与えられた正規表現フラグをオンにします。詳細については、&lt;a href=&quot;re#'%2fflags'-mode&quot;&gt;「/フラグ」モードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8026b2e7b59b6835c618b76fac10379af835df78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; will</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 意志</target>
        </trans-unit>
        <trans-unit id="eabbdc8a005d2bf3f21650b9e863366189c7ced7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recent&lt;/code&gt; command downloads a list of recent uploads to CPAN and displays them</source>
          <target state="translated">&lt;code&gt;recent&lt;/code&gt; コマンドはCPANと表示し、それらに最近アップロードのリストをダウンロード</target>
        </trans-unit>
        <trans-unit id="3ae27e036bb44d621cb68002f9a110e07c700371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recipient&lt;/code&gt; method can also pass additional case-sensitive OPTIONS as an anonymous hash using key and value pairs. Possible options are:</source>
          <target state="translated">&lt;code&gt;recipient&lt;/code&gt; 方法はまた、キーと値のペアを使用して、匿名のハッシュなどの追加の大文字と小文字を区別オプションを渡すことができます。可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fbfa5e6131ec26898b29be346c8692d308b580c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;redo&lt;/code&gt; command restarts the loop block without evaluating the conditional again. The &lt;code&gt;continue&lt;/code&gt; block, if any, is</source>
          <target state="translated">&lt;code&gt;redo&lt;/code&gt; コマンドが再び条件を評価することなく、ループブロックを再開する。 &lt;code&gt;continue&lt;/code&gt; 、であれば、ブロックを</target>
        </trans-unit>
        <trans-unit id="5f6b672315250ddc806f0b1d734bf40a266a6de9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;regexp&lt;/code&gt; structure described in &lt;a href=&quot;perlreapi&quot;&gt;perlreapi&lt;/a&gt; is common to all regex engines. Two of its fields are intended for the private use of the regex engine that compiled the pattern. These are the &lt;code&gt;intflags&lt;/code&gt; and pprivate members. The &lt;code&gt;pprivate&lt;/code&gt; is a void pointer to an arbitrary structure whose use and management is the responsibility of the compiling engine. perl will never modify either of these values. In the case of the stock engine the structure pointed to by &lt;code&gt;pprivate&lt;/code&gt; is called &lt;code&gt;regexp_internal&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;regexp&lt;/code&gt; で説明した構造&lt;a href=&quot;perlreapi&quot;&gt;perlreapiは&lt;/a&gt;すべて正規表現エンジンに共通しています。その2つのフィールドは、パターンをコンパイルした正規表現エンジンの私的使用を目的としています。これらは、 &lt;code&gt;intflags&lt;/code&gt; およびpprivateメンバーです。 &lt;code&gt;pprivate&lt;/code&gt; は、使用及び管理コンパイルエンジンの責務である任意の構造にボイドのポインタです。 perlがこれらの値を変更することはありません。ストックエンジンの場合、 &lt;code&gt;pprivate&lt;/code&gt; が指す構造はregexp_internalと呼ばれ &lt;code&gt;regexp_internal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43d7f5d7cf7b3bd50ec33b3f8b3d3e3e1b16ccb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;regexp&lt;/code&gt; structure described in &lt;a href=&quot;perlreapi&quot;&gt;perlreapi&lt;/a&gt; is common to all regex engines. Two of its fields are intended for the private use of the regex engine that compiled the pattern. These are the &lt;code&gt;intflags&lt;/code&gt; and pprivate members. The &lt;code&gt;pprivate&lt;/code&gt; is a void pointer to an arbitrary structure whose use and management is the responsibility of the compiling engine. perl will never modify either of these values. In the case of the stock engine the structure pointed to by &lt;code&gt;pprivate&lt;/code&gt; is called &lt;code&gt;regexp_internal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;regexp&lt;/code&gt; で説明した構造&lt;a href=&quot;perlreapi&quot;&gt;perlreapiは&lt;/a&gt;すべて正規表現エンジンに共通しています。そのフィールドの2つは、パターンをコンパイルした正規表現エンジンの私的使用を目的としています。これらは &lt;code&gt;intflags&lt;/code&gt; とprivateメンバーです。 &lt;code&gt;pprivate&lt;/code&gt; は、使用及び管理コンパイルエンジンの責務である任意の構造にボイドのポインタです。perlはこれらの値のいずれも変更しません。ストックエンジンの場合、 &lt;code&gt;pprivate&lt;/code&gt; が指す構造はregexp_internalと呼ばれ &lt;code&gt;regexp_internal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70e74666fabd3ef514f919b776494b74805eeb39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;register&lt;/code&gt; method allows for the registration of a message handler for a given subroutine. The full subroutine name including the package should be used.</source>
          <target state="translated">&lt;code&gt;register&lt;/code&gt; 方法は、指定されたサブルーチンのメッセージハンドラを登録することができます。パッケージを含む完全なサブルーチン名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4f7500531b634ca33f77ec64b4dcfc7b5a94686" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;release_status&lt;/code&gt; field &lt;b&gt;must&lt;/b&gt; have one of the following values:</source>
          <target state="translated">&lt;code&gt;release_status&lt;/code&gt; のフィールドには、&lt;b&gt;必要があり&lt;/b&gt;、次のいずれかの値を持っています：</target>
        </trans-unit>
        <trans-unit id="a2292ba9ae057df1902ceef2446c66c533b62b3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove_tree&lt;/code&gt; function deletes the given directories and any files and subdirectories they might contain, much like the Unix command &lt;code&gt;rm -r&lt;/code&gt; or &lt;code&gt;del /s&lt;/code&gt; on Windows.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 関数は、指定したディレクトリと多くのUnixコマンドのように、彼らが含まれている可能性のあるすべてのファイルとサブディレクトリ、削除 &lt;code&gt;rm -r&lt;/code&gt; または &lt;code&gt;del /s&lt;/code&gt; Windows上を。</target>
        </trans-unit>
        <trans-unit id="f1fcc73f0626aba933df61d1eca5f7c5f0df238b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove_tree&lt;/code&gt; function deletes the given directories and any files and subdirectories they might contain, much like the Unix command &lt;code&gt;rm -rf&lt;/code&gt; or the Windows commands &lt;code&gt;rmdir /s&lt;/code&gt; and &lt;code&gt;rd /s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 関数は、指定したディレクトリを削除し、多くのUnixコマンドのように、彼らが含まれている可能性のあるすべてのファイルとサブディレクトリは、 &lt;code&gt;rm -rf&lt;/code&gt; コマンドまたはWindows &lt;code&gt;rmdir /s&lt;/code&gt; と &lt;code&gt;rd /s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f800b61fba3cbdc9dbaf2d3127156f3c10c2be33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; command temporarily turns on the &lt;code&gt;test_report&lt;/code&gt; config variable, then runs the &lt;code&gt;force test&lt;/code&gt; command with the given arguments. The &lt;code&gt;force&lt;/code&gt; pragma reruns the tests and repeats every step that might have failed before.</source>
          <target state="translated">&lt;code&gt;report&lt;/code&gt; コマンドは、一時的にオンに &lt;code&gt;test_report&lt;/code&gt; の設定変数、そして走る &lt;code&gt;force test&lt;/code&gt; 与えられた引数を指定して、コマンドを。 &lt;code&gt;force&lt;/code&gt; プラグマは、テストを再実行し、前に失敗している可能性があるすべてのステップを繰り返します。</target>
        </trans-unit>
        <trans-unit id="3e0418f790bb3ba77ebbb5b8be57ce758907a81a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request&lt;/code&gt; method returns a hashref containing the response. The hashref will have the following keys:</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; メソッドは、応答を含むハッシュリファレンスを返します。hashrefには次のキーがあります。</target>
        </trans-unit>
        <trans-unit id="bb965f28ada4d369f813e7b58370f45663a7e17c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;build_requires&lt;/code&gt; dependency declarations</source>
          <target state="translated">&lt;code&gt;requires&lt;/code&gt; して &lt;code&gt;build_requires&lt;/code&gt; 依存関係の宣言を</target>
        </trans-unit>
        <trans-unit id="6825adde139cbe709d6cacc6c4ea55d8ef7cff02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resolve&lt;/code&gt; function is called to generate a linearised ISA for the given stash, using this MRO. It is called with a pointer to the stash, and a</source>
          <target state="translated">&lt;code&gt;resolve&lt;/code&gt; 機能は、このMROを使用して、与えられた隠しのための直線化ISAを生成するために呼び出されます。stashへのポインターを指定して呼び出され、</target>
        </trans-unit>
        <trans-unit id="20a1d55e5f69a55a8401c7bd274cec494c442203" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result_factory_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;result_factory_class&lt;/code&gt; はで説明したように、カスタマイズすることができ&lt;a href=&quot;#new&quot;&gt;、「新しいです」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e85b7e6554a08b089b5049ccd1a608787302c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result_factory_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;result_factory_class&lt;/code&gt; はで説明したように、カスタマイズすることができる&lt;a href=&quot;#new&quot;&gt;新しいです&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ca2114e55ee9c4857e906508831f67273f52466" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;retrans&lt;/code&gt; argument the exponential backoff rate, default 1.2. It matches the $def_factor global.</source>
          <target state="translated">&lt;code&gt;retrans&lt;/code&gt; 引数指数バックオフ率、デフォルト1.2。$ def_factorグローバルと一致します。</target>
        </trans-unit>
        <trans-unit id="6d4f5cbea499bebe5f70cb857ce9ac77d66aaa7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rmtree()&lt;/code&gt; function provide the legacy interface of &lt;code&gt;remove_tree()&lt;/code&gt; with a different interpretation of the arguments passed. The behaviour and return value of the function is otherwise identical to &lt;code&gt;remove_tree()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rmtree()&lt;/code&gt; 関数は、のレガシーインタフェースを提供 &lt;code&gt;remove_tree()&lt;/code&gt; 渡された引数の異なる解釈を。関数の動作と戻り値は、それ以外は &lt;code&gt;remove_tree()&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6451f829e84fc9b2a12b294243486a8357dccdcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;roffitall&lt;/code&gt; utility is not installed on your system but lives in the</source>
          <target state="translated">&lt;code&gt;roffitall&lt;/code&gt; のユーティリティは、システムにインストールされますがに住んでいません</target>
        </trans-unit>
        <trans-unit id="38bb81c7279e4123eea02d7b94773b0e43184b92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; method returns 0 on success and a positive number on failure. See the section on EXIT CODES for details on the values.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 方法は、成功と失敗の正の数に0を返します。値の詳細については、終了コードのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ec12f7a8b2d7f40a1c42ea8d991b557d8527791c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;s///&lt;/code&gt; substitution operator is documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;s///&lt;/code&gt; 置換演算子は、に記載されて&lt;a href=&quot;perlop&quot;&gt;はperlop&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f11595235e0f9e5e74b59c34bf7ac4552157c76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send()&lt;/code&gt; method is used to issue an event to the hub. This method will handle thread/fork sync, filters, listeners, TAP output, etc.</source>
          <target state="translated">&lt;code&gt;send()&lt;/code&gt; メソッドは、ハブにイベントを発行するために使用されます。このメソッドは、スレッド/フォークの同期、フィルター、リスナー、TAP出力などを処理します。</target>
        </trans-unit>
        <trans-unit id="9411561fa33dd9a0d96df4e7b49fae524226bee1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip(...)&lt;/code&gt; function is for tests that might or might not be possible to run, depending on the availability of platform-specific features. The first argument should evaluate to true (think &quot;yes, please skip&quot;) if the required feature is</source>
          <target state="translated">&lt;code&gt;skip(...)&lt;/code&gt; 関数は、プラットフォーム固有の機能の可用性に応じて、可能性がありますかできない場合がありますが、実行するテストのためのものです。最初の引数は、必要な機能が</target>
        </trans-unit>
        <trans-unit id="4dd34dc5f337a99adbdb95ed69eaa2b33a678e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;smoke&lt;/code&gt; command takes the list of recent uploads to CPAN as provided by the &lt;code&gt;recent&lt;/code&gt; command and tests them all. While the command is running $SIG{INT} is defined to mean that the current item shall be skipped.</source>
          <target state="translated">&lt;code&gt;smoke&lt;/code&gt; コマンドは、によって提供されるCPANへの最近のアップロードのリストを受け取り &lt;code&gt;recent&lt;/code&gt; コマンドおよびそれらすべてをテストします。コマンドの実行中、$ SIG {INT}は、現在のアイテムがスキップされることを意味するように定義されています。</target>
        </trans-unit>
        <trans-unit id="c81eca2265a8bfa89f7e2b8216b25f7468527582" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socktype&lt;/code&gt; hint to getaddrinfo() filters the results to only include one socket type and protocol. Without this most OSes return three combinations, for &lt;code&gt;SOCK_STREAM&lt;/code&gt; , &lt;code&gt;SOCK_DGRAM&lt;/code&gt; and &lt;code&gt;SOCK_RAW&lt;/code&gt; , resulting in triplicate output of addresses. The &lt;code&gt;NI_NUMERICHOST&lt;/code&gt; flag to getnameinfo() causes it to return a string-formatted plain IP address, rather than reverse resolving it back into a hostname.</source>
          <target state="translated">getaddrinfo（）への &lt;code&gt;socktype&lt;/code&gt; ヒントは、結果をフィルタリングして、1つのソケットタイプとプロトコルのみを含めます。これがないと、ほとんどのOSが &lt;code&gt;SOCK_STREAM&lt;/code&gt; 、 &lt;code&gt;SOCK_DGRAM&lt;/code&gt; 、および &lt;code&gt;SOCK_RAW&lt;/code&gt; の 3つの組み合わせを返し、アドレスの出力が3つになります。 &lt;code&gt;NI_NUMERICHOST&lt;/code&gt; のてgetnameinfoするフラグが（）、それは逆のバックホスト名にそれを解決するのではなく、文字列形式のプレーンなIPアドレスを返すようになります。</target>
        </trans-unit>
        <trans-unit id="96db56547c2805160963104b9881650067bc074a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socktype&lt;/code&gt; hint to getaddrinfo() filters the results to only include one socket type and protocol. Without this most OSes return three combinations, for &lt;code&gt;SOCK_STREAM&lt;/code&gt;, &lt;code&gt;SOCK_DGRAM&lt;/code&gt; and &lt;code&gt;SOCK_RAW&lt;/code&gt;, resulting in triplicate output of addresses. The &lt;code&gt;NI_NUMERICHOST&lt;/code&gt; flag to getnameinfo() causes it to return a string-formatted plain IP address, rather than reverse resolving it back into a hostname.</source>
          <target state="translated">getaddrinfo（）への &lt;code&gt;socktype&lt;/code&gt; ヒントは、1つのソケットタイプとプロトコルのみを含むように結果をフィルタリングします。これがないと、ほとんどのOSは &lt;code&gt;SOCK_STREAM&lt;/code&gt; 、 &lt;code&gt;SOCK_DGRAM&lt;/code&gt; 、 &lt;code&gt;SOCK_RAW&lt;/code&gt; の3つの組み合わせを返し、アドレスの出力が3回になります。getnameinfo（）の &lt;code&gt;NI_NUMERICHOST&lt;/code&gt; フラグを使用すると、ホスト名に逆解決するのではなく、文字列形式のプレーンIPアドレスが返されます。</target>
        </trans-unit>
        <trans-unit id="03364b2c6aff3f77be6e48e31bc6fc170edb9637" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; is used to create a &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt; that is passed to the &lt;a href=&quot;#iterator_factory_class&quot;&gt;&quot;iterator_factory_class&quot;&lt;/a&gt; which in turn figures out how to handle the source and creates a &amp;lt;TAP::Parser::Iterator&amp;gt; for it. The iterator is used by the parser to read in the TAP stream.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は、&lt;a href=&quot;#iterator_factory_class&quot;&gt;「iterator_factory_class」に&lt;/a&gt;渡される&lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt;を作成するために使用されます。このソースは、ソースの処理方法を理解し、そのための&amp;lt;TAP :: Parser :: Iterator&amp;gt;を作成します。イテレータは、パーサーがTAPストリームを読み取るために使用します。</target>
        </trans-unit>
        <trans-unit id="8fb1bd48c372b36b030a4985fb7d0b8ecfff9314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; is used to create a &lt;a href=&quot;parser/source&quot;&gt;TAP::Parser::Source&lt;/a&gt; that is passed to the &lt;a href=&quot;#iterator_factory_class&quot;&gt;iterator_factory_class&lt;/a&gt; which in turn figures out how to handle the source and creates a &amp;lt;TAP::Parser::Iterator&amp;gt; for it. The iterator is used by the parser to read in the TAP stream.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 作成するために使用され&lt;a href=&quot;parser/source&quot;&gt;TAP :: Parserの::ソース&lt;/a&gt;に渡され&lt;a href=&quot;#iterator_factory_class&quot;&gt;iterator_factory_classを&lt;/a&gt;どの&amp;lt;TAP :: Parserの:: Iteratorを&amp;gt;ソースを処理し、作成する方法を順番の数字で、それのために。イテレータは、パーサーがTAPストリームを読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="92eb80578e9c5fa00cf858e0d3634beaaf8da658" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sources&lt;/code&gt; parameter affects how &lt;code&gt;source&lt;/code&gt; , &lt;code&gt;tap&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; parameters are handled.</source>
          <target state="translated">&lt;code&gt;sources&lt;/code&gt; パラメータがどのように影響する &lt;code&gt;source&lt;/code&gt; 、 &lt;code&gt;tap&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; のパラメータが処理されます。</target>
        </trans-unit>
        <trans-unit id="ecf38e3d7dde64637f98a88870a2d809b9706769" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sources&lt;/code&gt; parameter affects how &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;tap&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; parameters are handled.</source>
          <target state="translated">&lt;code&gt;sources&lt;/code&gt; パラメータがどのように影響する &lt;code&gt;source&lt;/code&gt; 、 &lt;code&gt;tap&lt;/code&gt; や &lt;code&gt;exec&lt;/code&gt; のパラメータが処理されます。</target>
        </trans-unit>
        <trans-unit id="8b7630407dfd17260fb141bba76fd71474e26eb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split()&lt;/code&gt; function is another place where a regexp is used. &lt;code&gt;split /regexp/, string, limit&lt;/code&gt; separates the &lt;code&gt;string&lt;/code&gt; operand into a list of substrings and returns that list. The regexp must be designed to match whatever constitutes the separators for the desired substrings. The &lt;code&gt;limit&lt;/code&gt;, if present, constrains splitting into no more than &lt;code&gt;limit&lt;/code&gt; number of strings. For example, to split a string into words, use</source>
          <target state="translated">&lt;code&gt;split()&lt;/code&gt; 関数は、正規表現を使用している別の場所です。 &lt;code&gt;split /regexp/, string, limit&lt;/code&gt; は、 &lt;code&gt;string&lt;/code&gt; オペランドを部分文字列のリストに分割し、そのリストを返します。正規表現は、目的の部分文字列の区切り文字を構成するものと一致するように設計する必要があります。 &lt;code&gt;limit&lt;/code&gt; 、存在する場合、より多くないに分割を制約する &lt;code&gt;limit&lt;/code&gt; 文字列の数。たとえば、文字列を単語に分割するには、</target>
        </trans-unit>
        <trans-unit id="5429b24bd7773605c81ffce19b7803e3914ae70b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;state&lt;/code&gt; keyword creates a lexical variable (following the same scoping rules as &lt;code&gt;my&lt;/code&gt;) that persists from one subroutine call to the next. If a state variable resides inside an anonymous subroutine, then each copy of the subroutine has its own copy of the state variable. However, the value of the state variable will still persist between calls to the same copy of the anonymous subroutine. (Don't forget that &lt;code&gt;sub { ... }&lt;/code&gt; creates a new subroutine each time it is executed.)</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; キーワードは、（同じスコープ規則、次のレキシカル変数を作成 &lt;code&gt;my&lt;/code&gt; ）と次のサブルーチン呼び出しから持続することを。状態変数が匿名サブルーチン内にある場合、サブルーチンの各コピーには、状態変数の独自のコピーがあります。ただし、状態変数の値は、匿名サブルーチンの同じコピーを呼び出す間も保持されます。（ &lt;code&gt;sub { ... }&lt;/code&gt; は、実行されるたびに新しいサブルーチンを作成することを忘れないでください。）</target>
        </trans-unit>
        <trans-unit id="99a6aa9719696ddb8bff79a8c79538ca92e0d2e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strend&lt;/code&gt; and &lt;code&gt;patend&lt;/code&gt; pointers should point to the byte following the last character of each string.</source>
          <target state="translated">&lt;code&gt;strend&lt;/code&gt; と &lt;code&gt;patend&lt;/code&gt; ポインタは、各文字列の最後の文字の次のバイトを指している必要があります。</target>
        </trans-unit>
        <trans-unit id="ea6e352d41818ff4bf26ca16e10b39452c55d91f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt; pragma disables certain Perl expressions that could behave unexpectedly or are difficult to debug, turning them into errors. The effect of this pragma is limited to the current file or scope block.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; プラグマは、予期しない動作やエラーにそれらを回し、デバッグが困難な可能性がある特定のPerlの表現を無効にします。このプラグマの効果は、現在のファイルまたはスコープブロックに限定されます。</target>
        </trans-unit>
        <trans-unit id="027d4af5bb9710fddfec7b10292492a3bd8321cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt; pragma is useful in avoiding such errors.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; プラグマは、このようなエラーを回避するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bda6d4349e03cdc3822accb764cf2332f0d166cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct()&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;struct()&lt;/code&gt; 関数</target>
        </trans-unit>
        <trans-unit id="7a95e760c73406947e7da7714b03782e42d5fa06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; function has three forms of parameter-list.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 関数は、パラメータ・リストの3つの形式があります。</target>
        </trans-unit>
        <trans-unit id="4f0312b0e41bdaef162518003e58d7dd5119b5b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub-entry&lt;/code&gt; and &lt;code&gt;sub-return&lt;/code&gt; probes gain a fourth argument: the package name of the function.</source>
          <target state="translated">&lt;code&gt;sub-entry&lt;/code&gt; と &lt;code&gt;sub-return&lt;/code&gt; 機能のパッケージ名：プローブは、四番目の引数を獲得します。</target>
        </trans-unit>
        <trans-unit id="e032455d26f301f9311f3905ad487e2683ae6647" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; field of the response will be true if the status code is 2XX or if the status code is 304 (unmodified).</source>
          <target state="translated">ステータスコードが2XXの場合、またはステータスコードが304（変更なし）の場合、応答の &lt;code&gt;success&lt;/code&gt; フィールドはtrueになります。</target>
        </trans-unit>
        <trans-unit id="76f86ba3ab4dadf0c5969933e8badc4119d9d2f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; field of the response will be true if the status code is 2XX.</source>
          <target state="translated">ステータスコードが2XXの場合、応答の &lt;code&gt;success&lt;/code&gt; フィールドはtrueになります。</target>
        </trans-unit>
        <trans-unit id="7f8db9fbaa56d501321f36a7b37f026962feda33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supports_tables&lt;/code&gt; method should be true if the formatter supports directly rendering table data from the &lt;code&gt;info&lt;/code&gt; facets. This is a newer feature and many older formatters may not support it. When not supported the formatter falls back to rendering &lt;code&gt;detail&lt;/code&gt; instead of the &lt;code&gt;table&lt;/code&gt; data.</source>
          <target state="translated">&lt;code&gt;supports_tables&lt;/code&gt; のフォーマッタがサポートから直接テーブルデータをレンダリングする場合の方法は、真であるべき &lt;code&gt;info&lt;/code&gt; 面。これは新しい機能であり、多くの古いフォーマッターはそれをサポートしていない可能性があります。サポートされていない場合、フォーマッタは &lt;code&gt;table&lt;/code&gt; データではなく &lt;code&gt;detail&lt;/code&gt; レンダリングにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="ca2248434d315d7f4555ab09ed558fffeb25af18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument is a pointer to the SV that is to acquire a new magical feature.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 引数は、新しい魔法の機能を取得することであるSVへのポインタです。</target>
        </trans-unit>
        <trans-unit id="3bd810d1cf1c18312d2c5eb1e03b023fe5ee01ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument must be a reference value. The &lt;code&gt;stash&lt;/code&gt; argument specifies which class the reference will belong to. See &lt;a href=&quot;#Stashes-and-Globs&quot;&gt;&quot;Stashes and Globs&quot;&lt;/a&gt; for information on converting class names into stashes.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 引数は参照値でなければなりません。 &lt;code&gt;stash&lt;/code&gt; 参照が所属するクラスの引数を指定します。クラス名をスタッシュに変換する方法については、&lt;a href=&quot;#Stashes-and-Globs&quot;&gt;「スタッシュとグローブ」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d1732cdeea04b3b5302655756ff012b4b97e760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument must be a reference value. The &lt;code&gt;stash&lt;/code&gt; argument specifies which class the reference will belong to. See &lt;a href=&quot;#Stashes-and-Globs&quot;&gt;Stashes and Globs&lt;/a&gt; for information on converting class names into stashes.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 引数は参照値でなければなりません。 &lt;code&gt;stash&lt;/code&gt; 参照が所属するクラスの引数を指定します。クラス名をスタッシュに変換する方法については、&lt;a href=&quot;#Stashes-and-Globs&quot;&gt;スタッシュとグロブ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3c426a5175e1475eb159d7aa2bfc10b9aeb2592e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_cat*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;&quot;Magic Virtual Tables&quot;&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_cat*()&lt;/code&gt; 関数は、「魔法」を持っている値を操作するための汎用的な十分ではありません。このドキュメントで後述する&lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;「マジック仮想テーブル」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5aa9fb7196f50b878b4d2185150e32ef86a1a0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_cat*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_cat*()&lt;/code&gt; 関数は、「魔法」を持っている値を操作するための汎用的な十分ではありません。このドキュメントで後述する&lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tablesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ca2c3639e16b490b555d2489361f0871018a997" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_set*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;&quot;Magic Virtual Tables&quot;&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_set*()&lt;/code&gt; 関数は、「魔法」を持っている値を操作するための汎用的な十分ではありません。このドキュメントで後述する&lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;「マジック仮想テーブル」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="451bffe03c920b337c26d3f6c5c7b3d0a90a952c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_set*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_set*()&lt;/code&gt; 関数は、「魔法」を持っている値を操作するための汎用的な十分ではありません。このドキュメントで後述する&lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tablesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a022ed577de5458a14b966f973f3ce2a62bb2a5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; built-in is considered to have failed in the following circumstances:</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; 内蔵のは、次の状況で失敗したとみなされます。</target>
        </trans-unit>
        <trans-unit id="817c94b76b6dd84c4c7d9bb171edda3a93d8445e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; operator creates a subprocess, and passes its arguments to the subprocess for execution as a DCL command. Since the subprocess is created directly via &lt;code&gt;lib$spawn()&lt;/code&gt;, any valid DCL command string may be specified. If the string begins with '@', it is treated as a DCL command unconditionally. Otherwise, if the first token contains a character used as a delimiter in file specification (e.g. &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;]&lt;/code&gt;), an attempt is made to expand it using a default type of</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; オペレータは、サブプロセスを作成し、DCLコマンドとして実行するためのサブプロセスに引数を渡します。サブプロセスは &lt;code&gt;lib$spawn()&lt;/code&gt; を介して直接作成されるため、任意の有効なDCLコマンド文字列を指定できます。文字列が「@」で始まる場合、無条件にDCLコマンドとして扱われます。それ以外の場合、最初のトークンにファイル仕様で区切り文字として使用される文字が含まれている場合（例 &lt;code&gt;:&lt;/code&gt; または &lt;code&gt;]&lt;/code&gt; ）、デフォルトのタイプを使用してトークンを展開しようとします。</target>
        </trans-unit>
        <trans-unit id="264e3c8ac2fdd944cc02ae92713944fc8cf6494f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;taint&lt;/code&gt; pragma causes any substrings from a match with a tainted variable to be tainted as well. This is not normally the case, as regexps are often used to extract the safe bits from a tainted variable. Use &lt;code&gt;taint&lt;/code&gt; when you are not extracting safe bits, but are performing some other processing. Both &lt;code&gt;taint&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; pragmas are lexically scoped, which means they are in effect only until the end of the block enclosing the pragmas.</source>
          <target state="translated">&lt;code&gt;taint&lt;/code&gt; プラグマは、汚染された変数との一致からの任意のサブストリングがうまくとして汚染させます。正規表現は汚染された変数から安全なビットを抽出するためによく使用されるため、これは通常は当てはまりません。安全なビットを抽出していないが、他の処理を実行している場合は、 &lt;code&gt;taint&lt;/code&gt; 使用します。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; プラグマとevalプラグマは両方とも &lt;code&gt;taint&lt;/code&gt; スコープです。つまり、プラグマを囲むブロックの最後までのみ有効です。</target>
        </trans-unit>
        <trans-unit id="45b556a65806a34a0370ae702153cb4405855fa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;taint&lt;/code&gt; pragma causes any substrings from a match with a tainted variable to be tainted as well. This is not normally the case, as regexps are often used to extract the safe bits from a tainted variable. Use &lt;code&gt;taint&lt;/code&gt; when you are not extracting safe bits, but are performing some other processing. Both &lt;code&gt;taint&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; pragmas are lexically scoped, which means they are in effect only until the end of the block enclosing the pragmas.</source>
          <target state="translated">&lt;code&gt;taint&lt;/code&gt; プラグマは、汚染された変数との一致からの任意のサブストリングがうまくとして汚染させます。正規表現は汚染された変数から安全なビットを抽出するためによく使用されるため、これは通常は当てはまりません。安全なビットを抽出していないが、他の処理を実行している場合は、 &lt;code&gt;taint&lt;/code&gt; 使用します。両方の &lt;code&gt;taint&lt;/code&gt; と &lt;code&gt;eval&lt;/code&gt; プラグマは字句彼らだけプラグマを囲むブロックの終わりまで有効であることを意味する、スコープされています。</target>
        </trans-unit>
        <trans-unit id="3cc9bc272d719ab5016869a769d84acd8ec8d7c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminate&lt;/code&gt; and &lt;code&gt;finalize&lt;/code&gt; methods are optional methods called that you can implement if the format you're generating needs to handle these cases, for example if you are generating XML and need close open tags.</source>
          <target state="translated">&lt;code&gt;terminate&lt;/code&gt; し、 &lt;code&gt;finalize&lt;/code&gt; の方法は、あなたがXMLを生成し、開閉タグを必要としている場合はフォーマットしますね生成ニーズには、例えば、これらのケースを処理する場合は、実装することができることと呼ばれるオプションのメソッドです。</target>
        </trans-unit>
        <trans-unit id="423cad30ef0048166a8eebe3340a46a30155372e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminate&lt;/code&gt; method is called when an event's &lt;code&gt;terminate&lt;/code&gt; method returns true, for example when a &lt;a href=&quot;Test2::Event::Plan&quot;&gt;Test2::Event::Plan&lt;/a&gt; has a &lt;code&gt;'skip_all'&lt;/code&gt; plan, or when a &lt;a href=&quot;Test2::Event::Bail&quot;&gt;Test2::Event::Bail&lt;/a&gt; event is sent. The &lt;code&gt;terminate&lt;/code&gt; method is passed a single argument, the &lt;a href=&quot;Test2::Event&quot;&gt;Test2::Event&lt;/a&gt; object which triggered the terminate.</source>
          <target state="translated">&lt;code&gt;terminate&lt;/code&gt; 方法は、イベントのときに呼び出される &lt;code&gt;terminate&lt;/code&gt; 時に例えば真方法リターンを、&lt;a href=&quot;Test2::Event::Plan&quot;&gt;Test2を::イベント::プランが&lt;/a&gt;持っている &lt;code&gt;'skip_all'&lt;/code&gt; 計画を、またはとき&lt;a href=&quot;Test2::Event::Bail&quot;&gt;にTest2 ::イベント::保釈&lt;/a&gt;イベントが送信されます。 &lt;code&gt;terminate&lt;/code&gt; 方法は、単一の引数、渡され&lt;a href=&quot;Test2::Event&quot;&gt;Test2を::イベント&lt;/a&gt;終了トリガーオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="0e22b53957ab545ec5f1fe43f2463dbb75fb5bef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test_diag&lt;/code&gt; function prepends comment hashes and spacing to the start and newlines to the end of the expected output passed to it and adds it to the list of expected error output. So, instead of writing</source>
          <target state="translated">&lt;code&gt;test_diag&lt;/code&gt; の関数は、渡された期待される出力の最後にコメントハッシュと先頭に間隔と改行を付加し、予想されるエラー出力のリストに追加します。だから、書く代わりに</target>
        </trans-unit>
        <trans-unit id="9a044497bbeccf899d123e744ac60158148d66b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thing&lt;/code&gt; argument can be any of an &lt;code&gt;SV*&lt;/code&gt; , &lt;code&gt;AV*&lt;/code&gt; , or &lt;code&gt;HV*&lt;/code&gt; . The functions are identical except that &lt;code&gt;newRV_inc&lt;/code&gt; increments the reference count of the &lt;code&gt;thing&lt;/code&gt; , while &lt;code&gt;newRV_noinc&lt;/code&gt; does not. For historical reasons, &lt;code&gt;newRV&lt;/code&gt; is a synonym for &lt;code&gt;newRV_inc&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;thing&lt;/code&gt; 引数には、のいずれかとすることができる &lt;code&gt;SV*&lt;/code&gt; 、 &lt;code&gt;AV*&lt;/code&gt; 、または &lt;code&gt;HV*&lt;/code&gt; 。機能があることを除いて同一である &lt;code&gt;newRV_inc&lt;/code&gt; はの参照カウントをインクリメント &lt;code&gt;thing&lt;/code&gt; ながら、 &lt;code&gt;newRV_noinc&lt;/code&gt; はありません。歴史的な理由から、 &lt;code&gt;newRV&lt;/code&gt; は &lt;code&gt;newRV_inc&lt;/code&gt; の同義語です。</target>
        </trans-unit>
        <trans-unit id="39f6cd9542d25aca0f6da28dc2eb900530cd2e73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thing&lt;/code&gt; argument can be any of an &lt;code&gt;SV*&lt;/code&gt;, &lt;code&gt;AV*&lt;/code&gt;, or &lt;code&gt;HV*&lt;/code&gt;. The functions are identical except that &lt;code&gt;newRV_inc&lt;/code&gt; increments the reference count of the &lt;code&gt;thing&lt;/code&gt;, while &lt;code&gt;newRV_noinc&lt;/code&gt; does not. For historical reasons, &lt;code&gt;newRV&lt;/code&gt; is a synonym for &lt;code&gt;newRV_inc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;thing&lt;/code&gt; 引数には、のいずれかとすることができる &lt;code&gt;SV*&lt;/code&gt; 、 &lt;code&gt;AV*&lt;/code&gt; 、または &lt;code&gt;HV*&lt;/code&gt; 。機能があることを除いて同一である &lt;code&gt;newRV_inc&lt;/code&gt; はの参照カウントをインクリメント &lt;code&gt;thing&lt;/code&gt; ながら、 &lt;code&gt;newRV_noinc&lt;/code&gt; はありません。歴史的な理由から、 &lt;code&gt;newRV&lt;/code&gt; は &lt;code&gt;newRV_inc&lt;/code&gt; の同義語です。</target>
        </trans-unit>
        <trans-unit id="764690cb5a9a1e69711deb7f1d4bd7570cd33533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;threads-&amp;gt;self()&lt;/code&gt; class method provides your program with a way to get an object representing the thread it's currently in. You can use this object in the same way as the ones returned from thread creation.</source>
          <target state="translated">&lt;code&gt;threads-&amp;gt;self()&lt;/code&gt; クラスメソッドは、それが現在のスレッドを表すオブジェクトを取得する方法と、あなたのプログラムを提供しています。あなたは、スレッドの作成から返されるものと同じように、このオブジェクトを使用することができます。</target>
        </trans-unit>
        <trans-unit id="5cb77a0f1c56daabcc9daa1cb20e1afceca163c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tid&lt;/code&gt; method returns the tid of a thread. The tid is a monotonically increasing integer assigned when a thread is created. The main thread of a program will have a tid of zero, while subsequent threads will have tids assigned starting with one.</source>
          <target state="translated">&lt;code&gt;tid&lt;/code&gt; 方法は、スレッドのTIDを返します。tidは、スレッドの作成時に割り当てられる単調に増加する整数です。プログラムのメインスレッドのtidは0ですが、後続のスレッドのtidは1から始まります。</target>
        </trans-unit>
        <trans-unit id="852bdb693d32a436b5f27ac2d4c29c14b07baed2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tie&lt;/code&gt; call returns an object, say &lt;code&gt;$o&lt;/code&gt;. You may call</source>
          <target state="translated">&lt;code&gt;tie&lt;/code&gt; コールは言う、オブジェクトを返す &lt;code&gt;$o&lt;/code&gt; 。あなたは電話することができます</target>
        </trans-unit>
        <trans-unit id="9c7906336a9d98d4a1cf6a79c6964edf2df1f812" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time*_modern()&lt;/code&gt; subs do not do this year munging and simply take the year value as provided.</source>
          <target state="translated">&lt;code&gt;time*_modern()&lt;/code&gt; 潜水艦はいじる今年やると簡単に提供される年の値を取ることはありません。</target>
        </trans-unit>
        <trans-unit id="62cae6d3e02f73d7641c7861d0693bc4b08d5c81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; and &lt;code&gt;timegm()&lt;/code&gt; functions perform range checking on the input $sec, $min, $hour, $mday, and $mon values by default.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; と &lt;code&gt;timegm()&lt;/code&gt; 関数は、デフォルトで入力された$秒、$分、$時間、$ MDAY、および$月値に範囲チェックを行います。</target>
        </trans-unit>
        <trans-unit id="3444ad2f99e605827ac849ba41549cb93537c5ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; function is implemented using the same cache. We just assume that we're translating a GMT time, and then fudge it when we're done for the timezone and daylight savings arguments. Note that the timezone is evaluated for each date because countries occasionally change their official timezones. Assuming that &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; corrects for these changes, this routine will also be correct.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; 関数は、同じキャッシュを使用して実装されています。私たちはGMT時刻を変換していると仮定し、タイムゾーンと夏時間の引数の処理が終わったらそれを変更します。国によっては公式のタイムゾーンが変更される場合があるため、タイムゾーンは日付ごとに評価されることに注意してください。 &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; がこれらの変更を修正すると想定すると、このルーチンも修正されます。</target>
        </trans-unit>
        <trans-unit id="d6031b9f93c7f0ead71810ff0ffcc9e88c83f87c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; function is implemented using the same cache. We just assume that we're translating a GMT time, and then fudge it when we're done for the timezone and daylight savings arguments. Note that the timezone is evaluated for each date because countries occasionally change their official timezones. Assuming that &lt;code&gt;localtime()&lt;/code&gt; corrects for these changes, this routine will also be correct.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; 関数は、同じキャッシュを使用して実装されています。GMT時刻を変換していると想定し、タイムゾーンと夏時間の議論が終わったらそれをファッジします。国によって公式のタイムゾーンが変更されることがあるため、タイムゾーンは日付ごとに評価されることに注意してください。 &lt;code&gt;localtime()&lt;/code&gt; がこれらの変更を修正すると仮定すると、このルーチンも正しくなります。</target>
        </trans-unit>
        <trans-unit id="79e29c335d0e24d411a115fbcbdaff898b8a8cf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;times()&lt;/code&gt; function returns elapsed realtime since some point in the past (such as system startup), user and system times for this process, and user and system times used by child processes. All times are returned in clock ticks.</source>
          <target state="translated">&lt;code&gt;times()&lt;/code&gt; 関数戻り、子プロセスで使用される過去のある時点（例えば、システムの起動など）、このプロセスのユーザとシステム時間、およびユーザとシステム時代からリアルタイム経過しました。すべての時間はクロックティックで返されます。</target>
        </trans-unit>
        <trans-unit id="e88ddb341d5b31f6433cf87d10fae07c89fb702d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tmpnam&lt;/code&gt; function returns a unique string which can be used as a filename when creating temporary files. If, for some reason, it is unable to generate a name, it returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tmpnam&lt;/code&gt; はの機能は、一時ファイルを作成するときに、ファイル名として使用することができますユニークな文字列を返します。何らかの理由で名前を生成できない場合は、 &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6b8678670162f30c825dc963303a8366061c0624" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tr///&lt;/code&gt; operator translates whole characters. (Note that the &lt;code&gt;tr///CU&lt;/code&gt; functionality has been removed. For similar functionality to that, see &lt;code&gt;pack('U0', ...)&lt;/code&gt; and &lt;code&gt;pack('C0', ...)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;tr///&lt;/code&gt; 演算子は、全体の文字を変換します。（ &lt;code&gt;tr///CU&lt;/code&gt; 機能が削除されていることに注意してください。これと同様の機能については、 &lt;code&gt;pack('U0', ...)&lt;/code&gt; および &lt;code&gt;pack('C0', ...)&lt;/code&gt; 参照してください）。</target>
        </trans-unit>
        <trans-unit id="d1863d41e42c91ece1fce678f54e90a29e06de0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tr&lt;/code&gt; alternative might look like this:</source>
          <target state="translated">&lt;code&gt;tr&lt;/code&gt; 選択肢は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c010b9c38ee87dfd390ac847c9b0e002caa8d481" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tr&lt;/code&gt; counts the null bytes. The &lt;code&gt;unpack&lt;/code&gt; call returns a list of name-value pairs each of which is taken apart in the &lt;code&gt;map&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;tr&lt;/code&gt; ヌルバイトをカウントします。 &lt;code&gt;unpack&lt;/code&gt; コールがに間隔を取られそれぞれが名前と値のペアのリストを返し &lt;code&gt;map&lt;/code&gt; ブロック。</target>
        </trans-unit>
        <trans-unit id="accc9aa113f108f1f58344bb9d92f9dd409a973d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tr&lt;/code&gt; version is a clear winner. One solution is flexible, the other is fast - and it's appropriately the programmer's choice which to use.</source>
          <target state="translated">&lt;code&gt;tr&lt;/code&gt; バージョンは明確な勝者です。1つのソリューションは柔軟性があり、もう1つは高速です。そして、どちらを使用するかはプログラマーが適切に選択できます。</target>
        </trans-unit>
        <trans-unit id="7969d03acba8ec22322bc524970a2e67bf531eeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument should be equal to the &lt;code&gt;how&lt;/code&gt; value when the &lt;code&gt;SV&lt;/code&gt; was initially made magical.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数はに等しくなければならない &lt;code&gt;how&lt;/code&gt; 時に値 &lt;code&gt;SV&lt;/code&gt; が最初に魔法を行いました。</target>
        </trans-unit>
        <trans-unit id="45b58766c7b5bfa7d8fbeea9c00e3139b61f934f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type=&quot;man&quot;&lt;/code&gt; attribute is always specified for this type of L code.</source>
          <target state="translated">&lt;code&gt;type=&quot;man&quot;&lt;/code&gt; 属性は常にLコードのこのタイプのために指定されています。</target>
        </trans-unit>
        <trans-unit id="51e37e784cf8826358b635a533d80412ae68521a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type=&quot;url&quot;&lt;/code&gt; attribute is always specified for this type of L code.</source>
          <target state="translated">&lt;code&gt;type=&quot;url&quot;&lt;/code&gt; 属性は常にLコードのこのタイプのために指定されています。</target>
        </trans-unit>
        <trans-unit id="e605c3e8404b3b1569b2a8f6ee2a28bb09c8e25f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; template to &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; will render EBCDIC data in EBCDIC characters equivalent to their ASCII counterparts. For example, the following will print &quot;Yes indeed\n&quot; on either an ASCII or EBCDIC computer:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; への &lt;code&gt;u&lt;/code&gt; テンプレートは、EBCDICデータを、対応するASCIIと同等のEBCDIC文字でレンダリングします。たとえば、次の例では、ASCIIまたはEBCDICコンピュータのいずれかで「はい\ n」と出力されます。</target>
        </trans-unit>
        <trans-unit id="bcdcd5bf5921d41526775a635bdda4515bcae7f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; template to &lt;code&gt;pack()&lt;/code&gt; or &lt;code&gt;unpack()&lt;/code&gt; will render EBCDIC data in EBCDIC characters equivalent to their ASCII counterparts. For example, the following will print &quot;Yes indeed\n&quot; on either an ASCII or EBCDIC computer:</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; ためのテンプレート &lt;code&gt;pack()&lt;/code&gt; または &lt;code&gt;unpack()&lt;/code&gt; そのASCIIの対応に相当EBCDIC文字でEBCDICデータをレンダリングします。たとえば、次のようにすると、ASCIIコンピュータまたはEBCDICコンピュータのいずれかで「はい\ n」と出力されます。</target>
        </trans-unit>
        <trans-unit id="0998cba5f7c7355370ef1940f9de1afcbe1199eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undef&lt;/code&gt; value is treated by this function as distinct from the empty string, and no warning will be produced. It is left as-is in the returned list. Subsequent &lt;code&gt;undef&lt;/code&gt; values are still considered identical to the first, and will be removed.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; の値は空の文字列とは異なるように、この機能によって処理され、そして警告が生成されません。返されるリストにはそのまま残されます。後続の &lt;code&gt;undef&lt;/code&gt; 値は、引き続き最初の値と同じであると見なされ、削除されます。</target>
        </trans-unit>
        <trans-unit id="7c83289af1a4c0f7e1129f103e79b7a1caa912f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;untie&lt;/code&gt; Gotcha</source>
          <target state="translated">&lt;code&gt;untie&lt;/code&gt; ガッチャ</target>
        </trans-unit>
        <trans-unit id="6a1909f52d28496be25968c9641232bd70a050cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;up&lt;/code&gt; method increases the semaphore's count by the number specified (which must be an integer &amp;gt;= 1), or by one if no number is specified.</source>
          <target state="translated">&lt;code&gt;up&lt;/code&gt; 方法は、数が指定されていない場合、または1つによって（整数&amp;gt; = 1でなければならない）指定された数によってセマフォの数を増加させます。</target>
        </trans-unit>
        <trans-unit id="3bfafbe930277e35ea02604239f7cd015c3326fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upgrade&lt;/code&gt; command first runs an &lt;code&gt;r&lt;/code&gt; command with the given arguments and then installs the newest versions of all modules that were listed by that.</source>
          <target state="translated">&lt;code&gt;upgrade&lt;/code&gt; コマンドは、最初の実行 &lt;code&gt;r&lt;/code&gt; 指定された引数を指定してコマンドをし、そのことにより、リストされたすべてのモジュールの最新バージョンをインストールします。</target>
        </trans-unit>
        <trans-unit id="ed2a8ecd68dda5352fc1303d01e5cd582863eba1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urllist&lt;/code&gt; parameter of the configuration table contains a list of URLs used for downloading. If the list contains any &lt;code&gt;file&lt;/code&gt; URLs, CPAN always tries there first. This feature is disabled for index files. So the recommendation for the owner of a CD-ROM with CPAN contents is: include your local, possibly outdated CD-ROM as a &lt;code&gt;file&lt;/code&gt; URL at the end of urllist, e.g.</source>
          <target state="translated">設定テーブルの &lt;code&gt;urllist&lt;/code&gt; パラメータには、ダウンロードに使用されるURLのリストが含まれています。リストに &lt;code&gt;file&lt;/code&gt; URL が含まれている場合、CPANは常に最初にそのURLを試みます。この機能は、インデックスファイルでは無効です。したがって、CPANの内容を含むCD-ROMの所有者への推奨は次のとおりです。ローカルの、おそらく古いCD-ROMを、URLリストの最後に &lt;code&gt;file&lt;/code&gt; URL として含めます。たとえば、</target>
        </trans-unit>
        <trans-unit id="52b900f042b9fdb4fefbfa11c5b63b7617ef4658" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;&lt;/code&gt; pragma produces some lovely diagnostics. One can also use the &lt;b&gt;-w&lt;/b&gt; flag, but its use is normally discouraged, because it gets applied to all executed Perl code, including that not under your control.</source>
          <target state="translated">&lt;code&gt;use &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;&lt;/code&gt; プラグマは、いくつかの素敵な診断を生成します。&lt;b&gt;-w&lt;/b&gt;フラグを使用することもできますが、実行されたすべてのPerlコードに適用されるため、通常は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d475de0db7f66747e084c66e42ee75d8f3488116" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use filetest&lt;/code&gt; or &lt;code&gt;no filetest&lt;/code&gt; statements affect file tests defined in their block, up to the end of the closest enclosing block (they are lexically block-scoped).</source>
          <target state="translated">&lt;code&gt;use filetest&lt;/code&gt; や &lt;code&gt;no filetest&lt;/code&gt; 文がアップし、最も近い外側のブロックの終わり（彼らは字句スコープのブロックされている）に、そのブロック内で定義されたファイルのテストに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="acfbde926d15ce3b3022057fc9c74ed9c253c404" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use utf8&lt;/code&gt; pragma tells the Perl parser to allow UTF-8 in the program text in the current lexical scope. The &lt;code&gt;no utf8&lt;/code&gt; pragma tells Perl to switch back to treating the source text as literal bytes in the current lexical scope. (On EBCDIC platforms, technically it is allowing UTF-EBCDIC, and not UTF-8, but this distinction is academic, so in this document the term UTF-8 is used to mean both).</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; プラグマは、現在のレキシカルスコープでプログラムテキストにUTF-8を許可するようにPerlのパーサに指示します。 &lt;code&gt;no utf8&lt;/code&gt; プラグマは、現在のレキシカルスコープでリテラルバイトとしてソーステキストを処理に戻すためにPerlを伝えます。（EBCDICプラットフォームでは、技術的にはUTF-8ではなくUTF-EBCDICを許可していますが、この区別は学術的なものであるため、このドキュメントではUTF-8という用語は両方を意味するために使用されます）。</target>
        </trans-unit>
        <trans-unit id="29c5989f0b30cb3c2f7f588b2b53bc0b52ccd653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; switch will warn you if it interprets a reserved word as a string. But it will no longer warn you about using lowercase words, because the string is effectively quoted.</source>
          <target state="translated">&lt;code&gt;use warnings&lt;/code&gt; プラグマや&lt;b&gt;-w&lt;/b&gt;は文字列が予約語として解釈した場合、スイッチは、警告を表示します。ただし、文字列は効果的に引用符で囲まれているため、小文字の使用について警告することはなくなりました。</target>
        </trans-unit>
        <trans-unit id="468aa2690cfac4f39947fa49f9490387f38518f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and &lt;code&gt;utf8::upgrade()&lt;/code&gt; aren't needed if the argument is above 0xFF, so the above could have been written as</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; と &lt;code&gt;utf8::upgrade()&lt;/code&gt; の引数が0xFF以上であれば、上記のように書かれていることができるように、必要とされていません</target>
        </trans-unit>
        <trans-unit id="c685630771328cb31903796f4e815c9203e60a01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8&lt;/code&gt; flag therefore switches between two modes: disabled means you will get a Unicode string in Perl, enabled means you get an UTF-8 encoded octet/binary string in Perl.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; フラグは、そのための2つのモードの間で切り替わり：あなたはPerlでUnicode文字列を取得する無効手段は、あなたがPerlでUTF-8エンコードされたオクテット/バイナリ文字列を取得する手段を可能にしました。</target>
        </trans-unit>
        <trans-unit id="14707ff227aab2f7f6198f5296b54e26eed1065e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.c:1716&lt;/code&gt; is the source code file and line number.</source>
          <target state="translated">&lt;code&gt;util.c:1716&lt;/code&gt; は、ソースコードファイルと行番号です。</target>
        </trans-unit>
        <trans-unit id="8b13c9e2cf58e77564c57c1639c049e04a961551" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; pragma (see &lt;a href=&quot;perlmod#vars&quot;&gt;&quot;vars&quot; in perlmod&lt;/a&gt;) may be used in such situations as an alternative to explicitly qualifying all globals with the package namespace. Variables pre-declared with this pragma will be visible to any autoloaded routines (but will not be invisible outside the package, unfortunately).</source>
          <target state="translated">&lt;code&gt;vars&lt;/code&gt; はプラグマは、（参照&lt;a href=&quot;perlmod#vars&quot;&gt;はperlmodに「VARS」&lt;/a&gt;）明示的にパッケージの名前空間とすべてのグローバルを適格に代わるものとして、このような状況で使用することができます。このプラグマで事前に宣言された変数は、自動ロードされたすべてのルーチンに表示されます（ただし、残念ながら、パッケージの外部には表示されません）。</target>
        </trans-unit>
        <trans-unit id="0a270d12703e96872d5ec49cc2bfa5c1ab0eb455" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; pragma (see &lt;a href=&quot;perlmod#vars&quot;&gt;vars in perlmod&lt;/a&gt;) may be used in such situations as an alternative to explicitly qualifying all globals with the package namespace. Variables pre-declared with this pragma will be visible to any autoloaded routines (but will not be invisible outside the package, unfortunately).</source>
          <target state="translated">&lt;code&gt;vars&lt;/code&gt; はプラグマは、（参照&lt;a href=&quot;perlmod#vars&quot;&gt;perlmodを中VARSを&lt;/a&gt;）明示的にパッケージの名前空間とすべてのグローバルを適格に代わるものとして、このような状況で使用することができます。このプラグマで事前に宣言された変数は、オートロードされたルーチンから見えます（残念ながら、パッケージの外からは見えません）。</target>
        </trans-unit>
        <trans-unit id="8a981f510b5bc1a31c1fe6f83ee184b884a41beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;inc&lt;/code&gt; attributes influence the behavior of this search; notably, &lt;code&gt;inc&lt;/code&gt; , if true, adds @INC</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; および &lt;code&gt;inc&lt;/code&gt; の属性は、この検索の動作に影響を与えます。特に、 &lt;code&gt;inc&lt;/code&gt; がtrueの場合、@ INCが追加されます</target>
        </trans-unit>
        <trans-unit id="e2febc4d875aa8fe8fb27485c483c05158694811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;inc&lt;/code&gt; attributes influence the behavior of this search; notably, &lt;code&gt;inc&lt;/code&gt;, if true, adds @INC</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; および &lt;code&gt;inc&lt;/code&gt; の属性は、この検索の動作に影響を与えます。特に、 &lt;code&gt;inc&lt;/code&gt; は、trueの場合、@ INCを追加します</target>
        </trans-unit>
        <trans-unit id="543a455e6e879b54b06a46e043825bb2c5bcee1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; option is required. If it is omitted or if an unsupported version is given, then &lt;code&gt;provides&lt;/code&gt; will throw an error.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; オプションが必要です。それが省略された場合またはサポートされていないバージョンが指定された場合、その &lt;code&gt;provides&lt;/code&gt; 、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="647cdf74da11836aaddbacaf0e85905018d3cf1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vmsopen&lt;/code&gt; function enables you to specify optional RMS arguments to the VMS CRTL when opening a file. Its operation is similar to the built-in Perl &lt;code&gt;open&lt;/code&gt; function (see &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for a complete description), but it will only open normal files; it cannot open pipes or duplicate existing I/O handles. Up to 8 optional arguments may follow the file name. These arguments should be strings which specify optional file characteristics as allowed by the CRTL. (See the CRTL reference manual description of creat() and fopen() for details.) If successful, &lt;code&gt;vmsopen&lt;/code&gt; returns a VMS::Stdio file handle; if an error occurs, it returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vmsopen&lt;/code&gt; 機能は、ファイルを開くときにVMS CRTLにオプションのRMS引数を指定することができます。その動作は、内蔵のPerlに似ている &lt;code&gt;open&lt;/code&gt; 機能（参照&lt;a href=&quot;perlfunc&quot;&gt;perlfuncの&lt;/a&gt;完全な説明のために）、それだけで開いている通常のファイルでしょう。パイプを開いたり、既存のI / Oハンドルを複製したりすることはできません。最大8つのオプションの引数をファイル名の後に続けることができます。これらの引数は、CRTLで許可されているオプションのファイル特性を指定する文字列である必要があります。 （詳細については、creat（）およびfopen（）の &lt;code&gt;vmsopen&lt;/code&gt; リファレンスマニュアルの説明を参照してください。）成功した​​場合、vmsopenはVMS :: Stdioファイルハンドルを返します。エラーが発生した場合は、 &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="42e9db15fd405837558fc69a3922cf4c07b0d66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; return type for this function tells the &lt;b&gt;xsubpp&lt;/b&gt; compiler that the RETVAL variable is not needed or used and that it should not be created. In most scenarios the void return type should be used with the PPCODE: directive.</source>
          <target state="translated">この関数の &lt;code&gt;void&lt;/code&gt; 戻り型は、RETVAL変数が不要または使用されておらず、作成されるべきではないことを&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーに通知します。ほとんどのシナリオでは、PPCODE：ディレクティブでvoid戻り型を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0803129a0bffe56a31c42b951ef5b3d0fb1885a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wanted()&lt;/code&gt; function does whatever verifications you want on each file and directory. Note that despite its name, the &lt;code&gt;wanted()&lt;/code&gt; function is a generic callback function, and does &lt;b&gt;not&lt;/b&gt; tell File::Find if a file is &quot;wanted&quot; or not. In fact, its return value is ignored.</source>
          <target state="translated">&lt;code&gt;wanted()&lt;/code&gt; 関数は、各ファイルおよびディレクトリ上の好きな検証ません。その名前にもかかわらず、 &lt;code&gt;wanted()&lt;/code&gt; 関数は一般的なコールバック関数であり、ファイルが「必要」かどうかをFile :: Findに通知し&lt;b&gt;ない&lt;/b&gt;ことに注意してください。実際、その戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="31b1fe49028e0123810b9a17034fff70bf1be6cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma gives control over which warnings are enabled in which parts of a Perl program. It's a more flexible alternative for both the command line flag &lt;b&gt;-w&lt;/b&gt; and the equivalent Perl variable, &lt;code&gt;$^W&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; プラグマは、警告はPerlプログラムのどの部分で有効になっている、その上に制御できます。これは、コマンドラインフラグ&lt;b&gt;-w&lt;/b&gt;と同等のPerl変数 &lt;code&gt;$^W&lt;/code&gt; 両方に対して、より柔軟な代替手段です。</target>
        </trans-unit>
        <trans-unit id="a8cf47d373c14fa99c46a7f56571b8224d41ad4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma gives control over which warnings are enabled in which parts of a Perl program. It's a more flexible alternative for both the command line flag &lt;b&gt;-w&lt;/b&gt; and the equivalent Perl variable, &lt;code&gt;$^W&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; プラグマは、警告はPerlプログラムのどの部分で有効になっている、その上に制御できます。これは、コマンドラインフラグ&lt;b&gt;-w&lt;/b&gt;と同等のPerl変数 &lt;code&gt;$^W&lt;/code&gt; 両方のより柔軟な代替手段です。</target>
        </trans-unit>
        <trans-unit id="4d599e8a7252be8237239500a33b9cae49be5da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma provides a number of functions that are useful for module authors. These are used when you want to report a module-specific warning to a calling module has enabled warnings via the &lt;code&gt;warnings&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; プラグマはモジュールの作者に役立つ多くの機能を提供します。これらは、モジュール固有の警告を呼び出しモジュールに報告するときに、 &lt;code&gt;warnings&lt;/code&gt; プラグマを介して警告を有効にしている場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="eaaf2c2b19accccb92902e0f89453388a8136ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;when&lt;/code&gt; modifier is an experimental feature that first appeared in Perl 5.14. To use it, you should include a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.14&lt;/code&gt; declaration. (Technically, it requires only the &lt;code&gt;switch&lt;/code&gt; feature, but that aspect of it was not available before 5.14.) Operative only from within a &lt;code&gt;foreach&lt;/code&gt; loop or a &lt;code&gt;given&lt;/code&gt; block, it executes the statement only if the smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; is true. If the statement executes, it is followed by a &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; from inside a &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; from inside a &lt;code&gt;given&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 修飾子は最初のPerl 5.14に登場した実験的な機能です。これを使用するには、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.14&lt;/code&gt; 宣言を含める必要があります。 （技術的には、 &lt;code&gt;switch&lt;/code&gt; 機能のみが必要ですが、5.14より前のバージョンでは利用できませんでした。） &lt;code&gt;foreach&lt;/code&gt; ループまたは &lt;code&gt;given&lt;/code&gt; ブロック内からのみ機能し、smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; がtrueの場合にのみステートメントを実行します。ステートメントが実行されると、 &lt;code&gt;foreach&lt;/code&gt; の内側から &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; が続き、 &lt;code&gt;given&lt;/code&gt; れたの内側から &lt;code&gt;break&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="01d8e0a81cc17a534c96cebc629a6872720abbea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;when&lt;/code&gt; modifier is an experimental feature that first appeared in Perl 5.14. To use it, you should include a &lt;code&gt;use v5.14&lt;/code&gt; declaration. (Technically, it requires only the &lt;code&gt;switch&lt;/code&gt; feature, but that aspect of it was not available before 5.14.) Operative only from within a &lt;code&gt;foreach&lt;/code&gt; loop or a &lt;code&gt;given&lt;/code&gt; block, it executes the statement only if the smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; is true. If the statement executes, it is followed by a &lt;code&gt;next&lt;/code&gt; from inside a &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; from inside a &lt;code&gt;given&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 修飾子は最初のPerl 5.14に登場した実験的な機能です。これを使用するには、 &lt;code&gt;use v5.14&lt;/code&gt; 宣言を含める必要があります。 （技術的には、 &lt;code&gt;switch&lt;/code&gt; 機能のみが必要ですが、5.14より前はその側面は利用できませんでした。） &lt;code&gt;foreach&lt;/code&gt; ループまたは &lt;code&gt;given&lt;/code&gt; ブロック内からのみ動作し、smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; がtrueの場合にのみステートメントを実行します。ステートメントが実行されると、 &lt;code&gt;foreach&lt;/code&gt; の内側から &lt;code&gt;next&lt;/code&gt; のステートメントが続き、 &lt;code&gt;given&lt;/code&gt; れたの内側から &lt;code&gt;break&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e19be3044d8f18bead09bab3403090b34e1156d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; modifiers have the usual &quot;&lt;code&gt;while&lt;/code&gt; loop&quot; semantics (conditional evaluated first), except when applied to a &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;-BLOCK (or to the Perl4 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;-SUBROUTINE statement), in which case the block executes once before the conditional is evaluated.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; と &lt;code&gt;until&lt;/code&gt; 改質剤は、通常、「持って &lt;code&gt;while&lt;/code&gt; に適用される場合を除いて、ループ」セマンティクス（条件が最初に評価する） &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; -ブロック（またはのPerl4には &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; -SUBROUTINE文）、ケースのブロック実行条件が評価される前に一度。</target>
        </trans-unit>
        <trans-unit id="9a6cf234df302fa34cb78a16f01d3bf12b7f579c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; modifiers have the usual &quot;&lt;code&gt;while&lt;/code&gt; loop&quot; semantics (conditional evaluated first), except when applied to a &lt;code&gt;do&lt;/code&gt;-BLOCK (or to the Perl4 &lt;code&gt;do&lt;/code&gt;-SUBROUTINE statement), in which case the block executes once before the conditional is evaluated.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; と &lt;code&gt;until&lt;/code&gt; 改質剤は、通常、「持って &lt;code&gt;while&lt;/code&gt; に適用される場合を除いて、ループ」セマンティクス（条件が最初に評価する） &lt;code&gt;do&lt;/code&gt; -ブロック（またはのPerl4には &lt;code&gt;do&lt;/code&gt; -SUBROUTINE文）、ケースのブロック実行条件が評価される前に一度。</target>
        </trans-unit>
        <trans-unit id="3d5b06f931731acb22dad061fcd52f2783c874b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; statement executes the block as long as the expression is &lt;a href=&quot;#Truth-and-Falsehood&quot;&gt;true&lt;/a&gt;. The &lt;code&gt;until&lt;/code&gt; statement executes the block as long as the expression is false. The LABEL is optional, and if present, consists of an identifier followed by a colon. The LABEL identifies the loop for the loop control statements &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;. If the LABEL is omitted, the loop control statement refers to the innermost enclosing loop. This may include dynamically looking back your call-stack at run time to find the LABEL. Such desperate behavior triggers a warning if you use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; flag.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 文は長い式があるとして、ブロックを実行し&lt;a href=&quot;#Truth-and-Falsehood&quot;&gt;、真&lt;/a&gt;。 &lt;code&gt;until&lt;/code&gt; 文は、長い式が偽であるとして、ブロックを実行します。 LABELはオプションであり、存在する場合は、識別子の後にコロンが続きます。 LABELは、ループ制御ステートメント &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; のループを識別します。 LABELを省略した場合、ループ制御ステートメントは最も内側の囲みループを参照します。これには、実行時にコールスタックを動的に調べて、LABELを見つけることが含まれます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;フラグを使用すると、このような絶望的な動作により警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="fc7bfa0e2e102bef2e270e8846cdbd5da131def6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; statement executes the block as long as the expression is true. The &lt;code&gt;until&lt;/code&gt; statement executes the block as long as the expression is false. The LABEL is optional, and if present, consists of an identifier followed by a colon. The LABEL identifies the loop for the loop control statements &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, and &lt;code&gt;redo&lt;/code&gt;. If the LABEL is omitted, the loop control statement refers to the innermost enclosing loop. This may include dynamically looking back your call-stack at run time to find the LABEL. Such desperate behavior triggers a warning if you use the &lt;code&gt;use warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; flag.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 文は、長い式が真であるとしてブロックを実行します。 &lt;code&gt;until&lt;/code&gt; 文は、長い式が偽であるとして、ブロックを実行します。 LABELはオプションであり、存在する場合は、識別子とそれに続くコロンで構成されます。 LABELは、ループ制御ステートメント &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;last&lt;/code&gt; 、および &lt;code&gt;redo&lt;/code&gt; のループを識別します。 LABELが省略されている場合、ループ制御ステートメントは最も内側の囲んでいるループを参照します。これには、実行時にコールスタックを動的に振り返ってLABELを見つけることが含まれる場合があります。このような絶望的な動作は、 &lt;code&gt;use warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;フラグを使用すると、警告をトリガーします。</target>
        </trans-unit>
        <trans-unit id="2df4bdf5b271135d9fbaa4b9e22485bd5691df53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method is a method, so it either gets a class or instance. The two arguments are the &lt;code&gt;$event&lt;/code&gt; object it should record, and the &lt;code&gt;$assert_num&lt;/code&gt; which is the number of the current assertion (ok), or the last assertion if this event is not itself an assertion. The assertion number may be any integer 0 or greater, and may be undefined in some cases.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 、それがいずれかのクラスまたはインスタンスを取得しますので、この方法は、方法です。2つの引数は、記録する必要のある &lt;code&gt;$event&lt;/code&gt; オブジェクトと、現在のアサーション（ok）の番号である &lt;code&gt;$assert_num&lt;/code&gt; 、またはこのイベント自体がアサーションでない場合は最後のアサーションです。アサーション番号は0以上の任意の整数であり、場合によっては未定義の場合があります。</target>
        </trans-unit>
        <trans-unit id="42f557fbb89c75fd2ab740d93d25721ccbf0fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; function allows another thread to take control of the CPU. The exact results are implementation-dependent.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 関数は、別のスレッドがCPUの制御を取ることができます。正確な結果は実装に依存します。</target>
        </trans-unit>
        <trans-unit id="213469077fec26be3b6b3b082204198d28c562aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zipinfo&lt;/code&gt; program that comes with the info-zip distribution (&lt;a href=&quot;http://www.info-zip.org/&quot;&gt;http://www.info-zip.org/&lt;/a&gt;) can also display details of the structure of a zip file.</source>
          <target state="translated">info-zipディストリビューション（&lt;a href=&quot;http://www.info-zip.org/&quot;&gt;http://www.info-zip.org/&lt;/a&gt;）に付属の &lt;code&gt;zipinfo&lt;/code&gt; プログラムは、zipファイルの構造の詳細を表示することもできます。</target>
        </trans-unit>
        <trans-unit id="246e63b2eb0074027eaf6b6fe6bf0995cbbb987b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators return the last value evaluated (unlike C's &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, which return 0 or 1). Thus, a reasonably portable way to find out the home directory might be:</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; 、 &lt;code&gt;//&lt;/code&gt; および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子は、最後に評価された値を返します（0または1を返すCの &lt;code&gt;||&lt;/code&gt; および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; とは異なります）。したがって、ホームディレクトリを見つけるための合理的に移植可能な方法は次のようになります。</target>
        </trans-unit>
        <trans-unit id="11f57b3d94eabb5c19fb9360ab6afe8316dfa0a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~~&lt;/code&gt; operator compares its operands &quot;polymorphically&quot;, determining how to compare them according to their actual types (numeric, string, array, hash, etc.) Like the equality operators with which it shares the same precedence, &lt;code&gt;~~&lt;/code&gt; returns 1 for true and &lt;code&gt;&quot;&quot;&lt;/code&gt; for false. It is often best read aloud as &quot;in&quot;, &quot;inside of&quot;, or &quot;is contained in&quot;, because the left operand is often looked for</source>
          <target state="translated">&lt;code&gt;~~&lt;/code&gt; 演算子は、同じ優先度を共有する等価演算子と同様に実際のタイプ（数値、文字列、配列、ハッシュ、等）に応じてそれらを比較する方法を決定する、「多形」は、そのオペランドを比較 &lt;code&gt;~~&lt;/code&gt; ためのリターン1 trueおよびfalseの場合は &lt;code&gt;&quot;&quot;&lt;/code&gt; 。多くの場合、左のオペランドが検索されるため、「in」、「inside of」、または「is contains in」と読み上げるのが最適です。</target>
        </trans-unit>
        <trans-unit id="9e2869673394c26d565412dbb368358875961728" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~~&lt;/code&gt; operator compares its operands &quot;polymorphically&quot;, determining how to compare them according to their actual types (numeric, string, array, hash, etc.). Like the equality operators with which it shares the same precedence, &lt;code&gt;~~&lt;/code&gt; returns 1 for true and &lt;code&gt;&quot;&quot;&lt;/code&gt; for false. It is often best read aloud as &quot;in&quot;, &quot;inside of&quot;, or &quot;is contained in&quot;, because the left operand is often looked for</source>
          <target state="translated">&lt;code&gt;~~&lt;/code&gt; 演算子は、その実際の型（数値、文字列、配列、ハッシュなど）に応じてそれらを比較する方法を決定する、「多形」のオペランドを比較します。同じ優先順位を共有する等式演算子と同様に、 &lt;code&gt;~~&lt;/code&gt; はtrueの場合は1を返し、falseの場合は &lt;code&gt;&quot;&quot;&lt;/code&gt; を返します。多くの場合、左側のオペランドが検索されることが多いため、「in」、「inside of」、または「iscontainsin」として読み上げるのが最適です。</target>
        </trans-unit>
        <trans-unit id="ef321bd7088ac81817f2231db61c1174692aaac0" translate="yes" xml:space="preserve">
          <source>The ADLER32 checksum field must be present.</source>
          <target state="translated">ADLER32 チェックサムフィールドが存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="9c4519701849f27da68be727b95e63207f2a9abf" translate="yes" xml:space="preserve">
          <source>The AIX tar does not fill all unused space in the tar archive with 0x00. This sometimes leads to warning messages from &lt;code&gt;Archive::Tar&lt;/code&gt; .</source>
          <target state="translated">AIX tarは、tarアーカイブ内のすべての未使用スペースを0x00で満たすわけではありません。これにより、 &lt;code&gt;Archive::Tar&lt;/code&gt; からの警告メッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="508b055d2e59a80ceed1c9bfc5a331ff6cb825bc" translate="yes" xml:space="preserve">
          <source>The AIX tar does not fill all unused space in the tar archive with 0x00. This sometimes leads to warning messages from &lt;code&gt;Archive::Tar&lt;/code&gt;.</source>
          <target state="translated">AIX tarは、tarアーカイブ内のすべての未使用スペースを0x00で埋めるわけではありません。これにより、 &lt;code&gt;Archive::Tar&lt;/code&gt; からの警告メッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="b5549afa573e8454744ea43299cd8d8505147fcd" translate="yes" xml:space="preserve">
          <source>The ALIAS: Keyword</source>
          <target state="translated">ザ・アライアス:キーワード</target>
        </trans-unit>
        <trans-unit id="2ce9242faeeab07eef2f7afd701bea6933de8059" translate="yes" xml:space="preserve">
          <source>The ALIAS: keyword allows an XSUB to have two or more unique Perl names and to know which of those names was used when it was invoked. The Perl names may be fully-qualified with package names. Each alias is given an index. The compiler will setup a variable called &lt;code&gt;ix&lt;/code&gt; which contain the index of the alias which was used. When the XSUB is called with its declared name &lt;code&gt;ix&lt;/code&gt; will be 0.</source>
          <target state="translated">ALIAS：キーワードを使用すると、XSUBが2つ以上の固有のPerl名を持ち、それらが呼び出されたときにどの名前が使用されたかを知ることができます。Perl名は、パッケージ名で完全修飾できます。各エイリアスにはインデックスが与えられます。コンパイラは、使用されたエイリアスのインデックスを含む &lt;code&gt;ix&lt;/code&gt; と呼ばれる変数をセットアップします。XSUBが宣言された名前で呼び出されると、 &lt;code&gt;ix&lt;/code&gt; は0になります。</target>
        </trans-unit>
        <trans-unit id="15fd0430aabb02304def7c36146cf671599d3942" translate="yes" xml:space="preserve">
          <source>The API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9ed04c99d7b2c6a9ba47b9e4b73c73bb3ccc347c" translate="yes" xml:space="preserve">
          <source>The API was changed in the 2.0 branch. For a time, &lt;code&gt;mkpath&lt;/code&gt; and &lt;code&gt;rmtree&lt;/code&gt; tried, unsuccessfully, to deal with the two different calling mechanisms. This approach was considered a failure.</source>
          <target state="translated">APIは2.0ブランチで変更されました。しばらくの間、 &lt;code&gt;mkpath&lt;/code&gt; と &lt;code&gt;rmtree&lt;/code&gt; は2つの異なる呼び出しメカニズムを処理しようとしましたが、失敗しました。このアプローチは失敗と見なされました。</target>
        </trans-unit>
        <trans-unit id="009ead0f6ffd2c056d27d3bfda98818a54d2faea" translate="yes" xml:space="preserve">
          <source>The ASCII region (0x00-0x7f) is preserved for all encodings, even though this conflicts with mappings by the Unicode Consortium.</source>
          <target state="translated">ASCII 領域 (0x00-0x7f)は、Unicode コンソーシアムによるマッピングと競合しますが、すべてのエンコーディングで保持されます。</target>
        </trans-unit>
        <trans-unit id="93fd64b40c593362e390e4e7060b0bced9f138ed" translate="yes" xml:space="preserve">
          <source>The ASCII-specific functions. Each of these is just the same as the version without the trailing &quot;A&quot;.</source>
          <target state="translated">アスキー固有の機能です。これらは、末尾の &quot;A &quot;を除いたバージョンと同じです。</target>
        </trans-unit>
        <trans-unit id="b3c4e287eeab5aae5482e7df8b6e409cada7c372" translate="yes" xml:space="preserve">
          <source>The ASCII/Latin-1/Unicode character with that number. A leading &quot;0x&quot; means that</source>
          <target state="translated">その番号を持つASCII/Latin-1/Unicode文字。先頭の「0x」は</target>
        </trans-unit>
        <trans-unit id="b76347c5c2c07c6a471b32d6864a1a7d9b8fb48a" translate="yes" xml:space="preserve">
          <source>The AUTOLOAD method, discussed in &lt;a href=&quot;perlsub#Autoloading&quot;&gt;&quot;Autoloading&quot; in perlsub&lt;/a&gt; lets you capture calls to undefined functions and methods.</source>
          <target state="translated">&lt;a href=&quot;perlsub#Autoloading&quot;&gt;perlsubの「自動ロード」で&lt;/a&gt;説明されているAUTOLOADメソッドを使用すると、未定義の関数およびメソッドへの呼び出しをキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="e2afefe4f37ea14f731718bb07a4d6306f1639c5" translate="yes" xml:space="preserve">
          <source>The AUTOLOAD method, discussed in &lt;a href=&quot;perlsub#Autoloading&quot;&gt;Autoloading in perlsub&lt;/a&gt; lets you capture calls to undefined functions and methods.</source>
          <target state="translated">&lt;a href=&quot;perlsub#Autoloading&quot;&gt;perlsubのオートロードで&lt;/a&gt;説明されているAUTOLOADメソッドを使用すると、未定義の関数やメソッドへの呼び出しをキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="31231455a0cef5b5794db63f07a47d2f6efab12c" translate="yes" xml:space="preserve">
          <source>The ActiveState Pages, &lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;</source>
          <target state="translated">ActiveState Pages、&lt;a href=&quot;http://www.activestate.com/&quot;&gt;http：&lt;/a&gt; //www.activestate.com/</target>
        </trans-unit>
        <trans-unit id="334394ca32871dfe81ad4bfaf08e575776ff3a37" translate="yes" xml:space="preserve">
          <source>The ActiveState Pages, &lt;a href=&quot;https://www.activestate.com/&quot;&gt;https://www.activestate.com/&lt;/a&gt;</source>
          <target state="translated">ActiveStateページ、&lt;a href=&quot;https://www.activestate.com/&quot;&gt;https：//www.activestate.com/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fbbc6fc0e5dd1ef33879bfc672f5e3e8813e4f97" translate="yes" xml:space="preserve">
          <source>The Adventures of Tom Bombadil</source>
          <target state="translated">トム・ボンバディルの冒険</target>
        </trans-unit>
        <trans-unit id="e2e0a5aea5199e87efc4db9939033262cf1e73b8" translate="yes" xml:space="preserve">
          <source>The Alignment Pit</source>
          <target state="translated">アライメントピット</target>
        </trans-unit>
        <trans-unit id="68a751b9c456def01d238b0c06471f4927931bb2" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (ASCII or US-ASCII) is a set of integers running from 0 to 127 (decimal) that have standardized interpretations by the computers which use ASCII. For example, 65 means the letter &quot;A&quot;. The range 0..127 can be covered by setting the bits in a 7-bit binary digit, hence the set is sometimes referred to as &quot;7-bit ASCII&quot;. ASCII was described by the American National Standards Institute document ANSI X3.4-1986. It was also described by ISO 646:1991 (with localization for currency symbols). The full ASCII set is given in the table &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt; as the first 128 elements. Languages that can be written adequately with the characters in ASCII include English, Hawaiian, Indonesian, Swahili and some Native American languages.</source>
          <target state="translated">情報交換のためのアメリカ標準コード（ASCIIまたはUS-ASCII）は、ASCIIを使用するコンピューターによる標準化された解釈を持つ0から127（10進数）までの整数のセットです。たとえば、65は文字「A」を意味します。範囲0..127は、7ビットの2進数字でビットを設定することでカバーできます。したがって、このセットは「7ビットASCII」と呼ばれることもあります。 ASCIIは、米国規格協会の文書ANSI X3.4-1986で説明されています。 ISO 646：1991（通貨記号のローカライズあり）でも説明されています。完全なASCIIセットは、最初の128要素として&lt;a href=&quot;#recipe-3&quot;&gt;以下&lt;/a&gt;の表に示されています。 ASCIIの文字で適切に記述できる言語には、英語、ハワイ語、インドネシア語、スワヒリ語、および一部のネイティブアメリカン言語が含まれます。</target>
        </trans-unit>
        <trans-unit id="4f30a3791e1ac69d9730db09043c7e01d216a23a" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (ASCII or US-ASCII) is a set of integers running from 0 to 127 (decimal) that have standardized interpretations by the computers which use ASCII. For example, 65 means the letter &quot;A&quot;. The range 0..127 can be covered by setting various bits in a 7-bit binary digit, hence the set is sometimes referred to as &quot;7-bit ASCII&quot;. ASCII was described by the American National Standards Institute document ANSI X3.4-1986. It was also described by ISO 646:1991 (with localization for currency symbols). The full ASCII set is given in the table &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt; as the first 128 elements. Languages that can be written adequately with the characters in ASCII include English, Hawaiian, Indonesian, Swahili and some Native American languages.</source>
          <target state="translated">情報交換のためのアメリカ標準コード（ASCIIまたはUS-ASCII）は、ASCIIを使用するコンピューターによる解釈が標準化された0から127（10進数）までの整数のセットです。たとえば、65は文字「A」を意味します。 0..127の範囲は、7ビットの2桁にさまざまなビットを設定することでカバーできるため、このセットは「7ビットASCII」と呼ばれることもあります。 ASCIIは、米国規格協会の文書ANSIX3.4-1986によって記述されました。また、ISO 646：1991（通貨記号のローカリゼーションあり）でも説明されています。完全なASCIIセットは、最初の128要素として&lt;a href=&quot;#recipe-3&quot;&gt;以下&lt;/a&gt;の表に示されています。 ASCIIの文字で適切に記述できる言語には、英語、ハワイ語、インドネシア語、スワヒリ語、およびいくつかのネイティブアメリカン言語が含まれます。</target>
        </trans-unit>
        <trans-unit id="f3ff218a8809c68d0eb083f2cf66b8207142d4f0" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (a 7-bit character set adequate only for poorly representing English text). Often used loosely to describe the lowest 128 values of the various ISO-8859-X character sets, a bunch of mutually incompatible 8-bit codes best described as half ASCII. See also &lt;b&gt;Unicode&lt;/b&gt;.</source>
          <target state="translated">米国標準情報交換コード（7ビットの文字セットで、英語のテキストの表現が不十分な場合にのみ適切）。多くの場合、さまざまなISO-8859-X文字セットの最小128値を表すために緩く使用されます。相互に互換性のない一連の8ビットコードは、ハーフASCIIとして最もよく記述されます。&lt;b&gt;Unicode&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0269ea9ab723afb75524e043608495b84069c96f" translate="yes" xml:space="preserve">
          <source>The Amiga::ARexx module allows you to easily create a perl based ARexx host or to send ARexx commands to other programs.</source>
          <target state="translated">Amiga::ARexxモジュールは、PerlベースのARexxホストを簡単に作成したり、他のプログラムにARexxコマンドを送信したりすることができます。</target>
        </trans-unit>
        <trans-unit id="1af5792ad21fdac265ea44a70d1cb66ca1977707" translate="yes" xml:space="preserve">
          <source>The Amiga::Exec module introduces support for Wait().</source>
          <target state="translated">Amiga::Exec モジュールは Wait()のサポートを導入しています。</target>
        </trans-unit>
        <trans-unit id="fd1c7da39d90054f5c4c81dc1a1fa13bcbbe82e7" translate="yes" xml:space="preserve">
          <source>The Anatomy of an XSUB</source>
          <target state="translated">XSUBの解剖学</target>
        </trans-unit>
        <trans-unit id="0746d95bfde5c5ba18bf27b5d1463ad01ffdafa1" translate="yes" xml:space="preserve">
          <source>The Argument Stack</source>
          <target state="translated">引数スタック</target>
        </trans-unit>
        <trans-unit id="59f8369b68ee932dd97b5ec57202b3f3969c4a83" translate="yes" xml:space="preserve">
          <source>The Arrow Operator</source>
          <target state="translated">アローオペレーター</target>
        </trans-unit>
        <trans-unit id="e40e5d487b331e1f7f4c2477322a84662ea1dcde" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming</source>
          <target state="translated">コンピュータ・プログラミングの技術</target>
        </trans-unit>
        <trans-unit id="e6a71a9e8ae70e8f61fd0c5d80d8189dbf3cf681" translate="yes" xml:space="preserve">
          <source>The AutoSplit and &lt;b&gt;AutoLoader&lt;/b&gt; modules automate the creation of forward declarations. The AutoSplit module creates an 'index' file containing forward declarations of all the AutoSplit subroutines. When the AutoLoader module is 'use'd it loads these declarations into its callers package.</source>
          <target state="translated">自動splitと&lt;b&gt;オートローダー&lt;/b&gt;モジュールは、前方宣言の作成を自動化します。AutoSplitモジュールは、すべてのAutoSplitサブルーチンの前方宣言を含む「インデックス」ファイルを作成します。AutoLoaderモジュールが「使用」されると、これらの宣言がその呼び出し元パッケージにロードされます。</target>
        </trans-unit>
        <trans-unit id="547ca45f60093a7fb15745aaa1976d8399cc0918" translate="yes" xml:space="preserve">
          <source>The B-determined class of the OP, in all caps.</source>
          <target state="translated">オールキャップでOPのB判定クラス。</target>
        </trans-unit>
        <trans-unit id="fad9fed447a0e7963d894765232a4acc4b663de9" translate="yes" xml:space="preserve">
          <source>The B::Xref module is used to generate a cross reference listing of all definitions and uses of variables, subroutines and formats in a Perl program. It is implemented as a backend for the Perl compiler.</source>
          <target state="translated">B::Xrefモジュールは、Perlプログラム内の変数、サブルーチン、フォーマットのすべての定義と用途のクロスリファレンスリストを生成するために使用されます。これはPerlコンパイラのバックエンドとして実装されています。</target>
        </trans-unit>
        <trans-unit id="8026a52e63f99adbefc0e084618e1f479fd95572" translate="yes" xml:space="preserve">
          <source>The BITS mode (&quot;0&quot;) interprets the contents of</source>
          <target state="translated">BITSモード(&quot;0&quot;)は</target>
        </trans-unit>
        <trans-unit id="ba88dd1d9005852348725927325ddcf383a69f7c" translate="yes" xml:space="preserve">
          <source>The BLOCK construct can be used to emulate case structures.</source>
          <target state="translated">BLOCK構文は、ケース構造をエミュレートするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6dfef44d3b22aafe27912b6966e2a486d9c0c14d" translate="yes" xml:space="preserve">
          <source>The BOOT: Keyword</source>
          <target state="translated">BOOT(ブーツ)とは キーワード</target>
        </trans-unit>
        <trans-unit id="d4a87a13d39a77a50a617134650c09dd8bdc8e3b" translate="yes" xml:space="preserve">
          <source>The BOOT: keyword is used to add code to the extension's bootstrap function. The bootstrap function is generated by the &lt;b&gt;xsubpp&lt;/b&gt; compiler and normally holds the statements necessary to register any XSUBs with Perl. With the BOOT: keyword the programmer can tell the compiler to add extra statements to the bootstrap function.</source>
          <target state="translated">BOOT：キーワードは、拡張機能のブートストラップ関数にコードを追加するために使用されます。ブートストラップ関数は&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーによって生成され、通常、PerlにXSUBを登録するために必要なステートメントを保持します。BOOT：キーワードを使用すると、プログラマはコンパイラにブートストラップ関数にステートメントを追加するように指示できます。</target>
        </trans-unit>
        <trans-unit id="ad4a573da9545ff1a8eab5e0d4f5f08622036178" translate="yes" xml:space="preserve">
          <source>The BTREE file type optionally allows a single key to be associated with an arbitrary number of values. This option is enabled by setting the flags element of &lt;code&gt;$DB_BTREE&lt;/code&gt; to R_DUP when creating the database.</source>
          <target state="translated">BTREEファイルタイプでは、オプションで単一のキーを任意の数の値に関連付けることができます。このオプションを有効にするには、データベースの作成時に &lt;code&gt;$DB_BTREE&lt;/code&gt; フラグ要素をR_DUPに設定します。</target>
        </trans-unit>
        <trans-unit id="4a8451f6eedb6a6056c8ac828a203a8cf8bdc79c" translate="yes" xml:space="preserve">
          <source>The BTREE interface has a feature which allows partial keys to be matched. This functionality is</source>
          <target state="translated">BTREE インターフェースには、部分的なキーのマッチングを可能にする機能があります。この機能は</target>
        </trans-unit>
        <trans-unit id="19350bba9c33f125fd021dceab5ff7633dce372c" translate="yes" xml:space="preserve">
          <source>The BUILD and INSTALL steps are identical to those for Unix. Some modules generate Makefiles that work better with GNU make, which is available from &lt;a href=&quot;http://www.mks.com/s390/gnu/&quot;&gt;http://www.mks.com/s390/gnu/&lt;/a&gt;</source>
          <target state="translated">BUILDおよびINSTALLの手順は、Unixの手順と同じです。一部のモジュールは&lt;a href=&quot;http://www.mks.com/s390/gnu/&quot;&gt;http://www.mks.com/s390/gnu/&lt;/a&gt;から入手できるGNU makeでより適切に機能するMakefileを生成します</target>
        </trans-unit>
        <trans-unit id="06987733f8223bbe1dde5201da803a816622002c" translate="yes" xml:space="preserve">
          <source>The Basic Principle</source>
          <target state="translated">基本原理</target>
        </trans-unit>
        <trans-unit id="a093f7952b1838c4dd6aeda28ea5e1fc38030960" translate="yes" xml:space="preserve">
          <source>The Basics</source>
          <target state="translated">基本的なこと</target>
        </trans-unit>
        <trans-unit id="afdc8705dda034aabf31fc65386bddfb61c3e95b" translate="yes" xml:space="preserve">
          <source>The Benchmark module encapsulates a number of routines to help you figure out how long it takes to execute some code.</source>
          <target state="translated">Benchmarkモジュールは、いくつかのコードを実行するのにどれくらいの時間がかかるかを把握するのに役立つように、多くのルーチンをカプセル化しています。</target>
        </trans-unit>
        <trans-unit id="869885b765935f032e1e45165248683c4d860661" translate="yes" xml:space="preserve">
          <source>The Berkeley DB 4.1.25 has been tested with Tru64 V5.1A and found to work. The latest Berkeley DB can be found from &lt;a href=&quot;http://www.sleepycat.com&quot;&gt;http://www.sleepycat.com&lt;/a&gt;.</source>
          <target state="translated">Berkeley DB 4.1.25はTru64 V5.1Aでテストされ、動作することが確認されています。最新のBerkeley DBは&lt;a href=&quot;http://www.sleepycat.com&quot;&gt;http://www.sleepycat.com&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="1425da38b0881b20e7239aedd72aa0c3d5db10c1" translate="yes" xml:space="preserve">
          <source>The Bessel function of the first kind of the order zero.</source>
          <target state="translated">次数0の第1種のベッセル関数。</target>
        </trans-unit>
        <trans-unit id="2488bfae0d46b9e4a8c30cc5e6937e82c99c48ea" translate="yes" xml:space="preserve">
          <source>The Bignum mailing list</source>
          <target state="translated">ビグナムメーリングリスト</target>
        </trans-unit>
        <trans-unit id="95802efdaca31b27a14913bfe1089183b4ec8875" translate="yes" xml:space="preserve">
          <source>The C API for the backtrace is as follows:</source>
          <target state="translated">バックトレースのC APIは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="89f382052ffa523340ba739809ce6ebbf65c53dd" translate="yes" xml:space="preserve">
          <source>The C array of a padlist, containing the pads. Only subscript it with numbers &amp;gt;= 1, as the 0th entry is not guaranteed to remain usable.</source>
          <target state="translated">パッドを含むパッドリストのC配列。0番目のエントリが使用可能であることが保証されていないため、1以上の番号を添え字にしてください。</target>
        </trans-unit>
        <trans-unit id="9d9a695f29b97a18f6840062c9b13365fc424c17" translate="yes" xml:space="preserve">
          <source>The C array of pad entries.</source>
          <target state="translated">パッドエントリの C 配列です。</target>
        </trans-unit>
        <trans-unit id="82cdebaae9f3b94b2c40ce92be9ab7f40abcb4e4" translate="yes" xml:space="preserve">
          <source>The C array of pad names.</source>
          <target state="translated">パッド名のC配列。</target>
        </trans-unit>
        <trans-unit id="66ccfe4f23602b2282c83a4407f8d3eb55b4ce47" translate="yes" xml:space="preserve">
          <source>The C code asks for:</source>
          <target state="translated">Cコードが求めています。</target>
        </trans-unit>
        <trans-unit id="1755acfd3f32daf3e3ba7fab9fbb3582e6e7bc1c" translate="yes" xml:space="preserve">
          <source>The C function required to call</source>
          <target state="translated">を呼び出すのに必要なC関数</target>
        </trans-unit>
        <trans-unit id="593e19336c2ea1e5b6f3c47a320c97c9b260fd7c" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, wrapped if necessary, to ensure that it will return the length of the string written to the buffer. Only rare pre-ANSI systems need the wrapper function - usually this is a direct call to &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">必要に応じてラップされたCライブラリ &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、バッファに書き込まれた文字列の長さを確実に返すようにします。まれなANSI以前のシステムでのみラッパー関数が必要です。通常、これは &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; への直接の呼び出しです。</target>
        </trans-unit>
        <trans-unit id="9f593f0f7e2f42e16decd49842d3eba832ba134e" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;snprintf&lt;/code&gt; functionality, if available and standards-compliant (uses &lt;code&gt;vsnprintf&lt;/code&gt; , actually). However, if the &lt;code&gt;vsnprintf&lt;/code&gt; is not available, will unfortunately use the unsafe &lt;code&gt;vsprintf&lt;/code&gt; which can overrun the buffer (there is an overrun check, but that may be too late). Consider using &lt;code&gt;sv_vcatpvf&lt;/code&gt; instead, or getting &lt;code&gt;vsnprintf&lt;/code&gt; .</source>
          <target state="translated">Cライブラリの &lt;code&gt;snprintf&lt;/code&gt; 機能（利用可能で標準に準拠している場合）（実際には &lt;code&gt;vsnprintf&lt;/code&gt; を使用）。ただし、 &lt;code&gt;vsnprintf&lt;/code&gt; が使用できない場合、残念ながら、バッファーをオーバーランする可能 &lt;code&gt;vsprintf&lt;/code&gt; ある安全でないvsprintfを使用します（オーバーランチェックがありますが、それでは遅すぎる可能性があります）。代わりに &lt;code&gt;sv_vcatpvf&lt;/code&gt; を使用するか、 &lt;code&gt;vsnprintf&lt;/code&gt; を取得することを検討してください。</target>
        </trans-unit>
        <trans-unit id="a0e1b6d35f4716db28bfc47e17c382e52671433d" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;snprintf&lt;/code&gt; functionality, if available and standards-compliant (uses &lt;code&gt;vsnprintf&lt;/code&gt;, actually). However, if the &lt;code&gt;vsnprintf&lt;/code&gt; is not available, will unfortunately use the unsafe &lt;code&gt;vsprintf&lt;/code&gt; which can overrun the buffer (there is an overrun check, but that may be too late). Consider using &lt;code&gt;sv_vcatpvf&lt;/code&gt; instead, or getting &lt;code&gt;vsnprintf&lt;/code&gt;.</source>
          <target state="translated">Cライブラリの &lt;code&gt;snprintf&lt;/code&gt; 機能（利用可能で標準に準拠している場合）（実際には &lt;code&gt;vsnprintf&lt;/code&gt; を使用）。ただし、 &lt;code&gt;vsnprintf&lt;/code&gt; が使用できない場合は、残念ながら、バッファをオーバーランする可能 &lt;code&gt;vsprintf&lt;/code&gt; ある安全でないvsprintfを使用します（オーバーランチェックがありますが、手遅れになる可能性があります）。代わりに &lt;code&gt;sv_vcatpvf&lt;/code&gt; を使用するか、 &lt;code&gt;vsnprintf&lt;/code&gt; を取得することを検討してください。</target>
        </trans-unit>
        <trans-unit id="661ddafc70911db04cf396a10417bb22f9c9013f" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;strlcat&lt;/code&gt; if available, or a Perl implementation of it. This operates on C &lt;code&gt;NUL&lt;/code&gt; -terminated strings.</source>
          <target state="translated">Cライブラリ &lt;code&gt;strlcat&lt;/code&gt; (利用可能な場合）、またはそのPerl実装。これは、C &lt;code&gt;NUL&lt;/code&gt; で終了する文字列で動作します。</target>
        </trans-unit>
        <trans-unit id="15d5b3af47acfb54f6e568de8eff6bc75bdb63f0" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;strlcat&lt;/code&gt; if available, or a Perl implementation of it. This operates on C &lt;code&gt;NUL&lt;/code&gt;-terminated strings.</source>
          <target state="translated">利用可能な場合はCライブラリ &lt;code&gt;strlcat&lt;/code&gt; 、またはそのPerl実装。これは、 &lt;code&gt;NUL&lt;/code&gt; 終了する文字列で機能します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
