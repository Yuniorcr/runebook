<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="8a90f73c9c3213efb315136981dc33afcfd35395" translate="yes" xml:space="preserve">
          <source>For example, to set the top-of-form format for more than one output channel, you might do the following:</source>
          <target state="translated">例えば、複数の出力チャンネルにトップオブフォーム形式を設定するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="34785567060beba9064c79bba5e329b38586b3f4" translate="yes" xml:space="preserve">
          <source>For example, to specify that &lt;code&gt;Data::Dumper&lt;/code&gt; is &lt;code&gt;required&lt;/code&gt; during the &lt;code&gt;test&lt;/code&gt; phase, this entry would appear in the distribution metadata:</source>
          <target state="translated">たとえば、 &lt;code&gt;test&lt;/code&gt; フェーズで &lt;code&gt;Data::Dumper&lt;/code&gt; が &lt;code&gt;required&lt;/code&gt; であることを指定するには、次のエントリが配布メタデータに表示されます。</target>
        </trans-unit>
        <trans-unit id="66259dd1f85a2d02b33a9e596d8f1d7b0ac5e796" translate="yes" xml:space="preserve">
          <source>For example, to start a traditional, non-OO module called Some::Module, create a file called</source>
          <target state="translated">例えば、Some::ModuleというOOではない従来のモジュールを起動するには、以下のようなファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="f942067356d5cfcd3d6efe175d21ba418d7f8528" translate="yes" xml:space="preserve">
          <source>For example, to trap an interrupt signal, set up a handler like this:</source>
          <target state="translated">例えば、割り込み信号をトラップするには、次のようなハンドラを設定します。</target>
        </trans-unit>
        <trans-unit id="609c77df9a9f27a81f6780eb9739b385f2194bff" translate="yes" xml:space="preserve">
          <source>For example, to watch how perl executes your program, use &lt;b&gt;-Dtls&lt;/b&gt;. Another nice value is &lt;b&gt;-Dx&lt;/b&gt;, which lists your compiled syntax tree, and &lt;b&gt;-Dr&lt;/b&gt; displays compiled regular expressions; the format of the output is explained in &lt;a href=&quot;perldebguts&quot;&gt;perldebguts&lt;/a&gt;.</source>
          <target state="translated">たとえば、perlがプログラムをどのように実行するかを監視するには、&lt;b&gt;-Dtlsを&lt;/b&gt;使用し&lt;b&gt;ます&lt;/b&gt;。もう1つの優れた値は、コンパイルされた構文ツリーを一覧表示する&lt;b&gt;-Dx&lt;/b&gt;であり、&lt;b&gt;-Dr&lt;/b&gt;はコンパイルされた正規表現を表示します。出力の形式は&lt;a href=&quot;perldebguts&quot;&gt;perldebguts&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="92fd80c8ef445eeb8d54adb5b6fe2e04ca178559" translate="yes" xml:space="preserve">
          <source>For example, use either</source>
          <target state="translated">例えば、以下のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="d635e44965151905b6a24229063bbd77703e71e7" translate="yes" xml:space="preserve">
          <source>For example, utf8 can be used for code points that don't exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;&quot;Handling Malformed Data&quot; in Encode&lt;/a&gt; for more ways of dealing with this.)</source>
          <target state="translated">たとえば、UTF8は、Unicodeで存在9999999のような、しかし、あなたがUTF-8に、あなたは（置換文字を取得し、デフォルトでいることをエンコードした場合はありませんコードポイントのために使用することができる;&lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;エンコードに「不正なデータの処理」を&lt;/a&gt;多くのためこれに対処する方法。）</target>
        </trans-unit>
        <trans-unit id="e046e6073a1c24e29ced7bc19e8dd56e44b12d30" translate="yes" xml:space="preserve">
          <source>For example, utf8 can be used for code points that don't exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;Handling Malformed Data in Encode&lt;/a&gt; for more ways of dealing with this.)</source>
          <target state="translated">たとえば、utf8は、9999999などのUnicodeに存在しないコードポイントに使用できますが、それをUTF-8にエンコードすると、置換文字が得られます（デフォルト&lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;で、エンコード&lt;/a&gt;での不正な形式のデータの処理を参照してください。これに対処します。）</target>
        </trans-unit>
        <trans-unit id="d4bde612bc298204724714a89e628fae1a0918cc" translate="yes" xml:space="preserve">
          <source>For example, version 1.04 of Foo::Bar becomes Foo-Bar-1.04.</source>
          <target state="translated">例えば、Foo::Barのバージョン1.04はFoo-Bar-1.04になります。</target>
        </trans-unit>
        <trans-unit id="266d34ca9cde516548f250156e2acb53b624a8d2" translate="yes" xml:space="preserve">
          <source>For example, we could create an &lt;code&gt;File::MP3&lt;/code&gt; class which &lt;b&gt;inherits&lt;/b&gt; from &lt;code&gt;File&lt;/code&gt; . An &lt;code&gt;File::MP3&lt;/code&gt;&lt;b&gt;is-a&lt;/b&gt;</source>
          <target state="translated">例えば、我々は、作成することができ &lt;code&gt;File::MP3&lt;/code&gt; クラス&lt;b&gt;継承&lt;/b&gt;から &lt;code&gt;File&lt;/code&gt; 。 &lt;code&gt;File::MP3&lt;/code&gt; &lt;b&gt;ある-A&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="697c94de6dad335c9a3c7c0fc24c6b78d35ab0a6" translate="yes" xml:space="preserve">
          <source>For example, we could create an &lt;code&gt;File::MP3&lt;/code&gt; class which &lt;b&gt;inherits&lt;/b&gt; from &lt;code&gt;File&lt;/code&gt;. An &lt;code&gt;File::MP3&lt;/code&gt;&lt;b&gt;is-a&lt;/b&gt;</source>
          <target state="translated">例えば、我々は、作成することができ &lt;code&gt;File::MP3&lt;/code&gt; クラス&lt;b&gt;継承&lt;/b&gt;から &lt;code&gt;File&lt;/code&gt; 。 &lt;code&gt;File::MP3&lt;/code&gt; &lt;b&gt;ある-A&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="65f8c076e86f7baf2e3727bbe95178fdd7a2c0fd" translate="yes" xml:space="preserve">
          <source>For example, when examining the file</source>
          <target state="translated">例えば、ファイルを調べるときに</target>
        </trans-unit>
        <trans-unit id="cb3609c45bff9184744275676cb2ee1d5fe3a104" translate="yes" xml:space="preserve">
          <source>For example, when looking for</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="adf9a9b9f8a7a1cec63a21f932af18f70eee8f7f" translate="yes" xml:space="preserve">
          <source>For example, when processing a file like</source>
          <target state="translated">例えば、以下のようなファイルを処理する場合</target>
        </trans-unit>
        <trans-unit id="cba8aca8bb23f147ba6dc9dc1178ec821ae0173e" translate="yes" xml:space="preserve">
          <source>For example, when you have a NFD/NFKD string, you can get its NFC/NFKC string, by saying</source>
          <target state="translated">例えば、NFD/NFKD 文字列がある場合、次のように言うことで、その NFC/NFKC 文字列を取得することができます。</target>
        </trans-unit>
        <trans-unit id="91c7f19bed899b4adde0ad47a00ae7fce66a506f" translate="yes" xml:space="preserve">
          <source>For example, when you have a list of NFD/NFKD strings, you can get the concatenated NFD/NFKD string from them, by saying</source>
          <target state="translated">例えば、NFD/NFKD 文字列のリストがある場合、次のように言うと、それらの文字列を連結した NFD/NFKD 文字列を取得することができます。</target>
        </trans-unit>
        <trans-unit id="3034cdf7d48aa118a30ad1afd4515c72ccfcc722" translate="yes" xml:space="preserve">
          <source>For example, whenever you call Perl's built-in &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; function from the package &lt;code&gt;DB&lt;/code&gt; , the arguments that the corresponding stack frame was called with are copied to the &lt;code&gt;@DB::args&lt;/code&gt; array. These mechanisms are enabled by calling Perl with the &lt;b&gt;-d&lt;/b&gt; switch. Specifically, the following additional features are enabled (cf. &lt;a href=&quot;perlvar#%24%5eP&quot;&gt;$^P in perlvar&lt;/a&gt;):</source>
          <target state="translated">たとえば、パッケージ &lt;code&gt;DB&lt;/code&gt; からPerlの組み込み &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; 関数を呼び出すと、対応するスタックフレームが呼び出された引数が &lt;code&gt;@DB::args&lt;/code&gt; 配列にコピーされます。これらのメカニズムは、&lt;b&gt;-d&lt;/b&gt;スイッチを指定してPerlを呼び出すことで有効になります。具体的には、以下の追加機能が有効になります（&lt;a href=&quot;perlvar#%24%5eP&quot;&gt;perlvarの$ ^ Pを参照&lt;/a&gt;）。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="623437115e4aa7c68c30efdbb9b22f8f31d44a16" translate="yes" xml:space="preserve">
          <source>For example, whenever you call Perl's built-in &lt;code&gt;caller&lt;/code&gt; function from the package &lt;code&gt;DB&lt;/code&gt;, the arguments that the corresponding stack frame was called with are copied to the &lt;code&gt;@DB::args&lt;/code&gt; array. These mechanisms are enabled by calling Perl with the &lt;b&gt;-d&lt;/b&gt; switch. Specifically, the following additional features are enabled (cf. &lt;a href=&quot;perlvar#%24%5EP&quot;&gt;&quot;$^P&quot; in perlvar&lt;/a&gt;):</source>
          <target state="translated">たとえば、パッケージ &lt;code&gt;DB&lt;/code&gt; からPerlの組み込み &lt;code&gt;caller&lt;/code&gt; 関数を呼び出すと、対応するスタックフレームが呼び出された引数が &lt;code&gt;@DB::args&lt;/code&gt; 配列にコピーされます。これらのメカニズムは、&lt;b&gt;-d&lt;/b&gt;スイッチを指定してPerlを呼び出すことで有効になります。具体的には、次の追加機能が有効になっています（&lt;a href=&quot;perlvar#%24%5EP&quot;&gt;perlvarの「$ ^ P」を参照&lt;/a&gt;）。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="496a45f3d9650508d730c766abbe2dc2efdff27d" translate="yes" xml:space="preserve">
          <source>For example, with AnyEvent:</source>
          <target state="translated">例えば、AnyEventでは</target>
        </trans-unit>
        <trans-unit id="653b5e44cfe751cd25897569156a2f935df052fc" translate="yes" xml:space="preserve">
          <source>For example, you can say</source>
          <target state="translated">例えば、次のようなことが言えます。</target>
        </trans-unit>
        <trans-unit id="50ca852a66a066546e548044450d4b46b8bedbcc" translate="yes" xml:space="preserve">
          <source>For example, you can use this to make sure your filter program managed to finish its output without filling up the disk:</source>
          <target state="translated">例えば、これを使ってフィルタプログラムがディスクをいっぱいにすることなく出力を終えることができたかどうかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="2f78ed184c7f600686b51e6745d5640d97f8a709" translate="yes" xml:space="preserve">
          <source>For example, you can write code in EUC-JP as follows:</source>
          <target state="translated">例えば、EUC-JPでは以下のようにコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="564fb0ce50134466df15da997cc5a96ad7e5b1e1" translate="yes" xml:space="preserve">
          <source>For example, you don't have to store individual bits in an array (which would mean that you're wasting a lot of space). To convert an array of bits to a string, use &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; to set the right bits. This sets &lt;code&gt;$vec&lt;/code&gt; to have bit N set only if &lt;code&gt;$ints[N]&lt;/code&gt; was set:</source>
          <target state="translated">たとえば、個々のビットを配列に格納する必要はありません（これは、多くのスペースを無駄にしていることを意味します）。ビットの配列を文字列に変換するには、 &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; を使用して正しいビットを設定します。これは、 &lt;code&gt;$ints[N]&lt;/code&gt; が設定されている場合にのみ、ビットNが設定されるように &lt;code&gt;$vec&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="1d0408195abc493ede0c8180cf0b6c8cb82dfb84" translate="yes" xml:space="preserve">
          <source>For example, you don't have to store individual bits in an array (which would mean that you're wasting a lot of space). To convert an array of bits to a string, use &lt;code&gt;vec()&lt;/code&gt; to set the right bits. This sets &lt;code&gt;$vec&lt;/code&gt; to have bit N set only if &lt;code&gt;$ints[N]&lt;/code&gt; was set:</source>
          <target state="translated">たとえば、個々のビットを配列に格納する必要はありません（つまり、多くのスペースを浪費していることになります）。ビットの配列を文字列に変換するには、 &lt;code&gt;vec()&lt;/code&gt; を使用して適切なビットを設定します。これにより、 &lt;code&gt;$ints[N]&lt;/code&gt; が設定されている場合にのみ、ビットNが設定されるように &lt;code&gt;$vec&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="813a7c651fd4ec83cb1750d36dc11353bd2e7e9e" translate="yes" xml:space="preserve">
          <source>For example, you'll usually use &lt;code&gt;SOCK_STREAM&lt;/code&gt; with a &lt;code&gt;tcp&lt;/code&gt; connection and &lt;code&gt;SOCK_DGRAM&lt;/code&gt; with a &lt;code&gt;udp&lt;/code&gt; connection.</source>
          <target state="translated">たとえば、通常は &lt;code&gt;tcp&lt;/code&gt; 接続で &lt;code&gt;SOCK_STREAM&lt;/code&gt; を使用し、 &lt;code&gt;udp&lt;/code&gt; 接続で &lt;code&gt;SOCK_DGRAM&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e4a9a1afba08c0e0323d4da1c781504ee13c4f37" translate="yes" xml:space="preserve">
          <source>For example...</source>
          <target state="translated">例えば...</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="6547b0cdb06529c1189b765285dbdd443f754cdc" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;^(?&amp;gt;a*)ab&lt;/code&gt; will never match, since &lt;code&gt;(?&amp;gt;a*)&lt;/code&gt; (anchored at the beginning of string, as above) will match</source>
          <target state="translated">例： &lt;code&gt;(?&amp;gt;a*)&lt;/code&gt; （上記のように文字列の先頭にアンカーされます）が一致するため、 &lt;code&gt;^(?&amp;gt;a*)ab&lt;/code&gt; は一致しません</target>
        </trans-unit>
        <trans-unit id="163b6b4e5b46ae5e8f49caca2490012167a4aad8" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;perldoc -f &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">例： &lt;code&gt;perldoc -f &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b6e3774455172beea48c497d0e06febe4bd5b99" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;perldoc -f sort&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;perldoc -f sort&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccb8c8d525664be9a2c42a89c1ccb7db9f4d46fb" translate="yes" xml:space="preserve">
          <source>For example: consider the following paragraphs:</source>
          <target state="translated">例:次の段落を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="1312a2f41c8de401877c05e89632223e0e5cb8c4" translate="yes" xml:space="preserve">
          <source>For examples of MRO implementations, see &lt;code&gt;S_mro_get_linear_isa_c3()&lt;/code&gt; and the &lt;code&gt;BOOT:&lt;/code&gt; section of</source>
          <target state="translated">MRO実装の例については、 &lt;code&gt;S_mro_get_linear_isa_c3()&lt;/code&gt; および &lt;code&gt;BOOT:&lt;/code&gt; のセクションを参照してください</target>
        </trans-unit>
        <trans-unit id="0d9e192f1a62478459e4e0a2eb7cdee0674f974c" translate="yes" xml:space="preserve">
          <source>For examples on how to use &lt;code&gt;ExtUtils::Embed&lt;/code&gt; for building C/C++ applications with embedded perl, see &lt;a href=&quot;../perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="translated">組み込みPerlでC / C ++アプリケーションを構築するための &lt;code&gt;ExtUtils::Embed&lt;/code&gt; 使用例については、&lt;a href=&quot;../perlembed&quot;&gt;perlembedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="349b22e61a7e4cc221bcc78746d9013fcaa415a0" translate="yes" xml:space="preserve">
          <source>For examples on how to use &lt;code&gt;ExtUtils::Embed&lt;/code&gt; for building C/C++ applications with embedded perl, see &lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="translated">Perlが埋め込まれたC / C ++アプリケーションを構築するための &lt;code&gt;ExtUtils::Embed&lt;/code&gt; 使用方法の例については、&lt;a href=&quot;perlembed&quot;&gt;perlembedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="378dadb78c987366679861c816c6c5a9b14a9ad8" translate="yes" xml:space="preserve">
          <source>For failure, &lt;code&gt;0&lt;/code&gt; is returned and &lt;code&gt;fileLastError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt; are set to the reason for the failure.</source>
          <target state="translated">失敗の場合、 &lt;code&gt;0&lt;/code&gt; が返され、 &lt;code&gt;fileLastError()&lt;/code&gt; と &lt;code&gt;$^E&lt;/code&gt; が失敗の理由に設定されます。</target>
        </trans-unit>
        <trans-unit id="8df1fb453c312718721149b4f60d025d43cdae6c" translate="yes" xml:space="preserve">
          <source>For floating-point conversions (&lt;code&gt;e f g E F G&lt;/code&gt; ), numbers are usually assumed to be the default floating-point size on your platform (double or long double), but you can force &quot;long double&quot; with &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; if your platform supports them. You can find out whether your Perl supports long doubles via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">浮動小数点変換（ &lt;code&gt;e f g E F G&lt;/code&gt; ）の場合、通常、数値はプラットフォームのデフォルトの浮動小数点サイズ（doubleまたはlong double）であると想定されますが、プラットフォームの場合は &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; で「long double」を強制できます。それらをサポートしています。Perlが&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を介してlong doubleをサポートしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="fe9c280207fb4b3b605495f5af12f4167164cdba" translate="yes" xml:space="preserve">
          <source>For floating-point conversions (&lt;code&gt;e f g E F G&lt;/code&gt; ), numbers are usually assumed to be the default floating-point size on your platform (double or long double), but you can force &quot;long double&quot; with &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; if your platform supports them. You can find out whether your Perl supports long doubles via &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">浮動小数点変換（ &lt;code&gt;e f g E F G&lt;/code&gt; ）の場合、通常、数値はプラットフォームのデフォルトの浮動小数点サイズ（doubleまたはlong double）であると想定されますが、プラットフォームの場合は &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; で「long double」を強制できます。それらをサポートしています。Perlが&lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;を介してlong doubleをサポートしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="57700d09e10e47eac6752c49c7e4515e38039c3f" translate="yes" xml:space="preserve">
          <source>For floating-point conversions (&lt;code&gt;e f g E F G&lt;/code&gt;), numbers are usually assumed to be the default floating-point size on your platform (double or long double), but you can force &quot;long double&quot; with &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, or &lt;code&gt;ll&lt;/code&gt; if your platform supports them. You can find out whether your Perl supports long doubles via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">浮動小数点変換（ &lt;code&gt;e f g E F G&lt;/code&gt; ）の場合、数値は通常、プラットフォームのデフォルトの浮動小数点サイズ（doubleまたはlong double）と見なされますが、プラットフォームの場合は、 &lt;code&gt;q&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; を使用して「longdouble」を強制できます。それらをサポートします。あなたのPerlが&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を介してlongdoubleをサポートしているかどうかを知ることができます：</target>
        </trans-unit>
        <trans-unit id="f97a8713dc6247cd63e1e9b5c0cf0c7f46e17030" translate="yes" xml:space="preserve">
          <source>For full generality, use the &lt;a href=&quot;perlapi#DO_UTF8&quot;&gt;&lt;code&gt;DO_UTF8&lt;/code&gt;&lt;/a&gt; macro to see if the string in an SV is to be</source>
          <target state="translated">完全に一般化するには、&lt;a href=&quot;perlapi#DO_UTF8&quot;&gt; &lt;code&gt;DO_UTF8&lt;/code&gt; &lt;/a&gt;マクロを使用して、SV内の文字列が次のようになるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="a2a4ecd0b9d06146725ffb188a087bc4525a300e" translate="yes" xml:space="preserve">
          <source>For full generality, use the &lt;a href=&quot;perlapi#DO_UTF8&quot;&gt;DO_UTF8 in perlapi&lt;/a&gt; macro to see if the string in an SV is to be</source>
          <target state="translated">一般性について&lt;a href=&quot;perlapi#DO_UTF8&quot;&gt;は、perlapi&lt;/a&gt;マクロでDO_UTF8を使用して、SVの文字列が</target>
        </trans-unit>
        <trans-unit id="a42ce7d9b2566dc0c41503ddc1469a4bc77d0e4c" translate="yes" xml:space="preserve">
          <source>For function arguments declared as &lt;code&gt;const&lt;/code&gt; , omit the const attribute in the generated XS code.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; として宣言された関数引数の場合、生成されたXSコードでconst属性を省略します。</target>
        </trans-unit>
        <trans-unit id="f000cefb45f68574b68f74871acce392cb38614b" translate="yes" xml:space="preserve">
          <source>For function arguments declared as &lt;code&gt;const&lt;/code&gt;, omit the const attribute in the generated XS code.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; として宣言された関数引数の場合、生成されたXSコードでconst属性を省略します。</target>
        </trans-unit>
        <trans-unit id="919681d57047d475516f4557861f4178d615833e" translate="yes" xml:space="preserve">
          <source>For functions that can be used in either a scalar or list context, nonabortive failure is generally indicated in scalar context by returning the undefined value, and in list context by returning the empty list.</source>
          <target state="translated">スカラまたはリストコンテキストのいずれかで使用できる関数の場合、スカラコンテキストでは未定義の値を返し、リストコンテキストでは空のリストを返すことで、一般的に不妊の失敗が示されます。</target>
        </trans-unit>
        <trans-unit id="a8194e9e00b7e6776d9b2ab496effbd877072994" translate="yes" xml:space="preserve">
          <source>For further details on attribute lists and their manipulation, see &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">属性リストとその操作の詳細については、&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;と&lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute :: Handlersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d05f6d928eacb78e02e398b53b981e094d0e39ce" translate="yes" xml:space="preserve">
          <source>For further details on attribute lists and their manipulation, see &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">属性リストとその操作の詳細については、&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;および&lt;a href=&quot;attribute/handlers&quot;&gt;Attribute :: Handlersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="50dbbde71e3c0e2cc7647eee17d89f78c487f1da" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;../perltie&quot;&gt;perltie&lt;/a&gt;, &lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../perltie&quot;&gt;perltie&lt;/a&gt;、&lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="33bb704b9ac00a4031f5331184a871c97b34fa8e" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;, &lt;a href=&quot;#tied-VARIABLE&quot;&gt;&lt;code&gt;tied&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;、&lt;a href=&quot;#tied-VARIABLE&quot;&gt; &lt;code&gt;tied&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fc5472ebf03889c66f3f1d848108e2b6c25b85d0" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;, &lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;、&lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="48c784a1d33771e0a06fd5b4b963ce0c5344b49a" translate="yes" xml:space="preserve">
          <source>For further information about the categories, consult</source>
          <target state="translated">カテゴリの詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a5a3ac10f1bd1eab74de1980b9acc96fbed7e3c8" translate="yes" xml:space="preserve">
          <source>For further information about the categories, consult &lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale(3)&lt;/a&gt;.</source>
          <target state="translated">カテゴリの詳細については、&lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale（3）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3848a5517719cc9d86dc98e4a87784d1b62f6be" translate="yes" xml:space="preserve">
          <source>For further information on how to conduct a proper installation consult the INSTALL file that comes with the perl source and the README file for your platform.</source>
          <target state="translated">適切なインストール方法の詳細については、perlのソースに付属のINSTALLファイルと、お使いのプラットフォームのREADMEファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="286f6d03eb38f41af10af9ceaae5f308348e5947" translate="yes" xml:space="preserve">
          <source>For further information, please see &lt;a href=&quot;File::Spec::Unix&quot;&gt;File::Spec::Unix&lt;/a&gt;, &lt;a href=&quot;File::Spec::Mac&quot;&gt;File::Spec::Mac&lt;/a&gt;, &lt;a href=&quot;File::Spec::OS2&quot;&gt;File::Spec::OS2&lt;/a&gt;, &lt;a href=&quot;File::Spec::Win32&quot;&gt;File::Spec::Win32&lt;/a&gt;, or &lt;a href=&quot;File::Spec::VMS&quot;&gt;File::Spec::VMS&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;File::Spec::Unix&quot;&gt;File :: Spec :: Unix&lt;/a&gt;、&lt;a href=&quot;File::Spec::Mac&quot;&gt;File :: Spec :: Mac&lt;/a&gt;、&lt;a href=&quot;File::Spec::OS2&quot;&gt;File :: Spec :: OS2&lt;/a&gt;、&lt;a href=&quot;File::Spec::Win32&quot;&gt;File :: Spec :: Win32&lt;/a&gt;、または&lt;a href=&quot;File::Spec::VMS&quot;&gt;File :: Spec :: VMSを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="28c80b9972cc66010ab54cedb561b534cc47e943" translate="yes" xml:space="preserve">
          <source>For further information, please see &lt;a href=&quot;spec/unix&quot;&gt;File::Spec::Unix&lt;/a&gt;, &lt;a href=&quot;spec/mac&quot;&gt;File::Spec::Mac&lt;/a&gt;, &lt;a href=&quot;spec/os2&quot;&gt;File::Spec::OS2&lt;/a&gt;, &lt;a href=&quot;spec/win32&quot;&gt;File::Spec::Win32&lt;/a&gt;, or &lt;a href=&quot;spec/vms&quot;&gt;File::Spec::VMS&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;spec/unix&quot;&gt;File :: Spec :: Unix&lt;/a&gt;、&lt;a href=&quot;spec/mac&quot;&gt;File :: Spec :: Mac&lt;/a&gt;、&lt;a href=&quot;spec/os2&quot;&gt;File :: Spec :: OS2&lt;/a&gt;、&lt;a href=&quot;spec/win32&quot;&gt;File :: Spec :: Win32&lt;/a&gt;、または&lt;a href=&quot;spec/vms&quot;&gt;File :: Spec :: VMSを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5edf28281d94a2b5960cec422d6d02a62443a7d6" translate="yes" xml:space="preserve">
          <source>For general suggestions, try requesting &lt;code&gt;CPU&lt;/code&gt; or &lt;code&gt;memory&lt;/code&gt; .</source>
          <target state="translated">一般的な提案については、 &lt;code&gt;CPU&lt;/code&gt; または &lt;code&gt;memory&lt;/code&gt; をリクエストしてみてください。</target>
        </trans-unit>
        <trans-unit id="c361489f1d8a4b518a9bf46f9337a5ef8568cfce" translate="yes" xml:space="preserve">
          <source>For general suggestions, try requesting &lt;code&gt;CPU&lt;/code&gt; or &lt;code&gt;memory&lt;/code&gt;.</source>
          <target state="translated">一般的な提案については、 &lt;code&gt;CPU&lt;/code&gt; または &lt;code&gt;memory&lt;/code&gt; を要求してみてください。</target>
        </trans-unit>
        <trans-unit id="d357e5de00d555e2358554ff76cd929d52fe2111" translate="yes" xml:space="preserve">
          <source>For globbing (see &lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;, &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt;) (obsolete? Perl uses builtin globbing nowadays...).</source>
          <target state="translated">&lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;グロビング&lt;/a&gt;について（&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;、perlopのI / O演算子を参照）（廃止？Perlは現在、組み込みのグロビングを使用しています...）。</target>
        </trans-unit>
        <trans-unit id="0926bc644c67686e752b5638b1b35a45cc03ef2a" translate="yes" xml:space="preserve">
          <source>For globbing (see &lt;a href=&quot;perlfunc#glob&quot;&gt;&quot;glob&quot; in perlfunc&lt;/a&gt;, &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&quot;I/O Operators&quot; in perlop&lt;/a&gt;) (obsolete? Perl uses builtin globbing nowadays...).</source>
          <target state="translated">（参照グロブについては&lt;a href=&quot;perlfunc#glob&quot;&gt;perlfuncの中で&quot;グロブを&quot;&lt;/a&gt;、&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;はperlopに&quot;I / O演算子&quot;&lt;/a&gt;（...最近はグロブ組み込み時代遅れ？Perlの使用法））。</target>
        </trans-unit>
        <trans-unit id="58503f8e65271fa8fe04c22bfeefeb43b3d52ae2" translate="yes" xml:space="preserve">
          <source>For greater flexibility use &lt;code&gt;constant_types()&lt;/code&gt; , &lt;code&gt;C_constant&lt;/code&gt; and &lt;code&gt;XS_constant&lt;/code&gt; , with which &lt;code&gt;WriteConstants&lt;/code&gt; is implemented.</source>
          <target state="translated">柔軟性を高めるには、 &lt;code&gt;constant_types()&lt;/code&gt; 、 &lt;code&gt;C_constant&lt;/code&gt; 、および &lt;code&gt;XS_constant&lt;/code&gt; を使用します。これらを使用すると、 &lt;code&gt;WriteConstants&lt;/code&gt; が実装されます。</target>
        </trans-unit>
        <trans-unit id="58eb72e94a31aa72b0eef623ad6e59f7d30f9713" translate="yes" xml:space="preserve">
          <source>For greater flexibility use &lt;code&gt;constant_types()&lt;/code&gt;, &lt;code&gt;C_constant&lt;/code&gt; and &lt;code&gt;XS_constant&lt;/code&gt;, with which &lt;code&gt;WriteConstants&lt;/code&gt; is implemented.</source>
          <target state="translated">柔軟性を高めるには、 &lt;code&gt;WriteConstants&lt;/code&gt; が実装されている &lt;code&gt;constant_types()&lt;/code&gt; 、 &lt;code&gt;C_constant&lt;/code&gt; 、および &lt;code&gt;XS_constant&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0de33270f54dfe208dcaa472e2a23a92f8da154b" translate="yes" xml:space="preserve">
          <source>For hashes there is a specialized hook that gives control over hash keys (but not values). This hook calls &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get' magic if the &quot;set&quot; function in the &lt;code&gt;ufuncs&lt;/code&gt; structure is NULL. The hook is activated whenever the hash is accessed with a key specified as an &lt;code&gt;SV&lt;/code&gt; through the functions &lt;code&gt;hv_store_ent&lt;/code&gt; , &lt;code&gt;hv_fetch_ent&lt;/code&gt; , &lt;code&gt;hv_delete_ent&lt;/code&gt; , and &lt;code&gt;hv_exists_ent&lt;/code&gt; . Accessing the key as a string through the functions without the &lt;code&gt;..._ent&lt;/code&gt; suffix circumvents the hook. See &lt;a href=&quot;hash/util/fieldhash#GUTS&quot;&gt;GUTS in Hash::Util::FieldHash&lt;/a&gt; for a detailed description.</source>
          <target state="translated">ハッシュには、ハッシュキーを制御する（値ではない）専用のフックがあります。このフックは、 &lt;code&gt;ufuncs&lt;/code&gt; 構造体の「set」関数がNULLの場合、 &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get' magicを呼び出します。このフックは、関数 &lt;code&gt;hv_store_ent&lt;/code&gt; 、 &lt;code&gt;hv_fetch_ent&lt;/code&gt; 、 &lt;code&gt;hv_delete_ent&lt;/code&gt; 、および &lt;code&gt;hv_exists_ent&lt;/code&gt; を介して &lt;code&gt;SV&lt;/code&gt; として指定されたキーでハッシュにアクセスするたびにアクティブになります。 &lt;code&gt;..._ent&lt;/code&gt; サフィックスのない関数を介して文字列としてキーにアクセスすると、フックが回避されます。詳細について&lt;a href=&quot;hash/util/fieldhash#GUTS&quot;&gt;は、Hash :: Util :: FieldHashのGUTSを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4435e15de572e78225f7353bb7b295d6337506cb" translate="yes" xml:space="preserve">
          <source>For hashes there is a specialized hook that gives control over hash keys (but not values). This hook calls &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get' magic if the &quot;set&quot; function in the &lt;code&gt;ufuncs&lt;/code&gt; structure is NULL. The hook is activated whenever the hash is accessed with a key specified as an &lt;code&gt;SV&lt;/code&gt; through the functions &lt;code&gt;hv_store_ent&lt;/code&gt;, &lt;code&gt;hv_fetch_ent&lt;/code&gt;, &lt;code&gt;hv_delete_ent&lt;/code&gt;, and &lt;code&gt;hv_exists_ent&lt;/code&gt;. Accessing the key as a string through the functions without the &lt;code&gt;..._ent&lt;/code&gt; suffix circumvents the hook. See &lt;a href=&quot;Hash::Util::FieldHash#GUTS&quot;&gt;&quot;GUTS&quot; in Hash::Util::FieldHash&lt;/a&gt; for a detailed description.</source>
          <target state="translated">ハッシュの場合、ハッシュキー（値ではない）を制御できる特殊なフックがあります。このフックは、 &lt;code&gt;ufuncs&lt;/code&gt; 構造体の「set」関数がNULLの場合、 &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get'magicを呼び出します。フックは、関数 &lt;code&gt;hv_store_ent&lt;/code&gt; 、 &lt;code&gt;hv_fetch_ent&lt;/code&gt; 、 &lt;code&gt;hv_delete_ent&lt;/code&gt; 、および &lt;code&gt;hv_exists_ent&lt;/code&gt; を介して &lt;code&gt;SV&lt;/code&gt; として指定されたキーでハッシュにアクセスするたびにアクティブになります。 &lt;code&gt;..._ent&lt;/code&gt; サフィックスのない関数を介して文字列としてキーにアクセスすると、フックが回避されます。詳細な説明については、&lt;a href=&quot;Hash::Util::FieldHash#GUTS&quot;&gt;Hash :: Util :: FieldHashの「GUTS」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fb6f3123625a805e9190d1f930f29ca28155c14a" translate="yes" xml:space="preserve">
          <source>For hexadecimal and binary numbers, the exponent must be separated from the significand (mantissa) by the letter &quot;p&quot; or &quot;P&quot;, not &quot;e&quot; or &quot;E&quot; as with decimal numbers.</source>
          <target state="translated">16進数や2進数の場合、指数は10進数のように &quot;e &quot;や &quot;E &quot;ではなく、&quot;p &quot;や &quot;P &quot;の文字で記号(仮数)から分離されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="8be86894a1183cb1339fe47f94cdbb010d7d4c9e" translate="yes" xml:space="preserve">
          <source>For historical reasons, Exporter supplies a &lt;code&gt;require_version&lt;/code&gt; method that simply delegates to &lt;code&gt;VERSION&lt;/code&gt; . Originally, before &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; existed, Exporter would call &lt;code&gt;require_version&lt;/code&gt; .</source>
          <target state="translated">歴史的な理由により、Exporterは &lt;code&gt;VERSION&lt;/code&gt; に委譲する &lt;code&gt;require_version&lt;/code&gt; メソッドを提供します。本来、 &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; 存在する前に、エクスポーターは &lt;code&gt;require_version&lt;/code&gt; を呼び出していました。</target>
        </trans-unit>
        <trans-unit id="2d70e455613f0da8cacb6a89c2c812775670a6a4" translate="yes" xml:space="preserve">
          <source>For historical reasons, Exporter supplies a &lt;code&gt;require_version&lt;/code&gt; method that simply delegates to &lt;code&gt;VERSION&lt;/code&gt;. Originally, before &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; existed, Exporter would call &lt;code&gt;require_version&lt;/code&gt;.</source>
          <target state="translated">歴史的な理由から、Exporterは単に &lt;code&gt;VERSION&lt;/code&gt; に委任する &lt;code&gt;require_version&lt;/code&gt; メソッドを提供します。元々、 &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; 存在する前は、エクスポーターは &lt;code&gt;require_version&lt;/code&gt; を呼び出していました。</target>
        </trans-unit>
        <trans-unit id="600f113a4040010b3033d7854bba8509d5ed27cc" translate="yes" xml:space="preserve">
          <source>For historical reasons, if &lt;code&gt;pat&lt;/code&gt; is null then the contents of &lt;code&gt;ERRSV&lt;/code&gt; (&lt;code&gt;$@&lt;/code&gt; ) will be used as an error message or object instead of building an error message from arguments. If you want to throw a non-string object, or build an error message in an SV yourself, it is preferable to use the &lt;a href=&quot;#croak_sv&quot;&gt;croak_sv&lt;/a&gt; function, which does not involve clobbering &lt;code&gt;ERRSV&lt;/code&gt; .</source>
          <target state="translated">歴史的な理由により、 &lt;code&gt;pat&lt;/code&gt; がnullの場合、 &lt;code&gt;ERRSV&lt;/code&gt; （ &lt;code&gt;$@&lt;/code&gt; ）の内容は、引数からエラーメッセージを作成する代わりに、エラーメッセージまたはオブジェクトとして使用されます。文字列以外のオブジェクトをスローしたり、SVでエラーメッセージを自分で作成したりする場合は、ERRSVの &lt;code&gt;ERRSV&lt;/code&gt; 伴わない&lt;a href=&quot;#croak_sv&quot;&gt;croak_sv&lt;/a&gt;関数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4ae811500c0692faac786014e5e865516579e405" translate="yes" xml:space="preserve">
          <source>For historical reasons, if &lt;code&gt;pat&lt;/code&gt; is null then the contents of &lt;code&gt;ERRSV&lt;/code&gt; (&lt;code&gt;$@&lt;/code&gt;) will be used as an error message or object instead of building an error message from arguments. If you want to throw a non-string object, or build an error message in an SV yourself, it is preferable to use the &lt;a href=&quot;#croak_sv&quot;&gt;&quot;croak_sv&quot;&lt;/a&gt; function, which does not involve clobbering &lt;code&gt;ERRSV&lt;/code&gt;.</source>
          <target state="translated">歴史的な理由から、 &lt;code&gt;pat&lt;/code&gt; がnullの場合、引数からエラーメッセージを作成する代わりに、 &lt;code&gt;ERRSV&lt;/code&gt; （ &lt;code&gt;$@&lt;/code&gt; ）の内容がエラーメッセージまたはオブジェクトとして使用されます。文字列以外のオブジェクトをスローする場合、またはSVでエラーメッセージを自分で作成する場合は、ERRSVの &lt;code&gt;ERRSV&lt;/code&gt; を含まない&lt;a href=&quot;#croak_sv&quot;&gt;「croak_sv」&lt;/a&gt;関数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2929ab3e04a6c6477fd6c19f7e1c7cc73d91eebf" translate="yes" xml:space="preserve">
          <source>For historical reasons, if you omit the list, &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; is used as the format; to use FILEHANDLE without a list, you must use a bareword filehandle like &lt;code&gt;FH&lt;/code&gt;, not an indirect one like &lt;code&gt;$fh&lt;/code&gt;. However, this will rarely do what you want; if &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; contains formatting codes, they will be replaced with the empty string and a warning will be emitted if &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; are enabled. Just use &lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; if you want to print the contents of &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">歴史的な理由から、リストを省略すると、形式として&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;が使用されます。リストなしでFILEHANDLEを使用するには、 &lt;code&gt;$fh&lt;/code&gt; ような間接的なファイルハンドルではなく、 &lt;code&gt;FH&lt;/code&gt; のようなベアワードファイルハンドルを使用する必要があります。ただし、これで目的の処理が行われることはめったにありません。&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;にフォーマットコードが含まれている場合、それらは空の文字列に置き換えられ、&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;が有効になっている場合は警告が発行されます。&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;内容を印刷する場合は、&lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt; &lt;code&gt;print&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="b56608d17c68748711bf4ce7481c7c0f04ebd25a" translate="yes" xml:space="preserve">
          <source>For historical reasons, if you omit the list, &lt;code&gt;$_&lt;/code&gt; is used as the format; to use FILEHANDLE without a list, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; . However, this will rarely do what you want; if $_ contains formatting codes, they will be replaced with the empty string and a warning will be emitted if warnings are enabled. Just use &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; if you want to print the contents of $_.</source>
          <target state="translated">歴史的な理由から、リストを省略すると、 &lt;code&gt;$_&lt;/code&gt; がフォーマットとして使用されます。リストなしでFILEHANDLEを使用するには、 &lt;code&gt;$fh&lt;/code&gt; ような間接的なファイルハンドルではなく、 &lt;code&gt;FH&lt;/code&gt; のような実際のファイルハンドルを使用する必要があります。ただし、これが目的の動作を行うことはほとんどありません。 $ _にフォーマットコードが含まれている場合、それらは空の文字列に置き換えられ、警告が有効になっている場合は警告が発行されます。$ _の内容を印刷したい場合は、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e79e19888efce3854a52e5d2a8daf4acff793786" translate="yes" xml:space="preserve">
          <source>For historical reasons, if you omit the list, &lt;code&gt;$_&lt;/code&gt; is used as the format; to use FILEHANDLE without a list, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; . However, this will rarely do what you want; if $_ contains formatting codes, they will be replaced with the empty string and a warning will be emitted if warnings are enabled. Just use &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; if you want to print the contents of $_.</source>
          <target state="translated">歴史的な理由から、リストを省略すると、 &lt;code&gt;$_&lt;/code&gt; がフォーマットとして使用されます。リストなしでFILEHANDLEを使用するには、 &lt;code&gt;$fh&lt;/code&gt; ような間接的なファイルハンドルではなく、 &lt;code&gt;FH&lt;/code&gt; のような実際のファイルハンドルを使用する必要があります。ただし、これが目的の動作を行うことはほとんどありません。 $ _にフォーマットコードが含まれている場合、それらは空の文字列に置き換えられ、警告が有効になっている場合は警告が発行されます。$ _の内容を印刷したい場合は、 &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8685cc82ad46d01d9c5b4bb2267ef13097a60367" translate="yes" xml:space="preserve">
          <source>For historical reasons, some values work on almost every system supported by Perl: 0 means read-only, 1 means write-only, and 2 means read/write. We know that these values do</source>
          <target state="translated">歴史的な理由から、Perl でサポートされているほとんどすべてのシステムで動作する値があります:0 は読み取り専用、1 は書き込み専用、2 は読み取り/書き込みを意味します。これらの値は</target>
        </trans-unit>
        <trans-unit id="13de78042df7d486da0987893d3eef529f8f05a4" translate="yes" xml:space="preserve">
          <source>For historical reasons, the &lt;code&gt;=value&lt;/code&gt; is optional, but defaults to 1 only where it is safe to do so--that is, mostly for Boolean options. It is always better to assign a specific value using &lt;code&gt;=&lt;/code&gt; . The &lt;code&gt;option&lt;/code&gt; can be abbreviated, but for clarity probably should not be. Several options can be set together. See &lt;a href=&quot;#Configurable-Options&quot;&gt;Configurable Options&lt;/a&gt; for a list of these.</source>
          <target state="translated">歴史的な理由により、 &lt;code&gt;=value&lt;/code&gt; はオプションですが、デフォルトで1に設定できるのは、安全である場合に限られます。つまり、ほとんどの場合はブールオプションです。 &lt;code&gt;=&lt;/code&gt; を使用して特定の値を割り当てることをお勧めします。この &lt;code&gt;option&lt;/code&gt; は省略できますが、わかりやすくするために省略しないでください。いくつかのオプションを一緒に設定できます。これらのリストについては、&lt;a href=&quot;#Configurable-Options&quot;&gt;構成可能なオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d2a9b63f9ed2cfe392339168da738f678a6aac1" translate="yes" xml:space="preserve">
          <source>For historical reasons, the &lt;code&gt;=value&lt;/code&gt; is optional, but defaults to 1 only where it is safe to do so--that is, mostly for Boolean options. It is always better to assign a specific value using &lt;code&gt;=&lt;/code&gt;. The &lt;code&gt;option&lt;/code&gt; can be abbreviated, but for clarity probably should not be. Several options can be set together. See &lt;a href=&quot;#Configurable-Options&quot;&gt;&quot;Configurable Options&quot;&lt;/a&gt; for a list of these.</source>
          <target state="translated">歴史的な理由から、 &lt;code&gt;=value&lt;/code&gt; はオプションですが、デフォルトでは、安全な場合にのみ1になります。つまり、ほとんどの場合、ブールオプションの場合です。 &lt;code&gt;=&lt;/code&gt; を使用して特定の値を割り当てることをお勧めします。この &lt;code&gt;option&lt;/code&gt; は省略できますが、わかりやすくするために省略してはいけません。複数のオプションを一緒に設定できます。これらのリストについては、&lt;a href=&quot;#Configurable-Options&quot;&gt;「構成可能なオプション」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e883aabacc18eb6fd41086f41674bf1de7ee743f" translate="yes" xml:space="preserve">
          <source>For historical reasons, the non-zero return value also attempts to be a suitable value to pass to the C library function &lt;code&gt;exit&lt;/code&gt; (or to return from &lt;code&gt;main&lt;/code&gt;), to serve as an exit code indicating the nature of the way initialisation terminated. However, this isn't portable, due to differing exit code conventions. A historical bug is preserved for the time being: if the Perl built-in &lt;code&gt;exit&lt;/code&gt; is called during this function's execution, with a type of exit entailing a zero exit code under the host operating system's conventions, then this function returns zero rather than a non-zero value. This bug, [perl #2754], leads to &lt;code&gt;perl_run&lt;/code&gt; being called (and therefore &lt;code&gt;INIT&lt;/code&gt; blocks and the main program running) despite a call to &lt;code&gt;exit&lt;/code&gt;. It has been preserved because a popular module-installing module has come to rely on it and needs time to be fixed. This issue is [perl #132577], and the original bug is due to be fixed in Perl 5.30.</source>
          <target state="translated">歴史的な理由から、ゼロ以外の戻り値は、初期化が終了した方法の性質を示す終了コードとして機能するために、Cライブラリ関数 &lt;code&gt;exit&lt;/code&gt; に渡す（または &lt;code&gt;main&lt;/code&gt; から戻る）のに適した値になろうとします。ただし、終了コードの規則が異なるため、これは移植性がありません。過去のバグは当面の間保持されます。この関数の実行中にPerl組み込み &lt;code&gt;exit&lt;/code&gt; が呼び出され、ホストオペレーティングシステムの規則に基づいてゼロの終了コードを伴うタイプの出口がある場合、この関数は非ではなくゼロを返します。 -ゼロ値。このバグ[perl＃2754]により、への呼び出しにもかかわらず、 &lt;code&gt;perl_run&lt;/code&gt; が呼び出されます（したがって、 &lt;code&gt;INIT&lt;/code&gt; ブロックとメインプログラムが実行されます）。 &lt;code&gt;exit&lt;/code&gt; ます。人気のあるモジュールインストールモジュールがそれに依存するようになり、修正するのに時間がかかるため、保存されています。この問題は[perl＃132577]であり、元のバグはPerl5.30で修正される予定です。</target>
        </trans-unit>
        <trans-unit id="6ff61daf23d266b426600969288affaf2f0354dc" translate="yes" xml:space="preserve">
          <source>For historical reasons, the non-zero return value also attempts to be a suitable value to pass to the C library function &lt;code&gt;exit&lt;/code&gt; (or to return from &lt;code&gt;main&lt;/code&gt;), to serve as an exit code indicating the nature of the way the program terminated. However, this isn't portable, due to differing exit code conventions. An attempt is made to return an exit code of the type required by the host operating system, but because it is constrained to be non-zero, it is not necessarily possible to indicate every type of exit. It is only reliable on Unix, where a zero exit code can be augmented with a set bit that will be ignored. In any case, this function is not the correct place to acquire an exit code: one should get that from &lt;a href=&quot;#perl_destruct&quot;&gt;&quot;perl_destruct&quot;&lt;/a&gt;.</source>
          <target state="translated">歴史的な理由から、ゼロ以外の戻り値は、プログラムが終了した方法の性質を示す終了コードとして機能するために、Cライブラリ関数 &lt;code&gt;exit&lt;/code&gt; に渡す（または &lt;code&gt;main&lt;/code&gt; から戻る）のに適した値になろうとします。ただし、終了コードの規則が異なるため、これは移植性がありません。ホストオペレーティングシステムに必要なタイプの終了コードを返そうとしますが、ゼロ以外に制限されているため、必ずしもすべてのタイプの終了を示すことができるとは限りません。これはUnixでのみ信頼でき、ゼロ終了コードは無視されるセットビットで拡張できます。いずれにせよ、この関数は終了コードを取得するための正しい場所ではありません。&lt;a href=&quot;#perl_destruct&quot;&gt;「perl_destruct」&lt;/a&gt;から取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="55b92ebb92494cfbe30e7229baf3e5d9062d8da3" translate="yes" xml:space="preserve">
          <source>For icmp, $ttl can be specified to set the TTL of the outgoing packet.</source>
          <target state="translated">icmp の場合は、$ttl を指定して送信パケットの TTL を設定することができます。</target>
        </trans-unit>
        <trans-unit id="5a3dc65d0e11f4f07770188251c2050c67f574aa" translate="yes" xml:space="preserve">
          <source>For icmp, &lt;code&gt;ttl&lt;/code&gt; can be specified to set the TTL of the outgoing packet.</source>
          <target state="translated">icmpの場合、 &lt;code&gt;ttl&lt;/code&gt; を指定して、発信パケットのTTLを設定できます。</target>
        </trans-unit>
        <trans-unit id="2fabb550524d3e9edaaeec56458f89ae111e042a" translate="yes" xml:space="preserve">
          <source>For improved performance, include:</source>
          <target state="translated">パフォーマンスを向上させるためには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="c1b48d4e66bee46bcdb174582c112372d1e36d74" translate="yes" xml:space="preserve">
          <source>For including perl header files this function simply prints:</source>
          <target state="translated">perlのヘッダファイルを含めるために、この関数は単に印刷します。</target>
        </trans-unit>
        <trans-unit id="06d292b6c5f7ebb00cd41f31f43524ff429d73d9" translate="yes" xml:space="preserve">
          <source>For information about bugs and how to report them, see the BUGS section in the documentation available with the perldoc command.</source>
          <target state="translated">バグの報告方法については、perldoc コマンドで利用可能なドキュメントの BUGS セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8b2246aaa2d68e99fd635ee467d71b09bb4bd64" translate="yes" xml:space="preserve">
          <source>For information on OO programming with Perl, please see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">Perlを使用したOOプログラミングについては、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;および&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f30b25340bbfdf0b3da24bb0d1fada0694368c1" translate="yes" xml:space="preserve">
          <source>For information on compilers on older versions of AIX, see &lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;&quot;Compiling Perl 5 on older AIX versions up to 4.3.3&quot;&lt;/a&gt;.</source>
          <target state="translated">古いバージョンのAIXでのコンパイラーについては、&lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;「4.3.3までの&lt;/a&gt;古いバージョンのAIXでのPerl5のコンパイル」を参照してください。</target>
        </trans-unit>
        <trans-unit id="a44b4f224e3945a9a157e926bd85c54a2b806624" translate="yes" xml:space="preserve">
          <source>For information on compilers on older versions of AIX, see &lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;Compiling Perl 5 on older AIX versions up to 4.3.3&lt;/a&gt;.</source>
          <target state="translated">古いバージョンのAIXでのコンパイラーの詳細については&lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;、4.3.3までの古いAIXバージョンでのPerl 5のコンパイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb36eedea04b6ee98c8a9a8c3584c2e154026b62" translate="yes" xml:space="preserve">
          <source>For information on true color support in various terminal emulators, see &lt;a href=&quot;https://gist.github.com/XVilka/8346728&quot;&gt;True Colour support&lt;/a&gt;.</source>
          <target state="translated">さまざまな端末エミュレータでの&lt;a href=&quot;https://gist.github.com/XVilka/8346728&quot;&gt;トゥルーカラーのサポート&lt;/a&gt;については、トゥルーカラーのサポートを参照してください。</target>
        </trans-unit>
        <trans-unit id="e475bfd513c3fa5a177d8f4cb9e523eea02595c6" translate="yes" xml:space="preserve">
          <source>For installation of the Unix emulation, read the appropriate docs.</source>
          <target state="translated">Unix エミュレーションのインストールについては、適切なドキュメントを読んでください。</target>
        </trans-unit>
        <trans-unit id="82185638546b1e3be3173f75a2cb122a36a8e321" translate="yes" xml:space="preserve">
          <source>For instance in</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="374d49595b79aec50ad48d5a39ac32ce874245bb" translate="yes" xml:space="preserve">
          <source>For instance with a German locale:</source>
          <target state="translated">例えばドイツのロケールで。</target>
        </trans-unit>
        <trans-unit id="23b7041567e33cbc564ac905e83c0e92b5fee08b" translate="yes" xml:space="preserve">
          <source>For instance,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="2e5815c4c630ea0f3c91b8a08e72b7f14ef4992d" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;\p{Uppercase}&lt;/code&gt; matches any single character with the Unicode &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; property, while &lt;code&gt;\p{L}&lt;/code&gt; matches any character with a &lt;code&gt;General_Category&lt;/code&gt; of &lt;code&gt;&quot;L&quot;&lt;/code&gt; (letter) property (see &lt;a href=&quot;#General_Category&quot;&gt;&quot;General_Category&quot;&lt;/a&gt; below). Brackets are not required for single letter property names, so &lt;code&gt;\p{L}&lt;/code&gt; is equivalent to &lt;code&gt;\pL&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;\p{Uppercase}&lt;/code&gt; は、Unicodeの &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; プロパティを持つ任意の1文字と一致し、 &lt;code&gt;\p{L}&lt;/code&gt; は、 &lt;code&gt;&quot;L&quot;&lt;/code&gt; （文字）プロパティの &lt;code&gt;General_Category&lt;/code&gt; を持つすべての文字と一致します（以下の&lt;a href=&quot;#General_Category&quot;&gt;「General_Category」を&lt;/a&gt;参照）。1文字のプロパティ名には角かっこは必要ないため、 &lt;code&gt;\p{L}&lt;/code&gt; は &lt;code&gt;\pL&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="d9622af028e4033dfcc0d167b46ab4c597968052" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;\p{Uppercase}&lt;/code&gt; matches any single character with the Unicode &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; property, while &lt;code&gt;\p{L}&lt;/code&gt; matches any character with a &lt;code&gt;General_Category&lt;/code&gt; of &lt;code&gt;&quot;L&quot;&lt;/code&gt; (letter) property (see &lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt; below). Brackets are not required for single letter property names, so &lt;code&gt;\p{L}&lt;/code&gt; is equivalent to &lt;code&gt;\pL&lt;/code&gt; .</source>
          <target state="translated">たとえば、 &lt;code&gt;\p{Uppercase}&lt;/code&gt; はUnicodeの &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; プロパティを持つ任意の1文字と一致し、 &lt;code&gt;\p{L}&lt;/code&gt; は &lt;code&gt;General_Category&lt;/code&gt; が &lt;code&gt;&quot;L&quot;&lt;/code&gt; （文字）プロパティを持つ任意の文字と一致します（下記の&lt;a href=&quot;#General_Category&quot;&gt;General_Categoryを&lt;/a&gt;参照）。括弧は1文字のプロパティ名には必要ないため、 &lt;code&gt;\p{L}&lt;/code&gt; は &lt;code&gt;\pL&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="09478666220a63f47b3cd0943ea02bf8161c942d" translate="yes" xml:space="preserve">
          <source>For instance, Math::BigInt-&amp;gt;bdiv() always returns a Math::BigInt, regardless of whether the second operant is a Math::BigFloat. To get a Math::BigFloat you either need to call the operation manually, make sure each operand already is a Math::BigFloat, or cast to that type via Math::BigFloat-&amp;gt;new():</source>
          <target state="translated">たとえば、Math :: BigInt-&amp;gt; bdiv（）は、2番目のオペラントがMath :: BigFloatであるかどうかに関係なく、常にMath :: BigIntを返します。Math :: BigFloatを取得するには、操作を手動で呼び出すか、各オペランドがすでにMath :: BigFloatであることを確認するか、Math :: BigFloat-&amp;gt; new（）：を介してその型にキャストする必要があります。</target>
        </trans-unit>
        <trans-unit id="7c14488c9703c3faf25c072547bcce9b9c6d026a" translate="yes" xml:space="preserve">
          <source>For instance, here's part of the report from the</source>
          <target state="translated">例えば、以下のような報告書の一部は</target>
        </trans-unit>
        <trans-unit id="7503b0a59ae7cf568e520699d192f582d8728a5a" translate="yes" xml:space="preserve">
          <source>For instance, if B = 10000, the number 1234567890 is represented internally as [3456, 7890, 12].</source>
          <target state="translated">例えば、B=10000 の場合、1234567890 は内部的には [3456,7890,12]と表現されます。</target>
        </trans-unit>
        <trans-unit id="3ae8eebad47c4d5a417e84613772d68b458e76b8" translate="yes" xml:space="preserve">
          <source>For instance, if B = 10000, the number 1234567890 is represented internally as [7890, 3456, 12].</source>
          <target state="translated">例えば、B=10000 の場合、1234567890 は内部的には [7890,3456,12]と表現されます。</target>
        </trans-unit>
        <trans-unit id="0a5b8d1bb99d582e6babc450d597df94876d661f" translate="yes" xml:space="preserve">
          <source>For instance, if the object $obj represents the hexadecimal number 0xabcde, then &lt;code&gt;_rsft($obj, 2, 16)&lt;/code&gt; returns an object representing the number 0xabc. The &quot;remainer&quot;, 0xde, is discarded and not returned.</source>
          <target state="translated">たとえば、オブジェクト$ objが16進数の0xabcdeを表す場合、 &lt;code&gt;_rsft($obj, 2, 16)&lt;/code&gt; は数値0xabcを表すオブジェクトを返します。「残り」の0xdeは破棄され、返されません。</target>
        </trans-unit>
        <trans-unit id="3ec9b07fa26c1960352cc0e11e6a493987aa28ff" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; routine which computes the square root of its argument is only defined for non-negative real numbers and yields a non-negative real number (it is an application from &lt;b&gt;R+&lt;/b&gt; to &lt;b&gt;R+&lt;/b&gt;). If we allow it to return a complex number, then it can be extended to negative real numbers to become an application from &lt;b&gt;R&lt;/b&gt; to &lt;b&gt;C&lt;/b&gt; (the set of complex numbers):</source>
          <target state="translated">例えば、 &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; 引数の平方根を計算ルーチンは、非負実数のために定義され、非負実数を（それからアプリケーションで生じるれる&lt;b&gt;R +&lt;/b&gt;の&lt;b&gt;R +&lt;/b&gt;）。複素数を返すことができる場合は、負の実数に拡張して、&lt;b&gt;R&lt;/b&gt;から&lt;b&gt;C&lt;/b&gt;（複素数のセット）へのアプリケーションにすることができます。</target>
        </trans-unit>
        <trans-unit id="844d0dc718600917c8257dab7fe72c8f5c61d079" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;code&gt;sqrt&lt;/code&gt; routine which computes the square root of its argument is only defined for non-negative real numbers and yields a non-negative real number (it is an application from &lt;b&gt;R+&lt;/b&gt; to &lt;b&gt;R+&lt;/b&gt;). If we allow it to return a complex number, then it can be extended to negative real numbers to become an application from &lt;b&gt;R&lt;/b&gt; to &lt;b&gt;C&lt;/b&gt; (the set of complex numbers):</source>
          <target state="translated">例えば、 &lt;code&gt;sqrt&lt;/code&gt; 引数の平方根を計算ルーチンは、非負実数のために定義され、非負実数を（それからアプリケーションで生じるれる&lt;b&gt;R +&lt;/b&gt;の&lt;b&gt;R +&lt;/b&gt;）。複素数を返すことを許可すると、負の実数に拡張して、&lt;b&gt;R&lt;/b&gt;から&lt;b&gt;C&lt;/b&gt;（複素数のセット）へのアプリケーションにすることができます。</target>
        </trans-unit>
        <trans-unit id="c71534a4a55ea4fd39c101e16a7e78a572754ea2" translate="yes" xml:space="preserve">
          <source>For instance, the MGVTBL structure called &lt;code&gt;vtbl_sv&lt;/code&gt; (which corresponds to an &lt;code&gt;mg_type&lt;/code&gt; of &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; ) contains:</source>
          <target state="translated">たとえば、 &lt;code&gt;vtbl_sv&lt;/code&gt; （これは、 &lt;code&gt;mg_type&lt;/code&gt; の &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; 対応します）と呼ばれるMGVTBL構造には、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="535b1920358246c40d20720f1b97d6bbb40cf429" translate="yes" xml:space="preserve">
          <source>For instance, the MGVTBL structure called &lt;code&gt;vtbl_sv&lt;/code&gt; (which corresponds to an &lt;code&gt;mg_type&lt;/code&gt; of &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt;) contains:</source>
          <target state="translated">たとえば、 &lt;code&gt;vtbl_sv&lt;/code&gt; （ &lt;code&gt;mg_type&lt;/code&gt; の &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; 対応）と呼ばれるMGVTBL構造には次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="9ed32d78c1e09dbba1a9af89bf4a97865e921d05" translate="yes" xml:space="preserve">
          <source>For instance, to make our report order case-insensitive, we use &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; to lowercase the keys before comparing them:</source>
          <target state="translated">たとえば、レポートの順序で大文字と小文字を区別しないようにするには、 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; を使用して、比較する前にキーを小文字にします。</target>
        </trans-unit>
        <trans-unit id="6e8784a307cf324e4b1061a05e87e7b160fe3ce8" translate="yes" xml:space="preserve">
          <source>For instance, to make our report order case-insensitive, we use &lt;code&gt;lc&lt;/code&gt; to lowercase the keys before comparing them:</source>
          <target state="translated">たとえば、レポートの順序で大文字と小文字を区別しないようにするには、 &lt;code&gt;lc&lt;/code&gt; を使用してキーを小文字にしてから比較します。</target>
        </trans-unit>
        <trans-unit id="9d4e3e2974e96c779a0f3985585d1d9fd27c623e" translate="yes" xml:space="preserve">
          <source>For instance, with base 3 and collation sequence &quot;-/|&quot;, the character &quot;-&quot; represents 0, &quot;/&quot; represents 1, and &quot;|&quot; represents 2. So if STR is &quot;/|-&quot;, the output is 1 * 3**2 + 2 * 3**1 + 0 * 3**0 = 15.</source>
          <target state="translated">例えば、基数3、照合順序&quot;-/|&quot;の場合、文字&quot;-&quot;は0、&quot;/&quot;は1、&quot;|&quot;は2を表します。したがって、STRが&quot;/|-&quot;の場合、出力は1*3**2+2*3**1+0*3**0=15となります。</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="7cfc93ae0f30aa1f0666b1f4bcb636c1b64a91aa" translate="yes" xml:space="preserve">
          <source>For integer conversions, specifying a precision implies that the output of the number itself should be zero-padded to this width, where the 0 flag is ignored:</source>
          <target state="translated">整数変換の場合,精度を指定することは,数値自体の出力がこの幅にゼロパディングされるべきであることを意味し,0フラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="ecd617b52663df6a2cd98775b9d0bdd10ec28a70" translate="yes" xml:space="preserve">
          <source>For intrepid programmers, the indispensable textbook is</source>
          <target state="translated">勇敢なプログラマーには欠かせないテキストは</target>
        </trans-unit>
        <trans-unit id="73e4bd4b660eee3d93bee479b4164d47d735941e" translate="yes" xml:space="preserve">
          <source>For larger sets of commits that only make sense together, or that would benefit from a summary of the set's purpose, you should use a merge commit. You should perform your work on a &lt;a href=&quot;#Topic-branches-and-rewriting-history&quot;&gt;topic branch&lt;/a&gt;, which you should regularly rebase against blead to ensure that your code is not broken by blead moving. When you have finished your work, please perform a final rebase and test. Linear history is something that gets lost with every commit on blead, but a final rebase makes the history linear again, making it easier for future maintainers to see what has happened. Rebase as follows (assuming your work was on the branch &lt;code&gt;committer/somework&lt;/code&gt;):</source>
          <target state="translated">一緒にしか意味をなさない、またはセットの目的の要約から利益を得るであろうコミットのより大きなセットの場合、マージコミットを使用する必要があります。&lt;a href=&quot;#Topic-branches-and-rewriting-history&quot;&gt;トピックブランチ&lt;/a&gt;で作業を実行する必要があります。トピックブランチは、bleadの移動によってコードが破損しないように、定期的にbleadに対してリベースする必要があります。作業が終了したら、最終的なリベースとテストを実行してください。線形履歴は、bleadでコミットするたびに失われるものですが、最終的なリベースにより、履歴が再び線形になり、将来のメンテナが何が起こったかを簡単に確認できるようになります。次のように &lt;code&gt;committer/somework&lt;/code&gt; します（作業がブランチコミッター/ someworkにあると仮定します）：</target>
        </trans-unit>
        <trans-unit id="32cc3ae00d98ce3277b54b14ffa442a8f077cc1f" translate="yes" xml:space="preserve">
          <source>For lexicons that use an internal cache, translations which have already been cached in their compiled form are not affected by subsequent changes to the whitelist or blacklist settings. Lexicons that use an external cache will have their cache cleared whenever the whitelist of blacklist setings change. The difference between the two types of caching is explained in the &quot;Readonly Lexicons&quot; section.</source>
          <target state="translated">内部キャッシュを使用するレキシコンでは、コンパイルされた形ですでにキャッシュされている翻訳は、その後のホワイトリストやブラックリスト設定の変更の影響を受けません。外部キャッシュを使用するレキシコンは、ブラックリスト設定のホワイトリストが変更されるたびにキャッシュがクリアされます。2種類のキャッシュの違いについては、&quot;Readonly Lexicons&quot; セクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="d3c8026914e8193ab94f632a808acbe08f5e1e3d" translate="yes" xml:space="preserve">
          <source>For licensing inquiries, contact the author at:</source>
          <target state="translated">ライセンスに関するお問い合わせは、著者までご連絡ください。</target>
        </trans-unit>
        <trans-unit id="ce2ac808344a2fda3717bca04925f57752ba466c" translate="yes" xml:space="preserve">
          <source>For licensing the easiest way is to use the same licensing as Perl itself:</source>
          <target state="translated">ライセンスについては、Perlと同じライセンスを使用するのが最も簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="22eb832a816ecf29dad84d085c065a38bc3edb22" translate="yes" xml:space="preserve">
          <source>For locales available in your system, consult also</source>
          <target state="translated">お使いのシステムで利用可能なロケールについては</target>
        </trans-unit>
        <trans-unit id="a3b00aeb77f95c23a885c772aa4da89d9331a578" translate="yes" xml:space="preserve">
          <source>For locales available in your system, consult also &lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale(3)&lt;/a&gt; to see whether it leads to the list of available locales (search for the</source>
          <target state="translated">システムで使用可能なロケールについては、&lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale（3）&lt;/a&gt;も参照して、使用可能なロケールのリストにつながるかどうかを確認してください（</target>
        </trans-unit>
        <trans-unit id="863f28adc13f8c8f63960f8d4f2a4b8a92bd94fd" translate="yes" xml:space="preserve">
          <source>For lookup of</source>
          <target state="translated">のルックアップのために</target>
        </trans-unit>
        <trans-unit id="34229681f9d4faff26200baa4f876a94429acced" translate="yes" xml:space="preserve">
          <source>For low-level access to the formatting mechanism, you may use formline() and access &lt;code&gt;$^A&lt;/code&gt; (the $ACCUMULATOR variable) directly.</source>
          <target state="translated">書式設定メカニズムへの低レベルのアクセスでは、formline（）を使用して &lt;code&gt;$^A&lt;/code&gt; （$ ACCUMULATOR 変数）に直接アクセスできます。</target>
        </trans-unit>
        <trans-unit id="dda78cd120d71d7294ab5327cc0bc80f1754e64b" translate="yes" xml:space="preserve">
          <source>For lower-level direct manipulation of &lt;code&gt;op_sibparent&lt;/code&gt; and &lt;code&gt;op_moresib&lt;/code&gt; , see &lt;code&gt;OpMORESIB_set&lt;/code&gt; , &lt;code&gt;OpLASTSIB_set&lt;/code&gt; , &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; .</source>
          <target state="translated">低レベルの直接操作のため &lt;code&gt;op_sibparent&lt;/code&gt; と &lt;code&gt;op_moresib&lt;/code&gt; 、参照 &lt;code&gt;OpMORESIB_set&lt;/code&gt; 、 &lt;code&gt;OpLASTSIB_set&lt;/code&gt; 、 &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f44cfbdfde09849353ae7ad7f0dbd0ecfc59c22c" translate="yes" xml:space="preserve">
          <source>For lower-level direct manipulation of &lt;code&gt;op_sibparent&lt;/code&gt; and &lt;code&gt;op_moresib&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#OpMORESIB_set&quot;&gt;&quot;OpMORESIB_set&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#OpLASTSIB_set&quot;&gt;&quot;OpLASTSIB_set&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#OpMAYBESIB_set&quot;&gt;&quot;OpMAYBESIB_set&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;op_sibparent&lt;/code&gt; および &lt;code&gt;op_moresib&lt;/code&gt; の低レベルの直接操作については、 &lt;code&gt;&lt;a href=&quot;#OpMORESIB_set&quot;&gt;&quot;OpMORESIB_set&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#OpLASTSIB_set&quot;&gt;&quot;OpLASTSIB_set&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#OpMAYBESIB_set&quot;&gt;&quot;OpMAYBESIB_set&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="9a2710d99c8e59b0ca1361e7bf2da876fb54697f" translate="yes" xml:space="preserve">
          <source>For maintenance clarity, no functions are exported by default. These functions are available for backwards compatibility only and are best avoided in favor of &lt;code&gt;load_file&lt;/code&gt; .</source>
          <target state="translated">保守を明確にするために、デフォルトでは関数はエクスポートされません。これらの関数は、下位互換性のためにのみ使用でき、 &lt;code&gt;load_file&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d54a16eb6e0a53c22d93f4183ae79cdb536879de" translate="yes" xml:space="preserve">
          <source>For maintenance clarity, no functions are exported by default. These functions are available for backwards compatibility only and are best avoided in favor of &lt;code&gt;load_file&lt;/code&gt;.</source>
          <target state="translated">メンテナンスを明確にするために、デフォルトでは関数はエクスポートされません。これらの関数は下位互換性のためにのみ使用可能であり、 &lt;code&gt;load_file&lt;/code&gt; を優先して回避するのが最善です。</target>
        </trans-unit>
        <trans-unit id="66d2d5bbea31d0eff0a07151ddd0f30d9798a0b6" translate="yes" xml:space="preserve">
          <source>For many Perl functions, the CORE package contains real subroutines. This feature is new in Perl 5.16. You can take references to these and make aliases. However, some can only be called as barewords; i.e., you cannot use ampersand syntax (&lt;code&gt;&amp;amp;foo&lt;/code&gt; ) or call them through references. See the &lt;code&gt;shove&lt;/code&gt; example above. These subroutines exist for all keywords except the following:</source>
          <target state="translated">多くのPerl関数の場合、COREパッケージには実際のサブルーチンが含まれています。この機能はPerl 5.16の新機能です。これらを参照してエイリアスを作成できます。ただし、一部は裸語としてのみ呼び出すことができます。つまり、アンパサンド構文（ &lt;code&gt;&amp;amp;foo&lt;/code&gt; ）を使用したり、参照を通じて呼び出すことはできません。上の &lt;code&gt;shove&lt;/code&gt; の例を参照してください。これらのサブルーチンは、以下を除くすべてのキーワードに存在します。</target>
        </trans-unit>
        <trans-unit id="f973e44f5abb90a701bcc17cf63886f44f224bfb" translate="yes" xml:space="preserve">
          <source>For many Perl functions, the CORE package contains real subroutines. This feature is new in Perl 5.16. You can take references to these and make aliases. However, some can only be called as barewords; i.e., you cannot use ampersand syntax (&lt;code&gt;&amp;amp;foo&lt;/code&gt;) or call them through references. See the &lt;code&gt;shove&lt;/code&gt; example above. These subroutines exist for all keywords except the following:</source>
          <target state="translated">多くのPerl関数の場合、COREパッケージには実際のサブルーチンが含まれています。この機能はPerl5.16の新機能です。これらを参照してエイリアスを作成できます。ただし、一部はベアワードとしてのみ呼び出すことができます。つまり、アンパサンド構文（ &lt;code&gt;&amp;amp;foo&lt;/code&gt; ）を使用したり、参照を介して呼び出したりすることはできません。上記の &lt;code&gt;shove&lt;/code&gt; 例を参照してください。これらのサブルーチンは、以下を除くすべてのキーワードに存在します。</target>
        </trans-unit>
        <trans-unit id="8ef8504526bafcd83f659e5d29383951a3389b63" translate="yes" xml:space="preserve">
          <source>For many common uses of the module, the read cache is a liability. For example, a program that inserts a single record, or that scans the file once, will have a cache hit rate of zero. This suggests a major optimization: The cache should be initially disabled. Here's a hybrid approach: Initially, the cache is disabled, but the cache code maintains statistics about how high the hit rate would be *if* it were enabled. When it sees the hit rate get high enough, it enables itself. The STAT comments in this code are the beginning of an implementation of this.</source>
          <target state="translated">モジュールの多くの一般的な用途では、読み込みキャッシュは負債となります。例えば、単一のレコードを挿入したり、ファイルを一度スキャンしたりするプログラムでは、キャッシュヒット率はゼロになります。これは大規模な最適化を示唆しています。キャッシュは最初は無効にすべきです。ここではハイブリッドアプローチを採用します。最初はキャッシュを無効にしますが、キャッシュコードは有効にした場合のヒット率がどれだけ高いかの統計情報を保持します。ヒット率が十分に高くなると、それ自体を有効にします。このコードのSTATコメントは、これの実装の始まりです。</target>
        </trans-unit>
        <trans-unit id="7d7c43c3f2df12ff908506d30ea1b36d85c10b7d" translate="yes" xml:space="preserve">
          <source>For many functions, you can also query &lt;a href=&quot;config#DESCRIPTION&quot;&gt;&lt;code&gt;%Config&lt;/code&gt;&lt;/a&gt;, exported by default from the &lt;a href=&quot;config&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module. For example, to check whether the platform has the &lt;a href=&quot;perlfunc#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt; call, check &lt;a href=&quot;config#d_lstat&quot;&gt;&lt;code&gt;$Config{d_lstat}&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for a full description of available variables.</source>
          <target state="translated">多くの関数では、デフォルトで&lt;a href=&quot;config&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt;モジュールからエクスポートされた&lt;a href=&quot;config#DESCRIPTION&quot;&gt; &lt;code&gt;%Config&lt;/code&gt; を&lt;/a&gt;クエリすることもできます。たとえば、プラットフォームに&lt;a href=&quot;perlfunc#lstat-FILEHANDLE&quot;&gt; &lt;code&gt;lstat&lt;/code&gt; &lt;/a&gt;呼び出しがあるかどうかを確認するには、&lt;a href=&quot;config#d_lstat&quot;&gt; &lt;code&gt;$Config{d_lstat}&lt;/code&gt; &lt;/a&gt;確認します。使用可能な変数の詳細については、&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e0f179826fe2c92a37ede899dfe2a03f1a5c458a" translate="yes" xml:space="preserve">
          <source>For many functions, you can also query &lt;code&gt;%Config&lt;/code&gt; , exported by default from the &lt;code&gt;Config&lt;/code&gt; module. For example, to check whether the platform has the &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, check &lt;code&gt;$Config{d_lstat}&lt;/code&gt; . See &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for a full description of available variables.</source>
          <target state="translated">多くの関数では、デフォルトで &lt;code&gt;Config&lt;/code&gt; モジュールからエクスポートされた &lt;code&gt;%Config&lt;/code&gt; をクエリすることもできます。たとえば、プラットフォームに &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 呼び出しがあるかどうかを確認するには、 &lt;code&gt;$Config{d_lstat}&lt;/code&gt; 確認します。使用可能な変数の詳細については、&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="efd5a9c50ebfeb1864b8fd6e6ed8e999df584565" translate="yes" xml:space="preserve">
          <source>For many people, Perl serves as a great replacement for shell scripting. For others, it serves as a convenient, high-level replacement for most of what they'd program in low-level languages like C or C++. It's ultimately up to you (and possibly your management) which tasks you'll use Perl for and which you won't.</source>
          <target state="translated">多くの人にとって、Perl はシェルスクリプトの素晴らしい代用となっています。他の人にとっては、Perl は C や C++のような低レベル言語でプログラムするものの大部分を、便利で高レベルの代用品として提供しています。どのタスクに Perl を使い、どのタスクに Perl を使わないかは、最終的にはあなた(とおそらくあなたの管理者)次第です。</target>
        </trans-unit>
        <trans-unit id="9b046ce891b8b5f7d7f37e47256b7841d3461b86" translate="yes" xml:space="preserve">
          <source>For many typemap examples, refer to the core typemap file that can be found in the perl source tree at</source>
          <target state="translated">多くのタイプマップの例については、 perl のソースツリーにある</target>
        </trans-unit>
        <trans-unit id="a0610ac0b02cfa9a7d3209596fa010908429083d" translate="yes" xml:space="preserve">
          <source>For maximum security, endeavour always to avoid ever looking at, touching, or even imputing the existence of the filename. You do not know that that filename is connected to the same file as the handle you have, and attempts to check this can only trigger more race conditions. It's far more secure to use the filehandle alone and dispense with the filename altogether.</source>
          <target state="translated">最大限の安全性を確保するために、ファイル名を見たり、触ったり、あるいはファイル名が存在することさえも避けるように常に努力してください。あなたはファイル名がハンドルと同じファイルに接続されていることを知らず、これを確認しようとしてもレース状態を引き起こすだけです。ファイルハンドルだけを使って、ファイル名を完全に排除する方がはるかに安全です。</target>
        </trans-unit>
        <trans-unit id="220ffe1d077d6e4643b22c57e942ba4049701e75" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;../time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; interface of Perl. See &lt;a href=&quot;../perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1秒よりも細かく時間を測定するには、Perl 5.8以降（またはその前にCPANから）の&lt;a href=&quot;../time/hires&quot;&gt;Time :: HiRes&lt;/a&gt;モジュールを使用し &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 。または、gettimeofday（2）がある場合は、Perlのsyscallインターフェイスを使用できる場合があります。。詳細については、&lt;a href=&quot;../perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ae237075cc25a39ee4940474a29997fb4b79588" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;Time::HiRes&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have &lt;a href=&quot;http://man.he.net/man2/gettimeofday&quot;&gt;gettimeofday(2)&lt;/a&gt;, you may be able to use the &lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; interface of Perl. See &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1秒よりも細かい粒度で時間を測定するには、Perl 5.8以降（またはそれ以前のCPAN）の&lt;a href=&quot;Time::HiRes&quot;&gt;Time :: HiRes&lt;/a&gt;モジュールを使用するか、&lt;a href=&quot;http://man.he.net/man2/gettimeofday&quot;&gt;gettimeofday（2）&lt;/a&gt;がある場合は、Perlの&lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt; &lt;code&gt;syscall&lt;/code&gt; &lt;/a&gt;インターフェイスを使用できる場合があります。。詳細については、&lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b053fd32cc090c58c85994234835bd9b44b038f0" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; interface of Perl. See &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1秒よりも細かく時間を測定するには、Perl 5.8以降（またはその前にCPANから）の&lt;a href=&quot;time/hires&quot;&gt;Time :: HiRes&lt;/a&gt;モジュールを使用し &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 。または、gettimeofday（2）がある場合は、Perlのsyscallインターフェイスを使用できる場合があります。。詳細については、&lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ebcaa7dba756e74bb747d1f75584987ce3302b0" translate="yes" xml:space="preserve">
          <source>For module authors using CPAN, the convention has been to note unstable releases with an underscore in the version string. (See &lt;a href=&quot;cpan&quot;&gt;CPAN&lt;/a&gt;.) version.pm follows this convention and alpha releases will test as being newer than the more recent stable release, and less than the next stable release. Only the last element may be separated by an underscore:</source>
          <target state="translated">CPANを使用するモジュール作成者の場合、慣例として、バージョン文字列にアンダースコアが含まれる不安定なリリースに注意してください。（&lt;a href=&quot;cpan&quot;&gt;CPANを&lt;/a&gt;参照してください。）version.pmはこの規則に従い、アルファリリースは最新の安定版リリースよりも新しく、次の安定版リリースよりも少ないものとしてテストされます。最後の要素のみをアンダースコアで区切ることができます。</target>
        </trans-unit>
        <trans-unit id="d974553adc4f12dd109aa40213d04e0af2475b99" translate="yes" xml:space="preserve">
          <source>For modules that do not appear in the requirements, this method will return true.</source>
          <target state="translated">要件に現れないモジュールについては、このメソッドはtrueを返します。</target>
        </trans-unit>
        <trans-unit id="4a7dc3da9f9150a0f4e59b825d03d586115ca6af" translate="yes" xml:space="preserve">
          <source>For modules which ARE classes, and need to handle inherited methods, stubs are needed to ensure that the method inheritance mechanism works properly. You can load the stubs into the module at 'require' time, by adding the statement 'SelfLoader-&amp;gt;load_stubs();' to the module to do this.</source>
          <target state="translated">クラスがAREであり、継承されたメソッドを処理する必要があるモジュールの場合、メソッドの継承メカニズムが適切に機能するようにスタブが必要です。ステートメント 'SelfLoader-&amp;gt; load_stubs（）;'を追加することにより、「必須」時にモジュールにスタブをロードできます。これを行うには、モジュールに。</target>
        </trans-unit>
        <trans-unit id="25217607f7b7b4f54ca08eb0f1fc36241da39944" translate="yes" xml:space="preserve">
          <source>For modules which are not classes, this section is not relevant. This section is only relevant if you have methods which could be inherited.</source>
          <target state="translated">クラスではないモジュールについては、このセクションは関係ありません。このセクションは継承可能なメソッドを持っている場合にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="29a15f44066dff1f2c0c9c7cbcbbd443cbb90819" translate="yes" xml:space="preserve">
          <source>For modules, get the CGI or LWP modules from CPAN. For textbooks, see the two especially dedicated to web stuff in the question on books. For problems and questions related to the web, like &quot;Why do I get 500 Errors&quot; or &quot;Why doesn't it run from the browser right when it runs fine on the command line&quot;, see the troubleshooting guides and references in &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt; or in the CGI MetaFAQ:</source>
          <target state="translated">モジュールの場合、CPANからCGIまたはLWPモジュールを取得します。教科書については、本に関する質問で特にウェブ関連の2つを参照してください。「500エラーが発生する理由」や「コマンドラインで正常に実行されたときにブラウザーから実行されないのはなぜですか」など、Webに関する問題や質問については、&lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;または以下のトラブルシューティングガイドとリファレンスを参照してください。 CGI MetaFAQ：</target>
        </trans-unit>
        <trans-unit id="a6c5d02ad3924eaa5d374ccbe206b8582ecb558a" translate="yes" xml:space="preserve">
          <source>For more about Raku see &lt;a href=&quot;https://www.raku.org/&quot;&gt;https://www.raku.org/&lt;/a&gt;.</source>
          <target state="translated">Rakuの詳細については、&lt;a href=&quot;https://www.raku.org/&quot;&gt;https：&lt;/a&gt; //www.raku.org/を参照してください。</target>
        </trans-unit>
        <trans-unit id="c19610a9a975a0cf5248edf9977288237aa0d121" translate="yes" xml:space="preserve">
          <source>For more about scripts versus blocks, see UAX#24 &quot;Unicode Script Property&quot;: &lt;a href=&quot;http://www.unicode.org/reports/tr24&quot;&gt;http://www.unicode.org/reports/tr24&lt;/a&gt;</source>
          <target state="translated">スクリプトとブロックの詳細については、UAX＃24「Unicode Script Property」を&lt;a href=&quot;http://www.unicode.org/reports/tr24&quot;&gt;参照してください&lt;/a&gt;：http : //www.unicode.org/reports/tr24</target>
        </trans-unit>
        <trans-unit id="88e331d34233d9a1bb2d81e7a3d8e3b0d007ebe6" translate="yes" xml:space="preserve">
          <source>For more about scripts versus blocks, see UAX#24 &quot;Unicode Script Property&quot;: &lt;a href=&quot;https://www.unicode.org/reports/tr24&quot;&gt;https://www.unicode.org/reports/tr24&lt;/a&gt;</source>
          <target state="translated">スクリプトとブロックの詳細については、UAX＃24「Unicodeスクリプトプロパティ」を参照してください：&lt;a href=&quot;https://www.unicode.org/reports/tr24&quot;&gt;https&lt;/a&gt;：//www.unicode.org/reports/tr24</target>
        </trans-unit>
        <trans-unit id="a0f84e3d4e18aa471a205e575dceae5b441a5a9b" translate="yes" xml:space="preserve">
          <source>For more benchmark results see &lt;a href=&quot;http://bloodgate.com/perl/benchmarks.html&quot;&gt;http://bloodgate.com/perl/benchmarks.html&lt;/a&gt;.</source>
          <target state="translated">その他のベンチマーク結果については、&lt;a href=&quot;http://bloodgate.com/perl/benchmarks.html&quot;&gt;http://bloodgate.com/perl/benchmarks.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a12676c43bab4536e6ed20980a2aaf16b4eccc1" translate="yes" xml:space="preserve">
          <source>For more complex signal handling, you might see the standard POSIX module. Lamentably, this is almost entirely undocumented, but the</source>
          <target state="translated">より複雑な信号処理については、標準の POSIX モジュールを参照してください。残念なことに、これはほとんど文書化されていませんが</target>
        </trans-unit>
        <trans-unit id="957067f49d4f276b8bab23569a71cc7a7499c9e9" translate="yes" xml:space="preserve">
          <source>For more complicated situations, version specifications &lt;b&gt;may&lt;/b&gt; be AND-ed together using commas. The specification &lt;code&gt;&amp;gt;= 1.2, != 1.5, &amp;lt; 2.0&lt;/code&gt; indicates a version that must be &lt;b&gt;at least&lt;/b&gt; 1.2, &lt;b&gt;less than&lt;/b&gt; 2.0, and &lt;b&gt;not equal to&lt;/b&gt; 1.5.</source>
          <target state="translated">より複雑な状況では、バージョン仕様をコンマを使用してAND演算&lt;b&gt;することが&lt;/b&gt;できます。仕様 &lt;code&gt;&amp;gt;= 1.2, != 1.5, &amp;lt; 2.0&lt;/code&gt; でなければならないバージョンを示して&lt;b&gt;少なくとも&lt;/b&gt;1.2&lt;b&gt;未満&lt;/b&gt;2.0と&lt;b&gt;しないに等しい&lt;/b&gt;1.5。</target>
        </trans-unit>
        <trans-unit id="ff6fe63c641733bc67160b9c70ac7d6d7f1c3c05" translate="yes" xml:space="preserve">
          <source>For more complicated situations, version specifications may be AND-ed together using commas. The specification &lt;code&gt;&amp;gt;= 1.2, != 1.5, &amp;lt; 2.0&lt;/code&gt; indicates a version that must be &lt;b&gt;at least&lt;/b&gt; 1.2, &lt;b&gt;less than&lt;/b&gt; 2.0, and &lt;b&gt;not equal to&lt;/b&gt; 1.5.</source>
          <target state="translated">より複雑な状況では、バージョン仕様をコンマを使用してAND演算することができます。仕様 &lt;code&gt;&amp;gt;= 1.2, != 1.5, &amp;lt; 2.0&lt;/code&gt; でなければならないバージョンを示して&lt;b&gt;少なくとも&lt;/b&gt;1.2&lt;b&gt;未満&lt;/b&gt;2.0と&lt;b&gt;しないに等しい&lt;/b&gt;1.5。</target>
        </trans-unit>
        <trans-unit id="be1e0dddb201330ac943f0c7f8b66035ebd2739a" translate="yes" xml:space="preserve">
          <source>For more detail on each item in this checklist, see below.</source>
          <target state="translated">このチェックリストの各項目の詳細は、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b905a813e9b57da3dea6d150de2f4e3eac205961" translate="yes" xml:space="preserve">
          <source>For more detail on looping constructs (and some that weren't mentioned in this overview) see &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;.</source>
          <target state="translated">ループ構造（およびこの概要で言及されていないもの）の詳細については、&lt;a href=&quot;perlsyn&quot;&gt;perlsynを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9cce3d22b488b424d06498a184d62a8579f8068a" translate="yes" xml:space="preserve">
          <source>For more detailed explanation of the available commands and output formats, see your own local documentation of</source>
          <target state="translated">利用可能なコマンドや出力フォーマットの詳細については、ローカルの</target>
        </trans-unit>
        <trans-unit id="191b44055a5c64626669b9bb810cf968868b2305" translate="yes" xml:space="preserve">
          <source>For more detailed information, see &lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;http://unicode.org/reports/tr15/&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;http://unicode.org/reports/tr15/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="71e7ea87ff241717fc4e23b38966813c9a86baa7" translate="yes" xml:space="preserve">
          <source>For more details (FAQ), check out the home of DJGPP at:</source>
          <target state="translated">詳細(FAQ)については、DJGPPのホームページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ea5a8e8b2d8338cda1f4a6899bfe72419e34ebf1" translate="yes" xml:space="preserve">
          <source>For more details on Unicode properties, see &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;&quot;Unicode Character Properties&quot; in perlunicode&lt;/a&gt;; for a complete list of possible properties, see &lt;a href=&quot;perluniprops#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D&quot;&gt;&quot;Properties accessible through \p{} and \P{}&quot; in perluniprops&lt;/a&gt;, which notes all forms that have &lt;code&gt;/i&lt;/code&gt; differences. It is also possible to define your own properties. This is discussed in &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;&quot;User-Defined Character Properties&quot; in perlunicode&lt;/a&gt;.</source>
          <target state="translated">Unicodeプロパティの詳細については&lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;、perlunicodeの「Unicode文字プロパティ」を&lt;/a&gt;参照してください。可能なプロパティの完全なリストについては&lt;a href=&quot;perluniprops#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D&quot;&gt;、perlunipropsの「\ p {}および\ P {}を介してアクセスできるプロパティ」を&lt;/a&gt;参照してください。これには、 &lt;code&gt;/i&lt;/code&gt; の違いがあるすべてのフォームが記載されています。独自のプロパティを定義することもできます。これについては&lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;、perlunicodeの「ユーザー定義の文字プロパティ」で説明されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2b7ea18856481cbfb2fbce20aa82b169672d93cb" translate="yes" xml:space="preserve">
          <source>For more details on Unicode properties, see &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;Unicode Character Properties in perlunicode&lt;/a&gt;; for a complete list of possible properties, see &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;Properties accessible through \p{} and \P{} in perluniprops&lt;/a&gt;, which notes all forms that have &lt;code&gt;/i&lt;/code&gt; differences. It is also possible to define your own properties. This is discussed in &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;User-Defined Character Properties in perlunicode&lt;/a&gt;.</source>
          <target state="translated">Unicodeプロパティの詳細については&lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;、perlunicodeのUnicode文字プロパティを&lt;/a&gt;参照してください。可能なプロパティの完全なリストについては&lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;、perlunipropsの\ p {}および\ P {}を介してアクセス&lt;/a&gt;可能なプロパティを参照してください。これは、 &lt;code&gt;/i&lt;/code&gt; の違いがあるすべてのフォームを示しています。独自のプロパティを定義することもできます。これについては&lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;、perlunicodeのユーザー定義の文字プロパティで説明してい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2cbbe4fe0a4baf76f7b9458c97576bdbd741475c" translate="yes" xml:space="preserve">
          <source>For more details on regular expression efficiency, see</source>
          <target state="translated">正規表現の効率性の詳細については</target>
        </trans-unit>
        <trans-unit id="4274c631cf855f72956e99d5e4a19f001a475568" translate="yes" xml:space="preserve">
          <source>For more details on the mechanics of skip and todo tests see &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt;.</source>
          <target state="translated">スキップテストとtodoテストの仕組みの詳細については、&lt;a href=&quot;Test::Harness&quot;&gt;Test :: Harnessを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ebe9afb005e64603315c0b4b48ed47e449ce83f7" translate="yes" xml:space="preserve">
          <source>For more details on the mechanics of skip and todo tests see &lt;a href=&quot;harness&quot;&gt;Test::Harness&lt;/a&gt;.</source>
          <target state="translated">スキップおよびToDoテストのメカニズムの詳細については、&lt;a href=&quot;harness&quot;&gt;Test :: Harnessを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7baab4b3bb4b02cd4142daf0edbd11721551241c" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlgutsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="469e4a888c0ba77bab7f897ffb8f0eff335748d6" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;code&gt;sources&lt;/code&gt; parameter in &lt;a href=&quot;TAP::Parser#new&quot;&gt;&quot;new&quot; in TAP::Parser&lt;/a&gt;, &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, and &lt;a href=&quot;TAP::Parser::IteratorFactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;TAP::Parser#new&quot;&gt;TAP :: Parser&lt;/a&gt;、&lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt;、および&lt;a href=&quot;TAP::Parser::IteratorFactory&quot;&gt;TAP :: Parser :: IteratorFactoryの&lt;/a&gt;「new」の &lt;code&gt;sources&lt;/code&gt; パラメーターを参照してください。</target>
        </trans-unit>
        <trans-unit id="f61d1799248ab35eaa772a394c6295835033e37c" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;code&gt;sources&lt;/code&gt; parameter in &lt;a href=&quot;parser#new&quot;&gt;new in TAP::Parser&lt;/a&gt;, &lt;a href=&quot;parser/source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, and &lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;parser#new&quot;&gt;TAP :: Parser&lt;/a&gt;、&lt;a href=&quot;parser/source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt;、および&lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP :: Parser :: IteratorFactoryの&lt;/a&gt;新機能の &lt;code&gt;sources&lt;/code&gt; パラメータを参照してください。</target>
        </trans-unit>
        <trans-unit id="8d792a0910cc22b1db3814d0f9e477cca4ea1652" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation and code of &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; and &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;base&quot;&gt;base&lt;/a&gt;および&lt;a href=&quot;parent&quot;&gt;parentの&lt;/a&gt;ドキュメントとコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="e28556232fac8aa9e7b56eb26466d9231a13cb3c" translate="yes" xml:space="preserve">
          <source>For more details, see the individual descriptions at &lt;code&gt;$@&lt;/code&gt; , &lt;code&gt;$!&lt;/code&gt; , &lt;code&gt;$^E&lt;/code&gt; , and &lt;code&gt;$?&lt;/code&gt; .</source>
          <target state="translated">詳細については、 &lt;code&gt;$@&lt;/code&gt; 、 &lt;code&gt;$!&lt;/code&gt; の個別の説明を参照してください。、 &lt;code&gt;$^E&lt;/code&gt; 、および &lt;code&gt;$?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43195f98b7a7681c8bfb7066caf577dd556413ed" translate="yes" xml:space="preserve">
          <source>For more details, see the individual descriptions at &lt;code&gt;$@&lt;/code&gt;, &lt;code&gt;$!&lt;/code&gt;, &lt;code&gt;$^E&lt;/code&gt;, and &lt;code&gt;$?&lt;/code&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;$@&lt;/code&gt; 、 &lt;code&gt;$!&lt;/code&gt; の個別の説明を参照してください。、 &lt;code&gt;$^E&lt;/code&gt; 、および &lt;code&gt;$?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cfca851970ab4784648ba74e553f012851bc695" translate="yes" xml:space="preserve">
          <source>For more information about case mappings see &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21&quot;&gt;http://www.unicode.org/unicode/reports/tr21&lt;/a&gt;</source>
          <target state="translated">ケースマッピングの詳細については、&lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21&quot;&gt;http：//www.unicode.org/unicode/reports/tr21を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a52fba09ce9a3f5f4483e33536b3e5c091d8d89a" translate="yes" xml:space="preserve">
          <source>For more information about case mappings see &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21/&quot;&gt;http://www.unicode.org/unicode/reports/tr21/&lt;/a&gt;</source>
          <target state="translated">ケースマッピングの詳細については、&lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21/&quot;&gt;http：//www.unicode.org/unicode/reports/tr21/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a7f733567279e64844bd80ab92f020d566ce85e" translate="yes" xml:space="preserve">
          <source>For more information about encodings--for instance, to learn what</source>
          <target state="translated">エンコーディングの詳細については、例えば</target>
        </trans-unit>
        <trans-unit id="2561ce48ee706059d4bfdc21d19fd5f166cfc40f" translate="yes" xml:space="preserve">
          <source>For more information about the portability of these functions, see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; and other available platform-specific documentation.</source>
          <target state="translated">これらの関数の移植性の詳細については、&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;およびその他の利用可能なプラットフォーム固有のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0b48a366c382047ff56f3b46da60ad7835f72b7" translate="yes" xml:space="preserve">
          <source>For more information on Pod, check out &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; and &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;.</source>
          <target state="translated">ポッドの詳細については、&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;および&lt;a href=&quot;perlpodspec&quot;&gt;perlpodspecを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="7368b700a1d6f50c9c2914d3baee02fbd55cba3c" translate="yes" xml:space="preserve">
          <source>For more information on any of these modules, please see its respective documentation.</source>
          <target state="translated">これらのモジュールの詳細については、それぞれのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dc04081d51966ff60e7c96305c9e6436b5709722" translate="yes" xml:space="preserve">
          <source>For more information on file locking, see also &lt;a href=&quot;perlopentut#File-Locking&quot;&gt;&quot;File Locking&quot; in perlopentut&lt;/a&gt; if you have it (new for 5.6).</source>
          <target state="translated">ファイルロックの詳細については&lt;a href=&quot;perlopentut#File-Locking&quot;&gt;、perlopentutの「ファイルロック」&lt;/a&gt;（5.6の新機能）も参照してください。</target>
        </trans-unit>
        <trans-unit id="416652247fb1fd02b42bcffea330cb4fb44ecfe8" translate="yes" xml:space="preserve">
          <source>For more information on file locking, see also &lt;a href=&quot;perlopentut#File-Locking&quot;&gt;File Locking in perlopentut&lt;/a&gt; if you have it (new for 5.6).</source>
          <target state="translated">ファイルロックの詳細については&lt;a href=&quot;perlopentut#File-Locking&quot;&gt;、perlopentutでのファイルロック&lt;/a&gt;も参照してください（5.6の新機能）。</target>
        </trans-unit>
        <trans-unit id="099e98950b7e5d3724fc0c2a1b6e16e56fceb5bc" translate="yes" xml:space="preserve">
          <source>For more information on output layers, see the entries for &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, and the &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; module documentation.</source>
          <target state="translated">出力層の詳細については、のエントリを参照 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; して&lt;a href=&quot;open&quot;&gt;開く&lt;/a&gt;に&lt;a href=&quot;perlfunc&quot;&gt;はperlfunc&lt;/a&gt;、と&lt;a href=&quot;perlio&quot;&gt;PerlIOを用&lt;/a&gt;モジュールのドキュメント。</target>
        </trans-unit>
        <trans-unit id="6a3aa93862f02af456639d9c1bb6fc7197d1ed97" translate="yes" xml:space="preserve">
          <source>For more information on output layers, see the entries for &lt;code&gt;binmode&lt;/code&gt; and &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, and the &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; module documentation.</source>
          <target state="translated">出力レイヤーの詳細については、 &lt;code&gt;binmode&lt;/code&gt; および&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfuncの&lt;/a&gt;エントリ、および&lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e818032a9be9224ab5cbe363750ba1600bb48228" translate="yes" xml:space="preserve">
          <source>For more information on references and blessings, consult &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">参考文献と祝福の詳細については、&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="431aa7d9ab35af3d418b933dacbc47e6d0da61aa" translate="yes" xml:space="preserve">
          <source>For more information on the Perl internals, please see the documents listed at &lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;&quot;Internals and C Language Interface&quot; in perl&lt;/a&gt;.</source>
          <target state="translated">Perl内部の詳細については&lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;、perlの「内部およびC言語インターフェース」に&lt;/a&gt;リストされているドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a3875443a1c771cfef5af62913463726b3c0dc4e" translate="yes" xml:space="preserve">
          <source>For more information on the Perl internals, please see the documents listed at &lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;Internals and C Language Interface in perl&lt;/a&gt;.</source>
          <target state="translated">Perlの内部の詳細については、Perlの内部&lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;およびC言語インターフェイスに&lt;/a&gt;リストされているドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7e1c38bc7063ae4d32b5c046d7a962931ee4b2aa" translate="yes" xml:space="preserve">
          <source>For more information on the matching &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; and substitution &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; operators, see &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;. For information on the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operation, see &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;.</source>
          <target state="translated">一致する &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; および置換 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 演算子の詳細については&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;、perlopのRegexp引用型&lt;/a&gt;演算子を参照してください。詳細については &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 操作、参照&lt;a href=&quot;functions/split&quot;&gt;分割&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b276bec7a3c0c4fcc0864a4306fc4dd42c5efa67" translate="yes" xml:space="preserve">
          <source>For more information on the matching &lt;code&gt;m//&lt;/code&gt; and substitution &lt;code&gt;s///&lt;/code&gt; operators, see &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt;. For information on the &lt;code&gt;split&lt;/code&gt; operation, see &lt;a href=&quot;perlfunc#split&quot;&gt;&quot;split&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">一致する &lt;code&gt;m//&lt;/code&gt; および置換 &lt;code&gt;s///&lt;/code&gt; 演算子の詳細については&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;、perlopの「RegexpQuote-LikeOperators」を参照してください&lt;/a&gt;。 &lt;code&gt;split&lt;/code&gt; 操作の詳細については、&lt;a href=&quot;perlfunc#split&quot;&gt;perlfuncの「split」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8cbd17a6abedda52d2cbc6d701f48221b145ef0f" translate="yes" xml:space="preserve">
          <source>For more information on these options, you can run &lt;a href=&quot;perlrun&quot;&gt;&lt;code&gt;perldoc perlrun&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのオプションの詳細については、&lt;a href=&quot;perlrun&quot;&gt; &lt;code&gt;perldoc perlrun&lt;/code&gt; &lt;/a&gt;を実行できます。</target>
        </trans-unit>
        <trans-unit id="d861195f361843be9490e2a15ea16594084c17c5" translate="yes" xml:space="preserve">
          <source>For more information on these options, you can run &lt;code&gt;perldoc perlrun&lt;/code&gt; .</source>
          <target state="translated">これらのオプションの詳細については、 &lt;code&gt;perldoc perlrun&lt;/code&gt; を実行できます。</target>
        </trans-unit>
        <trans-unit id="ae1bf8b301cb7d0e378d5bfae6b8ca1419913f8d" translate="yes" xml:space="preserve">
          <source>For more information on writing subroutines, see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">サブルーチンの作成についての詳細は、&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="54bca26b413776465d316ff152cfba7e50928bfd" translate="yes" xml:space="preserve">
          <source>For more information see &quot;man strptime&quot;, which should be on all unix systems.</source>
          <target state="translated">より詳しい情報は &quot;man strptime&quot; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e1baf9669b89021435a3869d8ee27cb001b8531d" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../perlipc&quot;&gt;perlipcを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a8c608dc66ccc771771da6fa1ec2512b26eb2f6" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipcを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f020267b66a1cdd001af710aa00960332272626" translate="yes" xml:space="preserve">
          <source>For more information, consult &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;, &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;, &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;、&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;、&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;、&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;、および&lt;a href=&quot;perlpod&quot;&gt;perlpodを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34baaca1017f55f5261393ae901ca335f5962ac3" translate="yes" xml:space="preserve">
          <source>For more information, consult &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; and &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;および&lt;a href=&quot;perlxstut&quot;&gt;perlxstutを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d20dd1c8dbc4552d5c14d5ca92e5a6e145a49a2" translate="yes" xml:space="preserve">
          <source>For more information, including instructions for other platforms such as Windows and Mac OS, read &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">WindowsやMac OSなどの他のプラットフォームの手順を含む詳細については、&lt;a href=&quot;perlrun&quot;&gt;perlrunを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79af2850ae6d9980512d9222bf617b97630cd7f6" translate="yes" xml:space="preserve">
          <source>For more information, see the SUPPORT section in the documentation available with the perldoc command.</source>
          <target state="translated">詳細については、perldoc コマンドで利用可能なドキュメントの「サポート」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1f6b2985afc24c6ba2ce53974a41c02581d47c16" translate="yes" xml:space="preserve">
          <source>For more on references see &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; and &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;</source>
          <target state="translated">参照の詳細については、&lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;および&lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="570bd0b65c4a2212785bd93937b2532931fb04d1" translate="yes" xml:space="preserve">
          <source>For more on the implications and differences between character semantics and byte semantics, see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">文字のセマンティクスとバイトのセマンティクスの意味と違いの詳細については、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8d742b8205504f2161396faa1953607094e72b61" translate="yes" xml:space="preserve">
          <source>For more on the implications, see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">影響の詳細については、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="db99609d275f010ab9ef2f1e664305363a10f9ac" translate="yes" xml:space="preserve">
          <source>For more on this, see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;および&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="272ef40c7df3b1032622640835458da768522456" translate="yes" xml:space="preserve">
          <source>For more up-to-date information, see &lt;a href=&quot;https://metacpan.org/release/ExtUtils-MakeMaker&quot;&gt;https://metacpan.org/release/ExtUtils-MakeMaker&lt;/a&gt;.</source>
          <target state="translated">最新の情報については、&lt;a href=&quot;https://metacpan.org/release/ExtUtils-MakeMaker&quot;&gt;https：//metacpan.org/release/ExtUtils-MakeMakerを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c5c2213fe58f6b3f605b58797f837f5afaedfc4" translate="yes" xml:space="preserve">
          <source>For most list operators, the check function expects all the kid ops to be present already, so calling &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; (e.g.) is not appropriate. What you want to do in that case is create an op of type &lt;code&gt;OP_LIST&lt;/code&gt;, append more children to it, and then call &lt;a href=&quot;#op_convert_list&quot;&gt;&quot;op_convert_list&quot;&lt;/a&gt;. See &lt;a href=&quot;#op_convert_list&quot;&gt;&quot;op_convert_list&quot;&lt;/a&gt; for more information.</source>
          <target state="translated">ほとんどのリスト演算子の場合、チェック関数はすべてのkid opsがすでに存在することを想定しているため、 &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; （eg）を呼び出すことは適切ではありません。その場合に実行したいのは、タイプ &lt;code&gt;OP_LIST&lt;/code&gt; のopを作成し、それにさらに子を追加してから、&lt;a href=&quot;#op_convert_list&quot;&gt;「op_convert_list」を&lt;/a&gt;呼び出すことです。詳細については、&lt;a href=&quot;#op_convert_list&quot;&gt;「op_convert_list」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc54ba1fbc7345fca3a79ce3cc6b3a13627fa07b" translate="yes" xml:space="preserve">
          <source>For most list operators, the check function expects all the kid ops to be present already, so calling &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; (e.g.) is not appropriate. What you want to do in that case is create an op of type OP_LIST, append more children to it, and then call &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;. See &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt; for more information.</source>
          <target state="translated">ほとんどのリスト演算子では、チェック関数はすべての子演算がすでに存在していることを &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; ため、newLISTOP（OP_JOIN、...）（eg）を呼び出すことは適切ではありません。その場合に行うことは、OP_LISTタイプのopを作成し、それに子を追加してから、&lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;を呼び出すことです。詳細については、&lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="174a0691ef8f586967e685261a60f6b9e856ffab" translate="yes" xml:space="preserve">
          <source>For most purposes, access to Unicode properties from the Perl core is through regular expression matches, as described in the next section. For some special purposes, and to access the properties that are not suitable for regular expression matching, all the Unicode character properties that Perl handles are accessible via the standard &lt;a href=&quot;Unicode::UCD&quot;&gt;Unicode::UCD&lt;/a&gt; module, as described in the section &lt;a href=&quot;#Properties-accessible-through-Unicode%3A%3AUCD&quot;&gt;&quot;Properties accessible through Unicode::UCD&quot;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、PerlコアからUnicodeプロパティにアクセスするには、次のセクションで説明するように、正規表現の一致を使用します。いくつかの特別な目的のために、そして正規表現のマッチングに適さないプロパティにアクセスするために、Perlが処理するすべてのUnicode文字プロパティは、&lt;a href=&quot;#Properties-accessible-through-Unicode%3A%3AUCD&quot;&gt;「Unicode ::を通じてアクセス可能なプロパティ」&lt;/a&gt;のセクションで説明されているように、標準の&lt;a href=&quot;Unicode::UCD&quot;&gt;Unicode :: UCD&lt;/a&gt;モジュールを介してアクセスできます。 UCD」。</target>
        </trans-unit>
        <trans-unit id="641019bad56b8716009f9130458dd08e4eb5dd36" translate="yes" xml:space="preserve">
          <source>For most purposes, access to Unicode properties from the Perl core is through regular expression matches, as described in the next section. For some special purposes, and to access the properties that are not suitable for regular expression matching, all the Unicode character properties that Perl handles are accessible via the standard &lt;a href=&quot;unicode/ucd&quot;&gt;Unicode::UCD&lt;/a&gt; module, as described in the section &lt;a href=&quot;#Properties-accessible-through-Unicode%3a%3aUCD&quot;&gt;Properties accessible through Unicode::UCD&lt;/a&gt;.</source>
          <target state="translated">ほとんどの目的で、PerlコアからのUnicodeプロパティへのアクセスは、次のセクションで説明するように、正規表現の一致を通じて行われます。いくつかの特別な目的で、正規表現のマッチングに適さないプロパティにアクセスするために、Perlが処理するすべてのUnicode文字プロパティは、標準の&lt;a href=&quot;unicode/ucd&quot;&gt;Unicode :: UCD&lt;/a&gt;モジュールを介して&lt;a href=&quot;#Properties-accessible-through-Unicode%3a%3aUCD&quot;&gt;アクセスできます。&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d5ede1c7a0a1dfb0fe304691530ed6a243c7af0" translate="yes" xml:space="preserve">
          <source>For most use-cases the behavior described above is acceptable (this module and it's predecessor, &lt;code&gt;Compress::Zlib&lt;/code&gt; , have used it for over 10 years without an issue), but in a few very specific use-cases the amount of memory required for &lt;code&gt;$output&lt;/code&gt; can prohibitively large. For example, if the compressed data stream contains the same pattern repeated thousands of times, a relatively small compressed data stream can uncompress into hundreds of megabytes. Remember &lt;code&gt;inflate&lt;/code&gt; will keep allocating memory until</source>
          <target state="translated">ほとんどのユースケースでは上記の動作は許容されます（このモジュールとその前身である &lt;code&gt;Compress::Zlib&lt;/code&gt; は問題なく10年以上使用しています）が、いくつかの非常に特殊なユースケースでは、 &lt;code&gt;$output&lt;/code&gt; は非常に大きくなる可能性があります。たとえば、圧縮データストリームに同じパターンが数千回繰り返されている場合、比較的小さな圧縮データストリームを数百メガバイトに解凍できます。覚えておいてください &lt;code&gt;inflate&lt;/code&gt; までメモリを割り当てていきます</target>
        </trans-unit>
        <trans-unit id="2d5502c5fd5a638c1b799b2700b5b6ce6e1659e5" translate="yes" xml:space="preserve">
          <source>For most use-cases the behavior described above is acceptable (this module and it's predecessor, &lt;code&gt;Compress::Zlib&lt;/code&gt;, have used it for over 10 years without an issue), but in a few very specific use-cases the amount of memory required for &lt;code&gt;$output&lt;/code&gt; can prohibitively large. For example, if the compressed data stream contains the same pattern repeated thousands of times, a relatively small compressed data stream can uncompress into hundreds of megabytes. Remember &lt;code&gt;inflate&lt;/code&gt; will keep allocating memory until</source>
          <target state="translated">ほとんどのユースケースでは、上記の動作は許容されます（このモジュールとその前身である &lt;code&gt;Compress::Zlib&lt;/code&gt; は、問題なく10年以上使用しています）が、いくつかの非常に特殊なユースケースでは、 &lt;code&gt;$output&lt;/code&gt; は非常に大きくなる可能性があります。たとえば、圧縮されたデータストリームに同じパターンが数千回繰り返されている場合、比較的小さい圧縮されたデータストリームは数百メガバイトに解凍できます。 &lt;code&gt;inflate&lt;/code&gt; はメモリを割り当て続けることを忘れないでください</target>
        </trans-unit>
        <trans-unit id="a47940c15fef4c6625772cdc1427a983c441c3c1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Bzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Bzip2オブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="23920b654dfbc8ce7c84aac3c7565dfb2fb05fe1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Bzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Compress :: Bzip2オブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="adee5e79d5d3d779e5af1d2aba42639fd752741d" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Deflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Deflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="e15daa2a40308e79a81902d846c186f3f2067215" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Deflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Compress :: Deflateオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ddb04253a83c249a7e883f277739dcda8e2faecb" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Gzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、このメソッドは、IO :: Compress :: Gzipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="c6d04c166c9e6e72d327a3c840b77f5b2e4b1ae1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Gzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Compress :: Gzipオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="4db349e7c47820dab5028b29921ade4c7bb32501" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::RawDeflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、このメソッドはIO :: Compress :: RawDeflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄された場合に自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="baa56c209aac193c41f95b5361ae9970d3d7f083" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::RawDeflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Compress :: RawDeflateオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="8861e38ef9ff01891126a94c9ec532f08b55ad77" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Zip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Zipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="367e53e06bed971be41757d70791ad740a85baed" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Zip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Compress :: Zipオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="1a5826884fe147f7ccc4745dc4c0dec56e5a8942" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: AnyInflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="fd642bda7c5d91d5bc02e48e947d99173d593c25" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: AnyInflateオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="000b46928e33aec75c1330e3f6828a697055beec" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: AnyUncompressオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="cba38ddada34f81a67038fe6dd4acb03eaea39a3" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: AnyUncompressオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="621ae7f532cdf338357018b0efb4e6b8937e23cb" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Bunzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: Bunzip2オブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="3446ab8bcaaa712ad41f49782d753286cc276fcd" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Bunzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: Bunzip2オブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="5ebe07c14944aa0924ad00011dbfa6cf95fcffd3" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Gunzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、このメソッドは、IO :: Uncompress :: Gunzipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄された場合に自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="275f6e1ad617775b3c8728d5af5f36ef5b729eb6" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Gunzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: Gunzipオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="02829219c19fdbb8502226558182b539540ef773" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Inflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: Inflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="d8ee77164ca078ffe6c117c5a7fa04d8e2ef6578" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Inflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: Inflateオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="39bac215cf7e9ee43af43133ee6260672e9eebea" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::RawInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、このメソッドは、IO :: Uncompress :: RawInflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="bc27ba9bbe2cb5e4415d0f873bb53f1db0fe9c59" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::RawInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: RawInflateオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="a0e9e60d5738504f44dbe5db42b611750817984b" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Unzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: Unzipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="70164b405281cf49575d2ca4a4085fe8b83f457e" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Unzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">Perlのほとんどのバージョンでは、IO :: Uncompress :: Unzipオブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。このような場合、 &lt;code&gt;close&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムが終了するときにすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ebd39cf1198af939c9fe739680f896002c72f24d" translate="yes" xml:space="preserve">
          <source>For much more detail on using git with the Perl repository, please see &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt;.</source>
          <target state="translated">Perlリポジトリでgitを使用する方法の詳細については、&lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="871377c6816e2c1ddeb868000c8473d11d71e038" translate="yes" xml:space="preserve">
          <source>For multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module &lt;a href=&quot;freezethaw&quot;&gt;FreezeThaw&lt;/a&gt;:</source>
          <target state="translated">マルチレベル構造の場合、このようなアプローチを使用することをお勧めします。それはCPANモジュール&lt;a href=&quot;freezethaw&quot;&gt;FreezeThawを&lt;/a&gt;使用します：</target>
        </trans-unit>
        <trans-unit id="dd2242f4fd4838cfce99d23a663a50e2e5c87ecf" translate="yes" xml:space="preserve">
          <source>For multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt;:</source>
          <target state="translated">マルチレベル構造の場合、このようなアプローチを使用することをお勧めします。CPANモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThawを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4aaeeb42eefa8440218480ef685b6c057da2ebd8" translate="yes" xml:space="preserve">
          <source>For native multibyte encodings (either fixed or variable length), the current implementation of the regular expressions may introduce recoding errors for regular expression literals longer than 127 bytes.</source>
          <target state="translated">ネイティブのマルチバイトエンコーディング (固定長または可変長のいずれか)では、現在の正規表現の実装では、127 バイトより長い正規表現リテラルに対して再コーディングエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="db0739f14c22b332e1c9ef31d85863c468a6ec30" translate="yes" xml:space="preserve">
          <source>For natural language processing (so that, for example, apostrophes are included in words), use instead &lt;code&gt;\b{wb}&lt;/code&gt;</source>
          <target state="translated">自然言語処理の場合（たとえば、アポストロフィが単語に含まれるようにするため）、代わりに &lt;code&gt;\b{wb}&lt;/code&gt; 使用します</target>
        </trans-unit>
        <trans-unit id="34e4b4c1e84670ba2445432138762ce8b98922fa" translate="yes" xml:space="preserve">
          <source>For negative numbers in base see also &lt;a href=&quot;#brsft()&quot;&gt;brsft&lt;/a&gt;.</source>
          <target state="translated">基数の負の数については、&lt;a href=&quot;#brsft()&quot;&gt;brsft&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="7ca7fcdf10732e7f7d3b2022b3a393eb950297d5" translate="yes" xml:space="preserve">
          <source>For now it's static, but it may be exposed to the API in the future.</source>
          <target state="translated">今のところは静的ですが、将来的にはAPIに公開されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="11739ff4ce5853fede0de1666a77252b4cca5762" translate="yes" xml:space="preserve">
          <source>For numbers in the range 160 (0x00A0) to 255 (0x00FF), this maps from the character code for a Latin-1 character (like 233 for lowercase e-acute) to the US-ASCII character that best aproximates it (like &quot;e&quot;). You may find this useful if you are rendering POD in a format that you think deals well only with US-ASCII characters.</source>
          <target state="translated">160 (0x00A0)から 255 (0x00FF)の範囲の数値について、これは Latin-1 文字の文字コード (小文字の e-acute の 233 のようなもの)から、それに最も近い US-ASCII 文字 (&quot;e&quot; のようなもの)にマップされます。これは、US-ASCII文字のみを扱うフォーマットでPODをレンダリングする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="0418167b8295aaa112b520d273cbff7734fb4037" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; . For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt; ), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">数値変換の場合、サイズを指定して、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; を使用して数値を解釈できます。整数変換（ &lt;code&gt;d u o x X b i D U O&lt;/code&gt; ）の場合、数値は通常、プラットフォームのデフォルトの整数サイズ（通常32ビットまたは64ビット）と見なされますが、サポートされているように、これをオーバーライドして、標準Cタイプの代わりに使用できますPerlのビルドに使用されるコンパイラーによる：</target>
        </trans-unit>
        <trans-unit id="3f073c1258e51f971ca716359b2a89c0272776c0" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; . For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt; ), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">数値変換の場合、サイズを指定して、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; を使用して数値を解釈できます。整数変換（ &lt;code&gt;d u o x X b i D U O&lt;/code&gt; ）の場合、数値は通常、プラットフォームのデフォルトの整数サイズ（通常32ビットまたは64ビット）と見なされますが、サポートされているように、これをオーバーライドして、標準Cタイプの代わりに使用できますPerlのビルドに使用されるコンパイラーによる：</target>
        </trans-unit>
        <trans-unit id="ec5571b634b4513a4a26946f73f0f29ad97efd26" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, or &lt;code&gt;ll&lt;/code&gt;. For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt;), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">数値変換の場合、サイズを指定して、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;q&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; を使用して数値を解釈できます。整数変換（ &lt;code&gt;d u o x X b i D U O&lt;/code&gt; ）の場合、数値は通常、プラットフォームのデフォルトの整数サイズ（通常は32ビットまたは64ビット）であると見なされますが、これをオーバーライドして、サポートされている標準のCタイプの1つを代わりに使用できます。 Perlの構築に使用されるコンパイラによる：</target>
        </trans-unit>
        <trans-unit id="59b31b25c9f5d592cd415ce42cd1cd5b58c1c703" translate="yes" xml:space="preserve">
          <source>For objects, a method, &lt;code&gt;CARP_TRACE&lt;/code&gt; , will be called, if it exists. If this method doesn't exist, or it recurses into &lt;code&gt;Carp&lt;/code&gt; , or it otherwise throws an exception, this is skipped, and Carp moves on to the next option, otherwise checking stops and the string returned is used. It is recommended that the object's type is part of the string to make debugging easier.</source>
          <target state="translated">オブジェクトの場合、メソッド &lt;code&gt;CARP_TRACE&lt;/code&gt; が存在する場合は呼び出されます。このメソッドが存在しない場合、または &lt;code&gt;Carp&lt;/code&gt; に再帰する場合、または例外がスローされる場合、これはスキップされ、Carpは次のオプションに進みます。それ以外の場合、チェックは停止し、返された文字列が使用されます。デバッグを容易にするために、オブジェクトのタイプを文字列の一部にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="26453edd50c7fcaafa3a553e9286fd74823a7eec" translate="yes" xml:space="preserve">
          <source>For objects, a method, &lt;code&gt;CARP_TRACE&lt;/code&gt;, will be called, if it exists. If this method doesn't exist, or it recurses into &lt;code&gt;Carp&lt;/code&gt;, or it otherwise throws an exception, this is skipped, and Carp moves on to the next option, otherwise checking stops and the string returned is used. It is recommended that the object's type is part of the string to make debugging easier.</source>
          <target state="translated">オブジェクトの場合、メソッド &lt;code&gt;CARP_TRACE&lt;/code&gt; が存在する場合は、それが呼び出されます。このメソッドが存在しない場合、 &lt;code&gt;Carp&lt;/code&gt; に再帰する場合、または例外をスローする場合、これはスキップされ、Carpは次のオプションに進みます。それ以外の場合、チェックは停止し、返された文字列が使用されます。デバッグを容易にするために、オブジェクトのタイプを文字列の一部にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="34e2a99f6a2eb99d86babea525e84b0d07848c0f" translate="yes" xml:space="preserve">
          <source>For old code and interim backwards compatibility, the &lt;code&gt;Thread&lt;/code&gt; module has been reworked to function as a frontend for the new interpreter threads (</source>
          <target state="translated">古いコードと暫定的な下位互換性のために、新しいインタープリタースレッドのフロントエンドとして機能するように &lt;code&gt;Thread&lt;/code&gt; モジュールが作り直されました（</target>
        </trans-unit>
        <trans-unit id="1d30b9e2796b9b0c84e9a075b6da3004ad758128" translate="yes" xml:space="preserve">
          <source>For opening pipes, Perl offers the option to call &lt;code&gt;open&lt;/code&gt; with a list comprising the desired command and all its own arguments as separate elements, rather than combining them into a single string as in the examples above. For instance, we could have phrased the &lt;code&gt;open&lt;/code&gt; call in the first example like this:</source>
          <target state="translated">パイプを開くために、Perlは、上記の例のように単一の文字列に結合するのではなく、目的のコマンドとすべての独自の引数を個別の要素として含むリストで &lt;code&gt;open&lt;/code&gt; を呼び出すオプションを提供します。たとえば、最初の例では、次のように &lt;code&gt;open&lt;/code&gt; を表現できます。</target>
        </trans-unit>
        <trans-unit id="8222532b9dd6e1e6aafb484598b94575546178ff" translate="yes" xml:space="preserve">
          <source>For operations on %ENV entries based on logical names or DCL symbols, the key string is treated as if it were entirely uppercase, regardless of the case actually specified in the Perl expression. Entries in %ENV based on the CRTL's environ array preserve the case of the key string when stored, and lookups are case sensitive.</source>
          <target state="translated">論理名または DCL シンボルに基づく %ENV エントリに対する操作では、Perl 式で実際に指定された大文字小文字に関係なく、キー文字列は完全に大文字であるかのように扱われます。CRTL の environ 配列に基づく %ENV のエントリは、格納時にキー文字列の大文字小文字を保持し、検索は大文字小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="54678b0f46a42f75ba9339772dde807022e3f850" translate="yes" xml:space="preserve">
          <source>For options that take list or hash values, it is necessary to indicate this by appending an &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; sign after the type:</source>
          <target state="translated">リストまたはハッシュ値を取るオプションの場合、タイプの後に &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;%&lt;/code&gt; 記号を追加してこれを示す必要があります。</target>
        </trans-unit>
        <trans-unit id="ed4fe0865e6bc07b5c076581d59bd74aedec7133" translate="yes" xml:space="preserve">
          <source>For options that take values it must be specified whether the option value is required or not, and what kind of value the option expects.</source>
          <target state="translated">値を取るオプシ ョ ンの場合は、 オプシ ョ ン値が必須か否か、 そしてそのオプシ ョ ンが期待する値の種類を指定する必要があ り ます。</target>
        </trans-unit>
        <trans-unit id="14b3ef641443710b672e456ac43669f979bd2658" translate="yes" xml:space="preserve">
          <source>For ordinary files you can also use the &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">通常のファイルの場合は、 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 関数も使用できます。</target>
        </trans-unit>
        <trans-unit id="d8ab6488a5756e1204e128aef5306b0dcff571d8" translate="yes" xml:space="preserve">
          <source>For ordinary files you can also use the &lt;code&gt;read&lt;/code&gt; function.</source>
          <target state="translated">通常のファイルの場合は、 &lt;code&gt;read&lt;/code&gt; 機能を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="18923d06b00ab1b78a669fe54fca08f48f38928d" translate="yes" xml:space="preserve">
          <source>For other Perl-based conversion options see the &lt;code&gt;Convert::*&lt;/code&gt; modules on CPAN.</source>
          <target state="translated">その他のPerlベースの変換オプションについては、CPANの &lt;code&gt;Convert::*&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="ecf4231003ccccf0ccb3fdcd4e5a986799fbca1f" translate="yes" xml:space="preserve">
          <source>For other filetypes, like &lt;code&gt;chardevs&lt;/code&gt; and &lt;code&gt;blockdevs&lt;/code&gt; we'll warn that the extraction of this particular item didn't work.</source>
          <target state="translated">&lt;code&gt;chardevs&lt;/code&gt; や &lt;code&gt;blockdevs&lt;/code&gt; などの他のファイルタイプの場合、この特定のアイテムの抽出が機能しなかったことを警告します。</target>
        </trans-unit>
        <trans-unit id="e33d3f5c65b6dd681271a18e601e812a5a318019" translate="yes" xml:space="preserve">
          <source>For other initial values that are strings that do follow the rules of the magical increment, the corresponding sequence will be returned.</source>
          <target state="translated">その他の初期値で、魔法の増分の規則に従う文字列の場合は、対応するシーケンスが返されます。</target>
        </trans-unit>
        <trans-unit id="a61d39f00af378aaa32b4a9a3dedd635bdcf3408" translate="yes" xml:space="preserve">
          <source>For other locales, starting in Perl 5.16, you can specify</source>
          <target state="translated">その他のロケールについては、Perl 5.16 以降では</target>
        </trans-unit>
        <trans-unit id="55153fcdbe0c92eb8adc0abec175ecdf7f05a3ca" translate="yes" xml:space="preserve">
          <source>For other termination statuses, the severity portion of the subprocess's exit status is used: if the severity was success or informational, these bits are all 0; if the severity was warning, they contain a value of 1; if the severity was error or fatal error, they contain the actual severity bits, which turns out to be a value of 2 for error and 4 for severe_error. Fatal is another term for the severe_error status.</source>
          <target state="translated">重大度が成功または情報的なものであれば、これらのビットはすべて0であり、重大度が警告であれば1の値を含み、重大度がエラーまたは致命的なエラーであれば、これらのビットは実際の重大度ビットを含み、エラーであれば2の値、severeit_errorであれば4の値となる。Fatal は severe_error ステータスの別の用語です。</target>
        </trans-unit>
        <trans-unit id="d4996d7f48439f801246348adf91aaf2ab904b39" translate="yes" xml:space="preserve">
          <source>For our &lt;code&gt;File::MP3&lt;/code&gt; class, we can check to make sure that the path we're given ends with &quot;.mp3&quot;:</source>
          <target state="translated">私たちのために &lt;code&gt;File::MP3&lt;/code&gt; クラスは、我々はパスが、私たちが「.MP3&quot;に端を与えていることを確認するためにチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="d9c9ebb36f114d2e29800b2f2a876e7e2d770bfb" translate="yes" xml:space="preserve">
          <source>For our File::MP3 class, we can check to make sure that the path we're given ends with &quot;.mp3&quot;:</source>
          <target state="translated">File::MP3クラスでは、与えられたパスが&quot;.mp3 &quot;で終わることを確認することができます。</target>
        </trans-unit>
        <trans-unit id="90aad3aef5b3704234dd7e152135fa69067f60cd" translate="yes" xml:space="preserve">
          <source>For our example, we want to be able to emit debugging info to help in tracing during development. We keep also one convenience function around internally to help print out warnings; whowasi() returns the function name that calls it.</source>
          <target state="translated">この例では、開発中のトレースに役立つデバッグ情報を出力できるようにしたいと考えています。また、警告を出力するのに役立つ便利な関数を内部に1つ用意しています。</target>
        </trans-unit>
        <trans-unit id="aa18cdabf84f58c0c8a60b20d7ee4d847450d128" translate="yes" xml:space="preserve">
          <source>For our example, we're using a real hash so we'll do just the simple thing, but we'll have to go through the LIST field indirectly.</source>
          <target state="translated">私たちの例では、実際のハッシュを使っているので、単純なことをするだけですが、間接的にLISTフィールドを経由しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a68ea5110cc4475ea5587d223e48012123b172f2" translate="yes" xml:space="preserve">
          <source>For packing floating point numbers you have the choice between the pack codes &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; . &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; pack into (or unpack from) single-precision or double-precision representation as it is provided by your system. If your systems supports it, &lt;code&gt;D&lt;/code&gt; can be used to pack and unpack (&lt;code&gt;long double&lt;/code&gt; ) values, which can offer even more resolution than &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt; . &lt;b&gt;Note that there are different long double formats.&lt;/b&gt;</source>
          <target state="translated">浮動小数点数をパックするには、パックコード &lt;code&gt;f&lt;/code&gt; 、 &lt;code&gt;d&lt;/code&gt; 、 &lt;code&gt;F&lt;/code&gt; 、 &lt;code&gt;D&lt;/code&gt; から選択できます。 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;d&lt;/code&gt; は、システムで提供される単精度または倍精度表現にパック（またはアンパック）します。お使いのシステムでサポートそれならば、 &lt;code&gt;D&lt;/code&gt; は（パックとアンパックするために使用することができ &lt;code&gt;long double&lt;/code&gt; よりもさらに解像度を提供することができます）の値、 &lt;code&gt;f&lt;/code&gt; または &lt;code&gt;d&lt;/code&gt; 。&lt;b&gt;異なるlong doubleフォーマットがあることに注意してください。&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="76806bda95f71c07efe4c6d78618b7e6da5cf2c5" translate="yes" xml:space="preserve">
          <source>For packing floating point numbers you have the choice between the pack codes &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; pack into (or unpack from) single-precision or double-precision representation as it is provided by your system. If your systems supports it, &lt;code&gt;D&lt;/code&gt; can be used to pack and unpack (&lt;code&gt;long double&lt;/code&gt;) values, which can offer even more resolution than &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt;. &lt;b&gt;Note that there are different long double formats.&lt;/b&gt;</source>
          <target state="translated">浮動小数点数をパックする &lt;code&gt;f&lt;/code&gt; 、パックコードf、 &lt;code&gt;d&lt;/code&gt; 、 &lt;code&gt;F&lt;/code&gt; 、および &lt;code&gt;D&lt;/code&gt; から選択できます。 &lt;code&gt;f&lt;/code&gt; および &lt;code&gt;d&lt;/code&gt; は、システムによって提供される単精度または倍精度表現にパック（またはアンパック）します。システムがそれをサポートしている場合、 &lt;code&gt;D&lt;/code&gt; を使用して（ &lt;code&gt;long double&lt;/code&gt; ）値をパックおよびアンパックできます。これにより、 &lt;code&gt;f&lt;/code&gt; または &lt;code&gt;d&lt;/code&gt; よりもさらに高い解像度を提供できます。&lt;b&gt;異なるlongdouble形式があることに注意してください。&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8468b6c8bdf361d5c232f81d9e06bb0f3375ac0a" translate="yes" xml:space="preserve">
          <source>For parsing or generating CSV, though, using &lt;a href=&quot;Text::CSV&quot;&gt;Text::CSV&lt;/a&gt; rather than implementing it yourself is highly recommended; you'll save yourself odd bugs popping up later by just using code which has already been tried and tested in production for years.</source>
          <target state="translated">ただし、CSVの解析または生成には、自分で実装するのではなく、&lt;a href=&quot;Text::CSV&quot;&gt;Text :: CSV&lt;/a&gt;を使用することを強くお勧めします。何年にもわたって本番環境ですでに試行およびテストされているコードを使用するだけで、後で発生する奇妙なバグを回避できます。</target>
        </trans-unit>
        <trans-unit id="66df4e6482b9f11564ff3b3f20d96a2cc85b3ceb" translate="yes" xml:space="preserve">
          <source>For parsing or generating CSV, though, using &lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text::CSV&lt;/a&gt; rather than implementing it yourself is highly recommended; you'll save yourself odd bugs popping up later by just using code which has already been tried and tested in production for years.</source>
          <target state="translated">ただし、CSVを解析または生成する場合は、自分で実装するのではなく、&lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text :: CSV&lt;/a&gt;を使用することを強くお勧めします。何年もの間、本番環境ですでに試され、テストされているコードを使用するだけで、後で現れる奇妙なバグを保存できます。</target>
        </trans-unit>
        <trans-unit id="f69cf29834ba534ca455db4358ea32d4f29a81b1" translate="yes" xml:space="preserve">
          <source>For platforms that do not support the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;&lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt; symbol (for example, Windows NT) it is assumed that ``chown() giveaway'' is possible and the recursive test is performed.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIX &lt;/a&gt; &lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt; シンボルをサポートしていないプラットフォーム（Windows NTなど）の場合、「chown（）プレゼント」が可能であると想定され、再帰テストが実行されます。</target>
        </trans-unit>
        <trans-unit id="6ee0891ac5c639e853c5a4e5edc84af67afe5f45" translate="yes" xml:space="preserve">
          <source>For platforms that do not support the L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="6ef063b83223c50f839dae38551b2b8ac38cb283" translate="yes" xml:space="preserve">
          <source>For portability do not assume that the result of inet_aton() is 32 bits wide, in other words, that it would contain only the IPv4 address in network order.</source>
          <target state="translated">移植性のために、inet_aton()の結果が32ビット幅であると仮定してはいけません、言い換えれば、ネットワーク順にIPv4アドレスだけが含まれることになります。</target>
        </trans-unit>
        <trans-unit id="a2f756b0930efbec9e5ee4bb36d81103dee350c4" translate="yes" xml:space="preserve">
          <source>For portability, when using features that may not be implemented on every machine, test the construct in an eval to see if it fails. If you know what version or patchlevel a particular feature was implemented, you can test &lt;code&gt;$]&lt;/code&gt; (&lt;code&gt;$PERL_VERSION&lt;/code&gt; in &lt;code&gt;English&lt;/code&gt; ) to see if it will be there. The &lt;code&gt;Config&lt;/code&gt; module will also let you interrogate values determined by the &lt;b&gt;Configure&lt;/b&gt; program when Perl was installed.</source>
          <target state="translated">移植性のために、すべてのマシンに実装されていない可能性がある機能を使用する場合は、evalで構成をテストして、失敗するかどうかを確認します。あなたはどのバージョンを知っているか、または特定の機能が実装されたパッチレベルの場合は、テストすることができます &lt;code&gt;$]&lt;/code&gt; （ &lt;code&gt;$PERL_VERSION&lt;/code&gt; で &lt;code&gt;English&lt;/code&gt; それはあるでしょうかどうかを確認するため）。 &lt;code&gt;Config&lt;/code&gt; モジュールはまた、によって決定された値問い合わせるようになる&lt;b&gt;設定]&lt;/b&gt;のPerlをインストールしたときにプログラムを。</target>
        </trans-unit>
        <trans-unit id="667a732c0cd1a0f9b4ba34a10fae7dbe30a5b2ca" translate="yes" xml:space="preserve">
          <source>For portability, when using features that may not be implemented on every machine, test the construct in an eval to see if it fails. If you know what version or patchlevel a particular feature was implemented, you can test &lt;code&gt;$]&lt;/code&gt; (&lt;code&gt;$PERL_VERSION&lt;/code&gt; in &lt;code&gt;English&lt;/code&gt;) to see if it will be there. The &lt;code&gt;Config&lt;/code&gt; module will also let you interrogate values determined by the &lt;b&gt;Configure&lt;/b&gt; program when Perl was installed.</source>
          <target state="translated">移植性のために、すべてのマシンに実装されていない可能性のある機能を使用する場合は、evalで構成をテストして、失敗するかどうかを確認してください。あなたはどのバージョンを知っているか、または特定の機能が実装されたパッチレベルの場合は、テストすることができます &lt;code&gt;$]&lt;/code&gt; （ &lt;code&gt;$PERL_VERSION&lt;/code&gt; で &lt;code&gt;English&lt;/code&gt; それはあるでしょうかどうかを確認するため）。 &lt;code&gt;Config&lt;/code&gt; モジュールはまた、によって決定された値問い合わせるようになる&lt;b&gt;設定]&lt;/b&gt;のPerlをインストールしたときにプログラムを。</target>
        </trans-unit>
        <trans-unit id="2535552b980c53cc7ba860a8dd5bb061008869b5" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">移植可能にパックされた整数の場合は、 &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; の形式を使用するか、以下で説明する &lt;code&gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子を使用します。&lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f894cb82cd4f998730f7156c0afde9903978c5fb" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">移植可能にパックされた整数の場合は、 &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; の形式を使用するか、以下で説明する &lt;code&gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子を使用します。&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="5c4dbdd091869e50c1e23fd14ebbd4aa84675699" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt;, and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">移植可能にパックされた整数の場合は、 &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; の形式を使用するか、すぐ下で説明する &lt;code&gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子を使用します。&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="eac5fbdab915b3ad8a68aba0529c78d00fad23fe" translate="yes" xml:space="preserve">
          <source>For programs running in a terminal window (called a &quot;Console&quot; on some systems) the &quot;locale&quot; encoding is usually a good choice for what to expect as input and output. Some systems allows us to query the encoding set for the terminal and &lt;code&gt;Encode::Locale&lt;/code&gt; will do that if available and make these encodings known under the &lt;code&gt;Encode&lt;/code&gt; aliases &quot;console_in&quot; and &quot;console_out&quot;. For systems where we can't determine the terminal encoding these will be aliased as the same encoding as &quot;locale&quot;. The advice is to use &quot;console_in&quot; for input known to come from the terminal and &quot;console_out&quot; for output to the terminal.</source>
          <target state="translated">ターミナルウィンドウ（一部のシステムでは「コンソール」と呼ばれます）で実行されているプログラムの場合、通常、「ロケール」エンコーディングが入力および出力として期待されるものに適しています。一部のシステムでは、端末のエンコーディングセットをクエリでき、 &lt;code&gt;Encode::Locale&lt;/code&gt; は、利用可能な場合はそれを実行し、これらのエンコーディングを &lt;code&gt;Encode&lt;/code&gt; エイリアス「console_in」および「console_out」で認識します。ターミナルエンコーディングを特定できないシステムの場合、これらは「ロケール」と同じエンコーディングとしてエイリアスされます。アドバイスは、端末からの入力に「console_in」を使用し、端末への出力に「console_out」を使用することです。</target>
        </trans-unit>
        <trans-unit id="66b858675dca7e5306d860cc596a9c8b3613be75" translate="yes" xml:space="preserve">
          <source>For purposes for forward compatibility, any result which does not match the following grammar is currently referred to as &lt;a href=&quot;TAP::Parser::Result::Unknown&quot;&gt;TAP::Parser::Result::Unknown&lt;/a&gt;. It is</source>
          <target state="translated">上位互換性のために、次の文法と一致しない結果は現在、&lt;a href=&quot;TAP::Parser::Result::Unknown&quot;&gt;TAP :: Parser :: Result :: Unknown&lt;/a&gt;と呼ばれています。です</target>
        </trans-unit>
        <trans-unit id="b632d6b9c2c212334172ecdd5444e30d59c76fb4" translate="yes" xml:space="preserve">
          <source>For purposes for forward compatibility, any result which does not match the following grammar is currently referred to as &lt;a href=&quot;result/unknown&quot;&gt;TAP::Parser::Result::Unknown&lt;/a&gt;. It is</source>
          <target state="translated">上位互換性を保つために、次の文法に一致しない結果は、現在&lt;a href=&quot;result/unknown&quot;&gt;TAP :: Parser :: Result :: Unknown&lt;/a&gt;と呼ばれています。です</target>
        </trans-unit>
        <trans-unit id="abd99590407faa93008cdde9678d67dea3d2be33" translate="yes" xml:space="preserve">
          <source>For purposes of Pod processing, there are four types of paragraphs in a Pod block:</source>
          <target state="translated">Pod処理の目的上、Podブロックには4種類の段落があります。</target>
        </trans-unit>
        <trans-unit id="4cfab22b3264f8ba00ba2bb0d1b88a7edb82233a" translate="yes" xml:space="preserve">
          <source>For pushing a new context, the two basic functions are &lt;code&gt;cx = cx_pushblock()&lt;/code&gt;, which pushes a new basic context block and returns its address, and a family of similar functions with names like &lt;code&gt;cx_pushsub(cx)&lt;/code&gt; which populate the additional type-dependent fields in the &lt;code&gt;cx&lt;/code&gt; struct. Note that &lt;code&gt;CXt_NULL&lt;/code&gt; and &lt;code&gt;CXt_BLOCK&lt;/code&gt; don't have their own push functions, as they don't store any data beyond that pushed by &lt;code&gt;cx_pushblock&lt;/code&gt;.</source>
          <target state="translated">新しいコンテキストをプッシュする場合、2つの基本関数は &lt;code&gt;cx = cx_pushblock()&lt;/code&gt; 、これは新しい基本コンテキストブロックをプッシュしてそのアドレスを返します。また、 &lt;code&gt;cx_pushsub(cx)&lt;/code&gt; のような名前を持つ同様の関数のファミリーは、追加のタイプ依存フィールドに入力します。中 &lt;code&gt;cx&lt;/code&gt; 構造体。注こと &lt;code&gt;CXt_NULL&lt;/code&gt; と &lt;code&gt;CXt_BLOCK&lt;/code&gt; は、彼らがに押されたことを越えたデータ保存しないように、自分のプッシュ機能を持っていない &lt;code&gt;cx_pushblock&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7c27afbc45a634cfd67eaae651454448b0cf48fa" translate="yes" xml:space="preserve">
          <source>For reading RFC 1950 files/buffers, see the companion module &lt;a href=&quot;../uncompress/inflate&quot;&gt;IO::Uncompress::Inflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1950ファイル/バッファの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/inflate&quot;&gt;IO :: Uncompress :: Inflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81233e3e4b4e07b503d46d77599e60a27d6b9764" translate="yes" xml:space="preserve">
          <source>For reading RFC 1950 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Inflate&quot;&gt;IO::Uncompress::Inflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1950ファイル/バッファの読み取りについては、コンパニオンモジュール&lt;a href=&quot;IO::Uncompress::Inflate&quot;&gt;IO :: Uncompress :: Inflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a855ff5b11238f17f076a8b7ebdcff40a540c026" translate="yes" xml:space="preserve">
          <source>For reading RFC 1951 files/buffers, see the companion module &lt;a href=&quot;../uncompress/rawinflate&quot;&gt;IO::Uncompress::RawInflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1951ファイル/バッファの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/rawinflate&quot;&gt;IO :: Uncompress :: RawInflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4d1b21fd558b78ea5b1f88a43871d753a2243687" translate="yes" xml:space="preserve">
          <source>For reading RFC 1951 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::RawInflate&quot;&gt;IO::Uncompress::RawInflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1951ファイル/バッファの読み取りについては、コンパニオンモジュール&lt;a href=&quot;IO::Uncompress::RawInflate&quot;&gt;IO :: Uncompress :: RawInflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a7c1e04df00546215699a3d4161d10f783f59e5d" translate="yes" xml:space="preserve">
          <source>For reading RFC 1952 files/buffers, see the companion module &lt;a href=&quot;../uncompress/gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt;.</source>
          <target state="translated">RFC 1952ファイル/バッファーの読み取りについては、コンパニオンモジュール&lt;a href=&quot;../uncompress/gunzip&quot;&gt;IO :: Uncompress :: Gunzipを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="25b44b61cefd3c40917300b27512ef954427d81b" translate="yes" xml:space="preserve">
          <source>For reading RFC 1952 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt;.</source>
          <target state="translated">RFC 1952ファイル/バッファの読み取りについては、コンパニオンモジュール&lt;a href=&quot;IO::Uncompress::Gunzip&quot;&gt;IO :: Uncompress :: Gunzipを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="45f2b20453bc89baeb5e50beb84ad2c8f70cd376" translate="yes" xml:space="preserve">
          <source>For reading bzip2 files/buffers, see the companion module &lt;a href=&quot;../uncompress/bunzip2&quot;&gt;IO::Uncompress::Bunzip2&lt;/a&gt;.</source>
          <target state="translated">bzip2ファイル/バッファーの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/bunzip2&quot;&gt;IO :: Uncompress :: Bunzip2を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="151dd5ef7185ab3cdaba9ea4739cd891b7f5b472" translate="yes" xml:space="preserve">
          <source>For reading bzip2 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Bunzip2&quot;&gt;IO::Uncompress::Bunzip2&lt;/a&gt;.</source>
          <target state="translated">bzip2ファイル/バッファの読み取りについては、コンパニオンモジュール&lt;a href=&quot;IO::Uncompress::Bunzip2&quot;&gt;IO :: Uncompress :: Bunzip2を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="187e155fdbfcf5fc691664f658b9590cb0a606e3" translate="yes" xml:space="preserve">
          <source>For reading zip files/buffers, see the companion module &lt;a href=&quot;../uncompress/unzip&quot;&gt;IO::Uncompress::Unzip&lt;/a&gt;.</source>
          <target state="translated">zipファイル/バッファの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/unzip&quot;&gt;IO :: Uncompress :: Unzipを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dade52555ac7af53ff05a3d6b3206e5de546f80e" translate="yes" xml:space="preserve">
          <source>For reading zip files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Unzip&quot;&gt;IO::Uncompress::Unzip&lt;/a&gt;.</source>
          <target state="translated">zipファイル/バッファの読み取りについては、コンパニオンモジュール&lt;a href=&quot;IO::Uncompress::Unzip&quot;&gt;IO :: Uncompress :: Unzipを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78564d60b33f7a43b76c98479dd836adfae1de9e" translate="yes" xml:space="preserve">
          <source>For reference &lt;code&gt;Name_hash&lt;/code&gt; in &lt;a href=&quot;#Example-1&quot;&gt;&quot;Example 1&quot;&lt;/a&gt; shows the standard implementation of a simple class &lt;code&gt;Name&lt;/code&gt; in the well-known hash based way. It also demonstrates the predictable failure to construct a common subclass &lt;code&gt;NamedFile&lt;/code&gt; of &lt;code&gt;Name&lt;/code&gt; and the class &lt;code&gt;IO::File&lt;/code&gt; (whose objects</source>
          <target state="translated">参考 &lt;code&gt;Name_hash&lt;/code&gt; 、&lt;a href=&quot;#Example-1&quot;&gt;「例1」の&lt;/a&gt;Name_hashは、よく知られているハッシュベースの方法での単純なクラス &lt;code&gt;Name&lt;/code&gt; の標準実装を示しています。また、 &lt;code&gt;Name&lt;/code&gt; の共通サブクラス &lt;code&gt;NamedFile&lt;/code&gt; とクラス &lt;code&gt;IO::File&lt;/code&gt; （そのオブジェクト）を構築するための予測可能な失敗も示しています。</target>
        </trans-unit>
        <trans-unit id="6bd2eb9a3cc8fd3a8df073b0ec5e2b4d099b5a11" translate="yes" xml:space="preserve">
          <source>For reference &lt;code&gt;Name_hash&lt;/code&gt; in &lt;a href=&quot;#Example-1&quot;&gt;Example 1&lt;/a&gt; shows the standard implementation of a simple class &lt;code&gt;Name&lt;/code&gt; in the well-known hash based way. It also demonstrates the predictable failure to construct a common subclass &lt;code&gt;NamedFile&lt;/code&gt; of &lt;code&gt;Name&lt;/code&gt; and the class &lt;code&gt;IO::File&lt;/code&gt; (whose objects</source>
          <target state="translated">参考の &lt;code&gt;Name_hash&lt;/code&gt; 、&lt;a href=&quot;#Example-1&quot;&gt;例1の&lt;/a&gt;Name_hashは、よく知られているハッシュベースの方法での単純なクラス &lt;code&gt;Name&lt;/code&gt; の標準実装を示しています。また、 &lt;code&gt;Name&lt;/code&gt; の共通サブクラス &lt;code&gt;NamedFile&lt;/code&gt; とクラス &lt;code&gt;IO::File&lt;/code&gt; （オブジェクトが</target>
        </trans-unit>
        <trans-unit id="c814c526315b7581980ad4c15539a698f43dc88e" translate="yes" xml:space="preserve">
          <source>For reference on how regular expressions are used in matching operations, plus various examples of the same, see discussions of &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt; in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">マッチング操作での正規表現の使用方法と、そのさまざまな例のリファレンスについては、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;??&lt;/code&gt; の説明を参照してください。中に&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;はperlopでの正規表現の引用様演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fad7e87806bab30783c3c4927bdef95cd0d3e97d" translate="yes" xml:space="preserve">
          <source>For resolving Pod E&amp;lt;...&amp;gt; sequences</source>
          <target state="translated">ポッドE &amp;lt;...&amp;gt;シーケンスを解決するため</target>
        </trans-unit>
        <trans-unit id="cad9c58fdc25d8570f28df0f6e175a96676cf13c" translate="yes" xml:space="preserve">
          <source>For results that are less &quot;raw&quot; than this function returns, or to get the values for any property, not just the few covered by this function, use the &lt;a href=&quot;#charprop%28%29&quot;&gt;&quot;charprop()&quot;&lt;/a&gt; function.</source>
          <target state="translated">この関数が返すよりも「生」が少ない結果の場合、またはこの関数でカバーされるいくつかのプロパティだけでなく、任意のプロパティの値を取得するには、&lt;a href=&quot;#charprop%28%29&quot;&gt;「charprop（）」&lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6b992296626805bd58c646a7af77319599bf4d43" translate="yes" xml:space="preserve">
          <source>For results that are less &quot;raw&quot; than this function returns, or to get the values for any property, not just the few covered by this function, use the &lt;a href=&quot;#charprop()&quot;&gt;charprop()&lt;/a&gt; function.</source>
          <target state="translated">この関数が返すよりも「生」ではない結果の場合、またはこの関数でカバーされるいくつかだけではなく、任意のプロパティの値を取得するには、&lt;a href=&quot;#charprop()&quot;&gt;charprop（）&lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="5465aa0069dd7e57a3ecfdd26acfc8c3e9bcb5cc" translate="yes" xml:space="preserve">
          <source>For scripts see UTR #24: &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr24/&quot;&gt;http://www.unicode.org/unicode/reports/tr24/&lt;/a&gt;</source>
          <target state="translated">スクリプトについては、UTR＃24を参照してください：&lt;a href=&quot;http://www.unicode.org/unicode/reports/tr24/&quot;&gt;http&lt;/a&gt; : //www.unicode.org/unicode/reports/tr24/</target>
        </trans-unit>
        <trans-unit id="915b1976024d3ee425c81de44cb9289f6d6a8ea2" translate="yes" xml:space="preserve">
          <source>For security reasons, which are probably detailed in your system's documentation for the C library &lt;code&gt;tmpnam()&lt;/code&gt; function, this interface is no longer available; instead use &lt;a href=&quot;File::Temp&quot;&gt;File::Temp&lt;/a&gt;.</source>
          <target state="translated">セキュリティ上の理由から、おそらくCライブラリの &lt;code&gt;tmpnam()&lt;/code&gt; 関数に関するシステムのドキュメントで詳しく説明されているため、このインターフェイスは使用できなくなりました。代わりに&lt;a href=&quot;File::Temp&quot;&gt;File :: Tempを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fbe77ef0bb7f245eb32b185bc4ca0da0057fd61e" translate="yes" xml:space="preserve">
          <source>For security reasons, which are probably detailed in your system's documentation for the C library &lt;code&gt;tmpnam()&lt;/code&gt; function, this interface should not be used; instead see &lt;a href=&quot;file/temp&quot;&gt;File::Temp&lt;/a&gt;.</source>
          <target state="translated">セキュリティ上の理由から、Cライブラリの &lt;code&gt;tmpnam()&lt;/code&gt; 関数に関するシステムのドキュメントでおそらく詳しく説明されているため、このインターフェイスは使用しないでください。代わりに&lt;a href=&quot;file/temp&quot;&gt;File :: Tempを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="804ad42eea097048c3a5ad09bc9b03cdfa4b060a" translate="yes" xml:space="preserve">
          <source>For sequential data set access try:</source>
          <target state="translated">シーケンシャルなデータセットアクセスのために試してみてください。</target>
        </trans-unit>
        <trans-unit id="818cffd65dd943a27d57389f19079c5339480e53" translate="yes" xml:space="preserve">
          <source>For signed types, the smallest representable number is the most negative number, the one furthest away from zero.</source>
          <target state="translated">符号付き型の場合、最小の表現可能数は最も負の数であり、ゼロから最も遠い数です。</target>
        </trans-unit>
        <trans-unit id="1e4114f1103bdc5a2ef0c90ce3439709bc47f4e2" translate="yes" xml:space="preserve">
          <source>For simple bindings to C libraries as well as other machine code libraries, consider instead using the much simpler &lt;a href=&quot;http://sourceware.org/libffi/&quot;&gt;libffi&lt;/a&gt; interface via CPAN modules like &lt;a href=&quot;FFI::Platypus&quot;&gt;FFI::Platypus&lt;/a&gt; or &lt;a href=&quot;FFI::Raw&quot;&gt;FFI::Raw&lt;/a&gt;.</source>
          <target state="translated">Cライブラリや他のマシンコードライブラリへの単純なバインディングについては、代わりに&lt;a href=&quot;FFI::Platypus&quot;&gt;FFI :: Platypus&lt;/a&gt;や&lt;a href=&quot;FFI::Raw&quot;&gt;FFI :: Raw&lt;/a&gt;などのCPANモジュールを介してはるかに単純な&lt;a href=&quot;http://sourceware.org/libffi/&quot;&gt;libffi&lt;/a&gt;インターフェイスを使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="ef5bb90320f25f28778d12700a90184c79a71a09" translate="yes" xml:space="preserve">
          <source>For simple names like 'foo', when the normal search fails to find a matching page, a search with the &quot;perl&quot; prefix is tried as well. So &quot;perldoc intro&quot; is enough to find/render &quot;perlintro.pod&quot;.</source>
          <target state="translated">foo' のような単純な名前の場合、通常の検索では一致するページが見つからない場合、&quot;perl&quot; という接頭辞で検索してみます。そのため、&quot;perldoc intro &quot;で &quot;perlintro.pod &quot;を検索/レンダリングすることができます。</target>
        </trans-unit>
        <trans-unit id="d66288b1185a5c9c86687a29a94d6c46b18857df" translate="yes" xml:space="preserve">
          <source>For simple operators that evaluate all their operands and then combine the values in some way, precedence and associativity (and parentheses) imply some ordering requirements on those combining operations. For example, in &lt;code&gt;2 + 4 * 5&lt;/code&gt;, the grouping implied by precedence means that the multiplication of 4 and 5 must be performed before the addition of 2 and 20, simply because the result of that multiplication is required as one of the operands of the addition. But the order of operations is not fully determined by this: in &lt;code&gt;2 * 2 + 4 * 5&lt;/code&gt; both multiplications must be performed before the addition, but the grouping does not say anything about the order in which the two multiplications are performed. In fact Perl has a general rule that the operands of an operator are evaluated in left-to-right order. A few operators such as &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; have special evaluation rules that can result in an operand not being evaluated at all; in general, the top-level operator in an expression has control of operand evaluation.</source>
          <target state="translated">すべてのオペランドを評価してから何らかの方法で値を結合する単純な演算子の場合、優先順位と結合性（および括弧）は、それらの結合操作にいくつかの順序付け要件があることを意味します。たとえば、 &lt;code&gt;2 + 4 * 5&lt;/code&gt; では、優先順位によって示されるグループ化は、2と20の加算の前に、4と5の乗算を実行する必要があることを意味します。これは、その乗算の結果が、添加。しかし、操作の順序はこれによって完全には決定されません：in &lt;code&gt;2 * 2 + 4 * 5&lt;/code&gt; 両方の乗算は加算の前に実行する必要がありますが、グループ化では2つの乗算が実行される順序については何も述べられていません。実際、Perlには、演算子のオペランドが左から右の順序で評価されるという一般的な規則があります。 &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; などのいくつかの演算子には、オペランドがまったく評価されない可能性のある特別な評価ルールがあります。一般に、式の最上位演算子は、オペランド評価を制御します。</target>
        </trans-unit>
        <trans-unit id="f31df48e2f5125f12b903cd6899a267c7885c59c" translate="yes" xml:space="preserve">
          <source>For simple uses, &lt;a href=&quot;File::Spec::Functions&quot;&gt;File::Spec::Functions&lt;/a&gt; provides convenient functional forms of these methods.</source>
          <target state="translated">簡単な使用法として、&lt;a href=&quot;File::Spec::Functions&quot;&gt;File :: Spec :: Functions&lt;/a&gt;は、これらのメソッドの便利な関数形式を提供します。</target>
        </trans-unit>
        <trans-unit id="556d75ad92e978ff3b11a57397aef51991f4ff7e" translate="yes" xml:space="preserve">
          <source>For simple uses, &lt;a href=&quot;spec/functions&quot;&gt;File::Spec::Functions&lt;/a&gt; provides convenient functional forms of these methods.</source>
          <target state="translated">単純な使用のために、&lt;a href=&quot;spec/functions&quot;&gt;File :: Spec :: Functions&lt;/a&gt;はこれらのメソッドの便利な関数形式を提供します。</target>
        </trans-unit>
        <trans-unit id="9d03e819dd2058b21b6af8f56092068c3f695190" translate="yes" xml:space="preserve">
          <source>For single-byte locales, Perl generally takes the tack to use locale rules on code points that can fit in a single byte, and Unicode rules for those that can't (though this isn't uniformly applied, see the note at the end of this section). This prevents many problems in locales that aren't UTF-8. Suppose the locale is ISO8859-7, Greek. The character at 0xD7 there is a capital Chi. But in the ISO8859-1 locale, Latin1, it is a multiplication sign. The POSIX regular expression character class &lt;code&gt;[[:alpha:]]&lt;/code&gt; will magically match 0xD7 in the Greek locale but not in the Latin one.</source>
          <target state="translated">シングルバイトロケールの場合、Perlは通常、シングルバイトに収まるコードポイントのロケールルールと、収まらないものにはUnicodeルールを使用します（これは一律に適用されるわけではありませんが、最後の注を参照してください）このセクションの）。これにより、UTF-8以外のロケールでの多くの問題が回避されます。ロケールがギリシャ語のISO8859-7であるとします。0xD7の文字には大文字のChiがあります。しかし、ISO8859-1ロケールのLatin1では、これは乗算記号です。POSIX正規表現文字クラス &lt;code&gt;[[:alpha:]]&lt;/code&gt; は、ギリシャロケールの0xD7と魔法のように一致しますが、ラテン語のロケールでは一致しません。</target>
        </trans-unit>
        <trans-unit id="380d5b1307da78e3f0b19da4a2093d734fd7d578" translate="yes" xml:space="preserve">
          <source>For small inputs asin() and acos() may return complex numbers even when real numbers would be enough and correct, this happens because of floating-point inaccuracies. You can see these inaccuracies for example by trying theses:</source>
          <target state="translated">小さな入力の場合、asin()や acos()は実数で十分で正しいのに複素数を返すことがありますが、これは浮動小数点の不正確さが原因です。これらの不正確さは、例えば以下のものを試してみることで確認することができます。</target>
        </trans-unit>
        <trans-unit id="19c29f66da4da426cc6fe898f14c790904d42bc1" translate="yes" xml:space="preserve">
          <source>For small systems, &lt;a href=&quot;Class::Tiny&quot;&gt;Class::Tiny&lt;/a&gt; and &lt;a href=&quot;Class::Accessor&quot;&gt;Class::Accessor&lt;/a&gt; both provide minimal object systems that take care of basic boilerplate for you.</source>
          <target state="translated">小規模なシステムの場合、&lt;a href=&quot;Class::Tiny&quot;&gt;Class :: Tiny&lt;/a&gt;と&lt;a href=&quot;Class::Accessor&quot;&gt;Class :: Accessorは&lt;/a&gt;どちらも、基本的な定型文を処理する最小限のオブジェクトシステムを提供します。</target>
        </trans-unit>
        <trans-unit id="b0bc5ddd0ee51281e4f9659982e9a429afe81e41" translate="yes" xml:space="preserve">
          <source>For small systems, &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class::Tiny&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class::Accessor&lt;/a&gt; both provide minimal object systems that take care of basic boilerplate for you.</source>
          <target state="translated">小規模なシステムでは、&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class :: Tiny&lt;/a&gt;と&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class :: Accessorの&lt;/a&gt;両方が、基本的なボイラープレートを処理する最小限のオブジェクトシステムを提供します。</target>
        </trans-unit>
        <trans-unit id="01fab25c098b96c0f08862d9d36fd9c003bafd92" translate="yes" xml:space="preserve">
          <source>For smoke testing you need a running Perl. You can either install the Synology supplied package for Perl 5.8.6, or build and install your own, much more recent version.</source>
          <target state="translated">スモークテストを行うには、実行中のPerlが必要です。Perl 5.8.6用のSynology付属のパッケージをインストールするか、ご自身の最新バージョンをビルドしてインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="649df46c734150d637b1c77793718377fdc210a4" translate="yes" xml:space="preserve">
          <source>For some applications, the Perl parser mangles constants too much. It is possible to hook into this process via &lt;code&gt;overload::constant()&lt;/code&gt; and &lt;code&gt;overload::remove_constant()&lt;/code&gt; functions.</source>
          <target state="translated">一部のアプリケーションでは、Perlパーサーが定数を過剰に変換します。 &lt;code&gt;overload::constant()&lt;/code&gt; および &lt;code&gt;overload::remove_constant()&lt;/code&gt; 関数を介してこのプロセスにフックすることが可能です。</target>
        </trans-unit>
        <trans-unit id="8c75f56e634e770bcbf3c0f23b36b82ec0fc811d" translate="yes" xml:space="preserve">
          <source>For some combinations of base character and modifiers, there are</source>
          <target state="translated">ベースとなるキャラクターとモディファイアの組み合わせによっては</target>
        </trans-unit>
        <trans-unit id="5b2480bf16f6be7c86b401cccabe7d726d8e24b1" translate="yes" xml:space="preserve">
          <source>For some concrete examples, see the implementation of the first() and reduce() functions of List::Util 1.18. There you will also find a header file that emulates the multicall API on older versions of perl.</source>
          <target state="translated">具体的な例としては、List::Util 1.18 の first()と reduce()関数の実装を参照してください。ここには、古いバージョンの perl のマルチコール API をエミュレートするヘッダファイルもあります。</target>
        </trans-unit>
        <trans-unit id="df3d3d98e3fd9c3e6c8341a04ded9e07c53eea35" translate="yes" xml:space="preserve">
          <source>For some core functions that always return a scalar value regardless of their context (eg, &lt;code&gt;chown&lt;/code&gt;), this may be 'scalar', even if you used a list context.</source>
          <target state="translated">コンテキストに関係なく常にスカラー値を返す一部のコア関数（ &lt;code&gt;chown&lt;/code&gt; など）では、リストコンテキストを使用した場合でも、これは「scalar」である可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c83ee66f318d1a73763c0a4e4314ae7b7e4530e" translate="yes" xml:space="preserve">
          <source>For some dual-life modules, it has not yet been determined if the CPAN version or the blead source is canonical. Until that is done, those modules should be in</source>
          <target state="translated">いくつかのデュアルライフモジュールについては、CPAN バージョンか blead ソースが正規化されているかどうかはまだ決定されていません。それが決定されるまでは、これらのモジュールは</target>
        </trans-unit>
        <trans-unit id="52922f69d414d9ab836b3e1640882c87c88c29f9" translate="yes" xml:space="preserve">
          <source>For some languages this issue may never come up (Danish is rarely expressed as &quot;da-DK&quot;, but instead is just &quot;da&quot;). And for other languages, the whole concept of a &quot;generic&quot; form may verge on being uselessly vague, particularly for interfaces involving voice media in forms of Arabic or Chinese.</source>
          <target state="translated">いくつかの言語では、この問題は出てこないかもしれません(デンマーク語は「da-DK」と表現されることはほとんどなく、代わりに「da」だけです)。また、他の言語では、特にアラビア語や中国語の音声メディアを含むインターフェイスでは、「一般的な」形式の概念は無駄に曖昧なものになりかけています。</target>
        </trans-unit>
        <trans-unit id="8df7b58f3cdc3f5432c07cbb3014a32ed5bbfa9f" translate="yes" xml:space="preserve">
          <source>For some methods, the first parameter can be modified. That includes the possibility that you return a reference to a completely different object instead. Although keeping the reference and just changing its contents is preferred over creating and returning a different reference.</source>
          <target state="translated">いくつかのメソッドでは、最初のパラメータを変更することができます。これには、代わりに全く異なるオブジェクトへの参照を返す可能性も含まれます。しかし、別の参照を作成して返すよりも、参照を保持して内容を変更することの方が好ましいです。</target>
        </trans-unit>
        <trans-unit id="91b1402159268a636b935e75a5ef943d82112546" translate="yes" xml:space="preserve">
          <source>For some reason which I forget, Unix machines like to have PERL_DL_NONLAZY set for tests.</source>
          <target state="translated">なぜか忘れましたが、Unix マシンはテスト用に PERL_DL_NONLAZY を設定するのが好きです。</target>
        </trans-unit>
        <trans-unit id="a7901ef2b61f75100e0830a3d919762868ec72c6" translate="yes" xml:space="preserve">
          <source>For some reason, the Fahrenheit to Celsius conversion fails to return the expected output. This is what it does:</source>
          <target state="translated">何らかの理由で、華氏から摂氏への変換は、期待された出力を返すことができません。これがその結果です。</target>
        </trans-unit>
        <trans-unit id="6836cb564e9866aa0dd506ea484f1257d833a6cb" translate="yes" xml:space="preserve">
          <source>For some reason, this table is incomplete! Several countries are missing from it, and I cannot find them anywhere on the UN site. I no longer use this as a source of data.</source>
          <target state="translated">なぜかこの表は不完全なのです。いくつかの国が欠落していて、国連のサイトのどこにも見当たらない。私はもうこれをデータのソースとして使用していません。</target>
        </trans-unit>
        <trans-unit id="a332f8b91559722090ecdee63195fef34de8fd56" translate="yes" xml:space="preserve">
          <source>For some specific applications, you can use one of the DBM modules. See &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;. More generically, you should consult the &lt;a href=&quot;freezethaw&quot;&gt;FreezeThaw&lt;/a&gt; or &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; modules from CPAN. Starting from Perl 5.8, &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; is part of the standard distribution. Here's one example using &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;'s &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;retrieve&lt;/code&gt; functions:</source>
          <target state="translated">一部の特定のアプリケーションでは、DBMモジュールの1つを使用できます。&lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_Fileを&lt;/a&gt;参照してください。より一般的には、CPANの&lt;a href=&quot;freezethaw&quot;&gt;FreezeThaw&lt;/a&gt;または&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;モジュールを参照する必要があります。Perl 5.8以降、&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;は標準ディストリビューションの一部です。&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;の &lt;code&gt;store&lt;/code&gt; および &lt;code&gt;retrieve&lt;/code&gt; 関数を使用した1つの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="b7a2085644f6e69e810ea72163b3697d3339d4a3" translate="yes" xml:space="preserve">
          <source>For some specific applications, you can use one of the DBM modules. See &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;. More generically, you should consult the &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt; or &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; modules from CPAN. Starting from Perl 5.8, &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; is part of the standard distribution. Here's one example using &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;'s &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;retrieve&lt;/code&gt; functions:</source>
          <target state="translated">一部の特定のアプリケーションでは、DBMモジュールの1つを使用できます。&lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_Fileを&lt;/a&gt;参照してください。より一般的には、CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt;または&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;モジュールを参照する必要があります。Perl 5.8以降、&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;は標準ディストリビューションの一部です。&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;の &lt;code&gt;store&lt;/code&gt; および &lt;code&gt;retrieve&lt;/code&gt; 関数を使用した1つの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="28412e9699e752fe2ce884e583f757f66a8d7305" translate="yes" xml:space="preserve">
          <source>For special considerations when Perl is embedded in a C program, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;&quot;Using embedded Perl with POSIX locales&quot; in perlembed&lt;/a&gt;.</source>
          <target state="translated">PerlがCプログラムに埋め込まれている場合の特別な考慮事項については&lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;、perlembedの「POSIXロケールでの埋め込まれたPerlの使用」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51552d3184ebb138bb755fdbaf9df407078be4d9" translate="yes" xml:space="preserve">
          <source>For special considerations when Perl is embedded in a C program, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;Using embedded Perl with POSIX locales in perlembed&lt;/a&gt;.</source>
          <target state="translated">PerlがCプログラムに埋め込まれている場合の特別な考慮事項については&lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;、perlembedのPOSIXロケールでの埋め込みPerlの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c3096e773f08a69d8f07a30e5b724db8c36f8d5b" translate="yes" xml:space="preserve">
          <source>For state vars, &lt;code&gt;SVs_PADSTALE&lt;/code&gt; is overloaded to mean 'not yet initialised', but this internal state is stored in a separate pad entry.</source>
          <target state="translated">状態変数の場合、 &lt;code&gt;SVs_PADSTALE&lt;/code&gt; は「まだ初期化されていない」ことを意味するようにオーバーロードされますが、この内部状態は別のパッドエントリに保存されます。</target>
        </trans-unit>
        <trans-unit id="db2592239bcf5cba780f2c2b2c780b3dad39ed83" translate="yes" xml:space="preserve">
          <source>For state vars, SVs_PADSTALE is overloaded to mean 'not yet initialised', but this internal state is stored in a separate pad entry.</source>
          <target state="translated">状態変数の場合、SVs_PADSTALE は「まだ初期化されていない」という意味でオーバーロードされますが、この内部状態は別のパッドエントリに格納されます。</target>
        </trans-unit>
        <trans-unit id="4f995a537b2754e12ddb3d3bb6e010f88e9d99c4" translate="yes" xml:space="preserve">
          <source>For static extensions</source>
          <target state="translated">静的拡張の場合</target>
        </trans-unit>
        <trans-unit id="f0dd4dac3c9b3c360654ba0693c4a0d4f581ae73" translate="yes" xml:space="preserve">
          <source>For streams all in the same encoding, don't use encode/decode; instead set the file encoding when you open the file or immediately after with &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; as described later below.</source>
          <target state="translated">すべて同じエンコーディングのストリームの場合は、エンコード/デコードを使用しないでください。代わりに、ファイルを開くとき、または後で説明するように &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を使用した直後に、ファイルエンコーディングを設定します。</target>
        </trans-unit>
        <trans-unit id="4c744f241f049dcebffc056a277550d8a8466f28" translate="yes" xml:space="preserve">
          <source>For streams all in the same encoding, don't use encode/decode; instead set the file encoding when you open the file or immediately after with &lt;code&gt;binmode&lt;/code&gt; as described later below.</source>
          <target state="translated">すべて同じエンコーディングのストリームの場合、エンコード/デコードを使用しないでください。代わりに、ファイルを開くとき、または後で説明するように &lt;code&gt;binmode&lt;/code&gt; で直後にファイルエンコーディングを設定します。</target>
        </trans-unit>
        <trans-unit id="1dfae2e55787ddda9febdb90b2ecaeb6ae6a59fe" translate="yes" xml:space="preserve">
          <source>For streams being handed</source>
          <target state="translated">手渡されたストリームのために</target>
        </trans-unit>
        <trans-unit id="9dedf3c911e70154c6e95a2be8f174842c7bae09" translate="yes" xml:space="preserve">
          <source>For streams coming</source>
          <target state="translated">来るストリームのために</target>
        </trans-unit>
        <trans-unit id="e0011302da40ab3a00fabe609704d25b18704f41" translate="yes" xml:space="preserve">
          <source>For string conversions, specifying a precision truncates the string to fit the specified width:</source>
          <target state="translated">文字列変換の場合、精度を指定すると、指定した幅に合わせて文字列が切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="715b9be15d81e36207f8641c990be0fb81823314" translate="yes" xml:space="preserve">
          <source>For string values, &lt;code&gt;%&lt;/code&gt; returns the sum of the byte values saving you the trouble of a sum loop with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">文字列値の場合、 &lt;code&gt;%&lt;/code&gt; はバイト値の合計を返し、 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; を使用した合計ループの問題を回避します。</target>
        </trans-unit>
        <trans-unit id="8622405258b1902f120cf645eb6484affafe8533" translate="yes" xml:space="preserve">
          <source>For string values, &lt;code&gt;%&lt;/code&gt; returns the sum of the byte values saving you the trouble of a sum loop with &lt;code&gt;substr&lt;/code&gt; and &lt;code&gt;ord&lt;/code&gt;:</source>
          <target state="translated">文字列値の場合、 &lt;code&gt;%&lt;/code&gt; はバイト値の合計を返し、 &lt;code&gt;substr&lt;/code&gt; と &lt;code&gt;ord&lt;/code&gt; を使用した合計ループの問題を回避します。</target>
        </trans-unit>
        <trans-unit id="2c32ad512fb42bb2f5a39ca4f1c4f07aae935ceb" translate="yes" xml:space="preserve">
          <source>For successful testing you may need to turn on the sticky bit for your world readable /tmp directory if you have not already done so (see man chmod).</source>
          <target state="translated">テストを成功させるためには、もしまだそうしていない場合は、世界で読める /tmp ディレクトリのスティッキービットをオンにする必要があるかもしれません (man chmod を参照してください)。</target>
        </trans-unit>
        <trans-unit id="992f6aafd7fd171cd3b566817c93beb472bf462c" translate="yes" xml:space="preserve">
          <source>For such purposes we have &lt;code&gt;use_ok&lt;/code&gt; and &lt;code&gt;require_ok&lt;/code&gt; .</source>
          <target state="translated">そのような目的のために、 &lt;code&gt;use_ok&lt;/code&gt; と &lt;code&gt;require_ok&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="1316c8eebf1cc7abd8100a0a50a1220726638d68" translate="yes" xml:space="preserve">
          <source>For such purposes we have &lt;code&gt;use_ok&lt;/code&gt; and &lt;code&gt;require_ok&lt;/code&gt;.</source>
          <target state="translated">このような目的のために、 &lt;code&gt;use_ok&lt;/code&gt; と &lt;code&gt;require_ok&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="28c4b6e0ac5edafc6b41dd536125705f570c0a39" translate="yes" xml:space="preserve">
          <source>For symbols and dingbats.</source>
          <target state="translated">シンボルやディンバットに。</target>
        </trans-unit>
        <trans-unit id="8172f7b548ca91c30bb8416a7346e1cc436d088e" translate="yes" xml:space="preserve">
          <source>For symmetry with the accessor methods and compatibility with &lt;code&gt;IO::Socket::INET&lt;/code&gt;, these are accepted as synonyms for &lt;code&gt;LocalHost&lt;/code&gt; and &lt;code&gt;LocalService&lt;/code&gt; respectively.</source>
          <target state="translated">アクセサメソッドとの対称性と &lt;code&gt;IO::Socket::INET&lt;/code&gt; との互換性のために、これらはそれぞれ &lt;code&gt;LocalHost&lt;/code&gt; と &lt;code&gt;LocalService&lt;/code&gt; の同義語として受け入れられます。</target>
        </trans-unit>
        <trans-unit id="9565e98b4027af01fa98942b43e97b089601e43b" translate="yes" xml:space="preserve">
          <source>For symmetry with the accessor methods and compatibility with &lt;code&gt;IO::Socket::INET&lt;/code&gt;, these are accepted as synonyms for &lt;code&gt;PeerHost&lt;/code&gt; and &lt;code&gt;PeerService&lt;/code&gt; respectively.</source>
          <target state="translated">アクセサメソッドとの対称性と &lt;code&gt;IO::Socket::INET&lt;/code&gt; との互換性のために、これらはそれぞれ &lt;code&gt;PeerHost&lt;/code&gt; と &lt;code&gt;PeerService&lt;/code&gt; の同義語として受け入れられます。</target>
        </trans-unit>
        <trans-unit id="7d0546a793b6579ee297b5975d16d0d21606bafc" translate="yes" xml:space="preserve">
          <source>For systems with no syntax differentiating filenames from directories, assumes that the last file is a path unless $no_file is true or a trailing separator or /. or /.. is present. On Unix this means that $no_file true makes this return ( '', $path, '' ).</source>
          <target state="translated">ファイル名とディレクトリを区別する構文を持たないシステムでは、 $no_file が true であるか、末尾に区切り文字 /.または /...がない限り、最後のファイルがパスであると仮定します。Unix では、これは $no_file が true の場合には('',$path,'')を返すことを意味します。</target>
        </trans-unit>
        <trans-unit id="7b23c14e40a72fd26594732c2e008c8f7079954f" translate="yes" xml:space="preserve">
          <source>For systems with no syntax differentiating filenames from directories, assumes that the last file is a path unless &lt;code&gt;$no_file&lt;/code&gt; is true or a trailing separator or</source>
          <target state="translated">ファイル名とディレクトリを区別する構文がないシステムの場合、 &lt;code&gt;$no_file&lt;/code&gt; がtrueであるか、末尾のセパレータまたは</target>
        </trans-unit>
        <trans-unit id="de9a4f3b55d023729ba498cced87be89dcf7fa68" translate="yes" xml:space="preserve">
          <source>For systems without &lt;code&gt;nl_langinfo&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;nl_langinfo&lt;/code&gt; のないシステムの場合</target>
        </trans-unit>
        <trans-unit id="8192718cdaeae506b4891fb49ba411c744ee9076" translate="yes" xml:space="preserve">
          <source>For systems without nl_langinfo</source>
          <target state="translated">nl_langinfo のないシステムの場合</target>
        </trans-unit>
        <trans-unit id="41699a22da98ee5d514ab051852b7fdbdda93994" translate="yes" xml:space="preserve">
          <source>For tab indents, you'd use a tab character:</source>
          <target state="translated">タブインデントの場合は、タブ文字を使用します。</target>
        </trans-unit>
        <trans-unit id="8bae2cd7dd972ee8bf90b611e367c374d03407e4" translate="yes" xml:space="preserve">
          <source>For that use &lt;a href=&quot;Shell::Command&quot;&gt;Shell::Command&lt;/a&gt;.</source>
          <target state="translated">そのためには、&lt;a href=&quot;Shell::Command&quot;&gt;Shell :: Command&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="873e054c44e61faf311e2453c2e600c934773fe0" translate="yes" xml:space="preserve">
          <source>For that use &lt;a href=&quot;http://search.cpan.org/perldoc/Shell::Command&quot;&gt;Shell::Command&lt;/a&gt;.</source>
          <target state="translated">そのためには、&lt;a href=&quot;http://search.cpan.org/perldoc/Shell::Command&quot;&gt;Shell :: Command&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f8e31e8dfe4611868531ce4559928a6d1882ff0a" translate="yes" xml:space="preserve">
          <source>For the</source>
          <target state="translated">のための</target>
        </trans-unit>
        <trans-unit id="2ab7693c25e01f8f8b5796198477bd097619e9dc" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;$i&lt;/code&gt;th type of supported media, the following variables will contain the following data.</source>
          <target state="translated">サポートされているメディアの &lt;code&gt;$i&lt;/code&gt; 番目のタイプの場合、次の変数には次のデータが含まれます。</target>
        </trans-unit>
        <trans-unit id="9111ece894932df874025e3e103411a73321fa27" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , &lt;code&gt;sech&lt;/code&gt; , the argument cannot be</source>
          <target state="translated">ため &lt;code&gt;csc&lt;/code&gt; 、 &lt;code&gt;cot&lt;/code&gt; 、 &lt;code&gt;asec&lt;/code&gt; 、 &lt;code&gt;acsc&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、 &lt;code&gt;csch&lt;/code&gt; 、 &lt;code&gt;coth&lt;/code&gt; 、 &lt;code&gt;asech&lt;/code&gt; 、 &lt;code&gt;acsch&lt;/code&gt; 、引数ができません &lt;code&gt;0&lt;/code&gt; （ゼロ）。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;1&lt;/code&gt; （1）。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;-1&lt;/code&gt; （マイナス1）。以下のために &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;sec&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、 &lt;code&gt;sech&lt;/code&gt; 、引数にすることはできません</target>
        </trans-unit>
        <trans-unit id="18728ff4c7a96c743723724ec7c8d3bf1df62e46" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the logarithmic functions and the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , the argument cannot be &lt;code&gt;i&lt;/code&gt; (the imaginary unit). For the &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-i&lt;/code&gt; (the negative imaginary unit). For the &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , the argument cannot be</source>
          <target state="translated">ため &lt;code&gt;csc&lt;/code&gt; 、 &lt;code&gt;cot&lt;/code&gt; 、 &lt;code&gt;asec&lt;/code&gt; 、 &lt;code&gt;acsc&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、 &lt;code&gt;csch&lt;/code&gt; 、 &lt;code&gt;coth&lt;/code&gt; 、 &lt;code&gt;asech&lt;/code&gt; 、 &lt;code&gt;acsch&lt;/code&gt; 、引数ができません &lt;code&gt;0&lt;/code&gt; （ゼロ）。対数関数と &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; の場合、引数を &lt;code&gt;1&lt;/code&gt; にすることはできません。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;-1&lt;/code&gt; （マイナス1）。ため &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、引数ができません &lt;code&gt;i&lt;/code&gt; （虚数単位）。以下のための &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数を &lt;code&gt;-i&lt;/code&gt; （負の虚数単位）にすることはできません。以下のために &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;sec&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、引数にすることはできません</target>
        </trans-unit>
        <trans-unit id="346b2e1f556759583c381575ddeb8016b9e80c78" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt;, &lt;code&gt;cot&lt;/code&gt;, &lt;code&gt;asec&lt;/code&gt;, &lt;code&gt;acsc&lt;/code&gt;, &lt;code&gt;acot&lt;/code&gt;, &lt;code&gt;csch&lt;/code&gt;, &lt;code&gt;coth&lt;/code&gt;, &lt;code&gt;asech&lt;/code&gt;, &lt;code&gt;acsch&lt;/code&gt;, the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;sech&lt;/code&gt;, the argument cannot be</source>
          <target state="translated">ため &lt;code&gt;csc&lt;/code&gt; 、 &lt;code&gt;cot&lt;/code&gt; 、 &lt;code&gt;asec&lt;/code&gt; 、 &lt;code&gt;acsc&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、 &lt;code&gt;csch&lt;/code&gt; 、 &lt;code&gt;coth&lt;/code&gt; 、 &lt;code&gt;asech&lt;/code&gt; 、 &lt;code&gt;acsch&lt;/code&gt; 、引数ができません &lt;code&gt;0&lt;/code&gt; （ゼロ）。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;1&lt;/code&gt; （1）。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;-1&lt;/code&gt; （マイナス1）。以下のために &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;sec&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、 &lt;code&gt;sech&lt;/code&gt; 、引数にすることはできません</target>
        </trans-unit>
        <trans-unit id="bea0e3af121b9ce840c449a021cdee4606c555e7" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt;, &lt;code&gt;cot&lt;/code&gt;, &lt;code&gt;asec&lt;/code&gt;, &lt;code&gt;acsc&lt;/code&gt;, &lt;code&gt;acot&lt;/code&gt;, &lt;code&gt;csch&lt;/code&gt;, &lt;code&gt;coth&lt;/code&gt;, &lt;code&gt;asech&lt;/code&gt;, &lt;code&gt;acsch&lt;/code&gt;, the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the logarithmic functions and the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;atan&lt;/code&gt;, &lt;code&gt;acot&lt;/code&gt;, the argument cannot be &lt;code&gt;i&lt;/code&gt; (the imaginary unit). For the &lt;code&gt;atan&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;-i&lt;/code&gt; (the negative imaginary unit). For the &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, the argument cannot be</source>
          <target state="translated">ため &lt;code&gt;csc&lt;/code&gt; 、 &lt;code&gt;cot&lt;/code&gt; 、 &lt;code&gt;asec&lt;/code&gt; 、 &lt;code&gt;acsc&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、 &lt;code&gt;csch&lt;/code&gt; 、 &lt;code&gt;coth&lt;/code&gt; 、 &lt;code&gt;asech&lt;/code&gt; 、 &lt;code&gt;acsch&lt;/code&gt; 、引数ができません &lt;code&gt;0&lt;/code&gt; （ゼロ）。対数関数と &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; の場合、引数を &lt;code&gt;1&lt;/code&gt; （1）にすることはできません。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;-1&lt;/code&gt; （マイナス1）。ため &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、引数ができません &lt;code&gt;i&lt;/code&gt; （虚数単位）。以下のために &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; の場合、引数を &lt;code&gt;-i&lt;/code&gt; （負の虚数単位）にすることはできません。以下のために &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;sec&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、引数にすることはできません</target>
        </trans-unit>
        <trans-unit id="83159320f2b2918a98eed25d2752aaca30a22922" translate="yes" xml:space="preserve">
          <source>For the DynaLoader developer/porter there is a similar debugging variable added to the C code (see dlutils.c) and enabled if Perl was built with the &lt;b&gt;-DDEBUGGING&lt;/b&gt; flag. This can also be set via the PERL_DL_DEBUG environment variable. Set to 1 for minimal information or higher for more.</source>
          <target state="translated">DynaLoader開発者/ポーターの場合、Cコードに追加された同様のデバッグ変数（dlutils.cを参照）があり、Perlが&lt;b&gt;-DDEBUGGING&lt;/b&gt;フラグでビルドされた場合に有効になります。これは、PERL_DL_DEBUG環境変数を介して設定することもできます。最小限の情報の場合は1に、詳細の場合は1以上に設定します。</target>
        </trans-unit>
        <trans-unit id="df6005966cffcf3e4fd44657df74e3aab23993c1" translate="yes" xml:space="preserve">
          <source>For the above line, the explanation is</source>
          <target state="translated">上の行の説明では</target>
        </trans-unit>
        <trans-unit id="308a541c5c676511c31fc011fe0dfca962b7d55d" translate="yes" xml:space="preserve">
          <source>For the affirmative and negative responses and expressions:</source>
          <target state="translated">肯定的・否定的な反応や表現のために。</target>
        </trans-unit>
        <trans-unit id="28357ce04ab4b5edf1ce3ff5857e726be487b1c5" translate="yes" xml:space="preserve">
          <source>For the block property, new-style block names are returned (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;&quot;Old-style versus new-style block names&quot;&lt;/a&gt;).</source>
          <target state="translated">ブロックプロパティの場合、新しいスタイルのブロック名が返されます（&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;「古いスタイルと新しいスタイルのブロック名」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1b868cb4c593515bd8834adf9737c636cf76ddff" translate="yes" xml:space="preserve">
          <source>For the block property, new-style block names are returned (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">blockプロパティについては、新しいスタイルのブロック名が返されます（&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;古いスタイルと新しいスタイルのブロック名を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8fad95ff47a99f988dd4bfbc3ce6b3ff012c165e" translate="yes" xml:space="preserve">
          <source>For the character code set being used (such as &quot;ISO8859-1&quot;, &quot;cp850&quot;, &quot;koi8-r&quot;, &quot;sjis&quot;, &quot;utf8&quot;, etc.), and for the currency string:</source>
          <target state="translated">使用する文字コードセット(&quot;ISO8859-1&quot;,&quot;cp850&quot;,&quot;koi8-r&quot;,&quot;sjis&quot;,&quot;utf8&quot; など)と通貨文字列。</target>
        </trans-unit>
        <trans-unit id="2e62a0b0dfb533953b1b1d8670e578cf8cef3f43" translate="yes" xml:space="preserve">
          <source>For the constructs except here-docs, single characters are used as starting and ending delimiters. If the starting delimiter is an opening punctuation (that is &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;/code&gt; ), the ending delimiter is the corresponding closing punctuation (that is &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;). If the starting delimiter is an unpaired character like &lt;code&gt;/&lt;/code&gt; or a closing punctuation, the ending delimiter is the same as the starting delimiter. Therefore a &lt;code&gt;/&lt;/code&gt; terminates a &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; construct, while a &lt;code&gt;]&lt;/code&gt; terminates both &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq[]&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq]]&lt;/a&gt;&lt;/code&gt; constructs.</source>
          <target state="translated">ヒアドキュメント以外の構成要素では、単一の文字が開始および終了の区切り文字として使用されます。開始デリミタが開口句読点である場合（つまり &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;{&lt;/code&gt; 、または &lt;code&gt;&amp;lt;&lt;/code&gt; ）、終了区切り文字は、対応する閉鎖句読点である（つまり &lt;code&gt;)&lt;/code&gt; 、 &lt;code&gt;]&lt;/code&gt; 、 &lt;code&gt;}&lt;/code&gt; 、または &lt;code&gt;&amp;gt;&lt;/code&gt; ）。開始区切り文字が &lt;code&gt;/&lt;/code&gt; のような対になっていない文字、または終了句読点である場合、終了区切り文字は開始区切り文字と同じです。したがって、 &lt;code&gt;/&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; 構文を終了し、 &lt;code&gt;]&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq[]&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq]]&lt;/a&gt;&lt;/code&gt; 両方を終了します] 構成。</target>
        </trans-unit>
        <trans-unit id="6b1508372ec5c852fb914d9d65491d39fce5cbc0" translate="yes" xml:space="preserve">
          <source>For the constructs except here-docs, single characters are used as starting and ending delimiters. If the starting delimiter is an opening punctuation (that is &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;/code&gt;), the ending delimiter is the corresponding closing punctuation (that is &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;). If the starting delimiter is an unpaired character like &lt;code&gt;/&lt;/code&gt; or a closing punctuation, the ending delimiter is the same as the starting delimiter. Therefore a &lt;code&gt;/&lt;/code&gt; terminates a &lt;code&gt;qq//&lt;/code&gt; construct, while a &lt;code&gt;]&lt;/code&gt; terminates both &lt;code&gt;qq[]&lt;/code&gt; and &lt;code&gt;qq]]&lt;/code&gt; constructs.</source>
          <target state="translated">here-docs以外の構成では、開始区切り文字と終了区切り文字として1文字が使用されます。開始区切り文字が開始句読点（つまり、 &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;{&lt;/code&gt; 、または &lt;code&gt;&amp;lt;&lt;/code&gt; ）の場合、終了区切り文字は、対応する終了句読点（つまり、 &lt;code&gt;)&lt;/code&gt; 、 &lt;code&gt;]&lt;/code&gt; 、 &lt;code&gt;}&lt;/code&gt; 、または &lt;code&gt;&amp;gt;&lt;/code&gt; ）です。開始区切り文字が &lt;code&gt;/&lt;/code&gt; または終了句読点のような対になっていない文字である場合、終了区切り文字は開始区切り文字と同じです。したがって、 &lt;code&gt;/&lt;/code&gt; は &lt;code&gt;qq//&lt;/code&gt; 構文を終了し、 &lt;code&gt;]&lt;/code&gt; は &lt;code&gt;qq[]&lt;/code&gt; と &lt;code&gt;qq]]&lt;/code&gt; の両方を終了します。 構成。</target>
        </trans-unit>
        <trans-unit id="ef084733533133935013f7856e15a65eba4fbaf8" translate="yes" xml:space="preserve">
          <source>For the date-time, date, and time formats used by the strftime() function (see &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;):</source>
          <target state="translated">strftime（）関数で使用される日時、日付、および時刻の形式について（&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照）：</target>
        </trans-unit>
        <trans-unit id="88646295b920c4d75cffec415aa9265b6c6b789a" translate="yes" xml:space="preserve">
          <source>For the details of the current situation with calling external programs, see &lt;a href=&quot;#Starting-OS%2F2-%28and-DOS%29-programs-under-Perl&quot;&gt;&quot;Starting OS/2 (and DOS) programs under Perl&quot;&lt;/a&gt;. Set us mention a couple of features:</source>
          <target state="translated">外部プログラムの呼び出しに関する現在の状況の詳細については、&lt;a href=&quot;#Starting-OS%2F2-%28and-DOS%29-programs-under-Perl&quot;&gt;「PerlでのOS / 2（およびDOS）プログラムの起動」を&lt;/a&gt;参照してください。いくつかの機能について説明します。</target>
        </trans-unit>
        <trans-unit id="e4f199a5411adb8b18d5dcd3eca491b6d0afa516" translate="yes" xml:space="preserve">
          <source>For the details of the current situation with calling external programs, see &lt;a href=&quot;http://search.cpan.org/perldoc/Starting%20OS#2-(and-DOS)-programs-under-Perl&quot;&gt;2 (and DOS) programs under Perl in Starting OS&lt;/a&gt;. Set us mention a couple of features:</source>
          <target state="translated">外部プログラムの呼び出しに関する現在の状況の詳細については、「&lt;a href=&quot;http://search.cpan.org/perldoc/Starting%20OS#2-(and-DOS)-programs-under-Perl&quot;&gt;OSの起動」のPerlでの2（およびDOS）プログラムを&lt;/a&gt;参照してください。いくつかの機能について言及します。</target>
        </trans-unit>
        <trans-unit id="2b01295adb8fe2970489d2caf9aa0f33ed5cd1bc" translate="yes" xml:space="preserve">
          <source>For the eras based on typically some ruler, such as the Japanese Emperor (naturally only defined in the appropriate locales):</source>
          <target state="translated">日本の天皇のような典型的ないくつかの支配者に基づく時代については(当然ながら、適切な地域でのみ定義されている)。</target>
        </trans-unit>
        <trans-unit id="f1218216e6666aa08fea7db0711070bf940dc1b0" translate="yes" xml:space="preserve">
          <source>For the example above, this produces the key &quot;13 1 2 3 4 5 6 7&quot;.</source>
          <target state="translated">上の例では、これにより「13 1 2 3 4 5 6 7」というキーが生成されます。</target>
        </trans-unit>
        <trans-unit id="42c4d465f3b13e5aba4384de319219a9fd5aed07" translate="yes" xml:space="preserve">
          <source>For the examples I'm going to assume that we're working with a 'normal' Perl module distribution. Specifically I'll assume that typing</source>
          <target state="translated">この例では、'通常の'Perlモジュールの分布を使用していると仮定します。具体的には</target>
        </trans-unit>
        <trans-unit id="bbb3be8f56df5259eb022c810ec0d5fe6e171757" translate="yes" xml:space="preserve">
          <source>For the full and latest information about Unicode see the latest Unicode standard, or the Unicode Consortium's website &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;</source>
          <target state="translated">Unicodeに関する完全な最新情報については、最新のUnicode標準、またはUnicodeコンソーシアムのWebサイト&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.orgを参照してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ecd38a7a451c97a513905f310cabed89c1356fe4" translate="yes" xml:space="preserve">
          <source>For the full and latest information about Unicode see the latest Unicode standard, or the Unicode Consortium's website &lt;a href=&quot;https://www.unicode.org&quot;&gt;https://www.unicode.org&lt;/a&gt;</source>
          <target state="translated">Unicodeに関する完全で最新の情報については、最新のUnicode標準、またはUnicodeコンソーシアムのWebサイト&lt;a href=&quot;https://www.unicode.org&quot;&gt;https://www.unicode.orgを参照してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d63c3394a872688489af1ca37f8d47f75f94c7f" translate="yes" xml:space="preserve">
          <source>For the inverse cosine operation, you may use the &lt;a href=&quot;Math::Trig&quot;&gt;&lt;code&gt;Math::Trig::acos&lt;/code&gt;&lt;/a&gt; function, or use this relation:</source>
          <target state="translated">逆余弦演算の場合、&lt;a href=&quot;Math::Trig&quot;&gt; &lt;code&gt;Math::Trig::acos&lt;/code&gt; &lt;/a&gt;関数を使用するか、次の関係を使用できます。</target>
        </trans-unit>
        <trans-unit id="8668a856ebdec95f7f9bedf605f00147e6a5c893" translate="yes" xml:space="preserve">
          <source>For the inverse cosine operation, you may use the &lt;code&gt;Math::Trig::acos()&lt;/code&gt; function, or use this relation:</source>
          <target state="translated">逆余弦演算では、 &lt;code&gt;Math::Trig::acos()&lt;/code&gt; 関数を使用するか、次の関係を使用できます。</target>
        </trans-unit>
        <trans-unit id="a905ba655e6e826aa1adf29366a4b3be68fc4622" translate="yes" xml:space="preserve">
          <source>For the inverse sine operation, you may use the &lt;code&gt;Math::Trig::asin&lt;/code&gt; function, or use this relation:</source>
          <target state="translated">逆正弦演算では、 &lt;code&gt;Math::Trig::asin&lt;/code&gt; 関数を使用するか、次の関係を使用できます。</target>
        </trans-unit>
        <trans-unit id="365be163ec9f7d875805b3de60bcb8b6218efdf9" translate="yes" xml:space="preserve">
          <source>For the locales for which it makes sense to have ante meridiem and post meridiem time formats:</source>
          <target state="translated">それが意味のあるロケールのためには、子午線の前と後の子午線の時間形式を持つことができます。</target>
        </trans-unit>
        <trans-unit id="6876721cfa8799910e64a479d1896bac8905fc75" translate="yes" xml:space="preserve">
          <source>For the long explanation, see David Goldberg's &quot;What Every Computer Scientist Should Know About Floating-Point Arithmetic&quot; (&lt;a href=&quot;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&quot;&gt;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&lt;/a&gt;).</source>
          <target state="translated">詳しい説明については、David Goldbergの「すべてのコンピューター科学者が浮動小数点演算について知っておくべきこと」（&lt;a href=&quot;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&quot;&gt;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="4d74797f259ed5344193b607b1a74b7262472d3c" translate="yes" xml:space="preserve">
          <source>For the more enlightened: note that in the following descriptions, lowercase</source>
          <target state="translated">より賢明な方へ:以下の説明では、小文字の</target>
        </trans-unit>
        <trans-unit id="ab2b9b857d720a0495db321b12b78ce4f7c0fe32" translate="yes" xml:space="preserve">
          <source>For the most part, everything should just work.</source>
          <target state="translated">ほとんどの場合、すべてがうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="64bfdda2355e6cc7b725609cd6e4467f4aa79c60" translate="yes" xml:space="preserve">
          <source>For the most part, the &lt;b&gt;Pod::Parser&lt;/b&gt; base class should be able to do most of the input parsing for you and leave you free to worry about how to interpret the commands and translate the result.</source>
          <target state="translated">ほとんどの場合、&lt;b&gt;Pod :: Parser&lt;/b&gt;基本クラスは、入力の解析のほとんどを実行でき、コマンドの解釈方法と結果の変換方法を自由に考えられるようにします。</target>
        </trans-unit>
        <trans-unit id="b31f0c96329dc815fb597a9a6cc95acfa25f02c3" translate="yes" xml:space="preserve">
          <source>For the most part, this class will only be used when operating on the result of the &lt;code&gt;feature&lt;/code&gt; or &lt;code&gt;features&lt;/code&gt; methods on a &lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN::Meta&lt;/a&gt; object.</source>
          <target state="translated">ほとんどの部分については、このクラスでは唯一の結果で動作するときに使用される &lt;code&gt;feature&lt;/code&gt; や &lt;code&gt;features&lt;/code&gt; のメソッド&lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN ::メタ&lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="9a0e7967ce42595fba722f8b428604ad3ef68e4c" translate="yes" xml:space="preserve">
          <source>For the pattern of regex operators (&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;), the quoting from &lt;code&gt;\Q&lt;/code&gt; is applied after interpolation is processed, but before escapes are processed. This allows the pattern to match literally (except for &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; ). For example, the following matches:</source>
          <target state="translated">正規表現演算子（ &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; ）のパターンの場合、 &lt;code&gt;\Q&lt;/code&gt; からの引用は、補間が処理された後、エスケープが処理される前に適用されます。これにより、パターンが文字通り一致します（ &lt;code&gt;$&lt;/code&gt; と &lt;code&gt;@&lt;/code&gt; を除く）。たとえば、次のものが一致します。</target>
        </trans-unit>
        <trans-unit id="bafad4ed65b3c7770f9cc7f69f78389fee2299f4" translate="yes" xml:space="preserve">
          <source>For the pattern of regex operators (&lt;code&gt;qr//&lt;/code&gt;, &lt;code&gt;m//&lt;/code&gt; and &lt;code&gt;s///&lt;/code&gt;), the quoting from &lt;code&gt;\Q&lt;/code&gt; is applied after interpolation is processed, but before escapes are processed. This allows the pattern to match literally (except for &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt;). For example, the following matches:</source>
          <target state="translated">正規表現演算子のパターン（ &lt;code&gt;qr//&lt;/code&gt; 、 &lt;code&gt;m//&lt;/code&gt; 、および &lt;code&gt;s///&lt;/code&gt; ）の場合、 &lt;code&gt;\Q&lt;/code&gt; からの引用符は、補間が処理された後、エスケープが処理される前に適用されます。これにより、パターンを文字通り一致させることができます（ &lt;code&gt;$&lt;/code&gt; と &lt;code&gt;@&lt;/code&gt; を除く）。たとえば、次のように一致します。</target>
        </trans-unit>
        <trans-unit id="3962dca7589f77e8258212e6709cb6dc2b855dcb" translate="yes" xml:space="preserve">
          <source>For the purpose of inheritance every overloaded package behaves as if &lt;code&gt;fallback&lt;/code&gt; is present (possibly undefined). This may create interesting effects if some package is not overloaded, but inherits from two overloaded packages.</source>
          <target state="translated">継承のために、すべてのオーバーロードされたパッケージは、 &lt;code&gt;fallback&lt;/code&gt; が存在する（おそらく未定義）かのように動作します。一部のパッケージがオーバーロードされていないが、2つのオーバーロードされたパッケージを継承している場合、これは興味深い効果を生み出す可能性があります。</target>
        </trans-unit>
        <trans-unit id="82c1e221649c157f620843ea4889acff34e37d34" translate="yes" xml:space="preserve">
          <source>For the purpose of this pragma, interpolation of precompiled regular expressions (i.e., the result of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;) is</source>
          <target state="translated">このプラグマの目的のために、プリコンパイルされた正規表現（つまり、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 結果）の補間は</target>
        </trans-unit>
        <trans-unit id="d47eb1ba14307bbe26aa054571857eee69a2cf71" translate="yes" xml:space="preserve">
          <source>For the purpose of this pragma, interpolation of precompiled regular expressions (i.e., the result of &lt;code&gt;qr//&lt;/code&gt;) is</source>
          <target state="translated">このプラグマの目的のために、プリコンパイルされた正規表現の補間（つまり、 &lt;code&gt;qr//&lt;/code&gt; 結果）は次のようになります。</target>
        </trans-unit>
        <trans-unit id="390690bb7f49cda49f3b364ee9e751f4c6ef962d" translate="yes" xml:space="preserve">
          <source>For the purposes of this discussion you can think of a zip file as sequence of compressed data streams, each of which is prefixed by an uncompressed local header. The local header contains information about the compressed data stream, including the name of the compressed file and, in particular, the length of the compressed data stream.</source>
          <target state="translated">ここでは、zip ファイルを圧縮されたデータストリームのシーケンスと考えることができます。ローカルヘッダには、圧縮ファイルの名前や、特に圧縮データストリームの長さなど、圧縮データストリームに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="c1aa087cdbd433afbbd707aff339d630b47008df" translate="yes" xml:space="preserve">
          <source>For the purposes of this module, a version &quot;number&quot; is a sequence of positive integer values separated by one or more decimal points and optionally a single underscore. This corresponds to what Perl itself uses for a version, as well as extending the &quot;version as number&quot; that is discussed in the various editions of the Camel book.</source>
          <target state="translated">このモジュールの目的のために、バージョンの「数」とは、1つ以上の小数点で区切られた正の整数値のシーケンスであり、オプションとして1つのアンダースコアがあります。これは、Perl 自身がバージョンとして使用しているものに対応しており、Camel book の様々なエディションで議論されている &quot;version as number&quot; を拡張しています。</target>
        </trans-unit>
        <trans-unit id="ba3e421d172c8c68f6d89fe7339af35a2610b123" translate="yes" xml:space="preserve">
          <source>For the regular expression, /\bPerl\b/, there has to be a word boundary before the &quot;P&quot; and after the &quot;l&quot;. As long as something other than a word character precedes the &quot;P&quot; and succeeds the &quot;l&quot;, the pattern will match. These strings match /\bPerl\b/.</source>
          <target state="translated">正規表現である/\bPerl\b/は、「P」の前と「l」の後に単語の境界がある必要があります。単語の文字以外の何かが、「P」の前にあって、「l」の後に続く限り、パターンは一致する。これらの文字列は、/\bPerl\b/に一致します。</target>
        </trans-unit>
        <trans-unit id="6f420a434584dca0d2af03f0912dee0967b4dc89" translate="yes" xml:space="preserve">
          <source>For the reverse of stringifying, see the &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;emake&lt;/code&gt; .</source>
          <target state="translated">文字 &lt;code&gt;emake&lt;/code&gt; の逆については、 &lt;code&gt;make&lt;/code&gt; とemakeを参照してください。</target>
        </trans-unit>
        <trans-unit id="22aee4c1c943c8dd445e407193849fc0aeb0c73c" translate="yes" xml:space="preserve">
          <source>For the reverse of stringifying, see the &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;emake&lt;/code&gt;.</source>
          <target state="translated">文字 &lt;code&gt;emake&lt;/code&gt; の逆については、 &lt;code&gt;make&lt;/code&gt; とemakeを参照してください。</target>
        </trans-unit>
        <trans-unit id="cb38c53d822d8e08d87924c605322b6766068193" translate="yes" xml:space="preserve">
          <source>For the reverse operation, we'll have to determine the number of items in the buffer before we can let &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; rip it apart:</source>
          <target state="translated">逆の操作の場合、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 分割できるようにする前に、バッファー内のアイテム数を決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f55d580f3d25be1004e547072eb1c8e14b41bc39" translate="yes" xml:space="preserve">
          <source>For the reverse operation, we'll have to determine the number of items in the buffer before we can let &lt;code&gt;unpack&lt;/code&gt; rip it apart:</source>
          <target state="translated">逆の操作の場合、 &lt;code&gt;unpack&lt;/code&gt; でリッピングする前に、バッファー内のアイテムの数を決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4dc883c9ac944705d2c3538c7663a30491ff44ec" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;#chr&quot;&gt;chr&lt;/a&gt;. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">逆については、&lt;a href=&quot;#chr&quot;&gt;chrを&lt;/a&gt;参照してください。Unicodeの詳細については、&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="22f8818d8708e71f6ec66e345451b685437b1bcc" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;#chr-NUMBER&quot;&gt;&lt;code&gt;chr&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">逆については、&lt;a href=&quot;#chr-NUMBER&quot;&gt; &lt;code&gt;chr&lt;/code&gt; を&lt;/a&gt;参照してください。Unicodeの詳細については、&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="60cbf2eafc92f15723736c9c72868093d76361c9" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;chr&quot;&gt;chr&lt;/a&gt;. See &lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">逆については、&lt;a href=&quot;chr&quot;&gt;chrを&lt;/a&gt;参照してください。Unicodeの詳細については、&lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="467ceafc8b99b23ed78b230316a1d2fd5db20386" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;#ord&quot;&gt;ord&lt;/a&gt;.</source>
          <target state="translated">逆の場合は、&lt;a href=&quot;#ord&quot;&gt;ordを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="5e259a8f2631f2297eddd983b45285cad9dd7ea6" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;#ord-EXPR&quot;&gt;&lt;code&gt;ord&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">逆の場合は、&lt;a href=&quot;#ord-EXPR&quot;&gt; &lt;code&gt;ord&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e6051659642df2e97b5594ae4ac7df1aad97530d" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;ord&quot;&gt;ord&lt;/a&gt;.</source>
          <target state="translated">逆の場合は、&lt;a href=&quot;ord&quot;&gt;ordを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="38d054c00f17c4b75d354767445d50200681238a" translate="yes" xml:space="preserve">
          <source>For the rounding mode, see &lt;a href=&quot;#fegetround&quot;&gt;&quot;fegetround&quot;&lt;/a&gt;.</source>
          <target state="translated">丸めモードについては、&lt;a href=&quot;#fegetround&quot;&gt;「fegetround」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d7f75a65f093671232956735031c2585d37439c1" translate="yes" xml:space="preserve">
          <source>For the rounding mode, see &lt;a href=&quot;#fegetround&quot;&gt;fegetround&lt;/a&gt;.</source>
          <target state="translated">丸めモードについては、&lt;a href=&quot;#fegetround&quot;&gt;fegetroundを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="94a7023212a15791913a95ba1c43764471fafd45" translate="yes" xml:space="preserve">
          <source>For the sake of speed and efficiency, most of the encodings are now supported via a</source>
          <target state="translated">速度と効率のために、現在ではほとんどのエンコーディングが</target>
        </trans-unit>
        <trans-unit id="ad21271dd49f14dc112f37ba2aaf54b53f9fb3d0" translate="yes" xml:space="preserve">
          <source>For the sake of speed for a common case, in the above algorithms backslashes in the command name are not considered as shell metacharacters.</source>
          <target state="translated">一般的なケースでの高速化のため、上記のアルゴリズムでは、コマンド名のバックスラッシュはシェルのメタキャラクタとはみなされません。</target>
        </trans-unit>
        <trans-unit id="8e59f411bd38c6c508217160dc7c21633cf4c1fa" translate="yes" xml:space="preserve">
          <source>For the subsequent examples, the following three objects will be used:</source>
          <target state="translated">以降の例では、以下の3つのオブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="66b5f5529b4811c88bf12667f10ef39f565d104d" translate="yes" xml:space="preserve">
          <source>For the tangent operation, you may use the &lt;a href=&quot;Math::Trig#tan&quot;&gt;&lt;code&gt;Math::Trig::tan&lt;/code&gt;&lt;/a&gt; function, or use the familiar relation:</source>
          <target state="translated">接線演算には、&lt;a href=&quot;Math::Trig#tan&quot;&gt; &lt;code&gt;Math::Trig::tan&lt;/code&gt; &lt;/a&gt;関数を使用するか、おなじみの関係を使用できます。</target>
        </trans-unit>
        <trans-unit id="13bb8b6279ccfe0d9f624beb9c39acf42987a9f6" translate="yes" xml:space="preserve">
          <source>For the tangent operation, you may use the &lt;code&gt;Math::Trig::tan&lt;/code&gt; function, or use the familiar relation:</source>
          <target state="translated">正接演算には、 &lt;code&gt;Math::Trig::tan&lt;/code&gt; 関数を使用するか、使い慣れた関係を使用します。</target>
        </trans-unit>
        <trans-unit id="2285c9ff17a7e14c88876a7216e0b2f44e88a62a" translate="yes" xml:space="preserve">
          <source>For the time being, any necessary padding must be done by the user. Fortunately, this is a simple operation: if the length of a Base64-encoded digest isn't a multiple of 4, simply append &quot;=&quot; characters to the end of the digest until it is:</source>
          <target state="translated">当面の間、必要なパディングはユーザーが行わなければなりません。幸いなことに、これは簡単な操作です:Base64でエンコードされたダイジェストの長さが4の倍数でない場合、ダイジェストの最後に&quot;=&quot;文字を追加するだけで、4の倍数になるまで続けることができます。</target>
        </trans-unit>
        <trans-unit id="cf756832c302bebd32aa11a0956539748cfdf6c6" translate="yes" xml:space="preserve">
          <source>For the various values of PERLIO see &lt;a href=&quot;perlrun#PERLIO&quot;&gt;&quot;PERLIO&quot; in perlrun&lt;/a&gt;.</source>
          <target state="translated">PERLIOのさまざまな値については、perlrunの&lt;a href=&quot;perlrun#PERLIO&quot;&gt;「PERLIO」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="08b2d3f59edd8b61350507d43c91115b5897da2d" translate="yes" xml:space="preserve">
          <source>For the various values of PERLIO see &lt;a href=&quot;perlrun#PERLIO&quot;&gt;PERLIO in perlrun&lt;/a&gt;.</source>
          <target state="translated">PERLIOのさまざまな値については、perlrunのPERLIOを参照&lt;a href=&quot;perlrun#PERLIO&quot;&gt;してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c05e1cff70ef8d8af8951cca948259111de268a1" translate="yes" xml:space="preserve">
          <source>For the version 2 spec, either of these are recommended:</source>
          <target state="translated">バージョン2仕様の場合は、どちらかをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8844b265400f6667c325f1ddff5acf01441d43a0" translate="yes" xml:space="preserve">
          <source>For these purposes &quot;formats&quot; are a kind-of CV; eval&quot;&quot;s are too (except they're not callable at will and are always thrown away after the eval&quot;&quot; is done executing). Require'd files are simply evals without any outer lexical scope.</source>
          <target state="translated">これらの目的のためには、&quot;format &quot;は一種のCVであり、eval&quot;&quot;sも同様です(ただし、それらは自由に呼び出すことができず、eval&quot;&quot;sの実行が終わった後は常に捨てられます)。Require'dファイルは、外部の辞書的スコープを持たない単なるevalです。</target>
        </trans-unit>
        <trans-unit id="ce3d10f5200fd9f35eb39a2e2f3aff9e21a56d2a" translate="yes" xml:space="preserve">
          <source>For this discussion, we'll implement an array whose elements are a fixed size at creation. If you try to create an element larger than the fixed size, you'll take an exception. For example:</source>
          <target state="translated">今回は、要素のサイズが固定されている配列を実装します。固定サイズよりも大きな要素を作成しようとすると、例外が発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ec93c9a1c9a22841521a0f685ab9c42198948730" translate="yes" xml:space="preserve">
          <source>For this facet the &lt;code&gt;details&lt;/code&gt; flag is the info itself. This info may be a string, or it may be a data structure to display. This is one of the few facet types that may contain blessed items.</source>
          <target state="translated">このファセットの場合、 &lt;code&gt;details&lt;/code&gt; フラグは情報そのものです。この情報は文字列の場合もあれば、表示するデータ構造の場合もあります。これは、祝福されたアイテムを含む可能性のある数少ないファセットタイプの1つです。</target>
        </trans-unit>
        <trans-unit id="5772dfbe4384ac965da1291fe16122d9475d85d4" translate="yes" xml:space="preserve">
          <source>For this grouping operator there is no need to describe the ordering, since only whether or not &lt;code&gt;&quot;S&quot;&lt;/code&gt; can match is important.</source>
          <target state="translated">このグループ化演算子では、 &lt;code&gt;&quot;S&quot;&lt;/code&gt; が一致するかどうかだけが重要であるため、順序を説明する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5ffd7f12ddaa1b6fb60aa095946c012384bca946" translate="yes" xml:space="preserve">
          <source>For this grouping operator there is no need to describe the ordering, since only whether or not &lt;code&gt;S&lt;/code&gt; can match is important.</source>
          <target state="translated">このグループ化演算子では、 &lt;code&gt;S&lt;/code&gt; が一致できるかどうかのみが重要であるため、順序を記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="cc327a8066a607761f2f00ba1baa6fe5fc670e29" translate="yes" xml:space="preserve">
          <source>For this particular case an INIT: keyword would generate the same C code as the PREINIT: keyword. Another correct, but error-prone example:</source>
          <target state="translated">この特定のケースでは、INIT:キーワードは PREINIT:キーワードと同じ C コードを生成します。もう一つの正しい例ですが、エラーが発生しやすい例です。</target>
        </trans-unit>
        <trans-unit id="145862e7b4274977f12fe15b3504a6befbd27f0c" translate="yes" xml:space="preserve">
          <source>For this reason, Unicode strings need to be converted to UTF-8-encoded bytestrings before they are handed off to &lt;code&gt;add_data()&lt;/code&gt; :</source>
          <target state="translated">このため、Unicode文字列を &lt;code&gt;add_data()&lt;/code&gt; に渡す前に、UTF-8でエンコードされたバイト文字列に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc0ff89547dd83d311973992bf89484e1f803dba" translate="yes" xml:space="preserve">
          <source>For this reason, Unicode strings need to be converted to UTF-8-encoded bytestrings before they are handed off to &lt;code&gt;add_data()&lt;/code&gt;:</source>
          <target state="translated">このため、Unicode文字列は &lt;code&gt;add_data()&lt;/code&gt; に渡される前に、UTF-8でエンコードされたバイト文字列に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="23642ebadbd7c22bbe2f1b8f71fef7bd367e8bfc" translate="yes" xml:space="preserve">
          <source>For this reason, it is best to use either exclusively &lt;a href=&quot;#Decimal-Versions&quot;&gt;&quot;Decimal Versions&quot;&lt;/a&gt; or &lt;a href=&quot;#Dotted-Decimal-Versions&quot;&gt;&quot;Dotted-Decimal Versions&quot;&lt;/a&gt; with multiple decimal points.</source>
          <target state="translated">このため、小数点が複数ある&lt;a href=&quot;#Decimal-Versions&quot;&gt;「10進バージョン」&lt;/a&gt;または&lt;a href=&quot;#Dotted-Decimal-Versions&quot;&gt;「ドット付き10進バージョン」&lt;/a&gt;のみを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="12f450dabc7b58bb8714d17b3247fd233b4ac792" translate="yes" xml:space="preserve">
          <source>For this reason, the following functions are exported by default:</source>
          <target state="translated">このため、デフォルトでは以下の関数がエクスポートされています。</target>
        </trans-unit>
        <trans-unit id="d2b9d5527f46d12ea221667541772074c58883c4" translate="yes" xml:space="preserve">
          <source>For this reason, the use of &lt;code&gt;END&lt;/code&gt; blocks in threads is &lt;b&gt;strongly&lt;/b&gt; discouraged.</source>
          <target state="translated">このため、スレッドでの &lt;code&gt;END&lt;/code&gt; ブロックの使用は&lt;b&gt;強く&lt;/b&gt;お勧めしません。</target>
        </trans-unit>
        <trans-unit id="2e6029ba6f79e9357a32ebfe487f07ef84ef2774" translate="yes" xml:space="preserve">
          <source>For this to happen, the class must not be inverted (see &lt;a href=&quot;#Negation&quot;&gt;&quot;Negation&quot;&lt;/a&gt;) and the character must be explicitly specified, and not be part of a multi-character range (not even as one of its endpoints). (&lt;a href=&quot;#Character-Ranges&quot;&gt;&quot;Character Ranges&quot;&lt;/a&gt; will be explained shortly.) Therefore,</source>
          <target state="translated">これを行うには、クラスを反転してはならず（&lt;a href=&quot;#Negation&quot;&gt;「否定」を&lt;/a&gt;参照）、文字を明示的に指定し、複数文字の範囲の一部にしないでください（エンドポイントの1つとしても）。（&lt;a href=&quot;#Character-Ranges&quot;&gt;「文字範囲」&lt;/a&gt;については後ほど説明します。）したがって、</target>
        </trans-unit>
        <trans-unit id="6e04b91b7b687e03cffdfdf3a54823d050aa6f6b" translate="yes" xml:space="preserve">
          <source>For this to happen, the class must not be inverted (see &lt;a href=&quot;#Negation&quot;&gt;Negation&lt;/a&gt;) and the character must be explicitly specified, and not be part of a multi-character range (not even as one of its endpoints). (&lt;a href=&quot;#Character-Ranges&quot;&gt;Character Ranges&lt;/a&gt; will be explained shortly.) Therefore,</source>
          <target state="translated">これが発生するためには、クラスが反転されてはならず（&lt;a href=&quot;#Negation&quot;&gt;否定を&lt;/a&gt;参照）、文字は明示的に指定されており、複数文字の範囲の一部ではありません（そのエンドポイントの1つとしても）。（&lt;a href=&quot;#Character-Ranges&quot;&gt;文字範囲&lt;/a&gt;については後で簡単に説明します。）したがって、</target>
        </trans-unit>
        <trans-unit id="4962bac27fafbf6fe36c6c22f396afad1ac5eaa1" translate="yes" xml:space="preserve">
          <source>For those following along at home, I'm using version 1.31. It has some bugs, which is good -- we'll uncover them with our tests.</source>
          <target state="translated">自宅でフォローしている人のために、私はバージョン1.31を使っています。いくつかのバグがありますが、これは良いことです。</target>
        </trans-unit>
        <trans-unit id="e5f1c25c243913e44f46f14a2a6685401a32ac3f" translate="yes" xml:space="preserve">
          <source>For those grammatical pedants out there, there's an &lt;code&gt;isn't()&lt;/code&gt; function which is an alias of &lt;code&gt;isnt()&lt;/code&gt; .</source>
          <target state="translated">そこにそれらの文法的pedantsのため、あります &lt;code&gt;isn't()&lt;/code&gt; の別名である機能 &lt;code&gt;isnt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fe2bf8eec8a22fe8c016bab33b57d2281ef0bc2" translate="yes" xml:space="preserve">
          <source>For those grammatical pedants out there, there's an &lt;code&gt;isn't()&lt;/code&gt; function which is an alias of &lt;code&gt;isnt()&lt;/code&gt;.</source>
          <target state="translated">そこにそれらの文法的pedantsのため、あります &lt;code&gt;isn't()&lt;/code&gt; の別名である機能 &lt;code&gt;isnt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5deffbc1fa52453a9ca6f464a2919125f9183261" translate="yes" xml:space="preserve">
          <source>For those of you that choose to use the GNU General Public License, my interpretation of the GNU General Public License is that no Perl script falls under the terms of the GPL unless you explicitly put said script under the terms of the GPL yourself. Furthermore, any object code linked with perl does not automatically fall under the terms of the GPL, provided such object code only adds definitions of subroutines and variables, and does not otherwise impair the resulting interpreter from executing any standard Perl script. I consider linking in C subroutines in this manner to be the moral equivalent of defining subroutines in the Perl language itself. You may sell such an object file as proprietary provided that you provide or offer to provide the Perl source, as specified by the GNU General Public License. (This is merely an alternate way of specifying input to the program.) You may also sell a binary produced by the dumping of a running Perl script that belongs to you, provided that you provide or offer to provide the Perl source as specified by the GPL. (The fact that a Perl interpreter and your code are in the same binary file is, in this case, a form of mere aggregation.) This is my interpretation of the GPL. If you still have concerns or difficulties understanding my intent, feel free to contact me. Of course, the Artistic License spells all this out for your protection, so you may prefer to use that.</source>
          <target state="translated">GNU一般公衆ライセンスを使用することを選択された方のために、GNU一般公衆ライセンスの私の解釈は、あなた自身が明示的にGPLの条項の下にスクリプトを置かない限り、どのPerlスクリプトもGPLの条項に該当しないということです。さらに、Perlとリンクされたオブジェクトコードは、そのようなオブジェクトコードがサブルーチンと変数の定義を追加するだけで、結果として得られるインタプリタが標準的なPerlスクリプトを実行するのに支障をきたさないことを条件に、自動的にGPLの条項には該当しません。このようにCのサブルーチンをリンクすることは、Perl言語自体でサブルーチンを定義することと道徳的に等価だと考えています。このようなオブジェクトファイルは、GNU一般公衆利用許諾書で指定されているPerlのソースを提供するか、提供を申し出れば、プロプライエタリなものとして販売することができます(これは単に別の方法に過ぎません)。(これは単にプログラムへの入力を指定する別の方法です。)また、あなたは、GPLによって指定されたPerlのソースを提供するか、提供することを条件に、あなたに属する実行中のPerlスクリプトのダンプによって生成されたバイナリを販売することもできます。(Perlインタプリタとあなたのコードが同じバイナリファイルにあるという事実は、この場合、単なる集約の一形態です)。これがGPLのわたしの解釈です。それでもなお懸念があったり、わたしの意図を理解するのが困難な場合は、遠慮なくわたしに連絡してください。もちろん、芸術的ライセンスはあなたの保護のためにこのすべてを説明していますので、あなたはそれを使うことを好むかもしれません。</target>
        </trans-unit>
        <trans-unit id="0194baebcc4ad338a3d27044bda911227e0fa177" translate="yes" xml:space="preserve">
          <source>For those of you who don't like additional global variables being created, &lt;code&gt;getopt()&lt;/code&gt; and &lt;code&gt;getopts()&lt;/code&gt; will also accept a hash reference as an optional second argument. Hash keys will be &lt;code&gt;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the switch name) with key values the value of the argument or &lt;code&gt;1&lt;/code&gt; if no argument is specified.</source>
          <target state="translated">追加のグローバル変数を作成したくない場合は、 &lt;code&gt;getopt()&lt;/code&gt; と &lt;code&gt;getopts()&lt;/code&gt; もオプションの2番目の引数としてハッシュ参照を受け入れます。ハッシュキーは &lt;code&gt;x&lt;/code&gt; （ &lt;code&gt;x&lt;/code&gt; はスイッチ名）で、キーの値は引数の値、引数が指定されていない場合は &lt;code&gt;1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="9b7b01e9b9a30ca0a332a8ff42ff01fc2ab10b42" translate="yes" xml:space="preserve">
          <source>For those preferring a higher-level interface to socket programming, the IO::Socket module provides an object-oriented approach. If for some reason you lack this module, you can just fetch IO::Socket from CPAN, where you'll also find modules providing easy interfaces to the following systems: DNS, FTP, Ident (RFC 931), NIS and NISPlus, NNTP, Ping, POP3, SMTP, SNMP, SSLeay, Telnet, and Time--to name just a few.</source>
          <target state="translated">ソケットプログラミングへの高レベルなインターフェースを好む人のために、IO::Socketモジュールはオブジェクト指向のアプローチを提供します。何らかの理由でこのモジュールが不足している場合は、CPANからIO::Socketを取得してください。DNS、FTP、Ident (RFC 931)、NIS と NISPlus、NNTP、Ping、POP3、SMTP、SNMP、SSLeay、Telnet、Timeなどです。</target>
        </trans-unit>
        <trans-unit id="7b6803d170c6a809b2f0929a1db9d42c4a1638fc" translate="yes" xml:space="preserve">
          <source>For those times when it is necessary to have platform-specific code, consider keeping the platform-specific code in one place, making porting to other platforms easier. Use the &lt;a href=&quot;config&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module and the special variable &lt;a href=&quot;perlvar#%24%5EO&quot;&gt;&lt;code&gt;$^O&lt;/code&gt;&lt;/a&gt; to differentiate platforms, as described in &lt;a href=&quot;#PLATFORMS&quot;&gt;&quot;PLATFORMS&quot;&lt;/a&gt;.</source>
          <target state="translated">プラットフォーム固有のコードが必要な場合は、プラットフォーム固有のコードを1つの場所に保持して、他のプラットフォームへの移植を容易にすることを検討してください。&lt;a href=&quot;#PLATFORMS&quot;&gt;「PLATFORMS」で&lt;/a&gt;説明されているように、&lt;a href=&quot;config&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt;モジュールと特別な変数&lt;a href=&quot;perlvar#%24%5EO&quot;&gt; &lt;code&gt;$^O&lt;/code&gt; &lt;/a&gt;を使用してプラットフォームを区別します。</target>
        </trans-unit>
        <trans-unit id="e42062d65775a1867386b08263976fa1b5777e72" translate="yes" xml:space="preserve">
          <source>For those times when it is necessary to have platform-specific code, consider keeping the platform-specific code in one place, making porting to other platforms easier. Use the &lt;code&gt;Config&lt;/code&gt; module and the special variable &lt;code&gt;$^O&lt;/code&gt; to differentiate platforms, as described in &lt;a href=&quot;#PLATFORMS&quot;&gt;PLATFORMS&lt;/a&gt;.</source>
          <target state="translated">プラットフォーム固有のコードが必要な場合は、プラットフォーム固有のコードを1か所にまとめ、他のプラットフォームへの移植を容易にすることを検討してください。&lt;a href=&quot;#PLATFORMS&quot;&gt;PLATFORMSで&lt;/a&gt;説明されているように、 &lt;code&gt;Config&lt;/code&gt; モジュールと特殊変数 &lt;code&gt;$^O&lt;/code&gt; を使用してプラットフォームを区別します。</target>
        </trans-unit>
        <trans-unit id="84af40bcdd6cb4fcbd3aceb5a4aa3593a23036aa" translate="yes" xml:space="preserve">
          <source>For those to work, the Pod-processing subclass of Pod::Simple::PullParser has to have defined a $parser-&amp;gt;run method -- so it is advised that all Pod::Simple::PullParser subclasses do so. See the Synopsis above, or the source for Pod::Simple::RTF.</source>
          <target state="translated">それらが機能するためには、Pod :: Simple :: PullParserのPod-processingサブクラスで$ parser-&amp;gt; runメソッドが定義されている必要があります。そのため、すべてのPod :: Simple :: PullParserサブクラスで定義することをお勧めします。上記の概要またはPod :: Simple :: RTFのソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="57708cdc23a61a116a94a02091f20a5743825ee2" translate="yes" xml:space="preserve">
          <source>For those variables that have an &lt;b&gt;awk&lt;/b&gt; version, both long and short English alternatives are provided. For example, the &lt;code&gt;$/&lt;/code&gt; variable can be referred to either $RS or $INPUT_RECORD_SEPARATOR if you are using the English module.</source>
          <target state="translated">&lt;b&gt;awk&lt;/b&gt;バージョンを持つ変数には、長い英語と短い英語の両方の選択肢が用意されています。たとえば、英語モジュールを使用している場合、 &lt;code&gt;$/&lt;/code&gt; 変数は$ RSまたは$ INPUT_RECORD_SEPARATORのいずれかを参照できます。</target>
        </trans-unit>
        <trans-unit id="77dc5e1818ffcbdcb5923e64ae62b0ce953321cb" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not set this variable directly. Instead, use the function &lt;a href=&quot;#wrap_keyword_plugin&quot;&gt;&quot;wrap_keyword_plugin&quot;&lt;/a&gt;.</source>
          <target state="translated">スレッドセーフのため、モジュールはこの変数を直接設定しないでください。代わりに、関数&lt;a href=&quot;#wrap_keyword_plugin&quot;&gt;「wrap_keyword_plugin」を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d1caee866e0ba0f6f4c3e9009d1a1c337443500a" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not write directly to this array. Instead, use the function &lt;a href=&quot;#wrap_op_checker&quot;&gt;&quot;wrap_op_checker&quot;&lt;/a&gt;.</source>
          <target state="translated">スレッドセーフのため、モジュールはこの配列に直接書き込むべきではありません。代わりに、関数&lt;a href=&quot;#wrap_op_checker&quot;&gt;「wrap_op_checker」を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d9a0a89c68e7b08863ca5af8b26671ca9622ae82" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not write directly to this array. Instead, use the function &lt;a href=&quot;#wrap_op_checker&quot;&gt;wrap_op_checker&lt;/a&gt;.</source>
          <target state="translated">スレッドセーフのために、モジュールはこの配列に直接書き込むべきではありません。代わりに、関数&lt;a href=&quot;#wrap_op_checker&quot;&gt;wrap_op_checkerを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="5cacce03e577b17c33a4569c50a9b7a97dcf2d96" translate="yes" xml:space="preserve">
          <source>For threaded builds, perl requires the context pointer for the current thread, without &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; , perl will call a function to retrieve the context.</source>
          <target state="translated">スレッドビルドの場合、perlは現在のスレッドのコンテキストポインターを必要とします &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; なしでは、perlはコンテキストを取得する関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1e36297db8e3af2703536174bead20acca4a7329" translate="yes" xml:space="preserve">
          <source>For threaded builds, perl requires the context pointer for the current thread, without &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt;, perl will call a function to retrieve the context.</source>
          <target state="translated">スレッド化されたビルドの場合、perlは現在のスレッドのコンテキストポインターを必要とします &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; ない場合、perlは関数を呼び出してコンテキストを取得します。</target>
        </trans-unit>
        <trans-unit id="5847b93f0e1805fa116eb823dc4911eae257671b" translate="yes" xml:space="preserve">
          <source>For three or more arguments if MODE is &lt;code&gt;|-&lt;/code&gt; , the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt; , the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt; ) with the command. See &lt;a href=&quot;../perlipc#Using-open()-for-IPC&quot;&gt;Using open() for IPC in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; to a command that pipes both in</source>
          <target state="translated">3つ以上の引数の場合、MODEが &lt;code&gt;|-&lt;/code&gt; の場合、ファイル名は出力がパイプされるコマンドとして解釈され、MODEが &lt;code&gt;-|&lt;/code&gt; の場合 、ファイル名は出力をパイプするコマンドとして解釈されます。2つの引数（および1つの引数）の形式では、ダッシュ（ &lt;code&gt;-&lt;/code&gt; ）をコマンドに置き換える必要があります。この例については&lt;a href=&quot;../perlipc#Using-open()-for-IPC&quot;&gt;、perlipc&lt;/a&gt;でIPCにopen（）を使用するをご覧ください。（両方をパイプするコマンドを &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ことはできません</target>
        </trans-unit>
        <trans-unit id="6dd4431238a703da90497fd4857cf48e6171b713" translate="yes" xml:space="preserve">
          <source>For three or more arguments if MODE is &lt;code&gt;|-&lt;/code&gt;, the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt;, the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt; ) with the command. See &lt;a href=&quot;perlipc#Using-open()-for-IPC&quot;&gt;Using open() for IPC in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; to a command that pipes both in</source>
          <target state="translated">3つ以上の引数の場合、MODEが &lt;code&gt;|-&lt;/code&gt; の場合、ファイル名は出力がパイプされるコマンドとして解釈され、MODEが &lt;code&gt;-|&lt;/code&gt; の場合、ファイル名は出力をパイプするコマンドとして解釈されます。 2つの引数（および1つの引数）の形式では、ダッシュ（ &lt;code&gt;-&lt;/code&gt; ）をコマンドに置き換える必要があります。この例については&lt;a href=&quot;perlipc#Using-open()-for-IPC&quot;&gt;、perlipc&lt;/a&gt;でIPCにopen（）を使用するをご覧ください。 （両方をパイプするコマンドを &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ことはできません</target>
        </trans-unit>
        <trans-unit id="b283a2fa2bd66d5501a346a99049b4737bd298a9" translate="yes" xml:space="preserve">
          <source>For true color emulators, this module supports attributes of the form &lt;code&gt;r&lt;i&gt;NNN&lt;/i&gt;g&lt;i&gt;NNN&lt;/i&gt;b&lt;i&gt;NNN&lt;/i&gt;&lt;/code&gt; and &lt;code&gt;on_r&lt;i&gt;NNN&lt;/i&gt;g&lt;i&gt;NNN&lt;/i&gt;b&lt;i&gt;NNN&lt;/i&gt;&lt;/code&gt; for all values of</source>
          <target state="translated">トゥルーカラーエミュレータのために、このモジュール支持体は、フォームの属性 &lt;code&gt;r&lt;i&gt;NNN&lt;/i&gt;g&lt;i&gt;NNN&lt;/i&gt;b&lt;i&gt;NNN&lt;/i&gt;&lt;/code&gt; と &lt;code&gt;on_r&lt;i&gt;NNN&lt;/i&gt;g&lt;i&gt;NNN&lt;/i&gt;b&lt;i&gt;NNN&lt;/i&gt;&lt;/code&gt; のすべての値について</target>
        </trans-unit>
        <trans-unit id="b0bc3c26fcb300fd98352a1ae34da3a3601ab99b" translate="yes" xml:space="preserve">
          <source>For true color terminals, the recognized foreground colors are &lt;code&gt;r&lt;i&gt;RRR&lt;/i&gt;g&lt;i&gt;GGG&lt;/i&gt;b&lt;i&gt;BBB&lt;/i&gt;&lt;/code&gt; for</source>
          <target state="translated">トゥルーカラー端末の場合、認識される前景色は &lt;code&gt;r&lt;i&gt;RRR&lt;/i&gt;g&lt;i&gt;GGG&lt;/i&gt;b&lt;i&gt;BBB&lt;/i&gt;&lt;/code&gt; for</target>
        </trans-unit>
        <trans-unit id="cc502894621a0baf5fa2446d6e7920e62cac1005" translate="yes" xml:space="preserve">
          <source>For typed lexicals &lt;code&gt;PadnameTYPE&lt;/code&gt; points at the type stash. For &lt;code&gt;our&lt;/code&gt; lexicals, &lt;code&gt;PadnameOURSTASH&lt;/code&gt; points at the stash of the associated global (so that duplicate &lt;code&gt;our&lt;/code&gt; declarations in the same package can be detected). &lt;code&gt;PadnameGEN&lt;/code&gt; is sometimes used to store the generation number during compilation.</source>
          <target state="translated">型付き字句の場合、 &lt;code&gt;PadnameTYPE&lt;/code&gt; は型stashを指します。以下のために &lt;code&gt;our&lt;/code&gt; レキシカル、 &lt;code&gt;PadnameOURSTASH&lt;/code&gt; の関連するグローバルのスタッシュのポイント（つまり、重複して &lt;code&gt;our&lt;/code&gt; 同一パッケージ内の宣言を検出することができます）。 &lt;code&gt;PadnameGEN&lt;/code&gt; は、コンパイル中に世代番号を格納するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="bf83195223f53cdba1b00e5a9f41ecd342d04331" translate="yes" xml:space="preserve">
          <source>For typed lexicals PadnameTYPE points at the type stash. For &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; lexicals, PadnameOURSTASH points at the stash of the associated global (so that duplicate &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; declarations in the same package can be detected). PadnameGEN is sometimes used to store the generation number during compilation.</source>
          <target state="translated">型付き語彙の場合、PadnameTYPEはstash型を指します。このレキシカルの場合、PadnameOURSTASHは関連するグローバルのスタッシュを指し &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; （そのため、同じパッケージ内の重複 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 宣言を検出できます）。PadnameGENは、コンパイル時に世代番号を格納するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="91986aaa66a7c1fc5ea1ae9b7846d756f92bfc49" translate="yes" xml:space="preserve">
          <source>For various reasons &lt;code&gt;\K&lt;/code&gt; may be significantly more efficient than the equivalent &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; construct, and it is especially useful in situations where you want to efficiently remove something following something else in a string. For instance</source>
          <target state="translated">さまざまな理由により、 &lt;code&gt;\K&lt;/code&gt; は同等の &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; 構成よりもはるかに効率的である可能性があり、文字列内の他の何かに続くものを効率的に削除する状況で特に役立ちます。例えば</target>
        </trans-unit>
        <trans-unit id="177cf62cd78233abf54102693c9e9acbadd8394b" translate="yes" xml:space="preserve">
          <source>For versions &amp;lt; 5.6.0, the changes are. - no use of 'our' (uses 'use vars' instead) - no 'use warnings'</source>
          <target state="translated">バージョン5.6.0未満の場合、変更点は次のとおりです。-'our'を使用しない（代わりに 'use vars'を使用する）-'use warnings'を使用しない</target>
        </trans-unit>
        <trans-unit id="60941c7eb5c54adfbab7ac22e457a8c4e15f2100" translate="yes" xml:space="preserve">
          <source>For writing RFC 1950 files/buffers, see the companion module IO::Compress::Deflate.</source>
          <target state="translated">RFC 1950 のファイル/バッファの書き方については、コンパニオンモジュール IO::Compress::Deflate を参照してください。</target>
        </trans-unit>
        <trans-unit id="685182a7768729bc793033bd0e68d3c4f3af5f73" translate="yes" xml:space="preserve">
          <source>For writing RFC 1951 files/buffers, see the companion module IO::Compress::RawDeflate.</source>
          <target state="translated">RFC 1951 のファイル/バッファの書き込みについては、コンパニオンモジュール IO::Compress::RawDeflate を参照してください。</target>
        </trans-unit>
        <trans-unit id="9243b703bb54f6641362690a1ee88fd13adf9954" translate="yes" xml:space="preserve">
          <source>For writing RFC 1952 files/buffers, see the companion module IO::Compress::Gzip.</source>
          <target state="translated">RFC 1952 のファイル/バッファの書き方については、コンパニオンモジュール IO::Compress::Gzip を参照してください。</target>
        </trans-unit>
        <trans-unit id="9bf658d02b726edd2f1c254066ded7736fd6d5a9" translate="yes" xml:space="preserve">
          <source>For writing bzip2 files/buffers, see the companion module IO::Compress::Bzip2.</source>
          <target state="translated">bzip2 ファイル/バッファの書き込みについては、コンパニオンモジュール IO::Compress::Bzip2 を参照してください。</target>
        </trans-unit>
        <trans-unit id="e13d75b855f37f1330f6f4c1ef3a45768526e035" translate="yes" xml:space="preserve">
          <source>For writing zip files/buffers, see the companion module IO::Compress::Zip.</source>
          <target state="translated">zip ファイル/バッファの書き込みについては、コンパニオンモジュール IO::Compress::Zip を参照してください。</target>
        </trans-unit>
        <trans-unit id="535406d475920b171aa234460dc25648f86b16d6" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl has added the &lt;code&gt;Non_Canonical&lt;/code&gt; decomposition type to mean any of the several compatibility decompositions.</source>
          <target state="translated">便宜上、Perlはいくつかの互換性分解のいずれかを意味する &lt;code&gt;Non_Canonical&lt;/code&gt; 分解タイプを追加しています。</target>
        </trans-unit>
        <trans-unit id="53ad46f1c41b22f84b5d3b3f5d59b0ffd2ec8775" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl sets up a few special filehandles that are already open when you run. These include &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; , &lt;code&gt;STDERR&lt;/code&gt; , and &lt;code&gt;ARGV&lt;/code&gt; . Since those are pre-opened, you can use them right away without having to go to the trouble of opening them yourself:</source>
          <target state="translated">便宜上、Perlは実行時にすでに開いているいくつかの特別なファイルハンドルを設定します。これらには、 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; 、 &lt;code&gt;STDERR&lt;/code&gt; 、および &lt;code&gt;ARGV&lt;/code&gt; が含まれます。それらは事前に開かれているので、自分で開く手間をかけずにすぐに使用できます。</target>
        </trans-unit>
        <trans-unit id="25fbf113182de9f9ab0a2170f995f3fe1e22cfbf" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl sets up a few special filehandles that are already open when you run. These include &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, &lt;code&gt;STDERR&lt;/code&gt;, and &lt;code&gt;ARGV&lt;/code&gt;. Since those are pre-opened, you can use them right away without having to go to the trouble of opening them yourself:</source>
          <target state="translated">便宜上、Perlは、実行時にすでに開いているいくつかの特別なファイルハンドルを設定します。これらには、 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; 、 &lt;code&gt;STDERR&lt;/code&gt; 、および &lt;code&gt;ARGV&lt;/code&gt; が含まれます。それらは事前に開かれているので、自分で開く手間をかけずにすぐに使用できます。</target>
        </trans-unit>
        <trans-unit id="30e11a0cc028d202d8463cc9e66bddef5da4b46a" translate="yes" xml:space="preserve">
          <source>For, begin, and end will let you have regions of text/code/data that are not generally interpreted as normal Pod text, but are passed directly to particular formatters, or are otherwise special. A formatter that can use that format will use the region, otherwise it will be completely ignored.</source>
          <target state="translated">For,begin,endを使用すると、一般的には通常のPodテキストとして解釈されないが、特定のフォーマッタに直接渡されたり、その他の特殊なテキスト/コード/データのリージョンを持つことができます。そのフォーマットを使用できるフォーマッタはそのリージョンを使用しますが、そうでない場合は完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="f18b2922a2b4011038aaeff6686a95e8916e8ea4" translate="yes" xml:space="preserve">
          <source>Forbes, Nevill. 1964.</source>
          <target state="translated">フォーブス ネビル 1964.</target>
        </trans-unit>
        <trans-unit id="1335af6d26a5e69176b5dbf3edf53ab8893f8491" translate="yes" xml:space="preserve">
          <source>Forbidden in &lt;a href=&quot;#PERL5OPT&quot;&gt;&quot;&lt;code&gt;PERL5OPT&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#PERL5OPT&quot;&gt;「 &lt;code&gt;PERL5OPT&lt;/code&gt; 」では&lt;/a&gt;禁止されています。</target>
        </trans-unit>
        <trans-unit id="75b520175307f045a1bd5432ec6c11ebe784b1ea" translate="yes" xml:space="preserve">
          <source>Force a title for the page (don't try to determine it from the content). The value of this string should already be &amp;amp;-escaped.</source>
          <target state="translated">ページのタイトルを強制します（コンテンツから決定しないでください）。この文字列の値は、すでにエスケープされているはずです。</target>
        </trans-unit>
        <trans-unit id="000583668b82be86fbb138b24c7dd36579b394a2" translate="yes" xml:space="preserve">
          <source>Force bsd_glob() to return an error when it encounters a directory it cannot open or read. Ordinarily bsd_glob() continues to find matches.</source>
          <target state="translated">bsd_glob()が、開いたり読んだりできないディレクトリに遭遇した場合にエラーを返すようにしました。通常は bsd_glob()はマッチするディレクトリを見つけ続けます。</target>
        </trans-unit>
        <trans-unit id="f44e8f61765329d123a6aeba46d29dc380866fc3" translate="yes" xml:space="preserve">
          <source>Force byte semantics rather than character semantics</source>
          <target state="translated">文字セマンティクスではなく、バイトセマンティクスを強制する</target>
        </trans-unit>
        <trans-unit id="8868271cc9c0d31ff6a2edce741289dbb00116c6" translate="yes" xml:space="preserve">
          <source>Force record-mode access</source>
          <target state="translated">レコードモードでのアクセスを強制的に行う</target>
        </trans-unit>
        <trans-unit id="8e86f983a8a1431bbb9867472f48fd4b7df452e5" translate="yes" xml:space="preserve">
          <source>Force stream mode</source>
          <target state="translated">強制ストリームモード</target>
        </trans-unit>
        <trans-unit id="60e0b8c5cc987a7d85e9bad122ef6f776848a3ca" translate="yes" xml:space="preserve">
          <source>Force the specified action, when it normally would have failed. Use this to install a module even if its tests fail. When you use this option, -i is not optional for installing a module when you need to force it:</source>
          <target state="translated">指定されたアクションを、通常は失敗するはずのものを強制的に実行します。テストが失敗してもモジュールをインストールするには、これを使用します。このオプションを使用する場合、強制的にモジュールをインストールする必要がある場合、 -i はオプションではありません。</target>
        </trans-unit>
        <trans-unit id="e13bf2b7599ac8779de2f3726115bde91fbbaded" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task it would normally refuse to do. Force takes as arguments a method name to be invoked and any number of additional arguments to pass that method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">通常は拒否するタスクをCPANに強制的に実行させます。Forceは、呼び出されるメソッド名と、そのメソッドを渡すための追加の引数を引数として受け取ります。オブジェクトの内部は必要な変更を取得するため、CPAN.pmはアクションの実行を拒否しません。上記の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="6824e435b9c0d512ec0dbbda74a3d74da3f722c9" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPANに、通常は拒否するタスクを強制的に実行させます。Forceは、呼び出されるメソッド名と、呼び出されたメソッドに渡す必要がある追加の引数を引数として受け取ります。オブジェクトの内部は必要な変更を取得するため、CPAN.pmはアクションの実行を拒否しません。上記の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="5c9a0d4c05ea685c4b81ce563d38fd33d0aeea12" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. The &lt;code&gt;force&lt;/code&gt; is passed recursively to all contained objects. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPANに、通常は拒否するタスクを強制的に実行させます。 Forceは、呼び出されるメソッド名と、呼び出されたメソッドに渡す必要がある追加の引数を引数として受け取ります。オブジェクトの内部は必要な変更を取得するため、CPAN.pmはアクションの実行を拒否しません。 &lt;code&gt;force&lt;/code&gt; すべて含まれているオブジェクトに再帰的に渡されます。上記の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="f116ab22ad8af5d1edf47652c0fde4ebe02b3188" translate="yes" xml:space="preserve">
          <source>Forces EXPR to be interpreted in scalar context and returns the value of EXPR.</source>
          <target state="translated">EXPRを強制的にスカラコンテキストで解釈し、EXPRの値を返します。</target>
        </trans-unit>
        <trans-unit id="500df2d2fe4d1817ceeca100a5e6d863aec7944d" translate="yes" xml:space="preserve">
          <source>Forces a reload of all indices.</source>
          <target state="translated">すべてのインデックスのリロードを強制的に行います。</target>
        </trans-unit>
        <trans-unit id="ec27ff3ecad1733cd6196463fe06ab0d70361cc8" translate="yes" xml:space="preserve">
          <source>Forcing AutoLoader to Load a Function</source>
          <target state="translated">オートローダーに関数を強制的にロードさせる</target>
        </trans-unit>
        <trans-unit id="4a87f71febe991ae2954e6d639d10481ac9e6d2d" translate="yes" xml:space="preserve">
          <source>Forcing Unicode in Perl (Or Unforcing Unicode in Perl)</source>
          <target state="translated">Perl での強制 Unicode (または Perl での強制 Unicode の解除)</target>
        </trans-unit>
        <trans-unit id="fa74775094fcf161164e8e879c58a4b633ace5dd" translate="yes" xml:space="preserve">
          <source>Forcing a Stack Trace</source>
          <target state="translated">スタックトレースの強制</target>
        </trans-unit>
        <trans-unit id="f6c5999fd3e671fe9fe9df464e28ef5ab21206ca" translate="yes" xml:space="preserve">
          <source>Forcing big- or little-endian byte-order on floating-point values for data exchange can work only if all platforms use the same binary representation such as IEEE floating-point. Even if all platforms are using IEEE, there may still be subtle differences. Being able to use &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; on floating-point values can be useful, but also dangerous if you don't know exactly what you're doing. It is not a general way to portably store floating-point values.</source>
          <target state="translated">データ交換のために浮動小数点値にビッグエンディアンまたはリトルエンディアンのバイト順を強制することは、すべてのプラットフォームがIEEE浮動小数点などの同じバイナリ表現を使用する場合にのみ機能します。すべてのプラットフォームがIEEEを使用している場合でも、微妙な違いがある可能性があります。浮動小数点値で &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; を使用できると便利ですが、何をしているのか正確に知らない場合は危険です。浮動小数点値を移植可能に格納する一般的な方法ではありません。</target>
        </trans-unit>
        <trans-unit id="a4120203a1a581a0f521e545bd747729f9324076" translate="yes" xml:space="preserve">
          <source>Forcing literal &lt;code&gt;&quot;{&quot;&lt;/code&gt; characters to be escaped enables the Perl language to be extended in various ways in future releases. To avoid needlessly breaking existing code, the restriction is not enforced in contexts where there are unlikely to ever be extensions that could conflict with the use there of &lt;code&gt;&quot;{&quot;&lt;/code&gt; as a literal. Those that are not potentially ambiguous do not warn; those that are do raise a non-deprecation warning.</source>
          <target state="translated">リテラルの &lt;code&gt;&quot;{&quot;&lt;/code&gt; 文字を強制的にエスケープすることで、Perl言語を将来のリリースでさまざまな方法で拡張できるようになります。既存のコードを不必要に壊さないようにするために、リテラルとしての &lt;code&gt;&quot;{&quot;&lt;/code&gt; 使用と競合する可能性のある拡張機能が存在する可能性が低いコンテキストでは、制限は適用されません。潜在的にあいまいでないものは警告しません。それらは非推奨ではない警告を発します。</target>
        </trans-unit>
        <trans-unit id="2a2aff76f86eceb241e972218e6327a677071fd4" translate="yes" xml:space="preserve">
          <source>Forcing literal &lt;code&gt;&quot;{&quot;&lt;/code&gt; characters to be escaped enables the Perl language to be extended in various ways in future releases. To avoid needlessly breaking existing code, the restriction is not enforced in contexts where there are unlikely to ever be extensions that could conflict with the use there of &lt;code&gt;&quot;{&quot;&lt;/code&gt; as a literal. Those that are not potentially ambiguous do not warn; those that are raise this warning. This makes sure that an inadvertent typo doesn't silently cause the pattern to compile to something unintended.</source>
          <target state="translated">リテラルの &lt;code&gt;&quot;{&quot;&lt;/code&gt; 文字を強制的にエスケープすることで、Perl言語を将来のリリースでさまざまな方法で拡張できるようになります。既存のコードを不必要に壊さないようにするために、リテラルとしての &lt;code&gt;&quot;{&quot;&lt;/code&gt; 使用と競合する可能性のある拡張機能が存在する可能性が低いコンテキストでは、制限は適用されません。潜在的にあいまいでないものは警告しません。この警告を発している人。これにより、不注意によるタイプミスによって、パターンが意図しないものにコンパイルされることはありません。</target>
        </trans-unit>
        <trans-unit id="1a2f3fb748bf9872f9144c47c518431483cca725" translate="yes" xml:space="preserve">
          <source>Forcing literal &lt;code&gt;{&lt;/code&gt; characters to be escaped will enable the Perl language to be extended in various ways in future releases. To avoid needlessly breaking existing code, the restriction is not enforced in contexts where there are unlikely to ever be extensions that could conflict with the use there of &lt;code&gt;{&lt;/code&gt; as a literal. A non-deprecation warning that the left brace is being taken literally is raised in contexts where there could be confusion about it.</source>
          <target state="translated">リテラル &lt;code&gt;{&lt;/code&gt; 文字をエスケープするように強制すると、将来のリリースでPerl言語をさまざまな方法で拡張できるようになります。既存のコードを不必要に壊さないようにするために、リテラルとしての &lt;code&gt;{&lt;/code&gt; の使用と競合する可能性のある拡張機能が存在する可能性が低いコンテキストでは、制限は適用されません。左中括弧が文字通り取られているという非推奨ではない警告は、それについて混乱が生じる可能性がある状況で発生します。</target>
        </trans-unit>
        <trans-unit id="4fbdd84d18aabd3608a03167cf0b04d250e02a5e" translate="yes" xml:space="preserve">
          <source>Foreach Loops</source>
          <target state="translated">フォアリーチループ</target>
        </trans-unit>
        <trans-unit id="93c05f167e6324782fd78c5a0e445ec6daf56dac" translate="yes" xml:space="preserve">
          <source>Forgetting the slab when the root is attached is not strictly necessary, but avoids potential problems with &lt;code&gt;CvROOT&lt;/code&gt; being written over. There is code all over the place, both in core and on CPAN, that does things with &lt;code&gt;CvROOT&lt;/code&gt;, so forgetting the slab makes things more robust and avoids potential problems.</source>
          <target state="translated">ルートが接続されているときにスラブを忘れることは厳密には必要ありませんが、 &lt;code&gt;CvROOT&lt;/code&gt; が上書きされるという潜在的な問題を回避します。コアとCPANの両方に、 &lt;code&gt;CvROOT&lt;/code&gt; で処理を行うコードがいたるところにあるため、スラブを忘れると、処理がより堅牢になり、潜在的な問題が回避されます。</target>
        </trans-unit>
        <trans-unit id="cac22bd0e8a69bd849b7be8d79bbdfbf8b44d9d5" translate="yes" xml:space="preserve">
          <source>Forking</source>
          <target state="translated">Forking</target>
        </trans-unit>
        <trans-unit id="3142b84bb5d35f3314b7947362fd81b2dce6a441" translate="yes" xml:space="preserve">
          <source>Forking pipe open() constructs will be supported in future.</source>
          <target state="translated">Forking pipe open()コンストラクトは将来的にサポートされる予定です。</target>
        </trans-unit>
        <trans-unit id="f853f7806e672e510ff7755e13ef33f65bbcd825" translate="yes" xml:space="preserve">
          <source>Forking pipe open() not yet implemented</source>
          <target state="translated">Forking pipe open()は未実装</target>
        </trans-unit>
        <trans-unit id="b45c7831984bcd95238c44bf2a0dc36f9a8d555e" translate="yes" xml:space="preserve">
          <source>Formalized use of &quot;x_&quot; or &quot;X_&quot; for all custom keys not listed in the official spec</source>
          <target state="translated">公式仕様に記載されていないすべてのカスタムキーに &quot;x_&quot;または &quot;X_&quot;を使用することを正式化</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="9becd32add767b485457525967fd97972db5511d" translate="yes" xml:space="preserve">
          <source>Format %s redefined</source>
          <target state="translated">フォーマット %s の再定義</target>
        </trans-unit>
        <trans-unit id="c82bb36a64035b3b3d413194135e78450e65b2bf" translate="yes" xml:space="preserve">
          <source>Format Pod as RTF</source>
          <target state="translated">PodをRTFとしてフォーマットする</target>
        </trans-unit>
        <trans-unit id="fee1af11bb1eb0f8161a549c43ed448ab786fe6a" translate="yes" xml:space="preserve">
          <source>Format Pod as plaintext</source>
          <target state="translated">Podをプレーンテキストとしてフォーマットする</target>
        </trans-unit>
        <trans-unit id="7740187b3e5d9aaa6412746917f4e8aaed9600e7" translate="yes" xml:space="preserve">
          <source>Format Pod as validating XHTML</source>
          <target state="translated">XHTMLを検証するようにPodをフォーマットする</target>
        </trans-unit>
        <trans-unit id="13163280307f8765d0afe577cafca7728ff8779c" translate="yes" xml:space="preserve">
          <source>Format Variables</source>
          <target state="translated">フォーマット変数</target>
        </trans-unit>
        <trans-unit id="658ebab97c49c09371e52addf4b43398f48345ba" translate="yes" xml:space="preserve">
          <source>Format a range of tracks on the disk. &lt;code&gt;$opOutBuf&lt;/code&gt; should be &lt;code&gt;[]&lt;/code&gt;. &lt;code&gt;$pInBuf&lt;/code&gt; should contain a &lt;code&gt;FORMAT_PARAMETERS&lt;/code&gt; data structure:</source>
          <target state="translated">ディスク上のトラックの範囲をフォーマットします。 &lt;code&gt;$opOutBuf&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; である必要があります。 &lt;code&gt;$pInBuf&lt;/code&gt; は、 &lt;code&gt;FORMAT_PARAMETERS&lt;/code&gt; データ構造が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="3a1ad455810d4298663c009286d3773850b6eb92" translate="yes" xml:space="preserve">
          <source>Format defined.</source>
          <target state="translated">フォーマットが定義されています。</target>
        </trans-unit>
        <trans-unit id="68cc7e7b5a994c04fdbb008754704e79e2bf0460" translate="yes" xml:space="preserve">
          <source>Format is unknown.</source>
          <target state="translated">フォーマットは不明です。</target>
        </trans-unit>
        <trans-unit id="62d7763868e1e1fce004f54dea4cbe8be71286b3" translate="yes" xml:space="preserve">
          <source>Format not terminated</source>
          <target state="translated">フォーマットが終了していない</target>
        </trans-unit>
        <trans-unit id="45682ea5e61958bde7db300ab1675b68475b3238" translate="yes" xml:space="preserve">
          <source>Format the output with ANSI color escape sequences. Using this option requires that Term::ANSIColor be installed on your system.</source>
          <target state="translated">ANSIカラーエスケープシーケンスで出力をフォーマットします。このオプションを使用するには、Term::ANSIColorがシステムにインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="d1b6f323b8fa9a716a3f6f4fbd038ac4ec784196" translate="yes" xml:space="preserve">
          <source>Format the output with overstrike printing. Bold text is rendered as character, backspace, character. Italics and file names are rendered as underscore, backspace, character. Many pagers, such as &lt;b&gt;less&lt;/b&gt;, know how to convert this to bold or underlined text.</source>
          <target state="translated">上書き印刷で出力をフォーマットします。太字のテキストは、文字、バックスペース、文字としてレンダリングされます。イタリックとファイル名は、アンダースコア、バックスペース、文字として表示されます。&lt;b&gt;less&lt;/b&gt;などの多くのポケットベルは、これを太字または下線付きのテキストに変換する方法を知っています。</target>
        </trans-unit>
        <trans-unit id="0070c0e56a4846d0ff72c495dfd2d1f1c3c98911" translate="yes" xml:space="preserve">
          <source>Formats and prints the specified arguments to &lt;code&gt;STDOUT&lt;/code&gt; . See also &lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;.</source>
          <target state="translated">指定した引数をフォーマットして &lt;code&gt;STDOUT&lt;/code&gt; に出力します。&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ea18c66989050711a934f41e9e7124ce36766a76" translate="yes" xml:space="preserve">
          <source>Formats and prints the specified arguments to &lt;code&gt;STDOUT&lt;/code&gt;. See also &lt;a href=&quot;perlfunc#printf&quot;&gt;&quot;printf&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">指定された引数をフォーマットして &lt;code&gt;STDOUT&lt;/code&gt; に出力します。&lt;a href=&quot;perlfunc#printf&quot;&gt;perlfuncの「printf」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="59a537a80bc24fcc0360e5469eed8ee51556b708" translate="yes" xml:space="preserve">
          <source>Formats the error as a human readable string. Usually there's no reason to call this directly, as it is used automatically if an &lt;code&gt;autodie::exception&lt;/code&gt; object is ever used as a string.</source>
          <target state="translated">エラーを人間が読める文字列としてフォーマットします。 &lt;code&gt;autodie::exception&lt;/code&gt; オブジェクトが文字列として使用された場合に自動的に使用されるため、通常、これを直接呼び出す理由はありません。</target>
        </trans-unit>
        <trans-unit id="a3359bd12a9edc6e1c703375835a3905e7b83f91" translate="yes" xml:space="preserve">
          <source>Formats, like packages and subroutines, are declared rather than executed, so they may occur at any point in your program. (Usually it's best to keep them all together though.) They have their own namespace apart from all the other &quot;types&quot; in Perl. This means that if you have a function named &quot;Foo&quot;, it is not the same thing as having a format named &quot;Foo&quot;. However, the default name for the format associated with a given filehandle is the same as the name of the filehandle. Thus, the default format for STDOUT is named &quot;STDOUT&quot;, and the default format for filehandle TEMP is named &quot;TEMP&quot;. They just look the same. They aren't.</source>
          <target state="translated">パッケージやサブルーチンのようなフォーマットは、実行されるのではなく宣言されます。(通常、これらはすべて一緒にしておくのがベストですが)これらは Perl の他のすべての「型」とは別に、独自の名前空間を持っています。つまり、&quot;Foo &quot;という名前の関数があっても、&quot;Foo &quot;という名前のフォーマットがあるのと同じではないということです。しかし、与えられたファイルハンドルに関連付けられたフォーマットのデフォルト名は、ファイルハンドルの名前と同じです。したがって、STDOUTのデフォルトフォーマットは &quot;STDOUT &quot;と名付けられ、ファイルハンドルTEMPのデフォルトフォーマットは &quot;TEMP &quot;と名付けられます。同じように見えますが、そうではありません。そうではありません。</target>
        </trans-unit>
        <trans-unit id="3aa38e01a2ea62a3e9036d79767d88c6e4c54250" translate="yes" xml:space="preserve">
          <source>Formatted Printing of &lt;code&gt;Size_t&lt;/code&gt; and &lt;code&gt;SSize_t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Size_t&lt;/code&gt; および &lt;code&gt;SSize_t&lt;/code&gt; のフォーマットされた印刷</target>
        </trans-unit>
        <trans-unit id="7065a0ba158c8bf72a9807e17d920ae802c062cf" translate="yes" xml:space="preserve">
          <source>Formatted Printing of IVs, UVs, and NVs</source>
          <target state="translated">IV、UV、NVのフォーマット印刷</target>
        </trans-unit>
        <trans-unit id="3f91d8b8190697527ab2203b1a54e8d753a09c00" translate="yes" xml:space="preserve">
          <source>Formatted Printing of SVs</source>
          <target state="translated">SVのフォーマット印刷</target>
        </trans-unit>
        <trans-unit id="6b0cdffc8a50f65ca184b86bbe57f179a524d53d" translate="yes" xml:space="preserve">
          <source>Formatted Printing of Size_t and SSize_t</source>
          <target state="translated">Size_tとSSize_tのフォーマット印刷</target>
        </trans-unit>
        <trans-unit id="52397319c79cf7ef279efffb8337575643b1dc1d" translate="yes" xml:space="preserve">
          <source>Formatted Printing of Strings</source>
          <target state="translated">文字列のフォーマット印刷</target>
        </trans-unit>
        <trans-unit id="1cdce8da6a96362891f6b39fce51bfbad9c0c1b1" translate="yes" xml:space="preserve">
          <source>Formatters live under this namespace. &lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2::Formatter::TAP&lt;/a&gt; is the only formatter currently. It is acceptable for third party distributions to create new formatters under this namespace.</source>
          <target state="translated">フォーマッターはこの名前空間の下にあります。&lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2 :: Formatter :: TAP&lt;/a&gt;は現在唯一のフォーマッターです。サードパーティのディストリビューションがこの名前空間の下に新しいフォーマッタを作成することは許容されます。</target>
        </trans-unit>
        <trans-unit id="7de31570e601ac2cf7d8ef74834052348b7c4a16" translate="yes" xml:space="preserve">
          <source>Formatters may also choose to note errors/warnings as comments, besides or instead of emitting them otherwise (as in messages to STDERR, or &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;ing).</source>
          <target state="translated">フォーマッタは、エラーまたは警告をコメントとして、それ以外に（STDERRへのメッセージや &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; ように）送信する代わりに、コメントとして選択することもできます。</target>
        </trans-unit>
        <trans-unit id="648475a8d60812d388dd7555ebe7a1f2e56621f3" translate="yes" xml:space="preserve">
          <source>Formatters may also choose to note errors/warnings as comments, besides or instead of emitting them otherwise (as in messages to STDERR, or &lt;code&gt;die&lt;/code&gt;ing).</source>
          <target state="translated">フォーマッタは、エラー/警告をコメントとして記録することを選択することもできます。それ以外の場合（STDERRへのメッセージや &lt;code&gt;die&lt;/code&gt; ）にエラー/警告を出力する代わりに。</target>
        </trans-unit>
        <trans-unit id="4dc6255b00d803dd218371c361f3f87de9be4719" translate="yes" xml:space="preserve">
          <source>Formatters may also insert additional comments, including: the release date of the Pod formatter program, the contact address for the author(s) of the formatter, the current time, the name of input file, the formatting options in effect, version of Perl used, etc.</source>
          <target state="translated">フォーマッタは、Podフォーマッタプログラムのリリース日、フォーマッタ作成者の連絡先、現在の時刻、入力ファイル名、有効なフォーマットオプション、使用したPerlのバージョンなど、追加のコメントを挿入することもできます。</target>
        </trans-unit>
        <trans-unit id="6d3ccf37c71280b1f96c4a2ec7fbdbe45afef9e1" translate="yes" xml:space="preserve">
          <source>Formatters may choose to ignore the markup for purposes of resolving the link and use only the renderable characters in the section name, as in:</source>
          <target state="translated">フォーマッタは、リンクを解決する目的でマークアップを無視して、セクション名の中でレンダリング可能な文字だけを使用することを選択することができます。</target>
        </trans-unit>
        <trans-unit id="a4aca088317275f96f5f54edc120b828492554a8" translate="yes" xml:space="preserve">
          <source>Formatters may choose to just not support the S format code, especially in cases where the output format simply has no NBSP character/code and no code for &quot;don't break this stuff across lines&quot;.</source>
          <target state="translated">フォーマッタはSフォーマットコードをサポートしないことを選択するかもしれません。特に、出力フォーマットが単純にNBSP文字/コードを持たず、&quot;行をまたいでこれを壊さないでください &quot;というコードを持たない場合には。</target>
        </trans-unit>
        <trans-unit id="699f62e78d3e814aa9e7d06b34b37d145e111b38" translate="yes" xml:space="preserve">
          <source>Formatting Codes</source>
          <target state="translated">書式化コード</target>
        </trans-unit>
        <trans-unit id="ff5d2a34321adb03892b713850bf4a3ad301ed8c" translate="yes" xml:space="preserve">
          <source>Formatting base class</source>
          <target state="translated">基底クラスの書式設定</target>
        </trans-unit>
        <trans-unit id="ff9c8d057ff674339898e634f59656ac3a52e2b6" translate="yes" xml:space="preserve">
          <source>Formatting codes absolutely cannot span paragraphs. If a code is opened in one paragraph, and no closing code is found by the end of that paragraph, the Pod parser must close that formatting code, and should complain (as in &quot;Unterminated I code in the paragraph starting at line 123: 'Time objects are not...'&quot;). So these two paragraphs:</source>
          <target state="translated">組版コードは絶対に段落にまたがってはいけません。もしある段落でコードが開かれていて、その段落の最後までに終了コードが見つからなかった場合、Podパーサはその書式設定コードを閉じなければならず、文句を言わなければなりません(&quot;Unterminated I code in the paragraph started at line 123:'Time objects is not....'のように)。つまり、この2つの段落。</target>
        </trans-unit>
        <trans-unit id="7b18147368e5bdc22767f902bd572f166454ac0e" translate="yes" xml:space="preserve">
          <source>Formerly &quot;ji&quot;. Usually in Hebrew script.</source>
          <target state="translated">以前は「ジ」。通常はヘブライ文字で。</target>
        </trans-unit>
        <trans-unit id="57f396d4904134a67c253fe83cd6c2ee5405024e" translate="yes" xml:space="preserve">
          <source>Formerly, a reference to an array whose initial element happens to hold a reference to a hash. You used to be able to treat a pseudohash reference as either an array reference or a hash reference. Pseduohashes are no longer supported.</source>
          <target state="translated">以前は、初期要素がハッシュへの参照を保持している配列への参照でした。以前は擬似ハッシュ参照を配列参照またはハッシュ参照として扱うことができましたが、現在はサポートされていません。擬似ハッシュはサポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="2a5ce139e82e57663c70ee87ddef8c784f5c288d" translate="yes" xml:space="preserve">
          <source>Fortunately PerlIO also supports line buffer if you tell PerlIO to use one instead of fixed buffer. Since ISO-2022-JP is guaranteed to revert to ASCII at the end of the line, partial character will never happen when line buffer is used.</source>
          <target state="translated">幸いなことに、PerlIOは固定バッファの代わりにラインバッファを使うようにPerlIOに指示すれば、ラインバッファもサポートしています。ISO-2022-JPは行末にASCIIに戻ることが保証されているので、ラインバッファを使用しても部分文字が発生することはありません。</target>
        </trans-unit>
        <trans-unit id="ffc76003dd6c8c370f036f11a5ee11287e442db4" translate="yes" xml:space="preserve">
          <source>Fortunately iso-2022-kr is hardly used (according to Jungshik) and MIME-* are very unlikely to be fed to PerlIO because they are for mail headers. See &lt;a href=&quot;Encode::MIME::Header&quot;&gt;Encode::MIME::Header&lt;/a&gt; for details.</source>
          <target state="translated">幸い、iso-2022-krはほとんど使用されておらず（Jungshikによると）、MIME- *はメールヘッダー用であるため、PerlIOに供給される可能性はほとんどありません。詳細については、&lt;a href=&quot;Encode::MIME::Header&quot;&gt;Encode :: MIME :: Header&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="966aae1b0b42de1dff8ae5df0d18d67c8938fc59" translate="yes" xml:space="preserve">
          <source>Fortunately, all TAP output is perfect. In the event that it is not, this method will return parser errors. Note that a junk line which the parser does not recognize is &lt;code&gt;not&lt;/code&gt; an error. This allows this parser to handle future versions of TAP. The following are all TAP errors reported by the parser:</source>
          <target state="translated">幸い、すべてのTAP出力は完璧です。そうでない場合、このメソッドはパーサーエラーを返します。パーサーが認識しないジャンクラインはエラーでは &lt;code&gt;not&lt;/code&gt; ことに注意してください。これにより、このパーサーはTAPの将来のバージョンを処理できるようになります。以下は、パーサーによって報告されるすべてのTAPエラーです。</target>
        </trans-unit>
        <trans-unit id="87a70390fb6164a360255317db997a9d16310113" translate="yes" xml:space="preserve">
          <source>Fortunately, all encodings that come with &lt;code&gt;Encode&lt;/code&gt; core are &lt;code&gt;PerlIO&lt;/code&gt; -savvy except for &lt;code&gt;hz&lt;/code&gt; and &lt;code&gt;ISO-2022-kr&lt;/code&gt; . For the gory details, see &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt; and &lt;a href=&quot;encode/perlio&quot;&gt;Encode::PerlIO&lt;/a&gt;.</source>
          <target state="translated">さいわい、 &lt;code&gt;Encode&lt;/code&gt; コアに付属するすべてのエンコーディングは、 &lt;code&gt;hz&lt;/code&gt; と &lt;code&gt;ISO-2022-kr&lt;/code&gt; を除き、 &lt;code&gt;PerlIO&lt;/code&gt; に対応しています。詳細については、&lt;a href=&quot;encode/encoding&quot;&gt;Encode :: Encoding&lt;/a&gt;および&lt;a href=&quot;encode/perlio&quot;&gt;Encode :: PerlIOを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3cc869134794943778857772327c1252b4ab432b" translate="yes" xml:space="preserve">
          <source>Fortunately, all encodings that come with &lt;code&gt;Encode&lt;/code&gt; core are &lt;code&gt;PerlIO&lt;/code&gt;-savvy except for &lt;code&gt;hz&lt;/code&gt; and &lt;code&gt;ISO-2022-kr&lt;/code&gt;. For the gory details, see &lt;a href=&quot;Encode::Encoding&quot;&gt;Encode::Encoding&lt;/a&gt; and &lt;a href=&quot;Encode::PerlIO&quot;&gt;Encode::PerlIO&lt;/a&gt;.</source>
          <target state="translated">幸い、 &lt;code&gt;Encode&lt;/code&gt; コアに付属するすべてのエンコーディングは、 &lt;code&gt;hz&lt;/code&gt; と &lt;code&gt;ISO-2022-kr&lt;/code&gt; を除いて、 &lt;code&gt;PerlIO&lt;/code&gt; に精通しています。厄介な詳細については、&lt;a href=&quot;Encode::Encoding&quot;&gt;Encode :: Encoding&lt;/a&gt;および&lt;a href=&quot;Encode::PerlIO&quot;&gt;Encode :: PerlIOを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="97fed1654379ec219795384ff23955f1b1779107" translate="yes" xml:space="preserve">
          <source>Fortunately, most web servers for the mainframe will correctly translate the &lt;code&gt;\n&lt;/code&gt; in the following statement to its ASCII equivalent (&lt;code&gt;\r&lt;/code&gt; is the same under both Unix and z/OS):</source>
          <target state="translated">幸い、メインフレームのほとんどのWebサーバーは、次のステートメントの &lt;code&gt;\n&lt;/code&gt; を同等のASCIIに正しく変換します（ &lt;code&gt;\r&lt;/code&gt; はUnixとz / OSの両方で同じです）。</target>
        </trans-unit>
        <trans-unit id="f8866d15529a7057b903143f3bead50cd0b88e71" translate="yes" xml:space="preserve">
          <source>Fortunately, sometimes this kernel &quot;feature&quot; can be disabled. Unfortunately, there are two ways to disable it. The system can simply outlaw scripts with any set-id bit set, which doesn't help much. Alternately, it can simply ignore the set-id bits on scripts.</source>
          <target state="translated">幸いなことに、このカーネルの「機能」を無効にできることがあります。残念ながら、これを無効にするには二つの方法があります。システムは、スクリプトに set-id ビットが設定されているスクリプトを単に禁止することができますが、これはあまり役に立ちません。もう一つの方法は、スクリプトの set-id ビットを無視することです。</target>
        </trans-unit>
        <trans-unit id="6af648858c608d0be1ab15acfdb6b1e06ea9ea8e" translate="yes" xml:space="preserve">
          <source>Fortunately, there is a way to get your change smoke-tested on various OSes: push it to a &quot;smoke-me&quot; branch and wait for certain automated smoke-testers to report the results from their OSes. A &quot;smoke-me&quot; branch is identified by the branch name: specifically, as seen on github.com it must be a local branch whose first name component is precisely &lt;code&gt;smoke-me&lt;/code&gt;.</source>
          <target state="translated">幸い、さまざまなOSで変更をスモークテストする方法があります。それを「smoke-me」ブランチにプッシュし、特定の自動スモークテスターがOSからの結果を報告するのを待ちます。「smoke-me」ブランチはブランチ名で識別されます。具体的には、github.comに表示されているように、名前コンポーネントが正確に &lt;code&gt;smoke-me&lt;/code&gt; であるローカルブランチである必要があります。</target>
        </trans-unit>
        <trans-unit id="43f164c645e50a4c0c3f29fb561f1f66b8762dff" translate="yes" xml:space="preserve">
          <source>Fortunately, you only need to know 10% of what's in the main page to get 90% of the benefit. This page will show you that 10%.</source>
          <target state="translated">幸いなことに、メインページにある10%の内容を知るだけで、90%の利益を得ることができます。このページではその10%を紹介します。</target>
        </trans-unit>
        <trans-unit id="c005499309629c2dd1540384f9d88388c2791d54" translate="yes" xml:space="preserve">
          <source>Forums</source>
          <target state="translated">Forums</target>
        </trans-unit>
        <trans-unit id="486575b261d582ad380850eb24eb0b7d18eeabf0" translate="yes" xml:space="preserve">
          <source>Found = in conditional, should be ==</source>
          <target state="translated">Found=条件付きでは ==となるはずです。</target>
        </trans-unit>
        <trans-unit id="72f02d71c41e2d53b1dcf4e519cc2cf9f6c84e4b" translate="yes" xml:space="preserve">
          <source>Fourth:</source>
          <target state="translated">Fourth:</target>
        </trans-unit>
        <trans-unit id="7babeb8dda00cbd2717c46859a597a0ac26af8c6" translate="yes" xml:space="preserve">
          <source>Frame Listing Output Examples</source>
          <target state="translated">フレームリスト出力例</target>
        </trans-unit>
        <trans-unit id="6a7b59ce4c9987f7a80daf7fbb85fb8ee735fa63" translate="yes" xml:space="preserve">
          <source>Frame listing</source>
          <target state="translated">フレームリスト</target>
        </trans-unit>
        <trans-unit id="e7de308f5cb42aaa93cfde86991651a82d8099b3" translate="yes" xml:space="preserve">
          <source>Framework for localization</source>
          <target state="translated">ローカライゼーションのためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="3b8bd7caa7cebf02d88ee7c7bdba92155a41dbde" translate="yes" xml:space="preserve">
          <source>Framework for parsing Pod</source>
          <target state="translated">Podを解析するためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="e02dc7d8740e65411d2c6e0fa117007a185bdc92" translate="yes" xml:space="preserve">
          <source>Framework for writing test tools that all work together.</source>
          <target state="translated">みんなで協力してテストツールを書くためのフレームワーク。</target>
        </trans-unit>
        <trans-unit id="e3772ac4b4db87b4a8dbfa59ef43cd1a8ad29515" translate="yes" xml:space="preserve">
          <source>France</source>
          <target state="translated">France</target>
        </trans-unit>
        <trans-unit id="53885018ee90a10b7bc48c0249fdec51585e188f" translate="yes" xml:space="preserve">
          <source>Free (as in beer) books</source>
          <target state="translated">無料(ビールのように)本</target>
        </trans-unit>
        <trans-unit id="aa5f1cde3ceb6e8e452fb592aecdb66eecb02f83" translate="yes" xml:space="preserve">
          <source>Free an op and its children. Only use this when an op is no longer linked to from any optree.</source>
          <target state="translated">opとその子孫を解放します。これは、オプツリーからオプにリンクされなくなった場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="2045f9df7f3ddf3a7ca6cf0c4237136b9a9c596f" translate="yes" xml:space="preserve">
          <source>Free an op. Only use this when an op is no longer linked to from any optree.</source>
          <target state="translated">オペを自由にする。これは、オプツリーからリンクされていないオプがなくなった場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="2b3fa1d351090b766faffaa6e4edfa86f57458a1" translate="yes" xml:space="preserve">
          <source>Free any magic storage used by the SV. See &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVが使用する魔法のストレージを解放します。 &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="eb0e32e0a58271635c4ef7fbb31d2d946383137e" translate="yes" xml:space="preserve">
          <source>Free any magic storage used by the SV. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">SVで使用されている魔法のストレージを解放します。 &lt;code&gt;sv_magic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d06c8f4cf2eee9b839846a180873fbffe8e5ae3e" translate="yes" xml:space="preserve">
          <source>Free of legacy weight, providing a lightweight and easy to learn API. Has a growing addon ecosystem. It is best used for smaller projects and very easy to learn for beginners.</source>
          <target state="translated">レガシーな重さから解放され、軽量で学習しやすいAPIを提供しています。成長しているアドオンエコシステムを持っています。小規模なプロジェクトに最適で、初心者には非常に簡単に学習できます。</target>
        </trans-unit>
        <trans-unit id="e846928fcc144c7bd2db6d810b3f5976c347e3ce" translate="yes" xml:space="preserve">
          <source>Free the SV at offset po in the current pad.</source>
          <target state="translated">現在のパッドのオフセット po で SV を解放します。</target>
        </trans-unit>
        <trans-unit id="7da50e46bbfce92aaf6cbf3942c4d4d8527613b3" translate="yes" xml:space="preserve">
          <source>Free the storage associated with the tied handle referenced by</source>
          <target state="translated">で参照される紐付きハンドルに関連付けられたストレージを解放します。</target>
        </trans-unit>
        <trans-unit id="97f264039513cfe75ea6d652749d14c6132a0656" translate="yes" xml:space="preserve">
          <source>Free the storage associated with the tied scalar referenced by</source>
          <target state="translated">で参照されるタイドスカラに関連付けられたストレージを解放します。</target>
        </trans-unit>
        <trans-unit id="5ffb1739dd01438357afbd5211d358f61cea80dc" translate="yes" xml:space="preserve">
          <source>Free/Used</source>
          <target state="translated">Free/Used</target>
        </trans-unit>
        <trans-unit id="b845fdaff1bf49c014dff506cfa6bdc63dadd835" translate="yes" xml:space="preserve">
          <source>FreeBSD</source>
          <target state="translated">FreeBSD</target>
        </trans-unit>
        <trans-unit id="7b25f5206df2f27aaf3f69eecf641cc773e18f45" translate="yes" xml:space="preserve">
          <source>FreeBSD core dumps from readdir_r with ithreads</source>
          <target state="translated">FreeBSD のコアダンプを ithreads で readdir_r から取得します。</target>
        </trans-unit>
        <trans-unit id="1ab41e56a5bfe7c16abb7ddd77f527fd993f7e3c" translate="yes" xml:space="preserve">
          <source>FreeBSD documentation on syslog, &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=syslog&quot;&gt;https://www.freebsd.org/cgi/man.cgi?query=syslog&lt;/a&gt;</source>
          <target state="translated">Syslogに関するFreeBSDのドキュメント、&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=syslog&quot;&gt;https：//www.freebsd.org/cgi/man.cgi？query =&lt;/a&gt; syslog</target>
        </trans-unit>
        <trans-unit id="783b076c39e51c97d9c6b0f16d22fc640c671b54" translate="yes" xml:space="preserve">
          <source>FreeMINT</source>
          <target state="translated">FreeMINT</target>
        </trans-unit>
        <trans-unit id="fffe09c3013e58f78e37a3579c3723dc99001d0b" translate="yes" xml:space="preserve">
          <source>Freely available locale definitions</source>
          <target state="translated">自由に利用できるロケールの定義</target>
        </trans-unit>
        <trans-unit id="1a3d88c35190d4b2447d53bf45570277fd2a7644" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of a hash, leaving it empty. The XS equivalent of &lt;code&gt;%hash = ()&lt;/code&gt; . See also &lt;a href=&quot;#hv_undef&quot;&gt;hv_undef&lt;/a&gt;.</source>
          <target state="translated">ハッシュのすべての要素を解放し、空のままにします。 &lt;code&gt;%hash = ()&lt;/code&gt; 相当するXS 。&lt;a href=&quot;#hv_undef&quot;&gt;hv_undef&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3619c6805b304d66238dd7986132809b2f50d48c" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of a hash, leaving it empty. The XS equivalent of &lt;code&gt;%hash = ()&lt;/code&gt;. See also &lt;a href=&quot;#hv_undef&quot;&gt;&quot;hv_undef&quot;&lt;/a&gt;.</source>
          <target state="translated">ハッシュのすべての要素を解放し、空のままにします。 &lt;code&gt;%hash = ()&lt;/code&gt; 相当するXS 。&lt;a href=&quot;#hv_undef&quot;&gt;「hv_undef」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="204adb2932f25e9d327706044e24e711fafa2c73" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of an array, leaving it empty. The XS equivalent of &lt;code&gt;@array = ()&lt;/code&gt;. See also &lt;a href=&quot;#av_undef&quot;&gt;&quot;av_undef&quot;&lt;/a&gt;.</source>
          <target state="translated">配列のすべての要素を解放し、空のままにします。 &lt;code&gt;@array = ()&lt;/code&gt; 相当するXS 。&lt;a href=&quot;#av_undef&quot;&gt;「av_undef」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="6ef04d800d79b6e48aac64a67f720581e376f905" translate="yes" xml:space="preserve">
          <source>Frequently Asked Question (although not necessarily frequently answered, especially if the answer appears in the Perl FAQ shipped standard with Perl).</source>
          <target state="translated">よくある質問 (必ずしも頻繁に回答されているわけではありませんが、特に Perl と一緒に出荷された Perl FAQ に回答が掲載されている場合)。</target>
        </trans-unit>
        <trans-unit id="36c4bb75f29e144b11648c4e613d655770d581ce" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions About MakeMaker</source>
          <target state="translated">MakeMakerについてよくある質問</target>
        </trans-unit>
        <trans-unit id="760b682e1618036dbf7afb1d053c8ac3b71a79ee" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions about IO::Compress</source>
          <target state="translated">IO::Compress に関するよくある質問</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="82bcb61f5c6950aaf9895e515089a465e02bfa4c" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://www.hp.com/products1/evolution/9000/faqs.html&quot;&gt;http://www.hp.com/products1/evolution/9000/faqs.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.hp.com/products1/evolution/9000/faqs.html&quot;&gt;http://www.hp.com/products1/evolution/9000/faqs.html&lt;/a&gt;から</target>
        </trans-unit>
        <trans-unit id="448f239f3b8eb7ee92d28473b865c15012705b26" translate="yes" xml:space="preserve">
          <source>From C this function will be called with the following statements.</source>
          <target state="translated">C言語からは、この関数は次のような文で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bc39bc50c4c934bc3c2b768db25fc832488e05a0" translate="yes" xml:space="preserve">
          <source>From Greek &amp;sigma;ύ&amp;nu;&amp;tau;&amp;alpha;&amp;xi;&amp;iota;&amp;sigmaf;, &amp;ldquo;with-arrangement&amp;rdquo;. How things (particularly symbols) are put together with each other.</source>
          <target state="translated">ギリシャ語の&amp;sigma;ύ&amp;nu;&amp;tau;&amp;alpha;&amp;xi;&amp;iota;&amp;sigmaf;から、「配置あり」。物事（特に記号）を互いに組み合わせる方法。</target>
        </trans-unit>
        <trans-unit id="42d1e5fd6ff04686a3ddd2292e038e6c2c64eded" translate="yes" xml:space="preserve">
          <source>From Help Consulting, for Windows.</source>
          <target state="translated">ヘルプコンサルティングより、Windows用。</target>
        </trans-unit>
        <trans-unit id="6d2aa9bfde75e9c0b676ce0baae311d9c3d43bd0" translate="yes" xml:space="preserve">
          <source>From Storable 3.05 to 3.13 we probed for the stack recursion limit for references, arrays and hashes to a maximal depth of ~1200-35000, otherwise we might fall into a stack-overflow. On JSON::XS this limit is 512 btw. With references not immediately referencing each other there's no such limit yet, so you might fall into such a stack-overflow segfault.</source>
          <target state="translated">Storable 3.05 から 3.13 までは、参照、配列、ハッシュのスタック再帰の限界を最大深度 ~1200-35000 まで探っていましたが、そうしないとスタックオーバーフローに陥る可能性があります。JSON::XS では、この制限は 512 です。すぐにお互いを参照しない参照については、まだそのような制限はありませんので、このようなスタックオーバーフローのセグメンテーションフォールトに陥る可能性があります。</target>
        </trans-unit>
        <trans-unit id="1cd8946f3bf218d8104a97d7a0815f8406dc267b" translate="yes" xml:space="preserve">
          <source>From Swift: someone who eats eggs big end first. Also used of computers that store the most significant &lt;b&gt;byte&lt;/b&gt; of a word at a lower byte address than the least significant byte. Often considered superior to little-endian machines. See also &lt;b&gt;little-endian&lt;/b&gt;.</source>
          <target state="translated">Swiftから：卵をまず大口で食べる人。ワードの最上位&lt;b&gt;バイト&lt;/b&gt;を最下位&lt;b&gt;バイト&lt;/b&gt;よりも低いバイトアドレスに格納するコンピューターでも使用されます。多くの場合、リトルエンディアンマシンよりも優れていると考えられています。&lt;b&gt;リトルエンディアン&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="38010d6f3cc7fb3edd4ad08b9ae938ebd7fc3879" translate="yes" xml:space="preserve">
          <source>From Swift: someone who eats eggs little end first. Also used of computers that store the least significant &lt;b&gt;byte&lt;/b&gt; of a word at a lower byte address than the most significant byte. Often considered superior to big-endian machines. See also &lt;b&gt;big-endian&lt;/b&gt;.</source>
          <target state="translated">スウィフトから：卵をほとんど食べない人が最初に終わります。ワードの最下位&lt;b&gt;バイト&lt;/b&gt;を最上位バイトよりも低いバイトアドレスに格納するコンピューターでも使用されます。多くの場合、ビッグエンディアンマシンよりも優れていると考えられています。&lt;b&gt;ビッグエンディアン&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c08b9bc65a29044d3e4730ed45ffc7b9d726760c" translate="yes" xml:space="preserve">
          <source>From XS:</source>
          <target state="translated">XSから。</target>
        </trans-unit>
        <trans-unit id="326d38f7c69627e156c632c28265510708e39ea4" translate="yes" xml:space="preserve">
          <source>From how far away you can see a variable, looking through one. Perl has two visibility mechanisms. It does &lt;b&gt;dynamic scoping&lt;/b&gt; of &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;&lt;b&gt;variables&lt;/b&gt;, meaning that the rest of the &lt;b&gt;block&lt;/b&gt;, and any &lt;b&gt;subroutines&lt;/b&gt; that are called by the rest of the block, can see the variables that are local to the block. Perl does &lt;b&gt;lexical scoping&lt;/b&gt; of &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables, meaning that the rest of the block can see the variable, but other subroutines called by the block</source>
          <target state="translated">どれだけ遠くから変数を見ることができ、変数を調べます。Perlには2つの可視性メカニズムがあります。これは、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; &lt;b&gt;変数の&lt;/b&gt;&lt;b&gt;動的スコープ&lt;/b&gt;を行い&lt;b&gt;ます&lt;/b&gt;。つまり、&lt;b&gt;ブロック&lt;/b&gt;の残りの部分、および&lt;b&gt;ブロック&lt;/b&gt;の残りの部分によって&lt;b&gt;呼び出さ&lt;/b&gt;れるすべての&lt;b&gt;サブルーチン&lt;/b&gt;は、ブロックに対してローカルな変数を参照できます。Perlは &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数の&lt;b&gt;字句スコープ&lt;/b&gt;を行います。つまり、ブロックの残りの部分は変数を見ることができますが、ブロックによって呼び出される他のサブルーチンは&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fadb3a78d4bb92b7a5d61874beb1d613ade09b65" translate="yes" xml:space="preserve">
          <source>From how far away you can see a variable, looking through one. Perl has two visibility mechanisms. It does &lt;b&gt;dynamic scoping&lt;/b&gt; of &lt;code&gt;local&lt;/code&gt;&lt;b&gt;variables&lt;/b&gt;, meaning that the rest of the &lt;b&gt;block&lt;/b&gt;, and any &lt;b&gt;subroutines&lt;/b&gt; that are called by the rest of the block, can see the variables that are local to the block. Perl does &lt;b&gt;lexical scoping&lt;/b&gt; of &lt;code&gt;my&lt;/code&gt; variables, meaning that the rest of the block can see the variable, but other subroutines called by the block</source>
          <target state="translated">どれだけ遠くから変数を見ることができますか。Perlには2つの可視性メカニズムがあります。それはありません&lt;b&gt;動的スコープ&lt;/b&gt;の &lt;code&gt;local&lt;/code&gt; &lt;b&gt;変数を&lt;/b&gt;、残りのことを意味し、&lt;b&gt;ブロック&lt;/b&gt;、および任意の&lt;b&gt;サブルーチン&lt;/b&gt;ブロックの残りの部分によって呼び出され、ブロックにローカルな変数を参照することができます。Perlは &lt;code&gt;my&lt;/code&gt; 変数の&lt;b&gt;字句スコープ&lt;/b&gt;を実行します。つまり、ブロックの残りの部分は変数を見ることができますが、他のサブルーチンはブロックによって呼び出されます</target>
        </trans-unit>
        <trans-unit id="4ec9190cea97ea723cc9a362f6fe7dfac252edbc" translate="yes" xml:space="preserve">
          <source>From that comes:</source>
          <target state="translated">そこから来ている。</target>
        </trans-unit>
        <trans-unit id="29b77f4f72351713632aed665cfdc425384ab9fa" translate="yes" xml:space="preserve">
          <source>From the beginning Test2 was built with introspection capabilities. With Test::Builder it was difficult at best to capture test tool output for verification. Test2 Makes it easy with &lt;code&gt;Test2::API::intercept()&lt;/code&gt;.</source>
          <target state="translated">Test2は当初から、イントロスペクション機能を使用して構築されていました。Test :: Builderでは、検証のためにテストツールの出力をキャプチャすることはせいぜい困難でした。Test2 &lt;code&gt;Test2::API::intercept()&lt;/code&gt; で簡単にできます。</target>
        </trans-unit>
        <trans-unit id="3d95a8fc94b9e55edd8dcfe43899b426ece0c816" translate="yes" xml:space="preserve">
          <source>From the command line, you can use the &lt;code&gt;cpan&lt;/code&gt; command's &lt;code&gt;-l&lt;/code&gt; switch:</source>
          <target state="translated">コマンドラインから、 &lt;code&gt;cpan&lt;/code&gt; コマンドの &lt;code&gt;-l&lt;/code&gt; スイッチを使用できます。</target>
        </trans-unit>
        <trans-unit id="0863cef08a10ff845303e3c15c48a839f8d3f9f0" translate="yes" xml:space="preserve">
          <source>From the command line, you can use the djtar utility provided with DJGPP to unpack and expand these files. For example:</source>
          <target state="translated">コマンドラインから、DJGPP に付属の djtar ユーティリティを使用して、これらのファイルを解凍して展開することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="374969a1bf6cf09ab316c531b85ee98729ec817d" translate="yes" xml:space="preserve">
          <source>From the command line:</source>
          <target state="translated">コマンドラインから</target>
        </trans-unit>
        <trans-unit id="d445d94e4dd2201f89b37cfbbd3453a506d83550" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl array. From the C level this is a pointer to an AV.</source>
          <target state="translated">perl レベルでは perl 配列への参照です。C レベルでは AV へのポインタです。</target>
        </trans-unit>
        <trans-unit id="7f363a7d4784c758d110ec4bcb974b6c5c5684cc" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl array. From the C level this is a pointer to an AV. This is a fixed variant of T_AVREF that decrements the refcount appropriately when returning an AV*. Introduced in perl 5.15.4.</source>
          <target state="translated">perl レベルでは perl 配列への参照です。CレベルではAVへのポインタです。これは、AV*を返すときに refcountを適切にデクリメントするT_AVREFの固定型です。perl 5.15.4で導入されました。</target>
        </trans-unit>
        <trans-unit id="c48843f42734f52f4bf8423d32ddff93043f82f2" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl hash. From the C level this is a pointer to an HV.</source>
          <target state="translated">perl レベルでは perl ハッシュへの参照です。C レベルでは HV へのポインタです。</target>
        </trans-unit>
        <trans-unit id="ea09196132f236e8b94218aff14a881b8e5f0e36" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl hash. From the C level this is a pointer to an HV. This is a fixed variant of T_HVREF that decrements the refcount appropriately when returning an HV*. Introduced in perl 5.15.4.</source>
          <target state="translated">perl レベルでは perl ハッシュへの参照です。CレベルではHVへのポインタです。これは、HV*を返すときに refcountを適切にデクリメントするT_HVREFの修正版です。perl 5.15.4で導入されました。</target>
        </trans-unit>
        <trans-unit id="65032422ec42df48f1031883e99a8b1b19f04fbb" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl subroutine (e.g. $sub = sub { 1 };). From the C level this is a pointer to a CV.</source>
          <target state="translated">perlレベルでは,これはperlのサブルーチンへの参照です(例:$sub=sub{1 };).Cレベルでは,これはCVへのポインタです.</target>
        </trans-unit>
        <trans-unit id="5b7e3054d443080121c5abde91b6e93c7323ccbd" translate="yes" xml:space="preserve">
          <source>From the shell, saying</source>
          <target state="translated">貝殻から、と言って</target>
        </trans-unit>
        <trans-unit id="856c187ed12caf89813ef33a23ce9aead8f27ac1" translate="yes" xml:space="preserve">
          <source>From the viewpoint of parsing, lexical variable scope and closures,</source>
          <target state="translated">構文解析の観点から、語彙変数のスコープとクロージャ。</target>
        </trans-unit>
        <trans-unit id="c5f6042fc1cf780179e4cf386ecd882f23297382" translate="yes" xml:space="preserve">
          <source>From then on, you use the &lt;code&gt;maketext&lt;/code&gt; function to access entries in whatever lexicon(s) belong to the language handle you got. So, this:</source>
          <target state="translated">それ以降、 &lt;code&gt;maketext&lt;/code&gt; 関数を使用して、取得した言語ハンドルに属するレキシコンのエントリにアクセスします。したがって、この：</target>
        </trans-unit>
        <trans-unit id="cb76778ecb1d96c51a66d0bba753022fa7deeffa" translate="yes" xml:space="preserve">
          <source>From there we can get more complex. If the hash values are the same, we can provide a secondary sort on the hash key.</source>
          <target state="translated">そこからさらに複雑になります。ハッシュ値が同じであれば、ハッシュキーの二次ソートを提供することができます。</target>
        </trans-unit>
        <trans-unit id="be6cd2dadd81d9d30843c2caf56c66b7990b6773" translate="yes" xml:space="preserve">
          <source>From this version on the typical SCM (software configuration management) directories are ignored. These are: RCS, CVS, SCCS, .svn, .hg, .git, .sync</source>
          <target state="translated">このバージョンからは、典型的なSCM(ソフトウェア構成管理)ディレクトリは無視されます。これらは以下の通りです。RCS,CVS,SCCS,.svn,.hg,.git,.sync</target>
        </trans-unit>
        <trans-unit id="71c8fee3496d71438c7692e0f92208858f4356f7" translate="yes" xml:space="preserve">
          <source>From this, we can see that the date column stretches from column 1 to column 10 - ten characters wide. The &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;-ese for &quot;character&quot; is &lt;code&gt;A&lt;/code&gt; , and ten of them are &lt;code&gt;A10&lt;/code&gt; . So if we just wanted to extract the dates, we could say this:</source>
          <target state="translated">これから、日付列が列1から列10-10文字幅に伸びていることがわかります。「キャラクター」の &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; -eseは &lt;code&gt;A&lt;/code&gt; で、そのうちの10個は &lt;code&gt;A10&lt;/code&gt; です。したがって、日付を抽出したいだけであれば、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="7734fc90d948e23d1b414855d84cf8ecd4e180ea" translate="yes" xml:space="preserve">
          <source>From this, we can see that the date column stretches from column 1 to column 10 - ten characters wide. The &lt;code&gt;pack&lt;/code&gt;-ese for &quot;character&quot; is &lt;code&gt;A&lt;/code&gt;, and ten of them are &lt;code&gt;A10&lt;/code&gt;. So if we just wanted to extract the dates, we could say this:</source>
          <target state="translated">これから、日付列が列1から列10まで伸びていることがわかります-10文字幅。「キャラクター」の &lt;code&gt;pack&lt;/code&gt; -eseは &lt;code&gt;A&lt;/code&gt; で、そのうちの10個は &lt;code&gt;A10&lt;/code&gt; です。したがって、日付を抽出したいだけの場合は、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="05d91e5e8ffd6992838dcbb57817947850fffcf4" translate="yes" xml:space="preserve">
          <source>From time to time, we may mark language constructs and features which we consider to have been mistakes as &lt;b&gt;discouraged&lt;/b&gt;. Discouraged features aren't currently candidates for removal, but we may later deprecate them if they're found to stand in the way of a significant improvement to the Perl core.</source>
          <target state="translated">時々、間違いであると思われる言語構成や機能を&lt;b&gt;落胆&lt;/b&gt;とマークすることがあります。推奨されない機能は現在削除の候補ではありませんが、Perlコアの大幅な改善を妨げていることが判明した場合は、後で廃止する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9ce1fc606f2c6dccba9ea48ccc91b1833372fcf5" translate="yes" xml:space="preserve">
          <source>From version 0.08 Test::Tester no longer requires you to included anything special in your test modules. All you need to do is</source>
          <target state="translated">バージョン 0.08 以降、Test::Tester はテストモジュールに特別なものを含める必要がなくなりました。必要なのは</target>
        </trans-unit>
        <trans-unit id="593b03925f9977503d5df5613ab598e54813e4e2" translate="yes" xml:space="preserve">
          <source>Full Listing of Core Typemaps</source>
          <target state="translated">コアタイプマップの完全なリスト</target>
        </trans-unit>
        <trans-unit id="3cdc98534162db08f980cd3bed5d9763956dd55f" translate="yes" xml:space="preserve">
          <source>Full introspection and manipulation</source>
          <target state="translated">完全な内観と操作</target>
        </trans-unit>
        <trans-unit id="d09e10be00d851e0182ce329905088abb2292e7d" translate="yes" xml:space="preserve">
          <source>Full path to the file that contains the module</source>
          <target state="translated">モジュールを含むファイルへのフルパス</target>
        </trans-unit>
        <trans-unit id="88b7f18d45a35c05e7ccbf8a7c6f0754274bc0a0" translate="yes" xml:space="preserve">
          <source>Full perl(1) documentation: &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;</source>
          <target state="translated">完全なperl（1）ドキュメント：&lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ae7c415f9bc9a638ee7ef79d8b74d7761263bd9" translate="yes" xml:space="preserve">
          <source>Full syntax: &lt;code&gt;(?(R1)&lt;i&gt;then&lt;/i&gt;|&lt;i&gt;else&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">完全な構文： &lt;code&gt;(?(R1)&lt;i&gt;then&lt;/i&gt;|&lt;i&gt;else&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa7054d0e0a5e06ed1cc20f1f072c76f977dd60d" translate="yes" xml:space="preserve">
          <source>Full-Text Searching in Perl</source>
          <target state="translated">Perlでの全文検索</target>
        </trans-unit>
        <trans-unit id="682bb398b04ad7022d81aacdf9c1056cae45f8ba" translate="yes" xml:space="preserve">
          <source>Full-fledged support for I/O layers is now implemented provided Perl is configured to use PerlIO as its IO system (which has been the default since 5.8, and the only supported configuration since 5.16).</source>
          <target state="translated">Perl がその IO システムとして PerlIO を使用するように設定されていれば、I/O レイヤの本格的なサポートが実装されます (これは 5.8 以降のデフォルトであり、5.16 以降はサポートされている唯一の設定です)。</target>
        </trans-unit>
        <trans-unit id="d52b0f8730cd0cb1d50429fd4e409ebd2910fe3a" translate="yes" xml:space="preserve">
          <source>Full-fledged support for I/O layers is now implemented provided Perl is configured to use PerlIO as its IO system (which is now the default).</source>
          <target state="translated">PerlがそのIOシステムとしてPerlIOを使用するように設定されている場合には、I/Oレイヤの本格的なサポートが実装されました(これが現在のデフォルトです)。</target>
        </trans-unit>
        <trans-unit id="950f94e743e045d06f1163691f50c811b3f47b68" translate="yes" xml:space="preserve">
          <source>Fully build and test the Perl distribution. Make sure that no tests are failing with &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;aout_test&lt;/code&gt; targets; fix the bugs in Perl and the Perl test suite detected by these tests. Make sure that &lt;code&gt;all_test&lt;/code&gt; make target runs as clean as possible. Check that</source>
          <target state="translated">Perlディストリビューションを完全にビルドしてテストします。 &lt;code&gt;test&lt;/code&gt; および &lt;code&gt;aout_test&lt;/code&gt; ターゲットで失敗するテストがないことを確認してください。これらのテストで検出されたPerlおよびPerlテストスイートのバグを修正します。 &lt;code&gt;all_test&lt;/code&gt; make targetが可能な限りクリーンに実行されることを確認してください。それを確認します</target>
        </trans-unit>
        <trans-unit id="f1bfa995d978ef3acade5580113154220abfa2db" translate="yes" xml:space="preserve">
          <source>Fully install Perl, including &lt;code&gt;installcmd&lt;/code&gt; target. Copy the generated DLLs to &lt;code&gt;LIBPATH&lt;/code&gt; ; copy the numbered Perl executables (as in</source>
          <target state="translated">&lt;code&gt;installcmd&lt;/code&gt; ターゲットを含むPerlを完全にインストールします。生成されたDLLを &lt;code&gt;LIBPATH&lt;/code&gt; にコピーします。番号の付いたPerl実行可能ファイルをコピーします（</target>
        </trans-unit>
        <trans-unit id="99f3567e2bde52f4b96012b41d9d714eec37e4aa" translate="yes" xml:space="preserve">
          <source>Fully install Perl, including &lt;code&gt;installcmd&lt;/code&gt; target. Copy the generated DLLs to &lt;code&gt;LIBPATH&lt;/code&gt;; copy the numbered Perl executables (as in</source>
          <target state="translated">&lt;code&gt;installcmd&lt;/code&gt; ターゲットを含むPerlを完全にインストールします。生成されたDLLを &lt;code&gt;LIBPATH&lt;/code&gt; にコピーします; 番号が付けられたPerl実行可能ファイルをコピーします（</target>
        </trans-unit>
        <trans-unit id="1ca8ebe0f337f78ac7630965aa7b6d0b1fa91b13" translate="yes" xml:space="preserve">
          <source>Fully qualified name of currently executing subroutine.</source>
          <target state="translated">現在実行中のサブルーチンの完全修飾名。</target>
        </trans-unit>
        <trans-unit id="4e532a9d21737b951917e92fa5d156c715111a5d" translate="yes" xml:space="preserve">
          <source>Fully qualified subroutine names are also supported. For example,</source>
          <target state="translated">完全修飾されたサブルーチン名もサポートされています。例えば</target>
        </trans-unit>
        <trans-unit id="7135f28e774ac1a9fabb4c75a3d1bb1ada58e29b" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;DumpArray()&lt;/code&gt; allows dumping of multiple values (useful when you need to analyze returns of functions).</source>
          <target state="translated">関数 &lt;code&gt;DumpArray()&lt;/code&gt; を使用すると、複数の値をダンプできます（関数の戻り値を分析する必要がある場合に役立ちます）。</target>
        </trans-unit>
        <trans-unit id="5d11bb00bc4644e08a9be122f115fe39fdd04b5f" translate="yes" xml:space="preserve">
          <source>Function Interface</source>
          <target state="translated">機能インタフェース</target>
        </trans-unit>
        <trans-unit id="89ef743a3244fbdb65d0570367a96fdb2440073a" translate="yes" xml:space="preserve">
          <source>Function Templates</source>
          <target state="translated">関数テンプレート</target>
        </trans-unit>
        <trans-unit id="91de2ff9bd67512188b1968893d91c44f301c251" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. E.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; .</source>
          <target state="translated">関数名とメソッド名はすべて小文字であるので最適に機能するようです。たとえば、 &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85f600d91f4cace966ddaea2e9a3d2be93969bec" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. E.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt;.</source>
          <target state="translated">関数名とメソッド名は、すべて小文字として最適に機能するようです。例： &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c032df1ce97ecae06d159792d2c62e3c02159e83" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. e.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; .</source>
          <target state="translated">関数名とメソッド名はすべて小文字であるので最適に機能するようです。たとえば、 &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e7bac5bb1b9241c2780005ca2ff7be3a854eb31" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. e.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt;.</source>
          <target state="translated">関数名とメソッド名は、すべて小文字として最適に機能するようです。例： &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2da6539548ec3184ac7c103a14b5d4f64beb7ddc" translate="yes" xml:space="preserve">
          <source>Function called by &lt;code&gt;do_readline&lt;/code&gt; to spawn a glob (or do the glob inside perl on VMS). This code used to be inline, but now perl uses &lt;code&gt;File::Glob&lt;/code&gt; this glob starter is only used by miniperl during the build process, or when PERL_EXTERNAL_GLOB is defined. Moving it away shrinks</source>
          <target state="translated">グロブを生成するために &lt;code&gt;do_readline&lt;/code&gt; によって呼び出される関数（またはVMSのperl内でグロブを実行する）。このコードは以前はインラインでしたが、現在perlは &lt;code&gt;File::Glob&lt;/code&gt; 使用しています。このglobスターターは、ビルドプロセス中、またはPERL_EXTERNAL_GLOBが定義されている場合にのみminiperlによって使用されます。それを遠ざけると縮む</target>
        </trans-unit>
        <trans-unit id="7563cdfec9156bd4ab2730b5c15af3243697fb62" translate="yes" xml:space="preserve">
          <source>Function called by &lt;code&gt;do_readline&lt;/code&gt; to spawn a glob (or do the glob inside perl on VMS). This code used to be inline, but now perl uses &lt;code&gt;File::Glob&lt;/code&gt; this glob starter is only used by miniperl during the build process. Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.</source>
          <target state="translated">globを生成するために &lt;code&gt;do_readline&lt;/code&gt; によって呼び出される関数（またはVMSのperl内でglobを実行）。このコードは以前はインラインでしたが、現在perlは &lt;code&gt;File::Glob&lt;/code&gt; 使用しています。このglobスターターは、ビルドプロセス中にminiperlによってのみ使用されます。移動するとpp_hot.cが縮小します。pp_hot.cを縮小すると、perlの高速化に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bafe79121d248a43efee1030dde6b5487d10f09b" translate="yes" xml:space="preserve">
          <source>Function calls during interpreter cleanup</source>
          <target state="translated">インタープリタのクリーンアップ中の関数呼び出し</target>
        </trans-unit>
        <trans-unit id="9280dd949d70767204a52eb0931da78deffc83d9" translate="yes" xml:space="preserve">
          <source>Function must be called with an already existing SV like</source>
          <target state="translated">のような既存の SV で関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="4c163bb94cadf4c0b267646fb2499c8ab2b33874" translate="yes" xml:space="preserve">
          <source>Function pointer, pointing at a function used to handle extended keywords. The function should be declared as</source>
          <target state="translated">拡張キーワードを扱うために用いられる関数を指す関数ポインタ。この関数は、以下のように宣言されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="5aeb99e40f76181fa3f90deee80d452fce2173d9" translate="yes" xml:space="preserve">
          <source>Function to (heuristically) canonicalize a C type. Works to some degree with C++ types.</source>
          <target state="translated">C の型を(ヒューリスティックに)正規化するための関数。C++の型でもある程度動作します.</target>
        </trans-unit>
        <trans-unit id="280143fbedd7265a424b9acd0af7c98a66e476a6" translate="yes" xml:space="preserve">
          <source>Functional Interface</source>
          <target state="translated">機能的なインタフェース</target>
        </trans-unit>
        <trans-unit id="7def83b37bed0c4a472856ea76a2171ece16649f" translate="yes" xml:space="preserve">
          <source>Functional style</source>
          <target state="translated">機能的なスタイル</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="1c61e24efc6706988ce877b75d28b4c69b714a46" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::OP&lt;/code&gt; objects or for walking op trees</source>
          <target state="translated">&lt;code&gt;B::OP&lt;/code&gt; オブジェクトを返す関数、またはopツリーのウォーキング用</target>
        </trans-unit>
        <trans-unit id="32ee6f99309a14456cfb212326be3dca1a77b910" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::SV&lt;/code&gt; , &lt;code&gt;B::AV&lt;/code&gt; , &lt;code&gt;B::HV&lt;/code&gt; , and &lt;code&gt;B::CV&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;B::SV&lt;/code&gt; 、 &lt;code&gt;B::AV&lt;/code&gt; 、 &lt;code&gt;B::HV&lt;/code&gt; 、および &lt;code&gt;B::CV&lt;/code&gt; オブジェクトを返す関数</target>
        </trans-unit>
        <trans-unit id="6b7363e65e6ab749a473690bf8b9f42ec2573a93" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::SV&lt;/code&gt;, &lt;code&gt;B::AV&lt;/code&gt;, &lt;code&gt;B::HV&lt;/code&gt;, and &lt;code&gt;B::CV&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;B::SV&lt;/code&gt; 、 &lt;code&gt;B::AV&lt;/code&gt; 、 &lt;code&gt;B::HV&lt;/code&gt; 、および &lt;code&gt;B::CV&lt;/code&gt; オブジェクトを返す関数</target>
        </trans-unit>
        <trans-unit id="854549ed50f6375d5b5e7597bbf2e5898d7693ff" translate="yes" xml:space="preserve">
          <source>Functions Returning B::OP objects or for walking op trees</source>
          <target state="translated">関数 B::OPオブジェクトを返す、またはOPツリーを歩くための関数</target>
        </trans-unit>
        <trans-unit id="19372f8fa99b3b7135ba966c21643aafea9c2467" translate="yes" xml:space="preserve">
          <source>Functions Returning B::SV, B::AV, B::HV, and B::CV objects</source>
          <target state="translated">関数 B::SV,B::AV,B::HV,B::CV オブジェクトを返します.</target>
        </trans-unit>
        <trans-unit id="d40a33bf3fa3ed923717e0c5ea11d6e647e8b77a" translate="yes" xml:space="preserve">
          <source>Functions and Attributes</source>
          <target state="translated">機能と属性</target>
        </trans-unit>
        <trans-unit id="5348c5a5b62cd5dc86c5b99972e10885f9a1a5b3" translate="yes" xml:space="preserve">
          <source>Functions called in list context are assumed to have failed if they return an empty list, or a list consisting only of a single undef element.</source>
          <target state="translated">リストコンテキストで呼び出された関数が空のリストを返す場合や、単一の undef 要素のみで構成されるリストを返す場合は、失敗したとみなされます。</target>
        </trans-unit>
        <trans-unit id="6c4c388285c500f1aeb8119de16be0528856e0bc" translate="yes" xml:space="preserve">
          <source>Functions for Examining the Symbol Table</source>
          <target state="translated">シンボルテーブルを調べる機能</target>
        </trans-unit>
        <trans-unit id="1aa3d1b62ea8a0b12e865c1ddf8d70163d9ba54b" translate="yes" xml:space="preserve">
          <source>Functions for SCALARs or strings</source>
          <target state="translated">SCALARや文字列用の関数</target>
        </trans-unit>
        <trans-unit id="7759ffd239fd25b45ca1d91bf1c8ce464ea7bb64" translate="yes" xml:space="preserve">
          <source>Functions for dealing with RFC3066-style language tags</source>
          <target state="translated">RFC3066 形式の言語タグを扱うための機能</target>
        </trans-unit>
        <trans-unit id="817344426c9ef1b03d9b71f46fa73a0908e28028" translate="yes" xml:space="preserve">
          <source>Functions for filehandles, files, or directories</source>
          <target state="translated">ファイルハンドル、ファイル、ディレクトリのための関数</target>
        </trans-unit>
        <trans-unit id="e8fb6af69da7c1c594c2d72fcf3e6037c72a3a63" translate="yes" xml:space="preserve">
          <source>Functions for fixed-length data or records</source>
          <target state="translated">固定長データやレコードのための関数</target>
        </trans-unit>
        <trans-unit id="aa93174b979aea06c11158cb6837303f4f92b294" translate="yes" xml:space="preserve">
          <source>Functions for list data</source>
          <target state="translated">リストデータ用の関数</target>
        </trans-unit>
        <trans-unit id="740a861f95ec5ef762fc9dcedf58db198e907d29" translate="yes" xml:space="preserve">
          <source>Functions for processes and process groups</source>
          <target state="translated">プロセスとプロセスグループの機能</target>
        </trans-unit>
        <trans-unit id="c977dc438518bc62c15e0ddf1a1aeaa92164c104" translate="yes" xml:space="preserve">
          <source>Functions for real %HASHes</source>
          <target state="translated">実質 %HASH の関数</target>
        </trans-unit>
        <trans-unit id="1def89502ade553e83759248cf70728351a76ad7" translate="yes" xml:space="preserve">
          <source>Functions for real @ARRAYs</source>
          <target state="translated">実際の@ARRAY用の関数</target>
        </trans-unit>
        <trans-unit id="d88dd92ba634447236614d7e0a054cf44cd39205" translate="yes" xml:space="preserve">
          <source>Functions in file vutil.c</source>
          <target state="translated">ファイル vutil.c の関数</target>
        </trans-unit>
        <trans-unit id="88e6ab13b92c2e1e7592687e44e6735c69ae3aad" translate="yes" xml:space="preserve">
          <source>Functions to support Perl's traditional &quot;fast&quot; access to the buffer.</source>
          <target state="translated">Perl の伝統的な &quot;高速&quot; アクセスをサポートする関数です。</target>
        </trans-unit>
        <trans-unit id="f616156f7ca62c9f603c623fae3a49e7426583da" translate="yes" xml:space="preserve">
          <source>Functions with a prototype of &lt;code&gt;()&lt;/code&gt; are potential candidates for inlining. If the result after optimization and constant folding is either a constant or a lexically-scoped scalar which has no other references, then it will be used in place of function calls made without &lt;code&gt;&amp;amp;&lt;/code&gt; . Calls made using &lt;code&gt;&amp;amp;&lt;/code&gt; are never inlined. (See</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; のプロトタイプを持つ関数は、インライン化の潜在的な候補です。最適化と定数の折りたたみ後の結果が、定数またはレキシカルスコープのスカラーであり、他の参照がない場合、 &lt;code&gt;&amp;amp;&lt;/code&gt; なしで行われた関数呼び出しの代わりに使用されます。 &lt;code&gt;&amp;amp;&lt;/code&gt; を使用して行われた呼び出しはインライン化されません。（見る</target>
        </trans-unit>
        <trans-unit id="29c593d807fc7bf0bdd8648d7e0636d1bf7d2b82" translate="yes" xml:space="preserve">
          <source>Functions with a prototype of &lt;code&gt;()&lt;/code&gt; are potential candidates for inlining. If the result after optimization and constant folding is either a constant or a lexically-scoped scalar which has no other references, then it will be used in place of function calls made without &lt;code&gt;&amp;amp;&lt;/code&gt;. Calls made using &lt;code&gt;&amp;amp;&lt;/code&gt; are never inlined. (See</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; のプロトタイプを持つ関数は、インライン化の潜在的な候補です。最適化と定数畳み込みの後の結果が、定数または他の参照を持たない字句スコープのスカラーのいずれかである場合、 &lt;code&gt;&amp;amp;&lt;/code&gt; なしで行われた関数呼び出しの代わりに使用されます。 &lt;code&gt;&amp;amp;&lt;/code&gt; を使用して行われた呼び出しは、インライン化されることはありません。（見る</target>
        </trans-unit>
        <trans-unit id="052d8ad81d99f33b2eb06e6d194282b8675fb201" translate="yes" xml:space="preserve">
          <source>Fundamentals</source>
          <target state="translated">Fundamentals</target>
        </trans-unit>
        <trans-unit id="a9d8d1b8ae4349b8a01d7c63e451fd799a9b7f8b" translate="yes" xml:space="preserve">
          <source>Funnies Section</source>
          <target state="translated">ファンニーズ部門</target>
        </trans-unit>
        <trans-unit id="04c4c0235c4dcde402f292623ee26bd9ccce865c" translate="yes" xml:space="preserve">
          <source>Further Resources</source>
          <target state="translated">その他のリソース</target>
        </trans-unit>
        <trans-unit id="a4850790bffd17894b4ec0822c491be3c4610fd3" translate="yes" xml:space="preserve">
          <source>Further examples of process-scope changes include &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask()&lt;/a&gt;&lt;/code&gt; and changing uids and gids.</source>
          <target state="translated">プロセススコープの変更のその他の例には、 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask()&lt;/a&gt;&lt;/code&gt; およびuidとgidsの変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="6acba9002319816dbce3d1e95205619580925614" translate="yes" xml:space="preserve">
          <source>Further examples of process-scope changes include &lt;code&gt;umask()&lt;/code&gt; and changing uids and gids.</source>
          <target state="translated">プロセススコープの変更のその他の例には、 &lt;code&gt;umask()&lt;/code&gt; およびuidとgidの変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="5e8e4bbb1cbc5567f472983c6110b377f52c0cca" translate="yes" xml:space="preserve">
          <source>Further reading can be found using the modules and links below.</source>
          <target state="translated">その他の読み物は、以下のモジュールとリンクを使用して見つけることができます。</target>
        </trans-unit>
        <trans-unit id="ae0759b489099f7e983a5855b98b07fd1e2ddbe3" translate="yes" xml:space="preserve">
          <source>Further, the first element in a range never needs adjustment, as the adjustment would be just adding 0.</source>
          <target state="translated">さらに、範囲の最初の要素は、調整が0を足すだけなので、調整の必要はありません。</target>
        </trans-unit>
        <trans-unit id="33028254f3093deff3764d716f328fa4ad9e5425" translate="yes" xml:space="preserve">
          <source>Further:</source>
          <target state="translated">Further:</target>
        </trans-unit>
        <trans-unit id="a080bfabfc41a91686c46efc096f30ef4fbf522d" translate="yes" xml:space="preserve">
          <source>Furthermore, Perl inspects the operands of logical operators to decide whether to use smartmatching for each one by applying the above test to the operands:</source>
          <target state="translated">さらに、Perlは論理演算子のオペランドを検査して、上記のテストをオペランドに適用することで、それぞれのオペランドに対してスマートマッチングを使用するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="51adfdfc6e30f15b7ff308a0a13705b1d26d399a" translate="yes" xml:space="preserve">
          <source>Furthermore, don't forget the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; in there, as &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $kv (%hash) {}&lt;/code&gt; iterates over the keys and values, and is generally not useful ($kv would be a key, then a value, and so on).</source>
          <target state="translated">また、忘れてはいけない &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; として、そこでの &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $kv (%hash) {}&lt;/code&gt; （$ KVキー、値、などであろう）キーと値を反復処理、及び一般的に有用ではありません。</target>
        </trans-unit>
        <trans-unit id="7a4a548dd47e23cb4ae11c2abe96cfeda0f0c055" translate="yes" xml:space="preserve">
          <source>Furthermore, don't forget the &lt;code&gt;keys&lt;/code&gt; in there, as &lt;code&gt;foreach my $kv (%hash) {}&lt;/code&gt; iterates over the keys and values, and is generally not useful ($kv would be a key, then a value, and so on).</source>
          <target state="translated">さらに、そこにある &lt;code&gt;keys&lt;/code&gt; を忘れないでください &lt;code&gt;foreach my $kv (%hash) {}&lt;/code&gt; はキーと値を反復処理し、通常は役に立ちません（$ kvがキー、次に値など）。 。</target>
        </trans-unit>
        <trans-unit id="db93480872e46ff5e0a7c8f5556d4345f41eef53" translate="yes" xml:space="preserve">
          <source>Furthermore, even if you have enabled this feature to be compiled, you need to enable it in runtime with an environment variable: &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; . It must be an integer higher than zero, telling the desired frame count.</source>
          <target state="translated">さらに、この機能のコンパイルを有効にした場合でも、実行時に環境変数 &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; を使用して有効にする必要があります。必要なフレーム数を示す、ゼロより大きい整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="73aa508fbd2cc5c2217b2e267fa133e198e904de" translate="yes" xml:space="preserve">
          <source>Furthermore, even if you have enabled this feature to be compiled, you need to enable it in runtime with an environment variable: &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt;. It must be an integer higher than zero, telling the desired frame count.</source>
          <target state="translated">さらに、この機能のコンパイルを有効にした場合でも、実行時に環境変数 &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; を使用して有効にする必要があります。ゼロより大きい整数である必要があり、目的のフレーム数を示します。</target>
        </trans-unit>
        <trans-unit id="79dbf7bed4736677573eda1bcecd5ea72126d919" translate="yes" xml:space="preserve">
          <source>Furthermore, for doing normal I/O you might need these:</source>
          <target state="translated">さらに、通常のI/Oを行うためには、これらが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="48cc69c08fdaa003e83ba71f62025b569c3f16f4" translate="yes" xml:space="preserve">
          <source>Furthermore, ftp uris only support anonymous connections, so no named user/password pair can be passed along.</source>
          <target state="translated">さらに、ftp uris は匿名接続しかサポートしていないので、名前付きのユーザとパスワードのペアを渡すことはできません。</target>
        </trans-unit>
        <trans-unit id="524b0aff95e7ba2007348850646d7ceb43e068a9" translate="yes" xml:space="preserve">
          <source>Furthermore, remember that this caveat also applies to fork(), which is emulated by threads on Win32.</source>
          <target state="translated">さらに、この注意点は、Win32 のスレッドによってエミュレートされる fork()にも適用されることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="d309a10ab62a5f76770beb2bdc55a4d79f7053a2" translate="yes" xml:space="preserve">
          <source>Furthermore, some evil vendors will claim 1003.1 compliance, but in fact are not so: they will not pass the PCTS (POSIX Compliance Test Suites). For example, one vendor may not define &lt;code&gt;EDEADLK&lt;/code&gt; , or the semantics of the errno values set by &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(2)&lt;/a&gt;&lt;/code&gt; might not be quite right. Perl does not attempt to verify POSIX compliance. That means you can currently successfully say &quot;use POSIX&quot;, and then later in your program you find that your vendor has been lax and there's no usable &lt;code&gt;ICANON&lt;/code&gt; macro after all. This could be construed to be a bug.</source>
          <target state="translated">さらに、一部の悪意のあるベンダーは1003.1準拠を主張しますが、実際にはそうではありません。PCTS（POSIX準拠テストスイート）に合格しません。たとえば、あるベンダーが &lt;code&gt;EDEADLK&lt;/code&gt; を定義していないか、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(2)&lt;/a&gt;&lt;/code&gt; によって設定されたerrno値のセマンティクスが完全に正しくない場合があります。PerlはPOSIX準拠の検証を試みません。つまり、現在は「use POSIX」と正常に言うことができ、その後、プログラムの後でベンダーが &lt;code&gt;ICANON&lt;/code&gt; 、結局使用可能なICANONマクロがないことがわかります。これはバグであると解釈できます。</target>
        </trans-unit>
        <trans-unit id="ce18264929ec2cd7ba908d5d5cf35e5089f7b38e" translate="yes" xml:space="preserve">
          <source>Furthermore, some evil vendors will claim 1003.1 compliance, but in fact are not so: they will not pass the PCTS (POSIX Compliance Test Suites). For example, one vendor may not define &lt;code&gt;EDEADLK&lt;/code&gt;, or the semantics of the errno values set by &lt;code&gt;open(2)&lt;/code&gt; might not be quite right. Perl does not attempt to verify POSIX compliance. That means you can currently successfully say &quot;use POSIX&quot;, and then later in your program you find that your vendor has been lax and there's no usable &lt;code&gt;ICANON&lt;/code&gt; macro after all. This could be construed to be a bug.</source>
          <target state="translated">さらに、一部の邪悪なベンダーは1003.1準拠を主張しますが、実際にはそうではありません。PCTS（POSIXコンプライアンステストスイート）に合格しません。たとえば、あるベンダーが &lt;code&gt;EDEADLK&lt;/code&gt; を定義していない場合や、 &lt;code&gt;open(2)&lt;/code&gt; によって設定されたerrno値のセマンティクスが完全に正しくない場合があります。PerlはPOSIX準拠を検証しようとはしません。つまり、現在「POSIXを使用する」と正常に言うことができますが、プログラムの後半で、ベンダーが緩慢であり、結局、使用可能な &lt;code&gt;ICANON&lt;/code&gt; マクロがないことがわかります。これはバグと解釈される可能性があります。</target>
        </trans-unit>
        <trans-unit id="13d4a69739d0088cb136cc4c16c74a337aabc059" translate="yes" xml:space="preserve">
          <source>Furthermore, special values, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; , can be used, though they are not concerned with &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; .</source>
          <target state="translated">さらに、特別な値である &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; を使用できますが、それらは &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; とは関係ありません。</target>
        </trans-unit>
        <trans-unit id="95aded6ad30c4c876c5144951a6bb66e49bec825" translate="yes" xml:space="preserve">
          <source>Furthermore, special values, &lt;code&gt;undef&lt;/code&gt; and &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt;, can be used, though they are not concerned with &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; は関係ありませんが、 &lt;code&gt;undef&lt;/code&gt; および &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; という特別な値を使用できます。</target>
        </trans-unit>
        <trans-unit id="8a481ff3ccbda516b9f33c8d20b42f50467089ec" translate="yes" xml:space="preserve">
          <source>Furthermore, when called from within the DB package in list context, and with an argument, caller returns more detailed information: it sets the list variable &lt;code&gt;@DB::args&lt;/code&gt; to be the arguments with which the subroutine was invoked.</source>
          <target state="translated">さらに、DBパッケージ内からリストコンテキストで呼び出され、引数がある場合、呼び出し元はより詳細な情報を返します。リスト変数 &lt;code&gt;@DB::args&lt;/code&gt; を、サブルーチンが呼び出された引数に設定します。</target>
        </trans-unit>
        <trans-unit id="3f058db7875f38874b1a8c89b542a4bd6a932573" translate="yes" xml:space="preserve">
          <source>Furthermore, you should make sure that during &lt;code&gt;make test&lt;/code&gt; you do not have any GNU tool packages in your path: some toolkits like Unixutils include some tools (&lt;code&gt;type&lt;/code&gt; for instance) which override the Windows ones and makes tests fail. Remove them from your path while testing to avoid these errors.</source>
          <target state="translated">さらに、 &lt;code&gt;make test&lt;/code&gt; 中にパスにGNUツールパッケージが含まれていないことを確認する必要があります。Unixutilsなどのツールキットには、Windows ツールをオーバーライドしてテストを失敗させるツール（ &lt;code&gt;type&lt;/code&gt; など）が含まれています。これらのエラーを回避するには、テスト中にパスから削除してください。</target>
        </trans-unit>
        <trans-unit id="d46735054f3a821c36d8dc0e38be2dc8069424e8" translate="yes" xml:space="preserve">
          <source>Future Plans and PERL_IMPLICIT_SYS</source>
          <target state="translated">今後の予定とPERL_IMPLICIT_SYS</target>
        </trans-unit>
        <trans-unit id="3da52a1809c9844f72a921784eef8acaa0a30f71" translate="yes" xml:space="preserve">
          <source>Future versions of Test::Builder will have a way to turn history off.</source>
          <target state="translated">Test::Builderの将来のバージョンでは、履歴をオフにする方法があります。</target>
        </trans-unit>
        <trans-unit id="51696f9d78549516d07f8c451e43127c08733e4f" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may add additional commands.</source>
          <target state="translated">この仕様の将来のバージョンでは、コマンドが追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca223e70a348b74c3e34848e1279271aecf5c237" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may add additional formatting codes.</source>
          <target state="translated">この仕様の将来のバージョンでは、書式コードを追加することができる。</target>
        </trans-unit>
        <trans-unit id="258ec93021438421e3c2a77885ab95a5bc2085a3" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may specify how Pod can accept other encodings. Presumably treatment of other encodings in Pod parsing would be as in XML parsing: whatever the encoding declared by a particular Pod file, content is to be stored in memory as Unicode characters.</source>
          <target state="translated">この仕様の将来のバージョンでは、Podが他のエンコーディングを受け付ける方法を指定することができます。Podの解析における他のエンコーディングの扱いは、XMLの解析と同様になると思われます。特定のPodファイルで宣言されたエンコーディングが何であれ、コンテンツはUnicode文字としてメモリに格納されます。</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="349a5bc532bd3c593d57694baf4470fa82e87c0e" translate="yes" xml:space="preserve">
          <source>GAMESRVR.DLL</source>
          <target state="translated">GAMESRVR.DLL</target>
        </trans-unit>
        <trans-unit id="4b20b8626ac71ec5966b767f3a27db1efb9164a2" translate="yes" xml:space="preserve">
          <source>GB2312</source>
          <target state="translated">GB2312</target>
        </trans-unit>
        <trans-unit id="8577b47d2b705ad56be34a1a6a9f6472d1ac1001" translate="yes" xml:space="preserve">
          <source>GCC</source>
          <target state="translated">GCC</target>
        </trans-unit>
        <trans-unit id="0ba6cc1e2d0d56ce9630a0f34e6f5f991c2e2104" translate="yes" xml:space="preserve">
          <source>GCC gcov Profiling</source>
          <target state="translated">GCC gcov プロファイリング</target>
        </trans-unit>
        <trans-unit id="3f0f4dcc948d6cb707fe551e6eeba47a39180607" translate="yes" xml:space="preserve">
          <source>GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).</source>
          <target state="translated">5.005でGCC/mingw32のサポートが追加されました(Nick Ing-Simmons)。</target>
        </trans-unit>
        <trans-unit id="33a96db7f69918beb1bb533b8df7e3de1b7deb54" translate="yes" xml:space="preserve">
          <source>GDBM and Threads on HP-UX</source>
          <target state="translated">HP-UX上のGDBMとスレッド</target>
        </trans-unit>
        <trans-unit id="6b0cdb8d334af2771320e52622f1437cac91bcf8" translate="yes" xml:space="preserve">
          <source>GDBM files are not portable across platforms.</source>
          <target state="translated">GDBMファイルはプラットフォーム間での移植性がありません。</target>
        </trans-unit>
        <trans-unit id="905e76d37d3d8721076484b8d01762ed235eeb6a" translate="yes" xml:space="preserve">
          <source>GDBM is available for Cygwin.</source>
          <target state="translated">CygwinではGDBMが利用できます。</target>
        </trans-unit>
        <trans-unit id="28d30fbb4a1a3e8c1dee0938999d88dedf07b61e" translate="yes" xml:space="preserve">
          <source>GDBM_File</source>
          <target state="translated">GDBM_File</target>
        </trans-unit>
        <trans-unit id="6e8a0da791506d4b9bf11a03346683d1558e8a0b" translate="yes" xml:space="preserve">
          <source>GDBM_File - Perl5 access to the gdbm library.</source>
          <target state="translated">GDBM_File-Perl5 で gdbm ライブラリにアクセスします。</target>
        </trans-unit>
        <trans-unit id="44d863e74bd0b116ddd849d0adcb4ad5aac6aa2f" translate="yes" xml:space="preserve">
          <source>GENERAL</source>
          <target state="translated">GENERAL</target>
        </trans-unit>
        <trans-unit id="ae00d8f3134d79b137732c9cb7f102d8f0802921" translate="yes" xml:space="preserve">
          <source>GENERAL GUIDELINES</source>
          <target state="translated">一般的なガイドライン</target>
        </trans-unit>
        <trans-unit id="cfc8c411b52ab97d4ba8b7d2031eeeb05a2b4008" translate="yes" xml:space="preserve">
          <source>GEOFFR</source>
          <target state="translated">GEOFFR</target>
        </trans-unit>
        <trans-unit id="f1e0288997c57a8d9fd4428af2fd20a5ba1449d2" translate="yes" xml:space="preserve">
          <source>GETC this</source>
          <target state="translated">これをGETC</target>
        </trans-unit>
        <trans-unit id="d4436bb8419bf48bac46201558f5a31e7d9d3f75" translate="yes" xml:space="preserve">
          <source>GETTING A LIST OF ATTRIBUTES FOR A CLASS</source>
          <target state="translated">クラスの付属品リストの取得</target>
        </trans-unit>
        <trans-unit id="3b652c3125ece0a5e5b4b20d19c89323f6ee9348" translate="yes" xml:space="preserve">
          <source>GETTING HELP</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="ea74752c1746be440f33aa941cc68b5ede779336" translate="yes" xml:space="preserve">
          <source>GETTING STARTED</source>
          <target state="translated">スタートアップ</target>
        </trans-unit>
        <trans-unit id="cd86c073f225f3fdc6eca764a69478ae8ba27649" translate="yes" xml:space="preserve">
          <source>GETTING THE PERL SOURCE</source>
          <target state="translated">PERLソースの取得</target>
        </trans-unit>
        <trans-unit id="0eb9134908bf3052cb06a8cc617e0deb5188f0b7" translate="yes" xml:space="preserve">
          <source>GGG</source>
          <target state="translated">GGG</target>
        </trans-unit>
        <trans-unit id="d3ab0d37a5570c2a63b16ca617fa7f37aa9c811f" translate="yes" xml:space="preserve">
          <source>GID</source>
          <target state="translated">GID</target>
        </trans-unit>
        <trans-unit id="d11f4a180999d12aed1e0b125207b005c1dab5a2" translate="yes" xml:space="preserve">
          <source>GIMME</source>
          <target state="translated">GIMME</target>
        </trans-unit>
        <trans-unit id="69fca1a811eb90b0e4d72f7d05f3a9aefce86dad" translate="yes" xml:space="preserve">
          <source>GIMME_V</source>
          <target state="translated">GIMME_V</target>
        </trans-unit>
        <trans-unit id="d957a2be14a1b162437963fe1ed8dc23e8a068b0" translate="yes" xml:space="preserve">
          <source>GIT DATA</source>
          <target state="translated">GITデータ</target>
        </trans-unit>
        <trans-unit id="424c222a43dbd3e23a7893c9c6ed5902d080dc2f" translate="yes" xml:space="preserve">
          <source>GIT_COMMAND</source>
          <target state="translated">GIT_COMMAND</target>
        </trans-unit>
        <trans-unit id="db6486702756155b84091f45f65d700a7e9f5b88" translate="yes" xml:space="preserve">
          <source>GLOBAL</source>
          <target state="translated">GLOBAL</target>
        </trans-unit>
        <trans-unit id="bf98dc1a3b408b3c50c0a64164f6cbb372e44595" translate="yes" xml:space="preserve">
          <source>GLOBAL VARIABLES</source>
          <target state="translated">グローバルバリアブル</target>
        </trans-unit>
        <trans-unit id="f25bdd9f8631b9874b5643e6065c3d9abb3ebbf0" translate="yes" xml:space="preserve">
          <source>GLOSSARY</source>
          <target state="translated">GLOSSARY</target>
        </trans-unit>
        <trans-unit id="edd4b1d28d6fabbd459aa39cee2bc60f4dc2cacf" translate="yes" xml:space="preserve">
          <source>GNU &lt;code&gt;info&lt;/code&gt; files</source>
          <target state="translated">GNU &lt;code&gt;info&lt;/code&gt; ファイル</target>
        </trans-unit>
        <trans-unit id="9d091b9a5e4c37cafcd83a2e7be1ecc3c772330b" translate="yes" xml:space="preserve">
          <source>GNU C Library documentation on syslog, &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&quot;&gt;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&lt;/a&gt;</source>
          <target state="translated">syslogに関するGNU Cライブラリのドキュメント、&lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&quot;&gt;http：//www.gnu.org/software/libc/manual/html_node/Syslog.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1e51bbeeb3ab635c2ddf385a984fd33821a9387" translate="yes" xml:space="preserve">
          <source>GNU Emacs</source>
          <target state="translated">GNU Emacs</target>
        </trans-unit>
        <trans-unit id="f329865e118f755d9ae2897c3d1036d691b75a09" translate="yes" xml:space="preserve">
          <source>GNU Tar authors have expressed their intention to become completely POSIX-compatible; &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">GNU Tarの作者は、完全にPOSIX互換になることを表明しています。 &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51832f7d5d9df2260a0a5d59e6cd7008268422b7" translate="yes" xml:space="preserve">
          <source>GNU Tar authors have expressed their intention to become completely POSIX-compatible; &lt;code&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/code&gt;</source>
          <target state="translated">GNU Tarの作成者は、完全にPOSIX互換になる意向を表明しています。 &lt;code&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b96a59e926131797b97a5280ca47b763871d9867" translate="yes" xml:space="preserve">
          <source>GNU as and GNU ld</source>
          <target state="translated">GNU asとGNU ld</target>
        </trans-unit>
        <trans-unit id="ffac9623e4fbfd01208662e12093c3420e35fe08" translate="yes" xml:space="preserve">
          <source>GNU info files</source>
          <target state="translated">GNU情報ファイル</target>
        </trans-unit>
        <trans-unit id="c0e4228983ccde5f3b6e514a717cb5799952c59a" translate="yes" xml:space="preserve">
          <source>GNU make for OS/390, which is recommended for the build of perl (as well as building CPAN modules and extensions), is available from the &lt;a href=&quot;#Tools&quot;&gt;&quot;Tools&quot;&lt;/a&gt;.</source>
          <target state="translated">perlのビルド（およびCPANモジュールと拡張機能のビルド）に推奨されるOS / 390用のGNUmakeは、&lt;a href=&quot;#Tools&quot;&gt;「ツール」&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="a602c9a5bb16737d2d0e6f0af42d0ffbca2fd496" translate="yes" xml:space="preserve">
          <source>GNU make for OS/390, which is recommended for the build of perl (as well as building CPAN modules and extensions), is available from the &lt;a href=&quot;#Tools&quot;&gt;Tools&lt;/a&gt;.</source>
          <target state="translated">Perlのビルド（およびCPANモジュールと拡張機能のビルド）に推奨されるOS / 390用のGNU makeは、&lt;a href=&quot;#Tools&quot;&gt;Tools&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="7c896fe8a3a7da4457cab55117479c000e8e302b" translate="yes" xml:space="preserve">
          <source>GNU tar intends to switch to POSIX compatibility</source>
          <target state="translated">GNU tar は POSIX 互換性に切り替えるつもりです</target>
        </trans-unit>
        <trans-unit id="a9e95dc9b959dea83d9c2c4412bad8dbf6a30b36" translate="yes" xml:space="preserve">
          <source>GNV$UNIX_SHELL</source>
          <target state="translated">GNV$UNIX_SHELL</target>
        </trans-unit>
        <trans-unit id="d7332b9fd2e3b51ce3e0b297993ed332c301d3b1" translate="yes" xml:space="preserve">
          <source>GOODIES</source>
          <target state="translated">GOODIES</target>
        </trans-unit>
        <trans-unit id="5c3f2689267efedfd1b8d32a4de8ae076b08ae19" translate="yes" xml:space="preserve">
          <source>GOTCHAS</source>
          <target state="translated">GOTCHAS</target>
        </trans-unit>
        <trans-unit id="fe0ce1b835b0b5932a5c8ab2b59f416e1e42dc46" translate="yes" xml:space="preserve">
          <source>GOVERNANCE</source>
          <target state="translated">GOVERNANCE</target>
        </trans-unit>
        <trans-unit id="a1e3af67602793f9d1ffe507c5ce73e03e79f73b" translate="yes" xml:space="preserve">
          <source>GPFLAGS</source>
          <target state="translated">GPFLAGS</target>
        </trans-unit>
        <trans-unit id="9457100d18567dc55592e3720d770ae879354f10" translate="yes" xml:space="preserve">
          <source>GPOS</source>
          <target state="translated">GPOS</target>
        </trans-unit>
        <trans-unit id="a0dce8feda03c8a60940891df8a100aa6d34a49e" translate="yes" xml:space="preserve">
          <source>GREAT CIRCLE DISTANCES AND DIRECTIONS</source>
          <target state="translated">大円の距離と方向</target>
        </trans-unit>
        <trans-unit id="238b03cb844fb70b0e442f33902b4377da8a5e77" translate="yes" xml:space="preserve">
          <source>GROK_NUMERIC_RADIX</source>
          <target state="translated">GROK_NUMERIC_RADIX</target>
        </trans-unit>
        <trans-unit id="f33d85ab379fda0c05941052326738c9fe2a1ea5" translate="yes" xml:space="preserve">
          <source>GSM0338 is for GSM handsets. Though it shares alphanumerals with ASCII, control character ranges and other parts are mapped very differently, mainly to store Greek characters. There are also escape sequences (starting with 0x1B) to cover e.g. the Euro sign.</source>
          <target state="translated">GSM0338はGSM携帯電話用です。英数字はASCIIと共有していますが、制御文字範囲やその他の部分は、主にギリシャ文字を格納するために非常に異なってマッピングされています。また、ユーロ記号などをカバーするためのエスケープシーケンス(0x1Bで始まる)もあります。</target>
        </trans-unit>
        <trans-unit id="c0cf065d2bd69adbe2ec92fa3feabfd7bf3b9886" translate="yes" xml:space="preserve">
          <source>GUI editor written in Perl using wxWidgets and Scintilla with lots of smaller features. Aims for a UI based on Perl principles like TIMTOWTDI and &quot;easy things should be easy, hard things should be possible&quot;.</source>
          <target state="translated">wxWidgetsとScintillaを使ってPerlで書かれたGUIエディタ。TIMTOWTDIや &quot;easy things should be easy,hard things should be possible &quot;のようなPerlの原則に基づいたUIを目指しています。</target>
        </trans-unit>
        <trans-unit id="8e8d08c08351d6aca5a776c4b8922b52fb3e13e8" translate="yes" xml:space="preserve">
          <source>GUIs</source>
          <target state="translated">GUIs</target>
        </trans-unit>
        <trans-unit id="65f937109da9f4d01ac30946e434018e19ee2dcd" translate="yes" xml:space="preserve">
          <source>GUTS</source>
          <target state="translated">GUTS</target>
        </trans-unit>
        <trans-unit id="563a021933374395b6a1f2af7dd605d7bbeb2b68" translate="yes" xml:space="preserve">
          <source>GV</source>
          <target state="translated">GV</target>
        </trans-unit>
        <trans-unit id="870b564576a2966c189631c03afc2f57fdfb6686" translate="yes" xml:space="preserve">
          <source>GV Functions</source>
          <target state="translated">GV機能</target>
        </trans-unit>
        <trans-unit id="9d9beab3a461023f05f50f04ae763cdd94b4433a" translate="yes" xml:space="preserve">
          <source>GV_ADDMULTI</source>
          <target state="translated">GV_ADDMULTI</target>
        </trans-unit>
        <trans-unit id="bb657266f56156b0c7d3d1e82903df52e1347755" translate="yes" xml:space="preserve">
          <source>GV_ADDWARN</source>
          <target state="translated">GV_ADDWARN</target>
        </trans-unit>
        <trans-unit id="e717e9026bec8b632428e734dfdc5a2ec21c2f4d" translate="yes" xml:space="preserve">
          <source>GV_SUPER indicates that we want to look up the method in the superclasses of the &lt;code&gt;stash&lt;/code&gt; .</source>
          <target state="translated">GV_SUPERは、 &lt;code&gt;stash&lt;/code&gt; のスーパークラスでメソッドを検索することを示します。</target>
        </trans-unit>
        <trans-unit id="93253898f4f199634af1de90ddc5528b941ce169" translate="yes" xml:space="preserve">
          <source>GVs are usually found as values in stashes (symbol table hashes) where Perl stores its global variables.</source>
          <target state="translated">GV は通常、Perl がグローバル変数を格納するスタッシュ (シンボルテーブルハッシュ)の値として発見されます。</target>
        </trans-unit>
        <trans-unit id="c0a0df7086cece5998142ac057f6fc84ddc5c9a2" translate="yes" xml:space="preserve">
          <source>GZIP</source>
          <target state="translated">GZIP</target>
        </trans-unit>
        <trans-unit id="da99bf684e2839f1607c7a6984181f3b8083a1e7" translate="yes" xml:space="preserve">
          <source>GZIP INTERFACE</source>
          <target state="translated">GZIPインターフェース</target>
        </trans-unit>
        <trans-unit id="cb13f819c9cca26bbe274d82fa237ae5e6a86319" translate="yes" xml:space="preserve">
          <source>G_ARRAY</source>
          <target state="translated">G_ARRAY</target>
        </trans-unit>
        <trans-unit id="c9afb596821a60db6f147bb13345cb27d6cd8acd" translate="yes" xml:space="preserve">
          <source>G_DISCARD</source>
          <target state="translated">G_DISCARD</target>
        </trans-unit>
        <trans-unit id="7c0c17b4a676352405579500514e68a451e3e0e0" translate="yes" xml:space="preserve">
          <source>G_EVAL</source>
          <target state="translated">G_EVAL</target>
        </trans-unit>
        <trans-unit id="336b3ba483f4b583d3b8e432539a535eec3195ef" translate="yes" xml:space="preserve">
          <source>G_KEEPERR</source>
          <target state="translated">G_KEEPERR</target>
        </trans-unit>
        <trans-unit id="0d759ade2aa36ab678fa55030c3ec31bde1a4c30" translate="yes" xml:space="preserve">
          <source>G_NOARGS</source>
          <target state="translated">G_NOARGS</target>
        </trans-unit>
        <trans-unit id="f4700a48056cc6ff4268baa6339552754ce5bf82" translate="yes" xml:space="preserve">
          <source>G_SCALAR</source>
          <target state="translated">G_SCALAR</target>
        </trans-unit>
        <trans-unit id="ad1ccfc7340540dee07e8608d1a88363df56cc05" translate="yes" xml:space="preserve">
          <source>G_VOID</source>
          <target state="translated">G_VOID</target>
        </trans-unit>
        <trans-unit id="b748b29d51e0edd87f8e905e8b76fcaba49cd779" translate="yes" xml:space="preserve">
          <source>Gabor Szabo &lt;code&gt;szabgab@gmail.com&lt;/code&gt;</source>
          <target state="translated">ガボール・ザボ &lt;code&gt;szabgab@gmail.com&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a9bbda071163c5693883e06db98012930631d19" translate="yes" xml:space="preserve">
          <source>Garbage collection can be confusing when keys are created in a field hash from normal scalars as well as references. Once a reference is</source>
          <target state="translated">ガベージコレクションは、参照だけでなく通常のスカラからもフィールドハッシュでキーが作成されると混乱することがあります。一度参照が</target>
        </trans-unit>
        <trans-unit id="fc30f25cde3aea2004fdaffc34ec529a477f5957" translate="yes" xml:space="preserve">
          <source>Garbage collection in a field hash means that entries will &quot;spontaneously&quot; disappear when the object that created them disappears. That must be borne in mind, especially when looping over a field hash. If anything you do inside the loop could cause an object to go out of scope, a random key may be deleted from the hash you are looping over. That can throw the loop iterator, so it's best to cache a consistent snapshot of the keys and/or values and loop over that. You will still have to check that a cached entry still exists when you get to it.</source>
          <target state="translated">フィールドハッシュでのゴミ収集とは、エントリを作成したオブジェクトが消えるとエントリが &quot;自然に &quot;消えてしまうことを意味します。特にフィールドハッシュの上をループするときには、そのことを念頭に置かなければなりません。ループ内で何かをするとオブジェクトがスコープ外に出てしまう可能性がある場合、ループしているハッシュからランダムキーが削除されてしまうことがあります。これはループイテレータをスローする可能性があるので、キーや値の一貫したスナップショットをキャッシュして、それをループするのがベストです。キャッシュされたエントリに到達したときには、キャッシュされたエントリがまだ存在するかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc5702bf94c050f203b549ef0c85e9b81b70dad0" translate="yes" xml:space="preserve">
          <source>Garbage-Collected Hashes</source>
          <target state="translated">ゴミ収集ハッシュ</target>
        </trans-unit>
        <trans-unit id="9787c03e8d6dc4bce456ef42571d84981f4571de" translate="yes" xml:space="preserve">
          <source>Gareth Harper &amp;lt;gareth@broadbean.com&amp;gt;</source>
          <target state="translated">ガレスハーパー&amp;lt;gareth@broadbean.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b4b51fb138e83025d75d33ccab44d80c862bfbff" translate="yes" xml:space="preserve">
          <source>Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;</source>
          <target state="translated">Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2ec6ebf4fdb8455b53f8d6215ef9f6363a9f9d67" translate="yes" xml:space="preserve">
          <source>Gather package and POD information from perl module files</source>
          <target state="translated">perl モジュールファイルからパッケージと POD の情報を収集する</target>
        </trans-unit>
        <trans-unit id="ff0ce44a9b44893e7937aae11d3bb72fdbd54b73" translate="yes" xml:space="preserve">
          <source>Gathered below are notes describing details of Perl 5's behavior on VMS. They are a supplement to the regular Perl 5 documentation, so we have focussed on the ways in which Perl 5 functions differently under VMS than it does under Unix, and on the interactions between Perl and the rest of the operating system. We haven't tried to duplicate complete descriptions of Perl features from the main Perl documentation, which can be found in the</source>
          <target state="translated">以下に、VMS 上での Perl 5 の動作の詳細を記述したメモをまとめました。これらは通常の Perl 5 のドキュメントの補足ですので、VMS での Perl 5 の機能が Unix での機能とは異なることや、Perl とその他のオペレーティングシステムの相互作用に焦点を当てています。Perl の機能の完全な説明を、Perl のメインのドキュメントから複製しようとはしていません。</target>
        </trans-unit>
        <trans-unit id="7f9312aa0641ccf48f613c14cf0915e110bff9fc" translate="yes" xml:space="preserve">
          <source>Gathers meta data about the &lt;a href=&quot;#raw&quot;&gt;&quot;raw&quot;&lt;/a&gt; source, stashes it in &lt;a href=&quot;#meta&quot;&gt;&quot;meta&quot;&lt;/a&gt; and returns it as a hashref. This is done so that the &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s don't have to repeat common checks. Currently this includes:</source>
          <target state="translated">&lt;a href=&quot;#raw&quot;&gt;「生の」&lt;/a&gt;ソースに関するメタデータを収集し、それを&lt;a href=&quot;#meta&quot;&gt;「メタ」に&lt;/a&gt;隠して、ハッシュ参照として返します。これは、&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;が一般的なチェックを繰り返す必要がないようにするために行われます。現在、これには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="b4330768b6cbb368cf11bfc2a1aa3b4b4975bf79" translate="yes" xml:space="preserve">
          <source>Gathers meta data about the &lt;a href=&quot;#raw&quot;&gt;raw&lt;/a&gt; source, stashes it in &lt;a href=&quot;#meta&quot;&gt;meta&lt;/a&gt; and returns it as a hashref. This is done so that the &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s don't have to repeat common checks. Currently this includes:</source>
          <target state="translated">&lt;a href=&quot;#raw&quot;&gt;生の&lt;/a&gt;ソースに関するメタデータを収集し、それを&lt;a href=&quot;#meta&quot;&gt;メタ&lt;/a&gt;に隠して、ハッシュリファレンスとして返します。これは、&lt;a href=&quot;sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;が一般的なチェックを繰り返す必要がないようにするためです。現在、これには以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="0a7877a5c7bf9a390ddf2644ce8f01d2dd749296" translate="yes" xml:space="preserve">
          <source>Gee, yet another template code - as if we hadn't plenty. But &lt;code&gt;@&lt;/code&gt; saves our day by enabling us to specify the offset from the beginning of the pack buffer to the next item: This is just the value the &lt;code&gt;offsetof&lt;/code&gt; macro (defined in &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; ) returns when given a &lt;code&gt;struct&lt;/code&gt; type and one of its field names (&quot;member-designator&quot; in C standardese).</source>
          <target state="translated">いや、もう1つのテンプレートコード-まるで十分ではなかったかのように。しかし、 &lt;code&gt;@&lt;/code&gt; はパックバッファーの先頭から次の項目までのオフセットを指定できるようにすることで1日を節約します。これは、 &lt;code&gt;struct&lt;/code&gt; タイプと次のいずれかが指定されたときに、 &lt;code&gt;offsetof&lt;/code&gt; マクロ（ &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; で定義）が返す値にすぎません。そのフィールド名（C標準の &quot;member-designator&quot;）。</target>
        </trans-unit>
        <trans-unit id="251cdd279420c660784beb6674f601d3c2129cbb" translate="yes" xml:space="preserve">
          <source>Gee, yet another template code - as if we hadn't plenty. But &lt;code&gt;@&lt;/code&gt; saves our day by enabling us to specify the offset from the beginning of the pack buffer to the next item: This is just the value the &lt;code&gt;offsetof&lt;/code&gt; macro (defined in &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;) returns when given a &lt;code&gt;struct&lt;/code&gt; type and one of its field names (&quot;member-designator&quot; in C standardese).</source>
          <target state="translated">いや、さらに別のテンプレートコード-あたかも十分ではなかったかのように。しかし、 &lt;code&gt;@&lt;/code&gt; 次の項目にパックバッファの先頭からのオフセットを指定するために私たちを可能にすることによって、私たちの一日を保存します。これは単なる値である &lt;code&gt;offsetof&lt;/code&gt; はマクロ（で定義された &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; 与えられたときに戻っ） &lt;code&gt;struct&lt;/code&gt; タイプとのいずれかをそのフィールド名（C標準では「member-designator」）。</target>
        </trans-unit>
        <trans-unit id="7264840e686c65159ebed179560079a997c941c5" translate="yes" xml:space="preserve">
          <source>General 32-bit vs. 64-bit issues.</source>
          <target state="translated">一般的な32ビットと64ビットの問題。</target>
        </trans-unit>
        <trans-unit id="0b01c727a71003b8392c50d5e2ddffdc179cdf34" translate="yes" xml:space="preserve">
          <source>General Notes</source>
          <target state="translated">一般的な注意事項</target>
        </trans-unit>
        <trans-unit id="7bafdc805eb49ade4dcc8f1b7c25df23aa8d76e7" translate="yes" xml:space="preserve">
          <source>General Perl style guide</source>
          <target state="translated">一般的な Perl スタイルガイド</target>
        </trans-unit>
        <trans-unit id="c4a42d220d26c466f9dbb535a2b1b9eda4a1fde7" translate="yes" xml:space="preserve">
          <source>General Thread Utility Routines</source>
          <target state="translated">一般的なスレッドのユーティリティルーチン</target>
        </trans-unit>
        <trans-unit id="faddfc843ac71019b3393df672837907ac7bbcab" translate="yes" xml:space="preserve">
          <source>General Variables</source>
          <target state="translated">一般変数</target>
        </trans-unit>
        <trans-unit id="f183e804ff54f5c70fea1801cabc1af8c1ecfaeb" translate="yes" xml:space="preserve">
          <source>General behaviour in list contexts</source>
          <target state="translated">リストコンテキストでの一般的な振る舞い</target>
        </trans-unit>
        <trans-unit id="c3adf35af62fa854c8d064fa3f4201bca217f3c3" translate="yes" xml:space="preserve">
          <source>General behaviour in scalar and void contexts</source>
          <target state="translated">スカラーとボイドのコンテキストでの一般的な振る舞い</target>
        </trans-unit>
        <trans-unit id="f87d868ae9e6c5e095ed3921aff5b72a01552118" translate="yes" xml:space="preserve">
          <source>General examples:</source>
          <target state="translated">一般的な例。</target>
        </trans-unit>
        <trans-unit id="1fa7d4327fa3fac797d2494a8dbdc1859972a516" translate="yes" xml:space="preserve">
          <source>General explanations on cross-compiling WinCE</source>
          <target state="translated">WinCEのクロスコンパイルに関する一般的な説明</target>
        </trans-unit>
        <trans-unit id="177b775b3f900e80db9a3c9d077fbb178e3ecaf3" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs//issues&quot;&gt;https://github.com/pmqs//issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=&lt;/a&gt;.</source>
          <target state="translated">一般的なフィードバック/質問/バグレポートは、&lt;a href=&quot;https://github.com/pmqs//issues&quot;&gt;https：//github.com/pmqs//issues&lt;/a&gt;（推奨）または&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=に&lt;/a&gt;送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="d7003218564df84918ab14576c96daf28ad6398a" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/Compress-Raw-Bzip2/issues&quot;&gt;https://github.com/pmqs/Compress-Raw-Bzip2/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Bzip2&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Bzip2&lt;/a&gt;.</source>
          <target state="translated">一般的なフィードバック/質問/バグレポートは、&lt;a href=&quot;https://github.com/pmqs/Compress-Raw-Bzip2/issues&quot;&gt;https：//github.com/pmqs/Compress-Raw-Bzip2/issues&lt;/a&gt;（推奨）または&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Bzip2&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html？に&lt;/a&gt;送信する必要があります。 Name = Compress-Raw-Bzip2。</target>
        </trans-unit>
        <trans-unit id="0cb6b11beb81f923f31dc7e72861a82e63567880" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/Compress-Raw-Zlib/issues&quot;&gt;https://github.com/pmqs/Compress-Raw-Zlib/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Zlib&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Zlib&lt;/a&gt;.</source>
          <target state="translated">一般的なフィードバック/質問/バグレポートは、&lt;a href=&quot;https://github.com/pmqs/Compress-Raw-Zlib/issues&quot;&gt;https：//github.com/pmqs/Compress-Raw-Zlib/issues&lt;/a&gt;（推奨）または&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Zlib&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html？に&lt;/a&gt;送信する必要があります。 Name = Compress-Raw-Zlib。</target>
        </trans-unit>
        <trans-unit id="98e3990e86da90fdd4ed6da884dfef00f8e74c8a" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/DB_File/issues&quot;&gt;https://github.com/pmqs/DB_File/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=DB_File&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=DB_File&lt;/a&gt;.</source>
          <target state="translated">一般的なフィードバック/質問/バグレポートは、&lt;a href=&quot;https://github.com/pmqs/DB_File/issues&quot;&gt;https：//github.com/pmqs/DB_File/issues&lt;/a&gt;（推奨）または&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=DB_File&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=DB_Fileに&lt;/a&gt;送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="3362aa8378cf817a219d847407113ea16bdc5bcc" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/IO-Compress/issues&quot;&gt;https://github.com/pmqs/IO-Compress/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Compress&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Compress&lt;/a&gt;.</source>
          <target state="translated">一般的なフィードバック/質問/バグレポートは、&lt;a href=&quot;https://github.com/pmqs/IO-Compress/issues&quot;&gt;https：//github.com/pmqs/IO-Compress/issues&lt;/a&gt;（推奨）または&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Compress&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=に&lt;/a&gt;送信する必要があります。 IO-Compress。</target>
        </trans-unit>
        <trans-unit id="7bee1469722ea0f03a9b4809dcbaa903f16d4ac7" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/IO-Copress/issues&quot;&gt;https://github.com/pmqs/IO-Copress/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Copress&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Copress&lt;/a&gt;.</source>
          <target state="translated">一般的なフィードバック/質問/バグレポートは、&lt;a href=&quot;https://github.com/pmqs/IO-Copress/issues&quot;&gt;https：//github.com/pmqs/IO-Copress/issues&lt;/a&gt;（推奨）または&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Copress&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=に&lt;/a&gt;送信する必要があります。 IO-Copress。</target>
        </trans-unit>
        <trans-unit id="93ab49617e74fefea30381e0a0b013db01a2c54c" translate="yes" xml:space="preserve">
          <source>General tools</source>
          <target state="translated">一般的なツール</target>
        </trans-unit>
        <trans-unit id="e168d4dcec8a34250248e4642467cb387ae19975" translate="yes" xml:space="preserve">
          <source>General_Category</source>
          <target state="translated">General_Category</target>
        </trans-unit>
        <trans-unit id="bc589851c4083a051730b622221b86c22bbd8a1c" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;../perlop#Quote-Like-Operators&quot;&gt;Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">一般的な引用。&lt;a href=&quot;../perlop#Quote-Like-Operators&quot;&gt;perlopのQuote-Like演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ec5a04346396f5e9c79d41816857e66f2100300f" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;&quot;Quote-Like Operators&quot; in perlop&lt;/a&gt;.</source>
          <target state="translated">一般化された引用。&lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;perlopの「Quote-LikeOperators」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c176de14201d5eb9a9b50ccc11298ef3cd109ef6" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">一般的な引用。&lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;perlopのQuote-Like演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad57f21ae3c6ac53ed83e3da2f741a3990c73305" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the &lt;code&gt;YourModule::item_name&lt;/code&gt; (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) syntax. By convention you can use a leading underscore on names to informally indicate that they are 'internal' and not for public use.</source>
          <target state="translated">一般に、エクスポートされないものには、モジュールの外部から &lt;code&gt;YourModule::item_name&lt;/code&gt; （または &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ）構文を使用してアクセスできます。慣例により、名前に先頭のアンダースコアを使用して、それらが「内部」であり、パブリックに使用するものではないことを非公式に示すことができます。</target>
        </trans-unit>
        <trans-unit id="f85f05eb1ba5a8d34d1ecc4b9502fcb20ee9932a" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the &lt;code&gt;YourModule::item_name&lt;/code&gt; (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt;) syntax. By convention you can use a leading underscore on names to informally indicate that they are 'internal' and not for public use.</source>
          <target state="translated">通常、エクスポートされていないものはすべて、 &lt;code&gt;YourModule::item_name&lt;/code&gt; （または &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ）構文を使用してモジュールの外部からアクセスできます。慣例により、名前に先頭の下線を使用して、名前が「内部」であり、一般に使用されていないことを非公式に示すことができます。</target>
        </trans-unit>
        <trans-unit id="80cc2c98f271588e14fc9b40a4be695fc7549ee7" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the ModuleName::item_name (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) syntax. By convention you can use a leading underscore on names to indicate informally that they are 'internal' and not for public use.</source>
          <target state="translated">一般に、エクスポートされないものには、 &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; :: item_name（または$ blessed_ref-&amp;gt; method）構文を使用してモジュールの外部からアクセスできます。慣例により、名前に先行アンダースコアを使用して、それらが「内部」であり、パブリックに使用されないことを非公式に示すことができます。</target>
        </trans-unit>
        <trans-unit id="8abf0da6ea8437cdd5d0b8303854565189df730d" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the ModuleName::item_name (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt;) syntax. By convention you can use a leading underscore on names to indicate informally that they are 'internal' and not for public use.</source>
          <target state="translated">通常、エクスポートされていないものはすべて、 &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; :: item_name（または$ blessed_ref-&amp;gt; method）構文を使用してモジュールの外部からアクセスできます。慣例により、名前に先頭の下線を使用して、名前が「内部」であり、一般に使用されていないことを非公式に示すことができます。</target>
        </trans-unit>
        <trans-unit id="a1fe2ca53692f111e8f5344d4ee32097c8e139d1" translate="yes" xml:space="preserve">
          <source>Generally one only needs to call the &lt;code&gt;WriteConstants&lt;/code&gt; function, and then</source>
          <target state="translated">通常、 &lt;code&gt;WriteConstants&lt;/code&gt; 関数を呼び出すだけでよく、その後</target>
        </trans-unit>
        <trans-unit id="7752355855cfc396e704af98f16ff556c4a77375" translate="yes" xml:space="preserve">
          <source>Generally speaking, PerlIO layers (previously sometimes referred to as &quot;disciplines&quot;) are an ordered stack applied to a filehandle (specified as a space- or colon-separated list, conventionally written with a leading colon). Each layer performs some operation on any input or output, except when bypassed such as with &lt;code&gt;sysread&lt;/code&gt; or &lt;code&gt;syswrite&lt;/code&gt;. Read operations go through the stack in the order they are set (left to right), and write operations in the reverse order.</source>
          <target state="translated">一般的に、PerlIOレイヤー（以前は「ディシプリン」と呼ばれることもありました）は、ファイルハンドル（スペースまたはコロンで区切られたリストとして指定され、通常は先頭のコロンで記述されます）に適用される順序付きスタックです。各レイヤーは、 &lt;code&gt;sysread&lt;/code&gt; や &lt;code&gt;syswrite&lt;/code&gt; などでバイパスされる場合を除いて、任意の入力または出力に対して何らかの操作を実行します。読み取り操作は、設定された順序（左から右）でスタックを通過し、書き込み操作は逆の順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="204a4b8b09f1c995e8deda462e190543c6bff8e4" translate="yes" xml:space="preserve">
          <source>Generally speaking, if you need something special for you, you are advised to create a new module, maybe based on &lt;a href=&quot;JSON::Tiny&quot;&gt;JSON::Tiny&lt;/a&gt;, which is smaller and written in a much cleaner way than this module.</source>
          <target state="translated">一般的に言って、何か特別なものが必要な場合は、おそらく&lt;a href=&quot;JSON::Tiny&quot;&gt;JSON :: Tinyに&lt;/a&gt;基づいて新しいモジュールを作成することをお勧めします。これは、このモジュールよりも小さく、はるかにクリーンな方法で記述されています。</target>
        </trans-unit>
        <trans-unit id="db8f5bba4dab7b726878cf9e8a36fd32d7e9eca8" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;a href=&quot;#continue-BLOCK&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; block at the end of a loop to clear variables and reset &lt;code&gt;m?pattern?&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables (scalars, arrays, and hashes) in the current package beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;m?pattern?&lt;/code&gt;) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">通常、変数をクリアして &lt;code&gt;m?pattern?&lt;/code&gt; をリセットするために、ループの最後の&lt;a href=&quot;#continue-BLOCK&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;ブロックで使用されます。それらが再び機能するように検索します。式は、単一文字のリストとして解釈されます（範囲に使用できるハイフン）。これらの文字の1つで始まる現在のパッケージ内のすべての変数（スカラー、配列、およびハッシュ）は、元の状態にリセットされます。式を省略すると、1回の一致検索（ &lt;code&gt;m?pattern?&lt;/code&gt; ）がリセットされて再度一致します。現在のパッケージの変数または検索のみをリセットします。常に1を返します。例：</target>
        </trans-unit>
        <trans-unit id="327b665fa95397f25e3867f7836460cb799d0a0c" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block at the end of a loop to clear variables and reset &lt;code&gt;??&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables and arrays beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;?pattern?&lt;/code&gt; ) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">通常、ループの最後の &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックで変数をクリアしてリセットするために使用されます &lt;code&gt;??&lt;/code&gt; 彼らが再び働くように検索します。式は単一の文字のリストとして解釈されます（範囲に使用できるハイフン）。それらの文字のいずれかで始まるすべての変数と配列は、元の状態にリセットされます。式を省略すると、1回の一致検索（ &lt;code&gt;?pattern?&lt;/code&gt; ）がリセットされ、再度一致します。現在のパッケージで変数または検索のみをリセットします。常に1を返します。例：</target>
        </trans-unit>
        <trans-unit id="6ed5d2aaf3ce44a61b56b98845df66b1842be7d7" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block at the end of a loop to clear variables and reset &lt;code&gt;??&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables and arrays beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;?pattern?&lt;/code&gt; ) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">通常、ループの最後の &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックで変数をクリアしてリセットするために使用されます &lt;code&gt;??&lt;/code&gt; 彼らが再び働くように検索します。式は単一の文字のリストとして解釈されます（範囲に使用できるハイフン）。それらの文字のいずれかで始まるすべての変数と配列は、元の状態にリセットされます。式を省略すると、1回の一致検索（ &lt;code&gt;?pattern?&lt;/code&gt; ）がリセットされ、再度一致します。現在のパッケージで変数または検索のみをリセットします。常に1を返します。例：</target>
        </trans-unit>
        <trans-unit id="0d7b613cee2366987a969166247d56f35fe8603c" translate="yes" xml:space="preserve">
          <source>Generally, a collection of procedures. In ancient days, referred to a collection of subroutines in a</source>
          <target state="translated">一般的には、プロシージャの集合体。のサブルーチンの集合を指す。</target>
        </trans-unit>
        <trans-unit id="f3328c5ae4397dc3c4222ba39a73bb9ae82f5a28" translate="yes" xml:space="preserve">
          <source>Generally, any &lt;b&gt;token&lt;/b&gt; or &lt;b&gt;metasymbol&lt;/b&gt;. Often used more specifically to mean the sort of name you might find in a &lt;b&gt;symbol table&lt;/b&gt;.</source>
          <target state="translated">一般に、&lt;b&gt;トークン&lt;/b&gt;または&lt;b&gt;メタシンボル&lt;/b&gt;。多くの場合、&lt;b&gt;シンボルテーブルで&lt;/b&gt;見つかるような名前を&lt;b&gt;表す&lt;/b&gt;ために、より具体的に使用され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="b4a6c168526aaa7b030a8b864e61338267716f45" translate="yes" xml:space="preserve">
          <source>Generally, each argument has one leading &quot;:&quot; and one trailing &quot;:&quot; removed (if any). They are then joined together by a &quot;:&quot;. Special treatment applies for arguments denoting updir paths like &quot;::lib:&quot;, see (4), or arguments consisting solely of colons (&quot;colon paths&quot;), see (5).</source>
          <target state="translated">一般的に、それぞれの引数は、先頭の「:」と末尾の「:」が1つずつ取り除かれています(もしあれば)。そして、それらは &quot;:&quot; で結合されます。(::lib:&quot; のようなアップディルパスを示す引数には特別な扱いが適用され、(4)を参照してください。</target>
        </trans-unit>
        <trans-unit id="dbca80a0f1b382deb6a1f5ce103056435b9b61d1" translate="yes" xml:space="preserve">
          <source>Generally, if you want to store an undefined value in an AV or HV, you should not use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; , but rather create a new undefined value using the &lt;code&gt;newSV&lt;/code&gt; function, for example:</source>
          <target state="translated">一般に、未定義の値をAVまたはHVに格納する場合は、 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; を使用するのではなく、 &lt;code&gt;newSV&lt;/code&gt; 関数を使用して新しい未定義の値を作成する必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="2596a56aba01bbab17ad6712b0bd9966e7587b33" translate="yes" xml:space="preserve">
          <source>Generally, if you want to store an undefined value in an AV or HV, you should not use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt;, but rather create a new undefined value using the &lt;code&gt;newSV&lt;/code&gt; function, for example:</source>
          <target state="translated">一般に、未定義の値をAVまたはHVに格納する場合は、 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; を使用せず、 &lt;code&gt;newSV&lt;/code&gt; 関数を使用して新しい未定義の値を作成します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="a7888dab6e27a5d395183c226ba655dd95d81794" translate="yes" xml:space="preserve">
          <source>Generate C code for XS modules' constants.</source>
          <target state="translated">XSモジュールの定数のためのCコードを生成します。</target>
        </trans-unit>
        <trans-unit id="55b679a0cfa0771f77ea49b9d53b6db25d85485e" translate="yes" xml:space="preserve">
          <source>Generate C/C++ code for the XS initializer function.</source>
          <target state="translated">XS初期化関数のためのC/C++コードを生成します。</target>
        </trans-unit>
        <trans-unit id="6d7a20114b9e2f4adde607a7de6cdc77812cd5c3" translate="yes" xml:space="preserve">
          <source>Generate MYMETA information as a hash either from an existing CPAN Meta file (META.json or META.yml) or from internal data.</source>
          <target state="translated">既存のCPANメタファイル(META.jsonまたはMETA.yml)から、または内部データから、MYMETA情報をハッシュとして生成します。</target>
        </trans-unit>
        <trans-unit id="fad9ff08051acbfd579989fe7d09533be58fc8b2" translate="yes" xml:space="preserve">
          <source>Generate XS code to import C header constants</source>
          <target state="translated">Cヘッダ定数をインポートするためのXSコードの生成</target>
        </trans-unit>
        <trans-unit id="cf1ca662ada637e9d6d3c74e2b646acad00573f4" translate="yes" xml:space="preserve">
          <source>Generate a summary file called</source>
          <target state="translated">というサマリーファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="1dcd35ec477a21ff226c1813b82c60b3ae27de45" translate="yes" xml:space="preserve">
          <source>Generate a unique id (NOT A UUID). This will typically be the process id, the thread id, the time, and an incrementing integer all joined with the &lt;code&gt;ipc_separator()&lt;/code&gt;.</source>
          <target state="translated">一意のID（UUIDではない）を生成します。これは通常、プロセスID、スレッドID、時間、および増分整数であり、すべて &lt;code&gt;ipc_separator()&lt;/code&gt; で結合されます。</target>
        </trans-unit>
        <trans-unit id="a58e7b39e158d6f21c17511a146b04839f328ccd" translate="yes" xml:space="preserve">
          <source>Generate an accessor method for each element of structs and unions. The generated methods are named after the element name; will return the current value of the element if called without additional arguments; and will set the element to the supplied value (and return the new value) if called with an additional argument. Embedded structures and unions are returned as a pointer rather than the complete structure, to facilitate chained calls.</source>
          <target state="translated">構造体およびユニオンの各要素に対してアクセサメソッドを生成します。生成されたメソッドは、要素名にちなんで命名されます。追加の引数なしで呼び出された場合は、その要素の現在の値を返し、追加の引数で呼び出された場合は、その要素を指定された値に設定します(そして新しい値を返します)。埋め込まれた構造体と組合は、連結呼び出しを容易にするために、完全な構造体ではなくポインタとして返されます。</target>
        </trans-unit>
        <trans-unit id="37ce6c2156457df8501e4c1fb83210aa39acfaeb" translate="yes" xml:space="preserve">
          <source>Generate an index at the top of the HTML file (default behaviour).</source>
          <target state="translated">HTMLファイルの先頭にインデックスを生成します(デフォルトの動作)。</target>
        </trans-unit>
        <trans-unit id="da1068fe142a5298b63a98d32acd80f4a76500cb" translate="yes" xml:space="preserve">
          <source>Generate an index at the top of the HTML file. This is the default behaviour.</source>
          <target state="translated">HTMLファイルの先頭にインデックスを生成します。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="255b7210c6594b83b698aa3fb4e69e8ff01d426e" translate="yes" xml:space="preserve">
          <source>Generate and return a fresh cop hints hash containing no entries.</source>
          <target state="translated">エントリを含まない新鮮なcop hintsハッシュを生成して返します。</target>
        </trans-unit>
        <trans-unit id="d85a3b5f2926e3396853e594219b817c7146a9d2" translate="yes" xml:space="preserve">
          <source>Generate stubs for a SelfLoading module</source>
          <target state="translated">SelfLoadingモジュールのスタブを生成する</target>
        </trans-unit>
        <trans-unit id="0ba19194216be13c7f866968bcf3a987117cf5e8" translate="yes" xml:space="preserve">
          <source>Generate test reports if CPAN::Reporter is installed (yes/no)?</source>
          <target state="translated">CPAN::Reporterがインストールされている場合、テストレポートを生成しますか?</target>
        </trans-unit>
        <trans-unit id="548e0abe962fe7973873ce7fe29b5c45581f9fb6" translate="yes" xml:space="preserve">
          <source>Generate the Makefile and run make. Change the test number in Mytest.t to &quot;9&quot; and add the following tests:</source>
          <target state="translated">Makefileを生成し、makeを実行します。Mytest.tのテスト番号を &quot;9 &quot;に変更し、以下のテストを追加します。</target>
        </trans-unit>
        <trans-unit id="2e30a1f598292d25659b6f3a250f216bc967e7e7" translate="yes" xml:space="preserve">
          <source>Generate the default target 'all'.</source>
          <target state="translated">デフォルトのターゲット 'all' を生成します。</target>
        </trans-unit>
        <trans-unit id="4d962473f477d6b33e6a92b907153b952636d0f9" translate="yes" xml:space="preserve">
          <source>Generate the metafile target.</source>
          <target state="translated">メタファイルターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="4db92d1f5198cc69e763847675b8fcf87ee5935e" translate="yes" xml:space="preserve">
          <source>Generate the signature target.</source>
          <target state="translated">署名対象を生成します。</target>
        </trans-unit>
        <trans-unit id="de5fc6d42feef255045834472628eb831eead292" translate="yes" xml:space="preserve">
          <source>Generated internally. Is zero or undefined if name is 7 bit ASCII, &quot;no&quot; if the name is 8 bit (and so should only match if SvUTF8() is false), &quot;yes&quot; if the name is utf8 encoded.</source>
          <target state="translated">内部的に生成される。名前が7ビットASCIIの場合は0か未定義、8ビットの場合は &quot;no&quot;(SvUTF8()がfalseの場合にのみマッチします)、名前がutf8エンコードされている場合は &quot;yes &quot;です。</target>
        </trans-unit>
        <trans-unit id="95fc43dc3dce502b8d3a439f3daa647aaa660090" translate="yes" xml:space="preserve">
          <source>Generates</source>
          <target state="translated">Generates</target>
        </trans-unit>
        <trans-unit id="c167e00e247a5f64156fc2c863e8097c40ce0f9e" translate="yes" xml:space="preserve">
          <source>Generates Foo__Bar.3 style man page names</source>
          <target state="translated">Foo__Bar.3 スタイルの man ページ名を生成します。</target>
        </trans-unit>
        <trans-unit id="43bc892fe6a292ae97df44de7203d863e807362e" translate="yes" xml:space="preserve">
          <source>Generates a .pm file which is backwards compatible with the specified perl version.</source>
          <target state="translated">指定された perl のバージョンと下位互換性のある .pm ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="e7c963d48f673cb2a0857ed31de8d6aa72aa362b" translate="yes" xml:space="preserve">
          <source>Generates a make fragment defining all the macros initialized in init_dist.</source>
          <target state="translated">init_distで初期化されたすべてのマクロを定義するmakeフラグメントを生成します。</target>
        </trans-unit>
        <trans-unit id="80554821ed7148b220a973849dd1aa2c72e393ef" translate="yes" xml:space="preserve">
          <source>Generates a set of &lt;code&gt;@recipelines&lt;/code&gt; which will result in the literal &lt;code&gt;$text&lt;/code&gt; ending up in literal &lt;code&gt;$file&lt;/code&gt; when the recipe is executed. Call it once, with all the text you want in &lt;code&gt;$file&lt;/code&gt;. Make macros will not be expanded, so the locations will be fixed at configure-time, not at build-time.</source>
          <target state="translated">&lt;code&gt;@recipelines&lt;/code&gt; のセットを生成します。これにより、レシピの実行時にリテラル &lt;code&gt;$text&lt;/code&gt; がリテラル &lt;code&gt;$file&lt;/code&gt; になります。 &lt;code&gt;$file&lt;/code&gt; 必要なすべてのテキストを入れて、一度呼び出します。Makeマクロは展開されないため、場所はビルド時ではなく、configure時に修正されます。</target>
        </trans-unit>
        <trans-unit id="17a9c3599652e9b94156636fc524075142b2c6bc" translate="yes" xml:space="preserve">
          <source>Generates a set of @commands which print the $text to a $file.</source>
          <target state="translated">テキストを$ファイルに印刷する@コマンドのセットを生成します。</target>
        </trans-unit>
        <trans-unit id="790a5b36d77c0cf3beb51e493e823c8123ef2b5c" translate="yes" xml:space="preserve">
          <source>Generates and returns a &lt;code&gt;HV *&lt;/code&gt; representing the content of a &lt;code&gt;refcounted_he&lt;/code&gt; chain.</source>
          <target state="translated">&lt;code&gt;refcounted_he&lt;/code&gt; チェーンのコンテンツを表す &lt;code&gt;HV *&lt;/code&gt; を生成して返します。</target>
        </trans-unit>
        <trans-unit id="da16284fed88443c9151f00990591ff02a6776dc" translate="yes" xml:space="preserve">
          <source>Generates and returns a &lt;code&gt;HV *&lt;/code&gt; representing the content of a &lt;code&gt;refcounted_he&lt;/code&gt; chain. &lt;code&gt;flags&lt;/code&gt; is currently unused and must be zero.</source>
          <target state="translated">&lt;code&gt;refcounted_he&lt;/code&gt; チェーンのコンテンツを表す &lt;code&gt;HV *&lt;/code&gt; を生成して返します。 &lt;code&gt;flags&lt;/code&gt; は現在使用されておらず、ゼロである必要があります。</target>
        </trans-unit>
        <trans-unit id="bcbbd96d2dbbc6700210cc4fb74779eab56f16fe" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of hint entries in the cop</source>
          <target state="translated">cop</target>
        </trans-unit>
        <trans-unit id="d673a1d46eb2d6c14769ff96aee9a08c12dcbd3f" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of hint entries in the cop &lt;code&gt;cop&lt;/code&gt;. &lt;code&gt;flags&lt;/code&gt; is currently unused and must be zero.</source>
          <target state="translated">生成し、警官の中にヒントエントリのフルセット表す標準のPerlのハッシュを返し &lt;code&gt;cop&lt;/code&gt; 。 &lt;code&gt;flags&lt;/code&gt; は現在使用されておらず、ゼロである必要があります。</target>
        </trans-unit>
        <trans-unit id="1421406c3adcfc5c7625f4edebffbd408bd80ab6" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of key/value pairs in the cop hints hash</source>
          <target state="translated">cop hints ハッシュのキーと値のペアの完全なセットを表す標準の Perl ハッシュを生成して返します。</target>
        </trans-unit>
        <trans-unit id="e4bd11da534abc8209772058cf5c9cca9ca55068" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of key/value pairs in the cop hints hash &lt;code&gt;cophh&lt;/code&gt;. &lt;code&gt;flags&lt;/code&gt; is currently unused and must be zero.</source>
          <target state="translated">copヒントハッシュ &lt;code&gt;cophh&lt;/code&gt; のキーと値のペアの完全なセットを表す標準のPerlハッシュを生成して返します。 &lt;code&gt;flags&lt;/code&gt; は現在使用されておらず、ゼロである必要があります。</target>
        </trans-unit>
        <trans-unit id="46941b5fc38c746cf81d63a4f6ed7a44413d5382" translate="yes" xml:space="preserve">
          <source>Generates and returns the string form of the typemap with the appropriate prefix around it for verbatim inclusion into an XS file as an embedded typemap. This will return a string like</source>
          <target state="translated">埋め込み型マップとしてXSファイルにそのまま挿入できるように、適切な接頭辞を付けた文字列形式の型マップを生成して返します。これは、次のような文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5744cc55e035757259f005739b080eff1f7c404c" translate="yes" xml:space="preserve">
          <source>Generates and returns the string form of the typemap.</source>
          <target state="translated">タイプマップの文字列形式を生成して返します.</target>
        </trans-unit>
        <trans-unit id="855ea3ad4660369a0d200ca547e9d16bbf1aed26" translate="yes" xml:space="preserve">
          <source>Generates cross reference reports for Perl programs</source>
          <target state="translated">Perlプログラムのクロスリファレンスレポートを生成</target>
        </trans-unit>
        <trans-unit id="e3de133c1c2ce09b6435425a01ca3e82f3c58065" translate="yes" xml:space="preserve">
          <source>Generates one copy of</source>
          <target state="translated">のコピーを1つ生成します。</target>
        </trans-unit>
        <trans-unit id="1d207670d95f5fc2643606a3d629315363ac612b" translate="yes" xml:space="preserve">
          <source>Generates one fewer copies of</source>
          <target state="translated">のコピーを1つ減らして生成します。</target>
        </trans-unit>
        <trans-unit id="28d7a6917a623daf227d101d7b6ed8834cb89f78" translate="yes" xml:space="preserve">
          <source>Generates prototype code for all xsubs. Default is false.</source>
          <target state="translated">すべての xsubs のプロトタイプコードを生成します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="2960b94d28c15d7a694d51b3079b6bc63fbdd48f" translate="yes" xml:space="preserve">
          <source>Generates targets to create the specified directories and set its permission to PERM_DIR.</source>
          <target state="translated">指定されたディレクトリを作成し、そのパーミッションをPERM_DIRに設定するターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="d6e4b3f200d78c6e8a91d9d2272c0f5fb9f6e05c" translate="yes" xml:space="preserve">
          <source>Generates the distmeta target to add META.yml and META.json to the MANIFEST in the distdir.</source>
          <target state="translated">distdir にある MANIFEST に META.yml と META.json を追加するための distmeta ターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="b310c6f5942ab86898d599d13d2e861f310c17d2" translate="yes" xml:space="preserve">
          <source>Generates the distsignature target to add SIGNATURE to the MANIFEST in the distdir.</source>
          <target state="translated">distdir にある MANIFEST に SIGNATURE を追加するための distsignature ターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="3730e292a86874c44122818bef743a546bb5f8f3" translate="yes" xml:space="preserve">
          <source>Generates the manifypods target. This target generates man pages from all POD files in MAN1PODS and MAN3PODS.</source>
          <target state="translated">manifypods ターゲットを生成します。このターゲットは、MAN1PODS と MAN3PODS のすべての POD ファイルから man ページを生成します。</target>
        </trans-unit>
        <trans-unit id="6897e0eaabbcb4cd6c2d74a288e5496907e3b7a9" translate="yes" xml:space="preserve">
          <source>Generates the message string describing an OS error and returns it as an SV. &lt;code&gt;errnum&lt;/code&gt; must be a value that &lt;code&gt;errno&lt;/code&gt; could take, identifying the type of error.</source>
          <target state="translated">OSエラーを説明するメッセージ文字列を生成し、SVとして返します。 &lt;code&gt;errnum&lt;/code&gt; は、エラーのタイプを識別する &lt;code&gt;errno&lt;/code&gt; が取ることができる値である必要があります。</target>
        </trans-unit>
        <trans-unit id="91c589b5a085cc257f1fe2c1088920f6a3260335" translate="yes" xml:space="preserve">
          <source>Generates the path name for the controlling terminal.</source>
          <target state="translated">制御端末のパス名を生成します。</target>
        </trans-unit>
        <trans-unit id="aa78442f98d8c0e48e911fd577f2432ab2e641a7" translate="yes" xml:space="preserve">
          <source>Generates the value of</source>
          <target state="translated">の値を生成します。</target>
        </trans-unit>
        <trans-unit id="e3cf7bd0517329efd2eda4324025ebf8752f984e" translate="yes" xml:space="preserve">
          <source>Generating *.pm files with substitutions eg of $VERSION</source>
          <target state="translated">.pm ファイルを $VERSION などの置換で生成する</target>
        </trans-unit>
        <trans-unit id="b08e002657b5f8d224393deee9469ccf8c547be4" translate="yes" xml:space="preserve">
          <source>Generating Combined Tags</source>
          <target state="translated">複合タグの生成</target>
        </trans-unit>
        <trans-unit id="2a21214ce61b2e34bac827b1129511447eeb1d87" translate="yes" xml:space="preserve">
          <source>Generating the Makefile and running &lt;code&gt;make&lt;/code&gt; created a directory called blib (which stands for &quot;build library&quot;) in the current working directory. This directory will contain the shared library that we will build. Once we have tested it, we can install it into its final location.</source>
          <target state="translated">Makefileを生成してmakeを実行 &lt;code&gt;make&lt;/code&gt; と、現在の作業ディレクトリにblib（「ビルドライブラリ」の略）と呼ばれるディレクトリが作成されます。このディレクトリには、作成する共有ライブラリが含まれます。テストが完了したら、最終的な場所にインストールできます。</target>
        </trans-unit>
        <trans-unit id="bb265528826c32e783457930a0be091d852e5fb2" translate="yes" xml:space="preserve">
          <source>Generating this fatal compile error is one of the main advantages of using the constants interface, since you'll immediately know if you mistype a color name.</source>
          <target state="translated">この致命的なコンパイルエラーを発生させることは、定数インターフェイスを使う主な利点の一つです。</target>
        </trans-unit>
        <trans-unit id="94d49b2add1a84693cb6f6742d43aadc63779926" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF ARRAYS</source>
          <target state="translated">HASH OF ARRAYSの生成</target>
        </trans-unit>
        <trans-unit id="b10605adc6dd4bbb3891b18fa40d3ef6fd2660e3" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF COMPLEX RECORDS</source>
          <target state="translated">HASH OF COMPLEX RECORDSの生成</target>
        </trans-unit>
        <trans-unit id="c99d686abb8c25c079ecc27374e7ae409f23b172" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF HASHES</source>
          <target state="translated">ハッシュオブハッシュの生成</target>
        </trans-unit>
        <trans-unit id="a9893d509c65cb98b9af7180a27be528798c38c2" translate="yes" xml:space="preserve">
          <source>Generation of an ARRAY OF ARRAYS</source>
          <target state="translated">ARRAY OF ARRAYSの生成</target>
        </trans-unit>
        <trans-unit id="36fe3d03032c0fb4a7e4a93e553c5c4b5ad3dfa9" translate="yes" xml:space="preserve">
          <source>Generation of an ARRAY OF HASHES</source>
          <target state="translated">アレイオブハッシュの生成</target>
        </trans-unit>
        <trans-unit id="1801dd927c33bc788a5ffaecd75d804499949a8c" translate="yes" xml:space="preserve">
          <source>Generic event type.</source>
          <target state="translated">一般的なイベントタイプ。</target>
        </trans-unit>
        <trans-unit id="812c1b37318e9ec5939e34ef662accc038427024" translate="yes" xml:space="preserve">
          <source>Generic interface to Perl Compiler backends</source>
          <target state="translated">Perl コンパイラバックエンドへの汎用インターフェース</target>
        </trans-unit>
        <trans-unit id="17d53e0e6a68acdf80b78d4f9d868c8736db2cec" translate="yes" xml:space="preserve">
          <source>Germany</source>
          <target state="translated">Germany</target>
        </trans-unit>
        <trans-unit id="bc3a1464aaf3caaf7316afc754a4e8005c14f861" translate="yes" xml:space="preserve">
          <source>Get &lt;code&gt;REMOTE_FILE&lt;/code&gt; from the server and store locally. &lt;code&gt;LOCAL_FILE&lt;/code&gt; may be a filename or a filehandle. If not specified, the file will be stored in the current directory with the same leafname as the remote file.</source>
          <target state="translated">サーバーから &lt;code&gt;REMOTE_FILE&lt;/code&gt; を取得し、ローカルに保存します。 &lt;code&gt;LOCAL_FILE&lt;/code&gt; は、ファイル名またはファイルハンドルです。指定しない場合、ファイルはリモートファイルと同じリーフ名で現在のディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="ca1a408e2ccd68c37eb04193b5e93ca2ef9ad6c5" translate="yes" xml:space="preserve">
          <source>Get a CPAN user ID</source>
          <target state="translated">CPANのユーザーIDを取得する</target>
        </trans-unit>
        <trans-unit id="d0dc372b2e257044afda97bb0f77031c7a35e177" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt; , or the current directory in long format.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; のディレクトリリスト、または現在のディレクトリを長い形式で取得します。</target>
        </trans-unit>
        <trans-unit id="7ec34cee796d547d14608ac7cf6e0f3edbd159c0" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt; , or the current directory.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; または現在のディレクトリのディレクトリリストを取得します。</target>
        </trans-unit>
        <trans-unit id="7ad9fcfe87b8dab3823168638687a30656ed9e3e" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt;, or the current directory in long format.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; のディレクトリリスト、または現在のディレクトリを長い形式で取得します。</target>
        </trans-unit>
        <trans-unit id="41ecc50cf5bb968c14d0e6c109db03530ea7b68a" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt;, or the current directory.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; のディレクトリリスト、または現在のディレクトリを取得します。</target>
        </trans-unit>
        <trans-unit id="bf83a890906c3992d66c16bdbe7ada7eb9e33114" translate="yes" xml:space="preserve">
          <source>Get a hashref of all active contexts keyed by hub id.</source>
          <target state="translated">ハブ ID がキーとなるすべてのアクティブなコンテキストのハッシュリフを取得します。</target>
        </trans-unit>
        <trans-unit id="374636ae19b296dfea98703295aaecfbdd2c1a97" translate="yes" xml:space="preserve">
          <source>Get a line from the filehandle and store it into the SV, optionally appending to the currently-stored string. If &lt;code&gt;append&lt;/code&gt; is not 0, the line is appended to the SV instead of overwriting it. &lt;code&gt;append&lt;/code&gt; should be set to the byte offset that the appended string should start at in the SV (typically, &lt;code&gt;SvCUR(sv)&lt;/code&gt; is a suitable choice).</source>
          <target state="translated">ファイルハンドルから行を取得してSVに保存し、オプションで現在保存されている文字列に追加します。 &lt;code&gt;append&lt;/code&gt; が0でない場合、行はSVに上書きされるのではなく、追加されます。 &lt;code&gt;append&lt;/code&gt; は、追加された文字列がSVで始まるバイトオフセットに設定する必要があります（通常、 &lt;code&gt;SvCUR(sv)&lt;/code&gt; が適切な選択です）。</target>
        </trans-unit>
        <trans-unit id="64863d4fd73f2a683600ad8024c45903658892b4" translate="yes" xml:space="preserve">
          <source>Get a list of all loaded formatters.</source>
          <target state="translated">ロードされたすべてのフォーマッタのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="c598cea0161d91f18f52f5688b3c025ff94ad39c" translate="yes" xml:space="preserve">
          <source>Get a list of all remaining tests.</source>
          <target state="translated">残っているすべてのテストのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="63a593cb77f2c61ac75772edd049eee1d24e24f8" translate="yes" xml:space="preserve">
          <source>Get a list of all the currently enabled pragmas:</source>
          <target state="translated">現在有効になっているすべてのプラグマのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="7b7cd7f6b002e314d08f78b71b5b591a4f70ba81" translate="yes" xml:space="preserve">
          <source>Get a login for the Perl Authors Upload Server (PAUSE) if you don't already have one: &lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;</source>
          <target state="translated">Perl Authors Upload Server（PAUSE）のログインがない場合は、取得します。http：&lt;a href=&quot;http://pause.perl.org&quot;&gt;//pause.perl.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5bbade2b6657ae3b6cb3e4431498e73906ee530" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. A private implementation of the &lt;code&gt;SvPV_force&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">どういうわけかSVから適切な文字列を取得します。複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvPV_force&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="64dbc32740e54d691c9e2c5cda1ba05449ef3105" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. If &lt;code&gt;flags&lt;/code&gt; has &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate, else not. &lt;code&gt;sv_pvn_force&lt;/code&gt; and &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; are implemented in terms of this function. You normally want to use the various wrapper macros instead: see &lt;code&gt;SvPV_force&lt;/code&gt; and &lt;code&gt;SvPV_force_nomg&lt;/code&gt;</source>
          <target state="translated">どういうわけかSVから適切な文字列を取得します。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;SV_GMAGIC&lt;/code&gt; のビットがセットされて、します &lt;code&gt;mg_get&lt;/code&gt; に &lt;code&gt;sv&lt;/code&gt; 適切であれば、他にはありません。 &lt;code&gt;sv_pvn_force&lt;/code&gt; と &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; は、この関数の観点から実装されています。通常、代わりにさまざまなラッパーマクロを使用します &lt;code&gt;SvPV_force&lt;/code&gt; および &lt;code&gt;SvPV_force_nomg&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="a4a98277d240aa8cf960ac3b968f0e2910fa7636" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate, else not. &lt;code&gt;sv_pvn_force&lt;/code&gt; and &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; are implemented in terms of this function. You normally want to use the various wrapper macros instead: see &lt;code&gt;&lt;a href=&quot;#SvPV_force&quot;&gt;&quot;SvPV_force&quot;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#SvPV_force_nomg&quot;&gt;&quot;SvPV_force_nomg&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">どういうわけかSVから賢明な文字列を取得します。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;SV_GMAGIC&lt;/code&gt; のビットがセットされて、します &lt;code&gt;mg_get&lt;/code&gt; に &lt;code&gt;sv&lt;/code&gt; 適切であれば、他にはありません。 &lt;code&gt;sv_pvn_force&lt;/code&gt; と &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; は、この関数の観点から実装されています。通常は、代わりにさまざまなラッパーマクロを使用する必要があります。 &lt;code&gt;&lt;a href=&quot;#SvPV_force&quot;&gt;&quot;SvPV_force&quot;&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#SvPV_force_nomg&quot;&gt;&quot;SvPV_force_nomg&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="8c02e553004f2cab19e569373b3f708be588549c" translate="yes" xml:space="preserve">
          <source>Get a signature string that identifies this trace. This is used to check if multiple events are related. The signature includes pid, tid, file, line number, and the cid.</source>
          <target state="translated">このトレースを識別する署名文字列を取得します。これは、複数のイベントが関連しているかどうかをチェックするために使用されます。署名には、pid、tid、ファイル、行番号、および cid が含まれます。</target>
        </trans-unit>
        <trans-unit id="0e7220eec11b9f4342ece5e624c0e6dd46adeb9c" translate="yes" xml:space="preserve">
          <source>Get a single character</source>
          <target state="translated">1つの文字を取得する</target>
        </trans-unit>
        <trans-unit id="e9e0ce73749b0540528b23b6467b993e785ccda2" translate="yes" xml:space="preserve">
          <source>Get a single word describing the status of the aggregated tests. Depending on the outcome of the tests returns 'PASS', 'FAIL' or 'NOTESTS'. This token is understood by &lt;a href=&quot;CPAN::Reporter&quot;&gt;CPAN::Reporter&lt;/a&gt;.</source>
          <target state="translated">集約されたテストのステータスを説明する1つの単語を取得します。テストの結果に応じて、「PASS」、「FAIL」、または「NOTESTS」が返されます。このトークンは&lt;a href=&quot;CPAN::Reporter&quot;&gt;CPAN :: Reporter&lt;/a&gt;によって理解されます。</target>
        </trans-unit>
        <trans-unit id="b607b471bd641ae0bad56d53e93561f4a5dcc663" translate="yes" xml:space="preserve">
          <source>Get a single word describing the status of the aggregated tests. Depending on the outcome of the tests returns 'PASS', 'FAIL' or 'NOTESTS'. This token is understood by &lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Reporter&quot;&gt;CPAN::Reporter&lt;/a&gt;.</source>
          <target state="translated">集約されたテストのステータスを説明する1つの単語を取得します。テストの結果に応じて、「PASS」、「FAIL」、または「NOTESTS」を返します。このトークンは&lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Reporter&quot;&gt;CPAN :: Reporter&lt;/a&gt;によって理解されます。</target>
        </trans-unit>
        <trans-unit id="652a108bff905ce7e12c4132d1e5164ee76e0045" translate="yes" xml:space="preserve">
          <source>Get a snapshot of the &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt; as it was when this event was generated</source>
          <target state="translated">このイベントが生成されたときの&lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2 :: EventFacet :: Traceの&lt;/a&gt;スナップショットを取得します</target>
        </trans-unit>
        <trans-unit id="268755ff66af0e6c2f8c79a47e954f7f7e3c8522" translate="yes" xml:space="preserve">
          <source>Get all context acquire callbacks.</source>
          <target state="translated">すべてのコンテキスト取得コールバックを取得します。</target>
        </trans-unit>
        <trans-unit id="62cda4392fada43f853c80695bdea66eaedbc325" translate="yes" xml:space="preserve">
          <source>Get all context init callbacks.</source>
          <target state="translated">すべてのコンテキスト init コールバックを取得します。</target>
        </trans-unit>
        <trans-unit id="258167081523b0e769f69cd6b90feafb8b21566c" translate="yes" xml:space="preserve">
          <source>Get all context release callbacks.</source>
          <target state="translated">すべてのコンテキストリリースコールバックを取得します。</target>
        </trans-unit>
        <trans-unit id="8c6a43f37aaaa1c1ef244c52bc8b90f068f349e4" translate="yes" xml:space="preserve">
          <source>Get all pre-subtest callbacks.</source>
          <target state="translated">サブテスト前のコールバックをすべて取得します。</target>
        </trans-unit>
        <trans-unit id="94e908780575d3c7b13c6f58aed85812783fe4af" translate="yes" xml:space="preserve">
          <source>Get all remaining lines from the file. It will croak() if accidentally called in a scalar context.</source>
          <target state="translated">ファイルから残りのすべての行を取得します。スカラーコンテキストで誤って呼ばれた場合は croak()を実行します。</target>
        </trans-unit>
        <trans-unit id="8afcb9bb7c5fc3d1b5cca08c78fb90070f96f12d" translate="yes" xml:space="preserve">
          <source>Get all remaining lines. It will croak() if accidentally called in a scalar context.</source>
          <target state="translated">残りの行をすべて取得します。スカラコンテキストで誤って呼ばれた場合は croak()を実行します。</target>
        </trans-unit>
        <trans-unit id="aed3f8067239d43cc5fd9e2c71aefda5e7ddcfa2" translate="yes" xml:space="preserve">
          <source>Get an a list of file handles which can be passed to &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; to determine the readiness of this parser.</source>
          <target state="translated">このパーサーの準備状況を判断するために &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; に渡すことができるファイルハンドルのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="99c3d23f931dd2a61338c92b7ff3b897fe83c3f3" translate="yes" xml:space="preserve">
          <source>Get an a list of file handles which can be passed to &lt;code&gt;select&lt;/code&gt; to determine the readiness of this parser.</source>
          <target state="translated">このパーサーの準備が &lt;code&gt;select&lt;/code&gt; ているかどうかを判断するために選択するために渡すことができるファイルハンドルのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="57c71ad46ac7b3fc7bffe5d8abfd2437d2bcda85" translate="yes" xml:space="preserve">
          <source>Get an array of descriptions in the order in which they were added to the aggregator.</source>
          <target state="translated">アグリゲータに追加された順に説明の配列を取得します。</target>
        </trans-unit>
        <trans-unit id="c8c26ce9973503b04ecaa0e9e248aee4e6b0e8e3" translate="yes" xml:space="preserve">
          <source>Get an option associated with the socket. Levels other than &lt;code&gt;SOL_SOCKET&lt;/code&gt; may be specified here. As a convenience, this method will unpack a byte buffer of the correct size back into a number.</source>
          <target state="translated">ソケットに関連付けられているオプションを取得します。ここでは、 &lt;code&gt;SOL_SOCKET&lt;/code&gt; 以外のレベルを指定できます。便宜上、このメソッドは正しいサイズのバイトバッファをアンパックして数値に戻します。</target>
        </trans-unit>
        <trans-unit id="5601f3fdd46c63546dcbad9b3ec6be8b404f4b2f" translate="yes" xml:space="preserve">
          <source>Get current distribution object.</source>
          <target state="translated">現在のディストリビューションオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="4fd330b00e5fd43c7facb1ce40b15978badf9d49" translate="yes" xml:space="preserve">
          <source>Get current value of extended library search path. If &lt;code&gt;type&lt;/code&gt; is present and positive, works with &lt;code&gt;END_LIBPATH&lt;/code&gt; , if negative, works with &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; , otherwise with &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; .</source>
          <target state="translated">拡張ライブラリ検索パスの現在の値を取得します。 &lt;code&gt;type&lt;/code&gt; が存在し、正の場合は &lt;code&gt;END_LIBPATH&lt;/code&gt; で機能し、負の場合は &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; で機能し、それ以外の場合は &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; で機能します。</target>
        </trans-unit>
        <trans-unit id="301ab0a8bfbdea1320501d6fb4f20c05a5acc181" translate="yes" xml:space="preserve">
          <source>Get current value of extended library search path. If &lt;code&gt;type&lt;/code&gt; is present and positive, works with &lt;code&gt;END_LIBPATH&lt;/code&gt;, if negative, works with &lt;code&gt;LIBPATHSTRICT&lt;/code&gt;, otherwise with &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt;.</source>
          <target state="translated">拡張ライブラリ検索パスの現在の値を取得します。 &lt;code&gt;type&lt;/code&gt; が存在し、正の場合は &lt;code&gt;END_LIBPATH&lt;/code&gt; で機能し、負の場合は &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; で機能し、それ以外の場合は &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; で機能します。</target>
        </trans-unit>
        <trans-unit id="00cf4729c08b5fcd57e241d25d2cbdeb99dcc776" translate="yes" xml:space="preserve">
          <source>Get feedback before publishing</source>
          <target state="translated">出版前にフィードバックを得る</target>
        </trans-unit>
        <trans-unit id="7db8371110606460ae544aa3da9ce0f0de1a1f3f" translate="yes" xml:space="preserve">
          <source>Get file status. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt; . The data returned is identical to the data from Perl's builtin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">ファイルのステータスを取得します。これは、 &lt;code&gt;POSIX::open&lt;/code&gt; 呼び出すことによって取得されるようなファイル記述子を使用します。返されるデータは、Perlの組み込み &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 関数からのデータと同じです。</target>
        </trans-unit>
        <trans-unit id="b95e70cbf88260ac80b7f6cea8fe31193dc57e20" translate="yes" xml:space="preserve">
          <source>Get file status. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt;. The data returned is identical to the data from Perl's builtin &lt;code&gt;stat&lt;/code&gt; function.</source>
          <target state="translated">ファイルステータスを取得します。これは、 &lt;code&gt;POSIX::open&lt;/code&gt; 呼び出して取得したようなファイル記述子を使用します。返されるデータは、Perlの組み込みの &lt;code&gt;stat&lt;/code&gt; 関数からのデータと同じです。</target>
        </trans-unit>
        <trans-unit id="fa68e261aa81f581b5a90ba1e9bfd725ef59d405" translate="yes" xml:space="preserve">
          <source>Get name of current operating system.</source>
          <target state="translated">現在のオペレーティングシステムの名前を取得します。</target>
        </trans-unit>
        <trans-unit id="689e6ea9037095052aff1101fdfdc680b6e214b0" translate="yes" xml:space="preserve">
          <source>Get numeric formatting information. Returns a reference to a hash containing the current underlying locale's formatting values. Users of this function should also read &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;, which provides a comprehensive discussion of Perl locale handling, including &lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;a section devoted to this function&lt;/a&gt;.</source>
          <target state="translated">数値フォーマット情報を取得します。現在の基本的なロケールのフォーマット値を含むハッシュへの参照を返します。この関数のユーザーは、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;も読む必要があります。これは、Perlロケールの取り扱いに関する包括的な説明を提供し&lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eb04f3dc68cc14a2bc5cb88ddbed2221f73390f1" translate="yes" xml:space="preserve">
          <source>Get numeric formatting information. Returns a reference to a hash containing the formatting values of the locale that currently underlies the program, regardless of whether or not it is called from within the scope of a &lt;code&gt;use locale&lt;/code&gt;. Users of this function should also read &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;, which provides a comprehensive discussion of Perl locale handling, including &lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;a section devoted to this function&lt;/a&gt;. Prior to Perl 5.28, or when operating in a non thread-safe environment, it should not be used in a threaded application unless it's certain that the underlying locale is C or POSIX. This is because it otherwise changes the locale, which globally affects all threads simultaneously. Windows platforms starting with Visual Studio 2005 are mostly thread-safe, but use of this function in those prior to Visual Studio 2015 can interfere with a thread that has called &lt;a href=&quot;perlapi#switch_to_global_locale&quot;&gt;&quot;switch_to_global_locale&quot; in perlapi&lt;/a&gt;.</source>
          <target state="translated">数値のフォーマット情報を取得します。 &lt;code&gt;use locale&lt;/code&gt; スコープ内から呼び出されたかどうかに関係なく、現在プログラムの基礎となっているロケールのフォーマット値を含むハッシュへの参照を返します。この関数のユーザーは、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;も読む必要があります。これは、この関数に関する&lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;セクション&lt;/a&gt;を含む、 Perlロケール処理の包括的な説明を提供します。。Perl 5.28より前、またはスレッドセーフでない環境で動作している場合は、基になるロケールがCまたはPOSIXであることが確実でない限り、スレッド化されたアプリケーションで使用しないでください。これは、ロケールが変更され、すべてのスレッドに同時にグローバルに影響するためです。Visual Studio 2005以降のWindowsプラットフォームはほとんどスレッドセーフですが、Visual Studio 2015より前のプラットフォームでこの関数を使用すると&lt;a href=&quot;perlapi#switch_to_global_locale&quot;&gt;、perlapiで「switch_to_global_locale」&lt;/a&gt;と呼ばれるスレッドに干渉する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f1f984cefe527deb4addc8cf500f9c5727ae40d0" translate="yes" xml:space="preserve">
          <source>Get option associated with the socket. Other levels than SOL_SOCKET may be specified here.</source>
          <target state="translated">ソケットに関連付けられたオプションを取得します。ここでは、SOL_SOCKET 以外のレベルを指定することができます。</target>
        </trans-unit>
        <trans-unit id="0d1c28860360a4fa7e9af6746bedcb431787f46a" translate="yes" xml:space="preserve">
          <source>Get or set a pragma. To get the state of a pragma:</source>
          <target state="translated">プラグマを取得または設定します。プラグマの状態を取得します。</target>
        </trans-unit>
        <trans-unit id="9daccf52c23258f9b88b2002eb34556bfc85c14d" translate="yes" xml:space="preserve">
          <source>Get or set the encoding. By default no encoding is set, the original settings of STDOUT and STDERR are used.</source>
          <target state="translated">エンコーディングを取得または設定します。デフォルトではエンコーディングは設定されておらず、STDOUT と STDERR の元の設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="c6ad90a8eb388c5e1e51917fba7213e97b759cef" translate="yes" xml:space="preserve">
          <source>Get or set the facet data (see &lt;a href=&quot;Test2::Event&quot;&gt;Test2::Event&lt;/a&gt;). If no facet_data is set then &lt;code&gt;Test2::Event-&amp;gt;facet_data&lt;/code&gt; will be called to produce facets from the other data.</source>
          <target state="translated">ファセットデータを取得または設定します（&lt;a href=&quot;Test2::Event&quot;&gt;Test2 :: Eventを&lt;/a&gt;参照）。facet_dataが設定されていない場合、 &lt;code&gt;Test2::Event-&amp;gt;facet_data&lt;/code&gt; が呼び出され、他のデータからファセットが生成されます。</target>
        </trans-unit>
        <trans-unit id="77c12013a4f3faabdfd45c20cf7f2e5379d28bb4" translate="yes" xml:space="preserve">
          <source>Get or set the list of extensions that files must have in order to be considered tests. Defaults to ['.t'].</source>
          <target state="translated">テストとみなされるためにファイルが持たなければならない拡張子のリストを取得または設定します。デフォルトは ['.t']です。</target>
        </trans-unit>
        <trans-unit id="356d593fa08d05ba24dd1f0e40399f953a56cd2a" translate="yes" xml:space="preserve">
          <source>Get or set the plan. The plan must be an integer larger than 0, the string 'NO PLAN', or the string 'SKIP'.</source>
          <target state="translated">プランを取得または設定します。プランは 0 より大きい整数、文字列 'NO PLAN'、または文字列 'SKIP' でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b3f02dbc79ab20b0a28ad615d9d491d7daece201" translate="yes" xml:space="preserve">
          <source>Get pathname of current working directory</source>
          <target state="translated">現在の作業ディレクトリのパス名を取得</target>
        </trans-unit>
        <trans-unit id="fe08fded31b445465eb024604de34561803ebc20" translate="yes" xml:space="preserve">
          <source>Get terminal control attributes.</source>
          <target state="translated">ターミナルコントロールの属性を取得します。</target>
        </trans-unit>
        <trans-unit id="8a07eb17266818645630850b8e079929a5430178" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;Business::CreditCard&quot;&gt;Business::CreditCard&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPANから&lt;a href=&quot;Business::CreditCard&quot;&gt;Business :: CreditCard&lt;/a&gt;モジュールを入手してください。</target>
        </trans-unit>
        <trans-unit id="a59623bd1c16560f3bf3b733cb7fef045dc9eb39" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;http://search.cpan.org/perldoc/Business::CreditCard&quot;&gt;Business::CreditCard&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPANから&lt;a href=&quot;http://search.cpan.org/perldoc/Business::CreditCard&quot;&gt;Business :: CreditCard&lt;/a&gt;モジュールを入手してください。</target>
        </trans-unit>
        <trans-unit id="f445ac9afb3e26b0227b0cd9d1470f0c1289598c" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;http://www.cpan.org/modules/by-module/Roman&quot;&gt;http://www.cpan.org/modules/by-module/Roman&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;http://www.cpan.org/modules/by-module/Roman&quot;&gt;http://www.cpan.org/modules/by-module/Roman&lt;/a&gt;モジュールを入手してください。</target>
        </trans-unit>
        <trans-unit id="006addc7b486481a4d34e5ae872451f7b6a5b8f4" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; of a capture variable. There's a special callback for this so that Perl doesn't have to do a FETCH and run &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; on the result, since the length is (in Perl's case) known from an offset stored in &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; , this is much more efficient:</source>
          <target state="translated">取得 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; キャプチャ変数のを。 &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; に格納されているオフセットから長さが（Perlの場合）わかっているため、Perlが結果に対してFETCHを実行して &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; を実行する必要がないように、このための特別なコールバックがあります。これははるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="96b721a1282dd71b06b7a0b329766d37d734dc44" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;length&lt;/code&gt; of a capture variable. There's a special callback for this so that Perl doesn't have to do a FETCH and run &lt;code&gt;length&lt;/code&gt; on the result, since the length is (in Perl's case) known from an offset stored in &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt;, this is much more efficient:</source>
          <target state="translated">取得 &lt;code&gt;length&lt;/code&gt; キャプチャ変数のを。これには特別なコールバックがあり、Perlが結果に対してFETCHとラン &lt;code&gt;length&lt;/code&gt; を実行する必要がないようにします。これは、長さが（Perlの場合） &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; に格納されたオフセットからわかるため、はるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="443a48897b6cbe8dfb893d381d8f3dbf523ba2b5" translate="yes" xml:space="preserve">
          <source>Get the Android Native Development Kit (NDK)</source>
          <target state="translated">Android Native Development Kit (NDK)を入手する</target>
        </trans-unit>
        <trans-unit id="863803585d080b0160f072f6f610a86df5a19ecc" translate="yes" xml:space="preserve">
          <source>Get the EMX development suite and gzip/tar from Hobbes ( &lt;a href=&quot;http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d&quot;&gt;http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d&lt;/a&gt; ), and then follow the instructions for Unix.</source>
          <target state="translated">Hobbes（&lt;a href=&quot;http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d&quot;&gt;http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d&lt;/a&gt;）からEMX開発スイートとgzip / tarを入手し、次の手順に従います。 Unix。</target>
        </trans-unit>
        <trans-unit id="a11deed8b7fb50959590945fa161672220265d44" translate="yes" xml:space="preserve">
          <source>Get the EMX development suite and gzip/tar, from either Hobbes ( &lt;a href=&quot;http://hobbes.nmsu.edu&quot;&gt;http://hobbes.nmsu.edu&lt;/a&gt; ) or Leo ( &lt;a href=&quot;http://www.leo.org&quot;&gt;http://www.leo.org&lt;/a&gt; ), and then follow the instructions for Unix.</source>
          <target state="translated">EMX開発スイートとgzip / tarをHobbes（&lt;a href=&quot;http://hobbes.nmsu.edu&quot;&gt;http://hobbes.nmsu.edu&lt;/a&gt;）またはLeo（&lt;a href=&quot;http://www.leo.org&quot;&gt;http://www.leo.org&lt;/a&gt;）から入手し、Unixの手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="eeea8bcfb6a44e65297b264dd91067f2cd97f054" translate="yes" xml:space="preserve">
          <source>Get the IPC object used by the hub.</source>
          <target state="translated">ハブが使用するIPCオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="3eecfedc3d599a9037003efbf96acd9d9eb5f106" translate="yes" xml:space="preserve">
          <source>Get the IPC separator. Currently this is always the string &lt;code&gt;'~'&lt;/code&gt;.</source>
          <target state="translated">IPCセパレータを入手してください。現在、これは常に文字列 &lt;code&gt;'~'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dfa60352899d302ffde80e2387665c80133c9bba" translate="yes" xml:space="preserve">
          <source>Get the UUID of the facets or event.</source>
          <target state="translated">ファセットまたはイベントのUUIDを取得します。</target>
        </trans-unit>
        <trans-unit id="ced75a781e513b77bca0f70399564d03cfb1de17" translate="yes" xml:space="preserve">
          <source>Get the call frame arrayref.</source>
          <target state="translated">呼び出しフレームの配列refを取得します。</target>
        </trans-unit>
        <trans-unit id="2195f868fa88f8b70cd41ad179a9470365a47e7d" translate="yes" xml:space="preserve">
          <source>Get the caller details for the debug-info. This is where errors should be reported.</source>
          <target state="translated">debug-info の呼び出し元の詳細を取得します。これはエラーが報告されるべき場所です。</target>
        </trans-unit>
        <trans-unit id="9758c15788da0555e5c729023387926feaf7d590" translate="yes" xml:space="preserve">
          <source>Get the debug-info filename.</source>
          <target state="translated">デバッグ情報ファイル名を取得します。</target>
        </trans-unit>
        <trans-unit id="697d6a125a10c1c4c64f7782c6ae3f71a72c3baa" translate="yes" xml:space="preserve">
          <source>Get the debug-info line number.</source>
          <target state="translated">デバッグ情報の行番号を取得します。</target>
        </trans-unit>
        <trans-unit id="4bc5c447dbc3b9fc9af210c15468a5c642ba2764" translate="yes" xml:space="preserve">
          <source>Get the debug-info package.</source>
          <target state="translated">デバッグ情報パッケージを取得します。</target>
        </trans-unit>
        <trans-unit id="d8d7d19d0cac2b94974cf236fc0ff30805147d71" translate="yes" xml:space="preserve">
          <source>Get the debug-info subroutine name.</source>
          <target state="translated">デバッグインフォのサブルーチン名を取得します。</target>
        </trans-unit>
        <trans-unit id="64409390ff46213a8f658956301c2bac016d52d8" translate="yes" xml:space="preserve">
          <source>Get the directive (such as TODO, skip_all, or no_plan).</source>
          <target state="translated">ディレクティブを取得します (TODO,skip_all,no_plan など)。</target>
        </trans-unit>
        <trans-unit id="e8b62b2ce191f547e41a6dc69d08d7e6142159c8" translate="yes" xml:space="preserve">
          <source>Get the exit callbacks.</source>
          <target state="translated">出口のコールバックを取得します。</target>
        </trans-unit>
        <trans-unit id="bd4becd7b8dc2161e4cfcda2010cf7c1c881bcda" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator's process.</source>
          <target state="translated">このイテレータのプロセスの終了ステータスを取得します。</target>
        </trans-unit>
        <trans-unit id="84b89fd72831dd053c82f16626d634a48a2598fb" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator. Always returns zero.</source>
          <target state="translated">このイテレータの終了ステータスを取得します。常にゼロを返します。</target>
        </trans-unit>
        <trans-unit id="f3a54d4a203ed01a0cc006bea81ab1571b475a38" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator. For an array iterator this will always be zero.</source>
          <target state="translated">このイテレータの終了ステータスを取得します。配列イテレータの場合、これは常にゼロになります。</target>
        </trans-unit>
        <trans-unit id="8fd35afec01d8926c34ef914def56ba246178c07" translate="yes" xml:space="preserve">
          <source>Get the global formatter. By default this is the &lt;code&gt;'Test2::Formatter::TAP'&lt;/code&gt; package. This could be any package that implements the &lt;code&gt;write()&lt;/code&gt; method. This can also be an instantiated object.</source>
          <target state="translated">グローバルフォーマッタを入手してください。デフォルトでは、これは &lt;code&gt;'Test2::Formatter::TAP'&lt;/code&gt; パッケージです。これは、 &lt;code&gt;write()&lt;/code&gt; メソッドを実装する任意のパッケージである可能性があります。これは、インスタンス化されたオブジェクトにすることもできます。</target>
        </trans-unit>
        <trans-unit id="133e8c41853aab1cbe28dc6fb07183856dc1f08a" translate="yes" xml:space="preserve">
          <source>Get the header and the first &lt;code&gt;NUMLINES&lt;/code&gt; of the body for the message &lt;code&gt;MSGNUM&lt;/code&gt; . Returns a reference to an array which contains the lines of text read from the server.</source>
          <target state="translated">メッセージ &lt;code&gt;MSGNUM&lt;/code&gt; のヘッダーと本文の最初の &lt;code&gt;NUMLINES&lt;/code&gt; を取得します。サーバーから読み取られたテキストの行を含む配列への参照を返します。</target>
        </trans-unit>
        <trans-unit id="44dcb96b4157af191087e71f51fc99a6b6f82410" translate="yes" xml:space="preserve">
          <source>Get the header and the first &lt;code&gt;NUMLINES&lt;/code&gt; of the body for the message &lt;code&gt;MSGNUM&lt;/code&gt;. Returns a reference to an array which contains the lines of text read from the server.</source>
          <target state="translated">メッセージ &lt;code&gt;MSGNUM&lt;/code&gt; のヘッダーと本文の最初の &lt;code&gt;NUMLINES&lt;/code&gt; を取得します。サーバーから読み取られたテキスト行を含む配列への参照を返します。</target>
        </trans-unit>
        <trans-unit id="261245dcb4cd039fa82044da94d5af5764188968" translate="yes" xml:space="preserve">
          <source>Get the identifier string of the hub.</source>
          <target state="translated">ハブの識別子文字列を取得します。</target>
        </trans-unit>
        <trans-unit id="ec27c501b4f1f5c68c6d3f3bf841c92928c9d3da" translate="yes" xml:space="preserve">
          <source>Get the list of IPC drivers.</source>
          <target state="translated">IPCドライバのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="a54ca3db20c68a6648a2c8195a312d093894414c" translate="yes" xml:space="preserve">
          <source>Get the login name of the owner of the current process.</source>
          <target state="translated">現在のプロセスの所有者のログイン名を取得します。</target>
        </trans-unit>
        <trans-unit id="e120bfbb1d3603fe717d8918b14899076a8087c1" translate="yes" xml:space="preserve">
          <source>Get the message &lt;code&gt;MSGNUM&lt;/code&gt; from the remote mailbox. If &lt;code&gt;FH&lt;/code&gt; is not given then get returns a reference to an array which contains the lines of text read from the server. If &lt;code&gt;FH&lt;/code&gt; is given then the lines returned from the server are printed to the filehandle &lt;code&gt;FH&lt;/code&gt; .</source>
          <target state="translated">リモートメールボックスからメッセージ &lt;code&gt;MSGNUM&lt;/code&gt; を取得します。 &lt;code&gt;FH&lt;/code&gt; が指定されていない場合、getはサーバーから読み取られたテキストの行を含む配列への参照を返します。場合は &lt;code&gt;FH&lt;/code&gt; が指定され、サーバから返された行は、ファイルハンドルに印刷され &lt;code&gt;FH&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9e2e0e867c33579d6b765fa40534326a1f4874f" translate="yes" xml:space="preserve">
          <source>Get the message &lt;code&gt;MSGNUM&lt;/code&gt; from the remote mailbox. If &lt;code&gt;FH&lt;/code&gt; is not given then get returns a reference to an array which contains the lines of text read from the server. If &lt;code&gt;FH&lt;/code&gt; is given then the lines returned from the server are printed to the filehandle &lt;code&gt;FH&lt;/code&gt;.</source>
          <target state="translated">リモートメールボックスからメッセージ &lt;code&gt;MSGNUM&lt;/code&gt; を取得します。 &lt;code&gt;FH&lt;/code&gt; が指定されていない場合、getは、サーバーから読み取られたテキスト行を含む配列への参照を返します。 &lt;code&gt;FH&lt;/code&gt; が指定されている場合、サーバーから返された行はファイルハンドル &lt;code&gt;FH&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="02956660e36eb9cd5729ca3ddfdb37f09edf43a6" translate="yes" xml:space="preserve">
          <source>Get the number of expected tests</source>
          <target state="translated">予想されるテストの数を取得する</target>
        </trans-unit>
        <trans-unit id="8408e45ea1e0a303e5ad9750221f4cde3d540ec1" translate="yes" xml:space="preserve">
          <source>Get the number of failures (Not all failures come from a test fail, so this number can be larger than the count).</source>
          <target state="translated">失敗の数を取得します(すべての失敗がテストの失敗から来るわけではないので、この数はカウントよりも大きくすることができます)。</target>
        </trans-unit>
        <trans-unit id="7fc19f8901910f0d7ab07310a7af344a372ca2fd" translate="yes" xml:space="preserve">
          <source>Get the number of tests that have been run.</source>
          <target state="translated">実行したテストの数を取得します。</target>
        </trans-unit>
        <trans-unit id="06a3b874607d7fe23e092b9f32da6bccbba5b9e7" translate="yes" xml:space="preserve">
          <source>Get the one true IPC instance.</source>
          <target state="translated">1つの真のIPCインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="1b3bad55eb25ac7cc70d7253f134d8eddcf42c83" translate="yes" xml:space="preserve">
          <source>Get the one true hub stack.</source>
          <target state="translated">1つの真のハブスタックを手に入れよう。</target>
        </trans-unit>
        <trans-unit id="f6ca380ab0b4b303eb42e16913919aab33b145ab" translate="yes" xml:space="preserve">
          <source>Get the plan if this event sets one. The plan is a list of up to 3 items: &lt;code&gt;($count, $directive, $reason)&lt;/code&gt;. &lt;code&gt;$count&lt;/code&gt; must be defined, the others may be undef, or may not exist at all.</source>
          <target state="translated">このイベントで計画が立てられたら、計画を立ててください。プランは、最大3つのアイテムのリストです： &lt;code&gt;($count, $directive, $reason)&lt;/code&gt; 。 &lt;code&gt;$count&lt;/code&gt; 定義する必要があります。その他は定義されていないか、まったく存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="5fb333825a908708c042aef1d4930adb1df0d546" translate="yes" xml:space="preserve">
          <source>Get the post-load callbacks.</source>
          <target state="translated">ポストロードのコールバックを取得します。</target>
        </trans-unit>
        <trans-unit id="ab445fff1e80ef74e036e6b70dbbae199679cf5c" translate="yes" xml:space="preserve">
          <source>Get the process id under which the hub was created.</source>
          <target state="translated">ハブが作成されたプロセス ID を取得します。</target>
        </trans-unit>
        <trans-unit id="0c448f39220dd4f40755ba8ad6db14f8a075e74a" translate="yes" xml:space="preserve">
          <source>Get the reason for the directive.</source>
          <target state="translated">ディレクティブの理由を取得します。</target>
        </trans-unit>
        <trans-unit id="171a80b6f7c9c9b0de0c2c1387e261c225bb5f1c" translate="yes" xml:space="preserve">
          <source>Get the results of the last test run. Returns a &lt;code&gt;result_class()&lt;/code&gt; instance.</source>
          <target state="translated">最後のテスト実行の結果を取得します。 &lt;code&gt;result_class()&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="90d44fbd255026683b10ff974054e3d86ff08631" translate="yes" xml:space="preserve">
          <source>Get the shebang line for a script file.</source>
          <target state="translated">スクリプトファイルの shebang 行を取得します。</target>
        </trans-unit>
        <trans-unit id="504fa2737ce7fe1a3445394a4d2940417838557c" translate="yes" xml:space="preserve">
          <source>Get the subtest id, if any.</source>
          <target state="translated">もしあれば、サブテストIDを取得します。</target>
        </trans-unit>
        <trans-unit id="b503549e59b904f365573c05edd48365fba47357" translate="yes" xml:space="preserve">
          <source>Get the summary of the event or facets hash, if any.</source>
          <target state="translated">イベントやファセットのハッシュがあれば、その概要を取得します。</target>
        </trans-unit>
        <trans-unit id="697c2b6a1d382211fc2dd0bca44da6d75975210e" translate="yes" xml:space="preserve">
          <source>Get the text content of Pod</source>
          <target state="translated">Podのテキストコンテンツを取得する</target>
        </trans-unit>
        <trans-unit id="cf9b50efaedfcdc930b14f6f277c2b1d49f52f07" translate="yes" xml:space="preserve">
          <source>Get the thread id under which the hub was created.</source>
          <target state="translated">ハブが作成されたスレッドIDを取得します。</target>
        </trans-unit>
        <trans-unit id="8a6470e93add70210e01a18515324d36b81b5961" translate="yes" xml:space="preserve">
          <source>Get the value at offset</source>
          <target state="translated">オフセットの値を取得します。</target>
        </trans-unit>
        <trans-unit id="3f99d5742414d0f26bb6737824fc7dcb7e13087f" translate="yes" xml:space="preserve">
          <source>Get the value at offset &lt;code&gt;po&lt;/code&gt; in the current (compiling or executing) pad. Use macro &lt;code&gt;PAD_SV&lt;/code&gt; instead of calling this function directly.</source>
          <target state="translated">現在の（コンパイルまたは実行中の）パッドのオフセット &lt;code&gt;po&lt;/code&gt; の値を取得します。この関数を直接呼び出す代わりに、マクロ &lt;code&gt;PAD_SV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b4b20b8862126ed2accf702e1ec733c901c8db4d" translate="yes" xml:space="preserve">
          <source>Get the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad</source>
          <target state="translated">現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; の値を取得します</target>
        </trans-unit>
        <trans-unit id="72cc9b87213c59838a0c486fddb38c60d8bcb990" translate="yes" xml:space="preserve">
          <source>Get the value from slot &lt;code&gt;po&lt;/code&gt; in the base (DEPTH=1) pad of a padlist</source>
          <target state="translated">パッドリストのベース（DEPTH = 1）パッドのスロット &lt;code&gt;po&lt;/code&gt; から値を取得します</target>
        </trans-unit>
        <trans-unit id="41a32dc0be59d1d03b67c73a7e5c862c3253a5e0" translate="yes" xml:space="preserve">
          <source>Get the value of a variable in the language context sending this message.</source>
          <target state="translated">このメッセージを送信する言語コンテキスト内の変数の値を取得します。</target>
        </trans-unit>
        <trans-unit id="c15dfba3a3a5eb3e6fb48d7c0b41882c9028755a" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator's process.</source>
          <target state="translated">このイテレータのプロセスの待機状態を取得します。</target>
        </trans-unit>
        <trans-unit id="a8e5109ddd83023961a33c488ce31369f7a956bb" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator. Always returns zero.</source>
          <target state="translated">このイテレータの待機状態を取得します。常にゼロを返します。</target>
        </trans-unit>
        <trans-unit id="dd379b83821718a59329d33da5c3c07390f8df61" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator. For an array iterator this will always be zero.</source>
          <target state="translated">このイテレータの待機状態を取得します。配列イテレータの場合、これは常にゼロになります。</target>
        </trans-unit>
        <trans-unit id="3a194d016da71ce2734ee5b70b1ec1fd4e7b2f88" translate="yes" xml:space="preserve">
          <source>Get your book listed</source>
          <target state="translated">あなたの本をリストアップしてください</target>
        </trans-unit>
        <trans-unit id="f05995dac27437d201b828e910f3978fcd1fbdb4" translate="yes" xml:space="preserve">
          <source>Get/Set no_wait. This option is used to turn off process/thread waiting at exit.</source>
          <target state="translated">no_wait を取得/設定します。このオプションは、終了時にプロセス/スレッドの待機をオフにするために使用されます。</target>
        </trans-unit>
        <trans-unit id="e233b794a1025f221a2e19c396601854ddf32a53" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;causes_fail&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;causes_fail&lt;/code&gt; 属性を取得/設定します。これはデフォルトで &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9ed5a0273240a9b3ee55565e913ad2f011b22d22" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;diagnostics&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;diagnostics&lt;/code&gt; 属性を取得/設定します。これはデフォルトで &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b178628e927b1daa440df79b30c36ca6aa5801e2" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;diagnostics&lt;/code&gt; attribute. This defaults to an empty list which is undef in scalar context.</source>
          <target state="translated">&lt;code&gt;diagnostics&lt;/code&gt; 属性を取得/設定します。これはデフォルトで、スカラーコンテキストではundefである空のリストになります。</target>
        </trans-unit>
        <trans-unit id="998b08d698070e21ce34a6c78daa8a278ad100bb" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;increments_count&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;increments_count&lt;/code&gt; 属性を取得/設定します。これはデフォルトで &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="64b7f1710a69e37485e0b975cee17e3c59ffeaab" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;no_display&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no_display&lt;/code&gt; 属性を取得/設定します。これはデフォルトで &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a3ded29f704b88fd0cfcb49ddd21cca5c05fea04" translate="yes" xml:space="preserve">
          <source>Get/Set the summary. This will default to the event package &lt;code&gt;'Test2::Event::Generic'&lt;/code&gt;. You can set it to any value. Setting this to &lt;code&gt;undef&lt;/code&gt; will reset it to the default.</source>
          <target state="translated">要約を取得/設定します。これはデフォルトでイベントパッケージ &lt;code&gt;'Test2::Event::Generic'&lt;/code&gt; ます。任意の値に設定できます。これを &lt;code&gt;undef&lt;/code&gt; に設定すると、デフォルトにリセットされます。</target>
        </trans-unit>
        <trans-unit id="eaa1925227608cb70376a6b12c78b32afc34ff80" translate="yes" xml:space="preserve">
          <source>Get/Set the timeout value for the IPC system. This timeout is how long the IPC system will wait for child processes and threads to finish before aborting.</source>
          <target state="translated">IPC システムのタイムアウト値を取得/設定します。このタイムアウトは、IPC システムが子プロセスやスレッドが終了してからアボートするまでの時間です。</target>
        </trans-unit>
        <trans-unit id="a862124c43c274d34647a9768c5732fb7edcd167" translate="yes" xml:space="preserve">
          <source>Get/set subroutine or variable attributes</source>
          <target state="translated">サブルーチンまたは変数の属性の取得/設定</target>
        </trans-unit>
        <trans-unit id="ad4d3a3e81abdd5f967582609d05426a7e1a1f09" translate="yes" xml:space="preserve">
          <source>Get/set the file that the typemap is written to when the &lt;code&gt;write&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; メソッドが呼び出されたときにタイプマップが書き​​込まれるファイルを取得/設定します。</target>
        </trans-unit>
        <trans-unit id="734d96b1526270ab63896aef381ca9e394e07680" translate="yes" xml:space="preserve">
          <source>GetAddrInfoFlags =&amp;gt; INT</source>
          <target state="translated">GetAddrInfoFlags =&amp;gt; INT</target>
        </trans-unit>
        <trans-unit id="7b06e76800a42032a96bcc6024f2c0120477eda8" translate="yes" xml:space="preserve">
          <source>GetDriveType</source>
          <target state="translated">GetDriveType</target>
        </trans-unit>
        <trans-unit id="4d366e22c7e7afb26f254e27218ba4b5f3a9c339" translate="yes" xml:space="preserve">
          <source>GetDriveTypeW</source>
          <target state="translated">GetDriveTypeW</target>
        </trans-unit>
        <trans-unit id="02e33b49b28fd7abf67a6360478728eb23bcdcb7" translate="yes" xml:space="preserve">
          <source>GetFileAttributes</source>
          <target state="translated">GetFileAttributes</target>
        </trans-unit>
        <trans-unit id="b5ae6df22c4dbe836a96f76bc0e327488d077a63" translate="yes" xml:space="preserve">
          <source>GetFileAttributesW</source>
          <target state="translated">GetFileAttributesW</target>
        </trans-unit>
        <trans-unit id="d95e69f9c878364f21361c49a01e8572507003e4" translate="yes" xml:space="preserve">
          <source>GetFileContents</source>
          <target state="translated">GetFileContents</target>
        </trans-unit>
        <trans-unit id="ca029d0e848a5c50bd8f8b65a8b59e91056276c2" translate="yes" xml:space="preserve">
          <source>GetFileSize</source>
          <target state="translated">GetFileSize</target>
        </trans-unit>
        <trans-unit id="d70c41d299ba5d949686529c3325452327ed11ac" translate="yes" xml:space="preserve">
          <source>GetFileType</source>
          <target state="translated">GetFileType</target>
        </trans-unit>
        <trans-unit id="85c2077811a13c55e12281a1a16e82bf83521f47" translate="yes" xml:space="preserve">
          <source>GetHandleInformation</source>
          <target state="translated">GetHandleInformation</target>
        </trans-unit>
        <trans-unit id="144ac2f17a86a95a5c613437daf2d443d323cbfe" translate="yes" xml:space="preserve">
          <source>GetLogicalDriveStrings</source>
          <target state="translated">GetLogicalDriveStrings</target>
        </trans-unit>
        <trans-unit id="3fb92c0f6b90a931b6edc6b53a4165e6646cfd3b" translate="yes" xml:space="preserve">
          <source>GetLogicalDriveStringsW</source>
          <target state="translated">GetLogicalDriveStringsW</target>
        </trans-unit>
        <trans-unit id="359de04a45f94fecc69aeaee51b4983d8da5dca3" translate="yes" xml:space="preserve">
          <source>GetLogicalDrives</source>
          <target state="translated">GetLogicalDrives</target>
        </trans-unit>
        <trans-unit id="0e09541d86291862cd9e2e7048d551c2058e9bb4" translate="yes" xml:space="preserve">
          <source>GetOptions does not return a false result when an option is not supplied</source>
          <target state="translated">GetOptions は、オプションが与えられていない場合に false の結果を返しません。</target>
        </trans-unit>
        <trans-unit id="87d3b5ae9087dfd036d22e3daee54391ea6d78e7" translate="yes" xml:space="preserve">
          <source>GetOptions does not split the command line correctly</source>
          <target state="translated">GetOptionsがコマンドラインを正しく分割しない</target>
        </trans-unit>
        <trans-unit id="46612c2fb2a3f4d1528e0cd7f5288c84da4524f8" translate="yes" xml:space="preserve">
          <source>GetOptions returns true to indicate success. It returns false when the function detected one or more errors during option parsing. These errors are signalled using warn() and can be trapped with &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; .</source>
          <target state="translated">GetOptionsは、成功を示すためにtrueを返します。オプションの解析中に関数が1つ以上のエラーを検出すると、falseを返します。これらのエラーはwarn（）を使用して通知され、 &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; でトラップできます。</target>
        </trans-unit>
        <trans-unit id="e7e6a7d291078818a841e8fbb32781ab4eb115e7" translate="yes" xml:space="preserve">
          <source>GetOptions returns true to indicate success. It returns false when the function detected one or more errors during option parsing. These errors are signalled using warn() and can be trapped with &lt;code&gt;$SIG{__WARN__}&lt;/code&gt;.</source>
          <target state="translated">GetOptionsはtrueを返し、成功を示します。関数がオプションの解析中に1つ以上のエラーを検出した場合、falseを返します。これらのエラーはwarn（）を使用して通知され、 &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; でトラップできます。</target>
        </trans-unit>
        <trans-unit id="6b726fe0f0e4cd3ba3741be1513769194ec024e4" translate="yes" xml:space="preserve">
          <source>GetOptions() will not interpret a leading &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; as option starters if the next argument is a reference. To force &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; as option starters, use &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; . Confusing? Well, &lt;b&gt;using a starter argument is strongly deprecated&lt;/b&gt; anyway.</source>
          <target state="translated">GetOptions（）は、次の引数が参照の場合、先頭の &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; をオプションスターターとして解釈しません。 &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; と &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; をオプションのスターターとして強制するには、 &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; 使用します。混乱していますか？まあ、&lt;b&gt;スターター引数を使用すると、強く推奨されていません&lt;/b&gt;とにかく。</target>
        </trans-unit>
        <trans-unit id="16760cc35e467767b93dc2d05726f450ceb00c90" translate="yes" xml:space="preserve">
          <source>GetOptions() will not interpret a leading &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; as option starters if the next argument is a reference. To force &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; as option starters, use &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt;. Confusing? Well, &lt;b&gt;using a starter argument is strongly deprecated&lt;/b&gt; anyway.</source>
          <target state="translated">次の引数が参照である場合、GetOptions（）は先頭の &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; をオプションスターターとして解釈しません。オプションのスターターとして &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; と &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; を強制するには、 &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; 使用します。紛らわしい？まあ、&lt;b&gt;スターター引数を使用することは&lt;/b&gt;とにかく&lt;b&gt;強く非推奨&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="b9732e721546ff2bc7ea74a9d199d6d228afae46" translate="yes" xml:space="preserve">
          <source>GetOptions() will return a true value if the command line could be processed successfully. Otherwise, it will write error messages using die() and warn(), and return a false result.</source>
          <target state="translated">GetOptions()は、コマンドラインが正常に処理できた場合は真の値を返します。それ以外の場合は、die()と warn()を使用してエラーメッセージを書き、偽の結果を返します。</target>
        </trans-unit>
        <trans-unit id="aa06cb5ffe8522116195fd355d2b91d389bd8a5b" translate="yes" xml:space="preserve">
          <source>GetOsFHandle</source>
          <target state="translated">GetOsFHandle</target>
        </trans-unit>
        <trans-unit id="c15a5bf5af39cb39808fd51b4df60dcce6c74bc8" translate="yes" xml:space="preserve">
          <source>GetOverlappedResult</source>
          <target state="translated">GetOverlappedResult</target>
        </trans-unit>
        <trans-unit id="24f1806763ff30d05d4f6d9d593a4e5d6de479bf" translate="yes" xml:space="preserve">
          <source>GetVars</source>
          <target state="translated">GetVars</target>
        </trans-unit>
        <trans-unit id="ddb392651d25e429c1fc282e6e0508008703e7c9" translate="yes" xml:space="preserve">
          <source>GetVolumeInformation</source>
          <target state="translated">GetVolumeInformation</target>
        </trans-unit>
        <trans-unit id="7cb5fe26b0731e0ea744472a46b3d353a646c276" translate="yes" xml:space="preserve">
          <source>GetVolumeInformationW</source>
          <target state="translated">GetVolumeInformationW</target>
        </trans-unit>
        <trans-unit id="e6a23a3ed3795bbccfde771ea078bdc8eb4555df" translate="yes" xml:space="preserve">
          <source>Get_base</source>
          <target state="translated">Get_base</target>
        </trans-unit>
        <trans-unit id="7d2063f10a426b2597efe0b96af12c715bad49d9" translate="yes" xml:space="preserve">
          <source>Get_bufsiz</source>
          <target state="translated">Get_bufsiz</target>
        </trans-unit>
        <trans-unit id="74bfd499a0b07372ebad99462abefcf9bf44c724" translate="yes" xml:space="preserve">
          <source>Get_cnt</source>
          <target state="translated">Get_cnt</target>
        </trans-unit>
        <trans-unit id="c6e97b96c560e2a763e7a463f1543025d1c8cd4a" translate="yes" xml:space="preserve">
          <source>Get_ptr</source>
          <target state="translated">Get_ptr</target>
        </trans-unit>
        <trans-unit id="c3688e17a720d615e2f589c547cb538d0ee7344a" translate="yes" xml:space="preserve">
          <source>Getarg</source>
          <target state="translated">Getarg</target>
        </trans-unit>
        <trans-unit id="d3750099056a52cd3d76c09c5969009aae1b2738" translate="yes" xml:space="preserve">
          <source>Getopt::Long</source>
          <target state="translated">Getopt::Long</target>
        </trans-unit>
        <trans-unit id="ee86fdfdf70c8935b9943d5d042784e3c2ea2b52" translate="yes" xml:space="preserve">
          <source>Getopt::Long - Extended processing of command line options</source>
          <target state="translated">Getopt::Long-コマンドラインオプションの拡張処理</target>
        </trans-unit>
        <trans-unit id="9f1cb7796236a18d5a48dd6147f6ef96a3c237e4" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be configured by calling subroutine Getopt::Long::Configure(). This subroutine takes a list of quoted strings, each specifying a configuration option to be enabled, e.g. &lt;code&gt;ignore_case&lt;/code&gt; , or disabled, e.g. &lt;code&gt;no_ignore_case&lt;/code&gt; . Case does not matter. Multiple calls to Configure() are possible.</source>
          <target state="translated">Getopt :: Longは、サブルーチンGetopt :: Long :: Configure（）を呼び出すことで構成できます。このサブルーチンは引用符で囲まれた文字列のリストを受け取り、それぞれが有効にする構成オプションを指定します（例： &lt;code&gt;ignore_case&lt;/code&gt; 、または無効にする、たとえば &lt;code&gt;no_ignore_case&lt;/code&gt; )。大文字小文字は関係ありません。Configure（）への複数の呼び出しが可能です。</target>
        </trans-unit>
        <trans-unit id="bca644a1b2e9f78e9cd0b66d0f59880fe49f5af2" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be configured by calling subroutine Getopt::Long::Configure(). This subroutine takes a list of quoted strings, each specifying a configuration option to be enabled, e.g. &lt;code&gt;ignore_case&lt;/code&gt;, or disabled, e.g. &lt;code&gt;no_ignore_case&lt;/code&gt;. Case does not matter. Multiple calls to Configure() are possible.</source>
          <target state="translated">Getopt :: Longは、サブルーチンGetopt :: Long :: Configure（）を呼び出すことで構成できます。このサブルーチンは、引用符で囲まれた文字列のリストを受け取ります。各文字列は、有効にする構成オプション（ &lt;code&gt;ignore_case&lt;/code&gt; など）または無効にする構成オプション（ &lt;code&gt;no_ignore_case&lt;/code&gt; など)を指定します。ケースは関係ありません。Configure（）への複数の呼び出しが可能です。</target>
        </trans-unit>
        <trans-unit id="7e500819062670bf30da6e44490f24a19a2b2b19" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be used in an object oriented way as well:</source>
          <target state="translated">Getopt::Long はオブジェクト指向でも使用できます。</target>
        </trans-unit>
        <trans-unit id="edc4bf4d0ae35771f0ba93156da87e25f9c34e7d" translate="yes" xml:space="preserve">
          <source>Getopt::Long encourages the use of Pod::Usage to produce help messages. For example:</source>
          <target state="translated">Getopt::Longは、ヘルプメッセージを生成するためにPod::Usageを使用することを推奨しています。例えば</target>
        </trans-unit>
        <trans-unit id="b2e568fc541602443fba9f2e2602a6ef4699382b" translate="yes" xml:space="preserve">
          <source>Getopt::Long is the Perl5 successor of &lt;code&gt;newgetopt.pl&lt;/code&gt; . This was the first Perl module that provided support for handling the new style of command line options, in particular long option names, hence the Perl5 name Getopt::Long. This module also supports single-character options and bundling.</source>
          <target state="translated">Getopt :: Longは、Perl5の後継である &lt;code&gt;newgetopt.pl&lt;/code&gt; です。これは、新しいスタイルのコマンドラインオプション、特に長いオプション名、つまりPerl5の名前Getopt :: Longの処理をサポートする最初のPerlモジュールでした。このモジュールは、1文字のオプションとバンドリングもサポートします。</target>
        </trans-unit>
        <trans-unit id="b77e9ce94bd759578db0d78c385379329328546c" translate="yes" xml:space="preserve">
          <source>Getopt::Long is the Perl5 successor of &lt;code&gt;newgetopt.pl&lt;/code&gt;. This was the first Perl module that provided support for handling the new style of command line options, in particular long option names, hence the Perl5 name Getopt::Long. This module also supports single-character options and bundling.</source>
          <target state="translated">Getopt :: Longは、 &lt;code&gt;newgetopt.pl&lt;/code&gt; の後継であるPerl5です。これは、新しいスタイルのコマンドラインオプション、特に長いオプション名を処理するためのサポートを提供した最初のPerlモジュールでした。したがって、Perl5の名前はGetopt :: Longです。このモジュールは、単一文字のオプションとバンドルもサポートしています。</target>
        </trans-unit>
        <trans-unit id="baeccd76f672aaa366456df8bb56a2d544addefb" translate="yes" xml:space="preserve">
          <source>Getopt::Long is thread safe when using ithreads as of Perl 5.8. It is</source>
          <target state="translated">Getopt::Long は Perl 5.8 以降のスレッドセーフです。これは</target>
        </trans-unit>
        <trans-unit id="0969a40bae8913a7683a1a070a431edeaeab53a5" translate="yes" xml:space="preserve">
          <source>Getopt::Long supports three styles of bundling. To enable bundling, a call to Getopt::Long::Configure is required.</source>
          <target state="translated">Getopt::Long は、3 つのスタイルのバンドルをサポートしています。バンドルを有効にするには、Getopt::Long::Configure を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c364d3e4d70b8c945dae76119e75bf89e0b572cc" translate="yes" xml:space="preserve">
          <source>Getopt::Long supports two useful variants of simple options:</source>
          <target state="translated">Getopt::Long は、シンプルなオプションの 2 つの便利なバリエーションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="35548099a37e6129ad92eb2599c19e8e81824308" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a help message using module &lt;a href=&quot;../pod/usage&quot;&gt;Pod::Usage&lt;/a&gt;. The message, derived from the SYNOPSIS POD section, will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt :: Longは、モジュール&lt;a href=&quot;../pod/usage&quot;&gt;Pod :: Usageを使用&lt;/a&gt;してヘルプメッセージを提供します。SYNOPSIS PODセクションから派生したメッセージは標準出力に書き込まれ、処理は終了します。</target>
        </trans-unit>
        <trans-unit id="8fdf32dabf889485e2c6ebd8bd7c876e559a3385" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a help message using module &lt;a href=&quot;Pod::Usage&quot;&gt;Pod::Usage&lt;/a&gt;. The message, derived from the SYNOPSIS POD section, will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt :: Longは、モジュール&lt;a href=&quot;Pod::Usage&quot;&gt;Pod :: Usageを使用&lt;/a&gt;してヘルプメッセージを提供します。SYNOPSIS PODセクションから派生したメッセージは、標準出力に書き込まれ、処理は終了します。</target>
        </trans-unit>
        <trans-unit id="23debd03657a7e0cf1c9081bd9b34c843df29188" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a standard version message that includes the program name, its version (if $main::VERSION is defined), and the versions of Getopt::Long and Perl. The message will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt::Long は、プログラム名、そのバージョン ($main::VERSION が定義されている場合)、Getopt::Long および Perl のバージョンを含む標準のバージョン・メッセージを提供します。このメッセージは標準出力に書き込まれ、処理は終了します。</target>
        </trans-unit>
        <trans-unit id="231784d11e2ac3af47374629249969cb6df988d0" translate="yes" xml:space="preserve">
          <source>Getopt::Std</source>
          <target state="translated">Getopt::Std</target>
        </trans-unit>
        <trans-unit id="703b8d06dd815db9f4b95873fa7d356dd5900693" translate="yes" xml:space="preserve">
          <source>Getopt::Std - Process single-character switches with switch clustering</source>
          <target state="translated">Getopt::Std-一文字スイッチをスイッチクラスタリングで処理する</target>
        </trans-unit>
        <trans-unit id="622ba9888f87bde337d7026005408ee58ef615b1" translate="yes" xml:space="preserve">
          <source>Gets information about a file system volume, returning a true value if successful. On failure, returns a false value and sets &lt;code&gt;fileLastError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt;.</source>
          <target state="translated">ファイルシステムボリュームに関する情報を取得し、成功した場合は真の値を返します。失敗すると、false値を返し、 &lt;code&gt;fileLastError()&lt;/code&gt; と &lt;code&gt;$^E&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="050f7a7a02c0f512f89945ac517880bcdb5ae514" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of concurrent test runs the harness is handling. By default, this value is 1 -- for parallel testing, this should be set higher.</source>
          <target state="translated">ハーネスが処理する同時実行テストの数を取得または設定します。デフォルトでは、この値は1です。並列テストのためには、これを高く設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="daa629c55c1f0a45358dee6010d69ea52181b0b2" translate="yes" xml:space="preserve">
          <source>Gets the &lt;code&gt;mro_isarev&lt;/code&gt; for this class, returned as an arrayref of class names. These are every class that &quot;isa&quot; the given class name, even if the isa relationship is indirect. This is used internally by the MRO code to keep track of method/MRO cache invalidations.</source>
          <target state="translated">このクラスの &lt;code&gt;mro_isarev&lt;/code&gt; を取得します。クラス名のarrayrefとして返されます。これらは、isa関係が間接的であっても、指定されたクラス名を「isa」するすべてのクラスです。これは、メソッド/ MROキャッシュの無効化を追跡するためにMROコードによって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="70c3b8c2ec32f2ee2102b43f1e6dd3a00777d348" translate="yes" xml:space="preserve">
          <source>Gets the version of Perl currently running the test suite.</source>
          <target state="translated">現在テストスイートを実行しているPerlのバージョンを取得します。</target>
        </trans-unit>
        <trans-unit id="fd14d8ab490abe0a698ffc2511ce53075831cc54" translate="yes" xml:space="preserve">
          <source>Gets/sets the current test number we're on. You usually shouldn't have to set this.</source>
          <target state="translated">現在のテスト番号を取得/設定します。通常、これを設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="3706dd8132de9e8897f7e90d7114484c9d4b2bb9" translate="yes" xml:space="preserve">
          <source>Gets/sets the number of tests we expect this test to run and prints out the appropriate headers.</source>
          <target state="translated">このテストの実行を期待するテストの数を取得/設定し、適切なヘッダを出力します。</target>
        </trans-unit>
        <trans-unit id="e92d34d8c771c7a84b714ba45ff28d98b8c6322f" translate="yes" xml:space="preserve">
          <source>Getter, used to get the value of the &lt;code&gt;foo&lt;/code&gt; field.</source>
          <target state="translated">ゲッター &lt;code&gt;foo&lt;/code&gt; フィールドの値を取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f884a4b1be1eb753e1154cd093d629796012ffc9" translate="yes" xml:space="preserve">
          <source>Getter/setter for frontend object. Method just allows to subclass CPAN.pm.</source>
          <target state="translated">フロントエンドオブジェクトのゲッター/セッター。メソッドはCPAN.pmをサブクラス化するだけです。</target>
        </trans-unit>
        <trans-unit id="1acf2787a8aee315df9ae150576ddc4f44be77a7" translate="yes" xml:space="preserve">
          <source>Getter/setter for the &quot;generation&quot; of the test suite run. The first generation is 1 (one) and subsequent generations are 2, 3, etc.</source>
          <target state="translated">テストスイートの実行の「世代」のゲッター/セッター。最初の世代は 1 (1)で、それ以降の世代は 2,3 などです。</target>
        </trans-unit>
        <trans-unit id="df0821c683786b3a185e90a15a8887e90823f964" translate="yes" xml:space="preserve">
          <source>Getter/setter for the instance of the &lt;code&gt;state_class&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;state_class&lt;/code&gt; のインスタンスのゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="5bf05902357ec950c574054f51b64aa64104327d" translate="yes" xml:space="preserve">
          <source>Getter/setter for the instance of the &lt;code&gt;state_class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;state_class&lt;/code&gt; のインスタンスのゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="9d0a2a42561baa9a96f6b60d628e8035a5add88f" translate="yes" xml:space="preserve">
          <source>Getter/setter for the name of the class used for maintaining state. This class should either subclass from &lt;code&gt;App::Prove::State&lt;/code&gt; or provide an identical interface.</source>
          <target state="translated">状態の維持に使用されるクラスの名前のゲッター/セッター。このクラスは、 &lt;code&gt;App::Prove::State&lt;/code&gt; からサブクラス化するか、同じインターフェースを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5b0e960fe4e828ae0c4af986bdc86fc8e330536" translate="yes" xml:space="preserve">
          <source>Getter/setter for the name of the class used for tracking test results. This class should either subclass from &lt;code&gt;App::Prove::State::Result&lt;/code&gt; or provide an identical interface.</source>
          <target state="translated">テスト結果の追跡に使用されるクラスの名前のゲッター/セッター。このクラスは、 &lt;code&gt;App::Prove::State::Result&lt;/code&gt; からサブクラス化するか、同一のインターフェースを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="eabe8c9a6205eacd9d12103fd632a371642529ec" translate="yes" xml:space="preserve">
          <source>Getter/setter for the time of the test suite run.</source>
          <target state="translated">テストスイートの実行時間のゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="6796c34d6d781e2d3a0ac04017b688fdbad6d325" translate="yes" xml:space="preserve">
          <source>Getting Started with Getopt::Long</source>
          <target state="translated">Getopt::Long の使い方</target>
        </trans-unit>
        <trans-unit id="efdcb676f7e4576e5bad658605652f36207e9edd" translate="yes" xml:space="preserve">
          <source>Getting Support</source>
          <target state="translated">サポートを受ける</target>
        </trans-unit>
        <trans-unit id="1252190bfc7e0e95dec199e97b41cd19bd2e58b1" translate="yes" xml:space="preserve">
          <source>Getting changes into a maint branch</source>
          <target state="translated">メインブランチへの変更の取得</target>
        </trans-unit>
        <trans-unit id="d63959139747b55549aaec776baaded768ee26b5" translate="yes" xml:space="preserve">
          <source>Getting every available name</source>
          <target state="translated">利用可能なすべての名前を取得する</target>
        </trans-unit>
        <trans-unit id="36235f076eea8a428b643f4a70d6dbb8c2bed724" translate="yes" xml:space="preserve">
          <source>Getting perl source</source>
          <target state="translated">perlのソースを取得する</target>
        </trans-unit>
        <trans-unit id="dfa7f5176d7ce9da792b1bc4befb42509ca613ce" translate="yes" xml:space="preserve">
          <source>Getting the Perl Source for AmigaOS</source>
          <target state="translated">AmigaOS用のPerlソースの取得</target>
        </trans-unit>
        <trans-unit id="ca13f2cfdfff6452c98f50feff43bb9608b60008" translate="yes" xml:space="preserve">
          <source>Getting the fat out of XSUBs</source>
          <target state="translated">XSUBsから脂肪を取り出す</target>
        </trans-unit>
        <trans-unit id="1e5b964707fd03837f1c6270f09aa1a8d502762e" translate="yes" xml:space="preserve">
          <source>Getting this message indicates that the outcome of the match arguably should have been the opposite of what actually happened. If you think that is the case, you may wish to make the &lt;code&gt;non_unicode&lt;/code&gt; warnings category fatal; if you agree with Perl's decision, you may wish to turn off this category.</source>
          <target state="translated">このメッセージを受け取ることは、おそらく試合の結果が実際に起こったこととは正反対だったことを示しています。その場合は、 &lt;code&gt;non_unicode&lt;/code&gt; 警告カテゴリを致命的にすることをお勧めします。Perlの決定に同意する場合は、このカテゴリをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="c57b1bd007b42e02300f16d8e99034836448a153" translate="yes" xml:space="preserve">
          <source>Getting your patch accepted</source>
          <target state="translated">パッチを受理してもらう</target>
        </trans-unit>
        <trans-unit id="80db569e43bb9df0657e208673f0728aa476a744" translate="yes" xml:space="preserve">
          <source>Gigantic thanks to Jarkko Hietaniemi, for agreeing to put this in the core when I hadn't written it yet, and for generally being helpful, supportive, and competent. (Usually the rule is &quot;choose any one.&quot;) Also big thanks to Abhijit Menon-Sen for all of the same things.</source>
          <target state="translated">私がまだ書いていないときに、これをコアに入れることに同意してくれたJarkko Hietaniemiに、そして、全般的に親切で、サポート的で、有能であったことに、大きな感謝を捧げます。(通常のルールは「どれか一つを選ぶ」です。)また、同様のことをしてくれた Abhijit Menon-Sen にも大きな感謝をします。</target>
        </trans-unit>
        <trans-unit id="c447f4baf429b1b41a12ae13b0f7bf296acd86b4" translate="yes" xml:space="preserve">
          <source>Gisle Aas &amp;lt;gisle@aas.no&amp;gt;</source>
          <target state="translated">Gisle Aas &amp;lt;gisle@aas.no&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e2bf29bf784713e55d54fd683f2ddb22d16ebc1e" translate="yes" xml:space="preserve">
          <source>Gisle Aas made a number of improvements to the documentation for 2.07 and his advice and assistance is also greatly appreciated.</source>
          <target state="translated">Gisle Aas氏は2.07のドキュメントに多くの改善を行い、彼の助言と支援にも大いに感謝しています。</target>
        </trans-unit>
        <trans-unit id="d5205d4410276cc0ebead8a23281418d320e5d50" translate="yes" xml:space="preserve">
          <source>Gisle Aas's &quot;illustrated perlguts&quot;, also known as</source>
          <target state="translated">ジスレ・アースの「イラスト入りペルグート」、通称</target>
        </trans-unit>
        <trans-unit id="8a1336646a79e293474d5da63f8a9e49f7c504c4" translate="yes" xml:space="preserve">
          <source>Give a seed the pseudorandom number generator, see &lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;.</source>
          <target state="translated">シードに疑似乱数ジェネレータを与えます&lt;a href=&quot;functions/srand&quot;&gt;。srandを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="111eb8faa37551d29f6ef39dc427825af2b24320" translate="yes" xml:space="preserve">
          <source>Give a seed the pseudorandom number generator, see &lt;a href=&quot;perlfunc#srand&quot;&gt;&quot;srand&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">シードに疑似乱数ジェネレータを与えます&lt;a href=&quot;perlfunc#srand&quot;&gt;。perlfuncの「srand」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ecbf54e25625127b374bd97fb6bf30d58f7f39f4" translate="yes" xml:space="preserve">
          <source>Give examples of use in your documentation</source>
          <target state="translated">ドキュメントでの使用例を示してください。</target>
        </trans-unit>
        <trans-unit id="576b2bd7a5f1aafe83cdf1ff1d6086595bd3253e" translate="yes" xml:space="preserve">
          <source>Give meaningful error messages when a test fails.</source>
          <target state="translated">テストが失敗したときに意味のあるエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="22362db21ca02fd220365037ef3ce1c3ae84669f" translate="yes" xml:space="preserve">
          <source>Give some example uses of the program or function. Don't skimp; users often find this the most useful part of the documentation. The examples are generally given as verbatim paragraphs.</source>
          <target state="translated">プログラムや関数の使用例をいくつか挙げてください。手を抜いてはいけません。ユーザはこれがドキュメントの中で最も有用な部分であることに気づくことが多いです。一般的には、例は逐語的な段落として与えられています。</target>
        </trans-unit>
        <trans-unit id="50b41e662ea9282912cd0935127aa4fdcf1ffa2b" translate="yes" xml:space="preserve">
          <source>Give the module a version/issue/release number.</source>
          <target state="translated">モジュールにバージョン/発行/リリース番号を与えてください。</target>
        </trans-unit>
        <trans-unit id="280f5d0aaefd1eefc611f50ae84a5b211fd8c124" translate="yes" xml:space="preserve">
          <source>Given 'tests' and optional 'rules' as input, returns a new &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; object. Each member of &lt;code&gt;@tests&lt;/code&gt; should be either a a test file name, or a two element arrayref, where the first element is a test file name, and the second element is a test description. By default, we'll use the test name as the description.</source>
          <target state="translated">入力として「テスト」とオプションの「ルール」を指定すると、新しい &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; オブジェクトを返します。 &lt;code&gt;@tests&lt;/code&gt; の各メンバーは、テストファイル名または2つの要素のarrayrefのいずれかである必要があります。最初の要素はテストファイル名、2番目の要素はテストの説明です。デフォルトでは、説明としてテスト名を使用します。</target>
        </trans-unit>
        <trans-unit id="c200e634889ae19cc0bdab66baa6f148654f222f" translate="yes" xml:space="preserve">
          <source>Given -n, if there's a opt_n_with, it'll call $object-&amp;gt;opt_n_with( ARGUMENT ) (e.g., &quot;-n foo&quot; =&amp;gt; $object-&amp;gt;opt_n_with('foo'). Ditto &quot;-nfoo&quot;)</source>
          <target state="translated">-nを指定すると、opt_n_withがある場合、$ object-&amp;gt; opt_n_with（ARGUMENT）が呼び出されます（例： &quot;-n foo&quot; =&amp;gt; $ object-&amp;gt; opt_n_with（ 'foo'）。同上 &quot;-nfoo&quot;）</target>
        </trans-unit>
        <trans-unit id="88ad438932c9bdde0a7a6699aa6fd02d2661a215" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;, returns the value &lt;code&gt;x - n*y&lt;/code&gt; , where &lt;code&gt;n&lt;/code&gt; is the integer closest to &lt;code&gt;&lt;a href=&quot;functions/x&quot;&gt;x/y&lt;/a&gt;&lt;/code&gt;. [C99]</source>
          <target state="translated">所与 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; は、値を返し &lt;code&gt;x - n*y&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; に最も近い整数であり、 &lt;code&gt;&lt;a href=&quot;functions/x&quot;&gt;x/y&lt;/a&gt;&lt;/code&gt; 。[C99]</target>
        </trans-unit>
        <trans-unit id="0a44544bbb8d81a603f952dfb3c5683ac4205665" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, returns the value &lt;code&gt;x - n*y&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the integer closest to &lt;code&gt;x&lt;/code&gt;/&lt;code&gt;y&lt;/code&gt;. [C99]</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が与えられると、値 &lt;code&gt;x - n*y&lt;/code&gt; 返します。ここで、 &lt;code&gt;n&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; / &lt;code&gt;y&lt;/code&gt; に最も近い整数です。[C99]</target>
        </trans-unit>
        <trans-unit id="4516641ce73c8bc0e4fc5ba5d53992584effc072" translate="yes" xml:space="preserve">
          <source>Given a $parser that's an object of class Pod::Simple::PullParser (or a subclass)...</source>
          <target state="translated">クラスPod::Simple::PullParser(またはサブクラス)のオブジェクトである$parserが与えられると...</target>
        </trans-unit>
        <trans-unit id="29437e7d43f3cc0c11b41ed388b862563ac2a62f" translate="yes" xml:space="preserve">
          <source>Given a &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, detects what kind of source it is and returns</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP :: Parser :: Sourceが&lt;/a&gt;与えられると、それがどのような種類のソースであるかを検出し、返します</target>
        </trans-unit>
        <trans-unit id="8e13613226c18b55f5220f10848d744fb0086077" translate="yes" xml:space="preserve">
          <source>Given a &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, finds the most suitable &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; to use to create a &lt;a href=&quot;TAP::Parser::Iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; (see &lt;a href=&quot;#detect_source&quot;&gt;&quot;detect_source&quot;&lt;/a&gt;). Dies on error.</source>
          <target state="translated">与えられた&lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP :: Parserの::ソースを&lt;/a&gt;、最も適した見つけた&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAPを:: Parserの:: SourceHandlerを&lt;/a&gt;作成するために使用する&lt;a href=&quot;TAP::Parser::Iterator&quot;&gt;TAP :: Parserの:: Iteratorを&lt;/a&gt;（参照&lt;a href=&quot;#detect_source&quot;&gt;&quot;detect_sourceを&quot;&lt;/a&gt;）。エラーで死ぬ。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
