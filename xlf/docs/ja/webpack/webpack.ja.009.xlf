<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="f9b5279241ac4eaf497f48312502a15451bf8d13" translate="yes" xml:space="preserve">
          <source>webpackJsonp</source>
          <target state="translated">webpackJsonp</target>
        </trans-unit>
        <trans-unit id="c544b0c6d7a73338c5f4b44c7d74627704a3e003" translate="yes" xml:space="preserve">
          <source>which is what enables users to leave off the extension when importing:</source>
          <target state="translated">これは、ユーザーがインポートする際に拡張子を外すことができるようにするものです。</target>
        </trans-unit>
        <trans-unit id="9f137471b3af83b0904165650ea8eae44914baa2" translate="yes" xml:space="preserve">
          <source>which outputs to (using &lt;code&gt;runtime&lt;/code&gt;):</source>
          <target state="translated">（ &lt;code&gt;runtime&lt;/code&gt; を使用して）に出力します：</target>
        </trans-unit>
        <trans-unit id="41ddfe36f242650dab2b177ddc26d0f4077b9822" translate="yes" xml:space="preserve">
          <source>which will yield the following:</source>
          <target state="translated">となります。</target>
        </trans-unit>
        <trans-unit id="b40a9ccd85a87565ca307acb7b15ce8d2f37a3b2" translate="yes" xml:space="preserve">
          <source>which would yield these results:</source>
          <target state="translated">このような結果が得られます。</target>
        </trans-unit>
        <trans-unit id="91006381d04053b334c2c20bd963267b891aa7c7" translate="yes" xml:space="preserve">
          <source>will compile to something like:</source>
          <target state="translated">のようにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="9ba0290c9ded4cf3504eb23ea1c9bfe9070b72c7" translate="yes" xml:space="preserve">
          <source>will name the AMD module of the UMD build. Otherwise an anonymous &lt;code&gt;define&lt;/code&gt; is used.</source>
          <target state="translated">UMDビルドのAMDモジュールを指定します。それ以外の場合は、匿名の &lt;code&gt;define&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="02bd21027fd8a6826a0d76fa49234597491d55e0" translate="yes" xml:space="preserve">
          <source>with &lt;code&gt;Babel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Babel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d290765f463029ce5c549f3a1597c93478a6fbde" translate="yes" xml:space="preserve">
          <source>without source content</source>
          <target state="translated">ソースコンテンツなし</target>
        </trans-unit>
        <trans-unit id="c842ed03bb2785d56e4c7409243dc72f2fef0ef6" translate="yes" xml:space="preserve">
          <source>worker loader module for webpack</source>
          <target state="translated">webpack 用ワーカーローダーモジュール</target>
        </trans-unit>
        <trans-unit id="3a72e3996d46b902c9bfb4d02ff6faeb6f538ad8" translate="yes" xml:space="preserve">
          <source>worker-loader</source>
          <target state="translated">worker-loader</target>
        </trans-unit>
        <trans-unit id="b26bcab8d0a5eb53efdc30ecd21cc5d5f6a33082" translate="yes" xml:space="preserve">
          <source>workerize-loader</source>
          <target state="translated">workerize-loader</target>
        </trans-unit>
        <trans-unit id="52efc6bd214371e5c18cb68864b0ab358c6058d1" translate="yes" xml:space="preserve">
          <source>write and execute functions to generate a part of the configuration</source>
          <target state="translated">設定の一部を生成するための関数の書き込みと実行</target>
        </trans-unit>
        <trans-unit id="fdd854d14a64121d0be5479bb21096a6046bb48c" translate="yes" xml:space="preserve">
          <source>yaml-frontmatter-loader</source>
          <target state="translated">yaml-frontmatter-loader</target>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
        <trans-unit id="2401fbae00f49856a5925f74bada56ee52a80a8c" translate="yes" xml:space="preserve">
          <source>you can use the alias:</source>
          <target state="translated">というエイリアスを使うことができます。</target>
        </trans-unit>
        <trans-unit id="7e6f27f268defe26ccc9bb91ca751036108bb4bc" translate="yes" xml:space="preserve">
          <source>your build script &amp;amp; server just to install a dependency you didn't know you needed until now.</source>
          <target state="translated">ビルドスクリプトとサーバーは、今まで必要であると知らなかった依存関係をインストールするだけです。</target>
        </trans-unit>
        <trans-unit id="a0f301b928b47363544e1308c4ba1240b9d3cf77" translate="yes" xml:space="preserve">
          <source>Сan have the following values:</source>
          <target state="translated">Сanの値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e7551e6825c38a0b74cbd864e63e6922bc5a1767" translate="yes" xml:space="preserve">
          <source>ℹ If a &lt;code&gt;true&lt;/code&gt; the &lt;code&gt;sourceMap&lt;/code&gt;, &lt;code&gt;sourceMapRoot&lt;/code&gt;, &lt;code&gt;sourceMapEmbed&lt;/code&gt;, &lt;code&gt;sourceMapContents&lt;/code&gt; and &lt;code&gt;omitSourceMapUrl&lt;/code&gt; from &lt;code&gt;sassOptions&lt;/code&gt; will be ignored.</source>
          <target state="translated">ℹ場合は &lt;code&gt;true&lt;/code&gt; &lt;code&gt;sourceMap&lt;/code&gt; 、 &lt;code&gt;sourceMapRoot&lt;/code&gt; 、 &lt;code&gt;sourceMapEmbed&lt;/code&gt; 、 &lt;code&gt;sourceMapContents&lt;/code&gt; と &lt;code&gt;omitSourceMapUrl&lt;/code&gt; から &lt;code&gt;sassOptions&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="b27eb9d7790a86b32c996a8f702220edbc149918" translate="yes" xml:space="preserve">
          <source>ℹ In some rare cases &lt;code&gt;node-sass&lt;/code&gt; can output invalid source maps (it is a &lt;code&gt;node-sass&lt;/code&gt; bug).</source>
          <target state="translated">ℹまれに、 &lt;code&gt;node-sass&lt;/code&gt; が無効なソースマップを出力することがあり &lt;code&gt;node-sass&lt;/code&gt; （これはnode-sassのバグです）。</target>
        </trans-unit>
        <trans-unit id="294e5c09fdd84d662fbe37a30d628311fcc2a87f" translate="yes" xml:space="preserve">
          <source>ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Less entry files.</source>
          <target state="translated">ℹコードを挿入しているため、エントリファイルのソースマッピングが壊れます。多くの場合、複数のLessエントリファイルのように、これよりも簡単な解決策があります。</target>
        </trans-unit>
        <trans-unit id="7153454d85c63b7600132fd93a67bd4b879dd9ec" translate="yes" xml:space="preserve">
          <source>ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Stylus entry files.</source>
          <target state="translated">ℹコードを挿入しているため、エントリファイルのソースマッピングが壊れます。多くの場合、複数のスタイラスエントリファイルのように、これよりも簡単な解決策があります。</target>
        </trans-unit>
        <trans-unit id="f8c2ebbfa6907dd19ef9dbaea8c8fa30c742e43b" translate="yes" xml:space="preserve">
          <source>ℹ We recommend not to set the &lt;code&gt;outFile&lt;/code&gt;, &lt;code&gt;sourceMapContents&lt;/code&gt;, &lt;code&gt;sourceMapEmbed&lt;/code&gt;, &lt;code&gt;sourceMapRoot&lt;/code&gt; options because &lt;code&gt;sass-loader&lt;/code&gt; automatically sets these options when the &lt;code&gt;sourceMap&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ℹ我々は設定しないことをお勧めし &lt;code&gt;outFile&lt;/code&gt; 、 &lt;code&gt;sourceMapContents&lt;/code&gt; 、 &lt;code&gt;sourceMapEmbed&lt;/code&gt; 、 &lt;code&gt;sourceMapRoot&lt;/code&gt; のためのオプションを &lt;code&gt;sass-loader&lt;/code&gt; ときに、自動的にこれらのオプションを設定します &lt;code&gt;sourceMap&lt;/code&gt; のオプションがある &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95b3c9c104d18bd66baf435733c0529c2aa16c45" translate="yes" xml:space="preserve">
          <source>ℹ️ &lt;code&gt;@gfx/zopfli&lt;/code&gt; require minimum &lt;code&gt;8&lt;/code&gt; version of &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">ℹ️ &lt;code&gt;@gfx/zopfli&lt;/code&gt; は最低 &lt;code&gt;8&lt;/code&gt; バージョンの &lt;code&gt;node&lt;/code&gt; 必要です。</target>
        </trans-unit>
        <trans-unit id="161451c475e3de10ae6192b405033ec381cd0373" translate="yes" xml:space="preserve">
          <source>ℹ️ &lt;code&gt;webpack &amp;lt; v4.0.0&lt;/code&gt; currently contains &lt;a href=&quot;https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/version-0.4&quot;&gt;&lt;code&gt;v0.4.6&lt;/code&gt;&lt;/a&gt; of this plugin under &lt;code&gt;webpack.optimize.UglifyJsPlugin&lt;/code&gt; as an alias. For usage of the latest version (&lt;code&gt;v1.0.0&lt;/code&gt;), please follow the instructions below. Aliasing &lt;code&gt;v1.0.0&lt;/code&gt; as &lt;code&gt;webpack.optimize.UglifyJsPlugin&lt;/code&gt; is scheduled for &lt;code&gt;webpack v4.0.0&lt;/code&gt;</source>
          <target state="translated">ℹ️webpack &lt;code&gt;webpack &amp;lt; v4.0.0&lt;/code&gt; 現在、エイリアスとして &lt;code&gt;webpack.optimize.UglifyJsPlugin&lt;/code&gt; の下にこのプラグインの&lt;a href=&quot;https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/version-0.4&quot;&gt; &lt;code&gt;v0.4.6&lt;/code&gt; &lt;/a&gt;が含まれています。最新バージョン（ &lt;code&gt;v1.0.0&lt;/code&gt; ）の使用方法については、以下の手順に従ってください。 &lt;code&gt;v1.0.0&lt;/code&gt; としてのエイリアスv1.0.0が &lt;code&gt;webpack.optimize.UglifyJsPlugin&lt;/code&gt; でスケジュールされて &lt;code&gt;webpack v4.0.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d47ff690174b5c572b6e56b015fdf3be4dd6cd1" translate="yes" xml:space="preserve">
          <source>ℹ️ &lt;code&gt;webpack-copy-plugin&lt;/code&gt; is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.</source>
          <target state="translated">ℹ️webpack &lt;code&gt;webpack-copy-plugin&lt;/code&gt; は、ビルドプロセスから生成されたファイルをコピーするようには設計されていません。むしろ、ビルドプロセスの一部として、ソースツリーにすでに存在するファイルをコピーすることです。</target>
        </trans-unit>
        <trans-unit id="1115fe151bdab4e320b868d29ee125ce015c2c54" translate="yes" xml:space="preserve">
          <source>ℹ️ Access to the &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;loader context&lt;/a&gt; inside the custom importer can be done using the &lt;code&gt;this.webpackLoaderContext&lt;/code&gt; property.</source>
          <target state="translated">ℹ️カスタムインポーター内の&lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;ローダーコンテキスト&lt;/a&gt;へのアクセスは、 &lt;code&gt;this.webpackLoaderContext&lt;/code&gt; プロパティを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="18eab356180096cd6db22b48418370226ad8592e" translate="yes" xml:space="preserve">
          <source>ℹ️ Access to the &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;loader context&lt;/a&gt; inside the custom plugin can be done using the &lt;code&gt;less.webpackLoaderContext&lt;/code&gt; property.</source>
          <target state="translated">ℹ️カスタムプラグイン内の&lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;ローダーコンテキスト&lt;/a&gt;へのアクセスは、 &lt;code&gt;less.webpackLoaderContext&lt;/code&gt; プロパティを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="781310f84902630a91ea1105a0ab507620fd90d8" translate="yes" xml:space="preserve">
          <source>ℹ️ By default the filename of the resulting file is the hash of the file's contents with the original extension of the required resource.</source>
          <target state="translated">ℹ️デフォルトでは、結果のファイルのファイル名は、必要なリソースの元の拡張子を持つファイルの内容のハッシュです。</target>
        </trans-unit>
        <trans-unit id="b03adf97ee3a06c71606d7daaaac62e2252674a8" translate="yes" xml:space="preserve">
          <source>ℹ️ By default the path and name you specify will output the file in that same directory, and will also use the same URI path to access the file.</source>
          <target state="translated">ℹ️デフォルトでは、指定したパスと名前は同じディレクトリにファイルを出力し、同じURIパスを使用してファイルにアクセスします。</target>
        </trans-unit>
        <trans-unit id="9543013a146df781368a2ccbfc0c49df9c5afffb" translate="yes" xml:space="preserve">
          <source>ℹ️ By default, we only copy &lt;strong&gt;modified&lt;/strong&gt; files during a &lt;code&gt;webpack --watch&lt;/code&gt; or &lt;code&gt;webpack-dev-server&lt;/code&gt; build. Setting this option to &lt;code&gt;true&lt;/code&gt; will copy all files.</source>
          <target state="translated">ℹ️デフォルトでは、 &lt;code&gt;webpack --watch&lt;/code&gt; または &lt;code&gt;webpack-dev-server&lt;/code&gt; ビルド中にのみ&lt;strong&gt;変更された&lt;/strong&gt;ファイルをコピーします。このオプションを &lt;code&gt;true&lt;/code&gt; に設定すると、すべてのファイルがコピーされます。</target>
        </trans-unit>
        <trans-unit id="df00fdbc0008abbf6e3baf3237fb13e8d8e5e269" translate="yes" xml:space="preserve">
          <source>ℹ️ For prerendering with extract-text-webpack-plugin you should use &lt;code&gt;css-loader/locals&lt;/code&gt; instead of &lt;code&gt;style-loader!css-loader&lt;/code&gt;&lt;strong&gt;in the prerendering bundle&lt;/strong&gt;. It doesn't embed CSS but only exports the identifier mappings.</source>
          <target state="translated">extract️extract-text-webpack-pluginを使用&lt;strong&gt;した事前レンダリングでは、事前レンダリングバンドル&lt;/strong&gt;の &lt;code&gt;style-loader!css-loader&lt;/code&gt; の代わりに &lt;code&gt;css-loader/locals&lt;/code&gt; を使用する必要があります。CSSは埋め込まれませんが、識別子のマッピングのみがエクスポートされます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bb5f3afba3d9b5c0e9f9449a75ead28e9c70947" translate="yes" xml:space="preserve">
          <source>ℹ️ Identifiers are exported</source>
          <target state="translated">ℹ️識別子がエクスポートされます</target>
        </trans-unit>
        <trans-unit id="315881af459ec5a043a3085c980a536e107f4a0d" translate="yes" xml:space="preserve">
          <source>ℹ️ If &lt;code&gt;[0]&lt;/code&gt; is used, it will be replaced by the entire tested string, whereas &lt;code&gt;[1]&lt;/code&gt; will contain the first capturing parenthesis of your regex and so on...</source>
          <target state="translated">ℹ️ &lt;code&gt;[0]&lt;/code&gt; を使用すると、テストされた文字列全体に置き換えられますが、 &lt;code&gt;[1]&lt;/code&gt; には、正規表現の最初のキャプチャ括弧などが含まれます。</target>
        </trans-unit>
        <trans-unit id="24bf9ab3d9c4cfdb59fb927d5b9903d6fca4f358" translate="yes" xml:space="preserve">
          <source>ℹ️ If you use custom function for the &lt;code&gt;algorithm&lt;/code&gt; option, the default value is &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">ℹ️ &lt;code&gt;algorithm&lt;/code&gt; オプションにカスタム関数を使用する場合、デフォルト値は &lt;code&gt;{}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="507796fde374c728a384ccc42920d1997f1247d2" translate="yes" xml:space="preserve">
          <source>ℹ️ If you use custom function for the &lt;code&gt;algorithm&lt;/code&gt; option, the default value of the &lt;code&gt;compressionOptions&lt;/code&gt; option is &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">ℹ️ &lt;code&gt;algorithm&lt;/code&gt; オプションにカスタム関数を使用する場合、 &lt;code&gt;compressionOptions&lt;/code&gt; オプションのデフォルト値は &lt;code&gt;{}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db1d8098be46859a7a3ebfb571e63ee1850ef875" translate="yes" xml:space="preserve">
          <source>ℹ️ If you use your own &lt;code&gt;minify&lt;/code&gt; function please read the &lt;code&gt;minify&lt;/code&gt; section for cache invalidation correctly.</source>
          <target state="translated">ℹ️独自の &lt;code&gt;minify&lt;/code&gt; 関数を使用する場合は、キャッシュ無効化の &lt;code&gt;minify&lt;/code&gt; セクションを正しくお読みください。</target>
        </trans-unit>
        <trans-unit id="2f514668e10999d97dad6985487c956e7e36c855" translate="yes" xml:space="preserve">
          <source>ℹ️ If you want &lt;code&gt;webpack-dev-server&lt;/code&gt; to write files to the output directory during development, you can force it with the &lt;a href=&quot;https://github.com/gajus/write-file-webpack-plugin&quot;&gt;&lt;code&gt;write-file-webpack-plugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ℹ️ 開発中に &lt;code&gt;webpack-dev-server&lt;/code&gt; が出力ディレクトリにファイルを書き込むようにしたい場合は、&lt;a href=&quot;https://github.com/gajus/write-file-webpack-plugin&quot;&gt; &lt;code&gt;write-file-webpack-plugin&lt;/code&gt; を使用してファイルを強制できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4d44bcf618c730fa3203026c099c55852df4e80" translate="yes" xml:space="preserve">
          <source>ℹ️ If you want &lt;code&gt;webpack-dev-server&lt;/code&gt; to write files to the output directory during development, you can force it with the &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware#writetodisk&quot;&gt;&lt;code&gt;writeToDisk&lt;/code&gt;&lt;/a&gt; option or the &lt;a href=&quot;https://github.com/gajus/write-file-webpack-plugin&quot;&gt;&lt;code&gt;write-file-webpack-plugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ℹ️開発中に &lt;code&gt;webpack-dev-server&lt;/code&gt; が出力ディレクトリにファイルを書き込むようにする場合は、&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware#writetodisk&quot;&gt; &lt;code&gt;writeToDisk&lt;/code&gt; &lt;/a&gt;オプションまたは&lt;a href=&quot;https://github.com/gajus/write-file-webpack-plugin&quot;&gt; &lt;code&gt;write-file-webpack-plugin&lt;/code&gt; を使用して強制的に出力できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e1a4cef1a5a5fe692fc9da364aaf99940fe73d84" translate="yes" xml:space="preserve">
          <source>ℹ️ If you want to use &lt;code&gt;loader&lt;/code&gt; or &lt;code&gt;plugin&lt;/code&gt; standalone see sections below, but this is not recommended.</source>
          <target state="translated">ℹ️ &lt;code&gt;loader&lt;/code&gt; または &lt;code&gt;plugin&lt;/code&gt; スタンドアロンで使用する場合は、以下のセクションを参照してください。ただし、これはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="7872510c17f9a2b69a94151f79d1d101462e0422" translate="yes" xml:space="preserve">
          <source>ℹ️ Only for &lt;code&gt;4&lt;/code&gt; version of &lt;code&gt;webpack&lt;/code&gt;: Make sure that plugin place after any plugins that add images or other assets which you want to optimized.**</source>
          <target state="translated">ℹ️だけのために &lt;code&gt;4&lt;/code&gt; のバージョン &lt;code&gt;webpack&lt;/code&gt; ：ていることを確認してくださいあなたは、最適化したい画像やその他の資産を追加したプラグインの後にプラグイン**。</target>
        </trans-unit>
        <trans-unit id="5e0de55251c2c041334a1ff03fdba3ef98bd0559" translate="yes" xml:space="preserve">
          <source>ℹ️ Options such as &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;file&lt;/code&gt; are unavailable and will be ignored.</source>
          <target state="translated">ℹ️ &lt;code&gt;data&lt;/code&gt; や &lt;code&gt;file&lt;/code&gt; などのオプションは使用できず、無視されます。</target>
        </trans-unit>
        <trans-unit id="4290ecf944839ec240e045287b81e61b7935739b" translate="yes" xml:space="preserve">
          <source>ℹ️ Parallelization can speedup your build significantly and is therefore &lt;strong&gt;highly recommended&lt;/strong&gt;</source>
          <target state="translated">ℹ️並列化はビルドを大幅にスピードアップできるため、&lt;strong&gt;強くお勧めします&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e28274449e1efb05334aca3ef90093730010851" translate="yes" xml:space="preserve">
          <source>ℹ️ Parallelization can speedup your build significantly and is therefore &lt;strong&gt;highly recommended&lt;/strong&gt;.</source>
          <target state="translated">ℹ️並列化はビルドを大幅にスピードアップできるため、&lt;strong&gt;強くお勧めし&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="29f308385ff12bdf13f90113ea696f3535f0f7b2" translate="yes" xml:space="preserve">
          <source>ℹ️ The &lt;code&gt;filename&lt;/code&gt; option takes a value from webpack loader API. The option value will be ignored.</source>
          <target state="translated">ℹ️ &lt;code&gt;filename&lt;/code&gt; オプションは、WebPACKのローダーAPIからの値をとります。オプション値は無視されます。</target>
        </trans-unit>
        <trans-unit id="48492bbcf902b1c63e1d5cf71e67c5edb7015185" translate="yes" xml:space="preserve">
          <source>ℹ️ The &lt;code&gt;indentedSyntax&lt;/code&gt; option has &lt;code&gt;true&lt;/code&gt; value for the &lt;code&gt;sass&lt;/code&gt; extension.</source>
          <target state="translated">ℹ️ &lt;code&gt;indentedSyntax&lt;/code&gt; のオプションがあり &lt;code&gt;true&lt;/code&gt; の値 &lt;code&gt;sass&lt;/code&gt; 拡張子を。</target>
        </trans-unit>
        <trans-unit id="b5450e643c25a3df7837aa9b7623c8f64df968ad" translate="yes" xml:space="preserve">
          <source>ℹ️ The &lt;code&gt;sourceMap&lt;/code&gt; option takes a value from the &lt;code&gt;compiler.devtool&lt;/code&gt; value by default.</source>
          <target state="translated">ℹ️ &lt;code&gt;sourceMap&lt;/code&gt; のオプションは、より価値とる &lt;code&gt;compiler.devtool&lt;/code&gt; のデフォルト値を。</target>
        </trans-unit>
        <trans-unit id="8d000665e6af182769dd7ce13b886f78c5b0bd88" translate="yes" xml:space="preserve">
          <source>ℹ️ The chunk is not requested until you call the load function</source>
          <target state="translated">ℹ️ロード関数を呼び出すまでチャンクはリクエストされません</target>
        </trans-unit>
        <trans-unit id="35f41a15555c31f3b9b9d51b971c1dfd4e984d6d" translate="yes" xml:space="preserve">
          <source>ℹ️ The loader will dynamically insert the &lt;code&gt;&amp;lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt; tag at runtime via JavaScript. You should use &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt; if you want to include a static &lt;code&gt;&amp;lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ℹ️ローダーは、JavaScriptを介して実行時に &lt;code&gt;&amp;lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt; タグを動的に挿入します。静的な &lt;code&gt;&amp;lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt; を含める場合は、&lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d588f852acec20b580738d514096beff6d64a45" translate="yes" xml:space="preserve">
          <source>ℹ️ This file will be the only &lt;code&gt;entry&lt;/code&gt; point for &lt;code&gt;karma&lt;/code&gt;</source>
          <target state="translated">ℹ️このファイルは &lt;code&gt;karma&lt;/code&gt; 唯一の &lt;code&gt;entry&lt;/code&gt; ポイントになります</target>
        </trans-unit>
        <trans-unit id="4a5a97c88d0be0f82afebed2149c660405b70fa6" translate="yes" xml:space="preserve">
          <source>ℹ️ This option is on by default in IE9, which has strict limitations on the number of style tags allowed on a page. You can enable or disable it with the singleton option.</source>
          <target state="translated">ℹ️このオプションはIE9ではデフォルトでオンになっており、ページで許可されるスタイルタグの数に厳しい制限があります。シングルトンオプションで有効または無効にできます。</target>
        </trans-unit>
        <trans-unit id="17e05ee4e7337fb9699563f9a1fe852db06a0474" translate="yes" xml:space="preserve">
          <source>ℹ️ To ignore files by path please use the [&lt;code&gt;globOptions.ignore&lt;/code&gt;](&lt;a href=&quot;https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/(#globoptions)&quot;&gt;https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/(#globoptions)&lt;/a&gt; option.</source>
          <target state="translated">ℹ️パスでファイルを無視するには、[ &lt;code&gt;globOptions.ignore&lt;/code&gt; ]（&lt;a href=&quot;https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/(#globoptions)&quot;&gt;https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/&lt;/a&gt;（#globoptions ）オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="019855769d13ca08af1f671d00b4d6417bd1cb36" translate="yes" xml:space="preserve">
          <source>ℹ️ We recommend using &lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt;.</source>
          <target state="translated">ℹ️我々は使用をお勧め&lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;ダートサスを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79d47aa6be09af6b7efe65a4e2e224651d80e6c4" translate="yes" xml:space="preserve">
          <source>ℹ️ You can get the original source filename from &lt;a href=&quot;../api/stats#asset-objects&quot;&gt;Asset Objects&lt;/a&gt;.</source>
          <target state="translated">ℹ️&lt;a href=&quot;../api/stats#asset-objects&quot;&gt;アセットオブジェクト&lt;/a&gt;から元のソースファイル名を取得できます。</target>
        </trans-unit>
        <trans-unit id="00d0b3e3a21eb085c16a7bde0aee9389d5ef03d7" translate="yes" xml:space="preserve">
          <source>⚠ &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt; does not work with &lt;a href=&quot;https://classic.yarnpkg.com/en/docs/pnp/&quot;&gt;Yarn PnP&lt;/a&gt; feature.</source>
          <target state="translated">⚠&lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;ノードサスは&lt;/a&gt;動作しません&lt;a href=&quot;https://classic.yarnpkg.com/en/docs/pnp/&quot;&gt;糸のPnP&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="69d3cd659b80db82bd7b2617254fec37d5a80046" translate="yes" xml:space="preserve">
          <source>⚠ &lt;code&gt;%20&lt;/code&gt; is space in a query string, because you can't use spaces in URLs</source>
          <target state="translated">⚠ &lt;code&gt;%20&lt;/code&gt; は、URLでスペースを使用できないため、クエリ文字列のスペースです。</target>
        </trans-unit>
        <trans-unit id="ec5b6e2fea5086278d1149bfa44e10d9edf1af8e" translate="yes" xml:space="preserve">
          <source>⚠ &lt;code&gt;node-loader&lt;/code&gt; only works on the &lt;code&gt;node&lt;/code&gt;/&lt;code&gt;electron-main&lt;/code&gt;/&lt;code&gt;electron-main&lt;/code&gt; targets.</source>
          <target state="translated">⚠node &lt;code&gt;node-loader&lt;/code&gt; は、 &lt;code&gt;node&lt;/code&gt; / &lt;code&gt;electron-main&lt;/code&gt; / &lt;code&gt;electron-main&lt;/code&gt; ターゲットでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="9a47ab3bebcf96c07ed5606d8f95067e3ad10884" translate="yes" xml:space="preserve">
          <source>⚠ Alias can't be used together with &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;namespace&lt;/code&gt;, &lt;code&gt;side-effects&lt;/code&gt;, &lt;code&gt;single&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; syntaxes.</source>
          <target state="translated">⚠エイリアスは、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;namespace&lt;/code&gt; 、 &lt;code&gt;side-effects&lt;/code&gt; 、 &lt;code&gt;single&lt;/code&gt; &lt;code&gt;pure&lt;/code&gt; 構文と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="50adf759798e8a26b039cb105dc0b0f29b1e2f07" translate="yes" xml:space="preserve">
          <source>⚠ Aliases can't be used together with &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;single&lt;/code&gt; syntaxes.</source>
          <target state="translated">⚠エイリアスは、 &lt;code&gt;default&lt;/code&gt; または &lt;code&gt;single&lt;/code&gt; 構文と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="0171e734320fbb9b1489c95913b802571fea825b" translate="yes" xml:space="preserve">
          <source>⚠ Aliases can't be used together with &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;namespace&lt;/code&gt;, &lt;code&gt;side-effects&lt;/code&gt;, &lt;code&gt;single&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; syntaxes.</source>
          <target state="translated">⚠エイリアスは、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;namespace&lt;/code&gt; 、 &lt;code&gt;side-effects&lt;/code&gt; 、 &lt;code&gt;single&lt;/code&gt; &lt;code&gt;pure&lt;/code&gt; 構文と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="b24f7fa52473ff800d4244e6415826bfc8798d90" translate="yes" xml:space="preserve">
          <source>⚠ Be careful, existing exports (&lt;code&gt;export&lt;/code&gt;/&lt;code&gt;module.exports&lt;/code&gt;/&lt;code&gt;exports&lt;/code&gt;) in the original code and exporting new values can cause a failure.</source>
          <target state="translated">⚠元のコードの既存のエクスポート（ &lt;code&gt;export&lt;/code&gt; / &lt;code&gt;module.exports&lt;/code&gt; / &lt;code&gt;exports&lt;/code&gt; ）および新しい値のエクスポートは失敗の原因となる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="79725b4a10caca98c1196b7f7e8f5221ed0c0eb3" translate="yes" xml:space="preserve">
          <source>⚠ Be careful, existing imports (&lt;code&gt;import&lt;/code&gt;/&lt;code&gt;require&lt;/code&gt;) in the original code and importing new values can cause failure.</source>
          <target state="translated">⚠元のコードに既存のインポート（ &lt;code&gt;import&lt;/code&gt; / &lt;code&gt;require&lt;/code&gt; ）があり、新しい値をインポートすると失敗する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ab26959361d26dfafbaf237de27eafd9fa6652ab" translate="yes" xml:space="preserve">
          <source>⚠ By default loader generate ES module named syntax.</source>
          <target state="translated">⚠デフォルトでは、ローダーは構文という名前のESモジュールを生成します。</target>
        </trans-unit>
        <trans-unit id="c786e240900996fe64726dedaebda30e7abb36b4" translate="yes" xml:space="preserve">
          <source>⚠ Do not forget that this code will be used in the browser and not all browsers support latest ECMA features like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;arrow function expression&lt;/code&gt; and etc, we recommend use only ECMA 5 features, but it is depends what browsers you want to support ⚠ Do not forget that some DOM methods may not be available in older browsers, we recommended use only &lt;a href=&quot;https://caniuse.com/#search=dom%20core&quot;&gt;DOM core level 2 properties&lt;/a&gt;, but it is depends what browsers you want to support</source>
          <target state="translated">⚠このコードはブラウザで使用され、すべてのブラウザが &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;arrow function expression&lt;/code&gt; などの最新のECMA機能をサポートしているわけではないことを忘れないでください。ECMA5機能のみを使用することをお勧めしますが、サポートするブラウザによって異なります。 ⚠一部のDOMメソッドは古いブラウザでは使用できない場合があることを忘れないでください。DOM&lt;a href=&quot;https://caniuse.com/#search=dom%20core&quot;&gt;コアレベル2プロパティ&lt;/a&gt;のみを使用することをお勧めしますが、サポートするブラウザによって異なります。</target>
        </trans-unit>
        <trans-unit id="df2dc7bcb82f29679c6f57b79679585dc515d92e" translate="yes" xml:space="preserve">
          <source>⚠ Do not forget that this code will run in the browser alongside your application. Since not all browsers support latest ECMA features like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;arrow function expression&lt;/code&gt; and etc we recommend you to use only ECMA 5 features and syntax.</source>
          <target state="translated">⚠このコードはアプリケーションと一緒にブラウザで実行されることを忘れないでください。すべてのブラウザが &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;arrow function expression&lt;/code&gt; などの最新のECMA機能をサポートしているわけではないため、ECMA5の機能と構文のみを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7507ddd65d0973c0c1c5ae94dbc7dca63e52b8f8" translate="yes" xml:space="preserve">
          <source>⚠ Do not use this option if source code contains ES module import(s)</source>
          <target state="translated">⚠ソースコードにESモジュールのインポートが含まれている場合は、このオプションを使用しないでください</target>
        </trans-unit>
        <trans-unit id="ebf3f820c29ef30bcdb736c0eee602996f79603f" translate="yes" xml:space="preserve">
          <source>⚠ Ignored in webpack 5! Please use &lt;a href=&quot;../configuration/other-options#cache&quot;&gt;https://webpack.js.org/configuration/other-options/#cache&lt;/a&gt;.</source>
          <target state="translated">⚠webpack5では無視されます！&lt;a href=&quot;../configuration/other-options#cache&quot;&gt;https://webpack.js.org/configuration/other-options/#cacheを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="31ab51c54b510c7389ddb0547544ed9bb7d86b22" translate="yes" xml:space="preserve">
          <source>⚠ It is not allowed to use JavaScript reserved words in css class names.</source>
          <target state="translated">⚠cssクラス名でJavaScriptの予約語を使用することは許可されていません。</target>
        </trans-unit>
        <trans-unit id="79a8aa66c412a019eeec8cec850441c5ffa3ce61" translate="yes" xml:space="preserve">
          <source>⚠ Names of locals are converted to &lt;code&gt;camelCase&lt;/code&gt;.</source>
          <target state="translated">⚠地元の人の名前は &lt;code&gt;camelCase&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="1d8805cd2a86180ad56ff32b1d2314bb434305b0" translate="yes" xml:space="preserve">
          <source>⚠ Names of locals are converted to camelcase, i.e. the &lt;code&gt;exportLocalsConvention&lt;/code&gt; option has &lt;code&gt;camelCaseOnly&lt;/code&gt; value by default.</source>
          <target state="translated">⚠ローカルの名前は &lt;code&gt;camelCaseOnly&lt;/code&gt; 変換されます。つまり、 &lt;code&gt;exportLocalsConvention&lt;/code&gt; オプションにはデフォルトでcamelCaseOnly値があります。</target>
        </trans-unit>
        <trans-unit id="2e7f5e281f7253d941c428b0c2fb1ae7446e7c3c" translate="yes" xml:space="preserve">
          <source>⚠ Not possible to use &lt;code&gt;single&lt;/code&gt; and &lt;code&gt;multiple&lt;/code&gt; syntaxes together due to CommonJS format limitations.</source>
          <target state="translated">⚠使用することはできません &lt;code&gt;single&lt;/code&gt; および &lt;code&gt;multiple&lt;/code&gt; 原因CommonJS形式の制限のために一緒に構文を。</target>
        </trans-unit>
        <trans-unit id="dc53f4ee52adc78a21eeec70e5de7cdc83b324bd" translate="yes" xml:space="preserve">
          <source>⚠ Not possible to use multiple &lt;code&gt;default&lt;/code&gt; values due to ES module format limitations.</source>
          <target state="translated">⚠ESモジュールのフォーマット制限により、複数の &lt;code&gt;default&lt;/code&gt; 値を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="943813df736480b1d178761b184eba37d122e86f" translate="yes" xml:space="preserve">
          <source>⚠ Not possible to use multiple &lt;code&gt;single&lt;/code&gt; values due to CommonJS format limitations.</source>
          <target state="translated">⚠CommonJS形式の制限により、複数の &lt;code&gt;single&lt;/code&gt; 値を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="fe65d0cefde8779546f5e7599e809db7ddf48a1f" translate="yes" xml:space="preserve">
          <source>⚠ Only &lt;code&gt;camelCaseOnly&lt;/code&gt; value allowed if you set the &lt;code&gt;namedExport&lt;/code&gt; value to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">⚠のみ &lt;code&gt;camelCaseOnly&lt;/code&gt; 設定した場合、値は許可され &lt;code&gt;namedExport&lt;/code&gt; のに値を &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="971d8189c96dbbb6f0dfff58bd0b3bf087f932e0" translate="yes" xml:space="preserve">
          <source>⚠ Options &lt;code&gt;esModule&lt;/code&gt; and &lt;code&gt;modules.namedExport&lt;/code&gt; in &lt;code&gt;css-loader&lt;/code&gt; and &lt;code&gt;MiniCssExtractPlugin.loader&lt;/code&gt; should be enabled.</source>
          <target state="translated">⚠オプション &lt;code&gt;esModule&lt;/code&gt; と &lt;code&gt;modules.namedExport&lt;/code&gt; で &lt;code&gt;css-loader&lt;/code&gt; と &lt;code&gt;MiniCssExtractPlugin.loader&lt;/code&gt; を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="727746799934344d0b13db7185a5f10275791b84" translate="yes" xml:space="preserve">
          <source>⚠ Options &lt;code&gt;esModule&lt;/code&gt; and &lt;code&gt;modules.namedExport&lt;/code&gt; in &lt;code&gt;css-loader&lt;/code&gt; and &lt;code&gt;style-loader&lt;/code&gt; should be enabled.</source>
          <target state="translated">⚠css &lt;code&gt;css-loader&lt;/code&gt; および &lt;code&gt;style-loader&lt;/code&gt; のオプション &lt;code&gt;esModule&lt;/code&gt; および &lt;code&gt;modules.namedExport&lt;/code&gt; を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="15f604ff900b11e8554a0d7bb98db51d1325c3cf" translate="yes" xml:space="preserve">
          <source>⚠ Source maps do not work.</source>
          <target state="translated">⚠ソースマップが機能しません。</target>
        </trans-unit>
        <trans-unit id="3c7e8120bc8aa3acf36e221825f4b8c073cb25cd" translate="yes" xml:space="preserve">
          <source>⚠ The &lt;code&gt;insert&lt;/code&gt; function is serialized to string and passed to the plugin. This means that it won't have access to the scope of the webpack configuration module.</source>
          <target state="translated">⚠ &lt;code&gt;insert&lt;/code&gt; 関数は文字列にシリアル化され、プラグインに渡されます。これは、webpack構成モジュールのスコープにアクセスできないことを意味します。</target>
        </trans-unit>
        <trans-unit id="66266ac2dd755a3f6a34d5632d799322c1a6a305" translate="yes" xml:space="preserve">
          <source>⚠ You need to set &lt;code&gt;type: &quot;commonjs&quot;&lt;/code&gt; to use &lt;code&gt;single&lt;/code&gt; or &lt;code&gt;multiple&lt;/code&gt; syntaxes.</source>
          <target state="translated">⚠ &lt;code&gt;single&lt;/code&gt; または &lt;code&gt;multiple&lt;/code&gt; 構文を使用するには、 &lt;code&gt;type: &quot;commonjs&quot;&lt;/code&gt; を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="72cb5c824e3f85aa7506d304c1c6997537ead5f4" translate="yes" xml:space="preserve">
          <source>⚠ You need to set &lt;code&gt;type: &quot;commonjs&quot;&lt;/code&gt; to use &lt;code&gt;single&lt;/code&gt;, &lt;code&gt;multiple&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; syntaxes.</source>
          <target state="translated">⚠ &lt;code&gt;single&lt;/code&gt; 、 &lt;code&gt;multiple&lt;/code&gt; 、および &lt;code&gt;pure&lt;/code&gt; 構文を使用するには、 &lt;code&gt;type: &quot;commonjs&quot;&lt;/code&gt; を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c7e0cf5d19febc9f50a9a7df5a2a07bfa62623a" translate="yes" xml:space="preserve">
          <source>⚠ You should always return valid HTML</source>
          <target state="translated">⚠常に有効なHTMLを返す必要があります</target>
        </trans-unit>
        <trans-unit id="ff2ea940a30d526a181a2f738bd574bc43e43518" translate="yes" xml:space="preserve">
          <source>⚠ the &lt;code&gt;attributes&lt;/code&gt; option takes precedence over the &lt;code&gt;__webpack_nonce__&lt;/code&gt; variable</source>
          <target state="translated">⚠ &lt;code&gt;attributes&lt;/code&gt; オプションは &lt;code&gt;__webpack_nonce__&lt;/code&gt; 変数よりも優先されます</target>
        </trans-unit>
        <trans-unit id="74cc9c32541c2ccb2e972a373e16acb3947bf392" translate="yes" xml:space="preserve">
          <source>⚠️ &lt;strong&gt;&lt;code&gt;cheap-source-map&lt;/code&gt; options don't work with this plugin&lt;/strong&gt;</source>
          <target state="translated">⚠️cheap &lt;strong&gt; &lt;code&gt;cheap-source-map&lt;/code&gt; オプションはこのプラグインでは機能しません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2164cd24a92664145d9b165d3cdbb15ec747c8b" translate="yes" xml:space="preserve">
          <source>⚠️ &lt;strong&gt;&lt;code&gt;cheap-source-map&lt;/code&gt; options don't work with this plugin&lt;/strong&gt;.</source>
          <target state="translated">⚠️cheap &lt;strong&gt; &lt;code&gt;cheap-source-map&lt;/code&gt; オプションは、このプラグインでは機能しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f8d509e7547a2b00ae5a275682272b806e892328" translate="yes" xml:space="preserve">
          <source>⚠️ &lt;strong&gt;Always use &lt;code&gt;require&lt;/code&gt; inside &lt;code&gt;minify&lt;/code&gt; function when &lt;code&gt;parallel&lt;/code&gt; option enabled&lt;/strong&gt;</source>
          <target state="translated">parallel️ &lt;strong&gt; &lt;code&gt;parallel&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;オプションが有効&lt;/strong&gt;&lt;strong&gt;な場合は、&lt;/strong&gt;&lt;strong&gt;常に &lt;code&gt;require&lt;/code&gt; の内部 &lt;code&gt;minify&lt;/code&gt; 機能を使用します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbd8aab406358c3a486bd8290d951b7341e34ab2" translate="yes" xml:space="preserve">
          <source>⚠️ &lt;strong&gt;Always use &lt;code&gt;require&lt;/code&gt; inside &lt;code&gt;minify&lt;/code&gt; function when &lt;code&gt;parallel&lt;/code&gt; option enabled&lt;/strong&gt;.</source>
          <target state="translated">parallel️ &lt;strong&gt; &lt;code&gt;parallel&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;オプションが有効になって&lt;/strong&gt;いる&lt;strong&gt;場合は、&lt;/strong&gt;&lt;strong&gt;常に &lt;code&gt;require&lt;/code&gt; inside &lt;code&gt;minify&lt;/code&gt; 関数を使用します&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="66b4d1612547660cf78db360d4eebaaca1248f3a" translate="yes" xml:space="preserve">
          <source>⚠️ &lt;strong&gt;Since &lt;code&gt;webpack &amp;gt;= v2.0.0&lt;/code&gt;, importing of JSON files will work by default. You might still want to use this if you use a custom file extension. See the &lt;a href=&quot;../guides/migrating#json-loader-is-not-required-anymore&quot;&gt;v1.0.0 -&amp;gt; v2.0.0 Migration Guide&lt;/a&gt; for more information&lt;/strong&gt;</source>
          <target state="translated">⚠️ &lt;strong&gt;以来 &lt;code&gt;webpack &amp;gt;= v2.0.0&lt;/code&gt; 、JSONファイルのインポートは、デフォルトで動作します。カスタムのファイル拡張子を使用する場合は、これを使用することもできます。詳細については、&lt;a href=&quot;../guides/migrating#json-loader-is-not-required-anymore&quot;&gt;v1.0.0-&amp;gt; v2.0.0移行ガイド&lt;/a&gt;を参照してください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9573356236574cd398d2421bb5aae0a6f3eac2bb" translate="yes" xml:space="preserve">
          <source>⚠️ Behavior is undefined when &lt;code&gt;unuse&lt;/code&gt; is called more often than &lt;code&gt;use&lt;/code&gt;. Don't do that.</source>
          <target state="translated">とき⚠️の振舞いは未定義である &lt;code&gt;unuse&lt;/code&gt; より頻繁に呼び出され &lt;code&gt;use&lt;/code&gt; 。そうしないでください。</target>
        </trans-unit>
        <trans-unit id="504549774b0b6a9159c95ec0345bddac8fafb042" translate="yes" xml:space="preserve">
          <source>⚠️ Don't return directly &lt;code&gt;\\&lt;/code&gt; in &lt;code&gt;transformPath&lt;/code&gt; (i.e &lt;code&gt;path\to\newFile&lt;/code&gt;) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator. On Windows, the forward slash and the backward slash are both separators. Instead please use &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">⚠️UNIXではバックスラッシュはパスコンポーネント内の有効な文字であるため、 &lt;code&gt;transformPath&lt;/code&gt; （つまり &lt;code&gt;path\to\newFile&lt;/code&gt; ）オプションで直接 &lt;code&gt;\\&lt;/code&gt; を返さないでください。つまり、区切り文字ではありません。Windowsでは、スラッシュと円記号はどちらも区切り文字です。代わりに、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;path&lt;/code&gt; メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="8ffc6f30e16e3689234c3d1e9050426ca60681ab" translate="yes" xml:space="preserve">
          <source>⚠️ Don't use directly &lt;code&gt;\\&lt;/code&gt; in &lt;code&gt;context&lt;/code&gt; (i.e &lt;code&gt;path\to\context&lt;/code&gt;) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator. On Windows, the forward slash and the backward slash are both separators. Instead please use &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">⚠️UNIXではバックスラッシュはパスコンポーネント内の有効な文字であるため、 &lt;code&gt;context&lt;/code&gt; （つまり &lt;code&gt;path\to\context&lt;/code&gt; ）オプションで直接 &lt;code&gt;\\&lt;/code&gt; を使用しないでください。つまり、区切り文字ではありません。Windowsでは、スラッシュと円記号はどちらも区切り文字です。代わりに、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;path&lt;/code&gt; メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="8964880a7c4ee1e434fe16052bc3f9bbd9bbc3eb" translate="yes" xml:space="preserve">
          <source>⚠️ Don't use directly &lt;code&gt;\\&lt;/code&gt; in &lt;code&gt;from&lt;/code&gt; option if it is a &lt;code&gt;glob&lt;/code&gt; (i.e &lt;code&gt;path\to\file.ext&lt;/code&gt;) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator. On Windows, the forward slash and the backward slash are both separators. Instead please use &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">⚠️Doが直接使用しないで &lt;code&gt;\\&lt;/code&gt; で &lt;code&gt;from&lt;/code&gt; 、それがある場合はオプション &lt;code&gt;glob&lt;/code&gt; （すなわち &lt;code&gt;path\to\file.ext&lt;/code&gt; UNIX上でバックスラッシュがパスコンポーネントの内側で有効な文字であるため、すなわち、それは、セパレータではありません）オプション。Windowsでは、スラッシュと円記号はどちらも区切り文字です。代わりに &lt;code&gt;/&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="ea45259fb42c6f8470e61732f149f3bc62407739" translate="yes" xml:space="preserve">
          <source>⚠️ Don't use directly &lt;code&gt;\\&lt;/code&gt; in &lt;code&gt;to&lt;/code&gt; (i.e &lt;code&gt;path\to\dest&lt;/code&gt;) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator. On Windows, the forward slash and the backward slash are both separators. Instead please use &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">⚠️UNIXではバックスラッシュはパスコンポーネント内の有効な文字であるため、直接 &lt;code&gt;\\&lt;/code&gt; in &lt;code&gt;to&lt;/code&gt; （つまり &lt;code&gt;path\to\dest&lt;/code&gt; ）オプションを使用しないでください。つまり、区切り文字ではありません。Windowsでは、スラッシュと円記号はどちらも区切り文字です。代わりに、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;path&lt;/code&gt; メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="c9eaa611198de91f5d36b8e2e625a87d5e1c58d4" translate="yes" xml:space="preserve">
          <source>⚠️ If files have the same name, the result is non-deterministic.</source>
          <target state="translated">⚠️ファイルの名前が同じである場合、結果は非決定論的です。</target>
        </trans-unit>
        <trans-unit id="e28a254a38095ce9b47c70d4231c64cc7af7f1ac" translate="yes" xml:space="preserve">
          <source>⚠️ If you use &lt;strong&gt;Circle CI&lt;/strong&gt; or any other environment that doesn't provide real available count of CPUs then you need to setup explicitly number of CPUs to avoid &lt;code&gt;Error: Call retries were exceeded&lt;/code&gt; (see &lt;a href=&quot;https://github.com/webpack-contrib/terser-webpack-plugin/issues/143&quot;&gt;#143&lt;/a&gt;, &lt;a href=&quot;https://github.com/webpack-contrib/terser-webpack-plugin/issues/202&quot;&gt;#202&lt;/a&gt;).</source>
          <target state="translated">⚠️あなたが使用している場合は&lt;strong&gt;サークルCI&lt;/strong&gt;やCPUの実際の利用可能回数を提供していない他の環境を、あなたは避けるのにセットアップするCPUの明示的に番号が必要です &lt;code&gt;Error: Call retries were exceeded&lt;/code&gt; （参照&lt;a href=&quot;https://github.com/webpack-contrib/terser-webpack-plugin/issues/143&quot;&gt;＃143&lt;/a&gt;、&lt;a href=&quot;https://github.com/webpack-contrib/terser-webpack-plugin/issues/202&quot;&gt;＃202&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="06440a832d0b109371bfe5ed62bf4679a4745069" translate="yes" xml:space="preserve">
          <source>⚠️ Note that there is an overhead for saving the reading and saving the cache file, so only use this loader to cache expensive loaders.</source>
          <target state="translated">⚠️読み込みの保存とキャッシュファイルの保存にはオーバーヘッドがあるため、このローダーは高価なローダーをキャッシュする場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="2726ebea3bf20b169f66205a8ad9b98698d2996b" translate="yes" xml:space="preserve">
          <source>⚠️ Note that you &lt;strong&gt;can't&lt;/strong&gt; use a &lt;strong&gt;filename&lt;/strong&gt; other than the [supported config formats] (e.g &lt;code&gt;.postcssrc.js&lt;/code&gt;, &lt;code&gt;postcss.config.js&lt;/code&gt;), this option only allows you to manually specify the &lt;strong&gt;directory&lt;/strong&gt; where config lookup should &lt;strong&gt;start&lt;/strong&gt; from</source>
          <target state="translated">⚠️あなたがいることを注意&lt;strong&gt;することはできません&lt;/strong&gt;使用して&lt;strong&gt;、ファイル名&lt;/strong&gt; [サポート設定の形式]（例以外 &lt;code&gt;.postcssrc.js&lt;/code&gt; 、 &lt;code&gt;postcss.config.js&lt;/code&gt; が）、このオプションは、手動で指定することができます&lt;strong&gt;ディレクトリ&lt;/strong&gt;設定検索がすべき&lt;strong&gt;開始&lt;/strong&gt;からの</target>
        </trans-unit>
        <trans-unit id="42dc837001d121a011811174e45c7bcb7a22e925" translate="yes" xml:space="preserve">
          <source>⚠️ Otherwise it is &lt;strong&gt;unnecessary&lt;/strong&gt; to set this option and is &lt;strong&gt;not&lt;/strong&gt; recommended</source>
          <target state="translated">Otherwise️それ以外の場合、このオプションを設定する&lt;strong&gt;必要&lt;/strong&gt;は&lt;strong&gt;なく、&lt;/strong&gt;推奨され&lt;strong&gt;ません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ba82a635a382dfbf77d512aabf992276045612b" translate="yes" xml:space="preserve">
          <source>⚠️ Source maps do not work.</source>
          <target state="translated">⚠️ソースマップが機能しません。</target>
        </trans-unit>
        <trans-unit id="ffa533dc33bc84fe457dff566ee6d5a2bf571d96" translate="yes" xml:space="preserve">
          <source>⚠️ The &lt;code&gt;source&lt;/code&gt; argument will contain &lt;code&gt;undefined&lt;/code&gt; if you don't use source maps.</source>
          <target state="translated">⚠️ソースマップを使用しない場合、 &lt;code&gt;source&lt;/code&gt; 引数には &lt;code&gt;undefined&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="d5af7592772c0a7e27d4d31993e0748787250bbb" translate="yes" xml:space="preserve">
          <source>⚠️ We highly recommend using the &lt;code&gt;txt&lt;/code&gt; extension. Using &lt;code&gt;js&lt;/code&gt;/&lt;code&gt;cjs&lt;/code&gt;/&lt;code&gt;mjs&lt;/code&gt; extensions may conflict with existing assets which leads to broken code.</source>
          <target state="translated">⚠️我々は非常に使用することをお勧め &lt;code&gt;txt&lt;/code&gt; 拡張子を。使用 &lt;code&gt;js&lt;/code&gt; / &lt;code&gt;cjs&lt;/code&gt; / &lt;code&gt;mjs&lt;/code&gt; 拡張することは壊れたコードにつながる既存の資産と競合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="74d035769946143ee1412dad42fe72c8c15c3434" translate="yes" xml:space="preserve">
          <source>⚠️ When &lt;code&gt;postcss-loader&lt;/code&gt; is used standalone (without &lt;code&gt;css-loader&lt;/code&gt;) don't use &lt;code&gt;@import&lt;/code&gt; in your CSS, since this can lead to quite bloated bundles</source>
          <target state="translated">post️postcss &lt;code&gt;postcss-loader&lt;/code&gt; がスタンドアロンで（ &lt;code&gt;css-loader&lt;/code&gt; なしで）使用 &lt;code&gt;@import&lt;/code&gt; れる場合、CSSで@importを使用しないでください。これにより、バンドルがかなり肥大化する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ea9ecdab17cd97641c2c4fc380f8a08e284c1c74" translate="yes" xml:space="preserve">
          <source>⚠️ webpack requires an identifier (&lt;code&gt;ident&lt;/code&gt;) in &lt;code&gt;options&lt;/code&gt; when &lt;code&gt;{Function}/require&lt;/code&gt; is used (Complex Options). The &lt;code&gt;ident&lt;/code&gt; can be freely named as long as it is unique. It's recommended to name it (&lt;code&gt;ident: 'postcss'&lt;/code&gt;)</source>
          <target state="translated">Function️Webpackでは、 &lt;code&gt;{Function}/require&lt;/code&gt; が使用されている場合（複合オプション）、 &lt;code&gt;options&lt;/code&gt; に識別子（ &lt;code&gt;ident&lt;/code&gt; ）が必要です。 &lt;code&gt;ident&lt;/code&gt; が自由に限り、それがユニークであると命名することができます。名前を付けることをお勧めします（ &lt;code&gt;ident: 'postcss'&lt;/code&gt; ）</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
