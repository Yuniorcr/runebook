<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="97b5d99571d04e3ad13b05b4a25e852af90802b2" translate="yes" xml:space="preserve">
          <source>Loader will always return warnings if option is set to &lt;code&gt;true&lt;/code&gt;. If you're using hot module replacement, you may wish to enable this in development, or else updates will be skipped when there's an eslint error.</source>
          <target state="translated">オプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合、ローダーは常に警告を返します。ホットモジュール置換を使用している場合は、開発時にこれを有効にすることをお勧めします。そうしないと、eslintエラーが発生したときに更新がスキップされます。</target>
        </trans-unit>
        <trans-unit id="fab75d863e028cfcbf3711da868849b30047bb42" translate="yes" xml:space="preserve">
          <source>Loader will cause the module build to fail if there are any eslint errors.</source>
          <target state="translated">ローダはESLINTエラーがあるとモジュールのビルドに失敗します。</target>
        </trans-unit>
        <trans-unit id="2ebbee483dc69b53b99f32cc324cae36920adb68" translate="yes" xml:space="preserve">
          <source>Loader will cause the module build to fail if there are any eslint warnings.</source>
          <target state="translated">ローダはeslintの警告があるとモジュールのビルドに失敗します。</target>
        </trans-unit>
        <trans-unit id="3ee4f2745233b1cb94ac8dfea64274f33a717f4e" translate="yes" xml:space="preserve">
          <source>Loader will process and report errors only and ignore warnings if this option is set to true</source>
          <target state="translated">このオプションがtrueに設定されている場合、ローダーはエラーのみを処理して報告し、警告を無視します。</target>
        </trans-unit>
        <trans-unit id="ce0bbf0a349ce71616c6f3a7a81100b1cf27a8e7" translate="yes" xml:space="preserve">
          <source>Loader(s) that should be used for converting the resource to a CSS exporting module &lt;em&gt;(required)&lt;/em&gt;</source>
          <target state="translated">リソースをCSSエクスポートモジュールに変換するために使用するローダー（&lt;em&gt;必須）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f4800e7ed94d46f7c8508b1f61aa9b4acd16f4e" translate="yes" xml:space="preserve">
          <source>Loader: Resolves a webpack &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;loader&lt;/a&gt;.</source>
          <target state="translated">ローダー：webpack &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;ローダーを&lt;/a&gt;解決します。</target>
        </trans-unit>
        <trans-unit id="4cd722a1b5bd5ee06349060aa953bbaed56cee36" translate="yes" xml:space="preserve">
          <source>LoaderOptionsPlugin</source>
          <target state="translated">LoaderOptionsPlugin</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="c591e4a3bcf5ed00d18d81e617c16d9f9fea20ec" translate="yes" xml:space="preserve">
          <source>Loaders allow more power in the JavaScript ecosystem through preprocessing functions (loaders). Users now have more flexibility to include fine-grained logic such as compression, packaging, language translations and &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;more&lt;/a&gt;.</source>
          <target state="translated">ローダーは、前処理関数（ローダー）を通じてJavaScriptエコシステムでより多くのパワーを許可します。ユーザーは、このような圧縮、梱包、言語翻訳としてきめの細かいロジックを含めるために、より柔軟性を持っている&lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;より&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04236cd132afbaff5f807345c6cfcf629380f929" translate="yes" xml:space="preserve">
          <source>Loaders are &lt;strong&gt;always&lt;/strong&gt; called from right to left. There are some instances where the loader only cares about the &lt;strong&gt;metadata&lt;/strong&gt; behind a request and can ignore the results of the previous loader. The &lt;code&gt;pitch&lt;/code&gt; method on loaders is called from &lt;strong&gt;left to right&lt;/strong&gt; before the loaders are actually executed (from right to left).</source>
          <target state="translated">ローダーは&lt;strong&gt;常に&lt;/strong&gt;右から左に呼び出されます。ローダーがリクエストの背後にある&lt;strong&gt;メタデータ&lt;/strong&gt;のみを考慮し、前のローダーの結果を無視できる場合があります。ローダーの &lt;code&gt;pitch&lt;/code&gt; メソッドは、ローダーが実際に実行される前に&lt;strong&gt;左から右&lt;/strong&gt;に（右から左に）呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a2826b8c59f1bc048b2d92251e589df2220343e5" translate="yes" xml:space="preserve">
          <source>Loaders are &lt;strong&gt;always&lt;/strong&gt; called from right to left. There are some instances where the loader only cares about the &lt;strong&gt;metadata&lt;/strong&gt; behind a request and can ignore the results of the previous loader. The &lt;code&gt;pitch&lt;/code&gt; method on loaders is called from &lt;strong&gt;left to right&lt;/strong&gt; before the loaders are actually executed (from right to left). For the following &lt;a href=&quot;../configuration/module#rule-use&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; configuration:</source>
          <target state="translated">ローダーは&lt;strong&gt;常に&lt;/strong&gt;右から左に呼び出されます。ローダーが要求の背後にある&lt;strong&gt;メタデータ&lt;/strong&gt;のみを処理し、前のローダーの結果を無視できる場合があります。ローダーの &lt;code&gt;pitch&lt;/code&gt; メソッドは、ローダーが実際に実行される前に（右から左に）&lt;strong&gt;左から右&lt;/strong&gt;に呼び出されます。次の&lt;a href=&quot;../configuration/module#rule-use&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;構成の場合：</target>
        </trans-unit>
        <trans-unit id="85433a4ab3591548b068d016fbf8d4c3304e1339" translate="yes" xml:space="preserve">
          <source>Loaders are activated by using &lt;code&gt;loadername!&lt;/code&gt; prefixes in &lt;code&gt;require()&lt;/code&gt; statements, or are automatically applied via regex from your webpack configuration &amp;ndash; see &lt;a href=&quot;../concepts/loaders#configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">ローダーは &lt;code&gt;loadername!&lt;/code&gt; を使用してアクティブ化されます！ &lt;code&gt;require()&lt;/code&gt; のプレフィックスステートメントの、またはWebpack構成から正規表現を介して自動的に適用されます&amp;ndash; &lt;a href=&quot;../concepts/loaders#configuration&quot;&gt;構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="66584ef4a8adbc0535dc086bb6068fd801382a3a" translate="yes" xml:space="preserve">
          <source>Loaders are evaluated/executed from right to left (or from bottom to top). In the example below execution starts with sass-loader, continues with css-loader and finally ends with style-loader. See &lt;a href=&quot;loaders#loader-features&quot;&gt;&quot;Loader Features&quot;&lt;/a&gt; for more information about loaders order.</source>
          <target state="translated">ローダーは、右から左（または下から上）に評価/実行されます。以下の例では、実行はsass-loaderで始まり、css-loaderで続き、最後にstyle-loaderで終わります。ローダーの注文の詳細については、&lt;a href=&quot;loaders#loader-features&quot;&gt;「ローダーの機能」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d2a9298a789b09dae9bd81b1e23298018b33574" translate="yes" xml:space="preserve">
          <source>Loaders are evaluated/executed from right to left. In the example below execution starts with sass-loader, continues with css-loader and finally ends with style-loader. See &lt;a href=&quot;loaders#loader-features&quot;&gt;&quot;Loader Features&quot;&lt;/a&gt; for more information about loaders order.</source>
          <target state="translated">ローダーは右から左に評価/実行されます。以下の例では、実行はsass-loaderで始まり、css-loaderで続き、最後にstyle-loaderで終わります。見る&lt;a href=&quot;loaders#loader-features&quot;&gt;&lt;/a&gt;ローダーの順序の「ローダーの機能」を。</target>
        </trans-unit>
        <trans-unit id="85b2e5448f629cca6f3e4053499aa492264405ec" translate="yes" xml:space="preserve">
          <source>Loaders are transformations that are applied on the source code of a module. They allow you to pre-process files as you &lt;code&gt;import&lt;/code&gt; or &amp;ldquo;load&amp;rdquo; them. Thus, loaders are kind of like &amp;ldquo;tasks&amp;rdquo; in other build tools and provide a powerful way to handle front-end build steps. Loaders can transform files from a different language (like TypeScript) to JavaScript or inline images as data URLs. Loaders even allow you to do things like &lt;code&gt;import&lt;/code&gt; CSS files directly from your JavaScript modules!</source>
          <target state="translated">ローダーは、モジュールのソースコードに適用される変換です。これらを使用すると、ファイルを &lt;code&gt;import&lt;/code&gt; または「ロード」するときにファイルを前処理できます。したがって、ローダーは他のビルドツールの「タスク」のようなものであり、フロントエンドのビルドステップを処理する強力な方法を提供します。ローダーは、ファイルを別の言語（TypeScriptなど）からJavaScriptまたはインライン画像にデータURLとして変換できます。ローダーを使用すると、JavaScriptモジュールから直接CSSファイルを &lt;code&gt;import&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="c12e476331b28e02146d294815ffcc541688961f" translate="yes" xml:space="preserve">
          <source>Loaders are transformations that are applied to the source code of a module. They allow you to pre-process files as you &lt;code&gt;import&lt;/code&gt; or &amp;ldquo;load&amp;rdquo; them. Thus, loaders are kind of like &amp;ldquo;tasks&amp;rdquo; in other build tools and provide a powerful way to handle front-end build steps. Loaders can transform files from a different language (like TypeScript) to JavaScript or load inline images as data URLs. Loaders even allow you to do things like &lt;code&gt;import&lt;/code&gt; CSS files directly from your JavaScript modules!</source>
          <target state="translated">ローダーは、モジュールのソースコードに適用される変換です。ファイルを &lt;code&gt;import&lt;/code&gt; または「ロード」するときに、ファイルを前処理することができます。したがって、ローダーは他のビルドツールの「タスク」のようなものであり、フロントエンドのビルドステップを処理するための強力な方法を提供します。ローダーは、ファイルを別の言語（TypeScriptなど）からJavaScriptに変換したり、インライン画像をデータURLとして読み込んだりできます。ローダーを使用すると、JavaScriptモジュールからCSSファイルを直接 &lt;code&gt;import&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="105163e4c40315ef5103b9b810764f9517ba6631" translate="yes" xml:space="preserve">
          <source>Loaders are transformations that are applied to the source code of a module. They are written as functions that accept source code as a parameter and return a new version of that code with transformations applied.</source>
          <target state="translated">ローダとは、モジュールのソースコードに適用される変換のことです。これらは、ソースコードをパラメータとして受け取り、変換を適用した新しいバージョンのコードを返す関数として書かれています。</target>
        </trans-unit>
        <trans-unit id="4492533e2228d71b3b96dc5a018cc4fea5628474" translate="yes" xml:space="preserve">
          <source>Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).</source>
          <target state="translated">複数のローダーを渡すことでローダーを連鎖させることができ、右から左(最後から最初に設定されたもの)に適用されます。</target>
        </trans-unit>
        <trans-unit id="1847aee657a68a67aa5b0d9bc1513fcf39b92a1e" translate="yes" xml:space="preserve">
          <source>Loaders can be chained. Each loader in the chain applies transformations to the processed resource. A chain is executed in reverse order. The first loader passes its result (resource with applied transformations) to the next one, and so forth. Finally, webpack expects JavaScript to be returned by the last loader in the chain.</source>
          <target state="translated">ローダは連鎖させることができます。チェーン内の各ローダーは、処理されたリソースに変換を適用します。チェーンは逆順に実行されます。最初のローダーはその結果 (変換を適用したリソース)を次のローダーに渡します。最後に、webpack は JavaScript がチェーン内の最後のローダーによって返されることを期待します。</target>
        </trans-unit>
        <trans-unit id="9992fe8ca23caa87dd6c06cc85034e1179a05711" translate="yes" xml:space="preserve">
          <source>Loaders can be configured with an &lt;code&gt;options&lt;/code&gt; object (using &lt;code&gt;query&lt;/code&gt; parameters to set options is still supported but has been deprecated).</source>
          <target state="translated">ローダーは、 &lt;code&gt;options&lt;/code&gt; オブジェクトを使用して構成できます（ &lt;code&gt;query&lt;/code&gt; パラメーターを使用してオプションを設定することは引き続きサポートされますが、廃止されました）。</target>
        </trans-unit>
        <trans-unit id="7cae65951a547f19a78fea06bfee949d1d0c7429" translate="yes" xml:space="preserve">
          <source>Loaders can be synchronous or asynchronous.</source>
          <target state="translated">ローダは同期または非同期のどちらでも構いません。</target>
        </trans-unit>
        <trans-unit id="3a4ffaac9a5d00e6d97999f76c729bfda323f67d" translate="yes" xml:space="preserve">
          <source>Loaders can emit additional arbitrary files.</source>
          <target state="translated">ローダは任意のファイルを追加で出力することができます。</target>
        </trans-unit>
        <trans-unit id="1f7061ffc9f99eccda64c580b1a06d220651d256" translate="yes" xml:space="preserve">
          <source>Loaders cannot access the webpack options.</source>
          <target state="translated">ローダはwebpackのオプションにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="f1fbfd5a9c44d1d16d4fe66fb905eb642dbf48c2" translate="yes" xml:space="preserve">
          <source>Loaders cannot emit files.</source>
          <target state="translated">ローダはファイルをエミットできません。</target>
        </trans-unit>
        <trans-unit id="7eb0c6a6e419b2eb666eba1f3916c0671c3bda22" translate="yes" xml:space="preserve">
          <source>Loaders cannot use custom loader API (i. e. by plugins).</source>
          <target state="translated">ローダーはカスタムローダーAPIを使用することができません(プラグインによる)。</target>
        </trans-unit>
        <trans-unit id="41eeba56dff96e9c38832b78aed764a72c0255f0" translate="yes" xml:space="preserve">
          <source>Loaders follow the standard &lt;a href=&quot;module-resolution&quot;&gt;module resolution&lt;/a&gt;. In most cases it will be loaded from the &lt;a href=&quot;module-resolution#module-paths&quot;&gt;module path&lt;/a&gt; (think &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;).</source>
          <target state="translated">ローダーは、標準の&lt;a href=&quot;module-resolution&quot;&gt;モジュール解像度に&lt;/a&gt;従います。ほとんどの場合、&lt;a href=&quot;module-resolution#module-paths&quot;&gt;モジュールパス&lt;/a&gt;からロードされます（ &lt;code&gt;npm install&lt;/code&gt; 、 &lt;code&gt;node_modules&lt;/code&gt; を考えてください）。</target>
        </trans-unit>
        <trans-unit id="c2f940e33799a662cb1ad30c183523d439fd0dd0" translate="yes" xml:space="preserve">
          <source>Loaders follow the standard &lt;a href=&quot;module-resolution&quot;&gt;module resolution&lt;/a&gt;. In most cases it will be loaders from the &lt;a href=&quot;module-resolution#module-paths&quot;&gt;module path&lt;/a&gt; (think &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;).</source>
          <target state="translated">ローダーは標準&lt;a href=&quot;module-resolution&quot;&gt;モジュールの解像度に&lt;/a&gt;従います。ほとんどの場合、それは&lt;a href=&quot;module-resolution#module-paths&quot;&gt;モジュールパス&lt;/a&gt;からのローダーになります（ &lt;code&gt;npm install&lt;/code&gt; と考えてください、 &lt;code&gt;node_modules&lt;/code&gt; ください）。</target>
        </trans-unit>
        <trans-unit id="280b79c628c88ba44079edd33fc5fff785933171" translate="yes" xml:space="preserve">
          <source>Loaders may be added inline in requests and disabled via inline prefixes, which will impact the order in which they are &quot;pitched&quot; and executed. See &lt;a href=&quot;../configuration/module#ruleenforce&quot;&gt;&lt;code&gt;Rule.enforce&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">ローダーはリクエストにインラインで追加され、インラインプレフィックスを介して無効にされる場合があります。これは、ローダーが「ピッチング」されて実行される順序に影響します。詳細については、&lt;a href=&quot;../configuration/module#ruleenforce&quot;&gt; &lt;code&gt;Rule.enforce&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fca8c8eeb996a4a1a7282cc32332e5f5a992a064" translate="yes" xml:space="preserve">
          <source>Loaders may use &lt;code&gt;this.getLogger('name')&lt;/code&gt; to get an independent logger with a child name. Loader path and processed file is still added.</source>
          <target state="translated">ローダーは &lt;code&gt;this.getLogger('name')&lt;/code&gt; を使用して、子名を持つ独立したロガーを取得できます。ローダーパスと処理済みファイルは引き続き追加されます。</target>
        </trans-unit>
        <trans-unit id="63e5dc9d3fa1229531222b1c2e765d56159a9411" translate="yes" xml:space="preserve">
          <source>Loaders may use special fallback logic for detecting logging support &lt;code&gt;this.getLogger() ? this.getLogger() : console&lt;/code&gt; to provide a fallback when an older webpack version is used which does not support &lt;code&gt;getLogger&lt;/code&gt; method.</source>
          <target state="translated">ローダーは、ロギングサポート &lt;code&gt;this.getLogger() ? this.getLogger() : console&lt;/code&gt; を検出するために特別なフォールバックロジックを使用できますか？this.getLogger（）： &lt;code&gt;getLogger&lt;/code&gt; メソッドをサポートしない古いバージョンのwebpackが使用された場合にフォールバックを提供するコンソール。</target>
        </trans-unit>
        <trans-unit id="c38496ed15a93530a8091bef21e49371ecc5e31b" translate="yes" xml:space="preserve">
          <source>Loaders provide a way to customize the output through their preprocessing functions. Users now have more flexibility to include fine-grained logic such as compression, packaging, language translations and &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;more&lt;/a&gt;.</source>
          <target state="translated">ローダーは、前処理機能を使用して出力をカスタマイズする方法を提供します。ユーザーは、このような圧縮、梱包、言語翻訳としてきめの細かいロジックを含めるために、より柔軟性を持っている&lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;より&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81be1d2631fc99d0ffb905518327d6bdea76da2d" translate="yes" xml:space="preserve">
          <source>Loaders run in Node.js and can do everything that&amp;rsquo;s possible there.</source>
          <target state="translated">ローダーはNode.jsで実行され、そこで可能なすべてのことを実行できます。</target>
        </trans-unit>
        <trans-unit id="af3ff785372e184c720ab72e8d8e6b85f3adc643" translate="yes" xml:space="preserve">
          <source>Loaders running in a worker pool are limited. Examples:</source>
          <target state="translated">ワーカープールで実行されるローダーは制限されています。例を示します。</target>
        </trans-unit>
        <trans-unit id="54ea0b910661d9aac53a3ca86c53b475f8fe56c6" translate="yes" xml:space="preserve">
          <source>Loaders should prefer to use &lt;code&gt;this.getLogger()&lt;/code&gt; for logging which is a shortcut to &lt;code&gt;compilation.getLogger()&lt;/code&gt; with loader path and processed file. This kind of logging is stored to the Stats and formatted accordingly. It can be filtered and exported by the webpack user.</source>
          <target state="translated">ローダーは、ロギングに &lt;code&gt;this.getLogger()&lt;/code&gt; を使用することをお勧めします。これは、ローダーパスと処理済みファイルを含む &lt;code&gt;compilation.getLogger()&lt;/code&gt; へのショートカットです。この種のログは統計に保存され、それに応じてフォーマットされます。これは、webpackユーザーがフィルタリングしてエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="df05e5496cc277768c81c08b1521d94c41cf93b8" translate="yes" xml:space="preserve">
          <source>Loaders were originally designed to also work as Babel transforms. Therefore if you write a loader that works for both, you can use this property to know if there is access to additional loaderContext and webpack features.</source>
          <target state="translated">ローダはもともとバベル変換としても動作するように設計されています。そのため、両方で動作するローダーを書いた場合は、このプロパティを使用して loaderContext と webpack の追加機能にアクセスできるかどうかを知ることができます。</target>
        </trans-unit>
        <trans-unit id="1fd10bdf49779c69c5002cd39a74d7fbf13068d5" translate="yes" xml:space="preserve">
          <source>Loaders were originally designed to also work as Babel transforms. Therefore, if you write a loader that works for both, you can use this property to know if there is access to additional loaderContext and webpack features.</source>
          <target state="translated">ローダはもともとバベル変換としても動作するように設計されています。したがって、両方で動作するローダーを書いた場合、このプロパティを使用して、追加の loaderContext および webpack 機能へのアクセスがあるかどうかを知ることができます。</target>
        </trans-unit>
        <trans-unit id="2dbd1e5053c497540c53b17284ee2f178ce2faff" translate="yes" xml:space="preserve">
          <source>Loaders were originally designed to work in synchronous loader pipelines, like Node.js (using &lt;a href=&quot;https://github.com/webpack/enhanced-require&quot;&gt;enhanced-require&lt;/a&gt;), &lt;em&gt;and&lt;/em&gt; asynchronous pipelines, like in webpack. However, since expensive synchronous computations are a bad idea in a single-threaded environment like Node.js, we advise making your loader asynchronous if possible. Synchronous loaders are ok if the amount of computation is trivial.</source>
          <target state="translated">ローダーはもともと、Node.jsのように（使用して同期ローダパイプラインで動作するように設計された&lt;a href=&quot;https://github.com/webpack/enhanced-require&quot;&gt;、必要の増強&lt;/a&gt;）、&lt;em&gt;および&lt;/em&gt;WebPACKの中のように、非同期パイプライン。ただし、Node.jsのようなシングルスレッド環境では、コストのかかる同期計算はお勧めできません。可能であれば、ローダーを非同期にすることをお勧めします。計算量がごくわずかであれば、同期ローダーは問題ありません。</target>
        </trans-unit>
        <trans-unit id="47a1fe72d58084ada50b31d636dfc360f476ba49" translate="yes" xml:space="preserve">
          <source>Loaders were originally designed to work in synchronous loader pipelines, like Node.js (using &lt;a href=&quot;https://github.com/webpack/enhanced-require&quot;&gt;enhanced-require&lt;/a&gt;), &lt;em&gt;and&lt;/em&gt; asynchronous pipelines, like in webpack. However, since expensive synchronous computations are a bad idea in a single-threaded environment like Node.js, we advise to make your loader asynchronously if possible. Synchronous loaders are ok if the amount of computation is trivial.</source>
          <target state="translated">ローダーはもともと、Node.jsのように（使用して同期ローダパイプラインで動作するように設計された&lt;a href=&quot;https://github.com/webpack/enhanced-require&quot;&gt;、必要の増強&lt;/a&gt;）、&lt;em&gt;および&lt;/em&gt; WebPACKの中のように、非同期パイプライン。ただし、Node.jsのようなシングルスレッド環境では、高価な同期計算はお勧めできないため、可能であればローダーを非同期にすることをお勧めします。計算量が少ない場合は、同期ローダーは問題ありません。</target>
        </trans-unit>
        <trans-unit id="ef1be60bbd337c65d9dc5b5f26b2a0b4b1b565d8" translate="yes" xml:space="preserve">
          <source>Loading (asynchronous)</source>
          <target state="translated">ローディング(非同期</target>
        </trans-unit>
        <trans-unit id="3e683799b6440bfdb45ff32020713072b7ad918e" translate="yes" xml:space="preserve">
          <source>Loading CSS</source>
          <target state="translated">CSSの読み込み</target>
        </trans-unit>
        <trans-unit id="1bbec1f2925e33de29cc103440eaad38ddc86d8c" translate="yes" xml:space="preserve">
          <source>Loading Data</source>
          <target state="translated">データの読み込み</target>
        </trans-unit>
        <trans-unit id="7d51e9a993f0136e10372f7e9d94384de46c4c08" translate="yes" xml:space="preserve">
          <source>Loading Fonts</source>
          <target state="translated">フォントの読み込み</target>
        </trans-unit>
        <trans-unit id="f7a4ff542e1f688b5141f8e55e1a09aeafc365ff" translate="yes" xml:space="preserve">
          <source>Loading Images</source>
          <target state="translated">画像の読み込み</target>
        </trans-unit>
        <trans-unit id="b71d9c5c490fb3ace55aaa4475ed74cd92ebc250" translate="yes" xml:space="preserve">
          <source>Loading Polyfills</source>
          <target state="translated">ポリフィルの読み込み</target>
        </trans-unit>
        <trans-unit id="dcae35a8da3975851c0568a2b9dc25768f4d8592" translate="yes" xml:space="preserve">
          <source>Loading remote modules is considered asynchronous operation. When using a remote module these asynchronous operations will be placed in the next chunk loading operation(s) that is between the remote module and the entrypoint. It's not possible to use a remote module without a chunk loading operation.</source>
          <target state="translated">リモートモジュールのロードは非同期操作とみなされます。リモートモジュールを使用する場合、これらの非同期操作は、リモートモジュールとエントリポイントの間にある次のチャンクロード操作に配置されます。チャンクロード操作なしでリモートモジュールを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="e3759a5621c7d8e195efc7544602f9a59f770ecf" translate="yes" xml:space="preserve">
          <source>Loads &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; like JavaScript</source>
          <target state="translated">JavaScriptのように&lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScriptを&lt;/a&gt;ロードします</target>
        </trans-unit>
        <trans-unit id="95e1bd68466cd0f30bcf915449c36761daa19154" translate="yes" xml:space="preserve">
          <source>Loads a Sass/SCSS file and compiles it to CSS.</source>
          <target state="translated">Sass/SCSSファイルを読み込み、CSSにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="6b2904edad9c782e3b8dc05eb8a40a537ce14354" translate="yes" xml:space="preserve">
          <source>Loads the imported bundle asynchronously</source>
          <target state="translated">インポートされたバンドルを非同期にロードします。</target>
        </trans-unit>
        <trans-unit id="a845830aac9034a343422233c2c770f1f95e729e" translate="yes" xml:space="preserve">
          <source>Local Installation</source>
          <target state="translated">現地での設置</target>
        </trans-unit>
        <trans-unit id="fe8e780964b4db7bf4ccc85f44465753d35754db" translate="yes" xml:space="preserve">
          <source>Locations for the cache. Defaults to &lt;code&gt;path.resolve(cache.cacheDirectory, cache.name)&lt;/code&gt;.</source>
          <target state="translated">キャッシュの場所。デフォルトは &lt;code&gt;path.resolve(cache.cacheDirectory, cache.name)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e2f503db9aa3949f0c591890ed93126bd2b337b2" translate="yes" xml:space="preserve">
          <source>Locking Down Your Website Scripts with CSP, Hashes, Nonces and Report URI</source>
          <target state="translated">CSP、ハッシュ、Nonces、およびレポート URI を使用したウェブサイトスクリプトのロックダウン</target>
        </trans-unit>
        <trans-unit id="efc845bda299735eb007caff62fd3c8e3838c793" translate="yes" xml:space="preserve">
          <source>Logger Interface</source>
          <target state="translated">ロガーインタフェース</target>
        </trans-unit>
        <trans-unit id="a793db9f87d136f755e5433d27a904e7f15be4c7" translate="yes" xml:space="preserve">
          <source>Logger methods</source>
          <target state="translated">ロガーメソッド</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="c25c477d308d53c228d368bac18b43a50b2c2bbd" translate="yes" xml:space="preserve">
          <source>Logging API is available since the release of webpack 4.37. When &lt;code&gt;logging&lt;/code&gt; is enabled in &lt;a href=&quot;../configuration/stats#statslogging&quot;&gt;&lt;code&gt;stats configuration&lt;/code&gt;&lt;/a&gt; and/or when &lt;a href=&quot;../configuration/other-options#infrastructurelogging&quot;&gt;&lt;code&gt;infrastructure logging&lt;/code&gt;&lt;/a&gt; is enabled, loaders may log messages which will be printed out in the respective logger format (stats, infrastructure).</source>
          <target state="translated">Logging APIは、webpack4.37のリリース以降に使用できます。&lt;a href=&quot;../configuration/stats#statslogging&quot;&gt; &lt;code&gt;stats configuration&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;logging&lt;/code&gt; が有効になっている場合、および/または&lt;a href=&quot;../configuration/other-options#infrastructurelogging&quot;&gt; &lt;code&gt;infrastructure logging&lt;/code&gt; &lt;/a&gt;が有効になっている場合、ローダーはメッセージをログに記録し、それぞれのロガー形式（統計、インフラストラクチャ）で出力される場合があります。</target>
        </trans-unit>
        <trans-unit id="047f7d6400573cedc28a03f5aec30d3fe6bba8d9" translate="yes" xml:space="preserve">
          <source>Logging API is available since the release of webpack 4.37. When &lt;code&gt;logging&lt;/code&gt; is enabled in &lt;a href=&quot;../configuration/stats#statslogging&quot;&gt;&lt;code&gt;stats configuration&lt;/code&gt;&lt;/a&gt; and/or when &lt;a href=&quot;../configuration/other-options#infrastructurelogging&quot;&gt;&lt;code&gt;infrastructure logging&lt;/code&gt;&lt;/a&gt; is enabled, plugins may log messages which will be printed out in the respective logger format (stats, infrastructure).</source>
          <target state="translated">Logging APIは、webpack4.37のリリース以降に使用できます。&lt;a href=&quot;../configuration/stats#statslogging&quot;&gt; &lt;code&gt;stats configuration&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;logging&lt;/code&gt; が有効になっている場合、および/または&lt;a href=&quot;../configuration/other-options#infrastructurelogging&quot;&gt; &lt;code&gt;infrastructure logging&lt;/code&gt; &lt;/a&gt;が有効になっている場合、プラグインはメッセージをログに記録し、それぞれのロガー形式（統計、インフラストラクチャ）で出力される場合があります。</target>
        </trans-unit>
        <trans-unit id="b74fdb99967614496cf58dee5c598239e13a6fec" translate="yes" xml:space="preserve">
          <source>Logging output exportable as part of the &lt;code&gt;stats.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stats.json&lt;/code&gt; の一部としてエクスポート可能なログ出力</target>
        </trans-unit>
        <trans-unit id="ea4a8335bf5055498dd63426ed5f6a590598fea6" translate="yes" xml:space="preserve">
          <source>Logging output is an additional way to display messages to the end users.</source>
          <target state="translated">ログ出力は、エンドユーザーにメッセージを表示するための追加の方法です。</target>
        </trans-unit>
        <trans-unit id="6499a1321bf7c41ee0316581d5232990396dc1f7" translate="yes" xml:space="preserve">
          <source>Long Term Caching</source>
          <target state="translated">長期キャッシング</target>
        </trans-unit>
        <trans-unit id="00f3ff48131c599bc893a3fab182268b3f63b83d" translate="yes" xml:space="preserve">
          <source>Longer compilation time</source>
          <target state="translated">コンパイル時間が長い</target>
        </trans-unit>
        <trans-unit id="0c31d5a4c93b2e22d597f2bbaf69e6630c087b1a" translate="yes" xml:space="preserve">
          <source>Looks complex, yes. We were already able to reduce some complexity due to a assumption we can make: Only &lt;code&gt;node&lt;/code&gt; need a CommonJs version and can detect production/development with &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">はい、複雑に見えます。CommonJsバージョンが必要なのは &lt;code&gt;node&lt;/code&gt; のみであり、 &lt;code&gt;process.env&lt;/code&gt; を使用して本番/開発を検出できるという前提により、すでにある程度の複雑さを軽減することができました。</target>
        </trans-unit>
        <trans-unit id="7c3e6e5dabb7bc746dff41b2a1ffb6076a8d492f" translate="yes" xml:space="preserve">
          <source>Low-level concepts</source>
          <target state="translated">低レベルの概念</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="f9cfe0891192e57a66acda3a681bb6fc527e509f" translate="yes" xml:space="preserve">
          <source>MIT (&lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;)</source>
          <target state="translated">MIT（&lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt; http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="bedd57ad9d033edd85277ae8248cacaa182324f4" translate="yes" xml:space="preserve">
          <source>Magic Comments</source>
          <target state="translated">マジックコメント</target>
        </trans-unit>
        <trans-unit id="3a814d392b75feac12692e66d6c20d77a8369430" translate="yes" xml:space="preserve">
          <source>Make all exports from the dependency available in the current scope. The &lt;code&gt;require&lt;/code&gt; label can occur before a string. The dependency must export values with the &lt;code&gt;export&lt;/code&gt; label. CommonJS or AMD modules cannot be consumed.</source>
          <target state="translated">依存関係からのすべてのエクスポートを現在のスコープで使用できるようにします。 &lt;code&gt;require&lt;/code&gt; ラベルは、文字列の前に発生する可能性があります。依存性がで値をエクスポートする必要があり &lt;code&gt;export&lt;/code&gt; ラベルを使用。CommonJSまたはAMDモジュールは使用できません。</target>
        </trans-unit>
        <trans-unit id="cfb2f4e4030c7b46dbf1ba28a2a8d9414c53cf56" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;devServer.publicPath&lt;/code&gt; always starts and ends with a forward slash.</source>
          <target state="translated">&lt;code&gt;devServer.publicPath&lt;/code&gt; が常にスラッシュで開始および終了することを確認してください。</target>
        </trans-unit>
        <trans-unit id="5b29ac58651e9cdaefcfd5d8e27916e8b2719912" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;publicPath&lt;/code&gt; always starts and ends with a forward slash.</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; を確認してください常にスラッシュで開始および終了する。</target>
        </trans-unit>
        <trans-unit id="82de55ca19a0293cb580f6a86046535d6cadc76f" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;a href=&quot;#devserverhot&quot;&gt;&lt;code&gt;devServer.hot&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;true&lt;/code&gt; because &lt;code&gt;devServer.injectHot&lt;/code&gt; only works with HMR.</source>
          <target state="translated">&lt;a href=&quot;#devserverhot&quot;&gt; &lt;code&gt;devServer.hot&lt;/code&gt; &lt;/a&gt;はHMRでのみ機能するため、 &lt;code&gt;devServer.injectHot&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="8d8a0220d8bd55d5aa0014b7718826f3edb161c8" translate="yes" xml:space="preserve">
          <source>Make sure that the hashing function will have &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt; methods available.</source>
          <target state="translated">ハッシュ関数に &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;digest&lt;/code&gt; があることを確認してくださいメソッドを使用できる。</target>
        </trans-unit>
        <trans-unit id="80ca581877d75fc77f1d3afdd7b023e6302f9de5" translate="yes" xml:space="preserve">
          <source>Make sure the entry chunk is cheap to emit by keeping it small. The following code block extracts a chunk containing only the runtime with &lt;em&gt;all other chunks as children&lt;/em&gt;:</source>
          <target state="translated">エントリチャンクを小さく保つことで、安価にエミットできるようにします。次のコードブロックは&lt;em&gt;、他のすべてのチャンクを子として&lt;/em&gt;持つランタイムのみを含むチャンクを抽出します&lt;em&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ae626bf4ec2fdd255e35ade6adc6ac167c376ee4" translate="yes" xml:space="preserve">
          <source>Make sure the entry chunk is cheap to emit by keeping it small. The following configuration creates an additional chunk for the runtime code, so it's cheap to generate:</source>
          <target state="translated">エントリチャンクを小さくすることで、生成コストが安くなることを確認してください。以下の設定では、ランタイムコード用の追加チャンクを生成するので、生成コストが安くなります。</target>
        </trans-unit>
        <trans-unit id="822583219da604edb033971af307b5c77720f385" translate="yes" xml:space="preserve">
          <source>Make sure to have a &lt;code&gt;webpack.config.js&lt;/code&gt; file. If you haven't already, use this as a minimal example to get started:</source>
          <target state="translated">必ず &lt;code&gt;webpack.config.js&lt;/code&gt; を用意してくださいファイル。まだ行っていない場合は、これを最小限の例として使用して開始してください。</target>
        </trans-unit>
        <trans-unit id="946510ee236f1819da59b74df08b6c7513b1e8b6" translate="yes" xml:space="preserve">
          <source>Make sure to read the &lt;a href=&quot;../guides/caching&quot;&gt;Caching guide&lt;/a&gt; for details. There are more steps involved than just setting this option.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシングガイド&lt;/a&gt;を必ずお読みください。このオプションを設定するだけでなく、より多くの手順が必要になります。</target>
        </trans-unit>
        <trans-unit id="eb7f65d09dd256be015476f59d3999b13b6a1f01" translate="yes" xml:space="preserve">
          <source>Make sure you are transforming as few files as possible. Because you are probably matching &lt;code&gt;/\.js$/&lt;/code&gt;, you might be transforming the &lt;code&gt;node_modules&lt;/code&gt; folder or other unwanted source.</source>
          <target state="translated">変換するファイルをできるだけ少なくしてください。おそらく &lt;code&gt;/\.js$/&lt;/code&gt; に一致しているため、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーまたはその他の不要なソースを変換している可能性があります。</target>
        </trans-unit>
        <trans-unit id="b79b7df1fb608455d299605f686bab5b4592d01d" translate="yes" xml:space="preserve">
          <source>Make sure you are transforming as few files as possible. Because you are probably matching &lt;code&gt;/\.m?js$/&lt;/code&gt;, you might be transforming the &lt;code&gt;node_modules&lt;/code&gt; folder or other unwanted source.</source>
          <target state="translated">できるだけ少ないファイルを変換していることを確認してください。おそらく &lt;code&gt;/\.m?js$/&lt;/code&gt; と一致しているため、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーまたはその他の不要なソースを変換している可能性があります。</target>
        </trans-unit>
        <trans-unit id="f3d9587519bf75c639601b005cda3332a332b465" translate="yes" xml:space="preserve">
          <source>Make sure you have &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; installed in your project else CLI will prompt you to install it.</source>
          <target state="translated">プロジェクトに &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; がインストールされていることを確認してください。インストールされていない場合、CLIからインストールを求められます。</target>
        </trans-unit>
        <trans-unit id="f6280c01bee59d3b53076e6acddc249d8696da16" translate="yes" xml:space="preserve">
          <source>Make webpack_public_path, webpack_require, webpack_modules and webpack_chunk_load accessible. Ensures that &lt;code&gt;require.valueOf&lt;/code&gt; and &lt;code&gt;require.onError&lt;/code&gt; are not processed by other plugins.</source>
          <target state="translated">webpack_public_path、webpack_require、webpack_modules、webpack_chunk_loadにアクセスできるようにします。確実に &lt;code&gt;require.valueOf&lt;/code&gt; と &lt;code&gt;require.onError&lt;/code&gt; は、他のプラグインによって処理されていません。</target>
        </trans-unit>
        <trans-unit id="5e0acb01ff22fcc4a87589193b7ce051d619e6d0" translate="yes" xml:space="preserve">
          <source>Management API</source>
          <target state="translated">かんりエーピーアイ</target>
        </trans-unit>
        <trans-unit id="e63e4519432a184f2c433088dda29083ad55f057" translate="yes" xml:space="preserve">
          <source>Manifest</source>
          <target state="translated">Manifest</target>
        </trans-unit>
        <trans-unit id="ca8b8b1969d3152a412da63d28e3ba85c007c8b9" translate="yes" xml:space="preserve">
          <source>Manifest file</source>
          <target state="translated">マニフェストファイル</target>
        </trans-unit>
        <trans-unit id="87f354d46c42fbfb1bf5c0671d9c6ee8315ef72f" translate="yes" xml:space="preserve">
          <source>ManifestPlugin source</source>
          <target state="translated">ソースマニフェストプラグイン</target>
        </trans-unit>
        <trans-unit id="6e60b4736a71b102618c37faacacdef5579361f4" translate="yes" xml:space="preserve">
          <source>Manually Bundling an Application</source>
          <target state="translated">アプリケーションを手動でバンドルする</target>
        </trans-unit>
        <trans-unit id="310107ae364d0440f15c70ce87c9748401da211c" translate="yes" xml:space="preserve">
          <source>Many applications share a common components library which could be built as a container with each component exposed. Each application consumes components from the components library container. Changes to the components library can be separately deployed without the need to re-deploy all applications. The application automatically uses the up-to-date version of the components library.</source>
          <target state="translated">多くのアプリケーションは共通のコンポーネントライブラリを共有しており、各コンポーネントを公開したコンテナとして構築することができます。各アプリケーションはコンポーネントライブラリコンテナからコンポーネントを消費します。コンポーネントライブラリへの変更は、すべてのアプリケーションを再デプロイすることなく、個別にデプロイすることができます。アプリケーションは自動的にコンポーネントライブラリの最新バージョンを使用します。</target>
        </trans-unit>
        <trans-unit id="5b2b1ee7a308a1557b02668d7c099c79efcc8803" translate="yes" xml:space="preserve">
          <source>Many frameworks and libraries have their own recommendations on how this should be accomplished within their methodologies. Here are a few examples:</source>
          <target state="translated">多くのフレームワークやライブラリは、その方法論の中でどのようにこれを実現すべきかについて独自の推奨事項を持っています。ここではいくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="14e014cc20f71d8ca3dd7c0b71a405ab4ab920a4" translate="yes" xml:space="preserve">
          <source>Many libraries will key off the &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; variable to determine what should be included in the library. For example, when &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is not set to &lt;code&gt;'production'&lt;/code&gt; some libraries may add additional logging and testing to make debugging easier. However, with &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; set to &lt;code&gt;'production'&lt;/code&gt; they might drop or add significant portions of code to optimize how things run for your actual users. Since webpack v4, specifying &lt;a href=&quot;../configuration/mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; automatically configures &lt;a href=&quot;../plugins/define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; for you:</source>
          <target state="translated">多くのライブラリは、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 変数をキーオフして、ライブラリに何を含めるかを決定します。たとえば、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; が &lt;code&gt;'production'&lt;/code&gt; に設定されていない場合、一部のライブラリでは、デバッグを容易にするためにログとテストが追加される場合があります。ただし、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を &lt;code&gt;'production'&lt;/code&gt; に設定すると、コードのかなりの部分が削除または追加されて、実際のユーザーの実行方法が最適化される場合があります。webpack v4以降、&lt;a href=&quot;../configuration/mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;指定すると、&lt;a href=&quot;../plugins/define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; &lt;/a&gt;が自動的に構成されます。</target>
        </trans-unit>
        <trans-unit id="f9f96c5a8fb4fc499147bb5f30b9e2af4b9ea3d7" translate="yes" xml:space="preserve">
          <source>Many libraries will key off the &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; variable to determine what should be included in the library. For example, when not in &lt;em&gt;production&lt;/em&gt; some libraries may add additional logging and testing to make debugging easier. However, with &lt;code&gt;process.env.NODE_ENV === 'production'&lt;/code&gt; they might drop or add significant portions of code to optimize how things run for your actual users. Since webpack v4, specifying &lt;a href=&quot;../concepts/mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; automatically configures &lt;a href=&quot;../plugins/define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; for you:</source>
          <target state="translated">多くのライブラリは、ライブラリに何を含める必要があるかを決定するために、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 変数をキーオフします。たとえば、&lt;em&gt;本番&lt;/em&gt;環境にない場合、一部のライブラリでは、デバッグを容易にするために追加のロギングとテストが追加される場合があります。ただし、 &lt;code&gt;process.env.NODE_ENV === 'production'&lt;/code&gt; を使用すると、コードのかなりの部分を削除または追加して、実際のユーザーに対する実行方法を最適化できます。 webpack v4以降、&lt;a href=&quot;../concepts/mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;指定すると、&lt;a href=&quot;../plugins/define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; &lt;/a&gt;が自動的に構成されます。</target>
        </trans-unit>
        <trans-unit id="6d780701301972713cdbc0ae3c7389b66619eebb" translate="yes" xml:space="preserve">
          <source>Mapped Mode</source>
          <target state="translated">マップされたモード</target>
        </trans-unit>
        <trans-unit id="963d9a6c8a34a6ed30c515af04dca56c70bf84f8" translate="yes" xml:space="preserve">
          <source>Mark a function call as side-effect-free</source>
          <target state="translated">関数呼び出しを副作用のないものとしてマークする</target>
        </trans-unit>
        <trans-unit id="618608e69b340a9be424c8115af4e3f3a5860027" translate="yes" xml:space="preserve">
          <source>Mark the file as side-effect-free</source>
          <target state="translated">副作用のないファイルにマークを付ける</target>
        </trans-unit>
        <trans-unit id="17364a0ed47cace4977b52b7d04c3e4c0cf9a601" translate="yes" xml:space="preserve">
          <source>Markdown to HTML</source>
          <target state="translated">マークダウンからHTMLへ</target>
        </trans-unit>
        <trans-unit id="cc36dd72b53517c1d6192a8b7d906e1e7a0da7de" translate="yes" xml:space="preserve">
          <source>Markdown to Markdown</source>
          <target state="translated">マークダウンからマークダウンへ</target>
        </trans-unit>
        <trans-unit id="0a92293de8b4136e55553e18bf8625efa4074a82" translate="yes" xml:space="preserve">
          <source>Maximum number of concurrency optimization processes in one time</source>
          <target state="translated">1回の同時実行最適化プロセスの最大数</target>
        </trans-unit>
        <trans-unit id="9d97f3faa457c6067ea392c7bf35316b89c3cd88" translate="yes" xml:space="preserve">
          <source>Maximum number of concurrency optimization processes in one time.</source>
          <target state="translated">1回の同時実行最適化プロセスの最大数。</target>
        </trans-unit>
        <trans-unit id="417a27fd94237019eac2aeb48145618064ce770e" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests at an entry point.</source>
          <target state="translated">エントリポイントでの並列リクエストの最大数。</target>
        </trans-unit>
        <trans-unit id="39b4b99fb5a7c36ca7c820930ef486c0de5aa72d" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests at initial page load would be lower or equal to 3</source>
          <target state="translated">最初のページロード時の最大並列リクエスト数が3以下であること</target>
        </trans-unit>
        <trans-unit id="6b42a920d5f02e51f74d406360d946d17663d1e5" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests at initial page load would be lower or equal to 30</source>
          <target state="translated">最初のページロード時の最大並列リクエスト数が30以下かそれ以下の場合</target>
        </trans-unit>
        <trans-unit id="8b5988ecf09f5540a687dd0626ea109922c2f60c" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests when loading chunks on demand would be lower or equal to 30</source>
          <target state="translated">チャンクをオンデマンドでロードする場合の最大並列リクエスト数が30以下の場合</target>
        </trans-unit>
        <trans-unit id="4acff09df4af5d153c122c644a57ed6cbb73ab80" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests when loading chunks on demand would be lower or equal to 5</source>
          <target state="translated">チャンクをオンデマンドでロードする場合の最大並列リクエスト数が5以下の場合</target>
        </trans-unit>
        <trans-unit id="53e5d801cf66de5587e63c1241deca456bf33b9b" translate="yes" xml:space="preserve">
          <source>Maximum number of parallel requests when on-demand loading.</source>
          <target state="translated">オンデマンドロード時の最大並列リクエスト数。</target>
        </trans-unit>
        <trans-unit id="0aeceb4e4aabcb87b823ae720128ab6afd46bbe4" translate="yes" xml:space="preserve">
          <source>May or may not have a performance benefit since the incremental build times are pretty fast.</source>
          <target state="translated">インクリメンタルなビルド時間はかなり速いので、パフォーマンス上のメリットがあるかもしれないし、ないかもしれません。</target>
        </trans-unit>
        <trans-unit id="7deb2bdf4473183bac7f21bf1e7f2410c5696b08" translate="yes" xml:space="preserve">
          <source>Media Query Plugin</source>
          <target state="translated">メディア クエリ プラグイン</target>
        </trans-unit>
        <trans-unit id="74d83fb1fba3fd8c10c28fbbc94d7844236c4d6b" translate="yes" xml:space="preserve">
          <source>Media Query Splitting Plugin</source>
          <target state="translated">メディアクエリ分割プラグイン</target>
        </trans-unit>
        <trans-unit id="89b6a31a2385bb15bff920bf63dc3c7fd8f71e62" translate="yes" xml:space="preserve">
          <source>MemoryCachePlugin</source>
          <target state="translated">MemoryCachePlugin</target>
        </trans-unit>
        <trans-unit id="1866f4cdcdf728e084eb4ddfe898153c121f9828" translate="yes" xml:space="preserve">
          <source>Merge chunks limit chunk count is lower than &lt;code&gt;options.maxChunks&lt;/code&gt;.</source>
          <target state="translated">マージチャンクの制限チャンク数が &lt;code&gt;options.maxChunks&lt;/code&gt; 未満です。</target>
        </trans-unit>
        <trans-unit id="8f58d3872c3cffa3f3fb3907eea11a667876119e" translate="yes" xml:space="preserve">
          <source>Merge two or more configurations using webpack-merge e.g. &lt;code&gt;-c ./webpack.config.js -c ./webpack.test.config.js&lt;/code&gt;</source>
          <target state="translated">webpack-mergeを使用して2つ以上の構成をマージします。例： &lt;code&gt;-c ./webpack.config.js -c ./webpack.test.config.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72c15c26b1be17ec93256af96a27f44809134b52" translate="yes" xml:space="preserve">
          <source>MergeDuplicateChunksPlugin</source>
          <target state="translated">MergeDuplicateChunksPlugin</target>
        </trans-unit>
        <trans-unit id="6b2944822c2268fc33a870d79c11dc89f6d193c3" translate="yes" xml:space="preserve">
          <source>Merges chunks until each chunk has the minimum size of &lt;code&gt;minChunkSize&lt;/code&gt;.</source>
          <target state="translated">各チャンクの最小サイズが &lt;code&gt;minChunkSize&lt;/code&gt; になるまで、チャンクをマージします。</target>
        </trans-unit>
        <trans-unit id="c5302240a42ef72c577209d8faf3e2380ec6d565" translate="yes" xml:space="preserve">
          <source>Migrate a configuration to a new version</source>
          <target state="translated">設定を新しいバージョンに移行する</target>
        </trans-unit>
        <trans-unit id="9578660b5607a28e9e8e3c2c9d41e3b29d296190" translate="yes" xml:space="preserve">
          <source>Migrate from &lt;code&gt;eslint-loader&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eslint-loader&lt;/code&gt; から移行する</target>
        </trans-unit>
        <trans-unit id="bd8872c1945c6f1032933a096e68ec27f1eff364" translate="yes" xml:space="preserve">
          <source>Mimicking django's &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;, a value beginning with &lt;code&gt;.&lt;/code&gt; can be used as a subdomain wildcard. &lt;code&gt;.host.com&lt;/code&gt; will match &lt;code&gt;host.com&lt;/code&gt;, &lt;code&gt;www.host.com&lt;/code&gt;, and any other subdomain of &lt;code&gt;host.com&lt;/code&gt;.</source>
          <target state="translated">djangoの &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; を模倣してい &lt;code&gt;.&lt;/code&gt; 値はで始まります。サブドメインのワイルドカードとして使用できます。 &lt;code&gt;.host.com&lt;/code&gt; は、 &lt;code&gt;host.com&lt;/code&gt; 、 &lt;code&gt;www.host.com&lt;/code&gt; 、およびhost.comの他のサブドメインと &lt;code&gt;host.com&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="897d2e3b770f8d706d0588208662011475130755" translate="yes" xml:space="preserve">
          <source>MinChunkSizePlugin</source>
          <target state="translated">MinChunkSizePlugin</target>
        </trans-unit>
        <trans-unit id="23b5f7513083e7dfd8776fabc70196ac391d848d" translate="yes" xml:space="preserve">
          <source>MiniCssExtractPlugin</source>
          <target state="translated">MiniCssExtractPlugin</target>
        </trans-unit>
        <trans-unit id="7a3ea5ae4bbcb0b6c68d07df01c97a3626e4c95d" translate="yes" xml:space="preserve">
          <source>Minification</source>
          <target state="translated">Minification</target>
        </trans-unit>
        <trans-unit id="e530b56795c0e4512b9667907810a828b4609938" translate="yes" xml:space="preserve">
          <source>Minification with &lt;a href=&quot;https://github.com/babel/minify&quot;&gt;babel-minify&lt;/a&gt;</source>
          <target state="translated">縮小&lt;a href=&quot;https://github.com/babel/minify&quot;&gt;バベル、縮小化&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="107d6db35d646d528c9a51a63651dabd529d73be" translate="yes" xml:space="preserve">
          <source>Minify the Output</source>
          <target state="translated">出力を最小化する</target>
        </trans-unit>
        <trans-unit id="fcbb0549ad4161e42e588161939dc9c2778e58f5" translate="yes" xml:space="preserve">
          <source>Minimal Entry Chunk</source>
          <target state="translated">最小入力チャンク</target>
        </trans-unit>
        <trans-unit id="4c9b2f2cc924fdc5ae54de76fd616b11e14910ae" translate="yes" xml:space="preserve">
          <source>Minimal example</source>
          <target state="translated">最小限の例</target>
        </trans-unit>
        <trans-unit id="cbffcdb92559ac9186d82d2c23b42f651fca8808" translate="yes" xml:space="preserve">
          <source>Minimize CSS</source>
          <target state="translated">CSSの最小化</target>
        </trans-unit>
        <trans-unit id="20c5acdf828152e49115784fc07b87c2d883e33d" translate="yes" xml:space="preserve">
          <source>Minimize javascript and switches loaders to minimizing</source>
          <target state="translated">javascriptを最小化し、ローダを最小化するようにスイッチを入れる</target>
        </trans-unit>
        <trans-unit id="a6ffa937e9ecc8d7e999b7abdd2959fc92f51275" translate="yes" xml:space="preserve">
          <source>Minimize the number of items in &lt;code&gt;resolve.modules&lt;/code&gt;, &lt;code&gt;resolve.extensions&lt;/code&gt;, &lt;code&gt;resolve.mainFiles&lt;/code&gt;, &lt;code&gt;resolve.descriptionFiles&lt;/code&gt; as they increase the number of filesystem calls.</source>
          <target state="translated">&lt;code&gt;resolve.modules&lt;/code&gt; 、 &lt;code&gt;resolve.extensions&lt;/code&gt; 、 &lt;code&gt;resolve.mainFiles&lt;/code&gt; 、 &lt;code&gt;resolve.descriptionFiles&lt;/code&gt; の項目の数を最小限に抑えます。これらは、ファイルシステムコールの数を増やすためです。</target>
        </trans-unit>
        <trans-unit id="3f8926d4f7df52b4d4427797a32c9c5b26cde838" translate="yes" xml:space="preserve">
          <source>Minimize the number of items in &lt;code&gt;resolve.modules&lt;/code&gt;, &lt;code&gt;resolve.extensions&lt;/code&gt;, &lt;code&gt;resolve.mainFiles&lt;/code&gt;, &lt;code&gt;resolve.descriptionFiles&lt;/code&gt;, as they increase the number of filesystem calls.</source>
          <target state="translated">ファイルシステム呼び出しの数が増えるため、 &lt;code&gt;resolve.modules&lt;/code&gt; 、 &lt;code&gt;resolve.extensions&lt;/code&gt; 、 &lt;code&gt;resolve.mainFiles&lt;/code&gt; 、 &lt;code&gt;resolve.descriptionFiles&lt;/code&gt; の項目の数を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="8c97536d4a74005bbc859f9f508fe582df2fc09a" translate="yes" xml:space="preserve">
          <source>Minimize the number of preset/plugins</source>
          <target state="translated">プリセット/プラグインの数を最小にする</target>
        </trans-unit>
        <trans-unit id="06e3dae400a146ac9ee6b047a952a5c0082cebd0" translate="yes" xml:space="preserve">
          <source>Minimizes the chunks with &lt;code&gt;uglify.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;uglify.js&lt;/code&gt; でチャンクを最小化します。</target>
        </trans-unit>
        <trans-unit id="4b3525bb3744266dcd052765cb2e967f4f415796" translate="yes" xml:space="preserve">
          <source>Minimizing For Production</source>
          <target state="translated">生産のための最小化</target>
        </trans-unit>
        <trans-unit id="f810335097d91ac6e93fe8a1e2e38603eee5be4f" translate="yes" xml:space="preserve">
          <source>Minimum number of chunks that must share a module before splitting.</source>
          <target state="translated">分割する前にモジュールを共有しなければならないチャンクの最小数。</target>
        </trans-unit>
        <trans-unit id="60cabd1ecf30b7a89543cad33d76871146ea270c" translate="yes" xml:space="preserve">
          <source>Minimum size, in bytes, for a chunk to be generated.</source>
          <target state="translated">生成されるチャンクの最小サイズ (バイト単位)。</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="9ee01a8f4adb7ccb780dcbb703b82c147dd8837e" translate="yes" xml:space="preserve">
          <source>Mode to use</source>
          <target state="translated">使用するモード</target>
        </trans-unit>
        <trans-unit id="e49038ebac8be34038eea485a820fd93f01def3f" translate="yes" xml:space="preserve">
          <source>Mode to use, either &quot;development&quot; or &quot;production&quot;</source>
          <target state="translated">使用するモードは、「開発」または「生産」のいずれかです。</target>
        </trans-unit>
        <trans-unit id="c26cc3dae872232e9a0604d9099b87507b59d66a" translate="yes" xml:space="preserve">
          <source>Mode: development</source>
          <target state="translated">モード:開発</target>
        </trans-unit>
        <trans-unit id="c8c73771af79c4409a259ba6e572fbb79e19d3f6" translate="yes" xml:space="preserve">
          <source>Mode: none</source>
          <target state="translated">モード:なし</target>
        </trans-unit>
        <trans-unit id="bb28adf7bbf9194f1592a3c19f4f63f75be0fca8" translate="yes" xml:space="preserve">
          <source>Mode: production</source>
          <target state="translated">モード:生産</target>
        </trans-unit>
        <trans-unit id="12be477918e3e557f481ef5393ea168e4142eb3c" translate="yes" xml:space="preserve">
          <source>Modernizr</source>
          <target state="translated">Modernizr</target>
        </trans-unit>
        <trans-unit id="79f5b225cffab11e22dc40b6f05abef1d33d1561" translate="yes" xml:space="preserve">
          <source>Modes</source>
          <target state="translated">Modes</target>
        </trans-unit>
        <trans-unit id="4822c7226bb2bbcfff3cd9616657a72a7e9a5988" translate="yes" xml:space="preserve">
          <source>Modify &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="b07b0fa775d0050d5b01788a8d05c9619a09411b" translate="yes" xml:space="preserve">
          <source>Modify filename</source>
          <target state="translated">ファイル名の変更</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="7ee83fed2e8bf53e577b314dd959ae5c55d31275" translate="yes" xml:space="preserve">
          <source>Module API</source>
          <target state="translated">モジュールAPI</target>
        </trans-unit>
        <trans-unit id="b646710f158e4e70a3d65e8db78db8f19e1de68c" translate="yes" xml:space="preserve">
          <source>Module Concatenation also applies. So that these 4 modules plus the entry module (and probably more dependencies) can be concatenated. &lt;strong&gt;&lt;code&gt;index.js&lt;/code&gt; has no code generated in the end&lt;/strong&gt;.</source>
          <target state="translated">モジュールの連結も適用されます。これらの4つのモジュールとエントリモジュール（およびおそらくより多くの依存関係）を連結できるようにします。&lt;strong&gt; &lt;code&gt;index.js&lt;/code&gt; には、最後に生成されたコードはありません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f4adaadd50180c6b35d9ed9d021b97f0ef636e2c" translate="yes" xml:space="preserve">
          <source>Module Contexts</source>
          <target state="translated">モジュールコンテキスト</target>
        </trans-unit>
        <trans-unit id="79664e04507d8c1100019dbeb51f9cb573abd95d" translate="yes" xml:space="preserve">
          <source>Module Definition Systems</source>
          <target state="translated">モジュール定義システム</target>
        </trans-unit>
        <trans-unit id="43378ad6990197335258de6b3ccc8f84184825b8" translate="yes" xml:space="preserve">
          <source>Module Federation</source>
          <target state="translated">モジュールフェデレーション</target>
        </trans-unit>
        <trans-unit id="8204368a794ea2cb8e6559e5661f43a2445c7f87" translate="yes" xml:space="preserve">
          <source>Module Federation YouTube Playlist</source>
          <target state="translated">モジュール連盟YouTubeプレイリスト</target>
        </trans-unit>
        <trans-unit id="fd61fca308543f04ec5078e95c6f6477a1b57472" translate="yes" xml:space="preserve">
          <source>Module Grouping Algorithm</source>
          <target state="translated">モジュールのグルーピングアルゴリズム</target>
        </trans-unit>
        <trans-unit id="8a9d06dd836568efeccdb8afcf254285349fb16b" translate="yes" xml:space="preserve">
          <source>Module ID is a number in webpack (in contrast to NodeJS where it is a string -- the filename).</source>
          <target state="translated">モジュールIDはwebpackの中の数字です(NodeJSが文字列であるのとは対照的に、ファイル名です)。</target>
        </trans-unit>
        <trans-unit id="471a50479d9fbae5891a0e77842ad130c3bc60a2" translate="yes" xml:space="preserve">
          <source>Module ID's type can be a &lt;code&gt;number&lt;/code&gt; or a &lt;code&gt;string&lt;/code&gt; depending on the &lt;a href=&quot;../configuration/optimization#optimizationmoduleids&quot;&gt;&lt;code&gt;optimization.moduleIds&lt;/code&gt;&lt;/a&gt; configuration.</source>
          <target state="translated">モジュールIDのタイプは、&lt;a href=&quot;../configuration/optimization#optimizationmoduleids&quot;&gt; &lt;code&gt;optimization.moduleIds&lt;/code&gt; &lt;/a&gt;構成に応じて、 &lt;code&gt;number&lt;/code&gt; または &lt;code&gt;string&lt;/code&gt; することができます。</target>
        </trans-unit>
        <trans-unit id="410f8eb19b4a638554cd700e8ba88f0ef130c290" translate="yes" xml:space="preserve">
          <source>Module Identifiers</source>
          <target state="translated">モジュール識別子</target>
        </trans-unit>
        <trans-unit id="b3c0d8ccd032afe728bc7677d8f1b82146252c2e" translate="yes" xml:space="preserve">
          <source>Module Methods</source>
          <target state="translated">モジュールメソッド</target>
        </trans-unit>
        <trans-unit id="ecd286e5b576aa168a3e80ebd6b8b9bef1e63dc4" translate="yes" xml:space="preserve">
          <source>Module Methods: export</source>
          <target state="translated">モジュールメソッド:エクスポート</target>
        </trans-unit>
        <trans-unit id="945e0c3613d86df1ee95a47f2c0475a9e0e17749" translate="yes" xml:space="preserve">
          <source>Module Methods: import</source>
          <target state="translated">モジュールメソッド:import</target>
        </trans-unit>
        <trans-unit id="0d57150cecad5465f78b64ad698220c2e9229222" translate="yes" xml:space="preserve">
          <source>Module Methods: import()</source>
          <target state="translated">モジュールメソッド:import()</target>
        </trans-unit>
        <trans-unit id="9640648ce09230d5d92af45be6406d0ee61c2db2" translate="yes" xml:space="preserve">
          <source>Module Methods: require</source>
          <target state="translated">モジュールメソッド:require</target>
        </trans-unit>
        <trans-unit id="abcaa7bd7f40b253308bbd0709b1d33e3a8d639d" translate="yes" xml:space="preserve">
          <source>Module Methods: require.cache</source>
          <target state="translated">モジュールメソッド:require.cache</target>
        </trans-unit>
        <trans-unit id="50b49ca3cff4218a18f3ff873b9927756ddb4009" translate="yes" xml:space="preserve">
          <source>Module Methods: require.context</source>
          <target state="translated">モジュールメソッド:require.context</target>
        </trans-unit>
        <trans-unit id="3623f20eabc51ba424dcb8e7cf729bdf14a91263" translate="yes" xml:space="preserve">
          <source>Module Methods: require.ensure</source>
          <target state="translated">モジュールメソッド:require.secure</target>
        </trans-unit>
        <trans-unit id="ba82f440989dc3a33ec2656360dff40b1815eed5" translate="yes" xml:space="preserve">
          <source>Module Methods: require.include</source>
          <target state="translated">モジュールメソッド:require.include</target>
        </trans-unit>
        <trans-unit id="1245c5418d703043405edcc532ff2cbceebb869d" translate="yes" xml:space="preserve">
          <source>Module Methods: require.resolve</source>
          <target state="translated">モジュールメソッド:require.resolve</target>
        </trans-unit>
        <trans-unit id="f109203fd3ac3a8580ea8b9542e1cafa496e5d73" translate="yes" xml:space="preserve">
          <source>Module Methods: require.resolveWeak</source>
          <target state="translated">モジュールメソッド:require.resolveWeak</target>
        </trans-unit>
        <trans-unit id="b5e362a11fb712a29a6a7c3e785bb6ff30aa5eae" translate="yes" xml:space="preserve">
          <source>Module Objects</source>
          <target state="translated">モジュールオブジェクト</target>
        </trans-unit>
        <trans-unit id="15d7561ef70bec9f7ca7c6066aca420c78fe0cbf" translate="yes" xml:space="preserve">
          <source>Module Options</source>
          <target state="translated">モジュールオプション</target>
        </trans-unit>
        <trans-unit id="288e4a8c6676ea4eb83392ffcf2395bf08c232ab" translate="yes" xml:space="preserve">
          <source>Module Resolution</source>
          <target state="translated">モジュールの解像度</target>
        </trans-unit>
        <trans-unit id="be778ece53ab9c5d58fb887a3aea4ee7cb771a1b" translate="yes" xml:space="preserve">
          <source>Module Variables</source>
          <target state="translated">モジュール変数</target>
        </trans-unit>
        <trans-unit id="ce0ddf2557a4c8392f5626e1536ebc449604872d" translate="yes" xml:space="preserve">
          <source>Module and Chunk information</source>
          <target state="translated">モジュールとチャンク情報</target>
        </trans-unit>
        <trans-unit id="d14e420dd26410ed804a420f2a1a3311b5e89311" translate="yes" xml:space="preserve">
          <source>Module loaders can be chained. Each loader in the chain applies transformations to the processed resource. A chain is executed in reverse order. The first loader passes its result (resource with applied transformations) to the next one, and so forth. Finally, webpack expects JavaScript to be returned by the last loader in the chain.</source>
          <target state="translated">モジュールローダーは連鎖させることができます。チェーン内の各ローダは、処理されたリソースに変換を適用します。チェーンは逆順に実行されます。最初のローダーはその結果 (変換を適用したリソース)を次のローダーに渡します。最後に、webpack は JavaScript がチェーン内の最後のローダーによって返されることを期待します。</target>
        </trans-unit>
        <trans-unit id="fcb0e5932cf3bd36e4da09bd5f327d6bd14f174c" translate="yes" xml:space="preserve">
          <source>Module names are hashed into small numeric values.</source>
          <target state="translated">モジュール名は小さな数値にハッシュ化されます。</target>
        </trans-unit>
        <trans-unit id="c7e1fc9a33becfe3c9b761e74ed828d7c64ecc1a" translate="yes" xml:space="preserve">
          <source>Module paths</source>
          <target state="translated">モジュールパス</target>
        </trans-unit>
        <trans-unit id="c4b27dc35a86c4ced295147d986884bc2abd55cf" translate="yes" xml:space="preserve">
          <source>Module proof library.</source>
          <target state="translated">モジュールプルーフライブラリ。</target>
        </trans-unit>
        <trans-unit id="19faa7f6d4eb5a774076d466ac8eb4fd017c1f43" translate="yes" xml:space="preserve">
          <source>Module request</source>
          <target state="translated">モジュール要求</target>
        </trans-unit>
        <trans-unit id="c3de759bd2bd5a702bb8b6648d1223097f812b3e" translate="yes" xml:space="preserve">
          <source>Module requests in shared:</source>
          <target state="translated">共有されているモジュールのリクエスト。</target>
        </trans-unit>
        <trans-unit id="9566babfeec0cbd65144281e6c12569d5ca92e82" translate="yes" xml:space="preserve">
          <source>Module requests with trailing &lt;code&gt;/&lt;/code&gt; in shared will match all module requests with this prefix.</source>
          <target state="translated">末尾 &lt;code&gt;/&lt;/code&gt; 共有のモジュール要求は、このプレフィックスを持つすべてのモジュール要求と一致します。</target>
        </trans-unit>
        <trans-unit id="c778ecf88b04fc7e521411638a1b843652b456c7" translate="yes" xml:space="preserve">
          <source>ModuleConcatenationPlugin</source>
          <target state="translated">ModuleConcatenationPlugin</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="cb2bca09fe58c99a48713d7ecdb369a58396da80" translate="yes" xml:space="preserve">
          <source>Modules are searched for inside all directories specified in &lt;a href=&quot;../configuration/resolve#resolve-modules&quot;&gt;&lt;code&gt;resolve.modules&lt;/code&gt;&lt;/a&gt;. You can replace the original module path by an alternate path by creating an alias for it using &lt;a href=&quot;../configuration/resolve#resolve-alias&quot;&gt;&lt;code&gt;resolve.alias&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">モジュールは、&lt;a href=&quot;../configuration/resolve#resolve-modules&quot;&gt; &lt;code&gt;resolve.modules&lt;/code&gt; で&lt;/a&gt;指定されたすべてのディレクトリ内で検索されます。&lt;a href=&quot;../configuration/resolve#resolve-alias&quot;&gt; &lt;code&gt;resolve.alias&lt;/code&gt; &lt;/a&gt;構成オプションを使用してエイリアスを作成することにより、元のモジュールパスを代替パスに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="16d6fba6b0bedb48cbb1415276d6c585d1e5edc4" translate="yes" xml:space="preserve">
          <source>Modules are searched for inside all directories specified in &lt;a href=&quot;../configuration/resolve#resolvemodules&quot;&gt;&lt;code&gt;resolve.modules&lt;/code&gt;&lt;/a&gt;. You can replace the original module path by an alternate path by creating an alias for it using the &lt;a href=&quot;../configuration/resolve#resolvealias&quot;&gt;&lt;code&gt;resolve.alias&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">モジュールは、&lt;a href=&quot;../configuration/resolve#resolvemodules&quot;&gt; &lt;code&gt;resolve.modules&lt;/code&gt; で&lt;/a&gt;指定されたすべてのディレクトリ内で検索されます。&lt;a href=&quot;../configuration/resolve#resolvealias&quot;&gt; &lt;code&gt;resolve.alias&lt;/code&gt; &lt;/a&gt;構成オプションを使用してエイリアスを作成することにより、元のモジュールパスを代替パスに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="ec16722362e1438cf1ffdf48e33b168fc8353eff" translate="yes" xml:space="preserve">
          <source>Modules that are included in every parent chunk are removed from the chunk.</source>
          <target state="translated">すべての親チャンクに含まれるモジュールはチャンクから削除されます。</target>
        </trans-unit>
        <trans-unit id="dc0e90da593346f66fc7676c144617eafa287ccf" translate="yes" xml:space="preserve">
          <source>More &lt;a href=&quot;#examples&quot;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">その他の&lt;a href=&quot;#examples&quot;&gt; &lt;code&gt;examples&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65607507695dbb68853f7200e33956e39fd6a15d" translate="yes" xml:space="preserve">
          <source>More Examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="aecacc578fafc86000f18d7278b20350137419df" translate="yes" xml:space="preserve">
          <source>More information about the &lt;code&gt;ignoreWarnings&lt;/code&gt; option can be found &lt;a href=&quot;../configuration/other-options#ignorewarnings&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;ignoreWarnings&lt;/code&gt; オプションの詳細については、&lt;a href=&quot;../configuration/other-options#ignorewarnings&quot;&gt;こちらをご覧ください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="70522f34120a549e2600e547c248ca78f144af63" translate="yes" xml:space="preserve">
          <source>More information and examples &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">詳細と例は&lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;こちら&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="979e421e3c8ef44e0883aba3714dcb57450f1e48" translate="yes" xml:space="preserve">
          <source>More likely you will be disrupted by this second issue. It is natural to expect relative references to be resolved against the &lt;code&gt;.scss&lt;/code&gt; file in which they are specified (like in regular &lt;code&gt;.css&lt;/code&gt; files). Thankfully there are a two solutions to this problem:</source>
          <target state="translated">この2番目の問題によって混乱する可能性が高くなります。相対参照は、それらが指定されている &lt;code&gt;.scss&lt;/code&gt; ファイル（通常の &lt;code&gt;.css&lt;/code&gt; ファイルなど）に対して解決されることを期待するのが自然です。ありがたいことに、この問題には2つの解決策があります。</target>
        </trans-unit>
        <trans-unit id="2c01f4257ff180535de3f5b45fd1bee6f7933c67" translate="yes" xml:space="preserve">
          <source>Most tools get the ESM version. Node.js is an exception here. It gets a CommonJs version when using &lt;code&gt;require()&lt;/code&gt;. This will lead to two instances of these package when referencing it with &lt;code&gt;require()&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt;, but that doesn't hurt as the package doesn't have state.</source>
          <target state="translated">ほとんどのツールはESMバージョンを取得します。Node.jsはここでは例外です。 &lt;code&gt;require()&lt;/code&gt; を使用すると、CommonJsバージョンを取得します。これにより、 &lt;code&gt;require()&lt;/code&gt; と &lt;code&gt;import&lt;/code&gt; で参照すると、これらのパッケージの2つのインスタンスが発生しますが、パッケージに状態がないため、問題はありません。</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">Motivation</target>
        </trans-unit>
        <trans-unit id="b9e79b0fb30bd5b519b2cc3654c5e8b6ad96cbc3" translate="yes" xml:space="preserve">
          <source>Move common modules into the parent chunk</source>
          <target state="translated">共通モジュールを親チャンクに移動する</target>
        </trans-unit>
        <trans-unit id="32cd6988ffa7e6963a92d2c5062e0af6c93ddf04" translate="yes" xml:space="preserve">
          <source>Moved to &lt;a href=&quot;#managedpaths&quot;&gt;snapshot.managedPaths&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#managedpaths&quot;&gt;snapshot.managedPathsに&lt;/a&gt;移動しました</target>
        </trans-unit>
        <trans-unit id="14d62d3acc8060c89746323fa3392fffb7aa3569" translate="yes" xml:space="preserve">
          <source>Multi Page Application</source>
          <target state="translated">マルチページアプリケーション</target>
        </trans-unit>
        <trans-unit id="51244434835571b55673043584edfd8145243326" translate="yes" xml:space="preserve">
          <source>MultiCompiler</source>
          <target state="translated">MultiCompiler</target>
        </trans-unit>
        <trans-unit id="af261911aa86e4785c88244cbcfad54e0b65d198" translate="yes" xml:space="preserve">
          <source>MultiEntryPlugin</source>
          <target state="translated">MultiEntryPlugin</target>
        </trans-unit>
        <trans-unit id="31bec9db1d695359396d3a884e25be81f75fa5c4" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;DllPlugins&lt;/code&gt; and multiple &lt;code&gt;DllReferencePlugins&lt;/code&gt;.</source>
          <target state="translated">複数の &lt;code&gt;DllPlugins&lt;/code&gt; および複数の &lt;code&gt;DllReferencePlugins&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7d0845e7fa07727d2f4c51ad7c374c8efded058" translate="yes" xml:space="preserve">
          <source>Multiple Common Chunks</source>
          <target state="translated">複数の共通チャンク</target>
        </trans-unit>
        <trans-unit id="70919a073b717374fafc07a125e1979358461434" translate="yes" xml:space="preserve">
          <source>Multiple Compilations</source>
          <target state="translated">複数のコンパイル</target>
        </trans-unit>
        <trans-unit id="33e334d48711f0b0422dd14c11adb7d2e27859ad" translate="yes" xml:space="preserve">
          <source>Multiple Entry Points</source>
          <target state="translated">複数のエントリーポイント</target>
        </trans-unit>
        <trans-unit id="d0254d4ee6b52c76a42b92fe63abfae1fba4ee5e" translate="yes" xml:space="preserve">
          <source>Multiple Entry Points with Commons Chunk</source>
          <target state="translated">コモンズチャンクを使った複数のエントリーポイント</target>
        </trans-unit>
        <trans-unit id="9f602c068fcc7878bf5f40d9c133c2474881e45a" translate="yes" xml:space="preserve">
          <source>Multiple Instances</source>
          <target state="translated">複数のインスタンス</target>
        </trans-unit>
        <trans-unit id="074fe87b70c09f5b65ca99d9e5bdd7e02086a9ed" translate="yes" xml:space="preserve">
          <source>Multiple Output Languages</source>
          <target state="translated">複数の出力言語</target>
        </trans-unit>
        <trans-unit id="52629750e553b3ad6a766ef3b9111c449d4aef13" translate="yes" xml:space="preserve">
          <source>Multiple Targets</source>
          <target state="translated">複数のターゲット</target>
        </trans-unit>
        <trans-unit id="7af4468c4f3ebf1ae604743e81c25292dbff7615" translate="yes" xml:space="preserve">
          <source>Multiple callbacks can be added. They will be executed in the order of addition.</source>
          <target state="translated">複数のコールバックを追加することができます。追加した順に実行されます。</target>
        </trans-unit>
        <trans-unit id="8e64779794799dba0693b7d9156859c1a67af6a8" translate="yes" xml:space="preserve">
          <source>Multiple compressed versions of assets for different algorithm</source>
          <target state="translated">異なるアルゴリズムに対応した複数の圧縮バージョンのアセット</target>
        </trans-unit>
        <trans-unit id="f32a7f7893816cdc2e78105a9f31fd95e5aa5e86" translate="yes" xml:space="preserve">
          <source>Multiple configurations will &lt;strong&gt;not be run in parallel&lt;/strong&gt;. Each configuration is only processed after the previous one has finished processing. To process them in parallel, you can use a third-party solution like &lt;a href=&quot;https://www.npmjs.com/package/parallel-webpack&quot;&gt;parallel-webpack&lt;/a&gt;.</source>
          <target state="translated">複数の構成が&lt;strong&gt;並行して実行されること&lt;/strong&gt;はあり&lt;strong&gt;ません&lt;/strong&gt;。各構成は、前の構成が処理を完了した後にのみ処理されます。それらを並行して処理するには、&lt;a href=&quot;https://www.npmjs.com/package/parallel-webpack&quot;&gt;parallel-webpack&lt;/a&gt;などのサードパーティのソリューションを使用できます。</target>
        </trans-unit>
        <trans-unit id="0f0d561fb483e8f39bc1167c92ff7be77ecdb9b1" translate="yes" xml:space="preserve">
          <source>Multiple file types per entry</source>
          <target state="translated">エントリごとに複数のファイルタイプ</target>
        </trans-unit>
        <trans-unit id="d81a1d105716cb263dbe1b2bcae71f3051d276df" translate="yes" xml:space="preserve">
          <source>Multiple requires of the same module result in only one module execution and only one export. Therefore a cache in the runtime exists. Removing values from this cache causes new module execution and a new export.</source>
          <target state="translated">同じモジュールの複数の要求は、1つのモジュールの実行と1つのエクスポートにしかなりません。そのため、ランタイム内にキャッシュが存在します。このキャッシュから値を削除すると、新しいモジュールが実行され、新しいエクスポートが行われます。</target>
        </trans-unit>
        <trans-unit id="a940006e1d223c8e4389d42329fa987d078d3a15" translate="yes" xml:space="preserve">
          <source>Multiple requires to the same module result in only one module execution and only one export. Therefore a cache in the runtime exists. Removing values from this cache cause new module execution and a new export.</source>
          <target state="translated">同じモジュールへの複数の要求は、1つのモジュールの実行と1つのエクスポートにしかなりません。そのため、ランタイム内にキャッシュが存在します。このキャッシュから値を削除すると、新しいモジュールの実行と新しいエクスポートが発生します。</target>
        </trans-unit>
        <trans-unit id="ef4711aaf3e1de533c5916f2318f8a44b1e8bee7" translate="yes" xml:space="preserve">
          <source>Multiple separate builds should form a single application. These separate builds should not have dependencies between each other, so they can be developed and deployed individually.</source>
          <target state="translated">複数の別々のビルドが一つのアプリケーションを形成している必要があります。これらの別々のビルドはお互いに依存関係を持たないようにすべきで、個別に開発してデプロイすることができます。</target>
        </trans-unit>
        <trans-unit id="a58c3aebae89adf1783eda829ec1aa946f07d85a" translate="yes" xml:space="preserve">
          <source>Multiple values</source>
          <target state="translated">複数の値</target>
        </trans-unit>
        <trans-unit id="e6aabb6231f5fbabca099e4a40902fa7f067fa46" translate="yes" xml:space="preserve">
          <source>Multiple values are separated by comma &lt;code&gt;,&lt;/code&gt;:</source>
          <target state="translated">複数の値はコンマ &lt;code&gt;,&lt;/code&gt; 区切られます：</target>
        </trans-unit>
        <trans-unit id="1b6c0dee98a89366fdcbfe05541aac72db6bd774" translate="yes" xml:space="preserve">
          <source>NPM Scripts</source>
          <target state="translated">NPM スクリプト</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="2fe190513dc5fb4be8606e06fb2fa0282d381d10" translate="yes" xml:space="preserve">
          <source>Name for the cache. Different names will lead to different coexisting caches. Defaults to &lt;code&gt;${config.name}-${config.mode}&lt;/code&gt;. Using &lt;code&gt;cache.name&lt;/code&gt; makes sense when you have multiple configurations which should have independent caches.</source>
          <target state="translated">キャッシュの名前。名前が異なると、共存するキャッシュも異なります。デフォルトは &lt;code&gt;${config.name}-${config.mode}&lt;/code&gt; です。 &lt;code&gt;cache.name&lt;/code&gt; を使用することは、独立したキャッシュを持つ必要がある複数の構成がある場合に意味があります。</target>
        </trans-unit>
        <trans-unit id="eab392df02227f5ad3cb6358e14f9a92174d6852" translate="yes" xml:space="preserve">
          <source>Name of global coverage variable</source>
          <target state="translated">グローバルカバレッジ変数の名前</target>
        </trans-unit>
        <trans-unit id="7e1a44922703aaf3623955916847b597113ab53b" translate="yes" xml:space="preserve">
          <source>Name of the config to use</source>
          <target state="translated">使用する設定名</target>
        </trans-unit>
        <trans-unit id="b7bf5a539760602c09ecd1bd214b71e58ad411d4" translate="yes" xml:space="preserve">
          <source>Name of the configuration to use</source>
          <target state="translated">使用する設定の名前</target>
        </trans-unit>
        <trans-unit id="f30498404f874c12104c3113ab4953a15aad64f2" translate="yes" xml:space="preserve">
          <source>Name of the configuration. Used when loading multiple configurations</source>
          <target state="translated">構成の名前。複数の設定を読み込むときに使用します。</target>
        </trans-unit>
        <trans-unit id="a9a7931127e1910a3873ee4c1d6b374592c79a90" translate="yes" xml:space="preserve">
          <source>Name of the configuration. Used when loading multiple configurations.</source>
          <target state="translated">設定の名前。複数の設定を読み込む場合に使用します。</target>
        </trans-unit>
        <trans-unit id="9d44691a48dbbbf5f47f7a24dd531d771b3f214c" translate="yes" xml:space="preserve">
          <source>Name of the result file. May contain &lt;code&gt;[name]&lt;/code&gt;, &lt;code&gt;[id]&lt;/code&gt; and &lt;code&gt;[contenthash]&lt;/code&gt;</source>
          <target state="translated">結果ファイルの名前。含まれていてもよい &lt;code&gt;[name]&lt;/code&gt; 、 &lt;code&gt;[id]&lt;/code&gt; と &lt;code&gt;[contenthash]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88f2f30ba49708ae97f8d92b8a8a72e7ddff53df" translate="yes" xml:space="preserve">
          <source>Named Exports</source>
          <target state="translated">名目輸出</target>
        </trans-unit>
        <trans-unit id="2b7c08c3ab75f37e2da656c1aab228f5f3a793b1" translate="yes" xml:space="preserve">
          <source>Names</source>
          <target state="translated">Names</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="3f00f6db4253d512042a42d232fed179ec641838" translate="yes" xml:space="preserve">
          <source>Need to find up to date examples of these webpack targets being used in live code or boilerplates.</source>
          <target state="translated">これらの webpack ターゲットがライブコードやボイラープレートで使用されている最新の例を見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="d628bf62008786841d73ec8667ca991353d4c476" translate="yes" xml:space="preserve">
          <source>Negated Flags</source>
          <target state="translated">否定されたフラグ</target>
        </trans-unit>
        <trans-unit id="84d29c136b7823e0b84ef5144085552dadbb118f" translate="yes" xml:space="preserve">
          <source>Neither &lt;code&gt;import&lt;/code&gt; nor &lt;code&gt;export&lt;/code&gt; is available</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; も &lt;code&gt;export&lt;/code&gt; もできません</target>
        </trans-unit>
        <trans-unit id="f0b610f173b363c6d397168ae6e235e8c6ca1741" translate="yes" xml:space="preserve">
          <source>Nested rules</source>
          <target state="translated">入れ子になったルール</target>
        </trans-unit>
        <trans-unit id="9bc81968c8a5c717216ba60c9fa6a03c720c9f2d" translate="yes" xml:space="preserve">
          <source>Nested rules can be specified under the properties &lt;a href=&quot;#rule-rules&quot;&gt;&lt;code&gt;rules&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#rule-oneof&quot;&gt;&lt;code&gt;oneOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ネストされたルールは、プロパティ&lt;a href=&quot;#rule-rules&quot;&gt; &lt;code&gt;rules&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#rule-oneof&quot;&gt; &lt;code&gt;oneOf&lt;/code&gt; &lt;/a&gt;で指定できます。</target>
        </trans-unit>
        <trans-unit id="ed50f3cfbdfe9128da4e446fe212a92e3c38ab93" translate="yes" xml:space="preserve">
          <source>Nested rules can be specified under the properties &lt;a href=&quot;#rulerules&quot;&gt;&lt;code&gt;rules&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ruleoneof&quot;&gt;&lt;code&gt;oneOf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ネストされたルールは、プロパティ&lt;a href=&quot;#rulerules&quot;&gt; &lt;code&gt;rules&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#ruleoneof&quot;&gt; &lt;code&gt;oneOf&lt;/code&gt; &lt;/a&gt;で指定できます。</target>
        </trans-unit>
        <trans-unit id="6430e6ba2eca0f752109cbeff222419b7cdd6a00" translate="yes" xml:space="preserve">
          <source>Never provide different APIs or semantics for different conditions.</source>
          <target state="translated">条件の異なるAPIやセマンティクスを提供してはいけません。</target>
        </trans-unit>
        <trans-unit id="00907d2f7ec21d6725161c6f37cc92464bd4d1ae" translate="yes" xml:space="preserve">
          <source>New chunk can be shared OR modules are from the &lt;code&gt;node_modules&lt;/code&gt; folder</source>
          <target state="translated">新しいチャンクを共有できるか、モジュールが &lt;code&gt;node_modules&lt;/code&gt; フォルダーにある</target>
        </trans-unit>
        <trans-unit id="9f427faf928378120c80ebfa35762eaf54d8aad2" translate="yes" xml:space="preserve">
          <source>New chunk would be bigger than 20kb (before min+gz)</source>
          <target state="translated">新しいチャンクは20kbよりも大きくなります(min+gz以前)。</target>
        </trans-unit>
        <trans-unit id="86c73a39bd8e318e6fcb6fcbe6773a9ca427f4e5" translate="yes" xml:space="preserve">
          <source>New chunk would be bigger than 30kb (before min+gz)</source>
          <target state="translated">新しいチャンクは30kbよりも大きくなります(min+gz以前)。</target>
        </trans-unit>
        <trans-unit id="571fead9fa6a14ef560201d8a4e1dd845f9c7248" translate="yes" xml:space="preserve">
          <source>New to webpack? Check out our guide to some of webpack's &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;core concepts&lt;/a&gt; to get started!</source>
          <target state="translated">Webpackは初めてですか？開始するには、webpackの&lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;コアコンセプト&lt;/a&gt;のガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="6a3128d5f090a6c16b2185917486ee462fd298bd" translate="yes" xml:space="preserve">
          <source>Next guide</source>
          <target state="translated">次のガイド</target>
        </trans-unit>
        <trans-unit id="5dc6891fdd39c9b29837e7de49331ca036b6b993" translate="yes" xml:space="preserve">
          <source>Next, install &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;webpack-dev-server&lt;/code&gt; in your project;</source>
          <target state="translated">次に、プロジェクトに &lt;code&gt;webpack&lt;/code&gt; と &lt;code&gt;webpack-dev-server&lt;/code&gt; をインストールします。</target>
        </trans-unit>
        <trans-unit id="33f0138c6fc828d4afddc3fc8af24ccc31c883b9" translate="yes" xml:space="preserve">
          <source>Next, install webpack and webpack-dev-server in your project;</source>
          <target state="translated">次に、プロジェクトにwebpackとwebpack-dev-serverをインストールします。</target>
        </trans-unit>
        <trans-unit id="4fb574714b149672d840ad6cb312f36fb2ba2fda" translate="yes" xml:space="preserve">
          <source>No CommonJS allowed, for example, you can't use &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;module.exports&lt;/code&gt; or &lt;code&gt;exports&lt;/code&gt;</source>
          <target state="translated">CommonJSは許可されていません。たとえば、 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;module.exports&lt;/code&gt; 、または &lt;code&gt;exports&lt;/code&gt; は使用できません。</target>
        </trans-unit>
        <trans-unit id="804c2c8ab9ef0272963f533f9dfd8b2e19c9dd60" translate="yes" xml:space="preserve">
          <source>No Hot Module Replacement</source>
          <target state="translated">ホットモジュール交換なし</target>
        </trans-unit>
        <trans-unit id="5bc47d91d609ef5c45bef5028203b34749457ba8" translate="yes" xml:space="preserve">
          <source>No additional options required on the &lt;code&gt;postcss-loader&lt;/code&gt; side. To make them work properly, either add the &lt;code&gt;css-loader&lt;/code&gt;&amp;rsquo;s &lt;code&gt;importLoaders&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;postcss-loader&lt;/code&gt; 側に追加のオプションは必要ありません。それらを正しく機能させるには、 &lt;code&gt;css-loader&lt;/code&gt; の &lt;code&gt;importLoaders&lt;/code&gt; オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="ee59db2039b1fa34759ff51a5830d5e56fce1a5a" translate="yes" xml:space="preserve">
          <source>No devtooling should be included.</source>
          <target state="translated">devtoolingは含まれていないはずです。</target>
        </trans-unit>
        <trans-unit id="af837962cb7659664d3ba4b0e86a956a19477f2f" translate="yes" xml:space="preserve">
          <source>No duplicate compilation (performance)</source>
          <target state="translated">重複コンパイルなし(パフォーマンス)</target>
        </trans-unit>
        <trans-unit id="f70b38d79e57a2e98ad3b37d8bff4f55372cb23e" translate="yes" xml:space="preserve">
          <source>No hint warnings or errors are shown.</source>
          <target state="translated">ヒントの警告やエラーは表示されません。</target>
        </trans-unit>
        <trans-unit id="2f7e326b06ee31b812a51e928faca53522e0e814" translate="yes" xml:space="preserve">
          <source>No options for loader.</source>
          <target state="translated">ローダーのオプションはありません。</target>
        </trans-unit>
        <trans-unit id="8104f56c0ada9376364e684058a3d77044c3bb13" translate="yes" xml:space="preserve">
          <source>No runtime public path modification</source>
          <target state="translated">実行時のパブリックパスの変更はありません。</target>
        </trans-unit>
        <trans-unit id="ebc046e475dd358e850aac51c226f01e448c129e" translate="yes" xml:space="preserve">
          <source>NoEmitOnErrorsPlugin</source>
          <target state="translated">NoEmitOnErrorsPlugin</target>
        </trans-unit>
        <trans-unit id="90f576dec2e189b6269427581c1778c8eee5e26c" translate="yes" xml:space="preserve">
          <source>NoErrorsPlugin</source>
          <target state="translated">NoErrorsPlugin</target>
        </trans-unit>
        <trans-unit id="b906849891db9257c38231dc0326e872f2c1954f" translate="yes" xml:space="preserve">
          <source>NoHotModuleReplacementPlugin</source>
          <target state="translated">NoHotModuleReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="b4a14d1c7daa5e3aed6a02f994a61d4a7af7497f" translate="yes" xml:space="preserve">
          <source>Node 10.16.0 and later has &lt;a href=&quot;https://nodejs.org/api/zlib.html#zlib_zlib_createbrotlicompress_options&quot;&gt;native support&lt;/a&gt; for Brotli compression in its zlib module.</source>
          <target state="translated">ノード10.16.0以降では、zlibモジュールでBrotli圧縮が&lt;a href=&quot;https://nodejs.org/api/zlib.html#zlib_zlib_createbrotlicompress_options&quot;&gt;ネイティブでサポート&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="850fae31c96276a74dcd3f2dd75d52f10ee5355f" translate="yes" xml:space="preserve">
          <source>Node API</source>
          <target state="translated">ノードエーピーアイ</target>
        </trans-unit>
        <trans-unit id="d0564fdb4244508c08aeaa8927f1c092e11b3e3d" translate="yes" xml:space="preserve">
          <source>Node Built-Ins</source>
          <target state="translated">ノードの組み込み</target>
        </trans-unit>
        <trans-unit id="fd6dab3668cffeb48fcc1d10a52beb549df45fe7" translate="yes" xml:space="preserve">
          <source>Node Interface</source>
          <target state="translated">ノードインタフェース</target>
        </trans-unit>
        <trans-unit id="a0e630bed791b33794053f86df1a1211214699df" translate="yes" xml:space="preserve">
          <source>Node built-ins, like &lt;code&gt;process&lt;/code&gt;, can be polyfilled right directly from your configuration file without the use of any special loaders or plugins. See the &lt;a href=&quot;../configuration/node&quot;&gt;node configuration page&lt;/a&gt; for more information and examples.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; のようなノードの組み込みは、特別なローダーやプラグインを使用せずに、構成ファイルから直接ポリフィルすることができます。詳細と例については、&lt;a href=&quot;../configuration/node&quot;&gt;ノード構成ページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fc6ce541a53b0a46f3bd7b6f35f64b0c4a5a02ed" translate="yes" xml:space="preserve">
          <source>Node-Zopfli plugin for Webpack.</source>
          <target state="translated">Webpack用のNode-Zopfliプラグイン。</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="8b8214b8e226c143da7ac208d7ccfff6ed28e492" translate="yes" xml:space="preserve">
          <source>Node.js API</source>
          <target state="translated">Node.js API</target>
        </trans-unit>
        <trans-unit id="87071e07a65768f326680b05ba31e7a4f6cc3cf6" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.hasErrors()</source>
          <target state="translated">Node.js API:stats.hasErrors()</target>
        </trans-unit>
        <trans-unit id="a6f76c4d171ff100d2d8598052b88a576d19f91e" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.hasWarnings()</source>
          <target state="translated">Node.js API:stats.hasWarnings()</target>
        </trans-unit>
        <trans-unit id="874db793cb9663801ec056096724681c755baa5d" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.toJson()</source>
          <target state="translated">Node.js API:stats.toJson()</target>
        </trans-unit>
        <trans-unit id="e82fa7cdc3d0c984d0e77dd15e9c0a25db6f0303" translate="yes" xml:space="preserve">
          <source>Node.js API: stats.toString()</source>
          <target state="translated">Node.js API:stats.toString()</target>
        </trans-unit>
        <trans-unit id="33337a2400bf85cb9c9403498611758b81bc19d8" translate="yes" xml:space="preserve">
          <source>Node.js API: webpack()</source>
          <target state="translated">Node.js API:webpack()</target>
        </trans-unit>
        <trans-unit id="0dc2614c3f82904fc30cf2ab7f01d80f39e0a4f3" translate="yes" xml:space="preserve">
          <source>Node.js Version</source>
          <target state="translated">Node.jsのバージョン</target>
        </trans-unit>
        <trans-unit id="3ec4ba3870817026eeb522fa388342c010a965a8" translate="yes" xml:space="preserve">
          <source>Node.js Versions 8.9.10-9.11.1</source>
          <target state="translated">Node.js バージョン 8.9.10-9.11.1</target>
        </trans-unit>
        <trans-unit id="dc83b71e88de4ff5f1440e6fa73b94999dbaddc0" translate="yes" xml:space="preserve">
          <source>Node.js allows to detection production/development mode at runtime via &lt;code&gt;process.env.NODE_ENV&lt;/code&gt;, so we use that as fallback in Node.js. Sync conditional importing ESM is not possible and we don't want to load the package twice, so we have to use CommonJs for the runtime detection.</source>
          <target state="translated">Node.jsでは、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を介して実行時に本番/開発モードを検出できるため、Node.jsのフォールバックとして使用します。同期条件付きインポートESMは不可能であり、パッケージを2回ロードしたくないため、ランタイム検出にCommonJを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fef636983e0aece722046e6acc0075f8581f6b03" translate="yes" xml:space="preserve">
          <source>Node.js established a way of explicitly setting the module type of files by using a property in the &lt;code&gt;package.json&lt;/code&gt;. Setting &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; in a package.json does force all files below this package.json to be ECMAScript Modules. Setting &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; will instead force them to be CommonJS Modules.</source>
          <target state="translated">Node.jsは、 &lt;code&gt;package.json&lt;/code&gt; のプロパティを使用して、ファイルのモジュールタイプを明示的に設定する方法を確立しました。package.jsonで &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; を設定すると、このpackage.jsonの下にあるすべてのファイルがECMAScriptモジュールになります。 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 設定：「commonjs」は、代わりにそれらをCommonJSモジュールにするように強制します。</target>
        </trans-unit>
        <trans-unit id="8b6e57f0637f7555f24bbcac81965e8f1f7ed333" translate="yes" xml:space="preserve">
          <source>Node.js has supported modular programming almost since its inception. On the web, however, support for &lt;em&gt;modules&lt;/em&gt; has been slow to arrive. Multiple tools exist that support modular JavaScript on the web, with a variety of benefits and limitations. webpack builds on lessons learned from these systems and applies the concept of &lt;em&gt;modules&lt;/em&gt; to any file in your project.</source>
          <target state="translated">Node.jsは、当初からモジュール式プログラミングをサポートしてきました。ただし、Webでは、&lt;em&gt;モジュールの&lt;/em&gt;サポートの実現に時間がかかりました。WebでモジュラーJavaScriptをサポートする複数のツールが存在し、さまざまな利点と制限があります。webpackは、これらのシステムから学んだ教訓に基づいて構築され、&lt;em&gt;モジュール&lt;/em&gt;の概念をプロジェクト内の任意のファイルに適用します。</target>
        </trans-unit>
        <trans-unit id="6ae2e38b7821fa717a5aa645014a1bdf10f0f239" translate="yes" xml:space="preserve">
          <source>NodeEnvironmentPlugin</source>
          <target state="translated">NodeEnvironmentPlugin</target>
        </trans-unit>
        <trans-unit id="92be2ff0932240f7b34b5c49458059cf598eee7c" translate="yes" xml:space="preserve">
          <source>NodeSourcePlugin</source>
          <target state="translated">NodeSourcePlugin</target>
        </trans-unit>
        <trans-unit id="ae8bec24f2ee247b94044a1b6ff74699e6f4b135" translate="yes" xml:space="preserve">
          <source>NodeStuffPlugin</source>
          <target state="translated">NodeStuffPlugin</target>
        </trans-unit>
        <trans-unit id="214d0b567fb66dc03b30346846a5d3c25f4e31d5" translate="yes" xml:space="preserve">
          <source>NodeTargetPlugin</source>
          <target state="translated">NodeTargetPlugin</target>
        </trans-unit>
        <trans-unit id="482965fe4f0c4859d2f2dd3cb272dae043c9b49e" translate="yes" xml:space="preserve">
          <source>NodeTemplatePlugin</source>
          <target state="translated">NodeTemplatePlugin</target>
        </trans-unit>
        <trans-unit id="e3ae200166946e46ecee5a2f3114865f5816a047" translate="yes" xml:space="preserve">
          <source>Non ES6 Module</source>
          <target state="translated">非ES6モジュール</target>
        </trans-unit>
        <trans-unit id="fe020d9d97d984e56393ffb459e021eef78bf161" translate="yes" xml:space="preserve">
          <source>Non-Less imports</source>
          <target state="translated">無しの輸入品</target>
        </trans-unit>
        <trans-unit id="8bce85a3e5089506190e145b0d61abbc0b7f3d4b" translate="yes" xml:space="preserve">
          <source>Non-initial chunk for &lt;code&gt;./app.jsx&lt;/code&gt; is created as this module is imported dynamically.</source>
          <target state="translated">&lt;code&gt;./app.jsx&lt;/code&gt; の非初期チャンクは、このモジュールが動的にインポートされるときに作成されます。</target>
        </trans-unit>
        <trans-unit id="3aed2d569b849133740d313dce09008039ab6a8c" translate="yes" xml:space="preserve">
          <source>Nonce</source>
          <target state="translated">Nonce</target>
        </trans-unit>
        <trans-unit id="d82cb533541568577c64f151d64e056c75d3d6c2" translate="yes" xml:space="preserve">
          <source>Nonce purpose explained</source>
          <target state="translated">Nonceの目的を説明します。</target>
        </trans-unit>
        <trans-unit id="5278c6a3d91b0458bd2785a13d8f492582e05b86" translate="yes" xml:space="preserve">
          <source>Normal chunks will show up using the &lt;code&gt;filename&lt;/code&gt; rule above, and be named according to their &lt;code&gt;[chunkname]&lt;/code&gt;.</source>
          <target state="translated">通常のチャンクは上記の &lt;code&gt;filename&lt;/code&gt; 規則を使用して表示され、その &lt;code&gt;[chunkname]&lt;/code&gt; に従って名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="c0f303fa1b9d5e7c7d2af3d5f3bff064547caca1" translate="yes" xml:space="preserve">
          <source>Normal modules can export a loader in addition to the normal &lt;code&gt;main&lt;/code&gt; via &lt;code&gt;package.json&lt;/code&gt; with the &lt;code&gt;loader&lt;/code&gt; field.</source>
          <target state="translated">通常のモジュールは、 &lt;code&gt;loader&lt;/code&gt; フィールドを持つ &lt;code&gt;package.json&lt;/code&gt; を介して通常の &lt;code&gt;main&lt;/code&gt; に加えてローダーをエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="a02711b68e878a39c755e6da3bdbef4c42dab125" translate="yes" xml:space="preserve">
          <source>Normal usage</source>
          <target state="translated">通常の使い方</target>
        </trans-unit>
        <trans-unit id="529562fc788c0037cdc4dd136b538f9ce9051cf6" translate="yes" xml:space="preserve">
          <source>Normal: Resolves a module via an absolute or relative path.</source>
          <target state="translated">通常。絶対パスまたは相対パスでモジュールを解決します。</target>
        </trans-unit>
        <trans-unit id="30d60585216ded2742f1b02ef32a4dcc96ad433d" translate="yes" xml:space="preserve">
          <source>NormalModuleReplacementPlugin</source>
          <target state="translated">NormalModuleReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="bab4f507bbd881c8083bf7220fcbee50da827017" translate="yes" xml:space="preserve">
          <source>Not Enough Watchers</source>
          <target state="translated">ウォッチャーが足りない</target>
        </trans-unit>
        <trans-unit id="6b3ddc8a018382c58e740f7711bcae204d99c659" translate="yes" xml:space="preserve">
          <source>Not all Polymer Elements have been written to execute as a module and will require changes to work with webpack. The most common issue encountered is because modules do not execute in the global scope. Variables, functions and classes will no longer be global unless they are declared as properties on the global object (window).</source>
          <target state="translated">すべてのPolymer Elementsがモジュールとして実行されるように書かれているわけではなく、webpackで動作させるために変更が必要になります。遭遇する最も一般的な問題は、モジュールがグローバルスコープで実行されないためです。変数、関数、クラスは、グローバルオブジェクト(ウィンドウ)上でプロパティとして宣言されていない限り、グローバルではなくなります。</target>
        </trans-unit>
        <trans-unit id="f2b61a928a512aa3a0276491deb88494572fe8ff" translate="yes" xml:space="preserve">
          <source>Not all conditions are supported by every tool.</source>
          <target state="translated">すべての条件がすべてのツールでサポートされているわけではありません。</target>
        </trans-unit>
        <trans-unit id="3ca4b4364fc0e61ca1656e48b898704fd88e6450" translate="yes" xml:space="preserve">
          <source>Not all targets may be mixed for now.</source>
          <target state="translated">今のところ全てのターゲットが混ざっているわけではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="39be7ae447e29d59682d504af836c0434c9219cc" translate="yes" xml:space="preserve">
          <source>Not every Node global supports all four options. The compiler will throw an error for property-value combinations that aren't supported (e.g. &lt;code&gt;process: 'empty'&lt;/code&gt;). See the sections below for more details.</source>
          <target state="translated">すべてのノードグローバルが4つのオプションすべてをサポートしているわけではありません。コンパイラは、サポートされていないプロパティと値の組み合わせに対してエラーをスローします（例： &lt;code&gt;process: 'empty'&lt;/code&gt; ）。詳細については、以下のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2542658903eae3c6e87f29e552acca72278034cf" translate="yes" xml:space="preserve">
          <source>Not specifying the environment variable raises an &quot;&lt;code&gt;EnvironmentPlugin&lt;/code&gt; - &lt;code&gt;${key}&lt;/code&gt; environment variable is undefined&quot; error.</source>
          <target state="translated">「環境変数を指定しないと提起 &lt;code&gt;EnvironmentPlugin&lt;/code&gt; - &lt;code&gt;${key}&lt;/code&gt; 環境変数が定義されていない」エラーを。</target>
        </trans-unit>
        <trans-unit id="0cd6c671c0517610d3e84d57d2e0d74543efa362" translate="yes" xml:space="preserve">
          <source>Note : ProfilingPlugin accepts only absolute paths.</source>
          <target state="translated">注意:ProfilingPluginは絶対パスしか受け付けません。</target>
        </trans-unit>
        <trans-unit id="911a457fc9400f3750248193688794b3e8af4fbc" translate="yes" xml:space="preserve">
          <source>Note about source maps</source>
          <target state="translated">ソースマップについての注意点</target>
        </trans-unit>
        <trans-unit id="9b016b01d592034dd8180ce9e0be296e560a090d" translate="yes" xml:space="preserve">
          <source>Note by default an empty string is used. Using some kind of indentation makes bundles look more pretty, but will cause issues with multi-line strings.</source>
          <target state="translated">デフォルトでは空の文字列が使われることに注意してください。何らかのインデントを使用すると、バンドルをよりきれいに見せることができますが、複数行の文字列では問題が発生します。</target>
        </trans-unit>
        <trans-unit id="816ed993175a9247db3da6d37bfd0f132460717a" translate="yes" xml:space="preserve">
          <source>Note it also adds some info about tree shaking to the generated bundle.</source>
          <target state="translated">また、生成されたバンドルにツリーの揺れに関する情報を追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="5348decbdcdd082d9f7035794934fd43b2a59d8f" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../plugins/hot-module-replacement-plugin&quot;&gt;&lt;code&gt;webpack.HotModuleReplacementPlugin&lt;/code&gt;&lt;/a&gt; is required to fully enable HMR. If &lt;code&gt;webpack&lt;/code&gt; or &lt;code&gt;webpack-dev-server&lt;/code&gt; are launched with the &lt;code&gt;--hot&lt;/code&gt; option, this plugin will be added automatically, so you may not need to add this to your &lt;code&gt;webpack.config.js&lt;/code&gt;. See the &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;HMR concepts page&lt;/a&gt; for more information.</source>
          <target state="translated">HMRを完全に有効にするには、&lt;a href=&quot;../plugins/hot-module-replacement-plugin&quot;&gt; &lt;code&gt;webpack.HotModuleReplacementPlugin&lt;/code&gt; &lt;/a&gt;が必要であることに注意してください。場合 &lt;code&gt;webpack&lt;/code&gt; または &lt;code&gt;webpack-dev-server&lt;/code&gt; 使用して起動され &lt;code&gt;--hot&lt;/code&gt; オプションあなたにこれを追加する必要はないかもしれないので、このプラグインは、自動的に追加されます &lt;code&gt;webpack.config.js&lt;/code&gt; 。詳細については、&lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;HMRの概念のページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2d04f5026f8ef24badc822ccbb529920b2478349" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;[fullhash]&lt;/code&gt; in this parameter will be replaced with a hash of the compilation. See the &lt;a href=&quot;../guides/caching&quot;&gt;Caching guide&lt;/a&gt; for details.</source>
          <target state="translated">このパラメーターの &lt;code&gt;[fullhash]&lt;/code&gt; は、コンパイルのハッシュに置き換えられることに注意してください。詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシュガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="266f9b4b866d55f38dde035b7cb3e007584f2195" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;[hash]&lt;/code&gt; in this parameter will be replaced with an hash of the compilation. See the &lt;a href=&quot;../guides/caching&quot;&gt;Caching guide&lt;/a&gt; for details.</source>
          <target state="translated">このパラメーターの &lt;code&gt;[hash]&lt;/code&gt; はコンパイルのハッシュに置き換えられることに注意してください。詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシングガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="075d3a49ae8cc897a9efe3ca7c3363f471f32789" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;_entry_return_&lt;/code&gt; in the example code below is the value returned by the entry point. In the bundle itself, it is the output of the function that is generated by webpack from the entry point.</source>
          <target state="translated">以下のサンプルコードの &lt;code&gt;_entry_return_&lt;/code&gt; は、エントリポイントによって返される値であることに注意してください。バンドル自体では、エントリーポイントからwebpackによって生成される関数の出力です。</target>
        </trans-unit>
        <trans-unit id="3a4dfa2d5d308b8872b7d3f96a487ce35091157b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;output.library&lt;/code&gt; is omitted, thus it is not required for this particular &lt;code&gt;output.libraryTarget&lt;/code&gt;.</source>
          <target state="translated">注こと &lt;code&gt;output.library&lt;/code&gt; が省略され、したがって、この特定のために必要とされていません &lt;code&gt;output.libraryTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2751d556c9a4a5d365a752d826f29d001305698" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;webpack.HotModuleReplacementPlugin&lt;/code&gt; is required to fully enable HMR. If &lt;code&gt;webpack&lt;/code&gt; or &lt;code&gt;webpack-dev-server&lt;/code&gt; are launched with the &lt;code&gt;--hot&lt;/code&gt; option, this plugin will be added automatically, so you may not need to add this to your &lt;code&gt;webpack.config.js&lt;/code&gt;. See the &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;HMR concepts page&lt;/a&gt; for more information.</source>
          <target state="translated">HMRを完全に有効にするには、 &lt;code&gt;webpack.HotModuleReplacementPlugin&lt;/code&gt; が必要です。場合 &lt;code&gt;webpack&lt;/code&gt; または &lt;code&gt;webpack-dev-server&lt;/code&gt; 使用して起動され &lt;code&gt;--hot&lt;/code&gt; オプションあなたにこれを追加する必要はないかもしれないので、このプラグインは、自動的に追加されます &lt;code&gt;webpack.config.js&lt;/code&gt; 。詳細については、&lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;HMRの概念のページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="915a95fc0fbd9c8b3fb4c3076e9abfaa2b5a683f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;webpackInclude&lt;/code&gt; and &lt;code&gt;webpackExclude&lt;/code&gt; options do not interfere with the prefix. eg: &lt;code&gt;./locale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;webpackInclude&lt;/code&gt; および &lt;code&gt;webpackExclude&lt;/code&gt; オプションはプレフィックスに干渉しないことに注意してください。例： &lt;code&gt;./locale&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d953943d6a687c6fbf1a1eea53cff9f3c84432f" translate="yes" xml:space="preserve">
          <source>Note that Command Line Interface has a higher precedence for the arguments you use it with than your configuration file. For instance, if you pass &lt;a href=&quot;../concepts/mode#usage&quot;&gt;&lt;code&gt;--mode=&quot;production&quot;&lt;/code&gt;&lt;/a&gt; to webpack CLI and your configuration file uses &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt; will be used.</source>
          <target state="translated">コマンドラインインターフェイスは、設定ファイルよりも、使用する引数の方が優先されることに注意してください。たとえば、-mode &lt;a href=&quot;../concepts/mode#usage&quot;&gt; &lt;code&gt;--mode=&quot;production&quot;&lt;/code&gt; &lt;/a&gt;をwebpack CLIに渡し、構成ファイルが &lt;code&gt;development&lt;/code&gt; を使用している場合、 &lt;code&gt;production&lt;/code&gt; 環境が使用されます。</target>
        </trans-unit>
        <trans-unit id="cc9c9d131a05f2c747800a9a466f5ba3ec68013b" translate="yes" xml:space="preserve">
          <source>Note that Command Line Interface has a higher precedence for the arguments you use it with than your configuration file. For instance, if you pass &lt;a href=&quot;../configuration/mode#usage&quot;&gt;&lt;code&gt;--mode=&quot;production&quot;&lt;/code&gt;&lt;/a&gt; to webpack CLI and your configuration file uses &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt; will be used.</source>
          <target state="translated">コマンドラインインターフェイスは、構成ファイルよりも使用する引数の優先順位が高いことに注意してください。たとえば、-mode &lt;a href=&quot;../configuration/mode#usage&quot;&gt; &lt;code&gt;--mode=&quot;production&quot;&lt;/code&gt; &lt;/a&gt;をwebpackCLIに渡し、構成ファイルで &lt;code&gt;development&lt;/code&gt; 使用する場合、 &lt;code&gt;production&lt;/code&gt; 環境が使用されます。</target>
        </trans-unit>
        <trans-unit id="8aa4ec7484f1ea4b5661c878af3565f393a16583" translate="yes" xml:space="preserve">
          <source>Note that all options can be combined like so &lt;code&gt;/* webpackMode: &quot;lazy-once&quot;, webpackChunkName: &quot;all-i18n-data&quot; */&lt;/code&gt;. This is wrapped in a JavaScript object and executed using &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/vm.html&quot;&gt;node VM&lt;/a&gt;. You do not need to add curly brackets.</source>
          <target state="translated">&lt;code&gt;/* webpackMode: &quot;lazy-once&quot;, webpackChunkName: &quot;all-i18n-data&quot; */&lt;/code&gt; ように、すべてのオプションを組み合わせることができることに注意してください。これは、JavaScriptオブジェクトにラップされ、&lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/vm.html&quot;&gt;ノードVM&lt;/a&gt;を使用して実行されます。中括弧を追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b0050ffdb59952b6db4588c5188bd976451ec071" translate="yes" xml:space="preserve">
          <source>Note that although this file is generated by the compiler, you may still want to track it in source control to keep a history of how it has changed over time.</source>
          <target state="translated">このファイルはコンパイラによって生成されますが、時間の経過とともにどのように変化したかの履歴を保持するために、ソースコントロールで追跡したい場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="787d6f4b802d53736bc69bf773d6877de85b0cf4" translate="yes" xml:space="preserve">
          <source>Note that any imported file is subject to tree shaking. This means if you use something like &lt;code&gt;css-loader&lt;/code&gt; in your project and import a CSS file, it needs to be added to the side effect list so it will not be unintentionally dropped in production mode:</source>
          <target state="translated">インポートされたファイルはツリーの揺れの影響を受けることに注意してください。つまり、プロジェクトで &lt;code&gt;css-loader&lt;/code&gt; のようなものを使用してCSSファイルをインポートする場合は、プロダクションモードで意図せずにドロップされないように、副作用リストに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="06e104e93b785ab965e90cd350cfdd1b4f52a187" translate="yes" xml:space="preserve">
          <source>Note that because the plugin does a direct text replacement, the value given to it must include &lt;strong&gt;actual quotes&lt;/strong&gt; inside of the string itself. Typically, this is done either with alternate quotes, such as &lt;code&gt;'&quot;production&quot;'&lt;/code&gt;, or by using &lt;code&gt;JSON.stringify('production')&lt;/code&gt;.</source>
          <target state="translated">プラグインは直接テキスト置換を行うため、プラグインに与える値には、文字列自体の中に&lt;strong&gt;実際の引用符&lt;/strong&gt;を含める必要があることに注意してください。通常、これは &lt;code&gt;'&quot;production&quot;'&lt;/code&gt; などの代替引用符を使用するか、 &lt;code&gt;JSON.stringify('production')&lt;/code&gt; を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="9d5265cc3c589b3157b3c19cac6f7b25593a489a" translate="yes" xml:space="preserve">
          <source>Note that despite using &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; for &lt;code&gt;dist-bundle.js&lt;/code&gt; this file is not in ESM format. It should use globals to allow direct consumption as script tag.</source>
          <target state="translated">&lt;code&gt;dist-bundle.js&lt;/code&gt; に &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; と &lt;code&gt;.js&lt;/code&gt; を使用しているにもかかわらず、このファイルはESM形式ではないことに注意してください。スクリプトタグとして直接使用できるようにするには、グローバルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="687fb3498eb11cbb7e0017e0f0c3c4492e599d18" translate="yes" xml:space="preserve">
          <source>Note that here stateless also means class instances are not tested with &lt;code&gt;instanceof&lt;/code&gt; as there can be two different classes because of the double module instantiation.</source>
          <target state="translated">ここでステートレスとは、モジュールのインスタンス化が2つあるため、2つの異なるクラスが存在する可能性があるため、クラスインスタンスが &lt;code&gt;instanceof&lt;/code&gt; でテストされないことも意味します。</target>
        </trans-unit>
        <trans-unit id="b0ad380c7a6cb3c537de672fb7c99cd763c00a14" translate="yes" xml:space="preserve">
          <source>Note that if an &lt;code&gt;array&lt;/code&gt; is provided as an &lt;code&gt;entry&lt;/code&gt; point, only the last module in the array will be exposed. If an &lt;code&gt;object&lt;/code&gt; is provided, it can be exposed using an &lt;code&gt;array&lt;/code&gt; syntax (see &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;this example&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; が &lt;code&gt;entry&lt;/code&gt; ポイントとして提供されている場合、配列の最後のモジュールのみが公開されることに注意してください。 &lt;code&gt;object&lt;/code&gt; が提供されている場合は、 &lt;code&gt;array&lt;/code&gt; 構文を使用して公開できます（詳細については、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;この例&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="fe54629278d6a0f3443a9d602ec6d824b446247f" translate="yes" xml:space="preserve">
          <source>Note that if an &lt;code&gt;array&lt;/code&gt; is provided as an &lt;code&gt;entry&lt;/code&gt; point, only the last module in the array will be exposed. If an &lt;code&gt;object&lt;/code&gt; is provided, it can exposed using an &lt;code&gt;array&lt;/code&gt; syntax (see &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;this example&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; が &lt;code&gt;entry&lt;/code&gt; ポイントとして提供される場合、配列の最後のモジュールのみが公開されることに注意してください。 &lt;code&gt;object&lt;/code&gt; が提供されている場合は、 &lt;code&gt;array&lt;/code&gt; 構文を使用して公開できます（詳細については、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;この例&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="9bc846aff25b011d48d8282943be738f9a4f3c73" translate="yes" xml:space="preserve">
          <source>Note that if you only plan on using your library as a dependency in another webpack bundle, you may specify &lt;code&gt;externals&lt;/code&gt; as an array.</source>
          <target state="translated">ライブラリを別のwebpackバンドルの依存関係としてのみ使用する場合は、配列として &lt;code&gt;externals&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="3f5ec0016aae345af6536a3352f24fac7175c53c" translate="yes" xml:space="preserve">
          <source>Note that if you're already using &lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;&lt;code&gt;babel-loader&lt;/code&gt;&lt;/a&gt; to transpile your code, you can use &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-typescript&quot;&gt;&lt;code&gt;@babel/preset-typescript&lt;/code&gt;&lt;/a&gt; and let Babel handle both your JavaScript and TypeScript files instead of using an additional loader. Keep in mind that, contrary to &lt;code&gt;ts-loader&lt;/code&gt;, the underlying &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-typescript&quot;&gt;&lt;code&gt;@babel/plugin-transform-typescript&lt;/code&gt;&lt;/a&gt; plugin does not perform any type checking.</source>
          <target state="translated">すでに&lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt; &lt;code&gt;babel-loader&lt;/code&gt; &lt;/a&gt;を使用してコードをトランスパイルしている場合は、追加のローダーを使用する代わりに、&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-typescript&quot;&gt; &lt;code&gt;@babel/preset-typescript&lt;/code&gt; &lt;/a&gt; prefix -typescriptを使用して、JavaScriptファイルとTypeScriptファイルの両方をBabelに処理させることができます。 &lt;code&gt;ts-loader&lt;/code&gt; とは異なり、基盤となる&lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-typescript&quot;&gt; &lt;code&gt;@babel/plugin-transform-typescript&lt;/code&gt; &lt;/a&gt;プラグインは型チェックを実行しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="384028427db3cca31497bce1f23e06ed1825ba0b" translate="yes" xml:space="preserve">
          <source>Note that it is recommended to use an absolute path.</source>
          <target state="translated">絶対パスを使用することが推奨されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="acbd7f974dd59e0ac2d3984303cbc4896a08b113" translate="yes" xml:space="preserve">
          <source>Note that not setting a &lt;code&gt;output.library&lt;/code&gt; will cause all properties returned by the entry point to be assigned to the given object; there are no checks against existing property names.</source>
          <target state="translated">&lt;code&gt;output.library&lt;/code&gt; を設定しないと、エントリポイントによって返されるすべてのプロパティが指定されたオブジェクトに割り当てられることに注意してください。既存のプロパティ名に対するチェックはありません。</target>
        </trans-unit>
        <trans-unit id="ddf01da2392ef523caf78b978f951fa469ae26c8" translate="yes" xml:space="preserve">
          <source>Note that omitting &lt;code&gt;library&lt;/code&gt; will result in the assignment of all properties returned by the entry point be assigned directly to the root object, as documented under the &lt;a href=&quot;#expose-via-object-assignment&quot;&gt;object assignment section&lt;/a&gt;. Example:</source>
          <target state="translated">省略することに留意されたい &lt;code&gt;library&lt;/code&gt; 下に記載されているように、エントリポイントによって返されるすべてのプロパティの割り当てをもたらすであろうことは、ルート・オブジェクトに直接割り当てられる&lt;a href=&quot;#expose-via-object-assignment&quot;&gt;オブジェクト割当部&lt;/a&gt;。例：</target>
        </trans-unit>
        <trans-unit id="964b8eced835f538755eef4e98f31c85af24a90e" translate="yes" xml:space="preserve">
          <source>Note that only a subset of compiler and compilation hooks support the &lt;code&gt;reportProgress&lt;/code&gt; function. See &lt;a href=&quot;../plugins/progress-plugin#supported-hooks&quot;&gt;&lt;code&gt;ProgressPlugin&lt;/code&gt;&lt;/a&gt; for a full list.</source>
          <target state="translated">&lt;code&gt;reportProgress&lt;/code&gt; 関数をサポートしているのはコンパイラとコンパイルフックのサブセットのみであることに注意してください。完全なリストについては、&lt;a href=&quot;../plugins/progress-plugin#supported-hooks&quot;&gt; &lt;code&gt;ProgressPlugin&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="758cffe442417bb62cf8f39d175f12055742e81e" translate="yes" xml:space="preserve">
          <source>Note that requests to root won't be proxied by default. To enable root proxying, the &lt;code&gt;devServer.index&lt;/code&gt; option should be specified as a falsy value:</source>
          <target state="translated">ルートへのリクエストはデフォルトではプロキシされないことに注意してください。ルートプロキシを有効にするには、 &lt;code&gt;devServer.index&lt;/code&gt; オプションを偽の値として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="78636c2679b019eade6f5fbc4307de1f1a9ea4fc" translate="yes" xml:space="preserve">
          <source>Note that setting &lt;code&gt;webpackIgnore&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; opts out of code splitting.</source>
          <target state="translated">&lt;code&gt;webpackIgnore&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、コード分割がオプトアウトされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8b6a69d7db5fe1c39fda06afa060931402ec1168" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag can be used to enable &lt;code&gt;TerserPlugin&lt;/code&gt; as well.</source>
          <target state="translated">&lt;code&gt;--optimize-minimize&lt;/code&gt; フラグを使用して &lt;code&gt;TerserPlugin&lt;/code&gt; を有効にすることもできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a15fafa9795ad7cbd7426a60e87bb18e9f648b1" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag can be used to enable &lt;code&gt;UglifyJSPlugin&lt;/code&gt; as well.</source>
          <target state="translated">そのノート &lt;code&gt;--optimize-minimize&lt;/code&gt; フラグを有効にするために使用することができる &lt;code&gt;UglifyJSPlugin&lt;/code&gt; 同様。</target>
        </trans-unit>
        <trans-unit id="f978b09c59db24f0fbd2c8a00e53b80cf02654e1" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;library&lt;/code&gt; setup is tied to the &lt;code&gt;entry&lt;/code&gt; configuration. For most libraries, specifying a single entry point is sufficient. While &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;multi-part libraries&lt;/a&gt; are possible, it is simpler to expose partial exports through an &lt;a href=&quot;https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file&quot;&gt;index script&lt;/a&gt; that serves as a single entry point. Using an &lt;code&gt;array&lt;/code&gt; as an &lt;code&gt;entry&lt;/code&gt; point for a library is &lt;strong&gt;not recommended&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;library&lt;/code&gt; セットアップは &lt;code&gt;entry&lt;/code&gt; 構成に関連付けられていることに注意してください。ほとんどのライブラリでは、単一のエントリポイントを指定するだけで十分です。しながら、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/multi-part-library&quot;&gt;マルチパートライブラリが&lt;/a&gt;可能であり、それを介して部分的輸出を露出させるために簡単である&lt;a href=&quot;https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file&quot;&gt;インデックススクリプト&lt;/a&gt;単一のエントリ・ポイントとして機能します。ライブラリの &lt;code&gt;entry&lt;/code&gt; ポイントとして &lt;code&gt;array&lt;/code&gt; を使用すること&lt;strong&gt;はお勧めしません&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17e86feb079de3a67809220e7c21e0e2f6d008c4" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;resolve&lt;/code&gt; configuration affects the &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; resolvers while &lt;code&gt;resolveLoader&lt;/code&gt; is used to modify the &lt;code&gt;loader&lt;/code&gt; resolver.</source>
          <target state="translated">&lt;code&gt;resolveLoader&lt;/code&gt; を使用して &lt;code&gt;loader&lt;/code&gt; リゾルバーを変更している間、 &lt;code&gt;resolve&lt;/code&gt; 構成は &lt;code&gt;normal&lt;/code&gt; リゾルバーと &lt;code&gt;context&lt;/code&gt; リゾルバーに影響を与えることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8509cd543cc9b56264081c691f816da113399cd5" translate="yes" xml:space="preserve">
          <source>Note that the ability to &lt;code&gt;import&lt;/code&gt; any type of module, e.g. &lt;code&gt;.css&lt;/code&gt; files, is a feature specific to webpack and may not be supported by other bundlers or task runners. We feel this extension of the language is warranted as it allows developers to build a more accurate dependency graph.</source>
          <target state="translated">&lt;code&gt;.css&lt;/code&gt; ファイルなど、任意のタイプのモジュールを &lt;code&gt;import&lt;/code&gt; する機能は、webpackに固有の機能であり、他のバンドラーやタスクランナーではサポートされていない場合があることに注意してください。開発者がより正確なディペンデンシーグラフを作成できるようにするため、この言語の拡張は正当化されると私たちは考えています。</target>
        </trans-unit>
        <trans-unit id="7d09f710d5ae467255e57b13aa1d28e2ae25c40c" translate="yes" xml:space="preserve">
          <source>Note that the config option you provide will be passed to the &lt;code&gt;CLIEngine&lt;/code&gt;. This is a different set of options than what you'd specify in &lt;code&gt;package.json&lt;/code&gt; or &lt;code&gt;.eslintrc&lt;/code&gt;. See the &lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslint docs&lt;/a&gt; for more detail.</source>
          <target state="translated">指定した構成オプションが &lt;code&gt;CLIEngine&lt;/code&gt; に渡されることに注意してください。これは、 &lt;code&gt;package.json&lt;/code&gt; または &lt;code&gt;.eslintrc&lt;/code&gt; で指定するオプションとは異なるオプションセットです。詳細については、&lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslintのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ea543a863e4925495bec6bac2009be9c41d9dd6" translate="yes" xml:space="preserve">
          <source>Note that the config option you provide will be passed to the &lt;code&gt;ESLint&lt;/code&gt; class. This is a different set of options than what you'd specify in &lt;code&gt;package.json&lt;/code&gt; or &lt;code&gt;.eslintrc&lt;/code&gt;. See the &lt;a href=&quot;https://eslint.org/docs/developer-guide/nodejs-api#%e2%97%86-new-eslint-options&quot;&gt;eslint docs&lt;/a&gt; for more details.</source>
          <target state="translated">指定した構成オプションが &lt;code&gt;ESLint&lt;/code&gt; クラスに渡されることに注意してください。これは、 &lt;code&gt;package.json&lt;/code&gt; または &lt;code&gt;.eslintrc&lt;/code&gt; で指定するものとは異なるオプションのセットです。詳細については、&lt;a href=&quot;https://eslint.org/docs/developer-guide/nodejs-api#%e2%97%86-new-eslint-options&quot;&gt;eslintのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d72a508ec6140fd1f1933aef1975aff818954974" translate="yes" xml:space="preserve">
          <source>Note that the make event triggers when webpack starts and for every invalidation when &lt;a href=&quot;watch&quot;&gt;watching for file changes&lt;/a&gt;.</source>
          <target state="translated">makeイベントは、webpackの開始時、および&lt;a href=&quot;watch&quot;&gt;ファイルの変更を監視する&lt;/a&gt;際の無効化ごとにトリガーされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de4fcf0e4d243e20240d785c75d914ebd0b52f6c" translate="yes" xml:space="preserve">
          <source>Note that the stack traces are removed when &lt;code&gt;errorDetails: false&lt;/code&gt; is passed to the &lt;code&gt;toJson&lt;/code&gt; method. The &lt;code&gt;errorDetails&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">スタックトレースは、 &lt;code&gt;errorDetails: false&lt;/code&gt; が &lt;code&gt;toJson&lt;/code&gt; メソッドに渡されると削除されることに注意してください。 &lt;code&gt;errorDetails&lt;/code&gt; のオプションがに設定されている &lt;code&gt;true&lt;/code&gt; デフォルトで。</target>
        </trans-unit>
        <trans-unit id="abeb24c631d05b8d431bdd08e14e4b71085e0102" translate="yes" xml:space="preserve">
          <source>Note that the stack traces are removed when &lt;code&gt;errorStack: false&lt;/code&gt; is passed to the &lt;code&gt;toJson&lt;/code&gt; method. The &lt;code&gt;errorStack&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">&lt;code&gt;errorStack: false&lt;/code&gt; が &lt;code&gt;toJson&lt;/code&gt; メソッドに渡されると、スタックトレースが削除されることに注意してください。 &lt;code&gt;errorStack&lt;/code&gt; がのオプションがに設定されている &lt;code&gt;true&lt;/code&gt; デフォルトで。</target>
        </trans-unit>
        <trans-unit id="717ed114bc2f03d33bdd35dbdd4283add55cbeb7" translate="yes" xml:space="preserve">
          <source>Note that the warnings will not be displayed if &lt;code&gt;stats.warnings&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, or some other omit setting is used to &lt;code&gt;stats&lt;/code&gt; such as &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;errors-only&lt;/code&gt;. See the &lt;a href=&quot;../configuration/stats#stats-presets&quot;&gt;stats presets configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;stats.warnings&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、または &lt;code&gt;none&lt;/code&gt; や &lt;code&gt;errors-only&lt;/code&gt; などの他の省略設定が &lt;code&gt;stats&lt;/code&gt; 使用されている場合、警告は表示されないことに注意してください。&lt;a href=&quot;../configuration/stats#stats-presets&quot;&gt;統計プリセット設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f7f24bd96d4a78ed4ce05d1f924ac60175d349ab" translate="yes" xml:space="preserve">
          <source>Note that these filenames need to be generated at runtime to send the requests for chunks. Because of this, placeholders like &lt;code&gt;[name]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; need to add a mapping from chunk id to placeholder value to the output bundle with the webpack runtime. This increases the size and may invalidate the bundle when placeholder value for any chunk changes.</source>
          <target state="translated">これらのファイル名は、チャンクのリクエストを送信するために実行時に生成される必要があることに注意してください。このため、 &lt;code&gt;[name]&lt;/code&gt; や &lt;code&gt;[chunkhash]&lt;/code&gt; ]などのプレースホルダーは、チャンクIDからプレースホルダー値へのマッピングを、Webpackランタイムを使用して出力バンドルに追加する必要があります。これによりサイズが増加し、チャンクのプレースホルダー値が変更されるとバンドルが無効になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="df034a14f13d952f15a4f3e1f3651a904e26f33a" translate="yes" xml:space="preserve">
          <source>Note that this approach prioritizes correctness over bundle size. To be safe and robust, polyfills/shims must run &lt;strong&gt;before all other code&lt;/strong&gt;, and thus either need to load synchronously, or, all app code needs to load after all polyfills/shims load. There are many misconceptions in the community, as well, that modern browsers &quot;don't need&quot; polyfills, or that polyfills/shims merely serve to add missing features - in fact, they often &lt;em&gt;repair broken implementations&lt;/em&gt;, even in the most modern of browsers. The best practice thus remains to unconditionally and synchronously load all polyfills/shims, despite the bundle size cost this incurs.</source>
          <target state="translated">このアプローチでは、バンドルサイズよりも正確さが優先されることに注意してください。安全で堅牢にするために、ポリフィル/シムは&lt;strong&gt;他のすべてのコードの前に&lt;/strong&gt;実行&lt;strong&gt;する&lt;/strong&gt;必要があるため、同期的にロードするか、すべてのアプリコードをすべてのポリフィル/シムのロード後にロードする必要があります。コミュニティには多くの誤解もあります。最新のブラウザはポリフィルを「必要としない」、またはポリフィル/シムは単に不足している機能を追加するのに役立つだけです。実際、最新のブラウザでも、&lt;em&gt;壊れた実装を修復&lt;/em&gt;することがよくあります。 。したがって、バンドルサイズのコストが発生しても、すべてのポリフィル/シムを無条件かつ同期的にロードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7d2309d88dad882bc95da6b400b819c84331ed3a" translate="yes" xml:space="preserve">
          <source>Note that this is &lt;strong&gt;not a recommended practice&lt;/strong&gt;. Installing globally locks you down to a specific version of webpack and could fail in projects that use a different version.</source>
          <target state="translated">これは&lt;strong&gt;推奨される方法で&lt;/strong&gt;は&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。グローバルにインストールすると、特定のバージョンのwebpackにロックされ、別のバージョンを使用するプロジェクトで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="066dbb2e1b71f7da4fb144c41f6b93050ac49a40" translate="yes" xml:space="preserve">
          <source>Note that this is what &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt;, used by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and many other packages, uses to mysteriously hide your files but continue serving them up to the browser!</source>
          <target state="translated">これは&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt;が&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;や他の多くのパッケージで使用しているもので、不思議なことにファイルを非表示にしてブラウザーに提供し続けることに注意してください！</target>
        </trans-unit>
        <trans-unit id="0b4874e35211a1b1d3deb29114f373ba89f2f4f9" translate="yes" xml:space="preserve">
          <source>Note that we &lt;strong&gt;did not &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;square&lt;/code&gt; method&lt;/strong&gt; from the &lt;code&gt;src/math.js&lt;/code&gt; module. That function is what's known as &quot;dead code&quot;, meaning an unused &lt;code&gt;export&lt;/code&gt; that should be dropped. Now let's run our npm script, &lt;code&gt;npm run build&lt;/code&gt;, and inspect the output bundle:</source>
          <target state="translated">私たちがいることを注意&lt;strong&gt;しませんでした &lt;code&gt;import&lt;/code&gt; &lt;code&gt;square&lt;/code&gt; 方法&lt;/strong&gt;から &lt;code&gt;src/math.js&lt;/code&gt; モジュールを。その機能は「デッドコード」と呼ばれるもので、削除する必要がある未使用の &lt;code&gt;export&lt;/code&gt; を意味します。次に、npmスクリプト &lt;code&gt;npm run build&lt;/code&gt; を実行して、出力バンドルを調べます。</target>
        </trans-unit>
        <trans-unit id="815a010a6890c7fb0bb273198983260098b36578" translate="yes" xml:space="preserve">
          <source>Note that we aren't binding the &lt;code&gt;import&lt;/code&gt; to a variable. This is because polyfills simply run on their own, prior to the rest of the code base, allowing us to then assume certain native functionality exists.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; を変数にバインドしていないことに注意してください。これは、ポリフィルがコードベースの残りの部分より前に単独で実行されるため、特定のネイティブ機能が存在すると想定できるためです。</target>
        </trans-unit>
        <trans-unit id="08c14f96276e39f6955bc4d3255fd1a5b89cc829" translate="yes" xml:space="preserve">
          <source>Note that we can also configure it to expose the library in the following ways:</source>
          <target state="translated">また、以下の方法でライブラリを公開するように設定することもできます。</target>
        </trans-unit>
        <trans-unit id="c2cf40e81d1e5cda60a908f6f5fa124c8461d158" translate="yes" xml:space="preserve">
          <source>Note that webpack ignores the &lt;code&gt;name&lt;/code&gt; argument.</source>
          <target state="translated">webpackは &lt;code&gt;name&lt;/code&gt; 引数を無視することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ac899dc9773859ad0e8500c80c621206fa2dafd1" translate="yes" xml:space="preserve">
          <source>Note that webpack needs to generate a unique module identifier from the resource and all loaders including options. It tries to do this with a &lt;code&gt;JSON.stringify&lt;/code&gt; of the options object. This is fine in 99.9% of cases, but may be not unique if you apply the same loaders with different options to the resource and the options have some stringified values.</source>
          <target state="translated">webpackはリソースとオプションを含むすべてのローダーから一意のモジュール識別子を生成する必要があることに注意してください。これは、オプションオブジェクトの &lt;code&gt;JSON.stringify&lt;/code&gt; でこれを実行しようとします。これは99.9％の場合は問題ありませんが、同じローダーを異なるオプションでリソースに適用し、オプションにいくつかの文字列化された値がある場合は、一意ではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="379dfff92fa76807854690cb65ec373a68670eb8" translate="yes" xml:space="preserve">
          <source>Note that webpack will not alter any code other than &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements. If you are using other &lt;a href=&quot;http://es6-features.org/&quot;&gt;ES2015 features&lt;/a&gt;, make sure to &lt;a href=&quot;https://webpack.js.org/loaders/#transpiling&quot;&gt;use a transpiler&lt;/a&gt; such as &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; or &lt;a href=&quot;https://buble.surge.sh/guide/&quot;&gt;Bubl&amp;eacute;&lt;/a&gt; via webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader system&lt;/a&gt;.</source>
          <target state="translated">webpackは &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; ステートメント以外のコードを変更しないことに注意してください。&lt;a href=&quot;http://es6-features.org/&quot;&gt;ES2015の&lt;/a&gt;他の機能を&lt;a href=&quot;https://webpack.js.org/loaders/#transpiling&quot;&gt;使用&lt;/a&gt;している場合は、 webpackの&lt;a href=&quot;../concepts/loaders&quot;&gt;ローダーシステムを&lt;/a&gt;介して、&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;や&lt;a href=&quot;https://buble.surge.sh/guide/&quot;&gt;Bubl&amp;eacute;&lt;/a&gt;などのトランスパイラーを必ず使用してください。</target>
        </trans-unit>
        <trans-unit id="0854b71012c3e8bbf3bd935a2a7c85cc8fddb8cf" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;code&gt;import()&lt;/code&gt; on ES6 modules you must reference the &lt;code&gt;.default&lt;/code&gt; property as it's the actual &lt;code&gt;module&lt;/code&gt; object that will be returned when the promise is resolved.</source>
          <target state="translated">ES6モジュールで &lt;code&gt;import()&lt;/code&gt; を使用する場合は、 &lt;code&gt;.default&lt;/code&gt; プロパティを参照する必要があります。これは、promiseが解決されたときに返される実際の &lt;code&gt;module&lt;/code&gt; オブジェクトだからです。</target>
        </trans-unit>
        <trans-unit id="181b9d41c14d59f6b2ca5a895ba4ff388763a02d" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;code&gt;sass&lt;/code&gt; (&lt;code&gt;Dart Sass&lt;/code&gt;), &lt;strong&gt;synchronous compilation is twice as fast as asynchronous compilation&lt;/strong&gt; by default, due to the overhead of asynchronous callbacks. To avoid this overhead, you can use the &lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;fibers&lt;/a&gt; package to call asynchronous importers from the synchronous code path.</source>
          <target state="translated">&lt;code&gt;sass&lt;/code&gt; （ &lt;code&gt;Dart Sass&lt;/code&gt; ）を使用する場合、非同期コールバックのオーバーヘッドのため、&lt;strong&gt;同期コンパイルは&lt;/strong&gt;デフォルトで&lt;strong&gt;非同期コンパイルの2倍の速度で&lt;/strong&gt;あることに注意してください。このオーバーヘッドを回避するために、&lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;ファイバー&lt;/a&gt;パッケージを使用して、同期コードパスから非同期インポーターを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0ec0f798cfee84fd48386363fdae0cc7310d4de1" translate="yes" xml:space="preserve">
          <source>Note that when using Dart Sass, &lt;strong&gt;synchronous compilation is twice as fast as asynchronous compilation&lt;/strong&gt; by default, due to the overhead of asynchronous callbacks. To avoid this overhead, you can use the &lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;&lt;code&gt;fibers&lt;/code&gt;&lt;/a&gt; package to call asynchronous importers from the synchronous code path. To enable this, pass the &lt;code&gt;Fiber&lt;/code&gt; class to the &lt;code&gt;fiber&lt;/code&gt; option:</source>
          <target state="translated">Dart Sassを使用する場合、非同期コールバックのオーバーヘッドにより、&lt;strong&gt;同期コンパイルは&lt;/strong&gt;デフォルトで&lt;strong&gt;非同期コンパイルの2倍高速になる&lt;/strong&gt;ことに注意してください。このオーバーヘッドを回避するには、&lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt; &lt;code&gt;fibers&lt;/code&gt; &lt;/a&gt;パッケージを使用して、同期コードパスから非同期インポーターを呼び出すことができます。これを有効にするには、 &lt;code&gt;Fiber&lt;/code&gt; クラスを &lt;code&gt;fiber&lt;/code&gt; オプションに渡します。</target>
        </trans-unit>
        <trans-unit id="2ec411ef85897da6129ea32da4ad9fba0146403e" translate="yes" xml:space="preserve">
          <source>Note that while the &lt;a href=&quot;../plugins/terser-webpack-plugin&quot;&gt;&lt;code&gt;TerserPlugin&lt;/code&gt;&lt;/a&gt; is a great place to start for minification and being used by default, there are other options out there:</source>
          <target state="translated">&lt;a href=&quot;../plugins/terser-webpack-plugin&quot;&gt; &lt;code&gt;TerserPlugin&lt;/code&gt; &lt;/a&gt;は縮小を開始してデフォルトで使用するのに最適な場所ですが、他にもオプションがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7e888bdd78e1b01aca9023fb72d8bb1a201c25f1" translate="yes" xml:space="preserve">
          <source>Note that while the &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;&lt;code&gt;UglifyJSPlugin&lt;/code&gt;&lt;/a&gt; is a great place to start for minification and being used by default, there are other options out there. Here are a few more popular ones:</source>
          <target state="translated">しながら、という注意&lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt; &lt;code&gt;UglifyJSPlugin&lt;/code&gt; を&lt;/a&gt;縮小するために開始するには絶好の場所であり、デフォルトで使用されて、他のオプションがそこにあります。以下に、さらに人気のあるものをいくつか示します。</target>
        </trans-unit>
        <trans-unit id="8df64e9b197c087418dffb7ce19eb91dc4ca6fef" translate="yes" xml:space="preserve">
          <source>Note that you also need to create an &lt;code&gt;app.js&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;app.js&lt;/code&gt; ファイルも作成する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5958176f7c67ad08a6a4c97eb5a2909303d51d04" translate="yes" xml:space="preserve">
          <source>Note that you can use alias here and other features familiar from resolve. For example &lt;code&gt;{ txt: 'raw-loader' }&lt;/code&gt; would shim &lt;code&gt;txt!templates/demo.txt&lt;/code&gt; to use &lt;code&gt;raw-loader&lt;/code&gt;.</source>
          <target state="translated">ここでエイリアスを使用したり、resolveでおなじみの他の機能を使用したりできることに注意してください。たとえば、 &lt;code&gt;{ txt: 'raw-loader' }&lt;/code&gt; は、 &lt;code&gt;raw-loader&lt;/code&gt; を使用するために &lt;code&gt;txt!templates/demo.txt&lt;/code&gt; をシムします。</target>
        </trans-unit>
        <trans-unit id="dd6c6e3cb2fb6fc112fa914c9dd0f7aeea8587c3" translate="yes" xml:space="preserve">
          <source>Note that you can, and in most cases should, &lt;a href=&quot;../plugins/mini-css-extract-plugin#minimizing-for-production&quot;&gt;minimize css&lt;/a&gt; for better load times in production. On top of that, loaders exist for pretty much any flavor of CSS you can think of -- &lt;a href=&quot;../loaders/postcss-loader&quot;&gt;postcss&lt;/a&gt;, &lt;a href=&quot;../loaders/sass-loader&quot;&gt;sass&lt;/a&gt;, and &lt;a href=&quot;../loaders/less-loader&quot;&gt;less&lt;/a&gt; to name a few.</source>
          <target state="translated">本番&lt;a href=&quot;../plugins/mini-css-extract-plugin#minimizing-for-production&quot;&gt;環境&lt;/a&gt;での読み込み時間を短縮するために、CSSを最小限に抑えることができることに注意してください。その上で、ローダーは、あなたが考えることができるCSSのほとんどすべての味のために存在する- &lt;a href=&quot;../loaders/postcss-loader&quot;&gt;postcss&lt;/a&gt;、&lt;a href=&quot;../loaders/sass-loader&quot;&gt;SASS&lt;/a&gt;、および&lt;a href=&quot;../loaders/less-loader&quot;&gt;より少ない&lt;/a&gt;少数を示すために。</target>
        </trans-unit>
        <trans-unit id="8cbe56a819a9cacdccb119ca76713cb5f7e07f92" translate="yes" xml:space="preserve">
          <source>Note that you'll also need to check your &lt;code&gt;tsconfig.json&lt;/code&gt; file. If the module in &lt;code&gt;compilerOptions&lt;/code&gt; in &lt;code&gt;tsconfig.json&lt;/code&gt; is &lt;code&gt;commonjs&lt;/code&gt;, the setting is complete, else webpack will fail with an error. This occurs because &lt;code&gt;ts-node&lt;/code&gt; does not support any module syntax other than &lt;code&gt;commonjs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; ファイルも確認する必要があることに注意してください。内のモジュール場合 &lt;code&gt;compilerOptions&lt;/code&gt; で &lt;code&gt;tsconfig.json&lt;/code&gt; がある &lt;code&gt;commonjs&lt;/code&gt; 、設定が完了すると、他のWebPACKはエラーで失敗します。これは、 &lt;code&gt;ts-node&lt;/code&gt; が &lt;code&gt;commonjs&lt;/code&gt; 以外のモジュール構文をサポートしていないために発生します。</target>
        </trans-unit>
        <trans-unit id="6f66b816c2a36ab4b8c44090b95a9ba474da5377" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;unused harmony export square&lt;/code&gt; comment above. If you look at the code below it, you'll notice that &lt;code&gt;square&lt;/code&gt; is not being imported, however, it is still included in the bundle. We'll fix that in the next section.</source>
          <target state="translated">上記の &lt;code&gt;unused harmony export square&lt;/code&gt; コメントに注意してください。その下のコードを見ると、 &lt;code&gt;square&lt;/code&gt; がインポートされていないことがわかりますが、バンドルにはまだ含まれています。次のセクションで修正します。</target>
        </trans-unit>
        <trans-unit id="f48a6e716c077c9d9a1978a8abd790a7b794e196" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;chunkFilename&lt;/code&gt;, which determines the name of non-entry chunk files. For more information on &lt;code&gt;chunkFilename&lt;/code&gt;, see &lt;a href=&quot;../configuration/output#output-chunkfilename&quot;&gt;output documentation&lt;/a&gt;. We'll also update our project to remove the now unused files:</source>
          <target state="translated">エントリでないチャンクファイルの名前を決定する &lt;code&gt;chunkFilename&lt;/code&gt; の使用に注意してください。詳細については &lt;code&gt;chunkFilename&lt;/code&gt; 、参照&lt;a href=&quot;../configuration/output#output-chunkfilename&quot;&gt;出力のマニュアルを&lt;/a&gt;。プロジェクトを更新して、未使用のファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="4587cc54b0123929cfcbfec9a5a3be8af98046c6" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;merge()&lt;/code&gt; calls in the environment-specific configurations to include our common configuration in &lt;code&gt;webpack.dev.js&lt;/code&gt; and &lt;code&gt;webpack.prod.js&lt;/code&gt;. The &lt;code&gt;webpack-merge&lt;/code&gt; tool offers a variety of advanced features for merging but for our use case we won't need any of that.</source>
          <target state="translated">環境固有の構成で &lt;code&gt;merge()&lt;/code&gt; 呼び出しを使用して、 &lt;code&gt;webpack.dev.js&lt;/code&gt; と &lt;code&gt;webpack.prod.js&lt;/code&gt; に共通の構成を含めることに注意してください。 &lt;code&gt;webpack-merge&lt;/code&gt; ツールは、マージするための高度な機能をご用意しておりますが、当社のユースケースのために、私たちはそのいずれかを必要としません。</target>
        </trans-unit>
        <trans-unit id="d0bb6c2d31383d9a9ef191d6f4abefdb96c47040" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;merge()&lt;/code&gt; in the environment-specific configurations to easily include our common configuration in &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt;. The &lt;code&gt;webpack-merge&lt;/code&gt; tool offers a variety of advanced features for merging but for our use case we won't need any of that.</source>
          <target state="translated">環境固有の構成での &lt;code&gt;merge()&lt;/code&gt; の使用に注意して、 &lt;code&gt;dev&lt;/code&gt; および &lt;code&gt;prod&lt;/code&gt; に共通の構成を簡単に含めることができます。 &lt;code&gt;webpack-merge&lt;/code&gt; ツールは、マージするための高度な機能をご用意しておりますが、当社のユースケースのために、私たちはそのいずれかを必要としません。</target>
        </trans-unit>
        <trans-unit id="e1f83b85255c055aa0dd4ca3bf0926d6f9b529f9" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;webpackChunkName&lt;/code&gt; in the comment. This will cause our separate bundle to be named &lt;code&gt;lodash.bundle.js&lt;/code&gt; instead of just &lt;code&gt;[id].bundle.js&lt;/code&gt;. For more information on &lt;code&gt;webpackChunkName&lt;/code&gt; and the other available options, see the &lt;a href=&quot;../api/module-methods#import-&quot;&gt;&lt;code&gt;import()&lt;/code&gt; documentation&lt;/a&gt;. Let's run webpack to see &lt;code&gt;lodash&lt;/code&gt; separated out to a separate bundle:</source>
          <target state="translated">コメントでの &lt;code&gt;webpackChunkName&lt;/code&gt; の使用に注意してください。これにより、個別のバンドルは &lt;code&gt;[id].bundle.js&lt;/code&gt; だけではなく &lt;code&gt;lodash.bundle.js&lt;/code&gt; という名前になります。詳細については &lt;code&gt;webpackChunkName&lt;/code&gt; およびその他の利用可能なオプション、参照&lt;a href=&quot;../api/module-methods#import-&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt;のドキュメントを。見るためにレッツ・実行のWebPACK &lt;code&gt;lodash&lt;/code&gt; は別のバンドルに分離しました：</target>
        </trans-unit>
        <trans-unit id="9f5400c0110f4aed7f5036b112b3b9ea47989a12" translate="yes" xml:space="preserve">
          <source>Note this option does not affect output files for on-demand-loaded chunks. For these files the &lt;a href=&quot;#output-chunkfilename&quot;&gt;&lt;code&gt;output.chunkFilename&lt;/code&gt;&lt;/a&gt; option is used. Files created by loaders also aren't affected. In this case you would have to try the specific loader's available options.</source>
          <target state="translated">このオプションは、オンデマンドロードされたチャンクの出力ファイルには影響しません。これらのファイルには、&lt;a href=&quot;#output-chunkfilename&quot;&gt; &lt;code&gt;output.chunkFilename&lt;/code&gt; &lt;/a&gt;オプションが使用されます。ローダーによって作成されたファイルも影響を受けません。この場合、特定のローダーの利用可能なオプションを試す必要があります。</target>
        </trans-unit>
        <trans-unit id="d68ef24affd81aa9ec0ac1e315381bce93016298" translate="yes" xml:space="preserve">
          <source>Note this option does not affect output files for on-demand-loaded chunks. It only affects output files that are initially loaded. For on-demand-loaded chunk files the &lt;a href=&quot;#outputchunkfilename&quot;&gt;&lt;code&gt;output.chunkFilename&lt;/code&gt;&lt;/a&gt; option is used. Files created by loaders also aren't affected. In this case you would have to try the specific loader's available options.</source>
          <target state="translated">このオプションは、オンデマンドでロードされたチャンクの出力ファイルには影響しないことに注意してください。最初にロードされる出力ファイルにのみ影響します。オンデマンドでロードされるチャンクファイルの場合、&lt;a href=&quot;#outputchunkfilename&quot;&gt; &lt;code&gt;output.chunkFilename&lt;/code&gt; &lt;/a&gt;オプションが使用されます。ローダーによって作成されたファイルも影響を受けません。この場合、特定のローダーの利用可能なオプションを試す必要があります。</target>
        </trans-unit>
        <trans-unit id="b1ecfcf85915f7191f0d04d5647a8f68d75f6d5e" translate="yes" xml:space="preserve">
          <source>Note this option is called filename but you are still allowed to use something like &lt;code&gt;&quot;js/[name]/bundle.js&quot;&lt;/code&gt; to create a folder structure.</source>
          <target state="translated">このオプションはファイル名と呼ばれますが、 &lt;code&gt;&quot;js/[name]/bundle.js&quot;&lt;/code&gt; ようなものを使用してフォルダ構造を作成することは引き続き許可されています。</target>
        </trans-unit>
        <trans-unit id="f2f889220bcb1a257e3dd5df63c21308173e5413" translate="yes" xml:space="preserve">
          <source>Note this option is called filename but you are still allowed to use something like &lt;code&gt;'js/[name]/bundle.js'&lt;/code&gt; to create a folder structure.</source>
          <target state="translated">このオプションはファイル名と呼ばれますが、 &lt;code&gt;'js/[name]/bundle.js'&lt;/code&gt; ようなものを使用してフォルダー構造を作成することは引き続き許可されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="c3b04644c043c2b78efb2d6b3f1ac6702eb2b70e" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack DevServer&lt;/a&gt; writes in-memory by default. We'll need to enable &lt;a href=&quot;../configuration/dev-server#devserverwritetodisk-&quot;&gt;writeToDisk&lt;/a&gt; option in order for http-server to be able to serve files from &lt;code&gt;./dist&lt;/code&gt; directory.</source>
          <target state="translated">注：&lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack DevServer&lt;/a&gt;は、デフォルトでメモリ内に書き込みます。http-serverが &lt;code&gt;./dist&lt;/code&gt; ディレクトリからファイルを提供できるようにするには、&lt;a href=&quot;../configuration/dev-server#devserverwritetodisk-&quot;&gt;writeToDisk&lt;/a&gt;オプションを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="1f25a706f1d9eb54c7ea9d5344c0c0fc94aab5c2" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;electron&lt;/code&gt;, &lt;code&gt;worker&lt;/code&gt; and &lt;code&gt;worklet&lt;/code&gt; comes combined with either &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;browser&lt;/code&gt;, depending on the context.</source>
          <target state="translated">注： &lt;code&gt;electron&lt;/code&gt; 、 &lt;code&gt;worker&lt;/code&gt; 、 &lt;code&gt;worklet&lt;/code&gt; は、コンテキストに応じて、 &lt;code&gt;node&lt;/code&gt; または &lt;code&gt;browser&lt;/code&gt; いずれかと組み合わされます。</target>
        </trans-unit>
        <trans-unit id="9fa37790c2d905a8e403ed8d2cae24a805ebdb9c" translate="yes" xml:space="preserve">
          <source>Note: HMR is automatically supported in webpack 5. No need to configure it. Skip the following:</source>
          <target state="translated">注:webpack 5ではHMRが自動的にサポートされています。設定する必要はありません。以下はスキップしてください。</target>
        </trans-unit>
        <trans-unit id="14da4a871de5dba95b15a703ecaef4355b68badc" translate="yes" xml:space="preserve">
          <source>Note: It's only applied to dynamically loaded css chunks, if you want to modify link attributes inside html file, please using &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt;</source>
          <target state="translated">注：動的にロードされたcssチャンクにのみ適用されます&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;。html&lt;/a&gt;ファイル内のリンク属性を変更する場合は、html-webpack-pluginを使用してください。</target>
        </trans-unit>
        <trans-unit id="efdb0c93069c7696135c98479c69e6fa546e23fb" translate="yes" xml:space="preserve">
          <source>Note: Only the first valid result will be used, not all valid results.</source>
          <target state="translated">注意:最初の有効な結果のみが使用され、すべての有効な結果が使用されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="4a508da31fbbc7d2749229c9372fdff832cca96e" translate="yes" xml:space="preserve">
          <source>Note: Providing only a ESM comes with restrictions for node.js. Such a package would only work in Node.js &amp;gt;= 14 and only when using &lt;code&gt;import&lt;/code&gt;. It won't work with &lt;code&gt;require()&lt;/code&gt;.</source>
          <target state="translated">注：ESMのみを提供すると、node.jsに制限があります。このようなパッケージは、Node.js&amp;gt; = 14でのみ、 &lt;code&gt;import&lt;/code&gt; を使用する場合にのみ機能します。 &lt;code&gt;require()&lt;/code&gt; では機能しません。</target>
        </trans-unit>
        <trans-unit id="2bf6d6bb7792aab4d7ec1514397af56c2f0ecc75" translate="yes" xml:space="preserve">
          <source>Note: Since &lt;code&gt;production&lt;/code&gt; and &lt;code&gt;development&lt;/code&gt; is not supported by everyone, no assumption should be made when none of these is set.</source>
          <target state="translated">注： &lt;code&gt;production&lt;/code&gt; と &lt;code&gt;development&lt;/code&gt; はすべての人にサポートされているわけではないため、これらのいずれも設定されていない場合は想定しないでください。</target>
        </trans-unit>
        <trans-unit id="b7045840c5a80e8b4884c07fbcf31511f977e190" translate="yes" xml:space="preserve">
          <source>Note: These are the flags with webpack v4, starting v5 CLI also supports &lt;a href=&quot;cli#core-flags&quot;&gt;core flags&lt;/a&gt;</source>
          <target state="translated">注：これらはWebPACKのv4を持つフラグで、V5のCLIを開始することもサポートしている&lt;a href=&quot;cli#core-flags&quot;&gt;コアのフラグを&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e902f7ddd19ae6525e8540c00b2d75d1642a670b" translate="yes" xml:space="preserve">
          <source>Note: This page only discusses using plugins, however if you are interested in writing your own please visit &lt;a href=&quot;https://webpack.js.org/contribute/writing-a-plugin/&quot;&gt;Writing a Plugin&lt;/a&gt;.</source>
          <target state="translated">注：このページではプラグインの使用についてのみ説明していますが、独自&lt;a href=&quot;https://webpack.js.org/contribute/writing-a-plugin/&quot;&gt;のプラグイン&lt;/a&gt;を作成することに興味がある場合は、プラグインの作成にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="15eb3bf90deb8ee595f45bf48e24cec08c3ce209" translate="yes" xml:space="preserve">
          <source>Note: This page only discusses using plugins, however if you are interested in writing your own please visit &lt;a href=&quot;https://webpack.js.org/development/how-to-write-a-plugin/&quot;&gt;Writing a Plugin&lt;/a&gt;.</source>
          <target state="translated">注：このページではプラグインの使用についてのみ説明しますが、独自&lt;a href=&quot;https://webpack.js.org/development/how-to-write-a-plugin/&quot;&gt;のプラグイン&lt;/a&gt;を作成することに興味がある場合は、プラグインの作成にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="fe24033bacbfa2d35049038ddfa9c6e799872e63" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;ts-loader&lt;/code&gt; documentation suggests the use of &lt;code&gt;cache-loader&lt;/code&gt;, but this actually slows the incremental builds down with disk writes.</source>
          <target state="translated">注： &lt;code&gt;ts-loader&lt;/code&gt; のドキュメントでは &lt;code&gt;cache-loader&lt;/code&gt; の使用が推奨されていますが、これは実際にはディスクへの書き込みに伴う増分ビルドの速度を低下させます。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="e8bfaa60c4750e819f443d8e6798a0c1a5b2e589" translate="yes" xml:space="preserve">
          <source>Notes about ordering</source>
          <target state="translated">ご注文時の注意事項</target>
        </trans-unit>
        <trans-unit id="5e049edb6a232b51d2fcf3e47575f1899cfd4c9c" translate="yes" xml:space="preserve">
          <source>Nothing to see here .... yet</source>
          <target state="translated">ここで見るべきものは何もない......まだ</target>
        </trans-unit>
        <trans-unit id="b0cc522d30303e76a33c00b323d39df208ae966a" translate="yes" xml:space="preserve">
          <source>Notice anything different about &lt;code&gt;dist/bundle.js&lt;/code&gt;? Clearly the whole bundle is now minified and mangled, but, if you look carefully, you won't see the &lt;code&gt;square&lt;/code&gt; function included but will see a mangled version of the &lt;code&gt;cube&lt;/code&gt; function (&lt;code&gt;function r(e){return e*e*e}n.a=r&lt;/code&gt;). With minification and tree shaking our bundle is now a few bytes smaller! While that may not seem like much in this contrived example, tree shaking can yield a significant decrease in bundle size when working on larger applications with complex dependency trees.</source>
          <target state="translated">&lt;code&gt;dist/bundle.js&lt;/code&gt; について何か違うことに気づきましたか？明らかに、バンドル全体が縮小されてマングル化されていますが、注意深く見ると、 &lt;code&gt;square&lt;/code&gt; 関数が含まれていないことがわかりますが、 &lt;code&gt;cube&lt;/code&gt; 関数のマングルバージョンが表示されます（ &lt;code&gt;function r(e){return e*e*e}n.a=r&lt;/code&gt; ）。縮小とツリーの揺れにより、バンドルは数バイト小さくなりました！この不自然な例ではそれほど多くは思われないかもしれませんが、複雑な依存関係ツリーを持つ大規模なアプリケーションで作業する場合、ツリーの揺れによりバンドルサイズが大幅に減少することがあります。</target>
        </trans-unit>
        <trans-unit id="db1bc419110e06495e99172056f769c76fe73160" translate="yes" xml:space="preserve">
          <source>Notice anything different about &lt;code&gt;dist/bundle.js&lt;/code&gt;? Clearly the whole bundle is now minified and mangled, but, if you look carefully, you won't see the &lt;code&gt;square&lt;/code&gt; function included but will see a mangled version of the &lt;code&gt;cube&lt;/code&gt; function (&lt;code&gt;function r(e){return e*e*e}n.a=r&lt;/code&gt;). With minification and tree shaking, our bundle is now a few bytes smaller! While that may not seem like much in this contrived example, tree shaking can yield a significant decrease in bundle size when working on larger applications with complex dependency trees.</source>
          <target state="translated">&lt;code&gt;dist/bundle.js&lt;/code&gt; について何か違うことに気づきましたか？明らかにバンドル全体が縮小されてマングルされていますが、注意深く見ると、 &lt;code&gt;square&lt;/code&gt; 関数は含まれていませんが、 &lt;code&gt;cube&lt;/code&gt; 関数のマングルされたバージョンが表示されます（ &lt;code&gt;function r(e){return e*e*e}n.a=r&lt;/code&gt; ）。縮小とツリーの揺れにより、バンドルは数バイト小さくなりました。この不自然な例ではそれほど多くはないように思われるかもしれませんが、複雑な依存関係ツリーを持つ大規模なアプリケーションで作業する場合、ツリーの揺れによってバンドルサイズが大幅に減少する可能性があります。</target>
        </trans-unit>
        <trans-unit id="64d7b4aee25c9561263ab9551fbbdd6475155528" translate="yes" xml:space="preserve">
          <source>Notice that many array configurations allow to reference the default value via &lt;code&gt;&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">多くのアレイ構成では、 &lt;code&gt;&quot;...&quot;&lt;/code&gt; 介してデフォルト値を参照できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6bfed1ae1a19ae18e28dbbf171ef56bb79109e3c" translate="yes" xml:space="preserve">
          <source>Notice that throughout the configuration we use Node's built-in &lt;a href=&quot;https://nodejs.org/api/path.html&quot;&gt;path module&lt;/a&gt; and prefix it with the &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&quot;&gt;__dirname&lt;/a&gt; global. This prevents file path issues between operating systems and allows relative paths to work as expected. See &lt;a href=&quot;https://nodejs.org/api/path.html#path_windows_vs_posix&quot;&gt;this section&lt;/a&gt; for more info on POSIX vs. Windows paths.</source>
          <target state="translated">構成全体を通して、Nodeの組み込み&lt;a href=&quot;https://nodejs.org/api/path.html&quot;&gt;パスモジュール&lt;/a&gt;を使用し、その前に&lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&quot;&gt;__dirname&lt;/a&gt;グローバルを付けることに注意してください。これにより、オペレーティングシステム間のファイルパスの問題が回避され、相対パスが期待どおりに機能するようになります。POSIXパスとWindowsパスの詳細については、&lt;a href=&quot;https://nodejs.org/api/path.html#path_windows_vs_posix&quot;&gt;このセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="226a214c4e2eb4b79e49b7c5e1ed81d16a12d8da" translate="yes" xml:space="preserve">
          <source>Now add an npm script to make it a little easier to run the server:</source>
          <target state="translated">今度はnpmスクリプトを追加して、サーバーを少し動かしやすくします。</target>
        </trans-unit>
        <trans-unit id="ba9c969ad9ef2052b981443836f1219eef634594" translate="yes" xml:space="preserve">
          <source>Now adjust the config. We'll be adding our &lt;code&gt;src/print.js&lt;/code&gt; as a new entry point (&lt;code&gt;print&lt;/code&gt;) and we'll change the output as well, so that it will dynamically generate bundle names, based on the entry point names:</source>
          <target state="translated">次に設定を調整します。 &lt;code&gt;src/print.js&lt;/code&gt; を新しいエントリポイント（ &lt;code&gt;print&lt;/code&gt; ）として追加し、出力も変更して、エントリポイント名に基づいてバンドル名を動的に生成するようにします。</target>
        </trans-unit>
        <trans-unit id="56cdab68da3bdbc6b411b84827c94a87dc498241" translate="yes" xml:space="preserve">
          <source>Now all &lt;code&gt;.svg&lt;/code&gt; files will be encoded by &lt;code&gt;mini-svg-data-uri&lt;/code&gt; package.</source>
          <target state="translated">これで、すべての &lt;code&gt;.svg&lt;/code&gt; ファイルが &lt;code&gt;mini-svg-data-uri&lt;/code&gt; パッケージによってエンコードされます。</target>
        </trans-unit>
        <trans-unit id="ccc79ac956503a03e31c1d81aeba58819266faca" translate="yes" xml:space="preserve">
          <source>Now fire up your browser and go to &lt;code&gt;http://localhost:3000&lt;/code&gt;. You should see your webpack app running and functioning!</source>
          <target state="translated">ブラウザを起動して、 &lt;code&gt;http://localhost:3000&lt;/code&gt; にアクセスします。Webpackアプリが実行され、機能していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="0034d36f4a8922a018612029cd5aa20507ba293d" translate="yes" xml:space="preserve">
          <source>Now from within our entry script (i.e. &lt;code&gt;src/index.js&lt;/code&gt;), we could &lt;code&gt;import { file, parse } from './globals.js';&lt;/code&gt; and all should work smoothly.</source>
          <target state="translated">これで、エントリスクリプト（つまり、 &lt;code&gt;src/index.js&lt;/code&gt; ）内 &lt;code&gt;import { file, parse } from './globals.js';&lt;/code&gt; できました。そして、すべてがスムーズに動作するはずです。</target>
        </trans-unit>
        <trans-unit id="8687eb2354de2500d8e7c20fcc02617bc38c54e1" translate="yes" xml:space="preserve">
          <source>Now from within our entry script (i.e. &lt;code&gt;src/index.js&lt;/code&gt;), we could use &lt;code&gt;const { file, parse } = require('./globals.js');&lt;/code&gt; and all should work smoothly.</source>
          <target state="translated">これで、エントリスクリプト（つまり &lt;code&gt;src/index.js&lt;/code&gt; ）内から、 &lt;code&gt;const { file, parse } = require('./globals.js');&lt;/code&gt; 使用できます。そして、すべてがスムーズに機能するはずです。</target>
        </trans-unit>
        <trans-unit id="77fd810b85b608ae4a0e8b00b4265d713751a351" translate="yes" xml:space="preserve">
          <source>Now in your terminal run &lt;code&gt;npm run server&lt;/code&gt;, it should give you an output similar to this:</source>
          <target state="translated">ターミナルで &lt;code&gt;npm run server&lt;/code&gt; を実行すると、次のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="18401d6763e56a1b0d4bad8ebaaa66901cb3b871" translate="yes" xml:space="preserve">
          <source>Now let's bundle this library in a way that will achieve the following goals:</source>
          <target state="translated">では、次の目的を達成するために、このライブラリをバンドルしてみましょう。</target>
        </trans-unit>
        <trans-unit id="a70cc89b388022d69a6163728328a8c05948be7a" translate="yes" xml:space="preserve">
          <source>Now let's configure webpack to handle TypeScript:</source>
          <target state="translated">それでは、WebpackがTypeScriptを扱うように設定してみましょう。</target>
        </trans-unit>
        <trans-unit id="9df3f71d4a04568b0e39f6f47c094d9602a090cd" translate="yes" xml:space="preserve">
          <source>Now let's make sure we have something to debug, so let's create an error in our &lt;code&gt;print.js&lt;/code&gt; file:</source>
          <target state="translated">次に、デバッグするものがあることを確認して、 &lt;code&gt;print.js&lt;/code&gt; ファイルにエラーを作成します。</target>
        </trans-unit>
        <trans-unit id="3229a4dbd70f76dcc03ac5f7aa8eb2f27ed80939" translate="yes" xml:space="preserve">
          <source>Now let's repoint our &lt;code&gt;scripts&lt;/code&gt; to the new configurations. We'll use the &lt;em&gt;development&lt;/em&gt; one for our &lt;code&gt;webpack-dev-server&lt;/code&gt;, &lt;code&gt;npm start&lt;/code&gt;, script and the &lt;em&gt;production&lt;/em&gt; one for our &lt;code&gt;npm run build&lt;/code&gt; script:</source>
          <target state="translated">次に、 &lt;code&gt;scripts&lt;/code&gt; を新しい構成に再ポイントします。私たちは、使用します&lt;em&gt;開発&lt;/em&gt;私たちのための1つ &lt;code&gt;webpack-dev-server&lt;/code&gt; 、 &lt;code&gt;npm start&lt;/code&gt; 、スクリプトや&lt;em&gt;生産&lt;/em&gt;、私たちのために1を &lt;code&gt;npm run build&lt;/code&gt; スクリプト：</target>
        </trans-unit>
        <trans-unit id="c6c1d1cc7ab59c528e90c3b472368fa33a7ed117" translate="yes" xml:space="preserve">
          <source>Now let's run webpack and check out our new lazy-loading functionality:</source>
          <target state="translated">では、webpackを実行して、新しい遅延ロード機能をチェックしてみましょう。</target>
        </trans-unit>
        <trans-unit id="b357dbc2857140b0c90d8fb740c1c50892deaf49" translate="yes" xml:space="preserve">
          <source>Now let's update the &lt;code&gt;index.js&lt;/code&gt; file so that when a change inside &lt;code&gt;print.js&lt;/code&gt; is detected we tell webpack to accept the updated module.</source>
          <target state="translated">次に、 &lt;code&gt;index.js&lt;/code&gt; ファイルを更新して、 &lt;code&gt;print.js&lt;/code&gt; 内の変更が検出されたときに、更新されたモジュールを受け入れるようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="71b5c89b181903b4550c4426aa8f370a3e20c41e" translate="yes" xml:space="preserve">
          <source>Now let's update the configuration file to make use of the loader.</source>
          <target state="translated">それでは、ローダーを利用するための設定ファイルを更新してみましょう。</target>
        </trans-unit>
        <trans-unit id="2f5e58b0899a174e83a3c9184dc846dd0eba8237" translate="yes" xml:space="preserve">
          <source>Now lets change the import of &lt;code&gt;lodash&lt;/code&gt; in our &lt;code&gt;./index.ts&lt;/code&gt; due to the fact that there is no default export present in &lt;code&gt;lodash&lt;/code&gt; definitions.</source>
          <target state="translated">次に、 &lt;code&gt;lodash&lt;/code&gt; 定義にデフォルトのエクスポートが存在しないため、。 &lt;code&gt;./index.ts&lt;/code&gt; で &lt;code&gt;lodash&lt;/code&gt; のインポートを変更しましょう。</target>
        </trans-unit>
        <trans-unit id="6e465855273d6f2a32129306059f1f12d5ae5391" translate="yes" xml:space="preserve">
          <source>Now open the resulting &lt;code&gt;index.html&lt;/code&gt; file in your browser. Click the button and look in your console where the error is displayed. The error should say something like this:</source>
          <target state="translated">結果の &lt;code&gt;index.html&lt;/code&gt; ファイルをブラウザーで開きます。ボタンをクリックして、エラーが表示されているコンソールを確認します。エラーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="4e7301a0388be473c7b02660fc1b9c005fb15f3f" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;npm run watch&lt;/code&gt; from the command line and see how webpack compiles your code. You can see that it doesn't exit the command line because the script is currently watching your files.</source>
          <target state="translated">次に、コマンドラインから &lt;code&gt;npm run watch&lt;/code&gt; を実行し、webpackがコードをコンパイルする方法を確認します。スクリプトが現在ファイルを監視しているため、コマンドラインを終了しないことがわかります。</target>
        </trans-unit>
        <trans-unit id="a8819a3694737e7abc14d60fcbf8c0bb4201c624" translate="yes" xml:space="preserve">
          <source>Now run a new build and let's see if webpack handled our fonts:</source>
          <target state="translated">では、新しいビルドを実行して、webpack がフォントを扱うかどうかを確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="8bc10b3505d1b8a53aea70ead4b91821f2ae548d" translate="yes" xml:space="preserve">
          <source>Now run an &lt;code&gt;npm run build&lt;/code&gt; and inspect the &lt;code&gt;/dist&lt;/code&gt; folder. If everything went well you should now only see the files generated from the build and no more old files!</source>
          <target state="translated">次に、 &lt;code&gt;npm run build&lt;/code&gt; を実行して、 &lt;code&gt;/dist&lt;/code&gt; フォルダーを検査します。すべてがうまくいけば、ビルドから生成されたファイルだけが表示され、古いファイルは表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="c980596675b42b015fa33b5ec44395e051396087" translate="yes" xml:space="preserve">
          <source>Now run the following command and see if your script alias works:</source>
          <target state="translated">次のコマンドを実行して、スクリプトのエイリアスが動作するかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="51925bf23211310f8cdb3feec20b576227cc12df" translate="yes" xml:space="preserve">
          <source>Now run your build command:</source>
          <target state="translated">ここでビルドコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8bc24f3703809a27283cf6928903a1da64a677fa" translate="yes" xml:space="preserve">
          <source>Now save your file and check the terminal window. You should see that webpack automatically recompiles the changed module!</source>
          <target state="translated">ファイルを保存してターミナルウィンドウを確認してください。webpack が自動的に変更されたモジュールを再コンパイルしているのがわかるはずです!</target>
        </trans-unit>
        <trans-unit id="b0a22991df6a10bea7b0cd5b6859050cd2788ab5" translate="yes" xml:space="preserve">
          <source>Now that you have a basic build together you should move on to the next guide &lt;a href=&quot;asset-management&quot;&gt;&lt;code&gt;Asset Management&lt;/code&gt;&lt;/a&gt; to learn how to manage assets like images and fonts with webpack. At this point, your project should look like this:</source>
          <target state="translated">これで基本的なビルドが完了したので、次のガイドの&lt;a href=&quot;asset-management&quot;&gt; &lt;code&gt;Asset Management&lt;/code&gt; &lt;/a&gt;に進んで、画像やフォントなどのアセットをWebpackで管理する方法を学ぶ必要があります。この時点で、プロジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="63f3473f5e6ea29aae9778ab6ce863473f1f035c" translate="yes" xml:space="preserve">
          <source>Now that you've learned about dynamically adding bundles to your HTML, let's dive into the &lt;a href=&quot;development&quot;&gt;development guide&lt;/a&gt;. Or, if you want to dig into more advanced topics, we would recommend heading over to the &lt;a href=&quot;code-splitting&quot;&gt;code splitting guide&lt;/a&gt;.</source>
          <target state="translated">バンドルをHTMLに動的に追加する方法を学習したので、&lt;a href=&quot;development&quot;&gt;開発ガイドに&lt;/a&gt;飛び込んでみましょう。または、より高度なトピックを掘り下げたい場合は、&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割ガイド&lt;/a&gt;をご覧になることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c8fd584df8d9df719d43b557d48ad32300a5aa0a" translate="yes" xml:space="preserve">
          <source>Now that you've learned how to automatically compile your code and run a simple development server, you can check out the next guide, which will cover &lt;a href=&quot;code-splitting&quot;&gt;Code Splitting&lt;/a&gt;.</source>
          <target state="translated">コードを自動的にコンパイルして簡単な開発サーバーを実行する方法を学習したので、&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割&lt;/a&gt;について説明する次のガイドを確認できます。</target>
        </trans-unit>
        <trans-unit id="4e6078b764dd6ee14190b4f56b64b8835f7f586a" translate="yes" xml:space="preserve">
          <source>Now that you've learned how to automatically compile your code and run a simple development server, you can check out the next guide, which will cover &lt;a href=&quot;hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt;.</source>
          <target state="translated">コードを自動的にコンパイルして簡単な開発サーバーを実行する方法を学習したので、次のガイドで&lt;a href=&quot;hot-module-replacement&quot;&gt;ホットモジュールの交換について説明し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a68fcc5f419a8da05abd5181c9cc69d770f8fd8f" translate="yes" xml:space="preserve">
          <source>Now that your server is working, you might want to give &lt;a href=&quot;hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt; a try!</source>
          <target state="translated">サーバーが動作しているので、&lt;a href=&quot;hot-module-replacement&quot;&gt;ホットモジュールの交換&lt;/a&gt;を試してみてください。</target>
        </trans-unit>
        <trans-unit id="a2d984465f0c1b21f3d0ec45a0fe32d762bf606b" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;npm run build&lt;/code&gt; command can be used in place of the &lt;code&gt;npx&lt;/code&gt; command we used earlier. Note that within &lt;code&gt;scripts&lt;/code&gt; we can reference locally installed npm packages by name the same way we did with &lt;code&gt;npx&lt;/code&gt;. This convention is the standard in most npm-based projects because it allows all contributors to use the same set of common scripts (each with flags like &lt;code&gt;--config&lt;/code&gt; if necessary).</source>
          <target state="translated">これで、前に使用した &lt;code&gt;npx&lt;/code&gt; コマンドの代わりに &lt;code&gt;npm run build&lt;/code&gt; コマンドを使用できます。 &lt;code&gt;scripts&lt;/code&gt; 内では、ローカルにインストールされたnpmパッケージを、 &lt;code&gt;npx&lt;/code&gt; で行ったのと同じ方法で名前で参照できることに注意してください。この規則は、すべての寄稿者が同じ共通スクリプトのセットを使用できるようにするため、ほとんどのnpmベースのプロジェクトの標準です（必要に応じて、それぞれに &lt;code&gt;--config&lt;/code&gt; のようなフラグを付けます）。</target>
        </trans-unit>
        <trans-unit id="e7c36cf17ca76d0db87bec101748d0bfa22867c3" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;npm run build&lt;/code&gt; command can be used in place of the &lt;code&gt;npx&lt;/code&gt; command we used earlier. Note that within &lt;code&gt;scripts&lt;/code&gt; we can reference locally installed npm packages by name the same way we did with &lt;code&gt;npx&lt;/code&gt;. This convention is the standard in most npm-based projects because it allows all contributors to use the same set of common scripts.</source>
          <target state="translated">これで、以前に使用した &lt;code&gt;npx&lt;/code&gt; コマンドの代わりに &lt;code&gt;npm run build&lt;/code&gt; runbuildコマンドを使用できるようになりました。 &lt;code&gt;scripts&lt;/code&gt; 内では、 &lt;code&gt;npx&lt;/code&gt; で行ったのと同じ方法で、ローカルにインストールされたnpmパッケージを名前で参照できることに注意してください。この規則は、すべての寄稿者が同じ共通スクリプトのセットを使用できるため、ほとんどのnpmベースのプロジェクトの標準です。</target>
        </trans-unit>
        <trans-unit id="e270bde6ce552781a474737a3e2add61123b1002" translate="yes" xml:space="preserve">
          <source>Now to test it. Stop your server and refresh your page. If your browser supports Service Workers then you should still be looking at your application. However, it has been served up by your Service Worker and &lt;strong&gt;not&lt;/strong&gt; by the server.</source>
          <target state="translated">それをテストします。サーバーを停止してページを更新します。ブラウザーがService Workersをサポートしている場合でも、アプリケーションを確認する必要があります。ただし、サーバーで&lt;strong&gt;はなく&lt;/strong&gt;サービスワーカーによって提供されています。</target>
        </trans-unit>
        <trans-unit id="3429ffa15c0495b0937445ca31923a90c00d6386" translate="yes" xml:space="preserve">
          <source>Now we can &lt;code&gt;fetch&lt;/code&gt; some data within our entry script:</source>
          <target state="translated">これで、エントリスクリプト内でデータを &lt;code&gt;fetch&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="f093f6e8b13dfdaefb7b274645cdc1f312a7f06f" translate="yes" xml:space="preserve">
          <source>Now we can run &lt;code&gt;npm start&lt;/code&gt; from the command line and we will see our browser automatically loading up our page. If you now change any of the source files and save them, the web server will automatically reload after the code has been compiled. Give it a try!</source>
          <target state="translated">これで、コマンドラインから &lt;code&gt;npm start&lt;/code&gt; を実行できるようになり、ブラウザーが自動的にページをロードするのがわかります。ソースファイルを変更して保存すると、コードのコンパイル後にWebサーバーが自動的に再読み込みされます。試してみる！</target>
        </trans-unit>
        <trans-unit id="2f28031dc5f208149117e7b6980c34e1b46cf0d9" translate="yes" xml:space="preserve">
          <source>Now we need to make some adjustments to our webpack configuration file in order to make sure the middleware will function correctly:</source>
          <target state="translated">さて、ミドルウェアが正しく機能するようにするために、webpack の設定ファイルを調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="faeadf5a50de73054f1905eac6886f957bfced3b" translate="yes" xml:space="preserve">
          <source>Now we need to tell webpack to extract these source maps and include in our final bundle:</source>
          <target state="translated">ここで、webpack にこれらのソースマップを抽出して最終的なバンドルに含めるように指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="6803b16f69e184ab5c2f00b5adc4e2e50fea89fd" translate="yes" xml:space="preserve">
          <source>Now we need to tell webpack to extract these source maps and into our final bundle:</source>
          <target state="translated">ここで、webpack にこれらのソースマップを抽出して最終的なバンドルに入れるように指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="daa2cc1ebd5f54388aa2a4c401a9c199eb5e43d4" translate="yes" xml:space="preserve">
          <source>Now we'll create the following directory structure, files and their contents:</source>
          <target state="translated">それでは、以下のようなディレクトリ構造、ファイルとその内容を作成します。</target>
        </trans-unit>
        <trans-unit id="6562086000c2c226ec3f442cf46f81b89bd3de6e" translate="yes" xml:space="preserve">
          <source>Now we'll modify the directory structure &amp;amp; the configuration files:</source>
          <target state="translated">次に、ディレクトリ構造と構成ファイルを変更します。</target>
        </trans-unit>
        <trans-unit id="c1c0259376514fcbb277498cdd385758d7f38c97" translate="yes" xml:space="preserve">
          <source>Now webpack will automatically choose between &lt;code&gt;resource&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt; by following a default condition: a file with size less than 8kb will be treated as a &lt;code&gt;inline&lt;/code&gt; module type and &lt;code&gt;resource&lt;/code&gt; module type otherwise.</source>
          <target state="translated">これで、webpackはデフォルトの条件に従って、 &lt;code&gt;resource&lt;/code&gt; と &lt;code&gt;inline&lt;/code&gt; どちらかを自動的に選択します。サイズが8kb未満のファイルは、 &lt;code&gt;inline&lt;/code&gt; モジュールタイプとして扱われ、それ以外の場合は &lt;code&gt;resource&lt;/code&gt; モジュールタイプとして扱われます。</target>
        </trans-unit>
        <trans-unit id="31b35117645d81df56c33faf2b4b4d353a9955cf" translate="yes" xml:space="preserve">
          <source>Now while this is one approach, &lt;strong&gt;including polyfills in the main bundle is not recommended&lt;/strong&gt; because this penalizes modern browsers users by making them download a bigger file with unneeded scripts.</source>
          <target state="translated">現在、これは1つのアプローチ&lt;strong&gt;ですが、メインバンドルにポリフィルを含める&lt;/strong&gt;こと&lt;strong&gt;はお勧めしません&lt;/strong&gt;。これ&lt;strong&gt;は&lt;/strong&gt;、不要なスクリプトを含む大きなファイルをダウンロードさせることにより、最新のブラウザーユーザーに不利益&lt;strong&gt;を与える&lt;/strong&gt;ためです。</target>
        </trans-unit>
        <trans-unit id="c017ac0b58a1e44fd17a64785c17d91b2434e315" translate="yes" xml:space="preserve">
          <source>Now you can &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;publish it as an npm package&lt;/a&gt; and find it at &lt;a href=&quot;https://unpkg.com/#/&quot;&gt;unpkg.com&lt;/a&gt; to distribute it to your users.</source>
          <target state="translated">これで&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;、それをnpmパッケージとして公開し&lt;/a&gt;、&lt;a href=&quot;https://unpkg.com/#/&quot;&gt;unpkg.comで&lt;/a&gt;見つけてユーザーに配布できます。</target>
        </trans-unit>
        <trans-unit id="c56a5281cd3189f4c2a26baaf0f26739acba3635" translate="yes" xml:space="preserve">
          <source>Now you can &lt;code&gt;import&lt;/code&gt; any one of those four types of data (JSON, CSV, TSV, XML) and the &lt;code&gt;Data&lt;/code&gt; variable you import it to will contain parsed JSON for easy consumption:</source>
          <target state="translated">これで、これらの4種類のデータ（JSON、CSV、TSV、XML）のいずれか1つを &lt;code&gt;import&lt;/code&gt; できます。インポートする &lt;code&gt;Data&lt;/code&gt; 変数には、簡単に使用できるように解析されたJSONが含まれます。</target>
        </trans-unit>
        <trans-unit id="d9970898e87d8cc7da44535b873ed439e8a04414" translate="yes" xml:space="preserve">
          <source>Now you can &lt;code&gt;import&lt;/code&gt; any one of those four types of data (JSON, CSV, TSV, XML) and the &lt;code&gt;Data&lt;/code&gt; variable you import, will contain parsed JSON for easy consumption:</source>
          <target state="translated">これで、これら4種類のデータ（JSON、CSV、TSV、XML）のいずれかを &lt;code&gt;import&lt;/code&gt; でき、インポートする &lt;code&gt;Data&lt;/code&gt; 変数には、簡単に使用できるように解析されたJSONが含まれます。</target>
        </trans-unit>
        <trans-unit id="265845569f199bb01e68a398054540a25437c594" translate="yes" xml:space="preserve">
          <source>Now, despite any new local dependencies, our &lt;code&gt;vendor&lt;/code&gt; hash should stay consistent between builds:</source>
          <target state="translated">これで、新しいローカル依存関係があるにもかかわらず、 &lt;code&gt;vendor&lt;/code&gt; ハッシュはビルド間で一貫性を保つ必要があります。</target>
        </trans-unit>
        <trans-unit id="f761146f1614b48479a5e6ca2bd6ebf8ba49cee3" translate="yes" xml:space="preserve">
          <source>Now, if you run &lt;code&gt;webpack&lt;/code&gt;, you will find that a largish bundle is created. If you inspect the file, you'll see that lodash has been bundled along with your code. In this case, we'd prefer to treat &lt;code&gt;lodash&lt;/code&gt; as a &lt;code&gt;peerDependency&lt;/code&gt;. Meaning that the consumer should already have &lt;code&gt;lodash&lt;/code&gt; installed. Hence you would want to give up control of this external library to the consumer of your library.</source>
          <target state="translated">これで、 &lt;code&gt;webpack&lt;/code&gt; を実行すると、大量のバンドルが作成されていることがわかります。ファイルを調べると、lodashがコードにバンドルされていることがわかります。この場合、 &lt;code&gt;lodash&lt;/code&gt; をpeerDependencyとして扱うことをお &lt;code&gt;peerDependency&lt;/code&gt; ます。つまり、コンシューマはすでに &lt;code&gt;lodash&lt;/code&gt; をインストールしている必要があります。したがって、この外部ライブラリの制御をライブラリの利用者に譲る必要があります。</target>
        </trans-unit>
        <trans-unit id="a629b8ca075bd87b327deed9d51fd9489a0a6b97" translate="yes" xml:space="preserve">
          <source>Now, instead of statically importing &lt;code&gt;lodash&lt;/code&gt;, we'll use dynamic importing to separate a chunk:</source>
          <target state="translated">ここで、 &lt;code&gt;lodash&lt;/code&gt; を静的にインポートする代わりに、動的インポートを使用してチャンクを分離します。</target>
        </trans-unit>
        <trans-unit id="0cd00ca893b2a0749390d1af07518b98228e0602" translate="yes" xml:space="preserve">
          <source>Now, instead of using relative paths when importing like so:</source>
          <target state="translated">さて、このようにインポート時に相対パスを使用する代わりに</target>
        </trans-unit>
        <trans-unit id="b20ecdfe2808997838121f90cdf0692edefe9ec9" translate="yes" xml:space="preserve">
          <source>Now, let's import &lt;code&gt;lodash&lt;/code&gt; in our script:</source>
          <target state="translated">それでは、スクリプトに &lt;code&gt;lodash&lt;/code&gt; をインポートしましょう。</target>
        </trans-unit>
        <trans-unit id="adabbcf9ec455aa4d0fad9c1ed9fdf5b17ad2bfc" translate="yes" xml:space="preserve">
          <source>Now, let's modify our npm scripts to use the new configuration files. For the &lt;code&gt;start&lt;/code&gt; script, which runs &lt;code&gt;webpack-dev-server&lt;/code&gt;, we will use &lt;code&gt;webpack.dev.js&lt;/code&gt;, and for the &lt;code&gt;build&lt;/code&gt; script, which runs &lt;code&gt;webpack&lt;/code&gt; to create a production build, we will use &lt;code&gt;webpack.prod.js&lt;/code&gt;:</source>
          <target state="translated">それでは、新しい構成ファイルを使用するようにnpmスクリプトを変更しましょう。以下のために &lt;code&gt;start&lt;/code&gt; を実行するスクリプト、 &lt;code&gt;webpack-dev-server&lt;/code&gt; 、我々は、使用する &lt;code&gt;webpack.dev.js&lt;/code&gt; を、とのために &lt;code&gt;build&lt;/code&gt; を実行するスクリプト、 &lt;code&gt;webpack&lt;/code&gt; 生産ビルドを作成するために、我々は、使用する &lt;code&gt;webpack.prod.js&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="874226ce9b8d4f709d901e4a8f3b465be18e2ead" translate="yes" xml:space="preserve">
          <source>Now, let's run the build again but instead using our new configuration file:</source>
          <target state="translated">では、もう一度ビルドを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="986bf8dcf09bfee2a81153f0cc4b7d4079a76fdd" translate="yes" xml:space="preserve">
          <source>Now, let's run the server:</source>
          <target state="translated">では、サーバーを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="1680bb02d344f54fd6614cf2db07f6f8b483e824" translate="yes" xml:space="preserve">
          <source>Now, lets import &lt;code&gt;lodash&lt;/code&gt; in our script:</source>
          <target state="translated">では、スクリプトに &lt;code&gt;lodash&lt;/code&gt; をインポートしましょう。</target>
        </trans-unit>
        <trans-unit id="c3a524c91d6d4686d61a055b1eccdee27c5871f7" translate="yes" xml:space="preserve">
          <source>Now, since we'll be bundling our scripts, we have to update our &lt;code&gt;index.html&lt;/code&gt; file. Let's remove the lodash &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, as we now &lt;code&gt;import&lt;/code&gt; it, and modify the other &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to load the bundle, instead of the raw &lt;code&gt;./src&lt;/code&gt; file:</source>
          <target state="translated">ここで、スクリプトをバンドルするので、 &lt;code&gt;index.html&lt;/code&gt; ファイルを更新する必要があります。レッツ・削除lodash &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 、我々は今のように &lt;code&gt;import&lt;/code&gt; 、それを、およびその他の変更 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; の代わりに生の、バンドルをロードするためのタグを &lt;code&gt;./src&lt;/code&gt; のファイル：</target>
        </trans-unit>
        <trans-unit id="3329ecf744f220187e0a153c22fffbf77657a9cd" translate="yes" xml:space="preserve">
          <source>Now, since we'll be bundling our scripts, we have to update our &lt;code&gt;index.html&lt;/code&gt; file. Let's remove the lodash &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, as we now &lt;code&gt;import&lt;/code&gt; it, and modify the other &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to load the bundle, instead of the raw &lt;code&gt;/src&lt;/code&gt; file:</source>
          <target state="translated">次に、スクリプトをバンドルするので、 &lt;code&gt;index.html&lt;/code&gt; ファイルを更新する必要があります。lodash &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; を削除してみましょう。今度はそれを &lt;code&gt;import&lt;/code&gt; し、他の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを変更して、未加工の &lt;code&gt;/src&lt;/code&gt; ファイルの代わりにバンドルをロードします。</target>
        </trans-unit>
        <trans-unit id="b6aed7a8c232d4f22dcc8c9e16fdd539b90239b3" translate="yes" xml:space="preserve">
          <source>Now, when you &lt;code&gt;import MyImage from './my-image.png'&lt;/code&gt;, that image will be processed and added to your &lt;code&gt;output&lt;/code&gt; directory &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;MyImage&lt;/code&gt; variable will contain the final url of that image after processing. When using the &lt;a href=&quot;../loaders/css-loader&quot;&gt;css-loader&lt;/a&gt;, as shown above, a similar process will occur for &lt;code&gt;url('./my-image.png')&lt;/code&gt; within your CSS. The loader will recognize this is a local file, and replace the &lt;code&gt;'./my-image.png'&lt;/code&gt; path with the final path to the image in your &lt;code&gt;output&lt;/code&gt; directory. The &lt;a href=&quot;../loaders/html-loader&quot;&gt;html-loader&lt;/a&gt; handles &lt;code&gt;&amp;lt;img src=&quot;./my-image.png&quot; /&amp;gt;&lt;/code&gt; in the same manner.</source>
          <target state="translated">あなたは今とき、 &lt;code&gt;import MyImage from './my-image.png'&lt;/code&gt; 、その画像を処理し、あなたに追加される &lt;code&gt;output&lt;/code&gt; ディレクトリ&lt;em&gt;と&lt;/em&gt; &lt;code&gt;MyImage&lt;/code&gt; 変数は、処理後にその画像の最終URLが含まれています。上記の&lt;a href=&quot;../loaders/css-loader&quot;&gt;css-loader&lt;/a&gt;を使用する場合、CSS内の &lt;code&gt;url('./my-image.png')&lt;/code&gt; に対して同様のプロセスが発生します。ローダーはこれがローカルファイルであることを認識し、 &lt;code&gt;'./my-image.png'&lt;/code&gt; パスを &lt;code&gt;output&lt;/code&gt; ディレクトリ内の画像への最終パスに置き換えます。&lt;a href=&quot;../loaders/html-loader&quot;&gt;HTMLローダー&lt;/a&gt;ハンドル &lt;code&gt;&amp;lt;img src=&quot;./my-image.png&quot; /&amp;gt;&lt;/code&gt; 同様インチ</target>
        </trans-unit>
        <trans-unit id="6b7da57438c329ba7464308376a362cbddd7baa9" translate="yes" xml:space="preserve">
          <source>Now, while webpack is watching your files, let's remove the error we introduced earlier:</source>
          <target state="translated">さて、webpackがファイルを監視している間に、先ほど紹介したエラーを削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="d81b4a09efa67c7104acb6c4bee17b6c13687d8f" translate="yes" xml:space="preserve">
          <source>Now, while you'd likely never do this in your own source code, you may encounter a dated library you'd like to use that contains similar code to what's shown above. In this case, we can use &lt;a href=&quot;../loaders/exports-loader&quot;&gt;&lt;code&gt;exports-loader&lt;/code&gt;&lt;/a&gt;, to export that global variable as a normal module export. For instance, in order to export &lt;code&gt;file&lt;/code&gt; as &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;helpers.parse&lt;/code&gt; as &lt;code&gt;parse&lt;/code&gt;:</source>
          <target state="translated">これで、独自のソースコードでこれを実行することはほとんどありませんが、上記と同様のコードを含む、使用したい日付の付いたライブラリに遭遇する可能性があります。この場合、&lt;a href=&quot;../loaders/exports-loader&quot;&gt; &lt;code&gt;exports-loader&lt;/code&gt; を&lt;/a&gt;使用して、そのグローバル変数を通常のモジュールエクスポートとしてエクスポートできます。たとえば、 &lt;code&gt;file&lt;/code&gt; として、 &lt;code&gt;helpers.parse&lt;/code&gt; を &lt;code&gt;parse&lt;/code&gt; としてエクスポートするには、次のようにし &lt;code&gt;file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="399d20d411a9c4dff19abde6554a5d895eb38571" translate="yes" xml:space="preserve">
          <source>NpmInstallWebpackPlugin</source>
          <target state="translated">NpmInstallWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="be3a794df3289dcdea5cded366c1d14e024a75cc" translate="yes" xml:space="preserve">
          <source>Number of concurrent runs.</source>
          <target state="translated">同時実行数。</target>
        </trans-unit>
        <trans-unit id="0dd75d7fe90f97130245d0b8fb2d960bf44b4a9b" translate="yes" xml:space="preserve">
          <source>Number of loaders applied before CSS loader</source>
          <target state="translated">CSSローダーの前に適用されたローダーの数</target>
        </trans-unit>
        <trans-unit id="1b52ac3b1bd1ab12ad0b5dd55afd7d6dde5b1b25" translate="yes" xml:space="preserve">
          <source>Number of milliseconds before chunk request expires, defaults to 120 000. This option is supported since webpack 2.6.0.</source>
          <target state="translated">チャンク要求が終了するまでのミリ秒数、 デフ ォル ト は 120 000 です。このオプションは webpack 2.6.0 以降でサポートされています。</target>
        </trans-unit>
        <trans-unit id="901f17aa3f91e65ae1ee66189fc0f089dcf0c02a" translate="yes" xml:space="preserve">
          <source>Number of milliseconds before chunk request expires. This option is supported since webpack 2.6.0.</source>
          <target state="translated">チャンク要求が終了するまでのミリ秒数。このオプションは webpack 2.6.0 以降でサポートされています。</target>
        </trans-unit>
        <trans-unit id="0212cd646bc12e7ab81418c0727de624e88b46fd" translate="yes" xml:space="preserve">
          <source>Numeric ids focused on minimal initial download size.</source>
          <target state="translated">初期ダウンロードサイズの最小化に焦点を当てた数値化されたID。</target>
        </trans-unit>
        <trans-unit id="279e2a8042e6c1e723f14430d3457cf6f78830df" translate="yes" xml:space="preserve">
          <source>Numeric ids in order of usage.</source>
          <target state="translated">使用順に数字のIDを表示します。</target>
        </trans-unit>
        <trans-unit id="68654e143c9a95a12dddf5b994152ad350c30fec" translate="yes" xml:space="preserve">
          <source>Object Syntax</source>
          <target state="translated">オブジェクト構文</target>
        </trans-unit>
        <trans-unit id="8afd3dd49c477e002270c0d5f378c9d16db538c4" translate="yes" xml:space="preserve">
          <source>Objects are made using strings, while strings are made using double strings. This means that in order for you to create a string, you have to wrap it inside another string for us to validate it correctly.</source>
          <target state="translated">オブジェクトは文字列を使って作られますが、文字列は二重文字列を使って作られます。つまり、文字列を作成するためには、文字列を別の文字列の中にラップしなければならず、それを正しく検証することができません。</target>
        </trans-unit>
        <trans-unit id="7947d508a33ca1ae0b7138218e54d2bb97876b9c" translate="yes" xml:space="preserve">
          <source>OccurenceOrderPlugin</source>
          <target state="translated">OccurenceOrderPlugin</target>
        </trans-unit>
        <trans-unit id="dc2284b54a904eb3a4b7df2c787412d7142025db" translate="yes" xml:space="preserve">
          <source>Offers a pseudo &lt;code&gt;console&lt;/code&gt; if it is not available.</source>
          <target state="translated">使用できない場合は、疑似 &lt;code&gt;console&lt;/code&gt; 提供します。</target>
        </trans-unit>
        <trans-unit id="c1721ea0ada849ea800504498417a4b2c890ec62" translate="yes" xml:space="preserve">
          <source>Often webpack users use npm &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt; as their task runner. This is a good starting point. Cross-platform support can become a problem, but there are several workarounds for that. Many, if not most users, get by with simple npm &lt;code&gt;scripts&lt;/code&gt; and various levels of webpack configuration and tooling.</source>
          <target state="translated">多くの場合、webpackユーザーはタスクランナーとしてnpm &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt; &lt;code&gt;scripts&lt;/code&gt; &lt;/a&gt;を使用します。これは良い出発点です。クロスプラットフォームのサポートが問題になる可能性がありますが、これにはいくつかの回避策があります。ほとんどではないにしても、多くのユーザーは、単純なnpm &lt;code&gt;scripts&lt;/code&gt; とさまざまなレベルのWebpack構成およびツールを使用して問題を解決します。</target>
        </trans-unit>
        <trans-unit id="af40757d14939f1cc0546783a2c27d00cfd0e05d" translate="yes" xml:space="preserve">
          <source>Old school Task Runners and even Google Closure Compiler requires you to manually declare all dependencies upfront. While bundlers like webpack automatically builds and infer your &lt;a href=&quot;dependency-graph&quot;&gt;dependency graph&lt;/a&gt; based on what is imported and exported. This along with other &lt;a href=&quot;plugins&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;loaders&quot;&gt;loaders&lt;/a&gt; make for a great developer experience.</source>
          <target state="translated">古い学校のタスクランナーやGoogleクロージャーコンパイラでさえ、すべての依存関係を事前に手動で宣言する必要があります。webpackのようなバンドラーは、インポートおよびエクスポートされたものに基づいて&lt;a href=&quot;dependency-graph&quot;&gt;依存関係グラフ&lt;/a&gt;を自動的に作成および推測します。これは、他の&lt;a href=&quot;plugins&quot;&gt;プラグイン&lt;/a&gt;や&lt;a href=&quot;loaders&quot;&gt;ローダー&lt;/a&gt;とともに、優れた開発者エクスペリエンスを実現します。</target>
        </trans-unit>
        <trans-unit id="8cacfd7b2aa9def28f5bf082992036b355875999" translate="yes" xml:space="preserve">
          <source>Older Versions</source>
          <target state="translated">古いバージョン</target>
        </trans-unit>
        <trans-unit id="f4feaa47f1e0f091d117b8cee638f02e96b61670" translate="yes" xml:space="preserve">
          <source>On The Fly</source>
          <target state="translated">オンザフライ</target>
        </trans-unit>
        <trans-unit id="7de9397c7392465a52ccc17659d99604f9bc08a6" translate="yes" xml:space="preserve">
          <source>On macOS, folders can get corrupted in certain scenarios. See &lt;a href=&quot;https://github.com/livereload/livereload-site/blob/master/livereload.com/_articles/troubleshooting/os-x-fsevents-bug-may-prevent-monitoring-of-certain-folders.md&quot;&gt;this article&lt;/a&gt;.</source>
          <target state="translated">macOSでは、特定のシナリオでフォルダーが破損する可能性があります。&lt;a href=&quot;https://github.com/livereload/livereload-site/blob/master/livereload.com/_articles/troubleshooting/os-x-fsevents-bug-may-prevent-monitoring-of-certain-folders.md&quot;&gt;この記事を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84b858cc3d43880aa44f3a030f7d826f5e1d7470" translate="yes" xml:space="preserve">
          <source>On some machines Vim is preconfigured with the &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#'backupcopy'&quot;&gt;backupcopy option&lt;/a&gt; set to &lt;code&gt;auto&lt;/code&gt;. This could potentially cause problems with the system's file watching mechanism. Switching this option to &lt;code&gt;yes&lt;/code&gt; will make sure a copy of the file is made and the original one overwritten on save.</source>
          <target state="translated">一部のマシンでは、Vimは&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#'backupcopy'&quot;&gt;backupcopyオプション&lt;/a&gt;を &lt;code&gt;auto&lt;/code&gt; に設定して事前構成されています。これにより、システムのファイル監視メカニズムで問題が発生する可能性があります。このオプションを &lt;code&gt;yes&lt;/code&gt; に切り替えると、ファイルのコピーが作成され、保存時に元のファイルが上書きされます。</target>
        </trans-unit>
        <trans-unit id="d6798ad6de81322dfee53e4558a7194dfe6d9bb6" translate="yes" xml:space="preserve">
          <source>On the Insecurity of Whitelists and the Future of Content Security Policy</source>
          <target state="translated">ホワイトリストの安全性とコンテンツセキュリティポリシーの将来について</target>
        </trans-unit>
        <trans-unit id="a6c980b247f3551dd7e4427a00e75136a1cdaf07" translate="yes" xml:space="preserve">
          <source>On the other hand, if you want to externalise a library that is available as a CommonJS module, you can provide the external library type together with the library name.</source>
          <target state="translated">一方、CommonJSモジュールとして利用可能なライブラリを外部化したい場合は、ライブラリ名と一緒に外部ライブラリタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="0aa558b005274b7fbff68234975b9efb7bb566c5" translate="yes" xml:space="preserve">
          <source>On the other hand, the provider of the replacement modules, will only provide asynchronous loading functions. It allows the container to load replacement modules only when they are needed. The provider will manage replacement modules in a way that they do not need to be downloaded at all when they are not requested by the container. This usually happens by placing them into separate chunks.</source>
          <target state="translated">一方、置換モジュールの提供元であるコンテナは、非同期のロード機能のみを提供します。これにより、コンテナが必要とするときにのみ、置換モジュールをロードすることができるようになる。プロバイダは、コンテナが要求していないときには、置き換えモジュールをダウンロードする必要がないように管理します。これは通常、モジュールを別々のチャンクに配置することで行われます。</target>
        </trans-unit>
        <trans-unit id="ff78f30ec56f6105598ce29b71aaed70575b3650" translate="yes" xml:space="preserve">
          <source>Once more &lt;code&gt;npm run build&lt;/code&gt; to build a version of the app including the registration code. Then serve it with &lt;code&gt;npm start&lt;/code&gt;. Navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt; and take a look at the console. Somewhere in there you should see:</source>
          <target state="translated">もう一度 &lt;code&gt;npm run build&lt;/code&gt; て、登録コードを含むアプリのバージョンをビルドします。次に、それを &lt;code&gt;npm start&lt;/code&gt; で提供します。移動し &lt;code&gt;http://localhost:8080&lt;/code&gt; とコンソールを見てみましょう。どこかであなたは見るべきです：</target>
        </trans-unit>
        <trans-unit id="02ed0e62fa33898ffdff4abc0a942e61293061af" translate="yes" xml:space="preserve">
          <source>Once the path is resolved based on the above rule, the resolver checks to see if the path points to a file or a directory. If the path points to a file:</source>
          <target state="translated">上記のルールに基づいてパスが解決されると、リゾルバはパスがファイルを指しているかディレクトリを指しているかを確認します。パスがファイルを指している場合</target>
        </trans-unit>
        <trans-unit id="56fd850a2bc86a27439d2644ee02a9390b380522" translate="yes" xml:space="preserve">
          <source>Once you start splitting your code, it can be useful to analyze the output to check where modules have ended up. The &lt;a href=&quot;https://github.com/webpack/analyse&quot;&gt;official analyze tool&lt;/a&gt; is a good place to start. There are some other community-supported options out there as well:</source>
          <target state="translated">コードの分割を開始したら、出力を分析してモジュールがどこに到達したかを確認すると便利です。&lt;a href=&quot;https://github.com/webpack/analyse&quot;&gt;公式ツールは、分析&lt;/a&gt;を開始するには良い場所です。他にもコミュニティがサポートするオプションがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a92e2a532d9a2d7da6d336c155a1bb7133d7dffc" translate="yes" xml:space="preserve">
          <source>Once your application hits the browser in the form of &lt;code&gt;index.html&lt;/code&gt; file, some bundles and a variety of other assets required by your application must be loaded and linked somehow. That &lt;code&gt;/src&lt;/code&gt; directory you meticulously laid out is now bundled, minified and maybe even split into smaller chunks for lazy-loading by webpack's &lt;a href=&quot;../configuration/optimization&quot;&gt;&lt;code&gt;optimization&lt;/code&gt;&lt;/a&gt;. So how does webpack manage the interaction between all of your required modules? This is where the manifest data comes in...</source>
          <target state="translated">アプリケーションが &lt;code&gt;index.html&lt;/code&gt; ファイルの形式でブラウザに到達したら、アプリケーションに必要ないくつかのバンドルやその他のさまざまなアセットを何らかの方法でロードしてリンクする必要があります。これ &lt;code&gt;/src&lt;/code&gt; にあなたは細心の注意を払ってレイアウトされたディレクトリは、現在、同梱縮小さと多分のWebPACKので遅延ロードのための小さなチャンクに分割され&lt;a href=&quot;../configuration/optimization&quot;&gt; &lt;code&gt;optimization&lt;/code&gt; &lt;/a&gt;。では、webpackは必要なすべてのモジュール間の相互作用をどのように管理しますか？ここでマニフェストデータが入ります...</target>
        </trans-unit>
        <trans-unit id="a1718ef4adbff4d61ad5bd148b2c67b6b67258b9" translate="yes" xml:space="preserve">
          <source>One approach is to have a &quot;bootstrap&quot; step in your application that would first override the default globals before your application:</source>
          <target state="translated">1 つのアプローチは、アプリケーションに &quot;ブートストラップ&quot; ステップを設けて、アプリケーションの前にデフォルトのグローバルをオーバーライドすることです。</target>
        </trans-unit>
        <trans-unit id="0f14bc5e6856343e7743f14ac37a82c3e6d19aef" translate="yes" xml:space="preserve">
          <source>One chunk group with the &lt;code&gt;main&lt;/code&gt; name created (&lt;code&gt;main&lt;/code&gt; is the default name for an entry point). This chunk group contains &lt;code&gt;./index.js&lt;/code&gt; module. As the parser handles imports inside &lt;code&gt;./index.js&lt;/code&gt; new modules are added into this chunk.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 名が作成された1つのチャンクグループ（ &lt;code&gt;main&lt;/code&gt; はエントリポイントのデフォルト名です）。このチャンクグループには、。 &lt;code&gt;./index.js&lt;/code&gt; モジュールが含まれています。パーサーが &lt;code&gt;./index.js&lt;/code&gt; 内のインポートを処理すると、新しいモジュールがこのチャンクに追加されます。</target>
        </trans-unit>
        <trans-unit id="4531651baf39d17079af5571a1ae03ef90e06710" translate="yes" xml:space="preserve">
          <source>One of the coolest webpack features is that you can also &lt;em&gt;include any other type of file&lt;/em&gt;, besides JavaScript, for which there is a loader or built-in &lt;a href=&quot;asset-modules&quot;&gt;Asset Modules&lt;/a&gt; support. This means that the same benefits listed above for JavaScript (e.g. explicit dependencies) can be applied to everything used in building a website or web app. Let's start with CSS, as you may already be familiar with that setup.</source>
          <target state="translated">クールなのWebPACKの特徴の一つは、あなたにもできることです&lt;em&gt;ファイルの他のタイプが含ま&lt;/em&gt;ローダーまたは内蔵が存在するためにはJavaScriptのほか、&lt;a href=&quot;asset-modules&quot;&gt;資産モジュールの&lt;/a&gt;サポートを。これは、JavaScriptに関する上記の同じ利点（明示的な依存関係など）を、WebサイトまたはWebアプリの構築に使用されるすべてのものに適用できることを意味します。すでにその設定に精通しているかもしれないので、CSSから始めましょう。</target>
        </trans-unit>
        <trans-unit id="f3776ba2e5eb3b8a3f40e34afed5eb5f87063a3f" translate="yes" xml:space="preserve">
          <source>One of the coolest webpack features is that you can also &lt;em&gt;include any other type of file&lt;/em&gt;, besides JavaScript, for which there is a loader. This means that the same benefits listed above for JavaScript (e.g. explicit dependencies) can be applied to everything used in building a website or web app. Let's start with CSS, as you may already be familiar with that setup.</source>
          <target state="translated">最も優れたWebpack機能の1つは、JavaScript以外にローダーがある&lt;em&gt;他のタイプのファイル&lt;/em&gt;も&lt;em&gt;含める&lt;/em&gt;ことができることです。これは、JavaScriptの上記の同じ利点（明示的な依存関係など）が、WebサイトまたはWebアプリの構築に使用されるすべてに適用できることを意味します。CSSから始めましょう。既にその設定に慣れている場合があります。</target>
        </trans-unit>
        <trans-unit id="576a8fe2fe4d578fc19500517015b3726300014b" translate="yes" xml:space="preserve">
          <source>One of these conditions is set depending on the syntax used to reference the module:</source>
          <target state="translated">モジュールを参照するために使用される構文に応じて、これらの条件のいずれかが設定されます。</target>
        </trans-unit>
        <trans-unit id="ed5f9f967dca918d1a0a08adbea84bed21743aa6" translate="yes" xml:space="preserve">
          <source>One option is to export a function from your webpack config instead of exporting an object. The function will be invoked with two arguments:</source>
          <target state="translated">1つのオプションは、オブジェクトをエクスポートするのではなく、webpackの設定から関数をエクスポートすることです。関数は2つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="612198311a82878b10253f704f7c51f3eac1a819" translate="yes" xml:space="preserve">
          <source>One option is to export a function from your webpack configuration instead of exporting an object. The function will be invoked with two arguments:</source>
          <target state="translated">1つのオプションは、オブジェクトをエクスポートするのではなく、webpackの設定から関数をエクスポートすることです。関数は2つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="040483fac8d867e7e6b1daab52fb6ad30eec5e47" translate="yes" xml:space="preserve">
          <source>One or more updated chunks (JavaScript)</source>
          <target state="translated">1つ以上の更新されたチャンク(JavaScript)</target>
        </trans-unit>
        <trans-unit id="c6560e0c28982b656a84c6a7c15954ea75bcb147" translate="yes" xml:space="preserve">
          <source>One use for this loader is to silence modules imported by a dependency. Say, for example, your project relies on an ES6 library that imports a polyfill you don't need, so removing it will cause no loss in functionality.</source>
          <target state="translated">このローダーの用途の一つは、依存関係にあるモジュールをインポートしないようにすることです。例えば、あなたのプロジェクトが必要のないポリフィルをインポートする ES6 ライブラリに依存しているので、それを削除しても機能を損なうことはありません。</target>
        </trans-unit>
        <trans-unit id="d350ea6dc25a31449ba8604ef5f474c7ed0faed5" translate="yes" xml:space="preserve">
          <source>Only assets bigger than this size are processed (in bytes)</source>
          <target state="translated">このサイズより大きいアセットのみが処理されます(バイト単位</target>
        </trans-unit>
        <trans-unit id="e1b83cd24068c9b978d886a0bd94b55712e1db34" translate="yes" xml:space="preserve">
          <source>Only assets bigger than this size are processed. In bytes.</source>
          <target state="translated">このサイズより大きいアセットのみが処理されます。バイト単位で表示されます。</target>
        </trans-unit>
        <trans-unit id="2e2e63658df77bf50c344780d23a9604a6170078" translate="yes" xml:space="preserve">
          <source>Only assets that compress better than this ratio are processed</source>
          <target state="translated">この比率よりも圧縮が良い資産のみが処理されます。</target>
        </trans-unit>
        <trans-unit id="d8666ae151a48562e1053672bed0338e0b536c72" translate="yes" xml:space="preserve">
          <source>Only assets that compress better than this ratio are processed (&lt;code&gt;minRatio = Compressed Size / Original Size&lt;/code&gt;)</source>
          <target state="translated">この比率よりも圧縮率が高いアセットのみが処理されます（ &lt;code&gt;minRatio = Compressed Size / Original Size&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="39d5e500187857ccedea27d7fa41bc7266054931" translate="yes" xml:space="preserve">
          <source>Only assets that compress better than this ratio are processed (&lt;code&gt;minRatio = Compressed Size / Original Size&lt;/code&gt;). Example: you have &lt;code&gt;image.png&lt;/code&gt; file with 1024b size, compressed version of file has 768b size, so &lt;code&gt;minRatio&lt;/code&gt; equal &lt;code&gt;0.75&lt;/code&gt;. In other words assets will be processed when the &lt;code&gt;Compressed Size / Original Size&lt;/code&gt; value less &lt;code&gt;minRatio&lt;/code&gt; value.</source>
          <target state="translated">この比率よりも圧縮率が高いアセットのみが処理されます（ &lt;code&gt;minRatio = Compressed Size / Original Size&lt;/code&gt; ）。例：あなたがしている &lt;code&gt;image.png&lt;/code&gt; よう1024Bサイズのファイルを、ファイルの圧縮バージョンは、768bのサイズを持っている &lt;code&gt;minRatio&lt;/code&gt; が等しく &lt;code&gt;0.75&lt;/code&gt; 。つまり、アセットは、 &lt;code&gt;Compressed Size / Original Size&lt;/code&gt; 値から &lt;code&gt;minRatio&lt;/code&gt; の値を引いたときに処理されます。</target>
        </trans-unit>
        <trans-unit id="97e6798a4f980e571a4a636162ced9361ccc439b" translate="yes" xml:space="preserve">
          <source>Only compile the part of the code you are currently developing on.</source>
          <target state="translated">現在開発中のコードの一部だけをコンパイルしてください。</target>
        </trans-unit>
        <trans-unit id="61c1e7d7392692a95473f806657e1449980d9bfb" translate="yes" xml:space="preserve">
          <source>Only dashes in class names will be camelized</source>
          <target state="translated">クラス名のダッシュのみが camelized されます。</target>
        </trans-unit>
        <trans-unit id="7afbeeae1d39f150036e7fe719aa53391e6f9399" translate="yes" xml:space="preserve">
          <source>Only filename (including extensions), without path</source>
          <target state="translated">ファイル名(拡張子を含む)のみ、パスなし</target>
        </trans-unit>
        <trans-unit id="e6016169fd3a62ba77b6a3f3d028d2a274eea872" translate="yes" xml:space="preserve">
          <source>Only filename without extension or path</source>
          <target state="translated">拡張子やパスのないファイル名のみ</target>
        </trans-unit>
        <trans-unit id="d826406f0ea3a738e060dd7805b2b1562dcc0df3" translate="yes" xml:space="preserve">
          <source>Only output errors and warnings happen</source>
          <target state="translated">出力エラーと警告のみ発生</target>
        </trans-unit>
        <trans-unit id="f089d5d3b8770cd7906985a887353c0a9d20281e" translate="yes" xml:space="preserve">
          <source>Only output when errors happen</source>
          <target state="translated">エラーが発生した場合のみ出力</target>
        </trans-unit>
        <trans-unit id="cfcb6326610bc03851fa8954054544e885702fa2" translate="yes" xml:space="preserve">
          <source>Only output when errors or new compilation happen</source>
          <target state="translated">エラーや新しいコンパイルが発生した場合にのみ出力</target>
        </trans-unit>
        <trans-unit id="ebd955a05966f7588fa307f24b531b102307f8f8" translate="yes" xml:space="preserve">
          <source>Only path, without filename</source>
          <target state="translated">パスのみ、ファイル名なし</target>
        </trans-unit>
        <trans-unit id="b546a6601b7dc9286f26fd787228157e2df88187" translate="yes" xml:space="preserve">
          <source>Only the &quot;default&quot; export can be imported from non-ESM. Named exports are not available.</source>
          <target state="translated">非ESMからは、「デフォルト」エクスポートのみをインポートできます。名前付きエクスポートは利用できません。</target>
        </trans-unit>
        <trans-unit id="3984d4a7e3308cfdeb588dfd22318c1196ac7752" translate="yes" xml:space="preserve">
          <source>Only the default export of JSON modules can be used without warning.</source>
          <target state="translated">JSONモジュールのデフォルトエクスポートのみ警告なしで使用できます。</target>
        </trans-unit>
        <trans-unit id="1135f9e80ad08fccc85c2fcaeac17355f34cdb0e" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'web'&lt;/code&gt;, which uses JSONP for loading hot updates.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;'web'&lt;/code&gt; 設定されている場合にのみ使用されます。これは、ホットアップデートのロードにJSONPを使用します。</target>
        </trans-unit>
        <trans-unit id="80824d5ebb068ab46c8bc4b8718f11156726de00" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is web, which uses JSONP for loading hot updates.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;がWebである場合にのみ使用され、ホットアップデートのロードにJSONPを使用します。</target>
        </trans-unit>
        <trans-unit id="b4c0bb3058fa40f5ee2924cef03211c948d76975" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is web, which uses JSONP for loading on-demand chunks, by adding script tags.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;がWebであり、スクリプトタグを追加することにより、オンデマンドチャンクのロードにJSONPを使用する場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="89058d6a1647a90cdda9b88c640802187e5b05c2" translate="yes" xml:space="preserve">
          <source>Only used when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is web, which uses JSONP for loading on-demand chunks.</source>
          <target state="translated">&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;がWebである場合にのみ使用され、オンデマンドチャンクのロードにJSONPを使用します。</target>
        </trans-unit>
        <trans-unit id="720ecb138c7bba6e94ce7293dbf933b55062d699" translate="yes" xml:space="preserve">
          <source>Only warnings</source>
          <target state="translated">警告のみ</target>
        </trans-unit>
        <trans-unit id="ef5d396d661fb86ab806c8e1fa431eff7e8b332f" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;index.html&lt;/code&gt; from the &lt;code&gt;dist&lt;/code&gt; directory in your browser and, if everything went right, you should see the following text: &lt;code&gt;'Hello webpack'&lt;/code&gt;.</source>
          <target state="translated">ブラウザの &lt;code&gt;dist&lt;/code&gt; ディレクトリから &lt;code&gt;index.html&lt;/code&gt; を開きます。すべてがうまくいけば、次のテキストが表示されます： &lt;code&gt;'Hello webpack'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="274d9630257af836b1de0bed223b12743fdae53d" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;index.html&lt;/code&gt; in your browser and, if everything went right, you should see the following text: 'Hello webpack'.</source>
          <target state="translated">ブラウザで &lt;code&gt;index.html&lt;/code&gt; を開き、問題がなければ、「He​​llo webpack」というテキストが表示されます。</target>
        </trans-unit>
        <trans-unit id="d3b6ed9e8ad949fbe912759ab46ac452f75c1378" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;dist/index.html&lt;/code&gt; again and see if our &lt;code&gt;Hello webpack&lt;/code&gt; text has changed to the new font. If all is well, you should see the changes.</source>
          <target state="translated">&lt;code&gt;dist/index.html&lt;/code&gt; をもう一度開き、 &lt;code&gt;Hello webpack&lt;/code&gt; テキストが新しいフォントに変更されているかどうかを確認します。すべてが順調であれば、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="31202570e0f452929111fb1c8df0e557d0e0fdb1" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;dist/index.html&lt;/code&gt; in your browser again and you should see that &lt;code&gt;Hello webpack&lt;/code&gt; is now styled in red. To see what webpack did, inspect the page (don't view the page source, as it won't show you the result, because the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag is dynamically created by JavaScript) and look at the page's head tags. It should contain the style block that we imported in &lt;code&gt;index.js&lt;/code&gt;.</source>
          <target state="translated">ブラウザで &lt;code&gt;dist/index.html&lt;/code&gt; をもう一度開くと、 &lt;code&gt;Hello webpack&lt;/code&gt; スタイルが赤になっていることがわかります。webpackの機能を確認するには、ページを調べて（ &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; タグはJavaScriptによって動的に作成されるため、結果が表示されないため、ページソースを表示しないでください）、ページのheadタグを確認します。 &lt;code&gt;index.js&lt;/code&gt; にインポートしたスタイルブロックが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="402378c983e9601aae273e89aafca5f70c4c2f06" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;index.html&lt;/code&gt; again and see if our &lt;code&gt;Hello webpack&lt;/code&gt; text has changed to the new font. If all is well, you should see the changes.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; を再度開き、 &lt;code&gt;Hello webpack&lt;/code&gt; テキストが新しいフォントに変更されているかどうかを確認します。すべてが順調であれば、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="4f0b1f6ef524b7ad893b022bdbb5a64fe9665026" translate="yes" xml:space="preserve">
          <source>Open up &lt;code&gt;index.html&lt;/code&gt; in your browser again and you should see that &lt;code&gt;Hello webpack&lt;/code&gt; is now styled in red. To see what webpack did, inspect the page (don't view the page source, as it won't show you the result) and look at the page's head tags. It should contain our style block that we imported in &lt;code&gt;index.js&lt;/code&gt;.</source>
          <target state="translated">ブラウザーで &lt;code&gt;index.html&lt;/code&gt; を再度開くと、 &lt;code&gt;Hello webpack&lt;/code&gt; が赤でスタイル設定されていることがわかります。Webpackの動作を確認するには、ページを調べ（結果が表示されないため、ページソースを表示しないでください）、ページのヘッドタグを確認します。 &lt;code&gt;index.js&lt;/code&gt; にインポートしたスタイルブロックを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="52c576dc894326d738bd3c38a9fdc8b8854e92fc" translate="yes" xml:space="preserve">
          <source>Optimising your application bundle size with webpack</source>
          <target state="translated">webpack でアプリケーションのバンドルサイズを最適化する</target>
        </trans-unit>
        <trans-unit id="fdf5e093149fa15365c797b12b39a00d5ec3a138" translate="yes" xml:space="preserve">
          <source>Optimization</source>
          <target state="translated">Optimization</target>
        </trans-unit>
        <trans-unit id="2018aa12a93a299b080f1a99fe99de979c8aa449" translate="yes" xml:space="preserve">
          <source>Optimization Bailouts</source>
          <target state="translated">最適化救済措置</target>
        </trans-unit>
        <trans-unit id="66bdfd204469d2e3186766fc9966aa4616ba82b6" translate="yes" xml:space="preserve">
          <source>Optimizations</source>
          <target state="translated">Optimizations</target>
        </trans-unit>
        <trans-unit id="ad5d64c18d8c90fca4d0a1bde311c0f5fdd9ddff" translate="yes" xml:space="preserve">
          <source>Optimize Options</source>
          <target state="translated">オプションの最適化</target>
        </trans-unit>
        <trans-unit id="d4d38b717f02cf8261dd2e7ac72a70cd4848f266" translate="yes" xml:space="preserve">
          <source>Optimize all assets stored in &lt;code&gt;compilation.assets&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compilation.assets&lt;/code&gt; に保存されているすべてのアセットを最適化します。</target>
        </trans-unit>
        <trans-unit id="1c2f9bfdc9f4d18d243868d843f5047875784f34" translate="yes" xml:space="preserve">
          <source>Optimize and transform images to &lt;code&gt;webp&lt;/code&gt;</source>
          <target state="translated">画像を最適化して &lt;code&gt;webp&lt;/code&gt; 変換します</target>
        </trans-unit>
        <trans-unit id="a86800fc867452deb1318b3a05f1bf6cac2de884" translate="yes" xml:space="preserve">
          <source>Optimize any chunk assets. The assets are stored in &lt;code&gt;compilation.assets&lt;/code&gt;. A &lt;code&gt;Chunk&lt;/code&gt; has a property &lt;code&gt;files&lt;/code&gt; which points to all files created by a chunk. Any additional chunk assets are stored in &lt;code&gt;compilation.additionalChunkAssets&lt;/code&gt;.</source>
          <target state="translated">チャンクアセットを最適化します。アセットは、 &lt;code&gt;compilation.assets&lt;/code&gt; に格納されます。 &lt;code&gt;Chunk&lt;/code&gt; 、プロパティがある &lt;code&gt;files&lt;/code&gt; チャンクによって作成されたすべてのファイルを指します。追加のチャンクアセットは、 &lt;code&gt;compilation.additionalChunkAssets&lt;/code&gt; に格納されます。</target>
        </trans-unit>
        <trans-unit id="724b34c0ab3440d5bcbd5ac7fbcc160345fadd2a" translate="yes" xml:space="preserve">
          <source>Optimize images based on size</source>
          <target state="translated">サイズに応じて画像を最適化</target>
        </trans-unit>
        <trans-unit id="02058675b730ae8ac907d0b2e007189193540d7b" translate="yes" xml:space="preserve">
          <source>Optimize the &lt;code&gt;id&lt;/code&gt; of each chunk.</source>
          <target state="translated">各チャンクの &lt;code&gt;id&lt;/code&gt; を最適化します。</target>
        </trans-unit>
        <trans-unit id="5eb06ba6c776b15c11031bbe7138c977ccc0a979" translate="yes" xml:space="preserve">
          <source>Optimize the chunks.</source>
          <target state="translated">チャンクを最適化します。</target>
        </trans-unit>
        <trans-unit id="fd9dbc164928d45873317234ebbf7096161d5c77" translate="yes" xml:space="preserve">
          <source>Optimize the dependency tree asynchronously.</source>
          <target state="translated">依存関係ツリーを非同期に最適化します。</target>
        </trans-unit>
        <trans-unit id="063ab40ae2e6475433c23fe6c9bef7c86b59b89c" translate="yes" xml:space="preserve">
          <source>Optimize your output for production by following the steps in the &lt;a href=&quot;production&quot;&gt;production guide&lt;/a&gt;. Let's also add the path to your generated bundle as the package's &lt;code&gt;main&lt;/code&gt; field in with our &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;production&quot;&gt;制作ガイドの&lt;/a&gt;手順に従って、制作用に出力を最適化します。また、 &lt;code&gt;package.json&lt;/code&gt; を使用して、生成されたバンドルへのパスをパッケージの &lt;code&gt;main&lt;/code&gt; フィールドとして追加します。</target>
        </trans-unit>
        <trans-unit id="53f379104414e051be5841978392501ef6c17882" translate="yes" xml:space="preserve">
          <source>Optimize your output for production by following the steps mentioned in the &lt;a href=&quot;production&quot;&gt;production guide&lt;/a&gt;. Let's also add the path to your generated bundle as the package's &lt;code&gt;main&lt;/code&gt; field in with the &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;production&quot;&gt;制作ガイドに&lt;/a&gt;記載されている手順に従って、制作用に出力を最適化します。また、 &lt;code&gt;package.json&lt;/code&gt; を使用して、生成されたバンドルへのパスをパッケージの &lt;code&gt;main&lt;/code&gt; フィールドとして追加しましょう。</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="5f18b0ec67d95838519b6ef7873dab9057e68dcf" translate="yes" xml:space="preserve">
          <source>Option Arguments</source>
          <target state="translated">オプション引数</target>
        </trans-unit>
        <trans-unit id="f1027b2f404b6734997453ccd2fa019511d55439" translate="yes" xml:space="preserve">
          <source>Option to set the method of loading WebAssembly Modules. Methods included by default are &lt;code&gt;'fetch'&lt;/code&gt; (web/WebWorker), &lt;code&gt;'async-node'&lt;/code&gt; (Node.js), but others might be added by plugins.</source>
          <target state="translated">WebAssemblyモジュールのロード方法を設定するオプション。デフォルトで含まれているメソッドは &lt;code&gt;'fetch'&lt;/code&gt; （web / WebWorker）、 &lt;code&gt;'async-node'&lt;/code&gt; （Node.js）ですが、プラグインによって追加される場合もあります。</target>
        </trans-unit>
        <trans-unit id="0c6c4102d4dfec3b1aa41117e0e344046c58a151" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="translated">Optional</target>
        </trans-unit>
        <trans-unit id="e237493bf5b50b1bc0dd5ea6715309334ed442ef" translate="yes" xml:space="preserve">
          <source>Optional: The fourth option, ignored by webpack, can be anything (e.g. some meta data).</source>
          <target state="translated">オプションです。4 番目のオプションは webpack によって無視されますが、何でも構いません (例:いくつかのメタデータ)。</target>
        </trans-unit>
        <trans-unit id="c28aca8e2b3470f97278ecb5949f21d90c3d742f" translate="yes" xml:space="preserve">
          <source>Optional: The fourth option, ignored by webpack, can be anything (e.g. some metadata).</source>
          <target state="translated">任意です。4 番目のオプシ ョ ンは、 webpack に よ っ て無視 さ れますが、 何でも構いません (例:メ タ デー タ の一部)。</target>
        </trans-unit>
        <trans-unit id="57c96856f7855749616363c3434cab642b19c9a6" translate="yes" xml:space="preserve">
          <source>Optional: The third argument must be a source map that is parsable by &lt;a href=&quot;https://github.com/mozilla/source-map&quot;&gt;this module&lt;/a&gt;.</source>
          <target state="translated">オプション：3番目の引数は、&lt;a href=&quot;https://github.com/mozilla/source-map&quot;&gt;このモジュールで&lt;/a&gt;解析可能なソースマップである必要があります。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="9728f61984c5ad16463d1875a69c3a86230894b1" translate="yes" xml:space="preserve">
          <source>Options are the same as &lt;a href=&quot;node#stats-tojson-options-&quot;&gt;&lt;code&gt;stats.toJson(options)&lt;/code&gt;&lt;/a&gt; with one addition:</source>
          <target state="translated">オプションは&lt;a href=&quot;node#stats-tojson-options-&quot;&gt; &lt;code&gt;stats.toJson(options)&lt;/code&gt; &lt;/a&gt;と同じですが、1つ追加されています。</target>
        </trans-unit>
        <trans-unit id="b97e258b2ce87f8a54f145c314bfbfbb0f476b00" translate="yes" xml:space="preserve">
          <source>Options are the same as &lt;a href=&quot;node#statstojsonoptions&quot;&gt;&lt;code&gt;stats.toJson(options)&lt;/code&gt;&lt;/a&gt; with one addition:</source>
          <target state="translated">オプションは&lt;a href=&quot;node#statstojsonoptions&quot;&gt; &lt;code&gt;stats.toJson(options)&lt;/code&gt; &lt;/a&gt;と同じですが、次の点が1つ追加されています。</target>
        </trans-unit>
        <trans-unit id="c3dde2ada91abc98feb765994fec65c53be9633a" translate="yes" xml:space="preserve">
          <source>Options can be passed with a query parameter, e.g. &lt;code&gt;?key=value&amp;amp;foo=bar&lt;/code&gt;, or a JSON object, e.g. &lt;code&gt;?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}&lt;/code&gt;.</source>
          <target state="translated">オプションは、 &lt;code&gt;?key=value&amp;amp;foo=bar&lt;/code&gt; などのクエリパラメータ、または &lt;code&gt;?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}&lt;/code&gt; などのJSONオブジェクトで渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e36286bb829208d28d77f1fe8e59ce104bcafce2" translate="yes" xml:space="preserve">
          <source>Options for &lt;a href=&quot;http://sass-lang.com/dart-sass&quot;&gt;Dart Sass&lt;/a&gt; or &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt; implementation.</source>
          <target state="translated">&lt;a href=&quot;http://sass-lang.com/dart-sass&quot;&gt;DartSass&lt;/a&gt;または&lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;NodeSass&lt;/a&gt;実装のオプション。</target>
        </trans-unit>
        <trans-unit id="55a66a8875fa2e0ee2113d2e8b7f0bf0c09a7627" translate="yes" xml:space="preserve">
          <source>Options for &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;&lt;code&gt;imagemin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt; &lt;code&gt;imagemin&lt;/code&gt; の&lt;/a&gt;オプション</target>
        </trans-unit>
        <trans-unit id="592ff757532821d86a1cb12f11ebb3467b72f91f" translate="yes" xml:space="preserve">
          <source>Options for &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;&lt;code&gt;imagemin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt; &lt;code&gt;imagemin&lt;/code&gt; の&lt;/a&gt;オプション。</target>
        </trans-unit>
        <trans-unit id="8a601f3e0a6d16366ccf4f1d294cd61df081fb15" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;imagemin&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;imagemin&lt;/code&gt; のオプション</target>
        </trans-unit>
        <trans-unit id="ab4346c2b052486fca121be218a0ed84af77f938" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;imagemin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;imagemin&lt;/code&gt; のオプション。</target>
        </trans-unit>
        <trans-unit id="9851b6fb3be9721af920d66f41ecb00764c3a248" translate="yes" xml:space="preserve">
          <source>Options for CoffeeScript. All possible options you can find &lt;a href=&quot;https://coffeescript.org/#nodejs-usage&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">CoffeeScriptのオプション。あなたが&lt;a href=&quot;https://coffeescript.org/#nodejs-usage&quot;&gt;ここで&lt;/a&gt;見つけることができるすべての可能なオプション。</target>
        </trans-unit>
        <trans-unit id="63ff0503c4890e9094d92d01412003d6b099a512" translate="yes" xml:space="preserve">
          <source>Options for Less.</source>
          <target state="translated">少ない場合のオプション。</target>
        </trans-unit>
        <trans-unit id="f9b8f13aee9301a2ebf3c08aaf6bcc1bc3a0c704" translate="yes" xml:space="preserve">
          <source>Options for Sass.</source>
          <target state="translated">Sassのオプション。</target>
        </trans-unit>
        <trans-unit id="5778b9f4d476271a40a2d2465ba751c62d6fed89" translate="yes" xml:space="preserve">
          <source>Options for Stylus.</source>
          <target state="translated">スタイラスのオプション。</target>
        </trans-unit>
        <trans-unit id="e58e69ae18979ae5b651ffa878ebdea4581226da" translate="yes" xml:space="preserve">
          <source>Options for infrastructure level logging.</source>
          <target state="translated">インフラストラクチャ レベルのロギングのオプション。</target>
        </trans-unit>
        <trans-unit id="4f09726e23e1758c56bec1c40448535de02fb708" translate="yes" xml:space="preserve">
          <source>Options like &lt;code&gt;output.chunkLoadTimeout&lt;/code&gt;, &lt;code&gt;output.crossOriginLoading&lt;/code&gt; and &lt;code&gt;output.scriptType&lt;/code&gt; will also have effect on the external scripts loaded this way.</source>
          <target state="translated">以下のようなオプション &lt;code&gt;output.chunkLoadTimeout&lt;/code&gt; 、 &lt;code&gt;output.crossOriginLoading&lt;/code&gt; と &lt;code&gt;output.scriptType&lt;/code&gt; は、外部スクリプトがこのようにロードにも効果があります。</target>
        </trans-unit>
        <trans-unit id="0d51d23e73cbeb258bb034bea38efe63c1162dce" translate="yes" xml:space="preserve">
          <source>Options that are compatible with &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt; have 🔑 next to them.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;webpack-dev-middleware&lt;/a&gt;と互換性のあるオプションの横には🔑があります。</target>
        </trans-unit>
        <trans-unit id="e831b002187c1ca07dd471e05e620b151a2f0c77" translate="yes" xml:space="preserve">
          <source>Options to pass to the html-loader. See &lt;a href=&quot;html-loader&quot;&gt;html-loader&lt;/a&gt;.</source>
          <target state="translated">HTMLローダーに渡すオプション。&lt;a href=&quot;html-loader&quot;&gt;html-loaderを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="c2bc580e657734cab7c68b6414f5f6be06a4b56d" translate="yes" xml:space="preserve">
          <source>Opts out of any default optimization options</source>
          <target state="translated">デフォルトの最適化オプションを無効にします。</target>
        </trans-unit>
        <trans-unit id="579cb1f521aecef786a714d13307176b814063cc" translate="yes" xml:space="preserve">
          <source>Or a substitution string:</source>
          <target state="translated">あるいは置換文字列。</target>
        </trans-unit>
        <trans-unit id="62ee7f941acd3740b5979aa010ab34bed7802486" translate="yes" xml:space="preserve">
          <source>Or add the loader to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">または、ローダーを &lt;code&gt;webpack&lt;/code&gt; 設定に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="88048597ca66db3d3f0e2283073e6ad3280ebf5d" translate="yes" xml:space="preserve">
          <source>Or from the command-line:</source>
          <target state="translated">またはコマンドラインから。</target>
        </trans-unit>
        <trans-unit id="4299e2e925756675f72d5cd238eb192203bb0f93" translate="yes" xml:space="preserve">
          <source>Or if you prefer ES2015:</source>
          <target state="translated">もしくはES2015の方がいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="42b400c4fd0735f1d89abd8c4714b4a52afceca7" translate="yes" xml:space="preserve">
          <source>Or on the command-line:</source>
          <target state="translated">またはコマンドラインで。</target>
        </trans-unit>
        <trans-unit id="a927e15e4fef4d4d541af825a8ccd81e41fe57ec" translate="yes" xml:space="preserve">
          <source>Or pass an error to the callback in async mode:</source>
          <target state="translated">または、非同期モードでコールバックにエラーを渡します。</target>
        </trans-unit>
        <trans-unit id="e3ff562d21ab08937a5659caeb58bb2ea81f3323" translate="yes" xml:space="preserve">
          <source>Or provide a chunk name within a &lt;code&gt;name&lt;/code&gt; query parameter:</source>
          <target state="translated">または、 &lt;code&gt;name&lt;/code&gt; クエリパラメータ内にチャンク名を指定します。</target>
        </trans-unit>
        <trans-unit id="0f5ba6d7de5a002758743861114c3c6db71f8931" translate="yes" xml:space="preserve">
          <source>Or specify the proxied components in your configuration:</source>
          <target state="translated">または、構成でプロキシされたコンポーネントを指定します。</target>
        </trans-unit>
        <trans-unit id="d51d3af226498a76e24107125e840dcd31bd8233" translate="yes" xml:space="preserve">
          <source>Or using a &lt;code&gt;Function&lt;/code&gt;:</source>
          <target state="translated">または &lt;code&gt;Function&lt;/code&gt; を使用して：</target>
        </trans-unit>
        <trans-unit id="a3e30ba9d574feb7c422f9e4dd767cfcd41fb76c" translate="yes" xml:space="preserve">
          <source>Or you can apply specific plugins you want:</source>
          <target state="translated">または、あなたが望む特定のプラグインを適用することができます。</target>
        </trans-unit>
        <trans-unit id="548b8be6712aca1d87a33596575b4f0b286e4a6c" translate="yes" xml:space="preserve">
          <source>Or you can create a global module and symlink to the local one:</source>
          <target state="translated">あるいは、グローバルモジュールを作成してローカルモジュールにシンボリックリンクすることもできます。</target>
        </trans-unit>
        <trans-unit id="bd629f04ae3d7bf51edb089b4c17c8770562b864" translate="yes" xml:space="preserve">
          <source>Or, as function:</source>
          <target state="translated">あるいは、機能として。</target>
        </trans-unit>
        <trans-unit id="fb1d5ca32ce0b0094f78920f00238713e52e2c68" translate="yes" xml:space="preserve">
          <source>Or, in case of just a &lt;code&gt;from&lt;/code&gt; with the default destination, you can also use a &lt;code&gt;{String}&lt;/code&gt; as shorthand instead of an &lt;code&gt;{Object}&lt;/code&gt;</source>
          <target state="translated">または、デフォルトの宛先 &lt;code&gt;from&lt;/code&gt; 持つfromだけの場合、 &lt;code&gt;{Object}&lt;/code&gt; の代わりに &lt;code&gt;{String}&lt;/code&gt; を省略形として使用することもできます</target>
        </trans-unit>
        <trans-unit id="7dc586b794d0f2f0123ec40266bce0de0311da18" translate="yes" xml:space="preserve">
          <source>Or, to add as standard module as per &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&quot;&gt;this guide&lt;/a&gt;:</source>
          <target state="translated">または、&lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&quot;&gt;このガイド&lt;/a&gt;に従って標準モジュールとして追加するには：</target>
        </trans-unit>
        <trans-unit id="1c61f78a7c6406901d52386c92a5f1b9810c0e03" translate="yes" xml:space="preserve">
          <source>Or, to add it as a standard module as per &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&quot;&gt;this guide&lt;/a&gt;:</source>
          <target state="translated">または、&lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&quot;&gt;このガイド&lt;/a&gt;に従って標準モジュールとして追加するには：</target>
        </trans-unit>
        <trans-unit id="2769995d7aa4f59c417df977dc581a297b53e205" translate="yes" xml:space="preserve">
          <source>Order the modules and chunks by occurrence. This saves space, because often referenced modules and chunks get smaller ids.</source>
          <target state="translated">モジュールとチャンクを出現順に並べます。これは、参照されるモジュールやチャンクの ID が小さくなることが多いので、スペースを節約します。</target>
        </trans-unit>
        <trans-unit id="2967fb6b9dbc531fdccdc62a709f0b9b3f045265" translate="yes" xml:space="preserve">
          <source>Originally, chunks (and modules imported inside them) were connected by a parent-child relationship in the internal webpack graph. The &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; was used to avoid duplicated dependencies across them, but further optimizations were not possible</source>
          <target state="translated">元々、チャンク（およびチャンク内にインポートされたモジュール）は、内部Webpackグラフの親子関係によって接続されていました。 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は、それら全体で重複の依存性を回避するために使用されるが、さらなる最適化ができなかったました</target>
        </trans-unit>
        <trans-unit id="2b0118aed61196f5eed6f43529150f0d1186014c" translate="yes" xml:space="preserve">
          <source>Originally, chunks (and modules imported inside them) were connected by a parent-child relationship in the internal webpack graph. The &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; was used to avoid duplicated dependencies across them, but further optimizations were not possible.</source>
          <target state="translated">元々、チャンク（およびチャンク内にインポートされたモジュール）は、内部Webpackグラフの親子関係によって接続されていました。 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は、それら全体で重複の依存性を回避するために使用されましたが、さらなる最適化はできませんでした。</target>
        </trans-unit>
        <trans-unit id="bbcf81a9103052a3ce5b11d9884ce8fb6379af91" translate="yes" xml:space="preserve">
          <source>Other Code and Frameworks</source>
          <target state="translated">その他のコードとフレームワーク</target>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="9f43af92a10e29a062869a02d2b19f320ff7d737" translate="yes" xml:space="preserve">
          <source>Other Targets</source>
          <target state="translated">その他のターゲット</target>
        </trans-unit>
        <trans-unit id="a6a3346524b28d21d18a28316c1731fc127a349f" translate="yes" xml:space="preserve">
          <source>Other Utilities</source>
          <target state="translated">その他のユーティリティ</target>
        </trans-unit>
        <trans-unit id="d9c2e3a6f8b3ea9219d86ce1d7f7a3f8de962df1" translate="yes" xml:space="preserve">
          <source>Other examples using different module formats:</source>
          <target state="translated">異なるモジュール形式を使用した他の例。</target>
        </trans-unit>
        <trans-unit id="164b7710bcd6917de534087ff1e2ed001f404c41" translate="yes" xml:space="preserve">
          <source>Other node core libraries</source>
          <target state="translated">その他のノードコアライブラリ</target>
        </trans-unit>
        <trans-unit id="748e927e98cf6fa8a8a6ea344312832b4e6a6f35" translate="yes" xml:space="preserve">
          <source>Other tips for Use</source>
          <target state="translated">使用するための他のヒント</target>
        </trans-unit>
        <trans-unit id="4653e7976f9770f2699c713bdc5215cd4f6c2d22" translate="yes" xml:space="preserve">
          <source>Otherwise, the file extension is resolved using the &lt;a href=&quot;../configuration/resolve#resolve-extensions&quot;&gt;&lt;code&gt;resolve.extensions&lt;/code&gt;&lt;/a&gt; option, which tells the resolver which extensions (eg - &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;) are acceptable for resolution.</source>
          <target state="translated">それ以外の場合は、ファイルの拡張子を使用して解決される&lt;a href=&quot;../configuration/resolve#resolve-extensions&quot;&gt; &lt;code&gt;resolve.extensions&lt;/code&gt; の&lt;/a&gt;（ -例えば拡張子リゾルバ伝えオプション、 &lt;code&gt;.js&lt;/code&gt; ファイル、 &lt;code&gt;.jsx&lt;/code&gt; の）解決のために許容されているが。</target>
        </trans-unit>
        <trans-unit id="d7c2d976aa8ed2aa5de9a29e172e195a80941ad2" translate="yes" xml:space="preserve">
          <source>Otherwise, the file extension is resolved using the &lt;a href=&quot;../configuration/resolve#resolveextensions&quot;&gt;&lt;code&gt;resolve.extensions&lt;/code&gt;&lt;/a&gt; option, which tells the resolver which extensions are acceptable for resolution e.g. &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合、ファイル拡張子は&lt;a href=&quot;../configuration/resolve#resolveextensions&quot;&gt; &lt;code&gt;resolve.extensions&lt;/code&gt; &lt;/a&gt;オプションを使用して解決されます。このオプションは、解決に使用できる拡張子（ &lt;code&gt;.js&lt;/code&gt; 、 &lt;code&gt;.jsx&lt;/code&gt; など）をリゾルバーに通知します。</target>
        </trans-unit>
        <trans-unit id="72be90f155341141ab65b4cd9267be474f7c66e0" translate="yes" xml:space="preserve">
          <source>Out of the box &lt;code&gt;SplitChunksPlugin&lt;/code&gt; should work great for most users.</source>
          <target state="translated">箱から出して &lt;code&gt;SplitChunksPlugin&lt;/code&gt; は、ほとんどのユーザーのための偉大な動作するはずです。</target>
        </trans-unit>
        <trans-unit id="c29222847046578467b267aa47d594172f93cfd2" translate="yes" xml:space="preserve">
          <source>Out of the box &lt;code&gt;SplitChunksPlugin&lt;/code&gt; should work well for most users.</source>
          <target state="translated">箱から &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 、SplitChunksPluginはほとんどのユーザーにとってうまく機能するはずです。</target>
        </trans-unit>
        <trans-unit id="6cf81e2a4d48ca5dfb4018a0b5da4dc3d759f6dd" translate="yes" xml:space="preserve">
          <source>Out of the box, webpack only understands JavaScript and JSON files. &lt;strong&gt;Loaders&lt;/strong&gt; allow webpack to process other types of files and convert them into valid &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt; that can be consumed by your application and added to the dependency graph.</source>
          <target state="translated">箱から出して、webpackはJavaScriptファイルとJSONファイルのみを理解します。&lt;strong&gt;ローダーを&lt;/strong&gt;使用すると、webpackは他のタイプのファイルを処理し、それらをアプリケーションで使用して依存関係グラフに追加できる有効な&lt;a href=&quot;modules&quot;&gt;モジュールに&lt;/a&gt;変換できます。</target>
        </trans-unit>
        <trans-unit id="2dea8748bb619371cecdb1a800acca07d21d1d14" translate="yes" xml:space="preserve">
          <source>Out of the box, webpack only understands JavaScript files. &lt;strong&gt;Loaders&lt;/strong&gt; allow webpack to process other types of files and convert them into valid &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt; that can be consumed by your application and added to the dependency graph.</source>
          <target state="translated">デフォルトでは、webpackはJavaScriptファイルのみを認識します。&lt;strong&gt;ローダーを&lt;/strong&gt;使用すると、webpackは他のタイプのファイルを処理し、それらを有効な&lt;a href=&quot;modules&quot;&gt;モジュールに&lt;/a&gt;変換して、アプリケーションで使用し、依存関係グラフに追加することができます。</target>
        </trans-unit>
        <trans-unit id="aa55ace273d955497ca2efda61e6d78947e927c7" translate="yes" xml:space="preserve">
          <source>Out of the box, webpack won't require you to use a configuration file. However, it will assume the entry point of your project is &lt;code&gt;src/index.js&lt;/code&gt; and will output the result in &lt;code&gt;dist/main.js&lt;/code&gt; minified and optimized for production.</source>
          <target state="translated">箱から出して、webpackは設定ファイルを使用する必要はありません。ただし、プロジェクトのエントリポイントが &lt;code&gt;src/index.js&lt;/code&gt; であると想定し、結果を &lt;code&gt;dist/main.js&lt;/code&gt; に縮小して、本番用に最適化して出力します。</target>
        </trans-unit>
        <trans-unit id="82b7d4b68bfe648eaf6de08120bde75436bb94ff" translate="yes" xml:space="preserve">
          <source>Out of the box, webpack won't require you to use a configuration file. However, it will assume the entry point of your project is &lt;code&gt;src/index&lt;/code&gt; and will output the result in &lt;code&gt;dist/main.js&lt;/code&gt; minified and optimized for production.</source>
          <target state="translated">すぐに使えるwebpackでは、設定ファイルを使用する必要はありません。ただし、プロジェクトのエントリポイントが &lt;code&gt;src/index&lt;/code&gt; であると想定し、結果を &lt;code&gt;dist/main.js&lt;/code&gt; に出力して、生産用に縮小および最適化します。</target>
        </trans-unit>
        <trans-unit id="d3f0610632bbef35bfaa389ca89023fd50c6dd62" translate="yes" xml:space="preserve">
          <source>Outcome</source>
          <target state="translated">Outcome</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="31907ec3a5be78cc563099c264375fdb7886f469" translate="yes" xml:space="preserve">
          <source>Output Filenames</source>
          <target state="translated">出力ファイル名</target>
        </trans-unit>
        <trans-unit id="aa36220cfc69d0a1ee678254e922b40c3459f898" translate="yes" xml:space="preserve">
          <source>Output Management</source>
          <target state="translated">出力管理</target>
        </trans-unit>
        <trans-unit id="fcd12607f17f8ae3c1aae3e2ae27e439345801a6" translate="yes" xml:space="preserve">
          <source>Output Options</source>
          <target state="translated">出力オプション</target>
        </trans-unit>
        <trans-unit id="5cefca5bd5c8ac5f884cdd9e5d63fca191c4cdad" translate="yes" xml:space="preserve">
          <source>Output Without Path Info</source>
          <target state="translated">パス情報なしの出力</target>
        </trans-unit>
        <trans-unit id="78d777aae91ea576ceaee3d45b01ad3435e7cce3" translate="yes" xml:space="preserve">
          <source>Output cli information. It is enabled by default.</source>
          <target state="translated">クリ情報を出力します。デフォルトでは有効になっています。</target>
        </trans-unit>
        <trans-unit id="94e22a6ec6fd2d9123ea673737e219c0d79bdced" translate="yes" xml:space="preserve">
          <source>Output everything</source>
          <target state="translated">すべてを出力</target>
        </trans-unit>
        <trans-unit id="661892806f66f11faaf25d11ac89a058b9057641" translate="yes" xml:space="preserve">
          <source>Output everything except &lt;code&gt;chunkModules&lt;/code&gt; and &lt;code&gt;chunkRootModules&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chunkModules&lt;/code&gt; と &lt;code&gt;chunkRootModules&lt;/code&gt; を除くすべてを出力します</target>
        </trans-unit>
        <trans-unit id="85df5e35434c1a5376977b90aa2f2b4d2996ced1" translate="yes" xml:space="preserve">
          <source>Output filename</source>
          <target state="translated">出力ファイル名</target>
        </trans-unit>
        <trans-unit id="7e99a80b3fe54f415b43b27097f41e8c986da395" translate="yes" xml:space="preserve">
          <source>Output location of the file generated by webpack e.g. &lt;code&gt;./dist&lt;/code&gt;</source>
          <target state="translated">webpackによって生成されたファイルの出力場所（例： &lt;code&gt;./dist&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="5acfe12ea07fb8ea46b335a837e4d39082cb4b4e" translate="yes" xml:space="preserve">
          <source>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</source>
          <target state="translated">現在のwebpackのバージョンによって出力が異なる場合があります。新しいバージョンでは、一部の古いバージョンのようにハッシュ化に関するすべての問題を抱えているわけではないかもしれませんが、それでも安全のために以下の手順をお勧めします。</target>
        </trans-unit>
        <trans-unit id="b01cd12e0a3c672d6fd96717a91de6f52cff5761" translate="yes" xml:space="preserve">
          <source>Output nothing</source>
          <target state="translated">何も出力しない</target>
        </trans-unit>
        <trans-unit id="2bfe6cbb19179698183561457ded58623acee62f" translate="yes" xml:space="preserve">
          <source>Output path.</source>
          <target state="translated">出力パス。</target>
        </trans-unit>
        <trans-unit id="283c87d1343db905c99fd3e4c33c0ff5f92a966e" translate="yes" xml:space="preserve">
          <source>Output root if &lt;code&gt;from&lt;/code&gt; is file or dir, resolved glob path if &lt;code&gt;from&lt;/code&gt; is glob</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; がファイルまたはディレクトリの場合はルートを出力し、 &lt;code&gt;from&lt;/code&gt; がグロブの場合は解決されたグロブパス</target>
        </trans-unit>
        <trans-unit id="987b8eef83e7f7a3b02b84875c2c2c3993b6e4b2" translate="yes" xml:space="preserve">
          <source>Output running progress to console.</source>
          <target state="translated">実行中の進捗状況をコンソールに出力します。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="a3b4424f964b81cc5bcfe2b439496a6ff469dacc" translate="yes" xml:space="preserve">
          <source>Outputs information about your system and dependencies</source>
          <target state="translated">システムと依存関係についての情報を出力します。</target>
        </trans-unit>
        <trans-unit id="40b4688fb4497807a4c8c9d68a435271e457deec" translate="yes" xml:space="preserve">
          <source>Outputs list of supported flags and commands</source>
          <target state="translated">サポートされているフラグとコマンドの一覧を出力します。</target>
        </trans-unit>
        <trans-unit id="e6450af99eaaf4c4b937428ec7e5d80bb469e468" translate="yes" xml:space="preserve">
          <source>Override default minify function - use &lt;code&gt;uglify-js&lt;/code&gt; for minification.</source>
          <target state="translated">デフォルトの縮小機能を上書き- 縮小には &lt;code&gt;uglify-js&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e41d0c69ce84028ee812f50e08e3c0fe2856797b" translate="yes" xml:space="preserve">
          <source>Override the &lt;code&gt;publicPath&lt;/code&gt; setting for this loader</source>
          <target state="translated">このローダーの &lt;code&gt;publicPath&lt;/code&gt; 設定をオーバーライドします</target>
        </trans-unit>
        <trans-unit id="7a7d47fce48acf58b47aa4b2613746aa85bf70fa" translate="yes" xml:space="preserve">
          <source>Override the inferred context of a &lt;code&gt;require&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 式の推論されたコンテキストをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="3e7169a4fd509319454fce735451cddb14ece56f" translate="yes" xml:space="preserve">
          <source>Overrides are provided in a similar way as the container exposes modules, separated into two steps:</source>
          <target state="translated">オーバーライドは、コンテナがモジュールを公開するのと同様の方法で、2つのステップに分けて提供されます。</target>
        </trans-unit>
        <trans-unit id="e55a541144e6bf0b62180c479324b41db153070f" translate="yes" xml:space="preserve">
          <source>Overrides must be provided before the modules of the container are loaded. Overridables that are used in initial chunk, can only be overridden by a synchronous module override that doesn't use Promises. Once evaluated, overridables are no longer overridable.</source>
          <target state="translated">コンテナのモジュールがロードされる前にオーバーライドを提供する必要があります。初期チャンクで使用されるオーバーライド可能なものは、Promises を使用しない同期モジュールのオーバーライドでしかオーバーライドできません。一度評価されると、オーバーライド可能なモジュールはオーバーライドできなくなります。</target>
        </trans-unit>
        <trans-unit id="4548704a9cf96f5c80e64da876d62bd8a09f9fd5" translate="yes" xml:space="preserve">
          <source>Overrides the path from which worker scripts are downloaded. If not specified, the same public path used for other webpack assets is used.</source>
          <target state="translated">ワーカースクリプトがダウンロードされるパスをオーバーライドします。指定しない場合は、他の webpack アセットで使用されるのと同じ公開パスが使用されます。</target>
        </trans-unit>
        <trans-unit id="c6135137749f44ab01770866a1a5ad05ffe9fd2a" translate="yes" xml:space="preserve">
          <source>Overriding</source>
          <target state="translated">Overriding</target>
        </trans-unit>
        <trans-unit id="17f304384bc4e2686063ab1f4a2a78f9db0327d8" translate="yes" xml:space="preserve">
          <source>Overriding modules is a one-directional operation.</source>
          <target state="translated">モジュールのオーバーライドは一方向の操作です。</target>
        </trans-unit>
        <trans-unit id="fc7f5dcce2431faa8c81e362f061ec0d6c7ca706" translate="yes" xml:space="preserve">
          <source>Overwrites files already in &lt;code&gt;compilation.assets&lt;/code&gt; (usually added by other plugins/loaders)</source>
          <target state="translated">すでに &lt;code&gt;compilation.assets&lt;/code&gt; にあるファイルを上書きします（通常、他のプラグイン/ローダーによって追加されます）</target>
        </trans-unit>
        <trans-unit id="dc2451a0334508fc6e4069e13d9f5a761b0d9e13" translate="yes" xml:space="preserve">
          <source>Overwrites files already in &lt;code&gt;compilation.assets&lt;/code&gt; (usually added by other plugins/loaders).</source>
          <target state="translated">すでに &lt;code&gt;compilation.assets&lt;/code&gt; にあるファイルを上書きします（通常は他のプラグイン/ローダーによって追加されます）。</target>
        </trans-unit>
        <trans-unit id="cb9f6fa5a3ce578a059be19b7a65f2fb3934a0f5" translate="yes" xml:space="preserve">
          <source>Package entry points in Node.js</source>
          <target state="translated">Node.jsのパッケージエントリポイント</target>
        </trans-unit>
        <trans-unit id="8464afe7016605580e6dba139c430ce6bdf714d1" translate="yes" xml:space="preserve">
          <source>Package exports</source>
          <target state="translated">パッケージ輸出</target>
        </trans-unit>
        <trans-unit id="48804509ff7043f630d59176ab8fe0388d9722f4" translate="yes" xml:space="preserve">
          <source>Packages are rotting.</source>
          <target state="translated">パッケージが腐っている。</target>
        </trans-unit>
        <trans-unit id="b62df9105ffbe0ac3ff022061a5b5adbce84148b" translate="yes" xml:space="preserve">
          <source>Paired with &lt;code&gt;--progress&lt;/code&gt;, &lt;code&gt;--profile&lt;/code&gt; gives you an in depth idea of which step in the compilation is taking how long. This can help you optimise your build in a more informed manner.</source>
          <target state="translated">&lt;code&gt;--progress&lt;/code&gt; と組み合わせて、 &lt;code&gt;--profile&lt;/code&gt; を使用すると、コンパイルのどのステップにどれだけ時間がかかっているかを詳しく知ることができます。これは、より情報に基づいた方法でビルドを最適化するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="c991f93c6f2615505243143a75c3501413eb1c2a" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;assets&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;assets&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90d5ef260713b6cedae194a2cbad71df445f4f77" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;ast&lt;/code&gt;&lt;code&gt;comments&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;ast&lt;/code&gt; &lt;code&gt;comments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73e275dcbd3f5bf47f5505559e9504642b8e930b" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;childCompiler&lt;/code&gt;&lt;code&gt;compilerName&lt;/code&gt;&lt;code&gt;compilerIndex&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;childCompiler&lt;/code&gt; &lt;code&gt;compilerName&lt;/code&gt; &lt;code&gt;compilerIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c79f0b6f9e31573d9ffa15a9fb789159922bd31e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunk&lt;/code&gt;&lt;code&gt;chunkHash&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;chunkHash&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c5de9353c41900f7cc9830f0646bc0fa669708d" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunk&lt;/code&gt;&lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="750d84381779421de68c42062c5ddab4698e3486" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunks&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunks&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e5636940b4dc3dc9e0f4427f619d2ebaa33db5c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunks&lt;/code&gt;&lt;code&gt;modules&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunks&lt;/code&gt; &lt;code&gt;modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43c826f3755620ba502465d8fdd73de0f745b8a6" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;chunks&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;chunks&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="134cac6025b323774eb8179251b0f6fb2bf96d01" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compilation&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compilation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2727aeb16aadf78295c5bd4a2c75012e55cab33" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compilation&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compilation&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2604ad91c4fb4f7140b65b8321f116f6bbdb49a" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compilationParams&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compilationParams&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="358aeccf97432c4567cbfb2ba6011fde70b7a9e5" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;compiler&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;compiler&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d83fb6de943f2454a64388c12c7bd216e69a47d6" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;context&lt;/code&gt;, &lt;code&gt;entry&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;context&lt;/code&gt; 、 &lt;code&gt;entry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3881d0d3fb7b473209e5f26fc9b60107b12dd717" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;contextModuleFactory&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;contextModuleFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e500e62253beff7e7b5cdb1136378a640915ec4" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;declaration&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;declaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93b7b50f6f2c327b7a133c81eeca3d4f25c8238c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;depRef&lt;/code&gt;&lt;code&gt;dependency&lt;/code&gt;&lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;depRef&lt;/code&gt; &lt;code&gt;dependency&lt;/code&gt; &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95c1249b8cda0474a3c8ed88c0cb58c97638ee49" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;error&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d2965c99dc7348b590c60e8ebb0897c992044d5" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ccdb3ed547f580cdabef52c215215c64efa3c4c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;expression&lt;/code&gt;&lt;code&gt;param&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;expression&lt;/code&gt; &lt;code&gt;param&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fd8dbb04e1aba5ca2a1c485f742ded6bd2b3ec0" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;fileName&lt;/code&gt;, &lt;code&gt;changeTime&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;fileName&lt;/code&gt; 、 &lt;code&gt;changeTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8040cb4bbacc51d2af2b339355655aaad2fbdc9" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;filename&lt;/code&gt;&lt;code&gt;data&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;filename&lt;/code&gt; &lt;code&gt;data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f72e57dbf055f2ab852992315ef092fed313809b" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;initExpression&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;initExpression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07f6255d8e468a3d3a5efe6c994ef655705935d7" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;loaderContext&lt;/code&gt;&lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;loaderContext&lt;/code&gt; &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a72008dac1303eb45b36ce62dbc5c678c1fbe85e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="183eeba3bcdd63b435c108f06511e3def4ff6a3e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;error&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;module&lt;/code&gt; &lt;code&gt;error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0678017eab5a67be4284d37b217ad58da0a1264" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;module&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="393e20853c024b1e61234fc6dbc4a239218482dd" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;modules&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45c6ad20b68012384f24f03273152bff0670a28d" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;modules&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;modules&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe7d7aacb1a5e33fbf0b36e2c9f6570cebc159d6" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;normalModuleFactory&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;normalModuleFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33836371ac0c080ece95dd435ca0a7783875bb9e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50ff59b8d5d6842b64d4779f3ab7252d6a51f359" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;statement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbaf0fbeec68fba8045c7439ee421648ae5aeb57" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;declaration&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;declaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44b3f428537530948b885defbb5b94e5a0192b4c" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8a370f0db751365267990ae5e925f09c0bc0b03" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65bf8ac879e1b4ddebbe4cff09b464b8bd66db9e" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07a3f15cf76a6ec9ba4f52e3b74ad9df5140a75f" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">パラメーター： &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8c0bb41ee59e42c76f4f0b0da6f3fa83f528532" translate="yes" xml:space="preserve">
          <source>Parameters: &lt;code&gt;stats&lt;/code&gt;</source>
          <target state="translated">パラメータ： &lt;code&gt;stats&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b3cf5033ed01a4fcbff3f2957e66cfe44af45a9" translate="yes" xml:space="preserve">
          <source>Parser</source>
          <target state="translated">Parser</target>
        </trans-unit>
        <trans-unit id="671507423a5ce51b91d522731ab85745d3d74657" translate="yes" xml:space="preserve">
          <source>Parser options: An options object which should be used to create the parser for this module.</source>
          <target state="translated">パーサのオプション。このモジュールのパーサを作成するために使用されるオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="43bc94b7434511df8e3fc1fa270f99760c5db1de" translate="yes" xml:space="preserve">
          <source>Parsers may inspect these options and disable or reconfigure themselves accordingly. Most of the default plugins interpret the values as follows:</source>
          <target state="translated">パーサはこれらのオプションを検査し、それに応じて自分自身を無効にしたり再設定したりすることができます。ほとんどのデフォルトのプラグインは、以下のように値を解釈します。</target>
        </trans-unit>
        <trans-unit id="3d91a80c9424b0cd790f2d89ceb18365f304810a" translate="yes" xml:space="preserve">
          <source>Pass &lt;a href=&quot;https://github.com/remarkjs/remark/tree/main/packages/remark-stringify#options&quot;&gt;&lt;code&gt;remark-stringify&lt;/code&gt; options&lt;/a&gt; and &lt;a href=&quot;https://github.com/remarkjs/remark/tree/main/packages/remark-parse#options&quot;&gt;&lt;code&gt;remark-parse&lt;/code&gt; options&lt;/a&gt; options to the &lt;code&gt;remark&lt;/code&gt;.</source>
          <target state="translated">パス&lt;a href=&quot;https://github.com/remarkjs/remark/tree/main/packages/remark-stringify#options&quot;&gt; &lt;code&gt;remark-stringify&lt;/code&gt; オプション&lt;/a&gt;と&lt;a href=&quot;https://github.com/remarkjs/remark/tree/main/packages/remark-parse#options&quot;&gt; &lt;code&gt;remark-parse&lt;/code&gt; オプション&lt;/a&gt;にオプションを &lt;code&gt;remark&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a87c77193cd00bddf1f009ea53e0eae7bb5cdcf" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;loaderContext&lt;/code&gt; in plugin.</source>
          <target state="translated">峠 &lt;code&gt;loaderContext&lt;/code&gt; プラグインインチ</target>
        </trans-unit>
        <trans-unit id="ecc2b82cdbbdc82a8a4bb8c0a2e4f9a8d35144ff" translate="yes" xml:space="preserve">
          <source>Pass CLI arguments to Node.js</source>
          <target state="translated">CLIの引数をNode.jsに渡す</target>
        </trans-unit>
        <trans-unit id="8f37fa03d741e390b4646ce553be76d46bc93b97" translate="yes" xml:space="preserve">
          <source>Pass a boolean to enable or disable this feature for all modules (defaults to &lt;code&gt;false&lt;/code&gt;). An object with &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt; is also allowed. For example, to enable this feature for all javascript files within a certain directory:</source>
          <target state="translated">すべてのモジュールに対してこの機能を有効または無効にするブール値を渡します（デフォルトは &lt;code&gt;false&lt;/code&gt; ）。 &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;include&lt;/code&gt; 、 &lt;code&gt;exclude&lt;/code&gt; を持つオブジェクトも許可されます。たとえば、特定のディレクトリ内のすべてのJavaScriptファイルに対してこの機能を有効にするには：</target>
        </trans-unit>
        <trans-unit id="4361e47b71597632ec2c755166dece322371eb56" translate="yes" xml:space="preserve">
          <source>Pass values to the next loader. If you know what your result exports if executed as a module, set this value here (as an only element array).</source>
          <target state="translated">次のローダーに値を渡します。モジュールとして実行された場合の結果のエクスポートがわかっている場合は、この値をここに設定します (唯一の要素の配列として)。</target>
        </trans-unit>
        <trans-unit id="b936ea14312d991018d6db2aecbac5ce71bd65bc" translate="yes" xml:space="preserve">
          <source>Pass values to the next loader. If you know what your result exports if executed as module, set this value here (as a only element array).</source>
          <target state="translated">次のローダーに値を渡します。モジュールとして実行された場合の結果のエクスポートがわかっている場合は、この値をここに設定します (要素のみの配列として)。</target>
        </trans-unit>
        <trans-unit id="aaf0f8e2dd7690a96babc2d12d436898010ee0d1" translate="yes" xml:space="preserve">
          <source>Passed from the last loader. If you would execute the input argument as a module, consider reading this variable for a shortcut (for performance).</source>
          <target state="translated">最後のローダーから渡されます。入力引数をモジュールとして実行する場合は、この変数を読むことがショートカットになることを考慮してください(パフォーマンスのため)。</target>
        </trans-unit>
        <trans-unit id="44985ac8eb7552b2ccc31a28f6ff40c010ff5141" translate="yes" xml:space="preserve">
          <source>Passed from the last loader. If you would execute the input argument as module, consider reading this variable for a shortcut (for performance).</source>
          <target state="translated">最後のローダーから渡されます。入力引数をモジュールとして実行する場合は、この変数を読むことが近道になることを考慮してください(パフォーマンスのため)。</target>
        </trans-unit>
        <trans-unit id="ccddcde23a3566aa4120d1946a6cfb7c456fe6f4" translate="yes" xml:space="preserve">
          <source>Passing a string (i.e. &lt;code&gt;use: [ &quot;style-loader&quot; ]&lt;/code&gt;) is a shortcut to the loader property (i.e. &lt;code&gt;use: [ { loader: &quot;style-loader &quot;} ]&lt;/code&gt;).</source>
          <target state="translated">文字列を渡す（つまり、 &lt;code&gt;use: [ &quot;style-loader&quot; ]&lt;/code&gt; ）は、ローダープロパティへのショートカットです（つまり、 &lt;code&gt;use: [ { loader: &quot;style-loader &quot;} ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ea2f772453c4c9a18e9af02a7be2ffdb0b433f7d" translate="yes" xml:space="preserve">
          <source>Passing a string (i.e. &lt;code&gt;use: [ 'style-loader' ]&lt;/code&gt;) is a shortcut to the loader property (i.e. &lt;code&gt;use: [ { loader: 'style-loader '} ]&lt;/code&gt;).</source>
          <target state="translated">文字列を渡す（つまり、 &lt;code&gt;use: [ 'style-loader' ]&lt;/code&gt; ）は、ローダープロパティへのショートカットです（つまり、 &lt;code&gt;use: [ { loader: 'style-loader '} ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0b04e6e4c7567222f24f018866d959fba17be475" translate="yes" xml:space="preserve">
          <source>Passing the &lt;code&gt;minChunks&lt;/code&gt; property a function</source>
          <target state="translated">&lt;code&gt;minChunks&lt;/code&gt; プロパティに関数を渡す</target>
        </trans-unit>
        <trans-unit id="b68bd7e9f8b4dc2c3ce3d7a6e613390ad93621a5" translate="yes" xml:space="preserve">
          <source>Patches ties of module and chunk after removing dependency reasons. Called automatically by &lt;code&gt;removeReasonsOfDependencyBlock&lt;/code&gt;.</source>
          <target state="translated">依存関係の理由を削除した後、モジュールとチャンクの関係にパッチを適用します。 &lt;code&gt;removeReasonsOfDependencyBlock&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="761dfb7e989b01b8713a72591a10c87329ed9a59" translate="yes" xml:space="preserve">
          <source>Path Translations</source>
          <target state="translated">パス変換</target>
        </trans-unit>
        <trans-unit id="eebf4eccd786dfcb9ed1df853f98d2125c371483" translate="yes" xml:space="preserve">
          <source>Path to &lt;code&gt;eslint&lt;/code&gt; instance that will be used for linting.</source>
          <target state="translated">&lt;code&gt;eslint&lt;/code&gt; に使用されるeslintインスタンスへのパス。</target>
        </trans-unit>
        <trans-unit id="86834b835aa4d0a4ee663bfae4efaddc93a34eee" translate="yes" xml:space="preserve">
          <source>Path to &lt;code&gt;eslint&lt;/code&gt; instance that will be used for linting. If the &lt;code&gt;eslintPath&lt;/code&gt; is a folder like a official eslint, or specify a &lt;code&gt;formatter&lt;/code&gt; option. now you dont have to install &lt;code&gt;eslint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eslint&lt;/code&gt; に使用されるeslintインスタンスへのパス。 &lt;code&gt;eslintPath&lt;/code&gt; が公式のeslintのようなフォルダーである場合、または &lt;code&gt;formatter&lt;/code&gt; オプションを指定します。これで、 &lt;code&gt;eslint&lt;/code&gt; をインストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="06993c089bb935f882ce99f8d4e951b05bdcd530" translate="yes" xml:space="preserve">
          <source>Path to &lt;code&gt;stylelint&lt;/code&gt; instance that will be used for linting.</source>
          <target state="translated">&lt;code&gt;stylelint&lt;/code&gt; に使用されるstylelintインスタンスへのパス。</target>
        </trans-unit>
        <trans-unit id="12ce615fbd4de707138cf2519532f0642d38a706" translate="yes" xml:space="preserve">
          <source>Path to cache directory.</source>
          <target state="translated">キャッシュディレクトリへのパス。</target>
        </trans-unit>
        <trans-unit id="561fb7d4495d192d7e6dab825d4b99213cf43235" translate="yes" xml:space="preserve">
          <source>Path to the config file</source>
          <target state="translated">設定ファイルへのパス</target>
        </trans-unit>
        <trans-unit id="c1e2d1dce001279bae94ea8e6b3b641b9bbed875" translate="yes" xml:space="preserve">
          <source>Path to the configuration file</source>
          <target state="translated">設定ファイルへのパス</target>
        </trans-unit>
        <trans-unit id="1a8bfd55f37472276f7b8ae263add7e0f0d412d7" translate="yes" xml:space="preserve">
          <source>Path to the records file</source>
          <target state="translated">レコードファイルへのパス</target>
        </trans-unit>
        <trans-unit id="b388b4324a9ca3ee8c5ec5a3752ef62a520c3006" translate="yes" xml:space="preserve">
          <source>Path to the records file (reading)</source>
          <target state="translated">レコードファイルへのパス(読み込み</target>
        </trans-unit>
        <trans-unit id="e41acbf6a6ed59dd01f7f7eb75acaebd59a6e898" translate="yes" xml:space="preserve">
          <source>Path to the records file (writing)</source>
          <target state="translated">レコードファイルへのパス(書き込み</target>
        </trans-unit>
        <trans-unit id="b95fd68a6e7f6a610c51b680d468fe0bb34b236e" translate="yes" xml:space="preserve">
          <source>Pattern for extracting elements to be used in &lt;code&gt;to&lt;/code&gt; templates</source>
          <target state="translated">で使用される要素を抽出するためのパターン &lt;code&gt;to&lt;/code&gt; テンプレート</target>
        </trans-unit>
        <trans-unit id="4d34f7a2b0b3b6df62a051917d7e7ac2de8a38df" translate="yes" xml:space="preserve">
          <source>Patterns</source>
          <target state="translated">Patterns</target>
        </trans-unit>
        <trans-unit id="720ba31b8c84226b1a83066ab9e1da80a8ba85c9" translate="yes" xml:space="preserve">
          <source>Percentage calculation</source>
          <target state="translated">割合計算</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="44f841c0a9265fe3a73e5c54d51edf6763b78ba7" translate="yes" xml:space="preserve">
          <source>Persistent cache</source>
          <target state="translated">永続的なキャッシュ</target>
        </trans-unit>
        <trans-unit id="8d96fe182eadd6337a10c14835f72230352ca486" translate="yes" xml:space="preserve">
          <source>Pitching Loader</source>
          <target state="translated">ピッチングローダー</target>
        </trans-unit>
        <trans-unit id="b62930d0710de4268cfd1b4505b2a2ad7a57660d" translate="yes" xml:space="preserve">
          <source>Placeholders</source>
          <target state="translated">Placeholders</target>
        </trans-unit>
        <trans-unit id="fb37135e0ea40744f1df3c3ff8b6e3e548e435d1" translate="yes" xml:space="preserve">
          <source>Please consult documentation before using them:</source>
          <target state="translated">ご使用の前にドキュメントをご参照ください。</target>
        </trans-unit>
        <trans-unit id="1dcbfad7a98fe256dfb32d31c12ca3bb5ce5f97f" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;sideEffects&lt;/code&gt; should be in the npm module's &lt;code&gt;package.json&lt;/code&gt; file and doesn't mean that you need to set &lt;code&gt;sideEffects&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your own project's &lt;code&gt;package.json&lt;/code&gt; which requires that big module.</source>
          <target state="translated">ことをしてくださいは、ノート &lt;code&gt;sideEffects&lt;/code&gt; NPMモジュールの中にあるべき &lt;code&gt;package.json&lt;/code&gt; のファイルと設定が必要なことを意味するわけではない &lt;code&gt;sideEffects&lt;/code&gt; に &lt;code&gt;false&lt;/code&gt; 独自のプロジェクトの中 &lt;code&gt;package.json&lt;/code&gt; その大きなモジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="afa9b2adb3fe687dd4a8cc44484250444f9b490d" translate="yes" xml:space="preserve">
          <source>Please note that CSPs are not enabled by default. A corresponding header &lt;code&gt;Content-Security-Policy&lt;/code&gt; or meta tag &lt;code&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; ...&amp;gt;&lt;/code&gt; needs to be sent with the document to instruct the browser to enable the CSP. Here's an example of what a CSP header including a CDN white-listed URL might look like:</source>
          <target state="translated">CSPはデフォルトでは有効になっていません。対応するヘッダー &lt;code&gt;Content-Security-Policy&lt;/code&gt; またはメタタグ &lt;code&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; ...&amp;gt;&lt;/code&gt; をドキュメントと共に送信して、ブラウザーにCSPを有効にするように指示する必要があります。以下は、CDNホワイトリストURLを含むCSPヘッダーの例です。</target>
        </trans-unit>
        <trans-unit id="d792a7b7ee2ee5a7c18e906c3b790687a371ade2" translate="yes" xml:space="preserve">
          <source>Please remember that setting &lt;code&gt;NODE_ENV&lt;/code&gt; doesn't automatically set &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NODE_ENV&lt;/code&gt; を設定しても、 &lt;code&gt;mode&lt;/code&gt; は自動的に設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a24274736159e5bb51eec33d2965184b8a8d058e" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;documentation&lt;/a&gt; to learn more. An understanding of the three &lt;code&gt;tap&lt;/code&gt; methods, as well as the hooks that provide them is crucial. The objects that extend &lt;code&gt;Tapable&lt;/code&gt; (e.g. the compiler), the hooks they provide, and each hook's type (e.g. the &lt;code&gt;SyncHook&lt;/code&gt;) will be noted.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。3つの &lt;code&gt;tap&lt;/code&gt; 方法と、それらを提供するフックを理解することが重要です。 &lt;code&gt;Tapable&lt;/code&gt; を拡張するオブジェクト（コンパイラなど）、それらが提供するフック、各フックのタイプ（ &lt;code&gt;SyncHook&lt;/code&gt; など）が示されます。</target>
        </trans-unit>
        <trans-unit id="816d3788bc2a66d5d32f8636b9ad86456c99d342" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;documentation&lt;/a&gt; to learn more. An understanding of the three &lt;code&gt;tap&lt;/code&gt; methods, as well as the hooks that provide them, is crucial. The objects that extend &lt;code&gt;Tapable&lt;/code&gt; (e.g. the compiler), the hooks they provide, and each hook's type (e.g. the &lt;code&gt;SyncHook&lt;/code&gt;) will be noted.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。3つの &lt;code&gt;tap&lt;/code&gt; 方法、およびそれらを提供するフックを理解することが重要です。 &lt;code&gt;Tapable&lt;/code&gt; を拡張するオブジェクト（コンパイラなど）、それらが提供するフック、および各フックのタイプ（ &lt;code&gt;SyncHook&lt;/code&gt; など）が示されます。</target>
        </trans-unit>
        <trans-unit id="fffc7ee52fbc0aedea28ea9911628bb68279c2b4" translate="yes" xml:space="preserve">
          <source>Please take a moment to read our contributing guidelines if you haven't yet done so.</source>
          <target state="translated">まだお読みになっていない方は、投稿ガイドラインをお読みください。</target>
        </trans-unit>
        <trans-unit id="a21c1554b28d950bc6b8f1592fbd61855a698e7a" translate="yes" xml:space="preserve">
          <source>Plugin API</source>
          <target state="translated">プラグイン API</target>
        </trans-unit>
        <trans-unit id="1919972ec1dd4693c387449ffdc80e4f8d7b507d" translate="yes" xml:space="preserve">
          <source>Plugin Options</source>
          <target state="translated">プラグインのオプション</target>
        </trans-unit>
        <trans-unit id="be6507fa53943d340c7520bd623ecbdeab4dec46" translate="yes" xml:space="preserve">
          <source>Plugin Types</source>
          <target state="translated">プラグインの種類</target>
        </trans-unit>
        <trans-unit id="8c96a6157436f12625ad7a92518b6d47e74e44d2" translate="yes" xml:space="preserve">
          <source>Plugin Used</source>
          <target state="translated">使用プラグイン</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="c2cb3e9ddef62f8ce6bd053ccea1880266085973" translate="yes" xml:space="preserve">
          <source>Plugins affecting the compiler</source>
          <target state="translated">コンパイラに影響を与えるプラグイン</target>
        </trans-unit>
        <trans-unit id="dc8500781fb9e8845460f9283bc4673626152f3c" translate="yes" xml:space="preserve">
          <source>Plugins affecting the environment of the compiler.</source>
          <target state="translated">コンパイラの環境に影響を与えるプラグイン</target>
        </trans-unit>
        <trans-unit id="c4404580c2d6e4293219d6520fbb0e555befbc4e" translate="yes" xml:space="preserve">
          <source>Plugins affecting the source code of modules.</source>
          <target state="translated">モジュールのソースコードに影響を与えるプラグイン</target>
        </trans-unit>
        <trans-unit id="1d817c41f95a536f92d934d7bdecc85177145725" translate="yes" xml:space="preserve">
          <source>Plugins are a key piece of the webpack ecosystem and provide the community with a powerful way to tap into webpack's compilation process. A plugin is able to &lt;a href=&quot;compiler-hooks#hooks&quot;&gt;hook&lt;/a&gt; into key events that are fired throughout each compilation. Every step of the way, the plugin will have full access to the &lt;code&gt;compiler&lt;/code&gt; and, when applicable, the current &lt;code&gt;compilation&lt;/code&gt;.</source>
          <target state="translated">プラグインはWebpackエコシステムの重要な部分であり、コミュニティにWebpackのコンパイルプロセスを利用する強力な方法を提供します。プラグインは、コンパイルのたびに発生する主要なイベントに&lt;a href=&quot;compiler-hooks#hooks&quot;&gt;フック&lt;/a&gt;することができます。方法のすべてのステップで、プラグインは &lt;code&gt;compiler&lt;/code&gt; と、該当する場合は現在の &lt;code&gt;compilation&lt;/code&gt; 完全にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7b17783ac43427bdebaad1531b6522097f0e521f" translate="yes" xml:space="preserve">
          <source>Plugins can affect logging capturing and display level</source>
          <target state="translated">プラグインは、ログのキャプチャと表示レベルに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="055ffa60e6263553e57e82581ec69a162848c83d" translate="yes" xml:space="preserve">
          <source>Plugins can give loaders more features.</source>
          <target state="translated">プラグインは、ローダーにより多くの機能を与えることができます。</target>
        </trans-unit>
        <trans-unit id="7581e6d44c3d8c9f3a085997fe4657a2df4f71a9" translate="yes" xml:space="preserve">
          <source>Plugins can report progress via &lt;a href=&quot;../plugins/progress-plugin&quot;&gt;&lt;code&gt;ProgressPlugin&lt;/code&gt;&lt;/a&gt;, which prints progress messages to stderr by default. In order to enable progress reporting, pass a &lt;code&gt;--progress&lt;/code&gt; argument when running the &lt;a href=&quot;cli&quot;&gt;webpack CLI&lt;/a&gt;.</source>
          <target state="translated">プラグインは&lt;a href=&quot;../plugins/progress-plugin&quot;&gt; &lt;code&gt;ProgressPlugin&lt;/code&gt; &lt;/a&gt;を介して進行状況を報告できます。ProgressPluginはデフォルトで進行状況メッセージをstderrに出力します。進行状況のレポートを有効にするには、 &lt;code&gt;--progress&lt;/code&gt; を実行するときに--progress引数を&lt;a href=&quot;cli&quot;&gt;渡します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4d08e2fd6ca2947e138e3124a13332506d96368" translate="yes" xml:space="preserve">
          <source>Plugins may use special fallback logic for detecting logging support &lt;code&gt;compilation.getLogger ? compilation.getLogger('PluginName') : console&lt;/code&gt; to provide a fallback for cases when an older webpack version is used which does not support &lt;code&gt;getLogger&lt;/code&gt; method on &lt;code&gt;compilation&lt;/code&gt; object.</source>
          <target state="translated">プラグインは、ロギングサポート &lt;code&gt;compilation.getLogger ? compilation.getLogger('PluginName') : console&lt;/code&gt; を検出するために特別なフォールバックロジックを使用する場合がありますか？Compilation.getLogger （ 'PluginName'）： &lt;code&gt;compilation&lt;/code&gt; オブジェクトで &lt;code&gt;getLogger&lt;/code&gt; メソッドをサポートしていない古いWebpackバージョンが使用されている場合のフォールバックを提供するコンソール。</target>
        </trans-unit>
        <trans-unit id="5d695fb20cb4e9f6d6aa995bc1644f7cafa7fd78" translate="yes" xml:space="preserve">
          <source>Plugins may use the &lt;code&gt;compiler.getInfrastructureLogger('PluginName')&lt;/code&gt; for logging. Using &lt;code&gt;infrastructure&lt;/code&gt; logging is not stored in the Stats and therefore not formatted. It's usually logged to the console/dashboard/GUI directly. It can be filtered by the user.</source>
          <target state="translated">プラグインは、ロギングに &lt;code&gt;compiler.getInfrastructureLogger('PluginName')&lt;/code&gt; を使用できます。 &lt;code&gt;infrastructure&lt;/code&gt; ロギングの使用は統計に保存されないため、フォーマットされません。通常、コンソール/ダッシュボード/ GUIに直接記録されます。ユーザーがフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="f5305f5fda5e1d05e7a85ff68d81b72ddb3f38fb" translate="yes" xml:space="preserve">
          <source>Plugins should prefer to use &lt;code&gt;compilation.getLogger('PluginName')&lt;/code&gt; for logging. This kind of logging is stored in the Stats and formatted accordingly. It can be filtered and exported by the user.</source>
          <target state="translated">プラグインは、ロギングに &lt;code&gt;compilation.getLogger('PluginName')&lt;/code&gt; を使用することをお勧めします。この種のログは統計に保存され、それに応じてフォーマットされます。ユーザーがフィルタリングしてエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="f07d29b36b7cbbcceae194206d11fd573dcaa16c" translate="yes" xml:space="preserve">
          <source>Plugins, which add entry chunks to the compilation.</source>
          <target state="translated">コンパイルにエントリチャンクを追加するプラグイン。</target>
        </trans-unit>
        <trans-unit id="c4581375b4816f15ef5ddb7e1f1d5df233c6d846" translate="yes" xml:space="preserve">
          <source>Polyfills for Node.js core libraries from &lt;a href=&quot;https://github.com/webpack/node-libs-browser&quot;&gt;&lt;code&gt;node-libs-browser&lt;/code&gt;&lt;/a&gt; are used if available, when the &lt;code&gt;NodeSourcePlugin&lt;/code&gt; plugin is enabled. See the list of &lt;a href=&quot;https://github.com/webpack/node-libs-browser#readme&quot;&gt;Node.js core libraries and their polyfills&lt;/a&gt;.</source>
          <target state="translated">Node.jsのコアライブラリのPolyfills &lt;a href=&quot;https://github.com/webpack/node-libs-browser&quot;&gt; &lt;code&gt;node-libs-browser&lt;/code&gt; &lt;/a&gt;利用できる場合と、使用されている &lt;code&gt;NodeSourcePlugin&lt;/code&gt; のプラグインが有効になっています。&lt;a href=&quot;https://github.com/webpack/node-libs-browser#readme&quot;&gt;Node.jsコアライブラリとそのポリフィル&lt;/a&gt;のリストをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ab8d78f09547b614a67fbed794e3840d047b64b0" translate="yes" xml:space="preserve">
          <source>Possible return values - &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, and &lt;code&gt;pure&lt;/code&gt;.</source>
          <target state="translated">可能な戻り値- &lt;code&gt;local&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、および &lt;code&gt;pure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ab50c08f5ec3364602cec4a1fa198fe04bdb04b" translate="yes" xml:space="preserve">
          <source>Possible values - &lt;code&gt;commonjs&lt;/code&gt; (CommonJS module syntax) and &lt;code&gt;module&lt;/code&gt; (ES module syntax).</source>
          <target state="translated">可能な値 &lt;code&gt;commonjs&lt;/code&gt; （CommonJSモジュール構文）および &lt;code&gt;module&lt;/code&gt; （ESモジュール構文）。</target>
        </trans-unit>
        <trans-unit id="edfaf99a1b4fe5b1cee002e250257d86314eca04" translate="yes" xml:space="preserve">
          <source>Possible values - &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, and &lt;code&gt;pure&lt;/code&gt;.</source>
          <target state="translated">可能な値- &lt;code&gt;local&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、および &lt;code&gt;pure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52e48d38205497d57aaf4d5a030c4760892250a1" translate="yes" xml:space="preserve">
          <source>Possible values are &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt; (default).</source>
          <target state="translated">可能な値は &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; または &lt;code&gt;info&lt;/code&gt; （デフォルト）です。</target>
        </trans-unit>
        <trans-unit id="361ae0458f5cb658b86063a130349c701509544c" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;mode&lt;/code&gt; are: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;development&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt;(default).</source>
          <target state="translated">以下のための可能な値 &lt;code&gt;mode&lt;/code&gt; 以下のとおりです。 &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;development&lt;/code&gt; や &lt;code&gt;production&lt;/code&gt; （デフォルト）。</target>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="translated">可能な値</target>
        </trans-unit>
        <trans-unit id="01f9ff5d0c9bc041f1daf305969f4fa700c1d939" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;&quot;pre&quot; | &quot;post&quot;&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;&quot;pre&quot; | &quot;post&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b94ddeb918dd715d4c7ff032f89b35e099b3216f" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;'javascript/auto' | 'javascript/dynamic' | 'javascript/esm' | 'json' | 'webassembly/sync' | 'webassembly/async' | 'asset' | 'asset/source' | 'asset/resource' | 'asset/inline'&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;'javascript/auto' | 'javascript/dynamic' | 'javascript/esm' | 'json' | 'webassembly/sync' | 'webassembly/async' | 'asset' | 'asset/source' | 'asset/resource' | 'asset/inline'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e8adfddad0e93b9444b7f0c980bba0a3afc1c3b" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;'pre' | 'post'&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;'pre' | 'post'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e6ac80011a82730dead6d5226911e67bbcc4833" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;'production'&lt;/code&gt;, &lt;code&gt;'development'&lt;/code&gt;, &lt;code&gt;'none'&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;'production'&lt;/code&gt; 、 &lt;code&gt;'development'&lt;/code&gt; 、 &lt;code&gt;'none'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcacfeba5279113a917547a96db5eccae811287e" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;false | an array of paths&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;false | an array of paths&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c713b7f15b91ef1b78375ae2913bd6c4dc47fd01" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;text/css&lt;/code&gt;</source>
          <target state="translated">可能な値： &lt;code&gt;text/css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a63334f4d8d2bcbbf74cc54685bb9f57072b610b" translate="yes" xml:space="preserve">
          <source>PostCSS Config Context</source>
          <target state="translated">PostCSSコンフィグコンテキスト</target>
        </trans-unit>
        <trans-unit id="8ab8978a6c7d7e66fd1556156f7ed50176905046" translate="yes" xml:space="preserve">
          <source>PostCSS Config Directory</source>
          <target state="translated">PostCSS設定ディレクトリ</target>
        </trans-unit>
        <trans-unit id="912919666e167a7390e4d6411897bca3889ebf2a" translate="yes" xml:space="preserve">
          <source>PostCSS Preset Env</source>
          <target state="translated">PostCSS プリセット環境</target>
        </trans-unit>
        <trans-unit id="0367efaf2680a1275ac2425768b15c6e4a159e2f" translate="yes" xml:space="preserve">
          <source>PostCSS chat:</source>
          <target state="translated">PostCSSのチャット。</target>
        </trans-unit>
        <trans-unit id="e70349debbb7710ab99a0726718f99d8ef564eef" translate="yes" xml:space="preserve">
          <source>PostHTML</source>
          <target state="translated">PostHTML</target>
        </trans-unit>
        <trans-unit id="2cfc6ae03601619aa86eab49f8cdcba160ca42e1" translate="yes" xml:space="preserve">
          <source>Pre-requisites</source>
          <target state="translated">Pre-requisites</target>
        </trans-unit>
        <trans-unit id="168bca5d8ffe7fcf0777b9490e3f8b20abb180c5" translate="yes" xml:space="preserve">
          <source>Predictable Long Term Caching with Webpack</source>
          <target state="translated">Webpack による予測可能な長期キャッシング</target>
        </trans-unit>
        <trans-unit id="cced56938ba773eb91c966bb6742dd7ec74f46eb" translate="yes" xml:space="preserve">
          <source>Predictable Long Term Caching with webpack</source>
          <target state="translated">webpack での予測可能な長期キャッシング</target>
        </trans-unit>
        <trans-unit id="a017516a26209a27675e5f8f9dfe745e80fc9c14" translate="yes" xml:space="preserve">
          <source>Preferred usage is via a &lt;code&gt;module.loaders&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;module.loaders&lt;/code&gt; 使用法はmodule.loadersによるものです。</target>
        </trans-unit>
        <trans-unit id="c466b70d8bb3283413094bfff0c5894318615fbd" translate="yes" xml:space="preserve">
          <source>Prefetch normal module requests, causing them to be resolved and built before the first &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; of that module occurs. Using this plugin can boost performance. Try to profile the build first to determine clever prefetching points.</source>
          <target state="translated">彼らは最初の前に解決して構築させる、通常のモジュールの要求をプリフェッチ &lt;code&gt;import&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; そのモジュールが原因で発生します。このプラグインを使用すると、パフォーマンスが向上します。最初にビルドのプロファイルを作成して、先読みの賢いポイントを特定してください。</target>
        </trans-unit>
        <trans-unit id="2937d90e96f47b36d8430320e9d4fdca15f49193" translate="yes" xml:space="preserve">
          <source>Prefetch the particular file</source>
          <target state="translated">特定のファイルをプリフェッチする</target>
        </trans-unit>
        <trans-unit id="46bf6ceee65f725ba28743e5056cd65872592a9b" translate="yes" xml:space="preserve">
          <source>Prefetch this request</source>
          <target state="translated">この要求をプリフェッチする</target>
        </trans-unit>
        <trans-unit id="390d835e9a58404f924bf8560cf971bb0c05dc03" translate="yes" xml:space="preserve">
          <source>PrefetchPlugin</source>
          <target state="translated">PrefetchPlugin</target>
        </trans-unit>
        <trans-unit id="f969b8b04b2e4eac51e6857c173d1cc50a449955" translate="yes" xml:space="preserve">
          <source>Prefetches &lt;code&gt;request&lt;/code&gt; and dependencies to enable a more parallel compilation. It doesn't create any chunk. The module is resolved from &lt;code&gt;request&lt;/code&gt; in &lt;code&gt;context&lt;/code&gt; (absolute path).</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; と依存関係をプリフェッチして、より並列なコンパイルを可能にします。チャンクは作成されません。モジュールは &lt;code&gt;context&lt;/code&gt; 内の &lt;code&gt;request&lt;/code&gt; から解決されます（絶対パス）。</target>
        </trans-unit>
        <trans-unit id="d4fc1d5078b2cdd1ec28d3674e875c70ed032f2b" translate="yes" xml:space="preserve">
          <source>Prefetching/Preloading modules</source>
          <target state="translated">モジュールのプリフェッチ/プリロード</target>
        </trans-unit>
        <trans-unit id="b0e853977c39285eb7d3ccd3ae2600e4eb4d8a8d" translate="yes" xml:space="preserve">
          <source>Prefixing with &lt;code&gt;!!&lt;/code&gt; will disable all configured loaders (preLoaders, loaders, postLoaders)</source>
          <target state="translated">接頭辞 &lt;code&gt;!!&lt;/code&gt; 構成されているすべてのローダー（preLoaders、loaders、postLoaders）を無効にします</target>
        </trans-unit>
        <trans-unit id="00d679688026b8b57fa53c6952dcd7c75c77557b" translate="yes" xml:space="preserve">
          <source>Prefixing with &lt;code&gt;!&lt;/code&gt; will disable all configured normal loaders</source>
          <target state="translated">接頭辞 &lt;code&gt;!&lt;/code&gt; 構成されたすべての通常のローダーを無効にします</target>
        </trans-unit>
        <trans-unit id="8fed604dc5b39a47a532f23858c9e4db5f65cc19" translate="yes" xml:space="preserve">
          <source>Prefixing with &lt;code&gt;-!&lt;/code&gt; will disable all configured preLoaders and loaders but not postLoaders</source>
          <target state="translated">接頭辞 &lt;code&gt;-!&lt;/code&gt; 構成済みのすべてのpreLoaderとローダーを無効にしますが、postLoaderは無効にしません</target>
        </trans-unit>
        <trans-unit id="b557f72e4bb86d25ee92b61deb79f7d6f99e2a55" translate="yes" xml:space="preserve">
          <source>Preload directive has a bunch of differences compared to prefetch:</source>
          <target state="translated">プリロードディレクティブはプリフェッチと比べて多くの違いがあります。</target>
        </trans-unit>
        <trans-unit id="93eafead7d994fc1c76cb5885f9101f436b01dc5" translate="yes" xml:space="preserve">
          <source>Preload one or more modules before loading the webpack configuration</source>
          <target state="translated">webpack 設定を読み込む前に 1 つ以上のモジュールをプリロードする</target>
        </trans-unit>
        <trans-unit id="19de4fcee88ae1bb0a8818fdccdf802f842045ea" translate="yes" xml:space="preserve">
          <source>Preload, Prefetch And Priorities in Chrome</source>
          <target state="translated">Chrome のプリロード、プリフェッチ、優先度</target>
        </trans-unit>
        <trans-unit id="9179293a16d129b230ef624d17e3d317d40674d0" translate="yes" xml:space="preserve">
          <source>Preloading content with rel=&quot;preload&quot;</source>
          <target state="translated">rel=&quot;preload &quot;でコンテンツをプリロードする</target>
        </trans-unit>
        <trans-unit id="a8bc382020aaaa716a496826f97b0c9d436c31a9" translate="yes" xml:space="preserve">
          <source>Preparation</source>
          <target state="translated">Preparation</target>
        </trans-unit>
        <trans-unit id="6117f4d694ff7c17ec6c519ced028d6cac0c5651" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets to serve them with Content-Encoding</source>
          <target state="translated">圧縮されたバージョンのアセットを用意して、Content-Encoding で提供します。</target>
        </trans-unit>
        <trans-unit id="bd64ff9d3407f6c6943e73f5137b7fdf87f6014e" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets to serve them with Content-Encoding.</source>
          <target state="translated">圧縮されたバージョンのアセットを用意して、Content-Encodingで提供します。</target>
        </trans-unit>
        <trans-unit id="865ef8e3f389be8778673b464053850270e87967" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets using &lt;code&gt;zopfli&lt;/code&gt; library.</source>
          <target state="translated">&lt;code&gt;zopfli&lt;/code&gt; ライブラリを使用してアセットの圧縮バージョンを準備します。</target>
        </trans-unit>
        <trans-unit id="6eb928f8c004dc86eed502a7a8287d9ea7438109" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets with node-zopfli</source>
          <target state="translated">node-zopfliでアセットの圧縮版を準備する</target>
        </trans-unit>
        <trans-unit id="27f7a1893bf46ce7bed54721bd66b70ede8794dc" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;Less&lt;/code&gt; code before the actual entry file. In this case, the &lt;code&gt;less-loader&lt;/code&gt; will not override the source but just &lt;strong&gt;prepend&lt;/strong&gt; the entry's content.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Less&lt;/code&gt; コードを追加します。この場合、 &lt;code&gt;less-loader&lt;/code&gt; はソースをオーバーライドせず、エントリのコンテンツを&lt;strong&gt;付加&lt;/strong&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="f0f860d32d135d77090a0e816e958fb9b72322f6" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;Sass&lt;/code&gt;/&lt;code&gt;SCSS&lt;/code&gt; code before the actual entry file. In this case, the &lt;code&gt;sass-loader&lt;/code&gt; will not override the &lt;code&gt;data&lt;/code&gt; option but just &lt;strong&gt;prepend&lt;/strong&gt; the entry's content.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Sass&lt;/code&gt; / &lt;code&gt;SCSS&lt;/code&gt; コードを付加します。この場合、 &lt;code&gt;sass-loader&lt;/code&gt; は &lt;code&gt;data&lt;/code&gt; オプションをオーバーライドせず、エントリのコンテンツを&lt;strong&gt;付加&lt;/strong&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="83bb9275a790fcf5669556d8cd406a143a1a608f" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;Stylus&lt;/code&gt; code before the actual entry file. In this case, the &lt;code&gt;stylus-loader&lt;/code&gt; will not override the source but just &lt;strong&gt;prepend&lt;/strong&gt; the entry's content.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Stylus&lt;/code&gt; コードを付加します。この場合、 &lt;code&gt;stylus-loader&lt;/code&gt; はソースをオーバーライドせず、エントリのコンテンツを&lt;strong&gt;付加&lt;/strong&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="ddfc3c6ab87aff7dbe5ce84f1f8f85d74985d4bb" translate="yes" xml:space="preserve">
          <source>Prepends/Appends &lt;code&gt;Less&lt;/code&gt; code to the actual entry file.</source>
          <target state="translated">実際のエントリファイルに &lt;code&gt;Less&lt;/code&gt; コードを追加/追加します。</target>
        </trans-unit>
        <trans-unit id="4018fcb4ff60cbe10013b2151c27d638ed0deb2f" translate="yes" xml:space="preserve">
          <source>Prepends/Appends &lt;code&gt;Sass&lt;/code&gt;/&lt;code&gt;SCSS&lt;/code&gt; code before the actual entry file.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Sass&lt;/code&gt; / &lt;code&gt;SCSS&lt;/code&gt; コードを付加/追加します。</target>
        </trans-unit>
        <trans-unit id="d1f34e53c3f6c0f8bbcdbda0ebffd0834ed6bd0f" translate="yes" xml:space="preserve">
          <source>Prepends/Appends &lt;code&gt;Stylus&lt;/code&gt; code to the actual entry file.</source>
          <target state="translated">&lt;code&gt;Stylus&lt;/code&gt; コードを実際のエントリファイルに付加/追加します。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="d75c22389c793a2795b276e8fa347d15c2cc8eb2" translate="yes" xml:space="preserve">
          <source>Preserve Comments</source>
          <target state="translated">コメントを保存する</target>
        </trans-unit>
        <trans-unit id="6745a9b78ef3aa773e5a4469128d054d7aae731a" translate="yes" xml:space="preserve">
          <source>Preserve comments in &lt;code&gt;output&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; コメントを保持する</target>
        </trans-unit>
        <trans-unit id="bca788763dd46b6bb079756ca4b68a206414f9a1" translate="yes" xml:space="preserve">
          <source>Preset</source>
          <target state="translated">Preset</target>
        </trans-unit>
        <trans-unit id="4c5b71d76433aa5873dea6b786d7419754f62e09" translate="yes" xml:space="preserve">
          <source>Prevent</source>
          <target state="translated">Prevent</target>
        </trans-unit>
        <trans-unit id="c2794e00cc8740613554b35b277da05b59754f41" translate="yes" xml:space="preserve">
          <source>Prevent Duplication</source>
          <target state="translated">重複防止</target>
        </trans-unit>
        <trans-unit id="4e4fc1d7fdfa37b74648dbf42fcaf4e9b410067a" translate="yes" xml:space="preserve">
          <source>Prevent Duplication: Use the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; to dedupe and split chunks.</source>
          <target state="translated">重複の防止：&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; &lt;/a&gt;を使用して、チャンクの重複排除と分割を行います。</target>
        </trans-unit>
        <trans-unit id="2f6099ca376518163d3dfa8c1f36e6250e904c68" translate="yes" xml:space="preserve">
          <source>Prevent generation of modules for &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; calls matching the following regular expressions:</source>
          <target state="translated">防止のためのモジュールの生成 &lt;code&gt;import&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; 次の正規表現に一致する呼び出しを：</target>
        </trans-unit>
        <trans-unit id="70d92421da8673a13334c0b7f2dc0443d3edd923" translate="yes" xml:space="preserve">
          <source>Prevent webpack from parsing any files matching the given regular expression(s). Ignored files &lt;strong&gt;should not&lt;/strong&gt; have calls to &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;define&lt;/code&gt; or any other importing mechanism. This can boost build performance when ignoring large libraries.</source>
          <target state="translated">webpackが指定された正規表現に一致するファイルを解析しないようにします。無視されたファイルに&lt;strong&gt;は&lt;/strong&gt;、 &lt;code&gt;import&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;define&lt;/code&gt; などのインポートメカニズムの呼び出しを含め&lt;strong&gt;ないでください&lt;/strong&gt;。これにより、大きなライブラリを無視する場合のビルドパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="f09555c71ab8f697b706fe0a465afb403257e4a7" translate="yes" xml:space="preserve">
          <source>Print compilation progress during build</source>
          <target state="translated">ビルド中のコンパイルの進捗状況を表示</target>
        </trans-unit>
        <trans-unit id="84fa8a294b54a501062999c9b542b8080d036f21" translate="yes" xml:space="preserve">
          <source>Print compilation progress in percentage</source>
          <target state="translated">コンパイルの進捗状況をパーセンテージで表示</target>
        </trans-unit>
        <trans-unit id="5c33e1916b7874178fa90f9435a4ee34e6c9d5bc" translate="yes" xml:space="preserve">
          <source>Prints result as JSON or store it in a file</source>
          <target state="translated">結果をJSONとして出力したり、ファイルに保存したりすることができます。</target>
        </trans-unit>
        <trans-unit id="3deef4bd45d7f04aaa754a8c8151d330d6833406" translate="yes" xml:space="preserve">
          <source>Prior to webpack 5 it was common to use:</source>
          <target state="translated">webpack 5以前は一般的に使用されていました。</target>
        </trans-unit>
        <trans-unit id="b8f12c5698b1446efc9c136ce5e53ec1fbe6adbe" translate="yes" xml:space="preserve">
          <source>Prior to webpack, front-end developers would use tools like &lt;a href=&quot;https://gruntjs.com/&quot;&gt;grunt&lt;/a&gt; and &lt;a href=&quot;https://gulpjs.com/&quot;&gt;gulp&lt;/a&gt; to process these assets and move them from their &lt;code&gt;/src&lt;/code&gt; folder into their &lt;code&gt;/dist&lt;/code&gt; or &lt;code&gt;/build&lt;/code&gt; directory. The same idea was used for JavaScript modules, but tools like webpack will &lt;strong&gt;dynamically bundle&lt;/strong&gt; all dependencies (creating what's known as a &lt;a href=&quot;../concepts/dependency-graph&quot;&gt;dependency graph&lt;/a&gt;). This is great because every module now &lt;em&gt;explicitly states its dependencies&lt;/em&gt; and we'll avoid bundling modules that aren't in use.</source>
          <target state="translated">WebPACKの前に、フロントエンドの開発者は、同様のツール使用します&lt;a href=&quot;https://gruntjs.com/&quot;&gt;うなり声&lt;/a&gt;と&lt;a href=&quot;https://gulpjs.com/&quot;&gt;一口に&lt;/a&gt;これらの資産を処理し、彼らのからそれらを移動するために &lt;code&gt;/src&lt;/code&gt; に自分の中にフォルダ &lt;code&gt;/dist&lt;/code&gt; のか &lt;code&gt;/build&lt;/code&gt; ディレクトリ。同じアイデアがJavaScriptモジュールにも使用されましたが、webpackなどのツールはすべての依存関係を&lt;strong&gt;動的にバンドルし&lt;/strong&gt;ます（&lt;a href=&quot;../concepts/dependency-graph&quot;&gt;依存関係グラフと&lt;/a&gt;呼ばれるものを作成します）。すべてのモジュールが&lt;em&gt;その依存関係&lt;/em&gt;を&lt;em&gt;明示的に示すように&lt;/em&gt;なり、使用されていないモジュールをバンドルすることを回避できるため、これは素晴らしいことです。</target>
        </trans-unit>
        <trans-unit id="853d057077a85b703ffdc0dbc6602a2799b5ea75" translate="yes" xml:space="preserve">
          <source>Prior to webpack, front-end developers would use tools like grunt and gulp to process these assets and move them from their &lt;code&gt;/src&lt;/code&gt; folder into their &lt;code&gt;/dist&lt;/code&gt; or &lt;code&gt;/build&lt;/code&gt; directory. The same idea was used for JavaScript modules, but tools like webpack will &lt;strong&gt;dynamically bundle&lt;/strong&gt; all dependencies (creating what's known as a &lt;a href=&quot;../concepts/dependency-graph&quot;&gt;dependency graph&lt;/a&gt;). This is great because every module now &lt;em&gt;explicitly states its dependencies&lt;/em&gt; and we'll avoid bundling modules that aren't in use.</source>
          <target state="translated">Webpackの前は、フロントエンドの開発者はgruntやgulpなどのツールを使用してこれらのアセットを処理し、 &lt;code&gt;/src&lt;/code&gt; フォルダーから &lt;code&gt;/dist&lt;/code&gt; または &lt;code&gt;/build&lt;/code&gt; ディレクトリに移動していました。JavaScriptモジュールにも同じアイデアが使用されましたが、webpackなどのツールはすべての依存関係を&lt;strong&gt;動的にバンドルし&lt;/strong&gt;ます（&lt;a href=&quot;../concepts/dependency-graph&quot;&gt;依存関係グラフと&lt;/a&gt;呼ばれるものを作成します）。すべてのモジュール&lt;em&gt;が依存関係&lt;/em&gt;を&lt;em&gt;明示的に示すように&lt;/em&gt;なり、使用されていないモジュールのバンドルを回避できるため、これは素晴らしいことです。</target>
        </trans-unit>
        <trans-unit id="5bc14c6a8a73b39710c3f86c823755dd32a2486d" translate="yes" xml:space="preserve">
          <source>Problems with &lt;code&gt;url(...)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url(...)&lt;/code&gt; に関する問題</target>
        </trans-unit>
        <trans-unit id="d9d5a1a4e8294b7d8b0b015f9f5ba3bd419c7e5e" translate="yes" xml:space="preserve">
          <source>Process &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; tags</source>
          <target state="translated">プロセスの &lt;code&gt;script&lt;/code&gt; と &lt;code&gt;link&lt;/code&gt; タグ</target>
        </trans-unit>
        <trans-unit id="b48e6dc9905a9c0bfe2196cd194579a3ba092721" translate="yes" xml:space="preserve">
          <source>Process the given module dependencies.</source>
          <target state="translated">与えられたモジュールの依存関係を処理します。</target>
        </trans-unit>
        <trans-unit id="9fdf135e040b8a04f9a9379941ff8ed8bea4b387" translate="yes" xml:space="preserve">
          <source>Processed by webpack.</source>
          <target state="translated">webpackで処理しています。</target>
        </trans-unit>
        <trans-unit id="df70fc7991d3f1476ee9b62f9991c5a0f2c589e0" translate="yes" xml:space="preserve">
          <source>Production</source>
          <target state="translated">Production</target>
        </trans-unit>
        <trans-unit id="5f2ef3e2f3577a2d2bd8b959bd3e440184953d37" translate="yes" xml:space="preserve">
          <source>Production &amp;gt; Development</source>
          <target state="translated">生産&amp;gt;開発</target>
        </trans-unit>
        <trans-unit id="c26e233131491c824870820a3e2b3a31b5923ca6" translate="yes" xml:space="preserve">
          <source>Profile them to not introduce a performance problem here.</source>
          <target state="translated">ここにパフォーマンスの問題を導入しないために、彼らをプロファイルします。</target>
        </trans-unit>
        <trans-unit id="cea5295b78ec1b99a624dda73a7e6d10f18cdf3f" translate="yes" xml:space="preserve">
          <source>Profiling</source>
          <target state="translated">Profiling</target>
        </trans-unit>
        <trans-unit id="eb4b2578141e01fd0c09daab7c2b1fcc38468689" translate="yes" xml:space="preserve">
          <source>ProfilingPlugin</source>
          <target state="translated">ProfilingPlugin</target>
        </trans-unit>
        <trans-unit id="1b90271d66cf2d3ac755d49a550fe5f31b9eca5f" translate="yes" xml:space="preserve">
          <source>Progress</source>
          <target state="translated">Progress</target>
        </trans-unit>
        <trans-unit id="b4ae6e1536b4c5b8bb447006ff7c7d0e54e98966" translate="yes" xml:space="preserve">
          <source>Progress plugin</source>
          <target state="translated">プログレスプラグイン</target>
        </trans-unit>
        <trans-unit id="ee50a58f4658425f2606deb72485539d209a46d0" translate="yes" xml:space="preserve">
          <source>ProgressPlugin</source>
          <target state="translated">ProgressPlugin</target>
        </trans-unit>
        <trans-unit id="9ce7fc34d5a940a43c1c9a5378b9ba9f8ad51b8a" translate="yes" xml:space="preserve">
          <source>Progressive Web Application</source>
          <target state="translated">プログレッシブWebアプリケーション</target>
        </trans-unit>
        <trans-unit id="a1d47544cbf8518c826a49f4542afebff6574602" translate="yes" xml:space="preserve">
          <source>Progressive Web Applications (or PWAs) are web apps that deliver an experience similar to native applications. There are many things that can contribute to that. Of these, the most significant is the ability for an app to be able to function when &lt;strong&gt;offline&lt;/strong&gt;. This is achieved through the use of a web technology called &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;.</source>
          <target state="translated">プログレッシブWebアプリケーション（またはPWA）は、ネイティブアプリケーションと同様のエクスペリエンスを提供するWebアプリです。それに貢献することができる多くのものがあります。これらの中で最も重要なのは、&lt;strong&gt;オフライン&lt;/strong&gt;時にアプリが機能できることです。これは、&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;と呼ばれるWebテクノロジーを使用して実現されます。</target>
        </trans-unit>
        <trans-unit id="351f56a6fefd5127c90506d3e91990f1d7631787" translate="yes" xml:space="preserve">
          <source>Properties:</source>
          <target state="translated">Properties:</target>
        </trans-unit>
        <trans-unit id="b2e2405ab7402f6ab230b6398229a23b1c3e9380" translate="yes" xml:space="preserve">
          <source>Property in the &lt;code&gt;this&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; オブジェクトのプロパティ。</target>
        </trans-unit>
        <trans-unit id="b71bc359101e7e3543bb1c11cd760c55850d45a2" translate="yes" xml:space="preserve">
          <source>Property in the global object, for node.</source>
          <target state="translated">グローバルオブジェクトのプロパティ。</target>
        </trans-unit>
        <trans-unit id="41e1e744dda7cd8949e21e9c59e08d6fbb8371a1" translate="yes" xml:space="preserve">
          <source>Provide Babel presets and plugins</source>
          <target state="translated">バベルのプリセットとプラグインを提供</target>
        </trans-unit>
        <trans-unit id="f71aba112975c3f77f3e63ba1d059603e20d8ce5" translate="yes" xml:space="preserve">
          <source>Provide a cache directory where cache items should be stored (used for default read/write implementation)</source>
          <target state="translated">キャッシュアイテムが格納されるキャッシュディレクトリを提供する (デフォルトの読み書き実装で使用)</target>
        </trans-unit>
        <trans-unit id="21146cf496888628c11aeec78d6ad39f64f9113c" translate="yes" xml:space="preserve">
          <source>Provide a handler function which will be called when hooks report progress. &lt;code&gt;handler&lt;/code&gt; function arguments:</source>
          <target state="translated">フックが進行状況を報告するときに呼び出されるハンドラー関数を提供します。 &lt;code&gt;handler&lt;/code&gt; 関数の引数：</target>
        </trans-unit>
        <trans-unit id="911f482221520b259e4f50cced432d989a75a6ca" translate="yes" xml:space="preserve">
          <source>Provide an array of strings in case you have multiple static folders set in &lt;a href=&quot;#devservercontentbase&quot;&gt;&lt;code&gt;contentBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#devservercontentbase&quot;&gt; &lt;code&gt;contentBase&lt;/code&gt; に&lt;/a&gt;複数の静的フォルダーが設定されている場合は、文字列の配列を指定します。</target>
        </trans-unit>
        <trans-unit id="9e73e398ff413d23360495d7730d96a04b3fa96d" translate="yes" xml:space="preserve">
          <source>Provide an invalidation identifier which is used to generate the hashes. You can use it for extra dependencies of loaders (used for default read/write implementation)</source>
          <target state="translated">ハッシュを生成するために使用される無効化識別子を提供します。これはローダーの追加の依存関係に使用することができます (デフォルトの読み書き実装に使用されます)</target>
        </trans-unit>
        <trans-unit id="002518b5702e29c2b3cc421d6438705e64215ff1" translate="yes" xml:space="preserve">
          <source>Provide browser name to use instead of the default one:</source>
          <target state="translated">デフォルトのものではなく、使用するブラウザ名を指定します。</target>
        </trans-unit>
        <trans-unit id="c95356976c75eef71cd7567f26cf1af85f3b0149" translate="yes" xml:space="preserve">
          <source>Provide labels &lt;code&gt;require:&lt;/code&gt; and &lt;code&gt;exports:&lt;/code&gt; to modules.</source>
          <target state="translated">ラベルに &lt;code&gt;require:&lt;/code&gt; を提供し、モジュールに &lt;code&gt;exports:&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e70aa82f2d754cac2d596498c239f9fdcb217838" translate="yes" xml:space="preserve">
          <source>Provide path to a webpack configuration file e.g. &lt;code&gt;./webpack.config.js&lt;/code&gt;</source>
          <target state="translated">WebPACKの設定ファイルへのパスを提供するなど &lt;code&gt;./webpack.config.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18f85a610445d7ff2881c62d6d72f3622d17fb80" translate="yes" xml:space="preserve">
          <source>Provide stuff that is normally available in Node.js modules.</source>
          <target state="translated">Node.js モジュールで通常利用できるものを提供する。</target>
        </trans-unit>
        <trans-unit id="28921ddb834c3ca83287ff2ccb648a91d484d86b" translate="yes" xml:space="preserve">
          <source>Provide stuff that is normally available in require.js.</source>
          <target state="translated">通常はrequire.jsで利用できるものを提供します。</target>
        </trans-unit>
        <trans-unit id="9c18bd1e4db6173bb75ba6a0ac988bd0c8ce1e7f" translate="yes" xml:space="preserve">
          <source>Provide the &lt;code&gt;mode&lt;/code&gt; option in the config:</source>
          <target state="translated">構成で &lt;code&gt;mode&lt;/code&gt; オプションを指定します。</target>
        </trans-unit>
        <trans-unit id="a0b16c44f29505f28172dc6d40099bf222dd0c68" translate="yes" xml:space="preserve">
          <source>Provide these modules as globals, see &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt;</source>
          <target state="translated">これらのモジュールをグローバルとして提供します。&lt;a href=&quot;../guides/shimming&quot;&gt;シミングを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="2eaf0c1fa27bf97557973ef692273e812d50197f" translate="yes" xml:space="preserve">
          <source>Provide your own certificate using the &lt;a href=&quot;#devserverhttps&quot;&gt;https&lt;/a&gt; option:</source>
          <target state="translated">&lt;a href=&quot;#devserverhttps&quot;&gt;https&lt;/a&gt;オプションを使用して独自の証明書を提供します。</target>
        </trans-unit>
        <trans-unit id="7e23b3c84c3ec72742e36387d71dff6a0095f93d" translate="yes" xml:space="preserve">
          <source>ProvidePlugin</source>
          <target state="translated">ProvidePlugin</target>
        </trans-unit>
        <trans-unit id="00b2d96c2e0bb46b5b8efa6185b7476aea3c8dca" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.context&lt;/code&gt;. The parameter &lt;code&gt;modulesDirectories&lt;/code&gt; and &lt;code&gt;extensions&lt;/code&gt; are used to find alternative requests for files. It's useful to provide the same arrays as you provide to the resolver.</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; を提供します。パラメータ &lt;code&gt;modulesDirectories&lt;/code&gt; および &lt;code&gt;extensions&lt;/code&gt; は、ファイルの代替リクエストを見つけるために使用されます。リゾルバーに提供するのと同じ配列を提供すると便利です。</target>
        </trans-unit>
        <trans-unit id="ccac1bffde4b46feae3d37ac89d8a797666697ad" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.ensure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require.ensure&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="caea413a4ea18be73d6426da779623f518a353d0" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.include&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require.include&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="3f35c08902b87030a7f86cd35a275b18c6461b0d" translate="yes" xml:space="preserve">
          <source>Provides AMD-style &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; to modules. Also bind &lt;code&gt;require.amd&lt;/code&gt;, &lt;code&gt;define.amd&lt;/code&gt; and webpack_amd_options## to the &lt;code&gt;options&lt;/code&gt; passed as parameter.</source>
          <target state="translated">AMDスタイルの &lt;code&gt;define&lt;/code&gt; を提供し、モジュールに &lt;code&gt;require&lt;/code&gt; します。また、パラメーターとして渡された &lt;code&gt;options&lt;/code&gt; &lt;code&gt;require.amd&lt;/code&gt; 、 &lt;code&gt;define.amd&lt;/code&gt; 、およびwebpack_amd_options ##をバインドします。</target>
        </trans-unit>
        <trans-unit id="3d4acf80bc5ea0f22c1e5e92813f8cc30ff36540" translate="yes" xml:space="preserve">
          <source>Provides CommonJs-style &lt;code&gt;require&lt;/code&gt; to modules.</source>
          <target state="translated">CommonJsスタイルの &lt;code&gt;require&lt;/code&gt; をモジュールに提供します。</target>
        </trans-unit>
        <trans-unit id="6b841085b8de02e0934f48155663289e02a0aae8" translate="yes" xml:space="preserve">
          <source>Provides an option to execute a custom function when &lt;code&gt;webpack-dev-server&lt;/code&gt; starts listening for connections on a port.</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; がポートで接続のリッスンを開始したときにカスタム関数を実行するオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="14c6c2b56fa620cfe65b896f633e3baef406a8ba" translate="yes" xml:space="preserve">
          <source>Provides the ability to execute custom middleware after all other middleware internally within the server.</source>
          <target state="translated">サーバー内で他のすべてのミドルウェアの後にカスタムミドルウェアを実行する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="651b73c46abd2e0cc12c0978ce9833dcabb3b6c5" translate="yes" xml:space="preserve">
          <source>Provides the ability to execute custom middleware prior to all other middleware internally within the server. This could be used to define custom handlers, for example:</source>
          <target state="translated">サーバー内の他のすべてのミドルウェアよりも先にカスタムミドルウェアを実行する機能を提供します。これは、例えばカスタムハンドラを定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="27c5da97c8cbc3a2dcec75df0aec821674e88c63" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; helps to statically detect CommonJs files.</source>
          <target state="translated">&lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 提供：「commonjs」は、CommonJsファイルを静的に検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="28b70e13c4e40ca0300ca86b06595400545e33cc" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 提供</target>
        </trans-unit>
        <trans-unit id="e9301000f0a00583a5810ba795051e5ddf296854" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 提供する</target>
        </trans-unit>
        <trans-unit id="52f283e529244feedb24615d14b30d3b3994db93" translate="yes" xml:space="preserve">
          <source>Providing CommonJs and ESM version (stateful)</source>
          <target state="translated">CommonJsとESM版の提供(ステートフル</target>
        </trans-unit>
        <trans-unit id="abf9b66224e1f58ad0acce8bf8195532997f3c62" translate="yes" xml:space="preserve">
          <source>Providing CommonJs and ESM version (stateless)</source>
          <target state="translated">CommonJsとESM版の提供(ステートレス)</target>
        </trans-unit>
        <trans-unit id="da1fcd9698a2c8d58f9f604888ddebf51fbb9e81" translate="yes" xml:space="preserve">
          <source>Providing Node.js, WebWorker and browser versions</source>
          <target state="translated">Node.js、WebWorker、ブラウザ版の提供</target>
        </trans-unit>
        <trans-unit id="76c11420be22335090496e30d7617a0fab733fbf" translate="yes" xml:space="preserve">
          <source>Providing Node.js, browser and electron versions</source>
          <target state="translated">Node.js、ブラウザ版、電子版の提供</target>
        </trans-unit>
        <trans-unit id="61a88384655b879fbdde4ceffb8fe0825f47575f" translate="yes" xml:space="preserve">
          <source>Providing a &lt;code&gt;Function&lt;/code&gt; to &lt;code&gt;devServer.writeToDisk&lt;/code&gt; can be used for filtering. The function follows the same premise as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;code&gt;Array#filter&lt;/code&gt;&lt;/a&gt; in which a boolean return value tells if the file should be written to disk.</source>
          <target state="translated">&lt;code&gt;devServer.writeToDisk&lt;/code&gt; に &lt;code&gt;Function&lt;/code&gt; を提供すると、フィルタリングに使用できます。この関数は、ブール値の戻り値がファイルをディスクに書き込む必要があるかどうかを示す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt; &lt;code&gt;Array#filter&lt;/code&gt; &lt;/a&gt;と同じ前提に従います。</target>
        </trans-unit>
        <trans-unit id="0d13e48eb5a0269f84fb1bead3062dc01f49ea59" translate="yes" xml:space="preserve">
          <source>Providing a &lt;code&gt;RegExp&lt;/code&gt; to &lt;code&gt;{cacheGroup}.test&lt;/code&gt;:</source>
          <target state="translated">提供 &lt;code&gt;RegExp&lt;/code&gt; に &lt;code&gt;{cacheGroup}.test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdbc27ea9e33622affb475282330db222c29f3bc" translate="yes" xml:space="preserve">
          <source>Providing a bundled script version for direct browser consumption</source>
          <target state="translated">ブラウザで直接消費するためのスクリプトのバンドル版の提供</target>
        </trans-unit>
        <trans-unit id="89fd29501af0069be131ddb911929200aa72130f" translate="yes" xml:space="preserve">
          <source>Providing a function to&lt;code&gt;{cacheGroup}.test&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{cacheGroup}.test&lt;/code&gt; に関数を提供する：</target>
        </trans-unit>
        <trans-unit id="cfdbd7c5236fc2901a235f32ab1b08a7a1cfea96" translate="yes" xml:space="preserve">
          <source>Providing a string or a function allows you to use a custom name. Specifying either a string or a function that always returns the same string will merge all common modules and vendors into a single chunk. This might lead to bigger initial downloads and slow down page loads.</source>
          <target state="translated">文字列や関数を指定することで、カスタム名を使用することができます。文字列または常に同じ文字列を返す関数を指定すると、すべての共通モジュールとベンダーを一つの塊に統合します。これは、初期ダウンロードが大きくなったり、ページの読み込みが遅くなったりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="53c9af82b1a5034915099508bdf1641efc8402c8" translate="yes" xml:space="preserve">
          <source>Providing a string to &lt;code&gt;devServer.transportMode&lt;/code&gt; is a shortcut to setting both &lt;code&gt;devServer.transportMode.client&lt;/code&gt; and &lt;code&gt;devServer.transportMode.server&lt;/code&gt; to the given string value.</source>
          <target state="translated">&lt;code&gt;devServer.transportMode&lt;/code&gt; に文字列を提供することは、 &lt;code&gt;devServer.transportMode.client&lt;/code&gt; と &lt;code&gt;devServer.transportMode.server&lt;/code&gt; の両方を指定された文字列値に設定するためのショートカットです。</target>
        </trans-unit>
        <trans-unit id="cf54727443488c5dfc569d208ed89ce7f5cb60bd" translate="yes" xml:space="preserve">
          <source>Providing devtools or production optimizations</source>
          <target state="translated">devtools やプロダクションの最適化を提供する</target>
        </trans-unit>
        <trans-unit id="3fb402035c6abd0f5d9fb50947b86a8d8a8ecdf5" translate="yes" xml:space="preserve">
          <source>Providing different versions depending on target environment</source>
          <target state="translated">ターゲット環境に応じて異なるバージョンを提供</target>
        </trans-unit>
        <trans-unit id="d6bbd4586493e9c9676fb86cd19dfd11176c13da" translate="yes" xml:space="preserve">
          <source>Providing only a CommonJs version</source>
          <target state="translated">CommonJsのバージョンのみの提供</target>
        </trans-unit>
        <trans-unit id="13fa7b193de0bbe33d459acb490297a712187679" translate="yes" xml:space="preserve">
          <source>Providing only an ESM version</source>
          <target state="translated">ESMバージョンのみの提供</target>
        </trans-unit>
        <trans-unit id="4142b96f54c15dc4e11fe1b44786bc0167f9f4cb" translate="yes" xml:space="preserve">
          <source>Providing the &lt;code&gt;mode&lt;/code&gt; configuration option tells webpack to use its built-in optimizations accordingly.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 設定オプションを提供すると、それに応じて組み込みの最適化を使用するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="cc5d66bd095ccf64cdaf8dab20ee18d4ee9f3910" translate="yes" xml:space="preserve">
          <source>Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain.</source>
          <target state="translated">いくつかの URL をプロキシすることは、API バックエンド開発サーバーを別個に持っていて、同じドメインで API リクエストを送信したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="138809ef784cde88aec7f588f1644dcbf06a9730" translate="yes" xml:space="preserve">
          <source>Public Path</source>
          <target state="translated">公道</target>
        </trans-unit>
        <trans-unit id="2733766caea16feb51903ce34a90c101ba2bf76f" translate="yes" xml:space="preserve">
          <source>Pure CSS, CSS modules and PostCSS</source>
          <target state="translated">ピュアCSS、CSSモジュール、PostCSS</target>
        </trans-unit>
        <trans-unit id="bad627c5524aadbdba72f875f9cde8011754d0e5" translate="yes" xml:space="preserve">
          <source>Put this loader in front of other loaders. The following loaders run in a worker pool.</source>
          <target state="translated">このローダーを他のローダーの前に置きます。以下のローダーはワーカープールで実行されます。</target>
        </trans-unit>
        <trans-unit id="53fb27ed3568a98ac19274e39a58d83510ec0c2f" translate="yes" xml:space="preserve">
          <source>Putting the content of &lt;code&gt;helpers&lt;/code&gt; into each chunk will result into its code being downloaded twice. By using a separate chunk this will only happen once. We pay the cost of an additional request, which could be considered a tradeoff. That's why there is a minimum size of 30kb.</source>
          <target state="translated">&lt;code&gt;helpers&lt;/code&gt; のコンテンツを各チャンクに入れると、コードが2回ダウンロードされます。別のチャンクを使用することにより、これは一度だけ行われます。私たちは追加のリクエストの費用を支払いますが、これはトレードオフと見なすことができます。そのため、最小サイズは30kbです。</target>
        </trans-unit>
        <trans-unit id="8a9b6130aa6732b5b6bc6d3b954216477743ad28" translate="yes" xml:space="preserve">
          <source>Qualities</source>
          <target state="translated">Qualities</target>
        </trans-unit>
        <trans-unit id="14a1c21a1304ad0ee741ad05bda442f60c1f277e" translate="yes" xml:space="preserve">
          <source>Query Options</source>
          <target state="translated">クエリオプション</target>
        </trans-unit>
        <trans-unit id="f9547326220882df69495a2dd01e3a453ece7043" translate="yes" xml:space="preserve">
          <source>Query value</source>
          <target state="translated">クエリ値</target>
        </trans-unit>
        <trans-unit id="287b9a538493902223664f10fed505869d105145" translate="yes" xml:space="preserve">
          <source>Query with leading &lt;code&gt;?&lt;/code&gt;</source>
          <target state="translated">先行するクエリ &lt;code&gt;?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="138f14b0b01ba7ad70311f3aabaa6e572b2cb47c" translate="yes" xml:space="preserve">
          <source>QueryString Options</source>
          <target state="translated">クエリ文字列オプション</target>
        </trans-unit>
        <trans-unit id="4fcb8c79d68fd4d6d6033a1d4be369eaa8ad224e" translate="yes" xml:space="preserve">
          <source>Rather, because &lt;code&gt;moment&lt;/code&gt; imports with this code:</source>
          <target state="translated">むしろ、 &lt;code&gt;moment&lt;/code&gt; はこのコードでインポートされるため：</target>
        </trans-unit>
        <trans-unit id="9b9ded6d2425a046da4a82a8457d4dd2a87d3a49" translate="yes" xml:space="preserve">
          <source>Re-run the &lt;code&gt;npm run build&lt;/code&gt; command and open &lt;code&gt;dist/index.html&lt;/code&gt;. If you look at the console in your developer tools, you should be able to see your imported data being logged to the console!</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; コマンドを再実行し、 &lt;code&gt;dist/index.html&lt;/code&gt; を開きます。開発ツールでコンソールを見ると、インポートしたデータがコンソールに記録されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="b19cedad67ef9438f5103b1c7e5b4186a79fbb85" translate="yes" xml:space="preserve">
          <source>Re-run the &lt;code&gt;npm run build&lt;/code&gt; command and open &lt;code&gt;dist/index.html&lt;/code&gt;. You should be able to see your imported data being logged to the console!</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; コマンドを再実行し、 &lt;code&gt;dist/index.html&lt;/code&gt; を開きます。インポートしたデータがコンソールに記録されているのを確認できるはずです。</target>
        </trans-unit>
        <trans-unit id="c9d9c05e89f890070a589388790c9ebfd8a65725" translate="yes" xml:space="preserve">
          <source>React: &lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;Code Splitting and Lazy Loading&lt;/a&gt;</source>
          <target state="translated">React：&lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;コード分​​割と遅延読み込み&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c39d343ee23cf54872e3b0b82688f0bee8855736" translate="yes" xml:space="preserve">
          <source>Read More about Extending Configuration Files</source>
          <target state="translated">設定ファイルの拡張についての詳細はこちら</target>
        </trans-unit>
        <trans-unit id="d39e943de60c8e1353fd4906db8f2f19a2b751fc" translate="yes" xml:space="preserve">
          <source>Read in which &lt;a href=&quot;../configuration/mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; webpack is running.</source>
          <target state="translated">Webpackが実行されている&lt;a href=&quot;../configuration/mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;を読み取ります。</target>
        </trans-unit>
        <trans-unit id="a5d02b469c10ccab1651045b7f003a41b5defb2b" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guides/author-libraries&quot;&gt;authoring libraries guide&lt;/a&gt; guide for more information on &lt;code&gt;output.library&lt;/code&gt; as well as &lt;code&gt;output.libraryTarget&lt;/code&gt;.</source>
          <target state="translated">読む&lt;a href=&quot;../guides/author-libraries&quot;&gt;オーサリングライブラリガイド&lt;/a&gt;の詳細についてのガイドを &lt;code&gt;output.library&lt;/code&gt; など &lt;code&gt;output.libraryTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76c9e6b091f8555f8022635989382563379e3c96" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guides/installation&quot;&gt;installation guide&lt;/a&gt; if you don't already have webpack and CLI installed.</source>
          <target state="translated">webpackとCLIがまだインストールされていない場合は、&lt;a href=&quot;../guides/installation&quot;&gt;インストールガイド&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="23f14c205e758becbd08e59f44cdd7e8887044c2" translate="yes" xml:space="preserve">
          <source>Readable ids for better debugging.</source>
          <target state="translated">読み取り可能な ID でより良いデバッグが可能になりました。</target>
        </trans-unit>
        <trans-unit id="8b9831e6175fa654bc52da1f11e26f428496ffea" translate="yes" xml:space="preserve">
          <source>Recently, &lt;code&gt;ts-loader&lt;/code&gt; has started to consume the internal TypeScript watch mode APIs which dramatically decreases the number of modules to be rebuilt on each iteration. This &lt;code&gt;experimentalWatchApi&lt;/code&gt; shares the same logic as the normal TypeScript watch mode itself and is quite stable for development use. Turn on &lt;code&gt;transpileOnly&lt;/code&gt; as well for truly fast incremental builds.</source>
          <target state="translated">最近、 &lt;code&gt;ts-loader&lt;/code&gt; は、内部のTypeScript監視モードAPIを使用し始め、反復ごとに再構築するモジュールの数を劇的に減らしています。この &lt;code&gt;experimentalWatchApi&lt;/code&gt; は、通常のTypeScriptウォッチモード自体と同じロジックを共有し、開発用に非常に安定しています。本当に高速なインクリメンタルビルドでは、 &lt;code&gt;transpileOnly&lt;/code&gt; もオンにします。</target>
        </trans-unit>
        <trans-unit id="06210493d8afafd3fbe9c98e7aefe7e12c50cb5e" translate="yes" xml:space="preserve">
          <source>Recommendations:</source>
          <target state="translated">Recommendations:</target>
        </trans-unit>
        <trans-unit id="bbb37b6d15db38153847eeb919d56d5328c44951" translate="yes" xml:space="preserve">
          <source>RecordIdsPlugin</source>
          <target state="translated">RecordIdsPlugin</target>
        </trans-unit>
        <trans-unit id="500dd454daedf0b0d7fb544e9ac14192f693de18" translate="yes" xml:space="preserve">
          <source>Records are particularly useful if you have a complex setup that leverages &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt;. The data can be used to ensure the split bundles are achieving the &lt;a href=&quot;../guides/caching&quot;&gt;caching&lt;/a&gt; behavior you need.</source>
          <target state="translated">レコードは、&lt;a href=&quot;../guides/code-splitting&quot;&gt;コード分​​割&lt;/a&gt;を活用する複雑な設定がある場合に特に役立ちます。データを使用して、分割バンドルが必要な&lt;a href=&quot;../guides/caching&quot;&gt;キャッシング&lt;/a&gt;動作を確実に実行できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="a9db278849628f2a8889e6faa10f8ec74e43e5ba" translate="yes" xml:space="preserve">
          <source>Redirect module requests when normal resolving fails.</source>
          <target state="translated">通常の解決に失敗した場合にモジュールのリクエストをリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="251a6acd424a17f027e411b68bb69d330d579ec2" translate="yes" xml:space="preserve">
          <source>Reference syntax</source>
          <target state="translated">参照構文</target>
        </trans-unit>
        <trans-unit id="29edf14ed2cf63f8c57f91d622484b33ec5b610d" translate="yes" xml:space="preserve">
          <source>Reference the &lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs&quot;&gt;demo html file&lt;/a&gt; for the proper loading sequence.</source>
          <target state="translated">適切なロードシーケンスについては、&lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs&quot;&gt;デモHTMLファイル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="806430f89bd9b62c7cfb2eed31236525d29c5c5e" translate="yes" xml:space="preserve">
          <source>References a dll manifest file to map dependency names to module ids, then requires them as needed using the internal &lt;code&gt;__webpack_require__&lt;/code&gt; function.</source>
          <target state="translated">DLLマニフェストファイルを参照して依存関係名をモジュールIDにマップし、必要に応じて内部 &lt;code&gt;__webpack_require__&lt;/code&gt; 関数を使用して依存関係名を要求します。</target>
        </trans-unit>
        <trans-unit id="ca5db4fe93ba98fe1b576309acf2388052f2a36a" translate="yes" xml:space="preserve">
          <source>RegExp</source>
          <target state="translated">RegExp</target>
        </trans-unit>
        <trans-unit id="e84924bdbf290769f17a9fea046a3d8be57d31f9" translate="yes" xml:space="preserve">
          <source>Register a function to listen for changes in &lt;code&gt;status&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 変化をリッスンする関数を登録します。</target>
        </trans-unit>
        <trans-unit id="dd7bb9e1d6de0940bf8cc7f5d552eac3e907a3df" translate="yes" xml:space="preserve">
          <source>Registering Our Service Worker</source>
          <target state="translated">サービスワーカーの登録</target>
        </trans-unit>
        <trans-unit id="743f247412091cd63d9bf68867401d2b01423153" translate="yes" xml:space="preserve">
          <source>Regular Expression or function (see previous point)</source>
          <target state="translated">正規表現または関数(前の点を参照</target>
        </trans-unit>
        <trans-unit id="95fcb99c97c4f07e4429e3498285f25058bba00f" translate="yes" xml:space="preserve">
          <source>Reject updates for itself.</source>
          <target state="translated">自分自身のために更新を拒否する。</target>
        </trans-unit>
        <trans-unit id="b3ef9adaf388e07f00bd633ecc44a2dc9a571661" translate="yes" xml:space="preserve">
          <source>Reject updates for the given &lt;code&gt;dependencies&lt;/code&gt; forcing the update to fail with a &lt;code&gt;'decline'&lt;/code&gt; code.</source>
          <target state="translated">与えられた &lt;code&gt;dependencies&lt;/code&gt; 更新を拒否し、更新を &lt;code&gt;'decline'&lt;/code&gt; コードで失敗させます。</target>
        </trans-unit>
        <trans-unit id="70f0ed160475c6161f66688a2c223afbe6e09df0" translate="yes" xml:space="preserve">
          <source>Relative and absolute request in shared:</source>
          <target state="translated">共有での相対的な要求と絶対的な要求</target>
        </trans-unit>
        <trans-unit id="cf7ddb7603d2a26315f2455b522c75c84a223953" translate="yes" xml:space="preserve">
          <source>Relative paths</source>
          <target state="translated">相対パス</target>
        </trans-unit>
        <trans-unit id="28f532ce0d092b46958fd0924da15d44647f02ef" translate="yes" xml:space="preserve">
          <source>Remark options</source>
          <target state="translated">備考オプション</target>
        </trans-unit>
        <trans-unit id="2dcba3363466313bbee18b56da6fe5fcd17afe12" translate="yes" xml:space="preserve">
          <source>Remark settings</source>
          <target state="translated">備考設定</target>
        </trans-unit>
        <trans-unit id="c803a932f775316c5574b371e7a05f33a94460c4" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;lodash&lt;/code&gt; package we were using? For demonstration purposes, let's say we wanted to instead provide this as a global throughout our application. To do this, we can use &lt;code&gt;ProvidePlugin&lt;/code&gt;.</source>
          <target state="translated">私たちが使用していた &lt;code&gt;lodash&lt;/code&gt; パッケージを覚えていますか？デモンストレーションの目的で、代わりにこれをアプリケーション全体でグローバルとして提供したいとします。これを行うには、 &lt;code&gt;ProvidePlugin&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="9b0c95bb60fa0d6b00c6679fde1ebeb8ea6f6483" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;lodash&lt;/code&gt; package we were using? For demonstration purposes, let's say we wanted to instead provide this as a global throughout our application. To do this, we can use the &lt;code&gt;ProvidePlugin&lt;/code&gt;.</source>
          <target state="translated">使用していた &lt;code&gt;lodash&lt;/code&gt; パッケージを覚えていますか？デモンストレーションの目的で、アプリケーション全体でこれをグローバルとして提供したいとします。これを行うには、 &lt;code&gt;ProvidePlugin&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="298f8a952e11c47a146509416894334060fae16f" translate="yes" xml:space="preserve">
          <source>Remember that when using the &lt;a href=&quot;uglifyjs-webpack-plugin&quot;&gt;&lt;code&gt;UglifyJSPlugin&lt;/code&gt;&lt;/a&gt;, you must utilize the &lt;code&gt;sourceMap&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;uglifyjs-webpack-plugin&quot;&gt; &lt;code&gt;UglifyJSPlugin&lt;/code&gt; &lt;/a&gt;を使用するときは、 &lt;code&gt;sourceMap&lt;/code&gt; オプションを使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="14eb068727f7a2bff087dc7929a503653ac0d93f" translate="yes" xml:space="preserve">
          <source>Remove Comments</source>
          <target state="translated">コメントの削除</target>
        </trans-unit>
        <trans-unit id="1d1bf2ebd26895dc8a02563899957f33ea0e0c98" translate="yes" xml:space="preserve">
          <source>Remove Order Warnings</source>
          <target state="translated">オーダー警告の削除</target>
        </trans-unit>
        <trans-unit id="6eb653885eebaad4002e035fda284819c80e2d0a" translate="yes" xml:space="preserve">
          <source>Remove Order Warnings. See &lt;a href=&quot;#remove-order-warnings&quot;&gt;examples&lt;/a&gt; below for details.</source>
          <target state="translated">注文警告を削除します。詳細については、以下の&lt;a href=&quot;#remove-order-warnings&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc75d441bfa1f4e69943b8c637e62baed6d344e6" translate="yes" xml:space="preserve">
          <source>Remove a registered status handler.</source>
          <target state="translated">登録されているステータスハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="951160e8e157b090bce49601ac412fb326933d88" translate="yes" xml:space="preserve">
          <source>Remove all comments</source>
          <target state="translated">すべてのコメントを削除</target>
        </trans-unit>
        <trans-unit id="f4a506118dc12b3458ed102b999454c8f5e8eb85" translate="yes" xml:space="preserve">
          <source>Remove all comments (including comments starting with &lt;code&gt;/*!&lt;/code&gt;).</source>
          <target state="translated">すべてのコメント（ &lt;code&gt;/*!&lt;/code&gt; で始まるコメントを含む）を削除します。</target>
        </trans-unit>
        <trans-unit id="e0fb10795d80f5150953e92b0a60d102c8ab0e34" translate="yes" xml:space="preserve">
          <source>Remove all dependencies of the loader result, even initial dependencies and those of other loaders. Consider using &lt;code&gt;pitch&lt;/code&gt;.</source>
          <target state="translated">初期の依存関係や他のローダーの依存関係も含め、ローダー結果のすべての依存関係を削除します。 &lt;code&gt;pitch&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="86dc7ac837ee3922e692052e5a72685c918b97be" translate="yes" xml:space="preserve">
          <source>Remove all dependencies of the loader result. Even initial dependencies and these of other loaders. Consider using &lt;code&gt;pitch&lt;/code&gt;.</source>
          <target state="translated">ローダー結果のすべての依存関係を削除します。初期の依存関係と他のローダーの依存関係さえも。 &lt;code&gt;pitch&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="1b70966df9914059f3a56bdbe3648fc360eeeb9d" translate="yes" xml:space="preserve">
          <source>Remove removeFrontMatter</source>
          <target state="translated">removeFrontMatterを削除</target>
        </trans-unit>
        <trans-unit id="db11da02660881778d9f70873ecc4531e5238be0" translate="yes" xml:space="preserve">
          <source>Remove the callback added via &lt;code&gt;dispose&lt;/code&gt; or &lt;code&gt;addDisposeHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dispose&lt;/code&gt; または &lt;code&gt;addDisposeHandler&lt;/code&gt; によって追加されたコールバックを削除します。</target>
        </trans-unit>
        <trans-unit id="f5c91dd968a212f3e4523598d02cb09445533b05" translate="yes" xml:space="preserve">
          <source>Remove the handler added via &lt;code&gt;dispose&lt;/code&gt; or &lt;code&gt;addDisposeHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dispose&lt;/code&gt; または &lt;code&gt;addDisposeHandler&lt;/code&gt; を介して追加されたハンドラーを削除します。</target>
        </trans-unit>
        <trans-unit id="0bf7471dcec5264f0fa3ba99680a0ed28646fcad" translate="yes" xml:space="preserve">
          <source>Remove unused code.</source>
          <target state="translated">未使用のコードを削除します。</target>
        </trans-unit>
        <trans-unit id="9873cfd7e2a458e89691e96ea4c58199b748b3b5" translate="yes" xml:space="preserve">
          <source>RemoveEmptyChunksPlugin</source>
          <target state="translated">RemoveEmptyChunksPlugin</target>
        </trans-unit>
        <trans-unit id="4b1b88f2caf58898b919ce55b6f39569c329c34b" translate="yes" xml:space="preserve">
          <source>Removed in webpack 5</source>
          <target state="translated">webpack 5 で削除</target>
        </trans-unit>
        <trans-unit id="3da760a26bf6534d21a9780897c53ec553f4e69d" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes from &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; から &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; 属性を削除します。</target>
        </trans-unit>
        <trans-unit id="40c44544cf83a888a824dcd0249281fc3f07fc0f" translate="yes" xml:space="preserve">
          <source>Removes all directory references and only copies file names.</source>
          <target state="translated">すべてのディレクトリ参照を削除し、ファイル名のみをコピーします。</target>
        </trans-unit>
        <trans-unit id="d4ebcc27454ebc01bfe9f2d91aa1f18208ce3e7b" translate="yes" xml:space="preserve">
          <source>Removes all directory references and only copies file names.⚠️ If files have the same name, the result is non-deterministic</source>
          <target state="translated">全てのディレクトリ参照を削除し、ファイル名のみをコピーします ⚠️ ファイル名が同じ場合、結果は非決定的になります</target>
        </trans-unit>
        <trans-unit id="482cb600588ab8afaba15a68fed4f3c483e3091b" translate="yes" xml:space="preserve">
          <source>Removes attributes from inside the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; 内から属性を削除します。</target>
        </trans-unit>
        <trans-unit id="268092faa00134f23e24fe804b9814f9b0030e53" translate="yes" xml:space="preserve">
          <source>Removes given chunk from a dependencies block module and chunks after removing dependency reasons. Called automatically by &lt;code&gt;removeReasonsOfDependencyBlock&lt;/code&gt;.</source>
          <target state="translated">依存関係の理由を削除した後、依存関係ブロックモジュールとチャンクから指定されたチャンクを削除します。 &lt;code&gt;removeReasonsOfDependencyBlock&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="abf5c863a1cfe6467aa4fb4c2da2f389cc6793c8" translate="yes" xml:space="preserve">
          <source>Removes relation of the module to the dependency block.</source>
          <target state="translated">モジュールと依存ブロックの関係を削除します。</target>
        </trans-unit>
        <trans-unit id="e47c65a2b82a9efef40fc0ae3bf527fada456fc3" translate="yes" xml:space="preserve">
          <source>Removes specified tags and its children. You can specify tags by setting &lt;code&gt;removingTags&lt;/code&gt; query array.</source>
          <target state="translated">指定されたタグとその子を削除します。 &lt;code&gt;removingTags&lt;/code&gt; クエリ配列を設定することにより、タグを指定できます。</target>
        </trans-unit>
        <trans-unit id="fc6c4d451ecb6322a8275648f0407eaad844edc0" translate="yes" xml:space="preserve">
          <source>Replace a specific module when building for a &lt;a href=&quot;../guides/production&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/production&quot;&gt;開発環境&lt;/a&gt;用にビルドするときに、特定のモジュールを置き換えます。</target>
        </trans-unit>
        <trans-unit id="65bb0f4d7377e6cf9a90c603a8225b5f6fdc198a" translate="yes" xml:space="preserve">
          <source>Replace resource(s) that matches a regexp</source>
          <target state="translated">正規表現にマッチするリソースを置換します。</target>
        </trans-unit>
        <trans-unit id="1697458e975ac729b88e562177f723a8da0c34ce" translate="yes" xml:space="preserve">
          <source>Replaces</source>
          <target state="translated">Replaces</target>
        </trans-unit>
        <trans-unit id="f82e0d3f0e9fada0dd733074d215716c61325f4b" translate="yes" xml:space="preserve">
          <source>Report compilation progress</source>
          <target state="translated">コンパイルの進捗状況を報告</target>
        </trans-unit>
        <trans-unit id="8e2d170ab822648a868ed17db41712a1e458ed56" translate="yes" xml:space="preserve">
          <source>Reporting Progress</source>
          <target state="translated">進捗状況の報告</target>
        </trans-unit>
        <trans-unit id="2cadbf146f2e9bf53e4c1e34c9cf81f8d0c1c270" translate="yes" xml:space="preserve">
          <source>Request is issued from CommonJs/AMD syntax or similar.</source>
          <target state="translated">CommonJs/AMD構文などからリクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="7d0eab6027cee8b369f4abf48867b6ee932e0efa" translate="yes" xml:space="preserve">
          <source>Request is issued from ESM syntax or similar.</source>
          <target state="translated">リクエストはESM構文などから発行されます。</target>
        </trans-unit>
        <trans-unit id="44ec6fd4ae24572fecbac6493706cf9394cd70f3" translate="yes" xml:space="preserve">
          <source>Request is issued from a asset reference.</source>
          <target state="translated">リクエストは資産参照から発行されます。</target>
        </trans-unit>
        <trans-unit id="cb2683236e52396f3df8a92dd39e65878c3cd5e1" translate="yes" xml:space="preserve">
          <source>Request is issued from a normal script tag without module system.</source>
          <target state="translated">モジュールシステムを持たない通常のスクリプトタグからリクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="2391ee9ae9594615dc6c8d1e3b2b99e3deacb838" translate="yes" xml:space="preserve">
          <source>Request is issued from a sass stylesheet reference.</source>
          <target state="translated">リクエストはsassスタイルシート参照から発行されます。</target>
        </trans-unit>
        <trans-unit id="6c351a47e1050eb546221d3873c2d57c428b8fda" translate="yes" xml:space="preserve">
          <source>Request is issued from a stylesheet reference.</source>
          <target state="translated">スタイルシート参照からリクエストが発行されます。</target>
        </trans-unit>
        <trans-unit id="20f9634608216ccd57fa218280ce513d3bfef3da" translate="yes" xml:space="preserve">
          <source>Request is issued from typescript that is interested in type declarations.</source>
          <target state="translated">型宣言に興味のあるtypescriptからリクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="7d215bfefc3b3a7abea4550cb0a623d9fe3adff7" translate="yes" xml:space="preserve">
          <source>Requests to packages e.g. &lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; are still supported.</source>
          <target state="translated">&lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; などのパッケージへのリクエストは引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="6010f42941314bd2e16a40b0ac73a734cd7cb6c7" translate="yes" xml:space="preserve">
          <source>Require a fallback for non-worker supporting environments</source>
          <target state="translated">非ワーカーサポート環境のためのフォールバックを必要とする</target>
        </trans-unit>
        <trans-unit id="6c9edaf3770164ff37deb0cb23c37bafead4971a" translate="yes" xml:space="preserve">
          <source>RequireContextPlugin</source>
          <target state="translated">RequireContextPlugin</target>
        </trans-unit>
        <trans-unit id="43238921b568ca4ba900a9a52844c2058db99e54" translate="yes" xml:space="preserve">
          <source>RequireEnsurePlugin</source>
          <target state="translated">RequireEnsurePlugin</target>
        </trans-unit>
        <trans-unit id="a30b8d4cc6e89bbfda1b96a1316ab0c6ac1f872f" translate="yes" xml:space="preserve">
          <source>RequireIncludePlugin</source>
          <target state="translated">RequireIncludePlugin</target>
        </trans-unit>
        <trans-unit id="bd3796ebdfb294f6f69fa91710a470fe5978b2e8" translate="yes" xml:space="preserve">
          <source>RequireJsStuffPlugin</source>
          <target state="translated">RequireJsStuffPlugin</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="ac7f958cc028becfb4b2bec9c474bd2d5e8b6095" translate="yes" xml:space="preserve">
          <source>Resolve</source>
          <target state="translated">Resolve</target>
        </trans-unit>
        <trans-unit id="3432aff5199021e62327737e81355e2fee54208f" translate="yes" xml:space="preserve">
          <source>Resolve Options</source>
          <target state="translated">オプションの解決</target>
        </trans-unit>
        <trans-unit id="f4143195790e7b1a6c2f12714b89024432e0904e" translate="yes" xml:space="preserve">
          <source>Resolve a request like a require expression.</source>
          <target state="translated">require式のようなリクエストを解決します。</target>
        </trans-unit>
        <trans-unit id="4117aecbdcd5c2a14a49abe3ae181356d5211b71" translate="yes" xml:space="preserve">
          <source>Resolve unresolved URLs using an alias</source>
          <target state="translated">エイリアスを使用して未解決の URL を解決する</target>
        </trans-unit>
        <trans-unit id="47ecade1ed39b604db07f2373e6d2388db12b9e7" translate="yes" xml:space="preserve">
          <source>Resolvers</source>
          <target state="translated">Resolvers</target>
        </trans-unit>
        <trans-unit id="0a04022c4e0e7bb30e09b8de97fac5544e03cab9" translate="yes" xml:space="preserve">
          <source>Resolvers are created using the &lt;code&gt;enhanced-resolve&lt;/code&gt; package. The &lt;code&gt;Resolver&lt;/code&gt; class extends the &lt;code&gt;tapable&lt;/code&gt; class and uses &lt;code&gt;tapable&lt;/code&gt; to provide a few hooks. The &lt;code&gt;enhanced-resolve&lt;/code&gt; package can be used directly to create new resolvers, however any &lt;a href=&quot;node#compiler-instance&quot;&gt;&lt;code&gt;compiler&lt;/code&gt; instance&lt;/a&gt; has a few resolver instances that can be tapped into.</source>
          <target state="translated">リゾルバーは、 &lt;code&gt;enhanced-resolve&lt;/code&gt; パッケージを使用して作成されます。 &lt;code&gt;Resolver&lt;/code&gt; クラスは、拡張 &lt;code&gt;tapable&lt;/code&gt; クラスを使用すると &lt;code&gt;tapable&lt;/code&gt; いくつかのフックを提供します。 &lt;code&gt;enhanced-resolve&lt;/code&gt; パッケージには、あらゆるしかし、新しいリゾルバを作成するために直接使用することができる&lt;a href=&quot;node#compiler-instance&quot;&gt; &lt;code&gt;compiler&lt;/code&gt; インスタンスは&lt;/a&gt;にタップすることができ、いくつかのリゾルバインスタンスを持っています。</target>
        </trans-unit>
        <trans-unit id="4827063ce86796eddb67161665ffc39e58f2551c" translate="yes" xml:space="preserve">
          <source>Resolves the given request to a module, applies all configured loaders and calls back with the generated source, the sourceMap and the module instance (usually an instance of &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;&lt;code&gt;NormalModule&lt;/code&gt;&lt;/a&gt;). Use this function if you need to know the source code of another module to generate the result.</source>
          <target state="translated">指定されたリクエストをモジュールに解決し、構成されたすべてのローダーを適用し、生成されたソース、sourceMap、およびモジュールインスタンス（通常は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt; &lt;code&gt;NormalModule&lt;/code&gt; の&lt;/a&gt;インスタンス）を使用してコールバックします。結果を生成するために別のモジュールのソースコードを知る必要がある場合は、この関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0496ee3fee946976397fbaaafbfe520ed9cd2a64" translate="yes" xml:space="preserve">
          <source>Resolving</source>
          <target state="translated">Resolving</target>
        </trans-unit>
        <trans-unit id="03526a520b1e29f683904d55de8cd70d13d05e91" translate="yes" xml:space="preserve">
          <source>Resolving &lt;code&gt;import&lt;/code&gt; at-rules</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; atルールの解決</target>
        </trans-unit>
        <trans-unit id="e3cfe8adaeb34b5dae64dfd3df0c12c06cc6dde4" translate="yes" xml:space="preserve">
          <source>Resolving Loaders</source>
          <target state="translated">ローダの解決</target>
        </trans-unit>
        <trans-unit id="c8fc3308d20a53544e752db6e62fce4448dae15d" translate="yes" xml:space="preserve">
          <source>Resolving can be configured on module level. See all available options on &lt;a href=&quot;resolve#resolve&quot;&gt;resolve configuration page&lt;/a&gt;. All applied resolve options get deeply merged with higher level &lt;a href=&quot;resolve#resolve&quot;&gt;resolve&lt;/a&gt;.</source>
          <target state="translated">解決はモジュールレベルで構成できます。&lt;a href=&quot;resolve#resolve&quot;&gt;構成の解決ページで&lt;/a&gt;使用可能なすべてのオプションを参照してください。適用されたすべての解決オプションは、より高いレベルの&lt;a href=&quot;resolve#resolve&quot;&gt;解決&lt;/a&gt;と深く統合されます。</target>
        </trans-unit>
        <trans-unit id="c2f0ec17c944bb807b10be302d71736723bc4c6f" translate="yes" xml:space="preserve">
          <source>Resolving rules in webpack</source>
          <target state="translated">webpack でルールを解決する</target>
        </trans-unit>
        <trans-unit id="7ecbb921622abc017c4c2b33f2ec863736468500" translate="yes" xml:space="preserve">
          <source>Resource assets</source>
          <target state="translated">資源資産</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="023439148eb14eee98cc632e2b3413bd7104e53f" translate="yes" xml:space="preserve">
          <source>Restore chunk information from records.</source>
          <target state="translated">レコードからチャンク情報を復元します。</target>
        </trans-unit>
        <trans-unit id="1a6c030e3332163797f8d8b087994cef1d3091a1" translate="yes" xml:space="preserve">
          <source>Restore module information from records.</source>
          <target state="translated">レコードからモジュール情報を復元します。</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="577482eb2da290972a209ca84bc32745dcf1b0f9" translate="yes" xml:space="preserve">
          <source>Result when run with &lt;code&gt;NAMESPACE=dev&lt;/code&gt; env variable:</source>
          <target state="translated">&lt;code&gt;NAMESPACE=dev&lt;/code&gt; 環境変数を使用して実行した場合の結果：</target>
        </trans-unit>
        <trans-unit id="c2af9a593316bd316e52266427663ed4abdca32b" translate="yes" xml:space="preserve">
          <source>Result when run with &lt;code&gt;NAMESPACE=prod&lt;/code&gt; env variable:</source>
          <target state="translated">&lt;code&gt;NAMESPACE=prod&lt;/code&gt; env変数を使用して実行した場合の結果：</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="a6e4a9f3687ba5f929d9c85fef2366beb0a84bca" translate="yes" xml:space="preserve">
          <source>Resulting environment</source>
          <target state="translated">結果の環境</target>
        </trans-unit>
        <trans-unit id="6feaf1b4c25f3b349afc2efaa914a5d94e7222b9" translate="yes" xml:space="preserve">
          <source>Retain application state which is lost during a full reload.</source>
          <target state="translated">フルリロード中に失われたアプリケーションの状態を保持します。</target>
        </trans-unit>
        <trans-unit id="2dbf5cf165d9e17cc3cfaabca2751bab59dfc4e0" translate="yes" xml:space="preserve">
          <source>Retrieve the current status of the hot module replacement process.</source>
          <target state="translated">ホットモジュール交換プロセスの現在の状態を取得します。</target>
        </trans-unit>
        <trans-unit id="0e4d3f812e26361f76a5608d2dfeae4f8821cd30" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;false&lt;/code&gt; to produce a 404 error for the request.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; を返すと、リクエストに対して404エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="0447e8646ff1ce85b535874c579dc5619b75ff5e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to continue processing the request with proxy.</source>
          <target state="translated">プロキシを使用してリクエストの処理を続行するには、 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="adcb9afc838142060775af07b2bc42dd3fc0ed71" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; to optimize the image, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">画像を最適化するには &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="729789ff7741b8f4ac5d5c9840807831eb2784ac" translate="yes" xml:space="preserve">
          <source>Return Object Properties</source>
          <target state="translated">オブジェクトのプロパティを返します。</target>
        </trans-unit>
        <trans-unit id="d2bb2d59b83c91698e1f179bf315584db4cf8a18" translate="yes" xml:space="preserve">
          <source>Return a path to serve from, instead of continuing to proxy the request.</source>
          <target state="translated">リクエストをプロキシし続けるのではなく、サーブするパスを返します。</target>
        </trans-unit>
        <trans-unit id="3b619e134e1e3b42bf929ca7457d10d3175902d1" translate="yes" xml:space="preserve">
          <source>Returning a &lt;code&gt;Promise&lt;/code&gt; only works when using webpack via CLI. &lt;a href=&quot;../api/node#webpack&quot;&gt;&lt;code&gt;webpack()&lt;/code&gt;&lt;/a&gt; expects an object.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; の返却は、CLI経由でwebpackを使用している場合にのみ機能します。&lt;a href=&quot;../api/node#webpack&quot;&gt; &lt;code&gt;webpack()&lt;/code&gt; &lt;/a&gt;はオブジェクトを期待しています。</target>
        </trans-unit>
        <trans-unit id="56348477fc96c31a09a1ee4040b1c193e0ee2163" translate="yes" xml:space="preserve">
          <source>Returns Stats object for the current compilation.</source>
          <target state="translated">現在のコンパイルの Stats オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6daf6530c152e098b9400577d9405899c652f052" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Promise&lt;/code&gt;, which resolves with an &lt;code&gt;Object&lt;/code&gt; containing:</source>
          <target state="translated">次を含む &lt;code&gt;Object&lt;/code&gt; で解決する &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="74604c341dd520194f23eabd2da656c294f75fbc" translate="yes" xml:space="preserve">
          <source>Returns a formatted string of the compilation information (similar to &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; output).</source>
          <target state="translated">コンパイル情報のフォーマットされた文字列を返します（&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;出力と同様）。</target>
        </trans-unit>
        <trans-unit id="4a719dbe53c2e86e1066f3929996605c6a077a86" translate="yes" xml:space="preserve">
          <source>Returns array of all assets under the current compilation.</source>
          <target state="translated">現在のコンパイル中のすべてのアセットの配列を返します。</target>
        </trans-unit>
        <trans-unit id="92e2c5131a5350cd343ea668874739fbeb829662" translate="yes" xml:space="preserve">
          <source>Returns compilation information as a JSON object. &lt;code&gt;options&lt;/code&gt; can be either a string (a preset) or an object for more granular control:</source>
          <target state="translated">コンパイル情報をJSONオブジェクトとして返します。 &lt;code&gt;options&lt;/code&gt; は、文字列（プリセット）またはより詳細な制御のためのオブジェクトのいずれかです。</target>
        </trans-unit>
        <trans-unit id="926f61b289e6bfeb4dd9a0c124fb1cf1c71df012" translate="yes" xml:space="preserve">
          <source>Returns interpolated path and asset information.</source>
          <target state="translated">補間されたパスとアセットの情報を返します。</target>
        </trans-unit>
        <trans-unit id="a5f55b91e171f97bc16dec40f715d6868ac0cfb6" translate="yes" xml:space="preserve">
          <source>Returns the absolute &lt;code&gt;file:&lt;/code&gt; URL of the module.</source>
          <target state="translated">絶対 &lt;code&gt;file:&lt;/code&gt; 返します：モジュールのURL。</target>
        </trans-unit>
        <trans-unit id="0560aef0471e79c3f5465c7cc5f1dc615dd56526" translate="yes" xml:space="preserve">
          <source>Returns the interpolated path.</source>
          <target state="translated">補間されたパスを返します。</target>
        </trans-unit>
        <trans-unit id="4208043c3833bb406ab1a8759edd052044068e9c" translate="yes" xml:space="preserve">
          <source>Returns the reference to the dependency from a given module.</source>
          <target state="translated">指定したモジュールからの依存関係への参照を返します。</target>
        </trans-unit>
        <trans-unit id="0bbb2fc8b563942786024066c32f70fba001d676" translate="yes" xml:space="preserve">
          <source>Returns the webpack version.</source>
          <target state="translated">webpackのバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="5ed6c8d9b592e3818013d15eb20c2a8448226eda" translate="yes" xml:space="preserve">
          <source>Reuses a single &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; element, instead of adding/removing individual elements for each required module.</source>
          <target state="translated">必要なモジュールごとに個別の要素を追加/削除する代わりに、単一の &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 要素を再利用します。</target>
        </trans-unit>
        <trans-unit id="d210935e26b0bb103a3faa0d965a18c756f8cbfd" translate="yes" xml:space="preserve">
          <source>Reward modern browser users script</source>
          <target state="translated">現代のブラウザユーザーに報酬を与えるスクリプト</target>
        </trans-unit>
        <trans-unit id="e96857c58f716104caead648ee6aa61ab8e41cdc" translate="yes" xml:space="preserve">
          <source>Root</source>
          <target state="translated">Root</target>
        </trans-unit>
        <trans-unit id="39b01d31286bea2204885e06646cdafb357d538b" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;mtime&lt;/code&gt; by this number of milliseconds both for &lt;code&gt;stats&lt;/code&gt; and &lt;code&gt;dep&lt;/code&gt; before passing those params to the comparing function</source>
          <target state="translated">ラウンド &lt;code&gt;mtime&lt;/code&gt; の両方のためにこのミリ秒数で &lt;code&gt;stats&lt;/code&gt; と &lt;code&gt;dep&lt;/code&gt; 比較機能にこれらのparamsを渡す前に、</target>
        </trans-unit>
        <trans-unit id="78e1790e29a5541b6d02348fc3f45f18445709f4" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="translated">Rule</target>
        </trans-unit>
        <trans-unit id="e2d20b6772074cf8de6f88e6a258855345fac21b" translate="yes" xml:space="preserve">
          <source>Rule Conditions</source>
          <target state="translated">ルール条件</target>
        </trans-unit>
        <trans-unit id="a6328ec24079df0f6c1e7d850b422bd7d296967e" translate="yes" xml:space="preserve">
          <source>Rule results</source>
          <target state="translated">ルール結果</target>
        </trans-unit>
        <trans-unit id="b425d5f98c8e7887f024f258ef9ba80eebb288ec" translate="yes" xml:space="preserve">
          <source>Rule results are used only when the Rule condition matches.</source>
          <target state="translated">ルールの結果は、ルール条件が一致した場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="24ffaa84e3b73d917eb7bd902d377fe6df94ed89" translate="yes" xml:space="preserve">
          <source>Rule.enforce</source>
          <target state="translated">Rule.enforce</target>
        </trans-unit>
        <trans-unit id="73586767a5cffaa218dcaff111d74b6ed4165beb" translate="yes" xml:space="preserve">
          <source>Rule.exclude</source>
          <target state="translated">Rule.exclude</target>
        </trans-unit>
        <trans-unit id="0cca4d081709c5839763ff49059502f3e7b79184" translate="yes" xml:space="preserve">
          <source>Rule.generator.dataUrl</source>
          <target state="translated">Rule.generator.dataUrl</target>
        </trans-unit>
        <trans-unit id="35466691a754fa0dfc222f095952019f82667b3f" translate="yes" xml:space="preserve">
          <source>Rule.generator.filename</source>
          <target state="translated">Rule.generator.filename</target>
        </trans-unit>
        <trans-unit id="93c486eeb37fd7ff3941f797699b1d4a54750f4f" translate="yes" xml:space="preserve">
          <source>Rule.include</source>
          <target state="translated">Rule.include</target>
        </trans-unit>
        <trans-unit id="4fe4e6b0471c3b4ef44dd94ec56b1026d9ad262c" translate="yes" xml:space="preserve">
          <source>Rule.issuer</source>
          <target state="translated">Rule.issuer</target>
        </trans-unit>
        <trans-unit id="12e311d24954ff2b485dfa03eeeb22bbc1fc448d" translate="yes" xml:space="preserve">
          <source>Rule.loader</source>
          <target state="translated">Rule.loader</target>
        </trans-unit>
        <trans-unit id="93c5ed6b2b726b4301a2c0e8dba75a8f762cc517" translate="yes" xml:space="preserve">
          <source>Rule.loaders</source>
          <target state="translated">Rule.loaders</target>
        </trans-unit>
        <trans-unit id="6460aa61adce34b02c861b624236aea9edb37adc" translate="yes" xml:space="preserve">
          <source>Rule.mimetype</source>
          <target state="translated">Rule.mimetype</target>
        </trans-unit>
        <trans-unit id="8d82e3fe7db79a38063be185a78a1787b48434cc" translate="yes" xml:space="preserve">
          <source>Rule.oneOf</source>
          <target state="translated">Rule.oneOf</target>
        </trans-unit>
        <trans-unit id="a2073776e20d522c196308af0d11686e173d3cac" translate="yes" xml:space="preserve">
          <source>Rule.options</source>
          <target state="translated">Rule.options</target>
        </trans-unit>
        <trans-unit id="7712fe61ac58ff25076907afa23c57fe2858ec68" translate="yes" xml:space="preserve">
          <source>Rule.parser</source>
          <target state="translated">Rule.parser</target>
        </trans-unit>
        <trans-unit id="6a3c8116831e83365233a54ff673bbe62dbeb169" translate="yes" xml:space="preserve">
          <source>Rule.parser.dataUrlCondition</source>
          <target state="translated">Rule.parser.dataUrlCondition</target>
        </trans-unit>
        <trans-unit id="86973dcbb4d35aae63a4eb7ed15d0e5aa2a688f8" translate="yes" xml:space="preserve">
          <source>Rule.parser.parse</source>
          <target state="translated">Rule.parser.parse</target>
        </trans-unit>
        <trans-unit id="4206e0bd278c5485bb09773f1889014ba566639c" translate="yes" xml:space="preserve">
          <source>Rule.resolve</source>
          <target state="translated">Rule.resolve</target>
        </trans-unit>
        <trans-unit id="6ad3eb959ec26fbac17179d5a9a5d1485a161a58" translate="yes" xml:space="preserve">
          <source>Rule.resource</source>
          <target state="translated">Rule.resource</target>
        </trans-unit>
        <trans-unit id="6be5a7bec6e23d9ee0a8d042cd9bb03000f5c259" translate="yes" xml:space="preserve">
          <source>Rule.resourceQuery</source>
          <target state="translated">Rule.resourceQuery</target>
        </trans-unit>
        <trans-unit id="f13b889b4166c1ccec685b85f460df06f0401346" translate="yes" xml:space="preserve">
          <source>Rule.rules</source>
          <target state="translated">Rule.rules</target>
        </trans-unit>
        <trans-unit id="1ed77fc86a78da80e27b4a7df0b906420a85b328" translate="yes" xml:space="preserve">
          <source>Rule.sideEffects</source>
          <target state="translated">Rule.sideEffects</target>
        </trans-unit>
        <trans-unit id="f5a8c1e6b4789569d31a590ea24a49a7fdf74e8c" translate="yes" xml:space="preserve">
          <source>Rule.test</source>
          <target state="translated">Rule.test</target>
        </trans-unit>
        <trans-unit id="4c9127fb0f0e958cc7ba3919d41d6ff1d6986373" translate="yes" xml:space="preserve">
          <source>Rule.type</source>
          <target state="translated">Rule.type</target>
        </trans-unit>
        <trans-unit id="ebb25b320bb483820b96caf30356b652ae859834" translate="yes" xml:space="preserve">
          <source>Rule.use</source>
          <target state="translated">Rule.use</target>
        </trans-unit>
        <trans-unit id="b1b392607deaf29a7e81453e069b7c07a32a6b18" translate="yes" xml:space="preserve">
          <source>Run</source>
          <target state="translated">Run</target>
        </trans-unit>
        <trans-unit id="a4beada2c3e7bea1ecb31b03bcff67579986be59" translate="yes" xml:space="preserve">
          <source>Run an &lt;code&gt;npm run build&lt;/code&gt;, it should compile to something like this:</source>
          <target state="translated">実行 &lt;code&gt;npm run build&lt;/code&gt; 、それはこのような何かをコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="f4da09cb4ffc22e80dea2e1d9b18a1c41cdb6504" translate="yes" xml:space="preserve">
          <source>Run the webpack Dev Server</source>
          <target state="translated">webpack Dev Serverを実行する</target>
        </trans-unit>
        <trans-unit id="0c615aafa765a1ef5bd603e8ab85525c53f3f7e6" translate="yes" xml:space="preserve">
          <source>Run webpack with &lt;code&gt;ProfilingPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ProfilingPlugin&lt;/code&gt; で webpackを実行します。</target>
        </trans-unit>
        <trans-unit id="4223bf04315af633cdf56c0cb6b2371651e75eca" translate="yes" xml:space="preserve">
          <source>Run when a module build has failed.</source>
          <target state="translated">モジュールのビルドに失敗した場合に実行します。</target>
        </trans-unit>
        <trans-unit id="74b15e59c3f98a89ecdc64d02cfef8e614ad6cf4" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;DEBUG=false webpack&lt;/code&gt; yields:</source>
          <target state="translated">&lt;code&gt;DEBUG=false webpack&lt;/code&gt; を実行すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="36eba79702d998367df8aa0f5fede84f46a9671e" translate="yes" xml:space="preserve">
          <source>Running a scaffold</source>
          <target state="translated">足場を動かす</target>
        </trans-unit>
        <trans-unit id="62cfe94a89c2f8f8baf2bb5ba03598065c5affc6" translate="yes" xml:space="preserve">
          <source>Running a scaffold from npm</source>
          <target state="translated">npmから足場を動かす</target>
        </trans-unit>
        <trans-unit id="d47cd3a1b0865b976940b075435f5b4c76fced8d" translate="yes" xml:space="preserve">
          <source>Running a scaffold locally</source>
          <target state="translated">足場を現地で走らせる</target>
        </trans-unit>
        <trans-unit id="54d448bb65599d3c2d4d28c7ff4e481e6cb7233e" translate="yes" xml:space="preserve">
          <source>Running another build, we would expect only our &lt;code&gt;main&lt;/code&gt; bundle's hash to change, however...</source>
          <target state="translated">別のビルドを実行すると、 &lt;code&gt;main&lt;/code&gt; バンドルのハッシュのみが変更されると予想されますが、...</target>
        </trans-unit>
        <trans-unit id="e46f1249c2bce48b0c72e84ec66adb21c8a07be8" translate="yes" xml:space="preserve">
          <source>Running our build script, &lt;code&gt;npm run build&lt;/code&gt;, with this configuration should produce the following output:</source>
          <target state="translated">この構成でビルドスクリプト &lt;code&gt;npm run build&lt;/code&gt; を実行すると、次の出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="48dd916c96025b1e57f8d56813d8611d15c051e4" translate="yes" xml:space="preserve">
          <source>Running the Server</source>
          <target state="translated">サーバーの実行</target>
        </trans-unit>
        <trans-unit id="db0631586335dd1b31b5cd7052a80f954e3cd573" translate="yes" xml:space="preserve">
          <source>Running webpack with above configuration will output into &lt;code&gt;./dist&lt;/code&gt; as we did not specify different output path. &lt;code&gt;./dist&lt;/code&gt; directory will now contain four files:</source>
          <target state="translated">上記の構成でwebpackを実行すると、別の出力パスを指定しなかったため、。 &lt;code&gt;./dist&lt;/code&gt; 出力されます。 &lt;code&gt;./dist&lt;/code&gt; ディレクトリには4つのファイルが含まれるようになります。</target>
        </trans-unit>
        <trans-unit id="41d62fcf289c89e8206a10eba8b3811f5b803bea" translate="yes" xml:space="preserve">
          <source>Running webpack with following &lt;code&gt;splitChunks&lt;/code&gt; configuration would also output a chunk of the group common with next name: &lt;code&gt;commons-main-lodash.js.e7519d2bb8777058fa27.js&lt;/code&gt; (hash given as an example of real world output).</source>
          <target state="translated">次の &lt;code&gt;splitChunks&lt;/code&gt; 構成でwebpackを実行すると、次の名前で共通のグループのチャンクも出力されます： &lt;code&gt;commons-main-lodash.js.e7519d2bb8777058fa27.js&lt;/code&gt; （実際の出力の例としてハッシュが示されています）。</target>
        </trans-unit>
        <trans-unit id="4d18616653bcb10fc6fbe1539f6e9a8f5ffcfb19" translate="yes" xml:space="preserve">
          <source>Runs a given &lt;code&gt;callback&lt;/code&gt; function when the given module was built.</source>
          <target state="translated">指定されたモジュールがビルドされたときに、指定された &lt;code&gt;callback&lt;/code&gt; 関数を実行します。</target>
        </trans-unit>
        <trans-unit id="33ae1afc2e3bb7d11b4e8528dc9983432837bc12" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;code&gt;ContextModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;ContextModuleFactory&lt;/code&gt; の作成後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="8ca58b434c15088e58f38aa7f532bc972a311118" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;code&gt;NormalModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;NormalModuleFactory&lt;/code&gt; の作成後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="7c500584678e2cd47e693b1d2eed1eedd098b1c2" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a compilation has been created.</source>
          <target state="translated">コンパイルが作成された後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="397728565e08bf27344855050d471e79cad556c2" translate="yes" xml:space="preserve">
          <source>Runs a plugin after setting up initial set of plugins.</source>
          <target state="translated">プラグインの初期設定を行った後、プラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="993a446b7721cdab57479b0e3635714e3dbbb5ba" translate="yes" xml:space="preserve">
          <source>Runs a plugin before the environment is prepared.</source>
          <target state="translated">環境が整う前にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="15ce3ca884317bc6dab4f37e69a27a020bb27b78" translate="yes" xml:space="preserve">
          <source>Runs the following loaders in a worker pool.</source>
          <target state="translated">ワーカープールで以下のローダーを実行します。</target>
        </trans-unit>
        <trans-unit id="c4740e4ca28c9c8d6a8447aef5c33425e6de4802" translate="yes" xml:space="preserve">
          <source>Runtime</source>
          <target state="translated">Runtime</target>
        </trans-unit>
        <trans-unit id="2b73ad79bcc0cbd015a6c3ce83f74940d57410ef" translate="yes" xml:space="preserve">
          <source>Runtime Logger API</source>
          <target state="translated">ランタイム ロガー API</target>
        </trans-unit>
        <trans-unit id="3df35deb21c8cc6d3aca3dce8e7f9ce284fd89e8" translate="yes" xml:space="preserve">
          <source>Runtime logger API is only intended to be used as a development tool, it is not intended to be included in &lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;production mode&lt;/a&gt;.</source>
          <target state="translated">ランタイムロガーAPIは、開発ツールとしてのみ使用することを目的としており、&lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;本番モードに&lt;/a&gt;含めることを目的としていません。</target>
        </trans-unit>
        <trans-unit id="95e8e62c7b35e672102d34f26b3e6e726562969b" translate="yes" xml:space="preserve">
          <source>Runtime values via &lt;code&gt;runtimeValue&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;runtimeValue&lt;/code&gt; を介したランタイム値</target>
        </trans-unit>
        <trans-unit id="50fce6d02899850101b1865a947b45128c5350eb" translate="yes" xml:space="preserve">
          <source>SVG</source>
          <target state="translated">SVG</target>
        </trans-unit>
        <trans-unit id="1e5443f19149eeed454e6a8973bab1bc1d8b5d2a" translate="yes" xml:space="preserve">
          <source>SVG can be compressed into a more compact output, avoiding &lt;code&gt;base64&lt;/code&gt;. You can read about it more &lt;a href=&quot;https://css-tricks.com/probably-dont-base64-svg/&quot;&gt;here&lt;/a&gt;. You can do it using &lt;a href=&quot;https://github.com/tigt/mini-svg-data-uri&quot;&gt;mini-svg-data-uri&lt;/a&gt; package.</source>
          <target state="translated">SVGは、 &lt;code&gt;base64&lt;/code&gt; を回避して、よりコンパクトな出力に圧縮できます。あなたはそれについてもっと&lt;a href=&quot;https://css-tricks.com/probably-dont-base64-svg/&quot;&gt;ここで&lt;/a&gt;読むことができます。&lt;a href=&quot;https://github.com/tigt/mini-svg-data-uri&quot;&gt;mini-svg-data-uri&lt;/a&gt;パッケージを使用してそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="6d0e2a1c1809b57e59a8137d296e845f8d7b8d0c" translate="yes" xml:space="preserve">
          <source>Sadly there is no &lt;code&gt;node-js&lt;/code&gt; condition for Node.js as runtime. This would simplify creating exceptions for Node.js.</source>
          <target state="translated">残念ながら、実行時としてのNode.jsの &lt;code&gt;node-js&lt;/code&gt; 条件はありません。これにより、Node.jsの例外の作成が簡単になります。</target>
        </trans-unit>
        <trans-unit id="760e6deb986333d493e4ea72f11abc6783cf819e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;'deterministic'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'deterministic'&lt;/code&gt; 同じ</target>
        </trans-unit>
        <trans-unit id="56fe53a9039acdd0fa1e733c4e2e68417b5b8673" translate="yes" xml:space="preserve">
          <source>Same as above, but with a customizable number of emojis</source>
          <target state="translated">上記と同じですが、カスタマイズ可能な数の絵文字を使用します。</target>
        </trans-unit>
        <trans-unit id="c65cbe4ac130d64784aadc67ad7bcc3c4df11faf" translate="yes" xml:space="preserve">
          <source>Same, but deprecated</source>
          <target state="translated">同じですが、非推奨です。</target>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="c73806b360250b5461e84c22b01e85d08e039783" translate="yes" xml:space="preserve">
          <source>Save valuable development time by only updating what's changed.</source>
          <target state="translated">変更された内容を更新するだけで、貴重な開発時間を節約できます。</target>
        </trans-unit>
        <trans-unit id="32de35db37c33913cc7d051c2b6e5dde7e069a2f" translate="yes" xml:space="preserve">
          <source>Saves and restores module and chunk ids from records.</source>
          <target state="translated">レコードからモジュールとチャンク ID を保存して復元します。</target>
        </trans-unit>
        <trans-unit id="3aacb738658584a773378169bb21a20b60ca2bb3" translate="yes" xml:space="preserve">
          <source>Saving in WebStorm</source>
          <target state="translated">WebStormでの保存</target>
        </trans-unit>
        <trans-unit id="ede302b5bf410f699067da258c658766d6178ded" translate="yes" xml:space="preserve">
          <source>Say you have a config file &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; and a special version for production in &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</source>
          <target state="translated">設定ファイル &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; と、 &lt;code&gt;some/path/config.production.module.js&lt;/code&gt; に本番用の特別なバージョンがあるとします</target>
        </trans-unit>
        <trans-unit id="8e672d15214b20132a8f5db4786b9223653a64d8" translate="yes" xml:space="preserve">
          <source>Say you have a configuration file &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; and a special version for production in &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</source>
          <target state="translated">構成ファイル &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; と本番用の特別なバージョンが &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc0c01ac9bc4fb92c646eb47610077862dcf8269" translate="yes" xml:space="preserve">
          <source>Say you want a configuration with specific values for different build targets.</source>
          <target state="translated">異なるビルドターゲットに対して特定の値を設定したいとします。</target>
        </trans-unit>
        <trans-unit id="95118618360eaeae1d74b75f8ea5a74b0c4ed657" translate="yes" xml:space="preserve">
          <source>Scaffold a loader repository</source>
          <target state="translated">ローダーのリポジトリを足場にする</target>
        </trans-unit>
        <trans-unit id="6aaa32752e044abc58264d57592533431599875b" translate="yes" xml:space="preserve">
          <source>Scaffold a plugin repository</source>
          <target state="translated">プラグインリポジトリを足場にする</target>
        </trans-unit>
        <trans-unit id="e2c5f3f6b5f85b10ef97ae46467458dd4f624965" translate="yes" xml:space="preserve">
          <source>Scaffolding</source>
          <target state="translated">Scaffolding</target>
        </trans-unit>
        <trans-unit id="2dd4a83d012acd714fbd600cfb9847611783fea3" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
          <target state="translated">Scenarios</target>
        </trans-unit>
        <trans-unit id="e91f7eacbf166e117424593ae1ded03e4599622d" translate="yes" xml:space="preserve">
          <source>Scope hoisting fallback trigger (since webpack 3.0.0)</source>
          <target state="translated">スコープ吊り上げフォールバックトリガー(webpack 3.0.0以降</target>
        </trans-unit>
        <trans-unit id="f6d1fd21e54c6955d5974d21955e39f3c73e8ce2" translate="yes" xml:space="preserve">
          <source>Scope hoisting is specifically a feature made possible by ECMAScript Module syntax. Because of this webpack may fallback to normal bundling based on what kind of modules you are using, and &lt;a href=&quot;https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5&quot;&gt;other conditions&lt;/a&gt;.</source>
          <target state="translated">スコープの巻き上げは、特にECMAScriptモジュールの構文によって可能になった機能です。このため、使用しているモジュールの種類や&lt;a href=&quot;https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5&quot;&gt;その他の条件に&lt;/a&gt;基づいて、通常のバンドルにフォールバックする場合があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
