<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="a8bc382020aaaa716a496826f97b0c9d436c31a9" translate="yes" xml:space="preserve">
          <source>Preparation</source>
          <target state="translated">Preparation</target>
        </trans-unit>
        <trans-unit id="6117f4d694ff7c17ec6c519ced028d6cac0c5651" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets to serve them with Content-Encoding</source>
          <target state="translated">圧縮されたバージョンのアセットを用意して、Content-Encoding で提供します。</target>
        </trans-unit>
        <trans-unit id="bd64ff9d3407f6c6943e73f5137b7fdf87f6014e" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets to serve them with Content-Encoding.</source>
          <target state="translated">圧縮されたバージョンのアセットを用意して、Content-Encodingで提供します。</target>
        </trans-unit>
        <trans-unit id="865ef8e3f389be8778673b464053850270e87967" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets using &lt;code&gt;zopfli&lt;/code&gt; library.</source>
          <target state="translated">&lt;code&gt;zopfli&lt;/code&gt; ライブラリを使用してアセットの圧縮バージョンを準備します。</target>
        </trans-unit>
        <trans-unit id="6eb928f8c004dc86eed502a7a8287d9ea7438109" translate="yes" xml:space="preserve">
          <source>Prepare compressed versions of assets with node-zopfli</source>
          <target state="translated">node-zopfliでアセットの圧縮版を準備する</target>
        </trans-unit>
        <trans-unit id="27f7a1893bf46ce7bed54721bd66b70ede8794dc" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;Less&lt;/code&gt; code before the actual entry file. In this case, the &lt;code&gt;less-loader&lt;/code&gt; will not override the source but just &lt;strong&gt;prepend&lt;/strong&gt; the entry's content.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Less&lt;/code&gt; コードを追加します。この場合、 &lt;code&gt;less-loader&lt;/code&gt; はソースをオーバーライドせず、エントリのコンテンツを&lt;strong&gt;付加&lt;/strong&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="f0f860d32d135d77090a0e816e958fb9b72322f6" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;Sass&lt;/code&gt;/&lt;code&gt;SCSS&lt;/code&gt; code before the actual entry file. In this case, the &lt;code&gt;sass-loader&lt;/code&gt; will not override the &lt;code&gt;data&lt;/code&gt; option but just &lt;strong&gt;prepend&lt;/strong&gt; the entry's content.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Sass&lt;/code&gt; / &lt;code&gt;SCSS&lt;/code&gt; コードを付加します。この場合、 &lt;code&gt;sass-loader&lt;/code&gt; は &lt;code&gt;data&lt;/code&gt; オプションをオーバーライドせず、エントリのコンテンツを&lt;strong&gt;付加&lt;/strong&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="83bb9275a790fcf5669556d8cd406a143a1a608f" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;Stylus&lt;/code&gt; code before the actual entry file. In this case, the &lt;code&gt;stylus-loader&lt;/code&gt; will not override the source but just &lt;strong&gt;prepend&lt;/strong&gt; the entry's content.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Stylus&lt;/code&gt; コードを付加します。この場合、 &lt;code&gt;stylus-loader&lt;/code&gt; はソースをオーバーライドせず、エントリのコンテンツを&lt;strong&gt;付加&lt;/strong&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="ddfc3c6ab87aff7dbe5ce84f1f8f85d74985d4bb" translate="yes" xml:space="preserve">
          <source>Prepends/Appends &lt;code&gt;Less&lt;/code&gt; code to the actual entry file.</source>
          <target state="translated">実際のエントリファイルに &lt;code&gt;Less&lt;/code&gt; コードを追加/追加します。</target>
        </trans-unit>
        <trans-unit id="4018fcb4ff60cbe10013b2151c27d638ed0deb2f" translate="yes" xml:space="preserve">
          <source>Prepends/Appends &lt;code&gt;Sass&lt;/code&gt;/&lt;code&gt;SCSS&lt;/code&gt; code before the actual entry file.</source>
          <target state="translated">実際のエントリファイルの前に &lt;code&gt;Sass&lt;/code&gt; / &lt;code&gt;SCSS&lt;/code&gt; コードを付加/追加します。</target>
        </trans-unit>
        <trans-unit id="d1f34e53c3f6c0f8bbcdbda0ebffd0834ed6bd0f" translate="yes" xml:space="preserve">
          <source>Prepends/Appends &lt;code&gt;Stylus&lt;/code&gt; code to the actual entry file.</source>
          <target state="translated">&lt;code&gt;Stylus&lt;/code&gt; コードを実際のエントリファイルに付加/追加します。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="d75c22389c793a2795b276e8fa347d15c2cc8eb2" translate="yes" xml:space="preserve">
          <source>Preserve Comments</source>
          <target state="translated">コメントを保存する</target>
        </trans-unit>
        <trans-unit id="6745a9b78ef3aa773e5a4469128d054d7aae731a" translate="yes" xml:space="preserve">
          <source>Preserve comments in &lt;code&gt;output&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; コメントを保持する</target>
        </trans-unit>
        <trans-unit id="bca788763dd46b6bb079756ca4b68a206414f9a1" translate="yes" xml:space="preserve">
          <source>Preset</source>
          <target state="translated">Preset</target>
        </trans-unit>
        <trans-unit id="4c5b71d76433aa5873dea6b786d7419754f62e09" translate="yes" xml:space="preserve">
          <source>Prevent</source>
          <target state="translated">Prevent</target>
        </trans-unit>
        <trans-unit id="c2794e00cc8740613554b35b277da05b59754f41" translate="yes" xml:space="preserve">
          <source>Prevent Duplication</source>
          <target state="translated">重複防止</target>
        </trans-unit>
        <trans-unit id="4e4fc1d7fdfa37b74648dbf42fcaf4e9b410067a" translate="yes" xml:space="preserve">
          <source>Prevent Duplication: Use the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; to dedupe and split chunks.</source>
          <target state="translated">重複の防止：&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; &lt;/a&gt;を使用して、チャンクの重複排除と分割を行います。</target>
        </trans-unit>
        <trans-unit id="2f6099ca376518163d3dfa8c1f36e6250e904c68" translate="yes" xml:space="preserve">
          <source>Prevent generation of modules for &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; calls matching the following regular expressions:</source>
          <target state="translated">防止のためのモジュールの生成 &lt;code&gt;import&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; 次の正規表現に一致する呼び出しを：</target>
        </trans-unit>
        <trans-unit id="70d92421da8673a13334c0b7f2dc0443d3edd923" translate="yes" xml:space="preserve">
          <source>Prevent webpack from parsing any files matching the given regular expression(s). Ignored files &lt;strong&gt;should not&lt;/strong&gt; have calls to &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;define&lt;/code&gt; or any other importing mechanism. This can boost build performance when ignoring large libraries.</source>
          <target state="translated">webpackが指定された正規表現に一致するファイルを解析しないようにします。無視されたファイルに&lt;strong&gt;は&lt;/strong&gt;、 &lt;code&gt;import&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;define&lt;/code&gt; などのインポートメカニズムの呼び出しを含め&lt;strong&gt;ないでください&lt;/strong&gt;。これにより、大きなライブラリを無視する場合のビルドパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="8a83401cb0789d463a4652dace90632d702bf70e" translate="yes" xml:space="preserve">
          <source>Prevents exposing path info when creating names for parts splitted by maxSize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09555c71ab8f697b706fe0a465afb403257e4a7" translate="yes" xml:space="preserve">
          <source>Print compilation progress during build</source>
          <target state="translated">ビルド中のコンパイルの進捗状況を表示</target>
        </trans-unit>
        <trans-unit id="84fa8a294b54a501062999c9b542b8080d036f21" translate="yes" xml:space="preserve">
          <source>Print compilation progress in percentage</source>
          <target state="translated">コンパイルの進捗状況をパーセンテージで表示</target>
        </trans-unit>
        <trans-unit id="5c33e1916b7874178fa90f9435a4ee34e6c9d5bc" translate="yes" xml:space="preserve">
          <source>Prints result as JSON or store it in a file</source>
          <target state="translated">結果をJSONとして出力したり、ファイルに保存したりすることができます。</target>
        </trans-unit>
        <trans-unit id="3deef4bd45d7f04aaa754a8c8151d330d6833406" translate="yes" xml:space="preserve">
          <source>Prior to webpack 5 it was common to use:</source>
          <target state="translated">webpack 5以前は一般的に使用されていました。</target>
        </trans-unit>
        <trans-unit id="b8f12c5698b1446efc9c136ce5e53ec1fbe6adbe" translate="yes" xml:space="preserve">
          <source>Prior to webpack, front-end developers would use tools like &lt;a href=&quot;https://gruntjs.com/&quot;&gt;grunt&lt;/a&gt; and &lt;a href=&quot;https://gulpjs.com/&quot;&gt;gulp&lt;/a&gt; to process these assets and move them from their &lt;code&gt;/src&lt;/code&gt; folder into their &lt;code&gt;/dist&lt;/code&gt; or &lt;code&gt;/build&lt;/code&gt; directory. The same idea was used for JavaScript modules, but tools like webpack will &lt;strong&gt;dynamically bundle&lt;/strong&gt; all dependencies (creating what's known as a &lt;a href=&quot;../concepts/dependency-graph&quot;&gt;dependency graph&lt;/a&gt;). This is great because every module now &lt;em&gt;explicitly states its dependencies&lt;/em&gt; and we'll avoid bundling modules that aren't in use.</source>
          <target state="translated">WebPACKの前に、フロントエンドの開発者は、同様のツール使用します&lt;a href=&quot;https://gruntjs.com/&quot;&gt;うなり声&lt;/a&gt;と&lt;a href=&quot;https://gulpjs.com/&quot;&gt;一口に&lt;/a&gt;これらの資産を処理し、彼らのからそれらを移動するために &lt;code&gt;/src&lt;/code&gt; に自分の中にフォルダ &lt;code&gt;/dist&lt;/code&gt; のか &lt;code&gt;/build&lt;/code&gt; ディレクトリ。同じアイデアがJavaScriptモジュールにも使用されましたが、webpackなどのツールはすべての依存関係を&lt;strong&gt;動的にバンドルし&lt;/strong&gt;ます（&lt;a href=&quot;../concepts/dependency-graph&quot;&gt;依存関係グラフと&lt;/a&gt;呼ばれるものを作成します）。すべてのモジュールが&lt;em&gt;その依存関係&lt;/em&gt;を&lt;em&gt;明示的に示すように&lt;/em&gt;なり、使用されていないモジュールをバンドルすることを回避できるため、これは素晴らしいことです。</target>
        </trans-unit>
        <trans-unit id="853d057077a85b703ffdc0dbc6602a2799b5ea75" translate="yes" xml:space="preserve">
          <source>Prior to webpack, front-end developers would use tools like grunt and gulp to process these assets and move them from their &lt;code&gt;/src&lt;/code&gt; folder into their &lt;code&gt;/dist&lt;/code&gt; or &lt;code&gt;/build&lt;/code&gt; directory. The same idea was used for JavaScript modules, but tools like webpack will &lt;strong&gt;dynamically bundle&lt;/strong&gt; all dependencies (creating what's known as a &lt;a href=&quot;../concepts/dependency-graph&quot;&gt;dependency graph&lt;/a&gt;). This is great because every module now &lt;em&gt;explicitly states its dependencies&lt;/em&gt; and we'll avoid bundling modules that aren't in use.</source>
          <target state="translated">Webpackの前は、フロントエンドの開発者はgruntやgulpなどのツールを使用してこれらのアセットを処理し、 &lt;code&gt;/src&lt;/code&gt; フォルダーから &lt;code&gt;/dist&lt;/code&gt; または &lt;code&gt;/build&lt;/code&gt; ディレクトリに移動していました。JavaScriptモジュールにも同じアイデアが使用されましたが、webpackなどのツールはすべての依存関係を&lt;strong&gt;動的にバンドルし&lt;/strong&gt;ます（&lt;a href=&quot;../concepts/dependency-graph&quot;&gt;依存関係グラフと&lt;/a&gt;呼ばれるものを作成します）。すべてのモジュール&lt;em&gt;が依存関係&lt;/em&gt;を&lt;em&gt;明示的に示すように&lt;/em&gt;なり、使用されていないモジュールのバンドルを回避できるため、これは素晴らしいことです。</target>
        </trans-unit>
        <trans-unit id="5bc14c6a8a73b39710c3f86c823755dd32a2486d" translate="yes" xml:space="preserve">
          <source>Problems with &lt;code&gt;url(...)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url(...)&lt;/code&gt; に関する問題</target>
        </trans-unit>
        <trans-unit id="d9d5a1a4e8294b7d8b0b015f9f5ba3bd419c7e5e" translate="yes" xml:space="preserve">
          <source>Process &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; tags</source>
          <target state="translated">プロセスの &lt;code&gt;script&lt;/code&gt; と &lt;code&gt;link&lt;/code&gt; タグ</target>
        </trans-unit>
        <trans-unit id="b48e6dc9905a9c0bfe2196cd194579a3ba092721" translate="yes" xml:space="preserve">
          <source>Process the given module dependencies.</source>
          <target state="translated">与えられたモジュールの依存関係を処理します。</target>
        </trans-unit>
        <trans-unit id="9fdf135e040b8a04f9a9379941ff8ed8bea4b387" translate="yes" xml:space="preserve">
          <source>Processed by webpack.</source>
          <target state="translated">webpackで処理しています。</target>
        </trans-unit>
        <trans-unit id="df70fc7991d3f1476ee9b62f9991c5a0f2c589e0" translate="yes" xml:space="preserve">
          <source>Production</source>
          <target state="translated">Production</target>
        </trans-unit>
        <trans-unit id="5f2ef3e2f3577a2d2bd8b959bd3e440184953d37" translate="yes" xml:space="preserve">
          <source>Production &amp;gt; Development</source>
          <target state="translated">生産&amp;gt;開発</target>
        </trans-unit>
        <trans-unit id="c26e233131491c824870820a3e2b3a31b5923ca6" translate="yes" xml:space="preserve">
          <source>Profile them to not introduce a performance problem here.</source>
          <target state="translated">ここにパフォーマンスの問題を導入しないために、彼らをプロファイルします。</target>
        </trans-unit>
        <trans-unit id="cea5295b78ec1b99a624dda73a7e6d10f18cdf3f" translate="yes" xml:space="preserve">
          <source>Profiling</source>
          <target state="translated">Profiling</target>
        </trans-unit>
        <trans-unit id="eb4b2578141e01fd0c09daab7c2b1fcc38468689" translate="yes" xml:space="preserve">
          <source>ProfilingPlugin</source>
          <target state="translated">ProfilingPlugin</target>
        </trans-unit>
        <trans-unit id="1b90271d66cf2d3ac755d49a550fe5f31b9eca5f" translate="yes" xml:space="preserve">
          <source>Progress</source>
          <target state="translated">Progress</target>
        </trans-unit>
        <trans-unit id="b4ae6e1536b4c5b8bb447006ff7c7d0e54e98966" translate="yes" xml:space="preserve">
          <source>Progress plugin</source>
          <target state="translated">プログレスプラグイン</target>
        </trans-unit>
        <trans-unit id="ee50a58f4658425f2606deb72485539d209a46d0" translate="yes" xml:space="preserve">
          <source>ProgressPlugin</source>
          <target state="translated">ProgressPlugin</target>
        </trans-unit>
        <trans-unit id="9ce7fc34d5a940a43c1c9a5378b9ba9f8ad51b8a" translate="yes" xml:space="preserve">
          <source>Progressive Web Application</source>
          <target state="translated">プログレッシブWebアプリケーション</target>
        </trans-unit>
        <trans-unit id="a1d47544cbf8518c826a49f4542afebff6574602" translate="yes" xml:space="preserve">
          <source>Progressive Web Applications (or PWAs) are web apps that deliver an experience similar to native applications. There are many things that can contribute to that. Of these, the most significant is the ability for an app to be able to function when &lt;strong&gt;offline&lt;/strong&gt;. This is achieved through the use of a web technology called &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;.</source>
          <target state="translated">プログレッシブWebアプリケーション（またはPWA）は、ネイティブアプリケーションと同様のエクスペリエンスを提供するWebアプリです。それに貢献することができる多くのものがあります。これらの中で最も重要なのは、&lt;strong&gt;オフライン&lt;/strong&gt;時にアプリが機能できることです。これは、&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;と呼ばれるWebテクノロジーを使用して実現されます。</target>
        </trans-unit>
        <trans-unit id="351f56a6fefd5127c90506d3e91990f1d7631787" translate="yes" xml:space="preserve">
          <source>Properties:</source>
          <target state="translated">Properties:</target>
        </trans-unit>
        <trans-unit id="b2e2405ab7402f6ab230b6398229a23b1c3e9380" translate="yes" xml:space="preserve">
          <source>Property in the &lt;code&gt;this&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; オブジェクトのプロパティ。</target>
        </trans-unit>
        <trans-unit id="b71bc359101e7e3543bb1c11cd760c55850d45a2" translate="yes" xml:space="preserve">
          <source>Property in the global object, for node.</source>
          <target state="translated">グローバルオブジェクトのプロパティ。</target>
        </trans-unit>
        <trans-unit id="41e1e744dda7cd8949e21e9c59e08d6fbb8371a1" translate="yes" xml:space="preserve">
          <source>Provide Babel presets and plugins</source>
          <target state="translated">バベルのプリセットとプラグインを提供</target>
        </trans-unit>
        <trans-unit id="f71aba112975c3f77f3e63ba1d059603e20d8ce5" translate="yes" xml:space="preserve">
          <source>Provide a cache directory where cache items should be stored (used for default read/write implementation)</source>
          <target state="translated">キャッシュアイテムが格納されるキャッシュディレクトリを提供する (デフォルトの読み書き実装で使用)</target>
        </trans-unit>
        <trans-unit id="21146cf496888628c11aeec78d6ad39f64f9113c" translate="yes" xml:space="preserve">
          <source>Provide a handler function which will be called when hooks report progress. &lt;code&gt;handler&lt;/code&gt; function arguments:</source>
          <target state="translated">フックが進行状況を報告するときに呼び出されるハンドラー関数を提供します。 &lt;code&gt;handler&lt;/code&gt; 関数の引数：</target>
        </trans-unit>
        <trans-unit id="911f482221520b259e4f50cced432d989a75a6ca" translate="yes" xml:space="preserve">
          <source>Provide an array of strings in case you have multiple static folders set in &lt;a href=&quot;#devservercontentbase&quot;&gt;&lt;code&gt;contentBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#devservercontentbase&quot;&gt; &lt;code&gt;contentBase&lt;/code&gt; に&lt;/a&gt;複数の静的フォルダーが設定されている場合は、文字列の配列を指定します。</target>
        </trans-unit>
        <trans-unit id="9e73e398ff413d23360495d7730d96a04b3fa96d" translate="yes" xml:space="preserve">
          <source>Provide an invalidation identifier which is used to generate the hashes. You can use it for extra dependencies of loaders (used for default read/write implementation)</source>
          <target state="translated">ハッシュを生成するために使用される無効化識別子を提供します。これはローダーの追加の依存関係に使用することができます (デフォルトの読み書き実装に使用されます)</target>
        </trans-unit>
        <trans-unit id="002518b5702e29c2b3cc421d6438705e64215ff1" translate="yes" xml:space="preserve">
          <source>Provide browser name to use instead of the default one:</source>
          <target state="translated">デフォルトのものではなく、使用するブラウザ名を指定します。</target>
        </trans-unit>
        <trans-unit id="c95356976c75eef71cd7567f26cf1af85f3b0149" translate="yes" xml:space="preserve">
          <source>Provide labels &lt;code&gt;require:&lt;/code&gt; and &lt;code&gt;exports:&lt;/code&gt; to modules.</source>
          <target state="translated">ラベルに &lt;code&gt;require:&lt;/code&gt; を提供し、モジュールに &lt;code&gt;exports:&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e70aa82f2d754cac2d596498c239f9fdcb217838" translate="yes" xml:space="preserve">
          <source>Provide path to a webpack configuration file e.g. &lt;code&gt;./webpack.config.js&lt;/code&gt;</source>
          <target state="translated">WebPACKの設定ファイルへのパスを提供するなど &lt;code&gt;./webpack.config.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18f85a610445d7ff2881c62d6d72f3622d17fb80" translate="yes" xml:space="preserve">
          <source>Provide stuff that is normally available in Node.js modules.</source>
          <target state="translated">Node.js モジュールで通常利用できるものを提供する。</target>
        </trans-unit>
        <trans-unit id="28921ddb834c3ca83287ff2ccb648a91d484d86b" translate="yes" xml:space="preserve">
          <source>Provide stuff that is normally available in require.js.</source>
          <target state="translated">通常はrequire.jsで利用できるものを提供します。</target>
        </trans-unit>
        <trans-unit id="9c18bd1e4db6173bb75ba6a0ac988bd0c8ce1e7f" translate="yes" xml:space="preserve">
          <source>Provide the &lt;code&gt;mode&lt;/code&gt; option in the config:</source>
          <target state="translated">構成で &lt;code&gt;mode&lt;/code&gt; オプションを指定します。</target>
        </trans-unit>
        <trans-unit id="a0b16c44f29505f28172dc6d40099bf222dd0c68" translate="yes" xml:space="preserve">
          <source>Provide these modules as globals, see &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt;</source>
          <target state="translated">これらのモジュールをグローバルとして提供します。&lt;a href=&quot;../guides/shimming&quot;&gt;シミングを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="2eaf0c1fa27bf97557973ef692273e812d50197f" translate="yes" xml:space="preserve">
          <source>Provide your own certificate using the &lt;a href=&quot;#devserverhttps&quot;&gt;https&lt;/a&gt; option:</source>
          <target state="translated">&lt;a href=&quot;#devserverhttps&quot;&gt;https&lt;/a&gt;オプションを使用して独自の証明書を提供します。</target>
        </trans-unit>
        <trans-unit id="7e23b3c84c3ec72742e36387d71dff6a0095f93d" translate="yes" xml:space="preserve">
          <source>ProvidePlugin</source>
          <target state="translated">ProvidePlugin</target>
        </trans-unit>
        <trans-unit id="00b2d96c2e0bb46b5b8efa6185b7476aea3c8dca" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.context&lt;/code&gt;. The parameter &lt;code&gt;modulesDirectories&lt;/code&gt; and &lt;code&gt;extensions&lt;/code&gt; are used to find alternative requests for files. It's useful to provide the same arrays as you provide to the resolver.</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; を提供します。パラメータ &lt;code&gt;modulesDirectories&lt;/code&gt; および &lt;code&gt;extensions&lt;/code&gt; は、ファイルの代替リクエストを見つけるために使用されます。リゾルバーに提供するのと同じ配列を提供すると便利です。</target>
        </trans-unit>
        <trans-unit id="ccac1bffde4b46feae3d37ac89d8a797666697ad" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.ensure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require.ensure&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="caea413a4ea18be73d6426da779623f518a353d0" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;require.include&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require.include&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="3f35c08902b87030a7f86cd35a275b18c6461b0d" translate="yes" xml:space="preserve">
          <source>Provides AMD-style &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; to modules. Also bind &lt;code&gt;require.amd&lt;/code&gt;, &lt;code&gt;define.amd&lt;/code&gt; and webpack_amd_options## to the &lt;code&gt;options&lt;/code&gt; passed as parameter.</source>
          <target state="translated">AMDスタイルの &lt;code&gt;define&lt;/code&gt; を提供し、モジュールに &lt;code&gt;require&lt;/code&gt; します。また、パラメーターとして渡された &lt;code&gt;options&lt;/code&gt; &lt;code&gt;require.amd&lt;/code&gt; 、 &lt;code&gt;define.amd&lt;/code&gt; 、およびwebpack_amd_options ##をバインドします。</target>
        </trans-unit>
        <trans-unit id="3d4acf80bc5ea0f22c1e5e92813f8cc30ff36540" translate="yes" xml:space="preserve">
          <source>Provides CommonJs-style &lt;code&gt;require&lt;/code&gt; to modules.</source>
          <target state="translated">CommonJsスタイルの &lt;code&gt;require&lt;/code&gt; をモジュールに提供します。</target>
        </trans-unit>
        <trans-unit id="6b841085b8de02e0934f48155663289e02a0aae8" translate="yes" xml:space="preserve">
          <source>Provides an option to execute a custom function when &lt;code&gt;webpack-dev-server&lt;/code&gt; starts listening for connections on a port.</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; がポートで接続のリッスンを開始したときにカスタム関数を実行するオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="14c6c2b56fa620cfe65b896f633e3baef406a8ba" translate="yes" xml:space="preserve">
          <source>Provides the ability to execute custom middleware after all other middleware internally within the server.</source>
          <target state="translated">サーバー内で他のすべてのミドルウェアの後にカスタムミドルウェアを実行する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="651b73c46abd2e0cc12c0978ce9833dcabb3b6c5" translate="yes" xml:space="preserve">
          <source>Provides the ability to execute custom middleware prior to all other middleware internally within the server. This could be used to define custom handlers, for example:</source>
          <target state="translated">サーバー内の他のすべてのミドルウェアよりも先にカスタムミドルウェアを実行する機能を提供します。これは、例えばカスタムハンドラを定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="27c5da97c8cbc3a2dcec75df0aec821674e88c63" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; helps to statically detect CommonJs files.</source>
          <target state="translated">&lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 提供：「commonjs」は、CommonJsファイルを静的に検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="28b70e13c4e40ca0300ca86b06595400545e33cc" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 提供</target>
        </trans-unit>
        <trans-unit id="e9301000f0a00583a5810ba795051e5ddf296854" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 提供する</target>
        </trans-unit>
        <trans-unit id="52f283e529244feedb24615d14b30d3b3994db93" translate="yes" xml:space="preserve">
          <source>Providing CommonJs and ESM version (stateful)</source>
          <target state="translated">CommonJsとESM版の提供(ステートフル</target>
        </trans-unit>
        <trans-unit id="abf9b66224e1f58ad0acce8bf8195532997f3c62" translate="yes" xml:space="preserve">
          <source>Providing CommonJs and ESM version (stateless)</source>
          <target state="translated">CommonJsとESM版の提供(ステートレス)</target>
        </trans-unit>
        <trans-unit id="da1fcd9698a2c8d58f9f604888ddebf51fbb9e81" translate="yes" xml:space="preserve">
          <source>Providing Node.js, WebWorker and browser versions</source>
          <target state="translated">Node.js、WebWorker、ブラウザ版の提供</target>
        </trans-unit>
        <trans-unit id="76c11420be22335090496e30d7617a0fab733fbf" translate="yes" xml:space="preserve">
          <source>Providing Node.js, browser and electron versions</source>
          <target state="translated">Node.js、ブラウザ版、電子版の提供</target>
        </trans-unit>
        <trans-unit id="61a88384655b879fbdde4ceffb8fe0825f47575f" translate="yes" xml:space="preserve">
          <source>Providing a &lt;code&gt;Function&lt;/code&gt; to &lt;code&gt;devServer.writeToDisk&lt;/code&gt; can be used for filtering. The function follows the same premise as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;code&gt;Array#filter&lt;/code&gt;&lt;/a&gt; in which a boolean return value tells if the file should be written to disk.</source>
          <target state="translated">&lt;code&gt;devServer.writeToDisk&lt;/code&gt; に &lt;code&gt;Function&lt;/code&gt; を提供すると、フィルタリングに使用できます。この関数は、ブール値の戻り値がファイルをディスクに書き込む必要があるかどうかを示す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt; &lt;code&gt;Array#filter&lt;/code&gt; &lt;/a&gt;と同じ前提に従います。</target>
        </trans-unit>
        <trans-unit id="0d13e48eb5a0269f84fb1bead3062dc01f49ea59" translate="yes" xml:space="preserve">
          <source>Providing a &lt;code&gt;RegExp&lt;/code&gt; to &lt;code&gt;{cacheGroup}.test&lt;/code&gt;:</source>
          <target state="translated">提供 &lt;code&gt;RegExp&lt;/code&gt; に &lt;code&gt;{cacheGroup}.test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdbc27ea9e33622affb475282330db222c29f3bc" translate="yes" xml:space="preserve">
          <source>Providing a bundled script version for direct browser consumption</source>
          <target state="translated">ブラウザで直接消費するためのスクリプトのバンドル版の提供</target>
        </trans-unit>
        <trans-unit id="89fd29501af0069be131ddb911929200aa72130f" translate="yes" xml:space="preserve">
          <source>Providing a function to&lt;code&gt;{cacheGroup}.test&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{cacheGroup}.test&lt;/code&gt; に関数を提供する：</target>
        </trans-unit>
        <trans-unit id="cfdbd7c5236fc2901a235f32ab1b08a7a1cfea96" translate="yes" xml:space="preserve">
          <source>Providing a string or a function allows you to use a custom name. Specifying either a string or a function that always returns the same string will merge all common modules and vendors into a single chunk. This might lead to bigger initial downloads and slow down page loads.</source>
          <target state="translated">文字列や関数を指定することで、カスタム名を使用することができます。文字列または常に同じ文字列を返す関数を指定すると、すべての共通モジュールとベンダーを一つの塊に統合します。これは、初期ダウンロードが大きくなったり、ページの読み込みが遅くなったりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="53c9af82b1a5034915099508bdf1641efc8402c8" translate="yes" xml:space="preserve">
          <source>Providing a string to &lt;code&gt;devServer.transportMode&lt;/code&gt; is a shortcut to setting both &lt;code&gt;devServer.transportMode.client&lt;/code&gt; and &lt;code&gt;devServer.transportMode.server&lt;/code&gt; to the given string value.</source>
          <target state="translated">&lt;code&gt;devServer.transportMode&lt;/code&gt; に文字列を提供することは、 &lt;code&gt;devServer.transportMode.client&lt;/code&gt; と &lt;code&gt;devServer.transportMode.server&lt;/code&gt; の両方を指定された文字列値に設定するためのショートカットです。</target>
        </trans-unit>
        <trans-unit id="cf54727443488c5dfc569d208ed89ce7f5cb60bd" translate="yes" xml:space="preserve">
          <source>Providing devtools or production optimizations</source>
          <target state="translated">devtools やプロダクションの最適化を提供する</target>
        </trans-unit>
        <trans-unit id="3fb402035c6abd0f5d9fb50947b86a8d8a8ecdf5" translate="yes" xml:space="preserve">
          <source>Providing different versions depending on target environment</source>
          <target state="translated">ターゲット環境に応じて異なるバージョンを提供</target>
        </trans-unit>
        <trans-unit id="d6bbd4586493e9c9676fb86cd19dfd11176c13da" translate="yes" xml:space="preserve">
          <source>Providing only a CommonJs version</source>
          <target state="translated">CommonJsのバージョンのみの提供</target>
        </trans-unit>
        <trans-unit id="13fa7b193de0bbe33d459acb490297a712187679" translate="yes" xml:space="preserve">
          <source>Providing only an ESM version</source>
          <target state="translated">ESMバージョンのみの提供</target>
        </trans-unit>
        <trans-unit id="4142b96f54c15dc4e11fe1b44786bc0167f9f4cb" translate="yes" xml:space="preserve">
          <source>Providing the &lt;code&gt;mode&lt;/code&gt; configuration option tells webpack to use its built-in optimizations accordingly.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 設定オプションを提供すると、それに応じて組み込みの最適化を使用するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="cc5d66bd095ccf64cdaf8dab20ee18d4ee9f3910" translate="yes" xml:space="preserve">
          <source>Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain.</source>
          <target state="translated">いくつかの URL をプロキシすることは、API バックエンド開発サーバーを別個に持っていて、同じドメインで API リクエストを送信したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="138809ef784cde88aec7f588f1644dcbf06a9730" translate="yes" xml:space="preserve">
          <source>Public Path</source>
          <target state="translated">公道</target>
        </trans-unit>
        <trans-unit id="2733766caea16feb51903ce34a90c101ba2bf76f" translate="yes" xml:space="preserve">
          <source>Pure CSS, CSS modules and PostCSS</source>
          <target state="translated">ピュアCSS、CSSモジュール、PostCSS</target>
        </trans-unit>
        <trans-unit id="bad627c5524aadbdba72f875f9cde8011754d0e5" translate="yes" xml:space="preserve">
          <source>Put this loader in front of other loaders. The following loaders run in a worker pool.</source>
          <target state="translated">このローダーを他のローダーの前に置きます。以下のローダーはワーカープールで実行されます。</target>
        </trans-unit>
        <trans-unit id="53fb27ed3568a98ac19274e39a58d83510ec0c2f" translate="yes" xml:space="preserve">
          <source>Putting the content of &lt;code&gt;helpers&lt;/code&gt; into each chunk will result into its code being downloaded twice. By using a separate chunk this will only happen once. We pay the cost of an additional request, which could be considered a tradeoff. That's why there is a minimum size of 30kb.</source>
          <target state="translated">&lt;code&gt;helpers&lt;/code&gt; のコンテンツを各チャンクに入れると、コードが2回ダウンロードされます。別のチャンクを使用することにより、これは一度だけ行われます。私たちは追加のリクエストの費用を支払いますが、これはトレードオフと見なすことができます。そのため、最小サイズは30kbです。</target>
        </trans-unit>
        <trans-unit id="8a9b6130aa6732b5b6bc6d3b954216477743ad28" translate="yes" xml:space="preserve">
          <source>Qualities</source>
          <target state="translated">Qualities</target>
        </trans-unit>
        <trans-unit id="14a1c21a1304ad0ee741ad05bda442f60c1f277e" translate="yes" xml:space="preserve">
          <source>Query Options</source>
          <target state="translated">クエリオプション</target>
        </trans-unit>
        <trans-unit id="f9547326220882df69495a2dd01e3a453ece7043" translate="yes" xml:space="preserve">
          <source>Query value</source>
          <target state="translated">クエリ値</target>
        </trans-unit>
        <trans-unit id="287b9a538493902223664f10fed505869d105145" translate="yes" xml:space="preserve">
          <source>Query with leading &lt;code&gt;?&lt;/code&gt;</source>
          <target state="translated">先行するクエリ &lt;code&gt;?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="138f14b0b01ba7ad70311f3aabaa6e572b2cb47c" translate="yes" xml:space="preserve">
          <source>QueryString Options</source>
          <target state="translated">クエリ文字列オプション</target>
        </trans-unit>
        <trans-unit id="4fcb8c79d68fd4d6d6033a1d4be369eaa8ad224e" translate="yes" xml:space="preserve">
          <source>Rather, because &lt;code&gt;moment&lt;/code&gt; imports with this code:</source>
          <target state="translated">むしろ、 &lt;code&gt;moment&lt;/code&gt; はこのコードでインポートされるため：</target>
        </trans-unit>
        <trans-unit id="9b9ded6d2425a046da4a82a8457d4dd2a87d3a49" translate="yes" xml:space="preserve">
          <source>Re-run the &lt;code&gt;npm run build&lt;/code&gt; command and open &lt;code&gt;dist/index.html&lt;/code&gt;. If you look at the console in your developer tools, you should be able to see your imported data being logged to the console!</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; コマンドを再実行し、 &lt;code&gt;dist/index.html&lt;/code&gt; を開きます。開発ツールでコンソールを見ると、インポートしたデータがコンソールに記録されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="b19cedad67ef9438f5103b1c7e5b4186a79fbb85" translate="yes" xml:space="preserve">
          <source>Re-run the &lt;code&gt;npm run build&lt;/code&gt; command and open &lt;code&gt;dist/index.html&lt;/code&gt;. You should be able to see your imported data being logged to the console!</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; コマンドを再実行し、 &lt;code&gt;dist/index.html&lt;/code&gt; を開きます。インポートしたデータがコンソールに記録されているのを確認できるはずです。</target>
        </trans-unit>
        <trans-unit id="c9d9c05e89f890070a589388790c9ebfd8a65725" translate="yes" xml:space="preserve">
          <source>React: &lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;Code Splitting and Lazy Loading&lt;/a&gt;</source>
          <target state="translated">React：&lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;コード分​​割と遅延読み込み&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c39d343ee23cf54872e3b0b82688f0bee8855736" translate="yes" xml:space="preserve">
          <source>Read More about Extending Configuration Files</source>
          <target state="translated">設定ファイルの拡張についての詳細はこちら</target>
        </trans-unit>
        <trans-unit id="d39e943de60c8e1353fd4906db8f2f19a2b751fc" translate="yes" xml:space="preserve">
          <source>Read in which &lt;a href=&quot;../configuration/mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; webpack is running.</source>
          <target state="translated">Webpackが実行されている&lt;a href=&quot;../configuration/mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;を読み取ります。</target>
        </trans-unit>
        <trans-unit id="a5d02b469c10ccab1651045b7f003a41b5defb2b" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guides/author-libraries&quot;&gt;authoring libraries guide&lt;/a&gt; guide for more information on &lt;code&gt;output.library&lt;/code&gt; as well as &lt;code&gt;output.libraryTarget&lt;/code&gt;.</source>
          <target state="translated">読む&lt;a href=&quot;../guides/author-libraries&quot;&gt;オーサリングライブラリガイド&lt;/a&gt;の詳細についてのガイドを &lt;code&gt;output.library&lt;/code&gt; など &lt;code&gt;output.libraryTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76c9e6b091f8555f8022635989382563379e3c96" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guides/installation&quot;&gt;installation guide&lt;/a&gt; if you don't already have webpack and CLI installed.</source>
          <target state="translated">webpackとCLIがまだインストールされていない場合は、&lt;a href=&quot;../guides/installation&quot;&gt;インストールガイド&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="23f14c205e758becbd08e59f44cdd7e8887044c2" translate="yes" xml:space="preserve">
          <source>Readable ids for better debugging.</source>
          <target state="translated">読み取り可能な ID でより良いデバッグが可能になりました。</target>
        </trans-unit>
        <trans-unit id="bbdb9efd814ad440a76dee9ad6965c39b273a3d8" translate="yes" xml:space="preserve">
          <source>RealContentHashPlugin</source>
          <target state="translated">RealContentHashPlugin</target>
        </trans-unit>
        <trans-unit id="8b9831e6175fa654bc52da1f11e26f428496ffea" translate="yes" xml:space="preserve">
          <source>Recently, &lt;code&gt;ts-loader&lt;/code&gt; has started to consume the internal TypeScript watch mode APIs which dramatically decreases the number of modules to be rebuilt on each iteration. This &lt;code&gt;experimentalWatchApi&lt;/code&gt; shares the same logic as the normal TypeScript watch mode itself and is quite stable for development use. Turn on &lt;code&gt;transpileOnly&lt;/code&gt; as well for truly fast incremental builds.</source>
          <target state="translated">最近、 &lt;code&gt;ts-loader&lt;/code&gt; は、内部のTypeScript監視モードAPIを使用し始め、反復ごとに再構築するモジュールの数を劇的に減らしています。この &lt;code&gt;experimentalWatchApi&lt;/code&gt; は、通常のTypeScriptウォッチモード自体と同じロジックを共有し、開発用に非常に安定しています。本当に高速なインクリメンタルビルドでは、 &lt;code&gt;transpileOnly&lt;/code&gt; もオンにします。</target>
        </trans-unit>
        <trans-unit id="06210493d8afafd3fbe9c98e7aefe7e12c50cb5e" translate="yes" xml:space="preserve">
          <source>Recommendations:</source>
          <target state="translated">Recommendations:</target>
        </trans-unit>
        <trans-unit id="1a3975a34e971dc78405672ac454d8b4d2388d19" translate="yes" xml:space="preserve">
          <source>Recommended choice for development builds with high quality SourceMaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43648865be2731d4d283bf68761ad881ad6a671" translate="yes" xml:space="preserve">
          <source>Recommended choice for development builds with maximum performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a279000a62aa7407eb160e7989ee06506cd1227" translate="yes" xml:space="preserve">
          <source>Recommended choice for production builds with high quality SourceMaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d09c75df9c6d0c6e0c0e101dce57826f172b1c" translate="yes" xml:space="preserve">
          <source>Recommended choice for production builds with maximum performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb37b6d15db38153847eeb919d56d5328c44951" translate="yes" xml:space="preserve">
          <source>RecordIdsPlugin</source>
          <target state="translated">RecordIdsPlugin</target>
        </trans-unit>
        <trans-unit id="500dd454daedf0b0d7fb544e9ac14192f693de18" translate="yes" xml:space="preserve">
          <source>Records are particularly useful if you have a complex setup that leverages &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt;. The data can be used to ensure the split bundles are achieving the &lt;a href=&quot;../guides/caching&quot;&gt;caching&lt;/a&gt; behavior you need.</source>
          <target state="translated">レコードは、&lt;a href=&quot;../guides/code-splitting&quot;&gt;コード分​​割&lt;/a&gt;を活用する複雑な設定がある場合に特に役立ちます。データを使用して、分割バンドルが必要な&lt;a href=&quot;../guides/caching&quot;&gt;キャッシング&lt;/a&gt;動作を確実に実行できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="a9db278849628f2a8889e6faa10f8ec74e43e5ba" translate="yes" xml:space="preserve">
          <source>Redirect module requests when normal resolving fails.</source>
          <target state="translated">通常の解決に失敗した場合にモジュールのリクエストをリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="251a6acd424a17f027e411b68bb69d330d579ec2" translate="yes" xml:space="preserve">
          <source>Reference syntax</source>
          <target state="translated">参照構文</target>
        </trans-unit>
        <trans-unit id="29edf14ed2cf63f8c57f91d622484b33ec5b610d" translate="yes" xml:space="preserve">
          <source>Reference the &lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs&quot;&gt;demo html file&lt;/a&gt; for the proper loading sequence.</source>
          <target state="translated">適切なロードシーケンスについては、&lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs&quot;&gt;デモHTMLファイル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="806430f89bd9b62c7cfb2eed31236525d29c5c5e" translate="yes" xml:space="preserve">
          <source>References a dll manifest file to map dependency names to module ids, then requires them as needed using the internal &lt;code&gt;__webpack_require__&lt;/code&gt; function.</source>
          <target state="translated">DLLマニフェストファイルを参照して依存関係名をモジュールIDにマップし、必要に応じて内部 &lt;code&gt;__webpack_require__&lt;/code&gt; 関数を使用して依存関係名を要求します。</target>
        </trans-unit>
        <trans-unit id="ca5db4fe93ba98fe1b576309acf2388052f2a36a" translate="yes" xml:space="preserve">
          <source>RegExp</source>
          <target state="translated">RegExp</target>
        </trans-unit>
        <trans-unit id="e84924bdbf290769f17a9fea046a3d8be57d31f9" translate="yes" xml:space="preserve">
          <source>Register a function to listen for changes in &lt;code&gt;status&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 変化をリッスンする関数を登録します。</target>
        </trans-unit>
        <trans-unit id="dd7bb9e1d6de0940bf8cc7f5d552eac3e907a3df" translate="yes" xml:space="preserve">
          <source>Registering Our Service Worker</source>
          <target state="translated">サービスワーカーの登録</target>
        </trans-unit>
        <trans-unit id="743f247412091cd63d9bf68867401d2b01423153" translate="yes" xml:space="preserve">
          <source>Regular Expression or function (see previous point)</source>
          <target state="translated">正規表現または関数(前の点を参照</target>
        </trans-unit>
        <trans-unit id="95fcb99c97c4f07e4429e3498285f25058bba00f" translate="yes" xml:space="preserve">
          <source>Reject updates for itself.</source>
          <target state="translated">自分自身のために更新を拒否する。</target>
        </trans-unit>
        <trans-unit id="b3ef9adaf388e07f00bd633ecc44a2dc9a571661" translate="yes" xml:space="preserve">
          <source>Reject updates for the given &lt;code&gt;dependencies&lt;/code&gt; forcing the update to fail with a &lt;code&gt;'decline'&lt;/code&gt; code.</source>
          <target state="translated">与えられた &lt;code&gt;dependencies&lt;/code&gt; 更新を拒否し、更新を &lt;code&gt;'decline'&lt;/code&gt; コードで失敗させます。</target>
        </trans-unit>
        <trans-unit id="70f0ed160475c6161f66688a2c223afbe6e09df0" translate="yes" xml:space="preserve">
          <source>Relative and absolute request in shared:</source>
          <target state="translated">共有での相対的な要求と絶対的な要求</target>
        </trans-unit>
        <trans-unit id="cf7ddb7603d2a26315f2455b522c75c84a223953" translate="yes" xml:space="preserve">
          <source>Relative paths</source>
          <target state="translated">相対パス</target>
        </trans-unit>
        <trans-unit id="28f532ce0d092b46958fd0924da15d44647f02ef" translate="yes" xml:space="preserve">
          <source>Remark options</source>
          <target state="translated">備考オプション</target>
        </trans-unit>
        <trans-unit id="2dcba3363466313bbee18b56da6fe5fcd17afe12" translate="yes" xml:space="preserve">
          <source>Remark settings</source>
          <target state="translated">備考設定</target>
        </trans-unit>
        <trans-unit id="c803a932f775316c5574b371e7a05f33a94460c4" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;lodash&lt;/code&gt; package we were using? For demonstration purposes, let's say we wanted to instead provide this as a global throughout our application. To do this, we can use &lt;code&gt;ProvidePlugin&lt;/code&gt;.</source>
          <target state="translated">私たちが使用していた &lt;code&gt;lodash&lt;/code&gt; パッケージを覚えていますか？デモンストレーションの目的で、代わりにこれをアプリケーション全体でグローバルとして提供したいとします。これを行うには、 &lt;code&gt;ProvidePlugin&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="9b0c95bb60fa0d6b00c6679fde1ebeb8ea6f6483" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;lodash&lt;/code&gt; package we were using? For demonstration purposes, let's say we wanted to instead provide this as a global throughout our application. To do this, we can use the &lt;code&gt;ProvidePlugin&lt;/code&gt;.</source>
          <target state="translated">使用していた &lt;code&gt;lodash&lt;/code&gt; パッケージを覚えていますか？デモンストレーションの目的で、アプリケーション全体でこれをグローバルとして提供したいとします。これを行うには、 &lt;code&gt;ProvidePlugin&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="35e3174ed3a492a7dbed6277152445eb1b11f795" translate="yes" xml:space="preserve">
          <source>Remember that this configuration will not compile until the dependency is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298f8a952e11c47a146509416894334060fae16f" translate="yes" xml:space="preserve">
          <source>Remember that when using the &lt;a href=&quot;uglifyjs-webpack-plugin&quot;&gt;&lt;code&gt;UglifyJSPlugin&lt;/code&gt;&lt;/a&gt;, you must utilize the &lt;code&gt;sourceMap&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;uglifyjs-webpack-plugin&quot;&gt; &lt;code&gt;UglifyJSPlugin&lt;/code&gt; &lt;/a&gt;を使用するときは、 &lt;code&gt;sourceMap&lt;/code&gt; オプションを使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="14eb068727f7a2bff087dc7929a503653ac0d93f" translate="yes" xml:space="preserve">
          <source>Remove Comments</source>
          <target state="translated">コメントの削除</target>
        </trans-unit>
        <trans-unit id="1d1bf2ebd26895dc8a02563899957f33ea0e0c98" translate="yes" xml:space="preserve">
          <source>Remove Order Warnings</source>
          <target state="translated">オーダー警告の削除</target>
        </trans-unit>
        <trans-unit id="6eb653885eebaad4002e035fda284819c80e2d0a" translate="yes" xml:space="preserve">
          <source>Remove Order Warnings. See &lt;a href=&quot;#remove-order-warnings&quot;&gt;examples&lt;/a&gt; below for details.</source>
          <target state="translated">注文警告を削除します。詳細については、以下の&lt;a href=&quot;#remove-order-warnings&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc75d441bfa1f4e69943b8c637e62baed6d344e6" translate="yes" xml:space="preserve">
          <source>Remove a registered status handler.</source>
          <target state="translated">登録されているステータスハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="951160e8e157b090bce49601ac412fb326933d88" translate="yes" xml:space="preserve">
          <source>Remove all comments</source>
          <target state="translated">すべてのコメントを削除</target>
        </trans-unit>
        <trans-unit id="f4a506118dc12b3458ed102b999454c8f5e8eb85" translate="yes" xml:space="preserve">
          <source>Remove all comments (including comments starting with &lt;code&gt;/*!&lt;/code&gt;).</source>
          <target state="translated">すべてのコメント（ &lt;code&gt;/*!&lt;/code&gt; で始まるコメントを含む）を削除します。</target>
        </trans-unit>
        <trans-unit id="e0fb10795d80f5150953e92b0a60d102c8ab0e34" translate="yes" xml:space="preserve">
          <source>Remove all dependencies of the loader result, even initial dependencies and those of other loaders. Consider using &lt;code&gt;pitch&lt;/code&gt;.</source>
          <target state="translated">初期の依存関係や他のローダーの依存関係も含め、ローダー結果のすべての依存関係を削除します。 &lt;code&gt;pitch&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="86dc7ac837ee3922e692052e5a72685c918b97be" translate="yes" xml:space="preserve">
          <source>Remove all dependencies of the loader result. Even initial dependencies and these of other loaders. Consider using &lt;code&gt;pitch&lt;/code&gt;.</source>
          <target state="translated">ローダー結果のすべての依存関係を削除します。初期の依存関係と他のローダーの依存関係さえも。 &lt;code&gt;pitch&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="1b70966df9914059f3a56bdbe3648fc360eeeb9d" translate="yes" xml:space="preserve">
          <source>Remove removeFrontMatter</source>
          <target state="translated">removeFrontMatterを削除</target>
        </trans-unit>
        <trans-unit id="db11da02660881778d9f70873ecc4531e5238be0" translate="yes" xml:space="preserve">
          <source>Remove the callback added via &lt;code&gt;dispose&lt;/code&gt; or &lt;code&gt;addDisposeHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dispose&lt;/code&gt; または &lt;code&gt;addDisposeHandler&lt;/code&gt; によって追加されたコールバックを削除します。</target>
        </trans-unit>
        <trans-unit id="f5c91dd968a212f3e4523598d02cb09445533b05" translate="yes" xml:space="preserve">
          <source>Remove the handler added via &lt;code&gt;dispose&lt;/code&gt; or &lt;code&gt;addDisposeHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dispose&lt;/code&gt; または &lt;code&gt;addDisposeHandler&lt;/code&gt; を介して追加されたハンドラーを削除します。</target>
        </trans-unit>
        <trans-unit id="0bf7471dcec5264f0fa3ba99680a0ed28646fcad" translate="yes" xml:space="preserve">
          <source>Remove unused code.</source>
          <target state="translated">未使用のコードを削除します。</target>
        </trans-unit>
        <trans-unit id="9873cfd7e2a458e89691e96ea4c58199b748b3b5" translate="yes" xml:space="preserve">
          <source>RemoveEmptyChunksPlugin</source>
          <target state="translated">RemoveEmptyChunksPlugin</target>
        </trans-unit>
        <trans-unit id="4b1b88f2caf58898b919ce55b6f39569c329c34b" translate="yes" xml:space="preserve">
          <source>Removed in webpack 5</source>
          <target state="translated">webpack 5 で削除</target>
        </trans-unit>
        <trans-unit id="3da760a26bf6534d21a9780897c53ec553f4e69d" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes from &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; から &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; 属性を削除します。</target>
        </trans-unit>
        <trans-unit id="40c44544cf83a888a824dcd0249281fc3f07fc0f" translate="yes" xml:space="preserve">
          <source>Removes all directory references and only copies file names.</source>
          <target state="translated">すべてのディレクトリ参照を削除し、ファイル名のみをコピーします。</target>
        </trans-unit>
        <trans-unit id="d4ebcc27454ebc01bfe9f2d91aa1f18208ce3e7b" translate="yes" xml:space="preserve">
          <source>Removes all directory references and only copies file names.⚠️ If files have the same name, the result is non-deterministic</source>
          <target state="translated">全てのディレクトリ参照を削除し、ファイル名のみをコピーします ⚠️ ファイル名が同じ場合、結果は非決定的になります</target>
        </trans-unit>
        <trans-unit id="482cb600588ab8afaba15a68fed4f3c483e3091b" translate="yes" xml:space="preserve">
          <source>Removes attributes from inside the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; 内から属性を削除します。</target>
        </trans-unit>
        <trans-unit id="268092faa00134f23e24fe804b9814f9b0030e53" translate="yes" xml:space="preserve">
          <source>Removes given chunk from a dependencies block module and chunks after removing dependency reasons. Called automatically by &lt;code&gt;removeReasonsOfDependencyBlock&lt;/code&gt;.</source>
          <target state="translated">依存関係の理由を削除した後、依存関係ブロックモジュールとチャンクから指定されたチャンクを削除します。 &lt;code&gt;removeReasonsOfDependencyBlock&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="abf5c863a1cfe6467aa4fb4c2da2f389cc6793c8" translate="yes" xml:space="preserve">
          <source>Removes relation of the module to the dependency block.</source>
          <target state="translated">モジュールと依存ブロックの関係を削除します。</target>
        </trans-unit>
        <trans-unit id="e47c65a2b82a9efef40fc0ae3bf527fada456fc3" translate="yes" xml:space="preserve">
          <source>Removes specified tags and its children. You can specify tags by setting &lt;code&gt;removingTags&lt;/code&gt; query array.</source>
          <target state="translated">指定されたタグとその子を削除します。 &lt;code&gt;removingTags&lt;/code&gt; クエリ配列を設定することにより、タグを指定できます。</target>
        </trans-unit>
        <trans-unit id="fc6c4d451ecb6322a8275648f0407eaad844edc0" translate="yes" xml:space="preserve">
          <source>Replace a specific module when building for a &lt;a href=&quot;../guides/production&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guides/production&quot;&gt;開発環境&lt;/a&gt;用にビルドするときに、特定のモジュールを置き換えます。</target>
        </trans-unit>
        <trans-unit id="65bb0f4d7377e6cf9a90c603a8225b5f6fdc198a" translate="yes" xml:space="preserve">
          <source>Replace resource(s) that matches a regexp</source>
          <target state="translated">正規表現にマッチするリソースを置換します。</target>
        </trans-unit>
        <trans-unit id="1697458e975ac729b88e562177f723a8da0c34ce" translate="yes" xml:space="preserve">
          <source>Replaces</source>
          <target state="translated">Replaces</target>
        </trans-unit>
        <trans-unit id="a4c910588f5a32b67c9312481b724443e2d5a7a1" translate="yes" xml:space="preserve">
          <source>Replacing Inline Loader Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82e0d3f0e9fada0dd733074d215716c61325f4b" translate="yes" xml:space="preserve">
          <source>Report compilation progress</source>
          <target state="translated">コンパイルの進捗状況を報告</target>
        </trans-unit>
        <trans-unit id="8e2d170ab822648a868ed17db41712a1e458ed56" translate="yes" xml:space="preserve">
          <source>Reporting Progress</source>
          <target state="translated">進捗状況の報告</target>
        </trans-unit>
        <trans-unit id="2cadbf146f2e9bf53e4c1e34c9cf81f8d0c1c270" translate="yes" xml:space="preserve">
          <source>Request is issued from CommonJs/AMD syntax or similar.</source>
          <target state="translated">CommonJs/AMD構文などからリクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="7d0eab6027cee8b369f4abf48867b6ee932e0efa" translate="yes" xml:space="preserve">
          <source>Request is issued from ESM syntax or similar.</source>
          <target state="translated">リクエストはESM構文などから発行されます。</target>
        </trans-unit>
        <trans-unit id="44ec6fd4ae24572fecbac6493706cf9394cd70f3" translate="yes" xml:space="preserve">
          <source>Request is issued from a asset reference.</source>
          <target state="translated">リクエストは資産参照から発行されます。</target>
        </trans-unit>
        <trans-unit id="cb2683236e52396f3df8a92dd39e65878c3cd5e1" translate="yes" xml:space="preserve">
          <source>Request is issued from a normal script tag without module system.</source>
          <target state="translated">モジュールシステムを持たない通常のスクリプトタグからリクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="2391ee9ae9594615dc6c8d1e3b2b99e3deacb838" translate="yes" xml:space="preserve">
          <source>Request is issued from a sass stylesheet reference.</source>
          <target state="translated">リクエストはsassスタイルシート参照から発行されます。</target>
        </trans-unit>
        <trans-unit id="6c351a47e1050eb546221d3873c2d57c428b8fda" translate="yes" xml:space="preserve">
          <source>Request is issued from a stylesheet reference.</source>
          <target state="translated">スタイルシート参照からリクエストが発行されます。</target>
        </trans-unit>
        <trans-unit id="20f9634608216ccd57fa218280ce513d3bfef3da" translate="yes" xml:space="preserve">
          <source>Request is issued from typescript that is interested in type declarations.</source>
          <target state="translated">型宣言に興味のあるtypescriptからリクエストを発行します。</target>
        </trans-unit>
        <trans-unit id="7d215bfefc3b3a7abea4550cb0a623d9fe3adff7" translate="yes" xml:space="preserve">
          <source>Requests to packages e.g. &lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; are still supported.</source>
          <target state="translated">&lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; などのパッケージへのリクエストは引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="6010f42941314bd2e16a40b0ac73a734cd7cb6c7" translate="yes" xml:space="preserve">
          <source>Require a fallback for non-worker supporting environments</source>
          <target state="translated">非ワーカーサポート環境のためのフォールバックを必要とする</target>
        </trans-unit>
        <trans-unit id="6c9edaf3770164ff37deb0cb23c37bafead4971a" translate="yes" xml:space="preserve">
          <source>RequireContextPlugin</source>
          <target state="translated">RequireContextPlugin</target>
        </trans-unit>
        <trans-unit id="43238921b568ca4ba900a9a52844c2058db99e54" translate="yes" xml:space="preserve">
          <source>RequireEnsurePlugin</source>
          <target state="translated">RequireEnsurePlugin</target>
        </trans-unit>
        <trans-unit id="a30b8d4cc6e89bbfda1b96a1316ab0c6ac1f872f" translate="yes" xml:space="preserve">
          <source>RequireIncludePlugin</source>
          <target state="translated">RequireIncludePlugin</target>
        </trans-unit>
        <trans-unit id="bd3796ebdfb294f6f69fa91710a470fe5978b2e8" translate="yes" xml:space="preserve">
          <source>RequireJsStuffPlugin</source>
          <target state="translated">RequireJsStuffPlugin</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="ac7f958cc028becfb4b2bec9c474bd2d5e8b6095" translate="yes" xml:space="preserve">
          <source>Resolve</source>
          <target state="translated">Resolve</target>
        </trans-unit>
        <trans-unit id="3432aff5199021e62327737e81355e2fee54208f" translate="yes" xml:space="preserve">
          <source>Resolve Options</source>
          <target state="translated">オプションの解決</target>
        </trans-unit>
        <trans-unit id="f4143195790e7b1a6c2f12714b89024432e0904e" translate="yes" xml:space="preserve">
          <source>Resolve a request like a require expression.</source>
          <target state="translated">require式のようなリクエストを解決します。</target>
        </trans-unit>
        <trans-unit id="4117aecbdcd5c2a14a49abe3ae181356d5211b71" translate="yes" xml:space="preserve">
          <source>Resolve unresolved URLs using an alias</source>
          <target state="translated">エイリアスを使用して未解決の URL を解決する</target>
        </trans-unit>
        <trans-unit id="47ecade1ed39b604db07f2373e6d2388db12b9e7" translate="yes" xml:space="preserve">
          <source>Resolvers</source>
          <target state="translated">Resolvers</target>
        </trans-unit>
        <trans-unit id="0a04022c4e0e7bb30e09b8de97fac5544e03cab9" translate="yes" xml:space="preserve">
          <source>Resolvers are created using the &lt;code&gt;enhanced-resolve&lt;/code&gt; package. The &lt;code&gt;Resolver&lt;/code&gt; class extends the &lt;code&gt;tapable&lt;/code&gt; class and uses &lt;code&gt;tapable&lt;/code&gt; to provide a few hooks. The &lt;code&gt;enhanced-resolve&lt;/code&gt; package can be used directly to create new resolvers, however any &lt;a href=&quot;node#compiler-instance&quot;&gt;&lt;code&gt;compiler&lt;/code&gt; instance&lt;/a&gt; has a few resolver instances that can be tapped into.</source>
          <target state="translated">リゾルバーは、 &lt;code&gt;enhanced-resolve&lt;/code&gt; パッケージを使用して作成されます。 &lt;code&gt;Resolver&lt;/code&gt; クラスは、拡張 &lt;code&gt;tapable&lt;/code&gt; クラスを使用すると &lt;code&gt;tapable&lt;/code&gt; いくつかのフックを提供します。 &lt;code&gt;enhanced-resolve&lt;/code&gt; パッケージには、あらゆるしかし、新しいリゾルバを作成するために直接使用することができる&lt;a href=&quot;node#compiler-instance&quot;&gt; &lt;code&gt;compiler&lt;/code&gt; インスタンスは&lt;/a&gt;にタップすることができ、いくつかのリゾルバインスタンスを持っています。</target>
        </trans-unit>
        <trans-unit id="4827063ce86796eddb67161665ffc39e58f2551c" translate="yes" xml:space="preserve">
          <source>Resolves the given request to a module, applies all configured loaders and calls back with the generated source, the sourceMap and the module instance (usually an instance of &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;&lt;code&gt;NormalModule&lt;/code&gt;&lt;/a&gt;). Use this function if you need to know the source code of another module to generate the result.</source>
          <target state="translated">指定されたリクエストをモジュールに解決し、構成されたすべてのローダーを適用し、生成されたソース、sourceMap、およびモジュールインスタンス（通常は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt; &lt;code&gt;NormalModule&lt;/code&gt; の&lt;/a&gt;インスタンス）を使用してコールバックします。結果を生成するために別のモジュールのソースコードを知る必要がある場合は、この関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0496ee3fee946976397fbaaafbfe520ed9cd2a64" translate="yes" xml:space="preserve">
          <source>Resolving</source>
          <target state="translated">Resolving</target>
        </trans-unit>
        <trans-unit id="03526a520b1e29f683904d55de8cd70d13d05e91" translate="yes" xml:space="preserve">
          <source>Resolving &lt;code&gt;import&lt;/code&gt; at-rules</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; atルールの解決</target>
        </trans-unit>
        <trans-unit id="e3cfe8adaeb34b5dae64dfd3df0c12c06cc6dde4" translate="yes" xml:space="preserve">
          <source>Resolving Loaders</source>
          <target state="translated">ローダの解決</target>
        </trans-unit>
        <trans-unit id="c8fc3308d20a53544e752db6e62fce4448dae15d" translate="yes" xml:space="preserve">
          <source>Resolving can be configured on module level. See all available options on &lt;a href=&quot;resolve#resolve&quot;&gt;resolve configuration page&lt;/a&gt;. All applied resolve options get deeply merged with higher level &lt;a href=&quot;resolve#resolve&quot;&gt;resolve&lt;/a&gt;.</source>
          <target state="translated">解決はモジュールレベルで構成できます。&lt;a href=&quot;resolve#resolve&quot;&gt;構成の解決ページで&lt;/a&gt;使用可能なすべてのオプションを参照してください。適用されたすべての解決オプションは、より高いレベルの&lt;a href=&quot;resolve#resolve&quot;&gt;解決&lt;/a&gt;と深く統合されます。</target>
        </trans-unit>
        <trans-unit id="c2f0ec17c944bb807b10be302d71736723bc4c6f" translate="yes" xml:space="preserve">
          <source>Resolving rules in webpack</source>
          <target state="translated">webpack でルールを解決する</target>
        </trans-unit>
        <trans-unit id="7ecbb921622abc017c4c2b33f2ec863736468500" translate="yes" xml:space="preserve">
          <source>Resource assets</source>
          <target state="translated">資源資産</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="023439148eb14eee98cc632e2b3413bd7104e53f" translate="yes" xml:space="preserve">
          <source>Restore chunk information from records.</source>
          <target state="translated">レコードからチャンク情報を復元します。</target>
        </trans-unit>
        <trans-unit id="1a6c030e3332163797f8d8b087994cef1d3091a1" translate="yes" xml:space="preserve">
          <source>Restore module information from records.</source>
          <target state="translated">レコードからモジュール情報を復元します。</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="577482eb2da290972a209ca84bc32745dcf1b0f9" translate="yes" xml:space="preserve">
          <source>Result when run with &lt;code&gt;NAMESPACE=dev&lt;/code&gt; env variable:</source>
          <target state="translated">&lt;code&gt;NAMESPACE=dev&lt;/code&gt; 環境変数を使用して実行した場合の結果：</target>
        </trans-unit>
        <trans-unit id="c2af9a593316bd316e52266427663ed4abdca32b" translate="yes" xml:space="preserve">
          <source>Result when run with &lt;code&gt;NAMESPACE=prod&lt;/code&gt; env variable:</source>
          <target state="translated">&lt;code&gt;NAMESPACE=prod&lt;/code&gt; env変数を使用して実行した場合の結果：</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="a6e4a9f3687ba5f929d9c85fef2366beb0a84bca" translate="yes" xml:space="preserve">
          <source>Resulting environment</source>
          <target state="translated">結果の環境</target>
        </trans-unit>
        <trans-unit id="6feaf1b4c25f3b349afc2efaa914a5d94e7222b9" translate="yes" xml:space="preserve">
          <source>Retain application state which is lost during a full reload.</source>
          <target state="translated">フルリロード中に失われたアプリケーションの状態を保持します。</target>
        </trans-unit>
        <trans-unit id="2dbf5cf165d9e17cc3cfaabca2751bab59dfc4e0" translate="yes" xml:space="preserve">
          <source>Retrieve the current status of the hot module replacement process.</source>
          <target state="translated">ホットモジュール交換プロセスの現在の状態を取得します。</target>
        </trans-unit>
        <trans-unit id="0e4d3f812e26361f76a5608d2dfeae4f8821cd30" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;false&lt;/code&gt; to produce a 404 error for the request.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; を返すと、リクエストに対して404エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="0447e8646ff1ce85b535874c579dc5619b75ff5e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to continue processing the request with proxy.</source>
          <target state="translated">プロキシを使用してリクエストの処理を続行するには、 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="adcb9afc838142060775af07b2bc42dd3fc0ed71" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; to optimize the image, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">画像を最適化するには &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="729789ff7741b8f4ac5d5c9840807831eb2784ac" translate="yes" xml:space="preserve">
          <source>Return Object Properties</source>
          <target state="translated">オブジェクトのプロパティを返します。</target>
        </trans-unit>
        <trans-unit id="d2bb2d59b83c91698e1f179bf315584db4cf8a18" translate="yes" xml:space="preserve">
          <source>Return a path to serve from, instead of continuing to proxy the request.</source>
          <target state="translated">リクエストをプロキシし続けるのではなく、サーブするパスを返します。</target>
        </trans-unit>
        <trans-unit id="3b619e134e1e3b42bf929ca7457d10d3175902d1" translate="yes" xml:space="preserve">
          <source>Returning a &lt;code&gt;Promise&lt;/code&gt; only works when using webpack via CLI. &lt;a href=&quot;../api/node#webpack&quot;&gt;&lt;code&gt;webpack()&lt;/code&gt;&lt;/a&gt; expects an object.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; の返却は、CLI経由でwebpackを使用している場合にのみ機能します。&lt;a href=&quot;../api/node#webpack&quot;&gt; &lt;code&gt;webpack()&lt;/code&gt; &lt;/a&gt;はオブジェクトを期待しています。</target>
        </trans-unit>
        <trans-unit id="56348477fc96c31a09a1ee4040b1c193e0ee2163" translate="yes" xml:space="preserve">
          <source>Returns Stats object for the current compilation.</source>
          <target state="translated">現在のコンパイルの Stats オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6daf6530c152e098b9400577d9405899c652f052" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Promise&lt;/code&gt;, which resolves with an &lt;code&gt;Object&lt;/code&gt; containing:</source>
          <target state="translated">次を含む &lt;code&gt;Object&lt;/code&gt; で解決する &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="74604c341dd520194f23eabd2da656c294f75fbc" translate="yes" xml:space="preserve">
          <source>Returns a formatted string of the compilation information (similar to &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; output).</source>
          <target state="translated">コンパイル情報のフォーマットされた文字列を返します（&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;出力と同様）。</target>
        </trans-unit>
        <trans-unit id="4a719dbe53c2e86e1066f3929996605c6a077a86" translate="yes" xml:space="preserve">
          <source>Returns array of all assets under the current compilation.</source>
          <target state="translated">現在のコンパイル中のすべてのアセットの配列を返します。</target>
        </trans-unit>
        <trans-unit id="92e2c5131a5350cd343ea668874739fbeb829662" translate="yes" xml:space="preserve">
          <source>Returns compilation information as a JSON object. &lt;code&gt;options&lt;/code&gt; can be either a string (a preset) or an object for more granular control:</source>
          <target state="translated">コンパイル情報をJSONオブジェクトとして返します。 &lt;code&gt;options&lt;/code&gt; は、文字列（プリセット）またはより詳細な制御のためのオブジェクトのいずれかです。</target>
        </trans-unit>
        <trans-unit id="926f61b289e6bfeb4dd9a0c124fb1cf1c71df012" translate="yes" xml:space="preserve">
          <source>Returns interpolated path and asset information.</source>
          <target state="translated">補間されたパスとアセットの情報を返します。</target>
        </trans-unit>
        <trans-unit id="a5f55b91e171f97bc16dec40f715d6868ac0cfb6" translate="yes" xml:space="preserve">
          <source>Returns the absolute &lt;code&gt;file:&lt;/code&gt; URL of the module.</source>
          <target state="translated">絶対 &lt;code&gt;file:&lt;/code&gt; 返します：モジュールのURL。</target>
        </trans-unit>
        <trans-unit id="0560aef0471e79c3f5465c7cc5f1dc615dd56526" translate="yes" xml:space="preserve">
          <source>Returns the interpolated path.</source>
          <target state="translated">補間されたパスを返します。</target>
        </trans-unit>
        <trans-unit id="4208043c3833bb406ab1a8759edd052044068e9c" translate="yes" xml:space="preserve">
          <source>Returns the reference to the dependency from a given module.</source>
          <target state="translated">指定したモジュールからの依存関係への参照を返します。</target>
        </trans-unit>
        <trans-unit id="0bbb2fc8b563942786024066c32f70fba001d676" translate="yes" xml:space="preserve">
          <source>Returns the webpack version.</source>
          <target state="translated">webpackのバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="5ed6c8d9b592e3818013d15eb20c2a8448226eda" translate="yes" xml:space="preserve">
          <source>Reuses a single &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; element, instead of adding/removing individual elements for each required module.</source>
          <target state="translated">必要なモジュールごとに個別の要素を追加/削除する代わりに、単一の &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 要素を再利用します。</target>
        </trans-unit>
        <trans-unit id="d210935e26b0bb103a3faa0d965a18c756f8cbfd" translate="yes" xml:space="preserve">
          <source>Reward modern browser users script</source>
          <target state="translated">現代のブラウザユーザーに報酬を与えるスクリプト</target>
        </trans-unit>
        <trans-unit id="e96857c58f716104caead648ee6aa61ab8e41cdc" translate="yes" xml:space="preserve">
          <source>Root</source>
          <target state="translated">Root</target>
        </trans-unit>
        <trans-unit id="39b01d31286bea2204885e06646cdafb357d538b" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;mtime&lt;/code&gt; by this number of milliseconds both for &lt;code&gt;stats&lt;/code&gt; and &lt;code&gt;dep&lt;/code&gt; before passing those params to the comparing function</source>
          <target state="translated">ラウンド &lt;code&gt;mtime&lt;/code&gt; の両方のためにこのミリ秒数で &lt;code&gt;stats&lt;/code&gt; と &lt;code&gt;dep&lt;/code&gt; 比較機能にこれらのparamsを渡す前に、</target>
        </trans-unit>
        <trans-unit id="78e1790e29a5541b6d02348fc3f45f18445709f4" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="translated">Rule</target>
        </trans-unit>
        <trans-unit id="e2d20b6772074cf8de6f88e6a258855345fac21b" translate="yes" xml:space="preserve">
          <source>Rule Conditions</source>
          <target state="translated">ルール条件</target>
        </trans-unit>
        <trans-unit id="a6328ec24079df0f6c1e7d850b422bd7d296967e" translate="yes" xml:space="preserve">
          <source>Rule results</source>
          <target state="translated">ルール結果</target>
        </trans-unit>
        <trans-unit id="b425d5f98c8e7887f024f258ef9ba80eebb288ec" translate="yes" xml:space="preserve">
          <source>Rule results are used only when the Rule condition matches.</source>
          <target state="translated">ルールの結果は、ルール条件が一致した場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="24ffaa84e3b73d917eb7bd902d377fe6df94ed89" translate="yes" xml:space="preserve">
          <source>Rule.enforce</source>
          <target state="translated">Rule.enforce</target>
        </trans-unit>
        <trans-unit id="73586767a5cffaa218dcaff111d74b6ed4165beb" translate="yes" xml:space="preserve">
          <source>Rule.exclude</source>
          <target state="translated">Rule.exclude</target>
        </trans-unit>
        <trans-unit id="0cca4d081709c5839763ff49059502f3e7b79184" translate="yes" xml:space="preserve">
          <source>Rule.generator.dataUrl</source>
          <target state="translated">Rule.generator.dataUrl</target>
        </trans-unit>
        <trans-unit id="35466691a754fa0dfc222f095952019f82667b3f" translate="yes" xml:space="preserve">
          <source>Rule.generator.filename</source>
          <target state="translated">Rule.generator.filename</target>
        </trans-unit>
        <trans-unit id="93c486eeb37fd7ff3941f797699b1d4a54750f4f" translate="yes" xml:space="preserve">
          <source>Rule.include</source>
          <target state="translated">Rule.include</target>
        </trans-unit>
        <trans-unit id="4fe4e6b0471c3b4ef44dd94ec56b1026d9ad262c" translate="yes" xml:space="preserve">
          <source>Rule.issuer</source>
          <target state="translated">Rule.issuer</target>
        </trans-unit>
        <trans-unit id="12e311d24954ff2b485dfa03eeeb22bbc1fc448d" translate="yes" xml:space="preserve">
          <source>Rule.loader</source>
          <target state="translated">Rule.loader</target>
        </trans-unit>
        <trans-unit id="93c5ed6b2b726b4301a2c0e8dba75a8f762cc517" translate="yes" xml:space="preserve">
          <source>Rule.loaders</source>
          <target state="translated">Rule.loaders</target>
        </trans-unit>
        <trans-unit id="6460aa61adce34b02c861b624236aea9edb37adc" translate="yes" xml:space="preserve">
          <source>Rule.mimetype</source>
          <target state="translated">Rule.mimetype</target>
        </trans-unit>
        <trans-unit id="8d82e3fe7db79a38063be185a78a1787b48434cc" translate="yes" xml:space="preserve">
          <source>Rule.oneOf</source>
          <target state="translated">Rule.oneOf</target>
        </trans-unit>
        <trans-unit id="a2073776e20d522c196308af0d11686e173d3cac" translate="yes" xml:space="preserve">
          <source>Rule.options</source>
          <target state="translated">Rule.options</target>
        </trans-unit>
        <trans-unit id="7712fe61ac58ff25076907afa23c57fe2858ec68" translate="yes" xml:space="preserve">
          <source>Rule.parser</source>
          <target state="translated">Rule.parser</target>
        </trans-unit>
        <trans-unit id="6a3c8116831e83365233a54ff673bbe62dbeb169" translate="yes" xml:space="preserve">
          <source>Rule.parser.dataUrlCondition</source>
          <target state="translated">Rule.parser.dataUrlCondition</target>
        </trans-unit>
        <trans-unit id="86973dcbb4d35aae63a4eb7ed15d0e5aa2a688f8" translate="yes" xml:space="preserve">
          <source>Rule.parser.parse</source>
          <target state="translated">Rule.parser.parse</target>
        </trans-unit>
        <trans-unit id="4206e0bd278c5485bb09773f1889014ba566639c" translate="yes" xml:space="preserve">
          <source>Rule.resolve</source>
          <target state="translated">Rule.resolve</target>
        </trans-unit>
        <trans-unit id="6ad3eb959ec26fbac17179d5a9a5d1485a161a58" translate="yes" xml:space="preserve">
          <source>Rule.resource</source>
          <target state="translated">Rule.resource</target>
        </trans-unit>
        <trans-unit id="6be5a7bec6e23d9ee0a8d042cd9bb03000f5c259" translate="yes" xml:space="preserve">
          <source>Rule.resourceQuery</source>
          <target state="translated">Rule.resourceQuery</target>
        </trans-unit>
        <trans-unit id="f13b889b4166c1ccec685b85f460df06f0401346" translate="yes" xml:space="preserve">
          <source>Rule.rules</source>
          <target state="translated">Rule.rules</target>
        </trans-unit>
        <trans-unit id="1ed77fc86a78da80e27b4a7df0b906420a85b328" translate="yes" xml:space="preserve">
          <source>Rule.sideEffects</source>
          <target state="translated">Rule.sideEffects</target>
        </trans-unit>
        <trans-unit id="f5a8c1e6b4789569d31a590ea24a49a7fdf74e8c" translate="yes" xml:space="preserve">
          <source>Rule.test</source>
          <target state="translated">Rule.test</target>
        </trans-unit>
        <trans-unit id="4c9127fb0f0e958cc7ba3919d41d6ff1d6986373" translate="yes" xml:space="preserve">
          <source>Rule.type</source>
          <target state="translated">Rule.type</target>
        </trans-unit>
        <trans-unit id="ebb25b320bb483820b96caf30356b652ae859834" translate="yes" xml:space="preserve">
          <source>Rule.use</source>
          <target state="translated">Rule.use</target>
        </trans-unit>
        <trans-unit id="b1b392607deaf29a7e81453e069b7c07a32a6b18" translate="yes" xml:space="preserve">
          <source>Run</source>
          <target state="translated">Run</target>
        </trans-unit>
        <trans-unit id="a4beada2c3e7bea1ecb31b03bcff67579986be59" translate="yes" xml:space="preserve">
          <source>Run an &lt;code&gt;npm run build&lt;/code&gt;, it should compile to something like this:</source>
          <target state="translated">実行 &lt;code&gt;npm run build&lt;/code&gt; 、それはこのような何かをコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="c9169639ecf2345556f60f9fcf0ebcb38d2b6389" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;webpack-dev-server&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4da09cb4ffc22e80dea2e1d9b18a1c41cdb6504" translate="yes" xml:space="preserve">
          <source>Run the webpack Dev Server</source>
          <target state="translated">webpack Dev Serverを実行する</target>
        </trans-unit>
        <trans-unit id="07ee70047f6985fa29dd76324dbbf8d41b71e249" translate="yes" xml:space="preserve">
          <source>Run webpack (default command, can be omitted).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e072b50fd7247fa89df5a4e52fe472ac119184" translate="yes" xml:space="preserve">
          <source>Run webpack and watch for files changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c615aafa765a1ef5bd603e8ab85525c53f3f7e6" translate="yes" xml:space="preserve">
          <source>Run webpack with &lt;code&gt;ProfilingPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ProfilingPlugin&lt;/code&gt; で webpackを実行します。</target>
        </trans-unit>
        <trans-unit id="4223bf04315af633cdf56c0cb6b2371651e75eca" translate="yes" xml:space="preserve">
          <source>Run when a module build has failed.</source>
          <target state="translated">モジュールのビルドに失敗した場合に実行します。</target>
        </trans-unit>
        <trans-unit id="74b15e59c3f98a89ecdc64d02cfef8e614ad6cf4" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;DEBUG=false webpack&lt;/code&gt; yields:</source>
          <target state="translated">&lt;code&gt;DEBUG=false webpack&lt;/code&gt; を実行すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="36eba79702d998367df8aa0f5fede84f46a9671e" translate="yes" xml:space="preserve">
          <source>Running a scaffold</source>
          <target state="translated">足場を動かす</target>
        </trans-unit>
        <trans-unit id="62cfe94a89c2f8f8baf2bb5ba03598065c5affc6" translate="yes" xml:space="preserve">
          <source>Running a scaffold from npm</source>
          <target state="translated">npmから足場を動かす</target>
        </trans-unit>
        <trans-unit id="d47cd3a1b0865b976940b075435f5b4c76fced8d" translate="yes" xml:space="preserve">
          <source>Running a scaffold locally</source>
          <target state="translated">足場を現地で走らせる</target>
        </trans-unit>
        <trans-unit id="54d448bb65599d3c2d4d28c7ff4e481e6cb7233e" translate="yes" xml:space="preserve">
          <source>Running another build, we would expect only our &lt;code&gt;main&lt;/code&gt; bundle's hash to change, however...</source>
          <target state="translated">別のビルドを実行すると、 &lt;code&gt;main&lt;/code&gt; バンドルのハッシュのみが変更されると予想されますが、...</target>
        </trans-unit>
        <trans-unit id="e46f1249c2bce48b0c72e84ec66adb21c8a07be8" translate="yes" xml:space="preserve">
          <source>Running our build script, &lt;code&gt;npm run build&lt;/code&gt;, with this configuration should produce the following output:</source>
          <target state="translated">この構成でビルドスクリプト &lt;code&gt;npm run build&lt;/code&gt; を実行すると、次の出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="48dd916c96025b1e57f8d56813d8611d15c051e4" translate="yes" xml:space="preserve">
          <source>Running the Server</source>
          <target state="translated">サーバーの実行</target>
        </trans-unit>
        <trans-unit id="db0631586335dd1b31b5cd7052a80f954e3cd573" translate="yes" xml:space="preserve">
          <source>Running webpack with above configuration will output into &lt;code&gt;./dist&lt;/code&gt; as we did not specify different output path. &lt;code&gt;./dist&lt;/code&gt; directory will now contain four files:</source>
          <target state="translated">上記の構成でwebpackを実行すると、別の出力パスを指定しなかったため、。 &lt;code&gt;./dist&lt;/code&gt; 出力されます。 &lt;code&gt;./dist&lt;/code&gt; ディレクトリには4つのファイルが含まれるようになります。</target>
        </trans-unit>
        <trans-unit id="41d62fcf289c89e8206a10eba8b3811f5b803bea" translate="yes" xml:space="preserve">
          <source>Running webpack with following &lt;code&gt;splitChunks&lt;/code&gt; configuration would also output a chunk of the group common with next name: &lt;code&gt;commons-main-lodash.js.e7519d2bb8777058fa27.js&lt;/code&gt; (hash given as an example of real world output).</source>
          <target state="translated">次の &lt;code&gt;splitChunks&lt;/code&gt; 構成でwebpackを実行すると、次の名前で共通のグループのチャンクも出力されます： &lt;code&gt;commons-main-lodash.js.e7519d2bb8777058fa27.js&lt;/code&gt; （実際の出力の例としてハッシュが示されています）。</target>
        </trans-unit>
        <trans-unit id="4d18616653bcb10fc6fbe1539f6e9a8f5ffcfb19" translate="yes" xml:space="preserve">
          <source>Runs a given &lt;code&gt;callback&lt;/code&gt; function when the given module was built.</source>
          <target state="translated">指定されたモジュールがビルドされたときに、指定された &lt;code&gt;callback&lt;/code&gt; 関数を実行します。</target>
        </trans-unit>
        <trans-unit id="d4fccde4efdddded5b30b161c0436cbbc5c0cfd0" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;a href=&quot;contextmodulefactory-hooks&quot;&gt;ContextModuleFactory&lt;/a&gt; is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ae1afc2e3bb7d11b4e8528dc9983432837bc12" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;code&gt;ContextModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;ContextModuleFactory&lt;/code&gt; の作成後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="8ca58b434c15088e58f38aa7f532bc972a311118" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a &lt;code&gt;NormalModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;NormalModuleFactory&lt;/code&gt; の作成後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="7c500584678e2cd47e693b1d2eed1eedd098b1c2" translate="yes" xml:space="preserve">
          <source>Runs a plugin after a compilation has been created.</source>
          <target state="translated">コンパイルが作成された後にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="397728565e08bf27344855050d471e79cad556c2" translate="yes" xml:space="preserve">
          <source>Runs a plugin after setting up initial set of plugins.</source>
          <target state="translated">プラグインの初期設定を行った後、プラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="993a446b7721cdab57479b0e3635714e3dbbb5ba" translate="yes" xml:space="preserve">
          <source>Runs a plugin before the environment is prepared.</source>
          <target state="translated">環境が整う前にプラグインを実行します。</target>
        </trans-unit>
        <trans-unit id="15ce3ca884317bc6dab4f37e69a27a020bb27b78" translate="yes" xml:space="preserve">
          <source>Runs the following loaders in a worker pool.</source>
          <target state="translated">ワーカープールで以下のローダーを実行します。</target>
        </trans-unit>
        <trans-unit id="c4740e4ca28c9c8d6a8447aef5c33425e6de4802" translate="yes" xml:space="preserve">
          <source>Runtime</source>
          <target state="translated">Runtime</target>
        </trans-unit>
        <trans-unit id="2b73ad79bcc0cbd015a6c3ce83f74940d57410ef" translate="yes" xml:space="preserve">
          <source>Runtime Logger API</source>
          <target state="translated">ランタイム ロガー API</target>
        </trans-unit>
        <trans-unit id="3df35deb21c8cc6d3aca3dce8e7f9ce284fd89e8" translate="yes" xml:space="preserve">
          <source>Runtime logger API is only intended to be used as a development tool, it is not intended to be included in &lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;production mode&lt;/a&gt;.</source>
          <target state="translated">ランタイムロガーAPIは、開発ツールとしてのみ使用することを目的としており、&lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;本番モードに&lt;/a&gt;含めることを目的としていません。</target>
        </trans-unit>
        <trans-unit id="95e8e62c7b35e672102d34f26b3e6e726562969b" translate="yes" xml:space="preserve">
          <source>Runtime values via &lt;code&gt;runtimeValue&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;runtimeValue&lt;/code&gt; を介したランタイム値</target>
        </trans-unit>
        <trans-unit id="50fce6d02899850101b1865a947b45128c5350eb" translate="yes" xml:space="preserve">
          <source>SVG</source>
          <target state="translated">SVG</target>
        </trans-unit>
        <trans-unit id="1e5443f19149eeed454e6a8973bab1bc1d8b5d2a" translate="yes" xml:space="preserve">
          <source>SVG can be compressed into a more compact output, avoiding &lt;code&gt;base64&lt;/code&gt;. You can read about it more &lt;a href=&quot;https://css-tricks.com/probably-dont-base64-svg/&quot;&gt;here&lt;/a&gt;. You can do it using &lt;a href=&quot;https://github.com/tigt/mini-svg-data-uri&quot;&gt;mini-svg-data-uri&lt;/a&gt; package.</source>
          <target state="translated">SVGは、 &lt;code&gt;base64&lt;/code&gt; を回避して、よりコンパクトな出力に圧縮できます。あなたはそれについてもっと&lt;a href=&quot;https://css-tricks.com/probably-dont-base64-svg/&quot;&gt;ここで&lt;/a&gt;読むことができます。&lt;a href=&quot;https://github.com/tigt/mini-svg-data-uri&quot;&gt;mini-svg-data-uri&lt;/a&gt;パッケージを使用してそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="6d0e2a1c1809b57e59a8137d296e845f8d7b8d0c" translate="yes" xml:space="preserve">
          <source>Sadly there is no &lt;code&gt;node-js&lt;/code&gt; condition for Node.js as runtime. This would simplify creating exceptions for Node.js.</source>
          <target state="translated">残念ながら、実行時としてのNode.jsの &lt;code&gt;node-js&lt;/code&gt; 条件はありません。これにより、Node.jsの例外の作成が簡単になります。</target>
        </trans-unit>
        <trans-unit id="760e6deb986333d493e4ea72f11abc6783cf819e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;'deterministic'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'deterministic'&lt;/code&gt; 同じ</target>
        </trans-unit>
        <trans-unit id="56fe53a9039acdd0fa1e733c4e2e68417b5b8673" translate="yes" xml:space="preserve">
          <source>Same as above, but with a customizable number of emojis</source>
          <target state="translated">上記と同じですが、カスタマイズ可能な数の絵文字を使用します。</target>
        </trans-unit>
        <trans-unit id="c65cbe4ac130d64784aadc67ad7bcc3c4df11faf" translate="yes" xml:space="preserve">
          <source>Same, but deprecated</source>
          <target state="translated">同じですが、非推奨です。</target>
        </trans-unit>
        <trans-unit id="b6eeeb3abd2a7bc179a6b6d5c56488b5f8c903a7" translate="yes" xml:space="preserve">
          <source>Sass</source>
          <target state="translated">Sass</target>
        </trans-unit>
        <trans-unit id="c73806b360250b5461e84c22b01e85d08e039783" translate="yes" xml:space="preserve">
          <source>Save valuable development time by only updating what's changed.</source>
          <target state="translated">変更された内容を更新するだけで、貴重な開発時間を節約できます。</target>
        </trans-unit>
        <trans-unit id="32de35db37c33913cc7d051c2b6e5dde7e069a2f" translate="yes" xml:space="preserve">
          <source>Saves and restores module and chunk ids from records.</source>
          <target state="translated">レコードからモジュールとチャンク ID を保存して復元します。</target>
        </trans-unit>
        <trans-unit id="3aacb738658584a773378169bb21a20b60ca2bb3" translate="yes" xml:space="preserve">
          <source>Saving in WebStorm</source>
          <target state="translated">WebStormでの保存</target>
        </trans-unit>
        <trans-unit id="ede302b5bf410f699067da258c658766d6178ded" translate="yes" xml:space="preserve">
          <source>Say you have a config file &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; and a special version for production in &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</source>
          <target state="translated">設定ファイル &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; と、 &lt;code&gt;some/path/config.production.module.js&lt;/code&gt; に本番用の特別なバージョンがあるとします</target>
        </trans-unit>
        <trans-unit id="8e672d15214b20132a8f5db4786b9223653a64d8" translate="yes" xml:space="preserve">
          <source>Say you have a configuration file &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; and a special version for production in &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</source>
          <target state="translated">構成ファイル &lt;code&gt;some/path/config.development.module.js&lt;/code&gt; と本番用の特別なバージョンが &lt;code&gt;some/path/config.production.module.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc0c01ac9bc4fb92c646eb47610077862dcf8269" translate="yes" xml:space="preserve">
          <source>Say you want a configuration with specific values for different build targets.</source>
          <target state="translated">異なるビルドターゲットに対して特定の値を設定したいとします。</target>
        </trans-unit>
        <trans-unit id="95118618360eaeae1d74b75f8ea5a74b0c4ed657" translate="yes" xml:space="preserve">
          <source>Scaffold a loader repository</source>
          <target state="translated">ローダーのリポジトリを足場にする</target>
        </trans-unit>
        <trans-unit id="0b65efe12fad65eb4df1f66de2dc179b8e2adce4" translate="yes" xml:space="preserve">
          <source>Scaffold a loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aaa32752e044abc58264d57592533431599875b" translate="yes" xml:space="preserve">
          <source>Scaffold a plugin repository</source>
          <target state="translated">プラグインリポジトリを足場にする</target>
        </trans-unit>
        <trans-unit id="48e60f06728a5b44a99da1f86b90cd459c7e0801" translate="yes" xml:space="preserve">
          <source>Scaffold a plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c5f3f6b5f85b10ef97ae46467458dd4f624965" translate="yes" xml:space="preserve">
          <source>Scaffolding</source>
          <target state="translated">Scaffolding</target>
        </trans-unit>
        <trans-unit id="2dd4a83d012acd714fbd600cfb9847611783fea3" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
          <target state="translated">Scenarios</target>
        </trans-unit>
        <trans-unit id="e91f7eacbf166e117424593ae1ded03e4599622d" translate="yes" xml:space="preserve">
          <source>Scope hoisting fallback trigger (since webpack 3.0.0)</source>
          <target state="translated">スコープ吊り上げフォールバックトリガー(webpack 3.0.0以降</target>
        </trans-unit>
        <trans-unit id="f6d1fd21e54c6955d5974d21955e39f3c73e8ce2" translate="yes" xml:space="preserve">
          <source>Scope hoisting is specifically a feature made possible by ECMAScript Module syntax. Because of this webpack may fallback to normal bundling based on what kind of modules you are using, and &lt;a href=&quot;https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5&quot;&gt;other conditions&lt;/a&gt;.</source>
          <target state="translated">スコープの巻き上げは、特にECMAScriptモジュールの構文によって可能になった機能です。このため、使用しているモジュールの種類や&lt;a href=&quot;https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5&quot;&gt;その他の条件に&lt;/a&gt;基づいて、通常のバンドルにフォールバックする場合があります。</target>
        </trans-unit>
        <trans-unit id="0cfad97c43a17797aefc167eac15bd9f1a110206" translate="yes" xml:space="preserve">
          <source>Scoped Mode</source>
          <target state="translated">スコープモード</target>
        </trans-unit>
        <trans-unit id="01a125b95ea399abf29e5f5dc66028b69520619e" translate="yes" xml:space="preserve">
          <source>Seals the compilation.</source>
          <target state="translated">コンパイルを封印します。</target>
        </trans-unit>
        <trans-unit id="0296c4f7165ae5d911d93aa8c65a69d0ac26d2ac" translate="yes" xml:space="preserve">
          <source>Second, if a loader delivers a result in the &lt;code&gt;pitch&lt;/code&gt; method the process turns around and skips the remaining loaders. In our example above, if the &lt;code&gt;b-loader&lt;/code&gt;s &lt;code&gt;pitch&lt;/code&gt; method returned something:</source>
          <target state="translated">第二に、ローダーが &lt;code&gt;pitch&lt;/code&gt; メソッドで結果を提供する場合、プロセスは向きを変え、残りのローダーをスキップします。上記の例で、 &lt;code&gt;b-loader&lt;/code&gt; の &lt;code&gt;pitch&lt;/code&gt; メソッドが何かを返した場合：</target>
        </trans-unit>
        <trans-unit id="ce51be73ebb99381523ee62a808df741010e35c8" translate="yes" xml:space="preserve">
          <source>Second, if a loader delivers a result in the &lt;code&gt;pitch&lt;/code&gt; method, the process turns around and skips the remaining loaders. In our example above, if the &lt;code&gt;b-loader&lt;/code&gt;s &lt;code&gt;pitch&lt;/code&gt; method returned something:</source>
          <target state="translated">第二に、ローダーが &lt;code&gt;pitch&lt;/code&gt; 法で結果を出す場合、プロセスは向きを変え、残りのローダーをスキップします。上記の例では、 &lt;code&gt;b-loader&lt;/code&gt; の &lt;code&gt;pitch&lt;/code&gt; メソッドが何かを返した場合：</target>
        </trans-unit>
        <trans-unit id="32ba0fcce3464103683465320a9db31da75af1c9" translate="yes" xml:space="preserve">
          <source>Secondly, you may override the base download URL for your worker script via the &lt;a href=&quot;#publicpath&quot;&gt;&lt;code&gt;publicPath&lt;/code&gt;&lt;/a&gt; option</source>
          <target state="translated">次に、&lt;a href=&quot;#publicpath&quot;&gt; &lt;code&gt;publicPath&lt;/code&gt; &lt;/a&gt;オプションを使用して、ワーカースクリプトのベースダウンロードURLを上書きできます。</target>
        </trans-unit>
        <trans-unit id="25ddd41a449ec2152e2df9c3f9f502da494e9418" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#nested-rules&quot;&gt;&lt;code&gt;Nested rules&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#nested-rules&quot;&gt; &lt;code&gt;Nested rules&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="75662d18bc6eb58412de0ef04751e322ada76bc7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="50aeadb42cc3f37569d30b00c00fc40e5c4621c6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#outputdevtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#outputdevtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fca1eb0890db55bcc043ad6b58f4238447d28a30" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#statsexcludemodules&quot;&gt;&lt;code&gt;stats.excludeModules&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#statsexcludemodules&quot;&gt; &lt;code&gt;stats.excludeModules&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ca59bbc98e49f8c6c32052f6515131e707aaafa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#useentry&quot;&gt;UseEntry&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#useentry&quot;&gt;UseEntry&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b9483237f06dfdd0d44a5a766bae77f7ae376b4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../configuration/resolve&quot;&gt;Resolve API&lt;/a&gt; to learn more about the configuration options mentioned above.</source>
          <target state="translated">上記の構成オプションの詳細については、&lt;a href=&quot;../configuration/resolve&quot;&gt;ResolveAPIを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1681661e48e8bc821ee39d263a6afcdc1ca2272f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../configuration/resolve&quot;&gt;Resolve API&lt;/a&gt; to learn more on the configuration options mentioned above.</source>
          <target state="translated">上記の構成オプションの詳細については、&lt;a href=&quot;../configuration/resolve&quot;&gt;APIの解決を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0cbcb55ca6f89fbddc6c15d96cd6700dabac888e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guides/asset-modules&quot;&gt;Asset Modules guide&lt;/a&gt; for additional information and use cases.</source>
          <target state="translated">追加情報とユースケースについては、&lt;a href=&quot;../guides/asset-modules&quot;&gt;アセットモジュールガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8da8e9cd5246408a364a20de8205471deacf5ea5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guides/asset-modules&quot;&gt;Asset Modules guide&lt;/a&gt; for more about &lt;code&gt;asset*&lt;/code&gt; type.</source>
          <target state="translated">&lt;a href=&quot;../guides/asset-modules&quot;&gt;アセット&lt;/a&gt; &lt;code&gt;asset*&lt;/code&gt; タイプの詳細については、アセットモジュールガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0a3cbbc77ab575dc2209e8a42c3dc1c69e76016" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guides/output-management#the-manifest&quot;&gt;the manifest section&lt;/a&gt; of our &lt;em&gt;Managing Built Files&lt;/em&gt; guide to learn how to extract the manifest, and read the guides below to learn more about the intricacies of long term caching.</source>
          <target state="translated">&lt;a href=&quot;../guides/output-management#the-manifest&quot;&gt;マニフェスト&lt;/a&gt;を抽出する方法については、&lt;em&gt;ビルドファイルの管理&lt;/em&gt;ガイドのマニフェストセクションを参照してください。また、長期キャッシングの複雑さについては、以下のガイドをお読みください。</target>
        </trans-unit>
        <trans-unit id="5153187d77875a911035996c8aec2dd0eba42148" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guides/output-management#the-manifest&quot;&gt;the manifest section&lt;/a&gt; of our &lt;em&gt;Output management&lt;/em&gt; guide to learn how to extract the manifest, and read the guides below to learn more about the intricacies of long term caching.</source>
          <target state="translated">&lt;a href=&quot;../guides/output-management#the-manifest&quot;&gt;マニフェスト&lt;/a&gt;を抽出する方法については、&lt;em&gt;出力管理&lt;/em&gt;ガイドのマニフェストセクションを参照してください。また、長期キャッシュの複雑さについては、以下のガイドをお読みください。</target>
        </trans-unit>
        <trans-unit id="cabf7c2cd86f2d75cde0e99ba373a6c335a4afba" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://stylelint.io/user-guide/node-api/#options&quot;&gt;stylelint's options&lt;/a&gt; for the complete list of options available. These options are passed through to the &lt;code&gt;stylelint&lt;/code&gt; directly.</source>
          <target state="translated">利用可能なオプションの完全なリストについては、&lt;a href=&quot;http://stylelint.io/user-guide/node-api/#options&quot;&gt;stylelintのオプション&lt;/a&gt;を参照してください。これらのオプションは、 &lt;code&gt;stylelint&lt;/code&gt; に直接渡されます。</target>
        </trans-unit>
        <trans-unit id="bbe6660a7baefd0b2b987c2a5735dfcf932c4224" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;the babel-preset-env documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;は、babel-preset-envのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="21e04f153bcd9aba3321a1fec1f81b137078fe83" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/DanielRuf/html-minifier-terser&quot;&gt;html-minifier-terser&lt;/a&gt;'s documentation for more information on the available options.</source>
          <target state="translated">使用可能なオプションの詳細については、&lt;a href=&quot;https://github.com/DanielRuf/html-minifier-terser&quot;&gt;html-minifier-terser&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="738fce0b08b68aaadd356b5e3d262658132d9ecd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/babel/babel-preset-env&quot;&gt;the repository&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://github.com/babel/babel-preset-env&quot;&gt;は、リポジトリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="25eae184a7318828d608e70818c84dbc1ef149d5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/kangax/html-minifier#options-quick-reference&quot;&gt;html-minifier&lt;/a&gt;'s documentation for more information on the available options.</source>
          <target state="translated">使用可能なオプションの詳細については、&lt;a href=&quot;https://github.com/kangax/html-minifier#options-quick-reference&quot;&gt;html-minifier&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7a67af0e7b928549d8c164387b173b6152b733c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/sass/node-sass/blob/master/README.md#options&quot;&gt;the Node Sass documentation&lt;/a&gt; for all available Sass options.</source>
          <target state="translated">使用可能なすべてのSassオプションについて&lt;a href=&quot;https://github.com/sass/node-sass/blob/master/README.md#options&quot;&gt;は、Node Sassのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a8521d09abe46eca5f89a9f249b428a47ad9b54" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack-contrib/config-loader#supported-compilers&quot;&gt;Supported Compilers&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/webpack-contrib/config-loader#supported-compilers&quot;&gt;サポートされるコンパイラ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8bdce59079a8af254efa333591f385c2e4a1a6b9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils&lt;/a&gt; for hash options.</source>
          <target state="translated">ハッシュオプションについては、&lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7798a3cbfb25129bb175d4b855aa5de15054151f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/the-big-test&quot;&gt;the-big-test&lt;/a&gt; for an example.</source>
          <target state="translated">例について&lt;a href=&quot;https://github.com/webpack/the-big-test&quot;&gt;は、the-big-test&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="64ca0e010d0fda90861b087bd29640d09e0e0c01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/buildin/global.js&quot;&gt;the source&lt;/a&gt; for the exact behavior of this object.</source>
          <target state="translated">このオブジェクトの正確な動作について&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/buildin/global.js&quot;&gt;は、ソース&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ff7aaaaaa00879584b0b6c995a6489b372a5b90" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/webpack/webpack/issues/2776#issuecomment-233208623&quot;&gt;this discussion&lt;/a&gt; for more information on &lt;code&gt;__webpack_public_path__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__webpack_public_path__&lt;/code&gt; の詳細については、&lt;a href=&quot;https://github.com/webpack/webpack/issues/2776#issuecomment-233208623&quot;&gt;この説明&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="96e8dd6b60df53db44e35db76f1e3338900f1aac" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://nodejs.org/api/globals.html#globals_global&quot;&gt;node.js global&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/globals.html#globals_global&quot;&gt;node.js globalを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e42e31022fc6c9e2f13cb34eead633808bc8ac28" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://nodejs.org/api/globals.html#globals_global&quot;&gt;the Node.js documentation&lt;/a&gt; for the exact behavior of this object.</source>
          <target state="translated">このオブジェクトの正確な動作について&lt;a href=&quot;https://nodejs.org/api/globals.html#globals_global&quot;&gt;は、Node.jsのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b9e843ce89ca0779f59f3e04212aa21a01f8da7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;node.js process&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;node.jsプロセスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ff726a8e26537d00afbdf14b17879f9e968dbb2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; for the options in the configuration file.</source>
          <target state="translated">構成ファイルのオプションについては、&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;構成&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="01b280437ddaec027ef1957439b631695b9bc79e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript's documentation&lt;/a&gt; to learn more about &lt;code&gt;tsconfig.json&lt;/code&gt; configuration options.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; 構成オプション&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;の&lt;/a&gt;詳細については、TypeScriptのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="83cb4a0f1ad6cd59cfe32a45d7ce09134ab199d4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lazy-loading&quot;&gt;Lazy Loading&lt;/a&gt; for a more concrete example of how &lt;code&gt;import()&lt;/code&gt; can be used in a real application and &lt;a href=&quot;caching&quot;&gt;Caching&lt;/a&gt; to learn how to split code more effectively.</source>
          <target state="translated">実際のアプリケーションで &lt;code&gt;import()&lt;/code&gt; を使用する方法のより具体的な例については&lt;a href=&quot;lazy-loading&quot;&gt;遅延読み込み&lt;/a&gt;を、コードをより効果的に分割する方法については&lt;a href=&quot;caching&quot;&gt;キャッシュ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b4aa4a6053db1ce4338ec4397546a755bfbf845e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;module-variables#moduleid-commonjs&quot;&gt;&lt;code&gt;module.id&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;module-variables#moduleid-commonjs&quot;&gt; &lt;code&gt;module.id&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="26d664192e5d4fc17436e485de9b6b6b860e2f68" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;output#output-sourcemapfilename&quot;&gt;&lt;code&gt;output.sourceMapFilename&lt;/code&gt;&lt;/a&gt; to customize the filenames of generated Source Maps.</source>
          <target state="translated">生成されたソースマップのファイル名をカスタマイズするには、&lt;a href=&quot;output#output-sourcemapfilename&quot;&gt; &lt;code&gt;output.sourceMapFilename&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dd356deccc69ad6f2a86a9de7b84dcf3835c078c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;output#outputsourcemapfilename&quot;&gt;&lt;code&gt;output.sourceMapFilename&lt;/code&gt;&lt;/a&gt; to customize the filenames of generated Source Maps.</source>
          <target state="translated">生成されたソースマップのファイル名をカスタマイズするには、&lt;a href=&quot;output#outputsourcemapfilename&quot;&gt; &lt;code&gt;output.sourceMapFilename&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f43b789c0293ed25a6e2e95688990a899db3700" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;watch&quot;&gt;WatchOptions&lt;/a&gt; for more options.</source>
          <target state="translated">その他のオプションについては、&lt;a href=&quot;watch&quot;&gt;WatchOptions&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f4bd6e6fcdb6dc003d1379a946a135f3ebdd8c90" translate="yes" xml:space="preserve">
          <source>See [Rule.exclude] and [Condition] in the webpack documentation. Paths matching this option will be excluded from processing by polymer-webpack-loader. NOTE: Files imported through a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; will not be excluded by this property. See &lt;code&gt;Options.ignoreLinks&lt;/code&gt;.</source>
          <target state="translated">Webpackドキュメントの[Rule.exclude]および[Condition]を参照してください。このオプションに一致するパスは、polymer-webpack-loaderによる処理から除外されます。注： &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; を介してインポートされたファイルは、このプロパティによって除外されません。 &lt;code&gt;Options.ignoreLinks&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6e6566df68fce4fa01fb31ea13de78735f4852d" translate="yes" xml:space="preserve">
          <source>See [Rule.include] and [Condition] in the webpack documentation. Paths matching this option will be processed by polymer-webpack-loader. WARNING: If this property exists the loader will only process files matching the given conditions. If your component has a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; pointing to a component e.g. in another directory, the &lt;code&gt;include&lt;/code&gt; condition(s) MUST also match that directory.</source>
          <target state="translated">Webpackドキュメントの[Rule.include]および[Condition]を参照してください。このオプションに一致するパスは、polymer-webpack-loaderによって処理されます。警告：このプロパティが存在する場合、ローダーは指定された条件に一致するファイルのみを処理します。コンポーネントに、たとえば別のディレクトリ内のコンポーネントを指す &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; がある場合、 &lt;code&gt;include&lt;/code&gt; 条件もそのディレクトリと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="540660cdb7a8095b32037f0d1b3255264eb36845" translate="yes" xml:space="preserve">
          <source>See an example use of scope</source>
          <target state="translated">スコープの使用例を見る</target>
        </trans-unit>
        <trans-unit id="0c968ba1f2e68c9e547f9f5508a57b9a1247ee5f" translate="yes" xml:space="preserve">
          <source>See full implementation</source>
          <target state="translated">完全な実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="9701a07560a9b8b7347be25b91e9e0417527fb9e" translate="yes" xml:space="preserve">
          <source>See stylelint's &lt;a href=&quot;http://stylelint.io/user-guide/node-api/#options&quot;&gt;options&lt;/a&gt; for the complete list of options available. These options are passed through to the &lt;code&gt;stylelint&lt;/code&gt; directly.</source>
          <target state="translated">利用可能なオプションの完全なリストについては、stylelintの&lt;a href=&quot;http://stylelint.io/user-guide/node-api/#options&quot;&gt;オプション&lt;/a&gt;を参照してください。これらのオプションは、 &lt;code&gt;stylelint&lt;/code&gt; に直接渡されます。</target>
        </trans-unit>
        <trans-unit id="b645f65aa6abcfc8ebb29cd64088194502e1abba" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/hot-module-replacement&quot;&gt;HMR API page&lt;/a&gt; for details on the &lt;code&gt;module.hot&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;module.hot&lt;/code&gt; インターフェースの詳細については、&lt;a href=&quot;../api/hot-module-replacement&quot;&gt;HMR APIページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f06e17c42aad5bc5d45bd15cc43aa0215524eea" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../configuration/devtool&quot;&gt;devtool documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../configuration/devtool&quot;&gt;devtoolのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="db124c35113d6d0e410502b0ae2ac04cb58f7f3f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../guides/environment-variables&quot;&gt;environment variables&lt;/a&gt; guide for more information on its usage.</source>
          <target state="translated">使用方法の詳細については、&lt;a href=&quot;../guides/environment-variables&quot;&gt;環境変数&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="dfbbb35c1572ca31560ba547dd6c182eb9ae7d41" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;build-performance&quot;&gt;Build Performance&lt;/a&gt; guide on build tooling.</source>
          <target state="translated">ビルドツールに関する&lt;a href=&quot;build-performance&quot;&gt;ビルドパフォーマンス&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="399e32b3d68f8fd68a037b4d71f43fcc1e8b839f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;compiler-hooks&quot;&gt;compiler hooks&lt;/a&gt; section for a detailed listing of all the available &lt;code&gt;compiler&lt;/code&gt; hooks and the parameters they make available.</source>
          <target state="translated">使用可能なすべての &lt;code&gt;compiler&lt;/code&gt; フックとそれらが使用可能にするパラメータの詳細なリストについては、&lt;a href=&quot;compiler-hooks&quot;&gt;コンパイラフックの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="59dc1d42f764f543a6b26fbcf0fff54f43822211" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-runtime/&quot;&gt;docs&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-runtime/&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b02a200e295054c6f6198fd1fd87e64f93ab872d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/isaacs/node-glob#options&quot;&gt;&lt;code&gt;node-glob&lt;/code&gt; options&lt;/a&gt; in addition to the ones below</source>
          <target state="translated">以下の&lt;a href=&quot;https://github.com/isaacs/node-glob#options&quot;&gt;オプション&lt;/a&gt;に加えて、 &lt;code&gt;node-glob&lt;/code&gt; オプションを参照してください</target>
        </trans-unit>
        <trans-unit id="5e75f40a0487852583b0f91c2d37afff1362a3e4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/webpack-contrib/bundle-loader&quot;&gt;bundle-loader&lt;/a&gt; for a good example of how this process can be used in a more meaningful way.</source>
          <target state="translated">このプロセスをより意味のある方法で使用する方法の良い例については、&lt;a href=&quot;https://github.com/webpack-contrib/bundle-loader&quot;&gt;バンドルローダー&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e4a17a9dce4916d560a6c6f548a3354e5483e812" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/webpack-contrib/closure-webpack-plugin/tree/master/demo/es5-and-es6&quot;&gt;es5 and es6 output demo&lt;/a&gt; for an example.</source>
          <target state="translated">例については、&lt;a href=&quot;https://github.com/webpack-contrib/closure-webpack-plugin/tree/master/demo/es5-and-es6&quot;&gt;es5およびes6出力デモ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f44c3a56104228ae5ad924a541711f7050d6b83" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;&lt;code&gt;enhanced-resolve&lt;/code&gt; documentation&lt;/a&gt; for a full list of hooks and their description.</source>
          <target state="translated">フックとその説明の完全なリストについては、&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt; &lt;code&gt;enhanced-resolve&lt;/code&gt; ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e65e5bb81bda817b9fc8c8b7803449230e07fff4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;stats&quot;&gt;stats data api&lt;/a&gt; to read more about the stats generated here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab807fc583820aba669270a2b70a2bd6419044c" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;babel&lt;/code&gt;&lt;a href=&quot;https://babeljs.io/docs/en/options&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; &lt;a href=&quot;https://babeljs.io/docs/en/options&quot;&gt;オプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="16d9c4ceca390558339c46f282c756d25df67250" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;babel&lt;/code&gt;&lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; &lt;a href=&quot;https://babeljs.io/docs/usage/api/#options&quot;&gt;オプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5b15fe73f9453e16c4c0e90bfaffeaefac53438e" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;enhanced-resolve&lt;/code&gt;&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;documentation&lt;/a&gt; for a full list of hooks and descriptions.</source>
          <target state="translated">フックと説明の完全なリストについては、 &lt;code&gt;enhanced-resolve&lt;/code&gt; の&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="51d046b4332307e92bffdc554b7be2b2c13a49cf" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;styelint&lt;/code&gt;&lt;a href=&quot;https://stylelint.io/user-guide/node-api/#syntax&quot;&gt;user guide&lt;/a&gt; for more info. e.g. use &lt;code&gt;'scss'&lt;/code&gt; to lint .scss files.</source>
          <target state="translated">詳細については、 &lt;code&gt;styelint&lt;/code&gt; &lt;a href=&quot;https://stylelint.io/user-guide/node-api/#syntax&quot;&gt;ユーザーガイド&lt;/a&gt;を参照してください。たとえば、.scssファイルをlint するには、 &lt;code&gt;'scss'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bb048f274dce089db76ee8dbf26c81686597d4d9" translate="yes" xml:space="preserve">
          <source>See the example above. The property name &lt;code&gt;jquery&lt;/code&gt; indicates that the module &lt;code&gt;jquery&lt;/code&gt; in &lt;code&gt;import $ from 'jquery'&lt;/code&gt; should be excluded. In order to replace this module, the value &lt;code&gt;jQuery&lt;/code&gt; will be used to retrieve a global &lt;code&gt;jQuery&lt;/code&gt; variable. In other words, when a string is provided it will be treated as &lt;code&gt;root&lt;/code&gt; (defined above and below).</source>
          <target state="translated">上記の例を参照してください。プロパティ名 &lt;code&gt;jquery&lt;/code&gt; は、 &lt;code&gt;import $ from 'jquery'&lt;/code&gt; モジュール &lt;code&gt;jquery&lt;/code&gt; を除外する必要があることを示しています。このモジュールを置き換えるために、値 &lt;code&gt;jQuery&lt;/code&gt; を使用してグローバル &lt;code&gt;jQuery&lt;/code&gt; 変数を取得します。言い換えると、文字列が提供されると、 &lt;code&gt;root&lt;/code&gt; として扱われます（上と下で定義）。</target>
        </trans-unit>
        <trans-unit id="98ca989d1cebbea761fbf920b84b0ba2fce28481" translate="yes" xml:space="preserve">
          <source>Select &lt;a href=&quot;../configuration/stats&quot;&gt;display preset&lt;/a&gt; (verbose, detailed, normal, minimal, errors-only, none; since webpack 3.0.0)</source>
          <target state="translated">&lt;a href=&quot;../configuration/stats&quot;&gt;表示プリセットを&lt;/a&gt;選択します（詳細、詳細、通常、最小、エラーのみ、なし。webpack3.0.0以降）。</target>
        </trans-unit>
        <trans-unit id="02a4683da7fa051577215d359f49323d1fed0daa" translate="yes" xml:space="preserve">
          <source>Separate App and Vendor Entries</source>
          <target state="translated">アプリとベンダーのエントリーを分ける</target>
        </trans-unit>
        <trans-unit id="25a9ee26c4b89932fb8aeb3410c5bf076f99b63b" translate="yes" xml:space="preserve">
          <source>Separate builds per page</source>
          <target state="translated">ページごとに別々のビルド</target>
        </trans-unit>
        <trans-unit id="7af62966614896fe31f4d73a8cd2298b678f5820" translate="yes" xml:space="preserve">
          <source>Separating &lt;code&gt;Interoperable CSS&lt;/code&gt;-only and &lt;code&gt;CSS Module&lt;/code&gt; features</source>
          <target state="translated">&lt;code&gt;Interoperable CSS&lt;/code&gt; のみの機能と &lt;code&gt;CSS Module&lt;/code&gt; 機能の分離</target>
        </trans-unit>
        <trans-unit id="7a4cb28099ed5c8050dff47fea1337f4ce7c368b" translate="yes" xml:space="preserve">
          <source>Separating a Manifest</source>
          <target state="translated">マニフェストを分ける</target>
        </trans-unit>
        <trans-unit id="b39339ce6050cb58d9e6b10477fe4097d2e16fe1" translate="yes" xml:space="preserve">
          <source>Serve over HTTP/2 using &lt;a href=&quot;https://www.npmjs.com/package/spdy&quot;&gt;spdy&lt;/a&gt;. This option is ignored for Node 10.0.0 and above, as spdy is broken for those versions. The dev server will migrate over to Node's built-in HTTP/2 once &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; supports it.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/spdy&quot;&gt;spdy&lt;/a&gt;を使用してHTTP / 2経由でサービスを提供します。ノード10.0.0以降では、spdyが壊れているため、このオプションは無視されます。&lt;a href=&quot;https://expressjs.com/&quot;&gt;Expressが&lt;/a&gt;サポートすると、開発サーバーはノードの組み込みHTTP / 2に移行します。</target>
        </trans-unit>
        <trans-unit id="1fdcef2523a6cd581a7dc712082aaf03e4c19355" translate="yes" xml:space="preserve">
          <source>Service URLs</source>
          <target state="translated">サービスURL</target>
        </trans-unit>
        <trans-unit id="b6726e4199f82bfd68e09b44585c9d961069ec19" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;PostCSS&lt;/code&gt; options and plugins</source>
          <target state="translated">&lt;code&gt;PostCSS&lt;/code&gt; オプションとプラグインを設定する</target>
        </trans-unit>
        <trans-unit id="57926fa1fd18f54e0b1e889ca065a0bf9d064139" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;postcss.config.js&lt;/code&gt; config path &amp;amp;&amp;amp; &lt;code&gt;ctx&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;postcss.config.js&lt;/code&gt; 設定パスを設定&amp;amp;&amp;amp; &lt;code&gt;ctx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c81bcf18a909e24b92cbbb9389971e8a2854afd" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to the specified value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977a1dca06237783c7ed884a1cd060dca428d020" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;resolve.cacheWithContext: false&lt;/code&gt; if you use custom resolving plugins, that are not context specific.</source>
          <target state="translated">コンテキスト固有ではないカスタム解決プラグインを使用する場合は、 &lt;code&gt;resolve.cacheWithContext: false&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="da926ee652c5e2b64bb43ec67d341055922ff2d3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;resolve.symlinks: false&lt;/code&gt; if you don't use symlinks (e.g. &lt;code&gt;npm link&lt;/code&gt; or &lt;code&gt;yarn link&lt;/code&gt;).</source>
          <target state="translated">シンボリックリンクを使用しない場合は、 &lt;code&gt;resolve.symlinks: false&lt;/code&gt; 設定します（ &lt;code&gt;npm link&lt;/code&gt; や &lt;code&gt;yarn link&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c190e60485a6f44f7f126542d35e28d4b7e47165" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;target&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if none of the predefined targets from the list above meet your needs, no plugins will be applied.</source>
          <target state="translated">上記のリストの事前定義されたターゲットのいずれもニーズを満たさない場合は、 &lt;code&gt;target&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。プラグインは適用されません。</target>
        </trans-unit>
        <trans-unit id="66427df2669361795db97f8973e9a5586225aa6f" translate="yes" xml:space="preserve">
          <source>Set PostCSS Parser</source>
          <target state="translated">PostCSSパーサーを設定します。</target>
        </trans-unit>
        <trans-unit id="d8e30afabd93d52638b2f5f15db249db2a634e27" translate="yes" xml:space="preserve">
          <source>Set PostCSS Plugins</source>
          <target state="translated">PostCSSプラグインの設定</target>
        </trans-unit>
        <trans-unit id="5c24d7387e93e5be721f9d2dd7f45029a6a59e95" translate="yes" xml:space="preserve">
          <source>Set PostCSS Stringifier</source>
          <target state="translated">PostCSS文字列修飾子を設定します。</target>
        </trans-unit>
        <trans-unit id="7650971a575a6117fb73040adce9f05b233748e4" translate="yes" xml:space="preserve">
          <source>Set PostCSS Syntax</source>
          <target state="translated">構文 PostCSS Set</target>
        </trans-unit>
        <trans-unit id="b4665e2e65095495165596b5446a1974f42fb344" translate="yes" xml:space="preserve">
          <source>Set a URL for source maps. Useful for avoiding cross-origin issues such as:</source>
          <target state="translated">ソース マップの URL を設定します。のようなクロスオリジンの問題を回避するのに便利です。</target>
        </trans-unit>
        <trans-unit id="b9b598d854e43db0d0151008e3fd5f86873a7bdc" translate="yes" xml:space="preserve">
          <source>Set a URL for source maps. Useful for hosting them on a host that requires authorization.</source>
          <target state="translated">ソース マップの URL を設定します。認証を必要とするホストでホストをホストする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d2d23439aa12147ad1bf33f7b346add960b19f8d" translate="yes" xml:space="preserve">
          <source>Set min/max limits for chunking to better control chunking</source>
          <target state="translated">チャンキングの最小値/最大値を設定して、チャンキングをより良く制御します。</target>
        </trans-unit>
        <trans-unit id="0207023c93088679bd649f17d88fdab51785c76a" translate="yes" xml:space="preserve">
          <source>Set module ID base (DLLPlugin)</source>
          <target state="translated">基本IDモジュールセット(DLLPlugin</target>
        </trans-unit>
        <trans-unit id="561fbe0dc88f915a9b7ac6bdc9b28365b143eada" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;mode&lt;/code&gt; configuration option to &lt;a href=&quot;../concepts/mode#mode-development&quot;&gt;development&lt;/a&gt; to make sure that the bundle is not minified:</source>
          <target state="translated">設定する &lt;code&gt;mode&lt;/code&gt; に設定オプション&lt;a href=&quot;../concepts/mode#mode-development&quot;&gt;の開発を&lt;/a&gt;バンドルが縮小されていないことを確認します：</target>
        </trans-unit>
        <trans-unit id="921b8993e82f242c1e163d25be3cc3115373d5f5" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;mode&lt;/code&gt; configuration option to &lt;a href=&quot;../configuration/mode#mode-development&quot;&gt;development&lt;/a&gt; to make sure that the bundle is not minified:</source>
          <target state="translated">設定する &lt;code&gt;mode&lt;/code&gt; に設定オプション&lt;a href=&quot;../configuration/mode#mode-development&quot;&gt;の開発を&lt;/a&gt;バンドルが縮小されていないことを確認します：</target>
        </trans-unit>
        <trans-unit id="ebec1a5c0fe60a9d3ac8934cc3644b31604057a1" translate="yes" xml:space="preserve">
          <source>Set the inner regular expression for partial dynamic dependencies : &lt;code&gt;wrappedContextRegExp: /\\.\\*/&lt;/code&gt;</source>
          <target state="translated">部分的な動的依存関係の内部正規表現を設定します： &lt;code&gt;wrappedContextRegExp: /\\.\\*/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c64c2e007b59db562c0f3dc27d8a46c95fb790b" translate="yes" xml:space="preserve">
          <source>Set the value of &lt;code&gt;require.amd&lt;/code&gt; or &lt;code&gt;define.amd&lt;/code&gt;. Setting &lt;code&gt;amd&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable webpack's AMD support.</source>
          <target state="translated">&lt;code&gt;require.amd&lt;/code&gt; または &lt;code&gt;define.amd&lt;/code&gt; の値を設定します。 &lt;code&gt;amd&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、webpackのAMDサポートが無効になります。</target>
        </trans-unit>
        <trans-unit id="4af885ecb6c1963071180f884af4e9eefe7b8bbe" translate="yes" xml:space="preserve">
          <source>Set the value of &lt;code&gt;require.amd&lt;/code&gt; or &lt;code&gt;define.amd&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;require.amd&lt;/code&gt; または &lt;code&gt;define.amd&lt;/code&gt; の値を設定します。</target>
        </trans-unit>
        <trans-unit id="a5c81da2bb237f955713f59fd470c2efd450cc8a" translate="yes" xml:space="preserve">
          <source>Set the worker type.</source>
          <target state="translated">ワーカーの種類を設定します。</target>
        </trans-unit>
        <trans-unit id="a6900da3a5e926ee28a5cf95f4b9a4ea69c97c3f" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to allow return statements outside of functions</source>
          <target state="translated">関数の外でreturnステートメントを許可するには、 &lt;code&gt;true&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="7034ab7e3f15d92c7322de7f7c5d4c03e1200953" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to instrument ES2015 Modules</source>
          <target state="translated">ES2015モジュールを計測するには、 &lt;code&gt;true&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="27232a53dc74afb89b57230060952fc6fe9ded4f" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to produce a source map for the instrumented code</source>
          <target state="translated">インストルメントされたコードのソースマップを生成するには、 &lt;code&gt;true&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="2d480762f2fe245b7aa18c4fc3067dcc709d69a8" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; on &lt;code&gt;DefinePlugin&lt;/code&gt; to value &lt;code&gt;development&lt;/code&gt;. Enables &lt;code&gt;NamedChunksPlugin&lt;/code&gt; and &lt;code&gt;NamedModulesPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; の &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を &lt;code&gt;development&lt;/code&gt; 値に設定します。 &lt;code&gt;NamedChunksPlugin&lt;/code&gt; および &lt;code&gt;NamedModulesPlugin&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="4da7a2da1d13d72e6d6d6222f44ab4cb6443d256" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; on &lt;code&gt;DefinePlugin&lt;/code&gt; to value &lt;code&gt;development&lt;/code&gt;. Enables useful names for modules and chunks.</source>
          <target state="translated">設定 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; は上 &lt;code&gt;DefinePlugin&lt;/code&gt; 値に &lt;code&gt;development&lt;/code&gt; 。モジュールとチャンクの有用な名前を有効にします。</target>
        </trans-unit>
        <trans-unit id="acfa30009e3a81fd4a2170737da9348495586e0e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; on &lt;code&gt;DefinePlugin&lt;/code&gt; to value &lt;code&gt;production&lt;/code&gt;. Enables &lt;code&gt;FlagDependencyUsagePlugin&lt;/code&gt;, &lt;code&gt;FlagIncludedChunksPlugin&lt;/code&gt;, &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt;, &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt;, &lt;code&gt;OccurrenceOrderPlugin&lt;/code&gt;, &lt;code&gt;SideEffectsFlagPlugin&lt;/code&gt; and &lt;code&gt;UglifyJsPlugin&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; は上 &lt;code&gt;DefinePlugin&lt;/code&gt; 値に &lt;code&gt;production&lt;/code&gt; 。有効 &lt;code&gt;FlagDependencyUsagePlugin&lt;/code&gt; 、 &lt;code&gt;FlagIncludedChunksPlugin&lt;/code&gt; 、 &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt; 、 &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; 、 &lt;code&gt;OccurrenceOrderPlugin&lt;/code&gt; 、 &lt;code&gt;SideEffectsFlagPlugin&lt;/code&gt; と &lt;code&gt;UglifyJsPlugin&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="9619c22b98ea2e31eac12f69d8e0d3fcadf9058f" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; on &lt;code&gt;DefinePlugin&lt;/code&gt; to value &lt;code&gt;production&lt;/code&gt;. Enables deterministic mangled names for modules and chunks, &lt;code&gt;FlagDependencyUsagePlugin&lt;/code&gt;, &lt;code&gt;FlagIncludedChunksPlugin&lt;/code&gt;, &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt;, &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; and &lt;code&gt;TerserPlugin&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; は上 &lt;code&gt;DefinePlugin&lt;/code&gt; 値に &lt;code&gt;production&lt;/code&gt; 。モジュールとチャンク、 &lt;code&gt;FlagDependencyUsagePlugin&lt;/code&gt; 、 &lt;code&gt;FlagIncludedChunksPlugin&lt;/code&gt; 、 &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt; 、 &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; 、 &lt;code&gt;TerserPlugin&lt;/code&gt; の確定的なマングル名を有効にします。</target>
        </trans-unit>
        <trans-unit id="750a2ccd76902472baeba86abf16b74d3bb4724c" translate="yes" xml:space="preserve">
          <source>Sets module ID base (DLLPlugin)</source>
          <target state="translated">モジュールIDのベースを設定する(DLLPlugin)</target>
        </trans-unit>
        <trans-unit id="9516a7e8b65caaaccca85e1c01699243ffcde455" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;stats#stats-presets&quot;&gt;preset&lt;/a&gt; for the type of information that gets displayed. It is useful for &lt;a href=&quot;stats#extending-stats-behaviours&quot;&gt;extending stats behaviours&lt;/a&gt;.</source>
          <target state="translated">表示される情報の種類の&lt;a href=&quot;stats#stats-presets&quot;&gt;プリセット&lt;/a&gt;を設定します。&lt;a href=&quot;stats#extending-stats-behaviours&quot;&gt;統計動作&lt;/a&gt;を拡張するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5f7baff112634939082daec93ffd7bc2919f1c5e" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;cache&lt;/code&gt; type to either in memory or on the file system. The &lt;code&gt;memory&lt;/code&gt; option is straightforward, it tells webpack to store cache in memory and doesn't allow additional configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9394fdd1a8c4f17fcb036340aa1e03f4efa1d799" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;cache&lt;/code&gt; type to either in memory or on the file system. The &lt;code&gt;memory&lt;/code&gt; option is very straightforward, it tells webpack to store cache in memory and doesn't allow additional configuration:</source>
          <target state="translated">設定し &lt;code&gt;cache&lt;/code&gt; メモリ内またはファイルシステム上のいずれかのタイプ。 &lt;code&gt;memory&lt;/code&gt; オプションは、それがメモリに格納するキャッシュへのWebPACKに指示し、追加の設定を許可していない、非常に簡単です：</target>
        </trans-unit>
        <trans-unit id="80b3fc3e555c76d3e9f9249a5a30228bda49860b" translate="yes" xml:space="preserve">
          <source>Sets the MIME type for the file to be transformed.</source>
          <target state="translated">変換するファイルの MIME タイプを設定します。</target>
        </trans-unit>
        <trans-unit id="b44057d8fee68da59cba19ea8a30d01487d12379" translate="yes" xml:space="preserve">
          <source>Sets the MIME type for the file to be transformed. If unspecified the file extensions will be used to lookup the MIME type.</source>
          <target state="translated">変換するファイルの MIME タイプを設定します。指定されていない場合は、ファイルの拡張子が MIME タイプの検索に使用されます。</target>
        </trans-unit>
        <trans-unit id="6391b22e3020eb475858abab762483b734b3dc5e" translate="yes" xml:space="preserve">
          <source>Sets the build target</source>
          <target state="translated">ビルド目標を設定します。</target>
        </trans-unit>
        <trans-unit id="cbba182d8305005408a9f7ebb0a5d5eb2d951e84" translate="yes" xml:space="preserve">
          <source>Sets the context directory for shortening the request information.</source>
          <target state="translated">リクエスト情報を短縮するためのコンテキストディレクトリを設定します。</target>
        </trans-unit>
        <trans-unit id="0c654ed0e592201e7e229b29859e6217fbf4a8fc" translate="yes" xml:space="preserve">
          <source>Sets the hint for chunk id. It will be added to chunk's filename.</source>
          <target state="translated">チャンクIDのヒントを設定します。チャンクのファイル名に追加されます。</target>
        </trans-unit>
        <trans-unit id="84f08e40df2d52003b9253d4b374af00516b0e38" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of visible modules in output</source>
          <target state="translated">出力に表示されるモジュールの最大数を設定します。</target>
        </trans-unit>
        <trans-unit id="346bfc94aa795074409443bbe565c205d691ceef" translate="yes" xml:space="preserve">
          <source>Sets the name prefix for created chunks.</source>
          <target state="translated">作成されたチャンクの名前の接頭辞を設定します。</target>
        </trans-unit>
        <trans-unit id="2263fde916cbfb7ef485bac5c00eba05513fdfc9" translate="yes" xml:space="preserve">
          <source>Sets the size types which are used when a number is used for sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08ef6dbc58ea19c63523b605805c1a53f79b5d4" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;eager: true&lt;/code&gt; for dependency via the &lt;code&gt;ModuleFederationPlugin&lt;/code&gt;</source>
          <target state="translated">Setting &lt;code&gt;eager: true&lt;/code&gt; for dependency via the &lt;code&gt;ModuleFederationPlugin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a47602f69b4e0b1e2c30e2f90d0726e6edf2054c" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;module&lt;/code&gt; and/or &lt;code&gt;columns&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will yield less accurate source maps but will also improve compilation performance significantly.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; や &lt;code&gt;columns&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、ソースマップの精度が低下しますが、コンパイルのパフォーマンスも大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="9abe39d8332987f77fd24151008ae6f5f333482e" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;&quot;multiple&quot;&lt;/code&gt; adds an additional chunk to each entrypoint containing only the runtime. This setting is an alias for:</source>
          <target state="translated">&lt;code&gt;optimization.runtimeChunk&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;&quot;multiple&quot;&lt;/code&gt; 設定すると、ランタイムのみを含む各エントリポイントにチャンクが追加されます。この設定は次のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="9a68369aae104c40767e16c0b3be89cf3e2b01d5" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;'multiple'&lt;/code&gt; adds an additional chunk containing only the runtime to each entrypoint. This setting is an alias for:</source>
          <target state="translated">Setting &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;'multiple'&lt;/code&gt; adds an additional chunk containing only the runtime to each entrypoint. This setting is an alias for:</target>
        </trans-unit>
        <trans-unit id="35be3cd36e2f343b1e5d629adb4f1a692d4b0cbf" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;recordsPath&lt;/code&gt; will essentially set &lt;code&gt;recordsInputPath&lt;/code&gt; and &lt;code&gt;recordsOutputPath&lt;/code&gt; to the same location. This is usually all that's necessary unless you decide to change the name of the file containing the records. See below for an example.</source>
          <target state="translated">&lt;code&gt;recordsPath&lt;/code&gt; を設定すると、基本的に &lt;code&gt;recordsInputPath&lt;/code&gt; と &lt;code&gt;recordsOutputPath&lt;/code&gt; が同じ場所に設定されます。これは、レコードを含むファイルの名前を変更することを決定しない限り、通常はこれですべてです。例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d6929ae3e73cd73efc0bf627e56d68b870bed49" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;resolve.alias&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will tell webpack to ignore a module.</source>
          <target state="translated">Setting &lt;code&gt;resolve.alias&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will tell webpack to ignore a module.</target>
        </trans-unit>
        <trans-unit id="cc4f76dce0360734ac3333dd77298fd604d0b93d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;stats.excludeModules&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable the exclude behaviour.</source>
          <target state="translated">Setting &lt;code&gt;stats.excludeModules&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable the exclude behaviour.</target>
        </trans-unit>
        <trans-unit id="ecc7e910e2161aa171ae2455c116705909b33182" translate="yes" xml:space="preserve">
          <source>Setting sourceURL</source>
          <target state="translated">sourceURLの設定</target>
        </trans-unit>
        <trans-unit id="732e38a76ab7d2824c4816c5a2bea3d58d51d17a" translate="yes" xml:space="preserve">
          <source>Setting the library name as &lt;code&gt;webpack-numbers&lt;/code&gt;.</source>
          <target state="translated">ライブラリ名を &lt;code&gt;webpack-numbers&lt;/code&gt; として設定します。</target>
        </trans-unit>
        <trans-unit id="ad3a69c8a9beb9ffb90bf70ea832910c0071e097" translate="yes" xml:space="preserve">
          <source>Setting the option to &lt;code&gt;false&lt;/code&gt; disables the parser.</source>
          <target state="translated">オプションを &lt;code&gt;false&lt;/code&gt; に設定すると、パーサーが無効になります。</target>
        </trans-unit>
        <trans-unit id="38226df5919c60847b352cb49dbd61d50c50ade7" translate="yes" xml:space="preserve">
          <source>Setting the option to &lt;code&gt;true&lt;/code&gt; or leaving it &lt;code&gt;undefined&lt;/code&gt; enables the parser.</source>
          <target state="translated">オプションを &lt;code&gt;true&lt;/code&gt; に設定するか、 &lt;code&gt;undefined&lt;/code&gt; すると、パーサーが有効になります。</target>
        </trans-unit>
        <trans-unit id="746e4755adbf722eb3c4ec78507c6a19b58fedd6" translate="yes" xml:space="preserve">
          <source>Setting the value for &lt;code&gt;maxSize&lt;/code&gt; sets the value for both &lt;code&gt;maxAsyncSize&lt;/code&gt; and &lt;code&gt;maxInitialSize&lt;/code&gt;.</source>
          <target state="translated">Setting the value for &lt;code&gt;maxSize&lt;/code&gt; sets the value for both &lt;code&gt;maxAsyncSize&lt;/code&gt; and &lt;code&gt;maxInitialSize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b98a94c3f9ab2f10447cacefc1ecd547f3eb476" translate="yes" xml:space="preserve">
          <source>Setting up HtmlWebpackPlugin</source>
          <target state="translated">HtmlWebpackPluginの設定</target>
        </trans-unit>
        <trans-unit id="fc1c20bdfc8c7649ce4c9e6c0d21928b7e5fdf1f" translate="yes" xml:space="preserve">
          <source>Setting up your &lt;code&gt;env&lt;/code&gt; variable without assignment, &lt;code&gt;--env production&lt;/code&gt; sets &lt;code&gt;env.production&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; by default. There are also other syntaxes that you can use. See the &lt;a href=&quot;../api/cli#environment-options&quot;&gt;webpack CLI&lt;/a&gt; documentation for more information.</source>
          <target state="translated">Setting up your &lt;code&gt;env&lt;/code&gt; variable without assignment, &lt;code&gt;--env production&lt;/code&gt; sets &lt;code&gt;env.production&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; by default. There are also other syntaxes that you can use. See the &lt;a href=&quot;../api/cli#environment-options&quot;&gt;webpack CLI&lt;/a&gt; documentation for more information.</target>
        </trans-unit>
        <trans-unit id="3b1a1740689e27b23eb98ff1b2e6b556d00f3a2f" translate="yes" xml:space="preserve">
          <source>Setting up your &lt;code&gt;env&lt;/code&gt; variable without assignment, &lt;code&gt;--env.production&lt;/code&gt; sets &lt;code&gt;--env.production&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; by default. There are also other syntaxes that you can use. See the &lt;a href=&quot;../api/cli#environment-options&quot;&gt;webpack CLI&lt;/a&gt; documentation for more information.</source>
          <target state="translated">あなたの設定 &lt;code&gt;env&lt;/code&gt; 割り当てずに変数を、 &lt;code&gt;--env.production&lt;/code&gt; セットは &lt;code&gt;--env.production&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; デフォルトで。使用できる他の構文もあります。詳細については、&lt;a href=&quot;../api/cli#environment-options&quot;&gt;webpack CLIの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f091807cce6228669a85e022a61d7b0cdf8d5c14" translate="yes" xml:space="preserve">
          <source>Setting value of &lt;code&gt;stats.preset&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; tells webpack to use &lt;code&gt;'none'&lt;/code&gt;&lt;a href=&quot;stats#stats-presets&quot;&gt;stats preset&lt;/a&gt;.</source>
          <target state="translated">Setting value of &lt;code&gt;stats.preset&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; tells webpack to use &lt;code&gt;'none'&lt;/code&gt; &lt;a href=&quot;stats#stats-presets&quot;&gt;stats preset&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="a417cedf4b903f725fb28bbec6e6b1c6ad32e448" translate="yes" xml:space="preserve">
          <source>Setup &lt;code&gt;mode&lt;/code&gt; option. You can omit the value when you want &lt;code&gt;local&lt;/code&gt; mode.</source>
          <target state="translated">Setup &lt;code&gt;mode&lt;/code&gt; option. You can omit the value when you want &lt;code&gt;local&lt;/code&gt; mode.</target>
        </trans-unit>
        <trans-unit id="06343539d4b09a539dc93bc4ce9a53d7620487f7" translate="yes" xml:space="preserve">
          <source>Setup &lt;code&gt;parser&lt;/code&gt;:</source>
          <target state="translated">Setup &lt;code&gt;parser&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e9f3d54d7f76ee4ed58e446b5d8bd2cc396dd4d5" translate="yes" xml:space="preserve">
          <source>Setup &lt;code&gt;plugins&lt;/code&gt;:</source>
          <target state="translated">Setup &lt;code&gt;plugins&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a58e381443f8dae9920c25241a24e22bef5b4b1e" translate="yes" xml:space="preserve">
          <source>Setup &lt;code&gt;stringifier&lt;/code&gt;:</source>
          <target state="translated">Setup &lt;code&gt;stringifier&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4430078cc3f17efcd67906a764962adfbabe4451" translate="yes" xml:space="preserve">
          <source>Setup &lt;code&gt;syntax&lt;/code&gt;:</source>
          <target state="translated">Setup &lt;code&gt;syntax&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="645302712007854a659c1ad0eb9048b513e1f515" translate="yes" xml:space="preserve">
          <source>Setup Less implementation to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4d920494999ce00b8ac41d3d56ec520fa5dac7" translate="yes" xml:space="preserve">
          <source>Setup Sass implementation to use.</source>
          <target state="translated">使用するSassの実装を設定します。</target>
        </trans-unit>
        <trans-unit id="0add13475db107be44c2f21884cadaf95cb57326" translate="yes" xml:space="preserve">
          <source>Setup a module alias for resolving</source>
          <target state="translated">解決のためのモジュールエイリアスの設定</target>
        </trans-unit>
        <trans-unit id="247c67df3b13b6b80d98b21ae8f6284a9a668318" translate="yes" xml:space="preserve">
          <source>Setup extensions that should be used to resolve modules</source>
          <target state="translated">モジュールの解決に使用する拡張機能を設定する</target>
        </trans-unit>
        <trans-unit id="670aedbae56fc7266636f0d87893e55633606f9a" translate="yes" xml:space="preserve">
          <source>Setup the &lt;code&gt;target&lt;/code&gt; option to &lt;code&gt;node&lt;/code&gt;/&lt;code&gt;electron-main&lt;/code&gt;/&lt;code&gt;electron-main&lt;/code&gt; value and do not mock the &lt;code&gt;__dirname&lt;/code&gt; global variable.</source>
          <target state="translated">Setup the &lt;code&gt;target&lt;/code&gt; option to &lt;code&gt;node&lt;/code&gt; / &lt;code&gt;electron-main&lt;/code&gt; / &lt;code&gt;electron-main&lt;/code&gt; value and do not mock the &lt;code&gt;__dirname&lt;/code&gt; global variable.</target>
        </trans-unit>
        <trans-unit id="35b744601436a99f3c336760ff9e68609dbdd3d2" translate="yes" xml:space="preserve">
          <source>Shared modules are modules that are both overridable and provided as overrides to nested container. They usually point to the same module in each build, e.g. the same library.</source>
          <target state="translated">共有モジュールとは、入れ子になったコンテナへのオーバーライドとして提供される、オーバーライド可能なモジュールのことです。これらのモジュールは通常、同じライブラリなど、各ビルドで同じモジュールを指しています。</target>
        </trans-unit>
        <trans-unit id="5f32428e1f0599d3254f040dfbc73145a6af61f4" translate="yes" xml:space="preserve">
          <source>Shimming</source>
          <target state="translated">Shimming</target>
        </trans-unit>
        <trans-unit id="3ddfa9ff00acfac3af6747689d59e9b1f7145615" translate="yes" xml:space="preserve">
          <source>Shimming Globals</source>
          <target state="translated">シミンググローバル</target>
        </trans-unit>
        <trans-unit id="7a22f823528311add4d99a1cb48b73839ac1ae57" translate="yes" xml:space="preserve">
          <source>Short names - usually a single char - focused on minimal download size.</source>
          <target state="translated">短い名前-通常は1文字-最小限のダウンロードサイズに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="81cea26f857d5e5810f11505a8c297b46cc6b639" translate="yes" xml:space="preserve">
          <source>Short names - usually two chars - which will not change when adding or removing exports. Good for long term caching.</source>
          <target state="translated">短い名前-通常は2文字-エクスポートを追加したり削除したりしても変更されません。長期的なキャッシュに適しています。</target>
        </trans-unit>
        <trans-unit id="d6976882d7f88872a4a0b0b41d37418d42e07418" translate="yes" xml:space="preserve">
          <source>Short numeric ids which will not be changing between compilation. Good for long term caching. Enabled by default for production mode.</source>
          <target state="translated">コンパイルの間に変更されない短い数値 ID。長期的なキャッシュに適しています。プロダクションモードではデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="e2012dea310d50697bda7f1580ccc7095c8e5a90" translate="yes" xml:space="preserve">
          <source>Shortcut</source>
          <target state="translated">Shortcut</target>
        </trans-unit>
        <trans-unit id="90c93523ff95f6469ea7fab8ffa47ed0ddc9bc0c" translate="yes" xml:space="preserve">
          <source>Shortcuts</source>
          <target state="translated">Shortcuts</target>
        </trans-unit>
        <trans-unit id="0496dde020b028d805418e01d53e7ca651c2ed52" translate="yes" xml:space="preserve">
          <source>Shorthand for using the &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;process.env&lt;/code&gt; keys</source>
          <target state="translated">使用するための速記&lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; を&lt;/a&gt;上 &lt;code&gt;process.env&lt;/code&gt; のキー</target>
        </trans-unit>
        <trans-unit id="18221a52d33769e702d76dbbd39a1214ff4f221c" translate="yes" xml:space="preserve">
          <source>Should a source map be generated. Since generating source maps can be an expensive task, you should check if source maps are actually requested.</source>
          <target state="translated">ソース マップを生成すべきかどうか。ソース マップの生成にはコストがかかるので、ソース マップが実際に要求されているかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="e758d3d06c2c5929685b246142ce8e59564afca0" translate="yes" xml:space="preserve">
          <source>Should the result be minimized.</source>
          <target state="translated">結果を最小化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d79faae46113c53e1ab36a416991f347af2a116" translate="yes" xml:space="preserve">
          <source>Show more details</source>
          <target state="translated">詳細を表示</target>
        </trans-unit>
        <trans-unit id="d327f0da075e2fae319bf6069e1a422c8736e4f2" translate="yes" xml:space="preserve">
          <source>Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors:</source>
          <target state="translated">コンパイラのエラーや警告が発生した場合に、ブラウザにフルスクリーンのオーバーレイを表示します。デフォルトでは無効になっています。コンパイラエラーのみを表示したい場合。</target>
        </trans-unit>
        <trans-unit id="b2fb6a5e22d7e871b0703756457bd7f297a8c14d" translate="yes" xml:space="preserve">
          <source>Shows a full-screen overlay in the browser when there are compiler errors or warnings. If you want to show only compiler errors:</source>
          <target state="translated">コンパイラのエラーや警告が発生したときに、ブラウザにフルスクリーンのオーバーレイを表示します。コンパイラエラーのみを表示したい場合</target>
        </trans-unit>
        <trans-unit id="8a99cbea4a95872d667cc46d8128f7f43ef75039" translate="yes" xml:space="preserve">
          <source>Sibling containers cannot override each other's modules.</source>
          <target state="translated">シブリング・コンテナは、お互いのモジュールをオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="8e28308ef5c9b46255f7e858df926c6792d102fd" translate="yes" xml:space="preserve">
          <source>Similar syntax is supported in Node.js (&amp;gt;= 12.17.0):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68db8a594997290744bfc0d3f60cbcaa3bfee219" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;require.ensure&lt;/code&gt;, this will split the given &lt;code&gt;dependencies&lt;/code&gt; into a separate bundle that will be loaded asynchronously. The &lt;code&gt;callback&lt;/code&gt; will be called with the exports of each dependency in the &lt;code&gt;dependencies&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;require.ensure&lt;/code&gt; と同様に、これは指定された &lt;code&gt;dependencies&lt;/code&gt; を非同期に読み込まれる個別のバンドルに分割します。 &lt;code&gt;callback&lt;/code&gt; 、各依存関係の輸出で呼び出されます &lt;code&gt;dependencies&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="a6f3a1e1f354c12ccb006ee799c04b144ddcef6f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;require.resolve&lt;/code&gt;, but this won't pull the &lt;code&gt;module&lt;/code&gt; into the bundle. It's what is considered a &quot;weak&quot; dependency.</source>
          <target state="translated">&lt;code&gt;require.resolve&lt;/code&gt; に似ていますが、これは &lt;code&gt;module&lt;/code&gt; をバンドルに取り込みません。これは「弱い」依存関係と見なされるものです。</target>
        </trans-unit>
        <trans-unit id="ad3bed5255e15cf06c8e58c3b2f55a6213edbc8a" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;a href=&quot;#modulegenerator&quot;&gt;&lt;code&gt;module.generator&lt;/code&gt;&lt;/a&gt;, you can configure all parsers' options in one place with a &lt;code&gt;module.parser&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78dd3565d3ca963abe26663b75b346fcd6a29d2" translate="yes" xml:space="preserve">
          <source>Similar to the above one, but instead of moving common modules into the parent (which increases initial load time) a new async-loaded additional commons chunk is used. This is automatically downloaded in parallel when the additional chunk is downloaded.</source>
          <target state="translated">上のものと似ていますが、共通モジュールを親モジュールに移動させる代わりに (初期ロード時間が長くなります)、新しい非同期ロードされた追加のコモンズチャンクが使われます。これは、追加チャンクがダウンロードされると自動的に並行してダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="4e92266701ea10892f677e28bfdc47255c556b12" translate="yes" xml:space="preserve">
          <source>Similar to what &lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; does, the CSS can be extracted in one CSS file using &lt;code&gt;optimization.splitChunks.cacheGroups&lt;/code&gt;.</source>
          <target state="translated">何と同様に&lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;抽出・テキストのWebPACK -プラグイン&lt;/a&gt;し、CSSを使用して1つのCSSファイルに抽出することができます &lt;code&gt;optimization.splitChunks.cacheGroups&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0785bdec9485cf289af79fa7f5707a7cbc518227" translate="yes" xml:space="preserve">
          <source>Similarly, to use &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, you would first install the necessary dependencies:</source>
          <target state="translated">同様に、&lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;を使用するには、最初に必要な依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="b94d5c09e893d4a1b6cd3665645a9a5ad691a741" translate="yes" xml:space="preserve">
          <source>Similarly, to use &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, you would first install the necessary dependencies:</source>
          <target state="translated">Similarly, to use &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, you would first install the necessary dependencies:</target>
        </trans-unit>
        <trans-unit id="6a54cd02186f2196136676e6657a0a8d2e2d69ed" translate="yes" xml:space="preserve">
          <source>Similarly, when implementing the HMR interface in a module, you can describe what should happen when the module is updated. However, in most cases, it's not mandatory to write HMR code in every module. If a module has no HMR handlers, the update bubbles up. This means that a single handler can update a complete module tree. If a single module from the tree is updated, the entire set of dependencies is reloaded.</source>
          <target state="translated">同様に、モジュールにHMRインターフェースを実装する場合、モジュールが更新されたときに何が起こるかを記述することができます。しかし、ほとんどの場合、すべてのモジュールに HMR コードを記述することは必須ではありません。モジュールに HMR ハンドラがない場合、更新はバブルアップします。これは、単一のハンドラが完全なモジュールツリーを更新できることを意味します。ツリーから1つのモジュールが更新されると、依存関係のセット全体がリロードされます。</target>
        </trans-unit>
        <trans-unit id="de72ea9e60d3b0389fb7873c1d21268b088fa6d4" translate="yes" xml:space="preserve">
          <source>Simple</source>
          <target state="translated">Simple</target>
        </trans-unit>
        <trans-unit id="7efef6f32b9aee814f5e770483cd5c591105998c" translate="yes" xml:space="preserve">
          <source>Simple Configuration</source>
          <target state="translated">簡単な設定</target>
        </trans-unit>
        <trans-unit id="60a582320e94817aedf4402d3e0f6ea7c1579518" translate="yes" xml:space="preserve">
          <source>Simple function:</source>
          <target state="translated">シンプルな機能です。</target>
        </trans-unit>
        <trans-unit id="9d259e43250c65f449f9618bcb5b8a51f9bbc632" translate="yes" xml:space="preserve">
          <source>Simple prefetch example can be having a &lt;code&gt;HomePage&lt;/code&gt; component, which renders a &lt;code&gt;LoginButton&lt;/code&gt; component which then on demand loads a &lt;code&gt;LoginModal&lt;/code&gt; component after being clicked.</source>
          <target state="translated">簡単なプリフェッチの例としては、 &lt;code&gt;HomePage&lt;/code&gt; コンポーネントがあります。これは、 &lt;code&gt;LoginButton&lt;/code&gt; コンポーネントをレンダリングし、クリックされた後、 &lt;code&gt;LoginModal&lt;/code&gt; に応じてLoginModalコンポーネントをロードします。</target>
        </trans-unit>
        <trans-unit id="228f8b425edcd5e53740dc2dc5966c87dfe007ce" translate="yes" xml:space="preserve">
          <source>Simple preload example can be having a &lt;code&gt;Component&lt;/code&gt; which always depends on a big library that should be in a separate chunk.</source>
          <target state="translated">単純なプリロードの例は、常に別のチャンクにある大きなライブラリに依存する &lt;code&gt;Component&lt;/code&gt; を持つことです。</target>
        </trans-unit>
        <trans-unit id="65ef5410be05cb89e60cabc1457ef7dabf6053ba" translate="yes" xml:space="preserve">
          <source>Simple rule: The URL of your &lt;a href=&quot;#output-path&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; from the view of the HTML page.</source>
          <target state="translated">単純なルール：HTMLページのビューからの&lt;a href=&quot;#output-path&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt;のURL 。</target>
        </trans-unit>
        <trans-unit id="108cb0eddad410e28385d9656de34dafdf3cd100" translate="yes" xml:space="preserve">
          <source>Simple rule: The URL of your &lt;a href=&quot;#outputpath&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; from the view of the HTML page.</source>
          <target state="translated">Simple rule: The URL of your &lt;a href=&quot;#outputpath&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt; from the view of the HTML page.</target>
        </trans-unit>
        <trans-unit id="032755a968e7ece37d3cc818cc27da692b03e94f" translate="yes" xml:space="preserve">
          <source>Simple rule: one entry point per HTML page. SPA: one entry point, MPA: multiple entry points.</source>
          <target state="translated">シンプルなルール:HTMLページごとに1つのエントリーポイント。SPA:1つのエントリーポイント、MPA:複数のエントリーポイント。</target>
        </trans-unit>
        <trans-unit id="2163d6e3cc7a704a0ac03d8177c00be1cef615d4" translate="yes" xml:space="preserve">
          <source>Simply add configuration object to &lt;code&gt;module.loaders&lt;/code&gt; like this.</source>
          <target state="translated">このように設定オブジェクトを &lt;code&gt;module.loaders&lt;/code&gt; に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="9e333f564bbc6ec1a19005225d29ff4dc69603b0" translate="yes" xml:space="preserve">
          <source>Simply add the loader to your configuration, and pass options.</source>
          <target state="translated">ローダを設定に追加し、オプションを渡すだけです。</target>
        </trans-unit>
        <trans-unit id="eaa02916805fbceffac33dedf00c7cf53d8a601a" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime&quot;&gt;@babel/plugin-transform-runtime&lt;/a&gt; includes a polyfill that includes a custom &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator-runtime&lt;/a&gt; and &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt;, the following usual shimming method using &lt;code&gt;webpack.ProvidePlugin&lt;/code&gt; will not work:</source>
          <target state="translated">Since &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime&quot;&gt;@babel/plugin-transform-runtime&lt;/a&gt; includes a polyfill that includes a custom &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator-runtime&lt;/a&gt; and &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt;, the following usual shimming method using &lt;code&gt;webpack.ProvidePlugin&lt;/code&gt; will not work:</target>
        </trans-unit>
        <trans-unit id="bac32b0b00e4110b7f59981ae16e482f54e07a1f" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime&quot;&gt;babel-plugin-transform-runtime&lt;/a&gt; includes a polyfill that includes a custom &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator runtime&lt;/a&gt; and &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core.js&lt;/a&gt;, the following usual shimming method using &lt;code&gt;webpack.ProvidePlugin&lt;/code&gt; will not work:</source>
          <target state="translated">以来&lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime&quot;&gt;バベル・プラグイン・変換・ランタイムは、&lt;/a&gt;カスタム含まポリフィル含ま&lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;蓄冷ランタイム&lt;/a&gt;と&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;のCore.js&lt;/a&gt;使用して、次の通常のシミング方法を &lt;code&gt;webpack.ProvidePlugin&lt;/code&gt; を動作しませんが。</target>
        </trans-unit>
        <trans-unit id="3a0b4df48665f5e543e93aae4f1b0aef234d64a1" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;plugins&lt;/strong&gt; can take arguments/options, you must pass a &lt;code&gt;new&lt;/code&gt; instance to the &lt;code&gt;plugins&lt;/code&gt; property in your webpack configuration.</source>
          <target state="translated">以来&lt;strong&gt;、プラグインは、&lt;/strong&gt;引数/オプションを取ることができ、あなたは合格しなければならない &lt;code&gt;new&lt;/code&gt; のインスタンス &lt;code&gt;plugins&lt;/code&gt; お使いのWebPACKの設定でプロパティを。</target>
        </trans-unit>
        <trans-unit id="c47b0ddd56229a4a114c9593ea4904aa88d461bb" translate="yes" xml:space="preserve">
          <source>Since Sass implementations don't provide &lt;a href=&quot;https://github.com/sass/libsass/issues/532&quot;&gt;url rewriting&lt;/a&gt;, all linked assets must be relative to the output.</source>
          <target state="translated">Since Sass implementations don't provide &lt;a href=&quot;https://github.com/sass/libsass/issues/532&quot;&gt;url rewriting&lt;/a&gt;, all linked assets must be relative to the output.</target>
        </trans-unit>
        <trans-unit id="ee55505b5c3ca34633f55534b5500cc482530643" translate="yes" xml:space="preserve">
          <source>Since Sass/&lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;libsass&lt;/a&gt; does not provide &lt;a href=&quot;https://github.com/sass/libsass/issues/532&quot;&gt;url rewriting&lt;/a&gt;, all linked assets must be relative to the output.</source>
          <target state="translated">Sass / &lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;libsass&lt;/a&gt;は&lt;a href=&quot;https://github.com/sass/libsass/issues/532&quot;&gt;url rewriteを&lt;/a&gt;提供しないため、リンクされたすべてのアセットは出力に関連している必要があります。</target>
        </trans-unit>
        <trans-unit id="60e97caba52671f289097a28a68dae3cc71a6345" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;vendor&lt;/code&gt; and &lt;code&gt;manifest&lt;/code&gt; chunk use a different definition for &lt;code&gt;minChunks&lt;/code&gt;, you need to invoke the plugin twice:</source>
          <target state="translated">以来 &lt;code&gt;vendor&lt;/code&gt; と &lt;code&gt;manifest&lt;/code&gt; チャンク用の異なる定義 &lt;code&gt;minChunks&lt;/code&gt; 、あなたは二回、プラグインを起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="e0e01bc51c7f3118838decb471d7c0cbe67b4287" translate="yes" xml:space="preserve">
          <source>Since there are multiple versions of each environment the following guidelines apply:</source>
          <target state="translated">各環境には複数のバージョンが存在するため、以下のガイドラインが適用されます。</target>
        </trans-unit>
        <trans-unit id="63d3dcb6e6d740fa309f368882b0ddc2f47f11f3" translate="yes" xml:space="preserve">
          <source>Since version 4 webpack runs optimizations for you depending on the chosen &lt;a href=&quot;mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt;, still all optimizations are available for manual configuration and overrides.</source>
          <target state="translated">Since version 4 webpack runs optimizations for you depending on the chosen &lt;a href=&quot;mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt;, still all optimizations are available for manual configuration and overrides.</target>
        </trans-unit>
        <trans-unit id="68b40dfd90a4960aa92216b835ec43d3ce1464fc" translate="yes" xml:space="preserve">
          <source>Since version 4 webpack runs optimizations for you depending on the chosen &lt;code&gt;mode&lt;/code&gt;, still all optimizations are available for manual configuration and overrides.</source>
          <target state="translated">バージョン4のWebpackは、選択した &lt;code&gt;mode&lt;/code&gt; 応じて最適化を実行するため、すべての最適化を手動で構成してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="e1c8a9fc91d1ca9652793041de879c53fc83eb09" translate="yes" xml:space="preserve">
          <source>Since version 4.0.0, &lt;strong&gt;webpack does not require a configuration file&lt;/strong&gt; to bundle your project, nevertheless it is &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;incredibly configurable&lt;/a&gt; to better fit your needs.</source>
          <target state="translated">バージョン4.0.0以降、&lt;strong&gt;webpackは&lt;/strong&gt;プロジェクトをバンドルする&lt;strong&gt;ための構成ファイル&lt;/strong&gt;を&lt;strong&gt;必要としませんが、&lt;/strong&gt;ニーズに合わせて&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;非常に構成可能&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4d7330118ce17eeace0a81f5c1f63842a0bb939b" translate="yes" xml:space="preserve">
          <source>Since version 4.0.0, &lt;strong&gt;webpack does not require a configuration file&lt;/strong&gt; to bundle your project. Nevertheless, it is &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;incredibly configurable&lt;/a&gt; to better fit your needs.</source>
          <target state="translated">Since version 4.0.0, &lt;strong&gt;webpack does not require a configuration file&lt;/strong&gt; to bundle your project. Nevertheless, it is &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;incredibly configurable&lt;/a&gt; to better fit your needs.</target>
        </trans-unit>
        <trans-unit id="f86b2dfe84249c763566d31412fce8ad477d3a22" translate="yes" xml:space="preserve">
          <source>Since we already have the absolute path to the file, no further resolution is required.</source>
          <target state="translated">すでにファイルへの絶対パスがあるので、それ以上の解決は必要ありません。</target>
        </trans-unit>
        <trans-unit id="31fa5f1a5887e32b08b6b1cc470dbe36b39d7423" translate="yes" xml:space="preserve">
          <source>Since webpack 2.5.0, placeholders are evaluated in the &lt;code&gt;banner&lt;/code&gt; string:</source>
          <target state="translated">webpack 2.5.0以降、プレースホルダーは &lt;code&gt;banner&lt;/code&gt; 文字列で評価されます。</target>
        </trans-unit>
        <trans-unit id="56e03fc77f95de6cfa56121e0a49127882f8d418" translate="yes" xml:space="preserve">
          <source>Since webpack 3.0.0, the &lt;code&gt;node&lt;/code&gt; option may be set to &lt;code&gt;false&lt;/code&gt; to completely turn off the &lt;code&gt;NodeStuffPlugin&lt;/code&gt; and &lt;code&gt;NodeSourcePlugin&lt;/code&gt; plugins.</source>
          <target state="translated">webpack 3.0.0以降では、 &lt;code&gt;node&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定して、 &lt;code&gt;NodeStuffPlugin&lt;/code&gt; および &lt;code&gt;NodeSourcePlugin&lt;/code&gt; プラグインを完全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="ab7f4f44fb8fbaea0afab9a8a29574cba00b7a36" translate="yes" xml:space="preserve">
          <source>Since webpack 3.0.0, the &lt;code&gt;node&lt;/code&gt; option may be set to &lt;code&gt;false&lt;/code&gt; to completely turn off the &lt;code&gt;NodeStuffPlugin&lt;/code&gt; plugin.</source>
          <target state="translated">Since webpack 3.0.0, the &lt;code&gt;node&lt;/code&gt; option may be set to &lt;code&gt;false&lt;/code&gt; to completely turn off the &lt;code&gt;NodeStuffPlugin&lt;/code&gt; plugin.</target>
        </trans-unit>
        <trans-unit id="f15ee1dcf21fba9cafb7c1f19fc6a788cacb6f32" translate="yes" xml:space="preserve">
          <source>Since webpack 3.1.0, you may specify an object for &lt;code&gt;library&lt;/code&gt; for differing names per targets:</source>
          <target state="translated">webpack 3.1.0以降、ターゲットごとに異なる名前の &lt;code&gt;library&lt;/code&gt; オブジェクトを指定できます。</target>
        </trans-unit>
        <trans-unit id="7499b38c1514e9f68a948f8d810614a8dc13cafb" translate="yes" xml:space="preserve">
          <source>Since webpack 4, the formerly &lt;code&gt;this.options.context&lt;/code&gt; is provided as &lt;code&gt;this.rootContext&lt;/code&gt;.</source>
          <target state="translated">Since webpack 4, the formerly &lt;code&gt;this.options.context&lt;/code&gt; is provided as &lt;code&gt;this.rootContext&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="577525b5867fcb39dc12c1d6345741d98772adb2" translate="yes" xml:space="preserve">
          <source>Since webpack 5, &lt;code&gt;this.getOptions&lt;/code&gt; is available in loader context. It substitutes &lt;code&gt;getOptions&lt;/code&gt; method from &lt;a href=&quot;https://github.com/webpack/loader-utils#getoptions&quot;&gt;loader-utils&lt;/a&gt;.</source>
          <target state="translated">Since webpack 5, &lt;code&gt;this.getOptions&lt;/code&gt; is available in loader context. It substitutes &lt;code&gt;getOptions&lt;/code&gt; method from &lt;a href=&quot;https://github.com/webpack/loader-utils#getoptions&quot;&gt;loader-utils&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4e0e70d21107e6ffd8cf279e47034a71ba23c5b8" translate="yes" xml:space="preserve">
          <source>Since webpack 5, passing an entry name to &lt;code&gt;{cacheGroup}.test&lt;/code&gt; and using a name of an existing chunk for &lt;code&gt;{cacheGroup}.name&lt;/code&gt; is no longer allowed.</source>
          <target state="translated">Since webpack 5, passing an entry name to &lt;code&gt;{cacheGroup}.test&lt;/code&gt; and using a name of an existing chunk for &lt;code&gt;{cacheGroup}.name&lt;/code&gt; is no longer allowed.</target>
        </trans-unit>
        <trans-unit id="a0b0aa6b4272b3381b66ed9e4051b3488dd8cbcc" translate="yes" xml:space="preserve">
          <source>Since webpack v4, the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; was removed in favor of &lt;code&gt;optimization.splitChunks&lt;/code&gt;.</source>
          <target state="translated">webpack v4以降、 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は、 &lt;code&gt;optimization.splitChunks&lt;/code&gt; を優先して削除されました。</target>
        </trans-unit>
        <trans-unit id="1fd21bb9ba937354974f09d1c7c8c2610575161b" translate="yes" xml:space="preserve">
          <source>Since webpack v5 &lt;code&gt;normalModuleLoader&lt;/code&gt; hook was removed. Now to access the loader use &lt;code&gt;NormalModule.getCompilationHooks(compilation).loader&lt;/code&gt; instead.</source>
          <target state="translated">Since webpack v5 &lt;code&gt;normalModuleLoader&lt;/code&gt; hook was removed. Now to access the loader use &lt;code&gt;NormalModule.getCompilationHooks(compilation).loader&lt;/code&gt; instead.</target>
        </trans-unit>
        <trans-unit id="497b435af752c8851a2653fa69911a3902989e2f" translate="yes" xml:space="preserve">
          <source>Single Entry (Shorthand) Syntax</source>
          <target state="translated">シングルエントリ(短縮形)構文</target>
        </trans-unit>
        <trans-unit id="12648a472da82a76e13a7b45f3f9ba1100ec982c" translate="yes" xml:space="preserve">
          <source>Single Entry Syntax is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (i.e. a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.</source>
          <target state="translated">シングルエントリー構文は、1 つのエントリーポイント (すなわちライブラリ)を持つアプリケーションやツールのための webpack 構成を素早く設定したい場合に最適な選択肢です。しかし、この構文では構成を拡張したり拡大したりする柔軟性はあまりありません。</target>
        </trans-unit>
        <trans-unit id="8279243d4ea238c13b2c6c9ed189bf5c690d8d3d" translate="yes" xml:space="preserve">
          <source>SingleEntryPlugin</source>
          <target state="translated">SingleEntryPlugin</target>
        </trans-unit>
        <trans-unit id="17f0884db1f4f5bba641845fc74ff055d4257f99" translate="yes" xml:space="preserve">
          <source>Size threshold at which splitting is enforced and other restrictions (minRemainingSize, maxAsyncRequests, maxInitialRequests) are ignored.</source>
          <target state="translated">分割が強制されるサイズのしきい値と、他の制限 (minRemainingSize,maxAsyncRequests,maxInitialRequests)は無視されます。</target>
        </trans-unit>
        <trans-unit id="97eb6389589df226213ed12bd022910728530b14" translate="yes" xml:space="preserve">
          <source>Skip the emitting phase when there are compilation errors</source>
          <target state="translated">コンパイルエラーがある場合は、エミッティングフェーズをスキップします。</target>
        </trans-unit>
        <trans-unit id="e497bfa0fd175cf475f6b30dd2c52dfb46e6c197" translate="yes" xml:space="preserve">
          <source>Smaller = Faster</source>
          <target state="translated">小さくなる=速くなる</target>
        </trans-unit>
        <trans-unit id="4d0de72510f1fdef4e68c9fbb95544e223a852e9" translate="yes" xml:space="preserve">
          <source>Snapshots for build dependencies when using the persistent cache.</source>
          <target state="translated">永続的なキャッシュを使用する場合のビルド依存関係のスナップショット。</target>
        </trans-unit>
        <trans-unit id="6393161b34b7256189675a67e8eb40c7224e2c40" translate="yes" xml:space="preserve">
          <source>Snapshots for building modules.</source>
          <target state="translated">モジュールを構築するためのスナップショット。</target>
        </trans-unit>
        <trans-unit id="6694e2d090159ac8add71af08f37b4bb31d6ba7c" translate="yes" xml:space="preserve">
          <source>Snapshots for resolving of build dependencies when using the persistent cache.</source>
          <target state="translated">永続的なキャッシュを使用する場合のビルド依存関係を解決するためのスナップショット。</target>
        </trans-unit>
        <trans-unit id="e80991b294c42a889b4cf7cab32dd3322e1860ef" translate="yes" xml:space="preserve">
          <source>Snapshots for resolving of requests.</source>
          <target state="translated">リクエスト解決のためのスナップショット</target>
        </trans-unit>
        <trans-unit id="bcc197ab00cbf259b4527808fb5fef5b6337c025" translate="yes" xml:space="preserve">
          <source>So depending on which event you &lt;code&gt;tap&lt;/code&gt; into, the plugin may run differently. For example, when hooking into the &lt;code&gt;compile&lt;/code&gt; stage, only the synchronous &lt;code&gt;tap&lt;/code&gt; method can be used:</source>
          <target state="translated">So depending on which event you &lt;code&gt;tap&lt;/code&gt; into, the plugin may run differently. For example, when hooking into the &lt;code&gt;compile&lt;/code&gt; stage, only the synchronous &lt;code&gt;tap&lt;/code&gt; method can be used:</target>
        </trans-unit>
        <trans-unit id="10c5787a9c54232eef85c2d844281db59a4bd375" translate="yes" xml:space="preserve">
          <source>So depending which event you &lt;code&gt;tap&lt;/code&gt; into, the plugin may run differently. For example, when hooking into &lt;code&gt;compile&lt;/code&gt; stage, only the synchronous &lt;code&gt;tap&lt;/code&gt; method can be used:</source>
          <target state="translated">したがって、どのイベントを &lt;code&gt;tap&lt;/code&gt; するかによって、プラグインの動作が異なる場合があります。たとえば、 &lt;code&gt;compile&lt;/code&gt; ステージにフックする場合、使用できるのは同期 &lt;code&gt;tap&lt;/code&gt; メソッドのみです。</target>
        </trans-unit>
        <trans-unit id="58cd91eff5be8cc2a5a1355abc2ac7555d4f4780" translate="yes" xml:space="preserve">
          <source>So far we've manually included all our assets in our &lt;code&gt;index.html&lt;/code&gt; file, but as your application grows and once you start &lt;a href=&quot;caching&quot;&gt;using hashes in filenames&lt;/a&gt; and outputting &lt;a href=&quot;code-splitting&quot;&gt;multiple bundles&lt;/a&gt;, it will be difficult to keep managing your &lt;code&gt;index.html&lt;/code&gt; file manually. However, a few plugins exist that will make this process much easier to manage.</source>
          <target state="translated">これまでのところ、すべてのアセットを手動で &lt;code&gt;index.html&lt;/code&gt; ファイルに含めてきましたが、アプリケーションが大きくなり&lt;a href=&quot;caching&quot;&gt;、ファイル名にハッシュを使用して&lt;/a&gt;&lt;a href=&quot;code-splitting&quot;&gt;複数のバンドル&lt;/a&gt;を出力し始めると、 &lt;code&gt;index.html&lt;/code&gt; ファイルを手動で管理し続けることは困難になります。ただし、このプロセスを管理しやすくするプラグインがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="5d6e19d3e275c6f61a080e96e703a390e5f68085" translate="yes" xml:space="preserve">
          <source>So far, we've been viewing the output by going directly to the local file system. Typically though, a real user accesses a web app over a network; their browser talking to a &lt;strong&gt;server&lt;/strong&gt; which will serve up the required assets (e.g. &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;, and &lt;code&gt;.css&lt;/code&gt; files).</source>
          <target state="translated">これまでは、ローカルファイルシステムに直接アクセスして出力を表示してきました。ただし、通常、実際のユーザーはネットワークを介してWebアプリにアクセスします。必要なアセット（ &lt;code&gt;.html&lt;/code&gt; 、 &lt;code&gt;.js&lt;/code&gt; 、 &lt;code&gt;.css&lt;/code&gt; ファイルなど）を提供する&lt;strong&gt;サーバー&lt;/strong&gt;と通信するブラウザー。</target>
        </trans-unit>
        <trans-unit id="95019c6a782da25d705699c3eb48b8d5bf24705d" translate="yes" xml:space="preserve">
          <source>So if you want to see ESLint warnings in console during development using &lt;code&gt;WebpackDevServer&lt;/code&gt; remove &lt;code&gt;NoErrorsPlugin&lt;/code&gt; from webpack config.</source>
          <target state="translated">したがって、 &lt;code&gt;WebpackDevServer&lt;/code&gt; を使用して開発中にコンソールでESLint警告を表示したい場合は、 &lt;code&gt;NoErrorsPlugin&lt;/code&gt; からNoErrorsPluginを削除してください。</target>
        </trans-unit>
        <trans-unit id="7b46dcd69a49e970d5b52492d5e957dbf20a0952" translate="yes" xml:space="preserve">
          <source>So let's test what the current experience is like using a simple server. Let's use the &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt; package: &lt;code&gt;npm install http-server --save-dev&lt;/code&gt;. We'll also amend the &lt;code&gt;scripts&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; to add in a &lt;code&gt;start&lt;/code&gt; script:</source>
          <target state="translated">では、シンプルなサーバーを使用して、現在のエクスペリエンスがどのようなものかをテストしてみましょう。&lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt;パッケージを使用してみましょう： &lt;code&gt;npm install http-server --save-dev&lt;/code&gt; 。また、 &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;scripts&lt;/code&gt; セクションを修正して、 &lt;code&gt;start&lt;/code&gt; スクリプトを追加します。</target>
        </trans-unit>
        <trans-unit id="5ce3cc3efd25a62a2948115da3652c7ae89c4acb" translate="yes" xml:space="preserve">
          <source>So now we're pulling in our CSS, but what about our images like backgrounds and icons? As of webpack 5, using the built-in &lt;a href=&quot;asset-modules&quot;&gt;Asset Modules&lt;/a&gt; we can easily incorporate those in our system as well:</source>
          <target state="translated">So now we're pulling in our CSS, but what about our images like backgrounds and icons? As of webpack 5, using the built-in &lt;a href=&quot;asset-modules&quot;&gt;Asset Modules&lt;/a&gt; we can easily incorporate those in our system as well:</target>
        </trans-unit>
        <trans-unit id="ba4289ea84f8f4d0175d8d74412c93e181745c7d" translate="yes" xml:space="preserve">
          <source>So now we're pulling in our CSS, but what about our images like backgrounds and icons? Using the &lt;a href=&quot;../loaders/file-loader&quot;&gt;file-loader&lt;/a&gt; we can easily incorporate those in our system as well:</source>
          <target state="translated">では、CSSを取り込みますが、背景やアイコンなどの画像はどうでしょうか。&lt;a href=&quot;../loaders/file-loader&quot;&gt;ファイルローダー&lt;/a&gt;を使用して、システムに簡単に組み込むこともできます。</target>
        </trans-unit>
        <trans-unit id="44da497b118d9848267e6b84f67e032a297cc683" translate="yes" xml:space="preserve">
          <source>So now you have a little bit of insight about how webpack works behind the scenes. &quot;But, how does this affect me?&quot;, you might ask. The simple answer is that most of the time it doesn't. The runtime will do its thing, utilizing the manifest, and everything will appear to just magically work once your application hits the browser. However, if you decide to improve the performance of your projects by utilizing browser caching, this process will all of a sudden become an important thing to understand.</source>
          <target state="translated">これで、webpackが裏でどのように機能しているか、少しは理解できるようになりました。&quot;でも、これは私にどのような影響を与えるのでしょうか?&quot; とあなたは尋ねるかもしれません。簡単な答えは、ほとんどの場合は影響がないということです。ランタイムはマニフェストを利用してその事を行い、アプリケーションがブラウザにヒットすると、すべてが魔法のように動作するように見えます。しかし、ブラウザのキャッシュを利用してプロジェクトのパフォーマンスを向上させようと決めた場合、このプロセスは突然、理解しなければならない重要なことになります。</target>
        </trans-unit>
        <trans-unit id="10baeed4fc445ebdf29a83716129062c75380166" translate="yes" xml:space="preserve">
          <source>So now you have a little bit of insight about how webpack works behind the scenes. &quot;But, how does this affect me?&quot;, you might ask. The simple answer is that most of the time it doesn't. The runtime will do its thing, utilizing the manifest, and everything will appear to just magically work once your application hits the browser. However, if you decide to improve your projects performance by utilizing browser caching, this process will all of a sudden become an important thing to understand.</source>
          <target state="translated">これで、webpackが裏でどのように機能しているか、少しは理解できるようになりました。&quot;でも、これは私にどのような影響を与えるのでしょうか?&quot; とあなたは尋ねるかもしれません。簡単な答えは、ほとんどの場合は影響がないということです。ランタイムはマニフェストを利用してそのことを行い、アプリケーションがブラウザにヒットすると、すべてが魔法のように動作するように見えます。しかし、ブラウザのキャッシュを利用してプロジェクトのパフォーマンスを向上させようと決めた場合、このプロセスは突然、理解すべき重要なものになるでしょう。</target>
        </trans-unit>
        <trans-unit id="8811715af11f4dc22420e4ef2694617f93e100b9" translate="yes" xml:space="preserve">
          <source>So we're now at the happy point of having produced a Service Worker. What's next?</source>
          <target state="translated">ということで、サービスワーカーを輩出できたという嬉しいポイントに到達しました。次は何をするのかな?</target>
        </trans-unit>
        <trans-unit id="5e140431e2d6b71d292f90c69aa4f89d709763fe" translate="yes" xml:space="preserve">
          <source>So we're using webpack to bundle our modular application which yields a deployable &lt;code&gt;/dist&lt;/code&gt; directory. Once the contents of &lt;code&gt;/dist&lt;/code&gt; have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;caching&lt;/a&gt;. This allows sites to load faster with less unnecessary network traffic. However, it can also cause headaches when you need new code to be picked up.</source>
          <target state="translated">So we're using webpack to bundle our modular application which yields a deployable &lt;code&gt;/dist&lt;/code&gt; directory. Once the contents of &lt;code&gt;/dist&lt;/code&gt; have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;caching&lt;/a&gt;. This allows sites to load faster with less unnecessary network traffic. However, it can also cause headaches when you need new code to be picked up.</target>
        </trans-unit>
        <trans-unit id="19448037ca889443fe3d0c814ea05c08dbaa6850" translate="yes" xml:space="preserve">
          <source>So we're using webpack to bundle our modular application which yields a deployable &lt;code&gt;/dist&lt;/code&gt; directory. Once the contents of &lt;code&gt;/dist&lt;/code&gt; have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called &lt;a href=&quot;https://searchstorage.techtarget.com/definition/cache&quot;&gt;caching&lt;/a&gt;. This allows sites to load faster with less unnecessary network traffic, however it can also cause headaches when you need new code to be picked up.</source>
          <target state="translated">したがって、webpackを使用して、デプロイ可能な &lt;code&gt;/dist&lt;/code&gt; ディレクトリを生成するモジュール式アプリケーションをバンドルしています。 &lt;code&gt;/dist&lt;/code&gt; のコンテンツがサーバーにデプロイされると、クライアント（通常はブラウザー）がそのサーバーにアクセスして、サイトとそのアセットを取得します。最後のステップは時間がかかる可能性があるため、ブラウザーは&lt;a href=&quot;https://searchstorage.techtarget.com/definition/cache&quot;&gt;キャッシング&lt;/a&gt;と呼ばれる手法を使用します。これにより、不要なネットワークトラフィックが少なくなり、サイトの読み込みが速くなりますが、新しいコードを取得する必要があるときに頭痛の種になることもあります。</target>
        </trans-unit>
        <trans-unit id="19ffcfa776ae1426094b768366541d8226da7895" translate="yes" xml:space="preserve">
          <source>So we've cued up our &quot;dead code&quot; to be dropped by using the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax, but we still need to drop it from the bundle. To do that, set the &lt;code&gt;mode&lt;/code&gt; configuration option to &lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;&lt;code&gt;production&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">So we've cued up our &quot;dead code&quot; to be dropped by using the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax, but we still need to drop it from the bundle. To do that, set the &lt;code&gt;mode&lt;/code&gt; configuration option to &lt;a href=&quot;../configuration/mode#mode-production&quot;&gt; &lt;code&gt;production&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cc580457d44ca3f0fccb18e8a90fb8ae243eeccb" translate="yes" xml:space="preserve">
          <source>So we've cued up our &quot;dead code&quot; to be dropped by using the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax, but we still need to drop it from the bundle. To do that, we'll use the &lt;code&gt;-p&lt;/code&gt; (production) webpack compilation flag to enable &lt;code&gt;UglifyJSPlugin&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;import&lt;/code&gt; と &lt;code&gt;export&lt;/code&gt; 構文を使用して「デッドコード」を削除するように指示しましたが、それでもバンドルから削除する必要があります。これを行うには、 &lt;code&gt;-p&lt;/code&gt; （本番）webpackコンパイルフラグを使用してUglifyJSPluginを有効にし &lt;code&gt;UglifyJSPlugin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eff4c42c5e1ebd3152856a43de2d039710fe0ef1" translate="yes" xml:space="preserve">
          <source>So what about other assets like fonts? The Asset Modules will take any file you load through them and output it to your build directory. This means we can use them for any kind of file, including fonts. Let's update our &lt;code&gt;webpack.config.js&lt;/code&gt; to handle font files:</source>
          <target state="translated">So what about other assets like fonts? The Asset Modules will take any file you load through them and output it to your build directory. This means we can use them for any kind of file, including fonts. Let's update our &lt;code&gt;webpack.config.js&lt;/code&gt; to handle font files:</target>
        </trans-unit>
        <trans-unit id="02d98868e9fba9245aabc21fac3c93011835485d" translate="yes" xml:space="preserve">
          <source>So what about other assets like fonts? The file and url loaders will take any file you load through them and output it to your build directory. This means we can use them for any kind of file, including fonts. Let's update our &lt;code&gt;webpack.config.js&lt;/code&gt; to handle font files:</source>
          <target state="translated">では、フォントなどの他のアセットはどうでしょうか？ファイルおよびURLローダーは、それらを介してロードするすべてのファイルを取得し、ビルドディレクトリに出力します。これは、フォントを含むあらゆる種類のファイルに使用できることを意味します。フォントファイルを処理するように &lt;code&gt;webpack.config.js&lt;/code&gt; を更新しましょう。</target>
        </trans-unit>
        <trans-unit id="e62b04886f5dc15927b1ffe710caeecd62c0379f" translate="yes" xml:space="preserve">
          <source>So while webpack's core focus is bundling, there are a variety of extensions that can enable you to use it for jobs typical of a task runner. Integrating a separate tool adds complexity, so be sure to weigh the pros and cons before going forward.</source>
          <target state="translated">そのため、webpackの中心的な焦点はバンドルですが、タスクランナーの典型的なジョブに使用できるようにするための様々な拡張機能があります。別のツールを統合すると複雑さが増すので、先に進む前に長所と短所を秤にかけるようにしましょう。</target>
        </trans-unit>
        <trans-unit id="d1e5009e238a4bad3ef05684680da843d8779ff6" translate="yes" xml:space="preserve">
          <source>So why might a loader take advantage of the &quot;pitching&quot; phase?</source>
          <target state="translated">では、なぜローダーが「ピッチング」の局面を利用する可能性があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="fe488648ec5012f734cc9841c5f3ff7d83733d41" translate="yes" xml:space="preserve">
          <source>So, once your application hits the browser in the form of an &lt;code&gt;index.html&lt;/code&gt; file, some bundles, and a variety of other assets, what does it look like? That &lt;code&gt;/src&lt;/code&gt; directory you meticulously laid out is now gone, so how does webpack manage the interaction between all of your modules? This is where the manifest data comes in...</source>
          <target state="translated">それで、アプリケーションが &lt;code&gt;index.html&lt;/code&gt; ファイル、いくつかのバンドル、およびその他のさまざまなアセットの形でブラウザーにヒットすると、どのように見えますか？これ &lt;code&gt;/src&lt;/code&gt; にあなたは細心の注意を払ってレイアウトされたディレクトリが今なくなっているので、どのようにWebPACKのあなたのすべてのモジュール間の相互作用を管理していますか？これがマニフェストデータの出所です...</target>
        </trans-unit>
        <trans-unit id="145b40facbc75f15ef63692477108cef3bda6d8f" translate="yes" xml:space="preserve">
          <source>So, what we've learned is that in order to take advantage of &lt;em&gt;tree shaking&lt;/em&gt;, you must...</source>
          <target state="translated">だから、私たちが学んだことは、&lt;em&gt;ツリーの揺れ&lt;/em&gt;を利用するためには、あなたは...</target>
        </trans-unit>
        <trans-unit id="f4481462b06413ebd81e68e2e4acc8de9e7d99ba" translate="yes" xml:space="preserve">
          <source>So, with the following configuration...</source>
          <target state="translated">そこで、以下のような構成で</target>
        </trans-unit>
        <trans-unit id="2020a1b36d31f40fb51a15e6678fec25e6225a02" translate="yes" xml:space="preserve">
          <source>Some legacy modules rely on &lt;code&gt;this&lt;/code&gt; being the &lt;code&gt;window&lt;/code&gt; object. Let's update our &lt;code&gt;index.js&lt;/code&gt; so this is the case:</source>
          <target state="translated">一部のレガシーモジュールは、 &lt;code&gt;this&lt;/code&gt; が &lt;code&gt;window&lt;/code&gt; オブジェクトであることに依存しています。 &lt;code&gt;index.js&lt;/code&gt; を更新してみましょう。</target>
        </trans-unit>
        <trans-unit id="fdbfcf6e2fd8eed232593b845e306ba7435e17dd" translate="yes" xml:space="preserve">
          <source>Some of these values are suited for development and some for production. For development you typically want fast Source Maps at the cost of bundle size, but for production you want separate Source Maps that are accurate and support minimizing.</source>
          <target state="translated">これらの値の中には、開発用に適したものと本番用に適したものがあります。開発用には、通常、バンドル サイズを犠牲にして高速なソース マップが必要ですが、プロダクション用には、正確で最小化をサポートする個別のソース マップが必要です。</target>
        </trans-unit>
        <trans-unit id="02ad40664b6fc632706c755cfc3229760fe1b330" translate="yes" xml:space="preserve">
          <source>Some of what has been described above can also be achieved by using the command line. For example, the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag will include the &lt;code&gt;TerserPlugin&lt;/code&gt; behind the scenes. The &lt;code&gt;--define process.env.NODE_ENV=&quot;'production'&quot;&lt;/code&gt; will do the same for the &lt;code&gt;DefinePlugin&lt;/code&gt; instance described above. And, &lt;code&gt;webpack -p&lt;/code&gt; will automatically invoke both those flags and thus the plugins to be included.</source>
          <target state="translated">Some of what has been described above can also be achieved by using the command line. For example, the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag will include the &lt;code&gt;TerserPlugin&lt;/code&gt; behind the scenes. The &lt;code&gt;--define process.env.NODE_ENV=&quot;'production'&quot;&lt;/code&gt; will do the same for the &lt;code&gt;DefinePlugin&lt;/code&gt; instance described above. And, &lt;code&gt;webpack -p&lt;/code&gt; will automatically invoke both those flags and thus the plugins to be included.</target>
        </trans-unit>
        <trans-unit id="fb26ce8cc86dbfea643748ddc6d2bc17426133a4" translate="yes" xml:space="preserve">
          <source>Some of what has been described above is also achievable via the command line. For example, the &lt;code&gt;--optimize-minimize&lt;/code&gt; flag will include the &lt;code&gt;UglifyJSPlugin&lt;/code&gt; behind the scenes. The &lt;code&gt;--define process.env.NODE_ENV=&quot;'production'&quot;&lt;/code&gt; will do the same for the &lt;code&gt;DefinePlugin&lt;/code&gt; instance described above. And, &lt;code&gt;webpack -p&lt;/code&gt; will automatically invoke both those flags and thus the plugins to be included.</source>
          <target state="translated">上記の内容の一部は、コマンドラインでも実行できます。たとえば、 &lt;code&gt;--optimize-minimize&lt;/code&gt; フラグには、 &lt;code&gt;UglifyJSPlugin&lt;/code&gt; が含まれます。 &lt;code&gt;--define process.env.NODE_ENV=&quot;'production'&quot;&lt;/code&gt; のために同じことをするでしょう &lt;code&gt;DefinePlugin&lt;/code&gt; のインスタンスは、前述しました。そして、 &lt;code&gt;webpack -p&lt;/code&gt; は自動的にこれらのフラグの両方を呼び出し、したがって、含まれるプラグインを呼び出します。</target>
        </trans-unit>
        <trans-unit id="21759e4d2e1f7c7025ce0a09dce7a2473a20f08f" translate="yes" xml:space="preserve">
          <source>Some text editors have a &quot;safe write&quot; function that might interfere with some of the following tools. Read &lt;a href=&quot;#adjusting-your-text-editor&quot;&gt;Adjusting Your Text Editor&lt;/a&gt; for a solution to these issues.</source>
          <target state="translated">Some text editors have a &quot;safe write&quot; function that might interfere with some of the following tools. Read &lt;a href=&quot;#adjusting-your-text-editor&quot;&gt;Adjusting Your Text Editor&lt;/a&gt; for a solution to these issues.</target>
        </trans-unit>
        <trans-unit id="ac4e4baeeb778d89bc9b4402d323e503a39f4162" translate="yes" xml:space="preserve">
          <source>Some text editors have a &quot;safe write&quot; function that might interfere with some of the following tools. Read &lt;a href=&quot;#adjusting-your-text-editor&quot;&gt;Adjusting Your text Editor&lt;/a&gt; for a solution to these issues.</source>
          <target state="translated">一部のテキストエディターには、「安全な書き込み」機能があり、次のツールの一部と干渉する可能性があります。これらの問題の解決策については、&lt;a href=&quot;#adjusting-your-text-editor&quot;&gt;テキストエディターの調整をお&lt;/a&gt;読みください。</target>
        </trans-unit>
        <trans-unit id="0bf67f20d45a3a5370b2a285ca9c2d95700ec9fe" translate="yes" xml:space="preserve">
          <source>Sometimes you don't want to proxy everything. It is possible to bypass the proxy based on the return value of a function.</source>
          <target state="translated">すべてをプロキシにしたくない場合もあるでしょう。関数の戻り値に基づいてプロキシをバイパスすることが可能です。</target>
        </trans-unit>
        <trans-unit id="f62ebe1d014e418ab38c032f83eac4d518dfc608" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to use a combination of the above syntaxes. This can be done in the following manner:</source>
          <target state="translated">上記の構文を組み合わせて使用したい場合もあるでしょう。これは次のような方法で行うことができます。</target>
        </trans-unit>
        <trans-unit id="d3199416626a4109ce446b38ef450734fa400bc9" translate="yes" xml:space="preserve">
          <source>Sort the chunks in from most to least important.</source>
          <target state="translated">チャンクを最も重要なものから最も重要でないものまで並べ替えます。</target>
        </trans-unit>
        <trans-unit id="9aecb68f08700b120a7d90d0debe00264d3a327c" translate="yes" xml:space="preserve">
          <source>Sort the modules in from most to least important.</source>
          <target state="translated">モジュールを最も重要なものから最も重要でないものへと並べ替えます。</target>
        </trans-unit>
        <trans-unit id="ad59d6b2747838fd265cdbb0bb67cc8efff4ade3" translate="yes" xml:space="preserve">
          <source>Sorting fields</source>
          <target state="translated">ソートフィールド</target>
        </trans-unit>
        <trans-unit id="b1d254566526dbbd891bc147d36c80c6c32df941" translate="yes" xml:space="preserve">
          <source>Sorts the assets list by property in asset</source>
          <target state="translated">アセットリストをプロパティ別にソートします。</target>
        </trans-unit>
        <trans-unit id="9606d3765b363987df978d5ebfb80f8098bec19b" translate="yes" xml:space="preserve">
          <source>Sorts the chunks list by property in chunk</source>
          <target state="translated">チャンクのプロパティ別にチャンクリストをソートします。</target>
        </trans-unit>
        <trans-unit id="db344fb262e131e1a3c6db3bf098ff78609e7d35" translate="yes" xml:space="preserve">
          <source>Sorts the modules list by property in module</source>
          <target state="translated">モジュールのプロパティでモジュールリストをソートします。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="25d717b62000ca836854004fccb956e8d68a764b" translate="yes" xml:space="preserve">
          <source>Source Mapping</source>
          <target state="translated">ソースマッピング</target>
        </trans-unit>
        <trans-unit id="5774da7b802f7af9150c4273aaf57f7387c8eb1d" translate="yes" xml:space="preserve">
          <source>Source Maps</source>
          <target state="translated">ソースマップ</target>
        </trans-unit>
        <trans-unit id="01473e7480f3a28583f07fc0a4f767d7c42b9c76" translate="yes" xml:space="preserve">
          <source>Source assets</source>
          <target state="translated">原資産</target>
        </trans-unit>
        <trans-unit id="30e86ffbe954826823e73c12cfc55bea76005dff" translate="yes" xml:space="preserve">
          <source>Source maps</source>
          <target state="translated">ソースマップ</target>
        </trans-unit>
        <trans-unit id="b2587eef1d6187c444242c987752c5ffb686abef" translate="yes" xml:space="preserve">
          <source>Source maps are always produced.</source>
          <target state="translated">ソースマップは必ず作成されます。</target>
        </trans-unit>
        <trans-unit id="d84d17e0e9668faad9c456ecf99d44d8405a021f" translate="yes" xml:space="preserve">
          <source>Source maps are really expensive. Do you really need them?</source>
          <target state="translated">ソースマップは本当に高価です。本当に必要なの?</target>
        </trans-unit>
        <trans-unit id="1e6cb736dce56ea37e670ea09f5f1f998b68e681" translate="yes" xml:space="preserve">
          <source>Source maps is a useful debugging tool that allows you to view where the minified code originated from.</source>
          <target state="translated">ソースマップは、ミニ化されたコードがどこから来たのかを確認できる便利なデバッグツールです。</target>
        </trans-unit>
        <trans-unit id="ff1f1aa681b89c1378ecf41cee15808c010c6906" translate="yes" xml:space="preserve">
          <source>SourceMapDevToolPlugin</source>
          <target state="translated">SourceMapDevToolPlugin</target>
        </trans-unit>
        <trans-unit id="75f613a38c9a77eef52fd9053dd584ff64dc4df0" translate="yes" xml:space="preserve">
          <source>Special cases</source>
          <target state="translated">特殊なケース</target>
        </trans-unit>
        <trans-unit id="c0d8c0c0a4ec9262cc89dc60627539d515b79764" translate="yes" xml:space="preserve">
          <source>Specific Tooling Issues</source>
          <target state="translated">特定のツーリングの問題</target>
        </trans-unit>
        <trans-unit id="b3aa5454f5b0dfb11123b5819bc91609022f1d6c" translate="yes" xml:space="preserve">
          <source>Specific to CSS</source>
          <target state="translated">CSSに特化した</target>
        </trans-unit>
        <trans-unit id="20209bd671a2bcc3f315bd80119ae9043244bd92" translate="yes" xml:space="preserve">
          <source>Specifically per matching resource(s):</source>
          <target state="translated">具体的には、一致するリソースごとに。</target>
        </trans-unit>
        <trans-unit id="b7c38b38615d145709664c9bc8f6c6a62a6b10b9" translate="yes" xml:space="preserve">
          <source>Specifies a Regular Expression to one or many parts of the target file path. The capture groups can be reused in the &lt;code&gt;name&lt;/code&gt; property using &lt;code&gt;[N]&lt;/code&gt;&lt;a href=&quot;https://github.com/webpack-contrib/file-loader#placeholders&quot;&gt;placeholder&lt;/a&gt;.</source>
          <target state="translated">ターゲットファイルパスの1つ以上の部分に正規表現を指定します。キャプチャグループは、 &lt;code&gt;[N]&lt;/code&gt; &lt;a href=&quot;https://github.com/webpack-contrib/file-loader#placeholders&quot;&gt;プレースホルダー&lt;/a&gt;を使用して &lt;code&gt;name&lt;/code&gt; プロパティで再利用できます。</target>
        </trans-unit>
        <trans-unit id="879965cc2c1f185af16e722049ebaed20e3790a2" translate="yes" xml:space="preserve">
          <source>Specifies a custom file context.</source>
          <target state="translated">カスタム ファイル コンテキストを指定します。</target>
        </trans-unit>
        <trans-unit id="84ab6058ed40a01e379f0582c1af643799c945a0" translate="yes" xml:space="preserve">
          <source>Specifies a custom filename template for the target file(s) using the query parameter &lt;code&gt;name&lt;/code&gt;. For example, to copy a file from your &lt;code&gt;context&lt;/code&gt; directory into the output directory retaining the full directory structure, you might use:</source>
          <target state="translated">クエリパラメータ &lt;code&gt;name&lt;/code&gt; を使用して、ターゲットファイルのカスタムファイル名テンプレートを指定します。たとえば、 &lt;code&gt;context&lt;/code&gt; ディレクトリから完全なディレクトリ構造を保持する出力ディレクトリにファイルをコピーするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0d2a03ce829912f1b848b145a807705d0a1c6b72" translate="yes" xml:space="preserve">
          <source>Specifies a custom filename template for the target file(s) using the query parameter &lt;code&gt;name&lt;/code&gt;. For example, to emit a file from your &lt;code&gt;context&lt;/code&gt; directory into the output directory retaining the full directory structure, you might use:</source>
          <target state="translated">Specifies a custom filename template for the target file(s) using the query parameter &lt;code&gt;name&lt;/code&gt; . For example, to emit a file from your &lt;code&gt;context&lt;/code&gt; directory into the output directory retaining the full directory structure, you might use:</target>
        </trans-unit>
        <trans-unit id="4737e83f85676161760e83a8109850e13f958c82" translate="yes" xml:space="preserve">
          <source>Specifies a custom filename template for the target file(s).</source>
          <target state="translated">ターゲットファイルのカスタムファイル名テンプレートを指定します。</target>
        </trans-unit>
        <trans-unit id="f888fd9f4ae8f865e053c4251564cf41bd88dbfc" translate="yes" xml:space="preserve">
          <source>Specifies a custom function to post-process the generated public path. This can be used to prepend or append dynamic global variables that are only available at runtime, like &lt;code&gt;__webpack_public_path__&lt;/code&gt;. This would not be possible with just &lt;code&gt;publicPath&lt;/code&gt;, since it stringifies the values.</source>
          <target state="translated">Specifies a custom function to post-process the generated public path. This can be used to prepend or append dynamic global variables that are only available at runtime, like &lt;code&gt;__webpack_public_path__&lt;/code&gt; . This would not be possible with just &lt;code&gt;publicPath&lt;/code&gt; , since it stringifies the values.</target>
        </trans-unit>
        <trans-unit id="e9e06b40f3daa25d5c4784cbc01ecbbbde1fbf80" translate="yes" xml:space="preserve">
          <source>Specifies a custom public path for the external resources like images, files, etc</source>
          <target state="translated">画像やファイルなどの外部リソースのカスタム パブリック パスを指定します。</target>
        </trans-unit>
        <trans-unit id="571ab491da4f39c64e632d1a037fcaadcf6f405b" translate="yes" xml:space="preserve">
          <source>Specifies a custom public path for the external resources like images, files, etc inside &lt;code&gt;CSS&lt;/code&gt;. Works like &lt;a href=&quot;../configuration/output#outputpublicpath&quot;&gt;&lt;code&gt;output.publicPath&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Specifies a custom public path for the external resources like images, files, etc inside &lt;code&gt;CSS&lt;/code&gt; . Works like &lt;a href=&quot;../configuration/output#outputpublicpath&quot;&gt; &lt;code&gt;output.publicPath&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d1a1617f78af92e2776d9c995c243f41a529a4f" translate="yes" xml:space="preserve">
          <source>Specifies a custom public path for the target file(s).</source>
          <target state="translated">対象のファイルのカスタム パブリック パスを指定します。</target>
        </trans-unit>
        <trans-unit id="cac6202929181ac3f54bb3e72b77ff4be95286fa" translate="yes" xml:space="preserve">
          <source>Specifies a different &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; file to pick up. Use this if you want to specify something different from &lt;code&gt;webpack.config.js&lt;/code&gt;, which is one of the default.</source>
          <target state="translated">Specifies a different &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; file to pick up. Use this if you want to specify something different from &lt;code&gt;webpack.config.js&lt;/code&gt; , which is one of the default.</target>
        </trans-unit>
        <trans-unit id="72ec7449f82690a64ea1fe85c71ca14dd2c8bc13" translate="yes" xml:space="preserve">
          <source>Specifies a different &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; file to pick up. Use this if you want to specify something different than &lt;code&gt;webpack.config.js&lt;/code&gt;, which is the default.</source>
          <target state="translated">取得する別の&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;構成&lt;/a&gt;ファイルを指定します。デフォルトの &lt;code&gt;webpack.config.js&lt;/code&gt; とは異なるものを指定する場合は、これを使用します。</target>
        </trans-unit>
        <trans-unit id="5b04472ec1e127e502c166b357787f38f6d2c875" translate="yes" xml:space="preserve">
          <source>Specifies an absolute path to a valid configuration file on the filesystem.</source>
          <target state="translated">ファイルシステム上の有効な設定ファイルへの絶対パスを指定します。</target>
        </trans-unit>
        <trans-unit id="9d0798e89c25e70403528df1315a7715cfa2c0de" translate="yes" xml:space="preserve">
          <source>Specifies an alternative loader to use when a target file's size exceeds the limit set in the &lt;code&gt;limit&lt;/code&gt; option.</source>
          <target state="translated">ターゲットファイルのサイズが &lt;code&gt;limit&lt;/code&gt; オプションで設定された制限を超えたときに使用する代替ローダーを指定します。</target>
        </trans-unit>
        <trans-unit id="a7237c6247c2519ce77a983f1f4ba8132658dd5b" translate="yes" xml:space="preserve">
          <source>Specifies an alternative loader to use when a target file's size exceeds the limit.</source>
          <target state="translated">対象ファイルのサイズが制限を超えた場合に使用する代替ローダを指定します。</target>
        </trans-unit>
        <trans-unit id="0863024865f449432b82f45424554cf2cdd37989" translate="yes" xml:space="preserve">
          <source>Specifies an filesystem path from which point &lt;code&gt;config-loader&lt;/code&gt; will begin looking for a configuration file.</source>
          <target state="translated">&lt;code&gt;config-loader&lt;/code&gt; が構成ファイルの検索を開始するファイルシステムパスを指定します。</target>
        </trans-unit>
        <trans-unit id="973530054bf4151384693c547dda2192964092e7" translate="yes" xml:space="preserve">
          <source>Specifies compiler(s) to use when loading modules from files containing the configuration. For example:</source>
          <target state="translated">設定を含むファイルからモジュールをロードするときに使用するコンパイラを指定します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b2aa5e351074790f824f05fd8370fb0799e435f2" translate="yes" xml:space="preserve">
          <source>Specifies the category of the loader. No value means normal loader.</source>
          <target state="translated">ローダのカテゴリを指定します。値がない場合は通常のローダーを意味します。</target>
        </trans-unit>
        <trans-unit id="63a43b523ce3399edd3a02250f01cfe1ee483bc6" translate="yes" xml:space="preserve">
          <source>Specifies the default type of externals. &lt;code&gt;amd&lt;/code&gt;, &lt;code&gt;umd&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;jsonp&lt;/code&gt; externals &lt;strong&gt;depend on the &lt;a href=&quot;output#outputlibrarytarget&quot;&gt;&lt;code&gt;output.libraryTarget&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; being set to the same value e.g. you can only consume &lt;code&gt;amd&lt;/code&gt; externals within an &lt;code&gt;amd&lt;/code&gt; library.</source>
          <target state="translated">Specifies the default type of externals. &lt;code&gt;amd&lt;/code&gt; , &lt;code&gt;umd&lt;/code&gt; , &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;jsonp&lt;/code&gt; externals &lt;strong&gt;depend on the &lt;a href=&quot;output#outputlibrarytarget&quot;&gt; &lt;code&gt;output.libraryTarget&lt;/code&gt; &lt;/a&gt;&lt;/strong&gt; being set to the same value e.g. you can only consume &lt;code&gt;amd&lt;/code&gt; externals within an &lt;code&gt;amd&lt;/code&gt; library.</target>
        </trans-unit>
        <trans-unit id="3ac9a41991ed0aa09f47012142ec97f2cfd01a04" translate="yes" xml:space="preserve">
          <source>Specifies the hash method to use for hashing the file content.</source>
          <target state="translated">ファイルの内容のハッシュに使用するハッシュ方法を指定します。</target>
        </trans-unit>
        <trans-unit id="241834609b4e73c0844125b7003ab35c9b37d2ee" translate="yes" xml:space="preserve">
          <source>Specifies the hash method to use for hashing the file content. See &lt;a href=&quot;https://github.com/webpack-contrib/file-loader#hashes&quot;&gt;Hashes&lt;/a&gt;.</source>
          <target state="translated">ファイルコンテンツのハッシュに使用するハッシュ方式を指定します。&lt;a href=&quot;https://github.com/webpack-contrib/file-loader#hashes&quot;&gt;ハッシュを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7d20c8b08d4e7f04f72cf541a97ca7abcb26683c" translate="yes" xml:space="preserve">
          <source>Specifies whether or not to generate a relative URI for each target file context.</source>
          <target state="translated">各ターゲットファイルコンテキストに対して相対URIを生成するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="aadbb1e7be1626e4e57d5c300b33bb34352ea804" translate="yes" xml:space="preserve">
          <source>Specify a custom formatter to format errors printed to the console.</source>
          <target state="translated">コンソールに印刷されるエラーをフォーマットするカスタムフォーマッタを指定します。</target>
        </trans-unit>
        <trans-unit id="142d235620d4e56dc3197a346383ae6c9fd4753e" translate="yes" xml:space="preserve">
          <source>Specify a different &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; file other than &lt;code&gt;webpack.config.js&lt;/code&gt;, which is one of the defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de147d31cbdba74b03e5be6c5bc6dcd0a10d8b5" translate="yes" xml:space="preserve">
          <source>Specify a field, such as &lt;code&gt;browser&lt;/code&gt;, to be parsed according to &lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;this specification&lt;/a&gt;.</source>
          <target state="translated">Specify a field, such as &lt;code&gt;browser&lt;/code&gt; , to be parsed according to &lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;this specification&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cd1c6cd3673817c28ee3bd855e67cc875f4df81e" translate="yes" xml:space="preserve">
          <source>Specify a field, such as &lt;code&gt;browser&lt;/code&gt;, to be parsed according to &lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;this specification&lt;/a&gt;. Default:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;この仕様&lt;/a&gt;に従って解析される &lt;code&gt;browser&lt;/code&gt; などのフィールドを指定します。デフォルト：</target>
        </trans-unit>
        <trans-unit id="c66b711f602441dbfe41affd2e1c9c62b4084b4b" translate="yes" xml:space="preserve">
          <source>Specify a filesystem path where target the file(s) will be placed.</source>
          <target state="translated">ターゲットのファイルを配置するファイルシステムのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="def47f765d5d900063865ea3bc250bfaf5f7cfae" translate="yes" xml:space="preserve">
          <source>Specify a filesystem path where the target file(s) will be placed.</source>
          <target state="translated">対象となるファイルを配置するファイルシステムのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="955d1a09a26d8e964dd4a5fe391a094a4f5a9066" translate="yes" xml:space="preserve">
          <source>Specify a host to use. By default this is &lt;code&gt;localhost&lt;/code&gt;. If you want your server to be accessible externally, specify it like this:</source>
          <target state="translated">使用するホストを指定します。デフォルトでは、これは &lt;code&gt;localhost&lt;/code&gt; です。サーバーに外部からアクセスできるようにするには、次のように指定します。</target>
        </trans-unit>
        <trans-unit id="962f9334d32168a1695a00f6b73cd97b234eacd4" translate="yes" xml:space="preserve">
          <source>Specify a host to use. If you want your server to be accessible externally, specify it like this:</source>
          <target state="translated">使用するホストを指定します。サーバーを外部からアクセスできるようにしたい場合は、このように指定します。</target>
        </trans-unit>
        <trans-unit id="271a9f6f25b95c50650ef30d0a047e823cfd2194" translate="yes" xml:space="preserve">
          <source>Specify a page to navigate to when opening the browser.</source>
          <target state="translated">ブラウザを開いたときに移動するページを指定します。</target>
        </trans-unit>
        <trans-unit id="527e84c85d0d2c1cdc4ede8f54ad03ad9844d94e" translate="yes" xml:space="preserve">
          <source>Specify a port number to listen for requests on:</source>
          <target state="translated">リクエストをリッスンするポート番号を指定します。</target>
        </trans-unit>
        <trans-unit id="aecc957d17245d32f10a464590c3ede23c1175e1" translate="yes" xml:space="preserve">
          <source>Specify a whole group of dependencies using a path to the &lt;code&gt;directory&lt;/code&gt;, an option to &lt;code&gt;includeSubdirs&lt;/code&gt;, a &lt;code&gt;filter&lt;/code&gt; for more fine grained control of the modules included, and a &lt;code&gt;mode&lt;/code&gt; to define the way how loading will work. Underlying modules can then be easily resolved later on:</source>
          <target state="translated">Specify a whole group of dependencies using a path to the &lt;code&gt;directory&lt;/code&gt; , an option to &lt;code&gt;includeSubdirs&lt;/code&gt; , a &lt;code&gt;filter&lt;/code&gt; for more fine grained control of the modules included, and a &lt;code&gt;mode&lt;/code&gt; to define the way how loading will work. Underlying modules can then be easily resolved later on:</target>
        </trans-unit>
        <trans-unit id="5c2e525c6e4e62824f782a966fe6452c405bfe5d" translate="yes" xml:space="preserve">
          <source>Specify a whole group of dependencies using a path to the &lt;code&gt;directory&lt;/code&gt;, an option to &lt;code&gt;includeSubdirs&lt;/code&gt;, and a &lt;code&gt;filter&lt;/code&gt; for more fine grained control of the modules included. These can then be easily resolved later on:</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; へのパス、 &lt;code&gt;includeSubdirs&lt;/code&gt; へのオプション、および含まれるモジュールのより詳細な制御のための &lt;code&gt;filter&lt;/code&gt; を使用して、依存関係のグループ全体を指定します。これらは後で簡単に解決できます。</target>
        </trans-unit>
        <trans-unit id="7a772bf8d2af5c9062ab6018821e45b195a180ae" translate="yes" xml:space="preserve">
          <source>Specify directories, files, or globs. Must be relative to &lt;code&gt;options.context&lt;/code&gt;. Directories are traveresed recursively looking for files matching &lt;code&gt;options.extensions&lt;/code&gt;. File and glob patterns ignore &lt;code&gt;options.extensions&lt;/code&gt;.</source>
          <target state="translated">Specify directories, files, or globs. Must be relative to &lt;code&gt;options.context&lt;/code&gt; . Directories are traveresed recursively looking for files matching &lt;code&gt;options.extensions&lt;/code&gt; . File and glob patterns ignore &lt;code&gt;options.extensions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e256865ced61a786b7c7bb3c7c7dae3e942ab2c9" translate="yes" xml:space="preserve">
          <source>Specify extensions that should be checked.</source>
          <target state="translated">チェックする拡張子を指定します。</target>
        </trans-unit>
        <trans-unit id="d4d40a758d31cf3670f88bdf3adad1a02c4d3c9a" translate="yes" xml:space="preserve">
          <source>Specify externals by layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24787c755da4255293166f31b91e5e1d3ed7cd0" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;encoding&lt;/code&gt; which the file will be inlined with. If unspecified the &lt;code&gt;encoding&lt;/code&gt; will be &lt;code&gt;base64&lt;/code&gt;.</source>
          <target state="translated">Specify the &lt;code&gt;encoding&lt;/code&gt; which the file will be inlined with. If unspecified the &lt;code&gt;encoding&lt;/code&gt; will be &lt;code&gt;base64&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa186276c23f8d7b34ec39edd8c5e808ffb08f61" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;mimetype&lt;/code&gt; which the file will be inlined with. If unspecified the &lt;code&gt;mimetype&lt;/code&gt; value will be used from &lt;a href=&quot;https://github.com/jshttp/mime-types&quot;&gt;mime-types&lt;/a&gt;.</source>
          <target state="translated">Specify the &lt;code&gt;mimetype&lt;/code&gt; which the file will be inlined with. If unspecified the &lt;code&gt;mimetype&lt;/code&gt; value will be used from &lt;a href=&quot;https://github.com/jshttp/mime-types&quot;&gt;mime-types&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c6f4f98b083e85b8dfa64e3ef4caa73817951792" translate="yes" xml:space="preserve">
          <source>Specify the Mode</source>
          <target state="translated">モードの指定</target>
        </trans-unit>
        <trans-unit id="9f8c555874edaf2657d6b410369932d946537f12" translate="yes" xml:space="preserve">
          <source>Specify the config file location to be used by &lt;code&gt;stylelint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stylelint&lt;/code&gt; が使用する構成ファイルの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="043687a40f1e1a35319239c9857f4824854524c1" translate="yes" xml:space="preserve">
          <source>Specify the encoding which the file will be inlined with.</source>
          <target state="translated">ファイルをインライン化するエンコーディングを指定します。</target>
        </trans-unit>
        <trans-unit id="2c2248e21bef3373a587a20483d4a33ba6006988" translate="yes" xml:space="preserve">
          <source>Specify the file from which to read the last set of records. This can be used to rename a records file. See the example below.</source>
          <target state="translated">最後のレコードのセットを読み込むファイルを指定します。これは、レコードファイルの名前を変更するために使用することができます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="660220cad54fafde7483850048e9faabf5357dbe" translate="yes" xml:space="preserve">
          <source>Specify the files and/or directories to exclude. Must be relative to &lt;code&gt;options.context&lt;/code&gt;.</source>
          <target state="translated">Specify the files and/or directories to exclude. Must be relative to &lt;code&gt;options.context&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d5ea5952f4d6885786cb8e9ac22874494977d69" translate="yes" xml:space="preserve">
          <source>Specify the formatter that you would like to use to format your results. See &lt;a href=&quot;https://stylelint.io/user-guide/node-api#formatter&quot;&gt;formatter option&lt;/a&gt;.</source>
          <target state="translated">Specify the formatter that you would like to use to format your results. See &lt;a href=&quot;https://stylelint.io/user-guide/node-api#formatter&quot;&gt;formatter option&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b2c64f6ba34b6840ed8dc33850b6cbac5edb9c68" translate="yes" xml:space="preserve">
          <source>Specify the glob pattern for finding files. Must be relative to &lt;code&gt;options.context&lt;/code&gt;.</source>
          <target state="translated">ファイルを検索するためのグロブパターンを指定します。 &lt;code&gt;options.context&lt;/code&gt; に対して相対的である必要があります。</target>
        </trans-unit>
        <trans-unit id="03831ce2ce199547c2061b3e6b6160fa80871a8a" translate="yes" xml:space="preserve">
          <source>Specify the layer in which the module should be placed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf6be52bba84219b9fda6d0c8bcf12622deac70" translate="yes" xml:space="preserve">
          <source>Specify where the records should be written. The following example shows how you might use this option in combination with &lt;code&gt;recordsInputPath&lt;/code&gt; to rename a records file:</source>
          <target state="translated">レコードを書き込む場所を指定します。次の例は、このオプションを &lt;code&gt;recordsInputPath&lt;/code&gt; と組み合わせて使用して、レコードファイルの名前を変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5e547294117895ac538e6241ce8725cf87ce5f4a" translate="yes" xml:space="preserve">
          <source>Specifying the maximum size of a file in bytes.</source>
          <target state="translated">ファイルの最大サイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="bc4274265bc2b427a0ab3c9fac43c1ce79052b5a" translate="yes" xml:space="preserve">
          <source>Speed up development by &lt;b&gt;automatically installing &amp;amp; saving dependencies&lt;/b&gt; with Webpack.</source>
          <target state="translated">Webpackを使用して&lt;b&gt;依存関係&lt;/b&gt;を&lt;b&gt;自動的にインストールおよび保存する&lt;/b&gt;ことにより、開発をスピードアップし&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="5e0d508b45713ed3d17ba20bb553920ced378bf5" translate="yes" xml:space="preserve">
          <source>Split Chunks: Example 1</source>
          <target state="translated">チャンクを分割します。例1</target>
        </trans-unit>
        <trans-unit id="3221d75c5e6671a885b0095735c2a4e694aa6fb8" translate="yes" xml:space="preserve">
          <source>Split Chunks: Example 2</source>
          <target state="translated">チャンクを分割します。例2</target>
        </trans-unit>
        <trans-unit id="bc88172c53c17dcca4ce42ad64663c8d8bacffa1" translate="yes" xml:space="preserve">
          <source>Split Chunks: Example 3</source>
          <target state="translated">チャンクを分割します。例3</target>
        </trans-unit>
        <trans-unit id="d5ebf585bdd5fc69fcb794642a985b1162dc9b3f" translate="yes" xml:space="preserve">
          <source>Split bundles in order to drastically improve build time</source>
          <target state="translated">ビルド時間を大幅に短縮するためのバンドルの分割</target>
        </trans-unit>
        <trans-unit id="927453c2e794e1ac63fb3f57afdf09e07718d4bf" translate="yes" xml:space="preserve">
          <source>Split out the given &lt;code&gt;dependencies&lt;/code&gt; to a separate bundle that that will be loaded asynchronously. When using CommonJS module syntax, this is the only way to dynamically load dependencies. Meaning, this code can be run within execution, only loading the &lt;code&gt;dependencies&lt;/code&gt; if certain conditions are met.</source>
          <target state="translated">指定された &lt;code&gt;dependencies&lt;/code&gt; を、非同期で読み込まれる別のバンドルに分割します。CommonJSモジュール構文を使用する場合、これが依存関係を動的にロードする唯一の方法です。つまり、このコードは実行中に実行でき、特定の条件が満たされた場合にのみ &lt;code&gt;dependencies&lt;/code&gt; ロードします。</target>
        </trans-unit>
        <trans-unit id="88b68ea85c77cd800f83368a5c32bcf5ed80dd09" translate="yes" xml:space="preserve">
          <source>Split out the given &lt;code&gt;dependencies&lt;/code&gt; to a separate bundle that will be loaded asynchronously. When using CommonJS module syntax, this is the only way to dynamically load dependencies. Meaning, this code can be run within execution, only loading the &lt;code&gt;dependencies&lt;/code&gt; if certain conditions are met.</source>
          <target state="translated">Split out the given &lt;code&gt;dependencies&lt;/code&gt; to a separate bundle that will be loaded asynchronously. When using CommonJS module syntax, this is the only way to dynamically load dependencies. Meaning, this code can be run within execution, only loading the &lt;code&gt;dependencies&lt;/code&gt; if certain conditions are met.</target>
        </trans-unit>
        <trans-unit id="6c9cee0a9ceb9ae2830482807a857b1955aaab84" translate="yes" xml:space="preserve">
          <source>Split your code into vendor and application.</source>
          <target state="translated">コードをベンダーとアプリケーションに分割します。</target>
        </trans-unit>
        <trans-unit id="49c4c7e4435b9c73d00e501300fe2e540e68c446" translate="yes" xml:space="preserve">
          <source>SplitChunksPlugin</source>
          <target state="translated">SplitChunksPlugin</target>
        </trans-unit>
        <trans-unit id="82cebd0cac45c28817fad5367f93a5bced93dca0" translate="yes" xml:space="preserve">
          <source>Sponsors</source>
          <target state="translated">Sponsors</target>
        </trans-unit>
        <trans-unit id="627875cde8c51637fd6f7811def1a5cfc9d84fdb" translate="yes" xml:space="preserve">
          <source>Standalone Loader</source>
          <target state="translated">スタンドアロンローダー</target>
        </trans-unit>
        <trans-unit id="0a9111e91eb868049e2bc0cfc450c81abf9a41ef" translate="yes" xml:space="preserve">
          <source>Standalone Plugin</source>
          <target state="translated">スタンドアロン プラグイン</target>
        </trans-unit>
        <trans-unit id="f0c190c767162b85b2737615c113b0c355e166fe" translate="yes" xml:space="preserve">
          <source>Standard output</source>
          <target state="translated">標準出力</target>
        </trans-unit>
        <trans-unit id="92916447b1d556f23631a7576a1a04b6192188a7" translate="yes" xml:space="preserve">
          <source>Start changing the &lt;code&gt;console.log&lt;/code&gt; statement in &lt;code&gt;print.js&lt;/code&gt;, and you should see the following output in the browser console (don't worry about that &lt;code&gt;button.onclick = printMe&lt;/code&gt; output for now, we will also update that part later).</source>
          <target state="translated">Start changing the &lt;code&gt;console.log&lt;/code&gt; statement in &lt;code&gt;print.js&lt;/code&gt; , and you should see the following output in the browser console (don't worry about that &lt;code&gt;button.onclick = printMe&lt;/code&gt; output for now, we will also update that part later).</target>
        </trans-unit>
        <trans-unit id="0cf2ba46a63f72b57431c5fc427239fef3027329" translate="yes" xml:space="preserve">
          <source>Start changing the &lt;code&gt;console.log&lt;/code&gt; statement in &lt;code&gt;print.js&lt;/code&gt;, and you should see the following output in the browser console.</source>
          <target state="translated">&lt;code&gt;print.js&lt;/code&gt; の &lt;code&gt;console.log&lt;/code&gt; ステートメントの変更を開始すると、ブラウザコンソールに次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="d22d076c1e8d90d7483f91c0fc6fa1cb22953b81" translate="yes" xml:space="preserve">
          <source>Starting CLI v4 and webpack v5, CLI imports the entire configuration schema from webpack core to allow tuning almost every configuration option from the command line.</source>
          <target state="translated">CLI v4とwebpack v5から、CLIはwebpackコアから設定スキーマ全体をインポートし、コマンドラインからほぼすべての設定オプションをチューニングできるようになりました。</target>
        </trans-unit>
        <trans-unit id="58e7d62d7bd658b8a8605105a1796904b717d894" translate="yes" xml:space="preserve">
          <source>Starting with &lt;code&gt;less-loader&lt;/code&gt; 4, you can now choose between Less' builtin resolver and webpack's resolver. By default, webpack's resolver is used.</source>
          <target state="translated">以降では &lt;code&gt;less-loader&lt;/code&gt; 4、あなたは今より少ない組み込みリゾルバとのWebPACKのリゾルバの間で選択することができます。デフォルトでは、webpackのリゾルバーが使用されます。</target>
        </trans-unit>
        <trans-unit id="0bffa02f42fb4f0bca025609a90d7321a00c4243" translate="yes" xml:space="preserve">
          <source>Starting with webpack 4, the formerly &lt;code&gt;this.options.context&lt;/code&gt; is provided as &lt;code&gt;this.rootContext&lt;/code&gt;.</source>
          <target state="translated">Webpack 4以降、以前は &lt;code&gt;this.options.context&lt;/code&gt; がthis.rootContextとして提供され &lt;code&gt;this.rootContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ceb1f582ce2cefa5129f9f6b527d3fe56348d88" translate="yes" xml:space="preserve">
          <source>Statically &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;export&lt;/code&gt;s of another module.</source>
          <target state="translated">別のモジュールの &lt;code&gt;export&lt;/code&gt; 静的に &lt;code&gt;import&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="be763e9aba2af6b8baabada85d5e26c043c93fed" translate="yes" xml:space="preserve">
          <source>Stats</source>
          <target state="translated">Stats</target>
        </trans-unit>
        <trans-unit id="4a308b7413e7f6d7fc81466205aa2f57a128e0a3" translate="yes" xml:space="preserve">
          <source>Stats Data</source>
          <target state="translated">統計データ</target>
        </trans-unit>
        <trans-unit id="f69d3c28b5a6791ada7c1ca0a84062a6d7b8b064" translate="yes" xml:space="preserve">
          <source>Stats Object</source>
          <target state="translated">統計オブジェクト</target>
        </trans-unit>
        <trans-unit id="604f77a78acb0ea9173e4be9e0d1b78afe0f269a" translate="yes" xml:space="preserve">
          <source>Stats Options</source>
          <target state="translated">統計オプション</target>
        </trans-unit>
        <trans-unit id="c392dcfa524294a937f6252ae93ca59892e9e8e2" translate="yes" xml:space="preserve">
          <source>Stats Presets</source>
          <target state="translated">統計プリセット</target>
        </trans-unit>
        <trans-unit id="9f3748f4e17121939aba10060bea304c0fa9d44f" translate="yes" xml:space="preserve">
          <source>Stats presets affect logging output</source>
          <target state="translated">統計プリセットはロギング出力に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="fb275fd06cf16b7ace28649a477c15f702dcd76f" translate="yes" xml:space="preserve">
          <source>Stay Up to Date</source>
          <target state="translated">最新情報</target>
        </trans-unit>
        <trans-unit id="e9a94c30e84ff4156f74ce9371f4186545b157ad" translate="yes" xml:space="preserve">
          <source>Staying up to date with &lt;strong&gt;Node.js&lt;/strong&gt; can also help with performance. On top of this, keeping your package manager (e.g. &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;) up to date can also help. Newer versions create more efficient module trees and increase resolving speed.</source>
          <target state="translated">&lt;strong&gt;Node.js&lt;/strong&gt;を最新の状態に&lt;strong&gt;保つ&lt;/strong&gt;こともパフォーマンスの向上に役立ちます。これに加えて、パッケージマネージャー（たとえば、 &lt;code&gt;npm&lt;/code&gt; や &lt;code&gt;yarn&lt;/code&gt; ）を最新の状態に保つことも役立ちます。新しいバージョンでは、より効率的なモジュールツリーが作成され、解決速度が向上します。</target>
        </trans-unit>
        <trans-unit id="835907ad5d2926a084e36ff827109a25a2b25f77" translate="yes" xml:space="preserve">
          <source>Staying up-to-date with &lt;strong&gt;Node.js&lt;/strong&gt; can also help with performance. On top of this, keeping your package manager (e.g. &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;) up-to-date can also help. Newer versions create more efficient module trees and increase resolving speed.</source>
          <target state="translated">Staying up-to-date with &lt;strong&gt;Node.js&lt;/strong&gt; can also help with performance. On top of this, keeping your package manager (e.g. &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; ) up-to-date can also help. Newer versions create more efficient module trees and increase resolving speed.</target>
        </trans-unit>
        <trans-unit id="3d01c0fdb9ab52f545fa0939216be00e3879dbfb" translate="yes" xml:space="preserve">
          <source>Step 1 will be done during the chunk loading. Step 2 will be done during the module evaluation interleaved with other (local and remote) modules. This way, evaluation order is unaffected by converting a module from local to remote or the other way around.</source>
          <target state="translated">ステップ1はチャンクロード中に行われます。ステップ2は、他の(ローカルとリモートの)モジュールと混在しているモジュールの評価中に行われます。このようにして、モジュールをローカルからリモートに変換したり、その逆に変換したりしても、評価の順番は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="e515afccc404697b2a09cdc43df1f159645d9f4d" translate="yes" xml:space="preserve">
          <source>Stop watching when stdin stream has ended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42aafe14616527f09805ec11d38279b9b31d741" translate="yes" xml:space="preserve">
          <source>Store chunk info to the records.</source>
          <target state="translated">チャンク情報をレコードに保存します。</target>
        </trans-unit>
        <trans-unit id="05ec51b4be3008b587e499dc2addce336ed321c6" translate="yes" xml:space="preserve">
          <source>Store chunk info to the records. This is only triggered if &lt;a href=&quot;#shouldrecord&quot;&gt;&lt;code&gt;shouldRecord&lt;/code&gt;&lt;/a&gt; returns a truthy value.</source>
          <target state="translated">Store chunk info to the records. This is only triggered if &lt;a href=&quot;#shouldrecord&quot;&gt; &lt;code&gt;shouldRecord&lt;/code&gt; &lt;/a&gt; returns a truthy value.</target>
        </trans-unit>
        <trans-unit id="1ff4d31bb5eae1bf01b6d9ef6b13118938f87390" translate="yes" xml:space="preserve">
          <source>Store information about record hash to the &lt;code&gt;records&lt;/code&gt;. This is only triggered if &lt;a href=&quot;#shouldrecord&quot;&gt;&lt;code&gt;shouldRecord&lt;/code&gt;&lt;/a&gt; returns a truthy value.</source>
          <target state="translated">Store information about record hash to the &lt;code&gt;records&lt;/code&gt; . This is only triggered if &lt;a href=&quot;#shouldrecord&quot;&gt; &lt;code&gt;shouldRecord&lt;/code&gt; &lt;/a&gt; returns a truthy value.</target>
        </trans-unit>
        <trans-unit id="1f08f597445621fb711a4071c39688f20dcd5f31" translate="yes" xml:space="preserve">
          <source>Store information about the &lt;code&gt;compilation&lt;/code&gt; to the &lt;code&gt;records&lt;/code&gt;.</source>
          <target state="translated">店舗情報 &lt;code&gt;compilation&lt;/code&gt; に &lt;code&gt;records&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04ff079f9d1e4f24af18470a8828fd33b2455bb4" translate="yes" xml:space="preserve">
          <source>Store information about the &lt;code&gt;compilation&lt;/code&gt; to the &lt;code&gt;records&lt;/code&gt;. This is only triggered if &lt;a href=&quot;#shouldrecord&quot;&gt;&lt;code&gt;shouldRecord&lt;/code&gt;&lt;/a&gt; returns a truthy value.</source>
          <target state="translated">Store information about the &lt;code&gt;compilation&lt;/code&gt; to the &lt;code&gt;records&lt;/code&gt; . This is only triggered if &lt;a href=&quot;#shouldrecord&quot;&gt; &lt;code&gt;shouldRecord&lt;/code&gt; &lt;/a&gt; returns a truthy value.</target>
        </trans-unit>
        <trans-unit id="dad7091a0230ac04d8dc6aaea8c173ee760c66da" translate="yes" xml:space="preserve">
          <source>Store module info to the records.</source>
          <target state="translated">モジュール情報をレコードに格納します。</target>
        </trans-unit>
        <trans-unit id="797ad8889c2951edad9dea37be8102233b52d1b3" translate="yes" xml:space="preserve">
          <source>Store module info to the records. This is triggered if &lt;a href=&quot;#shouldrecord&quot;&gt;&lt;code&gt;shouldRecord&lt;/code&gt;&lt;/a&gt; returns a truthy value.</source>
          <target state="translated">Store module info to the records. This is triggered if &lt;a href=&quot;#shouldrecord&quot;&gt; &lt;code&gt;shouldRecord&lt;/code&gt; &lt;/a&gt; returns a truthy value.</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="90d8657f70af8384ba00419bffaa59489246a3e7" translate="yes" xml:space="preserve">
          <source>String syntax - &lt;code&gt;[[globalName] [moduleLocalName] [override]]&lt;/code&gt; or &lt;code&gt;[[globalName]|[moduleLocalName]|[override]]&lt;/code&gt;, where:</source>
          <target state="translated">String syntax - &lt;code&gt;[[globalName] [moduleLocalName] [override]]&lt;/code&gt; or &lt;code&gt;[[globalName]|[moduleLocalName]|[override]]&lt;/code&gt; , where:</target>
        </trans-unit>
        <trans-unit id="61f2069da820eb14c3bf6ac7027884264d6c6abb" translate="yes" xml:space="preserve">
          <source>String syntax - &lt;code&gt;[[syntax] [moduleName] [name] [alias]]&lt;/code&gt; or &lt;code&gt;[[syntax]|[moduleName]|[name]|[alias]]&lt;/code&gt;, where:</source>
          <target state="translated">String syntax - &lt;code&gt;[[syntax] [moduleName] [name] [alias]]&lt;/code&gt; or &lt;code&gt;[[syntax]|[moduleName]|[name]|[alias]]&lt;/code&gt; , where:</target>
        </trans-unit>
        <trans-unit id="83ea1f5fb672b4e93b19855c9ab7620f652e746a" translate="yes" xml:space="preserve">
          <source>String syntax - &lt;code&gt;[[syntax] [name] [alias]]&lt;/code&gt; or &lt;code&gt;[[syntax]|[name]|[alias]]&lt;/code&gt;, where:</source>
          <target state="translated">String syntax - &lt;code&gt;[[syntax] [name] [alias]]&lt;/code&gt; or &lt;code&gt;[[syntax]|[name]|[alias]]&lt;/code&gt; , where:</target>
        </trans-unit>
        <trans-unit id="9482c5d5bfbed584fddcc442794dd8d3d9813064" translate="yes" xml:space="preserve">
          <source>Structure</source>
          <target state="translated">Structure</target>
        </trans-unit>
        <trans-unit id="f85ef5c2f14d323c0f20ca83e1a366ccf556f68f" translate="yes" xml:space="preserve">
          <source>Style of exported class names.</source>
          <target state="translated">エクスポートされたクラス名のスタイル。</target>
        </trans-unit>
        <trans-unit id="67c58f81c1c8b9a2b8de4af65b762cc8ca9b0dff" translate="yes" xml:space="preserve">
          <source>StylelintWebpackPlugin</source>
          <target state="translated">StylelintWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="c7bb535582186462aee87302ed2c2d97f2a58126" translate="yes" xml:space="preserve">
          <source>Styles are not added on &lt;code&gt;import/require()&lt;/code&gt;, but instead on call to &lt;code&gt;use&lt;/code&gt;/&lt;code&gt;ref&lt;/code&gt;. Styles are removed from page if &lt;code&gt;unuse&lt;/code&gt;/&lt;code&gt;unref&lt;/code&gt; is called exactly as often as &lt;code&gt;use&lt;/code&gt;/&lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">スタイルは &lt;code&gt;import/require()&lt;/code&gt; では追加されませんが、代わりに/ &lt;code&gt;ref&lt;/code&gt; を &lt;code&gt;use&lt;/code&gt; 呼び出しで追加されます。 &lt;code&gt;unuse&lt;/code&gt; / &lt;code&gt;unref&lt;/code&gt; が &lt;code&gt;use&lt;/code&gt; / &lt;code&gt;ref&lt;/code&gt; とまったく同じ頻度で呼び出されると、スタイルはページから削除されます。</target>
        </trans-unit>
        <trans-unit id="5cb60cb3c991466704d14cea04a43b236abb1ba8" translate="yes" xml:space="preserve">
          <source>Styles can be locally scoped to avoid globally scoping styles.</source>
          <target state="translated">スタイルをローカルにスコープすることで、グローバルにスコープするスタイルを避けることができます。</target>
        </trans-unit>
        <trans-unit id="55f2816ed3aa70bc8d652134d376b07d16de4aac" translate="yes" xml:space="preserve">
          <source>Styling</source>
          <target state="translated">Styling</target>
        </trans-unit>
        <trans-unit id="957400ac1d92f82a856a3f939ce5438d5096957c" translate="yes" xml:space="preserve">
          <source>Stylus</source>
          <target state="translated">Stylus</target>
        </trans-unit>
        <trans-unit id="65ba7c7ba55f3e611a003f5367f12c0bd7c6b931" translate="yes" xml:space="preserve">
          <source>Stylus does not provide resolving capabilities in the &lt;code&gt;json&lt;/code&gt; function. Therefore webpack resolver does not work for &lt;code&gt;.json&lt;/code&gt; files. Use &lt;a href=&quot;#stylus-resolver&quot;&gt;&lt;code&gt;stylus resolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Stylus does not provide resolving capabilities in the &lt;code&gt;json&lt;/code&gt; function. Therefore webpack resolver does not work for &lt;code&gt;.json&lt;/code&gt; files. Use &lt;a href=&quot;#stylus-resolver&quot;&gt; &lt;code&gt;stylus resolver&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1a7cb1648cad43743fd1bc077fbe560542e5e6d3" translate="yes" xml:space="preserve">
          <source>Stylus resolver</source>
          <target state="translated">スタイラスレゾルバ</target>
        </trans-unit>
        <trans-unit id="638b3d310ef5e4c7058bd97eacdddecec620698d" translate="yes" xml:space="preserve">
          <source>Substitutions available on Chunk-level:</source>
          <target state="translated">チャンクレベルでの代用が可能です。</target>
        </trans-unit>
        <trans-unit id="d0c3144b90114bae03b2e610866d05187543acb4" translate="yes" xml:space="preserve">
          <source>Substitutions available on Compilation-level:</source>
          <target state="translated">コンパイルレベルでの置換が可能です。</target>
        </trans-unit>
        <trans-unit id="19f38f9561a9c35a6236703e9b7cf487fc26dbd0" translate="yes" xml:space="preserve">
          <source>Substitutions available on File-level:</source>
          <target state="translated">ファイルレベルでの置換が可能です。</target>
        </trans-unit>
        <trans-unit id="c7176853f6ae6dcd127497fb3914d19a3cab8450" translate="yes" xml:space="preserve">
          <source>Substitutions available on Module-level:</source>
          <target state="translated">モジュールレベルでの代用が可能です。</target>
        </trans-unit>
        <trans-unit id="1fb91eccca7a6a0a3f446baca97336ad659aa5ab" translate="yes" xml:space="preserve">
          <source>Substitutions available on URL-level:</source>
          <target state="translated">URLレベルでの置換が可能です。</target>
        </trans-unit>
        <trans-unit id="42a8f651d79fd005eeac0612df6442b983a01184" translate="yes" xml:space="preserve">
          <source>Success</source>
          <target state="translated">Success</target>
        </trans-unit>
        <trans-unit id="8b99bfeaa30e4742de56be74e5203fdb9b4adaff" translate="yes" xml:space="preserve">
          <source>SugarSS</source>
          <target state="translated">SugarSS</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">Support</target>
        </trans-unit>
        <trans-unit id="0bf8509ba5ecde4589d8872597ed2ff4969a9a4c" translate="yes" xml:space="preserve">
          <source>Supported</source>
          <target state="translated">Supported</target>
        </trans-unit>
        <trans-unit id="a65b7f12a991185f44b505808bc867e90d749e20" translate="yes" xml:space="preserve">
          <source>Supported Compilers</source>
          <target state="translated">サポートされているコンパイラ</target>
        </trans-unit>
        <trans-unit id="42366eb58c525dced3d9089466359736d08d1070" translate="yes" xml:space="preserve">
          <source>Supported ECMAScript Version (&lt;code&gt;5&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;8&lt;/code&gt;). Affects &lt;code&gt;parse&lt;/code&gt;, &lt;code&gt;compress&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;output&lt;/code&gt; options</source>
          <target state="translated">ECMAScriptのバージョン（サポートされている &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;6&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; 又は &lt;code&gt;8&lt;/code&gt; ）。影響 &lt;code&gt;parse&lt;/code&gt; 、 &lt;code&gt;compress&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;output&lt;/code&gt; オプションを</target>
        </trans-unit>
        <trans-unit id="c2069795a54a4beb3effffa6ccc08c7db1858df1" translate="yes" xml:space="preserve">
          <source>Supported Hooks</source>
          <target state="translated">対応フック</target>
        </trans-unit>
        <trans-unit id="6824265fc63ded1e35f74fdfb95bc3bc82cba17f" translate="yes" xml:space="preserve">
          <source>Supported Module Types</source>
          <target state="translated">サポートされているモジュールタイプ</target>
        </trans-unit>
        <trans-unit id="be6d6177a613b2aaffaa93b95f580586cd48f7ec" translate="yes" xml:space="preserve">
          <source>Supported browserslist values:</source>
          <target state="translated">サポートされているブラウザリストの値。</target>
        </trans-unit>
        <trans-unit id="1c163efec7adb0da9d3adf88b202afc08c1f9fbe" translate="yes" xml:space="preserve">
          <source>Supported by</source>
          <target state="translated">サポートされているのは</target>
        </trans-unit>
        <trans-unit id="e0d7a8726645549cb27da59c2ec34062c2b23e65" translate="yes" xml:space="preserve">
          <source>Supported tags and attributes:</source>
          <target state="translated">サポートされているタグと属性。</target>
        </trans-unit>
        <trans-unit id="be8759e614c84bf4aa1ab490c6a68e3e469c7bdd" translate="yes" xml:space="preserve">
          <source>Supported types:</source>
          <target state="translated">サポートされているタイプ。</target>
        </trans-unit>
        <trans-unit id="10d28d13aa586ebb9371074d2ca71efd5983e3b6" translate="yes" xml:space="preserve">
          <source>Supports CSS imports. (e.g. &lt;code&gt;@import &quot;~bootstrap&quot;&lt;/code&gt;)</source>
          <target state="translated">CSSインポートをサポートします。（例： &lt;code&gt;@import &quot;~bootstrap&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ae09747c881ed0a49edd1b67e07001aea6a475aa" translate="yes" xml:space="preserve">
          <source>Supports Dot-delimited packages. (e.g. &lt;code&gt;lodash.capitalize&lt;/code&gt;)</source>
          <target state="translated">ドット区切りのパッケージをサポートします。（例： &lt;code&gt;lodash.capitalize&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="0b60cbb9a8602860955f04b3a53e40c99f0119ad" translate="yes" xml:space="preserve">
          <source>Supports Namespaced packages. (e.g. &lt;code&gt;@cycle/dom&lt;/code&gt;)</source>
          <target state="translated">名前空間パッケージをサポートします。（例： &lt;code&gt;@cycle/dom&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="73458c3d5de2e9ce02f4cbf33116a6ea64bdc68f" translate="yes" xml:space="preserve">
          <source>Supports both ES5 &amp;amp; ES6 Modules. (e.g. &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;)</source>
          <target state="translated">ES5モジュールとES6モジュールの両方をサポートします。（例： &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;import&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="710e73c6452a475a7ed6c31b013cea08babd4256" translate="yes" xml:space="preserve">
          <source>Supports inline webpack loaders. (e.g. &lt;code&gt;require(&quot;bundle?lazy!./App&quot;&lt;/code&gt;)</source>
          <target state="translated">インラインWebpackローダーをサポートします。（例： &lt;code&gt;require(&quot;bundle?lazy!./App&quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="aa3dbb86e6217840070c2819c16a0acca237c123" translate="yes" xml:space="preserve">
          <source>Supports synchronous and asynchronous worker functions</source>
          <target state="translated">同期および非同期ワーカー機能をサポート</target>
        </trans-unit>
        <trans-unit id="c0ac5350e04e42826b54216b59f04b7ab52b3bf8" translate="yes" xml:space="preserve">
          <source>Supports webpack loaders. (e.g. &lt;code&gt;babel-loader&lt;/code&gt;, &lt;code&gt;file-loader&lt;/code&gt;, etc.)</source>
          <target state="translated">webpackローダーをサポートします。（例： &lt;code&gt;babel-loader&lt;/code&gt; 、 &lt;code&gt;file-loader&lt;/code&gt; など）</target>
        </trans-unit>
        <trans-unit id="2d089a76e07d4ff754a9f679edacd3c5f7119d14" translate="yes" xml:space="preserve">
          <source>Supports webpack's &lt;code&gt;resolve.alias&lt;/code&gt; &amp;amp; &lt;code&gt;resolve.root&lt;/code&gt; configuration. (e.g. &lt;code&gt;require(&quot;react&quot;)&lt;/code&gt; can alias to &lt;code&gt;react-lite&lt;/code&gt;)</source>
          <target state="translated">webpackの &lt;code&gt;resolve.alias&lt;/code&gt; および &lt;code&gt;resolve.root&lt;/code&gt; 構成をサポートします。（例： &lt;code&gt;require(&quot;react&quot;)&lt;/code&gt; は &lt;code&gt;react-lite&lt;/code&gt; にエイリアスできます）</target>
        </trans-unit>
        <trans-unit id="5c7758242ce33fd5e1bba527f9db9b8ba14a50e6" translate="yes" xml:space="preserve">
          <source>Suppose we have the following &lt;code&gt;json5&lt;/code&gt; file</source>
          <target state="translated">次の &lt;code&gt;json5&lt;/code&gt; ファイルがあるとします</target>
        </trans-unit>
        <trans-unit id="56776efc2af43f0bb1126d26787ed0b6ac576cc5" translate="yes" xml:space="preserve">
          <source>Suppose we have the following &lt;code&gt;json5&lt;/code&gt; file:</source>
          <target state="translated">次の &lt;code&gt;json5&lt;/code&gt; ファイルがあるとします。</target>
        </trans-unit>
        <trans-unit id="c6cc061254b7980d8dc92932de44c580913ed833" translate="yes" xml:space="preserve">
          <source>Switch loaders to debug mode</source>
          <target state="translated">ローダをデバッグモードに切り替える</target>
        </trans-unit>
        <trans-unit id="905f63092ff26517a7aa8083857b3c8af9707002" translate="yes" xml:space="preserve">
          <source>Sync</source>
          <target state="translated">Sync</target>
        </trans-unit>
        <trans-unit id="787a08df5a570ca10a502ea5b32dd8a467dfc445" translate="yes" xml:space="preserve">
          <source>Synchronous Loaders</source>
          <target state="translated">同期式ローダー</target>
        </trans-unit>
        <trans-unit id="bb01023d48c8f58e053cada9bb70a5c2febc2b06" translate="yes" xml:space="preserve">
          <source>Synchronously retrieve a module's ID. The compiler will ensure that the dependency is available in the output bundle. It is recommended to treat it as an opaque value which can only be used with &lt;code&gt;require.cache[id]&lt;/code&gt; or &lt;code&gt;__webpack_require__(id)&lt;/code&gt; (best to avoid such usage).</source>
          <target state="translated">モジュールのIDを同期的に取得します。コンパイラーは、依存関係が出力バンドルで使用可能であることを確認します。 &lt;code&gt;require.cache[id]&lt;/code&gt; または &lt;code&gt;__webpack_require__(id)&lt;/code&gt; のみ使用できる不透明な値として扱うことをお勧めします（このような使用を避けるのが最善です）。</target>
        </trans-unit>
        <trans-unit id="73a2ab444440a9a93c26fed67d5ed607f2d75c7a" translate="yes" xml:space="preserve">
          <source>Synchronously retrieve a module's ID. The compiler will ensure that the dependency is available in the output bundle. See &lt;a href=&quot;module-variables#module-id-commonjs-&quot;&gt;&lt;code&gt;module.id&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">モジュールのIDを同期的に取得します。コンパイラーは、依存関係が出力バンドルで使用可能であることを確認します。詳細については、&lt;a href=&quot;module-variables#module-id-commonjs-&quot;&gt; &lt;code&gt;module.id&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a0cb60196f3d5ef223c010b6bc1d8a5b79eee62a" translate="yes" xml:space="preserve">
          <source>Synchronously retrieve the exports from another module. The compiler will ensure that the dependency is available in the output bundle.</source>
          <target state="translated">他のモジュールからのエクスポートを同期的に取得します。コンパイラは、依存関係が出力バンドルで利用可能であることを確認します。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="41e9ffd1919d34f9c7983010746657d5863be8b4" translate="yes" xml:space="preserve">
          <source>System modules require that a global variable &lt;code&gt;System&lt;/code&gt; is present in the browser when the webpack bundle is executed. Compiling to &lt;code&gt;System.register&lt;/code&gt; format allows you to &lt;code&gt;System.import('/bundle.js')&lt;/code&gt; without additional configuration and have your webpack bundle loaded into the System module registry.</source>
          <target state="translated">システムモジュールでは、webpackバンドルの実行時に、グローバル変数 &lt;code&gt;System&lt;/code&gt; がブラウザに存在する必要があります。 &lt;code&gt;System.register&lt;/code&gt; 形式にコンパイルすると、追加の構成なしで &lt;code&gt;System.import('/bundle.js')&lt;/code&gt; を実行し、Webpackバンドルをシステムモジュールレジストリにロードできます。</target>
        </trans-unit>
        <trans-unit id="2db728216720705fa5f530d0d1a1de00c43e5eb0" translate="yes" xml:space="preserve">
          <source>TODO:</source>
          <target state="translated">TODO:</target>
        </trans-unit>
        <trans-unit id="4d795e4cf5fa1aaecdf870a34e0202ec5f468b04" translate="yes" xml:space="preserve">
          <source>Take caution when installing these bleeding edge releases! They may still contain bugs and therefore should not be used in production.</source>
          <target state="translated">これらのブリーディングエッジリリースをインストールする際には注意してください! これらのリリースにはまだバグが含まれている可能性がありますので、本番では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="491d74eef0c4b3ab8d59266a22f5f2b2cf62f9bb" translate="yes" xml:space="preserve">
          <source>Take for example the following file structure:</source>
          <target state="translated">例えば、次のようなファイル構造を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f8315068ea71991e2dfa9c8df96ee0db2c0f4771" translate="yes" xml:space="preserve">
          <source>Tapable</source>
          <target state="translated">Tapable</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="c7fb5c6a643a19b32cc4d41e9e2d4e96ea4a1fc0" translate="yes" xml:space="preserve">
          <source>Target environment</source>
          <target state="translated">対象環境</target>
        </trans-unit>
        <trans-unit id="3691cdfd8d2b9d8cb591016ff8b996c0c2a79284" translate="yes" xml:space="preserve">
          <source>Target environment independent packages</source>
          <target state="translated">対象環境に依存しないパッケージ</target>
        </trans-unit>
        <trans-unit id="2478527eeae38abf9fca0c3ca3badc4eff20092a" translate="yes" xml:space="preserve">
          <source>Target of compilation. Passed from configuration options.</source>
          <target state="translated">コンパイルの対象。設定オプションから渡されます。</target>
        </trans-unit>
        <trans-unit id="ddc21bfcb72e2fe7cca84fbb1e347825448d6b17" translate="yes" xml:space="preserve">
          <source>Targeted modules of this loader must export a &lt;code&gt;Function&lt;/code&gt; that returns an object, or a &lt;code&gt;Promise&lt;/code&gt; resolving an object (e.g. async function), containing a &lt;code&gt;code&lt;/code&gt; property at a minimum, but can contain any number of additional properties.</source>
          <target state="translated">このローダーのターゲットモジュールは、オブジェクトを返す &lt;code&gt;Function&lt;/code&gt; 、またはオブジェクトを解決する &lt;code&gt;Promise&lt;/code&gt; （非同期関数など）をエクスポートする必要があります。これには、少なくとも &lt;code&gt;code&lt;/code&gt; プロパティが含まれますが、追加のプロパティはいくつでも含めることができます。</target>
        </trans-unit>
        <trans-unit id="2d8a95e4db20a5baed4f682053222211756aa583" translate="yes" xml:space="preserve">
          <source>Targeted modules of this loader must export either a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; that returns an object containing a &lt;code&gt;code&lt;/code&gt; property at a minimum, but can contain any number of additional properties.</source>
          <target state="translated">このローダーのターゲットモジュールは、少なくとも &lt;code&gt;code&lt;/code&gt; プロパティを含むオブジェクトを返す &lt;code&gt;Function&lt;/code&gt; または &lt;code&gt;Promise&lt;/code&gt; いずれかをエクスポートする必要がありますが、追加のプロパティをいくつでも含めることができます。</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="45471e9213df8d8312d92d340acd4ec7518b19db" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;NODE_ENV&lt;/code&gt; is a system environment variable that Node.js exposes into running scripts. It is used by convention to determine dev-vs-prod behavior by server tools, build scripts, and client-side libraries. Contrary to expectations, &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is not set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;&lt;strong&gt;within&lt;/strong&gt; the build script &lt;code&gt;webpack.config.js&lt;/code&gt;, see &lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;#2537&lt;/a&gt;. Thus, conditionals like &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[hash].bundle.js' : '[name].bundle.js'&lt;/code&gt; within webpack configurations do not work as expected.</source>
          <target state="translated">技術的には、 &lt;code&gt;NODE_ENV&lt;/code&gt; は、Node.jsが実行中のスクリプトに公開するシステム環境変数です。慣例により、サーバーツール、ビルドスクリプト、およびクライアント側ライブラリによるdev-vs-prodの動作を決定するために使用されます。期待に反して、ビルドスクリプト &lt;code&gt;webpack.config.js&lt;/code&gt; &lt;strong&gt;内&lt;/strong&gt;で &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; が &lt;code&gt;&quot;production&quot;&lt;/code&gt; に設定されていません。&lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;＃2537を&lt;/a&gt;参照してください。したがって、 &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[hash].bundle.js' : '[name].bundle.js'&lt;/code&gt; ような条件？'[name]。[hash] .bundle.js'： webpack構成内の'[name] .bundle.js'が期待どおりに機能しません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8372333699d1af8bbcba6679930861399051749" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;NODE_ENV&lt;/code&gt; is a system environment variable that Node.js exposes into running scripts. It is used by convention to determine dev-vs-prod behavior by server tools, build scripts, and client-side libraries. Contrary to expectations, &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is not set to &lt;code&gt;'production'&lt;/code&gt;&lt;strong&gt;within&lt;/strong&gt; the build script &lt;code&gt;webpack.config.js&lt;/code&gt;, see &lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;#2537&lt;/a&gt;. Thus, conditionals like &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[contenthash].bundle.js' : '[name].bundle.js'&lt;/code&gt; within webpack configurations do not work as expected.</source>
          <target state="translated">技術的には、 &lt;code&gt;NODE_ENV&lt;/code&gt; は、Node.jsが実行中のスクリプトに公開するシステム環境変数です。これは、サーバーツール、ビルドスクリプト、およびクライアント側ライブラリによるdev-vs-prodの動作を決定するために慣例により使用されます。予想に反して、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; はビルドスクリプト &lt;code&gt;webpack.config.js&lt;/code&gt; &lt;strong&gt;内で&lt;/strong&gt; &lt;code&gt;'production'&lt;/code&gt; 設定されていません。&lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;＃2537を&lt;/a&gt;参照してください。したがって、 &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[contenthash].bundle.js' : '[name].bundle.js'&lt;/code&gt; '[name]。[contenthash] .bundle.js'： '[name] .bundle.js'はwebpack構成内で期待どおりに機能しません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04e20d62bc9e308225e4e6b88b096a811dd945dd" translate="yes" xml:space="preserve">
          <source>Technically, this is &lt;code&gt;**/*&lt;/code&gt; with a predefined context equal to the specified directory.</source>
          <target state="translated">技術的には、これは &lt;code&gt;**/*&lt;/code&gt; であり、事前定義されたコンテキストは指定されたディレクトリと同じです。</target>
        </trans-unit>
        <trans-unit id="a90530a60aefcb9d837e9c73c7f5f24272ae8eb3" translate="yes" xml:space="preserve">
          <source>Technically, this is a filename with a predefined context equal to &lt;code&gt;path.dirname(pathToFile)&lt;/code&gt;.</source>
          <target state="translated">技術的には、これは &lt;code&gt;path.dirname(pathToFile)&lt;/code&gt; と等しい事前定義されたコンテキストを持つファイル名です。</target>
        </trans-unit>
        <trans-unit id="fbd0c9dcadde4012e82339edfe19c7a2425388c6" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;CleanWebpackPlugin&lt;/code&gt; that we don't want to remove the &lt;code&gt;index.html&lt;/code&gt; file after the incremental build triggered by watch. We do this with the &lt;a href=&quot;https://github.com/johnagan/clean-webpack-plugin#options-and-defaults-optional&quot;&gt;&lt;code&gt;cleanStaleWebpackAssets&lt;/code&gt; option&lt;/a&gt;:</source>
          <target state="translated">ウォッチによってトリガーされたインクリメンタルビルドの後に &lt;code&gt;index.html&lt;/code&gt; ファイルを削除したくないことを &lt;code&gt;CleanWebpackPlugin&lt;/code&gt; に伝えます。これは、&lt;a href=&quot;https://github.com/johnagan/clean-webpack-plugin#options-and-defaults-optional&quot;&gt; &lt;code&gt;cleanStaleWebpackAssets&lt;/code&gt; &lt;/a&gt;オプションを使用して行います。</target>
        </trans-unit>
        <trans-unit id="6590bb874fdab5bd796817c088ecde32d8e4e7dc" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;html-loader&lt;/code&gt; to minimize HTML</source>
          <target state="translated">知らせる &lt;code&gt;html-loader&lt;/code&gt; HTMLを最小限にするために</target>
        </trans-unit>
        <trans-unit id="f70e32f2b1327096ac57f254dbd61a4b0b290072" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;html-loader&lt;/code&gt; to minimize HTML.</source>
          <target state="translated">知らせる &lt;code&gt;html-loader&lt;/code&gt; HTMLを最小限に抑えること。</target>
        </trans-unit>
        <trans-unit id="3aa10c0dc9a4e6b0e2e22c5b806eef67e1e2b437" translate="yes" xml:space="preserve">
          <source>Tell dev-server to watch the files served by the &lt;a href=&quot;#devservercontentbase&quot;&gt;&lt;code&gt;devServer.contentBase&lt;/code&gt;&lt;/a&gt; option. It is disabled by default. When enabled, file changes will trigger a full page reload.</source>
          <target state="translated">&lt;a href=&quot;#devservercontentbase&quot;&gt; &lt;code&gt;devServer.contentBase&lt;/code&gt; &lt;/a&gt;オプションによって提供されるファイルを監視するようにdev-serverに指示します。デフォルトでは無効になっています。有効にすると、ファイルの変更によりページ全体のリロードがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="552959922cff4ed5aeacc056ef7b0f5f0f028773" translate="yes" xml:space="preserve">
          <source>Tell the server at what URL to serve &lt;code&gt;devServer.contentBase&lt;/code&gt; static content. If there was a file &lt;code&gt;assets/manifest.json&lt;/code&gt;, it would be served at &lt;code&gt;/serve-content-base-at-this-url/manifest.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;devServer.contentBase&lt;/code&gt; 静的コンテンツを提供するURLをサーバーに通知します。ファイル &lt;code&gt;assets/manifest.json&lt;/code&gt; があった場合、それは &lt;code&gt;/serve-content-base-at-this-url/manifest.json&lt;/code&gt; で提供されます。</target>
        </trans-unit>
        <trans-unit id="e370f5ffe24ac7d3c786805283b6450e6061395b" translate="yes" xml:space="preserve">
          <source>Tell the server to watch the files served by the &lt;code&gt;devServer.contentBase&lt;/code&gt; option. File changes will trigger a full page reload.</source>
          <target state="translated">&lt;code&gt;devServer.contentBase&lt;/code&gt; オプションによって提供されるファイルを監視するようサーバーに指示します。ファイルを変更すると、ページ全体が再読み込みされます。</target>
        </trans-unit>
        <trans-unit id="8eaf46561f2c82818e5487f1fad2c2c1a9b03109" translate="yes" xml:space="preserve">
          <source>Tell the server where to serve content from. This is only necessary if you want to serve static files. &lt;a href=&quot;#devserver-publicpath-&quot;&gt;&lt;code&gt;devServer.publicPath&lt;/code&gt;&lt;/a&gt; will be used to determine where the bundles should be served from, and takes precedence.</source>
          <target state="translated">コンテンツの提供元をサーバーに伝えます。これは、静的ファイルを提供する場合にのみ必要です。&lt;a href=&quot;#devserver-publicpath-&quot;&gt; &lt;code&gt;devServer.publicPath&lt;/code&gt; &lt;/a&gt;は、バンドルの提供元を決定するために使用され、優先されます。</target>
        </trans-unit>
        <trans-unit id="34db4b895c2ffe5805e9e95e4b507f5292966152" translate="yes" xml:space="preserve">
          <source>Tell the server where to serve content from. This is only necessary if you want to serve static files. &lt;a href=&quot;#devserverpublicpath-&quot;&gt;&lt;code&gt;devServer.publicPath&lt;/code&gt;&lt;/a&gt; will be used to determine where the bundles should be served from, and takes precedence.</source>
          <target state="translated">コンテンツを提供する場所をサーバーに指示します。これは、静的ファイルを提供する場合にのみ必要です。&lt;a href=&quot;#devserverpublicpath-&quot;&gt; &lt;code&gt;devServer.publicPath&lt;/code&gt; &lt;/a&gt;は、バンドルの提供元を決定するために使用され、優先されます。</target>
        </trans-unit>
        <trans-unit id="d2932fc13f3b686b8323bf897871d4135135855f" translate="yes" xml:space="preserve">
          <source>Tell webpack to minimize the bundle using the &lt;a href=&quot;../plugins/terser-webpack-plugin&quot;&gt;TerserPlugin&lt;/a&gt; or the plugin(s) specified in &lt;a href=&quot;#optimizationminimizer&quot;&gt;&lt;code&gt;optimization.minimizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../plugins/terser-webpack-plugin&quot;&gt;TerserPlugin&lt;/a&gt;または&lt;a href=&quot;#optimizationminimizer&quot;&gt; &lt;code&gt;optimization.minimizer&lt;/code&gt; で&lt;/a&gt;指定されたプラグインを使用してバンドルを最小化するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="6eed8e8f3698f73914c4b5b2e893f7b06987d73d" translate="yes" xml:space="preserve">
          <source>Tell webpack to minimize the bundle using the &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;UglifyjsWebpackPlugin&lt;/a&gt;.</source>
          <target state="translated">UglifyjsWebpackPluginを使用してバンドルを最小化するように&lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;webpackに指示し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e4addd77c60356ceaa8d70fc96c0d83183363874" translate="yes" xml:space="preserve">
          <source>Tell webpack to remove a module from the module instance cache (&lt;code&gt;require.cache&lt;/code&gt;) if it throws an exception when it is &lt;code&gt;require&lt;/code&gt;d.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; なときに例外をスローする場合、モジュールをモジュールインスタンスキャッシュ（ &lt;code&gt;require.cache&lt;/code&gt; ）から削除するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="ad1cc548590d63ecaaf377363e425ba51831d6f1" translate="yes" xml:space="preserve">
          <source>Tell webpack what directories should be searched when resolving modules.</source>
          <target state="translated">モジュールを解決する際にどのディレクトリを検索すべきかを webpack に指示します。</target>
        </trans-unit>
        <trans-unit id="0ba9b2bbb3e0b6aaba2b8cfe0634a2c12f344f24" translate="yes" xml:space="preserve">
          <source>Tell webpack what kind of ES-features may be used in the generated runtime-code.</source>
          <target state="translated">生成されたランタイムコードでどのような種類のES-featuresが使用されるかをwebpackに伝えます。</target>
        </trans-unit>
        <trans-unit id="9aa30e153413e42d9eee6cfcd6443140fcd787bf" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;devServer&lt;/code&gt; to inject a Hot Module Replacement. Setting &lt;code&gt;devServer.injectHot&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will result in always injecting. It is possible to provide a function to inject conditionally:</source>
          <target state="translated">ホットモジュール交換を注入するように &lt;code&gt;devServer&lt;/code&gt; に指示します。 &lt;code&gt;devServer.injectHot&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、常に注入されます。条件付きで注入する機能を提供することが可能です。</target>
        </trans-unit>
        <trans-unit id="499b6a0a71442985a46492f60e6a9c9a26a5756f" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;devServer&lt;/code&gt; to inject a client. Setting &lt;code&gt;devServer.injectClient&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will result in always injecting a client. It is possible to provide a function to inject conditionally:</source>
          <target state="translated">指示します &lt;code&gt;devServer&lt;/code&gt; をクライアントを注入します。 &lt;code&gt;devServer.injectClient&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、常にクライアントが挿入されます。条件付きで注入する機能を提供することが可能です。</target>
        </trans-unit>
        <trans-unit id="e64f06ad98e7339d33a453db207c80bb8293a126" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;devServer&lt;/code&gt; to write generated assets to the disk. The output is written to the &lt;a href=&quot;output#outputpath&quot;&gt;output.path&lt;/a&gt; directory.</source>
          <target state="translated">指示します &lt;code&gt;devServer&lt;/code&gt; をディスクに生成された資産を書くこと。出力は&lt;a href=&quot;output#outputpath&quot;&gt;output.path&lt;/a&gt;ディレクトリに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="ee3b5c6692e57258fc7aded637bebfde1c6a1dab" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; how many items of assets should be displayed (groups will be collapsed to fit this space).</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; （グループは、このスペースに合わせて崩壊される）を表示する必要がありますどのように多くの資産の項目。</target>
        </trans-unit>
        <trans-unit id="21a0f03bef58900234a1d6e4a7545613653fd0b1" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; how many items of chunk modules should be displayed (groups will be collapsed to fit this space).</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; （グループは、このスペースに合わせて崩壊される）を表示する必要がありますどのように多くのチャンク・モジュールのアイテム。</target>
        </trans-unit>
        <trans-unit id="ffb78d302da358156a64ebc4662a55bb88cc36bf" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; how many items of modules should be displayed (groups will be collapsed to fit this space).</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; （グループは、このスペースに合わせて崩壊される）を表示する必要がありますどのように多くのモジュールのアイテム。</target>
        </trans-unit>
        <trans-unit id="3f564ba34261ff72b4e37ad7f77d9b61e40ef9ec" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; how many items of nested modules should be displayed (groups will be collapsed to fit this space).</source>
          <target state="translated">ネストされたモジュールのアイテムをいくつ表示するかを &lt;code&gt;stats&lt;/code&gt; 示します（グループはこのスペースに収まるように折りたたまれます）。</target>
        </trans-unit>
        <trans-unit id="5082a99140d3f6ce18153fa3a15029c229699be1" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to add IDs of modules and chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb689551c8fe3c4b5d8c5e678de5fb8cb67c4290" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to add information about the reasons of why modules are included.</source>
          <target state="translated">モジュールが含まれている理由に関する &lt;code&gt;stats&lt;/code&gt; を追加するように統計情報に指示します。</target>
        </trans-unit>
        <trans-unit id="10407345b66141c680f553871797635e817c3728" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to add information about the webpack version used.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 使用WebPACKのバージョンに関する情報を追加します。</target>
        </trans-unit>
        <trans-unit id="f417d8493b4cff0ead796f28659e0ceff31bf4e8" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to add the source code of modules.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; モジュールのソースコードを追加します。</target>
        </trans-unit>
        <trans-unit id="93ae09d37bad2782c48f95cd00eaf7a6e05f3e75" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to add the timing information.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; タイミング情報を追加します。</target>
        </trans-unit>
        <trans-unit id="a065f92aa168920e298dab5b5db31a8f8abdd0f9" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to add warnings.</source>
          <target state="translated">告げる &lt;code&gt;stats&lt;/code&gt; 警告を追加します。</target>
        </trans-unit>
        <trans-unit id="626710a9cc0ed44b8b6e7c7e41d4828d3b214aa6" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to display chunk parents, children and siblings.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 表示チャンク両親、子供や兄弟に。</target>
        </trans-unit>
        <trans-unit id="2b8a6995f900d1eeb77cbe0c3bf5f8a2ba0ba71e" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to exclude the matching assets information. This can be done with a &lt;code&gt;string&lt;/code&gt;, a &lt;code&gt;RegExp&lt;/code&gt;, a &lt;code&gt;function&lt;/code&gt; that is getting the assets name as an argument and returns a &lt;code&gt;boolean&lt;/code&gt;. &lt;code&gt;stats.excludeAssets&lt;/code&gt; can be an &lt;code&gt;array&lt;/code&gt; of any of the above.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; マッチング資産情報を除外します。これは、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;RegExp&lt;/code&gt; 、アセット名を引数として取得し、 &lt;code&gt;boolean&lt;/code&gt; を返す &lt;code&gt;function&lt;/code&gt; て実行できます。 &lt;code&gt;stats.excludeAssets&lt;/code&gt; は、上記のいずれかの &lt;code&gt;array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="45beb4910baf1bcc76c82a64af6b0c2b24658850" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to exclude the matching modules information. This can be done with a &lt;code&gt;string&lt;/code&gt;, a &lt;code&gt;RegExp&lt;/code&gt;, a &lt;code&gt;function&lt;/code&gt; that is getting the module's source as an argument and returns a &lt;code&gt;boolean&lt;/code&gt;. &lt;code&gt;stats.excludeModules&lt;/code&gt; can be an &lt;code&gt;array&lt;/code&gt; of any of the above. &lt;code&gt;stats.excludeModules&lt;/code&gt;'s configuration &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/Stats.js#L215&quot;&gt;is merged&lt;/a&gt; with the &lt;code&gt;stats.exclude&lt;/code&gt;'s configuration value.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; マッチングモジュールの情報を除外します。これは、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;RegExp&lt;/code&gt; 、モジュールのソースを引数として取得し、 &lt;code&gt;boolean&lt;/code&gt; を返す &lt;code&gt;function&lt;/code&gt; て実行できます。 &lt;code&gt;stats.excludeModules&lt;/code&gt; は、上記のいずれかの &lt;code&gt;array&lt;/code&gt; にすることができます。 &lt;code&gt;stats.excludeModules&lt;/code&gt; の構成&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/Stats.js#L215&quot;&gt;は&lt;/a&gt;、 &lt;code&gt;stats.exclude&lt;/code&gt; の構成値とマージされます。</target>
        </trans-unit>
        <trans-unit id="034853ecb90bd491bd3fe753a782a9b955fe624b" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to exclude the warnings that are matching given filters. This can be done with a &lt;code&gt;string&lt;/code&gt;, a &lt;code&gt;RegExp&lt;/code&gt;, a &lt;code&gt;function&lt;/code&gt; that is getting a warning as an argument and returns a &lt;code&gt;boolean&lt;/code&gt;. &lt;code&gt;stats.warningsFilter&lt;/code&gt; can be an &lt;code&gt;array&lt;/code&gt; of any of the above.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 与えられたフィルタに一致している警告を除外します。これは、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;RegExp&lt;/code&gt; 、引数として警告を受け取り、 &lt;code&gt;boolean&lt;/code&gt; を返す &lt;code&gt;function&lt;/code&gt; て実行できます。 &lt;code&gt;stats.warningsFilter&lt;/code&gt; は、上記のいずれかの &lt;code&gt;array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="e8075191b39d35080de69fffada293a1345dcc41" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to include the debug information of the specified loggers such as Plugins or Loaders. When &lt;a href=&quot;#statslogging&quot;&gt;&lt;code&gt;stats.logging&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;stats.loggingDebug&lt;/code&gt; option is ignored.</source>
          <target state="translated">伝え &lt;code&gt;stats&lt;/code&gt; このようなプラグインやローダーなどの指定されたロガーのデバッグ情報を含めること。とき&lt;a href=&quot;#statslogging&quot;&gt; &lt;code&gt;stats.logging&lt;/code&gt; が&lt;/a&gt;に設定されている &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;stats.loggingDebug&lt;/code&gt; のオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="7aa947806b4ac5c7fcc66ee46ce4d944c0c0823a" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to show dependencies and the origin of warnings/errors. &lt;code&gt;stats.moduleTrace&lt;/code&gt; is available since webpack 2.5.0.</source>
          <target state="translated">依存関係と警告/エラーの原因を示すように &lt;code&gt;stats&lt;/code&gt; に指示します。 &lt;code&gt;stats.moduleTrace&lt;/code&gt; は、webpack2.5.0以降で使用できます。</target>
        </trans-unit>
        <trans-unit id="e82eff4868ad10cd4f402647f36e8b7f36150720" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to show performance hint when the file size exceeds &lt;a href=&quot;performance#performancemaxassetsize&quot;&gt;&lt;code&gt;performance.maxAssetSize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 、ファイルサイズを超えたときにパフォーマンスヒントを表示する&lt;a href=&quot;performance#performancemaxassetsize&quot;&gt; &lt;code&gt;performance.maxAssetSize&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bee6e181453469c702770c470f83894c8c173d29" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to show the &lt;code&gt;outputPath&lt;/code&gt;.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 表示するために &lt;code&gt;outputPath&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fb2c59b576299f63de293a87a6974392000677e0" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to show the &lt;code&gt;publicPath&lt;/code&gt;.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 表示するために &lt;code&gt;publicPath&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="2b25208f9624ef25637928588f85c14f6fb6b6c9" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to show the exports of the modules.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; モジュールの輸出を表示します。</target>
        </trans-unit>
        <trans-unit id="a22aaab81e2990093801072d6a161dcf05b515ee" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to sort the assets by a given field. All of the &lt;a href=&quot;#sorting-fields&quot;&gt;sorting fields&lt;/a&gt; are allowed to be used as values for &lt;code&gt;stats.assetsSort&lt;/code&gt;. Use &lt;code&gt;!&lt;/code&gt; prefix in the value to reverse the sort order by a given field.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 与えられたフィールドで資産をソートします。すべての&lt;a href=&quot;#sorting-fields&quot;&gt;並べ替えフィールド&lt;/a&gt;は、 &lt;code&gt;stats.assetsSort&lt;/code&gt; の値として使用できます。使用してください &lt;code&gt;!&lt;/code&gt; 指定されたフィールドによるソート順を逆にするための値のプレフィックス。</target>
        </trans-unit>
        <trans-unit id="b4b9fc4b64439385a1e103dd3431820e81076b2b" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to sort the chunks by a given field. All of the &lt;a href=&quot;#sorting-fields&quot;&gt;sorting fields&lt;/a&gt; are allowed to be used as values for &lt;code&gt;stats.chunksSort&lt;/code&gt;. Use &lt;code&gt;!&lt;/code&gt; prefix in the value to reverse the sort order by a given field.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 与えられたフィールドでチャンクをソートします。すべての&lt;a href=&quot;#sorting-fields&quot;&gt;並べ替えフィールド&lt;/a&gt;は、 &lt;code&gt;stats.chunksSort&lt;/code&gt; の値として使用できます。使用してください &lt;code&gt;!&lt;/code&gt; 指定されたフィールドによるソート順を逆にするための値のプレフィックス。</target>
        </trans-unit>
        <trans-unit id="9efdf8e622969630af7954f5c6a2e2928da6ed25" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; to sort the modules by a given field. All of the &lt;a href=&quot;#sorting-fields&quot;&gt;sorting fields&lt;/a&gt; are allowed to be used as values for &lt;code&gt;stats.modulesSort&lt;/code&gt;. Use &lt;code&gt;!&lt;/code&gt; prefix in the value to reverse the sort order by a given field.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 与えられたフィールドでモジュールをソートします。すべての&lt;a href=&quot;#sorting-fields&quot;&gt;並べ替えフィールド&lt;/a&gt;は、 &lt;code&gt;stats.modulesSort&lt;/code&gt; の値として使用できます。使用してください &lt;code&gt;!&lt;/code&gt; 指定されたフィールドによるソート順を逆にするための値のプレフィックス。</target>
        </trans-unit>
        <trans-unit id="7200bad022c86de11462a46cf027262f76899442" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about assets inside modules. Set &lt;code&gt;stats.moduleAssets&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to hide it.</source>
          <target state="translated">モジュール内のアセットに関する情報を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 伝えます。 &lt;code&gt;stats.moduleAssets&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定して、非表示にします。</target>
        </trans-unit>
        <trans-unit id="0a65e8dfa6357178583a6e9e06516e6fe9e2a000" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about assets that are related to other assets (like SourceMaps for assets).</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; （資産のSourceMapsなど）その他の資産に関連している資産についての情報を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="4ee6f177a9cd46ebc764eaab06571c467abde489" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about cached (not built) modules.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; キャッシュされた（組み込まれていない）モジュールに関する情報を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="d840377b948703512588660f7f94c75ec8c826f0" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about runtime modules.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; ランタイムモジュールに関する情報を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="550a79ca8da20c554b7b8ebe5d42a651a1a7f5c8" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the &lt;code&gt;namedChunkGroups&lt;/code&gt;.</source>
          <target state="translated">告げる &lt;code&gt;stats&lt;/code&gt; に関する情報を追加するかどうかを &lt;code&gt;namedChunkGroups&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4a1719f9f6fa4bccec51c74d3cc3cec6b86019a" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the built modules to information about the chunk.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; チャンクについての情報を内蔵したモジュールについての情報を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="62278a2e7fa6c9fd2a32b7ffb8d7a947d079664b" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the built modules.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 内蔵したモジュールに関する情報を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="41c24b0dcf4dc2e983ac43f96b66cfb0d2ffd8a3" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the cached assets. Setting &lt;code&gt;stats.cachedAssets&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will tell &lt;code&gt;stats&lt;/code&gt; to only show the emitted files (not the ones that were built).</source>
          <target state="translated">キャッシュされたアセットに関する情報を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。 &lt;code&gt;stats.cachedAssets&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、（ビルドされたファイルではなく）発行されたファイルのみを表示するように &lt;code&gt;stats&lt;/code&gt; に指示されます。</target>
        </trans-unit>
        <trans-unit id="360b102df0dd7a4fadae24a9c1a94f9a5bc37310" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the cached modules (not the ones that were built).</source>
          <target state="translated">キャッシュされたモジュール（ビルドされたモジュールではない）に関する情報を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。</target>
        </trans-unit>
        <trans-unit id="c2b6209d2722809af7ce81730f37c99de1553a2f" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the children.</source>
          <target state="translated">子に関する情報を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 伝えます。</target>
        </trans-unit>
        <trans-unit id="57d00329fb5a7de98c8b06085f758109e0395643" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the chunk. Setting &lt;code&gt;stats.chunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; results in a less verbose output.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; チャンクに関する情報を追加するかどうか。 &lt;code&gt;stats.chunks&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、出力の冗長性が低下します。</target>
        </trans-unit>
        <trans-unit id="6c5a60f11644960ba667bc67f07f3c3075589a14" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the hash of the compilation.</source>
          <target state="translated">コンパイルのハッシュに関する情報を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。</target>
        </trans-unit>
        <trans-unit id="731308cefe5cbdf12566080e952bd4878f1b4431" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add information about the origins of chunks and chunk merging.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; チャンクとチャンクマージの起源についての情報を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="667f80ac0876ceba6f3d3eb2a33ab34b6d12f72b" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add logging output.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; ログ出力を追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="06c072db8bd3a107dd64c692747c1cce2bbd57b8" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add the build date and the build time information. Set &lt;code&gt;stats.builtAt&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to hide it.</source>
          <target state="translated">ビルド日付とビルド時間情報を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。 &lt;code&gt;stats.builtAt&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定して、非表示にします。</target>
        </trans-unit>
        <trans-unit id="f4331a15d86041529f6795c64909be40562e5569" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add the details to the errors.</source>
          <target state="translated">エラーに詳細を追加するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。</target>
        </trans-unit>
        <trans-unit id="a7c4216bba87e53f0b0bb2dd1c9e70fd660f63b0" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to add the details to the errors. It defaults to &lt;code&gt;'auto'&lt;/code&gt; which will show error details when there're only 2 or less errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0987faab80635eaf080a009920e43fea7c7f98" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to display the &lt;code&gt;--env&lt;/code&gt; information.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 表示するかどうか &lt;code&gt;--env&lt;/code&gt; 情報を。</target>
        </trans-unit>
        <trans-unit id="1e0071ffbe6bf2d4733b24d5bc29727459ac4c1f" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to display the distance from the entry point for each module.</source>
          <target state="translated">伝え &lt;code&gt;stats&lt;/code&gt; モジュールごとにエントリーポイントからの距離を表示するかどうか。</target>
        </trans-unit>
        <trans-unit id="c108172dff599d8eeef5c5a9ab4c13d6fb049f9f" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to display the entry points with the corresponding bundles.</source>
          <target state="translated">対応するバンドルとともにエントリポイントを表示するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。</target>
        </trans-unit>
        <trans-unit id="64b89f9eb2339742f0d25868e1b65fe4fc5584d5" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to display the errors.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; エラーを表示するかどうか。</target>
        </trans-unit>
        <trans-unit id="e879532e6ae73160981e0a9df65d5bdcd9d7763c" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to group assets by how their are related to chunks.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 自分がチャンクに関連しているかによって、グループ資産へのかどうか。</target>
        </trans-unit>
        <trans-unit id="12a296549ee6d5549456268e25d7f134813aa87b" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to group assets by their asset info (immutable, development, hotModuleReplacement, etc).</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 、資産情報（不変、開発、hotModuleReplacement、等）することにより、グループ資産へのかどうか。</target>
        </trans-unit>
        <trans-unit id="c4ec348747de9ede0cc265cb9a839eb7c2b7df1a" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to group assets by their status (emitted, compared for emit or cached).</source>
          <target state="translated">伝え &lt;code&gt;stats&lt;/code&gt; グループ資産の状態によって（EMITまたはキャッシュするための比較、放出された）かどうか。</target>
        </trans-unit>
        <trans-unit id="59ec1bbd331072af3ddaf83bc7a1299dad92b043" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to group modules by their attributes (errors, warnings, assets, optional, orphan, or dependent).</source>
          <target state="translated">モジュールを属性（エラー、警告、アセット、オプション、孤立、または依存）でグループ化するかどうかを &lt;code&gt;stats&lt;/code&gt; 指示します。</target>
        </trans-unit>
        <trans-unit id="df485738be31ec821ae5301deb8b4a6df563f68f" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to hide &lt;code&gt;orphan&lt;/code&gt; modules. A module is an &lt;code&gt;orphan&lt;/code&gt; if it is not included in any chunk. Orphan modules are hidden by default in &lt;code&gt;stats&lt;/code&gt;.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; 非表示にするかどうかを &lt;code&gt;orphan&lt;/code&gt; モジュール。モジュールがどのチャンクにも含まれていない場合、そのモジュールは &lt;code&gt;orphan&lt;/code&gt; ています。孤立したモジュールは、デフォルトで &lt;code&gt;stats&lt;/code&gt; 非表示になっています。</target>
        </trans-unit>
        <trans-unit id="d40bcfb2382dc120ebe0da826ee5de90f0ac4d23" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to output in the different colors.</source>
          <target state="translated">異なる色で出力するかどうかを &lt;code&gt;stats&lt;/code&gt; 伝えます。</target>
        </trans-unit>
        <trans-unit id="82209417c1f00f4eb01861be845e166385203de3" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to show chunk modules that are dependencies of other modules of the chunk.</source>
          <target state="translated">指示します &lt;code&gt;stats&lt;/code&gt; チャンクの他のモジュールの依存関係しているチャンクのモジュールを表示するかどうか。</target>
        </trans-unit>
        <trans-unit id="1354299c2eb6c178ae159e43e8fa10279d4aed3e" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to show stack trace of errors.</source>
          <target state="translated">エラーのスタックトレースを表示するかどうかを &lt;code&gt;stats&lt;/code&gt; 通知します。</target>
        </trans-unit>
        <trans-unit id="739a6811a3a22d544acf5d13868fa53ecf20b9c7" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to show the asset information. Set &lt;code&gt;stats.assets&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to hide it.</source>
          <target state="translated">資産情報を表示するかどうかを &lt;code&gt;stats&lt;/code&gt; 伝えます。 &lt;code&gt;stats.assets&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定して、非表示にします。</target>
        </trans-unit>
        <trans-unit id="d7ec3604f68c2f67ea1324e9dc10c45a17cae788" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;stats&lt;/code&gt; whether to show which exports of a module are used.</source>
          <target state="translated">モジュールのどのエクスポートが使用されているかを表示するかどうかを &lt;code&gt;stats&lt;/code&gt; 指示します。</target>
        </trans-unit>
        <trans-unit id="df138909483646e5a35c3a6796edfeffe65eb91c" translate="yes" xml:space="preserve">
          <source>Tells clients connected to &lt;code&gt;devServer&lt;/code&gt; to use provided socket host.</source>
          <target state="translated">&lt;code&gt;devServer&lt;/code&gt; に接続されているクライアントに、提供されているソケットホストを使用するように指示します。</target>
        </trans-unit>
        <trans-unit id="eaedc73854c57d3f29d48bd03032034331b74e83" translate="yes" xml:space="preserve">
          <source>Tells clients connected to &lt;code&gt;devServer&lt;/code&gt; to use provided socket port.</source>
          <target state="translated">&lt;code&gt;devServer&lt;/code&gt; に接続されているクライアントに、提供されたソケットポートを使用するように指示します。</target>
        </trans-unit>
        <trans-unit id="ed0e77b9958a798d7db3ec927a76636ddc78d8e4" translate="yes" xml:space="preserve">
          <source>Tells dev-server to open the browser after server had been started. Set it to &lt;code&gt;true&lt;/code&gt; to open your default browser.</source>
          <target state="translated">サーバーの起動後にブラウザを開くようにdev-serverに指示します。 &lt;code&gt;true&lt;/code&gt; に設定すると、デフォルトのブラウザが開きます。</target>
        </trans-unit>
        <trans-unit id="63c31652658e9f03316b8a10c887083bcee61c7c" translate="yes" xml:space="preserve">
          <source>Tells dev-server to suppress messages like the webpack bundle information. Errors and warnings will still be shown.</source>
          <target state="translated">dev-server に webpack バンドル情報のようなメッセージを抑制するように指示します。エラーや警告は表示されます。</target>
        </trans-unit>
        <trans-unit id="f503cdc8ed7fc4ec9d8d6772e7da3760ab698557" translate="yes" xml:space="preserve">
          <source>Tells dev-server to use &lt;a href=&quot;https://github.com/expressjs/serve-index&quot;&gt;&lt;code&gt;serveIndex&lt;/code&gt;&lt;/a&gt; middleware when enabled.</source>
          <target state="translated">有効にすると、&lt;a href=&quot;https://github.com/expressjs/serve-index&quot;&gt; &lt;code&gt;serveIndex&lt;/code&gt; &lt;/a&gt;ミドルウェアを使用するようにdev-serverに指示します。</target>
        </trans-unit>
        <trans-unit id="070435baf1bd4d2acfa8957a777701c8ed9571e3" translate="yes" xml:space="preserve">
          <source>Tells if result should be minimized.</source>
          <target state="translated">結果を最小化するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="066018b53e7aacd2fb906ab1a629d6d72e92c472" translate="yes" xml:space="preserve">
          <source>Tells if source map should be generated. Since generating source maps can be an expensive task, you should check if source maps are actually requested.</source>
          <target state="translated">ソース マップを生成するかどうかを指定します。ソースマップを生成するのは高価な作業なので、ソースマップが実際に要求されているかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="002f265592e0a31a76086e3fa4ac479ad83d1202" translate="yes" xml:space="preserve">
          <source>Tells the &lt;a href=&quot;https://github.com/webpack/loader-runner&quot;&gt;loader-runner&lt;/a&gt; that the loader intends to call back asynchronously. Returns &lt;code&gt;this.callback&lt;/code&gt;.</source>
          <target state="translated">ローダーが非同期でコールバックするつもりであることをローダー&lt;a href=&quot;https://github.com/webpack/loader-runner&quot;&gt;ランナーに&lt;/a&gt;伝えます。 &lt;code&gt;this.callback&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b03d1c7f588b7610c47bde7b77fbfcc7c1cc0f41" translate="yes" xml:space="preserve">
          <source>Tells webpack to add &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; wrapper around emitted code.</source>
          <target state="translated">放出されたコードの周りに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;ラッパーを追加するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="fb3a6cc8712fd7540919f0877a27cda86a852f72" translate="yes" xml:space="preserve">
          <source>Tells webpack to add &lt;code&gt;charset=&quot;utf-8&quot;&lt;/code&gt; to the HTML &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">HTMLの &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに &lt;code&gt;charset=&quot;utf-8&quot;&lt;/code&gt; を追加するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="9d83274274c73903a1f8ce6b28a1e27881628a17" translate="yes" xml:space="preserve">
          <source>Tells webpack to check if to be emitted file already exists and has the same content before writing to the output file system.</source>
          <target state="translated">出力ファイルシステムに書き込む前に、出力されるファイルが既に存在し、同じ内容を持っているかどうかをチェックするようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="678849cdcfae499dc3bf39b28e35e9ed9493aec2" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove chunks which are empty. Setting &lt;code&gt;optimization.removeEmptyChunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">空のチャンクを検出して削除するようにwebpackに指示します。 &lt;code&gt;optimization.removeEmptyChunks&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、この最適化が無効になります。</target>
        </trans-unit>
        <trans-unit id="5ff451f631199311fa712e6d24be429e485ab51b" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove modules from chunks when these modules are already included in all parents. Setting &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">これらのモジュールがすべての親にすでに含まれている場合、モジュールを検出してチャンクから削除するようにwebpackに指示します。 &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、この最適化が無効になります。</target>
        </trans-unit>
        <trans-unit id="421dfd09bdcd9fd9ea2241c34e14e211508b7d74" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove modules from chunks when these modules are already included in all parents. Setting &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will enable this optimization. Enabled by default in &lt;a href=&quot;mode&quot;&gt;&lt;code&gt;production&lt;/code&gt; mode&lt;/a&gt;.</source>
          <target state="translated">これらのモジュールがすでにすべての親に含まれている場合に、チャンクからモジュールを検出して削除するようにwebpackに指示します。 &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、この最適化が有効になります。&lt;a href=&quot;mode&quot;&gt; &lt;code&gt;production&lt;/code&gt; モードでは&lt;/a&gt;デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="4d555ade81cd8447fdc4e7d090f9249ae596d436" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine and flag chunks which are subsets of other chunks in a way that subsets don&amp;rsquo;t have to be loaded when the bigger chunk has been already loaded. By default &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">大きいチャンクが既にロードされている場合にサブセットをロードする必要がないように、他のチャンクのサブセットであるチャンクを判別してフラグを付けるようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="2b4a2c5de7d7b9ee28bda1c95d4d431787856adf" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine and flag chunks which are subsets of other chunks in a way that subsets don&amp;rsquo;t have to be loaded when the bigger chunk has been already loaded. By default &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">より大きなチャンクがすでにロードされているときにサブセットをロードする必要がないように、他のチャンクのサブセットであるチャンクを判別してフラグを立てるようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;mode&quot;&gt;モードで&lt;/a&gt;有効になり、それ以外の場合は無効になります。</target>
        </trans-unit>
        <trans-unit id="49b0cf198c848627a5a85418a4e575b1c5ef1e2c" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine used exports for each module. This depends on &lt;a href=&quot;#optimization-occurrenceorder&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt;. Information collected by &lt;code&gt;optimization.usedExports&lt;/code&gt; is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports. By default &lt;code&gt;optimization.usedExports&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">各モジュールの使用済みエクスポートを判別するようにwebpackに指示します。これは、&lt;a href=&quot;#optimization-occurrenceorder&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; に&lt;/a&gt;依存します。 &lt;code&gt;optimization.usedExports&lt;/code&gt; によって収集された情報は、他の最適化またはコード生成で使用されます。つまり、未使用のエクスポートではエクスポートは生成されず、すべての使用法に互換性がある場合、エクスポート名は単一の文字識別子に変換されます。最小化機能でのデッドコードの除去はこれから利益を得て、未使用のエクスポートを削除できます。デフォルトでは、 &lt;code&gt;optimization.usedExports&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="915583af81bccb894772e920327cfd2f82be2b59" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine used exports for each module. This depends on &lt;a href=&quot;#optimizationoccurrenceorder&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt;. Information collected by &lt;code&gt;optimization.usedExports&lt;/code&gt; is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports.</source>
          <target state="translated">各モジュールで使用されているエクスポートを判別するようにwebpackに指示します。これは&lt;a href=&quot;#optimizationoccurrenceorder&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; に&lt;/a&gt;依存します。 &lt;code&gt;optimization.usedExports&lt;/code&gt; によって収集された情報は、他の最適化またはコード生成によって使用されます。つまり、未使用のエクスポートに対してエクスポートは生成されず、すべての使用法に互換性がある場合、エクスポート名は単一の文字識別子に変更されます。最小化でのデッドコードの除去はこれから恩恵を受け、未使用のエクスポートを削除できます。</target>
        </trans-unit>
        <trans-unit id="2c3e54cb828d1ed227e5deba29c349c9a2548f01" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine used exports for each module. This depends on &lt;a href=&quot;#optimizationprovidedexports&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt;. Information collected by &lt;code&gt;optimization.usedExports&lt;/code&gt; is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a4221a6a38b856bbdcd3527901d792e6507753" translate="yes" xml:space="preserve">
          <source>Tells webpack to enable &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin&quot;&gt;cross-origin&lt;/a&gt; loading of chunks. Only takes effect when &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'web'&lt;/code&gt;, which uses JSONP for loading on-demand chunks, by adding script tags.</source>
          <target state="translated">チャンクの&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin&quot;&gt;クロスオリジン&lt;/a&gt;ロードを有効にするようにwebpackに指示します。スクリプトタグを追加することにより、&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;'web'&lt;/code&gt; 設定されている場合にのみ有効になります。これは、JSONPを使用してオンデマンドチャンクをロードします。</target>
        </trans-unit>
        <trans-unit id="53346d778cc236a954ab23a350d012de81c68945" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out an order of modules which will result in the smallest initial bundle. By default &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">最小の初期バンドルになるモジュールの順序を把握するようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="492522051e2dfcb47f48ceb261fc17820a31d711" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out an order of modules which will result in the smallest initial bundle. By default &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">初期バンドルが最小になるモジュールの順序を把握するようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;mode&quot;&gt;モードで&lt;/a&gt;は有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="767b81cab8dc96a3bac18a6ba2b717cfba1c8930" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out which exports are provided by modules to generate more efficient code for &lt;code&gt;export * from ...&lt;/code&gt;. By default &lt;code&gt;optimization.providedExports&lt;/code&gt; is enabled.</source>
          <target state="translated">&lt;code&gt;export * from ...&lt;/code&gt; するためのより効率的なコードを生成するためにモジュールによって提供されるエクスポートを把握するようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.providedExports&lt;/code&gt; は有効になっています。</target>
        </trans-unit>
        <trans-unit id="3471cdb0c7bb551a61a5f66be480922f5f06b708" translate="yes" xml:space="preserve">
          <source>Tells webpack to find segments of the module graph which can be safely concatenated into a single module. Depends on &lt;a href=&quot;#optimization-providedexports&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#optimization-usedexports&quot;&gt;&lt;code&gt;optimization.usedExports&lt;/code&gt;&lt;/a&gt;. By default &lt;code&gt;optimization.concatenateModules&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">安全に連結して単一のモジュールにできるモジュールグラフのセグメントを見つけるようにwebpackに指示します。&lt;a href=&quot;#optimization-providedexports&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#optimization-usedexports&quot;&gt; &lt;code&gt;optimization.usedExports&lt;/code&gt; に&lt;/a&gt;依存します。デフォルトでは、 &lt;code&gt;optimization.concatenateModules&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モードで&lt;/a&gt;有効になっており、それ以外の場合は無効になっています。</target>
        </trans-unit>
        <trans-unit id="354e94011c1a9bfb0245b94f3ebc132e24a5f52f" translate="yes" xml:space="preserve">
          <source>Tells webpack to find segments of the module graph which can be safely concatenated into a single module. Depends on &lt;a href=&quot;#optimizationprovidedexports&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#optimizationusedexports&quot;&gt;&lt;code&gt;optimization.usedExports&lt;/code&gt;&lt;/a&gt;. By default &lt;code&gt;optimization.concatenateModules&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">単一のモジュールに安全に連結できるモジュールグラフのセグメントを見つけるようにwebpackに指示します。&lt;a href=&quot;#optimizationprovidedexports&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#optimizationusedexports&quot;&gt; &lt;code&gt;optimization.usedExports&lt;/code&gt; に&lt;/a&gt;依存します。デフォルトでは、 &lt;code&gt;optimization.concatenateModules&lt;/code&gt; は &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;mode&quot;&gt;モードで&lt;/a&gt;有効になり、それ以外の場合は無効になります。</target>
        </trans-unit>
        <trans-unit id="a14999958e319f2a7d1c5599256d260c3a463b6c" translate="yes" xml:space="preserve">
          <source>Tells webpack to ignore &lt;a href=&quot;#splitchunksminsize&quot;&gt;&lt;code&gt;splitChunks.minSize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#splitchunksminchunks&quot;&gt;&lt;code&gt;splitChunks.minChunks&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#splitchunksmaxasyncrequests&quot;&gt;&lt;code&gt;splitChunks.maxAsyncRequests&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#splitchunksmaxinitialrequests&quot;&gt;&lt;code&gt;splitChunks.maxInitialRequests&lt;/code&gt;&lt;/a&gt; options and always create chunks for this cache group.</source>
          <target state="translated">&lt;a href=&quot;#splitchunksminsize&quot;&gt; &lt;code&gt;splitChunks.minSize&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#splitchunksminchunks&quot;&gt; &lt;code&gt;splitChunks.minChunks&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#splitchunksmaxasyncrequests&quot;&gt; &lt;code&gt;splitChunks.maxAsyncRequests&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#splitchunksmaxinitialrequests&quot;&gt; &lt;code&gt;splitChunks.maxInitialRequests&lt;/code&gt; &lt;/a&gt;オプションを無視し、常にこのキャッシュグループのチャンクを作成するようにwebpackに指示します。</target>
        </trans-unit>
        <trans-unit id="09eedbb5d29703695b8d4d9c51df22f60951a3ee" translate="yes" xml:space="preserve">
          <source>Tells webpack to ignore specific warnings. This can be done with a &lt;code&gt;RegExp&lt;/code&gt;, a custom &lt;code&gt;function&lt;/code&gt; to select warnings based on the raw warning instance which is getting &lt;code&gt;WebpackError&lt;/code&gt; and &lt;code&gt;Compilation&lt;/code&gt; as arguments and returns a &lt;code&gt;boolean&lt;/code&gt;, an &lt;code&gt;object&lt;/code&gt; with the following properties:</source>
          <target state="translated">特定の警告を無視するようにwebpackに指示します。これはで行うことができます &lt;code&gt;RegExp&lt;/code&gt; 、カスタム &lt;code&gt;function&lt;/code&gt; になっている生警告インスタンスに基づく警告を選択し &lt;code&gt;WebpackError&lt;/code&gt; と &lt;code&gt;Compilation&lt;/code&gt; 引数と戻りますよう &lt;code&gt;boolean&lt;/code&gt; 、 &lt;code&gt;object&lt;/code&gt; 次のプロパティを持つの：</target>
        </trans-unit>
        <trans-unit id="35aec2c0f0349e1f86c07ebb33883970eccbfd46" translate="yes" xml:space="preserve">
          <source>Tells webpack to include comments in bundles with information about the contained modules. This option defaults to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; respectively.</source>
          <target state="translated">含まれているモジュールに関する情報を含むコメントをバンドルに含めるようにwebpackに指示します。このオプションのデフォルトは &lt;code&gt;true&lt;/code&gt; で &lt;code&gt;development&lt;/code&gt; し、 &lt;code&gt;false&lt;/code&gt; で &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt;それぞれ。</target>
        </trans-unit>
        <trans-unit id="a9779a6e9b148d3c3b80843cb438b27b90281cb7" translate="yes" xml:space="preserve">
          <source>Tells webpack to include comments in bundles with information about the contained modules. This option defaults to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; respectively.</source>
          <target state="translated">含まれているモジュールに関する情報を含むコメントをバンドルに含めるようにwebpackに指示します。このオプションのデフォルトは &lt;code&gt;true&lt;/code&gt; で &lt;code&gt;development&lt;/code&gt; し、 &lt;code&gt;false&lt;/code&gt; で &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;mode&quot;&gt;モード&lt;/a&gt;それぞれ。</target>
        </trans-unit>
        <trans-unit id="205683841cb87c20a34b2dd6a6881799cdc8356e" translate="yes" xml:space="preserve">
          <source>Tells webpack to include comments in bundles with information about the contained modules. This option defaults to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; respectively. &lt;code&gt;'verbose'&lt;/code&gt; shows more information like exports, runtime requirements and bailouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51482cc3f1d2bedf8bced5bba0c82b5d42c230b" translate="yes" xml:space="preserve">
          <source>Tells webpack to merge chunks which contain the same modules. Setting &lt;code&gt;optimization.mergeDuplicateChunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">同じモジュールを含むチャンクをマージするようにwebpackに指示します。 &lt;code&gt;optimization.mergeDuplicateChunks&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、この最適化が無効になります。</target>
        </trans-unit>
        <trans-unit id="b58296314b274ed9f5e0ac6d182c74666bcd178f" translate="yes" xml:space="preserve">
          <source>Tells webpack to recognise the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md&quot;&gt;&lt;code&gt;sideEffects&lt;/code&gt;&lt;/a&gt; flag in &lt;code&gt;package.json&lt;/code&gt; or rules to skip over modules which are flagged to contain no side effects when exports are not used.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md&quot;&gt; &lt;code&gt;sideEffects&lt;/code&gt; &lt;/a&gt;フラグを認識するようにwebpackに指示するか、エクスポートが使用されていない場合に副作用を含まないとフラグが設定されているモジュールをスキップするルールを指定します。</target>
        </trans-unit>
        <trans-unit id="29f35228e53a433d0b2ca4e42a82a658b3ba86ed" translate="yes" xml:space="preserve">
          <source>Tells webpack to set &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to a given string value. &lt;code&gt;optimization.nodeEnv&lt;/code&gt; uses &lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePlugin&lt;/a&gt; unless set to &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;optimization.nodeEnv&lt;/code&gt;&lt;strong&gt;defaults&lt;/strong&gt; to &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; if set, else falls back to &lt;code&gt;&quot;production&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を指定された文字列値に設定するようにwebpackに指示します。 &lt;code&gt;optimization.nodeEnv&lt;/code&gt; は、 &lt;code&gt;false&lt;/code&gt; に設定されていない限り、&lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePluginを&lt;/a&gt;使用します。&lt;strong&gt;設定さ&lt;/strong&gt;れている場合、 &lt;code&gt;optimization.nodeEnv&lt;/code&gt; は&lt;strong&gt;デフォルト&lt;/strong&gt;で&lt;a href=&quot;../concepts/mode&quot;&gt;モードに&lt;/a&gt;&lt;strong&gt;なり&lt;/strong&gt;、そうでない場合は &lt;code&gt;&quot;production&quot;&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="3c13b17631b14af32393d330e0959eaf88ada3c9" translate="yes" xml:space="preserve">
          <source>Tells webpack to set &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to a given string value. &lt;code&gt;optimization.nodeEnv&lt;/code&gt; uses &lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePlugin&lt;/a&gt; unless set to &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;optimization.nodeEnv&lt;/code&gt;&lt;strong&gt;defaults&lt;/strong&gt; to &lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; if set, else falls back to &lt;code&gt;'production'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.env.NODE_ENV&lt;/code&gt; を指定された文字列値に設定するようにwebpackに指示します。 &lt;code&gt;optimization.nodeEnv&lt;/code&gt; は、 &lt;code&gt;false&lt;/code&gt; に設定されていない限り、&lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePluginを&lt;/a&gt;使用します。&lt;strong&gt;設定さ&lt;/strong&gt;れている場合、 &lt;code&gt;optimization.nodeEnv&lt;/code&gt; は&lt;strong&gt;デフォルト&lt;/strong&gt;で&lt;a href=&quot;mode&quot;&gt;モードに&lt;/a&gt;&lt;strong&gt;なり&lt;/strong&gt;、そうでない場合は &lt;code&gt;'production'&lt;/code&gt; フォールバックします。</target>
        </trans-unit>
        <trans-unit id="5c2c5b8993daed03b59d36b12cfb045e9697ee0b" translate="yes" xml:space="preserve">
          <source>Tells webpack to use readable chunk identifiers for better debugging. This option is enabled by default for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;development&lt;/code&gt; and disabled for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;production&lt;/code&gt; if no option is provided in webpack config.</source>
          <target state="translated">デバッグを改善するために、読み取り可能なチャンク識別子を使用するようにwebpackに指示します。このオプションは、webpack構成でオプションが提供されていない場合、&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;development&lt;/code&gt; デフォルトで有効になり、&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;production&lt;/code&gt; 無効になります。</target>
        </trans-unit>
        <trans-unit id="0f2f2c942de55c59c53a2f31de1a4dd6e58cd92e" translate="yes" xml:space="preserve">
          <source>Tells webpack to use readable module identifiers for better debugging. When &lt;code&gt;optimization.namedModules&lt;/code&gt; is not set in webpack config, webpack will enable it by default for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;development&lt;/code&gt; and disable for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;production&lt;/code&gt;.</source>
          <target state="translated">デバッグを改善するために、読み取り可能なモジュール識別子を使用するようにwebpackに指示します。 &lt;code&gt;optimization.namedModules&lt;/code&gt; がwebpack configで設定されていない場合、webpackは、&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;development&lt;/code&gt; ではデフォルトで有効になり、&lt;a href=&quot;../concepts/mode&quot;&gt;モード&lt;/a&gt; &lt;code&gt;production&lt;/code&gt; 無効になります。</target>
        </trans-unit>
        <trans-unit id="cb838d073a4c7312ce1cda4da406796d7630688d" translate="yes" xml:space="preserve">
          <source>Tells webpack to use the future version of asset emitting logic, which allows freeing memory of assets after emitting. It could break plugins which assume that assets are still readable after they were emitted.</source>
          <target state="translated">webpack に、アセットを放出した後にアセットのメモリを解放することを可能にする、将来のバージョンのアセット放出ロジックを使用するように指示します。これは、アセットが放出された後も読み取れると仮定しているプラグインを壊す可能性があります。</target>
        </trans-unit>
        <trans-unit id="48bcbe5270c1f7eaad1272c2a1c1d7854440abc5" translate="yes" xml:space="preserve">
          <source>Tells webpack whether to require to use an extension for modules (e.g. loaders).</source>
          <target state="translated">モジュール (ローダーなど)に拡張機能を使用することを要求するかどうかを webpack に指示します。</target>
        </trans-unit>
        <trans-unit id="735c0d13f0b2bc9f5462bd3d7adef80a01ee6e49" translate="yes" xml:space="preserve">
          <source>Tells webpack which algorithm to use when choosing chunk ids. Setting &lt;code&gt;optimization.chunkIds&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; tells webpack that none of built-in algorithms should be used, as custom one can be provided via plugin. There are a couple of defaults for &lt;code&gt;optimization.chunkIds&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b21603e9ebfb4b57b65e7d815815662e7e4ab1" translate="yes" xml:space="preserve">
          <source>Tells webpack which algorithm to use when choosing chunk ids. Setting &lt;code&gt;optimization.chunkIds&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; tells webpack that none of built-in algorithms should be used, as custom one can be provided via plugin. There are couple of defaults for &lt;code&gt;optimization.chunkIds&lt;/code&gt;:</source>
          <target state="translated">チャンクIDを選択するときに使用するアルゴリズムをwebpackに指示します。 &lt;code&gt;optimization.chunkIds&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、プラグインを介してカスタムアルゴリズムを提供できるため、組み込みアルゴリズムを使用しないようにwebpackに指示します。 &lt;code&gt;optimization.chunkIds&lt;/code&gt; はいくつかのデフォルトがあります：</target>
        </trans-unit>
        <trans-unit id="37e612d0a3179abdfd6d8cc456b280f8a66490ce" translate="yes" xml:space="preserve">
          <source>Tells webpack which algorithm to use when choosing module ids. Setting &lt;code&gt;optimization.moduleIds&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; tells webpack that none of built-in algorithms should be used, as custom one can be provided via plugin. By default &lt;code&gt;optimization.moduleIds&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">モジュールIDを選択するときに使用するアルゴリズムをwebpackに指示します。 &lt;code&gt;optimization.moduleIds&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、プラグインを介してカスタムアルゴリズムを提供できるため、組み込みアルゴリズムを使用しないようにwebpackに指示します。デフォルトでは、 &lt;code&gt;optimization.moduleIds&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="dc68610743d7021a571f80b8ceb084cbd65c3e6a" translate="yes" xml:space="preserve">
          <source>Template strings</source>
          <target state="translated">テンプレート文字列</target>
        </trans-unit>
        <trans-unit id="200be3445e2bde1ede81d4c95d33bd1076a8277f" translate="yes" xml:space="preserve">
          <source>Templating</source>
          <target state="translated">Templating</target>
        </trans-unit>
        <trans-unit id="9dd6b98a1a71c8b5a41c77224c64f63faaf64130" translate="yes" xml:space="preserve">
          <source>Terser actually tries to figure it out, but it doesn't know for sure in many cases. This doesn't mean that terser is not doing its job well because it can't figure it out. It's just too difficult to determine it reliably in a dynamic language like JavaScript.</source>
          <target state="translated">Terserは実際にそれを解明しようとしますが、多くの場合は確実にはわかりません。これは、terserがそれを解明できないからといって、terserがうまく仕事をしていないということではありません。JavaScript のような動的な言語では、それを確実に決定するのが難しすぎるのです。</target>
        </trans-unit>
        <trans-unit id="2e3e005407299d2421c38e780268205f1057d593" translate="yes" xml:space="preserve">
          <source>Terser minify &lt;a href=&quot;https://github.com/terser-js/terser#minify-options&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">Terserは&lt;a href=&quot;https://github.com/terser-js/terser#minify-options&quot;&gt;オプションを&lt;/a&gt;縮小します。</target>
        </trans-unit>
        <trans-unit id="f8dcbd31ecdaba6d4d938252d7d557647540e187" translate="yes" xml:space="preserve">
          <source>Terser minify options.</source>
          <target state="translated">Terserのminifyオプション。</target>
        </trans-unit>
        <trans-unit id="cca680f3e51dedd055b5b7479ead7486d3946d3b" translate="yes" xml:space="preserve">
          <source>TerserWebpackPlugin</source>
          <target state="translated">TerserWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="cb1dc79df1cb9310379fcd3a272451d5d79e44e9" translate="yes" xml:space="preserve">
          <source>Test all loaded modules for updates and, if updates exist, &lt;code&gt;apply&lt;/code&gt; them.</source>
          <target state="translated">ロードされたすべてのモジュールの更新をテストし、更新が存在する &lt;code&gt;apply&lt;/code&gt; それらを適用します。</target>
        </trans-unit>
        <trans-unit id="18180da60ee4b39df19792be2645538d6c578338" translate="yes" xml:space="preserve">
          <source>Test to match files against</source>
          <target state="translated">ファイルとファイルを一致させるためのテスト</target>
        </trans-unit>
        <trans-unit id="fae6e75610ee85d5156a1dc129b2d22f8fb6fe80" translate="yes" xml:space="preserve">
          <source>Test to match files against.</source>
          <target state="translated">ファイルを照合するためのテスト。</target>
        </trans-unit>
        <trans-unit id="4865f0db7497077dec0843fd400da9776184278a" translate="yes" xml:space="preserve">
          <source>Test whether or not the given module is bundled by webpack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="50dbbe37990bafc325edea02edc1d82e5ea8b60d" translate="yes" xml:space="preserve">
          <source>Thankfully there are a two solutions to this problem:</source>
          <target state="translated">ありがたいことに、この問題には2つの解決策があります。</target>
        </trans-unit>
        <trans-unit id="5f768c28a658c6bc08900e35d9efed4bd2ce04c9" translate="yes" xml:space="preserve">
          <source>Thanks to Javier (&lt;a href=&quot;https://github.com/vieron&quot;&gt;@vieron&lt;/a&gt;) for authoring this plugin.</source>
          <target state="translated">このプラグインを作成してくれたJavier（&lt;a href=&quot;https://github.com/vieron&quot;&gt;@vieron&lt;/a&gt;）に感謝します。</target>
        </trans-unit>
        <trans-unit id="16f1b9980bfe0cab0829dfb2682d18033b865745" translate="yes" xml:space="preserve">
          <source>That's all you need. Since we're already using the &lt;code&gt;DefinePlugin&lt;/code&gt; on our configuration, &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; will always be defined so we can safely do that.</source>
          <target state="translated">それだけで十分です。この構成では既に &lt;code&gt;DefinePlugin&lt;/code&gt; を使用しているので、 &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; は常に定義されるため、安全に実行できます。</target>
        </trans-unit>
        <trans-unit id="5aed75fadc485a43ba5d84a71779dcd723dd4182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rule-enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; property affects the loader category. Whether it's a normal, pre- or post- loader.</source>
          <target state="translated">&lt;a href=&quot;#rule-enforce&quot;&gt; &lt;code&gt;enforce&lt;/code&gt; &lt;/a&gt;プロパティは、ローダーカテゴリに影響を与えます。それが通常のローダーか、プリローダーかポストローダーか。</target>
        </trans-unit>
        <trans-unit id="e63386709206a80b9a4b95abfe8e4511c665fc19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rule-parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; property affects the parser options.</source>
          <target state="translated">&lt;a href=&quot;#rule-parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;プロパティはパーサのオプションに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="4c40a2ea246832127f09ec0e7a72826858b57361" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ruleenforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; property affects the loader category. Whether it's a normal, pre- or post- loader.</source>
          <target state="translated">&lt;a href=&quot;#ruleenforce&quot;&gt; &lt;code&gt;enforce&lt;/code&gt; &lt;/a&gt;プロパティは、ローダーカテゴリに影響を与えます。通常のローダー、プリローダー、ポストローダーのいずれであっても。</target>
        </trans-unit>
        <trans-unit id="a90d6d00488aa11c3a9fa7405621e13165fb2048" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ruleparser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; property affects the parser options.</source>
          <target state="translated">&lt;a href=&quot;#ruleparser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;プロパティはパーサのオプションに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="e14e11d1390c3b062e08607169bdeeea5d147e37" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../configuration/entry-context#dependencies&quot;&gt;&lt;code&gt;dependOn&lt;/code&gt; option&lt;/a&gt; allows to share the modules between the chunks:</source>
          <target state="translated">&lt;a href=&quot;../configuration/entry-context#dependencies&quot;&gt; &lt;code&gt;dependOn&lt;/code&gt; のオプションは、&lt;/a&gt;チャンク間のモジュールを共有することができます：</target>
        </trans-unit>
        <trans-unit id="21209c1336894328250405b1f9671f6d33f7f912" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../configuration/optimization#optimizationconcatenatemodules&quot;&gt;concatenatedModules optimization&lt;/a&gt; is not compatible with this mode since Closure-Compiler performs an equivalent optimization). The plugin will emit a warning if this optimization is not disabled.</source>
          <target state="translated">&lt;a href=&quot;../configuration/optimization#optimizationconcatenatemodules&quot;&gt;concatenatedModules最適化は、&lt;/a&gt;クロージャコンパイラが同等の最適化を行うので）、このモードと互換性がありません。この最適化が無効になっていない場合、プラグインは警告を発します。</target>
        </trans-unit>
        <trans-unit id="3dd783e086888e4ee76fcb7bfdb736f16816c856" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../configuration/optimization#optimizationsideeffects&quot;&gt;&lt;code&gt;sideEffects&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../configuration/optimization#optimizationusedexports&quot;&gt;&lt;code&gt;usedExports&lt;/code&gt;&lt;/a&gt; (more known as tree shaking) optimizations are two different things.</source>
          <target state="translated">&lt;a href=&quot;../configuration/optimization#optimizationsideeffects&quot;&gt; &lt;code&gt;sideEffects&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../configuration/optimization#optimizationusedexports&quot;&gt; &lt;code&gt;usedExports&lt;/code&gt; &lt;/a&gt;最適化（より多くの木揺れとして知られている）は、二つの異なるものです。</target>
        </trans-unit>
        <trans-unit id="984f0c2ce0cdc62b5cb0946806fd79297dc76335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../configuration/target&quot;&gt;targeted&lt;/a&gt; execution environment</source>
          <target state="translated">&lt;a href=&quot;../configuration/target&quot;&gt;目標と&lt;/a&gt;実行環境</target>
        </trans-unit>
        <trans-unit id="65096c8d5d07c0fb9a0318f78ab4250c620ce1b5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../loaders/script-loader&quot;&gt;&lt;code&gt;script-loader&lt;/code&gt;&lt;/a&gt; evaluates code in the global context, similar to inclusion via a &lt;code&gt;script&lt;/code&gt; tag. In this mode, every normal library should work. &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;, etc. are undefined.</source>
          <target state="translated">&lt;a href=&quot;../loaders/script-loader&quot;&gt; &lt;code&gt;script-loader&lt;/code&gt; &lt;/a&gt;介して含めると同様グローバルコンテキストでコードを評価する &lt;code&gt;script&lt;/code&gt; タグ。このモードでは、すべての通常のライブラリが機能するはずです。 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;module&lt;/code&gt; などは未定義です。</target>
        </trans-unit>
        <trans-unit id="73fd6aaf9d6e2fa659d002e4ff65bdd6d7bf958e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/commons-chunk-plugin&quot;&gt;&lt;code&gt;CommonsChunkPlugin&lt;/code&gt;&lt;/a&gt; is also used to split vendor modules from core application code using &lt;a href=&quot;../plugins/commons-chunk-plugin#explicit-vendor-chunk&quot;&gt;explicit vendor chunks&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../plugins/commons-chunk-plugin&quot;&gt; &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; は&lt;/a&gt;また、使用してコアアプリケーションコードから分割ベンダーモジュールに使用される&lt;a href=&quot;../plugins/commons-chunk-plugin#explicit-vendor-chunk&quot;&gt;明示的なベンダーチャンク&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1574a4cf4f0909c897124163660f02b2b549ff5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/provide-plugin&quot;&gt;&lt;code&gt;ProvidePlugin&lt;/code&gt;&lt;/a&gt; makes a package available as a variable in every module compiled through webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let's go ahead by removing the &lt;code&gt;import&lt;/code&gt; statement for &lt;code&gt;lodash&lt;/code&gt; and instead provide it via the plugin:</source>
          <target state="translated">&lt;a href=&quot;../plugins/provide-plugin&quot;&gt; &lt;code&gt;ProvidePlugin&lt;/code&gt; は&lt;/a&gt;WebPACKの通過コンパイルすべてのモジュール内の変数として利用可能なパッケージになります。webpackがその変数が使用されていることを確認すると、指定されたパッケージが最終バンドルに含まれます。 &lt;code&gt;lodash&lt;/code&gt; の &lt;code&gt;import&lt;/code&gt; ステートメントを削除し、代わりにプラグインを介して提供してみましょう。</target>
        </trans-unit>
        <trans-unit id="03d0dd7e91926471fe0f29a0fdc35aea2f423d79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/provide-plugin&quot;&gt;&lt;code&gt;ProvidePlugin&lt;/code&gt;&lt;/a&gt; makes a package available as a variable in every module compiled through webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let's go ahead by removing the &lt;code&gt;import&lt;/code&gt; statement for &lt;code&gt;lodash&lt;/code&gt; and instead providing it via the plugin:</source>
          <target state="translated">&lt;a href=&quot;../plugins/provide-plugin&quot;&gt; &lt;code&gt;ProvidePlugin&lt;/code&gt; は&lt;/a&gt; WebPACKの通過コンパイルすべてのモジュール内の変数として利用可能なパッケージになります。その変数が使用されていることがwebpackで確認された場合、指定されたパッケージが最終バンドルに含まれます。 &lt;code&gt;lodash&lt;/code&gt; の &lt;code&gt;import&lt;/code&gt; ステートメントを削除して、代わりにプラグインを介して提供してみましょう：</target>
        </trans-unit>
        <trans-unit id="1e2a49bbe348f32531395726882d0edadf5b7798" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; allows us to extract common dependencies into an existing entry chunk or an entirely new chunk. Let's use this to de-duplicate the &lt;code&gt;lodash&lt;/code&gt; dependency from the previous example:</source>
          <target state="translated">&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; は、&lt;/a&gt;私たちは既存のエントリチャンクまたは完全に新しいチャンクに共通の依存関係を抽出することができます。これを使用して、前の例から &lt;code&gt;lodash&lt;/code&gt; 依存関係を重複排除します。</target>
        </trans-unit>
        <trans-unit id="e4f51c8aedf5cc5b5b8c320556fbad38b349f499" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt;&lt;/a&gt; allows us to extract common dependencies into an existing entry chunk or an entirely new chunk. Let's use this to de-duplicate the &lt;code&gt;lodash&lt;/code&gt; dependency from the previous example:</source>
          <target state="translated">&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunksPlugin&lt;/code&gt; は、&lt;/a&gt;私たちは既存のエントリチャンクまたは完全に新しいチャンクに共通の依存関係を抽出することができます。これを使用して、前の例から &lt;code&gt;lodash&lt;/code&gt; 依存関係を重複排除してみましょう。</target>
        </trans-unit>
        <trans-unit id="0dea7e34dbdd9c4b5a070e1afdd0a51fda969ff2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;webpack CLI&lt;/a&gt; uses this information to display nicely formatted output in your console.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;WebPACKののCLIは、&lt;/a&gt;コンソールできれいにフォーマットされた出力を表示するには、この情報を使用しています。</target>
        </trans-unit>
        <trans-unit id="91e94616a5c40bcb0c5f9ea9235af3cbf7916a68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statements have been standardized in &lt;a href=&quot;https://babeljs.io/docs/en/learn/&quot;&gt;ES2015&lt;/a&gt;. They are supported in most of the browsers at this moment, however there are some browsers that don't recognize the new syntax. But don't worry, webpack does support them out of the box.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;ステートメントがで標準化されている&lt;a href=&quot;https://babeljs.io/docs/en/learn/&quot;&gt;ES2015&lt;/a&gt;。現時点ではほとんどのブラウザでサポートされていますが、新しい構文を認識しないブラウザもあります。しかし、心配しないでください。webpackは箱から出してそれらをサポートします。</target>
        </trans-unit>
        <trans-unit id="172e8069c798268e6ac5af79ba1c2895a1cbf705" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statements have been standardized in &lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;ES2015&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;are supported in most browsers&lt;/a&gt;. Some older browsers still lag behind but webpack supports modules out of the box.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;文はでは標準化されてい&lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;ES2015&lt;/a&gt;と&lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;、ほとんどのブラウザでサポートされています&lt;/a&gt;。一部の古いブラウザーはまだ遅れていますが、webpackはそのままの状態でモジュールをサポートしています。</target>
        </trans-unit>
        <trans-unit id="5b464e9919940e8342cebed4d751a8883d9f4d56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;digest&lt;/a&gt; that the hash function should use. Valid values include: base26, base32, base36, base49, base52, base58, base62, base64, and hex.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;ダイジェスト&lt;/a&gt;ハッシュ関数を使用する必要があります。有効な値は、base26、base32、base36、base49、base52、base58、base62、base64、およびhexです。</target>
        </trans-unit>
        <trans-unit id="2a0d507b74b1361bbb471f7da349d2e25a854d48" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt; simplifies creation of HTML files to serve your webpack bundles. This is especially useful for webpack bundles that include a hash in the filename which changes every compilation. You can either let the plugin generate an HTML file for you, supply your own template using &lt;a href=&quot;https://lodash.com/docs#template&quot;&gt;lodash templates&lt;/a&gt;, or use your own &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;loader&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; &lt;/a&gt; HTMLの簡素化作成はあなたのWebPACKのバンドルを提供するファイル。これは、すべてのコンパイルを変更するハッシュをファイル名に含むwebpackバンドルで特に役立ちます。プラグインでHTMLファイルを生成するか、&lt;a href=&quot;https://lodash.com/docs#template&quot;&gt;lodashテンプレート&lt;/a&gt;を使用して独自のテンプレートを提供するか、独自の&lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;ローダーを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="88bb274fd4fe206846ce7f3e91467f530bc06a11" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;&lt;code&gt;karma-webpack&lt;/code&gt;&lt;/a&gt; package allows you to use webpack to pre-process files in &lt;a href=&quot;http://karma-runner.github.io/1.0/index.html&quot;&gt;Karma&lt;/a&gt;. It also makes use of &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;&lt;code&gt;webpack-dev-middleware&lt;/code&gt;&lt;/a&gt; and allows passing configurations for both. A simple example may look something like this:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt; &lt;code&gt;karma-webpack&lt;/code&gt; &lt;/a&gt;パッケージには、内のファイルのプリプロセスのWebPACKを使用することができます&lt;a href=&quot;http://karma-runner.github.io/1.0/index.html&quot;&gt;カルマ&lt;/a&gt;。また、&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt; &lt;code&gt;webpack-dev-middleware&lt;/code&gt; &lt;/a&gt;を利用して、両方の構成を渡すことができます。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c6ad29628be4998f52cf5bad237156f5351eb7b8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;&lt;code&gt;karma-webpack&lt;/code&gt;&lt;/a&gt; package allows you to use webpack to pre-process files in &lt;a href=&quot;https://karma-runner.github.io/1.0/index.html&quot;&gt;Karma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45f9fcefcb9219d7f8d3d8e6eb4126356bae2e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;&lt;code&gt;karma-webpack&lt;/code&gt;&lt;/a&gt; package allows you to use webpack to pre-process files in &lt;a href=&quot;https://karma-runner.github.io/1.0/index.html&quot;&gt;Karma&lt;/a&gt;. It also makes use of &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;&lt;code&gt;webpack-dev-middleware&lt;/code&gt;&lt;/a&gt; and allows passing configurations for both. A simple example may look something like this:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt; &lt;code&gt;karma-webpack&lt;/code&gt; &lt;/a&gt;パッケージには、内のファイルのプリプロセスのWebPACKを使用することができます&lt;a href=&quot;https://karma-runner.github.io/1.0/index.html&quot;&gt;カルマ&lt;/a&gt;。また、&lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt; &lt;code&gt;webpack-dev-middleware&lt;/code&gt; &lt;/a&gt;を利用し、両方の構成を渡すことができます。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1ca847605a463d73a62672d6de824616533f7c10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt;&lt;code&gt;mocha-webpack&lt;/code&gt;&lt;/a&gt; utility can be used for a clean integration with Mocha. The repository offers more details on the pros and cons but essentially &lt;code&gt;mocha-webpack&lt;/code&gt; is a simple wrapper that provides almost the same CLI as Mocha itself and provides various webpack functionality like an improved watch mode and improved path resolution. Here is a small example of how you would install it and use it to run a test suite (found within &lt;code&gt;./test&lt;/code&gt;):</source>
          <target state="translated">&lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt; &lt;code&gt;mocha-webpack&lt;/code&gt; &lt;/a&gt;ユーティリティは、モカできれいに統合するために使用することができます。リポジトリは賛否両論の詳細を提供しますが、本質的に &lt;code&gt;mocha-webpack&lt;/code&gt; は、Mocha自体とほぼ同じCLIを提供し、改善された監視モードや改善されたパス解決などのさまざまなwebpack機能を提供するシンプルなラッパーです。これをインストールし、それを使用してテストスイートを実行する方法の小さな例を次に示します（ &lt;code&gt;./test&lt;/code&gt; 内にあります）：</target>
        </trans-unit>
        <trans-unit id="0c507e93dd92050022154621cc61d736d4327733" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://nodejs.org/api/all.html#modules_require_resolve&quot;&gt;&lt;code&gt;require.resolve&lt;/code&gt;&lt;/a&gt; call is a Node.js function (unrelated to &lt;code&gt;require.resolve&lt;/code&gt; in webpack processing). &lt;code&gt;require.resolve&lt;/code&gt; gives you the absolute path to the module (&lt;code&gt;&quot;/.../app/node_modules/react/react.js&quot;&lt;/code&gt;). So the expose only applies to the react module. And it's only exposed when used in the bundle.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/all.html#modules_require_resolve&quot;&gt; &lt;code&gt;require.resolve&lt;/code&gt; の&lt;/a&gt;呼び出しは（とは無関係のNode.js関数である &lt;code&gt;require.resolve&lt;/code&gt; WebPACKの処理で）。 &lt;code&gt;require.resolve&lt;/code&gt; はモジュールへの絶対パスを提供します（ &lt;code&gt;&quot;/.../app/node_modules/react/react.js&quot;&lt;/code&gt; ）。したがって、公開はreactモジュールにのみ適用されます。また、バンドルで使用した場合にのみ公開されます。</target>
        </trans-unit>
        <trans-unit id="d7527bc60cb7caebcb29e8c3c0c9c6c3ceae93a5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://nodejs.org/api/modules.html#modules_require_resolve_request_options&quot;&gt;&lt;code&gt;require.resolve&lt;/code&gt;&lt;/a&gt; call is a Node.js function (unrelated to &lt;code&gt;require.resolve&lt;/code&gt; in webpack processing). &lt;code&gt;require.resolve&lt;/code&gt; gives you the absolute path to the module (&lt;code&gt;&quot;/.../app/node_modules/jquery/dist/jquery.js&quot;&lt;/code&gt;). So the expose only applies to the &lt;code&gt;jquery&lt;/code&gt; module. And it's only exposed when used in the bundle.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_require_resolve_request_options&quot;&gt; &lt;code&gt;require.resolve&lt;/code&gt; の&lt;/a&gt;呼び出しは（とは無関係のNode.js関数である &lt;code&gt;require.resolve&lt;/code&gt; WebPACKの処理で）。 &lt;code&gt;require.resolve&lt;/code&gt; は、モジュールへの絶対パスを提供します（ &lt;code&gt;&quot;/.../app/node_modules/jquery/dist/jquery.js&quot;&lt;/code&gt; ）。したがって、公開は &lt;code&gt;jquery&lt;/code&gt; モジュールにのみ適用されます。また、バンドルで使用された場合にのみ公開されます。</target>
        </trans-unit>
        <trans-unit id="f2bbd217d1f4c8709483289baec1094e4af77573" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://whatwg.github.io/loader/&quot;&gt;ES2015 Loader spec&lt;/a&gt; defines &lt;code&gt;import()&lt;/code&gt; as method to load ES2015 modules dynamically on runtime.</source>
          <target state="translated">&lt;a href=&quot;https://whatwg.github.io/loader/&quot;&gt;ES2015ローダ仕様&lt;/a&gt;定義は &lt;code&gt;import()&lt;/code&gt; 実行時に動的にES2015モジュールをロードするための方法として。</target>
        </trans-unit>
        <trans-unit id="bb315f44e4a902716f2a7db4393abe189c7c96a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'amd-require'&lt;/code&gt; target allows for the use of AMD dependencies without needing a separate later invocation. As with the &lt;code&gt;'amd'&lt;/code&gt; target, this depends on the appropriate &lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/require.md&quot;&gt;&lt;code&gt;require&lt;/code&gt; function&lt;/a&gt; being available in the environment in which the webpack output is loaded.</source>
          <target state="translated">&lt;code&gt;'amd-require'&lt;/code&gt; ターゲットは別々の後に呼び出しを必要とすることなく、AMDの依存関係を使用することができます。 &lt;code&gt;'amd'&lt;/code&gt; ターゲットと同様に、これはwebpack出力がロードされる環境で使用可能な適切な&lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/require.md&quot;&gt; &lt;code&gt;require&lt;/code&gt; 関数&lt;/a&gt;に依存します。</target>
        </trans-unit>
        <trans-unit id="1d4ceea676a0dc4f72c17f6c8e79b7333f549174" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'commonjs ' + request&lt;/code&gt; defines the type of module that needs to be externalized.</source>
          <target state="translated">&lt;code&gt;'commonjs ' + request&lt;/code&gt; ニーズが外部化することモジュールのタイプを定義します。</target>
        </trans-unit>
        <trans-unit id="fa05ba686183a6426ffb912d7b938976da334d09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'flag'&lt;/code&gt; value is used by default in non-production builds.</source>
          <target state="translated">&lt;code&gt;'flag'&lt;/code&gt; 非生産ビルドで値がデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="b5e769b064abeac8f2d9f1df53a82faa93d01e23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--env&lt;/code&gt; argument accepts multiple values:</source>
          <target state="translated">&lt;code&gt;--env&lt;/code&gt; 引数には、複数の値を受け付けます。</target>
        </trans-unit>
        <trans-unit id="8e28c37fb671c088eac2ae6cc1422587c9c06286" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--env&lt;/code&gt; argument accepts various syntaxes:</source>
          <target state="translated">&lt;code&gt;--env&lt;/code&gt; 引数には、様々な構文を受け付けます。</target>
        </trans-unit>
        <trans-unit id="468a640ae6f8d45f738ff5d3259257ff8609ccf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--json &amp;gt; compilation-stats.json&lt;/code&gt; flag indicates to webpack that it should emit the &lt;code&gt;compilation-stats.json&lt;/code&gt; containing the dependency graph and various other build information. Typically, the &lt;code&gt;--profile&lt;/code&gt; flag is also added so that a &lt;code&gt;profile&lt;/code&gt; section is added to each &lt;a href=&quot;#module-objects&quot;&gt;&lt;code&gt;modules&lt;/code&gt; object&lt;/a&gt; containing module-specific compilation stats.</source>
          <target state="translated">&lt;code&gt;--json &amp;gt; compilation-stats.json&lt;/code&gt; フラグは、それが放出する必要があることをWebPACKのために示して &lt;code&gt;compilation-stats.json&lt;/code&gt; 依存グラフおよび様々な他のビルド情報を含有します。通常、-- &lt;code&gt;--profile&lt;/code&gt; フラグも追加されるため、モジュール固有のコンパイル統計を含む各&lt;a href=&quot;#module-objects&quot;&gt; &lt;code&gt;modules&lt;/code&gt; &lt;/a&gt;オブジェクトに &lt;code&gt;profile&lt;/code&gt; セクションが追加されます。</target>
        </trans-unit>
        <trans-unit id="865432c765a6f79e795f46fd58a3087371efa4ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--json=compilation-stats.json&lt;/code&gt; flag indicates to webpack that it should emit the &lt;code&gt;compilation-stats.json&lt;/code&gt; containing the dependency graph and various other build information. Typically, the &lt;code&gt;--profile&lt;/code&gt; flag is also added so that a &lt;code&gt;profile&lt;/code&gt; section is added to each &lt;a href=&quot;#module-objects&quot;&gt;&lt;code&gt;modules&lt;/code&gt; object&lt;/a&gt; containing module-specific compilation stats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c70e73b803827a95816e2c064e16a024ac534a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--profile&lt;/code&gt; option captures timing information for each step of the compilation and includes this in the output.</source>
          <target state="translated">&lt;code&gt;--profile&lt;/code&gt; オプションキャプチャは、コンパイルの各ステップのタイミング情報を出力して、これを含んでいます。</target>
        </trans-unit>
        <trans-unit id="0c35b3fcaf6ac18ef5f8234261238cae474e94ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AutomaticPrefetchPlugin&lt;/code&gt; discovers &lt;strong&gt;all modules&lt;/strong&gt; from the previous compilation upfront while watching for changes, trying to improve the incremental build times. Compared to &lt;a href=&quot;prefetch-plugin&quot;&gt;&lt;code&gt;PrefetchPlugin&lt;/code&gt;&lt;/a&gt; which discovers a &lt;strong&gt;single module&lt;/strong&gt; upfront.</source>
          <target state="translated">&lt;code&gt;AutomaticPrefetchPlugin&lt;/code&gt; が発見し&lt;strong&gt;、すべてのモジュールを&lt;/strong&gt;変更するために見ながら、インクリメンタルビルド時間を改善しようと、以前のコンパイルの前払いから。&lt;a href=&quot;prefetch-plugin&quot;&gt; &lt;code&gt;PrefetchPlugin&lt;/code&gt; &lt;/a&gt;に&lt;strong&gt;単一のモジュール&lt;/strong&gt;を検出するPrefetchPluginと比較し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="01c891b15ca8f85929028eb5d51f636779e61b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; is an opt-in feature that creates a separate file (known as a chunk), consisting of common modules shared between multiple entry points.</source>
          <target state="translated">&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; はオプトイン機能複数のエントリポイントとの間で共有される共通のモジュールからなる、（チャンクとして知られている）別のファイルが作成されています。</target>
        </trans-unit>
        <trans-unit id="c70b8ad61375954fcc9153bfd2c445225bd7e75e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compilation&lt;/code&gt; class also extends &lt;code&gt;Tapable&lt;/code&gt; and provides the following lifecycle hooks. They can be tapped the same way as compiler hooks:</source>
          <target state="translated">&lt;code&gt;Compilation&lt;/code&gt; クラスも拡張し &lt;code&gt;Tapable&lt;/code&gt; を、以下のライフサイクルフックを提供します。それらはコンパイラフックと同じ方法でタップできます：</target>
        </trans-unit>
        <trans-unit id="73fa0a0250e3aa593b96eb19e97b237fe917e574" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compilation&lt;/code&gt; module is used by the &lt;code&gt;Compiler&lt;/code&gt; to create new compilations (or builds). A &lt;code&gt;compilation&lt;/code&gt; instance has access to all modules and their dependencies (most of which are circular references). It is the literal compilation of all the modules in the dependency graph of an application. During the compilation phase, modules are loaded, sealed, optimized, chunked, hashed and restored.</source>
          <target state="translated">&lt;code&gt;Compilation&lt;/code&gt; モジュールがで使用される &lt;code&gt;Compiler&lt;/code&gt; 新しいコンピレーションを作成する（またはビルド）。 &lt;code&gt;compilation&lt;/code&gt; インスタンスは、すべてのモジュールとその依存関係（そのほとんどが循環参照している）へのアクセス権を持っています。これは、アプリケーションの依存関係グラフのすべてのモジュールを文字どおりコンパイルしたものです。コンパイル段階では、モジュールがロードされ、シールされ、最適化され、チャンク化され、ハッシュされ、復元されます。</target>
        </trans-unit>
        <trans-unit id="9dd316958031d96ce135ceaf6610378edf9a60ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; module is the main engine that creates a compilation instance with all the options passed through the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; or &lt;a href=&quot;node&quot;&gt;Node API&lt;/a&gt;. It extends the &lt;code&gt;Tapable&lt;/code&gt; class in order to register and call plugins. Most user facing plugins are first registered on the &lt;code&gt;Compiler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; モジュールは、通過したすべてのオプションでコンパイルインスタンスを作成し、メインエンジンである&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;または&lt;a href=&quot;node&quot;&gt;ノードAPI&lt;/a&gt;。プラグインを登録して呼び出すために &lt;code&gt;Tapable&lt;/code&gt; クラスを拡張します。ほとんどのユーザー向けプラグインは、最初に &lt;code&gt;Compiler&lt;/code&gt; 登録されます。</target>
        </trans-unit>
        <trans-unit id="5c434c0055358215a66a00b62876f8493d91a621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; supports &lt;a href=&quot;node#watching&quot;&gt;watching&lt;/a&gt; which monitors the file system and recompiles as files change. When in watch mode, the compiler will emit the additional events such as &lt;code&gt;watchRun&lt;/code&gt;, &lt;code&gt;watchClose&lt;/code&gt;, and &lt;code&gt;invalid&lt;/code&gt;. This is typically used in &lt;a href=&quot;../guides/development&quot;&gt;development&lt;/a&gt;, usually under the hood of tools like &lt;code&gt;webpack-dev-server&lt;/code&gt;, so that the developer doesn't need to re-compile manually every time. Watch mode can also be entered via the &lt;a href=&quot;cli#watch-options&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; サポートして&lt;a href=&quot;node#watching&quot;&gt;見てい&lt;/a&gt;たファイルの変更などのファイルシステムと再コンパイルを監視します。監視モードの場合、コンパイラーは &lt;code&gt;watchRun&lt;/code&gt; 、 &lt;code&gt;watchClose&lt;/code&gt; 、および &lt;code&gt;invalid&lt;/code&gt; などの追加のイベントを発行します。これは通常、&lt;a href=&quot;../guides/development&quot;&gt;開発で&lt;/a&gt;、通常は &lt;code&gt;webpack-dev-server&lt;/code&gt; などのツールの内部で使用されるため、開発者は毎回手動で再コンパイルする必要はありません。監視モードは、&lt;a href=&quot;cli#watch-options&quot;&gt;CLI&lt;/a&gt;からも入力できます。</target>
        </trans-unit>
        <trans-unit id="396d6017d122a6fcfc5c00162a856325ffa3e8cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContextExclusionPlugin&lt;/code&gt; allows you to exclude context. Provide RegExp as an argument when initializing the Plugin to exclude all context that matches it.</source>
          <target state="translated">&lt;code&gt;ContextExclusionPlugin&lt;/code&gt; はあなたがコンテキストを除外することができます。プラグインを初期化するときに引数としてRegExpを指定して、それに一致するすべてのコンテキストを除外します。</target>
        </trans-unit>
        <trans-unit id="2393fd3d3676a5020dbaf1f2d3cb3bcf828be80d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContextModuleFactory&lt;/code&gt; class extends &lt;code&gt;Tapable&lt;/code&gt; and provides the following lifecycle hooks. They can be tapped the same way as compiler hooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b724ddac974cfedde2c4e26ed86d33b69cb4e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContextModuleFactory&lt;/code&gt; module is used by the &lt;code&gt;Compiler&lt;/code&gt; to generate dependencies from webpack specific &lt;a href=&quot;module-methods#requirecontext&quot;&gt;require.context&lt;/a&gt; API. It resolves the requested directory, generates requests for each file and filters against passed regExp. Matching dependencies then passes through &lt;a href=&quot;normalmodulefactory-hooks&quot;&gt;NormalModuleFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de4640dc1cf3d5a03b561edc521bf2fe418e2a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContextReplacementPlugin&lt;/code&gt; allows you to override the inferred information. There are various ways to configure the plugin:</source>
          <target state="translated">&lt;code&gt;ContextReplacementPlugin&lt;/code&gt; はあなたが推測された情報を上書きすることができます。プラグインを構成するには、さまざまな方法があります。</target>
        </trans-unit>
        <trans-unit id="08d365ec3e08538604c8ecb39ddb51ca3f47cae3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefinePlugin&lt;/code&gt; allows you to create global constants which can be configured at &lt;strong&gt;compile&lt;/strong&gt; time. This can be useful for allowing different behavior between development builds and production builds. If you perform logging in your development build but not in the production build you might use a global constant to determine whether logging takes place. That's where &lt;code&gt;DefinePlugin&lt;/code&gt; shines, set it and forget it rules for development and production builds.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; はあなたがで設定することができるグローバル定数を作成することができ&lt;strong&gt;、コンパイル&lt;/strong&gt;時間を。これは、開発ビルドと本番ビルドの間で異なる動作を許可する場合に役立ちます。開発ビルドではロギングを実行するが本番ビルドでは実行しない場合は、グローバル定数を使用してロギングを実行するかどうかを決定できます。そこで、 &lt;code&gt;DefinePlugin&lt;/code&gt; が優れており、設定して、開発および本番ビルドのルールを忘れています。</target>
        </trans-unit>
        <trans-unit id="e2b3dbb477bb74d901776059eefe25b97e65b6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefinePlugin&lt;/code&gt; allows you to create global constants which can be configured at &lt;strong&gt;compile&lt;/strong&gt; time. This can be useful for allowing different behavior between development builds and release builds. If you perform logging in your development build but not in the release build you might use a global constant to determine whether logging takes place. That's where &lt;code&gt;DefinePlugin&lt;/code&gt; shines, set it and forget it rules for development and release builds.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; はあなたがで設定することができるグローバル定数を作成することができ&lt;strong&gt;、コンパイル&lt;/strong&gt;時間を。これは、開発ビルドとリリースビルドの間で異なる動作を許可するのに役立ちます。開発ビルドでロギングを実行し、リリースビルドでは実行しない場合は、グローバル定数を使用して、ロギングを実行するかどうかを決定できます。ここで、 &lt;code&gt;DefinePlugin&lt;/code&gt; が輝き、設定し、開発およびリリースビルドのルールを忘れます。</target>
        </trans-unit>
        <trans-unit id="367e8377d371646e4dc3d8685d9a61a01cf7f9d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DllPlugin&lt;/code&gt; and &lt;code&gt;DllReferencePlugin&lt;/code&gt; provide means to split bundles in a way that can drastically improve build time performance.</source>
          <target state="translated">&lt;code&gt;DllPlugin&lt;/code&gt; と &lt;code&gt;DllReferencePlugin&lt;/code&gt; は大幅にビルド時のパフォーマンスを向上させることができる方法でバンドルを分割するための手段を提供します。</target>
        </trans-unit>
        <trans-unit id="dd240c6cada2313f7d6753b7f4bbbd23157de1f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DllPlugin&lt;/code&gt; and &lt;code&gt;DllReferencePlugin&lt;/code&gt; provide means to split bundles in a way that can drastically improve build time performance. The term &quot;DLL&quot; stands for Dynamic-link library which was originally introduced by Microsoft.</source>
          <target state="translated">&lt;code&gt;DllPlugin&lt;/code&gt; と &lt;code&gt;DllReferencePlugin&lt;/code&gt; は大幅にビルド時のパフォーマンスを向上させることができる方法でバンドルを分割するための手段を提供します。「DLL」という用語は、元々Microsoftによって導入されたダイナミックリンクライブラリの略です。</target>
        </trans-unit>
        <trans-unit id="557f7aaf93c67ec25d77447cf5baa46aa5b3d28f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EnvironmentPlugin&lt;/code&gt; accepts either an array of keys or an object mapping its keys to their default values.</source>
          <target state="translated">&lt;code&gt;EnvironmentPlugin&lt;/code&gt; は、キーの配列またはそれらのデフォルト値に、そのキーをマッピングするオブジェクトのいずれかを受け付けます。</target>
        </trans-unit>
        <trans-unit id="529504bcf17aec34f1796b4d3aac75440813d169" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EnvironmentPlugin&lt;/code&gt; is shorthand for using the &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt; keys.</source>
          <target state="translated">&lt;code&gt;EnvironmentPlugin&lt;/code&gt; は、使用するための省略形です&lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; を&lt;/a&gt;上&lt;a href=&quot;https://nodejs.org/api/process.html#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; の&lt;/a&gt;キー。</target>
        </trans-unit>
        <trans-unit id="c7dbd12a03472b0bafe433439b4a86e42ba3b280" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; is unlike other plugins in that it is built for migration from webpack 1 to 2. In webpack 2, the schema for a &lt;code&gt;webpack.config.js&lt;/code&gt; became stricter; no longer open for extension by other loaders and plugins. The intention is that you pass &lt;code&gt;options&lt;/code&gt; directly to loaders and plugins (i.e. &lt;code&gt;options&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; global or shared).</source>
          <target state="translated">&lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; は、それがWebPACKの2でWebPACKの1から2への移行のために構築されているという点でのスキーマ、他のプラグインとは異なっている &lt;code&gt;webpack.config.js&lt;/code&gt; が厳しくなりました。他のローダーやプラグインによる拡張のために開かなくなりました。意図は、ローダーとプラグインに直接 &lt;code&gt;options&lt;/code&gt; を渡すことです（つまり、 &lt;code&gt;options&lt;/code&gt; はグローバルでも共有でもあり&lt;strong&gt;ません&lt;/strong&gt;）。</target>
        </trans-unit>
        <trans-unit id="dcf9d138a1015dff10cd93930ad6483f1758e98a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiCompiler&lt;/code&gt; module allows webpack to run multiple configurations in separate compilers. If the &lt;code&gt;options&lt;/code&gt; parameter in the webpack's NodeJS api is an array of options, webpack applies separate compilers and calls the &lt;code&gt;callback&lt;/code&gt; after all compilers have been executed.</source>
          <target state="translated">&lt;code&gt;MultiCompiler&lt;/code&gt; のモジュールは、別のコンパイラで複数のコンフィギュレーションを実行するためにWebPACKのことができます。webpackのNodeJSapiの &lt;code&gt;options&lt;/code&gt; パラメーターがオプションの配列である場合、webpackは個別のコンパイラーを適用し、すべてのコンパイラーが実行された後に &lt;code&gt;callback&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="758b1aa7bc2934fb9f463d6b2fe62ac3f7f812ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiCompiler&lt;/code&gt; module allows webpack to run multiple configurations in separate compilers. If the &lt;code&gt;options&lt;/code&gt; parameter in the webpack's NodeJS api is an array of options, webpack applies separate compilers and calls the &lt;code&gt;callback&lt;/code&gt; method at the end of each compiler execution.</source>
          <target state="translated">&lt;code&gt;MultiCompiler&lt;/code&gt; のモジュールは、別のコンパイラで複数のコンフィギュレーションを実行するためにWebPACKのことができます。場合は &lt;code&gt;options&lt;/code&gt; のWebPACKのNodeJS APIのパラメータは、オプションの配列で、WebPACKのは、別のコンパイラを適用し、呼び出す &lt;code&gt;callback&lt;/code&gt; 各コンパイラの実行の終わりに方法を。</target>
        </trans-unit>
        <trans-unit id="fd6ac73907fb52536495374f47b5111710430240" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; allows you to avoid emitting assets when there are any errors. Enabled by default, you can disable using &lt;a href=&quot;../configuration/optimization#optimizationemitonerrors&quot;&gt;&lt;code&gt;optimization.emitOnErrors&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; は、エラーがあるときに、資産を発光避けることができます。デフォルトで有効になっていますが、&lt;a href=&quot;../configuration/optimization#optimizationemitonerrors&quot;&gt; &lt;code&gt;optimization.emitOnErrors&lt;/code&gt; &lt;/a&gt;を使用して無効にできます</target>
        </trans-unit>
        <trans-unit id="5a62d836b0d46b27fd182682bfd7c9e68fe97d9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NormalModuleFactory&lt;/code&gt; class extends &lt;code&gt;Tapable&lt;/code&gt; and provides the following lifecycle hooks. They can be tapped the same way as compiler hooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde15bb580df958413f99b9ed94472800a7af2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NormalModuleFactory&lt;/code&gt; module is used by the &lt;code&gt;Compiler&lt;/code&gt; to generate modules. Starting with entry points, it resolves each request, parses the content to find further requests, and keeps crawling through files by resolving all and parsing any new files. At last stage, each dependency becomes a Module instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0384e3cf0c84ae1fe040c1a2858cc9d50c384db2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NormalModuleReplacementPlugin&lt;/code&gt; allows you to replace resources that match &lt;code&gt;resourceRegExp&lt;/code&gt; with &lt;code&gt;newResource&lt;/code&gt;. If &lt;code&gt;newResource&lt;/code&gt; is relative, it is resolved relative to the previous resource. If &lt;code&gt;newResource&lt;/code&gt; is a function, it is expected to overwrite the request attribute of the supplied resource.</source>
          <target state="translated">&lt;code&gt;NormalModuleReplacementPlugin&lt;/code&gt; はあなたが一致するリソース置き換えることができます &lt;code&gt;resourceRegExp&lt;/code&gt; をして &lt;code&gt;newResource&lt;/code&gt; を。 &lt;code&gt;newResource&lt;/code&gt; が相対の場合、前のリソースを基準に解決されます。 &lt;code&gt;newResource&lt;/code&gt; が関数の場合、指定されたリソースのリクエスト属性を上書きすることが期待されています。</target>
        </trans-unit>
        <trans-unit id="3a01a724f4b4fe2eb1b73c6069cc5b266d28be30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProgressPlugin&lt;/code&gt; is used to customize how progress should be reported during compilation, and &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; will generate a HTML file including the &lt;code&gt;my-first-webpack.bundle.js&lt;/code&gt; file using a &lt;code&gt;script&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c257bbfd888d661365b431974e37048421af8a34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProgressPlugin&lt;/code&gt; provides a way to customize how progress is reported during a compilation.</source>
          <target state="translated">&lt;code&gt;ProgressPlugin&lt;/code&gt; は進歩がコンパイル時に報告される方法をカスタマイズする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="cfecad6270f6a1aa650ea7fda9edf400757676f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[local]&lt;/code&gt; placeholder contains original class.</source>
          <target state="translated">&lt;code&gt;[local]&lt;/code&gt; プレースホルダは、元のクラスを含んでいます。</target>
        </trans-unit>
        <trans-unit id="6b2ecd01f48f6fff5910d403614801c3be1e5823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[name]&lt;/code&gt;, &lt;code&gt;[id]&lt;/code&gt;, &lt;code&gt;[fullhash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; substitutions from &lt;a href=&quot;#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; can be used. In addition to those, you can use substitutions listed under Filename-level in &lt;a href=&quot;output#template-strings&quot;&gt;Template strings&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[chunkhash]&lt;/code&gt; からの &lt;code&gt;[name]&lt;/code&gt; 、 &lt;code&gt;[id]&lt;/code&gt; 、 &lt;code&gt;[fullhash]&lt;/code&gt; 、および[chunkhash]の置換を&lt;a href=&quot;#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt;できます。これらに加えて、&lt;a href=&quot;output#template-strings&quot;&gt;テンプレート文字列の&lt;/a&gt;ファイル名レベルの下にリストされている置換を使用できます。</target>
        </trans-unit>
        <trans-unit id="d095d6c691b6167c5bd5fda19eccfdfd9ef79f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[name]&lt;/code&gt;, &lt;code&gt;[id]&lt;/code&gt;, &lt;code&gt;[hash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; substitutions from &lt;a href=&quot;#output-filename&quot;&gt;#output-filename&lt;/a&gt; can be used. In addition to those, you can use substitutions listed below. The &lt;code&gt;[file]&lt;/code&gt; placeholder is replaced with the filename of the original file. We recommend &lt;strong&gt;only using the &lt;code&gt;[file]&lt;/code&gt; placeholder&lt;/strong&gt;, as the other placeholders won't work when generating SourceMaps for non-chunk files.</source>
          <target state="translated">&lt;a href=&quot;#output-filename&quot;&gt;＃output-filename&lt;/a&gt;の &lt;code&gt;[name]&lt;/code&gt; 、 &lt;code&gt;[id]&lt;/code&gt; 、 &lt;code&gt;[hash]&lt;/code&gt; 、および &lt;code&gt;[chunkhash]&lt;/code&gt; の置換を使用できます。これらに加えて、以下に示す置換を使用できます。 &lt;code&gt;[file]&lt;/code&gt; プレースホルダは、元のファイルのファイル名に置き換えられます。&lt;strong&gt; &lt;code&gt;[file]&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;プレースホルダー&lt;/strong&gt;&lt;strong&gt;のみを使用すること&lt;/strong&gt;をお勧めします。これは、チャンク以外のファイルのSourceMapsを生成するときに他のプレースホルダーが機能しないためです。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="490e96ae3fa8594ef4f5a155082862a7c5512e4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; chunk will not contain the modules that &lt;code&gt;react-vendors&lt;/code&gt; has.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; チャンクは、モジュールは含まれません &lt;code&gt;react-vendors&lt;/code&gt; ましたが。</target>
        </trans-unit>
        <trans-unit id="d5e58eefd13d2e79cd01743b2a2668988072f0e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply&lt;/code&gt; method flags all updated modules as invalid. For each invalid module, there needs to be an update handler in the module or in its parent(s). Otherwise, the invalid flag bubbles up and invalidates parent(s) as well. Each bubble continues until the app's entry point or a module with an update handler is reached (whichever comes first). If it bubbles up from an entry point, the process fails.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 方法フラグが全て無効とモジュールを更新しました。無効なモジュールごとに、モジュールまたはその親に更新ハンドラーが必要です。それ以外の場合、無効フラグはバブルアップし、親も無効化します。各バブルは、アプリのエントリポイントまたは更新ハンドラーを備えたモジュールに到達する（どちらか先に到達した方）まで続きます。エントリポイントからバブルアップすると、プロセスは失敗します。</target>
        </trans-unit>
        <trans-unit id="197ed7042dd4c4fae277edc431967fab263cb1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoApply&lt;/code&gt; parameter can either be a boolean or &lt;code&gt;options&lt;/code&gt; to pass to the &lt;code&gt;apply&lt;/code&gt; method when called.</source>
          <target state="translated">&lt;code&gt;autoApply&lt;/code&gt; のパラメータは、いずれかのブール値または可能 &lt;code&gt;options&lt;/code&gt; に渡す &lt;code&gt;apply&lt;/code&gt; 呼び出されたときの方法。</target>
        </trans-unit>
        <trans-unit id="4faaa4e5b1a7548b490fc1441ee50109812afec6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;babel-preset-env&lt;/code&gt; package uses &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslist&lt;/a&gt; to transpile only what is not supported in your browsers matrix. This preset comes with the &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env#usebuiltins&quot;&gt;&lt;code&gt;useBuiltIns&lt;/code&gt;&lt;/a&gt; option, &lt;code&gt;false&lt;/code&gt; by default, which converts your global &lt;code&gt;babel-polyfill&lt;/code&gt; import to a more granular feature by feature &lt;code&gt;import&lt;/code&gt; pattern:</source>
          <target state="translated">&lt;code&gt;babel-preset-env&lt;/code&gt; パッケージには、使用しています&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslistを&lt;/a&gt;お使いのブラウザのマトリックスではサポートされていないものだけをtranspileします。このプリセットには、&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env#usebuiltins&quot;&gt; &lt;code&gt;useBuiltIns&lt;/code&gt; &lt;/a&gt;オプションが付属しています。デフォルトでは &lt;code&gt;false&lt;/code&gt; で、グローバルな &lt;code&gt;babel-polyfill&lt;/code&gt; インポートを機能 &lt;code&gt;import&lt;/code&gt; パターンによってより詳細な機能に変換します。</target>
        </trans-unit>
        <trans-unit id="c2873faf34087491ab56ed7bbc7b9c4e199b8217" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;babel-preset-env&lt;/code&gt; package uses &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslist&lt;/a&gt; to transpile only what is not supported in your browsers matrix. This preset comes with the &lt;code&gt;useBuiltIns&lt;/code&gt; option, &lt;code&gt;false&lt;/code&gt; by default, which converts your global &lt;code&gt;babel-polyfill&lt;/code&gt; import to a more granular feature by feature &lt;code&gt;import&lt;/code&gt; pattern:</source>
          <target state="translated">&lt;code&gt;babel-preset-env&lt;/code&gt; パッケージには、使用しています&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslistを&lt;/a&gt;お使いのブラウザのマトリックスではサポートされていないものだけをtranspileします。このプリセットには、 &lt;code&gt;useBuiltIns&lt;/code&gt; オプションが含まれており、デフォルトでは &lt;code&gt;false&lt;/code&gt; です。これにより、グローバルな &lt;code&gt;babel-polyfill&lt;/code&gt; インポートが、機能 &lt;code&gt;import&lt;/code&gt; パターンによってより細かい機能に変換されます。</target>
        </trans-unit>
        <trans-unit id="9066d7b725436f54b33250467e5607dcfa020a4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cache-loader&lt;/code&gt; allow to Caches the result of following loaders on disk (default) or in the database.</source>
          <target state="translated">&lt;code&gt;cache-loader&lt;/code&gt; キャッシュにディスク（デフォルト）上またはデータベース内の次ローダーの結果を許します。</target>
        </trans-unit>
        <trans-unit id="c4da3eca5eb52599c9056b6c35669178255dbde7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cheap-source-map&lt;/code&gt; variants are more performant if you can live with the slightly worse mapping quality.</source>
          <target state="translated">&lt;code&gt;cheap-source-map&lt;/code&gt; 変異体は、あなたが少し悪化したマッピングの品質と一緒に暮らすことができる場合よりパフォーマンスです。</target>
        </trans-unit>
        <trans-unit id="5df287b045d05393a528ac0d2dc007acad13c3be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cheap-source-map&lt;/code&gt; variants are more performant, if you can live with the slightly worse mapping quality.</source>
          <target state="translated">&lt;code&gt;cheap-source-map&lt;/code&gt; あなたが少し悪化したマッピングの品質と一緒に暮らすことができるかどうかの変異体は、よりパフォーマンスです。</target>
        </trans-unit>
        <trans-unit id="b156180554ea770e4ec3a2a43529512fc6e19c5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunks&lt;/code&gt; object will also contain a list of &lt;code&gt;origins&lt;/code&gt; describing how the given chunk originated. Each &lt;code&gt;origins&lt;/code&gt; object follows the following schema:</source>
          <target state="translated">&lt;code&gt;chunks&lt;/code&gt; オブジェクトものリストが含まれます &lt;code&gt;origins&lt;/code&gt; 与えられたチャンクが発祥方法を説明します。各 &lt;code&gt;origins&lt;/code&gt; オブジェクトは次のスキーマに従います。</target>
        </trans-unit>
        <trans-unit id="afacb4f04d587c3593459833ab6755d16d95e20c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compilationParams&lt;/code&gt; variable is initialized as follows:</source>
          <target state="translated">&lt;code&gt;compilationParams&lt;/code&gt; 次のように変数が初期化されます。</target>
        </trans-unit>
        <trans-unit id="fd1284f55766687bad81fba54f0b368882a9eefe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; behaves differently depending on what the &lt;code&gt;from&lt;/code&gt; is (&lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt;). More &lt;a href=&quot;#examples&quot;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; は異なるものに応じて振る舞う &lt;code&gt;from&lt;/code&gt; IS（ &lt;code&gt;glob&lt;/code&gt; 、 &lt;code&gt;file&lt;/code&gt; または &lt;code&gt;dir&lt;/code&gt; ）。その他の&lt;a href=&quot;#examples&quot;&gt; &lt;code&gt;examples&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="27e47c71981628e7c25bcd8448dad939c5bc4012" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; option can be an absolute or relative path. If &lt;code&gt;context&lt;/code&gt; is a relative, then it is converted to absolute based to &lt;code&gt;compiler.options.context&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; オプションは、絶対または相対パスとすることができます。 &lt;code&gt;context&lt;/code&gt; が相対の場合、 &lt;code&gt;compiler.options.context&lt;/code&gt; に基づいて絶対に変換されます</target>
        </trans-unit>
        <trans-unit id="d04ec951d561035013ce10196eb45f6875a4a4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; argument represents how many chunks the &lt;code&gt;module&lt;/code&gt; is used in.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 引数は、 &lt;code&gt;module&lt;/code&gt; が使用されているチャンクの数を表します。</target>
        </trans-unit>
        <trans-unit id="ecb4a6fa013e770c5aea51a42d6cc36866052e23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;css-loader&lt;/code&gt; interprets &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;url()&lt;/code&gt; like &lt;code&gt;import/require()&lt;/code&gt; and will resolve them.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; 解釈は &lt;code&gt;@import&lt;/code&gt; と &lt;code&gt;url()&lt;/code&gt; のような &lt;code&gt;import/require()&lt;/code&gt; し、それらを解決します。</target>
        </trans-unit>
        <trans-unit id="9e59e1aaf4f1e81f5b28039b148fcc1a71b85705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;err&lt;/code&gt; object &lt;strong&gt;will not&lt;/strong&gt; include compilation errors and those must be handled separately using &lt;code&gt;stats.hasErrors()&lt;/code&gt; which will be covered in detail in &lt;a href=&quot;#error-handling&quot;&gt;Error Handling&lt;/a&gt; section of this guide. The &lt;code&gt;err&lt;/code&gt; object will only contain webpack-related issues, such as misconfiguration, etc.</source>
          <target state="translated">&lt;code&gt;err&lt;/code&gt; オブジェクトは&lt;strong&gt;ありません&lt;/strong&gt;コンパイルエラーを含み、それらが使用して別々に取り扱わなければならない &lt;code&gt;stats.hasErrors()&lt;/code&gt; で詳しく説明される&lt;a href=&quot;#error-handling&quot;&gt;エラー処理&lt;/a&gt;は、このガイドのセクション。 &lt;code&gt;err&lt;/code&gt; オブジェクトは、などの設定ミス、などのWebPACK関連の問題を、含まれています</target>
        </trans-unit>
        <trans-unit id="6316d272613b9ebead3b9188dbe60bae0226dc9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;err&lt;/code&gt; object &lt;strong&gt;will not&lt;/strong&gt; include compilation errors. Those must be handled separately using &lt;code&gt;stats.hasErrors()&lt;/code&gt;, which will be covered in detail in the &lt;a href=&quot;#error-handling&quot;&gt;Error Handling&lt;/a&gt; section of this guide. The &lt;code&gt;err&lt;/code&gt; object will only contain webpack-related issues, such as misconfiguration, etc.</source>
          <target state="translated">&lt;code&gt;err&lt;/code&gt; オブジェクトは&lt;strong&gt;ありません&lt;/strong&gt;コンパイルエラーが含まれます。これらは、 &lt;code&gt;stats.hasErrors()&lt;/code&gt; を使用して個別に処理する必要があります。これについては、このガイドの「&lt;a href=&quot;#error-handling&quot;&gt;エラー処理」&lt;/a&gt;セクションで詳しく説明します。 &lt;code&gt;err&lt;/code&gt; オブジェクトは、などの設定ミス、などのWebPACK関連の問題を、含まれています</target>
        </trans-unit>
        <trans-unit id="bb371008522bc9f3a06d993b0234da62c0417680" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorHandler&lt;/code&gt; is fired when the evaluation of this module (or dependencies) has thrown an exception.</source>
          <target state="translated">&lt;code&gt;errorHandler&lt;/code&gt; このモジュール（または依存関係）の評価が例外をスローしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="1fe57923ecba9453902c3f4116b04e18cc172108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt; properties each contain a list of objects. Each object contains a message, a stack trace and various other properties:</source>
          <target state="translated">&lt;code&gt;errors&lt;/code&gt; や &lt;code&gt;warnings&lt;/code&gt; のプロパティは、それぞれのオブジェクトのリストが含まれています。各オブジェクトには、メッセージ、スタックトレース、およびその他のさまざまなプロパティが含まれています。</target>
        </trans-unit>
        <trans-unit id="15a6063eedfa1b8f8d44562d7e1aa8a218b4f303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt; properties each contain a list of strings. Each string contains a message and stack trace:</source>
          <target state="translated">&lt;code&gt;errors&lt;/code&gt; や &lt;code&gt;warnings&lt;/code&gt; のプロパティはそれぞれ、文字列のリストが含まれています。各文字列には、メッセージとスタックトレースが含まれています。</target>
        </trans-unit>
        <trans-unit id="a30da37a0d5f5f08a3c6e62a79f140b581d47fbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export&lt;/code&gt; keyword allows to expose things from an ESM to other modules:</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 他のモジュールへのESMから物事を公開することができますキーワード：</target>
        </trans-unit>
        <trans-unit id="99904445efe371f8e3e683431fc098c714736010" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; field in the &lt;code&gt;package.json&lt;/code&gt; of a package allows to declare which module should be used when using module requests like &lt;code&gt;import &quot;package&quot;&lt;/code&gt; or &lt;code&gt;import &quot;package/sub/path&quot;&lt;/code&gt;. It replaces the default implementation that returns &lt;code&gt;main&lt;/code&gt; field resp. &lt;code&gt;index.js&lt;/code&gt; files for &lt;code&gt;&quot;package&quot;&lt;/code&gt; and the file system lookup for &lt;code&gt;&quot;package/sub/path&quot;&lt;/code&gt;.</source>
          <target state="translated">パッケージの &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;exports&lt;/code&gt; フィールドを使用すると、 &lt;code&gt;import &quot;package&quot;&lt;/code&gt; や &lt;code&gt;import &quot;package/sub/path&quot;&lt;/code&gt; などのモジュールリクエストを使用するときに使用するモジュールを宣言できます。これは、 &lt;code&gt;main&lt;/code&gt; フィールドまたはメインフィールドを返すデフォルトの実装を置き換えます。 &lt;code&gt;&quot;package&quot;&lt;/code&gt; &lt;code&gt;index.js&lt;/code&gt; ファイルと「package &lt;code&gt;&quot;package/sub/path&quot;&lt;/code&gt; のファイルシステムルックアップ。</target>
        </trans-unit>
        <trans-unit id="21649147367c735a062f33236b143143440ec509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expose-loader&lt;/code&gt; loader allows to expose a module (in whole or in part) to global object (&lt;code&gt;self&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;expose-loader&lt;/code&gt; ローダは、グローバルオブジェクト（TO（全部または一部）モジュールを露出させることができ &lt;code&gt;self&lt;/code&gt; 、 &lt;code&gt;window&lt;/code&gt; 及び &lt;code&gt;global&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ebe7a596ff5e54934592c106b89d332d3bba5c9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property also supports naming installed NPM modules which export webpack configurations. Various configuration properties can also be filtered in different ways based on need.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティもインストールNPMモジュール輸出WebPACKの構成を命名サポートしています。必要に応じて、さまざまな構成プロパティを異なる方法でフィルタリングすることもできます。</target>
        </trans-unit>
        <trans-unit id="2efafe435f960ea040388058af44883824b2dfe7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;externals&lt;/code&gt; configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer's (any end-user application) environment. This feature is typically most useful to &lt;strong&gt;library developers&lt;/strong&gt;, however there are a variety of applications for it.</source>
          <target state="translated">&lt;code&gt;externals&lt;/code&gt; 設定オプションは、出力バンドルからの依存性を排除する方法を提供します。代わりに、作成されたバンドルは、その依存関係に依存して、コンシューマー（任意のエンドユーザーアプリケーション）環境に存在します。この機能は通常、&lt;strong&gt;ライブラリ開発者&lt;/strong&gt;にとって最も便利ですが、さまざまなアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="8915101d6d0cf049bfb4b9f1127093b8d16acda4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;externals&lt;/code&gt; configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer's environment. This feature is typically most useful to &lt;strong&gt;library developers&lt;/strong&gt;, however there are a variety of applications for it.</source>
          <target state="translated">&lt;code&gt;externals&lt;/code&gt; 設定オプションは、出力バンドルからの依存性を排除する方法を提供します。代わりに、作成されたバンドルは、その依存関係がコンシューマーの環境に存在することに依存しています。この機能は通常、&lt;strong&gt;ライブラリ開発者&lt;/strong&gt;にとって最も便利ですが、さまざまなアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="d120a1f6196b25d1da372c140fadf32f3fc67614" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file-loader&lt;/code&gt; resolves &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;require()&lt;/code&gt; on a file into a url and emits the file into the output directory.</source>
          <target state="translated">&lt;code&gt;file-loader&lt;/code&gt; 解決さは、 &lt;code&gt;import&lt;/code&gt; / &lt;code&gt;require()&lt;/code&gt; URLにファイルの出力ディレクトリにファイルを発します。</target>
        </trans-unit>
        <trans-unit id="b0f3b799fe5485060fbb228471725b1fc4660161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fileContext&lt;/code&gt; option is useful when you want to store source maps in an upper level directory to avoid &lt;code&gt;../../&lt;/code&gt; appearing in the absolute &lt;code&gt;[url]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileContext&lt;/code&gt; のお店のソースにしたいときオプションが便利です避けるために、上位レベルのディレクトリにマップする &lt;code&gt;../../&lt;/code&gt; 絶対に登場 &lt;code&gt;[url]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d58f2904d0c86283f6d5802742147c71f24aadf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filePath&lt;/code&gt; is an absolute path or relative to the webpack config: &lt;code&gt;output.path&lt;/code&gt;. You can pass in a different &lt;code&gt;formatter&lt;/code&gt; for the output file, if none is passed in the default/configured formatter will be used.</source>
          <target state="translated">&lt;code&gt;filePath&lt;/code&gt; にはWebPACKの設定ファイルの絶対パスまたは相対的である： &lt;code&gt;output.path&lt;/code&gt; 。デフォルト/構成済みのフォーマッターで何も渡されない場合は、出力ファイルに別の &lt;code&gt;formatter&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3ac9d0d856894e31e9e35e5216961c4e21678205" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filePath&lt;/code&gt; is relative to the webpack config: output.path You can pass in a different formatter for the output file, if none is passed in the default/configured formatter will be used</source>
          <target state="translated">&lt;code&gt;filePath&lt;/code&gt; には WebPACKのコンフィグに相対的である：何もデフォルトの構成/フォーマッタに渡されない場合は、出力ファイルに別のフォーマッタに渡すことができoutput.pathが使用されます</target>
        </trans-unit>
        <trans-unit id="b868542b51503c013e1a88153361f8b6c8030d37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an integer that allows to specify dlopen behavior. See the [&lt;code&gt;process.dlopen&lt;/code&gt;][https://nodejs.org/api/process.html#process_process_dlopen_module_filename_flags] documentation for details.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数はdlopenの動作を指定することを可能にする整数です。詳細については、[ &lt;code&gt;process.dlopen&lt;/code&gt; ] [https://nodejs.org/api/process.html#process_process_dlopen_module_filename_flags]のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8e867fda39d4db878de512a003165a4320ef3ec0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hooks&lt;/code&gt; property on a &lt;code&gt;Compiler&lt;/code&gt; instance is used to register a plugin to any hook event in the &lt;code&gt;Compiler&lt;/code&gt;'s lifecycle. The &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt;&lt;code&gt;WebpackOptionsDefaulter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt;&lt;code&gt;WebpackOptionsApply&lt;/code&gt;&lt;/a&gt; utilities are used by webpack to configure its &lt;code&gt;Compiler&lt;/code&gt; instance with all the built-in plugins.</source>
          <target state="translated">&lt;code&gt;hooks&lt;/code&gt; のプロパティ &lt;code&gt;Compiler&lt;/code&gt; インスタンスは、のいずれかのフックイベントにプラグインを登録するために使用される &lt;code&gt;Compiler&lt;/code&gt; のライフサイクル。&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt; &lt;code&gt;WebpackOptionsDefaulter&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt; &lt;code&gt;WebpackOptionsApply&lt;/code&gt; &lt;/a&gt;ユーティリティは、その構成するためのWebPACKで使用されている &lt;code&gt;Compiler&lt;/code&gt; すべての組み込みのプラグインでインスタンスを。</target>
        </trans-unit>
        <trans-unit id="e489f359a446669afc55ea6d3f26f8766a21668c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;implementation&lt;/code&gt; options either accepts &lt;code&gt;sass&lt;/code&gt; (&lt;code&gt;Dart Sass&lt;/code&gt;) or &lt;code&gt;node-sass&lt;/code&gt; as a module.</source>
          <target state="translated">&lt;code&gt;implementation&lt;/code&gt; オプションのいずれか受け付け &lt;code&gt;sass&lt;/code&gt; （ &lt;code&gt;Dart Sass&lt;/code&gt; ）または &lt;code&gt;node-sass&lt;/code&gt; モジュールとして。</target>
        </trans-unit>
        <trans-unit id="9c9f4d014ce207eb08f16b3575e688ddf602d259" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import()&lt;/code&gt; must contain at least some information about where the module is located. Bundling can be limited to a specific directory or set of files so that when you are using a dynamic expression - every module that could potentially be requested on an &lt;code&gt;import()&lt;/code&gt; call is included. For example, &lt;code&gt;import(`./locale/${language}.json`)&lt;/code&gt; will cause every &lt;code&gt;.json&lt;/code&gt; file in the &lt;code&gt;./locale&lt;/code&gt; directory to be bundled into the new chunk. At run time, when the variable &lt;code&gt;language&lt;/code&gt; has been computed, any file like &lt;code&gt;english.json&lt;/code&gt; or &lt;code&gt;german.json&lt;/code&gt; will be available for consumption.</source>
          <target state="translated">&lt;code&gt;import()&lt;/code&gt; モジュールが配置されている場所に関する少なくともいくつかの情報を含んでいなければなりません。バンドルを特定のディレクトリまたはファイルのセットに制限して、動的式を使用している場合、 &lt;code&gt;import()&lt;/code&gt; 呼び出しで要求される可能性のあるすべてのモジュールが含まれるようにすることができます。たとえば、 &lt;code&gt;import(`./locale/${language}.json`)&lt;/code&gt; を使用すると、。 &lt;code&gt;./locale&lt;/code&gt; ディレクトリ内のすべての &lt;code&gt;.json&lt;/code&gt; ファイルが新しいチャンクにバンドルされます。実行時に、可変 &lt;code&gt;language&lt;/code&gt; が計算されると、 &lt;code&gt;english.json&lt;/code&gt; や &lt;code&gt;german.json&lt;/code&gt; などのファイルを使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="1cd0eed36440fa7bd25b12493d8769f0be66b762" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword allows to get references to things from other modules into an ESM:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; ESMに、他のモジュールからのものへの参照を取得することができますキーワード：</target>
        </trans-unit>
        <trans-unit id="ba0645fbb47172caa84d26173146ecd57347cd38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; object parameter has the following fields:</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; オブジェクトのパラメータは、次のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="c3bb9fd1827769306a6587d4f6b4960bfdea0b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; parameter will be an object containing some of the following values:</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; パラメータには以下の値の一部を含むオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="ac2bce6f0611a346f5fe5bcff1092028d81fbe9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;less-loader&lt;/code&gt; requires &lt;a href=&quot;https://github.com/less/less.js&quot;&gt;less&lt;/a&gt; as &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;&lt;code&gt;peerDependency&lt;/code&gt;&lt;/a&gt;. Thus you are able to control the versions accurately.</source>
          <target state="translated">&lt;code&gt;less-loader&lt;/code&gt; 必要です&lt;a href=&quot;https://github.com/less/less.js&quot;&gt;以下&lt;/a&gt;のように&lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt; &lt;code&gt;peerDependency&lt;/code&gt; &lt;/a&gt;。したがって、バージョンを正確に制御することができます。</target>
        </trans-unit>
        <trans-unit id="8a7a85e47b4bb57e8a7c7a53a9c528cc33f8ac72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lineToLine&lt;/code&gt; object allows for the same &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, and &lt;code&gt;exclude&lt;/code&gt; options described above.</source>
          <target state="translated">&lt;code&gt;lineToLine&lt;/code&gt; のオブジェクトは、同一のを可能にする &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;include&lt;/code&gt; 、および &lt;code&gt;exclude&lt;/code&gt; オプションは上記。</target>
        </trans-unit>
        <trans-unit id="2bba46138c47a0a7cf087fb38225f589eeebb1c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; bundle changed because of its new content.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; バンドルは、その新しいコンテンツの変更しました。</target>
        </trans-unit>
        <trans-unit id="03227d93aca0adfcd004a03c5326a8b22e10009d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mini-css-extract-plugin&lt;/code&gt; supports hot reloading of actual css files in development. Some options are provided to enable HMR of both standard stylesheets and locally scoped CSS or CSS modules. Below is an example configuration of mini-css for HMR use with CSS modules.</source>
          <target state="translated">&lt;code&gt;mini-css-extract-plugin&lt;/code&gt; ホット開発における実際のCSSファイルのリロードをサポート。標準スタイルシートとローカルスコープのCSSまたはCSSモジュールの両方のHMRを有効にするためにいくつかのオプションが提供されています。以下は、CSSモジュールでHMRを使用するためのmini-cssの設定例です。</target>
        </trans-unit>
        <trans-unit id="623a7a4d0b84401f0ebd528b15457e5a6b16f443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; option would respect the &lt;code&gt;--node-env&lt;/code&gt; option if you don't set it explicitly, i.e. &lt;code&gt;--node-env production&lt;/code&gt; would set both &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; to &lt;code&gt;'production'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e185eaa4f7fa01feafa7f198567ac6d46bf21d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; argument represents each module in the chunks you have provided via the &lt;code&gt;name&lt;/code&gt;/&lt;code&gt;names&lt;/code&gt; property. &lt;code&gt;module&lt;/code&gt; has the shape of a &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;NormalModule&lt;/a&gt;, which has two particularly useful properties for this use case:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 引数は、を介して提供されているチャンク内の各モジュールを表す &lt;code&gt;name&lt;/code&gt; / &lt;code&gt;names&lt;/code&gt; プロパティを。 &lt;code&gt;module&lt;/code&gt; は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;NormalModule&lt;/a&gt;の形状をしており、このユースケースでは特に有用な2つのプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="cbd01ba4f4fc84b360a7cec7e7dc3785dbd17b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; condition is used as optimization when preprocessing node-targeted code with a tool that supports ESM for &lt;code&gt;require()&lt;/code&gt; (like a bundler, when bundling for Node.js). For such a tool the exception is skipped. This is technically optional, but bundlers would include the package source code twice otherwise.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; のためのESMをサポートするツールを使用してノードをターゲットコード前処理する際の条件を最適化として使用されている &lt;code&gt;require()&lt;/code&gt; （Node.jsのため結束バンドラ、等）。このようなツールの場合、例外はスキップされます。これは技術的にはオプションですが、それ以外の場合、バンドラーはパッケージのソースコードを2回インクルードします。</target>
        </trans-unit>
        <trans-unit id="07a2ddaa292445cd51cc216f5cd3ee7a21c25be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; handles &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; scoping and &lt;code&gt;@value&lt;/code&gt; values. The &lt;code&gt;icss&lt;/code&gt; will only compile the low level &lt;code&gt;Interoperable CSS&lt;/code&gt; format for declaring &lt;code&gt;:import&lt;/code&gt; and &lt;code&gt;:export&lt;/code&gt; dependencies between CSS and other languages.</source>
          <target state="translated">この &lt;code&gt;module&lt;/code&gt; は、 &lt;code&gt;class&lt;/code&gt; と &lt;code&gt;id&lt;/code&gt; スコープと &lt;code&gt;@value&lt;/code&gt; の値を処理します。 &lt;code&gt;icss&lt;/code&gt; 唯一の低レベルコンパイルします &lt;code&gt;Interoperable CSS&lt;/code&gt; 宣言するためのフォーマット &lt;code&gt;:import&lt;/code&gt; と &lt;code&gt;:export&lt;/code&gt; CSSと他の言語間の依存関係を。</target>
        </trans-unit>
        <trans-unit id="a3cfb3d5cb7336d9511e7a4c809c722704ca080e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; property should point to a script that utilizes ES2015 module syntax but no other syntax features that aren't yet supported by browsers or node. This enables webpack to parse the module syntax itself, allowing for lighter bundles via &lt;a href=&quot;tree-shaking&quot;&gt;tree shaking&lt;/a&gt; if users are only consuming certain parts of the library.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; プロパティは、ES2015モジュールの構文が、まだブラウザやノードによってサポートされていないいない他の構文の機能を利用するスクリプトを指している必要があります。これにより、webpackがモジュール構文自体を解析できるようになり、ユーザーがライブラリーの特定の部分のみを消費している場合、&lt;a href=&quot;tree-shaking&quot;&gt;ツリーの揺れ&lt;/a&gt;を介して軽量のバンドルが可能になります。</target>
        </trans-unit>
        <trans-unit id="b9e6c5b232abe43edf24961bb5319e6155c57952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; option enables/disables the &lt;strong&gt;&lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt;&lt;/strong&gt; specification and setup basic behaviour.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; オプションが有効/無効に&lt;strong&gt;&lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSSモジュールの&lt;/a&gt;&lt;/strong&gt;仕様とセットアップの基本的な動作は。</target>
        </trans-unit>
        <trans-unit id="f6e16ff706d3ad9a7f34ca2ac321ba5759f3186f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;moment/locale&lt;/code&gt; context is restricted to files matching &lt;code&gt;/de|fr|hu/&lt;/code&gt;. Thus only those locales are included (see &lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;this issue&lt;/a&gt; for more information).</source>
          <target state="translated">&lt;code&gt;moment/locale&lt;/code&gt; コンテキストが一致するファイルに限定されている &lt;code&gt;/de|fr|hu/&lt;/code&gt; 。したがって、これらのロケールのみが含まれます（詳細については、&lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;この問題&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="69c7a1beab39f0986a8084e3f514abc10bb5b07b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newContentCallback&lt;/code&gt; function is given a &lt;a href=&quot;../api/plugins/module-factories&quot;&gt;&lt;code&gt;data&lt;/code&gt; object of the &lt;code&gt;ContextModuleFactory&lt;/code&gt;&lt;/a&gt; and is expected to overwrite the &lt;code&gt;request&lt;/code&gt; attribute of the supplied object.</source>
          <target state="translated">&lt;code&gt;newContentCallback&lt;/code&gt; の機能が与えられている&lt;a href=&quot;../api/plugins/module-factories&quot;&gt; &lt;code&gt;data&lt;/code&gt; のオブジェクト &lt;code&gt;ContextModuleFactory&lt;/code&gt; を&lt;/a&gt;し、上書きすることが期待される &lt;code&gt;request&lt;/code&gt; されたオブジェクトの属性。</target>
        </trans-unit>
        <trans-unit id="d93a803cfd822e9f080183ae5a4bf2fc1cc0d823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newContentResource&lt;/code&gt; and &lt;code&gt;newContentCreateContextMap&lt;/code&gt; parameters are also available:</source>
          <target state="translated">&lt;code&gt;newContentResource&lt;/code&gt; と &lt;code&gt;newContentCreateContextMap&lt;/code&gt; パラメータも使用できます。</target>
        </trans-unit>
        <trans-unit id="a19a4d88397a085c68dfd0c0f7af1b957ed12287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property has been deprecated in webpack 3 and removed in webpack 4.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; プロパティは、WebPACKの3で非推奨とのWebPACK 4で削除されました。</target>
        </trans-unit>
        <trans-unit id="77d82bf40f2e270972ea89ce304490f1b508185b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; property has &lt;a href=&quot;../configuration/output&quot;&gt;many more configurable features&lt;/a&gt; and if you like to know more about the concepts behind it, you can &lt;a href=&quot;output&quot;&gt;read more in the output section&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 特性があり&lt;a href=&quot;../configuration/output&quot;&gt;、より多くの設定可能な機能を&lt;/a&gt;、あなたがその背後にある概念についての詳細を知りたい場合は、あなたができる&lt;a href=&quot;output&quot;&gt;より多くの出力部に読んで&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="302068d8083f2cfbbe2ede6a8805fb37c7de6dcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; property has &lt;a href=&quot;../configuration/output&quot;&gt;many more configurable features&lt;/a&gt;. If you want to learn about the concepts behind it, you can &lt;a href=&quot;output&quot;&gt;read more in the output section&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 特性があり&lt;a href=&quot;../configuration/output&quot;&gt;、より多くの設定可能な機能を&lt;/a&gt;。その背後にある概念について知りたい場合&lt;a href=&quot;output&quot;&gt;は、出力セクションで詳細を読む&lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="017373fdcf3bc098cb054d076c11ba924956de1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;packageName&lt;/code&gt; option allows setting a package name to look for a &lt;code&gt;requiredVersion&lt;/code&gt;. It is automatically inferred for the module requests by default, set &lt;code&gt;requiredVersion&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; when automatic infer should be disabled.</source>
          <target state="translated">&lt;code&gt;packageName&lt;/code&gt; オプションを探すためにパッケージ名を設定することができます &lt;code&gt;requiredVersion&lt;/code&gt; 。デフォルトでは、モジュール要求に対して自動的に推測されます。自動推測を無効にする必要がある場合は、 &lt;code&gt;requiredVersion&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定してください。</target>
        </trans-unit>
        <trans-unit id="00a1ab1dde43ec150840bd4f6b6641f52c20f76a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; instance, found in the &lt;code&gt;compiler&lt;/code&gt;, is used to parse each module being processed by webpack. The &lt;code&gt;parser&lt;/code&gt; is yet another webpack class that extends &lt;code&gt;tapable&lt;/code&gt; and provides a variety of &lt;code&gt;tapable&lt;/code&gt; hooks that can be used by plugin authors to customize the parsing process.</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; に見出される場合、 &lt;code&gt;compiler&lt;/code&gt; 、WebPACKのによって処理されている各モジュールを解析するために使用されます。 &lt;code&gt;parser&lt;/code&gt; 延びているさらに別のWebPACKクラスです &lt;code&gt;tapable&lt;/code&gt; 及び様々な提供 &lt;code&gt;tapable&lt;/code&gt; 解析プロセスをカスタマイズするために、プラグイン作者によって使用することができるフックを。</target>
        </trans-unit>
        <trans-unit id="6fbd1e1361c4459a611701b40f663774c6efbafc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; is found within &lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt;NormalModuleFactory&lt;/a&gt; and therefore takes little more work to access:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7687177981a2fd47de4971bcb71521b7fdd4ee22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; is found within &lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt;module factories&lt;/a&gt; and therefore takes little more work to access:</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; 内部に発見された&lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt;モジュール工場&lt;/a&gt;、したがって、アクセスに少しより多くの仕事を取ります。</target>
        </trans-unit>
        <trans-unit id="6488a14de4d3fe74f40f47ee86a3be5f2a35a824" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt; option is used to customize the webpack build process in a variety of ways. webpack comes with a variety built-in plugins available under &lt;code&gt;webpack.[plugin-name]&lt;/code&gt;. See &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;Plugins page&lt;/a&gt; for a list of plugins and documentation but note that there are a lot more out in the community.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; オプションは、さまざまな方法でWebPACKのビルドプロセスをカスタマイズするために使用されます。webpackには、 &lt;code&gt;webpack.[plugin-name]&lt;/code&gt; 利用できるさまざまな組み込みプラグインが付属しています。プラグインとドキュメントのリストについては、&lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;プラグインのページ&lt;/a&gt;を参照してください。ただし、コミュニティにはさらに多くのものがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7ba56a2710d7efe8d8ee49077d7d9a0b872efb5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt; option is used to customize the webpack build process in a variety of ways. webpack comes with a variety built-in plugins available under &lt;code&gt;webpack.[plugin-name]&lt;/code&gt;. See &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;this page&lt;/a&gt; for a list of plugins and documentation but note that there are a lot more out in the community.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; オプションは、さまざまな方法でWebPACKのビルドプロセスをカスタマイズするために使用されます。webpackには、 &lt;code&gt;webpack.[plugin-name]&lt;/code&gt; 利用可能なさまざまな組み込みプラグインが付属しています。プラグインとドキュメントのリストについては、&lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;このページ&lt;/a&gt;を参照してください。ただし、コミュニティには他にも多くの機能があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="440b7e1d609564f2203fd525c43f9da6f0a213ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;proxy_set_header&lt;/code&gt; lines are important, because they allow the WebSockets to work correctly.</source>
          <target state="translated">&lt;code&gt;proxy_set_header&lt;/code&gt; の彼らはWebSocketをが正常に動作することができますので、ラインは、重要です。</target>
        </trans-unit>
        <trans-unit id="959497ef27be2ffe34adb1545ac77f2b65dccb71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; can be changed so the bundle is put in a directory:</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; はバンドルはディレクトリに置かれるように変更することができます：</target>
        </trans-unit>
        <trans-unit id="67beac7259210a810639de807db709b25609a215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; configuration option can be quite useful in a variety of scenarios. It allows you to specify the base path for all the assets within your application.</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; の設定オプションは、さまざまなシナリオに威力を発揮することができます。これにより、アプリケーション内のすべてのアセットの基本パスを指定できます。</target>
        </trans-unit>
        <trans-unit id="bede5a9dcfa7a56a6eef780d9032af1e110e5234" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; option as function</source>
          <target state="translated">関数としての &lt;code&gt;publicPath&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="f910c8b0717528b3a5180d00de7739fbaf9dcd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; specifies the public URL address of the output files when referenced in a browser. If not specified, the same public path used for other webpack assets is used.</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; は、ブラウザで参照したときに、出力ファイルの公開URLアドレスを指定します。指定しない場合、他のWebpackアセットに使用されるのと同じパブリックパスが使用されます。</target>
        </trans-unit>
        <trans-unit id="2cd29ccbf03730a8b2edc90124528dbcf16d9bf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; will be used within our server script as well in order to make sure files are served correctly on &lt;code&gt;http://localhost:3000&lt;/code&gt;. We'll specify the port number later. The next step is setting up our custom &lt;code&gt;express&lt;/code&gt; server:</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; はよくわからファイルがで正しく提供されているようにするためのように、当社のサーバースクリプト内で使用されます &lt;code&gt;http://localhost:3000&lt;/code&gt; 。後でポート番号を指定します。次のステップは、カスタム &lt;code&gt;express&lt;/code&gt; サーバーの設定です。</target>
        </trans-unit>
        <trans-unit id="66659c55829751e46a5bd66c1071f7d7b1d5ee06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reportProgress&lt;/code&gt; function may be called with these arguments:</source>
          <target state="translated">&lt;code&gt;reportProgress&lt;/code&gt; の機能は、これらの引数で呼び出されることがあります。</target>
        </trans-unit>
        <trans-unit id="bfa85c6fb79a4dfb066d5382813b76a6d20780bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requestRegExp&lt;/code&gt; parameter passed to &lt;code&gt;IgnorePlugin&lt;/code&gt; is not tested against the resolved file names or absolute module names being imported or required, but rather against the &lt;em&gt;string&lt;/em&gt; passed to &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;&lt;em&gt;within the source code where the import is taking place&lt;/em&gt;. For example, if you're trying to exclude &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt;, this won't work:</source>
          <target state="translated">&lt;code&gt;requestRegExp&lt;/code&gt; のに渡されたパラメータ &lt;code&gt;IgnorePlugin&lt;/code&gt; が解決されたファイル名または絶対モジュール名に対してテストされていませんが、インポート、または必要ではなく、むしろ反対されている&lt;em&gt;文字列&lt;/em&gt;に渡された &lt;code&gt;require&lt;/code&gt; または &lt;code&gt;import&lt;/code&gt; &lt;em&gt;インポートが行われているソースコード内&lt;/em&gt;。たとえば、 &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt; を除外しようとすると、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="1533850dd988e700b0ea3046325ff8329c91ef0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resourceRegExp&lt;/code&gt; parameter passed to &lt;code&gt;IgnorePlugin&lt;/code&gt; is not tested against the resolved file names or absolute module names being imported or required, but rather against the &lt;em&gt;string&lt;/em&gt; passed to &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;&lt;em&gt;within the source code where the import is taking place&lt;/em&gt;. For example, if you're trying to exclude &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt;, this won't work:</source>
          <target state="translated">&lt;code&gt;resourceRegExp&lt;/code&gt; のに渡されたパラメータ &lt;code&gt;IgnorePlugin&lt;/code&gt; が解決されたファイル名または絶対モジュール名に対してテストされていませんが、インポート、または必要ではなく、むしろ反対されている&lt;em&gt;文字列&lt;/em&gt;に渡された &lt;code&gt;require&lt;/code&gt; または &lt;code&gt;import&lt;/code&gt; &lt;em&gt;インポートが行われているソースコード内&lt;/em&gt;。たとえば、 &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt; を除外しようとしている場合、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="aa343c1130af70aabd487d99912dab97138f9348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; method is then used to kickstart all compilation work. Upon completion, the given &lt;code&gt;callback&lt;/code&gt; function is executed. The final logging of stats and errors should be done in this &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="translated">次に、 &lt;code&gt;run&lt;/code&gt; メソッドを使用して、すべてのコンパイル作業を開始します。完了すると、指定された &lt;code&gt;callback&lt;/code&gt; 関数が実行されます。統計とエラーの最終的なロギングは、この &lt;code&gt;callback&lt;/code&gt; 関数で実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="4caf13affa0188a3e630720cba003fe7aa6ccbd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sass-loader&lt;/code&gt; uses Sass's custom importer feature to pass all queries to the Webpack resolving engine. Thus you can import your Sass modules from &lt;code&gt;node_modules&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21dd4fb782936d086fe68e859553dafb411be4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sass-loader&lt;/code&gt; uses Sass's custom importer feature to pass all queries to the Webpack resolving engine. Thus you can import your Sass modules from &lt;code&gt;node_modules&lt;/code&gt;. Just prepend them with a &lt;code&gt;~&lt;/code&gt; to tell Webpack that this is not a relative import:</source>
          <target state="translated">&lt;code&gt;sass-loader&lt;/code&gt; WebPACKの解決エンジンにすべてのクエリを渡すためにサスのカスタムインポート機能を使用しています。したがって、Sassモジュールを &lt;code&gt;node_modules&lt;/code&gt; からインポートできます。 &lt;code&gt;~&lt;/code&gt; を前に付けて、これが相対的なインポートではないことをWebpackに伝えます。</target>
        </trans-unit>
        <trans-unit id="577d0f623cf7514831fd73382a3029ca1099d2fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source-map-loader&lt;/code&gt; extracts existing source maps from all JavaScript entries. This includes both inline source maps as well as those linked via URL. All source map data is passed to webpack for processing as per a chosen &lt;a href=&quot;../configuration/devtool&quot;&gt;source map style&lt;/a&gt; specified by the &lt;code&gt;devtool&lt;/code&gt; option in &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;webpack.config.js&lt;/a&gt;. This loader is especially useful when using 3rd-party libraries having their own source maps. If not extracted and processed into the source map of the webpack bundle, browsers may misinterpret source map data. &lt;code&gt;source-map-loader&lt;/code&gt; allows webpack to maintain source map data continuity across libraries so ease of debugging is preserved. The &lt;code&gt;source-map-loader&lt;/code&gt; will extract from any JavaScript file, including those in the &lt;code&gt;node_modules&lt;/code&gt; directory. Be mindful in setting &lt;a href=&quot;../configuration/module#ruleinclude&quot;&gt;include&lt;/a&gt; and &lt;a href=&quot;../configuration/module#ruleexclude&quot;&gt;exclude&lt;/a&gt; rule conditions to maximize bundling performance.</source>
          <target state="translated">&lt;code&gt;source-map-loader&lt;/code&gt; 抽出既存のソースは、すべてのJavaScriptのエントリからマッピングします。これには、インラインソースマップとURL経由でリンクされたマップの両方が含まれます。すべてのソースの地図データを選択ごとに処理するためのWebPACKに渡される&lt;a href=&quot;../configuration/devtool&quot;&gt;ソースマップスタイル&lt;/a&gt;によって指定された &lt;code&gt;devtool&lt;/code&gt; の中にオプション&lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;webpack.config.js&lt;/a&gt;。このローダーは、独自のソースマップを持つサードパーティライブラリを使用する場合に特に便利です。 Webpackバンドルのソースマップに抽出および処理されない場合、ブラウザはソースマップデータを誤って解釈する可能性があります。 &lt;code&gt;source-map-loader&lt;/code&gt; を使用すると、webpackはライブラリ間でソースマップデータの連続性を維持できるため、デバッグの容易さが維持されます。 &lt;code&gt;source-map-loader&lt;/code&gt; &lt;code&gt;node_modules&lt;/code&gt; ディレクトリ内のファイルを含むJavaScriptファイルから抽出します。バンドルのパフォーマンスを最大化するために&lt;a href=&quot;../configuration/module#ruleexclude&quot;&gt;、&lt;/a&gt;ルール条件の包含と除外の設定&lt;a href=&quot;../configuration/module#ruleinclude&quot;&gt;に&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="369de0da94b134923519e2b8cf18cb58b1484b59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; object that is passed as a second argument of the &lt;a href=&quot;#webpack&quot;&gt;&lt;code&gt;webpack()&lt;/code&gt;&lt;/a&gt; callback, is a good source of information about the code compilation process. It includes:</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; の第2引数として渡されたオブジェクト&lt;a href=&quot;#webpack&quot;&gt; &lt;code&gt;webpack()&lt;/code&gt; &lt;/a&gt;コールバックは、コードのコンパイル・プロセスに関する情報の優れた供給源です。含まれるもの：</target>
        </trans-unit>
        <trans-unit id="0fa1ceeebc223dab1f3f6c432ee757cc7bd5987b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; object that is passed as a second argument of the &lt;a href=&quot;#webpack-&quot;&gt;&lt;code&gt;webpack()&lt;/code&gt;&lt;/a&gt; callback, is a good source of information about the code compilation process. It includes:</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; の第2引数として渡されたオブジェクト&lt;a href=&quot;#webpack-&quot;&gt; &lt;code&gt;webpack()&lt;/code&gt; &lt;/a&gt;コールバックは、コードのコンパイル・プロセスに関する情報の優れた供給源です。以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="9dff24e3b8a34791e7bc80a01e4ab6eed1e802b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you don't want to use &lt;code&gt;quiet&lt;/code&gt; or &lt;code&gt;noInfo&lt;/code&gt; because you want some bundle information, but not all of it.</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; オプションは、正確にバンドル情報が表示されますどのように制御することができます。バンドル情報のすべてではなく一部が必要であるため、 &lt;code&gt;quiet&lt;/code&gt; または &lt;code&gt;noInfo&lt;/code&gt; を使用したくない場合は、これは良い中間点となります。</target>
        </trans-unit>
        <trans-unit id="4c79769622f460ee03342b8e1cd130200177a876" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;style-loader&lt;/code&gt; injects the styles lazily making them useable on-demand via &lt;code&gt;style.use()&lt;/code&gt; / &lt;code&gt;style.unuse()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;style-loader&lt;/code&gt; いい加減にそれらを介して、オンデマンドで使用可能な作りのスタイルを注入 &lt;code&gt;style.use()&lt;/code&gt; / &lt;code&gt;style.unuse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77a959b54b097574b4bea60118a29fb435f0f872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; property identifies which file or files should be transformed.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; または複数のファイルを変換する必要があるプロパティを識別します。</target>
        </trans-unit>
        <trans-unit id="c92c3b6d9a4ff7441cc25b272c0de894b3c2d423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this.callback&lt;/code&gt; method is more flexible as it allows multiple arguments to be passed as opposed to just the &lt;code&gt;content&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this.callback&lt;/code&gt; それだけとは対照的に、複数の引数を渡すことを可能にするような方法は、より柔軟性がある &lt;code&gt;content&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6345b4bc86354b4abc5d07dca6da56646b9e249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thread-loader&lt;/code&gt; can be used to offload expensive loaders to a worker pool.</source>
          <target state="translated">&lt;code&gt;thread-loader&lt;/code&gt; 労働者のプールに高価ローダーをオフロードするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4eda0951d22d9b1d93047f81ffce0eed62f89b3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;topScope&lt;/code&gt; property is where you write all the code needed by your configuration, like module imports and functions/variables declarations:</source>
          <target state="translated">&lt;code&gt;topScope&lt;/code&gt; のプロパティは、モジュールのインポートと機能/変数の宣言のように、ご使用の構成によって必要なすべてのコードを書く場所です。</target>
        </trans-unit>
        <trans-unit id="e8f6290ba910c5da5fd2262b8a3a9306a1acf1cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true&lt;/code&gt; value allows to generation the &lt;code&gt;mimetype&lt;/code&gt; part from &lt;a href=&quot;https://github.com/jshttp/mime-types&quot;&gt;mime-types&lt;/a&gt;. The &lt;code&gt;false&lt;/code&gt; value removes the &lt;code&gt;mediatype&lt;/code&gt; part from a Data URL (if omitted, defaults to &lt;code&gt;text/plain;charset=US-ASCII&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 値が生成する可能 &lt;code&gt;mimetype&lt;/code&gt; から一部&lt;a href=&quot;https://github.com/jshttp/mime-types&quot;&gt;のMIMEタイプ&lt;/a&gt;。 &lt;code&gt;false&lt;/code&gt; 値は削除さ &lt;code&gt;mediatype&lt;/code&gt; データURL（の場合は省略、デフォルトから一部 &lt;code&gt;text/plain;charset=US-ASCII&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4af9db82c8603ebbd34a359670e4de9921a50c22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true&lt;/code&gt; value enables processing of all default elements and attributes, the &lt;code&gt;false&lt;/code&gt; disable processing of all attributes.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 値は、すべてのデフォルトの要素と属性を処理できます &lt;code&gt;false&lt;/code&gt; すべての属性の無効化処理を。</target>
        </trans-unit>
        <trans-unit id="20f8772fda6c35ab683bfd8148d1a50c11515e74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; property indicates which loader should be used to do the transforming.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; プロパティは、変換を行うために使用されるべきローダーを示しています。</target>
        </trans-unit>
        <trans-unit id="e6e2e9ef8dbc3d5383c141533d231f09eb89ee0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vendor&lt;/code&gt; bundle changed because its &lt;code&gt;module.id&lt;/code&gt; was changed.</source>
          <target state="translated">&lt;code&gt;vendor&lt;/code&gt; そのため、バンドルが変更さ &lt;code&gt;module.id&lt;/code&gt; が変更されました。</target>
        </trans-unit>
        <trans-unit id="82960aa0f6caf9f5689cf5935d850c7f66ec1a40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; method returns a &lt;code&gt;Watching&lt;/code&gt; instance that exposes &lt;code&gt;.close(callback)&lt;/code&gt; method. Calling this method will end watching:</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 方法を返し &lt;code&gt;Watching&lt;/code&gt; 露出するが、そのインスタンス &lt;code&gt;.close(callback)&lt;/code&gt; 方法。このメソッドを呼び出すと、監視が終了します。</target>
        </trans-unit>
        <trans-unit id="4a0b36b6ece61696347cc27cab3d20af2ce94c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack-dev-server&lt;/code&gt; comes with many configurable options. Head over to the &lt;a href=&quot;../configuration/dev-server&quot;&gt;documentation&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; 多くの設定可能なオプションが付属しています。詳細については、&lt;a href=&quot;../configuration/dev-server&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7fc0861e809d209dbbcf6f243915a671c9cd26a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack-dev-server&lt;/code&gt; provides you with a simple web server and the ability to use live reloading. Let's set it up:</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; シンプルなWebサーバとライブリロードを使用する機能を提供します。設定しましょう：</target>
        </trans-unit>
        <trans-unit id="48c48bfe39c90a41f2aa4d0d5851ecb894e963e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack.config.js&lt;/code&gt; file will be intelligently extended with properties from &lt;code&gt;base.config.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;webpack.config.js&lt;/code&gt; のファイルは、インテリジェントからのプロパティで拡張されます &lt;code&gt;base.config.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ad3e989709e306fec071f2cefb6ed11206b1cf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack&lt;/code&gt; compiler can understand modules written as ES2015 modules, CommonJS or AMD. However, some third party libraries may expect global dependencies (e.g. &lt;code&gt;$&lt;/code&gt; for &lt;code&gt;jQuery&lt;/code&gt;). The libraries might also create globals which need to be exported. These &quot;broken modules&quot; are one instance where &lt;em&gt;shimming&lt;/em&gt; comes into play.</source>
          <target state="translated">&lt;code&gt;webpack&lt;/code&gt; コンパイラは、ES2015モジュール、CommonJSまたはAMDとして書かれたモジュールを理解することができます。ただし、一部のサードパーティライブラリはグローバルな依存関係を期待する場合があります（ &lt;code&gt;jQuery&lt;/code&gt; の場合は &lt;code&gt;$&lt;/code&gt; など）。ライブラリは、エクスポートする必要があるグローバルを作成する場合もあります。これらの「壊れたモジュール」は、&lt;em&gt;シミング&lt;/em&gt;が関係する1つの例です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="78a77c4f98145ee3b0c9f55f1bdf0d93d8263529" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; (space) allow to separate the &lt;code&gt;globalName&lt;/code&gt;, &lt;code&gt;moduleLocalName&lt;/code&gt; and &lt;code&gt;override&lt;/code&gt; of expose.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; （スペース）を使用すると、 &lt;code&gt;globalName&lt;/code&gt; 、 &lt;code&gt;moduleLocalName&lt;/code&gt; 、およびexposeの &lt;code&gt;override&lt;/code&gt; を分離できます。</target>
        </trans-unit>
        <trans-unit id="61320feb332209234e64d9fd69da5920a7dffadc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; (space) allow to separate the &lt;code&gt;globalName&lt;/code&gt;, &lt;code&gt;moduleLocalName&lt;/code&gt; and &lt;code&gt;override&lt;/code&gt; of expose. The documentation and syntax examples can be read &lt;a href=&quot;#syntax&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; （スペース）を使用すると、 &lt;code&gt;globalName&lt;/code&gt; 、 &lt;code&gt;moduleLocalName&lt;/code&gt; 、およびexposeの &lt;code&gt;override&lt;/code&gt; を分離できます。ドキュメントと構文の例は&lt;a href=&quot;#syntax&quot;&gt;ここ&lt;/a&gt;で読むことができます。</target>
        </trans-unit>
        <trans-unit id="9f5e006fb405f3ff52dafc448923f505d80642e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; (space) allow to separate the &lt;code&gt;syntax&lt;/code&gt;, &lt;code&gt;moduleName&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; of import.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; （スペース）を使用すると、インポートの &lt;code&gt;syntax&lt;/code&gt; 、 &lt;code&gt;moduleName&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;alias&lt;/code&gt; を区切ることができます。</target>
        </trans-unit>
        <trans-unit id="7e1d777a1ef940e9309807c77ad94077914eae2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; (space) allow to separate the &lt;code&gt;syntax&lt;/code&gt;, &lt;code&gt;moduleName&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; of import. The documentation and syntax examples can be read &lt;a href=&quot;#syntax&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; （スペース）を使用すると、インポートの &lt;code&gt;syntax&lt;/code&gt; 、 &lt;code&gt;moduleName&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;alias&lt;/code&gt; を区切ることができます。ドキュメントと構文の例は&lt;a href=&quot;#syntax&quot;&gt;ここ&lt;/a&gt;で読むことができます。</target>
        </trans-unit>
        <trans-unit id="9baa55ff42dc4a065cf63ef88d6a2fee99d2d5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; (space) allow to separate the &lt;code&gt;syntax&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; of export.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; （スペース）を使用すると、エクスポートの &lt;code&gt;syntax&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;alias&lt;/code&gt; を区切ることができます。</target>
        </trans-unit>
        <trans-unit id="a267638d1313624e68b2657cbd6e434feb65497a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;%20&lt;/code&gt; (space) allow to separate the &lt;code&gt;syntax&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; of export. The documentation and syntax examples can be read &lt;a href=&quot;#syntax&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; または &lt;code&gt;%20&lt;/code&gt; （スペース）を使用すると、エクスポートの &lt;code&gt;syntax&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;alias&lt;/code&gt; を区切ることができます。ドキュメントと構文の例は&lt;a href=&quot;#syntax&quot;&gt;ここ&lt;/a&gt;で読むことができます。</target>
        </trans-unit>
        <trans-unit id="635124a1b4ade80ec417a236748826993e343c3c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;first option&lt;/strong&gt; is to open your &lt;code&gt;tsconfig.json&lt;/code&gt; file and look for &lt;code&gt;compilerOptions&lt;/code&gt;. Set &lt;code&gt;target&lt;/code&gt; to &lt;code&gt;&quot;ES5&quot;&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; to &lt;code&gt;&quot;CommonJS&quot;&lt;/code&gt; (or completely remove the &lt;code&gt;module&lt;/code&gt; option).</source>
          <target state="translated">&lt;strong&gt;最初のオプションは、&lt;/strong&gt;あなた開くことです &lt;code&gt;tsconfig.json&lt;/code&gt; のためのファイルと見 &lt;code&gt;compilerOptions&lt;/code&gt; を。設定 &lt;code&gt;target&lt;/code&gt; に &lt;code&gt;&quot;ES5&quot;&lt;/code&gt; と &lt;code&gt;module&lt;/code&gt; への &lt;code&gt;&quot;CommonJS&quot;&lt;/code&gt; （または完全に削除 &lt;code&gt;module&lt;/code&gt; オプション）。</target>
        </trans-unit>
        <trans-unit id="4b753724968fd4a8aa6110a6c955d7aa4b30e944" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;output&lt;/strong&gt; property tells webpack where to emit the &lt;em&gt;bundles&lt;/em&gt; it creates and how to name these files. It defaults to &lt;code&gt;./dist/main.js&lt;/code&gt; for the main output file and to the &lt;code&gt;./dist&lt;/code&gt; folder for any other generated file.</source>
          <target state="translated">&lt;strong&gt;出力&lt;/strong&gt;プロパティはどこ発するようにWebPACKのを伝え&lt;em&gt;バンドル&lt;/em&gt;それが作成し、これらのファイルに名前を付ける方法。デフォルトでは、メイン出力ファイルの場合は &lt;code&gt;./dist/main.js&lt;/code&gt; になり、その他の生成されたファイルの場合は &lt;code&gt;./dist&lt;/code&gt; フォルダーになります。</target>
        </trans-unit>
        <trans-unit id="eed9ec7a02f515af6544b70f5764508174058f6d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;return value of your entry point&lt;/strong&gt; will be assigned to the &lt;code&gt;exports&lt;/code&gt; object using the &lt;code&gt;output.library&lt;/code&gt; value. As the name implies, this is used in CommonJS environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6421739b8a34d5c508ba94e41c7b983d826d3c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;return value of your entry point&lt;/strong&gt; will be assigned to the &lt;code&gt;global&lt;/code&gt; object using the &lt;code&gt;output.library&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb2297331544555341be11c7484ee5cc9895a12" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;return value of your entry point&lt;/strong&gt; will be assigned to the &lt;code&gt;module.exports&lt;/code&gt;. As the name implies, this is used in CommonJS environments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d31520a57949c6a58de860b9d7495bccba9aff" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;return value of your entry point&lt;/strong&gt; will be assigned to the &lt;code&gt;window&lt;/code&gt; object using the &lt;code&gt;output.library&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7676adc6ec8bef4388697c0ad053f90c9830f1cb" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;return value of your entry point&lt;/strong&gt; will be assigned to this under the property named by &lt;code&gt;output.library&lt;/code&gt;. The meaning of &lt;code&gt;this&lt;/code&gt; is up to you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7f1d87a6236de23ae9ee9e25e2ea1b90bec2d2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;second option&lt;/strong&gt; is to install the &lt;code&gt;tsconfig-paths&lt;/code&gt; package:</source>
          <target state="translated">&lt;strong&gt;2番目のオプションは、&lt;/strong&gt;インストールすることです &lt;code&gt;tsconfig-paths&lt;/code&gt; パッケージを：</target>
        </trans-unit>
        <trans-unit id="12fb1858a3514d997f15b5204dc79149205e49c3" translate="yes" xml:space="preserve">
          <source>The API only supports a single concurrent compilation at a time. When using &lt;code&gt;run&lt;/code&gt;, wait for it to finish before calling &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;watch&lt;/code&gt; again. When using &lt;code&gt;watch&lt;/code&gt;, call &lt;code&gt;close&lt;/code&gt; and wait for it to finish before calling &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;watch&lt;/code&gt; again. Concurrent compilations will corrupt the output files.</source>
          <target state="translated">APIは一度に1つの同時コンパイルのみをサポートします。 &lt;code&gt;run&lt;/code&gt; を使用する場合は、それが完了するのを待ってから &lt;code&gt;run&lt;/code&gt; を呼び出すか &lt;code&gt;watch&lt;/code&gt; もう一度監視してください。 &lt;code&gt;watch&lt;/code&gt; を使用する場合は、 &lt;code&gt;close&lt;/code&gt; を呼び出して終了するまで待ってから、 &lt;code&gt;run&lt;/code&gt; または &lt;code&gt;watch&lt;/code&gt; を呼び出します。同時にコンパイルすると、出力ファイルが破損します。</target>
        </trans-unit>
        <trans-unit id="528e6048b5cc3fba8fce8478ded614669654a929" translate="yes" xml:space="preserve">
          <source>The CSS can be extracted in one CSS file using &lt;code&gt;optimization.splitChunks.cacheGroups&lt;/code&gt;.</source>
          <target state="translated">CSSは、 &lt;code&gt;optimization.splitChunks.cacheGroups&lt;/code&gt; を使用して1つのCSSファイルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="88ba40bb955abdf273b70c745a2a619b15008f9a" translate="yes" xml:space="preserve">
          <source>The Closure Library Plugin is only compatible with the &lt;code&gt;AGGRESSIVE_BUNDLE&lt;/code&gt; mode of the Closure-Compiler webpack plugin.</source>
          <target state="translated">Closure Libraryプラグインは、Closure-CompilerWebpackプラグインの &lt;code&gt;AGGRESSIVE_BUNDLE&lt;/code&gt; モードとのみ互換性があります。</target>
        </trans-unit>
        <trans-unit id="5ce1205cb2c56dae5668475d974ac376cca81c42" translate="yes" xml:space="preserve">
          <source>The Command Line Interface (CLI) to configure and interact with your build. It is especially useful in the case of early prototyping and profiling. For the most part, the CLI is simply used to kick off the process using a configuration file and a few flags (e.g. &lt;code&gt;--env&lt;/code&gt;).</source>
          <target state="translated">ビルドを構成および操作するためのコマンドラインインターフェイス（CLI）。初期のプロトタイピングとプロファイリングの場合に特に役立ちます。ほとんどの場合、CLIは、構成ファイルといくつかのフラグ（ &lt;code&gt;--env&lt;/code&gt; など）を使用してプロセスを開始するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5234b711ebe571f702de271664fe3fad3a23178e" translate="yes" xml:space="preserve">
          <source>The CommonsChunkPlugin has been removed in webpack v4 legato. To learn how chunks are treated in the latest version, check out the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt;.</source>
          <target state="translated">CommonsChunkPluginはwebpack v4レガートで削除されました。最新バージョンでのチャンクの処理方法については、&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPluginを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="229e84c0b0f542eaf2480b8ad349fd816795c9e4" translate="yes" xml:space="preserve">
          <source>The CommonsChunkPlugin has been removed in webpack v4 legato. To learn how chunks are treated in the latest version, check out the &lt;a href=&quot;split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt;.</source>
          <target state="translated">CommonsChunkPluginはwebpack v4レガートで削除されました。最新バージョンでのチャンクの処理方法については、&lt;a href=&quot;split-chunks-plugin&quot;&gt;SplitChunksPluginを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="d0045699beb0cd690ebabd7c8105167d01de1bac" translate="yes" xml:space="preserve">
          <source>The Compilation object has many methods and hooks available. On this page, we will list the available methods and properties.</source>
          <target state="translated">コンパイルオブジェクトには、利用可能なメソッドやフックがたくさんあります。このページでは、利用可能なメソッドとプロパティをリストアップします。</target>
        </trans-unit>
        <trans-unit id="4507304153be0db0cb962df914f0c5b2ab856e13" translate="yes" xml:space="preserve">
          <source>The Fine Art of the webpack 3 Config</source>
          <target state="translated">webpack 3 コンフィグのファインアート</target>
        </trans-unit>
        <trans-unit id="8f1c9a65c709ce00b5fa298f4d3eabb7b056dca5" translate="yes" xml:space="preserve">
          <source>The ID of the chunk</source>
          <target state="translated">チャンクのID</target>
        </trans-unit>
        <trans-unit id="b1c2b221613da1e5b10aea2457d7a2fd9e875d85" translate="yes" xml:space="preserve">
          <source>The ID of the current module.</source>
          <target state="translated">現在のモジュールのID。</target>
        </trans-unit>
        <trans-unit id="98eb04f8af01a453e93f28ea56e0c65eb3147c31" translate="yes" xml:space="preserve">
          <source>The ID of the module</source>
          <target state="translated">モジュールのID</target>
        </trans-unit>
        <trans-unit id="837ab1e9e050240207cd57bba270555a72d22a92" translate="yes" xml:space="preserve">
          <source>The JSON files to use for descriptions.</source>
          <target state="translated">記述に使用するJSONファイルです。</target>
        </trans-unit>
        <trans-unit id="c723a58153b1097bc6e5d48b2d40385bb0879aef" translate="yes" xml:space="preserve">
          <source>The JSON files to use for descriptions. Default:</source>
          <target state="translated">説明に使いたい JSON ファイル。デフォルト。</target>
        </trans-unit>
        <trans-unit id="2bd6ce3e5799557f02fb6ef11c6634c82897b1b8" translate="yes" xml:space="preserve">
          <source>The Loader Context</source>
          <target state="translated">ローダのコンテキスト</target>
        </trans-unit>
        <trans-unit id="8c69b75adc810300f3fa44f52599a074382fbe2c" translate="yes" xml:space="preserve">
          <source>The Manifest</source>
          <target state="translated">マニフェスト</target>
        </trans-unit>
        <trans-unit id="1fb1f63b586df68ac8225a0a4949a554713c3e6a" translate="yes" xml:space="preserve">
          <source>The Node.js API for &lt;code&gt;babel&lt;/code&gt; has been moved to &lt;code&gt;babel-core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; 用のNode.jsAPIは &lt;code&gt;babel-core&lt;/code&gt; に移動されました。</target>
        </trans-unit>
        <trans-unit id="20f70436a9d57cb1461c13fd70b6f74f082ee97c" translate="yes" xml:space="preserve">
          <source>The Node.js API is useful in scenarios in which you need to customize the build or development process since all the reporting and error handling must be done manually and webpack only does the compiling part. For this reason the &lt;a href=&quot;../configuration/stats&quot;&gt;&lt;code&gt;stats&lt;/code&gt;&lt;/a&gt; configuration options will not have any effect in the &lt;code&gt;webpack()&lt;/code&gt; call.</source>
          <target state="translated">すべてのレポートとエラー処理は手動で行う必要があり、webpackはコンパイル部分のみを実行するため、Node.js APIはビルドまたは開発プロセスをカスタマイズする必要があるシナリオで役立ちます。このため、&lt;a href=&quot;../configuration/stats&quot;&gt; &lt;code&gt;stats&lt;/code&gt; &lt;/a&gt;構成オプションは、 &lt;code&gt;webpack()&lt;/code&gt; 呼び出しでは効果がありません。</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">問題点</target>
        </trans-unit>
        <trans-unit id="fd5fa9a5b25de9fdd4bc4bc759ae247c0b3e4737" translate="yes" xml:space="preserve">
          <source>The Unix socket to listen to (instead of a host).</source>
          <target state="translated">(ホストの代わりに)リッスンするUnixソケット。</target>
        </trans-unit>
        <trans-unit id="eb35c252800397908f509c6c09e6b3ccf7cdfb2e" translate="yes" xml:space="preserve">
          <source>The above order of loaders should be maintained: &lt;a href=&quot;../loaders/style-loader&quot;&gt;&lt;code&gt;'style-loader'&lt;/code&gt;&lt;/a&gt; comes first and followed by &lt;a href=&quot;../loaders/css-loader&quot;&gt;&lt;code&gt;'css-loader'&lt;/code&gt;&lt;/a&gt;. If this convention is not followed, webpack is likely to throw errors.</source>
          <target state="translated">上記のローダーの順序を維持する必要があります。&lt;a href=&quot;../loaders/style-loader&quot;&gt; &lt;code&gt;'style-loader'&lt;/code&gt; &lt;/a&gt;が最初に来て、次に&lt;a href=&quot;../loaders/css-loader&quot;&gt; &lt;code&gt;'css-loader'&lt;/code&gt; &lt;/a&gt;続きます。この規則に従わないと、webpackがエラーをスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="4d5406ba559c1d91f6260313b9fbba08b5f54e12" translate="yes" xml:space="preserve">
          <source>The absolute filename</source>
          <target state="translated">絶対ファイル名</target>
        </trans-unit>
        <trans-unit id="6437f32e4b9c795567c8e4264f7c48e297cfbf8c" translate="yes" xml:space="preserve">
          <source>The algorithm is taken from &lt;a href=&quot;https://nodejs.org/api/zlib.html&quot;&gt;zlib&lt;/a&gt;.</source>
          <target state="translated">アルゴリズムは&lt;a href=&quot;https://nodejs.org/api/zlib.html&quot;&gt;zlib&lt;/a&gt;から取得されます。</target>
        </trans-unit>
        <trans-unit id="63cd9df0f8725b031bddd6167b7fadab8bda770f" translate="yes" xml:space="preserve">
          <source>The allowances were the ability to restrict registrations to a specific version or to support different sandboxes with different defined modules.</source>
          <target state="translated">この許容範囲は、登録を特定のバージョンに制限したり、異なる定義のモジュールで異なるサンドボックスをサポートしたりする機能でした。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
