<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="16b86c144a0a521ee168253a8c4f98de7b78f15d" translate="yes" xml:space="preserve">
          <source>The application asks the HMR runtime to check for updates.</source>
          <target state="translated">アプリケーションはHMRランタイムに更新のチェックを依頼します。</target>
        </trans-unit>
        <trans-unit id="79efe6cfd5949a3507bf3917f34b31f489dabef7" translate="yes" xml:space="preserve">
          <source>The application is eagerly executing an application which is operating as an omnidirectional host. There are options to choose from:</source>
          <target state="translated">アプリケーションは、全方位ホストとして動作しているアプリケーションを熱心に実行しています。選択できるオプションがあります。</target>
        </trans-unit>
        <trans-unit id="1ebbe790435ed6809e144b26b79df8536bc5f553" translate="yes" xml:space="preserve">
          <source>The application then asks the runtime to apply the updates.</source>
          <target state="translated">その後、アプリケーションはランタイムに更新を適用するように要求します。</target>
        </trans-unit>
        <trans-unit id="d824c0a8e805904e477cac16a6a89a050cf96b63" translate="yes" xml:space="preserve">
          <source>The arguments passed to &lt;code&gt;require.context&lt;/code&gt; must be literals!</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; に渡される引数はリテラルでなければなりません！</target>
        </trans-unit>
        <trans-unit id="3b269a2b9e4dd52dc81aafc9c739893dbdcca239" translate="yes" xml:space="preserve">
          <source>The array accepts relative, absolute, and glob patterns to the relevant files. It uses &lt;a href=&quot;https://github.com/micromatch/micromatch#matching-features&quot;&gt;micromatch&lt;/a&gt; under the hood.</source>
          <target state="translated">配列は、関連ファイルへの相対、絶対、およびグロブのパターンを受け入れます。フードの下で&lt;a href=&quot;https://github.com/micromatch/micromatch#matching-features&quot;&gt;マイクロマッチ&lt;/a&gt;を使用しています。</target>
        </trans-unit>
        <trans-unit id="7d7bfe627061e5f7c789904410a966a413748c03" translate="yes" xml:space="preserve">
          <source>The array accepts simple glob patterns to the relevant files. It uses &lt;a href=&quot;https://github.com/fitzgen/glob-to-regexp&quot;&gt;glob-to-regexp&lt;/a&gt; under the hood (Supports: &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;{a,b}&lt;/code&gt;, &lt;code&gt;[a-z]&lt;/code&gt;). Patterns like &lt;code&gt;*.css&lt;/code&gt;, which do not include a &lt;code&gt;/&lt;/code&gt;, will be treated like &lt;code&gt;**/*.css&lt;/code&gt;.</source>
          <target state="translated">配列は、関連するファイルへの単純なグロブパターンを受け入れます。&lt;a href=&quot;https://github.com/fitzgen/glob-to-regexp&quot;&gt;内部でglob-to-regexpを&lt;/a&gt;使用します（サポート： &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;**&lt;/code&gt; 、 &lt;code&gt;{a,b}&lt;/code&gt; 、 &lt;code&gt;[a-z]&lt;/code&gt; ）。 &lt;code&gt;/&lt;/code&gt; を含まない &lt;code&gt;*.css&lt;/code&gt; のようなパターンは、 &lt;code&gt;**/*.css&lt;/code&gt; ように扱われます。</target>
        </trans-unit>
        <trans-unit id="7f24e06847c7c8c09a6910743fe0e2b89b2d5d81" translate="yes" xml:space="preserve">
          <source>The assets has been optimized.</source>
          <target state="translated">資産が最適化されました。</target>
        </trans-unit>
        <trans-unit id="97db01edba497ef233257f289d55d0a23667758c" translate="yes" xml:space="preserve">
          <source>The assets have been optimized.</source>
          <target state="translated">資産が最適化されています。</target>
        </trans-unit>
        <trans-unit id="ea0a14dc5dc1e08c4a5a1dc6beb6d1e2c9344cfc" translate="yes" xml:space="preserve">
          <source>The available conditions vary depending on the module system and tool used.</source>
          <target state="translated">使用可能な条件は、使用するモジュールシステムやツールによって異なります。</target>
        </trans-unit>
        <trans-unit id="2bad31d0c6e7fc07307f1bde0b4eadebf87145fb" translate="yes" xml:space="preserve">
          <source>The banner text that points to the extracted file and will be added on top of the original file. Can be &lt;code&gt;false&lt;/code&gt; (no banner), a &lt;code&gt;String&lt;/code&gt;, or a &lt;code&gt;Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; that will be called with the filename where extracted comments have been stored. Will be wrapped into comment.</source>
          <target state="translated">抽出されたファイルをポイントし、元のファイルの上に追加されるバナーテキスト。することができ &lt;code&gt;false&lt;/code&gt; （ノーバナー）、 &lt;code&gt;String&lt;/code&gt; 、または &lt;code&gt;Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; 抽出されたコメントが保存されているファイル名で呼ばれます。コメントにラップされます。</target>
        </trans-unit>
        <trans-unit id="1f097a937bb4ef262288a8da73a495320626168c" translate="yes" xml:space="preserve">
          <source>The banner text that points to the extracted file and will be added on top of the original file. Can be &lt;code&gt;false&lt;/code&gt; (no banner), a &lt;code&gt;{String}&lt;/code&gt;, or a &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&lt;/code&gt; that will be called with the filename where extracted comments have been stored. Will be wrapped into comment</source>
          <target state="translated">抽出されたファイルをポイントし、元のファイルの上に追加されるバナーテキスト。することができ &lt;code&gt;false&lt;/code&gt; （ノーバナー）、 &lt;code&gt;{String}&lt;/code&gt; 、または &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&lt;/code&gt; 抽出されたコメントが保存されているファイル名で呼ばれます。コメントにラップされます</target>
        </trans-unit>
        <trans-unit id="ea0c3fb19eeb0a5ca2d5f787f8510cd22467c43d" translate="yes" xml:space="preserve">
          <source>The base directory, an &lt;strong&gt;absolute path&lt;/strong&gt;, for resolving entry points and loaders from configuration.</source>
          <target state="translated">エントリポイントとローダーを構成から解決するためのベースディレクトリ、&lt;strong&gt;絶対パス&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="dade99eb4c9c3fd9dd88d5f0ba2df781c3d633a2" translate="yes" xml:space="preserve">
          <source>The basename of the file/resource.</source>
          <target state="translated">ファイル/リソースのベースネーム。</target>
        </trans-unit>
        <trans-unit id="d328278dab4c04b62fd3bf91761c4b0d051ef9fa" translate="yes" xml:space="preserve">
          <source>The basic project structure may look like this:</source>
          <target state="translated">基本的なプロジェクトの構造は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="642f1b4d1aedf7984db5518b2965ddf6c4c68db8" translate="yes" xml:space="preserve">
          <source>The browser application name is platform dependent. Don't hard code it in reusable modules. For example, &lt;code&gt;'Chrome'&lt;/code&gt; is &lt;code&gt;'Google Chrome'&lt;/code&gt; on macOS, &lt;code&gt;'google-chrome'&lt;/code&gt; on Linux and &lt;code&gt;'chrome'&lt;/code&gt; on Windows.</source>
          <target state="translated">ブラウザアプリケーション名はプラットフォームによって異なります。再利用可能なモジュールにハードコーディングしないでください。たとえば、 &lt;code&gt;'Chrome'&lt;/code&gt; ある &lt;code&gt;'Google Chrome'&lt;/code&gt; MacOSの上、 &lt;code&gt;'google-chrome'&lt;/code&gt; のLinuxとの &lt;code&gt;'chrome'&lt;/code&gt; Windows上で。</target>
        </trans-unit>
        <trans-unit id="829bc837727bbafc63b76aeeb9da90175a1667ce" translate="yes" xml:space="preserve">
          <source>The browser provides a &lt;code&gt;console&lt;/code&gt; object with a very similar interface to the Node.js &lt;code&gt;console&lt;/code&gt;, so a polyfill is generally not needed.</source>
          <target state="translated">ブラウザは、Node.js &lt;code&gt;console&lt;/code&gt; と非常によく似たインターフェースを備えた &lt;code&gt;console&lt;/code&gt; オブジェクトを提供するため、通常、ポリフィルは必要ありません。</target>
        </trans-unit>
        <trans-unit id="aa3f5c75700c8ef9230b4071d77253ca4fd0187a" translate="yes" xml:space="preserve">
          <source>The bundle can be included as part of a script tag, and the bundle can be invoked like so:</source>
          <target state="translated">バンドルはスクリプトタグの一部として含めることができ、このようにバンドルを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ba7f6b7207278a6abb170c11f3d09b65779ebeaa" translate="yes" xml:space="preserve">
          <source>The bundle will also be available as &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt;.</source>
          <target state="translated">バンドルは &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt; としても利用できます。</target>
        </trans-unit>
        <trans-unit id="217dc2584c0fb5dc2dc7d41450dd433af073e169" translate="yes" xml:space="preserve">
          <source>The bundle will now be available as &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt;.</source>
          <target state="translated">バンドルは &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt; として利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="117b01d486ab05dc2a1b9418e5da87dc9698edff" translate="yes" xml:space="preserve">
          <source>The bundle with external dependencies can be used in various module contexts, such as &lt;a href=&quot;../concepts/modules&quot;&gt;CommonJS, AMD, global and ES2015 modules&lt;/a&gt;. The external library may be available in any of these forms:</source>
          <target state="translated">外部依存関係のあるバンドルは、&lt;a href=&quot;../concepts/modules&quot;&gt;CommonJS、AMD、グローバル、ES2015モジュール&lt;/a&gt;などのさまざまなモジュールコンテキストで使用できます。外部ライブラリは、次のいずれかの形式で利用できます。</target>
        </trans-unit>
        <trans-unit id="d8ac10f7b894229890ea38ddef1c239a04440579" translate="yes" xml:space="preserve">
          <source>The bundled files will be available in the browser under this path.</source>
          <target state="translated">バンドルされたファイルは、このパスの下にあるブラウザで利用可能になります。</target>
        </trans-unit>
        <trans-unit id="36d8698b636210d44251d2af577f761d0daad332" translate="yes" xml:space="preserve">
          <source>The bundling is a function that takes some files and emits others.</source>
          <target state="translated">バンドルは、いくつかのファイルを受け取り、他のファイルを放出する機能です。</target>
        </trans-unit>
        <trans-unit id="2fd596b7597dbfb276b29cfda53a436c72a8fe5f" translate="yes" xml:space="preserve">
          <source>The callback function takes three arguments:</source>
          <target state="translated">コールバック関数は3つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="5b301ff5f26e6e3457e880e7aa52e034b6cdffe9" translate="yes" xml:space="preserve">
          <source>The chunk assets have been optimized.</source>
          <target state="translated">チャンク資産が最適化されました。</target>
        </trans-unit>
        <trans-unit id="f12d781d5ccfce31d9164c466ca027e17c249776" translate="yes" xml:space="preserve">
          <source>The chunk is requested, when you require the bundle.</source>
          <target state="translated">バンドルが必要な場合は、チャンクを要求します。</target>
        </trans-unit>
        <trans-unit id="81ef41469690d0bbf8026dc3cdeda400cf40c231" translate="yes" xml:space="preserve">
          <source>The command to start &lt;code&gt;webpack-dev-server&lt;/code&gt; can then be changed to this:</source>
          <target state="translated">次に、 &lt;code&gt;webpack-dev-server&lt;/code&gt; を起動するコマンドを次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="34a6deff48e1d6a0c1e725fa06e2ce2bc0d257ae" translate="yes" xml:space="preserve">
          <source>The command to start webpack-dev-server can then be changed to this:</source>
          <target state="translated">そして、webpack-dev-serverを起動するコマンドをこのように変更することができます。</target>
        </trans-unit>
        <trans-unit id="3789f3b9960fd99acb1e00a2ccf2ffd85b4a7fd4" translate="yes" xml:space="preserve">
          <source>The compiler ensures that module IDs and chunk IDs are consistent between these builds. It typically stores these IDs in memory (e.g. with &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;), but it's also possible to store them in a JSON file.</source>
          <target state="translated">コンパイラーは、モジュールIDとチャンクIDがこれらのビルド間で一貫していることを確認します。通常、これらのIDはメモリに保存されます（例：&lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-serverを使用&lt;/a&gt;）。ただし、JSONファイルに保存することもできます。</target>
        </trans-unit>
        <trans-unit id="fee4edceee7fcb408d89ed61453c6f792e395031" translate="yes" xml:space="preserve">
          <source>The compression algorithm/function</source>
          <target state="translated">圧縮アルゴリズム/機能</target>
        </trans-unit>
        <trans-unit id="ff8c9806ce1e0f7f3b65580f88da7706f9f23de9" translate="yes" xml:space="preserve">
          <source>The compression algorithm/function.</source>
          <target state="translated">圧縮アルゴリズム/機能。</target>
        </trans-unit>
        <trans-unit id="a788f2ca0f3e40c85c64806e9b2de8d22c971d5e" translate="yes" xml:space="preserve">
          <source>The configuration above has defined a &lt;code&gt;rules&lt;/code&gt; property for a single module with two required properties: &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;. This tells webpack's compiler the following:</source>
          <target state="translated">上記の設定では、 &lt;code&gt;test&lt;/code&gt; と &lt;code&gt;use&lt;/code&gt; の 2つの必須プロパティを持つ単一モジュールの &lt;code&gt;rules&lt;/code&gt; プロパティを定義しています。これは、webpackのコンパイラに次のように伝えます。</target>
        </trans-unit>
        <trans-unit id="a9919e757b665eea3b236fa8b39ebf3977dac665" translate="yes" xml:space="preserve">
          <source>The configuration is the same, switch out &lt;code&gt;sass-loader&lt;/code&gt; for &lt;code&gt;less-loader&lt;/code&gt; when necessary.</source>
          <target state="translated">設定は同じですが、必要に応じて &lt;code&gt;sass-loader&lt;/code&gt; を &lt;code&gt;less-loader&lt;/code&gt; ためにsass-loaderを切り替えます。</target>
        </trans-unit>
        <trans-unit id="7f4253f2f740bbba896793645215e3f4e3bbd342" translate="yes" xml:space="preserve">
          <source>The consumer also can use the library by loading it via a script tag:</source>
          <target state="translated">また、消費者はスクリプトタグを介してライブラリを読み込むことで、ライブラリを利用することができます。</target>
        </trans-unit>
        <trans-unit id="142e06a80b8adb00883cd7ba1de5598af662eacb" translate="yes" xml:space="preserve">
          <source>The container interface supports &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt; methods. &lt;code&gt;init&lt;/code&gt; is a &lt;code&gt;async&lt;/code&gt; compatible method that is called with one argument: the shared scope object. This object is used as a shared scope in the remote container and is filled with the provided modules from a host. It can be leveraged to connect remote containers to a host container dynamically at runtime.</source>
          <target state="translated">コンテナインターフェイスは、 &lt;code&gt;get&lt;/code&gt; メソッドと &lt;code&gt;init&lt;/code&gt; メソッドをサポートしています。 &lt;code&gt;init&lt;/code&gt; は、共有スコープオブジェクトという1つの引数で呼び出される &lt;code&gt;async&lt;/code&gt; 互換メソッドです。このオブジェクトは、リモートコンテナーで共有スコープとして使用され、ホストから提供されたモジュールで満たされます。これを利用して、実行時にリモートコンテナをホストコンテナに動的に接続できます。</target>
        </trans-unit>
        <trans-unit id="2ff8a81147746430acedd9eba5dd186382bc0736" translate="yes" xml:space="preserve">
          <source>The container tries to provide shared modules, but if the shared module has already been used, a warning and the provided shared module will be ignored. The container might still use it as a fallback.</source>
          <target state="translated">コンテナは共有モジュールを提供しようとしますが、共有モジュールがすでに使用されている場合は警告が表示され、提供された共有モジュールは無視されます。コンテナはまだフォールバックとして使用するかもしれません。</target>
        </trans-unit>
        <trans-unit id="39ed83f663c2187e3c359ec8156856103f546c45" translate="yes" xml:space="preserve">
          <source>The container will manage overridable modules in a way that they do not need to be downloaded when they have been overridden by the consumer. This usually happens by placing them into separate chunks.</source>
          <target state="translated">コンテナは、オーバーライド可能なモジュールが消費者によってオーバーライドされたときにダウンロードする必要がないように管理します。これは通常、モジュールを別々のチャンクに配置することで行われます。</target>
        </trans-unit>
        <trans-unit id="2364eb772d89ad06b53d703338f09b71a5aff0a6" translate="yes" xml:space="preserve">
          <source>The content of the dll is accessible under a module prefix. i.e. with &lt;code&gt;scope = &quot;xyz&quot;&lt;/code&gt; a file &lt;code&gt;abc&lt;/code&gt; in the dll can be access via &lt;code&gt;require(&quot;xyz/abc&quot;)&lt;/code&gt;.</source>
          <target state="translated">dllのコンテンツには、モジュールプレフィックスでアクセスできます。つまり、 &lt;code&gt;scope = &quot;xyz&quot;&lt;/code&gt; すると、dll内のファイル &lt;code&gt;abc&lt;/code&gt; に &lt;code&gt;require(&quot;xyz/abc&quot;)&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="af0989a346c523d5dd22cadb4680decdbc511fe1" translate="yes" xml:space="preserve">
          <source>The content of the dll is accessible under a module prefix. i.e. with &lt;code&gt;scope = 'xyz'&lt;/code&gt; a file &lt;code&gt;abc&lt;/code&gt; in the dll can be access via &lt;code&gt;require('xyz/abc')&lt;/code&gt;.</source>
          <target state="translated">dllのコンテンツには、モジュールプレフィックスでアクセスできます。つまり、 &lt;code&gt;scope = 'xyz'&lt;/code&gt; の場合、dll内のファイル &lt;code&gt;abc&lt;/code&gt; は &lt;code&gt;require('xyz/abc')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="11ae20ea60d038bb99e3a1098b149daca67d4310" translate="yes" xml:space="preserve">
          <source>The content of the dll is mapped to the current directory. If a required file matches a file in the dll (after resolving), then the file from the dll is used instead.</source>
          <target state="translated">dllの内容はカレントディレクトリにマップされる。必要なファイルがDLL内のファイルと一致する場合(解決後)、DLLのファイルが代わりに使用される。</target>
        </trans-unit>
        <trans-unit id="708e4611472f279bbeba23fd301b7b262d8b3c33" translate="yes" xml:space="preserve">
          <source>The context module also contains some runtime logic to access the map.</source>
          <target state="translated">コンテキストモジュールには、マップにアクセスするためのランタイムロジックも含まれています。</target>
        </trans-unit>
        <trans-unit id="9b48d4374f64931e52bb9ebc1178260ec8a201fe" translate="yes" xml:space="preserve">
          <source>The coolest part of everything mentioned above, is that loading assets this way allows you to group modules and assets in a more intuitive way. Instead of relying on a global &lt;code&gt;/assets&lt;/code&gt; directory that contains everything, you can group assets with the code that uses them. For example, a structure like this can be useful:</source>
          <target state="translated">上記のすべての中で最もクールな部分は、この方法でアセットをロードすると、モジュールとアセットをより直感的な方法でグループ化できることです。すべてを含むグローバル &lt;code&gt;/assets&lt;/code&gt; ディレクトリに依存する代わりに、アセットを使用するコードでアセットをグループ化できます。たとえば、次のような構造が役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="3bb6021b3aba746e4cb4d8440fb0a5fe485718c3" translate="yes" xml:space="preserve">
          <source>The coolest part of everything mentioned above, is that loading assets this way allows you to group modules and assets together in a more intuitive way. Instead of relying on a global &lt;code&gt;/assets&lt;/code&gt; directory that contains everything, you can group assets with the code that uses them. For example, a structure like this can be very useful:</source>
          <target state="translated">上記のすべての最もクールな部分は、この方法でアセットをロードすると、モジュールとアセットをより直感的な方法でグループ化できることです。すべてを含むグローバル &lt;code&gt;/assets&lt;/code&gt; ディレクトリに依存する代わりに、アセットを使用するコードでアセットをグループ化できます。たとえば、次のような構造は非常に便利です。</target>
        </trans-unit>
        <trans-unit id="933d8380bf7e621fb0ce538df103291319e3c3b8" translate="yes" xml:space="preserve">
          <source>The current default mode is &lt;a href=&quot;https://www.npmjs.com/package/sockjs&quot;&gt;&lt;code&gt;'sockjs'&lt;/code&gt;&lt;/a&gt;. This mode uses &lt;a href=&quot;https://github.com/sockjs/sockjs-node&quot;&gt;SockJS-node&lt;/a&gt; as a server, and &lt;a href=&quot;https://www.npmjs.com/package/sockjs-client&quot;&gt;SockJS-client&lt;/a&gt; on the client.</source>
          <target state="translated">現在のデフォルトモードは&lt;a href=&quot;https://www.npmjs.com/package/sockjs&quot;&gt; &lt;code&gt;'sockjs'&lt;/code&gt; &lt;/a&gt;です。このモードでは、サーバーとして&lt;a href=&quot;https://github.com/sockjs/sockjs-node&quot;&gt;SockJSノード&lt;/a&gt;を使用し、クライアントで&lt;a href=&quot;https://www.npmjs.com/package/sockjs-client&quot;&gt;SockJSクライアント&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="28d8e8da70d2e7516d426239a1e09d1a1b27ac71" translate="yes" xml:space="preserve">
          <source>The default configuration was chosen to fit web performance best practices, but the optimal strategy for your project might differ. If you're changing the configuration, you should measure the impact of your changes to ensure there's a real benefit.</source>
          <target state="translated">デフォルトの設定は、ウェブパフォーマンスのベストプラクティスに合わせて選択されたものですが、プロジェクトに最適な戦略は異なる場合があります。構成を変更する場合は、変更の影響を測定して、実際に利益があるかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="7c6b6d9ad88f92d2a4adcce1cece50a729a0b6af" translate="yes" xml:space="preserve">
          <source>The default value can be affected by different &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デフォルト値は、さまざまな&lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt;影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="b2e84093acbe0b8b8fa8037e5115b1748d3fb127" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;true&lt;/code&gt; in webpack 4.</source>
          <target state="translated">Webpack4ではデフォルト値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f3e4f99776cfd10bf043a53e3dc62767ec7acb98" translate="yes" xml:space="preserve">
          <source>The default value is an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3b83612f6b170d039b2461a7b028c7466e3f153b" translate="yes" xml:space="preserve">
          <source>The default value of this option is depending on the &lt;code&gt;target&lt;/code&gt; setting. For more details, search for &lt;code&gt;&quot;workerChunkLoading&quot;&lt;/code&gt;: &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/config/defaults.js&quot;&gt;in the webpack defaults&lt;/a&gt;.</source>
          <target state="translated">このオプションのデフォルト値は、 &lt;code&gt;target&lt;/code&gt; 設定によって異なります。詳細については、を検索 &lt;code&gt;&quot;workerChunkLoading&quot;&lt;/code&gt; ：&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/config/defaults.js&quot;&gt;WebPACKのは、デフォルトで&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a277b5f476831566008bc5f4d942a1241cc34d01" translate="yes" xml:space="preserve">
          <source>The dependencies are necessary for webpack to understand when it needs to run recompilation on the changed files.</source>
          <target state="translated">依存関係は、変更されたファイルに対して再コンパイルを実行する必要があるときに webpack が理解するために必要です。</target>
        </trans-unit>
        <trans-unit id="a0f3744670086d967a82bcb9b8b24e02fa908f0e" translate="yes" xml:space="preserve">
          <source>The dependencies for your library will be defined by the &lt;a href=&quot;externals&quot;&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt; config.</source>
          <target state="translated">ライブラリの依存関係は、&lt;a href=&quot;externals&quot;&gt; &lt;code&gt;externals&lt;/code&gt; &lt;/a&gt;設定によって定義されます。</target>
        </trans-unit>
        <trans-unit id="e550230c9fc8a5a10bf3c0c43fb181c596afa9bd" translate="yes" xml:space="preserve">
          <source>The dependency module can be from the application code or a third party library. The resolver helps webpack find the module code that needs to be included in the bundle for every such &lt;code&gt;require&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; statement. webpack uses &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;enhanced-resolve&lt;/a&gt; to resolve file paths while bundling modules.</source>
          <target state="translated">依存関係モジュールは、アプリケーションコードまたはサードパーティのライブラリからのものです。リゾルバーは、このような &lt;code&gt;require&lt;/code&gt; / &lt;code&gt;import&lt;/code&gt; ステートメントごとに、バンドルに含める必要があるモジュールコードをwebpackが見つけるのに役立ちます。webpackは、&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;enhanced-resolve&lt;/a&gt;を使用して、モジュールをバンドルする際にファイルパスを解決します。</target>
        </trans-unit>
        <trans-unit id="e73f460edb61e6d26866d82d4c8fcf151ddf6e89" translate="yes" xml:space="preserve">
          <source>The dependency module can be from the application code or a third-party library. The resolver helps webpack find the module code that needs to be included in the bundle for every such &lt;code&gt;require&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; statement. webpack uses &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;enhanced-resolve&lt;/a&gt; to resolve file paths while bundling modules.</source>
          <target state="translated">依存関係モジュールは、アプリケーションコードまたはサードパーティライブラリから取得できます。リゾルバーは、webpackがそのような &lt;code&gt;require&lt;/code&gt; / &lt;code&gt;import&lt;/code&gt; ステートメントごとにバンドルに含める必要のあるモジュールコードを見つけるのに役立ちます。webpackは、&lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;拡張解決&lt;/a&gt;を使用して、モジュールのバンドル中にファイルパスを解決します。</target>
        </trans-unit>
        <trans-unit id="8d540fc23da7657e0a52f955d13989f2f80069e5" translate="yes" xml:space="preserve">
          <source>The deprecated webpack 1 constructor &lt;code&gt;new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)&lt;/code&gt; is no longer supported. Use a corresponding options object instead.</source>
          <target state="translated">非推奨のwebpack 1コンストラクター &lt;code&gt;new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)&lt;/code&gt; はサポートされなくなりました。代わりに、対応するオプションオブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="aaab335bd8539ddd56eb0154bbbbdd3a57ab1fc0" translate="yes" xml:space="preserve">
          <source>The dev-server makes use of the powerful &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; package. Check out its &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;documentation&lt;/a&gt; for more advanced usages. Note that some of &lt;code&gt;http-proxy-middleware&lt;/code&gt;'s features do not require a &lt;code&gt;target&lt;/code&gt; key, e.g. its &lt;code&gt;router&lt;/code&gt; feature, but you will still need to include a &lt;code&gt;target&lt;/code&gt; key in your configuration here, otherwise &lt;code&gt;webpack-dev-server&lt;/code&gt; won't pass it along to &lt;code&gt;http-proxy-middleware&lt;/code&gt;).</source>
          <target state="translated">dev-serverは、強力な&lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt;パッケージを利用します。より高度な使用法については、&lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;ドキュメント&lt;/a&gt;を確認してください。なお、一部の &lt;code&gt;http-proxy-middleware&lt;/code&gt; の機能は必要ありません &lt;code&gt;target&lt;/code&gt; 、例えばそのキーを &lt;code&gt;router&lt;/code&gt; 機能が、あなたはまだ含める必要があります &lt;code&gt;target&lt;/code&gt; そうでない場合は、ここにあなたの構成内の鍵を &lt;code&gt;webpack-dev-server&lt;/code&gt; それを渡しません &lt;code&gt;http-proxy-middleware&lt;/code&gt; に沿って）。</target>
        </trans-unit>
        <trans-unit id="72453a9bde8a4946f5cce2f9940ffc13f8a61a43" translate="yes" xml:space="preserve">
          <source>The dev-server makes use of the powerful &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; package. Checkout its &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;documentation&lt;/a&gt; for more advanced usages.</source>
          <target state="translated">開発サーバーは、強力な&lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt;パッケージを利用します。より高度な使用法については、その&lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;ドキュメント&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="6ff0c0bd95cbb9d226a93e472ae5eebbebdf485b" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;maxAsyncSize&lt;/code&gt; and &lt;code&gt;maxSize&lt;/code&gt; is that &lt;code&gt;maxAsyncSize&lt;/code&gt; will only affect on-demand loading chunks.</source>
          <target state="translated">&lt;code&gt;maxAsyncSize&lt;/code&gt; と &lt;code&gt;maxSize&lt;/code&gt; の違いは、 &lt;code&gt;maxAsyncSize&lt;/code&gt; がオンデマンドの読み込みチャンクにのみ影響することです。</target>
        </trans-unit>
        <trans-unit id="808e96d4b904728e7f3fc410be4e4569724e0dda" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;maxInitialSize&lt;/code&gt; and &lt;code&gt;maxSize&lt;/code&gt; is that &lt;code&gt;maxInitialSize&lt;/code&gt; will only affect initial load chunks.</source>
          <target state="translated">&lt;code&gt;maxInitialSize&lt;/code&gt; と &lt;code&gt;maxSize&lt;/code&gt; の違いは、 &lt;code&gt;maxInitialSize&lt;/code&gt; は初期ロードチャンクにのみ影響することです。</target>
        </trans-unit>
        <trans-unit id="6c18a4469d6bbf0544a03a7f1589a9b97bc3e787" translate="yes" xml:space="preserve">
          <source>The enabled rules for minimizing by default are the following ones:</source>
          <target state="translated">デフォルトで有効になっている最小化のルールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bd76b56f90cc7ad0a0f72461fe52bce7d07a8517" translate="yes" xml:space="preserve">
          <source>The encoding to use when generating the hash, defaults to &lt;code&gt;'hex'&lt;/code&gt;. All encodings from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest&lt;/code&gt;&lt;/a&gt; are supported. Using &lt;code&gt;'base64'&lt;/code&gt; for filenames might be problematic since it has the character &lt;code&gt;/&lt;/code&gt; in its alphabet. Likewise &lt;code&gt;'latin1'&lt;/code&gt; could contain any character.</source>
          <target state="translated">ハッシュを生成するときに使用するエンコーディング。デフォルトは &lt;code&gt;'hex'&lt;/code&gt; です。Node.JSの&lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest&lt;/code&gt; &lt;/a&gt;からのすべてのエンコーディングがサポートされています。ファイル名に &lt;code&gt;'base64'&lt;/code&gt; を使用すると、アルファベットに &lt;code&gt;/&lt;/code&gt; が含まれるため、問題が発生する可能性があります。同様に、 &lt;code&gt;'latin1'&lt;/code&gt; は任意の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="31e9d5b8ee6a480f19671a36d4f4067621c60dfd" translate="yes" xml:space="preserve">
          <source>The encoding to use when generating the hash. All encodings from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest&lt;/code&gt;&lt;/a&gt; are supported. Using &lt;code&gt;'base64'&lt;/code&gt; for filenames might be problematic since it has the character &lt;code&gt;/&lt;/code&gt; in its alphabet. Likewise &lt;code&gt;'latin1'&lt;/code&gt; could contain any character.</source>
          <target state="translated">ハッシュを生成するときに使用するエンコーディング。Node.JSの&lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest&lt;/code&gt; &lt;/a&gt;からのすべてのエンコーディングがサポートされています。ファイル名に &lt;code&gt;'base64'&lt;/code&gt; を使用すると、アルファベットに &lt;code&gt;/&lt;/code&gt; が含まれるため、問題が発生する可能性があります。同様に、 &lt;code&gt;'latin1'&lt;/code&gt; は任意の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="b02a1c64523524bd6887bba721827df362037305" translate="yes" xml:space="preserve">
          <source>The entries chunks are decorated to form a library &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">エントリのチャンクは、タイプ &lt;code&gt;type&lt;/code&gt; のライブラリ &lt;code&gt;name&lt;/code&gt; を形成するように装飾されています。</target>
        </trans-unit>
        <trans-unit id="f6cf3d762c8a748dfe2b4b1ed7cec7a292cb77cb" translate="yes" xml:space="preserve">
          <source>The entry object is where webpack looks to start building the bundle. The context is an absolute string to the directory that contains the entry files.</source>
          <target state="translated">エントリオブジェクトは、webpack がバンドルの構築を開始する場所です。コンテキストは、エントリファイルを含むディレクトリへの絶対文字列です。</target>
        </trans-unit>
        <trans-unit id="435f9882df580a04c2a3e7ec98307219f22e1c02" translate="yes" xml:space="preserve">
          <source>The entry point(s) of your application e.g. &lt;code&gt;./src/main.js&lt;/code&gt;</source>
          <target state="translated">アプリケーションのエントリポイント（例： &lt;code&gt;./src/main.js&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d539779f73e35e879cabf3d6e5714e7a6309bc7b" translate="yes" xml:space="preserve">
          <source>The errors found will always be emitted, to disable set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0607d4a03e47e5ea4019d6170f114d90e541894a" translate="yes" xml:space="preserve">
          <source>The example above will create a &lt;code&gt;lib.js&lt;/code&gt; and &lt;code&gt;lib.node.js&lt;/code&gt; file in your &lt;code&gt;dist&lt;/code&gt; folder.</source>
          <target state="translated">上記の例では、 &lt;code&gt;dist&lt;/code&gt; フォルダーに &lt;code&gt;lib.js&lt;/code&gt; および &lt;code&gt;lib.node.js&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="550fb5db8af67f8ea949e6d036a7d750562bb809" translate="yes" xml:space="preserve">
          <source>The example above will only give you performance hints based on &lt;code&gt;.js&lt;/code&gt; files.</source>
          <target state="translated">上記の例は、 &lt;code&gt;.js&lt;/code&gt; ファイルに基づくパフォーマンスのヒントのみを提供します。</target>
        </trans-unit>
        <trans-unit id="3db532cae8766ac1f04fe8609540dcabd0918362" translate="yes" xml:space="preserve">
          <source>The examples below describe how webpack's configuration can be both expressive and configurable because &lt;em&gt;it is code&lt;/em&gt;:</source>
          <target state="translated">以下の例では、webpackの構成&lt;em&gt;がコードである&lt;/em&gt;ため、表現力と構成性の両方を実現する方法について説明し&lt;em&gt;ています&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8cd99ede41e0d24db8a2e291b6738350a5b14058" translate="yes" xml:space="preserve">
          <source>The examples in this guide stem from &lt;a href=&quot;getting-started&quot;&gt;getting started&lt;/a&gt;, &lt;a href=&quot;output-management&quot;&gt;output management&lt;/a&gt; and &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;.</source>
          <target state="translated">このガイドの例は、&lt;a href=&quot;getting-started&quot;&gt;開始&lt;/a&gt;、&lt;a href=&quot;output-management&quot;&gt;出力管理&lt;/a&gt;、および&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割に基づいてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2e118d1734b9ca216adaa508bfc0d9a7da7241a5" translate="yes" xml:space="preserve">
          <source>The exported function has 3 properties: &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">エクスポートされた関数には、 &lt;code&gt;resolve&lt;/code&gt; 、 &lt;code&gt;keys&lt;/code&gt; 、 &lt;code&gt;id&lt;/code&gt; の 3つのプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="50bd1bd96b003419b47ab5f8f8c1b4340c19dce1" translate="yes" xml:space="preserve">
          <source>The extensions/suffixes that are used when resolving loaders. Since version two, we &lt;a href=&quot;https://webpack.js.org/migrate/3/#automatic--loader-module-name-extension-removed&quot;&gt;strongly recommend&lt;/a&gt; using the full name, e.g. &lt;code&gt;example-loader&lt;/code&gt;, as much as possible for clarity. However, if you really wanted to exclude the &lt;code&gt;-loader&lt;/code&gt; bit, i.e. just use &lt;code&gt;example&lt;/code&gt;, you can use this option to do so:</source>
          <target state="translated">ローダーを解決するときに使用される拡張子/サフィックス。バージョン2以降、わかりやすくするために、できるだけフルネーム（ &lt;code&gt;example-loader&lt;/code&gt; など)を使用することを&lt;a href=&quot;https://webpack.js.org/migrate/3/#automatic--loader-module-name-extension-removed&quot;&gt;強くお勧め&lt;/a&gt;します。ただし、本当に &lt;code&gt;-loader&lt;/code&gt; ビットを除外したい場合、つまり &lt;code&gt;example&lt;/code&gt; を使用したい場合は、次のオプションを使用してこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="389b350eb8413c4a925b5a6a40afccde32eca5c0" translate="yes" xml:space="preserve">
          <source>The extensions/suffixes which that are used when resolving loaders. Since version two, we &lt;a href=&quot;../guides/migrating#automatic-loader-module-name-extension-removed&quot;&gt;strongly recommend&lt;/a&gt; using the full name, e.g. &lt;code&gt;example-loader&lt;/code&gt;, as much as possible for clarity. However, if you really wanted to exclude the &lt;code&gt;-loader&lt;/code&gt; bit, i.e. just use &lt;code&gt;example&lt;/code&gt;, you can use this option to do so:</source>
          <target state="translated">ローダーを解決するときに使用される拡張子/サフィックス。バージョン2以降、わかりやすくするために、可能な限り完全な名前、たとえば &lt;code&gt;example-loader&lt;/code&gt; を使用することを&lt;a href=&quot;../guides/migrating#automatic-loader-module-name-extension-removed&quot;&gt;強くお勧め&lt;/a&gt;します。ただし、本当に &lt;code&gt;-loader&lt;/code&gt; ビットを除外する場合、つまり単に &lt;code&gt;example&lt;/code&gt; を使用する場合は、このオプションを使用してそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="794aa4e261a7c6a0554650d5905cee89cc73cfa7" translate="yes" xml:space="preserve">
          <source>The extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the &lt;a href=&quot;file-loader&quot;&gt;file-loader&lt;/a&gt; to emit the extract-loader's result as separate file.</source>
          <target state="translated">抽出ローダーは、指定されたソースコードをその場で評価し、結果を文字列として返します。その主な使用例は、それぞれのローダーからのHTMLおよびCSS内のURLを解決することです。&lt;a href=&quot;file-loader&quot;&gt;ファイルローダー&lt;/a&gt;を使用して、抽出ローダーの結果を別のファイルとして出力します。</target>
        </trans-unit>
        <trans-unit id="453084e89f5428bcc7e5ed45107b51b910c05098" translate="yes" xml:space="preserve">
          <source>The extract-loader works similar to the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the &lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt; or the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;. Thus it might not work in other situations.</source>
          <target state="translated">extract-loaderは&lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt;と同様に機能し、それに代わる無駄のない手段として意図されています。ソースコードを評価するときに、&lt;a href=&quot;html-loader&quot;&gt;html&lt;/a&gt;または&lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;によって生成されたコードに対処するために特に設計された偽のコンテキストが提供されます。したがって、他の状況では機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="f0e83cedb787e8fdb96980744feaad893d123b30" translate="yes" xml:space="preserve">
          <source>The extract-loader works similar to the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; and the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the &lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt; or the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;. Thus it might not work in other situations.</source>
          <target state="translated">extract-loaderは、&lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt;および&lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt;と同様に機能し、それに対する無駄のない代替手段として意図されています。ソースコードを評価するとき、それは&lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt;または&lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;によって生成されたコードに対処するために特別に設計された偽のコンテキストを提供します。したがって、他の状況では機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="16d5d63de6fda830696b84c6adce09e4cc8d99c4" translate="yes" xml:space="preserve">
          <source>The fallback loader will receive the same configuration options as url-loader.</source>
          <target state="translated">フォールバックローダーは、 url-ローダーと同じ設定オプションを受け取ります。</target>
        </trans-unit>
        <trans-unit id="0795b4e5fc07744afbf074537a8f64cce79c5701" translate="yes" xml:space="preserve">
          <source>The file extension is then resolved in a similar way using the &lt;a href=&quot;../configuration/resolve#resolveextensions&quot;&gt;&lt;code&gt;resolve.extensions&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">次に、ファイル拡張子は、&lt;a href=&quot;../configuration/resolve#resolveextensions&quot;&gt; &lt;code&gt;resolve.extensions&lt;/code&gt; &lt;/a&gt;オプションを使用して同様の方法で解決されます。</target>
        </trans-unit>
        <trans-unit id="24a12e3645cc54e3f1d24478d16f98c7ce1b82c6" translate="yes" xml:space="preserve">
          <source>The file extension is then resolved in a similar way using the &lt;code&gt;resolve.extensions&lt;/code&gt; option.</source>
          <target state="translated">ファイル拡張子は、 &lt;code&gt;resolve.extensions&lt;/code&gt; オプションを使用して同様の方法で解決されます。</target>
        </trans-unit>
        <trans-unit id="19c2603ed5d45d2ba7f1dcca02a02345da1c6750" translate="yes" xml:space="preserve">
          <source>The file extension of the target file/resource.</source>
          <target state="translated">対象となるファイル/リソースのファイル拡張子。</target>
        </trans-unit>
        <trans-unit id="8117b59c7f4e6ea23fdb3229936a65a8a033880e" translate="yes" xml:space="preserve">
          <source>The file is requested when you require the &lt;code&gt;bundle-loader&lt;/code&gt;. If you want it to request it lazy, use:</source>
          <target state="translated">&lt;code&gt;bundle-loader&lt;/code&gt; が必要なときにファイルが要求されます。遅延を要求する場合は、次を使用します。</target>
        </trans-unit>
        <trans-unit id="66e51225d686d671805bbc321a2ba8d33de15225" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Can be either a &lt;code&gt;{String}&lt;/code&gt; or a &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;}&lt;/code&gt;, which will be given the original filename. Default is to append the suffix &lt;code&gt;.LICENSE&lt;/code&gt; to the original filename</source>
          <target state="translated">抽出されたコメントが保存されるファイル。 &lt;code&gt;{String}&lt;/code&gt; または &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;}&lt;/code&gt; いずれかで、元のファイル名が与えられます。デフォルトでは、サフィックス &lt;code&gt;.LICENSE&lt;/code&gt; を元のファイル名に追加します</target>
        </trans-unit>
        <trans-unit id="1a52d902ede779f8aedcefceb6c5761fd37addf5" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Default is to append the suffix &lt;code&gt;.LICENSE.txt&lt;/code&gt; to the original filename.</source>
          <target state="translated">抽出されたコメントが保存されるファイル。デフォルトでは、元のファイル名に接尾辞 &lt;code&gt;.LICENSE.txt&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="5c0ad8e4b7dc560580c3d7f3e7a9b350ee96549f" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Default is to append the suffix &lt;code&gt;.LICENSE&lt;/code&gt; to the original filename.</source>
          <target state="translated">抽出されたコメントが保存されるファイル。デフォルトでは、元のファイル名に接尾辞 &lt;code&gt;.LICENSE&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="2abdea845896b85bb089325305fabc74a5095e89" translate="yes" xml:space="preserve">
          <source>The filename of entry chunks for web workers</source>
          <target state="translated">ウェブワーカーのためのエントリーチャンクのファイル名</target>
        </trans-unit>
        <trans-unit id="4a61f3dd6517c4ea22c5343ab7602963b88540b1" translate="yes" xml:space="preserve">
          <source>The filename of entry chunks for web workers.</source>
          <target state="translated">ウェブワーカーのエントリーチャンクのファイル名。</target>
        </trans-unit>
        <trans-unit id="ffd056b174ffe8ad630fac5041d1b37b9de42730" translate="yes" xml:space="preserve">
          <source>The filename of non-entry chunks for web workers</source>
          <target state="translated">ウェブワーカー用の非エントリーチャンクのファイル名</target>
        </trans-unit>
        <trans-unit id="2042f0e861e377e9088f09df08ad3f19a4353d4a" translate="yes" xml:space="preserve">
          <source>The filename of non-entry chunks for web workers.</source>
          <target state="translated">ウェブワーカー用の非エントリーチャンクのファイル名。</target>
        </trans-unit>
        <trans-unit id="42691448a39272a04c7623d4ac9237529f167323" translate="yes" xml:space="preserve">
          <source>The filename that is considered the index file.</source>
          <target state="translated">インデックスファイルとみなされるファイル名。</target>
        </trans-unit>
        <trans-unit id="6265cd364a45ae95000867ee2a076cb217cff18f" translate="yes" xml:space="preserve">
          <source>The filename to be used while resolving directories.</source>
          <target state="translated">ディレクトリを解決する際に使用するファイル名。</target>
        </trans-unit>
        <trans-unit id="9a7fe9404151c99b0fe504095a9cff5fbb57d21c" translate="yes" xml:space="preserve">
          <source>The filename to be used while resolving directories. Default:</source>
          <target state="translated">ディレクトリを解決するときに使われるファイル名。デフォルト。</target>
        </trans-unit>
        <trans-unit id="4675b7019de2215d025f035289f9016a1f62a783" translate="yes" xml:space="preserve">
          <source>The final location of the cache is a combination of &lt;code&gt;cache.cacheDirectory&lt;/code&gt; + &lt;code&gt;cache.name&lt;/code&gt;.</source>
          <target state="translated">キャッシュの最終的な場所は、 &lt;code&gt;cache.cacheDirectory&lt;/code&gt; + &lt;code&gt;cache.name&lt;/code&gt; の組み合わせです。</target>
        </trans-unit>
        <trans-unit id="1adb1b5390fbdfac478c72a15607cdb2748376e0" translate="yes" xml:space="preserve">
          <source>The first and last are expected -- it's the &lt;code&gt;vendor&lt;/code&gt; hash we want to fix. Luckily, there are two plugins we can use to resolve this issue. The first is the &lt;code&gt;NamedModulesPlugin&lt;/code&gt;, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the &lt;a href=&quot;../plugins/hashed-module-ids-plugin&quot;&gt;&lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt;&lt;/a&gt;, which is recommended for production builds:</source>
          <target state="translated">最初と最後が予想されます- 修正したい &lt;code&gt;vendor&lt;/code&gt; ハッシュです。幸い、この問題を解決するために使用できるプラグインが2つあります。1つは &lt;code&gt;NamedModulesPlugin&lt;/code&gt; で、数値識別子ではなくモジュールへのパスを使用します。このプラグインは、開発中に出力を読みやすくするのに役立ちますが、実行に少し時間がかかります。2番目のオプションは&lt;a href=&quot;../plugins/hashed-module-ids-plugin&quot;&gt; &lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt; で&lt;/a&gt;、本番ビルドで推奨されます。</target>
        </trans-unit>
        <trans-unit id="bd39890da8b625a8684975fbf6349927a2721a8e" translate="yes" xml:space="preserve">
          <source>The first and last are expected, it's the &lt;code&gt;vendor&lt;/code&gt; hash we want to fix. Let's use &lt;a href=&quot;../configuration/optimization#optimizationmoduleids&quot;&gt;&lt;code&gt;optimization.moduleIds&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;'deterministic'&lt;/code&gt; option:</source>
          <target state="translated">最初と最後が予想されます。修正したいのは &lt;code&gt;vendor&lt;/code&gt; ハッシュです。 &lt;code&gt;'deterministic'&lt;/code&gt; オプションで&lt;a href=&quot;../configuration/optimization#optimizationmoduleids&quot;&gt; &lt;code&gt;optimization.moduleIds&lt;/code&gt; &lt;/a&gt;を使用しましょう：</target>
        </trans-unit>
        <trans-unit id="285df81918288a75eff9819c28e80e90c6e6647c" translate="yes" xml:space="preserve">
          <source>The first argument must be an &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">最初の引数は &lt;code&gt;Error&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; でなければなりません</target>
        </trans-unit>
        <trans-unit id="6baa2b9c23677a35073f9bdacb05028ae17a78b5" translate="yes" xml:space="preserve">
          <source>The first argument of the &lt;code&gt;webpack.DefinePlugin.runtimeValue&lt;/code&gt; is a &lt;code&gt;function&lt;/code&gt; that should return the value to be assigned to the definition.</source>
          <target state="translated">&lt;code&gt;webpack.DefinePlugin.runtimeValue&lt;/code&gt; の最初の引数は、定義に割り当てられる値を返す必要がある &lt;code&gt;function&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5d624090a9474a6049647db4976a8af625747830" translate="yes" xml:space="preserve">
          <source>The first loader is passed one argument: the content of the resource file. The compiler expects a result from the last loader. The result should be a &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Buffer&lt;/code&gt; (which is converted to a string), representing the JavaScript source code of the module. An optional SourceMap result (as JSON object) may also be passed.</source>
          <target state="translated">最初のローダーには、リソースファイルのコンテンツという1つの引数が渡されます。コンパイラーは、最後のローダーからの結果を予期します。結果がなければならない &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;Buffer&lt;/code&gt; モジュールのJavaScriptソースコードを表す、（文字列に変換されます）。オプションのSourceMap結果（JSONオブジェクトとして）も渡すことができます。</target>
        </trans-unit>
        <trans-unit id="08210d6a93346bbd17560e1fcb340926b15ad7a1" translate="yes" xml:space="preserve">
          <source>The first loader is passed one argument: the content of the resource file. The compiler expects a result from the last loader. The result should be a &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Buffer&lt;/code&gt; (which is converted to a string), representing the JavaScript source code of the module. An optional SourceMap result (as a JSON object) may also be passed.</source>
          <target state="translated">最初のローダーには、リソースファイルの内容という1つの引数が渡されます。コンパイラーは、最後のローダーからの結果を期待します。結果がなければならない &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;Buffer&lt;/code&gt; モジュールのJavaScriptソースコードを表す、（文字列に変換されます）。オプションのSourceMap結果（JSONオブジェクトとして）も渡される場合があります。</target>
        </trans-unit>
        <trans-unit id="526e4cbb061a7ecff58a71d4a1abe32510b836e6" translate="yes" xml:space="preserve">
          <source>The first of these two points is definitely an issue for our example, as &lt;code&gt;lodash&lt;/code&gt; is also imported within &lt;code&gt;./src/index.js&lt;/code&gt; and will thus be duplicated in both bundles. Let's remove this duplication by using the &lt;code&gt;SplitChunks&lt;/code&gt; plugin.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; も &lt;code&gt;./src/index.js&lt;/code&gt; 内にインポートされ、両方のバンドルで複製されるため、これら2つのポイントの最初の点は、この例では間違いなく問題です。 &lt;code&gt;SplitChunks&lt;/code&gt; プラグインを使用して、この重複を削除しましょう。</target>
        </trans-unit>
        <trans-unit id="146764a0b36866667a031a8325e9976afc652767" translate="yes" xml:space="preserve">
          <source>The first of these two points is definitely an issue for our example, as &lt;code&gt;lodash&lt;/code&gt; is also imported within &lt;code&gt;./src/index.js&lt;/code&gt; and will thus be duplicated in both bundles. Let's remove this duplication in next section.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; も &lt;code&gt;./src/index.js&lt;/code&gt; 内にインポートされ、両方のバンドルに複製されるため、これら2つのポイントの最初の点はこの例では間違いなく問題です。次のセクションでこの重複を削除しましょう。</target>
        </trans-unit>
        <trans-unit id="7d9234d6eea4d64eafd089788ed4bb6c494468bd" translate="yes" xml:space="preserve">
          <source>The first parameter of the tap method of the compiler hook should be a camelized version of the plugin name. It is advisable to use a constant for this so it can be reused in all hooks.</source>
          <target state="translated">コンパイラフックの tap メソッドの最初のパラメータは、プラグイン名の camelized バージョンでなければなりません。すべてのフックで再利用できるように、これには定数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bf141e95df1de73d45323ec796f1723e3a9413bb" translate="yes" xml:space="preserve">
          <source>The folder of the resource is in.</source>
          <target state="translated">リソースのフォルダにあります。</target>
        </trans-unit>
        <trans-unit id="093e10ad7457afb67646ecdc23d37c05d5f7c2a2" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;EnvironmentPlugin&lt;/code&gt; configuration provides &lt;code&gt;process.env.GIT_VERSION&lt;/code&gt; (such as &quot;v5.4.0-2-g25139f57f&quot;) and &lt;code&gt;process.env.GIT_AUTHOR_DATE&lt;/code&gt; (such as &quot;2020-11-04T12:25:16+01:00&quot;) corresponding to the last Git commit of the repository:</source>
          <target state="translated">次の &lt;code&gt;EnvironmentPlugin&lt;/code&gt; 構成は、に対応する &lt;code&gt;process.env.GIT_VERSION&lt;/code&gt; （ &quot;v5.4.0-2-g25139f57f&quot;など）および &lt;code&gt;process.env.GIT_AUTHOR_DATE&lt;/code&gt; （ &quot;2020-11-04T12：25：16 + 01：00&quot;など）を提供します。リポジトリの最後のGitコミット：</target>
        </trans-unit>
        <trans-unit id="4ef7ab2fdbe131166ce0f45896431e42dc48f933" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;webpack.config.js&lt;/code&gt; can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as &lt;a href=&quot;https://tools.ietf.org/html/rfc2397&quot;&gt;Data URLs&lt;/a&gt; and copy larger files to the output directory.</source>
          <target state="translated">次の &lt;code&gt;webpack.config.js&lt;/code&gt; は、CSSファイルを読み込み、小さなPNG / JPG / GIF / SVG画像とフォントを&lt;a href=&quot;https://tools.ietf.org/html/rfc2397&quot;&gt;データURL&lt;/a&gt;として埋め込み、大きなファイルを出力ディレクトリにコピーできます。</target>
        </trans-unit>
        <trans-unit id="e09c768c657b45613fcdaaddfbfe084cc9e39dd6" translate="yes" xml:space="preserve">
          <source>The following NPM installation will make &lt;code&gt;webpack&lt;/code&gt; available globally:</source>
          <target state="translated">次のNPMインストールは、 &lt;code&gt;webpack&lt;/code&gt; をグローバルに利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="c50610b612001be3f0b94e2290089629c37f4acd" translate="yes" xml:space="preserve">
          <source>The following Node.js options configure whether to polyfill or mock certain &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.js globals&lt;/a&gt;.</source>
          <target state="translated">次のNode.jsオプションは、特定の&lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.jsグローバル&lt;/a&gt;をポリフィルするかモックするかを構成します。</target>
        </trans-unit>
        <trans-unit id="e57f2c4591b00f570d0a42bac7dba6e81f6332bc" translate="yes" xml:space="preserve">
          <source>The following approach will not work either:</source>
          <target state="translated">以下のような方法では、どちらもうまくいきません。</target>
        </trans-unit>
        <trans-unit id="3a2f57e1f4b8865d88e8bbdcf153e1450567e0da" translate="yes" xml:space="preserve">
          <source>The following article will walk through both of these use cases.</source>
          <target state="translated">次の記事では、この2つのユースケースについて解説します。</target>
        </trans-unit>
        <trans-unit id="678973c41a6b79f5b722e9b40c1f281d633c89b0" translate="yes" xml:space="preserve">
          <source>The following best practices should help whether or not you are in &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; or building for &lt;a href=&quot;production&quot;&gt;production&lt;/a&gt;.</source>
          <target state="translated">次のベストプラクティスは、&lt;a href=&quot;development&quot;&gt;開発中&lt;/a&gt;または&lt;a href=&quot;production&quot;&gt;本番&lt;/a&gt;用に構築しているかどうかに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b7eeb221fe638ecee1d71399a6f741d2113bd296" translate="yes" xml:space="preserve">
          <source>The following best practices should help, whether you're running build scripts in &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; or &lt;a href=&quot;production&quot;&gt;production&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;development&quot;&gt;開発&lt;/a&gt;または&lt;a href=&quot;production&quot;&gt;本番&lt;/a&gt;でビルドスクリプトを実行しているかどうかに関係なく、次のベストプラクティスが役立ちます。</target>
        </trans-unit>
        <trans-unit id="bd3d71fbc90b4965eee8e8c2d91c6a81f72260f9" translate="yes" xml:space="preserve">
          <source>The following code would exclude source maps for any modules in the &lt;code&gt;vendor.js&lt;/code&gt; bundle:</source>
          <target state="translated">次のコードは、 &lt;code&gt;vendor.js&lt;/code&gt; バンドルのモジュールのソースマップを除外します。</target>
        </trans-unit>
        <trans-unit id="4bae8bd33f64798315f4b9a7a6fa6f94f186c42d" translate="yes" xml:space="preserve">
          <source>The following conditions are set depending on the target environment:</source>
          <target state="translated">対象環境に応じて以下の条件を設定しています。</target>
        </trans-unit>
        <trans-unit id="7ae433e95547aea5875cdefe77fda4e1fe0fbe74" translate="yes" xml:space="preserve">
          <source>The following conditions are set depending on which tool preprocesses the source code.</source>
          <target state="translated">どのツールがソースコードを前処理するかによって、以下の条件が設定されます。</target>
        </trans-unit>
        <trans-unit id="28d00fabb2a8570ca16641499e5ae03d6dbd6dd6" translate="yes" xml:space="preserve">
          <source>The following conditions are set for various optimizations:</source>
          <target state="translated">各種最適化には以下の条件が設定されています。</target>
        </trans-unit>
        <trans-unit id="82ad836ded4b99729d81a979590b01af6ca4f2c8" translate="yes" xml:space="preserve">
          <source>The following configuration disables automatic per-file runtime injection in Babel, requiring &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; instead and making all helper references use it.</source>
          <target state="translated">次の構成では、Babelでのファイルごとの自動ランタイムインジェクションが無効になり、代わりに &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; になり、すべてのヘルパー参照で使用されるようになります。</target>
        </trans-unit>
        <trans-unit id="8709f36c191d4f117275510a4bc1f38092fe4b33" translate="yes" xml:space="preserve">
          <source>The following configuration disables automatic per-file runtime injection in babel, instead requiring &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; and making all helper references use it.</source>
          <target state="translated">次の構成では、babelでのファイルごとの自動ランタイムインジェクションを無効にします。代わりに、 &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; を要求して、すべてのヘルパー参照で使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="8fe90b1288f44498fb756129bc5a0a2af786bb67" translate="yes" xml:space="preserve">
          <source>The following configurations are supported:</source>
          <target state="translated">以下の構成に対応しています。</target>
        </trans-unit>
        <trans-unit id="b13725a6ae447ef21a0afad19188e76009a3e8cf" translate="yes" xml:space="preserve">
          <source>The following examples below describe how webpack's configuration object can be both expressive and configurable because &lt;em&gt;it is code&lt;/em&gt;:</source>
          <target state="translated">以下の例は、webpackの構成オブジェクト&lt;em&gt;がコードである&lt;/em&gt;ため、表現力と構成可能性の両方を実現する方法を示し&lt;em&gt;ています&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d845fb6e558a229ab97eb2a6aba515891d721d5b" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate a few ways this plugin can be used.</source>
          <target state="translated">以下の例は、このプラグインを使用する方法をいくつか示しています。</target>
        </trans-unit>
        <trans-unit id="26f4af435cad2a96ac6af4b806fbcad458532c0d" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate some common use cases for this plugin.</source>
          <target state="translated">以下の例は、このプラグインの一般的な使用例を示しています。</target>
        </trans-unit>
        <trans-unit id="1849f61df45d0162d9079faaf0c67c7edbd85004" translate="yes" xml:space="preserve">
          <source>The following examples show how one might use &lt;code&gt;file-loader&lt;/code&gt; and what the result would be.</source>
          <target state="translated">次の例は、 &lt;code&gt;file-loader&lt;/code&gt; 使用方法とその結果を示しています。</target>
        </trans-unit>
        <trans-unit id="68b1d67823b044c93381d7264c1cf2ace34ecaeb" translate="yes" xml:space="preserve">
          <source>The following examples show how to use &lt;code&gt;file-loader&lt;/code&gt; for CDN uses query params.</source>
          <target state="translated">次の例は、CDNがクエリパラメータを使用するために &lt;code&gt;file-loader&lt;/code&gt; を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="44d44bb2f64a1979b129bd0f1ec4f5b13fc76e58" translate="yes" xml:space="preserve">
          <source>The following hooks report progress information to &lt;code&gt;ProgressPlugin&lt;/code&gt;.</source>
          <target state="translated">次のフックは、進行状況情報を &lt;code&gt;ProgressPlugin&lt;/code&gt; に報告します。</target>
        </trans-unit>
        <trans-unit id="c40477b0ccf58dde30ff4d3095e2b4524b76a06f" translate="yes" xml:space="preserve">
          <source>The following import statement will trigger the hook once:</source>
          <target state="translated">次のインポート文でフックが一回トリガーされます。</target>
        </trans-unit>
        <trans-unit id="3103956137f2ddc4a8ea8dd89ac9999002f056f3" translate="yes" xml:space="preserve">
          <source>The following import statement will trigger the hook twice:</source>
          <target state="translated">次の import 文はフックを 2 回トリガーします。</target>
        </trans-unit>
        <trans-unit id="a052f6a1445904f054ec0a6caedf2123b8ca8e0e" translate="yes" xml:space="preserve">
          <source>The following lifecycle hooks are exposed by the &lt;code&gt;compiler&lt;/code&gt; and can be accessed as such:</source>
          <target state="translated">次のライフサイクルフックは &lt;code&gt;compiler&lt;/code&gt; によって公開され、そのようにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a0b945c38650ddf7d6afcf4290fc738ecb312a93" translate="yes" xml:space="preserve">
          <source>The following lifecycle hooks are exposed by the &lt;code&gt;parser&lt;/code&gt; and can be accessed as such:</source>
          <target state="translated">次のライフサイクルフックは &lt;code&gt;parser&lt;/code&gt; によって公開され、そのようにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d72a562a0b2950b13a0175ee7b8eb0439c9a57b5" translate="yes" xml:space="preserve">
          <source>The following methods are supported...</source>
          <target state="translated">以下の方法がサポートされています...</target>
        </trans-unit>
        <trans-unit id="e4d77afab2cb5c0e79177397fed4c21c74e5e9f3" translate="yes" xml:space="preserve">
          <source>The following options are accepted:</source>
          <target state="translated">以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="c50a926ca6ac44ce44b0b0c4408cf022677665b6" translate="yes" xml:space="preserve">
          <source>The following options are ideal for development:</source>
          <target state="translated">開発には以下のようなオプションが最適です。</target>
        </trans-unit>
        <trans-unit id="d84d03f469cd5c6bd18b7e42fd7802b60d6ad892" translate="yes" xml:space="preserve">
          <source>The following options are not ideal for development nor production. They are needed for some special cases, i. e. for some 3rd party tools.</source>
          <target state="translated">以下のオプションは、開発や生産には理想的ではありません。これらのオプションは、いくつかの特別なケース、つまりサードパーティ製のツールのために必要です。</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="translated">以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="df764edfdfccdeb5073770c5372a6d62f6fea17c" translate="yes" xml:space="preserve">
          <source>The following parameters are supported in the order specified above:</source>
          <target state="translated">上記で指定した順に以下のパラメータがサポートされています。</target>
        </trans-unit>
        <trans-unit id="f0dd5a0b610e80f1bc7f0e825cff0c25a34dce73" translate="yes" xml:space="preserve">
          <source>The following pseudo JavaScript explains the algorithm:</source>
          <target state="translated">以下、疑似的なJavaScriptでアルゴリズムを説明します。</target>
        </trans-unit>
        <trans-unit id="b78ac2bb7487b9b97617ca300f935d78befc5713" translate="yes" xml:space="preserve">
          <source>The following sections provide some basic examples of the different types of loaders. Note that the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; parameters are optional, see &lt;a href=&quot;#thiscallback&quot;&gt;&lt;code&gt;this.callback&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">次のセクションでは、さまざまなタイプのローダーの基本的な例をいくつか示します。 &lt;code&gt;map&lt;/code&gt; パラメータと &lt;code&gt;meta&lt;/code&gt; パラメータはオプションであることに注意してください。以下の&lt;a href=&quot;#thiscallback&quot;&gt; &lt;code&gt;this.callback&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="358a3d576958f5f1b3e7c42e523d1d2554052390" translate="yes" xml:space="preserve">
          <source>The following sections provide some basic examples of the different types of loaders. Note that the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; parameters are optional, see &lt;a href=&quot;loaders#this-callback&quot;&gt;&lt;code&gt;this.callback&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">以下のセクションでは、さまざまなタイプのローダーの基本的な例をいくつか示します。 &lt;code&gt;map&lt;/code&gt; および &lt;code&gt;meta&lt;/code&gt; パラメータはオプションであることに注意してください。以下の&lt;a href=&quot;loaders#this-callback&quot;&gt; &lt;code&gt;this.callback&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a531a0077512a0466129920af78d3a3e2dc49daf" translate="yes" xml:space="preserve">
          <source>The following setup is an example of allowing &lt;code&gt;Interoperable CSS&lt;/code&gt; features only (such as &lt;code&gt;:import&lt;/code&gt; and &lt;code&gt;:export&lt;/code&gt;) without using further &lt;code&gt;CSS Module&lt;/code&gt; functionality by setting &lt;code&gt;compileType&lt;/code&gt; option for all files that do not match &lt;code&gt;*.module.scss&lt;/code&gt; naming convention. This is for reference as having &lt;code&gt;ICSS&lt;/code&gt; features applied to all files was default &lt;code&gt;css-loader&lt;/code&gt; behavior before v4. Meanwhile all files matching &lt;code&gt;*.module.scss&lt;/code&gt; are treated as &lt;code&gt;CSS Modules&lt;/code&gt; in this example.</source>
          <target state="translated">次の設定は、 &lt;code&gt;*.module.scss&lt;/code&gt; 。module.scss命名規則に一致しないすべてのファイルに &lt;code&gt;compileType&lt;/code&gt; オプションを設定することにより、 &lt;code&gt;CSS Module&lt;/code&gt; 機能をさらに使用せずに &lt;code&gt;Interoperable CSS&lt;/code&gt; 機能（ &lt;code&gt;:import&lt;/code&gt; や &lt;code&gt;:export&lt;/code&gt; など）のみを許可する例です。これは、すべてのファイルに &lt;code&gt;ICSS&lt;/code&gt; 機能を適用することが、v4より前のデフォルトの &lt;code&gt;css-loader&lt;/code&gt; の動作であったための参照用です。一方、この例では、 &lt;code&gt;*.module.scss&lt;/code&gt; 一致するすべてのファイルが &lt;code&gt;CSS Modules&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="1c2f6bec656ab12985a3d65fbee3d5f476e86100" translate="yes" xml:space="preserve">
          <source>The following steps allow modules to be swapped in and out of an application:</source>
          <target state="translated">以下の手順で、モジュールをアプリケーションに入れたり出したりすることができます。</target>
        </trans-unit>
        <trans-unit id="eb00badcb3449f08d67086ef9131607ceef57096" translate="yes" xml:space="preserve">
          <source>The following steps are especially useful in &lt;em&gt;development&lt;/em&gt;.</source>
          <target state="translated">次の手順は、&lt;em&gt;開発に&lt;/em&gt;特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4308c488d5fc825f759c2149b59c6977cd8020af" translate="yes" xml:space="preserve">
          <source>The following steps are especially useful in &lt;em&gt;production&lt;/em&gt;.</source>
          <target state="translated">次の手順は、&lt;em&gt;生産で&lt;/em&gt;特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5f0e7e81e5d142099d152c7594561b3e8c300b10" translate="yes" xml:space="preserve">
          <source>The following steps can increase resolving speed:</source>
          <target state="translated">以下の手順で解決速度を上げることができます。</target>
        </trans-unit>
        <trans-unit id="b7cdaed98fa9728f3dcb7fbd1bd9e9dde0fef43e" translate="yes" xml:space="preserve">
          <source>The following steps can increase the speed of resolving:</source>
          <target state="translated">以下の手順を踏むことで、解決のスピードを上げることができます。</target>
        </trans-unit>
        <trans-unit id="78064ebad412dafd7f97cab0302ad0ffbb211b83" translate="yes" xml:space="preserve">
          <source>The following string values are supported via &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt;&lt;code&gt;WebpackOptionsApply&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の文字列値は&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt; &lt;code&gt;WebpackOptionsApply&lt;/code&gt; で&lt;/a&gt;サポートされています。</target>
        </trans-unit>
        <trans-unit id="58f9d8bd855a58eaf844f5bdd0eb9e6333c59dbe" translate="yes" xml:space="preserve">
          <source>The following string values are supported:</source>
          <target state="translated">以下の文字列値をサポートしています。</target>
        </trans-unit>
        <trans-unit id="292d4638ace13f846ef8f5e4299bbc764dab8797" translate="yes" xml:space="preserve">
          <source>The following substitutions are available in template strings (via webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js&quot;&gt;&lt;code&gt;ModuleFilenameHelpers&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">次の置換は、テンプレート文字列で使用できます（webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js&quot;&gt; &lt;code&gt;ModuleFilenameHelpers&lt;/code&gt; を使用&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d43ba6fd87e03b99bf4c08264e8937a094bc5a6c" translate="yes" xml:space="preserve">
          <source>The following substitutions are available in template strings (via webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js&quot;&gt;&lt;code&gt;TemplatedPathPlugin&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">次の置換は、テンプレート文字列で使用できます（webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js&quot;&gt; &lt;code&gt;TemplatedPathPlugin&lt;/code&gt; を使用&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="956e6a8d3eefecc9bc6b08a8650be6b46a2d275b" translate="yes" xml:space="preserve">
          <source>The following syntax will set the &lt;code&gt;asset&lt;/code&gt; condition:</source>
          <target state="translated">次の構文は、 &lt;code&gt;asset&lt;/code&gt; 条件を設定します。</target>
        </trans-unit>
        <trans-unit id="fea29774d87f3fe2af810c0c9e39d683fa3cdbf5" translate="yes" xml:space="preserve">
          <source>The following syntax will set the &lt;code&gt;import&lt;/code&gt; condition:</source>
          <target state="translated">次の構文は、 &lt;code&gt;import&lt;/code&gt; 条件を設定します。</target>
        </trans-unit>
        <trans-unit id="3944714b7516accbbd62efb5a7f911578d6fc4df" translate="yes" xml:space="preserve">
          <source>The following syntax will set the &lt;code&gt;require&lt;/code&gt; condition:</source>
          <target state="translated">次の構文は、 &lt;code&gt;require&lt;/code&gt; 条件を設定します。</target>
        </trans-unit>
        <trans-unit id="20e048fd4c527d735ff7fb116aca6ca9beb07204" translate="yes" xml:space="preserve">
          <source>The following syntax will set the &lt;code&gt;script&lt;/code&gt; condition:</source>
          <target state="translated">次の構文は、 &lt;code&gt;script&lt;/code&gt; 条件を設定します。</target>
        </trans-unit>
        <trans-unit id="5b3519b0a4ff61bc242bed7ac2e9ee3829a5393a" translate="yes" xml:space="preserve">
          <source>The following syntax will set the &lt;code&gt;style&lt;/code&gt; condition:</source>
          <target state="translated">次の構文は、 &lt;code&gt;style&lt;/code&gt; 条件を設定します。</target>
        </trans-unit>
        <trans-unit id="00c83362a2351fb229e86b82b5cc384b190a6627" translate="yes" xml:space="preserve">
          <source>The following syntaxes are accepted...</source>
          <target state="translated">以下の構文が受け入れられます...</target>
        </trans-unit>
        <trans-unit id="cdcae432bd2b6c399318440c9434100436e71338" translate="yes" xml:space="preserve">
          <source>The following table explains other cases:</source>
          <target state="translated">以下、その他のケースについて説明する。</target>
        </trans-unit>
        <trans-unit id="e8d6fb0b5a199393021b21ed46adcf28660dbc55" translate="yes" xml:space="preserve">
          <source>The following tools have certain problems that can degrade build performance.</source>
          <target state="translated">以下のツールには、ビルドのパフォーマンスを低下させる特定の問題があります。</target>
        </trans-unit>
        <trans-unit id="8de98242ee7b3d02c80fdb699692121f062581da" translate="yes" xml:space="preserve">
          <source>The following tools have certain problems that can degrade build performance:</source>
          <target state="translated">以下のツールには、ビルドのパフォーマンスを低下させる特定の問題があります。</target>
        </trans-unit>
        <trans-unit id="86a17425a417d3f21dc03cbde46985454bf993c4" translate="yes" xml:space="preserve">
          <source>The following tools support custom conditions:</source>
          <target state="translated">以下のツールは、カスタム条件をサポートしています。</target>
        </trans-unit>
        <trans-unit id="3b4ce38a560cabaa301d282bfce9aac7becbf9e2" translate="yes" xml:space="preserve">
          <source>The following utilities improve performance by compiling and serving assets in memory rather than writing to disk:</source>
          <target state="translated">以下のユーティリティは、ディスクに書き込むのではなく、メモリにアセットをコンパイルして提供することでパフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="2936d5adb9e240b503a66e2c87b97599cd38ff58" translate="yes" xml:space="preserve">
          <source>The following values are supported:</source>
          <target state="translated">以下の値をサポートしています。</target>
        </trans-unit>
        <trans-unit id="b1a4d3fc2e43494645fd26eb34e527854b882091" translate="yes" xml:space="preserve">
          <source>The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), but others might be added by plugins).</source>
          <target state="translated">チャンクのフォーマット(デフォルトで含まれるフォーマットは 'array-push' (web/WebWorker)、'commonjs' (node.js)ですが、その他のフォーマットはプラグインによって追加される可能性があります)。</target>
        </trans-unit>
        <trans-unit id="adb760b46a74652ab1343797c2772e58108b9d71" translate="yes" xml:space="preserve">
          <source>The full hash of compilation</source>
          <target state="translated">コンパイルのフルハッシュ</target>
        </trans-unit>
        <trans-unit id="fbd2a40b20776c068f57487a9554e83f00e6ea55" translate="yes" xml:space="preserve">
          <source>The full list of available modes and their behavior is described in &lt;a href=&quot;#import-1&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">使用可能なモードとその動作の完全なリストは、&lt;a href=&quot;#import-1&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt;ドキュメントに記載されています。</target>
        </trans-unit>
        <trans-unit id="02d451fad6416a0cc511a895bf55cb6593cb7b80" translate="yes" xml:space="preserve">
          <source>The function must return one of the values:</source>
          <target state="translated">この関数は、いずれかの値を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="f119c0fa5b73286d19fec4335349b142a571bc1e" translate="yes" xml:space="preserve">
          <source>The function normalizes configuration (converts plugins names and options to &lt;code&gt;Function&lt;/code&gt;s) for using in &lt;code&gt;imagemin&lt;/code&gt; package directly.</source>
          <target state="translated">この関数は、 &lt;code&gt;imagemin&lt;/code&gt; パッケージで直接使用するための構成を正規化します（プラグイン名とオプションを &lt;code&gt;Function&lt;/code&gt; 変換します）。</target>
        </trans-unit>
        <trans-unit id="0d4c0f2596233928ed15a307410bb9cbcb4a1763" translate="yes" xml:space="preserve">
          <source>The function receives three arguments:</source>
          <target state="translated">この関数は3つの引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="ca15d1d0d8aa11d93d6ca1a567cc9ff1370ac2c0" translate="yes" xml:space="preserve">
          <source>The function, which can return filename [string]</source>
          <target state="translated">ファイル名[文字列]を返すことができる関数</target>
        </trans-unit>
        <trans-unit id="59c7450e94d45d1d7509992f8d7fb34895023310" translate="yes" xml:space="preserve">
          <source>The generated output will be defined with the name &quot;MyLibrary&quot;, i.e.</source>
          <target state="translated">生成される出力は &quot;MyLibrary &quot;という名前で定義されます。</target>
        </trans-unit>
        <trans-unit id="175fff95d48e044762395bdd73eb8a40d3c60bc6" translate="yes" xml:space="preserve">
          <source>The global variable used by webpack for loading of chunks.</source>
          <target state="translated">チャンクの読み込みにwebpackが使用するグローバル変数。</target>
        </trans-unit>
        <trans-unit id="4ee640bb2b9cec6c071382b82b303d30815f1e04" translate="yes" xml:space="preserve">
          <source>The goal of CommonJS is to specify an ecosystem for JavaScript outside the browser. The following CommonJS methods are supported by webpack:</source>
          <target state="translated">CommonJSの目的は、ブラウザ以外のJavaScriptのエコシステムを指定することです。webpackでは以下のCommonJSメソッドがサポートされています。</target>
        </trans-unit>
        <trans-unit id="89250071811de7ae2e1e9e79e9c0f6750a60c64b" translate="yes" xml:space="preserve">
          <source>The goals of &lt;em&gt;development&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt; builds differ greatly. In &lt;em&gt;development&lt;/em&gt;, we want strong source mapping and a localhost server with live reloading or hot module replacement. In &lt;em&gt;production&lt;/em&gt;, our goals shift to a focus on minified bundles, lighter weight source maps, and optimized assets to improve load time. With this logical separation at hand, we typically recommend writing &lt;strong&gt;separate webpack configurations&lt;/strong&gt; for each environment.</source>
          <target state="translated">&lt;em&gt;開発&lt;/em&gt;ビルドと&lt;em&gt;本番&lt;/em&gt;ビルドの目標は大きく異なります。で&lt;em&gt;開発&lt;/em&gt;、我々は強力なソースマッピングやライブリロードまたはホットモジュールの交換とローカルホストサーバーをしたいです。で&lt;em&gt;生産&lt;/em&gt;、私たちの目標は、ロード時間を改善するために縮小さバンドル、軽量ソースマップ、および最適化された資産に焦点をシフトします。この論理的な分離が&lt;strong&gt;近づいている&lt;/strong&gt;ため、通常、環境ごとに&lt;strong&gt;個別のWebpack構成&lt;/strong&gt;を作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7be5fa44f2388062fa483ac74de7f28c7276fcd4" translate="yes" xml:space="preserve">
          <source>The good news for web projects is that modules are becoming an official feature in the ECMAScript standard. However, browser support is incomplete and bundling is still faster and currently recommended over these early module implementations.</source>
          <target state="translated">Web プロジェクトにとっての朗報は、モジュールが ECMAScript 標準の公式機能になりつつあることです。しかし、ブラウザのサポートは不完全であり、バンドルの方がまだ速く、現在のところこれらの初期のモジュール実装よりも推奨されています。</target>
        </trans-unit>
        <trans-unit id="e60ad30497663537eaf49d2e92c1776638d808a4" translate="yes" xml:space="preserve">
          <source>The good news is that, while there is some overlap, task runners and bundlers can play well together if approached in the right way. This guide provides a high-level overview of how webpack can be integrated into some of the more popular task runners.</source>
          <target state="translated">良いニュースは、いくつかの重複はあるものの、タスクランナーとバンドルラーは、適切な方法でアプローチすれば、うまく一緒に遊ぶことができるということです。このガイドでは、webpack がどのようにしてより人気のあるタスクランナーのいくつかに統合できるかについて、高レベルの概要を提供します。</target>
        </trans-unit>
        <trans-unit id="29bce317db54dddeab6ad47336eb7a5f82c4b936" translate="yes" xml:space="preserve">
          <source>The guides get more advanced as you go on. Most serve as a starting point, and once completed you should feel more comfortable diving into the actual &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">ガイドは、進むにつれてさらに高度になります。ほとんどが出発点として機能し、完了すると、実際の&lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;ドキュメントに&lt;/a&gt;飛び込むのがより快適になるはずです。</target>
        </trans-unit>
        <trans-unit id="6791ae6e37e5d1649383b3ad158ea70d586c7f09" translate="yes" xml:space="preserve">
          <source>The guides get more and more advanced as you go on. Most serve as a starting point, and once completed you should feel more comfortable diving into the actual &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">ガイドは次第に進化します。ほとんどが開始点として機能し、完了すると、実際の&lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;ドキュメントに&lt;/a&gt;さらに慣れることができます。</target>
        </trans-unit>
        <trans-unit id="17a8abbce059f5dd51ed7fe6e3a105c0703d77b4" translate="yes" xml:space="preserve">
          <source>The hash of options.content (Buffer) (by default it's the hex digest of the hash).</source>
          <target state="translated">options.content (Buffer)のハッシュ (デフォルトではハッシュの 16 進数のダイジェスト)。</target>
        </trans-unit>
        <trans-unit id="4ed4a6a2f4161a7511f3c084677b67ac58fdbd34" translate="yes" xml:space="preserve">
          <source>The hash of the chunk content</source>
          <target state="translated">チャンクコンテンツのハッシュ値</target>
        </trans-unit>
        <trans-unit id="9f45f1f5064788d5bb5bc67a87612b757a73368f" translate="yes" xml:space="preserve">
          <source>The hash of the chunk, including all elements of the chunk</source>
          <target state="translated">チャンクのすべての要素を含むチャンクのハッシュ</target>
        </trans-unit>
        <trans-unit id="2149de6ebc9ce8fd4c0f28e8775c835c3d89a631" translate="yes" xml:space="preserve">
          <source>The hash of the chunk, including only elements of this content type (affected by &lt;code&gt;optimization.realContentHash&lt;/code&gt;)</source>
          <target state="translated">このコンテンツタイプの要素のみを含むチャンクのハッシュ（ &lt;code&gt;optimization.realContentHash&lt;/code&gt; の影響を受けます）</target>
        </trans-unit>
        <trans-unit id="fa043967113f8c63dae3857d4d86e057b2869bf7" translate="yes" xml:space="preserve">
          <source>The hash of the content of the module</source>
          <target state="translated">モジュールの内容のハッシュ</target>
        </trans-unit>
        <trans-unit id="8726aff8400cc61a3bd93b0c1e76bf262f43fd0b" translate="yes" xml:space="preserve">
          <source>The hash of the module</source>
          <target state="translated">モジュールのハッシュ</target>
        </trans-unit>
        <trans-unit id="5cbf4bef2adda69cc22f1bbb6067da1d45217eae" translate="yes" xml:space="preserve">
          <source>The hash of the module identifier</source>
          <target state="translated">モジュール識別子のハッシュ</target>
        </trans-unit>
        <trans-unit id="0463d3a8c9f9c6747f6d1cdde4358b6206cbd3fe" translate="yes" xml:space="preserve">
          <source>The hashing algorithm to use, defaults to &lt;code&gt;'md4'&lt;/code&gt;. All functions from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash&lt;/code&gt;&lt;/a&gt; are supported. Since &lt;code&gt;4.0.0-alpha2&lt;/code&gt;, the &lt;code&gt;hashFunction&lt;/code&gt; can now be a constructor to a custom hash function. You can provide a non-crypto hash function for performance reasons.</source>
          <target state="translated">使用するハッシュアルゴリズム。デフォルトは &lt;code&gt;'md4'&lt;/code&gt; です。Node.JSの&lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash&lt;/code&gt; の&lt;/a&gt;すべての関数がサポートされています。 &lt;code&gt;4.0.0-alpha2&lt;/code&gt; 以降、 &lt;code&gt;hashFunction&lt;/code&gt; はカスタムハッシュ関数のコンストラクターになることができます。パフォーマンス上の理由から、非暗号ハッシュ関数を提供できます。</target>
        </trans-unit>
        <trans-unit id="f3d044d7a47605be75dda574e5d35e32ce48ea03" translate="yes" xml:space="preserve">
          <source>The hashing algorithm to use. All functions from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash&lt;/code&gt;&lt;/a&gt; are supported. Since &lt;code&gt;4.0.0-alpha2&lt;/code&gt;, the &lt;code&gt;hashFunction&lt;/code&gt; can now be a constructor to a custom hash function. You can provide a non-crypto hash function for performance reasons.</source>
          <target state="translated">使用するハッシュアルゴリズム。Node.JSの&lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash&lt;/code&gt; の&lt;/a&gt;すべての関数がサポートされています。 &lt;code&gt;4.0.0-alpha2&lt;/code&gt; 以降、 &lt;code&gt;hashFunction&lt;/code&gt; をカスタムハッシュ関数のコンストラクターにすることができます。パフォーマンス上の理由から、非暗号化ハッシュ関数を提供できます。</target>
        </trans-unit>
        <trans-unit id="4552e0a1f696228480d29e4a92784c593d69aee9" translate="yes" xml:space="preserve">
          <source>The html-loader will parse the URLs, require the images and everything you expect. The extract loader will parse the javascript back into a proper html file, ensuring images are required and point to proper path, and the &lt;a href=&quot;../guides/asset-modules&quot;&gt;&lt;code&gt;asset modules&lt;/code&gt;&lt;/a&gt; will write the &lt;em&gt;.html&lt;/em&gt; file for you. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878c17956b8381cfc39a06c30d11d4d9bbcdeec7" translate="yes" xml:space="preserve">
          <source>The html-loader will parse the URLs, require the images and everything you expect. The extract loader will parse the javascript back into a proper html file, ensuring images are required and point to proper path, and the file loader will write the &lt;em&gt;.html&lt;/em&gt; file for you. Example:</source>
          <target state="translated">html-loaderはURLを解析し、画像と必要なすべてのものを要求します。抽出ローダーはjavascriptを解析して適切なhtmlファイルに戻し、画像が必要であり、適切なパスを指していることを確認します。ファイルローダーが&lt;em&gt;.html&lt;/em&gt;ファイルを書き込みます。例：</target>
        </trans-unit>
        <trans-unit id="cb4462897b8bd3c12c191602b87d8b211ce96cd9" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;webpack&lt;/code&gt; function is fed a webpack &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;Configuration Object&lt;/a&gt; and runs the webpack compiler if a callback function is provided:</source>
          <target state="translated">インポートされた &lt;code&gt;webpack&lt;/code&gt; 関数には、webpack &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;構成オブジェクト&lt;/a&gt;が渡され、コールバック関数が提供されている場合はwebpackコンパイラーを実行します。</target>
        </trans-unit>
        <trans-unit id="33a4cf0e8036e462ed9b4942a05234b23e76115e" translate="yes" xml:space="preserve">
          <source>The imports loader allows you to use modules that depend on specific global variables.</source>
          <target state="translated">インポートローダーを使うと、特定のグローバル変数に依存するモジュールを使うことができます。</target>
        </trans-unit>
        <trans-unit id="7185d7d5136017864a86f672276402ec9aa6fdb6" translate="yes" xml:space="preserve">
          <source>The index in the loaders array of the current loader.</source>
          <target state="translated">現在のローダーのローダー配列のインデックス。</target>
        </trans-unit>
        <trans-unit id="622eb7846c820895ecfaad87d57f13ab3bfdab01" translate="yes" xml:space="preserve">
          <source>The index of a function contained within &lt;code&gt;options.transforms&lt;/code&gt; which to use to transform the target file(s).</source>
          <target state="translated">ターゲットファイルを変換するために使用する &lt;code&gt;options.transforms&lt;/code&gt; 内に含まれる関数のインデックス。</target>
        </trans-unit>
        <trans-unit id="7f184dd511af3ce37021703d7bf7ff188cfdcd35" translate="yes" xml:space="preserve">
          <source>The inner workings here are heavily inspired by &lt;a href=&quot;worker-loader&quot;&gt;worker-loader&lt;/a&gt;. It's worth a read!</source>
          <target state="translated">ここの内部の仕組みは、&lt;a href=&quot;worker-loader&quot;&gt;worker-loaderに&lt;/a&gt;強く影響を受けています。読む価値があります！</target>
        </trans-unit>
        <trans-unit id="43e822b9d87b538c0f6aa00d47a247647f62e872" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;LabeledModulesPlugin&lt;/code&gt; enables you to use the following methods for exporting and requiring within your modules:</source>
          <target state="translated">内部の &lt;code&gt;LabeledModulesPlugin&lt;/code&gt; を使用すると、次のメソッドを使用して、モジュール内でエクスポートおよび要求できます。</target>
        </trans-unit>
        <trans-unit id="4f3eeb68c1db87109909ad8adabec192440632b1" translate="yes" xml:space="preserve">
          <source>The internal chunk loading function. Takes one argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4301641a17ae1438d40dabf59f4701492ac2fb96" translate="yes" xml:space="preserve">
          <source>The internal chunk loading function. Takes two arguments:</source>
          <target state="translated">内部チャンクロード関数。2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="3efc7bf124d5e8cb340af1ccedcabdd90e4fa1d3" translate="yes" xml:space="preserve">
          <source>The issuer: An absolute path to the file of the module which requested the resource. It's the location of the import.</source>
          <target state="translated">発行者:リソースを要求したモジュールのファイルへの絶対パス。これはインポートの場所です。</target>
        </trans-unit>
        <trans-unit id="e0f5006bb4c868b9ea27a3396647799ddfdd1706" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;main&lt;/code&gt; refers to the &lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;standard from &lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;module&lt;/code&gt; to &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;a&lt;/a&gt;&lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;proposal&lt;/a&gt; to allow the JavaScript ecosystem upgrade to use ES2015 modules without breaking backwards compatibility.</source>
          <target state="translated">キー &lt;code&gt;main&lt;/code&gt; を参照&lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;から標準 &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;module&lt;/code&gt; に&lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;提案&lt;/a&gt; JavaScriptのエコシステムは、後方互換性を壊すことなく、ES2015モジュールを使用するようにアップグレードできるようにします。&lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f081d9f5b8fdd6618bb1b1f831080b06f01eb1f" translate="yes" xml:space="preserve">
          <source>The keyword here is &lt;strong&gt;statically&lt;/strong&gt;. A normal &lt;code&gt;import&lt;/code&gt; statement cannot be used dynamically within other logic or contain variables. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;spec&lt;/a&gt; for more information and &lt;code&gt;import()&lt;/code&gt; below for dynamic usage.</source>
          <target state="translated">ここでのキーワードは&lt;strong&gt;静的&lt;/strong&gt;です。通常の &lt;code&gt;import&lt;/code&gt; ステートメントは、他のロジック内で動的に使用したり、変数を含めたりすることはできません。詳細については&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;仕様&lt;/a&gt;を参照し、動的な使用法については以下の &lt;code&gt;import()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e003c18060496c40fdaa02f7ca1fc43ec879fc1c" translate="yes" xml:space="preserve">
          <source>The keyword here is &lt;strong&gt;statically&lt;/strong&gt;. Normal &lt;code&gt;import&lt;/code&gt; statement cannot be used dynamically within other logic or contain variables. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;spec&lt;/a&gt; for more information and &lt;code&gt;import()&lt;/code&gt; below for dynamic usage.</source>
          <target state="translated">ここのキーワードは&lt;strong&gt;静的&lt;/strong&gt;です。通常の &lt;code&gt;import&lt;/code&gt; 文は、他のロジック内で動的に使用したり、変数を含めることはできません。詳細については&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;仕様&lt;/a&gt;を、動的使用については以下の &lt;code&gt;import()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a9d54d05466f8e81e809ba86dee0999b728a7661" translate="yes" xml:space="preserve">
          <source>The latest webpack release is:</source>
          <target state="translated">最新のwebpackのリリースは</target>
        </trans-unit>
        <trans-unit id="9d0658bcac0fb911632d057be396c56ab4c5cb81" translate="yes" xml:space="preserve">
          <source>The length of hashes (&lt;code&gt;[hash]&lt;/code&gt;, &lt;code&gt;[contenthash]&lt;/code&gt; or &lt;code&gt;[chunkhash]&lt;/code&gt;) can be specified using &lt;code&gt;[hash:16]&lt;/code&gt; (defaults to 20). Alternatively, specify &lt;a href=&quot;#outputhashdigestlength&quot;&gt;&lt;code&gt;output.hashDigestLength&lt;/code&gt;&lt;/a&gt; to configure the length globally.</source>
          <target state="translated">ハッシュの長さ（ &lt;code&gt;[hash]&lt;/code&gt; 、 &lt;code&gt;[contenthash]&lt;/code&gt; 、または &lt;code&gt;[chunkhash]&lt;/code&gt; ）は、 &lt;code&gt;[hash:16]&lt;/code&gt; （デフォルトは20）を使用して指定できます。または、&lt;a href=&quot;#outputhashdigestlength&quot;&gt; &lt;code&gt;output.hashDigestLength&lt;/code&gt; &lt;/a&gt;を指定して、長さをグローバルに構成します。</target>
        </trans-unit>
        <trans-unit id="5500211f9001a63bab0626a741e206c512be6985" translate="yes" xml:space="preserve">
          <source>The lengths of &lt;code&gt;[hash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; can be specified using &lt;code&gt;[hash:16]&lt;/code&gt; (defaults to 20). Alternatively, specify &lt;a href=&quot;#output-hashdigestlength&quot;&gt;&lt;code&gt;output.hashDigestLength&lt;/code&gt;&lt;/a&gt; to configure the length globally.</source>
          <target state="translated">&lt;code&gt;[hash]&lt;/code&gt; と &lt;code&gt;[chunkhash]&lt;/code&gt; ハッシュ]の長さは、[ハッシュ &lt;code&gt;[hash:16]&lt;/code&gt; を使用して指定できます（デフォルトは20）。または、&lt;a href=&quot;#output-hashdigestlength&quot;&gt; &lt;code&gt;output.hashDigestLength&lt;/code&gt; &lt;/a&gt;を指定して、長さをグローバルに構成します。</target>
        </trans-unit>
        <trans-unit id="75512c1d03470514d5cf05338997168251cab9bd" translate="yes" xml:space="preserve">
          <source>The limit can be specified via loader options and defaults to no limit.</source>
          <target state="translated">制限はローダーオプションで指定でき、デフォルトは制限なしです。</target>
        </trans-unit>
        <trans-unit id="a10c0959fe08b11aa0f20df6f5f1b5ec7e7d9e80" translate="yes" xml:space="preserve">
          <source>The loader &lt;code&gt;eslint-loader&lt;/code&gt; will be deprecated soon, please use this plugin instead.</source>
          <target state="translated">ローダー &lt;code&gt;eslint-loader&lt;/code&gt; は間もなく非推奨になります。代わりに、このプラグインを使用してください。</target>
        </trans-unit>
        <trans-unit id="c590edafbccf5a13ba624e90ca3c81af93245611" translate="yes" xml:space="preserve">
          <source>The loader &lt;strong&gt;automatically&lt;/strong&gt; searches for configuration files.</source>
          <target state="translated">ローダーは&lt;strong&gt;自動的&lt;/strong&gt;に構成ファイルを検索します。</target>
        </trans-unit>
        <trans-unit id="02717a18cddb27586d8d91e9a2358d691d091400" translate="yes" xml:space="preserve">
          <source>The loader allows you to write mixed HTML, CSS and JavaScript Polymer elements and still use the full webpack ecosystem including module bundling and code splitting.</source>
          <target state="translated">このローダーを使用すると、HTML、CSS、JavaScript Polymer 要素を混在させて書くことができ、モジュールのバンドルやコードの分割を含む完全な webpack エコシステムを使用することができます。</target>
        </trans-unit>
        <trans-unit id="9ee66e0520a3a70a7375d49641abef0787bb8e0c" translate="yes" xml:space="preserve">
          <source>The loader automatically inject source maps when previous loader emit them. Therefore, to generate source maps, set the &lt;code&gt;sourceMap&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; for the previous loader.</source>
          <target state="translated">前のローダーがソースマップを発行すると、ローダーは自動的にソースマップを挿入します。したがって、ソースマップを生成するには、前のローダーの &lt;code&gt;sourceMap&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ae685df6df8c28074d878a1e547602dd9d6ae5cd" translate="yes" xml:space="preserve">
          <source>The loader context represents the properties that are available inside of a loader assigned to the &lt;code&gt;this&lt;/code&gt; property.</source>
          <target state="translated">ローダーコンテキストは、 &lt;code&gt;this&lt;/code&gt; プロパティに割り当てられたローダー内で使用できるプロパティを表します。</target>
        </trans-unit>
        <trans-unit id="98992f65d6c9889f7c07d0bc0dfd8b5a0e2d752d" translate="yes" xml:space="preserve">
          <source>The loader could look like this:</source>
          <target state="translated">ローダーはこんな感じになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="dc28a2430b76edc60a5453ebccdb80a69e91a904" translate="yes" xml:space="preserve">
          <source>The loader generate this:</source>
          <target state="translated">ローダはこれを生成します。</target>
        </trans-unit>
        <trans-unit id="fcf67d9606614595aba3d7371f19e9afae35cf8d" translate="yes" xml:space="preserve">
          <source>The loader generate:</source>
          <target state="translated">ローダが生成します。</target>
        </trans-unit>
        <trans-unit id="6850229fa73c51d30b9860ce808297b30b581ca8" translate="yes" xml:space="preserve">
          <source>The loader inject styles like:</source>
          <target state="translated">のようなスタイルをローダが注入します。</target>
        </trans-unit>
        <trans-unit id="a94eb23586afe06cc2c3ee1e482bd23aea1c63bc" translate="yes" xml:space="preserve">
          <source>The loader interface provides all module relate information. However in rare cases you might need access to the compiler api itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f37428026e9b156a0238193c78b0e4ddb2426b" translate="yes" xml:space="preserve">
          <source>The loader path in the error is displayed since webpack 4.12</source>
          <target state="translated">webpack 4.12以降、エラー中のローダーパスが表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="d03169a0e1bc93b67ce76a356e5aa2a01a1c77e1" translate="yes" xml:space="preserve">
          <source>The loader processes Polymer 3 template elements to minify the html and add images, fonts and imported stylesheets to the webpack dependency graph.</source>
          <target state="translated">ローダーはPolymer 3のテンプレート要素を処理してhtmlを最小化し、画像、フォント、インポートされたスタイルシートをwebpackの依存関係グラフに追加します。</target>
        </trans-unit>
        <trans-unit id="607e721094d3631e0620ceb231f0a7e78b6a13d9" translate="yes" xml:space="preserve">
          <source>The loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.</source>
          <target state="translated">ローダは、ローカルセレクタを一意の識別子に置き換えます。選択された一意の識別子はモジュールによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="12c3056a92f9c4c42bdf9f8f6c031124f4fc2fc1" translate="yes" xml:space="preserve">
          <source>The loader replaces local selectors with unique identifiers. The chosen unique identifiers are exported by the module.</source>
          <target state="translated">ローダは、ローカルセレクタを一意の識別子に置き換えます。選択された一意の識別子はモジュールによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="299350ec237fdcb85e12d63661c686bb20a1954e" translate="yes" xml:space="preserve">
          <source>The loader supports all options supported by &lt;code&gt;istanbul-lib-instrument&lt;/code&gt;</source>
          <target state="translated">ローダーは &lt;code&gt;istanbul-lib-instrument&lt;/code&gt; がサポートするすべてのオプションをサポートします</target>
        </trans-unit>
        <trans-unit id="b31bd1bb8fc2430ef42ba02f03db77c3e1639cff" translate="yes" xml:space="preserve">
          <source>The loader transforms your components:</source>
          <target state="translated">ローダはコンポーネントを変換します。</target>
        </trans-unit>
        <trans-unit id="1aeead07c2f08f9b8fc8d5b0f49d1e895dc026c7" translate="yes" xml:space="preserve">
          <source>The loader will only replace a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; if the href is a relative path. Any link attempting to access an external link i.e. &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;//&lt;/code&gt; will not be replaced.</source>
          <target state="translated">ローダーは、hrefが相対パスの場合にのみ &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; を置き換えます。外部リンク、つまり &lt;code&gt;http&lt;/code&gt; 、 &lt;code&gt;https&lt;/code&gt; 、または &lt;code&gt;//&lt;/code&gt; にアクセスしようとするリンクは置き換えられません。</target>
        </trans-unit>
        <trans-unit id="64ad8874256193d8fad16b6cb03431251ac206d1" translate="yes" xml:space="preserve">
          <source>The loader will search up the directory tree for configuration in the following places:</source>
          <target state="translated">ローダはディレクトリツリーを検索して以下の場所で設定を行います。</target>
        </trans-unit>
        <trans-unit id="ff94098ec9e21443e23e9b6ad5f42779492bd9ea" translate="yes" xml:space="preserve">
          <source>The main parts</source>
          <target state="translated">主要部分</target>
        </trans-unit>
        <trans-unit id="50aa09ae1377da238a1a8574aee2960a5a76e525" translate="yes" xml:space="preserve">
          <source>The manifest contains the new compilation hash and a list of all updated chunks. Each of these chunks contains the new code for all updated modules (or a flag indicating that the module was removed).</source>
          <target state="translated">マニフェストには、新しいコンパイルハッシュと更新されたすべてのチャンクのリストが含まれています。これらのチャンクのそれぞれには、更新されたすべてのモジュールの新しいコードが含まれています (または、モジュールが削除されたことを示すフラグ)。</target>
        </trans-unit>
        <trans-unit id="22f4b76b689d538d97a9f56b12c6f429c5ca6101" translate="yes" xml:space="preserve">
          <source>The manifest data can be extracted into a json file for easy consumption using the &lt;a href=&quot;https://github.com/danethurber/webpack-manifest-plugin&quot;&gt;&lt;code&gt;WebpackManifestPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">マニフェストデータは、&lt;a href=&quot;https://github.com/danethurber/webpack-manifest-plugin&quot;&gt; &lt;code&gt;WebpackManifestPlugin&lt;/code&gt; &lt;/a&gt;を使用して簡単に使用できるようにjsonファイルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="c4adb149cac28b10ad6472a4476aff1c8179b51c" translate="yes" xml:space="preserve">
          <source>The manifest data can be extracted into a json file for easy consumption using the &lt;a href=&quot;https://github.com/shellscape/webpack-manifest-plugin&quot;&gt;&lt;code&gt;WebpackManifestPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">マニフェストデータは、&lt;a href=&quot;https://github.com/shellscape/webpack-manifest-plugin&quot;&gt; &lt;code&gt;WebpackManifestPlugin&lt;/code&gt; &lt;/a&gt;を使用して簡単に使用できるようにjsonファイルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="7fcf4844a873556aa5a937dd01b092ce6a741e02" translate="yes" xml:space="preserve">
          <source>The message should contain the following fields:</source>
          <target state="translated">メッセージには以下のフィールドが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="8e7bee649828a4b2a2df4403824fcefa6e0eab7e" translate="yes" xml:space="preserve">
          <source>The method to load chunks (methods included by default are 'jsonp' (web), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).</source>
          <target state="translated">チャンクをロードするメソッド(デフォルトで含まれるメソッドは'jsonp' (web)、'importScripts' (WebWorker)、'require' (sync node.js)、'async-node' (async node.js)ですが、その他はプラグインで追加される可能性があります)。</target>
        </trans-unit>
        <trans-unit id="a7f574fb0ede81d5ac10e894649b28adefcada6b" translate="yes" xml:space="preserve">
          <source>The minimum requirement for the &lt;code&gt;output&lt;/code&gt; property in your webpack configuration is to set its value to an object and provide an &lt;a href=&quot;../configuration/output#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; to use for the output file(s):</source>
          <target state="translated">Webpack構成の &lt;code&gt;output&lt;/code&gt; プロパティの最小要件は、その値をオブジェクトに設定し、出力ファイルに使用する&lt;a href=&quot;../configuration/output#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt;を指定することです。</target>
        </trans-unit>
        <trans-unit id="ca8c533ca9e0eeb7b0f1a5cf47de1c99d487b8a5" translate="yes" xml:space="preserve">
          <source>The minimum requirements for the &lt;code&gt;output&lt;/code&gt; property in your webpack config is to set its value to an object including the following thing:</source>
          <target state="translated">webpack設定の &lt;code&gt;output&lt;/code&gt; プロパティの最小要件は、次の項目を含むオブジェクトにその値を設定することです。</target>
        </trans-unit>
        <trans-unit id="8d79c212d54a66b872806296bbabd60c49c0ad07" translate="yes" xml:space="preserve">
          <source>The minimum supported Node.js version to run webpack 5 is 10.13.0 (LTS)</source>
          <target state="translated">webpack 5を実行するためにサポートされているNode.jsの最小バージョンは10.13.0 (LTS)です。</target>
        </trans-unit>
        <trans-unit id="1ba58e68e946922d33fa08bdd3f4ddb95220425c" translate="yes" xml:space="preserve">
          <source>The minimum times must a module be shared among chunks before splitting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51cb967bd5a63ed817746d4a2210c7604937c57" translate="yes" xml:space="preserve">
          <source>The module &lt;a href=&quot;https://nodejs.org/api/path.html#path_path_basename_path_ext&quot;&gt;basename&lt;/a&gt;</source>
          <target state="translated">モジュールの&lt;a href=&quot;https://nodejs.org/api/path.html#path_path_basename_path_ext&quot;&gt;ベース名&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2cf9a0f6cdd1a3915e69f0d5d77882cc041b2b99" translate="yes" xml:space="preserve">
          <source>The module also validates found configurations against webpack's options schema to ensure that the configuration is correct before webpack attempts to use it.</source>
          <target state="translated">また、このモジュールは、webpack が使用しようとする前に設定が正しいことを確認するために、webpack のオプションスキーマに対して見つかった設定を検証します。</target>
        </trans-unit>
        <trans-unit id="449ce0de57d3e2a0be319a99debc55b86880760c" translate="yes" xml:space="preserve">
          <source>The module filename</source>
          <target state="translated">モジュールのファイル名</target>
        </trans-unit>
        <trans-unit id="88e0aa6c2168cb0078e139454481c7292d3e21ab" translate="yes" xml:space="preserve">
          <source>The module identifier</source>
          <target state="translated">モジュール識別子</target>
        </trans-unit>
        <trans-unit id="90462cd9df48197a4f39715938a23e7e8c5fa7a7" translate="yes" xml:space="preserve">
          <source>The module is also tested with the following compilers:</source>
          <target state="translated">このモジュールは以下のコンパイラでもテストされています。</target>
        </trans-unit>
        <trans-unit id="1635800c659f8343bb6f76cf0577b6d8050a774a" translate="yes" xml:space="preserve">
          <source>The module name</source>
          <target state="translated">モジュール名</target>
        </trans-unit>
        <trans-unit id="afd3b0e2f82e2ca4daf7fc9a50ca4e0078eb08f5" translate="yes" xml:space="preserve">
          <source>The module query, i.e., the string following &lt;code&gt;?&lt;/code&gt; in the filename</source>
          <target state="translated">モジュールクエリ、つまり &lt;code&gt;?&lt;/code&gt; に続く文字列 ファイル名</target>
        </trans-unit>
        <trans-unit id="129e370a3b0c1b11ce05b9dc9f69f25d26a473b2" translate="yes" xml:space="preserve">
          <source>The module will get bundled like this:</source>
          <target state="translated">モジュールはこのようにバンドルされます。</target>
        </trans-unit>
        <trans-unit id="af18f009cb9333df7606f5912ce79a0a55814780" translate="yes" xml:space="preserve">
          <source>The modules namespace. This is usually the library name when building as a library, empty otherwise</source>
          <target state="translated">モジュールの名前空間。これは通常、ライブラリとしてビルドする場合はライブラリ名で、そうでない場合は空です。</target>
        </trans-unit>
        <trans-unit id="479f4a5514e62fd84fc68ed0da97f9dd5e36b267" translate="yes" xml:space="preserve">
          <source>The moral of the story is that there are a variety of ways to &lt;code&gt;hook&lt;/code&gt; into the &lt;code&gt;compiler&lt;/code&gt;, each one allowing your plugin to run as it sees fit.</source>
          <target state="translated">この話の教訓は、にさまざまな方法があるということです &lt;code&gt;hook&lt;/code&gt; への &lt;code&gt;compiler&lt;/code&gt; 、それぞれが、それはフィットを見ているとプラグインの実行を可能にします。</target>
        </trans-unit>
        <trans-unit id="ff7aa3f3b92830a27310d668b1d59b019023d65e" translate="yes" xml:space="preserve">
          <source>The most important part to take away from this document is that there are many different ways to format and style your webpack configuration. The key is to stick with something consistent that you and your team can understand and maintain.</source>
          <target state="translated">この文書から取り上げるべき最も重要な部分は、webpack 設定をフォーマットしてスタイルを整えるためには、多くの異なる方法があるということです。重要なのは、あなたとあなたのチームが理解して維持できる一貫性のあるものにこだわることです。</target>
        </trans-unit>
        <trans-unit id="a4b885c9fa2e8cc5ecd04b02c7caa6ce10feeb63" translate="yes" xml:space="preserve">
          <source>The n-th match obtained from matching the current file name against the &lt;code&gt;regExp&lt;/code&gt;.</source>
          <target state="translated">現在のファイル名を &lt;code&gt;regExp&lt;/code&gt; と照合して得られたn番目の一致。</target>
        </trans-unit>
        <trans-unit id="d25fd948c0de18e0c4fa3e7b34e3ac980bb16168" translate="yes" xml:space="preserve">
          <source>The n-th match obtained from matching the current file name against the regExp</source>
          <target state="translated">現在のファイル名と regExp</target>
        </trans-unit>
        <trans-unit id="cc5db90aa6110a9fe0f180ed9cf1911aa9dcb8db" translate="yes" xml:space="preserve">
          <source>The name in the global object. (&lt;strong&gt;required&lt;/strong&gt;).</source>
          <target state="translated">グローバルオブジェクトの名前。（&lt;strong&gt;必須&lt;/strong&gt;）。</target>
        </trans-unit>
        <trans-unit id="54d6c009e997de6f2a825c25208aa6d12f233c15" translate="yes" xml:space="preserve">
          <source>The name of method/variable/etc of the module (the module must export it). If &lt;code&gt;moduleLocalName&lt;/code&gt; is specified, it exposes only the value of &lt;code&gt;moduleLocalName&lt;/code&gt;.</source>
          <target state="translated">モジュールのメソッド/変数などの名前（モジュールはそれをエクスポートする必要があります）。場合 &lt;code&gt;moduleLocalName&lt;/code&gt; が指定されている、それはの値のみ公開し &lt;code&gt;moduleLocalName&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b6d69ad1e3c80b8f04fd87e8a4a8826c68af723f" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;browserify&lt;/code&gt; transform you wish to use.</source>
          <target state="translated">使用する &lt;code&gt;browserify&lt;/code&gt; トランスフォームの名前。</target>
        </trans-unit>
        <trans-unit id="304749ae004320108b2d78b3c7dc01ae50172e2e" translate="yes" xml:space="preserve">
          <source>The name of the JSONP function used for chunk loading</source>
          <target state="translated">チャンクの読み込みに使用するJSONP関数の名前</target>
        </trans-unit>
        <trans-unit id="2a6ad2fcd2bab8910f354fa27cb1be872df13236" translate="yes" xml:space="preserve">
          <source>The name of the chunk, if set, otherwise the ID of the chunk</source>
          <target state="translated">設定されている場合はチャンクの名前、設定されていない場合はチャンクのID</target>
        </trans-unit>
        <trans-unit id="237abd324292923b6851d79c3de40c9df8cfed7f" translate="yes" xml:space="preserve">
          <source>The name of the native &lt;code&gt;import()&lt;/code&gt; function. Can be used for polyfilling, e.g. with &lt;a href=&quot;https://github.com/GoogleChromeLabs/dynamic-import-polyfill&quot;&gt;&lt;code&gt;dynamic-import-polyfill&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ネイティブの &lt;code&gt;import()&lt;/code&gt; 関数の名前。ポリフィリングに使用できます。たとえば、&lt;a href=&quot;https://github.com/GoogleChromeLabs/dynamic-import-polyfill&quot;&gt; &lt;code&gt;dynamic-import-polyfill&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="7f90780bc0827bafcd9895b011a83db2a55c2170" translate="yes" xml:space="preserve">
          <source>The name of the split chunk. Providing &lt;code&gt;false&lt;/code&gt; will keep the same name of the chunks so it doesn't change names unnecessarily. It is the recommended value for production builds.</source>
          <target state="translated">分割されたチャンクの名前。提供する &lt;code&gt;false&lt;/code&gt; 、それが不必要に名称を変更しないように、チャンクの同じ名前を保持します。これは、本番ビルドの推奨値です。</target>
        </trans-unit>
        <trans-unit id="bd981b17d1b1d68795c45fcc3ef348cad98e993a" translate="yes" xml:space="preserve">
          <source>The name of the split chunk. Providing &lt;code&gt;true&lt;/code&gt; will automatically generate a name based on chunks and cache group key. Providing a string or function will allow you to use a custom name. If the name matches an entry point name, the entry point will be removed.</source>
          <target state="translated">分割されたチャンクの名前。提供する &lt;code&gt;true&lt;/code&gt; 自動的にチャンクとキャッシュ・グループ・キーに基づいて名前を生成します。文字列または関数を提供すると、カスタム名を使用できるようになります。名前がエントリポイント名と一致する場合、エントリポイントは削除されます。</target>
        </trans-unit>
        <trans-unit id="c08bdaf133b6ce0622cf9cabf9ca21c324824188" translate="yes" xml:space="preserve">
          <source>The names of the output files are affected by the two fields in the config:</source>
          <target state="translated">出力ファイルの名前は、configの2つのフィールドの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="6d88cb86dabce438937b048a328ba5a2b474953b" translate="yes" xml:space="preserve">
          <source>The new option &lt;code&gt;workerChunkLoading&lt;/code&gt; controls the chunk loading of workers.</source>
          <target state="translated">新しいオプション &lt;code&gt;workerChunkLoading&lt;/code&gt; は、ワーカーのチャンクロードを制御します。</target>
        </trans-unit>
        <trans-unit id="a224dab019a12c6616086a01e53970556f85c794" translate="yes" xml:space="preserve">
          <source>The node API for &lt;code&gt;babel&lt;/code&gt; has been moved to &lt;code&gt;babel-core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; のノードAPIは &lt;code&gt;babel-core&lt;/code&gt; に移動されました。</target>
        </trans-unit>
        <trans-unit id="8b076d7bad0e04847bd9e1af7347fa7a6f1a813c" translate="yes" xml:space="preserve">
          <source>The normal module loader is the function that actually loads all the modules in the module graph (one-by-one).</source>
          <target state="translated">通常のモジュールローダは、実際にモジュールグラフ内のすべてのモジュールを(1つずつ)ロードする機能です。</target>
        </trans-unit>
        <trans-unit id="4f1d19f9faa2d8d0722a0e1e23f02607e587a9c1" translate="yes" xml:space="preserve">
          <source>The object syntax is more verbose. However, this is the most scalable way of defining entry/entries in your application.</source>
          <target state="translated">オブジェクト構文はより冗長です。しかし、これはアプリケーションでエントリ/エントリを定義する最もスケーラブルな方法です。</target>
        </trans-unit>
        <trans-unit id="5189c0c0e672b6631024f822bf03b16042fe64e1" translate="yes" xml:space="preserve">
          <source>The ones performed by &lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;Terser&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;Terser&lt;/a&gt;によって実行されたもの</target>
        </trans-unit>
        <trans-unit id="5154efdb42e2cf3f6948724e000c0d2ef408a7f6" translate="yes" xml:space="preserve">
          <source>The ones performed by UglifyJS</source>
          <target state="translated">UglifyJSで実行されたもの</target>
        </trans-unit>
        <trans-unit id="09bda428bc2298b8b7539bca171a741433df356b" translate="yes" xml:space="preserve">
          <source>The ones performed by webpack</source>
          <target state="translated">webpackで実行されるもの</target>
        </trans-unit>
        <trans-unit id="4bfd2812dad7481714822f78b90c34b30c6ddfde" translate="yes" xml:space="preserve">
          <source>The only downside is that you have to refresh your browser in order to see the changes. It would be much nicer if that would happen automatically as well, so let's try &lt;code&gt;webpack-dev-server&lt;/code&gt; which will do exactly that.</source>
          <target state="translated">唯一の欠点は、変更を確認するためにブラウザーを更新する必要があることです。それが自動的に行われるのであれば、はるかに優れているので、それを正確に &lt;code&gt;webpack-dev-server&lt;/code&gt; するwebpack-dev-serverを試してみましょう。</target>
        </trans-unit>
        <trans-unit id="675b305d4ff63e3176149aaef33ef4f487388862" translate="yes" xml:space="preserve">
          <source>The only placeholders allowed here are &lt;code&gt;[id]&lt;/code&gt; and &lt;code&gt;[fullhash]&lt;/code&gt;, the default being:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9970124635086c07500f383cb7b08142f6b26d7d" translate="yes" xml:space="preserve">
          <source>The only placeholders allowed here are &lt;code&gt;[id]&lt;/code&gt; and &lt;code&gt;[hash]&lt;/code&gt;, the default being:</source>
          <target state="translated">ここで許可される唯一のプレースホルダーは &lt;code&gt;[id]&lt;/code&gt; と &lt;code&gt;[hash]&lt;/code&gt; で、デフォルトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="396320c0f7e143551169eeaada1f51e98c1dcf71" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;importLoaders&lt;/code&gt; allows you to configure how many loaders before &lt;code&gt;css-loader&lt;/code&gt; should be applied to &lt;code&gt;@import&lt;/code&gt;ed resources.</source>
          <target state="translated">オプション &lt;code&gt;importLoaders&lt;/code&gt; あなたは前にどのように多くのローダー設定することができます &lt;code&gt;css-loader&lt;/code&gt; に適用されなければならない &lt;code&gt;@import&lt;/code&gt; 編資源。</target>
        </trans-unit>
        <trans-unit id="d67957273bfa0ed43d68187e13270aeec8738d11" translate="yes" xml:space="preserve">
          <source>The option can be set to a function:</source>
          <target state="translated">オプションに機能を設定することができます。</target>
        </trans-unit>
        <trans-unit id="ca2f308489f3cb4c9753c5ecdf071432bde39e75" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; object can include the following properties:</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; オブジェクトには、次のプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="473ac21de70831732dc9c0261c986382ed098a3d" translate="yes" xml:space="preserve">
          <source>The order of evaluation is as follows:</source>
          <target state="translated">評価の順番は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="13d2b81e1335f4b4f1ec4bbe1102fcca1d0d4c92" translate="yes" xml:space="preserve">
          <source>The origin of the host header is kept when proxying by default, you can set &lt;code&gt;changeOrigin&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to override this behaviour. It is useful in some cases like using &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_hosting#Name-based&quot;&gt;name-based virtual hosted sites&lt;/a&gt;.</source>
          <target state="translated">ホストヘッダーのオリジンは、デフォルトでプロキシするときに保持されます &lt;code&gt;changeOrigin&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定して、この動作をオーバーライドできます。これは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_hosting#Name-based&quot;&gt;名前ベースの仮想ホストサイトを&lt;/a&gt;使用する場合などに役立ちます。</target>
        </trans-unit>
        <trans-unit id="31ed028b00e592643594c4ed1b5accbc50db710c" translate="yes" xml:space="preserve">
          <source>The output directory as an &lt;strong&gt;absolute&lt;/strong&gt; path.</source>
          <target state="translated">&lt;strong&gt;絶対&lt;/strong&gt;パスとしての出力ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="3d39fb2dccd697e1450cca6b83dff11da76a49b5" translate="yes" xml:space="preserve">
          <source>The output file system you provide needs to be compatible with Node&amp;rsquo;s own &lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt; interface, which requires the &lt;code&gt;mkdirp&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; helper methods.</source>
          <target state="translated">指定する出力ファイルシステムは、Node独自の&lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt; &lt;code&gt;fs&lt;/code&gt; &lt;/a&gt;インターフェースと互換性がある必要があります。これには、 &lt;code&gt;mkdirp&lt;/code&gt; および &lt;code&gt;join&lt;/code&gt; ヘルパーメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="97cfcf8af47a75058c06094f0eff166707f2e3f7" translate="yes" xml:space="preserve">
          <source>The output filename for additional chunks</source>
          <target state="translated">追加チャンクの出力ファイル名</target>
        </trans-unit>
        <trans-unit id="267ff8bf01e4b400d5b984269cf06c01ded82d1d" translate="yes" xml:space="preserve">
          <source>The output filename for the SourceMap</source>
          <target state="translated">SourceMap の出力ファイル名</target>
        </trans-unit>
        <trans-unit id="a550b694aeec3339247a8ab6597116fefa3e71ad" translate="yes" xml:space="preserve">
          <source>The output filename of the bundle</source>
          <target state="translated">バンドルの出力ファイル名</target>
        </trans-unit>
        <trans-unit id="3c0e63df9024e8b756c01e045992b68f60f8d2a8" translate="yes" xml:space="preserve">
          <source>The output in webpack CLI will usually be:</source>
          <target state="translated">webpack CLIで出力されるのは、通常はこうなります。</target>
        </trans-unit>
        <trans-unit id="819f3534522471c5ea0e340b7688ce6e2986c41e" translate="yes" xml:space="preserve">
          <source>The output path for compilation assets</source>
          <target state="translated">コンパイルアセットの出力パス</target>
        </trans-unit>
        <trans-unit id="5b70b3de61d22026ac799699106326bd75dce5d5" translate="yes" xml:space="preserve">
          <source>The output shown from running webpack in the guides may differ slightly from the output of newer versions. This is to be expected. As long as the bundles look similar and run correctly, then there shouldn't be any issues. If you do come across an example that seems to be broken by a new version, please &lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/new/choose&quot;&gt;create an issue&lt;/a&gt; and we will do our best to resolve the discrepancy.</source>
          <target state="translated">ガイドでwebpackを実行して表示される出力は、新しいバージョンの出力とわずかに異なる場合があります。これは予想されることです。バンドルが類似していて正しく実行されている限り、問題は発生しません。新しいバージョンで壊れていると思われる例に遭遇した場合は&lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/new/choose&quot;&gt;、問題&lt;/a&gt;を作成してください。不一致を解決するために最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="d5cc37f8dd4438bd7f133d72882c40b943ab6a5b" translate="yes" xml:space="preserve">
          <source>The output shown from running webpack in the guides may differ slightly from the output of newer versions. This is to be expected. As long as the bundles look similar and run correctly, then there shouldn't be any issues. If you do come across an example that seems to be broken by a new version, please create an issue and we will do our best to resolve the discrepancy.</source>
          <target state="translated">ガイドにある webpack を実行して表示される出力は、新しいバージョンの出力とは若干異なる場合があります。これは予想されることです。バンドルが似ていて正しく動作する限り、何の問題もないはずです。新しいバージョンで壊れているように見える例に出くわした場合は、問題を作成してください。</target>
        </trans-unit>
        <trans-unit id="d7864ae5ef3f0b7a2f3aacd5831a1402dbade9c3" translate="yes" xml:space="preserve">
          <source>The output will be:</source>
          <target state="translated">出力されます。</target>
        </trans-unit>
        <trans-unit id="ac4f620d683122799ae83cf0db02aafdf66bbefc" translate="yes" xml:space="preserve">
          <source>The overhead for each chunks is provided by &lt;code&gt;options.chunkOverhead&lt;/code&gt; or defaults to 10000. Entry chunks sizes are multiplied by &lt;code&gt;options.entryChunkMultiplicator&lt;/code&gt; (or 10).</source>
          <target state="translated">各チャンクのオーバーヘッドは、 &lt;code&gt;options.chunkOverhead&lt;/code&gt; またはデフォルトで10000 によって提供されます。エントリチャンクのサイズは、 &lt;code&gt;options.entryChunkMultiplicator&lt;/code&gt; （または10）で乗算されます。</target>
        </trans-unit>
        <trans-unit id="1ffc4454ec79ccce614792e0786030f568ed2f17" translate="yes" xml:space="preserve">
          <source>The parent rule</source>
          <target state="translated">親のルール</target>
        </trans-unit>
        <trans-unit id="48346b22135d618621c9aadccdd01f3e12289eee" translate="yes" xml:space="preserve">
          <source>The passphrase to a SSL PFX file.</source>
          <target state="translated">SSL PFXファイルへのパスフレーズです。</target>
        </trans-unit>
        <trans-unit id="1e43a8c0fc7e1a7585805dedf3aee4f47e59de85" translate="yes" xml:space="preserve">
          <source>The path at which to connect to the reloading socket.</source>
          <target state="translated">リロードソケットに接続するためのパス。</target>
        </trans-unit>
        <trans-unit id="c529bebc1780eafbec77ee894590317e3f962db7" translate="yes" xml:space="preserve">
          <source>The path of the resource relative to the webpack/config &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">webpack / config &lt;code&gt;context&lt;/code&gt; するリソースのパス。</target>
        </trans-unit>
        <trans-unit id="548967eebc482b64ca17750fb858725c0c97647c" translate="yes" xml:space="preserve">
          <source>The path of the resource relative to the webpack/config context.</source>
          <target state="translated">webpack/config コンテキストからの相対的なリソースのパス。</target>
        </trans-unit>
        <trans-unit id="4c78e5d4376b497fb07e64c8073838d051cabd9d" translate="yes" xml:space="preserve">
          <source>The path used to resolve the file and any query params used on the first loader</source>
          <target state="translated">ファイルの解決に使用されたパスと、最初のローダで使用されたクエリパラメータ。</target>
        </trans-unit>
        <trans-unit id="bc1748e296ada53329650dd514e6aaa68127c896" translate="yes" xml:space="preserve">
          <source>The path used to resolve the file without any query params</source>
          <target state="translated">ファイルの解決に使用されるパスで、クエリのパラメータはありません。</target>
        </trans-unit>
        <trans-unit id="9e5f9675a08ce5ea1088e52bf48cd5689de48a41" translate="yes" xml:space="preserve">
          <source>The plugin adds extra functionality to support using Closure Library without Closure Compiler. This is typically used during development mode. When the webpack mode is &lt;code&gt;production&lt;/code&gt;, only dependency information is provided to webpack as Closure Compiler will natively recognize the Closure Library primitives.</source>
          <target state="translated">プラグインは、ClosureCompilerなしでClosureLibraryの使用をサポートする機能を追加します。これは通常、開発モードで使用されます。webpackモードが &lt;code&gt;production&lt;/code&gt; 環境の場合、ClosureCompilerはClosureLibraryプリミティブをネイティブに認識するため、依存関係情報のみがwebpackに提供されます。</target>
        </trans-unit>
        <trans-unit id="b0beb6d3ff727ba937ba38f74f40c0298b2547ed" translate="yes" xml:space="preserve">
          <source>The plugin controls several compiler flags. The following flags should not be used in any mode:</source>
          <target state="translated">このプラグインはいくつかのコンパイラフラグを制御します。以下のフラグはどのモードでも使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="9b11e7a0a95723e0438e10960cc010fdaf0de33c" translate="yes" xml:space="preserve">
          <source>The plugin interface allows users to tap directly into the compilation process. Plugins can register handlers on lifecycle hooks that run at different points throughout a compilation. When each hook is executed, the plugin will have full access to the current state of the compilation.</source>
          <target state="translated">プラグインのインターフェイスにより、ユーザーはコンパイルプロセスに直接触れることができます。プラグインは、コンパイル中の異なるポイントで実行されるライフサイクルフックにハンドラを登録することができます。各フックが実行されると、プラグインはコンパイルの現在の状態に完全にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="8cb735eab1dadd7d0602dbeaa5ae09439eae8e73" translate="yes" xml:space="preserve">
          <source>The plugin respect the &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; and using the &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; plugin. Using supported &lt;code&gt;devtool&lt;/code&gt; values enable source map generation. Using &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; with enabled the &lt;code&gt;columns&lt;/code&gt; option enables source map generation.</source>
          <target state="translated">プラグインは&lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt;を尊重し、 &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; プラグインを使用します。サポートされている &lt;code&gt;devtool&lt;/code&gt; 値を使用すると、ソースマップの生成が可能になります。 &lt;code&gt;columns&lt;/code&gt; オプションを有効にして &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; を使用すると、ソースマップの生成が有効になります。</target>
        </trans-unit>
        <trans-unit id="dd0b5545647ecbd76f1acc1cdea0d7a0971d8269" translate="yes" xml:space="preserve">
          <source>The plugin supports addons. For a list see the &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#plugins&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">プラグインはアドオンをサポートします。リストについては、&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#plugins&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a775448e75f0a6a6305222c79f1e629ab2a7f917" translate="yes" xml:space="preserve">
          <source>The plugin supports addons. For a list see the &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#third-party-addons&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">プラグインはアドオンをサポートしています。リストについては、&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#third-party-addons&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="084e87901929b57ce0c6f43558d337b7b316c97b" translate="yes" xml:space="preserve">
          <source>The plugin was born with the purpose of solving some problems of the &lt;a href=&quot;https://github.com/webpack-contrib/eslint-loader&quot;&gt;eslint-loader&lt;/a&gt;.</source>
          <target state="translated">プラグインは、&lt;a href=&quot;https://github.com/webpack-contrib/eslint-loader&quot;&gt;eslint-loaderの&lt;/a&gt;いくつかの問題を解決する目的で生まれました。</target>
        </trans-unit>
        <trans-unit id="72e5541fb2a2286d59ee1b4f3ca68de005f71fb2" translate="yes" xml:space="preserve">
          <source>The plugin will generate an HTML5 file for you that includes all your webpack bundles in the body using &lt;code&gt;script&lt;/code&gt; tags. Just add the plugin to your webpack config as follows:</source>
          <target state="translated">プラグインは、 &lt;code&gt;script&lt;/code&gt; タグを使用して本文にすべてのWebpackバンドルを含むHTML5ファイルを生成します。以下のようにプラグインをwebpack設定に追加するだけです：</target>
        </trans-unit>
        <trans-unit id="3ed2e536f6a275fdefcc3672ce01ba8618d99e24" translate="yes" xml:space="preserve">
          <source>The plugin will generate an HTML5 file for you that includes all your webpack bundles in the body using &lt;code&gt;script&lt;/code&gt; tags. Just add the plugin to your webpack configuration as follows:</source>
          <target state="translated">プラグインは、 &lt;code&gt;script&lt;/code&gt; タグを使用して、本文にすべてのWebpackバンドルを含むHTML5ファイルを生成します。次のように、プラグインをWebpack構成に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="b8fd921987632c61c52ab716b36342323513a6bc" translate="yes" xml:space="preserve">
          <source>The plugin's signature:</source>
          <target state="translated">プラグインのシグネチャ。</target>
        </trans-unit>
        <trans-unit id="23dbb446b166d9f36a900050b47f2d3ab1a6afa9" translate="yes" xml:space="preserve">
          <source>The plugins should be used if you run the bundle in a Node.js environment.</source>
          <target state="translated">プラグインはNode.js環境でバンドルを実行する場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6472732673cddb28039954632e457f1b136ce099" translate="yes" xml:space="preserve">
          <source>The point or points to enter the application. At this point the application starts executing. If an array is passed all items will be executed.</source>
          <target state="translated">アプリケーションに入るポイントまたはポイント。この時点でアプリケーションは実行を開始します。配列が渡された場合は、すべての項目が実行されます。</target>
        </trans-unit>
        <trans-unit id="77842ff7ef8a6f211f993de98ff39ff3f8f41102" translate="yes" xml:space="preserve">
          <source>The point or points where to start the application bundling process. If an array is passed then all items will be processed.</source>
          <target state="translated">アプリケーションのバンドル処理を開始するポイントまたはポイント。配列が渡された場合は、すべての項目が処理されます。</target>
        </trans-unit>
        <trans-unit id="dbc0c621862eb10035838f19d0cd0730d204ee81" translate="yes" xml:space="preserve">
          <source>The polling interval for watching (also enable polling)</source>
          <target state="translated">視聴のポーリング間隔(ポーリングも有効)</target>
        </trans-unit>
        <trans-unit id="96824a1c75210ba1ee627b59831b3225278df6a3" translate="yes" xml:space="preserve">
          <source>The pre-bundled version looks like this:</source>
          <target state="translated">プリバンドル版はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="c11efdad805348277f06f272a3b9067b34acad77" translate="yes" xml:space="preserve">
          <source>The prefix length of the hash digest to use, defaults to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">使用するハッシュダイジェストのプレフィックス長。デフォルトは &lt;code&gt;20&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3ee8c61dcc774a14c4a2fb47133c38c892d234e4" translate="yes" xml:space="preserve">
          <source>The prefix length of the hash digest to use.</source>
          <target state="translated">使用するハッシュダイジェストの接頭辞の長さ。</target>
        </trans-unit>
        <trans-unit id="cfe78750ed83bb76df27ef5f00b72ad4f03945b1" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;Promise&lt;/code&gt; library is referenced and used before it is overridden.</source>
          <target state="translated">以前の &lt;code&gt;Promise&lt;/code&gt; ライブラリは、オーバーライドされる前に参照および使用されます。</target>
        </trans-unit>
        <trans-unit id="392b59f1ddb5800fa5975bed7c141104e2fb531e" translate="yes" xml:space="preserve">
          <source>The process is calling the &lt;code&gt;accept&lt;/code&gt; handlers and re-executing self-accepted modules</source>
          <target state="translated">プロセスは &lt;code&gt;accept&lt;/code&gt; ハンドラを呼び出し、自己受け入れモジュールを再実行しています</target>
        </trans-unit>
        <trans-unit id="6521adb388facad5268660cc975a5e88f24fce11" translate="yes" xml:space="preserve">
          <source>The process is calling the &lt;code&gt;dispose&lt;/code&gt; handlers on the modules that will be replaced</source>
          <target state="translated">プロセスは、置き換えられるモジュールの &lt;code&gt;dispose&lt;/code&gt; ハンドラーを呼び出しています</target>
        </trans-unit>
        <trans-unit id="ad173f9a14c3ddc81844b3f1137e787fca15d523" translate="yes" xml:space="preserve">
          <source>The process is checking for updates</source>
          <target state="translated">プロセスが更新されているかどうかをチェックしています。</target>
        </trans-unit>
        <trans-unit id="4759bc6ae5559dc09c35f8668d736f2ae3508206" translate="yes" xml:space="preserve">
          <source>The process is getting ready for the update (e.g. downloading the updated module)</source>
          <target state="translated">更新の準備をしています(更新されたモジュールをダウンロードするなど)。</target>
        </trans-unit>
        <trans-unit id="39b0a4c5329372428d4ac3023ae6b4a24f3adef6" translate="yes" xml:space="preserve">
          <source>The process is waiting for a call to &lt;code&gt;check&lt;/code&gt; (see below)</source>
          <target state="translated">プロセスは &lt;code&gt;check&lt;/code&gt; 呼び出しを待機しています（以下を参照）</target>
        </trans-unit>
        <trans-unit id="da0d9c2bcbd05524ccb997bcead89cb202e57f85" translate="yes" xml:space="preserve">
          <source>The public path for the assets</source>
          <target state="translated">資産のための公道</target>
        </trans-unit>
        <trans-unit id="cb86a22bbc4606b38567e92006152c02a74c9252" translate="yes" xml:space="preserve">
          <source>The query of the resource, i.e. &lt;code&gt;?foo=bar&lt;/code&gt;.</source>
          <target state="translated">リソースのクエリ、つまり &lt;code&gt;?foo=bar&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e000088ad11082bbbe5a98b178ad198d4f76470" translate="yes" xml:space="preserve">
          <source>The query of the resource.</source>
          <target state="translated">リソースのクエリです。</target>
        </trans-unit>
        <trans-unit id="9ffb3bc216dc8a7e0d1139c2c7c1d7964b2fcb6e" translate="yes" xml:space="preserve">
          <source>The query parameter &lt;code&gt;importLoaders&lt;/code&gt; allows to configure how many loaders before &lt;code&gt;css-loader&lt;/code&gt; should be applied to &lt;code&gt;@import&lt;/code&gt;ed resources.</source>
          <target state="translated">クエリパラメータ &lt;code&gt;importLoaders&lt;/code&gt; を使用すると、 &lt;code&gt;css-loader&lt;/code&gt; を &lt;code&gt;@import&lt;/code&gt; edリソースに適用する前にローダーの数を構成できます。</target>
        </trans-unit>
        <trans-unit id="a6676ec8ba190e154043d97da697c1d7c9a7c0d0" translate="yes" xml:space="preserve">
          <source>The query parameter &lt;code&gt;modules&lt;/code&gt; enables the &lt;strong&gt;CSS Modules&lt;/strong&gt; spec.</source>
          <target state="translated">クエリパラメータ &lt;code&gt;modules&lt;/code&gt; は、&lt;strong&gt;CSSモジュール&lt;/strong&gt;仕様を有効にします。</target>
        </trans-unit>
        <trans-unit id="3505e465d18f3771163a660a2e747e533a6a0c35" translate="yes" xml:space="preserve">
          <source>The raw require function. This expression isn't parsed by the Parser for dependencies.</source>
          <target state="translated">生のrequire関数です。この式は依存性のためにパーサーによって解析されません。</target>
        </trans-unit>
        <trans-unit id="839aba6b25dd0c8b662bb331ab8b59ee74817839" translate="yes" xml:space="preserve">
          <source>The reason we need &lt;code&gt;default&lt;/code&gt; is that since webpack 4, when importing a CommonJS module, the import will no longer resolve to the value of &lt;code&gt;module.exports&lt;/code&gt;, it will instead create an artificial namespace object for the CommonJS module. For more information on the reason behind this, read &lt;a href=&quot;https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655&quot;&gt;webpack 4: import() and CommonJs&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; が必要な理由は、webpack 4以降、CommonJSモジュールをインポートするときに、インポートが &lt;code&gt;module.exports&lt;/code&gt; の値に解決されず、代わりにCommonJSモジュールの人工的な名前空間オブジェクトが作成されるためです。この背後にある理由の詳細については、&lt;a href=&quot;https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655&quot;&gt;webpack 4：import（）およびCommonJsを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="092899a9890c9149ab3ac8291fc14610f558cc74" translate="yes" xml:space="preserve">
          <source>The remainder of this guide will stem from &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt;. If you haven't read through that guide already, please do so now.</source>
          <target state="translated">このガイドの残りの部分は、&lt;a href=&quot;getting-started&quot;&gt;はじめに&lt;/a&gt;から始まります。そのガイドをまだ読んでいない場合は、今すぐ読んでください。</target>
        </trans-unit>
        <trans-unit id="f1829880bae1c785aa269cd8ac49c93162f07fa2" translate="yes" xml:space="preserve">
          <source>The reporter function will be excuted with the loader context as &lt;code&gt;this&lt;/code&gt;. You may emit messages using &lt;code&gt;this.emitWarning(...)&lt;/code&gt; or &lt;code&gt;this.emitError(...)&lt;/code&gt;. See &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;webpack docs on loader context&lt;/a&gt;.</source>
          <target state="translated">レポーター関数は、ローダーコンテキスト &lt;code&gt;this&lt;/code&gt; として実行されます。 &lt;code&gt;this.emitWarning(...)&lt;/code&gt; または &lt;code&gt;this.emitError(...)&lt;/code&gt; を使用してメッセージを送信できます。&lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;ローダーコンテキストに関するwebpackドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="46056f0f9b6a95a54bd9a4410020bf916e27bee7" translate="yes" xml:space="preserve">
          <source>The reporter function will be passed an array of errors/warnings produced by JSHint with the following structure:</source>
          <target state="translated">レポーター関数には、JSHintが生成するエラー/警告の配列が以下の構造で渡されます。</target>
        </trans-unit>
        <trans-unit id="9832e252c089a76e52186789fa74082b68c95b94" translate="yes" xml:space="preserve">
          <source>The resolved request string.</source>
          <target state="translated">解決されたリクエスト文字列。</target>
        </trans-unit>
        <trans-unit id="9d809278234aebfd0e7cff2e2c8af4a8c69b9ff5" translate="yes" xml:space="preserve">
          <source>The resolver plugins, e.g. &lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt;&lt;code&gt;DirectoryNamedPlugin&lt;/code&gt;&lt;/a&gt;, can be included directly in &lt;code&gt;resolve.plugins&lt;/code&gt; rather than using directly in &lt;a href=&quot;../configuration/plugins#plugins&quot;&gt;&lt;code&gt;plugins&lt;/code&gt; configuration option&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt; &lt;code&gt;DirectoryNamedPlugin&lt;/code&gt; &lt;/a&gt;などのリゾルバープラグインは、&lt;a href=&quot;../configuration/plugins#plugins&quot;&gt; &lt;code&gt;plugins&lt;/code&gt; &lt;/a&gt;構成オプションで直接使用するのではなく、 &lt;code&gt;resolve.plugins&lt;/code&gt; に直接含めることができます。</target>
        </trans-unit>
        <trans-unit id="ce32757da121c3a937bde8602723d7dd668a47da" translate="yes" xml:space="preserve">
          <source>The resolver plugins, e.g. &lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt;&lt;code&gt;DirectoryNamedPlugin&lt;/code&gt;&lt;/a&gt;, can be included directly in &lt;code&gt;resolve.plugins&lt;/code&gt; rather than using standard plugins. Note that the &lt;code&gt;resolve&lt;/code&gt; configuration affects the &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; resolvers while &lt;code&gt;resolveLoader&lt;/code&gt; is used to modify the &lt;code&gt;loader&lt;/code&gt; resolver.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt; &lt;code&gt;DirectoryNamedPlugin&lt;/code&gt; &lt;/a&gt;などのリゾルバープラグインは、標準プラグインを使用するのではなく、 &lt;code&gt;resolve.plugins&lt;/code&gt; に直接含めることができます。 &lt;code&gt;resolveLoader&lt;/code&gt; を使用して &lt;code&gt;loader&lt;/code&gt; リゾルバーを変更する一方で、 &lt;code&gt;resolve&lt;/code&gt; 構成は &lt;code&gt;normal&lt;/code&gt; リゾルバーと &lt;code&gt;context&lt;/code&gt; リゾルバーに影響を与えることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f0f4846e8028f9a80dd0d8c0ef30ddcd09e4241e" translate="yes" xml:space="preserve">
          <source>The resolvers mentioned above can also be customized via a configuration file with the &lt;a href=&quot;../configuration/resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt;&lt;code&gt;resolveLoader&lt;/code&gt;&lt;/a&gt; options. These options allow users to change the resolving behavior through a variety of options including through resolve &lt;code&gt;plugins&lt;/code&gt;.</source>
          <target state="translated">上記のリゾルバーは、&lt;a href=&quot;../configuration/resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt; &lt;code&gt;resolveLoader&lt;/code&gt; &lt;/a&gt;オプションを使用して構成ファイルを介してカスタマイズすることもできます。これらのオプションにより、ユーザーは解決 &lt;code&gt;plugins&lt;/code&gt; を含むさまざまなオプションを通じて解決動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="5d0fd93852dd662bc6b879642ac9e4e4d5b03796" translate="yes" xml:space="preserve">
          <source>The resource file.</source>
          <target state="translated">リソースファイルです。</target>
        </trans-unit>
        <trans-unit id="a4cd8313da62b6881779fdfaa0180a987b0cdd4f" translate="yes" xml:space="preserve">
          <source>The resource part of the request, including query.</source>
          <target state="translated">クエリを含むリクエストのリソース部分。</target>
        </trans-unit>
        <trans-unit id="6f290b949856d1410b77b558b0c660ec9cabd3a5" translate="yes" xml:space="preserve">
          <source>The resource query of the current module. If the following &lt;code&gt;require&lt;/code&gt; call was made, then the query string would be available in &lt;code&gt;file.js&lt;/code&gt;.</source>
          <target state="translated">現在のモジュールのリソースクエリ。次の &lt;code&gt;require&lt;/code&gt; 呼び出しが行われた場合、クエリ文字列は &lt;code&gt;file.js&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="a4c514f8ccaf5649c6351763537ef961c30fd000" translate="yes" xml:space="preserve">
          <source>The resource query of the current module. If the following &lt;code&gt;require&lt;/code&gt; call were made, then the query string would be available in &lt;code&gt;file.js&lt;/code&gt;.</source>
          <target state="translated">現在のモジュールのリソースクエリ。次の &lt;code&gt;require&lt;/code&gt; 呼び出しが行われた場合、クエリ文字列は &lt;code&gt;file.js&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="e4780d56cbc686c5ce3270f7769038e13ae838f0" translate="yes" xml:space="preserve">
          <source>The resource: An absolute path to the file requested. It's already resolved according to the &lt;a href=&quot;resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt; rules&lt;/a&gt;.</source>
          <target state="translated">リソース：要求されたファイルへの絶対パス。&lt;a href=&quot;resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; ルール&lt;/a&gt;に従ってすでに解決されています。</target>
        </trans-unit>
        <trans-unit id="01c6e113f51546fcaa75367b348564232431d01b" translate="yes" xml:space="preserve">
          <source>The resulting configuration object would resemble:</source>
          <target state="translated">結果として得られる設定オブジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d5fcb09293cddfb6fac196a1f2ae3817a3ca173b" translate="yes" xml:space="preserve">
          <source>The rules can be disabled using the following options in your &lt;code&gt;webpack.conf.js&lt;/code&gt;</source>
          <target state="translated">ルールは、 &lt;code&gt;webpack.conf.js&lt;/code&gt; で以下のオプションを使用して無効にできます。</target>
        </trans-unit>
        <trans-unit id="97262fc608fb5c3c1ca59507abc23b2d97ffaa58" translate="yes" xml:space="preserve">
          <source>The runtime asynchronously downloads the updates and notifies the application.</source>
          <target state="translated">ランタイムは非同期的に更新をダウンロードし、アプリケーションに通知します。</target>
        </trans-unit>
        <trans-unit id="6fca03cfbb7a42f44c98900865cadf2c926101c4" translate="yes" xml:space="preserve">
          <source>The runtime code detects already added CSS via &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. This can be useful when injecting CSS on server-side for Server-Side-Rendering. The &lt;code&gt;href&lt;/code&gt; of the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag has to match the URL that will be used for loading the CSS chunk. The &lt;code&gt;data-href&lt;/code&gt; attribute can be used for &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; too. When inlining CSS &lt;code&gt;data-href&lt;/code&gt; must be used.</source>
          <target state="translated">ランタイムコードは、 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; タグを介してすでに追加されているCSSを検出します。これは、サーバー側レンダリングのためにサーバー側にCSSを注入するときに役立ちます。 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; タグの &lt;code&gt;href&lt;/code&gt; は、CSSチャンクのロードに使用されるURLと一致する必要があります。 &lt;code&gt;data-href&lt;/code&gt; 属性がために使用することができる &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; すぎ。 CSSをインライン化する場合は、 &lt;code&gt;data-href&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a78efb0808055f65bb7c8c45f825cc95b4914fbe" translate="yes" xml:space="preserve">
          <source>The runtime synchronously applies the updates.</source>
          <target state="translated">ランタイムは同期的に更新を適用します。</target>
        </trans-unit>
        <trans-unit id="22c88bf74eeb1c895a2476d06df2afcbf140bbb5" translate="yes" xml:space="preserve">
          <source>The runtime, along with the manifest data, is basically all the code webpack needs to connect your modularized application while it's running in the browser. It contains the loading and resolving logic needed to connect your modules as they interact. This includes connecting modules that have already been loaded into the browser as well as logic to lazy-load the ones that haven't.</source>
          <target state="translated">ランタイムは、マニフェストデータと一緒に、基本的にはブラウザで実行している間、モジュール化されたアプリケーションを接続するために webpack が必要とするすべてのコードです。ランタイムには、モジュールが相互作用しながら接続するのに必要なロードと解決のロジックが含まれています。これには、すでにブラウザにロードされているモジュールの接続や、ロードされていないモジュールを遅延ロードするロジックが含まれます。</target>
        </trans-unit>
        <trans-unit id="70b63872573cf38e68d77c29277931f4da8eb8e5" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; but for &lt;a href=&quot;../guides/asset-modules&quot;&gt;Asset Modules&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt;と同じですが、&lt;a href=&quot;../guides/asset-modules&quot;&gt;アセットモジュール用です&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc2c4ae26a6eae362e4487bbd392bf0a2e98d3a8" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;output#outputassetmodulefilename&quot;&gt;&lt;code&gt;output.assetModuleFilename&lt;/code&gt;&lt;/a&gt; but for specific rule. Overrides &lt;code&gt;output.assetModuleFilename&lt;/code&gt; and works only with &lt;code&gt;asset&lt;/code&gt; and &lt;code&gt;asset/resource&lt;/code&gt; module types.</source>
          <target state="translated">&lt;a href=&quot;output#outputassetmodulefilename&quot;&gt; &lt;code&gt;output.assetModuleFilename&lt;/code&gt; &lt;/a&gt;と同じですが、特定のルール用です。オーバーライド &lt;code&gt;output.assetModuleFilename&lt;/code&gt; とでのみ動作し &lt;code&gt;asset&lt;/code&gt; および &lt;code&gt;asset/resource&lt;/code&gt; モジュールタイプ。</target>
        </trans-unit>
        <trans-unit id="3c2d69006c9f2c04928fcb8a9dcc73f5a62b5cf3" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;node-webkit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;node-webkit&lt;/code&gt; と同じ</target>
        </trans-unit>
        <trans-unit id="0acfe5a92bfd936f558865b7784ff994e921d19f" translate="yes" xml:space="preserve">
          <source>The same shortcut as an array can be used for the return value (i.e. &lt;code&gt;use: [ 'style-loader' ]&lt;/code&gt;).</source>
          <target state="translated">配列と同じショートカットを戻り値に使用できます（つまり &lt;code&gt;use: [ 'style-loader' ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2b665da5e519d5e540da3b313a41a99cd0ecf3a1" translate="yes" xml:space="preserve">
          <source>The sass-loader requires &lt;a href=&quot;https://github.com/webpack&quot;&gt;webpack&lt;/a&gt; as a &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;&lt;code&gt;peerDependency&lt;/code&gt;&lt;/a&gt; and it requires you to install either &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt; or &lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt; on your own. This allows you to control the versions of all your dependencies, and to choose which Sass implementation to use.</source>
          <target state="translated">sass-loaderは、&lt;a href=&quot;https://github.com/webpack&quot;&gt;peerDependency&lt;/a&gt;として&lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt; &lt;code&gt;peerDependency&lt;/code&gt; &lt;/a&gt;を必要とし、&lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt;または&lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt;を自分でインストールする必要があります。これにより、すべての依存関係のバージョンを制御し、使用するSass実装を選択できます。</target>
        </trans-unit>
        <trans-unit id="34aa382924eb34a97b5ff040bbe8c678d0951eb6" translate="yes" xml:space="preserve">
          <source>The second argument a &lt;code&gt;string&lt;/code&gt; or a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2番目の引数は &lt;code&gt;string&lt;/code&gt; または&lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9f40ba461a9658ddbae40cc1a6452af405d39a0a" translate="yes" xml:space="preserve">
          <source>The second argument is a &lt;code&gt;string&lt;/code&gt; or a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2番目の引数は &lt;code&gt;string&lt;/code&gt; または&lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="df04995c9f49009e24f0c183707f430b6ea80c03" translate="yes" xml:space="preserve">
          <source>The second argument is an array of file paths to watch for. Pass &lt;code&gt;true&lt;/code&gt; instead of &lt;code&gt;[string]&lt;/code&gt; here to flag the module as uncacheable.</source>
          <target state="translated">2番目の引数は、監視するファイルパスの配列です。合格 &lt;code&gt;true&lt;/code&gt; の代わりに &lt;code&gt;[string]&lt;/code&gt; キャッシュ不可能としてモジュールフラグをここに。</target>
        </trans-unit>
        <trans-unit id="9eb3a2178fb08052e95c8397dfaf7a97e66d1c0a" translate="yes" xml:space="preserve">
          <source>The server should be accessible on &lt;code&gt;http://10.10.10.61:8080&lt;/code&gt; now. If you make a change in &lt;code&gt;app.js&lt;/code&gt;, it should live reload.</source>
          <target state="translated">サーバーは &lt;code&gt;http://10.10.10.61:8080&lt;/code&gt; でアクセスできるはずです。 &lt;code&gt;app.js&lt;/code&gt; に変更を加えると、ライブで再読み込みされます。</target>
        </trans-unit>
        <trans-unit id="36694462fb15a2bc75a3fea2f02d4342fbda1a03" translate="yes" xml:space="preserve">
          <source>The single entry syntax for the &lt;code&gt;entry&lt;/code&gt; property is a shorthand for:</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; プロパティの単一のエントリ構文は、以下の省略形です。</target>
        </trans-unit>
        <trans-unit id="115c455da79a8006628c20e59f638f4b9b64b4d0" translate="yes" xml:space="preserve">
          <source>The source code you, and maybe your team, have written.</source>
          <target state="translated">あなたやおそらくあなたのチームが書いたソースコード。</target>
        </trans-unit>
        <trans-unit id="28cb8cd49852f753c9f2be8f92238b51bbe3f7ae" translate="yes" xml:space="preserve">
          <source>The spec for &lt;code&gt;import&lt;/code&gt; doesn't allow control over the chunk's name or other properties as &quot;chunks&quot; are only a concept within webpack. Luckily webpack allows some special parameters via comments so as to not break the spec:</source>
          <target state="translated">「チャンク」はWebpack内の概念にすぎないため、 &lt;code&gt;import&lt;/code&gt; の仕様では、チャンクの名前やその他のプロパティを制御できません。幸いなことに、webpackは仕様を壊さないようにコメントを介していくつかの特別なパラメーターを許可します：</target>
        </trans-unit>
        <trans-unit id="05f9d310d6b1645304fb71809f2e5decd348a40d" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;implementation&lt;/code&gt; option determines which implementation of Less to use. Overrides the locally installed &lt;code&gt;peerDependency&lt;/code&gt; version of &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9db5546b423fb98bd6ac711ec8bcb1997664853" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;implementation&lt;/code&gt; option determines which implementation of PostCSS to use. Overrides the locally installed &lt;code&gt;peerDependency&lt;/code&gt; version of &lt;code&gt;postcss&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0675c0031efa142feb44abd09373964cd599c1" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;implementation&lt;/code&gt; option determines which implementation of Sass to use.</source>
          <target state="translated">特別な &lt;code&gt;implementation&lt;/code&gt; オプションは、使用するSassの実装を決定します。</target>
        </trans-unit>
        <trans-unit id="13755577ac5a47dc78ee4c995fe1dfc9e99d9c04" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;implementation&lt;/code&gt; option determines which implementation of Sass to use. It takes either a [Node Sass][] or a [Dart Sass][] module. For example, to use Dart Sass, you'd pass:</source>
          <target state="translated">特別な &lt;code&gt;implementation&lt;/code&gt; オプションは、使用するSassの実装を決定します。[Node Sass] []または[Dart Sass] []モジュールのいずれかを取ります。たとえば、Dart Sassを使用するには、次のように渡します。</target>
        </trans-unit>
        <trans-unit id="5c4b162f681173ae925ce59ee2d62441d980bbc0" translate="yes" xml:space="preserve">
          <source>The steps above would be shortened to:</source>
          <target state="translated">上記のステップを短くすると</target>
        </trans-unit>
        <trans-unit id="c086ef368c2e61193dc23f5a88ecd75a1567c8f6" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;:local(.className)&lt;/code&gt; can be used to declare &lt;code&gt;className&lt;/code&gt; in the local scope. The local identifiers are exported by the module.</source>
          <target state="translated">構文 &lt;code&gt;:local(.className)&lt;/code&gt; を使用して、ローカルスコープで &lt;code&gt;className&lt;/code&gt; を宣言できます。ローカル識別子はモジュールによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="6c080a2f2285ca1d1604a8b397e768aea30b9793" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="fc0e5cab2c02c3cbb325fe5bd464f4e5ea7336eb" translate="yes" xml:space="preserve">
          <source>The syntax was chosen to allow running code without bundler, it is also available in native ECMAScript modules in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a16d57fa62224eed23c5bf7c1e111292049ad9" translate="yes" xml:space="preserve">
          <source>The target asset filename</source>
          <target state="translated">対象となるアセットのファイル名</target>
        </trans-unit>
        <trans-unit id="2716905e673426c395a43315d25accc4c07f4a9b" translate="yes" xml:space="preserve">
          <source>The target asset filename.</source>
          <target state="translated">対象となるアセットのファイル名。</target>
        </trans-unit>
        <trans-unit id="636a5736cf2581279ebfb2a0261adf16ae389bb9" translate="yes" xml:space="preserve">
          <source>The target asset name. &lt;code&gt;[file]&lt;/code&gt; is replaced with the original asset. &lt;code&gt;[path]&lt;/code&gt; is replaced with the path of the original asset and &lt;code&gt;[query]&lt;/code&gt; with the query</source>
          <target state="translated">ターゲットアセット名。 &lt;code&gt;[file]&lt;/code&gt; は元のアセットに置き換えられます。 &lt;code&gt;[path]&lt;/code&gt; は元のアセットのパスで置き換えられ、 &lt;code&gt;[query]&lt;/code&gt; はクエリで置き換えられます</target>
        </trans-unit>
        <trans-unit id="177bdd7144528e0a066a492e3ba76b2ce123f46a" translate="yes" xml:space="preserve">
          <source>The target module is called with two arguments: &lt;code&gt;(options, loaderContext)&lt;/code&gt;</source>
          <target state="translated">ターゲットモジュールは、2つの引数で呼び出されます:( &lt;code&gt;(options, loaderContext)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eba2325dc692f9ab9bafbbb2beda8299b674eba5" translate="yes" xml:space="preserve">
          <source>The third-party &lt;a href=&quot;https://github.com/mrsteele/dotenv-webpack&quot;&gt;&lt;code&gt;DotenvPlugin&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;dotenv-webpack&lt;/code&gt;) allows you to expose (a subset of) &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv variables&lt;/a&gt;:</source>
          <target state="translated">サードパーティの&lt;a href=&quot;https://github.com/mrsteele/dotenv-webpack&quot;&gt; &lt;code&gt;DotenvPlugin&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;dotenv-webpack&lt;/code&gt; ）を使用すると、&lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv変数&lt;/a&gt;（のサブセット）を公開できます。</target>
        </trans-unit>
        <trans-unit id="ba0623dec4dcfaa3539a27d267af37d4a6c6159b" translate="yes" xml:space="preserve">
          <source>The tools in this guide are &lt;strong&gt;only meant for development&lt;/strong&gt;, please &lt;strong&gt;avoid&lt;/strong&gt; using them in production!</source>
          <target state="translated">このガイドのツールは&lt;strong&gt;開発専用&lt;/strong&gt;です。本番&lt;strong&gt;環境での&lt;/strong&gt;使用は&lt;strong&gt;避け&lt;/strong&gt;てください。</target>
        </trans-unit>
        <trans-unit id="d03833fb081139e2861c0b6bac6df6e16c42c69b" translate="yes" xml:space="preserve">
          <source>The top-level &lt;code&gt;output&lt;/code&gt; key contains set of options instructing webpack on how and where it should output your bundles, assets and anything else you bundle or load with webpack.</source>
          <target state="translated">トップレベルの &lt;code&gt;output&lt;/code&gt; キーには、バンドル、アセット、およびwebpackにバンドルまたはロードするその他のものを出力する方法と場所をwebpackに指示するオプションのセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="23ddc8426f41fcf0c2f24729e02738cbc0c4ea94" translate="yes" xml:space="preserve">
          <source>The top-level structure of the output JSON file is fairly straightforward but there are a few nested data structures as well. Each nested structure has a dedicated section below to make this document more consumable. Note that you can click links within the top-level structure below to jump to relevant sections and documentation:</source>
          <target state="translated">出力JSONファイルのトップレベルの構造は非常に単純ですが、いくつかの入れ子になったデータ構造もあります。それぞれのネストされた構造は、このドキュメントをより使いやすくするために、以下に専用のセクションを設けています。以下のトップレベル構造内のリンクをクリックすると、関連するセクションやドキュメントにジャンプできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="21fac4f66ee3d2ee67766bb850f5c7ffd7ea15c9" translate="yes" xml:space="preserve">
          <source>The total modules count is unknown in advance and changes during the build. This may cause inaccurate progress percentage.</source>
          <target state="translated">総モジュール数は事前に不明で、ビルド中に変更されます。そのため、進捗率が不正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bcc561d5b45341ac9ae52e7eceff1b71c210b154" translate="yes" xml:space="preserve">
          <source>The type for exposing the exports of the entry point as library</source>
          <target state="translated">エントリポイントのエクスポートをライブラリとして公開するための型</target>
        </trans-unit>
        <trans-unit id="1b0130c377a6b1943c155f390a9bb614091aca89" translate="yes" xml:space="preserve">
          <source>The type of hash that the has function should use. Valid values include: &lt;code&gt;md4&lt;/code&gt;, &lt;code&gt;md5&lt;/code&gt;, &lt;code&gt;sha1&lt;/code&gt;, &lt;code&gt;sha256&lt;/code&gt;, and &lt;code&gt;sha512&lt;/code&gt;.</source>
          <target state="translated">has関数が使用する必要があるハッシュのタイプ。有効な値には、 &lt;code&gt;md4&lt;/code&gt; 、 &lt;code&gt;md5&lt;/code&gt; 、 &lt;code&gt;sha1&lt;/code&gt; 、 &lt;code&gt;sha256&lt;/code&gt; 、および &lt;code&gt;sha512&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="52496825e602d46c2484208661a0dbf58d19c31d" translate="yes" xml:space="preserve">
          <source>The type of hash that the has function should use. Valid values include: md5, sha1, sha256, and sha512.</source>
          <target state="translated">has 関数が使用するハッシュの種類を指定します。有効な値は md5、sha1、sha256、sha512 です。</target>
        </trans-unit>
        <trans-unit id="eb1ba693e91aeced7bfd7d3c4973add619d0c630" translate="yes" xml:space="preserve">
          <source>The update is prepared and available</source>
          <target state="translated">アップデートが準備され、利用できるようになりました</target>
        </trans-unit>
        <trans-unit id="61a9637f0952375cb9aed04469dd726cfd952673" translate="yes" xml:space="preserve">
          <source>The updated &lt;a href=&quot;manifest&quot;&gt;manifest&lt;/a&gt; (JSON)</source>
          <target state="translated">更新された&lt;a href=&quot;manifest&quot;&gt;マニフェスト&lt;/a&gt;（JSON）</target>
        </trans-unit>
        <trans-unit id="b7f04ddab5440093506974af2f71afb5c69d6443" translate="yes" xml:space="preserve">
          <source>The usage of these properties is highly discouraged since we are planning to remove them from the context. They are still listed here for documentation purposes.</source>
          <target state="translated">私たちはこれらのプロパティをコンテキストから削除する予定なので、これらのプロパティの使用は非常にお勧めしません。これらのプロパティは、文書化の目的でここにリストアップされています。</target>
        </trans-unit>
        <trans-unit id="09a01ba6fc5ac28730420b58f620f492ea97a0a5" translate="yes" xml:space="preserve">
          <source>The usage specification for the library use will be as follows:</source>
          <target state="translated">ライブラリ利用時の利用仕様は以下の通りとなります。</target>
        </trans-unit>
        <trans-unit id="ad8f6ee6214c162258ff694b7015ecaf7841b5c9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;System.import&lt;/code&gt; in webpack &lt;a href=&quot;https://github.com/webpack/webpack/issues/2163&quot;&gt;did not fit the proposed spec&lt;/a&gt;, so it was deprecated in webpack &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28&quot;&gt;2.1.0-beta.28&lt;/a&gt; in favor of &lt;code&gt;import()&lt;/code&gt;.</source>
          <target state="translated">webpack での &lt;code&gt;System.import&lt;/code&gt; の使用は&lt;a href=&quot;https://github.com/webpack/webpack/issues/2163&quot;&gt;提案された仕様&lt;/a&gt;に適合しなかったため、 &lt;code&gt;import()&lt;/code&gt; を優先してwebpack &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28&quot;&gt;2.1.0-beta.28&lt;/a&gt;で非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="29aed52fbed5a1ee08cf94c8c33cc34833f0cd7d" translate="yes" xml:space="preserve">
          <source>The use of IIFEs led to tools like Make, Gulp, Grunt, Broccoli or Brunch. These tools are known as task runners, and they concatenate all your project files together.</source>
          <target state="translated">IIFEを使うことで、Make、Gulp、Grunt、Broccoli、Brunchのようなツールが生まれました。これらのツールはタスクランナーとして知られており、すべてのプロジェクトファイルを連結してくれます。</target>
        </trans-unit>
        <trans-unit id="43ce4cf602e81313a6d20c96af3f2f1a73a256a9" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;&quot;single&quot;&lt;/code&gt; instead creates a runtime file to be shared for all generated chunks. This setting is an alias for:</source>
          <target state="translated">代わりに、値 &lt;code&gt;&quot;single&quot;&lt;/code&gt; は、生成されたすべてのチャンクで共有されるランタイムファイルを作成します。この設定は次のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="790b8c06e5a192fd1f0e912883db250944958c91" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'single'&lt;/code&gt; instead creates a runtime file to be shared for all generated chunks. This setting is an alias for:</source>
          <target state="translated">代わりに、値 &lt;code&gt;'single'&lt;/code&gt; は、生成されたすべてのチャンクで共有されるランタイムファイルを作成します。この設定は、次のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="0781638151e5add1c7a964dc64eef876b353008e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;BUILT_AT&lt;/code&gt; would be the time at which the &lt;code&gt;'sample.txt'&lt;/code&gt; was last updated in the file system, e.g. &lt;code&gt;1597953013291&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;BUILT_AT&lt;/code&gt; をした時刻になる &lt;code&gt;'sample.txt'&lt;/code&gt; 最後のファイルシステムで更新された、例えば &lt;code&gt;1597953013291&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1229e71274c5a0848ada24997f99c0e90c13985" translate="yes" xml:space="preserve">
          <source>The value of the option is prefixed to every URL created by the runtime or loaders. Because of this &lt;strong&gt;the value of this option ends with &lt;code&gt;/&lt;/code&gt;&lt;/strong&gt; in most cases.</source>
          <target state="translated">オプションの値は、ランタイムまたはローダーによって作成されたすべてのURLの前に付けられます。このため、この&lt;strong&gt;オプションの値は &lt;code&gt;/&lt;/code&gt; &lt;/strong&gt;ほとんどの場合&lt;strong&gt;/&lt;/strong&gt;で&lt;strong&gt;終わります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="89761bd1af99839698fc977f7b95894b8d804bab" translate="yes" xml:space="preserve">
          <source>The values will be inlined into the code allowing a minification pass to remove the redundant conditional.</source>
          <target state="translated">値はコードの中にインライン化され、冗長な条件を削除するためのミニ化パスが可能になります。</target>
        </trans-unit>
        <trans-unit id="a9aa12557f06576dffeddc570ca96e258d06e4f9" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;MyLibrary&lt;/code&gt; will be bound with the return value of your entry file, if the resulting output is included as a script tag in an HTML page.</source>
          <target state="translated">結果の出力がスクリプトタグとしてHTMLページに含まれている場合、変数 &lt;code&gt;MyLibrary&lt;/code&gt; はエントリファイルの戻り値にバインドされます。</target>
        </trans-unit>
        <trans-unit id="5266dcf83baacd57ef40f73a540394d3aff1883c" translate="yes" xml:space="preserve">
          <source>The warnings found will always be emitted, to disable set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc4f01ea35788d18caa049991ad53d743ab4a33" translate="yes" xml:space="preserve">
          <source>The way this is accomplished is the &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; package.json property.</source>
          <target state="translated">これを実現する方法は、 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; package.jsonプロパティです。</target>
        </trans-unit>
        <trans-unit id="cc0f8180a2809a16c731d6f278b809d648c76948" translate="yes" xml:space="preserve">
          <source>The webcomponent polyfills must be added in a specific order. If you do not delay loading the main bundle with your components, you will see the following exceptions in the browser console:</source>
          <target state="translated">ウェブコンポーネントのポリフィルは、特定の順番で追加する必要があります。コンポーネントでメインバンドルの読み込みを遅らせないと、ブラウザコンソールに以下のような例外が表示されます。</target>
        </trans-unit>
        <trans-unit id="891b65ff2555253127d610f04559b1a2a11cfb73" translate="yes" xml:space="preserve">
          <source>The webpack 2 release came with built-in support for ES2015 modules (alias &lt;em&gt;harmony modules&lt;/em&gt;) as well as unused module export detection. The new webpack 4 release expands on this capability with a way to provide hints to the compiler via the &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt;&lt;code&gt;package.json&lt;/code&gt; property to denote which files in your project are &quot;pure&quot; and therefore safe to prune if unused.</source>
          <target state="translated">webpack 2リリースには、ES2015モジュール（エイリアス&lt;em&gt;ハーモニーモジュール&lt;/em&gt;）のサポートが組み込まれており、未使用のモジュールエクスポートの検出も含まれています。新しいwebpack 4リリースはこの機能を拡張し、 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; プロパティを介してコンパイラーにヒントを提供し、プロジェクト内のどのファイルが「純粋」であり、したがって未使用の場合でも安全に削除できるようにヒントを提供します。</target>
        </trans-unit>
        <trans-unit id="478a5519b2320811d6017390c8de571fe8e886eb" translate="yes" xml:space="preserve">
          <source>The webpack &lt;code&gt;target&lt;/code&gt; property is not to be confused with the &lt;code&gt;output.libraryTarget&lt;/code&gt; property. For more information see &lt;a href=&quot;output&quot;&gt;our guide&lt;/a&gt; on the &lt;code&gt;output&lt;/code&gt; property.</source>
          <target state="translated">webpack &lt;code&gt;target&lt;/code&gt; プロパティを &lt;code&gt;output.libraryTarget&lt;/code&gt; プロパティと混同しないでください。詳細については、 &lt;code&gt;output&lt;/code&gt; プロパティに関する&lt;a href=&quot;output&quot;&gt;ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8eed51fad4553755fee39d9ff56da10a140db934" translate="yes" xml:space="preserve">
          <source>The webpack command line &lt;a href=&quot;../api/cli#environment-options&quot;&gt;environment option&lt;/a&gt;&lt;code&gt;--env&lt;/code&gt; allows you to pass in as many environment variables as you like. Environment variables will be made accessible in your &lt;code&gt;webpack.config.js&lt;/code&gt;. For example, &lt;code&gt;--env production&lt;/code&gt; or &lt;code&gt;--env NODE_ENV=local&lt;/code&gt; (&lt;code&gt;NODE_ENV&lt;/code&gt; is conventionally used to define the environment type, see &lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">webpackコマンドライン&lt;a href=&quot;../api/cli#environment-options&quot;&gt;環境オプション&lt;/a&gt; &lt;code&gt;--env&lt;/code&gt; を使用すると、必要な数の環境変数を渡すことができます。環境変数は、 &lt;code&gt;webpack.config.js&lt;/code&gt; でアクセスできるようになります。たとえば、 &lt;code&gt;--env production&lt;/code&gt; または &lt;code&gt;--env NODE_ENV=local&lt;/code&gt; （ &lt;code&gt;NODE_ENV&lt;/code&gt; は通常、環境タイプを定義するために使用されます。&lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;ここを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="67d0c64e1b2084b3dd8a7172e708b0db5df6c2ff" translate="yes" xml:space="preserve">
          <source>The webpack command line &lt;a href=&quot;../api/cli#environment-options&quot;&gt;environment option&lt;/a&gt;&lt;code&gt;--env&lt;/code&gt; allows you to pass in as many environment variables as you like. Environment variables will be made accessible in your &lt;code&gt;webpack.config.js&lt;/code&gt;. For example, &lt;code&gt;--env.production&lt;/code&gt; or &lt;code&gt;--env.NODE_ENV=local&lt;/code&gt; (&lt;code&gt;NODE_ENV&lt;/code&gt; is conventionally used to define the environment type, see &lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">webpackコマンドライン&lt;a href=&quot;../api/cli#environment-options&quot;&gt;環境オプション&lt;/a&gt; &lt;code&gt;--env&lt;/code&gt; を使用すると、必要なだけ環境変数を渡すことができます。環境変数は &lt;code&gt;webpack.config.js&lt;/code&gt; でアクセス可能になります。たとえば、-- &lt;code&gt;--env.production&lt;/code&gt; または &lt;code&gt;--env.NODE_ENV=local&lt;/code&gt; （ &lt;code&gt;NODE_ENV&lt;/code&gt; は、従来、環境タイプの定義に使用されています。&lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;ここを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="2fd569f3866762654c84dc07b32b03a8679ee57a" translate="yes" xml:space="preserve">
          <source>The webpack repository contains an &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;example showing the effect of all &lt;code&gt;devtool&lt;/code&gt; variants&lt;/a&gt;. Those examples will likely help you to understand the differences.</source>
          <target state="translated">webpackリポジトリには、&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;すべての &lt;code&gt;devtool&lt;/code&gt; バリアントの影響を示す例&lt;/a&gt;が含まれています。これらの例は、違いを理解するのに役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="2124200555434f2d7def0b1a661c16c179c98b22" translate="yes" xml:space="preserve">
          <source>The webpack-dev-server also takes a hint from &lt;code&gt;publicPath&lt;/code&gt;, using it to determine where to serve the output files from.</source>
          <target state="translated">webpack-dev-serverも &lt;code&gt;publicPath&lt;/code&gt; からヒントを取得し、それを使用して出力ファイルの提供元を決定します。</target>
        </trans-unit>
        <trans-unit id="a1a810a24b9f17b1d07f0266bc2e5374f6b81734" translate="yes" xml:space="preserve">
          <source>The worker file can import dependencies just like any other file:</source>
          <target state="translated">ワーカーファイルは、他のファイルと同じように依存関係をインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="f318d1321d0bcb60d6c6c01420fcb068660bff69" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;import&lt;/code&gt; the target file somewhere in your app:</source>
          <target state="translated">次に、ターゲットファイルをアプリのどこかに &lt;code&gt;import&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="09595a03296cb3c16fa26d3351525c0c0ce44925" translate="yes" xml:space="preserve">
          <source>Then add the loader and the plugin to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">次に、ローダーとプラグインを &lt;code&gt;webpack&lt;/code&gt; 構成に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="d0a1f0c3e9f53d1794b531be56e8b463d1ffeef7" translate="yes" xml:space="preserve">
          <source>Then add the loader to the desired &lt;code&gt;import&lt;/code&gt; statement or &lt;code&gt;require&lt;/code&gt; calls. For example:</source>
          <target state="translated">次に、ローダーを目的の &lt;code&gt;import&lt;/code&gt; ステートメントに追加するか &lt;code&gt;require&lt;/code&gt; 呼び出しを要求します。例えば：</target>
        </trans-unit>
        <trans-unit id="35f38ddf8489e854be4dc0f70af5f6fa83090c8f" translate="yes" xml:space="preserve">
          <source>Then add the loader to the desired &lt;code&gt;require&lt;/code&gt; calls. For example:</source>
          <target state="translated">次に、ローダーを必要 &lt;code&gt;require&lt;/code&gt; 呼び出しに追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="ffad5e3e9f9bce8ff26817bbf8bcb40fe6825333" translate="yes" xml:space="preserve">
          <source>Then add the loader to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">次に、ローダーを &lt;code&gt;webpack&lt;/code&gt; 設定に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="8ea0023f11d6d17c7ac2dae0c06423102bd8bdcb" translate="yes" xml:space="preserve">
          <source>Then add the loader to your Webpack configuration. For example:</source>
          <target state="translated">次に、Webpack の設定にローダーを追加します。例えば</target>
        </trans-unit>
        <trans-unit id="5ecc72b143ba414bace5339e99ab892cad6a01ae" translate="yes" xml:space="preserve">
          <source>Then add the plugin to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">次に、プラグインを &lt;code&gt;webpack&lt;/code&gt; 設定に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="0b2c9085fe12a59ddcd2718f3bb1bb0dfc95a710" translate="yes" xml:space="preserve">
          <source>Then add the plugin to your &lt;code&gt;webpack&lt;/code&gt; configuration. For example:</source>
          <target state="translated">次に、プラグインを &lt;code&gt;webpack&lt;/code&gt; 構成に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="aa553c5c8715ed65e20b9514b424640be97e4c70" translate="yes" xml:space="preserve">
          <source>Then import that config using the keyword you're looking for in the regexp:</source>
          <target state="translated">そして、その設定を正規表現で探しているキーワードを使ってインポートします。</target>
        </trans-unit>
        <trans-unit id="c8f64d12495baa2edb4cc73d230c9c5b8f381f64" translate="yes" xml:space="preserve">
          <source>Then import that configuration using the keyword you're looking for in the regexp:</source>
          <target state="translated">そして、その設定を正規表現で探しているキーワードを使ってインポートします。</target>
        </trans-unit>
        <trans-unit id="cb2125d4922a805933e12a6b7b007a9414ad8b65" translate="yes" xml:space="preserve">
          <source>Then in any of our source code:</source>
          <target state="translated">そして、私たちのソースコードのいずれかで</target>
        </trans-unit>
        <trans-unit id="eba20bf51e1fac8e7c59f5ae2aa0c0f1ac3c67fd" translate="yes" xml:space="preserve">
          <source>Then invoke the loader through a require like so:</source>
          <target state="translated">そして、このようにrequireを使ってローダーを起動します。</target>
        </trans-unit>
        <trans-unit id="d73eb206650f19435ae7b09b1dd4c91b4d7875da" translate="yes" xml:space="preserve">
          <source>Then modify your &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;webpack.config.js&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="8ece6c64eaee4ab7ee3f8b124192a78d7721667b" translate="yes" xml:space="preserve">
          <source>Then register a configuration and load the task:</source>
          <target state="translated">そして、設定を登録してタスクをロードします。</target>
        </trans-unit>
        <trans-unit id="1079055dbdfefa1ebd4ed5f99bb4f3a3ab94f6aa" translate="yes" xml:space="preserve">
          <source>Then require the webpack module in your Node.js script:</source>
          <target state="translated">そして、Node.jsスクリプトにwebpackモジュールを要求します。</target>
        </trans-unit>
        <trans-unit id="59ed0740687cc965bad0e350a9024363567dd315" translate="yes" xml:space="preserve">
          <source>Then set the environment variable &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; provided by &lt;code&gt;tsconfig-path&lt;/code&gt; like so:</source>
          <target state="translated">次に、 &lt;code&gt;tsconfig-path&lt;/code&gt; によって提供される環境変数 &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="8a9898e443fcd095f3f8aadd44457f429c751689" translate="yes" xml:space="preserve">
          <source>Then set the environment variable &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; provided by &lt;code&gt;tsconfig-paths&lt;/code&gt; like so:</source>
          <target state="translated">次に、 &lt;code&gt;tsconfig-paths&lt;/code&gt; によって提供される環境変数 &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="1cf2753baac23274b2f50819a0b259179670e04c" translate="yes" xml:space="preserve">
          <source>Then the build output will also display the error (Similar to &lt;code&gt;this.emitError&lt;/code&gt;):</source>
          <target state="translated">次に、ビルド出力にもエラーが表示されます（ &lt;code&gt;this.emitError&lt;/code&gt; と同様）：</target>
        </trans-unit>
        <trans-unit id="2d06c116838f1f06f475188bff07edbe869d71d5" translate="yes" xml:space="preserve">
          <source>Then use &lt;code&gt;this.answer&lt;/code&gt; to get its value in the loader:</source>
          <target state="translated">次に、 &lt;code&gt;this.answer&lt;/code&gt; を使用して、ローダーでその値を取得します。</target>
        </trans-unit>
        <trans-unit id="188304fa613a9305300549e92dfb0591f625001b" translate="yes" xml:space="preserve">
          <source>Then use it in code:</source>
          <target state="translated">そして、それをコードで使用します。</target>
        </trans-unit>
        <trans-unit id="667f02d92bdbdede5b7c2dd5cadd7691d23cc47e" translate="yes" xml:space="preserve">
          <source>Then you can easily disable the AMD path by writing</source>
          <target state="translated">と書くことで簡単にAMDパスを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7ab49abdc1733cccc9bfac6c1720ae703f04d3a7" translate="yes" xml:space="preserve">
          <source>Then you can inject the &lt;code&gt;jquery&lt;/code&gt; value into the module by configuring the &lt;code&gt;imports-loader&lt;/code&gt; using two approaches.</source>
          <target state="translated">次に、2つのアプローチを使用して &lt;code&gt;imports-loader&lt;/code&gt; を構成することにより、 &lt;code&gt;jquery&lt;/code&gt; 値をモジュールに挿入できます。</target>
        </trans-unit>
        <trans-unit id="e51ce7f29090f5b48fe3eae8cd4bcd7660d2697a" translate="yes" xml:space="preserve">
          <source>Then you can use the &lt;code&gt;expose-loader&lt;/code&gt; using two approaches.</source>
          <target state="translated">次に、2つのアプローチを使用して &lt;code&gt;expose-loader&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="da73ede351abacaec57b8883eebc3e85b7c8c032" translate="yes" xml:space="preserve">
          <source>There are a couple of different options available in webpack that help you automatically compile your code whenever it changes:</source>
          <target state="translated">webpack には、コードが変更されるたびに自動的にコンパイルするのに役立ついくつかの異なるオプションがあります。</target>
        </trans-unit>
        <trans-unit id="98fc5926f0ed61dca265bd1d5a8cfdd128aec8ab" translate="yes" xml:space="preserve">
          <source>There are a few other tools that can help when dealing with legacy modules.</source>
          <target state="translated">レガシーモジュールを扱う際に役立つツールが他にもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="0a1d4e9ccad0c8085ac2c42a3a84ab4c7625d32e" translate="yes" xml:space="preserve">
          <source>There are a few use cases in real applications where this feature becomes especially neat. Essentially, every file emitted to your &lt;code&gt;output.path&lt;/code&gt; directory will be referenced from the &lt;code&gt;output.publicPath&lt;/code&gt; location. This includes child chunks (created via &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;) and any other assets (e.g. images, fonts, etc.) that are a part of your dependency graph.</source>
          <target state="translated">実際のアプリケーションでは、この機能が特に便利になるいくつかの使用例があります。基本的に、 &lt;code&gt;output.path&lt;/code&gt; ディレクトリに出力されるすべてのファイルは、 &lt;code&gt;output.publicPath&lt;/code&gt; の場所から参照されます。これには、依存関係グラフの一部である子チャンク（&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割で&lt;/a&gt;作成されたもの）とその他のアセット（画像、フォントなど）が含まれます。</target>
        </trans-unit>
        <trans-unit id="f59b5b432af60faa3acb5fbb371c18c640f63351" translate="yes" xml:space="preserve">
          <source>There are a lot of &lt;a href=&quot;../configuration/devtool&quot;&gt;different options&lt;/a&gt; available when it comes to source maps. Be sure to check them out so you can configure them to your needs.</source>
          <target state="translated">ソースマップに関しては、&lt;a href=&quot;../configuration/devtool&quot;&gt;さまざまなオプションを&lt;/a&gt;利用できます。必要に応じて設定できるように、必ずチェックしてください。</target>
        </trans-unit>
        <trans-unit id="8d407574a6dd2574ff77db703ce9dc21ace6991e" translate="yes" xml:space="preserve">
          <source>There are different export formats available:</source>
          <target state="translated">さまざまなエクスポート形式があります。</target>
        </trans-unit>
        <trans-unit id="2ec1856436537a88e242c66fae83ad8d15cb9bb3" translate="yes" xml:space="preserve">
          <source>There are many modules that check for a &lt;code&gt;define&lt;/code&gt; function before using CommonJS. Since webpack is capable of both, they default to AMD in this case, which can be a problem if the implementation is quirky.</source>
          <target state="translated">CommonJSを使用 &lt;code&gt;define&lt;/code&gt; 前に定義関数をチェックするモジュールはたくさんあります。webpackは両方に対応しているので、この場合はデフォルトでAMDになり、実装が風変わりな場合は問題になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="231f8d33886d63700143f71de278ecc37e1e9ea7" translate="yes" xml:space="preserve">
          <source>There are many other loaders and examples out in the community to make HMR interact smoothly with a variety of frameworks and libraries...</source>
          <target state="translated">HMRを様々なフレームワークやライブラリとスムーズに相互作用させるために、他にも多くのローダーやサンプルがコミュニティに存在します。</target>
        </trans-unit>
        <trans-unit id="53aa2c97152f93fa32cbf84d5d7317fbd59e3f34" translate="yes" xml:space="preserve">
          <source>There are many plugins that webpack provides out of the box! Check out the &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;list of plugins&lt;/a&gt;.</source>
          <target state="translated">すぐに使えるwebpackのプラグインはたくさんあります！&lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;プラグイン&lt;/a&gt;のリストを確認してください。</target>
        </trans-unit>
        <trans-unit id="71e77a34d84d086ac72c127ae4906c48c99dd408" translate="yes" xml:space="preserve">
          <source>There are multiple optimizations in production mode regarding dead branches:</source>
          <target state="translated">本番モードでは、デッドブランチに関して複数の最適化が行われています。</target>
        </trans-unit>
        <trans-unit id="3bcc2fea8cf939a9d3651476df04dc1a6ee79e59" translate="yes" xml:space="preserve">
          <source>There are problems with managing JavaScript projects this way:</source>
          <target state="translated">このようにJavaScriptのプロジェクトを管理することには問題があります。</target>
        </trans-unit>
        <trans-unit id="8d8a5e694fb4dd9cf39f7fab90a3bcd585a74cb9" translate="yes" xml:space="preserve">
          <source>There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;モジュールの連結&lt;/a&gt;や&lt;a href=&quot;../guides/tree-shaking&quot;&gt;ツリーの揺れの&lt;/a&gt;場合のように、ESモジュールを使用することが有益な場合があります。</target>
        </trans-unit>
        <trans-unit id="4993d4d2cc5cb72c5891a9d1ab5d8f7272cf5966" translate="yes" xml:space="preserve">
          <source>There are some issues with Source Maps in Chrome. &lt;a href=&quot;https://github.com/webpack/webpack/issues/3165&quot;&gt;We need your help!&lt;/a&gt;.</source>
          <target state="translated">Chromeのソースマップにいくつかの問題があります。&lt;a href=&quot;https://github.com/webpack/webpack/issues/3165&quot;&gt;君の力が必要なんだ！&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9295a056060a1cd9d98ae0dd581e17215a4f5384" translate="yes" xml:space="preserve">
          <source>There are some presets available to use as a shortcut. Use them like this:</source>
          <target state="translated">ショートカットとして使用できるプリセットがいくつかあります。こんな感じで使ってみてください。</target>
        </trans-unit>
        <trans-unit id="635b1a30cc14512dd700d2c6b33056a04cc5290a" translate="yes" xml:space="preserve">
          <source>There are three general approaches to code splitting available:</source>
          <target state="translated">利用可能なコード分割には、3つの一般的なアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="267e07e43a45d9a1ca7399cfda987a9aee4304fd" translate="yes" xml:space="preserve">
          <source>There are three types of built-in resolvers available on the &lt;code&gt;compiler&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;compiler&lt;/code&gt; クラスでは、3種類の組み込みリゾルバを使用できます。</target>
        </trans-unit>
        <trans-unit id="4f92300c3888d24aa7e5e015926b4dda7365ed5a" translate="yes" xml:space="preserve">
          <source>There are three ways to use loaders in your application:</source>
          <target state="translated">アプリケーションでローダーを使用するには3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="cfbf2ca72bd8b5e52cf781d5d1d0ed6763357e5f" translate="yes" xml:space="preserve">
          <source>There are two input values for the conditions:</source>
          <target state="translated">条件の入力値は2つあります。</target>
        </trans-unit>
        <trans-unit id="3c7bd6cb5a385da0b04381463b8a65bb5f007ab0" translate="yes" xml:space="preserve">
          <source>There are two output values of a Rule:</source>
          <target state="translated">ルールの出力値は2つあります。</target>
        </trans-unit>
        <trans-unit id="421884df0658635b32d095b666151cd8fdaeb897" translate="yes" xml:space="preserve">
          <source>There are two phases that all loaders enter one after the other:</source>
          <target state="translated">すべてのローダーが次々に入るフェーズは2つあります。</target>
        </trans-unit>
        <trans-unit id="b6af33372ea92fb3a1592ac062e55d75a6290f0e" translate="yes" xml:space="preserve">
          <source>There are two possibilities to extract a style sheet from the bundle:</source>
          <target state="translated">バンドルからスタイルシートを抽出するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="b2d870d1394aaba2ab5f8a4c5504447f9a976509" translate="yes" xml:space="preserve">
          <source>There are two solutions to this issue:</source>
          <target state="translated">この問題の解決策は2つあります。</target>
        </trans-unit>
        <trans-unit id="5887025a3ed16f628b946b1010aa383ff70a6420" translate="yes" xml:space="preserve">
          <source>There are two way to add dependencies:</source>
          <target state="translated">依存関係を追加する方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="9ab0314c79cc74488806140e45e7d806b8fb6d8c" translate="yes" xml:space="preserve">
          <source>There are two ways to run JavaScript in a browser. First, include a script for each functionality; this solution is hard to scale because loading too many scripts can cause a network bottleneck. The second option is to use a big &lt;code&gt;.js&lt;/code&gt; file containing all your project code, but this leads to problems in scope, size, readability and maintainability.</source>
          <target state="translated">ブラウザでJavaScriptを実行する方法は2つあります。まず、各機能のスクリプトを含めます。ロードするスクリプトが多すぎるとネットワークのボトルネックが発生する可能性があるため、このソリューションの拡張は困難です。2番目のオプションは、すべてのプロジェクトコードを含む大きな &lt;code&gt;.js&lt;/code&gt; ファイルを使用することですが、これにより、スコープ、サイズ、可読性、および保守性に問題が生じます。</target>
        </trans-unit>
        <trans-unit id="9347f0cc0834919ebc20e81c6b93cbb9b7aeb89b" translate="yes" xml:space="preserve">
          <source>There are two ways to work with &lt;code&gt;nonce&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;nonce&lt;/code&gt; を操作する方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="b5634a53b77237f4e15313722897fff9e4771845" translate="yes" xml:space="preserve">
          <source>There are two workarounds:</source>
          <target state="translated">回避策は2つあります。</target>
        </trans-unit>
        <trans-unit id="087002361fdbdb981291d1d8ab5e2c39508ac8de" translate="yes" xml:space="preserve">
          <source>There are various resources where you can learn how to write a scaffold, you can start by reading &lt;a href=&quot;https://webpack.js.org/contribute/writing-a-scaffold/&quot;&gt;Writing a Scaffold&lt;/a&gt; tutorial.</source>
          <target state="translated">足場の書き方を学ぶことができるさまざまなリソースがあります。&lt;a href=&quot;https://webpack.js.org/contribute/writing-a-scaffold/&quot;&gt;足場の書き方の&lt;/a&gt;チュートリアルを読むことから始めることができます。</target>
        </trans-unit>
        <trans-unit id="96f079b98b93fb7f704da117338a35992b2e29f7" translate="yes" xml:space="preserve">
          <source>There has been a &lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;performance regression&lt;/a&gt; in the latest stable versions of Node.js and its ES2015 &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; implementations. A fix has been merged in master, but a release has yet to be made. In the meantime, to get the most out of incremental build speeds, try to stick with version 8.9.x (problem exists between 8.9.10 - 9.11.1). webpack has moved to using those ES2015 data structures liberally, and it will improve the initial build times as well.</source>
          <target state="translated">あった&lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;パフォーマンスの低下&lt;/a&gt;のNode.jsとそのES2015の最新の安定バージョンで &lt;code&gt;Map&lt;/code&gt; と &lt;code&gt;Set&lt;/code&gt; 実装。修正はマスターにマージされましたが、リリースはまだ行われていません。それまでの間、インクリメンタルビルド速度を最大限に活用するには、バージョン8.9.xを使用してください（8.9.10〜9.11.1の間に問題があります）。webpackは、これらのES2015データ構造を自由に使用するようになり、初期ビルド時間も改善されます。</target>
        </trans-unit>
        <trans-unit id="d9d05322318799384d1e0b0c5b64e4a53b00f44d" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fast-incremental-builds&quot;&gt;full example&lt;/a&gt; on the ts-loader github repository</source>
          <target state="translated">ts-loader githubリポジトリに&lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fast-incremental-builds&quot;&gt;完全な例&lt;/a&gt;があります</target>
        </trans-unit>
        <trans-unit id="24f6afef7bfd23746f67918b835f6fc6565a3d0e" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fork-ts-checker-webpack-plugin&quot;&gt;full example&lt;/a&gt; on the &lt;code&gt;ts-loader&lt;/code&gt; GitHub repository.</source>
          <target state="translated">ある&lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fork-ts-checker-webpack-plugin&quot;&gt;完全な例&lt;/a&gt;上の &lt;code&gt;ts-loader&lt;/code&gt; GitHubのリポジトリが。</target>
        </trans-unit>
        <trans-unit id="028fda8bd113b7126322aeb6aa11e8851c9e9ab8" translate="yes" xml:space="preserve">
          <source>There is a known problem with Less and &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS modules&lt;/a&gt; regarding relative file paths in &lt;code&gt;url(...)&lt;/code&gt; statements. &lt;a href=&quot;https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335&quot;&gt;See this issue for an explanation&lt;/a&gt;.</source>
          <target state="translated">Lessおよび&lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSSモジュールに&lt;/a&gt;は、 &lt;code&gt;url(...)&lt;/code&gt; ステートメントの相対ファイルパスに関する既知の問題があります。&lt;a href=&quot;https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335&quot;&gt;説明については、この問題を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="272aa1d3353918deab85d3eb9bbe747c9dc3ae29" translate="yes" xml:space="preserve">
          <source>There is a slight difference between the &lt;code&gt;sass&lt;/code&gt; (&lt;code&gt;dart-sass&lt;/code&gt;) and &lt;code&gt;node-sass&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;sass&lt;/code&gt; （ &lt;code&gt;dart-sass&lt;/code&gt; ）と &lt;code&gt;node-sass&lt;/code&gt; のオプションにはわずかな違いがあります。</target>
        </trans-unit>
        <trans-unit id="7f98e90c6aa491e1ad9072a05a6ec97f5153bcc4" translate="yes" xml:space="preserve">
          <source>There is also an &lt;code&gt;extract&lt;/code&gt; function on the instance. You should use this if you have more than one instance of &lt;code&gt;ExtractTextPlugin&lt;/code&gt;.</source>
          <target state="translated">インスタンスには &lt;code&gt;extract&lt;/code&gt; 機能もあります。 &lt;code&gt;ExtractTextPlugin&lt;/code&gt; のインスタンスが複数ある場合は、これを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aca6f0f8988a8ba1fdf3cdcb454b3a2847afa5c5" translate="yes" xml:space="preserve">
          <source>There is also an additional category &quot;inlined loader&quot; which are loaders applied inline of the import/require.</source>
          <target state="translated">また、インポート/要求のインラインで適用されるローダーである「インラインローダー」というカテゴリーもあります。</target>
        </trans-unit>
        <trans-unit id="63dc4b8122508bfde5c2b3cd6c0dbba7d8b69700" translate="yes" xml:space="preserve">
          <source>There is currently exactly one option: &lt;code&gt;publicPath&lt;/code&gt;. If you are using a relative &lt;code&gt;publicPath&lt;/code&gt; in webpack's &lt;a href=&quot;../configuration/output#output-publicpath&quot;&gt;output options&lt;/a&gt; and extracting to a file with the &lt;code&gt;file-loader&lt;/code&gt;, you might need this to account for the location of your extracted file.</source>
          <target state="translated">現在、1つのオプション、 &lt;code&gt;publicPath&lt;/code&gt; があります。webpackの&lt;a href=&quot;../configuration/output#output-publicpath&quot;&gt;出力オプション&lt;/a&gt;で相対 &lt;code&gt;publicPath&lt;/code&gt; を使用し、 &lt;code&gt;file-loader&lt;/code&gt; を使用してファイルに抽出している場合、抽出されたファイルの場所を考慮するためにこれが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ed255eb1347137d75a802ce92f40bff602d6e7bf" translate="yes" xml:space="preserve">
          <source>There is currently exactly one option: &lt;code&gt;publicPath&lt;/code&gt;. If you are using a relative &lt;code&gt;publicPath&lt;/code&gt; in webpack's &lt;a href=&quot;../configuration/output#outputpublicpath&quot;&gt;output options&lt;/a&gt; and extracting to a file with the &lt;code&gt;file-loader&lt;/code&gt;, you might need this to account for the location of your extracted file. &lt;code&gt;publicPath&lt;/code&gt; may be defined as a string or a function that accepts current &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;loader context&lt;/a&gt; as single argument.</source>
          <target state="translated">現在、 &lt;code&gt;publicPath&lt;/code&gt; という1つのオプションがあります。webpackの&lt;a href=&quot;../configuration/output#outputpublicpath&quot;&gt;出力オプション&lt;/a&gt;で相対 &lt;code&gt;publicPath&lt;/code&gt; を使用し、 &lt;code&gt;file-loader&lt;/code&gt; 使用してファイルに抽出する場合、抽出されたファイルの場所を考慮するためにこれが必要になる場合があります。 &lt;code&gt;publicPath&lt;/code&gt; は、現在の&lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;ローダーコンテキスト&lt;/a&gt;を単一の引数として受け入れる文字列または関数として定義できます。</target>
        </trans-unit>
        <trans-unit id="9b97843cd1416b0f8c95b15bcea142c8b9e09f01" translate="yes" xml:space="preserve">
          <source>There is no need to change it.</source>
          <target state="translated">変える必要はありません。</target>
        </trans-unit>
        <trans-unit id="46994b7b987e4c2023ce27e138386b6cdc8bd10d" translate="yes" xml:space="preserve">
          <source>There is no option to provide a chunk name.</source>
          <target state="translated">チャンク名を提供するオプションはありません。</target>
        </trans-unit>
        <trans-unit id="b8ed6d814eca2d0cbf9ffca110d21faeddc6d1fe" translate="yes" xml:space="preserve">
          <source>There is one change that you will have to make to your webpack config. Typically, &lt;code&gt;module.exports&lt;/code&gt; points to the configuration object. To use the &lt;code&gt;env&lt;/code&gt; variable, you must convert &lt;code&gt;module.exports&lt;/code&gt; to a function:</source>
          <target state="translated">webpack構成に加えなければならない変更が1つあります。通常、 &lt;code&gt;module.exports&lt;/code&gt; は構成オブジェクトを指します。 &lt;code&gt;env&lt;/code&gt; 変数を使用するには、 &lt;code&gt;module.exports&lt;/code&gt; を関数に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="7e73630e624742075c75e7bc3771463c12b92f4a" translate="yes" xml:space="preserve">
          <source>There might be more than one chunk in a chunk group. For example &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt; splits a chunk into one or more chunks.</source>
          <target state="translated">チャンクグループには複数のチャンクが存在する場合があります。たとえば、&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPluginは&lt;/a&gt;、チャンクを1つ以上のチャンクに分割します。</target>
        </trans-unit>
        <trans-unit id="f70753b8f31e00036ee915afbab312783b5229ca" translate="yes" xml:space="preserve">
          <source>There was a &lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;performance regression&lt;/a&gt; in Node.js versions 8.9.10 - 9.11.1 in the ES2015 &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; implementations. webpack uses those data structures liberally, so this regression affects compile times.</source>
          <target state="translated">ES2015 &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; の実装では、Node.jsバージョン8.9.10〜9.11.1で&lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;パフォーマンス&lt;/a&gt;が低下しました。webpackはこれらのデータ構造を自由に使用するため、このリグレッションはコンパイル時間に影響します。</target>
        </trans-unit>
        <trans-unit id="d70ba15e08cd0adf83a907141216d6e816aef455" translate="yes" xml:space="preserve">
          <source>There're many stages to use:</source>
          <target state="translated">使うステージが多い</target>
        </trans-unit>
        <trans-unit id="0ebe232476ab6d5eab4f199f18a86b0873c75900" translate="yes" xml:space="preserve">
          <source>There's a lot of ways to load polyfills. For example, to include the &lt;a href=&quot;https://babeljs.io/docs/en/babel-polyfill/&quot;&gt;&lt;code&gt;babel-polyfill&lt;/code&gt;&lt;/a&gt; we might simply:</source>
          <target state="translated">ポリフィルをロードする方法はたくさんあります。たとえば、&lt;a href=&quot;https://babeljs.io/docs/en/babel-polyfill/&quot;&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; &lt;/a&gt;を含めるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="52799d35176455f8706d99232f96e666a9d333a5" translate="yes" xml:space="preserve">
          <source>There's a lot of ways to load polyfills. For example, to include the &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;&lt;code&gt;babel-polyfill&lt;/code&gt;&lt;/a&gt; we might simply:</source>
          <target state="translated">ポリフィルをロードする方法はたくさんあります。たとえば、&lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; &lt;/a&gt;を含めるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="31a20b97d55d79fa507d3c1d198dfe57d066102f" translate="yes" xml:space="preserve">
          <source>Therefore you should only use them as a last resort. Using them will reduce the portability of your loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94ad9229ad8612f68566c5b1de57d970fdc31a1" translate="yes" xml:space="preserve">
          <source>These allow you to configure the webpack &lt;a href=&quot;../configuration/resolve&quot;&gt;resolver&lt;/a&gt; with aliases and extensions.</source>
          <target state="translated">これらにより、エイリアスと拡張機能を使用してwebpack &lt;a href=&quot;../configuration/resolve&quot;&gt;リゾルバー&lt;/a&gt;を構成できます。</target>
        </trans-unit>
        <trans-unit id="2566a954a0d02deae7eb0cd9561460980b0c8c7b" translate="yes" xml:space="preserve">
          <source>These are the defaults:</source>
          <target state="translated">これらがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="5c0bd375a87af39a4fcc4d939a8d4bc34eb2793b" translate="yes" xml:space="preserve">
          <source>These are the remaining configuration options supported by webpack.</source>
          <target state="translated">これらはwebpackがサポートしている残りの設定オプションです。</target>
        </trans-unit>
        <trans-unit id="febcff69af775a3bfcf0e1a7bf703ea42925d2f8" translate="yes" xml:space="preserve">
          <source>These conditions might also be set additionally:</source>
          <target state="translated">また、これらの条件を追加で設定する場合もあります。</target>
        </trans-unit>
        <trans-unit id="ccf6d61b4ad3823e787101eb37a3b1386c459707" translate="yes" xml:space="preserve">
          <source>These options allow webpack to display various &lt;a href=&quot;../configuration/stats&quot;&gt;stats&lt;/a&gt; and style them differently in the console output.</source>
          <target state="translated">これらのオプションにより、webpackはさまざまな&lt;a href=&quot;../configuration/stats&quot;&gt;統計&lt;/a&gt;を表示し、コンソール出力でそれらを異なるスタイルにすることができます。</target>
        </trans-unit>
        <trans-unit id="2e0869eb46e5f04ea6e2b1f165c826b5b338ead2" translate="yes" xml:space="preserve">
          <source>These options allow you to bind &lt;a href=&quot;../configuration/module&quot;&gt;modules&lt;/a&gt; as allowed by webpack</source>
          <target state="translated">これらのオプションを使用すると、webpackで許可されているように&lt;a href=&quot;../configuration/module&quot;&gt;モジュール&lt;/a&gt;をバインドできます</target>
        </trans-unit>
        <trans-unit id="d8bf2146c955380560f55188ae1ce7347c666b6e" translate="yes" xml:space="preserve">
          <source>These options allow you to manipulate optimisations for a production build using webpack</source>
          <target state="translated">これらのオプションを使用すると、webpack を使用して本番ビルドの最適化を操作することができます。</target>
        </trans-unit>
        <trans-unit id="1007a4ad40966f93fd98a21ab15571601e8096f3" translate="yes" xml:space="preserve">
          <source>These options allows you to control how webpack notifies you of assets and entry points that exceed a specific file limit. This feature was inspired by the idea of &lt;a href=&quot;https://github.com/webpack/webpack/issues/3216&quot;&gt;webpack Performance Budgets&lt;/a&gt;.</source>
          <target state="translated">これらのオプションを使用すると、特定のファイル制限を超えるアセットとエントリポイントをwebpackが通知する方法を制御できます。この機能は、&lt;a href=&quot;https://github.com/webpack/webpack/issues/3216&quot;&gt;webpack Performance Budgets&lt;/a&gt;のアイデアに触発されました。</target>
        </trans-unit>
        <trans-unit id="79407cc7a6ab20b192d9e99545132870bb628e82" translate="yes" xml:space="preserve">
          <source>These options are experimental and may be deprecated. As mentioned above, they are typically not necessary and including a &lt;code&gt;new webpack.HotModuleReplacementPlugin()&lt;/code&gt; is enough.</source>
          <target state="translated">これらのオプションは実験的なものであり、廃止される可能性があります。上記のように、通常は必要ありません。 &lt;code&gt;new webpack.HotModuleReplacementPlugin()&lt;/code&gt; を含めるだけで十分です。</target>
        </trans-unit>
        <trans-unit id="0103698eace700deceff10513d7687368a419e01" translate="yes" xml:space="preserve">
          <source>These options are typically used in production:</source>
          <target state="translated">これらのオプションは、通常、生産に使用されます。</target>
        </trans-unit>
        <trans-unit id="a79b628e2c2b80d262daaaf5e89a2b05a2721975" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to a specific object under the name defined by &lt;code&gt;output.library&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは、エントリポイント（たとえば、エクスポートされたエントリポイント）の戻り値を、 &lt;code&gt;output.library&lt;/code&gt; で定義された名前で特定のオブジェクトに割り当てます。</target>
        </trans-unit>
        <trans-unit id="dc064ac635490f42b16b5f65e94f8546f034edec" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to the name provided by &lt;a href=&quot;#outputlibrary&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; at whatever scope the bundle was included at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b90ab37b5ba5275785aeca2a1aaf4ff18b86db" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to the name provided by &lt;code&gt;output.library&lt;/code&gt; at whatever scope the bundle was included at.</source>
          <target state="translated">これらのオプションは、エントリポイントの戻り値（たとえば、エクスポートされたエントリポイント）を、バンドルが含まれているスコープの &lt;code&gt;output.library&lt;/code&gt; によって提供される名前に割り当てます。</target>
        </trans-unit>
        <trans-unit id="a7d8234fcb48114f73a0a6667f67ab696c51cde7" translate="yes" xml:space="preserve">
          <source>These options change how modules are resolved. webpack provides reasonable defaults, but it is possible to change the resolving in detail. Have a look at &lt;a href=&quot;../concepts/module-resolution&quot;&gt;Module Resolution&lt;/a&gt; for more explanation of how the resolver works.</source>
          <target state="translated">これらのオプションは、モジュールの解決方法を変更します。webpackは適切なデフォルトを提供しますが、解決を詳細に変更することが可能です。リゾルバーの動作の詳細については、&lt;a href=&quot;../concepts/module-resolution&quot;&gt;モジュールの解決&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="502f606f9f22867ba7b4202ff6f348f30f97e661" translate="yes" xml:space="preserve">
          <source>These options configure whether to polyfill or mock certain &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.js globals&lt;/a&gt; and modules. This allows code originally written for the Node.js environment to run in other environments like the browser.</source>
          <target state="translated">これらのオプションは、特定の&lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.jsグローバル&lt;/a&gt;とモジュールをポリフィルするかモックするかを構成します。これにより、もともとNode.js環境用に作成されたコードを、ブラウザーなどの他の環境で実行できます。</target>
        </trans-unit>
        <trans-unit id="5748337f019e8736c4c08ddb1aaa946717932550" translate="yes" xml:space="preserve">
          <source>These options describe the default settings for the context created when a dynamic dependency is encountered.</source>
          <target state="translated">これらのオプションは、動的依存関係に遭遇したときに作成されるコンテキストのデフォルト設定を記述します。</target>
        </trans-unit>
        <trans-unit id="fe61c54946c1acdaaac5a110beb75c2abe251578" translate="yes" xml:space="preserve">
          <source>These options determine how the &lt;a href=&quot;../concepts/modules&quot;&gt;different types of modules&lt;/a&gt; within a project will be treated.</source>
          <target state="translated">これらのオプションは、プロジェクト内の&lt;a href=&quot;../concepts/modules&quot;&gt;異なるタイプのモジュールが&lt;/a&gt;どのように扱われるかを決定します。</target>
        </trans-unit>
        <trans-unit id="4f6511d8b476377c46f5d4c2dc3654f0c2d86dd1" translate="yes" xml:space="preserve">
          <source>These options makes the build &lt;a href=&quot;../configuration/watch&quot;&gt;watch&lt;/a&gt; for changes in files of the dependency graph and perform the build again.</source>
          <target state="translated">これらのオプションにより、ビルドは依存関係グラフのファイルの変更を&lt;a href=&quot;../configuration/watch&quot;&gt;監視&lt;/a&gt;し、ビルドを再実行します。</target>
        </trans-unit>
        <trans-unit id="d4e48f43abb204bb9d2e2dbddbf01ae454f6d1ec" translate="yes" xml:space="preserve">
          <source>These options will result in a bundle that comes with a complete header to ensure compatibility with various module systems. The &lt;code&gt;output.library&lt;/code&gt; option will take on a different meaning under the following &lt;code&gt;output.libraryTarget&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454c972b24168045e7370d16bc161582d1d9c81e" translate="yes" xml:space="preserve">
          <source>These options will result in a bundle that comes with a more complete header to ensure compatibility with various module systems. The &lt;code&gt;output.library&lt;/code&gt; option will take on a different meaning under the following &lt;code&gt;output.libraryTarget&lt;/code&gt; options.</source>
          <target state="translated">これらのオプションにより、さまざまなモジュールシステムとの互換性を確保するためのより完全なヘッダーが付属するバンドルが作成されます。 &lt;code&gt;output.library&lt;/code&gt; オプションは、次の下に別の意味になります &lt;code&gt;output.libraryTarget&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="106c4e5dbb58168e46b7c5c9dadb7d240d1978c2" translate="yes" xml:space="preserve">
          <source>These pattern are based on the following list of goals/assumptions:</source>
          <target state="translated">これらのパターンは、以下のような目標・想定のリストに基づいています。</target>
        </trans-unit>
        <trans-unit id="9132b5d3865d002e95b734e01e6504c0fcb71cd0" translate="yes" xml:space="preserve">
          <source>These pattern should be used as guide not as strict ruleset. They can be adapted to the individual packages.</source>
          <target state="translated">これらのパターンは厳密なルールセットではなく、ガイドとして使用されるべきです。これらは個々のパッケージに適応させることができます。</target>
        </trans-unit>
        <trans-unit id="42263b58dfe9ecaa589cb4cac45029b77ee6aa8e" translate="yes" xml:space="preserve">
          <source>These patterns make sense for packages that do not use environment specific APIs.</source>
          <target state="translated">これらのパターンは、環境固有の API を使用しないパッケージでは意味があります。</target>
        </trans-unit>
        <trans-unit id="9f26efe3ba05c2068ab581177a9b790860ec5ce5" translate="yes" xml:space="preserve">
          <source>These patterns make sense when a package contains two versions, one for development and one for production. E. g. the development version could include additional code for better error message or additional warnings.</source>
          <target state="translated">これらのパターンは、パッケージに開発用と本番用の 2 つのバージョンが含まれている場合に意味があります。例えば、開発版には、より良いエラーメッセージや追加の警告のための追加コードが含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="08cf024ae104b7e9e8a8a0d48311f520b3337630" translate="yes" xml:space="preserve">
          <source>These properties affect the loaders: &lt;a href=&quot;#rule-loader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-options-rule-query&quot;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-use&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのプロパティはローダーに影響し&lt;a href=&quot;#rule-options-rule-query&quot;&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt;：&lt;a href=&quot;#rule-loader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt;、オプション、&lt;a href=&quot;#rule-use&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6bd4f2e0f0514e3e6f6ce0621c32a64266577737" translate="yes" xml:space="preserve">
          <source>These properties affect the loaders: &lt;a href=&quot;#ruleloader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ruleoptions--rulequery&quot;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ruleuse&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのプロパティはローダーに影響し&lt;a href=&quot;#ruleoptions--rulequery&quot;&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt;：&lt;a href=&quot;#ruleloader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt;、オプション、&lt;a href=&quot;#ruleuse&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="057e3f7528fc7e3767f893e10ed751260d9bd0d5" translate="yes" xml:space="preserve">
          <source>These rules are evaluated only when the parent Rule condition matches. Each nested rule can contain its own conditions.</source>
          <target state="translated">これらのルールは、親ルールの条件が一致した場合にのみ評価されます。入れ子になった各ルールには、独自の条件を含めることができます。</target>
        </trans-unit>
        <trans-unit id="f724bae2af621776d8e318cd6c0f8e5bb1bcca74" translate="yes" xml:space="preserve">
          <source>These rules are evaluated when the Rule condition matches.</source>
          <target state="translated">これらのルールは、ルール条件が一致したときに評価されます。</target>
        </trans-unit>
        <trans-unit id="012c1550965907b42ec6d480f2bfaac07754c8c0" translate="yes" xml:space="preserve">
          <source>These steps would occur:</source>
          <target state="translated">これらのステップが発生します。</target>
        </trans-unit>
        <trans-unit id="57d372ece1047febfc2ceef2a98e5fe436082e4a" translate="yes" xml:space="preserve">
          <source>These two parameters can be used together to redirect requests in a more targeted way. The &lt;code&gt;newContentCreateContextMap&lt;/code&gt; allows you to map runtime requests to compile requests in the form of an object:</source>
          <target state="translated">これら2つのパラメーターを一緒に使用して、より的を絞った方法で要求をリダイレクトできます。 &lt;code&gt;newContentCreateContextMap&lt;/code&gt; は、あなたがオブジェクトの形式で要求をコンパイルするランタイム要求をマッピングすることができます：</target>
        </trans-unit>
        <trans-unit id="f2417bbde2d2cb573d2628acc3066e13e3600335" translate="yes" xml:space="preserve">
          <source>They also serve the purpose of doing &lt;strong&gt;anything else&lt;/strong&gt; that a &lt;a href=&quot;loaders&quot;&gt;loader&lt;/a&gt; cannot do.</source>
          <target state="translated">また、&lt;a href=&quot;loaders&quot;&gt;ローダー&lt;/a&gt;が実行できない&lt;strong&gt;他の&lt;/strong&gt;ことを実行する目的にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="3d4c374abb62de5d26d0baf6648ec4bfbb523c24" translate="yes" xml:space="preserve">
          <source>They are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.</source>
          <target state="translated">これらはデフォルトでは有効になっていません。なぜなら、実行時のオーバーヘッドが発生し、バンドルサイズが増大するからです (JS ソースマップはそうではありません)。加えて、相対パスはバグが多く、サーバの URL を含む絶対パスを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="3be8d3fafa2f11f4d807cab33b9addaeb88267eb" translate="yes" xml:space="preserve">
          <source>They must not point to files outside of the package.</source>
          <target state="translated">パッケージ外のファイルを指してはいけません。</target>
        </trans-unit>
        <trans-unit id="6967131bc5ac15c7eedbcd99737fb8d7b6bcbf81" translate="yes" xml:space="preserve">
          <source>Third party addons</source>
          <target state="translated">サードパーティアドオン</target>
        </trans-unit>
        <trans-unit id="7049c64126a5ef56b2771dde6ee8579603f61c49" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;stats&lt;/code&gt; object exposes the following methods:</source>
          <target state="translated">この &lt;code&gt;stats&lt;/code&gt; オブジェクトは以下のメソッドを公開します：</target>
        </trans-unit>
        <trans-unit id="c856cbc45e829c1fa37cb33d1001f29567b6f09e" translate="yes" xml:space="preserve">
          <source>This CANNOT be used in an async function.</source>
          <target state="translated">これは非同期関数では使用できません。</target>
        </trans-unit>
        <trans-unit id="5ede9a9f06a97791ce57472a51006e343016b504" translate="yes" xml:space="preserve">
          <source>This CANNOT be used in an asynchronous function.</source>
          <target state="translated">これは非同期関数では使用できません。</target>
        </trans-unit>
        <trans-unit id="d6fcf631173dfe5541552e3cd115c778ac244bb4" translate="yes" xml:space="preserve">
          <source>This Webpack loader inlines SVG as module. If you use Adobe suite or Sketch to export SVGs, you will get auto-generated, unneeded crusts. This loader removes it for you, too.</source>
          <target state="translated">このWebpackローダーはSVGをモジュールとしてインライン化します。Adobe suite や Sketch を使って SVG をエクスポートすると、自動生成された不要なクラストが発生します。このローダーはこれも除去してくれます。</target>
        </trans-unit>
        <trans-unit id="8c495b2f5e535333feb3a4586360cff0743ba26a" translate="yes" xml:space="preserve">
          <source>This allows you to control the versions of all your dependencies, and to choose which Sass implementation to use.</source>
          <target state="translated">これにより、すべての依存関係のバージョンを制御し、どの Sass 実装を使用するかを選択することができます。</target>
        </trans-unit>
        <trans-unit id="9bbc872ea1fac7265c2fd82e9ad634bb871e11e4" translate="yes" xml:space="preserve">
          <source>This article will focus on the last of these three parts, the runtime and in particular the manifest.</source>
          <target state="translated">この記事では、これら3つの部分のうち最後の部分、ランタイム、特にマニフェストに焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="2e37d12719405c39b28ec72e5b413bbc6c7508c4" translate="yes" xml:space="preserve">
          <source>This article will focus on the last of these three parts: the runtime and, in particular, the manifest.</source>
          <target state="translated">この記事では、これら3つの部分のうち最後の部分であるランタイムと、特にマニフェストに焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="a21549500935266e3533d6a74c4979f993c4dcf4" translate="yes" xml:space="preserve">
          <source>This becomes a problem when the module is executed in a CommonJS context where &lt;code&gt;this&lt;/code&gt; is equal to &lt;code&gt;module.exports&lt;/code&gt;. In this case you can override &lt;code&gt;this&lt;/code&gt; using the &lt;a href=&quot;../loaders/imports-loader&quot;&gt;&lt;code&gt;imports-loader&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">モジュールはCommonJSコンテキストで実行されたとき、これは問題になり &lt;code&gt;this&lt;/code&gt; に等しい &lt;code&gt;module.exports&lt;/code&gt; は。この場合、&lt;a href=&quot;../loaders/imports-loader&quot;&gt; &lt;code&gt;imports-loader&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;this&lt;/code&gt; をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="baec1fec2435cd7acf759f93d8b8be9e1c4855c5" translate="yes" xml:space="preserve">
          <source>This boolean is set to true when this is compiled by webpack.</source>
          <target state="translated">このブール値は、これがwebpackでコンパイルされたときにtrueに設定されます。</target>
        </trans-unit>
        <trans-unit id="f899d8d2c6f2c05b71df74eabdec78e2e7328f65" translate="yes" xml:space="preserve">
          <source>This boots the max number of workers in the pool and loads specified modules into the node.js module cache.</source>
          <target state="translated">プール内のワーカーの最大数を起動し、指定したモジュールをnode.jsモジュールキャッシュにロードします。</target>
        </trans-unit>
        <trans-unit id="c0bc6ef24b6b80a9bf49aeb98312bc918d80974b" translate="yes" xml:space="preserve">
          <source>This bundle will not work as expected, or not work at all (in the case of the almond loader) if loaded directly with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. It will only work through a RequireJS compatible asynchronous module loader through the actual path to that file, so in this case, the &lt;code&gt;output.path&lt;/code&gt; and &lt;code&gt;output.filename&lt;/code&gt; may become important for this particular setup if these are exposed directly on the server.</source>
          <target state="translated">この &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; は、&amp;lt;script&amp;gt;タグを使用して直接ロードした場合、期待どおりに機能しないか、まったく機能しません（アーモンドローダーの場合）。このファイルへの実際のパスを介してRequireJS互換の非同期モジュールローダーを介してのみ機能するため、この場合、 &lt;code&gt;output.path&lt;/code&gt; と &lt;code&gt;output.filename&lt;/code&gt; がサーバーで直接公開されている場合、この特定のセットアップで重要になります。</target>
        </trans-unit>
        <trans-unit id="01881267fbb71bd4e8be6e5ecca674685a340399" translate="yes" xml:space="preserve">
          <source>This can be achieved by using the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; to extract the CSS when running in production mode.</source>
          <target state="translated">これは、本番モードで実行しているときに&lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt;を使用してCSSを抽出することで実現できます。</target>
        </trans-unit>
        <trans-unit id="3bbdfa3acc96c26d61ba3ce08b93f184f93f43db" translate="yes" xml:space="preserve">
          <source>This can be done using the &lt;code&gt;externals&lt;/code&gt; configuration:</source>
          <target state="translated">これは、 &lt;code&gt;externals&lt;/code&gt; 設定を使用して行うことができます：</target>
        </trans-unit>
        <trans-unit id="9580dc90d48db5f49636b2d7b71da6ad0884a869" translate="yes" xml:space="preserve">
          <source>This can be especially helpful when implementing some sort of data visualization using a tool like &lt;a href=&quot;https://github.com/d3&quot;&gt;d3&lt;/a&gt;. Instead of making an ajax request and parsing the data at runtime you can load it into your module during the build process so that the parsed data is ready to go as soon as the module hits the browser.</source>
          <target state="translated">これは、&lt;a href=&quot;https://github.com/d3&quot;&gt;d3&lt;/a&gt;などのツールを使用してある種のデータ視覚化を実装するときに特に役立ちます。実行時にajaxリクエストを作成してデータを解析する代わりに、ビルドプロセス中にそれをモジュールにロードして、解析されたデータがモジュールがブラウザーに到達するとすぐに実行できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="7e1bf4407126d15752d86781be25b8cf248f1d37" translate="yes" xml:space="preserve">
          <source>This can be fixed by using Node's &lt;code&gt;--preserve-symlinks&lt;/code&gt; flag which will allow you to develop cross-module, without experiencing inconsistencies when comparing against a normal, non-linked install:</source>
          <target state="translated">これは、ノードの &lt;code&gt;--preserve-symlinks&lt;/code&gt; フラグを使用して修正できます。これにより、通常のリンクされていないインストールと比較するときに矛盾が発生することなく、クロスモジュールを開発できます。</target>
        </trans-unit>
        <trans-unit id="eb1652868b3142e361ae8e70d6e1db4dfbc49f14" translate="yes" xml:space="preserve">
          <source>This can be useful for allowing different behaviour between builds.</source>
          <target state="translated">これは、ビルド間で異なる動作を可能にするのに便利です。</target>
        </trans-unit>
        <trans-unit id="44f088e20304c744db728f5661a86aa4d21f05b1" translate="yes" xml:space="preserve">
          <source>This can be useful if you want to require all files in a directory or matching a pattern, Example:</source>
          <target state="translated">これは、ディレクトリ内のすべてのファイルを要求したい場合や、パターンにマッチするファイルを要求したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8676024628a920433edffaa7ae6a6bad09d7f6a9" translate="yes" xml:space="preserve">
          <source>This can either be a &lt;code&gt;boolean&lt;/code&gt; value or the cache directory path(ex: &lt;code&gt;'./.eslint-loader-cache'&lt;/code&gt;).</source>
          <target state="translated">これは、 &lt;code&gt;boolean&lt;/code&gt; 値またはキャッシュディレクトリパスのいずれかです（例： &lt;code&gt;'./.eslint-loader-cache'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="00fe4f196235a0bd98a186c356729387256cb42f" translate="yes" xml:space="preserve">
          <source>This can improve performance in some cases. Use it with caution because aliases and &lt;code&gt;@import&lt;/code&gt; at-rules starting with &lt;code&gt;~&lt;/code&gt; will not work.</source>
          <target state="translated">これにより、パフォーマンスが向上する場合があります。 &lt;code&gt;~&lt;/code&gt; 始まるエイリアスと &lt;code&gt;@import&lt;/code&gt; at-rulesは機能しないため、注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="90feb19f191bf3c2f898593139ee44562c490b72" translate="yes" xml:space="preserve">
          <source>This can improve performance in some cases. Use it with caution because aliases and &lt;code&gt;@import&lt;/code&gt; at-rules starting with &lt;code&gt;~&lt;/code&gt; will not work. You can pass own &lt;code&gt;importer&lt;/code&gt; to solve this (see &lt;a href=&quot;https://github.com/sass/node-sass#importer--v200---experimental&quot;&gt;&lt;code&gt;importer docs&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">これにより、パフォーマンスが向上する場合があります。 &lt;code&gt;~&lt;/code&gt; 始まるエイリアスと &lt;code&gt;@import&lt;/code&gt; at-rulesは機能しないため、注意して使用してください。これを解決するために、独自の &lt;code&gt;importer&lt;/code&gt; を渡すことができます（&lt;a href=&quot;https://github.com/sass/node-sass#importer--v200---experimental&quot;&gt; &lt;code&gt;importer docs&lt;/code&gt; &lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5aa95a44f7b56fa270e7540b0c4516d6afc23ae5" translate="yes" xml:space="preserve">
          <source>This concatenation behavior is called &amp;ldquo;scope hoisting.&amp;rdquo;</source>
          <target state="translated">この連結動作は「スコープの巻き上げ」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a1b60edc5c47b09819f1b28410a8fcf699414214" translate="yes" xml:space="preserve">
          <source>This concept may be used to obtain implicit common vendor chunks:</source>
          <target state="translated">この概念は、暗黙の共通ベンダチャンクを取得するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="d59c040af16a3e1a5f7645e2762906f183f9fd1b" translate="yes" xml:space="preserve">
          <source>This condition should be used when looking for a javascript file that can be injected as script tag in a HTML page without additional preprocessing.</source>
          <target state="translated">この条件は、追加の前処理なしにHTMLページのscriptタグとして注入できるjavascriptファイルを探しているときに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8b14c6199ca975479eddf0911297de4ba6c2b77a" translate="yes" xml:space="preserve">
          <source>This configuration can enlarge your initial bundles, it is recommended to use dynamic imports when a module is not immediately needed.</source>
          <target state="translated">この設定は、初期のバンドルを拡大することができます。</target>
        </trans-unit>
        <trans-unit id="f8178aeab727f5b2ae39ef8a55f0f3db44980db5" translate="yes" xml:space="preserve">
          <source>This configuration object represents the default behavior of the &lt;code&gt;SplitChunksPlugin&lt;/code&gt;.</source>
          <target state="translated">この構成オブジェクトは、 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; のデフォルトの動作を表します。</target>
        </trans-unit>
        <trans-unit id="b426c6694d3980dd6d187a7b69ccfdfdc20ed06a" translate="yes" xml:space="preserve">
          <source>This configuration would output a single &lt;code&gt;bundle.js&lt;/code&gt; file into the &lt;code&gt;dist&lt;/code&gt; directory.</source>
          <target state="translated">この構成では、単一の &lt;code&gt;bundle.js&lt;/code&gt; ファイルが &lt;code&gt;dist&lt;/code&gt; ディレクトリーに出力されます。</target>
        </trans-unit>
        <trans-unit id="fa12d5e0203ded4efe2f2beb27f665fe78f5300e" translate="yes" xml:space="preserve">
          <source>This document is intended to give a &lt;strong&gt;high-level&lt;/strong&gt; overview of these concepts, while providing links to detailed concept specific use cases.</source>
          <target state="translated">このドキュメントは、これらの概念の&lt;strong&gt;高レベルの&lt;/strong&gt;概要を提供する一方で、詳細な概念の特定の使用例へのリンクを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6f90b031461d4914e663e4293c5ba433153cecd3" translate="yes" xml:space="preserve">
          <source>This document is intended to give a &lt;strong&gt;high-level&lt;/strong&gt; overview of these concepts, while providing links to detailed concept-specific use cases.</source>
          <target state="translated">この文書は、与えることを目的としている&lt;strong&gt;高レベルの&lt;/strong&gt;詳細な概念固有のユースケースへのリンクを提供しながら、これらの概念の概要を説明。</target>
        </trans-unit>
        <trans-unit id="3b55640f7b32656e0d1d0d69041cf653588b5957" translate="yes" xml:space="preserve">
          <source>This doesn't result in any change to the CSS itself but exports multiple classnames.</source>
          <target state="translated">これはCSS自体には何の変更も加えず、複数のクラス名をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="599f08e0438def7468d189bca38955cb98998e6b" translate="yes" xml:space="preserve">
          <source>This enables local scoped CSS by default. (You can switch it off with &lt;code&gt;:global(...)&lt;/code&gt; or &lt;code&gt;:global&lt;/code&gt; for selectors and/or rules.).</source>
          <target state="translated">これにより、デフォルトでローカルスコープのCSSが有効になります。（セレクターやルールの場合は、 &lt;code&gt;:global(...)&lt;/code&gt; または &lt;code&gt;:global&lt;/code&gt; を使用してオフにできます。）</target>
        </trans-unit>
        <trans-unit id="3bad9fc6c6d0140a761114db8b4526c2bdc7ed1a" translate="yes" xml:space="preserve">
          <source>This enables you to &lt;code&gt;import './style.css'&lt;/code&gt; into the file that depends on that styling. Now, when that module is run, a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag with the stringified css will be inserted into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your html file.</source>
          <target state="translated">これにより、そのスタイルに依存するファイルに &lt;code&gt;import './style.css'&lt;/code&gt; をインポートできます。これで、そのモジュールが実行されると、文字列化されたcssを含む &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; タグがHTMLファイルの &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; に挿入されます。</target>
        </trans-unit>
        <trans-unit id="bd65cf352aa69ab40ac2d0a4ed9c1dfdf6de6cea" translate="yes" xml:space="preserve">
          <source>This exposes your library bundle available as a global variable named &lt;code&gt;webpackNumbers&lt;/code&gt; when imported. To make the library compatible with other environments, add &lt;code&gt;libraryTarget&lt;/code&gt; property to the config. This will add the different options about how the library can be exposed.</source>
          <target state="translated">これにより、インポート時にライブラリバンドルが &lt;code&gt;webpackNumbers&lt;/code&gt; という名前のグローバル変数として公開されます。ライブラリを他の環境と互換性を持たせるには、設定に &lt;code&gt;libraryTarget&lt;/code&gt; プロパティを追加します。これにより、ライブラリの公開方法に関するさまざまなオプションが追加されます。</target>
        </trans-unit>
        <trans-unit id="e4f8fee3199cc793be9ddd412547afaade1fd229" translate="yes" xml:space="preserve">
          <source>This exposes your library bundle available as a global variable named &lt;code&gt;webpackNumbers&lt;/code&gt; when imported. To make the library compatible with other environments, add &lt;code&gt;libraryTarget&lt;/code&gt; property to the config. This will add various options about how the library can be exposed.</source>
          <target state="translated">これにより、インポート時に &lt;code&gt;webpackNumbers&lt;/code&gt; という名前のグローバル変数として使用可能なライブラリバンドルが公開されます。ライブラリを他の環境と互換性を持たせるには、 &lt;code&gt;libraryTarget&lt;/code&gt; プロパティを構成に追加します。これにより、ライブラリを公開する方法に関するさまざまなオプションが追加されます。</target>
        </trans-unit>
        <trans-unit id="625c67813916e5c3bace943816ef36fc46242906" translate="yes" xml:space="preserve">
          <source>This exposes your library under all the module definitions, allowing it to work with CommonJS, AMD and as global variable. Take a look at the &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD Repository&lt;/a&gt; to learn more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b052c558cba2236dd392c04e60b71c7d78db1ae" translate="yes" xml:space="preserve">
          <source>This expression will trigger the hook:</source>
          <target state="translated">この式はフックをトリガします。</target>
        </trans-unit>
        <trans-unit id="69ef084d40688e7b5d5d8996554e04e0ca6cfd1c" translate="yes" xml:space="preserve">
          <source>This feature is great for productivity. All we need to do is update our &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; configuration, and use webpack's built in HMR plugin. We'll also remove the entry point for &lt;code&gt;print.js&lt;/code&gt; as it will now be consumed by the &lt;code&gt;index.js&lt;/code&gt; module.</source>
          <target state="translated">この機能は生産性に優れています。必要なのは、&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;構成を更新し、webpackの組み込みHMRプラグインを使用することだけです。また、 &lt;code&gt;print.js&lt;/code&gt; のエントリポイントも削除します。これは、 &lt;code&gt;index.js&lt;/code&gt; モジュールによって消費されるためです。</target>
        </trans-unit>
        <trans-unit id="c92b3bdf66deb3e19c2225ce04f1e41433492b7e" translate="yes" xml:space="preserve">
          <source>This feature is great for productivity. All we need to do is update our &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; configuration, and use webpack's built-in HMR plugin. We'll also remove the entry point for &lt;code&gt;print.js&lt;/code&gt; as it will now be consumed by the &lt;code&gt;index.js&lt;/code&gt; module.</source>
          <target state="translated">この機能は生産性に優れています。&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;構成を更新し、webpackの組み込みHMRプラグインを使用するだけです。また、 &lt;code&gt;print.js&lt;/code&gt; のエントリポイントは &lt;code&gt;index.js&lt;/code&gt; モジュールによって使用されるため、削除します。</target>
        </trans-unit>
        <trans-unit id="404dddeb1ceb60699ded778054d7f5ef9fc9fa12" translate="yes" xml:space="preserve">
          <source>This feature is provided by webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt;&lt;code&gt;NodeStuffPlugin&lt;/code&gt;&lt;/a&gt; plugin.</source>
          <target state="translated">この機能は、webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt; &lt;code&gt;NodeStuffPlugin&lt;/code&gt; &lt;/a&gt;プラグインによって提供されます。</target>
        </trans-unit>
        <trans-unit id="79ad76420d55e87371fad64492f2963aea24c4eb" translate="yes" xml:space="preserve">
          <source>This feature is provided by webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt;&lt;code&gt;NodeStuffPlugin&lt;/code&gt;&lt;/a&gt; plugin. If the target is &quot;web&quot; (default) or &quot;webworker&quot;, the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js&quot;&gt;&lt;code&gt;NodeSourcePlugin&lt;/code&gt;&lt;/a&gt; plugin is also activated.</source>
          <target state="translated">この機能は、webpackの内部&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt; &lt;code&gt;NodeStuffPlugin&lt;/code&gt; &lt;/a&gt;プラグインによって提供されます。ターゲットが「web」（デフォルト）または「webworker」の場合、&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js&quot;&gt; &lt;code&gt;NodeSourcePlugin&lt;/code&gt; &lt;/a&gt;プラグインもアクティブになります。</target>
        </trans-unit>
        <trans-unit id="b704dfb503dd69b6a849b0e22a57a5d32765f8b9" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use &lt;code&gt;import()&lt;/code&gt; with older browsers, remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">この機能は内部的に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; に&lt;/a&gt;依存しています。古いブラウザで &lt;code&gt;import()&lt;/code&gt; を使用する場合は、&lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt;や&lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;などのポリフィルを使用して &lt;code&gt;Promise&lt;/code&gt; をシムすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="a46c09f986aa73dc78c4b47b58c94cabba924769" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use &lt;code&gt;require.ensure&lt;/code&gt; with older browsers, remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">この機能は内部的に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; に&lt;/a&gt;依存しています。古いブラウザで &lt;code&gt;require.ensure&lt;/code&gt; を使用する場合は、&lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt;や&lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;などのポリフィルを使用して &lt;code&gt;Promise&lt;/code&gt; をシムすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="1784fa4ee081d52871ddd8875156431960fca6ae" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use AMD with older browsers (e.g. Internet Explorer 11), remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">この機能は内部的に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; に&lt;/a&gt;依存しています。AMDを古いブラウザー（例：Internet Explorer 11）で使用する場合は、&lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;必ずes6-promise&lt;/a&gt;や&lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;などのポリフィルを使用して &lt;code&gt;Promise&lt;/code&gt; をシムしてください。</target>
        </trans-unit>
        <trans-unit id="2f10d727220baca2938b1a342e008a2d35949f1c" translate="yes" xml:space="preserve">
          <source>This follows the same rules as those specified for file resolution. But the &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt;&lt;code&gt;resolveLoader&lt;/code&gt;&lt;/a&gt; configuration option can be used to have separate resolution rules for loaders.</source>
          <target state="translated">これは、ファイル解決に指定されたものと同じルールに従います。ただし、&lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt; &lt;code&gt;resolveLoader&lt;/code&gt; &lt;/a&gt;構成オプションを使用して、ローダーに個別の解決ルールを設定できます。</target>
        </trans-unit>
        <trans-unit id="f32268d39ceea09d3d6306eb50cca10ac3efd123" translate="yes" xml:space="preserve">
          <source>This guide contains some useful tips for improving build/compilation performance.</source>
          <target state="translated">このガイドには、ビルド/コンパイルのパフォーマンスを向上させるために役立つヒントがいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="6e74ee278b6483e63e246262d4b0558794583866" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;asset-management&quot;&gt;&lt;code&gt;Asset Management&lt;/code&gt;&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;asset-management&quot;&gt; &lt;code&gt;Asset Management&lt;/code&gt; &lt;/a&gt;ガイドにあるコード例を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="5b251b76cf265164795401de844aec084670ed8b" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;development&quot;&gt;Development&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;development&quot;&gt;開発&lt;/a&gt;ガイドにあるコード例を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="e695885af13bd16faad41148a2a86747da0469ea" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;output-management&quot;&gt;出力管理&lt;/a&gt;ガイドにあるコード例を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="8177ec7567235499917c71e39fc37b8bec828620" translate="yes" xml:space="preserve">
          <source>This guide extends the example provided in &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt;. Please make sure you are at least familiar with the example provided there and the &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt; chapter.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;getting-started&quot;&gt;「はじめに」で&lt;/a&gt;提供されている例を拡張したものです。少なくとも、そこに提供されている例と&lt;a href=&quot;output-management&quot;&gt;出力管理の&lt;/a&gt;章に精通していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e586717908f30e2eb3dae17b0c51e6aa57c70149" translate="yes" xml:space="preserve">
          <source>This guide extends the examples provided in &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt; and &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt;. Please make sure you are at least familiar with the examples provided in them.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;getting-started&quot;&gt;「はじめに」&lt;/a&gt;および「&lt;a href=&quot;output-management&quot;&gt;出力管理&lt;/a&gt;」で提供されている例を拡張したものです。提供されている例に少なくとも精通していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="b10dfffc8f2cd75e2c9419cc6320a9b42af80acc" translate="yes" xml:space="preserve">
          <source>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their content has changed.</source>
          <target state="translated">このガイドでは、webpackコンパイルによって生成されたファイルが、その内容が変更されない限りキャッシュされたままでいられるようにするために必要な設定に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="73feb60d4ff54e1bed9cecb930b3d4cb4688b9bd" translate="yes" xml:space="preserve">
          <source>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their contents has changed.</source>
          <target state="translated">このガイドでは、webpackコンパイルによって生成されたファイルが、その内容が変更されない限りキャッシュされたままでいられるようにするために必要な設定に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="28ff626f461f33c15358e30a2a67dd11c6916c34" translate="yes" xml:space="preserve">
          <source>This guide goes through the various methods used to install webpack.</source>
          <target state="translated">このガイドでは、webpackをインストールするために使用される様々な方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="04ab105d2ba31796ba8058507be23bb87f5478d3" translate="yes" xml:space="preserve">
          <source>This guide is a small follow-up to &lt;a href=&quot;code-splitting&quot;&gt;Code Splitting&lt;/a&gt;. If you have not yet read through that guide, please do so now.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;code-splitting&quot;&gt;コード分​​割の&lt;/a&gt;小さなフォローアップです。そのガイドをまだ読んでいない場合は、今すぐ読んでください。</target>
        </trans-unit>
        <trans-unit id="9515b6e28f5a9f26a4966a59ee8efe94d078667b" translate="yes" xml:space="preserve">
          <source>This guide stems from the &lt;a href=&quot;getting-started&quot;&gt;&lt;em&gt;Getting Started&lt;/em&gt;&lt;/a&gt; guide.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;getting-started&quot;&gt;&lt;em&gt;入門&lt;/em&gt;&lt;/a&gt;ガイドに基づいています。</target>
        </trans-unit>
        <trans-unit id="6a5c8a77e65080c1a87ac1b102bd2352b9720587" translate="yes" xml:space="preserve">
          <source>This hook allows you to do a one more additional pass of the build.</source>
          <target state="translated">このフックを使用すると、ビルドをもう1パス追加で行うことができます。</target>
        </trans-unit>
        <trans-unit id="54dabb78d9165f59094c77b77fbfd1102990aee5" translate="yes" xml:space="preserve">
          <source>This hook can be used to add/modify the compilation parameters:</source>
          <target state="translated">このフックを使ってコンパイルパラメータを追加/変更することができます。</target>
        </trans-unit>
        <trans-unit id="7db5a0744cb411b222f5ddf37115a92427f093c9" translate="yes" xml:space="preserve">
          <source>This indicates which chunks will be selected for optimization. If a string is provided, possible values are &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, and &lt;code&gt;initial&lt;/code&gt;. Providing &lt;code&gt;all&lt;/code&gt; can be particularly powerful because it means that chunks can be shared even between async and non-async chunks.</source>
          <target state="translated">これは、最適化のために選択されるチャンクを示します。文字列が指定されている場合、可能な値は &lt;code&gt;all&lt;/code&gt; 、 &lt;code&gt;async&lt;/code&gt; 、および &lt;code&gt;initial&lt;/code&gt; です。 &lt;code&gt;all&lt;/code&gt; を提供することは、非同期チャンクと非非同期チャンクの間でもチャンクを共有できることを意味するため、特に強力です。</target>
        </trans-unit>
        <trans-unit id="6f1794885ce10056eb9bb0faddc4d3cad727c4ef" translate="yes" xml:space="preserve">
          <source>This indicates which chunks will be selected for optimization. When a string is provided, valid values are &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, and &lt;code&gt;initial&lt;/code&gt;. Providing &lt;code&gt;all&lt;/code&gt; can be particularly powerful, because it means that chunks can be shared even between async and non-async chunks.</source>
          <target state="translated">これは、最適化のために選択されるチャンクを示します。文字列が指定されている場合、有効な値は &lt;code&gt;all&lt;/code&gt; 、 &lt;code&gt;async&lt;/code&gt; 、および &lt;code&gt;initial&lt;/code&gt; です。 &lt;code&gt;all&lt;/code&gt; を提供することは、非同期チャンクと非非同期チャンクの間でもチャンクを共有できることを意味するため、特に強力です。</target>
        </trans-unit>
        <trans-unit id="8df877acd9008859a1bdb1efea3293a6acf64ffc" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;false&lt;/code&gt; if the module is currently executing, and &lt;code&gt;true&lt;/code&gt; if the sync execution has finished.</source>
          <target state="translated">これは、モジュールが現在実行中の場合は &lt;code&gt;false&lt;/code&gt; 、同期の実行が終了した場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ecb3ef0422ffd6e3c5b0a329b020146b6b6f51bb" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; by default in &lt;code&gt;production&lt;/code&gt; mode.</source>
          <target state="translated">これは、 &lt;code&gt;production&lt;/code&gt; モードのデフォルトで &lt;code&gt;true&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="df1f3325933036ef23805a4ec9f47646d400ceed" translate="yes" xml:space="preserve">
          <source>This is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (i.e., a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.</source>
          <target state="translated">これは、1つのエントリーポイント(すなわちライブラリ)でアプリケーションやツールのためのwebpack設定を素早く設定したい場合に最適な選択です。しかし、この構文では構成を拡張したり拡大したりする柔軟性はあまりありません。</target>
        </trans-unit>
        <trans-unit id="c87ce6ad59d4ba0a8d22cf3002d88ef702a80d86" translate="yes" xml:space="preserve">
          <source>This is a list of plugins which are used by webpack internally.</source>
          <target state="translated">webpackが内部で使用しているプラグインの一覧です。</target>
        </trans-unit>
        <trans-unit id="cc7419b23a9e92d52227ca5c5b7cee9ef1527623" translate="yes" xml:space="preserve">
          <source>This is an example for a package that has optimizations for production and development usage with runtime detection for &lt;code&gt;process.env&lt;/code&gt; and also ships a CommonJs and ESM version</source>
          <target state="translated">これは、 &lt;code&gt;process.env&lt;/code&gt; のランタイム検出を使用して本番環境と開発環境を最適化し、CommonJsおよびESMバージョンも出荷するパッケージの例です。</target>
        </trans-unit>
        <trans-unit id="5bd6e99edd725757c93ffeb71735a604163063ec" translate="yes" xml:space="preserve">
          <source>This is an example for a package that supports Node.js, browser and electron, has optimizations for production and development usage with runtime detection for &lt;code&gt;process.env&lt;/code&gt; and also ships a CommonJs and ESM version.</source>
          <target state="translated">これは、Node.js、ブラウザー、および電子をサポートし、 &lt;code&gt;process.env&lt;/code&gt; のランタイム検出を使用して本番環境と開発用に最適化され、CommonJsおよびESMバージョンも出荷するパッケージの例です。</target>
        </trans-unit>
        <trans-unit id="8886144b094f0f97dada64e907fc12e5eda8ec9e" translate="yes" xml:space="preserve">
          <source>This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you'll receive 404 errors while loading these resources.</source>
          <target state="translated">これは、オンデマンドロードを使用したり、画像やファイルなどの外部リソースをロードする際に重要なオプションです。不適切な値を指定すると、これらのリソースをロードしている間に404エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0757868f46be2aa16e1835586e0d7a20832c2a91" translate="yes" xml:space="preserve">
          <source>This is an object where each property is the name of a Node global or module and each value may be one of the following...</source>
          <target state="translated">これは、各プロパティがノードのグローバルまたはモジュールの名前であり、各値が以下のいずれかであるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="48cde90b57a464eb3fff794ce73eb3c3ac1fa916" translate="yes" xml:space="preserve">
          <source>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</source>
          <target state="translated">これは、webpack がエントリチャンクにランタイムとマニフェストという特定のボイラプレートを含んでいるからです。</target>
        </trans-unit>
        <trans-unit id="53b087237e060748cf7c076f6a909fb930480aaf" translate="yes" xml:space="preserve">
          <source>This is by far the easiest and most intuitive way to split code. However, it is more manual and has some pitfalls we will go over. Let's take a look at how we might split another module from the main bundle:</source>
          <target state="translated">これは、コードを分割する最も簡単で直感的な方法です。しかし、この方法はよりマニュアル的で、いくつかの落とし穴があります。ここでは、メインバンドルから別のモジュールを分割する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="560b1952bb069ebc7dec6531e687fec09448474f" translate="yes" xml:space="preserve">
          <source>This is by far the easiest, and most intuitive, way to split code. However, it is more manual and has some pitfalls we will go over. Let's take a look at how we might split another module from the main bundle:</source>
          <target state="translated">これは、コードを分割する最も簡単で直感的な方法です。しかし、この方法はよりマニュアル的で、いくつかの落とし穴があります。ここでは、メインバンドルから別のモジュールを分割する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ca9966a9a13a33427ba2eee45f8d198dd3978467" translate="yes" xml:space="preserve">
          <source>This is discouraged in webpack 4. Instead, the &lt;a href=&quot;../configuration/optimization#optimizationsplitchunks&quot;&gt;&lt;code&gt;optimization.splitChunks&lt;/code&gt;&lt;/a&gt; option takes care of separating vendors and app modules and creating a separate file. &lt;strong&gt;Do not&lt;/strong&gt; create an entry for vendors or other stuff that is not the starting point of execution.</source>
          <target state="translated">これはwebpack4では推奨されていません。代わりに、&lt;a href=&quot;../configuration/optimization#optimizationsplitchunks&quot;&gt; &lt;code&gt;optimization.splitChunks&lt;/code&gt; &lt;/a&gt;オプションは、ベンダーとアプリモジュールを分離し、別のファイルを作成します。実行の開始点ではないベンダーやその他のもののエントリを作成&lt;strong&gt;しないでください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e22332e1691cc2177c430d4688ce63cb96fe89c0" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following &lt;code&gt;DefinePlugin&lt;/code&gt; application:</source>
          <target state="translated">これは、次の &lt;code&gt;DefinePlugin&lt;/code&gt; アプリケーションと同等です。</target>
        </trans-unit>
        <trans-unit id="19b0d712c36cad578318f77cf36dd5f57263a1e8" translate="yes" xml:space="preserve">
          <source>This is especially useful when some of your Less variables depend on the environment:</source>
          <target state="translated">これは、Less変数の一部が環境に依存している場合に特に有用です。</target>
        </trans-unit>
        <trans-unit id="d4b2fe2586ad8a0f46131537b6cfc86b305d7d08" translate="yes" xml:space="preserve">
          <source>This is especially useful when some of your Sass variables depend on the environment:</source>
          <target state="translated">これは、Sass変数の一部が環境に依存している場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="3b0161a59d14f3b8c460f7f5aa031fcaab9998c8" translate="yes" xml:space="preserve">
          <source>This is especially useful when some of your Stylus variables depend on the environment:</source>
          <target state="translated">これは、Stylus変数の一部が環境に依存している場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="a247f4b44e6328f72d37accf666f7af5287fe2f2" translate="yes" xml:space="preserve">
          <source>This is happening because the button's &lt;code&gt;onclick&lt;/code&gt; event handler is still bound to the original &lt;code&gt;printMe&lt;/code&gt; function.</source>
          <target state="translated">これは、ボタンの &lt;code&gt;onclick&lt;/code&gt; イベントハンドラーが元の &lt;code&gt;printMe&lt;/code&gt; 関数にまだバインドされているために発生します。</target>
        </trans-unit>
        <trans-unit id="cfbbab771cd3e0d8e7090c42bd261a535ae96610" translate="yes" xml:space="preserve">
          <source>This is just one example, but there are many others that can easily trip people up. Luckily, there are a lot of loaders out there (some of which are mentioned below) that will make hot module replacement much easier.</source>
          <target state="translated">これはほんの一例ですが、簡単に人々をトリップさせることができる多くの他のものがあります。幸いにも、ホットモジュールの交換をはるかに簡単にする多くのローダーがそこにあります(そのうちのいくつかは以下に記載されています)。</target>
        </trans-unit>
        <trans-unit id="bcb367cbad1664c6b3ecb131586bd7694252d3ae" translate="yes" xml:space="preserve">
          <source>This is often known as Micro-Frontends, but is not limited to that.</source>
          <target state="translated">これは、マイクロフロントエンドとして知られていることが多いが、これに限定されるものではない。</target>
        </trans-unit>
        <trans-unit id="ed595ad5f73af435979138b3d3627bf88533699b" translate="yes" xml:space="preserve">
          <source>This is only needed in rare cases for compatibility!</source>
          <target state="translated">これは互換性のためにまれにしか必要ありません!</target>
        </trans-unit>
        <trans-unit id="8b0007fbd5e6cd4e550680e629295f8a99260ae0" translate="yes" xml:space="preserve">
          <source>This is the entry point your configuration, initialize it inside the constructor of your generator in order for the CLI to work:</source>
          <target state="translated">これは、CLIが動作するためにジェネレータのコンストラクタ内で初期化します。</target>
        </trans-unit>
        <trans-unit id="5f23724bb8bbb634b7fc1909897bbd4c353c40fa" translate="yes" xml:space="preserve">
          <source>This is the lookup priority in increasing order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a04aff2cecd73b8ca74cfcee6fa3f22d2d86581" translate="yes" xml:space="preserve">
          <source>This is useful for third-party modules that rely on global variables like &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;this&lt;/code&gt; being the &lt;code&gt;window&lt;/code&gt; object. The imports loader can add the necessary &lt;code&gt;require('whatever')&lt;/code&gt; calls, so those modules work with webpack.</source>
          <target state="translated">これは、 &lt;code&gt;$&lt;/code&gt; などのグローバル変数または &lt;code&gt;window&lt;/code&gt; オブジェクトである &lt;code&gt;this&lt;/code&gt; に依存するサードパーティのモジュールに役立ちます。インポートローダーは必要な &lt;code&gt;require('whatever')&lt;/code&gt; コールを追加できるため、これらのモジュールはwebpackで動作します。</target>
        </trans-unit>
        <trans-unit id="5c2df09178c8def03e43ef498bdd896740082e04" translate="yes" xml:space="preserve">
          <source>This is what we aim to change. Once we reach the end of this module we should be able to stop the server, hit refresh and still see our application.</source>
          <target state="translated">これが私たちの目的です。このモジュールの最後に到達したら、サーバを停止してリフレッシュを実行しても、アプリケーションを見ることができるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="a59dc7c1a8af0ea046bb3f848c62fef2a133578c" translate="yes" xml:space="preserve">
          <source>This is why webpack exists. It's a tool that lets you bundle your JavaScript applications (supporting both ESM and CommonJS), and it can be extended to support many different assets such as images, fonts and stylesheets.</source>
          <target state="translated">これがwebpackが存在する理由です。これは JavaScript アプリケーションをバンドルできるツールで(ESM と CommonJS の両方をサポートしています)、画像、フォント、スタイルシートなどの多くの異なるアセットをサポートするために拡張することができます。</target>
        </trans-unit>
        <trans-unit id="4ea053504b20d1c076639a62986210dce7e9fa8e" translate="yes" xml:space="preserve">
          <source>This is your scaffold, you add the options that the CLI will transform into a webpack configuration here. You can have many different scaffolds named as you prefer, representing different configurations like &lt;code&gt;dev.config&lt;/code&gt; or &lt;code&gt;prod.config&lt;/code&gt;:</source>
          <target state="translated">これがスキャフォールドです。CLIがWebpack構成に変換するオプションをここに追加します。 &lt;code&gt;dev.config&lt;/code&gt; や &lt;code&gt;prod.config&lt;/code&gt; などのさまざまな構成を表す、好みの名前のさまざまなスキャフォールドを作成できます。</target>
        </trans-unit>
        <trans-unit id="b668cc02a4cd081db5c06a436730503d648f4ee3" translate="yes" xml:space="preserve">
          <source>This isn't a problem for most tools, but Node.js is again an exception here. For Node.js we always use the CommonJs version and expose named exports in the ESM with a ESM wrapper.</source>
          <target state="translated">これはほとんどのツールでは問題になりませんが、Node.jsはここでも例外です。Node.jsの場合、私たちは常にCommonJsのバージョンを使用し、ESMのラッパーを使ってESMで名前付きエクスポートを公開しています。</target>
        </trans-unit>
        <trans-unit id="b45f7eb5f9affbddb392058c7d7f4abfaa7fad00" translate="yes" xml:space="preserve">
          <source>This leaves any dependent modules unchanged, i.e. the code shown below will still work:</source>
          <target state="translated">これにより、依存するモジュールは変更されません。</target>
        </trans-unit>
        <trans-unit id="a70c73df8117e18869be65bde0f3fe97bb191d83" translate="yes" xml:space="preserve">
          <source>This leaves any dependent modules unchanged, i.e. the code shown below:</source>
          <target state="translated">これにより、依存モジュールは変更されません。</target>
        </trans-unit>
        <trans-unit id="46a3f41a9605c3c4e04a060a9596421064960a0d" translate="yes" xml:space="preserve">
          <source>This loader [cannot be used] with [CSS Modules] out of the box due to the way &lt;code&gt;css-loader&lt;/code&gt; processes file imports. To make them work properly, either add the css-loader&amp;rsquo;s [&lt;code&gt;importLoaders&lt;/code&gt;] option.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; がファイルのインポートを処理する方法が原因で、このローダーは[CSSモジュール]でそのまま使用できます[使用できません] 。それらを適切に機能させるには、css-loaderの[ &lt;code&gt;importLoaders&lt;/code&gt; ]オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="5d190b8c7f6d0f3902b044fdeec81f5b5fe3f35d" translate="yes" xml:space="preserve">
          <source>This loader allows use of &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot;&gt;browserify transforms&lt;/a&gt; via a webpack loader.</source>
          <target state="translated">このローダーでは、webpackローダーを介してbrowserify &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot;&gt;変換&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="fe9d535f7bc40b833c73bb475459fe6f55acdbac" translate="yes" xml:space="preserve">
          <source>This loader also supports the following loader-specific option:</source>
          <target state="translated">このローダーは、以下のローダー固有のオプションもサポートしています。</target>
        </trans-unit>
        <trans-unit id="7f1d3b58142cc368ab79e7a3d3404472a3fa8c0c" translate="yes" xml:space="preserve">
          <source>This loader is especially useful when using 3rd-party libraries having their own source maps. If not extracted and processed into the source map of the webpack bundle, browsers may misinterpret source map data. &lt;code&gt;source-map-loader&lt;/code&gt; allows webpack to maintain source map data continuity across libraries so ease of debugging is preserved.</source>
          <target state="translated">このローダーは、独自のソースマップを持つサードパーティライブラリを使用する場合に特に便利です。抽出してwebpackバンドルのソースマップに処理しないと、ブラウザーがソースマップデータを誤って解釈する可能性があります。 &lt;code&gt;source-map-loader&lt;/code&gt; を使用すると、webpackはライブラリ全体でソースマップデータの連続性を維持できるため、デバッグが容易になります。</target>
        </trans-unit>
        <trans-unit id="d7a42ee1ed1780a3d402296f3b86d6e6d37090a0" translate="yes" xml:space="preserve">
          <source>This makes the server only accessible on &lt;code&gt;127.0.0.1&lt;/code&gt;, which is fine because nginx takes care of making it available on your host PC.</source>
          <target state="translated">これにより、サーバーは &lt;code&gt;127.0.0.1&lt;/code&gt; でのみアクセス可能になります。これは、nginxがホストPCでサーバーを利用できるようにするため、問題ありません。</target>
        </trans-unit>
        <trans-unit id="c13ed36167d63c496c0f6f91ea0830c119623ac7" translate="yes" xml:space="preserve">
          <source>This makes the server only accessible on &lt;code&gt;127.0.0.1&lt;/code&gt;, which is fine, because nginx takes care of making it available on your host PC.</source>
          <target state="translated">これにより、nginxがホストPCで利用できるようにするため、サーバーは &lt;code&gt;127.0.0.1&lt;/code&gt; でのみアクセス可能になります。これは問題ありません。</target>
        </trans-unit>
        <trans-unit id="b8fc2cdf752fdcd706973b9e47dcc84ed0a7d59a" translate="yes" xml:space="preserve">
          <source>This may change in the future when the module system (i. e. webpack) supports loader matching by origin.</source>
          <target state="translated">これは、モジュールシステム(すなわち webpack)がオリジンによるローダーのマッチングをサポートするようになると、将来的に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6d2ee006876cf0259837350ed2e7e14e3c6e566" translate="yes" xml:space="preserve">
          <source>This may change in the future, when the module system (i. e. webpack) supports loader matching by origin.</source>
          <target state="translated">これは将来、モジュールシステム(すなわち webpack)がオリジンによるローダーのマッチングをサポートするようになったときに変更されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="aa062b6d5cead179ec54169c8e5af773c2ed6f12" translate="yes" xml:space="preserve">
          <source>This may degrade build performance.</source>
          <target state="translated">これにより、ビルド性能が低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c215681acf404e7577ad3619555fa95e88e52edf" translate="yes" xml:space="preserve">
          <source>This means dynamic requires are supported but will cause all matching modules to be included in the bundle.</source>
          <target state="translated">これは、動的な要求がサポートされていることを意味しますが、一致するすべてのモジュールがバンドルに含まれることになります。</target>
        </trans-unit>
        <trans-unit id="d33959ca5bc487e790d0b48b89538a6812c28404" translate="yes" xml:space="preserve">
          <source>This means dynamic requires are supported but will cause all possible modules to be included in the bundle.</source>
          <target state="translated">これは、動的な要求がサポートされていることを意味しますが、すべての可能なモジュールがバンドルに含まれることになります。</target>
        </trans-unit>
        <trans-unit id="d283638a7cf787c4d96d0cb34244baab95292b27" translate="yes" xml:space="preserve">
          <source>This means that when we &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; this will really resolve to the file in the &lt;code&gt;browser&lt;/code&gt; property. The &lt;code&gt;browser&lt;/code&gt; property takes precedence here because it's the first item in &lt;code&gt;mainFields&lt;/code&gt;. Meanwhile, a Node.js application bundled by webpack will resolve by default to the file in the &lt;code&gt;module&lt;/code&gt; field.</source>
          <target state="translated">これは、 &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; すると、 &lt;code&gt;browser&lt;/code&gt; プロパティのファイルに実際に解決されることを意味します。 &lt;code&gt;browser&lt;/code&gt; それはの最初の項目だからプロパティは、ここで優先されます &lt;code&gt;mainFields&lt;/code&gt; 。一方、webpackにバンドルされているNode.jsアプリケーションは、デフォルトで &lt;code&gt;module&lt;/code&gt; フィールドのファイルに解決されます。</target>
        </trans-unit>
        <trans-unit id="a5409a29ade1ec4c17b7eaa00e7d86e1af4d2f79" translate="yes" xml:space="preserve">
          <source>This means that your library expects a dependency named &lt;code&gt;lodash&lt;/code&gt; to be available in the consumer's environment.</source>
          <target state="translated">これは、ライブラリが、コンシューマーの環境で &lt;code&gt;lodash&lt;/code&gt; という名前の依存関係が利用可能であることを期待していることを意味します。</target>
        </trans-unit>
        <trans-unit id="b223fb461d993b0f22bdb24ced3b1fa69b9e092f" translate="yes" xml:space="preserve">
          <source>This method works but can have limitations or drawbacks.</source>
          <target state="translated">この方法は機能しますが、制限や欠点がある場合があります。</target>
        </trans-unit>
        <trans-unit id="f777fcccade65135ca746231b68bbfa503391afc" translate="yes" xml:space="preserve">
          <source>This might result in a large chunk containing all external packages. It is recommended to only include your core frameworks and utilities and dynamically load the rest of the dependencies.</source>
          <target state="translated">その結果、すべての外部パッケージを含む大きな塊になってしまうかもしれません。コアフレームワークとユーティリティだけをインクルードし、残りの依存関係を動的にロードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d526e1e403decb2661013c42f1e3e331b6d3a771" translate="yes" xml:space="preserve">
          <source>This module adds stuff from Node.js that is not available in non Node.js environments.</source>
          <target state="translated">このモジュールは、Node.js以外の環境では利用できないものをNode.jsから追加します。</target>
        </trans-unit>
        <trans-unit id="6ab0268836547089f2dcf783f9be200724a579dd" translate="yes" xml:space="preserve">
          <source>This module can support non-standard JavaScript file formats when a compatible compiler is registered via the &lt;code&gt;require&lt;/code&gt; option. If the option is defined, &lt;code&gt;config-loader&lt;/code&gt; will attempt to require the specified module(s) before the target config is found and loaded.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;require&lt;/code&gt; オプションを介して互換性のあるコンパイラが登録されている場合、非標準のJavaScriptファイル形式をサポートできます。オプションが定義されている場合、 &lt;code&gt;config-loader&lt;/code&gt; は、ターゲット構成が見つかりロードされる前に、指定されたモジュールを要求しようとします。</target>
        </trans-unit>
        <trans-unit id="f45c003c14dd79dda08fe5ed461cf012badc0fdf" translate="yes" xml:space="preserve">
          <source>This module is exposed as &lt;code&gt;webpack.Compiler&lt;/code&gt; and can be used directly. See &lt;a href=&quot;https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example&quot;&gt;this example&lt;/a&gt; for more information.</source>
          <target state="translated">このモジュールは &lt;code&gt;webpack.Compiler&lt;/code&gt; として公開されており、直接使用できます。詳細については、&lt;a href=&quot;https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example&quot;&gt;この例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6cba27f11c42ca7da5420b0f4d9f2641d3844e73" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and Webpack v4.0.0.</source>
          <target state="translated">このモジュールは、Node v6.9.0とWebpack v4.0.0以上が必要です。</target>
        </trans-unit>
        <trans-unit id="b3a35d9e538001d0d628d180d914a08e8f5c0837" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and webpack v4.0.0.</source>
          <target state="translated">このモジュールはNode v6.9.0とwebpack v4.0.0以上が必要です。</target>
        </trans-unit>
        <trans-unit id="f881a340456fac03baeb3dd035c116286f43e93a" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and works with Webpack v3 and Webpack v4.</source>
          <target state="translated">このモジュールはNode v6.9.0以上が必要で、Webpack v3とWebpack v4で動作します。</target>
        </trans-unit>
        <trans-unit id="c109cc9d524df5e8821464e562a600dcd9557732" translate="yes" xml:space="preserve">
          <source>This module supports extending webpack configuration files with &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring#extending-configuration-files&quot;&gt;ESLint-style&lt;/a&gt;&lt;code&gt;extends&lt;/code&gt; functionality. This feature allows users to create a &quot;base&quot; config and in essence, &quot;inherit&quot; from that base config in a separate config. A bare-bones example:</source>
          <target state="translated">WebPACKの設定ファイルを拡張し、このモジュールをサポート&lt;a href=&quot;https://eslint.org/docs/user-guide/configuring#extending-configuration-files&quot;&gt;ESLintスタイルは、&lt;/a&gt; &lt;code&gt;extends&lt;/code&gt; 機能を。この機能を使用すると、ユーザーは「基本」構成を作成でき、基本的には、別の構成でその基本構成から「継承」できます。基本的な例：</target>
        </trans-unit>
        <trans-unit id="0dba5974c2e26fd236ce4621f1e4d99eac196b30" translate="yes" xml:space="preserve">
          <source>This module utilizes &lt;a href=&quot;https://github.com/davidtheclark/cosmiconfig&quot;&gt;&lt;code&gt;cosmiconfig&lt;/code&gt;&lt;/a&gt; which supports declaring a webpack configuration in a number of different file formats including; &lt;code&gt;.webpackrc&lt;/code&gt;, &lt;code&gt;webpack.config.js&lt;/code&gt;, and a &lt;code&gt;webpack&lt;/code&gt; property in a &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、次のようなさまざまなファイル形式でのWebpack構成の宣言をサポートする&lt;a href=&quot;https://github.com/davidtheclark/cosmiconfig&quot;&gt; &lt;code&gt;cosmiconfig&lt;/code&gt; &lt;/a&gt;を利用します。 &lt;code&gt;.webpackrc&lt;/code&gt; 、 &lt;code&gt;webpack.config.js&lt;/code&gt; 、および &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;webpack&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="005b9fb11eab47f37d7ae0f0642a6320e8d309df" translate="yes" xml:space="preserve">
          <source>This needs to be changed if multiple webpack runtimes (from different compilation) are used on the same webpage.</source>
          <target state="translated">これは、同じウェブページ上で複数のwebpackランタイム(異なるコンパイルからの)が使用されている場合に変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="c74a7f7edee3d3ffa14340a6baee7f2198b5a2fb" translate="yes" xml:space="preserve">
          <source>This object has the same format as a regular webpack &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;configuration&lt;/a&gt;. Declare the properties that you want to scaffold here, e.g. &lt;code&gt;entry&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;. You can initialize this inside a yeoman method:</source>
          <target state="translated">このオブジェクトの形式は、通常のWebpack&lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;構成&lt;/a&gt;と同じです。ここで、スキャフォールディングするプロパティ（ &lt;code&gt;entry&lt;/code&gt; 、 &lt;code&gt;output&lt;/code&gt; 、 &lt;code&gt;context&lt;/code&gt; など）を宣言します。これは、yeomanメソッド内で初期化できます。</target>
        </trans-unit>
        <trans-unit id="fade0e5971b52e5136488a11c9a7a0a582ad3d8b" translate="yes" xml:space="preserve">
          <source>This object is passed straight to Node.js HTTPS module, so see the &lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPS documentation&lt;/a&gt; for more information.</source>
          <target state="translated">このオブジェクトはNode.js HTTPSモジュールに直接渡されるため、詳細については&lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPSのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="685cd065e94f550102a632c29e095a4cbc23cdf9" translate="yes" xml:space="preserve">
          <source>This only works when using &lt;a href=&quot;#devservercontentbase&quot;&gt;&lt;code&gt;devServer.contentBase&lt;/code&gt;&lt;/a&gt; as a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;#devservercontentbase&quot;&gt; &lt;code&gt;devServer.contentBase&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;string&lt;/code&gt; として使用する場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="a4aaf96997e7b0c90746fd6c3567a4f7aa2c8ac4" translate="yes" xml:space="preserve">
          <source>This only works when using &lt;code&gt;contentBase&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;contentBase&lt;/code&gt; を &lt;code&gt;string&lt;/code&gt; として使用する場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="ec5d2041cc832230955cf30ad539432dc4dd1fba" translate="yes" xml:space="preserve">
          <source>This option allows loading asynchronous chunks with a custom link type, such as &amp;lt;link type=&quot;text/css&quot; ...&amp;gt;.</source>
          <target state="translated">このオプションを使用すると、&amp;lt;link type = &quot;text / css&quot; ...&amp;gt;などのカスタムリンクタイプで非同期チャンクを読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="196e634a22e9d51b4ed72f6eb5f594f4af592b70" translate="yes" xml:space="preserve">
          <source>This option allows loading asynchronous chunks with a custom script type, such as &lt;code&gt;&amp;lt;script type=&quot;module&quot; ...&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;&amp;lt;script type=&quot;module&quot; ...&amp;gt;&lt;/code&gt; などのカスタムスクリプトタイプで非同期チャンクを読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="f67294efb05edc94de65dd07b8ff77f19fd6be87" translate="yes" xml:space="preserve">
          <source>This option allows us either to choose the current &lt;code&gt;devServer&lt;/code&gt; transport mode for client/server individually or to provide custom client/server implementation. This allows to specify how browser or other client communicates with the &lt;code&gt;devServer&lt;/code&gt;.</source>
          <target state="translated">このオプションを使用すると、クライアント/サーバーの現在の &lt;code&gt;devServer&lt;/code&gt; トランスポートモードを個別に選択するか、カスタムのクライアント/サーバー実装を提供できます。これにより、ブラウザまたは他のクライアントが &lt;code&gt;devServer&lt;/code&gt; と通信する方法を指定できます。</target>
        </trans-unit>
        <trans-unit id="79925c99f93c2ec0087ae0ffced8f00ba5d1c9ed" translate="yes" xml:space="preserve">
          <source>This option allows you to set the key your module looks for to a truthy value. As it happens, the AMD support in webpack ignores the defined name anyways.</source>
          <target state="translated">このオプションは、モジュールが探しているキーを真実の値に設定することを可能にします。たまたまですが、webpack の AMD サポートはとにかく定義された名前を無視します。</target>
        </trans-unit>
        <trans-unit id="a6afd747886b88535614a5e26c65d541e9551535" translate="yes" xml:space="preserve">
          <source>This option allows you to whitelist services that are allowed to access the dev server.</source>
          <target state="translated">このオプションでは、devサーバーへのアクセスを許可しているサービスをホワイトリストに入れます。</target>
        </trans-unit>
        <trans-unit id="91fe393093d77872ac5f2cd6643dfc72c4819f36" translate="yes" xml:space="preserve">
          <source>This option broadcasts the server via &lt;a href=&quot;http://www.zeroconf.org/&quot;&gt;ZeroConf&lt;/a&gt; networking on start</source>
          <target state="translated">このオプションは、開始時に&lt;a href=&quot;http://www.zeroconf.org/&quot;&gt;ZeroConf&lt;/a&gt;ネットワークを介してサーバーをブロードキャストします</target>
        </trans-unit>
        <trans-unit id="81ebe300973eaab68c9516ed46654327e6a950da" translate="yes" xml:space="preserve">
          <source>This option broadcasts the server via ZeroConf networking on start</source>
          <target state="translated">このオプションは、起動時にZeroConfネットワーク経由でサーバをブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="4922f9a5470048d8fffcf5c1830182dbd96b1c5a" translate="yes" xml:space="preserve">
          <source>This option can also be set globally in &lt;code&gt;splitChunks.filename&lt;/code&gt;, but this isn't recommended and will likely lead to an error if &lt;a href=&quot;#splitchunkschunks&quot;&gt;&lt;code&gt;splitChunks.chunks&lt;/code&gt;&lt;/a&gt; is not set to &lt;code&gt;'initial'&lt;/code&gt;. Avoid setting it globally.</source>
          <target state="translated">このオプションは &lt;code&gt;splitChunks.filename&lt;/code&gt; でグローバルに設定することもできますが、これは推奨されておらず、&lt;a href=&quot;#splitchunkschunks&quot;&gt; &lt;code&gt;splitChunks.chunks&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;'initial'&lt;/code&gt; 設定されていない場合はエラーが発生する可能性があります。グローバルに設定することは避けてください。</target>
        </trans-unit>
        <trans-unit id="ea6a426438d914faf36d6b6546285906e19b322a" translate="yes" xml:space="preserve">
          <source>This option can be used to apply loaders to the dependencies of a specific module or set of modules.</source>
          <target state="translated">このオプションを使用すると、特定のモジュールまたはモジュールのセットの依存関係にローダを適用することができます。</target>
        </trans-unit>
        <trans-unit id="6c5b0689cf315f1fa55cc15e5495f2b28e91801e" translate="yes" xml:space="preserve">
          <source>This option closes the server when stdin ends.</source>
          <target state="translated">このオプションは、標準入力が終了したときにサーバを閉じます。</target>
        </trans-unit>
        <trans-unit id="e40c156196854884ee36846872a829a5ea05f019" translate="yes" xml:space="preserve">
          <source>This option controls if and how source maps are generated.</source>
          <target state="translated">このオプションは、ソース マップを生成するかどうかとその方法を制御します。</target>
        </trans-unit>
        <trans-unit id="25a84ffd7582fe4058e843c749db628513a0ab92" translate="yes" xml:space="preserve">
          <source>This option determines the modules namespace used with the &lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;. When not specified, it will default to the value of: &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. It's used to prevent source file path collisions in source maps when loading multiple libraries built with webpack.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; で&lt;/a&gt;使用されるモジュールの名前空間を決定します。指定しない場合、デフォルトで&lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; の&lt;/a&gt;値になります。これは、webpackでビルドされた複数のライブラリをロードするときに、ソースマップでのソースファイルパスの衝突を防ぐために使用されます。</target>
        </trans-unit>
        <trans-unit id="b798351fdd70c6c1546c48e9fb9352acce8a0d9a" translate="yes" xml:space="preserve">
          <source>This option determines the modules namespace used with the &lt;a href=&quot;#outputdevtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;. When not specified, it will default to the value of: &lt;a href=&quot;#outputlibrary&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. It's used to prevent source file path collisions in sourcemaps when loading multiple libraries built with webpack.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;#outputdevtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; で&lt;/a&gt;使用されるモジュールの名前空間を決定します。指定しない場合、デフォルトの値は&lt;a href=&quot;#outputlibrary&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt;です。これは、webpackで構築された複数のライブラリをロードするときに、ソースマップでのソースファイルパスの衝突を防ぐために使用されます。</target>
        </trans-unit>
        <trans-unit id="e871c5ed20a0fe73dfb6f10eee67818e5bb0feee" translate="yes" xml:space="preserve">
          <source>This option determines the name of each output CSS file</source>
          <target state="translated">このオプションは、各出力CSSファイルの名前を決定します。</target>
        </trans-unit>
        <trans-unit id="9253fc678dd3f1afddea078670e8fc30e7bbc955" translate="yes" xml:space="preserve">
          <source>This option determines the name of each output CSS file.</source>
          <target state="translated">このオプションは、各出力CSSファイルの名前を決定します。</target>
        </trans-unit>
        <trans-unit id="0b05266442b54b0e6cddc19a8b33de324b93c206" translate="yes" xml:space="preserve">
          <source>This option determines the name of each output bundle. The bundle is written to the directory specified by the &lt;a href=&quot;#output-path&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">このオプションは、各出力バンドルの名前を決定します。バンドルは、&lt;a href=&quot;#output-path&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt;オプションで指定されたディレクトリに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="60241ba64e943004863c8b69a47d6d28d8ba2161" translate="yes" xml:space="preserve">
          <source>This option determines the name of each output bundle. The bundle is written to the directory specified by the &lt;a href=&quot;#outputpath&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">This option determines the name of each output bundle. The bundle is written to the directory specified by the &lt;a href=&quot;#outputpath&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt; option.</target>
        </trans-unit>
        <trans-unit id="39ed67201ea950fac924dc321c8d6d5c052e39fd" translate="yes" xml:space="preserve">
          <source>This option determines the name of non-entry chunk files</source>
          <target state="translated">このオプションは、エントリではないチャンクファイルの名前を決定します。</target>
        </trans-unit>
        <trans-unit id="7abc716259255844aa6458bc599fc9537f73a262" translate="yes" xml:space="preserve">
          <source>This option determines the name of non-entry chunk files.</source>
          <target state="translated">このオプションは、エントリ以外のチャンクファイルの名前を決定します。</target>
        </trans-unit>
        <trans-unit id="134a18d88afd40fa1eb2c26f1e4104950925ab2d" translate="yes" xml:space="preserve">
          <source>This option determines the name of non-entry chunk files. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">このオプションは、非エントリーチャンクファイルの名前を決定します。参照してください&lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt;可能な値の詳細については、オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="82c7b9bcf9864d6fe60a43dee4779cc300d255d6" translate="yes" xml:space="preserve">
          <source>This option determines the name of non-initial chunk files. See &lt;a href=&quot;#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">This option determines the name of non-initial chunk files. See &lt;a href=&quot;#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; option for details on the possible values.</target>
        </trans-unit>
        <trans-unit id="d4e4e471712f459632f09e0c39bf27d36a6dbdb0" translate="yes" xml:space="preserve">
          <source>This option does not have any effect when using the Node.js API.</source>
          <target state="translated">このオプションは、Node.js APIを使用している場合には効果がありません。</target>
        </trans-unit>
        <trans-unit id="824c7689eabb060c5f385b5bcd7c002c693b5204" translate="yes" xml:space="preserve">
          <source>This option does not have any effect when using the Node.js API. You need to pass the stats options to the &lt;code&gt;stats.toString()&lt;/code&gt; resp. &lt;code&gt;stats.toJson()&lt;/code&gt; calls instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5458bee731a283c4d30a78fb34bb6abbb6b5e834" translate="yes" xml:space="preserve">
          <source>This option has no effect when used with &lt;code&gt;quiet&lt;/code&gt; or &lt;code&gt;noInfo&lt;/code&gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;quiet&lt;/code&gt; または &lt;code&gt;noInfo&lt;/code&gt; と一緒に使用しても効果がありません。</target>
        </trans-unit>
        <trans-unit id="7889b2624541bc39b33a2e993ca202b95b6a36e3" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;a href=&quot;#devserverbefore&quot;&gt;&lt;code&gt;devServer.before&lt;/code&gt;&lt;/a&gt; and will be removed in v3.0.0.</source>
          <target state="translated">This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;a href=&quot;#devserverbefore&quot;&gt; &lt;code&gt;devServer.before&lt;/code&gt; &lt;/a&gt; and will be removed in v3.0.0.</target>
        </trans-unit>
        <trans-unit id="5bfcabd6c992e600f41a1aa251ee7329a7ba5fb6" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;Rule.use&lt;/code&gt;.</source>
          <target state="translated">このオプションは &lt;code&gt;Rule.use&lt;/code&gt; を支持して&lt;strong&gt;廃止さ&lt;/strong&gt;れました。</target>
        </trans-unit>
        <trans-unit id="0b2615cafe4c11a02e3c6b641329caeb2b73812b" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;before&lt;/code&gt; and will be removed in v3.0.0.</source>
          <target state="translated">このオプションは &lt;code&gt;before&lt;/code&gt; &lt;strong&gt;代わり非推奨&lt;/strong&gt;であり、v3.0.0で削除されます。</target>
        </trans-unit>
        <trans-unit id="eeeee94e8478cf5a5c7d08179d6f3b8a21bf53e1" translate="yes" xml:space="preserve">
          <source>This option is only activated (via &lt;code&gt;NodeSourcePlugin&lt;/code&gt;) when the target is unspecified, &quot;web&quot; or &quot;webworker&quot;.</source>
          <target state="translated">このオプションは、ターゲットが「web」または「webworker」に指定されていない場合にのみ（ &lt;code&gt;NodeSourcePlugin&lt;/code&gt; を介して）アクティブになります。</target>
        </trans-unit>
        <trans-unit id="a526b9466ed989feda820cb55f9f69f26039a4f1" translate="yes" xml:space="preserve">
          <source>This option is only used when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; uses a SourceMap option which writes an output file.</source>
          <target state="translated">場合のみ、このオプションを使用し&lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; は&lt;/a&gt;、出力ファイルを書き込みSourceMapオプションを使用しています。</target>
        </trans-unit>
        <trans-unit id="9d105f5fd42ba76d220e6270bcb29980c2aad7c5" translate="yes" xml:space="preserve">
          <source>This option is only used when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; uses an options which requires module names.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt;がモジュール名を必要とするオプションを使用する場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="de31799adc89f7a4cd6058f2c07e2539b194dca6" translate="yes" xml:space="preserve">
          <source>This option is useful when you want to have fine-grained control over how the CommonsChunk algorithm determines where modules should be moved to.</source>
          <target state="translated">このオプションは、CommonsChunkアルゴリズムがモジュールの移動先を決定する方法を細かく制御したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fc94bd5f6db752fb7c18f0955317532502daaadf" translate="yes" xml:space="preserve">
          <source>This option lets the browser open with your local IP.</source>
          <target state="translated">このオプションを使用すると、ブラウザをローカルIPで開くことができます。</target>
        </trans-unit>
        <trans-unit id="28aab3ea772c4e463a58a18eed36c7b2231756dc" translate="yes" xml:space="preserve">
          <source>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</source>
          <target state="translated">このオプションは、表示されるバンドル情報を正確に制御することができます。これは、バンドル情報の一部を表示したいが、すべてを表示したいわけではない場合の中間的な役割を果たすことができます。</target>
        </trans-unit>
        <trans-unit id="7109dd2cd4f2ad4d9088875a13900004670acc13" translate="yes" xml:space="preserve">
          <source>This option lets you reduce the compilations in &lt;a href=&quot;#devserverlazy-&quot;&gt;lazy mode&lt;/a&gt;. By default in &lt;a href=&quot;#devserverlazy-&quot;&gt;lazy mode&lt;/a&gt;, every request results in a new compilation. With &lt;code&gt;filename&lt;/code&gt;, it's possible to only compile when a certain file is requested.</source>
          <target state="translated">This option lets you reduce the compilations in &lt;a href=&quot;#devserverlazy-&quot;&gt;lazy mode&lt;/a&gt;. By default in &lt;a href=&quot;#devserverlazy-&quot;&gt;lazy mode&lt;/a&gt;, every request results in a new compilation. With &lt;code&gt;filename&lt;/code&gt; , it's possible to only compile when a certain file is requested.</target>
        </trans-unit>
        <trans-unit id="7179b6103bce281929f60e10386c1b58232fbfd9" translate="yes" xml:space="preserve">
          <source>This option lets you reduce the compilations in &lt;strong&gt;lazy mode&lt;/strong&gt;. By default in &lt;strong&gt;lazy mode&lt;/strong&gt;, every request results in a new compilation. With &lt;code&gt;filename&lt;/code&gt;, it's possible to only compile when a certain file is requested.</source>
          <target state="translated">このオプションを使用すると、&lt;strong&gt;レイジーモードで&lt;/strong&gt;のコンパイルを減らすことができます。&lt;strong&gt;レイジーモードの&lt;/strong&gt;デフォルトでは、すべてのリクエストが新しいコンパイルになります。で &lt;code&gt;filename&lt;/code&gt; 、それが特定のファイルが要求されたときにのみコンパイルすることが可能です。</target>
        </trans-unit>
        <trans-unit id="792f455240a68f9b61e21b9e79e2fc861945d378" translate="yes" xml:space="preserve">
          <source>This option specifies the &lt;strong&gt;public URL&lt;/strong&gt; of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.</source>
          <target state="translated">このオプションは、ブラウザーで参照されるときの出力ディレクトリーの&lt;strong&gt;パブリックURL&lt;/strong&gt;を指定し&lt;strong&gt;ます&lt;/strong&gt;。相対URLは、HTMLページ（または &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; タグ）を基準に解決されます。サーバー相対URL、プロトコル相対URL、または絶対URLも可能で、CDNでアセットをホストする場合などに必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="60acf0ba0bbca59f35e19be67e124a4e268482f8" translate="yes" xml:space="preserve">
          <source>This option will enable &lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface#fix&quot;&gt;ESLint autofix feature&lt;/a&gt;.</source>
          <target state="translated">このオプションは、&lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface#fix&quot;&gt;ESLint自動修正機能&lt;/a&gt;を有効にします。</target>
        </trans-unit>
        <trans-unit id="e44d33ad69dc261c348171441ef0d4d67723a9af" translate="yes" xml:space="preserve">
          <source>This option will enable caching of the linting results into a file. This is particularly useful in reducing linting time when doing a full build.</source>
          <target state="translated">このオプションは、リンティング結果をファイルにキャッシュすることを有効にします。これは、フルビルドを行う際にリンティング時間を短縮するのに特に便利です。</target>
        </trans-unit>
        <trans-unit id="b43f40ea06f007473435e0404327c4b4d96e7f5c" translate="yes" xml:space="preserve">
          <source>This package allows transpiling JavaScript files using &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; and &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack&lt;/a&gt;.</source>
          <target state="translated">このパッケージでは、&lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt;と&lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack&lt;/a&gt;を使用してJavaScriptファイルをトランスパイルできます。</target>
        </trans-unit>
        <trans-unit id="033391a02a8eaac3735870ff0be89d4ab0d9252c" translate="yes" xml:space="preserve">
          <source>This packages your output with an immediately-executed AMD &lt;code&gt;require(dependencies, factory)&lt;/code&gt; wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e114be6f0d2032ec10de78d94815095479360859" translate="yes" xml:space="preserve">
          <source>This page describes the options that affect the behavior of webpack-dev-server (short: dev-server).</source>
          <target state="translated">このページでは、webpack-dev-server (short:dev-server)の動作に影響を与えるオプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="a824680e81d3e233a63095d5ac7ebc89dee47393" translate="yes" xml:space="preserve">
          <source>This plugin adds specific references to containers as externals and allows to import remote modules from these containers. It also calls the &lt;code&gt;override&lt;/code&gt; API of these containers to provide overrides to them. Local overrides (via &lt;code&gt;__webpack_override__&lt;/code&gt; or &lt;code&gt;override&lt;/code&gt; API when build is also a container) and specified overrides are provided to all referenced containers.</source>
          <target state="translated">This plugin adds specific references to containers as externals and allows to import remote modules from these containers. It also calls the &lt;code&gt;override&lt;/code&gt; API of these containers to provide overrides to them. Local overrides (via &lt;code&gt;__webpack_override__&lt;/code&gt; or &lt;code&gt;override&lt;/code&gt; API when build is also a container) and specified overrides are provided to all referenced containers.</target>
        </trans-unit>
        <trans-unit id="f8fbd038fa70bb58f9637ee789bafc084098c6e1" translate="yes" xml:space="preserve">
          <source>This plugin and it's options can also be invoked via the &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt;:</source>
          <target state="translated">This plugin and it's options can also be invoked via the &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="eee9d72cff11504900ba3d87265458efdd7aab58" translate="yes" xml:space="preserve">
          <source>This plugin and it's options can also be invoked via the CLI:</source>
          <target state="translated">このプラグインとそのオプションは、CLIを介して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="8d6ec8e843f819d7e74de36d5d13f0736352ecb7" translate="yes" xml:space="preserve">
          <source>This plugin can be used in two different modes, &lt;em&gt;scoped&lt;/em&gt; and &lt;em&gt;mapped&lt;/em&gt;.</source>
          <target state="translated">このプラグインは、&lt;em&gt;スコープ&lt;/em&gt;と&lt;em&gt;マップの&lt;/em&gt; 2つの異なるモードで使用できます。</target>
        </trans-unit>
        <trans-unit id="8a797b2fc195f28c7da8671fb5c79b902eebe34d" translate="yes" xml:space="preserve">
          <source>This plugin combines &lt;code&gt;ContainerPlugin&lt;/code&gt; and &lt;code&gt;ContainerReferencePlugin&lt;/code&gt;. Overrides and overridables are combined into a single list of specified shared modules.</source>
          <target state="translated">This plugin combines &lt;code&gt;ContainerPlugin&lt;/code&gt; and &lt;code&gt;ContainerReferencePlugin&lt;/code&gt; . Overrides and overridables are combined into a single list of specified shared modules.</target>
        </trans-unit>
        <trans-unit id="7140c8d286fb2760850dbfe926da824f55b8f42d" translate="yes" xml:space="preserve">
          <source>This plugin creates an additional container entry with the specified exposed modules. It also uses the &lt;code&gt;OverridablesPlugin&lt;/code&gt; internally and exposes the &lt;code&gt;override&lt;/code&gt; API to consumer of the container.</source>
          <target state="translated">This plugin creates an additional container entry with the specified exposed modules. It also uses the &lt;code&gt;OverridablesPlugin&lt;/code&gt; internally and exposes the &lt;code&gt;override&lt;/code&gt; API to consumer of the container.</target>
        </trans-unit>
        <trans-unit id="fda8ea39c72e0e691ebbc3795728b5fc978d18df" translate="yes" xml:space="preserve">
          <source>This plugin creates bundles with translations baked in. So you can serve the translated bundle to your clients.</source>
          <target state="translated">このプラグインは、翻訳が組み込まれたバンドルを作成します.だから、あなたのクライアントに翻訳されたバンドルを提供することができます。</target>
        </trans-unit>
        <trans-unit id="46f3843161330f7496c2a700471ef010db97a960" translate="yes" xml:space="preserve">
          <source>This plugin enables more fine grained control of source map generation. It is also enabled automatically by certain settings of the &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">このプラグインを使用すると、ソースマップの生成をより細かく制御できます。また、&lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt;構成オプションの特定の設定によって自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="308436c86675d805a1b54d3185c57d08f2121250" translate="yes" xml:space="preserve">
          <source>This plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.</source>
          <target state="translated">CSSを個別のファイルに抽出するプラグインです。CSSを含むJSファイルごとにCSSファイルを作成します。CSSとSourceMapsのオンデマンドロードに対応しています。</target>
        </trans-unit>
        <trans-unit id="52604672e0fee1f1648352992bdf12b764549a3c" translate="yes" xml:space="preserve">
          <source>This plugin is used in a separate webpack config exclusively to create a dll-only-bundle. It creates a &lt;code&gt;manifest.json&lt;/code&gt; file, which is used by the &lt;a href=&quot;dll-plugin#dllreferenceplugin&quot;&gt;&lt;code&gt;DllReferencePlugin&lt;/code&gt;&lt;/a&gt; to map dependencies.</source>
          <target state="translated">このプラグインは、別のwebpack構成で排他的に使用され、dllのみのバンドルを作成します。&lt;a href=&quot;dll-plugin#dllreferenceplugin&quot;&gt; &lt;code&gt;DllReferencePlugin&lt;/code&gt; &lt;/a&gt;が依存関係をマップするために使用する &lt;code&gt;manifest.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="81adc70be0ff9e1f95105beec6a31427593ebda0" translate="yes" xml:space="preserve">
          <source>This plugin is used in a separate webpack configuration exclusively to create a dll-only-bundle. It creates a &lt;code&gt;manifest.json&lt;/code&gt; file, which is used by the &lt;a href=&quot;#dllreferenceplugin&quot;&gt;&lt;code&gt;DllReferencePlugin&lt;/code&gt;&lt;/a&gt; to map dependencies.</source>
          <target state="translated">This plugin is used in a separate webpack configuration exclusively to create a dll-only-bundle. It creates a &lt;code&gt;manifest.json&lt;/code&gt; file, which is used by the &lt;a href=&quot;#dllreferenceplugin&quot;&gt; &lt;code&gt;DllReferencePlugin&lt;/code&gt; &lt;/a&gt; to map dependencies.</target>
        </trans-unit>
        <trans-unit id="95ab448688001829beed83209692c645fd511719" translate="yes" xml:space="preserve">
          <source>This plugin is used in the primary webpack config, it references the dll-only-bundle(s) to require pre-built dependencies.</source>
          <target state="translated">このプラグインはプライマリの webpack 設定で使用され、構築済みの依存関係を要求するために dll-only-bundle を参照します。</target>
        </trans-unit>
        <trans-unit id="2a588056406d111134a66418e199500eed93ea9b" translate="yes" xml:space="preserve">
          <source>This plugin makes specific modules &quot;overridable&quot;. A local API (&lt;code&gt;__webpack_override__&lt;/code&gt;) allows to provide overrides.</source>
          <target state="translated">This plugin makes specific modules &quot;overridable&quot;. A local API ( &lt;code&gt;__webpack_override__&lt;/code&gt; ) allows to provide overrides.</target>
        </trans-unit>
        <trans-unit id="8f11ee21edd3718f762dd02cff0cac34b96334ca" translate="yes" xml:space="preserve">
          <source>This plugin should be used only on &lt;code&gt;production&lt;/code&gt; builds without &lt;code&gt;style-loader&lt;/code&gt; in the loaders chain, especially if you want to have HMR in &lt;code&gt;development&lt;/code&gt;.</source>
          <target state="translated">このプラグインは、特にHMRを &lt;code&gt;development&lt;/code&gt; たい場合は、ローダーチェーンに &lt;code&gt;style-loader&lt;/code&gt; がない &lt;code&gt;production&lt;/code&gt; ビルドでのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="678af3938c3be10d5d0d4625ea9d01b638693180" translate="yes" xml:space="preserve">
          <source>This plugin should not be used with &lt;code&gt;style-loader&lt;/code&gt; in the loaders chain.</source>
          <target state="translated">This plugin should not be used with &lt;code&gt;style-loader&lt;/code&gt; in the loaders chain.</target>
        </trans-unit>
        <trans-unit id="f5cca03718053fc9520367846f9709b01dcb7529" translate="yes" xml:space="preserve">
          <source>This plugin supports the following options:</source>
          <target state="translated">このプラグインは以下のオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="feee9da7ca86409cd9c2790742caad4fc594057c" translate="yes" xml:space="preserve">
          <source>This plugin supports the use of Google's Closure Tools with webpack.</source>
          <target state="translated">このプラグインは、webpackでのGoogleのClosure Toolsの利用をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9d78bb9481a5f3f627cce3d98de1d0a37c73f18f" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://cssnano.co/&quot;&gt;cssnano&lt;/a&gt; to optimize and minify your CSS.</source>
          <target state="translated">This plugin uses &lt;a href=&quot;https://cssnano.co/&quot;&gt;cssnano&lt;/a&gt; to optimize and minify your CSS.</target>
        </trans-unit>
        <trans-unit id="03210a1e739a155ac82e779ddeef11361c965db2" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify()&lt;/a&gt; to minify your JSON.</source>
          <target state="translated">This plugin uses &lt;a href=&quot;https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify()&lt;/a&gt; to minify your JSON.</target>
        </trans-unit>
        <trans-unit id="b06506995ff20545e054b285bfd17c9d57869022" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;terser&lt;/a&gt; to minify your JavaScript.</source>
          <target state="translated">このプラグインは、&lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;terser&lt;/a&gt;を使用してJavaScriptを縮小します。</target>
        </trans-unit>
        <trans-unit id="c537f96d0b90551bdb8c425afb315d141ed85e22" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;imagemin&lt;/a&gt; to optimize your images.</source>
          <target state="translated">This plugin uses &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;imagemin&lt;/a&gt; to optimize your images.</target>
        </trans-unit>
        <trans-unit id="2ccca80fad8f11ea1ca02f91ea558e659f64b4f4" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;UglifyJS v3 &lt;/a&gt;&lt;a href=&quot;https://npmjs.com/package/uglify-es&quot;&gt;(&lt;code&gt;uglify-es&lt;/code&gt;)&lt;/a&gt; to minify your JavaScript</source>
          <target state="translated">このプラグインは、JavaScriptを縮小するためにUglifyJS &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;v3 &lt;/a&gt;&lt;a href=&quot;https://npmjs.com/package/uglify-es&quot;&gt;（ &lt;code&gt;uglify-es&lt;/code&gt; ）&lt;/a&gt;を使用します</target>
        </trans-unit>
        <trans-unit id="7a92893dc06658363c932ed4b067127319ce2731" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/terser-js/terser&quot;&gt;terser&lt;/a&gt; to minify your JavaScript.</source>
          <target state="translated">This plugin uses &lt;a href=&quot;https://github.com/terser-js/terser&quot;&gt;terser&lt;/a&gt; to minify your JavaScript.</target>
        </trans-unit>
        <trans-unit id="7d1f3177c67193f6bb115a3f0c3321ffe0b2f66b" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/terser/html-minifier-terser&quot;&gt;html-minifier-terser&lt;/a&gt; to optimize and minify your HTML.</source>
          <target state="translated">This plugin uses &lt;a href=&quot;https://github.com/terser/html-minifier-terser&quot;&gt;html-minifier-terser&lt;/a&gt; to optimize and minify your HTML.</target>
        </trans-unit>
        <trans-unit id="a87a75bf8d2601bfb557a819c4f455325b79b898" translate="yes" xml:space="preserve">
          <source>This plugin will be removed in the future as it only exists for migration.</source>
          <target state="translated">このプラグインは移行のためにしか存在しないので、将来的には削除される予定です。</target>
        </trans-unit>
        <trans-unit id="417ca5f69549104dc84916c24cec679ccbbff0a8" translate="yes" xml:space="preserve">
          <source>This plugin will cause hashes to be based on the relative path of the module, generating a four character string as the module id. Suggested for use in production.</source>
          <target state="translated">このプラグインは、モジュールの相対パスに基づいてハッシュを生成し、モジュール ID として 4 文字の文字列を生成します。実運用での使用を推奨します。</target>
        </trans-unit>
        <trans-unit id="69190150b569dd2720829fe25dc4429844f6fdb0" translate="yes" xml:space="preserve">
          <source>This plugin will enable the same concatenation behavior in webpack.</source>
          <target state="translated">このプラグインを使うと、webpackでも同じような連結動作ができるようになります。</target>
        </trans-unit>
        <trans-unit id="79648c5f02c1648bcbbf1396b0968514a67250e6" translate="yes" xml:space="preserve">
          <source>This plugin will enable the same concatenation behavior in webpack. By default this plugin is already enabled in &lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;production &lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; and disabled otherwise. If you need to override the production &lt;code&gt;mode&lt;/code&gt; optimization, set the &lt;a href=&quot;../configuration/optimization#optimizationconcatenatemodules&quot;&gt;&lt;code&gt;optimization.concatenateModules&lt;/code&gt; option&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt;. To enable concatenation behavior in other modes, you can add &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt; manually or use the &lt;code&gt;optimization.concatenateModules&lt;/code&gt; option:</source>
          <target state="translated">This plugin will enable the same concatenation behavior in webpack. By default this plugin is already enabled in &lt;a href=&quot;../configuration/mode#mode-production&quot;&gt;production &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt; and disabled otherwise. If you need to override the production &lt;code&gt;mode&lt;/code&gt; optimization, set the &lt;a href=&quot;../configuration/optimization#optimizationconcatenatemodules&quot;&gt; &lt;code&gt;optimization.concatenateModules&lt;/code&gt; option&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt; . To enable concatenation behavior in other modes, you can add &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt; manually or use the &lt;code&gt;optimization.concatenateModules&lt;/code&gt; option:</target>
        </trans-unit>
        <trans-unit id="e20365f34269feb4c5eead0efe10e444b9130e1c" translate="yes" xml:space="preserve">
          <source>This project was inspired by, and is a heavily modified version of &lt;code&gt;sasslint-webpack-plugin&lt;/code&gt;.</source>
          <target state="translated">このプロジェクトは &lt;code&gt;sasslint-webpack-plugin&lt;/code&gt; に触発され、大幅に変更されたバージョンです。</target>
        </trans-unit>
        <trans-unit id="7bdb7bc7b7c2ba2cfe5e9ae00a3972492e0d233d" translate="yes" xml:space="preserve">
          <source>This project was inspired the following open source work:</source>
          <target state="translated">このプロジェクトは、以下のオープンソース作品に触発されました。</target>
        </trans-unit>
        <trans-unit id="790283d62998f77b2077ace49fbf145534de7451" translate="yes" xml:space="preserve">
          <source>This property allows webpack to control what files are used to calculate performance hints. The default function is seen below:</source>
          <target state="translated">このプロパティは、webpackがパフォーマンスヒントを計算するために使用するファイルを制御することを可能にします。デフォルトの機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4a8a42a8482756c98603a8fd3196d37d5d11f455" translate="yes" xml:space="preserve">
          <source>This property allows webpack to control what files are used to calculate performance hints. The default function is:</source>
          <target state="translated">このプロパティは、webpackがパフォーマンスヒントの計算に使用するファイルを制御することを可能にします。デフォルトの機能は</target>
        </trans-unit>
        <trans-unit id="7f1939ad5234336835a3746ffcaab10be52bf776" translate="yes" xml:space="preserve">
          <source>This section contains guides for understanding and mastering the wide variety of tools and features that webpack offers. The first is a simple guide that takes you through &lt;a href=&quot;guides/getting-started&quot;&gt;getting started&lt;/a&gt;.</source>
          <target state="translated">This section contains guides for understanding and mastering the wide variety of tools and features that webpack offers. The first is a simple guide that takes you through &lt;a href=&quot;guides/getting-started&quot;&gt;getting started&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5ce7936b8dd1ab00c6a839051bb3b049b5d0046c" translate="yes" xml:space="preserve">
          <source>This section contains guides for understanding and mastering the wide variety of tools and features that webpack offers. The first is a simple guide that takes you through &lt;a href=&quot;guides/installation&quot;&gt;installation&lt;/a&gt;.</source>
          <target state="translated">このセクションには、webpackが提供するさまざまなツールと機能を理解して習得するためのガイドが含まれています。1つ目は、&lt;a href=&quot;guides/installation&quot;&gt;インストール&lt;/a&gt;について説明する簡単なガイドです。</target>
        </trans-unit>
        <trans-unit id="766149f8898bac17386a9e716229c762e8f543e5" translate="yes" xml:space="preserve">
          <source>This section covers all &lt;strong&gt;variables&lt;/strong&gt; available in code compiled with webpack. Modules will have access to certain data from the compilation process through &lt;code&gt;module&lt;/code&gt; and other variables.</source>
          <target state="translated">このセクションでは、webpackでコンパイルされたコードで使用可能なすべての&lt;strong&gt;変数について&lt;/strong&gt;説明し&lt;strong&gt;ます&lt;/strong&gt;。モジュールは、 &lt;code&gt;module&lt;/code&gt; やその他の変数を通じて、コンパイルプロセスからの特定のデータにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2a158e22d6effe6b38eb57854423c9c249557bde" translate="yes" xml:space="preserve">
          <source>This section covers all methods available in code compiled with webpack. When using webpack to bundle your application, you can pick from a variety of module syntax styles including &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot;&gt;CommonJS&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_module_definition&quot;&gt;AMD&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、webpackでコンパイルされたコードで使用可能なすべてのメソッドについて説明します。webpackを使用してアプリケーションをバンドルする場合、&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot;&gt;CommonJS&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_module_definition&quot;&gt;AMD&lt;/a&gt;などのさまざまなモジュール構文スタイルから選択できます。</target>
        </trans-unit>
        <trans-unit id="1dc3345120a2ce199a3597985ded51c910d2491c" translate="yes" xml:space="preserve">
          <source>This section describes webpack internals and can be useful for plugin developers</source>
          <target state="translated">このセクションでは、webpack の内部について説明し、プラグイン開発者にとって有用な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="86a104a27c2cf4c551b1216d744083e3310b40f0" translate="yes" xml:space="preserve">
          <source>This section will focus on adding an offline experience to our app. We'll achieve this using a Google project called &lt;a href=&quot;https://github.com/GoogleChrome/workbox&quot;&gt;Workbox&lt;/a&gt; which provides tools that help make offline support for web apps easier to setup.</source>
          <target state="translated">このセクションでは、アプリにオフラインエクスペリエンスを追加することに焦点を当てます。これを実現するには、&lt;a href=&quot;https://github.com/GoogleChrome/workbox&quot;&gt;ワークボックス&lt;/a&gt;と呼ばれるGoogleプロジェクトを使用します。これは、ウェブアプリのオフラインサポートを簡単に設定できるツールを提供します。</target>
        </trans-unit>
        <trans-unit id="3efc36ab784fb7c924e3fdee5581efb69eaec3d5" translate="yes" xml:space="preserve">
          <source>This set of options allows you to better debug the application containing assets compiled with webpack</source>
          <target state="translated">このオプションのセットは、webpack でコンパイルされたアセットを含むアプリケーションをより良くデバッグすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="98aa68cf05a9c0e5328953ace43257566681626c" translate="yes" xml:space="preserve">
          <source>This set of options allows you to manipulate certain &lt;a href=&quot;../configuration/output&quot;&gt;output&lt;/a&gt; parameters of your build.</source>
          <target state="translated">このオプションのセットを使用すると、ビルドの特定の&lt;a href=&quot;../configuration/output&quot;&gt;出力&lt;/a&gt;パラメーターを操作できます。</target>
        </trans-unit>
        <trans-unit id="2e6daec4f6bdcb4007ef4577b7c389610dcd3bc0" translate="yes" xml:space="preserve">
          <source>This set of options is identical to the &lt;code&gt;resolve&lt;/code&gt; property set above, but is used only to resolve webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader&lt;/a&gt; packages.</source>
          <target state="translated">This set of options is identical to the &lt;code&gt;resolve&lt;/code&gt; property set above, but is used only to resolve webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader&lt;/a&gt; packages.</target>
        </trans-unit>
        <trans-unit id="1b7899ac54672adc98b8151b2866a403aa9d27ff" translate="yes" xml:space="preserve">
          <source>This set of options is identical to the &lt;code&gt;resolve&lt;/code&gt; property set above, but is used only to resolve webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader&lt;/a&gt; packages. Default:</source>
          <target state="translated">このオプションセットは、上記の &lt;code&gt;resolve&lt;/code&gt; プロパティセットと同じですが、webpackの&lt;a href=&quot;../concepts/loaders&quot;&gt;ローダー&lt;/a&gt;パッケージを解決するためにのみ使用されます。デフォルト：</target>
        </trans-unit>
        <trans-unit id="e8b7b6e71fdb01ac9c18b2d93058863c80b0f482" translate="yes" xml:space="preserve">
          <source>This set of options is picked up by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and can be used to change its behavior in various ways. Here's a simple example that gzips and serves everything from our &lt;code&gt;dist/&lt;/code&gt; directory in the project root:</source>
          <target state="translated">This set of options is picked up by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and can be used to change its behavior in various ways. Here's a simple example that gzips and serves everything from our &lt;code&gt;dist/&lt;/code&gt; directory in the project root:</target>
        </trans-unit>
        <trans-unit id="1f833ed9c75f47b94fbdc43cd56d37d70b51115f" translate="yes" xml:space="preserve">
          <source>This set of options is picked up by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and can be used to change its behavior in various ways. Here's a simple example that gzips and serves everything from our &lt;code&gt;dist/&lt;/code&gt; directory:</source>
          <target state="translated">このオプションセットは、&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;によって取得され、さまざまな方法でその動作を変更するために使用できます。以下は、gzipを実行して &lt;code&gt;dist/&lt;/code&gt; ディレクトリからすべてを提供する簡単な例です。</target>
        </trans-unit>
        <trans-unit id="a8eecff3ab5954bf0b0246b89e983ae677f253d2" translate="yes" xml:space="preserve">
          <source>This setting is primarily used as a workaround for &lt;a href=&quot;https://github.com/webpack-contrib/style-loader/issues/163&quot;&gt;css clashes&lt;/a&gt; when using one or more &lt;a href=&quot;https://robertknight.github.io/posts/webpack-dll-plugins/&quot;&gt;DllPlugin&lt;/a&gt;'s. &lt;code&gt;base&lt;/code&gt; allows you to prevent either the &lt;em&gt;app&lt;/em&gt;'s css (or &lt;em&gt;DllPlugin2&lt;/em&gt;'s css) from overwriting &lt;em&gt;DllPlugin1&lt;/em&gt;'s css by specifying a css module id base which is greater than the range used by &lt;em&gt;DllPlugin1&lt;/em&gt; e.g.:</source>
          <target state="translated">この設定は主に、1つ以上の&lt;a href=&quot;https://robertknight.github.io/posts/webpack-dll-plugins/&quot;&gt;DllPlugin&lt;/a&gt;を使用する場合の&lt;a href=&quot;https://github.com/webpack-contrib/style-loader/issues/163&quot;&gt;cssクラッシュの&lt;/a&gt;回避策として使用されます。 &lt;code&gt;base&lt;/code&gt; どちらか防止することを可能にする&lt;em&gt;アプリ&lt;/em&gt;のCSS（または&lt;em&gt;DllPlugin2&lt;/em&gt;上書きからのCSS）を&lt;em&gt;DllPlugin1&lt;/em&gt;によって使用される範囲よりも大きいCSSモジュールIDベース指定してのCSSを&lt;em&gt;DllPlugin1&lt;/em&gt;例えば：&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f8fccd0349e08bbe9dad684332c1fd923a8ec939" translate="yes" xml:space="preserve">
          <source>This setup makes your code a lot more portable as everything that is closely coupled now lives together. Let's say you want to use &lt;code&gt;/my-component&lt;/code&gt; in another project, simply copy or move it into the &lt;code&gt;/components&lt;/code&gt; directory over there. As long as you've installed any &lt;em&gt;external dependencies&lt;/em&gt; and your &lt;em&gt;configuration has the same loaders&lt;/em&gt; defined, you should be good to go.</source>
          <target state="translated">この設定により、密接に結合されたすべてが一緒に存在するようになるため、コードの移植性が大幅に向上します。 &lt;code&gt;/my-component&lt;/code&gt; を別のプロジェクトで使用したい場合、それを &lt;code&gt;/components&lt;/code&gt; ディレクトリにコピーまたは移動するだけです。&lt;em&gt;外部の依存関係&lt;/em&gt;をインストールし、&lt;em&gt;構成に同じローダーが&lt;/em&gt;定義され&lt;em&gt;ている&lt;/em&gt;限り、問題ありません。</target>
        </trans-unit>
        <trans-unit id="5ea123abc7292c6bf233ab48356c85638b29b540" translate="yes" xml:space="preserve">
          <source>This simply prepends &lt;code&gt;var $ = require(&quot;jquery&quot;);&lt;/code&gt; to &lt;code&gt;example.js&lt;/code&gt;.</source>
          <target state="translated">これは単に &lt;code&gt;var $ = require(&quot;jquery&quot;);&lt;/code&gt; だけです。 &lt;code&gt;example.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e10024d095957cbce567008893996f42ae796af8" translate="yes" xml:space="preserve">
          <source>This small library is a core utility in webpack but can also be used elsewhere to provide a similar plugin interface. Many objects in webpack extend the &lt;code&gt;Tapable&lt;/code&gt; class. The class exposes &lt;code&gt;tap&lt;/code&gt;, &lt;code&gt;tapAsync&lt;/code&gt;, and &lt;code&gt;tapPromise&lt;/code&gt; methods which plugins can use to inject custom build steps that will be fired throughout a compilation.</source>
          <target state="translated">この小さなライブラリは、webpackのコアユーティリティですが、同様のプラグインインターフェイスを提供するために他の場所でも使用できます。 webpackの多くのオブジェクトは &lt;code&gt;Tapable&lt;/code&gt; クラスを拡張します。このクラスは、プラグインがコンパイル全体で発生するカスタムビルドステップを挿入するために使用できる &lt;code&gt;tap&lt;/code&gt; 、 &lt;code&gt;tapAsync&lt;/code&gt; 、および &lt;code&gt;tapPromise&lt;/code&gt; メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="e5ea9cb5352fb456a9a9457c25f28a4bfdc7c1d4" translate="yes" xml:space="preserve">
          <source>This syntax is used to describe all the possible ways that an external library can be available. &lt;code&gt;lodash&lt;/code&gt; here is available as &lt;code&gt;lodash&lt;/code&gt; under AMD and CommonJS module systems but available as &lt;code&gt;_&lt;/code&gt; in a global variable form. &lt;code&gt;subtract&lt;/code&gt; here is available via the property &lt;code&gt;subtract&lt;/code&gt; under the global &lt;code&gt;math&lt;/code&gt; object (e.g. &lt;code&gt;window['math']['subtract']&lt;/code&gt;).</source>
          <target state="translated">この構文は、外部ライブラリを利用できるすべての可能な方法を説明するために使用されます。ここの &lt;code&gt;lodash&lt;/code&gt; は、AMDおよびCommonJSモジュールシステムでは &lt;code&gt;lodash&lt;/code&gt; として利用できますが、グローバル変数形式では &lt;code&gt;_&lt;/code&gt; として利用できます。 &lt;code&gt;subtract&lt;/code&gt; ここでは、プロパティを経由して提供されて &lt;code&gt;subtract&lt;/code&gt; グローバルの下で &lt;code&gt;math&lt;/code&gt; オブジェクト（例えば &lt;code&gt;window['math']['subtract']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="36e03fd539edd94f1786822559caa0e0ba678475" translate="yes" xml:space="preserve">
          <source>This syntax is used to describe all the possible ways that an external library can be made available. &lt;code&gt;lodash&lt;/code&gt; here is available as &lt;code&gt;lodash&lt;/code&gt; under AMD and CommonJS module systems but available as &lt;code&gt;_&lt;/code&gt; in a global variable form. &lt;code&gt;subtract&lt;/code&gt; here is available via the property &lt;code&gt;subtract&lt;/code&gt; under the global &lt;code&gt;math&lt;/code&gt; object (e.g. &lt;code&gt;window['math']['subtract']&lt;/code&gt;).</source>
          <target state="translated">This syntax is used to describe all the possible ways that an external library can be made available. &lt;code&gt;lodash&lt;/code&gt; here is available as &lt;code&gt;lodash&lt;/code&gt; under AMD and CommonJS module systems but available as &lt;code&gt;_&lt;/code&gt; in a global variable form. &lt;code&gt;subtract&lt;/code&gt; here is available via the property &lt;code&gt;subtract&lt;/code&gt; under the global &lt;code&gt;math&lt;/code&gt; object (e.g. &lt;code&gt;window['math']['subtract']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="427ef31c4a006d01b5992ffbd53818e83fa34ef1" translate="yes" xml:space="preserve">
          <source>This tells &lt;code&gt;webpack-dev-server&lt;/code&gt; to serve the files from the &lt;code&gt;dist&lt;/code&gt; directory on &lt;code&gt;localhost:8080&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;webpack-dev-server&lt;/code&gt; に &lt;code&gt;localhost:8080&lt;/code&gt; の &lt;code&gt;dist&lt;/code&gt; ディレクトリからファイルを提供するように指示します。</target>
        </trans-unit>
        <trans-unit id="25afacdd59de37cfa49edcf6f68266b1dd1e952a" translate="yes" xml:space="preserve">
          <source>This translates to something like:</source>
          <target state="translated">これは訳すとこんな感じです。</target>
        </trans-unit>
        <trans-unit id="4cc861c1f2b80d6e02a543239491223597388780" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;jade-loader&lt;/code&gt; for &lt;code&gt;.jade&lt;/code&gt; files, and the &lt;a href=&quot;../loaders/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../loaders/css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;.css&lt;/code&gt; files.</source>
          <target state="translated">これは、使用しています &lt;code&gt;jade-loader&lt;/code&gt; 用 &lt;code&gt;.jade&lt;/code&gt; ファイル、および&lt;a href=&quot;../loaders/style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../loaders/css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt;用 &lt;code&gt;.css&lt;/code&gt; ファイルを。</target>
        </trans-unit>
        <trans-unit id="f9e99c7cf1029abbb4fbb5d7e231d7ca99dccb10" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;pug-loader&lt;/code&gt; for &lt;code&gt;.jade&lt;/code&gt; files, and the &lt;a href=&quot;../loaders/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../loaders/css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;.css&lt;/code&gt; files.</source>
          <target state="translated">This uses the &lt;code&gt;pug-loader&lt;/code&gt; for &lt;code&gt;.jade&lt;/code&gt; files, and the &lt;a href=&quot;../loaders/style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../loaders/css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt; for &lt;code&gt;.css&lt;/code&gt; files.</target>
        </trans-unit>
        <trans-unit id="7c17361464bcd8285937109314dec7f4ead3d25c" translate="yes" xml:space="preserve">
          <source>This variable is equal to default value of &lt;code&gt;module.exports&lt;/code&gt; (i.e. an object). If &lt;code&gt;module.exports&lt;/code&gt; gets overwritten, &lt;code&gt;exports&lt;/code&gt; will no longer be exported.</source>
          <target state="translated">この変数は、 &lt;code&gt;module.exports&lt;/code&gt; （つまりオブジェクト）のデフォルト値と同じです。場合 &lt;code&gt;module.exports&lt;/code&gt; はが上書きされ、 &lt;code&gt;exports&lt;/code&gt; もはやエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="f73885cf12c1cd2817d5d1be8d01158624c8f077" translate="yes" xml:space="preserve">
          <source>This variable is equal to the default value of &lt;code&gt;module.exports&lt;/code&gt; (i.e. an object). If &lt;code&gt;module.exports&lt;/code&gt; gets overwritten, &lt;code&gt;exports&lt;/code&gt; will no longer be exported.</source>
          <target state="translated">This variable is equal to the default value of &lt;code&gt;module.exports&lt;/code&gt; (i.e. an object). If &lt;code&gt;module.exports&lt;/code&gt; gets overwritten, &lt;code&gt;exports&lt;/code&gt; will no longer be exported.</target>
        </trans-unit>
        <trans-unit id="d39d49f3373eb27aa1cf74db3b29f828968cc1a8" translate="yes" xml:space="preserve">
          <source>This variable is only available with the &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; or the &lt;code&gt;ExtendedAPIPlugin&lt;/code&gt;. It provides access to the hash of the compilation.</source>
          <target state="translated">この変数は &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; または &lt;code&gt;ExtendedAPIPlugin&lt;/code&gt; でのみ使用できます。コンパイルのハッシュへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="c7b6d958a04307a8e984f741ba381d787423c0c9" translate="yes" xml:space="preserve">
          <source>This walkthrough stems from &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; and &lt;a href=&quot;development&quot;&gt;Development&lt;/a&gt;. Please ensure you are familiar with the concepts/setup introduced in those guides before continuing on.</source>
          <target state="translated">このウォークスルーは、&lt;a href=&quot;tree-shaking&quot;&gt;ツリーの揺れ&lt;/a&gt;と&lt;a href=&quot;development&quot;&gt;発達に&lt;/a&gt;由来します。先に進む前に、これらのガイドで紹介されている概念/設定について十分に理解してください。</target>
        </trans-unit>
        <trans-unit id="9530095a465e229292ca12606b608bacc0045a8a" translate="yes" xml:space="preserve">
          <source>This way you could dynamically load an A/B test which provides a different version of a shared module.</source>
          <target state="translated">この方法では、共有モジュールの異なるバージョンを提供するA/Bテストを動的にロードすることができます。</target>
        </trans-unit>
        <trans-unit id="39b032e2d15b2635b3b2ab29289187ca5c1a282c" translate="yes" xml:space="preserve">
          <source>This will add a dependency to &lt;code&gt;extract-style-loader/getStyles!./file.js&lt;/code&gt; and treat the result as &lt;code&gt;file.js.css&lt;/code&gt;. Because &lt;a href=&quot;../configuration/module#modulerules&quot;&gt;&lt;code&gt;module.rules&lt;/code&gt;&lt;/a&gt; has a rule matching &lt;code&gt;/\.css$/&lt;/code&gt; and it will apply to this dependency.</source>
          <target state="translated">This will add a dependency to &lt;code&gt;extract-style-loader/getStyles!./file.js&lt;/code&gt; and treat the result as &lt;code&gt;file.js.css&lt;/code&gt; . Because &lt;a href=&quot;../configuration/module#modulerules&quot;&gt; &lt;code&gt;module.rules&lt;/code&gt; &lt;/a&gt; has a rule matching &lt;code&gt;/\.css$/&lt;/code&gt; and it will apply to this dependency.</target>
        </trans-unit>
        <trans-unit id="a6ba31004997005b6c7977fd4e63f3ec4f27b1b2" translate="yes" xml:space="preserve">
          <source>This will bundle your source code with entry as &lt;code&gt;index.js&lt;/code&gt; and the output bundle file will have a path of &lt;code&gt;dist&lt;/code&gt; and the filename will be &lt;code&gt;bundle.js&lt;/code&gt;</source>
          <target state="translated">これにより、ソースコードが &lt;code&gt;index.js&lt;/code&gt; としてエントリにバンドルされ、出力バンドルファイルには &lt;code&gt;dist&lt;/code&gt; のパスが含まれ、ファイル名は &lt;code&gt;bundle.js&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="af43d0785eaf13b9ffe0c34aa1c2ebf9013d579c" translate="yes" xml:space="preserve">
          <source>This will bundle your source code with entry as &lt;code&gt;index.js&lt;/code&gt;, and the output bundle file will have a path of &lt;code&gt;dist&lt;/code&gt;.</source>
          <target state="translated">This will bundle your source code with entry as &lt;code&gt;index.js&lt;/code&gt; , and the output bundle file will have a path of &lt;code&gt;dist&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="974910be502dc0a84469dbdf2c5a0b42eda9befe" translate="yes" xml:space="preserve">
          <source>This will direct webpack to &lt;em&gt;enter&lt;/em&gt; through &lt;code&gt;./index.ts&lt;/code&gt;, &lt;em&gt;load&lt;/em&gt; all &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files through the &lt;code&gt;ts-loader&lt;/code&gt;, and &lt;em&gt;output&lt;/em&gt; a &lt;code&gt;bundle.js&lt;/code&gt; file in our current directory.</source>
          <target state="translated">これがためにWebPACKの指示する&lt;em&gt;入力し&lt;/em&gt;て &lt;code&gt;./index.ts&lt;/code&gt; 、&lt;em&gt;ロード&lt;/em&gt;すべて &lt;code&gt;.ts&lt;/code&gt; と &lt;code&gt;.tsx&lt;/code&gt; を介してファイルを &lt;code&gt;ts-loader&lt;/code&gt; 、および&lt;em&gt;出力&lt;/em&gt; &lt;code&gt;bundle.js&lt;/code&gt; 私たちの現在のディレクトリ内のファイルを。</target>
        </trans-unit>
        <trans-unit id="edf3fb18a3410f577281b1111c384f0b6a24b89d" translate="yes" xml:space="preserve">
          <source>This will enable CSS optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">This will enable CSS optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f0b4fa31173e3380b49ecab8f7606a590fbbd56" translate="yes" xml:space="preserve">
          <source>This will enable CSS optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to true.</source>
          <target state="translated">This will enable CSS optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to true.</target>
        </trans-unit>
        <trans-unit id="a1718346a9979d283f39dc2471103c14f678ca38" translate="yes" xml:space="preserve">
          <source>This will enable HTML optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">This will enable HTML optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a33e18425357f58a8da5ab2270892ccffc68f88a" translate="yes" xml:space="preserve">
          <source>This will enable JSON optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">This will enable JSON optimization only in production mode. If you want to run it also in development set the &lt;code&gt;optimization.minimize&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b3d380dbf9a3ab55f5a63a7e68fc7a2985963c17" translate="yes" xml:space="preserve">
          <source>This will expose your library as a &lt;a href=&quot;https://github.com/systemjs/systemjs/blob/master/docs/system-register.md&quot;&gt;&lt;code&gt;System.register&lt;/code&gt;&lt;/a&gt; module. This feature was first released in &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v4.30.0&quot;&gt;webpack 4.30.0&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef23a5d560a808c67a55370c9f88ecfe3a952594" translate="yes" xml:space="preserve">
          <source>This will expose your library as an AMD module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f886a1ec8370f98de9de4e1874a73184be8854" translate="yes" xml:space="preserve">
          <source>This will force webpack to exit its bundling process.</source>
          <target state="translated">これにより、webpackは強制的にバンドル処理を終了します。</target>
        </trans-unit>
        <trans-unit id="00541a540816f3e9bbd4c867606284cd75c32912" translate="yes" xml:space="preserve">
          <source>This will form the bundle with both the files as separate entry points.</source>
          <target state="translated">これにより、両方のファイルを別々のエントリポイントとしてバンドルを形成します。</target>
        </trans-unit>
        <trans-unit id="7f4446d56893c546a3bc2bc1c768154f63d09482" translate="yes" xml:space="preserve">
          <source>This will generate a file &lt;code&gt;dist/index.html&lt;/code&gt; containing the following:</source>
          <target state="translated">これにより、以下を含む &lt;code&gt;dist/index.html&lt;/code&gt; ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="1bf9dfe78bc3e7d3031c19501d26d5fd36006676" translate="yes" xml:space="preserve">
          <source>This will generate an implied global which has the potential to reassign an existing value (use with caution):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce9d6bfe9df3261a2599afcc3f70fc1122e72f4" translate="yes" xml:space="preserve">
          <source>This will output the following result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7160226d2ca3d86e071b9fa526002cfef710b369" translate="yes" xml:space="preserve">
          <source>This will result in &lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&amp;gt;&lt;/code&gt; being appended in the head of the page, which will instruct the browser to prefetch in idle time the &lt;code&gt;login-modal-chunk.js&lt;/code&gt; file.</source>
          <target state="translated">これにより、ページの先頭に &lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&amp;gt;&lt;/code&gt; が追加され、アイドル時間に &lt;code&gt;login-modal-chunk.js&lt;/code&gt; でプリフェッチするようブラウザに指示しますファイル。</target>
        </trans-unit>
        <trans-unit id="c85e87d9ec602f1d997bca703285880f56410641" translate="yes" xml:space="preserve">
          <source>This will result in following output:</source>
          <target state="translated">これにより、以下のような出力になります。</target>
        </trans-unit>
        <trans-unit id="4ac30989a90a0b71fb88d88da6109d1c138e172f" translate="yes" xml:space="preserve">
          <source>This will result in splitting &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; into a separate chunk. If you're not sure what packages have been included in a chunk you may refer to &lt;a href=&quot;../guides/code-splitting#bundle-analysis&quot;&gt;Bundle Analysis&lt;/a&gt; section for details.</source>
          <target state="translated">This will result in splitting &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; into a separate chunk. If you're not sure what packages have been included in a chunk you may refer to &lt;a href=&quot;../guides/code-splitting#bundle-analysis&quot;&gt;Bundle Analysis&lt;/a&gt; section for details.</target>
        </trans-unit>
        <trans-unit id="899806b06bf180ab4287827d162ab9f78154c6bd" translate="yes" xml:space="preserve">
          <source>This will result in the following output:</source>
          <target state="translated">これにより、以下のような出力になります。</target>
        </trans-unit>
        <trans-unit id="dd75db9f1ff33f0b55c972ee38e1768f886c967a" translate="yes" xml:space="preserve">
          <source>This will simply export the provided &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; here can be anything except a function.</source>
          <target state="translated">これは単に提供された &lt;code&gt;value&lt;/code&gt; エクスポートします。ここでの &lt;code&gt;value&lt;/code&gt; 、関数以外であれば何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="7416b1d07afa4e2b0585443cfa1b58ec3bd5d4db" translate="yes" xml:space="preserve">
          <source>This will trigger the &lt;code&gt;evaluateTypeof&lt;/code&gt; hook:</source>
          <target state="translated">This will trigger the &lt;code&gt;evaluateTypeof&lt;/code&gt; hook:</target>
        </trans-unit>
        <trans-unit id="bbfc51253cda4d1bb26a188796425eaeb9f6e0ab" translate="yes" xml:space="preserve">
          <source>This will wrap the return value of your entry point into a jsonp wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efed152efc8461a74df43e343c4dd0ad810e7a79" translate="yes" xml:space="preserve">
          <source>This will yield the following build result:</source>
          <target state="translated">これにより、以下のようなビルド結果が得られます。</target>
        </trans-unit>
        <trans-unit id="9bbe133d1fd6efcfd0e829d8259bc2e5163a63ab" translate="yes" xml:space="preserve">
          <source>This won't trigger:</source>
          <target state="translated">これでは発動しません。</target>
        </trans-unit>
        <trans-unit id="4df81b30369adbeaf367a4758423836e4cb12a34" translate="yes" xml:space="preserve">
          <source>This would allow to remove this piece of code. But there are still questions with the imports which need to be included/evaluated because they could contain side effects.</source>
          <target state="translated">これにより、このコードを削除することができます。しかし、副作用を含む可能性があるため、インポートを含めたり評価したりする必要があるインポートにはまだ疑問があります。</target>
        </trans-unit>
        <trans-unit id="945fcbc1787185641ce61384de9325b8f50d7afe" translate="yes" xml:space="preserve">
          <source>This would expose your index.html file to the polymer-webpack-loader based on the process used by the html-loader. In this case you would need to exclude your html file from the polymer-webpack-loader or look for other ways to avoid this conflict. See: &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md&quot;&gt;html-webpack-plugin template options&lt;/a&gt;</source>
          <target state="translated">これにより、html-loaderが使用するプロセスに基づいて、index.htmlファイルがPolymer-webpack-loaderに公開されます。この場合、htmlファイルをPolymer-webpack-loaderから除外するか、この競合を回避する他の方法を探す必要があります。参照：&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md&quot;&gt;html-webpack-pluginテンプレートオプション&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ea4357ef4b413d69e9589461b2acd2f1ec82b54" translate="yes" xml:space="preserve">
          <source>This would go nicely with &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; as the rest of the &lt;code&gt;lodash&lt;/code&gt; library should get dropped.</source>
          <target state="translated">これは、残りの &lt;code&gt;lodash&lt;/code&gt; ライブラリが削除されるはずなので、&lt;a href=&quot;tree-shaking&quot;&gt;ツリーシェイキング&lt;/a&gt;に適しています。</target>
        </trans-unit>
        <trans-unit id="b166a6d72bc0ecd96b32dc3dc3968cf48187e1f5" translate="yes" xml:space="preserve">
          <source>This wraps the &lt;code&gt;require('file.js')&lt;/code&gt; in a &lt;code&gt;require.ensure&lt;/code&gt; block</source>
          <target state="translated">これは &lt;code&gt;require('file.js')&lt;/code&gt; を &lt;code&gt;require.ensure&lt;/code&gt; ブロックでラップします</target>
        </trans-unit>
        <trans-unit id="db0f1255d05986e69c5d921d1eea45817e63296f" translate="yes" xml:space="preserve">
          <source>This: available through the &lt;code&gt;this&lt;/code&gt; object (&lt;code&gt;libraryTarget:'this'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;libraryTarget:'this'&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; オブジェクト（libraryTarget： 'this'）を通じて利用できます。</target>
        </trans-unit>
        <trans-unit id="0705c3b770969e27f7a00fe2cf8c2bc003dbc17b" translate="yes" xml:space="preserve">
          <source>Those exports will trigger this hook:</source>
          <target state="translated">これらのエクスポートはこのフックをトリガーします。</target>
        </trans-unit>
        <trans-unit id="3ffef249f4c6fcea2923ee5d65836d74d834ecab" translate="yes" xml:space="preserve">
          <source>Three simple ways to inspect a webpack bundle</source>
          <target state="translated">webpackバンドルを検査する3つの簡単な方法</target>
        </trans-unit>
        <trans-unit id="22975e15fe01eb83dd38a4fdd63bcdb34c745980" translate="yes" xml:space="preserve">
          <source>Throughout the Guides we will use &lt;code&gt;diff&lt;/code&gt; blocks to show you what changes we're making to directories, files, and code.</source>
          <target state="translated">ガイド全体を通して、 &lt;code&gt;diff&lt;/code&gt; ブロックを使用して、ディレクトリ、ファイル、およびコードに加えた変更を示します。</target>
        </trans-unit>
        <trans-unit id="8c6fde5245f850996f4fa47b43e3d6f2119f9b90" translate="yes" xml:space="preserve">
          <source>Throughout the Guides we will use &lt;strong&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/strong&gt; blocks to show you what changes we're making to directories, files, and code. For instance:</source>
          <target state="translated">Throughout the Guides we will use &lt;strong&gt; &lt;code&gt;diff&lt;/code&gt; &lt;/strong&gt; blocks to show you what changes we're making to directories, files, and code. For instance:</target>
        </trans-unit>
        <trans-unit id="098329a4e0a780055cca74efd7b36afeccfbe21e" translate="yes" xml:space="preserve">
          <source>Throwing an error from loader:</source>
          <target state="translated">ローダからエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="921008c663ca39740d7eff1fc3116a1d5032c017" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;window.$&lt;/code&gt; is then available in the browser console.</source>
          <target state="translated">したがって、 &lt;code&gt;window.$&lt;/code&gt; はブラウザコンソールで使用できます。</target>
        </trans-unit>
        <trans-unit id="c929173c9f4dfa1ce427bc6782df85c0786c6b97" translate="yes" xml:space="preserve">
          <source>Time in milliseconds. &lt;code&gt;cache.idleTimeout&lt;/code&gt; denotes the time period after which the cache storing should happen.</source>
          <target state="translated">Time in milliseconds. &lt;code&gt;cache.idleTimeout&lt;/code&gt; denotes the time period after which the cache storing should happen.</target>
        </trans-unit>
        <trans-unit id="be05cb967fa89095d05e7e54631c6f7bc59b4d38" translate="yes" xml:space="preserve">
          <source>Time in milliseconds. &lt;code&gt;cache.idleTimeoutForInitialStore&lt;/code&gt; is the time period after which the initial cache storing should happen.</source>
          <target state="translated">Time in milliseconds. &lt;code&gt;cache.idleTimeoutForInitialStore&lt;/code&gt; is the time period after which the initial cache storing should happen.</target>
        </trans-unit>
        <trans-unit id="03dcb8ddd180c79b7cbef1fbef09bd9b811c6229" translate="yes" xml:space="preserve">
          <source>Timeout for gathering changes while watching</source>
          <target state="translated">視聴中の変化を収集するためのタイムアウト</target>
        </trans-unit>
        <trans-unit id="661d4063b8ec8980f63428513015c42d7d7a39d4" translate="yes" xml:space="preserve">
          <source>Timings</source>
          <target state="translated">Timings</target>
        </trans-unit>
        <trans-unit id="54963bcda5c44c101aba88a7600754b4d08bd65b" translate="yes" xml:space="preserve">
          <source>Tips for Use</source>
          <target state="translated">使い方のコツ</target>
        </trans-unit>
        <trans-unit id="b2660960645189e282a8a216a50f1f554af01560" translate="yes" xml:space="preserve">
          <source>To approach this problem you can easily use a good old environment variable. Let's say we have a variable &lt;code&gt;ASSET_PATH&lt;/code&gt;:</source>
          <target state="translated">この問題に取り組むには、古き良き環境変数を簡単に使用できます。変数 &lt;code&gt;ASSET_PATH&lt;/code&gt; があるとしましょう：</target>
        </trans-unit>
        <trans-unit id="dcbc79a6d6d80f687151d525406640646c99705e" translate="yes" xml:space="preserve">
          <source>To automatically load &lt;code&gt;jquery&lt;/code&gt; we can simply point both variables it exposes to the corresponding node module:</source>
          <target state="translated">&lt;code&gt;jquery&lt;/code&gt; を自動的にロードするには、対応するノードモジュールに公開する両方の変数をポイントするだけです。</target>
        </trans-unit>
        <trans-unit id="2cff0b80a6edf97df3a239f888cd3d2406dca34c" translate="yes" xml:space="preserve">
          <source>To be compatible with existing css files (if not in CSS Module mode).</source>
          <target state="translated">既存のCSSファイルと互換性を持たせる(CSSモジュールモードでない場合)。</target>
        </trans-unit>
        <trans-unit id="07015a6889ed2ed55c54e13b2a92e0506c83e9bb" translate="yes" xml:space="preserve">
          <source>To be safe, you can use &lt;code&gt;enforce: &quot;pre&quot;&lt;/code&gt; section to check source files, not modified by other loaders (like &lt;code&gt;babel-loader&lt;/code&gt;)</source>
          <target state="translated">安全のために、 &lt;code&gt;enforce: &quot;pre&quot;&lt;/code&gt; セクションを使用して、他のローダー（ &lt;code&gt;babel-loader&lt;/code&gt; など）によって変更されていないソースファイルをチェックできます。</target>
        </trans-unit>
        <trans-unit id="8cc256b5ec71d9d9a4b9f72f7f96365afb242e4a" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;@gfx/zopfli&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;@gfx/zopfli&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="300217b5e3ca451bfede33b8a39b09a6509dd6a3" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;cache-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;cache-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="72aac05bc13982f6c6a5067c2ddd9e569185b48a" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;coffeescript&lt;/code&gt; and &lt;code&gt;coffee-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;coffeescript&lt;/code&gt; and &lt;code&gt;coffee-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9601d39f4fea47b62aff47d6c20f03c448c47e46" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;compression-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;compression-webpack-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="82bf60baa207e3a2a73e2e85ad00daef03147bec" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;config-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;config-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="fb3f78b10623af49e63dfb9f9c6ea2b45590fdac" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;copy-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;copy-webpack-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="eb549bbd66f44aa000a2e44c782cff06519919f1" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;css-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;css-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ad8394811af31096e15488fd4006bd1cd5812a2b" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;css-minimizer-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;css-minimizer-webpack-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fce74b425fc9b393fe6da8939201756b11c8ae82" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;exports-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;exports-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="411e791be25b2b16d7093ec79dbcbde9a51e71f2" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;expose-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;expose-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="0fc7fc961b47a051b19e226656bde393653c4789" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;file-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;file-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="d371f2a3cfa7666741ca0629308aa3441dce2dbd" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;html-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;html-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="549e68511a14dbc3601a5558ba8c50a965161b29" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;html-minimizer-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;html-minimizer-webpack-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dca628ea3f00b632b6b81454cd714c9799755185" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;image-minimizer-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;image-minimizer-webpack-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="372f0605496cf13295d68fa17070ff1afbf41d0f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;imports-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;imports-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="94d3f896c040c5941000c3f6d1a93ff1345b8612" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;jshint-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;jshint-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="d89de220ed59f227e2f0883cba7f15e710771f4a" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;json-minimizer-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;json-minimizer-webpack-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6dbbf4b1854d000f1b0f5b51db964f7aa3e8cf1e" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;json5-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;json5-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a41ac440dc6238694d68258e618bb49fc94caf83" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;less-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;less-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="966ccb2b770321693105fb2146058043db61d21d" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;less-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;less-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b262c7ab30ff7bd247b5f85aaa7cc70b115efc69" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;mini-css-extract-plugin&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;mini-css-extract-plugin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="549149f55ee616dfb950726ec9162fa32d17da0d" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;mocha-loader&lt;/code&gt; and &lt;code&gt;mocha&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;mocha-loader&lt;/code&gt; and &lt;code&gt;mocha&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="746daaee86d341274baa9bbbb6cb39c7d79f5f35" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;mocha-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;mocha-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="89e5dc0915c471dd5741c80947af93e44d49291a" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;multi-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;multi-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="00fb7c36e27d5f602e02b051008f9368bbec1510" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;node-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;node-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="ac04354afe29bdc0eb01bb123082874b29e12c09" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;null-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;null-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="3f4caa2d4531e6a67c0096ffd202479b086289cf" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;postcss-loader&lt;/code&gt; and &lt;code&gt;postcss&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;postcss-loader&lt;/code&gt; and &lt;code&gt;postcss&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ed9f11b49e3b0ac8754e0ab515a232c4c7bab089" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;raw-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;raw-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="5336d91f3599dbace4c9133e6c80c99d248c2d4f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;react-proxy-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;react-proxy-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="8cb07cd9d5847e41c7193ffd78f6a5328bbf55e2" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;sass-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;sass-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2ecf4f291c2cf94cfdee052bf9ea1afec889db8d" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;source-map-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;source-map-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d7a998a4ac2f536dd8aaf633bc8007df7c8bde21" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;style-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;style-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c6f54944c9d87a57b6782a0d8c4ab4d25eb93f5f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;stylelint-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;stylelint-webpack-plugin&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="36231f4a116c3e0b429bb1621d54bfcf456d6f2e" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;stylus&lt;/code&gt; and &lt;code&gt;stylus-loader&lt;/code&gt;:</source>
          <target state="translated">To begin, you'll need to install &lt;code&gt;stylus&lt;/code&gt; and &lt;code&gt;stylus-loader&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="38782f5d9cd214d47d0d542d22e218c43a6dee53" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;terser-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;terser-webpack-plugin&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="ee9d1d253ebff7e4e9d72665d987bd70ba4b9a08" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;transform-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;transform-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="3c3ed3c5eaa5eefb4adabc155747e61cb046b303" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;url-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;url-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e5d36d38e77ff2fe0084bc1096c8a1da57aa1351" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;val-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;val-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="829c18e6ac496ea95656902cbe84d34833c84385" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;worker-loader&lt;/code&gt;:</source>
          <target state="translated">まず、 &lt;code&gt;worker-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="bfeceae384afd1256e3e284ec202d194d889bbda" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;yaml-frontmatter-loader&lt;/code&gt;:</source>
          <target state="translated">最初に、 &lt;code&gt;yaml-frontmatter-loader&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="06c638119ebe6bdd9660a0f8df0f71a8e0b13de5" translate="yes" xml:space="preserve">
          <source>To bundle the &lt;code&gt;lodash&lt;/code&gt; dependency with &lt;code&gt;index.js&lt;/code&gt;, we'll need to install the library locally:</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; 依存関係を &lt;code&gt;index.js&lt;/code&gt; にバンドルするには、ライブラリをローカルにインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="f5a5b45b7f4a04dd9e2ce0185126dc8553156c30" translate="yes" xml:space="preserve">
          <source>To check the progress of any webpack compilation you can use the &lt;code&gt;--progress&lt;/code&gt; flag.</source>
          <target state="translated">To check the progress of any webpack compilation you can use the &lt;code&gt;--progress&lt;/code&gt; flag.</target>
        </trans-unit>
        <trans-unit id="459eedab9edc3e65ea20dcf600414bd17dc32d72" translate="yes" xml:space="preserve">
          <source>To collect profile data for progress steps you can pass &lt;code&gt;profile&lt;/code&gt; as value to &lt;code&gt;--progress&lt;/code&gt; flag.</source>
          <target state="translated">To collect profile data for progress steps you can pass &lt;code&gt;profile&lt;/code&gt; as value to &lt;code&gt;--progress&lt;/code&gt; flag.</target>
        </trans-unit>
        <trans-unit id="dfa7d608afec42e0cdc2c58c9c250dda0d690d1a" translate="yes" xml:space="preserve">
          <source>To completely disable tag-attribute processing (for instance, if you're handling image loading on the client side) you can pass in &lt;code&gt;attrs=false&lt;/code&gt;.</source>
          <target state="translated">タグ属性処理を完全に無効にするには（たとえば、クライアント側で画像の読み込みを処理している場合）、 &lt;code&gt;attrs=false&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="1309003de522e7c17d3c5a1287a3717198d9d74b" translate="yes" xml:space="preserve">
          <source>To create a &lt;code&gt;scaffold&lt;/code&gt;, you must create a &lt;a href=&quot;http://yeoman.io/authoring/&quot;&gt;&lt;code&gt;yeoman-generator&lt;/code&gt;&lt;/a&gt;. Thanks to it, you can optionally extend your generator to include methods from the &lt;a href=&quot;http://yeoman.io/learning/&quot;&gt;Yeoman API&lt;/a&gt;. It's worth noting that we support all the properties of a regular webpack configuration. In order for us to do this, there's a thing you need to remember:</source>
          <target state="translated">To create a &lt;code&gt;scaffold&lt;/code&gt; , you must create a &lt;a href=&quot;http://yeoman.io/authoring/&quot;&gt; &lt;code&gt;yeoman-generator&lt;/code&gt; &lt;/a&gt;. Thanks to it, you can optionally extend your generator to include methods from the &lt;a href=&quot;http://yeoman.io/learning/&quot;&gt;Yeoman API&lt;/a&gt;. It's worth noting that we support all the properties of a regular webpack configuration. In order for us to do this, there's a thing you need to remember:</target>
        </trans-unit>
        <trans-unit id="f72579134926fff1a800442bd52c8ff45bbcd816" translate="yes" xml:space="preserve">
          <source>To create a code coverage report for all components (even for those for which you have no tests yet) you have to require all the 1) sources and 2) tests. Something like it's described in &lt;a href=&quot;https://github.com/webpack/karma-webpack#alternative-usage&quot;&gt;&quot;alternative usage&quot; of karma-webpack&lt;/a&gt;</source>
          <target state="translated">すべてのコンポーネントのコードカバレッジレポートを作成するには（まだテストを行っていないコンポーネントも含む）、1）すべてのソースと2）テストが必要です。&lt;a href=&quot;https://github.com/webpack/karma-webpack#alternative-usage&quot;&gt;karma-webpackの「代替の使用法」で&lt;/a&gt;説明されているようなもの</target>
        </trans-unit>
        <trans-unit id="97cfbbf176fb99a211b09905e5e5c9dfcaa08a80" translate="yes" xml:space="preserve">
          <source>To create a custom client implementation, create a class that extends &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/blob/master/client-src/clients/BaseClient.js&quot;&gt;&lt;code&gt;BaseClient&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To create a custom client implementation, create a class that extends &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/blob/master/client-src/clients/BaseClient.js&quot;&gt; &lt;code&gt;BaseClient&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cb3dac4cd8002b11b5009a5f3065cd8cbade1f61" translate="yes" xml:space="preserve">
          <source>To create a custom server implementation, create a class that extends &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/blob/master/lib/servers/BaseServer.js&quot;&gt;&lt;code&gt;BaseServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To create a custom server implementation, create a class that extends &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/blob/master/lib/servers/BaseServer.js&quot;&gt; &lt;code&gt;BaseServer&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="64b16bf8ed307590d7c4c616d19178c256a1d1f3" translate="yes" xml:space="preserve">
          <source>To determine the structure from which the found resources will be copied to the destination folder, the &lt;code&gt;context&lt;/code&gt; option is used.</source>
          <target state="translated">To determine the structure from which the found resources will be copied to the destination folder, the &lt;code&gt;context&lt;/code&gt; option is used.</target>
        </trans-unit>
        <trans-unit id="869e6e2ac6874691b0a280a2def88cb61d298df9" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;@import&lt;/code&gt; resolving by &lt;code&gt;css-loader&lt;/code&gt; set the option to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; による &lt;code&gt;@import&lt;/code&gt; 解決を無効にするには、オプションを &lt;code&gt;false&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="361551aaf1d19b454740101d98c789ddb47cdcd1" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;contentBase&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;contentBase&lt;/code&gt; を無効にするには：</target>
        </trans-unit>
        <trans-unit id="fe870f47c32f3704bff3eff2d3ef13906efa0316" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;url()&lt;/code&gt; resolving by &lt;code&gt;css-loader&lt;/code&gt; set the option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; による &lt;code&gt;url()&lt;/code&gt; 解決を無効にするには、オプションを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="e02862c99560640eb94080cfcb8a40ef213be8f5" translate="yes" xml:space="preserve">
          <source>To disable this feature in some common editors, see the list below:</source>
          <target state="translated">一般的なエディタでこの機能を無効にするには、以下のリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="41c8815ef9e8f8a631a2f83b99b5626c9ea326d0" translate="yes" xml:space="preserve">
          <source>To disambiguate in your &lt;code&gt;webpack.config.js&lt;/code&gt; between &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; and &lt;a href=&quot;production&quot;&gt;production builds&lt;/a&gt; you may use environment variables.</source>
          <target state="translated">&lt;a href=&quot;development&quot;&gt;開発&lt;/a&gt;&lt;a href=&quot;production&quot;&gt;ビルド&lt;/a&gt;と本番ビルドの間で &lt;code&gt;webpack.config.js&lt;/code&gt; を明確にするために、環境変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="500ff0470316e19a35544952710d7f6e843d15e4" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the &lt;code&gt;less-loader&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; the &lt;code&gt;css-loader&lt;/code&gt;. Your &lt;code&gt;webpack.config.js&lt;/code&gt; should look like this:</source>
          <target state="translated">CSSソースマップを有効にするには、合格する必要があります &lt;code&gt;sourceMap&lt;/code&gt; のにオプションを &lt;code&gt;less-loader&lt;/code&gt; &lt;em&gt;と&lt;/em&gt; &lt;code&gt;css-loader&lt;/code&gt; 。あなたの &lt;code&gt;webpack.config.js&lt;/code&gt; 次のようになります。</target>
        </trans-unit>
        <trans-unit id="e6f9cb39ea18350ef2bbae97768a1f50000995d1" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the &lt;code&gt;sass-loader&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; the css-loader.</source>
          <target state="translated">To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the &lt;code&gt;sass-loader&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the css-loader.</target>
        </trans-unit>
        <trans-unit id="29ddb3ba3e454446fe1a7da01fa6a7ea800f1aca" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the sass-loader &lt;em&gt;and&lt;/em&gt; the css-loader. Your &lt;code&gt;webpack.config.js&lt;/code&gt; should look like this:</source>
          <target state="translated">CSSソースマップを有効にするには、 &lt;code&gt;sourceMap&lt;/code&gt; オプションをsass-loader &lt;em&gt;と&lt;/em&gt; css-loader に渡す必要があります。あなたの &lt;code&gt;webpack.config.js&lt;/code&gt; 次のようになります。</target>
        </trans-unit>
        <trans-unit id="5f7892b1e37621678647b50e59d05e015a186798" translate="yes" xml:space="preserve">
          <source>To enable HMR, you also need to modify your webpack configuration object to include the HMR entry points. The &lt;code&gt;webpack-dev-server&lt;/code&gt; package includes a method called &lt;code&gt;addDevServerEntrypoints&lt;/code&gt; which you can use to do this. Here's a small example of how that might look:</source>
          <target state="translated">HMRを有効にするには、HMRエントリーポイントを含めるようにwebpack設定オブジェクトを変更する必要もあります。 &lt;code&gt;webpack-dev-server&lt;/code&gt; パッケージには、呼び出されるメソッドが含ま &lt;code&gt;addDevServerEntrypoints&lt;/code&gt; あなたがこれを行うために使用することができます。これがどのように見えるかの小さな例です：</target>
        </trans-unit>
        <trans-unit id="b2fc05b2ff61f26beeae4af670843b3d9e871698" translate="yes" xml:space="preserve">
          <source>To enable source maps, we must configure TypeScript to output inline source maps to our compiled JavaScript files. The following line must be added to our TypeScript configuration:</source>
          <target state="translated">ソースマップを有効にするには、コンパイルしたJavaScriptファイルにインラインのソースマップを出力するようにTypeScriptを設定しなければなりません。以下の行をTypeScriptの設定に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c0f0f5be6d78b1c705d6d755ee8f1d70e5d8fdf8" translate="yes" xml:space="preserve">
          <source>To enable sourcemaps for CSS, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; property in the loader's options. If this is not passed, the loader will respect the setting for webpack source maps, set in &lt;code&gt;devtool&lt;/code&gt;.</source>
          <target state="translated">To enable sourcemaps for CSS, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; property in the loader's options. If this is not passed, the loader will respect the setting for webpack source maps, set in &lt;code&gt;devtool&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1a389a84023632649f39402ea3de4ce188a82054" translate="yes" xml:space="preserve">
          <source>To exclude &lt;code&gt;node_modules&lt;/code&gt;, see the &lt;code&gt;exclude&lt;/code&gt; option in the &lt;code&gt;loaders&lt;/code&gt; config as documented above.</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; を除外するには、上記のように &lt;code&gt;loaders&lt;/code&gt; 設定の &lt;code&gt;exclude&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c69b5dfdb2bfb7ff464008d2cd81168638addc9d" translate="yes" xml:space="preserve">
          <source>To exclude assets that came from new URL calls from the asset loaders add &lt;code&gt;dependency: { not: ['url'] }&lt;/code&gt; to the loader configuration.</source>
          <target state="translated">To exclude assets that came from new URL calls from the asset loaders add &lt;code&gt;dependency: { not: ['url'] }&lt;/code&gt; to the loader configuration.</target>
        </trans-unit>
        <trans-unit id="da6c1a6b4127fd44ba0769c8077129ced921f313" translate="yes" xml:space="preserve">
          <source>To exclude sourcemaps from compression</source>
          <target state="translated">ソースマップを圧縮から除外するには</target>
        </trans-unit>
        <trans-unit id="38a9c27a9e0ab77f048bbdd92dbf6f8e9201f83c" translate="yes" xml:space="preserve">
          <source>To expose stylesheets associated with your library, the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;&lt;code&gt;ExtractTextPlugin&lt;/code&gt;&lt;/a&gt; should be used. Users can then consume and load these as they would any other stylesheet.</source>
          <target state="translated">ライブラリに関連付けられたスタイルシートを公開するには、&lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt; &lt;code&gt;ExtractTextPlugin&lt;/code&gt; &lt;/a&gt;を使用する必要があります。ユーザーは、他のスタイルシートと同様に、これらを使用およびロードできます。</target>
        </trans-unit>
        <trans-unit id="e290f5e27fdf132aed76f6df77c9e1ce86165b82" translate="yes" xml:space="preserve">
          <source>To expose stylesheets associated with your library, the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;&lt;code&gt;MiniCssExtractPlugin&lt;/code&gt;&lt;/a&gt; should be used. Users can then consume and load these as they would any other stylesheet.</source>
          <target state="translated">To expose stylesheets associated with your library, the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt; &lt;code&gt;MiniCssExtractPlugin&lt;/code&gt; &lt;/a&gt; should be used. Users can then consume and load these as they would any other stylesheet.</target>
        </trans-unit>
        <trans-unit id="b58c10e9810b7cd86447de7048c410bbfbdf9685" translate="yes" xml:space="preserve">
          <source>To extract the webpack bootstrap logic into a separate file, use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; on a &lt;code&gt;name&lt;/code&gt; which is not defined as &lt;code&gt;entry&lt;/code&gt;. Commonly the name &lt;code&gt;manifest&lt;/code&gt; is used. See the &lt;a href=&quot;../guides/caching&quot;&gt;caching guide&lt;/a&gt; for details.</source>
          <target state="translated">webpackブートストラップロジックを別のファイルに抽出するには、 &lt;code&gt;entry&lt;/code&gt; として定義されていない &lt;code&gt;name&lt;/code&gt; で &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; を使用します。通常、 &lt;code&gt;manifest&lt;/code&gt; という名前が使用されます。詳細については、&lt;a href=&quot;../guides/caching&quot;&gt;キャッシングガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="38ed89ed4d2d579580e96d0f69f192abda5d4002" translate="yes" xml:space="preserve">
          <source>To fix this you should uninstall the npm package &lt;code&gt;babel&lt;/code&gt; as it is deprecated in babel v6. (instead install &lt;code&gt;babel-cli&lt;/code&gt; or &lt;code&gt;babel-core&lt;/code&gt;) In the case one of your dependencies is installing &lt;code&gt;babel&lt;/code&gt; and you cannot uninstall it yourself, use the complete name of the loader in the webpack config:</source>
          <target state="translated">これを修正するには、babel v6で廃止されているnpmパッケージ &lt;code&gt;babel&lt;/code&gt; をアンインストールする必要があります。（代わりに &lt;code&gt;babel-cli&lt;/code&gt; または &lt;code&gt;babel-core&lt;/code&gt; をインストールします）依存関係の1つが &lt;code&gt;babel&lt;/code&gt; をインストールしていて、自分でアンインストールできない場合は、webpack設定でローダーの完全な名前を使用します。</target>
        </trans-unit>
        <trans-unit id="1471f3354f1fee4747c660cc657f7ec5e39d8aba" translate="yes" xml:space="preserve">
          <source>To fix this, you should uninstall the npm package &lt;code&gt;babel&lt;/code&gt;, as it is deprecated in Babel v6. (Instead, install &lt;code&gt;@babel/cli&lt;/code&gt; or &lt;code&gt;@babel/core&lt;/code&gt;.) In the case one of your dependencies is installing &lt;code&gt;babel&lt;/code&gt; and you cannot uninstall it yourself, use the complete name of the loader in the webpack config:</source>
          <target state="translated">To fix this, you should uninstall the npm package &lt;code&gt;babel&lt;/code&gt; , as it is deprecated in Babel v6. (Instead, install &lt;code&gt;@babel/cli&lt;/code&gt; or &lt;code&gt;@babel/core&lt;/code&gt; .) In the case one of your dependencies is installing &lt;code&gt;babel&lt;/code&gt; and you cannot uninstall it yourself, use the complete name of the loader in the webpack config:</target>
        </trans-unit>
        <trans-unit id="8e0d84621b40671cd3f4fbb8a84b74dd3ba1a2e8" translate="yes" xml:space="preserve">
          <source>To force override the value that is already present in the global object you can set the &lt;code&gt;override&lt;/code&gt; option to the &lt;code&gt;true&lt;/code&gt; value.</source>
          <target state="translated">To force override the value that is already present in the global object you can set the &lt;code&gt;override&lt;/code&gt; option to the &lt;code&gt;true&lt;/code&gt; value.</target>
        </trans-unit>
        <trans-unit id="6021058192262f03686a1a0bd715439d2f2cf191" translate="yes" xml:space="preserve">
          <source>To gain typechecking again, use the &lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt;&lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">もう一度型&lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt; &lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt; &lt;/a&gt;には、ForkTsCheckerWebpackPluginを使用します。</target>
        </trans-unit>
        <trans-unit id="c5a8d8bcb7e0b4e71b403076278fddf67b12775e" translate="yes" xml:space="preserve">
          <source>To generate and compress the original assets:</source>
          <target state="translated">元のアセットを生成して圧縮すること。</target>
        </trans-unit>
        <trans-unit id="d651b67a431c78e3bd983224bcba2b0132dfb37c" translate="yes" xml:space="preserve">
          <source>To get html, need to add &lt;a href=&quot;https://github.com/wooorm/remark-html&quot;&gt;&lt;code&gt;remark-html&lt;/code&gt;&lt;/a&gt; to the remark plugins and add &lt;a href=&quot;html-loader&quot;&gt;&lt;code&gt;html-loader&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;webpack.config&lt;/code&gt;</source>
          <target state="translated">To get html, need to add &lt;a href=&quot;https://github.com/wooorm/remark-html&quot;&gt; &lt;code&gt;remark-html&lt;/code&gt; &lt;/a&gt; to the remark plugins and add &lt;a href=&quot;html-loader&quot;&gt; &lt;code&gt;html-loader&lt;/code&gt; &lt;/a&gt; to the &lt;code&gt;webpack.config&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1a1f2b68224bef3bc79c709c34bf3103ba22925" translate="yes" xml:space="preserve">
          <source>To get started you only need to understand its &lt;strong&gt;Core Concepts&lt;/strong&gt;:</source>
          <target state="translated">開始するには、その&lt;strong&gt;コアコンセプト&lt;/strong&gt;を理解するだけです。</target>
        </trans-unit>
        <trans-unit id="257ccb781a8edd61b316f2c1ae7c4bfadcec5946" translate="yes" xml:space="preserve">
          <source>To ignore warnings, you can use the following configuration:</source>
          <target state="translated">警告を無視するには、以下の設定を使用します。</target>
        </trans-unit>
        <trans-unit id="348e1ea64c185f95f73506889858e9ce259285e2" translate="yes" xml:space="preserve">
          <source>To import a built-in module, use &lt;a href=&quot;../api/module-variables#__non_webpack_require__-webpack-specific-&quot;&gt;&lt;code&gt;__non_webpack_require__&lt;/code&gt;&lt;/a&gt;, i.e. &lt;code&gt;__non_webpack_require__('modulename')&lt;/code&gt; instead of &lt;code&gt;require('modulename')&lt;/code&gt;.</source>
          <target state="translated">組み込みモジュールをインポートするには、 &lt;code&gt;require('modulename')&lt;/code&gt; の代わりに&lt;a href=&quot;../api/module-variables#__non_webpack_require__-webpack-specific-&quot;&gt; &lt;code&gt;__non_webpack_require__&lt;/code&gt; &lt;/a&gt;、つまり &lt;code&gt;__non_webpack_require__('modulename')&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="a5ae4d7aa8a104c8ccb3aa651a7bc57b7fa04613" translate="yes" xml:space="preserve">
          <source>To import a local classname from another module.</source>
          <target state="translated">他のモジュールからローカルのクラス名をインポートするには</target>
        </trans-unit>
        <trans-unit id="49cba4d2623a4fdecd91fd15da0c4fa945088144" translate="yes" xml:space="preserve">
          <source>To import assets from a &lt;code&gt;node_modules&lt;/code&gt; path (include &lt;code&gt;resolve.modules&lt;/code&gt;) and for &lt;code&gt;alias&lt;/code&gt;, prefix it with a &lt;code&gt;~&lt;/code&gt;:</source>
          <target state="translated">To import assets from a &lt;code&gt;node_modules&lt;/code&gt; path (include &lt;code&gt;resolve.modules&lt;/code&gt; ) and for &lt;code&gt;alias&lt;/code&gt; , prefix it with a &lt;code&gt;~&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e2c64aae8fc990d22b375b4c008a28a50ef2b4f0" translate="yes" xml:space="preserve">
          <source>To import from multiple modules use multiple &lt;code&gt;composes:&lt;/code&gt; rules.</source>
          <target state="translated">複数のモジュールからインポートするには、複数の &lt;code&gt;composes:&lt;/code&gt; ルールを使用します。</target>
        </trans-unit>
        <trans-unit id="e7df80ba57a4d21c600ef74569b1a8d6021c36bf" translate="yes" xml:space="preserve">
          <source>To import styles from a &lt;code&gt;node_modules&lt;/code&gt; path (include &lt;code&gt;resolve.modules&lt;/code&gt;) and for &lt;code&gt;alias&lt;/code&gt;, prefix it with a &lt;code&gt;~&lt;/code&gt;:</source>
          <target state="translated">To import styles from a &lt;code&gt;node_modules&lt;/code&gt; path (include &lt;code&gt;resolve.modules&lt;/code&gt; ) and for &lt;code&gt;alias&lt;/code&gt; , prefix it with a &lt;code&gt;~&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d59ea396c382cc546a109b1b257f90cc44f98106" translate="yes" xml:space="preserve">
          <source>To improve the build time when using &lt;code&gt;ts-loader&lt;/code&gt;, use the &lt;code&gt;transpileOnly&lt;/code&gt; loader option. On its own, this option turns off type checking. To gain type checking again, use the &lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt;&lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt;&lt;/a&gt;. This speeds up TypeScript type checking and ESLint linting by moving each to a separate process.</source>
          <target state="translated">To improve the build time when using &lt;code&gt;ts-loader&lt;/code&gt; , use the &lt;code&gt;transpileOnly&lt;/code&gt; loader option. On its own, this option turns off type checking. To gain type checking again, use the &lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt; &lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt; &lt;/a&gt;. This speeds up TypeScript type checking and ESLint linting by moving each to a separate process.</target>
        </trans-unit>
        <trans-unit id="47e9aa3b08def6333cf943d0fb6cd429f52aa435" translate="yes" xml:space="preserve">
          <source>To include source maps set the &lt;code&gt;sourceMap&lt;/code&gt; option.</source>
          <target state="translated">ソースマップを含めるには、 &lt;code&gt;sourceMap&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="4bbe95bbc8dfa0c4d6a1de7a82704d67d3526f2a" translate="yes" xml:space="preserve">
          <source>To inspect the version of &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;webpack-cli&lt;/code&gt; you are using just run command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0804f1fbb9a37f05062092192d402a0233d1abfa" translate="yes" xml:space="preserve">
          <source>To inspect the version of any &lt;code&gt;webpack-cli&lt;/code&gt; sub-package (like &lt;code&gt;@webpack-cli/init&lt;/code&gt;) just run command similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1015f4201a74cca3e3ac70cdc79b7f3b6a6d867" translate="yes" xml:space="preserve">
          <source>To install the latest release or a specific version, run one of the following commands:</source>
          <target state="translated">最新のリリースまたは特定のバージョンをインストールするには、次のいずれかのコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="1884df3f25a3bbb6d7b71df607746c88bfb41cb2" translate="yes" xml:space="preserve">
          <source>To integrate with TypeScript, you will need to define a custom module for the exports of your worker</source>
          <target state="translated">TypeScript と統合するには、ワーカーのエクスポート用にカスタムモジュールを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="5bbe431ff9314e12f762f84eabbf4794bcc69b80" translate="yes" xml:space="preserve">
          <source>To integrate with TypeScript, you will need to define a custom module for the exports of your worker.</source>
          <target state="translated">TypeScript と統合するには、ワーカーのエクスポート用のカスタムモジュールを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="6bcc914a800145c90ef98d17eac32a8bc02e16aa" translate="yes" xml:space="preserve">
          <source>To learn more about source maps, see the &lt;a href=&quot;development&quot;&gt;development guide&lt;/a&gt;.</source>
          <target state="translated">ソースマップの詳細については、&lt;a href=&quot;development&quot;&gt;開発ガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3a177cf38e45191d1a14eeceb328a37a99ad1a1a" translate="yes" xml:space="preserve">
          <source>To learn more about webpack configuration, see the &lt;a href=&quot;../concepts/configuration&quot;&gt;configuration concepts&lt;/a&gt;.</source>
          <target state="translated">Webpack構成の詳細については、&lt;a href=&quot;../concepts/configuration&quot;&gt;構成の概念を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4f6d9d37d8ba6374305d57b794829b7bce4b11d2" translate="yes" xml:space="preserve">
          <source>To make imports do this by default and keep &lt;code&gt;import _ from 'lodash';&lt;/code&gt; syntax in TypeScript, set &lt;code&gt;&quot;allowSyntheticDefaultImports&quot; : true&lt;/code&gt; and &lt;code&gt;&quot;esModuleInterop&quot; : true&lt;/code&gt; in your &lt;strong&gt;tsconfig.json&lt;/strong&gt; file. This is related to TypeScript configuration and mentioned in our guide only for your information.</source>
          <target state="translated">To make imports do this by default and keep &lt;code&gt;import _ from 'lodash';&lt;/code&gt; syntax in TypeScript, set &lt;code&gt;&quot;allowSyntheticDefaultImports&quot; : true&lt;/code&gt; and &lt;code&gt;&quot;esModuleInterop&quot; : true&lt;/code&gt; in your &lt;strong&gt;tsconfig.json&lt;/strong&gt; file. This is related to TypeScript configuration and mentioned in our guide only for your information.</target>
        </trans-unit>
        <trans-unit id="3e748d8b605e30f64d9404df3cdd168090d45ff8" translate="yes" xml:space="preserve">
          <source>To make this work with HMR we need to update that binding to the new &lt;code&gt;printMe&lt;/code&gt; function using &lt;code&gt;module.hot.accept&lt;/code&gt;:</source>
          <target state="translated">HMRでこれを機能させるには、 &lt;code&gt;printMe&lt;/code&gt; を使用して、新しいprintMe関数へのバインディングを更新する必要があり &lt;code&gt;module.hot.accept&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b00037db6e6c3f6baec9ee9566ee8706baef31c4" translate="yes" xml:space="preserve">
          <source>To mimic a more production-like environment, it is also possible to proxy the &lt;code&gt;webpack-dev-server&lt;/code&gt; with nginx.</source>
          <target state="translated">To mimic a more production-like environment, it is also possible to proxy the &lt;code&gt;webpack-dev-server&lt;/code&gt; with nginx.</target>
        </trans-unit>
        <trans-unit id="06ca871bf3949e7877aca45fc526601107359dd1" translate="yes" xml:space="preserve">
          <source>To mimic a more production-like environment, it is also possible to proxy the webpack-dev-server with nginx.</source>
          <target state="translated">より本番環境に近い環境を模倣するために、webpack-dev-serverをnginxでプロキシすることも可能です。</target>
        </trans-unit>
        <trans-unit id="ae527e4c710ed9a7353edef23e497137a1f06dfe" translate="yes" xml:space="preserve">
          <source>To minify the output, use a plugin like &lt;a href=&quot;css-minimizer-webpack-plugin&quot;&gt;css-minimizer-webpack-plugin&lt;/a&gt;.</source>
          <target state="translated">To minify the output, use a plugin like &lt;a href=&quot;css-minimizer-webpack-plugin&quot;&gt;css-minimizer-webpack-plugin&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="628c7d2253f28d8603b993e75263711dfb0ad973" translate="yes" xml:space="preserve">
          <source>To only use the manual flag and do not analyse source code:</source>
          <target state="translated">マニュアルフラグのみを使用し、ソースコードを解析しないようにする。</target>
        </trans-unit>
        <trans-unit id="4d5cefa57cd7873c74c9575f3d9b2d6d222b5caf" translate="yes" xml:space="preserve">
          <source>To opt-out from used exports analysis per runtime:</source>
          <target state="translated">ランタイムごとの使用済みエクスポート解析をオプトアウトする。</target>
        </trans-unit>
        <trans-unit id="bc330b2b1a81faa80abe33d44510a51885be8781" translate="yes" xml:space="preserve">
          <source>To pass arguments directly to Node.js process, you can use the &lt;code&gt;NODE_OPTIONS&lt;/code&gt; option.</source>
          <target state="translated">To pass arguments directly to Node.js process, you can use the &lt;code&gt;NODE_OPTIONS&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="63c9385d34fe76b0b46414f529a97ef068c93512" translate="yes" xml:space="preserve">
          <source>To pass your own certificate via CLI, use the following options</source>
          <target state="translated">CLI経由で独自の証明書を渡すには、以下のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="19f8115b103436185bc4f73cf8023e4431cc5a22" translate="yes" xml:space="preserve">
          <source>To pass your own certificate via the CLI use the following options</source>
          <target state="translated">CLI経由で独自の証明書を渡すには、以下のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="6647a87d1cb201b2abb16749321598ec33fa1589" translate="yes" xml:space="preserve">
          <source>To prevent the high delay when booting workers it possible to warmup the worker pool.</source>
          <target state="translated">ワーカーを起動する際の遅延を防ぐために、ワーカープールをウォームアップすることができます。</target>
        </trans-unit>
        <trans-unit id="1016a714864b36370272ce33473888774449f263" translate="yes" xml:space="preserve">
          <source>To report progress, a plugin must &lt;code&gt;tap&lt;/code&gt; into a hook using the &lt;code&gt;context: true&lt;/code&gt; option:</source>
          <target state="translated">To report progress, a plugin must &lt;code&gt;tap&lt;/code&gt; into a hook using the &lt;code&gt;context: true&lt;/code&gt; option:</target>
        </trans-unit>
        <trans-unit id="ffeef99e565e8137a276e248b438f53bf32076a0" translate="yes" xml:space="preserve">
          <source>To run only the &lt;code&gt;second&lt;/code&gt; configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6472c575009f9527693ccb1eb7975cf2b5bb6a74" translate="yes" xml:space="preserve">
          <source>To run the local installation of webpack you can access its bin version as &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt;.</source>
          <target state="translated">webpackのローカルインストールを実行するには、binバージョンに &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="14c3502b5d0c3ef1e7cca5247b15e5302cae180a" translate="yes" xml:space="preserve">
          <source>To run the local installation of webpack you can access its binary version as &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt;. Alternatively, if you are using npm v5.2.0 or greater, you can run &lt;code&gt;npx webpack&lt;/code&gt; to do it.</source>
          <target state="translated">To run the local installation of webpack you can access its binary version as &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt; . Alternatively, if you are using npm v5.2.0 or greater, you can run &lt;code&gt;npx webpack&lt;/code&gt; to do it.</target>
        </trans-unit>
        <trans-unit id="c1fe53d810ee24cc9207067a8d95fa1e63e196ff" translate="yes" xml:space="preserve">
          <source>To see code examples please refer to &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;webpack repository&lt;/a&gt;</source>
          <target state="translated">To see code examples please refer to &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;webpack repository&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3a6e637bcd7f8c82f7ecb2b72b80d94077bbbc98" translate="yes" xml:space="preserve">
          <source>To set a custom name for the output script, use the &lt;code&gt;name&lt;/code&gt; parameter. The name may contain the string &lt;code&gt;[hash]&lt;/code&gt;, which will be replaced with a content dependent hash for caching purposes. When using &lt;code&gt;name&lt;/code&gt; alone &lt;code&gt;[hash]&lt;/code&gt; is omitted.</source>
          <target state="translated">出力スクリプトのカスタム名を設定するには、 &lt;code&gt;name&lt;/code&gt; パラメーターを使用します。名前には文字列 &lt;code&gt;[hash]&lt;/code&gt; を含めることができます。これは、キャッシュの目的でコンテンツ依存のハッシュに置き換えられます。 &lt;code&gt;name&lt;/code&gt; のみを使用する場合、 &lt;code&gt;[hash]&lt;/code&gt; は省略されます。</target>
        </trans-unit>
        <trans-unit id="dac38352ca87e4dd20fd92ae4b4d17c3a6910808" translate="yes" xml:space="preserve">
          <source>To set the &lt;code&gt;target&lt;/code&gt; property, you simply set the target value in your webpack config:</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; プロパティを設定するには、webpack構成でターゲット値を設定するだけです。</target>
        </trans-unit>
        <trans-unit id="d7739566e3958f0e427ab0f8fd3a0e62883980cf" translate="yes" xml:space="preserve">
          <source>To show only errors in your bundle:</source>
          <target state="translated">バンドルのエラーのみを表示する。</target>
        </trans-unit>
        <trans-unit id="aebf79cbf09ef128e596372a5721d38fb978a82d" translate="yes" xml:space="preserve">
          <source>To solve this problem &lt;code&gt;ProgressPlugin&lt;/code&gt; caches the last known total modules count and reuses this value on the next build. The first build will warm the cache but the following builds will use and update this value.</source>
          <target state="translated">To solve this problem &lt;code&gt;ProgressPlugin&lt;/code&gt; caches the last known total modules count and reuses this value on the next build. The first build will warm the cache but the following builds will use and update this value.</target>
        </trans-unit>
        <trans-unit id="144def8245316e56bae55c0aa633ce63f74cdd87" translate="yes" xml:space="preserve">
          <source>To specify an unset default value, use &lt;code&gt;null&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">未設定のデフォルト値を指定するには、 &lt;code&gt;undefined&lt;/code&gt; ではなく &lt;code&gt;null&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="80ba1fc80757c6220f2d25b4d686f35e12c0c9a4" translate="yes" xml:space="preserve">
          <source>To start using the webpack Node.js API, first install webpack if you haven&amp;rsquo;t yet:</source>
          <target state="translated">webpack Node.js APIの使用を開始するには、まだインストールしていない場合は、最初にwebpackをインストールします。</target>
        </trans-unit>
        <trans-unit id="7929162fe7ecd963c36f31e3a8c0790d5dcf5b99" translate="yes" xml:space="preserve">
          <source>To start using webpack Node.js API, first install webpack if you haven&amp;rsquo;t yet:</source>
          <target state="translated">webpack Node.js APIの使用を開始するには、まだ実行していない場合は、まずwebpackをインストールします。</target>
        </trans-unit>
        <trans-unit id="9c156f8d22007693b411c0a6e5d1ef4987eb8bdf" translate="yes" xml:space="preserve">
          <source>To start, make sure that the &lt;code&gt;Vagrantfile&lt;/code&gt; has a static IP;</source>
          <target state="translated">まず、 &lt;code&gt;Vagrantfile&lt;/code&gt; に静的IPがあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="1051af58ed5337486309cda3c2d1ba1cd6199906" translate="yes" xml:space="preserve">
          <source>To tackle this, we use the &lt;a href=&quot;tree-shaking#mark-the-file-as-side-effect-free&quot;&gt;&lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt;&lt;/a&gt; property in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">これに取り組むために、 &lt;code&gt;package.json&lt;/code&gt; の&lt;a href=&quot;tree-shaking#mark-the-file-as-side-effect-free&quot;&gt; &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; &lt;/a&gt;プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="b40ceb97056440b94d088a384a85d5fd8c3add01" translate="yes" xml:space="preserve">
          <source>To understand why you should use webpack, let's recap how we used JavaScript on the web before bundlers were a thing.</source>
          <target state="translated">なぜwebpackを使うべきなのかを理解するために、バンドルラーが存在する前のWeb上でJavaScriptをどのように使っていたかを振り返ってみましょう。</target>
        </trans-unit>
        <trans-unit id="559f3ffdd386200d39a9e0ed2f0bf1bcfb8133ef" translate="yes" xml:space="preserve">
          <source>To use non-code assets with TypeScript, we need to defer the type for these imports. This requires a &lt;code&gt;custom.d.ts&lt;/code&gt; file which signifies custom definitions for TypeScript in our project. Let's set up a declaration for &lt;code&gt;.svg&lt;/code&gt; files:</source>
          <target state="translated">TypeScriptで非コードアセットを使用するには、これらのインポートのタイプを遅延させる必要があります。これには、プロジェクト内のTypeScriptのカスタム定義を示す &lt;code&gt;custom.d.ts&lt;/code&gt; ファイルが必要です。 &lt;code&gt;.svg&lt;/code&gt; ファイルの宣言を設定しましょう：</target>
        </trans-unit>
        <trans-unit id="f47e2685aba87fc596fb60b79c57346015b6eeaf" translate="yes" xml:space="preserve">
          <source>To use this option with the CLI pass the &lt;code&gt;--allowed-hosts&lt;/code&gt; option a comma-delimited string.</source>
          <target state="translated">このオプションをCLIで使用するには、 &lt;code&gt;--allowed-hosts&lt;/code&gt; オプションにカンマ区切りの文字列を渡します。</target>
        </trans-unit>
        <trans-unit id="c7251e927f90574f1c93d0aab322bd244ce7bc38" translate="yes" xml:space="preserve">
          <source>To wait until the chunk is available (and get the exports) you need to async wait for it.</source>
          <target state="translated">チャンクが利用可能になるまで待つ(そしてエクスポートを取得する)ためには、非同期で待機する必要があります。</target>
        </trans-unit>
        <trans-unit id="2861b68689f07956f2c1c5c688dc56b07fc7f5de" translate="yes" xml:space="preserve">
          <source>To write a asset from PostCSS plugin to the webpack, need to add a message in &lt;code&gt;result.messages&lt;/code&gt;.</source>
          <target state="translated">WebPACKのためのプラグインPostCSSから資産を書き込むには、必要がでメッセージを追加する &lt;code&gt;result.messages&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12cf88bed11b20e54e263c18116589d8c63d4211" translate="yes" xml:space="preserve">
          <source>To write the webpack configuration in &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, you would first install the necessary dependencies, i.e., TypeScript and the relevant type definitions from the &lt;a href=&quot;https://definitelytyped.org/&quot;&gt;DefinitelyTyped&lt;/a&gt; project:</source>
          <target state="translated">&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;でwebpack構成を作成するには、最初に必要な依存関係、つまりTypeScriptと&lt;a href=&quot;https://definitelytyped.org/&quot;&gt;DefinitelyTyped&lt;/a&gt;プロジェクトからの関連する型定義をインストールします。</target>
        </trans-unit>
        <trans-unit id="cb9583a28cf56d89a0848b6749cfcca0381af814" translate="yes" xml:space="preserve">
          <source>To write the webpack configuration in &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, you would first install the necessary dependencies:</source>
          <target state="translated">&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;でwebpack構成を作成するには、まず必要な依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="ac1ee07aba30a9f1218d50f37979c7d480deb72f" translate="yes" xml:space="preserve">
          <source>To write the webpack configuration in &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, you would first install the necessary dependencies, i.e., TypeScript and the relevant type definitions from the &lt;a href=&quot;https://definitelytyped.org/&quot;&gt;DefinitelyTyped&lt;/a&gt; project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ca19b09afec2f63af696e7e940998ab6ae784f" translate="yes" xml:space="preserve">
          <source>Toggle between the dev-server's two different modes. By default the application will be served with &lt;em&gt;inline mode&lt;/em&gt; enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</source>
          <target state="translated">開発サーバーの2つの異なるモードを切り替えます。デフォルトでは、アプリケーションは&lt;em&gt;インラインモードを&lt;/em&gt;有効にして提供されます。つまり、ライブリロードを処理するスクリプトがバンドルに挿入され、ビルドメッセージがブラウザコンソールに表示されます。</target>
        </trans-unit>
        <trans-unit id="64ef870ae95d6fc2864d94e9edd1f087d3109f10" translate="yes" xml:space="preserve">
          <source>Toggle between the dev-server's two different modes. By default, the application will be served with &lt;em&gt;inline mode&lt;/em&gt; enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</source>
          <target state="translated">開発サーバーの2つの異なるモードを切り替えます。デフォルトでは、アプリケーションは&lt;em&gt;インラインモードを&lt;/em&gt;有効にして提供されます。これは、ライブリロードを処理するためにスクリプトがバンドルに挿入され、ビルドメッセージがブラウザコンソールに表示されることを意味します。</target>
        </trans-unit>
        <trans-unit id="9a830c714bb2b52b8f817649335855437ebcb701" translate="yes" xml:space="preserve">
          <source>Tool</source>
          <target state="translated">Tool</target>
        </trans-unit>
        <trans-unit id="0bf58158bf93b5f1ff9e6303d80c0572926cad82" translate="yes" xml:space="preserve">
          <source>Tradeoff choice for development builds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a02f440362f76dd74ced4f9fbfee17146a758be" translate="yes" xml:space="preserve">
          <source>Transform/Conditionally load CSS by passing a transform/condition function</source>
          <target state="translated">トランスフォーム/条件関数を渡してCSSを読み込む</target>
        </trans-unit>
        <trans-unit id="626a681bf03395c3c640839f0d5ec24dccbb5e1f" translate="yes" xml:space="preserve">
          <source>Transpiling</source>
          <target state="translated">Transpiling</target>
        </trans-unit>
        <trans-unit id="238d67a83a75343b4c8e8402f4d70c59f71583f1" translate="yes" xml:space="preserve">
          <source>Treat &lt;code&gt;NW.js&lt;/code&gt; legacy &lt;code&gt;nw.gui&lt;/code&gt; module as external and load it via &lt;code&gt;require()&lt;/code&gt; when used.</source>
          <target state="translated">&lt;code&gt;NW.js&lt;/code&gt; のレガシー &lt;code&gt;nw.gui&lt;/code&gt; モジュールを外部として扱い、使用 &lt;code&gt;require()&lt;/code&gt; を介してロードします。</target>
        </trans-unit>
        <trans-unit id="87f16b9ff027c997e1c9d6f0bceb088b55cf14aa" translate="yes" xml:space="preserve">
          <source>Treat common electron built-in modules in main and preload context like &lt;code&gt;electron&lt;/code&gt;, &lt;code&gt;ipc&lt;/code&gt; or &lt;code&gt;shell&lt;/code&gt; as external and load them via &lt;code&gt;require()&lt;/code&gt; when used.</source>
          <target state="translated">&lt;code&gt;electron&lt;/code&gt; 、 &lt;code&gt;ipc&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; などのメインおよびプリロードコンテキストの一般的な電子組み込みモジュールを外部として扱い、使用 &lt;code&gt;require()&lt;/code&gt; を介してロードします。</target>
        </trans-unit>
        <trans-unit id="e9f41ae02b90a760fcabd383b15366a234d56ecd" translate="yes" xml:space="preserve">
          <source>Treat electron built-in modules in the main context like &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;ipc-main&lt;/code&gt; or &lt;code&gt;shell&lt;/code&gt; as external and load them via &lt;code&gt;require()&lt;/code&gt; when used.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 、 &lt;code&gt;ipc-main&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; などのメインコンテキストの電子組み込みモジュールを外部として扱い、使用時に &lt;code&gt;require()&lt;/code&gt; を介してロードします。</target>
        </trans-unit>
        <trans-unit id="ee569634d3cf0444081dd9cc64a066fc484cabbf" translate="yes" xml:space="preserve">
          <source>Treat electron built-in modules in the preload context like &lt;code&gt;web-frame&lt;/code&gt;, &lt;code&gt;ipc-renderer&lt;/code&gt; or &lt;code&gt;shell&lt;/code&gt; as external and load them via require() when used.</source>
          <target state="translated">&lt;code&gt;web-frame&lt;/code&gt; 、 &lt;code&gt;ipc-renderer&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; などのプリロードコンテキストで電子組み込みモジュールを外部として扱い、使用時にrequire（）を介してロードします。</target>
        </trans-unit>
        <trans-unit id="9991d90656eeda9f407b7adf531ad346ce9d05f8" translate="yes" xml:space="preserve">
          <source>Treat electron built-in modules in the renderer context like &lt;code&gt;web-frame&lt;/code&gt;, &lt;code&gt;ipc-renderer&lt;/code&gt; or &lt;code&gt;shell&lt;/code&gt; as external and load them via &lt;code&gt;require()&lt;/code&gt; when used.</source>
          <target state="translated">&lt;code&gt;web-frame&lt;/code&gt; 、 &lt;code&gt;ipc-renderer&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; などのレンダラーコンテキストの電子組み込みモジュールを外部として扱い、使用時に &lt;code&gt;require()&lt;/code&gt; を介してロードします。</target>
        </trans-unit>
        <trans-unit id="0c517d46707745686e1a7a1e2283d08565be6aa3" translate="yes" xml:space="preserve">
          <source>Treat node.js built-in modules like &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;vm&lt;/code&gt; as external and load them via &lt;code&gt;require()&lt;/code&gt; when used.</source>
          <target state="translated">&lt;code&gt;fs&lt;/code&gt; 、 &lt;code&gt;path&lt;/code&gt; 、 &lt;code&gt;vm&lt;/code&gt; などのnode.js組み込みモジュールを外部として扱い、使用 &lt;code&gt;require()&lt;/code&gt; を介してロードします。</target>
        </trans-unit>
        <trans-unit id="5f15f4ea76883ddf6eed88e2cd6c93acefa401ed" translate="yes" xml:space="preserve">
          <source>Treat references to 'http(s)://...' and 'std:...' as external and load them via &lt;code&gt;async import()&lt;/code&gt; when used &lt;strong&gt;(Note that this external type is an &lt;code&gt;async&lt;/code&gt; module, which has various effects on the execution)&lt;/strong&gt;.</source>
          <target state="translated">'http（s）：// ...'および 'std：...'への参照を外部として扱い、使用時に &lt;code&gt;async import()&lt;/code&gt; を介してロードします&lt;strong&gt;（この外部タイプは &lt;code&gt;async&lt;/code&gt; モジュールであり、さまざまな効果があることに注意してください&lt;/strong&gt;）&lt;strong&gt;実行時）&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="83e979056329425cb3a0b7ed82c183df1f5885cd" translate="yes" xml:space="preserve">
          <source>Treat references to &lt;code&gt;http(s)://...&lt;/code&gt; and &lt;code&gt;std:...&lt;/code&gt; as external and load them via &lt;code&gt;async import()&lt;/code&gt; when used &lt;strong&gt;(Note that this external type is an &lt;code&gt;async&lt;/code&gt; module, which has various effects on the execution)&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5b85afca38d7c1fd75ac57da3aa838b7ac9ad9" translate="yes" xml:space="preserve">
          <source>Treat references to &lt;code&gt;http(s)://...&lt;/code&gt; and &lt;code&gt;std:...&lt;/code&gt; as external and load them via &lt;code&gt;import&lt;/code&gt; when used. &lt;strong&gt;(Note that this changes execution order as externals are executed before any other code in the chunk)&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;http(s)://...&lt;/code&gt; および &lt;code&gt;std:...&lt;/code&gt; への参照を外部として扱い、使用時に &lt;code&gt;import&lt;/code&gt; を介してロードします。&lt;strong&gt;（これにより、外部がチャンク内の他のコードの前に実行されるため、実行順序が変更されることに注意してください）&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0342403a32191cb5b268774041560f46a913b84c" translate="yes" xml:space="preserve">
          <source>Tree Shaking</source>
          <target state="translated">ツリーの揺れ</target>
        </trans-unit>
        <trans-unit id="92ee5435c87b7237526ef2d2b3c89bdeda428523" translate="yes" xml:space="preserve">
          <source>Tries to evaluate expressions in &lt;code&gt;if (...)&lt;/code&gt; statements and ternaries to replace them with &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; for further possible dead branch elimination using hooks fired by the parser.</source>
          <target state="translated">&lt;code&gt;if (...)&lt;/code&gt; ステートメントと3項で式を評価し、それらを &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; に置き換えて、パーサーによって起動されたフックを使用して、さらに可能なデッドブランチを排除しようとします。</target>
        </trans-unit>
        <trans-unit id="f48dbb4a06d50125f4b45400d23b5309c350e2b5" translate="yes" xml:space="preserve">
          <source>Triggered after chunk &lt;code&gt;id&lt;/code&gt; optimization has finished.</source>
          <target state="translated">チャンク &lt;code&gt;id&lt;/code&gt; 最適化が完了した後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="7d61f3536f41d0452d7d9b53a7eecd3906189939" translate="yes" xml:space="preserve">
          <source>Triggered after resolver setup is complete.</source>
          <target state="translated">リゾルバのセットアップが完了した後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="016425652fe92febb10e1a63fc9cd2be53ec09b2" translate="yes" xml:space="preserve">
          <source>Triggered at the beginning of the optimization phase.</source>
          <target state="translated">最適化フェーズの開始時にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="56011266a2b4eca29eee0fd1e875499fc201e75f" translate="yes" xml:space="preserve">
          <source>Triggered before a module build has started, can be used to modify the module.</source>
          <target state="translated">モジュールのビルドが開始される前にトリガーされ、モジュールを修正するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="728b9f27106bfa00dc2e96b9deec761104277599" translate="yes" xml:space="preserve">
          <source>Triggered before a module build has started.</source>
          <target state="translated">モジュールのビルドが開始される前にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="6fd7fc94807f7511ee573ecde4a783dbf2b73661" translate="yes" xml:space="preserve">
          <source>Triggered before renaming an identifier to determine if the renaming is allowed. This is usually used together with the &lt;code&gt;rename&lt;/code&gt; hook.</source>
          <target state="translated">識別子の名前を変更する前にトリガーされ、名前の変更が許可されているかどうかを判断します。これは通常、 &lt;code&gt;rename&lt;/code&gt; フックと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="12e4ce8c8ac65e98f4f7ccf18c4f4bb82a1b7ef3" translate="yes" xml:space="preserve">
          <source>Triggered to emit the hash for each chunk.</source>
          <target state="translated">各チャンクのハッシュを出力するためにトリガされます。</target>
        </trans-unit>
        <trans-unit id="062b6f416211a2b05dbf4d9f9fecffbdfd04964e" translate="yes" xml:space="preserve">
          <source>Triggered when an asset from a chunk was added to the compilation.</source>
          <target state="translated">チャンクからのアセットがコンパイルに追加されたときにトリガーされます。</target>
        </trans-unit>
        <trans-unit id="51bc6ac2c044f6b9afa7de612939dadb10997045" translate="yes" xml:space="preserve">
          <source>Triggered when evaluating an expression consisting in a &lt;code&gt;typeof&lt;/code&gt; of a free variable</source>
          <target state="translated">自由変数の &lt;code&gt;typeof&lt;/code&gt; で構成される式を評価するときにトリガーされます</target>
        </trans-unit>
        <trans-unit id="38a030d567f426ffe99aba462766d8b8c251af8b" translate="yes" xml:space="preserve">
          <source>Triggered when parsing a call to a member function of an object.</source>
          <target state="translated">オブジェクトのメンバ関数の呼び出しを解析するときにトリガされます。</target>
        </trans-unit>
        <trans-unit id="ff6db867a66d00712678ba838427fd977f1c8d65" translate="yes" xml:space="preserve">
          <source>Triggered when parsing the &lt;code&gt;typeof&lt;/code&gt; of an identifier</source>
          <target state="translated">識別子の &lt;code&gt;typeof&lt;/code&gt; を解析するときにトリガーされます</target>
        </trans-unit>
        <trans-unit id="44825eac0a17d933f58f835331868e14e67ea739" translate="yes" xml:space="preserve">
          <source>Triggered when renaming to get the new identifier. This hook will be called only if &lt;code&gt;canRename&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">新しい識別子を取得するために名前を変更するとトリガーされます。このフックは、 &lt;code&gt;canRename&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返した場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9e56bcdca9e64b81d4b708a360cc55517cb3865c" translate="yes" xml:space="preserve">
          <source>Triggers a re-build of the module.</source>
          <target state="translated">モジュールの再構築をトリガします。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="ffb2ecf6611790daff972e263d7001c037770c42" translate="yes" xml:space="preserve">
          <source>Try to keep the chunk count below a limit</source>
          <target state="translated">チャンク数を制限値以下にするようにしてください。</target>
        </trans-unit>
        <trans-unit id="b525bcfcdd619ae45cbe7b652f2a2e93cc867f70" translate="yes" xml:space="preserve">
          <source>Try to keep the chunk size above a limit</source>
          <target state="translated">チャンクサイズを制限値以上に保つようにしてください。</target>
        </trans-unit>
        <trans-unit id="d72027e0c8836ef57ef4be1e1d4b0be280682157" translate="yes" xml:space="preserve">
          <source>Turn on &lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;polling&lt;/a&gt; by passing &lt;code&gt;true&lt;/code&gt;, or specifying a poll interval in milliseconds:</source>
          <target state="translated">オンにし&lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;、ポーリング&lt;/a&gt;渡すことによって &lt;code&gt;true&lt;/code&gt; 、またはミリ秒単位でポーリング間隔を指定：</target>
        </trans-unit>
        <trans-unit id="6b517438de5f4b79f54fb3ec50b752a1392cebdf" translate="yes" xml:space="preserve">
          <source>Turn on &lt;a href=&quot;https://whatis.techtarget.com/definition/polling&quot;&gt;polling&lt;/a&gt; by passing &lt;code&gt;true&lt;/code&gt;, or specifying a poll interval in milliseconds:</source>
          <target state="translated">オンにし&lt;a href=&quot;https://whatis.techtarget.com/definition/polling&quot;&gt;、ポーリング&lt;/a&gt;渡すことによって &lt;code&gt;true&lt;/code&gt; 、またはミリ秒単位でポーリング間隔を指定：</target>
        </trans-unit>
        <trans-unit id="38fca6ee99a8e2eb5692ba03fc79c782860fdf0d" translate="yes" xml:space="preserve">
          <source>Turn on debugging mode</source>
          <target state="translated">デバッグモードをオンにする</target>
        </trans-unit>
        <trans-unit id="2b8055ed62d8e4280ad68eb434e81c48a5a0540b" translate="yes" xml:space="preserve">
          <source>Turn on watch mode. This means that after the initial build, webpack will continue to watch for changes in any of the resolved files.</source>
          <target state="translated">ウォッチモードをオンにします。これは、最初のビルドの後、webpackが解決されたファイルのいずれかの変更をウォッチし続けることを意味します。</target>
        </trans-unit>
        <trans-unit id="0b364042060d283631bdc472627fff2ec14242bf" translate="yes" xml:space="preserve">
          <source>Turn on watch mode. This means that after the initial build, webpack will continue to watch for changes in any of the resolved files. Watch mode is turned off by default:</source>
          <target state="translated">ウォッチモードをオンにします。これは、最初のビルドの後、webpackは解決されたファイルのいずれかの変更をウォッチし続けることを意味します。ウォッチモードはデフォルトではオフになっています。</target>
        </trans-unit>
        <trans-unit id="5745eba8f5a78750634eaf8eae2c0b439123ade7" translate="yes" xml:space="preserve">
          <source>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found.</source>
          <target state="translated">ヒントのオン/オフを切り替えます。さらに、ヒントが見つかったときにエラーか警告を投げるように webpack に指示します。</target>
        </trans-unit>
        <trans-unit id="b9173d10bd7a6471f8b2bcda45935dfcb7aa6ea4" translate="yes" xml:space="preserve">
          <source>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found. This property is set to &lt;code&gt;&quot;warning&quot;&lt;/code&gt; by default.</source>
          <target state="translated">ヒントをオン/オフにします。さらに、ヒントが見つかったときにエラーまたは警告をスローするようにwebpackに指示します。このプロパティは、デフォルトで &lt;code&gt;&quot;warning&quot;&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="5ce6d5323234bd0947f55f8ac9407c285c721c2b" translate="yes" xml:space="preserve">
          <source>Tweak styling faster -- almost comparable to changing styles in the browser's debugger.</source>
          <target state="translated">スタイリングの微調整が速くなりました --ブラウザのデバッガでスタイルを変更するのとほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="7e9716466491e421116d059d46096213e7207c3f" translate="yes" xml:space="preserve">
          <source>Two chunk groups with names &lt;code&gt;home&lt;/code&gt; and &lt;code&gt;about&lt;/code&gt; are created. Each of them has a chunk with a module - &lt;code&gt;./home.js&lt;/code&gt; for &lt;code&gt;home&lt;/code&gt; and &lt;code&gt;./about.js&lt;/code&gt; for &lt;code&gt;about&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;home&lt;/code&gt; と &lt;code&gt;about&lt;/code&gt; という名前の2つのチャンクグループが作成されます。それらの各モジュールとのチャンクを持っている- &lt;code&gt;./home.js&lt;/code&gt; のための &lt;code&gt;home&lt;/code&gt; と &lt;code&gt;./about.js&lt;/code&gt; 用 &lt;code&gt;about&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e1a738f77891efb46fed43843ce712380ab54a1" translate="yes" xml:space="preserve">
          <source>Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and recommended approach is to use the &lt;a href=&quot;../api/module-methods#import-&quot;&gt;&lt;code&gt;import()&lt;/code&gt; syntax&lt;/a&gt; that conforms to the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript proposal&lt;/a&gt; for dynamic imports. The legacy, webpack-specific approach is to use &lt;a href=&quot;../api/module-methods#require-ensure&quot;&gt;&lt;code&gt;require.ensure&lt;/code&gt;&lt;/a&gt;. Let's try using the first of these two approaches...</source>
          <target state="translated">動的コード分割に関しては、2つの同様の手法がWebpackでサポートされています。最初の推奨されるアプローチは、動的インポートの&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript提案に&lt;/a&gt;準拠する&lt;a href=&quot;../api/module-methods#import-&quot;&gt; &lt;code&gt;import()&lt;/code&gt; 構文&lt;/a&gt;を使用することです。従来のwebpack固有のアプローチは&lt;a href=&quot;../api/module-methods#require-ensure&quot;&gt; &lt;code&gt;require.ensure&lt;/code&gt; &lt;/a&gt;を使用することです。これらの2つの方法の最初の方法を使用してみましょう...</target>
        </trans-unit>
        <trans-unit id="79f786196af9807f2487c7f9f2c9c5b0e6bcefa0" translate="yes" xml:space="preserve">
          <source>Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and recommended approach is to use the &lt;a href=&quot;../api/module-methods#import-1&quot;&gt;&lt;code&gt;import()&lt;/code&gt; syntax&lt;/a&gt; that conforms to the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript proposal&lt;/a&gt; for dynamic imports. The legacy, webpack-specific approach is to use &lt;a href=&quot;../api/module-methods#requireensure&quot;&gt;&lt;code&gt;require.ensure&lt;/code&gt;&lt;/a&gt;. Let's try using the first of these two approaches...</source>
          <target state="translated">動的なコード分割に関しては、2つの同様の手法がwebpackでサポートされています。最初の推奨されるアプローチは、動的インポートの&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript提案に&lt;/a&gt;準拠する&lt;a href=&quot;../api/module-methods#import-1&quot;&gt; &lt;code&gt;import()&lt;/code&gt; 構文&lt;/a&gt;を使用することです。従来のwebpack固有のアプローチは、require.ensureを使用すること&lt;a href=&quot;../api/module-methods#requireensure&quot;&gt; &lt;code&gt;require.ensure&lt;/code&gt; &lt;/a&gt;。これらの2つのアプローチの最初のものを使用してみましょう...</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="428777bf43ef12ea8627eb1b9ee0316b607ca80d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;'fallback' | 'no-fallback'&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;'fallback' | 'no-fallback'&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ae1b145c4a39b0e7e83ae72e8f4111b86eed8e4" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;'module' | 'icss'&lt;/code&gt; Default: &lt;code&gt;'module'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;'module' | 'icss'&lt;/code&gt; デフォルト： &lt;code&gt;'module'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d797f14d50313225620e9264aa69fc680580d0c8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&amp;lt;String\|Array&amp;gt;&lt;/code&gt; Default: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array&amp;lt;String\|Array&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab51657c51263d09aaad7589ff69e3c291fc2a56" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&amp;lt;String|Array&amp;gt;&lt;/code&gt; Default: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b66e2538b107060adcf2b101da9724ea50ebdbb" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&lt;/code&gt; Default: &lt;a href=&quot;#attributes&quot;&gt;supported tags and attributes&lt;/a&gt;.</source>
          <target state="translated">タイプ： &lt;code&gt;Array&lt;/code&gt; デフォルト：&lt;a href=&quot;#attributes&quot;&gt;サポートされているタグと属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="72112c57d88f6876b177934d44bae43b95877719" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array&lt;/code&gt; Default: &lt;a href=&quot;#sources&quot;&gt;supported tags and attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a229b08fb0895570dee34d92dd44e883395943" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[Function]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array[Function]&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f15a23ea737e87dd7451dd5e0e9e29e27f4055b6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[Object]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array[Object]&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99b4afaa36767e15dfc4084c10fbd22041b73af8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[String]&lt;/code&gt; Default: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Array[String]&lt;/code&gt; デフォルト： &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea43aa3b9bbcad220f5118da59721ce74d5876e8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean | 'keep-source-map'&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean | 'keep-source-map'&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe15db9e5caa0b84ef69c71fa55abc833556b106" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean | Number&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1786d5f336b7023a095ff9d273b42e018467359" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48f390c9de4ea544dff9d1ec37c3523911fa118e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f822f4d91655775283eeb9acc861e91bb8593e6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24d4453466129b8bf2e49bdf3cd712902713dd56" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93214bd39518ce99d8068fefd7f1edc5a8a7f3f1" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: depends on the &lt;code&gt;compiler.devtool&lt;/code&gt; value</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean&lt;/code&gt; デフォルト： &lt;code&gt;compiler.devtool&lt;/code&gt; の値によって異なります</target>
        </trans-unit>
        <trans-unit id="d0cd7a32d303176f22a8a47fdbbc0c0402bf5df0" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean\|String&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean\|String&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c3a84f78b9d3e392a8a1e606b20988e0735c342" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Function&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Function&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b84b9bc7aaebed88083d6cb3754bfb6954242dfe" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Number&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Number&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c62e5b8c87e9d032ff183d6f9cd74472f99bd24d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Number&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Number&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17d862ded5f60594aaa5a4aabca994ffc0c7fb32" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Number|String&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Number|String&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="faedbfd673ffabf3607ce178a4072cbd053dfb2d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Object&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2af825aa5b7de869bcdcd5a9fc87ff4eaff1317b" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Object&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4d0914369c702e38a062873836b30ee0b138b5" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Object&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt; (see below for details around &lt;code&gt;devtool&lt;/code&gt; value and &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; plugin)</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Object&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt; （ &lt;code&gt;devtool&lt;/code&gt; 値と &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; プラグインの詳細については以下を参照してください）</target>
        </trans-unit>
        <trans-unit id="dca87b7b4cae45a1d3ccaaab1fe59d018992a8a4" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Object&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Object&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7511ed55d65f2776bfe6abe75b8133b9740c4f53" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Object&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt; in production mode, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|Object&lt;/code&gt; デフォルト：本番モードでは &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3e2c3627ef890c719fc9b134a179935ff2387a5" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|RegExp|Function&lt;/code&gt; Default: &lt;code&gt;'true'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|RegExp|Function&lt;/code&gt; デフォルト： &lt;code&gt;'true'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="057522ad3882aff07200321caa3a07f469a2cead" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;'auto'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト： &lt;code&gt;'auto'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a30c25942f7bc483ed30429fb6dc547c6680a4e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;base64&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト： &lt;code&gt;base64&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a45789cbb27a158b6b7a1d196c4567be588ed494" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fb36b090b010171442989619a012304a77f870f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3c6f014e4aa52e4a8bc8886f59fb01087a593d8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8bc98d2d5284dfada844aa73542007514bbde53" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: based from &lt;a href=&quot;https://github.com/jshttp/mime-types&quot;&gt;mime-types&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String&lt;/code&gt; デフォルト：&lt;a href=&quot;https://github.com/jshttp/mime-types&quot;&gt;mime-typesに&lt;/a&gt;基づく</target>
        </trans-unit>
        <trans-unit id="c102d3840abe1451f84b0caecaf1f118a0f7975e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; Default: &lt;code&gt;/*! For license information please see ${commentsFile} */&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;/*! For license information please see ${commentsFile} */&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89d948d309ca4eaddf50a8918ca60c8e8f6d2f83" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|Object&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|Object&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc391969d33770757256cb055768d96590ebb7a3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|Object&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|Object&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cad21ca15fec76b4ab2909c223d32ff5cbcd86b2" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|Object&lt;/code&gt; Default: based on filename, &lt;code&gt;true&lt;/code&gt; for all files matching &lt;code&gt;/\.module\.\w+$/i.test(filename)&lt;/code&gt; regular expression, more information you can read &lt;a href=&quot;https://github.com/webpack-contrib/css-loader#auto&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|Object&lt;/code&gt; デフォルト：ファイル名に基づいて、 &lt;code&gt;/\.module\.\w+$/i.test(filename)&lt;/code&gt; 正規表現に一致するすべてのファイルに &lt;code&gt;true&lt;/code&gt; ます。詳細については、&lt;a href=&quot;https://github.com/webpack-contrib/css-loader#auto&quot;&gt;こちらをご覧ください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8868d15eb3fe0352c846a246f7ea008f1e7c3180" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2765b2640ca4d35ed492a2c7d20819253ddc2db8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2ce1551a2de3757ecac787eb21b737c666f1d63" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;|Object&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;|Object&lt;/code&gt; デフォルト： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="260402fdd52f9d5162c6febf7c4529ca530706d0" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(defaultCacheKeys, file) -&amp;gt; Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;defaultCacheKeys =&amp;gt; defaultCacheKeys&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&amp;lt;(defaultCacheKeys, file) -&amp;gt; Object&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;defaultCacheKeys =&amp;gt; defaultCacheKeys&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="232775346e1ad8a667d0d298e7c0e473ece45de5" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(warning, file, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; Default: &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&amp;lt;(warning, file, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5b22bb98280473acea9cd815eda355202cba26a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(warning, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; Default: &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&amp;lt;(warning, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5833556be7f1faaca60ae6285cccf1d31bdf684" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21907eb9edf04f7610f5c798fdb575c9852fcaa9" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&lt;/code&gt; Default: &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&lt;/code&gt; デフォルト： &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="487fc2d2b16308cc82996b1776bbdb64fed169d9" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&lt;/code&gt; Default: &lt;code&gt;(mimetype, encoding, content, resourcePath) =&amp;gt; mimetype;encoding,base64_content&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&lt;/code&gt; デフォルト:( &lt;code&gt;(mimetype, encoding, content, resourcePath) =&amp;gt; mimetype;encoding,base64_content&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ed6bae83b76c8a2fcf92f4b5e1cf90a0af91066" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Function&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89890a91238d28b89af456ee79a5469a9bc6dd45" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function|Object&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68be30dbb80b283998a4620ae5f2cdfd8a10de7a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32ff5d99cf47a5f4a586c2e015fec8c7af2f831d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;0.8&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;0.8&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a975206f2485cebaf2024e62ab2604b7a355028" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c50fda292f228e964a3c134d2d898e59768354f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;9999&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;9999&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c6e568c15b55b37e63744b174b2e3ca5a7ffc31" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;Math.max(1, os.cpus().length - 1)&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;Math.max(1, os.cpus().length - 1)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0df7a0769e52452e3df73f39fb7b1a59df2977b3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Number&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87a72a4a194580af6f23ca7095e7565efd80de57" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa1722ad0036438a3b69cf0e3b5d3e0af63f80d4" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;a href=&quot;https://github.com/fabiosantoscode/terser#minify-options&quot;&gt;default&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト：&lt;a href=&quot;https://github.com/fabiosantoscode/terser#minify-options&quot;&gt;デフォルト&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f3586819985ed75b8b2d02a46f0e8aaf553b492" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;a href=&quot;https://github.com/terser-js/terser#minify-options&quot;&gt;default&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト：&lt;a href=&quot;https://github.com/terser-js/terser#minify-options&quot;&gt;デフォルト&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="690a74e8c6ac1a54d1b06a87192c7609fc70939c" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;require('stylelint').formatters.string&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;require('stylelint').formatters.string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e767c91c234faccef21d5915638af3d37264e2cd" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;sass&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;sass&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a00bf287d8473e657b95694eeeebd890a935fbff" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="00286afe4bf29a7632e5621860e7cf14fbbeb610" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{ bare: true }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{ bare: true }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac88d9846b5205b48538e6913fecc3b59ec6b9fe" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{ caseSensitive: true, collapseWhitespace: true, conservativeCollapse: true, keepClosingSlash: true, minifyCSS: true, minifyJS: true, removeComments: true, removeScriptTypeAttributes: true, removeStyleLinkTypeAttributes: true, }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{ caseSensitive: true, collapseWhitespace: true, conservativeCollapse: true, keepClosingSlash: true, minifyCSS: true, minifyJS: true, removeComments: true, removeScriptTypeAttributes: true, removeStyleLinkTypeAttributes: true, }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="383bd82c3075c01f42b60082fe4014b73dff736e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{ level: 9 }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{ level: 9 }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f88059faf76f0131224a4309063319047c83e5f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{ plugins: [] }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{ plugins: [] }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be10b6ef21673118a1241c6f0b47058097bddac1" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{ preset: 'default' }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{ preset: 'default' }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55dffc0c58cd2987f27cc35a619490ed080aa712" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{ replacer: null, space: null }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{ replacer: null, space: null }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bbb462263241cd2ba3ee41e7774865902f57d06" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;{}&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object&lt;/code&gt; デフォルト： &lt;code&gt;{}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d50a1962b00c1ebe4e15df59e3ba006efd8e2e76" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object|Function&amp;lt;Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3090c9a1f4e5c2003962edd1f7ff139b04f44e6b" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object|Function&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object|Function&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb7cf8ded73876568c09a569a8a085e063aae549" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object|Function&lt;/code&gt; Default: &lt;code&gt;{ relativeUrls: true }&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object|Function&lt;/code&gt; デフォルト： &lt;code&gt;{ relativeUrls: true }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb52c5e9b3ebe3a7d25c0a508a20473276138ca9" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object|Function&lt;/code&gt; Default: &lt;code&gt;{}&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Object|Function&lt;/code&gt; デフォルト： &lt;code&gt;{}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d80c0b8a01c0dab53d1f380627bfecbf1beb280a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object|Function&lt;/code&gt; Default: defaults values for Sass implementation</source>
          <target state="translated">タイプ： &lt;code&gt;Object|Function&lt;/code&gt; デフォルト：Sass実装のデフォルト値</target>
        </trans-unit>
        <trans-unit id="f1e7391bdda68bf329c48bd6c9153a513715a424" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;RegExp&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;RegExp&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ad0c59a95b0e6d486f10a3a9d7eba6a82efa298" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Regex|Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;&lt;/code&gt; Default: &lt;code&gt;${file}.LICENSE&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Regex|Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;${file}.LICENSE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9497118568642094db37dca1d955af12afd5eca" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;/\.js(\?.*)?$/i&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;/\.js(\?.*)?$/i&lt;/code&gt; . js(\? . *)?$ / i</target>
        </trans-unit>
        <trans-unit id="0ec6af7a195975bd36af2b460624abae040ba7ce" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c3e574cd51824e490cce46575d42da6d5fbe4e3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String | Array[String]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String | Array[String]&lt;/code&gt; デフォルト： &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dad081ed1244c0f0182b6af2ed80d0835e74f031" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b67b322475209b0ccffe39f447c84533fd7ff84d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;a href=&quot;../configuration/entry-context#context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト：&lt;a href=&quot;../configuration/entry-context#context&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9daedfc49f97abea259191b53260374e4b184e0b" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'[hash:base64]'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'[hash:base64]'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c20abb3d6638283db62af7b659a1c54606b93ac9" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'[path][name][ext]'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'[path][name][ext]'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54223bad6aa67e8e06b399d5a079e2fe042e5381" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'file-loader'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'file-loader'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3450d9d063d640321d1424d901a3cc0370a43af5" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'hex'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'hex'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eef1e4b6ef8dbdfffcb778a4aa5c069e90145b08" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'md4'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'md4'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f09c525848a9e04af4422213f7421822bdec9703" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'md5'&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;'md5'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d338a21826be5e359d37d9946a8a9cc06244641e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;(file extension)&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト：（ &lt;code&gt;(file extension)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="458860cc8794fa1dce5c93964ce4854602e52c79" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;[hash].worker.js&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;[hash].worker.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64522537628ac15d313112de255758c15749456e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;compiler.context&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;compiler.context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8032c017e30faabb2408749fe2fd317dc850d226" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;compiler.options.output&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;compiler.options.output&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2eabe9055d6691bbf54d928e4538a230fed05fc" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.basename&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;file.basename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="585c4c6c689042508af37c0e2edc914428880476" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.directory&lt;/code&gt;</source>
          <target state="translated">タイプ： &lt;code&gt;String&lt;/code&gt; デフォルト： &lt;code&gt;file.directory&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
