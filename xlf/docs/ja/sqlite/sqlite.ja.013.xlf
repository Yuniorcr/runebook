<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="sqlite">
    <body>
      <group id="sqlite">
        <trans-unit id="82877b639e06578b26b7b6487eda6b76c0a0e3c6" translate="yes" xml:space="preserve">
          <source>Some &lt;a href=&quot;pragma#syntax&quot;&gt;PRAGMA&lt;/a&gt; statements do their work during sqlite3_prepare() rather than during sqlite3_step(). Those PRAGMA statements are unaffected by EXPLAIN. They operate the same with or without the EXPLAIN prefix. The set of PRAGMA statements that are unaffected by EXPLAIN can vary from one release to the next. Some PRAGMA statements operate during sqlite3_prepare() depending on their arguments. For consistent results, avoid using EXPLAIN on PRAGMA statements.</source>
          <target state="translated">一部の&lt;a href=&quot;pragma#syntax&quot;&gt;PRAGMA&lt;/a&gt;ステートメントは、sqlite3_step（）中ではなく、sqlite3_prepare（）中に機能します。これらのPRAGMAステートメントはEXPLAINの影響を受けません。 EXPLAINプレフィックスがあってもなくても同じように動作します。 EXPLAINの影響を受けない一連のPRAGMAステートメントは、リリースごとに異なる場合があります。一部のPRAGMAステートメントは、引数に応じてsqlite3_prepare（）の間に動作します。一貫した結果を得るには、PRAGMAステートメントでEXPLAINを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="5732042dba5cf74de37a47838012719f36ee8111" translate="yes" xml:space="preserve">
          <source>Some Example Triggers</source>
          <target state="translated">トリガーの例</target>
        </trans-unit>
        <trans-unit id="e2da6518510111d1ca6bc33d2d1e98dff9548bb8" translate="yes" xml:space="preserve">
          <source>Some SQL database engines provide non-standard &quot;hint&quot; mechanisms which can be used to give the query optimizer clues about what indices it should use for a particular statement. The INDEX BY clause of SQLite is &lt;em&gt;not&lt;/em&gt; a hinting mechanism and it should not be used as such. The INDEXED BY clause does not give the optimizer hints about which index to use; it gives the optimizer a requirement of which index to use. If the query optimizer is unable to use the index specified by the INDEX BY clause, then the query will fail with an error.</source>
          <target state="translated">一部のSQLデータベースエンジンは、非標準の「ヒント」メカニズムを提供します。これを使用して、クエリオプティマイザが特定のステートメントに使用するインデックスについての手掛かりを得ることができます。 SQLiteのの句BY INDEXは&lt;em&gt;ない&lt;/em&gt;ヒンティング機構及びそれがそのようなものとして使用されるべきではありません。 INDEXED BY句は、使用するインデックスに関するオプティマイザヒントを提供しません。オプティマイザに使用するインデックスの要件を与えます。クエリオプティマイザーがINDEX BY句で指定されたインデックスを使用できない場合、クエリはエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="fbf443b96f0d9f6eac4bc80a9c5c544e6d64bd31" translate="yes" xml:space="preserve">
          <source>Some commentators say that SQLite is &quot;weakly typed&quot; and that other SQL databases are &quot;strongly typed&quot;. We consider these terms to be inaccurate and pejorative. We prefer to say that SQLite is &quot;flexibly typed&quot; and that other SQL databases are &quot;rigidly typed&quot;.</source>
          <target state="translated">一部のコメンテーターは、SQLiteは「型付けが弱い」と言い、他のSQLデータベースは「型付けが強い」と言っています。私たちは、これらの用語は不正確で蔑称的なものだと考えています。私たちは、SQLiteは「柔軟に型付けされている」と言い、他のSQLデータベースは「厳密に型付けされている」と言いたいのです。</target>
        </trans-unit>
        <trans-unit id="ffa0bb5b46a56bce712735328de2ecfd7898dd9a" translate="yes" xml:space="preserve">
          <source>Some devices are compelled to use an older filesystem with 8+3 filename restrictions for backwards compatibility, or due to other non-technical factors. In such situations, SQLite can be coerced into using auxiliary files that fit the 8+3 pattern as follows:</source>
          <target state="translated">一部のデバイスでは、下位互換性のために、あるいはその他の非技術的な要因のために、8+3のファイル名の制限がある古いファイルシステムを使用することを余儀なくされることがあります。このような状況では、SQLite は以下のように 8+3 パターンに適合する補助ファイルを強制的に使用することができます。</target>
        </trans-unit>
        <trans-unit id="a1a4bdb9a86e43ef62782dbb2803e2ef7fef0a7a" translate="yes" xml:space="preserve">
          <source>Some example, cost table entries:</source>
          <target state="translated">いくつかの例では、コストテーブルのエントリ。</target>
        </trans-unit>
        <trans-unit id="9234854e8f0cb7e3b23fa0273a95bcc8f4a8eaf9" translate="yes" xml:space="preserve">
          <source>Some examples will help illustrate the difference:</source>
          <target state="translated">いくつかの例は、その違いを説明するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="31941b285d3264077d66c50c29fee18d7a8c1f66" translate="yes" xml:space="preserve">
          <source>Some freelist pages contain critical data; specifically the locations of other freelist pages. But most freelist pages contain nothing useful. These latter freelist pages are called &quot;leaf&quot; pages. We are free to modify the content of a leaf freelist page in the database without changing the meaning of the database in any way.</source>
          <target state="translated">いくつかのフリーリストページには、重要なデータが含まれています。しかし、ほとんどのフリーリストページは何も有用なものを含んでいません。これらの後者のフリーリストページは「リーフ」ページと呼ばれています。私たちは、データベースの意味を変更することなく、データベース内のリーフフリーリストページの内容を自由に変更することができます。</target>
        </trans-unit>
        <trans-unit id="6d4f98671a50a0a922d51c622597741cdfcd893a" translate="yes" xml:space="preserve">
          <source>Some future versions of SQLite may change to enable this feature by default.</source>
          <target state="translated">SQLite の将来のバージョンによっては、デフォルトでこの機能を有効にするように変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="1bc7150370b1275da7b22e0b3c0daa34955ce5a3" translate="yes" xml:space="preserve">
          <source>Some limits can be changed at run-time on a per-connection basis using the &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit()&lt;/a&gt; interface with one of the &lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitlength&quot;&gt;limit categories&lt;/a&gt; defined for that interface. Run-time limits are designed for applications that have multiple databases, some of which are for internal use only and others which can be influenced or controlled by potentially hostile external agents. For example, a web browser application might use an internal database to track historical page views but have one or more separate databases that are created and controlled by javascript applications that are downloaded from the internet. The &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit()&lt;/a&gt; interface allows internal databases managed by trusted code to be unconstrained while simultaneously placing tight limitations on databases created or controlled by untrusted external code in order to help prevent a denial of service attack.</source>
          <target state="translated">一部の制限は、&lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit（）&lt;/a&gt;インターフェイスを使用して接続ごとに実行時に変更でき、そのインターフェイスに定義された&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitlength&quot;&gt;制限カテゴリの&lt;/a&gt; 1つを使用できます。実行時の制限は、複数のデータベースを持つアプリケーション用に設計されており、その一部は内部でのみ使用されるものであり、他のものは潜在的に敵意のある外部エージェントによって影響または制御される可能性があります。たとえば、Webブラウザアプリケーションは、内部データベースを使用して履歴ページビューを追跡しますが、インターネットからダウンロードされるJavaScriptアプリケーションによって作成および制御される1つ以上の個別のデータベースを持っている場合があります。&lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit（）&lt;/a&gt;インターフェースにより、信頼できるコードによって管理される内部データベースの制約がなくなり、同時に信頼できない外部コードによって作成または制御されるデータベースに厳しい制限を課して、サービス拒否攻撃を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="27f0f8e3878344df85d2a4246c11bee1e47d7640" translate="yes" xml:space="preserve">
          <source>Some older versions of Linux used the LinuxThreads library for thread support. LinuxThreads is similar to Pthreads, but is subtly different with respect to handling of POSIX advisory locks. SQLite versions 2.2.3 through 3.6.23 recognized that LinuxThreads were being used at runtime and took appropriate action to work around the non-standard behavior of LinuxThreads. But most modern Linux implementations make use of the newer, and correct, NPTL implementation of Pthreads. Beginning with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;version 3.7.0&lt;/a&gt; (2010-07-21), the use of NPTL is assumed. No checks are made. Hence, recent versions of SQLite will subtly malfunction and may corrupt database files if used in multi-threaded application that run on older linux systems that make use of LinuxThreads.</source>
          <target state="translated">一部の古いバージョンのLinuxでは、スレッドサポートにLinuxThreadsライブラリを使用していました。 LinuxThreadsはPthreadsに似ていますが、POSIXアドバイザリロックの処理に関して微妙に異なります。 SQLiteバージョン2.2.3から3.6.23は、実行時にLinuxThreadsが使用されていることを認識し、LinuxThreadsの非標準の動作を回避するために適切なアクションを実行しました。しかし、最近のほとんどのLinux実装は、Pthreadのより新しくて正しいNPTL実装を利用しています。 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;バージョン3.7.0&lt;/a&gt;（2010-07-21）以降、NPTLの使用が想定されています。チェックは行われません。したがって、最近のバージョンのSQLiteは微妙に誤動作し、LinuxThreadsを使用する古いLinuxシステムで実行されるマルチスレッドアプリケーションで使用すると、データベースファイルが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0bef87b7bc572b2934b8ea6d4c58c70ed7dd3633" translate="yes" xml:space="preserve">
          <source>Some older versions of SQLite (prior to version 2.4.0) would show decreasing performance after a sequence of DELETEs followed by new INSERTs. As this test shows, the problem has now been resolved.</source>
          <target state="translated">一部の古いバージョンのSQLite(バージョン2.4.0以前)では、一連のDELETEの後に新しいINSERTを行うと、パフォーマンスが低下することがありました。このテストが示すように、この問題は現在解決されています。</target>
        </trans-unit>
        <trans-unit id="52125a8361f282383783887e4dc2c4cfed4a215d" translate="yes" xml:space="preserve">
          <source>Some opcodes are self-altering. For example, the &lt;a href=&quot;opcode#Init&quot;&gt;Init&lt;/a&gt; opcode (which is always the first opcode run a bytecode program) increments its P1 operand. Subsequent &lt;a href=&quot;opcode#Once&quot;&gt;Once&lt;/a&gt; opcodes compare their P1 operands to the P1 value for the &lt;a href=&quot;opcode#Init&quot;&gt;Init&lt;/a&gt; opcode in order to determine if the one-time initialization code that follows should be skipped. Another example is the &lt;a href=&quot;opcode#String8&quot;&gt;String8&lt;/a&gt; opcode which converts its P4 operand from UTF-8 into the correct database string encoding, then converts itself into a &lt;a href=&quot;opcode#String&quot;&gt;String&lt;/a&gt; opcode.</source>
          <target state="translated">一部のオペコードは自動変更されます。たとえば、&lt;a href=&quot;opcode#Init&quot;&gt;Init&lt;/a&gt;オペコード（常に最初のオペコードがバイトコードプログラムを実行する）は、P1オペランドをインクリメントします。その後の&lt;a href=&quot;opcode#Once&quot;&gt;1回の&lt;/a&gt;オペコードは、それに続く1回限りの初期化コードをスキップする必要があるかどうかを判断するために、P1オペランドを&lt;a href=&quot;opcode#Init&quot;&gt;Init&lt;/a&gt;オペコードのP1値と比較します。別の例は、&lt;a href=&quot;opcode#String8&quot;&gt;String8の&lt;/a&gt;その後に自身を変換し、正しいデータベース文字列のエンコーディングにUTF-8から、そのP4オペランドを変換オペコード&lt;a href=&quot;opcode#String&quot;&gt;文字列&lt;/a&gt;オペコード。</target>
        </trans-unit>
        <trans-unit id="426e64b4a66f4f7807aa6667039b81573979fe2a" translate="yes" xml:space="preserve">
          <source>Some opcodes use all five operands. Some opcodes use one or two. Some opcodes use none of the operands.</source>
          <target state="translated">いくつかのオペコードは、5つのオペランドすべてを使用します。いくつかのオペコードは、1つまたは2つのオペランドを使用します。いくつかのオペコードは、オペランドのいずれも使用しません。</target>
        </trans-unit>
        <trans-unit id="18b335ac36fb2d38cd00024b326c89df9316f364" translate="yes" xml:space="preserve">
          <source>Some or all of these restrictions may be removed in the future.</source>
          <target state="translated">これらの制限の一部または全部が将来的に削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b476a9e69a79b5371957fc7b1a40c95e375aeff4" translate="yes" xml:space="preserve">
          <source>Some other SQL database engines advise developers to store blobs in separate files and then store the filename in the database. In that case, where the database must first be consulted to find the filename before opening and reading the file, simply storing the entire blob in the database gives much faster read and write performance with SQLite. See the &lt;a href=&quot;intern-v-extern-blob&quot;&gt;Internal Versus External BLOBs&lt;/a&gt; article for more information.</source>
          <target state="translated">他のいくつかのSQLデータベースエンジンは、BLOBを個別のファイルに保存してから、ファイル名をデータベースに保存するように開発者にアドバイスしています。その場合、ファイルを開いて読み取る前にまずデータベースを調べてファイル名を見つける必要がありますが、Blob全体をデータベースに格納するだけで、SQLiteの読み取りおよび書き込みパフォーマンスが大幅に向上します。詳細については、&lt;a href=&quot;intern-v-extern-blob&quot;&gt;内部と外部のBLOBの&lt;/a&gt;記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="e94448e3ce0b80c02ec3cf58a3a89e81bfc4e794" translate="yes" xml:space="preserve">
          <source>Some other database constraint, for example a UNIQUE or CHECK constraint, may be violated when the new row is inserted.</source>
          <target state="translated">新しい行が挿入されたときに、他のデータベース制約、例えばUNIQUE制約やCHECK制約が違反している可能性があります。</target>
        </trans-unit>
        <trans-unit id="d87a22bd6e23f0cc806f999949a67d71c38a0517" translate="yes" xml:space="preserve">
          <source>Some other database constraint, for example a UNIQUE or CHECK constraint, may be violated when the row is updated.</source>
          <target state="translated">行が更新されたときに、他のデータベース制約、例えばUNIQUE制約やCHECK制約が違反している可能性があります。</target>
        </trans-unit>
        <trans-unit id="a803eb726af2b55f4a3a45a5ec6b4038451fda8a" translate="yes" xml:space="preserve">
          <source>Some other ways in which FTS5 differs from FTS3/4 are:</source>
          <target state="translated">FTS5がFTS3/4と異なる点は他にもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="e2d6bed42aa0aeee6bb3a36da7e69907ed2fed99" translate="yes" xml:space="preserve">
          <source>Some people say that we should eliminate all warnings because benign warnings mask real warnings that might arise in future changes. This is true enough. But in reply, the developers observe that all warnings have already been fixed in the builds used for SQLite development (various versions of GCC, MSVC, and clang). Compiler warnings usually only arise from compilers or compile-time options that the SQLite developers do not use themselves.</source>
          <target state="translated">良性の警告は、将来の変更で発生するかもしれない本当の警告を覆い隠してしまうので、すべての警告を排除すべきだと言う人もいます。これは十分に真実です。しかし、それに対して開発者は、SQLite の開発に使われているビルド (GCC、MSVC、clang の様々なバージョン)では、すべての警告がすでに修正されていることを観察しています。コンパイラの警告は通常、SQLite 開発者自身が使用していないコンパイラやコンパイル時のオプションからのみ発生します。</target>
        </trans-unit>
        <trans-unit id="8711937cd8478cc6ecffffaffa9bef747431485f" translate="yes" xml:space="preserve">
          <source>Some people view RELEASE as the equivalent of COMMIT for a SAVEPOINT. This is an acceptable point of view as long as one remembers that the changes committed by an inner transaction might later be undone by a rollback in an outer transaction.</source>
          <target state="translated">RELEASEをSAVEPOINTのCOMMITと同等と考える人もいる。これは、内側のトランザクションによってコミットされた変更が、外側のトランザクションのロールバックによって後で元に戻されるかもしれないことを覚えている限り、許容できる視点です。</target>
        </trans-unit>
        <trans-unit id="0c7ab5e876e4a01802f6862f91dcb4e0c53f5563" translate="yes" xml:space="preserve">
          <source>Some pragmas take effect during the SQL compilation stage, not the execution stage. This means if using the C-language &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt;, &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;, &lt;a href=&quot;c3ref/finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; API (or similar in a wrapper interface), the pragma may run during the &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; call, not during the &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; call as normal SQL statements do. Or the pragma might run during sqlite3_step() just like normal SQL statements. Whether or not the pragma runs during sqlite3_prepare() or sqlite3_step() depends on the pragma and on the specific release of SQLite.</source>
          <target state="translated">一部のプラグマは、実行段階ではなく、SQLコンパイル段階で有効になります。 C言語を使用している場合、この手段&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（） &lt;/a&gt;、&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（） &lt;/a&gt;、&lt;a href=&quot;c3ref/finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt; API（またはラッパーインタフェースの同様の）を、プラグマは、中に実行することができる&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;呼び出しではなく、中&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;通常のSQLとしてコールステートメントが行います。または、プラグマは通常のSQLステートメントと同じようにsqlite3_step（）の間に実行される場合があります。プラグマがsqlite3_prepare（）またはsqlite3_step（）の実行中に実行されるかどうかは、プラグマとSQLiteの特定のリリースに依存します。</target>
        </trans-unit>
        <trans-unit id="16b35f88ff5fdb19b220d3f1fb964fe543a7595b" translate="yes" xml:space="preserve">
          <source>Some programmers cannot imagine developing a complex system like SQLite in a language that is not &quot;object oriented&quot;. So why is SQLite not coded in C++ or Java?</source>
          <target state="translated">プログラマーの中には、SQLite のような複雑なシステムを「オブジェクト指向」ではない言語で開発することを想像できない人もいます。ではなぜSQLiteはC++やJavaでコーディングされていないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="b34c6a5bd79eb90989f1ccbc7f5ec2a47398a0d5" translate="yes" xml:space="preserve">
          <source>Some query parameters are interpreted by the SQLite core and used to modify the characteristics of the new connection. All query parameters are always passed through into the xOpen method of the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; even if they are previously read and interpreted by the SQLite core.</source>
          <target state="translated">一部のクエリパラメータはSQLiteコアによって解釈され、新しい接続の特性を変更するために使用されます。SQLiteコアによって以前に読み取られて解釈された場合でも、すべてのクエリパラメーターは常に&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt; xOpenメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="dfe466f14dd2cc6407106f618ec85911c7fcc3f4" translate="yes" xml:space="preserve">
          <source>Some readers might be reluctant to consider SQLite as an application file format because they have been inculcated with the idea that all SQL database schemas must be factored into third normal form and store only small primitive data types such as strings and integers. Certainly relational theory is important and designers should strive to understand it. But, as demonstrated above, it is often quite acceptable to store complex information as XML or JSON in text fields of a database. Do what works, not what your database professor said you ought to do.</source>
          <target state="translated">読者の中には、すべてのSQLデータベーススキーマは第3の通常形式に組み込まれ、文字列や整数のような小さな原始的なデータ型のみを格納しなければならないという考えが植え付けられているため、SQLiteをアプリケーションのファイル形式として検討することに消極的な人もいるかもしれません。確かにリレーショナル理論は重要であり、設計者はそれを理解するように努力すべきです。しかし、上で実証されたように、複雑な情報をXMLやJSONとしてデータベースのテキストフィールドに格納することは、かなり許容できることが多いのです。データベースの教授に言われたことをするのではなく、うまくいくことをしましょう。</target>
        </trans-unit>
        <trans-unit id="da24c123adee2fd8a84517f276f1059ec16db37d" translate="yes" xml:space="preserve">
          <source>Some readers might resist using SQLite as an application file format due to prior exposure to enterprise SQL databases and the caveats and limitations of those other systems. For example, many enterprise database engines advise against storing large strings or BLOBs in the database and instead suggest that large strings and BLOBs be stored as separate files and the filename stored in the database. But SQLite is not like that. Any column of an SQLite database can hold a string or BLOB up to about a gigabyte in size. And for strings and BLOBs of 100 kilobytes or less, &lt;a href=&quot;intern-v-extern-blob&quot;&gt;I/O performance is better&lt;/a&gt; than using separate files.</source>
          <target state="translated">一部の読者は、エンタープライズSQLデータベースへの以前の暴露と他のシステムの警告と制限のために、SQLiteをアプリケーションファイル形式として使用することに抵抗するかもしれません。たとえば、多くのエンタープライズデータベースエンジンは、データベースに大きな文字列またはBLOBを格納しないようにアドバイスしており、代わりに大きな文字列とBLOBを別々のファイルとして格納し、ファイル名をデータベースに格納することを推奨しています。しかし、SQLiteはそうではありません。 SQLiteデータベースの任意の列は、最大で約1ギガバイトの文字列またはBLOBを保持できます。また、100キロバイト以下の文字列とBLOBの場合、個別のファイルを使用する&lt;a href=&quot;intern-v-extern-blob&quot;&gt;より&lt;/a&gt;もI / Oパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="4623126273e781b93958cb9c59802c9b42b20a62" translate="yes" xml:space="preserve">
          <source>Some sanity checking code was removed from the inner loop of vdbe.c to help the library to run a little faster. The code is only removed if you compile with -DNDEBUG.</source>
          <target state="translated">ライブラリの動作を少し速くするために、いくつかのサニティチェックコードを vdbe.c の内部ループから削除しました。このコードが削除されるのは、-DNDEBUG でコンパイルした場合のみです。</target>
        </trans-unit>
        <trans-unit id="fdb2b13b24f119a63e7d35aeab7a0a13260e1127" translate="yes" xml:space="preserve">
          <source>Some systems (for example, Windows 95) do not support the operation implemented by sqlite3_mutex_try(). On those systems, sqlite3_mutex_try() will always return SQLITE_BUSY. The SQLite core only ever uses sqlite3_mutex_try() as an optimization so this is acceptable behavior.</source>
          <target state="translated">いくつかのシステム(例えばWindows 95)はsqlite3_mutex_try()で実装された操作をサポートしていません。そのようなシステムでは、sqlite3_mutex_try()は常にSQLITE_BUSYを返します。SQLiteコアは最適化としてsqlite3_mutex_try()を使用するだけなので、これは許容できる動作です。</target>
        </trans-unit>
        <trans-unit id="3594c70c212410200cff937ed0dc1d8804fee77c" translate="yes" xml:space="preserve">
          <source>Some virtual table implementations (ex: &lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;, &lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt;, and &lt;a href=&quot;rtree&quot;&gt;RTREE&lt;/a&gt;) make use of real (non-virtual) database tables to store content. For example, when content is inserted into the FTS3 virtual table, the data is ultimately stored in real tables named &quot;%_content&quot;, &quot;%_segdir&quot;, &quot;%_segments&quot;, &quot;%_stat&quot;, and &quot;%_docsize&quot; where &quot;%&quot; is the name of the original virtual table. This auxiliary real tables that store content for a virtual table are called &quot;shadow tables&quot;. See (&lt;a href=&quot;fts3#*shadowtab&quot;&gt;1&lt;/a&gt;), (&lt;a href=&quot;fts5#appendix_b&quot;&gt;2&lt;/a&gt;), and (&lt;a href=&quot;rtree#xshadow&quot;&gt;3&lt;/a&gt;) for additional information.</source>
          <target state="translated">一部の仮想テーブルの実装（例：&lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;、&lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt;、および&lt;a href=&quot;rtree&quot;&gt;RTREE&lt;/a&gt;）は、コンテンツを格納するために実際の（非仮想）データベーステーブルを利用します。たとえば、コンテンツがFTS3仮想テーブルに挿入されると、データは最終的に「％_content」、「％_ segdir」、「％_ segments」、「％_ stat」、「％_ docsize」という名前の実際のテーブルに保存されます。 &quot;は、元の仮想テーブルの名前です。仮想テーブルのコンテンツを格納するこの補助的な実テーブルは、「シャドウテーブル」と呼ばれます。詳細については、（&lt;a href=&quot;fts3#*shadowtab&quot;&gt;1&lt;/a&gt;）、（&lt;a href=&quot;fts5#appendix_b&quot;&gt;2&lt;/a&gt;）、（&lt;a href=&quot;rtree#xshadow&quot;&gt;3&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="ac3c1999dd15ec935e4c05fd2cbb35a8f0236c55" translate="yes" xml:space="preserve">
          <source>Some virtual table implementations may INSERT rows into rowid tables as part of committing a transaction (e.g. to flush data accumulated in memory to disk). In this case subsequent calls to this function return the rowid associated with these internal INSERT operations, which leads to unintuitive results. Virtual table implementations that do write to rowid tables in this way can avoid this problem by restoring the original rowid value using &lt;a href=&quot;#sqlite3_set_last_insert_rowid&quot;&gt;sqlite3_set_last_insert_rowid()&lt;/a&gt; before returning control to the user.</source>
          <target state="translated">一部の仮想テーブルの実装では、トランザクションのコミットの一部として行をROWIDテーブルに挿入する場合があります（たとえば、メモリに蓄積されたデータをディスクにフラッシュするため）。この場合、この関数を次に呼び出すと、これらの内部INSERT操作に関連付けられたROWIDが返されるため、直感に反する結果になります。この方法でROWIDテーブルに書き込む仮想テーブルの実装では、ユーザーに制御を返す前に&lt;a href=&quot;#sqlite3_set_last_insert_rowid&quot;&gt;sqlite3_set_last_insert_rowid（）&lt;/a&gt;を使用して元のROWID値を復元することにより、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="bf0309e04b01e09dca18924e050475fbb9284235" translate="yes" xml:space="preserve">
          <source>Some virtual table implementations may INSERT rows into rowid tables as part of committing a transaction (e.g. to flush data accumulated in memory to disk). In this case subsequent calls to this function return the rowid associated with these internal INSERT operations, which leads to unintuitive results. Virtual table implementations that do write to rowid tables in this way can avoid this problem by restoring the original rowid value using &lt;a href=&quot;set_last_insert_rowid&quot;&gt;sqlite3_set_last_insert_rowid()&lt;/a&gt; before returning control to the user.</source>
          <target state="translated">一部の仮想テーブルの実装では、トランザクションのコミットの一部として行をROWIDテーブルに挿入する場合があります（たとえば、メモリに蓄積されたデータをディスクにフラッシュするため）。この場合、この関数を次に呼び出すと、これらの内部INSERT操作に関連付けられたROWIDが返されるため、直感に反する結果になります。この方法でROWIDテーブルに書き込む仮想テーブルの実装では、ユーザーに制御を返す前に&lt;a href=&quot;set_last_insert_rowid&quot;&gt;sqlite3_set_last_insert_rowid（）&lt;/a&gt;を使用して元のROWID値を復元することにより、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="37863aa03861c512ad1c77afb4b6689cfad7493b" translate="yes" xml:space="preserve">
          <source>Some virtual tables exist automatically in the &quot;main&quot; schema of every database connection in which their module is registered, even without a &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement. Such virtual tables are called &quot;eponymous virtual tables&quot;. To use an eponymous virtual table, simply use the module name as if it were a table. Eponymous virtual tables exist in the &quot;main&quot; schema only, so they will not work if prefixed with a different schema name.</source>
          <target state="translated">一部の仮想テーブルは、&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;ステートメントがなくても、モジュールが登録されているすべてのデータベース接続の「メイン」スキーマに自動的に存在します。このような仮想テーブルは「匿名仮想テーブル」と呼ばれます。代名詞の仮想テーブルを使用するには、モジュール名をテーブルのように使用するだけです。匿名の仮想テーブルは「メイン」スキーマにのみ存在するため、異なるスキーマ名をプレフィックスとして使用すると機能しません。</target>
        </trans-unit>
        <trans-unit id="0235dde661a1106f01332ba53a569381817a7286" translate="yes" xml:space="preserve">
          <source>Someone (or some process) might rename the database file but fail to also rename its associated journal.</source>
          <target state="translated">誰か(またはいくつかのプロセス)がデータベースファイルの名前を変更しても、関連するジャーナルの名前を変更できない場合があります。</target>
        </trans-unit>
        <trans-unit id="4532d3d7be4feca574a6f6430b43e863945ec230" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;b&gt;sqlite_exec()&lt;/b&gt; would return SQLITE_PROTOCOL when it should have returned SQLITE_BUSY.</source>
          <target state="translated">場合によっては、&lt;b&gt;sqlite_exec（）&lt;/b&gt;がSQLITE_BUSYを返すべきであるときにSQLITE_PROTOCOLを返すことがありました。</target>
        </trans-unit>
        <trans-unit id="dc0c06ae51aa05a33354304329c9c25f09e5959c" translate="yes" xml:space="preserve">
          <source>Sometimes SQLite uses compile-time evaluatable assert() statements. Consider the code at &lt;a href=&quot;https://sqlite.org/src/artifact/c1e97e4c6f?ln=2130-2138&quot;&gt;https://sqlite.org/src/artifact/c1e97e4c6f?ln=2130-2138&lt;/a&gt;. Four assert() statements verify the values for compile-time constants so that the reader can quickly check the validity of the if-statement that follows, without having to look up the constant values in a separate header file.</source>
          <target state="translated">SQLiteは、コンパイル時に評価可能なassert（）ステートメントを使用する場合があります。&lt;a href=&quot;https://sqlite.org/src/artifact/c1e97e4c6f?ln=2130-2138&quot;&gt;https://sqlite.org/src/artifact/c1e97e4c6f?ln=2130-2138&lt;/a&gt;のコードを検討してください。4つのassert（）ステートメントはコンパイル時の定数の値を検証するため、別のヘッダーファイルで定数値を調べる必要なく、後続のifステートメントの有効性をすばやく確認できます。</target>
        </trans-unit>
        <trans-unit id="e72dc8159e740969eabd99a1be0aa498a87e7c0f" translate="yes" xml:space="preserve">
          <source>Sometimes a LEFT JOIN can be completely omitted from a query without changing the result. This can happen if all of the following are true:</source>
          <target state="translated">LEFT JOINが結果を変更することなく、クエリから完全に省略されることがあります。これは、以下のすべてが真である場合に起こりえます。</target>
        </trans-unit>
        <trans-unit id="3f8fa5c7b1abe4111bb41632dd1fff37e6c00e99" translate="yes" xml:space="preserve">
          <source>Sometimes a LEFT JOIN can be converted into an ordinary JOIN, if there are terms in the WHERE clause that guarantee that the two joins will give identical results. In particular, if any column in the right-hand table of the LEFT JOIN must be non-NULL in order for the WHERE clause to be true, then the LEFT JOIN is demoted to an ordinary JOIN.</source>
          <target state="translated">WHERE句の中に、二つのJOINが同じ結果をもたらすことを保証する条件がある場合、LEFT JOINが通常のJOINに変換されることがあります。特に、WHERE句が真であるためにLEFT JOINの右手のテーブルの列がNULL以外でなければならない場合、LEFT JOINは通常のJOINに降格します。</target>
        </trans-unit>
        <trans-unit id="f090235439a288798f47de0b5a65b1ea028dc3f6" translate="yes" xml:space="preserve">
          <source>Sometimes a power failure will cause a filesystem to be corrupted such that recently changed filenames are forgotten and the file is moved into a &quot;/lost+found&quot; directory. When that happens, the hot journal will not be found and recovery will not occur. SQLite tries to prevent this by opening and syncing the directory containing the rollback journal at the same time it syncs the journal file itself. However, the movement of files into /lost+found can be caused by unrelated processes creating unrelated files in the same directory as the main database file. And since this is out from under the control of SQLite, there is nothing that SQLite can do to prevent it. If you are running on a system that is vulnerable to this kind of filesystem namespace corruption (most modern journalling filesystems are immune, we believe) then you might want to consider putting each SQLite database file in its own private subdirectory.</source>
          <target state="translated">停電により、最近変更されたファイル名が忘れ去られ、ファイルが「/lost+found」ディレクトリに移動するようなファイルシステムの破損が発生することがあります。そのような場合、ホットジャーナルが見つからず、リカバリが発生しません。SQLiteは、ジャーナルファイル自体を同期すると同時に、ロールバックジャーナルを含むディレクトリを開いて同期することで、これを防ごうとします。しかし、/lost+foundへのファイルの移動は、メインのデータベースファイルと同じディレクトリに無関係なプロセスが無関係なファイルを作成することで発生する可能性があります。そして、これはSQLiteの制御下から外に出ているため、SQLiteがこれを防ぐためにできることは何もありません。もしあなたがこの種のファイルシステムの名前空間の破損に対して脆弱なシステム上で実行しているのであれば (最新のジャーナルファイルシステムのほとんどは免疫があると私たちは信じています)、それぞれの SQLite データベースファイルをそれぞれのプライベートサブディレクトリに置くことを検討してみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="3f9f858786d7c98364aee861ef2804edc03f7313" translate="yes" xml:space="preserve">
          <source>Sometimes applications encounter this error even though there is an abundance of primary disk space because the error occurs when writing into &lt;a href=&quot;tempfiles&quot;&gt;temporary disk files&lt;/a&gt; on a system where temporary files are stored on a separate partition with much less space that the primary disk.</source>
          <target state="translated">一時ファイルがプライマリディスクよりもはるかに少ないスペースの別のパーティションに格納されているシステムで一時&lt;a href=&quot;tempfiles&quot;&gt;ディスクファイル&lt;/a&gt;に書き込むときにエラーが発生するため、プライマリディスクスペースが豊富であっても、アプリケーションでこのエラーが発生することがあります。</target>
        </trans-unit>
        <trans-unit id="fff8b7e3376a922064133232ffd6552acd46f238" translate="yes" xml:space="preserve">
          <source>Sometimes compile-time assert() statements are used to verify that SQLite has been correctly compiled. For example, the code at &lt;a href=&quot;https://sqlite.org/src/artifact/c1e97e4c6f?ln=157&quot;&gt;https://sqlite.org/src/artifact/c1e97e4c6f?ln=157&lt;/a&gt; verifies that the SQLITE_PTRSIZE preprocessor macro is set correctly for the target architecture.</source>
          <target state="translated">SQLiteが正しくコンパイルされたことを確認するために、コンパイル時のassert（）ステートメントが使用されることがあります。たとえば、&lt;a href=&quot;https://sqlite.org/src/artifact/c1e97e4c6f?ln=157&quot;&gt;https：&lt;/a&gt; //sqlite.org/src/artifact/c1e97e4c6f？ln = 157 のコードは、SQLITE_PTRSIZEプリプロセッサマクロがターゲットアーキテクチャに対して正しく設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="d7e0873ee1e2576915056da7a06e2b494b2dd17f" translate="yes" xml:space="preserve">
          <source>Sometimes only part of an ORDER BY clause can be satisfied using indexes. Consider, for example, the following query:</source>
          <target state="translated">インデックスを使用して、ORDER BY句の一部だけを満たすことができることがあります。例えば、次のようなクエリを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="08e9765fc44bda2fdb0012e4541cc28a30458938" translate="yes" xml:space="preserve">
          <source>Sometimes operating systems will exhibit non-standard behavior which can lead to problems. Sometimes this non-standard behavior is deliberate, and sometimes it is a mistake in the implementation. But in any event, if the operating performs differently from they way SQLite expects it to perform, the possibility of database corruption exists.</source>
          <target state="translated">オペレーティングシステムは、問題を引き起こす可能性のある非標準的な動作を示すことがあります。この非標準的な動作は意図的なものであることもあれば、実装上のミスであることもあります。しかし、どのような場合でも、動作がSQLiteが期待する動作と異なる場合、データベースが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="60f1e4ae24175645a79034bd7c885a1e7d0f09d3" translate="yes" xml:space="preserve">
          <source>Sometimes the use of row values just makes the SQL easier to read and write. Consider the following two UPDATE statements:</source>
          <target state="translated">行の値を使用することで、SQLの読み書きが簡単になることがあります。次の2つのUPDATE文を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="24e2bab9e04a22b3a6d58f84b00743d3fb69e859" translate="yes" xml:space="preserve">
          <source>Sometimes when this error code is encountered, the &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; routine will convert the error into &lt;a href=&quot;rescode#error_retry&quot;&gt;SQLITE_ERROR_RETRY&lt;/a&gt; and try again to prepare the SQL statement using a different query plan that does not require the use of the unknown collating sequence.</source>
          <target state="translated">このエラーコードが発生すると、&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;ルーチンがエラーを&lt;a href=&quot;rescode#error_retry&quot;&gt;SQLITE_ERROR_RETRYに&lt;/a&gt;変換し、不明な照合シーケンスを使用する必要のない別のクエリプランを使用してSQLステートメントの準備を再試行します。</target>
        </trans-unit>
        <trans-unit id="adc4e96a478be02a8147b100bd68113f38b89f80" translate="yes" xml:space="preserve">
          <source>Sort</source>
          <target state="translated">Sort</target>
        </trans-unit>
        <trans-unit id="5601af90fba7fe38466b58c08c018711849b8855" translate="yes" xml:space="preserve">
          <source>Sort order</source>
          <target state="translated">ソート順</target>
        </trans-unit>
        <trans-unit id="74ab25d1e3d8ae1cb528685baf2d71b92460809e" translate="yes" xml:space="preserve">
          <source>SorterCompare</source>
          <target state="translated">SorterCompare</target>
        </trans-unit>
        <trans-unit id="e274ec5d63c6eab4a322b40fa92da953e269dcf5" translate="yes" xml:space="preserve">
          <source>SorterData</source>
          <target state="translated">SorterData</target>
        </trans-unit>
        <trans-unit id="84dc5b8de2832faa332b637acd50721fb4db3efe" translate="yes" xml:space="preserve">
          <source>SorterInsert</source>
          <target state="translated">SorterInsert</target>
        </trans-unit>
        <trans-unit id="2737748d72de05dcf6eba2817820522a4badd0ec" translate="yes" xml:space="preserve">
          <source>SorterNext</source>
          <target state="translated">SorterNext</target>
        </trans-unit>
        <trans-unit id="efe2a2f235ed328025a0db49a289c00d154bb3ba" translate="yes" xml:space="preserve">
          <source>SorterOpen</source>
          <target state="translated">SorterOpen</target>
        </trans-unit>
        <trans-unit id="58a2d7ee050bba205b0d21e366ed8ecfcceedf59" translate="yes" xml:space="preserve">
          <source>SorterSort</source>
          <target state="translated">SorterSort</target>
        </trans-unit>
        <trans-unit id="7dadfa55de2cffb43bdf1a8f139a4a743a9af71b" translate="yes" xml:space="preserve">
          <source>Sorting is accomplished by writing records into a sorting index, then rewinding that index and playing it back from beginning to end. We use the &lt;a href=&quot;opcode#Sort&quot;&gt;Sort&lt;/a&gt; opcode instead of &lt;a href=&quot;opcode#Rewind&quot;&gt;Rewind&lt;/a&gt; to do the rewinding so that the global variable will be incremented and regression tests can determine whether or not the optimizer is correctly optimizing out sorts.</source>
          <target state="translated">ソートは、レコードをソートインデックスに書き込み、そのインデックスを巻き戻し、最初から最後まで再生することによって行われます。&lt;a href=&quot;opcode#Rewind&quot;&gt;Rewind&lt;/a&gt;ではなく&lt;a href=&quot;opcode#Sort&quot;&gt;Sort&lt;/a&gt;オペコードを使用して巻き戻しを行うため、グローバル変数がインクリメントされ、オプティマイザがソートを正しく最適化しているかどうかを回帰テストで判別できます。</target>
        </trans-unit>
        <trans-unit id="94c08b606385251adc6f9a4723f760124243a4d3" translate="yes" xml:space="preserve">
          <source>Sorting subsets of the result</source>
          <target state="translated">結果のサブセットのソート</target>
        </trans-unit>
        <trans-unit id="516e89309d994acf5d94c4a4907b3ff4a8e53a80" translate="yes" xml:space="preserve">
          <source>Source Of Data In A Query Result</source>
          <target state="translated">クエリ結果のデータソース</target>
        </trans-unit>
        <trans-unit id="cfbc658da4e64bd6eef7ec70eab5adab3d14a41a" translate="yes" xml:space="preserve">
          <source>Source code for several useful extensions can be found in the &lt;a href=&quot;http://www.sqlite.org/src/tree?name=ext/misc&amp;amp;ci=trunk&quot;&gt;ext/misc&lt;/a&gt; subdirectory of the SQLite source tree. You can use these extensions as-is, or as a basis for creating your own custom extensions to address your own particular needs.</source>
          <target state="translated">いくつかの便利な拡張機能のソースコードは、SQLiteソースツリーの&lt;a href=&quot;http://www.sqlite.org/src/tree?name=ext/misc&amp;amp;ci=trunk&quot;&gt;ext / misc&lt;/a&gt;サブディレクトリにあります。これらの拡張機能をそのまま使用することも、独自のカスタム拡張機能を作成して特定のニーズに対応するための基礎として使用することもできます。</target>
        </trans-unit>
        <trans-unit id="64243b8fe27d8786b74ebe9ad360b0c831315629" translate="yes" xml:space="preserve">
          <source>Sources are in the &lt;a href=&quot;https://sqlite.org/copyright.html&quot;&gt;public domain&lt;/a&gt;. Use for any purpose.</source>
          <target state="translated">ソースは&lt;a href=&quot;https://sqlite.org/copyright.html&quot;&gt;パブリックドメインにあります&lt;/a&gt;。どんな目的にも使用できます。</target>
        </trans-unit>
        <trans-unit id="bdb7e396773f80244c6756a8ac8a3ba107260e6f" translate="yes" xml:space="preserve">
          <source>Spatial indices using &lt;a href=&quot;rtree&quot;&gt;R-Trees&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;rtree&quot;&gt;Rツリー&lt;/a&gt;を使用した空間インデックス</target>
        </trans-unit>
        <trans-unit id="7f329318e826b6123bdadb48df921310c8b500b7" translate="yes" xml:space="preserve">
          <source>Speak no useless words or words that move to laughter.</source>
          <target state="translated">笑いに移るような無駄な言葉や言葉を口にしないこと。</target>
        </trans-unit>
        <trans-unit id="9cda32c171792b8ebd4697561ad451beebb8dd76" translate="yes" xml:space="preserve">
          <source>Special INSERT operates can be used to issue commands to FTS3 and FTS4 tables. Every FTS3 and FTS4 has a hidden, read-only column which is the same name as the table itself. INSERTs into this hidden column are interpreted as commands to the FTS3/4 table. For a table with the name &quot;xyz&quot; the following commands are supported:</source>
          <target state="translated">特別なINSERT操作を使用して、FTS3およびFTS4テーブルにコマンドを発行することができます。すべてのFTS3およびFTS4には、テーブル自体と同じ名前の、隠された読み取り専用の列があります。この隠された列へのINSERTは、FTS3/4テーブルへのコマンドとして解釈されます。名前が &quot;xyz&quot; のテーブルでは、以下のコマンドがサポートされています。</target>
        </trans-unit>
        <trans-unit id="5c62a06b3206449dc4ac80333e6db0c204db7ba5" translate="yes" xml:space="preserve">
          <source>Special processing occurs when the aggregate function is either &lt;a href=&quot;lang_aggfunc#maxggunc&quot;&gt;min()&lt;/a&gt; or &lt;a href=&quot;lang_aggfunc#minggunc&quot;&gt;max()&lt;/a&gt;. Example:</source>
          <target state="translated">集計関数が&lt;a href=&quot;lang_aggfunc#maxggunc&quot;&gt;min（）&lt;/a&gt;または&lt;a href=&quot;lang_aggfunc#minggunc&quot;&gt;max（）の&lt;/a&gt;場合、特別な処理が発生します。例：</target>
        </trans-unit>
        <trans-unit id="6937900c4a39aa0fb125a152dfd5d62be4f8822d" translate="yes" xml:space="preserve">
          <source>Special sqlite_stat1 Handling</source>
          <target state="translated">sqlite_stat1の特殊な処理</target>
        </trans-unit>
        <trans-unit id="1e4c6816e6235fac1910f655a4449098f3bab054" translate="yes" xml:space="preserve">
          <source>Special versions of the SQLite amalgamation that do work with a predetermined set of SQLITE_OMIT_* options can be generated. To do so, make a copy of the Makefile.linux-gcc makefile template in the canonical source code distribution. Change the name of your copy to simply &quot;Makefile&quot;. Then edit &quot;Makefile&quot; to set up appropriate compile-time options. Then type:</source>
          <target state="translated">SQLITE_OMIT_*オプションのセットで動作する SQLite アマルガムの特別バージョンを生成することができます。そのためには、正規のソースコード配布物にある Makefile.linux-gcc makefile テンプレートのコピーを作成してください。コピーの名前を単に &quot;Makefile&quot; に変更してください。それから &quot;Makefile&quot; を編集して、適切なコンパイル時オプションを設定してください。それから次のようにタイプしてください。</target>
        </trans-unit>
        <trans-unit id="348842ed415067bf469c3c07cbca8231199b183f" translate="yes" xml:space="preserve">
          <source>Specialized applications for which the default implementation of shared memory is unacceptable can devise alternative methods via a custom &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;. For example, if it is known that a particular database will only be accessed by threads within a single process, the wal-index can be implemented using heap memory instead of true shared memory.</source>
          <target state="translated">共有メモリのデフォルト実装が受け入れられない特殊なアプリケーションは、カスタム&lt;a href=&quot;vfs&quot;&gt;VFSを&lt;/a&gt;介して代替方法を考案できます。たとえば、特定のデータベースが単一のプロセス内のスレッドによってのみアクセスされることがわかっている場合、wal-indexは、実際の共有メモリではなくヒープメモリを使用して実装できます。</target>
        </trans-unit>
        <trans-unit id="a647b0621c3756491eb85db442ab54ae4811cd09" translate="yes" xml:space="preserve">
          <source>Specific pragma statements may be removed and others added in future releases of SQLite. There is no guarantee of backwards compatibility.</source>
          <target state="translated">特定のpragma文はSQLiteの将来のリリースで削除されたり、他の文が追加されたりするかもしれません。後方互換性を保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="32a894085a5589da14805f40b5e5ec42d34bdb30" translate="yes" xml:space="preserve">
          <source>Specify an alternative malloc implementation using the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOC&lt;/a&gt; verb with the &lt;a href=&quot;c3ref/mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;c3ref/mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;オブジェクトで&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOC&lt;/a&gt;動詞を使用して、代替のmalloc実装を指定します。</target>
        </trans-unit>
        <trans-unit id="7969816e7b05b7f6c6da58d9c3d55a797859dc5f" translate="yes" xml:space="preserve">
          <source>Specify an alternative mutex implementation using the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; verb with the &lt;a href=&quot;c3ref/mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt;動詞と&lt;a href=&quot;c3ref/mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;オブジェクトを使用して、代替のmutex実装を指定します。</target>
        </trans-unit>
        <trans-unit id="e7d9e8c303af8fa2eba928e74e37e3e2d5b8ccc2" translate="yes" xml:space="preserve">
          <source>Specify an application-defined page cache.</source>
          <target state="translated">アプリケーション定義のページキャッシュを指定します。</target>
        </trans-unit>
        <trans-unit id="675036f344331d67d2ac3929e1284013b1817b31" translate="yes" xml:space="preserve">
          <source>Specifying a new page size does not change the page size immediately. Instead, the new page size is remembered and is used to set the page size when the database is first created, if it does not already exist when the page_size pragma is issued, or at the next &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command that is run on the same database connection while not in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;.</source>
          <target state="translated">新しいページサイズを指定しても、ページサイズはすぐには変更されません。代わりに、新しいページサイズが記憶され、データベースが最初に作成されたときにページサイズを設定するために使用されます（page_sizeプラグマが発行されたとき、または同じデータベース接続で実行される次の&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;コマンドでまだ存在しない場合）。&lt;a href=&quot;wal&quot;&gt;WALモードで&lt;/a&gt;ないとき。</target>
        </trans-unit>
        <trans-unit id="dfdc7dcd44b7642ef54261a530f0a8d271e92800" translate="yes" xml:space="preserve">
          <source>Specifying an explicit value for the rowid field as part of an INSERT statement is not supported. Any value supplied is ignored.</source>
          <target state="translated">INSERT 文の一部として rowid フィールドに明示的な値を指定することはサポートされていません。指定された値は無視されます。</target>
        </trans-unit>
        <trans-unit id="ff83e10cd15a3b1a3684d12025d600161e1e03fe" translate="yes" xml:space="preserve">
          <source>Specifying an unknown parameter in the query component of a URI is not an error. Future versions of SQLite might understand additional query parameters. See &quot;&lt;a href=&quot;../uri#coreqp&quot;&gt;query parameters with special meaning to SQLite&lt;/a&gt;&quot; for additional information.</source>
          <target state="translated">URIのクエリコンポーネントで不明なパラメーターを指定してもエラーにはなりません。SQLiteの将来のバージョンでは、追加のクエリパラメータが認識される可能性があります。詳細については、「&lt;a href=&quot;../uri#coreqp&quot;&gt;SQLite&lt;/a&gt;にとって特別な意味を持つクエリパラメータ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="ca08c5f93bc177c41e9e1cbac8bb1b05f691f402" translate="yes" xml:space="preserve">
          <source>Specifying an unknown parameter in the query component of a URI is not an error. Future versions of SQLite might understand additional query parameters. See &quot;&lt;a href=&quot;uri#coreqp&quot;&gt;query parameters with special meaning to SQLite&lt;/a&gt;&quot; for additional information.</source>
          <target state="translated">URIのクエリコンポーネントで不明なパラメーターを指定してもエラーにはなりません。SQLiteの将来のバージョンでは、追加のクエリパラメータが認識される可能性があります。詳細については、「&lt;a href=&quot;uri#coreqp&quot;&gt;SQLite&lt;/a&gt;にとって特別な意味を持つクエリパラメータ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5466deac546a32beeffc729c74a6e5fd300f895" translate="yes" xml:space="preserve">
          <source>Specifying three arguments when creating an fts5vocab table in any database other than &quot;temp&quot; results in an error.</source>
          <target state="translated">temp &quot;以外のデータベースにfts5vocabテーブルを作成する際に3つの引数を指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="076b62c1c3d09beab9691ee6f442faa2e62ef7a7" translate="yes" xml:space="preserve">
          <source>Speed improvements</source>
          <target state="translated">スピードの向上</target>
        </trans-unit>
        <trans-unit id="65d5a13bd4511e6816f18d10b6fcf53288c30d62" translate="yes" xml:space="preserve">
          <source>Speed improvements and library footprint reductions.</source>
          <target state="translated">スピード向上と図書館のフットプリント削減</target>
        </trans-unit>
        <trans-unit id="886fdbf5bb356c1170f6be819f95ecf4cc1461e3" translate="yes" xml:space="preserve">
          <source>Speed improvements in the VDBE.</source>
          <target state="translated">VDBEの速度向上。</target>
        </trans-unit>
        <trans-unit id="67d42db811b80e228f8d1a0a01dc2cacac3b1009" translate="yes" xml:space="preserve">
          <source>Speed improvements in the btree and pager layers.</source>
          <target state="translated">btree およびページャーレイヤーの速度向上。</target>
        </trans-unit>
        <trans-unit id="0da1385bd95c04e2cef432911cc39014873cc087" translate="yes" xml:space="preserve">
          <source>Speed improvements: Do not do synchronous updates on TEMP tables.</source>
          <target state="translated">速度の改善。TEMPテーブルの同期更新を行わないようにしました。</target>
        </trans-unit>
        <trans-unit id="77d342a78b198923e433b8a1315c81a6ffbf9833" translate="yes" xml:space="preserve">
          <source>Split amalgamation</source>
          <target state="translated">分割アマルガム</target>
        </trans-unit>
        <trans-unit id="1dac9d1634f1fa754c9cb08212550ad68bf6b1f7" translate="yes" xml:space="preserve">
          <source>Split the pager subsystem into separate pager and pcache subsystems.</source>
          <target state="translated">ページャーサブシステムをページャーサブシステムとpcacheサブシステムに分割します。</target>
        </trans-unit>
        <trans-unit id="1bb46447f9362d79f903651b48710b55ec51dd8a" translate="yes" xml:space="preserve">
          <source>Splitting content into smaller pieces also helps File/Save operations to go faster. Instead of having to write back the content of all pages when doing a File/Save, the application only has to write back those pages that have actually changed.</source>
          <target state="translated">コンテンツをより小さな断片に分割することは、ファイル/保存操作の高速化にも役立ちます。ファイル/保存を行う際に、すべてのページの内容を書き戻す必要がない代わりに、アプリケーションは実際に変更されたページのみを書き戻す必要があります。</target>
        </trans-unit>
        <trans-unit id="f0b1c55ba41f5df4c296b1603dd8662a874ad05f" translate="yes" xml:space="preserve">
          <source>SqlExec</source>
          <target state="translated">SqlExec</target>
        </trans-unit>
        <trans-unit id="21ba7365f757b4f24cbf08b5870a91de5cd965d8" translate="yes" xml:space="preserve">
          <source>Sqldiff --rbu</source>
          <target state="translated">Sqldiff --rbu</target>
        </trans-unit>
        <trans-unit id="785ca9526809c90e3417966be7d5844fd2a0c5c8" translate="yes" xml:space="preserve">
          <source>Stability</source>
          <target state="translated">Stability</target>
        </trans-unit>
        <trans-unit id="d96e5b2dd07c1733b2b013bd82922c22baade37d" translate="yes" xml:space="preserve">
          <source>Stable</source>
          <target state="translated">Stable</target>
        </trans-unit>
        <trans-unit id="ed9cb8071fd38e38b556df67e342f21ef7bd62db" translate="yes" xml:space="preserve">
          <source>Stable interfaces will be maintained indefinitely in a backwards compatible way. An application that uses only stable interfaces should always be able to relink against a newer version of SQLite without any changes.</source>
          <target state="translated">安定したインターフェイスは、後方互換性のある方法で無期限に維持されます。安定したインターフェイスのみを使用しているアプリケーションは、常に新しいバージョンの SQLite に変更を加えることなく再リンクできるようになっていなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d69ca23f60003536eb90ef7c1a45510967cd2a5" translate="yes" xml:space="preserve">
          <source>Stale file descriptor</source>
          <target state="translated">古いファイル記述子</target>
        </trans-unit>
        <trans-unit id="aaf4ee63c814f2ac7a90ca00e168f99ba47070e5" translate="yes" xml:space="preserve">
          <source>Standard File Control Opcodes</source>
          <target state="translated">標準ファイル制御オペコード</target>
        </trans-unit>
        <trans-unit id="0271f691eaa2014cfdc1f8a7ed1187c67c1f03ee" translate="yes" xml:space="preserve">
          <source>Standard Query Syntax Precedence</source>
          <target state="translated">標準クエリ構文の優先順位</target>
        </trans-unit>
        <trans-unit id="62af2c2f7d7a242deb88ffff88441215850f0cf0" translate="yes" xml:space="preserve">
          <source>Standard builds include the default &quot;unix&quot; or &quot;win32&quot; VFSes. But if you use the -DOS_OTHER=1 compile-time option, then SQLite is built without a default VFS. In that case, the application must register at least one VFS prior to calling &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open()&lt;/a&gt;. This is the approach that embedded applications should use. Rather than modifying the SQLite source to insert an alternative OS layer as was done in prior releases of SQLite, instead compile an unmodified SQLite source file (preferably the amalgamation) with the -DOS_OTHER=1 option, then invoke &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register()&lt;/a&gt; to define the interface to the underlying filesystem prior to creating any database connections.</source>
          <target state="translated">標準ビルドには、デフォルトの「unix」または「win32」VFSが含まれています。ただし、-DOS_OTHER = 1コンパイル時オプションを使用すると、SQLiteはデフォルトのVFSなしでビルドされます。その場合、アプリケーションは&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open（）&lt;/a&gt;を呼び出す前に少なくとも1つのVFSを登録する必要があります。これは、組み込みアプリケーションが使用するアプローチです。以前のリリースのSQLiteで行われたようにSQLiteソースを変更して代替OSレイヤーを挿入するのではなく、変更されていないSQLiteソースファイル（できれば融合）を-DOS_OTHER = 1オプションでコンパイルしてから、&lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register（）&lt;/a&gt;を呼び出してインターフェースを定義します。データベース接続を作成する前に、基礎となるファイルシステムに。</target>
        </trans-unit>
        <trans-unit id="f4bb77fea34e91bf036ddd54845284d1cf9ef7e7" translate="yes" xml:space="preserve">
          <source>Standard builds of SQLite for Unix or Windows come with a single VFS named &quot;unix&quot; or &quot;win32&quot;, as appropriate. This one VFS is also the default. So if you are using the legacy open functions, everything will continue to operate as it has before. The change is that an application now has the flexibility of adding new VFS modules to implement a customized OS layer. The &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register()&lt;/a&gt; API can be used to tell SQLite about one or more application-defined VFS modules:</source>
          <target state="translated">SQLite for UnixまたはWindowsの標準ビルドには、必要に応じて「unix」または「win32」という名前の単一のVFSが付属しています。この1つのVFSもデフォルトです。したがって、レガシーオープン関数を使用している場合、すべてが以前と同じように動作し続けます。変更点は、アプリケーションに新しいVFSモジュールを追加して、カスタマイズされたOSレイヤーを実装する柔軟性があることです。&lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register（）&lt;/a&gt; APIは、一つ以上のアプリケーションで定義されたVFSモジュールについてのSQLiteを伝えるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d9cadaed061bc7503c3155b4851296844f6b19b6" translate="yes" xml:space="preserve">
          <source>Start a read transaction on an historical snapshot</source>
          <target state="translated">履歴スナップショットの読み取りトランザクションを開始する</target>
        </trans-unit>
        <trans-unit id="789445bbe2e230b404b0877611cb047ff79a2a8a" translate="yes" xml:space="preserve">
          <source>Start a transaction.</source>
          <target state="translated">取引を開始します。</target>
        </trans-unit>
        <trans-unit id="b65d3b5410040822706753355b83a262ca2b3805" translate="yes" xml:space="preserve">
          <source>Start the &lt;b&gt;sqlite3&lt;/b&gt; program by typing &quot;sqlite3&quot; at the command prompt, optionally followed by the name the file that holds the SQLite database. If the named file does not exist, a new database file with the given name will be created automatically. If no database file is specified on the command-line, a temporary database is created, then deleted when the &quot;sqlite3&quot; program exits.</source>
          <target state="translated">コマンドプロンプトで「sqlite3」と入力し、オプションでSQLiteデータベースを保持するファイルの名前を入力して、&lt;b&gt;sqlite3&lt;/b&gt;プログラムを起動します。指定したファイルが存在しない場合は、指定した名前の新しいデータベースファイルが自動的に作成されます。コマンドラインでデータベースファイルが指定されていない場合、一時データベースが作成され、「sqlite3」プログラムの終了時に削除されます。</target>
        </trans-unit>
        <trans-unit id="9eb60319509fec567263f40a7e8bf18c02dfd219" translate="yes" xml:space="preserve">
          <source>Starting with &lt;a href=&quot;https://sqlite.org/releaselog/3_3_0.html&quot;&gt;version 3.3.0&lt;/a&gt; (2006-01-11), SQLite includes a special &quot;shared-cache&quot; mode (disabled by default) intended for use in embedded servers. If shared-cache mode is enabled and a thread establishes multiple connections to the same database, the connections share a single data and schema cache. This can significantly reduce the quantity of memory and IO required by the system.</source>
          <target state="translated">以降では&lt;a href=&quot;https://sqlite.org/releaselog/3_3_0.html&quot;&gt;、バージョン3.3.0&lt;/a&gt;（2006-01-11）、SQLiteは（デフォルトでは無効）特殊な「共有キャッシュ」モードが埋め込まれたサーバでの使用を意図しています。共有キャッシュモードが有効で、スレッドが同じデータベースへの複数の接続を確立する場合、接続は単一のデータおよびスキーマキャッシュを共有します。これにより、システムに必要なメモリとIOの量を大幅に削減できます。</target>
        </trans-unit>
        <trans-unit id="023a31bfb8ddab03b504852064e49a20e7d9d830" translate="yes" xml:space="preserve">
          <source>Startup time is reduced by allowing the application to read in only the content shown for the initial screen. This largely eliminates the need to show a progress bar when opening a new document. The document just pops up immediately, further enhancing the user experience.</source>
          <target state="translated">最初の画面に表示されている内容だけをアプリケーションに読み込ませることで、起動時間が短縮されます。これにより、新しい文書を開くときにプログレスバーを表示する必要が大幅になくなりました。ドキュメントはすぐにポップアップ表示されるので、ユーザーエクスペリエンスがさらに向上します。</target>
        </trans-unit>
        <trans-unit id="ec7c6f024748b0b4ca685edf7c9c36a22ff2bd48" translate="yes" xml:space="preserve">
          <source>Statement Rollback</source>
          <target state="translated">ステートメントロールバック</target>
        </trans-unit>
        <trans-unit id="b1c7b81be5c9efcc042ff8389d0cd187913125cb" translate="yes" xml:space="preserve">
          <source>Statement Transactions</source>
          <target state="translated">ステートメント取引</target>
        </trans-unit>
        <trans-unit id="a90f613a0e148cacdfc6a3c9d8b61b95e2acb93e" translate="yes" xml:space="preserve">
          <source>Statement journal</source>
          <target state="translated">ステートメントジャーナル</target>
        </trans-unit>
        <trans-unit id="eb1040e934c3b0c196798a9d1961f27355d86e45" translate="yes" xml:space="preserve">
          <source>Statement journals</source>
          <target state="translated">ステートメントジャーナル</target>
        </trans-unit>
        <trans-unit id="ff8ba443e0e2998259e771cf2ecb0604dd034de1" translate="yes" xml:space="preserve">
          <source>Static analysis has not been helpful in finding bugs in SQLite. Static analysis has found a few bugs in SQLite, but those are the exceptions. More bugs have been introduced into SQLite while trying to get it to compile without warnings than have been found by static analysis.</source>
          <target state="translated">静的解析はSQLiteのバグを見つけるのに役立っていません。静的解析はSQLiteのバグをいくつか発見しましたが、それは例外です。SQLite を警告なしでコンパイルできるようにしようとしている間に、静的解析で見つかったバグよりも多くのバグが SQLite に導入されています。</target>
        </trans-unit>
        <trans-unit id="680999abb1389f8c322acbd6c1aa5dbe84be6521" translate="yes" xml:space="preserve">
          <source>Static analysis means analyzing source code at compile-time to check for correctness. Static analysis includes compiler warning messages and more in-depth analysis engines such as the &lt;a href=&quot;http://clang-analyzer.llvm.org/&quot;&gt;Clang Static Analyzer&lt;/a&gt;. SQLite compiles without warnings on GCC and Clang using the -Wall and -Wextra flags on Linux and Mac and on MSVC on Windows. No valid warnings are generated by the Clang Static Analyzer tool &quot;scan-build&quot; either (though recent versions of clang seem to generate many false-positives.) Nevertheless, some warnings might be generated by other static analyzers. Users are encouraged not to stress over these warnings and to instead take solace in the intense testing of SQLite described above.</source>
          <target state="translated">静的分析とは、コンパイル時にソースコードを分析して、正当性をチェックすることを意味します。静的分析には、コンパイラ警告メッセージと、&lt;a href=&quot;http://clang-analyzer.llvm.org/&quot;&gt;Clang Static Analyzer&lt;/a&gt;などの詳細分析エンジンが含まれます。 SQLiteは、LinuxとMac、およびWindowsのMSVCで-Wallフラグと-Wextraフラグを使用して、GCCとClangで警告なしにコンパイルされます。 Clang Static Analyzerツールの &quot;scan-build&quot;でも有効な警告は生成されません（最近のバージョンのclangは多くの誤検知を生成しているようですが）。ユーザーはこれらの警告を強調しないで、代わりに上記のSQLiteの集中的なテストに安心してください。</target>
        </trans-unit>
        <trans-unit id="5e49731cc0b88e4893c23ef28a83ddda3bfb212a" translate="yes" xml:space="preserve">
          <source>Statistics gathered by ANALYZE are not automatically updated as the content of the database changes. If the content of the database changes significantly, or if the database schema changes, then one should consider rerunning the ANALYZE command in order to update the statistics.</source>
          <target state="translated">ANALYZEによって収集された統計は、データベースの内容が変更されても自動的に更新されません。データベースの内容が大幅に変更されたり、データベースのスキーマが変更されたりした場合は、統計情報を更新するためにANALYZEコマンドを再実行することを検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="06d77b9bb2436857be2774ccf495a6735714ef3f" translate="yes" xml:space="preserve">
          <source>Statistics might not be available for all loops in all statements. In cases where there exist loops with no available statistics, this function behaves as if the loop did not exist - it returns non-zero and leave the variable that pOut points to unchanged.</source>
          <target state="translated">すべてのステートメントのすべてのループで統計情報が利用できない場合があります。統計情報が利用できないループが存在する場合、この関数はループが存在しなかったかのように振る舞います。</target>
        </trans-unit>
        <trans-unit id="bc97dbd639562aa95bfaa677d2f8dc3487a559db" translate="yes" xml:space="preserve">
          <source>Stats pragma</source>
          <target state="translated">統計プラグマ</target>
        </trans-unit>
        <trans-unit id="df542e628beff2a0b73ed1e479f1091511d9cd6a" translate="yes" xml:space="preserve">
          <source>Status Of A Dynamic String</source>
          <target state="translated">動的文字列の状態</target>
        </trans-unit>
        <trans-unit id="6872312ea81433049bd70deac565b5d633fd6998" translate="yes" xml:space="preserve">
          <source>Status Parameters</source>
          <target state="translated">ステータスパラメータ</target>
        </trans-unit>
        <trans-unit id="2adc22e7dbafa333d0e47ced61c20bab368c7387" translate="yes" xml:space="preserve">
          <source>Status Parameters for database connections</source>
          <target state="translated">データベース接続のステータスパラメータ</target>
        </trans-unit>
        <trans-unit id="8499ef2845b7984472eeaa5eec92eef3c3ddc5e1" translate="yes" xml:space="preserve">
          <source>Status Parameters for prepared statements</source>
          <target state="translated">準備されたステートメントのステータスパラメータ</target>
        </trans-unit>
        <trans-unit id="f04daddc4070fdc058ac9e443c8962cff2f5d578" translate="yes" xml:space="preserve">
          <source>Sticky &lt;a href=&quot;rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt; or &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; errors in the pager are reset when a new transaction is started.</source>
          <target state="translated">新しいトランザクションが開始されると、ポケットベルのスティッキー&lt;a href=&quot;rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt;または&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;エラーがリセットされます。</target>
        </trans-unit>
        <trans-unit id="dd4fde80455d82361972cd992928272cdd38d544" translate="yes" xml:space="preserve">
          <source>Storage class</source>
          <target state="translated">ストレージクラス</target>
        </trans-unit>
        <trans-unit id="0adf951cb70d6bfcdd293ee933bb14acec2e8923" translate="yes" xml:space="preserve">
          <source>Storage space for &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;オブジェクトのストレージスペース。</target>
        </trans-unit>
        <trans-unit id="fbf3f676fb55796ce1a966642440eafe303dfddd" translate="yes" xml:space="preserve">
          <source>Storage used for</source>
          <target state="translated">使用しているストレージ</target>
        </trans-unit>
        <trans-unit id="7a5447c3e2de40c5c68aa31375241b98a076167c" translate="yes" xml:space="preserve">
          <source>Store an &lt;a href=&quot;undoredo&quot;&gt;automated undo/redo stack&lt;/a&gt; in a database table so that Undo could go back into prior edit sessions.</source>
          <target state="translated">保管&lt;a href=&quot;undoredo&quot;&gt;アンドゥ/リドゥスタック自動化された&lt;/a&gt;データベーステーブル内の[元に戻すには前編集セッションに戻って行くことができるようにということ。</target>
        </trans-unit>
        <trans-unit id="a49a369d4dc034b2ddab0ef35e3bc0a19be08a8f" translate="yes" xml:space="preserve">
          <source>Store in register P2 an integer which is the key of the table entry that P1 is currently point to.</source>
          <target state="translated">レジスタP2に、P1が現在ポイントしているテーブルエントリのキーである整数を格納します。</target>
        </trans-unit>
        <trans-unit id="867b15696e9fa5010d6dcd54eb51b1ee5a1a7a9e" translate="yes" xml:space="preserve">
          <source>Store in register P3 the value of the P2-th column of the current row of the virtual-table of cursor P1.</source>
          <target state="translated">カーソルP1の仮想テーブルの現在の行のP2列目の値をレジスタP3に格納する。</target>
        </trans-unit>
        <trans-unit id="c36766981b9139e0da225001d40b99095efc88b9" translate="yes" xml:space="preserve">
          <source>Store in register r[P3] the byte offset into the database file that is the start of the payload for the record at which that cursor P1 is currently pointing.</source>
          <target state="translated">レジスタr[P3]に、カーソルP1が現在指しているレコードのペイロードの開始バイトオフセットをデータベースファイルに格納する。</target>
        </trans-unit>
        <trans-unit id="30c620766d52d9f14ee6085868bffd5fb7f16c25" translate="yes" xml:space="preserve">
          <source>Store new polygons in the table using ordinary INSERT statements:</source>
          <target state="translated">通常のINSERT文を使用してテーブルに新しいポリゴンを格納します。</target>
        </trans-unit>
        <trans-unit id="e312586c7080f660b8a13dd56528c07ac821e623" translate="yes" xml:space="preserve">
          <source>Store the maximum page count after the change in register P2.</source>
          <target state="translated">レジスタP2の変更後の最大ページ数を格納します。</target>
        </trans-unit>
        <trans-unit id="4a03a2e19022832dfb9661ede226d69d6b142a41" translate="yes" xml:space="preserve">
          <source>Store the number of entries (an integer value) in the table or index opened by cursor P1 in register P2</source>
          <target state="translated">カーソルP1で開いたテーブルまたはインデックスのエントリ数(整数値)をレジスタP2に格納します。</target>
        </trans-unit>
        <trans-unit id="640b00f8e936acd9d22458864812f703b6f037f6" translate="yes" xml:space="preserve">
          <source>Store the statement journal in the temporary file directory instead of collocated with the database file.</source>
          <target state="translated">ステートメント・ジャーナルをデータベース・ファイルとコロケーションするのではなく、一時ファイル・ディレクトリに格納します。</target>
        </trans-unit>
        <trans-unit id="25a1d24f343a9c4193ce3147697d66befd80ac3b" translate="yes" xml:space="preserve">
          <source>Storing the schema a text also makes the &lt;a href=&quot;fileformat2&quot;&gt;SQLite database file format&lt;/a&gt; easier to define, document, and understand. This helps make SQLite database files a &lt;a href=&quot;locrsf&quot;&gt;recommended storage format&lt;/a&gt; for long-term archiving of data.</source>
          <target state="translated">スキーマをテキストで保存すると、&lt;a href=&quot;fileformat2&quot;&gt;SQLiteデータベースファイル形式の&lt;/a&gt;定義、文書化、理解が容易になります。これにより、SQLiteデータベースファイルをデータの長期アーカイブに&lt;a href=&quot;locrsf&quot;&gt;推奨されるストレージ形式&lt;/a&gt;にすることができます。</target>
        </trans-unit>
        <trans-unit id="9347ad87d0fbebdfc89e77280c0ab0e8462e84d1" translate="yes" xml:space="preserve">
          <source>Storing the schema as text rather than as parsed tables also give flexibility to the implementation. Since the internal parse of the schema is regenerated each time the database is opened, the internal representation of the schema can change from one release to the next. This is important, as sometimes new features require enhancements to the internal schema representation. Changing the internal schema representation would be much more difficult if the schema representation was exposed in the database file. So, in other words, storing the schema as text helps maintain backwards compatibility, and helps ensure that older database files can be read and written by newer versions of SQLite.</source>
          <target state="translated">スキーマを解析されたテーブルではなくテキストとして保存することで、実装に柔軟性を持たせることができます。スキーマの内部構文解析はデータベースを開くたびに再生成されるので、スキーマの内部表現はリリースごとに変わる可能性があります。これは重要なことで、新機能が内部スキーマ表現の強化を必要とすることがあるからです。スキーマ表現がデータベースファイル内で公開されている場合、内部スキーマ表現を変更することははるかに困難です。つまり、スキーマをテキストとして保存することで下位互換性を維持し、古いデータベースファイルを新しいバージョンの SQLite で読み書きできるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="275b8884950b47fafacc5239216411e5afbdc454" translate="yes" xml:space="preserve">
          <source>Streaming Versions of API functions</source>
          <target state="translated">API機能のストリーミング版</target>
        </trans-unit>
        <trans-unit id="1cda8a5c429d321cd55319d79be9050795d95668" translate="yes" xml:space="preserve">
          <source>Streaming Versions of API functions.</source>
          <target state="translated">API関数のストリーミングバージョン。</target>
        </trans-unit>
        <trans-unit id="41b71513a74ee80684014356a0159868598a4ea7" translate="yes" xml:space="preserve">
          <source>Streaming function</source>
          <target state="translated">ストリーミング機能</target>
        </trans-unit>
        <trans-unit id="c76c18624ee750ab230cd2529398af4c90203056" translate="yes" xml:space="preserve">
          <source>Strengthen defenses against deliberately corrupted database files.</source>
          <target state="translated">意図的に破損したデータベースファイルに対する防御を強化します。</target>
        </trans-unit>
        <trans-unit id="70d422bf6680eb42d320cae6dd4ad922e3705a6b" translate="yes" xml:space="preserve">
          <source>Strictly speaking, the &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; object is not required since the convenience wrapper interfaces, &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec&lt;/a&gt; or &lt;a href=&quot;c3ref/free_table&quot;&gt;sqlite3_get_table&lt;/a&gt;, can be used and these convenience wrappers encapsulate and hide the &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; object. Nevertheless, an understanding of &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statements&lt;/a&gt; is needed to make full use of SQLite.</source>
          <target state="translated">厳密に言うと、便利なラッパーインターフェイスである&lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec&lt;/a&gt;または&lt;a href=&quot;c3ref/free_table&quot;&gt;sqlite3_get_tableを&lt;/a&gt;使用でき、これらの便利なラッパーが&lt;a href=&quot;c3ref/stmt&quot;&gt;準備されたステートメント&lt;/a&gt;オブジェクトをカプセル化して非表示にするため、準備さ&lt;a href=&quot;c3ref/stmt&quot;&gt;れたステートメント&lt;/a&gt;オブジェクトは必要ありません。それでも、SQLiteを十分に活用するには、&lt;a href=&quot;c3ref/stmt&quot;&gt;準備済みステートメントを&lt;/a&gt;理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="f631842398197770725f42465ce9be3bb217fe7f" translate="yes" xml:space="preserve">
          <source>String Comparison</source>
          <target state="translated">文字列比較</target>
        </trans-unit>
        <trans-unit id="bca91d4c03b6524119c1475d05b8b5503e052ba2" translate="yes" xml:space="preserve">
          <source>String Globbing</source>
          <target state="translated">ストリンググロービング</target>
        </trans-unit>
        <trans-unit id="d8c2dabd43b3a0fa081659375ff18075de8cb9f3" translate="yes" xml:space="preserve">
          <source>String LIKE Matching</source>
          <target state="translated">文字列 LIKE マッチング</target>
        </trans-unit>
        <trans-unit id="dfab1bcbfa804d1a74a7282da9ab4ff5c5353c70" translate="yes" xml:space="preserve">
          <source>String8</source>
          <target state="translated">String8</target>
        </trans-unit>
        <trans-unit id="add2080ddbdcd32891495b46eb567565fc93baa2" translate="yes" xml:space="preserve">
          <source>Strings returned by sqlite3_column_text() and sqlite3_column_text16(), even empty strings, are always zero-terminated. The return value from sqlite3_column_blob() for a zero-length BLOB is a NULL pointer.</source>
          <target state="translated">sqlite3_column_text()とsqlite3_column_text16()によって返される文字列は、空の文字列であっても常にゼロ終端です。長さ0のBLOBに対するsqlite3_column_blob()の戻り値はNULLポインタです。</target>
        </trans-unit>
        <trans-unit id="109fcef442d10303df5f7d59d40936a03977dfcb" translate="yes" xml:space="preserve">
          <source>Strings that include any other characters must be quoted. Characters that are not currently allowed in barewords, are not quote characters and do not currently serve any special purpose in FTS5 query expressions may at some point in the future be allowed in barewords or used to implement new query functionality. This means that queries that are currently syntax errors because they include such a character outside of a quoted string may be interpreted differently by some future version of FTS5.</source>
          <target state="translated">その他の文字を含む文字列は引用符で囲む必要があります。現在のところベアワードでは許可されておらず、引用符ではなく、FTS5の問い合わせ式で特別な目的を果たしていない文字は、将来のある時点でベアワードで許可されたり、新しい問い合わせ機能を実装するために使用されたりするかもしれません。これは、引用文字列の外にそのような文字を含むために現在は構文エラーとなっているクエリが、将来のバージョンのFTS5では異なる解釈をされる可能性があることを意味しています。</target>
        </trans-unit>
        <trans-unit id="0b6945b8df636a6d934a512accf12a8b76fc6265" translate="yes" xml:space="preserve">
          <source>Studies show that many applications already use SQLite as a container object. For example, &lt;a href=&quot;https://odin.cse.buffalo.edu/papers/2015/TPCTC-sqlite-final.pdf&quot;&gt;Kennedy&lt;/a&gt; (no relation to the &lt;a href=&quot;https://sqlite.org/crew.html#dan&quot;&gt;SQLite developer&lt;/a&gt;) reports that 14% of Android applications never write to their SQLite databases. It is believed that these applications are downloading entire databases from the cloud and then using the information locally as needed. In other words, the applications are using SQLite not so much as a database but as a queryable wire-transfer format.</source>
          <target state="translated">調査によると、多くのアプリケーションがSQLiteをコンテナオブジェクトとして既に使用しています。たとえば、&lt;a href=&quot;https://odin.cse.buffalo.edu/papers/2015/TPCTC-sqlite-final.pdf&quot;&gt;ケネディ&lt;/a&gt;（&lt;a href=&quot;https://sqlite.org/crew.html#dan&quot;&gt;SQLite開発者&lt;/a&gt;とは関係ありません）は、Androidアプリケーションの14％がSQLiteデータベースに書き込みを行わないことを報告しています。これらのアプリケーションはクラウドからデータベース全体をダウンロードし、必要に応じてローカルで情報を使用していると考えられています。つまり、アプリケーションはSQLiteをデータベースとしてではなく、クエリ可能な電信転送フォーマットとして使用しています。</target>
        </trans-unit>
        <trans-unit id="bbd17ca7716d1959474368eb0c63e1ad9ad957be" translate="yes" xml:space="preserve">
          <source>Subqueries</source>
          <target state="translated">Subqueries</target>
        </trans-unit>
        <trans-unit id="9a235eb288a64671965312f5d0ad9f1b72cd84b6" translate="yes" xml:space="preserve">
          <source>Subqueries might also need to be materialized when they appear in the FROM clause of a SELECT statement. For example:</source>
          <target state="translated">サブクエリは、SELECT文のFROM句に現れた場合にも実体化する必要があるかもしれません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="79095639cf2544d3073712b3f47816fbf8b20418" translate="yes" xml:space="preserve">
          <source>Subquery Expressions</source>
          <target state="translated">副問い合わせ式</target>
        </trans-unit>
        <trans-unit id="14de4f03d3cdec3c98a5016002bc81eb0292385c" translate="yes" xml:space="preserve">
          <source>Subquery co-routines</source>
          <target state="translated">サクエリのサブルーチン</target>
        </trans-unit>
        <trans-unit id="1d0025e26a750eaf886e5b666d451246677ab333" translate="yes" xml:space="preserve">
          <source>Substitution Type</source>
          <target state="translated">置換タイプ</target>
        </trans-unit>
        <trans-unit id="ae5f61e523ef194692c08eae320b323a03f8bb9b" translate="yes" xml:space="preserve">
          <source>Subtract</source>
          <target state="translated">Subtract</target>
        </trans-unit>
        <trans-unit id="b2b6c0ca0db2f38dd797d319d2f786a2af93e034" translate="yes" xml:space="preserve">
          <source>Subtract 200 from X.</source>
          <target state="translated">Xから200を引く。</target>
        </trans-unit>
        <trans-unit id="351c38b73ce6b309921bfd5c87f12ea777d4a4ac" translate="yes" xml:space="preserve">
          <source>Subtract the value in register P1 from the value in register P2 and store the result in register P3. If either input is NULL, the result is NULL.</source>
          <target state="translated">レジスタP1の値をレジスタP2の値から減算し、その結果をレジスタP3に格納します。どちらかの入力がNULLの場合、結果はNULLになります。</target>
        </trans-unit>
        <trans-unit id="b3ad01aa557050dded853fc788b3484598298d39" translate="yes" xml:space="preserve">
          <source>Such a line of C code might generate a dozen separate machine code instructions. If any one of those instructions is ever evaluated, then we say that the statement has been tested. So, for example, it might be the case that the conditional expression is always false and the &quot;d&quot; variable is never incremented. Even so, statement coverage counts this line of code as having been tested.</source>
          <target state="translated">このようなC言語のコードは、十数個のマシンコード命令を生成することがあります。これらの命令のどれかが評価された場合、その文がテストされたことになります。例えば、条件式が常にfalseで、変数 &quot;d &quot;がインクリメントされない場合があります。そうであっても、文のカバレッジは、この行のコードをテストされたものとしてカウントします。</target>
        </trans-unit>
        <trans-unit id="a042ce9ca13e4d4ddb750a0fe77ea337b1cdceb1" translate="yes" xml:space="preserve">
          <source>Such a virtual table has the same columns as the table-valued function described in the previous section. It may be read from using a SELECT statement in the same way as the table-valued function can.</source>
          <target state="translated">このような仮想テーブルは、前項で説明したテーブル値関数と同じ列を持ちます。これは、テーブル値関数と同じようにSELECT文を使用して読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="da045363c8fb916c7bdb60bedab8cb85e2f1f5a1" translate="yes" xml:space="preserve">
          <source>Such advanced searches are requested by providing a more complicated FTS5 query string as the text to the right of the MATCH operator (or = operator, or as the first argument to a table-valued function syntax). The full query syntax is &lt;a href=&quot;fts5#full_text_query_syntax&quot;&gt;described here&lt;/a&gt;.</source>
          <target state="translated">このような高度な検索は、MATCH演算子の右側のテキスト（または=演算子、またはテーブル値関数構文の最初の引数）として、より複雑なFTS5クエリ文字列を提供することで要求されます。ここでは、完全なクエリ構文&lt;a href=&quot;fts5#full_text_query_syntax&quot;&gt;について説明します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c0936ee6227b30512f2222702e2254d11d72a242" translate="yes" xml:space="preserve">
          <source>Such criticism would be well-founded for a traditional client/server database engine, such as MySQL, PostgreSQL, or SQL Server. In a client/server database, each SQL statement requires a message round-trip from the application to the database server and back to the application. Doing over 200 round-trip messages, sequentially, can be a serious performance drag. This is sometimes called the &quot;N+1 Query Problem&quot; or the &quot;N+1 Select Problem&quot; and it is an anti-pattern.</source>
          <target state="translated">このような批判は、MySQL、PostgreSQL、SQL Serverなどの伝統的なクライアント/サーバデータベースエンジンに対しては、十分に根拠のあるものでしょう。クライアント/サーバデータベースでは、各SQL文はアプリケーションからデータベースサーバへ、そしてアプリケーションへとメッセージを往復させる必要があります。200以上のラウンドトリップメッセージを連続して実行することは、深刻なパフォーマンスの低下を招く可能性があります。これは「N+1 クエリ問題」や「N+1 セレクト問題」と呼ばれることもあり、アンチパターンです。</target>
        </trans-unit>
        <trans-unit id="f834acdfa0c7dab757f2bc4e26b1966eff963a52" translate="yes" xml:space="preserve">
          <source>Suggested Uses For SQLite:</source>
          <target state="translated">SQLite の推奨される使用法。</target>
        </trans-unit>
        <trans-unit id="f08f43d3c61d6c426d33128ee0c38e51fb6aad20" translate="yes" xml:space="preserve">
          <source>Suggested compile-time options include:</source>
          <target state="translated">提案されているコンパイル時のオプションには、以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="3d1a384ea1042be63f3032ea726e70fc4a04f311" translate="yes" xml:space="preserve">
          <source>Suggests completions for partially-entered words during interactive SQL input. Used by the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; to help implement tab-completion.</source>
          <target state="translated">対話型SQL入力中に部分的に入力された単語の補完を提案します。&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;がタブ補完の実装を支援するために使用します。</target>
        </trans-unit>
        <trans-unit id="adca4d21f8bf7900f73ede68196274afd881f1d7" translate="yes" xml:space="preserve">
          <source>Sum() will throw an &quot;integer overflow&quot; exception if all inputs are integers or NULL and an integer overflow occurs at any point during the computation. Total() never throws an integer overflow.</source>
          <target state="translated">Sum()は、すべての入力が整数または NULL であり、計算中に整数オーバーフローが発生した場合に &quot;integer overflow&quot; 例外をスローします。Total()は整数オーバーフローをスローしません。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="1a7bd9ebcad37a0dd711dfc793fa96bb5022047c" translate="yes" xml:space="preserve">
          <source>Summary of Technical Differences</source>
          <target state="translated">技術的な違いのまとめ</target>
        </trans-unit>
        <trans-unit id="ab2e3b9850b401306a39a3a804f43e7d4f55c01f" translate="yes" xml:space="preserve">
          <source>Support for &quot;:AAA&quot; style bind parameter names.</source>
          <target state="translated">AAA&quot; スタイルのバインドパラメータ名をサポートしました。</target>
        </trans-unit>
        <trans-unit id="e333e85b28ab7b57a0a5c9131f54f806015a6221" translate="yes" xml:space="preserve">
          <source>Support for ALTER TABLE ... RENAME TABLE ... added</source>
          <target state="translated">ALTER TABLEのサポート ...RENAME TABLE ...追加</target>
        </trans-unit>
        <trans-unit id="3251d36ace39f64a5ddca9143a5668b65028289f" translate="yes" xml:space="preserve">
          <source>Support for TCL variable names embedded in SQL statements in the TCL bindings.</source>
          <target state="translated">SQL文に埋め込まれたTCL変数名をTCLバインディングでサポート。</target>
        </trans-unit>
        <trans-unit id="4c4e649b2faf6e7dd28f3f288044f754a9767c05" translate="yes" xml:space="preserve">
          <source>Support for UTF-16.</source>
          <target state="translated">UTF-16に対応しています。</target>
        </trans-unit>
        <trans-unit id="49ef276ba874be88caa55a5b3e4a37db519f9394" translate="yes" xml:space="preserve">
          <source>Support for UTF-8 and ISO8859 characters in column and table names.</source>
          <target state="translated">列名および表名でのUTF-8およびISO8859文字をサポートします。</target>
        </trans-unit>
        <trans-unit id="78dc81c2a8faafa4c84493782b19c441e17956a6" translate="yes" xml:space="preserve">
          <source>Support for UTF-8 and UTF-16</source>
          <target state="translated">UTF-8およびUTF-16をサポート</target>
        </trans-unit>
        <trans-unit id="1e1164bc2160d30de5ee08ec06fc2a323f2028fc" translate="yes" xml:space="preserve">
          <source>Support for both UTF-8 and UTF-16 text.</source>
          <target state="translated">UTF-8とUTF-16の両方のテキストに対応しています。</target>
        </trans-unit>
        <trans-unit id="bf37e2ec021b62a6c46ffa2eb125d86eb07ffbc5" translate="yes" xml:space="preserve">
          <source>Support for correlated subqueries added.</source>
          <target state="translated">相関性のある副問い合わせのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="ec9173b8e288c70be66cdbfa81d0ba7ad6705c9c" translate="yes" xml:space="preserve">
          <source>Support for full text search using the FTS1 module (beta)</source>
          <target state="translated">FTS1モジュールを用いた全文検索に対応(ベータ版</target>
        </trans-unit>
        <trans-unit id="09344ff56160150e5ec18eb5a71ba2f29a6312fc" translate="yes" xml:space="preserve">
          <source>Support for internationalization including UTF-8, UTF-16, and user defined collating sequences.</source>
          <target state="translated">UTF-8、UTF-16、ユーザー定義の照合シーケンスを含む国際化をサポートします。</target>
        </trans-unit>
        <trans-unit id="091e86f3d19a27b9089ddce8c418dcc49fd9c304" translate="yes" xml:space="preserve">
          <source>Support for non-ASCII characters in win95 filenames</source>
          <target state="translated">win95 ファイル名での非 ASCII 文字のサポート</target>
        </trans-unit>
        <trans-unit id="cfddf0106ec96c94ef54d4e7b75188870573ef30" translate="yes" xml:space="preserve">
          <source>Support for the EXISTS clause added.</source>
          <target state="translated">EXISTS句のサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="21d1badc676c125ad5e671e3ae8383a4753e9f6c" translate="yes" xml:space="preserve">
          <source>Support for the diagnostic functions sqlite3_compileoption_used() and sqlite3_compileoption_get() may be omitted by specifying the &lt;a href=&quot;../compile#omit_compileoption_diags&quot;&gt;SQLITE_OMIT_COMPILEOPTION_DIAGS&lt;/a&gt; option at compile time.</source>
          <target state="translated">診断関数sqlite3_compileoption_used（）およびsqlite3_compileoption_get（）のサポートは、コンパイル時に&lt;a href=&quot;../compile#omit_compileoption_diags&quot;&gt;SQLITE_OMIT_COMPILEOPTION_DIAGS&lt;/a&gt;オプションを指定することで省略できます。</target>
        </trans-unit>
        <trans-unit id="ceaebbe4250e5e44fc85c0a7be72215c2fc6b3df" translate="yes" xml:space="preserve">
          <source>Support for the diagnostic functions sqlite3_compileoption_used() and sqlite3_compileoption_get() may be omitted by specifying the &lt;a href=&quot;compile#omit_compileoption_diags&quot;&gt;SQLITE_OMIT_COMPILEOPTION_DIAGS&lt;/a&gt; option at compile time.</source>
          <target state="translated">診断関数sqlite3_compileoption_used（）およびsqlite3_compileoption_get（）のサポートは、コンパイル時に&lt;a href=&quot;compile#omit_compileoption_diags&quot;&gt;SQLITE_OMIT_COMPILEOPTION_DIAGS&lt;/a&gt;オプションを指定することで省略できます。</target>
        </trans-unit>
        <trans-unit id="e227243100baec383101a5e3e5550db71fb48de1" translate="yes" xml:space="preserve">
          <source>Support operators IS TRUE, IS FALSE, IS NOT TRUE, and IS NOT FALSE.</source>
          <target state="translated">サポートオペレータは、IS TRUE、IS FALSE、IS NOT TRUE、IS NOT FALSEです。</target>
        </trans-unit>
        <trans-unit id="8b76c3512f29a884a102a942cd3b81fe8d384ace" translate="yes" xml:space="preserve">
          <source>Supported unary prefix operators are these:</source>
          <target state="translated">サポートされている単項接頭辞演算子は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="14453b6f0216ab7b03129623da62580288e5db4c" translate="yes" xml:space="preserve">
          <source>Supports terabyte-sized databases and gigabyte-sized strings and blobs. (See &lt;a href=&quot;limits&quot;&gt;limits.html&lt;/a&gt;.)</source>
          <target state="translated">テラバイトサイズのデータ​​ベースとギガバイトサイズの文字列とブロブをサポートします。（&lt;a href=&quot;limits&quot;&gt;limits.htmlを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="f2a1709933364d69e93326e81a6775d317d15202" translate="yes" xml:space="preserve">
          <source>Suppose N=4. Then for the TPC-H Q8 graph, the first step finds the four shortest paths to visit any single node in the graph:</source>
          <target state="translated">N=4とする.次に、TPC-H Q8グラフについて、最初のステップでは、グラフ内の任意の1つのノードを訪問するための4つの最短パスを見つけます。</target>
        </trans-unit>
        <trans-unit id="61fbb5bff735b0969304e1938310f741780fb8bb" translate="yes" xml:space="preserve">
          <source>Suppose SQLite is used as the &lt;a href=&quot;appfileformat&quot;&gt;application file format&lt;/a&gt; for a particular design application. Two users, Alice and Bob, each start with a baseline design that is about a gigabyte in size. They work all day, in parallel, each making their own customizations and tweaks to the design. At the end of the day, they would like to merge their changes together into a single unified design.</source>
          <target state="translated">SQLiteが特定の設計アプリケーションの&lt;a href=&quot;appfileformat&quot;&gt;アプリケーションファイル形式&lt;/a&gt;として使用されているとします。AliceとBobの2人のユーザーはそれぞれ、サイズが約1ギガバイトのベースライン設計から始めます。彼らは1日中、並行して作業し、それぞれが独自のカスタマイズを行い、デザインを微調整します。最終的には、変更を1つの統合されたデザインにマージしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="ef94f961eb3bb04314c719aa5da9edd146e885d3" translate="yes" xml:space="preserve">
          <source>Suppose an application wants to display a list of contacts in alphabetical order by lastname, firstname, in a scrolling window that can only show 7 contacts at a time. Initialize the scrolling window to the first 7 entries is easy:</source>
          <target state="translated">あるアプリケーションが、一度に7つの連絡先しか表示できないスクロールウィンドウに、姓、名、アルファベット順に連絡先のリストを表示したいとします。スクロールウィンドウを最初の7つのエントリに初期化するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="56904d3ea47369b0068186e8a39203c8a5f870c3" translate="yes" xml:space="preserve">
          <source>Suppose each entry in the BIG table is a JSON object with a '$.id' field that is a unique identifier and a '$.partlist' field that can be a deeply nested object. You want to find the id of every entry that contains one or more references to uuid '6fa5181e-5721-11e5-a04e-57f3d7b32808' anywhere in its '$.partlist'.</source>
          <target state="translated">BIG テーブルの各エントリが JSON オブジェクトで、一意の識別子である '$.id' フィールドと、深い入れ子になる可能性のある '$.partlist' フィールドを持つとします。uuid '6fa5181e-5721-11e5-a04e-57f3d7b32808' への参照を 1 つ以上含むすべてのエントリの ID を、その '$.partlist' のどこかで見つけたいとします。</target>
        </trans-unit>
        <trans-unit id="01636cb9299568d887d10674105e44b34b08d5bf" translate="yes" xml:space="preserve">
          <source>Suppose that after a while (about a month, usually) a new version of SQLite is released: 3.6.16. You will want to incorporate this new public version of SQLite into your repository in the public branch (the trunk). To do this, first change your repository over to the trunk:</source>
          <target state="translated">しばらくして(通常は1ヶ月程度)新しいバージョンのSQLiteがリリースされたとします。3.6.16.この新しいパブリックバージョンのSQLiteをパブリックブランチ(トランク)のリポジトリに組み込みたいとします。これを行うには、まず、リポジトリをトランクに変更します。</target>
        </trans-unit>
        <trans-unit id="cede4c6f59f784278daddf56ee62d38bbe080c9a" translate="yes" xml:space="preserve">
          <source>Suppose that in addition to the index on &quot;fruit&quot; there was also an index on &quot;state&quot;.</source>
          <target state="translated">果物」のインデックスに加えて「状態」のインデックスがあったとします。</target>
        </trans-unit>
        <trans-unit id="66f9ffa5f1e3c7efa56791a73580d03426c293ab" translate="yes" xml:space="preserve">
          <source>Suppose the &lt;a href=&quot;http://en.wikipedia.org/wiki/OpenDocument&quot;&gt;OpenDocument&lt;/a&gt; file format, and specifically the &quot;ODP&quot; OpenDocument Presentation format, were built around SQLite. Benefits would include:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/OpenDocument&quot;&gt;OpenDocument&lt;/a&gt;ファイル形式、特に「ODP」OpenDocumentプレゼンテーション形式がSQLiteを中心に構築されていると仮定します。メリットは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5a6796b2c9a16b027d38641aa802a501818a470f" translate="yes" xml:space="preserve">
          <source>Suppose the SQLite source tree is stored in a directory named &quot;sqlite&quot;. Plan to construct the amalgamation in a parallel directory named (for example) &quot;bld&quot;. First construct an appropriate Makefile by either running the configure script at the top of the SQLite source tree, or by making a copy of one of the template Makefiles at the top of the source tree. Then hand edit this Makefile to include the desired compile-time options. Finally run:</source>
          <target state="translated">SQLiteのソースツリーが &quot;sqlite &quot;という名前のディレクトリに格納されているとします。アマルガムを(例えば)&quot;bld &quot;という名前の並列ディレクトリに構築することを計画してください。まず、SQLiteソースツリーの一番上にあるconfigureスクリプトを実行するか、ソースツリーの一番上にあるテンプレートMakefileのコピーを作成して、適切なMakefileを作成します。次に、このMakefileを手で編集して、必要なコンパイル時のオプションを含めます。最後に実行します。</target>
        </trans-unit>
        <trans-unit id="3af5f7045e9a9cbdbcc9c95551ce4e94ea5602be" translate="yes" xml:space="preserve">
          <source>Suppose the demo_data.boundary field holds some proprietary data description of a complex two-dimensional boundary for an object and suppose that the application has used the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; interface to created application-defined functions &quot;contained_in&quot; and &quot;overlaps&quot; accepting two demo_data.boundary objects and return true or false. One may assume that &quot;contained_in&quot; and &quot;overlaps&quot; are relatively slow functions that we do not want to invoke too frequently. Then an efficient way to find the name of all objects located within the North Carolina 12th District, one may be to run a query like this:</source>
          <target state="translated">demo_data.boundaryフィールドがオブジェクトの複雑な2次元境界の独自のデータ記述を保持し、アプリケーションが&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt;インターフェースを使用して、2つのdemo_dataを受け入れるアプリケーション定義関数「contained_in」と「overlaps」を作成したとします。境界オブジェクト。trueまたはfalseを返します。 「contained_in」と「overlaps」は、あまり頻繁に呼び出したくない比較的遅い関数であると考える人もいます。次に、ノースカロライナ12区内にあるすべてのオブジェクトの名前を見つける効率的な方法は、次のようなクエリを実行することです。</target>
        </trans-unit>
        <trans-unit id="be9cbf4654b2bfbdcf1b2bf833bfb8cf7cccef29" translate="yes" xml:space="preserve">
          <source>Suppose the initial sequence of non-wildcard characters on the right-hand side of the LIKE or GLOB operator is</source>
          <target state="translated">LIKEやGLOB演算子の右側にあるワイルドカード以外の文字の初期配列が</target>
        </trans-unit>
        <trans-unit id="15341cf73e257c233d78d57ae1e295622b133b68" translate="yes" xml:space="preserve">
          <source>Suppose the power loss occurred during &lt;a href=&quot;#section_3_10&quot;&gt;step 3.10&lt;/a&gt; above, while the database changes were being written to disk. After power is restored, the situation might be something like what is shown to the right. We were trying to change three pages of the database file but only one page was successfully written. Another page was partially written and a third page was not written at all.</source>
          <target state="translated">データベースの変更がディスクに書き込まれているときに、上記の&lt;a href=&quot;#section_3_10&quot;&gt;ステップ3.10&lt;/a&gt;中に停電が発生したとします。電源が回復した後、状況は右に示されるもののようになる場合があります。データベースファイルの3ページを変更しようとしましたが、1ページしか正常に書き込まれませんでした。別のページが部分的に書き込まれ、3番目のページはまったく書き込まれませんでした。</target>
        </trans-unit>
        <trans-unit id="502f7a3363de6f918e427baeeb23c0fbeb554eda" translate="yes" xml:space="preserve">
          <source>Suppose the table &quot;CREATE TABLE user(name,phone)&quot; stores zero or more phone numbers as a JSON array object in the user.phone field. To find all users who have any phone number with a 704 area code:</source>
          <target state="translated">テーブル &quot;CREATE TABLE user(name,phone)&quot;が、0個以上の電話番号をuser.phoneフィールドにJSON配列オブジェクトとして格納しているとします。市外局番が704の電話番号を持つすべてのユーザーを見つけるには</target>
        </trans-unit>
        <trans-unit id="d5297ab1e192fe178acfe6ab94a19f582b117e15" translate="yes" xml:space="preserve">
          <source>Suppose the term that is being spell-corrected is X. To limit the search space, X is converted to a k2-like key using the equivalent of:</source>
          <target state="translated">誤字脱字の対象となっている用語がXだとします。</target>
        </trans-unit>
        <trans-unit id="b244116e469acf86fbb0e19b53f1d8598b689446" translate="yes" xml:space="preserve">
          <source>Suppose there is a site hosting a database in state S0. And that modifications are made that move that database to state S1 and a changeset recorded (the &quot;local&quot; changeset). Then, a changeset based on S0 is received from another site (the &quot;remote&quot; changeset) and applied to the database. The database is then in state (S1+&quot;remote&quot;), where the exact state depends on any conflict resolution decisions (OMIT or REPLACE) made while applying &quot;remote&quot;. Rebasing a changeset is to update it to take those conflict resolution decisions into account, so that the same conflicts do not have to be resolved elsewhere in the network.</source>
          <target state="translated">状態S0でデータベースをホストしているサイトがあるとします。そして、そのデータベースを状態S1に移動させる変更が行われ、変更セットが記録されたとします(「ローカル」変更セット)。そして、S0に基づくチェンジセットが別のサイトから受信され(&quot;リモート &quot;チェンジセット)、データベースに適用されます。データベースはその後、状態(S1+&quot;リモート&quot;)になりますが、正確な状態は &quot;リモート &quot;を適用している間に行われた競合解決の決定(OMITまたはREPLACE)に依存します。チェンジセットをリベースすることは、ネットワーク内の他の場所で同じ競合を解決する必要がないように、それらの競合解決の決定を考慮に入れてチェンジセットを更新することです。</target>
        </trans-unit>
        <trans-unit id="7ead91310400eb3c0d2b88fd20fde2e0225bdf31" translate="yes" xml:space="preserve">
          <source>Suppose we have a table X1 defined as follows:</source>
          <target state="translated">以下のように定義されたテーブルX1があるとします。</target>
        </trans-unit>
        <trans-unit id="538e32b0b37a9243b789f735088e6724ac330912" translate="yes" xml:space="preserve">
          <source>Suppose we want to find the prices of all kinds of oranges sorted in order of the state where they are grown. The query is this:</source>
          <target state="translated">例えば、オレンジの全種類の価格を、栽培されている州の順に並べ替えて検索したいとします。クエリはこれです。</target>
        </trans-unit>
        <trans-unit id="064cebf29367ccdae2597fb8c1cb7630379e90ac" translate="yes" xml:space="preserve">
          <source>Suppose we want to know the order number, product number, and quantity for any item in which the product number and quantity match the product number and quantity of any item in order number 365:</source>
          <target state="translated">注文番号365の中で、商品番号と数量が一致する商品の注文番号、商品番号、数量を知りたいとします。</target>
        </trans-unit>
        <trans-unit id="465043a8fd6b7a4a4148ce99421e90822984188c" translate="yes" xml:space="preserve">
          <source>Suppose you want to look up the price of peaches. The query would be as follows:</source>
          <target state="translated">桃の価格を調べたいとします。クエリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5cde9a11c3caa7425e0b0c2c0bc60b2a242f9c61" translate="yes" xml:space="preserve">
          <source>Surprisingly, using SQLite in place of ZIP makes the presentation file smaller. Really. One would think that a relational database file would be larger than a ZIP archive, but at least in the case of NeoOffice that is not so. The following is an actual screen-scrape showing the sizes of the same NeoOffice presentation, both in its original ZIP archive format as generated by NeoOffice (self2014.odp), and as repacked as an SQLite database using the &lt;a href=&quot;http://www.sqlite.org/sqlar/doc/trunk/README.md&quot;&gt;SQLAR&lt;/a&gt; utility:</source>
          <target state="translated">驚いたことに、ZIPの代わりにSQLiteを使用すると、プレゼンテーションファイルが小さくなります。本当に。リレーショナルデータベースファイルはZIPアーカイブよりも大きくなると思いますが、少なくともNeoOfficeの場合はそうではありません。以下は、NeoOffice（self2014.odp）によって生成された元のZIPアーカイブ形式と、&lt;a href=&quot;http://www.sqlite.org/sqlar/doc/trunk/README.md&quot;&gt;SQLAR&lt;/a&gt;ユーティリティを使用してSQLiteデータベースとして再パックされた同じNeoOfficeプレゼンテーションのサイズを示す実際の画面の断片です。</target>
        </trans-unit>
        <trans-unit id="055c319b3692b1bab785599b3ba80b0068542bb5" translate="yes" xml:space="preserve">
          <source>Suspend Execution For A Short Time</source>
          <target state="translated">短時間で実行を一時停止</target>
        </trans-unit>
        <trans-unit id="7bdfc376d6f876239b6de7abf665805218ef476e" translate="yes" xml:space="preserve">
          <source>Swap the program counter with the value in register P1. This has the effect of yielding to a coroutine.</source>
          <target state="translated">プログラムカウンタをレジスタP1の値とスワップします。これは、コルーチンを降伏させる効果があります。</target>
        </trans-unit>
        <trans-unit id="6cb264ae88f7fbec3546350312b9af582b1fc481" translate="yes" xml:space="preserve">
          <source>Swapping journal files between two different databases.</source>
          <target state="translated">2つの異なるデータベース間でジャーナルファイルをスワップします。</target>
        </trans-unit>
        <trans-unit id="e8485294b019aa85fdb1a929771cba23d5593c45" translate="yes" xml:space="preserve">
          <source>Swarmvtab Virtual Table</source>
          <target state="translated">Swarmvtab 仮想テーブル</target>
        </trans-unit>
        <trans-unit id="01d32f35e7401403e071bd64f5c3b26a4e4dc5be" translate="yes" xml:space="preserve">
          <source>Swarmvtab context</source>
          <target state="translated">Swarmvtab コンテキスト</target>
        </trans-unit>
        <trans-unit id="875cb081d7d2e461450da0199489f1266311e3ff" translate="yes" xml:space="preserve">
          <source>Swarmvtab efficiently handles range and equality constraints on the rowid (or other INTEGER PRIMARY KEY) field only. If a query does not contain such a constraint, then swarmvtab finds the results by opening each database in turn and linearly scanning the component table. Which generates a correct result, but is often slow.</source>
          <target state="translated">Swarmvtabは、rowid(または他のINTEGER PRIMARY KEY)フィールドのみの範囲制約と等質性制約を効率的に処理します。クエリにそのような制約が含まれていない場合、Swarmvtabは各データベースを順番に開き、コンポーネントテーブルをリニアにスキャンすることで結果を見つけます。これは正しい結果を生成しますが、時間がかかることが多いです。</target>
        </trans-unit>
        <trans-unit id="85aa4db2e47035bd4c2140f56e8799ea09c7ae90" translate="yes" xml:space="preserve">
          <source>Swarmvtab virtual tables must be created in the temp schema. Attempting to create a swarmvtab in the main or an attached database is an error.</source>
          <target state="translated">Swarmvtab 仮想テーブルは、一時スキーマに作成する必要があります。メインまたはアタッチされたデータベースで Swarmvtab を作成しようとするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="d0d92527f493460a8c4ce6ccbbd585c5ead2d11f" translate="yes" xml:space="preserve">
          <source>Synchronization Type Flags</source>
          <target state="translated">同期タイプフラグ</target>
        </trans-unit>
        <trans-unit id="a7e6b31b20f1d4434bcadd521f6861e2f3378f97" translate="yes" xml:space="preserve">
          <source>Synchronous pragma</source>
          <target state="translated">同期プラグマ</target>
        </trans-unit>
        <trans-unit id="4ae6fa22bc9918cf39eb8d8cef197a88e78982e8" translate="yes" xml:space="preserve">
          <source>Syncing</source>
          <target state="translated">Syncing</target>
        </trans-unit>
        <trans-unit id="c66891a446af4f02e4055198cbfa371561a78fd4" translate="yes" xml:space="preserve">
          <source>Syncing the Journal File</source>
          <target state="translated">ジャーナルファイルの同期</target>
        </trans-unit>
        <trans-unit id="17aba038fa3266b07efa450a91b91b1e792d66c5" translate="yes" xml:space="preserve">
          <source>Syntax Diagrams</source>
          <target state="translated">構文図</target>
        </trans-unit>
        <trans-unit id="33bbfae733b0f97c3ea72475efb5dfbb61ebe1e1" translate="yes" xml:space="preserve">
          <source>Syntax Diagrams For SQLite</source>
          <target state="translated">SQLite の構文図</target>
        </trans-unit>
        <trans-unit id="70a8fcc6fa01af0d580c320ddb0e42484905e68e" translate="yes" xml:space="preserve">
          <source>Syntax Restrictions On UPDATE, DELETE, and INSERT Statements Within Triggers</source>
          <target state="translated">トリガ内の UPDATE、DELETE、および INSERT ステートメントの構文制限</target>
        </trans-unit>
        <trans-unit id="34b408d97f8998a54cd64e9461c53dd4d1067b38" translate="yes" xml:space="preserve">
          <source>System Failure Related Assumptions</source>
          <target state="translated">システム障害関連の前提条件</target>
        </trans-unit>
        <trans-unit id="ba2da263deb1258b36edfe6f11f1b761d86b8d6d" translate="yes" xml:space="preserve">
          <source>Systems designers report success using SQLite as a data store on server applications running in the datacenter, or in other words, using SQLite as the underlying storage engine for an application-specific database server.</source>
          <target state="translated">システム設計者は、データセンターで実行されているサーバーアプリケーションのデータストアとして SQLite を使用すること、言い換えれば、アプリケーション固有のデータベースサーバーの基礎となるストレージエンジンとして SQLite を使用することに成功したと報告しています。</target>
        </trans-unit>
        <trans-unit id="7244bff04e9f7001cbde5e129092d3ed31f1946c" translate="yes" xml:space="preserve">
          <source>Systems that run automatic backups in the background might try to make a backup copy of an SQLite database file while it is in the middle of a transaction. The backup copy then might contain some old and some new content, and thus be corrupt.</source>
          <target state="translated">バックグラウンドで自動バックアップを実行しているシステムは、トランザクションの途中でSQLiteデータベースファイルのバックアップコピーを作成しようとするかもしれません。その場合、バックアップコピーには古いコンテンツと新しいコンテンツが含まれている可能性があり、破損している可能性があります。</target>
        </trans-unit>
        <trans-unit id="a4394edb00669dc4429b903f672c10ae13c95e90" translate="yes" xml:space="preserve">
          <source>TABLE</source>
          <target state="translated">TABLE</target>
        </trans-unit>
        <trans-unit id="2ba83e39946a4ce4cedf8d25757aa5972284aa54" translate="yes" xml:space="preserve">
          <source>TABLENAME</source>
          <target state="translated">TABLENAME</target>
        </trans-unit>
        <trans-unit id="4ff4bacb6a130128f6603752138b57217ef9b6fa" translate="yes" xml:space="preserve">
          <source>TBD...</source>
          <target state="translated">TBD...</target>
        </trans-unit>
        <trans-unit id="e44916ac43724313d53ca25dbe2f20ee993ff6ec" translate="yes" xml:space="preserve">
          <source>TBD: More information about the header</source>
          <target state="translated">TBD:ヘッダーの詳細情報</target>
        </trans-unit>
        <trans-unit id="cdd060df603a64a7bee550bbc1c098580b231ab0" translate="yes" xml:space="preserve">
          <source>TCL interface authorizer method</source>
          <target state="translated">TCLインタフェースオーソライズ方式</target>
        </trans-unit>
        <trans-unit id="aa517168bae4e2e388a6074b5a96fe2e5afc293f" translate="yes" xml:space="preserve">
          <source>TCL interface backup method</source>
          <target state="translated">TCLインタフェースバックアップ方式</target>
        </trans-unit>
        <trans-unit id="a29047291bb3d39d19d4b03699cb7f433f5736f2" translate="yes" xml:space="preserve">
          <source>TCL interface bind_fallback method</source>
          <target state="translated">TCL インタフェース bind_fallback メソッド</target>
        </trans-unit>
        <trans-unit id="1c5ad56544d8041c9b02f88d11a25782f14e4c9f" translate="yes" xml:space="preserve">
          <source>TCL interface busy method</source>
          <target state="translated">TCLインタフェースビジー方式</target>
        </trans-unit>
        <trans-unit id="6e4d989bf3b3b512cc61d500b0cb58cfc259ca59" translate="yes" xml:space="preserve">
          <source>TCL interface cache method</source>
          <target state="translated">TCLインタフェースキャッシュ方式</target>
        </trans-unit>
        <trans-unit id="f25b192d00bf0645e7eae602ec160016f797e6ac" translate="yes" xml:space="preserve">
          <source>TCL interface changes method</source>
          <target state="translated">TCL インタフェースの変更方法</target>
        </trans-unit>
        <trans-unit id="33f884ed1b8425d04cb3811d2ea16b66af480340" translate="yes" xml:space="preserve">
          <source>TCL interface close method</source>
          <target state="translated">TCLインターフェースクローズメソッド</target>
        </trans-unit>
        <trans-unit id="96c5f46c7769b7e1d49b804ecba806907889a771" translate="yes" xml:space="preserve">
          <source>TCL interface collate method</source>
          <target state="translated">TCLインタフェース照合法</target>
        </trans-unit>
        <trans-unit id="2332befec61c50669cde60f3b1533591736f6a66" translate="yes" xml:space="preserve">
          <source>TCL interface collation_needed method</source>
          <target state="translated">TCL インタフェース collation_needed メソッド</target>
        </trans-unit>
        <trans-unit id="8cd4b4c1ed1732eb767f776cef0372d6c6cd1054" translate="yes" xml:space="preserve">
          <source>TCL interface commit_hook method</source>
          <target state="translated">TCL インタフェース commit_hook メソッド</target>
        </trans-unit>
        <trans-unit id="0157c2d923f1a0bec3d0245febd3f5035181a5aa" translate="yes" xml:space="preserve">
          <source>TCL interface complete method</source>
          <target state="translated">TCLインタフェース完全方式</target>
        </trans-unit>
        <trans-unit id="c09e584a42654f26d29ff74df19ed9ca909905e4" translate="yes" xml:space="preserve">
          <source>TCL interface config method</source>
          <target state="translated">TCLインタフェース構成法</target>
        </trans-unit>
        <trans-unit id="b70df1b7dc237a292692ace288ac2eb93a3bcef2" translate="yes" xml:space="preserve">
          <source>TCL interface copy method</source>
          <target state="translated">TCLインタフェースコピー方式</target>
        </trans-unit>
        <trans-unit id="347f513a80d88ab334df317b8f83092d3ee26571" translate="yes" xml:space="preserve">
          <source>TCL interface deserialize method</source>
          <target state="translated">TCL インタフェース デシリアライズメソッド</target>
        </trans-unit>
        <trans-unit id="0aa7225f1cfbaa7982110594b19739c6dbdfb9ac" translate="yes" xml:space="preserve">
          <source>TCL interface enable_load_extension method</source>
          <target state="translated">TCL インタフェース enable_load_extension メソッド</target>
        </trans-unit>
        <trans-unit id="64987beca677d7a4b95b820f3bed800e413b8cde" translate="yes" xml:space="preserve">
          <source>TCL interface errorcode method</source>
          <target state="translated">TCLインタフェースエラーコード方式</target>
        </trans-unit>
        <trans-unit id="2189980d19fa911ed2ea4bb8d946cfdc55a53bc7" translate="yes" xml:space="preserve">
          <source>TCL interface eval method</source>
          <target state="translated">TCL インタフェース eval メソッド</target>
        </trans-unit>
        <trans-unit id="f1bf6449a26eb7b025248f0b61a91066e3c39b49" translate="yes" xml:space="preserve">
          <source>TCL interface exists method</source>
          <target state="translated">TCL インタフェースが存在するメソッド</target>
        </trans-unit>
        <trans-unit id="648b3c74c3afc3cad32dadd0965691c51538573c" translate="yes" xml:space="preserve">
          <source>TCL interface function method</source>
          <target state="translated">TCLインタフェース関数法</target>
        </trans-unit>
        <trans-unit id="4d842678586502cd1c46097c8ca3621079c38b98" translate="yes" xml:space="preserve">
          <source>TCL interface incrblob method</source>
          <target state="translated">TCL インタフェース incrblob メソッド</target>
        </trans-unit>
        <trans-unit id="066821d02e0db49a10a7937ff6d8bc5c5b5055c7" translate="yes" xml:space="preserve">
          <source>TCL interface interrupt method</source>
          <target state="translated">TCLインタフェース割り込み方式</target>
        </trans-unit>
        <trans-unit id="f2e3158832088a3ccb54fc358c6461aace750451" translate="yes" xml:space="preserve">
          <source>TCL interface last_insert_rowid method</source>
          <target state="translated">TCL インタフェース last_insert_rowid メソッド</target>
        </trans-unit>
        <trans-unit id="50f8a5afc729daeaa27f3e057a6884d99bd7f622" translate="yes" xml:space="preserve">
          <source>TCL interface nullvalue method</source>
          <target state="translated">TCLインタフェースヌル値メソッド</target>
        </trans-unit>
        <trans-unit id="e0711044ae2edb8698df1518d744c5b6309e1ba0" translate="yes" xml:space="preserve">
          <source>TCL interface onecolumn method</source>
          <target state="translated">TCLインタフェース1カラムメソッド</target>
        </trans-unit>
        <trans-unit id="7eb062b4a3cda7b5c21d07e42888d6f537605587" translate="yes" xml:space="preserve">
          <source>TCL interface profile method</source>
          <target state="translated">TCLインタフェースプロファイル方式</target>
        </trans-unit>
        <trans-unit id="4bd65df2fc14e08847cf659f886e3675b02fd603" translate="yes" xml:space="preserve">
          <source>TCL interface progress method</source>
          <target state="translated">TCLインタフェースプログレス方式</target>
        </trans-unit>
        <trans-unit id="24560fa957755f945fd0a996100a7a50130fe691" translate="yes" xml:space="preserve">
          <source>TCL interface restore method</source>
          <target state="translated">TCLインタフェースリストア方式</target>
        </trans-unit>
        <trans-unit id="2c81f806023d5b1efa791fd568b8a71993cb3fc8" translate="yes" xml:space="preserve">
          <source>TCL interface rollback_hook method</source>
          <target state="translated">TCL インタフェース rollback_hook メソッド</target>
        </trans-unit>
        <trans-unit id="5d16200e0392f874424c9d693d564e213809df7d" translate="yes" xml:space="preserve">
          <source>TCL interface serialize method</source>
          <target state="translated">TCLインタフェースシリアライズメソッド</target>
        </trans-unit>
        <trans-unit id="8ad2308cc6d8c87dd4d39e3a54c207bf26684239" translate="yes" xml:space="preserve">
          <source>TCL interface status method</source>
          <target state="translated">TCLインタフェース状態法</target>
        </trans-unit>
        <trans-unit id="149cac088a8935337f35ceed17575a182fb384dd" translate="yes" xml:space="preserve">
          <source>TCL variable substitution</source>
          <target state="translated">TCL変数置換</target>
        </trans-unit>
        <trans-unit id="def1cac8277b55b62d6889e51352a77e3186587b" translate="yes" xml:space="preserve">
          <source>TEMP</source>
          <target state="translated">TEMP</target>
        </trans-unit>
        <trans-unit id="c02f25e228aca3bb6f42e48160b40dd55194b2cc" translate="yes" xml:space="preserve">
          <source>TEMP Triggers on Non-TEMP Tables</source>
          <target state="translated">非TEMPテーブルのTEMPトリガー</target>
        </trans-unit>
        <trans-unit id="8d43ca29f9403615d1a5c8f0da40adcdae819802" translate="yes" xml:space="preserve">
          <source>TEMP databases</source>
          <target state="translated">TEMPデータベース</target>
        </trans-unit>
        <trans-unit id="0c21d62a74809c85ca0475d94b6c298ee066de4e" translate="yes" xml:space="preserve">
          <source>TEMP tables and indices</source>
          <target state="translated">TEMPテーブルとインデックス</target>
        </trans-unit>
        <trans-unit id="df7db63622b3659c5ca6d357417169e72078f0bc" translate="yes" xml:space="preserve">
          <source>TEMP triggers on non-TEMP tables</source>
          <target state="translated">非TEMPテーブルのTEMPトリガー</target>
        </trans-unit>
        <trans-unit id="2ec4186ff6dd054f66dc48342664cc916e7cee64" translate="yes" xml:space="preserve">
          <source>TEMPORARY</source>
          <target state="translated">TEMPORARY</target>
        </trans-unit>
        <trans-unit id="7d4e42ef9d04a046b5679f952cb0b6b5c498c73c" translate="yes" xml:space="preserve">
          <source>TEXT</source>
          <target state="translated">TEXT</target>
        </trans-unit>
        <trans-unit id="6e2d2a0b927ccbcb0059d0c7ba90d9609187d08f" translate="yes" xml:space="preserve">
          <source>TH3</source>
          <target state="translated">TH3</target>
        </trans-unit>
        <trans-unit id="f0b11e9a80109508da2e3cbd3b7a0a8827845799" translate="yes" xml:space="preserve">
          <source>TH3 achieves 100% branch test coverage (and 100% &lt;a href=&quot;https://en.wikipedia.org/wiki/Modified_condition/decision_coverage&quot;&gt;MC/DC&lt;/a&gt;) over the SQLite core. (Test coverage of extensions such as FTS and RTREE is less than 100%).</source>
          <target state="translated">TH3 は、SQLiteコア全体で100％のブランチテストカバレッジ（および100％&lt;a href=&quot;https://en.wikipedia.org/wiki/Modified_condition/decision_coverage&quot;&gt;MC / DC&lt;/a&gt;）を達成します。（FTSやRTREEなどの拡張のテストカバレッジは100％未満です）。</target>
        </trans-unit>
        <trans-unit id="b39ec8bc0fe82988bb1da1f05fc2de8eb41887fa" translate="yes" xml:space="preserve">
          <source>TH3 checks SQLite's response to out-of-memory errors, disk I/O errors, and power loss during transaction commit.</source>
          <target state="translated">TH3は、トランザクションのコミット時に、メモリ切れエラー、ディスクI/Oエラー、パワーロスに対するSQLiteの応答をチェックします。</target>
        </trans-unit>
        <trans-unit id="055f71da54f782f8f65239fd4fb6b9c021760b69" translate="yes" xml:space="preserve">
          <source>TH3 comes with additional TCL scripts that help automate the testing process on workstations. The &quot;th3make&quot; script automatically runs &quot;mkth3.tcl&quot; and &quot;gcc&quot; and then runs the resulting test program and checks the results. Arguments to th3make include all of the &quot;*.test&quot; test modules and &quot;*.cfg&quot; configurations that are to be included in the test. Additional options to th3make can cause the test program to be compiled using different compilers (GCC, Clang, MSVC), to use different output verbosity levels, to run the test program under valgrind, to check the output for coverage using gcov, and so forth. The th3make script also accepts &quot;*.rc&quot; filenames as arguments. These *.rc files are just collections of other arguments that are commonly used together for a single purpose. For example, the &quot;quick.rc&quot; file contains a set of eight arguments to th3make that run a fast (3-minute) full-coverage test. This allows the operator to type &quot;./th3make quick.rc&quot; as a short-cut to typing out all of the required command-line options. The following are a few of the more than 40 available *.rc files:</source>
          <target state="translated">TH3 には、ワークステーション上でのテストプロセスを自動化するのに役立つ TCL スクリプトが追加で付属しています。th3make&quot; スクリプトは自動的に &quot;mkth3.tcl&quot; と &quot;gcc&quot; を実行し、結果のテストプログラムを実行して結果をチェックします。th3make の引数には、テストに含まれる &quot;*.test&quot; テストモジュールと &quot;*.cfg&quot; コンフィギュレーションが含まれます。th3make への追加オプションとして、異なるコンパイラ (GCC,Clang,MSVC)を使用してテストプログラムをコンパイルしたり、異なる出力冗長度レベルを使用したり、valgrind の下でテストプログラムを実行したり、gcov を使用して出力のカバレッジをチェックしたりすることができます。th3make スクリプトは、引数として &quot;*.rc&quot; ファイル名も受け付けます。これらの *.rc ファイルは、一つの目的のために一般的に使用される他の引数の集合体です。例えば、&quot;quick.rc &quot;ファイルには、高速(3分)フルカバレッジテストを実行するth3makeへの8つの引数のセットが含まれています。これにより、オペレータは &quot;./th3make quick.rc&quot; と入力することで、必要なコマンドラインオプションをすべて入力するショートカットとして使用することができます。以下は、40以上の利用可能な *.rc ファイルの一部です。</target>
        </trans-unit>
        <trans-unit id="a2a05ad4acef3c330bf37c9357e657e9ed2af845" translate="yes" xml:space="preserve">
          <source>TH3 exercises SQLite in a variety of run-time configurations (UTF8 vs UTF16, different pages sizes, varying journal modes, etc.)</source>
          <target state="translated">TH3では、様々なランタイム構成(UTF8とUTF16、ページサイズの違い、ジャーナルモードの違いなど)でSQLiteを演習しています。</target>
        </trans-unit>
        <trans-unit id="f8e21da8c02749a044b3aef819f8092fd00ef786" translate="yes" xml:space="preserve">
          <source>TH3 is a test program generator. The output of TH3 is a program implemented in C-code and intended to be linked against the SQLite library under test. The generated test program is compiled and run on the target platform in order to verify correct operation of SQLite on that platform.</source>
          <target state="translated">TH3 はテストプログラム生成ツールです。TH3 の出力は C コードで実装されたプログラムで、テスト対象の SQLite ライブラリとリンクすることを目的としています。生成されたテストプログラムはコンパイルされ、ターゲットプラットフォーム上で実行され、そのプラットフォーム上でのSQLiteの正しい動作を検証します。</target>
        </trans-unit>
        <trans-unit id="35be3734cb33090a9156032bab76a3246a8875be" translate="yes" xml:space="preserve">
          <source>TH3 is able to run on embedded platforms that lack the support infrastructure of workstations.</source>
          <target state="translated">TH3は、ワークステーションのサポートインフラが不足している組み込みプラットフォームでも動作するようになっています。</target>
        </trans-unit>
        <trans-unit id="924274e45e00b2de29022bcd422e62f257c51552" translate="yes" xml:space="preserve">
          <source>TH3 originated from an effort to test SQLite on &lt;a href=&quot;https://en.wikipedia.org/wiki/Symbian&quot;&gt;SymbianOS&lt;/a&gt;. Prior to TH3, all SQLite tests were run using the &lt;a href=&quot;http://www.tcl.tk/&quot;&gt;TCL&lt;/a&gt; script language, but TCL would not (easily) compile on SymbianOS which made testing difficult. The first attempt to remedy this problem was the &quot;TH1&quot; (Test Harness #1) scripting language - a reimplementation of parts of the TCL language in a more portable form that would compile and run on SymbianOS, and that was sufficient to run the SQLite tests. TH1 did not survive as a standard testing tool for SQLite, but it did find continued service as a scripting language used to customize the &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; version control system. There was also a &quot;Test Harness #2&quot; which was an attempt to create a simple scripting language using operator prefix notation to drive tests. TH3 was the third attempt.</source>
          <target state="translated">TH3は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Symbian&quot;&gt;SymbianOSで&lt;/a&gt; SQLiteをテストする取り組みから生まれました。 TH3以前は、すべてのSQLiteテストは&lt;a href=&quot;http://www.tcl.tk/&quot;&gt;TCL&lt;/a&gt;スクリプト言語を使用して実行されていましたが、TCLはSymbianOSで（簡単に）コンパイルできなかったため、テストが困難でした。この問題を修正する最初の試みは、「TH1」（テストハーネス＃1）スクリプト言語でした。これは、TCL言語の一部を、SymbianOSでコンパイルして実行できる移植性の高い形式で再実装したもので、SQLiteを実行するのに十分でした。テスト。 TH1はSQLiteの標準的なテストツールとしては存続しませんでしたが、&lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossilの&lt;/a&gt;カスタマイズに使用されるスクリプト言語として継続的なサービスを見つけましたバージョン管理システム。「テストハーネス＃2」もありました。これは、オペレータープレフィックス表記を使用してテストを実行する単純なスクリプト言語を作成する試みです。TH3は3回目の試みでした。</target>
        </trans-unit>
        <trans-unit id="2607d86f3f95561abb29b75d3920751195896dbd" translate="yes" xml:space="preserve">
          <source>TH3 tests SQLite in an as-deployed configuration using only published and documented interfaces. In other words, TH3 tests the compiled object code, not the source code, thus verifying that no problems were introduced by compiler bugs. &quot;Test what you fly and fly what you test.&quot;</source>
          <target state="translated">TH3 は、公開されている文書化されたインターフェイスのみを使用して、SQLite をデプロイ時の設定でテストします。つまり、TH3はソースコードではなくコンパイルされたオブジェクトコードをテストするため、コンパイラのバグによって問題が発生しなかったことを検証します。&quot;Test what you fly and fly what you test.&quot;</target>
        </trans-unit>
        <trans-unit id="c87cfbcfb0ff68ef8b8fa0759657744ff88b88af" translate="yes" xml:space="preserve">
          <source>TH3 was originally written for validation testing only, but has subsequently been used for development testing and debugging as well, and has proven very helpful in those roles. A full-coverage test takes less than five minutes on a workstation and hence serves as a fast regression test during day-to-day maintenance of the SQLite code base.</source>
          <target state="translated">TH3 はもともと検証テスト用に書かれたものでしたが、その後開発テストやデバッグにも使用され、これらの役割に非常に役立つことが証明されています。フルカバレッジテストはワークステーションで5分もかからないので、SQLiteコードベースの日々のメンテナンス時の高速なリグレッションテストとしての役割を果たします。</target>
        </trans-unit>
        <trans-unit id="bd7f8a83e07337beedb291a476a0abdb89ed6b4f" translate="yes" xml:space="preserve">
          <source>THEN</source>
          <target state="translated">THEN</target>
        </trans-unit>
        <trans-unit id="2c1d90a10bc6577f471f3c2c8cd6836385b31b82" translate="yes" xml:space="preserve">
          <source>TIES</source>
          <target state="translated">TIES</target>
        </trans-unit>
        <trans-unit id="4fe5a3682f8029783789ec9b3abba10f67f03ffa" translate="yes" xml:space="preserve">
          <source>TINYINT</source>
          <target state="translated">TINYINT</target>
        </trans-unit>
        <trans-unit id="15f51444be75bc88e935c57ef2ee7477dc73a64e" translate="yes" xml:space="preserve">
          <source>TO</source>
          <target state="translated">TO</target>
        </trans-unit>
        <trans-unit id="cd4fd03fe967437fff9a9133b579cdd5421577a6" translate="yes" xml:space="preserve">
          <source>TODO:  Add something about checking the page-cache first etc.</source>
          <target state="translated">TODO:最初にページキャッシュをチェックすることについての何かを追加します。</target>
        </trans-unit>
        <trans-unit id="7fb66aab7e490b4f8a5b13b306c51e116175236a" translate="yes" xml:space="preserve">
          <source>TODO:  After sections 4 and 5 are finished, come back here and see if we can add a list of state items associated with each database connection to make things easier to understand. i.e each database connection has a file handle, a set of entries in the page cache, an expected page size etc.</source>
          <target state="translated">TODO:セクション4と5が終わったら、ここに戻ってきて、各データベース接続に関連付けられた状態項目のリストを追加して、物事を理解しやすくすることができるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="4dc847eb4b63db6446f6040c4f09bb7ba16604ab" translate="yes" xml:space="preserve">
          <source>TODO:  After this document is ready, make the vocabulary consistent and then add a glossary here.</source>
          <target state="translated">TODO:この文書の準備ができたら、語彙を一貫性のあるものにしてから、ここに用語集を追加してください。</target>
        </trans-unit>
        <trans-unit id="f4e2201a943d83ad82ae3edd3d70f87d9d34b73f" translate="yes" xml:space="preserve">
          <source>TODO:  Describe the parameters set to configure the page cache limits.</source>
          <target state="translated">TODO:ページキャッシュの制限を設定するために設定されたパラメータを記述します。</target>
        </trans-unit>
        <trans-unit id="30bb6265750b23e36fff26fba218f095577396da" translate="yes" xml:space="preserve">
          <source>TODO:  Expand on and explain the above a bit.</source>
          <target state="translated">TODO:上記を少し拡大して説明する。</target>
        </trans-unit>
        <trans-unit id="55f19663a5c44b6305b426b72aadfc9a70eb894d" translate="yes" xml:space="preserve">
          <source>TODO:  Introduce the following sub-sections.</source>
          <target state="translated">TODO:以下のサブセクションを紹介します。</target>
        </trans-unit>
        <trans-unit id="593039ec1c1939952bb9949b2bcbe1140a495e60" translate="yes" xml:space="preserve">
          <source>TODO:  Is the shared lock held after committing a</source>
          <target state="translated">TODO:共有ロックをコミットした後、共有ロックは保持されていますか?</target>
        </trans-unit>
        <trans-unit id="c4a151926d0634538ee91af79c910ea2132025f5" translate="yes" xml:space="preserve">
          <source>TODO:  Master journal file pointers?</source>
          <target state="translated">TODO:マスタージャーナルファイルのポインタ?</target>
        </trans-unit>
        <trans-unit id="2c459077da83b75d52b821b2b77b9e73be290e1e" translate="yes" xml:space="preserve">
          <source>TODO:  Requirements describing the way in which the configuration parameters are used. About LRU etc.</source>
          <target state="translated">TODO.設定パラメータの使用方法を記述した要件 LRUなどについて。</target>
        </trans-unit>
        <trans-unit id="f7e945f52e85f69c533b2d7abf6ea281ed104013" translate="yes" xml:space="preserve">
          <source>TODO:  System requirement references for the above points.</source>
          <target state="translated">TODO:上記の点について、システム要件の参照を行います。</target>
        </trans-unit>
        <trans-unit id="840394002935b6f4d9da99212e26895929cd86d7" translate="yes" xml:space="preserve">
          <source>TODO:  What happens if the exclusive lock cannot be obtained? It is not possible for the attempt to upgrade from a reserved to a pending lock to fail.</source>
          <target state="translated">TODO:排他的ロックが取得できない場合はどうなりますか?予約されたロックから保留中のロックへのアップグレードの試みが失敗することはありません。</target>
        </trans-unit>
        <trans-unit id="6714ad8471919f57bc47d379c3524d08542a02be" translate="yes" xml:space="preserve">
          <source>TODO:  Why a 16 byte block? Why not 4? (something to do with encrypted databases).</source>
          <target state="translated">TODO:なぜ16バイトブロックなのか?なぜ4ではないのか?(暗号化されたデータベースに関係するもの)。</target>
        </trans-unit>
        <trans-unit id="2e614c97a332a0295344a53ea5da2a36633b1954" translate="yes" xml:space="preserve">
          <source>TPC-H Q8 is an eight-way join. As observed above, the main task of the query planner is to figure out the best nesting order of the eight loops in order to minimize the work needed to complete the join. A simplified model of this problem for the case of TPC-H Q8 is shown by the following diagram:</source>
          <target state="translated">TPC-H Q8は8方向結合です。上で見たように、クエリプランナの主なタスクは、結合を完了するのに必要な作業を最小化するために、8つのループの最適な入れ子順序を見つけることです。TPC-H Q8の場合のこの問題の簡易モデルを以下の図に示します。</target>
        </trans-unit>
        <trans-unit id="bac722ed74faff65da62171d3c4183479a271d1f" translate="yes" xml:space="preserve">
          <source>TRANSACTION</source>
          <target state="translated">TRANSACTION</target>
        </trans-unit>
        <trans-unit id="c162c076dc07a546449be9e07aa7a5c312ecbfe1" translate="yes" xml:space="preserve">
          <source>TRIGGER</source>
          <target state="translated">TRIGGER</target>
        </trans-unit>
        <trans-unit id="74303786eb95ccd75228db361d37b804576e18e6" translate="yes" xml:space="preserve">
          <source>TRUNCATE</source>
          <target state="translated">TRUNCATE</target>
        </trans-unit>
        <trans-unit id="dc45fdb7de43a003177f8df9ee10d01f58f57a58" translate="yes" xml:space="preserve">
          <source>Table B-Tree Interior Cell (header 0x05):</source>
          <target state="translated">表B-ツリー内部セル(ヘッダ0x05)。</target>
        </trans-unit>
        <trans-unit id="984abe18431413aca60298750d5de10b6d8716c4" translate="yes" xml:space="preserve">
          <source>Table B-Tree Interior Cell:</source>
          <target state="translated">表B-ツリー内部のセル。</target>
        </trans-unit>
        <trans-unit id="94d19a21f457eb5da8f03166c4dbc3a6ef641531" translate="yes" xml:space="preserve">
          <source>Table B-Tree Leaf Cell (header 0x0d):</source>
          <target state="translated">表 B-Tree リーフセル(ヘッダ 0x0d)。</target>
        </trans-unit>
        <trans-unit id="31beedcdbc76a09dd63a101eacf4e15dc87e80c5" translate="yes" xml:space="preserve">
          <source>Table B-Tree Leaf Cell:</source>
          <target state="translated">表B-木の葉のセル。</target>
        </trans-unit>
        <trans-unit id="cdad59a82a2e26e2fc2225d0629f7733aef385c4" translate="yes" xml:space="preserve">
          <source>Table Column Names</source>
          <target state="translated">テーブルカラム名</target>
        </trans-unit>
        <trans-unit id="1225362d8c3c05de317acf9684ffe2e1a7649c08" translate="yes" xml:space="preserve">
          <source>Table Interior (0x05)</source>
          <target state="translated">テーブル内部 (0x05)</target>
        </trans-unit>
        <trans-unit id="de156b09866349ad52b0a535e8144a86d129a154" translate="yes" xml:space="preserve">
          <source>Table Leaf (0x0d)</source>
          <target state="translated">テーブルリーフ(0x0d</target>
        </trans-unit>
        <trans-unit id="c27c7c360e130231f97ba874c98e3448dd648d35" translate="yes" xml:space="preserve">
          <source>Table Name</source>
          <target state="translated">テーブル名</target>
        </trans-unit>
        <trans-unit id="6a975d3ec2f404cfb761b1314fc6745ca72f942e" translate="yes" xml:space="preserve">
          <source>Table b-tree</source>
          <target state="translated">表b-木</target>
        </trans-unit>
        <trans-unit id="92db13efcb630c92ecf1220fd763e9d0e237c97e" translate="yes" xml:space="preserve">
          <source>Table name</source>
          <target state="translated">テーブル名</target>
        </trans-unit>
        <trans-unit id="70aee3388a925e7cbb0852fe8dcdd4c402a95fd1" translate="yes" xml:space="preserve">
          <source>Table zTable does not exist within database zDb,</source>
          <target state="translated">テーブル zTable がデータベース zDb 内に存在しません。</target>
        </trans-unit>
        <trans-unit id="8886ec4df0da407409b6e2c6457e09d78592c0c0" translate="yes" xml:space="preserve">
          <source>Table zTable is a WITHOUT ROWID table,</source>
          <target state="translated">テーブル zTable は、WITHOUT ROWID テーブルです。</target>
        </trans-unit>
        <trans-unit id="053f4c073c904977c9ac1e40ab060f8397a0907f" translate="yes" xml:space="preserve">
          <source>Table-name must already exists as a table. File-name must exist, and each row must contain the same number of columns as defined in the table. If a line in the file contains more or less than the number of columns defined, the copy method rollbacks any inserts, and returns an error.</source>
          <target state="translated">テーブル名は、テーブルとして既に存在している必要があります。ファイル名が存在し、各行にはテーブルで定義されているのと同じ数の列が含まれていなければなりません。ファイル内の行に定義されている列数よりも多い、または少ない列数が含まれている場合、コピーメソッドは挿入をロールバックし、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="aea731c8e5cbf2292cf08d50a7760fa0d709eb35" translate="yes" xml:space="preserve">
          <source>Table-valued Functions In The FROM Clause</source>
          <target state="translated">FROM句でのテーブル値関数</target>
        </trans-unit>
        <trans-unit id="fc3ba8bea68a8b6f73ff90024cfd6082eaf4a791" translate="yes" xml:space="preserve">
          <source>Table-valued functions</source>
          <target state="translated">テーブル値関数</target>
        </trans-unit>
        <trans-unit id="b503117e6dd30a0beff0cc1ab7fb7d005000dd03" translate="yes" xml:space="preserve">
          <source>Table-valued functions exist only for PRAGMAs that return results and that have no side-effects.</source>
          <target state="translated">テーブル値関数は、結果を返し、副作用のないPRAGMAに対してのみ存在します。</target>
        </trans-unit>
        <trans-unit id="f155ed85208e2d25c37ff0660af9e88e0ce41331" translate="yes" xml:space="preserve">
          <source>Table-valued functions exist only for built-in PRAGMAs, not for PRAGMAs defined using the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpragma&quot;&gt;SQLITE_FCNTL_PRAGMA&lt;/a&gt; file control.</source>
          <target state="translated">テーブル値関数は、組み込みのPRAGMAにのみ存在し、&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpragma&quot;&gt;SQLITE_FCNTL_PRAGMA&lt;/a&gt;ファイルコントロールを使用して定義されたPRAGMAには存在しません。</target>
        </trans-unit>
        <trans-unit id="81ea5c3f4a86eb9511e7fd13ab5c2a7a105f6e9f" translate="yes" xml:space="preserve">
          <source>TableLock</source>
          <target state="translated">TableLock</target>
        </trans-unit>
        <trans-unit id="c52e87aa9f54904a290a1ea1125feb8f0b12b884" translate="yes" xml:space="preserve">
          <source>Tables are removed using the &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; statement.</source>
          <target state="translated">テーブルは、&lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt;ステートメントを使用して削除されます。</target>
        </trans-unit>
        <trans-unit id="5bee9f4ba2588a4abe8a5e77c961e698fb909d93" translate="yes" xml:space="preserve">
          <source>Tables created using CREATE TABLE AS are initially populated with the rows of data returned by the SELECT statement. Rows are assigned contiguously ascending &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; values, starting with 1, in the &lt;a href=&quot;lang_select#orderby&quot;&gt;order&lt;/a&gt; that they are returned by the SELECT statement.</source>
          <target state="translated">CREATE TABLE ASを使用して作成されたテーブルには、最初にSELECTステートメントによって返されたデータの行が入力されます。行には、SELECTステートメントによって返される&lt;a href=&quot;lang_select#orderby&quot;&gt;順序&lt;/a&gt;で、1から始まる連続した昇順の&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;値が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="0b08405f06556bfc4a2cd40880fee5d5df353fe5" translate="yes" xml:space="preserve">
          <source>Tables created using the &quot;CREATE TEMP TABLE&quot; syntax are only visible to the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; in which the &quot;CREATE TEMP TABLE&quot; statement is originally evaluated. These TEMP tables, together with any associated indices, triggers, and views, are collectively stored in a separate temporary database file that is created as soon as the first &quot;CREATE TEMP TABLE&quot; statement is seen. This separate temporary database file also has an associated rollback journal. The temporary database file used to store TEMP tables is deleted automatically when the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; is closed using &lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close()&lt;/a&gt;.</source>
          <target state="translated">「CREATE TEMP TABLE」構文を使用して作成されたテーブルは、「CREATE TEMP TABLE」ステートメントが最初に評価された&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;でのみ表示されます。これらのTEMPテーブルは、関連するインデックス、トリガー、およびビューとともに、最初の &quot;CREATE TEMP TABLE&quot;ステートメントが表示されるとすぐに作成される別の一時データベースファイルにまとめて保存されます。この個別の一時データベースファイルには、関連するロールバックジャーナルもあります。 TEMPテーブルの格納に使用される一時データベースファイルは、&lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close（）&lt;/a&gt;を使用して&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;が閉じられると自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="398c675fc2fa417398cf9f153388d4a182136954" translate="yes" xml:space="preserve">
          <source>Tables in an attached database can be referred to using the syntax</source>
          <target state="translated">アタッチされたデータベースのテーブルは、以下の構文を使用して参照することができます。</target>
        </trans-unit>
        <trans-unit id="230baa2e574ece0e6ffe7c574dcbbb9cd18fff76" translate="yes" xml:space="preserve">
          <source>Tables with names of the form &quot;sqlite_statN&quot; where N is an integer. Such tables store database statistics gathered by the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command and used by the query planner to help determine the best algorithm to use for each query.</source>
          <target state="translated">&quot;sqlite_statN&quot;という形式の名前を持つテーブル。Nは整数です。このようなテーブルは、&lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt;コマンドによって収集され、クエリプランナーが各クエリに使用する最適なアルゴリズムを決定するのに役立つデータベース統計を格納します。</target>
        </trans-unit>
        <trans-unit id="6dbeddaf590f294decd7c12cd9b3ac14168d3997" translate="yes" xml:space="preserve">
          <source>Take advantage of the atomic-write capabilities in the &lt;a href=&quot;https://en.wikipedia.org/wiki/F2FS&quot;&gt;F2FS filesystem&lt;/a&gt; when available, for greatly reduced transaction overhead. This currently requires the &lt;a href=&quot;compile#enable_batch_atomic_write&quot;&gt;SQLITE_ENABLE_BATCH_ATOMIC_WRITE&lt;/a&gt; compile-time option.</source>
          <target state="translated">トランザクションのオーバーヘッドを大幅に削減するために、&lt;a href=&quot;https://en.wikipedia.org/wiki/F2FS&quot;&gt;F2FSファイルシステム&lt;/a&gt;のアトミック書き込み機能を利用できる場合はそれを利用してください。これには現在、&lt;a href=&quot;compile#enable_batch_atomic_write&quot;&gt;SQLITE_ENABLE_BATCH_ATOMIC_WRITE&lt;/a&gt;コンパイル時オプションが必要です。</target>
        </trans-unit>
        <trans-unit id="acf997da6bf4365bf440bc3ad9c07d7d7925e743" translate="yes" xml:space="preserve">
          <source>Take into account the fact WHERE clause terms that cannot be used with indices still probably reduce the number of output rows.</source>
          <target state="translated">インデックスを使用できないWHERE句の用語は、おそらく出力行の数を減らすという事実を考慮に入れてください。</target>
        </trans-unit>
        <trans-unit id="c2975a6466c6b11f1519a6c8652f37b3cef0c265" translate="yes" xml:space="preserve">
          <source>Take the bit-wise AND of the values in register P1 and P2 and store the result in register P3. If either input is NULL, the result is NULL.</source>
          <target state="translated">レジスタP1とP2の値をビット単位でANDし、その結果をレジスタP3に格納します。どちらかの入力がNULLの場合、結果はNULLになります。</target>
        </trans-unit>
        <trans-unit id="23882df60c1b18a8b147b1926280887dfe7acb8a" translate="yes" xml:space="preserve">
          <source>Take the bit-wise OR of the values in register P1 and P2 and store the result in register P3. If either input is NULL, the result is NULL.</source>
          <target state="translated">レジスタP1とP2の値をビット単位でORし、その結果をレジスタP3に格納します。どちらかの入力がNULLの場合、結果はNULLになります。</target>
        </trans-unit>
        <trans-unit id="6a0b05dea29609663a6574c364045bd831c5b261" translate="yes" xml:space="preserve">
          <source>Take the logical AND of the values in registers P1 and P2 and write the result into register P3.</source>
          <target state="translated">レジスタP1とP2の値の論理ANDを取り、その結果をレジスタP3に書き込む。</target>
        </trans-unit>
        <trans-unit id="9fe2090d6b7e599d38b33eca83b4b2c09d8a131d" translate="yes" xml:space="preserve">
          <source>Take the logical OR of the values in register P1 and P2 and store the answer in register P3.</source>
          <target state="translated">レジスタP1とP2の値の論理和を取り、その答えをレジスタP3に格納します。</target>
        </trans-unit>
        <trans-unit id="86743ec77172a00f99a2bc089314b61779948598" translate="yes" xml:space="preserve">
          <source>Taking into consideration all of the above, the SQLite developers recommend compiling SQLite using GCC-7 with the -Os optimization setting.</source>
          <target state="translated">以上のことを考慮して、SQLite開発者は、GCC-7を使用してSQLiteをコンパイルする際に、-Osの最適化設定を行うことを推奨しています。</target>
        </trans-unit>
        <trans-unit id="76c9ad6f3798c330d93462b6d6a9dc1c1bbb0620" translate="yes" xml:space="preserve">
          <source>Tarball</source>
          <target state="translated">Tarball</target>
        </trans-unit>
        <trans-unit id="81919e9867e82f4145f1c83ee343766917076a71" translate="yes" xml:space="preserve">
          <source>Tcl Interface</source>
          <target state="translated">Tcl インタフェース</target>
        </trans-unit>
        <trans-unit id="5962096d8eee555590e081b0968ff7c28d5fa0d8" translate="yes" xml:space="preserve">
          <source>Tcl command. Here is an example of opening and then immediately closing a database:</source>
          <target state="translated">Tclコマンドです。データベースを開いてすぐに閉じる例を示します。</target>
        </trans-unit>
        <trans-unit id="30d70929c5f61502f6c778af83fbc14057a6c36d" translate="yes" xml:space="preserve">
          <source>Tcl interface allows BLOB values to be transferred to user-defined functions</source>
          <target state="translated">Tcl インタフェースにより、BLOB 値をユーザー定義関数に転送することができます。</target>
        </trans-unit>
        <trans-unit id="82fe9aa4119c1f18902f153a0d50a82f529e5cfb" translate="yes" xml:space="preserve">
          <source>Tcl variable names can appear in the SQL statement of the second argument in any position where it is legal to put a string or number literal. The value of the variable is substituted for the variable name. If the variable does not exist a NULL values is used. For example:</source>
          <target state="translated">Tclの変数名は、第2引数のSQL文の中で、文字列や数値リテラルを置くことが適法である任意の位置に出現させることができます。変数の値が変数名に置き換えられます。変数が存在しない場合は、NULL値が使用されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2087e1ec9a4eee3edea091cbf4ce24dad9709230" translate="yes" xml:space="preserve">
          <source>Technical and Design Documentation</source>
          <target state="translated">技術資料と設計資料</target>
        </trans-unit>
        <trans-unit id="b6d6d722a0223fd3e9343b1f4796db6a665b091d" translate="yes" xml:space="preserve">
          <source>Temporary Databases</source>
          <target state="translated">テンポラリーデータベース</target>
        </trans-unit>
        <trans-unit id="6035a1db7f899a29bfadee59c52d9c07fdd98c4f" translate="yes" xml:space="preserve">
          <source>Temporary Files Used By SQLite</source>
          <target state="translated">SQLite で使用される一時ファイル</target>
        </trans-unit>
        <trans-unit id="9fb2a1ec0fce944f3e17c8ab4b4f05b81d7ac8a9" translate="yes" xml:space="preserve">
          <source>Temporary directory search algorithm</source>
          <target state="translated">テンポラリーディレクトリ検索アルゴリズム</target>
        </trans-unit>
        <trans-unit id="72f84f0ca9f1ad9f151e46cd589374308dcbfc81" translate="yes" xml:space="preserve">
          <source>Temporary files are always stored in memory regardless of the setting of the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマの&lt;/a&gt;設定に関係なく、一時ファイルは常にメモリに保存されます。</target>
        </trans-unit>
        <trans-unit id="92a5156680aa1ea2c11db1f65a26abbd9db39a63" translate="yes" xml:space="preserve">
          <source>Temporary files are always stored on disk regardless of the setting of the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマの&lt;/a&gt;設定に関係なく、一時ファイルは常にディスクに保存されます。</target>
        </trans-unit>
        <trans-unit id="7777ca8353568841ffb0454d79b2cf5d09f1f51b" translate="yes" xml:space="preserve">
          <source>Temporary files are now automatically deleted by the operating system when closed. There are no more dangling temporary files on a program crash. (If the OS crashes, fsck will delete the file after reboot under Unix. I do not know what happens under Windows.)</source>
          <target state="translated">一時ファイルは、閉じたときにオペレーティングシステムによって自動的に削除されるようになりました。プログラムクラッシュ時に一時ファイルがぶら下がることがなくなりました。(OSがクラッシュした場合、Unixでは再起動後にfsckがファイルを削除します。Windowsではどうなるのかは知りません)。</target>
        </trans-unit>
        <trans-unit id="96da9e1a1910e6d40a0e879229d60b3a31a1bf7a" translate="yes" xml:space="preserve">
          <source>Temporary files are stored in memory by default but this can be overridden by the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt;.</source>
          <target state="translated">一時ファイルはデフォルトでメモリに保存されますが、これは&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマ&lt;/a&gt;によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="11e15117ca75e55537b6f5f3dded721aee297def" translate="yes" xml:space="preserve">
          <source>Temporary files are stored on disk by default but this can be overridden by the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt;.</source>
          <target state="translated">一時ファイルはデフォルトでディスクに保存されますが、これは&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマ&lt;/a&gt;によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="7500f7d38f84089cbb32d6695814260f35c022d2" translate="yes" xml:space="preserve">
          <source>Temporary journal files are created as part of transaction control, but those extra files are not part of the steady-state database.</source>
          <target state="translated">一時的なジャーナル・ファイルはトランザクション制御の一部として作成されますが、これらの余分なファイルは定常状態データベースの一部ではありません。</target>
        </trans-unit>
        <trans-unit id="455a1e08ff236bc4fc37f10c45a4f1a9d962e921" translate="yes" xml:space="preserve">
          <source>Temporary tables</source>
          <target state="translated">仮設テーブル</target>
        </trans-unit>
        <trans-unit id="4dff3aa4061b74df07e184cd766c027d8d0851b5" translate="yes" xml:space="preserve">
          <source>Terminate the sqlite3 program by typing your system End-Of-File character (usually a Control-D). Use the interrupt character (usually a Control-C) to stop a long-running SQL statement.</source>
          <target state="translated">システムのEnd-Of-File文字(通常はControl-D)を入力してsqlite3プログラムを終了させてください。割り込み文字(通常はControl-C)を使用して、実行中のSQL文を停止させます。</target>
        </trans-unit>
        <trans-unit id="f859f91a5306999f44ef0e2194daef49cbdeb611" translate="yes" xml:space="preserve">
          <source>Terminating a read-only transaction.</source>
          <target state="translated">読み取り専用のトランザクションを終了します。</target>
        </trans-unit>
        <trans-unit id="46428866c7ab286d2c6ac557b2373b6b72377ee3" translate="yes" xml:space="preserve">
          <source>Terms of the ORDER BY clause that is part of a &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement may be assigned a collating sequence using the &lt;a href=&quot;lang_expr#collateop&quot;&gt;COLLATE operator&lt;/a&gt;, in which case the specified collating function is used for sorting. Otherwise, if the expression sorted by an ORDER BY clause is a column, then the collating sequence of the column is used to determine sort order. If the expression is not a column and has no COLLATE clause, then the BINARY collating sequence is used.</source>
          <target state="translated">&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;ステートメントの一部であるORDER BY句の条件には、&lt;a href=&quot;lang_expr#collateop&quot;&gt;COLLATE演算子&lt;/a&gt;を使用して照合シーケンスを割り当てることができます。その場合、指定された照合関数がソートに使用されます。それ以外の場合、ORDER BY句で並べ替えられた式が列の場合、列の照合シーケンスを使用して並べ替え順序が決定されます。式が列ではなく、COLLATE句がない場合、BINARY照合シーケンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="1cb252ee8cea482226d27c4a24f04af58befef27" translate="yes" xml:space="preserve">
          <source>Terms of the WHERE clause can be manually disqualified for use with indices by prepending a unary *+* operator to the column name. The unary *+* is a no-op and will not generate any byte code in the prepared statement. But the unary *+* operator will prevent the term from constraining an index. So, in the example above, if the query were rewritten as:</source>
          <target state="translated">WHERE句の用語は、列名の前に単項演算子*+*を付加することで、インデックスでの使用を手動で無効にすることができます。単項演算子 *+*は無効であり、準備された文の中にバイトコードを生成しません。しかし、単項演算子 *+*は、項がインデックスを制約することを防ぎます。そこで、上の例では、クエリが次のように書き換えられていたとします。</target>
        </trans-unit>
        <trans-unit id="db8a7aee242ffd686d07e20367e523410ddf047e" translate="yes" xml:space="preserve">
          <source>Test 10: 25000 text UPDATEs with an index</source>
          <target state="translated">テスト10:インデックスを持つ25000テキストのUPDATE</target>
        </trans-unit>
        <trans-unit id="aacbc05d861c7b90deae327687214123e261d5d7" translate="yes" xml:space="preserve">
          <source>Test 11: INSERTs from a SELECT</source>
          <target state="translated">テスト11:SELECTからのINSERT</target>
        </trans-unit>
        <trans-unit id="aca64bdf90089bb1a7f070072ce5ba7eb929e0ca" translate="yes" xml:space="preserve">
          <source>Test 12: DELETE without an index</source>
          <target state="translated">テスト12:インデックスなしのDELETE</target>
        </trans-unit>
        <trans-unit id="24752c37e60c377f791b489053904e7999992109" translate="yes" xml:space="preserve">
          <source>Test 13: DELETE with an index</source>
          <target state="translated">テスト13:インデックスを使ったDELETE</target>
        </trans-unit>
        <trans-unit id="00cb0edebe54a9c5c407d066d9fcba0da202194b" translate="yes" xml:space="preserve">
          <source>Test 14: A big INSERT after a big DELETE</source>
          <target state="translated">テスト14:大きなDELETEの後の大きなINSERT</target>
        </trans-unit>
        <trans-unit id="8033466c1d65a1a2a0c68dc77e0e42697e35f88b" translate="yes" xml:space="preserve">
          <source>Test 15: A big DELETE followed by many small INSERTs</source>
          <target state="translated">テスト15:多くの小さなINSERTが続く大きなDELETE</target>
        </trans-unit>
        <trans-unit id="391b748d4bf30ad6ba35b1537b20fb9263b9be11" translate="yes" xml:space="preserve">
          <source>Test 16: DROP TABLE</source>
          <target state="translated">テスト16:DROP TABLE</target>
        </trans-unit>
        <trans-unit id="700f1cfb18cec62b7bd8f4bd15b16b69774b094a" translate="yes" xml:space="preserve">
          <source>Test 1: 1000 INSERTs</source>
          <target state="translated">テスト1:1000個のINSERT</target>
        </trans-unit>
        <trans-unit id="a74380705222d36f436d75c90099251831b68c6d" translate="yes" xml:space="preserve">
          <source>Test 2: 25000 INSERTs in a transaction</source>
          <target state="translated">テスト2:トランザクション内の25000 INSERT</target>
        </trans-unit>
        <trans-unit id="d01c89b36c5ea1e456013c3cc10174d42005deaa" translate="yes" xml:space="preserve">
          <source>Test 3: 25000 INSERTs into an indexed table</source>
          <target state="translated">テスト3:インデックス付きテーブルへの25000 INSERT</target>
        </trans-unit>
        <trans-unit id="5150380a9467a7720fe9216afc4866b3aea9f992" translate="yes" xml:space="preserve">
          <source>Test 4: 100 SELECTs without an index</source>
          <target state="translated">テスト4:インデックスのないSELECTを100個</target>
        </trans-unit>
        <trans-unit id="2d07089542c5b6e56dea3631a868016dd2267c55" translate="yes" xml:space="preserve">
          <source>Test 5: 100 SELECTs on a string comparison</source>
          <target state="translated">テスト5:文字列の比較で100のSELECTを行う</target>
        </trans-unit>
        <trans-unit id="1ee313e9981650c288efefb71dc3528b68b2a91a" translate="yes" xml:space="preserve">
          <source>Test 6: Creating an index</source>
          <target state="translated">テスト6:インデックスの作成</target>
        </trans-unit>
        <trans-unit id="e0797e7844f18b5e63c9d2f6207a7266e87d829e" translate="yes" xml:space="preserve">
          <source>Test 7: 5000 SELECTs with an index</source>
          <target state="translated">テスト7:インデックスを持つ5000個のSELECT</target>
        </trans-unit>
        <trans-unit id="fccbfc70f55db2b38d057e5e2decb47d90df070e" translate="yes" xml:space="preserve">
          <source>Test 8: 1000 UPDATEs without an index</source>
          <target state="translated">テスト8:インデックスなしの1000 UPDATE</target>
        </trans-unit>
        <trans-unit id="47ad12d810778d98e72de67605dc988105d4b09b" translate="yes" xml:space="preserve">
          <source>Test 9: 25000 UPDATEs with an index</source>
          <target state="translated">テスト9:インデックスを持つ25000回のUPDATE</target>
        </trans-unit>
        <trans-unit id="18a302ee283ea042f30ca2cb852a2846f97c9413" translate="yes" xml:space="preserve">
          <source>Test Code</source>
          <target state="translated">テストコード</target>
        </trans-unit>
        <trans-unit id="fbcf57d6160711801ae44b031c459127add7faaa" translate="yes" xml:space="preserve">
          <source>Test Environment</source>
          <target state="translated">テスト環境</target>
        </trans-unit>
        <trans-unit id="a76dd0a3dd495aa45fe2a39614c44782afcb01ca" translate="yes" xml:space="preserve">
          <source>Test For Auto-Commit Mode</source>
          <target state="translated">自動コミットモードのテスト</target>
        </trans-unit>
        <trans-unit id="c05597ed0dba53dda21d6b294858039879f34b2b" translate="yes" xml:space="preserve">
          <source>Test To See If The Library Is Threadsafe</source>
          <target state="translated">ライブラリがスレッドセーフかどうかのテスト</target>
        </trans-unit>
        <trans-unit id="02446da6bfd0c0c261b870c2d7a5bfb426f2969d" translate="yes" xml:space="preserve">
          <source>Test data unavailable.</source>
          <target state="translated">テストデータが利用できません。</target>
        </trans-unit>
        <trans-unit id="a364e52356a7ca07cff67161e3755ffa1a5b6b19" translate="yes" xml:space="preserve">
          <source>Test if a changeset has recorded any changes</source>
          <target state="translated">チェンジセットに変更が記録されているかどうかをテストする</target>
        </trans-unit>
        <trans-unit id="0687fd76855654ace6e8592132670b232e8466bb" translate="yes" xml:space="preserve">
          <source>Test if a changeset has recorded any changes.</source>
          <target state="translated">チェンジセットに変更が記録されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="975278e4cf4ae85f07454f0bd57ddce6fc5bd9a5" translate="yes" xml:space="preserve">
          <source>Testcase macros are also used when two or more cases of a switch statement go to the same block of code, to make sure that the code was reached for all cases:</source>
          <target state="translated">テストケースマクロは、switch文の2つ以上のケースが同じコードブロックに行く場合にも使用され、すべてのケースでコードが到達したことを確認するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c5d38ba7cbc400f9b209719e16e540214a64776c" translate="yes" xml:space="preserve">
          <source>Testing Interface</source>
          <target state="translated">テストインタフェース</target>
        </trans-unit>
        <trans-unit id="8adc754de4730d9303e4e9dfdc04c11250d45d3c" translate="yes" xml:space="preserve">
          <source>Testing Interface Operation Codes</source>
          <target state="translated">テストインタフェース操作コード</target>
        </trans-unit>
        <trans-unit id="61b27896db003bc4e45807f83422aff3b0ba8af9" translate="yes" xml:space="preserve">
          <source>Testing of both source code and object code</source>
          <target state="translated">ソースコードとオブジェクトコードの両方のテスト</target>
        </trans-unit>
        <trans-unit id="e1859263f675753d24029e449e12bbca3196f641" translate="yes" xml:space="preserve">
          <source>Testing on multiple platforms and with multiple compilers</source>
          <target state="translated">複数のプラットフォームと複数のコンパイラでのテスト</target>
        </trans-unit>
        <trans-unit id="c9efb9d787a1a844d9d75c706c96b2d104de210f" translate="yes" xml:space="preserve">
          <source>Text Encodings</source>
          <target state="translated">テキストエンコーディング</target>
        </trans-unit>
        <trans-unit id="104683d616e58eaef10d6dc4873ecdc3df7b2908" translate="yes" xml:space="preserve">
          <source>Text encoding</source>
          <target state="translated">テキストエンコーディング</target>
        </trans-unit>
        <trans-unit id="e12c4eeb80ad1f4c53769014c35b62416e040202" translate="yes" xml:space="preserve">
          <source>Text files read by the COPY command can now have line terminators of LF, CRLF, or CR.</source>
          <target state="translated">COPYコマンドで読み込まれたテキストファイルにLF、CRLF、CRの行終端文字を付けることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="cc9a8c0f2eca40d02a98349a624352ec809c4662" translate="yes" xml:space="preserve">
          <source>Text is appended to the sqlite3_str object using various methods, such as &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendf()&lt;/a&gt;.</source>
          <target state="translated">テキストは、&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendf（）&lt;/a&gt;などのさまざまなメソッドを使用してsqlite3_strオブジェクトに追加されます。</target>
        </trans-unit>
        <trans-unit id="3f06b000ef5df2cf2524013049769bc8b85cadef" translate="yes" xml:space="preserve">
          <source>Text is appended to the sqlite3_str object using various methods, such as &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendf()&lt;/a&gt;.</source>
          <target state="translated">テキストは、&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendf（）&lt;/a&gt;などのさまざまなメソッドを使用してsqlite3_strオブジェクトに追加されます。</target>
        </trans-unit>
        <trans-unit id="65ebd99ce12ebe199710e41e33f5f3620f55ed7a" translate="yes" xml:space="preserve">
          <source>Text values (odd serial types 13 and larger) sort after numeric values in the order determined by the columns &lt;a href=&quot;datatype3#collation&quot;&gt;collating function&lt;/a&gt;.</source>
          <target state="translated">テキスト値（奇数シリアルタイプ13以上）は、列&lt;a href=&quot;datatype3#collation&quot;&gt;照合関数&lt;/a&gt;によって決定された順序で数値の後にソートされます。</target>
        </trans-unit>
        <trans-unit id="beca9771feb98f615524a1df72482f4458f93607" translate="yes" xml:space="preserve">
          <source>Text values come after numerics</source>
          <target state="translated">テキスト値は数値の後に来る</target>
        </trans-unit>
        <trans-unit id="938716cf9d2d773dc94de020d7864e49e44b2b9d" translate="yes" xml:space="preserve">
          <source>Th functionality described in this section may be integrated into other applications or tools using the &lt;a href=&quot;http://www.sqlite.org/src/dir?ci=trunk&amp;amp;name=ext/expert&quot;&gt; SQLite expert extension&lt;/a&gt; code.</source>
          <target state="translated">このセクションで説明する機能は、&lt;a href=&quot;http://www.sqlite.org/src/dir?ci=trunk&amp;amp;name=ext/expert&quot;&gt;SQLiteエキスパート拡張&lt;/a&gt;コードを使用して他のアプリケーションまたはツールに統合できます。</target>
        </trans-unit>
        <trans-unit id="5401c7212b5c2e26aee89d6b33a167be2b97f64d" translate="yes" xml:space="preserve">
          <source>That command only works as written on Windows. The equivalent line on a Mac would be:</source>
          <target state="translated">このコマンドは Windows 上でしか動作しません。Macでは、これに相当する行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5b3c3c06cd257877a1f47703881aa426e835ba23" translate="yes" xml:space="preserve">
          <source>That last command is the same &quot;ui&quot; command that we ran before. It starts a mini-webserver running and points your web browser at it. But this time we didn't have to specify the repository file because we are located inside a checkout and so fossil can figure out the repository for itself. If you want to type in the repository filename as the second argument, you can. But it is optional.</source>
          <target state="translated">最後のコマンドは、前に実行したのと同じ &quot;ui&quot; コマンドです。ミニウエブサーバを起動して、そこにウェブブラウザを向けます。しかし、今回はリポジトリファイルを指定する必要はありませんでした。第二引数にリポジトリファイル名を入力したい場合は、入力しても構いません。しかし、これは任意です。</target>
        </trans-unit>
        <trans-unit id="3ec5cf39a76e0d09154e1a51128f437190f411ce" translate="yes" xml:space="preserve">
          <source>That said, there are a number of things that external programs or bugs in your hardware or OS can do to corrupt a database file. See &lt;a href=&quot;howtocorrupt&quot;&gt;How To Corrupt An SQLite Database File&lt;/a&gt; for further information.</source>
          <target state="translated">そうは言っても、ハードウェアやOSの外部プログラムやバグがデータベースファイルを破壊するためにできることはたくさんあります。詳細については、&lt;a href=&quot;howtocorrupt&quot;&gt;SQLiteデータベースファイルを破損する方法を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ac09579911e9129dbe219b67c0bf67a294beccfa" translate="yes" xml:space="preserve">
          <source>That statement is ambiguous, having at least two possible interpretations:</source>
          <target state="translated">その文は曖昧で、少なくとも2つの解釈が考えられます。</target>
        </trans-unit>
        <trans-unit id="c679c2a5140d95b7fe5e7a9c937890448e4790a5" translate="yes" xml:space="preserve">
          <source>That there are the same number of entries in the %_parent table as there are non-leaf cells in the r-tree structure, and that there is a non-leaf cell that corresponds to each entry in the %_parent table.</source>
          <target state="translated">r-tree 構造内に非リーフ・セルがあるのと同じ数の %_parent テーブル内のエントリがあり、%_parent テーブル内の各エントリに対応する非リーフ・セルがあること。</target>
        </trans-unit>
        <trans-unit id="9bc14fa3c4653db3dfe511c9da292c9e32677da7" translate="yes" xml:space="preserve">
          <source>That there are the same number of entries in the %_rowid table as there are leaf cells in the r-tree structure, and that there is a leaf cell that corresponds to each entry in the %_rowid table.</source>
          <target state="translated">r-tree 構造内にリーフ・セルがあるのと同じ数の %_rowid テーブル内のエントリがあり、%_rowid テーブル内の各エントリに対応するリーフ・セルがあること。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="c3fcc1dd87de9c9ad15a933b970c62ff1decbfcb" translate="yes" xml:space="preserve">
          <source>The &quot;%&quot; in the name of each shadow table is replaced by the name of the R*Tree virtual table. So, if the name of the R*Tree table is &quot;xyz&quot; then the three shadow tables would be &quot;xyz_node&quot;, &quot;xyz_parent&quot;, and &quot;xyz_rowid&quot;.</source>
          <target state="translated">各シャドウ・テーブルの名前の「%」は、R*Tree仮想テーブルの名前に置き換えられます。つまり、R*Tree テーブルの名前が &quot;xyz&quot; である場合、3 つのシャドウ・テーブルは &quot;xyz_node&quot;、&quot;xyz_parent&quot;、および &quot;xyz_rowid&quot; となります。</target>
        </trans-unit>
        <trans-unit id="c0ac1d4dc22d0f78dbeef0512926462de5ac6f42" translate="yes" xml:space="preserve">
          <source>The &quot;-1&quot; term at the start of the formula is not found in most implementations of the BM25 algorithm. Without it, a better match is assigned a numerically higher BM25 score. Since the default sorting order is &quot;ascending&quot;, this means that appending &quot;ORDER BY bm25(fts)&quot; to a query would cause results to be returned in order from worst to best. The &quot;DESC&quot; keyword would be required in order to return the best matches first. In order to avoid this pitfall, the FTS5 implementation of BM25 multiplies the result by -1 before returning it, ensuring that better matches are assigned numerically lower scores.</source>
          <target state="translated">式の最初にある「-1」という用語は、BM25 アルゴリズムのほとんどの実装では見られません。この項がない場合、より良いマッチは数値的に高いBM25スコアが割り当てられます。デフォルトのソート順は &quot;昇順 &quot;なので、クエリに &quot;ORDER BY bm25(fts)&quot;を追加すると、結果が悪い順から良い順に返されることになります。ベストマッチを最初に返すためには、&quot;DESC &quot;キーワードが必要になります。この落とし穴を回避するために、FTS5のBM25の実装では、結果を返す前に結果に-1を乗算し、より良いマッチの方がより低いスコアが数値的に割り当てられるようにしています。</target>
        </trans-unit>
        <trans-unit id="e8a8a21328c61527fb3df55781ac56d188f8d80f" translate="yes" xml:space="preserve">
          <source>The &quot;.archive&quot; dot-command and the &quot;-A&quot; command-line option provide built-in support for the &lt;a href=&quot;sqlar&quot;&gt;SQLite Archive format&lt;/a&gt;. The interface is similar to that of the &quot;tar&quot; command on unix systems. Each invocation of the &quot;.ar&quot; command must specify a single command option. The following commands are available for &quot;.archive&quot;:</source>
          <target state="translated">「.archive」ドットコマンドと「-A」コマンドラインオプションは、&lt;a href=&quot;sqlar&quot;&gt;SQLiteアーカイブ形式の&lt;/a&gt;組み込みサポートを提供します。インターフェースは、UNIXシステムの「tar」コマンドのインターフェースに似ています。「.ar」コマンドを呼び出すたびに、単一のコマンドオプションを指定する必要があります。「.archive」では次のコマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="83487a27f6e8c5a3e4b3ee1c0c3210033e4ad993" translate="yes" xml:space="preserve">
          <source>The &quot;.breakpoint&quot; command in the CLI does nothing but invoke the procedure named &quot;test_breakpoint()&quot;, which is a no-op.</source>
          <target state="translated">CLIの&quot;.breakpoint &quot;コマンドは、&quot;test_breakpoint()&quot;という名前のプロシージャを呼び出すだけで、何もしません。</target>
        </trans-unit>
        <trans-unit id="469a3442411a65b2a429f963b79791f612ed7d6e" translate="yes" xml:space="preserve">
          <source>The &quot;.databases&quot; command shows a list of all databases open in the current connection. There will always be at least 2. The first one is &quot;main&quot;, the original database opened. The second is &quot;temp&quot;, the database used for temporary tables. There may be additional databases listed for databases attached using the ATTACH statement. The first output column is the name the database is attached with, and the second column is the filename of the external file.</source>
          <target state="translated">.databases &quot;コマンドは、現在の接続で開いているすべてのデータベースのリストを表示します。最初のものは &quot;main &quot;で、元のデータベースが開かれています。2つ目は &quot;temp &quot;で、一時的なテーブルに使用されるデータベースです。ATTACH文を使用してアタッチされたデータベースのために、追加のデータベースがリストアップされている場合があります。最初の出力カラムはデータベースがアタッチされた名前で、2番目のカラムは外部ファイルのファイル名です。</target>
        </trans-unit>
        <trans-unit id="ee926b57bed300f9a7e5c92f6be433c508e9bcc7" translate="yes" xml:space="preserve">
          <source>The &quot;.dump&quot; output from the shell does not work if there are embedded newlines anywhere in the data. This is an old bug that was carried forward from version 1.0. To fix it, the &quot;.dump&quot; output no longer uses the COPY command. It instead generates INSERT statements.</source>
          <target state="translated">データのどこかに改行が埋め込まれていると、シェルから出力される &quot;.dump&quot; が動作しない。これはバージョン1.0から引き継がれた古いバグです。これを修正するために、&quot;.dump &quot;出力ではCOPYコマンドを使用しなくなりました。代わりにINSERT文を生成します。</target>
        </trans-unit>
        <trans-unit id="1b85291d31b07e89b01fbd9925959d88473c2a10" translate="yes" xml:space="preserve">
          <source>The &quot;.excel&quot; command is an alias for &quot;.once -x&quot;. It does exactly the same thing.</source>
          <target state="translated">.excel」コマンドは「.once -x」の別名です。これは全く同じことをします。</target>
        </trans-unit>
        <trans-unit id="9686c64857b56634cf1d980b549835b7a48ecb3c" translate="yes" xml:space="preserve">
          <source>The &quot;.excel&quot; command is really an alias for &quot;.once -x&quot;. The -x option to .once causes it to writes results as CSV into a temporary file that is named with a &quot;.csv&quot; suffix, then invoke the systems default handler for CSV files.</source>
          <target state="translated">.excel &quot;コマンドは、実際には&quot;.once -x &quot;のエイリアスです。.onceに-xオプションを付けると、結果をCSVとして&quot;.csv &quot;という名前の一時ファイルに書き出し、CSVファイルのためのシステムのデフォルトハンドラを起動します。</target>
        </trans-unit>
        <trans-unit id="a0ea244938baaf074aedf53e702eadce70d483bf" translate="yes" xml:space="preserve">
          <source>The &quot;.expert&quot; command accepts the following options:</source>
          <target state="translated">.expert」コマンドは、以下のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="62869dd914f2d45ca628931082045505cc0aa98c" translate="yes" xml:space="preserve">
          <source>The &quot;.expert&quot; command is issued first, followed by the SQL query on a separate line. For example, consider the following session:</source>
          <target state="translated">最初に&quot;.expert &quot;コマンドが発行され、SQLクエリが別の行に続いて発行されます。例えば、次のようなセッションを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bf73e6ae296e826f7923e0357132694890491637" translate="yes" xml:space="preserve">
          <source>The &quot;.fullschema&quot; dot-command works like the &quot;.schema&quot; command in that it displays the entire database schema. But &quot;.fullschema&quot; also includes dumps of the statistics tables &quot;sqlite_stat1&quot;, &quot;sqlite_stat3&quot;, and &quot;sqlite_stat4&quot;, if they exist. The &quot;.fullschema&quot; command normally provides all of the information needed to exactly recreate a query plan for a specific query. When reporting suspected problems with the SQLite query planner to the SQLite development team, developers are requested to provide the complete &quot;.fullschema&quot; output as part of the trouble report. Note that the sqlite_stat3 and sqlite_stat4 tables contain samples of index entries and so might contain sensitive data, so do not send the &quot;.fullschema&quot; output of a proprietary database over a public channel.</source>
          <target state="translated">.fullschema &quot;ドットコマンドは、データベース全体のスキーマを表示するという点で、&quot;.schema &quot;コマンドと同じように動作します。しかし、&quot;.fullschema &quot;は統計テーブル &quot;sqlite_stat1&quot;,&quot;sqlite_stat3&quot;,&quot;sqlite_stat4 &quot;が存在する場合、そのダンプも含みます。通常、&quot;.fullschema &quot;コマンドは、特定の問い合わせの問い合わせ計画を正確に再現するために必要なすべての情報を提供します。SQLite クエリプランナの問題が疑われる場合、SQLite開発チームに報告する際には、開発者はトラブルレポートの一部として&quot;.fulllschema &quot;の出力を提供するように要求されます。sqlite_stat3とsqlite_stat4テーブルにはインデックスエントリのサンプルが含まれており、機密データが含まれている可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8c41f773b4bec069e65cdeb1f84472339fd67927" translate="yes" xml:space="preserve">
          <source>The &quot;.genfkey&quot; operator has been removed from the &lt;a href=&quot;cli&quot;&gt;Command Line Interface&lt;/a&gt;.</source>
          <target state="translated">「.genfkey」演算子は、&lt;a href=&quot;cli&quot;&gt;コマンドラインインターフェイス&lt;/a&gt;から削除されました。</target>
        </trans-unit>
        <trans-unit id="6da1e8e52719870c46e4714e803817bbb945c7a2" translate="yes" xml:space="preserve">
          <source>The &quot;.indexes&quot; command works in a similar way to list all of the indexes. If the &quot;.indexes&quot; command is given an argument which is the name of a table, then it shows just indexes on that table.</source>
          <target state="translated">.indexes &quot;コマンドは、すべてのインデックスを一覧表示するために同様の方法で動作します。もし &quot;.indexes&quot; コマンドにテーブル名を引数に与えた場合、そのテーブルのインデックスだけを表示します。</target>
        </trans-unit>
        <trans-unit id="332e81eb83bf30c51e9f2eb4830d160fd5e91b60" translate="yes" xml:space="preserve">
          <source>The &quot;.load&quot; command with one argument invokes sqlite3_load_extension() with the zProc parameter set to NULL, causing SQLite to first look for an entry point named &quot;sqlite3_extension_init&quot; and then &quot;sqlite3_X_init&quot; where &quot;X&quot; is derived from the filename. If your extension has an entry point with a different name, simply supply that name as the second argument. For example:</source>
          <target state="translated">1つの引数を持つ&quot;.load &quot;コマンドは、zProcパラメータをNULLに設定してsqlite3_load_extension()を起動し、SQLiteは最初に &quot;sqlite3_extension_init &quot;という名前のエントリポイントを探し、次に &quot;sqlite3_X_init &quot;という名前のエントリポイントを探し、ここで &quot;X &quot;はファイル名から派生したものです。拡張機能に別の名前のエントリポイントがある場合は、第二引数にその名前を与えるだけです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7e0f642688db88c440c3786a62b2e62ab2274b87" translate="yes" xml:space="preserve">
          <source>The &quot;.parameter&quot; command exists to simplify managing this table. The &quot;.parameter init&quot; command (often abbreviated as just &quot;.param init&quot;) creates the temp.sqlite_parameters table if it does not already exist. The &quot;.param list&quot; command shows all entries in the temp.sqlite_parameters table. The &quot;.param clear&quot; command drops the temp.sqlite_parameters table. The &quot;.param set KEY VALUE&quot; and &quot;.param unset KEY&quot; commands create or delete entries from the temp.sqlite_parameters table.</source>
          <target state="translated">.parameter &quot;コマンドは、このテーブルの管理を簡単にするために存在します。temp.sqlite_parametersテーブルがまだ存在しない場合、&quot;.parameter init &quot;コマンド(しばしば&quot;.param init &quot;と略されます)はtemp.sqlite_parametersテーブルを作成します。.param list &quot;コマンドは、temp.sqlite_parametersテーブル内の全てのエントリを表示します。.param clear &quot;コマンドはtemp.sqlite_parametersテーブルを削除します。.param set KEY VALUE &quot;と&quot;.param unset KEY &quot;コマンドは、 temp.sqlite_parametersテーブルからエントリを作成または削除します。</target>
        </trans-unit>
        <trans-unit id="789a156efc523de5bfce09730a51219cae2ec0c9" translate="yes" xml:space="preserve">
          <source>The &quot;.schema&quot; command can be augmented with the &quot;--indent&quot; option, in which case it tries to reformat the various CREATE statements of the schema so that they are more easily readable by humans.</source>
          <target state="translated">.schema &quot;コマンドは&quot;--indent &quot;オプションで拡張することができ、その場合、スキーマの様々なCREATE文を人間が読みやすいように再フォーマットしようとします。</target>
        </trans-unit>
        <trans-unit id="754968254f462d66877df03c1c7cd51953693cab" translate="yes" xml:space="preserve">
          <source>The &quot;.schema&quot; command is roughly the same as setting list mode, then entering the following query:</source>
          <target state="translated">.schema」コマンドは、リストモードを設定して、以下のクエリを入力するのとほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="7428559526f83a5c56d268af9889807faae2685e" translate="yes" xml:space="preserve">
          <source>The &quot;.schema&quot; command shows the complete schema for the database, or for a single table if an optional tablename argument is provided:</source>
          <target state="translated">.schema&quot; コマンドは、データベースの完全なスキーマを表示します。</target>
        </trans-unit>
        <trans-unit id="52ace065300c40138c37799338bd3ec51aca18df" translate="yes" xml:space="preserve">
          <source>The &quot;.schema&quot; command shows the structure of virtual tables.</source>
          <target state="translated">.schema」コマンドは、仮想テーブルの構造を表示します。</target>
        </trans-unit>
        <trans-unit id="73bcba8970e82dc921d7f4ec8db20bb33cbfb0a3" translate="yes" xml:space="preserve">
          <source>The &quot;.selftest --init&quot; command creates the selftest table if it does not already exists, then appends entries that check the SHA3 hash of the content of all tables. Subsequent runs of &quot;.selftest&quot; will verify that the database has not been changed in any way. To generates tests to verify that a subset of the tables are unchanged, simply run &quot;.selftest --init&quot; then &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; the selftest rows that refer to tables that are not constant.</source>
          <target state="translated">「.selftest --init」コマンドは、セルフテストテーブルがまだ存在しない場合は作成し、すべてのテーブルの内容のSHA3ハッシュをチェックするエントリを追加します。その後の「.selftest」の実行では、データベースが変更されていないことを確認します。テーブルのサブセットが変更されていないことを確認するテストを生成するには、「。selftest --init」を実行してから、定数でないテーブルを参照するセルフテスト行を&lt;a href=&quot;lang_delete&quot;&gt;削除&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="b23d6efbb796b87124747de656b1313433a59a58" translate="yes" xml:space="preserve">
          <source>The &quot;.selftest&quot; command attempts to verify that a database is intact and is not corrupt. The .selftest command looks for a table in schema named &quot;selftest&quot; and defined as follows:</source>
          <target state="translated">.selftest &quot;コマンドは、データベースが無傷であり、破損していないことを検証しようとします。.selftest コマンドは、&quot;selftest&quot; という名前のスキーマ内のテーブルを探し、以下のように定義します。</target>
        </trans-unit>
        <trans-unit id="da3394cbf6e430093bb273dc53c5c24290fb42a2" translate="yes" xml:space="preserve">
          <source>The &quot;.sha3sum&quot; command is implemented with the help of the &lt;a href=&quot;https://www.sqlite.org/src/file/ext/misc/shathree.c&quot;&gt;extension function &quot;sha3_query()&quot;&lt;/a&gt; that is included with the command-line shell.</source>
          <target state="translated">「.sha3sum」コマンドは、コマンドラインシェルに含まれている&lt;a href=&quot;https://www.sqlite.org/src/file/ext/misc/shathree.c&quot;&gt;拡張関数「sha3_query（）」&lt;/a&gt;を使用して実装されます。</target>
        </trans-unit>
        <trans-unit id="49607863a0b317eaa9e0bb0334b35c6b17a96a09" translate="yes" xml:space="preserve">
          <source>The &quot;.sha3sum&quot; command supports options &quot;--sha3-224&quot;, &quot;--sha3-256&quot;, &quot;--sha3-384&quot;, and &quot;--sha3-512&quot; to define which variety of SHA3 to use for the hash. The default is SHA3-256.</source>
          <target state="translated">.sha3sum&quot; コマンドは、ハッシュに使用する SHA3 の種類を定義するためのオプション &quot;-sha3-224&quot;,&quot;-sha3-256&quot;,&quot;-sha3-384&quot;,および &quot;-sha3-512&quot; をサポートしています。デフォルトはSHA3-256です。</target>
        </trans-unit>
        <trans-unit id="e496b68fde3cba7a6d3e4d071d1b64676cd89817" translate="yes" xml:space="preserve">
          <source>The &quot;.sha3sum&quot; command takes a single optional argument which is a &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; pattern. If this option is present, only tables whose names match the &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; pattern will be hashed.</source>
          <target state="translated">「.sha3sum」コマンドは、&lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt;パターンである単一のオプションの引数を取ります。このオプションが存在する場合、名前が&lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt;パターンに一致するテーブルのみがハッシュされます。</target>
        </trans-unit>
        <trans-unit id="b0e55e4c460c47133735d47238f402c87368287c" translate="yes" xml:space="preserve">
          <source>The &quot;.sha3sum&quot; dot-command computes a &lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-3&quot;&gt;SHA3&lt;/a&gt; hash of the &lt;em&gt;content&lt;/em&gt; of the database. To be clear, the hash is computed over the database content, not its representation on disk. This means, for example, that a &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; or similar data-preserving transformation does not change the hash.</source>
          <target state="translated">「.sha3sum」ドットコマンドは、データベースの&lt;em&gt;コンテンツの&lt;/em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-3&quot;&gt;SHA3&lt;/a&gt;ハッシュを計算します。明確にするために、ハッシュはディスク上の表現ではなく、データベースのコンテンツに対して計算されます。これは、たとえば、&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;または同様のデータ保持変換によってハッシュが変更されないことを意味します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d2252b9e19709b03f7ab086b59b1a77291173bd1" translate="yes" xml:space="preserve">
          <source>The &quot;.tables&quot; command is similar to setting list mode then executing the following query:</source>
          <target state="translated">.tables &quot;コマンドは、リストモードを設定して以下のクエリを実行するのと似ています。</target>
        </trans-unit>
        <trans-unit id="9eda9619ee5cbc80757e21696103e58ade470ff1" translate="yes" xml:space="preserve">
          <source>The &quot;.width&quot; command in the example above sets the width of the first column to 12 and the width of the second column to 6. All other column widths were unaltered. You can give as many arguments to &quot;.width&quot; as necessary to specify the widths of as many columns as are in your query results.</source>
          <target state="translated">上の例の「.width」コマンドは、1列目の幅を12に、2列目の幅を6に設定しています。他のすべての列の幅は変更されていません。.width &quot;に必要な数だけ引数を与えて、クエリ結果のカラムの幅を指定することができます。</target>
        </trans-unit>
        <trans-unit id="8d28508cd52964017863df7d9bff1bae6f7b1b73" translate="yes" xml:space="preserve">
          <source>The &quot;1&quot; at the end of the name for the json1 extension is deliberate. The designers anticipate that there will be future incompatible JSON extensions building upon the lessons learned from json1. Once sufficient experience is gained, some kind of JSON extension might be folded into the SQLite core. For now, JSON support remains an extension.</source>
          <target state="translated">json1 拡張モジュールの名前の最後の &quot;1 &quot;は意図的なものです。設計者は、将来的に互換性のないJSON拡張機能が、json1から学んだ教訓をもとに構築されることを予想しています。十分な経験が積めば、何らかのJSON拡張機能がSQLiteコアに組み込まれるかもしれません。今のところ、JSON のサポートは拡張機能のままです。</target>
        </trans-unit>
        <trans-unit id="ec1a7b1bff513b8dc885dad8096593de50c679b9" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;a href=&quot;cli#csv&quot;&gt;.import&lt;/a&gt;&quot; command ignores an initial UTF-8 BOM.</source>
          <target state="translated">「&lt;a href=&quot;cli#csv&quot;&gt;.import&lt;/a&gt;」コマンドは、最初のUTF-8 BOMを無視します。</target>
        </trans-unit>
        <trans-unit id="39a3b12173588647fa6bbe9bfdec68cffc6ff3a2" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt;&quot; must be a &lt;a href=&quot;lang_select#compound&quot;&gt;compound select&lt;/a&gt; where the right-most &lt;a href=&quot;syntax/compound-operator&quot;&gt;compound-operator&lt;/a&gt; is either UNION or UNION ALL.</source>
          <target state="translated">「&lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt;」は、最も右側の&lt;a href=&quot;syntax/compound-operator&quot;&gt;複合演算子&lt;/a&gt;がUNIONまたはUNION ALLのいずれかである&lt;a href=&quot;lang_select#compound&quot;&gt;複合選択&lt;/a&gt;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6e1ee86a4eb35dd217941c49a4c1f826afe5d0c7" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt;&quot; syntax diagram above attempts to show as much of the SELECT statement syntax as possible in a single diagram, because some readers find that helpful. The following &quot;&lt;a href=&quot;syntax/factored-select-stmt&quot;&gt;factored-select-stmt&lt;/a&gt;&quot; is an alternative syntax diagrams that expresses the same syntax but tries to break the syntax down into smaller chunks.</source>
          <target state="translated">上の「&lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt;」構文図では、単一の図でSELECTステートメントの構文をできるだけ多く表示しようとしています。次の「&lt;a href=&quot;syntax/factored-select-stmt&quot;&gt;factored-select-stmt&lt;/a&gt;」は、同じ構文を表すが、構文を小さなチャンクに分解しようとする代替構文図です。</target>
        </trans-unit>
        <trans-unit id="9f631ef63bea49256ea8a2d7bafc4554c3faedfb" translate="yes" xml:space="preserve">
          <source>The &quot;Application ID&quot; set by &lt;a href=&quot;pragma#pragma_application_id&quot;&gt;PRAGMA application_id&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_application_id&quot;&gt;PRAGMA application_id&lt;/a&gt;によって設定された「アプリケーションID」。</target>
        </trans-unit>
        <trans-unit id="f7f5d1070df133cbc828d184fa205995550d45fd" translate="yes" xml:space="preserve">
          <source>The &quot;CREATE TABLE&quot; command is used to create a new table in an SQLite database. A CREATE TABLE command specifies the following attributes of the new table:</source>
          <target state="translated">CREATE TABLE&quot; コマンドは、SQLite データベースに新しいテーブルを作成するために使用されます。CREATE TABLE コマンドは、新しいテーブルの以下の属性を指定します。</target>
        </trans-unit>
        <trans-unit id="5736b1f20cbfd4541c75d144c2bb263b3a789707" translate="yes" xml:space="preserve">
          <source>The &quot;INDEXED BY index-name&quot; phrase specifies that the named index must be used in order to look up values on the preceding table. If index-name does not exist or cannot be used for the query, then the preparation of the SQL statement fails. The &quot;NOT INDEXED&quot; clause specifies that no index shall be used when accessing the preceding table, including implied indices create by UNIQUE and PRIMARY KEY constraints. However, the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; can still be used to look up entries even when &quot;NOT INDEXED&quot; is specified.</source>
          <target state="translated">「INDEXED BY index-name」句は、前の表で値を検索するために名前付きインデックスを使用する必要があることを指定します。 index-nameが存在しないか、クエリに使用できない場合、SQLステートメントの準備は失敗します。 &quot;NOT INDEXED&quot;句は、UNIQUEおよびPRIMARY KEY制約によって作成された暗黙のインデックスを含め、前述のテーブルにアクセスするときにインデックスを使用しないことを指定します。ただし、「NOT INDEXED」が指定されている場合でも、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を使用してエントリを検索できます。</target>
        </trans-unit>
        <trans-unit id="21fa27bc6e581b8fb060c98b51ebafd394898e71" translate="yes" xml:space="preserve">
          <source>The &quot;INSERT INTO</source>
          <target state="translated">の「INSERT INTO</target>
        </trans-unit>
        <trans-unit id="3c67e89c578626f4a5845690f5e802d46290edfe" translate="yes" xml:space="preserve">
          <source>The &quot;ORDER BY 2&quot; (which means the same as &quot;ORDER BY under_alice.level+1&quot;) causes higher levels in the organization chart (with smaller &quot;level&quot; values) to be processed first, resulting in a breadth-first search. The output is:</source>
          <target state="translated">ORDER BY 2」(「ORDER BY under_alice.level+1」と同じ意味)は、組織図の上位レベル(「レベル」の値が小さい方)が先に処理され、結果的に幅優先の検索になります。出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f957a1348139bb0e4f79cd1d2fbd5306c674fbde" translate="yes" xml:space="preserve">
          <source>The &quot;ORDER BY checkin.mtime DESC&quot; term in the recursive-select makes the query run much faster by preventing it from following branches that merge checkins from long ago. The ORDER BY forces the recursive-select to focus on the most recent checkins, the ones we want. Without the ORDER BY on the recursive-select, one would be forced to compute the complete set of thousands of ancestors, sort them all by mtime, then take the top twenty. The ORDER BY essentially sets up a priority queue that forces the recursive query to look at the most recent ancestors first, allowing the use of a LIMIT clause to restrict the scope of the query to just the checkins of interest.</source>
          <target state="translated">再帰的選択の中の &quot;ORDER BY checkin.mtime DESC &quot;という用語は、ずっと前からのチェックインをマージするブランチに追従しないようにすることで、クエリの実行をより速くします。ORDER BYは、再帰的選択では、私たちが望む最新のチェックインにフォーカスするように強制します。再帰的選択でORDER BYを使用しないと、何千もの先祖の完全なセットを計算し、mtimeでソートし、上位20番目のチェックインを取ることを余儀なくされるでしょう。これにより、LIMIT句を使用して、クエリの範囲を関心のあるチェックインだけに制限することができます。</target>
        </trans-unit>
        <trans-unit id="05aec33569483f3dc1a8463df38060dbf53e2c35" translate="yes" xml:space="preserve">
          <source>The &quot;PRAGMA cache_spill=</source>
          <target state="translated">PRAGMA cache_spill=」となっています。</target>
        </trans-unit>
        <trans-unit id="1a0a062742c0bea5342163f23635fff0e75751fe" translate="yes" xml:space="preserve">
          <source>The &quot;PRAGMA data_version&quot; command provides an indication that the database file has been modified. Interactive programs that hold database content in memory or that display database content on-screen can use the PRAGMA data_version command to determine if they need to flush and reload their memory or update the screen display.</source>
          <target state="translated">PRAGMA data_version」コマンドは、データベースファイルが変更されたことを示します。データベースコンテンツをメモリに保持しているインタラクティブプログラムや、データベースコンテンツを画面上に表示するインタラクティブプログラムでは、PRAGMA data_versionコマンドを使用して、メモリをフラッシュしてリロードする必要があるか、画面表示を更新する必要があるかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="51c212d19062433a8ddb99b497e81dcefb5db939" translate="yes" xml:space="preserve">
          <source>The &quot;PRAGMA data_version&quot; value is a local property of each database connection and so values returned by two concurrent invocations of &quot;PRAGMA data_version&quot; on separate database connections are often different even though the underlying database is identical. It is only meaningful to compare the &quot;PRAGMA data_version&quot; values returned by the same database connection at two different points in time.</source>
          <target state="translated">PRAGMA data_version &quot;の値は、各データベース接続のローカルプロパティであるため、別々のデータベース接続で &quot;PRAGMA data_version &quot;を2つ同時に呼び出した場合に返される値は、基礎となるデータベースが同じであっても異なることがよくあります。2つの異なる時点で同じデータベース接続から返された &quot;PRAGMA data_version &quot;の値を比較することは意味があります。</target>
        </trans-unit>
        <trans-unit id="03965d42503dca17ab62ff9cad1d8a5c3c8ffdbb" translate="yes" xml:space="preserve">
          <source>The &quot;Page Count&quot; - The number of pages in the next segment of the journal, or -1 to mean all content to the end of the file</source>
          <target state="translated">ページ数」-ジャーナルの次のセグメントのページ数、または-1はファイルの最後までのすべてのコンテンツを意味します。</target>
        </trans-unit>
        <trans-unit id="48c6586de090c3bc2e13cc3b6a2a69ed36fa59fa" translate="yes" xml:space="preserve">
          <source>The &quot;USING TEMP B-TREE&quot; clause in the above output indicates that a temporary b-tree structure is used to implement the UNION of the results of the two sub-selects. An alternative method of computing a compound is to run each subquery as a co-routine, arrange for their outputs to appear in sorted order, and merge the results together. When the query planner chooses this latter approach, the EXPLAIN QUERY PLAN output looks like this:</source>
          <target state="translated">上記の出力の &quot;USING TEMP B-TREE &quot;句は、2つの副選択の結果のUNIONを実装するために一時的なB-TREE構造が使用されていることを示しています。複合体を計算する別の方法は、各副問い合わせをコ・ルーティンとして実行し、それらの出力がソートされた順序で表示されるように配置し、結果を一緒にマージすることです。クエリプランナがこの後者のアプローチを選択すると、EXPLAIN QUERY PLANの出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a9bff9645401cb328b5613b5233bf3e5ba1e2eb1" translate="yes" xml:space="preserve">
          <source>The &quot;alternate-form-2&quot; flag (&quot;!&quot;) on the &lt;a href=&quot;printf&quot;&gt;built-in printf&lt;/a&gt; implementation now causes string substitutions to measure the width and precision in characters instead of bytes.</source>
          <target state="translated">&lt;a href=&quot;printf&quot;&gt;組み込みのprintf&lt;/a&gt;実装の「alternate-form-2」フラグ（「！」）により、文字列の置換により、バイトではなく文字の幅と精度が測定されるようになりました。</target>
        </trans-unit>
        <trans-unit id="e4319cae606348ce23e782f966b47ff645421643" translate="yes" xml:space="preserve">
          <source>The &quot;atom&quot; column is the SQL value corresponding to primitive elements - elements other than JSON arrays and objects. The &quot;atom&quot; column is NULL for a JSON array or object. The &quot;value&quot; column is the same as the &quot;atom&quot; column for primitive JSON elements but takes on the text JSON value for arrays and objects.</source>
          <target state="translated">atom」列は、プリミティブ要素、つまりJSON配列やオブジェクト以外の要素に対応するSQL値です。atom &quot;カラムは、JSON配列やオブジェクトの場合はNULLです。value&quot; カラムは、プリミティブな JSON 要素に対応する &quot;atom&quot; カラムと同じですが、配列やオブジェクトに対応するテキスト JSON 値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="cb8a5773e6c48280d7fe42741f8b4a093d392533" translate="yes" xml:space="preserve">
          <source>The &quot;authorizer&quot; method</source>
          <target state="translated">認証者」メソッド</target>
        </trans-unit>
        <trans-unit id="d2039edadf3792f44d9f55f1e52e41e045647126" translate="yes" xml:space="preserve">
          <source>The &quot;authorizer&quot; method provides access to the &lt;a href=&quot;c3ref/set_authorizer&quot;&gt;sqlite3_set_authorizer&lt;/a&gt; C/C++ interface. The argument to authorizer is the name of a procedure that is called when SQL statements are being compiled in order to authorize certain operations. The callback procedure takes 5 arguments which describe the operation being coded. If the callback returns the text string &quot;SQLITE_OK&quot;, then the operation is allowed. If it returns &quot;SQLITE_IGNORE&quot;, then the operation is silently disabled. If the return is &quot;SQLITE_DENY&quot; then the compilation fails with an error.</source>
          <target state="translated">「authorizer」メソッドは、&lt;a href=&quot;c3ref/set_authorizer&quot;&gt;sqlite3_set_authorizer&lt;/a&gt; C / C ++インターフェースへのアクセスを提供します。オーソライザーへの引数は、特定の操作を許可するためにSQLステートメントがコンパイルされるときに呼び出されるプロシージャーの名前です。コールバックプロシージャは、コード化される操作を説明する5つの引数を取ります。コールバックがテキスト文字列「SQLITE_OK」を返す場合、操作は許可されます。「SQLITE_IGNORE」が返された場合、操作は通知なしで無効になります。戻り値が「SQLITE_DENY」の場合、コンパイルはエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="d780e49acdf2e828a0e7b0580dfd96aff50cee2e" translate="yes" xml:space="preserve">
          <source>The &quot;automerge=N&quot; command (where N is an integer between 0 and 15, inclusive) is used to configure an FTS3/4 tables &quot;automerge&quot; parameter, which controls automatic incremental inverted index merging. The default automerge value for new tables is 0, meaning that automatic incremental merging is completely disabled. If the value of the automerge parameter is modified using the &quot;automerge=N&quot; command, the new parameter value is stored persistently in the database and is used by all subsequently established database connections.</source>
          <target state="translated">automerge=N &quot;コマンド(ここで、Nは0から15までの整数である)は、FTS3/4テーブルの &quot;automerge &quot;パラメータを設定するために使用され、自動インクリメンタル転置インデックスマージを制御する。新しいテーブルのデフォルトの自動マージ値は0であり、自動インクリメンタルマージは完全に無効であることを意味する。automergeパラメータの値が &quot;automerge=N &quot;コマンドを使用して変更された場合、新しいパラメータ値はデータベースに永続的に保存され、その後に確立されたすべてのデータベース接続で使用される。</target>
        </trans-unit>
        <trans-unit id="35cc018cff76ce7093039d6d69782515b8dd9cbd" translate="yes" xml:space="preserve">
          <source>The &quot;backup&quot; method</source>
          <target state="translated">バックアップ」の方法</target>
        </trans-unit>
        <trans-unit id="c005edd2de62803b18a4eb1743378927a517fad5" translate="yes" xml:space="preserve">
          <source>The &quot;backup&quot; method makes a backup copy of a live database. The command syntax is like this:</source>
          <target state="translated">backup」メソッドは、ライブデータベースのバックアップコピーを作成します。コマンドの構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="7652bc7646799c25c956b30319f71b75ca9a3e80" translate="yes" xml:space="preserve">
          <source>The &quot;bind_fallback&quot; method</source>
          <target state="translated">bind_fallback &quot;メソッド</target>
        </trans-unit>
        <trans-unit id="e31d9979cf6770ea07cdb2b87a23b0343179e30e" translate="yes" xml:space="preserve">
          <source>The &quot;bind_fallback&quot; method gives the application control over how to handle parameter binding when no TCL variable matches the parameter name.</source>
          <target state="translated">bind_fallback」メソッドは、TCL変数がパラメータ名にマッチしない場合に、パラメータのバインディングをどのように処理するかをアプリケーションに制御させます。</target>
        </trans-unit>
        <trans-unit id="d6fd78a195f0dd5acebc1e5d408aa889656042c4" translate="yes" xml:space="preserve">
          <source>The &quot;bind_fallback&quot; method has a single optional argument. If the argument is an empty string, then the bind_fallback is cancelled and the default behavior is restored. If the argument is a non-empty string, then the argument is a TCL command (usually the name of a proc) to invoke whenever an SQL parameter is seen that does not match any TCL variable. If the &quot;bind_fallback&quot; method is given no arguments, then the current bind_fallback command is returned.</source>
          <target state="translated">bind_fallback &quot;メソッドには、オプションの引数を1つ持ちます。引数が空の文字列の場合、bind_fallbackはキャンセルされ、デフォルトの動作が復元されます。引数が空でない文字列の場合、引数は、SQLパラメータが見られるときに、どのTCL変数にもマッチしない SQLパラメータが見られるたびに起動するTCLコマンド(通常は procの名前)である。bind_fallback」メソッドに引数が与えられない場合、現在の bind_fallback コマンドが返されます。</target>
        </trans-unit>
        <trans-unit id="50a08084b4de7b3f67549ffe53d83ec728fa3cca" translate="yes" xml:space="preserve">
          <source>The &quot;busy&quot; method</source>
          <target state="translated">忙しい」方法</target>
        </trans-unit>
        <trans-unit id="94cabb870539d2659c509ca5d30b8de78ce6a143" translate="yes" xml:space="preserve">
          <source>The &quot;busy&quot; method, like &quot;timeout&quot;, only comes into play when the database is locked. But the &quot;busy&quot; method gives the programmer much more control over what action to take. The &quot;busy&quot; method specifies a callback Tcl procedure that is invoked whenever SQLite tries to open a locked database. A single integer argument is appended to the callback before it is invoke. The argument is the number of prior calls to the busy callback for the current locking event. It is intended that the callback will do some other useful work for a short while (such as service GUI events) then return so that the lock can be tried again. The callback procedure should return &quot;0&quot; if it wants SQLite to try again to open the database and should return &quot;1&quot; if it wants SQLite to abandon the current operation.</source>
          <target state="translated">busy &quot;メソッドは、&quot;timeout &quot;のように、データベースがロックされている場合にのみ使用されます。しかし、&quot;busy &quot;メソッドを使用することで、プログラマはどのようなアクションを取るべきか、より多くのコントロールが可能になります。busy &quot;メソッドは、SQLiteがロックされたデータベースを開こうとしたときに呼び出されるコールバックTclプロシージャを指定します。コールバックが呼び出される前に、1つの整数の引数が追加されます。引数には、現在のロックイベントに対するビジーコールバックの呼び出し回数を指定します。これは、コールバックがしばらくの間、他の有用な作業(サービスGUIイベントなど)を行った後、ロックを再試行できるようにコールバックを返すことを意図しています。コールバックプロシージャは、SQLiteがデータベースを開くために再試行したい場合は &quot;0 &quot;を返し、SQLiteが現在の操作を放棄したい場合は &quot;1 &quot;を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="806dbf019d18a933c45ea06755b6a277743f61ae" translate="yes" xml:space="preserve">
          <source>The &quot;cache&quot; method</source>
          <target state="translated">キャッシュ」メソッド</target>
        </trans-unit>
        <trans-unit id="6c5d5ba4e30c1f02fb732b5f9e013dee90e5777d" translate="yes" xml:space="preserve">
          <source>The &quot;changes&quot; method</source>
          <target state="translated">変更」の方法</target>
        </trans-unit>
        <trans-unit id="94441f79eee4930e4324a3b4a4acbce248260c58" translate="yes" xml:space="preserve">
          <source>The &quot;changes&quot; method returns an integer which is the number of rows in the database that were inserted, deleted, and/or modified by the most recent &quot;eval&quot; method.</source>
          <target state="translated">changes &quot;メソッドは、データベース内で直近の &quot;eval &quot;メソッドによって挿入、削除、変更された行の数を整数で返します。</target>
        </trans-unit>
        <trans-unit id="a3fc353d826f676e72487db0fd8f37052f9b16c1" translate="yes" xml:space="preserve">
          <source>The &quot;close&quot; method</source>
          <target state="translated">閉じる」という方法</target>
        </trans-unit>
        <trans-unit id="b78db738260018e26bc56c431d7e164adb66bba3" translate="yes" xml:space="preserve">
          <source>The &quot;collate&quot; method</source>
          <target state="translated">照合」の方法</target>
        </trans-unit>
        <trans-unit id="3be1a86e589629a9a881a6da512b2ad6b5f62c78" translate="yes" xml:space="preserve">
          <source>The &quot;collation_needed&quot; method</source>
          <target state="translated">collation_needed」メソッドは</target>
        </trans-unit>
        <trans-unit id="30f6089837a9332235ef1f677d9e2936edf51cae" translate="yes" xml:space="preserve">
          <source>The &quot;columns&quot; of a &lt;a href=&quot;lang_createview&quot;&gt;VIEW&lt;/a&gt; or FROM-clause subquery are really the expressions in the result set of the &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement that implements the VIEW or subquery. Thus, the affinity for columns of a VIEW or subquery are determined by the expression affinity rules above. Consider an example:</source>
          <target state="translated">&lt;a href=&quot;lang_createview&quot;&gt;VIEW&lt;/a&gt;またはFROM句のサブクエリの「列」は、実際には、VIEWまたはサブクエリを実装する&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;ステートメントの結果セット内の式です。したがって、VIEWまたはサブクエリの列の類似性は、上記の式類似性ルールによって決定されます。例を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="6efc033d7171b4cae5dcc026d731d1abc23f16f8" translate="yes" xml:space="preserve">
          <source>The &quot;commit_hook&quot; method</source>
          <target state="translated">commit_hook &quot;メソッド</target>
        </trans-unit>
        <trans-unit id="075f9fcec0c51906d7830312bd2ffff7ac323743" translate="yes" xml:space="preserve">
          <source>The &quot;complete&quot; method</source>
          <target state="translated">完全な」方法</target>
        </trans-unit>
        <trans-unit id="36202288005d888ee9c02c9332ba422aac36a5b3" translate="yes" xml:space="preserve">
          <source>The &quot;complete&quot; method is useful when building interactive applications in order to know when the user has finished entering a line of SQL code. This is really just an interface to the &lt;a href=&quot;c3ref/complete&quot;&gt;&lt;b&gt;sqlite3_complete()&lt;/b&gt;&lt;/a&gt; C function.</source>
          <target state="translated">「complete」メソッドは、ユーザーがSQLコードの行の入力をいつ終了したかを知るためにインタラクティブなアプリケーションを構築するときに役立ちます。これは実際には&lt;a href=&quot;c3ref/complete&quot;&gt;&lt;b&gt;sqlite3_complete（）&lt;/b&gt;&lt;/a&gt; C関数への単なるインターフェースです。</target>
        </trans-unit>
        <trans-unit id="cb6d6b519cc240799d0eae2497f1b956b7749126" translate="yes" xml:space="preserve">
          <source>The &quot;complete&quot; method takes a string of supposed SQL as its only argument. It returns TRUE if the string is a complete statement of SQL and FALSE if there is more to be entered.</source>
          <target state="translated">complete &quot;メソッドは、SQLを想定した文字列を唯一の引数として受け取ります。その文字列が完全なSQL文であればTRUEを返し、さらに入力すべきSQL文があればFALSEを返します。</target>
        </trans-unit>
        <trans-unit id="46bbc7a4eaf4d4f9fe40b357ef388a365c9285df" translate="yes" xml:space="preserve">
          <source>The &quot;config&quot; method</source>
          <target state="translated">config&quot; メソッド</target>
        </trans-unit>
        <trans-unit id="d8bb4ff8aef62d6cb6272264cef7cda239984bc9" translate="yes" xml:space="preserve">
          <source>The &quot;config&quot; method queries or changes certain configuration settings for the database connection using the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt; interface. Run this method with no arguments to get a TCL list of available configuration settings and their current values:</source>
          <target state="translated">「config」メソッドは、&lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config（）&lt;/a&gt;インターフェースを使用して、データベース接続の特定の構成設定を照会または変更します。引数なしでこのメソッドを実行し、利用可能な構成設定とその現在の値のTCLリストを取得します。</target>
        </trans-unit>
        <trans-unit id="b266e6a044670a6e3a5e4102b0820031cb7ab393" translate="yes" xml:space="preserve">
          <source>The &quot;configure&quot; scripts should now automatically configure Unix systems for large file support. Improved error messages for when large files are encountered and large file support is disabled.</source>
          <target state="translated">configure&quot; スクリプトは、ラージファイルをサポートするために Unix システムを自動的に設定するようになりました。ラージファイルに遭遇し、ラージファイルのサポートが無効になった場合のエラーメッセージを改善しました。</target>
        </trans-unit>
        <trans-unit id="577865d2c9835070772d4e94f47615cadfb2baec" translate="yes" xml:space="preserve">
          <source>The &quot;const char *&quot; variable pointed to by the T parameter will be set to a zero-terminated UTF-8 string containing the &lt;a href=&quot;../eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; description for the X-th loop.</source>
          <target state="translated">Tパラメーターが指す「const char *」変数は、X番目のループの&lt;a href=&quot;../eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt;記述を含むゼロで終了するUTF-8文字列に設定されます。</target>
        </trans-unit>
        <trans-unit id="2be51d012e0d49a380524a8121847e82af3226bf" translate="yes" xml:space="preserve">
          <source>The &quot;const char *&quot; variable pointed to by the T parameter will be set to a zero-terminated UTF-8 string containing the &lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; description for the X-th loop.</source>
          <target state="translated">Tパラメーターが指す「const char *」変数は、X番目のループの&lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt;記述を含むゼロで終了するUTF-8文字列に設定されます。</target>
        </trans-unit>
        <trans-unit id="bac7414b87b280f152adca2a25c602ba20600788" translate="yes" xml:space="preserve">
          <source>The &quot;const char *&quot; variable pointed to by the T parameter will be set to a zero-terminated UTF-8 string containing the name of the index or table used for the X-th loop.</source>
          <target state="translated">Tパラメータが指す変数 &quot;const char *&quot;には、X番目のループで使用されるインデックスまたはテーブルの名前を含む終端ゼロのUTF-8文字列が設定されます。</target>
        </trans-unit>
        <trans-unit id="8aae3497dac443e109983b1c00a5960530139406" translate="yes" xml:space="preserve">
          <source>The &quot;content&quot; option, used to make the FTS5 table an &lt;a href=&quot;fts5#external_content_and_contentless_tables&quot;&gt;external content or contentless table&lt;/a&gt;.</source>
          <target state="translated">「コンテンツ」オプション。FTS5テーブルを&lt;a href=&quot;fts5#external_content_and_contentless_tables&quot;&gt;外部コンテンツまたはコンテンツ&lt;/a&gt;レステーブルにするために使用されます。</target>
        </trans-unit>
        <trans-unit id="e6c79f409b23d48e87e77e61ee87998224597bc3" translate="yes" xml:space="preserve">
          <source>The &quot;content_rowid&quot; option, used to set the rowid field of an &lt;a href=&quot;fts5#external_content_tables&quot;&gt;external content table&lt;/a&gt;.</source>
          <target state="translated">「content_rowid」オプション。&lt;a href=&quot;fts5#external_content_tables&quot;&gt;外部コンテンツテーブルの行&lt;/a&gt; IDフィールドを設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="39cd9c81e20b57d6b78e1af2643005b4d6ac3fb3" translate="yes" xml:space="preserve">
          <source>The &quot;copy&quot; method</source>
          <target state="translated">コピー」の方法</target>
        </trans-unit>
        <trans-unit id="983ea0fee26b9222536bfed9a0514ad997e9a0a2" translate="yes" xml:space="preserve">
          <source>The &quot;copy&quot; method copies data from a file into a table. It returns the number of rows processed successfully from the file. The syntax of the copy method looks like this:</source>
          <target state="translated">copy &quot;メソッドは、ファイルからテーブルにデータをコピーします。ファイルから正常に処理された行数を返します。コピーメソッドの構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="dc3e7bd12c41305b3fc796bf145f478af20ae557" translate="yes" xml:space="preserve">
          <source>The &quot;cost&quot; here is logarithmic. With nested loops, the work is multiplied, not added. But it is customary to think of graphs with additive weights and so the graph shows the logarithm of the various costs. The graph shows a cost advantage of S being inside of L of about 6.87, but this translates into the query running about 963 times faster when S loop is inside of the L loop rather than being outside of it.</source>
          <target state="translated">ここでの「コスト」は対数です。入れ子になったループでは、作業は加算ではなく乗算になります。しかし、グラフは加重で考えるのが一般的なので、グラフは様々なコストの対数を示しています。グラフは、SがLの内側にある方が約6.87のコスト優位性を示していますが、これは、SループがLループの外側にあるよりも、SループがLループの内側にある方が、クエリの実行が約963倍速くなることを意味しています。</target>
        </trans-unit>
        <trans-unit id="350bdd92630f61bca90b3168c90039a63f7ced5e" translate="yes" xml:space="preserve">
          <source>The &quot;csv&quot; mode option in the shell puts strings inside double-quotes.</source>
          <target state="translated">シェルの &quot;csv&quot; モードオプションは文字列をダブルクォートで囲みます。</target>
        </trans-unit>
        <trans-unit id="1f521a5c994d919d955260e93be15342970bdf26" translate="yes" xml:space="preserve">
          <source>The &quot;db&quot; parameter is a pointer to the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. The &quot;main&quot; argument is the name of the schema in which the imposter table is to be created. The &quot;1&quot; argument enables the imposter table mechanism. &quot;tnum&quot; is the root page of the index that the imposter table should mirror.</source>
          <target state="translated">「db」パラメータは、&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;へのポインタです。「メイン」の引数は、偽のテーブルが作成されるスキーマの名前です。&quot;1&quot;引数は、偽のテーブルメカニズムを有効にします。「tnum」は、詐称者テーブルがミラーリングする必要があるインデックスのルートページです。</target>
        </trans-unit>
        <trans-unit id="1d7867d45fc6532563a6e0e1052f994086d7d4d3" translate="yes" xml:space="preserve">
          <source>The &quot;deserialize&quot; method</source>
          <target state="translated">デシリアライズ」メソッド</target>
        </trans-unit>
        <trans-unit id="6f372f07e9e348fc01623f3016d82e06dd84212c" translate="yes" xml:space="preserve">
          <source>The &quot;deserialize&quot; method takes a TCL byte-array that contains an SQLite database file and adds it to the database connection. The syntax is:</source>
          <target state="translated">deserialize」メソッドは、SQLiteデータベースファイルを含むTCLバイト配列を取り、それをデータベース接続に追加します。構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="37b478850c0ef98b47e5a07304d319496a735ccd" translate="yes" xml:space="preserve">
          <source>The &quot;docid&quot; alias does not exist. Applications must use &quot;rowid&quot; instead.</source>
          <target state="translated">docid」エイリアスは存在しません。アプリケーションは代わりに &quot;rowid&quot; を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="13cca21a87502057869d942479f833e57c886177" translate="yes" xml:space="preserve">
          <source>The &quot;double&quot; variable pointed to by the T parameter will be set to the query planner's estimate for the average number of rows output from each iteration of the X-th loop. If the query planner's estimates was accurate, then this value will approximate the quotient NVISIT/NLOOP and the product of this value for all prior loops with the same SELECTID will be the NLOOP value for the current loop.</source>
          <target state="translated">Tパラメータで指定された &quot;double &quot;変数には、X番目のループの各反復から出力される平均行数に対する問い合わせプランナの推定値が設定されます。クエリプランナの推定値が正確であれば、この値は商NVISIT/NLOOPに近似し、同じSELECTIDを持つ全ての先行ループのこの値の積が、現在のループのNLOOP値となります。</target>
        </trans-unit>
        <trans-unit id="91b47ab7441632c19a646d6f3d2e70bb71a8af6b" translate="yes" xml:space="preserve">
          <source>The &quot;ellipses&quot; text.</source>
          <target state="translated">楕円形」のテキスト。</target>
        </trans-unit>
        <trans-unit id="785dfb0eb14780fdc8609d7c7187bbcbf0dfe81b" translate="yes" xml:space="preserve">
          <source>The &quot;enable_load_extension&quot; method</source>
          <target state="translated">enable_load_extension &quot;メソッドは</target>
        </trans-unit>
        <trans-unit id="24181470839fe75a380a1959898a8b67107aab1a" translate="yes" xml:space="preserve">
          <source>The &quot;end match&quot; text.</source>
          <target state="translated">エンドマッチ」のテキストです。</target>
        </trans-unit>
        <trans-unit id="a4952b422a3c809d77afa1776609a2750c092857" translate="yes" xml:space="preserve">
          <source>The &quot;errorcode&quot; method</source>
          <target state="translated">エラーコード」メソッド</target>
        </trans-unit>
        <trans-unit id="79f7c0ddb2f3a3e97f9983c467d9c601808c789a" translate="yes" xml:space="preserve">
          <source>The &quot;eval&quot; method</source>
          <target state="translated">eval &quot;メソッド</target>
        </trans-unit>
        <trans-unit id="da370283ad69c2823d6201a69b7d1765374cb685" translate="yes" xml:space="preserve">
          <source>The &quot;eval&quot; method described &lt;a href=&quot;#eval&quot;&gt;above&lt;/a&gt; keeps a cache of &lt;a href=&quot;c3ref/prepare&quot;&gt;prepared statements&lt;/a&gt; for recently evaluated SQL commands. The &quot;cache&quot; method is used to control this cache. The first form of this command is:</source>
          <target state="translated">「エバール」の方法を説明&lt;a href=&quot;#eval&quot;&gt;上記&lt;/a&gt;のキャッシュ保持&lt;a href=&quot;c3ref/prepare&quot;&gt;プリペアドステートメント&lt;/a&gt;最近評価SQLコマンドのを。「キャッシュ」メソッドは、このキャッシュを制御するために使用されます。このコマンドの最初の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="221bab33d21ea69f4dd52f3f0492767cb572de7f" translate="yes" xml:space="preserve">
          <source>The &quot;exists&quot; method</source>
          <target state="translated">存在する」メソッド</target>
        </trans-unit>
        <trans-unit id="efdfc3e12d096d22035e667cf9f9a8fa50dec02d" translate="yes" xml:space="preserve">
          <source>The &quot;exists&quot; method is often used to test for the existence of rows in a table. For example:</source>
          <target state="translated">exists &quot;メソッドは、テーブル内に行が存在するかどうかをテストするためによく使用されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="64883f01f5bafd4c69a4447377f37fc6c44868cb" translate="yes" xml:space="preserve">
          <source>The &quot;exists&quot; method is similar to &quot;onecolumn&quot; and &quot;eval&quot; in that it executes SQL statements. The difference is that the &quot;exists&quot; method always returns a boolean value which is TRUE if a query in the SQL statement it executes returns one or more rows and FALSE if the SQL returns an empty set.</source>
          <target state="translated">exists &quot;メソッドは、SQL文を実行するという点では &quot;onecolumn &quot;や &quot;eval &quot;と似ています。違いは、&quot;exists &quot;メソッドは常にブーリアン値を返す点です。</target>
        </trans-unit>
        <trans-unit id="2fa39980ca4c6c390fc0963b907ef032a2115a04" translate="yes" xml:space="preserve">
          <source>The &quot;family&quot; table is similar to the earlier &quot;org&quot; table except that now there are two parents to each member. We want to know all living ancestors of Alice, from oldest to youngest. An ordinary common table expression, &quot;parent_of&quot;, is defined first. That ordinary CTE is a view that can be used to find all parents of any individual. That ordinary CTE is then used in the &quot;ancestor_of_alice&quot; recursive CTE. The recursive CTE is then used in the final query:</source>
          <target state="translated">ファミリー &quot;テーブルは、各メンバーの両親が二人いることを除いて、以前の &quot;org &quot;テーブルと似ています。私たちは、アリスの生きているすべての祖先を、最年長から最年少まで知りたいと考えています。まず、通常の一般的なテーブル表現である &quot;parent_of &quot;が定義されています。この通常のCTEは、任意の個人のすべての親を見つけるために使用することができるビューです。この通常の CTE は、&quot;ancestor_of_alice&quot; 再帰的 CTE で使用される。そして、その再帰的CTEは、最終的なクエリで使用される。</target>
        </trans-unit>
        <trans-unit id="e0decf38085a4ffc55fce2f25b175fd346628c61" translate="yes" xml:space="preserve">
          <source>The &quot;fast&quot; setting for secure_delete (added circa 2017-08-01) is an intermediate setting in between &quot;on&quot; and &quot;off&quot;. When secure_delete is set to &quot;fast&quot;, SQLite will overwrite deleted content with zeros only if doing so does not increase the amount of I/O. In other words, the &quot;fast&quot; setting uses more CPU cycles but does not use more I/O. This has the effect of purging all old content from &lt;a href=&quot;fileformat2#btree&quot;&gt;b-tree pages&lt;/a&gt;, but leaving forensic traces on &lt;a href=&quot;fileformat2#freelist&quot;&gt;freelist pages&lt;/a&gt;.</source>
          <target state="translated">secure_deleteの「高速」設定（2017年8月1日頃追加）は、「オン」と「オフ」の中間の設定です。secure_deleteが &quot;fast&quot;に設定されている場合、SQLiteはI / Oの量を増加させない場合にのみ、削除されたコンテンツをゼロで上書きします。言い換えると、「高速」設定はより多くのCPUサイクルを使用しますが、より多くのI / Oを使用しません。これは、&lt;a href=&quot;fileformat2#btree&quot;&gt;bツリーページ&lt;/a&gt;からすべての古いコンテンツをパージする効果がありますが、&lt;a href=&quot;fileformat2#freelist&quot;&gt;フリーリストページには&lt;/a&gt;フォレンジックトレースを残します。</target>
        </trans-unit>
        <trans-unit id="a5e5534bc0599c1bf3dbead2d2f44bed70807ce6" translate="yes" xml:space="preserve">
          <source>The &quot;fsync()&quot; that occurs after the header is written in a WAL reset now uses the sync settings for checkpoints. This means it will use a &quot;fullfsync&quot; on macs if &lt;a href=&quot;pragma#pragma_checkpoint_fullfsync&quot;&gt;PRAGMA checkpoint_fullfsync&lt;/a&gt; set on.</source>
          <target state="translated">WALリセットでヘッダーが書き込まれた後に発生する「fsync（）」は、チェックポイントの同期設定を使用するようになりました。これは、&lt;a href=&quot;pragma#pragma_checkpoint_fullfsync&quot;&gt;PRAGMA checkpoint_fullfsync&lt;/a&gt;がオンに設定されている場合、Macで「fullfsync」を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="80417a09b17dfee14228d5c4ecb3ba63e1360a53" translate="yes" xml:space="preserve">
          <source>The &quot;fts3tokenize&quot; virtual table can be used to directly access any tokenizer. The following SQL demonstrates how to create an instance of the fts3tokenize virtual table:</source>
          <target state="translated">fts3tokenize」仮想テーブルを使用して、任意のトークナイザーに直接アクセスすることができます。以下のSQLは、「fts3tokenize」仮想テーブルのインスタンスを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="6cdf37fe2751376d1b848056d4ec78cc31cd8173" translate="yes" xml:space="preserve">
          <source>The &quot;fullkey&quot; column is a text path that uniquely identifies the current row element within the original JSON string. The complete key to the true top-level element is returned even if an alternative starting point is provided by the &quot;root&quot; argument.</source>
          <target state="translated">fullkey」列は、元のJSON文字列内の現在の行要素を一意に識別するテキストパスである。たとえ &quot;root &quot;引数で代替の開始点が提供された場合でも、真のトップレベル要素への完全なキーが返されます。</target>
        </trans-unit>
        <trans-unit id="81485590afed062476035ea78c2df833a07ce15c" translate="yes" xml:space="preserve">
          <source>The &quot;function&quot; method</source>
          <target state="translated">関数」メソッド</target>
        </trans-unit>
        <trans-unit id="982021b0dd51770755c9c9e39c1c765e77fbdd84" translate="yes" xml:space="preserve">
          <source>The &quot;function&quot; method accepts the following options:</source>
          <target state="translated">function &quot;メソッドは、以下のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="e581fe2aa68e5275a553b3adbf390b762a9e4053" translate="yes" xml:space="preserve">
          <source>The &quot;function&quot; method registers new SQL functions with the SQLite engine. The arguments are the name of the new SQL function and a TCL command that implements that function. Arguments to the function are appended to the TCL command before it is invoked.</source>
          <target state="translated">function &quot;メソッドは、SQLiteエンジンに新しいSQL関数を登録します。引数は、新しい SQL 関数の名前と、その関数を実装した TCL コマンドです。関数の引数は、呼び出される前に TCL コマンドに追加されます。</target>
        </trans-unit>
        <trans-unit id="ff9f7422b3d2ef0edf475eeb60798d293ddec7bd" translate="yes" xml:space="preserve">
          <source>The &quot;fuzzershell.c&quot; program is used to run some &lt;a href=&quot;#fuzztesting&quot;&gt;fuzz tests&lt;/a&gt;.</source>
          <target state="translated">「fuzzershell.c」プログラムは、いくつかの&lt;a href=&quot;#fuzztesting&quot;&gt;ファズテスト&lt;/a&gt;を実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7c4947473658b4ae028d7e71df03314bb5d6e009" translate="yes" xml:space="preserve">
          <source>The &quot;iScanStatusOp&quot; parameter determines which status information to return. The &quot;iScanStatusOp&quot; must be one of the &lt;a href=&quot;#SQLITE_SCANSTAT_EST&quot;&gt;scanstatus options&lt;/a&gt; or the behavior of this interface is undefined. The requested measurement is written into a variable pointed to by the &quot;pOut&quot; parameter. Parameter &quot;idx&quot; identifies the specific loop to retrieve statistics for. Loops are numbered starting from zero. If idx is out of range - less than zero or greater than or equal to the total number of loops used to implement the statement - a non-zero value is returned and the variable that pOut points to is unchanged.</source>
          <target state="translated">「iScanStatusOp」パラメータは、返すステータス情報を決定します。「iScanStatusOp」は&lt;a href=&quot;#SQLITE_SCANSTAT_EST&quot;&gt;scanstatusオプションの&lt;/a&gt; 1つである必要があります。そうでない場合、このインターフェイスの動作は未定義です。要求された測定値は、「pOut」パラメーターが指す変数に書き込まれます。パラメータ「idx」は、統計を取得する特定のループを識別します。ループにはゼロから番号が付けられます。idxが範囲外の場合-0未満、またはステートメントの実装に使用されるループの総数以上-ゼロ以外の値が返され、pOutが指す変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="82b3487c37966e4df98f8fc69e59c76eae09190d" translate="yes" xml:space="preserve">
          <source>The &quot;iScanStatusOp&quot; parameter determines which status information to return. The &quot;iScanStatusOp&quot; must be one of the &lt;a href=&quot;c_scanstat_est&quot;&gt;scanstatus options&lt;/a&gt; or the behavior of this interface is undefined. The requested measurement is written into a variable pointed to by the &quot;pOut&quot; parameter. Parameter &quot;idx&quot; identifies the specific loop to retrieve statistics for. Loops are numbered starting from zero. If idx is out of range - less than zero or greater than or equal to the total number of loops used to implement the statement - a non-zero value is returned and the variable that pOut points to is unchanged.</source>
          <target state="translated">「iScanStatusOp」パラメータは、返すステータス情報を決定します。「iScanStatusOp」は&lt;a href=&quot;c_scanstat_est&quot;&gt;scanstatusオプションの&lt;/a&gt; 1つである必要があります。そうでない場合、このインターフェイスの動作は未定義です。要求された測定値は、「pOut」パラメーターが指す変数に書き込まれます。パラメータ「idx」は、統計を取得する特定のループを識別します。ループにはゼロから番号が付けられます。idxが範囲外の場合-0未満、またはステートメントの実装に使用されるループの総数以上-ゼロ以外の値が返され、pOutが指す変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="5abd56a3f33aa682cb5beed98f5ecb39cbd50edd" translate="yes" xml:space="preserve">
          <source>The &quot;id&quot; column is an integer that identifies a specific JSON element within the complete JSON string. The &quot;id&quot; integer is an internal housekeeping number, the computation of which might change in future releases. The only guarantee is that the &quot;id&quot; column will be different for every row.</source>
          <target state="translated">id&quot; カラムは、完全な JSON 文字列の中の特定の JSON 要素を識別する整数です。id&quot; 整数は、将来のリリースで計算が変更される可能性があります。唯一の保証は、&quot;id&quot; カラムが行ごとに異なるということです。</target>
        </trans-unit>
        <trans-unit id="ca8669e4db9525865c9346904ab8bb3b3eb055a9" translate="yes" xml:space="preserve">
          <source>The &quot;incrblob&quot; method</source>
          <target state="translated">incrblob」の方法</target>
        </trans-unit>
        <trans-unit id="8d184fd38641411539a264597b11e40c38841938" translate="yes" xml:space="preserve">
          <source>The &quot;index&quot; or staging area</source>
          <target state="translated">インデックス」または演出エリア</target>
        </trans-unit>
        <trans-unit id="c6e7f631fc9ab8b7e2eecdc6301a632079a07cf7" translate="yes" xml:space="preserve">
          <source>The &quot;input&quot; CTE defines the input puzzle. The &quot;digits&quot; CTE defines a table that holds all digits between 1 and 9. The work of solving the puzzle is undertaken by the &quot;x&quot; CTE. An entry in x(s,ind) means that the 81-character string &quot;s&quot; is a valid sudoku puzzle (it has no conflicts) and that the first unknown character is at position &quot;ind&quot;, or ind==0 if all character positions are filled in. The goal, then, is to compute entries for &quot;x&quot; with an &quot;ind&quot; of 0.</source>
          <target state="translated">input&quot; CTE は、入力パズルを定義します。digits&quot; CTEは、1から9までのすべての数字を保持するテーブルを定義する。パズルを解く作業は、&quot;x&quot; CTEによって行われる。x(s,ind)のエントリは、81文字の文字列 &quot;s &quot;が有効な数独パズル(競合がない)であり、最初の未知の文字が位置 &quot;ind &quot;にあることを意味します。そこで、目標は、&quot;x &quot;の &quot;ind &quot;が0であるエントリを計算することである。</target>
        </trans-unit>
        <trans-unit id="b6cb46f4a227f8313e332f23912dfe269a430a8c" translate="yes" xml:space="preserve">
          <source>The &quot;int&quot; variable pointed to by the T parameter will be set to the &quot;select-id&quot; for the X-th loop. The select-id identifies which query or subquery the loop is part of. The main query has a select-id of zero. The select-id is the same value as is output in the first column of an &lt;a href=&quot;../eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; query.</source>
          <target state="translated">Tパラメータが指す「int」変数は、X番目のループの「select-id」に設定されます。select-idは、ループが含まれているクエリまたはサブクエリを識別します。メインクエリのselect-idはゼロです。select-idは、&lt;a href=&quot;../eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt;クエリの最初の列に出力される値と同じです。</target>
        </trans-unit>
        <trans-unit id="fd32578e68672fbb14bf7b3a04807a29e7c2c005" translate="yes" xml:space="preserve">
          <source>The &quot;int&quot; variable pointed to by the T parameter will be set to the &quot;select-id&quot; for the X-th loop. The select-id identifies which query or subquery the loop is part of. The main query has a select-id of zero. The select-id is the same value as is output in the first column of an &lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; query.</source>
          <target state="translated">Tパラメータが指す「int」変数は、X番目のループの「select-id」に設定されます。select-idは、ループが含まれているクエリまたはサブクエリを識別します。メインクエリのselect-idはゼロです。select-idは、&lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt;クエリの最初の列に出力される値と同じです。</target>
        </trans-unit>
        <trans-unit id="c47984da42c27787f28bd87d963296a6ecc85d38" translate="yes" xml:space="preserve">
          <source>The &quot;integrity-check&quot; command causes SQLite to read and verify the accuracy of all inverted indices in an FTS3/4 table by comparing those inverted indices against the original content. The &quot;integrity-check&quot; command silently succeeds if the inverted indices are all ok, but will fail with an SQLITE_CORRUPT error if any problems are found.</source>
          <target state="translated">integrity-check &quot;コマンドは、SQLiteにFTS3/4テーブル内のすべての転置インデックスを読み込ませ、それらの転置インデックスを元の内容と比較することで、その正確さを検証させる。整合性チェック &quot;コマンドは、転置インデックスがすべて正常であれば黙って成功しますが、何か問題が見つかった場合は、SQLITE_CORRUPTエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="d1ee1009fc8d7ceb03381f3a07a84d688fe06706" translate="yes" xml:space="preserve">
          <source>The &quot;integrity-check&quot; command is similar in concept to &lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;PRAGMA integrity_check&lt;/a&gt;. In a working system, the &quot;integrity-command&quot; should always be successful. Possible causes of integrity-check failures include:</source>
          <target state="translated">「integrity-check」コマンドは、概念的には&lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;PRAGMA integer_check&lt;/a&gt;と似ています。稼働中のシステムでは、「整合性コマンド」は常に成功するはずです。整合性チェックの失敗の考えられる原因は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9351b7e4831f50f0cddfc49da3ef44df26240c27" translate="yes" xml:space="preserve">
          <source>The &quot;interrupt&quot; method</source>
          <target state="translated">割り込み」の方法</target>
        </trans-unit>
        <trans-unit id="1b5c7fcb603da939ee7df1123931389580f03242" translate="yes" xml:space="preserve">
          <source>The &quot;interrupt&quot; method invokes the &lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt()&lt;/a&gt; interface, causing any pending queries to halt.</source>
          <target state="translated">「interrupt」メソッドは&lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt（）&lt;/a&gt;インターフェースを呼び出し、保留中のクエリを停止させます。</target>
        </trans-unit>
        <trans-unit id="33827ff37e59286ea63b18a3b491ccd55fa35d36" translate="yes" xml:space="preserve">
          <source>The &quot;isInit&quot; flag. 1 when the shm file has been initialized.</source>
          <target state="translated">isInit &quot;フラグ。shmファイルが初期化されている場合は1。</target>
        </trans-unit>
        <trans-unit id="27d80d07107f3dd674071f8dcb5d66e927b93ae8" translate="yes" xml:space="preserve">
          <source>The &quot;isolation&quot; property of a database determines when changes made to the database by one operation become visible to other concurrent operations.</source>
          <target state="translated">データベースの &quot;分離 &quot;プロパティは、ある操作によってデータベースに加えられた変更が、他の並行操作から見えるようになるタイミングを決定します。</target>
        </trans-unit>
        <trans-unit id="ca6207f3c60486460fc150891b4e2b2ff184348d" translate="yes" xml:space="preserve">
          <source>The &quot;key&quot; column is the integer array index for elements of a JSON array and the text label for elements of a JSON object. The key column is NULL in all other cases.</source>
          <target state="translated">key&quot; カラムは、JSON 配列の要素の場合は整数の配列インデックス、JSON オブジェクトの要素の場合はテキストラベルである。それ以外の場合は、キーカラムはNULLとなります。</target>
        </trans-unit>
        <trans-unit id="f06bf7b5c9acc6e224eb6aebb494891b0b016a3d" translate="yes" xml:space="preserve">
          <source>The &quot;last_insert_rowid&quot; method</source>
          <target state="translated">last_insert_rowid」メソッドは</target>
        </trans-unit>
        <trans-unit id="b6bbfdca82da26696ded7dc7b5667ad95fba9734" translate="yes" xml:space="preserve">
          <source>The &quot;last_insert_rowid&quot; method returns an integer which is the ROWID of the most recently inserted database row.</source>
          <target state="translated">last_insert_rowid&quot; メソッドは、最近挿入されたデータベース行の ROWID を integer で返します。</target>
        </trans-unit>
        <trans-unit id="7284b909bd501ff8419335375b9cbd82855b5cf7" translate="yes" xml:space="preserve">
          <source>The &quot;localtime&quot; modifier (12) assumes the time string to its left is in Universal Coordinated Time (UTC) and adjusts the time string so that it displays localtime. If &quot;localtime&quot; follows a time that is not UTC, then the behavior is undefined. The &quot;utc&quot; modifier is the opposite of &quot;localtime&quot;. &quot;utc&quot; assumes that the string to its left is in the local timezone and adjusts that string to be in UTC. If the prior string is not in localtime, then the result of &quot;utc&quot; is undefined.</source>
          <target state="translated">localtime」修飾子(12)は、その左にある時間文字列が協定世界時(UTC)であると仮定して、ローカルタイムを表示するように時間文字列を調整する。もし &quot;localtime &quot;がUTCではない時刻に続く場合、その動作は未定義である。utc &quot;修飾子は、&quot;localtime &quot;の反対である。&quot;utc &quot;は、その左にある文字列がローカルタイムゾーンにあると仮定し、その文字列がUTCになるように調整する。前の文字列がローカルタイムゾーンにない場合、&quot;utc &quot;の結果は未定義である。</target>
        </trans-unit>
        <trans-unit id="15b3080063f65f5e859c8cbf90675f21f18f1993" translate="yes" xml:space="preserve">
          <source>The &quot;lost_and_found&quot; table contains one row for each orphaned row recovered from the database. Additionally, there is one row for each recovered index entry that cannot be attributed to any SQL index. This is because, in an SQLite database, the same format is used to store SQL index entries and WITHOUT ROWID table entries.</source>
          <target state="translated">lost_and_found&quot; テーブルには、データベースから復旧した孤児の行ごとに 1 行が含まれています。さらに、どのSQLインデックスにも帰属できない、回復したインデックス項目ごとに1つの行があります。これは、SQLiteデータベースでは、SQLインデックスエントリとWITHOUT ROWIDテーブルエントリを格納するために同じフォーマットが使用されるためです。</target>
        </trans-unit>
        <trans-unit id="9b9bb88fb1467415e1fd0ce3e886e98f2fabd9f8" translate="yes" xml:space="preserve">
          <source>The &quot;main&quot; argument to dbstat is default schema for which information is to be provided. The default is &quot;main&quot;, and so the use of &quot;main&quot; in the example above is redundant. For any particular query, the schema can be changed by specifying the alternative schema as a function argument to the virtual table name in the FROM clause of the query. (See further discussion of &lt;a href=&quot;lang_select#tabfunc1&quot;&gt;table-valued functions in the FROM clause&lt;/a&gt; for more details.)</source>
          <target state="translated">dbstatの「メイン」引数は、情報が提供されるデフォルトのスキーマです。デフォルトは「main」であるため、上記の例での「main」の使用は冗長です。特定のクエリの場合、クエリのFROM句で仮想テーブル名の関数引数として代替スキーマを指定することにより、スキーマを変更できます。（詳細については&lt;a href=&quot;lang_select#tabfunc1&quot;&gt;、FROM句&lt;/a&gt;のテーブル値関数の詳細を参照してください。）</target>
        </trans-unit>
        <trans-unit id="09862758c2c346b79031222c95f1cc2f0ca91ec9" translate="yes" xml:space="preserve">
          <source>The &quot;make&quot; utility, or optionally &quot;nmake&quot; on Windows.</source>
          <target state="translated">make&quot; ユーティリティ、または Windows ではオプションで &quot;nmake&quot;。</target>
        </trans-unit>
        <trans-unit id="658c3f95d62bc63b68f3b7aa685ee8fbc83d8cde" translate="yes" xml:space="preserve">
          <source>The &quot;matchinfo=fts3&quot; option is not available. The &lt;a href=&quot;fts5#the_columnsize_option&quot;&gt;&quot;columnsize=0&quot;&lt;/a&gt; option is equivalent.</source>
          <target state="translated">「matchinfo = fts3」オプションは使用できません。&lt;a href=&quot;fts5#the_columnsize_option&quot;&gt;「ColumnSizeが= 0」&lt;/a&gt;オプションは等価です。</target>
        </trans-unit>
        <trans-unit id="d99f30c2d0e908e2cc3022d7fdccaca904765bb1" translate="yes" xml:space="preserve">
          <source>The &quot;merge&quot; command attempts to apply all the changes between circles (1) and (4) to the files in the local checkout. Note that circle (5) has not been created yet. You will need to run the &quot;commit&quot; to create circle (5).</source>
          <target state="translated">merge」コマンドは、円(1)と(4)の間のすべての変更をローカルチェックアウトのファイルに適用しようとします。円(5)はまだ作成されていないことに注意してください。サークル(5)を作成するには、&quot;commit &quot;を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e41a414a4991da0955ad788ff392c91737d8599" translate="yes" xml:space="preserve">
          <source>The &quot;merge=X,Y&quot; command (where X and Y are integers) causes SQLite to do a limited amount of work toward merging the various inverted index b-trees of an FTS3/4 table together into one large b-tree. The X value is the target number of &quot;blocks&quot; to be merged, and Y is the minimum number of b-tree segments on a level required before merging will be applied to that level. The value of Y should be between 2 and 16 with a recommended value of 8. The value of X can be any positive integer but values on the order of 100 to 300 are recommended.</source>
          <target state="translated">merge=X,Y&quot; コマンド (ここで X と Y は整数)は、FTS3/4 テーブルの様々な転置インデックス b-tree を一つの大きな b-tree にマージするために、SQLite に限られた量の作業をさせる。X値はマージされる &quot;ブロック &quot;の目標数であり、Yはマージがそのレベルに適用される前に必要とされるレベル上のb-treeセグメントの最小数です。Yの値は2から16の間で、推奨値は8である。 Xの値は任意の正の整数であるが、100から300のオーダーの値が推奨される。</target>
        </trans-unit>
        <trans-unit id="9e3f77712e8ba4f79aa6578b325009e072dd171a" translate="yes" xml:space="preserve">
          <source>The &quot;missing&quot; parameter allows the user to specify the name of a &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL function&lt;/a&gt; that will be invoked just before swarmvtab opens a database if it finds that the required database file is not present on disk. This provides the application with an opportunity to retrieve the required database from a remote source before swarmvtab attempts to open it. The only argument passed to the &quot;missing&quot; function is the name or URI that identifies the database being opened. Assuming:</source>
          <target state="translated">「欠落」パラメーターを使用すると、必要なデータベースファイルがディスク上にないことが判明した場合にswarmvtabがデータベースを開く直前に呼び出される&lt;a href=&quot;c3ref/create_function&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;の名前を指定できます。これにより、swarmvtabがデータベースを開こうとする前に、リモートソースから必要なデータベースを取得する機会がアプリケーションに提供されます。「見つからない」関数に渡される唯一の引数は、開かれているデータベースを識別する名前またはURIです。仮定：</target>
        </trans-unit>
        <trans-unit id="6f3a9546b734b773233219e3ac894021d9c4aea3" translate="yes" xml:space="preserve">
          <source>The &quot;mmap_size&quot; is the maximum number of bytes of the database file that SQLite will try to map into the process address space at one time. The mmap_size applies separately to each database file, so the total amount of process address space that could potentially be used is the mmap_size times the number of open database files.</source>
          <target state="translated">mmap_size」は、SQLite が一度にプロセスアドレス空間にマッピングしようとするデータベースファイルの最大バイト数です。mmap_sizeは各データベースファイルに個別に適用されるので、使用される可能性のあるプロセスアドレス空間の総量は、mmap_sizeに開いているデータベースファイルの数を掛けたものになります。</target>
        </trans-unit>
        <trans-unit id="d05f6ca4b8375a55040cbbe82e13d67e18ad454c" translate="yes" xml:space="preserve">
          <source>The &quot;mptester.c&quot; program is a stress test for multiple processes concurrently reading and writing a single database.</source>
          <target state="translated">mptester.c」プログラムは、1つのデータベースを複数のプロセスが同時に読み書きするストレステストです。</target>
        </trans-unit>
        <trans-unit id="aceceab4037b5385ba92b29e0b20a81e94146ade" translate="yes" xml:space="preserve">
          <source>The &quot;nullvalue&quot; method</source>
          <target state="translated">nullvalue」メソッド</target>
        </trans-unit>
        <trans-unit id="e3321ce8b4cd40cd33c761004ca598eb073646da" translate="yes" xml:space="preserve">
          <source>The &quot;nullvalue&quot; method changes the representation for NULL returned as result of the &quot;eval&quot; method.</source>
          <target state="translated">nullvalue &quot;メソッドは、&quot;eval &quot;メソッドの結果として返されるNULLの表現を変更します。</target>
        </trans-unit>
        <trans-unit id="afd7b6ac7a6da46e476f310a277a91923a4e7d04" translate="yes" xml:space="preserve">
          <source>The &quot;nullvalue&quot; method is useful to differ between NULL and empty column values as Tcl lacks a NULL representation. The default representation for NULL values is an empty string.</source>
          <target state="translated">nullvalue &quot;メソッドは、TclにはNULL表現がないので、NULLと空の列の値を区別するのに便利です。NULL値のデフォルトの表現は空の文字列です。</target>
        </trans-unit>
        <trans-unit id="0c64f6777879373881c2c98b6dbc2b30411e222a" translate="yes" xml:space="preserve">
          <source>The &quot;onecolumn&quot; method</source>
          <target state="translated">onecolumn」メソッド</target>
        </trans-unit>
        <trans-unit id="3506b602f0b2580a68e5b060067cc065e54d9b3f" translate="yes" xml:space="preserve">
          <source>The &quot;onecolumn&quot; method works like &quot;&lt;a href=&quot;#eval&quot;&gt;eval&lt;/a&gt;&quot; in that it evaluates the SQL query statement given as its argument. The difference is that &quot;onecolumn&quot; returns a single element which is the first column of the first row of the query result.</source>
          <target state="translated">「onecolumn」メソッドは、引数として指定されたSQLクエリステートメントを評価する点で「&lt;a href=&quot;#eval&quot;&gt;eval&lt;/a&gt;」と同様に機能します。違いは、「onecolumn」がクエリ結果の最初の行の最初の列である単一の要素を返すことです。</target>
        </trans-unit>
        <trans-unit id="a0182d08456ee166091bc283f720fe1e714fcddc" translate="yes" xml:space="preserve">
          <source>The &quot;onoff&quot; parameter is true to enable the tracking of memory statistics and false to disable statistics tracking.</source>
          <target state="translated">onoff &quot;パラメータは、メモリ統計情報のトラッキングを有効にするにはtrue、統計情報のトラッキングを無効にするにはfalseを指定します。</target>
        </trans-unit>
        <trans-unit id="3c453be3bed80a3f6062f894d9c91b09f2a405f4" translate="yes" xml:space="preserve">
          <source>The &quot;openclose&quot; parameter allows the user to specify the name of a &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL function&lt;/a&gt; that will be invoked just before swarmvtab opens a database, and again just after it closes one. The first argument passed to the open close function is the filename or URI identifying the database to be opened or just recently closed (the same value returned in the leftmost column of the SQL statement provided to the CREATE VIRTUAL TABLE command). The second argument is integer value 0 when the function is invoked before opening a database, and 1 when it is invoked after one is closed. For example, if:</source>
          <target state="translated">「openclose」パラメーターを使用すると、ユーザーは、swarmvtabがデータベースを開く直前と、データベースを閉じた直後に呼び出される&lt;a href=&quot;c3ref/create_function&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;の名前を指定できます。 open close関数に渡される最初の引数は、開くデータベースまたは最近閉じたデータベースを識別するファイル名またはURIです（CREATE VIRTUAL TABLEコマンドに提供されるSQLステートメントの左端の列に返される同じ値）。 2番目の引数は、データベースを開く前に関数が呼び出された場合は整数値0、データベースが閉じられた後に呼び出された場合は1です。たとえば、次の場合：</target>
        </trans-unit>
        <trans-unit id="e12d49df2a6244cc1bdf5cf47d59be2df870804d" translate="yes" xml:space="preserve">
          <source>The &quot;optimize&quot; command causes FTS3/4 to merge together all of its inverted index b-trees into one large and complete b-tree. Doing an optimize will make subsequent queries run faster since there are fewer b-trees to search, and it may reduce disk usage by coalescing redundant entries. However, for a large FTS table, running optimize can be as expensive as running &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;. The optimize command essentially has to read and write the entire FTS table, resulting in a large transaction.</source>
          <target state="translated">「optimize」コマンドを使用すると、FTS3 / 4は、すべての逆索引bツリーを1つの大きく完全なbツリーにマージします。最適化を行うと、検索するBツリーが少なくなるため、後続のクエリの実行が速くなり、冗長なエントリを結合することでディスクの使用量を減らすことができます。ただし、大きなFTSテーブルの場合、optimizeを実行すると、&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;を実行するのと同じくらいのコストがかかります。最適化コマンドは基本的にFTSテーブル全体を読み書きする必要があるため、大きなトランザクションが発生します。</target>
        </trans-unit>
        <trans-unit id="8d4ccdc372ee3d695bbd6a513c0e6e7c13353814" translate="yes" xml:space="preserve">
          <source>The &quot;order&quot; option may be set to either &quot;DESC&quot; or &quot;ASC&quot; (in upper or lower case). If it is set to &quot;DESC&quot;, then FTS4 stores its data in such a way as to optimize returning results in descending order by docid. If it is set to &quot;ASC&quot; (the default), then the data structures are optimized for returning results in ascending order by docid. In other words, if many of the queries run against the FTS4 table use &quot;ORDER BY docid DESC&quot;, then it may improve performance to add the &quot;order=desc&quot; option to the CREATE VIRTUAL TABLE statement.</source>
          <target state="translated">order &quot;オプションは、&quot;DESC &quot;または &quot;ASC&quot;(大文字または小文字)のいずれかに設定することができる。DESC &quot;に設定されている場合、FTS4は、docidによる降順で結果を返すように最適化された方法でデータを格納する。これが &quot;ASC&quot;(デフォルト)に設定されている場合、データ構造はdocidの昇順で結果を返すように最適化される。言い換えれば、FTS4テーブルに対して実行されるクエリの多くが &quot;ORDER BY docid DESC &quot;を使用している場合、CREATE VIRTUAL TABLE文に &quot;ORDER=DESC &quot;オプションを追加するとパフォーマンスが向上する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a820cd844c9df8619832ad41e29de304a643e275" translate="yes" xml:space="preserve">
          <source>The &quot;pBuf&quot; parameter is a pointer to memory space that will be used for the lookaside memory pool. If pBuf is NULL, then SQLite will obtain its own space for the memory pool using &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_malloc()&lt;/a&gt;. The &quot;sz&quot; and &quot;cnt&quot; parameters are the size of each lookaside slot and the number of slots, respectively. If pBuf is not NULL, then it must point to at least sz*cnt bytes of memory.</source>
          <target state="translated">「pBuf」パラメータは、lookasideメモリプールに使用されるメモリ空間へのポインタです。 pBufがNULLの場合、SQLiteは&lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;を使用してメモリプール用の独自のスペースを取得します。 「sz」パラメータと「cnt」パラメータは、それぞれのlookasideスロットのサイズとスロットの数です。 pBufがNULLでない場合は、少なくともsz * cntバイトのメモリを指す必要があります。</target>
        </trans-unit>
        <trans-unit id="96f961210acaa75affae517c15c72d34812d54b4" translate="yes" xml:space="preserve">
          <source>The &quot;parent&quot; column is always NULL for json_each(). For json_tree(), the &quot;parent&quot; column is the &quot;id&quot; integer for the parent of the current element, or NULL for the top-level JSON element or the element identified by the root path in the second argument.</source>
          <target state="translated">json_each()では、&quot;parent &quot;カラムは常にNULLである。json_tree()では、&quot;parent &quot;カラムは、現在の要素の親のための &quot;id &quot;整数であり、トップレベルのJSON要素または第2引数のルートパスで識別される要素の場合はNULLである。</target>
        </trans-unit>
        <trans-unit id="f4a41ee583b00942417f0c8c5f788e416b5fcd33" translate="yes" xml:space="preserve">
          <source>The &quot;path&quot; column describes the path taken from the root node of the btree structure to each page. The &quot;path&quot; of the root node itself is '/'. The &quot;path&quot; for the left-most child page of the root of a btree page is '/000/'. (Btrees store content ordered from left to right so the pages to the left have smaller keys than the pages to the right.) The next to left-most child of the root page is '/001', and so on, each sibling page identified by a 3-digit hex value. The children of the 451st left-most sibling have paths such as '/1c2/000/, '/1c2/001/' etc. Overflow pages are specified by appending a '+' character and a six-digit hexadecimal value to the path to the cell they are linked from. For example, the three overflow pages in a chain linked from the left-most cell of the 450th child of the root page are identified by the paths:</source>
          <target state="translated">path」欄には、btree構造体のルートノードから各ページまでのパスを記述します。ルートノード自体の &quot;パス &quot;は'/'である。btreeページのルートの左端の子ページの &quot;パス &quot;は'/000/'です。(btreeは左から右に順にコンテンツを格納するので、左のページは右のページよりもキーが小さい)。ルートページの次から左端の子は '/001' であり、このように、各兄弟ページは 3 桁の 16 進数値で識別されます。451番目の左端の兄弟ページの子は、「/1c2/000/」、「/1c2/001/」などのパスを持っています。オーバーフローページは、リンク元のセルへのパスに'+'文字と6桁の16進数値を付加して指定します。た と えば、 ルートページの 450 番目の子の左端のセルからリンクされたチェー ン内の 3 つのオーバーフローページは、パスによって識別されます。</target>
        </trans-unit>
        <trans-unit id="2306ed00f4707f3494099d14093fb57dc4cef952" translate="yes" xml:space="preserve">
          <source>The &quot;path&quot; column is the path to the array or object container the holds the current row, or the path to the current row in the case where the iteration starts on a primitive type and thus only provides a single row of output.</source>
          <target state="translated">path」列は、現在の行を保持している配列やオブジェクトコンテナへのパスであり、反復処理がプリミティブ型で開始される場合は、現在の行へのパスであり、その結果、1行の出力しか得られない。</target>
        </trans-unit>
        <trans-unit id="9d4d6b26f49abb4a72a1bbdb1337cbe3b3abe73d" translate="yes" xml:space="preserve">
          <source>The &quot;pointer type&quot; in the last parameter to &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer()&lt;/a&gt;, &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer()&lt;/a&gt;, and &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_pointer()&lt;/a&gt; is used to prevent pointers intended for one extension from being redirected to a different extension. For example, without the use of pointer types, an attacker could still get access to pointer information in a system that included both the &lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt; and the &lt;a href=&quot;carray&quot;&gt;CARRAY extension&lt;/a&gt; using SQL like this:</source>
          <target state="translated">&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer（）&lt;/a&gt;、&lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer（）&lt;/a&gt;、および&lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_pointer（）&lt;/a&gt;への最後のパラメーターの「ポインタータイプ」は、ある拡張機能向けのポインターが別の拡張機能にリダイレクトされないようにするために使用されます。たとえば、ポインタタイプを使用しなくても、攻撃者は次のようなSQLを使用して、&lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;と&lt;a href=&quot;carray&quot;&gt;CARRAY拡張の&lt;/a&gt;両方を含むシステムのポインタ情報にアクセスする可能性があります。</target>
        </trans-unit>
        <trans-unit id="adee741afd091308ea52b91bf986798eb9c23f39" translate="yes" xml:space="preserve">
          <source>The &quot;pointer type&quot; string which is the last parameter to each of the pointer-passing interfaces should be a distinct, application-specific string literal that appears directly in the API call. The pointer type should not be a parameter passed in from a higher-level function.</source>
          <target state="translated">各ポインタ渡しインタフェースの最後のパラメータである &quot;ポインタ型 &quot;文字列は、APIコールに直接現れる、アプリケーション固有の明確な文字列リテラルでなければなりません。ポインタ型は、上位レベルの関数から渡されるパラメータであってはなりません。</target>
        </trans-unit>
        <trans-unit id="87d3095f178983c8a04814005e7e058687741b3d" translate="yes" xml:space="preserve">
          <source>The &quot;prefix&quot; option, used to add &lt;a href=&quot;fts5#prefix_indexes&quot;&gt;prefix indexes&lt;/a&gt; to an FTS5 table.</source>
          <target state="translated">FTS5テーブルに&lt;a href=&quot;fts5#prefix_indexes&quot;&gt;プレフィックスインデックス&lt;/a&gt;を追加するために使用される「プレフィックス」オプション。</target>
        </trans-unit>
        <trans-unit id="007337419b82fead3e9a4bb4ea6d17cd18d879d3" translate="yes" xml:space="preserve">
          <source>The &quot;price of California oranges&quot; query was made more efficient through the use of a two-column index. But SQLite can do even better with a three-column index that also includes the &quot;price&quot; column:</source>
          <target state="translated">カリフォルニアオレンジの価格」クエリは、2カラムのインデックスを使用することでより効率的になりました。しかし、SQLiteは「価格」列を含む3列インデックスを使用することで、さらに効率的なクエリを実現することができます。</target>
        </trans-unit>
        <trans-unit id="57afc82684ba8294d6cce9305c290f392e265962" translate="yes" xml:space="preserve">
          <source>The &quot;profile&quot; method</source>
          <target state="translated">プロファイル」メソッド</target>
        </trans-unit>
        <trans-unit id="a6a8d9f9ad6e3aababd749d5fdde2d82848ad996" translate="yes" xml:space="preserve">
          <source>The &quot;progress&quot; method</source>
          <target state="translated">プログレス」の方法</target>
        </trans-unit>
        <trans-unit id="d98ea4147c812e538b99bc21f1f6a4e8e90abfe0" translate="yes" xml:space="preserve">
          <source>The &quot;rbu_control&quot; column may also be set to integer value 2 for an INSERT. In this case, the new row silently replaces any existing row that has the same primary key values. This is equivalent to a DELETE followed by an INSERT with the same primary key values. It is not the same as an SQL REPLACE command, as in that case the new row may replace any conflicting rows (i.e. those that conflict due to UNIQUE constraints or indexes), not just those with conflicting primary keys.</source>
          <target state="translated">rbu_control &quot;列は、INSERTのために整数値2に設定することもできます。この場合、新しい行は、同じ主キー値を持つ既存の行を静かに置き換えます。これは、同じ主キー値を持つ DELETE に続いて INSERT が行われるのと同じです。これは、SQL REPLACEコマンドと同じではありません。この場合、新しい行は、競合する主キーを持つ行だけでなく、競合する行(すなわち、UNIQUE制約やインデックスによって競合する行)を置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="a26e076f35ba0ef194f00cabb02d8f0d110dbd9a" translate="yes" xml:space="preserve">
          <source>The &quot;rebuild&quot; command causes SQLite to discard the entire FTS3/4 table and then rebuild it again from original text. The concept is similar to &lt;a href=&quot;lang_reindex&quot;&gt;REINDEX&lt;/a&gt;, only that it applies to an FTS3/4 table instead of an ordinary index.</source>
          <target state="translated">「再構築」コマンドを使用すると、SQLiteはFTS3 / 4テーブル全体を破棄し、元のテキストから再構築します。概念は&lt;a href=&quot;lang_reindex&quot;&gt;REINDEX&lt;/a&gt;に似ていますが、通常のインデックスではなくFTS3 / 4テーブルに適用されるだけです。</target>
        </trans-unit>
        <trans-unit id="9dfe3ef5f9d0e5aefda4d198135af7dfc82b7ad7" translate="yes" xml:space="preserve">
          <source>The &quot;rebuild&quot; command should be run whenever the implementation of a custom tokenizer changes, so that all content can be retokenized. The &quot;rebuild&quot; command is also useful when using the &lt;a href=&quot;fts3#*fts4content&quot;&gt;FTS4 content option&lt;/a&gt; after changes have been made to the original content table.</source>
          <target state="translated">「rebuild」コマンドは、カスタムトークナイザーの実装が変更されるたびに実行する必要があります。これにより、すべてのコンテンツを再トークン化できます。「rebuild」コマンドは、元のコンテンツテーブルに変更を加えた後で&lt;a href=&quot;fts3#*fts4content&quot;&gt;FTS4コンテンツオプション&lt;/a&gt;を使用する場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="c9e0f27230c23e1210b0f85831927b9fb4ed65b1" translate="yes" xml:space="preserve">
          <source>The &quot;restore&quot; method</source>
          <target state="translated">復元」の方法</target>
        </trans-unit>
        <trans-unit id="24c21c10984afe5581e89897013fce4a408ba45f" translate="yes" xml:space="preserve">
          <source>The &quot;restore&quot; method copies the content from a separate database file into the current database connection, overwriting any preexisting content. The command syntax is like this:</source>
          <target state="translated">リストア」メソッドは、別のデータベースファイルから現在のデータベース接続にコンテンツをコピーし、既存のコンテンツを上書きします。コマンド構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9587ea916bf4a39318094206a7a32f2bcdfaa5ba" translate="yes" xml:space="preserve">
          <source>The &quot;rollback_hook&quot; method</source>
          <target state="translated">rollback_hook」メソッド</target>
        </trans-unit>
        <trans-unit id="e00d488bea46afaaecd75512057a1c66d8fe6370" translate="yes" xml:space="preserve">
          <source>The &quot;score&quot; for a comparison is the edit distance between the pattern and the word, adjusted down by the base-2 logarithm of the word rank. For example, a match with distance 100 but rank 1000 would have a score of 122 (= 100 - log2(1000) + 32) whereas a match with distance 100 with a rank of 1 would have a score of 131 (100 - log2(1) + 32). (NB: The constant 32 is added to each score to keep it from going negative in case the edit distance is zero.) In this way, frequently used words get a slightly lower cost which tends to move them toward the top of the list of alternative spellings.</source>
          <target state="translated">比較の「スコア」は、パターンと単語の間の編集距離で、単語のランクの基底2対数で調整されます。例えば、距離100でランク1000のマッチは122 (=100-log2(1000)+32)のスコアを持つのに対し、距離100でランク1のマッチは131 (100-log2(1)+32)のスコアを持つことになります。(注意:編集距離がゼロの場合に負の値にならないように、各スコアに定数32が追加されます)。このようにして、頻繁に使用される単語は、代替スペルのリストのトップに移動する傾向がある、わずかに低いコストを取得します。</target>
        </trans-unit>
        <trans-unit id="5c73b0b5b1beb7568fc6d18b01b575dea3734b9a" translate="yes" xml:space="preserve">
          <source>The &quot;serialize&quot; method</source>
          <target state="translated">シリアライズ」メソッド</target>
        </trans-unit>
        <trans-unit id="3d89d42c3828f01cc4451e3643a15ed26533dc51" translate="yes" xml:space="preserve">
          <source>The &quot;serialize&quot; method creates a BLOB which is a complete copy of an underlying database. The syntax is like this:</source>
          <target state="translated">serialize &quot;メソッドは、基礎となるデータベースの完全なコピーであるBLOBを作成します。構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="d8ecb1d818748f027a6df9d4ecf31fdb4abf6802" translate="yes" xml:space="preserve">
          <source>The &quot;size&quot; of a row value is the number of scalar values the row value contains. The size of a row value is always at least 2. A row value with a single column is just a scalar value. A row value with no columns is a syntax error.</source>
          <target state="translated">行値の「サイズ」は、行値が含むスカラー値の数です。行値のサイズは常に2以上であり、1列の列を持つ行値はスカラ値に過ぎません。列のない行値は構文エラーです。</target>
        </trans-unit>
        <trans-unit id="5edd5de6e6f1cc913259bc478dccfe21c6a5d5fb" translate="yes" xml:space="preserve">
          <source>The &quot;speedtest1.c&quot; program estimates the performance of SQLite under a typical workload.</source>
          <target state="translated">speedtest1.c」プログラムは、典型的な作業負荷の下でのSQLiteのパフォーマンスを推定します。</target>
        </trans-unit>
        <trans-unit id="94d1e1fa50bdc62251cad63515806a616cb08e98" translate="yes" xml:space="preserve">
          <source>The &quot;spellfix1&quot; term is the name of the spellfix module and must be entered as shown. The &quot;demo&quot; term is the name of the virtual table you will be creating and can be altered to suit the needs of your application. The virtual table is initially empty. In order for the virtual table to be useful, you will need to populate it with your vocabulary. Suppose you have a list of words in a table named &quot;big_vocabulary&quot;. Then do this:</source>
          <target state="translated">spellfix1」という用語は、spellfix モジュールの名前で、表示されているように入力する必要があります。demo&quot; は、これから作成する仮想テーブルの名前で、アプリケーションのニーズに合わせて変更できます。仮想テーブルは最初は空です。仮想テーブルが役に立つようにするためには、ボキャブラリーを入力する必要があります。例えば、&quot;big_vocabulary &quot;という名前のテーブルに単語のリストがあるとします。そして、次のようにします。</target>
        </trans-unit>
        <trans-unit id="1f251add4c0609e09930cd5b2e1c244e554f6696" translate="yes" xml:space="preserve">
          <source>The &quot;sqlite3.c&quot; code file contains default implementations of a VFS and of the &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; and &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; functions that are appropriate for Unix, Windows, and OS/2. To prevent one of these default components from being loaded when sqlite3.c is compiled, it is necessary to add the following compile-time option:</source>
          <target state="translated">「sqlite3.c」コードファイルには、VFSのデフォルト実装と、Unix、Windows、およびOS / 2に適した&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize（）&lt;/a&gt;および&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown（）&lt;/a&gt;関数のデフォルトの実装が含まれています。sqlite3.cのコンパイル時にこれらのデフォルトコンポーネントの1つが読み込まれないようにするには、次のコンパイル時オプションを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d25afe467d47fff3cdb66b829147595e777d2e30" translate="yes" xml:space="preserve">
          <source>The &quot;sqlite3.c&quot; make target will automatically construct the regular &quot;&lt;b&gt;sqlite3.c&lt;/b&gt;&quot; amalgamation source file, its header file &quot;&lt;b&gt;sqlite3.h&lt;/b&gt;&quot;, and the &quot;&lt;b&gt;tclsqlite3.c&lt;/b&gt;&quot; amalgamation source file that includes the TCL interface. Afterwards, the needed files can be copied into project directories and compiled according to the procedures outlined above.</source>
          <target state="translated">&quot;sqlite3.c&quot; makeターゲットは、通常の &quot; &lt;b&gt;sqlite3.c&lt;/b&gt; &quot; &lt;b&gt;アマルガメーション&lt;/b&gt;ソースファイル、そのヘッダーファイル &quot; &lt;b&gt;sqlite3.h&lt;/b&gt; &quot;、およびTCLインターフェースを含む&quot; &lt;b&gt;tclsqlite3.c&lt;/b&gt; &quot; &lt;b&gt;アマルガメーション&lt;/b&gt;ソースファイルを自動的に構築します。その後、上記の手順に従って、必要なファイルをプロジェクトディレクトリにコピーしてコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="66d4d7e86561a6b1d54c81eff00582173909b3a6" translate="yes" xml:space="preserve">
          <source>The &quot;sqlite3_analyzer.exe&quot; utility program, available as source code in the SQLite source tree or as a precompiled binary on the &lt;a href=&quot;http://www.sqlite.org/download.html&quot;&gt;SQLite Download page&lt;/a&gt;, can be used to measure the average sizes of table rows in an existing SQLite database.</source>
          <target state="translated">「sqlite3_analyzer.exe」ユーティリティプログラムは、SQLiteソースツリーのソースコードとして、または&lt;a href=&quot;http://www.sqlite.org/download.html&quot;&gt;SQLiteダウンロードページの&lt;/a&gt;プリコンパイルされたバイナリとして利用でき、既存のSQLiteデータベースのテーブル行の平均サイズを測定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ff30531d333139aba53fa40d0cdd26055103901a" translate="yes" xml:space="preserve">
          <source>The &quot;start match&quot; text.</source>
          <target state="translated">スタートマッチ」のテキストです。</target>
        </trans-unit>
        <trans-unit id="b039029daf858be6adbac43c34475b31375cdd36" translate="yes" xml:space="preserve">
          <source>The &quot;start of&quot; modifiers (7 through 9) shift the date backwards to the beginning of the current month, year or day.</source>
          <target state="translated">開始」修飾子 (7 から 9)は、日付を現在の月、年、または日の最初に遡って移動させます。</target>
        </trans-unit>
        <trans-unit id="05b5d073f83b249218dde4220e351fdb9c81957d" translate="yes" xml:space="preserve">
          <source>The &quot;state&quot; index works just like the &quot;fruit&quot; index in that it is a new table with an extra column in front of the rowid and sorted by that extra column as the primary key. The only difference is that in Idx2, the first column is &quot;state&quot; instead of &quot;fruit&quot; as it is with Idx1. In our example data set, there is more redundancy in the &quot;state&quot; column and so they are more duplicate entries. The ties are still resolved using the rowid.</source>
          <target state="translated">state&quot; インデックスは、&quot;fruit&quot; インデックスと同じように動作しますが、rowid の前に余分なカラムを持つ新しいテーブルを作成し、その余分なカラムを主キーとしてソートします。唯一の違いは、Idx2 の場合、Idx1 と同様に最初のカラムが &quot;fruit&quot; ではなく &quot;state&quot; になっていることです。この例のデータセットでは、&quot;state&quot; カラムに冗長性があるため、重複エントリが多くなっています。同点はまだ rowid を使用して解決されています。</target>
        </trans-unit>
        <trans-unit id="cf055db4baca803941f56b418b3f79cd69d69f75" translate="yes" xml:space="preserve">
          <source>The &quot;status&quot; method</source>
          <target state="translated">ステータス」メソッド</target>
        </trans-unit>
        <trans-unit id="4cb7bc19f02c001a06f5cf0e9a288feeb79d31b6" translate="yes" xml:space="preserve">
          <source>The &quot;swarmvtab&quot; virtual table allows the user to query a large number of tables (hereafter &quot;component&quot; tables) with similar schemas but distinct ranges of rowid values as if they were a single database table. The tables may be (and usually are) located in different databases. Swarmvtab tables are read-only.</source>
          <target state="translated">仮想テーブル &quot;swarmvtab &quot;を使用すると、スキーマは似ていても行ID値の範囲が異なる多数のテーブル(以下、&quot;コンポーネントテーブル &quot;と呼ぶ)を、あたかも1つのデータベーステーブルであるかのように照会することができます。これらのテーブルは、異なるデータベースに存在する場合があります(通常は存在します)。Swarmvtabテーブルは読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="dab19bcea20e3ab7d9ecf3510719cf0224e13f4a" translate="yes" xml:space="preserve">
          <source>The &quot;sz&quot; parameter is the size in bytes of each lookaside slot. The &quot;cnt&quot; parameter is the total number of lookaside memory slots per database connection. The total amount of lookaside memory allocated to each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; is sz*cnt bytes.</source>
          <target state="translated">「sz」パラメータは、各ルックアサイドスロットのバイト単位のサイズです。「cnt」パラメータは、データベース接続ごとのルックアサイドメモリスロットの総数です。各&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続に&lt;/a&gt;割り当てられたルックアサイドメモリの総量は、sz * cntバイトです。</target>
        </trans-unit>
        <trans-unit id="21cc2584b07fb547745b9d5684016c88291d98ce" translate="yes" xml:space="preserve">
          <source>The &quot;sz=NNN&quot; argument (where NNN represents a sequence of 1 or more digits) means that the average row size over all records of the table or index is NNN bytes per row. The SQLite query planner might use the estimated row size information provided by the &quot;sz=NNN&quot; token to help it choose smaller tables and indexes that require less disk I/O.</source>
          <target state="translated">引数 &quot;sz=NNN&quot; (NNN は 1 桁以上の数字の列を表します)は、テーブルまたはインデックスの全レコードの平均行サイズが 1 行あたり NNN バイトであることを意味します。SQLite クエリプランナは、&quot;sz=NNN&quot; トークンが提供する推定行サイズの情報を使用して、ディスク I/O を必要としない小さなテーブルやインデックスを選択することができます。</target>
        </trans-unit>
        <trans-unit id="1f5faa11cc0f3cca617edc23b678832f22fc7469" translate="yes" xml:space="preserve">
          <source>The &quot;temp&quot; database (in which TEMP tables and indices are stored) and &lt;a href=&quot;inmemorydb&quot;&gt;in-memory databases&lt;/a&gt; always uses exclusive locking mode. The locking mode of temp and &lt;a href=&quot;inmemorydb&quot;&gt;in-memory databases&lt;/a&gt; cannot be changed. All other databases use the normal locking mode by default and are affected by this pragma.</source>
          <target state="translated">「temp」データベース（TEMPテーブルとインデックスが格納される）および&lt;a href=&quot;inmemorydb&quot;&gt;インメモリデータベースは、&lt;/a&gt;常に排他ロックモードを使用します。一時&lt;a href=&quot;inmemorydb&quot;&gt;データベースとメモリ内データベース&lt;/a&gt;のロックモードは変更できません。他のすべてのデータベースはデフォルトで通常のロックモードを使用し、このプラグマの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="8cb92fbf85091b767df43e1863c69aa8515916b3" translate="yes" xml:space="preserve">
          <source>The &quot;test1.dir&quot; directory created above puts all the blobs into a single folder. It was conjectured that some operating systems would perform poorly when a single directory contains 100,000 objects. To test this, the kvtest program can also store the blobs in a hierarchy of folders with no more than 100 files and/or subdirectories per folder. The alternative on-disk representation of the blobs can be created using the --tree command-line option to the &quot;export&quot; command, like this:</source>
          <target state="translated">上で作成した &quot;test1.dir &quot;ディレクトリは、すべてのblobを1つのフォルダにまとめています。1つのディレクトリに100,000個のオブジェクトが含まれていると、一部のオペレーティングシステムではパフォーマンスが低下すると推測されていました。これをテストするために、kvtestプログラムは、フォルダごとに100個以下のファイルやサブディレクトリを持つフォルダの階層にブロブを格納することもできます。ディスク上の代替的なblobの表現は、&quot;export &quot;コマンドの--treeコマンドラインオプションを使用して、以下のように作成することができます。</target>
        </trans-unit>
        <trans-unit id="9e8c625e743111097d3b7602f25647d8fd5f0deb" translate="yes" xml:space="preserve">
          <source>The &quot;th3&quot; binary is run and the output checked for errors.</source>
          <target state="translated">th3&quot; バイナリが実行され、出力がエラーになっていないかチェックされます。</target>
        </trans-unit>
        <trans-unit id="405706da87374261dc84d98a92672d2aa3e6824d" translate="yes" xml:space="preserve">
          <source>The &quot;threadtest3.c&quot; program is a stress test for multiple threads using SQLite simultaneously.</source>
          <target state="translated">threadtest3.c」というプログラムは、SQLiteを使って複数のスレッドを同時に使用するストレステストです。</target>
        </trans-unit>
        <trans-unit id="c2ea8ab5c5050c4a238a6302498853dd2f689e62" translate="yes" xml:space="preserve">
          <source>The &quot;three&quot; column -- the key to the bucket</source>
          <target state="translated">さん」の欄--バケツの鍵を握る</target>
        </trans-unit>
        <trans-unit id="4fa8abbe4c1763e70302352dd8c5a5a17e072b27" translate="yes" xml:space="preserve">
          <source>The &quot;timeout&quot; method</source>
          <target state="translated">タイムアウト」メソッド</target>
        </trans-unit>
        <trans-unit id="7d44f83daf7e28e3193a3ecca21e30ba205796c2" translate="yes" xml:space="preserve">
          <source>The &quot;timeout&quot; method is used to control how long the SQLite library will wait for locks to clear before giving up on a database transaction. The default timeout is 0 millisecond. (In other words, the default behavior is not to wait at all.)</source>
          <target state="translated">timeout&quot; メソッドは、SQLite ライブラリがデータベーストランザクションをあきらめる前にロックが解除されるまでの時間を制御するために使用されます。デフォルトのタイムアウトは0ミリ秒です。(言い換えれば、デフォルトの動作は全く待たないということです)。</target>
        </trans-unit>
        <trans-unit id="7ac730ff83376aab14adb2a2686e6b4272b35baf" translate="yes" xml:space="preserve">
          <source>The &quot;tokenize&quot; option, used to configure a &lt;a href=&quot;fts5#tokenizers&quot;&gt;custom tokenizer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fts5#tokenizers&quot;&gt;カスタムトークナイザー&lt;/a&gt;を構成するために使用される「トークン化」オプション。</target>
        </trans-unit>
        <trans-unit id="5924f14d286c018a59c3ed95d3124a43c86bfc19" translate="yes" xml:space="preserve">
          <source>The &quot;total_changes&quot; method</source>
          <target state="translated">total_changes」メソッド</target>
        </trans-unit>
        <trans-unit id="67201b01d24a416fed46b29f515a9e7ed51080c3" translate="yes" xml:space="preserve">
          <source>The &quot;total_changes&quot; method returns an integer which is the number of rows in the database that were inserted, deleted, and/or modified since the current database connection was first opened.</source>
          <target state="translated">total_changes &quot;メソッドは、現在のデータベース接続が最初に開かれてから挿入、削除、変更されたデータベース内の行の数を整数で返します。</target>
        </trans-unit>
        <trans-unit id="7e6156617165c2bee31d2c34a55e3df2f7ee7cbc" translate="yes" xml:space="preserve">
          <source>The &quot;trace&quot; method</source>
          <target state="translated">トレース」の方法</target>
        </trans-unit>
        <trans-unit id="b2906df9327952a977291763abf36d4cd7917ee1" translate="yes" xml:space="preserve">
          <source>The &quot;trace&quot; method registers a callback that is invoked as each SQL statement is compiled. The text of the SQL is appended as a single string to the command before it is invoked. This can be used (for example) to keep a log of all SQL operations that an application performs.</source>
          <target state="translated">trace &quot;メソッドは、各SQL文がコンパイルされるたびに呼び出されるコールバックを登録します。SQLのテキストは、それが呼び出される前に、コマンドに1つの文字列として追加されます。これは、アプリケーションが実行するすべてのSQL操作のログを保持するために使用することができます(例えば)。</target>
        </trans-unit>
        <trans-unit id="ce50004a13c3fcabcb6ebda341338c2b6ecfb280" translate="yes" xml:space="preserve">
          <source>The &quot;trace_v2&quot; method</source>
          <target state="translated">trace_v2&quot; メソッド</target>
        </trans-unit>
        <trans-unit id="2fe37d0c891dddf24c1d50f2d3327a7f07cf31d0" translate="yes" xml:space="preserve">
          <source>The &quot;trace_v2&quot; method registers a callback that is invoked as each SQL statement is compiled. The syntax is as follows:</source>
          <target state="translated">trace_v2 &quot;メソッドは、各SQL文がコンパイルされるたびに呼び出されるコールバックを登録します。構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e9e9294106d107e583dc783efd0d04b347f737f9" translate="yes" xml:space="preserve">
          <source>The &quot;transaction&quot; method</source>
          <target state="translated">トランザクション」メソッド</target>
        </trans-unit>
        <trans-unit id="839415a25e55cb5e0ba1d1d3bedbc6f8468c1f73" translate="yes" xml:space="preserve">
          <source>The &quot;transaction&quot; method is used to execute a TCL script inside an SQLite database transaction. The transaction is committed when the script completes, or it rolls back if the script fails. If the transaction occurs within another transaction (even one that is started manually using BEGIN) it is a no-op.</source>
          <target state="translated">transaction」メソッドは、SQLiteデータベースのトランザクション内でTCLスクリプトを実行するために使用されます。トランザクションは、スクリプトが完了するとコミットされ、スクリプトが失敗するとロールバックされます。トランザクションが別のトランザクション内で発生した場合(BEGINを使用して手動で開始されたトランザクションであっても)、それは実行されません。</target>
        </trans-unit>
        <trans-unit id="378f72a23dc895cffd3910e611b45425aeb46721" translate="yes" xml:space="preserve">
          <source>The &quot;type&quot; column is an SQL text value taken from ('null', 'true', 'false', 'integer', 'real', 'text', 'array', 'object') according to the type of the current JSON element.</source>
          <target state="translated">type」列は、現在のJSON要素の型に応じて('null','true','false','integer','real','text','array','object')から取得したSQLテキスト値です。</target>
        </trans-unit>
        <trans-unit id="135f2f5e5d2c30f651d7adf36038240ab6497277" translate="yes" xml:space="preserve">
          <source>The &quot;typical&quot; workload is generated by the &lt;a href=&quot;https://sqlite.org/src/file/test/speedtest1.c&quot;&gt;speedtest1.c&lt;/a&gt; program in the canonical SQLite source tree. This program strives to exercise the SQLite library in a way that is typical of real-world applications. Of course, every application is different, and so no test program can exactly mirror the behavior of all applications.</source>
          <target state="translated">「標準的な」ワークロードは、正規SQLiteソースツリーの&lt;a href=&quot;https://sqlite.org/src/file/test/speedtest1.c&quot;&gt;speedtest1.c&lt;/a&gt;プログラムによって生成されます。このプログラムは、実際のアプリケーションで一般的な方法でSQLiteライブラリを実行するように努めています。もちろん、アプリケーションはそれぞれ異なるため、すべてのアプリケーションの動作を正確に反映できるテストプログラムはありません。</target>
        </trans-unit>
        <trans-unit id="27bfc78b4ec7e83cf7c09ae529723bb27ae007c2" translate="yes" xml:space="preserve">
          <source>The &quot;ui&quot; command will cause fossil to run a miniature built-in webserver and to launch your web-browser pointing at that webserver. You can use your web-browser to configure your project in various ways. See the instructions on the fossil website for additional information.</source>
          <target state="translated">ui &quot;コマンドを実行すると、fossilはビルトインウェブサーバーのミニチュアを実行し、そのウェブサーバーを指すウェブブラウザーを起動します。ウェブブラウザを使って様々な方法でプロジェクトを設定できます。詳細はfossilウェブサイトの説明をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d78919ab60690742844f0ae8327639ff7f7b254a" translate="yes" xml:space="preserve">
          <source>The &quot;unicode61&quot; tokenizer is available beginning with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_13.html&quot;&gt;version 3.7.13&lt;/a&gt; (2012-06-11). Unicode61 works very much like &quot;simple&quot; except that it does simple unicode case folding according to rules in Unicode Version 6.1 and it recognizes unicode space and punctuation characters and uses those to separate tokens. The simple tokenizer only does case folding of ASCII characters and only recognizes ASCII space and punctuation characters as token separators.</source>
          <target state="translated">「unicode61」トークナイザーは、SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_13.html&quot;&gt;バージョン3.7.13&lt;/a&gt;（2012-06-11）以降で使用できます。 Unicode61は、Unicodeバージョン6.1のルールに従って単純なUnicodeの大文字と小文字の変換を行い、Unicodeのスペースと句読文字を認識し、それらを使用してトークンを分離することを除いて、「simple」と非常によく似ています。単純なトークナイザーは、ASCII文字の大文字小文字の変換のみを行い、ASCIIスペースと句読点文字のみをトークンの区切り文字として認識します。</target>
        </trans-unit>
        <trans-unit id="53568b33d00330dcebc8eb48a597c612134f3558" translate="yes" xml:space="preserve">
          <source>The &quot;unixepoch&quot; modifier (11) only works if it immediately follows a timestring in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix Time&lt;/a&gt; - the number of seconds since 1970. If the &quot;unixepoch&quot; modifier does not follow a timestring of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the &quot;unixepoch&quot; modifier from prior DDDDDDDDDD then the behavior is undefined. For SQLite versions before 3.16.0 (2017-01-02), the &quot;unixepoch&quot; modifier only works for dates between 0000-01-01 00:00:00 and 5352-11-01 10:52:47 (unix times of -62167219200 through 106751991167).</source>
          <target state="translated">「unixepoch」修飾子（11）は、DDDDDDDDDD形式のタイムストリングの直後にある場合にのみ機能します。この修飾子により、DDDDDDDDDDは通常のユリウス日数ではなく、&lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix Time&lt;/a&gt; -1970年からの秒数として解釈されます。「unixepoch」修飾子がDDDDDDDDDD形式のタイムストリングに続かない場合、 1970年からの秒数、または他の修飾子が「unixepoch」修飾子を以前のDDDDDDDDDDから分離している場合の動作は未定義です。 SQLiteバージョン3.16.0（2017-01-02）より前の場合、「unixepoch」修飾子は0000-01-01 00:00:00から5352-11-01 10:52:47（Unix回の-62167219200〜106751991167）。</target>
        </trans-unit>
        <trans-unit id="9a380264abb876efbc0e0abf2e6a2f4c233a20b1" translate="yes" xml:space="preserve">
          <source>The &quot;unlock_notify&quot; method</source>
          <target state="translated">unlock_notify」メソッド</target>
        </trans-unit>
        <trans-unit id="a59aa60915a8fc6bc6f97fdfa3c585be19ca1408" translate="yes" xml:space="preserve">
          <source>The &quot;update_hook&quot; method</source>
          <target state="translated">update_hook &quot;メソッド</target>
        </trans-unit>
        <trans-unit id="ad1e96bd97056b4fb89ac4a9d66b380d5f0978cd" translate="yes" xml:space="preserve">
          <source>The &quot;usable size&quot; of a database page is the page size specified by the 2-byte integer at offset 16 in the header less the &quot;reserved&quot; space size recorded in the 1-byte integer at offset 20 in the header. The usable size of a page might be an odd number. However, the usable size is not allowed to be less than 480. In other words, if the page size is 512, then the reserved space size cannot exceed 32.</source>
          <target state="translated">データベースページの「使用可能サイズ」は、ヘッダのオフセット16の2バイト整数で指定されたページサイズから、ヘッダのオフセット20の1バイト整数に記録された「予約済み」のスペースサイズを差し引いたものである。ページの使用可能サイズは奇数になる場合がある。しかし、使用可能サイズが480以下になることは許されない。つまり、ページサイズが512であれば、予約されたスペースサイズは32を超えることはできない。</target>
        </trans-unit>
        <trans-unit id="0117a41a4edb11977b96c0bfbaf5ae135dd4dc28" translate="yes" xml:space="preserve">
          <source>The &quot;user version&quot; as read and set by the &lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_version pragma&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_versionプラグマ&lt;/a&gt;によって読み取られ、設定される「ユーザーバージョン」。</target>
        </trans-unit>
        <trans-unit id="4f1221e2090e85cfaa0707db328c83c8e04e4462" translate="yes" xml:space="preserve">
          <source>The &quot;verb&quot; argument determines what statistic is accessed. There are &lt;a href=&quot;c3ref/c_status_malloc_count#sqlitestatusmemoryused&quot;&gt;various verbs&lt;/a&gt; defined. The list is expected to grow as the &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status()&lt;/a&gt; interface matures. The current value the selected parameter is written into integer &quot;current&quot; and the highest historical value is written into integer &quot;highwater&quot;. If resetflag is true, then the high-water mark is reset down to the current value after the call returns.</source>
          <target state="translated">「動詞」引数は、アクセスする統計を決定します。あり&lt;a href=&quot;c3ref/c_status_malloc_count#sqlitestatusmemoryused&quot;&gt;、様々な動詞&lt;/a&gt;定義されたが。リストは、&lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status（）&lt;/a&gt;インターフェースが成熟するにつれて大きくなると予想されます。選択したパラメーターの現在の値は整数「現在」に書き込まれ、最も高い履歴値は整数「高水」に書き込まれます。resetflagがtrueの場合、呼び出しが戻った後、最高水準点が現在の値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="fa357090791a4202ebbb1affe438340a7edf58ef" translate="yes" xml:space="preserve">
          <source>The &quot;version&quot; method</source>
          <target state="translated">バージョン」メソッド</target>
        </trans-unit>
        <trans-unit id="cd6ed1a853164caf36a9ec472723c210aaf3324f" translate="yes" xml:space="preserve">
          <source>The &quot;wal_hook&quot; method</source>
          <target state="translated">wal_hook」メソッド</target>
        </trans-unit>
        <trans-unit id="13953b9d13af87a94ab5c5d6a6cf14aaf24d8b07" translate="yes" xml:space="preserve">
          <source>The &quot;weekday&quot; modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the &quot;weekday&quot; modifier leaves the date unchanged.</source>
          <target state="translated">weekday&quot; 修飾子は、必要に応じて、曜日番号が N である次の日付に日付を進めます。日付がすでに希望する曜日になっている場合、&quot;weekday &quot;修飾子は日付を変更しません。</target>
        </trans-unit>
        <trans-unit id="fc5b825d3bb551c0ffab90d4aebeaa4b072d1ccb" translate="yes" xml:space="preserve">
          <source>The $nExtCode extended result codes are &lt;a href=&quot;c3ref/c_abort_rollback&quot;&gt;defined in sqlite3.h&lt;/a&gt; and are listed in alphabetical order below:</source>
          <target state="translated">$ nExtCode拡張結果コードは&lt;a href=&quot;c3ref/c_abort_rollback&quot;&gt;sqlite3.h&lt;/a&gt;で定義されており、以下にアルファベット順にリストされています。</target>
        </trans-unit>
        <trans-unit id="d7c45544c374d408b5b737fa2b109d54d1a57530" translate="yes" xml:space="preserve">
          <source>The $nPrimCode result codes are &lt;a href=&quot;c3ref/c_abort&quot;&gt;defined in sqlite3.h&lt;/a&gt; and are listed in alphabetical order below:</source>
          <target state="translated">$ nPrimCode結果コードは&lt;a href=&quot;c3ref/c_abort&quot;&gt;sqlite3.h&lt;/a&gt;で定義されており、以下にアルファベット順にリストされています。</target>
        </trans-unit>
        <trans-unit id="3ab512eff5b3fb377f299e58700487486d503855" translate="yes" xml:space="preserve">
          <source>The $prefix parameter may be NULL, in which case the prefix is deduced from $wholeline. Or, the $wholeline parameter may be NULL or omitted if context information is unavailable or if context-aware completion is not desired.</source>
          <target state="translated">prefix パラメータを NULL にすることもできます。あるいは、コンテキスト情報が得られない場合やコンテキストを考慮した補完を行いたくない場合は、 $wholeline パラメータを NULL あるいは省略することもできます。</target>
        </trans-unit>
        <trans-unit id="02bbc5a1a7e84666a4d4dd0cec4c28449ae27a6f" translate="yes" xml:space="preserve">
          <source>The %_content table contains the unadulterated data inserted by the user into the FTS virtual table by the user. If the user does not explicitly supply a &quot;docid&quot; value when inserting records, one is selected automatically by the system.</source>
          <target state="translated">コンテンツ・テーブルには、ユーザによって FTS 仮想テーブルに挿入された、ユーザによって FTS 仮想テーブルに挿入された無修正のデータが含まれます。レコードを挿入する際にユーザが明示的に &quot;docid &quot;値を指定しない場合、システムによって自動的に1つが選択されます。</target>
        </trans-unit>
        <trans-unit id="7ff27a5cb67628299a86678a48c0336fb247a12c" translate="yes" xml:space="preserve">
          <source>The %_stat and %_docsize tables are only created if the FTS table uses the FTS4 module, not FTS3. Furthermore, the %_docsize table is omitted if the FTS4 table is created with the &lt;a href=&quot;fts3#fts4matchinfo&quot;&gt;&quot;matchinfo=fts3&quot;&lt;/a&gt; directive specified as part of the CREATE VIRTUAL TABLE statement. If they are created, the schema of the two tables is as follows:</source>
          <target state="translated">％_statおよび％_docsizeテーブルは、FTSテーブルがFTS3ではなくFTS4モジュールを使用する場合にのみ作成されます。さらに、CREATE VIRTUAL TABLEステートメントの一部として&lt;a href=&quot;fts3#fts4matchinfo&quot;&gt;「matchinfo = fts3」&lt;/a&gt;ディレクティブを指定してFTS4テーブルを作成した場合、％_ docsizeテーブルは省略されます。作成された場合、2つのテーブルのスキーマは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c824e78a5796a4ada97aea7265fbe991ac4b8766" translate="yes" xml:space="preserve">
          <source>The %q and %Q substitutions are SQLite enhancements, not found in most other printf() implementations.</source>
          <target state="translated">q および %Q 置換は SQLite の拡張で、他のほとんどの printf()実装にはありません。</target>
        </trans-unit>
        <trans-unit id="38a9fc3133aa73e0b29b95de437699b671e4c4f6" translate="yes" xml:space="preserve">
          <source>The %s substitution is universal, but the %z substitution is an SQLite enhancement, not found in other printf() implementations.</source>
          <target state="translated">%s 置換は汎用的ですが、%z 置換は SQLite の拡張であり、他の printf()実装にはありません。</target>
        </trans-unit>
        <trans-unit id="4b87f6c99821c5908fd04958d29e2e7c01fcfa39" translate="yes" xml:space="preserve">
          <source>The %w substitution is an SQLite enhancements, not found in most other printf() implementations.</source>
          <target state="translated">w 置換は SQLite の拡張機能で、他のほとんどの printf()実装にはありません。</target>
        </trans-unit>
        <trans-unit id="05ed0c85ed4fa11e23eab78d700cba29a96e54ed" translate="yes" xml:space="preserve">
          <source>The '%' character is used in requirement H35300 to represent the modulo operator, just as it is in programming languages such as C, Java and Javascript.</source>
          <target state="translated">文字「%」は、要件 H35300 では、C、Java、Javascript などのプログラミング言語と同様に、モジュロ演算子を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="e9354cba92715c3a8151b0bdbb532432be7bdd61" translate="yes" xml:space="preserve">
          <source>The 'crisismerge' option is similar to 'automerge', in that it determines how and how often the component b-trees that make up the full-text index are merged together. Once there exist</source>
          <target state="translated">crisismerge' オプションは 'automerge' と似ていますが、このオプションは、全文インデックスを構成するコンポーネントの b-tree をどのように、どのくらいの頻度でマージするかを決定します。いったん</target>
        </trans-unit>
        <trans-unit id="139c169421eec1791495afdd3b65ecbf6f7f8622" translate="yes" xml:space="preserve">
          <source>The *+* operator on the *x* column will prevent that term from constraining an index. This would force the use of the ex2i2 index.</source>
          <target state="translated">x*列の*+*演算子は、その項がインデックスを制約することを防ぎます。これはex2i2インデックスの使用を強制します。</target>
        </trans-unit>
        <trans-unit id="fe65d357eb360ea29fe1d68436790805aab233d0" translate="yes" xml:space="preserve">
          <source>The *pHighwater parameter records the deepest parser stack. The *pCurrent value is undefined. The *pHighwater value is only meaningful if SQLite is compiled with &lt;a href=&quot;../compile#yytrackmaxstackdepth&quot;&gt;YYTRACKMAXSTACKDEPTH&lt;/a&gt;.</source>
          <target state="translated">* pHighwaterパラメーターは、最も深いパーサースタックを記録します。* pCurrent値は未定義です。* pHighwater値は、SQLiteが&lt;a href=&quot;../compile#yytrackmaxstackdepth&quot;&gt;YYTRACKMAXSTACKDEPTH&lt;/a&gt;でコンパイルされている場合にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="c1ea66787615c66d86376977b69791f61618b2a2" translate="yes" xml:space="preserve">
          <source>The *pHighwater parameter records the deepest parser stack. The *pCurrent value is undefined. The *pHighwater value is only meaningful if SQLite is compiled with &lt;a href=&quot;compile#yytrackmaxstackdepth&quot;&gt;YYTRACKMAXSTACKDEPTH&lt;/a&gt;.</source>
          <target state="translated">* pHighwaterパラメーターは、最も深いパーサースタックを記録します。* pCurrent値は未定義です。* pHighwater値は、SQLiteが&lt;a href=&quot;compile#yytrackmaxstackdepth&quot;&gt;YYTRACKMAXSTACKDEPTH&lt;/a&gt;でコンパイルされている場合にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="6a0209d4ffca3af22d05eab8c450129e95986f2c" translate="yes" xml:space="preserve">
          <source>The --blob-api option on the database read test causes kvtest to use the &lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; feature of SQLite to load the content of the blobs, rather than running pure SQL statements. This helps SQLite to run a little faster on read tests. You can omit that option to compare the performance of SQLite running SQL statements. In that case, the SQLite still out-performs direct reads, though by not as much as when using &lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt;. The --blob-api option is ignored for tests that read from individual disk files.</source>
          <target state="translated">データベース読み取りテストの--blob-apiオプションを使用すると、&lt;a href=&quot;c3ref/blob_read&quot;&gt;kvtest&lt;/a&gt;は、純粋なSQLステートメントを実行するのではなく、SQLiteのsqlite3_blob_read（）機能を使用して、BLOBのコンテンツをロードします。これは、SQLiteが読み取りテストで少し速く実行するのに役立ちます。このオプションを省略して、SQLステートメントを実行するSQLiteのパフォーマンスを比較できます。その場合、&lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read（）&lt;/a&gt;を使用する場合ほどではありませんが、SQLiteは依然として直接読み取りよりも優れています。--blob-apiオプションは、個々のディスクファイルから読み取るテストでは無視されます。</target>
        </trans-unit>
        <trans-unit id="aeee09a9fb263d7d0932e1687159faa31b022fff" translate="yes" xml:space="preserve">
          <source>The --deserialize option associated with opening a new database cause the database file to be read into memory and accessed using the &lt;a href=&quot;c3ref/deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt; API. This simplifies running tests on a database without modifying the file on disk.</source>
          <target state="translated">新しいデータベースを開くことに関連する--deserializeオプションを指定すると、データベースファイルがメモリに読み込まれ、&lt;a href=&quot;c3ref/deserialize&quot;&gt;sqlite3_deserialize（）&lt;/a&gt; API を使用してアクセスされます。これにより、ディスク上のファイルを変更せずに、データベースでのテストの実行が簡素化されます。</target>
        </trans-unit>
        <trans-unit id="11d3b8386b1e3ccb1cc08c05d6ada4438f0769ba" translate="yes" xml:space="preserve">
          <source>The --primarykey flag changes the pairing algorithm slightly so that the schema-declared &lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY&lt;/a&gt; is always used for pairing, even on tables that have a &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;. This is often a better choice for finding differences, however it can lead to missed differences in the case of rows that have one or more PRIMARY KEY columns set to NULL.</source>
          <target state="translated">--primarykeyフラグはペアリングアルゴリズムをわずかに変更するため、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を持つテーブルでも、スキーマで宣言された&lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY&lt;/a&gt;が常にペアリングに使用されます。多くの場合、これは違いを見つけるためのより良い選択ですが、1つ以上のPRIMARY KEY列がNULLに設定されている行の場合、違いを見逃す可能性があります。</target>
        </trans-unit>
        <trans-unit id="5cd46599c902c6e8fdb69c21ede0585852a486b3" translate="yes" xml:space="preserve">
          <source>The --update and --insert commands work like --create command, except that they do not delete the current archive before commencing. New versions of files silently replace existing files with the same names, but otherwise the initial contents of the archive (if any) remain intact.</source>
          <target state="translated">update コマンドと --insert コマンドは --create コマンドと同じように動作しますが、開始前に現在のアーカイブを削除しない点を除いては、 --update コマンドと --insert コマンドは --create コマンドと同じように動作します。新しいバージョンのファイルは、既存のファイルを同じ名前で静かに置き換えますが、それ以外の場合は、アーカイブの初期の内容 (もしあれば)はそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="92d15467647a321ed86c3b0d4ddfb73a9334e61d" translate="yes" xml:space="preserve">
          <source>The -ldl library is needed to support dynamic loading, the &lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension()&lt;/a&gt; interface and the &lt;a href=&quot;lang_corefunc#load_extension&quot;&gt;load_extension() SQL function&lt;/a&gt;. If these features are not required, then they can be omitted using &lt;a href=&quot;compile#omit_load_extension&quot;&gt;SQLITE_OMIT_LOAD_EXTENSION&lt;/a&gt; compile-time option:</source>
          <target state="translated">-ldlライブラリは、動的ロード、&lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension（）&lt;/a&gt;インターフェース、および&lt;a href=&quot;lang_corefunc#load_extension&quot;&gt;load_extension（）SQL関数&lt;/a&gt;をサポートするために必要です。これらの機能が必要ない場合は、&lt;a href=&quot;compile#omit_load_extension&quot;&gt;SQLITE_OMIT_LOAD_EXTENSION&lt;/a&gt;コンパイル時オプションを使用して省略できます。</target>
        </trans-unit>
        <trans-unit id="ff976c7e2e67ea0658ecbf1774cc0a53bba77580" translate="yes" xml:space="preserve">
          <source>The .selftest command reads the rows of the selftest table in selftest.tno order. For each 'memo' row, it writes the text in 'cmd' to the output. For each 'run' row, it runs the 'cmd' text as SQL and compares the result to the value in 'ans', and shows an error message if the results differ.</source>
          <target state="translated">.selftestコマンドは、selftestテーブルの行をselftest.tnoの順に読み込む。各 'memo' 行に対して、'cmd' のテキストを出力に書き込む。各 'run' 行に対して、'cmd' テキストを SQL として実行し、その結果を 'ans' の値と比較し、結果が異なる場合にはエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="12dcfb8a7c514a22ec8efe2151085ef4fd8b43ec" translate="yes" xml:space="preserve">
          <source>The 100-byte database file header (found on page 1 only)</source>
          <target state="translated">100 バイトのデータベースファイルヘッダ (1 ページ目のみに記載)</target>
        </trans-unit>
        <trans-unit id="a17caaa0027df54644d9d8d5e0706c4b71db11b0" translate="yes" xml:space="preserve">
          <source>The 100-byte database file header is found only on page 1, which is always a table b-tree page. All other b-tree pages in the database file omit this 100-byte header.</source>
          <target state="translated">100バイトのデータベースファイルヘッダは1ページ目にのみ存在し、これは常にテーブルのb-treeページである。データベースファイル内の他のすべてのb-treeページは、この100バイトのヘッダを省略しています。</target>
        </trans-unit>
        <trans-unit id="3b6884cf3226327e79dce3b07ec790a620af6f29" translate="yes" xml:space="preserve">
          <source>The 12-step &lt;a href=&quot;lang_altertable#otheralter&quot;&gt;generalized ALTER TABLE procedure&lt;/a&gt; above will work even if the schema change causes the information stored in the table to change. So the full 12-step procedure above is appropriate for dropping a column, changing the order of columns, adding or removing a UNIQUE constraint or PRIMARY KEY, adding CHECK or FOREIGN KEY or NOT NULL constraints, or changing the datatype for a column, for example. However, a simpler and faster procedure can optionally be used for some changes that do no affect the on-disk content in any way. The following simpler procedure is appropriate for removing CHECK or FOREIGN KEY or NOT NULL constraints, or adding, removing, or changing default values on a column.</source>
          <target state="translated">上記の12ステップの&lt;a href=&quot;lang_altertable#otheralter&quot;&gt;一般化されたALTER TABLEプロシージャ&lt;/a&gt;は、スキーマの変更によりテーブルに格納されている情報が変更された場合でも機能します。したがって、上記の完全な12ステップの手順は、列の削除、列の順序の変更、UNIQUE制約またはPRIMARY KEYの追加または削除、CHECKまたはFOREIGN KEYまたはNOT NULL制約の追加、または列のデータ型の変更に適しています。例。ただし、ディスク上のコンテンツにまったく影響を及ぼさない変更については、オプションで簡単で高速な手順を使用できます。次の簡単な手順は、CHECK制約、FOREIGN KEY制約、またはNOT NULL制約を削除する場合、または列のデフォルト値を追加、削除、または変更する場合に適しています。</target>
        </trans-unit>
        <trans-unit id="3229fe36f5dbdb9bc16916270b8799663f2b4b3a" translate="yes" xml:space="preserve">
          <source>The 2nd argument to the sqlite3_exec() callback function is the number of columns in the result. The 3rd argument to the sqlite3_exec() callback is an array of pointers to strings obtained as if from &lt;a href=&quot;#sqlite3_column_blob&quot;&gt;sqlite3_column_text()&lt;/a&gt;, one for each column. If an element of a result row is NULL then the corresponding string pointer for the sqlite3_exec() callback is a NULL pointer. The 4th argument to the sqlite3_exec() callback is an array of pointers to strings where each entry represents the name of corresponding result column as obtained from &lt;a href=&quot;#sqlite3_column_name&quot;&gt;sqlite3_column_name()&lt;/a&gt;.</source>
          <target state="translated">sqlite3_exec（）コールバック関数の2番目の引数は、結果の列の数です。sqlite3_exec（）コールバックに第3引数からかのようにして得られた文字列へのポインタの配列である&lt;a href=&quot;#sqlite3_column_blob&quot;&gt;sqlite3_column_text（） &lt;/a&gt;、各列に対して1つ。結果行の要素がNULLの場合、sqlite3_exec（）コールバックに対応する文字列ポインターはNULLポインターです。sqlite3_exec（）コールバックの4番目の引数は文字列へのポインターの配列で、各エントリは&lt;a href=&quot;#sqlite3_column_name&quot;&gt;sqlite3_column_name（）&lt;/a&gt;から取得した対応する結果列の名前を表します。</target>
        </trans-unit>
        <trans-unit id="f8004ad0fbc670903554e47567c2e9bf84a736bf" translate="yes" xml:space="preserve">
          <source>The 2nd argument to the sqlite3_exec() callback function is the number of columns in the result. The 3rd argument to the sqlite3_exec() callback is an array of pointers to strings obtained as if from &lt;a href=&quot;column_blob&quot;&gt;sqlite3_column_text()&lt;/a&gt;, one for each column. If an element of a result row is NULL then the corresponding string pointer for the sqlite3_exec() callback is a NULL pointer. The 4th argument to the sqlite3_exec() callback is an array of pointers to strings where each entry represents the name of corresponding result column as obtained from &lt;a href=&quot;column_name&quot;&gt;sqlite3_column_name()&lt;/a&gt;.</source>
          <target state="translated">sqlite3_exec（）コールバック関数の2番目の引数は、結果の列の数です。sqlite3_exec（）コールバックに第3引数からかのようにして得られた文字列へのポインタの配列である&lt;a href=&quot;column_blob&quot;&gt;sqlite3_column_text（） &lt;/a&gt;、各列に対して1つ。結果行の要素がNULLの場合、sqlite3_exec（）コールバックに対応する文字列ポインターはNULLポインターです。sqlite3_exec（）コールバックの4番目の引数は文字列へのポインターの配列で、各エントリは&lt;a href=&quot;column_name&quot;&gt;sqlite3_column_name（）&lt;/a&gt;から取得した対応する結果列の名前を表します。</target>
        </trans-unit>
        <trans-unit id="de71717ad00d5c6da7753059b7611f9841b1d459" translate="yes" xml:space="preserve">
          <source>The 32-bit integer value P1 is written into register P2.</source>
          <target state="translated">32ビットの整数値P1がレジスタP2に書き込まれる。</target>
        </trans-unit>
        <trans-unit id="0fa6dc01b797fc02e2f48692d3a39f9204d77ab0" translate="yes" xml:space="preserve">
          <source>The 32-bit unsigned integer at offset 128 in the WAL-index header is called the &quot;nBackfill&quot;. this field holds the number of frames in the WAL file which have been copied back into the main database.</source>
          <target state="translated">WAL-indexヘッダのオフセット128にある32ビット符号なし整数を &quot;nBackfill &quot;と呼びます。</target>
        </trans-unit>
        <trans-unit id="e3de01c332227a39275dbc5888bb606fa2949671" translate="yes" xml:space="preserve">
          <source>The 32-bit unsigned integer at offset 16 (and repeated at offset 64) is the number of valid frames in the WAL. Because WAL frame are numbered starting with 1, mxFrame is also the index of the last valid commit frame in the WAL. A commit frame is a frame that has a non-zero &quot;size of database&quot; value in bytes 4 through 7 of the frame header, and that indicates the end of a transaction.</source>
          <target state="translated">オフセット16の32ビット符号なし整数(オフセット64で繰り返される)は、WAL内の有効なフレーム数です。WALフレームには1から始まる番号が付けられているので、mxFrameはWAL内の最後の有効なコミットフレームのインデックスでもあります。コミットフレームは、フレームヘッダのバイト4〜7に0以外の「データベースのサイズ」値を持ち、トランザクションの終了を示すフレームである。</target>
        </trans-unit>
        <trans-unit id="ae0f85b04e7fa9cc6d6fac1b8bbc475f7f896833" translate="yes" xml:space="preserve">
          <source>The 35% figure is based on running tests on every machine that the author has easily at hand. Some reviewers of this article report that SQLite has higher latency than direct I/O on their systems. We do not yet understand the difference. We also see indications that SQLite does not perform as well as direct I/O when experiments are run using a cold filesystem cache.</source>
          <target state="translated">35%という数字は、筆者が簡単に手元にあるすべてのマシンでテストを実行したことに基づいています。この記事のレビュアーの中には、自分のシステムではSQLiteの方が直接I/Oよりも高いレイテンシを持っていると報告している人もいます。私たちはまだその違いを理解していません。また、コールドファイルシステムキャッシュを使用して実験を実行した場合、SQLiteは直接I/Oほどの性能を発揮しないという兆候も見られます。</target>
        </trans-unit>
        <trans-unit id="99484295a38d44d61a5164088be45dfe447bd6fb" translate="yes" xml:space="preserve">
          <source>The 3rd parameter of the built-in SUBSTR() function is now optional.</source>
          <target state="translated">組み込みの SUBSTR()関数の 3 番目のパラメータがオプションになりました。</target>
        </trans-unit>
        <trans-unit id="b03a25a4d8213505aa58b43a2a9ec61a89d8bd66" translate="yes" xml:space="preserve">
          <source>The 4-byte big-endian integer at offset 28 into the header stores the size of the database file in pages. If this in-header datasize size is not valid (see the next paragraph), then the database size is computed by looking at the actual size of the database file. Older versions of SQLite ignored the in-header database size and used the actual file size exclusively. Newer versions of SQLite use the in-header database size if it is available but fall back to the actual file size if the in-header database size is not valid.</source>
          <target state="translated">ヘッダのオフセット28にある4バイトのビッグエンディアン整数は、データベースファイルのサイズをページ単位で格納します。このヘッダ内データサイズが有効でない場合(次の段落を参照)、データベースのサイズはデータベースファイルの実際のサイズを見て計算されます。古いバージョンのSQLiteでは、ヘッダ内データベースサイズを無視して、実際のファイルサイズのみを使用していました。新しいバージョンのSQLiteでは、ヘッダ内データベースサイズが利用可能な場合はヘッダ内データベースサイズを使用しますが、ヘッダ内データベースサイズが有効でない場合は実際のファイルサイズに戻ります。</target>
        </trans-unit>
        <trans-unit id="ef2a0b06932c2dcd259f9b038635b5911a22f5bb" translate="yes" xml:space="preserve">
          <source>The 4-byte big-endian integer at offset 56 determines the encoding used for all text strings stored in the database. A value of 1 means UTF-8. A value of 2 means UTF-16le. A value of 3 means UTF-16be. No other values are allowed. The sqlite3.h header file defines C-preprocessor macros SQLITE_UTF8 as 1, SQLITE_UTF16LE as 2, and SQLITE_UTF16BE as 3, to use in place of the numeric codes for the text encoding.</source>
          <target state="translated">オフセット56にある4バイトのビッグエンディアン整数は、データベースに格納されているすべてのテキスト文字列に使用されるエンコーディングを決定します。値 1 は UTF-8 を意味します。値 2 は UTF-16le を意味します。3 の値は UTF-16be を意味します。それ以外の値は許されません。sqlite3.hヘッダファイルでは、テキストエンコーディングの数値コードの代わりに使用するCプリプロセッサマクロSQLITE_UTF8を1、SQLITE_UTF16LEを2、SQLITE_UTF16BEを3として定義しています。</target>
        </trans-unit>
        <trans-unit id="59780a9139eaaa69dc8ff8373215df2d27399d4a" translate="yes" xml:space="preserve">
          <source>The 4-byte big-endian integer at offset 60 is the user version which is set and queried by the &lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_version pragma&lt;/a&gt;. The user version is not used by SQLite.</source>
          <target state="translated">オフセット60の4バイトのビッグエンディアン整数は、&lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_versionプラグマ&lt;/a&gt;によって設定および照会されるユーザーバージョンです。ユーザーバージョンはSQLiteでは使用されません。</target>
        </trans-unit>
        <trans-unit id="b59b6e739385a58f0bfd59ff19b74ae1c97b3ca9" translate="yes" xml:space="preserve">
          <source>The 4-byte big-endian integer at offset 68 is an &quot;Application ID&quot; that can be set by the &lt;a href=&quot;pragma#pragma_application_id&quot;&gt;PRAGMA application_id&lt;/a&gt; command in order to identify the database as belonging to or associated with a particular application. The application ID is intended for database files used as an &lt;a href=&quot;appfileformat&quot;&gt;application file-format&lt;/a&gt;. The application ID can be used by utilities such as &lt;a href=&quot;http://www.darwinsys.com/file/&quot;&gt;file(1)&lt;/a&gt; to determine the specific file type rather than just reporting &quot;SQLite3 Database&quot;. A list of assigned application IDs can be seen by consulting the &lt;a href=&quot;http://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=magic.txt&quot;&gt;magic.txt&lt;/a&gt; file in the SQLite source repository.</source>
          <target state="translated">オフセット68の4バイトのビッグエンディアン整数は「アプリケーションID」であり、&lt;a href=&quot;pragma#pragma_application_id&quot;&gt;PRAGMA application_id&lt;/a&gt;コマンドで設定して、データベースを特定のアプリケーションに属している、または関連付けられているものとして識別できます。アプリケーションIDは、&lt;a href=&quot;appfileformat&quot;&gt;アプリケーションファイル形式&lt;/a&gt;として使用されるデータベースファイルを対象としています。アプリケーションIDを&lt;a href=&quot;http://www.darwinsys.com/file/&quot;&gt;file（1）&lt;/a&gt;などのユーティリティで使用して、「SQLite3データベース」を報告するだけでなく、特定のファイルタイプを判別できます。割り当てられたアプリケーションIDのリストは、SQLiteソースリポジトリの&lt;a href=&quot;http://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=magic.txt&quot;&gt;magic.txt&lt;/a&gt;ファイルを参照することで確認できます。</target>
        </trans-unit>
        <trans-unit id="07f0a53720eada7bca96ab5b1af017ecee35257f" translate="yes" xml:space="preserve">
          <source>The 4-byte big-endian integer at offset 96 stores the &lt;a href=&quot;c3ref/c_source_id&quot;&gt;SQLITE_VERSION_NUMBER&lt;/a&gt; value for the SQLite library that most recently modified the database file. The 4-byte big-endian integer at offset 92 is the value of the &lt;a href=&quot;fileformat2#chngctr&quot;&gt;change counter&lt;/a&gt; when the version number was stored. The integer at offset 92 indicates which transaction the version number is valid for and is sometimes called the &quot;version-valid-for number&quot;.</source>
          <target state="translated">オフセット96の4バイトのビッグエンディアン整数は、データベースファイルを最後に変更したSQLiteライブラリの&lt;a href=&quot;c3ref/c_source_id&quot;&gt;SQLITE_VERSION_NUMBER&lt;/a&gt;値を格納します。オフセット92の4バイトのビッグエンディアン整数は、バージョン番号が格納されたときの&lt;a href=&quot;fileformat2#chngctr&quot;&gt;変更カウンターの&lt;/a&gt;値です。オフセット92の整数は、バージョン番号が有効なトランザクションを示し、「version-valid-for番号」と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="b2d1137ce6ac9536674089958f7183c5cef074dd" translate="yes" xml:space="preserve">
          <source>The 4-byte big-endian signed integer at offset 48 is the suggested cache size in pages for the database file. The value is a suggestion only and SQLite is under no obligation to honor it. The absolute value of the integer is used as the suggested size. The suggested cache size can be set using the &lt;a href=&quot;pragma#pragma_default_cache_size&quot;&gt;default_cache_size pragma&lt;/a&gt;.</source>
          <target state="translated">オフセット48の4バイトのビッグエンディアン符号付き整数は、データベースファイルの推奨キャッシュサイズ（ページ単位）です。値は提案にすぎず、SQLiteはそれを尊重する義務を負いません。整数の絶対値が推奨サイズとして使用されます。推奨されるキャッシュサイズは、&lt;a href=&quot;pragma#pragma_default_cache_size&quot;&gt;default_cache_sizeプラグマ&lt;/a&gt;を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="7632ae3463f74e8bc40ebd99c8e14ebcad0e1acf" translate="yes" xml:space="preserve">
          <source>The 8 or 12 byte b-tree page header</source>
          <target state="translated">8 バイトまたは 12 バイトの b-tree ページヘッダ</target>
        </trans-unit>
        <trans-unit id="f5b2d0b06ac8eecacdf1f9fc8ceb4463be132806" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt; flag means the file should be deleted when it is closed. The &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt; will be set for TEMP databases and their journals, transient databases, and subjournals.</source>
          <target state="translated">&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_DELETEONCLOSEの&lt;/a&gt;フラグは、それが閉じているときに、ファイルが削除されるべきであることを意味します。&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_DELETEONCLOSEは、&lt;/a&gt; TEMPデータベースとそのジャーナル、過渡データベース、およびsubjournalsのために設定されます。</target>
        </trans-unit>
        <trans-unit id="113a719d1e8937c17801bea84f7fbfbe80a9d62b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_EXCLUSIVE&lt;/a&gt; flag is always used in conjunction with the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_CREATE&lt;/a&gt; flag, which are both directly analogous to the O_EXCL and O_CREAT flags of the POSIX open() API. The SQLITE_OPEN_EXCLUSIVE flag, when paired with the SQLITE_OPEN_CREATE, is used to indicate that file should always be created, and that it is an error if it already exists. It is</source>
          <target state="translated">&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_EXCLUSIVE&lt;/a&gt;フラグは常にと一緒に使用される&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_CREATEの&lt;/a&gt;両方POSIXオープン（）APIのO_EXCLとO_CREATフラグに直接類似しているフラグ。SQLITE_OPEN_EXCLUSIVEフラグは、SQLITE_OPEN_CREATEと組み合わせて使用​​すると、ファイルを常に作成する必要があること、およびファイルがすでに存在する場合はエラーであることを示します。です</target>
        </trans-unit>
        <trans-unit id="81aa4d01093839a3328717a25027872953f919a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#SQLITE_SOURCE_ID&quot;&gt;SQLITE_VERSION&lt;/a&gt; C preprocessor macro in the sqlite3.h header evaluates to a string literal that is the SQLite version in the format &quot;X.Y.Z&quot; where X is the major version number (always 3 for SQLite3) and Y is the minor version number and Z is the release number. The &lt;a href=&quot;#SQLITE_SOURCE_ID&quot;&gt;SQLITE_VERSION_NUMBER&lt;/a&gt; C preprocessor macro resolves to an integer with the value (X*1000000 + Y*1000 + Z) where X, Y, and Z are the same numbers used in &lt;a href=&quot;#SQLITE_SOURCE_ID&quot;&gt;SQLITE_VERSION&lt;/a&gt;. The SQLITE_VERSION_NUMBER for any given release of SQLite will also be larger than the release from which it is derived. Either Y will be held constant and Z will be incremented or else Y will be incremented and Z will be reset to zero.</source>
          <target state="translated">sqlite3.hヘッダーの&lt;a href=&quot;#SQLITE_SOURCE_ID&quot;&gt;SQLITE_VERSION&lt;/a&gt; Cプリプロセッサマクロは、「XYZ」形式のSQLiteバージョンである文字列リテラルに評価されます。Xはメジャーバージョン番号（SQLite3の場合は常に3）、Yはマイナーバージョン番号、Zはリリース番号。&lt;a href=&quot;#SQLITE_SOURCE_ID&quot;&gt;SQLITE_VERSION_NUMBER&lt;/a&gt; Cプリプロセッサ値を有する整数マクロ解決さ（X * 1000000 + Y&amp;times;1000 + Z）X、Y、及びZは、で使用したのと同じ数である&lt;a href=&quot;#SQLITE_SOURCE_ID&quot;&gt;SQLITE_VERSION&lt;/a&gt;。 SQLiteの特定のリリースのSQLITE_VERSION_NUMBERは、それが派生したリリースよりも大きくなります。 Yが一定に保持され、Zがインクリメントされるか、Yがインクリメントされ、Zがゼロにリセットされます。</target>
        </trans-unit>
        <trans-unit id="f1c75916c07cfb8eae73aa66b68a34bf29c22777" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; pointer D in a call to &lt;a href=&quot;#sqlite3_next_stmt&quot;&gt;sqlite3_next_stmt(D,S)&lt;/a&gt; must refer to an open database connection and in particular must not be a NULL pointer.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;の呼び出しでポインタD &lt;a href=&quot;#sqlite3_next_stmt&quot;&gt;sqlite3_next_stmt（D、S）は&lt;/a&gt;、オープンデータベース接続を参照し、特定する必要があり、NULLポインタであってはなりません。</target>
        </trans-unit>
        <trans-unit id="5bf64bb75c15b60e54d733e7fb04737bfbdcc130" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object itself is partially threadsafe. Multiple threads may safely make multiple concurrent calls to sqlite3_backup_step(). However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount() APIs are not strictly speaking threadsafe. If they are invoked at the same time as another thread is invoking sqlite3_backup_step() it is possible that they return invalid values.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクト自体は、部分的にスレッドセーフです。複数のスレッドがsqlite3_backup_step（）への複数の同時呼び出しを安全に行うことができます。ただし、sqlite3_backup_remaining（）およびsqlite3_backup_pagecount（）APIは厳密にはスレッドセーフではありません。別のスレッドがsqlite3_backup_step（）を呼び出しているときに同時に呼び出された場合、無効な値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="7b899c2433d199dbb7815bdf0ba2afb729910cf1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind_zeroblob()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_zeroblob()&lt;/a&gt; interfaces and the built-in &lt;a href=&quot;lang_corefunc#zeroblob&quot;&gt;zeroblob&lt;/a&gt; SQL function may be used to create a zero-filled blob to read or write using the incremental-blob interface.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind_zeroblob（）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_zeroblob（）&lt;/a&gt;インターフェースと内蔵&lt;a href=&quot;lang_corefunc#zeroblob&quot;&gt;zeroblobの&lt;/a&gt; SQL関数は、読み取りまたはインクリメンタルブロブインタフェースを使用して書き込むためのゼロ充填BLOBを作成するために使用されてもよいです。</target>
        </trans-unit>
        <trans-unit id="243b1f5a94daea2d7cb3ce8a6e46d2fc0337bddb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension(X)&lt;/a&gt; interface unregisters the initialization routine X that was registered using a prior call to &lt;a href=&quot;#sqlite3_auto_extension&quot;&gt;sqlite3_auto_extension(X)&lt;/a&gt;. The &lt;a href=&quot;#sqlite3_cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension(X)&lt;/a&gt; routine returns 1 if initialization routine X was successfully unregistered and it returns 0 if X was not on the list of initialization routines.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension（X）&lt;/a&gt;インターフェースが前の呼び出し使用して登録された初期化ルーチンX登録解除&lt;a href=&quot;#sqlite3_auto_extension&quot;&gt;sqlite3_auto_extension（X）を&lt;/a&gt;。&lt;a href=&quot;#sqlite3_cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension（X）&lt;/a&gt;初期化ルーチンXであれば、リターン1が正常に登録解除されたとXは、初期化ルーチンのリストに載っていなかった場合には0を返します。</target>
        </trans-unit>
        <trans-unit id="4d9c76fa5b1b1ce93415a995c6d4d84ffeb6d357" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;, ...) interface can register an alternative page cache implementation by passing in an instance of the sqlite3_pcache_methods2 structure. In many applications, most of the heap memory allocated by SQLite is used for the page cache. By implementing a custom page cache using this API, an application can better control the amount of memory consumed by SQLite, the way in which that memory is allocated and released, and the policies used to determine exactly which parts of a database file are cached and for how long.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config&lt;/a&gt;（&lt;a href=&quot;#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;、...）インタフェースはsqlite3_pcache_methods2構造体のインスタンスを渡すことによって、代替ページキャッシュの実装を登録することができます。多くのアプリケーションでは、SQLiteによって割り当てられたヒープメモリのほとんどがページキャッシュに使用されます。このAPIを使用してカスタムページキャッシュを実装することにより、アプリケーションは、SQLiteによって消費されるメモリの量、そのメモリの割り当てと解放の方法、およびデータベースファイルのどの部分をキャッシュするかを正確に決定するために使用されるポリシーをより適切に制御できます。どれだけの時間。</target>
        </trans-unit>
        <trans-unit id="5d45a04d8212fde9c0874120a3960331ca779f2b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; interface makes a direct call to the xFileControl method for the &lt;a href=&quot;#sqlite3_io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object associated with a particular database identified by the second argument. The name of the database is &quot;main&quot; for the main database or &quot;temp&quot; for the TEMP database, or the name that appears after the AS keyword for databases that are added using the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; SQL command. A NULL pointer can be used in place of &quot;main&quot; to refer to the main database file. The third and fourth parameters to this routine are passed directly through to the second and third parameters of the xFileControl method. The return value of the xFileControl method becomes the return value of this routine.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;インターフェースがためxFileControlメソッドを直接呼び出すことができる&lt;a href=&quot;#sqlite3_io_methods&quot;&gt;sqlite3_io_methodsが&lt;/a&gt;二番目の引数によって識別される特定のデータベースに関連付けられたオブジェクトを。データベースの名前は、メインデータベースの場合は「main」、TEMPデータベースの場合は「temp」、または&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; SQLコマンドを使用して追加されたデータベースのASキーワードの後に​​表示される名前です。 「main」の代わりにNULLポインタを使用して、メインデータベースファイルを参照できます。このルーチンの3番目と4番目のパラメーターは、xFileControlメソッドの2番目と3番目のパラメーターに直接渡されます。 xFileControlメソッドの戻り値は、このルーチンの戻り値になります。</target>
        </trans-unit>
        <trans-unit id="1190e60391b896900656c0ed0c45b80a24b61942" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64&lt;/a&gt; variable pointed to by the T parameter will be set to the total number of rows examined by all iterations of the X-th loop.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64の&lt;/a&gt;変数は、Tパラメータは、行の合計数に設定することによって指さX番目のループのすべての反復によって調べ。</target>
        </trans-unit>
        <trans-unit id="68df0918aa353458edcd2a2adfa1d6ea97cffd5f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64&lt;/a&gt; variable pointed to by the T parameter will be set to the total number of times that the X-th loop has run.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64の&lt;/a&gt;変数は、TパラメータがX番目のループが実行された回数の合計数に設定することによって指さ。</target>
        </trans-unit>
        <trans-unit id="5e18bfb46029f881a46fabedb7acfaf5c4cc5dda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log()&lt;/a&gt; interface writes a message into the &lt;a href=&quot;errlog&quot;&gt;error log&lt;/a&gt; established by the &lt;a href=&quot;#sqliteconfiglog&quot;&gt;SQLITE_CONFIG_LOG&lt;/a&gt; option to &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt;. If logging is enabled, the zFormat string and subsequent arguments are used with &lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt; to generate the final output string.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log（）&lt;/a&gt;インタフェースは、にメッセージを書き込み&lt;a href=&quot;errlog&quot;&gt;、エラー・ログ&lt;/a&gt;によって確立された&lt;a href=&quot;#sqliteconfiglog&quot;&gt;SQLITE_CONFIG_LOG&lt;/a&gt;にオプション&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（） &lt;/a&gt;。ログが有効になっている場合、zFormat文字列と後続の引数が&lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf（）で&lt;/a&gt;使用され、最終的な出力文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="a8d3a9c5e86973d6925c26336eb4b86036d70cb6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; routine returns the number of bytes of memory currently outstanding (malloced but not freed). The &lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; routine returns the maximum value of &lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; since the high-water mark was last reset. The values returned by &lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; include any overhead added by SQLite in its implementation of &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt;, but not overhead added by the any underlying system library routines that &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; may call.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;リターンするメモリのバイト数は、現在未解決（mallocさが、解放されません）。&lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_highwater（）&lt;/a&gt;リターンの最大値&lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;ハイウォーターマークが最後にリセットされたからです。返される値&lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_memory_highwater&quot;&gt;sqlite3_memory_highwater（）は&lt;/a&gt;、任意のオーバーヘッドの実装でのSQLiteによって追加挙げ&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;が、オーバーヘッドこと任意の基礎となるシステム・ライブラリ・ルーチンによって追加されない&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="dc30f41b86e312b265eb4e71d4d9a6acf99b0d1b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_mutex_alloc&quot;&gt;sqlite3_mutex_alloc()&lt;/a&gt; interface takes a single argument which is one of these integer constants.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_mutex_alloc&quot;&gt;sqlite3_mutex_alloc（）&lt;/a&gt;インターフェースは、これらの整数の定数のいずれかである単一の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="895178f8a3d57626d41012b259bf092ebaa065ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_count(D)&lt;/a&gt; interface returns the number of columns in the row that is being inserted, updated, or deleted.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_count（D）&lt;/a&gt;インターフェースは、挿入、更新、または削除されている列の列数を返します。</target>
        </trans-unit>
        <trans-unit id="92f98e455bc2921056f5d6b0ffb541ab9df1ffaf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_depth(D)&lt;/a&gt; interface returns 0 if the preupdate callback was invoked as a result of a direct insert, update, or delete operation; or 1 for inserts, updates, or deletes invoked by top-level triggers; or 2 for changes resulting from triggers called by top-level triggers; and so forth.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_depth（D）&lt;/a&gt;戻り0インターフェイス更新前コールバックは、直接挿入、更新、または削除操作の結果として呼び出された場合。または、トップレベルのトリガーによって呼び出される挿入、更新、または削除の場合は1。または2は、トップレベルのトリガーによって呼び出されたトリガーから生じる変更です。など。</target>
        </trans-unit>
        <trans-unit id="e08d4a7c0ce7457f9dab2dfa8af96af8deafb79d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; interface registers a callback function that is invoked prior to each &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;, &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;, and &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; operation on a database table. At most one preupdate hook may be registered at a time on a single &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt;; each call to &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; overrides the previous setting. The preupdate hook is disabled by invoking &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; with a NULL pointer as the second parameter. The third parameter to &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; is passed through as the first parameter to callbacks.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook（）&lt;/a&gt;インターフェース前各々に呼び出されるコールバック関数を登録する&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;、&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;、および&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;データベーステーブルの動作を制御します。単一の&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;で一度に登録できるpreupdateフックは1つだけです。&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook（）を&lt;/a&gt;呼び出すたびに、以前の設定が上書きされます。 preupdateフックは、2番目のパラメーターとしてNULLポインターを指定して&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook（）&lt;/a&gt;を呼び出すことにより無効になります。&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_hook（）&lt;/a&gt;の3番目のパラメーターは、最初のパラメーターとしてコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="76ad44c525d8f71caf7bed2b7e946c3d8c4e4d51" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_new(D,N,P)&lt;/a&gt; interface writes into P a pointer to a &lt;a href=&quot;#sqlite3_value&quot;&gt;protected sqlite3_value&lt;/a&gt; that contains the value of the Nth column of the table row after it is updated. The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined. This must only be used within SQLITE_INSERT and SQLITE_UPDATE preupdate callbacks; if it is used by an SQLITE_DELETE callback then the behavior is undefined. The &lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt; that P points to will be destroyed when the preupdate callback returns.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_new（D、N、P）&lt;/a&gt;インタフェースPへのポインタ書き込み&lt;a href=&quot;#sqlite3_value&quot;&gt;保護sqlite3_value&lt;/a&gt;それが更新された後、テーブルの行のN番目の列の値を含みます。 Nパラメータは0から列数よりも1少ない値でなければなりません。そうでない場合、動作は定義されません。これは、SQLITE_INSERTおよびSQLITE_UPDATE事前更新コールバック内でのみ使用する必要があります。 SQLITE_DELETEコールバックによって使用される場合、動作は未定義です。&lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt;更新前コールバックリターンPポイントが破壊されるすること。</target>
        </trans-unit>
        <trans-unit id="1c708fa87b4305f6c6c7b152f77487e32500d735" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_old()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_new()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_count()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_depth()&lt;/a&gt; interfaces provide additional information about a preupdate event. These routines may only be called from within a preupdate callback. Invoking any of these routines from outside of a preupdate callback or with a &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_old（） &lt;/a&gt;、&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_new（） &lt;/a&gt;、&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_count（） &lt;/a&gt;、及び&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_depth（）&lt;/a&gt;インターフェースは、更新前のイベントに関する追加情報を提供します。これらのルーチンは、更新前のコールバック内からのみ呼び出すことができます。これらのルーチンのいずれかを事前更新コールバックの外部から、または事前更新コールバックに提供されたものとは異なる&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;ポインターで呼び出すと、未定義の、おそらく望ましくない動作が発生します。</target>
        </trans-unit>
        <trans-unit id="62645acd92fc3d494d833d1a2acf99fc550b25a1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_old(D,N,P)&lt;/a&gt; interface writes into P a pointer to a &lt;a href=&quot;#sqlite3_value&quot;&gt;protected sqlite3_value&lt;/a&gt; that contains the value of the Nth column of the table row before it is updated. The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined. This must only be used within SQLITE_UPDATE and SQLITE_DELETE preupdate callbacks; if it is used by an SQLITE_INSERT callback then the behavior is undefined. The &lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt; that P points to will be destroyed when the preupdate callback returns.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_preupdate_count&quot;&gt;sqlite3_preupdate_old（D、N、P）&lt;/a&gt;インターフェースはPへのポインタ書き込み&lt;a href=&quot;#sqlite3_value&quot;&gt;保護sqlite3_value&lt;/a&gt;それが更新される前に、テーブルの行のN番目の列の値を含みます。Nパラメータは0から列数よりも1少ない値でなければなりません。そうしないと、動作は定義されません。これは、SQLITE_UPDATEおよびSQLITE_DELETE事前更新コールバック内でのみ使用する必要があります。SQLITE_INSERTコールバックによって使用される場合、動作は未定義です。&lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt;更新前コールバックリターンPポイントが破壊されるすること。</target>
        </trans-unit>
        <trans-unit id="73b2a32ae166fcb0b54e0a6a66b0c37e428124e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; interface does not change the values of any &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;bindings&lt;/a&gt; on the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; S.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;インタフェースは、任意の値が変化しない&lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;バインディング&lt;/a&gt;に&lt;a href=&quot;#sqlite3_stmt&quot;&gt;準備されたステートメント&lt;/a&gt; S.</target>
        </trans-unit>
        <trans-unit id="24aaeaf525c4a02afa566b3b6fde01711f410b96" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; interface resets the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; S back to the beginning of its program.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;インタフェースがリセットされ&lt;a href=&quot;#sqlite3_stmt&quot;&gt;、準備されたステートメントは、&lt;/a&gt;そのプログラムの先頭に戻るS。</target>
        </trans-unit>
        <trans-unit id="5ec7f66ae2478b5bf1fba7004c6f9eca0c47bbe3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_set_authorizer&quot;&gt;authorizer callback function&lt;/a&gt; must return either &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; or one of these two constants in order to signal SQLite whether or not the action is permitted. See the &lt;a href=&quot;#sqlite3_set_authorizer&quot;&gt;authorizer documentation&lt;/a&gt; for additional information.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_set_authorizer&quot;&gt;承認者のコールバック関数は、&lt;/a&gt;いずれかを返す必要があり&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;アクションが許可されているか否かのSQLiteを通知するために、またはこれら2つの定数のいずれか。追加情報については、&lt;a href=&quot;#sqlite3_set_authorizer&quot;&gt;承認者のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="de889cb07b2c7dd83d04327e082d9b8afd75421b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_set_authorizer&quot;&gt;sqlite3_set_authorizer()&lt;/a&gt; interface registers a callback function that is invoked to authorize certain SQL statement actions. The second parameter to the callback is an integer code that specifies what action is being authorized. These are the integer action codes that the authorizer callback may be passed.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_set_authorizer&quot;&gt;sqlite3_set_authorizer（）&lt;/a&gt;インタフェースは、特定のSQLステートメントアクションを認可するために呼び出されるコールバック関数を登録します。コールバックの2番目のパラメーターは、どのアクションが許可されているかを指定する整数コードです。これらは、オーソライザーコールバックが渡される整数のアクションコードです。</target>
        </trans-unit>
        <trans-unit id="b20fbf1dd1eb586565d476c6ea4477e75271549a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object returned from a successful call to &lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get()&lt;/a&gt; must be freed using &lt;a href=&quot;#sqlite3_snapshot_free&quot;&gt;sqlite3_snapshot_free()&lt;/a&gt; to avoid a memory leak.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshotの&lt;/a&gt;に成功した呼び出しから返されたオブジェクト&lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;（）sqlite3_snapshot_getを&lt;/a&gt;使用して解放しなければならない&lt;a href=&quot;#sqlite3_snapshot_free&quot;&gt;sqlite3_snapshot_freeを（）&lt;/a&gt;メモリリークを避けるために。</target>
        </trans-unit>
        <trans-unit id="775754ed627fe2a2cc8e3c07dc04d7c2771ef634" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot_free&quot;&gt;sqlite3_snapshot_free()&lt;/a&gt; interface is only available when the &lt;a href=&quot;compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot_free&quot;&gt;sqlite3_snapshot_free（）&lt;/a&gt;ときインタフェースにのみ利用可能である&lt;a href=&quot;compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt;コンパイル時のオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="14be7fcf3129f0807a23ee14219023eee52d1a02" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot_free&quot;&gt;sqlite3_snapshot_free(P)&lt;/a&gt; interface destroys &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; P. The application must eventually free every &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object using this routine to avoid a memory leak.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot_free&quot;&gt;sqlite3_snapshot_free（P）&lt;/a&gt;インターフェース破棄&lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; P.アプリケーションは、最終的にすべての解放する必要があります&lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshotの&lt;/a&gt;メモリリークを避けるために、このルーチンを使用してオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="3c246e9ef7aa9d8e18a838b47761936cd8a2acc5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get()&lt;/a&gt; interface is only available when the &lt;a href=&quot;compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get（）&lt;/a&gt;ときインタフェースにのみ利用可能である&lt;a href=&quot;compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt;コンパイル時のオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="2146a577e5e49a77b490e29aca2d82e371ec702c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get(D,S,P)&lt;/a&gt; interface attempts to make a new &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object that records the current state of schema S in database connection D. On success, the &lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get(D,S,P)&lt;/a&gt; interface writes a pointer to the newly created &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object into *P and returns SQLITE_OK. If there is not already a read-transaction open on schema S when this function is called, one is opened automatically.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get（D、S、P）&lt;/a&gt;新しいするためのインタフェース試み&lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshotの&lt;/a&gt;データベース接続D.オン成功のスキーマSの現在の状態を記録するオブジェクトを、&lt;a href=&quot;#sqlite3_snapshot_get&quot;&gt;sqlite3_snapshot_get（D、S、P）&lt;/a&gt;インターフェースは、新しく作成されたポインタを書き込みます。&lt;a href=&quot;#sqlite3_snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt;オブジェクトを* Pに入れ、SQLITE_OKを返します。この関数が呼び出されたときにスキーマSで開いている読み取りトランザクションがまだない場合は、自動的に開きます。</target>
        </trans-unit>
        <trans-unit id="efd7fc3c3c9a64e738f23c02f6e6fbe25f03ae8e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface is only available when the &lt;a href=&quot;compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;ときインタフェースにのみ利用可能である&lt;a href=&quot;compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt;コンパイル時のオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="b4e3c98131317b43afc18d358e2869af93b46671" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open(D,S,P)&lt;/a&gt; interface either starts a new read transaction or upgrades an existing one for schema S of &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D such that the read transaction refers to historical &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;snapshot&lt;/a&gt; P, rather than the most recent change to the database. The &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface returns SQLITE_OK on success or an appropriate &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; if it fails.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open（D、S、P）&lt;/a&gt;インタフェースのいずれかが新しいリードトランザクションを開始またはスキーマSのための既存のものをアップグレード&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;リードトランザクション履歴を意味するように、D &lt;a href=&quot;#sqlite3_snapshot&quot;&gt;スナップショット&lt;/a&gt;ではなく、データベースへの最新の変化より、P。&lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;インターフェースは、成功または適切にSQLITE_OKを返し&lt;a href=&quot;rescode&quot;&gt;、エラーコード&lt;/a&gt;が失敗した場合。</target>
        </trans-unit>
        <trans-unit id="83d565fd5c1ee3cccc1b5c10ce8ef575521cca40" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_append(X,S,N)&lt;/a&gt; method appends exactly N bytes from string S onto the end of the &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X. N must be non-negative. S must contain at least N non-zero bytes of content. To append a zero-terminated string in its entirety, use the &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendall()&lt;/a&gt; method instead.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_append（X、S、N）&lt;/a&gt;方法Nはの端部に弦Sからのバイト正確付加&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトX. Nは非負でなければなりません。Sには、少なくともNバイトの非ゼロバイトのコンテンツが含まれている必要があります。ゼロで終了する文字列全体を追加するには、代わりに&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendall（）&lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="6917c29880e6eab55b32466b3048653ea9692486" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendall(X,S)&lt;/a&gt; method appends the complete content of zero-terminated string S onto the end of &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendall（X、S）&lt;/a&gt;メソッドは、の最後にゼロで終わる文字列Sの完全な内容を付加&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトX.</target>
        </trans-unit>
        <trans-unit id="8658941f24fcaee032cb73b6958282aac488a0c4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendchar(X,N,C)&lt;/a&gt; method appends N copies of the single-byte character C onto the end of &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X. This method can be used, for example, to add whitespace indentation.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendchar（X、N、C）&lt;/a&gt;の方法は、端部に単一バイト文字CのN個のコピーを付加&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;この方法は、空白インデントを追加するために、例えば、使用することができるオブジェクトX.。</target>
        </trans-unit>
        <trans-unit id="5cf4ff61e78e32620c83211a0d5e1e3795abc7df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendf(X,F,...)&lt;/a&gt; and &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_vappendf(X,F,V)&lt;/a&gt; interfaces uses the &lt;a href=&quot;printf&quot;&gt;built-in printf&lt;/a&gt; functionality of SQLite to append formatted text onto the end of &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_appendf（X、F、...）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_vappendf（X、F、V）&lt;/a&gt;インターフェイスが使用&lt;a href=&quot;printf&quot;&gt;内蔵のprintf&lt;/a&gt;のSQLiteの機能の最後にフォーマットされたテキストを追加する&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトX.</target>
        </trans-unit>
        <trans-unit id="efc22c6c47d48b515ed10c7b3b7ca6cc54142437" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_reset(X)&lt;/a&gt; method resets the string under construction inside &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X back to zero bytes in length.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_append&quot;&gt;sqlite3_str_reset（X）&lt;/a&gt;メソッドは、内部構造の下列リセット&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;長さはゼロバイトにオブジェクトXのバック。</target>
        </trans-unit>
        <trans-unit id="7f1ec747ece71d77c655f9a07fae8cab37f0a797" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length(X)&lt;/a&gt; method returns the current length, in bytes, of the dynamic string under construction in &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X. The length returned by &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length(X)&lt;/a&gt; does not include the zero-termination byte.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length（X）&lt;/a&gt;メソッドは、建設中の動的な列のバイト単位の現在の長さを返し&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;によって返される長さオブジェクトX. &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length（X）が&lt;/a&gt;ゼロ終端バイトを含みません。</target>
        </trans-unit>
        <trans-unit id="abad991ae0af361a9313d8cfba4c5223a9d4a389" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; method returns a pointer to the current content of the dynamic string under construction in X. The value returned by &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; is managed by the sqlite3_str object X and might be freed or altered by any subsequent method on the same &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object. Applications must not used the pointer returned &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; after any subsequent method call on the same object. Applications may change the content of the string returned by &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; as long as they do not write into any bytes outside the range of 0 to &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length(X)&lt;/a&gt; and do not read or write any byte after any subsequent sqlite3_str method call.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value（X）&lt;/a&gt;メソッドは、によって返される値Xに建設動的文字列の現在の内容へのポインタを返す&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value（X）は&lt;/a&gt; sqlite3_strオブジェクトXによって管理され、同じ上の任意の後続の方法によって解放または変更されるかもしれません&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクト。アプリケーションは、同じオブジェクトに対する後続のメソッド呼び出しの後に返されるポインター&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value（X）を&lt;/a&gt;使用してはなりません。アプリケーションは、0から&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length（X）&lt;/a&gt;の範囲外のバイトに書き込みを行わず、後続のsqlite3_strメソッド呼び出しの後にバイトを読み書きしない限り、&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_value（X）&lt;/a&gt;によって返される文字列の内容を変更できます。</target>
        </trans-unit>
        <trans-unit id="9ed76b8571c1160c10dee5527b0d46210f6deae9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt; interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc64()&lt;/a&gt; that contains the constructed string. The calling application should pass the returned value to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt; to avoid a memory leak. The &lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt; interface may return a NULL pointer if any errors were encountered during construction of the string. The &lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt; interface will also return a NULL pointer if the string in &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object X is zero bytes long.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;インタフェースはsqlite3_strオブジェクトXとリターンから得られたバッファメモリへのポインタ破壊&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc64（）&lt;/a&gt;構築文字列を含みます。呼び出し元のアプリケーションは、メモリリークを回避するために、戻り値を&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free（）&lt;/a&gt;に渡す必要があります。&lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;エラーがストリングの構築中に遭遇した場合のインタフェースは、NULLポインタを返すことができます。&lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;の文字列場合インターフェイスもNULLポインタを戻します&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトXがゼロバイト長です。</target>
        </trans-unit>
        <trans-unit id="1a8bb7e6f2617ebce878cf41863558873c56dd1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new(D)&lt;/a&gt; interface allocates and initializes a new &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object. To avoid memory leaks, the object returned by &lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new()&lt;/a&gt; must be freed by a subsequent call to &lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new（D）&lt;/a&gt;界面割り当て及び新しい初期化&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_strの&lt;/a&gt;オブジェクト。メモリリークを回避するには、&lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new（）&lt;/a&gt;によって返されたオブジェクトを&lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;への後続の呼び出しで解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="283dcdc6097ac99a155d31e274b76b664e287d7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new(D)&lt;/a&gt; interface always returns a pointer to a valid &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; object, though in the event of an out-of-memory error the returned object might be a special singleton that will silently reject new text, always return SQLITE_NOMEM from &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode()&lt;/a&gt;, always return 0 for &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length()&lt;/a&gt;, and always return NULL from &lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt;. It is always safe to use the value returned by &lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new(D)&lt;/a&gt; as the sqlite3_str parameter to any of the other &lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_str_new&quot;&gt;（D）sqlite3_str_new&lt;/a&gt;インターフェイスは常に有効にポインタを返す&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_strの&lt;/a&gt;メモリ不足エラーが発生した場合に返されるオブジェクトは黙って新しいテキストを拒否します、常にからSQLITE_NOMEMを返す特殊なシングルトンかもしれませんが、オブジェクトを&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode（）&lt;/a&gt;、常に&lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_length（）&lt;/a&gt;に対して0を返し、常に&lt;a href=&quot;#sqlite3_str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;からNULLを返します。&lt;a href=&quot;#sqlite3_str_new&quot;&gt;sqlite3_str_new（D）&lt;/a&gt;によって返された値を、他の&lt;a href=&quot;#sqlite3_str&quot;&gt;sqlite3_str&lt;/a&gt;メソッドのsqlite3_strパラメータとして使用することは常に安全です。</target>
        </trans-unit>
        <trans-unit id="47a765f2716bbd0a7165479eb04c6ad3833cfd2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_strglob&quot;&gt;sqlite3_strglob(P,X)&lt;/a&gt; interface returns zero if and only if string X matches the &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; pattern P. The definition of &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; pattern matching used in &lt;a href=&quot;#sqlite3_strglob&quot;&gt;sqlite3_strglob(P,X)&lt;/a&gt; is the same as for the &quot;X GLOB P&quot; operator in the SQL dialect understood by SQLite. The &lt;a href=&quot;#sqlite3_strglob&quot;&gt;sqlite3_strglob(P,X)&lt;/a&gt; function is case sensitive.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_strglob&quot;&gt;sqlite3_strglob（P、X）&lt;/a&gt;インタフェース戻る場合にのみ文字列Xが一致する場合ゼロ&lt;a href=&quot;lang_expr#glob&quot;&gt;GLOBの&lt;/a&gt;パターンPの定義&lt;a href=&quot;lang_expr#glob&quot;&gt;GLOBの&lt;/a&gt;に使用されるパターンマッチング&lt;a href=&quot;#sqlite3_strglob&quot;&gt;（P、X）sqlite3_strglobの&lt;/a&gt;中の「X GLOB P」演算子の場合と同じですSQLiteが理解するSQL方言。&lt;a href=&quot;#sqlite3_strglob&quot;&gt;sqlite3_strglob（P、X）&lt;/a&gt;関数は、大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="95615e5c78fed3ee43eff0e7b082843f593e6a31" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_stricmp&quot;&gt;sqlite3_stricmp()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_stricmp&quot;&gt;sqlite3_strnicmp()&lt;/a&gt; APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion, using the same definition of &quot;case independence&quot; that SQLite uses internally when comparing identifiers.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_stricmp&quot;&gt;sqlite3_stricmp（）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_stricmp&quot;&gt;sqlite3_strnicmp（）&lt;/a&gt; APIは、識別子を比較するときのSQLiteが内部で使用する「ケース・自立」の同じ定義を使用して、アプリケーションや拡張機能は、ケースに依存しない形式でUTF-8文字列を含む二つのバッファの内容を比較することができます。</target>
        </trans-unit>
        <trans-unit id="51d8a3ef92ef4d7b314975584d8072e9206e198e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; function matches Unicode characters, though only ASCII characters are case folded.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike（P、X、E）&lt;/a&gt; ASCII文字のみがケースに折り畳まれているものの関数は、Unicode文字に一致します。</target>
        </trans-unit>
        <trans-unit id="485ac31bffb8ac065daf3ba2a8161fbdf5039efd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; interface returns zero if and only if string X matches the &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; pattern P with escape character E. The definition of &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; pattern matching used in &lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; is the same as for the &quot;X LIKE P ESCAPE E&quot; operator in the SQL dialect understood by SQLite. For &quot;X LIKE P&quot; without the ESCAPE clause, set the E parameter of &lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; to 0. As with the LIKE operator, the &lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; function is case insensitive - equivalent upper and lower case ASCII characters match one another.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_strlike&quot;&gt;（P、X、E）sqlite3_strlike&lt;/a&gt;インターフェースリターン文字列Xが一致する場合と場合にのみ、ゼロ&lt;a href=&quot;lang_expr#like&quot;&gt;LIKEの&lt;/a&gt;エスケープ文字Eでの定義パターンPを&lt;a href=&quot;lang_expr#like&quot;&gt;LIKEの&lt;/a&gt;に使用されるパターンマッチング&lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike（P、X、Eは）&lt;/a&gt;と同じですSQLiteが理解するSQL方言の「X LIKE P ESCAPE E」演算子。ESCAPE句のない「X LIKE P」の場合、&lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike（P、X、E）&lt;/a&gt;のEパラメータを0 に設定します。LIKE演算子と同様に、&lt;a href=&quot;#sqlite3_strlike&quot;&gt;sqlite3_strlike（P、X、E）&lt;/a&gt;関数は大文字と小文字を区別しません-同等の大文字と小文字小文字のASCII文字は互いに一致します。</target>
        </trans-unit>
        <trans-unit id="67cdd83f23b0c9baf88d22cb2f2c082de3577118" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes(D)&lt;/a&gt; interface only reports the number of rows that changed due to SQL statement run against database connection D. Any changes by other database connections are ignored. To detect changes against a database file from other database connections use the &lt;a href=&quot;pragma#pragma_data_version&quot;&gt;PRAGMA data_version&lt;/a&gt; command or the &lt;a href=&quot;#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;file control&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes（D）&lt;/a&gt;インターフェイスは、唯一の他のデータベース接続により、任意の変更は無視され、データベース接続D.に対してSQL文の実行のために変更された行の数を報告します。他のデータベース接続からのデータベースファイルに対する変更を検出するには、&lt;a href=&quot;pragma#pragma_data_version&quot;&gt;PRAGMA data_version&lt;/a&gt;コマンドまたは&lt;a href=&quot;#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION &lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;ファイルコントロール&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="2dc4153435020e41ac99ab2b5b83d08f27b98c68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_wal_autocheckpoint&quot;&gt;sqlite3_wal_autocheckpoint(D,N)&lt;/a&gt; is a wrapper around &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; that causes any database on &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D to automatically &lt;a href=&quot;wal#ckpt&quot;&gt;checkpoint&lt;/a&gt; after committing a transaction if there are N or more frames in the &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; file. Passing zero or a negative value as the nFrame parameter disables automatic checkpoints entirely.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_wal_autocheckpoint&quot;&gt;sqlite3_wal_autocheckpoint（D、N）は&lt;/a&gt;ラッパーです&lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;上の任意のデータベースの原因となる&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;を自動的にD &lt;a href=&quot;wal#ckpt&quot;&gt;のチェックポイント&lt;/a&gt; N以上のフレームがである場合、トランザクションをコミットした後&lt;a href=&quot;wal&quot;&gt;、先行書き込みログ&lt;/a&gt;ファイル。nFrameパラメータとしてゼロまたは負の値を渡すと、自動チェックポイントが完全に無効になります。</target>
        </trans-unit>
        <trans-unit id="9142f5b65b53643523fc33889c4ba6acff8188e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; function is used to register a callback that is invoked each time data is committed to a database in wal mode.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;関数は、WALモードでデータベースにコミットされるたびにデータが呼び出されるコールバックを登録するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0804c63302651c02a306eb7ec9ff35797d83276d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlbusyhandler&quot; id=&quot;sqlitefcntlbusyhandler&quot;&gt;SQLITE_FCNTL_BUSYHANDLER&lt;/a&gt; file-control may be invoked by SQLite on the database file handle shortly after it is opened in order to provide a custom VFS with access to the connections busy-handler callback. The argument is of type (void **) - an array of two (void *) values. The first (void *) actually points to a function of type (int (*)(void *)). In order to invoke the connections busy-handler, this function should be invoked with the second (void *) in the array as the only argument. If it returns non-zero, then the operation should be retried. If it returns zero, the custom VFS should abandon the current operation.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlbusyhandler&quot; id=&quot;sqlitefcntlbusyhandler&quot;&gt;SQLITE_FCNTL_BUSYHANDLERの&lt;/a&gt;ファイル制御は、それが接続ビジーハンドラのコールバックへのアクセス権を持つカスタムVFSを提供するために開かれた直後に、データベースのファイルハンドル上のSQLiteによって呼び出すことができます。引数のタイプは（void **）-2つの（void *）値の配列です。最初の（void *）は、実際には（int（*）（void *））型の関数を指します。 connections busy-handlerを呼び出すには、この関数は、配列の2番目（void *）を唯一の引数として呼び出す必要があります。ゼロ以外の値が返された場合、操作を再試行する必要があります。ゼロを返す場合、カスタムVFSは現在の操作を中止する必要があります。</target>
        </trans-unit>
        <trans-unit id="e16ec9bd7cc655e1fcca3234a2d80781961dcf25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlchunksize&quot; id=&quot;sqlitefcntlchunksize&quot;&gt;SQLITE_FCNTL_CHUNK_SIZE&lt;/a&gt; opcode is used to request that the VFS extends and truncates the database file in chunks of a size specified by the user. The fourth argument to &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; should point to an integer (type int) containing the new chunk-size to use for the nominated database. Allocating database file space in large chunks (say 1MB at a time), may reduce file-system fragmentation and improve performance on some systems.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlchunksize&quot; id=&quot;sqlitefcntlchunksize&quot;&gt;SQLITE_FCNTL_CHUNK_SIZEの&lt;/a&gt;オペコードは、VFSが延びており、ユーザによって指定されたサイズのチャンクのデータベースファイルを切り捨てることを要求するために使用されます。&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;の4番目の引数は、指定されたデータベースに使用する新しいチャンクサイズを含む整数（int型）を指す必要があります。データベースファイルスペースを大きなチャンク（一度に1 MBなど）に割り当てると、ファイルシステムの断片化が減少し、一部のシステムのパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="196a41f980c38337225c4ba413e0b1dc0b2b471a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot; id=&quot;sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt; opcode causes all write operations since the previous successful call to &lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; to be performed atomically. This file control returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; if and only if the writes were all performed successfully and have been committed to persistent storage. Regardless of whether or not it is successful, this file control takes the file descriptor out of batch write mode so that all subsequent write operations are independent. SQLite will never invoke SQLITE_FCNTL_COMMIT_ATOMIC_WRITE without a prior successful call to &lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot; id=&quot;sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITEの&lt;/a&gt;オペコードは、前の呼び出しが成功するため、すべての書き込み操作が発生し&lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;アトミックに実行されます。このファイルコントロールは、書き込みがすべて正常に実行され、永続ストレージにコミットされている場合にのみ、&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OKを&lt;/a&gt;返します。成功したかどうかに関係なく、このファイルコントロールはファイル記述子をバッチ書き込みモードから解除するため、後続のすべての書き込み操作は独立しています。 SQLiteは、&lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITEの&lt;/a&gt;呼び出しが成功していない限り、SQLITE_FCNTL_COMMIT_ATOMIC_WRITEを呼び出すことはありません。</target>
        </trans-unit>
        <trans-unit id="ed7c39458516ed31456486d668f266799517f0b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlcommitphasetwo&quot; id=&quot;sqlitefcntlcommitphasetwo&quot;&gt;SQLITE_FCNTL_COMMIT_PHASETWO&lt;/a&gt; opcode is generated internally by SQLite and sent to the VFS after a transaction has been committed immediately but before the database is unlocked. VFSes that do not need this signal should silently ignore this opcode. Applications should not call &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; with this opcode as doing so may disrupt the operation of the specialized VFSes that do require it.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlcommitphasetwo&quot; id=&quot;sqlitefcntlcommitphasetwo&quot;&gt;SQLITE_FCNTL_COMMIT_PHASETWOの&lt;/a&gt;オペコードは、SQLiteのが内部で生成され、トランザクションが即座にコミットされた後でも、データベースのロックが解除される前に、VFSに送信されます。この信号を必要としないVFSは、このオペコードを黙って無視する必要があります。アプリケーションは、このオペコードで&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;を呼び出さないでください。呼び出すと、それを必要とする特殊なVFSの操作が中断される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a6067fb898268faa568cf0d8b727509a1e63a822" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntldataversion&quot; id=&quot;sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt; opcode is used to detect changes to a database file. The argument is a pointer to a 32-bit unsigned integer. The &quot;data version&quot; for the pager is written into the pointer. The &quot;data version&quot; changes whenever any change occurs to the corresponding database file, either through SQL statements on the same database connection or through transactions committed by separate database connections possibly in other processes. The &lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; interface can be used to find if any database on the connection has changed, but that interface responds to changes on TEMP as well as MAIN and does not provide a mechanism to detect changes to MAIN only. Also, the &lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; interface responds to internal changes only and omits changes made by other database connections. The &lt;a href=&quot;pragma#pragma_data_version&quot;&gt;PRAGMA data_version&lt;/a&gt; command provide a mechanism to detect changes to a single attached database that occur due to other database connections, but omits changes implemented by the database connection on which it is called. This file control is the only mechanism to detect changes that happen either internally or externally and that are associated with a particular attached database.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntldataversion&quot; id=&quot;sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSIONの&lt;/a&gt;オペコードは、データベースファイルへの変更を検出するために使用されます。引数は、32ビットの符号なし整数へのポインターです。ページャの「データバージョン」がポインタに書き込まれます。 「データバージョン」は、対応するデータベースファイルに変更が発生するたびに、同じデータベース接続のSQLステートメントまたは別のデータベース接続によってコミットされたトランザクション（おそらく他のプロセス）によって変更されます。&lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes（）&lt;/a&gt;インターフェースは、接続上の任意のデータベースが変更された場合に検索するために使用することができるが、そのインターフェースTEMPに変化ならびにMAINに応答してのみMAINへの変更を検出するためのメカニズムを提供しません。また、&lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes（）&lt;/a&gt;インターフェイスは内部の変更にのみ応答し、他のデータベース接続によって行われた変更を省略します。&lt;a href=&quot;pragma#pragma_data_version&quot;&gt;プラグマdata_versionの&lt;/a&gt;コマンドは、他のデータベース接続のために起こる単一取り付けデータベースへの変更を検出するためのメカニズムを提供するが、省いは、それが呼び出されたデータベース接続によって実現変化します。このファイルコントロールは、内部または外部で発生し、特定の接続データベースに関連付けられている変更を検出する唯一のメカニズムです。</target>
        </trans-unit>
        <trans-unit id="c45a2fa29af05eafc8a58031e6a08762e72b9ebb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlfilepointer&quot; id=&quot;sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt; opcode is used to obtain a pointer to the &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; object associated with a particular database connection. See also &lt;a href=&quot;#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlfilepointer&quot; id=&quot;sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTERの&lt;/a&gt;オペコードへのポインタ取得するために使用される&lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt;特定のデータベース接続に関連付けられたオブジェクトを。&lt;a href=&quot;#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="32fc3ec6f9212eb93de60bbea8de22f4f5c0720b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlhasmoved&quot; id=&quot;sqlitefcntlhasmoved&quot;&gt;SQLITE_FCNTL_HAS_MOVED&lt;/a&gt; file control interprets its argument as a pointer to an integer and it writes a boolean into that integer depending on whether or not the file has been renamed, moved, or deleted since it was first opened.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlhasmoved&quot; id=&quot;sqlitefcntlhasmoved&quot;&gt;SQLITE_FCNTL_HAS_MOVED&lt;/a&gt;ファイル制御は、整数へのポインタとして引数を解釈し、それがファイルは、名前が変更移動、またはそれが最初に開かれてから削除されたか否かに応じて、その整数にブール値を書き込みます。</target>
        </trans-unit>
        <trans-unit id="961fafabf95f8005cd6aacb0ba427c7a66f5ca95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntljournalpointer&quot; id=&quot;sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt; opcode is used to obtain a pointer to the &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; object associated with the journal file (either the &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; or the &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt;) for a particular database connection. See also &lt;a href=&quot;#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntljournalpointer&quot; id=&quot;sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTERの&lt;/a&gt;オペコードへのポインタ取得するために使用される&lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt;ジャーナルファイル（のいずれかに関連付けられているオブジェクト&lt;a href=&quot;lockingv3#rollback&quot;&gt;ロールバックジャーナル&lt;/a&gt;または&lt;a href=&quot;wal&quot;&gt;先行書き込みログ&lt;/a&gt;特定のデータベース接続のために）。&lt;a href=&quot;#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3359a645510d53c409e1e871158229645d3789b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntllockstate&quot; id=&quot;sqlitefcntllockstate&quot;&gt;SQLITE_FCNTL_LOCKSTATE&lt;/a&gt; opcode is used for debugging. This opcode causes the xFileControl method to write the current state of the lock (one of &lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_NONE&lt;/a&gt;, &lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_SHARED&lt;/a&gt;, &lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_RESERVED&lt;/a&gt;, &lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_PENDING&lt;/a&gt;, or &lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_EXCLUSIVE&lt;/a&gt;) into an integer that the pArg argument points to. This capability is used during testing and is only available when the SQLITE_TEST compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntllockstate&quot; id=&quot;sqlitefcntllockstate&quot;&gt;SQLITE_FCNTL_LOCKSTATEの&lt;/a&gt;オペコードは、デバッグに使用されます。このオペコードにより、xFileControlメソッドはロックの現在の状態（&lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_NONE&lt;/a&gt;、&lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_SHARED&lt;/a&gt;、&lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_RESERVED&lt;/a&gt;、&lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_PENDING&lt;/a&gt;、または&lt;a href=&quot;#SQLITE_LOCK_EXCLUSIVE&quot;&gt;SQLITE_LOCK_EXCLUSIVEの&lt;/a&gt;いずれか）をpArg引数が指す整数に書き込みます。この機能はテスト中に使用され、SQLITE_TESTコンパイル時オプションが使用されている場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="413d8e1b0a9fd900669cb69e73b3dca110ff8c2c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntllocktimeout&quot; id=&quot;sqlitefcntllocktimeout&quot;&gt;SQLITE_FCNTL_LOCK_TIMEOUT&lt;/a&gt; opcode causes attempts to obtain a file lock using the xLock or xShmLock methods of the VFS to wait for up to M milliseconds before failing, where M is the single unsigned integer parameter.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntllocktimeout&quot; id=&quot;sqlitefcntllocktimeout&quot;&gt;SQLITE_FCNTL_LOCK_TIMEOUTの&lt;/a&gt;オペコードは、Mは、単一の符号なし整数パラメータである、障害の前にMミリ秒まで待つするVFSのXLOCK又はxShmLock方法を使用してファイルのロックを取得しようとする試みを引き起こします。</target>
        </trans-unit>
        <trans-unit id="98a69e4da16c0af72de938b51b675221a8706b54" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlmmapsize&quot; id=&quot;sqlitefcntlmmapsize&quot;&gt;SQLITE_FCNTL_MMAP_SIZE&lt;/a&gt; file control is used to query or set the maximum number of bytes that will be used for memory-mapped I/O. The argument is a pointer to a value of type sqlite3_int64 that is an advisory maximum number of bytes in the file to memory map. The pointer is overwritten with the old value. The limit is not changed if the value originally pointed to is negative, and so the current limit can be queried by passing in a pointer to a negative number. This file-control is used internally to implement &lt;a href=&quot;pragma#pragma_mmap_size&quot;&gt;PRAGMA mmap_size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlmmapsize&quot; id=&quot;sqlitefcntlmmapsize&quot;&gt;SQLITE_FCNTL_MMAP_SIZEの&lt;/a&gt;ファイル制御は、クエリに使用されるか、またはメモリマップドI / Oのために使用されるバイトの最大数を設定されています。引数は、ファイルからメモリマップへの推奨最大バイト数であるsqlite3_int64型の値へのポインターです。ポインタは古い値で上書きされます。最初にポイントされた値が負の場合、制限は変更されないため、負の数へのポインターを渡すことにより、現在の制限を照会できます。このファイル制御は、&lt;a href=&quot;pragma#pragma_mmap_size&quot;&gt;PRAGMA mmap_size&lt;/a&gt;を実装するために内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="d526543f15c2ce77f0461ecf7fe44c9004bea17a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntloverwrite&quot; id=&quot;sqlitefcntloverwrite&quot;&gt;SQLITE_FCNTL_OVERWRITE&lt;/a&gt; opcode is invoked by SQLite after opening a write transaction to indicate that, unless it is rolled back for some reason, the entire database file will be overwritten by the current transaction. This is used by VACUUM operations.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntloverwrite&quot; id=&quot;sqlitefcntloverwrite&quot;&gt;SQLITE_FCNTL_OVERWRITEの&lt;/a&gt;オペコードは、それが何らかの理由でロールバックされていない限り、それを示すために、書き込みトランザクションを開いた後のSQLiteによって呼び出され、データベース全体のファイルは、現在のトランザクションによって上書きされます。これは、VACUUM操作で使用されます。</target>
        </trans-unit>
        <trans-unit id="5ebd2a70a799339bb0872257764cf8c08eda9ecd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlpersistwal&quot; id=&quot;sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt; opcode is used to set or query the persistent &lt;a href=&quot;wal&quot;&gt;Write Ahead Log&lt;/a&gt; setting. By default, the auxiliary write ahead log (&lt;a href=&quot;wal#walfile&quot;&gt;WAL file&lt;/a&gt;) and shared memory files used for transaction control are automatically deleted when the latest connection to the database closes. Setting persistent WAL mode causes those files to persist after close. Persisting the files is useful when other processes that do not have write permission on the directory containing the database file want to read the database file, as the WAL and shared memory files must exist in order for the database to be readable. The fourth parameter to &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; for this opcode should be a pointer to an integer. That integer is 0 to disable persistent WAL mode or 1 to enable persistent WAL mode. If the integer is -1, then it is overwritten with the current WAL persistence setting.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlpersistwal&quot; id=&quot;sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;オペコードは、セットまたはクエリ永続的に使用されている&lt;a href=&quot;wal&quot;&gt;先読み書き込みログの&lt;/a&gt;設定。デフォルトでは、データベースへの最新の接続が閉じると、トランザクション制御に使用される補助先読みログ（&lt;a href=&quot;wal#walfile&quot;&gt;WALファイル&lt;/a&gt;）と共有メモリファイルが自動的に削除されます。永続的なWALモードを設定すると、これらのファイルは閉じた後も永続します。データベースを読み取り可能にするにはWALファイルと共有メモリファイルが存在している必要があるため、データベースファイルを含むディレクトリに対する書き込み権限のない他のプロセスがデータベースファイルを読みたい場合、ファイルの永続化が役立ちます。&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;の4番目のパラメーターこのオペコードは整数へのポインタでなければなりません。その整数は、永続的なWALモードを無効にする場合は0、永続的なWALモードを有効にする場合は1です。整数が-1の場合、現在のWAL永続性設定で上書きされます。</target>
        </trans-unit>
        <trans-unit id="fdccf2fe8da7ee0d8c5941a2ea211306829a9588" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlpowersafeoverwrite&quot; id=&quot;sqlitefcntlpowersafeoverwrite&quot;&gt;SQLITE_FCNTL_POWERSAFE_OVERWRITE&lt;/a&gt; opcode is used to set or query the persistent &quot;powersafe-overwrite&quot; or &quot;PSOW&quot; setting. The PSOW setting determines the &lt;a href=&quot;#SQLITE_IOCAP_ATOMIC&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITE&lt;/a&gt; bit of the xDeviceCharacteristics methods. The fourth parameter to &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; for this opcode should be a pointer to an integer. That integer is 0 to disable zero-damage mode or 1 to enable zero-damage mode. If the integer is -1, then it is overwritten with the current zero-damage mode setting.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlpowersafeoverwrite&quot; id=&quot;sqlitefcntlpowersafeoverwrite&quot;&gt;SQLITE_FCNTL_POWERSAFE_OVERWRITEの&lt;/a&gt;オペコードは、セットまたはクエリ永続的な「powersafe-上書き」または「PSOW」の設定に使用されています。PSOW設定は、xDeviceCharacteristicsメソッドの&lt;a href=&quot;#SQLITE_IOCAP_ATOMIC&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITE&lt;/a&gt;ビットを決定します。このオペコードの&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;への4番目のパラメーターは、整数へのポインターでなければなりません。その整数は、ゼロダメージモードを無効にする場合は0、ゼロダメージモードを有効にする場合は1です。整数が-1の場合、現在のゼロダメージモード設定で上書きされます。</target>
        </trans-unit>
        <trans-unit id="7f192c2e63c8633453fa1eae93e0c07df64cf07f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlrbu&quot; id=&quot;sqlitefcntlrbu&quot;&gt;SQLITE_FCNTL_RBU&lt;/a&gt; opcode is implemented by the special VFS used by the RBU extension only. All other VFS should return SQLITE_NOTFOUND for this opcode.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlrbu&quot; id=&quot;sqlitefcntlrbu&quot;&gt;SQLITE_FCNTL_RBUの&lt;/a&gt;オペコードだけRBUの拡張子が使用する特殊なVFSによって実装されます。他のすべてのVFSは、このオペコードに対してSQLITE_NOTFOUNDを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="dbf9a50cfd48cde386829709800477dc50bcc565" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlrollbackatomicwrite&quot; id=&quot;sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE&lt;/a&gt; opcode causes all write operations since the previous successful call to &lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; to be rolled back. This file control takes the file descriptor out of batch write mode so that all subsequent write operations are independent. SQLite will never invoke SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE without a prior successful call to &lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlrollbackatomicwrite&quot; id=&quot;sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITEの&lt;/a&gt;オペコードは、前の呼び出しが成功するため、すべての書き込み操作が発生し&lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;ロールバックします。このファイル制御は、ファイル記述子をバッチ書き込みモードから外し、後続のすべての書き込み操作が独立するようにします。SQLiteは、&lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITEの&lt;/a&gt;呼び出しが成功していない限り、SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITEを呼び出すことはありません。</target>
        </trans-unit>
        <trans-unit id="a3dd434f5b5d6086654ad44e0af5b3fa3e940b9d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlsizehint&quot; id=&quot;sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINT&lt;/a&gt; opcode is used by SQLite to give the VFS layer a hint of how large the database file will grow to be during the current transaction. This hint is not guaranteed to be accurate but it is often close. The underlying VFS might choose to preallocate database file space based on this hint in order to help writes to the database file run faster.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlsizehint&quot; id=&quot;sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINTの&lt;/a&gt;オペコードは、VFS層にデータベースファイルが現在のトランザクション中に成長する方法を大のヒントを与えるためにSQLiteのに使用されます。このヒントは正確であることが保証されていませんが、近いことがよくあります。基礎となるVFSは、データベースファイルへの書き込みをより高速に実行するために、このヒントに基づいてデータベースファイル領域を事前に割り当てることを選択する場合があります。</target>
        </trans-unit>
        <trans-unit id="97cd9ce5f443d3219025ca93221b345486932d73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlsizelimit&quot; id=&quot;sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT&lt;/a&gt; opcode is used by in-memory VFS that implements &lt;a href=&quot;#sqlite3_deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt; to set an upper bound on the size of the in-memory database. The argument is a pointer to a &lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64&lt;/a&gt;. If the integer pointed to is negative, then it is filled in with the current limit. Otherwise the limit is set to the larger of the value of the integer pointed to and the current database size. The integer pointed to is set to the new limit.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlsizelimit&quot; id=&quot;sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMITの&lt;/a&gt;オペコードは、実装は、そのメモリ内VFSで使用されている&lt;a href=&quot;#sqlite3_deserialize&quot;&gt;）（sqlite3_deserialize&lt;/a&gt;アッパーインメモリデータベースのサイズに結合さを設定します。引数は&lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64&lt;/a&gt;へのポインターです。指し示す整数が負の場合、現在の制限値が入ります。それ以外の場合、制限は、ポイントされた整数の値と現在のデータベースサイズの大きい方に設定されます。指す整数は新しい制限に設定されます。</target>
        </trans-unit>
        <trans-unit id="3a6ee4f80c9cf2b24ebb8343bd1162955c7d2500" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlsync&quot; id=&quot;sqlitefcntlsync&quot;&gt;SQLITE_FCNTL_SYNC&lt;/a&gt; opcode is generated internally by SQLite and sent to the VFS immediately before the xSync method is invoked on a database file descriptor. Or, if the xSync method is not invoked because the user has configured SQLite with &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous=OFF&lt;/a&gt; it is invoked in place of the xSync method. In most cases, the pointer argument passed with this file-control is NULL. However, if the database file is being synced as part of a multi-database commit, the argument points to a nul-terminated string containing the transactions master-journal file name. VFSes that do not need this signal should silently ignore this opcode. Applications should not call &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; with this opcode as doing so may disrupt the operation of the specialized VFSes that do require it.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlsync&quot; id=&quot;sqlitefcntlsync&quot;&gt;SQLITE_FCNTL_SYNCの&lt;/a&gt;オペコードは、SQLiteのが内部で生成され、XSYNC方法は、データベースのファイル記述子に呼び出される直前VFSに送信されます。または、ユーザーがSQLiteを&lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA同期= OFF&lt;/a&gt;で構成したためにxSyncメソッドが呼び出されない場合は、xSyncメソッドの代わりに呼び出されます。ほとんどの場合、このファイルコントロールで渡されるポインタ引数はNULLです。ただし、データベースファイルがマルチデータベースコミットの一部として同期されている場合、引数は、トランザクションのマスタージャーナルファイル名を含むNULで終了する文字列を指します。この信号を必要としないVFSは、このオペコードを黙って無視する必要があります。アプリケーションは&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）を&lt;/a&gt;呼び出すべきではありません このオペコードを使用すると、それを必要とする特殊なVFSの操作が中断される可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="105a39338a53cf76076319343b91a58b713c591f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntltrace&quot; id=&quot;sqlitefcntltrace&quot;&gt;SQLITE_FCNTL_TRACE&lt;/a&gt; file control provides advisory information to the VFS about what the higher layers of the SQLite stack are doing. This file control is used by some VFS activity tracing &lt;a href=&quot;vfs#shim&quot;&gt;shims&lt;/a&gt;. The argument is a zero-terminated string. Higher layers in the SQLite stack may generate instances of this file control if the &lt;a href=&quot;compile#use_fcntl_trace&quot;&gt;SQLITE_USE_FCNTL_TRACE&lt;/a&gt; compile-time option is enabled.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntltrace&quot; id=&quot;sqlitefcntltrace&quot;&gt;SQLITE_FCNTL_TRACEの&lt;/a&gt;ファイル制御は、SQLiteのスタックの上位層がやっていることについて、VFSへの助言情報を提供します。このファイルコントロールは、一部のVFSアクティビティトレース&lt;a href=&quot;vfs#shim&quot;&gt;シムで&lt;/a&gt;使用されます。引数はゼロで終了する文字列です。&lt;a href=&quot;compile#use_fcntl_trace&quot;&gt;SQLite_USE_FCNTL_TRACE&lt;/a&gt;コンパイル時オプションが有効になっている場合、SQLiteスタックの上位層でこのファイルコントロールのインスタンスが生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="10a39c75085aed62eed16a6bd93eb299fac8af13" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlvfsname&quot; id=&quot;sqlitefcntlvfsname&quot;&gt;SQLITE_FCNTL_VFSNAME&lt;/a&gt; opcode can be used to obtain the names of all &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt; in the VFS stack. The names are of all VFS shims and the final bottom-level VFS are written into memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; and the result is stored in the char* variable that the fourth parameter of &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; points to. The caller is responsible for freeing the memory when done. As with all file-control actions, there is no guarantee that this will actually do anything. Callers should initialize the char* variable to a NULL pointer in case this file-control is not implemented. This file-control is intended for diagnostic use only.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlvfsname&quot; id=&quot;sqlitefcntlvfsname&quot;&gt;SQLITE_FCNTL_VFSNAMEの&lt;/a&gt;オペコードは、すべての名前を取得するために使用することができ&lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt; VFSスタック内を。名前はすべてのVFSシムの名前であり、最終的な最下位VFSは&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;から取得したメモリに書き込まれ、結果は&lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control（）の&lt;/a&gt; 4番目のパラメーターが指す char *変数に格納されます。呼び出し元は、完了時にメモリを解放する責任があります。すべてのファイル制御アクションと同様に、これが実際に何かを実行するという保証はありません。このファイルコントロールが実装されていない場合、呼び出し元はchar *変数をNULLポインターに初期化する必要があります。このファイル制御は、診断での使用のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="a0de6e2585567c94a4d2150e4d89a4457d85ed27" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlvfspointer&quot; id=&quot;sqlitefcntlvfspointer&quot;&gt;SQLITE_FCNTL_VFS_POINTER&lt;/a&gt; opcode finds a pointer to the top-level &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt; currently in use. The argument X in sqlite3_file_control(db,SQLITE_FCNTL_VFS_POINTER,X) must be of type &quot;&lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; **&quot;. This opcodes will set *X to a pointer to the top-level VFS. When there are multiple VFS shims in the stack, this opcode finds the upper-most shim only.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlvfspointer&quot; id=&quot;sqlitefcntlvfspointer&quot;&gt;SQLITE_FCNTL_VFS_POINTERの&lt;/a&gt;オペコードは、トップレベルへのポインタ見つけ&lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt;現在使用されています。sqlite3_file_control（db、SQLITE_FCNTL_VFS_POINTER、X）の引数Xは、タイプ &quot; &lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; **&quot; でなければなりません。このオペコードは、* XをトップレベルのVFSへのポインターに設定します。スタックに複数のVFSシムがある場合、このオペコードは最上位のシムのみを検出します。</target>
        </trans-unit>
        <trans-unit id="6fb5c486ab423108118235eb419e942dcdffc3fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlwalblock&quot; id=&quot;sqlitefcntlwalblock&quot;&gt;SQLITE_FCNTL_WAL_BLOCK&lt;/a&gt; is a signal to the VFS layer that it might be advantageous to block on the next WAL lock if the lock is not immediately available. The WAL subsystem issues this signal during rare circumstances in order to fix a problem with priority inversion. Applications should &lt;em&gt;not&lt;/em&gt; use this file-control.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlwalblock&quot; id=&quot;sqlitefcntlwalblock&quot;&gt;SQLITE_FCNTL_WAL_BLOCKは&lt;/a&gt;ロックが利用可能でない場合、次のWALロックをブロックすることが有利であるかもしれないことをVFS層に信号です。WALサブシステムは、優先順位の逆転の問題を修正するために、まれな状況でこの信号を発行します。アプリケーションはこのファイルコントロールを使用し&lt;em&gt;ないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="2324c4dab632501938725b9d6af72b57f5294994" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlwin32avretry&quot; id=&quot;sqlitefcntlwin32avretry&quot;&gt;SQLITE_FCNTL_WIN32_AV_RETRY&lt;/a&gt; opcode is used to configure automatic retry counts and intervals for certain disk I/O operations for the windows &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; in order to provide robustness in the presence of anti-virus programs. By default, the windows VFS will retry file read, file write, and file delete operations up to 10 times, with a delay of 25 milliseconds before the first retry and with the delay increasing by an additional 25 milliseconds with each subsequent retry. This opcode allows these two values (10 retries and 25 milliseconds of delay) to be adjusted. The values are changed for all database connections within the same process. The argument is a pointer to an array of two integers where the first integer is the new retry count and the second integer is the delay. If either integer is negative, then the setting is not changed but instead the prior value of that setting is written into the array entry, allowing the current retry settings to be interrogated. The zDbName parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlwin32avretry&quot; id=&quot;sqlitefcntlwin32avretry&quot;&gt;SQLITE_FCNTL_WIN32_AV_RETRYの&lt;/a&gt;オペコードは、特定のディスクの自動再試行回数と間隔を設定するために使用されているWindows用のI / O操作&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;ウイルス対策プログラムの存在下で堅牢性を提供するため。デフォルトでは、Windows VFSはファイルの読み取り、ファイルの書き込み、およびファイルの削除操作を最大10回再試行します。最初の再試行までに25ミリ秒の遅延があり、その後の再試行ごとに遅延がさらに25ミリ秒増加します。このオペコードにより、これらの2つの値（10回の再試行と25ミリ秒の遅延）を調整できます。同じプロセス内のすべてのデータベース接続の値が変更されます。引数は2つの整数の配列へのポインターです。最初の整数は新しい再試行回数で、2番目の整数は遅延です。いずれかの整数が負の場合、設定は変更されませんが、代わりにその設定の以前の値が配列エントリに書き込まれ、現在の再試行設定を問い合わせることができます。zDbNameパラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="257792bb90d40cbd5be070de917b57c36a5f9cd9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlwin32gethandle&quot; id=&quot;sqlitefcntlwin32gethandle&quot;&gt;SQLITE_FCNTL_WIN32_GET_HANDLE&lt;/a&gt; opcode can be used to obtain the underlying native file handle associated with a file handle. This file control interprets its argument as a pointer to a native file handle and writes the resulting value there.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlwin32gethandle&quot; id=&quot;sqlitefcntlwin32gethandle&quot;&gt;SQLITE_FCNTL_WIN32_GET_HANDLEの&lt;/a&gt;オペコードは、ファイルハンドルに関連付けられている基礎となるネイティブファイルハンドルを取得するために使用することができます。このファイルコントロールは、引数をネイティブファイルハンドルへのポインターとして解釈し、結果の値をそこに書き込みます。</target>
        </trans-unit>
        <trans-unit id="774ea185734630483687c4bdf35dc5a0169545c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlwin32sethandle&quot; id=&quot;sqlitefcntlwin32sethandle&quot;&gt;SQLITE_FCNTL_WIN32_SET_HANDLE&lt;/a&gt; opcode is used for debugging. This opcode causes the xFileControl method to swap the file handle with the one pointed to by the pArg argument. This capability is used during testing and only needs to be supported when SQLITE_TEST is defined.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlwin32sethandle&quot; id=&quot;sqlitefcntlwin32sethandle&quot;&gt;SQLITE_FCNTL_WIN32_SET_HANDLEの&lt;/a&gt;オペコードは、デバッグに使用されます。このオペコードにより、xFileControlメソッドは、ファイルハンドルを、pArg引数によってポイントされたものと交換します。この機能はテスト中に使用され、SQLITE_TESTが定義されている場合にのみサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="6d8e8025bf5df9df0de6e9fce45f3dc3f3a1832f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#sqlitefcntlzipvfs&quot; id=&quot;sqlitefcntlzipvfs&quot;&gt;SQLITE_FCNTL_ZIPVFS&lt;/a&gt; opcode is implemented by zipvfs only. All other VFS should return SQLITE_NOTFOUND for this opcode.</source>
          <target state="translated">&lt;a href=&quot;#sqlitefcntlzipvfs&quot; id=&quot;sqlitefcntlzipvfs&quot;&gt;SQLITE_FCNTL_ZIPVFSの&lt;/a&gt;オペコードだけzipvfsによって実装されます。他のすべてのVFSは、このオペコードに対してSQLITE_NOTFOUNDを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="2a84f41bb71a501decc458aa53d2eb6f639dc064" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt; compile-time option can be used to limit the length of &lt;a href=&quot;../lang_expr#varparam&quot;&gt;bound parameter&lt;/a&gt; expansion in the output of sqlite3_trace().</source>
          <target state="translated">&lt;a href=&quot;../compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt;コンパイル時オプションは、の長さを制限するために使用することができる&lt;a href=&quot;../lang_expr#varparam&quot;&gt;上限パラメータ&lt;/a&gt; sqlite3_traceの出力で膨張を（）。</target>
        </trans-unit>
        <trans-unit id="a6d12472a003010a0b08bc4775382d299187ba70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt; compile-time option limits the size of bound parameter expansions. The &lt;a href=&quot;../compile#omit_trace&quot;&gt;SQLITE_OMIT_TRACE&lt;/a&gt; compile-time option causes sqlite3_expanded_sql() to always return NULL.</source>
          <target state="translated">&lt;a href=&quot;../compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt;コンパイル時のオプションは、バインドされたパラメータ展開のサイズを制限します。&lt;a href=&quot;../compile#omit_trace&quot;&gt;SQLITE_OMIT_TRACE&lt;/a&gt;コンパイル時のオプションは常にNULLを返すために）（sqlite3_expanded_sqlの原因となります。</target>
        </trans-unit>
        <trans-unit id="7fbc9bba97b7220d8d7ecc905032c6bd233e87c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pragma#pragma_data_store_directory&quot;&gt;data_store_directory pragma&lt;/a&gt; may modify this variable and cause it to point to memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;. Furthermore, the &lt;a href=&quot;../pragma#pragma_data_store_directory&quot;&gt;data_store_directory pragma&lt;/a&gt; always assumes that any string that this variable points to is held in memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt; and the pragma may attempt to free that memory using &lt;a href=&quot;free&quot;&gt;sqlite3_free&lt;/a&gt;. Hence, if this variable is modified directly, either it should be made NULL or made to point to memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt; or else the use of the &lt;a href=&quot;../pragma#pragma_data_store_directory&quot;&gt;data_store_directory pragma&lt;/a&gt; should be avoided.</source>
          <target state="translated">&lt;a href=&quot;../pragma#pragma_data_store_directory&quot;&gt;data_store_directoryプラグマは&lt;/a&gt;、この変数を変更してから取得したメモリを指すように、それを引き起こす可能性があり&lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;。さらに、&lt;a href=&quot;../pragma#pragma_data_store_directory&quot;&gt;data_store_directoryプラグマは&lt;/a&gt;常に、この変数が指すすべての文字列が&lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリに保持されていると想定し、プラグマは&lt;a href=&quot;free&quot;&gt;sqlite3_free&lt;/a&gt;を使用してそのメモリを解放しようとする可能性があります。したがって、この変数を直接変更する場合は、NULLにするか、&lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリを指すようにするか、&lt;a href=&quot;../pragma#pragma_data_store_directory&quot;&gt;data_store_directoryプラグマの&lt;/a&gt;使用を避けます。</target>
        </trans-unit>
        <trans-unit id="f9eb53bad0c35cc3dcade82b9f30796bebe98ba9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pragma#pragma_journal_mode&quot;&gt;PRAGMA journal_mode=OFF&lt;/a&gt; statement.</source>
          <target state="translated">&lt;a href=&quot;../pragma#pragma_journal_mode&quot;&gt;プラグマjournal_mode = OFFの&lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="4683a2e9a942c25fe816aae1882f9a79405f5686" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt; may modify this variable and cause it to point to memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;. Furthermore, the &lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt; always assumes that any string that this variable points to is held in memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt; and the pragma may attempt to free that memory using &lt;a href=&quot;free&quot;&gt;sqlite3_free&lt;/a&gt;. Hence, if this variable is modified directly, either it should be made NULL or made to point to memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt; or else the use of the &lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt; should be avoided. Except when requested by the &lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt;, SQLite does not free the memory that sqlite3_temp_directory points to. If the application wants that memory to be freed, it must do so itself, taking care to only do so after all &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; objects have been destroyed.</source>
          <target state="translated">&lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマは&lt;/a&gt;、この変数を変更してから取得したメモリを指すように、それを引き起こす可能性があり&lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;。さらに、&lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマは&lt;/a&gt;常に、この変数が指すすべての文字列が&lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリに保持されていると想定し、プラグマは&lt;a href=&quot;free&quot;&gt;sqlite3_free&lt;/a&gt;を使用してそのメモリを解放しようとする可能性があります。したがって、この変数を直接変更する場合は、NULLにするか、&lt;a href=&quot;free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリを指すようにするか、&lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマの&lt;/a&gt;使用を避けます。&lt;a href=&quot;../pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマ&lt;/a&gt;によって要求された場合を除く、SQLiteはsqlite3_temp_directoryが指すメモリを解放しません。アプリケーションがそのメモリを解放したい場合は、それ自体で解放する必要があります。すべての&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;オブジェクトが破棄された後にのみ解放するように注意してください。</target>
        </trans-unit>
        <trans-unit id="d082fe94995359849591e8be7fa905999e11458e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pragma#pragma_wal_autocheckpoint&quot;&gt;wal_autocheckpoint pragma&lt;/a&gt; can be used to invoke this interface from SQL.</source>
          <target state="translated">&lt;a href=&quot;../pragma#pragma_wal_autocheckpoint&quot;&gt;wal_autocheckpointプラグマは、&lt;/a&gt; SQLからこのインターフェースを呼び出すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2688b20853de688f9667ff56467cd11f77df2163" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pragma#pragma_wal_checkpoint&quot;&gt;PRAGMA wal_checkpoint&lt;/a&gt; command can be used to invoke this interface from SQL.</source>
          <target state="translated">&lt;a href=&quot;../pragma#pragma_wal_checkpoint&quot;&gt;プラグマwal_checkpointの&lt;/a&gt;コマンドは、SQLからこのインターフェースを呼び出すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3d14328a2609f4c2f2e647906b7ed9c9b0a6470e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=ON&lt;/a&gt; statement.</source>
          <target state="translated">&lt;a href=&quot;../pragma#pragma_writable_schema&quot;&gt;プラグマwritable_schemaはON =&lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="3c456ed19efa854514b7975cbb780401189b8da5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../vtab#xbestindex&quot;&gt;xBestIndex&lt;/a&gt; method must fill aConstraintUsage[] with information about what parameters to pass to xFilter. If argvIndex&amp;gt;0 then the right-hand side of the corresponding aConstraint[] is evaluated and becomes the argvIndex-th entry in argv. If aConstraintUsage[].omit is true, then the constraint is assumed to be fully handled by the virtual table and is not checked again by SQLite.</source>
          <target state="translated">&lt;a href=&quot;../vtab#xbestindex&quot;&gt;xBestIndexの&lt;/a&gt;方法はxFilterに渡すどのようなパラメータに関する情報をaConstraintUsage []を入力する必要があります。argvIndex&amp;gt; 0の場合、対応するaConstraint []の右側が評価され、argvのargvIndex番目のエントリになります。aConstraintUsage []。omitがtrueの場合、制約は仮想テーブルによって完全に処理されたと見なされ、SQLiteによって再度チェックされません。</target>
        </trans-unit>
        <trans-unit id="52eaec5cfbc452ed9aad230504ada3c60f5e208b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; and &lt;a href=&quot;../vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; methods of a &lt;a href=&quot;module&quot;&gt;virtual table module&lt;/a&gt; call this interface to declare the format (the names and datatypes of the columns) of the virtual tables they implement.</source>
          <target state="translated">&lt;a href=&quot;../vtab#xcreate&quot;&gt;xCreate&lt;/a&gt;と&lt;a href=&quot;../vtab#xconnect&quot;&gt;のxconnect&lt;/a&gt;の方法&lt;a href=&quot;module&quot;&gt;仮想テーブルは、モジュール&lt;/a&gt;、それらが実装仮想テーブルの形式（列の名前とデータ型）を宣言するために、このインターフェイスを呼び出します。</target>
        </trans-unit>
        <trans-unit id="eabaf2d0ed146df6465d7c01128019f3ef60888d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;atomiccommit&quot;&gt;atomic update capabilities&lt;/a&gt; of SQLite allow small incremental changes to be safely written into the document. This reduces total disk I/O and improves File/Save performance, enhancing the user experience.</source>
          <target state="translated">SQLite の&lt;a href=&quot;atomiccommit&quot;&gt;アトミック更新機能&lt;/a&gt;により、小さな増分変更をドキュメントに安全に書き込むことができます。これにより、ディスクI / Oの合計が減り、ファイル/保存のパフォーマンスが向上し、ユーザーエクスペリエンスが向上します。</target>
        </trans-unit>
        <trans-unit id="08525d9bc082ee31e91cdcebab98cc6662084121" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT&lt;/a&gt; feature in SQLite works differently than it does in MySQL. This often causes confusion for people who initially learned SQL on MySQL and then start using SQLite, and expect the two systems to work identically.</source>
          <target state="translated">SQLite の&lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT&lt;/a&gt;機能は、MySQLとは異なる動作をします。これは、最初にMySQLでSQLを学び、次にSQLiteの使用を開始し、2つのシステムが同じように動作することを期待する人々を混乱させることがよくあります。</target>
        </trans-unit>
        <trans-unit id="bc38744c25dba895f9fced962c1bfedae8b7cde9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object itself is partially threadsafe. Multiple threads may safely make multiple concurrent calls to sqlite3_backup_step(). However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount() APIs are not strictly speaking threadsafe. If they are invoked at the same time as another thread is invoking sqlite3_backup_step() it is possible that they return invalid values.</source>
          <target state="translated">&lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt;オブジェクト自体は、部分的にスレッドセーフです。複数のスレッドがsqlite3_backup_step（）への複数の同時呼び出しを安全に行うことができます。ただし、sqlite3_backup_remaining（）およびsqlite3_backup_pagecount（）APIは厳密にはスレッドセーフではありません。別のスレッドがsqlite3_backup_step（）を呼び出しているときに同時に呼び出された場合、無効な値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="218098ad11bde6e156b4a9f8e57ca75e25354cce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind_zeroblob()&lt;/a&gt; and &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_zeroblob()&lt;/a&gt; interfaces and the built-in &lt;a href=&quot;../lang_corefunc#zeroblob&quot;&gt;zeroblob&lt;/a&gt; SQL function may be used to create a zero-filled blob to read or write using the incremental-blob interface.</source>
          <target state="translated">&lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind_zeroblob（）&lt;/a&gt;と&lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_zeroblob（）&lt;/a&gt;インターフェースと内蔵&lt;a href=&quot;../lang_corefunc#zeroblob&quot;&gt;zeroblobの&lt;/a&gt; SQL関数は、読み取りまたはインクリメンタルブロブインタフェースを使用して書き込むためのゼロ充填BLOBを作成するために使用されてもよいです。</target>
        </trans-unit>
        <trans-unit id="54f66c39b1fdccfb02fbdb0dd7e08e6474fe1802" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm()&lt;/a&gt; interface, which has been deprecated and undocumented for 8 years, is changed into a no-op.</source>
          <target state="translated">&lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm（）&lt;/a&gt;非推奨と8年間の文書化されたインタフェースは、ノーオペレーションに変更されます。</target>
        </trans-unit>
        <trans-unit id="3cbc1814be35648af44f26835e6f82841778c411" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm&lt;/a&gt; routine is used to register a callback on memory allocation events. This routine registers or clears a callback that fires when the amount of memory allocated exceeds iThreshold. Only a single callback can be registered at a time. Each call to &lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm()&lt;/a&gt; overwrites the previous callback. The callback is disabled by setting xCallback to a NULL pointer.</source>
          <target state="translated">&lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarmの&lt;/a&gt;ルーチンは、メモリの割り当てイベントにコールバックを登録するために使用されます。このルーチンは、割り当てられたメモリの量がiThresholdを超えたときに起動するコールバックを登録またはクリアします。一度に登録できるコールバックは1つだけです。&lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm（）を&lt;/a&gt;呼び出すたびに、前のコールバックが上書きされます。xCallbackをNULLポインターに設定すると、コールバックが無効になります。</target>
        </trans-unit>
        <trans-unit id="fc7e34038a904f7366dde6ee090a8282d84ade6e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_thread_cleanup()&lt;/a&gt; interface has become a no-op.</source>
          <target state="translated">&lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_thread_cleanup（）&lt;/a&gt;インターフェースには、OPとなっていません。</target>
        </trans-unit>
        <trans-unit id="ac435cb36a069024ddc4f4287c8ff0d76c80af5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;Online Backup API&lt;/a&gt; was created to address these concerns. The online backup API allows the contents of one database to be copied into another database, overwriting the original contents of the target database. The copy operation may be done incrementally, in which case the source database does not need to be locked for the duration of the copy, only for the brief periods of time when it is actually being read from. This allows other database users to continue uninterrupted while a backup of an online database is made.</source>
          <target state="translated">&lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;オンラインバックアップAPIは、&lt;/a&gt;これらの懸念に対処するために作成されました。オンラインバックアップAPIを使用すると、あるデータベースのコンテンツを別のデータベースにコピーして、ターゲットデータベースの元のコンテンツを上書きできます。コピー操作は段階的に行うことができます。この場合、ソースデータベースは、実際に読み取られている短い期間だけ、コピーの期間中ロックする必要はありません。これにより、オンラインデータベースのバックアップが作成されている間、他のデータベースユーザーは中断することなく続行できます。</target>
        </trans-unit>
        <trans-unit id="563d98f5bc61682f67da5d25a1062884fd2fdf5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/blob_open&quot;&gt;sqlite3_blob_open()&lt;/a&gt; interface does &lt;u&gt;not&lt;/u&gt; work for a union-vtab. BLOB content must be read from the union-vtab using ordinary SQL statements.</source>
          <target state="translated">&lt;a href=&quot;c3ref/blob_open&quot;&gt;sqlite3_blob_open（）&lt;/a&gt;インタフェースがない&lt;u&gt;ではない&lt;/u&gt;組合vtabのために働きます。BLOBコンテンツは、通常のSQLステートメントを使用してunion-vtabから読み取る必要があります。</target>
        </trans-unit>
        <trans-unit id="b9d5c3998902d7d51338a9f7531152bceea38f9d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_READ&lt;/a&gt;&lt;a href=&quot;c3ref/set_authorizer&quot;&gt;authorizer callback&lt;/a&gt; is invoked once with a column name that is an empty string for every table referenced in a query from which no columns are extracted.</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_READの&lt;/a&gt;&lt;a href=&quot;c3ref/set_authorizer&quot;&gt;承認者のコールバックが&lt;/a&gt;何列が抽出されていない、そこからクエリで参照されているすべてのテーブルに空の文字列である列名で一度呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a68ee8ce42ad40a73650dbfe088fcf3e1c842ed0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableqpsg&quot;&gt;SQLITE_DBCONFIG_ENABLE_QPSG&lt;/a&gt; run-time option and the &lt;a href=&quot;compile#enable_qpsg&quot;&gt;SQLITE_ENABLE_QPSG&lt;/a&gt; compile-time option enable the &lt;a href=&quot;queryplanner-ng#qpstab&quot;&gt;query planner stability guarantee&lt;/a&gt;. See also ticket &lt;a href=&quot;https://www.sqlite.org/src/info/892fc34f173e99d8&quot;&gt;892fc34f173e99d8&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableqpsg&quot;&gt;SQLITE_DBCONFIG_ENABLE_QPSG&lt;/a&gt;実行時オプションと&lt;a href=&quot;compile#enable_qpsg&quot;&gt;SQLITE_ENABLE_QPSG&lt;/a&gt;コンパイル時のオプションが有効&lt;a href=&quot;queryplanner-ng#qpstab&quot;&gt;問い合わせプランナの安定性を保証します&lt;/a&gt;。チケット&lt;a href=&quot;https://www.sqlite.org/src/info/892fc34f173e99d8&quot;&gt;892fc34f173e99d8&lt;/a&gt;も参照</target>
        </trans-unit>
        <trans-unit id="ba2430856bd9775a861cef9dfde7c36d65a2cc4c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_ATOMIC&lt;/a&gt; bit means that all writes to this device are atomic in the sense that either the entire write occurs or none of it occurs. The other &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_ATOMIC&lt;i&gt;nnn&lt;/i&gt;&lt;/a&gt; values indicate that writes of aligned blocks of the indicated size are atomic. &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_SAFE_APPEND&lt;/a&gt; means that when extending a file with new data, the new data is written first and then the file size is updated. So if a power failure occurs, there is no chance that the file might have been extended with randomness. The &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_SEQUENTIAL&lt;/a&gt; bit means that all writes occur in the order that they are issued and are not reordered by the underlying file system.</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_ATOMIC&lt;/a&gt;ビット手段は、このデバイスへのすべての書き込みは、いずれかの全体の書き込みが発生した意味でアトミックであるとか、それのどれも発生しません。他の&lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_ATOMIC &lt;i&gt;nnn&lt;/i&gt;&lt;/a&gt;値は、示されたサイズの整列されたブロックの書き込みがアトミックであることを示します。&lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_SAFE_APPEND&lt;/a&gt;は、新しいデータでファイルを拡張するときに、新しいデータが最初に書き込まれ、次にファイルサイズが更新されることを意味します。したがって、停電が発生した場合、ファイルがランダムに拡張された可能性はありません。&lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_SEQUENTIAL&lt;/a&gt;ビット手段すべての書き込みは、彼らが発行され、基本的なファイルシステムによって並べ替えされていないことを順に発生していること。</target>
        </trans-unit>
        <trans-unit id="9a653d67bd1da50ffe32f058a08a81d4f6edcd9e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt; flag means the file should be deleted when it is closed. This will always be set for TEMP databases and journals and for subjournals. The &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_EXCLUSIVE&lt;/a&gt; flag means the file should be opened for exclusive access. This flag is set for all files except for the main database file. The &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; structure passed as the third argument to xOpen is allocated by the caller. xOpen just fills it in. The caller allocates a minimum of szOsFile bytes for the &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; structure.</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSEの&lt;/a&gt;フラグは、それが閉じているときに、ファイルが削除されるべきであることを意味します。これは、TEMPデータベースとジャーナル、およびサブジャーナルに対して常に設定されます。&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_EXCLUSIVE&lt;/a&gt;フラグは、ファイルが排他的アクセス用に開かれるべきであることを意味します。このフラグは、メインデータベースファイルを除くすべてのファイルに設定されます。&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_fileの&lt;/a&gt; XOPENの3番目の引数として渡される構造は、呼び出し元によって割り当てられます。 xOpenは、それを埋めるだけです。呼び出し側は、最小szOsFileバイトを&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt;構造体に割り当てます。</target>
        </trans-unit>
        <trans-unit id="229110ee7251c5cf9b125b0ef0813a6c6ba215fe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt; and &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_FULLMUTEX&lt;/a&gt; flags to &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; can also be used to adjust the &lt;a href=&quot;threadsafe&quot;&gt;threading mode&lt;/a&gt; of individual &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; at run-time.</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt;と&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_FULLMUTEX用&lt;/a&gt;にフラグ&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2は（）&lt;/a&gt;も調整するために使用することができる&lt;a href=&quot;threadsafe&quot;&gt;スレッドモード&lt;/a&gt;個々の&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続を&lt;/a&gt;実行時に。</target>
        </trans-unit>
        <trans-unit id="966cc2ea77fca46efeb8c4289b4a653605ed43e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt; option was added to &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEXの&lt;/a&gt;オプションが追加された&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2（） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="abc999536061a5d7a156494c35b1ed191a9effbf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column_type()&lt;/a&gt; function returns the datatype for the value in the Nth column. The return value is one of these:</source>
          <target state="translated">&lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column_type（）&lt;/a&gt;関数は、N番目の列の値のデータ型を返します。戻り値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="cffa274dabb801c01eb4f4986ad5f8726b7dca26" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/column_count&quot;&gt;sqlite3_column_count()&lt;/a&gt; function returns the number of columns in the results set. sqlite3_column_count() can be called at any time after &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt;. &lt;a href=&quot;c3ref/data_count&quot;&gt;sqlite3_data_count()&lt;/a&gt; works similarly to &lt;a href=&quot;c3ref/column_count&quot;&gt;sqlite3_column_count()&lt;/a&gt; except that it only works following &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;. If the previous call to &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; returned SQLITE_DONE or an error code, then &lt;a href=&quot;c3ref/data_count&quot;&gt;sqlite3_data_count()&lt;/a&gt; will return 0 whereas &lt;a href=&quot;c3ref/column_count&quot;&gt;sqlite3_column_count()&lt;/a&gt; will continue to return the number of columns in the result set.</source>
          <target state="translated">&lt;a href=&quot;c3ref/column_count&quot;&gt;sqlite3_column_count（）&lt;/a&gt;関数は、結果セット内の列の数を返します。 sqlite3_column_count（）は、&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）の&lt;/a&gt;後でいつでも呼び出すことができます。&lt;a href=&quot;c3ref/data_count&quot;&gt;sqlite3_data_countは（）&lt;/a&gt;と同じように動作し&lt;a href=&quot;c3ref/column_count&quot;&gt;sqlite3_column_count（）&lt;/a&gt;それが唯一の次という点を除いて&lt;a href=&quot;c3ref/step&quot;&gt;（）sqlite3_step&lt;/a&gt;。&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;への以前の呼び出しがSQLITE_DONEまたはエラーコードを返した場合、&lt;a href=&quot;c3ref/data_count&quot;&gt;sqlite3_data_count（）&lt;/a&gt;は0を返しますが、&lt;a href=&quot;c3ref/column_count&quot;&gt;sqlite3_column_count（）&lt;/a&gt;は結果セットの列数を返し続けます。</target>
        </trans-unit>
        <trans-unit id="df909dfd5bdc309e3368846cb0f8c21a5731a3d2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface is used to make global, process-wide configuration changes for SQLite. The &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface must be called before any &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; are created. The &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface allows the programmer to do things like:</source>
          <target state="translated">&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config（）&lt;/a&gt;インターフェースは、SQLiteのためのグローバル、プロセス全体の設定変更を行うために使用されます。&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config（）&lt;/a&gt;いずれかの前に、インタフェースが呼び出される必要があり&lt;a href=&quot;c3ref/sqlite3&quot;&gt;、データベースの接続が&lt;/a&gt;作成されます。&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config（）&lt;/a&gt;インターフェースは、プログラマがのようなものを行うことができます：</target>
        </trans-unit>
        <trans-unit id="7eb7ccb56d39b4e4c7e512ab71314c715b6ea1d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt;,1) interfaces was invoked at start-time.</source>
          <target state="translated">&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;（&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt;、1）インターフェースは、開始時に呼び出されました。</target>
        </trans-unit>
        <trans-unit id="00c837fffcba80492d406ed18ba293449ca9513c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/create_collation&quot;&gt;sqlite3_create_collation()&lt;/a&gt; interface is used to create new &lt;a href=&quot;datatype3#collation&quot;&gt;collating sequences&lt;/a&gt; for sorting text. The &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; interface is used to register new &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; implementations. The &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register()&lt;/a&gt; interface creates new &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/create_collation&quot;&gt;sqlite3_create_collat​​ion（）&lt;/a&gt;インタフェースは、新規作成するために使用される&lt;a href=&quot;datatype3#collation&quot;&gt;照合シーケンスを&lt;/a&gt;テキストをソートします。&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module（）&lt;/a&gt;インターフェースが新たに登録するために使用される&lt;a href=&quot;vtab&quot;&gt;仮想テーブル&lt;/a&gt;の実装を。&lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register（）&lt;/a&gt;インタフェースは、新しい作成&lt;a href=&quot;vfs&quot;&gt;VFSesを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4c521e07609cbfdb8d566dab7163fc87d422895" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; family of interfaces now return &lt;a href=&quot;rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt; instead of &lt;a href=&quot;rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt; when passed invalid parameter combinations.</source>
          <target state="translated">&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt;インタフェースの家族は今返す&lt;a href=&quot;rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt;代わりの&lt;a href=&quot;rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt;無効なパラメータの組み合わせを通過しました。</target>
        </trans-unit>
        <trans-unit id="caf6561662b932f66438111d53034fa55d79a49d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; interface can be used to override the like() function and thereby change the operation of the &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; operator. When overriding the like() function, it may be important to override both the two and three argument versions of the like() function. Otherwise, different code may be called to implement the &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; operator depending on whether or not an ESCAPE clause was specified.</source>
          <target state="translated">&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt;インターフェースのような（）関数をオーバーライドすることにより、操作変更するために使用することができる&lt;a href=&quot;lang_expr#like&quot;&gt;のLIKE&lt;/a&gt;演算子を。like（）関数をオーバーライドする場合、like（）関数の2つの引数バージョンと3つの引数バージョンの両方をオーバーライドすることが重要な場合があります。そうでない場合、ESCAPE句が指定されているかどうかに応じて、&lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt;演算子を実装するために別のコードが呼び出されることがあります。</target>
        </trans-unit>
        <trans-unit id="a6b630ee12d42fc4528bfc71d36f585a36895111" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; interface creates new SQL functions - either scalar or aggregate. The new function implementation typically makes use of the following additional interfaces:</source>
          <target state="translated">&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt;スカラーまたは集計のいずれか-インターフェイスは、新しいSQL関数を作成します。新しい関数の実装では、通常、次の追加のインターフェイスを使用します。</target>
        </trans-unit>
        <trans-unit id="99635893a7742a2b0a9430ca501d241e5f7023c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; and &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module_v2()&lt;/a&gt; interfaces return SQLITE_MISUSE on any attempt to overload or replace a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; module. The destructor is always called in this case, in accordance with historical and current documentation.</source>
          <target state="translated">&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module（）&lt;/a&gt;と&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module_v2（）&lt;/a&gt;インターフェースは、過負荷または交換する試みでSQLITE_MISUSEを返す&lt;a href=&quot;vtab&quot;&gt;仮想テーブル&lt;/a&gt;モジュール。この場合、デストラクタは常に、過去および現在のドキュメントに従って呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0e7c498dc9b696b8a3e4e1f8ce0b76687320b809" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; and &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module_v2()&lt;/a&gt; routines associates a module name with an &lt;a href=&quot;c3ref/module&quot;&gt;sqlite3_module&lt;/a&gt; structure and a separate client data that is specific to each module. The only difference between the two create_module methods is that the _v2 method includes an extra parameter that specifies a destructor for client data pointer. The module structure is what defines the behavior of a virtual table. The module structure looks like this:</source>
          <target state="translated">&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module（）&lt;/a&gt;と&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module_v2（）&lt;/a&gt;ルーチン仲間とモジュール名&lt;a href=&quot;c3ref/module&quot;&gt;sqlite3_module&lt;/a&gt;構造と、各モジュールに固有の別のクライアントデータ。2つのcreate_moduleメソッドの唯一の違いは、_v2メソッドには、クライアントデータポインターのデストラクタを指定する追加のパラメーターが含まれていることです。モジュール構造は、仮想テーブルの動作を定義するものです。モジュール構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="ea2068b9a7520d6dd4dead5bbb83fc7b95e63987" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatusdeferredfks&quot;&gt;SQLITE_DBSTATUS_DEFERRED_FKS&lt;/a&gt;,...) C-language interface can be used during a transaction to determine if there are deferred and unresolved foreign key constraints.</source>
          <target state="translated">&lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status&lt;/a&gt;（デシベル、&lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatusdeferredfks&quot;&gt;SQLITE_DBSTATUS_DEFERRED_FKS&lt;/a&gt;、...）C言語インタフェースは繰延べられ、未解決の外部キー制約があるかどうかを決定するためにトランザクション中に使用することができます。</target>
        </trans-unit>
        <trans-unit id="5d823f649e66e357a40f8457ae11a89f890b8312" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt; interface now applies to all threads within a process, not to just the one thread in which it was run.</source>
          <target state="translated">&lt;a href=&quot;c3ref/enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache（）&lt;/a&gt;インタフェースは、今ではない、それが実行されたただ一つのスレッドに、プロセス内のすべてのスレッドに適用されます。</target>
        </trans-unit>
        <trans-unit id="dc8c7487a7241b1b53f75118a25cdfbd803a1bd5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec()&lt;/a&gt; function works much as it did in SQLite version 2. Zero or more SQL statements specified in the second parameter are compiled and executed. Query results are returned to a callback routine.</source>
          <target state="translated">&lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec（）&lt;/a&gt;がゼロ以上のSQL文は2番目のパラメータで指定されたSQLiteバージョン2で行ったように関数があまり機能してコンパイルされて実行されます。クエリ結果はコールバックルーチンに返されます。</target>
        </trans-unit>
        <trans-unit id="060e03cab55fa6e258498e740c2441a904ee6a9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec()&lt;/a&gt; interface is a convenience wrapper that carries out all four of the above steps with a single function call. A callback function passed into &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec()&lt;/a&gt; is used to process each row of the result set. The &lt;a href=&quot;c3ref/free_table&quot;&gt;sqlite3_get_table()&lt;/a&gt; is another convenience wrapper that does all four of the above steps. The &lt;a href=&quot;c3ref/free_table&quot;&gt;sqlite3_get_table()&lt;/a&gt; interface differs from &lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec()&lt;/a&gt; in that it stores the results of queries in heap memory rather than invoking a callback.</source>
          <target state="translated">&lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec（）&lt;/a&gt;インターフェースは、単一の関数呼び出しで、上記の手順のすべての4つを行う便利なラッパーです。&lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec（）に&lt;/a&gt;渡されるコールバック関数は、結果セットの各行を処理するために使用されます。&lt;a href=&quot;c3ref/free_table&quot;&gt;sqlite3_get_table（）は、&lt;/a&gt;上記の手順のすべての4つを行い、他の便利なラッパーです。&lt;a href=&quot;c3ref/free_table&quot;&gt;sqlite3_get_table（）&lt;/a&gt;からインタフェースが異なる&lt;a href=&quot;c3ref/exec&quot;&gt;sqlite3_exec（）&lt;/a&gt;は、ヒープメモリ内のクエリの結果を格納するのではなく、コールバックを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c55eb24f412d567a8152cd959c8adf08902c2ff0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt; interface works on any prepared statement created using &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; or &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt;. It is no longer necessary to use &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt; with &lt;a href=&quot;c3ref/c_prepare_normalize#sqlitepreparenormalize&quot;&gt;SQLITE_PREPARE_NORMALIZE&lt;/a&gt; in order to use &lt;a href=&quot;c3ref/expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/expanded_sql&quot;&gt;sqlite3_normalized_sql（）&lt;/a&gt;任意のプリペアドステートメントのインターフェイス作品が使用して作成した&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;または&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v3を（） &lt;/a&gt;。それは使用することがもはや必要である&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v3（）&lt;/a&gt;で&lt;a href=&quot;c3ref/c_prepare_normalize#sqlitepreparenormalize&quot;&gt;SQLITE_PREPARE_NORMALIZEを&lt;/a&gt;利用するために&lt;a href=&quot;c3ref/expanded_sql&quot;&gt;sqlite3_normalized_sql（） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b367904a5b319d97004324430003a01cf6b1ae72" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; object represents an open file. The xOpen method of &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; constructs an &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; object when the file is opened. The &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; keeps track of the state of the file while it is opened.</source>
          <target state="translated">&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt;オブジェクトは、開いているファイルを表します。XOPEN方法&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfsが&lt;/a&gt;構築&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt;ファイルが開かれたときにオブジェクトを。&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_fileは、&lt;/a&gt;それが開いている間、ファイルの状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="b30882c8710d7d3a10831e6a935d755bd7e25652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_info&lt;/a&gt; structure is used to pass information into and out of the xBestIndex method of the module that implements a virtual table.</source>
          <target state="translated">&lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_infoの&lt;/a&gt;構造はに、モジュール実装する仮想テーブルのxBestIndex方法のうち、情報を渡すために使用されます。</target>
        </trans-unit>
        <trans-unit id="c68c89f6fed7e1292abcc19abd161e51c2b5b49a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; interface can be called to explicitly initialize the SQLite subsystem. The &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; interface is called automatically when invoking certain interfaces so the use of &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; is not required, but it is recommended.</source>
          <target state="translated">&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize（）&lt;/a&gt;インタフェースは、明示的にSQLiteのサブシステムを初期化するために呼び出すことができます。&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize（）&lt;/a&gt;を使用するように、特定のインターフェイスを呼び出す際のインタフェースが自動的に呼び出され&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize（）は&lt;/a&gt;不要であるが、これは推奨されます。</target>
        </trans-unit>
        <trans-unit id="086866a1ce9981846c47e35c1af526651c7809af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; interface causes SQLite to release any system resources (memory allocations, mutexes, open file handles) that might have been allocated by &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown（）&lt;/a&gt;インタフェースは、SQLiteのは、によって割り当てられた可能性のあるすべてのシステムリソース（メモリ割り当て、ミューテックス、開いているファイルハンドル）解放する原因となる&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initializeを（） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="18eeb48351b373543379c24e8aba67998ec2d5d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; interface frees all mutexes under windows.</source>
          <target state="translated">&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown（）&lt;/a&gt;インタフェースは、窓の下にあるすべてのミューテックスを解放します。</target>
        </trans-unit>
        <trans-unit id="f14f29a4830a0488c9f404caad392cc8f7efd81d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt()&lt;/a&gt; routine can be called for a different thread</source>
          <target state="translated">&lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt（）&lt;/a&gt;ルーチンは、別のスレッドのために呼び出すことができます</target>
        </trans-unit>
        <trans-unit id="78920df495dd4dfe901c1e207965f56317d12fca" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object holds the methods used to interact with an open file. Each &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; contains a pointer to an &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object that is appropriate for the file it represents. The &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object contains methods to do things such as read and write from the file, to truncate the file, to flush any changes to persistent storage, to find the size of the file, to lock and unlock the file, and to close file and destroy the &lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;オブジェクトは、開いているファイルと対話するために使用されるメソッドを保持しています。各&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_fileに&lt;/a&gt;は、それが表すファイルに適した&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt;オブジェクトへのポインターが含まれています。&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;オブジェクトは、そのようなファイルからの読み取りや書き込みなど、物事を行うには、ファイルを切り捨てるために、永続ストレージへの変更をフラッシュする、ファイルのサイズを見つけるために、ファイルをロックし、ロックを解除するために、そして近いファイルにメソッドが含まれており、&lt;a href=&quot;c3ref/file&quot;&gt;sqlite3_file&lt;/a&gt;オブジェクトを破棄します。</target>
        </trans-unit>
        <trans-unit id="899386dff25e21c6b737c3d54a2f1045b6441f0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object is a structure that contains pointers to methods for reading, writing, and otherwise dealing with files. This object is defined as follows:</source>
          <target state="translated">&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;オブジェクトは、読み取り、書き込み、およびそれ以外のファイルを扱うためのメソッドへのポインタを含む構造体です。このオブジェクトは次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="1277e9425f23dd50c872910508a38720a4c40a0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_sourceid()&lt;/a&gt; function tries to detect if the source code has been modified from what is checked into version control and if there are modifications, the last four characters of the version hash are shown as &quot;alt1&quot; or &quot;alt2&quot;. The objective is to detect accidental and/or careless edits. A forger can subvert this feature.</source>
          <target state="translated">&lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_sourceid（）&lt;/a&gt;関数は、ソースコードをバージョン管理にチェックインされているものから変更されており、変更がある場合、バージョンのハッシュの最後の4つの文字が「ALT1」または「ALT2」として示されているかどうかを検出しようとします。目的は、偶発的または不注意な編集を検出することです。偽造者はこの機能を破壊することができます。</target>
        </trans-unit>
        <trans-unit id="e51a6d9f987aab5062f7ef525db57b1e02273eb7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension()&lt;/a&gt; interface loads an &lt;a href=&quot;loadext&quot;&gt;extension&lt;/a&gt; into a single database connection. The default behavior is for that extension to be automatically unloaded when the database connection closes. However, if the extension entry point returns SQLITE_OK_LOAD_PERMANENTLY instead of SQLITE_OK, then the extension remains loaded into the process address space after the database connection closes. In other words, the xDlClose methods of the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object is not called for the extension when the database connection closes.</source>
          <target state="translated">&lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension（）&lt;/a&gt;インターフェース負荷&lt;a href=&quot;loadext&quot;&gt;拡張&lt;/a&gt;単一のデータベース接続に。デフォルトの動作では、データベース接続が閉じたときに、その拡張機能が自動的にアンロードされます。ただし、拡張エントリポイントがSQLITE_OKではなくSQLITE_OK_LOAD_PERMANENTLYを返す場合、データベース接続が閉じた後、拡張はプロセスアドレススペースにロードされたままになります。つまり、データベース接続が閉じたときに、&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;オブジェクトのxDlCloseメソッドは拡張機能に対して呼び出されません。</target>
        </trans-unit>
        <trans-unit id="e180768903c106d7d176b62ab434360e88ec87ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; and &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; interfaces are deprecated. The equivalent functionality is now available through &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/memory_highwater&quot;&gt;（sqlite3_memory_used）&lt;/a&gt;及び&lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_highwater（）&lt;/a&gt;インタフェースは廃止されています。同等の機能が&lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status（）&lt;/a&gt;を通じて利用可能になりました。</target>
        </trans-unit>
        <trans-unit id="46ea088bdd6bab93bd39ac4df39be5b9d52d9d73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; and &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; interfaces, the &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64&lt;/a&gt;(&lt;a href=&quot;c3ref/c_status_malloc_count#sqlitestatusmemoryused&quot;&gt;SQLITE_STATUS_MEMORY_USED&lt;/a&gt;) interface, and the &lt;a href=&quot;compile#max_memory&quot;&gt;SQLITE_MAX_MEMORY&lt;/a&gt; compile-time option are all non-functional when memory usage tracking is disabled.</source>
          <target state="translated">&lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;と&lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_highwater（）&lt;/a&gt;インターフェース、&lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64&lt;/a&gt;（&lt;a href=&quot;c3ref/c_status_malloc_count#sqlitestatusmemoryused&quot;&gt;SQLITE_STATUS_MEMORY_USED&lt;/a&gt;）インターフェース、および&lt;a href=&quot;compile#max_memory&quot;&gt;SQLITE_MAX_MEMORY&lt;/a&gt;メモリ使用量の追跡が無効になっている場合、コンパイル時のオプションは、すべての非機能的です。</target>
        </trans-unit>
        <trans-unit id="8f1193a5998521b29a68d3af0690b60d457381cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/module&quot;&gt;sqlite3_module&lt;/a&gt; structure defines a module object used to implement a virtual table. Think of a module as a class from which one can construct multiple virtual tables having similar properties. For example, one might have a module that provides read-only access to comma-separated-value (CSV) files on disk. That one module can then be used to create several virtual tables where each virtual table refers to a different CSV file.</source>
          <target state="translated">&lt;a href=&quot;c3ref/module&quot;&gt;sqlite3_module&lt;/a&gt;構造は、仮想テーブルを実装するために使用されるモジュールオブジェクトを定義します。モジュールを、類似のプロパティを持つ複数の仮想テーブルを構築できるクラスと考えてください。たとえば、ディスク上のコンマ区切り値（CSV）ファイルへの読み取り専用アクセスを提供するモジュールがあるとします。その1つのモジュールを使用して、各仮想テーブルが異なるCSVファイルを参照する複数の仮想テーブルを作成できます。</target>
        </trans-unit>
        <trans-unit id="26e5c834aec9a24795809e8d9018891e41492180" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_enter()&lt;/a&gt; attempts to enter the mutex and blocks if another threads is already there. &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_try()&lt;/a&gt; attempts to enter and returns &lt;a href=&quot;rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; on success or &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; if another thread is already there. &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_leave()&lt;/a&gt; exits a mutex. The mutex is held until the number of exits matches the number of entrances. If &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_leave()&lt;/a&gt; is called on a mutex that the thread is not currently holding, then the behavior is undefined. If any routine is called for a deallocated mutex, then the behavior is undefined.</source>
          <target state="translated">&lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_enter（）は&lt;/a&gt;、別のスレッドが既に存在する場合、ミューテックスとブロックを入力しようとします。&lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_try（）&lt;/a&gt;は、成功すると&lt;a href=&quot;rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;に入り、別のスレッドがすでにそこにある場合は&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;を入力して返します。&lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_leave（）&lt;/a&gt;はミューテックスを終了します。ミューテックスは、出口の数が入口の数と一致するまで保持されます。場合&lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_leave（）は、&lt;/a&gt;スレッドが現在保持されていないことをミューテックスで呼び出され、その後、動作は未定義です。割り当て解除されたミューテックスに対してルーチンが呼び出された場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6f27ad8fcfe5b9da304436aec019b4cf39a32876" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_free()&lt;/a&gt; routine should be used to deallocate a non-static mutex. If a static mutex is passed to this routine then the behavior is undefined.</source>
          <target state="translated">&lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;sqlite3_mutex_free（）&lt;/a&gt;ルーチンは、非静的ミューテックスを解放するために使用します。静的ミューテックスがこのルーチンに渡された場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="bee285158d4476d2f4cfb28e9d58a1b17557c72d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/next_stmt&quot;&gt;sqlite3_next_stmt()&lt;/a&gt; interface allows an application to discover all &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statements&lt;/a&gt; associated with a &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/next_stmt&quot;&gt;sqlite3_next_stmt（）&lt;/a&gt;インターフェースは、すべて発見するアプリケーションでき&lt;a href=&quot;c3ref/stmt&quot;&gt;準備文&lt;/a&gt;に関連付けられた&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab075f99c29f68391431d9855c2d09e8ff55b4eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; and related interfaces act as a compiler for converting SQL text into bytecode. The &lt;a href=&quot;c3ref/stmt&quot;&gt;sqlite3_stmt&lt;/a&gt; object is a container for a single bytecode program using to implement a single SQL statement. The &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; interface passes a bytecode program into the virtual machine, and runs the program until it either completes, or forms a row of result to be returned, or hits a fatal error, or is &lt;a href=&quot;c3ref/interrupt&quot;&gt;interrupted&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;および関連するインターフェースは、バイトコードにSQL文を変換するためのコンパイラとして作用します。&lt;a href=&quot;c3ref/stmt&quot;&gt;sqlite3_stmt&lt;/a&gt;オブジェクトは、単一のSQL文を実行するために使用して、単一のバイトコードプログラムのコンテナです。&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;インターフェースは、仮想マシン内にバイトコード・プログラムを渡し、そのいずれかが完了するまでプログラムを実行し、または返される結果の行を形成し、または致命的なエラーがヒットであるか、または&lt;a href=&quot;c3ref/interrupt&quot;&gt;中断&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f760f8c540dcc654012aa0be1cef03e69842a01e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; interface creates a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; that will automatically recompile itself if the schema changes. The easiest way to deal with &lt;a href=&quot;rescode#schema&quot;&gt;SQLITE_SCHEMA&lt;/a&gt; errors is to always use &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; instead of &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;インタフェースが作成されます&lt;a href=&quot;c3ref/stmt&quot;&gt;プリペアドステートメント&lt;/a&gt;のスキーマが変更された場合、自動的に自分自身を再コンパイルします。対処する最も簡単な方法&lt;a href=&quot;rescode#schema&quot;&gt;SQLITE_SCHEMAの&lt;/a&gt;エラーは常に使用することです&lt;a href=&quot;c3ref/prepare&quot;&gt;（sqlite3_prepare_v2）の&lt;/a&gt;代わりに&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cb166cb387770ce5ad92997ed9078bd0c5b5827" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/profile&quot;&gt;sqlite3_profile()&lt;/a&gt; callback is invoked (by &lt;a href=&quot;c3ref/reset&quot;&gt;sqlite3_reset()&lt;/a&gt; or &lt;a href=&quot;c3ref/finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt;) for statements that did not run to completion.</source>
          <target state="translated">&lt;a href=&quot;c3ref/profile&quot;&gt;sqlite3_profile（）&lt;/a&gt;コールバックが（によって呼び出される&lt;a href=&quot;c3ref/reset&quot;&gt;sqlite3_reset（）&lt;/a&gt;または&lt;a href=&quot;c3ref/finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;完了まで実行されなかった文のため）。</target>
        </trans-unit>
        <trans-unit id="c86c0301bb7f9f1fb47baffd646cd224ccc8e2ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/release_memory&quot;&gt;sqlite3_release_memory()&lt;/a&gt; interface will now attempt to reduce the memory usages across all database connections in all threads, not just connections in the thread where the interface is called.</source>
          <target state="translated">&lt;a href=&quot;c3ref/release_memory&quot;&gt;sqlite3_release_memory（）&lt;/a&gt;インタフェースは現在のインタフェースが呼び出されたスレッドではないだけで接続、すべてのスレッドですべてのデータベース接続間のメモリ使用状況を削減しようとします。</target>
        </trans-unit>
        <trans-unit id="049881541bf38acf3045d3cb673c48aa92e47dd3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/release_memory&quot;&gt;sqlite3_release_memory()&lt;/a&gt;, &lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit()&lt;/a&gt;, and &lt;a href=&quot;c3ref/enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt; interfaces now work cross all threads in the process, not just the single thread in which they are invoked. *** Potentially incompatible change ***</source>
          <target state="translated">&lt;a href=&quot;c3ref/release_memory&quot;&gt;sqlite3_release_memory（） &lt;/a&gt;、&lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit（） &lt;/a&gt;、及び&lt;a href=&quot;c3ref/enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache（）&lt;/a&gt;インターフェースは、現在のプロセスのすべてのスレッドは、それらが起動されているだけではなく、単一のスレッドを横切る動作します。***互換性がない可能性のある変更***</target>
        </trans-unit>
        <trans-unit id="af837a86c1e38824ef1d301d32834ef9f9b670f7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/set_authorizer&quot;&gt;authorizer callback&lt;/a&gt; is invoked regardless of the presence of EXPLAIN or EXPLAIN QUERY PLAN.</source>
          <target state="translated">&lt;a href=&quot;c3ref/set_authorizer&quot;&gt;承認者のコールバックは&lt;/a&gt;関係なく、EXPLAINやEXPLAINクエリ・プランの存在に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af9451c90d2dee9cf3e529bb13a675b0008b0a17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit()&lt;/a&gt; interface now applies to all threads within a process, not to just the one thread in which it was run.</source>
          <target state="translated">&lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit（）&lt;/a&gt;インタフェースは、今ではない、それが実行されたただ一つのスレッドに、プロセス内のすべてのスレッドに適用されます。</target>
        </trans-unit>
        <trans-unit id="527b7feeedc271730252349576ab47baa1d727e4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit()&lt;/a&gt; interface works by registering a memory alarm at the soft heap limit and invoking &lt;a href=&quot;c3ref/release_memory&quot;&gt;sqlite3_release_memory()&lt;/a&gt; in the alarm callback. Application programs should not attempt to use the &lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm()&lt;/a&gt; interface because doing so will interfere with the &lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit()&lt;/a&gt; module. This interface is exposed only so that applications can provide their own alternative implementation when the SQLite core is compiled with &lt;a href=&quot;compile#omitfeatures&quot;&gt;SQLITE_OMIT_MEMORY_ALLOCATION&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit（）&lt;/a&gt;インターフェースは、ソフトヒープ限界でメモリアラームを登録し、呼び出すことによって動作&lt;a href=&quot;c3ref/release_memory&quot;&gt;sqlite3_release_memory（）&lt;/a&gt;アラームコールバックです。アプリケーションプログラムは、&lt;a href=&quot;c3ref/aggregate_count&quot;&gt;sqlite3_memory_alarm（）&lt;/a&gt;インターフェースを使用しないでください。使用すると、&lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit（）&lt;/a&gt;モジュールに干渉します。このインターフェイスは、SQLiteコアが&lt;a href=&quot;compile#omitfeatures&quot;&gt;SQLITE_OMIT_MEMORY_ALLOCATION&lt;/a&gt;でコンパイルされたときにアプリケーションが独自の代替実装を提供できるようにするためにのみ公開されます。</target>
        </trans-unit>
        <trans-unit id="b1ed21e10553df3077d02ccee7e2ab02fc21afc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/soft_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64()&lt;/a&gt; interface can be used to set an upper bound on the total amount of outstanding memory that the general-purpose memory allocator for SQLite will allow to be outstanding at one time. If attempts are made to allocate more memory than specified by the soft heap limit, then SQLite will first attempt to free cache memory before continuing with the allocation request. The soft heap limit mechanism only works if &lt;a href=&quot;malloc#memstatus&quot;&gt;memory statistics&lt;/a&gt; are enabled and it works best if the SQLite library is compiled with the &lt;a href=&quot;compile#enable_memory_management&quot;&gt;SQLITE_ENABLE_MEMORY_MANAGEMENT&lt;/a&gt; compile-time option.</source>
          <target state="translated">&lt;a href=&quot;c3ref/soft_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64（）&lt;/a&gt;インターフェースは、SQLiteのための汎用のメモリアロケータが一度に未処理であることを可能にすること未処理のメモリの合計量の上限を設定するために使用することができます。ソフトヒープ制限で指定されたよりも多くのメモリを割り当てようとすると、SQLiteは割り当てリクエストを続行する前に、まずキャッシュメモリを解放しようとします。ソフトヒープ制限メカニズムは、&lt;a href=&quot;malloc#memstatus&quot;&gt;メモリ統計&lt;/a&gt;が有効な場合にのみ機能し、SQLiteライブラリが&lt;a href=&quot;compile#enable_memory_management&quot;&gt;SQLITE_ENABLE_MEMORY_MANAGEMENT&lt;/a&gt;コンパイル時オプションでコンパイルされている場合に最適に機能します。</target>
        </trans-unit>
        <trans-unit id="1eb6a622a1771cf9ae256233e2fb0c463ea616f9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; and &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; objects are controlled by a small set of C/C++ interface routine listed below.</source>
          <target state="translated">&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;と&lt;a href=&quot;c3ref/stmt&quot;&gt;準備文&lt;/a&gt;オブジェクトは下に記載されているC / C ++インタフェースルーチンの小さなセットによって制御されます。</target>
        </trans-unit>
        <trans-unit id="5466713b299a5e73e4a0863d52f92664bc3844c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; object: sqlite3</source>
          <target state="translated">&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;オブジェクト：sqlite3の</target>
        </trans-unit>
        <trans-unit id="1c3b251682ed613e33db0de124845adce3edbb1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; that is running the VACUUM INTO statement was originally opened using the &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt; INTOステートメントVACUUMを実行している元々使用して開かれた&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_URIの&lt;/a&gt;フラグを。</target>
        </trans-unit>
        <trans-unit id="79e9d37ccb6719391098f5d43ea1dcd316705462" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; object: sqlite3_stmt</source>
          <target state="translated">&lt;a href=&quot;c3ref/stmt&quot;&gt;プリペアドステートメントの&lt;/a&gt;オブジェクト：sqlite3_stmt</target>
        </trans-unit>
        <trans-unit id="cbcb829701917628eb2fd7b1899f66a93be104f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt; C/C++ interface together with the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusfullscanstep&quot;&gt;SQLITE_STMTSTATUS_FULLSCAN_STEP&lt;/a&gt; and &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatussort&quot;&gt;SQLITE_STMTSTATUS_SORT&lt;/a&gt; verbs can be used to detect at run-time when an SQL statement is not making effective use of indices. Many applications may prefer to use the &lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt; interface to detect index misuse rather than the INDEXED BY phrase described here.</source>
          <target state="translated">&lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_statusは（）&lt;/a&gt;と一緒にC / C ++インタフェース&lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusfullscanstep&quot;&gt;SQLITE_STMTSTATUS_FULLSCAN_STEP&lt;/a&gt;と&lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatussort&quot;&gt;SQLITE_STMTSTATUS_SORT&lt;/a&gt;動詞は、SQL文がインデックスを有効に活用していない場合、実行時に検出するために使用することができます。多くのアプリケーションは、ここで説明するINDEXED BY句ではなく、&lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_status（）&lt;/a&gt;インターフェースを使用してインデックスの誤用を検出することを好む場合があります。</target>
        </trans-unit>
        <trans-unit id="d3e46371f36d9155345020a6a81ffaba033339b8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/table_column_metadata&quot;&gt;sqlite3_table_column_metadata()&lt;/a&gt; is enhanced to work correctly on &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables and to check for the existence of a a table if the column name parameter is NULL. The interface is now also included in the build by default, without requiring the &lt;a href=&quot;compile#enable_column_metadata&quot;&gt;SQLITE_ENABLE_COLUMN_METADATA&lt;/a&gt; compile-time option.</source>
          <target state="translated">&lt;a href=&quot;c3ref/table_column_metadata&quot;&gt;sqlite3_table_column_metadataは、（）&lt;/a&gt;で正しく動作するように拡張された&lt;a href=&quot;withoutrowid&quot;&gt;ROWIDのWITHOUT&lt;/a&gt;テーブルやカラム名パラメータがNULLである場合、AAテーブルの存在を確認します。&lt;a href=&quot;compile#enable_column_metadata&quot;&gt;SQLITE_ENABLE_COLUMN_METADATA&lt;/a&gt;コンパイル時オプションを必要とせずに、インターフェイスもデフォルトでビルドに含まれるようになりました。</target>
        </trans-unit>
        <trans-unit id="edc8c97e4cc1a5aa05b289505090d5b34bad9902" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/test_control&quot;&gt;sqlite3_test_control&lt;/a&gt;(&lt;a href=&quot;c3ref/c_testctrl_always&quot;&gt;SQLITE_TESTCTRL_OPTIMIZATIONS&lt;/a&gt;, ...) interface allows selected SQL statement optimizations to be disabled at run-time. SQLite should always generate exactly the same answer with optimizations enabled and with optimizations disabled; the answer simply arrives quicker with the optimizations turned on. So in a production environment, one always leaves the optimizations turned on (the default setting).</source>
          <target state="translated">&lt;a href=&quot;c3ref/test_control&quot;&gt;sqlite3_test_control&lt;/a&gt;（&lt;a href=&quot;c3ref/c_testctrl_always&quot;&gt;SQLITE_TESTCTRL_OPTIMIZATIONS&lt;/a&gt;、...）インターフェース選択したSQL文の最適化は、実行時に無効にできます。SQLiteは、最適化を有効にして最適化を無効にしても、常にまったく同じ答えを生成するはずです。最適化をオンにすると、答えはより早く到達します。したがって、実稼働環境では、常に最適化をオンのままにしておきます（デフォルト設定）。</target>
        </trans-unit>
        <trans-unit id="43fd3a5c9f7460ba2ff5df434fcffaa34616785e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/trace_v2&quot;&gt;sqlite3_trace_v2()&lt;/a&gt; output for nested SQL statements should always begin with a &quot;--&quot; comment marker.</source>
          <target state="translated">ネストされたSQLステートメントの&lt;a href=&quot;c3ref/trace_v2&quot;&gt;sqlite3_trace_v2（）&lt;/a&gt;出力は、常に「-」コメントマーカーで始まる必要があります。</target>
        </trans-unit>
        <trans-unit id="19462b9c93da59d00cf4ac09d7e75c3130b9c27d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt; API, which is only available if the library is compiled with the pre-processor symbol &lt;a href=&quot;compile#enable_unlock_notify&quot;&gt;SQLITE_ENABLE_UNLOCK_NOTIFY&lt;/a&gt; defined, is &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;documented here&lt;/a&gt;. This article is not a substitute for reading the full API documentation!</source>
          <target state="translated">&lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify（）&lt;/a&gt;ライブラリは、プリプロセッサのシンボルでコンパイルされている場合にのみ使用可能ですAPI、&lt;a href=&quot;compile#enable_unlock_notify&quot;&gt;SQLITE_ENABLE_UNLOCK_NOTIFYが&lt;/a&gt;定義されたが、されて&lt;a href=&quot;c3ref/unlock_notify&quot;&gt;ここに文書化&lt;/a&gt;。この記事は、完全なAPIドキュメントを読むことに代わるものではありません。</target>
        </trans-unit>
        <trans-unit id="3e8d6caa4b5453ea5545263fa9616b15bb0d4f1e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt; interface is designed for use in systems that have a separate thread assigned to each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. There is nothing in the implementation that prevents a single thread from running multiple database connections. However, the &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt; interface only works on a single connection at a time, so the lock resolution logic presented here will only work for a single database connection per thread.</source>
          <target state="translated">&lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify（）&lt;/a&gt;インターフェースは、それぞれに割り当てられた別のスレッドているシステムで使用するために設計された&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続を&lt;/a&gt;。実装には、単一のスレッドが複数のデータベース接続を実行することを妨げるものはありません。ただし、&lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify（）&lt;/a&gt;インターフェースは一度に1つの接続でのみ機能するため、ここで説明するロック解決ロジックは、スレッドごとに1つのデータベース接続でのみ機能します。</target>
        </trans-unit>
        <trans-unit id="1d6fc659db0d56afaed258d4fdfa842c7a2494e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/update_hook&quot;&gt;update hook&lt;/a&gt; is not invoked for rows that are deleted by the REPLACE conflict resolution strategy. Nor does REPLACE increment the &lt;a href=&quot;c3ref/changes&quot;&gt;change counter&lt;/a&gt;. The exceptional behaviors defined in this paragraph might change in a future release.</source>
          <target state="translated">&lt;a href=&quot;c3ref/update_hook&quot;&gt;updateフックは、&lt;/a&gt; REPLACE競合解決戦略によって削除された行のために呼び出されません。また、REPLACEは&lt;a href=&quot;c3ref/changes&quot;&gt;変更カウンターを&lt;/a&gt;インクリメントしません。この段落で定義されている例外的な動作は、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="50634212838ce725193912da3e909e9a53b3f585" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_find()&lt;/a&gt; API is used to locate a particular VFS by name. Its prototype is as follows:</source>
          <target state="translated">&lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_find（）&lt;/a&gt; APIは名前で特定のVFSの位置を特定するために使用されます。そのプロトタイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cd79207584e9ef224be15cf9411b2100d6ae0c32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_unregister()&lt;/a&gt; API is used to remove an existing VFS from the system.</source>
          <target state="translated">&lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_unregister（）&lt;/a&gt; APIは、システムから既存のVFSを削除するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ca7466f7f648f5cd0c7b32027691a4626bfd37a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c3ref/vtab_cursor&quot;&gt;sqlite3_vtab_cursor&lt;/a&gt; structure represents a pointer to a specific row of a virtual table. This is what an sqlite3_vtab_cursor looks like:</source>
          <target state="translated">&lt;a href=&quot;c3ref/vtab_cursor&quot;&gt;sqlite3_vtab_cursorの&lt;/a&gt;構造は、仮想テーブルの特定の行へのポインタを表します。これはsqlite3_vtab_cursorのようになります：</target>
        </trans-unit>
        <trans-unit id="405e780a5eda0077cf02e3ce6060be9576266571" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbusyhandler&quot; id=&quot;sqlitefcntlbusyhandler&quot;&gt;SQLITE_FCNTL_BUSYHANDLER&lt;/a&gt; file-control may be invoked by SQLite on the database file handle shortly after it is opened in order to provide a custom VFS with access to the connections busy-handler callback. The argument is of type (void **) - an array of two (void *) values. The first (void *) actually points to a function of type (int (*)(void *)). In order to invoke the connections busy-handler, this function should be invoked with the second (void *) in the array as the only argument. If it returns non-zero, then the operation should be retried. If it returns zero, the custom VFS should abandon the current operation.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbusyhandler&quot; id=&quot;sqlitefcntlbusyhandler&quot;&gt;SQLITE_FCNTL_BUSYHANDLERの&lt;/a&gt;ファイル制御は、それが接続ビジーハンドラのコールバックへのアクセス権を持つカスタムVFSを提供するために開かれた直後に、データベースのファイルハンドル上のSQLiteによって呼び出すことができます。引数のタイプは（void **）-2つの（void *）値の配列です。最初の（void *）は、実際には（int（*）（void *））型の関数を指します。 connections busy-handlerを呼び出すには、この関数は、配列の2番目（void *）を唯一の引数として呼び出す必要があります。ゼロ以外の値が返された場合、操作を再試行する必要があります。ゼロを返す場合、カスタムVFSは現在の操作を中止する必要があります。</target>
        </trans-unit>
        <trans-unit id="c09f9898013c2f2b9084c257d373e6d8fb8e1f1d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlchunksize&quot; id=&quot;sqlitefcntlchunksize&quot;&gt;SQLITE_FCNTL_CHUNK_SIZE&lt;/a&gt; opcode is used to request that the VFS extends and truncates the database file in chunks of a size specified by the user. The fourth argument to &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; should point to an integer (type int) containing the new chunk-size to use for the nominated database. Allocating database file space in large chunks (say 1MB at a time), may reduce file-system fragmentation and improve performance on some systems.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlchunksize&quot; id=&quot;sqlitefcntlchunksize&quot;&gt;SQLITE_FCNTL_CHUNK_SIZEの&lt;/a&gt;オペコードは、VFSが延びており、ユーザによって指定されたサイズのチャンクのデータベースファイルを切り捨てることを要求するために使用されます。&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;の4番目の引数は、指定されたデータベースに使用する新しいチャンクサイズを含む整数（int型）を指す必要があります。データベースファイルスペースを大きなチャンク（一度に1 MBなど）に割り当てると、ファイルシステムの断片化が減少し、一部のシステムのパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="563228c7f58e18a697dff44f98d2797b60b51628" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot; id=&quot;sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt; opcode causes all write operations since the previous successful call to &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; to be performed atomically. This file control returns &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; if and only if the writes were all performed successfully and have been committed to persistent storage. Regardless of whether or not it is successful, this file control takes the file descriptor out of batch write mode so that all subsequent write operations are independent. SQLite will never invoke SQLITE_FCNTL_COMMIT_ATOMIC_WRITE without a prior successful call to &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot; id=&quot;sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITEの&lt;/a&gt;オペコードは、前の呼び出しが成功するため、すべての書き込み操作が発生し&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;アトミックに実行されます。このファイルコントロールは、書き込みがすべて正常に実行され、永続ストレージにコミットされている場合にのみ、&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OKを&lt;/a&gt;返します。成功したかどうかに関係なく、このファイルコントロールはファイル記述子をバッチ書き込みモードから解除するため、後続のすべての書き込み操作は独立しています。 SQLiteは、&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITEの&lt;/a&gt;呼び出しが成功していない限り、SQLITE_FCNTL_COMMIT_ATOMIC_WRITEを呼び出すことはありません。</target>
        </trans-unit>
        <trans-unit id="78b45f1d52cb17aec209a2fdf03a83375e0b951e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitphasetwo&quot; id=&quot;sqlitefcntlcommitphasetwo&quot;&gt;SQLITE_FCNTL_COMMIT_PHASETWO&lt;/a&gt; opcode is generated internally by SQLite and sent to the VFS after a transaction has been committed immediately but before the database is unlocked. VFSes that do not need this signal should silently ignore this opcode. Applications should not call &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; with this opcode as doing so may disrupt the operation of the specialized VFSes that do require it.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitphasetwo&quot; id=&quot;sqlitefcntlcommitphasetwo&quot;&gt;SQLITE_FCNTL_COMMIT_PHASETWOの&lt;/a&gt;オペコードは、SQLiteのが内部で生成され、トランザクションが即座にコミットされた後でも、データベースのロックが解除される前に、VFSに送信されます。この信号を必要としないVFSは、このオペコードを黙って無視する必要があります。アプリケーションは、このオペコードで&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;を呼び出さないでください。呼び出すと、それを必要とする特殊なVFSの操作が中断される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fe01cd54971699e5fe35af1a0adc94faad95fbe1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntldataversion&quot; id=&quot;sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt; opcode is used to detect changes to a database file. The argument is a pointer to a 32-bit unsigned integer. The &quot;data version&quot; for the pager is written into the pointer. The &quot;data version&quot; changes whenever any change occurs to the corresponding database file, either through SQL statements on the same database connection or through transactions committed by separate database connections possibly in other processes. The &lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; interface can be used to find if any database on the connection has changed, but that interface responds to changes on TEMP as well as MAIN and does not provide a mechanism to detect changes to MAIN only. Also, the &lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; interface responds to internal changes only and omits changes made by other database connections. The &lt;a href=&quot;../pragma#pragma_data_version&quot;&gt;PRAGMA data_version&lt;/a&gt; command provide a mechanism to detect changes to a single attached database that occur due to other database connections, but omits changes implemented by the database connection on which it is called. This file control is the only mechanism to detect changes that happen either internally or externally and that are associated with a particular attached database.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntldataversion&quot; id=&quot;sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSIONの&lt;/a&gt;オペコードは、データベースファイルへの変更を検出するために使用されます。引数は、32ビットの符号なし整数へのポインターです。ページャの「データバージョン」がポインタに書き込まれます。 「データバージョン」は、対応するデータベースファイルに変更が発生するたびに、同じデータベース接続のSQLステートメントまたは別のデータベース接続によってコミットされたトランザクション（おそらく他のプロセス）によって変更されます。&lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes（）&lt;/a&gt;インターフェースは、接続上の任意のデータベースが変更された場合に検索するために使用することができるが、そのインターフェースTEMPに変化ならびにMAINに応答してのみMAINへの変更を検出するためのメカニズムを提供しません。また、&lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes（）&lt;/a&gt;インターフェイスは内部の変更にのみ応答し、他のデータベース接続によって行われた変更を省略します。&lt;a href=&quot;../pragma#pragma_data_version&quot;&gt;プラグマdata_versionの&lt;/a&gt;コマンドは、他のデータベース接続のために起こる単一取り付けデータベースへの変更を検出するためのメカニズムを提供するが、省いは、それが呼び出されたデータベース接続によって実現変化します。このファイルコントロールは、内部または外部で発生し、特定の接続データベースに関連付けられている変更を検出する唯一のメカニズムです。</target>
        </trans-unit>
        <trans-unit id="0e0a05c22977d8b1dc9945aac16fc4626f1dd660" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlfilepointer&quot; id=&quot;sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt; opcode is used to obtain a pointer to the &lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt; object associated with a particular database connection. See also &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlfilepointer&quot; id=&quot;sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTERの&lt;/a&gt;オペコードへのポインタ取得するために使用される&lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt;特定のデータベース接続に関連付けられたオブジェクトを。&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ddddd8caea4f2699898b48925bf95b8d69764816" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlhasmoved&quot; id=&quot;sqlitefcntlhasmoved&quot;&gt;SQLITE_FCNTL_HAS_MOVED&lt;/a&gt; file control interprets its argument as a pointer to an integer and it writes a boolean into that integer depending on whether or not the file has been renamed, moved, or deleted since it was first opened.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlhasmoved&quot; id=&quot;sqlitefcntlhasmoved&quot;&gt;SQLITE_FCNTL_HAS_MOVED&lt;/a&gt;ファイル制御は、整数へのポインタとして引数を解釈し、それがファイルは、名前が変更移動、またはそれが最初に開かれてから削除されたか否かに応じて、その整数にブール値を書き込みます。</target>
        </trans-unit>
        <trans-unit id="bc589731780274c54e5cd365284382cd5887eded" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntljournalpointer&quot; id=&quot;sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt; opcode is used to obtain a pointer to the &lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt; object associated with the journal file (either the &lt;a href=&quot;../lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; or the &lt;a href=&quot;../wal&quot;&gt;write-ahead log&lt;/a&gt;) for a particular database connection. See also &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntljournalpointer&quot; id=&quot;sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTERの&lt;/a&gt;オペコードへのポインタ取得するために使用される&lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt;ジャーナルファイル（のいずれかに関連付けられているオブジェクト&lt;a href=&quot;../lockingv3#rollback&quot;&gt;ロールバックジャーナル&lt;/a&gt;または&lt;a href=&quot;../wal&quot;&gt;先行書き込みログ&lt;/a&gt;特定のデータベース接続のために）。&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c5d8ff8dd3d322caf95cdc56c272ff4998cee7a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntllockstate&quot; id=&quot;sqlitefcntllockstate&quot;&gt;SQLITE_FCNTL_LOCKSTATE&lt;/a&gt; opcode is used for debugging. This opcode causes the xFileControl method to write the current state of the lock (one of &lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_NONE&lt;/a&gt;, &lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_SHARED&lt;/a&gt;, &lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_RESERVED&lt;/a&gt;, &lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_PENDING&lt;/a&gt;, or &lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_EXCLUSIVE&lt;/a&gt;) into an integer that the pArg argument points to. This capability is used during testing and is only available when the SQLITE_TEST compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntllockstate&quot; id=&quot;sqlitefcntllockstate&quot;&gt;SQLITE_FCNTL_LOCKSTATEの&lt;/a&gt;オペコードは、デバッグに使用されます。このオペコードにより、xFileControlメソッドはロックの現在の状態（&lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_NONE&lt;/a&gt;、&lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_SHARED&lt;/a&gt;、&lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_RESERVED&lt;/a&gt;、&lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_PENDING&lt;/a&gt;、または&lt;a href=&quot;c_lock_exclusive&quot;&gt;SQLITE_LOCK_EXCLUSIVEの&lt;/a&gt;いずれか）をpArg引数が指す整数に書き込みます。この機能はテスト中に使用され、SQLITE_TESTコンパイル時オプションが使用されている場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="835bd4a6a4daee4b5c892d531fad550f3b7944bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntllocktimeout&quot; id=&quot;sqlitefcntllocktimeout&quot;&gt;SQLITE_FCNTL_LOCK_TIMEOUT&lt;/a&gt; opcode causes attempts to obtain a file lock using the xLock or xShmLock methods of the VFS to wait for up to M milliseconds before failing, where M is the single unsigned integer parameter.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntllocktimeout&quot; id=&quot;sqlitefcntllocktimeout&quot;&gt;SQLITE_FCNTL_LOCK_TIMEOUTの&lt;/a&gt;オペコードは、Mは、単一の符号なし整数パラメータである、障害の前にMミリ秒まで待つするVFSのXLOCK又はxShmLock方法を使用してファイルのロックを取得しようとする試みを引き起こします。</target>
        </trans-unit>
        <trans-unit id="9534ed4df1d95266c96610467198479542d6649c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlmmapsize&quot; id=&quot;sqlitefcntlmmapsize&quot;&gt;SQLITE_FCNTL_MMAP_SIZE&lt;/a&gt; file control is used to query or set the maximum number of bytes that will be used for memory-mapped I/O. The argument is a pointer to a value of type sqlite3_int64 that is an advisory maximum number of bytes in the file to memory map. The pointer is overwritten with the old value. The limit is not changed if the value originally pointed to is negative, and so the current limit can be queried by passing in a pointer to a negative number. This file-control is used internally to implement &lt;a href=&quot;../pragma#pragma_mmap_size&quot;&gt;PRAGMA mmap_size&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlmmapsize&quot; id=&quot;sqlitefcntlmmapsize&quot;&gt;SQLITE_FCNTL_MMAP_SIZEの&lt;/a&gt;ファイル制御は、クエリに使用されるか、またはメモリマップドI / Oのために使用されるバイトの最大数を設定されています。引数は、ファイルからメモリマップへの推奨最大バイト数であるsqlite3_int64型の値へのポインターです。ポインタは古い値で上書きされます。最初にポイントされた値が負の場合、制限は変更されないため、負の数へのポインターを渡すことにより、現在の制限を照会できます。このファイル制御は、&lt;a href=&quot;../pragma#pragma_mmap_size&quot;&gt;PRAGMA mmap_size&lt;/a&gt;を実装するために内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="85959ccb42981e5ee3527aa791391f6482ac784e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntloverwrite&quot; id=&quot;sqlitefcntloverwrite&quot;&gt;SQLITE_FCNTL_OVERWRITE&lt;/a&gt; opcode is invoked by SQLite after opening a write transaction to indicate that, unless it is rolled back for some reason, the entire database file will be overwritten by the current transaction. This is used by VACUUM operations.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntloverwrite&quot; id=&quot;sqlitefcntloverwrite&quot;&gt;SQLITE_FCNTL_OVERWRITEの&lt;/a&gt;オペコードは、それが何らかの理由でロールバックされていない限り、それを示すために、書き込みトランザクションを開いた後のSQLiteによって呼び出され、データベース全体のファイルは、現在のトランザクションによって上書きされます。これは、VACUUM操作で使用されます。</target>
        </trans-unit>
        <trans-unit id="d2750128ef1083c346294ef6e3be361e6eba77af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot; id=&quot;sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt; opcode is used to set or query the persistent &lt;a href=&quot;../wal&quot;&gt;Write Ahead Log&lt;/a&gt; setting. By default, the auxiliary write ahead log (&lt;a href=&quot;../wal#walfile&quot;&gt;WAL file&lt;/a&gt;) and shared memory files used for transaction control are automatically deleted when the latest connection to the database closes. Setting persistent WAL mode causes those files to persist after close. Persisting the files is useful when other processes that do not have write permission on the directory containing the database file want to read the database file, as the WAL and shared memory files must exist in order for the database to be readable. The fourth parameter to &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; for this opcode should be a pointer to an integer. That integer is 0 to disable persistent WAL mode or 1 to enable persistent WAL mode. If the integer is -1, then it is overwritten with the current WAL persistence setting.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot; id=&quot;sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;オペコードは、セットまたはクエリ永続的に使用されている&lt;a href=&quot;../wal&quot;&gt;先読み書き込みログの&lt;/a&gt;設定。デフォルトでは、データベースへの最新の接続が閉じると、トランザクション制御に使用される補助先読みログ（&lt;a href=&quot;../wal#walfile&quot;&gt;WALファイル&lt;/a&gt;）と共有メモリファイルが自動的に削除されます。永続的なWALモードを設定すると、これらのファイルは閉じた後も永続します。データベースを読み取り可能にするにはWALファイルと共有メモリファイルが存在している必要があるため、データベースファイルを含むディレクトリに対する書き込み権限のない他のプロセスがデータベースファイルを読みたい場合、ファイルの永続化が役立ちます。&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;の4番目のパラメーターこのオペコードは整数へのポインタでなければなりません。その整数は、永続的なWALモードを無効にする場合は0、永続的なWALモードを有効にする場合は1です。整数が-1の場合、現在のWAL永続性設定で上書きされます。</target>
        </trans-unit>
        <trans-unit id="e3329771b09c8d9c17e5ba63393baaa851477f87" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpowersafeoverwrite&quot; id=&quot;sqlitefcntlpowersafeoverwrite&quot;&gt;SQLITE_FCNTL_POWERSAFE_OVERWRITE&lt;/a&gt; opcode is used to set or query the persistent &quot;powersafe-overwrite&quot; or &quot;PSOW&quot; setting. The PSOW setting determines the &lt;a href=&quot;c_iocap_atomic&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITE&lt;/a&gt; bit of the xDeviceCharacteristics methods. The fourth parameter to &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; for this opcode should be a pointer to an integer. That integer is 0 to disable zero-damage mode or 1 to enable zero-damage mode. If the integer is -1, then it is overwritten with the current zero-damage mode setting.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpowersafeoverwrite&quot; id=&quot;sqlitefcntlpowersafeoverwrite&quot;&gt;SQLITE_FCNTL_POWERSAFE_OVERWRITEの&lt;/a&gt;オペコードは、セットまたはクエリ永続的な「powersafe-上書き」または「PSOW」の設定に使用されています。PSOW設定は、xDeviceCharacteristicsメソッドの&lt;a href=&quot;c_iocap_atomic&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITE&lt;/a&gt;ビットを決定します。このオペコードの&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;への4番目のパラメーターは、整数へのポインターでなければなりません。その整数は、ゼロダメージモードを無効にする場合は0、ゼロダメージモードを有効にする場合は1です。整数が-1の場合、現在のゼロダメージモード設定で上書きされます。</target>
        </trans-unit>
        <trans-unit id="b7ebc915c79af1c389d3c702e8a0e217f15cd6b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlrbu&quot; id=&quot;sqlitefcntlrbu&quot;&gt;SQLITE_FCNTL_RBU&lt;/a&gt; opcode is implemented by the special VFS used by the RBU extension only. All other VFS should return SQLITE_NOTFOUND for this opcode.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlrbu&quot; id=&quot;sqlitefcntlrbu&quot;&gt;SQLITE_FCNTL_RBUの&lt;/a&gt;オペコードだけRBUの拡張子が使用する特殊なVFSによって実装されます。他のすべてのVFSは、このオペコードに対してSQLITE_NOTFOUNDを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="d7a6279d094b2efb4418d75c6d39f8cf80f5db9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlrollbackatomicwrite&quot; id=&quot;sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE&lt;/a&gt; opcode causes all write operations since the previous successful call to &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; to be rolled back. This file control takes the file descriptor out of batch write mode so that all subsequent write operations are independent. SQLite will never invoke SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE without a prior successful call to &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlrollbackatomicwrite&quot; id=&quot;sqlitefcntlrollbackatomicwrite&quot;&gt;SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITEの&lt;/a&gt;オペコードは、前の呼び出しが成功するため、すべての書き込み操作が発生し&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;ロールバックします。このファイル制御は、ファイル記述子をバッチ書き込みモードから外し、後続のすべての書き込み操作が独立するようにします。SQLiteは、&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITEの&lt;/a&gt;呼び出しが成功していない限り、SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITEを呼び出すことはありません。</target>
        </trans-unit>
        <trans-unit id="37dec85b72b827823523f2dbeaab4ae1365e897b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizehint&quot; id=&quot;sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINT&lt;/a&gt; opcode is used by SQLite to give the VFS layer a hint of how large the database file will grow to be during the current transaction. This hint is not guaranteed to be accurate but it is often close. The underlying VFS might choose to preallocate database file space based on this hint in order to help writes to the database file run faster.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizehint&quot; id=&quot;sqlitefcntlsizehint&quot;&gt;SQLITE_FCNTL_SIZE_HINTの&lt;/a&gt;オペコードは、VFS層にデータベースファイルが現在のトランザクション中に成長する方法を大のヒントを与えるためにSQLiteのに使用されます。このヒントは正確であることが保証されていませんが、近いことがよくあります。基礎となるVFSは、データベースファイルへの書き込みをより高速に実行するために、このヒントに基づいてデータベースファイル領域を事前に割り当てることを選択する場合があります。</target>
        </trans-unit>
        <trans-unit id="53dec04041f2a1cd0f5d61ecfdd7363482736f2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizelimit&quot; id=&quot;sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT&lt;/a&gt; opcode is used by in-memory VFS that implements &lt;a href=&quot;deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt; to set an upper bound on the size of the in-memory database. The argument is a pointer to a &lt;a href=&quot;int64&quot;&gt;sqlite3_int64&lt;/a&gt;. If the integer pointed to is negative, then it is filled in with the current limit. Otherwise the limit is set to the larger of the value of the integer pointed to and the current database size. The integer pointed to is set to the new limit.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizelimit&quot; id=&quot;sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMITの&lt;/a&gt;オペコードは、実装は、そのメモリ内VFSで使用されている&lt;a href=&quot;deserialize&quot;&gt;）（sqlite3_deserialize&lt;/a&gt;アッパーインメモリデータベースのサイズに結合さを設定します。引数は&lt;a href=&quot;int64&quot;&gt;sqlite3_int64&lt;/a&gt;へのポインターです。指し示す整数が負の場合、現在の制限値が入ります。それ以外の場合、制限は、ポイントされた整数の値と現在のデータベースサイズの大きい方に設定されます。指す整数は新しい制限に設定されます。</target>
        </trans-unit>
        <trans-unit id="5eb8033743ca0212b9de7ee6d6d452df418e67e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsync&quot; id=&quot;sqlitefcntlsync&quot;&gt;SQLITE_FCNTL_SYNC&lt;/a&gt; opcode is generated internally by SQLite and sent to the VFS immediately before the xSync method is invoked on a database file descriptor. Or, if the xSync method is not invoked because the user has configured SQLite with &lt;a href=&quot;../pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous=OFF&lt;/a&gt; it is invoked in place of the xSync method. In most cases, the pointer argument passed with this file-control is NULL. However, if the database file is being synced as part of a multi-database commit, the argument points to a nul-terminated string containing the transactions master-journal file name. VFSes that do not need this signal should silently ignore this opcode. Applications should not call &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; with this opcode as doing so may disrupt the operation of the specialized VFSes that do require it.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsync&quot; id=&quot;sqlitefcntlsync&quot;&gt;SQLITE_FCNTL_SYNCの&lt;/a&gt;オペコードは、SQLiteのが内部で生成され、XSYNC方法は、データベースのファイル記述子に呼び出される直前VFSに送信されます。または、ユーザーがSQLiteを&lt;a href=&quot;../pragma#pragma_synchronous&quot;&gt;PRAGMA同期= OFF&lt;/a&gt;で構成したためにxSyncメソッドが呼び出されない場合は、xSyncメソッドの代わりに呼び出されます。ほとんどの場合、このファイルコントロールで渡されるポインタ引数はNULLです。ただし、データベースファイルがマルチデータベースコミットの一部として同期されている場合、引数は、トランザクションのマスタージャーナルファイル名を含むNULで終了する文字列を指します。この信号を必要としないVFSは、このオペコードを黙って無視する必要があります。アプリケーションは&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）を&lt;/a&gt;呼び出すべきではありません このオペコードを使用すると、それを必要とする特殊なVFSの操作が中断される可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="df5b82162695e993bb266a9bcb74822b0cb0729d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntltrace&quot; id=&quot;sqlitefcntltrace&quot;&gt;SQLITE_FCNTL_TRACE&lt;/a&gt; file control provides advisory information to the VFS about what the higher layers of the SQLite stack are doing. This file control is used by some VFS activity tracing &lt;a href=&quot;../vfs#shim&quot;&gt;shims&lt;/a&gt;. The argument is a zero-terminated string. Higher layers in the SQLite stack may generate instances of this file control if the &lt;a href=&quot;../compile#use_fcntl_trace&quot;&gt;SQLITE_USE_FCNTL_TRACE&lt;/a&gt; compile-time option is enabled.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntltrace&quot; id=&quot;sqlitefcntltrace&quot;&gt;SQLITE_FCNTL_TRACEの&lt;/a&gt;ファイル制御は、SQLiteのスタックの上位層がやっていることについて、VFSへの助言情報を提供します。このファイルコントロールは、一部のVFSアクティビティトレース&lt;a href=&quot;../vfs#shim&quot;&gt;シムで&lt;/a&gt;使用されます。引数はゼロで終了する文字列です。&lt;a href=&quot;../compile#use_fcntl_trace&quot;&gt;SQLite_USE_FCNTL_TRACE&lt;/a&gt;コンパイル時オプションが有効になっている場合、SQLiteスタックの上位層でこのファイルコントロールのインスタンスが生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="dc747f657ceac57a6b93ab7190def0e8a928303d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlvfsname&quot; id=&quot;sqlitefcntlvfsname&quot;&gt;SQLITE_FCNTL_VFSNAME&lt;/a&gt; opcode can be used to obtain the names of all &lt;a href=&quot;../vfs&quot;&gt;VFSes&lt;/a&gt; in the VFS stack. The names are of all VFS shims and the final bottom-level VFS are written into memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; and the result is stored in the char* variable that the fourth parameter of &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; points to. The caller is responsible for freeing the memory when done. As with all file-control actions, there is no guarantee that this will actually do anything. Callers should initialize the char* variable to a NULL pointer in case this file-control is not implemented. This file-control is intended for diagnostic use only.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlvfsname&quot; id=&quot;sqlitefcntlvfsname&quot;&gt;SQLITE_FCNTL_VFSNAMEの&lt;/a&gt;オペコードは、すべての名前を取得するために使用することができ&lt;a href=&quot;../vfs&quot;&gt;VFSes&lt;/a&gt; VFSスタック内を。名前はすべてのVFSシムの名前であり、最終的な最下位VFSは&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;から取得したメモリに書き込まれ、結果は&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）の&lt;/a&gt; 4番目のパラメーターが指す char *変数に格納されます。呼び出し元は、完了時にメモリを解放する責任があります。すべてのファイル制御アクションと同様に、これが実際に何かを実行するという保証はありません。このファイルコントロールが実装されていない場合、呼び出し元はchar *変数をNULLポインターに初期化する必要があります。このファイル制御は、診断での使用のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="8a271c98ba50f856db7d26935d70d5164c6f00e4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlvfspointer&quot; id=&quot;sqlitefcntlvfspointer&quot;&gt;SQLITE_FCNTL_VFS_POINTER&lt;/a&gt; opcode finds a pointer to the top-level &lt;a href=&quot;../vfs&quot;&gt;VFSes&lt;/a&gt; currently in use. The argument X in sqlite3_file_control(db,SQLITE_FCNTL_VFS_POINTER,X) must be of type &quot;&lt;a href=&quot;vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; **&quot;. This opcodes will set *X to a pointer to the top-level VFS. When there are multiple VFS shims in the stack, this opcode finds the upper-most shim only.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlvfspointer&quot; id=&quot;sqlitefcntlvfspointer&quot;&gt;SQLITE_FCNTL_VFS_POINTERの&lt;/a&gt;オペコードは、トップレベルへのポインタ見つけ&lt;a href=&quot;../vfs&quot;&gt;VFSes&lt;/a&gt;現在使用されています。sqlite3_file_control（db、SQLITE_FCNTL_VFS_POINTER、X）の引数Xは、タイプ &quot; &lt;a href=&quot;vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; **&quot; でなければなりません。このオペコードは、* XをトップレベルのVFSへのポインターに設定します。スタックに複数のVFSシムがある場合、このオペコードは最上位のシムのみを検出します。</target>
        </trans-unit>
        <trans-unit id="5113389d53b260a388ff9b96ca66847bbd222b0d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwalblock&quot; id=&quot;sqlitefcntlwalblock&quot;&gt;SQLITE_FCNTL_WAL_BLOCK&lt;/a&gt; is a signal to the VFS layer that it might be advantageous to block on the next WAL lock if the lock is not immediately available. The WAL subsystem issues this signal during rare circumstances in order to fix a problem with priority inversion. Applications should &lt;em&gt;not&lt;/em&gt; use this file-control.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwalblock&quot; id=&quot;sqlitefcntlwalblock&quot;&gt;SQLITE_FCNTL_WAL_BLOCKは&lt;/a&gt;ロックが利用可能でない場合、次のWALロックをブロックすることが有利であるかもしれないことをVFS層に信号です。WALサブシステムは、優先順位の逆転の問題を修正するために、まれな状況でこの信号を発行します。アプリケーションはこのファイルコントロールを使用し&lt;em&gt;ないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="6f1b780daaf82dc713d986bde97a154815b1318d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwin32avretry&quot; id=&quot;sqlitefcntlwin32avretry&quot;&gt;SQLITE_FCNTL_WIN32_AV_RETRY&lt;/a&gt; opcode is used to configure automatic retry counts and intervals for certain disk I/O operations for the windows &lt;a href=&quot;../vfs&quot;&gt;VFS&lt;/a&gt; in order to provide robustness in the presence of anti-virus programs. By default, the windows VFS will retry file read, file write, and file delete operations up to 10 times, with a delay of 25 milliseconds before the first retry and with the delay increasing by an additional 25 milliseconds with each subsequent retry. This opcode allows these two values (10 retries and 25 milliseconds of delay) to be adjusted. The values are changed for all database connections within the same process. The argument is a pointer to an array of two integers where the first integer is the new retry count and the second integer is the delay. If either integer is negative, then the setting is not changed but instead the prior value of that setting is written into the array entry, allowing the current retry settings to be interrogated. The zDbName parameter is ignored.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwin32avretry&quot; id=&quot;sqlitefcntlwin32avretry&quot;&gt;SQLITE_FCNTL_WIN32_AV_RETRYの&lt;/a&gt;オペコードは、特定のディスクの自動再試行回数と間隔を設定するために使用されているWindows用のI / O操作&lt;a href=&quot;../vfs&quot;&gt;VFS&lt;/a&gt;ウイルス対策プログラムの存在下で堅牢性を提供するため。デフォルトでは、Windows VFSはファイルの読み取り、ファイルの書き込み、およびファイルの削除操作を最大10回再試行します。最初の再試行までに25ミリ秒の遅延があり、その後の再試行ごとに遅延がさらに25ミリ秒増加します。このオペコードにより、これらの2つの値（10回の再試行と25ミリ秒の遅延）を調整できます。同じプロセス内のすべてのデータベース接続の値が変更されます。引数は2つの整数の配列へのポインターです。最初の整数は新しい再試行回数で、2番目の整数は遅延です。いずれかの整数が負の場合、設定は変更されませんが、代わりにその設定の以前の値が配列エントリに書き込まれ、現在の再試行設定を問い合わせることができます。zDbNameパラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="937fe17d531247dde2a8c434e7c019ad55d302c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwin32gethandle&quot; id=&quot;sqlitefcntlwin32gethandle&quot;&gt;SQLITE_FCNTL_WIN32_GET_HANDLE&lt;/a&gt; opcode can be used to obtain the underlying native file handle associated with a file handle. This file control interprets its argument as a pointer to a native file handle and writes the resulting value there.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwin32gethandle&quot; id=&quot;sqlitefcntlwin32gethandle&quot;&gt;SQLITE_FCNTL_WIN32_GET_HANDLEの&lt;/a&gt;オペコードは、ファイルハンドルに関連付けられている基礎となるネイティブファイルハンドルを取得するために使用することができます。このファイルコントロールは、引数をネイティブファイルハンドルへのポインターとして解釈し、結果の値をそこに書き込みます。</target>
        </trans-unit>
        <trans-unit id="e6e591e785c2547026326ba62eddb1a8e3a00235" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwin32sethandle&quot; id=&quot;sqlitefcntlwin32sethandle&quot;&gt;SQLITE_FCNTL_WIN32_SET_HANDLE&lt;/a&gt; opcode is used for debugging. This opcode causes the xFileControl method to swap the file handle with the one pointed to by the pArg argument. This capability is used during testing and only needs to be supported when SQLITE_TEST is defined.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlwin32sethandle&quot; id=&quot;sqlitefcntlwin32sethandle&quot;&gt;SQLITE_FCNTL_WIN32_SET_HANDLEの&lt;/a&gt;オペコードは、デバッグに使用されます。このオペコードにより、xFileControlメソッドは、ファイルハンドルを、pArg引数によってポイントされたものと交換します。この機能はテスト中に使用され、SQLITE_TESTが定義されている場合にのみサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="5d3e0696fb81e2cd89dc43dbc9ef7b0440a8b5e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlzipvfs&quot; id=&quot;sqlitefcntlzipvfs&quot;&gt;SQLITE_FCNTL_ZIPVFS&lt;/a&gt; opcode is implemented by zipvfs only. All other VFS should return SQLITE_NOTFOUND for this opcode.</source>
          <target state="translated">&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlzipvfs&quot; id=&quot;sqlitefcntlzipvfs&quot;&gt;SQLITE_FCNTL_ZIPVFSの&lt;/a&gt;オペコードだけzipvfsによって実装されます。他のすべてのVFSは、このオペコードに対してSQLITE_NOTFOUNDを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="15edb51b39cd83bfa83c4b8e2f7138c93f46e748" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt; flag means the file should be deleted when it is closed. The &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSE&lt;/a&gt; will be set for TEMP databases and their journals, transient databases, and subjournals.</source>
          <target state="translated">&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSEの&lt;/a&gt;フラグは、それが閉じているときに、ファイルが削除されるべきであることを意味します。&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_DELETEONCLOSEは、&lt;/a&gt; TEMPデータベースとそのジャーナル、過渡データベース、およびsubjournalsのために設定されます。</target>
        </trans-unit>
        <trans-unit id="fc3c6baa196558e15836748dd318cdd30a688ef6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_EXCLUSIVE&lt;/a&gt; flag is always used in conjunction with the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_CREATE&lt;/a&gt; flag, which are both directly analogous to the O_EXCL and O_CREAT flags of the POSIX open() API. The SQLITE_OPEN_EXCLUSIVE flag, when paired with the SQLITE_OPEN_CREATE, is used to indicate that file should always be created, and that it is an error if it already exists. It is</source>
          <target state="translated">&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_EXCLUSIVE&lt;/a&gt;フラグは常にと一緒に使用される&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_CREATEの&lt;/a&gt;両方POSIXオープン（）APIのO_EXCLとO_CREATフラグに直接類似しているフラグ。SQLITE_OPEN_EXCLUSIVEフラグは、SQLITE_OPEN_CREATEと組み合わせて使用​​すると、ファイルを常に作成する必要があること、およびファイルがすでに存在する場合はエラーであることを示します。です</target>
        </trans-unit>
        <trans-unit id="c2061592c87f5f999944ce29cf7569df9e8b3f69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;c_source_id&quot;&gt;SQLITE_VERSION&lt;/a&gt; C preprocessor macro in the sqlite3.h header evaluates to a string literal that is the SQLite version in the format &quot;X.Y.Z&quot; where X is the major version number (always 3 for SQLite3) and Y is the minor version number and Z is the release number. The &lt;a href=&quot;c_source_id&quot;&gt;SQLITE_VERSION_NUMBER&lt;/a&gt; C preprocessor macro resolves to an integer with the value (X*1000000 + Y*1000 + Z) where X, Y, and Z are the same numbers used in &lt;a href=&quot;c_source_id&quot;&gt;SQLITE_VERSION&lt;/a&gt;. The SQLITE_VERSION_NUMBER for any given release of SQLite will also be larger than the release from which it is derived. Either Y will be held constant and Z will be incremented or else Y will be incremented and Z will be reset to zero.</source>
          <target state="translated">sqlite3.hヘッダーの&lt;a href=&quot;c_source_id&quot;&gt;SQLITE_VERSION&lt;/a&gt; Cプリプロセッサマクロは、「XYZ」形式のSQLiteバージョンである文字列リテラルに評価されます。Xはメジャーバージョン番号（SQLite3の場合は常に3）、Yはマイナーバージョン番号、Zはリリース番号。&lt;a href=&quot;c_source_id&quot;&gt;SQLITE_VERSION_NUMBER&lt;/a&gt; Cプリプロセッサ値を有する整数マクロ解決さ（X * 1000000 + Y&amp;times;1000 + Z）X、Y、及びZは、で使用したのと同じ数である&lt;a href=&quot;c_source_id&quot;&gt;SQLITE_VERSION&lt;/a&gt;。 SQLiteの特定のリリースのSQLITE_VERSION_NUMBERは、それが派生したリリースよりも大きくなります。 Yが一定に保持され、Zがインクリメントされるか、Yがインクリメントされ、Zがゼロにリセットされます。</target>
        </trans-unit>
        <trans-unit id="ffc6747416294fa8545c14bddccb7cfdc4ee3b78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension(X)&lt;/a&gt; interface unregisters the initialization routine X that was registered using a prior call to &lt;a href=&quot;auto_extension&quot;&gt;sqlite3_auto_extension(X)&lt;/a&gt;. The &lt;a href=&quot;cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension(X)&lt;/a&gt; routine returns 1 if initialization routine X was successfully unregistered and it returns 0 if X was not on the list of initialization routines.</source>
          <target state="translated">&lt;a href=&quot;cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension（X）&lt;/a&gt;インターフェースが前の呼び出し使用して登録された初期化ルーチンX登録解除&lt;a href=&quot;auto_extension&quot;&gt;sqlite3_auto_extension（X）を&lt;/a&gt;。&lt;a href=&quot;cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension（X）&lt;/a&gt;初期化ルーチンXであれば、リターン1が正常に登録解除されたとXは、初期化ルーチンのリストに載っていなかった場合には0を返します。</target>
        </trans-unit>
        <trans-unit id="5d6d6c3ad7f7d02755c43722a7a4b2dabb76ea67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;carray&quot;&gt;carray table-valued function&lt;/a&gt; needs to accept a pointer to an array of C-language values from the application.</source>
          <target state="translated">&lt;a href=&quot;carray&quot;&gt;CARRAYテーブル値関数は、&lt;/a&gt;アプリケーションからC言語の値の配列へのポインタを受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="c282faf1973e4f89130abe26a61f3f513af735e2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#default_page_size&quot;&gt;SQLITE_DEFAULT_PAGE_SIZE&lt;/a&gt; compile-time option can be used to change the default page size assigned to new databases.</source>
          <target state="translated">&lt;a href=&quot;compile#default_page_size&quot;&gt;SQLITE_DEFAULT_PAGE_SIZE&lt;/a&gt;コンパイル時のオプションは、新しいデータベースに割り当てられたデフォルトのページサイズを変更するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="5f025c2cb604da7be21c2713e7ae110d6fc22479" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#default_page_size&quot;&gt;SQLITE_DEFAULT_PAGE_SIZE&lt;/a&gt; is increased from 1024 to 4096. The &lt;a href=&quot;compile#default_cache_size&quot;&gt;SQLITE_DEFAULT_CACHE_SIZE&lt;/a&gt; is changed from 2000 to -2000 so the same amount of cache memory is used by default. See the application note on the &lt;a href=&quot;pgszchng2016&quot;&gt;version 3.12.0 page size change&lt;/a&gt; for further information.</source>
          <target state="translated">&lt;a href=&quot;compile#default_page_size&quot;&gt;SQLITE_DEFAULT_PAGE_SIZEは、&lt;/a&gt; 1024年から4096に増加している&lt;a href=&quot;compile#default_cache_size&quot;&gt;SQLITE_DEFAULT_CACHE_SIZEが&lt;/a&gt;同じ量のキャッシュ・メモリーがデフォルトで使用されているので、2000年から-2000に変更されます。詳細については、&lt;a href=&quot;pgszchng2016&quot;&gt;バージョン3.12.0のページサイズの変更&lt;/a&gt;に関するアプリケーションノートを参照してください。</target>
        </trans-unit>
        <trans-unit id="623f46dd8d1f8aedc876d36b9e6b7c6843fb38ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#direct_overflow_read&quot;&gt;-DSQLITE_DIRECT_OVERFLOW_READ&lt;/a&gt; compile-time option causes SQLite to bypass its page cache when reading content from overflow pages. This helps database reads of 10K blobs run a little faster, but not all that much faster. SQLite still holds a speed advantage over direct filesystem reads without the SQLITE_DIRECT_OVERFLOW_READ compile-time option.</source>
          <target state="translated">&lt;a href=&quot;compile#direct_overflow_read&quot;&gt;-DSQLITE_DIRECT_OVERFLOW_READ&lt;/a&gt;オーバーフローページからコンテンツを読み込むときにコンパイル時のオプションでは、そのページのキャッシュバイパスにSQLiteの原因となります。これにより、10K blobのデータベース読み取りが少し速くなりますが、それほど高速ではありません。SQLiteは、SQLITE_DIRECT_OVERFLOW_READコンパイル時オプションのないファイルシステムの直接読み取りよりも速度の面で有利です。</target>
        </trans-unit>
        <trans-unit id="e8d73bde2dc7785ffa127c202c3991e5af269a19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#enable_explain_comments&quot;&gt;SQLITE_ENABLE_EXPLAIN_COMMENTS&lt;/a&gt; compile-time option is now turned on by default in the standard builds.</source>
          <target state="translated">&lt;a href=&quot;compile#enable_explain_comments&quot;&gt;SQLITE_ENABLE_EXPLAIN_COMMENTS&lt;/a&gt;コンパイル時のオプションは、現在、標準のビルドではデフォルトでオンになっています。</target>
        </trans-unit>
        <trans-unit id="ec9ba2ea4ea2e87921df34017de3d69d7b4137bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#enable_stat2&quot;&gt;SQLITE_ENABLE_STAT2&lt;/a&gt; compile-time option causes the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command to collect a small histogram of each index, to help SQLite better select among competing range query indices.</source>
          <target state="translated">&lt;a href=&quot;compile#enable_stat2&quot;&gt;SQLITE_ENABLE_STAT2&lt;/a&gt;コンパイル時のオプションが原因&lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; SQLiteのがより良い競合範囲クエリの指標の中から選択できるように、各指標の小さなヒストグラムを収集するためのコマンドを。</target>
        </trans-unit>
        <trans-unit id="e0180c578d01206ca2260b932e5fe2d4e6cc6568" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#omitfeatures&quot;&gt;SQLITE_OMIT_...&lt;/a&gt; compile-time options only work when building from canonical source files. They do &lt;u&gt;not&lt;/u&gt; work when you build from the SQLite &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; or from the pre-processed source files.</source>
          <target state="translated">&lt;a href=&quot;compile#omitfeatures&quot;&gt;SQLITE_OMIT _...&lt;/a&gt;正規のソースファイルからビルドするときにコンパイル時のオプションはのみ動作します。SQLite &lt;a href=&quot;amalgamation&quot;&gt;アマルガム&lt;/a&gt;から、または前処理されたソースファイルからビルドする場合は機能し&lt;u&gt;ません&lt;/u&gt;。</target>
        </trans-unit>
        <trans-unit id="f951ab56418025da71fd3229ec924e7681f98557" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#query_planner_limit&quot;&gt;SQLITE_QUERY_PLANNER_LIMIT&lt;/a&gt; option sets an initial baseline value for the maximum number of index-and-constraint combinations that the query planner consider. The baseline query planner limit is increased by SQLITE_QUERY_PLANNER_LIMIT_INCR prior to processing each table of a join so that each table is guaranteed to be able to propose at least some index-and-constraint combinations to the optimizer even if prior tables of the join have exhausted the baseline limit. The default value for both this compile-time option and the &lt;a href=&quot;compile#query_planner_limit&quot;&gt;SQLITE_QUERY_PLANNER_LIMIT&lt;/a&gt; option are set high enough so that they should never be reached for real-world queries.</source>
          <target state="translated">&lt;a href=&quot;compile#query_planner_limit&quot;&gt;SQLITE_QUERY_PLANNER_LIMITの&lt;/a&gt;オプションは、クエリプランナが検討することをインデックスと制約の組み合わせの最大数の初期ベースライン値を設定します。ベースラインクエリプランナーの制限は、結合の各テーブルを処理する前にSQLITE_QUERY_PLANNER_LIMIT_INCRによって増加します。これにより、結合の前のテーブルが少なくともいくつかのインデックスと制約の組み合わせをオプティマイザに提案できることが保証されます。ベースライン制限。このコンパイル時オプションと&lt;a href=&quot;compile#query_planner_limit&quot;&gt;SQLITE_QUERY_PLANNER_LIMIT&lt;/a&gt;オプションの両方のデフォルト値は、実際のクエリでは決して到達しないように十分に高く設定されています。</target>
        </trans-unit>
        <trans-unit id="4cd49b137fd67eca14bbcc5b6c746f08a2997711" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#secure_delete&quot;&gt;SQLITE_SECURE_DELETE&lt;/a&gt; compile-time option fixed to make sure that content is deleted even when the &lt;a href=&quot;lang_delete#truncateopt&quot;&gt;truncate optimization&lt;/a&gt; applies.</source>
          <target state="translated">&lt;a href=&quot;compile#secure_delete&quot;&gt;SQLITE_SECURE_DELETE&lt;/a&gt;コンパイル時のオプションは、必ず際に、コンテンツも削除されたことを確認するために、固定&lt;a href=&quot;lang_delete#truncateopt&quot;&gt;切り捨て最適化が&lt;/a&gt;適用されます。</target>
        </trans-unit>
        <trans-unit id="656d7af3931cb41fc80d6fdefc85a4cfb80b7c01" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter is a #define whose value is an integer between 0 and 3, inclusive. The meaning of the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter is as follows:</source>
          <target state="translated">&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時のパラメータは、その値が0と3までの整数であるの#defineです。&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターの意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4c11588171d30d65004665748aee39867b770ec3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt; compile-time option can be used to limit the length of &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameter&lt;/a&gt; expansion in the output of sqlite3_trace().</source>
          <target state="translated">&lt;a href=&quot;compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt;コンパイル時オプションは、の長さを制限するために使用することができる&lt;a href=&quot;lang_expr#varparam&quot;&gt;上限パラメータ&lt;/a&gt; sqlite3_traceの出力で膨張を（）。</target>
        </trans-unit>
        <trans-unit id="355c715bbc78271373ada3410d668232a6d1cc69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt; compile-time option limits the size of bound parameter expansions. The &lt;a href=&quot;compile#omit_trace&quot;&gt;SQLITE_OMIT_TRACE&lt;/a&gt; compile-time option causes sqlite3_expanded_sql() to always return NULL.</source>
          <target state="translated">&lt;a href=&quot;compile#trace_size_limit&quot;&gt;SQLITE_TRACE_SIZE_LIMIT&lt;/a&gt;コンパイル時のオプションは、バインドされたパラメータ展開のサイズを制限します。&lt;a href=&quot;compile#omit_trace&quot;&gt;SQLITE_OMIT_TRACE&lt;/a&gt;コンパイル時のオプションは常にNULLを返すために）（sqlite3_expanded_sqlの原因となります。</target>
        </trans-unit>
        <trans-unit id="4f82d70cfe7739c80fc41874304dfb1e1ffafd3f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;, ...) interface can register an alternative page cache implementation by passing in an instance of the sqlite3_pcache_methods2 structure. In many applications, most of the heap memory allocated by SQLite is used for the page cache. By implementing a custom page cache using this API, an application can better control the amount of memory consumed by SQLite, the way in which that memory is allocated and released, and the policies used to determine exactly which parts of a database file are cached and for how long.</source>
          <target state="translated">&lt;a href=&quot;config&quot;&gt;sqlite3_config&lt;/a&gt;（&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;、...）インタフェースはsqlite3_pcache_methods2構造体のインスタンスを渡すことによって、代替ページキャッシュの実装を登録することができます。多くのアプリケーションでは、SQLiteによって割り当てられたヒープメモリのほとんどがページキャッシュに使用されます。このAPIを使用してカスタムページキャッシュを実装することにより、アプリケーションは、SQLiteによって消費されるメモリの量、そのメモリの割り当てと解放の方法、およびデータベースファイルのどの部分をキャッシュするかを正確に決定するために使用されるポリシーをより適切に制御できます。どれだけの時間。</target>
        </trans-unit>
        <trans-unit id="28bbb907be12b8d8d6cb3f58bde73db3db4a2a3e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; output no longer shows an estimate of the number of rows generated by each loop in a join.</source>
          <target state="translated">&lt;a href=&quot;eqp&quot;&gt;クエリプランEXPLAIN&lt;/a&gt;の各ループによって生成される行の数の推定値が参加出力もはやショー。</target>
        </trans-unit>
        <trans-unit id="0403e12475b1041021c7db25c8bbeab40ee20902" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; interface makes a direct call to the xFileControl method for the &lt;a href=&quot;io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object associated with a particular database identified by the second argument. The name of the database is &quot;main&quot; for the main database or &quot;temp&quot; for the TEMP database, or the name that appears after the AS keyword for databases that are added using the &lt;a href=&quot;../lang_attach&quot;&gt;ATTACH&lt;/a&gt; SQL command. A NULL pointer can be used in place of &quot;main&quot; to refer to the main database file. The third and fourth parameters to this routine are passed directly through to the second and third parameters of the xFileControl method. The return value of the xFileControl method becomes the return value of this routine.</source>
          <target state="translated">&lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;インターフェースがためxFileControlメソッドを直接呼び出すことができる&lt;a href=&quot;io_methods&quot;&gt;sqlite3_io_methodsが&lt;/a&gt;二番目の引数によって識別される特定のデータベースに関連付けられたオブジェクトを。データベースの名前は、メインデータベースの場合は「main」、TEMPデータベースの場合は「temp」、または&lt;a href=&quot;../lang_attach&quot;&gt;ATTACH&lt;/a&gt; SQLコマンドを使用して追加されたデータベースのASキーワードの後に​​表示される名前です。 「main」の代わりにNULLポインタを使用して、メインデータベースファイルを参照できます。このルーチンの3番目と4番目のパラメーターは、xFileControlメソッドの2番目と3番目のパラメーターに直接渡されます。 xFileControlメソッドの戻り値は、このルーチンの戻り値になります。</target>
        </trans-unit>
        <trans-unit id="c477329521e0c202c4f6312a9b20720b0061408f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileformat2&quot;&gt;underlying file format&lt;/a&gt; for SQLite databases does not change in incompatible ways. There are literally hundreds of billions, perhaps trillions, of SQLite database files in circulation and the SQLite developers are committing to supporting those files for decades into the future.</source>
          <target state="translated">SQLiteデータベースの&lt;a href=&quot;fileformat2&quot;&gt;基本的なファイル形式&lt;/a&gt;は、互換性のない方法で変更されません。文字通り数千億、おそらく数兆のSQLiteデータベースファイルが流通しており、SQLite開発者はそれらのファイルを何十年もの間サポートすることを約束しています。</target>
        </trans-unit>
        <trans-unit id="019a9b5a0c4bab7b2872e5382ef484fc4c667e1b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileformat2#validfor&quot;&gt;version-valid-for number&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fileformat2#validfor&quot;&gt;バージョン-有効-の番号&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47ad55bfdbffd81a341414cce2caff94549fb57d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileformat2#walformat&quot;&gt;WAL file format&lt;/a&gt; is precisely defined and is cross-platform.</source>
          <target state="translated">&lt;a href=&quot;fileformat2#walformat&quot;&gt;WALファイル形式は&lt;/a&gt;、正確に定義されており、クロスプラットフォームです。</target>
        </trans-unit>
        <trans-unit id="3e921edb70343a6bdb367da8f2286bed023bed5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;foreignkeys#parentchild&quot;&gt;parent key&lt;/a&gt; of a &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraint&lt;/a&gt; is not allowed to use the rowid. The parent key must used named columns only.</source>
          <target state="translated">&lt;a href=&quot;foreignkeys&quot;&gt;外部キー制約&lt;/a&gt;の&lt;a href=&quot;foreignkeys#parentchild&quot;&gt;親キー&lt;/a&gt;は、ROWIDを使用できません。親キーは名前付きの列のみを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="94136fe2e1cb36bfe5b8895ca9db2e90ee44f1f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt; MATCH operator passes pointers into &lt;a href=&quot;fts3#snippet&quot;&gt;snippet()&lt;/a&gt;, &lt;a href=&quot;fts3#offsets&quot;&gt;offsets()&lt;/a&gt;, and &lt;a href=&quot;fts3#matchinfo&quot;&gt;matchinfo()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt; MATCHオペレータはへのポインタを通過&lt;a href=&quot;fts3#snippet&quot;&gt;スニペットを（） &lt;/a&gt;、&lt;a href=&quot;fts3#offsets&quot;&gt;オフセット（） &lt;/a&gt;、と&lt;a href=&quot;fts3#matchinfo&quot;&gt;のMatchInfo（） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="43eb5ae7856e6e2985afc5b90e134ad6efe6a669" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#*fts4rebuidcmd&quot;&gt;FTS4 &quot;rebuild&quot; command&lt;/a&gt; deletes the entire full-text index and rebuilds it based on the current set of documents in the content table. Assuming again that &quot;t3&quot; is the name of the external content FTS4 table, the rebuild command looks like this:</source>
          <target state="translated">&lt;a href=&quot;fts3#*fts4rebuidcmd&quot;&gt;FTS4コマンドは、「再構築」&lt;/a&gt;全体のフルテキストインデックスを削除し、コンテンツテーブル内のドキュメントの現在のセットに基づいて、それを再構築します。再度、「t3」が外部コンテンツFTS4テーブルの名前であると仮定すると、rebuildコマンドは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a98c7bde5e55ca0fc0875001b5230f001bb8d1a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#f3tknzr&quot;&gt;fts3_tokenizer()&lt;/a&gt; function always returns NULL unless either the legacy application-defined FTS3 tokenizers interface are enabled using the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenablefts3tokenizer&quot;&gt;SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER&lt;/a&gt;) setting, or unless the first argument to fts3_tokenizer() is a &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameter&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fts3#f3tknzr&quot;&gt;fts3_tokenizer（）&lt;/a&gt;関数は常にNULLを返していない限りいずれかを使用して有効になっているインターフェース、レガシーアプリケーション定義FTS3トークナイザ&lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;（&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenablefts3tokenizer&quot;&gt;SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER&lt;/a&gt;）設定、またはfts3_tokenizerの最初の引数は（）である場合を除き&lt;a href=&quot;lang_expr#varparam&quot;&gt;、結合したパラメーター&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1574210b17663fb17af96bfd5572d4febc918bf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#full_text_index_queries&quot;&gt;FTS MATCH&lt;/a&gt; operator is supported for queries based on the built-in full-text index.</source>
          <target state="translated">&lt;a href=&quot;fts3#full_text_index_queries&quot;&gt;FTS MATCHの&lt;/a&gt;オペレータは、内蔵のフルテキストインデックスに基づくクエリでサポートされています。</target>
        </trans-unit>
        <trans-unit id="afda903a3f03dcbd2f01644e1f0a3ea9a0e62818" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#matchinfo-x&quot;&gt;matchinfo 'x' flag&lt;/a&gt; would report a single hit for the phrases &quot;a&quot; and &quot;c&quot;. However, the 'y' directive reports the number of hits for &quot;c&quot; as zero, as it is part of a sub-expression that does not match the document - (b AND c). For queries that do not contain AND operators descended from OR operators, the result values returned by 'y' are always the same as those returned by 'x'.</source>
          <target state="translated">&lt;a href=&quot;fts3#matchinfo-x&quot;&gt;MatchInfo「X」フラグは、&lt;/a&gt;フレーズ「」と「C」のためのシングルヒットを報告します。ただし、「y」ディレクティブは「c」のヒット数をゼロとして報告します。これは、ドキュメントに一致しない部分式の一部であるためです-（b AND c）。OR演算子から派生したAND演算子を含まないクエリの場合、「y」から返される結果値は「x」から返される結果値と常に同じです。</target>
        </trans-unit>
        <trans-unit id="5a3b429b14a3a0c21190f0bbe4a4fec620e8c35a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#snippet&quot;&gt;FTS auxiliary functions&lt;/a&gt;, &lt;a href=&quot;fts3#snippet&quot;&gt;snippet()&lt;/a&gt;, &lt;a href=&quot;fts3#offsets&quot;&gt;offsets()&lt;/a&gt;, and &lt;a href=&quot;fts3#matchinfo&quot;&gt;matchinfo()&lt;/a&gt; are available to support full-text queries.</source>
          <target state="translated">&lt;a href=&quot;fts3#snippet&quot;&gt;FTSの補助機能&lt;/a&gt;、&lt;a href=&quot;fts3#snippet&quot;&gt;スニペット（） &lt;/a&gt;、&lt;a href=&quot;fts3#offsets&quot;&gt;オフセット（） &lt;/a&gt;、および&lt;a href=&quot;fts3#matchinfo&quot;&gt;のMatchInfo（）は&lt;/a&gt;、フルテキストクエリをサポートするのに利用可能です。</target>
        </trans-unit>
        <trans-unit id="986cc21a6b9f4c0f213b24757430a9834e1ed2e4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#snippet&quot;&gt;snippet&lt;/a&gt; function cannot be used with the above query. Because the outer query does not include a &quot;WHERE ... MATCH&quot; clause, the snippet function may not be used with it. One solution is to duplicate the WHERE clause used by the sub-query in the outer query. The overhead associated with this is usually negligible.</source>
          <target state="translated">&lt;a href=&quot;fts3#snippet&quot;&gt;スニペット&lt;/a&gt;機能は、上記のクエリで使用することはできません。外側のクエリには &quot;WHERE ... MATCH&quot;句が含まれていないため、スニペット関数は使用できません。1つの解決策は、外部クエリのサブクエリで使用されるWHERE句を複製することです。これに関連するオーバーヘッドは通常、無視できます。</target>
        </trans-unit>
        <trans-unit id="6bce43282ea827774137f471cf2a2f9eafebbd71" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts3#unicode61&quot;&gt;unicode61&lt;/a&gt; tokenizer is now included in &lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt; by default.</source>
          <target state="translated">&lt;a href=&quot;fts3#unicode61&quot;&gt;unicode61&lt;/a&gt;トークナイザは今に含まれている&lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt;デフォルトで。</target>
        </trans-unit>
        <trans-unit id="d0b9e4179a7690f373db2c622ddd029271ea2c29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts5#the_bm25_function&quot;&gt;bm25() auxiliary function&lt;/a&gt; returns a real value reflecting the accuracy of the current match. Better matches are assigned numerically lower values.</source>
          <target state="translated">&lt;a href=&quot;fts5#the_bm25_function&quot;&gt;BM25（）補助機能は、&lt;/a&gt;現在のマッチの正確さを反映する真の値を返します。一致度が高いほど、数値的に低い値が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="86d537287fe3b1d151168bae58fabce38b16555d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts5#the_columnsize_option&quot;&gt;&quot;columnsize&quot; option&lt;/a&gt;, used to configure whether or not the size in tokens of each value in the FTS5 table is stored separately within the database.</source>
          <target state="translated">&lt;a href=&quot;fts5#the_columnsize_option&quot;&gt;「ColumnSizeが」オプション&lt;/a&gt; FTS5テーブル内の各値のトークンにサイズがデータベース内に別々に格納されているか否かを設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4542957e1a08fcc6a2bdcd49b04a58f559cf1ff8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts5#the_detail_option&quot;&gt;&quot;detail&quot; option&lt;/a&gt;. This option may be used to reduce the size of the FTS index on disk by omitting some information from it.</source>
          <target state="translated">&lt;a href=&quot;fts5#the_detail_option&quot;&gt;「詳細」オプション&lt;/a&gt;。このオプションを使用すると、一部の情報を省略して、ディスク上のFTSインデックスのサイズを縮小できます。</target>
        </trans-unit>
        <trans-unit id="e41a2e84baae07818885bfa4f91b936da5a1f958" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts5#the_highlight_function&quot;&gt;highlight() auxiliary function&lt;/a&gt; returns a copy of the text from one of the columns of the current match with each instance of a queried term within the result surrounded by specified markup (for example &quot;&amp;lt;b&amp;gt;&quot; and &quot;&amp;lt;/b&amp;gt;&quot;).</source>
          <target state="translated">&lt;a href=&quot;fts5#the_highlight_function&quot;&gt;ハイライト（）補助機能は、&lt;/a&gt;結果内の照会用語の各インスタンスに現在一致の列のいずれかからのテキストのコピーを返す（例えば、「&amp;lt;B&amp;gt;」と「&amp;lt;/ B&amp;gt;」指定したマークアップに囲まれ）。</target>
        </trans-unit>
        <trans-unit id="b98a3fb75c4347301e0a46ec5f5ca45961387193" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fts5#the_snippet_function&quot;&gt;snippet() auxiliary function&lt;/a&gt; selects a short fragment of text from one of the columns of the matched row and returns it with each instance of a queried term surrounded by markup in the same manner as the highlight() function. The fragment of text is selected so as to maximize the number of queried terms it contains.</source>
          <target state="translated">&lt;a href=&quot;fts5#the_snippet_function&quot;&gt;スニペット（）補助機能は、&lt;/a&gt;一致行の列とハイライト（）関数と同様に、マークアップで囲まれた照会用語の各インスタンスに戻ることのうちの1つからのテキストの短い断片を選択します。テキストのフラグメントは、それが含む照会された用語の数を最大化するように選択されます。</target>
        </trans-unit>
        <trans-unit id="3a9eabcd215930eb738f36712bb83d6c0b14ec4f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;American Fuzzy Lop&lt;/a&gt; or &quot;AFL&quot; fuzzer is a recent (circa 2014) innovation from Michal Zalewski. Unlike most other fuzzers that blindly generate random inputs, the AFL fuzzer instruments the program being tested (by modifying the assembly-language output from the C compiler) and uses that instrumentation to detect when an input causes the program to do something different - to follow a new control path or loop a different number of times. Inputs that provoke new behavior are retained and further mutated. In this way, AFL is able to &quot;discover&quot; new behaviors of the program under test, including behaviors that were never envisioned by the designers.</source>
          <target state="translated">&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;アメリカンファジーロプ&lt;/a&gt;または「AFL」fuzzerはミハルZalewski氏から最近（2014年頃）の技術革新です。ランダム入力を盲目的に生成する他のほとんどのファザーとは異なり、AFLファザーは（Cコンパイラーからのアセンブリ言語出力を変更することによって）テスト対象のプログラムをインストルメント化し、そのインストルメンテーションを使用して、入力がプログラムに何か別のことをさせるタイミングを検出します。新しい制御パスまたは異なる回数のループ。新しい動作を引き起こす入力は保持され、さらに変化します。このようにして、AFLは、テスト対象のプログラムの新しい動作（設計者が想定していなかった動作を含む）を「発見」できます。</target>
        </trans-unit>
        <trans-unit id="8ddbb2bd7ba87408b594939a6917d04da89a5349" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil DVCS&lt;/a&gt; is the version control system used to track all of the SQLite source code. A Fossil repository is an SQLite database file. (Readers are invited to ponder this recursion as an independent exercise.) Fossil is both the version-control system for SQLite and a test platform for SQLite. Whenever enhancements are made to SQLite, Fossil is one of the first applications to test and evaluate those enhancements. So Fossil was an early adopter of the NGQP.</source>
          <target state="translated">&lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;化石DVCS&lt;/a&gt; SQLiteのソースコードのすべてを追跡するために使用されるバージョン管理システムです。 FossilリポジトリはSQLiteデータベースファイルです。 （読者は、この再帰を独立した演習として熟考するよう招待されています。）Fossilは、SQLiteのバージョン管理システムであり、SQLiteのテストプラットフォームでもあります。 SQLiteが拡張された場合、Fossilはそれらの拡張をテストおよび評価する最初のアプリケーションの1つです。したがって、FossilはNGQPの初期の採用者でした。</target>
        </trans-unit>
        <trans-unit id="cca3e4effc9207d5a63c711cbfd8ac97defe5fba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.sqlite.org/sqllogictest&quot; id=&quot;slt&quot;&gt;&lt;b&gt;SQL Logic Test&lt;/b&gt;&lt;/a&gt; or SLT test harness is used to run huge numbers of SQL statements against both SQLite and several other SQL database engines and verify that they all get the same answers. SLT currently compares SQLite against PostgreSQL, MySQL, Microsoft SQL Server, and Oracle 10g. SLT runs 7.2 million queries comprising 1.12GB of test data.</source>
          <target state="translated">&lt;a href=&quot;http://www.sqlite.org/sqllogictest&quot; id=&quot;slt&quot;&gt;&lt;b&gt;SQLロジックのテスト&lt;/b&gt;&lt;/a&gt;やSLTテストハーネスは、SQLiteの、いくつかの他のSQLデータベースエンジンの両方に対してSQL文の膨大な数を実行し、それらはすべて同じ答えを得ることを確認するために使用されます。 SLTは現在、SQLiteをPostgreSQL、MySQL、Microsoft SQL Server、およびOracle 10gと比較しています。 SLTは、1.12GBのテストデータで構成される720万のクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="154e70bf20f83a327304d76749961d8773743242" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_SQL_Database&quot;&gt;WebSQL&lt;/a&gt; interface to webkit allowed any webpage to run arbitrary SQL in the browser for Chrome and Safari. That arbitrary SQL was supposed to be run inside a sandbox where it could do no harm even if exploited, but that sandbox turned out to be less secure than people supposed. In the spring of 2017, one team of hackers was able to root an iMac using a long sequence of exploits, one of which involved corrupting the pointers passed as BLOB values to the snippet() FTS3 function of an SQLite database running via the WebSQL interface inside of Safari.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_SQL_Database&quot;&gt;Webkit&lt;/a&gt;へのWebSQLインターフェースにより、任意のWebページがChromeおよびSafariのブラウザーで任意のSQLを実行できるようになりました。その任意のSQLは、悪用されても害を及ぼさないサンドボックス内で実行されるはずでしたが、そのサンドボックスは、人々が想定するよりも安全性が低いことが判明しました。2017年の春に、ハッカーの1つのチームが長いシーケンスのエクスプロイトを使用してiMacをルート化することができました。その1つは、WebSQLインターフェースを介して実行されるSQLiteデータベースのsnippet（）FTS3関数にBLOB値として渡されたポインターを破損することでした。サファリの中。</target>
        </trans-unit>
        <trans-unit id="6101be379589e2c8cd0e728015188ca8e192b3db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://fossil-scm.org/&quot;&gt;Fossil Distributed Version Control&lt;/a&gt; system provides users with the option to download check-ins as either Tarballs, ZIP Archives, or SQLite Archives.</source>
          <target state="translated">&lt;a href=&quot;https://fossil-scm.org/&quot;&gt;化石分散型バージョン管理&lt;/a&gt;システムでは、tarで固め、ZIPアーカイブ、またはSQLiteのアーカイブのいずれかとして、ダウンロードのチェックインのオプションをユーザーに提供します。</target>
        </trans-unit>
        <trans-unit id="6106b2007efa210c8ee70fed3636c5f43bb5c12d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/appendvfs.c&quot;&gt;Append VFS&lt;/a&gt; is a &lt;a href=&quot;vfs#shim&quot;&gt;VFS shim&lt;/a&gt; that allows an SQLite database to be appended to some other file. This allows (for example) a database to be appended to an executable that then opens and reads the database.</source>
          <target state="translated">&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/appendvfs.c&quot;&gt;追加VFSは&lt;/a&gt;ある&lt;a href=&quot;vfs#shim&quot;&gt;VFSシム&lt;/a&gt;のSQLiteデータベースは、いくつかの他のファイルに追加することができます。これにより、（たとえば）データベースを実行可能ファイルに追加して、データベースを開いて読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="80173a6349ab4ffb46f02ada86de670d66a57b26" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/btreeinfo.c&quot;&gt;sqlite_btreeinfo&lt;/a&gt; eponymous virtual table for introspecting and estimating the sizes of the btrees in a database.</source>
          <target state="translated">データベース内のbtreeのサイズをイントロ&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/btreeinfo.c&quot;&gt;スペクト&lt;/a&gt;および推定するためのsqlite_btreeinfoの代名詞の仮想テーブル。</target>
        </trans-unit>
        <trans-unit id="ab07c049c01997dbb19b575504dcb74af616cde0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/remember.c&quot;&gt;remember() extension&lt;/a&gt; needs a pointer to a C-language integer variable in which to remember the value it passes.</source>
          <target state="translated">&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/remember.c&quot;&gt;）（覚えている拡張は&lt;/a&gt;、それが通過する値を記憶するにC言語整数変数へのポインタを必要とします。</target>
        </trans-unit>
        <trans-unit id="56d93d46695516053b394cd5886b780db3048dfe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/vfsstat.c&quot;&gt;vfsstat.c&lt;/a&gt; extension show an example of a loadable extension that persistently registers both a new VFS and a new virtual table. The &lt;a href=&quot;https://sqlite.org/src/info/77b5b4235c9f7f11?ln=801-819&quot;&gt;sqlite3_vfsstat_init()&lt;/a&gt; initialization routine in that extension is called only once, when the extension is first loaded. It registers the new &quot;vfslog&quot; VFS just that one time, and it returns SQLITE_OK_LOAD_PERMANENTLY so that the code used to implement the &quot;vfslog&quot; VFS will remain in memory. The initialization routine also invokes &lt;a href=&quot;c3ref/auto_extension&quot;&gt;sqlite3_auto_extension()&lt;/a&gt; on a pointer to the &quot;vstatRegister()&quot; function so that all subsequent database connections will invoke the &quot;vstatRegister()&quot; function as they start up, and hence register the &quot;vfsstat&quot; virtual table.</source>
          <target state="translated">&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/vfsstat.c&quot;&gt;vfsstat.cの&lt;/a&gt;拡張は持続新しいVFSと新しい仮想テーブルの両方を登録することがロード可能な拡張の例を示します。その拡張機能の&lt;a href=&quot;https://sqlite.org/src/info/77b5b4235c9f7f11?ln=801-819&quot;&gt;sqlite3_vfsstat_init（）&lt;/a&gt;初期化ルーチンは、拡張機能が最初にロードされたときに1回だけ呼び出されます。新しい「vfslog」VFSを一度に登録し、SQLITE_OK_LOAD_PERMANENTLYを返すので、「vfslog」VFSの実装に使用されるコードがメモリに残ります。また呼び出す初期化ルーチン&lt;a href=&quot;c3ref/auto_extension&quot;&gt;sqlite3_auto_extension（）&lt;/a&gt;「vstatRegister（）」関数へのポインタにそれらが起動するので「vfsstat」仮想テーブルを登録するように後続のすべてのデータベース接続は、「vstatRegister（）」関数を呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="037dcdadc7444a9f8e13871793682a198eab41e4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/file/tool/speed-check.sh&quot;&gt;speed-check.sh&lt;/a&gt; shell script, also in the canonical source tree, is used to run the speedtest1.c program. To replicate the performance measurements, collect the following files into a single directory:</source>
          <target state="translated">&lt;a href=&quot;https://sqlite.org/src/file/tool/speed-check.sh&quot;&gt;speed-check.sh&lt;/a&gt;シェルスクリプトは、また、標準的なソースツリーで、speedtest1.cプログラムを実行するために使用されます。パフォーマンス測定を複製するには、次のファイルを1つのディレクトリに収集します。</target>
        </trans-unit>
        <trans-unit id="3427f1e6f488cf0eccc944462552651c0021ca21" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/finfo?name=src/shell.c&quot;&gt;src/shell.c&lt;/a&gt; source code to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; is no longer under version control. That file is now generated as part of the build process.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;コマンドラインシェル&lt;/a&gt;への&lt;a href=&quot;https://sqlite.org/src/finfo?name=src/shell.c&quot;&gt;src / shell.c&lt;/a&gt;ソースコードはバージョン管理下にありません。このファイルは、ビルドプロセスの一部として生成されます。</target>
        </trans-unit>
        <trans-unit id="c808a45cb504200c3f1dbb6bdafa2749899db0fe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://sqlite.org/src/timeline&quot;&gt;SQLite Fossil Repository&lt;/a&gt; contains links for downloading a Tarball, ZIP Archive, or &lt;a href=&quot;sqlar&quot;&gt;SQLite Archive&lt;/a&gt; for any historical version of SQLite. The URLs for these downloads are simple and can be incorporated easily into automated tools. The format is:</source>
          <target state="translated">&lt;a href=&quot;https://sqlite.org/src/timeline&quot;&gt;SQLiteの化石リポジトリは&lt;/a&gt; tarアーカイブ、ZIPアーカイブ、またはダウンロードするためのリンクが含まれている&lt;a href=&quot;sqlar&quot;&gt;SQLiteのアーカイブを&lt;/a&gt; SQLiteの任意の歴史的なバージョンのを。これらのダウンロードのURLはシンプルで、自動化ツールに簡単に組み込むことができます。形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d3fbdd1d270cc576e74540d52236d70c3135bcb8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://tools.ietf.org/html/rfc7946&quot;&gt;GeoJSON standard&lt;/a&gt; is syntax for exchanging geospatial information using JSON. GeoJSON is a rich standard that can describe nearly any kind of geospatial content.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc7946&quot;&gt;GeoJSON標準では、&lt;/a&gt; JSONを使用して、地理空間情報を交換するための構文です。GeoJSONは、ほぼすべての種類の地理空間コンテンツを記述できる豊富な標準です。</target>
        </trans-unit>
        <trans-unit id="103a9865440a893fd3c0abf774146aac35769fd1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossil Version Control System&lt;/a&gt; uses its own printf() implementation that is derived from an early version of the SQLite printf() implementation, but those two implementations have since diverged.</source>
          <target state="translated">&lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;化石バージョン管理システムは、&lt;/a&gt; SQLiteのprintfの（）の実装の初期バージョンから派生し、独自のprintf（）の実装を使用していますが、これらの2つの実装は、以来、分岐しています。</target>
        </trans-unit>
        <trans-unit id="6c9ad5b94e94e6f0742495238eb4e3e441c282ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; version control system (designed and written for the purpose of supporting SQLite development) allows mildly trusted users to enter arbitrary SQL for generating trouble-ticket reports. That SQL is sanitized using the &lt;a href=&quot;c3ref/set_authorizer&quot;&gt;sqlite3_set_authorizer()&lt;/a&gt; interface, and no exploits have ever been found. But this is an example of potentially hostile agents being able to inject arbitrary SQL into the system.</source>
          <target state="translated">&lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;化石&lt;/a&gt;（SQLiteの開発を支援する目的で設計されたと書かれた）バージョン管理システムは、穏やかな、信頼できるユーザーはトラブルチケットのレポートを生成するための任意のSQLを入力することができます。そのSQLは&lt;a href=&quot;c3ref/set_authorizer&quot;&gt;sqlite3_set_authorizer（）&lt;/a&gt;インターフェースを使用してサニタイズされており、エクスプロイトは発見されていません。しかし、これは、システムに任意のSQLを挿入できる潜在的に敵対的なエージェントの例です。</target>
        </trans-unit>
        <trans-unit id="d3062c93a43df260caeb23ab2e3ad2153f90cd2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;int64&quot;&gt;sqlite3_int64&lt;/a&gt; variable pointed to by the T parameter will be set to the total number of rows examined by all iterations of the X-th loop.</source>
          <target state="translated">&lt;a href=&quot;int64&quot;&gt;sqlite3_int64の&lt;/a&gt;変数は、Tパラメータは、行の合計数に設定することによって指さX番目のループのすべての反復によって調べ。</target>
        </trans-unit>
        <trans-unit id="db1220ff947aa3310307b8d1e97a7892f5326b35" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;int64&quot;&gt;sqlite3_int64&lt;/a&gt; variable pointed to by the T parameter will be set to the total number of times that the X-th loop has run.</source>
          <target state="translated">&lt;a href=&quot;int64&quot;&gt;sqlite3_int64の&lt;/a&gt;変数は、TパラメータがX番目のループが実行された回数の合計数に設定することによって指さ。</target>
        </trans-unit>
        <trans-unit id="d635355782e5d01fca2019b73467bea006012ad0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;intern-v-extern-blob&quot;&gt;Internal Versus External BLOBs&lt;/a&gt; article on this website is an earlier investigation (circa 2011) that uses the same approach as the Jim Gray paper &amp;mdash; storing the blob filenames as entries in the database &amp;mdash; but for SQLite instead of SQL Server.</source>
          <target state="translated">このWebサイトの&lt;a href=&quot;intern-v-extern-blob&quot;&gt;内部と外部のBLOB&lt;/a&gt;に関する記事は、ジムグレイの論文と同じアプローチを使用した初期の調査（2011年頃）です。ブロブのファイル名をデータベースのエントリとして保存しますが、SQL ServerではなくSQLiteを対象としています。</target>
        </trans-unit>
        <trans-unit id="cf7fb4a466758f27d2e851f548bb98e33d7f26c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang&quot;&gt;SQL language documentation&lt;/a&gt; is converted to use &lt;a href=&quot;syntaxdiagrams&quot;&gt;syntax diagrams&lt;/a&gt; instead of BNF.</source>
          <target state="translated">&lt;a href=&quot;lang&quot;&gt;SQL言語のドキュメントを&lt;/a&gt;使用するように変換され、&lt;a href=&quot;syntaxdiagrams&quot;&gt;構文図&lt;/a&gt;の代わりBNFのを。</target>
        </trans-unit>
        <trans-unit id="e0edaa5ff21911b0f3da41c0480fbb1aa18847d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE&lt;/a&gt; command works differently in two respects when foreign key constraints are enabled:</source>
          <target state="translated">&lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLEの&lt;/a&gt;外部キー制約が有効になっているときのコマンドは、2つの点で異なって動作します。</target>
        </trans-unit>
        <trans-unit id="7f9caf431fddd0486fb12661e16a4ade73718c32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command now gathers statistics on tables even if they have no indices.</source>
          <target state="translated">&lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt;コマンドは、今、彼らは何のインデックスを持っていない場合でも、表の統計を収集します。</target>
        </trans-unit>
        <trans-unit id="2e90c478519d8e9b1bd82d0dd1c5b19da711cd5f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; statement is an SQLite extension that allows two or more databases to be associated to the same database connection and to operate as if they were a single database. The number of simultaneously attached databases is limited to SQLITE_MAX_ATTACHED which is set to 10 by default. The maximum number of attached databases cannot be increased above 125.</source>
          <target state="translated">&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;文が二つ以上のデータベースが同じデータベース接続に関連付けることができますし、それらが単一のデータベースであるかのように動作するSQLiteの拡張機能です。同時に接続されるデータベースの数は、デフォルトで10に設定されているSQLITE_MAX_ATTACHEDに制限されています。アタッチされるデータベースの最大数は125を超えることはできません。</target>
        </trans-unit>
        <trans-unit id="e65f9f430c67e4418373e91a58e15ed50bb5c875" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; clause</source>
          <target state="translated">&lt;a href=&quot;lang_conflict&quot;&gt;CONFLICTのON&lt;/a&gt;句</target>
        </trans-unit>
        <trans-unit id="3e1a4fb3e81abe601d6a76ca6511292629d722a1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_corefunc#ifnull&quot;&gt;ifnull()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#coalesce&quot;&gt;coalesce()&lt;/a&gt; SQL functions are now implemented using in-line VDBE code rather than calling external functions, so that unused arguments need never be evaluated.</source>
          <target state="translated">&lt;a href=&quot;lang_corefunc#ifnull&quot;&gt;IFNULL（）&lt;/a&gt;および&lt;a href=&quot;lang_corefunc#coalesce&quot;&gt;COALESCE（）&lt;/a&gt; SQL関数は、現在未使用の引数が評価されることはありません必要はそうすることを、インラインVDBEコードを使用するのではなく、外部関数の呼び出しを実装しています。</target>
        </trans-unit>
        <trans-unit id="b38d1ab83adc6d5e3ecac3108de3718b731fffb5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_corefunc#random&quot;&gt;random()&lt;/a&gt; function is obviously non-deterministic because it gives a different answer every time it is invoked. The answers from &lt;a href=&quot;lang_corefunc#changes&quot;&gt;changes()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#last_insert_rowid&quot;&gt;last_insert_rowid()&lt;/a&gt; depend on prior SQL statements, and so they are also non-deterministic. The &lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_version()&lt;/a&gt; function is mostly constant, but it can change when SQLite is upgraded, and so even though it always returns the same answer for any particular session, because it can change answers across sessions it is still considered non-deterministic.</source>
          <target state="translated">&lt;a href=&quot;lang_corefunc#random&quot;&gt;ランダム（） &lt;/a&gt;、それは別の答えにそれが呼び出されるたびに与えるので、機能は明らかに非決定的です。&lt;a href=&quot;lang_corefunc#changes&quot;&gt;changes（）&lt;/a&gt;と&lt;a href=&quot;lang_corefunc#last_insert_rowid&quot;&gt;last_insert_rowid（）&lt;/a&gt;からの回答は以前のSQLステートメントに依存しているため、これらも非決定的です。&lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_version（）&lt;/a&gt;関数は、ほとんど一定であるが、それは常に、特定のセッションのために同じ答えを返しても、それはそれはまだ非決定論的と考えられているセッション間で答えを変更することができますので、それは、そうでもSQLiteのがアップグレードされたときに変更する、とすることができます。</target>
        </trans-unit>
        <trans-unit id="201a260c8bdbe59035cb4cd8dc3341936a60ec2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_corefunc#sqlite_offset&quot;&gt;sqlite_offset(X)&lt;/a&gt; SQL function requires a new interface on the B-tree storage engine, a new opcode in the &lt;a href=&quot;opcode&quot;&gt;virtual machine&lt;/a&gt; that runs SQL statements, and a new conditional in a critical path of the code generator. To avoid that overhead in applications that do not need the utility of sqlite_offset(X), the function is disabled by default.</source>
          <target state="translated">&lt;a href=&quot;lang_corefunc#sqlite_offset&quot;&gt;sqlite_offset（X）&lt;/a&gt; SQL関数は、Bツリーストレージエンジンに新しいオペコードに新しいインターフェースが必要&lt;a href=&quot;opcode&quot;&gt;仮想マシン&lt;/a&gt; SQL文を実行し、コードジェネレータのクリティカルパスに新しい条件を。sqlite_offset（X）のユーティリティを必要としないアプリケーションでそのオーバーヘッドを回避するために、関数はデフォルトで無効になっています。</target>
        </trans-unit>
        <trans-unit id="5130992bbae98a73266f7f76541f0aac8e1ee306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_corefunc#substr&quot;&gt;substr()&lt;/a&gt; SQL function does not bother to measure the length its entire input string if it is only computing a prefix</source>
          <target state="translated">&lt;a href=&quot;lang_corefunc#substr&quot;&gt;SUBSTR（） &lt;/a&gt;、それが唯一の接頭辞を計算した場合のSQL関数は、長さにその入力文字列全体を測定するために、気にしません。</target>
        </trans-unit>
        <trans-unit id="051b877cf20f31f8d1edc5b8d94b799ecd70ba91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY&lt;/a&gt; of a rowid table (if there is one) is usually not the true primary key for the table, in the sense that it is not the unique key used by the underlying &lt;a href=&quot;fileformat2#btree&quot;&gt;B-tree&lt;/a&gt; storage engine. The exception to this rule is when the rowid table declares an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;. In the exception, the INTEGER PRIMARY KEY becomes an alias for the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">ROWIDテーブルの&lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY&lt;/a&gt;（存在する場合）は、基本的な&lt;a href=&quot;fileformat2#btree&quot;&gt;Bツリー&lt;/a&gt;ストレージエンジンで使用される一意のキーではないという意味で、通常、テーブルの実際のプライマリキーではありません。このルールの例外は、ROWIDテーブルが&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEYを&lt;/a&gt;宣言する場合です。例外では、INTEGER PRIMARY KEYが&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDの&lt;/a&gt;エイリアスになります。</target>
        </trans-unit>
        <trans-unit id="d236ba188ef88897dc53c50ffce983697148b3b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of a rowid table can be accessed (or changed) by reading or writing to any of the &quot;rowid&quot; or &quot;oid&quot; or &quot;_rowid_&quot; columns. Except, if there is a declared columns in the table that use those special names, then those names refer to the declared columns, not to the underlying &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt; ROWIDテーブルのは、読み取り又は「ROWID」または「OID」または「_ROWID_」列のいずれかに書き込むことによってアクセスする（または変更）することができます。ただし、これらの特別な名前を使用する宣言された列がテーブルにある場合、それらの名前は、基になる行&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ID&lt;/a&gt;ではなく、宣言された列を参照します。</target>
        </trans-unit>
        <trans-unit id="57ebcd163f26bc17678c31c9203482eaa22d5842" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of a table must be an integer. Attempt to set the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; to anything other than an integer (or a NULL which will be automatically converted into the next available integer rowid) results in an SQLITE_MISMATCH error.</source>
          <target state="translated">表の&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;は整数である必要があります。&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を整数（または次に使用可能な整数ROWIDに自動的に変換されるNULL）以外に設定しようとすると、SQLITE_MISMATCHエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="feca6ba206a41f2092893b9e83da76d7c569ae87" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW&lt;/a&gt; statement now accepts an optional list of column names following the view name.</source>
          <target state="translated">&lt;a href=&quot;lang_createview&quot;&gt;VIEWのCREATE&lt;/a&gt;文では、現在のビュー名以下のオプションのカラム名のリストを受け付けます。</target>
        </trans-unit>
        <trans-unit id="140e631b88f462024e846431476301a80f59bb76" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_datefunc&quot;&gt;Date And Time Functions&lt;/a&gt; are enhanced so that the current time (ex: julianday('now')) is always the same for multiple function invocations within the same &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; call.</source>
          <target state="translated">&lt;a href=&quot;lang_datefunc&quot;&gt;日付と時刻の関数は&lt;/a&gt;（「今」）ユリウス通日（EX）常に同じ内の複数の関数呼び出しのために同じである現在時刻がなるように強化され&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;の呼び出し。</target>
        </trans-unit>
        <trans-unit id="50e6d59e6b5b950615232d8af21bbe3ba88f948d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; SQL command is used to obtain a high-level description of the strategy or plan that SQLite uses to implement a specific SQL query. Most significantly, EXPLAIN QUERY PLAN reports on the way in which the query uses database indices. This document is a guide to understanding and interpreting the EXPLAIN QUERY PLAN output. Background information is available separately:</source>
          <target state="translated">&lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN PLAN QUERY&lt;/a&gt; SQLコマンドは、SQLiteのは、特定のSQLクエリを実装するために使用する戦略や計画のハイレベルの記述を取得するために使用されます。最も重要な点として、EXPLAIN QUERY PLANは、クエリがデータベースインデックスを使用する方法についてレポートします。このドキュメントは、EXPLAIN QUERY PLANの出力を理解して解釈するためのガイドです。背景情報は個別に入手できます。</target>
        </trans-unit>
        <trans-unit id="20275284a3bb298e3ed89b5acd684907f3305751" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN&lt;/a&gt; and &lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; prefixes to SQL statements only affect the behavior of the statement during &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;. That means that PRAGMA statements that take effect during &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; will behave the same way regardless of whether or not they are prefaced by &quot;EXPLAIN&quot;.</source>
          <target state="translated">SQLステートメントへの&lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN&lt;/a&gt;および&lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt;プレフィックスは、&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;中のステートメントの動作にのみ影響します。つまり、&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）の&lt;/a&gt;間に有効になるPRAGMAステートメントは、 &quot;EXPLAIN&quot;が前に付いているかどうかに関係なく、同じように動作します。</target>
        </trans-unit>
        <trans-unit id="65133dc98116af2c7f0912fa88b4b43954bbc4b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; operator</source>
          <target state="translated">&lt;a href=&quot;lang_expr#glob&quot;&gt;GLOBの&lt;/a&gt;オペレータ</target>
        </trans-unit>
        <trans-unit id="0fa44fcf9bdf1d542216cc05466871344f55fb9a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_expr#isisnot&quot;&gt;IS operator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;lang_expr#isisnot&quot;&gt;IS演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b92948d462015f78d114a35cb7f278e70f987a87" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_expr#isisnot&quot;&gt;IS operator&lt;/a&gt; is now able to drive indexes.</source>
          <target state="translated">&lt;a href=&quot;lang_expr#isisnot&quot;&gt;IS演算子は、&lt;/a&gt;今のインデックスを駆動することができます。</target>
        </trans-unit>
        <trans-unit id="41d7aaefd27d25ac767f490e47e6b7c9452f7e20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_indexedby&quot;&gt;INDEXED BY&lt;/a&gt; clause</source>
          <target state="translated">&lt;a href=&quot;lang_indexedby&quot;&gt;INDEXED BYの&lt;/a&gt;句</target>
        </trans-unit>
        <trans-unit id="2b3b6b4eb30c653aa6f7ff986fc3927d49da19df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; command only works if the transaction stack is empty, or in other words if there are no pending transactions. If the transaction stack is not empty when the &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; command is invoked, then the command fails with an error.</source>
          <target state="translated">&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;保留中のトランザクションが存在しない場合は、トランザクション・スタックが空、または他の言葉である場合、コマンドのみ動作します。&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;コマンドが呼び出されたときにトランザクションスタックが空でない場合、コマンドはエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="68024f72adbd8a0a422c4b54cc30c9ba1ec76d4a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; command commits all outstanding transactions and leaves the transaction stack empty.</source>
          <target state="translated">&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;コマンドはトランザクションがスタック空にするすべての未処理のトランザクションや葉をコミットします。</target>
        </trans-unit>
        <trans-unit id="6b3d11e09f03993abe204e129a5f26dcc598fb68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; command now succeeds even if there are pending queries. It returns &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; if there are pending incremental BLOB I/O requests.</source>
          <target state="translated">&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;コマンドは現在保留中のクエリがある場合でも成功します。保留中の増分BLOB I / O要求がある場合、&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSYを&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="502339818ec9310f1093ba4d9556feff42c6ac87" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; command without a TO clause rolls backs all transactions and leaves the transaction stack empty.</source>
          <target state="translated">&lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACKの&lt;/a&gt;すべてのトランザクションと葉がトランザクションがスタック空TO句ロールバックせずにコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="22ed8eeff156b9ac5c3272aebc736d20e9be8ea0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;, &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;, and &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; statements within triggers do not support the full syntax for &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;, &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;, and &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; statements. The following restrictions apply:</source>
          <target state="translated">&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;、&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;、および&lt;a href=&quot;lang_insert&quot;&gt;INSERTの&lt;/a&gt;トリガ内の文はのための完全な構文をサポートしていません&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;、&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;、および&lt;a href=&quot;lang_insert&quot;&gt;INSERTの&lt;/a&gt;ステートメントを。以下の制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="25fa7af4817ff50638a1d09b6077bfa20413eee0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command packs the database about 1% tighter.</source>
          <target state="translated">&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUMの&lt;/a&gt;コマンドは、1％タイトに関するデータベースをパックします。</target>
        </trans-unit>
        <trans-unit id="6f6f65ccce3c60bd3538bde45dbba0bdabdce834" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command preserves the setting of the &lt;a href=&quot;pragma#pragma_legacy_file_format&quot;&gt;legacy_file_format pragma&lt;/a&gt;. (Ticket #2804.)</source>
          <target state="translated">&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUMの&lt;/a&gt;コマンドは、設定の保存し&lt;a href=&quot;pragma#pragma_legacy_file_format&quot;&gt;legacy_file_formatプラグマを&lt;/a&gt;。（チケット＃2804）。</target>
        </trans-unit>
        <trans-unit id="47212a8707d0f0bd1679c6ba64f918cc5f5c6039" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command works by creating a temporary file and then rebuilding the entire database into that temporary file. Then the content of the temporary file is copied back into the original database file and the temporary file is deleted.</source>
          <target state="translated">&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUMの&lt;/a&gt;コマンドは、一時ファイルを作成し、その一時ファイルにデータベース全体を再構築することで動作します。次に、一時ファイルの内容が元のデータベースファイルにコピーされ、一時ファイルが削除されます。</target>
        </trans-unit>
        <trans-unit id="bdf2bbad9bfa5eb4a9865a13c14cd208bf3e40df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lang_with&quot;&gt;WITH&lt;/a&gt; clause must occur on the first SELECT of a &lt;a href=&quot;lang_select#compound&quot;&gt;compound SELECT&lt;/a&gt;. It cannot follow a &lt;a href=&quot;syntax/compound-operator&quot;&gt;compound-operator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lang_with&quot;&gt;WITH&lt;/a&gt;句は、最初のSELECTで発生しなければならない&lt;a href=&quot;lang_select#compound&quot;&gt;化合物SELECT&lt;/a&gt;。&lt;a href=&quot;syntax/compound-operator&quot;&gt;複合演算子を&lt;/a&gt;追跡することはできません。</target>
        </trans-unit>
        <trans-unit id="db6f4f9f7ee46543ffd0410e2806fc648ca23245" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lemon&quot;&gt;Lemon parser generator&lt;/a&gt; creates a faster parser.</source>
          <target state="translated">&lt;a href=&quot;lemon&quot;&gt;レモンのパーサジェネレータは、&lt;/a&gt;より高速なパーサを作成します。</target>
        </trans-unit>
        <trans-unit id="a0ba7e4dcf6a75ed4b1ebb47695358df4a104180" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;loadext&quot;&gt;loadable extensions&lt;/a&gt; documentation describes how to &lt;a href=&quot;loadext#build&quot;&gt;compile loadable extensions&lt;/a&gt; as shared libraries. The techniques described there work fine for the json1 module.</source>
          <target state="translated">&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能&lt;/a&gt;のドキュメントはする方法について説明し&lt;a href=&quot;loadext#build&quot;&gt;ロード可能な拡張モジュールのコンパイル&lt;/a&gt;共有ライブラリとしてを。そこで説明されている手法は、json1モジュールに対してうまく機能します。</target>
        </trans-unit>
        <trans-unit id="01edd329b33f240dcc5cfa34ddb1e15eb22f3ff1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;log&quot;&gt;sqlite3_log()&lt;/a&gt; interface writes a message into the &lt;a href=&quot;../errlog&quot;&gt;error log&lt;/a&gt; established by the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfiglog&quot;&gt;SQLITE_CONFIG_LOG&lt;/a&gt; option to &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt;. If logging is enabled, the zFormat string and subsequent arguments are used with &lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt; to generate the final output string.</source>
          <target state="translated">&lt;a href=&quot;log&quot;&gt;sqlite3_log（）&lt;/a&gt;インタフェースは、にメッセージを書き込み&lt;a href=&quot;../errlog&quot;&gt;、エラー・ログ&lt;/a&gt;によって確立された&lt;a href=&quot;c_config_covering_index_scan#sqliteconfiglog&quot;&gt;SQLITE_CONFIG_LOG&lt;/a&gt;にオプション&lt;a href=&quot;config&quot;&gt;sqlite3_config（） &lt;/a&gt;。ログが有効になっている場合、zFormat文字列と後続の引数が&lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf（）で&lt;/a&gt;使用され、最終的な出力文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="81d8579383d45cb472d3a4833d1ee2e13e4c3902" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;malloc#lookaside&quot;&gt;lookaside memory allocator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;malloc#lookaside&quot;&gt;ルックアサイドメモリアロケータ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6272b90c1e46ccb51f6a211fb05dce0a9b88e6f6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;malloc#pagecache&quot;&gt;pagecache memory allocator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;malloc#pagecache&quot;&gt;ページキャッシュメモリアロケータ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2033aab7c928977e8c566f6458591e6094a394bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; routine returns the number of bytes of memory currently outstanding (malloced but not freed). The &lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; routine returns the maximum value of &lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; since the high-water mark was last reset. The values returned by &lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; and &lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; include any overhead added by SQLite in its implementation of &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt;, but not overhead added by the any underlying system library routines that &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; may call.</source>
          <target state="translated">&lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;リターンするメモリのバイト数は、現在未解決（mallocさが、解放されません）。&lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_highwater（）&lt;/a&gt;リターンの最大値&lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;ハイウォーターマークが最後にリセットされたからです。返される値&lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_used（）&lt;/a&gt;と&lt;a href=&quot;memory_highwater&quot;&gt;sqlite3_memory_highwater（）は&lt;/a&gt;、任意のオーバーヘッドの実装でのSQLiteによって追加挙げ&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;が、オーバーヘッドこと任意の基礎となるシステム・ライブラリ・ルーチンによって追加されない&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="54555d04b0b2355ea81551452a102d3dd5b8966e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mutex_alloc&quot;&gt;sqlite3_mutex_alloc()&lt;/a&gt; interface takes a single argument which is one of these integer constants.</source>
          <target state="translated">&lt;a href=&quot;mutex_alloc&quot;&gt;sqlite3_mutex_alloc（）&lt;/a&gt;インターフェースは、これらの整数の定数のいずれかである単一の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="69f893d6e4ed45be57e659539245cae9d67b977d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode&quot;&gt;bytecode&lt;/a&gt; program created by the code generator is run by a virtual machine.</source>
          <target state="translated">&lt;a href=&quot;opcode&quot;&gt;バイトコード&lt;/a&gt;コードジェネレータによって作成されたプログラムは、仮想マシンで実行されます。</target>
        </trans-unit>
        <trans-unit id="6f82427ae6db3af3b60ee7889919a09e27176099" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Delete&quot;&gt;Delete&lt;/a&gt; does the work of this loop; it pops an integer key off the stack (placed there by the preceding ListRead) and deletes the record of cursor P1 that has that key. Because P2 is true, the row change counter is incremented.</source>
          <target state="translated">&lt;a href=&quot;opcode#Delete&quot;&gt;削除は、&lt;/a&gt;このループの作業を行います。スタックから整数キーをポップし（前のListReadによってそこに配置されました）、そのキーを持つカーソルP1のレコードを削除します。P2がtrueであるため、行変更カウンターが増分されます。</target>
        </trans-unit>
        <trans-unit id="49cbb2109ea61f54a2e0e215073c0e8f4e901d2e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Ge&quot;&gt;Ge&lt;/a&gt; operator compares the top two elements on the stack, pops them, and then branches based on the result of the comparison. If the second element is &amp;gt;= the top element, then jump to address P2 (the Next instruction at the end of the loop). Because P1 is true, if either operand is NULL (and thus the result is NULL) then take the jump. If we don't jump, just advance to the next instruction.</source>
          <target state="translated">&lt;a href=&quot;opcode#Ge&quot;&gt;Ge&lt;/a&gt;オペレータは、スタックの一番上の2つの要素を比較し、それらをポップして、比較の結果に基づいて分岐します。2番目の要素が最上位の要素である場合は、アドレスP2（ループの最後にある次の命令）にジャンプします。P1がtrueであるため、いずれかのオペランドがNULLである（したがって結果がNULLである）場合、ジャンプします。ジャンプしない場合は、次の指示に進んでください。</target>
        </trans-unit>
        <trans-unit id="04783e2a879da777c9928b0ae80c86689e955e7d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Gosub&quot;&gt;Gosub&lt;/a&gt; opcode stores the current program counter into register P1 then jumps to address P2. The &lt;a href=&quot;opcode#Return&quot;&gt;Return&lt;/a&gt; opcode jumps to address P1+1. Hence, every subroutine is associated with two integers: the address of the entry point in the subroutine and the register number that is used to hold the return address.</source>
          <target state="translated">&lt;a href=&quot;opcode#Gosub&quot;&gt;GOSUBの&lt;/a&gt;オペコードを格納するレジスタP1に現在のプログラムカウンタは、次にアドレスP2にジャンプ。&lt;a href=&quot;opcode#Return&quot;&gt;戻り&lt;/a&gt;オペコードは、アドレスP1 + 1にジャンプします。したがって、すべてのサブルーチンは2つの整数に関連付けられています。それは、サブルーチン内のエントリー・ポイントのアドレスと、戻りアドレスを保持するために使用されるレジスター番号です。</target>
        </trans-unit>
        <trans-unit id="cc4a6e0d461e428b5be9265ddcc51214a7a17162" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Goto&quot;&gt;Goto&lt;/a&gt; jumps back to the beginning of the loop. This is the end of the loop.</source>
          <target state="translated">&lt;a href=&quot;opcode#Goto&quot;&gt;後藤は、&lt;/a&gt;ループバックの先頭にジャンプします。これでループの終わりです。</target>
        </trans-unit>
        <trans-unit id="36b42b8529eed45ca4088e7606ce454bf579c098" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#ListRead&quot;&gt;ListRead&lt;/a&gt; instruction reads an element from the temporary storage list and pushes it onto the stack. If this was successful, it continues to the next instruction. If this fails because the list is empty, it branches to P2, which is the instruction just after the loop. Afterwards the stack looks like:</source>
          <target state="translated">&lt;a href=&quot;opcode#ListRead&quot;&gt;ListReadの&lt;/a&gt;命令は、一時保存リストから要素を読み込み、スタックにプッシュします。これが成功した場合、次の命令に進みます。リストが空であるためにこれが失敗した場合は、ループの直後の命令であるP2に分岐します。その後、スタックは次のようになります。</target>
        </trans-unit>
        <trans-unit id="4879ed312fe574048c51b739d2a2e0c47c1cf28a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#ListReset&quot;&gt;ListReset&lt;/a&gt; instruction empties the temporary storage list. This list is emptied automatically when the VDBE program terminates, so it isn't necessary in this case. The Close instruction closes the cursor P1. Again, this is done by the VDBE engine when it is finished running this program. The Commit ends the current transaction successfully, and causes all changes that occurred in this transaction to be saved to the database. The final Halt is also unnecessary, since it is added to every VDBE program when it is prepared to run.</source>
          <target state="translated">&lt;a href=&quot;opcode#ListReset&quot;&gt;ListResetの&lt;/a&gt;命令は、一時保存リストを空にします。このリストはVDBEプログラムの終了時に自動的に空になるため、この場合は不要です。Close命令は、カーソルP1を閉じます。繰り返しますが、これは、このプログラムの実行が終了したときにVDBEエンジンによって実行されます。コミットにより現在のトランザクションが正常に終了し、このトランザクションで発生したすべての変更がデータベースに保存されます。最後の停止は、実行の準備ができたときにすべてのVDBEプログラムに追加されるため、不要です。</target>
        </trans-unit>
        <trans-unit id="50c0b593163bf5647baef877e0e92b5b46f19553" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#ListRewind&quot;&gt;ListRewind&lt;/a&gt; instruction rewinds the temporary storage list to the beginning. This prepares it for use in the second loop.</source>
          <target state="translated">&lt;a href=&quot;opcode#ListRewind&quot;&gt;ListRewindの&lt;/a&gt;命令が先頭に一時保存リストを巻き戻し。これにより、2番目のループで使用できるように準備されます。</target>
        </trans-unit>
        <trans-unit id="d684585d2e3d5fa36d7d1264c013ad5c814a5d30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt; opcode is only valid following an &lt;a href=&quot;opcode#SeekGT&quot;&gt;SeekGT&lt;/a&gt;, &lt;a href=&quot;opcode#SeekGE&quot;&gt;SeekGE&lt;/a&gt;, or &lt;a href=&quot;opcode#Rewind&quot;&gt;Rewind&lt;/a&gt; opcode used to position the cursor. &lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt; is not allowed to follow &lt;a href=&quot;opcode#SeekLT&quot;&gt;SeekLT&lt;/a&gt;, &lt;a href=&quot;opcode#SeekLE&quot;&gt;SeekLE&lt;/a&gt;, or &lt;a href=&quot;opcode#Last&quot;&gt;Last&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;opcode#Next&quot;&gt;次&lt;/a&gt;のオペコードは、次のみ有効である&lt;a href=&quot;opcode#SeekGT&quot;&gt;SeekGT&lt;/a&gt;、&lt;a href=&quot;opcode#SeekGE&quot;&gt;SeekGE&lt;/a&gt;、又は&lt;a href=&quot;opcode#Rewind&quot;&gt;巻き戻し&lt;/a&gt;カーソルを位置決めするために使用オペコード。&lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt;は&lt;a href=&quot;opcode#SeekLT&quot;&gt;SeekLT&lt;/a&gt;、&lt;a href=&quot;opcode#SeekLE&quot;&gt;SeekLE&lt;/a&gt;、&lt;a href=&quot;opcode#Last&quot;&gt;Lastの&lt;/a&gt;後に続くことはできません。</target>
        </trans-unit>
        <trans-unit id="4bec0991ede69ff0f5b657d6da948ae6ccecdc12" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt; instruction pops the top stack element and uses it as an integer key. If a record with that key does not exist in table P1, then jump to P2. If a record does exist, then fall through to the next instruction. In this case P2 takes us to the Goto at the end of the loop, which jumps back to the ListRead at the beginning. This could have been coded to have P2 be 16, the ListRead at the start of the loop, but the SQLite parser which generated this code didn't make that optimization.</source>
          <target state="translated">&lt;a href=&quot;opcode#NotExists&quot;&gt;NotExistsの&lt;/a&gt;命令は、トップスタック要素をポップし、整数キーとしてそれを使用します。そのキーを持つレコードがテーブルP1に存在しない場合は、P2にジャンプします。レコードが存在する場合は、次の命令に進みます。この場合、P2はループの最後でGotoに移動し、ループの最初でListReadにジャンプします。これは、ループの開始時にP2が16、ListReadになるようにコード化できますが、このコードを生成したSQLiteパーサーはその最適化を行いませんでした。</target>
        </trans-unit>
        <trans-unit id="1d15a242c00ad338da3936112e42488d3db597cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt; opcode performs the same operation, but with &lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt; the P3 register must be guaranteed to contain an integer value. With this opcode, register P3 might not contain an integer.</source>
          <target state="translated">&lt;a href=&quot;opcode#NotExists&quot;&gt;NotExistsは&lt;/a&gt;同様の動作を行うのオペコードが、で&lt;a href=&quot;opcode#NotExists&quot;&gt;NotExists&lt;/a&gt; P3レジスタは、整数値を含むことが保証されなければなりません。このオペコードでは、レジスタP3に整数が含まれていない場合があります。</target>
        </trans-unit>
        <trans-unit id="2ea51892f8acadad179e6f2fd2f42516a5edf44d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt; opcode performs the same operation on index btrees (with arbitrary multi-value keys).</source>
          <target state="translated">&lt;a href=&quot;opcode#NotFound&quot;&gt;NOTFOUNDの&lt;/a&gt;オペコードを行う（任意多値キーで）インデックスのbtreeに同じ動作を行います。</target>
        </trans-unit>
        <trans-unit id="066073395b0144e2fa69bed2cb062af29a031388" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Prev&quot;&gt;Prev&lt;/a&gt; opcode is only valid following an &lt;a href=&quot;opcode#SeekLT&quot;&gt;SeekLT&lt;/a&gt;, &lt;a href=&quot;opcode#SeekLE&quot;&gt;SeekLE&lt;/a&gt;, or &lt;a href=&quot;opcode#Last&quot;&gt;Last&lt;/a&gt; opcode used to position the cursor. &lt;a href=&quot;opcode#Prev&quot;&gt;Prev&lt;/a&gt; is not allowed to follow &lt;a href=&quot;opcode#SeekGT&quot;&gt;SeekGT&lt;/a&gt;, &lt;a href=&quot;opcode#SeekGE&quot;&gt;SeekGE&lt;/a&gt;, or &lt;a href=&quot;opcode#Rewind&quot;&gt;Rewind&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;opcode#Prev&quot;&gt;前の&lt;/a&gt;オペコードは、以下のみ有効です&lt;a href=&quot;opcode#SeekLT&quot;&gt;SeekLT&lt;/a&gt;、&lt;a href=&quot;opcode#SeekLE&quot;&gt;SeekLE&lt;/a&gt;、または&lt;a href=&quot;opcode#Last&quot;&gt;最後&lt;/a&gt;にカーソルを配置するために使用されるオペコード。&lt;a href=&quot;opcode#Prev&quot;&gt;前のページには&lt;/a&gt;従うことが許可されていない&lt;a href=&quot;opcode#SeekGT&quot;&gt;SeekGT&lt;/a&gt;、&lt;a href=&quot;opcode#SeekGE&quot;&gt;SeekGE&lt;/a&gt;、または&lt;a href=&quot;opcode#Rewind&quot;&gt;巻き戻しを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7073f193fc700364fff65aec536137cac5241f6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Recno&quot;&gt;Recno&lt;/a&gt; instruction pushes onto the stack an integer which is the first 4 bytes of the key to the current entry in a sequential scan of the table pointed to by cursor P1. The &lt;a href=&quot;opcode#ListWrite&quot;&gt;ListWrite&lt;/a&gt; instruction writes the integer on the top of the stack into a temporary storage list and pops the top element. This is the important work of this loop, to store the keys of the records to be deleted so we can delete them in the second loop. After this ListWrite instruction the stack is empty again.</source>
          <target state="translated">&lt;a href=&quot;opcode#Recno&quot;&gt;使うrecno&lt;/a&gt;スタックカーソルP1によって指さテーブルの順次スキャンの現在のエントリへのキーの最初の4バイト整数への命令押します。&lt;a href=&quot;opcode#ListWrite&quot;&gt;ListWriteの&lt;/a&gt;命令は、一時保存リストにスタックの最上位に整数を書き込み、トップ要素をポップ。これは、削除するレコードのキーを格納して2番目のループで削除できるようにする、このループの重要な作業です。このListWrite命令の後、スタックは再び空になります。</target>
        </trans-unit>
        <trans-unit id="ee3dc9b6c04eaf92dc7b817ad9cb3a0c30096f49" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdx&lt;/a&gt; opcode may only be used with P5==0 or P5==OPFLAG_SEEKEQ and with P4 being a P4_KEYINFO object. Furthermore, the P3 value must be the same as every other &lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdx&lt;/a&gt; or &lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt; for the same cursor number.</source>
          <target state="translated">&lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdxの&lt;/a&gt;オペコードは、P5 == 0又はP5 == OPFLAG_SEEKEQとし、P4がP4_KEYINFOオブジェクトであると共に使用することができます。さらに、P3値は、同じカーソル番号に対する他のすべての&lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdx&lt;/a&gt;または&lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt;と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="f1b24140a6cba2cd01303fe562cef908cbaa8ca3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdx&lt;/a&gt; opcode works like &lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt; except that it first checks to see if the cursor on P1 is already open on the same b-tree and if it is this opcode becomes a no-op. In other words, if the cursor is already open, do not reopen it.</source>
          <target state="translated">&lt;a href=&quot;opcode#ReopenIdx&quot;&gt;ReopenIdxの&lt;/a&gt;オペコードは、同じように動作し&lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt; P1上のカーソルが同じBツリーにすでに開いている場合、それは、このオペコードはノーオペレーションとなっていないかどうかを確認するには、それを最初にチェックことを除いて。つまり、カーソルがすでに開いている場合は、再度開かないでください。</target>
        </trans-unit>
        <trans-unit id="02cd685549e7ced789f6d67a2427e140b8a8620d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#ResultRow&quot;&gt;ResultRow&lt;/a&gt; opcode causes the bytecode engine to pause and the corresponding &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; call to return &lt;a href=&quot;rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;. Before invoking &lt;a href=&quot;opcode#ResultRow&quot;&gt;ResultRow&lt;/a&gt;, the bytecoded program will have loaded the results for a single row of a query into a series of registers. C-language APIs such as &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column_int()&lt;/a&gt; or &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column_text()&lt;/a&gt; extract the query results from those registers. The bytecode engine resumes with the next instruction after the &lt;a href=&quot;opcode#ResultRow&quot;&gt;ResultRow&lt;/a&gt; on the next call to &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;opcode#ResultRow&quot;&gt;ResultRowの&lt;/a&gt;オペコードは、休止と対応するバイトコードエンジンを引き起こす&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;戻りの呼び出し&lt;a href=&quot;rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;。&lt;a href=&quot;opcode#ResultRow&quot;&gt;ResultRow&lt;/a&gt;を呼び出す前に、バイトコードプログラムは、クエリの単一行の結果を一連のレジスタにロードします。&lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column_int（）&lt;/a&gt;や&lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column_text（）&lt;/a&gt;などのC言語APIは、これらのレジスタからクエリ結果を抽出します。バイトコードエンジンは、&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;への次の呼び出しで&lt;a href=&quot;opcode#ResultRow&quot;&gt;ResultRowの&lt;/a&gt;後に次の命令で再開します。</target>
        </trans-unit>
        <trans-unit id="f2441406e5ac75bb5fd7cf1919c714faf20d6ab5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Rewind&quot;&gt;Rewind&lt;/a&gt; instruction initializes a loop that iterates over the &quot;examp&quot; table. It rewinds the cursor P1 to the first entry in its table. This is required by the Column and Next instructions, which use the cursor to iterate through the table. If the table is empty, then jump to P2 (10), which is the instruction just past the loop. If the table is not empty, fall through to the following instruction at 6, which is the beginning of the loop body.</source>
          <target state="translated">&lt;a href=&quot;opcode#Rewind&quot;&gt;巻き戻しの&lt;/a&gt;指示は「examp」テーブルを反復そのループを初期化します。カーソルP1をそのテーブルの最初のエントリに巻き戻します。これは、カーソルを使用してテーブルを反復処理するColumnおよびNext命令で必要です。テーブルが空の場合は、ループの直後の命令であるP2（10）にジャンプします。テーブルが空でない場合は、ループ本体の開始である6の次の命令に進んでください。</target>
        </trans-unit>
        <trans-unit id="2de14c27a6545978f9bf6b60627e8141b94b7884" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#SeekRowid&quot;&gt;SeekRowid&lt;/a&gt; opcode performs the same operation but also allows the P3 register to contain a non-integer value, in which case the jump is always taken. This opcode requires that P3 always contain an integer.</source>
          <target state="translated">&lt;a href=&quot;opcode#SeekRowid&quot;&gt;SeekRowid&lt;/a&gt;オペコード実行同じ動作がなく、P3レジスタはジャンプが常に取られている場合には非整数値を含むことができます。このオペコードでは、P3に常に整数が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="4b451f841c2d23194bca9774c72889abafce37d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;opcode#Yield&quot;&gt;Yield&lt;/a&gt; opcode swaps the value of the program counter with the integer value in register P1. This opcode is used to implement coroutines. Coroutines are often used to implement subqueries from which content is pulled on an as-needed basis.</source>
          <target state="translated">&lt;a href=&quot;opcode#Yield&quot;&gt;収量&lt;/a&gt;オペコードレジスタP1の整数値とプログラムカウンタの値をスワップ。このオペコードは、コルーチンを実装するために使用されます。コルーチンは、コンテンツが必要に応じてプルされるサブクエリを実装するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="2bf8499185976fd90927b75af83cad8ae29ef209" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;optoverview#autoindex&quot;&gt;automatic indexing&lt;/a&gt; optimization is now capable of generating a &lt;a href=&quot;partialindex&quot;&gt;partial index&lt;/a&gt; if that is appropriate.</source>
          <target state="translated">&lt;a href=&quot;optoverview#autoindex&quot;&gt;自動インデックス&lt;/a&gt;最適化が今発生させることが可能である&lt;a href=&quot;partialindex&quot;&gt;部分インデックスを&lt;/a&gt;それが適切ですか。</target>
        </trans-unit>
        <trans-unit id="430bd4f8cb87deb1b045d791ee37f7bd1ef6a250" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;optoverview#or_opt&quot;&gt;OR optimization&lt;/a&gt; is allowed to proceed even if the OR expression has also been converted into an IN expression. Uses of the OR optimization are now also &lt;a href=&quot;eqp#or-opt&quot;&gt;more clearly shown&lt;/a&gt; in the &lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; output.</source>
          <target state="translated">&lt;a href=&quot;optoverview#or_opt&quot;&gt;OR最適化は、&lt;/a&gt; OR式中の他の表現に変換された場合でも、進行させます。OR最適化の使用も、&lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt;出力で&lt;a href=&quot;eqp#or-opt&quot;&gt;より明確に示さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="d9e2344b1a8686faee26008aaf6a744a538483c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_auto_vacuum&quot;&gt; PRAGMA auto_vacuum=incremental&lt;/a&gt; setting is now persistent.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_auto_vacuum&quot;&gt;プラグマauto_vacuumは=増分&lt;/a&gt;設定は今、永続的です。</target>
        </trans-unit>
        <trans-unit id="80d34339badbc8db002db2288680cbe2b4fee1a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_compile_options&quot;&gt;PRAGMA compile_options&lt;/a&gt; command now attempts to show the version number of the compiler that generated the library.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_compile_options&quot;&gt;プラグマcompile_optionsは&lt;/a&gt;今のライブラリを生成し、コンパイラのバージョン番号を表示しようとする試みを命じます。</target>
        </trans-unit>
        <trans-unit id="e347c28fc2dc6a091d91c4397055e68e6edfd76f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_data_store_directory&quot;&gt;data_store_directory pragma&lt;/a&gt; may modify this variable and cause it to point to memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;. Furthermore, the &lt;a href=&quot;pragma#pragma_data_store_directory&quot;&gt;data_store_directory pragma&lt;/a&gt; always assumes that any string that this variable points to is held in memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt; and the pragma may attempt to free that memory using &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free&lt;/a&gt;. Hence, if this variable is modified directly, either it should be made NULL or made to point to memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt; or else the use of the &lt;a href=&quot;pragma#pragma_data_store_directory&quot;&gt;data_store_directory pragma&lt;/a&gt; should be avoided.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_data_store_directory&quot;&gt;data_store_directoryプラグマは&lt;/a&gt;、この変数を変更してから取得したメモリを指すように、それを引き起こす可能性があり&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;。さらに、&lt;a href=&quot;pragma#pragma_data_store_directory&quot;&gt;data_store_directoryプラグマは&lt;/a&gt;常に、この変数が指すすべての文字列が&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリに保持されていると想定し、プラグマは&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free&lt;/a&gt;を使用してそのメモリを解放しようとする可能性があります。したがって、この変数を直接変更する場合は、NULLにするか、&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリを指すようにするか、&lt;a href=&quot;pragma#pragma_data_store_directory&quot;&gt;data_store_directoryプラグマの&lt;/a&gt;使用を避けます。</target>
        </trans-unit>
        <trans-unit id="dace9501e55329de3c436aaaf6d76500923f6803" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_defer_foreign_keys&quot;&gt;PRAGMA defer_foreign_keys=ON&lt;/a&gt; statement now also disables &lt;a href=&quot;foreignkeys#fk_actions&quot;&gt;RESTRICT actions&lt;/a&gt; on foreign key.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_defer_foreign_keys&quot;&gt;ONプラグマdefer_foreign_keys =&lt;/a&gt;文では、今も無効は&lt;a href=&quot;foreignkeys#fk_actions&quot;&gt;アクションRESTRICT&lt;/a&gt;外部キー上を。</target>
        </trans-unit>
        <trans-unit id="182946c7ddef87f825c408a1e9bcb94b2aebed4e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_defer_foreign_keys&quot;&gt;defer_foreign_keys pragma&lt;/a&gt; can be used to temporarily change all foreign key constraints to deferred regardless of how they are declared.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_defer_foreign_keys&quot;&gt;defer_foreign_keysプラグマは、&lt;/a&gt;一時的に延期にかかわらず、それらが宣言されているかのにすべての外部キー制約を変更するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="c8f76b3a27760e9d216beb8e378b627c5a5752f2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_function_list&quot;&gt;PRAGMA function_list&lt;/a&gt;, &lt;a href=&quot;pragma#pragma_module_list&quot;&gt;PRAGMA module_list&lt;/a&gt;, and &lt;a href=&quot;pragma#pragma_pragma_list&quot;&gt;PRAGMA pragma_list&lt;/a&gt; commands are now enabled in all builds by default. Disable them using &lt;a href=&quot;compile#omit_introspection_pragmas&quot;&gt;-DSQLITE_OMIT_INTROSPECTION_PRAGMAS&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_function_list&quot;&gt;プラグマfunction_list&lt;/a&gt;、&lt;a href=&quot;pragma#pragma_module_list&quot;&gt;プラグマmodule_list&lt;/a&gt;、および&lt;a href=&quot;pragma#pragma_pragma_list&quot;&gt;プラグマpragma_listの&lt;/a&gt;すべてがデフォルトでビルドでコマンドが有効になります。&lt;a href=&quot;compile#omit_introspection_pragmas&quot;&gt;-DSQLITE_OMIT_INTROSPECTION_PRAGMAS&lt;/a&gt;を使用してそれらを無効にします。</target>
        </trans-unit>
        <trans-unit id="530eb5492fa66c41d47c216aab5658b932f1fde0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_index_info&quot;&gt;index_info&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_index_xinfo&quot;&gt;index_xinfo&lt;/a&gt; pragmas are enhanced to provide information about the on-disk representation of &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_index_info&quot;&gt;index_info&lt;/a&gt;と&lt;a href=&quot;pragma#pragma_index_xinfo&quot;&gt;index_xinfo&lt;/a&gt;プラグマは、のディスク上の表現についての情報を提供するように拡張されている&lt;a href=&quot;withoutrowid&quot;&gt;ROWIDのWITHOUT&lt;/a&gt;テーブルを。</target>
        </trans-unit>
        <trans-unit id="e422cf4cf15df880c393dd24dbfb049b1fcebe08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;integrity_check pragma&lt;/a&gt; is enhanced to detect out-of-order rowids.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;integrity_checkプラグマは、&lt;/a&gt;アウト・オブ・オーダーのROWIDを検出するように強化されます。</target>
        </trans-unit>
        <trans-unit id="2e10d900e5bf7e69cd4dd309e31da996954ece3c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;PRAGMA journal_mode&lt;/a&gt; is not OFF, MEMORY, or WAL</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;プラグマjournal_modeは&lt;/a&gt; OFF、MEMORY、またはWALではありません</target>
        </trans-unit>
        <trans-unit id="c602efe807a207ac9abab9847aa84a66f50dd768" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;PRAGMA journal_mode=OFF&lt;/a&gt; statement.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;プラグマjournal_mode = OFFの&lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="49dd3e21f049f6bfedb0b7b5b1043722f3e1e37c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table&lt;/a&gt; setting is enabled prior to invoking this method, and the value for legacy_alter_table is restored after this method finishes. This is necessary for the correct operation of virtual tables that make use of &lt;a href=&quot;vtab#xshadowname&quot;&gt;shadow tables&lt;/a&gt; where the shadow tables must be renamed to match the new virtual table name. If the legacy_alter_format is off, then the xConnect method will be invoked for the virtual table every time the xRename method tries to change the name of the shadow table.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table&lt;/a&gt;設定は、このメソッドを呼び出す前にイネーブルされ、そしてlegacy_alter_tableの値は、この方法が終了した後に復元されます。これは、使用作る仮想テーブルが正しく動作するために必要である&lt;a href=&quot;vtab#xshadowname&quot;&gt;シャドウテーブル&lt;/a&gt;シャドウテーブルは、新しい仮想テーブル名と一致する名前を変更する必要があります。legacy_alter_formatがオフの場合、xRenameメソッドがシャドウテーブルの名前を変更しようとするたびに、仮想テーブルに対してxConnectメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="eb34969d518c763e5a52bf4853965875f5d7c504" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_max_page_count&quot;&gt; max_page_count PRAGMA&lt;/a&gt; can be used to raise or lower this limit at run-time.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_max_page_count&quot;&gt;max_page_countプラグマは&lt;/a&gt;上げたり、実行時にこの制限を下げるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ed5ae39d1285e1f44b4d8e91bc72231ec08350d0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_mmap_size&quot;&gt;PRAGMA mmap_size&lt;/a&gt; statement will never increase the amount of address space used for memory-mapped I/O above the hard limit set by the &lt;a href=&quot;compile#max_mmap_size&quot;&gt;SQLITE_MAX_MMAP_SIZE&lt;/a&gt; compile-time option, nor the hard limit set start-time by the second argument to sqlite3_config(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_mmap_size&quot;&gt;プラグマmmap_sizeの&lt;/a&gt;文は、ハードリミットセットの上にメモリマップドI / Oのために使用されるアドレス空間の量増やすことは決してありません&lt;a href=&quot;compile#max_mmap_size&quot;&gt;SQLITE_MAX_MMAP_SIZE&lt;/a&gt; sqlite3_configの二番目の引数（でコンパイル時のオプション、またハードリミットセット開始時&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="3bccc6c555afb6a2715bad46795ba129af0dfe49" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA optimize&lt;/a&gt; command was first introduced with SQLite 3.18.0 (2017-03-28) and is a no-op for all prior releases of SQLite.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_optimize&quot;&gt;プラグマ最適化&lt;/a&gt;コマンドは、最初のSQLite 3.18.0（2017年3月28日）で導入し、SQLiteのすべての以前のリリースのために何もしませんました。</target>
        </trans-unit>
        <trans-unit id="ce8494947b4ce168119d270366337d52ae940b6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA optimize&lt;/a&gt; command will automatically run ANALYZE on individual tables on an as-needed basis. The recommended practice is for applications to invoke the &lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA optimize&lt;/a&gt; statement just before closing each database connection.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMAの最適化&lt;/a&gt;コマンドは、自動的に、必要に応じて個々のテーブルに対してANALYZEを実行します。推奨される方法は、アプリケーションが各データベース接続を閉じる直前に&lt;a href=&quot;pragma#pragma_optimize&quot;&gt;PRAGMA最適化&lt;/a&gt;ステートメントを呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="5fb4e7b95d0d162ecc58614e1af3f3f6380ba85b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous&lt;/a&gt; setting is not OFF</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA同期&lt;/a&gt;設定がOFFでありません</target>
        </trans-unit>
        <trans-unit id="7b30b153f5bd150efb6f72a306c286fdddb45c5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt; has an integer value which also influences the decision of where to store temporary files. The values of the temp_store pragma have the following meanings:</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマは&lt;/a&gt;また、一時ファイルを格納する場所の決定に影響を与える整数値を持っています。temp_storeプラグマの値には、次の意味があります。</target>
        </trans-unit>
        <trans-unit id="f4fb45c2bb944888554bf90c8cb9a47bf3f2a979" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt; may modify this variable and cause it to point to memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;. Furthermore, the &lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt; always assumes that any string that this variable points to is held in memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt; and the pragma may attempt to free that memory using &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free&lt;/a&gt;. Hence, if this variable is modified directly, either it should be made NULL or made to point to memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt; or else the use of the &lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt; should be avoided. Except when requested by the &lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directory pragma&lt;/a&gt;, SQLite does not free the memory that sqlite3_temp_directory points to. If the application wants that memory to be freed, it must do so itself, taking care to only do so after all &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; objects have been destroyed.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマは&lt;/a&gt;、この変数を変更してから取得したメモリを指すように、それを引き起こす可能性があり&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;。さらに、&lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマは&lt;/a&gt;常に、この変数が指すすべての文字列が&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリに保持されていると想定し、プラグマは&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free&lt;/a&gt;を使用してそのメモリを解放しようとする可能性があります。したがって、この変数を直接変更する場合は、NULLにするか、&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc&lt;/a&gt;から取得したメモリを指すようにするか、&lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマの&lt;/a&gt;使用を避けます。&lt;a href=&quot;pragma#pragma_temp_store_directory&quot;&gt;temp_store_directoryプラグマ&lt;/a&gt;によって要求された場合を除く、SQLiteはsqlite3_temp_directoryが指すメモリを解放しません。アプリケーションがそのメモリを解放したい場合は、それ自体で解放する必要があります。すべての&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続&lt;/a&gt;オブジェクトが破棄された後にのみ解放するように注意してください。</target>
        </trans-unit>
        <trans-unit id="b7aff6f6a70787230cfdaa84381a4df9ff6088c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_version&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_schema_version&quot;&gt;schema_version&lt;/a&gt; pragmas correctly set their column names in the result set</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_user_version&quot;&gt;user_version&lt;/a&gt;と&lt;a href=&quot;pragma#pragma_schema_version&quot;&gt;schema_version&lt;/a&gt;プラグマは正しく結果セットでその列名を設定します</target>
        </trans-unit>
        <trans-unit id="e69bec34ec00cc126a20d5db14b73449e907cdd5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_wal_autocheckpoint&quot;&gt;wal_autocheckpoint pragma&lt;/a&gt; can be used to invoke this interface from SQL.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_wal_autocheckpoint&quot;&gt;wal_autocheckpointプラグマは、&lt;/a&gt; SQLからこのインターフェースを呼び出すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="dae72cb78cf83086aebe14bf09934eef63425e9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_wal_checkpoint&quot;&gt;PRAGMA wal_checkpoint&lt;/a&gt; command can be used to invoke this interface from SQL.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_wal_checkpoint&quot;&gt;プラグマwal_checkpointの&lt;/a&gt;コマンドは、SQLからこのインターフェースを呼び出すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="65a223c3d19041fa0b396d7e3f3b2e302f5459e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=ON&lt;/a&gt; statement.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;プラグマwritable_schemaはON =&lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="684edbb611cbfa5623d7b600fa16d86090b5ff1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_count(D)&lt;/a&gt; interface returns the number of columns in the row that is being inserted, updated, or deleted.</source>
          <target state="translated">&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_count（D）&lt;/a&gt;インターフェースは、挿入、更新、または削除されている列の列数を返します。</target>
        </trans-unit>
        <trans-unit id="ba2d35feb7b268110f32aac36c1f5d65016e60f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_depth(D)&lt;/a&gt; interface returns 0 if the preupdate callback was invoked as a result of a direct insert, update, or delete operation; or 1 for inserts, updates, or deletes invoked by top-level triggers; or 2 for changes resulting from triggers called by top-level triggers; and so forth.</source>
          <target state="translated">&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_depth（D）&lt;/a&gt;戻り0インターフェイス更新前コールバックは、直接挿入、更新、または削除操作の結果として呼び出された場合。または、トップレベルのトリガーによって呼び出される挿入、更新、または削除の場合は1。または2は、トップレベルのトリガーによって呼び出されたトリガーから生じる変更です。など。</target>
        </trans-unit>
        <trans-unit id="61dec61cb0cf17103a6811f56ba836ebb2ef7198" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; interface registers a callback function that is invoked prior to each &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt;, &lt;a href=&quot;../lang_update&quot;&gt;UPDATE&lt;/a&gt;, and &lt;a href=&quot;../lang_delete&quot;&gt;DELETE&lt;/a&gt; operation on a database table. At most one preupdate hook may be registered at a time on a single &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt;; each call to &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; overrides the previous setting. The preupdate hook is disabled by invoking &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; with a NULL pointer as the second parameter. The third parameter to &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook()&lt;/a&gt; is passed through as the first parameter to callbacks.</source>
          <target state="translated">&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook（）&lt;/a&gt;インターフェース前各々に呼び出されるコールバック関数を登録する&lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt;、&lt;a href=&quot;../lang_update&quot;&gt;UPDATE&lt;/a&gt;、および&lt;a href=&quot;../lang_delete&quot;&gt;DELETE&lt;/a&gt;データベーステーブルの動作を制御します。単一の&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;で一度に登録できるpreupdateフックは1つだけです。&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook（）を&lt;/a&gt;呼び出すたびに、以前の設定が上書きされます。 preupdateフックは、2番目のパラメーターとしてNULLポインターを指定して&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook（）&lt;/a&gt;を呼び出すことにより無効になります。&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_hook（）&lt;/a&gt;の3番目のパラメーターは、最初のパラメーターとしてコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="8df93bf8497a2d78f6914976e1609ba432170056" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_new(D,N,P)&lt;/a&gt; interface writes into P a pointer to a &lt;a href=&quot;value&quot;&gt;protected sqlite3_value&lt;/a&gt; that contains the value of the Nth column of the table row after it is updated. The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined. This must only be used within SQLITE_INSERT and SQLITE_UPDATE preupdate callbacks; if it is used by an SQLITE_DELETE callback then the behavior is undefined. The &lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt; that P points to will be destroyed when the preupdate callback returns.</source>
          <target state="translated">&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_new（D、N、P）&lt;/a&gt;インタフェースPへのポインタ書き込み&lt;a href=&quot;value&quot;&gt;保護sqlite3_value&lt;/a&gt;それが更新された後、テーブルの行のN番目の列の値を含みます。 Nパラメータは0から列数よりも1少ない値でなければなりません。そうしないと、動作は定義されません。これは、SQLITE_INSERTおよびSQLITE_UPDATE事前更新コールバック内でのみ使用する必要があります。 SQLITE_DELETEコールバックによって使用される場合、動作は未定義です。&lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt;更新前コールバックリターンPポイントが破壊されるすること。</target>
        </trans-unit>
        <trans-unit id="aeb8933cda6d990d1669eb3665d8053606aee0ba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_old()&lt;/a&gt;, &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_new()&lt;/a&gt;, &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_count()&lt;/a&gt;, and &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_depth()&lt;/a&gt; interfaces provide additional information about a preupdate event. These routines may only be called from within a preupdate callback. Invoking any of these routines from outside of a preupdate callback or with a &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior.</source>
          <target state="translated">&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_old（） &lt;/a&gt;、&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_new（） &lt;/a&gt;、&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_count（） &lt;/a&gt;、及び&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_depth（）&lt;/a&gt;インターフェースは、更新前のイベントに関する追加情報を提供します。これらのルーチンは、更新前のコールバック内からのみ呼び出すことができます。 preupdateコールバックの外部から、またはpreupdateコールバックに提供されたものとは異なる&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;ポインターを使用してこれらのルーチンを呼び出すと、未定義でおそらく望ましくない動作が発生します。</target>
        </trans-unit>
        <trans-unit id="dd30234761e0c7ea9f1053536a7bfab89c37bb25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_old(D,N,P)&lt;/a&gt; interface writes into P a pointer to a &lt;a href=&quot;value&quot;&gt;protected sqlite3_value&lt;/a&gt; that contains the value of the Nth column of the table row before it is updated. The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined. This must only be used within SQLITE_UPDATE and SQLITE_DELETE preupdate callbacks; if it is used by an SQLITE_INSERT callback then the behavior is undefined. The &lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt; that P points to will be destroyed when the preupdate callback returns.</source>
          <target state="translated">&lt;a href=&quot;preupdate_count&quot;&gt;sqlite3_preupdate_old（D、N、P）&lt;/a&gt;インターフェースはPへのポインタ書き込み&lt;a href=&quot;value&quot;&gt;保護sqlite3_value&lt;/a&gt;それが更新される前に、テーブルの行のN番目の列の値を含みます。Nパラメータは0から列数よりも1少ない値でなければなりません。そうしないと、動作は定義されません。これは、SQLITE_UPDATEおよびSQLITE_DELETE事前更新コールバック内でのみ使用する必要があります。SQLITE_INSERTコールバックによって使用される場合、動作は未定義です。&lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt;更新前コールバックリターンPポイントが破壊されるすること。</target>
        </trans-unit>
        <trans-unit id="6f6dd20be85a6ee9376cfe67d011732f51298a56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queryplanner-ng&quot;&gt;next generation query planner&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;queryplanner-ng&quot;&gt;次世代の問い合わせプランナ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0815af1640f3451efe07a076fe65835b297a94b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queryplanner-ng#howtofix&quot;&gt;query planner checklist&lt;/a&gt; describes steps that application developers should following to help resolve query planner problems. Notice the that the use of INDEXED BY is a last resort, to be used only when all other measures fail.</source>
          <target state="translated">&lt;a href=&quot;queryplanner-ng#howtofix&quot;&gt;問い合わせプランナのチェックリストは、&lt;/a&gt;アプリケーション開発者は、ヘルプ解決問い合わせプランナの問題に、次の必要がある手順を説明します。INDEXED BYの使用は最後の手段であり、他のすべての測定が失敗した場合にのみ使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0c1b5fdf8ac1234008ffa858abbdb051486a832c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;rescode#busy_snapshot&quot;&gt;SQLITE_BUSY_SNAPSHOT&lt;/a&gt; extended error code is returned in WAL mode when a read transaction cannot be upgraded to a write transaction because the read is on an older snapshot.</source>
          <target state="translated">&lt;a href=&quot;rescode#busy_snapshot&quot;&gt;SQLITE_BUSY_SNAPSHOT&lt;/a&gt;読み取りが古いスナップショットであるため、読み取りトランザクションが書き込みトランザクションにアップグレードできない場合、拡張エラーコードは、WALモードに戻ります。</target>
        </trans-unit>
        <trans-unit id="a55e40d30155becf01edc33f7916ec42f8c15006" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; interface does not change the values of any &lt;a href=&quot;bind_blob&quot;&gt;bindings&lt;/a&gt; on the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; S.</source>
          <target state="translated">&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;インタフェースは、任意の値が変化しない&lt;a href=&quot;bind_blob&quot;&gt;バインディング&lt;/a&gt;に&lt;a href=&quot;stmt&quot;&gt;準備されたステートメント&lt;/a&gt; S.</target>
        </trans-unit>
        <trans-unit id="3841b0084bc10aa5540a5c6c5c96fb98131e7bf0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;reset&quot;&gt;sqlite3_reset(S)&lt;/a&gt; interface resets the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; S back to the beginning of its program.</source>
          <target state="translated">&lt;a href=&quot;reset&quot;&gt;sqlite3_reset（S）&lt;/a&gt;インタフェースがリセットされ&lt;a href=&quot;stmt&quot;&gt;、準備されたステートメントは、&lt;/a&gt;そのプログラムの先頭に戻るS。</target>
        </trans-unit>
        <trans-unit id="540e7b1566721b5eeac705b77c4d701d37c07cab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;rtree&quot;&gt;R-Tree extension&lt;/a&gt; returns this result code when an attempt is made to update the R-Tree while another prepared statement is actively reading the R-Tree. The update cannot proceed because any change to an R-Tree might involve reshuffling and rebalancing of nodes, which would disrupt read cursors, causing some rows to be repeated and other rows to be omitted.</source>
          <target state="translated">&lt;a href=&quot;rtree&quot;&gt;Rツリーの拡張子は&lt;/a&gt;、他のプリペアドステートメントを積極的にR-ツリーを読んでいる間、試みはR-ツリーを更新するために行われ、この結果コードを返します。Rツリーへの変更にはノードの再シャッフルと再バランスが含まれる可能性があるため、更新を続行できません。これにより、読み取りカーソルが中断され、一部の行が繰り返され、他の行が省略されます。</target>
        </trans-unit>
        <trans-unit id="7707f3c0dce0c68c0fd1c390c4bccf3ca9ffcb57" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;session/sqlite3changeset_start&quot;&gt;sqlite3changeset_start()&lt;/a&gt; API is called to create and initialize an iterator to iterate through the contents of a changeset. Initially, the iterator points to no element at all.</source>
          <target state="translated">&lt;a href=&quot;session/sqlite3changeset_start&quot;&gt;sqlite3changeset_start（）&lt;/a&gt; APIは、チェンジセットの内容を反復処理するイテレータを作成し、初期化するために呼ばれています。最初、イテレータは要素をまったく指さない。</target>
        </trans-unit>
        <trans-unit id="e2c05e642dac6053ce210738d48ce79ebc45ba34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;set_authorizer&quot;&gt;authorizer callback function&lt;/a&gt; must return either &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; or one of these two constants in order to signal SQLite whether or not the action is permitted. See the &lt;a href=&quot;set_authorizer&quot;&gt;authorizer documentation&lt;/a&gt; for additional information.</source>
          <target state="translated">&lt;a href=&quot;set_authorizer&quot;&gt;承認者のコールバック関数は、&lt;/a&gt;いずれかを返す必要があり&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;アクションが許可されているか否かのSQLiteを通知するために、またはこれら2つの定数のいずれか。追加情報については、&lt;a href=&quot;set_authorizer&quot;&gt;承認者のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b9f192cd368c894585cf856c53081dab4346439" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;set_authorizer&quot;&gt;sqlite3_set_authorizer()&lt;/a&gt; interface registers a callback function that is invoked to authorize certain SQL statement actions. The second parameter to the callback is an integer code that specifies what action is being authorized. These are the integer action codes that the authorizer callback may be passed.</source>
          <target state="translated">&lt;a href=&quot;set_authorizer&quot;&gt;sqlite3_set_authorizer（）&lt;/a&gt;インタフェースは、特定のSQLステートメントアクションを認可するために呼び出されるコールバック関数を登録します。コールバックの2番目のパラメーターは、どのアクションが許可されているかを指定する整数コードです。これらは、オーソライザーコールバックが渡される整数のアクションコードです。</target>
        </trans-unit>
        <trans-unit id="c88888932989847ef34ae0441a4a296cbf9342ef" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object returned from a successful call to &lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get()&lt;/a&gt; must be freed using &lt;a href=&quot;snapshot_free&quot;&gt;sqlite3_snapshot_free()&lt;/a&gt; to avoid a memory leak.</source>
          <target state="translated">&lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshotの&lt;/a&gt;に成功した呼び出しから返されたオブジェクト&lt;a href=&quot;snapshot_get&quot;&gt;（）sqlite3_snapshot_getを&lt;/a&gt;使用して解放しなければならない&lt;a href=&quot;snapshot_free&quot;&gt;sqlite3_snapshot_freeを（）&lt;/a&gt;メモリリークを避けるために。</target>
        </trans-unit>
        <trans-unit id="334527e56ba0a296ee1d1034ee6898a348187ebd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot_free&quot;&gt;sqlite3_snapshot_free()&lt;/a&gt; interface is only available when the &lt;a href=&quot;../compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;snapshot_free&quot;&gt;sqlite3_snapshot_free（）&lt;/a&gt;ときインタフェースにのみ利用可能である&lt;a href=&quot;../compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt;コンパイル時のオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="41f028c2f95ad413ccf78f4f0e636bf684908330" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot_free&quot;&gt;sqlite3_snapshot_free(P)&lt;/a&gt; interface destroys &lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; P. The application must eventually free every &lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object using this routine to avoid a memory leak.</source>
          <target state="translated">&lt;a href=&quot;snapshot_free&quot;&gt;sqlite3_snapshot_free（P）&lt;/a&gt;インターフェース破棄&lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; P.アプリケーションは、最終的にすべての解放する必要があります&lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshotの&lt;/a&gt;メモリリークを避けるために、このルーチンを使用してオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="b60983fe9853f804b509f3ca97ea438091fe792b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get()&lt;/a&gt; interface is only available when the &lt;a href=&quot;../compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get（）&lt;/a&gt;ときインタフェースにのみ利用可能である&lt;a href=&quot;../compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt;コンパイル時のオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="f3e22e1c7c111b00a70790db9ce08d967e255fcd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get(D,S,P)&lt;/a&gt; interface attempts to make a new &lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object that records the current state of schema S in database connection D. On success, the &lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get(D,S,P)&lt;/a&gt; interface writes a pointer to the newly created &lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt; object into *P and returns SQLITE_OK. If there is not already a read-transaction open on schema S when this function is called, one is opened automatically.</source>
          <target state="translated">&lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get（D、S、P）&lt;/a&gt;新しいするためのインタフェース試み&lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshotの&lt;/a&gt;データベース接続D.オン成功のスキーマSの現在の状態を記録するオブジェクトを、&lt;a href=&quot;snapshot_get&quot;&gt;sqlite3_snapshot_get（D、S、P）&lt;/a&gt;インターフェースは、新しく作成されたポインタを書き込みます。&lt;a href=&quot;snapshot&quot;&gt;sqlite3_snapshot&lt;/a&gt;オブジェクトを* Pに入れ、SQLITE_OKを返します。この関数が呼び出されたときにスキーマSで開いている読み取りトランザクションがまだない場合は、自動的に開きます。</target>
        </trans-unit>
        <trans-unit id="086ca737ecffa34122715fb37e08e08253d88ee7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface is only available when the &lt;a href=&quot;../compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;ときインタフェースにのみ利用可能である&lt;a href=&quot;../compile#enable_snapshot&quot;&gt;SQLITE_ENABLE_SNAPSHOT&lt;/a&gt;コンパイル時のオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="511890649947f63b55f8621e1cda37e48d68f4cb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open(D,S,P)&lt;/a&gt; interface either starts a new read transaction or upgrades an existing one for schema S of &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D such that the read transaction refers to historical &lt;a href=&quot;snapshot&quot;&gt;snapshot&lt;/a&gt; P, rather than the most recent change to the database. The &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface returns SQLITE_OK on success or an appropriate &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; if it fails.</source>
          <target state="translated">&lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open（D、S、P）&lt;/a&gt;インタフェースのいずれかが新しいリードトランザクションを開始またはスキーマSのための既存のものをアップグレード&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;リードトランザクション履歴を意味するように、D &lt;a href=&quot;snapshot&quot;&gt;スナップショット&lt;/a&gt;ではなく、データベースへの最新の変化より、P。&lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;インターフェースは、成功または適切にSQLITE_OKを返し&lt;a href=&quot;../rescode&quot;&gt;、エラーコード&lt;/a&gt;が失敗した場合。</target>
        </trans-unit>
        <trans-unit id="4cef92cfdf633fc0c634b624e8f2e6727a6b4196" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;spellfix1&quot;&gt;spellfix1&lt;/a&gt; extension allows the application to optionally specify the rowid for each INSERT.</source>
          <target state="translated">&lt;a href=&quot;spellfix1&quot;&gt;spellfix1の&lt;/a&gt;拡張は、アプリケーションは、必要に応じて各インサート用の行IDを指定することを可能にします。</target>
        </trans-unit>
        <trans-unit id="d837c3195216596d022a1ac6dfae8f94ace29826" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;spellfix1#editdist3&quot;&gt;editdist3()&lt;/a&gt; edit-distance function can also be selected or deselected at run-time by inserting an appropriate string into the &quot;command&quot; column of the virtual table:</source>
          <target state="translated">&lt;a href=&quot;spellfix1#editdist3&quot;&gt;editdist3（）&lt;/a&gt;編集距離関数は、仮想テーブルの「コマンド」カラムに適切な文字列を挿入することによって、実行時に選択または選択解除することができます。</target>
        </trans-unit>
        <trans-unit id="832a2975224a148de7d49b3ae21cbf638061bcda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;sqlar&quot;&gt;SQLite Archive&lt;/a&gt; idea shows how SQLite can be used as a substitute for ZIP archives or Tarballs. An archive of files stored in SQLite is only very slightly larger, and in some cases actually smaller, than the equivalent ZIP archive. And an SQLite archive features incremental and atomic updating and the ability to store much richer metadata.</source>
          <target state="translated">&lt;a href=&quot;sqlar&quot;&gt;SQLiteのアーカイブ&lt;/a&gt; SQLiteのは、ZIPアーカイブまたはtarで固めの代用として使用することができる方法のアイデアを示しています。SQLiteに保存されたファイルのアーカイブは、同等のZIPアーカイブよりもわずかに大きく、場合によっては実際には小さくなります。また、SQLiteアーカイブは、インクリメンタルおよびアトミックな更新と、はるかに豊富なメタデータを保存する機能を備えています。</target>
        </trans-unit>
        <trans-unit id="e695129653037caa8407461dbbd9ea2a46762ce1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; pointer D in a call to &lt;a href=&quot;next_stmt&quot;&gt;sqlite3_next_stmt(D,S)&lt;/a&gt; must refer to an open database connection and in particular must not be a NULL pointer.</source>
          <target state="translated">&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;の呼び出しでポインタD &lt;a href=&quot;next_stmt&quot;&gt;sqlite3_next_stmt（D、S）は&lt;/a&gt;、オープンデータベース接続を参照し、特定する必要があり、NULLポインタであってはなりません。</target>
        </trans-unit>
        <trans-unit id="48a912a810b3a28ec149be0106a75289dbfa6333" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_append(X,S,N)&lt;/a&gt; method appends exactly N bytes from string S onto the end of the &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X. N must be non-negative. S must contain at least N non-zero bytes of content. To append a zero-terminated string in its entirety, use the &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendall()&lt;/a&gt; method instead.</source>
          <target state="translated">&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_append（X、S、N）&lt;/a&gt;方法Nはの端部に弦Sからのバイト正確付加&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトX. Nは非負でなければなりません。Sには、少なくともNバイトの非ゼロバイトのコンテンツが含まれている必要があります。ゼロで終了する文字列全体を追加するには、代わりに&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendall（）&lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="1fad1c80b91150cb25ef6b94b5eb5de73c5d25b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendall(X,S)&lt;/a&gt; method appends the complete content of zero-terminated string S onto the end of &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X.</source>
          <target state="translated">&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendall（X、S）&lt;/a&gt;メソッドは、の最後にゼロで終わる文字列Sの完全な内容を付加&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトX.</target>
        </trans-unit>
        <trans-unit id="b0fd412f541ab2a0f3d35988066ed4e8e4128c77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendchar(X,N,C)&lt;/a&gt; method appends N copies of the single-byte character C onto the end of &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X. This method can be used, for example, to add whitespace indentation.</source>
          <target state="translated">&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendchar（X、N、C）&lt;/a&gt;の方法は、端部に単一バイト文字CのN個のコピーを付加&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;この方法は、空白インデントを追加するために、例えば、使用することができるオブジェクトX.。</target>
        </trans-unit>
        <trans-unit id="8a49ade027432cc3ca56bc0bb1633c34a874ad30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendf(X,F,...)&lt;/a&gt; and &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_vappendf(X,F,V)&lt;/a&gt; interfaces uses the &lt;a href=&quot;../printf&quot;&gt;built-in printf&lt;/a&gt; functionality of SQLite to append formatted text onto the end of &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X.</source>
          <target state="translated">&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_appendf（X、F、...）&lt;/a&gt;と&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_vappendf（X、F、V）&lt;/a&gt;インターフェイスが使用&lt;a href=&quot;../printf&quot;&gt;内蔵のprintf&lt;/a&gt;のSQLiteの機能の最後にフォーマットされたテキストを追加する&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトX.</target>
        </trans-unit>
        <trans-unit id="8207628b57fa2acb2222184f79be191c7783d2ec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_append&quot;&gt;sqlite3_str_reset(X)&lt;/a&gt; method resets the string under construction inside &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X back to zero bytes in length.</source>
          <target state="translated">&lt;a href=&quot;str_append&quot;&gt;sqlite3_str_reset（X）&lt;/a&gt;メソッドは、内部構造の下列リセット&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;長さはゼロバイトにオブジェクトXのバック。</target>
        </trans-unit>
        <trans-unit id="3979188fa64e50e829929b1acf8c993dc30e5490" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length(X)&lt;/a&gt; method returns the current length, in bytes, of the dynamic string under construction in &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X. The length returned by &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length(X)&lt;/a&gt; does not include the zero-termination byte.</source>
          <target state="translated">&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length（X）&lt;/a&gt;メソッドは、建設中の動的な列のバイト単位の現在の長さを返し&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;によって返される長さオブジェクトX. &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length（X）が&lt;/a&gt;ゼロ終端バイトを含みません。</target>
        </trans-unit>
        <trans-unit id="94c6db74a667c1ebd14fbec47092019e01e83407" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; method returns a pointer to the current content of the dynamic string under construction in X. The value returned by &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; is managed by the sqlite3_str object X and might be freed or altered by any subsequent method on the same &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object. Applications must not used the pointer returned &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; after any subsequent method call on the same object. Applications may change the content of the string returned by &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value(X)&lt;/a&gt; as long as they do not write into any bytes outside the range of 0 to &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length(X)&lt;/a&gt; and do not read or write any byte after any subsequent sqlite3_str method call.</source>
          <target state="translated">&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value（X）&lt;/a&gt;メソッドは、によって返される値Xに建設動的文字列の現在の内容へのポインタを返す&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value（X）は&lt;/a&gt; sqlite3_strオブジェクトXによって管理され、同じ上の任意の後続の方法によって解放または変更されるかもしれません&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクト。アプリケーションは、同じオブジェクトに対する後続のメソッド呼び出しの後に返されるポインター&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value（X）を&lt;/a&gt;使用してはなりません。アプリケーションは、0から&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length（X）&lt;/a&gt;の範囲外のバイトに書き込みを行わず、後続のsqlite3_strメソッド呼び出しの後にバイトを読み書きしない限り、&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_value（X）&lt;/a&gt;によって返される文字列の内容を変更できます。</target>
        </trans-unit>
        <trans-unit id="7e06028d8d9a37c76976481d45631c9360b94773" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt; interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc64()&lt;/a&gt; that contains the constructed string. The calling application should pass the returned value to &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt; to avoid a memory leak. The &lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt; interface may return a NULL pointer if any errors were encountered during construction of the string. The &lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt; interface will also return a NULL pointer if the string in &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object X is zero bytes long.</source>
          <target state="translated">&lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;インタフェースはsqlite3_strオブジェクトXとリターンから得られたバッファメモリへのポインタ破壊&lt;a href=&quot;free&quot;&gt;sqlite3_malloc64（）&lt;/a&gt;構築文字列を含みます。呼び出し側アプリケーションは、メモリリークを回避するために、戻り値を&lt;a href=&quot;free&quot;&gt;sqlite3_free（）&lt;/a&gt;に渡す必要があります。&lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;エラーがストリングの構築中に遭遇した場合のインタフェースは、NULLポインタを返すことができます。&lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;の文字列場合インターフェイスもNULLポインタを戻します&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;オブジェクトXがゼロバイト長です。</target>
        </trans-unit>
        <trans-unit id="893b46b38f797cff31c49b4ea957f7271c4d11b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new(D)&lt;/a&gt; interface allocates and initializes a new &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object. To avoid memory leaks, the object returned by &lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new()&lt;/a&gt; must be freed by a subsequent call to &lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new（D）&lt;/a&gt;界面割り当て及び新しい初期化&lt;a href=&quot;str&quot;&gt;sqlite3_strの&lt;/a&gt;オブジェクト。メモリリークを回避するには、&lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new（）&lt;/a&gt;によって返されたオブジェクトを&lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;への後続の呼び出しで解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8f2751d83d7d253a00544efb010e3f4e128798b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new(D)&lt;/a&gt; interface always returns a pointer to a valid &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; object, though in the event of an out-of-memory error the returned object might be a special singleton that will silently reject new text, always return SQLITE_NOMEM from &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode()&lt;/a&gt;, always return 0 for &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length()&lt;/a&gt;, and always return NULL from &lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish(X)&lt;/a&gt;. It is always safe to use the value returned by &lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new(D)&lt;/a&gt; as the sqlite3_str parameter to any of the other &lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;str_new&quot;&gt;（D）sqlite3_str_new&lt;/a&gt;インターフェイスは常に有効にポインタを返す&lt;a href=&quot;str&quot;&gt;sqlite3_strの&lt;/a&gt;メモリ不足エラーが発生した場合に返されるオブジェクトは黙って新しいテキストを拒否します、常にからSQLITE_NOMEMを返す特殊なシングルトンかもしれませんが、オブジェクトを&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode（）&lt;/a&gt;、常に&lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_length（）&lt;/a&gt;に対して0を返し、常に&lt;a href=&quot;str_finish&quot;&gt;sqlite3_str_finish（X）&lt;/a&gt;からNULLを返します。&lt;a href=&quot;str_new&quot;&gt;sqlite3_str_new（D）&lt;/a&gt;によって返された値を、他の&lt;a href=&quot;str&quot;&gt;sqlite3_str&lt;/a&gt;メソッドのsqlite3_strパラメータとして使用することは常に安全です。</target>
        </trans-unit>
        <trans-unit id="4893933da22367d13b4236043c7aa3ee536ea00a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;strglob&quot;&gt;sqlite3_strglob(P,X)&lt;/a&gt; interface returns zero if and only if string X matches the &lt;a href=&quot;../lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; pattern P. The definition of &lt;a href=&quot;../lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; pattern matching used in &lt;a href=&quot;strglob&quot;&gt;sqlite3_strglob(P,X)&lt;/a&gt; is the same as for the &quot;X GLOB P&quot; operator in the SQL dialect understood by SQLite. The &lt;a href=&quot;strglob&quot;&gt;sqlite3_strglob(P,X)&lt;/a&gt; function is case sensitive.</source>
          <target state="translated">&lt;a href=&quot;strglob&quot;&gt;sqlite3_strglob（P、X）&lt;/a&gt;インタフェース戻る場合にのみ文字列Xが一致する場合ゼロ&lt;a href=&quot;../lang_expr#glob&quot;&gt;GLOBの&lt;/a&gt;パターンPの定義&lt;a href=&quot;../lang_expr#glob&quot;&gt;GLOBの&lt;/a&gt;に使用されるパターンマッチング&lt;a href=&quot;strglob&quot;&gt;（P、X）sqlite3_strglobの&lt;/a&gt;中の「X GLOB P」演算子の場合と同じですSQLiteが理解できるSQL方言。&lt;a href=&quot;strglob&quot;&gt;sqlite3_strglob（P、X）&lt;/a&gt;関数は、大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="e174ba8e6223c998f458135f997fdab25603db49" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;stricmp&quot;&gt;sqlite3_stricmp()&lt;/a&gt; and &lt;a href=&quot;stricmp&quot;&gt;sqlite3_strnicmp()&lt;/a&gt; APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion, using the same definition of &quot;case independence&quot; that SQLite uses internally when comparing identifiers.</source>
          <target state="translated">&lt;a href=&quot;stricmp&quot;&gt;sqlite3_stricmp（）&lt;/a&gt;と&lt;a href=&quot;stricmp&quot;&gt;sqlite3_strnicmp（）&lt;/a&gt; APIは、識別子を比較するときのSQLiteが内部で使用する「ケース・自立」の同じ定義を使用して、アプリケーションや拡張機能は、ケースに依存しない形式でUTF-8文字列を含む二つのバッファの内容を比較することができます。</target>
        </trans-unit>
        <trans-unit id="f2f61b252192f444bf8f6f8d93e248db03a4d372" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; function matches Unicode characters, though only ASCII characters are case folded.</source>
          <target state="translated">&lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike（P、X、E）&lt;/a&gt; ASCII文字のみがケースに折り畳まれているものの関数は、Unicode文字に一致します。</target>
        </trans-unit>
        <trans-unit id="8540813014d56ead7baf2b2daf047a27f8df8c32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; interface returns zero if and only if string X matches the &lt;a href=&quot;../lang_expr#like&quot;&gt;LIKE&lt;/a&gt; pattern P with escape character E. The definition of &lt;a href=&quot;../lang_expr#like&quot;&gt;LIKE&lt;/a&gt; pattern matching used in &lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; is the same as for the &quot;X LIKE P ESCAPE E&quot; operator in the SQL dialect understood by SQLite. For &quot;X LIKE P&quot; without the ESCAPE clause, set the E parameter of &lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; to 0. As with the LIKE operator, the &lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike(P,X,E)&lt;/a&gt; function is case insensitive - equivalent upper and lower case ASCII characters match one another.</source>
          <target state="translated">&lt;a href=&quot;strlike&quot;&gt;（P、X、E）sqlite3_strlike&lt;/a&gt;インターフェースリターン文字列Xが一致する場合と場合にのみ、ゼロ&lt;a href=&quot;../lang_expr#like&quot;&gt;LIKEの&lt;/a&gt;エスケープ文字Eでの定義パターンPを&lt;a href=&quot;../lang_expr#like&quot;&gt;LIKEの&lt;/a&gt;に使用されるパターンマッチング&lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike（P、X、Eは）&lt;/a&gt;と同じですSQLiteが理解するSQL方言の「X LIKE P ESCAPE E」演算子。ESCAPE句のない「X LIKE P」の場合、&lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike（P、X、E）&lt;/a&gt;のEパラメータを0 に設定します。LIKE演算子と同様に、&lt;a href=&quot;strlike&quot;&gt;sqlite3_strlike（P、X、E）&lt;/a&gt;関数は大文字と小文字を区別しません-同等の大文字と小文字小文字のASCII文字は互いに一致します。</target>
        </trans-unit>
        <trans-unit id="4c4bc6f080bcb0613b19c8e24f2c8215e3263de6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tclsqlite&quot;&gt;TCL Interface&lt;/a&gt; has been enhanced to use the &lt;a href=&quot;http://www.tcl-lang.org/cgi-bin/tct/tip/322.html&quot;&gt;Non-Recursive Engine (NRE)&lt;/a&gt; interface to the TCL interpreter when linked against TCL 8.6 or later.</source>
          <target state="translated">&lt;a href=&quot;tclsqlite&quot;&gt;TCLインターフェイス&lt;/a&gt;を使用するように拡張された&lt;a href=&quot;http://www.tcl-lang.org/cgi-bin/tct/tip/322.html&quot;&gt;非再帰的エンジン（NRE）&lt;/a&gt; TCL 8.6以降にリンクされたときにTCLインタープリタへのインターフェイスを。</target>
        </trans-unit>
        <trans-unit id="de4e73f7d156e22fa7106d9f30fd3d58ff51bfbf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#slt&quot;&gt;SQL Logic Tests&lt;/a&gt; are a set of test cases designed to show that SQLite behaves the same as other SQL database engines. These tests are hosted in a separate code public repository.</source>
          <target state="translated">&lt;a href=&quot;testing#slt&quot;&gt;SQLロジックテストは、&lt;/a&gt; SQLiteのは、他のSQLデータベースエンジンと同じように動作することを示すために設計されたテスト・ケースのセットです。これらのテストは、別のコードのパブリックリポジトリでホストされます。</target>
        </trans-unit>
        <trans-unit id="5f65ab47a0f86c2f22ae6f2632075f4320a179c7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;th3&quot;&gt;Test Harness #3&lt;/a&gt; or &lt;a href=&quot;th3&quot;&gt;TH3&lt;/a&gt; test suite is a private set of test cases used to test SQLite to 100% MC/DC in an as-delivered configuration. TH3 sources are served on the same servers as the other SQLite repositories, but differ from the others in being proprietary. The TH3 code is only accessible to SQLite developers.</source>
          <target state="translated">&lt;a href=&quot;th3&quot;&gt;テストハーネス＃3&lt;/a&gt;又は&lt;a href=&quot;th3&quot;&gt;TH3の&lt;/a&gt;テストスイートは、として送達構成100％MC / DCへの試験SQLiteのに使用されるテストケースの秘密セットです。TH3ソースは、他のSQLiteリポジトリと同じサーバーで提供されますが、独自のものであるという点で他のソースとは異なります。TH3コードはSQLite開発者のみがアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e8a696ccc2b635cda261283e62314013cf8db5a9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes(D)&lt;/a&gt; interface only reports the number of rows that changed due to SQL statement run against database connection D. Any changes by other database connections are ignored. To detect changes against a database file from other database connections use the &lt;a href=&quot;../pragma#pragma_data_version&quot;&gt;PRAGMA data_version&lt;/a&gt; command or the &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;file control&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes（D）&lt;/a&gt;インターフェイスは、唯一の他のデータベース接続により、任意の変更は無視され、データベース接続D.に対してSQL文の実行のために変更された行の数を報告します。他のデータベース接続からのデータベースファイルに対する変更を検出するには、&lt;a href=&quot;../pragma#pragma_data_version&quot;&gt;PRAGMA data_version&lt;/a&gt;コマンドまたは&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION &lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;ファイルコントロール&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="5a2803f974353bfc4cbf30a15e234d493460a39f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;versionnumbers&quot;&gt;version numbering conventions&lt;/a&gt; for SQLite are revised to use the emerging standard of &lt;a href=&quot;http://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;.</source>
          <target state="translated">SQLite の&lt;a href=&quot;versionnumbers&quot;&gt;バージョン番号付け規則&lt;/a&gt;は、&lt;a href=&quot;http://semver.org/&quot;&gt;セマンティックバージョニングの&lt;/a&gt;新しい標準を使用するように改訂されています。</target>
        </trans-unit>
        <trans-unit id="6ca284a5c0b69f330d98de127457542bdad0ece1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_10.html&quot;&gt;version 3.7.10&lt;/a&gt; (2012-01-16) adds a new device characteristic named &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITE&lt;/a&gt;. Database files that report this characteristic are assumed to reside on storage systems that have the powersafe overwrite property. The default unix and windows &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt; now report &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITE&lt;/a&gt; if SQLite is compiled with &lt;a href=&quot;compile#powersafe_overwrite&quot;&gt;-DSQLITE_POWERSAFE_OVERWRITE=1&lt;/a&gt; or they make the legacy assumption that storage does not have the powersafe overwrite property if compiled with &lt;a href=&quot;compile#powersafe_overwrite&quot;&gt;-DSQLITE_POWERSAFE_OVERWRITE=0&lt;/a&gt;. For now, the default is for powersafe overwrite to be turned on, though we may revisit this in the future and default it off.</source>
          <target state="translated">&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;のSQLiteのための&lt;a href=&quot;https://sqlite.org/releaselog/3_7_10.html&quot;&gt;バージョン3.7.10&lt;/a&gt;（2012-01-16）は、という名前の新しいデバイスの特性追加&lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITEを&lt;/a&gt;。この特性を報告するデータベースファイルは、powersafe overwriteプロパティを持つストレージシステムにあると想定されています。デフォルトUNIXとWindows &lt;a href=&quot;vfs&quot;&gt;VFSesは&lt;/a&gt;今報告&lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_POWERSAFE_OVERWRITEを&lt;/a&gt; SQLiteのがしてコンパイルされている場合&lt;a href=&quot;compile#powersafe_overwrite&quot;&gt;-DSQLITE_POWERSAFE_OVERWRITE = 1&lt;/a&gt;または彼らがしてコンパイルした場合、ストレージはpowersafeオーバーライト特性を持っていないという従来の仮定作る&lt;a href=&quot;compile#powersafe_overwrite&quot;&gt;-DSQLITE_POWERSAFE_OVERWRITE = 0を&lt;/a&gt;。現時点では、デフォルトでpowersafe overwriteがオンになっていますが、将来これを再確認してデフォルトでオフにする可能性があります。</target>
        </trans-unit>
        <trans-unit id="28df118ed088f75e95fa60751c2ccab88df9bbf6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;vtab#xbestindex&quot;&gt;sqlite3_module.xBestIndex&lt;/a&gt; method in the implementation of this table checks for equality constraints against the HIDDEN columns, and uses those as input parameters to determine the range of integer &quot;value&quot; outputs to generate. Reasonable defaults are used for any unconstrained columns. For example, to list all integers between 5 and 50:</source>
          <target state="translated">このテーブルの実装の&lt;a href=&quot;vtab#xbestindex&quot;&gt;sqlite3_module.xBestIndex&lt;/a&gt;メソッドはHIDDEN列に対する等価制約をチェックし、それらを入力パラメーターとして使用して、生成する整数「値」出力の範囲を決定します。制約のない列には、妥当なデフォルトが使用されます。たとえば、5〜50のすべての整数を一覧表示するには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="e9cea685ebbde84bdb5186b0eb1062c8517be452" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex&lt;/a&gt; method must fill aConstraintUsage[] with information about what parameters to pass to xFilter. If argvIndex&amp;gt;0 then the right-hand side of the corresponding aConstraint[] is evaluated and becomes the argvIndex-th entry in argv. If aConstraintUsage[].omit is true, then the constraint is assumed to be fully handled by the virtual table and is not checked again by SQLite.</source>
          <target state="translated">&lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndexの&lt;/a&gt;方法はxFilterに渡すどのようなパラメータに関する情報をaConstraintUsage []を入力する必要があります。argvIndex&amp;gt; 0の場合、対応するaConstraint []の右側が評価され、argvのargvIndex番目のエントリになります。aConstraintUsage []。omitがtrueの場合、制約は仮想テーブルによって完全に処理されたと見なされ、SQLiteによって再度チェックされません。</target>
        </trans-unit>
        <trans-unit id="60b191bb31eb6d4e8bdeb7b48904acffd3c2dfc6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; and &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; methods of a &lt;a href=&quot;#sqlite3_module&quot;&gt;virtual table module&lt;/a&gt; call this interface to declare the format (the names and datatypes of the columns) of the virtual tables they implement.</source>
          <target state="translated">&lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt;と&lt;a href=&quot;vtab#xconnect&quot;&gt;のxconnect&lt;/a&gt;の方法&lt;a href=&quot;#sqlite3_module&quot;&gt;仮想テーブルは、モジュール&lt;/a&gt;、それらが実装仮想テーブルの形式（列の名前とデータ型）を宣言するために、このインターフェイスを呼び出します。</target>
        </trans-unit>
        <trans-unit id="d6feb2481a619b82b0e2f46a25f49c2e66551dca" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;vtab#xdisconnect&quot;&gt;xDisconnect&lt;/a&gt; method is called whenever a database connection that uses a virtual table is closed. The xDestroy method is only called when a &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; statement is executed against the virtual table.</source>
          <target state="translated">&lt;a href=&quot;vtab#xdisconnect&quot;&gt;xDisconnectの&lt;/a&gt;仮想テーブルを使用してデータベース接続が閉じられるたびにメソッドが呼び出されます。xDestroyメソッドは、&lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt;ステートメントが仮想テーブルに対して実行されたときにのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8c0ce4af06185c37b128ad21eebbd21f3f9ac244" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method was originally designed around having a &lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt; as a single value. The &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method has been expanded to accommodate an arbitrary PRIMARY KEY in place of the ROWID, but the PRIMARY KEY must still be only one column. For this reason, SQLite will reject any WITHOUT ROWID virtual table that has more than one PRIMARY KEY column and a non-NULL xUpdate method.</source>
          <target state="translated">&lt;a href=&quot;vtab#xupdate&quot;&gt;XUpdate&lt;/a&gt;方法は、もともと持って設計された&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDを&lt;/a&gt;単一の値として。&lt;a href=&quot;vtab#xupdate&quot;&gt;XUpdate&lt;/a&gt;方法は、ROWIDの代わりに任意のPRIMARY KEYに対応するために拡張されていますが、PRIMARY KEYはまだ1列のみでなければなりません。このため、SQLiteは、複数のPRIMARY KEY列とNULL以外のxUpdateメソッドを持つWITHOUT ROWID仮想テーブルを拒否します。</target>
        </trans-unit>
        <trans-unit id="e8e22d8d27e272cb6edbc57854c2655aac986253" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;wal#advantages&quot;&gt;second advantage of WAL-mode&lt;/a&gt; is that writers do not block readers and readers to do not block writers. This is &lt;u&gt;mostly&lt;/u&gt; true. But there are some obscure cases where a query against a WAL-mode database can return &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;, so applications should be prepared for that happenstance.</source>
          <target state="translated">&lt;a href=&quot;wal#advantages&quot;&gt;WALモード&lt;/a&gt;の2番目の利点は、ライターがリーダーをブロックせず、リーダーがライターをブロックしないことです。これは&lt;u&gt;ほとんど&lt;/u&gt;本当です。ただし、WALモードのデータベースに対するクエリが&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;を返す場合があるため、アプリケーションはそのような事態に備える必要があります。</target>
        </trans-unit>
        <trans-unit id="73dd67efef2f2aca70b69d53d116d51359c36e68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;wal_autocheckpoint&quot;&gt;sqlite3_wal_autocheckpoint(D,N)&lt;/a&gt; is a wrapper around &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; that causes any database on &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D to automatically &lt;a href=&quot;../wal#ckpt&quot;&gt;checkpoint&lt;/a&gt; after committing a transaction if there are N or more frames in the &lt;a href=&quot;../wal&quot;&gt;write-ahead log&lt;/a&gt; file. Passing zero or a negative value as the nFrame parameter disables automatic checkpoints entirely.</source>
          <target state="translated">&lt;a href=&quot;wal_autocheckpoint&quot;&gt;sqlite3_wal_autocheckpoint（D、N）は&lt;/a&gt;ラッパーです&lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;上の任意のデータベースの原因となる&lt;a href=&quot;sqlite3&quot;&gt;データベース接続&lt;/a&gt;を自動的にD &lt;a href=&quot;../wal#ckpt&quot;&gt;のチェックポイント&lt;/a&gt; N以上のフレームがである場合、トランザクションをコミットした後&lt;a href=&quot;../wal&quot;&gt;、先行書き込みログ&lt;/a&gt;ファイル。nFrameパラメータとしてゼロまたは負の値を渡すと、自動チェックポイントが完全に無効になります。</target>
        </trans-unit>
        <trans-unit id="70220a93d132293d087792692e0745eaa50f6944" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; function is used to register a callback that is invoked each time data is committed to a database in wal mode.</source>
          <target state="translated">&lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;関数は、WALモードでデータベースにコミットされるたびにデータが呼び出されるコールバックを登録するために使用されます。</target>
        </trans-unit>
        <trans-unit id="82c4cc754894816f7c5238173cc6918a40c6ae4d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;walformat#locks&quot;&gt;WAL-mode locks&lt;/a&gt; are described above.</source>
          <target state="translated">&lt;a href=&quot;walformat#locks&quot;&gt;WALモード・ロックは、&lt;/a&gt;上記に記載されています。</target>
        </trans-unit>
        <trans-unit id="2815c286729fb6fca3fa728a7812f5c530ea71ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;walformat#shm&quot;&gt;wal-index&lt;/a&gt; is implemented using an ordinary file that is mmapped for robustness. Early (pre-release) implementations of WAL mode stored the wal-index in volatile shared-memory, such as files created in /dev/shm on Linux or /tmp on other unix systems. The problem with that approach is that processes with a different root directory (changed via &lt;a href=&quot;http://en.wikipedia.org/wiki/Chroot&quot;&gt;chroot&lt;/a&gt;) will see different files and hence use different shared memory areas, leading to database corruption. Other methods for creating nameless shared memory blocks are not portable across the various flavors of unix. And we could not find any method to create nameless shared memory blocks on windows. The only way we have found to guarantee that all processes accessing the same database file use the same shared memory is to create the shared memory by mmapping a file in the same directory as the database itself.</source>
          <target state="translated">&lt;a href=&quot;walformat#shm&quot;&gt;WAL-インデックスは、&lt;/a&gt;堅牢性のためたmmapされた通常のファイルを使用して実装されています。 WALモードの初期（リリース前）の実装では、Linuxの/ dev / shmまたは他のUNIXシステムの/ tmpで作成されたファイルなど、揮発性の共有メモリにwal-indexが保存されていました。そのアプローチの問題は、異なるルートディレクトリ（&lt;a href=&quot;http://en.wikipedia.org/wiki/Chroot&quot;&gt;chroot&lt;/a&gt;経由で変更）でプロセスが）は異なるファイルを参照するため、異なる共有メモリ領域を使用し、データベースの破損につながります。名前のない共有メモリブロックを作成する他の方法は、さまざまな種類のUNIX間では移植できません。また、Windowsで名前のない共有メモリブロックを作成する方法は見つかりませんでした。同じデータベースファイルにアクセスするすべてのプロセスが同じ共有メモリを使用することを保証する唯一の方法は、データベース自体と同じディレクトリにあるファイルをmmmapして共有メモリを作成することです。</target>
        </trans-unit>
        <trans-unit id="e0f2b794ee3e27ce7edc3429510c9bf44ed6503d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;whentouse#website&quot;&gt;Appropriate Uses For SQLite&lt;/a&gt; page says that dynamic pages on the SQLite website typically do about 200 SQL statements each. This has provoked criticism from readers. Examples:</source>
          <target state="translated">&lt;a href=&quot;whentouse#website&quot;&gt;SQLite&lt;/a&gt;ページの適切な使用法によると、SQLite Webサイトの動的ページは通常、それぞれ約200のSQLステートメントを実行します。これは読者からの批判を引き起こした。例：</target>
        </trans-unit>
        <trans-unit id="edb12d8d86687eb25304ab545c4bdc2adb558bbf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;zipfile&quot;&gt;Zipfile virtual table&lt;/a&gt; can read and write a &lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_(file_format)&quot;&gt;ZIP Archive&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;zipfile&quot;&gt;ZIPファイル仮想テーブルは&lt;/a&gt;読み書きできる&lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_(file_format)&quot;&gt;ZIPアーカイブを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d23698ad6db1bcbbe81ce38782af791870223128" translate="yes" xml:space="preserve">
          <source>The &lt;b id=&quot;tcl&quot;&gt;TCL Tests&lt;/b&gt; are the oldest set of tests for SQLite. They are contained in the same source tree as the SQLite core and like the SQLite core are in the public domain. The TCL tests are the primary tests used during development. The TCL tests are written using the &lt;a href=&quot;http://www.tcl-lang.org/&quot;&gt;TCL scripting language&lt;/a&gt;. The TCL test harness itself consists of 26.9 KSLOC of C code used to create the TCL interface. The test scripts are contained in 1264 files totaling 20.5MB in size. There are 44792 distinct test cases, but many of the test cases are parameterized and run multiple times (with different parameters) so that on a full test run millions of separate tests are performed.</source>
          <target state="translated">&lt;b id=&quot;tcl&quot;&gt;TCLテストは、&lt;/b&gt; SQLiteのためのテストの最古のセットです。それらはSQLiteコアと同じソースツリーに含まれ、SQLiteコアと同様にパブリックドメインにあります。 TCLテストは、開発中に使用される主要なテストです。 TCLテストは、&lt;a href=&quot;http://www.tcl-lang.org/&quot;&gt;TCLスクリプト言語&lt;/a&gt;を使用して記述されています。 TCLテストハーネス自体は、TCLインターフェイスの作成に使用される26.9 KSLOCのCコードで構成されています。テストスクリプトは、合計20.5MBのサイズの1264ファイルに含まれています。 44792の異なるテストケースがありますが、テストケースの多くはパラメーター化され、（異なるパラメーターで）複数回実行されるため、完全なテストの実行では数百万の個別のテストが実行されます。</target>
        </trans-unit>
        <trans-unit id="6a6c5521cf56a12cd7c97f53a6e81f778a626555" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;&lt;a href=&quot;th3&quot;&gt;TH3&lt;/a&gt;&lt;/b&gt; test harness is a set of proprietary tests, written in C that provide 100% branch test coverage (and &lt;a href=&quot;testing#mcdc&quot;&gt;100% MC/DC test coverage&lt;/a&gt;) to the core SQLite library. The TH3 tests are designed to run on embedded and specialized platforms that would not easily support TCL or other workstation services. TH3 tests use only the published SQLite interfaces. TH3 consists of about 69.4 MB or 948.1 KSLOC of C code implementing 44753 distinct test cases. TH3 tests are heavily parameterized, though, so a full-coverage test runs about 1.7 million different test instances. The cases that provide 100% branch test coverage constitute a subset of the total TH3 test suite. A soak test prior to release does hundreds of millions of tests. Additional information on TH3 is &lt;a href=&quot;th3&quot;&gt;available separately&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;th3&quot;&gt;TH3の&lt;/a&gt;&lt;/b&gt;テストハーネスは100％分岐テストカバレッジ（及び提供Cで書かれた独自のテストのセットである&lt;a href=&quot;testing#mcdc&quot;&gt;100％MC / DCテストカバレッジを&lt;/a&gt;コアのSQLiteライブラリに）。TH3テストは、TCLやその他のワークステーションサービスを簡単にサポートできない組み込みおよび専用プラットフォームで実行するように設計されています。TH3テストは、公開されているSQLiteインターフェイスのみを使用します。TH3は、約69.4 MBまたは948.1 KSLOCのCコードで構成され、44753の異なるテストケースを実装します。ただし、TH3テストは厳密にパラメーター化されているため、フルカバレッジテストでは約170万の異なるテストインスタンスが実行されます。100％ブランチテストカバレッジを提供するケースは、TH3テストスイート全体のサブセットを構成します。リリース前のソークテストでは、何億ものテストが行​​われます。TH3の追加情報は&lt;a href=&quot;th3&quot;&gt;別途入手可能&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4cd8f15572230ed1f58d51c1d5372e68bc7d3339" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;&lt;i&gt;page number&lt;/i&gt;&lt;/b&gt; of the cached page. Pages are sequentially numbered within a database file starting from page 1 (page 1 begins at byte offset 0). Refer to</source>
          <target state="translated">キャッシュされたページの&lt;b&gt;&lt;i&gt;ページ番号&lt;/i&gt;&lt;/b&gt;。ページは、データベースファイル内でページ1から順番に番号が付けられます（ページ1はバイトオフセット0から始まります）。参照する</target>
        </trans-unit>
        <trans-unit id="81a39adda694af530886e4e9df6d7182a049eea0" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;SQLITE_ENABLE_REDEF_IO&lt;/b&gt; compile-time flag no longer functions. I/O procedures are now always redefinable.</source>
          <target state="translated">&lt;b&gt;SQLITE_ENABLE_REDEF_IO&lt;/b&gt;コンパイル時のフラグ機能しなくなります。I / Oプロシージャは常に再定義可能になりました。</target>
        </trans-unit>
        <trans-unit id="66961c7dbacae09d459d2962003215ef6b06eee5" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;ascii&lt;/b&gt; tokenizer, which assumes all characters outside of the ASCII codepoint range (0-127) are to be treated as token characters.</source>
          <target state="translated">&lt;b&gt;アスキー&lt;/b&gt;外部ASCIIコードポイント範囲（0〜127）の全ての文字を想定トークナイザは、トークン文字として扱われるべきです。</target>
        </trans-unit>
        <trans-unit id="da7024788e6b267f1ba270622b866f7355ceaff9" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;atomic-write&lt;/b&gt; property. A system that supports this property also specifies the size or sizes of the blocks that it is capable of writing. Valid sizes are powers of two greater than 512. If a write operation modifies a block of</source>
          <target state="translated">&lt;b&gt;アトミック書き込み&lt;/b&gt;プロパティ。このプロパティをサポートするシステムは、書き込み可能なブロックのサイズも指定します。有効なサイズは、512より大きい2のべき乗です。書き込み操作で、</target>
        </trans-unit>
        <trans-unit id="d4ac7f6fa28d8af8532959a7c557a99ffb086e4a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;cached data&lt;/b&gt;; a blob of data</source>
          <target state="translated">&lt;b&gt;キャッシュされたデータ&lt;/b&gt; ; データのブロブ</target>
        </trans-unit>
        <trans-unit id="4bdaa687775a7cc6ed8f468435ceaab97dc48b3c" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;checksum initializer&lt;/b&gt; field is set to a pseudo-random value. It is used as part of the algorithm to calculate the checksum for all</source>
          <target state="translated">&lt;b&gt;初期チェックサム&lt;/b&gt;フィールドは、擬似ランダムな値に設定されています。すべてのチェックサムを計算するアルゴリズムの一部として使用されます</target>
        </trans-unit>
        <trans-unit id="9732c0255b0b0de3b180d5a5b9e6e0e0de10ed21" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;checksum&lt;/b&gt; field contains a checksum value stored as a 4-byte big-endian signed integer. The checksum value is calculated as the sum of the bytes that make up the</source>
          <target state="translated">&lt;b&gt;チェックサム&lt;/b&gt;フィールドは、4バイトのビッグエンディアンの符号付き整数として格納されたチェックサム値を含みます。チェックサム値は、構成するバイトの合計として計算されます。</target>
        </trans-unit>
        <trans-unit id="808b646bb572829a50a12856cab578c0ba1273b4" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;child key&lt;/b&gt; is the column or set of columns in the child table that are constrained by the foreign key constraint and which hold the REFERENCES clause.</source>
          <target state="translated">&lt;b&gt;子キーは、&lt;/b&gt; REFERENCES句を保持する列または外部キー制約によって制約されており、子テーブルの列のセットです。</target>
        </trans-unit>
        <trans-unit id="4eb5a92cd04b8762d6cafb14dc40e6502ca97d4b" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;child table&lt;/b&gt; is the table that a foreign key constraint is applied to and the table that contains the REFERENCES clause. The example in this section uses the</source>
          <target state="translated">&lt;b&gt;子テーブルは、&lt;/b&gt;外部キー制約が適用されていることを表し、REFERENCES句を含むテーブルです。このセクションの例では、</target>
        </trans-unit>
        <trans-unit id="d2c172ce98989ce0e6fad8d66979d45e11202395" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;columns=&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;カラム=&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4bbf98eb754afaa644e3f69b92d0dc2195f52253" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;data=&lt;/b&gt; argument specifies that</source>
          <target state="translated">&lt;b&gt;データ=&lt;/b&gt;引数が指定するもの</target>
        </trans-unit>
        <trans-unit id="6baedccfb53deaad3fb37afa8fc4d96019b82c5a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;dbhash&lt;/b&gt; (or &lt;b&gt;dbhash.exe&lt;/b&gt; on Windows) utility is a command-line program that computes the SHA1 hash of the schema and content for an SQLite database.</source>
          <target state="translated">&lt;b&gt;dbhash&lt;/b&gt;（又は&lt;b&gt;dbhash.exe&lt;/b&gt; Windowsの場合）ユーティリティは、SQLiteデータベースのスキーマとコンテンツのSHA1ハッシュを計算するコマンドラインプログラムです。</target>
        </trans-unit>
        <trans-unit id="d6a3ef16a0b39b8edb4795fe8274619e6786a20a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;dbstat&lt;/b&gt; virtual table is available on all &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; when SQLite is built using the &lt;a href=&quot;compile#enable_dbstat_vtab&quot;&gt;SQLITE_ENABLE_DBSTAT_VTAB&lt;/a&gt; compile-time option. The dbstat virtual table provides low-level information about btree and overflow pages in a database file.</source>
          <target state="translated">&lt;b&gt;dbstat&lt;/b&gt;仮想テーブルがすべてで利用可能である&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;のSQLiteを使用して構築されたときに&lt;a href=&quot;compile#enable_dbstat_vtab&quot;&gt;SQLITE_ENABLE_DBSTAT_VTAB&lt;/a&gt;コンパイル時のオプションを選択します。dbstat仮想テーブルは、データベースファイルのbtreeおよびオーバーフローページに関する低レベルの情報を提供します。</target>
        </trans-unit>
        <trans-unit id="76a580c33e2e93bdaf2b8468f5fe69cbcb6b77c7" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;filename=&lt;/b&gt; argument specifies an external file from which CSV content is read. Every CSV virtual table must have either a &lt;b&gt;filename=&lt;/b&gt; argument or a &lt;b&gt;data=&lt;/b&gt; argument and not both.</source>
          <target state="translated">&lt;b&gt;ファイル名は=&lt;/b&gt;引数には、CSVの内容が読み取られる外部ファイルを指定します。すべてのCSV仮想テーブルには、&lt;b&gt;filename =&lt;/b&gt;引数または&lt;b&gt;data =&lt;/b&gt;引数のいずれかが必要です。両方は必要ありません。</target>
        </trans-unit>
        <trans-unit id="b993a193dd09d944f6699b7d9c40cd91aa1faf7c" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;journal magic&lt;/b&gt; field always contains a well-known 8-byte string value used to identify SQLite journal files. The well-known sequence of byte values is:</source>
          <target state="translated">&lt;b&gt;ジャーナル魔法の&lt;/b&gt;フィールドは常にSQLiteのジャーナル・ファイルを識別するために使用される、よく知られた8バイトの文字列値が含まれています。よく知られているバイト値のシーケンスは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0fb60bd76a6daf3fc22f58ff7ed03bdcd9faa9a0" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;json1&lt;/b&gt; extension is a &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; that implements fifteen &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; and two &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued functions&lt;/a&gt; that are useful for managing &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; content stored in an SQLite database. There are thirteen scalar functions:</source>
          <target state="translated">&lt;b&gt;json1&lt;/b&gt;拡張は、&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張&lt;/a&gt;用具15その&lt;a href=&quot;c3ref/create_function&quot;&gt;アプリケーション定義SQL関数&lt;/a&gt;二つ&lt;a href=&quot;vtab#tabfunc2&quot;&gt;テーブル値関数&lt;/a&gt;の管理に有用である&lt;a href=&quot;http://json.org/&quot;&gt;JSONの&lt;/a&gt; SQLiteデータベースに格納されたコンテンツを。13個のスカラー関数があります。</target>
        </trans-unit>
        <trans-unit id="74a8fe72057fb6a9d52ebf2366e8ca3d47b3ef51" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;master journal name&lt;/b&gt; field contains the name of the master journal file, encoded as a utf-8 string. There is no nul-terminator appended to the string.</source>
          <target state="translated">&lt;b&gt;マスタージャーナル名の&lt;/b&gt;欄には、UTF-8文字列としてエンコードされたマスター・ジャーナル・ファイルの名前が含まれています。文字列に付加されたNULターミネータはありません。</target>
        </trans-unit>
        <trans-unit id="32cd399bbb4e1a23152d71a26f07f3eec308179e" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;name-length&lt;/b&gt; field contains the length of the previous field in bytes, formatted as a 4-byte big-endian unsigned integer.</source>
          <target state="translated">&lt;b&gt;名前の長さの&lt;/b&gt;フィールドは、4バイトのビッグエンディアンの符号なし整数としてフォーマット、バイト単位で前のフィールドの長さが含まれています。</target>
        </trans-unit>
        <trans-unit id="fae22eeca9bdb678bd49709e0047fc71684a2c64" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;page size&lt;/b&gt; field contains the database page size used by the corresponding</source>
          <target state="translated">&lt;b&gt;ページサイズの&lt;/b&gt;フィールドは、対応することにより、使用するデータベースのページサイズが含まれています</target>
        </trans-unit>
        <trans-unit id="b47567cd5b3319ed0502d81821002b32b190c8e7" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;parent key&lt;/b&gt; is the column or set of columns in the parent table that the foreign key constraint refers to. This is normally, but not always, the primary key of the parent table. The parent key must be a named column or columns in the parent table, not the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;親キーは、&lt;/b&gt;外部キー制約が参照する親テーブルの列または列のセットです。これは、常にではありませんが、通常は親テーブルの主キーです。親キーは、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;ではなく、親テーブルの名前付き列である必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
