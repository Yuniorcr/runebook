<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="sqlite">
    <body>
      <group id="sqlite">
        <trans-unit id="091a2ba2d55b0a7d15b54d374b18e4d57aa3a683" translate="yes" xml:space="preserve">
          <source>The DBSTAT Virtual Table</source>
          <target state="translated">DBSTAT 仮想テーブル</target>
        </trans-unit>
        <trans-unit id="97ceb7c4621bdd8f62a9cfbb2a879b8e9e999bd7" translate="yes" xml:space="preserve">
          <source>The DBSTAT table only reports on the content of btrees within the database file. Freelist pages, pointer-map pages, and the lock page are omitted from the analysis.</source>
          <target state="translated">DBSTATテーブルは、データベースファイル内のbtreeの内容のみを報告する。フリーリストページ、ポインタマップページ、ロックページは分析から省略されます。</target>
        </trans-unit>
        <trans-unit id="76cd10f2092ca8f1b285dee48937f8c50e332d42" translate="yes" xml:space="preserve">
          <source>The DBSTAT virtual table is a read-only &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt; that returns information about the amount of disk space used to store the content of an SQLite database. Example use cases for the DBSTAT virtual table include the &lt;a href=&quot;sqlanalyze&quot;&gt;sqlite3_analyzer.exe&lt;/a&gt; utility program and the &lt;a href=&quot;https://www.sqlite.org/src/repo-tabsize&quot;&gt;table size pie-chart&lt;/a&gt; in the &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossil-implemented&lt;/a&gt; version control system for SQLite.</source>
          <target state="translated">DBSTAT仮想テーブルは、SQLiteデータベースのコンテンツを格納するために使用されるディスク領域の量に関する情報を返す読み取り専用の&lt;a href=&quot;vtab#epovtab&quot;&gt;同名の仮想テーブル&lt;/a&gt;です。 DBSTAT仮想テーブルの使用例には、&lt;a href=&quot;sqlanalyze&quot;&gt;sqlite3_analyzer.exe&lt;/a&gt;ユーティリティプログラムと、SQLite用に&lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossilで実装された&lt;/a&gt;バージョン管理システムの&lt;a href=&quot;https://www.sqlite.org/src/repo-tabsize&quot;&gt;テーブルサイズの円グラフが含ま&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="53bde0cca31e9e282f188b556d84747d1c6f1e06" translate="yes" xml:space="preserve">
          <source>The DBSTAT virtual table is a read-only &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt; that returns information about which pages of the database files are used by which tables and indexes in the schema. The DBSTAT virtual table is used to implement &lt;a href=&quot;sqlanalyze&quot;&gt;sqlite3_analyzer.exe&lt;/a&gt; utility program, and to help compute the &lt;a href=&quot;https://www.sqlite.org/src/repo-tabsize&quot;&gt;table size pie-chart&lt;/a&gt; in the &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossil-implemented&lt;/a&gt; version control system for SQLite.</source>
          <target state="translated">DBSTAT仮想テーブルは、読み取り専用である&lt;a href=&quot;vtab#epovtab&quot;&gt;同名の仮想テーブル&lt;/a&gt;を返す情報は、データベースファイルのページは、スキーマ内のどのテーブルとインデックスで使用されているかについてのこと。 DBSTAT仮想テーブルは、&lt;a href=&quot;sqlanalyze&quot;&gt;sqlite3_analyzer.exe&lt;/a&gt;ユーティリティプログラムを実装し、&lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossilで実装さ&lt;/a&gt;れたSQLiteのバージョン管理システムで&lt;a href=&quot;https://www.sqlite.org/src/repo-tabsize&quot;&gt;テーブルサイズの円グラフ&lt;/a&gt;を計算するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a9ce5a525fa3a87844d5ab55ef30cdd54b0cc3c2" translate="yes" xml:space="preserve">
          <source>The DBSTAT virtual table is an &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt;, meaning that is not necessary to run &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; to create an instance of the dbstat virtual table before using it. The &quot;dbstat&quot; module name can be used as if it were a table name to query the dbstat virtual table directly. For example:</source>
          <target state="translated">DBSTAT仮想テーブルは&lt;a href=&quot;vtab#epovtab&quot;&gt;同名の仮想テーブルです&lt;/a&gt;。つまり、&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE&lt;/a&gt; VIRTUALTABLEを実行してdbstat仮想テーブルのインスタンスを作成してから使用する必要はありません。「dbstat」モジュール名は、dbstat仮想テーブルを直接照会するためのテーブル名であるかのように使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="f357b6765d9672540c415d35375e9c82ab3dde27" translate="yes" xml:space="preserve">
          <source>The DBSTAT virtual table is available on all &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; when SQLite is built using the &lt;a href=&quot;compile#enable_dbstat_vtab&quot;&gt;SQLITE_ENABLE_DBSTAT_VTAB&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;compile#enable_dbstat_vtab&quot;&gt;SQLITE_ENABLE_DBSTAT_VTAB&lt;/a&gt;コンパイル時オプションを使用して構築されている場合、DBSTAT仮想テーブルはすべての&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続で&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="8e77f3a2af88468cea075512b7c593d618135668" translate="yes" xml:space="preserve">
          <source>The DEFAULT clause specifies a default value to use for the column if no value is explicitly provided by the user when doing an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;. If there is no explicit DEFAULT clause attached to a column definition, then the default value of the column is NULL. An explicit DEFAULT clause may specify that the default value is NULL, a string constant, a blob constant, a signed-number, or any constant expression enclosed in parentheses. A default value may also be one of the special case-independent keywords CURRENT_TIME, CURRENT_DATE or CURRENT_TIMESTAMP. For the purposes of the DEFAULT clause, an expression is considered constant if it contains no sub-queries, column or table references, &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameters&lt;/a&gt;, or string literals enclosed in double-quotes instead of single-quotes.</source>
          <target state="translated">DEFAULT句は、&lt;a href=&quot;lang_insert&quot;&gt;INSERTの&lt;/a&gt;実行時にユーザーが値を明示的に提供しない場合に列に使用するデフォルト値を指定します。列定義に明示的なDEFAULT句がアタッチされていない場合、列のデフォルト値はNULLです。明示的なDEFAULT句は、デフォルト値がNULL、文字列定数、BLOB定数、符号付き数値、または括弧で囲まれた定数式であることを指定できます。デフォルト値は、特殊な大文字と小文字を区別しないキーワードCURRENT_TIME、CURRENT_DATE、またはCURRENT_TIMESTAMPのいずれかである場合もあります。 DEFAULT句では、サブクエリ、列またはテーブル参照、&lt;a href=&quot;lang_expr#varparam&quot;&gt;バインドされたパラメータ&lt;/a&gt;、または単一引用符ではなく二重引用符で囲まれた文字列リテラルが含まれていない場合、式は定数と見なされます。</target>
        </trans-unit>
        <trans-unit id="f30a44f7fde1290a9d66490fe4c7fc9d343db0a2" translate="yes" xml:space="preserve">
          <source>The DELETE command removes records from the table identified by the &lt;a href=&quot;syntax/qualified-table-name&quot;&gt;qualified-table-name&lt;/a&gt;.</source>
          <target state="translated">DELETEコマンドは、&lt;a href=&quot;syntax/qualified-table-name&quot;&gt;qualified-table-nameで&lt;/a&gt;識別されるテーブルからレコードを削除します。</target>
        </trans-unit>
        <trans-unit id="549ed1cfefc84f8dde1745ba5b3bb051dd3b5008" translate="yes" xml:space="preserve">
          <source>The DELETE command without a WHILE clause just removes the database files from the disk, rather than going through and deleting record by record.</source>
          <target state="translated">WHILE句のないDELETEコマンドは、レコードごとにレコードを削除するのではなく、ディスクからデータベースファイルを削除するだけです。</target>
        </trans-unit>
        <trans-unit id="0c69d162dd597ca7eb6e965c55e71ba6c6554cc2" translate="yes" xml:space="preserve">
          <source>The DELETE journaling mode is the normal behavior. In the DELETE mode, the rollback journal is deleted at the conclusion of each transaction. Indeed, the delete operation is the action that causes the transaction to commit. (See the document titled &lt;a href=&quot;atomiccommit&quot;&gt; Atomic Commit In SQLite&lt;/a&gt; for additional detail.)</source>
          <target state="translated">DELETEジャーナリングモードは通常の動作です。DELETEモードでは、各トランザクションの終了時にロールバックジャーナルが削除されます。実際、削除操作はトランザクションをコミットさせるアクションです。（詳細については、&lt;a href=&quot;atomiccommit&quot;&gt;SQLiteのAtomic Commit&lt;/a&gt;というタイトルのドキュメントを参照してください。）</target>
        </trans-unit>
        <trans-unit id="1da9a7936dc2b558a9310f00abb6a148be159cba" translate="yes" xml:space="preserve">
          <source>The DELETE trigger must be fired before the actual delete takes place on the content table. This is so that FTS4 can still retrieve the original values in order to update the full-text index. And the INSERT trigger must be fired after the new row is inserted, so as to handle the case where the rowid is assigned automatically within the system. The UPDATE trigger must be split into two parts, one fired before and one after the update of the content table, for the same reasons.</source>
          <target state="translated">DELETE トリガは、実際の削除がコンテンツテーブル上で行われる前に実行されなければなりません。これは、FTS4がフルテキスト・インデックスを更新するために元の値を取得することができるようにするためです。また、行IDがシステム内で自動的に割り当てられている場合に対応するため、INSERTトリガは、新しい行が挿入された後に発行されなければなりません。同じ理由で、UPDATEトリガは2つの部分に分けなければなりません。</target>
        </trans-unit>
        <trans-unit id="3ab4459caaad95b429957125366d895b4021e494" translate="yes" xml:space="preserve">
          <source>The DELETE-mode locks are stored on the &lt;a href=&quot;fileformat2#lockbyte&quot;&gt;lock-byte page&lt;/a&gt; of the main database file. Only SQLITE_LOCK_SHARED and SQLITE_LOCK_EXCLUSIVE are factors for WAL-mode databases. The other locking states are used in rollback-mode, but not in WAL-mode.</source>
          <target state="translated">DELETEモードのロックは、メインデータベースファイルの&lt;a href=&quot;fileformat2#lockbyte&quot;&gt;ロックバイトページ&lt;/a&gt;に格納されます。SQLITE_LOCK_SHAREDとSQLITE_LOCK_EXCLUSIVEだけがWALモードデータベースの要素です。他のロック状態はロールバックモードで使用されますが、WALモードでは使用されません。</target>
        </trans-unit>
        <trans-unit id="577fca03e1d22d54957a27f6f46f602e956a7f46" translate="yes" xml:space="preserve">
          <source>The DISTINCT keyword in an aggregate query</source>
          <target state="translated">集計クエリの DISTINCT キーワード。</target>
        </trans-unit>
        <trans-unit id="5960207cc3ff80c8b76aafd25f9f8b94d8c8f42b" translate="yes" xml:space="preserve">
          <source>The DISTINCT keyword now will sometimes use an INDEX if an appropriate index is available and the optimizer thinks its use might be advantageous.</source>
          <target state="translated">現在のDISTINCTキーワードは、適切なインデックスが利用可能で、オプティマイザがその使用が有利であると考えている場合には、INDEXを使用することがあります。</target>
        </trans-unit>
        <trans-unit id="fc7140e369fedc4714b9ea0083c995ff08e24d5b" translate="yes" xml:space="preserve">
          <source>The DISTINCT keyword on an aggregate query is implemented by creating a transient index in a temporary file and storing each result row in that index. As new result rows are computed a check is made to see if they already exist in the transient index and if they do the new result row is discarded.</source>
          <target state="translated">集約クエリの DISTINCT キーワードは、一時ファイルに一時インデックスを作成し、そのインデックスに各結果行を格納することで実装されます。新しい結果行が計算されると、その結果行が既にトランジェントインデックスに存在するかどうかがチェックされ、存在する場合は新しい結果行が破棄されます。</target>
        </trans-unit>
        <trans-unit id="3c8c0a43ed7404e0a2eaed887060f73b06109a61" translate="yes" xml:space="preserve">
          <source>The DROP INDEX statement removes an index added with the &lt;a href=&quot;lang_createindex&quot;&gt;CREATE INDEX&lt;/a&gt; statement. The index is completely removed from the disk. The only way to recover the index is to reenter the appropriate &lt;a href=&quot;lang_createindex&quot;&gt;CREATE INDEX&lt;/a&gt; command.</source>
          <target state="translated">DROP INDEXステートメントは、&lt;a href=&quot;lang_createindex&quot;&gt;CREATE INDEX&lt;/a&gt;ステートメントで追加されたインデックスを削除します。インデックスがディスクから完全に削除されます。インデックスを回復する唯一の方法は、適切な&lt;a href=&quot;lang_createindex&quot;&gt;CREATE INDEX&lt;/a&gt;コマンドを再入力することです。</target>
        </trans-unit>
        <trans-unit id="bf79716c365aa3a9096fb80997c218efa52bf726" translate="yes" xml:space="preserve">
          <source>The DROP TABLE statement removes a table added with the &lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt; statement. The name specified is the table name. The dropped table is completely removed from the database schema and the disk file. The table can not be recovered. All indices and triggers associated with the table are also deleted.</source>
          <target state="translated">DROP TABLEステートメントは、&lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt;ステートメントで追加されたテーブルを削除します。指定された名前はテーブル名です。ドロップされたテーブルは、データベーススキーマとディスクファイルから完全に削除されます。テーブルは回復できません。テーブルに関連付けられているすべてのインデックスとトリガーも削除されます。</target>
        </trans-unit>
        <trans-unit id="8134f9df85fa3c68e953f09b317e3c27f145a52e" translate="yes" xml:space="preserve">
          <source>The DROP TRIGGER statement removes a trigger created by the &lt;a href=&quot;lang_createtrigger&quot;&gt;CREATE TRIGGER&lt;/a&gt; statement. Once removed, the trigger definition is no longer present in the sqlite_master (or sqlite_temp_master) table and is not fired by any subsequent INSERT, UPDATE or DELETE statements.</source>
          <target state="translated">DROP TRIGGERステートメントは、&lt;a href=&quot;lang_createtrigger&quot;&gt;CREATE TRIGGER&lt;/a&gt;ステートメントによって作成されたトリガーを削除します。削除されると、トリガー定義はsqlite_master（またはsqlite_temp_master）テーブルに存在しなくなり、後続のINSERT、UPDATE、またはDELETEステートメントによって起動されません。</target>
        </trans-unit>
        <trans-unit id="5c4386299e0353e3df19809c98731f022556c566" translate="yes" xml:space="preserve">
          <source>The DROP VIEW statement removes a view created by the &lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW&lt;/a&gt; statement. The view definition is removed from the database schema, but no actual data in the underlying base tables is modified.</source>
          <target state="translated">DROP VIEWステートメントは、&lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW&lt;/a&gt;ステートメントによって作成されたビューを削除します。ビュー定義はデータベーススキーマから削除されますが、基になるベーステーブルの実際のデータは変更されません。</target>
        </trans-unit>
        <trans-unit id="81bf67a5e4628332f9b58ee8c6d173a4c4f911e2" translate="yes" xml:space="preserve">
          <source>The Dbbe abstraction and the GDBM and memory drivers were removed.</source>
          <target state="translated">Dbbeの抽象化とGDBMとメモリドライバを削除しました。</target>
        </trans-unit>
        <trans-unit id="b8ac6ee150153e29d6eb02ac712357b33cd11445" translate="yes" xml:space="preserve">
          <source>The Default Page Size Change of SQLite 3.12.0</source>
          <target state="translated">SQLite 3.12.0のデフォルトページサイズの変更について</target>
        </trans-unit>
        <trans-unit id="9fa7fe014de7884ad65be67fee11ca70cb61f51e" translate="yes" xml:space="preserve">
          <source>The EXCEPT operator for compound queries is implemented by creating a transient index in a temporary file, storing the results of the left subquery in this transient index, then removing the result from right subquery from the transient index, and finally walking the index from beginning to end to obtain the final output.</source>
          <target state="translated">複合クエリのEXCEPT演算子は、一時ファイルに一時インデックスを作成し、左の副問い合わせの結果をこの一時インデックスに格納し、右の副問い合わせの結果を一時インデックスから削除し、最後にインデックスを最初から最後まで歩いて最終出力を得ることで実装されています。</target>
        </trans-unit>
        <trans-unit id="5ae9f97f03202a131a787390ace280bc0296d78b" translate="yes" xml:space="preserve">
          <source>The EXISTS operator</source>
          <target state="translated">EXISTS演算子</target>
        </trans-unit>
        <trans-unit id="84773fe1424e26217a7a2df622779c7708ba171b" translate="yes" xml:space="preserve">
          <source>The EXISTS operator always evaluates to one of the integer values 0 and 1. If executing the SELECT statement specified as the right-hand operand of the EXISTS operator would return one or more rows, then the EXISTS operator evaluates to 1. If executing the SELECT would return no rows at all, then the EXISTS operator evaluates to 0.</source>
          <target state="translated">EXISTS演算子は常に0と1の整数値のいずれかに評価されます。 EXISTS演算子の右辺のオペランドとして指定されたSELECT文を実行すると1行以上の行が返される場合、EXISTS演算子は1と評価されます。 SELECTを実行すると全く行が返されない場合、EXISTS演算子は0と評価されます。</target>
        </trans-unit>
        <trans-unit id="93ef1c61206801602304d02bd0314e2e805ed955" translate="yes" xml:space="preserve">
          <source>The EXPLAIN QUERY PLAN command is described in &lt;a href=&quot;eqp&quot;&gt;more detail here&lt;/a&gt;.</source>
          <target state="translated">EXPLAIN QUERY PLANコマンドについては、&lt;a href=&quot;eqp&quot;&gt;ここで詳しく説明します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c62b11f7e5c5d50c87cb37698a2dd96b4ced3ac8" translate="yes" xml:space="preserve">
          <source>The EXPLAIN and EXPLAIN QUERY PLAN prefixes affect the behavior of running a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; using &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;. The process of generating a new prepared statement using &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; or similar is (mostly) unaffected by EXPLAIN. (The exception to the previous sentence is that some special opcodes used by EXPLAIN QUERY PLAN are omitted when building an EXPLAIN QUERY PLAN prepared statement, as a performance optimization.)</source>
          <target state="translated">EXPLAINおよびEXPLAIN QUERY PLANプレフィックスは、&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;を使用して&lt;a href=&quot;c3ref/stmt&quot;&gt;準備済みステートメント&lt;/a&gt;を実行する動作に影響します。&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;などを使用して新しい準備済みステートメントを生成するプロセスは、（ほとんど）EXPLAINの影響を受けません。（前の文の例外は、EXPLAIN QUERY PLAN準備済みステートメントを構築するときに、パフォーマンスの最適化として、EXPLAIN QUERY PLANで使用されるいくつかの特別なオペコードが省略されることです。）</target>
        </trans-unit>
        <trans-unit id="c3ee00b5769ef7f7d7fa11249f75b6c728fff5d2" translate="yes" xml:space="preserve">
          <source>The Error And Warning Log</source>
          <target state="translated">エラーと警告ログ</target>
        </trans-unit>
        <trans-unit id="d0e00804aea114acdf8c7482e29e4b6fc1dd022a" translate="yes" xml:space="preserve">
          <source>The FAIL behavior only works for uniqueness, NOT NULL, and CHECK constraints. A &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraint&lt;/a&gt; violation causes an ABORT.</source>
          <target state="translated">FAIL動作は、一意性、NOT NULL、およびCHECK制約に対してのみ機能します。&lt;a href=&quot;foreignkeys&quot;&gt;外部キー制約&lt;/a&gt;違反がABORTが発生します。</target>
        </trans-unit>
        <trans-unit id="adadb0f9269151516b0ccaba4b14756b3c80bd9b" translate="yes" xml:space="preserve">
          <source>The FOR EACH STATEMENT clause on a trigger now causes a syntax error. It used to be silently ignored.</source>
          <target state="translated">トリガ上の FOR EACH STATEMENT 句は、構文エラーを引き起こすようになりました。以前は無視されていました。</target>
        </trans-unit>
        <trans-unit id="9cd48fd724eca1ec736eda16ef97971212fd20e2" translate="yes" xml:space="preserve">
          <source>The FTS modules may be compiled to use one of two slightly different versions of the full-text query syntax, the &quot;standard&quot; query syntax and the &quot;enhanced&quot; query syntax. The basic term, term-prefix, phrase and NEAR queries described above are the same in both versions of the syntax. The way in which set operations are specified is slightly different. The following two sub-sections describe the part of the two query syntaxes that pertains to set operations. Refer to the description of how to &lt;a href=&quot;fts3#compiling_and_enabling_fts3_and_fts4&quot;&gt;compile fts&lt;/a&gt; for compilation notes.</source>
          <target state="translated">FTSモジュールは、フルテキストクエリ構文の「標準」クエリ構文と「拡張」クエリ構文の2つのわずかに異なるバージョンの1つを使用するようにコンパイルできます。上記の基本的な用語、用語の接頭辞、フレーズ、およびNEARクエリは、両方のバージョンの構文で同じです。集合演算の指定方法は少し異なります。次の2つのサブセクションでは、2つのクエリ構文のうち、集合演算に関連する部分について説明します。コンパイルの注意事項については&lt;a href=&quot;fts3#compiling_and_enabling_fts3_and_fts4&quot;&gt;、ftsのコンパイル&lt;/a&gt;方法の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="b82e31fa29aba07c9204f92b3f977e0bafebbf9f" translate="yes" xml:space="preserve">
          <source>The FTS query syntax (right hand side of the MATCH operator) has changed in some ways. The FTS5 syntax is quite close to the FTS4 &quot;enhanced syntax&quot;. The main difference is that FTS5 is fussier about unrecognized punctuation characters and similar within query strings. Most queries that work with FTS3/4 should also work with FTS5, and those that do not should return parse errors.</source>
          <target state="translated">FTSクエリの構文(MATCH演算子の右側)がいくつか変更されています。FTS5の構文は、FTS4の「拡張構文」にかなり近いです。主な違いは、FTS5は、認識されていない句読点文字やクエリ文字列内の類似文字についてより慎重になっていることです。FTS3/4で動作するほとんどのクエリはFTS5でも動作し、そうでないクエリはパースエラーを返すはずです。</target>
        </trans-unit>
        <trans-unit id="452e2c3759f6eb486841492aa116e202a1ab1f44" translate="yes" xml:space="preserve">
          <source>The FTS table column number to extract the returned fragments of text from. Columns are numbered from left to right starting with zero. A negative value indicates that the text may be extracted from any column.</source>
          <target state="translated">返されたテキストの断片を抽出するFTSテーブルのカラム番号。カラムは、ゼロから始まる左から右に番号が付けられています。負の値は、どの列からでもテキストを抽出できることを示します。</target>
        </trans-unit>
        <trans-unit id="e03bf1e933cfbb832357f37ab56f4975c4a387f7" translate="yes" xml:space="preserve">
          <source>The FTS3 and FTS4 extension modules allows users to create special tables with a built-in full-text index (hereafter &quot;FTS tables&quot;). The full-text index allows the user to efficiently query the database for all rows that contain one or more words (hereafter &quot;tokens&quot;), even if the table contains many large documents.</source>
          <target state="translated">FTS3およびFTS4の拡張モジュールでは、ユーザは、フルテキストインデックスを内蔵した特殊なテーブル(以下、「FTSテーブル」という)を作成することができます。フルテキストインデックスを使用することで、テーブルに大きな文書が多く含まれている場合でも、1つ以上の単語(以下、「トークン」という)を含むすべての行を効率的にデータベースに問い合わせることができます。</target>
        </trans-unit>
        <trans-unit id="7d4bac9786b108503576084f19784d9481dfe5de" translate="yes" xml:space="preserve">
          <source>The FTS3 and FTS4 modules provide three special SQL scalar functions that may be useful to the developers of full-text query systems: &quot;snippet&quot;, &quot;offsets&quot; and &quot;matchinfo&quot;. The purpose of the &quot;snippet&quot; and &quot;offsets&quot; functions is to allow the user to identify the location of queried terms in the returned documents. The &quot;matchinfo&quot; function provides the user with metrics that may be useful for filtering or sorting query results according to relevance.</source>
          <target state="translated">FTS3 および FTS4 モジュールは、フルテキストクエリシステムの開発者にとって有用な 3 つの特別な SQL スカラー関数を提供します。&quot;snippet&quot;、&quot;offsets&quot;、&quot;matchinfo &quot;です。snippet&quot; と &quot;offsets&quot; 関数の目的は、返されたドキュメントの中のクエリされた用語の位置をユーザが特定できるようにすることです。matchinfo &quot;関数は、関連性に応じてクエリ結果をフィルタリングしたり、ソートしたりするのに便利なメトリクスをユーザに提供します。</target>
        </trans-unit>
        <trans-unit id="cd165aec23f192a3f9f07347a0254f2d27b32b66" translate="yes" xml:space="preserve">
          <source>The FTS3 extension has undergone a major rework and cleanup. New &lt;a href=&quot;fts3&quot;&gt;FTS3 documentation&lt;/a&gt; is now available.</source>
          <target state="translated">FTS3拡張機能は、大幅な手直しとクリーンアップが行われました。新しい&lt;a href=&quot;fts3&quot;&gt;FTS3ドキュメント&lt;/a&gt;が利用可能になりました。</target>
        </trans-unit>
        <trans-unit id="9cae97c9c8daf8017ea793bf4be64df945be883c" translate="yes" xml:space="preserve">
          <source>The FTS3/4 &quot;automerge=X&quot; command has been replaced by the &lt;a href=&quot;fts5#the_automerge_configuration_option&quot;&gt;FTS5 automerge option&lt;/a&gt;.</source>
          <target state="translated">FTS3 / 4 &quot;automerge = X&quot;コマンドは、&lt;a href=&quot;fts5#the_automerge_configuration_option&quot;&gt;FTS5自動マージオプションに&lt;/a&gt;置き換えられました。</target>
        </trans-unit>
        <trans-unit id="e8ba1806c7cd7bdfbbc2b404c832b1beab23a209" translate="yes" xml:space="preserve">
          <source>The FTS3/4 &quot;merge=X,Y&quot; command has been replaced by the &lt;a href=&quot;fts5#the_merge_command&quot;&gt;FTS5 merge command&lt;/a&gt;.</source>
          <target state="translated">FTS3 / 4の「merge = X、Y」コマンドは、&lt;a href=&quot;fts5#the_merge_command&quot;&gt;FTS5マージコマンドに&lt;/a&gt;置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b2c4e64578a5475fd4fbd32b9347a70fbc56baad" translate="yes" xml:space="preserve">
          <source>The FTS4 prefix option causes FTS to index term prefixes of specified lengths in the same way that it always indexes complete terms. The prefix option must be set to a comma separated list of positive non-zero integers. For each value N in the list, prefixes of length N bytes (when encoded using UTF-8) are indexed. FTS4 uses term prefix indexes to speed up &lt;a href=&quot;fts3#termprefix&quot;&gt;prefix queries&lt;/a&gt;. The cost, of course, is that indexing term prefixes as well as complete terms increases the database size and slows down write operations on the FTS4 table.</source>
          <target state="translated">FTS4接頭辞オプションを使用すると、FTSは常に完全な用語にインデックスを付けるのと同じ方法で、指定された長さの用語プレフィックスにインデックスを付けます。 prefixオプションは、ゼロ以外の正の整数のコンマ区切りリストに設定する必要があります。リストの各値Nについて、長さNバイトのプレフィックス（UTF-8を使用してエンコードされた場合）にインデックスが付けられます。 FTS4は、プレフィックスインデックスを使用して、&lt;a href=&quot;fts3#termprefix&quot;&gt;プレフィックスクエリ&lt;/a&gt;を高速化します。もちろん、コストは、用語のプレフィックスと完全な用語のインデックス付けにより、データベースサイズが増加し、FTS4テーブルへの書き込み操作が遅くなることです。</target>
        </trans-unit>
        <trans-unit id="f3623dd8b5a2a6147fa4bef6afa8dea8c88c6337" translate="yes" xml:space="preserve">
          <source>The F_FULLSYNC ioctl (currently only supported on Mac OS X) is disabled if the synchronous pragma is set to something other than &quot;full&quot;.</source>
          <target state="translated">F_FULLSYNC ioctl (現在は Mac OS X でのみサポートされています)は、同期プラグマが &quot;full&quot; 以外のものに設定されている場合には無効になります。</target>
        </trans-unit>
        <trans-unit id="4a8e5028bc3ed89b6a1dc3d8dc7eba9bd090d027" translate="yes" xml:space="preserve">
          <source>The Fossil NGQP Upgrade Case Study</source>
          <target state="translated">フォッシルNGQPのアップグレード事例</target>
        </trans-unit>
        <trans-unit id="6dc92de118e5e87426474c7d89d8139659caa059" translate="yes" xml:space="preserve">
          <source>The Fossil performance problem described in the previous section of this document arose because there were over ten-thousand entries in the TAGXREF table with the same value for the left-most column (the TAGID column) of the TAGXREF_I1 index.</source>
          <target state="translated">このドキュメントの前のセクションで説明したFossilパフォーマンスの問題は、TAGXREF_I1インデックスの左端の列(TAGID列)に同じ値を持つTAGXREFテーブルのエントリが1万件以上あったために発生しました。</target>
        </trans-unit>
        <trans-unit id="d2cc3db361bc3155e6c06330a65fa4635f5425d3" translate="yes" xml:space="preserve">
          <source>The Fossil view clearly shows that the branch was eventually merged back into trunk. It shows where the branch started, and it shows two occasions where changes on trunk were merged into the branch. GitHub shows none of this. In fact, the GitHub display is mostly useless in trying to figure out what happened.</source>
          <target state="translated">Fossil ビューでは、ブランチが最終的にトランクにマージされたことがはっきりと示されています。ブランチがどこから始まったのか、そして trunk 上の変更がブランチにマージされたことが二度ほど示されています。しかし、GitHub にはこのようなことは何も表示されません。実際、GitHub の表示は、何が起こったのかを知る上でほとんど役に立たないのです。</target>
        </trans-unit>
        <trans-unit id="6b63744d939cc984f1b96440853e8df6692826ba" translate="yes" xml:space="preserve">
          <source>The Fts5PhraseIter structure is defined above. Applications should not modify this structure directly - it should only be used as shown above with the xPhraseFirst() and xPhraseNext() API methods (and by xPhraseFirstColumn() and xPhraseNextColumn() as illustrated below).</source>
          <target state="translated">Fts5PhraseIter 構造体は上記で定義されています。アプリケーションはこの構造体を直接変更してはいけません-上で示したように xPhraseFirst()および xPhraseNext()API メソッドを使用してのみ使用してください (以下に示すように xPhraseFirstColumn()および xPhraseNextColumn()によっても使用できます)。</target>
        </trans-unit>
        <trans-unit id="a5efd19f10743bd231ab41e35fd5ac44fc6fbe77" translate="yes" xml:space="preserve">
          <source>The GLOB operator is always case sensitive. The column on the left side of the GLOB operator must always use the built-in BINARY collating sequence or no attempt will be made to optimize that operator with indices.</source>
          <target state="translated">GLOB演算子は常に大文字と小文字を区別します。GLOB演算子の左側の列は、常に組み込みのBINARY照合シーケンスを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="ebb21a9ebdf2dcd06a6d1e05cc13a1948a1a0378" translate="yes" xml:space="preserve">
          <source>The GLOB operator is similar to LIKE but uses the Unix file globbing syntax for its wildcards. Also, GLOB is case sensitive, unlike LIKE. Both GLOB and LIKE may be preceded by the NOT keyword to invert the sense of the test. The infix GLOB operator is implemented by calling the function &lt;a href=&quot;lang_corefunc#glob&quot;&gt;glob(&lt;i&gt;Y&lt;/i&gt;,&lt;i&gt;X&lt;/i&gt;)&lt;/a&gt; and can be modified by overriding that function.</source>
          <target state="translated">GLOB演算子はLIKEに似ていますが、ワイルドカードにUnixファイルグロビング構文を使用します。また、GLOBはLIKEとは異なり、大文字と小文字が区別されます。テストの意味を逆にするために、GLOBとLIKEの前にNOTキーワードを付けることができます。内接GLOB演算子は、関数&lt;a href=&quot;lang_corefunc#glob&quot;&gt;glob（&lt;i&gt;Y&lt;/i&gt;、&lt;i&gt;X&lt;/i&gt;）&lt;/a&gt;を呼び出すことで実装され、その関数をオーバーライドすることで変更できます。</target>
        </trans-unit>
        <trans-unit id="6bf488312da9736e109b0de15500f2677c1ccca1" translate="yes" xml:space="preserve">
          <source>The Geopoly Interface To The SQLite R*Tree Module</source>
          <target state="translated">SQLite R*Treeモジュールへのジオポリインターフェース</target>
        </trans-unit>
        <trans-unit id="768b26bb16f751e006af08115829d3719bded2a3" translate="yes" xml:space="preserve">
          <source>The Geopoly module is an alternative interface to the &lt;a href=&quot;rtree&quot;&gt;R-Tree extension&lt;/a&gt; that uses the &lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt; notation (&lt;a href=&quot;https://tools.ietf.org/html/rfc7946&quot;&gt;RFC-7946&lt;/a&gt;) to describe two-dimensional polygons. Geopoly includes functions for detecting when one polygon is contained within or overlaps with another, for computing the area enclosed by a polygon, for doing linear transformations of polygons, for rendering polygons as &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;SVG&lt;/a&gt;, and other similar operations.</source>
          <target state="translated">Geopolyモジュールは、&lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt;表記（&lt;a href=&quot;https://tools.ietf.org/html/rfc7946&quot;&gt;RFC-7946&lt;/a&gt;）を使用して2次元ポリゴンを記述する&lt;a href=&quot;rtree&quot;&gt;Rツリー拡張の&lt;/a&gt;代替インターフェースです。 Geopolyには、1つのポリゴンが別のポリゴンに含まれるか、または別のポリゴンと重複することを検出する関数、ポリゴンで囲まれた領域を計算する関数、ポリゴンの線形変換を実行する関数、ポリゴンを&lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;SVG&lt;/a&gt;としてレンダリングする関数、およびその他の同様の操作が含まれます。</target>
        </trans-unit>
        <trans-unit id="a237ed77d23b0a3e93b7e807216496727ce2d486" translate="yes" xml:space="preserve">
          <source>The Geopoly module only understands a small subset of GeoJSON, but a critical subset. In particular, GeoJSON understands the JSON array of vertexes that describes a simple polygon.</source>
          <target state="translated">GeopolyモジュールはGeoJSONの小さなサブセットしか理解していませんが、重要なサブセットです。特に、GeoJSONは単純な多角形を記述する頂点のJSON配列を理解します。</target>
        </trans-unit>
        <trans-unit id="be3160b95c10c837d23b555d2d76ced7f5c9c397" translate="yes" xml:space="preserve">
          <source>The ICU tokenizer implementation is very simple. It splits the input text according to the ICU rules for finding word boundaries and discards any tokens that consist entirely of white-space. This may be suitable for some applications in some locales, but not all. If more complex processing is required, for example to implement stemming or discard punctuation, this can be done by creating a tokenizer implementation that uses the ICU tokenizer as part of its implementation.</source>
          <target state="translated">ICU トークナイザーの実装は非常にシンプルです。それは、単語の境界を見つけるためのICUのルールに従って入力テキストを分割し、完全に空白で構成されているトークンはすべて破棄します。これは、いくつかのロケールでのアプリケーションには適しているかもしれませんが、すべてのアプリケーションに適しているわけではありません。より複雑な処理が必要な場合は、例えばステミングを実装したり、句読点を破棄したりするために、ICU のトークナイザーを実装の一部として使用するトークナイザーの実装を作成することで、これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="a6ddce9bb57f20218d7a75f29be10f1ad340213b" translate="yes" xml:space="preserve">
          <source>The ICU tokenizer is not available.</source>
          <target state="translated">ICUのトークンライザーは利用できません。</target>
        </trans-unit>
        <trans-unit id="975a07114fdeda8b12153b2d0d474cd1f76f40a8" translate="yes" xml:space="preserve">
          <source>The IN and NOT IN operators</source>
          <target state="translated">INとNOT INの演算子</target>
        </trans-unit>
        <trans-unit id="ae86038950b2d471648c3c6d1b5cdb4844f71708" translate="yes" xml:space="preserve">
          <source>The IN and NOT IN operators take an expression on the left and a list of values or a subquery on the right. When the right operand of an IN or NOT IN operator is a subquery, the subquery must have the same number of columns as there are columns in the &lt;a href=&quot;rowvalue&quot;&gt;row value&lt;/a&gt; of the left operand. The subquery on the right of an IN or NOT IN operator must be a scalar subquery if the left expression is not a &lt;a href=&quot;rowvalue&quot;&gt;row value&lt;/a&gt; expression. If the right operand of an IN or NOT IN operator is a list of values, each of those values must be scalars and the left expression must also be a scalar. The right-hand side of an IN or NOT IN operator can be a table</source>
          <target state="translated">INおよびNOT IN演算子は、左側に式、右側に値のリストまたはサブクエリを受け取ります。INまたはNOT IN演算子の右側のオペランドがサブクエリである場合、サブクエリの列の数は、左側のオペランドの&lt;a href=&quot;rowvalue&quot;&gt;行の値&lt;/a&gt;の列と同じでなければなりません。INまたはNOT IN演算子の右側のサブクエリは、左側の式が&lt;a href=&quot;rowvalue&quot;&gt;行値&lt;/a&gt;式でない場合、スカラーサブクエリでなければなりません。INまたはNOT IN演算子の右側のオペランドが値のリストである場合、それらの値はそれぞれスカラーでなければならず、左側の式もスカラーでなければなりません。INまたはNOT IN演算子の右側はテーブルにすることができます</target>
        </trans-unit>
        <trans-unit id="a79accc7fc2bc30ac0fead525b227ad7d9b1df52" translate="yes" xml:space="preserve">
          <source>The IN operator is now a candidate for optimization even if the left-hand side is not the left-most term of the index. Multiple IN operators can be used with the same index.</source>
          <target state="translated">IN演算子は、左辺がインデックスの左端項でなくても最適化の候補になるようになりました。同じインデックスで複数のIN演算子を使用することができます。</target>
        </trans-unit>
        <trans-unit id="84955ffcf9bdb1365dbcf57de003852e491d0f74" translate="yes" xml:space="preserve">
          <source>The IN-early-out optimization: When doing a look-up on a multi-column index and an IN operator is used on a column other than the left-most column, then if no rows match against the first IN value, check to make sure there exist rows that match the columns to the right before continuing with the next IN value.</source>
          <target state="translated">IN-early-out最適化。複数列インデックスの検索を行い、左端の列以外の列にIN演算子を使用した場合、最初のIN値に一致する行がない場合、次のIN値に進む前に右端の列に一致する行が存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="c69ea675978574ca724f9055d892093e6e8c8e6f" translate="yes" xml:space="preserve">
          <source>The INDEXED BY Clause</source>
          <target state="translated">INDEXED BY条項</target>
        </trans-unit>
        <trans-unit id="c7f2969be40943bb47a40ea44d17f6c5eac58206" translate="yes" xml:space="preserve">
          <source>The INDEXED BY and NOT INDEXED clauses are not allowed on DELETE statements within triggers.</source>
          <target state="translated">トリガー内のDELETE文では、INDEXED BY句とNOT INDEXED句は使用できません。</target>
        </trans-unit>
        <trans-unit id="f74b8a2cb9b68ac44cbe1110518350bde980f1d2" translate="yes" xml:space="preserve">
          <source>The INDEXED BY and NOT INDEXED clauses are not allowed on UPDATE statements within triggers.</source>
          <target state="translated">トリガー内のUPDATE文では、INDEXED BY句とNOT INDEXED句は使用できません。</target>
        </trans-unit>
        <trans-unit id="b6f68ce27c8cff5cc2a071306e82e684ac57bb2a" translate="yes" xml:space="preserve">
          <source>The INDEXED BY and NOT INDEXED clauses are not supported for &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; and &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; statements.</source>
          <target state="translated">INDEXED BYおよびNOT INDEXED句は、&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;および&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;ステートメントではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c219f61fe4cd1e708d4fe79c89efa6776605815d" translate="yes" xml:space="preserve">
          <source>The INDEXED BY clause is &lt;em&gt;not&lt;/em&gt; intended for use in tuning the performance of a query. The intent of the INDEXED BY clause is to raise a run-time error if a schema change, such as dropping or creating an index, causes the query plan for a time-sensitive query to change. The INDEXED BY clause is designed to help detect undesirable query plan changes during regression testing. Application developers are admonished to omit all use of INDEXED BY during application design, implementation, testing, and tuning. If INDEXED BY is to be used at all, it should be inserted at the very end of the development process when &quot;locking down&quot; a design.</source>
          <target state="translated">INDEXED BY句は、クエリのパフォーマンスの調整に使用するためのものではあり&lt;em&gt;ません&lt;/em&gt;。 INDEXED BY句の目的は、インデックスの削除や作成などのスキーマ変更により、時間に依存するクエリのクエリプランが変更された場合に、実行時エラーを発生させることです。 INDEXED BY句は、回帰テスト中に望ましくないクエリプランの変更を検出できるように設計されています。アプリケーション開発者は、アプリケーションの設計、実装、テスト、およびチューニングの際にINDEXED BYをすべて使用しないようにしてください。 INDEXED BYを使用する場合は、デザインを「ロックダウン」するときに、開発プロセスの最後に挿入する必要があります。</target>
        </trans-unit>
        <trans-unit id="2f4cc404750644d945353fc113cb9dba262e1c3b" translate="yes" xml:space="preserve">
          <source>The INDEXED BY phrase forces the &lt;a href=&quot;optoverview&quot;&gt;SQLite query planner&lt;/a&gt; to use a particular named index on a &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;, &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;, or &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; statement. The INDEXED BY phrase is an SQLite extension and is not portable to other SQL database engines.</source>
          <target state="translated">INDEXED BY句は、&lt;a href=&quot;optoverview&quot;&gt;SQLiteクエリプランナー&lt;/a&gt;が&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;、&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;、または&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;ステートメントで特定の名前付きインデックスを使用するように強制します。INDEXED BY句はSQLiteの拡張機能であり、他のSQLデータベースエンジンには移植できません。</target>
        </trans-unit>
        <trans-unit id="272773ebe8d5f9cc82e317b171f77d7379a1e581" translate="yes" xml:space="preserve">
          <source>The INSERT change remains in the changegroup. The values in the INSERT change are modified as if the row was inserted by the existing change and then updated according to the new change.</source>
          <target state="translated">INSERT 変更は changegroup に残っています。INSERT変更の値は、既存の変更によって行が挿入されたかのように変更され、新しい変更に従って更新されます。</target>
        </trans-unit>
        <trans-unit id="110ff0538d0b835d343c6aa7fc9be56d02650901" translate="yes" xml:space="preserve">
          <source>The INSERT statement above adds a new row to the sqlite_master table that defines a table &quot;t2&quot; having the same on-disk format as index &quot;t1bc&quot; and pointing to the same b-tree. After adding this sqlite_master table entry, it is necessary to close and reopen the database in order to get SQLite to reread the schema. Then the &quot;t2&quot; table can be queried to see the content of the &quot;t1bc&quot; index.</source>
          <target state="translated">上のINSERT文は、インデックス &quot;t1bc &quot;と同じディスク上のフォーマットを持ち、同じb-treeを指すテーブル &quot;t2 &quot;を定義するsqlite_masterテーブルに新しい行を追加しています。このsqlite_masterテーブルエントリを追加した後、SQLiteにスキーマを再読ませるために、データベースを閉じて再オープンする必要があります。その後、&quot;t2 &quot;テーブルをクエリして、&quot;t1bc &quot;インデックスの内容を確認することができます。</target>
        </trans-unit>
        <trans-unit id="cfe3ae8d2c81f2e60d52f407b340e91b2e1ca71c" translate="yes" xml:space="preserve">
          <source>The INSERT statement above adds a new row to the sqlite_schema table that defines a table &quot;t2&quot; having the same on-disk format as index &quot;t1bc&quot; and pointing to the same b-tree. After adding this sqlite_schema table entry, it is necessary to close and reopen the database in order to get SQLite to reread the schema. Then the &quot;t2&quot; table can be queried to see the content of the &quot;t1bc&quot; index.</source>
          <target state="translated">上のINSERT文は、インデックス &quot;t1bc &quot;と同じディスク上のフォーマットを持ち、同じb-treeを指すテーブル &quot;t2 &quot;を定義するsqlite_schemaテーブルに新しい行を追加しています。このsqlite_schemaテーブルエントリを追加した後、SQLiteにスキーマを再読ませるために、データベースを閉じて再オープンする必要があります。その後、&quot;t2 &quot;テーブルをクエリして、&quot;t1bc &quot;インデックスの内容を見ることができます。</target>
        </trans-unit>
        <trans-unit id="08d21ad99ed5f4abc02a63a43ee6d040107fe785" translate="yes" xml:space="preserve">
          <source>The INSERT statement comes in three basic forms.</source>
          <target state="translated">INSERT文には3つの基本的な形があります。</target>
        </trans-unit>
        <trans-unit id="47c4a334a3fe174333881ca555ae014ebc13040d" translate="yes" xml:space="preserve">
          <source>The INTERSECT operator for compound queries is implemented by creating two separate transient indices, each in a separate temporary file. The left and right subqueries are evaluated each into a separate transient index. Then the two indices are walked together and entries that appear in both indices are output.</source>
          <target state="translated">複合クエリの INTERSECT 演算子は、別々のテンポラリファイルに 2 つの別々のトランジェントインデックスを作成することで実装されます。左と右のサブクエリは、それぞれ別個のトランジェントインデックスに評価されます。その後、2つのインデックスが一緒にウォークされ、両方のインデックスに現れるエントリが出力されます。</target>
        </trans-unit>
        <trans-unit id="24b1f06632bef12995013965847655934cbf7975" translate="yes" xml:space="preserve">
          <source>The Idx1 index is scanned from top to bottom (or from bottom to top if &quot;ORDER BY fruit DESC&quot; is used) in order to find the rowids for each item in order by fruit. Then for each rowid, a binary search is done to lookup and output that row. In this way, the output appears in the requested order without the need to gather the entire output and sort it using a separate step.</source>
          <target state="translated">Idx1 インデックスを上から下(「ORDER BY fruit DESC」を使用している場合は下から上)にスキャンして、各項目の行 ID を果実順に探す。そして、各行 ID に対してバイナリ検索を行い、その行を探し出して出力します。この方法では、出力全体を集めて別のステップでソートする必要がなく、出力は要求された順番で表示されます。</target>
        </trans-unit>
        <trans-unit id="2840ff0c49d75f050e9ec79f4cca0962bc4cd995" translate="yes" xml:space="preserve">
          <source>The JSON1 Extension</source>
          <target state="translated">JSON1 拡張機能</target>
        </trans-unit>
        <trans-unit id="9880ae6264f9c31927d61592bb6cec20147ead44" translate="yes" xml:space="preserve">
          <source>The LIKE operator can be made case sensitive using the &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like pragma&lt;/a&gt;.</source>
          <target state="translated">LIKE演算子は、&lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_likeプラグマ&lt;/a&gt;を使用して大文字と小文字を区別することができます。</target>
        </trans-unit>
        <trans-unit id="d553aca858e8d5460148027e2f586810cb9b2c44" translate="yes" xml:space="preserve">
          <source>The LIKE operator does a pattern matching comparison. The operand to the right of the LIKE operator contains the pattern and the left hand operand contains the string to match against the pattern. A percent symbol (&quot;%&quot;) in the LIKE pattern matches any sequence of zero or more characters in the string. An underscore (&quot;_&quot;) in the LIKE pattern matches any single character in the string. Any other character matches itself or its lower/upper case equivalent (i.e. case-insensitive matching). &lt;u&gt;Important Note:&lt;/u&gt; SQLite only understands upper/lower case for ASCII characters by default. The LIKE operator is case sensitive by default for unicode characters that are beyond the ASCII range. For example, the expression &lt;b&gt;'a' LIKE 'A'&lt;/b&gt; is TRUE but &lt;b&gt;'&amp;aelig;' LIKE '&amp;AElig;'&lt;/b&gt; is FALSE. The ICU extension to SQLite includes an enhanced version of the LIKE operator that does case folding across all unicode characters.</source>
          <target state="translated">LIKE演算子は、パターンマッチング比較を行います。 LIKE演算子の右側のオペランドにはパターンが含まれ、左側のオペランドにはパターンと照合する文字列が含まれます。 LIKEパターンのパーセント記号（ &quot;％&quot;）は、文字列内の0個以上の文字のシーケンスと一致します。 LIKEパターンのアンダースコア（ &quot;_&quot;）は、文字列の任意の1文字と一致します。その他の文字は、それ自体またはそれに対応する小文字/大文字に一致します（つまり、大文字と小文字を区別しない一致）。&lt;u&gt;重要な注意：&lt;/u&gt; SQLiteは、デフォルトではASCII文字の大文字と小文字のみを認識します。 LIKE演算子は、ASCIIの範囲を超えるUnicode文字の場合、デフォルトで大文字と小文字が区別されます。たとえば、式&lt;b&gt;'a' LIKE 'A'&lt;/b&gt;はTRUEですが、&lt;b&gt;'&amp;aelig;' LIKE '&amp;AElig; '&lt;/b&gt;はFALSEです。SQLiteのICU拡張機能には、すべてのUnicode文字で大文字と小文字を区別しないLIKE演算子の拡張バージョンが含まれています。</target>
        </trans-unit>
        <trans-unit id="1dc39afda5c7dfd4c06c9ca219ccdec668d80d92" translate="yes" xml:space="preserve">
          <source>The LIKE operator has two modes that can be set by a &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;pragma&lt;/a&gt;. The default mode is for LIKE comparisons to be insensitive to differences of case for latin1 characters. Thus, by default, the following expression is true:</source>
          <target state="translated">LIKE演算子には、&lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;プラグマ&lt;/a&gt;で設定できる2つのモードがあります。デフォルトのモードでは、LIKE比較で、latin1文字の大文字と小文字の違いが区別されません。したがって、デフォルトでは、次の式は真です。</target>
        </trans-unit>
        <trans-unit id="1212c823074bac84702844422e3c272b2bd97163" translate="yes" xml:space="preserve">
          <source>The LIKE operator is case insensitive by default because this is what the SQL standard requires. You can change the default behavior at compile time by using the &lt;a href=&quot;compile#case_sensitive_like&quot;&gt;SQLITE_CASE_SENSITIVE_LIKE&lt;/a&gt; command-line option to the compiler.</source>
          <target state="translated">LIKE演算子は、SQL標準で必要なため、デフォルトでは大文字と小文字を区別しません。コンパイラに対して&lt;a href=&quot;compile#case_sensitive_like&quot;&gt;SQLITE_CASE_SENSITIVE_LIKE&lt;/a&gt;コマンドラインオプションを使用すると、コンパイル時にデフォルトの動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="974b1e3eeffaa9ed2ed23dfb8ae4c0123aeb3aed" translate="yes" xml:space="preserve">
          <source>The LIKE optimization might occur if the column named on the left of the operator is indexed using the built-in BINARY collating sequence and case_sensitive_like is turned on. Or the optimization might occur if the column is indexed using the built-in NOCASE collating sequence and the case_sensitive_like mode is off. These are the only two combinations under which LIKE operators will be optimized.</source>
          <target state="translated">演算子の左側に指定された列が、組み込みの BINARY 照合シーケンスを使用してインデックス化され、かつ case_sensitive_like がオンになっている場合、LIKE の最適化が発生する可能性があります。あるいは、組み込みの NOCASE 照合シーケンスを使用してインデックスを作成し、case_sensitive_like モードがオフになっている場合に最適化が行われるかもしれません。これらは、LIKE演算子が最適化される唯一の組み合わせです。</target>
        </trans-unit>
        <trans-unit id="93b8dceb670473d258369826a0e1bcdc46904ecc" translate="yes" xml:space="preserve">
          <source>The LIKE optimization was generating incorrect byte-code and hence getting the wrong answer if the left-hand operand has numeric affinity and the right-hand-side pattern is '/%' or if the pattern begins with the ESCAPE character. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/c94369cae9b561b1f996d0054b&quot;&gt;c94369cae9b561b1f996d0054b&lt;/a&gt;</source>
          <target state="translated">LIKE最適化が不正なバイトコードを生成していたため、左側のオペランドに数値の類似性があり、右側のパターンが「/％」の場合、またはパターンがESCAPE文字で始まっている場合は、誤った回答が返されていました。チケットの修正&lt;a href=&quot;https://www.sqlite.org/src/info/c94369cae9b561b1f996d0054b&quot;&gt;c94369cae9b561b1f996d0054b&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50c934a9b19a46fe0d3c49a41fee7d1fdd7083c0" translate="yes" xml:space="preserve">
          <source>The LIKE optimization will only be attempted if the right-hand side of the GLOB or LIKE operator is either literal string or a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; that has been &lt;a href=&quot;c3ref/bind_blob&quot;&gt;bound&lt;/a&gt; to a string literal. The string literal must not begin with a wildcard; if the right-hand side begins with a wildcard character then this optimization is attempted. If the right-hand side is a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; that is bound to a string, then this optimization is only attempted if the &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; containing the expression was compiled with &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; or &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16_v2()&lt;/a&gt;. The LIKE optimization is not attempted if the right-hand side is a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; and the statement was prepared using &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; or &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;.</source>
          <target state="translated">LIKE最適化は、GLOBまたはLIKE演算子の右側がリテラル文字列または文字列リテラルに&lt;a href=&quot;c3ref/bind_blob&quot;&gt;バインドさ&lt;/a&gt;れている&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメーターで&lt;/a&gt;ある場合にのみ試行されます。文字列リテラルはワイルドカードで始めることはできません。右側がワイルドカード文字で始まる場合、この最適化が試行されます。右側が文字列にバインドされている&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメーター&lt;/a&gt;である場合、この最適化は、式を含む&lt;a href=&quot;c3ref/stmt&quot;&gt;準備されたステートメント&lt;/a&gt;が&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;または&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16_v2（）で&lt;/a&gt;コンパイルされた場合にのみ試行されます。右側が&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメーターで&lt;/a&gt;あり、ステートメントが以下を使用して準備された場合、LIKE最適化は試行されません。&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;または&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75a37b85ec9af203958779031808e1e864da0987" translate="yes" xml:space="preserve">
          <source>The LIKE optimization will only be attempted if the right-hand side of the GLOB or LIKE operator is either literal string or a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; that has been &lt;a href=&quot;c3ref/bind_blob&quot;&gt;bound&lt;/a&gt; to a string literal. The string literal must not begin with a wildcard; if the right-hand side begins with a wildcard character then this optimization is not attempted. If the right-hand side is a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; that is bound to a string, then this optimization is only attempted if the &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; containing the expression was compiled with &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; or &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16_v2()&lt;/a&gt;. The LIKE optimization is not attempted if the right-hand side is a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; and the statement was prepared using &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; or &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;.</source>
          <target state="translated">LIKE最適化は、GLOBまたはLIKE演算子の右側がリテラル文字列、または文字列リテラルに&lt;a href=&quot;c3ref/bind_blob&quot;&gt;バインドさ&lt;/a&gt;れている&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメータの&lt;/a&gt;場合にのみ試行されます。文字列リテラルはワイルドカードで始めてはなりません。右側がワイルドカード文字で始まる場合、この最適化は試行されません。右側が文字列にバインドされた&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメータ&lt;/a&gt;である場合、この最適化は、式を含む&lt;a href=&quot;c3ref/stmt&quot;&gt;準備されたステートメント&lt;/a&gt;が&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;または&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16_v2（）で&lt;/a&gt;コンパイルされた場合にのみ試行されます。右側が&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメーターで&lt;/a&gt;あり、ステートメントが以下を使用して作成された場合、LIKE最適化は試行されません。&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;または&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bfdfb505c18eab193b8701d8963abc89096358bd" translate="yes" xml:space="preserve">
          <source>The LIKE, GLOB, REGEXP, and MATCH operators</source>
          <target state="translated">LIKE、GLOB、REGEXP、MATCH演算子</target>
        </trans-unit>
        <trans-unit id="bd6f903f94d0893c11340df485d7ab2df47a60ff" translate="yes" xml:space="preserve">
          <source>The LIMIT and ORDER BY clauses (described below) are unsupported for DELETE statements within triggers.</source>
          <target state="translated">LIMIT句およびORDER BY句(後述)は、トリガ内のDELETE文ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="ac40736f7c111bc231ce85d71233af9ca860229d" translate="yes" xml:space="preserve">
          <source>The LIMIT and ORDER BY clauses for UPDATE are unsupported within triggers, regardless of the compilation options used to build SQLite.</source>
          <target state="translated">UPDATE の LIMIT 句と ORDER BY 句は、SQLite のビルドに使用されたコンパイルオプションに関わらず、トリガー内ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="8e074183b71823eb43ac076c4294086172e78dd9" translate="yes" xml:space="preserve">
          <source>The LIMIT clause</source>
          <target state="translated">リミット条項</target>
        </trans-unit>
        <trans-unit id="0504a702a97dc6330d2a4e4c66843d71b8b8976c" translate="yes" xml:space="preserve">
          <source>The LIMIT clause is used to place an upper bound on the number of rows returned by the entire SELECT statement.</source>
          <target state="translated">LIMIT句は、SELECT文全体で返される行数の上限を設定するために使用します。</target>
        </trans-unit>
        <trans-unit id="077d300ed4cc15ee3f95aa8d7373e80b1b912e57" translate="yes" xml:space="preserve">
          <source>The LIMIT clause now works on subselects</source>
          <target state="translated">LIMIT 句がサブセレクトで動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="243d546893ed2d7dba744bb55553e651413994ea" translate="yes" xml:space="preserve">
          <source>The LIMIT clause, if present, determines the maximum number of rows that will ever be added to the recursive table in step 2b. Once the limit is reached, the recursion stops. A limit of zero means that no rows are ever added to the recursive table, and a negative limit means an unlimited number of rows may be added to the recursive table.</source>
          <target state="translated">LIMIT句が存在する場合、ステップ2bで再帰テーブルに追加される行の最大数を決定します。制限に達すると、再帰は停止します。制限値がゼロの場合、再帰テーブルに行が追加されないことを意味し、負の制限値は、再帰テーブルに無制限に行が追加されることを意味します。</target>
        </trans-unit>
        <trans-unit id="9ff51df664023512f948df1ac796d229e7d0e9d2" translate="yes" xml:space="preserve">
          <source>The LOCKING_STYLE extension is now enabled by default on Mac OS X</source>
          <target state="translated">Mac OS X で LOCKING_STYLE 拡張機能がデフォルトで有効になりました。</target>
        </trans-unit>
        <trans-unit id="0d323fe988c47fdc7cf51035f151e1d7348afa80" translate="yes" xml:space="preserve">
          <source>The Lemon LALR(1) Parser Generator</source>
          <target state="translated">レモン LALR(1)パーサジェネレータ</target>
        </trans-unit>
        <trans-unit id="cac145bc2534e8394ef262506cd070ba23b13005" translate="yes" xml:space="preserve">
          <source>The Lemon source code was originally written as separate source files, and only later merged into a single &quot;lemon.c&quot; source file.</source>
          <target state="translated">Lemonのソースコードは元々別々のソースファイルとして書かれていましたが、後になって一つの &quot;lemon.c &quot;ソースファイルにマージされました。</target>
        </trans-unit>
        <trans-unit id="217ce06ccfd8bf843619afe9ea4c73c55d14a961" translate="yes" xml:space="preserve">
          <source>The M value is the &quot;mantissa&quot; and E is the &quot;exponent&quot;. Both M and E are integers.</source>
          <target state="translated">Mの値は「仮数」、Eは「指数」です。MとEはともに整数である。</target>
        </trans-unit>
        <trans-unit id="f3666de7d407bd838db280e08d40dcf3369cd962" translate="yes" xml:space="preserve">
          <source>The MATCH operator is a special syntax for the match() application-defined function. The default match() function implementation raises an exception and is not really useful for anything. But extensions can override the match() function with more helpful logic.</source>
          <target state="translated">MATCH 演算子は、アプリケーション定義関数 match()のための特別な構文です。デフォルトの match()関数の実装は例外を発生させ、実際には何の役にも立ちません。しかし、拡張モジュールは、より有用なロジックで match()関数をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="42afa4f5f59a4dbd2c306334064e90d9b1a32220" translate="yes" xml:space="preserve">
          <source>The MATCH operator of a custom R*Tree query function must be a top-level AND-connected term of the WHERE clause, or else it will not be usable by the R*Tree query optimizer and the query will not be runnable. If the MATCH operator is connected to other terms of the WHERE clause via an OR operator, for example, the query will fail with an error.</source>
          <target state="translated">カスタムR*Treeクエリ関数のMATCH演算子は、WHERE句のトップレベルのANDに接続された項でなければなりません。例えば、MATCH演算子がOR演算子を介してWHERE句の他の項に接続されている場合、クエリはエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="a59083e3614cc05a48a3bbb667742c5ff714f7ae" translate="yes" xml:space="preserve">
          <source>The MEMORY journaling mode stores the rollback journal in volatile RAM. This saves disk I/O but at the expense of database safety and integrity. If the application using SQLite crashes in the middle of a transaction when the MEMORY journaling mode is set, then the database file will very likely &lt;a href=&quot;howtocorrupt#cfgerr&quot;&gt;go corrupt&lt;/a&gt;.</source>
          <target state="translated">MEMORYジャーナリングモードでは、ロールバックジャーナルが揮発性RAMに保存されます。これにより、ディスクI / Oが節約されますが、データベースの安全性と整合性が犠牲になります。MEMORYジャーナリングモードが設定されている場合、SQLiteを使用するアプリケーションがトランザクションの途中でクラッシュすると、データベースファイルが&lt;a href=&quot;howtocorrupt#cfgerr&quot;&gt;破損する&lt;/a&gt;可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="f83732bb3e32c92cf54961a7828a9a9bf48899eb" translate="yes" xml:space="preserve">
          <source>The MySQL UPDATE statement does not have just one target table like other systems. Any of the tables that participate in the join can be modified in the SET clause. The MySQL UPDATE syntax allows you to update multiple tables at once!</source>
          <target state="translated">MySQL UPDATE文は、他のシステムのようにターゲットテーブルを1つだけ持つわけではありません。結合に参加しているテーブルのいずれかをSET句で変更することができます。MySQL UPDATE構文を使用すると、複数のテーブルを一度に更新することができます!</target>
        </trans-unit>
        <trans-unit id="02f3e583df88fe87cd750b4e8f9145cc25dd009e" translate="yes" xml:space="preserve">
          <source>The Mythical Man-Month</source>
          <target state="translated">神話の人月</target>
        </trans-unit>
        <trans-unit id="47382a1ade54ee985c5d1e4d884a10d978c3d9d5" translate="yes" xml:space="preserve">
          <source>The NGQP has no way of knowing that TAGXREF_I1 is almost useless in this query, unless &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; has been run on the database. The &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command gathers statistics on the quality of the various indexes and stores those statistics in &lt;a href=&quot;fileformat2#stat1tab&quot;&gt;SQLITE_STAT1&lt;/a&gt; table. Having access to this statistical information, the NGQP easily chooses algorithm-1 as the best algorithm, by a wide margin.</source>
          <target state="translated">NGQPは、&lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt;がデータベースで実行されていない限り、TAGXREF_I1がこのクエリでほとんど役に立たないことを知る方法がありません。&lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt;のもの統計様々な指標や店舗の品質上のコマンド集まる統計を&lt;a href=&quot;fileformat2#stat1tab&quot;&gt;SQLITE_STAT1の&lt;/a&gt;テーブル。この統計情報にアクセスできるNGQPは、アルゴリズム1を最適なアルゴリズムとして簡単に選択できます。</target>
        </trans-unit>
        <trans-unit id="143a4238d4916cb63313c4577ca26b997b836c83" translate="yes" xml:space="preserve">
          <source>The NGQP is almost always better than the legacy query planner. However, there may exist legacy applications that unknowingly depend on undefined and/or suboptimal behavior in the legacy query planner, and upgrading to the NGQP on those legacy applications could cause performance regressions. This risk is considered and a checklist is provided for reducing the risk and for fixing any issues that do arise.</source>
          <target state="translated">NGQPは、ほとんどの場合、レガシークエリプランナよりも優れています。しかし、レガシーアプリケーションの中には、知らず知らずのうちにレガシークエリプランナーの未定義の動作や最適化されていない動作に依存しているものが存在し、それらのレガシーアプリケーションをNGQPにアップグレードすると、パフォーマンスが低下する可能性があります。このリスクを考慮し、リスクを軽減し、発生した問題を修正するためのチェックリストを提供します。</target>
        </trans-unit>
        <trans-unit id="2965ed7439648bc6c724543a8009a196c9039cf3" translate="yes" xml:space="preserve">
          <source>The NGQP uses a new heuristic for seeking the best path through the graph: &quot;N Nearest Neighbors&quot; (hereafter &quot;N3&quot;). With N3, instead of choosing just one nearest neighbor for each step, the algorithm keeps track of the N bests paths at each step for some small integer N.</source>
          <target state="translated">NGQPは、グラフを通る最良のパスを求めるために新しいヒューリスティックを使用しています。&quot;それは、「N ニアレストネイバー」(以下、「N3」)です。N3では、各ステップで1つの最近傍を選択するのではなく、アルゴリズムは、いくつかの小さな整数Nについて、各ステップでのN個のベスト・パスを追跡し続けます。</target>
        </trans-unit>
        <trans-unit id="0cc9ac5c6c19fb4a0c339daee645a66512bd3730" translate="yes" xml:space="preserve">
          <source>The NGQP will always find a good query plan as long as the schema does not contain indexes that have more than about 10 or 20 rows with the same value in the left-most column of the index.</source>
          <target state="translated">NGQPは、スキーマがインデックスの左端の列に同じ値を持つ約10行または20行以上のインデックスを含まない限り、常に良いクエリプランを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="64782e52a0662885b1e4e8b616fd2a06e03a36a9" translate="yes" xml:space="preserve">
          <source>The NGQP will always find an equal or better query plan, compared to prior query planners, as long as it has access to accurate &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; data in the &lt;a href=&quot;fileformat2#stat1tab&quot;&gt;SQLITE_STAT1&lt;/a&gt; file.</source>
          <target state="translated">NGQPは、&lt;a href=&quot;fileformat2#stat1tab&quot;&gt;SQLITE_STAT1&lt;/a&gt;ファイルの正確な&lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt;データにアクセスできる限り、以前のクエリプランナーと比較して、常に同等かそれ以上のクエリプランを見つけます。</target>
        </trans-unit>
        <trans-unit id="19150b2c84a3f9ff0a3cf33ed2fd4c984408dbd2" translate="yes" xml:space="preserve">
          <source>The NOCASE collation is like BINARY except that uppercase ASCII characters ('A' through 'Z') are folded into their lowercase equivalents prior to running the comparison. Only ASCII characters are case-folded. NOCASE does not implement a general purpose unicode caseless comparison.</source>
          <target state="translated">NOCASE照合は、大文字のASCII文字('A'から'Z'まで)が比較を実行する前に小文字の同等の文字に折りたたまれることを除いて、BINARYと同様です。大文字で折りたたまれるのはASCII文字のみです。NOCASEは、汎用的なユニコードのケースレス比較を実装していません。</target>
        </trans-unit>
        <trans-unit id="e84b5eaf17b803151297f975dc355cb961ea61cd" translate="yes" xml:space="preserve">
          <source>The NOT operator (or, if using the standard syntax, a unary &quot;-&quot; operator) may be used to compute the &lt;b&gt;relative complement&lt;/b&gt; of one set of documents with respect to another.</source>
          <target state="translated">NOT演算子（または、標準構文を使用する場合は、単項「-」演算子）を使用して、ドキュメントのセットの別のセット&lt;b&gt;に対する相対的な補集合&lt;/b&gt;を計算できます。</target>
        </trans-unit>
        <trans-unit id="0622850d3c0896e3d4a2cdc1368b8e7708693108" translate="yes" xml:space="preserve">
          <source>The NOT operator is not supported. Instead of the NOT operator, the standard query syntax supports a unary &quot;-&quot; operator that may be applied to basic term and term-prefix queries (but not to phrase or NEAR queries). A term or term-prefix that has a unary &quot;-&quot; operator attached to it may not appear as an operand to an OR operator. An FTS query may not consist entirely of terms or term-prefix queries with unary &quot;-&quot; operators attached to them.</source>
          <target state="translated">NOT演算子はサポートされていません。NOT演算子の代わりに、標準クエリ構文では、基本的な用語および用語プレフィックスクエリに適用できる単項演算子(-)がサポートされています (ただし、フレーズクエリやNEARクエリには適用されません)。単項演算子である「-」演算子が付加されている用語や用語プレフィックスは、OR演算子のオペランドとしては使用できません。FTSクエリは、単項演算子である&quot;-&quot;演算子を持つタームまたはタームプレフィックスクエリだけでは構成されない場合があります。</target>
        </trans-unit>
        <trans-unit id="92f10f8b9e2a034cee1135ad17b2a216a2126edd" translate="yes" xml:space="preserve">
          <source>The NULLS FIRST and NULLS LAST predicates are not supported for indexes. For &lt;a href=&quot;datatype3#sortorder&quot;&gt;sorting purposes&lt;/a&gt;, SQLite considers NULL values to be smaller than all other values. Hence NULL values always appear at the beginning of an ASC index and at the end of a DESC index.</source>
          <target state="translated">NULLSFIRSTおよびNULLSLAST述部は、索引ではサポートされていません。以下のために&lt;a href=&quot;datatype3#sortorder&quot;&gt;目的を仕分け&lt;/a&gt;、SQLiteは他のすべての値よりも小さくなるようにNULL値を考慮します。したがって、NULL値は常にASCインデックスの先頭とDESCインデックスの末尾に表示されます。</target>
        </trans-unit>
        <trans-unit id="7a314ee0d4a8c6c880fc2de97d4d977bd035a9e6" translate="yes" xml:space="preserve">
          <source>The NULLS FIRST and NULLS LAST predicates are not supported for indexes. For &lt;a href=&quot;datatype3#sortorder&quot;&gt;sorting purposes&lt;/a&gt;, SQLite considers NULL values to be smaller than all other values. Hences NULL values always appear at the beginning of an ASC index and at the end of a DESC index.</source>
          <target state="translated">NULLS FIRSTおよびNULLS LAST述部は、索引ではサポートされていません。以下のために&lt;a href=&quot;datatype3#sortorder&quot;&gt;目的を仕分け&lt;/a&gt;、SQLiteは他のすべての値よりも小さくなるようにNULL値を考慮します。したがって、NULL値は常にASCインデックスの先頭とDESCインデックスの末尾に表示されます。</target>
        </trans-unit>
        <trans-unit id="df615076dd2b352c1767b46fb626e9bea1df01d8" translate="yes" xml:space="preserve">
          <source>The Next instruction increments the cursor to point to the next element in the table pointed to by cursor P0, and if it was successful branches to P2 (6, the beginning of the loop body). The Close instruction closes cursor P1. It doesn't affect the temporary storage list because it isn't associated with cursor P1; it is instead a global working list (which can be saved with ListPush).</source>
          <target state="translated">Next命令は、カーソルP0が指し示すテーブルの次の要素を指すようにカーソルをインクリメントし、成功した場合はP2(ループ本体の先頭6)に分岐します。Close命令はカーソルP1を閉じます。カーソルP1に関連付けられていないので、一時的な保存リストには影響しません;代わりにグローバルな作業リスト(ListPushで保存可能)です。</target>
        </trans-unit>
        <trans-unit id="ead51814a41f1aee68f72130d432c2d7adca2550" translate="yes" xml:space="preserve">
          <source>The Next-Generation Query Planner</source>
          <target state="translated">次世代クエリプランナー</target>
        </trans-unit>
        <trans-unit id="72bb3fb56f491dbfd70c567055e36bba4fdf8c24" translate="yes" xml:space="preserve">
          <source>The ODP ZIP archive contains four different XML files: content.xml, styles.xml, meta.xml, and settings.xml. Those four files define the slide layout, text content, and styling. This particular presentation contains 62 images, ranging from full-screen pictures to tiny icons, each stored as a separate file in the Pictures folder. The &quot;mimetype&quot; file contains a single line of text that says:</source>
          <target state="translated">ODP ZIPアーカイブには、content.xml、styles.xml、meta.xml、およびsettings.xmlという4つのXMLファイルが含まれています。これら4つのファイルは、スライド レイアウト、テキスト コンテンツ、およびスタイリングを定義します。このプレゼンテーションには、フルスクリーン画像から小さなアイコンまで、62枚の画像が含まれており、それぞれが[Pictures]フォルダ内の個別ファイルとして保存されています。mimetype」ファイルには、次のような1行のテキストが含まれています。</target>
        </trans-unit>
        <trans-unit id="bd2fb71eee9ad290a0e9bebe4f7b07ef57d97050" translate="yes" xml:space="preserve">
          <source>The OFF journaling mode disables the rollback journal completely. No rollback journal is ever created and hence there is never a rollback journal to delete. The OFF journaling mode disables the atomic commit and rollback capabilities of SQLite. The &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; command no longer works; it behaves in an undefined way. Applications must avoid using the &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; command when the journal mode is OFF. If the application crashes in the middle of a transaction when the OFF journaling mode is set, then the database file will very likely &lt;a href=&quot;howtocorrupt#cfgerr&quot;&gt;go corrupt&lt;/a&gt;. Without a journal, there is no way for a statement to unwind partially completed operations following a constraint error. This might also leave the database in a corrupted state. For example, if a duplicate entry causes a &lt;a href=&quot;lang_createindex&quot;&gt;CREATE UNIQUE INDEX&lt;/a&gt; statement to fail half-way through, it will leave behind a partially created, and hence corrupt, index. Because OFF journaling mode allows the database file to be corrupted using ordinary SQL, it is disabled when &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; is enabled.</source>
          <target state="translated">OFFジャーナリングモードでは、ロールバックジャーナルが完全に無効になります。ロールバックジャーナルは作成されないため、削除するロールバックジャーナルはありません。 OFFジャーナリングモードは、SQLiteのアトミックコミットおよびロールバック機能を無効にします。&lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACKの&lt;/a&gt;コマンドは、もはや機能していません。未定義の方法で動作します。ジャーナルモードがオフの場合、アプリケーションは&lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt;コマンドの使用を回避する必要があります。 OFFジャーナリングモードが設定されている場合、トランザクションの途中でアプリケーションがクラッシュすると、データベースファイルが&lt;a href=&quot;howtocorrupt#cfgerr&quot;&gt;破損する&lt;/a&gt;可能性が高くなります。ジャーナルがないと、文が制約エラーの後に部分的に完了した操作を巻き戻す方法がありません。これにより、データベースが破損した状態になることもあります。たとえば、重複するエントリが原因で&lt;a href=&quot;lang_createindex&quot;&gt;CREATE UNIQUE INDEX&lt;/a&gt;ステートメントが途中で失敗すると、部分的に作成された、したがって破損したインデックスが残ります。OFFジャーナリングモードでは、通常のSQLを使用してデータベースファイルが破損する可能性があるため、&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt;が有効になっている場合は無効になります。</target>
        </trans-unit>
        <trans-unit id="374ba8e6eebafb57002a1dcdb7b0375a9e1ef0e6" translate="yes" xml:space="preserve">
          <source>The OFFSET clause, if it is present and has a positive value N, prevents the first N rows from being added to the recursive table. The first N rows are still processed by the recursive-select &amp;mdash; they just are not added to the recursive table. Rows are not counted toward fulfilling the LIMIT until all OFFSET rows have been skipped.</source>
          <target state="translated">OFFSET句が存在し、正の値Nがある場合、最初のN行が再帰テーブルに追加されません。最初のN行は、再帰的選択によって引き続き処理されます&amp;mdash;それらは再帰的テーブルに追加されないだけです。すべてのOFFSET行がスキップされるまで、行はLIMITを満たすためにカウントされません。</target>
        </trans-unit>
        <trans-unit id="0b277e3e2e965c40320745de00278d14c1b4c238" translate="yes" xml:space="preserve">
          <source>The ON CONFLICT Clause</source>
          <target state="translated">オンコンフリクト条項</target>
        </trans-unit>
        <trans-unit id="549fba753f3ce9487855ba9f0e10547cd8338f25" translate="yes" xml:space="preserve">
          <source>The ON CONFLICT clause applies to &lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;UNIQUE&lt;/a&gt;, &lt;a href=&quot;lang_createtable#notnullconst&quot;&gt;NOT NULL&lt;/a&gt;, &lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK&lt;/a&gt;, and &lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY&lt;/a&gt; constraints. The ON CONFLICT algorithm does not apply to &lt;a href=&quot;foreignkeys&quot;&gt;FOREIGN KEY constraints&lt;/a&gt;. There are five conflict resolution algorithm choices: ROLLBACK, ABORT, FAIL, IGNORE, and REPLACE. The default conflict resolution algorithm is ABORT. This is what they mean:</source>
          <target state="translated">ON CONFLICT句は、&lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;UNIQUE&lt;/a&gt;、&lt;a href=&quot;lang_createtable#notnullconst&quot;&gt;NOT NULL&lt;/a&gt;、&lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK&lt;/a&gt;、および&lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY&lt;/a&gt;制約に適用されます。ON CONFLICTアルゴリズムは、&lt;a href=&quot;foreignkeys&quot;&gt;FOREIGN KEY制約に&lt;/a&gt;は適用されません。競合解決アルゴリズムには、ROLLBACK、ABORT、FAIL、IGNORE、REPLACEの5つの選択肢があります。デフォルトの競合解消アルゴリズムはABORTです。これは彼らが意味するところです：</target>
        </trans-unit>
        <trans-unit id="1bdda41615452e17b3f0971a7f023b71ba464bbb" translate="yes" xml:space="preserve">
          <source>The ON CONFLICT clause described here has been a part of SQLite since before version 3.0.0 (2004-06-18). The phrase &quot;ON CONFLICT&quot; is also part of &lt;a href=&quot;lang_upsert&quot;&gt;UPSERT&lt;/a&gt;, which is an extension to &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; added in version 3.24.0 (2018-06-04). Do not confuse these two separate uses of the &quot;ON CONFLICT&quot; phrase.</source>
          <target state="translated">ここで説明するON CONFLICT句は、バージョン3.0.0（2004-06-18）より前のSQLiteの一部です。「ON CONFLICT」という句も&lt;a href=&quot;lang_upsert&quot;&gt;UPSERTの&lt;/a&gt;一部です。これは、バージョン3.24.0（2018-06-04）で追加された&lt;a href=&quot;lang_insert&quot;&gt;INSERTの&lt;/a&gt;拡張機能です。「ON CONFLICT」句のこれら2つの別々の使用を混同しないでください。</target>
        </trans-unit>
        <trans-unit id="cdcbfd707214ce0a425024950f0078c8093a672f" translate="yes" xml:space="preserve">
          <source>The ON CONFLICT clause is a non-standard extension specific to SQLite that can appear in many other SQL commands. It is given its own section in this document because it is not part of standard SQL and therefore might not be familiar.</source>
          <target state="translated">ON CONFLICT句はSQLiteに特有の非標準の拡張であり、他の多くのSQLコマンドにも登場します。このドキュメントでは、標準SQLの一部ではないため、あまり馴染みがないかもしれないため、独自のセクションを設けています。</target>
        </trans-unit>
        <trans-unit id="0b1442e3d6081cb327542a1dfef2a119f6cc8762" translate="yes" xml:space="preserve">
          <source>The ON DELETE and ON UPDATE action associated with each foreign key in an SQLite database is one of &quot;NO ACTION&quot;, &quot;RESTRICT&quot;, &quot;SET NULL&quot;, &quot;SET DEFAULT&quot; or &quot;CASCADE&quot;. If an action is not explicitly specified, it defaults to &quot;NO ACTION&quot;.</source>
          <target state="translated">SQLite データベース内の各外部キーに関連付けられた DELETE および UPDATE の ON アクションは、&quot;NO ACTION&quot;、&quot;RESTRICT&quot;、&quot;SET NULL&quot;、&quot;SET DEFAULT&quot;、&quot;CASCADE&quot; のいずれかです。アクションが明示的に指定されていない場合、デフォルトは &quot;NO ACTION &quot;となります。</target>
        </trans-unit>
        <trans-unit id="6bf1202b648eb0b4a5f050a8c6d05340c107e859" translate="yes" xml:space="preserve">
          <source>The ON and USING clauses of an inner join are converted into additional terms of the WHERE clause prior to WHERE clause analysis described above in paragraph 1.0. Thus with SQLite, there is no computational advantage to use the newer SQL92 join syntax over the older SQL89 comma-join syntax. They both end up accomplishing exactly the same thing on inner joins.</source>
          <target state="translated">内部結合の ON 節と USING 節は、上記のパラグラフ 1.0 で説明した WHERE 節分析の前に、WHERE 節の追加項に変換されます。このように、SQLiteでは、古いSQL89カンマ結合構文よりも新しいSQL92結合構文を使用しても計算上の利点はありません。どちらも内部結合では全く同じことを行うことになります。</target>
        </trans-unit>
        <trans-unit id="bb4c3f3b3997cb8490367acdbc7718d009c8a562" translate="yes" xml:space="preserve">
          <source>The OR operator calculates the &lt;b&gt;union&lt;/b&gt; of two sets of documents.</source>
          <target state="translated">OR演算子は、2つのドキュメントセットの&lt;b&gt;和集合&lt;/b&gt;を計算します。</target>
        </trans-unit>
        <trans-unit id="4ba92a05446009b56fe03f1afc3e8240d551a35c" translate="yes" xml:space="preserve">
          <source>The ORDER BY LIMIT optimization is not valid unless the inner-most IN operator loop is actually used by the query plan. Fix for ticket &lt;a href=&quot;https://sqlite.org/src/info/0c4df46116e90f92&quot;&gt;0c4df46116e90f92&lt;/a&gt;.</source>
          <target state="translated">ORDER BY LIMIT最適化は、最も内側のIN演算子ループがクエリプランで実際に使用されていない限り無効です。チケット&lt;a href=&quot;https://sqlite.org/src/info/0c4df46116e90f92&quot;&gt;0c4df46116e90f92の&lt;/a&gt;修正。</target>
        </trans-unit>
        <trans-unit id="7b8e2023ca7e681416d915e1d1b8f5b26d152e1f" translate="yes" xml:space="preserve">
          <source>The ORDER BY LIMIT optimization might have caused an infinite loop in the byte code of the prepared statement under very obscure circumstances, due to a confluence of minor defects in the query optimizer. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/9936b2fa443fec03ff25&quot;&gt;9936b2fa443fec03ff25&lt;/a&gt;</source>
          <target state="translated">ORDER BY LIMIT最適化により、クエリオプティマイザの小さな欠陥の合流により、非常にあいまいな状況下で準備さ​​れたステートメントのバイトコードに無限ループが発生した可能性があります。チケット&lt;a href=&quot;https://www.sqlite.org/src/info/9936b2fa443fec03ff25&quot;&gt;9936b2fa443fec03ff25の&lt;/a&gt;修正</target>
        </trans-unit>
        <trans-unit id="b25ea5983496f08c601930c1bfec228ee9f65c25" translate="yes" xml:space="preserve">
          <source>The ORDER BY and LIMIT clauses on &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; and &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; statements are not supported. ORDER BY and LIMIT are not normally supported for &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; or &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; in any context but can be enabled for top-level statements using the &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; compile-time option. However, that compile-time option only applies to top-level &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; and &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; statements, not &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; and &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; statements within triggers.</source>
          <target state="translated">&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;および&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;ステートメントのORDER BYおよびLIMIT句はサポートされていません。 ORDER BYとLIMITは通常、どのコンテキストでも&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;または&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;でサポートされませんが、&lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt;コンパイル時オプションを使用してトップレベルのステートメントで有効にできます。ただし、そのコンパイル時オプションはトップレベルの&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;および&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;ステートメントにのみ適用され、トリガー内の&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;および&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;ステートメントには適用されません。</target>
        </trans-unit>
        <trans-unit id="3cfee8a3cdd0f5ece05fc4719284d9ca35cb1ece" translate="yes" xml:space="preserve">
          <source>The ORDER BY clause</source>
          <target state="translated">ORDER BY句</target>
        </trans-unit>
        <trans-unit id="30dc9fe3a4d009f8e23f54fc9886804eb6fd68d9" translate="yes" xml:space="preserve">
          <source>The ORDER BY clause on a DELETE statement is used only to determine which rows fall within the LIMIT. The order in which rows are deleted is arbitrary and is not influenced by the ORDER BY clause.</source>
          <target state="translated">DELETE文のORDER BY句は、どの行がLIMITに含まれるかを決定するためにのみ使用されます。削除される行の順序は任意であり、ORDER BY句の影響を受けることはありません。</target>
        </trans-unit>
        <trans-unit id="838347206eac0478c704f6fe626059a265388ac1" translate="yes" xml:space="preserve">
          <source>The ORDER BY clause on an UPDATE statement is used only to determine which rows fall within the LIMIT. The order in which rows are modified is arbitrary and is not influenced by the ORDER BY clause.</source>
          <target state="translated">UPDATE文のORDER BY句は、どの行がLIMITに含まれるかを決定するためにのみ使用されます。行が修正される順序は任意であり、ORDER BY句の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="db6946cde6c76ae16df632182494e97889b98107" translate="yes" xml:space="preserve">
          <source>The OS Interface - also called the &quot;VFS&quot; - is what makes SQLite portable across operating systems. Whenever any of the other modules in SQLite needs to communicate with the operating system, they invoke methods in the VFS. The VFS then invokes the operating-specific code needed to satisfy the request. Hence, porting SQLite to a new operating system is simply a matter of writing a new OS interface layer or &quot;VFS&quot;.</source>
          <target state="translated">OS インターフェイス-&quot;VFS&quot; とも呼ばれる-は、SQLite をオペレーティング・システム間での移植性を高めています。SQLite の他のモジュールがオペレーティングシステムと通信する必要があるときはいつでも、VFS のメソッドを呼び出します。そして、VFS は要求を満たすために必要なオペレーティング・システム固有のコードを呼び出します。したがって、SQLite を新しいオペレーティングシステムに移植するには、単に新しい OS インターフェイス層または &quot;VFS&quot; を書けばよいのです。</target>
        </trans-unit>
        <trans-unit id="61b9ed4bbd7c64412bf999ddb3735b90a9006325" translate="yes" xml:space="preserve">
          <source>The OS interface layer has been completely reworked:</source>
          <target state="translated">OSのインターフェース層が完全に作り直されています。</target>
        </trans-unit>
        <trans-unit id="7db34215d6389d29f797bd445ad557bb97d4d35b" translate="yes" xml:space="preserve">
          <source>The OVER clause is required for &lt;a href=&quot;windowfunctions&quot;&gt;window functions&lt;/a&gt; and is prohibited otherwise. The DISTINCT keyword is only allowed in &lt;a href=&quot;lang_aggfunc&quot;&gt;aggregate functions&lt;/a&gt;. The FILTER clause may not appear on a &lt;a href=&quot;lang_corefunc&quot;&gt;simple function&lt;/a&gt;.</source>
          <target state="translated">OVER句は&lt;a href=&quot;windowfunctions&quot;&gt;ウィンドウ関数に&lt;/a&gt;必要であり、それ以外の場合は禁止されています。DISTINCTキーワードは、&lt;a href=&quot;lang_aggfunc&quot;&gt;集約関数で&lt;/a&gt;のみ使用できます。FILTER句は、&lt;a href=&quot;lang_corefunc&quot;&gt;単純な関数&lt;/a&gt;では使用できません。</target>
        </trans-unit>
        <trans-unit id="97086bd49779ce0aff6b3d28109cebe94640094e" translate="yes" xml:space="preserve">
          <source>The OpenDocument file format is used for office applications: word processors, spreadsheets, and presentations. It was originally designed for the OpenOffice suite but has since been incorporated into other desktop application suites. The OpenOffice application has been forked and renamed a few times. This author's primary use for OpenDocument is building slide presentations with either &lt;a href=&quot;https://www.neooffice.org/neojava/en/index.php&quot;&gt;NeoOffice&lt;/a&gt; on Mac, or &lt;a href=&quot;http://www.libreoffice.org/&quot;&gt;LibreOffice&lt;/a&gt; on Linux and Windows.</source>
          <target state="translated">OpenDocumentファイル形式は、ワープロ、スプレッドシート、プレゼンテーションなどのオフィスアプリケーションで使用されます。もともとはOpenOfficeスイート用に設計されましたが、その後、他のデスクトップアプリケーションスイートに組み込まれました。OpenOfficeアプリケーションはフォークされ、何度か名前が変更されました。この著者のOpenDocumentの主な用途は、Mac上の&lt;a href=&quot;https://www.neooffice.org/neojava/en/index.php&quot;&gt;NeoOffice&lt;/a&gt;、またはLinuxとWindows上の&lt;a href=&quot;http://www.libreoffice.org/&quot;&gt;LibreOfficeの&lt;/a&gt;いずれかを使用してスライドプレゼンテーションを作成することです。</target>
        </trans-unit>
        <trans-unit id="a12f97809890d0843d3b379960cdb5a48586d66d" translate="yes" xml:space="preserve">
          <source>The P parameter in sqlite3_create_filename(D,J,W,N,P) should be an array of 2*N pointers to strings. Each pair of pointers in this array corresponds to a key and value for a query parameter. The P parameter may be a NULL pointer if N is zero. None of the 2*N pointers in the P array may be NULL pointers and key pointers should not be empty strings. None of the D, J, or W parameters to sqlite3_create_filename(D,J,W,N,P) may be NULL pointers, though they can be empty strings.</source>
          <target state="translated">sqlite3_create_filename(D,J,W,N,P)のPパラメータは文字列への2*Nのポインタの配列でなければなりません。この配列の各ポインタのペアは、クエリパラメータのキーと値に対応します。Pパラメータは,Nが0の場合はNULLポインタになります.P配列内の2*N個のポインタはいずれもNULLポインタであってはならず,キーポインタは空の文字列であってはなりません.sqlite3_create_filename(D,J,W,N,P)のD,J,WパラメータはどれもNULLポインタではありません。</target>
        </trans-unit>
        <trans-unit id="7e13d51d1ef218d337ca9fb917ffdb16cbc244df" translate="yes" xml:space="preserve">
          <source>The P1 cursor must be for a real table, not a pseudo-table. If P1 is not open then the behavior is undefined.</source>
          <target state="translated">P1カーソルは擬似テーブルではなく、実際のテーブル用でなければなりません。P1がオープンされていない場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="5b81ca2502b2715c59c443936643d2e3be1132fa" translate="yes" xml:space="preserve">
          <source>The P1 cursor must be for a real table, not a pseudo-table. P1 must have been opened prior to this opcode or the program will segfault.</source>
          <target state="translated">P1 カーソルは擬似テーブルではなく、実際のテーブルでなければなりません。P1はこのオペコードの前にオープンされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="607ac7f84bdc4d441c6cb285c55a825dad256470" translate="yes" xml:space="preserve">
          <source>The P1 parameter is not actually used by this opcode. However, it is sometimes set to 1 instead of 0 as a hint to the command-line shell that this &lt;a href=&quot;opcode#Goto&quot;&gt;Goto&lt;/a&gt; is the bottom of a loop and that the lines from P2 down to the current line should be indented for EXPLAIN output.</source>
          <target state="translated">P1パラメータは、このオペコードでは実際には使用されません。ただし、コマンドラインシェルへのヒントとして、この&lt;a href=&quot;opcode#Goto&quot;&gt;Goto&lt;/a&gt;がループの最後であり、P2から現在の行までの行がEXPLAIN出力でインデントされる必要があることを、0ではなく1に設定する場合があります。</target>
        </trans-unit>
        <trans-unit id="28dbb0803ca5b349efaf91bc329608b765d512d1" translate="yes" xml:space="preserve">
          <source>The P3 argument of instruction 11 is of particular interest. The sort key is formed by prepending one character from P3 to each string and concatenating all the strings. The sort comparison function will look at this character to determine whether the sort order is ascending or descending, and whether to sort as a string or number. In this example, the first column should be sorted as a string in descending order so its prefix is &quot;D&quot; and the second column should sorted numerically in ascending order so its prefix is &quot;+&quot;. Ascending string sorting uses &quot;A&quot;, and descending numeric sorting uses &quot;-&quot;.</source>
          <target state="translated">特に注目すべきは命令11の引数P3である。ソートキーは、P3から1つの文字を各文字列に前置し、すべての文字列を連結することで形成されます。ソート比較関数はこの文字を見て、ソート順が昇順なのか降順なのか、文字列としてソートするのか数字としてソートするのかを判断します。この例では、最初の列は文字列として降順にソートされ、その接頭辞は &quot;D &quot;となり、2番目の列は数値として昇順にソートされ、その接頭辞は &quot;+&quot;となります。昇順の文字列ソートでは &quot;A &quot;を使用し、降順の数値ソートでは&quot;-&quot;を使用します。</target>
        </trans-unit>
        <trans-unit id="55ff312bc89d3e83256edc55b23ecd77e64741ac" translate="yes" xml:space="preserve">
          <source>The P3 value is a hint to the btree implementation. If P3==1, that means P1 is an SQL index and that this instruction could have been omitted if that index had been unique. P3 is usually 0. P3 is always either 0 or 1.</source>
          <target state="translated">P3の値はbtreeの実装へのヒントです。P3==1の場合、それはP1がSQLインデックスであり、そのインデックスが一意であれば、この命令は省略された可能性があることを意味します。P3は通常0ですが、P3は常に0か1です。</target>
        </trans-unit>
        <trans-unit id="f0f52e542da01be92f32d06abf2506b4a2d4f31b" translate="yes" xml:space="preserve">
          <source>The P4 register values beginning with P3 form an unpacked index key that omits the PRIMARY KEY or ROWID. &lt;a href=&quot;opcode#Compare&quot;&gt;Compare&lt;/a&gt; this key value against the index that P1 is currently pointing to, ignoring the PRIMARY KEY or ROWID on the P1 index.</source>
          <target state="translated">P3で始まるP4レジスタ値は、PRIMARY KEYまたはROWIDを省略したアンパックされたインデックスキーを形成します。このキー値をP1が現在指しているインデックスと&lt;a href=&quot;opcode#Compare&quot;&gt;比較&lt;/a&gt;し、P1インデックスのPRIMARY KEYまたはROWIDを無視します。</target>
        </trans-unit>
        <trans-unit id="4c2c023857d26616de9f3d4b0976bd5072c920ee" translate="yes" xml:space="preserve">
          <source>The P4 register values beginning with P3 form an unpacked index key that omits the PRIMARY KEY. &lt;a href=&quot;opcode#Compare&quot;&gt;Compare&lt;/a&gt; this key value against the index that P1 is currently pointing to, ignoring the PRIMARY KEY or ROWID fields at the end.</source>
          <target state="translated">P3で始まるP4レジスタ値は、PRIMARY KEYを省略したアンパックされたインデックスキーを形成します。このキー値を、P1が現在指しているインデックスと&lt;a href=&quot;opcode#Compare&quot;&gt;比較&lt;/a&gt;します。最後のPRIMARY KEYまたはROWIDフィールドは無視されます。</target>
        </trans-unit>
        <trans-unit id="19d27257909a32ae5401b59e606c768db9ed4065" translate="yes" xml:space="preserve">
          <source>The P4 value may be either an integer (P4_INT32) or a pointer to a KeyInfo structure (P4_KEYINFO). If it is a pointer to a KeyInfo object, then table being opened must be an &lt;a href=&quot;fileformat2#btypes&quot;&gt;index b-tree&lt;/a&gt; where the KeyInfo object defines the content and collating sequence of that index b-tree. Otherwise, if P4 is an integer value, then the table being opened must be a &lt;a href=&quot;fileformat2#btypes&quot;&gt;table b-tree&lt;/a&gt; with a number of columns no less than the value of P4.</source>
          <target state="translated">P4値は、整数（P4_INT32）またはKeyInfo構造体へのポインター（P4_KEYINFO）のいずれかです。それがKeyInfoオブジェクトへのポインタである場合、開かれるテーブルは、&lt;a href=&quot;fileformat2#btypes&quot;&gt;インデックスbツリー&lt;/a&gt;である必要があります。KeyInfoオブジェクトは、そのインデックスbツリーの内容と照合シーケンスを定義します。それ以外の場合、P4が整数値の場合、開かれる&lt;a href=&quot;fileformat2#btypes&quot;&gt;テーブル&lt;/a&gt;は、P4の値以上の列数を持つテーブルBツリーである必要があります。</target>
        </trans-unit>
        <trans-unit id="21923e08794e63280a41a6b5f859992f400d98cc" translate="yes" xml:space="preserve">
          <source>The P5 arguments are taken from register P2 and its successors.</source>
          <target state="translated">P5の引数は、レジスタP2とその後継者から取り出されます。</target>
        </trans-unit>
        <trans-unit id="6017964a6129b7a7e8f6a3da3f0784c73d2078ba" translate="yes" xml:space="preserve">
          <source>The P5 parameter can be a mask of the BTREE_* flags defined in btree.h. These flags control aspects of the operation of the btree. The BTREE_OMIT_JOURNAL and BTREE_SINGLE flags are added automatically.</source>
          <target state="translated">P5 パラメータには btree.h で定義されている BTREE_*フラグのマスクを指定することができます。BTREE_OMIT_JOURNAL および BTREE_SINGLE フラグは自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="3f1c0ff5695ef10ade1f6c3734423a4eb3077d3e" translate="yes" xml:space="preserve">
          <source>The PERSIST journaling mode prevents the rollback journal from being deleted at the end of each transaction. Instead, the header of the journal is overwritten with zeros. This will prevent other database connections from rolling the journal back. The PERSIST journaling mode is useful as an optimization on platforms where deleting or truncating a file is much more expensive than overwriting the first block of a file with zeros. See also: &lt;a href=&quot;pragma#pragma_journal_size_limit&quot;&gt;PRAGMA journal_size_limit&lt;/a&gt; and &lt;a href=&quot;compile#default_journal_size_limit&quot;&gt;SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT&lt;/a&gt;.</source>
          <target state="translated">PERSISTジャーナリングモードでは、各トランザクションの終了時にロールバックジャーナルが削除されないようにします。代わりに、ジャーナルのヘッダーはゼロで上書きされます。これにより、他のデータベース接続がジャーナルをロールバックするのを防ぎます。 PERSISTジャーナリングモードは、ファイルの削除または切り捨てがファイルの最初のブロックをゼロで上書きするよりもはるかにコストがかかるプラットフォームでの最適化として役立ちます。参照：&lt;a href=&quot;pragma#pragma_journal_size_limit&quot;&gt;PRAGMA journal_size_limit&lt;/a&gt;および&lt;a href=&quot;compile#default_journal_size_limit&quot;&gt;SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="161bece08ac2f5702ce5212ddbeeb1a41f2dbaee" translate="yes" xml:space="preserve">
          <source>The PLINK table holds parent-child relationships between check-ins. The TAGXREF table maps tags into check-ins. For reference, the relevant portions of the schemas for these two tables is shown here:</source>
          <target state="translated">PLINK テーブルは、チェックイン間の親子関係を保持します。TAGXREFテーブルは、タグをチェックインにマッピングします。参考までに、これら2つのテーブルのスキーマの関連部分をここに示します。</target>
        </trans-unit>
        <trans-unit id="e4bd8ba431ab4e0d31722f8db284b8bb979b0c36" translate="yes" xml:space="preserve">
          <source>The PRAGMA statement is an SQL extension specific to SQLite and used to modify the operation of the SQLite library or to query the SQLite library for internal (non-table) data. The PRAGMA statement is issued using the same interface as other SQLite commands (e.g. &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;, &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;) but is different in the following important respects:</source>
          <target state="translated">PRAGMAステートメントはSQLiteに固有のSQL拡張であり、SQLiteライブラリの操作を変更したり、SQLiteライブラリに内部（非テーブル）データを照会したりするために使用されます。PRAGMAステートメントは、他のSQLiteコマンド（例：&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;、&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;）と同じインターフェイスを使用して発行されますが、次の重要な点が異なります。</target>
        </trans-unit>
        <trans-unit id="c66b0cfca97f029db26ea6f18637a49f7fab6a97" translate="yes" xml:space="preserve">
          <source>The PRAGMA synchronous=off statement now disables syncing of the master journal file in addition to the normal rollback journals</source>
          <target state="translated">PRAGMA synchronous=offステートメントは、通常のロールバック・ジャーナルに加えて、マスター・ジャーナル・ファイルの同期を無効にするようになりました。</target>
        </trans-unit>
        <trans-unit id="b37fa685a4763fe504598bdda8b4b2f3d3eef491" translate="yes" xml:space="preserve">
          <source>The PRIMARY KEY constraint for a rowid table (as long as it is not the true primary key or INTEGER PRIMARY KEY) is really the same thing as a &lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;UNIQUE constraint&lt;/a&gt;. Because it is not a true primary key, columns of the PRIMARY KEY are allowed to be NULL, in violation of all SQL standards.</source>
          <target state="translated">ROWIDテーブルのPRIMARY KEY制約は（それが真の主キーまたはINTEGER PRIMARY KEYでない限り）、&lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;UNIQUE制約&lt;/a&gt;と同じです。これは本当の主キーではないため、すべてのSQL標準に違反して、PRIMARY KEYの列をNULLにすることができます。</target>
        </trans-unit>
        <trans-unit id="ebe8c7b0a4b69dc3800a6f41776c565d6842c281" translate="yes" xml:space="preserve">
          <source>The PRIMARY KEY values identifying the modified row,</source>
          <target state="translated">変更された行を識別する PRIMARY KEY 値。</target>
        </trans-unit>
        <trans-unit id="90caad2286223b2e029c8d716238518e674a76d1" translate="yes" xml:space="preserve">
          <source>The Page Cache</source>
          <target state="translated">ページキャッシュ</target>
        </trans-unit>
        <trans-unit id="1f5eb567adef7decaf2acc8e4aa86ec1481f2a20" translate="yes" xml:space="preserve">
          <source>The PostgreSQL and MySQL servers used were as delivered by default on RedHat 7.2. (PostgreSQL version 7.1.3 and MySQL version 3.23.41.) No effort was made to tune these engines. Note in particular the default MySQL configuration on RedHat 7.2 does not support transactions. Not having to support transactions gives MySQL a big speed advantage, but SQLite is still able to hold its own on most tests.</source>
          <target state="translated">使用したPostgreSQLとMySQLサーバは、RedHat 7.2上でデフォルトで提供されているものを使用しました。(PostgreSQL バージョン 7.1.3 と MySQL バージョン 3.23.41)これらのエンジンをチューニングする努力はしていません。特に、RedHat 7.2 のデフォルトの MySQL 構成はトランザクションをサポートしていないことに注意してください。トランザクションをサポートしないことで、MySQLは大きな速度の優位性を得ていますが、SQLiteはほとんどのテストではまだ自分自身を維持することができます。</target>
        </trans-unit>
        <trans-unit id="3d04a38a1d2743c1862a6cfdba60ded14ba2896a" translate="yes" xml:space="preserve">
          <source>The PutIntKey instruction (also described during the discussion about INSERT) writes an entry into the database file whose data is the top of the stack and whose key is the next on the stack, and then pops the stack twice. The PutIntKey instruction will overwrite the data of an existing record with the same key, which is what we want here. Overwriting was not an issue with INSERT because with INSERT the key was generated by the NewRecno instruction which is guaranteed to provide a key that has not been used before.</source>
          <target state="translated">PutIntKey命令(INSERTについての説明でも説明しました)は、データがスタックの先頭にあり、そのキーがスタックの次のキーであるエントリをデータベースファイルに書き込み、スタックを2回ポップします。PutIntKey命令は、同じキーを持つ既存のレコードのデータを上書きします。上書きは、INSERTではキーがNewRecno命令によって生成されたため、INSERTでは問題になりませんでしたが、これは以前に使用されたことのないキーを提供することが保証されているからです。</target>
        </trans-unit>
        <trans-unit id="7408173a3218822a3bb6af7f7e3d86be256cefca" translate="yes" xml:space="preserve">
          <source>The QPSG is disabled by default. It can be enabled at compile-time using the &lt;a href=&quot;compile#enable_qpsg&quot;&gt;SQLITE_ENABLE_QPSG&lt;/a&gt; compile-time option, or at run-time by invoking &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableqpsg&quot;&gt;SQLITE_DBCONFIG_ENABLE_QPSG&lt;/a&gt;,1,0).</source>
          <target state="translated">QPSGはデフォルトで無効になっています。これは、コンパイル時に&lt;a href=&quot;compile#enable_qpsg&quot;&gt;SQLITE_ENABLE_QPSG&lt;/a&gt;コンパイル時オプションを使用して有効にするか、実行時に&lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;（db、&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableqpsg&quot;&gt;SQLITE_DBCONFIG_ENABLE_QPSG&lt;/a&gt;、1,0）を呼び出して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7ff5d03d1a40249005abd9682f890ac5af94c96e" translate="yes" xml:space="preserve">
          <source>The QPSG means that if all of your queries run efficiently during testing, and if your application does not change the schema, then SQLite will not suddenly decide to start using a different query plan, possibly causing a performance problem, after your application is released to users. If your application works in the lab, it will continue working the same way after deployment.</source>
          <target state="translated">QPSG は、テスト中にすべてのクエリが効率的に実行され、アプリケーションがスキーマを変更していなければ、アプリケーションがユーザにリリースされた後に、SQLite が突然別のクエリプランを使用し始め、パフォーマンスの問題を引き起こすことはないということを意味します。アプリケーションがラボで動作している場合、デプロイ後も同じように動作します。</target>
        </trans-unit>
        <trans-unit id="e7c6137b874e291f7e936bf89d2438f289c1e9a2" translate="yes" xml:space="preserve">
          <source>The R-Tree concept originated with &lt;a href=&quot;http://www.baymoon.com/~tg2/&quot;&gt;Toni Guttman&lt;/a&gt;: &lt;em&gt;R-Trees: A Dynamic Index Structure for Spatial Searching&lt;/em&gt;, Proc. 1984 ACM SIGMOD International Conference on Management of Data, pp. 47-57. The implementation found in SQLite is a refinement of Guttman's original idea, commonly called &quot;R*Trees&quot;, that was described by Norbert Beckmann, Hans-Peter Kriegel, Ralf Schneider, Bernhard Seeger: &lt;em&gt;The R*-Tree: An Efficient and Robust Access Method for Points and Rectangles.&lt;/em&gt; SIGMOD Conference 1990: 322-331.</source>
          <target state="translated">Rツリーの概念がで始まっ&lt;a href=&quot;http://www.baymoon.com/~tg2/&quot;&gt;トニガットマン&lt;/a&gt;：&lt;em&gt;R-木：空間検索のためのAの動的インデックス構造&lt;/em&gt;、PROC。1984 ACM SIGMOD国際データ管理会議、47-57ページ。SQLiteにある実装は、一般に「R * Trees」と呼ばれるガットマンのオリジナルのアイデアを改良したもので、Norbert Beckmann、Hans-Peter Kriegel、Ralf Schneider、Bernhard Seeger：&lt;em&gt;R * -Tree：An Efficient and Robust Access&lt;/em&gt;によって記述され&lt;em&gt;ました。ポイントと長方形の方法。&lt;/em&gt;SIGMOD会議1990：322-331。</target>
        </trans-unit>
        <trans-unit id="5d3074807f0a652cf6707800a925f23953d72a9a" translate="yes" xml:space="preserve">
          <source>The RAISE() function</source>
          <target state="translated">RAISE()関数</target>
        </trans-unit>
        <trans-unit id="c69d2de0461d9e5577928a8a0c182e55c377b7ea" translate="yes" xml:space="preserve">
          <source>The RBU Extension</source>
          <target state="translated">RBU拡張</target>
        </trans-unit>
        <trans-unit id="f271a1dcb4b99763d2ff19003d2b360191882c40" translate="yes" xml:space="preserve">
          <source>The RBU database table contains a single row for each target database row inserted, updated or deleted by the update. Populating the RBU database tables is described in &lt;a href=&quot;rbu#database_contents&quot;&gt;the following section&lt;/a&gt;.</source>
          <target state="translated">RBUデータベーステーブルには、更新によって挿入、更新、または削除されたターゲットデータベースの行ごとに1つの行が含まれます。RBUデータベーステーブルへの入力については&lt;a href=&quot;rbu#database_contents&quot;&gt;、次のセクションで&lt;/a&gt;説明します。</target>
        </trans-unit>
        <trans-unit id="5b9dd90a4d99e081d94181c982214ebaab88f1ab" translate="yes" xml:space="preserve">
          <source>The RBU extension interface allows an application to apply an RBU update stored in an RBU database to an existing target database. The procedure is as follows:</source>
          <target state="translated">RBU拡張インターフェースは、アプリケーションがRBUデータベースに格納されたRBU更新を既存のターゲットデータベースに適用することを可能にします。その手順は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="fb0cbd808e0878559e4326851133fccc2e2e33dd" translate="yes" xml:space="preserve">
          <source>The RBU extension is an add-on for SQLite designed for use with large SQLite database files on low-power devices at the edge of a network. RBU may be used for two separate tasks:</source>
          <target state="translated">RBU 拡張機能は、ネットワークのエッジにある低消費電力デバイス上の大規模な SQLite データベースファイルで使用するために設計された SQLite 用のアドオンです。RBU は、2 つの異なるタスクに使用することができます。</target>
        </trans-unit>
        <trans-unit id="dc51cf7dfcbe19fae28d177efed486cafebfaa37" translate="yes" xml:space="preserve">
          <source>The RBU extension is not enabled by default. To enable it, compile the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; with the &lt;a href=&quot;compile#enable_rbu&quot;&gt;SQLITE_ENABLE_RBU&lt;/a&gt; compile-time option.</source>
          <target state="translated">RBU拡張機能はデフォルトでは有効になっていません。これを有効にするには、&lt;a href=&quot;compile#enable_rbu&quot;&gt;SQLITE_ENABLE_RBU&lt;/a&gt;コンパイル時オプションを使用して&lt;a href=&quot;amalgamation&quot;&gt;融合&lt;/a&gt;をコンパイルします。</target>
        </trans-unit>
        <trans-unit id="0d487cd05415f0ab5a85f8a6d6877a414f0dad6c" translate="yes" xml:space="preserve">
          <source>The RBU update will not detect or prevent foreign key or CHECK constraint violations.</source>
          <target state="translated">RBUの更新は、外部キーまたはCHECK制約違反を検出または防止しません。</target>
        </trans-unit>
        <trans-unit id="593961271c55fed248c83e9d463fa6fd9e121437" translate="yes" xml:space="preserve">
          <source>The RBU update will not fire any triggers.</source>
          <target state="translated">RBUアップデートではトリガーは発動しません。</target>
        </trans-unit>
        <trans-unit id="c6564cc776de2c808e8f2b66fc117a6728b91dc4" translate="yes" xml:space="preserve">
          <source>The REGEXP operator is a special syntax for the regexp() user function. No regexp() user function is defined by default and so use of the REGEXP operator will normally result in an error message. If an &lt;a href=&quot;appfunc&quot;&gt;application-defined SQL function&lt;/a&gt; named &quot;regexp&quot; is added at run-time, then the &quot;</source>
          <target state="translated">REGEXP演算子は、regexp（）ユーザー関数の特別な構文です。デフォルトではregexp（）ユーザー関数は定義されていないため、REGEXP演算子を使用すると、通常はエラーメッセージが表示されます。場合は&lt;a href=&quot;appfunc&quot;&gt;、アプリケーション定義のSQL関数&lt;/a&gt;「正規表現」という名前は、実行時に追加され、その後&quot;</target>
        </trans-unit>
        <trans-unit id="d8e251943a38b26d445d7abf3f883e482037ceab" translate="yes" xml:space="preserve">
          <source>The REGEXP operator is a special syntax for the regexp() user function. No regexp() user function is defined by default and so use of the REGEXP operator will normally result in an error message. If an &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL function&lt;/a&gt; named &quot;regexp&quot; is added at run-time, then the &quot;</source>
          <target state="translated">REGEXP演算子は、regexp（）ユーザー関数の特別な構文です。regexp（）ユーザー関数はデフォルトでは定義されていないため、REGEXP演算子を使用すると、通常、エラーメッセージが表示されます。場合は&lt;a href=&quot;c3ref/create_function&quot;&gt;、アプリケーション定義のSQL関数&lt;/a&gt;「正規表現」という名前は、実行時に追加され、その後&quot;</target>
        </trans-unit>
        <trans-unit id="f6504d5094ffa58be5ab1ac79df65f0b1aba5e47" translate="yes" xml:space="preserve">
          <source>The REINDEX command is used to delete and recreate indices from scratch. This is useful when the definition of a collation sequence has changed, or when there are &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt; involving a function whose definition has changed.</source>
          <target state="translated">REINDEXコマンドは、インデックスを最初から削除および再作成するために使用されます。これは、照合順序の定義が変更された場合、または定義が変更された関数を含む&lt;a href=&quot;expridx&quot;&gt;式にインデックス&lt;/a&gt;がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5a60389a484988aa39c6d8ad03d71480c4d40ec6" translate="yes" xml:space="preserve">
          <source>The REINDEX command is used to delete and recreate indices from scratch. This is useful when the definition of a collation sequence has changed.</source>
          <target state="translated">REINDEXコマンドは、ゼロからインデックスを削除して再作成するために使用します。これは、照合順序の定義が変更された場合に便利です。</target>
        </trans-unit>
        <trans-unit id="26337c24aa4b0f0ab8be7c9f3c788f1a63917d77" translate="yes" xml:space="preserve">
          <source>The REINDEX command was added.</source>
          <target state="translated">REINDEXコマンドを追加しました。</target>
        </trans-unit>
        <trans-unit id="25bdb1a8b2079e760c4eabb862683c2777d36a53" translate="yes" xml:space="preserve">
          <source>The RELEASE command is like a &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; for a SAVEPOINT. The RELEASE command causes all savepoints back to and including the most recent savepoint with a matching name to be removed from the transaction stack. The RELEASE of an inner transaction does not cause any changes to be written to the database file; it merely removes savepoints from the transaction stack such that it is no longer possible to ROLLBACK TO those savepoints. If a RELEASE command releases the outermost savepoint, so that the transaction stack becomes empty, then RELEASE is the same as &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;. The &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; command may be used to release all savepoints and commit the transaction even if the transaction was originally started by a SAVEPOINT command instead of a &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; command.</source>
          <target state="translated">RELEASEコマンドは、SAVEPOINTの&lt;a href=&quot;lang_transaction&quot;&gt;COMMITの&lt;/a&gt;ようなものです。RELEASEコマンドを使用すると、名前が一致する最新のセーブポイントまでのすべてのセーブポイントがトランザクションスタックから削除されます。内部トランザクションのRELEASEによって、データベースファイルに変更が書き込まれることはありません。トランザクションスタックからセーブポイントを削除するだけで、それらのセーブポイントにROLLBACKできなくなります。RELEASEコマンドが最も外側のセーブポイントを解放してトランザクションスタックが空になる場合、RELEASEは&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;と同じです。&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;コマンドは、すべてのセーブポイントを解放し、トランザクションは、もともとの代わりに、SAVEPOINTコマンドによって開始された場合でも、トランザクションをコミットするために使用することができる&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="2ca08634243012d2e2bc4d0598e7fea902f6787a" translate="yes" xml:space="preserve">
          <source>The RELEASE command starts with the most recent addition to the transaction stack and releases savepoints backwards in time until it releases a savepoint with a matching savepoint-name. Prior savepoints, even savepoints with matching savepoint-names, are unchanged. If the RELEASE command causes the transaction stack to become empty (if the RELEASE command releases the outermost transaction from the stack) then the transaction commits.</source>
          <target state="translated">RELEASEコマンドは、トランザクション・スタックに追加された最新のものから開始し、一致するセーブポイント名を持つセーブポイントをリリースするまで、セーブポイントを時間的に遡ってリリースします。それ以前のセーブポイントは、一致するセーブポイント名を持つセーブポイントであっても変更されません。RELEASE コマンドによってトランザクションスタックが空になった場合(RELEASE コマンドがスタックから最外 部のトランザクションを解放した場合)、そのトランザクションはコミットします。</target>
        </trans-unit>
        <trans-unit id="00402a1bc7f00a30656be0c0b84db4535fdee37b" translate="yes" xml:space="preserve">
          <source>The RENAME COLUMN TO syntax changes the column-name of table table-name into new-column-name. The column name is changed both within the table definition itself and also within all indexes, triggers, and views that reference the column. If the column name change would result in a semantic ambiguity in a trigger or view, then the RENAME COLUMN fails with an error and no changes are applied.</source>
          <target state="translated">RENAME COLUMN TO 構文は、テーブル名のカラム名を新しいカラム名に変更します。カラム名は、テーブル定義自体の中だけでなく、そのカラムを参照するすべてのインデックス、トリガ、およびビューの中でも変更されます。カラム名の変更がトリガまたはビューの意味的な曖昧さにつながる場合、RENAME COLUMNはエラーで失敗し、変更は適用されません。</target>
        </trans-unit>
        <trans-unit id="4fd18ba9ff83bdc2461dca0a5dcb6bdcec775c80" translate="yes" xml:space="preserve">
          <source>The RENAME TO syntax changes the name of table-name to new-table-name. This command cannot be used to move a table between attached databases, only to rename a table within the same database. If the table being renamed has triggers or indices, then these remain attached to the table after it has been renamed.</source>
          <target state="translated">RENAME TO 構文は、テーブル名の名前を new-table-name に変更します。このコマンドは、接続されたデータベース間でテーブルを移動するためには使用できず、同じデータベース内のテーブルの名前を変更するためだけに使用します。名前を変更するテーブルにトリガまたはインデックスがある場合、これらは名前を変更した後もテーブルにアタッチされたままになります。</target>
        </trans-unit>
        <trans-unit id="802816683a1617052efa11363c7e7856de219468" translate="yes" xml:space="preserve">
          <source>The REPLACE command is an alias for the &quot;&lt;a href=&quot;lang_conflict&quot;&gt;INSERT OR REPLACE&lt;/a&gt;&quot; variant of the &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; command. This alias is provided for compatibility other SQL database engines. See the &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; command documentation for additional information.</source>
          <target state="translated">REPLACEコマンドは、&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;コマンドの &quot; &lt;a href=&quot;lang_conflict&quot;&gt;INSERT OR REPLACE&lt;/a&gt; &quot;バリアントのエイリアスです。このエイリアスは、他のSQLデータベースエンジンとの互換性のために提供されています。詳細については、&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f900ded58f3c3fd3840ddc24eb90dbbf605e279b" translate="yes" xml:space="preserve">
          <source>The ROLLBACK TO command reverts the state of the database back to what it was just after the corresponding SAVEPOINT. Note that unlike that plain &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; command (without the TO keyword) the ROLLBACK TO command does not cancel the transaction. Instead of cancelling the transaction, the ROLLBACK TO command restarts the transaction again at the beginning. All intervening SAVEPOINTs are canceled, however.</source>
          <target state="translated">ROLLBACK TOコマンドは、データベースの状態を、対応するSAVEPOINTの直後の状態に戻します。その単純な&lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt;コマンド（TOキーワードなし）とは異なり、ROLLBACK TOコマンドはトランザクションをキャンセルしないことに注意してください。トランザクションをキャンセルする代わりに、ROLLBACK TOコマンドはトランザクションを最初から再開します。ただし、間にあるSAVEPOINTはすべて取り消されます。</target>
        </trans-unit>
        <trans-unit id="cd447cb0f90571617cf670fb9ebcb0a187d10c25" translate="yes" xml:space="preserve">
          <source>The ROLLBACK command with a TO clause rolls back transactions going backwards in time back to the most recent SAVEPOINT with a matching name. The SAVEPOINT with the matching name remains on the transaction stack, but all database changes that occurred after that SAVEPOINT was created are rolled back. If the savepoint-name in a ROLLBACK TO command does not match any SAVEPOINT on the stack, then the ROLLBACK command fails with an error and leaves the state of the database unchanged.</source>
          <target state="translated">TO句を持つROLLBACKコマンドは、名前が一致する最新のSAVEPOINTまで時間を遡ってトランザクションをロールバックします。一致する名前のSAVEPOINTはトランザクション・スタック上に残りますが、そのSAVEPOINTが作成された後に発生したすべてのデータベース変更はロールバックされます。ROLLBACK TOコマンドのSAVEPOINT-NAMEがスタック上のどのSAVEPOINTにも一致しない場合、ROLLBACKコマンドはエラーで失敗し、データベースの状態は変更されません。</target>
        </trans-unit>
        <trans-unit id="62a43e8d492ce5e858bd1d1f31b22f0ef1c5e90c" translate="yes" xml:space="preserve">
          <source>The ROWS and GROUPS frame types are similar in that they both determine the extent of a frame by counting relative to the current row. The difference is that ROWS counts individual rows and GROUPS counts peer groups. The RANGE frame type is different. The RANGE frame type determines the extent of a frame by looking for expression values that are within some band of values relative to the current row.</source>
          <target state="translated">ROWSとGROUPSのフレームタイプは、どちらも現在の行を相対的にカウントすることでフレームの範囲を決定するという点で似ています。違いは、ROWS は個々の行をカウントし、GROUPS はピアグループをカウントすることです。RANGEフレームタイプは異なります。RANGEフレームタイプは、現在の行からの相対的な値のいくつかのバンド内にある式の値を探すことによって、フレームの範囲を決定します。</target>
        </trans-unit>
        <trans-unit id="6cd583a191932218eb3314e3e838d31fd080381b" translate="yes" xml:space="preserve">
          <source>The Robson proof applies separately to each of the memory allocators used by SQLite:</source>
          <target state="translated">ロブソンの証明は、SQLite が使用するメモリアロケータのそれぞれに個別に適用されます。</target>
        </trans-unit>
        <trans-unit id="ebd8832f03de287c31f207b9169a825dcdfbcb2a" translate="yes" xml:space="preserve">
          <source>The RowSet object is optimized for the case where sets of integers are inserted in distinct phases, which each set contains no duplicates. Each set is identified by a unique P4 value. The first set must have P4==0, the final set must have P4==-1, and for all other sets must have P4&amp;gt;0.</source>
          <target state="translated">RowSetオブジェクトは、整数のセットが異なるフェーズに挿入され、各セットに重複がない場合に最適化されています。各セットは、一意のP4値によって識別されます。最初のセットはP4 == 0でなければならず、最後のセットはP4 ==-1でなければならず、他のすべてのセットはP4&amp;gt; 0でなければなりません。</target>
        </trans-unit>
        <trans-unit id="69b35696d5bc7e8c253762e4c23df59d339d7859" translate="yes" xml:space="preserve">
          <source>The SAVEPOINT command starts a new transaction with a name. The transaction names need not be unique. A SAVEPOINT can be started either within or outside of a &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;...&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;. When a SAVEPOINT is the outer-most savepoint and it is not within a &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;...&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; then the behavior is the same as BEGIN DEFERRED TRANSACTION.</source>
          <target state="translated">SAVEPOINTコマンドは、名前を指定して新しいトランザクションを開始します。トランザクション名は一意である必要はありません。SAVEPOINTは、&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; ... &lt;a href=&quot;lang_transaction&quot;&gt;COMMITの&lt;/a&gt;内部または外部で開始できます。SAVEPOINTが最も外側のセーブポイントであり、&lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; ... &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;内にない場合、動作はBEGIN DEFERRED TRANSACTIONと同じです。</target>
        </trans-unit>
        <trans-unit id="ce13fbd458ee477db75220e11cabd929def8f2a4" translate="yes" xml:space="preserve">
          <source>The SCHEMA column is NULL, except for cases when the &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; interface is used to interrogate the ZIPVFS backend. As this only happens when the memstat.c module is compiled with -DSQLITE_ENABLE_ZIPVFS and when &lt;a href=&quot;https://www.hwaci.com/sw/sqlite/zipvfs.html&quot;&gt;ZIPVFS&lt;/a&gt; is in use, SCHEMA is usually NULL.</source>
          <target state="translated">&lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;インターフェースを使用してZIPVFSバックエンドに問い合わせる場合を除いて、SCHEMA列はNULL です。これはのみ発生したようmemstat.cモジュールは-DSQLITE_ENABLE_ZIPVFSでコンパイルされたときに、いつ&lt;a href=&quot;https://www.hwaci.com/sw/sqlite/zipvfs.html&quot;&gt;ZIPVFSが&lt;/a&gt;使用されている、SCHEMAは、通常はNULLです。</target>
        </trans-unit>
        <trans-unit id="c6115bd106a2add942203424bfde4ef5e373053a" translate="yes" xml:space="preserve">
          <source>The SELECT begins in a familiar fashion. First the column names are initialized and the table being queried is opened. Things become different beginning with instructions 5 and 6 where the index file is also opened. Instructions 7 and 8 make a key with the value of 50. The &lt;a href=&quot;opcode#MemStore&quot;&gt;MemStore&lt;/a&gt; instruction at 9 stores the index key in VDBE memory location 0. The VDBE memory is used to avoid having to fetch a value from deep in the stack, which can be done, but makes the program harder to generate. The following instruction &lt;a href=&quot;opcode#MoveTo&quot;&gt;MoveTo&lt;/a&gt; at address 10 pops the key off the stack and moves the index cursor to the first row of the index with that key. This initializes the cursor for use in the following loop.</source>
          <target state="translated">SELECTはおなじみの方法で始まります。最初に列名が初期化され、クエリ対象のテーブルが開かれます。インデックスファイルも開く手順5と6から、状況は異なります。命令7と8は、値が50のキーを作成します&lt;a href=&quot;opcode#MemStore&quot;&gt;。9のMemStore&lt;/a&gt;命令は、インデックスキーをVDBEメモリロケーション0に格納します。VDBEメモリは、スタックの深いところから値をフェッチする必要がないようにするために使用されます。ただし、プログラムの生成が難しくなります。次の命令&lt;a href=&quot;opcode#MoveTo&quot;&gt;MoveToは&lt;/a&gt;、アドレス10でスタックからキーをポップし、インデックスカーソルをそのキーを持つインデックスの最初の行に移動します。これにより、次のループで使用するためにカーソルが初期化されます。</target>
        </trans-unit>
        <trans-unit id="360db9d4f11a05425a6e0a615ab3f9ee4fa2dd3b" translate="yes" xml:space="preserve">
          <source>The SELECT statement above shows output of:</source>
          <target state="translated">上のSELECT文の出力が表示されています。</target>
        </trans-unit>
        <trans-unit id="7a0eced3e1981106cb4ea9f622f50ad79cd9e5a4" translate="yes" xml:space="preserve">
          <source>The SELECT statement is the most complicated command in the SQL language. To make the description easier to follow, some of the passages below describe the way the data returned by a SELECT statement is determined as a series of steps. It is important to keep in mind that this is purely illustrative - in practice neither SQLite nor any other SQL engine is required to follow this or any other specific process.</source>
          <target state="translated">SELECT文はSQL言語の中で最も複雑なコマンドです。説明をわかりやすくするために、以下のいくつかの文章では、SELECT文によって返されるデータが一連のステップとして決定される方法を説明しています。これは純粋に例示的なものであり、実際にはSQLiteも他のSQLエンジンもこのような特定のプロセスに従う必要はないことを覚えておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="ecb8c3356a31e99d0c2a4414b1c0627a922137ba" translate="yes" xml:space="preserve">
          <source>The SELECT statement is used to query the database. The result of a SELECT is zero or more rows of data where each row has a fixed number of columns. A SELECT statement does not make any changes to the database.</source>
          <target state="translated">SELECT文はデータベースへの問い合わせに使用されます。SELECTの結果は0行以上のデータで、各行は固定の列数を持ちます。SELECT文はデータベースに変更を加えません。</target>
        </trans-unit>
        <trans-unit id="06f43e1f8274aa8dc54f915ee9dedc6e51d7565a" translate="yes" xml:space="preserve">
          <source>The SELECT statement on the left returns a single row since '0' and '0.0' are treated as numbers and are therefore indistinct. But the SELECT statement on the right returns two rows since 0 and 0.0 are treated a strings which are different.</source>
          <target state="translated">左側のSELECT文は、'0'と'0.0'が数値として扱われているため、1行を返します。しかし、右のSELECT文は、0と0.0が異なる文字列として扱われるため、2行を返します。</target>
        </trans-unit>
        <trans-unit id="e902534831ef4c318239e243a80c6ae4bb31b6d1" translate="yes" xml:space="preserve">
          <source>The SQL command &quot;BEGIN TRANSACTION&quot; (the TRANSACTION keyword is optional) is used to take SQLite out of autocommit mode. Note that the BEGIN command does not acquire any locks on the database. After a BEGIN command, a SHARED lock will be acquired when the first SELECT statement is executed. A RESERVED lock will be acquired when the first INSERT, UPDATE, or DELETE statement is executed. No EXCLUSIVE lock is acquired until either the memory cache fills up and must be spilled to disk or until the transaction commits. In this way, the system delays blocking read access to the file file until the last possible moment.</source>
          <target state="translated">SQL コマンド &quot;BEGIN TRANSACTION&quot; (TRANSACTION キーワードはオプションです)を使用して、SQLite を自動コミット・モードから解除します。BEGIN コマンドはデータベースのロックを取得しないことに注意してください。BEGIN コマンドの後、最初の SELECT 文の実行時に SHARED ロックが取得されます。RESERVEDロックは、最初のINSERT、UPDATE、またはDELETE文が実行されたときに取得されます。メモリ・キャッシュが一杯になってディスクに流出しなければならないか、トランザクションがコミットされるまでは、EXCLUSIVEロックは取得されません。このようにして、システムは可能な限り最後の瞬間までファイルファイルへの読み取りアクセスをブロックするのを遅らせます。</target>
        </trans-unit>
        <trans-unit id="af8ff773b8faa66109f99e9e85b3a719b5cf7712" translate="yes" xml:space="preserve">
          <source>The SQL command &quot;COMMIT&quot; does not actually commit the changes to disk. It just turns autocommit back on. Then, at the conclusion of the command, the regular autocommit logic takes over and causes the actual commit to disk to occur. The SQL command &quot;ROLLBACK&quot; also operates by turning autocommit back on, but it also sets a flag that tells the autocommit logic to rollback rather than commit.</source>
          <target state="translated">SQLコマンド &quot;commit &quot;は、実際には変更をディスクにコミットしません。単に自動コミットをオンに戻すだけです。そして、コマンドが終了すると、通常のオートコミットロジックが引き継がれ、ディスクへの実際のコミットが行われます。SQL コマンド &quot;ROLLBACK&quot; もまた、オートコミットをオンに戻すことで動作しますが、コミットではなくロールバックするようにオートコミットロジックに指示するフラグを設定します。</target>
        </trans-unit>
        <trans-unit id="1cddc0d667491d9249e7b156b49c099f6b89cdde" translate="yes" xml:space="preserve">
          <source>The SQL function creation interfaces may be called multiple times with the same function name. If two calls have the same function number but a different number of arguments, for example, then two variants of the SQL function will be registered, each taking a different number of arguments.</source>
          <target state="translated">SQL関数作成インターフェースは、同じ関数名で複数回呼び出されることがあります。例えば、2つの呼び出しが同じ関数番号で引数の数が異なる場合、SQL関数の2つのバリエーションが登録され、それぞれが異なる数の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="82504fd949554ebcdca052a7976082cbbc273023" translate="yes" xml:space="preserve">
          <source>The SQL fuzz generator tests are part of the TCL test suite. During a full test run, about 111.3 thousand fuzz SQL statements are generated and tested.</source>
          <target state="translated">SQLファズジェネレータのテストは、TCLテストスイートの一部です。完全なテスト実行中に、約111.3千のfuzz SQL文が生成され、テストされます。</target>
        </trans-unit>
        <trans-unit id="3044d65e21f066cf67f7a5007e05a25a7bcd19f9" translate="yes" xml:space="preserve">
          <source>The SQL language features several contexts where an expression is evaluated and the result converted to a boolean (true or false) value. These contexts are:</source>
          <target state="translated">SQL言語は、式が評価され、その結果がブール値(真または偽)に変換されるいくつかのコンテキストを特徴としています。これらのコンテキストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8b4f854d9a377d64ee6ebf1ef026f57adf3093a6" translate="yes" xml:space="preserve">
          <source>The SQL language is a &quot;standard&quot;. Even so, no two SQL database engines work exactly alike. Every SQL implementation has it own peculiarities and oddities, and SQLite is no exception to this rule.</source>
          <target state="translated">SQL言語は「標準」です。それでも、2つのSQLデータベースエンジンが全く同じように動作することはありません。すべてのSQLの実装には独自の特殊性や奇抜さがあり、SQLiteも例外ではありません。</target>
        </trans-unit>
        <trans-unit id="10de2fe05ef5e79065921e1cfe79576a9514e5b1" translate="yes" xml:space="preserve">
          <source>The SQL language is rich in keywords. Most SQL implementations do not allow keywords to be used as identifiers (the names of table or columns) unless they are enclosed in double-quotes. But SQLite is more flexible. Many keywords can be used as identifiers without needing to be quoted, as long as those keywords are used in a context where it is clear that they are intended to be an identifier.</source>
          <target state="translated">SQL言語にはキーワードが豊富にあります。ほとんどのSQLの実装では、ダブルクォートで囲まれていない限り、キーワードを識別子(テーブルやカラムの名前)として使用することはできません。しかし、SQLiteはより柔軟です。多くのキーワードは、それらのキーワードが識別子であることが明らかな文脈で使用されている限り、引用符で囲まなくても識別子として使用することができます。</target>
        </trans-unit>
        <trans-unit id="a6afa95ef6a6482806d3030ee240e85ae2e39791" translate="yes" xml:space="preserve">
          <source>The SQL language is very powerful, and so it is always possible for malicious SQL inputs (or erroneous SQL inputs caused by an application bug) to submit SQL that runs for a very long time. To prevent this from becoming a denial-of-service attack, consider using the &lt;a href=&quot;c3ref/progress_handler&quot;&gt;sqlite3_progress_handler()&lt;/a&gt; interface to invoke a callback periodically as each SQL statement runs, and have that callback return non-zero to abort the statement if the statement runs for too long. Alternatively, set a timer in a separate thread and invoke &lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt()&lt;/a&gt; when the timer goes off to prevent the SQL statement from running forever.</source>
          <target state="translated">SQL言語は非常に強力であるため、悪意のあるSQL入力（またはアプリケーションのバグが原因で発生した誤ったSQL入力）が、長時間実行されるSQLを送信する可能性があります。これがサービス拒否攻撃になるのを防ぐには、&lt;a href=&quot;c3ref/progress_handler&quot;&gt;sqlite3_progress_handler（）&lt;/a&gt;インターフェースを使用して、各SQLステートメントの実行時に定期的にコールバックを呼び出し、ステートメントの実行時間が長すぎる場合、コールバックがゼロ以外の値を返すようにしてください。 。または、別のスレッドにタイマーを設定し、タイマーがオフになったときに&lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt（）&lt;/a&gt;を呼び出して、SQLステートメントが永久に実行されないようにします。</target>
        </trans-unit>
        <trans-unit id="48efb4a27989fcb1221b7de6665fb9fdbe5be779" translate="yes" xml:space="preserve">
          <source>The SQL language parser for SQLite is generated using a code-generator program called &quot;Lemon&quot;. The Lemon program reads a grammar of the input language and emits C-code to implement a parser for that language.</source>
          <target state="translated">SQLite用のSQL言語パーサは、&quot;Lemon &quot;と呼ばれるコード生成プログラムを使用して生成されます。Lemon プログラムは入力言語の文法を読み込んで、その言語用のパーサを実装するための C コードを出力します。</target>
        </trans-unit>
        <trans-unit id="3001af76a5af3b3d6822f17dc4d8570b011ad5be" translate="yes" xml:space="preserve">
          <source>The SQL output resulting from &lt;a href=&quot;c3ref/profile&quot;&gt;sqlite3_trace()&lt;/a&gt; is now modified to include the values of &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameters&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/profile&quot;&gt;sqlite3_trace（）&lt;/a&gt;からのSQL出力は、&lt;a href=&quot;lang_expr#varparam&quot;&gt;バインドされたパラメータの&lt;/a&gt;値を含むように変更されました。</target>
        </trans-unit>
        <trans-unit id="677e1e6ba30ceb96b1361fef9b1a12b6f65a8d13" translate="yes" xml:space="preserve">
          <source>The SQL query in the example above uses less CPU than the first example in this section, but still has a non-obvious performance problem. SQLite satisfies this query by retrieving the value of the &quot;title&quot; column and matchinfo data from the FTS module for every row matched by the users query before it sorts and limits the results. Because of the way SQLite's virtual table interface works, retrieving the value of the &quot;title&quot; column requires loading the entire row from disk (including the &quot;content&quot; field, which may be quite large). This means that if the users query matches several thousand documents, many megabytes of &quot;title&quot; and &quot;content&quot; data may be loaded from disk into memory even though they will never be used for any purpose.</source>
          <target state="translated">上の例の SQL クエリは、このセクションの最初の例よりも CPU の使用量は少ないですが、明らかなパフォーマンスの問題はありません。SQLite は、ユーザー クエリでマッチしたすべての行について、FTS モジュールから &quot;title&quot; カラムの値と matchinfo データを取得してから、結果をソートして制限することで、このクエリを満たしています。SQLite の仮想テーブルインターフェイスの動作方法のため、&quot;title&quot; カラムの値を取得するには、ディスクから行全体をロードする必要があります(&quot;content&quot; フィールドを含む)。これは、ユーザーのクエリが数千のドキュメントにマッチした場合、何メガバイトもの &quot;title &quot;と &quot;content &quot;データがディスクからメモリにロードされる可能性があることを意味しています。</target>
        </trans-unit>
        <trans-unit id="44349eaec4c0440f46685e284dc3b9bdf9db6763" translate="yes" xml:space="preserve">
          <source>The SQL query in the following example block is one solution to this problem. In SQLite, when a &lt;a href=&quot;optoverview#flattening&quot;&gt;sub-query used in a join contains a LIMIT clause&lt;/a&gt;, the results of the sub-query are calculated and stored in temporary table before the main query is executed. This means that SQLite will load only the docid and matchinfo data for each row matching the users query into memory, determine the docid values corresponding to the ten most relevant documents, then load only the title and content information for those 10 documents only. Because both the matchinfo and docid values are gleaned entirely from the full-text index, this results in dramatically less data being loaded from the database into memory.</source>
          <target state="translated">次のサンプルブロックのSQLクエリは、この問題の1つの解決策です。 SQLiteでは&lt;a href=&quot;optoverview#flattening&quot;&gt;、結合で使用されるサブクエリにLIMIT句が含まれて&lt;/a&gt;いる場合、メインクエリが実行される前に、サブクエリの結果が計算され、一時テーブルに保存されます。つまり、SQLiteは、ユーザークエリに一致する各行のdocidデータとmatchinfoデータのみをメモリに読み込み、最も関連性の高い10個のドキュメントに対応するdocid値を決定し、それら10個のドキュメントのみのタイトルとコンテンツ情報のみを読み込みます。 matchinfoとdocidの両方の値がフルテキストインデックスから完全に収集されるため、データベースからメモリに読み込まれるデータが劇的に少なくなります。</target>
        </trans-unit>
        <trans-unit id="a5256c5c7d2eb97fecf26da60392ff96d1a9f664" translate="yes" xml:space="preserve">
          <source>The SQL standard requires double-quotes around identifiers and single-quotes around string literals. For example:</source>
          <target state="translated">SQL標準では、識別子をダブルクォートで囲み、文字列リテラルをシングルクォートで囲う必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7e7a261f0a3880c45baf726e85dad9e7315752c4" translate="yes" xml:space="preserve">
          <source>The SQL standard requires that a UNIQUE constraint be enforced even if one or more of the columns in the constraint are NULL, but SQLite does not do this. Isn't that a bug?</source>
          <target state="translated">SQL標準では、制約の中の1つ以上の列がNULLであってもUNIQUE制約を適用することが求められていますが、SQLiteではこれが行われていません。これはバグではないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="7a04eb23eef56ed5f467e10f54232c8a27c42d7f" translate="yes" xml:space="preserve">
          <source>The SQL standard specifies a large number of keywords which may not be used as the names of tables, indices, columns, databases, user-defined functions, collations, virtual table modules, or any other named object. The list of keywords is so long that few people can remember them all. For most SQL code, your safest bet is to never use any English language word as the name of a user-defined object.</source>
          <target state="translated">SQL標準では、テーブル、インデックス、カラム、データベース、ユーザー定義関数、照合順序、仮想テーブルモジュール、その他の名前付きオブジェクトの名前として使用できないキーワードが多数規定されています。キーワードのリストは非常に長く、それらをすべて覚えている人はほとんどいません。ほとんどのSQLコードでは、ユーザー定義オブジェクトの名前に英語の単語を使用しないことが最も安全です。</target>
        </trans-unit>
        <trans-unit id="f8004c4c668fddca439c94d74dc1d6f7c7684dbe" translate="yes" xml:space="preserve">
          <source>The SQL standard specifies that single-quotes in strings are escaped by putting two single quotes in a row. SQL works like the Pascal programming language in this regard. Example:</source>
          <target state="translated">SQL標準では、文字列中のシングルクォートは、行の中に2つのシングルクォートを入れることでエスケープされるように規定されています。SQLはこの点ではPascalプログラミング言語のように動作します。例を示します。</target>
        </trans-unit>
        <trans-unit id="59242cd06ef98d5456a2038bc8b7aff22753485f" translate="yes" xml:space="preserve">
          <source>The SQL statement is a UTF-8 string for sqlite3_prepare(). The sqlite3_prepare16() works the same way except that it expects a UTF-16 string as SQL input. Only the first SQL statement in the input string is compiled. The fifth parameter is filled in with a pointer to the next (uncompiled) SQLite statement in the input string, if any. The sqlite3_finalize() routine deallocates a prepared SQL statement. All prepared statements must be finalized before the database can be closed. The sqlite3_reset() routine resets a prepared SQL statement so that it can be executed again.</source>
          <target state="translated">SQL文はsqlite3_prepare()のUTF-8文字列です。sqlite3_prepare16()は、SQL入力としてUTF-16文字列を期待していることを除いては、同じように動作します。入力文字列の最初のSQL文だけがコンパイルされます。5番目のパラメータは、入力文字列の中に次の(コンパイルされていない)SQLite文があれば、そのポインタで埋められます。sqlite3_finalize()ルーチンは準備されたSQL文を解放します。準備されたすべての文は、データベースを閉じる前に最終化されなければなりません。sqlite3_reset()ルーチンは準備されたSQL文をリセットし、再度実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="05506ce34afb730ccba4a9b42a033056b9bc26b4" translate="yes" xml:space="preserve">
          <source>The SQL statement may contain tokens of the form &quot;?&quot; or &quot;?nnn&quot; or &quot;:aaa&quot; where &quot;nnn&quot; is an integer and &quot;aaa&quot; is an identifier. Such tokens represent unspecified literal values (or &quot;wildcards&quot;) to be filled in later by the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind&lt;/a&gt; interface. Each wildcard has an associated number which is its sequence in the statement or the &quot;nnn&quot; in the case of a &quot;?nnn&quot; form. It is allowed for the same wildcard to occur more than once in the same SQL statement, in which case all instance of that wildcard will be filled in with the same value. Unbound wildcards have a value of NULL.</source>
          <target state="translated">SQLステートメントには、「？」形式のトークンを含めることができます。または「？nnn」または「：aaa」。「nnn」は整数、「aaa」は識別子です。このようなトークンは、&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind&lt;/a&gt;インターフェースによって後で入力される未指定のリテラル値（または「ワイルドカード」）を表します。各ワイルドカードには、ステートメント内のシーケンス、または「？nnn」形式の場合は「nnn」の番号が関連付けられています。同じSQLステートメントで同じワイルドカードを複数回使用できます。その場合、そのワイルドカードのすべてのインスタンスに同じ値が入力されます。バインドされていないワイルドカードの値はNULLです。</target>
        </trans-unit>
        <trans-unit id="449ffcbd2d390b1586ef94ae6aaf64cdfbb6cfbd" translate="yes" xml:space="preserve">
          <source>The SQL statement supplied as the argument to the CREATE VIRTUAL TABLE statement is executed when the table is created. It must return either four or five columns. Each row returned describes one of the component tables. The first four columns are interpreted, from first to last, as:</source>
          <target state="translated">CREATE VIRTUAL TABLE文の引数として与えられたSQL文は、テーブルが作成されたときに実行されます。これは4つまたは5つの列を返さなければなりません。返される各行は、コンポーネントテーブルの1つを記述します。最初の4つの列は、最初から最後まで、次のように解釈されます。</target>
        </trans-unit>
        <trans-unit id="dd374f0003c79e47aa8712ac4ea58e570b4758d5" translate="yes" xml:space="preserve">
          <source>The SQL statements used to implement SQLite Archive operations make use of various &lt;a href=&quot;loadext&quot;&gt;loadable extensions&lt;/a&gt;. These extensions are all available in the &lt;a href=&quot;https://sqlite.org/src&quot;&gt;SQLite source tree&lt;/a&gt; in the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc&quot;&gt;ext/misc/ subfolder&lt;/a&gt;. The extensions needed for full SQLite Archive support include:</source>
          <target state="translated">SQLiteアーカイブ操作の実装に使用されるSQLステートメントは、さまざまな&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能&lt;/a&gt;を利用します。これらの拡張機能はすべて、&lt;a href=&quot;https://sqlite.org/src/file/ext/misc&quot;&gt;ext / misc /サブフォルダー&lt;/a&gt;の&lt;a href=&quot;https://sqlite.org/src&quot;&gt;SQLiteソースツリー&lt;/a&gt;で使用できます。SQLite Archiveを完全にサポートするために必要な拡張機能は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cc6ae8d6fb78d715b5f8b26d43534dafb12ea942" translate="yes" xml:space="preserve">
          <source>The SQL syntax for custom queries is the same regardless of which interface, sqlite3_rtree_geometry_callback() or sqlite3_rtree_query_callback(), is used to register the SQL function. However, the newer query-style callbacks give the application greater control over how the query proceeds.</source>
          <target state="translated">カスタムクエリのSQL構文は、SQL関数の登録にsqlite3_rtree_geometry_callback()とsqlite3_rtree_query_callback()のどちらのインターフェイスを使用しても同じです。しかし、新しいクエリスタイルのコールバックは、アプリケーションがクエリをどのように進めるかをより大きく制御することができます。</target>
        </trans-unit>
        <trans-unit id="f9308701d68c8225498cd757f7331dde6f73adc8" translate="yes" xml:space="preserve">
          <source>The SQL:1999 spec requires that the RECURSIVE keyword follow WITH in any WITH clause that includes a recursive common table expression. However, for compatibility with SqlServer and Oracle, SQLite does not enforce this rule.</source>
          <target state="translated">SQL:1999仕様では、再帰的な共通テーブル式を含むWITH句では、RECURSIVEキーワードがWITHに続くことが要求されています。しかし、SqlServerやOracleとの互換性のために、SQLiteではこのルールを適用していません。</target>
        </trans-unit>
        <trans-unit id="b5ddf5e6785ea3822394b6d6a54fb42d4acd1778" translate="yes" xml:space="preserve">
          <source>The SQLITE_ABORT result code indicates that an operation was aborted prior to completion, usually be application request. See also: &lt;a href=&quot;rescode#interrupt&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;.</source>
          <target state="translated">SQLITE_ABORT結果コードは、操作が完了する前に打ち切られたことを示します。通常はアプリケーションの要求です。&lt;a href=&quot;rescode#interrupt&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1613fab985744b29bc64a3b7d315d71db7102a20" translate="yes" xml:space="preserve">
          <source>The SQLITE_ABORT_ROLLBACK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#abort&quot;&gt;SQLITE_ABORT&lt;/a&gt; indicating that an SQL statement aborted because the transaction that was active when the SQL statement first started was rolled back. Pending write operations always fail with this error when a rollback occurs. A &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; will cause a pending read operation to fail only if the schema was changed within the transaction being rolled back.</source>
          <target state="translated">SQLITE_ABORT_ROLLBACKエラーコードは、SQLステートメントが最初に開始されたときにアクティブだったトランザクションがロールバックされたためにSQLステートメントが&lt;a href=&quot;rescode#pve&quot;&gt;異常終了した&lt;/a&gt;ことを示す&lt;a href=&quot;rescode#abort&quot;&gt;SQLITE_ABORTの&lt;/a&gt;拡張エラーコードです。ロールバックが発生すると、保留中の書き込み操作は常にこのエラーで失敗します。A &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACKは、&lt;/a&gt;スキーマは、トランザクションがロールバックさで変化させた場合、保留中の読み取り操作のみ失敗します。</target>
        </trans-unit>
        <trans-unit id="9776b801900694be8692d527b6b6a5014611c72c" translate="yes" xml:space="preserve">
          <source>The SQLITE_AFF_MASK portion of P5 must be an affinity character - SQLITE_AFF_TEXT, SQLITE_AFF_INTEGER, and so forth. An attempt is made to coerce both inputs according to this affinity before the comparison is made. If the SQLITE_AFF_MASK is 0x00, then numeric affinity is used. Note that the affinity conversions are stored back into the input registers P1 and P3. So this opcode can cause persistent changes to registers P1 and P3.</source>
          <target state="translated">P5 の SQLITE_AFF_MASK 部分は、SQLITE_AFF_TEXT、SQLITE_AFF_INTEGER などの親和性文字でなければなりません。比較が行われる前に、この親和性に従って両方の入力を強制するように試みます。SQLITE_AFF_MASKが0x00の場合、数値の親和性が使用されます。アフィニティ変換は入力レジスタP1とP3に格納されることに注意してください。そのため、このオペコードはレジスタP1とP3に永続的な変更を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="dfa8cf2714776524ecdde2f427b30f632065e986" translate="yes" xml:space="preserve">
          <source>The SQLITE_AUTH error is returned when the &lt;a href=&quot;c3ref/set_authorizer&quot;&gt;authorizer callback&lt;/a&gt; indicates that an SQL statement being prepared is not authorized.</source>
          <target state="translated">SQLITE_AUTHエラーは、準備中のSQLステートメントが承認されていないことを&lt;a href=&quot;c3ref/set_authorizer&quot;&gt;承認者コールバックが&lt;/a&gt;示したときに返されます。</target>
        </trans-unit>
        <trans-unit id="a716819bd21e33b0b83c8f1def818df42717b54a" translate="yes" xml:space="preserve">
          <source>The SQLITE_BUSY result code differs from &lt;a href=&quot;rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt; in that SQLITE_BUSY indicates a conflict with a separate &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;, probably in a separate process, whereas &lt;a href=&quot;rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt; indicates a conflict within the same &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; (or sometimes a database connection with a &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt;).</source>
          <target state="translated">SQLITE_BUSY結果コードは&lt;a href=&quot;rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;とは異なります。SQLITE_BUSYは別の&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;との競合（おそらく別のプロセス内）を示し、&lt;a href=&quot;rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;は同じ&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;（または場合によっては&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;とのデータベース接続）内の競合を示します。</target>
        </trans-unit>
        <trans-unit id="6847ec78063b3fe6af5cc42bad60bb51ac404849" translate="yes" xml:space="preserve">
          <source>The SQLITE_BUSY result code indicates that the database file could not be written (or in some cases read) because of concurrent activity by some other &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;, usually a database connection in a separate process.</source>
          <target state="translated">SQLITE_BUSY結果コードは、他の&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;（通常は別のプロセスのデータベース接続）による同時アクティビティが原因で、データベースファイルの書き込み（または場合によっては読み取り）ができなかったことを示しています。</target>
        </trans-unit>
        <trans-unit id="3cfe6b580ae13113f460c28fc71a7b4dbcf6c75a" translate="yes" xml:space="preserve">
          <source>The SQLITE_BUSY_RECOVERY error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; that indicates that an operation could not continue because another process is busy recovering a &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; database file following a crash. The SQLITE_BUSY_RECOVERY error code only occurs on &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; databases.</source>
          <target state="translated">SQLITE_BUSY_RECOVERYエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;別のプロセスが回復ビジー状態であるため、操作を継続できなかったことを示します&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;クラッシュ後のデータベースファイルを。SQLITE_BUSY_RECOVERYエラーコードは、&lt;a href=&quot;wal&quot;&gt;WALモードの&lt;/a&gt;データベースでのみ発生します。</target>
        </trans-unit>
        <trans-unit id="fc5599d49b00bbca3062bad1e4d863f9643aada6" translate="yes" xml:space="preserve">
          <source>The SQLITE_BUSY_SNAPSHOT error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; that occurs on &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; databases when a database connection tries to promote a read transaction into a write transaction but finds that another &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; has already written to the database and thus invalidated prior reads.</source>
          <target state="translated">SQLITE_BUSY_SNAPSHOTエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;で発生&lt;a href=&quot;wal&quot;&gt;WALモードの&lt;/a&gt;データベース接続が別のことを書き込みトランザクションが、発見に読み取りトランザクションを促進しようとすると、データベース&lt;a href=&quot;c3ref/sqlite3&quot;&gt;、データベース接続が&lt;/a&gt;既にデータベースに書き込まれ、前の読み取りので無効化しています。</target>
        </trans-unit>
        <trans-unit id="9ff4a95f8927914c1763adf9045af4ab62d2f754" translate="yes" xml:space="preserve">
          <source>The SQLITE_CANTOPEN result code indicates that SQLite was unable to open a file. The file in question might be a primary database file or one of several &lt;a href=&quot;tempfiles&quot;&gt;temporary disk files&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CANTOPEN結果コードは、SQLiteがファイルを開くことができなかったことを示します。問題のファイルは、プライマリデータベースファイルまたはいくつかの&lt;a href=&quot;tempfiles&quot;&gt;一時ディスクファイルの&lt;/a&gt; 1つである可能性があります。</target>
        </trans-unit>
        <trans-unit id="500408920c5afff76382c31e4489f9ce53192205" translate="yes" xml:space="preserve">
          <source>The SQLITE_CANTOPEN_CONVPATH error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#cantopen&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt; used only by Cygwin &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; and indicating that the cygwin_conv_path() system call failed while trying to open a file. See also: &lt;a href=&quot;rescode#ioerr_convpath&quot;&gt;SQLITE_IOERR_CONVPATH&lt;/a&gt;</source>
          <target state="translated">SQLITE_CANTOPEN_CONVPATHエラーコードは、Cygwin &lt;a href=&quot;vfs&quot;&gt;VFSで&lt;/a&gt;のみ使用される&lt;a href=&quot;rescode#cantopen&quot;&gt;SQLITE_CANTOPENの&lt;/a&gt;&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;であり、ファイルを開こうとしたときにcygwin_conv_path（）システムコールが失敗したことを示します。参照：&lt;a href=&quot;rescode#ioerr_convpath&quot;&gt;SQLITE_IOERR_CONVPATH&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="55203070958c2991ba87f3b32bd40d536d90189a" translate="yes" xml:space="preserve">
          <source>The SQLITE_CANTOPEN_DIRTYWAL result code is not used at this time.</source>
          <target state="translated">SQLITE_CANTOPEN_DIRTYWALの結果コードは、現時点では使用していません。</target>
        </trans-unit>
        <trans-unit id="13b8dd7bacea04f63a2cb5fbae43d894d6332998" translate="yes" xml:space="preserve">
          <source>The SQLITE_CANTOPEN_FULLPATH error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#cantopen&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt; indicating that a file open operation failed because the operating system was unable to convert the filename into a full pathname.</source>
          <target state="translated">SQLITE_CANTOPEN_FULLPATHエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#cantopen&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt;オペレーティングシステムが完全パス名にファイル名を変換することができなかったため、ファイルオープン動作が失敗したことを示します。</target>
        </trans-unit>
        <trans-unit id="c1b7e5d009e56aefb1e5fa74fb773f95be397ef4" translate="yes" xml:space="preserve">
          <source>The SQLITE_CANTOPEN_ISDIR error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#cantopen&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt; indicating that a file open operation failed because the file is really a directory.</source>
          <target state="translated">SQLITE_CANTOPEN_ISDIRエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#cantopen&quot;&gt;SQLITE_CANTOPEN&lt;/a&gt;ファイルが実際にディレクトリであるため、ファイルのオープン操作が失敗したことを示します。</target>
        </trans-unit>
        <trans-unit id="3ff11cefb3f88aae4a84bf8291076f3bac03ede6" translate="yes" xml:space="preserve">
          <source>The SQLITE_CANTOPEN_NOTEMPDIR error code is no longer used.</source>
          <target state="translated">SQLITE_CANTOPEN_NOTEMPDIRのエラーコードが使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="06f769e27f147dfdd680f8a17a2bfe539caf9796" translate="yes" xml:space="preserve">
          <source>The SQLITE_CHECKPOINT_FULL, RESTART and TRUNCATE modes also obtain the exclusive &quot;writer&quot; lock on the database file. If the writer lock cannot be obtained immediately, and a busy-handler is configured, it is invoked and the writer lock retried until either the busy-handler returns 0 or the lock is successfully obtained. The busy-handler is also invoked while waiting for database readers as described above. If the busy-handler returns 0 before the writer lock is obtained or while waiting for database readers, the checkpoint operation proceeds from that point in the same way as SQLITE_CHECKPOINT_PASSIVE - checkpointing as many frames as possible without blocking any further. SQLITE_BUSY is returned in this case.</source>
          <target state="translated">SQLITE_CHECKPOINT_FULL、RESTART、およびTRUNCATEモードは、データベースファイル上の排他的な &quot;ライタ &quot;ロックも取得します。ライタロックをすぐに取得できず、ビジーハンドラが設定されている場合、ビジーハンドラが0を返すか、ロックが正常に取得されるまで、ビジーハンドラが呼び出され、ライタロックが再試行されます。また、ビジーハンドラは、上述のようにデータベース・リーダを待っている間にも呼び出されます。ライターロックが取得される前、またはデータベースリーダを待っている間にビジーハンドラが0を返した場合、チェックポイント操作はその時点からSQLITE_CHECKPOINT_PASSIVEと同じ方法で進行します-それ以上ブロックすることなく可能な限り多くのフレームをチェックポイントします。この場合、SQLITE_BUSYが返されます。</target>
        </trans-unit>
        <trans-unit id="5f7466fb166d62399d9f0072e0370315299af5b1" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_COVERING_INDEX_SCAN option takes a single integer argument which is interpreted as a boolean in order to enable or disable the use of covering indices for full table scans in the query optimizer. The default setting is determined by the &lt;a href=&quot;../compile#allow_covering_index_scan&quot;&gt;SQLITE_ALLOW_COVERING_INDEX_SCAN&lt;/a&gt; compile-time option, or is &quot;on&quot; if that compile-time option is omitted. The ability to disable the use of covering indices for full table scans is because some incorrectly coded legacy applications might malfunction when the optimization is enabled. Providing the ability to disable the optimization allows the older, buggy application code to work without change even with newer versions of SQLite.</source>
          <target state="translated">SQLITE_CONFIG_COVERING_INDEX_SCANオプションは、クエリオプティマイザで全テーブルスキャンのカバーするインデックスの使用を有効または無効にするためにブール値として解釈される単一の整数引数を取ります。デフォルト設定は、&lt;a href=&quot;../compile#allow_covering_index_scan&quot;&gt;SQLITE_ALLOW_COVERING_INDEX_SCAN&lt;/a&gt;コンパイル時オプションによって決定されるか、そのコンパイル時オプションが省略されている場合は「オン」です。フルテーブルスキャンのカバリングインデックスの使用を無効にする機能は、最適化を有効にすると、一部の誤ってコーディングされたレガシーアプリケーションが誤動作する可能性があるためです。最適化を無効にする機能を提供することで、SQLiteの新しいバージョンでも、古いバグのあるアプリケーションコードを変更せずに機能させることができます。</target>
        </trans-unit>
        <trans-unit id="7d7ecdbc601a4823c2b08a2a5337606f8d30aa46" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_COVERING_INDEX_SCAN option takes a single integer argument which is interpreted as a boolean in order to enable or disable the use of covering indices for full table scans in the query optimizer. The default setting is determined by the &lt;a href=&quot;compile#allow_covering_index_scan&quot;&gt;SQLITE_ALLOW_COVERING_INDEX_SCAN&lt;/a&gt; compile-time option, or is &quot;on&quot; if that compile-time option is omitted. The ability to disable the use of covering indices for full table scans is because some incorrectly coded legacy applications might malfunction when the optimization is enabled. Providing the ability to disable the optimization allows the older, buggy application code to work without change even with newer versions of SQLite.</source>
          <target state="translated">SQLITE_CONFIG_COVERING_INDEX_SCANオプションは、クエリオプティマイザで全テーブルスキャンのカバーするインデックスの使用を有効または無効にするためにブール値として解釈される単一の整数引数を取ります。デフォルト設定は、&lt;a href=&quot;compile#allow_covering_index_scan&quot;&gt;SQLITE_ALLOW_COVERING_INDEX_SCAN&lt;/a&gt;コンパイル時オプションによって決定されるか、そのコンパイル時オプションが省略されている場合は「オン」です。フルテーブルスキャンのカバリングインデックスの使用を無効にする機能は、最適化を有効にすると、一部の誤ってコーディングされたレガシーアプリケーションが誤動作する可能性があるためです。最適化を無効にする機能を提供することで、SQLiteの新しいバージョンでも、古いバグのあるアプリケーションコードを変更せずに機能させることができます。</target>
        </trans-unit>
        <trans-unit id="ff83d1ba90843c7f9c3dc720386b86f9f35e0379" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_GETMALLOC option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure. The &lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure is filled with the currently defined memory allocation routines. This option can be used to overload the default memory allocation routines with a wrapper that simulations memory allocation failure or tracks memory usage, for example.</source>
          <target state="translated">SQLITE_CONFIG_GETMALLOCオプションは、&lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。&lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methodsの&lt;/a&gt;構造は、現在定義されているメモリ割り当てルーチンで満たされています。このオプションを使用すると、デフォルトのメモリ割り当てルーチンを、メモリ割り当ての失敗をシミュレーションしたり、メモリ使用量を追跡したりするラッパーでオーバーロードできます。</target>
        </trans-unit>
        <trans-unit id="27c7cd5a1eddca0fbdae5b53b4edcfcd1711ca82" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_GETMALLOC option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure. The &lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure is filled with the currently defined memory allocation routines. This option can be used to overload the default memory allocation routines with a wrapper that simulations memory allocation failure or tracks memory usage, for example.</source>
          <target state="translated">SQLITE_CONFIG_GETMALLOCオプションは、&lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。&lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methodsの&lt;/a&gt;構造は、現在定義されているメモリ割り当てルーチンで満たされています。このオプションを使用すると、デフォルトのメモリ割り当てルーチンを、メモリ割り当ての失敗をシミュレーションしたり、メモリ使用量を追跡したりするラッパーでオーバーロードできます。</target>
        </trans-unit>
        <trans-unit id="be1078933a2f48f4ba63fb92d6b093d628661727" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_GETMUTEX option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure. The &lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure is filled with the currently defined mutex routines. This option can be used to overload the default mutex allocation routines with a wrapper used to track mutex usage for performance profiling or testing, for example. If SQLite is compiled with the &lt;a href=&quot;compile#threadsafe&quot;&gt;SQLITE_THREADSAFE=0&lt;/a&gt; compile-time option then the entire mutexing subsystem is omitted from the build and hence calls to &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; with the SQLITE_CONFIG_GETMUTEX configuration option will return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CONFIG_GETMUTEXオプションは、&lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。&lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methodsの&lt;/a&gt;構造は、現在定義されているミューテックス・ルーチンで満たされています。このオプションを使用すると、パフォーマンスのプロファイリングやテストなどのミューテックスの使用状況を追跡するために使用されるラッパーで、デフォルトのミューテックス割り当てルーチンをオーバーロードできます。 SQLiteが&lt;a href=&quot;compile#threadsafe&quot;&gt;SQLITE_THREADSAFE = 0&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、ミューテックスサブシステム全体がビルドから省略されるため、SQLITE_CONFIG_GETMUTEX構成オプションを指定して&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（）&lt;/a&gt;を呼び出すと、SQLITE_ERRORが返され&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4910d5633ae70fa15de2ae4b340873caa0f78feb" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_GETMUTEX option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure. The &lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure is filled with the currently defined mutex routines. This option can be used to overload the default mutex allocation routines with a wrapper used to track mutex usage for performance profiling or testing, for example. If SQLite is compiled with the &lt;a href=&quot;../compile#threadsafe&quot;&gt;SQLITE_THREADSAFE=0&lt;/a&gt; compile-time option then the entire mutexing subsystem is omitted from the build and hence calls to &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; with the SQLITE_CONFIG_GETMUTEX configuration option will return &lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CONFIG_GETMUTEXオプションは、&lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。&lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methodsの&lt;/a&gt;構造は、現在定義されているミューテックス・ルーチンで満たされています。このオプションを使用すると、パフォーマンスのプロファイリングやテストなどのミューテックスの使用状況を追跡するために使用されるラッパーで、デフォルトのミューテックス割り当てルーチンをオーバーロードできます。 SQLiteが&lt;a href=&quot;../compile#threadsafe&quot;&gt;SQLITE_THREADSAFE = 0&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、ミューテックスサブシステム全体がビルドから省略されるため、SQLITE_CONFIG_GETMUTEX構成オプションを指定して&lt;a href=&quot;config&quot;&gt;sqlite3_config（）&lt;/a&gt;を呼び出すと、SQLITE_ERRORが返され&lt;a href=&quot;../rescode#error&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="480ac6642108db12dacb128d029ff61248587e74" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_GETPCACHE2 option takes a single argument which is a pointer to an &lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; object. SQLite copies of the current page cache implementation into that object.</source>
          <target state="translated">SQLITE_CONFIG_GETPCACHE2オプションは、&lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt;オブジェクトへのポインターである単一の引数を取ります。現在のページキャッシュ実装のSQLiteコピーをそのオブジェクトにコピーします。</target>
        </trans-unit>
        <trans-unit id="d15656e2a537c4d062ffc1a4a28c224d21946fb5" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_GETPCACHE2 option takes a single argument which is a pointer to an &lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; object. SQLite copies of the current page cache implementation into that object.</source>
          <target state="translated">SQLITE_CONFIG_GETPCACHE2オプションは、&lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt;オブジェクトへのポインターである単一の引数を取ります。現在のページキャッシュ実装のSQLiteコピーをそのオブジェクトにコピーします。</target>
        </trans-unit>
        <trans-unit id="41bf906d256dc3dcf8d1b8d18fc31630de1f686b" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_HEAP option specifies a static memory buffer that SQLite will use for all of its dynamic memory allocation needs beyond those provided for by &lt;a href=&quot;#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;. The SQLITE_CONFIG_HEAP option is only available if SQLite is compiled with either &lt;a href=&quot;compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt; or &lt;a href=&quot;compile#enable_memsys5&quot;&gt;SQLITE_ENABLE_MEMSYS5&lt;/a&gt; and returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt; if invoked otherwise. There are three arguments to SQLITE_CONFIG_HEAP: An 8-byte aligned pointer to the memory, the number of bytes in the memory buffer, and the minimum allocation size. If the first pointer (the memory pointer) is NULL, then SQLite reverts to using its default memory allocator (the system malloc() implementation), undoing any prior invocation of &lt;a href=&quot;#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOC&lt;/a&gt;. If the memory pointer is not NULL then the alternative memory allocator is engaged to handle all of SQLites memory allocation needs. The first pointer (the memory pointer) must be aligned to an 8-byte boundary or subsequent behavior of SQLite will be undefined. The minimum allocation size is capped at 2**12. Reasonable values for the minimum allocation size are 2**5 through 2**8.</source>
          <target state="translated">SQLITE_CONFIG_HEAPオプションは、&lt;a href=&quot;#sqliteconfigpagecache&quot;&gt;SQLITEがSQLITE_CONFIG_PAGECACHE&lt;/a&gt;によって提供されるものを超える動的メモリ割り当てのすべてのニーズに使用する静的メモリバッファを指定します。 SQLiteのは、どちらかでコンパイルされている場合SQLITE_CONFIG_HEAPオプションにのみ使用可能です&lt;a href=&quot;compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt;または&lt;a href=&quot;compile#enable_memsys5&quot;&gt;SQLITE_ENABLE_MEMSYS5&lt;/a&gt;戻り&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt;そう呼び出された場合。 SQLITE_CONFIG_HEAPには3つの引数があります。メモリへの8バイト境界で整列されたポインタ、メモリバッファのバイト数、および最小割り当てサイズです。最初のポインタ（メモリポインタ）がNULLの場合、SQLiteはデフォルトのメモリアロケータ（システムのmalloc（）実装）の使用に戻り、&lt;a href=&quot;#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOCの&lt;/a&gt;以前の呼び出しをすべて取り消します。。メモリポインタがNULLでない場合、代替メモリアロケータがSQLitesのメモリ割り当てニーズのすべてを処理するために使用されています。最初のポインター（メモリポインター）は8バイト境界に揃える必要があります。そうしないと、SQLiteのその後の動作は定義されません。最小割り当てサイズの上限は2 ** 12です。最小割り当てサイズの妥当な値は2 ** 5から2 ** 8です。</target>
        </trans-unit>
        <trans-unit id="3fe54eb9feb326e6993f5e80b5d7f631fea68373" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_HEAP option specifies a static memory buffer that SQLite will use for all of its dynamic memory allocation needs beyond those provided for by &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;. The SQLITE_CONFIG_HEAP option is only available if SQLite is compiled with either &lt;a href=&quot;../compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt; or &lt;a href=&quot;../compile#enable_memsys5&quot;&gt;SQLITE_ENABLE_MEMSYS5&lt;/a&gt; and returns &lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt; if invoked otherwise. There are three arguments to SQLITE_CONFIG_HEAP: An 8-byte aligned pointer to the memory, the number of bytes in the memory buffer, and the minimum allocation size. If the first pointer (the memory pointer) is NULL, then SQLite reverts to using its default memory allocator (the system malloc() implementation), undoing any prior invocation of &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOC&lt;/a&gt;. If the memory pointer is not NULL then the alternative memory allocator is engaged to handle all of SQLites memory allocation needs. The first pointer (the memory pointer) must be aligned to an 8-byte boundary or subsequent behavior of SQLite will be undefined. The minimum allocation size is capped at 2**12. Reasonable values for the minimum allocation size are 2**5 through 2**8.</source>
          <target state="translated">SQLITE_CONFIG_HEAPオプションは、&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITEがSQLITE_CONFIG_PAGECACHE&lt;/a&gt;によって提供されるものを超える動的メモリ割り当てのすべてのニーズに使用する静的メモリバッファを指定します。 SQLiteのは、どちらかでコンパイルされている場合SQLITE_CONFIG_HEAPオプションにのみ使用可能です&lt;a href=&quot;../compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt;または&lt;a href=&quot;../compile#enable_memsys5&quot;&gt;SQLITE_ENABLE_MEMSYS5&lt;/a&gt;戻り&lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt;そう呼び出された場合。 SQLITE_CONFIG_HEAPには3つの引数があります。メモリへの8バイト境界で整列されたポインタ、メモリバッファのバイト数、および最小割り当てサイズです。最初のポインタ（メモリポインタ）がNULLの場合、SQLiteはデフォルトのメモリアロケータ（システムのmalloc（）実装）の使用に戻り、&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmalloc&quot;&gt;SQLITE_CONFIG_MALLOCの&lt;/a&gt;以前の呼び出しをすべて取り消します。。メモリポインタがNULLでない場合、代替メモリアロケータがSQLitesのメモリ割り当てニーズのすべてを処理するために使用されています。最初のポインター（メモリポインター）は8バイト境界に揃える必要があります。そうしないと、SQLiteのその後の動作は定義されません。最小割り当てサイズの上限は2 ** 12です。最小割り当てサイズの妥当な値は2 ** 5から2 ** 8です。</target>
        </trans-unit>
        <trans-unit id="01d248a0a82b03a7f001692e75d24ae19d015766" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_LOG option is used to configure the SQLite global &lt;a href=&quot;../errlog&quot;&gt;error log&lt;/a&gt;. (The SQLITE_CONFIG_LOG option takes two arguments: a pointer to a function with a call signature of void(*)(void*,int,const char*), and a pointer to void. If the function pointer is not NULL, it is invoked by &lt;a href=&quot;log&quot;&gt;sqlite3_log()&lt;/a&gt; to process each logging event. If the function pointer is NULL, the &lt;a href=&quot;log&quot;&gt;sqlite3_log()&lt;/a&gt; interface becomes a no-op. The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as the first parameter to the application-defined logger function whenever that function is invoked. The second parameter to the logger function is a copy of the first parameter to the corresponding &lt;a href=&quot;log&quot;&gt;sqlite3_log()&lt;/a&gt; call and is intended to be a &lt;a href=&quot;../rescode&quot;&gt;result code&lt;/a&gt; or an &lt;a href=&quot;../rescode#extrc&quot;&gt;extended result code&lt;/a&gt;. The third parameter passed to the logger is log message after formatting via &lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt;. The SQLite logging interface is not reentrant; the logger function supplied by the application must not invoke any SQLite interface. In a multi-threaded application, the application-defined logger function must be threadsafe.</source>
          <target state="translated">SQLITE_CONFIG_LOGオプションは、SQLiteグローバル&lt;a href=&quot;../errlog&quot;&gt;エラーログ&lt;/a&gt;を構成するために使用されます。 （SQLITE_CONFIG_LOGオプションは2つの引数を取ります：void（*）（void *、int、const char *）の呼び出しシグネチャを持つ関数へのポインターとvoidへのポインター。関数ポインターがNULLでない場合、呼び出されます&lt;a href=&quot;log&quot;&gt;sqlite3_log（）&lt;/a&gt;によって各ロギングイベントを処理します。関数ポインタがNULLの場合、&lt;a href=&quot;log&quot;&gt;sqlite3_log（）&lt;/a&gt;インターフェースは何もしません。SQLITE_CONFIG_LOGの2番目の引数であるvoidポインタは、最初のパラメータとしてアプリケーション定義に渡されますロガー関数が呼び出されたときは常に、ロガー関数。ロガー関数の2番目のパラメーターは、対応する&lt;a href=&quot;log&quot;&gt;sqlite3_log（）&lt;/a&gt;呼び出しへの最初のパラメーターのコピーであり、&lt;a href=&quot;../rescode&quot;&gt;結果コード&lt;/a&gt;または&lt;a href=&quot;../rescode#extrc&quot;&gt;拡張結果コード&lt;/a&gt;。ロガーに渡される3番目のパラメーターは、&lt;a href=&quot;mprintf&quot;&gt;sqlite3_snprintf（）で&lt;/a&gt;フォーマットした後のログメッセージです。 SQLiteロギングインターフェイスは再入可能ではありません。アプリケーションによって提供されるロガー関数は、SQLiteインターフェースを呼び出してはなりません。マルチスレッドアプリケーションでは、アプリケーション定義のロガー関数はスレッドセーフでなければなりません。</target>
        </trans-unit>
        <trans-unit id="59e287bb60474979eb8cefde91438388d0375975" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_LOG option is used to configure the SQLite global &lt;a href=&quot;errlog&quot;&gt;error log&lt;/a&gt;. (The SQLITE_CONFIG_LOG option takes two arguments: a pointer to a function with a call signature of void(*)(void*,int,const char*), and a pointer to void. If the function pointer is not NULL, it is invoked by &lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log()&lt;/a&gt; to process each logging event. If the function pointer is NULL, the &lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log()&lt;/a&gt; interface becomes a no-op. The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as the first parameter to the application-defined logger function whenever that function is invoked. The second parameter to the logger function is a copy of the first parameter to the corresponding &lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log()&lt;/a&gt; call and is intended to be a &lt;a href=&quot;rescode&quot;&gt;result code&lt;/a&gt; or an &lt;a href=&quot;rescode#extrc&quot;&gt;extended result code&lt;/a&gt;. The third parameter passed to the logger is log message after formatting via &lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf()&lt;/a&gt;. The SQLite logging interface is not reentrant; the logger function supplied by the application must not invoke any SQLite interface. In a multi-threaded application, the application-defined logger function must be threadsafe.</source>
          <target state="translated">SQLITE_CONFIG_LOGオプションは、SQLiteグローバル&lt;a href=&quot;errlog&quot;&gt;エラーログ&lt;/a&gt;を構成するために使用されます。 （SQLITE_CONFIG_LOGオプションは2つの引数を取ります：void（*）（void *、int、const char *）の呼び出しシグネチャを持つ関数へのポインターとvoidへのポインター。関数ポインターがNULLでない場合、呼び出されます&lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log（）&lt;/a&gt;によって各ロギングイベントを処理します。関数ポインタがNULLの場合、&lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log（）&lt;/a&gt;インターフェースは何もしません。SQLITE_CONFIG_LOGの2番目の引数であるvoidポインタは、最初のパラメータとしてアプリケーション定義に渡されますロガー関数が呼び出されたときは常に、ロガー関数。ロガー関数の2番目のパラメーターは、対応する&lt;a href=&quot;#sqlite3_log&quot;&gt;sqlite3_log（）&lt;/a&gt;呼び出しへの最初のパラメーターのコピーであり、&lt;a href=&quot;rescode&quot;&gt;結果コード&lt;/a&gt;または&lt;a href=&quot;rescode#extrc&quot;&gt;拡張結果コード&lt;/a&gt;。ロガーに渡される3番目のパラメーターは、&lt;a href=&quot;#sqlite3_mprintf&quot;&gt;sqlite3_snprintf（）で&lt;/a&gt;フォーマットした後のログメッセージです。 SQLiteロギングインターフェイスは再入可能ではありません。アプリケーションによって提供されるロガー関数は、SQLiteインターフェースを呼び出してはなりません。マルチスレッドアプリケーションでは、アプリケーション定義のロガー関数はスレッドセーフでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ab0156b86adc81defa456094d6dda8a22884243b" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_LOOKASIDE option takes two arguments that determine the default size of lookaside memory on each &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt;. The first argument is the size of each lookaside buffer slot and the second is the number of slots allocated to each database connection. SQLITE_CONFIG_LOOKASIDE sets the</source>
          <target state="translated">SQLITE_CONFIG_LOOKASIDEオプションは、各&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続の&lt;/a&gt;ルックアサイドメモリのデフォルトサイズを決定する2つの引数を取ります。最初の引数は各lookasideバッファースロットのサイズで、2番目の引数は各データベース接続に割り当てられたスロットの数です。SQLITE_CONFIG_LOOKASIDEは、</target>
        </trans-unit>
        <trans-unit id="517e0ab9da5cb1067d00b2d40dff6d21a15492c5" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_LOOKASIDE option takes two arguments that determine the default size of lookaside memory on each &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt;. The first argument is the size of each lookaside buffer slot and the second is the number of slots allocated to each database connection. SQLITE_CONFIG_LOOKASIDE sets the</source>
          <target state="translated">SQLITE_CONFIG_LOOKASIDEオプションは、各&lt;a href=&quot;sqlite3&quot;&gt;データベース接続の&lt;/a&gt;ルックアサイドメモリのデフォルトサイズを決定する2つの引数を取ります。最初の引数は各lookasideバッファースロットのサイズで、2番目の引数は各データベース接続に割り当てられたスロットの数です。SQLITE_CONFIG_LOOKASIDEは、</target>
        </trans-unit>
        <trans-unit id="5f5ea304960d2945164c69cf799e956ea26314e7" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MALLOC option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure. The argument specifies alternative low-level memory allocation routines to be used in place of the memory allocation routines built into SQLite. SQLite makes its own private copy of the content of the &lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure before the &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; call returns.</source>
          <target state="translated">SQLITE_CONFIG_MALLOCオプションは、&lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。引数は、SQLiteに組み込まれたメモリ割り当てルーチンの代わりに使用される代替の低レベルメモリ割り当てルーチンを指定します。 SQLiteは、&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（）&lt;/a&gt;呼び出しが戻る前に、&lt;a href=&quot;#sqlite3_mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;構造体のコンテンツの独自のプライベートコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="212fa0cc6b6461ceacd5f53dcf7fed283b480c6d" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MALLOC option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure. The argument specifies alternative low-level memory allocation routines to be used in place of the memory allocation routines built into SQLite. SQLite makes its own private copy of the content of the &lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt; structure before the &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; call returns.</source>
          <target state="translated">SQLITE_CONFIG_MALLOCオプションは、&lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。引数は、SQLiteに組み込まれたメモリ割り当てルーチンの代わりに使用される代替の低レベルメモリ割り当てルーチンを指定します。 SQLiteは、&lt;a href=&quot;config&quot;&gt;sqlite3_config（）&lt;/a&gt;呼び出しが戻る前に、&lt;a href=&quot;mem_methods&quot;&gt;sqlite3_mem_methods&lt;/a&gt;構造体のコンテンツの独自のプライベートコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="a0f6142b40b1216838367535e150c109342d48bb" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MEMDB_MAXSIZE option accepts a single parameter &lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64&lt;/a&gt; parameter which is the default maximum size for an in-memory database created using &lt;a href=&quot;#sqlite3_deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt;. This default maximum size can be adjusted up or down for individual databases using the &lt;a href=&quot;#sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT&lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;file-control&lt;/a&gt;. If this configuration setting is never used, then the default maximum is determined by the &lt;a href=&quot;compile#memdb_default_maxsize&quot;&gt;SQLITE_MEMDB_DEFAULT_MAXSIZE&lt;/a&gt; compile-time option. If that compile-time option is not set, then the default maximum is 1073741824.</source>
          <target state="translated">SQLITE_CONFIG_MEMDB_MAXSIZEオプションは、&lt;a href=&quot;#sqlite3_deserialize&quot;&gt;sqlite3_deserialize（）&lt;/a&gt;を使用して作成されたメモリ内データベースのデフォルトの最大サイズである単一のパラメーター&lt;a href=&quot;#sqlite3_int64&quot;&gt;sqlite3_int64&lt;/a&gt;パラメーターを受け入れます。このデフォルトの最大サイズは、&lt;a href=&quot;#sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT &lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;file-control&lt;/a&gt;を使用して、個々のデータベースに対して上下に調整できます。この構成設定が使用されない場合、デフォルトの最大値は&lt;a href=&quot;compile#memdb_default_maxsize&quot;&gt;SQLITE_MEMDB_DEFAULT_MAXSIZE&lt;/a&gt;コンパイル時オプションによって決定されます。そのコンパイル時オプションが設定されていない場合、デフォルトの最大値は1073741824です。</target>
        </trans-unit>
        <trans-unit id="81e7b78f6947d183a3f90000da914d03e1bc727e" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MEMDB_MAXSIZE option accepts a single parameter &lt;a href=&quot;int64&quot;&gt;sqlite3_int64&lt;/a&gt; parameter which is the default maximum size for an in-memory database created using &lt;a href=&quot;deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt;. This default maximum size can be adjusted up or down for individual databases using the &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT&lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;file-control&lt;/a&gt;. If this configuration setting is never used, then the default maximum is determined by the &lt;a href=&quot;../compile#memdb_default_maxsize&quot;&gt;SQLITE_MEMDB_DEFAULT_MAXSIZE&lt;/a&gt; compile-time option. If that compile-time option is not set, then the default maximum is 1073741824.</source>
          <target state="translated">SQLITE_CONFIG_MEMDB_MAXSIZEオプションは、&lt;a href=&quot;deserialize&quot;&gt;sqlite3_deserialize（）&lt;/a&gt;を使用して作成されたメモリ内データベースのデフォルトの最大サイズである単一のパラメーター&lt;a href=&quot;int64&quot;&gt;sqlite3_int64&lt;/a&gt;パラメーターを受け入れます。このデフォルトの最大サイズは、&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT &lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;file-control&lt;/a&gt;を使用して、個々のデータベースに対して上下に調整できます。この構成設定が使用されない場合、デフォルトの最大値は&lt;a href=&quot;../compile#memdb_default_maxsize&quot;&gt;SQLITE_MEMDB_DEFAULT_MAXSIZE&lt;/a&gt;コンパイル時オプションによって決定されます。そのコンパイル時オプションが設定されていない場合、デフォルトの最大値は1073741824です。</target>
        </trans-unit>
        <trans-unit id="0f876ee04fb467dec2e88424ad542eb53469ec0b" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MEMSTATUS option takes single argument of type int, interpreted as a boolean, which enables or disables the collection of memory allocation statistics. When memory allocation statistics are disabled, the following SQLite interfaces become non-operational:</source>
          <target state="translated">SQLITE_CONFIG_MEMSTATUS オプションは int 型の単一の引数を取り、ブーリアンとして解釈されます。メモリ割り当て統計情報が無効になっている場合、以下の SQLite インターフェースは動作しなくなります。</target>
        </trans-unit>
        <trans-unit id="c9d36e0270700e44060555bf77969beca0ef1bb6" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MUTEX option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure. The argument specifies alternative low-level mutex routines to be used in place the mutex routines built into SQLite. SQLite makes a copy of the content of the &lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure before the call to &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; returns. If SQLite is compiled with the &lt;a href=&quot;compile#threadsafe&quot;&gt;SQLITE_THREADSAFE=0&lt;/a&gt; compile-time option then the entire mutexing subsystem is omitted from the build and hence calls to &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; with the SQLITE_CONFIG_MUTEX configuration option will return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ERROR&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CONFIG_MUTEXオプションは、&lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。引数は、SQLiteに組み込まれたmutexルーチンの代わりに使用される代替の低レベルmutexルーチンを指定します。 SQLiteは、&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（）&lt;/a&gt;への呼び出しが戻る前に、&lt;a href=&quot;#sqlite3_mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;構造の内容のコピーを作成します。 SQLiteが&lt;a href=&quot;compile#threadsafe&quot;&gt;SQLITE_THREADSAFE = 0&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、ミューテックスサブシステム全体がビルドから省略されるため、SQLITE_CONFIG_MUTEX構成オプションで&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（）&lt;/a&gt;を呼び出すと、SQLITE_ERRORが返され&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b773ada2ea4912cbbe3a1e1cebfe063f6d8a1c0" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_MUTEX option takes a single argument which is a pointer to an instance of the &lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure. The argument specifies alternative low-level mutex routines to be used in place the mutex routines built into SQLite. SQLite makes a copy of the content of the &lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; structure before the call to &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; returns. If SQLite is compiled with the &lt;a href=&quot;../compile#threadsafe&quot;&gt;SQLITE_THREADSAFE=0&lt;/a&gt; compile-time option then the entire mutexing subsystem is omitted from the build and hence calls to &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; with the SQLITE_CONFIG_MUTEX configuration option will return &lt;a href=&quot;../rescode#error&quot;&gt;SQLITE_ERROR&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CONFIG_MUTEXオプションは、&lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;構造体のインスタンスへのポインターである単一の引数を取ります。引数は、SQLiteに組み込まれたmutexルーチンの代わりに使用される代替の低レベルmutexルーチンを指定します。 SQLiteは、&lt;a href=&quot;config&quot;&gt;sqlite3_config（）&lt;/a&gt;への呼び出しが戻る前に、&lt;a href=&quot;mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;構造の内容のコピーを作成します。 SQLiteが&lt;a href=&quot;../compile#threadsafe&quot;&gt;SQLITE_THREADSAFE = 0&lt;/a&gt;コンパイル時オプションでコンパイルされている場合、ミューテックスサブシステム全体がビルドから省略されるため、SQLITE_CONFIG_MUTEX構成オプションで&lt;a href=&quot;config&quot;&gt;sqlite3_config（）&lt;/a&gt;を呼び出すと、SQLITE_ERRORが返され&lt;a href=&quot;../rescode#error&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09e3ca8fa4415d94f70fc44a6276555caf14748e" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PAGECACHE option specifies a memory pool that SQLite can use for the database page cache with the default page cache implementation. This configuration option is a no-op if an application-define page cache implementation is loaded using the &lt;a href=&quot;#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;. There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to 8-byte aligned memory (pMem), the size of each page cache line (sz), and the number of cache lines (N). The sz argument should be the size of the largest database page (a power of two between 512 and 65536) plus some extra bytes for each page header. The number of extra bytes needed by the page header can be determined using &lt;a href=&quot;#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;. It is harmless, apart from the wasted memory, for the sz parameter to be larger than necessary. The pMem argument must be either a NULL pointer or a pointer to an 8-byte aligned block of memory of at least sz*N bytes, otherwise subsequent behavior is undefined. When pMem is not NULL, SQLite will strive to use the memory provided to satisfy page cache needs, falling back to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; if a page cache line is larger than sz bytes or if all of the pMem buffer is exhausted. If pMem is NULL and N is non-zero, then each database connection does an initial bulk allocation for page cache memory from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; sufficient for N cache lines if N is positive or of -1024*N bytes if N is negative, . If additional page cache memory is needed beyond what is provided by the initial allocation, then SQLite goes to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; separately for each additional cache line.</source>
          <target state="translated">SQLITE_CONFIG_PAGECACHEオプションは、SQLiteがデフォルトのページキャッシュ実装でデータベースページキャッシュに使用できるメモリプールを指定します。アプリケーション定義のページキャッシュ実装が&lt;a href=&quot;#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;を使用してロードされている場合、この構成オプションは何もしません。 SQLITE_CONFIG_PAGECACHEには3つの引数があります。8バイト境界整列メモリ（pMem）へのポインター、各ページキャッシュラインのサイズ（sz）、およびキャッシュラインの数（N）。 sz引数は、最大のデータベースページのサイズ（512から65536の間の2の累乗）に各ページヘッダーの追加バイトを加えたものでなければなりません。ページヘッダーに必要な追加のバイト数は、&lt;a href=&quot;#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;を使用して決定できます。。メモリの浪費は別として、szパラメータが必要以上に大きくなることは無害です。 pMem引数は、NULLポインタまたは少なくともsz * Nバイトのメモリの8バイト境界で整列されたブロックへのポインタである必要があります。それ以外の場合の動作は未定義です。 pMemがNULLでない場合、SQLiteは提供されたメモリを使用してページキャッシュのニーズを満たすように努め、ページキャッシュラインがszバイトより大きい場合、またはすべてのpMemバッファーが使い果たされた場合、&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）に&lt;/a&gt;フォールバックします。 pMemがNULLでNがゼロ以外の場合、各データベース接続は&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;からページキャッシュメモリの初期一括割り当てを行いますNが正の場合はNキャッシュラインに十分、Nが負の場合は-1024 * Nバイト。最初の割り当てで提供されるもの以外に追加のページキャッシュメモリが必要な場合、SQLiteは追加のキャッシュラインごとに個別に&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;に移動します。</target>
        </trans-unit>
        <trans-unit id="cc50296996fcaf95f25672cd009256aa14c36a0e" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PAGECACHE option specifies a memory pool that SQLite can use for the database page cache with the default page cache implementation. This configuration option is a no-op if an application-define page cache implementation is loaded using the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;. There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to 8-byte aligned memory (pMem), the size of each page cache line (sz), and the number of cache lines (N). The sz argument should be the size of the largest database page (a power of two between 512 and 65536) plus some extra bytes for each page header. The number of extra bytes needed by the page header can be determined using &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;. It is harmless, apart from the wasted memory, for the sz parameter to be larger than necessary. The pMem argument must be either a NULL pointer or a pointer to an 8-byte aligned block of memory of at least sz*N bytes, otherwise subsequent behavior is undefined. When pMem is not NULL, SQLite will strive to use the memory provided to satisfy page cache needs, falling back to &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; if a page cache line is larger than sz bytes or if all of the pMem buffer is exhausted. If pMem is NULL and N is non-zero, then each database connection does an initial bulk allocation for page cache memory from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; sufficient for N cache lines if N is positive or of -1024*N bytes if N is negative, . If additional page cache memory is needed beyond what is provided by the initial allocation, then SQLite goes to &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; separately for each additional cache line.</source>
          <target state="translated">SQLITE_CONFIG_PAGECACHEオプションは、SQLiteがデフォルトのページキャッシュ実装でデータベースページキャッシュに使用できるメモリプールを指定します。アプリケーション定義のページキャッシュ実装が&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;を使用してロードされている場合、この構成オプションは何もしません。 SQLITE_CONFIG_PAGECACHEには3つの引数があります。8バイト境界整列メモリ（pMem）へのポインター、各ページキャッシュラインのサイズ（sz）、およびキャッシュラインの数（N）。 sz引数は、最大のデータベースページのサイズ（512から65536の間の2の累乗）に各ページヘッダーの追加バイトを加えたものでなければなりません。ページヘッダーに必要な追加のバイト数は、&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;を使用して決定できます。。メモリの浪費は別として、szパラメータが必要以上に大きくなることは無害です。 pMem引数は、NULLポインタまたは少なくともsz * Nバイトのメモリの8バイト境界で整列されたブロックへのポインタである必要があります。それ以外の場合の動作は未定義です。 pMemがNULLでない場合、SQLiteは提供されたメモリを使用してページキャッシュのニーズを満たすように努め、ページキャッシュラインがszバイトより大きい場合、またはすべてのpMemバッファーが使い果たされた場合、&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）に&lt;/a&gt;フォールバックします。 pMemがNULLでNがゼロ以外の場合、各データベース接続は&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;からページキャッシュメモリの初期一括割り当てを行いますNが正の場合はNキャッシュラインに十分、Nが負の場合は-1024 * Nバイト。最初の割り当てで提供されるもの以外に追加のページキャッシュメモリが必要な場合、SQLiteは追加のキャッシュラインごとに個別に&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;に移動します。</target>
        </trans-unit>
        <trans-unit id="373c6de3bbf7db29ed258a5d09d9109fe9568cc5" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PAGECACHE option specifies a memory pool that SQLite can use for the database page cache with the default page cache implementation. This configuration option is a no-op if an application-defined page cache implementation is loaded using the &lt;a href=&quot;#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;. There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to 8-byte aligned memory (pMem), the size of each page cache line (sz), and the number of cache lines (N). The sz argument should be the size of the largest database page (a power of two between 512 and 65536) plus some extra bytes for each page header. The number of extra bytes needed by the page header can be determined using &lt;a href=&quot;#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;. It is harmless, apart from the wasted memory, for the sz parameter to be larger than necessary. The pMem argument must be either a NULL pointer or a pointer to an 8-byte aligned block of memory of at least sz*N bytes, otherwise subsequent behavior is undefined. When pMem is not NULL, SQLite will strive to use the memory provided to satisfy page cache needs, falling back to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; if a page cache line is larger than sz bytes or if all of the pMem buffer is exhausted. If pMem is NULL and N is non-zero, then each database connection does an initial bulk allocation for page cache memory from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; sufficient for N cache lines if N is positive or of -1024*N bytes if N is negative, . If additional page cache memory is needed beyond what is provided by the initial allocation, then SQLite goes to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; separately for each additional cache line.</source>
          <target state="translated">SQLITE_CONFIG_PAGECACHEオプションは、SQLiteがデフォルトのページキャッシュ実装でデータベースページキャッシュに使用できるメモリプールを指定します。&lt;a href=&quot;#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;を使用してアプリケーション定義のページキャッシュ実装がロードされる場合、この構成オプションは何もしません。 SQLITE_CONFIG_PAGECACHEには、8バイトの整列メモリ（pMem）へのポインタ、各ページキャッシュラインのサイズ（sz）、およびキャッシュラインの数（N）の3つの引数があります。 sz引数は、最大のデータベースページのサイズ（512〜65536の2の累乗）に各ページヘッダーの追加バイトを加えたものである必要があります。ページヘッダーに必要な追加バイト数は、&lt;a href=&quot;#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;を使用して決定できます。。 szパラメータが必要以上に大きくなることは、メモリの浪費を除けば無害です。 pMem引数は、NULLポインター、または少なくともsz * Nバイトの8バイトに整列されたメモリーブロックへのポインターである必要があります。そうでない場合、その後の動作は定義されません。 pMemがNULLでない場合、SQLiteは、ページキャッシュのニーズを満たすために提供されたメモリを使用するように努め、ページキャッシュラインがszバイトより大きい場合、またはすべてのpMemバッファーが使い果たされた場合、&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）に&lt;/a&gt;フォールバックします。 pMemがNULLで、Nがゼロ以外の場合、各データベース接続は&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;からページキャッシュメモリの初期バルク割り当てを行います。Nが正の場合はN個のキャッシュラインに、Nが負の場合は-1024 * Nバイトで十分です。初期割り当てによって提供されるものを超えて追加のページキャッシュメモリが必要な場合、SQLiteは追加のキャッシュラインごとに個別に&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;に移動します。</target>
        </trans-unit>
        <trans-unit id="fe2e2404fd6d076f4a9442bd42821a9709933fc2" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PAGECACHE option specifies a memory pool that SQLite can use for the database page cache with the default page cache implementation. This configuration option is a no-op if an application-defined page cache implementation is loaded using the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;. There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to 8-byte aligned memory (pMem), the size of each page cache line (sz), and the number of cache lines (N). The sz argument should be the size of the largest database page (a power of two between 512 and 65536) plus some extra bytes for each page header. The number of extra bytes needed by the page header can be determined using &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;. It is harmless, apart from the wasted memory, for the sz parameter to be larger than necessary. The pMem argument must be either a NULL pointer or a pointer to an 8-byte aligned block of memory of at least sz*N bytes, otherwise subsequent behavior is undefined. When pMem is not NULL, SQLite will strive to use the memory provided to satisfy page cache needs, falling back to &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; if a page cache line is larger than sz bytes or if all of the pMem buffer is exhausted. If pMem is NULL and N is non-zero, then each database connection does an initial bulk allocation for page cache memory from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; sufficient for N cache lines if N is positive or of -1024*N bytes if N is negative, . If additional page cache memory is needed beyond what is provided by the initial allocation, then SQLite goes to &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; separately for each additional cache line.</source>
          <target state="translated">SQLITE_CONFIG_PAGECACHEオプションは、SQLiteがデフォルトのページキャッシュ実装でデータベースページキャッシュに使用できるメモリプールを指定します。&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcache2&quot;&gt;SQLITE_CONFIG_PCACHE2&lt;/a&gt;を使用してアプリケーション定義のページキャッシュ実装がロードされる場合、この構成オプションは何もしません。 SQLITE_CONFIG_PAGECACHEには、8バイトの整列メモリ（pMem）へのポインタ、各ページキャッシュラインのサイズ（sz）、およびキャッシュラインの数（N）の3つの引数があります。 sz引数は、最大のデータベースページのサイズ（512〜65536の2の累乗）に各ページヘッダーの追加バイトを加えたものである必要があります。ページヘッダーに必要な追加バイト数は、&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt;を使用して決定できます。。 szパラメータが必要以上に大きくなることは、メモリの浪費を除けば無害です。 pMem引数は、NULLポインター、または少なくともsz * Nバイトの8バイトに整列されたメモリーブロックへのポインターである必要があります。そうでない場合、その後の動作は定義されません。 pMemがNULLでない場合、SQLiteは、ページキャッシュのニーズを満たすために提供されたメモリを使用するように努め、ページキャッシュラインがszバイトより大きい場合、またはすべてのpMemバッファーが使い果たされた場合、&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）に&lt;/a&gt;フォールバックします。 pMemがNULLで、Nがゼロ以外の場合、各データベース接続は&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;からページキャッシュメモリの初期バルク割り当てを行います。Nが正の場合はN個のキャッシュラインに、Nが負の場合は-1024 * Nバイトで十分です。初期割り当てによって提供されるものを超えて追加のページキャッシュメモリが必要な場合、SQLiteは追加のキャッシュラインごとに個別に&lt;a href=&quot;free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;に移動します。</target>
        </trans-unit>
        <trans-unit id="1911f8a733a42d2b6026789f4ef363d83afb65d1" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PCACHE2 option takes a single argument which is a pointer to an &lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; object. This object specifies the interface to a custom page cache implementation. SQLite makes a copy of the &lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_CONFIG_PCACHE2オプションは、&lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt;オブジェクトへのポインターである単一の引数を取ります。このオブジェクトは、カスタムページキャッシュ実装へのインターフェイスを指定します。SQLiteは&lt;a href=&quot;#sqlite3_pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt;オブジェクトのコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="fe0c16b7c9692df379eddfaf23502a1d2deb56c4" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PCACHE2 option takes a single argument which is a pointer to an &lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; object. This object specifies the interface to a custom page cache implementation. SQLite makes a copy of the &lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_CONFIG_PCACHE2オプションは、&lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt;オブジェクトへのポインターである単一の引数を取ります。このオブジェクトは、カスタムページキャッシュ実装へのインターフェイスを指定します。SQLiteは&lt;a href=&quot;pcache_methods2&quot;&gt;sqlite3_pcache_methods2&lt;/a&gt;オブジェクトのコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="8ecb0f208e89787f9a7f11980392d2014f2ef02a" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PCACHE_HDRSZ option takes a single parameter which is a pointer to an integer and writes into that integer the number of extra bytes per page required for each page in &lt;a href=&quot;#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;. The amount of extra space required can change depending on the compiler, target platform, and SQLite version.</source>
          <target state="translated">SQLITE_CONFIG_PCACHE_HDRSZオプションは、整数へのポインタであり、各ページに必要なページあたりの余分なバイトの数整数それに書き込む単一のパラメータ取り&lt;a href=&quot;#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHEを&lt;/a&gt;。必要な追加スペースの量は、コンパイラ、ターゲットプラットフォーム、およびSQLiteのバージョンによって異なります。</target>
        </trans-unit>
        <trans-unit id="efc57facbbb1ece8f5d6410e99a1c9a1fcbbbc32" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PCACHE_HDRSZ option takes a single parameter which is a pointer to an integer and writes into that integer the number of extra bytes per page required for each page in &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;. The amount of extra space required can change depending on the compiler, target platform, and SQLite version.</source>
          <target state="translated">SQLITE_CONFIG_PCACHE_HDRSZオプションは、整数へのポインタであり、各ページに必要なページあたりの余分なバイトの数整数それに書き込む単一のパラメータ取り&lt;a href=&quot;c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHEを&lt;/a&gt;。必要な追加スペースの量は、コンパイラ、ターゲットプラットフォーム、およびSQLiteのバージョンによって異なります。</target>
        </trans-unit>
        <trans-unit id="c693040f9e2e760d6e4cb06df98665a33285d6df" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PMASZ option takes a single parameter which is an unsigned integer and sets the &quot;Minimum PMA Size&quot; for the multithreaded sorter to that integer. The default minimum PMA Size is set by the &lt;a href=&quot;../compile#sorter_pmasz&quot;&gt;SQLITE_SORTER_PMASZ&lt;/a&gt; compile-time option. New threads are launched to help with sort operations when multithreaded sorting is enabled (using the &lt;a href=&quot;../pragma#pragma_threads&quot;&gt;PRAGMA threads&lt;/a&gt; command) and the amount of content to be sorted exceeds the page size times the minimum of the &lt;a href=&quot;../pragma#pragma_cache_size&quot;&gt;PRAGMA cache_size&lt;/a&gt; setting and this value.</source>
          <target state="translated">SQLITE_CONFIG_PMASZオプションは、符号なし整数である単一のパラメーターを取り、マルチスレッドソーターの「最小PMAサイズ」をその整数に設定します。デフォルトの最小PMAサイズは、&lt;a href=&quot;../compile#sorter_pmasz&quot;&gt;SQLITE_SORTER_PMASZ&lt;/a&gt;コンパイル時オプションによって設定されます。マルチスレッドの並べ替えが有効になっていて（&lt;a href=&quot;../pragma#pragma_threads&quot;&gt;PRAGMAスレッド&lt;/a&gt;コマンドを使用）、並べ替え操作を支援する新しいスレッドが起動され、並べ替えるコンテンツの量がページサイズに&lt;a href=&quot;../pragma#pragma_cache_size&quot;&gt;PRAGMA cache_size&lt;/a&gt;設定の最小値とこの値を掛けた値を超えている。</target>
        </trans-unit>
        <trans-unit id="667ddbb0eaa86ffc653459dd23bacb289f6854a7" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_PMASZ option takes a single parameter which is an unsigned integer and sets the &quot;Minimum PMA Size&quot; for the multithreaded sorter to that integer. The default minimum PMA Size is set by the &lt;a href=&quot;compile#sorter_pmasz&quot;&gt;SQLITE_SORTER_PMASZ&lt;/a&gt; compile-time option. New threads are launched to help with sort operations when multithreaded sorting is enabled (using the &lt;a href=&quot;pragma#pragma_threads&quot;&gt;PRAGMA threads&lt;/a&gt; command) and the amount of content to be sorted exceeds the page size times the minimum of the &lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;PRAGMA cache_size&lt;/a&gt; setting and this value.</source>
          <target state="translated">SQLITE_CONFIG_PMASZオプションは、符号なし整数である単一のパラメーターを取り、マルチスレッドソーターの「最小PMAサイズ」をその整数に設定します。デフォルトの最小PMAサイズは、&lt;a href=&quot;compile#sorter_pmasz&quot;&gt;SQLITE_SORTER_PMASZ&lt;/a&gt;コンパイル時オプションによって設定されます。マルチスレッドの並べ替えが有効になっていて（&lt;a href=&quot;pragma#pragma_threads&quot;&gt;PRAGMAスレッド&lt;/a&gt;コマンドを使用）、並べ替え操作を支援する新しいスレッドが起動され、並べ替えるコンテンツの量がページサイズに&lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;PRAGMA cache_size&lt;/a&gt;設定の最小値とこの値を掛けた値を超えている。</target>
        </trans-unit>
        <trans-unit id="109fdd8da62f03c0d4a96a618a19a71e802f905e" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_SCRATCH option is no longer used.</source>
          <target state="translated">SQLITE_CONFIG_SCRATCH オプションは使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="29ca3b2106e1eec121b349f9609e0d465c220d3d" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_SMALL_MALLOC option takes single argument of type int, interpreted as a boolean, which if true provides a hint to SQLite that it should avoid large memory allocations if possible. SQLite will run faster if it is free to make large memory allocations, but some application might prefer to run slower in exchange for guarantees about memory fragmentation that are possible if large allocations are avoided. This hint is normally off.</source>
          <target state="translated">SQLITE_CONFIG_SMALL_MALLOC オプションは int 型の単一の引数を取り、 boolean として解釈されます。しかし、アプリケーションによっては、大規模なメモリ割り当てが回避された場合に可能なメモリの断片化を保証する代わりに、より遅く実行したいと思うかもしれません。このヒントは通常オフになっています。</target>
        </trans-unit>
        <trans-unit id="05ddcc0bca5d82f48fed51db87e518d3912d859e" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_SORTERREF_SIZE option accepts a single parameter of type (int) - the new value of the sorter-reference size threshold. Usually, when SQLite uses an external sort to order records according to an ORDER BY clause, all fields required by the caller are present in the sorted records. However, if SQLite determines based on the declared type of a table column that its values are likely to be very large - larger than the configured sorter-reference size threshold - then a reference is stored in each sorted record and the required column values loaded from the database as records are returned in sorted order. The default value for this option is to never use this optimization. Specifying a negative value for this option restores the default behaviour. This option is only available if SQLite is compiled with the &lt;a href=&quot;../compile#enable_sorter_references&quot;&gt;SQLITE_ENABLE_SORTER_REFERENCES&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_CONFIG_SORTERREF_SIZEオプションは、タイプ（int）の単一パラメーター（ソーター参照サイズしきい値の新しい値）を受け入れます。通常、SQLiteが外部ソートを使用してORDER BY句に従ってレコードを並べ替えると、呼び出し元が必要とするすべてのフィールドがソートされたレコードに存在します。ただし、SQLiteが、テーブルカラムの宣言されたタイプに基づいて、その値が非常に大きい（設定されたソーター参照サイズのしきい値より大きい）と判断した場合、参照は各ソート済みレコードに格納され、必要な列の値はレコードとしてのデータベースはソートされた順序で返されます。このオプションのデフォルト値は、この最適化を決して使用しないことです。このオプションに負の値を指定すると、デフォルトの動作に戻ります。このオプションは、SQLiteが&lt;a href=&quot;../compile#enable_sorter_references&quot;&gt;SQLITE_ENABLE_SORTER_REFERENCES&lt;/a&gt;コンパイル時オプション。</target>
        </trans-unit>
        <trans-unit id="8e4676f31515701431b60d8c3fec0783441a3fad" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_SORTERREF_SIZE option accepts a single parameter of type (int) - the new value of the sorter-reference size threshold. Usually, when SQLite uses an external sort to order records according to an ORDER BY clause, all fields required by the caller are present in the sorted records. However, if SQLite determines based on the declared type of a table column that its values are likely to be very large - larger than the configured sorter-reference size threshold - then a reference is stored in each sorted record and the required column values loaded from the database as records are returned in sorted order. The default value for this option is to never use this optimization. Specifying a negative value for this option restores the default behaviour. This option is only available if SQLite is compiled with the &lt;a href=&quot;compile#enable_sorter_references&quot;&gt;SQLITE_ENABLE_SORTER_REFERENCES&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_CONFIG_SORTERREF_SIZEオプションは、タイプ（int）の単一パラメーター（ソーター参照サイズしきい値の新しい値）を受け入れます。通常、SQLiteが外部ソートを使用してORDER BY句に従ってレコードを並べ替えると、呼び出し元が必要とするすべてのフィールドがソートされたレコードに存在します。ただし、SQLiteが、テーブルカラムの宣言されたタイプに基づいて、その値が非常に大きい（設定されたソーター参照サイズのしきい値より大きい）と判断した場合、参照は各ソート済みレコードに格納され、必要な列の値はレコードとしてのデータベースはソートされた順序で返されます。このオプションのデフォルト値は、この最適化を決して使用しないことです。このオプションに負の値を指定すると、デフォルトの動作に戻ります。このオプションは、SQLiteが&lt;a href=&quot;compile#enable_sorter_references&quot;&gt;SQLITE_ENABLE_SORTER_REFERENCES&lt;/a&gt;コンパイル時オプション。</target>
        </trans-unit>
        <trans-unit id="605f0b5884691b12b17ca06f9366cc2ade4cfd24" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_STMTJRNL_SPILL option takes a single parameter which becomes the &lt;a href=&quot;../tempfiles#stmtjrnl&quot;&gt;statement journal&lt;/a&gt; spill-to-disk threshold. &lt;a href=&quot;../tempfiles#stmtjrnl&quot;&gt;Statement journals&lt;/a&gt; are held in memory until their size (in bytes) exceeds this threshold, at which point they are written to disk. Or if the threshold is -1, statement journals are always held exclusively in memory. Since many statement journals never become large, setting the spill threshold to a value such as 64KiB can greatly reduce the amount of I/O required to support statement rollback. The default value for this setting is controlled by the &lt;a href=&quot;../compile#stmtjrnl_spill&quot;&gt;SQLITE_STMTJRNL_SPILL&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_CONFIG_STMTJRNL_SPILLオプションは、&lt;a href=&quot;../tempfiles#stmtjrnl&quot;&gt;ステートメントジャーナルの&lt;/a&gt;ディスクへのスピルへのしきい値になる単一のパラメーターを取ります。&lt;a href=&quot;../tempfiles#stmtjrnl&quot;&gt;ステートメントジャーナル&lt;/a&gt;は、サイズ（バイト単位）がこのしきい値を超えるまでメモリに保持されます。このしきい値を超えると、ディスクに書き込まれます。または、しきい値が-1の場合、ステートメントジャーナルは常にメモリ内に排他的に保持されます。多くのステートメントジャーナルが大きくなることはないため、スピルしきい値を64KiBなどの値に設定すると、ステートメントのロールバックをサポートするために必要なI / Oの量を大幅に削減できます。この設定のデフォルト値は、&lt;a href=&quot;../compile#stmtjrnl_spill&quot;&gt;SQLITE_STMTJRNL_SPILL&lt;/a&gt;コンパイル時オプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="c96a7bbc95d6882993f7d0afda36dce9d7d4b5c0" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_STMTJRNL_SPILL option takes a single parameter which becomes the &lt;a href=&quot;tempfiles#stmtjrnl&quot;&gt;statement journal&lt;/a&gt; spill-to-disk threshold. &lt;a href=&quot;tempfiles#stmtjrnl&quot;&gt;Statement journals&lt;/a&gt; are held in memory until their size (in bytes) exceeds this threshold, at which point they are written to disk. Or if the threshold is -1, statement journals are always held exclusively in memory. Since many statement journals never become large, setting the spill threshold to a value such as 64KiB can greatly reduce the amount of I/O required to support statement rollback. The default value for this setting is controlled by the &lt;a href=&quot;compile#stmtjrnl_spill&quot;&gt;SQLITE_STMTJRNL_SPILL&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_CONFIG_STMTJRNL_SPILLオプションは、&lt;a href=&quot;tempfiles#stmtjrnl&quot;&gt;ステートメントジャーナルの&lt;/a&gt;ディスクへのスピルへのしきい値になる単一のパラメーターを取ります。&lt;a href=&quot;tempfiles#stmtjrnl&quot;&gt;ステートメントジャーナル&lt;/a&gt;は、サイズ（バイト単位）がこのしきい値を超えるまでメモリに保持されます。このしきい値を超えると、ディスクに書き込まれます。または、しきい値が-1の場合、ステートメントジャーナルは常にメモリ内に排他的に保持されます。多くのステートメントジャーナルが大きくなることはないため、スピルしきい値を64KiBなどの値に設定すると、ステートメントのロールバックをサポートするために必要なI / Oの量を大幅に削減できます。この設定のデフォルト値は、&lt;a href=&quot;compile#stmtjrnl_spill&quot;&gt;SQLITE_STMTJRNL_SPILL&lt;/a&gt;コンパイル時オプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="e7c94d69eb75e63340f2383ddf68d20c1d31a18d" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_URI option takes a single argument of type int. If non-zero, then URI handling is globally enabled. If the parameter is zero, then URI handling is globally disabled. If URI handling is globally enabled, all filenames passed to &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16()&lt;/a&gt; or specified as part of &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; commands are interpreted as URIs, regardless of whether or not the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag is set when the database connection is opened. If it is globally disabled, filenames are only interpreted as URIs if the SQLITE_OPEN_URI flag is set when the database connection is opened. By default, URI handling is globally disabled. The default value may be changed by compiling with the &lt;a href=&quot;compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; symbol defined.</source>
          <target state="translated">SQLITE_CONFIG_URIオプションは、int型の単一の引数を取ります。ゼロ以外の場合、URI処理はグローバルに有効になります。パラメータがゼロの場合、URI処理はグローバルに無効になります。 URI処理がグローバルに有効になっている場合、データベース接続が開かれたときに&lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt;フラグが設定されているかどうかに関係なく、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;、sqlite3_open16（）に&lt;a href=&quot;#sqlite3_open&quot;&gt;渡される&lt;/a&gt;、または&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;コマンドの一部として指定されるすべてのファイル名はURIとして解釈されます。グローバルに無効になっている場合、データベース接続が開かれたときにSQLITE_OPEN_URIフラグが設定されている場合、ファイル名はURIとしてのみ解釈されます。デフォルトでは、URI処理はグローバルに無効になっています。デフォルト値は、&lt;a href=&quot;compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt;シンボルが定義されました。</target>
        </trans-unit>
        <trans-unit id="4ab4ffd66152d39e37a9eeebeb02a7852ae9ede8" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_URI option takes a single argument of type int. If non-zero, then URI handling is globally enabled. If the parameter is zero, then URI handling is globally disabled. If URI handling is globally enabled, all filenames passed to &lt;a href=&quot;open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;, &lt;a href=&quot;open&quot;&gt;sqlite3_open16()&lt;/a&gt; or specified as part of &lt;a href=&quot;../lang_attach&quot;&gt;ATTACH&lt;/a&gt; commands are interpreted as URIs, regardless of whether or not the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag is set when the database connection is opened. If it is globally disabled, filenames are only interpreted as URIs if the SQLITE_OPEN_URI flag is set when the database connection is opened. By default, URI handling is globally disabled. The default value may be changed by compiling with the &lt;a href=&quot;../compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; symbol defined.</source>
          <target state="translated">SQLITE_CONFIG_URIオプションは、int型の単一の引数を取ります。ゼロ以外の場合、URI処理はグローバルに有効になります。パラメータがゼロの場合、URI処理はグローバルに無効になります。 URI処理がグローバルに有効になっている場合、データベース接続が開かれたときに&lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt;フラグが設定されているかどうかに関係なく、&lt;a href=&quot;open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;、sqlite3_open16（）に&lt;a href=&quot;open&quot;&gt;渡される&lt;/a&gt;、または&lt;a href=&quot;../lang_attach&quot;&gt;ATTACH&lt;/a&gt;コマンドの一部として指定されるすべてのファイル名はURIとして解釈されます。グローバルに無効になっている場合、データベース接続が開かれたときにSQLITE_OPEN_URIフラグが設定されている場合、ファイル名はURIとしてのみ解釈されます。デフォルトでは、URI処理はグローバルに無効になっています。デフォルト値は、&lt;a href=&quot;../compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt;シンボルが定義されました。</target>
        </trans-unit>
        <trans-unit id="b4ea1f91dd128d45077ef6aab24be62cde2c08e4" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_WIN32_HEAPSIZE option is only available if SQLite is compiled for Windows with the &lt;a href=&quot;../compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt; pre-processor macro defined. SQLITE_CONFIG_WIN32_HEAPSIZE takes a 32-bit unsigned integer value that specifies the maximum size of the created heap.</source>
          <target state="translated">SQLITE_CONFIG_WIN32_HEAPSIZEオプションは、&lt;a href=&quot;../compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt;プリプロセッサマクロが定義されているWindows用にSQLiteがコンパイルされている場合にのみ使用できます。SQLITE_CONFIG_WIN32_HEAPSIZEは、作成されるヒープの最大サイズを指定する32ビットの符号なし整数値を取ります。</target>
        </trans-unit>
        <trans-unit id="55987e1e9f78159dc547356995af9fe3ce5c9817" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONFIG_WIN32_HEAPSIZE option is only available if SQLite is compiled for Windows with the &lt;a href=&quot;compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt; pre-processor macro defined. SQLITE_CONFIG_WIN32_HEAPSIZE takes a 32-bit unsigned integer value that specifies the maximum size of the created heap.</source>
          <target state="translated">SQLITE_CONFIG_WIN32_HEAPSIZEオプションは、&lt;a href=&quot;compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt;プリプロセッサマクロが定義されているWindows用にSQLiteがコンパイルされている場合にのみ使用できます。SQLITE_CONFIG_WIN32_HEAPSIZEは、作成されるヒープの最大サイズを指定する32ビットの符号なし整数値を取ります。</target>
        </trans-unit>
        <trans-unit id="90354942dff120bb22a653ae9fa0d244342b89da" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT code can also be used as the return value from the &lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex()&lt;/a&gt; method of a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; implementation. When xBestIndex() returns SQLITE_CONSTRAINT, that indicates that the particular combination of inputs submitted to xBestIndex() cannot result in a usable query plan and should not be given further consideration.</source>
          <target state="translated">SQLITE_CONSTRAINTコードは、&lt;a href=&quot;vtab&quot;&gt;仮想テーブル&lt;/a&gt;実装の&lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex（）&lt;/a&gt;メソッドからの戻り値としても使用できます。xBestIndex（）がSQLITE_CONSTRAINTを返す場合、これは、xBestIndex（）に送信された入力の特定の組み合わせでは使用可能なクエリプランが得られないため、これ以上の考慮は不要であることを示します。</target>
        </trans-unit>
        <trans-unit id="cd3afc5f9dc7b86d4db8138dda7591ba7ea2f042" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT error code means that an SQL constraint violation occurred while trying to process an SQL statement. Additional information about the failed constraint can be found by consulting the accompanying error message (returned via &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt; or &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_errmsg16()&lt;/a&gt;) or by looking at the &lt;a href=&quot;rescode#extrc&quot;&gt;extended error code&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CONSTRAINTエラーコードは、SQLステートメントの処理中にSQL制約違反が発生したことを意味します。失敗した制約に関する追加情報は、付随するエラーメッセージ（&lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_errmsg（）&lt;/a&gt;または&lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_errmsg16（）&lt;/a&gt;を介して返される）を調べるか、&lt;a href=&quot;rescode#extrc&quot;&gt;拡張エラーコードを&lt;/a&gt;確認することで確認できます。</target>
        </trans-unit>
        <trans-unit id="1402b83ad789cf26361c62d000ccad7aa66cb251" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_CHECK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK constraint&lt;/a&gt; failed.</source>
          <target state="translated">SQLITE_CONSTRAINT_CHECKエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;lang_createtable#ckconst&quot;&gt;チェック制約が&lt;/a&gt;失敗しました。</target>
        </trans-unit>
        <trans-unit id="59f7b5e1d1fc684ffe767053e5ae405c247a79ff" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_COMMITHOOK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;c3ref/commit_hook&quot;&gt;commit hook callback&lt;/a&gt; returned non-zero that thus caused the SQL statement to be rolled back.</source>
          <target state="translated">SQLITE_CONSTRAINT_COMMITHOOKエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;c3ref/commit_hook&quot;&gt;フックコールバックがコミット&lt;/a&gt;こうしてロールバックされるSQL文を引き起こした非ゼロを返さ。</target>
        </trans-unit>
        <trans-unit id="c857f1295fd44fc161f41f3c36b1faa547511cbf" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_FOREIGNKEY error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraint&lt;/a&gt; failed.</source>
          <target state="translated">SQLITE_CONSTRAINT_FOREIGNKEYエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;foreignkeys&quot;&gt;外部キー制約が&lt;/a&gt;失敗しました。</target>
        </trans-unit>
        <trans-unit id="fa48ddcf19118820df2cdaa1b78eb70d4071dd14" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_FUNCTION error code is not currently used by the SQLite core. However, this error code is available for use by extension functions.</source>
          <target state="translated">SQLITE_CONSTRAINT_FUNCTION エラーコードは、現在のところ SQLite コアでは使用されていません。しかし、このエラーコードは拡張関数で使用することができます。</target>
        </trans-unit>
        <trans-unit id="3c4481d9380cb514a86e596c21d0da6c70c2337c" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_NOTNULL error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;lang_createtable#notnullconst&quot;&gt;NOT NULL constraint&lt;/a&gt; failed.</source>
          <target state="translated">SQLITE_CONSTRAINT_NOTNULLエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;lang_createtable#notnullconst&quot;&gt;NOT NULL制約が&lt;/a&gt;失敗しました。</target>
        </trans-unit>
        <trans-unit id="b921914ef5b1ae6eddb9ee04650c5c235d49ed11" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_PRIMARYKEY error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY constraint&lt;/a&gt; failed.</source>
          <target state="translated">SQLITE_CONSTRAINT_PRIMARYKEYエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;lang_createtable#primkeyconst&quot;&gt;PRIMARY KEY制約が&lt;/a&gt;失敗しました。</target>
        </trans-unit>
        <trans-unit id="3d2416f0eb5c1e4932d96de2c633168fe0745690" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_ROWID error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; is not unique.</source>
          <target state="translated">SQLITE_CONSTRAINT_ROWIDエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;lang_createtable#rowid&quot;&gt;行IDが&lt;/a&gt;一意ではありません。</target>
        </trans-unit>
        <trans-unit id="d42ea811023ed01aef8eff1b26fe2bb9abe7bb95" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_TRIGGER error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;lang_createtrigger#raise&quot;&gt;RAISE function&lt;/a&gt; within a &lt;a href=&quot;lang_createtrigger&quot;&gt;trigger&lt;/a&gt; fired, causing the SQL statement to abort.</source>
          <target state="translated">SQLITE_CONSTRAINT_TRIGGERエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;lang_createtrigger#raise&quot;&gt;raise関数&lt;/a&gt;内の&lt;a href=&quot;lang_createtrigger&quot;&gt;トリガは&lt;/a&gt; SQL文を中断させ、焼成します。</target>
        </trans-unit>
        <trans-unit id="360095776d45f4673d25e1354d178fe2a9b1bd8f" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_UNIQUE error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt; indicating that a &lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;UNIQUE constraint&lt;/a&gt; failed.</source>
          <target state="translated">SQLITE_CONSTRAINT_UNIQUEエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;ことを示す&lt;a href=&quot;lang_createtable#uniqueconst&quot;&gt;UNIQUE制約が&lt;/a&gt;失敗しました。</target>
        </trans-unit>
        <trans-unit id="a2591670580b26a952a816bde9a68b915c405d78" translate="yes" xml:space="preserve">
          <source>The SQLITE_CONSTRAINT_VTAB error code is not currently used by the SQLite core. However, this error code is available for use by application-defined &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;.</source>
          <target state="translated">SQLITE_CONSTRAINT_VTABエラーコードは、現在SQLiteコアでは使用されていません。ただし、このエラーコードは、アプリケーション定義の&lt;a href=&quot;vtab&quot;&gt;仮想テーブル&lt;/a&gt;で使用できます。</target>
        </trans-unit>
        <trans-unit id="ca22607c1bc11adbc4850780682a00fc2af063db" translate="yes" xml:space="preserve">
          <source>The SQLITE_CORRUPT result code indicates that the database file has been corrupted. See the &lt;a href=&quot;lockingv3#how_to_corrupt&quot;&gt;How To Corrupt Your Database Files&lt;/a&gt; for further discussion on how corruption can occur.</source>
          <target state="translated">SQLITE_CORRUPT結果コードは、データベースファイルが破損していることを示します。破損が発生する&lt;a href=&quot;lockingv3#how_to_corrupt&quot;&gt;方法の&lt;/a&gt;詳細については、データベースファイルの破損方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="83192f645bf11cddd8fa598bcc30dab724111331" translate="yes" xml:space="preserve">
          <source>The SQLITE_CORRUPT_SEQUENCE result code means that the schema of the sqlite_sequence table is corrupt. The sqlite_sequence table is used to help implement the &lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT&lt;/a&gt; feature. The sqlite_sequence table should have the following format:</source>
          <target state="translated">SQLITE_CORRUPT_SEQUENCE結果コードは、sqlite_sequenceテーブルのスキーマが破損していることを意味します。sqlite_sequenceテーブルは、&lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT&lt;/a&gt;機能の実装を支援するために使用されます。sqlite_sequenceテーブルの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e605977504524c24f74112f64c7f554569d710cb" translate="yes" xml:space="preserve">
          <source>The SQLITE_CORRUPT_VTAB error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; used by &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;. A &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; might return SQLITE_CORRUPT_VTAB to indicate that content in the virtual table is corrupt.</source>
          <target state="translated">SQLITE_CORRUPT_VTABエラーコードは、&lt;a href=&quot;vtab&quot;&gt;仮想テーブルで&lt;/a&gt;使用される&lt;a href=&quot;rescode#corrupt&quot;&gt;SQLITE_CORRUPTの&lt;/a&gt;&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;です。&lt;a href=&quot;vtab&quot;&gt;仮想テーブルは、&lt;/a&gt;仮想テーブルの内容が壊れていることを示すためにSQLITE_CORRUPT_VTABを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="6f5aeac16ee13da96d49c9c69d5a1efa4f1ec4c7" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DEFENSIVE option activates or deactivates the &quot;defensive&quot; flag for a database connection. When the defensive flag is enabled, language features that allow ordinary SQL to deliberately corrupt the database file are disabled. The disabled features include but are not limited to the following:</source>
          <target state="translated">SQLITE_DBCONFIG_DEFENSIVE オプションは、データベース接続の &quot;防御&quot; フラグを有効または無効にします。defensive フラグが有効な場合、通常の SQL がデータベースファイルを故意に破損させるような言語機能は無効になります。無効化される機能には、以下のものがありますが、これらに限定されるものではありません。</target>
        </trans-unit>
        <trans-unit id="b1c89dddb1e567654969cbefc3cb66f653fb53df" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DQS option activates or deactivates the legacy &lt;a href=&quot;../quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature for DDL statements, such as CREATE TABLE and CREATE INDEX. The default value of this setting is determined by the &lt;a href=&quot;../compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBCONFIG_DQSオプションは、CREATE TABLEやCREATE INDEXなどのDDLステートメントの従来の&lt;a href=&quot;../quirks#dblquote&quot;&gt;二重引用符で囲まれた文字列リテラルの&lt;/a&gt;誤機能をアクティブまたは非アクティブにします。この設定のデフォルト値は、&lt;a href=&quot;../compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt;コンパイル時オプションによって決定されます。</target>
        </trans-unit>
        <trans-unit id="5fa9af190de834f94817db4398afc2b28f903d62" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DQS option activates or deactivates the legacy &lt;a href=&quot;quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature for DDL statements, such as CREATE TABLE and CREATE INDEX. The default value of this setting is determined by the &lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBCONFIG_DQSオプションは、CREATE TABLEやCREATE INDEXなどのDDLステートメントの従来の&lt;a href=&quot;quirks#dblquote&quot;&gt;二重引用符で囲まれた文字列リテラルの&lt;/a&gt;誤機能をアクティブまたは非アクティブにします。この設定のデフォルト値は、&lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt;コンパイル時オプションによって決定されます。</target>
        </trans-unit>
        <trans-unit id="7a4f8ed114b3f33c0656fd3fe462891e36a86bca" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DQS_DML option activates or deactivates the legacy &lt;a href=&quot;../quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature for DML statement only, that is DELETE, INSERT, SELECT, and UPDATE statements. The default value of this setting is determined by the &lt;a href=&quot;../compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBCONFIG_DQS_DMLオプションは、DMLステートメント（DELETE、INSERT、SELECT、およびUPDATEステートメント）に対してのみ、従来の&lt;a href=&quot;../quirks#dblquote&quot;&gt;二重引用符で囲まれた文字列リテラルの&lt;/a&gt;誤機能をアクティブ化または非アクティブ化します。この設定のデフォルト値は、&lt;a href=&quot;../compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt;コンパイル時オプションによって決定されます。</target>
        </trans-unit>
        <trans-unit id="5ef07fd34a275a246ee518a98e66084fe0a55fad" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DQS_DML option activates or deactivates the legacy &lt;a href=&quot;../quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature for DML statements only, that is DELETE, INSERT, SELECT, and UPDATE statements. The default value of this setting is determined by the &lt;a href=&quot;../compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBCONFIG_DQS_DMLオプションは、DMLステートメント、つまりDELETE、INSERT、SELECT、およびUPDATEステートメントに対してのみ、従来の&lt;a href=&quot;../quirks#dblquote&quot;&gt;二重引用符で囲まれた文字列リテラルの&lt;/a&gt;誤動作をアクティブ化または非アクティブ化します。この設定のデフォルト値は、&lt;a href=&quot;../compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt;コンパイル時オプションによって決定されます。</target>
        </trans-unit>
        <trans-unit id="b23b83b3528f7ad3365bcce16b9fcdca7b11634b" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DQS_DML option activates or deactivates the legacy &lt;a href=&quot;quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature for DML statement only, that is DELETE, INSERT, SELECT, and UPDATE statements. The default value of this setting is determined by the &lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBCONFIG_DQS_DMLオプションは、DMLステートメント（DELETE、INSERT、SELECT、およびUPDATEステートメント）に対してのみ、従来の&lt;a href=&quot;quirks#dblquote&quot;&gt;二重引用符で囲まれた文字列リテラルの&lt;/a&gt;誤機能をアクティブ化または非アクティブ化します。この設定のデフォルト値は、&lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt;コンパイル時オプションによって決定されます。</target>
        </trans-unit>
        <trans-unit id="8485338d9edebd1879a88fb2aa42a3b5aaf70e71" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_DQS_DML option activates or deactivates the legacy &lt;a href=&quot;quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature for DML statements only, that is DELETE, INSERT, SELECT, and UPDATE statements. The default value of this setting is determined by the &lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBCONFIG_DQS_DMLオプションは、DMLステートメント、つまりDELETE、INSERT、SELECT、およびUPDATEステートメントに対してのみ、従来の&lt;a href=&quot;quirks#dblquote&quot;&gt;二重引用符で囲まれた文字列リテラルの&lt;/a&gt;誤動作をアクティブ化または非アクティブ化します。この設定のデフォルト値は、&lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS&lt;/a&gt;コンパイル時オプションによって決定されます。</target>
        </trans-unit>
        <trans-unit id="763206f446e43106378de90da986cb3503647378" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_ENABLE_QPSG option activates or deactivates the &lt;a href=&quot;../queryplanner-ng#qpstab&quot;&gt;query planner stability guarantee&lt;/a&gt; (QPSG). When the QPSG is active, a single SQL query statement will always use the same algorithm regardless of values of &lt;a href=&quot;../lang_expr#varparam&quot;&gt;bound parameters&lt;/a&gt;. The QPSG disables some query optimizations that look at the values of bound parameters, which can make some queries slower. But the QPSG has the advantage of more predictable behavior. With the QPSG active, SQLite will always use the same query plan in the field as was used during testing in the lab. The first argument to this setting is an integer which is 0 to disable the QPSG, positive to enable QPSG, or negative to leave the setting unchanged. The second parameter is a pointer to an integer into which is written 0 or 1 to indicate whether the QPSG is disabled or enabled following this call.</source>
          <target state="translated">SQLITE_DBCONFIG_ENABLE_QPSGオプションは、&lt;a href=&quot;../queryplanner-ng#qpstab&quot;&gt;クエリプランナーの安定性保証&lt;/a&gt;（QPSG）をアクティブまたは非アクティブにします。 QPSGがアクティブな場合、&lt;a href=&quot;../lang_expr#varparam&quot;&gt;バインドされたパラメーター&lt;/a&gt;の値に関係なく、単一のSQLクエリステートメントは常に同じアルゴリズムを使用します。 QPSGは、バインドされたパラメーターの値を参照する一部のクエリ最適化を無効にし、一部のクエリを遅くする可能性があります。しかし、QPSGにはより予測可能な動作という利点があります。 QPSGがアクティブな場合、SQLiteは常に、ラボでのテスト中に使用されたものと同じクエリプランをフィールドで使用します。この設定の最初の引数は、QPSGを無効にする場合は0、QPSGを有効にする場合は正、設定を変更しない場合は負の整数です。 2番目のパラメーターは、この呼び出しに続いてQPSGが無効か有効かを示すために0または1が書き込まれる整数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="e62faf35588a5d4eafe007180e96f2c0c110300b" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_ENABLE_QPSG option activates or deactivates the &lt;a href=&quot;queryplanner-ng#qpstab&quot;&gt;query planner stability guarantee&lt;/a&gt; (QPSG). When the QPSG is active, a single SQL query statement will always use the same algorithm regardless of values of &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameters&lt;/a&gt;. The QPSG disables some query optimizations that look at the values of bound parameters, which can make some queries slower. But the QPSG has the advantage of more predictable behavior. With the QPSG active, SQLite will always use the same query plan in the field as was used during testing in the lab. The first argument to this setting is an integer which is 0 to disable the QPSG, positive to enable QPSG, or negative to leave the setting unchanged. The second parameter is a pointer to an integer into which is written 0 or 1 to indicate whether the QPSG is disabled or enabled following this call.</source>
          <target state="translated">SQLITE_DBCONFIG_ENABLE_QPSGオプションは、&lt;a href=&quot;queryplanner-ng#qpstab&quot;&gt;クエリプランナーの安定性保証&lt;/a&gt;（QPSG）をアクティブまたは非アクティブにします。 QPSGがアクティブな場合、&lt;a href=&quot;lang_expr#varparam&quot;&gt;バインドされたパラメーター&lt;/a&gt;の値に関係なく、単一のSQLクエリステートメントは常に同じアルゴリズムを使用します。 QPSGは、バインドされたパラメーターの値を参照する一部のクエリ最適化を無効にし、一部のクエリを遅くする可能性があります。しかし、QPSGにはより予測可能な動作という利点があります。 QPSGがアクティブな場合、SQLiteは常に、ラボでのテスト中に使用されたものと同じクエリプランをフィールドで使用します。この設定の最初の引数は、QPSGを無効にする場合は0、QPSGを有効にする場合は正、設定を変更しない場合は負の整数です。 2番目のパラメーターは、この呼び出しに続いてQPSGが無効か有効かを示すために0または1が書き込まれる整数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="8bef3f5951097e41221958d251dd3bbb9ce96dee" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_LEGACY_ALTER_TABLE option activates or deactivates the legacy behavior of the &lt;a href=&quot;../lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAME&lt;/a&gt; command such it behaves as it did prior to &lt;a href=&quot;https://sqlite.org/releaselog/3_24_0.html&quot;&gt;version 3.24.0&lt;/a&gt; (2018-06-04). See the &quot;Compatibility Notice&quot; on the &lt;a href=&quot;../lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAME documentation&lt;/a&gt; for additional information. This feature can also be turned on and off using the &lt;a href=&quot;../pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table&lt;/a&gt; statement.</source>
          <target state="translated">SQLITE_DBCONFIG_LEGACY_ALTER_TABLEオプションは、&lt;a href=&quot;../lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAME&lt;/a&gt;コマンドのレガシー動作をアクティブまたは非アクティブにし、&lt;a href=&quot;https://sqlite.org/releaselog/3_24_0.html&quot;&gt;バージョン3.24.0&lt;/a&gt;（2018-06-04）より前と同じように動作します。詳細については、&lt;a href=&quot;../lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAMEドキュメント&lt;/a&gt;の「互換性に関する通知」を参照してください。この機能は、&lt;a href=&quot;../pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table&lt;/a&gt;ステートメントを使用してオンとオフを切り替えることもできます。</target>
        </trans-unit>
        <trans-unit id="07c20d63d2e6b14f99d190fcacbd95a681ec8f6a" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_LEGACY_ALTER_TABLE option activates or deactivates the legacy behavior of the &lt;a href=&quot;lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAME&lt;/a&gt; command such it behaves as it did prior to &lt;a href=&quot;https://sqlite.org/releaselog/3_24_0.html&quot;&gt;version 3.24.0&lt;/a&gt; (2018-06-04). See the &quot;Compatibility Notice&quot; on the &lt;a href=&quot;lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAME documentation&lt;/a&gt; for additional information. This feature can also be turned on and off using the &lt;a href=&quot;pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table&lt;/a&gt; statement.</source>
          <target state="translated">SQLITE_DBCONFIG_LEGACY_ALTER_TABLEオプションは、&lt;a href=&quot;lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAME&lt;/a&gt;コマンドのレガシー動作をアクティブまたは非アクティブにし、&lt;a href=&quot;https://sqlite.org/releaselog/3_24_0.html&quot;&gt;バージョン3.24.0&lt;/a&gt;（2018-06-04）より前と同じように動作します。詳細については、&lt;a href=&quot;lang_altertable#altertabrename&quot;&gt;ALTER TABLE RENAMEドキュメント&lt;/a&gt;の「互換性に関する通知」を参照してください。この機能は、&lt;a href=&quot;pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table&lt;/a&gt;ステートメントを使用してオンとオフを切り替えることもできます。</target>
        </trans-unit>
        <trans-unit id="b56f76674dd3d27b6ff064c91089204d7b0e90fc" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_LEGACY_FILE_FORMAT option activates or deactivates the legacy file format flag. When activated, this flag causes all newly created database file to have a schema format version number (the 4-byte integer found at offset 44 into the database header) of 1. This in turn means that the resulting database file will be readable and writable by any SQLite version back to 3.0.0 (2004-06-18). Without this setting, newly created databases are generally not understandable by SQLite versions prior to 3.3.0 (2006-01-11). As these words are written, there is now scarcely any need to generated database files that are compatible all the way back to version 3.0.0, and so this setting is of little practical use, but is provided so that SQLite can continue to claim the ability to generate new database files that are compatible with version 3.0.0.</source>
          <target state="translated">SQLITE_DBCONFIG_LEGACY_FILE_FORMAT オプションは、レガシー ファイル形式フラグを有効または無効にします。このフラグを有効にすると、新しく作成されたすべてのデータベースファイルのスキーマフォーマットのバージョン番号(データベースヘッダーのオフセット44にある4バイトの整数)が1になります。 これは、結果として得られるデータベースファイルが3.0.0 (2004-06-18)以前のSQLiteバージョンでも読み書きが可能になることを意味します。この設定がない場合、新しく作成されたデータベースは、一般的に3.3.0 (2006-01-11)以前のバージョンのSQLiteでは理解できません。この言葉が書かれているように、現在ではバージョン3.0.0.0まで遡って互換性のあるデータベースファイルを生成する必要性はほとんどないので、この設定はほとんど実用的ではありませんが、SQLiteがバージョン3.0.0.0と互換性のある新しいデータベースファイルを生成する能力を主張し続けるために提供されています。</target>
        </trans-unit>
        <trans-unit id="609f392579cb3bfb47e8225e916b400815ceda24" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_TRUSTED_SCHEMA option tells SQLite to assume that database schemas are untainted by malicious content. When the SQLITE_DBCONFIG_TRUSTED_SCHEMA option is disabled, SQLite takes additional defensive steps to protect the application from harm including:</source>
          <target state="translated">SQLITE_DBCONFIG_TRUSTED_SCHEMA オプションは、データベース スキーマが悪意のあるコンテンツに汚染されていないことを前提とするように SQLite に指示します。SQLITE_DBCONFIG_TRUSTED_SCHEMA オプションが無効になっている場合、SQLite はアプリケーションを害から保護するために、以下のような追加の防御ステップを実行します。</target>
        </trans-unit>
        <trans-unit id="6b8460a489883d4335645b0e8208feef234ba632" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_WRITABLE_SCHEMA option activates or deactivates the &quot;writable_schema&quot; flag. This has the same effect and is logically equivalent to setting &lt;a href=&quot;../pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=ON&lt;/a&gt; or &lt;a href=&quot;../pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=OFF&lt;/a&gt;. The first argument to this setting is an integer which is 0 to disable the writable_schema, positive to enable writable_schema, or negative to leave the setting unchanged. The second parameter is a pointer to an integer into which is written 0 or 1 to indicate whether the writable_schema is enabled or disabled following this call.</source>
          <target state="translated">SQLITE_DBCONFIG_WRITABLE_SCHEMAオプションは、「writable_schema」フラグをアクティブまたは非アクティブにします。これは同じ効果があり、&lt;a href=&quot;../pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema = ON&lt;/a&gt;または&lt;a href=&quot;../pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema = OFF&lt;/a&gt;を設定することと論理的に同等です。この設定の最初の引数は整数で、0はwritable_schemaを無効にし、正の値はwritable_schemaを有効にするか、負の値は設定を変更しないままにします。 2番目のパラメーターは、この呼び出しに続いてwritable_schemaが有効か無効かを示すために0または1が書き込まれる整数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="46872dc1f07ab31c88fb7c7af6f4fae5ff78bc83" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBCONFIG_WRITABLE_SCHEMA option activates or deactivates the &quot;writable_schema&quot; flag. This has the same effect and is logically equivalent to setting &lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=ON&lt;/a&gt; or &lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=OFF&lt;/a&gt;. The first argument to this setting is an integer which is 0 to disable the writable_schema, positive to enable writable_schema, or negative to leave the setting unchanged. The second parameter is a pointer to an integer into which is written 0 or 1 to indicate whether the writable_schema is enabled or disabled following this call.</source>
          <target state="translated">SQLITE_DBCONFIG_WRITABLE_SCHEMAオプションは、「writable_schema」フラグをアクティブまたは非アクティブにします。これは同じ効果があり、&lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema = ON&lt;/a&gt;または&lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema = OFF&lt;/a&gt;を設定することと論理的に同等です。この設定の最初の引数は整数で、0はwritable_schemaを無効にし、正の値はwritable_schemaを有効にするか、負の値は設定を変更しないままにします。 2番目のパラメーターは、この呼び出しに続いてwritable_schemaが有効か無効かを示すために0または1が書き込まれる整数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="6b85aa8ea894875435c445b85abe99205949918e" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE Virtual Table</source>
          <target state="translated">SQLITE_DBPAGE 仮想テーブル</target>
        </trans-unit>
        <trans-unit id="66cd1369214f0f32feaaff6ac1895398317fe842" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE extension implements an &lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;eponymous-only virtual table&lt;/a&gt; that provides direct access to the underlying database file by interacting with the pager. SQLITE_DBPAGE is capable of both reading and writing any page of the database. Because interaction is through the pager layer, all changes are transactional.</source>
          <target state="translated">SQLITE_DBPAGE拡張機能は、ページャーと対話することにより、基になるデータベースファイルへの直接アクセスを提供する、同義語&lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;のみの仮想テーブル&lt;/a&gt;を実装します。SQLITE_DBPAGEは、データベースの任意のページの読み取りと書き込みの両方が可能です。インタラクションはページャーレイヤーを通じて行われるため、すべての変更はトランザクション対応です。</target>
        </trans-unit>
        <trans-unit id="10bc6095f9cb7b42e8d331fa1d325222ae39eae9" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE extension is enabled in default builds of the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="translated">SQLITE_DBPAGE拡張機能は、&lt;a href=&quot;cli&quot;&gt;コマンドラインシェルの&lt;/a&gt;デフォルトビルドで有効になっています。</target>
        </trans-unit>
        <trans-unit id="6759306b08f50bd9c66f3b5fb6678d1fa27bfe11" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE extension is included in the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; though it is disabled by default. Use the &lt;a href=&quot;compile#enable_dbpage_vtab&quot;&gt;SQLITE_ENABLE_DBPAGE_VTAB&lt;/a&gt; compile-time option to enable the SQLITE_DBPAGE extension. The SQLITE_DBPAGE extension makes use of unpublished internal interfaces and is not run-time loadable. The only way to add SQLITE_DBPAGE to an application is to compile it in using the &lt;a href=&quot;compile#enable_dbpage_vtab&quot;&gt;SQLITE_ENABLE_DBPAGE_VTAB&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLITE_DBPAGE拡張機能は&lt;a href=&quot;amalgamation&quot;&gt;統合に&lt;/a&gt;含まれていますが、デフォルトでは無効になっています。&lt;a href=&quot;compile#enable_dbpage_vtab&quot;&gt;SQLITE_ENABLE_DBPAGE_VTAB&lt;/a&gt;コンパイル時オプションを使用して、SQLITE_DBPAGE拡張を有効にします。 SQLITE_DBPAGE拡張機能は、公開されていない内部インターフェースを利用するため、実行時にロードできません。 SQLITE_DBPAGEをアプリケーションに追加する唯一の方法は、&lt;a href=&quot;compile#enable_dbpage_vtab&quot;&gt;SQLITE_ENABLE_DBPAGE_VTAB&lt;/a&gt;コンパイル時オプションを使用してコンパイルすることです。</target>
        </trans-unit>
        <trans-unit id="29d747e639293b4d0174864bbfeb0a0f144170ea" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE table allows an application to view or replace the raw binary content of each page of the database file. No attempt is made to interpret the content of the page. Content is returned byte-for-byte as it appears on disk.</source>
          <target state="translated">SQLITE_DBPAGE テーブルは、アプリケーションがデータベースファイルの各ページの生のバイナリ内容を表示したり置き換えたりすることを可能にします。ページの内容を解釈しようとはしません。内容はディスク上に表示されている状態でバイト単位で返されます。</target>
        </trans-unit>
        <trans-unit id="f9b8d935ab9300d2651f69fa35d68c10b3cdb857" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE table can participate in a join just like any other table. Hence, to see the content of the first page to all connected database files, one might run a statement like this:</source>
          <target state="translated">SQLITE_DBPAGEテーブルは、他のテーブルと同様に結合に参加することができます。したがって、接続されているすべてのデータベースファイルに最初のページの内容を表示するには、次のようなステートメントを実行することができます。</target>
        </trans-unit>
        <trans-unit id="15d4ed3f8e0c537ab57736b4ad4d051438f525bd" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE table has one row for each page in the database file. SQLITE_DBPAGE allows pages to be read or to be overwritten. However the size of the database file cannot be changed. It is not possible to change the number of rows in the SQLITE_DBPAGE table by running DELETE or INSERT operations against that table.</source>
          <target state="translated">SQLITE_DBPAGE テーブルは、データベースファイル内の各ページに対して 1 つの行を持ちます。SQLITE_DBPAGEは、ページを読み込んだり、上書きしたりすることができます。ただし、データベースファイルのサイズは変更できません。SQLITE_DBPAGE テーブルに対して DELETE または INSERT 操作を実行して、SQLITE_DBPAGE テーブルの行数を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="74c5162b414c69b11a7519aa50aa6d53d70b24f0" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE table schema shown above is incomplete. There is a third &lt;a href=&quot;vtab#hiddencol&quot;&gt;hidden column&lt;/a&gt; named &quot;schema&quot; that determines which &lt;a href=&quot;lang_attach&quot;&gt;ATTACH-ed database&lt;/a&gt; should be read or written. Because the &quot;schema&quot; column is hidden, it can be used as a parameter when SQLITE_DBPAGE is invoked as a &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt;.</source>
          <target state="translated">上記のSQLITE_DBPAGEテーブルスキーマは不完全です。「スキーマ」という名前の3番目の&lt;a href=&quot;vtab#hiddencol&quot;&gt;非表示列&lt;/a&gt;があり、どの&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;が適用されたデータベースの読み取りまたは書き込みを行うかを決定します。「スキーマ」列は非表示になっているため、SQLITE_DBPAGEが&lt;a href=&quot;vtab#tabfunc2&quot;&gt;テーブル値関数&lt;/a&gt;として呼び出されたときにパラメーターとして使用できます。</target>
        </trans-unit>
        <trans-unit id="518c52e0806550bfb6aa69b1fed15fbc4111a9ca" translate="yes" xml:space="preserve">
          <source>The SQLITE_DBPAGE virtual table read/write table that provides direct access to the underlying disk file on a page-by-page basis. The virtual table appears to have a schema like this:</source>
          <target state="translated">SQLITE_DBPAGE 仮想テーブルは、ページ単位で基礎となるディスクファイルへの直接アクセスを提供する読み書きテーブルです。仮想テーブルは、このようなスキーマを持っているようです。</target>
        </trans-unit>
        <trans-unit id="c1930c1236dfcd2ca69ef991dff0ceab5ad493f1" translate="yes" xml:space="preserve">
          <source>The SQLITE_DESERIALIZE_FREEONCLOSE means that the database serialization in the P argument is held in memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc64()&lt;/a&gt; and that SQLite should take ownership of this memory and automatically free it when it has finished using it. Without this flag, the caller is responsible for freeing any dynamically allocated memory.</source>
          <target state="translated">SQLITE_DESERIALIZE_FREEONCLOSEは、P引数のデータベースシリアル化が&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc64（）&lt;/a&gt;から取得したメモリに保持され、SQLiteがこのメモリの所有権を取得し、使用を終了すると自動的に解放することを意味します。このフラグがない場合、呼び出し元は、動的に割り当てられたメモリを解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="76631b67d929ebcd295444bce3ec1691bb16c502" translate="yes" xml:space="preserve">
          <source>The SQLITE_DESERIALIZE_FREEONCLOSE means that the database serialization in the P argument is held in memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc64()&lt;/a&gt; and that SQLite should take ownership of this memory and automatically free it when it has finished using it. Without this flag, the caller is responsible for freeing any dynamically allocated memory.</source>
          <target state="translated">SQLITE_DESERIALIZE_FREEONCLOSEは、P引数のデータベースシリアル化が&lt;a href=&quot;free&quot;&gt;sqlite3_malloc64（）&lt;/a&gt;から取得したメモリに保持され、SQLiteがこのメモリの所有権を取得し、使用を終了すると自動的に解放することを意味します。このフラグがない場合、呼び出し元は、動的に割り当てられたメモリを解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="fffd4707786aad32f12960ea601bc8b62704db6b" translate="yes" xml:space="preserve">
          <source>The SQLITE_DESERIALIZE_READONLY flag means that the deserialized database should be treated as read-only.</source>
          <target state="translated">SQLITE_DESERIALIZE_READONLY フラグは、デシリアライズされたデータベースを読み取り専用として扱うべきであることを意味します。</target>
        </trans-unit>
        <trans-unit id="684cad9c07969122877d4a208d11cefd54e63c00" translate="yes" xml:space="preserve">
          <source>The SQLITE_DESERIALIZE_RESIZEABLE flag means that SQLite is allowed to grow the size of the database using calls to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_realloc64()&lt;/a&gt;. This flag should only be used if SQLITE_DESERIALIZE_FREEONCLOSE is also used. Without this flag, the deserialized database cannot increase in size beyond the number of bytes specified by the M parameter.</source>
          <target state="translated">SQLITE_DESERIALIZE_RESIZEABLEフラグは、SQLiteが&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_realloc64（）の&lt;/a&gt;呼び出しを使用してデータベースのサイズを拡大できることを意味します。このフラグは、SQLITE_DESERIALIZE_FREEONCLOSEも使用されている場合にのみ使用してください。このフラグがないと、デシリアライズされたデータベースのサイズを、Mパラメーターで指定されたバイト数を超えて増やすことはできません。</target>
        </trans-unit>
        <trans-unit id="80121a4afb11422b1c8bfdaf5caf6ca8a41c2e89" translate="yes" xml:space="preserve">
          <source>The SQLITE_DESERIALIZE_RESIZEABLE flag means that SQLite is allowed to grow the size of the database using calls to &lt;a href=&quot;free&quot;&gt;sqlite3_realloc64()&lt;/a&gt;. This flag should only be used if SQLITE_DESERIALIZE_FREEONCLOSE is also used. Without this flag, the deserialized database cannot increase in size beyond the number of bytes specified by the M parameter.</source>
          <target state="translated">SQLITE_DESERIALIZE_RESIZEABLEフラグは、SQLiteが&lt;a href=&quot;free&quot;&gt;sqlite3_realloc64（）の&lt;/a&gt;呼び出しを使用してデータベースのサイズを拡大できることを意味します。このフラグは、SQLITE_DESERIALIZE_FREEONCLOSEも使用されている場合にのみ使用してください。このフラグがないと、デシリアライズされたデータベースのサイズを、Mパラメーターで指定されたバイト数を超えて増やすことはできません。</target>
        </trans-unit>
        <trans-unit id="19352bde546497cb9c8447fd1d7dfafe9e2fb83c" translate="yes" xml:space="preserve">
          <source>The SQLITE_DETERMINISTIC flag means that the new function always gives the same output when the input parameters are the same. The &lt;a href=&quot;../lang_corefunc#abs&quot;&gt;abs() function&lt;/a&gt; is deterministic, for example, but &lt;a href=&quot;../lang_corefunc#randomblob&quot;&gt;randomblob()&lt;/a&gt; is not. Functions must be deterministic in order to be used in certain contexts such as with the WHERE clause of &lt;a href=&quot;../partialindex&quot;&gt;partial indexes&lt;/a&gt; or in &lt;a href=&quot;../gencol&quot;&gt;generated columns&lt;/a&gt;. SQLite might also optimize deterministic functions by factoring them out of inner loops.</source>
          <target state="translated">SQLITE_DETERMINISTICフラグは、入力パラメーターが同じ場合、新しい関数が常に同じ出力を提供することを意味します。&lt;a href=&quot;../lang_corefunc#abs&quot;&gt;ABS（）関数は&lt;/a&gt;、例えば、決定論的であるが、&lt;a href=&quot;../lang_corefunc#randomblob&quot;&gt;randomblob（）は&lt;/a&gt;ありません。関数は、&lt;a href=&quot;../partialindex&quot;&gt;部分インデックスの&lt;/a&gt;WHERE句や&lt;a href=&quot;../gencol&quot;&gt;生成された列&lt;/a&gt;など、特定のコンテキストで使用するために決定論的である必要があります。 SQLiteは、決定論的関数を内部ループから除外することにより、それらを最適化する場合もあります。</target>
        </trans-unit>
        <trans-unit id="a94dcf703cfcb3aebcafb1d5511712f18433c467" translate="yes" xml:space="preserve">
          <source>The SQLITE_DETERMINISTIC flag means that the new function always gives the same output when the input parameters are the same. The &lt;a href=&quot;lang_corefunc#abs&quot;&gt;abs() function&lt;/a&gt; is deterministic, for example, but &lt;a href=&quot;lang_corefunc#randomblob&quot;&gt;randomblob()&lt;/a&gt; is not. Functions must be deterministic in order to be used in certain contexts such as with the WHERE clause of &lt;a href=&quot;partialindex&quot;&gt;partial indexes&lt;/a&gt; or in &lt;a href=&quot;gencol&quot;&gt;generated columns&lt;/a&gt;. SQLite might also optimize deterministic functions by factoring them out of inner loops.</source>
          <target state="translated">SQLITE_DETERMINISTICフラグは、入力パラメーターが同じ場合、新しい関数が常に同じ出力を提供することを意味します。&lt;a href=&quot;lang_corefunc#abs&quot;&gt;ABS（）関数は&lt;/a&gt;、例えば、決定論的であるが、&lt;a href=&quot;lang_corefunc#randomblob&quot;&gt;randomblob（）は&lt;/a&gt;ありません。関数は、&lt;a href=&quot;partialindex&quot;&gt;部分インデックスの&lt;/a&gt;WHERE句や&lt;a href=&quot;gencol&quot;&gt;生成された列&lt;/a&gt;など、特定のコンテキストで使用するために決定論的である必要があります。 SQLiteは、決定論的関数を内部ループから除外することにより、それらを最適化する場合もあります。</target>
        </trans-unit>
        <trans-unit id="a817ebcb8adde635efe8cf6f019a45cbccc77452" translate="yes" xml:space="preserve">
          <source>The SQLITE_DETERMINISTIC flag means that the new function will always maps the same inputs into the same output. The abs() function is deterministic, for example, but randomblob() is not.</source>
          <target state="translated">SQLITE_DETERMINISTIC フラグは、新しい関数が常に同じ入力を同じ出力にマッピングすることを意味します。例えば abs()関数は決定論的ですが、randlob()はそうではありません。</target>
        </trans-unit>
        <trans-unit id="e7795e7dba3d35d408494ba100326feff56ac8bd" translate="yes" xml:space="preserve">
          <source>The SQLITE_DIRECTONLY flag means that the function may only be invoked from top-level SQL, and cannot be used in VIEWs or TRIGGERs nor in schema structures such as &lt;a href=&quot;../lang_createtable#ckconst&quot;&gt;CHECK constraints&lt;/a&gt;, &lt;a href=&quot;../lang_createtable#dfltval&quot;&gt;DEFAULT clauses&lt;/a&gt;, &lt;a href=&quot;../expridx&quot;&gt;expression indexes&lt;/a&gt;, &lt;a href=&quot;../partialindex&quot;&gt;partial indexes&lt;/a&gt;, or &lt;a href=&quot;../gencol&quot;&gt;generated columns&lt;/a&gt;. The SQLITE_DIRECTONLY flags is a security feature which is recommended for all &lt;a href=&quot;../appfunc&quot;&gt;application-defined SQL functions&lt;/a&gt;, and especially for functions that have side-effects or that could potentially leak sensitive information.</source>
          <target state="translated">SQLITE_DIRECTONLYフラグは、関数がトップレベルSQLからのみ呼び出すことができ、VIEWまたはTRIGGERでも、&lt;a href=&quot;../lang_createtable#ckconst&quot;&gt;CHECK制約&lt;/a&gt;、&lt;a href=&quot;../lang_createtable#dfltval&quot;&gt;DEFAULT句&lt;/a&gt;、&lt;a href=&quot;../expridx&quot;&gt;式インデックス&lt;/a&gt;、&lt;a href=&quot;../partialindex&quot;&gt;部分インデックス&lt;/a&gt;、または&lt;a href=&quot;../gencol&quot;&gt;生成された列&lt;/a&gt;などのスキーマ構造でも使用できないことを意味します。 SQLITE_DIRECTONLYフラグは、すべての&lt;a href=&quot;../appfunc&quot;&gt;アプリケーション定義SQL関数&lt;/a&gt;、特に副作用がある関数や機密情報が漏洩する可能性のある関数に推奨されるセキュリティ機能です。</target>
        </trans-unit>
        <trans-unit id="fbd921523501ad6603970193474c7602b6fd6ef1" translate="yes" xml:space="preserve">
          <source>The SQLITE_DIRECTONLY flag means that the function may only be invoked from top-level SQL, and cannot be used in VIEWs or TRIGGERs nor in schema structures such as &lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK constraints&lt;/a&gt;, &lt;a href=&quot;lang_createtable#dfltval&quot;&gt;DEFAULT clauses&lt;/a&gt;, &lt;a href=&quot;expridx&quot;&gt;expression indexes&lt;/a&gt;, &lt;a href=&quot;partialindex&quot;&gt;partial indexes&lt;/a&gt;, or &lt;a href=&quot;gencol&quot;&gt;generated columns&lt;/a&gt;. The SQLITE_DIRECTONLY flags is a security feature which is recommended for all &lt;a href=&quot;appfunc&quot;&gt;application-defined SQL functions&lt;/a&gt;, and especially for functions that have side-effects or that could potentially leak sensitive information.</source>
          <target state="translated">SQLITE_DIRECTONLYフラグは、関数がトップレベルSQLからのみ呼び出すことができ、VIEWまたはTRIGGERでも、&lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK制約&lt;/a&gt;、&lt;a href=&quot;lang_createtable#dfltval&quot;&gt;DEFAULT句&lt;/a&gt;、&lt;a href=&quot;expridx&quot;&gt;式インデックス&lt;/a&gt;、&lt;a href=&quot;partialindex&quot;&gt;部分インデックス&lt;/a&gt;、または&lt;a href=&quot;gencol&quot;&gt;生成された列&lt;/a&gt;などのスキーマ構造でも使用できないことを意味します。 SQLITE_DIRECTONLYフラグは、すべての&lt;a href=&quot;appfunc&quot;&gt;アプリケーション定義SQL関数&lt;/a&gt;、特に副作用がある関数や機密情報が漏洩する可能性のある関数に推奨されるセキュリティ機能です。</target>
        </trans-unit>
        <trans-unit id="8bfa7a3aa99efd025281e40fa4911eb7511574c2" translate="yes" xml:space="preserve">
          <source>The SQLITE_DIRECTONLY flag means that the function may only be invoked from top-level SQL, and cannot be used in VIEWs or TRIGGERs. This is a security feature which is recommended for all &lt;a href=&quot;#sqlite3_create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; that have side-effects. This flag prevents an attacker from adding triggers and views to a schema then tricking a high-privilege application into causing unintended side-effects while performing ordinary queries.</source>
          <target state="translated">SQLITE_DIRECTONLYフラグは、関数がトップレベルのSQLからのみ呼び出され、VIEWまたはTRIGGERで使用できないことを意味します。これは、副作用があるすべての&lt;a href=&quot;#sqlite3_create_function&quot;&gt;アプリケーション定義のSQL関数に&lt;/a&gt;推奨されるセキュリティ機能です。このフラグは、攻撃者がトリガーとビューをスキーマに追加し、通常のクエリの実行中に、特権の高いアプリケーションをだまして意図しない副作用を引き起こすのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="ad5270c7d2917dccd93322da5fb7248f9aa949c0" translate="yes" xml:space="preserve">
          <source>The SQLITE_DIRECTONLY flag means that the function may only be invoked from top-level SQL, and cannot be used in VIEWs or TRIGGERs. This is a security feature which is recommended for all &lt;a href=&quot;create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; that have side-effects. This flag prevents an attacker from adding triggers and views to a schema then tricking a high-privilege application into causing unintended side-effects while performing ordinary queries.</source>
          <target state="translated">SQLITE_DIRECTONLYフラグは、関数がトップレベルのSQLからのみ呼び出され、VIEWまたはTRIGGERで使用できないことを意味します。これは、副作用があるすべての&lt;a href=&quot;create_function&quot;&gt;アプリケーション定義のSQL関数に&lt;/a&gt;推奨されるセキュリティ機能です。このフラグは、攻撃者がトリガーとビューをスキーマに追加し、通常のクエリの実行中に、特権の高いアプリケーションをだまして意図しない副作用を引き起こすのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="ec40aca0df374578f31a734ba1f44f72205f5695" translate="yes" xml:space="preserve">
          <source>The SQLITE_DONE result code indicates that an operation has completed. The SQLITE_DONE result code is most commonly seen as a return value from &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; indicating that the SQL statement has run to completion. But SQLITE_DONE can also be returned by other multi-step interfaces such as &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt;.</source>
          <target state="translated">SQLITE_DONE結果コードは、操作が完了したことを示します。SQLITE_DONE結果コードは、SQLステートメントが&lt;a href=&quot;c3ref/step&quot;&gt;最後&lt;/a&gt;まで実行されたことを示すsqlite3_step（）からの戻り値として最もよく見られます。ただし、SQLITE_DONEは、&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step（）&lt;/a&gt;などの他のマルチステップインターフェースからも返されます。</target>
        </trans-unit>
        <trans-unit id="bb790f9dfaacb5c859298fcd4607429394630f86" translate="yes" xml:space="preserve">
          <source>The SQLITE_EMPTY result code is not currently used.</source>
          <target state="translated">SQLITE_EMPTY 結果コードは現在使用されていません。</target>
        </trans-unit>
        <trans-unit id="ae12a93b43b3b42e7d80f8bbf0372c74ffcd4aa7" translate="yes" xml:space="preserve">
          <source>The SQLITE_ENABLE_SELECTTRACE and SQLITE_ENABLE_WHERETRACE options are not documented in &lt;a href=&quot;compile&quot;&gt;compile-time options&lt;/a&gt; document because they are not officially supported. What they do is activate the &quot;.selecttrace&quot; and &quot;.wheretrace&quot; dot-commands in the command-line shell, which provide low-level tracing output for the logic that generates code for SELECT statements and WHERE clauses, respectively.</source>
          <target state="translated">SQLITE_ENABLE_SELECTTRACEおよびSQLITE_ENABLE_WHERETRACEオプションは、正式にサポートされていないため、&lt;a href=&quot;compile&quot;&gt;コンパイル時オプション&lt;/a&gt;ドキュメントに記載されていません。それらが行うことは、コマンドラインシェルの「.selecttrace」および「.wheretrace」ドットコマンドをアクティブ化することで、それぞれSELECTステートメントとWHERE句のコードを生成するロジックに低レベルのトレース出力を提供します。</target>
        </trans-unit>
        <trans-unit id="270e8d29bbaf2c173c8af4cf652d5609825ae163" translate="yes" xml:space="preserve">
          <source>The SQLITE_ERROR result code is a generic error code that is used when no other more specific error code is available.</source>
          <target state="translated">SQLITE_ERROR の結果コードは、より具体的なエラーコードがない場合に使用される汎用的なエラーコードです。</target>
        </trans-unit>
        <trans-unit id="98c271c04ddb7b453a82bc99e0c9a2f05fc01521" translate="yes" xml:space="preserve">
          <source>The SQLITE_ERROR_MISSING_COLLSEQ result code means that an SQL statement could not be prepared because a collating sequence named in that SQL statement could not be located.</source>
          <target state="translated">SQLITE_ERROR_MISSING_COLLSEQ の結果コードは、その SQL 文の中で名前が付けられた照合順序が見つからなかったために SQL 文を準備できなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="ba8f59027948d8336d219d332d3588711710c0d1" translate="yes" xml:space="preserve">
          <source>The SQLITE_ERROR_RETRY is used internally to provoke &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; (or one of its sibling routines for creating prepared statements) to try again to prepare a statement that failed with an error on the previous attempt.</source>
          <target state="translated">SQLITE_ERROR_RETRYは内部で使用され、&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;（または準備されたステートメントを作成するための兄弟ルーチンの1つ）を呼び出して、前の試行でエラーが発生して失敗したステートメントの準備を再試行します。</target>
        </trans-unit>
        <trans-unit id="ccb2dd2db61b6baf0b7083d2230974437265ca99" translate="yes" xml:space="preserve">
          <source>The SQLITE_ERROR_SNAPSHOT result code might be returned when attempting to start a read transaction on an historical version of the database by using the &lt;a href=&quot;c3ref/snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface. If the historical snapshot is no longer available, then the read transaction will fail with the SQLITE_ERROR_SNAPSHOT. This error code is only possible if SQLite is compiled with &lt;a href=&quot;compile#enable_snapshot&quot;&gt;-DSQLITE_ENABLE_SNAPSHOT&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/snapshot_open&quot;&gt;sqlite3_snapshot_open（）&lt;/a&gt;インターフェースを使用して、データベースの履歴バージョンで読み取りトランザクションを開始しようとすると、SQLITE_ERROR_SNAPSHOT結果コードが返される場合があります。履歴スナップショットが利用できなくなった場合、読み取りトランザクションはSQLITE_ERROR_SNAPSHOTで失敗します。このエラーコードは、SQLiteが&lt;a href=&quot;compile#enable_snapshot&quot;&gt;-DSQLITE_ENABLE_SNAPSHOT&lt;/a&gt;でコンパイルされている場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="4cbfe2b69087f0c646cf57766f8596a36d37fac1" translate="yes" xml:space="preserve">
          <source>The SQLITE_EXTRA_DURABLE compile-time option that used to cause the default &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous&lt;/a&gt; setting to be EXTRA, rather than FULL. This option is no longer supported. Use &lt;a href=&quot;compile#default_synchronous&quot;&gt;SQLITE_DEFAULT_SYNCHRONOUS=3&lt;/a&gt; instead.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA同期&lt;/a&gt;設定をFULLではなくEXTRAにするために使用されていたSQLITE_EXTRA_DURABLEコンパイル時オプション。このオプションはサポートされなくなりました。代わりに&lt;a href=&quot;compile#default_synchronous&quot;&gt;SQLITE_DEFAULT_SYNCHRONOUS = 3を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="b13fb7c225046a481ec4f5c3de65895a35d5a534" translate="yes" xml:space="preserve">
          <source>The SQLITE_FORMAT error code is not currently used by SQLite.</source>
          <target state="translated">SQLITE_FORMATエラーコードは、現在のところSQLiteでは使用されていません。</target>
        </trans-unit>
        <trans-unit id="26b0edcf7878a4f55c879fd1aba1c1f540342aa6" translate="yes" xml:space="preserve">
          <source>The SQLITE_FULL result code indicates that a write could not complete because the disk is full. Note that this error can occur when trying to write information into the main database file, or it can also occur when writing into &lt;a href=&quot;tempfiles&quot;&gt;temporary disk files&lt;/a&gt;.</source>
          <target state="translated">SQLITE_FULL結果コードは、ディスクがいっぱいのため、書き込みを完了できなかったことを示します。このエラーは、メインデータベースファイルに情報を書き込もうとしたときに発生したり、&lt;a href=&quot;tempfiles&quot;&gt;一時ディスクファイル&lt;/a&gt;に書き込んだときに発生したりする場合があります。</target>
        </trans-unit>
        <trans-unit id="52c86e9943e29fd3d57282b842d9c3bedce88e03" translate="yes" xml:space="preserve">
          <source>The SQLITE_HISTORY environment variable, if it exists, specifies the name of the command-line editing history file</source>
          <target state="translated">環境変数 SQLITE_HISTORY が存在する場合は、コマンドライン編集履歴ファイルの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="e10c2e4fcb65972fbd71d50bdb5c4ac5d88e54e7" translate="yes" xml:space="preserve">
          <source>The SQLITE_INNOCUOUS flag means that the function is unlikely to cause problems even if misused. An innocuous function should have no side effects and should not depend on any values other than its input parameters. The &lt;a href=&quot;../lang_corefunc#abs&quot;&gt;abs() function&lt;/a&gt; is an example of an innocuous function. The &lt;a href=&quot;../lang_corefunc#load_extension&quot;&gt;load_extension() SQL function&lt;/a&gt; is not innocuous because of its side effects.</source>
          <target state="translated">SQLITE_INNOCUOUSフラグは、誤用された場合でも関数が問題を引き起こす可能性が低いことを意味します。無害な関数には副作用がなく、入力パラメーター以外の値に依存してはなりません。&lt;a href=&quot;../lang_corefunc#abs&quot;&gt;ABS（）関数は、&lt;/a&gt;無害な関数の一例です。&lt;a href=&quot;../lang_corefunc#load_extension&quot;&gt;load_extension（）SQL関数は&lt;/a&gt;、その副作用の無害ではありません。</target>
        </trans-unit>
        <trans-unit id="a3a2b2609c215ba1aae8c191414849f564b054dd" translate="yes" xml:space="preserve">
          <source>The SQLITE_INNOCUOUS flag means that the function is unlikely to cause problems even if misused. An innocuous function should have no side effects and should not depend on any values other than its input parameters. The &lt;a href=&quot;lang_corefunc#abs&quot;&gt;abs() function&lt;/a&gt; is an example of an innocuous function. The &lt;a href=&quot;lang_corefunc#load_extension&quot;&gt;load_extension() SQL function&lt;/a&gt; is not innocuous because of its side effects.</source>
          <target state="translated">SQLITE_INNOCUOUSフラグは、誤用された場合でも関数が問題を引き起こす可能性が低いことを意味します。無害な関数には副作用がなく、入力パラメーター以外の値に依存してはなりません。&lt;a href=&quot;lang_corefunc#abs&quot;&gt;ABS（）関数は、&lt;/a&gt;無害な関数の一例です。&lt;a href=&quot;lang_corefunc#load_extension&quot;&gt;load_extension（）SQL関数は&lt;/a&gt;、その副作用の無害ではありません。</target>
        </trans-unit>
        <trans-unit id="521e2762edbf8211c7cbb9d7bfb58da8a1f086c6" translate="yes" xml:space="preserve">
          <source>The SQLITE_INTERNAL result code indicates an internal malfunction. In a working version of SQLite, an application should never see this result code. If application does encounter this result code, it shows that there is a bug in the database engine.</source>
          <target state="translated">SQLITE_INTERNAL の結果コードは、内部の不具合を示しています。SQLite の動作するバージョンでは、アプリケーションはこの結果コードを決して見るべきではありません。アプリケーションがこの結果コードに遭遇した場合は、データベースエンジンにバグがあることを示しています。</target>
        </trans-unit>
        <trans-unit id="b38d579654b4f1182c07a8a6f5867deba9d19d28" translate="yes" xml:space="preserve">
          <source>The SQLITE_INTERRUPT result code indicates that an operation was interrupted by the &lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt()&lt;/a&gt; interface. See also: &lt;a href=&quot;rescode#abort&quot;&gt;SQLITE_ABORT&lt;/a&gt;</source>
          <target state="translated">SQLITE_INTERRUPT結果コードは、&lt;a href=&quot;c3ref/interrupt&quot;&gt;sqlite3_interrupt（）&lt;/a&gt;インターフェースによって操作が中断されたことを示します。参照：&lt;a href=&quot;rescode#abort&quot;&gt;SQLITE_ABORT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c1b9bcba49ffcf44baa9a43853834f3537e3646" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOCAP_ATOMIC property means that all writes of any size are atomic. The SQLITE_IOCAP_ATOMICnnn values mean that writes of blocks that are nnn bytes in size and are aligned to an address which is an integer multiple of nnn are atomic. The SQLITE_IOCAP_SAFE_APPEND value means that when data is appended to a file, the data is appended first then the size of the file is extended, never the other way around. The SQLITE_IOCAP_SEQUENTIAL property means that information is written to disk in the same order as calls to xWrite().</source>
          <target state="translated">SQLITE_IOCAP_ATOMIC プロパティは、任意のサイズのすべての書き込みがアトミックであることを意味します。SQLITE_IOCAP_ATOMICnnn の値は、サイズが nnn バイトで、nnn の整数倍のアドレスにアラインメントされたブロックの書き込みがアトミックであることを意味します。SQLITE_IOCAP_SAFE_APPEND の値は、データがファイルに追加されるとき、データが最初に追加されてからファイルのサイズが拡張されることを意味します。SQLITE_IOCAP_SEQUENTIAL プロパティは、情報が xWrite()の呼び出しと同じ順番でディスクに書き込まれることを意味します。</target>
        </trans-unit>
        <trans-unit id="6cfdb556dc4a2d2c3aee5156579c0505409a3242" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOCAP_ATOMIC property means that all writes of any size are atomic. The SQLITE_IOCAP_ATOMICnnn values mean that writes of blocks that are nnn bytes in size and are aligned to an address which is an integer multiple of nnn are atomic. The SQLITE_IOCAP_SAFE_APPEND value means that when data is appended to a file, the data is appended first then the size of the file is extended, never the other way around. The SQLITE_IOCAP_SEQUENTIAL property means that information is written to disk in the same order as calls to xWrite(). The SQLITE_IOCAP_POWERSAFE_OVERWRITE property means that after reboot following a crash or power loss, the only bytes in a file that were written at the application level might have changed and that adjacent bytes, even bytes within the same sector are guaranteed to be unchanged. The SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN flag indicates that a file cannot be deleted when open. The SQLITE_IOCAP_IMMUTABLE flag indicates that the file is on read-only media and cannot be changed even by processes with elevated privileges.</source>
          <target state="translated">SQLITE_IOCAP_ATOMIC プロパティは、任意のサイズのすべての書き込みがアトミックであることを意味します。SQLITE_IOCAP_ATOMICnnn の値は、サイズが nnn バイトで、nnn の整数倍のアドレスにアラインメントされたブロックの書き込みがアトミックであることを意味します。SQLITE_IOCAP_SAFE_APPEND の値は、データがファイルに追加されるとき、データが最初に追加されてからファイルのサイズが拡張されることを意味します。SQLITE_IOCAP_SEQUENTIAL プロパティは、情報が xWrite()の呼び出しと同じ順番でディスクに書き込まれることを意味します。SQLITE_IOCAP_POWERSAFE_OVERWRITE プロパティは、クラッシュや電源喪失後の再起動後、アプリケーションレベルで書き込まれたファイル内のバイトだけが変更されている可能性があり、隣接するバイト、たとえ同じセクタ内のバイトであっても変更されないことが保証されていることを意味します。SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN フラグは、オープン時にファイルを削除できないことを示します。SQLITE_IOCAP_IMMUTABLE フラグは、ファイルが読み取り専用メディア上にあり、昇格した権限を持つプロセスであっても変更できないことを示します。</target>
        </trans-unit>
        <trans-unit id="d6e9041084560f5cee1cd0f7e8b2669a77b404b5" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOCAP_BATCH_ATOMIC property means that the underlying filesystem supports doing multiple write operations atomically when those write operations are bracketed by &lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; and &lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;.</source>
          <target state="translated">SQLITE_IOCAP_BATCH_ATOMICプロパティは、それらの書き込み操作が&lt;a href=&quot;#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;および&lt;a href=&quot;#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;によってブラケット化されている場合、基礎となるファイルシステムが複数の書き込み操作のアトミックな実行をサポートすることを意味します。</target>
        </trans-unit>
        <trans-unit id="7cb11acb1c9a7effbe4c566606f90f111aeaa51c" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOCAP_BATCH_ATOMIC property means that the underlying filesystem supports doing multiple write operations atomically when those write operations are bracketed by &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt; and &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;.</source>
          <target state="translated">SQLITE_IOCAP_BATCH_ATOMICプロパティは、それらの書き込み操作が&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlbeginatomicwrite&quot;&gt;SQLITE_FCNTL_BEGIN_ATOMIC_WRITE&lt;/a&gt;および&lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlcommitatomicwrite&quot;&gt;SQLITE_FCNTL_COMMIT_ATOMIC_WRITE&lt;/a&gt;によってブラケット化されている場合、基礎となるファイルシステムが複数の書き込み操作のアトミックな実行をサポートすることを意味します。</target>
        </trans-unit>
        <trans-unit id="abba910b15531d36f82588d451d0981d7b760afc" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR result code says that the operation could not finish because the operating system reported an I/O error.</source>
          <target state="translated">SQLITE_IOERR の結果コードによると、オペレーティング・システムが I/O エラーを報告したため、操作を終了できませんでした。</target>
        </trans-unit>
        <trans-unit id="6217042802c9b2c3161cf544abc5162c5330d1de" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_ACCESS error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xAccess method on the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_IOERR_ACCESSエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にxAccessメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="e2437ab6f22990f68cc3c6b6ab11345e11bf39ab" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_ACCESS error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xClose method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_IOERR_ACCESSエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にxCloseメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="d2cdfe432186a7333ec15fb6eebac01e4168d421" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_BLOCKED error code is no longer used.</source>
          <target state="translated">SQLITE_IOERR_BLOCKED エラーコードは使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="d52b5d2e176049b701cd38566a1ec537e178a582" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_CHECKRESERVEDLOCK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xCheckReservedLock method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_IOERR_CHECKRESERVEDLOCKエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にxCheckReservedLockメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0ad717c7b1ad0bbb8f95440fa25c68effa605b2e" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_CONVPATH error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; used only by Cygwin &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; and indicating that the cygwin_conv_path() system call failed. See also: &lt;a href=&quot;rescode#cantopen_convpath&quot;&gt;SQLITE_CANTOPEN_CONVPATH&lt;/a&gt;</source>
          <target state="translated">SQLITE_IOERR_CONVPATHエラーコードは、Cygwin &lt;a href=&quot;vfs&quot;&gt;VFSで&lt;/a&gt;のみ使用され、cygwin_conv_path（）システムコールが失敗したことを示す&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERRの&lt;/a&gt;&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;です。参照：&lt;a href=&quot;rescode#cantopen_convpath&quot;&gt;SQLITE_CANTOPEN_CONVPATH&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1351f2d6333fe014b3d2efb02bea78fd2458ea8" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_DELETE_NOENT error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating that the xDelete method on the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object failed because the file being deleted does not exist.</source>
          <target state="translated">SQLITE_IOERR_DELETE_NOENTエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にxDelete法ことを示す&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfsが&lt;/a&gt;削除されたファイルが存在しないために失敗したオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3d4ef8736b02588e9ecd702311e3b92f76c71f42" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_DIR_CLOSE error code is no longer used.</source>
          <target state="translated">SQLITE_IOERR_DIR_CLOSE エラーコードが使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="257039837e1e28ae4885f94438deef37c72bcb03" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_DIR_FSYNC error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer while trying to invoke fsync() on a directory. The unix &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; attempts to fsync() directories after creating or deleting certain files to ensure that those files will still appear in the filesystem following a power loss or system crash. This error code indicates a problem attempting to perform that fsync().</source>
          <target state="translated">SQLITE_IOERR_DIR_FSYNCエラーコードは、SQLITE_IOERRの&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコードであり&lt;/a&gt;、&lt;a href=&quot;rescode#ioerr&quot;&gt;ディレクトリでfsync&lt;/a&gt;（）を呼び出そうとしたときに&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;レイヤーでI / Oエラーが発生したことを示します。 unix &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;は、特定のファイルを作成または削除した後にfsync（）ディレクトリを試行して、停電またはシステムクラッシュ後もそれらのファイルがファイルシステムに引き続き表示されるようにします。このエラーコードは、そのfsync（）を実行しようとしたときに問題が発生したことを示しています。</target>
        </trans-unit>
        <trans-unit id="703a40890c81baa50195428ead914670c8029bb4" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_FSTAT error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer while trying to invoke fstat() (or the equivalent) on a file in order to determine information such as the file size or access permissions.</source>
          <target state="translated">SQLITE_IOERR_FSTATエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のため&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にI / Oエラーを示す&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt;ようなファイルサイズやアクセス権限などの情報を決定するためにファイルを呼び出しFSTAT（）（または同等品）に試みている間層。</target>
        </trans-unit>
        <trans-unit id="4411956ede5824f9653b6f7288932d4d59a1407a" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_FSYNC error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer while trying to flush previously written content out of OS and/or disk-control buffers and into persistent storage. In other words, this code indicates a problem with the fsync() system call in unix or the FlushFileBuffers() system call in windows.</source>
          <target state="translated">SQLITE_IOERR_FSYNCエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のため&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にI / Oエラーを示す&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt; OS及び/又はディスク制御バッファから永続的なストレージに以前に書き込まれたコンテンツをフラッシュしようとしたときの層。つまり、このコードは、UNIXのfsync（）システムコールまたはWindowsのFlushFileBuffers（）システムコールに問題があることを示しています。</target>
        </trans-unit>
        <trans-unit id="1a80a6afbc34a7c330788ef9f803a0b5991e12c1" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_GETTEMPPATH error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating that the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; is unable to determine a suitable directory in which to place temporary files.</source>
          <target state="translated">SQLITE_IOERR_GETTEMPPATHエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;ことを示す&lt;a href=&quot;vfs&quot;&gt;VFSが&lt;/a&gt;一時ファイルを配置する、適切なディレクトリを決定することができません。</target>
        </trans-unit>
        <trans-unit id="cb09e15d8dd94c07c078d48b512a0e609b4a1ec7" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_LOCK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the advisory file locking logic. Usually an SQLITE_IOERR_LOCK error indicates a problem obtaining a &lt;a href=&quot;lockingv3#pending_lock&quot;&gt;PENDING lock&lt;/a&gt;. However it can also indicate miscellaneous locking errors on some of the specialized &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt; used on Macs.</source>
          <target state="translated">SQLITE_IOERR_LOCKエラーコードは、アドバイザリファイルロックロジックのI / Oエラーを示す&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERRの&lt;/a&gt;&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;です。通常、SQLITE_IOERR_LOCKエラーは、保留中の&lt;a href=&quot;lockingv3#pending_lock&quot;&gt;ロックの&lt;/a&gt;取得に問題があることを示します。ただし、Macで使用されている一部の特殊な&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;でのその他のロックエラーを示している場合もあります。</target>
        </trans-unit>
        <trans-unit id="928b9fb773e51d9b98d4eea6c5ad41e7a120edb9" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_MMAP error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xFetch or xUnfetch methods on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object while trying to map or unmap part of the database file into the process address space.</source>
          <target state="translated">SQLITE_IOERR_MMAPエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERRが&lt;/a&gt;オンxFetch又はxUnfetchメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;プロセスのアドレス空間にデータベース・ファイルの一部をマップまたはマップ解除しようとしたときのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f2e769d752ed0575abbf0db74e042a1d936197ca" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_NOMEM error code is sometimes returned by the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer to indicate that an operation could not be completed due to the inability to allocate sufficient memory. This error code is normally converted into &lt;a href=&quot;rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; by the higher layers of SQLite before being returned to the application.</source>
          <target state="translated">SQLITE_IOERR_NOMEMエラーコードは、十分なメモリを割り当てることができないために操作を完了できなかったことを示すために、&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;レイヤーによって時々返されます。このエラーコードは通常、アプリケーションに返される前に、SQLiteの上位層によって&lt;a href=&quot;rescode#nomem&quot;&gt;SQLITE_NOMEMに&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="8545169dd7924f6c6604c36309fb09b48638942a" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_READ error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer while trying to read from a file on disk. This error might result from a hardware malfunction or because a filesystem came unmounted while the file was open.</source>
          <target state="translated">SQLITE_IOERR_READエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のため&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にI / Oエラーを示す&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt;ディスク上のファイルから読み取るしようとしたときの層。このエラーは、ハードウェアの誤動作、またはファイルが開いている間にファイルシステムがマウント解除されたことが原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="1b973a2eb159aa040eee4609af08e2a1feaa8688" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_SEEK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xRead or xWrite methods on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object while trying to seek a file descriptor to the beginning point of the file where the read or write is to occur.</source>
          <target state="translated">SQLITE_IOERR_SEEKエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にXREAD又はxWriteメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt;読み取りまたは書き込みが発生するファイルの開始点までのファイル記述子をシークしようとしたときにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="105abf471dd5b51825236d9c7cd0fbb3eb6cb7cd" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_SHMLOCK error code is no longer used.</source>
          <target state="translated">SQLITE_IOERR_SHMLOCK エラーコードが使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="19454e66c26708e9c7b0cf7de58d9fc407f5f14b" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_SHMMAP error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xShmMap method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object while trying to map a shared memory segment into the process address space.</source>
          <target state="translated">SQLITE_IOERR_SHMMAPエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERRが&lt;/a&gt;上xShmMapメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;プロセスのアドレス空間に共有メモリセグメントをマッピングしようとしたときにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="2dc7d56b93948bb563eb131a1d4f4001df7a785f" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_SHMOPEN error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xShmMap method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object while trying to open a new shared memory segment.</source>
          <target state="translated">SQLITE_IOERR_SHMOPENエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERRが&lt;/a&gt;上xShmMapメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;新たな共有メモリセグメントを開くしようとしているときにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="38683c7c8ec002f5c2268623f613c65a832d0744" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_SHMSIZE error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within the xShmMap method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object while trying to enlarge a &lt;a href=&quot;walformat#shm&quot;&gt;&quot;shm&quot; file&lt;/a&gt; as part of &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; transaction processing. This error may indicate that the underlying filesystem volume is out of space.</source>
          <target state="translated">SQLITE_IOERR_SHMSIZEエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERRが&lt;/a&gt;上xShmMapメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsを&lt;/a&gt;拡大しようとしたときにオブジェクト&lt;a href=&quot;walformat#shm&quot;&gt;「SHM」ファイル&lt;/a&gt;の一部として&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;トランザクション処理。このエラーは、基礎となるファイルシステムボリュームの容量が不足していることを示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="9742197ad61d509380008ae49be67afbc4a5ec72" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_SHORT_READ error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating that a read attempt in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer was unable to obtain as many bytes as was requested. This might be due to a truncated file.</source>
          <target state="translated">SQLITE_IOERR_SHORT_READエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;の読み出しの試みていることを示す&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt;層が要求されたようなバイト数として得ることができませんでした。これは、切り捨てられたファイルが原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="11a04eeb47de957ef3978cba210956d9cb5d652c" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_TRUNCATE error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer while trying to truncate a file to a smaller size.</source>
          <target state="translated">SQLITE_IOERR_TRUNCATEエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のため&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にI / Oエラーを示す&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt;小さいサイズにファイルを切り捨てるしようとしたときの層。</target>
        </trans-unit>
        <trans-unit id="fea43ead41e3ee8f14dc4f738a5d86af22fa9867" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_UNLOCK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within xDelete method on the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_IOERR_UNLOCKエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にxDeleteメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0b74fa52836b69d8f9666b0cd822fdd7307145f4" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_UNLOCK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within xLock method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object while trying to obtain a read lock.</source>
          <target state="translated">SQLITE_IOERR_UNLOCKエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にXLOCKメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt;読み取りロックを取得しようとしているときにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="c346b35d66f482df6af0e3e742d33c4546a4dc99" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_UNLOCK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error within xUnlock method on the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_IOERR_UNLOCKエラーコードである&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にxUnlockメソッド内でI / Oエラーを示す&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methodsの&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7f8d955a87bc68c4a0c5a3d4a1efee03acc84572" translate="yes" xml:space="preserve">
          <source>The SQLITE_IOERR_WRITE error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; indicating an I/O error in the &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; layer while trying to write into a file on disk. This error might result from a hardware malfunction or because a filesystem came unmounted while the file was open. This error should not occur if the filesystem is full as there is a separate error code (SQLITE_FULL) for that purpose.</source>
          <target state="translated">SQLITE_IOERR_WRITEエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のため&lt;a href=&quot;rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;にI / Oエラーを示す&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt;ディスク上のファイルに書き込もうとしながら、層。このエラーは、ハードウェアの誤動作、またはファイルが開いている間にファイルシステムがマウント解除されたことが原因である可能性があります。この目的のために別のエラーコード（SQLITE_FULL）があるため、ファイルシステムがいっぱいの場合、このエラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="81a8e9c53d139815a64f5839604fdd22fadaa0e7" translate="yes" xml:space="preserve">
          <source>The SQLITE_LOCKED result code differs from &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; in that SQLITE_LOCKED indicates a conflict on the same &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; (or on a connection with a &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt;) whereas &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; indicates a conflict with a different database connection, probably in a different process.</source>
          <target state="translated">SQLITE_LOCKEDの結果コードは&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;とは異なります。SQLITE_LOCKEDは同じ&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;（または&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;との接続）での競合を示し、&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;は異なるデータベース接続での競合（おそらく別のプロセス）を示します。</target>
        </trans-unit>
        <trans-unit id="a782dd7cfb6d09bfdc0225cdd7b256e70fd078f6" translate="yes" xml:space="preserve">
          <source>The SQLITE_LOCKED result code indicates that a write operation could not continue because of a conflict within the same &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; or a conflict with a different database connection that uses a &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt;.</source>
          <target state="translated">SQLITE_LOCKED結果コードは、同じ&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;内の競合、または&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;を使用する別のデータベース接続との競合が原因で、書き込み操作を続行できなかったことを示しています。</target>
        </trans-unit>
        <trans-unit id="82a5261f187f8bb18f86e6b8f8f93ccb09c0a9f0" translate="yes" xml:space="preserve">
          <source>The SQLITE_LOCKED_SHARECACHE error code works very much like the &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; error code except that SQLITE_LOCKED_SHARECACHE is for separate database connections that share a cache whereas SQLITE_BUSY is for the much more common case of separate database connections that do not share the same cache. Also, the &lt;a href=&quot;c3ref/busy_handler&quot;&gt;sqlite3_busy_handler()&lt;/a&gt; and &lt;a href=&quot;c3ref/busy_timeout&quot;&gt;sqlite3_busy_timeout()&lt;/a&gt; interfaces do not help in resolving SQLITE_LOCKED_SHAREDCACHE conflicts.</source>
          <target state="translated">SQLITE_LOCKED_SHARECACHEは、&lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;エラーコードと非常によく似ていますが、SQLITE_LOCKED_SHARECACHEは、キャッシュを共有する個別のデータベース接続用であり、SQLITE_BUSYは、同じキャッシュを共有しない個別のデータベース接続のより一般的なケース用です。また、&lt;a href=&quot;c3ref/busy_handler&quot;&gt;sqlite3_busy_handler（）&lt;/a&gt;および&lt;a href=&quot;c3ref/busy_timeout&quot;&gt;sqlite3_busy_timeout（）&lt;/a&gt;インターフェースは、SQLITE_LOCKED_SHAREDCACHEの競合の解決に役立ちません。</target>
        </trans-unit>
        <trans-unit id="43736bf56a426c4b58c2bec90f4d48ac9099897c" translate="yes" xml:space="preserve">
          <source>The SQLITE_LOCKED_SHAREDCACHE error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt; indicating that the locking conflict has occurred due to contention with a different &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; that happens to hold a &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; with the database connection to which the error was returned. For example, if the other database connection is holding an &lt;a href=&quot;lockingv3#excl_lock&quot;&gt;exclusive lock&lt;/a&gt; on the database, then the database connection that receives this error will be unable to read or write any part of the database file unless it has the &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;read_uncommitted pragma&lt;/a&gt; enabled.</source>
          <target state="translated">SQLITE_LOCKED_SHAREDCACHEエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;ロック競合が異なるとの競合が原因で発生したことを示す&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;を保持するために起こる&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュ&lt;/a&gt;エラーが返されたのデータベース接続とします。たとえば、他のデータベース接続がデータベースの&lt;a href=&quot;lockingv3#excl_lock&quot;&gt;排他ロック&lt;/a&gt;を保持している場合、このエラーを受け取ったデータベース接続は、&lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;read_uncommittedプラグマが&lt;/a&gt;有効になっていない限り、データベースファイルの一部を読み書きできません。</target>
        </trans-unit>
        <trans-unit id="3cda10b684d70e57b826f0fa4c4df09ccba017aa" translate="yes" xml:space="preserve">
          <source>The SQLITE_LOCKED_VTAB result code is not used by the SQLite core, but it is available for use by extensions. Virtual table implementations can return this result code to indicate that they cannot complete the current operation because of locks held by other threads or processes.</source>
          <target state="translated">SQLITE_LOCKED_VTAB 結果コードは SQLite コアでは使用されませんが、拡張機能では使用可能です。仮想テーブルの実装はこの結果コードを返すことで、他のスレッドやプロセスがロックを保持しているために現在の操作を完了できないことを示すことができます。</target>
        </trans-unit>
        <trans-unit id="e51cbf2f4ccfc41ba0ad01c890bead2935bfa934" translate="yes" xml:space="preserve">
          <source>The SQLITE_LOCK_EXCLUSIVE lock must be held by a connection that wants to transition into our out of WAL mode. Transitioning into WAL mode is, therefore, just like any other write transaction, since every write transaction in rollback mode requires the SQLITE_LOCK_EXCLUSIVE lock. If the database file is already in WAL mode (hence if the desire it to change it back into rollback mode) and if there are two or more connections to the database, then each of these connections will be holding an SQLITE_LOCK_SHARED lock. That means that the SQLITE_LOCK_EXCLUSIVE cannot be obtained, and the transition out of WAL mode will not be allowed. This prevents one connection from deleting WAL mode out from under another. It also means that the only way to move a database from WAL mode into rollback mode is to close all but one connection to the database.</source>
          <target state="translated">SQLITE_LOCK_EXCLUSIVE ロックは、WAL モードからの移行を希望する接続で保持する必要があります。WALモードへの移行は、ロールバックモードのすべての書き込みトランザクションにSQLITE_LOCK_EXCLUSIVEロックが必要なので、他の書き込みトランザクションと同じように行うことができます。データベースファイルがすでにWALモードになっていて(ロールバックモードに戻したい場合)、データベースへの接続が2つ以上ある場合、それぞれの接続はSQLITE_LOCK_SHAREDロックを保持していることになります。つまり、SQLITE_LOCK_EXCLUSIVEを取得することができず、WALモードからの移行ができなくなります。これにより、ある接続が別の接続の下からWALモードを削除することができなくなります。また、データベースをWALモードからロールバックモードに移行する唯一の方法は、データベースへの1つの接続を除くすべての接続を閉じることであることを意味します。</target>
        </trans-unit>
        <trans-unit id="bc70544c321ca8a14f098bcf8a7d9ab71f0f189a" translate="yes" xml:space="preserve">
          <source>The SQLITE_MAX_COLUMN compile-time parameter is used to set an upper bound on:</source>
          <target state="translated">SQLITE_MAX_COLUMN コンパイル時のパラメータを使用して、その上限を設定します。</target>
        </trans-unit>
        <trans-unit id="6525988f532e320cb712d12a43eb0921bdec4dc2" translate="yes" xml:space="preserve">
          <source>The SQLITE_MAX_EXPR_DEPTH parameter determines the maximum expression tree depth. If the value is 0, then no limit is enforced. The current implementation has a default value of 1000.</source>
          <target state="translated">SQLITE_MAX_EXPR_DEPTH パラメータは、式ツリーの最大深度を指定します。値が0の場合、制限はありません。現在の実装では、デフォルト値は1000です。</target>
        </trans-unit>
        <trans-unit id="87bafa8316c35e0283e8d900b37b61b6cd965c07" translate="yes" xml:space="preserve">
          <source>The SQLITE_MAX_FUNCTION_ARG parameter determines the maximum number of parameters that can be passed to an SQL function. The default value of this limit is 100. SQLite should work with functions that have thousands of parameters. However, we suspect that anybody who tries to invoke a function with more than a few parameters is really trying to find security exploits in systems that use SQLite, not do useful work, and so for that reason we have set this parameter relatively low.</source>
          <target state="translated">SQLITE_MAX_FUNCTION_ARG パラメータは、SQL 関数に渡すことができるパラメータの最大数を指定します。この制限のデフォルト値は 100 です。SQLite は何千ものパラメータを持つ関数で動作するはずです。しかし、数個以上のパラメータを持つ関数を呼び出そうとする人は、有用な作業をするのではなく、SQLiteを使用しているシステムのセキュリティ攻撃を見つけようとしているのではないかと疑っています。</target>
        </trans-unit>
        <trans-unit id="189922ac7fd95f7c9bc12f9ce7e9ab04f1adf79f" translate="yes" xml:space="preserve">
          <source>The SQLITE_MAX_PAGE_SIZE compile-time option is now silently ignored. The maximum page size is hard-coded at 65536 bytes.</source>
          <target state="translated">SQLITE_MAX_PAGE_SIZE コンパイル時オプションは無視されるようになりました。最大ページサイズは 65536 バイトでハードコードされています。</target>
        </trans-unit>
        <trans-unit id="862c9c40eeff1a20092e93732416f94a8f2c333f" translate="yes" xml:space="preserve">
          <source>The SQLITE_MEMDEBUG option causes an instrumented &lt;a href=&quot;malloc#memdebug&quot;&gt;debugging memory allocator&lt;/a&gt; to be used as the default memory allocator within SQLite. The instrumented memory allocator checks for misuse of dynamically allocated memory. Examples of misuse include using memory after it is freed, writing off the ends of a memory allocation, freeing memory not previously obtained from the memory allocator, or failing to initialize newly allocated memory.</source>
          <target state="translated">SQLITE_MEMDEBUGオプションを使用&lt;a href=&quot;malloc#memdebug&quot;&gt;する&lt;/a&gt;と、インストルメント化されたデバッグメモリアロケータがSQLite内のデフォルトのメモリアロケータとして使用されます。インストルメントされたメモリアロケータは、動的に割り当てられたメモリの誤用をチェックします。誤用の例としては、解放後のメモリの使用、メモリ割り当ての両端の書き込み、以前にメモリアロケータから取得していないメモリの解放、または新しく割り当てられたメモリの初期化の失敗などがあります。</target>
        </trans-unit>
        <trans-unit id="d5d3984ec504895ac3fbb00da3cebcbba9dedbe7" translate="yes" xml:space="preserve">
          <source>The SQLITE_MEMSTAT Virtual Table</source>
          <target state="translated">SQLITE_MEMSTAT 仮想テーブル</target>
        </trans-unit>
        <trans-unit id="21d4cb84411a45f761656443b3561b46a357ff18" translate="yes" xml:space="preserve">
          <source>The SQLITE_MEMSTAT extension implements an &lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;eponymous-only virtual table&lt;/a&gt; that provides SQL access to the &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64()&lt;/a&gt; and &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt; interfaces.</source>
          <target state="translated">SQLITE_MEMSTAT拡張は、&lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64（）&lt;/a&gt;および&lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status（）&lt;/a&gt;インターフェースへのSQLアクセスを提供する、代名詞&lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;のみの仮想テーブル&lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="aad795204ac31f320600f752e689de3d922a2bd2" translate="yes" xml:space="preserve">
          <source>The SQLITE_MEMSTAT table appears to have the following schema:</source>
          <target state="translated">SQLITE_MEMSTAT テーブルには、以下のスキーマがあるようです。</target>
        </trans-unit>
        <trans-unit id="c5c71018abf94b8f9efc3c61940d93dd9b424da6" translate="yes" xml:space="preserve">
          <source>The SQLITE_MEMSTAT virtual table is a read-only table that can be queried to determine performance characteristics (primarily the amount of memory being used) of the current instance of SQLite. The SQLITE_MEMSTATE table is essentially a wrapper around the C-language APIs &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64()&lt;/a&gt; and &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;. If the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/memstat.c&quot;&gt;memstat.c&lt;/a&gt; source file is compiled with the -DSQLITE_ENABLE_ZIPVFS option, then SQLITE_MEMSTAT will also do some &lt;a href=&quot;c3ref/file_control&quot;&gt;file-control&lt;/a&gt; calls to extract memory usage information about the &lt;a href=&quot;https://www.hwaci.com/sw/sqlite/zipvfs.html&quot;&gt;ZIPVFS&lt;/a&gt; subsystem, if that subsystem as been licensed, installed, and is in use.</source>
          <target state="translated">SQLITE_MEMSTAT仮想テーブルは、SQLiteの現在のインスタンスのパフォーマンス特性（主に使用されているメモリの量）を判断するためにクエリできる読み取り専用テーブルです。 SQLITE_MEMSTATEテーブルは基本的に、C言語のAPIである&lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64（）&lt;/a&gt;および&lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status（）の&lt;/a&gt;ラッパーです。場合&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/memstat.c&quot;&gt;memstat.cの&lt;/a&gt;ソースファイルが-DSQLITE_ENABLE_ZIPVFSオプションでコンパイルされ、その後、SQLITE_MEMSTATもいくつか行います&lt;a href=&quot;c3ref/file_control&quot;&gt;ファイル制御&lt;/a&gt;に関するエキスメモリの使用状況に関する情報の呼び出し&lt;a href=&quot;https://www.hwaci.com/sw/sqlite/zipvfs.html&quot;&gt;ZIPVFSの&lt;/a&gt;、ライセンスのインストール、およびされているサブシステムが使用されている場合、サブシステムを。</target>
        </trans-unit>
        <trans-unit id="3941fc28dfa25db6c38115ec794332d498f61a67" translate="yes" xml:space="preserve">
          <source>The SQLITE_MISMATCH error code indicates a datatype mismatch.</source>
          <target state="translated">SQLITE_MISMATCH エラー・コードは、データ型の不一致を示しています。</target>
        </trans-unit>
        <trans-unit id="545fecc55ea90185cbbd63fd3b5f04d2c005fc32" translate="yes" xml:space="preserve">
          <source>The SQLITE_MISUSE return code might be returned if the application uses any SQLite interface in a way that is undefined or unsupported. For example, using a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; after that prepared statement has been &lt;a href=&quot;c3ref/finalize&quot;&gt;finalized&lt;/a&gt; might result in an SQLITE_MISUSE error.</source>
          <target state="translated">アプリケーションがSQLiteインターフェースを未定義またはサポートされていない方法で使用すると、SQLITE_MISUSE戻りコードが返される場合があります。例えば、使用して&lt;a href=&quot;c3ref/stmt&quot;&gt;プリペアドステートメントを&lt;/a&gt;その準備された文がされた後に&lt;a href=&quot;c3ref/finalize&quot;&gt;確定&lt;/a&gt; SQLITE_MISUSEエラーになる場合があります。</target>
        </trans-unit>
        <trans-unit id="7378cf4ec519f0105a315e8c418689ed2c8b9d03" translate="yes" xml:space="preserve">
          <source>The SQLITE_MUTEX_APPDEF compile-time option is no longer supported. Alternative mutex implementations can now be added at run-time using the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface with the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; verb. *** Potentially incompatible change ***</source>
          <target state="translated">SQLITE_MUTEX_APPDEFコンパイル時オプションはサポートされなくなりました。&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt;動詞で&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config（）&lt;/a&gt;インターフェースを使用して、代替のmutex実装を実行時に追加できるようになりました。***互換性がない可能性のある変更***</target>
        </trans-unit>
        <trans-unit id="b652223c3c3d5b396101734631bda4e93654d297" translate="yes" xml:space="preserve">
          <source>The SQLITE_MUTEX_APPDEF compile-time parameter is no longer recognized. As a replacement, alternative &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;mutex implementations&lt;/a&gt; may be created at runtime using &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; with the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; operator and the &lt;a href=&quot;c3ref/mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_MUTEX_APPDEFコンパイル時パラメーターは認識されなくなりました。代わりに、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt;演算子と&lt;a href=&quot;c3ref/mutex_methods&quot;&gt;sqlite3_mutex_methods&lt;/a&gt;オブジェクトを&lt;a href=&quot;c3ref/config&quot;&gt;指定&lt;/a&gt;したsqlite3_config（）を使用して、実行時に代替&lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;mutex実装&lt;/a&gt;を作成できます。</target>
        </trans-unit>
        <trans-unit id="d2c0584076e7e10d1a5a608c7c90ebdabce289b7" translate="yes" xml:space="preserve">
          <source>The SQLITE_MUTEX_NOOP implementation is a set of routines that does no real locking and is appropriate for use in a single-threaded application. The SQLITE_MUTEX_PTHREADS and SQLITE_MUTEX_W32 implementations are appropriate for use on Unix and Windows.</source>
          <target state="translated">SQLITE_MUTEX_NOOP 実装は、実際のロックを行わないルーチンのセットであり、シングルスレッドアプリケーションでの使用に適しています。SQLITE_MUTEX_PTHREADS および SQLITE_MUTEX_W32 実装は、Unix および Windows での使用に適しています。</target>
        </trans-unit>
        <trans-unit id="8dd7fbf941fcd0cbf4106dee4f6ff2100d3cc081" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOLFS error can be returned on systems that do not support large files when the database grows to be larger than what the filesystem can handle. &quot;NOLFS&quot; stands for &quot;NO Large File Support&quot;.</source>
          <target state="translated">SQLITE_NOLFS エラーは、ラージファイルをサポートしていないシステムで、データベースがファイルシステムが扱えるサイズよりも大きくなったときに返されることがあります。&quot;NOLFS&quot; は &quot;NO Large File Support&quot; の略です。</target>
        </trans-unit>
        <trans-unit id="1cda63147d327bf25d081e640b795908860d57cd" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOMEM result code indicates that SQLite was unable to allocate all the memory it needed to complete the operation. In other words, an internal call to &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_malloc()&lt;/a&gt; or &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_realloc()&lt;/a&gt; has failed in a case where the memory being allocated was required in order to continue the operation.</source>
          <target state="translated">SQLITE_NOMEM結果コードは、SQLiteが操作を完了するために必要なすべてのメモリを割り当てることができなかったことを示しています。つまり、操作を続行するために割り当てられているメモリが必要な場合に、&lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_malloc（）&lt;/a&gt;または&lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_realloc（）&lt;/a&gt;への内部呼び出しが失敗しました。</target>
        </trans-unit>
        <trans-unit id="90348aff38a7fe2d16e98097b8d995eefcd13821" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOTFOUND result code is also used internally by the SQLite implementation, but those internal uses are not exposed to the application.</source>
          <target state="translated">SQLITE_NOTFOUNDの結果コードはSQLiteの実装でも内部的に使用されていますが、これらの内部的な使用はアプリケーションには公開されていません。</target>
        </trans-unit>
        <trans-unit id="04b892d49dde78c36512aea678380b1b3cb4740c" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOTFOUND result code is used in two contexts. SQLITE_NOTFOUND can be returned by the &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; interface to indicate that the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write&quot;&gt;file control opcode&lt;/a&gt; passed as the third argument was not recognized by the underlying &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;. SQLITE_NOTFOUND can also be returned by the xSetSystemCall() method of an &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object.</source>
          <target state="translated">SQLITE_NOTFOUND結果コードは、2つのコンテキストで使用されます。SQLITE_NOTFOUNDは&lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control（）&lt;/a&gt;インターフェースから返され、3番目の引数として渡された&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write&quot;&gt;ファイル制御オペコード&lt;/a&gt;が、基礎となる&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;によって認識されなかったことを示します。SQLITE_NOTFOUNDは、&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;オブジェクトのxSetSystemCall（）メソッドによっても返されます。</target>
        </trans-unit>
        <trans-unit id="2006836e7cf841369d470c41165b6630c3c15ae9" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOTICE result code is not returned by any C/C++ interface. However, SQLITE_NOTICE (or rather one of its &lt;a href=&quot;rescode#extrc&quot;&gt;extended error codes&lt;/a&gt;) is sometimes used as the first argument in an &lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log()&lt;/a&gt; callback to indicate that an unusual operation is taking place.</source>
          <target state="translated">SQLITE_NOTICE結果コードは、どのC / C ++インターフェースからも返されません。ただし、SQLITE_NOTICE（またはその&lt;a href=&quot;rescode#extrc&quot;&gt;拡張エラーコードの&lt;/a&gt; 1つ）が&lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log（）&lt;/a&gt;コールバックの最初の引数として使用され、異常な操作が行われていることを示す場合があります。</target>
        </trans-unit>
        <trans-unit id="02cb61634cf3f64c55c04a76d9ecf0d6931de129" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOTICE_RECOVER_ROLLBACK result code is passed to the callback of &lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log()&lt;/a&gt; when a &lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;hot journal&lt;/a&gt; is rolled back.</source>
          <target state="translated">SQLITE_NOTICE_RECOVER_ROLLBACK結果コードのコールバックに渡される&lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log（）&lt;/a&gt;場合&lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;ホットジャーナルが&lt;/a&gt;ロールバックされます。</target>
        </trans-unit>
        <trans-unit id="f198e3499c541e2a07f04094a1095a33b4f9550d" translate="yes" xml:space="preserve">
          <source>The SQLITE_NOTICE_RECOVER_WAL result code is passed to the callback of &lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log()&lt;/a&gt; when a &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; database file is recovered.</source>
          <target state="translated">SQLITE_NOTICE_RECOVER_WAL結果コードは、&lt;a href=&quot;wal&quot;&gt;WALモードの&lt;/a&gt;データベースファイルがリカバリされるときに&lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log（）の&lt;/a&gt;コールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="ee291eadebc9e5d4151fc8b157f062bbbf6ed568" translate="yes" xml:space="preserve">
          <source>The SQLITE_OK result code means that the operation was successful and that there were no errors. Most other result codes indicate an error.</source>
          <target state="translated">SQLITE_OK 結果コードは、操作が成功し、エラーがなかったことを意味します。他のほとんどの結果コードはエラーを示します。</target>
        </trans-unit>
        <trans-unit id="db1bbd15a81f09ee87a066e983ed6980b9d26517" translate="yes" xml:space="preserve">
          <source>The SQLITE_OK_LOAD_PERMANENTLY return code is useful to &lt;a href=&quot;loadext&quot;&gt;loadable extensions&lt;/a&gt; that register new &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt;, for example.</source>
          <target state="translated">SQLITE_OK_LOAD_PERMANENTLYリターンコードは、たとえば、新しい&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;を登録する&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能に&lt;/a&gt;役立ちます。</target>
        </trans-unit>
        <trans-unit id="6becbabbe4a84dad21c1b1544eb673040cac46e2" translate="yes" xml:space="preserve">
          <source>The SQLITE_OMIT_* options are unsupported. By this we mean that an SQLITE_OMIT_* option that omits code from the build in the current release might become a no-op in the next release. Or the other way around: an SQLITE_OMIT_* that is a no-op in the current release might cause code to be excluded in the next release. Also, not all SQLITE_OMIT_* options are tested. Some SQLITE_OMIT_* options might cause SQLite to malfunction and/or provide incorrect answers.</source>
          <target state="translated">SQLITE_OMIT_*オプションはサポートされていません。これは、現在のリリースでビルドからコードを省略する SQLITE_OMIT_*オプションが、次のリリースでは無効になる可能性があることを意味します。また、現在のリリースではno-opであるSQLITE_OMIT_*は、次のリリースではコードが除外される可能性があります。また、すべての SQLITE_OMIT_*オプションがテストされているわけではありません。いくつかの SQLITE_OMIT_*オプションは、SQLite が誤動作したり、正しくない答えを提供したりする原因になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5d47886ed69e3788c34a2d6c9a632c5948855a34" translate="yes" xml:space="preserve">
          <source>The SQLITE_OMIT_MERGE_SORT option has been removed. The merge sorter is now a required component of SQLite.</source>
          <target state="translated">SQLITE_OMIT_MERGE_SORT オプションが削除されました。マージソーターは SQLite の必須コンポーネントとなりました。</target>
        </trans-unit>
        <trans-unit id="2ace5bda746aeaa5497bcf0c7e8c12395a91c1c1" translate="yes" xml:space="preserve">
          <source>The SQLITE_PERM result code indicates that the requested access mode for a newly created database could not be provided.</source>
          <target state="translated">SQLITE_PERM 結果コードは、新しく作成されたデータベースに対して要求されたアクセス・モードを提供できなかったことを示しています。</target>
        </trans-unit>
        <trans-unit id="57074805a6a2909f8660b15999da8d8adc66e584" translate="yes" xml:space="preserve">
          <source>The SQLITE_PREPARE_NORMALIZE flag is a no-op. This flag used to be required for any prepared statement that wanted to use the &lt;a href=&quot;#sqlite3_expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt; interface. However, the &lt;a href=&quot;#sqlite3_expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt; interface is now available to all prepared statements, regardless of whether or not they use this flag.</source>
          <target state="translated">SQLITE_PREPARE_NORMALIZEフラグは何もしません。このフラグは、&lt;a href=&quot;#sqlite3_expanded_sql&quot;&gt;sqlite3_normalized_sql（）&lt;/a&gt;インターフェースを使用したい準備済みステートメントに必要でした。ただし、&lt;a href=&quot;#sqlite3_expanded_sql&quot;&gt;sqlite3_normalized_sql（）&lt;/a&gt;インターフェースは、このフラグを使用するかどうかに関係なく、すべての準備済みステートメントで使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="1ad4cab077701a7da0038bd41b3f79ceedfd12d8" translate="yes" xml:space="preserve">
          <source>The SQLITE_PREPARE_NORMALIZE flag is a no-op. This flag used to be required for any prepared statement that wanted to use the &lt;a href=&quot;expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt; interface. However, the &lt;a href=&quot;expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt; interface is now available to all prepared statements, regardless of whether or not they use this flag.</source>
          <target state="translated">SQLITE_PREPARE_NORMALIZEフラグは何もしません。このフラグは、&lt;a href=&quot;expanded_sql&quot;&gt;sqlite3_normalized_sql（）&lt;/a&gt;インターフェースを使用したい準備済みステートメントに必要でした。ただし、&lt;a href=&quot;expanded_sql&quot;&gt;sqlite3_normalized_sql（）&lt;/a&gt;インターフェースは、このフラグを使用するかどうかに関係なく、すべての準備済みステートメントで使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="a0438ba55e3894ec50e9427fa15e7d877e35f842" translate="yes" xml:space="preserve">
          <source>The SQLITE_PREPARE_NO_VTAB flag causes the SQL compiler to return an error (error code SQLITE_ERROR) if the statement uses any virtual tables.</source>
          <target state="translated">SQLITE_PREPARE_NO_VTAB フラグは、文が仮想テーブルを使用している場合、SQL コンパイラがエラー (エラーコード SQLITE_ERROR)を返します。</target>
        </trans-unit>
        <trans-unit id="68c6b699083a20e7dac515dfb0a940a1d2fa1d0a" translate="yes" xml:space="preserve">
          <source>The SQLITE_PREPARE_PERSISTENT flag is a hint to the query planner that the prepared statement will be retained for a long time and probably reused many times. Without this flag, &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt; assume that the prepared statement will be used just once or at most a few times and then destroyed using &lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; relatively soon. The current implementation acts on this hint by avoiding the use of &lt;a href=&quot;malloc#lookaside&quot;&gt;lookaside memory&lt;/a&gt; so as not to deplete the limited store of lookaside memory. Future versions of SQLite may act on this hint differently.</source>
          <target state="translated">SQLITE_PREPARE_PERSISTENTフラグは、準備されたステートメントが長期間保持され、おそらく何度も再利用されるというクエリプランナーへのヒントです。このフラグがない場合、&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v3（）&lt;/a&gt;および&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v3（）&lt;/a&gt;は、準備されたステートメントが1回だけまたは多くても数回使用され、その後&lt;a href=&quot;#sqlite3_finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;を使用して比較的すぐに破棄されると想定します。現在の実装では、&lt;a href=&quot;malloc#lookaside&quot;&gt;ルックアサイドメモリ&lt;/a&gt;の使用を回避することにより、このヒントに基づいて、ルックアサイドメモリの限られたストアを使い果たしないようにしています。 SQLiteの将来のバージョンでは、このヒントに対する動作が異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="799dbb7451dd41ca217be627d63018af5431d1bf" translate="yes" xml:space="preserve">
          <source>The SQLITE_PREPARE_PERSISTENT flag is a hint to the query planner that the prepared statement will be retained for a long time and probably reused many times. Without this flag, &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt; and &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt; assume that the prepared statement will be used just once or at most a few times and then destroyed using &lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize()&lt;/a&gt; relatively soon. The current implementation acts on this hint by avoiding the use of &lt;a href=&quot;../malloc#lookaside&quot;&gt;lookaside memory&lt;/a&gt; so as not to deplete the limited store of lookaside memory. Future versions of SQLite may act on this hint differently.</source>
          <target state="translated">SQLITE_PREPARE_PERSISTENTフラグは、準備されたステートメントが長期間保持され、おそらく何度も再利用されるというクエリプランナーへのヒントです。このフラグがない場合、&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v3（）&lt;/a&gt;および&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v3（）&lt;/a&gt;は、準備されたステートメントが1回だけまたは多くても数回使用され、その後&lt;a href=&quot;finalize&quot;&gt;sqlite3_finalize（）&lt;/a&gt;を使用して比較的すぐに破棄されると想定します。現在の実装では、&lt;a href=&quot;../malloc#lookaside&quot;&gt;ルックアサイドメモリ&lt;/a&gt;の使用を回避することにより、このヒントに基づいて、ルックアサイドメモリの限られたストアを使い果たしないようにしています。 SQLiteの将来のバージョンでは、このヒントに対する動作が異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c11fb868fc472e55f703cb835b3c6a27d603969" translate="yes" xml:space="preserve">
          <source>The SQLITE_PROTOCOL result code indicates a problem with the file locking protocol used by SQLite. The SQLITE_PROTOCOL error is currently only returned when using &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; and attempting to start a new transaction. There is a race condition that can occur when two separate &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connections&lt;/a&gt; both try to start a transaction at the same time in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;. The loser of the race backs off and tries again, after a brief delay. If the same connection loses the locking race dozens of times over a span of multiple seconds, it will eventually give up and return SQLITE_PROTOCOL. The SQLITE_PROTOCOL error should appear in practice very, very rarely, and only when there are many separate processes all competing intensely to write to the same database.</source>
          <target state="translated">SQLITE_PROTOCOL結果コードは、SQLiteが使用するファイルロックプロトコルに問題があることを示しています。 SQLITE_PROTOCOLエラーは現在、&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;を使用して新しいトランザクションを開始しようとした場合にのみ返されます。 2つの別個の&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続の&lt;/a&gt;両方が&lt;a href=&quot;wal&quot;&gt;WALモードで&lt;/a&gt;同時にトランザクションを開始しようとすると、競合状態が発生する可能性があります。レースの敗者は、少し遅れて後退し、再試行します。同じ接続が数秒間に数十回ロックレースを失うと、結局あきらめてSQLITE_PROTOCOLを返します。 SQLITE_PROTOCOLエラーは、実際には非常にまれにしか発生せず、同じデータベースに書き込むためにすべてのプロセスが激しく競合している場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="2290c0085d649d3364cd3e13fd796218538f0c97" translate="yes" xml:space="preserve">
          <source>The SQLITE_RANGE error indices that the parameter number argument to one of the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind&lt;/a&gt; routines or the column number in one of the &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column&lt;/a&gt; routines is out of range.</source>
          <target state="translated">SQLITE_RANGEエラー指標の一つのパラメータnumber引数こと&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind&lt;/a&gt;ルーチン又はの一つの列数&lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_columnの&lt;/a&gt;ルーチンは範囲外です。</target>
        </trans-unit>
        <trans-unit id="81db86b91239da795ab1877a821491920db31614" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY result code is returned when an attempt is made to alter some data for which the current database connection does not have write permission.</source>
          <target state="translated">現在のデータベース接続に書き込み権限がないデータを変更しようとした場合、SQLITE_READONLY 結果コードが返されます。</target>
        </trans-unit>
        <trans-unit id="20a2e61649ed0f39a9f887714e92e822fd9ead1d" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY_CANTINIT result code originates in the xShmMap method of a &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; to indicate that the shared memory region used by &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; exists buts its content is unreliable and unusable by the current process since the current process does not have write permission on the shared memory region. (The shared memory region for WAL mode is normally a file with a &quot;-wal&quot; suffix that is mmapped into the process space. If the current process does not have write permission on that file, then it cannot write into shared memory.)</source>
          <target state="translated">SQLITE_READONLY_CANTINIT結果コードは、&lt;a href=&quot;vfs&quot;&gt;VFSの&lt;/a&gt; xShmMapメソッドで発生し、&lt;a href=&quot;wal&quot;&gt;WALモードで&lt;/a&gt;使用される共有メモリ領域は存在するが、現在のプロセスには共有メモリ領域への書き込み権限がないため、その内容は現在のプロセスでは信頼できず、使用できないことを示します。（WALモードの共有メモリ領域は通常、プロセススペースにmmapされた「-wal」サフィックスを持つファイルです。現在のプロセスがそのファイルに対する書き込み権限を持っていない場合、共有メモリに書き込むことはできません。）</target>
        </trans-unit>
        <trans-unit id="8cc5d69c49bd0049fa508081d686d1a3ef3d0153" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY_CANTLOCK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;. The SQLITE_READONLY_CANTLOCK error code indicates that SQLite is unable to obtain a read lock on a &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; database because the shared-memory file associated with that database is read-only.</source>
          <target state="translated">SQLITE_READONLY_CANTLOCKエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;。SQLITE_READONLY_CANTLOCKエラーコードは、そのデータベースに関連付けられた共有メモリファイルが読み取り専用であるため、SQLiteが&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;データベースの読み取りロックを取得できないことを示します。</target>
        </trans-unit>
        <trans-unit id="19656bfe231a68e2b6cce42b55c5197d3d416be0" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY_DBMOVED error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;. The SQLITE_READONLY_DBMOVED error code indicates that a database cannot be modified because the database file has been moved since it was opened, and so any attempt to modify the database might result in database corruption if the processes crashes because the &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; would not be correctly named.</source>
          <target state="translated">SQLITE_READONLY_DBMOVEDエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;。SQLITE_READONLY_DBMOVEDエラーコードは、データベースファイルが開かれてから移動されたためにデータベースを変更できないことを示しています。そのため、データベースを変更しようとすると、&lt;a href=&quot;lockingv3#rollback&quot;&gt;ロールバックジャーナルの&lt;/a&gt;名前が正しくないためにプロセスがクラッシュすると、データベースが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="41ecb30affe77245ceb751ab6c0b2e9fce929efd" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY_DIRECTORY result code indicates that the database is read-only because process does not have permission to create a journal file in the same directory as the database and the creation of a journal file is a prerequisite for writing.</source>
          <target state="translated">SQLITE_READONLY_DIRECTORY の結果コードは、プロセスがデータベースと同じディレクトリにジャーナルファイルを作成する権限を持っておらず、ジャーナルファイルの作成が書き込みの前提条件であるため、データベースが読み取り専用であることを示しています。</target>
        </trans-unit>
        <trans-unit id="c2523ec31f0b9a2d33cf73109d61b1e043f8086c" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY_RECOVERY error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;. The SQLITE_READONLY_RECOVERY error code indicates that a &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; database cannot be opened because the database file needs to be recovered and recovery requires write access but only read access is available.</source>
          <target state="translated">SQLITE_READONLY_RECOVERYエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;。SQLITE_READONLY_RECOVERYエラーコードは、データベースファイルを回復する必要があり、回復には書き込みアクセスが必要だが、読み取りアクセスしか利用できないため、&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;データベースを開けないことを示します。</target>
        </trans-unit>
        <trans-unit id="ba838fe9f900034dae5111194ba7ea1d5270d1c2" translate="yes" xml:space="preserve">
          <source>The SQLITE_READONLY_ROLLBACK error code is an &lt;a href=&quot;rescode#pve&quot;&gt;extended error code&lt;/a&gt; for &lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;. The SQLITE_READONLY_ROLLBACK error code indicates that a database cannot be opened because it has a &lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;hot journal&lt;/a&gt; that needs to be rolled back but cannot because the database is readonly.</source>
          <target state="translated">SQLITE_READONLY_ROLLBACKエラーコードは、&lt;a href=&quot;rescode#pve&quot;&gt;拡張エラーコード&lt;/a&gt;のための&lt;a href=&quot;rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;。SQLITE_READONLY_ROLLBACKエラーコードは、ロールバックする必要がある&lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;ホットジャーナル&lt;/a&gt;があるためデータベースを開くことができないが、データベースが読み取り専用であるために開くことができないことを示します。</target>
        </trans-unit>
        <trans-unit id="d25154fd2f20b85ded4823ebe97f48106c96d4d1" translate="yes" xml:space="preserve">
          <source>The SQLITE_ROW result code returned by &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; indicates that another row of output is available.</source>
          <target state="translated">&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;によって返されるSQLITE_ROW結果コードは、出力の別の行が利用可能であることを示しています。</target>
        </trans-unit>
        <trans-unit id="1d91aee6732a465a4cc20090bf5eb9177f9e582c" translate="yes" xml:space="preserve">
          <source>The SQLITE_SCHEMA result code indicates that the database schema has changed. This result code can be returned from &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; for a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; that was generated using &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; or &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;. If the database schema was changed by some other process in between the time that the statement was prepared and the time the statement was run, this error can result.</source>
          <target state="translated">SQLITE_SCHEMA結果コードは、データベーススキーマが変更されたことを示します。この結果コードは、&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;または&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16（）&lt;/a&gt;を使用して生成&lt;a href=&quot;c3ref/stmt&quot;&gt;さ&lt;/a&gt;れた準備済みステートメントの&lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step（）&lt;/a&gt;から返すことができます。ステートメントが準備されてからステートメントが実行されるまでの間にデータベーススキーマが他のプロセスによって変更された場合、このエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bccaf372951fcf999b80b85d54115242255c5910" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT Virtual Table</source>
          <target state="translated">SQLITE_STMT 仮想テーブル</target>
        </trans-unit>
        <trans-unit id="0210be179f988cfe689d56f75f4d1fa3e0b6bb8b" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT extension can also be loaded at run-time by compiling the extension into a shared library or DLL using the source code at &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/memstat.c&quot;&gt;https://sqlite.org/src/file/ext/misc/memstat.c&lt;/a&gt; and following the instructions for how to &lt;a href=&quot;loadext#build&quot;&gt;compile loadable extensions&lt;/a&gt;.</source>
          <target state="translated">SQLITE_STMT拡張機能は、https：//sqlite.org/src/file/ext/misc/memstat.cのソースコードを使用して拡張機能を共有ライブラリまたはDLLにコンパイルし、次の手順に従って実行時にロードすることもでき&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/memstat.c&quot;&gt;ます。&lt;/a&gt;&lt;a href=&quot;loadext#build&quot;&gt;ロード可能な拡張機能&lt;/a&gt;をコンパイルする方法。</target>
        </trans-unit>
        <trans-unit id="c79456ebf36875bab38cefa2c6e55d9482f8dca7" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT extension implements an &lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;eponymous-only virtual table&lt;/a&gt; that provides information about all &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statements&lt;/a&gt; associated with the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">SQLITE_STMT拡張機能は、&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続に&lt;/a&gt;関連付けられているすべての&lt;a href=&quot;c3ref/stmt&quot;&gt;準備済みステートメント&lt;/a&gt;に関する情報を提供する、同義語&lt;a href=&quot;vtab#epoonlyvtab&quot;&gt;のみの仮想テーブル&lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="514c2473199b17afc5dd1d8c02362217c121606a" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT extension is enabled in default builds of the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="translated">SQLITE_STMT拡張機能は、&lt;a href=&quot;cli&quot;&gt;コマンドラインシェルの&lt;/a&gt;デフォルトビルドで有効になっています。</target>
        </trans-unit>
        <trans-unit id="e53abd5cd3368a9c18b0e2f006747b4e8c1e98ad" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT extension is included in the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; though it is disabled by default. Use the &lt;a href=&quot;compile#enable_stmtvtab&quot;&gt;SQLITE_ENABLE_STMTVTAB&lt;/a&gt; compile-time option to enable the SQLITE_STMT extension. The SQLITE_STMT extension can also be loaded at run-time by compiling the extension into a shared library or DLL using the source code at &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/stmt.c&quot;&gt;https://sqlite.org/src/file/ext/misc/stmt.c&lt;/a&gt; and following the instructions for how to &lt;a href=&quot;loadext#build&quot;&gt;compile loadable extensions&lt;/a&gt;.</source>
          <target state="translated">SQLITE_STMT拡張機能は&lt;a href=&quot;amalgamation&quot;&gt;統合に&lt;/a&gt;含まれていますが、デフォルトでは無効になっています。&lt;a href=&quot;compile#enable_stmtvtab&quot;&gt;SQLITE_ENABLE_STMTVTAB&lt;/a&gt;コンパイル時オプションを使用して、SQLITE_STMT拡張を有効にします。SQLITE_STMT拡張機能は、https：//sqlite.org/src/file/ext/misc/stmt.cのソースコードを使用して拡張機能を共有ライブラリまたはDLLにコンパイルし、次の手順に従って実行時にロードすることもでき&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/stmt.c&quot;&gt;ます。&lt;/a&gt;&lt;a href=&quot;loadext#build&quot;&gt;ロード可能な拡張機能&lt;/a&gt;をコンパイルする方法。</target>
        </trans-unit>
        <trans-unit id="eff6d72f1420a16df254227915d0745e46f60ade" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT virtual table can also be used to access performance information about prepared statements, to aid in optimization an application. For example, to find out how much memory is being used by &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statements&lt;/a&gt; that have never been used, one could run:</source>
          <target state="translated">SQLITE_STMT仮想テーブルを使用して、準備済みステートメントに関するパフォーマンス情報にアクセスし、アプリケーションの最適化を支援することもできます。たとえば、使用さ&lt;a href=&quot;c3ref/stmt&quot;&gt;れ&lt;/a&gt;たことのない準備済みステートメントが使用しているメモリの量を調べるには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="36a652edafe32e1a6a69623202e497c2b84971e5" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMT virtual table is a read-only table that can be directly queried to access information about all prepared statements on the current database connection. For example:</source>
          <target state="translated">SQLITE_STMT 仮想テーブルは読み取り専用のテーブルで、現在のデータベース接続上で準備されたすべてのステートメントに関する情報にアクセスするために直接問い合わせることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c57e4bb46f13bf2108682321d36a64fbe9c7f037" translate="yes" xml:space="preserve">
          <source>The SQLITE_STMTJRNL_SPILL compile-time option determines the default setting of the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigstmtjrnlspill&quot;&gt;SQLITE_CONFIG_STMTJRNL_SPILL&lt;/a&gt; start-time setting. That setting determines the size threshold above which &lt;a href=&quot;tempfiles#stmtjrnl&quot;&gt;statement journals&lt;/a&gt; are moved from memory to disk.</source>
          <target state="translated">SQLITE_STMTJRNL_SPILLコンパイル時オプションは、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigstmtjrnlspill&quot;&gt;SQLITE_CONFIG_STMTJRNL_SPILL&lt;/a&gt;開始時設定のデフォルト設定を決定します。その設定により、&lt;a href=&quot;tempfiles#stmtjrnl&quot;&gt;ステートメントジャーナル&lt;/a&gt;がメモリからディスクに移動されるサイズのしきい値が決まります。</target>
        </trans-unit>
        <trans-unit id="53aa1b2835c1a75b5cdfb5b24f66527df47e52af" translate="yes" xml:space="preserve">
          <source>The SQLITE_SUBTYPE flag indicates to SQLite that a function may call &lt;a href=&quot;#sqlite3_value_subtype&quot;&gt;sqlite3_value_subtype()&lt;/a&gt; to inspect the sub-types of its arguments. Specifying this flag makes no difference for scalar or aggregate user functions. However, if it is not specified for a user-defined window function, then any sub-types belonging to arguments passed to the window function may be discarded before the window function is called (i.e. sqlite3_value_subtype() will always return 0).</source>
          <target state="translated">SQLITE_SUBTYPEフラグは、関数がその引数のサブタイプを検査するために&lt;a href=&quot;#sqlite3_value_subtype&quot;&gt;sqlite3_value_subtype（）&lt;/a&gt;を呼び出す可能性があることをSQLiteに示します。このフラグを指定しても、スカラーまたは集約ユーザー関数には違いはありません。ただし、ユーザー定義のウィンドウ関数に指定されていない場合、ウィンドウ関数に渡される引数に属するサブタイプは、ウィンドウ関数が呼び出される前に破棄される場合があります（つまり、sqlite3_value_subtype（）は常に0を返します）。</target>
        </trans-unit>
        <trans-unit id="a9bfb18749058a748b6ef8d70f30272423e2e061" translate="yes" xml:space="preserve">
          <source>The SQLITE_SUBTYPE flag indicates to SQLite that a function may call &lt;a href=&quot;value_subtype&quot;&gt;sqlite3_value_subtype()&lt;/a&gt; to inspect the sub-types of its arguments. Specifying this flag makes no difference for scalar or aggregate user functions. However, if it is not specified for a user-defined window function, then any sub-types belonging to arguments passed to the window function may be discarded before the window function is called (i.e. sqlite3_value_subtype() will always return 0).</source>
          <target state="translated">SQLITE_SUBTYPEフラグは、関数がその引数のサブタイプを検査するために&lt;a href=&quot;value_subtype&quot;&gt;sqlite3_value_subtype（）&lt;/a&gt;を呼び出す可能性があることをSQLiteに示します。このフラグを指定しても、スカラーまたは集約ユーザー関数には違いはありません。ただし、ユーザー定義のウィンドウ関数に指定されていない場合、ウィンドウ関数に渡される引数に属するサブタイプは、ウィンドウ関数が呼び出される前に破棄される場合があります（つまり、sqlite3_value_subtype（）は常に0を返します）。</target>
        </trans-unit>
        <trans-unit id="eebb912b265a126853dad1960970bce68414c982" translate="yes" xml:space="preserve">
          <source>The SQLITE_TMPDIR environment variable</source>
          <target state="translated">SQLITE_TMPDIR 環境変数</target>
        </trans-unit>
        <trans-unit id="c73fb526ebe5bd57bd3e299a92027075f6d77195" translate="yes" xml:space="preserve">
          <source>The SQLITE_TOOBIG error code can also result when an oversized SQL statement is passed into one of the &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; interfaces. The maximum length of an SQL statement defaults to a much smaller value of 1,000,000 bytes. The maximum SQL statement length can be set at compile-time using &lt;a href=&quot;limits#max_sql_length&quot;&gt;SQLITE_MAX_SQL_LENGTH&lt;/a&gt; or at run-time using &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitsqllength&quot;&gt;SQLITE_LIMIT_SQL_LENGTH&lt;/a&gt;,...).</source>
          <target state="translated">SQLITE_TOOBIGエラーコードは、特大のSQLステートメントが&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;インターフェースの1つに渡された場合にも発生する可能性があります。 SQLステートメントの最大長は、デフォルトで1,000,000バイトというはるかに小さい値になっています。 SQLステートメントの最大長は、コンパイル時に&lt;a href=&quot;limits#max_sql_length&quot;&gt;SQLITE_MAX_SQL_LENGTH&lt;/a&gt;を使用して設定するか、実行時に&lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;（db、&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitsqllength&quot;&gt;SQLITE_LIMIT_SQL_LENGTH&lt;/a&gt;、...）を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="95a063038fc4fca17964bc0777d759cfc88b33bd" translate="yes" xml:space="preserve">
          <source>The SQLITE_TOOBIG error code indicates that a string or BLOB was too large. The default maximum length of a string or BLOB in SQLite is 1,000,000,000 bytes. This maximum length can be changed at compile-time using the &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt; compile-time option, or at run-time using the &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitlength&quot;&gt;SQLITE_LIMIT_LENGTH&lt;/a&gt;,...) interface. The SQLITE_TOOBIG error results when SQLite encounters a string or BLOB that exceeds the compile-time or run-time limit.</source>
          <target state="translated">SQLITE_TOOBIGエラーコードは、文字列またはBLOBが大きすぎることを示します。 SQLiteの文字列またはBLOBのデフォルトの最大長は1,000,000,000バイトです。この最大長は、コンパイル時に&lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;コンパイル時オプションを使用して、または実行時に&lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;（db、&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitlength&quot;&gt;SQLITE_LIMIT_LENGTH&lt;/a&gt;、...）インターフェイスを使用して変更できます。 SQLITE_TOOBIGエラーは、SQLiteがコンパイル時または実行時の制限を超える文字列またはBLOBを検出した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="b22248b709740e89a9f8d423ea84335819e1ee2a" translate="yes" xml:space="preserve">
          <source>The SQLITE_WARNING result code is not returned by any C/C++ interface. However, SQLITE_WARNING (or rather one of its &lt;a href=&quot;rescode#extrc&quot;&gt;extended error codes&lt;/a&gt;) is sometimes used as the first argument in an &lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log()&lt;/a&gt; callback to indicate that an unusual and possibly ill-advised operation is taking place.</source>
          <target state="translated">SQLITE_WARNING結果コードは、どのC / C ++インターフェースからも返されません。ただし、SQLITE_WARNING（またはその&lt;a href=&quot;rescode#extrc&quot;&gt;拡張エラーコードの&lt;/a&gt; 1つ）が&lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log（）&lt;/a&gt;コールバックの最初の引数として使用され、異常で不適切な可能性のある操作が行われていることを示す場合があります。</target>
        </trans-unit>
        <trans-unit id="bd54655a92d09c02b918de6e8114904fcbbd22b3" translate="yes" xml:space="preserve">
          <source>The SQLITE_WARNING_AUTOINDEX result code is passed to the callback of &lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log()&lt;/a&gt; whenever &lt;a href=&quot;optoverview#autoindex&quot;&gt;automatic indexing&lt;/a&gt; is used. This can serve as a warning to application designers that the database might benefit from additional indexes.</source>
          <target state="translated">SQLITE_WARNING_AUTOINDEX結果コードは、&lt;a href=&quot;optoverview#autoindex&quot;&gt;自動インデックス作成&lt;/a&gt;が使用されるたびに&lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log（）の&lt;/a&gt;コールバックに渡されます。これは、データベースが追加のインデックスから利益を得る可能性があるというアプリケーション設計者への警告として役立ちます。</target>
        </trans-unit>
        <trans-unit id="c76259d82167d5f943a68fb0352bace5b64fab37" translate="yes" xml:space="preserve">
          <source>The SQLite Amalgamation</source>
          <target state="translated">SQLiteの合併</target>
        </trans-unit>
        <trans-unit id="e5e12b48e05726457e7db136c89d439a466ab852" translate="yes" xml:space="preserve">
          <source>The SQLite Archive is a relatively new format. It was first described in in 2014. ZIP Archives and Tarballs, on the other hand, have been around for decades and are well-entrenched as standard formats. Most programmers know what a ZIP Archive or Tarball is, but if you say &quot;SQLite Archive&quot; you are more likely to get a reply of &quot;What?&quot; Tooling to process ZIP Archives and Tarballs is more likely to be installed on stock computers.</source>
          <target state="translated">SQLite Archiveは比較的新しいフォーマットです。最初に記述されたのは2014年です。一方、ZIPアーカイブやタルボールは数十年前から存在し、標準フォーマットとして定着しています。ほとんどのプログラマは ZIP アーカイブやターボールが何であるかを知っていますが、&quot;SQLite Archive&quot; と言えば &quot;What?&quot; という返事が返ってくる可能性が高くなります。ZIPアーカイブやターボールを処理するためのツールは、純正のコンピュータにインストールされている可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="14b38e43f93cb1f6666b258c1070654e3f60d3ab" translate="yes" xml:space="preserve">
          <source>The SQLite Bytecode Engine</source>
          <target state="translated">SQLite バイトコードエンジン</target>
        </trans-unit>
        <trans-unit id="60d2d0a8c73ed165c49cdebcf186c3bd62509aba" translate="yes" xml:space="preserve">
          <source>The SQLite OS Interface or &quot;VFS&quot;</source>
          <target state="translated">SQLite OS インターフェイスまたは &quot;VFS&quot;</target>
        </trans-unit>
        <trans-unit id="67edc3d607c153611c830c05dc44105c120df169" translate="yes" xml:space="preserve">
          <source>The SQLite OS Interface or &amp;quot;VFS&amp;quot;</source>
          <target state="translated">SQLite OSインターフェイスまたは「VFS」</target>
        </trans-unit>
        <trans-unit id="eb768474c2c960b1f80b5ec4636fc5c556432ed7" translate="yes" xml:space="preserve">
          <source>The SQLite Query Optimizer Overview</source>
          <target state="translated">SQLite クエリ オプティマイザーの概要</target>
        </trans-unit>
        <trans-unit id="656be9ece72b3b3c8af07774a0a4473889d5a0ca" translate="yes" xml:space="preserve">
          <source>The SQLite R*Tree Module</source>
          <target state="translated">SQLite R*Tree モジュール</target>
        </trans-unit>
        <trans-unit id="f7f3e9d21d121d5b3e8db61ea6e7dde70d17b4dd" translate="yes" xml:space="preserve">
          <source>The SQLite R*Tree module is implemented as a &lt;a href=&quot;c3ref/create_module&quot;&gt;virtual table&lt;/a&gt;. Each R*Tree index is a virtual table with an odd number of columns between 3 and 11. The first column is always a 64-bit signed integer primary key. The other columns are pairs, one pair per dimension, containing the minimum and maximum values for that dimension, respectively. A 1-dimensional R*Tree thus has 3 columns. A 2-dimensional R*Tree has 5 columns. A 3-dimensional R*Tree has 7 columns. A 4-dimensional R*Tree has 9 columns. And a 5-dimensional R*Tree has 11 columns. The SQLite R*Tree implementation does not support R*Trees wider than 5 dimensions.</source>
          <target state="translated">SQLite R * Treeモジュールは、&lt;a href=&quot;c3ref/create_module&quot;&gt;仮想テーブル&lt;/a&gt;として実装されます。各R * Treeインデックスは、3〜11の奇数列の仮想テーブルです。最初の列は常に64ビットの符号付き整数の主キーです。他の列はペアで、ディメンションごとに1つのペアで、それぞれそのディメンションの最小値と最大値を含みます。したがって、1次元のR * Treeには3つの列があります。 2次元のR * Treeには5つの列があります。 3次元のR * Treeには7つの列があります。 4次元のR * Treeには9つの列があります。また、5次元のR * Treeには11列があります。 SQLite R * Tree実装は、5次元を超えるR * Treeをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="d26287506df7d739659f92d570a45374e9d6b203" translate="yes" xml:space="preserve">
          <source>The SQLite Zipfile Module</source>
          <target state="translated">SQLite Zipfile モジュール</target>
        </trans-unit>
        <trans-unit id="2a322992d7eadef1cbb665cdba826abcbe8d4bc9" translate="yes" xml:space="preserve">
          <source>The SQLite approach of storing the schema as text has advantages for an embedded relational database. For one, it means that the schema takes up less space in the database file. This is important since a common SQLite usage pattern is to have many small, separate database files instead of putting everything in one big global database file, which is the usual approach for client/server database engines. Since the schema is duplicated in each separate database file, it is important to keep the schema representation compact.</source>
          <target state="translated">スキーマをテキストとして格納するSQLiteのアプローチは、組み込みリレーショナルデータベースにとって利点があります。まず、スキーマがデータベースファイルの中でより少ないスペースを占めることを意味します。SQLiteの一般的な使用パターンは、クライアント/サーバーデータベースエンジンの通常のアプローチである、1つの大きなグローバルデータベースファイルにすべてを格納するのではなく、多くの小さな別々のデータベースファイルを持つことであるため、これは重要です。スキーマはそれぞれの個別のデータベースファイルで重複しているので、スキーマ表現をコンパクトに保つことが重要です。</target>
        </trans-unit>
        <trans-unit id="4156bb8a5bb8b9775d5b39350cba56f0d4323350" translate="yes" xml:space="preserve">
          <source>The SQLite code is broken up into multiple repositories, each described in a separate section below.</source>
          <target state="translated">SQLite のコードは複数のリポジトリに分割されており、それぞれ以下の別のセクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="50c10f7a2161303f10be1e978ecf9c20c8b5ff8a" translate="yes" xml:space="preserve">
          <source>The SQLite community has been a kind, welcoming and well-mannered community since its inception nearly two decades ago. In that time many of the qualities we've worked hard to bring to our project - safety, consistency, usability and integrity among them - have become part of our community's culture as well. Much like the care and effort we've put into securing the longevity of SQLite, we'd like to do the same for that community by clarifying our goals and expectations for all involved. To that end the SQLite project has officially adopted the &lt;a href=&quot;https://www.mozilla.org/en-US/about/governance/policies/participation/&quot;&gt;Mozilla Community Participation Guidelines&lt;/a&gt; as its Code of Conduct with the exception that the reporting email address is changed to &lt;a href=&quot;mailto:codeofconduct@sqlite.org&quot;&gt;codeofconduct@sqlite.org&lt;/a&gt;. While we are not doing so in reaction to any current or ongoing issues, we believe that this will be a helpful part of maintaining the long-term sustainability of the project.</source>
          <target state="translated">SQLiteコミュニティは、約20年前の創業以来、親切で親しみやすく、礼儀正しいコミュニティでした。その間、私たちがプロジェクトにもたらすために一生懸命取り組んだ資質の多く-それらの間の安全性、一貫性、使いやすさ、および整合性-は、コミュニティの文化の一部にもなりました。 SQLiteの寿命を確保するために注力した努力と同様に、関係者全員の目標と期待を明確にすることで、コミュニティに対しても同じことを行いたいと考えています。そのため、SQLiteプロジェクトは、行動規範として&lt;a href=&quot;https://www.mozilla.org/en-US/about/governance/policies/participation/&quot;&gt;Mozilla Community Participationガイドライン&lt;/a&gt;を正式に採用しています。ただし、報告用メールアドレスは&lt;a href=&quot;mailto:codeofconduct@sqlite.org&quot;&gt;codeofconduct@sqlite.orgに&lt;/a&gt;変更されています。。現在または進行中の問題に対処するためにそうしているわけではありませんが、これはプロジェクトの長期的な持続可能性を維持するための有用な部分になると考えています。</target>
        </trans-unit>
        <trans-unit id="6e54c3c7cfbe74cbcff4d32cf11ceb85c2d59225" translate="yes" xml:space="preserve">
          <source>The SQLite core and its memory allocation subsystem provides the following capabilities:</source>
          <target state="translated">SQLiteコアとそのメモリ割り当てサブシステムは、以下の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="4a8db7c1ed47d07dc8525eeb4fe9e3c2cadccf8a" translate="yes" xml:space="preserve">
          <source>The SQLite core calls the xBestIndex method when it is compiling a query that involves a virtual table. In other words, SQLite calls this method when it is running &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; or the equivalent. By calling this method, the SQLite core is saying to the virtual table that it needs to access some subset of the rows in the virtual table and it wants to know the most efficient way to do that access. The xBestIndex method replies with information that the SQLite core can then use to conduct an efficient search of the virtual table.</source>
          <target state="translated">SQLiteコアは、仮想テーブルを含むクエリをコンパイルするときにxBestIndexメソッドを呼び出します。つまり、SQLiteは、&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;または同等の機能を実行しているときにこのメソッドを呼び出します。このメソッドを呼び出すことにより、SQLiteコアは仮想テーブルの行のサブセットにアクセスする必要があることを仮想テーブルに伝え、そのアクセスを行う最も効率的な方法を知りたいと考えています。xBestIndexメソッドは、SQLiteコアが仮想テーブルの効率的な検索を実行するために使用できる情報で応答します。</target>
        </trans-unit>
        <trans-unit id="0101337cc0cb6fad83f4b1e21e8fd59c6d10699a" translate="yes" xml:space="preserve">
          <source>The SQLite core communicates with the xBestIndex method by filling in certain fields of the &lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_info&lt;/a&gt; structure and passing a pointer to that structure into xBestIndex as the second parameter. The xBestIndex method fills out other fields of this structure which forms the reply. The &lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_info&lt;/a&gt; structure looks like this:</source>
          <target state="translated">SQLiteコアは、&lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_info&lt;/a&gt;構造の特定のフィールドに入力し、その構造へのポインターを2番目のパラメーターとしてxBestIndexに渡すことにより、xBestIndexメソッドと通信します。xBestIndexメソッドは、応答を形成するこの構造の他のフィールドに入力します。&lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_infoの&lt;/a&gt;このような構造になります。</target>
        </trans-unit>
        <trans-unit id="d592f9a3c73be507b58cc4d8ef9e1e11527c40f2" translate="yes" xml:space="preserve">
          <source>The SQLite core contains 5665 &lt;code&gt;assert()&lt;/code&gt; statements that verify function preconditions and postconditions and loop invariants. Assert() is a macro which is a standard part of ANSI-C. The argument is a boolean value that is assumed to always be true. If the assertion is false, the program prints an error message and halts.</source>
          <target state="translated">SQLiteコアには、関数の前提条件と事後条件、およびループ不変条件を検証する5665 &lt;code&gt;assert()&lt;/code&gt; ステートメントが含まれています。Assert（）は、ANSI-Cの標準部分であるマクロです。引数はブール値であり、常にtrueであると見なされます。アサーションがfalseの場合、プログラムはエラーメッセージを出力して停止します。</target>
        </trans-unit>
        <trans-unit id="7a7923d469bddb357e4bafd2e77a5357a3ce8703" translate="yes" xml:space="preserve">
          <source>The SQLite core contains 5855 &lt;code&gt;assert()&lt;/code&gt; statements that verify function preconditions and postconditions and loop invariants. Assert() is a macro which is a standard part of ANSI-C. The argument is a boolean value that is assumed to always be true. If the assertion is false, the program prints an error message and halts.</source>
          <target state="translated">SQLiteコアには、関数の前提条件と事後条件、およびループ不変条件を検証する5855の &lt;code&gt;assert()&lt;/code&gt; ステートメントが含まれています。Assert（）は、ANSI-Cの標準部分であるマクロです。引数は、常に真であると想定されるブール値です。アサーションがfalseの場合、プログラムはエラーメッセージを出力して停止します。</target>
        </trans-unit>
        <trans-unit id="8a046e08f75eaccd925ae647cf15c7aa3a8226b9" translate="yes" xml:space="preserve">
          <source>The SQLite core invokes the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlsyncomitted&quot;&gt;SQLITE_FCNTL_SYNC_OMITTED&lt;/a&gt;&lt;a href=&quot;c3ref/file_control&quot;&gt;file control&lt;/a&gt; to the VFS in place of a call to xSync if the database has &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous&lt;/a&gt; set to OFF.</source>
          <target state="translated">データベースで&lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA同期&lt;/a&gt;がオフに設定されている場合、SQLiteコアは、&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlsyncomitted&quot;&gt;xSyncを&lt;/a&gt;呼び出す代わりに、SQLITE_FCNTL_SYNC_OMITTED &lt;a href=&quot;c3ref/file_control&quot;&gt;ファイルコントロール&lt;/a&gt;をVFSに呼び出します。</target>
        </trans-unit>
        <trans-unit id="9454a146cdf6bd63746f75afc554dedcf8a89f3d" translate="yes" xml:space="preserve">
          <source>The SQLite core invokes this method in order to find the value for the N-th column of the current row. N is zero-based so the first column is numbered 0. The xColumn method may return its result back to SQLite using one of the following interface:</source>
          <target state="translated">SQLite コアは、現在の行の N 番目の列の値を見つけるためにこのメソッドを呼び出します。N はゼロベースなので、最初の列には 0 が付けられます。 xColumn メソッドは、以下のインターフェイスのいずれかを使用して結果を SQLite に返すことができます。</target>
        </trans-unit>
        <trans-unit id="81909f2a4a51a96b134a34a4888c44983e2d76d3" translate="yes" xml:space="preserve">
          <source>The SQLite core uses these routines for thread synchronization. Though they are intended for internal use by SQLite, code that links against SQLite is permitted to use any of these routines.</source>
          <target state="translated">SQLite コアはこれらのルーチンをスレッド同期のために使用します。これらのルーチンは SQLite の内部での使用を目的としていますが、SQLite にリンクするコードは、これらのルーチンのいずれかを使用することが許可されています。</target>
        </trans-unit>
        <trans-unit id="922f1172309b4b736f1e305e3916cca7c4256be1" translate="yes" xml:space="preserve">
          <source>The SQLite core uses these three routines for all of its own internal memory allocation needs. &quot;Core&quot; in the previous sentence does not include operating-system specific &lt;a href=&quot;../vfs&quot;&gt;VFS&lt;/a&gt; implementation. The Windows VFS uses native malloc() and free() for some operations.</source>
          <target state="translated">SQLiteコアは、独自の内部メモリ割り当てのニーズすべてにこれら3つのルーチンを使用します。前の文の「コア」には、オペレーティングシステム固有の&lt;a href=&quot;../vfs&quot;&gt;VFS&lt;/a&gt;実装は含まれていません。Windows VFSは、一部の操作にネイティブのmalloc（）とfree（）を使用します。</target>
        </trans-unit>
        <trans-unit id="a9334c44f83a523ef26ab7a77c74c4218d746143" translate="yes" xml:space="preserve">
          <source>The SQLite core uses these three routines for all of its own internal memory allocation needs. &quot;Core&quot; in the previous sentence does not include operating-system specific &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; implementation. The Windows VFS uses native malloc() and free() for some operations.</source>
          <target state="translated">SQLiteコアは、独自の内部メモリ割り当てのニーズすべてにこれら3つのルーチンを使用します。前の文の「コア」には、オペレーティングシステム固有の&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;実装は含まれていません。Windows VFSは、一部の操作にネイティブのmalloc（）とfree（）を使用します。</target>
        </trans-unit>
        <trans-unit id="c22d82769d3da3cfaaf7c30bf60dfe3d4e431d6a" translate="yes" xml:space="preserve">
          <source>The SQLite core uses these three routines for all of its own internal memory allocation needs. &quot;Core&quot; in the previous sentence does not include operating-system specific VFS implementation. The Windows VFS uses native malloc() and free() for some operations.</source>
          <target state="translated">SQLiteコアは、これら3つのルーチンを使用して、独自の内部メモリ割り当ての必要性のすべてに使用します。&quot;前の文中の「コア」には、オペレーティングシステム固有のVFS実装は含まれていません。Windows の VFS では、ネイティブの malloc()と free()をいくつかの操作に使用しています。</target>
        </trans-unit>
        <trans-unit id="310e86b319144a9b8ab497d9dda0fd59a92fa402" translate="yes" xml:space="preserve">
          <source>The SQLite core will call &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; early. The auxiliary C code file can contain an implementation of sqlite3_initialize() that registers an appropriate VFS and also perhaps initializes an alternative mutex system (if mutexes are required) or does any memory allocation subsystem initialization that is required. The SQLite core never calls &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; but it is part of the official SQLite API and is not otherwise provided when compiled with -DSQLITE_OS_OTHER=1, so the auxiliary C code file should probably provide it for completeness.</source>
          <target state="translated">SQLiteコアは&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize（）を&lt;/a&gt;早く呼び出します。補助Cコードファイルには、適切なVFSを登録するsqlite3_initialize（）の実装を含めることができます。また、ミューテックスが必要な場合は代替のミューテックスシステムを初期化したり、必要なメモリ割り当てサブシステムの初期化を行うこともできます。SQLiteコアが&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown（）を&lt;/a&gt;呼び出すことはありませんが、公式のSQLite APIの一部であり、-DSQLITE_OS_OTHER = 1でコンパイルした場合は提供されないため、完全を期すために補助Cコードファイルで提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3389235261ef05c3ad08031ba3272b1839ea345" translate="yes" xml:space="preserve">
          <source>The SQLite core, including the unix &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;, has 100% branch test coverage under &lt;a href=&quot;th3&quot;&gt;TH3&lt;/a&gt; in its default configuration as measured by &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Gcov.html&quot;&gt;gcov&lt;/a&gt;. Extensions such as FTS3 and RTree are excluded from this analysis.</source>
          <target state="translated">UNIX &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;を含むSQLiteコアは、&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Gcov.html&quot;&gt;gcovで&lt;/a&gt;測定されたデフォルト構成で&lt;a href=&quot;th3&quot;&gt;TH3の&lt;/a&gt;下で100％分岐テストカバレッジを持っています。FTS3やRTreeなどの拡張機能は、この分析から除外されています。</target>
        </trans-unit>
        <trans-unit id="25f0f08e26b5d1ff28a9d0772acbc6ec5d4dc8bf" translate="yes" xml:space="preserve">
          <source>The SQLite database allows multiple simultaneous readers or a single writer but not both. If any process is writing to the database no other process is allows to read or write. If any process is reading the database other processes are allowed to read but not write. The entire database shared a single lock.</source>
          <target state="translated">SQLiteデータベースでは、複数の同時読み込みや単一の書き込みが可能ですが、その両方はできません。いずれかのプロセスがデータベースに書き込みを行っている場合、他のプロセスは読み書きできません。いずれかのプロセスがデータベースを読んでいる場合、他のプロセスは読むことはできますが、書くことはできません。データベース全体が単一のロックを共有していました。</target>
        </trans-unit>
        <trans-unit id="c9e7754ee2f8ef030d3e0c4851d0ab23e5bf681e" translate="yes" xml:space="preserve">
          <source>The SQLite database file (&quot;self2014.sqlar&quot;) is about a half percent smaller than the equivalent ODP file! How can this be? Apparently the ZIP archive generator logic in NeoOffice is not as efficient as it could be, because when the same pile-of-files is recompressed using the command-line &quot;zip&quot; utility, one gets a file (&quot;zip.odp&quot;) that is smaller still, by another half percent, as seen in the third line above. So, a well-written ZIP archive can be slightly smaller than the equivalent SQLite database, as one would expect. But the difference is slight. The key take-away is that an SQLite database is size-competitive with a ZIP archive.</source>
          <target state="translated">SQLiteデータベースファイル(&quot;self2014.sqlar&quot;)は、同等のODPファイルよりも約半分の割合で小さくなっています。これはどうしてなのでしょうか?なぜなら、同じファイルの山をコマンドラインの &quot;zip &quot;ユーティリティを使って再圧縮すると、上の3行目にあるように、さらに半分の割合でより小さいファイル(&quot;zip.odp&quot;)が得られるからです。つまり、よく書かれた ZIP アーカイブは、期待通り、同等の SQLite データベースよりもわずかに小さくなる可能性があります。しかし、その差はわずかです。重要なのは、SQLite データベースは ZIP アーカイブとサイズ競争力があるということです。</target>
        </trans-unit>
        <trans-unit id="20b6f43ea15deb4c44a24b00c6944cb60a4b8d86" translate="yes" xml:space="preserve">
          <source>The SQLite database file format is also stable. All releases of SQLite version 3 can read and write database files created by the very first SQLite 3 release (version 3.0.0) going back to 2004-06-18. This is &quot;backwards compatibility&quot;. The developers promise to maintain backwards compatibility of the database file format for all future releases of SQLite 3. &quot;Forwards compatibility&quot; means that older releases of SQLite can also read and write databases created by newer releases. SQLite is usually, but not completely forwards compatible.</source>
          <target state="translated">SQLite データベースファイル形式も安定しています。SQLiteバージョン3のすべてのリリースは、2004-06-18にさかのぼり、最初のSQLite 3のリリース(バージョン3.0.0)によって作成されたデータベースファイルを読み書きすることができます。これが「後方互換性」です。開発者は、SQLite 3 の将来のすべてのリリースにおいて、データベースファイル形式の後方互換性を維持することを約束しています。&quot;後方互換性 &quot;とは、古いリリースのSQLiteでも、新しいリリースのSQLiteで作成されたデータベースを読み書きできることを意味します。SQLite は通常、完全な前方互換性はありません。</target>
        </trans-unit>
        <trans-unit id="0b9e7e4e72268ed8ff0aecd3bce3fa20aed32bae" translate="yes" xml:space="preserve">
          <source>The SQLite developers do not write CVEs. Any CVEs you find on SQLite are generated by third-parties, often without any input from the core developers. A common scenario is that someone will report a bug in SQLite, which will promptly be fixed, then weeks later a CVE for that bug will appear, unbeknownst to the developers.</source>
          <target state="translated">SQLite の開発者は CVE を書いていません。SQLite上で見つけたCVEは、サードパーティによって生成されたものであり、多くの場合、コア開発者からの入力はありません。一般的なシナリオは、誰かがSQLiteのバグを報告し、それがすぐに修正された後、数週間後に開発者が知らない間にそのバグのCVEが現れていたというものです。</target>
        </trans-unit>
        <trans-unit id="a9896b9f0acf4d53bbeb650db03c052b65e4b39c" translate="yes" xml:space="preserve">
          <source>The SQLite developers use an on-line checklist to coordinate testing activity and to verify that all tests pass prior each SQLite release. &lt;a href=&quot;http://www.sqlite.org/checklists/index.html&quot;&gt;Past checklists&lt;/a&gt; are retained for historical reference. (The checklists are read-only for anonymous internet viewers, but developers can log in and update checklist items in their web browsers.) The use of checklists for SQLite testing and other development activities is inspired by</source>
          <target state="translated">SQLite開発者は、オンラインチェックリストを使用して、テストアクティビティを調整し、すべてのテストが各SQLiteリリースの前に合格することを確認します。&lt;a href=&quot;http://www.sqlite.org/checklists/index.html&quot;&gt;過去のチェックリスト&lt;/a&gt;は、履歴参照のために保持されます。（チェックリストは匿名のインターネットビューアでは読み取り専用ですが、開発者はWebブラウザでログインしてチェックリストの項目を更新できます。）SQLiteのテストやその他の開発活動でのチェックリストの使用は、</target>
        </trans-unit>
        <trans-unit id="9c957f8bdf8ce50dc09723537398c60a4991b0ad" translate="yes" xml:space="preserve">
          <source>The SQLite development team fixes bugs promptly, usually within hours of discovery. New releases of SQLite are issued if the bug seems likely to impact real-world applications.</source>
          <target state="translated">SQLite 開発チームはバグを発見してから通常数時間以内に迅速に修正します。実際のアプリケーションに影響を与えそうなバグがあれば、SQLite の新しいリリースが発行されます。</target>
        </trans-unit>
        <trans-unit id="4f35e69a2395e538db8157dc3dbb68d5b6f19b6e" translate="yes" xml:space="preserve">
          <source>The SQLite file format is cross-platform. A database file written on one machine can be copied to and used on a different machine with a different architecture. Big-endian or little-endian, 32-bit or 64-bit does not matter. All machines use the same file format. Furthermore, the developers have pledged to keep the file format stable and backwards compatible, so newer versions of SQLite can read and write older database files.</source>
          <target state="translated">SQLiteファイルフォーマットはクロスプラットフォームです。あるマシンに書かれたデータベースファイルを、異なるアーキテクチャの異なるマシンにコピーして使用することができます。ビッグエンディアンかリトルエンディアンか、32ビットか64ビットかは関係ありません。すべてのマシンは同じファイル形式を使用します。さらに、開発者はファイルフォーマットの安定性と下位互換性を保つことを約束していますので、新しいバージョンのSQLiteでも古いデータベースファイルを読み書きすることができます。</target>
        </trans-unit>
        <trans-unit id="a470f0b14147aeef040dd5381d7be5b2946cd2d3" translate="yes" xml:space="preserve">
          <source>The SQLite interface elements can be grouped into three categories:</source>
          <target state="translated">SQLite インターフェースの要素は、3 つのカテゴリにグループ化することができます。</target>
        </trans-unit>
        <trans-unit id="d2127d3816b52817dc6b4ce63d16e29894ba0878" translate="yes" xml:space="preserve">
          <source>The SQLite library consists of 102 files of C code (as of &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;Version 3.9.0&lt;/a&gt; - 2015-10-14) in the core with 32 additional files that implement the &lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;, &lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt;, &lt;a href=&quot;rtree&quot;&gt;RTREE&lt;/a&gt;, &lt;a href=&quot;dbstat&quot;&gt;DBSTAT&lt;/a&gt;, &lt;a href=&quot;json1&quot;&gt;JSON1&lt;/a&gt;, and &lt;a href=&quot;rbu&quot;&gt;RBU&lt;/a&gt; extensions. Of the 102 main source files, about 75% are C code and about 25% are C header files. Most of these are &quot;source&quot; files in the sense that they are stored in the &lt;a href=&quot;https://www.sqlite.org/src&quot;&gt;SQLite version control system&lt;/a&gt; and are edited manually in an ordinary text editor. But some of the C-language files are generated using scripts or auxiliary programs. For example, the &lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=src/parse.y&quot;&gt;parse.y&lt;/a&gt; file contains an LALR(1) grammar of the SQL language which is compiled down into are parser in files &quot;parse.c&quot; and &quot;parse.h&quot; by the &lt;a href=&quot;lemon&quot;&gt;Lemon parser generator&lt;/a&gt;.</source>
          <target state="translated">SQLiteライブラリは、コア内の102個のCコードのファイル（&lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;バージョン3.9.0-2015-10-14現在&lt;/a&gt;）と、&lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;、&lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt;、&lt;a href=&quot;rtree&quot;&gt;RTREE&lt;/a&gt;、&lt;a href=&quot;dbstat&quot;&gt;DBSTAT&lt;/a&gt;、&lt;a href=&quot;json1&quot;&gt;JSON1&lt;/a&gt;、および&lt;a href=&quot;rbu&quot;&gt;RBU&lt;/a&gt;拡張を実装する32個の追加ファイルで構成されています。 102のメインソースファイルのうち、約75％がCコードで、約25％がCヘッダーファイルです。これらのほとんどは、&lt;a href=&quot;https://www.sqlite.org/src&quot;&gt;SQLiteバージョン管理システムに&lt;/a&gt;格納され、通常のテキストエディターで手動で編集されるという意味で、「ソース」ファイルです。ただし、一部のC言語ファイルは、スクリプトまたは補助プログラムを使用して生成されます。たとえば、&lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=src/parse.y&quot;&gt;parse.y&lt;/a&gt;ファイルには、SQL言語のLALR（1）文法が含まれています。これは、&lt;a href=&quot;lemon&quot;&gt;レモンパーサージェネレーター&lt;/a&gt;によってファイル「parse.c」と「parse.h」のパーサーにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="7fdfec2d5c500b7ac74b77876e6dfdaa2cdecb05" translate="yes" xml:space="preserve">
          <source>The SQLite library exports the string constant named &lt;b&gt;sqlite_version&lt;/b&gt; which contains the version number of the library. The header file contains a macro SQLITE_VERSION with the same information. If desired, a program can compare the SQLITE_VERSION macro against the &lt;b&gt;sqlite_version&lt;/b&gt; string constant to verify that the version number of the header file and the library match.</source>
          <target state="translated">SQLiteライブラリは、ライブラリのバージョン番号を含む&lt;b&gt;sqlite_version&lt;/b&gt;という名前の文字列定数をエクスポートします。ヘッダーファイルには、同じ情報を持つマクロSQLITE_VERSIONが含まれています。必要に応じて、プログラムはSQLITE_VERSIONマクロを&lt;b&gt;sqlite_version&lt;/b&gt;文字列定数と比較して、ヘッダーファイルとライブラリのバージョン番号が一致することを確認できます。</target>
        </trans-unit>
        <trans-unit id="3f89e1941b8b597af45ed78a7c716ad9e7232f89" translate="yes" xml:space="preserve">
          <source>The SQLite library is designed to be very easy to use from a &lt;a href=&quot;http://www.tcl-lang.org&quot;&gt;Tcl or Tcl/Tk&lt;/a&gt; script. SQLite began as a &lt;a href=&quot;http://www.tcl-lang.org/doc/tea/&quot;&gt;Tcl extension&lt;/a&gt; and the primary &lt;a href=&quot;testing&quot;&gt;test suite&lt;/a&gt; for SQLite is written in TCL. SQLite can be used with any programming language, but its connections to TCL run deep.</source>
          <target state="translated">SQLiteライブラリは、&lt;a href=&quot;http://www.tcl-lang.org&quot;&gt;TclまたはTcl / Tk&lt;/a&gt;スクリプトから非常に使いやすいように設計されています。 SQLiteは&lt;a href=&quot;http://www.tcl-lang.org/doc/tea/&quot;&gt;Tcl拡張&lt;/a&gt;として始まり、SQLite の主要な&lt;a href=&quot;testing&quot;&gt;テストスイート&lt;/a&gt;はTCLで記述されています。 SQLiteは任意のプログラミング言語で使用できますが、TCLへの接続は深く実行されます。</target>
        </trans-unit>
        <trans-unit id="f0e8965a9252a8aca8a477026acb0a17bd84805b" translate="yes" xml:space="preserve">
          <source>The SQLite library is designed to be very easy to use from a C or C++ program. This document gives an overview of the C/C++ programming interface.</source>
          <target state="translated">SQLiteライブラリは、CまたはC++プログラムから非常に使いやすいように設計されています。このドキュメントでは、C/C++プログラミングインターフェイスの概要を説明します。</target>
        </trans-unit>
        <trans-unit id="0602c28d1654d00a16d8fb7d7632cbb5225eb5e8" translate="yes" xml:space="preserve">
          <source>The SQLite library may need less RAM since it shares pages with the operating-system page cache and does not always need its own copy of working pages.</source>
          <target state="translated">SQLite ライブラリはオペレーティングシステムのページキャッシュとページを共有しているため、RAM が少なくて済むかもしれません。</target>
        </trans-unit>
        <trans-unit id="b68ac5f0b4be242c75b75b113e85779b0d2d24fb" translate="yes" xml:space="preserve">
          <source>The SQLite library supplies the VDBE with a pointer to the callback function and the &lt;b&gt;pUserData&lt;/b&gt; pointer. (Both the callback and the user data were originally passed in as arguments to the &lt;b&gt;sqlite_exec()&lt;/b&gt; API function.) The job of the VDBE is to come up with values for &lt;b&gt;nColumn&lt;/b&gt;, &lt;b&gt;azData[]&lt;/b&gt;, and &lt;b&gt;azColumnName[]&lt;/b&gt;. &lt;b&gt;nColumn&lt;/b&gt; is the number of columns in the results, of course. &lt;b&gt;azColumnName[]&lt;/b&gt; is an array of strings where each string is the name of one of the result columns. &lt;b&gt;azData[]&lt;/b&gt; is an array of strings holding the actual data.</source>
          <target state="translated">SQLiteライブラリは、VDBEにコールバック関数へのポインターと&lt;b&gt;pUserData&lt;/b&gt;ポインターを&lt;b&gt;提供し&lt;/b&gt;ます。（コールバックとユーザーデータの両方が、最初は引数として&lt;b&gt;sqlite_exec（）&lt;/b&gt; API関数に渡されました。）VDBEの仕事は、&lt;b&gt;nColumn&lt;/b&gt;、&lt;b&gt;azData []&lt;/b&gt;、および&lt;b&gt;azColumnName []の&lt;/b&gt;値を&lt;b&gt;考え出すこと&lt;/b&gt;です。&lt;b&gt;もちろん&lt;/b&gt;、&lt;b&gt;nColumn&lt;/b&gt;は結果の列数です。&lt;b&gt;azColumnName []&lt;/b&gt;は文字列の配列で、各文字列は結果列の1つの名前です。&lt;b&gt;azData []&lt;/b&gt;は、実際のデータを保持する文字列の配列です。</target>
        </trans-unit>
        <trans-unit id="bec59993baf9ef121d8c6051be0842d34bbcc286" translate="yes" xml:space="preserve">
          <source>The SQLite library was compiled with &lt;a href=&quot;compile#use_uri&quot;&gt;-DSQLITE_USE_URI=1&lt;/a&gt;.</source>
          <target state="translated">SQLiteライブラリは&lt;a href=&quot;compile#use_uri&quot;&gt;-DSQLITE_USE_URI = 1で&lt;/a&gt;コンパイルされました。</target>
        </trans-unit>
        <trans-unit id="e9d0a1ae4dbbafaabd699c25677e883038d9a262" translate="yes" xml:space="preserve">
          <source>The SQLite project provides a simple command-line program named &lt;b&gt;sqlite3&lt;/b&gt; (or &lt;b&gt;sqlite3.exe&lt;/b&gt; on Windows) that allows the user to manually enter and execute SQL statements against an SQLite database or against a &lt;a href=&quot;#zipdb&quot;&gt;ZIP archive&lt;/a&gt;. This document provides a brief introduction on how to use the &lt;b&gt;sqlite3&lt;/b&gt; program.</source>
          <target state="translated">SQLiteプロジェクトは、&lt;b&gt;sqlite3&lt;/b&gt;（またはWindowsでは&lt;b&gt;sqlite3.exe&lt;/b&gt;）という名前の単純なコマンドラインプログラムを提供します。これにより、ユーザーはSQLiteデータベースまたは&lt;a href=&quot;#zipdb&quot;&gt;ZIPアーカイブ&lt;/a&gt;に対してSQLステートメントを手動で入力して実行できます。このドキュメントでは、&lt;b&gt;sqlite3&lt;/b&gt;プログラムの使用方法について簡単に紹介します。</target>
        </trans-unit>
        <trans-unit id="f3d928b1fc0f8261eeda1295ec9247d5985e38f7" translate="yes" xml:space="preserve">
          <source>The SQLite project provides a simple command-line program named &lt;b&gt;sqlite3&lt;/b&gt; (or &lt;b&gt;sqlite3.exe&lt;/b&gt; on Windows) that allows the user to manually enter and execute SQL statements against an SQLite database. This document provides a brief introduction on how to use the &lt;b&gt;sqlite3&lt;/b&gt; program.</source>
          <target state="translated">SQLiteプロジェクトは、&lt;b&gt;sqlite3&lt;/b&gt;（Windowsでは&lt;b&gt;sqlite3.exe&lt;/b&gt;）という名前のシンプルなコマンドラインプログラムを提供します。これにより、ユーザーはSQLiteデータベースに対して手動でSQLステートメントを入力して実行できます。このドキュメントでは、&lt;b&gt;sqlite3&lt;/b&gt;プログラムの使用方法について簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="c372f90b5ac62e99b6357128106b66701a0411a3" translate="yes" xml:space="preserve">
          <source>The SQLite query planner will consider using an index on an expression when the expression that is indexed appears in the WHERE clause or in the ORDER BY clause of a query,</source>
          <target state="translated">SQLite クエリプランナーは、インデックスが付けられた式がクエリの WHERE 句や ORDER BY 句に現れた場合、式に対するインデックスの使用を考慮します。</target>
        </trans-unit>
        <trans-unit id="6dfbc1d18bbce16026bdcc86a5bffbbe6b1beb8b" translate="yes" xml:space="preserve">
          <source>The SQLite source code and the &lt;a href=&quot;testing#tcl&quot;&gt;TCL test suite&lt;/a&gt; are stored together in a single repository. This one repository is all that is required to build the SQLite. The source repository is public and is readable by anonymous passers by on the internet.</source>
          <target state="translated">SQLiteソースコードと&lt;a href=&quot;testing#tcl&quot;&gt;TCLテストスイート&lt;/a&gt;は、1つのリポジトリに一緒に保存されます。SQLiteを構築するために必要なのは、この1つのリポジトリだけです。ソースリポジトリは公開されており、匿名の通行人がインターネットで読むことができます。</target>
        </trans-unit>
        <trans-unit id="038ea963840df99a058067d40caa3b0cbd33dedb" translate="yes" xml:space="preserve">
          <source>The SQLite source code contains 1084 uses of the &lt;code&gt;testcase()&lt;/code&gt; macro.</source>
          <target state="translated">SQLiteソースコードには、 &lt;code&gt;testcase()&lt;/code&gt; マクロの1084回の使用が含まれています。</target>
        </trans-unit>
        <trans-unit id="1097f713df32cd3a870e17f648d7622d77d22cd2" translate="yes" xml:space="preserve">
          <source>The SQLite source code contains 992 uses of the &lt;code&gt;testcase()&lt;/code&gt; macro.</source>
          <target state="translated">SQLiteソースコードには、 &lt;code&gt;testcase()&lt;/code&gt; マクロの992の使用法が含まれています。</target>
        </trans-unit>
        <trans-unit id="200e89ebce3af8e9c7c026a8d18cac87a1da0318" translate="yes" xml:space="preserve">
          <source>The SQLite source code contains literally thousands of assert() statements used to verify internal assumptions and subroutine preconditions and postconditions. These assert() statements are normally turned off (they generate no code) since turning them on makes SQLite run approximately three times slower. But for testing and analysis, it is useful to turn the assert() statements on. The SQLITE_DEBUG compile-time option does this.</source>
          <target state="translated">SQLiteのソースコードには、文字通り何千ものassert()文が含まれており、内部の仮定やサブルーチンの前提条件や事後条件を検証するために使用されています。これらの assert()文は通常オフ(コードを生成しない)に設定されていますが、これをオンにすると SQLite の動作が約 3 倍遅くなるからです。しかし、テストや分析のためには assert()文をオンにしておくと便利です。SQLITE_DEBUG コンパイル時オプションがこれを行います。</target>
        </trans-unit>
        <trans-unit id="7203161cfe6b6f33980e05611daeaed418ec5ae9" translate="yes" xml:space="preserve">
          <source>The SQLite source code contains multiple implementations of these mutex routines. An appropriate implementation is selected automatically at compile-time. The following implementations are available in the SQLite core:</source>
          <target state="translated">SQLite のソースコードには、これらのミューテックスルーチンの複数の実装が含まれています。適切な実装はコンパイル時に自動的に選択されます。SQLite コアでは以下の実装が利用可能です。</target>
        </trans-unit>
        <trans-unit id="519e11bf2b879a67e8b0e9134459d439da57e623" translate="yes" xml:space="preserve">
          <source>The SQLite source code includes several different memory allocation modules that can be selected at compile-time, or to a limited extent at start-time.</source>
          <target state="translated">SQLite のソースコードには、コンパイル時に選択できる複数の異なるメモリ割り当てモジュールが含まれています。</target>
        </trans-unit>
        <trans-unit id="b459704fa1dc2f133cc1300473552a0909311a3d" translate="yes" xml:space="preserve">
          <source>The SQLite source code provides multiple implementations of these APIs, suitable for varying environments. If SQLite is compiled with the SQLITE_THREADSAFE=0 flag then a no-op mutex implementation that is fast but does no real mutual exclusion is provided. That implementation is suitable for use in single-threaded applications or applications that only use SQLite in a single thread. Other real mutex implementations are provided based on the underlying operating system.</source>
          <target state="translated">SQLite のソースコードでは、これらの API の複数の実装が提供されており、様々な環境に適しています。SQLite が SQLITE_THREADSAFE=0 フラグでコンパイルされている場合、高速ではありますが実際の相互排除を行わないノーオプのミューテックス実装が提供されています。この実装は、シングルスレッドのアプリケーションや、SQLiteをシングルスレッドでのみ使用するアプリケーションでの使用に適しています。その他の本当のミューテックスの実装は、基礎となるオペレーティングシステムに基づいて提供されています。</target>
        </trans-unit>
        <trans-unit id="4146cdfa0001cfa5a66203144506da17c3646968" translate="yes" xml:space="preserve">
          <source>The SQLite source tree actually contains multiple versions of the memory allocator. The default high-speed version found in the &quot;mem1.c&quot; source file is used for most builds. But if the SQLITE_MEMDEBUG flag is enabled, a separate memory allocator the &quot;mem2.c&quot; source file is used instead. The mem2.c allocator implements lots of hooks to do error checking and to simulate memory allocation failures for testing purposes. Both of these allocators use the malloc()/free() implementation in the standard C library.</source>
          <target state="translated">SQLite のソースツリーには、実際には複数のバージョンのメモリアロケータが含まれています。ほとんどのビルドでは、&quot;mem1.c&quot; ソースファイルにあるデフォルトの高速バージョンが使用されます。しかし、SQLITE_MEMDEBUG フラグが有効になっている場合は、&quot;mem2.c&quot; ソースファイルの別のメモリアロケータが代わりに使用されます。mem2.c アロケータには、エラーチェックを行ったり、テスト目的でメモリ割り当ての失敗をシミュレートしたりするための多くのフックが実装されています。これらのアロケータはどちらも標準 C ライブラリの malloc()/free()の実装を使用しています。</target>
        </trans-unit>
        <trans-unit id="4ba1f99040a37a507011c1205b1aef886c686eaf" translate="yes" xml:space="preserve">
          <source>The SQLite version identifier returned by the &lt;a href=&quot;lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id()&lt;/a&gt; SQL function and the &lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_sourceid()&lt;/a&gt; C API and found in the &lt;a href=&quot;c3ref/c_source_id&quot;&gt;SQLITE_SOURCE_ID&lt;/a&gt; macro is now a 64-digit SHA3-256 hash instead of a 40-digit SHA1 hash.</source>
          <target state="translated">SQLiteのバージョン識別子によって返さ&lt;a href=&quot;lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id（）&lt;/a&gt; SQL関数と&lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_sourceid（）&lt;/a&gt; C APIとに見出さ&lt;a href=&quot;c3ref/c_source_id&quot;&gt;SQLITE_SOURCE_IDの&lt;/a&gt;マクロは、現在代わりに40桁のSHA1ハッシュの64桁SHA3​​-256ハッシュです。</target>
        </trans-unit>
        <trans-unit id="0c3d7b8c49e09915f93340abac558621318ffacf" translate="yes" xml:space="preserve">
          <source>The SQLite website (&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;https://www.sqlite.org/&lt;/a&gt;) uses SQLite itself, of course, and as of this writing (2015) it handles about 400K to 500K HTTP requests per day, about 15-20% of which are dynamic pages touching the database. Dynamic content uses &lt;a href=&quot;np1queryprob&quot;&gt;about 200 SQL statements per webpage&lt;/a&gt;. This setup runs on a single VM that shares a physical server with 23 others and yet still keeps the load average below 0.1 most of the time.</source>
          <target state="translated">SQLite Webサイト（&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;https://www.sqlite.org/&lt;/a&gt;）はもちろんSQLite自体を使用しており、この記事（2015）の執筆時点では1日あたり約40万から500万のHTTPリクエストを処理しています。データベースに接触するページ。動的コンテンツは&lt;a href=&quot;np1queryprob&quot;&gt;、Webページごとに約200のSQLステートメントを&lt;/a&gt;使用します。このセットアップは、物理サーバーを他の23と共有する単一のVMで実行されますが、ほとんどの場合、平均負荷を0.1以下に保ちます。</target>
        </trans-unit>
        <trans-unit id="dc3cc55be8b0168568fc5c682e636d1909810e07" translate="yes" xml:space="preserve">
          <source>The SQLite-specific printf() supports a new flag (!) called the &quot;alternate-form-2&quot; flag. The alternate-form-2 flag changes the processing of floating-point conversions in subtle ways so that the output is always an SQL-compatible text representation of a floating-point number - something that is not possible to achieve with standard-library printf(). For string substitutions, the alternate-form-2 flag causes the width and precision to be measured in characters instead of bytes, which simplifies processing of strings containing multi-byte UTF8 characters.</source>
          <target state="translated">SQLite固有のprintf()は、&quot;alternate-form-2 &quot;フラグと呼ばれる新しいフラグ(!)をサポートしています。alternate-form-2フラグは、浮動小数点変換の処理を微妙に変更し、出力が常にSQL互換性のある浮動小数点数のテキスト表現になるようにします。文字列の置換については、 alternate-form-2 フラグにより、幅と精度がバイトではなく文字で測定されるようになります。</target>
        </trans-unit>
        <trans-unit id="ab1ef24a2c3d89dbbf816b75c5ebad085546d51d" translate="yes" xml:space="preserve">
          <source>The SUM function detects integer overflow and converts to accumulating an approximate result using floating point numbers</source>
          <target state="translated">SUM関数は、整数のオーバーフローを検出し、浮動小数点数を用いた近似結果の累積に変換します。</target>
        </trans-unit>
        <trans-unit id="9d27464a9b4c0f0bdd924575293003beb50c81e1" translate="yes" xml:space="preserve">
          <source>The SUM() function throws an error on integer overflow.</source>
          <target state="translated">SUM()関数は、整数オーバーフローでエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="d583a21e8e6e4ba4fbb7f5a178c04bb7372f87c1" translate="yes" xml:space="preserve">
          <source>The Schema Table</source>
          <target state="translated">スキーマテーブル</target>
        </trans-unit>
        <trans-unit id="7cc003a9427832539005b297ca058e10476ece22" translate="yes" xml:space="preserve">
          <source>The Session Extension</source>
          <target state="translated">セッション拡張</target>
        </trans-unit>
        <trans-unit id="0aa8192c55de05490d2622bfdb109c271f14a02d" translate="yes" xml:space="preserve">
          <source>The Spellfix1 Virtual Table</source>
          <target state="translated">Spellfix1の仮想表</target>
        </trans-unit>
        <trans-unit id="7366e749b34cc79e46fd62658a2ec13bee8b7b92" translate="yes" xml:space="preserve">
          <source>The T argument is the name of the target database file. The A argument is the name of the RBU database file. The S argument is the name of a &quot;state database&quot; used to store state information needed to resume the update after an interruption. The S argument can be NULL in which case the state information is stored in the RBU database in various tables whose names all begin with &quot;rbu_&quot;.</source>
          <target state="translated">T 引数はターゲットデータベースファイルの名前です。A 引数は、RBU データベースファイルの名前です。S 引数は、中断後に更新を再開するために必要な状態情報を格納するために使用される「状態データベース」の名前である。S引数にはNULLを指定することができ、その場合、状態情報は、すべて &quot;rbu_&quot;で始まる名前の様々なテーブルにRBUデータベースに格納される。</target>
        </trans-unit>
        <trans-unit id="b1d051df5b386db985e4647bccdf4da6546279c0" translate="yes" xml:space="preserve">
          <source>The TCL bindings transfer data without necessarily doing a conversion to a string.</source>
          <target state="translated">TCL バインディングは、必ずしも文字列への変換を行わずにデータを転送します。</target>
        </trans-unit>
        <trans-unit id="65bc381e62f8723019edd6efca853c02189bf80a" translate="yes" xml:space="preserve">
          <source>The TCL interface for SQLite is a small module that is added into the regular amalgamation. The result is a new amalgamated source file called &quot;&lt;b&gt;tclsqlite3.c&lt;/b&gt;&quot;. This single source file is all that is needed to generate a shared library that can be loaded into a standard &lt;a href=&quot;http://wiki.tcl-lang.org/2541&quot;&gt;tclsh&lt;/a&gt; or &lt;a href=&quot;http://wiki.tcl-lang.org/2364&quot;&gt;wish&lt;/a&gt; using the &lt;a href=&quot;http://wiki.tcl-lang.org/9830&quot;&gt;TCL load command&lt;/a&gt;, or to generate a standalone tclsh that comes with SQLite built in. A copy of the tcl amalgamation is included on the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;download page&lt;/a&gt; as a file in the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;TEA tarball&lt;/a&gt;.</source>
          <target state="translated">SQLiteのTCLインターフェイスは、通常の融合に追加される小さなモジュールです。結果は、 &quot; &lt;b&gt;tclsqlite3.c&lt;/b&gt; &quot; と呼ばれる新しい統合されたソースファイルです。この単一のソースファイルには、標準にロードすることができ、共有ライブラリを生成するために必要なことすべてです&lt;a href=&quot;http://wiki.tcl-lang.org/2541&quot;&gt;TCLSH&lt;/a&gt;や&lt;a href=&quot;http://wiki.tcl-lang.org/2364&quot;&gt;願い&lt;/a&gt;使用して&lt;a href=&quot;http://wiki.tcl-lang.org/9830&quot;&gt;TCLのloadコマンドを&lt;/a&gt;、またはに建てられたSQLiteが付属してスタンドアロンにtclshを生成する。TCL合併のAコピーされます&lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;TEA tarballの&lt;/a&gt;ファイルとして&lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;ダウンロードページに&lt;/a&gt;含まれています。</target>
        </trans-unit>
        <trans-unit id="f9e41f74fbcda169959b0e1c5ad24699dcf79aca" translate="yes" xml:space="preserve">
          <source>The TEMP database file is very similar to auxiliary database files added using the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; statement, though with a few special properties. The TEMP database is always automatically deleted when the &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; is closed. The TEMP database always uses the &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;synchronous=OFF&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode=PERSIST&lt;/a&gt; PRAGMA settings. And, the TEMP database cannot be used with &lt;a href=&quot;lang_detach&quot;&gt;DETACH&lt;/a&gt; nor can another process &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; the TEMP database.</source>
          <target state="translated">TEMPデータベースファイルは、いくつかの特別なプロパティがありますが、&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;ステートメントを使用して追加された補助データベースファイルと非常に似ています。 TEMPデータベースは、&lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;が閉じられると常に自動的に削除されます。 TEMPデータベースは、常に&lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;Synchronous = OFF&lt;/a&gt;および&lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode = PERSIST&lt;/a&gt; PRAGMA設定を使用します。また、TEMPデータベースを&lt;a href=&quot;lang_detach&quot;&gt;DETACH&lt;/a&gt;とともに使用することも、別のプロセスがTEMPデータベースを&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;することもできません。</target>
        </trans-unit>
        <trans-unit id="53f0498bc726c9a2250102fc1ce88dd0e04a9743" translate="yes" xml:space="preserve">
          <source>The TEMP or TEMPORARY keyword is removed if it occurs after the initial CREATE keyword.</source>
          <target state="translated">TEMP キーワードまたは TEMPORARY キーワードは、最初の CREATE キーワードの後に発生した場合に削除されます。</target>
        </trans-unit>
        <trans-unit id="4b9ade3b04856b7f86ec94b71b3743aaff256ca8" translate="yes" xml:space="preserve">
          <source>The TEMP schema always has synchronous=OFF since the content of of TEMP is ephemeral and is not expected to survive a power outage. Attempts to change the synchronous setting for TEMP are silently ignored.</source>
          <target state="translated">TEMP スキーマは常に synchronous=OFF になっていますが、これは TEMP の内容が一時的なものであり、停電に耐えられるとは考えられないからです。TEMP の同期設定を変更しようとする試みは静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="dd8090269fd066de5e15019d6f63ecc9dd8e6b9f" translate="yes" xml:space="preserve">
          <source>The TEMP_STORE and DEFAULT_TEMP_STORE pragmas now work.</source>
          <target state="translated">TEMP_STORE および DEFAULT_TEMP_STORE プラグマが動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="5dbd6ac1d86267c3b2604d6573027830c458f6aa" translate="yes" xml:space="preserve">
          <source>The TH3 program generator is a TCL script named &quot;&lt;code&gt;mkth3.tcl&lt;/code&gt;&quot;. To generate a test program, one has merely to run this script and supply the names of files containing test modules and configurations on the command line. Test modules are files that use the &quot;&lt;code&gt;.test&lt;/code&gt;&quot; suffix and configurations are files that use the &quot;&lt;code&gt;.cfg&lt;/code&gt;&quot; suffix. A typical invocation of mkth3.tcl might look something like the following:</source>
          <target state="translated">TH3プログラムジェネレーターは、「 &lt;code&gt;mkth3.tcl&lt;/code&gt; 」という名前のTCLスクリプトです。テストプログラムを生成するには、このスクリプトを実行して、コマンドラインでテストモジュールと構成を含むファイルの名前を指定するだけです。テストモジュールは「 &lt;code&gt;.test&lt;/code&gt; 」サフィックスを使用するファイルであり、構成は「 &lt;code&gt;.cfg&lt;/code&gt; 」サフィックスを使用するファイルです。mkth3.tclの一般的な呼び出しは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="b8c8240b8bebcede58e6b71d1007e7276f3ab838" translate="yes" xml:space="preserve">
          <source>The TH3 repository also includes the &quot;multitest.tcl&quot; script, another TCL script used to automate TH3 testing on workstations. Multitest.tcl automatically compiles SQLite, then runs ./th3make repeatedly with a variety of alignments, and captures the output in a succinct summary screen. A typical multitest.tcl run generates output that looks like this:</source>
          <target state="translated">TH3 リポジトリには &quot;multitest.tcl&quot; スクリプトも含まれており、ワークステーション上で TH3 テストを自動化するための TCL スクリプトです。multitest.tclは自動的にSQLiteをコンパイルし、./th3makeを様々なアラインメントで繰り返し実行し、出力を簡潔なサマリー画面でキャプチャします。典型的なmultitest.tclの実行は、以下のような出力を生成します。</target>
        </trans-unit>
        <trans-unit id="b6f9b2cda115a994b187cb0154afbb957f0c6ad7" translate="yes" xml:space="preserve">
          <source>The TH3 source tree contains a scripted name &quot;mutation-test.tcl&quot; that automates the process of &lt;a href=&quot;testing#mutationtests&quot;&gt;mutation testing&lt;/a&gt;.</source>
          <target state="translated">TH3ソースツリーには、ミューテーション&lt;a href=&quot;testing#mutationtests&quot;&gt;テストの&lt;/a&gt;プロセスを自動化するスクリプト名「mutation-test.tcl」が含まれています。</target>
        </trans-unit>
        <trans-unit id="7cdfe00d64176fc80b6e066f8b6b12526ed3a13b" translate="yes" xml:space="preserve">
          <source>The TH3 test harness needs to run on embedded systems that do not necessarily have the ability to spawn child processes, so it uses an in-memory &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; to simulate crashes. The in-memory &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; can be rigged to make a snapshot of the entire filesystem after a set number of I/O operations. Crash tests run in a loop. On each iteration of the loop, the point at which a snapshot is made is advanced until the SQLite operations being tested run to completion without ever hitting a snapshot. Within the loop, after the SQLite operation under test has completed, the filesystem is reverted to the snapshot and random file damage is introduced that is characteristic of the kinds of damage one expects to see following a power loss. Then the database is opened and checks are made to ensure that it is well-formed and that the transaction either ran to completion or was completely rolled back. The interior of the loop is repeated multiple times for each snapshot with different random damage each time.</source>
          <target state="translated">TH3テストハーネスは、必ずしも子プロセスを生成する機能がない組み込みシステムで実行する必要があるため、メモリ内&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;を使用してクラッシュをシミュレートします。インメモリ&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;設定された数のI / O操作の後で、ファイルシステム全体のスナップショットを作成するためにリギングできます。クラッシュテストはループで実行されます。ループの各反復で、スナップショットが作成されるポイントは、テストされるSQLite操作がスナップショットにヒットすることなく完了するまで実行されるまで進められます。ループ内では、テスト中のSQLite操作が完了した後、ファイルシステムがスナップショットに戻り、停電後に予期される種類の損傷に特徴的なランダムファイル損傷が導入されます。次に、データベースが開かれ、整形式であること、およびトランザクションが完全に実行されたか、完全にロールバックされたことを確認するためのチェックが行われます。ループの内部は、スナップショットごとに複数回繰り返され、毎回異なるランダムな損傷が発生します。</target>
        </trans-unit>
        <trans-unit id="17fbf6e9083452ddac2fd083a957049cd4961ff8" translate="yes" xml:space="preserve">
          <source>The TMPDIR environment variable</source>
          <target state="translated">TMPDIR環境変数</target>
        </trans-unit>
        <trans-unit id="03b5c9a4012ba043f6ac023992fea614e9559aac" translate="yes" xml:space="preserve">
          <source>The TRUNCATE journaling mode commits transactions by truncating the rollback journal to zero-length instead of deleting it. On many systems, truncating a file is much faster than deleting the file since the containing directory does not need to be changed.</source>
          <target state="translated">TRUNCATE ジャーナリング・モードは、ロールバック・ジャーナルを削除するのではなく、長さゼロに切り詰めることでトランザクションをコミットします。多くのシステムでは、ファイルを切り詰めることは、ファイルを含むディレクトリを変更する必要がないため、ファイルを削除するよりもはるかに高速です。</target>
        </trans-unit>
        <trans-unit id="8b6a576f2a0740b1d820bb0b389ef9405211a467" translate="yes" xml:space="preserve">
          <source>The Tcl interface to the SQLite library</source>
          <target state="translated">SQLite ライブラリへの Tcl インターフェイス</target>
        </trans-unit>
        <trans-unit id="ea435d43ff01f7eaaaed2d71b4ee7a4a7d014eaf" translate="yes" xml:space="preserve">
          <source>The Tcl script language is used to help translate canonical source code into the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; and to manage testing. Tcl is not used directly by SQLite itself (unless requested by a compile-time option). End users of the SQLite amalgamation sources do not need Tcl.</source>
          <target state="translated">Tclスクリプト言語は、正規のソースコードを&lt;a href=&quot;amalgamation&quot;&gt;融合に&lt;/a&gt;変換し、テストを管理するために使用されます。TclはSQLite自体では直接使用されません（コンパイル時オプションで要求されない限り）。SQLite統合ソースのエンドユーザーはTclを必要としません。</target>
        </trans-unit>
        <trans-unit id="4ea1be33d0917718998fde5f34057649d7f00dc5" translate="yes" xml:space="preserve">
          <source>The Truncate Optimization</source>
          <target state="translated">切り捨て最適化</target>
        </trans-unit>
        <trans-unit id="3d540f11b167e73decc4798633f81039fc8fd06e" translate="yes" xml:space="preserve">
          <source>The UINT Collating Sequence</source>
          <target state="translated">UINT照合シーケンス</target>
        </trans-unit>
        <trans-unit id="99f583c0fd53b39d9c80671b9d84a8130da53c96" translate="yes" xml:space="preserve">
          <source>The UINT collating sequence is not a standard part of SQLite. It must be loaded as a separate extension. The source code to UINT is in the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/uint.c&quot;&gt;uint.c source file&lt;/a&gt; in the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc&quot;&gt;ext/misc/ folder&lt;/a&gt; of the SQLite source tree.</source>
          <target state="translated">UINT照合シーケンスはSQLiteの標準部分ではありません。別の拡張機能としてロードする必要があります。UINTのソースコードは、SQLiteソースツリーの&lt;a href=&quot;https://sqlite.org/src/file/ext/misc&quot;&gt;ext / misc /フォルダー&lt;/a&gt;にある&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/uint.c&quot;&gt;uint.cソースファイル&lt;/a&gt;にあります。</target>
        </trans-unit>
        <trans-unit id="23e7f80ab844fa425934b5fe17e1623d4db7a7ce" translate="yes" xml:space="preserve">
          <source>The UINT collating sequence is not included in standard builds of the SQLite library, but it is loaded by default in the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;. This is typical of the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; which loads various extensions above and beyond what are available in the standard SQLite library.</source>
          <target state="translated">UINT照合シーケンスは、SQLiteライブラリの標準ビルドには含まれていませんが、デフォルトで&lt;a href=&quot;cli&quot;&gt;CLIに&lt;/a&gt;ロードされます。これは、標準のSQLiteライブラリで利用できるものを超えてさまざまな拡張機能をロードする&lt;a href=&quot;cli&quot;&gt;CLIの&lt;/a&gt;典型です。</target>
        </trans-unit>
        <trans-unit id="324d9f9cbd074a1b691e1ceb95aebe8ed7a7d3f9" translate="yes" xml:space="preserve">
          <source>The UINT collating sequence works just like the default BINARY collating sequence for text, except that embedded strings of digits compare in numeric order.</source>
          <target state="translated">UINT照合順序は、埋め込まれた数字の文字列が数値順に比較されることを除いては、テキストのデフォルトのBINARY照合順序と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="0a4b72a7cee3e902b5abc5c6a3d97ab02173e940" translate="yes" xml:space="preserve">
          <source>The UINT collating sequences is a &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; for SQLite that implements a new collating sequence that compares text containing unsigned integers in numeric order.</source>
          <target state="translated">UINT照合シーケンスは、SQLiteの&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能&lt;/a&gt;であり、符号なし整数を含むテキストを数値順に比較する新しい照合シーケンスを実装します。</target>
        </trans-unit>
        <trans-unit id="663111ce13348e029be0eb29fd78279aef78534e" translate="yes" xml:space="preserve">
          <source>The UNION Virtual Table</source>
          <target state="translated">UNIONバーチャルテーブル</target>
        </trans-unit>
        <trans-unit id="83a6780922b4732cbc0add9d73d09070752444e6" translate="yes" xml:space="preserve">
          <source>The UNION operator for compound queries is implemented by creating a transient index in a temporary file and storing the results of the left and right subquery in the transient index, discarding duplicates. After both subqueries have been evaluated, the transient index is walked from beginning to end to generate the final output.</source>
          <target state="translated">複合クエリのUNION演算子は、一時ファイルにトランジェントインデックスを作成し、左右の副問い合わせの結果をトランジェントインデックスに格納し、重複したものを破棄することで実装されます。両方の副問い合わせが評価された後、トランジェントインデックスは最初から最後までウォークされ、最終的な出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="7930c62c86f89ebc6a986709239760afad2bba9f" translate="yes" xml:space="preserve">
          <source>The UNION virtual table (hereafter: &quot;union-vtab&quot;) is a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; that makes multiple independent &lt;a href=&quot;rowidtable&quot;&gt;rowid tables&lt;/a&gt; tables look like a single large table.</source>
          <target state="translated">UNION仮想テーブル（以下：「union-vtab」）は、複数の独立した&lt;a href=&quot;rowidtable&quot;&gt;ROWIDテーブルを&lt;/a&gt; 1つの大きなテーブルのように見せかける&lt;a href=&quot;vtab&quot;&gt;仮想テーブル&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="16da95be83b926d661aef977fab4f723fc62a011" translate="yes" xml:space="preserve">
          <source>The UPDATE and DELETE statements are coded using a template that is very similar to the SELECT statement template. The main difference, of course, is that the end action is to modify the database rather than invoke a callback function. Because it modifies the database it will also use transactions. Let's begin by looking at a DELETE statement:</source>
          <target state="translated">UPDATE文とDELETE文は、SELECT文のテンプレートに非常に似たテンプレートを使用してコード化されています。主な違いは、もちろん、コールバック関数を呼び出すのではなく、データベースを変更することです。データベースを変更するので、トランザクションも使用します。まずはDELETE文を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d012a450cb6e8a62342d872acae64f627c638672" translate="yes" xml:space="preserve">
          <source>The UPDATE statement was not working when the WHERE clause contained some terms that could be satisfied using indices and other terms that could not. Fixed.</source>
          <target state="translated">WHERE句に、インデックスを使用して満たすことができるいくつかの用語と、満たすことができないその他の用語が含まれている場合、UPDATE文が機能していませんでした。修正されました。</target>
        </trans-unit>
        <trans-unit id="33c2760fb2236b7ba6d326e49f2cb15eef8f0600" translate="yes" xml:space="preserve">
          <source>The UPDATE-FROM idea is an extension to SQL that allows an UPDATE statement to be driven by other tables in the database. The &quot;target&quot; table is the specific table that is being updated. With UPDATE-FROM you can join the target table against other tables in the database in order to help compute which rows need updating and what the new values should be on those rows. UPDATE-FROM is supported beginning in SQLite version 3.33.0 (2020-08-14).</source>
          <target state="translated">UPDATE-FROMのアイデアは、データベース内の他のテーブルによってUPDATE文を駆動することを可能にするSQLの拡張です。ターゲット」テーブルは、更新される特定のテーブルです。UPDATE-ROMを使用すると、データベース内の他のテーブルに対してターゲットテーブルを結合することができ、どの行を更新する必要があるのか、また、それらの行の新しい値は何であるべきなのかを計算するのに役立ちます。UPDATE-ROM は SQLite バージョン 3.33.0 (2020-08-14)以降でサポートされています。</target>
        </trans-unit>
        <trans-unit id="a45a66b4cdc4b1cad87f2ad44961d2b0a1e7cb34" translate="yes" xml:space="preserve">
          <source>The Use Of assert() In SQLite</source>
          <target state="translated">SQLite での assert()の使用</target>
        </trans-unit>
        <trans-unit id="91cb86d3be85bb36d2918c344be4f7a7dbe55738" translate="yes" xml:space="preserve">
          <source>The VACUUM INTO command is transactional in the sense that the generated output database is a consistent snapshot of the original database. However, if the VACUUM INTO command is interrupted by an unplanned shutdown or power lose, then the generated output database might be incomplete and corrupt. Also, SQLite does not invoke fsync() or FlushFileBuffers() on the generated database to ensure that it has reached non-volatile storage before completing.</source>
          <target state="translated">VACUUM INTOコマンドは、生成された出力データベースが元のデータベースの一貫したスナップショットであるという意味で、トランザクショナルです。しかし、VACUUM INTOコマンドが計画外のシャットダウンや停電によって中断された場合、生成された出力データベースは不完全で破損している可能性があります。また、SQLite は生成されたデータベースに対して fsync()や FlushFileBuffers()を呼び出さず、生成が完了する前に不揮発性ストレージに到達したことを確認します。</target>
        </trans-unit>
        <trans-unit id="122691010e5d737070edb247661b2776162b982c" translate="yes" xml:space="preserve">
          <source>The VACUUM INTO command works the same way except that it uses the file named on the INTO clause in place of the temporary database and omits the step of copying the vacuumed database back over top of the original database.</source>
          <target state="translated">VACUUM INTOコマンドは、一時データベースの代わりにINTO句で指定されたファイルを使用し、バキュームされたデータベースを元のデータベースの上にコピーするステップを省いている点を除いては、同じように動作します。</target>
        </trans-unit>
        <trans-unit id="7b858ec9bacb824cb3d161c5dbed06b788759184" translate="yes" xml:space="preserve">
          <source>The VACUUM command may change the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDs&lt;/a&gt; of entries in any tables that do not have an explicit &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;.</source>
          <target state="translated">VACUUMコマンドは、明示的な&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;がないテーブルのエントリの&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt;を変更する場合があります。</target>
        </trans-unit>
        <trans-unit id="41696dc3c99878e16f90bac54782d308e462d0f3" translate="yes" xml:space="preserve">
          <source>The VACUUM command now works with the non-callback API</source>
          <target state="translated">VACUUMコマンドが非コールバックAPIで動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="27866863317458114de851c82a30b86b318d52b6" translate="yes" xml:space="preserve">
          <source>The VACUUM command rebuilds the database file, repacking it into a minimal amount of disk space. There are several reasons an application might do this:</source>
          <target state="translated">VACUUMコマンドは、データベースファイルを再構築し、最小限のディスク容量にリパックします。アプリケーションがこれを行う理由はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9aa5f71406817eba130230946d703a26da25090a" translate="yes" xml:space="preserve">
          <source>The VACUUM command with an INTO clause is an alternative to the &lt;a href=&quot;backup&quot;&gt;backup API&lt;/a&gt; for generating backup copies of a live database. The advantage of using VACUUM INTO is that the resulting backup database is minimal in size and hence the amount of filesystem I/O may be reduced. Also, all deleted content is purged from the backup, leaving behind no forensic traces. On the other hand, the &lt;a href=&quot;backup&quot;&gt;backup API&lt;/a&gt; uses fewer CPU cycles and can be executed incrementally.</source>
          <target state="translated">INTO句を指定したVACUUMコマンドは、ライブデータベースのバックアップコピーを生成&lt;a href=&quot;backup&quot;&gt;する&lt;/a&gt;ためのバックアップAPIの代替手段です。 VACUUM INTOを使用する利点は、結果として得られるバックアップデータベースのサイズが最小になるため、ファイルシステムI / Oの量を削減できることです。また、削除されたコンテンツはすべてバックアップから削除され、フォレンジックトレースは残りません。一方、&lt;a href=&quot;backup&quot;&gt;バックアップAPI&lt;/a&gt;はより少ないCPUサイクルを使用し、インクリメンタルに実行できます。</target>
        </trans-unit>
        <trans-unit id="e0a189fd9e3d1e02aa0528451d9b2483299ef4e9" translate="yes" xml:space="preserve">
          <source>The VACUUM command works by copying the contents of the database into a temporary database file and then overwriting the original with the contents of the temporary file. When overwriting the original, a rollback journal or &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; WAL file is used just as it would be for any other database transaction. This means that when VACUUMing a database, as much as twice the size of the original database file is required in free disk space.</source>
          <target state="translated">VACUUMコマンドは、データベースの内容を一時データベースファイルにコピーし、元のファイルを一時ファイルの内容で上書きすることで機能します。元のファイルを上書きするときは、他のデータベーストランザクションの場合と同様に、ロールバックジャーナルまたは&lt;a href=&quot;wal&quot;&gt;ログ先行書き込み&lt;/a&gt; WALファイルが使用されます。これは、データベースをバキュームするときに、元のデータベースファイルの2倍のサイズが空きディスク領域に必要であることを意味します。</target>
        </trans-unit>
        <trans-unit id="778738485f953e3a9b76b31822d939e887b55074" translate="yes" xml:space="preserve">
          <source>The VALUE and HIWTR columns report the current value of the measure and its &quot;high-water mark&quot;. The high-water mark is the highest value ever seen for the measurement, at least since the last reset. The SQLITE_MEMSTAT virtual table does not provide a mechanism for resetting the high-water mark.</source>
          <target state="translated">VALUE 列と HIWTR 列は、メジャーの現在の値とその &quot;ハイ・ウォーター・マーク &quot;を報告します。ハイ・ウォーター・マークは、少なくとも最後にリセットされてからの測定の最高値です。SQLITE_MEMSTAT 仮想テーブルには、ハイ・ウォーター・マークをリセットするためのメカニズムはありません。</target>
        </trans-unit>
        <trans-unit id="1b2ece5b4ab8b91b62ace8f0cc0040f19a643253" translate="yes" xml:space="preserve">
          <source>The VALUES clause</source>
          <target state="translated">VALUES条項</target>
        </trans-unit>
        <trans-unit id="b8a859f7de071f48cff5a7fe9193dabc82e472c2" translate="yes" xml:space="preserve">
          <source>The VALUES clause of an INSERT can now contain expressions, including scalar SELECT clauses.</source>
          <target state="translated">INSERTのVALUES句は、スカラーSELECT句を含む式を含むことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="222a8cea06637d3ca462a60582d77b6f51ecd46d" translate="yes" xml:space="preserve">
          <source>The VDBE code generated by the above statement looks like the following:</source>
          <target state="translated">上記の文で生成されたVDBEコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="914b54584037bedb35946860061828500f1bc504" translate="yes" xml:space="preserve">
          <source>The VDBE code generated for this query is as follows:</source>
          <target state="translated">このクエリのために生成されたVDBEコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="44e862e51e63dc8e6d2cfc4ebc01e6bf18bd5d5d" translate="yes" xml:space="preserve">
          <source>The VDBE implements a virtual computer that runs a program in its virtual machine language. The goal of each program is to interrogate or change the database. Toward this end, the machine language that the VDBE implements is specifically designed to search, read, and modify databases.</source>
          <target state="translated">VDBEは、その仮想マシン言語でプログラムを実行する仮想コンピュータを実装する。各プログラムの目的は、データベースを照会したり変更したりすることである。この目的のために、VDBEが実装するマシン言語は、データベースを検索、読み込み、変更するために特別に設計されている。</target>
        </trans-unit>
        <trans-unit id="2dceeabf6f031eb26374896fc49e25ce44afb511" translate="yes" xml:space="preserve">
          <source>The VDBE program generated for this SQL statement is as follows:</source>
          <target state="translated">このSQL文に対して生成されたVDBEプログラムは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="80bc0b2de97d753f617c4eaf5d3c9b6776ea43cf" translate="yes" xml:space="preserve">
          <source>The VERSION table shown above has columns to record a check-in comment (presumably supplied by the user) and the time and date at which the File/Save action occurred. It also records the parent version to record the history of changes. Perhaps the manifest could be stored as a delta from the parent version, though typically the manifest will be small enough that storing a delta might be more trouble than it is worth. The SLIDE table also contains a derivedFrom column which could be used for delta encoding if it is determined that saving the slide content as a delta from its previous version is a worthwhile optimization.</source>
          <target state="translated">上記のVERSIONテーブルには、チェックインコメント(おそらくユーザーが提供したものと思われます)と、ファイル/保存アクションが発生した日時を記録する列があります。また、変更の履歴を記録するための親バージョンも記録されます。おそらく、マニフェストは親バージョンからの差分として保存することができますが、通常、マニフェストは十分に小さく、差分を保存することはそれに見合う以上に面倒なことかもしれません。SLIDEテーブルには、前のバージョンからのデルタとしてスライドコンテンツを保存することが価値のある最適化であると判断された場合に、デルタエンコーディングに使用される可能性のある derivedFromカラムも含まれています。</target>
        </trans-unit>
        <trans-unit id="1b59010289d2579bd6e51282e421f222dba65ae2" translate="yes" xml:space="preserve">
          <source>The VFS interface is sometimes extended by adding new methods onto the end. Each time such an extension occurs, the iVersion field is incremented. The iVersion value started out as 1 in SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_0.html&quot;&gt;version 3.5.0&lt;/a&gt; on 2007-09-04, then increased to 2 with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;version 3.7.0&lt;/a&gt; on 2010-07-21, and then increased to 3 with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_6.html&quot;&gt;version 3.7.6&lt;/a&gt; on 2011-04-12. Additional fields may be appended to the sqlite3_vfs object and the iVersion value may increase again in future versions of SQLite. Note that due to an oversight, the structure of the sqlite3_vfs object changed in the transition from SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_9.html&quot;&gt;version 3.5.9&lt;/a&gt; to &lt;a href=&quot;https://sqlite.org/releaselog/3_6_0.html&quot;&gt;version 3.6.0&lt;/a&gt; on 2008-07-16 and yet the iVersion field was not increased.</source>
          <target state="translated">VFSインターフェースは、最後に新しいメソッドを追加することによって拡張されることがあります。このような拡張が発生するたびに、iVersionフィールドがインクリメントされます。 iVersion値は、2007-09-04のSQLite&lt;a href=&quot;https://sqlite.org/releaselog/3_5_0.html&quot;&gt;バージョン3.5.0&lt;/a&gt;で1として始まり、2010-07-21のSQLite&lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;バージョン3.7.0&lt;/a&gt;で2に増加し、2011年のSQLite&lt;a href=&quot;https://sqlite.org/releaselog/3_7_6.html&quot;&gt;バージョン3.7.6&lt;/a&gt;で3に増加しました。 -04-12。追加のフィールドがsqlite3_vfsオブジェクトに追加される可能性があり、iVersion値はSQLiteの将来のバージョンで再び増加する可能性があります。見落としのため、2008-07-16のSQLite&lt;a href=&quot;https://sqlite.org/releaselog/3_5_9.html&quot;&gt;バージョン3.5.9&lt;/a&gt;から&lt;a href=&quot;https://sqlite.org/releaselog/3_6_0.html&quot;&gt;バージョン3.6.0&lt;/a&gt;への移行中にsqlite3_vfsオブジェクトの構造が変更されましたが、iVersionフィールドは増加していませんでした。</target>
        </trans-unit>
        <trans-unit id="0766456a2002e4475782706d0b0fb713540038a5" translate="yes" xml:space="preserve">
          <source>The VFS interface is sometimes extended by adding new methods onto the end. Each time such an extension occurs, the iVersion field is incremented. The iVersion value started out as 1 in SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_0.html&quot;&gt;version 3.5.0&lt;/a&gt; on 2007-09-04, then increased to 2 with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;version 3.7.0&lt;/a&gt; on 2010-07-21, and then increased to 3 with SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_6.html&quot;&gt;version 3.7.6&lt;/a&gt; on 2011-04-12. Additional fields may be appended to the sqlite3_vfs object and the iVersion value may increase again in future versions of SQLite. Note that the structure of the sqlite3_vfs object changes in the transition from SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_9.html&quot;&gt;version 3.5.9&lt;/a&gt; to &lt;a href=&quot;https://sqlite.org/releaselog/3_6_0.html&quot;&gt;version 3.6.0&lt;/a&gt; on 2008-07-16 and yet the iVersion field was not modified.</source>
          <target state="translated">VFSインターフェースは、最後に新しいメソッドを追加することで拡張される場合があります。このような拡張が行われるたびに、iVersionフィールドが増加します。2007-09-04のSQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_0.html&quot;&gt;バージョン3.5.0&lt;/a&gt;では、iVersion値は1から始まり、2010-07-21のSQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;バージョン3.7.0&lt;/a&gt;では2に増加し、2011 ではSQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_6.html&quot;&gt;バージョン3.7.6&lt;/a&gt;で3に増加しました。 -04-12。追加のフィールドがsqlite3_vfsオブジェクトに追加され、iVersion値がSQLiteの将来のバージョンで再び増加する可能性があります。 sqlite3_vfsオブジェクトの構造は、2008-07-16のSQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_5_9.html&quot;&gt;バージョン3.5.9&lt;/a&gt;から&lt;a href=&quot;https://sqlite.org/releaselog/3_6_0.html&quot;&gt;バージョン3.6.0&lt;/a&gt;への移行時に変更されますが、iVersionフィールドは変更されていません。</target>
        </trans-unit>
        <trans-unit id="9428f4f61873bedbb7fa546ce9da2878f0f6b46f" translate="yes" xml:space="preserve">
          <source>The VFS specified by a URI has the highest priority. After that comes a VFS specified as the fourth argument to &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;. The default VFS is used if no VFS is specified otherwise.</source>
          <target state="translated">URIで指定されたVFSが最も優先されます。その後、&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2（）の&lt;/a&gt; 4番目の引数としてVFSが指定されます。特に指定されていない場合は、デフォルトのVFSが使用されます。</target>
        </trans-unit>
        <trans-unit id="59f617b8350433543bfe3f6503e9062a84ed6414" translate="yes" xml:space="preserve">
          <source>The Virtual Database Engine of SQLite</source>
          <target state="translated">SQLiteの仮想データベースエンジン</target>
        </trans-unit>
        <trans-unit id="2fc007776417aa54116dbc71f8065ab7e3ac76ea" translate="yes" xml:space="preserve">
          <source>The Virtual Table Mechanism Of SQLite</source>
          <target state="translated">SQLiteの仮想テーブルの仕組み</target>
        </trans-unit>
        <trans-unit id="4a47770692c502c7c39564cd0fc7b210860b676a" translate="yes" xml:space="preserve">
          <source>The WAL approach inverts this. The original content is preserved in the database file and the changes are appended into a separate WAL file. A &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; occurs when a special record indicating a commit is appended to the WAL. Thus a COMMIT can happen without ever writing to the original database, which allows readers to continue operating from the original unaltered database while changes are simultaneously being committed into the WAL. Multiple transactions can be appended to the end of a single WAL file.</source>
          <target state="translated">WALアプローチはこれを逆にします。元のコンテンツはデータベースファイルに保存され、変更は別のWALファイルに追加されます。Aは、&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;コミット示す特別なレコードがWALに追加されるときに発生します。したがって、COMMITは、元のデータベースに書き込むことなく発生する可能性があります。これにより、変更が同時にWALにコミットされている間、リーダーは変更されていない元のデータベースから操作を続行できます。単一のWALファイルの末尾に複数のトランザクションを追加できます。</target>
        </trans-unit>
        <trans-unit id="82b1501dab1e647276daeb770adadd0f94b39bd1" translate="yes" xml:space="preserve">
          <source>The WAL file can optionally be truncated on a reset, but it need not be. Performance is usually a little better if the WAL is not truncated, since filesystems generally will overwrite an existing file faster than they will grow a file.</source>
          <target state="translated">WALファイルは、リセット時に任意で切り捨てることができますが、切り捨てる必要はありません。なぜなら、ファイルシステムは通常、ファイルを成長させるよりも既存のファイルを上書きする方が早いからです。</target>
        </trans-unit>
        <trans-unit id="6ee114cc7fc43aace09ed2f31fdb137fc0cc57b0" translate="yes" xml:space="preserve">
          <source>The WAL file exists for as long as any &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; has the database open. Usually, the WAL file is deleted automatically when the last connection to the database closes. However, if the last process to have the database open exits without cleanly shutting down the database connection, or if the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;&lt;a href=&quot;c3ref/file_control&quot;&gt;file control&lt;/a&gt; is used, then the WAL file might be retained on disk after all connections to the database have been closed. The WAL file is part of the persistent state of the database and should be kept with the database if the database is copied or moved. If a database file is separated from its WAL file, then transactions that were previously committed to the database might be lost, or the database file might become corrupted. The only safe way to remove a WAL file is to open the database file using one of the &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open()&lt;/a&gt; interfaces then immediately close the database using &lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close()&lt;/a&gt;.</source>
          <target state="translated">WALファイルは、データベース&lt;a href=&quot;c3ref/sqlite3&quot;&gt;接続&lt;/a&gt;でデータベースが開いている限り存在します。通常、WALファイルは、データベースへの最後の接続が閉じると自動的に削除されます。ただし、データベースを開く最後のプロセスが、データベース接続を&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;正常&lt;/a&gt;にシャットダウンせずに終了する場合、またはSQLITE_FCNTL_PERSIST_WAL &lt;a href=&quot;c3ref/file_control&quot;&gt;ファイルコントロールが&lt;/a&gt;を使用すると、データベースへのすべての接続が閉じられた後、WALファイルがディスクに保持される可能性があります。 WALファイルはデータベースの永続的な状態の一部であり、データベースがコピーまたは移動された場合、データベースとともに保持する必要があります。データベースファイルがWALファイルから分離されている場合、以前にデータベースにコミットされたトランザクションが失われるか、データベースファイルが破損する可能性があります。 WALファイルを削除する唯一の安全な方法は、&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open（）&lt;/a&gt;インターフェースの1つを使用してデータベースファイルを開き、&lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close（）&lt;/a&gt;を使用してデータベースをすぐに閉じることです。</target>
        </trans-unit>
        <trans-unit id="79014b745cf0a5f8595085db33b3a7e639f66d1c" translate="yes" xml:space="preserve">
          <source>The WAL header is 32 bytes in size and consists of the following eight big-endian 32-bit unsigned integer values:</source>
          <target state="translated">WALヘッダは32バイトのサイズで、以下の8つのビッグエンディアン32ビット符号なし整数値で構成されています。</target>
        </trans-unit>
        <trans-unit id="3ad8fc65cf4c28a6553ebe75589fa3de09b97b25" translate="yes" xml:space="preserve">
          <source>The WAL journal mode will be set on all connections to the same database file if it is set on any one connection.</source>
          <target state="translated">WAL ジャーナルモードは、1 つの接続でも設定されていれば、同じデータベースファイルへのすべての接続で設定されます。</target>
        </trans-unit>
        <trans-unit id="c2da5fc09a01446274895178b9f5584cc12d72c9" translate="yes" xml:space="preserve">
          <source>The WAL journaling mode uses a &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; instead of a rollback journal to implement transactions. The WAL journaling mode is persistent; after being set it stays in effect across multiple database connections and after closing and reopening the database. A database in WAL journaling mode can only be accessed by SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;version 3.7.0&lt;/a&gt; (2010-07-21) or later.</source>
          <target state="translated">WALジャーナリングモードは、ロールバックジャーナルの代わりに&lt;a href=&quot;wal&quot;&gt;先行書き込みログを&lt;/a&gt;使用してトランザクションを実装します。WALジャーナリングモードは永続的です。設定後は、複数のデータベース接続にわたって有効であり、データベースを閉じて再度開いた後も有効です。WALジャーナリングモードのデータベースには、SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;バージョン3.7.0&lt;/a&gt;（2010-07-21）以降でのみアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bbeadb5beff9552e41ebfc0aed8339e43743fd64" translate="yes" xml:space="preserve">
          <source>The WAL-index format version number. Always 3007000.</source>
          <target state="translated">WAL-indexフォーマットのバージョン番号。常に3007000。</target>
        </trans-unit>
        <trans-unit id="a0470594be37c3f0ff60237d02ae37bf43150bc8" translate="yes" xml:space="preserve">
          <source>The WAL-index or &quot;shm&quot; file is used to coordinate access to the database by multiple clients, and as a cache to help clients quickly locate frames within the wal file.</source>
          <target state="translated">WAL-indexまたは &quot;shm &quot;ファイルは、複数のクライアントによるデータベースへのアクセスを調整するために使用され、クライアントがWALファイル内のフレームを素早く見つけるのを助けるためのキャッシュとしても使用されます。</target>
        </trans-unit>
        <trans-unit id="3fa0bf716018ca8d2c184cf21d82cae1245d9415" translate="yes" xml:space="preserve">
          <source>The WAL_CKPT_LOCK is only locked exclusively. There is never a shared lock taken on WAL_CKPT_LOCK.</source>
          <target state="translated">WAL_CKPT_LOCKは排他的にロックされているだけです。WAL_CKPT_LOCK上で共有ロックが取られることはありません。</target>
        </trans-unit>
        <trans-unit id="42d567271c4a4abf54f649e6218b2a342b7491c5" translate="yes" xml:space="preserve">
          <source>The WAL_RECOVER_LOCK is only locked exclusively. There is never a shared lock taken on WAL_RECOVER_LOCK.</source>
          <target state="translated">WAL_RECOVER_LOCKは排他的にロックされているだけです。WAL_RECOVER_LOCKで取られる共有ロックは決してありません。</target>
        </trans-unit>
        <trans-unit id="f378361895c3312e72c176b00bbf1af957e8b29d" translate="yes" xml:space="preserve">
          <source>The WAL_WRITE_LOCK is only locked exclusively. There is never a shared lock taken on WAL_WRITE_LOCK.</source>
          <target state="translated">WAL_WRITE_LOCKは排他的にロックされているだけです。WAL_WRITE_LOCK上で共有ロックが取られることはありません。</target>
        </trans-unit>
        <trans-unit id="cddb2fff96db0eb2561a8fa9288188bd61c4a17a" translate="yes" xml:space="preserve">
          <source>The WHERE clause is implemented by instructions 6 through 8. The job of the where clause is to skip the ListWrite if the WHERE condition is false. To this end, it jumps ahead to the Next instruction if the &quot;two&quot; column (extracted by the Column instruction) is greater than or equal to 50.</source>
          <target state="translated">WHERE句は命令6から8によって実装されています。WHERE句の役割は、WHERE条件がFalseの場合にListWriteをスキップすることです。このため、(Column命令で抽出された)&quot;2 &quot;列が50以上であれば、Next命令にジャンプする。</target>
        </trans-unit>
        <trans-unit id="29f1ffc6e309ea1c4b2ff1d0678fe7459979e894" translate="yes" xml:space="preserve">
          <source>The WHERE clause on a query is broken up into &quot;terms&quot; where each term is separated from the others by an AND operator. If the WHERE clause is composed of constraints separate by the OR operator then the entire clause is considered to be a single &quot;term&quot; to which the &lt;a href=&quot;#or_opt&quot;&gt;OR-clause optimization&lt;/a&gt; is applied.</source>
          <target state="translated">クエリのWHERE句は「用語」に分割され、各用語はAND演算子によって他の用語から分離されます。WHERE句がOR演算子で区切られた制約で構成されている場合、句全体は、&lt;a href=&quot;#or_opt&quot;&gt;OR句の最適化&lt;/a&gt;が適用される単一の「用語」と見なされます。</target>
        </trans-unit>
        <trans-unit id="67af3225970c5961856bbb922d2677740529dd45" translate="yes" xml:space="preserve">
          <source>The WINDOW clause, when one is present, comes after any HAVING clause and before any ORDER BY.</source>
          <target state="translated">WINDOW句は、人がいる場合、HAVING句の後、ORDER BY句の前に来ます。</target>
        </trans-unit>
        <trans-unit id="59f006cfccb1b0c07b582f38b2b03e476dd1faa4" translate="yes" xml:space="preserve">
          <source>The WITH Clause</source>
          <target state="translated">WITH句</target>
        </trans-unit>
        <trans-unit id="49bb3b8074d7fe6469254452d39dc417f079e333" translate="yes" xml:space="preserve">
          <source>The WITH clause cannot be used within a &lt;a href=&quot;lang_createtrigger&quot;&gt;CREATE TRIGGER&lt;/a&gt;.</source>
          <target state="translated">WITH句は&lt;a href=&quot;lang_createtrigger&quot;&gt;CREATE TRIGGER&lt;/a&gt;内では使用できません。</target>
        </trans-unit>
        <trans-unit id="469f423bf145b329a62c79e892ff06f00b735aaa" translate="yes" xml:space="preserve">
          <source>The WITH clause must appear at the beginning of a top-level &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement or at the beginning of a subquery. The WITH clause cannot be prepended to the second or subsequent SELECT statement of a &lt;a href=&quot;lang_select#compound&quot;&gt;compound select&lt;/a&gt;.</source>
          <target state="translated">WITH句は、トップレベルの&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;ステートメントの先頭またはサブクエリの先頭に指定する必要があります。WITH句は、&lt;a href=&quot;lang_select#compound&quot;&gt;複合選択の&lt;/a&gt; 2番目以降のSELECTステートメントの前に追加できません。</target>
        </trans-unit>
        <trans-unit id="0790118e4cc64a2949db095a0b8b9579da7d5654" translate="yes" xml:space="preserve">
          <source>The WITHOUT ROWID optimization is likely to be helpful for tables that have non-integer or composite (multi-column) PRIMARY KEYs and that do not store large strings or BLOBs.</source>
          <target state="translated">WITHOUT ROWIDの最適化は、非整数や複合(複数列)のPRIMARY KEYを持ち、大きな文字列やBLOBを保存しないテーブルで役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="b74650aa10ba4b42e039edd4a2cc74f6b68fb08b" translate="yes" xml:space="preserve">
          <source>The WITHOUT ROWID syntax is an optimization. It provides no new capabilities. Anything that can be done using a WITHOUT ROWID table can also be done in exactly the same way, and exactly the same syntax, using an ordinary rowid table. The only advantage of a WITHOUT ROWID table is that it can sometimes use less disk space and/or perform a little faster than an ordinary rowid table.</source>
          <target state="translated">WITHOUT ROWID構文は最適化です。これは新しい機能を提供しません。WITHOUT ROWIDテーブルを使用してできることはすべて、通常のROWIDテーブルを使用して全く同じ方法で、全く同じ構文で行うことができます。WITHOUT ROWIDテーブルの唯一の利点は、通常のROWIDテーブルよりもディスク容量が少なくて済むことや、少しだけ高速に実行できることです。</target>
        </trans-unit>
        <trans-unit id="d5d979d02523b8b3c921a385853078f31581834f" translate="yes" xml:space="preserve">
          <source>The WITHOUT ROWID table that has the same structure as the t1bc index would look like this:</source>
          <target state="translated">t1bcインデックスと同じ構造を持つWITHOUT ROWIDテーブルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="ebd241bcb9edacf4c26a21a11fc0d3a7cc0b5d00" translate="yes" xml:space="preserve">
          <source>The X callback is invoked whenever any of the events identified by mask M occur. The integer return value from the callback is currently ignored, though this may change in future releases. Callback implementations should return zero to ensure future compatibility.</source>
          <target state="translated">X コールバックは、マスク M で指定されたイベントが発生するたびに呼び出されます。コールバックからの整数値の戻り値は現在無視されていますが、将来のリリースでは変更される可能性があります。将来の互換性を確保するために、コールバックの実装はゼロを返すべきです。</target>
        </trans-unit>
        <trans-unit id="d9560a5bff3ce71963e342a5450ede2debbbea82" translate="yes" xml:space="preserve">
          <source>The aConstraintUsage[] array contains one element for each of the nConstraint constraints in the inputs section of the &lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_info&lt;/a&gt; structure. The aConstraintUsage[] array is used by xBestIndex to tell the core how it is using the constraints.</source>
          <target state="translated">aConstraintUsage []配列には、&lt;a href=&quot;c3ref/index_info&quot;&gt;sqlite3_index_info&lt;/a&gt;構造の入力セクションのnConstraint制約ごとに1つの要素が含まれます。aConstraintUsage []配列は、xBestIndexによって使用され、制約がどのように使用されているかをコアに伝えます。</target>
        </trans-unit>
        <trans-unit id="3276fd18c87b4e795759956677bbdc04f564672d" translate="yes" xml:space="preserve">
          <source>The aConstraint[] array contains information about all constraints that apply to the virtual table. But some of the constraints might not be usable because of the way tables are ordered in a join. The xBestIndex method must therefore only consider constraints that have an aConstraint[].usable flag which is true.</source>
          <target state="translated">aConstraint[]配列には、仮想テーブルに適用されるすべての制約に関する情報が含まれます。しかし、テーブルが結合で順序付けされる方法のため、制約の中には使用できないものがあるかもしれません。そのため、xBestIndexメソッドは、aConstraint[].usableフラグが真である制約のみを考慮しなければなりません。</target>
        </trans-unit>
        <trans-unit id="08f35e14867214bff1de15c06eccca3a8c64a445" translate="yes" xml:space="preserve">
          <source>The aConstraint[] array records WHERE clause constraints of the form:</source>
          <target state="translated">aConstraint[]配列は、形式のWHERE句制約を記録します。</target>
        </trans-unit>
        <trans-unit id="cb4f46690b6dce470ed710606d550164c584726b" translate="yes" xml:space="preserve">
          <source>The ability to add &lt;a href=&quot;appfunc&quot;&gt;application-defined SQL functions&lt;/a&gt;, including aggregate and table-valued functions.</source>
          <target state="translated">集計&lt;a href=&quot;appfunc&quot;&gt;関数&lt;/a&gt;やテーブル値関数など、アプリケーション定義のSQL関数を追加する機能。</target>
        </trans-unit>
        <trans-unit id="201991425b66ed2865e7a91ab0511b280556125f" translate="yes" xml:space="preserve">
          <source>The ability to add &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt;, including aggregate and table-valued functions.</source>
          <target state="translated">集計&lt;a href=&quot;c3ref/create_function&quot;&gt;関数&lt;/a&gt;やテーブル値関数など、アプリケーション定義のSQL関数を追加する機能。</target>
        </trans-unit>
        <trans-unit id="a3094b48cb721d2768a7d14f0821434de8cd0a90" translate="yes" xml:space="preserve">
          <source>The ability to index expressions was added to SQLite with &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). A database that uses an index on expressions will not be usable by earlier versions of SQLite.</source>
          <target state="translated">SQLiteの&lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;バージョン3.9.0&lt;/a&gt;（2015-10-14）では、式にインデックスを付ける機能が追加されました。式にインデックスを使用するデータベースは、以前のバージョンのSQLiteでは使用できません。</target>
        </trans-unit>
        <trans-unit id="e647580ce3a971bdf9683f9f823fdf4aa9345057" translate="yes" xml:space="preserve">
          <source>The ability to store BLOBs in indexed columns.</source>
          <target state="translated">インデックス化された列にBLOBを格納する機能。</target>
        </trans-unit>
        <trans-unit id="2b4889307c133133bf332e84c716afd8e6689ea5" translate="yes" xml:space="preserve">
          <source>The ability to use keywords as identifiers promotes backwards compatibility. As new keywords are added, legacy schemas that just happen to use those keywords as table or column names continue to work. However, the ability to use a keyword as an identifier sometimes leads to surprising outcomes. For example:</source>
          <target state="translated">識別子としてキーワードを使用する機能は、下位互換性を促進します。新しいキーワードが追加されても、たまたまそのキーワードをテーブル名やカラム名として使用していたレガシースキーマは引き続き動作します。しかし、キーワードを識別子として使用する機能は、時には驚くような結果をもたらすことがあります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4e7fcdb984584a84897317afa23740edc4a933b7" translate="yes" xml:space="preserve">
          <source>The above code creates a new table named &lt;b&gt;t1&lt;/b&gt; with columns &lt;b&gt;a&lt;/b&gt; and &lt;b&gt;b&lt;/b&gt;. What could be simpler?</source>
          <target state="translated">上記のコードは、列&lt;b&gt;a&lt;/b&gt;および&lt;b&gt;bを&lt;/b&gt;持つ&lt;b&gt;t1&lt;/b&gt;という名前の新しいテーブルを作成します。何がもっと簡単になるでしょうか？&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1e597cdc48d987ee3a37507f5f4f64e4eebc9821" translate="yes" xml:space="preserve">
          <source>The above command should be run from the MSVC Native Tools Command Prompt. If you have MSVC installed on your machine, you probably have multiple versions of this Command Prompt, for native builds for x86 and x64, and possibly also for cross-compiling to ARM. Use the appropriate Command Prompt depending on the desired DLL.</source>
          <target state="translated">上記のコマンドは MSVC Native Tools のコマンドプロンプトから実行してください。お使いのマシンにMSVCがインストールされている場合、おそらくこのコマンドプロンプトの複数のバージョンがあり、x86とx64のネイティブビルド用に、またARMへのクロスコンパイル用に、複数のバージョンがあります。目的の DLL に応じて適切なコマンドプロンプトを使用してください。</target>
        </trans-unit>
        <trans-unit id="40e5d3c82a1f28fca2d855ebabf947c2e6309d01" translate="yes" xml:space="preserve">
          <source>The above is all you really need to know in order to use SQLite in your C or C++ programs. There are other interface functions available (and described below) but we will begin by describing the core functions shown above.</source>
          <target state="translated">CやC++プログラムでSQLiteを使用するために本当に知っておくべきことは以上です。他にも利用可能なインターフェース関数はありますが(後述します)、まずは上記のコア関数について説明します。</target>
        </trans-unit>
        <trans-unit id="e1d8b560084e958b9b180ef1ea3e4c34811a8e33" translate="yes" xml:space="preserve">
          <source>The above means that executing the 'merge' command with a negative parameter until the before and after difference in the return value of &lt;a href=&quot;c3ref/total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; is less than two optimizes the FTS index in the same way as the &lt;a href=&quot;fts5#the_optimize_command&quot;&gt;FTS5 optimize command&lt;/a&gt;. However, if a new b-tree is added to the FTS index while this process is ongoing, FTS5 will move the new b-tree to the same level as the existing b-trees and restart the merge. To avoid this, only the first call to 'merge' should specify a negative parameter. Each subsequent call to 'merge' should specify a positive value so that the merge started by the first call is run to completion even if new b-trees are added to the FTS index.</source>
          <target state="translated">上記は、&lt;a href=&quot;c3ref/total_changes&quot;&gt;sqlite3_total_changes（）の&lt;/a&gt;戻り値の前後の差が2未満になるまで負のパラメーターで 'merge'コマンドを実行すると、&lt;a href=&quot;fts5#the_optimize_command&quot;&gt;FTS5最適化コマンド&lt;/a&gt;と同じ方法でFTSインデックスが最適化されることを意味します。ただし、このプロセスの進行中に新しいBツリーがFTSインデックスに追加されると、FTS5は新しいBツリーを既存のBツリーと同じレベルに移動し、マージを再開します。これを回避するには、 'merge'の最初の呼び出しでのみ負のパラメーターを指定する必要があります。後続の各 'merge'の呼び出しでは、新しいbツリーがFTSインデックスに追加された場合でも、最初の呼び出しによって開始されたマージが最後まで実行されるように、正の値を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a9200726c1128b95e04b731c9b7e036f2a699198" translate="yes" xml:space="preserve">
          <source>The above two assumptions may be interpreted to mean that if a system failure occurs after file truncation but before the truncated file is</source>
          <target state="translated">上記2つの仮定は、ファイルの切り捨て後にシステム障害が発生しても、切り捨てられたファイルが</target>
        </trans-unit>
        <trans-unit id="63e4faf9292fbb17cef84d7ffb499ec94358865c" translate="yes" xml:space="preserve">
          <source>The above will return something like this:</source>
          <target state="translated">上記のようなものが返ってきます。</target>
        </trans-unit>
        <trans-unit id="0861e077c18aeb6848f0b5c9c63fbc9c90c17596" translate="yes" xml:space="preserve">
          <source>The abs(X) function returns the absolute value of the numeric argument X. Abs(X) returns NULL if X is NULL. Abs(X) returns 0.0 if X is a string or blob that cannot be converted to a numeric value. If X is the integer -9223372036854775808 then abs(X) throws an integer overflow error since there is no equivalent positive 64-bit two complement value.</source>
          <target state="translated">abs(X)関数は数値引数Xの絶対値を返します。Abs(X)は、Xが数値に変換できない文字列またはブロブの場合は0.0を返します。X が整数 -9223372036854775808 の場合は、等価な正の 64 ビット 2 補数値が存在しないため、 abs(X)は整数オーバーフローエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="3eb517318225f5fe795733968275ce4a51bc681e" translate="yes" xml:space="preserve">
          <source>The absolute value of this integer argument is used as the (approximate) number of tokens to include in the returned text value. The maximum allowable absolute value is 64. The value of this argument is referred to as</source>
          <target state="translated">この整数引数の絶対値は、返されたテキスト値に含めるトークンの数(おおよその)として使用されます。絶対値の最大値は64です。この引数の値は</target>
        </trans-unit>
        <trans-unit id="85ca4a9788c6f1b476159c0eeb6719f0a0122577" translate="yes" xml:space="preserve">
          <source>The acctchng_magnitude index is over the account number (&quot;acct_no&quot;) and on the absolute value of the amount. This index allows one to do efficient queries over the magnitude of a change to the account. For example, to list all changes to account number $xyz that are more than $100.00, one can say:</source>
          <target state="translated">acctchng_magnitude インデックスは、口座番号 (&quot;acct_no&quot;)と金額の絶対値の上にあります。このインデックスを使用すると、アカウントへの変更の大きさを効率的に調べることができます。例えば、口座番号 $xyz へのすべての変更が $100.00 以上であることをリストアップするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5e14d586171fc852b529e7898dae84a1afce65ec" translate="yes" xml:space="preserve">
          <source>The acronym RBU stands for &quot;Resumable Bulk Update&quot;.</source>
          <target state="translated">RBUは「Resumable Bulk Update」の頭文字をとったものです。</target>
        </trans-unit>
        <trans-unit id="cd26fea06f2a519581c858bc894c62df5370dfe9" translate="yes" xml:space="preserve">
          <source>The act of deleting a file is expensive on many systems. As an optimization, SQLite can be configured to truncate the journal file to zero bytes in length or overwrite the journal file header with zeros. In either case, the resulting journal file is no longer capable of rolling back and so the transaction still commits. Truncating a file to zero length, like deleting a file, is assumed to be an atomic operation from the point of view of a user process. Overwriting the header of the journal with zeros is not atomic, but if any part of the header is malformed the journal will not roll back. Hence, one can say that the commit occurs as soon as the header is sufficiently changed to make it invalid. Typically this happens as soon as the first byte of the header is zeroed.</source>
          <target state="translated">ファイルを削除するという行為は、多くのシステムではコストがかかります。最適化として、SQLite はジャーナルファイルの長さをゼロバイトに切り詰めたり、ジャーナルファイルヘッダをゼロで上書きしたりするように設定することができます。いずれの場合も、結果として生じるジャーナルファイルはロールバックできなくなるため、トランザクションはコミットされたままになります。ファイルを長さ0に切り詰めることは、ファイルの削除と同様に、ユーザープロセスから見てアトミックな操作であると 想定される。ジャーナルのヘッダをゼロで上書きすることはアトミックではありませんが、ヘッダのどこかの部分が不正な形になっている場合、ジャーナルはロールバックしません。したがって、ヘッダが十分に変更されて無効になるとすぐにコミットが発生すると言うことができます。通常、これはヘッダの最初のバイトがゼロになるとすぐに起こります。</target>
        </trans-unit>
        <trans-unit id="eb72a7b6e0cde775aa0861a739588c085322d8b5" translate="yes" xml:space="preserve">
          <source>The action of the preupdate hook is similar to the &lt;a href=&quot;c3ref/update_hook&quot;&gt;update hook&lt;/a&gt; except that the callback is invoked before the change, not afterwards, and the preupdate hook interfaces are omitted unless this compile-time option is used.</source>
          <target state="translated">preupdateフックのアクションは、後でではなく変更の前にコールバックが呼び出され、このコンパイル時オプションが使用されない限りpreupdateフックインターフェイスが省略されることを除いて、&lt;a href=&quot;c3ref/update_hook&quot;&gt;更新&lt;/a&gt;フックと同様です。</target>
        </trans-unit>
        <trans-unit id="d730b41c0c65afc48bf2186d2e78971f79c0ae93" translate="yes" xml:space="preserve">
          <source>The actual remote head</source>
          <target state="translated">実際のリモートヘッド</target>
        </trans-unit>
        <trans-unit id="d5942dd3b483843b4b3b13169967e9623c12cf60" translate="yes" xml:space="preserve">
          <source>The actual value of the automerge parameter determines the number of index segments merged simultaneously by an automatic inverted index merge. If the value is set to N, the system waits until there are at least N segments on a single level before beginning to incrementally merge them. Setting a lower value of N causes segments to be merged more quickly, which may speed up full-text queries and, if the workload contains UPDATE or DELETE operations as well as INSERTs, reduce the space on disk consumed by the full-text index. However, it also increases the amount of data written to disk.</source>
          <target state="translated">automerge パラメータの実際の値は、自動転置インデックスマージで同時にマージされるインデックスセグメントの数を決定します。値が N に設定されている場合、システムは、1 つのレベルに少なくとも N 個のセグメントが存在するまで待ってから、それらのセグメントのインクリメンタルなマージを開始します。N の値を低く設定すると、セグメントのマージがより迅速に行われるようになり、フルテキストクエリの速度が向上し、作業負荷に UPDATE や DELETE 操作と INSERT が含まれている場合には、フルテキストインデックスが消費するディスク上の容量が減少します。しかし、ディスクに書き込まれるデータ量も増えます。</target>
        </trans-unit>
        <trans-unit id="fcad8bd16dfc8bbae32259b89340b3c09c02938b" translate="yes" xml:space="preserve">
          <source>The address of the cell in the parent frame is determined by adding the value of the P1 argument to the value of the P1 argument to the calling &lt;a href=&quot;opcode#Program&quot;&gt;Program&lt;/a&gt; instruction.</source>
          <target state="translated">親フレーム内のセルのアドレスは、呼び出し元の&lt;a href=&quot;opcode#Program&quot;&gt;Program&lt;/a&gt;命令のP1引数の値にP1引数の値を追加することによって決定されます。</target>
        </trans-unit>
        <trans-unit id="e600ae2c57bf2172dc311ec955786ffac68bdb53" translate="yes" xml:space="preserve">
          <source>The advantage of the table-valued function format is that the query can return just a subset of the PRAGMA columns, can include a WHERE clause, can use aggregate functions, and the table-valued function can be just one of several data sources in a join. For example, to get a list of all indexed columns in a schema, one could query:</source>
          <target state="translated">テーブル値関数形式の利点は、クエリがPRAGMAカラムのサブセットだけを返すことができ、WHERE句を含めることができ、集約関数を使用することができ、テーブル値関数は結合の中の複数のデータソースのうちの1つにすぎないことです。例えば、スキーマ内のすべてのインデックス付きカラムのリストを取得するには、クエリを実行します。</target>
        </trans-unit>
        <trans-unit id="d98ae93ba70e0ca59260993947a4e24c760765d2" translate="yes" xml:space="preserve">
          <source>The advantages of doing many smaller sorts instead of a single large sort are:</source>
          <target state="translated">1つの大きなソートをするのではなく、小さなソートをたくさんすることのメリットがあります。</target>
        </trans-unit>
        <trans-unit id="c2daf3580eecc6fcaa952d18c4522913579884b0" translate="yes" xml:space="preserve">
          <source>The advertised consequence of most CVEs is &quot;denial of service&quot;, typically by causing a crash through a NULL pointer dereference or a division by zero, or similar.</source>
          <target state="translated">ほとんどの CVE の宣伝結果は「サービス拒否」であり,典型的には NULL ポインタのディファレンスやゼロによる除算などのクラッシュを引き起こします.</target>
        </trans-unit>
        <trans-unit id="15b97dc5f9d1078668a6ce572dccbfb387883173" translate="yes" xml:space="preserve">
          <source>The affinity of a column is determined by the declared type of the column, according to the following rules in the order shown:</source>
          <target state="translated">カラムの親和性は、以下のルールに従って、カラムの宣言された型によって、示された順に決定されます。</target>
        </trans-unit>
        <trans-unit id="81c1ff1ba114ea49399c70cede12a7ccd08cc3d4" translate="yes" xml:space="preserve">
          <source>The affinity of the v1.x column will be the same as the affinity of t1.b (TEXT), since v1.x maps directly into t1.b. But columns v1.y and v1.z both have no affinity, since those columns map into expression a+c and 42, and expressions always have no affinity.</source>
          <target state="translated">しかし、列v1.yとv1.zの両方は、それらの列が式a+cと42にマップされ、式は常に何の親和性も持たないので、親和性を持たない。</target>
        </trans-unit>
        <trans-unit id="ab16418452d7d68b0bd05abd8cefe39ddc38000d" translate="yes" xml:space="preserve">
          <source>The aggregate functions shown below are available by default. Additional aggregate functions written in C may be added using the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; API.</source>
          <target state="translated">以下に示す集計関数は、デフォルトで使用できます。Cで記述された追加の集約関数は、&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt; API を使用して追加できます。</target>
        </trans-unit>
        <trans-unit id="084c900ab7b78b8fb14c15704a0ab2585c905626" translate="yes" xml:space="preserve">
          <source>The algorithm above works quite well for most cases, but there are exceptions. These exceptions can be dealt with by making additional entries in the virtual table using the &quot;soundslike&quot; column.</source>
          <target state="translated">上記のアルゴリズムはほとんどの場合でうまく機能しますが、例外もあります。これらの例外は、&quot;soundslike&quot; カラムを使用して仮想テーブルに追加のエントリを作成することで対処できます。</target>
        </trans-unit>
        <trans-unit id="db0be7814305eaba73945c0429fa38151c410e55" translate="yes" xml:space="preserve">
          <source>The algorithm specified in the OR clause of an INSERT or UPDATE overrides any algorithm specified in a CREATE TABLE. If no algorithm is specified anywhere, the ABORT algorithm is used.</source>
          <target state="translated">INSERTまたはUPDATEのOR句で指定されたアルゴリズムは、CREATE TABLEで指定されたアルゴリズムを上書きします。どこにもアルゴリズムが指定されていない場合、ABORTアルゴリズムが使用されます。</target>
        </trans-unit>
        <trans-unit id="8f1bb5e260f6d6940f8038960690efd8a13241e0" translate="yes" xml:space="preserve">
          <source>The algorithm used by memsys5 can be called &quot;power-of-two, first-fit&quot;. The sizes of all memory allocation requests are rounded up to a power of two and the request is satisfied by the first free slot in pBuf that is large enough. Adjacent freed allocations are coalesced using a buddy system. When used appropriately, this algorithm provides mathematical guarantees against fragmentation and breakdown, as described further &lt;a href=&quot;#nofrag&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">memsys5で使用されるアルゴリズムは、「2のべき乗、最初の適合」と呼ぶことができます。すべてのメモリ割り当て要求のサイズは2の累乗に切り上げられ、pBuf内の十分な大きさの最初の空きスロットによって要求が満たされます。隣接する解放された割り当ては、バディシステムを使用して結合されます。このアルゴリズムを適切に使用すると、&lt;a href=&quot;#nofrag&quot;&gt;以下で&lt;/a&gt;さらに説明するように、フラグメンテーションとブレークダウンに対する数学的保証が提供されます。</target>
        </trans-unit>
        <trans-unit id="91caf7e2c108fa5ca12a12fe7d7f1b642ba24d6e" translate="yes" xml:space="preserve">
          <source>The algorithm used by the sqlite3_blocking_prepare_v2() function is similar, except that step 4 (resetting the statement handle) is omitted.</source>
          <target state="translated">sqlite3_blocking_prepare_v2()関数で使用されるアルゴリズムは、ステップ4(ステートメントハンドルのリセット)が省略されていることを除いて、似ています。</target>
        </trans-unit>
        <trans-unit id="cae289508ac99f821f2b991e22b21782588d9eaa" translate="yes" xml:space="preserve">
          <source>The algorithm used by the sqlite3_blocking_step() function is as follows:</source>
          <target state="translated">sqlite3_blocking_step()関数が使用するアルゴリズムは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ce63f03e43853b117cae180b17d7d91a1fc4423c" translate="yes" xml:space="preserve">
          <source>The alternate-form-2 flag is a non-standard extension that appears in no other printf() implementations, as far as we know.</source>
          <target state="translated">alternate-form-2 フラグは、私たちの知る限り、他の printf()の実装には存在しない非標準の拡張です。</target>
        </trans-unit>
        <trans-unit id="28b22ace0382822e0d79f9e1827563fce76153d6" translate="yes" xml:space="preserve">
          <source>The alternative page cache mechanism is an extreme measure that is only needed by the most demanding applications. The built-in page cache is recommended for most uses.</source>
          <target state="translated">代替ページキャッシュ機構は、最も要求の厳しいアプリケーションでのみ必要とされる極端な対策です。ほとんどの用途では、組み込みのページキャッシュが推奨されています。</target>
        </trans-unit>
        <trans-unit id="8b4794d01495b7d8ad2197d5e4f4f33e4044492d" translate="yes" xml:space="preserve">
          <source>The alternative query formulations shown above are conceptual only. SQLite does not really transform the query. The actual query plan is like this: SQLite locates the first possible value for &quot;role&quot;, which it can do by rewinding the &quot;people_idx1&quot; index to the beginning and reading the first record. SQLite stores this first &quot;role&quot; value in an internal variable that we will here call &quot;$role&quot;. Then SQLite runs a query like: &quot;SELECT name FROM people WHERE role=$role AND height&amp;gt;=180&quot;. This query has an equality constraint on the left-most column of the index and so the index can be used to resolve that query. Once that query is finished, SQLite then uses the &quot;people_idx1&quot; index to locate the next value of the &quot;role&quot; column, using code that is logically similar to &quot;SELECT role FROM people WHERE role&amp;gt;$role LIMIT 1&quot;. This new &quot;role&quot; value overwrites the $role variable, and the process repeats until all possible values for &quot;role&quot; have been examined.</source>
          <target state="translated">上記の代替クエリの公式は概念的なものです。 SQLiteは実際にはクエリを変換しません。実際のクエリプランは次のようになります。SQLiteは、「people_idx1」インデックスを先頭に巻き戻して最初のレコードを読み取ることで、「ロール」の最初の可能な値を見つけます。 SQLiteは、最初の「ロール」値を、ここでは「$ロール」と呼ぶ内部変数に格納します。次に、SQLiteは、「SELECT FROM FROM people WHERE role = $ role AND height&amp;gt; = 180」のようなクエリを実行します。このクエリには、インデックスの左端の列に等価制約があるため、インデックスを使用してそのクエリを解決できます。クエリが完了すると、SQLiteは「people_idx1」インデックスを使用して、「role」列の次の値を検索します。SELECT FROM FROM people WHERE role&amp;gt; $ role LIMIT 1 &quot;。この新しい「role」の値は$ role変数を上書きし、「role」のすべての可能な値が調べられるまでプロセスが繰り返されます。</target>
        </trans-unit>
        <trans-unit id="a91f523f7f1e692f775ff82bc9d632716d5637ec" translate="yes" xml:space="preserve">
          <source>The amalgamation and the sqlite3.h header file are available on the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;download page&lt;/a&gt; as a file named sqlite-amalgamation-X.zip where the X is replaced by the appropriate version number.</source>
          <target state="translated">amalgamationとsqlite3.hヘッダーファイルは、Xが適切なバージョン番号に置き換えられたsqlite-amalgamation-X.zipという名前のファイルとして&lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;ダウンロードページで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="c0a154d12ef5a44def7683dee324b4a87567d061" translate="yes" xml:space="preserve">
          <source>The amalgamation contains everything you need to integrate SQLite into a larger project. Just copy the amalgamation into your source directory and compile it along with the other C code files in your project. (A &lt;a href=&quot;howtocompile&quot;&gt;more detailed discussion&lt;/a&gt; of the compilation process is available.) You may also want to make use of the &quot;sqlite3.h&quot; header file that defines the programming API for SQLite. The sqlite3.h header file is available separately. The sqlite3.h file is also contained within the amalgamation, in the first few thousand lines. So if you have a copy of sqlite3.c but cannot seem to locate sqlite3.h, you can always regenerate the sqlite3.h by copying and pasting from the amalgamation.</source>
          <target state="translated">この統合には、SQLiteをより大きなプロジェクトに統合するために必要なすべてのものが含まれています。融合をソースディレクトリにコピーして、プロジェクト内の他のCコードファイルと共にコンパイルするだけです。 （コンパイルプロセスの&lt;a href=&quot;howtocompile&quot;&gt;詳細な説明&lt;/a&gt;が利用可能です。）また、SQLiteのプログラミングAPIを定義する「sqlite3.h」ヘッダーファイルを利用することもできます。 sqlite3.hヘッダーファイルは別途入手できます。 sqlite3.hファイルも、最初の数千行で、アマガメーション内に含まれています。そのため、sqlite3.cのコピーはあるがsqlite3.hが見つからない場合は、アマルガムからコピーして貼り付けることで、常にsqlite3.hを再生成できます。</target>
        </trans-unit>
        <trans-unit id="c5760ad296baf5ccd7d73666c3833985afa715a2" translate="yes" xml:space="preserve">
          <source>The amount of payload that spills onto overflow pages also depends on the page type. For the following computations, let U be the usable size of a database page, the total page size less the reserved space at the end of each page. And let P be the payload size. In the following, symbol X represents the maximum amount of payload that can be stored directly on the b-tree page without spilling onto an overflow page and symbol M represents the minimum amount of payload that must be stored on the btree page before spilling is allowed.</source>
          <target state="translated">オーバーフローページにこぼれるペイロードの量は、ページの種類にも依存します。以下の計算では、U をデータベースページの使用可能なサイズ、すなわちページ全体のサイズから各ページの最後に予約されたスペースを差し引いたものとします。また、ペイロードサイズを P とする。以下では、記号 X は、オーバーフローページにこぼれることなく b-tree ページに直接格納できるペイロードの最大量を表し、記号 M は、こぼれが許される前に b-tree ページに格納しなければならないペイロードの最小量を表しています。</target>
        </trans-unit>
        <trans-unit id="cc7c17ba1fc473503228a1ad5223b1322c93e902" translate="yes" xml:space="preserve">
          <source>The amount of space allocated by sqlite3_aggregate_context(C,N) is determined by the N parameter on first successful call. Changing the value of N in any subsequent call to sqlite3_aggregate_context() within the same aggregate function instance will not resize the memory allocation. Within the xFinal callback, it is customary to set N=0 in calls to sqlite3_aggregate_context(C,N) so that no pointless memory allocations occur.</source>
          <target state="translated">sqlite3_aggregate_context(C,N)によって割り当てられる空間の量は、最初の呼び出しに成功したときのNパラメータによって決定されます。同じ集約関数インスタンス内でsqlite3_aggregate_context()を呼び出す際にNの値を変更しても、メモリ割り当てのサイズは変更されません。xFinalコールバック内では、無意味なメモリ割り当てが発生しないように、sqlite3_aggregate_context(C,N)の呼び出しでN=0を設定するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="3035b3f13a8c2eedd1a82b2e759ec82828d6061b" translate="yes" xml:space="preserve">
          <source>The amount of space allocated by sqlite3_aggregate_context(C,N) is determined by the N parameter on first successful call. Changing the value of N in subsequent call to sqlite3_aggregate_context() within the same aggregate function instance will not resize the memory allocation. Within the xFinal callback, it is customary to set N=0 in calls to sqlite3_aggregate_context(C,N) so that no pointless memory allocations occur.</source>
          <target state="translated">sqlite3_aggregate_context(C,N)によって割り当てられた領域の量は、最初の呼び出しに成功したときのNパラメータによって決定されます。同じ集約関数インスタンス内のsqlite3_aggregate_context()を呼び出す際にNの値を変更しても、メモリ割り当てのサイズは変更されません。xFinalコールバック内では、無意味なメモリ割り当てが発生しないように、sqlite3_aggregate_context(C,N)の呼び出しでN=0を設定するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="48fa74a585edf255bca976e35bf58c2115a55266" translate="yes" xml:space="preserve">
          <source>The android performance numbers for the write experiments are omitted because the performance tests on the Galaxy S3 are so random. Two consecutive runs of the exact same experiment would give wildly different times. And, to be fair, the performance of SQLite on android is slightly slower than writing directly to disk.</source>
          <target state="translated">Galaxy S3での性能テストは非常にランダムなので、書き込み実験のandroidの性能数値は省略しています。全く同じ実験を2回連続して実行すると、全く異なる時間が出てきます。そして、公平に言うと、android上のSQLiteの性能は、ディスクに直接書き込むよりもわずかに遅い。</target>
        </trans-unit>
        <trans-unit id="ba25e29078b648c595b0c513af632a78976e2d1a" translate="yes" xml:space="preserve">
          <source>The application file is portable across all operating systems, 32-bit and 64-bit and big- and little-endian architectures.</source>
          <target state="translated">アプリケーションファイルは、32ビット、64ビット、ビッグエンディアン、リトルエンディアンのアーキテクチャを問わず、すべてのオペレーティングシステムで移植可能です。</target>
        </trans-unit>
        <trans-unit id="553858a0531981a9db580aff8d49f00f4db9f6bc" translate="yes" xml:space="preserve">
          <source>The application has made changes to the &lt;a href=&quot;fts3#*shadowtab&quot;&gt;FTS shadow tables&lt;/a&gt; directly, without using the FTS3/4 virtual table, causing the shadow tables to become out of sync with each other.</source>
          <target state="translated">アプリケーションがFTS3 / 4仮想テーブルを使用せずに&lt;a href=&quot;fts3#*shadowtab&quot;&gt;FTSシャドウテーブルに&lt;/a&gt;直接変更を加えたため、シャドウテーブルが互いに同期しなくなりました。</target>
        </trans-unit>
        <trans-unit id="744b17ec690883f96b76e631855849a6884a7431" translate="yes" xml:space="preserve">
          <source>The application must ensure that the 1st parameter to sqlite3_exec() is a valid and open &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、sqlite3_exec（）への最初のパラメーターが有効でオープンな&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続である&lt;/a&gt;ことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="1a416f0180cf818dc5e0d104e2af8fd17ae77d32" translate="yes" xml:space="preserve">
          <source>The application must ensure that the 1st parameter to sqlite3_exec() is a valid and open &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、sqlite3_exec（）への最初のパラメーターが有効でオープンな&lt;a href=&quot;sqlite3&quot;&gt;データベース接続である&lt;/a&gt;ことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="9dbea7596a56ecae7226dfed468f733b0ebf473a" translate="yes" xml:space="preserve">
          <source>The application must finalize every &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; in order to avoid resource leaks. It is a grievous error for the application to try to use a prepared statement after it has been finalized. Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption.</source>
          <target state="translated">アプリケーションは、リソースリークを回避するために、&lt;a href=&quot;#sqlite3_stmt&quot;&gt;準備され&lt;/a&gt;たすべてのステートメントを終了する必要があります。アプリケーションが準備されたステートメントを確定した後で使用しようとすると、重大なエラーになります。ファイナライズ後にプリペアドステートメントを使用すると、セグメンテーション違反やヒープの破損など、未定義の望ましくない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fb5d8c6646b2fcb9cbadc4a78abf91f82a6d7868" translate="yes" xml:space="preserve">
          <source>The application must finalize every &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; in order to avoid resource leaks. It is a grievous error for the application to try to use a prepared statement after it has been finalized. Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption.</source>
          <target state="translated">アプリケーションは、リソースリークを回避するために、&lt;a href=&quot;stmt&quot;&gt;準備され&lt;/a&gt;たすべてのステートメントを終了する必要があります。アプリケーションが準備されたステートメントを確定した後で使用しようとすると、重大なエラーになります。ファイナライズ後にプリペアドステートメントを使用すると、セグメンテーション違反やヒープの破損など、未定義の望ましくない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="99cabfda3eb8aea847c63c772b815f9008f98dc6" translate="yes" xml:space="preserve">
          <source>The application must not close the &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; specified by the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.</source>
          <target state="translated">アプリケーションは、sqlite3_exec（）の実行中に、sqlite3_exec（）への第1パラメータで指定された&lt;a href=&quot;#sqlite3&quot;&gt;データベース接続を&lt;/a&gt;閉じてはなりません。</target>
        </trans-unit>
        <trans-unit id="0e45e1c6c5dd0bb0af2de4709122fb9b7f5aa23a" translate="yes" xml:space="preserve">
          <source>The application must not close the &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; specified by the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.</source>
          <target state="translated">アプリケーションは、sqlite3_exec（）の実行中に、sqlite3_exec（）への第1パラメータで指定された&lt;a href=&quot;sqlite3&quot;&gt;データベース接続を&lt;/a&gt;閉じてはなりません。</target>
        </trans-unit>
        <trans-unit id="1ec93d570d3944810e00416d33fc158ef0b8df22" translate="yes" xml:space="preserve">
          <source>The application must not modify the SQL statement text passed into the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.</source>
          <target state="translated">アプリケーションは、sqlite3_exec()が実行されている間、sqlite3_exec()の2番目のパラメータに渡されたSQL文のテキストを変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="dd08aa5c98a2b87e47c47375f85e57ce41e870bc" translate="yes" xml:space="preserve">
          <source>The application must not read or write any part of a block of memory after it has been released using &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_realloc()&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free（）&lt;/a&gt;または&lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_realloc（）&lt;/a&gt;を使用して解放された後、メモリブロックの一部を読み書きしないでください。</target>
        </trans-unit>
        <trans-unit id="04da8df88f025325ec4119082e7436a2ab79cfbf" translate="yes" xml:space="preserve">
          <source>The application must not read or write any part of a block of memory after it has been released using &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt; or &lt;a href=&quot;free&quot;&gt;sqlite3_realloc()&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;free&quot;&gt;sqlite3_free（）&lt;/a&gt;または&lt;a href=&quot;free&quot;&gt;sqlite3_realloc（）&lt;/a&gt;を使用して解放された後、メモリブロックの一部を読み書きしないでください。</target>
        </trans-unit>
        <trans-unit id="7136e470c61d513b5e2e7bb04278f687766f03e3" translate="yes" xml:space="preserve">
          <source>The application only has to load the data it needs, rather than reading the entire file and holding a complete parse in memory.</source>
          <target state="translated">アプリケーションは、ファイル全体を読み込んで完全なパースをメモリに保持するのではなく、必要なデータだけをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="e521cca41ad74c95daa61ed9901e7bb27bdf7838" translate="yes" xml:space="preserve">
          <source>The application should never invoke either sqlite3_os_init() or sqlite3_os_end() directly. The application should only invoke sqlite3_initialize() and sqlite3_shutdown(). The sqlite3_os_init() interface is called automatically by sqlite3_initialize() and sqlite3_os_end() is called by sqlite3_shutdown(). Appropriate implementations for sqlite3_os_init() and sqlite3_os_end() are built into SQLite when it is compiled for Unix, Windows, or OS/2. When &lt;a href=&quot;../custombuild&quot;&gt;built for other platforms&lt;/a&gt; (using the &lt;a href=&quot;../compile#os_other&quot;&gt;SQLITE_OS_OTHER=1&lt;/a&gt; compile-time option) the application must supply a suitable implementation for sqlite3_os_init() and sqlite3_os_end(). An application-supplied implementation of sqlite3_os_init() or sqlite3_os_end() must return &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; on success and some other &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; upon failure.</source>
          <target state="translated">アプリケーションでsqlite3_os_init（）またはsqlite3_os_end（）を直接呼び出さないでください。アプリケーションは、sqlite3_initialize（）およびsqlite3_shutdown（）のみを呼び出す必要があります。 sqlite3_os_init（）インターフェースはsqlite3_initialize（）によって自動的に呼び出され、sqlite3_os_end（）はsqlite3_shutdown（）によって呼び出されます。 sqlite3_os_init（）およびsqlite3_os_end（）の適切な実装は、Unix、Windows、またはOS / 2用にコンパイルされたときにSQLiteに組み込まれます。（&lt;a href=&quot;../compile#os_other&quot;&gt;SQLITE_OS_OTHER = 1&lt;/a&gt;コンパイル時オプションを使用&lt;a href=&quot;../custombuild&quot;&gt;して）他のプラットフォーム用にビルドする&lt;/a&gt;場合、アプリケーションはsqlite3_os_init（）およびsqlite3_os_end（）の適切な実装を提供する必要があります。アプリケーションが提供するsqlite3_os_init（）またはsqlite3_os_end（）の実装は、成功した場合は&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;を返し、その他の場合は&lt;a href=&quot;../rescode&quot;&gt;&lt;/a&gt;失敗時のエラーコード。</target>
        </trans-unit>
        <trans-unit id="5f9522c8f8708f8f795d05750d26ac94e862ee81" translate="yes" xml:space="preserve">
          <source>The application should never invoke either sqlite3_os_init() or sqlite3_os_end() directly. The application should only invoke sqlite3_initialize() and sqlite3_shutdown(). The sqlite3_os_init() interface is called automatically by sqlite3_initialize() and sqlite3_os_end() is called by sqlite3_shutdown(). Appropriate implementations for sqlite3_os_init() and sqlite3_os_end() are built into SQLite when it is compiled for Unix, Windows, or OS/2. When &lt;a href=&quot;custombuild&quot;&gt;built for other platforms&lt;/a&gt; (using the &lt;a href=&quot;compile#os_other&quot;&gt;SQLITE_OS_OTHER=1&lt;/a&gt; compile-time option) the application must supply a suitable implementation for sqlite3_os_init() and sqlite3_os_end(). An application-supplied implementation of sqlite3_os_init() or sqlite3_os_end() must return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; on success and some other &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; upon failure.</source>
          <target state="translated">アプリケーションでsqlite3_os_init（）またはsqlite3_os_end（）を直接呼び出さないでください。アプリケーションは、sqlite3_initialize（）およびsqlite3_shutdown（）のみを呼び出す必要があります。 sqlite3_os_init（）インターフェースはsqlite3_initialize（）によって自動的に呼び出され、sqlite3_os_end（）はsqlite3_shutdown（）によって呼び出されます。 sqlite3_os_init（）およびsqlite3_os_end（）の適切な実装は、Unix、Windows、またはOS / 2用にコンパイルされたときにSQLiteに組み込まれます。（&lt;a href=&quot;compile#os_other&quot;&gt;SQLITE_OS_OTHER = 1&lt;/a&gt;コンパイル時オプションを使用&lt;a href=&quot;custombuild&quot;&gt;して）他のプラットフォーム用にビルドする&lt;/a&gt;場合、アプリケーションはsqlite3_os_init（）およびsqlite3_os_end（）の適切な実装を提供する必要があります。アプリケーションが提供するsqlite3_os_init（）またはsqlite3_os_end（）の実装は、成功した場合は&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;を返し、その他の場合は&lt;a href=&quot;rescode&quot;&gt;&lt;/a&gt;失敗時のエラーコード。</target>
        </trans-unit>
        <trans-unit id="371b08e858c1c9c61f57bffa9ac30d2c2c9616ae" translate="yes" xml:space="preserve">
          <source>The application wants to prevent other processes from accessing the database file.</source>
          <target state="translated">このアプリケーションは、他のプロセスがデータベースファイルにアクセスするのを防ぎたいと考えています。</target>
        </trans-unit>
        <trans-unit id="da9edea5d79c9c534eb8f394ef49ec7d996e51c8" translate="yes" xml:space="preserve">
          <source>The application_id PRAGMA is used to query or set the 32-bit signed big-endian &quot;Application ID&quot; integer located at offset 68 into the &lt;a href=&quot;fileformat2#database_header&quot;&gt;database header&lt;/a&gt;. Applications that use SQLite as their &lt;a href=&quot;appfileformat&quot;&gt;application file-format&lt;/a&gt; should set the Application ID integer to a unique integer so that utilities such as &lt;a href=&quot;http://www.darwinsys.com/file/&quot;&gt;file(1)&lt;/a&gt; can determine the specific file type rather than just reporting &quot;SQLite3 Database&quot;. A list of assigned application IDs can be seen by consulting the &lt;a href=&quot;http://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=magic.txt&quot;&gt;magic.txt&lt;/a&gt; file in the SQLite source repository.</source>
          <target state="translated">application_id PRAGMAは、オフセット68にある32ビットの符号付きビッグエンディアン「アプリケーションID」整数を照会または&lt;a href=&quot;fileformat2#database_header&quot;&gt;データベースヘッダーに&lt;/a&gt;設定するために使用されます。アプリケーション&lt;a href=&quot;appfileformat&quot;&gt;ファイル形式&lt;/a&gt;としてSQLiteを使用するアプリケーションは、アプリケーションID整数を一意の整数に設定して、&lt;a href=&quot;http://www.darwinsys.com/file/&quot;&gt;file（1）&lt;/a&gt;などのユーティリティが単に「SQLite3データベース」を報告するのではなく、特定のファイルタイプを判別できるようにする必要があります。割り当てられたアプリケーションIDのリストは、SQLiteソースリポジトリの&lt;a href=&quot;http://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=magic.txt&quot;&gt;magic.txt&lt;/a&gt;ファイルを参照することで確認できます。</target>
        </trans-unit>
        <trans-unit id="fbebe3f29ae821a203a540ede83fca7a51f6300e" translate="yes" xml:space="preserve">
          <source>The applications using this database are entitled to assume that for each row in the</source>
          <target state="translated">このデータベースを使用しているアプリケーションは</target>
        </trans-unit>
        <trans-unit id="c4abdec20da55bda36a7679394be4f500b633ccf" translate="yes" xml:space="preserve">
          <source>The argc parameter specifies the number of entries in the argv array. The value of argc will be 1 for a pure delete operation or N+2 for an insert or replace or update where N is the number of columns in the table. In the previous sentence, N includes any hidden columns.</source>
          <target state="translated">argcパラメータは、argv配列のエントリ数を指定します。argcの値は、純粋な削除操作の場合は1、挿入、置換、更新の場合はN+2となります。前の文では、Nには隠された列が含まれています。</target>
        </trans-unit>
        <trans-unit id="b66b85dc16bc6667c3624ba8e6f64b24df3ac149" translate="yes" xml:space="preserve">
          <source>The argument N is the maximum number of bytes of the database file that will be accessed using memory-mapped I/O. If N is zero then memory mapped I/O is disabled. If N is negative, then the limit reverts to the default value determined by the most recent &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;), or to the compile time default determined by &lt;a href=&quot;compile#default_mmap_size&quot;&gt;SQLITE_DEFAULT_MMAP_SIZE&lt;/a&gt; if not start-time limit has been set.</source>
          <target state="translated">引数Nは、メモリマップI / Oを使用してアクセスされるデータベースファイルの最大バイト数です。Nがゼロの場合、メモリマップI / Oは無効になります。Nが負の場合、制限は最新の&lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;（&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmmapsize&quot;&gt;SQLITE_CONFIG_MMAP_SIZE&lt;/a&gt;）によって決定されるデフォルト値に戻るか、開始時間制限が設定されていない場合は&lt;a href=&quot;compile#default_mmap_size&quot;&gt;SQLITE_DEFAULT_MMAP_SIZE&lt;/a&gt;によって決定されるコンパイル時のデフォルトに戻ります。</target>
        </trans-unit>
        <trans-unit id="7500855ec2b0357e501bb580486bc273725ede2e" translate="yes" xml:space="preserve">
          <source>The argument can be either the text of an SQL statement, in which case the bytecode (or tables_used) for that statement is returned, or the argument can be a parameter such as ?1 or $stmt that is later bound to a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; object using the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer()&lt;/a&gt; interface. Use a pointer type of &quot;stmt-pointer&quot; for the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer()&lt;/a&gt; interface.</source>
          <target state="translated">引数は、SQLステートメントのテキスト（この場合はそのステートメントのバイトコード（またはtables_used）が返されます）、または後で&lt;a href=&quot;c3ref/stmt&quot;&gt;準備されたステートメント&lt;/a&gt;オブジェクトにバインドされる？1や$ stmtなどのパラメーターのいずれかです。&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer（）&lt;/a&gt;インターフェースを使用します。&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer（）&lt;/a&gt;インターフェースには「stmt-pointer」のポインタータイプを使用します。</target>
        </trans-unit>
        <trans-unit id="ab61127b621c6e57d8aaaae340d80e94025b5867" translate="yes" xml:space="preserve">
          <source>The argument is a double which is displayed in decimal.</source>
          <target state="translated">引数には10進数で表示されるダブルを指定します。</target>
        </trans-unit>
        <trans-unit id="7c92aff7ca85efdc01cd4da9e4f23a18dad234e0" translate="yes" xml:space="preserve">
          <source>The argument is a double which is displayed in either normal decimal notation or if the exponent is not close to zero, in exponential notation.</source>
          <target state="translated">引数はdoubleで、通常の10進数表記で表示されるか、指数がゼロに近くない場合は指数表記で表示されます。</target>
        </trans-unit>
        <trans-unit id="2096ff23b8873f39597795db4f99b816ed776fc9" translate="yes" xml:space="preserve">
          <source>The argument is a double which is displayed in exponential notation. The exponent character is 'e' or 'E' depending on the type.</source>
          <target state="translated">引数には、指数表記で表示されるダブルを指定します。指数文字は型に応じて 'e' または 'E' です。</target>
        </trans-unit>
        <trans-unit id="11129b8da0d471f1bf24142ea87e57c0024e71a8" translate="yes" xml:space="preserve">
          <source>The argument is a pointer to an integer. Nothing is displayed for this substitution type. Instead, the integer to which the argument points is overwritten with the number of characters in the generated string that result from all format symbols to the left of the %n.</source>
          <target state="translated">引数は整数へのポインタです。この置換型では何も表示されません。代わりに、引数が指す整数は、%n の左にあるすべての書式記号の結果として生成された文字列の文字数で上書きされます。</target>
        </trans-unit>
        <trans-unit id="e6906c7030bdaf7b36a456360b0fbb4934d1a4ca" translate="yes" xml:space="preserve">
          <source>The argument is a pointer which is displayed as a hexadecimal address. Since the SQL language has no concept of a pointer, the %p substitution for the &lt;a href=&quot;lang_corefunc#printf&quot;&gt;printf() SQL function&lt;/a&gt; works like %x.</source>
          <target state="translated">引数は、16進数のアドレスとして表示されるポインターです。SQL言語にはポインターの概念がないため、&lt;a href=&quot;lang_corefunc#printf&quot;&gt;printf（）SQL関数&lt;/a&gt;の％p置換は％xのように機能します。</target>
        </trans-unit>
        <trans-unit id="e27c7fe9a83c9f08bcef3b205174fd7f4958e0c9" translate="yes" xml:space="preserve">
          <source>The argument is a signed integer which is displayed in decimal.</source>
          <target state="translated">引数は符号付き整数で、10進数で表示されます。</target>
        </trans-unit>
        <trans-unit id="9b566b967632a4d496722ab350e0797c5b50a8e6" translate="yes" xml:space="preserve">
          <source>The argument is a zero-terminated string that is displayed. For the %z type in C-language interfaces, &lt;a href=&quot;c3ref/free&quot; id=&quot;percentz&quot;&gt;sqlite3_free()&lt;/a&gt; is invoked on the string after it has be copied into the output. The %s and %z substitutions are identical for the SQL printf() function.</source>
          <target state="translated">引数は、表示されるゼロで終了する文字列です。C言語インターフェイスの％zタイプの場合、文字列が出力にコピーされた後、文字列に対して&lt;a href=&quot;c3ref/free&quot; id=&quot;percentz&quot;&gt;sqlite3_free（）&lt;/a&gt;が呼び出されます。％sと％zの置換は、SQLのprintf（）関数と同じです。</target>
        </trans-unit>
        <trans-unit id="fcbbea9fc49916ff3eab8108379983087fe602ea" translate="yes" xml:space="preserve">
          <source>The argument is a zero-terminated string. The string is printed with all single quote (') characters doubled so that the string can safely appear inside an SQL string literal. The %Q substitution type also puts single-quotes on both ends of the substituted string.</source>
          <target state="translated">引数はゼロ終端の文字列です。SQL 文字列リテラル内に文字列が安全に表示されるように、文字列はシングル・クォート (')文字をすべて 2 倍にして印刷されます。Q 置換型もまた、置換された文字列の両端にシングル引用符を付けます。</target>
        </trans-unit>
        <trans-unit id="f7cdf0497339bca82de3b36c80d3d61e29bc5c49" translate="yes" xml:space="preserve">
          <source>The argument is an integer which is displayed in hexadecimal. Lower-case hexadecimal is used for %x and upper-case is used for %X</source>
          <target state="translated">引数は、16 進数で表示される整数です。小文字の 16 進数が %x に、大文字の 16 進数が %X に使用されます。</target>
        </trans-unit>
        <trans-unit id="e8fcc09e116d95e79ec104c4fc555cc628b5c95b" translate="yes" xml:space="preserve">
          <source>The argument is an integer which is displayed in octal.</source>
          <target state="translated">引数は整数で、8進数で表示されます。</target>
        </trans-unit>
        <trans-unit id="544017bf0d02198d9d372e60ce173d51892cc644" translate="yes" xml:space="preserve">
          <source>The argument is an unsigned integer which is displayed in decimal.</source>
          <target state="translated">引数には10進数で表示される符号なし整数を指定します。</target>
        </trans-unit>
        <trans-unit id="5c161c084d3e3e79567bd33437dedcb35b7796bf" translate="yes" xml:space="preserve">
          <source>The argument is the symbolic name for the desired VFS. If the argument is a NULL pointer, then the default VFS is returned. The function returns a pointer to the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object that implements the VFS. Or it returns a NULL pointer if no object could be found that matched the search criteria.</source>
          <target state="translated">引数は、目的のVFSの記号名です。引数がNULLポインターの場合、デフォルトのVFSが返されます。この関数は、VFSを実装する&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;オブジェクトへのポインターを返します。または、検索条件に一致するオブジェクトが見つからなかった場合は、NULLポインターを返します。</target>
        </trans-unit>
        <trans-unit id="850af1642ffa208db124c3d32de875df305d3783" translate="yes" xml:space="preserve">
          <source>The argument to INTO can be a &lt;a href=&quot;uri&quot;&gt;URI filename&lt;/a&gt; if URI filenames are enabled. URL filenames are enabled if any of the following are true:</source>
          <target state="translated">INTOへの引数は、&lt;a href=&quot;uri&quot;&gt;URIファイル&lt;/a&gt;名が有効な場合、URIファイル名にすることができます。次のいずれかに該当する場合、URLファイル名が有効になります。</target>
        </trans-unit>
        <trans-unit id="5b032a307670cabd16d781ba02c89e270db9d32d" translate="yes" xml:space="preserve">
          <source>The argument to the timeout method is the maximum number of milliseconds to wait for the lock to clear. So in the example above, the maximum delay would be 2 seconds.</source>
          <target state="translated">timeout メソッドの引数には、ロックがクリアされるまで待つ最大ミリ秒数を指定します。したがって、上の例では、最大遅延時間は 2 秒となります。</target>
        </trans-unit>
        <trans-unit id="6304247ca5d53ec4d2f27644451268a5fc4c44d5" translate="yes" xml:space="preserve">
          <source>The arguments passed to the &quot;tokenchars=&quot; or &quot;separators=&quot; options are case-sensitive. In the example above, specifying that &quot;X&quot; is a separator character does not affect the way &quot;x&quot; is handled.</source>
          <target state="translated">tokenchars=&quot; や &quot;separators=&quot; オプションに渡される引数は、大文字と小文字を区別します。上の例では、&quot;X&quot; がセパレータ文字であることを指定しても、&quot;x&quot; の扱いには影響しません。</target>
        </trans-unit>
        <trans-unit id="f42ca2142ac7440fc4af993ad46bce7740b98121" translate="yes" xml:space="preserve">
          <source>The arguments to &lt;b&gt;sqlite_busy_handler&lt;/b&gt; are the opaque structure returned from &lt;b&gt;sqlite_open&lt;/b&gt;, a pointer to the busy callback function, and a generic pointer that will be passed as the first argument to the busy callback. When SQLite invokes the busy callback, it sends it three arguments: the generic pointer that was passed in as the third argument to &lt;b&gt;sqlite_busy_handler&lt;/b&gt;, the name of the database table or index that the library is trying to access, and the number of times that the library has attempted to access the database table or index.</source>
          <target state="translated">引数&lt;b&gt;sqlite_busy_handlerが&lt;/b&gt;から返された不透明な構造です&lt;b&gt;sqlite_open&lt;/b&gt;、忙しいコールバック関数へのポインタ、と忙しいコールバックへの最初の引数として渡される汎用ポインタ。SQLiteがビジーコールバックを呼び出すと、3つの引数が送信されます。3番目の引数として&lt;b&gt;sqlite_busy_handler&lt;/b&gt;に3番目の引数として渡されたジェネリックポインター、ライブラリがアクセスしようとしているデータベーステーブルまたはインデックスの名前、およびライブラリがデータベーステーブルまたはインデックスにアクセスしようとしました。</target>
        </trans-unit>
        <trans-unit id="6fa9f93d8e2b44eeb698d1ed1229d89e77acc71a" translate="yes" xml:space="preserve">
          <source>The argv[0] parameter is the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of a row in the virtual table to be deleted. If argv[0] is an SQL NULL, then no deletion occurs.</source>
          <target state="translated">argv [0]パラメータは、削除される仮想テーブルの行の行&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ID&lt;/a&gt;です。argv [0]がSQL NULLの場合、削除は行われません。</target>
        </trans-unit>
        <trans-unit id="94f42e72810bd428d0a06485b57a23695591e88c" translate="yes" xml:space="preserve">
          <source>The argv[1] parameter is the rowid of a new row to be inserted into the virtual table. If argv[1] is an SQL NULL, then the implementation must choose a rowid for the newly inserted row. Subsequent argv[] entries contain values of the columns of the virtual table, in the order that the columns were declared. The number of columns will match the table declaration that the &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; or &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; method made using the &lt;a href=&quot;c3ref/declare_vtab&quot;&gt;sqlite3_declare_vtab()&lt;/a&gt; call. All hidden columns are included.</source>
          <target state="translated">argv [1]パラメータは、仮想テーブルに挿入される新しい行のROWIDです。argv [1]がSQL NULLの場合、実装は新しく挿入された行のROWIDを選択する必要があります。後続のargv []エントリには、仮想テーブルの列の値が、列が宣言された順序で含まれています。列の数は、&lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt;または&lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt;メソッドが&lt;a href=&quot;c3ref/declare_vtab&quot;&gt;sqlite3_declare_vtab（）&lt;/a&gt;呼び出しを使用して作成したテーブル宣言と一致します。すべての非表示の列が含まれています。</target>
        </trans-unit>
        <trans-unit id="960c591f856ba7201455da5f944d6e4f1ebae33d" translate="yes" xml:space="preserve">
          <source>The arrows from the small circles labeled with &quot;*&quot; indicate the cost of running each loop with no dependencies. The outer loop must use this *-cost. Inner loops have the option of using the *-cost or a cost assuming one of the other terms is in an outer loop, whichever gives the best result. One can think of the *-costs as a short-hand notation indicating multiple arcs, one from each of the other nodes in the graph. The graph is therefore &quot;complete&quot;, meaning that there are arcs (some explicit and some implied) in both directions between every pair of nodes in the graph.</source>
          <target state="translated">と書かれた小さな丸からの矢印は、依存関係のない状態で各ループを実行するためのコストを示しています。外部ループはこの*コストを使用しなければなりません。内側のループでは、*-costを使うか、他の条件のいずれかが外側のループにあると仮定してコストを使うかの選択肢があり、どちらが最良の結果をもたらします。コストは、グラフ内の他のノードからの複数の円弧を示す短手の記法と考えることができます。したがって,グラフは「完全」であり,グラフ内の各ノードのペアの間に,両方向に円弧(いくつかの明示的なものと暗示的なもの)が存在することを意味します.</target>
        </trans-unit>
        <trans-unit id="d6a2923f627b3acd76aca2425895d68fa7fb43f5" translate="yes" xml:space="preserve">
          <source>The assert(X) macro is &lt;a href=&quot;https://en.wikipedia.org/wiki/Assert.h&quot;&gt;part of standard C&lt;/a&gt;, in the &amp;lt;assert.h&amp;gt; header file. SQLite adds three other assert()-like macros named NEVER(X), ALWAYS(X), and testcase(X).</source>
          <target state="translated">assert（X）マクロは、&amp;lt;assert.h&amp;gt;ヘッダーファイル内&lt;a href=&quot;https://en.wikipedia.org/wiki/Assert.h&quot;&gt;の標準Cの一部&lt;/a&gt;です。SQLiteは、NEVER（X）、ALWAYS（X）、およびtestcase（X）という名前の3つのassert（）のようなマクロを追加します。</target>
        </trans-unit>
        <trans-unit id="8da4f4835817f9b4a63cc18fb5421f7207d5d808" translate="yes" xml:space="preserve">
          <source>The asynchronous I/O VFS is registered (and unregistered) by calls to the API functions sqlite3async_initialize() and sqlite3async_shutdown(). See section &quot;Compilation and Usage&quot; below for details.</source>
          <target state="translated">非同期I/O VFSはAPI関数sqlite3async_initialize()とsqlite3async_shutdown()の呼び出しによって登録(および登録解除)されます。詳細は後述の「コンパイルと使用法」を参照してください。</target>
        </trans-unit>
        <trans-unit id="535287426332e5a1ad8bec16b3d83b02751661a5" translate="yes" xml:space="preserve">
          <source>The asynchronous IO VFS API is described in detail in comments in sqlite3async.h. Using the API usually consists of the following steps:</source>
          <target state="translated">非同期IO VFS APIの詳細はsqlite3async.hのコメントで説明されています。</target>
        </trans-unit>
        <trans-unit id="99f2292b58193481d23d957b96b6816c332c0bd5" translate="yes" xml:space="preserve">
          <source>The asynchronous IO extension consists of a single file of C code (sqlite3async.c), and a header file (sqlite3async.h), located in the &lt;a href=&quot;http://www.sqlite.org/src/dir?name=ext/async&quot;&gt; &lt;code&gt;ext/async/&lt;/code&gt; subfolder&lt;/a&gt; of the SQLite source tree, that defines the C API used by applications to activate and control the modules functionality.</source>
          <target state="translated">非同期IO拡張は、Cコードの単一のファイル（sqlite3async.c）と、SQLiteソースツリーの&lt;a href=&quot;http://www.sqlite.org/src/dir?name=ext/async&quot;&gt; &lt;code&gt;ext/async/&lt;/code&gt; &lt;/a&gt;サブフォルダーにあるヘッダーファイル（sqlite3async.h）で構成され、アプリケーションが使用するC APIを定義します。モジュールの機能をアクティブにして制御します。</target>
        </trans-unit>
        <trans-unit id="fa3d3b11288ba36989fe692263c29b42026caa0f" translate="yes" xml:space="preserve">
          <source>The asynchronous SQLite is just a shade slower than MySQL on this test. (MySQL seems to be especially adept at INSERT...SELECT statements.) The PostgreSQL engine is still thrashing - most of the 61 seconds it used were spent waiting on disk I/O.</source>
          <target state="translated">非同期SQLiteは、このテストではMySQLよりもわずかに遅くなっています。(MySQLはINSERT...SELECT文に特に秀でているようです。)PostgreSQLエンジンは未だに荒れ狂い続けています。</target>
        </trans-unit>
        <trans-unit id="09f0791bf3a9c39b17b6897fd1eef3b3d7a8e21f" translate="yes" xml:space="preserve">
          <source>The atomic commit mechanism in SQLite has proven to be robust, but it can be circumvented by a sufficiently creative adversary or a sufficiently broken operating system implementation. This section describes a few of the ways in which an SQLite database might be corrupted by a power failure or system crash. (See also: &lt;a href=&quot;howtocorrupt&quot;&gt;How To Corrupt Your Database Files&lt;/a&gt;.)</source>
          <target state="translated">SQLiteのアトミックコミットメカニズムは堅牢であることが証明されていますが、十分に創造的な敵または十分に壊れたオペレーティングシステムの実装によって回避できます。このセクションでは、電源障害またはシステムクラッシュによってSQLiteデータベースが破損する可能性があるいくつかの方法について説明します。（参照：&lt;a href=&quot;howtocorrupt&quot;&gt;データベースファイルを破損する方法&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="be392afd276ea778d7374d96f033564d6dcc8ac2" translate="yes" xml:space="preserve">
          <source>The attacker can submit a maliciously crafted database file to the application that the application will then open and query.</source>
          <target state="translated">攻撃者は、悪意を持って細工されたデータベースファイルをアプリケーションに送信し、そのファイルをアプリケーションが開いてクエリーすることができます。</target>
        </trans-unit>
        <trans-unit id="a4da2591e4ae0c979cba5f61016108bf072266c8" translate="yes" xml:space="preserve">
          <source>The attacker can submit and run arbitrary SQL statements.</source>
          <target state="translated">攻撃者は任意のSQL文を送信して実行することができます。</target>
        </trans-unit>
        <trans-unit id="7497e373861cdeb1f861bd3cb7a15f476a8a4234" translate="yes" xml:space="preserve">
          <source>The author of Lemon and SQLite (Hipp) reports that his C programming skills were greatly enhanced by studying John Ousterhout's original source code to Tcl. Hipp discovered and studied Tcl in 1993. Lemon was written before then, and SQLite afterwards. There is a clear difference in the coding styles of these two products, with SQLite seeming to be cleaner, more readable, and easier to maintain.</source>
          <target state="translated">LemonとSQLiteの著者(Hipp)は、John OusterhoutのTclへのオリジナルソースコードを研究したことで、C言語のプログラミングスキルが大幅に向上したと報告しています。HippがTclを発見して研究したのは1993年のことです。Lemonはそれ以前に書かれたもので、SQLiteはその後に書かれたものです。この2つの製品のコーディングスタイルには明らかな違いがあり、SQLiteの方がよりクリーンで読みやすく、メンテナンスも容易になっているようです。</target>
        </trans-unit>
        <trans-unit id="b01615602e972abb3c5942edbe63b3d8efbfa2ac" translate="yes" xml:space="preserve">
          <source>The authority may be omitted, may be blank, or may be &quot;&lt;code&gt;localhost&lt;/code&gt;&quot;. Any other authority results in an error. Exception: If SQLite is compiled with &lt;a href=&quot;compile#allow_uri_authority&quot;&gt;SQLITE_ALLOW_URI_AUTHORITY&lt;/a&gt; then any authority value other than &quot;localhost&quot; is passed through to the underlying operating system as a UNC filename.</source>
          <target state="translated">権限は省略されたり、空白になったり、「 &lt;code&gt;localhost&lt;/code&gt; 」になったりします。その他の権限はエラーになります。例外：SQLiteが&lt;a href=&quot;compile#allow_uri_authority&quot;&gt;SQLITE_ALLOW_URI_AUTHORITY&lt;/a&gt;でコンパイルされている場合、 &quot;localhost&quot;以外の権限値はUNCファイル名として基本となるオペレーティングシステムに渡されます。</target>
        </trans-unit>
        <trans-unit id="939e9fe5172b44eee1c6df02720143adc80675d6" translate="yes" xml:space="preserve">
          <source>The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback. Note that &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; both modify their database connections for the meaning of &quot;modify&quot; in this paragraph.</source>
          <target state="translated">オーソライザーコールバックは、オーソライザーコールバックを呼び出したデータベース接続を変更するようなことをしてはなりません。&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）は&lt;/a&gt;どちらも、この段落の「変更」の意味でデータベース接続を変更することに注意してください。</target>
        </trans-unit>
        <trans-unit id="cd0b9544f8e0ba2efe9de0f3a90df70febb9c84b" translate="yes" xml:space="preserve">
          <source>The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback. Note that &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; and &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; both modify their database connections for the meaning of &quot;modify&quot; in this paragraph.</source>
          <target state="translated">オーソライザーコールバックは、オーソライザーコールバックを呼び出したデータベース接続を変更するようなことをしてはなりません。&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;と&lt;a href=&quot;step&quot;&gt;sqlite3_step（）は&lt;/a&gt;どちらも、この段落の「変更」の意味でデータベース接続を変更することに注意してください。</target>
        </trans-unit>
        <trans-unit id="861ac52bff28d8b37d00f46c9e8ab0bcdffeef17" translate="yes" xml:space="preserve">
          <source>The automatic indexing capability can be disabled at run-time using the &lt;a href=&quot;pragma#pragma_automatic_index&quot;&gt;automatic_index pragma&lt;/a&gt;. Automatic indexing is turned on by default, but this can be changed so that automatic indexing is off by default using the &lt;a href=&quot;compile#default_automatic_index&quot;&gt;SQLITE_DEFAULT_AUTOMATIC_INDEX&lt;/a&gt; compile-time option. The ability to create automatic indices can be completely disabled by compiling with the &lt;a href=&quot;compile#omit_automatic_index&quot;&gt;SQLITE_OMIT_AUTOMATIC_INDEX&lt;/a&gt; compile-time option.</source>
          <target state="translated">自動インデックス機能は、&lt;a href=&quot;pragma#pragma_automatic_index&quot;&gt;automatic_indexプラグマ&lt;/a&gt;を使用して、実行時に無効にすることができます。自動インデックス作成はデフォルトでオンになっていますが、&lt;a href=&quot;compile#default_automatic_index&quot;&gt;SQLITE_DEFAULT_AUTOMATIC_INDEX&lt;/a&gt;コンパイル時オプションを使用して自動インデックス作成がデフォルトでオフになるように変更できます。&lt;a href=&quot;compile#omit_automatic_index&quot;&gt;SQLITE_OMIT_AUTOMATIC_INDEX&lt;/a&gt;コンパイル時オプションを指定してコンパイルすると、自動インデックスを作成する機能を完全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ea88f1175fb0f90865a8970907b5e05e253378e5" translate="yes" xml:space="preserve">
          <source>The avg() function returns the average value of all non-NULL</source>
          <target state="translated">avg()関数は、NULL ではないすべての</target>
        </trans-unit>
        <trans-unit id="c29cb183c63bdd561faeb944d923a238a65c8f1b" translate="yes" xml:space="preserve">
          <source>The b-tree algorithm provides key/data storage with unique and ordered keys on page-oriented storage devices. For background information on b-trees, see Knuth, &lt;u&gt;The Art Of Computer Programming&lt;/u&gt;, Volume 3 &quot;Sorting and Searching&quot;, pages 471-479. Two kinds of b-trees are used by SQLite. The algorithm that Knuth calls &quot;B*-Tree&quot; stores all data in the leaves of the tree. SQLite calls this variety of b-tree a &quot;table b-tree&quot;. The algorithm that Knuth calls simply &quot;B-Tree&quot; stores both the key and the data together in both leaves and in interior pages. In the SQLite implementation, the original B-Tree algorithm stores keys only, omitting the data entirely, and is called an &quot;index b-tree&quot;.</source>
          <target state="translated">bツリーアルゴリズムは、ページ指向のストレージデバイス上で、一意の順序付けられたキーをキー/データストレージに提供します。 Bツリーの背景情報については、Knuth、&lt;u&gt;The Art Of Computer Programming&lt;/u&gt;、Volume 3「Sorting and Searching」、471〜479ページを参照してください。 SQLiteは2種類のBツリーを使用します。 Knuthが「B * -Tree」と呼ぶアルゴリズムは、すべてのデータをツリーの葉に格納します。 SQLiteは、このさまざまなbツリーを「テーブルbツリー」と呼びます。 Knuthが単に「Bツリー」と呼ぶアルゴリズムは、キーとデータの両方をリーフと内部ページの両方に格納します。 SQLite実装では、元のBツリーアルゴリズムはキーのみを格納し、データを完全に省略します。これは「インデックスbツリー」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="d112311c7e2ccc4f400060b3e5337023ffd30dd4" translate="yes" xml:space="preserve">
          <source>The b-tree algorithm provides key/data storage with unique and ordered keys on page-oriented storage devices. For background information on b-trees, see Knuth, &lt;u&gt;The Art Of Computer Programming&lt;/u&gt;, Volume 3 &quot;Sorting and Searching&quot;, pages 471-479. Two variants of b-trees are used by SQLite. &quot;Table b-trees&quot; use a 64-bit signed integer key and store all data in the leaves. &quot;Index b-trees&quot; use arbitrary keys and store no data at all.</source>
          <target state="translated">b-treeアルゴリズムは、ページ指向のストレージデバイス上で一意の順序付けられたキーを使用してキー/データストレージを提供します。Bツリーの背景情報については、Knuth、&lt;u&gt;The Art Of Computer Programming&lt;/u&gt;、第3巻「Sortingand Searching」、471〜479ページを参照してください。SQLiteではbツリーの2つのバリアントが使用されます。「テーブルBツリー」は64ビットの符号付き整数キーを使用し、すべてのデータをリーフに格納します。「インデックスbツリー」は任意のキーを使用し、データをまったく保存しません。</target>
        </trans-unit>
        <trans-unit id="bb8fb65a49101b4953ed3553fa6d2836b2742f88" translate="yes" xml:space="preserve">
          <source>The b-tree page header is 8 bytes in size for leaf pages and 12 bytes for interior pages. All multibyte values in the page header are big-endian. The b-tree page header is composed of the following fields:</source>
          <target state="translated">b-treeページヘッダのサイズは、リーフページでは8バイト、内部ページでは12バイトです。ページヘッダ内のすべてのマルチバイト値はビッグエンディアンです。b-treeページヘッダは以下のフィールドで構成されています。</target>
        </trans-unit>
        <trans-unit id="b3cbe5b0fd4215124588bcf352c662cc2398e510" translate="yes" xml:space="preserve">
          <source>The backup API copies the content of one database into another. It is useful either for creating backups of databases or for copying in-memory databases to or from persistent files.</source>
          <target state="translated">backup APIは、あるデータベースの内容を別のデータベースにコピーします。これは、データベースのバックアップを作成したり、インメモリデータベースを永続ファイルにコピーしたり、永続ファイルからコピーしたりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="2cf1eb05a922a766ec8d7dd18ed7d6f4aa38bd5f" translate="yes" xml:space="preserve">
          <source>The backupDb() function uses the sqlite3_backup_remaining() and sqlite3_backup_pagecount() functions to report its progress via the user-supplied xProgress() callback. Function sqlite3_backup_remaining() returns the number of pages left to copy and sqlite3_backup_pagecount() returns the total number of pages in the source database (in this case the database opened by pDb). So the percentage completion of the process may be calculated as:</source>
          <target state="translated">backupDb()関数は、sqlite3_backup_remaining()関数とsqlite3_backup_pagecount()関数を使用して、ユーザが提供するxProgress()コールバックで進捗状況を報告します。関数sqlite3_backup_remaining()はコピーに残っているページ数を返し、sqlite3_backup_pagecount()はコピー元のデータベース(この場合はpDbによって開かれたデータベース)の総ページ数を返します。そのため、処理の完了率は次のように計算されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6b553d2761ee3fe64acd25548c40d0f8e4d42c23" translate="yes" xml:space="preserve">
          <source>The base window may not specify a frame specification. The frame specification can only be given in the new window specification.</source>
          <target state="translated">ベースウィンドウでは、フレーム指定を指定しないことができます。フレーム指定は、新しいウィンドウの指定でのみ与えることができます。</target>
        </trans-unit>
        <trans-unit id="5c2a91b9a2da4a8d6526f62c2bd849ce606c97d4" translate="yes" xml:space="preserve">
          <source>The basic algorithm for computing the content of the recursive table is as follows:</source>
          <target state="translated">再帰表の内容を計算するための基本的なアルゴリズムは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="cc257445d9ceee252762e517b278c85329543c96" translate="yes" xml:space="preserve">
          <source>The basic principals described above apply to both ordinary rowid tables and &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables. The only difference is that the rowid column that serves as the key for tables and that appears as the right-most term in indexes is replaced by the PRIMARY KEY.</source>
          <target state="translated">上記の基本原則は、通常のROWIDテーブルと&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt;テーブルの両方に適用されます。唯一の違いは、テーブルのキーとして機能し、インデックスの右端の用語として表示されるROWID列がPRIMARY KEYに置き換えられていることです。</target>
        </trans-unit>
        <trans-unit id="07bf749b7aaedba2ca3c53251a2ebc2903cbff5d" translate="yes" xml:space="preserve">
          <source>The basic procedure above may modified by the following additional rules:</source>
          <target state="translated">上記の基本的な手順は、以下の追加ルールによって変更することができます。</target>
        </trans-unit>
        <trans-unit id="5580fafc283a76d74ea47e0554226ba42ea5bc40" translate="yes" xml:space="preserve">
          <source>The behavior implemented by the AUTOINCREMENT keyword is subtly different from the default behavior. With AUTOINCREMENT, rows with automatically selected ROWIDs are guaranteed to have ROWIDs that have never been used before by the same table in the same database. And the automatically generated ROWIDs are guaranteed to be monotonically increasing. These are important properties in certain applications. But if your application does not need these properties, you should probably stay with the default behavior since the use of AUTOINCREMENT requires additional work to be done as each row is inserted and thus causes INSERTs to run a little slower.</source>
          <target state="translated">AUTOINCREMENT キーワードによって実装される動作は、既定の動作とは微妙に異なります。AUTOINCREMENT を使用すると、自動的に選択された ROWID を持つ行は、同じデータベース内の同じテーブルで以前に使用されたことのない ROWID を持つことが保証されます。そして、自動的に生成されたROWIDは、単調に増加することが保証されています。これらは特定のアプリケーションでは重要な特性です。しかし、アプリケーションがこれらのプロパティを必要としない場合は、デフォルトの動作のままにしておくべきでしょう。なぜなら、AUTOINCREMENTを使用すると、各行が挿入されるたびに追加の作業が必要となり、INSERTの実行が少し遅くなるからです。</target>
        </trans-unit>
        <trans-unit id="53ddd9ac28fbcaf8f2c3233a5b531ac7ced77a80" translate="yes" xml:space="preserve">
          <source>The behavior of cache_size with a negative N was different prior to &lt;a href=&quot;https://sqlite.org/releaselog/3_7_10.html&quot;&gt;version 3.7.10&lt;/a&gt; (2012-01-16). In earlier versions, the number of pages in the cache was set to the absolute value of N.</source>
          <target state="translated">負のNを持つcache_sizeの動作は、&lt;a href=&quot;https://sqlite.org/releaselog/3_7_10.html&quot;&gt;バージョン3.7.10&lt;/a&gt;（2012-01-16）より前では異なりました。以前のバージョンでは、キャッシュ内のページ数はNの絶対値に設定されていました。</target>
        </trans-unit>
        <trans-unit id="478ce327d17671071ecdc539934c95e63faeda7c" translate="yes" xml:space="preserve">
          <source>The behavior of sqlite3changeset_apply_v2() and its streaming equivalent may be modified by passing a combination of &lt;a href=&quot;#SQLITE_CHANGESETAPPLY_INVERT&quot;&gt;supported flags&lt;/a&gt; as the 9th parameter.</source>
          <target state="translated">sqlite3changeset_apply_v2（）とそれに相当するストリーミングの動作は、&lt;a href=&quot;#SQLITE_CHANGESETAPPLY_INVERT&quot;&gt;サポート&lt;/a&gt;されているフラグの組み合わせを9番目のパラメーターとして渡すことで変更できます。</target>
        </trans-unit>
        <trans-unit id="6e75893c7d343c6a289f5aa0da4c1e36a51499e7" translate="yes" xml:space="preserve">
          <source>The behavior of sqlite3changeset_apply_v2() and its streaming equivalent may be modified by passing a combination of &lt;a href=&quot;c_changesetapply_invert&quot;&gt;supported flags&lt;/a&gt; as the 9th parameter.</source>
          <target state="translated">sqlite3changeset_apply_v2（）とそれに相当するストリーミングの動作は、&lt;a href=&quot;c_changesetapply_invert&quot;&gt;サポート&lt;/a&gt;されているフラグの組み合わせを9番目のパラメーターとして渡すことで変更できます。</target>
        </trans-unit>
        <trans-unit id="3b226ef505264d45ed6c9760d30054930a97eb46" translate="yes" xml:space="preserve">
          <source>The behavior of sqlite3changeset_start_v2() and its streaming equivalent may be modified by passing a combination of &lt;a href=&quot;#SQLITE_CHANGESETSTART_INVERT&quot;&gt;supported flags&lt;/a&gt; as the 4th parameter.</source>
          <target state="translated">sqlite3changeset_start_v2（）とそれに相当するストリーミングの動作は、&lt;a href=&quot;#SQLITE_CHANGESETSTART_INVERT&quot;&gt;サポート&lt;/a&gt;されているフラグの組み合わせを4番目のパラメーターとして渡すことで変更できます。</target>
        </trans-unit>
        <trans-unit id="462fed9af71f32884c9943463dae76b5706b0104" translate="yes" xml:space="preserve">
          <source>The behavior of sqlite3changeset_start_v2() and its streaming equivalent may be modified by passing a combination of &lt;a href=&quot;c_changesetstart_invert&quot;&gt;supported flags&lt;/a&gt; as the 4th parameter.</source>
          <target state="translated">sqlite3changeset_start_v2（）とそれに相当するストリーミングの動作は、&lt;a href=&quot;c_changesetstart_invert&quot;&gt;サポート&lt;/a&gt;されているフラグの組み合わせを4番目のパラメーターとして渡すことで変更できます。</target>
        </trans-unit>
        <trans-unit id="0cd600a43e57a68ed3c7e61e8926b28cfcf03236" translate="yes" xml:space="preserve">
          <source>The behaviour described above may be modified slightly by using the &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;read_uncommitted&lt;/a&gt; pragma to change the isolation level from serialized (the default), to read-uncommitted.</source>
          <target state="translated">上記の動作は、&lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;read_uncommitted&lt;/a&gt;プラグマを使用して分離レベルをシリアル化（デフォルト）から読み取り非コミットに変更することにより、わずかに変更できます。</target>
        </trans-unit>
        <trans-unit id="d91219df791273fdd065b20fbe3a1ddef8cd79ad" translate="yes" xml:space="preserve">
          <source>The behaviour of queries when a column-filter is specified both as part of the FTS query and by using a column as the LHS of a MATCH operator is slightly different. For a table with columns &quot;a&quot; and &quot;b&quot; and a query similar to:</source>
          <target state="translated">FTS クエリの一部としてカラムフィルタが指定されている場合と、MATCH 演算子の LHS としてカラムを使用している場合のクエリの挙動は若干異なります。カラム &quot;a&quot; と &quot;b&quot; を持つテーブルと、似たようなクエリの場合。</target>
        </trans-unit>
        <trans-unit id="1b74d0e5579c64699d464837588df4c3744c10fa" translate="yes" xml:space="preserve">
          <source>The best approach to make reliable backup copies of an SQLite database is to make use of the &lt;a href=&quot;backup&quot;&gt;backup API&lt;/a&gt; that is part of the SQLite library. Failing that, it is safe to make a copy of an SQLite database file as long as there are no transactions in progress by any process. If the previous transaction failed, then it is important that any rollback journal (the &lt;code&gt;*-journal&lt;/code&gt; file) or write-ahead log (the &lt;code&gt;*-wal&lt;/code&gt; file) be copied together with the database file itself.</source>
          <target state="translated">SQLiteデータベースの信頼できるバックアップコピーを作成する最善の方法は、SQLiteライブラリの一部である&lt;a href=&quot;backup&quot;&gt;バックアップAPI&lt;/a&gt;を利用することです。失敗した場合は、プロセスによって進行中のトランザクションがない限り、SQLiteデータベースファイルのコピーを作成しても安全です。前のトランザクションが失敗した場合は、ロールバックジャーナル（ &lt;code&gt;*-journal&lt;/code&gt; ファイル）または先読みログ（ &lt;code&gt;*-wal&lt;/code&gt; ファイル）をデータベースファイル自体と一緒にコピーすることが重要です。</target>
        </trans-unit>
        <trans-unit id="3e4c95bce459286798ea2a27bd9ecd8decb1253c" translate="yes" xml:space="preserve">
          <source>The best feature of SQL (in &lt;u&gt;all&lt;/u&gt; its implementations, not just SQLite) is that it is a</source>
          <target state="translated">SQLの最良の機能（SQLiteだけでなく、その&lt;u&gt;すべての&lt;/u&gt;実装において）は、</target>
        </trans-unit>
        <trans-unit id="0acc0c4a6e57763a2a98687d8dd5dae3b2f9935e" translate="yes" xml:space="preserve">
          <source>The best way to understand how SQL database engines work is to think of SQL as a programming language, not as a &quot;query language&quot;. Each SQL statement is a separate program. Applications construct SQL program source files and send them to the database engine. The database engine compiles the SQL source code into executable form, runs that executable, then sends the result back to the application.</source>
          <target state="translated">SQLデータベースエンジンがどのように動作するかを理解する最良の方法は、SQLを「クエリ言語」ではなく「プログラミング言語」と考えることです。各SQL文は個別のプログラムです。アプリケーションはSQLプログラムのソースファイルを作成し、それをデータベースエンジンに送ります。データベースエンジンはSQLソースコードを実行可能な形式にコンパイルし、実行可能な形式で実行し、その結果をアプリケーションに送り返します。</target>
        </trans-unit>
        <trans-unit id="d79f775859b5387594a0b408b014948f69145bb6" translate="yes" xml:space="preserve">
          <source>The binary64 floating-point format uses 64 bits per number. Hence there are 1.845e+19 different possible floating point values. On the other hand there are infinitely many real numbers in the range of 1.7977e+308 and 4.9407e-324. It follows then that binary64 cannot possibly represent all possible real numbers within that range. Approximations are required.</source>
          <target state="translated">binary64 浮動小数点フォーマットは、1 つの数値につき 64 ビットを使用します。したがって、1.845e+19 の異なる浮動小数点値が存在します。一方、1.7977e+308 と 4.9407e-324 の範囲内には無限に実数が存在します。したがって、binary64 はその範囲内のすべての実数を表現することはできません。近似が必要です。</target>
        </trans-unit>
        <trans-unit id="dc958ef4fbaadd7154585494d4a1f0d8657cd355" translate="yes" xml:space="preserve">
          <source>The block above uses a shorthand form to create the foreign key constraint. Attaching a &quot;REFERENCES</source>
          <target state="translated">上のブロックでは、短縮形を使って外部キー制約を作成しています。REFERENCES」を添付する</target>
        </trans-unit>
        <trans-unit id="be5a6e82c647cd58e78eb343df366b2a12164999" translate="yes" xml:space="preserve">
          <source>The blockid that corresponds to the leaf node with the largest blockid that belongs to this segment b-tree. Or zero if the entire segment b-tree fits on the root node.</source>
          <target state="translated">このセグメント b-tree に属する最大の blockid を持つリーフノードに対応する blockid。または、セグメント b-tree 全体がルートノードに収まる場合はゼロ。</target>
        </trans-unit>
        <trans-unit id="8114ba8fdc8ebfe0e7461c055a0e2fd44faa8a98" translate="yes" xml:space="preserve">
          <source>The blockid that corresponds to the node with the smallest blockid that belongs to this segment b-tree. Or zero if the entire segment b-tree fits on the root node. If it exists, this node is always a leaf node.</source>
          <target state="translated">このセグメント b-tree に属する最小のブロック ID を持つノードに対応するブロック ID。または、セグメント b-tree 全体がルートノードに収まる場合はゼロ。存在する場合、このノードは常にリーフノードです。</target>
        </trans-unit>
        <trans-unit id="f9a2b7b8a28aace68acd7dc6116c16ed08d188be" translate="yes" xml:space="preserve">
          <source>The boolean identifiers TRUE and FALSE are usually just aliases for the integer values 1 and 0, respectively. However, if TRUE or FALSE occur on the right-hand side of an IS operator, then they form new unary postfix operators &quot;IS TRUE&quot; and &quot;IS FALSE&quot; which test the boolean value of the operand on the left.</source>
          <target state="translated">真偽値識別子TRUEとFALSEは、通常、それぞれ整数値1と0のエイリアスです。しかし、TRUEやFALSEがIS演算子の右辺にある場合、これらは新しい単項演算子 &quot;IS TRUE &quot;と &quot;IS FALSE &quot;を形成し、左辺のオペランドのブール値をテストします。</target>
        </trans-unit>
        <trans-unit id="cab234605422320bfe969b5533e06293770750e7" translate="yes" xml:space="preserve">
          <source>The boundary between a file format and an application format is fuzzy. This article calls JPEG a file format, but for an image editor, JPEG might be considered the application format. Much depends on context. For this article, let us say that a file format stores a single object and an application format stores many different objects and their relationships to one another.</source>
          <target state="translated">ファイルフォーマットとアプリケーションフォーマットの境界は曖昧です。この記事では JPEG をファイルフォーマットと呼んでいますが、画像編集者にとっては JPEG がアプリケーションフォーマットとみなされるかもしれません。多くは文脈に依存します。この記事では、ファイルフォーマットは単一のオブジェクトを格納し、アプリケーションフォーマットは多くの異なるオブジェクトとその関係を格納しているとします。</target>
        </trans-unit>
        <trans-unit id="47707c3fbd653507bcb6765a57019dc2e9df3e77" translate="yes" xml:space="preserve">
          <source>The boundary description &quot;0 PRECEDING&quot; always means the same thing as &quot;CURRENT ROW&quot;.</source>
          <target state="translated">境界の記述「0 PRECEDING」は、常に「CURRENT ROW」と同じ意味です。</target>
        </trans-unit>
        <trans-unit id="65e8d52b8ac553953a11325088115a059c247d93" translate="yes" xml:space="preserve">
          <source>The build process makes extensive use of the &lt;a href=&quot;http://www.tcl-lang.org/&quot;&gt;Tcl&lt;/a&gt; scripting language. You will need to have a copy of TCL installed in order for the make targets above to work. Easy-to-use installers can be obtained from &lt;a href=&quot;http://www.tcl-lang.org/&quot;&gt;http://www.tcl-lang.org/&lt;/a&gt;. Many unix workstations have Tcl installed by default.</source>
          <target state="translated">ビルドプロセスでは、&lt;a href=&quot;http://www.tcl-lang.org/&quot;&gt;Tcl&lt;/a&gt;スクリプト言語を幅広く使用します。上記のmakeターゲットを機能させるには、TCLのコピーをインストールする必要があります。使いやすいインストーラーは、&lt;a href=&quot;http://www.tcl-lang.org/&quot;&gt;http：//www.tcl-lang.org/&lt;/a&gt;から入手できます。多くのUNIXワークステーションには、デフォルトでTclがインストールされています。</target>
        </trans-unit>
        <trans-unit id="7d4e60a19016fc83307d1ede2e1aa59927cbae39" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;lang_corefunc#iif&quot;&gt;iif(x,y,z) SQL function&lt;/a&gt; is logically equivalent to &quot;CASE WHEN x THEN y ELSE z END&quot;. The iif() function is found in SQL Server and is included in SQLite for compatibility. Some developers prefer the iif() function because it is more concise.</source>
          <target state="translated">組み込みの&lt;a href=&quot;lang_corefunc#iif&quot;&gt;iif（x、y、z）SQL関数&lt;/a&gt;は、論理的には「CASE WHEN x THEN y ELSEzEND」と同等です。 iif（）関数はSQL Serverにあり、互換性のためにSQLiteに含まれています。一部の開発者は、より簡潔であるため、iif（）関数を好みます。</target>
        </trans-unit>
        <trans-unit id="2c9c97359a7945f825df70e8e7d3bf03b435fc83" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt; have been enhanced so that they can be used in &lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK constraints&lt;/a&gt;, in &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt;, and in the WHERE clauses of &lt;a href=&quot;partialindex&quot;&gt;partial indexes&lt;/a&gt;, provided that they do not use the 'now', 'localtime', or 'utc' keywords. &lt;a href=&quot;deterministic#dtexception&quot;&gt;More information&lt;/a&gt;.</source>
          <target state="translated">組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付および時刻関数&lt;/a&gt;が拡張され、&lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK制約&lt;/a&gt;、&lt;a href=&quot;expridx&quot;&gt;式のインデックス&lt;/a&gt;、および&lt;a href=&quot;partialindex&quot;&gt;部分インデックスの&lt;/a&gt; WHERE句で使用できるようになりました。ただし、 'now'、 'localtime'を使用しない場合、または「utc」キーワード。&lt;a href=&quot;deterministic#dtexception&quot;&gt;さらなる情報&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a2f201a6d744f00508ed72b40ed46b5c83f60f1" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt; of SQLite are a special case. These functions are usually considered deterministic. However, if these functions use the string &quot;now&quot; as the date, or if they use the &lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime modifier&lt;/a&gt; or the &lt;a href=&quot;lang_datefunc#localtime&quot;&gt;utc modifier&lt;/a&gt;, then they are considered non-deterministic. Because the function inputs are not necessarily known until run-time, the date/time functions will throw an exception if they encounter any of the non-deterministic features in a context where only deterministic functions are allowed.</source>
          <target state="translated">SQLiteの組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付と時刻の関数&lt;/a&gt;は特殊なケースです。これらの関数は通常、決定論的と見なされます。ただし、これらの関数が文字列「now」を日付として使用する場合、または&lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime修飾子&lt;/a&gt;または&lt;a href=&quot;lang_datefunc#localtime&quot;&gt;utc修飾子&lt;/a&gt;を使用する場合、それらは非決定論的であると見なされます。関数入力は実行時まで必ずしも既知ではないため、日付/時刻関数は、決定論的関数のみが許可されているコンテキストで非決定論的機能のいずれかに遭遇した場合、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="96663fb71968ae34b1131b3cb53ad7ba03319209" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt; of SQLite are a special case. These functions are usually considered deterministic. However, if these functions use the string &quot;now&quot; as the date, or if they use the &lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime modifier&lt;/a&gt; or the &lt;a href=&quot;lang_datefunc#localtime&quot;&gt;utc modifier&lt;/a&gt;, then they are considered non-deterministic. Because the function inputs are not necessarily known until run-time, the date/time functions will throw an exception if they encounter any of the non-deterministic features in a context where only deterministic functions are allows.</source>
          <target state="translated">SQLite の組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付と時刻関数&lt;/a&gt;は特殊なケースです。これらの関数は通常、確定的と見なされます。ただし、これらの関数が日付として「now」という文字列を使用する場合、または&lt;a href=&quot;lang_datefunc#localtime&quot;&gt;localtime修飾子&lt;/a&gt;または&lt;a href=&quot;lang_datefunc#localtime&quot;&gt;utc修飾子&lt;/a&gt;を使用する場合、これらは非決定的と見なされます。関数の入力は実行時まで必ずしもわかっていないため、日付/時刻関数は、決定論的関数のみが許可されているコンテキストで非決定論的機能に遭遇すると例外をスローします。</target>
        </trans-unit>
        <trans-unit id="adf744ca87e6c1a5f3b9a68b24961edea60809eb" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;lang_datefunc&quot;&gt;date and time functions&lt;/a&gt; of SQLite understand date/times in all of the formats above, and can freely change between them. Which format you use, is entirely up to your application.</source>
          <target state="translated">SQLite の組み込みの&lt;a href=&quot;lang_datefunc&quot;&gt;日付と時刻関数&lt;/a&gt;は、上記のすべての形式の日付と時刻を理解し、それらの間で自由に変更できます。どちらの形式を使用するかは、完全にアプリケーション次第です。</target>
        </trans-unit>
        <trans-unit id="8a5b38222ac4fb96f9a2b189215735dd804f8b2d" translate="yes" xml:space="preserve">
          <source>The built-in BINARY collation compares strings byte by byte using the memcmp() function from the standard C library.</source>
          <target state="translated">ビルトインのBINARY照合は、標準Cライブラリのmemcmp()関数を使って文字列をバイト単位で比較します。</target>
        </trans-unit>
        <trans-unit id="1b9d8615812e1b5dddaadf330db3704ed6104526" translate="yes" xml:space="preserve">
          <source>The built-in SQLite has compile-time options such as SQLITE_PRINTF_PRECISION_LIMIT that provide defense against denial-of-service attacks for application that expose the printf() functionality to untrusted users.</source>
          <target state="translated">組み込みの SQLite には、信頼されていないユーザに printf()の機能を公開するアプリケーションに対するサービス拒否攻撃に対する防御を提供する SQLITE_PRINTF_PRECISION_LIMIT のようなコンパイル時オプションがあります。</target>
        </trans-unit>
        <trans-unit id="55ca16581ef8177476edac12f1cd562f40820547" translate="yes" xml:space="preserve">
          <source>The built-in Wagner edit-distance function with fixed weights can be replaced by the &lt;a href=&quot;spellfix1#editdist3&quot;&gt;editdist3()&lt;/a&gt; edit-distance function with application-defined weights and support for unicode, by specifying the &quot;edit_cost_table=</source>
          <target state="translated">&quot;edit_cost_table =&quot;を指定することで、重みが固定された組み込みのWagner編集距離関数を、アプリケーションで定義された重みとUnicodeをサポートする&lt;a href=&quot;spellfix1#editdist3&quot;&gt;editdist3（）&lt;/a&gt;編集距離関数で置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="919d1860b9bd16d4532d25388f1ffc8375baa209" translate="yes" xml:space="preserve">
          <source>The built-in auxiliary function bm25() returns a real value indicating how well the current row matches the full-text query. The better the match, the numerically smaller the value returned. A query such as the following may be used to return matches in order from best to worst match:</source>
          <target state="translated">組み込みの補助関数 bm25()は、現在の行がフルテキストクエリにどれだけマッチしているかを示す実数を返します。マッチが良ければ良いほど、返される値は数値的に小さくなります。以下のようなクエリを使用して、マッチしたものを最良のものから最悪のものまで順に返すことができます。</target>
        </trans-unit>
        <trans-unit id="89afdc49975b5af95582dcbca838ad26684b8aa6" translate="yes" xml:space="preserve">
          <source>The built-in auxiliary functions provided as part of FTS5 are described in the following section. Applications may also implement &lt;a href=&quot;fts5#custom_auxiliary_functions&quot;&gt;custom auxiliary functions in C&lt;/a&gt;.</source>
          <target state="translated">FTS5の一部として提供される組み込みの補助機能については、次のセクションで説明します。アプリケーションは&lt;a href=&quot;fts5#custom_auxiliary_functions&quot;&gt;、Cにカスタム補助関数を&lt;/a&gt;実装することもできます。</target>
        </trans-unit>
        <trans-unit id="9249ce5cc7f5a31c9f40d1d2aedadc1d6c797929" translate="yes" xml:space="preserve">
          <source>The built-in functions used to implement LIKE and GLOB must not have been overloaded using the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; API.</source>
          <target state="translated">LIKEおよびGLOBの実装に使用される組み込み関数は、&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt; API を使用してオーバーロードされていない必要があります。</target>
        </trans-unit>
        <trans-unit id="49a23aa1a5c2e20f2c3c4ac966e9783cdfed04b2" translate="yes" xml:space="preserve">
          <source>The built-in memory allocators in SQLite also provide the following additional interfaces:</source>
          <target state="translated">SQLite の組み込みメモリアロケータには、以下の追加インターフェースも用意されています。</target>
        </trans-unit>
        <trans-unit id="4fa083c0cbf6940d57170ea9aa2f51d37713e7a7" translate="yes" xml:space="preserve">
          <source>The built-in min() and max() functions now honor the difference between NUMERIC and TEXT datatypes. Formerly, min() and max() always assumed their arguments were of type NUMERIC.</source>
          <target state="translated">組み込みの min()および max()関数は、NUMERIC と TEXT のデータ型の違いに対応するようになりました。以前は、min()および max()は常に引数の型が NUMERIC 型であることを前提としていました。</target>
        </trans-unit>
        <trans-unit id="09829581870ec4ebe1c207006b15fd18f63554a5" translate="yes" xml:space="preserve">
          <source>The built-in printf() implementation does not handle posix positional referencing modifiers that allow the order of arguments to printf() to be different from the order of the %-substitutions. In the built-in printf(), the order of the arguments must exactly match the order of the %-substitutions.</source>
          <target state="translated">組み込みの printf()実装では、printf()への引数の順序が %-置換の順序と異なることを可能にする posix 位置参照修飾子は処理されません。組み込みの printf()では、引数の順序は %-置換の順序と正確に一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e86ab3d5db7f0615044de9985403c55275e95eaf" translate="yes" xml:space="preserve">
          <source>The built-in printf() implementation uses extra code space (about 7800 bytes on GCC 5.4 with -Os).</source>
          <target state="translated">組み込みの printf()の実装は、余分なコードスペースを使用します (GCC 5.4 で -Os を使用した場合は約 7800 バイト)。</target>
        </trans-unit>
        <trans-unit id="68470e8ed26cf7ace0d2e09f00b9eab48903fc0b" translate="yes" xml:space="preserve">
          <source>The built-in tokenizers and auxiliary functions described in this document are all implemented using the publicly available API described below.</source>
          <target state="translated">このドキュメントで説明されているビルトイントークナイザと補助関数は、以下に説明されている一般に公開されているAPIを使用して実装されています。</target>
        </trans-unit>
        <trans-unit id="9fc396222878f092f3ee1e16fde31353451d89d0" translate="yes" xml:space="preserve">
          <source>The busy callback should not take any actions which modify the database connection that invoked the busy handler. In other words, the busy handler is not reentrant. Any such actions result in undefined behavior.</source>
          <target state="translated">busyコールバックは、ビジーハンドラを呼び出したデータベース接続を変更するようなアクションを取るべきではありません。言い換えれば、ビジーハンドラはリエントラントではありません。そのようなアクションは、未定義の動作になります。</target>
        </trans-unit>
        <trans-unit id="f4f573b1a486bc41f01b46a6d80d9ecec47641b0" translate="yes" xml:space="preserve">
          <source>The byte offset of the matching term within the column.</source>
          <target state="translated">列内の一致するタームのバイトオフセット。</target>
        </trans-unit>
        <trans-unit id="05f015bc1e7204efce9fc81ea976f5bbb81740a9" translate="yes" xml:space="preserve">
          <source>The byte-order of UTF16 input text is determined by the byte-order mark (BOM, U+FEFF) found in first character, which is removed, or in the absence of a BOM the byte order is the native byte order of the host machine for sqlite3_bind_text16() or the byte order specified in the 6th parameter for sqlite3_bind_text64(). If UTF16 input text contains invalid unicode characters, then SQLite might change those invalid characters into the unicode replacement character: U+FFFD.</source>
          <target state="translated">UTF16入力テキストのバイト順は、最初の文字にあるバイト順マーク(BOM,U+FEFF)によって決定され、それが削除されます。BOMがない場合、バイト順はsqlite3_bind_text16()ではホストマシンのネイティブバイト順、sqlite3_bind_text64()では6番目のパラメータで指定されたバイト順になります。UTF16入力テキストに無効なunicode文字が含まれている場合、SQLiteはその無効な文字をunicode置換文字に変更するかもしれません。U+FFFDに変更されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="2f568127fbaa97f70cb703194692bb7bd81d899e" translate="yes" xml:space="preserve">
          <source>The bytecode and tables_used tables are only available if SQLite has been compiled with the &lt;a href=&quot;compile#enable_bytecode_vtab&quot;&gt;-DSQLITE_ENABLE_BYTECODE_VTAB&lt;/a&gt; compile-time option. The &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; has been compiled that way, and so you can use the standard &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; as a test platform to experiement.</source>
          <target state="translated">バイトコードテーブルとtables_usedテーブルは、SQLiteが&lt;a href=&quot;compile#enable_bytecode_vtab&quot;&gt;-DSQLITE_ENABLE_BYTECODE_VTAB&lt;/a&gt;コンパイル時オプションを使用してコンパイルされている場合にのみ使用できます。&lt;a href=&quot;cli&quot;&gt;CLIは&lt;/a&gt;そのようにコンパイルされている、とあなたは、標準的な使用できるように&lt;a href=&quot;cli&quot;&gt;CLIを&lt;/a&gt;experiementにテストプラットフォームとして。</target>
        </trans-unit>
        <trans-unit id="dbb76aa2fa15c5bd4f4468b266b4d77ab34c0a75" translate="yes" xml:space="preserve">
          <source>The bytecode engine begins execution on instruction number 0. Execution continues until a &lt;a href=&quot;opcode#Halt&quot;&gt;Halt&lt;/a&gt; instruction is seen, or until the program counter becomes greater than the address of last instruction, or until there is an error. When the bytecode engine halts, all memory that it allocated is released and all database cursors it may have had open are closed. If the execution stopped due to an error, any pending transactions are terminated and changes made to the database are rolled back.</source>
          <target state="translated">バイトコードエンジンは、命令番号0で実行を開始します。実行は、&lt;a href=&quot;opcode#Halt&quot;&gt;Halt&lt;/a&gt;命令が見つかるまで、またはプログラムカウンターが最後の命令のアドレスよりも大きくなるまで、またはエラーが発生するまで続きます。バイトコードエンジンが停止すると、割り当てられたすべてのメモリが解放され、開いていた可能性のあるすべてのデータベースカーソルが閉じられます。エラーが原因で実行が停止した場合、保留中のトランザクションはすべて終了し、データベースに加えられた変更はロールバックされます。</target>
        </trans-unit>
        <trans-unit id="9a6398c9082248055b1fbc77ff5022201f3b1441" translate="yes" xml:space="preserve">
          <source>The bytecode engine has no stack on which to store the return address of a subroutine. Return addresses must be stored in registers. Hence, bytecode subroutines are not reentrant.</source>
          <target state="translated">バイトコードエンジンには、サブルーチンのリターンアドレスを格納するためのスタックがありません。リターンアドレスはレジスタに格納しなければなりません。したがって、バイトコードサブルーチンはリエントラントではありません。</target>
        </trans-unit>
        <trans-unit id="28f086fcda9ebdf902655d03a38811e78fc96fb9" translate="yes" xml:space="preserve">
          <source>The bytecode engine is &lt;u&gt;not&lt;/u&gt; an API of SQLite. Details about the bytecode engine change from one release of SQLite to the next. Applications that use SQLite should not depend on any of the details found in this document.</source>
          <target state="translated">バイトコードエンジンはSQLiteのAPIではあり&lt;u&gt;ません&lt;/u&gt;。バイトコードエンジンの詳細は、SQLiteのリリースごとに変更されています。SQLiteを使用するアプリケーションは、このドキュメントにある詳細に依存するべきではありません。</target>
        </trans-unit>
        <trans-unit id="e552468adf820f25d29531e1e14d99733690b86b" translate="yes" xml:space="preserve">
          <source>The bytecode generated by the code generator is called a &quot;&lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt;&quot;. Translating SQL source text into a prepared statement is analogous to converting a C++ program into machine code by invoking gcc or clang. Human-readable source text (SQL or C++) goes in, and a machine readable executable (bytecode or machine code) comes out.</source>
          <target state="translated">コードジェネレーターによって生成されたバイトコードは、「&lt;a href=&quot;c3ref/stmt&quot;&gt;プリペアドステートメント&lt;/a&gt;」と呼ばれます。SQLソーステキストをプリペアドステートメントに変換することは、gccまたはclangを呼び出してC ++プログラムをマシンコードに変換することに似ています。人間が読める形式のソーステキスト（SQLまたはC ++）が入り、機械が読める実行可能ファイル（バイトコードまたは機械語）が出てきます。</target>
        </trans-unit>
        <trans-unit id="8f39ef66488b6211208c988daf5ffcab23760705" translate="yes" xml:space="preserve">
          <source>The bytecode virtual machine is the heart of SQLite. Programmers who want to understand how SQLite operates internally must be familiar with the bytecode engine.</source>
          <target state="translated">バイトコード仮想マシンは SQLite の心臓部です。SQLite が内部的にどのように動作するかを理解したいプログラマーは、バイトコードエンジンに精通していなければなりません。</target>
        </trans-unit>
        <trans-unit id="efeaf3fe17bdefca5b34d3df41725c68d1db2de0" translate="yes" xml:space="preserve">
          <source>The cFrom and cTo columns show edit transformation strings. Either or both columns may contain more than one character. Or either column (but not both) may hold an empty string. When cFrom is empty, that is the cost of inserting cTo. When cTo is empty, that is the cost of deleting cFrom.</source>
          <target state="translated">cFrom列とcTo列は編集変換文字列を示します。どちらか、または両方の列に複数の文字が含まれている可能性があります。あるいは、どちらかのカラム(両方ではありません)に空の文字列が格納されていることがあります。cFrom が空の場合、これは cTo を挿入するためのコストです。cTo が空の場合、それは cFrom を削除するためのコストです。</target>
        </trans-unit>
        <trans-unit id="334e7f3d3c0f1d00666221b0f79b06086771f2a0" translate="yes" xml:space="preserve">
          <source>The cache must not perform any reference counting. A single call to xUnpin() unpins the page regardless of the number of prior calls to xFetch().</source>
          <target state="translated">キャッシュは参照カウントを行ってはいけません。xUnpin()への一回の呼び出しは、xFetch()への前の呼び出しの数に関係なく、ページのピンを外します。</target>
        </trans-unit>
        <trans-unit id="ba91e47edf5c7de46f6d683125d4647799118c05" translate="yes" xml:space="preserve">
          <source>The cache query parameter determines if the new database is opened using &lt;a href=&quot;sharedcache&quot;&gt;shared cache mode&lt;/a&gt; or with a private cache.</source>
          <target state="translated">キャッシュクエリパラメータは、&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュモード&lt;/a&gt;を使用して、またはプライベートキャッシュを使用して、新しいデータベースを開くかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="3b1d92f7c11891a9dfcf8a02bdb8e1d1b67e45d9" translate="yes" xml:space="preserve">
          <source>The cache sharing mode set by this interface effects all subsequent calls to &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16()&lt;/a&gt;. Existing database connections continue to use the sharing mode that was in effect at the time they were opened.</source>
          <target state="translated">このインターフェースによって設定されたキャッシュ共有モードは、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;、および&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16（）&lt;/a&gt;への後続のすべての呼び出しに影響します。既存のデータベース接続は、開かれたときに有効だった共有モードを引き続き使用します。</target>
        </trans-unit>
        <trans-unit id="6c24d3d1b52233a8d1d33d1521f0d40a35115941" translate="yes" xml:space="preserve">
          <source>The cache sharing mode set by this interface effects all subsequent calls to &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;, and &lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16()&lt;/a&gt;. Existing database connections continue use the sharing mode that was in effect at the time they were opened.</source>
          <target state="translated">このインターフェースによって設定されるキャッシュ共有モードは、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;、および&lt;a href=&quot;#sqlite3_open&quot;&gt;sqlite3_open16（）&lt;/a&gt;への後続のすべての呼び出しに影響します。既存のデータベース接続では、開かれたときに有効だった共有モードが引き続き使用されます。</target>
        </trans-unit>
        <trans-unit id="84568a531cbb8fea84a45d0e913a15a98ad6bdd3" translate="yes" xml:space="preserve">
          <source>The cache sharing mode set by this interface effects all subsequent calls to &lt;a href=&quot;open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;, and &lt;a href=&quot;open&quot;&gt;sqlite3_open16()&lt;/a&gt;. Existing database connections continue to use the sharing mode that was in effect at the time they were opened.</source>
          <target state="translated">このインターフェースによって設定されたキャッシュ共有モードは、&lt;a href=&quot;open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;、および&lt;a href=&quot;open&quot;&gt;sqlite3_open16（）&lt;/a&gt;への後続のすべての呼び出しに影響します。既存のデータベース接続は、開かれたときに有効だった共有モードを引き続き使用します。</target>
        </trans-unit>
        <trans-unit id="f37b504a453065b9fe4d5c4bf29c4836a5d7646e" translate="yes" xml:space="preserve">
          <source>The cache sharing mode set by this interface effects all subsequent calls to &lt;a href=&quot;open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;, and &lt;a href=&quot;open&quot;&gt;sqlite3_open16()&lt;/a&gt;. Existing database connections continue use the sharing mode that was in effect at the time they were opened.</source>
          <target state="translated">このインターフェースによって設定されるキャッシュ共有モードは、&lt;a href=&quot;open&quot;&gt;sqlite3_open（）&lt;/a&gt;、&lt;a href=&quot;open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;、および&lt;a href=&quot;open&quot;&gt;sqlite3_open16（）&lt;/a&gt;への後続のすべての呼び出しに影響します。既存のデータベース接続では、開かれたときに有効だった共有モードが引き続き使用されます。</target>
        </trans-unit>
        <trans-unit id="e474b4529162f0cc96b1a00a4049ab5a12dcf32d" translate="yes" xml:space="preserve">
          <source>The cache-flush method &lt;a href=&quot;c3ref/finalize&quot;&gt;finalizes&lt;/a&gt; all prepared statements currently in the cache.</source>
          <target state="translated">cache-flushメソッドは、現在キャッシュにあるすべての準備済みステートメントを&lt;a href=&quot;c3ref/finalize&quot;&gt;ファイナライズし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9d8d3b22c77f42c07d50a96703e45047516a539f" translate="yes" xml:space="preserve">
          <source>The cache_spill pragma enables or disables the ability of the pager to spill dirty cache pages to the database file in the middle of a transaction. Cache_spill is enabled by default and most applications should leave it that way as cache spilling is usually advantageous. However, a cache spill has the side-effect of acquiring an &lt;a href=&quot;lockingv3#excl_lock&quot;&gt;EXCLUSIVE lock&lt;/a&gt; on the database file. Hence, some applications that have large long-running transactions may want to disable cache spilling in order to prevent the application from acquiring an exclusive lock on the database until the moment that the transaction &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;s.</source>
          <target state="translated">cache_spillプラグマは、トランザクションの途中でダーティキャッシュページをデータベースファイルにスピルするページャの機能を有効または無効にします。 Cache_spillはデフォルトで有効になっています。通常、キャッシュスピルが有利であるため、ほとんどのアプリケーションはそのままにしておきます。ただし、キャッシュスピルには、データベースファイルの&lt;a href=&quot;lockingv3#excl_lock&quot;&gt;排他ロック&lt;/a&gt;を取得するという副作用があります。したがって、長時間実行される大きなトランザクションがある一部のアプリケーションでは、トランザクションが&lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;する瞬間まで、アプリケーションがデータベースの排他ロックを取得できないようにするために、キャッシュのスピルを無効にする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="9721a1202302bdb3675cb33fdaf401b47649ef3f" translate="yes" xml:space="preserve">
          <source>The callback function is used to receive the results of a query. A prototype for the callback function is as follows:</source>
          <target state="translated">コールバック関数は、クエリの結果を受け取るために使用されます。コールバック関数のプロトタイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dce299de07269b78871b3c034bf37ba0c0271573" translate="yes" xml:space="preserve">
          <source>The callback function registered by sqlite3_profile() is invoked as each SQL statement finishes. The profile callback contains the original statement text and an estimate of wall-clock time of how long that statement took to run. The profile callback time is in units of nanoseconds, however the current implementation is only capable of millisecond resolution so the six least significant digits in the time are meaningless. Future versions of SQLite might provide greater resolution on the profiler callback. Invoking either &lt;a href=&quot;#sqlite3_profile&quot;&gt;sqlite3_trace()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_trace_v2&quot;&gt;sqlite3_trace_v2()&lt;/a&gt; will cancel the profile callback.</source>
          <target state="translated">sqlite3_profile（）によって登録されたコールバック関数は、各SQLステートメントが完了するたびに呼び出されます。プロファイルコールバックには、元のステートメントテキストと、そのステートメントの実行にかかった時間の概算時間が含まれています。プロファイルのコールバック時間はナノ秒単位ですが、現在の実装ではミリ秒の分解能しか使用できないため、時間の最下位6桁は意味がありません。 SQLiteの将来のバージョンでは、プロファイラーコールバックの解像度が向上する可能性があります。&lt;a href=&quot;#sqlite3_profile&quot;&gt;sqlite3_trace（）&lt;/a&gt;または&lt;a href=&quot;#sqlite3_trace_v2&quot;&gt;sqlite3_trace_v2（）&lt;/a&gt;を呼び出すと、プロファイルコールバックがキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="a6f29aa702b9f0b66493dfb5e14c2df5fa8051eb" translate="yes" xml:space="preserve">
          <source>The callback function registered by sqlite3_profile() is invoked as each SQL statement finishes. The profile callback contains the original statement text and an estimate of wall-clock time of how long that statement took to run. The profile callback time is in units of nanoseconds, however the current implementation is only capable of millisecond resolution so the six least significant digits in the time are meaningless. Future versions of SQLite might provide greater resolution on the profiler callback. Invoking either &lt;a href=&quot;profile&quot;&gt;sqlite3_trace()&lt;/a&gt; or &lt;a href=&quot;trace_v2&quot;&gt;sqlite3_trace_v2()&lt;/a&gt; will cancel the profile callback.</source>
          <target state="translated">sqlite3_profile（）によって登録されたコールバック関数は、各SQLステートメントが完了するたびに呼び出されます。プロファイルコールバックには、元のステートメントテキストと、そのステートメントの実行にかかった時間の概算時間が含まれています。プロファイルのコールバック時間はナノ秒単位ですが、現在の実装ではミリ秒の分解能しか使用できないため、時間の最下位6桁は意味がありません。 SQLiteの将来のバージョンでは、プロファイラーコールバックの解像度が向上する可能性があります。&lt;a href=&quot;profile&quot;&gt;sqlite3_trace（）&lt;/a&gt;または&lt;a href=&quot;trace_v2&quot;&gt;sqlite3_trace_v2（）&lt;/a&gt;を呼び出すと、プロファイルコールバックがキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="6cc8b0e0c1561082e8c35dc0acaf0338a474ad77" translate="yes" xml:space="preserve">
          <source>The callback function registered by sqlite3_trace() is invoked at various times when an SQL statement is being run by &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt;. The sqlite3_trace() callback is invoked with a UTF-8 rendering of the SQL statement text as the statement first begins executing. Additional sqlite3_trace() callbacks might occur as each triggered subprogram is entered. The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger.</source>
          <target state="translated">sqlite3_trace（）によって登録されたコールバック関数は、SQLステートメントが&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;によって実行されているさまざまなタイミングで呼び出されます。sqlite3_trace（）コールバックは、ステートメントが最初に実行を開始するときに、SQLステートメントテキストのUTF-8レンダリングで呼び出されます。トリガーされた各サブプログラムに入るときに、追加のsqlite3_trace（）コールバックが発生する可能性があります。トリガーのコールバックには、トリガーを識別するUTF-8 SQLコメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="ce29a09fb52c337eecabbd8bc599ef45377bf00d" translate="yes" xml:space="preserve">
          <source>The callback function registered by sqlite3_trace() is invoked at various times when an SQL statement is being run by &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt;. The sqlite3_trace() callback is invoked with a UTF-8 rendering of the SQL statement text as the statement first begins executing. Additional sqlite3_trace() callbacks might occur as each triggered subprogram is entered. The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger.</source>
          <target state="translated">sqlite3_trace（）によって登録されたコールバック関数は、SQLステートメントが&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;によって実行されているさまざまなタイミングで呼び出されます。sqlite3_trace（）コールバックは、ステートメントが最初に実行を開始するときに、SQLステートメントテキストのUTF-8レンダリングで呼び出されます。トリガーされた各サブプログラムに入るときに、追加のsqlite3_trace（）コールバックが発生する可能性があります。トリガーのコールバックには、トリガーを識別するUTF-8 SQLコメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="b2f2fd31e08bf7a8ddd0b8f8f2559aa236b781e8" translate="yes" xml:space="preserve">
          <source>The callback function should normally return 0. If the callback function returns non-zero, the query is immediately aborted and &lt;b&gt;sqlite_exec&lt;/b&gt; will return SQLITE_ABORT.</source>
          <target state="translated">コールバック関数は通常0を返します。コールバック関数がゼロ以外の値を返す場合、クエリは直ちに中止され、&lt;b&gt;sqlite_exec&lt;/b&gt;はSQLITE_ABORTを返します。</target>
        </trans-unit>
        <trans-unit id="2394e983e60bde9a89a8173fd3ab1cfc913e1dc5" translate="yes" xml:space="preserve">
          <source>The callback function should normally return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;. If an error code is returned, that error will propagate back up through the SQLite code base to cause the statement that provoked the callback to report an error, though the commit will have still occurred. If the callback returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt; or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;, or if it returns a value that does not correspond to any valid SQLite error code, the results are undefined.</source>
          <target state="translated">コールバック関数は通常&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OKを&lt;/a&gt;返します。エラーコードが返されると、そのエラーはSQLiteコードベースを介して伝播し、コールバックを引き起こしたステートメントがエラーを報告しますが、コミットはまだ発生しています。コールバックが&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt;または&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONEを&lt;/a&gt;返す場合、または有効なSQLiteエラーコードに対応しない値を返す場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="e115553094195c6d671fc1803e4945ba335eedc5" translate="yes" xml:space="preserve">
          <source>The callback function should normally return &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;. If an error code is returned, that error will propagate back up through the SQLite code base to cause the statement that provoked the callback to report an error, though the commit will have still occurred. If the callback returns &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt; or &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;, or if it returns a value that does not correspond to any valid SQLite error code, the results are undefined.</source>
          <target state="translated">コールバック関数は通常&lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OKを&lt;/a&gt;返します。エラーコードが返されると、そのエラーはSQLiteコードベースを介して伝播し、コールバックを引き起こしたステートメントがエラーを報告しますが、コミットはまだ発生しています。コールバックが&lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt;または&lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONEを&lt;/a&gt;返す場合、または有効なSQLiteエラーコードに対応しない値を返す場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="dd2c627a789615e3efe180bdedfefe32d9d62d76" translate="yes" xml:space="preserve">
          <source>The callback function should register the desired collation using &lt;a href=&quot;#sqlite3_create_collation&quot;&gt;sqlite3_create_collation()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_create_collation&quot;&gt;sqlite3_create_collation16()&lt;/a&gt;, or &lt;a href=&quot;#sqlite3_create_collation&quot;&gt;sqlite3_create_collation_v2()&lt;/a&gt;.</source>
          <target state="translated">コールバック関数は、&lt;a href=&quot;#sqlite3_create_collation&quot;&gt;sqlite3_create_collat​​ion（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_create_collation&quot;&gt;sqlite3_create_collat​​ion16（）&lt;/a&gt;、または&lt;a href=&quot;#sqlite3_create_collation&quot;&gt;sqlite3_create_collat​​ion_v2（）&lt;/a&gt;を使用して目的の照合を登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="c17f517957de57a117a3b4627294584d44e59419" translate="yes" xml:space="preserve">
          <source>The callback function should register the desired collation using &lt;a href=&quot;create_collation&quot;&gt;sqlite3_create_collation()&lt;/a&gt;, &lt;a href=&quot;create_collation&quot;&gt;sqlite3_create_collation16()&lt;/a&gt;, or &lt;a href=&quot;create_collation&quot;&gt;sqlite3_create_collation_v2()&lt;/a&gt;.</source>
          <target state="translated">コールバック関数は、&lt;a href=&quot;create_collation&quot;&gt;sqlite3_create_collat​​ion（）&lt;/a&gt;、&lt;a href=&quot;create_collation&quot;&gt;sqlite3_create_collat​​ion16（）&lt;/a&gt;、または&lt;a href=&quot;create_collation&quot;&gt;sqlite3_create_collat​​ion_v2（）&lt;/a&gt;を使用して目的の照合を登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="fefabcb34707d427a36b9901ef209a203d46bf9f" translate="yes" xml:space="preserve">
          <source>The callback is invoked by SQLite after the commit has taken place and the associated write-lock on the database released, so the implementation may read, write or &lt;a href=&quot;../wal#ckpt&quot;&gt;checkpoint&lt;/a&gt; the database as required.</source>
          <target state="translated">コールバックは、コミットが行われ、データベースの関連する書き込みロックが解放された後にSQLiteによって呼び出されるため、実装は必要に応じてデータベースの読み取り、書き込み、または&lt;a href=&quot;../wal#ckpt&quot;&gt;チェックポイントを&lt;/a&gt;実行できます。</target>
        </trans-unit>
        <trans-unit id="f6c4a8d646e0cbd66ca6c45574aae0dd0351286a" translate="yes" xml:space="preserve">
          <source>The callback is invoked by SQLite after the commit has taken place and the associated write-lock on the database released, so the implementation may read, write or &lt;a href=&quot;wal#ckpt&quot;&gt;checkpoint&lt;/a&gt; the database as required.</source>
          <target state="translated">コールバックは、コミットが行われ、データベースの関連する書き込みロックが解放された後にSQLiteによって呼び出されるため、実装は必要に応じてデータベースの読み取り、書き込み、または&lt;a href=&quot;wal#ckpt&quot;&gt;チェックポイントを&lt;/a&gt;実行できます。</target>
        </trans-unit>
        <trans-unit id="facad5f03164aa5e049b3e0fcdccc7d1ce7b086d" translate="yes" xml:space="preserve">
          <source>The callback is invoked every N virtual machine operations, where N is supplied as the second argument to &lt;b&gt;sqlite_progress_handler()&lt;/b&gt;. The third and fourth arguments to &lt;b&gt;sqlite_progress_handler()&lt;/b&gt; are a pointer to the routine to be invoked and a void pointer to be passed as the first argument to it.</source>
          <target state="translated">コールバックはN個の仮想マシン操作ごとに呼び出されます。Nは&lt;b&gt;sqlite_progress_handler（）の&lt;/b&gt; 2番目の引数として提供されます。&lt;b&gt;sqlite_progress_handler（）&lt;/b&gt;の3番目と4番目の引数は、呼び出されるルーチンへのポインターと、最初の引数として渡されるvoidポインターです。</target>
        </trans-unit>
        <trans-unit id="70ae791199d0c0d2e25d25668478f3c97d6fcbcf" translate="yes" xml:space="preserve">
          <source>The callback registered by this function replaces any existing callback registered using &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt;. Likewise, registering a callback using &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; disables the automatic checkpoint mechanism configured by this function.</source>
          <target state="translated">この関数によって登録されたコールバックは、&lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;を使用して登録された既存のコールバックを置き換えます。同様に、&lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;を使用してコールバックを登録すると、この関数によって構成された自動チェックポイントメカニズムが無効になります。</target>
        </trans-unit>
        <trans-unit id="95427739ef742c846008bdf4e9ade466f5ff0b68" translate="yes" xml:space="preserve">
          <source>The callback registered by this function replaces any existing callback registered using &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt;. Likewise, registering a callback using &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; disables the automatic checkpoint mechanism configured by this function.</source>
          <target state="translated">この関数によって登録されたコールバックは、&lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;を使用して登録された既存のコールバックを置き換えます。同様に、&lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook（）&lt;/a&gt;を使用してコールバックを登録すると、この関数によって構成された自動チェックポイントメカニズムが無効になります。</target>
        </trans-unit>
        <trans-unit id="af79ec8f0bec910d80bc717aab639238d9ea73fe" translate="yes" xml:space="preserve">
          <source>The caller could distinguish between this special &quot;DROP TABLE|INDEX&quot; case and other cases by using &lt;a href=&quot;rescode#extrc&quot;&gt;extended error codes&lt;/a&gt;. When it is appropriate to call &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt;, the extended error code is SQLITE_LOCKED_SHAREDCACHE. Otherwise, in the &quot;DROP TABLE|INDEX&quot; case, it is just plain SQLITE_LOCKED. Another solution might be to limit the number of times that any single query could be reattempted (to say 100). Although this might be less efficient than one might wish, the situation in question is not likely to occur often.</source>
          <target state="translated">呼び出し側は、&lt;a href=&quot;rescode#extrc&quot;&gt;拡張エラーコード&lt;/a&gt;を使用して、この特別な「DROP TABLE | INDEX」のケースと他のケースを区別できます。&lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify（）&lt;/a&gt;を呼び出すのが適切な場合、拡張エラーコードはSQLITE_LOCKED_SHAREDCACHEです。それ以外の場合、「DROP TABLE | INDEX」の場合、それは単なるSQLITE_LOCKEDです。別の解決策は、単一のクエリを再試行できる回数を制限することです（たとえば100）。これは望んでいるよりも効率が悪いかもしれませんが、問題の状況は頻繁に発生する可能性は低いです。</target>
        </trans-unit>
        <trans-unit id="b3f82dd9e0519120922fe3d796ee7df0852a43b3" translate="yes" xml:space="preserve">
          <source>The canonical FTS5 source code consists of a series of *.c and other files in the &quot;ext/fts5&quot; directory of the SQLite source tree. A build process reduces this to just two files - &quot;fts5.c&quot; and &quot;fts5.h&quot; - which may be used to build an SQLite loadable extension.</source>
          <target state="translated">標準的な FTS5 のソースコードは、SQLite ソースツリーの &quot;ext/fts5&quot; ディレクトリにある一連の *.c とその他のファイルで構成されています。ビルド処理により、これを &quot;fts5.c&quot; と &quot;fts5.h&quot; の 2 つのファイルだけに減らすことができます。-これらのファイルは、SQLite のロード可能な拡張機能をビルドするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="821b27603ed5a2bcfa634bb0e0d6241eee07c748" translate="yes" xml:space="preserve">
          <source>The carray() function can be used in the FROM clause of a query. For example, to query two entries from the OBJ table using rowids taken from a C-language array at address $PTR.</source>
          <target state="translated">carray()関数は、クエリの FROM 句で使用することができます。例えば、アドレス$PTRのC言語配列から取得した行番号を使用してOBJテーブルから2つのエントリを問い合わせるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="44fb31ec0ece772e4bff94846b749fc144432db5" translate="yes" xml:space="preserve">
          <source>The carray() function is not compiled into SQLite by default. It is available as a &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; in the &lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=ext/misc/carray.c&quot;&gt;ext/misc/carray.c&lt;/a&gt; source file.</source>
          <target state="translated">carray（）関数は、デフォルトではSQLiteにコンパイルされていません。これは、&lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=ext/misc/carray.c&quot;&gt;ext / misc / carray.c&lt;/a&gt;ソースファイルで&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能&lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="435764c5d08e172eacd91d4b4315996e3f48003b" translate="yes" xml:space="preserve">
          <source>The carray() function takes two or three arguments. The first argument is a pointer to an array. Since pointer values cannot be specified directly in SQL, the first argument must be a &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; that is bound to a pointer value using the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer()&lt;/a&gt; interface using a pointer-type of &quot;carray&quot;. The second argument is the number of elements in the array. The optional third argument is a string that determines the datatype of the elements in the C-language array. Allowed values for the third argument are:</source>
          <target state="translated">carray（）関数は2つまたは3つの引数を取ります。最初の引数は配列へのポインタです。SQLでポインター値を直接指定することはできないため、最初の引数は、 &quot;carray&quot;のポインター型を使用する&lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_pointer（）&lt;/a&gt;インターフェイスを使用してポインター値にバインドされる&lt;a href=&quot;lang_expr#varparam&quot;&gt;パラメーターで&lt;/a&gt;ある必要があります。2番目の引数は、配列内の要素の数です。オプションの3番目の引数は、C言語配列の要素のデータ型を決定する文字列です。3番目の引数に使用できる値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="41b5d7c612b8b2127750760016443da99495e2ab" translate="yes" xml:space="preserve">
          <source>The casual reader is not expected to understand or remember any part of the list above. The point of this list is to demonstrate that the decision of whether or not to flatten a query is complex.</source>
          <target state="translated">カジュアルな読者は、上記のリストのどの部分も理解したり覚えていたりすることは期待していません。このリストのポイントは、クエリを平坦にするかどうかの判断が複雑であることを示すことです。</target>
        </trans-unit>
        <trans-unit id="bcf344511369b084d726030fdafcea463d5dc468" translate="yes" xml:space="preserve">
          <source>The cell content area</source>
          <target state="translated">セルの内容領域</target>
        </trans-unit>
        <trans-unit id="4e5d403004805e89c7f707b8add474e39df5ebd7" translate="yes" xml:space="preserve">
          <source>The cell pointer array</source>
          <target state="translated">セルポインタの配列</target>
        </trans-unit>
        <trans-unit id="e6c56d9636275558f42c1d09a95b01d119d13bcb" translate="yes" xml:space="preserve">
          <source>The cell pointer array of a b-tree page immediately follows the b-tree page header. Let K be the number of cells on the btree. The cell pointer array consists of K 2-byte integer offsets to the cell contents. The cell pointers are arranged in key order with left-most cell (the cell with the smallest key) first and the right-most cell (the cell with the largest key) last.</source>
          <target state="translated">b-treeページのセルポインタ配列は、b-treeページヘッダの直後に続く。Kをb-tree上のセルの数とする。セルポインタの配列は、セルの内容にオフセットされた K 個の 2 バイト整数で構成される。セルポインタはキー順に配列され、左端のセル(キーが最小のセル)が最初に、右端のセル(キーが最大のセル)が最後になる。</target>
        </trans-unit>
        <trans-unit id="1302721086a59f9c1c80a0439335aec4ebc89654" translate="yes" xml:space="preserve">
          <source>The cell_size_check pragma enables or disables additional sanity checking on database b-tree pages as they are initially read from disk. With cell size checking enabled, database corruption is detected earlier and is less likely to &quot;spread&quot;. However, there is a small performance hit for doing the extra checks and so cell size checking is turned off by default.</source>
          <target state="translated">cell_size_check pragma は、データベースの b-tree ページがディスクから最初に読み込まれたときに、追加のサニティチェックを有効または無効にします。セルサイズチェックを有効にすると、データベースの破損がより早く検出され、「拡散」する可能性が低くなります。しかし、追加のチェックを行うためのパフォーマンスの低下があるため、セルサイズチェックはデフォルトではオフになっています。</target>
        </trans-unit>
        <trans-unit id="68b13b4df554f0eca9f783dc081206c3c433b689" translate="yes" xml:space="preserve">
          <source>The cg_anno.tcl script removes extraneous details from the default cachegrind annotation output so that before-and-after reports can be compared using a side-by-side diff to view specific details of how a micro-optimization attempt affected performance.</source>
          <target state="translated">cg_anno.tcl スクリプトはデフォルトの cachegrind アノテーション出力から余計な詳細を削除します。</target>
        </trans-unit>
        <trans-unit id="fdc2d39d7bf4988a1e3259d80bd003ba0f7f2a24" translate="yes" xml:space="preserve">
          <source>The change is made by an SQL trigger or foreign key action instead of directly as a result of a users SQL statement.</source>
          <target state="translated">変更は、ユーザーのSQL文の結果として直接ではなく、SQLトリガまたは外部キーアクションによって行われます。</target>
        </trans-unit>
        <trans-unit id="55b6de28efb13f598ab97e8c9b2ad359898d3863" translate="yes" xml:space="preserve">
          <source>The changes must consist of &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;, &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;, and &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; operations only. CREATE and DROP operations are not supported.</source>
          <target state="translated">変更は、&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;、&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;、および&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;操作のみで構成されている必要があります。CREATEおよびDROP操作はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="204b32b2b5c56879d06b01e160a1a35686edf225" translate="yes" xml:space="preserve">
          <source>The changes to locking and concurrency control in SQLite version 3 also introduce some subtle changes in the way transactions work at the SQL language level. By default, SQLite version 3 operates in &lt;em&gt;autocommit&lt;/em&gt; mode. In autocommit mode, all changes to the database are committed as soon as all operations associated with the current database connection complete.</source>
          <target state="translated">SQLiteバージョン3でのロックおよび同時実行制御の変更により、SQL言語レベルでのトランザクションの動作方法にも微妙な変更がいくつか加えられました。デフォルトでは、SQLiteバージョン3は&lt;em&gt;自動コミット&lt;/em&gt;モードで動作します。自動コミットモードでは、現在のデータベース接続に関連付けられているすべての操作が完了するとすぐに、データベースに対するすべての変更がコミットされます。</target>
        </trans-unit>
        <trans-unit id="9ec4059d42e348f2d46482a218570373eadf5d72" translate="yes" xml:space="preserve">
          <source>The changes() function returns the number of database rows that were changed or inserted or deleted by the most recently completed INSERT, DELETE, or UPDATE statement, exclusive of statements in lower-level triggers. The changes() SQL function is a wrapper around the &lt;a href=&quot;c3ref/changes&quot;&gt;sqlite3_changes()&lt;/a&gt; C/C++ function and hence follows the same rules for counting changes.</source>
          <target state="translated">changes（）関数は、最後に完了したINSERT、DELETE、またはUPDATEステートメントによって変更または挿入または削除されたデータベース行の数を返します。下位レベルのトリガーのステートメントは含まれません。changes（）SQL関数は、&lt;a href=&quot;c3ref/changes&quot;&gt;sqlite3_changes（）&lt;/a&gt; C / C ++関数のラッパーであるため、変更をカウントする場合と同じルールに従います。</target>
        </trans-unit>
        <trans-unit id="a67c4e9392e6b6f9ae02f045b5dfeb70fe9c0330" translate="yes" xml:space="preserve">
          <source>The char(X1,X2,...,XN) function returns a string composed of characters having the unicode code point values of integers X1 through XN, respectively.</source>
          <target state="translated">char(X1,X2,...,XN)関数は、それぞれ整数X1からXNまでのユニコードコードコードポイント値を持つ文字からなる文字列を返します。</target>
        </trans-unit>
        <trans-unit id="37f1486781d28feebc971db6315e3ab886799387" translate="yes" xml:space="preserve">
          <source>The chart below shows average time to read a blob directly from the filesystem versus the time needed to read the same blob from the SQLite database. The actual timings vary considerably from one system to another (the Ubuntu desktop is much faster than the Galaxy S3 phone, for example). This chart shows the ratio of the times needed to read blobs from a file divided by the time needed to from the database. The left-most column in the chart is the normalized time to read from the database, for reference.</source>
          <target state="translated">下のグラフは、ファイルシステムから直接ブロブを読み取るのに必要な平均時間と、SQLiteデータベースから同じブロブを読み取るのに必要な時間を比較したものです。実際の時間はシステムによってかなり異なります(例えば、UbuntuデスクトップはGalaxy S3携帯電話よりもはるかに高速です)。このチャートは、ファイルからブロブを読み取るのに必要な時間をデータベースから読み取るのに必要な時間で割った比率を示しています。チャートの一番左の列は、参考までに、データベースからの読み込みに必要な時間を正規化したものです。</target>
        </trans-unit>
        <trans-unit id="f11b1918c906d3777fe0d3b93cddb4875a03b224" translate="yes" xml:space="preserve">
          <source>The chart below shows data collected using &lt;a href=&quot;https://www.sqlite.org/src/file/test/kvtest.c&quot;&gt;kvtest.c&lt;/a&gt; on five different systems:</source>
          <target state="translated">以下のチャートは、5つの異なるシステムで&lt;a href=&quot;https://www.sqlite.org/src/file/test/kvtest.c&quot;&gt;kvtest.c&lt;/a&gt;を使用して収集されたデータを示しています。</target>
        </trans-unit>
        <trans-unit id="7328593ed0585c2ca2a1685910b260ca61685e5b" translate="yes" xml:space="preserve">
          <source>The chart below shows the relative size and performance for SQLite as of 2017-10-08 for various compilers and optimization settings as tested on Ubuntu 16.04.3 on x86_64. General observations:</source>
          <target state="translated">以下の表は、Ubuntu 16.04.3 on x86_64でテストした、さまざまなコンパイラと最適化設定に対する2017-10-08時点でのSQLiteの相対的なサイズとパフォーマンスを示しています。一般的な観察です。</target>
        </trans-unit>
        <trans-unit id="3c6947bf2e572c7854301cde9f7c5737935d4086" translate="yes" xml:space="preserve">
          <source>The chart shows that on Windows10, content can be read from the SQLite database about 5 times faster than it can be read directly from disk. On Android, SQLite is only about 35% faster than reading from disk.</source>
          <target state="translated">このグラフを見ると、Windows10では、ディスクから直接読み込むよりもSQLiteデータベースからコンテンツを約5倍速く読み込むことができます。Androidでは、SQLiteはディスクからの読み込みよりも約35%しか速くなりません。</target>
        </trans-unit>
        <trans-unit id="4b79be443470ce0f3ea4b17f53ee3e0a63d67172" translate="yes" xml:space="preserve">
          <source>The check-in has a &quot;trunk&quot; tag.</source>
          <target state="translated">チェックインには「トランク」のタグが付いています。</target>
        </trans-unit>
        <trans-unit id="83b47a927090544c586621a60b2916e19fae4550" translate="yes" xml:space="preserve">
          <source>The check-in has a child that has a &quot;trunk&quot; tag.</source>
          <target state="translated">チェックインには「トランク」というタグがついている子がいます。</target>
        </trans-unit>
        <trans-unit id="62c61bcc8ce340ae3a9c5cbdd0d35b553d2386d8" translate="yes" xml:space="preserve">
          <source>The check-in has a parent that has a &quot;trunk&quot; tag.</source>
          <target state="translated">チェックインには「トランク」というタグが付いた親がいます。</target>
        </trans-unit>
        <trans-unit id="6dad224b0586b91e423315e1a7ef99941945ad20" translate="yes" xml:space="preserve">
          <source>The checksum VFS extension is a &lt;a href=&quot;vfs#shim&quot;&gt;VFS shim&lt;/a&gt; that adds an 8-byte checksum to the end of every page in an SQLite database. The checksum is added as each page is written and verified as each page is read. The checksum is intended to help detect database corruption caused by random bit-flips in the mass storage device.</source>
          <target state="translated">チェックサムVFS拡張機能は、SQLiteデータベースのすべてのページの最後に8バイトのチェックサムを追加する&lt;a href=&quot;vfs#shim&quot;&gt;VFSシム&lt;/a&gt;です。チェックサムは、各ページが書き込まれるときに追加され、各ページが読み取られるときに検証されます。チェックサムは、大容量記憶装置のランダムなビットフリップによって引き起こされるデータベースの破損を検出するのに役立つことを目的としています。</target>
        </trans-unit>
        <trans-unit id="34c12f92dcc6b984c7dc0650d9da983b05acb095" translate="yes" xml:space="preserve">
          <source>The checksum VFS extension requires SQLite version 3.32.0 (2020-05-22) or later. It will not work with earlier versions of SQLite.</source>
          <target state="translated">チェックサム VFS 拡張機能を使用するには、SQLite バージョン 3.32.0 (2020-05-22)以降が必要です。それ以前のバージョンの SQLite では動作しません。</target>
        </trans-unit>
        <trans-unit id="b0b70c1c0ff79721dae8d9a4e00e5b929e1563a7" translate="yes" xml:space="preserve">
          <source>The checksum VFS module is a &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt;. It is not included in the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. It must be added to SQLite either at compile-time or at run-time. The source code to the checksum VFS module is in the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/cksumvfs.c&quot;&gt;ext/misc/cksumvfs.c&lt;/a&gt; source file in the &lt;a href=&quot;https://sqlite.org/src&quot;&gt;SQLite source tree&lt;/a&gt;.</source>
          <target state="translated">チェックサムVFSモジュールは&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能&lt;/a&gt;です。&lt;a href=&quot;amalgamation&quot;&gt;合併に&lt;/a&gt;は含まれていません。コンパイル時または実行時にSQLiteに追加する必要があります。チェックサムVFSモジュールのソースコードは、&lt;a href=&quot;https://sqlite.org/src&quot;&gt;SQLiteソースツリー&lt;/a&gt;の&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/cksumvfs.c&quot;&gt;ext / misc /cksumvfs.c&lt;/a&gt;ソースファイルにあります。</target>
        </trans-unit>
        <trans-unit id="b751a07c985fa86fe7c3c40b3bf6704b7852bcb1" translate="yes" xml:space="preserve">
          <source>The checksum algorithm only works for content which is a multiple of 8 bytes in length. In other words, if the inputs are x(0) through x(N) then N must be odd. The checksum algorithm is as follows:</source>
          <target state="translated">チェックサムアルゴリズムは、長さが8バイトの倍数であるコンテンツに対してのみ動作します。言い換えれば、入力が x(0)から x(N)の場合、N は奇数でなければなりません。チェックサムアルゴリズムは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9654e9833d2bad18eac61dc57f147c1ed15a761f" translate="yes" xml:space="preserve">
          <source>The checksum is an unsigned 32-bit integer computed as follows:</source>
          <target state="translated">チェックサムは、以下のように計算された符号なし32ビット整数です。</target>
        </trans-unit>
        <trans-unit id="270f933e45ef3250cf9dcd69e18f5fd196bd90a0" translate="yes" xml:space="preserve">
          <source>The checksum is computed by interpreting the input as an even number of unsigned 32-bit integers: x(0) through x(N). The 32-bit integers are big-endian if the magic number in the first 4 bytes of the WAL header is 0x377f0683 and the integers are little-endian if the magic number is 0x377f0682. The checksum values are always stored in the frame header in a big-endian format regardless of which byte order is used to compute the checksum.</source>
          <target state="translated">チェックサムは、入力をx(0)からx(N)までの偶数の符号なし32ビット整数として解釈することで計算されます。32ビット整数は、WALヘッダの最初の4バイトのマジックナンバーが0x377f0683の場合はビッグエンディアン、マジックナンバーが0x377f0682の場合はリトルエンディアンになります。チェックサム値は、どのバイトオーダーでチェックサムを計算するかに関わらず、常にビッグエンディアン形式でフレームヘッダに格納されます。</target>
        </trans-unit>
        <trans-unit id="cc24b6f9af8e44f6ff2e41a4a1721f4bd21f35c7" translate="yes" xml:space="preserve">
          <source>The checksum value is used to guard against incomplete writes of a journal page record following a power failure. A different random nonce is used each time a transaction is started in order to minimize the risk that unwritten sectors might by chance contain data from the same page that was a part of prior journals. By changing the nonce for each transaction, stale data on disk will still generate an incorrect checksum and be detected with high probability. The checksum only uses a sparse sample of 32-bit words from the data record for performance reasons - design studies during the planning phases of SQLite 3.0.0 showed a significant performance hit in checksumming the entire page.</source>
          <target state="translated">チェックサム値は、停電後のジャーナル・ページ・レコードの不完全な書き込みを防ぐために使用されます。書かれていないセクタに、以前のジャーナルの一部であった同じページのデータが偶然にも含まれている可能性を最小限に抑えるために、トランザクションが開始されるたびに異なるランダムなnonceが使用されます。トランザクションごとにnonceを変更することで、ディスク上の古いデータは依然として不正確なチェックサムを生成し、高確率で検出されます。SQLite 3.0.0 の計画段階での設計研究では、ページ全体をチェックサムするとパフォーマンスが大幅に低下することが示されていました。</target>
        </trans-unit>
        <trans-unit id="3990c0ed7263ce684acb68c345cf784357432dbe" translate="yes" xml:space="preserve">
          <source>The checksum value written to the</source>
          <target state="translated">に書き込まれたチェックサム値が</target>
        </trans-unit>
        <trans-unit id="77ac1ab95620d7ae472b49582dcc0e306b38c020" translate="yes" xml:space="preserve">
          <source>The checksum values in the final 8 bytes of the frame-header exactly match the checksum computed consecutively on the first 24 bytes of the WAL header and the first 8 bytes and the content of all frames up to and including the current frame.</source>
          <target state="translated">フレームヘッダの最後の8バイトのチェックサム値は、WALヘッダの最初の24バイトと最初の8バイト、および現在のフレームまでのすべてのフレームの内容について連続して計算されたチェックサムと正確に一致します。</target>
        </trans-unit>
        <trans-unit id="6c5140842eec97f2402faa79d3b18bc3769b3084" translate="yes" xml:space="preserve">
          <source>The child table references the primary key of the parent without specifying the primary key columns and the number of primary key columns in the parent do not match the number of child key columns.</source>
          <target state="translated">子テーブルは主キー列を指定せずに親の主キーを参照しており、親の主キー列の数と子キー列の数が一致しない。</target>
        </trans-unit>
        <trans-unit id="cb680522ff952474c4763f726c9755f62f14ba34" translate="yes" xml:space="preserve">
          <source>The circumstances under which SQLite will enforce the heap limits may changes in future releases of SQLite.</source>
          <target state="translated">SQLite がヒープ制限を適用する状況は、将来の SQLite のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="da194c4576594e7457a28ceeefa6139ab020edb1" translate="yes" xml:space="preserve">
          <source>The circumstances under which SQLite will enforce the soft heap limit may changes in future releases of SQLite.</source>
          <target state="translated">SQLite がソフトヒープ制限を適用する状況は、SQLite の将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="61459fdd1646e497264a92192cd0400ff16d21ef" translate="yes" xml:space="preserve">
          <source>The cksumvfs extension implements a new PRAGMA statement that can be used to disable, re-enable, or query the status of checksum verification:</source>
          <target state="translated">cksumvfs 拡張モジュールは新しい PRAGMA 文を実装しており、チェックサム検証の無効化、再有効化、状態の問い合わせに使用できます。</target>
        </trans-unit>
        <trans-unit id="eed6f77a1a12342f6f0e71580e9b4032c3ba5e49" translate="yes" xml:space="preserve">
          <source>The claim of the previous paragraph is extensively checked in the SQLite regression test suite using a special test harness that simulates the effects on a database file of operating system crashes and power failures.</source>
          <target state="translated">前段落の主張は、オペレーティングシステムのクラッシュや停電によるデータベースファイルへの影響をシミュレートする特別なテストハーネスを使用して、SQLiteリグレッションテストスイートで広範囲にチェックされています。</target>
        </trans-unit>
        <trans-unit id="ce6585a17c4368c809080175136a8937ad00861b" translate="yes" xml:space="preserve">
          <source>The coalesce() function returns a copy of its first non-NULL argument, or NULL if all arguments are NULL. Coalesce() must have at least 2 arguments.</source>
          <target state="translated">coalesce()関数は、最初の非NULL引数のコピーを返します。Coalesce()は、少なくとも 2 つの引数を持たなければなりません。</target>
        </trans-unit>
        <trans-unit id="f7c2331fa2d3327c8c4beede4ed0b6e31a651048" translate="yes" xml:space="preserve">
          <source>The code above is for the general case. For the special case of an SQLite Archive that only stores uncompressed or uncompressible content (this might come up, for example, in an SQLite Archive that stores only JPEG, GIF, and/or PNG images) then the content can be inserted into and extracted from the database without using the sqlar_compress() and sqlar_uncompress() functions, and the sqlar.c extension is not required.</source>
          <target state="translated">上記のコードは一般的な場合のものです。非圧縮あるいは非圧縮のコンテンツのみを保存する SQLite Archive の特殊なケース (例えば JPEG、GIF、PNG 画像のみを保存する SQLite Archive など)では、sqlar_compress()や sqlar_uncompress()関数を使用せずにデータベースにコンテンツを挿入したり抽出したりすることができ、sqlar.c 拡張モジュールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="4eb7b1d4fed609f9eafac0ed3cfa712e4a84c44c" translate="yes" xml:space="preserve">
          <source>The code appears stable so we are now calling it &quot;beta&quot;.</source>
          <target state="translated">コードは安定しているようなので、現在は「ベータ」と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="4dcec88beb123f0b5fcd5b586036ea0a356cf753" translate="yes" xml:space="preserve">
          <source>The code audits used to ensure that memory allocation size computations do not overflow in SQLite are repeated prior to every SQLite release.</source>
          <target state="translated">SQLite のメモリ割り当てサイズの計算がオーバーフローしないようにするために使用されるコード監査は、SQLite のリリースのたびに繰り返されます。</target>
        </trans-unit>
        <trans-unit id="b0a804ee343680af0bae1b47adaea7bd27c01026" translate="yes" xml:space="preserve">
          <source>The code for the swarmvtab virtual table is found in the ext/misc/unionvtab.c file of the main SQLite source tree. It may be compiled into an SQLite &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; using a command like:</source>
          <target state="translated">swarmvtab仮想テーブルのコードは、メインのSQLiteソースツリーのext / misc / unionvtab.cファイルにあります。次のようなコマンドを使用して、SQLiteの&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能に&lt;/a&gt;コンパイルできます。</target>
        </trans-unit>
        <trans-unit id="429be1d142052bd4928f94110562bdb201e97a74" translate="yes" xml:space="preserve">
          <source>The code for the zipfile module is found in the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/zipfile.c&quot;&gt;ext/misc/zipfile.c&lt;/a&gt; file of the &lt;a href=&quot;https://sqlite.org/src&quot;&gt;main SQLite source tree&lt;/a&gt;. It may be compiled into an SQLite &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; using a command like:</source>
          <target state="translated">zipfileモジュールのコードは、&lt;a href=&quot;https://sqlite.org/src&quot;&gt;メインのSQLiteソースツリー&lt;/a&gt;の&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/zipfile.c&quot;&gt;ext / misc / zipfile.c&lt;/a&gt;ファイルにあります。次のようなコマンドを使用して、SQLiteの&lt;a href=&quot;loadext&quot;&gt;ロード可能な拡張機能に&lt;/a&gt;コンパイルできます。</target>
        </trans-unit>
        <trans-unit id="e9f5bceb13445c13d968dff10e26983b65675c68" translate="yes" xml:space="preserve">
          <source>The code generated in this last example is the same as the previous except for the addition of two conditional jumps used to implement the extra WHERE and HAVING clauses. The WHERE clause is implemented by instructions 9 through 11 in the query loop. The HAVING clause is implemented by instruction 28 through 30 in the output loop.</source>
          <target state="translated">この最後の例で生成されたコードは、追加の WHERE 節と HAVING 節を実装するために使用される 2 つの条件ジャンプが追加されていることを除いては、前の例と同じです。WHERE句は、クエリループ内の命令9から11によって実装されています。HAVING句は出力ループ内の命令28から30によって実装されています。</target>
        </trans-unit>
        <trans-unit id="ecc7e2ea5797377ee55e53ff370e71d0a0432eb1" translate="yes" xml:space="preserve">
          <source>The code generated to implement this last query is as follows:</source>
          <target state="translated">この最後のクエリを実装するために生成されたコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="26011ad1079cb8255e24204fff9114945ad7804b" translate="yes" xml:space="preserve">
          <source>The code generator in SQLite processes compound SELECT statements using a recursive algorithm. In order to limit the size of the stack, we therefore limit the number of terms in a compound SELECT. The maximum number of terms is SQLITE_MAX_COMPOUND_SELECT which defaults to 500. We think this is a generous allotment since in practice we almost never see the number of terms in a compound select exceed single digits.</source>
          <target state="translated">SQLite のコード・ジェネレーターは、再帰的アルゴリズムを使用して複合 SELECT 文を処理します。スタックのサイズを制限するために、複合 SELECT のターム数を制限しています。タームの最大数は SQLITE_MAX_COMPOUND_SELECT で、デフォルトは 500 です。実際には複合セレクトのターム数が一桁を超えることはほとんどないので、これは寛大な割り当てだと考えています。</target>
        </trans-unit>
        <trans-unit id="0a5ca134725357f1db49cf5e9aed85ae431b52f8" translate="yes" xml:space="preserve">
          <source>The code generator, and especially the logic in &lt;b&gt;where*.c&lt;/b&gt; and in &lt;a href=&quot;https://sqlite.org/src/file/src/select.c&quot;&gt;select.c&lt;/a&gt;, is sometimes called the &lt;a href=&quot;optoverview&quot;&gt;query planner&lt;/a&gt;. For any particular SQL statement, there might be hundreds, thousands, or millions of different algorithms to compute the answer. The query planner is an AI that strives to select the best algorithm from these millions of choices.</source>
          <target state="translated">コードジェネレーター、特に&lt;b&gt;where * .c&lt;/b&gt;および&lt;a href=&quot;https://sqlite.org/src/file/src/select.c&quot;&gt;select.c&lt;/a&gt;のロジックは、&lt;a href=&quot;optoverview&quot;&gt;クエリプランナー&lt;/a&gt;と呼ばれることもあります。特定のSQLステートメントでは、答えを計算するための数百、数千、または数百万の異なるアルゴリズムが存在する場合があります。クエリプランナーは、これらの数百万の選択肢から最適なアルゴリズムを選択することに努めるAIです。</target>
        </trans-unit>
        <trans-unit id="25e3614fe3c2a2058c86f93c8b850392e16eae8c" translate="yes" xml:space="preserve">
          <source>The code in &quot;fts5.c&quot; may then be compiled into a loadable extension or statically linked into an application as described in &lt;a href=&quot;loadext#build&quot;&gt;Compiling Loadable Extensions&lt;/a&gt;. There are two entry points defined, both of which do the same thing:</source>
          <target state="translated">次に、「fts5.c」のコードをロード可能な拡張にコンパイルするか、「ロード可能な拡張の&lt;a href=&quot;loadext#build&quot;&gt;コンパイル」で&lt;/a&gt;説明されているようにアプリケーションに静的にリンクします。2つのエントリポイントが定義されており、どちらも同じことを行います。</target>
        </trans-unit>
        <trans-unit id="c15d2613b82ac42eff7d51f6a4257bfde77f5feb" translate="yes" xml:space="preserve">
          <source>The code in this article could be improved in at least two ways:</source>
          <target state="translated">この記事のコードは、少なくとも2つの方法で改善することができます。</target>
        </trans-unit>
        <trans-unit id="81d14a407fed1c180dec58abfdf7e1bfd2ff10aa" translate="yes" xml:space="preserve">
          <source>The code space used by the SQLite library depends on the target platform, the compiler, and optimization settings. These variables also affect performance.</source>
          <target state="translated">SQLite ライブラリが使用するコードスペースは、ターゲットプラットフォーム、コンパイラ、最適化設定に依存します。これらの変数はパフォーマンスにも影響します。</target>
        </trans-unit>
        <trans-unit id="5c4a1121bef63849753648d7ec67f82ac551ebbe" translate="yes" xml:space="preserve">
          <source>The colUsed field indicates which columns of the virtual table may be required by the current scan. Virtual table columns are numbered from zero in the order in which they appear within the CREATE TABLE statement passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62), the corresponding bit is set within the colUsed mask if the column may be required by SQLite. If the table has at least 64 columns and any column to the right of the first 63 is required, then bit 63 of colUsed is also set. In other words, column iCol may be required if the expression (colUsed &amp;amp; ((sqlite3_uint64)1 &amp;lt;&amp;lt; (iCol&amp;gt;=63 ? 63 : iCol))) evaluates to non-zero.</source>
          <target state="translated">colUsedフィールドは、現在のスキャンで仮想テーブルのどの列が必要になるかを示します。仮想テーブルの列には、sqlite3_declare_vtab（）に渡されるCREATE TABLEステートメント内に出現する順序で、ゼロから番号が付けられます。最初の63列（列0〜62）では、SQLiteが列を必要とする場合、対応するビットがcolUsedマスク内に設定されます。テーブルに少なくとも64列があり、最初の63の右側の列が必要な場合は、colUsedのビット63も設定されます。つまり、式（colUsed＆（（sqlite3_uint64）1 &amp;lt;&amp;lt;（iCol&amp;gt; = 63？63：iCol）））がゼロ以外に評価される場合、列iColが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="cd6add92b1a269fd1ee22788d7c2c68cbcfa3387" translate="yes" xml:space="preserve">
          <source>The collating function callback is invoked with a copy of the pArg application data pointer and with two strings in the encoding specified by the eTextRep argument. The collating function must return an integer that is negative, zero, or positive if the first string is less than, equal to, or greater than the second, respectively. A collating function must always return the same answer given the same inputs. If two or more collating functions are registered to the same collation name (using different eTextRep values) then all must give an equivalent answer when invoked with equivalent strings. The collating function must obey the following properties for all strings A, B, and C:</source>
          <target state="translated">照合関数のコールバックは、pArgアプリケーションデータポインタのコピーと、eTextRep引数で指定されたエンコーディングの2つの文字列で呼び出されます。照合関数は、最初の文字列が2番目の文字列よりも小さい、等しい、または大きい場合、それぞれ負、ゼロ、または正の整数を返さなければなりません。照合関数は、同じ入力が与えられた場合、常に同じ答えを返さなければなりません。2つ以上の照合関数が同じ照合名に登録されている場合(異なるeTextRep値を使用している場合)、等価な文字列で呼び出された場合は、すべて等価な答えを返さなければなりません。照合関数は、すべての文字列A、B、Cに対して以下のプロパティに従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="0a8a7f3b3c83ac2e3d1763414e674a2e2ca29ee7" translate="yes" xml:space="preserve">
          <source>The collating function callback is invoked with a copy of the pArg application data pointer and with two strings in the encoding specified by the eTextRep argument. The two integer parameters to the collating function callback are the length of the two strings, in bytes. The collating function must return an integer that is negative, zero, or positive if the first string is less than, equal to, or greater than the second, respectively. A collating function must always return the same answer given the same inputs. If two or more collating functions are registered to the same collation name (using different eTextRep values) then all must give an equivalent answer when invoked with equivalent strings. The collating function must obey the following properties for all strings A, B, and C:</source>
          <target state="translated">照合関数コールバックは、pArgアプリケーションデータポインタのコピーと、eTextRep引数で指定されたエンコーディングの2つの文字列で呼び出されます。照合関数コールバックの2つの整数パラメータは、2つの文字列の長さをバイト単位で表します。照合関数は、最初の文字列が2番目の文字列よりも小さい、等しい、または大きい場合は、それぞれ負、ゼロ、または正の整数を返さなければなりません。照合関数は、同じ入力が与えられた場合、常に同じ答えを返さなければなりません。2つ以上の照合関数が同じ照合名に登録されている場合(異なるeTextRep値を使用している場合)、等価な文字列で呼び出された場合は、すべて等価な答えを返さなければなりません。照合関数は、すべての文字列A、B、Cに対して以下のプロパティに従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="65d2bfaa5988de22a32b291f24dfa00da4fc2f70" translate="yes" xml:space="preserve">
          <source>The column is identified by the second, third and fourth parameters to this function. The second parameter is either the name of the database (i.e. &quot;main&quot;, &quot;temp&quot;, or an attached database) containing the specified table or NULL. If it is NULL, then all attached databases are searched for the table using the same algorithm used by the database engine to resolve unqualified table references.</source>
          <target state="translated">カラムは、この関数の2番目、3番目、および4番目のパラメータによって識別されます。2番目のパラメータは、指定されたテーブルを含むデータベース(すなわち、&quot;main&quot;、&quot;temp&quot;、またはアタッチされたデータベース)の名前、またはNULLのいずれかです。これがNULLの場合、すべてのアタッチされたデータベースが、データベースエンジンが非限定テーブル参照を解決するために使用するのと同じアルゴリズムを使用して、そのテーブルを検索します。</target>
        </trans-unit>
        <trans-unit id="7829593889659cca230ab3239645af748546a7d0" translate="yes" xml:space="preserve">
          <source>The column labels that appear on the first two lines of output can be turned on and off using the &quot;.header&quot; dot command. In the examples above, the column labels are on. To turn them off you could do this:</source>
          <target state="translated">出力の最初の2行に表示されるカラムラベルは、&quot;.header &quot;ドットコマンドを使用してオンまたはオフにすることができます。上の例では、カラムラベルがオンになっています。それらをオフにするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="9b37c354a4343966405cb0363479fdc771c7551d" translate="yes" xml:space="preserve">
          <source>The column may not be &lt;a href=&quot;gencol&quot;&gt;GENERATED ALWAYS ... STORED&lt;/a&gt;, though VIRTUAL columns are allowed.</source>
          <target state="translated">VIRTUAL列は許可されていますが、列は&lt;a href=&quot;gencol&quot;&gt;GENERATED ALWAYS ... STORED&lt;/a&gt;ではない場合があります。</target>
        </trans-unit>
        <trans-unit id="71d2d7e1bd431710201b6152bbbf86fa85eac1e5" translate="yes" xml:space="preserve">
          <source>The column may not have a PRIMARY KEY or UNIQUE constraint.</source>
          <target state="translated">列には PRIMARY KEY または UNIQUE 制約がない場合があります。</target>
        </trans-unit>
        <trans-unit id="99d848b798067eee9317efc709f08dee3a25b0a8" translate="yes" xml:space="preserve">
          <source>The column may not have a default value of CURRENT_TIME, CURRENT_DATE, CURRENT_TIMESTAMP, or an expression in parentheses.</source>
          <target state="translated">この列には、CURRENT_TIME、CURRENT_DATE、CURRENT_TIMESTAMP、または括弧内の式のデフォルト値が含まれていない場合があります。</target>
        </trans-unit>
        <trans-unit id="adb879e73b7d88dc161320c793668864d27ae4e6" translate="yes" xml:space="preserve">
          <source>The column names and definitions for</source>
          <target state="translated">のカラム名と定義</target>
        </trans-unit>
        <trans-unit id="b16cccd51ed940f2dd9c18cb3d4d9b130c9ecd9e" translate="yes" xml:space="preserve">
          <source>The column names for the result sets of &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statements have been tweaked in some cases to work more like other SQL database engines.</source>
          <target state="translated">&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;ステートメントの結果セットの列名は、他のSQLデータベースエンジンのように機能するように調整されている場合があります。</target>
        </trans-unit>
        <trans-unit id="239fe7786e783e697b78c9df7c06b9daecb4d9f7" translate="yes" xml:space="preserve">
          <source>The column names of the virtual table are determined primarily by the &lt;b&gt;schema=&lt;/b&gt; argument. If the &lt;b&gt;schema=&lt;/b&gt; argument is omitted, but &lt;b&gt;header&lt;/b&gt; is true, then the values found in the first line of the CSV file become the column names. If the &lt;b&gt;schema=&lt;/b&gt; argument is omitted and &lt;b&gt;header&lt;/b&gt; is false, then the columns are named &quot;c0&quot;, &quot;c1&quot;, &quot;c2&quot;, and so forth.</source>
          <target state="translated">仮想テーブルの列名は、主に&lt;b&gt;schema =&lt;/b&gt;引数によって決定されます。場合&lt;b&gt;スキーマ=&lt;/b&gt;引数を省略しているが、&lt;b&gt;ヘッダが&lt;/b&gt;真である場合、値は、列名となるCSVファイルの1行目に見出さ。場合は&lt;b&gt;、スキーマ=&lt;/b&gt;引数が省略され&lt;b&gt;ヘッダが&lt;/b&gt;偽である場合、列は等々 、「C0」、「C1」、「C2」、およびという名前が付いています。</target>
        </trans-unit>
        <trans-unit id="27cc219896194f2cbf6cb1853331dc30b6f1a32f" translate="yes" xml:space="preserve">
          <source>The column names reported by join subqueries have been modified slightly in order to work more like other database engines. Consider the following query:</source>
          <target state="translated">join subqueriesで報告されたカラム名は、他のデータベースエンジンと同じように動作するように少し修正されています。次のクエリを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="cf988c97f1d408bf1402feb7e21744609abdb492" translate="yes" xml:space="preserve">
          <source>The column number (1 for the second leftmost column, etc.). This field is omitted for any term-offset list associated with column 0.</source>
          <target state="translated">カラム番号(左端の2番目のカラムなどは1)。このフィールドは、列0に関連付けられたタームオフセットリストの場合は省略されます。</target>
        </trans-unit>
        <trans-unit id="0d64ee03e40c54227cba3f5e9c70df99b5d87845" translate="yes" xml:space="preserve">
          <source>The column number that the term instance occurs in (0 for the leftmost column of the FTS table, 1 for the next leftmost, etc.).</source>
          <target state="translated">用語のインスタンスが発生する列番号(FTSテーブルの一番左端の列は0、次の左端の列は1など)。</target>
        </trans-unit>
        <trans-unit id="0e0d4c37f8f415ca48f1578c5fbfec2c6eeee2e7" translate="yes" xml:space="preserve">
          <source>The column-name list syntax was added in SQLite versions 3.9.0 (2015-10-14).</source>
          <target state="translated">SQLite バージョン 3.9.0 (2015-10-14)でカラム名リスト構文が追加されました。</target>
        </trans-unit>
        <trans-unit id="74b05d9163657d39d9cb9b3d5f80884cae70cb2c" translate="yes" xml:space="preserve">
          <source>The columns are provided by the SQLITE_STMT virtual table are summarized by the hypothetical CREATE TABLE statement show here:</source>
          <target state="translated">SQLITE_STMT仮想テーブルによって提供されるカラムは、ここに示す仮想的なCREATE TABLE文によって要約されています。</target>
        </trans-unit>
        <trans-unit id="99fc02c8d425b8c14b21527882dd349490360fd6" translate="yes" xml:space="preserve">
          <source>The columns referenced in the WHERE clause of a partial index can be any of the columns in the table, not just columns that happen to be indexed. However, it is very common for the WHERE clause expression of a partial index to be a simple expression on the column being indexed. The following is a typical example:</source>
          <target state="translated">部分インデックスのWHERE句で参照されるカラムは、たまたまインデックスが付けられたカラムだけでなく、テーブル内の任意のカラムである可能性があります。しかし、部分インデックスのWHERE句の式が、インデックスされているカラムに対する単純な式であることは非常に一般的です。以下は典型的な例です。</target>
        </trans-unit>
        <trans-unit id="c36ceb732928b62fa9f17cf0516fa8ff6f38d20c" translate="yes" xml:space="preserve">
          <source>The command above created the new branch. But your checkout is still on the trunk - a fact you can see by running the command:</source>
          <target state="translated">上のコマンドは新しいブランチを作成しました。しかし、あなたのチェックアウトはまだトランク上にあります-これはコマンドを実行するとわかります。</target>
        </trans-unit>
        <trans-unit id="39e91ef2d072dfac6ebe4c80889ed64220c2f4b1" translate="yes" xml:space="preserve">
          <source>The command above will make a copy of the complete development history of SQLite into the &quot;sqlite.fossil&quot; file on your computer. Making this copy takes about a minute and uses about 32 megabytes of transfer. After making the copy, &quot;open&quot; the repository by typing:</source>
          <target state="translated">上のコマンドは、SQLiteの完全な開発履歴のコピーをコンピュータ上の &quot;sqlite.fossil &quot;ファイルに作成します。このコピーの作成には約1分かかり、約32メガバイトの転送量を使用します。コピーを作成したら、次のようにタイプしてリポジトリを「開く」。</target>
        </trans-unit>
        <trans-unit id="4b3dc1d8af5139eaa56167ba29f9c2c18e9d510c" translate="yes" xml:space="preserve">
          <source>The command above writes the output of the query as CSV into a temporary file, invokes the default handler for CSV files (usually the preferred spreadsheet program such as Excel or LibreOffice), then deletes the temporary file. This is essentially a short-hand method of doing the sequence of &quot;.csv&quot;, &quot;.once&quot;, and &quot;.system&quot; commands described above.</source>
          <target state="translated">上記のコマンドは、クエリの出力をCSVとして一時ファイルに書き出し、CSVファイルのデフォルトハンドラ(通常はExcelやLibreOfficeなどの好ましい表計算プログラム)を呼び出してから、一時ファイルを削除します。これは基本的に、上で説明した「.csv」、「.once」、「.system」コマンドのシーケンスを実行する手短な方法です。</target>
        </trans-unit>
        <trans-unit id="b075c13635ba5e790ee4582ea35e32db5040da00" translate="yes" xml:space="preserve">
          <source>The command returns a new TCL channel for reading or writing to the BLOB. The channel is opened using the underlying &lt;a href=&quot;c3ref/blob_open&quot;&gt;sqlite3_blob_open()&lt;/a&gt; C-language interface. Close the channel using the &lt;b&gt;close&lt;/b&gt; command of TCL.</source>
          <target state="translated">このコマンドは、BLOBの読み取りまたは書き込み用の新しいTCLチャネルを返します。チャネルは、基礎となる&lt;a href=&quot;c3ref/blob_open&quot;&gt;sqlite3_blob_open（）&lt;/a&gt; C言語インターフェースを使用して開かれます。TCL の&lt;b&gt;close&lt;/b&gt;コマンドを使用してチャネルを閉じます。</target>
        </trans-unit>
        <trans-unit id="988274d0addcbb9018970d10733f7b4052f070a2" translate="yes" xml:space="preserve">
          <source>The command-line shell adds two &lt;a href=&quot;appfunc&quot;&gt;application-defined SQL functions&lt;/a&gt; that facilitate reading content from a file into a table column, and writing the content of a column into a file, respectively.</source>
          <target state="translated">コマンドラインシェルは、ファイルからテーブル列へのコンテンツの読み取りと、列のコンテンツのファイルへの書き込みをそれぞれ容易にする2つの&lt;a href=&quot;appfunc&quot;&gt;アプリケーション定義SQL関数&lt;/a&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="1a64c0d6110f60679f08571c4a254a77214045a1" translate="yes" xml:space="preserve">
          <source>The command-line shell adds two &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; that facilitate reading content from a file into a table column, and writing the content of a column into a file, respectively.</source>
          <target state="translated">コマンドラインシェルは、ファイルからテーブル列へのコンテンツの読み取りと、ファイルへの列のコンテンツの書き込みをそれぞれ容易にする2つの&lt;a href=&quot;c3ref/create_function&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="5a15969d303479025517006f69c3c3e87572075f" translate="yes" xml:space="preserve">
          <source>The command-line shell uses the &lt;a href=&quot;zipfile&quot;&gt;Zipfile virtual table&lt;/a&gt; to access ZIP archives. You can see this by running the &quot;.schema&quot; command when a ZIP archive is open:</source>
          <target state="translated">コマンドラインシェルは、&lt;a href=&quot;zipfile&quot;&gt;Zipfile仮想テーブル&lt;/a&gt;を使用してZIPアーカイブにアクセスします。これは、ZIPアーカイブが開いているときに「.schema」コマンドを実行することで確認できます。</target>
        </trans-unit>
        <trans-unit id="9d792fd30ad98774099bd3871331d49c13f01ab7" translate="yes" xml:space="preserve">
          <source>The commit and rollback hook callbacks are not reentrant. The callback implementation must not do anything that will modify the database connection that invoked the callback. Any actions to modify the database connection must be deferred until after the completion of the &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; call that triggered the commit or rollback hook in the first place. Note that running any other SQL statements, including SELECT statements, or merely calling &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; will modify the database connections for the meaning of &quot;modify&quot; in this paragraph.</source>
          <target state="translated">commitおよびrollbackフックのコールバックは再入可能ではありません。コールバック実装は、コールバックを呼び出したデータベース接続を変更するようなことをしてはなりません。データベース接続を変更するアクションはすべて、最初にコミットまたはロールバックフックをトリガーした&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;呼び出しが完了するまで延期する必要があります。 SELECTステートメントを含む他のSQLステートメントを実行するか、単に&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step（）&lt;/a&gt;を呼び出すと、この段落の「変更」の意味でデータベース接続が変更されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="837a3144fbcca3d5f0e20f9cd17c26bc03114566" translate="yes" xml:space="preserve">
          <source>The commit and rollback hook callbacks are not reentrant. The callback implementation must not do anything that will modify the database connection that invoked the callback. Any actions to modify the database connection must be deferred until after the completion of the &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; call that triggered the commit or rollback hook in the first place. Note that running any other SQL statements, including SELECT statements, or merely calling &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; and &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; will modify the database connections for the meaning of &quot;modify&quot; in this paragraph.</source>
          <target state="translated">commitおよびrollbackフックのコールバックは再入可能ではありません。コールバック実装は、コールバックを呼び出したデータベース接続を変更するようなことをしてはなりません。データベース接続を変更するアクションはすべて、最初にコミットまたはロールバックフックをトリガーした&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;呼び出しが完了するまで延期する必要があります。 SELECTステートメントを含む他のSQLステートメントを実行するか、単に&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v2（）&lt;/a&gt;と&lt;a href=&quot;step&quot;&gt;sqlite3_step（）&lt;/a&gt;を呼び出すと、この段落の「変更」の意味でデータベース接続が変更されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5854e2359472df03b69e7808b8ee34022d4a6816" translate="yes" xml:space="preserve">
          <source>The commit process shown in &lt;a href=&quot;#section_3_0&quot;&gt;section 3.0&lt;/a&gt; assumes that all database changes fit in memory until it is time to commit. This is the common case. But sometimes a larger change will overflow the user-space cache prior to transaction commit. In those cases, the cache must spill to the database before the transaction is complete.</source>
          <target state="translated">&lt;a href=&quot;#section_3_0&quot;&gt;セクション3.0に&lt;/a&gt;示すコミットプロセスでは、コミットする時まで、すべてのデータベース変更がメモリに収まることを前提としています。これは一般的なケースです。ただし、大きな変更により、トランザクションのコミット前にユーザー空間キャッシュがオーバーフローする場合があります。これらの場合、トランザクションが完了する前に、キャッシュがデータベースにスピルする必要があります。</target>
        </trans-unit>
        <trans-unit id="831de8c9305e21ddee6326436c38620139c51d57" translate="yes" xml:space="preserve">
          <source>The common table expression works without having to load an extension. On the other hand, the extension is easier to program and faster.</source>
          <target state="translated">一般的なテーブル式は、拡張機能をロードすることなく動作します。その一方で、拡張子はプログラミングが簡単で高速です。</target>
        </trans-unit>
        <trans-unit id="975322957294bcdde1991bc8533b4c3c42c34fe5" translate="yes" xml:space="preserve">
          <source>The comparison is a sort comparison, so NULLs compare equal, NULLs are less than numbers, numbers are less than strings, and strings are less than blobs.</source>
          <target state="translated">比較はソート比較なので、NULLは等しく比較し、NULLは数値よりも小さく、数値は文字列よりも小さく、文字列はブロブよりも小さくなります。</target>
        </trans-unit>
        <trans-unit id="77fdffaa220770108e157d8f6fdf86e8984310f3" translate="yes" xml:space="preserve">
          <source>The compilation step shown immediately above is merely representative. In a working installation, one would normally want to specify optimization parameters and compile-time switches on the compiler command line.</source>
          <target state="translated">上に示したコンパイルステップは代表的なものに過ぎません。動作中のインストールでは、通常、最適化パラメータとコンパイル時のスイッチをコンパイラのコマンドラインで指定したいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="06859965a5874b48e17ef99de2638103b952d1aa" translate="yes" xml:space="preserve">
          <source>The compile-time options for setting upper bounds are &lt;a href=&quot;limits&quot;&gt;documented separately&lt;/a&gt;. The following is a list of the available settings:</source>
          <target state="translated">上限を設定するためのコンパイル時オプションは、&lt;a href=&quot;limits&quot;&gt;個別に説明されてい&lt;/a&gt;ます。以下は、使用可能な設定のリストです。</target>
        </trans-unit>
        <trans-unit id="d37610227543b6269c9a6c07ddb9c1381df5a58a" translate="yes" xml:space="preserve">
          <source>The complete state of an SQLite database is usually contained in a single file on disk called the &quot;main database file&quot;.</source>
          <target state="translated">SQLiteデータベースの完全な状態は、通常「メインデータベースファイル」と呼ばれるディスク上の単一のファイルに含まれています。</target>
        </trans-unit>
        <trans-unit id="96bf44cd55dc348e4e3f4d568f7843d225f7562d" translate="yes" xml:space="preserve">
          <source>The completion table is designed for interactive use. It will return answers at a speed appropriate for human typing. No effort is made to be unusually efficient, so long as the response time is nearly instantaneous in a user interface.</source>
          <target state="translated">補完表はインタラクティブな使用のために設計されています。人間が入力するのに適したスピードで回答を返してくれます。ユーザーインターフェースでの応答時間がほぼ瞬時である限り、異常に効率的になるような努力はしていません。</target>
        </trans-unit>
        <trans-unit id="d59eec775be7e50d6274c344c801f729c91ab804" translate="yes" xml:space="preserve">
          <source>The completion table is used to implement tab-completion in the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; in conjunction with either the readline or linenoise input line editing packages for unix. See the &lt;a href=&quot;https://sqlite.org/src/file/src/shell.c.in&quot;&gt;https://sqlite.org/src/file/src/shell.c.in&lt;/a&gt; source file for example code. Search for &quot;FROM completion&quot; to find the relevant code sections.</source>
          <target state="translated">補完テーブルは、UNIXのreadlineまたはlinenoise入力行編集パッケージと組み合わせて、&lt;a href=&quot;cli&quot;&gt;コマンドラインシェル&lt;/a&gt;でタブ補完を実装するために使用されます。コードの例については、&lt;a href=&quot;https://sqlite.org/src/file/src/shell.c.in&quot;&gt;https：//sqlite.org/src/file/src/shell.c.in&lt;/a&gt;ソースファイルを参照してください。「FROM完了」を検索して、関連するコードセクションを見つけます。</target>
        </trans-unit>
        <trans-unit id="e034c5722458a4ef5f557863bb00dfc415febe07" translate="yes" xml:space="preserve">
          <source>The completion table might return the same candidate more than once, and it will return candidates in an arbitrary order. The DISTINCT keyword and the ORDER BY in the sample query above are added to make the answers unique and in lexicographical order.</source>
          <target state="translated">補完テーブルは同じ候補を複数回返す可能性があり、任意の順序で候補を返すことになります。上のサンプルクエリのDISTINCTキーワードとORDER BYは、回答を一意で辞書順にするために追加されています。</target>
        </trans-unit>
        <trans-unit id="7bf1657f4892b438bb6c981746dfe40cd870c0fa" translate="yes" xml:space="preserve">
          <source>The complexity of Git distracts attention from the software under development. A user of Git needs to keep all of the following in mind:</source>
          <target state="translated">Git の複雑さは、開発中のソフトウェアから注意を逸らしてしまいます。Gitのユーザーは、以下のことをすべて念頭に置いておく必要があります。</target>
        </trans-unit>
        <trans-unit id="15376f7aadf15df031fa31738229dcbaf3f18c9d" translate="yes" xml:space="preserve">
          <source>The compound SELECT operators UNION, INTERSECT and EXCEPT perform implicit comparisons between values. No affinity is applied to comparison operands for the implicit comparisons associated with UNION, INTERSECT, or EXCEPT - the values are compared as is.</source>
          <target state="translated">複合SELECT演算子UNION、INTERSECT、EXCEPTは、値間の暗黙の比較を実行します。UNION、INTERSECT、またはEXCEPTに関連付けられた暗黙の比較では、比較オペランドに親和性は適用されません-値はそのまま比較されます。</target>
        </trans-unit>
        <trans-unit id="dc11a925c84e89a2d79f62896a81bbc87b31205f" translate="yes" xml:space="preserve">
          <source>The compress and uncompress options allow FTS4 content to be stored in the database in a compressed form. Both options should be set to the name of an SQL scalar function registered using &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; that accepts a single argument.</source>
          <target state="translated">圧縮オプションと圧縮解除オプションを使用すると、FTS4コンテンツを圧縮形式でデータベースに保存できます。どちらのオプションも、単一の引数を受け入れる&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt;を使用して登録されたSQLスカラー関数の名前に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f77d8f289ab8ab189cc2f583f00d06f6f32d94d" translate="yes" xml:space="preserve">
          <source>The compress function should return a compressed version of the value passed to it as an argument. Each time data is written to the FTS4 table, each column value is passed to the compress function and the result value stored in the database. The compress function may return any type of SQLite value (blob, text, real, integer or null).</source>
          <target state="translated">圧縮関数は、引数として渡された値を圧縮したものを返す必要があります。データがFTS4テーブルに書き込まれるたびに、各列の値が圧縮関数に渡され、その結果の値がデータベースに格納されます。圧縮関数は、任意のタイプのSQLite値(blob、text、real、integer、null)を返すことができます。</target>
        </trans-unit>
        <trans-unit id="290b0a4fd26e950183bc56ef03571b78a9f077cd" translate="yes" xml:space="preserve">
          <source>The compress option is used to specify the compress function. It is an error to specify a compress function without also specifying an uncompress function. &lt;a href=&quot;fts3#the_compress_and_uncompress_options&quot;&gt;See below&lt;/a&gt; for details.</source>
          <target state="translated">圧縮オプションは、圧縮機能を指定するために使用されます。圧縮解除関数を指定せずに圧縮関数を指定すると、エラーになります。&lt;a href=&quot;fts3#the_compress_and_uncompress_options&quot;&gt;詳細については、以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5836c13f879c56ed967a4394bb1d7a4816e02cd2" translate="yes" xml:space="preserve">
          <source>The compress=, uncompress= and languageid= options are not available. There is as of yet no equivalent for their functionality.</source>
          <target state="translated">compress=,uncompress=,languageid=オプションは利用できません。これらの機能に相当するものはまだありません。</target>
        </trans-unit>
        <trans-unit id="2469db0ecb30ed655de4891189661dea5b883567" translate="yes" xml:space="preserve">
          <source>The compression method used to compress the data (an integer). The value 0 indicates that the data is stored in the zip archive without compression. 8 means the raw deflate algorithm.</source>
          <target state="translated">データを圧縮するために使用する圧縮方法(整数)。値0は圧縮せずにZIPアーカイブにデータを保存したことを示します。8は生のデフレーションアルゴリズムを意味します。</target>
        </trans-unit>
        <trans-unit id="c682ba9f6178606617e01c8b48358fa9163f9c2c" translate="yes" xml:space="preserve">
          <source>The computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime_r() is used to assist in the calculation of local time. The localtime_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.</source>
          <target state="translated">ローカルタイムの計算は政治家の気まぐれに大きく依存しているため、すべてのロケールで正しく計算することは困難です。この実装では、標準的な C ライブラリ関数 localtime_r()を使用してローカルタイムの計算を支援します。localtime_r()C関数は通常、1970年から2037年の間でのみ動作します。この範囲外の日付については、SQLite はその年をこの範囲内の同等の年にマップし、計算を行い、年をマップし直します。</target>
        </trans-unit>
        <trans-unit id="a84ddecfbfcfd1c573cf704dea12a071acade093" translate="yes" xml:space="preserve">
          <source>The concept of fuzz testing has been around for decades, but fuzz testing was not an effective way to find bugs until 2014 when Michal Zalewski invented the first practical profile-guided fuzzer, &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;American Fuzzy Lop&lt;/a&gt; or &quot;AFL&quot;. Unlike prior fuzzers that blindly generate random inputs, AFL instruments the program being tested (by modifying the assembly-language output from the C compiler) and uses that instrumentation to detect when an input causes the program to do something different - to follow a new control path or loop a different number of times. Inputs that provoke new behavior are retained and further mutated. In this way, AFL is able to &quot;discover&quot; new behaviors of the program under test, including behaviors that were never envisioned by the designers.</source>
          <target state="translated">ファジングテストの概念は何十年も前から存在していましたが、ミハウザレフスキが最初の実用的なプロファイルガイドファジングである&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;American Fuzzy Lop&lt;/a&gt;または「AFL」を発明した2014年まで、ファジングテストはバグを見つける効果的な方法ではありませんでした。ランダムな入力を盲目的に生成する以前のファザーとは異なり、AFLはテスト対象のプログラムを（Cコンパイラからのアセンブリ言語出力を変更することによって）計測し、その計測を使用して、入力によってプログラムが別のことを実行するタイミングを検出します-新しい制御に従います異なる回数のパスまたはループ。新しい動作を引き起こす入力は保持され、さらに変更されます。このようにして、AFLは、設計者が想定していなかった動作を含む、テスト対象のプログラムの新しい動作を「発見」することができます。</target>
        </trans-unit>
        <trans-unit id="3c788bf48ee2358b78bb00bc56b593bb09c394d8" translate="yes" xml:space="preserve">
          <source>The configure script (on unix) automatically detects pread() and pwrite() and sets compile-time options to use those OS interfaces if they are available.</source>
          <target state="translated">configure スクリプト (unix 上)は pread()と pwrite()を自動的に検出し、それらの OS インターフェイスが利用可能な場合には、それらのインターフェイスを使用するようにコンパイル時のオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="b71509666058777b45e3ddaa4c2923ebc4c7fa2f" translate="yes" xml:space="preserve">
          <source>The configure-make works whether your are building from the canonical sources from the source tree, or from an amalgamated bundle. There are few dependencies. When building from canonical sources, a working &lt;a href=&quot;https://www.tcl.tk/man/tcl8.3/UserCmd/tclsh.htm&quot;&gt;tclsh&lt;/a&gt; is required. If using an amalgamation bundle, all the preprocessing work normally done by tclsh will have already been carried out and only normal build tools are required.</source>
          <target state="translated">configure-makeは、ソースツリーの正規ソースから構築する場合でも、融合バンドルから構築する場合でも機能します。依存関係はほとんどありません。正規のソースからビルドする場合は、機能する&lt;a href=&quot;https://www.tcl.tk/man/tcl8.3/UserCmd/tclsh.htm&quot;&gt;tclsh&lt;/a&gt;が必要です。融合バンドルを使用する場合、通常tclshによって行われるすべての前処理作業はすでに実行されており、通常のビルドツールのみが必要です。</target>
        </trans-unit>
        <trans-unit id="8ac9040eb64152e9af693ac6b3d6353d633a032f" translate="yes" xml:space="preserve">
          <source>The conflict handler is invoked with CHANGESET_DATA as the second argument when processing a DELETE or UPDATE change if a row with the required PRIMARY KEY fields is present in the database, but one or more other (non primary-key) fields modified by the update do not contain the expected &quot;before&quot; values.</source>
          <target state="translated">競合ハンドラは、DELETEまたはUPDATEの変更を処理する際に、CHANGESET_DATAを第2引数に指定して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="23fc4d91796bed566e82459162cebcab0cf84b45" translate="yes" xml:space="preserve">
          <source>The conflict handler is invoked with CHANGESET_NOTFOUND as the second argument when processing a DELETE or UPDATE change if a row with the required PRIMARY KEY fields is not present in the database.</source>
          <target state="translated">必須のPRIMARY KEYフィールドを持つ行がデータベースに存在しない場合、DELETEまたはUPDATEの変更を処理する際に、CHANGESET_NOTFOUNDを第2引数に指定してコンフリクトハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c661dc346561d136d5859295a5527b2af74324a7" translate="yes" xml:space="preserve">
          <source>The conflicting row in this case is the database row with the matching primary key.</source>
          <target state="translated">この場合の競合する行は、一致する主キーを持つデータベース行です。</target>
        </trans-unit>
        <trans-unit id="4298401952abf69332c686d0b1f446ca8e2e6344" translate="yes" xml:space="preserve">
          <source>The conflicting row, in this case, is the database row with the matching primary key.</source>
          <target state="translated">この場合、競合する行は、一致する主キーを持つデータベース行です。</target>
        </trans-unit>
        <trans-unit id="ca62ceaf8e4848fb4512d05da76c6a9337ad0aa5" translate="yes" xml:space="preserve">
          <source>The connection checks if a</source>
          <target state="translated">接続は</target>
        </trans-unit>
        <trans-unit id="72c42ad2c395427b5b34bc215df721de823e8688" translate="yes" xml:space="preserve">
          <source>The connection checks if the data in the</source>
          <target state="translated">のデータがあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="aed384d7e555153a17ceb13abbd6bca15763f13c" translate="yes" xml:space="preserve">
          <source>The content allows the text being indexed to be stored in a separate table distinct from the FTS4 table, or even outside of SQLite.</source>
          <target state="translated">この内容により、インデックス化されているテキストをFTS4テーブルとは別のテーブルに格納したり、SQLiteの外部に格納したりすることができます。</target>
        </trans-unit>
        <trans-unit id="d6e0eda1c9ea11f507c054ff491306a6eca1ff67" translate="yes" xml:space="preserve">
          <source>The content in the sqlite_stat4 table cannot be computed with anything less than a full scan. Hence, if a non-zero analysis limit is specified, the sqlite_stat4 table is not computed.</source>
          <target state="translated">sqlite_stat4テーブルの内容はフルスキャン以下では計算できません。したがって、ゼロ以外の分析限界が指定された場合、sqlite_stat4テーブルは計算されません。</target>
        </trans-unit>
        <trans-unit id="cbbe292e23fdc57896771b367c267746f39de5b7" translate="yes" xml:space="preserve">
          <source>The content of P3 registers starting at register P2 form an unpacked index key. This opcode removes that entry from the index opened by cursor P1.</source>
          <target state="translated">レジスタP2から始まるレジスタP3の内容は、アンパックされたインデックスキーを形成する。このオペコードは、カーソルP1で開いたインデックスからそのエントリを削除する。</target>
        </trans-unit>
        <trans-unit id="53039aadd3f75ae33d382081b8b5f0e6fd60f4d6" translate="yes" xml:space="preserve">
          <source>The content of an R*Tree index is actually stored in three ordinary SQLite tables with names derived from the name of the R*Tree. These three tables are called &quot;&lt;a href=&quot;vtab#xshadowname&quot;&gt;shadow tables&lt;/a&gt;&quot;. This is their schema:</source>
          <target state="translated">R * Treeインデックスの内容は、実際にはR * Treeの名前から派生した名前を持つ3つの通常のSQLiteテーブルに格納されます。これらの3つのテーブルは「&lt;a href=&quot;vtab#xshadowname&quot;&gt;シャドウテーブル&lt;/a&gt;」と呼ばれます。これは彼らのスキーマです：</target>
        </trans-unit>
        <trans-unit id="dd5b1eb070f31c8697b621bf1847b35fb7a8adaf" translate="yes" xml:space="preserve">
          <source>The content of each SQL table row is stored in the database file by first combining the values in the various columns into a byte array in the record format, then storing that byte array as the payload in an entry in the table b-tree. The order of values in the record is the same as the order of columns in the SQL table definition. When an SQL table includes an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column (which aliases the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;) then that column appears in the record as a NULL value. SQLite will always use the table b-tree key rather than the NULL value when referencing the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column.</source>
          <target state="translated">各SQLテーブル行の内容は、最初にさまざまな列の値をレコード形式のバイト配列に結合し、次にそのバイト配列をペイロードとしてテーブルbツリーのエントリに格納することにより、データベースファイルに格納されます。レコード内の値の順序は、SQLテーブル定義の列の順序と同じです。 SQLテーブルに&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列（&lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWIDの&lt;/a&gt;エイリアス）が含まれている場合、その列はNULL値としてレコードに表示されます。 SQLiteは、&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;列を参照するときに、NULL値ではなく常にテーブルのBツリーキーを使用します。</target>
        </trans-unit>
        <trans-unit id="71920b63c9e6445164e490bc0f251a06d6bb693f" translate="yes" xml:space="preserve">
          <source>The content of each rollback journal is flushed to disk both before and after the master journal filename is written into the rollback journal header. It is important to do both of these flushes. Fortunately, the second flush is usually inexpensive since typically only a single page of the journal file (the first page) has changed.</source>
          <target state="translated">各ロールバックジャーナルの内容は、マスタージャーナルのファイル名がロールバックジャーナルヘッダに書き込まれる前と後の両方でディスクにフラッシュされます。この両方のフラッシュを行うことが重要です。幸いなことに、2回目のフラッシュは通常、ジャーナルファイルの1ページ(最初のページ)だけが変更されるため、コストがかかりません。</target>
        </trans-unit>
        <trans-unit id="2c74d571015e1e1c51708cccb3ac9a7ab08632cc" translate="yes" xml:space="preserve">
          <source>The content of each rollback journal is flushed to disk both before and after the super-journal filename is written into the rollback journal header. It is important to do both of these flushes. Fortunately, the second flush is usually inexpensive since typically only a single page of the journal file (the first page) has changed.</source>
          <target state="translated">各ロールバックジャーナルの内容は、スーパージャーナルのファイル名がロールバックジャーナルヘッダに書き込まれる前と後の両方でディスクにフラッシュされます。この両方のフラッシュを行うことが重要です。幸いなことに、2回目のフラッシュは通常、ジャーナルファイルの1ページ(最初のページ)だけが変更されるため、コストがかかりません。</target>
        </trans-unit>
        <trans-unit id="39b372f8730aa69db1fd10c964b137259496c534" translate="yes" xml:space="preserve">
          <source>The content of each slide could still be stored as compressed XML. But now each page is stored separately. So when opening a new document, the application could simply run:</source>
          <target state="translated">各スライドの内容は、まだ圧縮されたXMLとして保存することができました。しかし、今では各ページは別々に保存されています。だから、新しいドキュメントを開くときに、アプリケーションは単に実行することができました。</target>
        </trans-unit>
        <trans-unit id="ef2de54ba7f62420a379fc46c4ab7cf3080ae413" translate="yes" xml:space="preserve">
          <source>The content of the statistics tables can be queried using &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; and can be changed using the &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;, &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;, and &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; commands. The &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; command works on statistics tables as of SQLite version 3.7.9. (2011-11-01) The &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE&lt;/a&gt; command does not work on statistics tables. Appropriate care should be used when changing the content of the statistics tables as invalid content can cause SQLite to select inefficient query plans. Generally speaking, one should not modify the content of the statistics tables by any mechanism other than invoking the ANALYZE command. See &quot;&lt;a href=&quot;optoverview#manctrl&quot;&gt;Manual Control Of Query Plans Using SQLITE_STAT Tables&lt;/a&gt;&quot; for further information.</source>
          <target state="translated">統計テーブルの内容は、&lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;を使用して照会でき、&lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;、&lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;、および&lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt;コマンドを使用して変更できます。&lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLEの&lt;/a&gt;コマンドはSQLiteバージョン3.7.9のよう統計表上で動作します。 （2011-11-01）&lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE&lt;/a&gt;コマンドは統計テーブルでは機能しません。統計テーブルのコンテンツを変更する場合は、無効なコンテンツが原因でSQLiteが非効率的なクエリプランを選択する可能性があるため、適切な注意が必要です。一般的に言えば、ANALYZEコマンドを呼び出す以外のメカニズムで統計テーブルの内容を変更しないでください。詳細については、「&lt;a href=&quot;optoverview#manctrl&quot;&gt;SQLITE_STATテーブルを使用したクエリプランの手動制御&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb0bc8e6cf7e707512464168a8333cd25f0f7228" translate="yes" xml:space="preserve">
          <source>The content option allows FTS4 to forego storing the text being indexed. The content option can be used in two ways:</source>
          <target state="translated">内容オプシ ョ ンは、 FTS4 が イ ンデ ッ ク ス さ れてい る テ キ ス ト を保存 し ない よ う にす る こ と を可能に し ます。content オプシ ョ ンは 2 つの方法で使えます。</target>
        </trans-unit>
        <trans-unit id="50fd4cd87f476ff7994844fe209f20e1e61a3e92" translate="yes" xml:space="preserve">
          <source>The content table may also be queried as follows:</source>
          <target state="translated">また、コンテンツテーブルは、以下のように問い合わせてもよい。</target>
        </trans-unit>
        <trans-unit id="43da535bae3bfe186441cea4bad1d427988c63d1" translate="yes" xml:space="preserve">
          <source>The contents of a changeset may be traversed using an iterator created using the &lt;a href=&quot;#sqlite3changeset_start&quot;&gt;sqlite3changeset_start()&lt;/a&gt; API. A changeset may be applied to a database with a compatible schema using the &lt;a href=&quot;#sqlite3changeset_apply&quot;&gt;sqlite3changeset_apply()&lt;/a&gt; API.</source>
          <target state="translated">変更セットの内容は、&lt;a href=&quot;#sqlite3changeset_start&quot;&gt;sqlite3changeset_start（）&lt;/a&gt; API を使用して作成されたイテレーターを使用してトラバースできます。変更セットは、&lt;a href=&quot;#sqlite3changeset_apply&quot;&gt;sqlite3changeset_apply（）&lt;/a&gt; API を使用して、互換性のあるスキーマを持つデータベースに適用できます。</target>
        </trans-unit>
        <trans-unit id="d1fc4719b451a2f189cbf09b3af719ceaa1455fd" translate="yes" xml:space="preserve">
          <source>The contents of a changeset may be traversed using an iterator created using the &lt;a href=&quot;sqlite3changeset_start&quot;&gt;sqlite3changeset_start()&lt;/a&gt; API. A changeset may be applied to a database with a compatible schema using the &lt;a href=&quot;sqlite3changeset_apply&quot;&gt;sqlite3changeset_apply()&lt;/a&gt; API.</source>
          <target state="translated">変更セットの内容は、&lt;a href=&quot;sqlite3changeset_start&quot;&gt;sqlite3changeset_start（）&lt;/a&gt; API を使用して作成されたイテレーターを使用してトラバースできます。変更セットは、&lt;a href=&quot;sqlite3changeset_apply&quot;&gt;sqlite3changeset_apply（）&lt;/a&gt; API を使用して、互換性のあるスキーマを持つデータベースに適用できます。</target>
        </trans-unit>
        <trans-unit id="17197a14b8f9ff583e2fbe7ec6a33d12aff2f981" translate="yes" xml:space="preserve">
          <source>The contents of an SQLite database file are formatted as a set of fixed size pages. See</source>
          <target state="translated">SQLite データベースファイルの内容は、固定サイズのページのセットとしてフォーマットされています。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="6741b03ffce89c3a2ca3addb1cadccc791915ce5" translate="yes" xml:space="preserve">
          <source>The contents of columns qualified with the UNINDEXED column option are not added to the FTS index. This means that for the purposes of MATCH queries and &lt;a href=&quot;fts5#_auxiliary_functions_&quot;&gt;FTS5 auxiliary functions&lt;/a&gt;, the column contains no matchable tokens.</source>
          <target state="translated">UNINDEXED列オプションで修飾された列の内容は、FTSインデックスに追加されません。これは、MATCHクエリと&lt;a href=&quot;fts5#_auxiliary_functions_&quot;&gt;FTS5補助関数&lt;/a&gt;の目的で、列に一致するトークンが含まれていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="f4381b2c97365bdc1448864c183789c2d75a4c76" translate="yes" xml:space="preserve">
          <source>The contents of the logical full-text index is found by merging the contents of all segment b-trees. If a term is present in more than one segment b-tree, then it maps to the union of each individual doclist. If, for a single term, the same docid occurs in more than one doclist, then only the doclist that is part of the most recently created segment b-tree is considered valid.</source>
          <target state="translated">論理的な全文インデックスの内容は、すべてのセグメント b-tree の内容をマージすることで発見されます。ある用語が複数のセグメント b ツリーに存在する場合、それは各個別の doclist の和にマッピングされます。一つの用語について、同じ docid が複数の doclist に存在する場合は、最近作成されたセグメント b ツリーの一部である doclist のみが有効とみなされます。</target>
        </trans-unit>
        <trans-unit id="603ef17ea7e8b979fdc97587b739002125ee3a17" translate="yes" xml:space="preserve">
          <source>The contents of the sqlite3_pcache_methods2 structure are copied to an internal buffer by SQLite within the call to &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config&lt;/a&gt;. Hence the application may discard the parameter after the call to &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; returns.</source>
          <target state="translated">sqlite3_pcache_methods2構造の内容は、への呼び出し内のSQLiteによって内部バッファにコピーされ&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config&lt;/a&gt;。したがって、&lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config（）&lt;/a&gt;への呼び出しが戻った後、アプリケーションはパラメーターを破棄する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d33c4566f4b0045dff066d31694e73d46d2bf6db" translate="yes" xml:space="preserve">
          <source>The contents of the sqlite3_pcache_methods2 structure are copied to an internal buffer by SQLite within the call to &lt;a href=&quot;config&quot;&gt;sqlite3_config&lt;/a&gt;. Hence the application may discard the parameter after the call to &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; returns.</source>
          <target state="translated">sqlite3_pcache_methods2構造の内容は、への呼び出し内のSQLiteによって内部バッファにコピーされ&lt;a href=&quot;config&quot;&gt;sqlite3_config&lt;/a&gt;。したがって、&lt;a href=&quot;config&quot;&gt;sqlite3_config（）&lt;/a&gt;への呼び出しが戻った後、アプリケーションはパラメーターを破棄する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e184948fbfc41a2f2c0c14809d37c70c80c03a2" translate="yes" xml:space="preserve">
          <source>The context in which an SQL function executes is stored in an sqlite3_context object. A pointer to an sqlite3_context object is always first parameter to &lt;a href=&quot;#sqlite3_create_function&quot;&gt;application-defined SQL functions&lt;/a&gt;. The application-defined SQL function implementation will pass this pointer through into calls to &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_aggregate_context&quot;&gt;sqlite3_aggregate_context()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_user_data&quot;&gt;sqlite3_user_data()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_context_db_handle&quot;&gt;sqlite3_context_db_handle()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_get_auxdata()&lt;/a&gt;, and/or &lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_set_auxdata()&lt;/a&gt;.</source>
          <target state="translated">SQL関数が実行されるコンテキストは、sqlite3_contextオブジェクトに格納されます。sqlite3_contextオブジェクトへのポインターは、常に&lt;a href=&quot;#sqlite3_create_function&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;への最初のパラメーターです。アプリケーション定義のSQL関数実装は、このポインターを&lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_aggregate_context&quot;&gt;sqlite3_aggregate_context（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_user_data&quot;&gt;sqlite3_user_data（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_context_db_handle&quot;&gt;sqlite3_context_db_handle（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_get_auxdata（）&lt;/a&gt;、または&lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_set_auxdata（）&lt;/a&gt;への呼び出しに渡します。</target>
        </trans-unit>
        <trans-unit id="eb189ce529b8d7d0045783021bb7d8fd77526437" translate="yes" xml:space="preserve">
          <source>The context in which an SQL function executes is stored in an sqlite3_context object. A pointer to an sqlite3_context object is always first parameter to &lt;a href=&quot;../appfunc&quot;&gt;application-defined SQL functions&lt;/a&gt;. The application-defined SQL function implementation will pass this pointer through into calls to &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result()&lt;/a&gt;, &lt;a href=&quot;aggregate_context&quot;&gt;sqlite3_aggregate_context()&lt;/a&gt;, &lt;a href=&quot;user_data&quot;&gt;sqlite3_user_data()&lt;/a&gt;, &lt;a href=&quot;context_db_handle&quot;&gt;sqlite3_context_db_handle()&lt;/a&gt;, &lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_get_auxdata()&lt;/a&gt;, and/or &lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_set_auxdata()&lt;/a&gt;.</source>
          <target state="translated">SQL関数が実行されるコンテキストは、sqlite3_contextオブジェクトに格納されます。sqlite3_contextオブジェクトへのポインターは、常に&lt;a href=&quot;../appfunc&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;への最初のパラメーターです。アプリケーション定義のSQL関数の実装は、このポインターを&lt;a href=&quot;result_blob&quot;&gt;sqlite3_result（）&lt;/a&gt;、&lt;a href=&quot;aggregate_context&quot;&gt;sqlite3_aggregate_context（）&lt;/a&gt;、&lt;a href=&quot;user_data&quot;&gt;sqlite3_user_data（）&lt;/a&gt;、&lt;a href=&quot;context_db_handle&quot;&gt;sqlite3_context_db_handle（）&lt;/a&gt;、&lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_get_auxdata（）&lt;/a&gt;、および/または&lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_set_auxdata（）の呼び出しに渡し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="53fb8a37d043abdf36747b3ab57dd8a44c62d486" translate="yes" xml:space="preserve">
          <source>The context in which an SQL function executes is stored in an sqlite3_context object. A pointer to an sqlite3_context object is always first parameter to &lt;a href=&quot;appfunc&quot;&gt;application-defined SQL functions&lt;/a&gt;. The application-defined SQL function implementation will pass this pointer through into calls to &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_aggregate_context&quot;&gt;sqlite3_aggregate_context()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_user_data&quot;&gt;sqlite3_user_data()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_context_db_handle&quot;&gt;sqlite3_context_db_handle()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_get_auxdata()&lt;/a&gt;, and/or &lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_set_auxdata()&lt;/a&gt;.</source>
          <target state="translated">SQL関数が実行されるコンテキストは、sqlite3_contextオブジェクトに格納されます。sqlite3_contextオブジェクトへのポインターは、常に&lt;a href=&quot;appfunc&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;への最初のパラメーターです。アプリケーション定義のSQL関数の実装は、このポインターを&lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_aggregate_context&quot;&gt;sqlite3_aggregate_context（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_user_data&quot;&gt;sqlite3_user_data（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_context_db_handle&quot;&gt;sqlite3_context_db_handle（）&lt;/a&gt;、&lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_get_auxdata（）&lt;/a&gt;、および/または&lt;a href=&quot;#sqlite3_get_auxdata&quot;&gt;sqlite3_set_auxdata（）の呼び出しに渡し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f7c0cad9919ee775dcafe683809a8efa13aeacfd" translate="yes" xml:space="preserve">
          <source>The context in which an SQL function executes is stored in an sqlite3_context object. A pointer to an sqlite3_context object is always first parameter to &lt;a href=&quot;create_function&quot;&gt;application-defined SQL functions&lt;/a&gt;. The application-defined SQL function implementation will pass this pointer through into calls to &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result()&lt;/a&gt;, &lt;a href=&quot;aggregate_context&quot;&gt;sqlite3_aggregate_context()&lt;/a&gt;, &lt;a href=&quot;user_data&quot;&gt;sqlite3_user_data()&lt;/a&gt;, &lt;a href=&quot;context_db_handle&quot;&gt;sqlite3_context_db_handle()&lt;/a&gt;, &lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_get_auxdata()&lt;/a&gt;, and/or &lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_set_auxdata()&lt;/a&gt;.</source>
          <target state="translated">SQL関数が実行されるコンテキストは、sqlite3_contextオブジェクトに格納されます。sqlite3_contextオブジェクトへのポインターは、常に&lt;a href=&quot;create_function&quot;&gt;アプリケーション定義のSQL関数&lt;/a&gt;への最初のパラメーターです。アプリケーション定義のSQL関数実装は、このポインターを&lt;a href=&quot;result_blob&quot;&gt;sqlite3_result（）&lt;/a&gt;、&lt;a href=&quot;aggregate_context&quot;&gt;sqlite3_aggregate_context（）&lt;/a&gt;、&lt;a href=&quot;user_data&quot;&gt;sqlite3_user_data（）&lt;/a&gt;、&lt;a href=&quot;context_db_handle&quot;&gt;sqlite3_context_db_handle（）&lt;/a&gt;、&lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_get_auxdata（）&lt;/a&gt;、または&lt;a href=&quot;get_auxdata&quot;&gt;sqlite3_set_auxdata（）&lt;/a&gt;への呼び出しに渡します。</target>
        </trans-unit>
        <trans-unit id="2dc88bed6dbd7abe62664d54e6bdaf4f83cf04fb" translate="yes" xml:space="preserve">
          <source>The copy is edited to change the branch instruction into either a no-op or an unconditional jump.</source>
          <target state="translated">コピーを編集して、分岐命令を無停止または無条件ジャンプに変更します。</target>
        </trans-unit>
        <trans-unit id="cb1935e51d150180f58869cd5c4365f67de7c57a" translate="yes" xml:space="preserve">
          <source>The copy method implements similar functionality to the &lt;b&gt;.import&lt;/b&gt; SQLite shell command.</source>
          <target state="translated">copyメソッドは、&lt;b&gt;.import&lt;/b&gt; SQLiteシェルコマンドと同様の機能を実装します。</target>
        </trans-unit>
        <trans-unit id="7d3c9b74d67dc166ca8e07aaa910e143f4d6cf96" translate="yes" xml:space="preserve">
          <source>The copy of sqlite3.s is assembled into sqlite3.o then linked again th3.o to generate the &quot;th3&quot; executable.</source>
          <target state="translated">sqlite3.sのコピーをsqlite3.oに組み立て、th3.oをリンクして &quot;th3 &quot;の実行ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="b047a98a10f78ed2613ab80ee6fd529ee912f70f" translate="yes" xml:space="preserve">
          <source>The core functions shown below are available by default. &lt;a href=&quot;lang_datefunc&quot;&gt;Date &amp;amp; Time functions&lt;/a&gt;, &lt;a href=&quot;lang_aggfunc&quot;&gt;aggregate functions&lt;/a&gt;, &lt;a href=&quot;windowfunctions#biwinfunc&quot;&gt;window functions&lt;/a&gt;, and &lt;a href=&quot;json1&quot;&gt;JSON functions&lt;/a&gt; are documented separately. An application may define additional functions written in C and added to the database engine using the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; API.</source>
          <target state="translated">以下に示すコア機能は、デフォルトで使用可能です。&lt;a href=&quot;lang_datefunc&quot;&gt;日付と時刻の関数&lt;/a&gt;、&lt;a href=&quot;lang_aggfunc&quot;&gt;集計関数&lt;/a&gt;、&lt;a href=&quot;windowfunctions#biwinfunc&quot;&gt;ウィンドウ関数&lt;/a&gt;、&lt;a href=&quot;json1&quot;&gt;JSON関数&lt;/a&gt;については、個別に説明しています。アプリケーションは、Cで記述され、&lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function（）&lt;/a&gt; API を使用してデータベースエンジンに追加される追加の関数を定義できます。</target>
        </trans-unit>
        <trans-unit id="a7002ce76e139b64c91049472e1737291c84c664" translate="yes" xml:space="preserve">
          <source>The core idea is to create a special table (named &quot;UNDOLOG&quot; in the example) that holds information needed to undo/redo changes to the database. For each class (table) in the database that wants to participate in the undo/redo, triggers are created that cause entries to be made in the UNDOLOG table for each DELETE, INSERT, and UPDATE of the participating class. The UNDOLOG entries consist of ordinary SQL statements the can be played back to reverse the changes.</source>
          <target state="translated">中心となるのは、データベースの変更を元に戻したり、やり直したりするために必要な情報を保持する特別なテーブル(この例では &quot;UNDOLOG &quot;という名前)を作成することです。元に戻す/やり直しに参加したいデータベースの各クラス(テーブル)に対して、参加しているクラスのDELETE、INSERT、UPDATEごとにUNDOLOGテーブルにエントリを作成するトリガーを作成します。UNDOLOGのエントリは通常のSQL文で構成されており、変更を元に戻すために再生することができます。</target>
        </trans-unit>
        <trans-unit id="b4619c14d9f61ffdd467d39188a12cbd3dab6b8b" translate="yes" xml:space="preserve">
          <source>The core of a SELECT statement is a &quot;simple SELECT&quot; shown by the &lt;a href=&quot;syntax/select-core&quot;&gt;select-core&lt;/a&gt; and &lt;a href=&quot;syntax/simple-select-stmt&quot;&gt;simple-select-stmt&lt;/a&gt; syntax diagrams below. In practice, most SELECT statements are simple SELECT statements.</source>
          <target state="translated">SELECTステートメントのコアは、以下の&lt;a href=&quot;syntax/select-core&quot;&gt;select-core&lt;/a&gt;および&lt;a href=&quot;syntax/simple-select-stmt&quot;&gt;simple-select-stmt&lt;/a&gt;構文図で示されている「単純なSELECT」です。実際には、ほとんどのSELECTステートメントは単純なSELECTステートメントです。</target>
        </trans-unit>
        <trans-unit id="202f127cc642aea639fbf4c524ee9db3a310c986" translate="yes" xml:space="preserve">
          <source>The core query used to generate the branch timeline is shown below. (Readers are not expected to understand the details of this query. Commentary will follow.)</source>
          <target state="translated">ブランチタイムラインを生成するために使用されるコアクエリを以下に示します。(読者はこのクエリの詳細を理解する必要はありません。解説は後ほど)</target>
        </trans-unit>
        <trans-unit id="ca59f51d09381d1b3447776404c915b9169882ab" translate="yes" xml:space="preserve">
          <source>The core string formatting routine is the sqlite3VXPrintf() function found in the &lt;a href=&quot;https://sqlite.org/src/file/src/printf.c&quot;&gt;printf.c&lt;/a&gt; source file. All the various interfaces invoke (sometimes indirectly) this one core function. The sqlite3VXPrintf() function began as code written by the first author of SQLite (&lt;a href=&quot;https://sqlite.org/crew.html&quot;&gt;Hipp&lt;/a&gt;) when he was a graduate student a Duke University in the late 1980s. Hipp kept this printf() implementation in his personal toolbox until he started working on SQLite in 2000. The code was incorporated into the SQLite source tree on &lt;a href=&quot;https://sqlite.org/src/timeline?c=f9372072a6&quot;&gt;2000-10-08&lt;/a&gt; for SQLite version 1.0.9.</source>
          <target state="translated">コア文字列フォーマットルーチンは、&lt;a href=&quot;https://sqlite.org/src/file/src/printf.c&quot;&gt;printf.c&lt;/a&gt;ソースファイルにあるsqlite3VXPrintf（）関数です。さまざまなインターフェースすべてが、この1つのコア機能を（時には間接的に）呼び出します。 sqlite3VXPrintf（）関数は、SQLiteの最初の作者（&lt;a href=&quot;https://sqlite.org/crew.html&quot;&gt;Hipp&lt;/a&gt;）が1980年代後半にデューク大学の大学院生であったときにコードとして書き始めました。 Hippは、2000年にSQLiteの作業を開始するまで、このprintf（）実装を自分のツールボックスに保持しました。コードは、SQLiteバージョン&lt;a href=&quot;https://sqlite.org/src/timeline?c=f9372072a6&quot;&gt;1.0.9の2000-10-08に&lt;/a&gt; SQLiteソースツリーに組み込まれました。</target>
        </trans-unit>
        <trans-unit id="093b78a42e1ecfed114ac694aeda4be18d47e5e9" translate="yes" xml:space="preserve">
          <source>The cost table can be named anything you want - it does not have to be called &quot;editcost&quot;. And the table can contain additional columns. The only requirement is that the table must contain the four columns show above, with exactly the names shown.</source>
          <target state="translated">コストテーブルには、好きな名前をつけることができます-&quot;editcost &quot;という名前である必要はありません。そして、テーブルには追加のカラムを含めることができます。唯一の要件は、上記の4つのカラムをテーブルに含まなければならないということです。</target>
        </trans-unit>
        <trans-unit id="ab3b915916ad100c2de3d193cbc3d8e54968ac9c" translate="yes" xml:space="preserve">
          <source>The costs are comprised of multiple numbers, not a single number as shown in the graph. SQLite computes several different estimated costs for each loop that apply at different times. For example, there is a &quot;setup&quot; cost that is incurred just once when the query starts. The setup cost is the cost of computing an &lt;a href=&quot;optoverview#autoindex&quot;&gt;automatic index&lt;/a&gt; for a table that does not already have an index. Then there is the cost of running each step of the loop. Finally, there is an estimate of the number rows generated by the loop, which is information needed in estimating the costs of inner loops. Sorting costs may come into play if the query has an ORDER BY clause.</source>
          <target state="translated">コストは、グラフに示されている単一の数値ではなく、複数の数値で構成されています。 SQLiteは、ループごとに異なる時間に適用されるいくつかの異なる推定コストを計算します。たとえば、クエリの開始時に一度だけ発生する「セットアップ」コストがあります。セットアップコストは、まだインデックスを持たないテーブルの&lt;a href=&quot;optoverview#autoindex&quot;&gt;自動インデックス&lt;/a&gt;を計算するコストです。次に、ループの各ステップを実行するコストがあります。最後に、ループによって生成された行数の見積もりがあります。これは、内部ループのコストを見積もるのに必要な情報です。クエリにORDER BY句がある場合、並べ替えコストが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="19bc3b9522f26a7b0a814b17b06d2223be3c56f5" translate="yes" xml:space="preserve">
          <source>The count(X) function returns a count of the number of times that</source>
          <target state="translated">count(X)関数は</target>
        </trans-unit>
        <trans-unit id="8e9bf7bdd6a7e80adbfe374cd14df21073d0a490" translate="yes" xml:space="preserve">
          <source>The countStep() callback is invoked once for each row in the aggregate. As you can see, the count is incremented if either there are no arguments, or if the one argument is not NULL.</source>
          <target state="translated">countStep()コールバックは、集計対象の各行に対して一度だけ呼び出されます。ご覧のように、引数がない場合、または引数がNULLでない場合にカウントが増加します。</target>
        </trans-unit>
        <trans-unit id="e3944d86225bf50f66350ca2264ab4a84abeb87d" translate="yes" xml:space="preserve">
          <source>The cov1 test set used to obtain 100% branch test coverage are only a subset of the tests currently implemented using TH3. New test modules are added on a regular basis.</source>
          <target state="translated">100% ブランチテストのカバレッジを得るために使用されている cov1 テストセットは、TH3 を使用して現在実装されているテストのサブセットに過ぎません。新しいテストモジュールは定期的に追加されています。</target>
        </trans-unit>
        <trans-unit id="d677c2d682d4dade2e8fc2faf6167d79dbe61f08" translate="yes" xml:space="preserve">
          <source>The crash tests in SQLite have discovered a number of very subtle bugs (now fixed) in the recovery mechanism. Some of these bugs were very obscure and unlikely to have been found using only code inspection and analysis techniques. From this experience, the developers of SQLite feel confident that any other database system that does not use a similar crash test system likely contains undetected bugs that will lead to database corruption following a system crash or power failure.</source>
          <target state="translated">SQLiteのクラッシュテストでは、リカバリ機構に非常に微妙なバグがいくつか発見されました(現在は修正されています)。これらのバグの中には非常に不明瞭なものもあり、コードの検査や解析技術だけでは発見できそうにないものもありました。この経験から、SQLiteの開発者は、同様のクラッシュテストシステムを使用していない他のデータベースシステムには、システムクラッシュや停電の後にデータベースが破損するような未検出のバグが含まれている可能性が高いと確信しています。</target>
        </trans-unit>
        <trans-unit id="33ac0d26d4e9c7d412c89e095055cacaebdbb563" translate="yes" xml:space="preserve">
          <source>The cumulative distribution. Calculated as</source>
          <target state="translated">累積分布です として計算されます。</target>
        </trans-unit>
        <trans-unit id="9f3f4c9ed1a83693cad288a8dbbe975dd262d497" translate="yes" xml:space="preserve">
          <source>The current implementation of SQLite uses only loop joins. That is to say, joins are implemented as nested loops.</source>
          <target state="translated">現在のSQLiteの実装では、ループ結合のみを使用しています。つまり、結合は入れ子になったループとして実装されています。</target>
        </trans-unit>
        <trans-unit id="0595dd468ba4f2594b89c18514e0ce47ff0d0c46" translate="yes" xml:space="preserve">
          <source>The current implementation of this JSON library uses a recursive descent parser. In order to avoid using excess stack space, any JSON input that has more than 2000 levels of nesting is considered invalid. Limits on nesting depth are allowed for compatible implementations of JSON by &lt;a href=&quot;https://tools.ietf.org/html/rfc7159#section-9&quot;&gt;RFC-7159 section 9&lt;/a&gt;.</source>
          <target state="translated">このJSONライブラリの現在の実装では、再帰的降下パーサーが使用されています。過剰なスタックスペースの使用を回避するために、入れ子のレベルが2000を超えるJSON入力は無効と見なされます。&lt;a href=&quot;https://tools.ietf.org/html/rfc7159#section-9&quot;&gt;RFC-7159セクション9&lt;/a&gt;により、JSONの互換性のある実装に対してネスト深度の制限が許可されています。</target>
        </trans-unit>
        <trans-unit id="1859423b8976d8bfae8dfc344c1935671c660093" translate="yes" xml:space="preserve">
          <source>The current implementation will only support a string or BLOB length up to 2&lt;small&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/small&gt;-1 or 2147483647. And some built-in functions such as hex() might fail well before that point. In security-sensitive applications it is best not to try to increase the maximum string and blob length. In fact, you might do well to lower the maximum string and blob length to something more in the range of a few million if that is possible.</source>
          <target state="translated">現在の実装では、2 &lt;small&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/small&gt; -1または2147483647 までの文字列またはBLOBの長さのみがサポートされます。また、hex（）などの一部の組み込み関数は、その時点よりかなり前に失敗する可能性があります。セキュリティを重視するアプリケーションでは、文字列とBLOBの最大長を増やそうとしないのが最善です。実際、可能であれば、文字列とBLOBの最大長を数百万の範囲に減らすことができます。</target>
        </trans-unit>
        <trans-unit id="ce671671108a214d3061700585cfbe08230e46de" translate="yes" xml:space="preserve">
          <source>The current row. For RANGE and GROUPS frame types, peers of the current row are also included in the frame, unless specifically excluded by the EXCLUDE clause. This is true regardless of whether CURRENT ROW is used as the starting or ending frame boundary.</source>
          <target state="translated">現在の行。RANGEおよびGROUPSフレームタイプの場合、EXCLUDE句によって特に除外されない限り、現在の行のピアもフレームに含まれます。これは、CURRENT ROWがフレームの開始または終了の境界として使用されているかどうかにかかわらず、真です。</target>
        </trans-unit>
        <trans-unit id="bd2930f3fd3f6f19fc9ada96c54055098b67532e" translate="yes" xml:space="preserve">
          <source>The current value of the requested parameter is written into *pCur and the highest instantaneous value is written into *pHiwtr. If the resetFlg is true, then the highest instantaneous value is reset back down to the current value.</source>
          <target state="translated">要求されたパラメータの現在値が *pCur に書き込まれ、最高瞬間値が *pHiwtr に書き込まれます。resetFlgが真の場合、最高瞬間値は現在の値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="b3c10a59b750c785e72b4dc21d7b05d270490210" translate="yes" xml:space="preserve">
          <source>The current working directory (&quot;.&quot;)</source>
          <target state="translated">現在の作業ディレクトリ(&quot;.)</target>
        </trans-unit>
        <trans-unit id="34c8be248703e890d36c7a3af0b628d68ce8275b" translate="yes" xml:space="preserve">
          <source>The current writer concludes its transaction, OR</source>
          <target state="translated">現在のライターは、そのトランザクションを終了します。</target>
        </trans-unit>
        <trans-unit id="d429ef679ef6041cdac168ab25fbc584b8f7c9d4" translate="yes" xml:space="preserve">
          <source>The cycle above can be repeated many times. The diagram shows a third SQLite release, 3.6.17 in circle (6). The private branch maintainer can do another merge in order to incorporate the changes moving from (4) to (6) into the private branch, resulting in version (7).</source>
          <target state="translated">上記のサイクルを何度も繰り返すことができます。この図では、3番目のSQLiteリリースである3.6.17を円(6)で示しています。プライベートブランチのメンテナは、(4)から(6)に移動した変更をプライベートブランチに組み込むために、別のマージを行うことができ、結果としてバージョン(7)が得られます。</target>
        </trans-unit>
        <trans-unit id="8810808ac8350e84a24599fba1a1c44e6d0fc9da" translate="yes" xml:space="preserve">
          <source>The cycle counts provided by cachegrind are a good proxy for actual performance, but they are not 100% accurate.</source>
          <target state="translated">cachegrindが提供するサイクルカウントは実際のパフォーマンスの良い代理ですが、100%正確ではありません。</target>
        </trans-unit>
        <trans-unit id="fac9319a6ade67af6ca8dc4d7c432433a5c8d584" translate="yes" xml:space="preserve">
          <source>The data and method columns may also be set as described for an INSERT above.</source>
          <target state="translated">また、データ列とメソッド列は、上記のINSERTで説明したように設定することもできます。</target>
        </trans-unit>
        <trans-unit id="062b3a0f8f6a4c6911f0379b0878b031acaf0a51" translate="yes" xml:space="preserve">
          <source>The data for a table b-tree leaf page and the key of an index b-tree page was characterized above as an arbitrary sequence of bytes. The prior discussion mentioned one key being less than another, but did not define what &quot;less than&quot; meant. The current section will address these omissions.</source>
          <target state="translated">テーブルb-treeリーフページのデータとインデックスb-treeページのキーは、任意のバイト列として上記で特徴付けられていた。先の議論では、あるキーが別のキーよりも小さいことに言及していたが、&quot;less than &quot;が何を意味するのかを定義していなかった。現在のセクションでは、これらの省略に対処する。</target>
        </trans-unit>
        <trans-unit id="b9c10539b9c59116b81ff7089713236e6e1327e8" translate="yes" xml:space="preserve">
          <source>The data for rowid tables is stored as a B-Tree structure containing one entry for each table row, using the rowid value as the key. This means that retrieving or sorting records by rowid is fast. Searching for a record with a specific rowid, or for all records with rowids within a specified range is around twice as fast as a similar search made by specifying any other PRIMARY KEY or indexed value.</source>
          <target state="translated">rowidテーブルのデータは、rowid値をキーにして、テーブルの行ごとに1つのエントリを含むB-Tree構造として格納されます。このため、rowid によるレコードの検索やソートが高速に行えます。特定の rowid を持つレコード、または指定した範囲内の rowid を持つすべてのレコードを検索する場合は、他の PRIMARY KEY やインデックス値を指定して検索する場合に比べて約 2 倍の速度で検索できます。</target>
        </trans-unit>
        <trans-unit id="8f8b09e33f29c0f7e2cdc53d761f0421d3f8a545" translate="yes" xml:space="preserve">
          <source>The data_% table must have all the same columns as the target table, plus one additional column named &quot;rbu_control&quot;. The data_% table should have no PRIMARY KEY or UNIQUE constraints, but each column should have the same type as the corresponding column in the target database. The rbu_control column should have no type at all. For example, if the target database contains:</source>
          <target state="translated">data_% テーブルには、ターゲット・テーブルと同じすべての列に加えて、&quot;rbu_control&quot; という名前の列が 1 つ追加されている必要があります。data_% テーブルには PRIMARY KEY 制約や UNIQUE 制約はありませんが、各列はターゲット・データベースの対応する列と同じ型を持つ必要があります。rbu_control カラムは全く型を持たない必要があります。例えば、ターゲット・データベースに</target>
        </trans-unit>
        <trans-unit id="17bee7a4a210b94f9cd35ef19e344d890d514950" translate="yes" xml:space="preserve">
          <source>The data_% tables may be created as follows:</source>
          <target state="translated">data_%テーブルは、以下のように作成することができます。</target>
        </trans-unit>
        <trans-unit id="d8fc42980131b74512111cf667ced537b6faec1f" translate="yes" xml:space="preserve">
          <source>The data_% tables themselves should have no PRIMARY KEY declarations. However, RBU is more efficient if reading the rows in from each data_% table in &quot;rowid&quot; order is roughly the same as reading them sorted by the PRIMARY KEY of the corresponding target database table. In other words, rows should be sorted using the destination table PRIMARY KEY fields before they are inserted into the data_% tables.</source>
          <target state="translated">data_%テーブル自体はPRIMARY KEY宣言を持たないはずです。しかし、RBUは、各data_%テーブルから &quot;rowid &quot;の順序で行を読み込むことが、対応するターゲット・データベース・テーブルのPRIMARY KEYでソートされた行を読み込むこととほぼ同じであれば、より効率的である。言い換えれば、行はdata_%テーブルに挿入される前に、宛先テーブルのPRIMARY KEYフィールドを使用してソートされるべきである。</target>
        </trans-unit>
        <trans-unit id="0e861495335228dd9715b8957c822d148379befb" translate="yes" xml:space="preserve">
          <source>The data_ccc table may then be populated as normal with the updates intended for target database table ccc. The same updates will be read by RBU from the data0_ccc_fts view and applied to FTS table ccc_fts. Because &quot;data0_ccc_fts&quot; is smaller than &quot;data_ccc&quot;, the FTS table will be updated first, as required.</source>
          <target state="translated">その後、data_cccテーブルには、通常通り、ターゲット・データベース・テーブルccc用の更新が入力されます。同じ更新は、RBUによってdata0_ccc_ftsビューから読み出され、FTSテーブルccc_ftsに適用されます。data0_ccc_fts」は「data_ccc」よりも小さいため、必要に応じてFTSテーブルが最初に更新される。</target>
        </trans-unit>
        <trans-unit id="7a9df4aba808f0f7f287daab1202c053d1ad5c81" translate="yes" xml:space="preserve">
          <source>The database being vacuumed may not be in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;.</source>
          <target state="translated">バキュームされるデータベースが&lt;a href=&quot;wal&quot;&gt;WALモード&lt;/a&gt;ではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="d1f84e31daf7f78443fa69ada7a9a8e535388ab9" translate="yes" xml:space="preserve">
          <source>The database connection can be changed between full and incremental autovacuum mode at any time. However, changing from &quot;none&quot; to &quot;full&quot; or &quot;incremental&quot; can only occur when the database is new (no tables have yet been created) or by running the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command. To change auto-vacuum modes, first use the auto_vacuum pragma to set the new desired mode, then invoke the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command to reorganize the entire database file. To change from &quot;full&quot; or &quot;incremental&quot; back to &quot;none&quot; always requires running &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; even on an empty database.</source>
          <target state="translated">データベース接続は、フルバキュームモードとインクリメンタル自動バキュームモードの間でいつでも変更できます。ただし、「none」から「full」または「incremental」への変更は、データベースが新しい場合（テーブルがまだ作成されていない場合）または&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;コマンドを実行したときにのみ発生します。自動バキュームモードを変更するには、最初にauto_vacuumプラグマを使用して新しい目的のモードを設定し、次に&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;コマンドを呼び出してデータベースファイル全体を再編成します。「フル」または「インクリメンタル」から「なし」に戻すには、空のデータベースでも常に&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUMを&lt;/a&gt;実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e8669da1288d64c48a1d4da77efa2cfbe93e717" translate="yes" xml:space="preserve">
          <source>The database connection is opened using the &lt;a href=&quot;uri#uriimmutable&quot;&gt;immutable query parameter&lt;/a&gt;.</source>
          <target state="translated">データベース接続は、&lt;a href=&quot;uri#uriimmutable&quot;&gt;不変のクエリパラメータ&lt;/a&gt;を使用して開かれます。</target>
        </trans-unit>
        <trans-unit id="17dc502f4a596e5beade9b059c41722a7380dd5f" translate="yes" xml:space="preserve">
          <source>The database file format is unchanged for WAL mode. However, the WAL file and the &lt;a href=&quot;walformat#shm&quot;&gt;wal-index&lt;/a&gt; are new concepts and so older versions of SQLite will not know how to recover a crashed SQLite database that was operating in WAL mode when the crash occurred. To prevent older versions of SQLite (prior to version 3.7.0, 2010-07-22) from trying to recover a WAL-mode database (and making matters worse) the database file format version numbers (bytes 18 and 19 in the &lt;a href=&quot;fileformat2#database_header&quot;&gt;database header&lt;/a&gt;) are increased from 1 to 2 in WAL mode. Thus, if an older version of SQLite attempts to connect to an SQLite database that is operating in WAL mode, it will report an error along the lines of &quot;file is encrypted or is not a database&quot;.</source>
          <target state="translated">WALモードのデータベースファイル形式は変更されていません。ただし、WALファイルと&lt;a href=&quot;walformat#shm&quot;&gt;wal-index&lt;/a&gt;は新しい概念であるため、SQLiteの古いバージョンでは、クラッシュが発生したときにWALモードで動作していたクラッシュしたSQLiteデータベースを回復する方法がわかりません。SQLiteの古いバージョン（バージョン3.7.0、2010-07-22より前）がWALモードのデータベースを回復しようとする（さらに悪いことに）のを防ぐには、データベースファイル形式のバージョン番号（&lt;a href=&quot;fileformat2#database_header&quot;&gt;データベースヘッダーの&lt;/a&gt;バイト18および19））は、WALモードで1から2に増加します。したがって、古いバージョンのSQLiteがWALモードで動作しているSQLiteデータベースに接続しようとすると、「ファイルが暗号化されているか、データベースではない」というエラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="9c1329ad6c1d5d5a9b13da19601459b465ae67ba" translate="yes" xml:space="preserve">
          <source>The database file format is unchanged.</source>
          <target state="translated">データベースのファイル形式は変更されていません。</target>
        </trans-unit>
        <trans-unit id="1d07edfc3d0d439a4f2d02bad68d889bf985841b" translate="yes" xml:space="preserve">
          <source>The database file header</source>
          <target state="translated">データベースファイルのヘッダ</target>
        </trans-unit>
        <trans-unit id="042540519692f217502c3ae945ec1187e2e057d0" translate="yes" xml:space="preserve">
          <source>The database file is synced to ensure that all updates are stored safely on the persistent media.</source>
          <target state="translated">データベースファイルは、すべての更新が永続的なメディアに安全に保存されるように同期されます。</target>
        </trans-unit>
        <trans-unit id="e23d0cd874d4749bf56cbe1f6d077df68f5dc7f5" translate="yes" xml:space="preserve">
          <source>The database file is unlocked.</source>
          <target state="translated">データベースファイルのロックが解除されています。</target>
        </trans-unit>
        <trans-unit id="0b3f3d4ba2117afe864ef2e2e3855b3dd6cb1ace" translate="yes" xml:space="preserve">
          <source>The database filename is not allowed to be a symbolic link</source>
          <target state="translated">データベースのファイル名はシンボリックリンクにすることはできません。</target>
        </trans-unit>
        <trans-unit id="6f5b1b36f625c53227300ca5232e63d1f84ef897" translate="yes" xml:space="preserve">
          <source>The database for TEMP tables is not created until it is needed.</source>
          <target state="translated">TEMPテーブル用のデータベースは必要になるまで作成されません。</target>
        </trans-unit>
        <trans-unit id="0bdbc9610964d617ffff9c05691c3e95d705203e" translate="yes" xml:space="preserve">
          <source>The database handle must not be in &lt;a href=&quot;#sqlite3_get_autocommit&quot;&gt;autocommit mode&lt;/a&gt;.</source>
          <target state="translated">データベースハンドルを&lt;a href=&quot;#sqlite3_get_autocommit&quot;&gt;自動コミットモードにする&lt;/a&gt;ことはできません。</target>
        </trans-unit>
        <trans-unit id="94abbac71c91061eed5db3642683f70b586a784a" translate="yes" xml:space="preserve">
          <source>The database handle must not be in &lt;a href=&quot;get_autocommit&quot;&gt;autocommit mode&lt;/a&gt;.</source>
          <target state="translated">データベースハンドルを&lt;a href=&quot;get_autocommit&quot;&gt;自動コミットモードにする&lt;/a&gt;ことはできません。</target>
        </trans-unit>
        <trans-unit id="915d44defd987e4d007442eec15de7482af138fa" translate="yes" xml:space="preserve">
          <source>The database in which the new table is created. Tables may be created in the main database, the temp database, or in any attached database.</source>
          <target state="translated">新しいテーブルが作成されるデータベース。テーブルは、メイン データベース、一時データベース、または任意のアタッチされたデータベースに作成することができます。</target>
        </trans-unit>
        <trans-unit id="f11c35a2d4a1cdd518b7cc45f596b046478c935a" translate="yes" xml:space="preserve">
          <source>The database is modified by the transaction</source>
          <target state="translated">データベースはトランザクション</target>
        </trans-unit>
        <trans-unit id="a60dcb2504ad2ca1f013e489bb243d5fba664847" translate="yes" xml:space="preserve">
          <source>The database is opened &lt;a href=&quot;../sharedcache&quot;&gt;shared cache&lt;/a&gt; disabled, overriding the default shared cache setting provided by &lt;a href=&quot;enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt;.</source>
          <target state="translated">データベースが開かれ、&lt;a href=&quot;../sharedcache&quot;&gt;共有キャッシュが&lt;/a&gt;無効になり、&lt;a href=&quot;enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache（）&lt;/a&gt;によって提供されるデフォルトの共有キャッシュ設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="4eaa608858923b8628e324d3b5e39f5d6ac0b6e8" translate="yes" xml:space="preserve">
          <source>The database is opened &lt;a href=&quot;../sharedcache&quot;&gt;shared cache&lt;/a&gt; enabled, overriding the default shared cache setting provided by &lt;a href=&quot;enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt;.</source>
          <target state="translated">データベースは&lt;a href=&quot;../sharedcache&quot;&gt;共有キャッシュが&lt;/a&gt;有効になっている状態で開かれ、&lt;a href=&quot;enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache（）&lt;/a&gt;によって提供されるデフォルトの共有キャッシュ設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="438e6e4f2464e93327c1c43679960b9033bba769" translate="yes" xml:space="preserve">
          <source>The database is opened &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; disabled, overriding the default shared cache setting provided by &lt;a href=&quot;#sqlite3_enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt;.</source>
          <target state="translated">データベースが開かれ、&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュが&lt;/a&gt;無効になり、&lt;a href=&quot;#sqlite3_enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache（）&lt;/a&gt;によって提供されるデフォルトの共有キャッシュ設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="2866aa5f974824c8ab6f079d70d8228fd2d735a8" translate="yes" xml:space="preserve">
          <source>The database is opened &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; enabled, overriding the default shared cache setting provided by &lt;a href=&quot;#sqlite3_enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache()&lt;/a&gt;.</source>
          <target state="translated">データベースは&lt;a href=&quot;sharedcache&quot;&gt;共有キャッシュが&lt;/a&gt;有効になっている状態で開かれ、&lt;a href=&quot;#sqlite3_enable_shared_cache&quot;&gt;sqlite3_enable_shared_cache（）&lt;/a&gt;によって提供されるデフォルトの共有キャッシュ設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="0ca1bec50c05a4f92423e17a029876db2e2195fa" translate="yes" xml:space="preserve">
          <source>The database is opened for reading and writing if possible, or reading only if the file is write protected by the operating system. In either case the database must already exist, otherwise an error is returned.</source>
          <target state="translated">データベースは、可能であれば読み込みと書き込みのために開かれ、ファイルがオペレーティングシステムによって書き込み保護されている場合には読み込みのみが行われます。いずれの場合もデータベースは既に存在していなければならず、そうでない場合はエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="9bd4a4b6de8565a3e1cf815b4bc5b9706070cf17" translate="yes" xml:space="preserve">
          <source>The database is opened for reading and writing, and is created if it does not already exist. This is the behavior that is always used for sqlite3_open() and sqlite3_open16().</source>
          <target state="translated">データベースは読み書きのためにオープンされ、まだ存在しない場合は作成されます。これはsqlite3_open()とsqlite3_open16()で常に使用される動作です。</target>
        </trans-unit>
        <trans-unit id="e33053c4558a1f3729067b3cae6e30d0b922d25b" translate="yes" xml:space="preserve">
          <source>The database is opened in read-only mode. If the database does not already exist, an error is returned.</source>
          <target state="translated">データベースは読み取り専用モードで開かれます。データベースが既に存在しない場合は、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="c36f905350b3694fef2e907f7076bd6c0eb07bcf" translate="yes" xml:space="preserve">
          <source>The database may be read but not written. Any number of processes can hold SHARED locks at the same time, hence there can be many simultaneous readers. But no other thread or process is allowed to write to the database file while one or more SHARED locks are active.</source>
          <target state="translated">データベースは読み込まれますが、書き込まれることはありません。任意の数のプロセスが同時にSHAREDロックを保持することができるので、多くの同時読み込みが可能です。しかし、1つ以上のSHAREDロックがアクティブな間は、他のスレッドやプロセスがデータベースファイルに書き込むことはできません。</target>
        </trans-unit>
        <trans-unit id="2cc9e66b5c02e09e5ad16f7b64822b0c58495bb9" translate="yes" xml:space="preserve">
          <source>The database page size in bytes, or 1 if the page size is 65536.</source>
          <target state="translated">データベースのページサイズをバイト単位で、ページサイズが65536の場合は1で指定します。</target>
        </trans-unit>
        <trans-unit id="8a5fb001456adc96d15706d6924ffd2f301ed99f" translate="yes" xml:space="preserve">
          <source>The database page size in bytes. Must be a power of two between 512 and 32768 inclusive, or the value 1 representing a page size of 65536.</source>
          <target state="translated">データベースのページサイズをバイト単位で指定します。512 から 32768 までの間の 2 の累乗、または 65536 のページサイズを表す値 1 でなければなりません。</target>
        </trans-unit>
        <trans-unit id="960363c84d760f550ea9fae647b23fad91849f93" translate="yes" xml:space="preserve">
          <source>The database schema (in the &lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master&lt;/a&gt; table) is not normally included in the hash, but can be added by the &quot;--schema&quot; option.</source>
          <target state="translated">データベーススキーマ（&lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master&lt;/a&gt;テーブル内）は通常ハッシュに含まれませんが、「-schema」オプションで追加できます。</target>
        </trans-unit>
        <trans-unit id="14a6eadb07a326767237571a6c459f7de69f6f90" translate="yes" xml:space="preserve">
          <source>The database schema (in the &lt;a href=&quot;schematab&quot;&gt;sqlite_schema&lt;/a&gt; table) is not normally included in the hash, but can be added by the &quot;--schema&quot; option.</source>
          <target state="translated">データベーススキーマ（&lt;a href=&quot;schematab&quot;&gt;sqlite_schema&lt;/a&gt;テーブル内）は通常ハッシュに含まれていませんが、「-schema」オプションで追加できます。</target>
        </trans-unit>
        <trans-unit id="8594a821095f6391744d60f5433b9311564cee65" translate="yes" xml:space="preserve">
          <source>The database text encoding. A value of 1 means UTF-8. A value of 2 means UTF-16le. A value of 3 means UTF-16be.</source>
          <target state="translated">データベースのテキストエンコーディング。値1はUTF-8を意味します。値2はUTF-16leを意味します。3の値はUTF-16beを意味します。</target>
        </trans-unit>
        <trans-unit id="e0c8f6d94e8860f110aff3d0dcf3dec439a12ec1" translate="yes" xml:space="preserve">
          <source>The database will be opened as an in-memory database. The database is named by the &quot;filename&quot; argument for the purposes of cache-sharing, if shared cache mode is enabled, but the &quot;filename&quot; is otherwise ignored.</source>
          <target state="translated">データベースは、インメモリデータベースとしてオープンされる。共有キャッシュモードが有効な場合には、キャッシュ共有の目的で &quot;filename&quot; 引数によってデータベースの名前が付けられますが、それ以外の場合には &quot;filename&quot; は無視されます。</target>
        </trans-unit>
        <trans-unit id="d24a19630de1f62dd0aa22d7bd05ac2f4445ed6a" translate="yes" xml:space="preserve">
          <source>The datatype and &lt;a href=&quot;datatype3#collation&quot;&gt;collating sequence&lt;/a&gt; of the generated column are determined only by the datatype and &lt;a href=&quot;lang_createtable#collateclause&quot;&gt;COLLATE clause&lt;/a&gt; on the column definition. The datatype and collating sequence of the GENERATED ALWAYS AS expression have no affect on the datatype and collating sequence of the column itself.</source>
          <target state="translated">生成された列のデータ型と&lt;a href=&quot;datatype3#collation&quot;&gt;照合順序&lt;/a&gt;は、列定義のデータ型と&lt;a href=&quot;lang_createtable#collateclause&quot;&gt;COLLATE句&lt;/a&gt;によってのみ決定されます。GENERATED ALWAYS AS式のデータ型と照合順序は、列自体のデータ型と照合順序には影響しません。</target>
        </trans-unit>
        <trans-unit id="8474bd3b47622066afeb4b46c5b6be93034d3e7c" translate="yes" xml:space="preserve">
          <source>The datatype of columns now appear in the 4th argument to the callback.</source>
          <target state="translated">カラムのデータ型がコールバックの第4引数に表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="aa9bbe0be9ce7cff21329528d0726ee0baa77cf6" translate="yes" xml:space="preserve">
          <source>The date and time functions use a subset of &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;IS0-8601&lt;/a&gt; date and time formats. The date() function returns the date in this format: YYYY-MM-DD. The time() function returns the time as HH:MM:SS. The datetime() function returns &quot;YYYY-MM-DD HH:MM:SS&quot;. The julianday() function returns the &lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;Julian day&lt;/a&gt; - the number of days since noon in Greenwich on November 24, 4714 B.C. (&lt;a href=&quot;http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;Proleptic Gregorian calendar&lt;/a&gt;). The strftime() routine returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the &lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/strftime.html&quot;&gt;strftime() function&lt;/a&gt; from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions:</source>
          <target state="translated">日付と時刻の関数は、&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;IS0-8601の&lt;/a&gt;日付と時刻の形式のサブセットを使用します。 date（）関数は、YYYY-MM-DDの形式で日付を返します。 time（）関数は時間をHH：MM：SSとして返します。 datetime（）関数は「YYYY-MM-DD HH：MM：SS」を返します。 julianday（）関数は、&lt;a href=&quot;http://en.wikipedia.org/wiki/Julian_day&quot;&gt;ユリウス日&lt;/a&gt;（紀元前4714年11月24日、グリニッジ正午からの日数（紀元前&lt;a href=&quot;http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;グレゴリオ暦&lt;/a&gt;））を返します。 strftime（）ルーチンは、最初の引数として指定されたフォーマット文字列に従ってフォーマットされた日付を返します。フォーマット文字列は、標準Cライブラリの&lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/strftime.html&quot;&gt;strftime（）関数に&lt;/a&gt;ある最も一般的な置換に加えて、2つの新しい置換％fと％Jをサポートしています。以下は、有効なstrftime（）置換の完全なリストです。</target>
        </trans-unit>
        <trans-unit id="41f51b9af9bc71b6bb1cc99119d6849c39b622ad" translate="yes" xml:space="preserve">
          <source>The db parameter is a pointer to the SQLite &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; that is executing the &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement. The pAux argument is the copy of the client data pointer that was the fourth argument to the &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; or &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module_v2()&lt;/a&gt; call that registered the &lt;a href=&quot;c3ref/module&quot;&gt;virtual table module&lt;/a&gt;. The argv parameter is an array of argc pointers to null terminated strings. The first string, argv[0], is the name of the module being invoked. The module name is the name provided as the second argument to &lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; and as the argument to the USING clause of the &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement that is running. The second, argv[1], is the name of the database in which the new virtual table is being created. The database name is &quot;main&quot; for the primary database, or &quot;temp&quot; for TEMP database, or the name given at the end of the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; statement for attached databases. The third element of the array, argv[2], is the name of the new virtual table, as specified following the TABLE keyword in the &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement. If present, the fourth and subsequent strings in the argv[] array report the arguments to the module name in the &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement.</source>
          <target state="translated">dbパラメータは、&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;ステートメントを実行しているSQLite &lt;a href=&quot;c3ref/sqlite3&quot;&gt;データベース接続&lt;/a&gt;へのポインタです。 pAux引数は、&lt;a href=&quot;c3ref/module&quot;&gt;仮想テーブルモジュール&lt;/a&gt;を登録した&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module（）&lt;/a&gt;または&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module_v2（）&lt;/a&gt;呼び出しの4番目の引数であったクライアントデータポインターのコピーです。 argvパラメータは、nullで終了する文字列へのargcポインタの配列です。最初の文字列argv [0]は、呼び出されるモジュールの名前です。モジュール名は、&lt;a href=&quot;c3ref/create_module&quot;&gt;sqlite3_create_module（）の&lt;/a&gt; 2番目の引数および&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLEの&lt;/a&gt; USING句の引数として提供される名前です。実行中のステートメント。 2番目のargv [1]は、新しい仮想テーブルが作成されるデータベースの名前です。データベース名は、プライマリデータベースの場合は「main」、TEMPデータベースの場合は「temp」、接続されているデータベースの場合は&lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;ステートメントの最後に指定された名前です。配列の3番目の要素であるargv [2]は、&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;ステートメントのTABLEキーワードに続いて指定される、新しい仮想テーブルの名前です。存在する場合、argv []配列の4番目以降の文字列は、&lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt;ステートメントのモジュール名への引数を報告します。</target>
        </trans-unit>
        <trans-unit id="f728f7217f7fc88bd0e8e8228a6a594400b21afc" translate="yes" xml:space="preserve">
          <source>The dbhash program is implemented by a single file of C-code called &lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=tool/dbhash.c&quot;&gt;dbhash.c&lt;/a&gt;. To build the dbhash program manually, simply compile the dbhash.c source file and link it against the SQLite library.</source>
          <target state="translated">dbhashプログラムは、&lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=tool/dbhash.c&quot;&gt;dbhash.c&lt;/a&gt;と呼ばれるCコードの単一ファイルによって実装されます。dbhashプログラムを手動でビルドするには、dbhash.cソースファイルをコンパイルし、SQLiteライブラリにリンクします。</target>
        </trans-unit>
        <trans-unit id="b16703d23a9ca6a2a8cb4ca235cc87a944a6dff5" translate="yes" xml:space="preserve">
          <source>The dbhash.exe Utility Program</source>
          <target state="translated">dbhash.exe ユーティリティープログラム</target>
        </trans-unit>
        <trans-unit id="825612a3619e0d061fa775e13b4301fdfc5c4d06" translate="yes" xml:space="preserve">
          <source>The dbsqlfuzz fuzzer has been so successful at hardening the SQLite code base against malicious attack that it is now considered one of the four primary test harnesses for SQLite.</source>
          <target state="translated">dbsqlfuzzファザーはSQLiteのコードベースを悪意のある攻撃から守ることに成功しており、現在ではSQLiteの4つの主要なテストハーネスの1つと考えられています。</target>
        </trans-unit>
        <trans-unit id="ce23c499eac5efbdaf2dbb036cb7b2ac9a155ffe" translate="yes" xml:space="preserve">
          <source>The dbsqlfuzz fuzzer mutates both the SQL input and the database file at the same time. Dbsqlfuzz uses a custom &lt;a href=&quot;https://github.com/google/fuzzer-test-suite/blob/master/tutorial/structure-aware-fuzzing.md&quot;&gt;Structure-Aware Mutator&lt;/a&gt; on a specialized input file that defines both an input database and SQL text to be run against that database. Because it mutates both the input database and the input SQL at the same time, dbsqlfuzz has been able to find some obscure faults in SQLite that were missed by prior fuzzers that mutated only SQL inputs or only the database file.</source>
          <target state="translated">dbsqlfuzz fuzzerは、SQL入力とデータベースファイルの両方を同時に変更します。Dbsqlfuzzは、入力データベースとそのデータベースに対して実行されるSQLテキストの両方を定義する特殊な入力ファイルで、カスタム&lt;a href=&quot;https://github.com/google/fuzzer-test-suite/blob/master/tutorial/structure-aware-fuzzing.md&quot;&gt;構造認識ミュー&lt;/a&gt;テーターを使用します。入力データベースと入力SQLの両方を同時に変更するため、dbsqlfuzzは、SQL入力のみまたはデータベースファイルのみを変更する以前のファザーでは見逃されていた、SQLiteの不明瞭な障害を見つけることができました。</target>
        </trans-unit>
        <trans-unit id="e0f01bd5981d7e05e25eea466d94ddbb29381d04" translate="yes" xml:space="preserve">
          <source>The dbsqlfuzz fuzzer mutates both the SQL input and the database file at the same time. Dbsqlfuzz uses a custom &lt;a href=&quot;https://github.com/google/fuzzer-test-suite/blob/master/tutorial/structure-aware-fuzzing.md&quot;&gt;Structure-Aware Mutator&lt;/a&gt; on a specialized input file that defines both an input database and SQL text to be run against that database. Because it mutates both the input database and the input SQL at the same time, dbsqlfuzz has been able to find some obscure faults in SQLite that were missed by prior fuzzers that mutated only SQL inputs or only the database file. The SQLite developers usually leave an instance or two of dbsqlfuzz running on the latest trunk code of SQLite whenever they are away from the office for an extended period, such as overnight.</source>
          <target state="translated">dbsqlfuzzファザーは、SQL入力とデータベースファイルの両方を同時に変更します。 Dbsqlfuzzは、入力データベースとそのデータベースに対して実行されるSQLテキストの両方を定義する特殊な入力ファイルでカスタム&lt;a href=&quot;https://github.com/google/fuzzer-test-suite/blob/master/tutorial/structure-aware-fuzzing.md&quot;&gt;Structure-&lt;/a&gt; AwareMutatorを使用します。入力データベースと入力SQLの両方を同時に変更するため、dbsqlfuzzは、SQL入力のみまたはデータベースファイルのみを変更した以前のファザーでは見逃されていたSQLiteのいくつかのあいまいな障害を見つけることができました。 SQLite開発者は通常、夜間などの長期間オフィスを離れるときはいつでも、SQLiteの最新のトランクコードでdbsqlfuzzのインスタンスまたは2つを実行したままにします。</target>
        </trans-unit>
        <trans-unit id="0bae73cc22154360311af38fab160d5138d312f9" translate="yes" xml:space="preserve">
          <source>The dbstat virtual table is an &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt;, meaning that is not necessary to run &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; to create an instance of the dbstat virtual table before using it. The &quot;dbstat&quot; module name can be used as if it were a table name to query the dbstat virtual table directly. For example:</source>
          <target state="translated">dbstat仮想テーブルがある&lt;a href=&quot;vtab#epovtab&quot;&gt;町の名を冠した仮想テーブル&lt;/a&gt;それを実行する必要はありませんつまり、&lt;a href=&quot;lang_createvtab&quot;&gt;仮想テーブルをCREATE&lt;/a&gt;それを使用する前に、dbstat仮想テーブルのインスタンスを作成します。「dbstat」モジュール名は、dbstat仮想テーブルを直接照会するためのテーブル名であるかのように使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="e223099b7354d29f8974670689fc48600a955fe9" translate="yes" xml:space="preserve">
          <source>The decimal extension is not (currently) part of the SQLite &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. However, it is included in the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">10進数の拡張子は、（現在）SQLiteの&lt;a href=&quot;amalgamation&quot;&gt;融合の&lt;/a&gt;一部ではありません。ただし、&lt;a href=&quot;cli&quot;&gt;CLIに&lt;/a&gt;は含まれています。</target>
        </trans-unit>
        <trans-unit id="bf449afd5954b4d824e05da84c86a3c14eb17489" translate="yes" xml:space="preserve">
          <source>The decimal extension provides arbitrary-precision decimal arithmetic on numbers stored as text strings. Because the numbers are stored to arbitrary precision and as text, no approximations are needed. Computations can be done exactly.</source>
          <target state="translated">decimal 拡張機能は、テキスト文字列として格納された数値に対して、任意の精度の10進数演算を提供します。数値は任意の精度でテキストとして格納されるため、近似は必要ありません。正確に計算することができます。</target>
        </trans-unit>
        <trans-unit id="6e61a5a7c6ccc546025a4d388dfa7ed2605e38bb" translate="yes" xml:space="preserve">
          <source>The decimal_sum(X) function is an aggregate, like the built-in &lt;a href=&quot;lang_aggfunc#sumunc&quot;&gt;sum() aggregate function&lt;/a&gt;, except that decimal_sum() computes its result to arbitrary precision and is therefore precise.</source>
          <target state="translated">decimal_sum（X）関数は、組み込みの&lt;a href=&quot;lang_aggfunc#sumunc&quot;&gt;sum（）集計関数と&lt;/a&gt;同様の集計ですが、decimal_sum（）は結果を任意の精度で計算するため、正確です。</target>
        </trans-unit>
        <trans-unit id="efcc1572318b12d880dcf6c5ba6e48d567425a65" translate="yes" xml:space="preserve">
          <source>The decision of whether to implement a FROM-clause subquery as a co-routine or using &lt;a href=&quot;optoverview#flattening&quot;&gt;query flattening&lt;/a&gt; now considers whether the result set of the outer query is &quot;complex&quot; (if it contains functions or expression subqueries). A complex result set biases the decision toward the use of co-routines.</source>
          <target state="translated">FROM句のサブクエリをコルーチンとして実装するか、&lt;a href=&quot;optoverview#flattening&quot;&gt;クエリのフラット化&lt;/a&gt;を使用するかを決定する際に、外部クエリの結果セットが「複雑」かどうかが考慮されます（関数または式のサブクエリが含まれている場合）。複雑な結果セットは、コルーチンの使用に決定を偏らせます。</target>
        </trans-unit>
        <trans-unit id="ab20325df0acc9b2aa5397a0a5067782536af164" translate="yes" xml:space="preserve">
          <source>The decision of which collating sequence to use is controlled by the COLLATE clause in SQL. A COLLATE clause can occur on a table definition, to define a default collating sequence to a table column, or on field of an index, or in the ORDER BY clause of a SELECT statement. Planned enhancements to SQLite are to include standard CAST() syntax to allow the collating sequence of an expression to be defined.</source>
          <target state="translated">どの照合順序を使用するかの決定は、SQLのCOLLATE句によって制御されます。COLLATE 句は、テーブルの定義、テーブルのカラムへのデフォルトの照合順序の定義、 インデックスのフィールド、SELECT 文の ORDER BY 句の中で使用することができます。SQLite では、標準の CAST()構文を使用して式の照合順序を定義できるようにすることが予定されています。</target>
        </trans-unit>
        <trans-unit id="18e04830dfd2e28b2697cd44ccf76543eadbcceb" translate="yes" xml:space="preserve">
          <source>The declared type of each column in the table.</source>
          <target state="translated">テーブルの各列の宣言された型。</target>
        </trans-unit>
        <trans-unit id="68032822fa262cd72f80461a11d217079b712edb" translate="yes" xml:space="preserve">
          <source>The default 'crisismerge' value is 16. There is no maximum limit. Attempting to set the 'crisismerge' parameter to a value of 0 or 1 is equivalent to setting it to the default value (16). It is an error to attempt to set the 'crisismerge' option to a negative value.</source>
          <target state="translated">crisismerge」のデフォルト値は16です。上限はありません。crisismerge」パラメータの値を 0 または 1 に設定しようとすると、デフォルト値 (16)に設定したのと同じことになります。crisismerge」オプションを負の値に設定しようとするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="04fcbed48c760da194eb2fb040297255b4fffa15" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;fileformat2#schemaformat&quot;&gt;schema format number&lt;/a&gt; is changed from 1 to 4. This means that, unless the &lt;a href=&quot;pragma#pragma_legacy_file_format&quot;&gt;PRAGMA legacy_file_format=ON&lt;/a&gt; statement is run, newly created database files will be unreadable by version of SQLite prior to 3.3.0 (2006-01-10). It also means that the &lt;a href=&quot;lang_createindex#descidx&quot;&gt;descending indices&lt;/a&gt; are enabled by default.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;fileformat2#schemaformat&quot;&gt;スキーマフォーマット番号&lt;/a&gt;が1から4に変更されました。これは、&lt;a href=&quot;pragma#pragma_legacy_file_format&quot;&gt;PRAGMA legacy_file_format = ON&lt;/a&gt;ステートメントが実行されない限り、新しく作成されたデータベースファイルは、3.3.0（2006-01-10）より前のバージョンのSQLiteで読み取ることができないことを意味します。また、&lt;a href=&quot;lang_createindex#descidx&quot;&gt;降順のインデックス&lt;/a&gt;はデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="b8d41b5a0a8527b81ce581d5cb059a7a0ef7283f" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;fileformat2#schemaformat&quot;&gt;schema format number&lt;/a&gt; used by SQLite when creating new database files is set by this macro. The schema formats are all very similar. The difference between formats 1 and 4 is that format 4 understands &lt;a href=&quot;lang_createindex#descidx&quot;&gt;descending indices&lt;/a&gt; and has a tighter encoding for boolean values.</source>
          <target state="translated">新しいデータベースファイルを作成するときにSQLiteが使用するデフォルトの&lt;a href=&quot;fileformat2#schemaformat&quot;&gt;スキーマフォーマット番号&lt;/a&gt;は、このマクロによって設定されます。スキーマ形式はすべて非常に似ています。形式1と形式4の違いは、形式4は&lt;a href=&quot;lang_createindex#descidx&quot;&gt;降順のインデックス&lt;/a&gt;を理解し、ブール値をより厳密にエンコードすることです。</target>
        </trans-unit>
        <trans-unit id="ca0921362c7fa29bf8c96529653cba6ff2aa4225" translate="yes" xml:space="preserve">
          <source>The default MASK is and always shall be 0xfffe. The 0xfffe mask means perform all of the optimizations listed above except Debug Mode. If new optimizations are added in the future that should be off by default, those new optimizations will be given a mask of 0x10000 or larger.</source>
          <target state="translated">デフォルトのMASKは0xfffeで、常に0xfffeでなければなりません。0xfffeマスクは、Debug Mode以外の上記のすべての最適化を実行することを意味します。将来、デフォルトではオフになっているはずの新しい最適化が追加された場合、それらの新しい最適化には0x10000以上のマスクが与えられます。</target>
        </trans-unit>
        <trans-unit id="a903124a6abce3d6d4d4bbe7f6d1f8b599823062" translate="yes" xml:space="preserve">
          <source>The default VFS can be changed by registering or re-registering the VFS using the &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register()&lt;/a&gt; interface with a second parameter of 1. Hence, if a (unix) process wants to always use the &quot;unix-nolock&quot; VFS in place of &quot;unix&quot;, the following code would work:</source>
          <target state="translated">デフォルトのVFSは、&lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register（）&lt;/a&gt;インターフェースを使用して、2番目のパラメーターを1にしてVFSを登録または再登録することで変更できます。したがって、（unix）プロセスが常に「unix-nolock」VFSをunix」の場合、次のコードが機能します。</target>
        </trans-unit>
        <trans-unit id="c5a51f22fb2e29520e6fcdc862dfe6400d4b2d95" translate="yes" xml:space="preserve">
          <source>The default behavior for a loadable extension is that it is unloaded from process memory when the database connection that originally invoked &lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension()&lt;/a&gt; closes. (In other words, the xDlUnload method of the &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object is called for all extensions when a database connection closes.) However, if the initialization procedure returns &lt;a href=&quot;rescode#ok_load_permanently&quot;&gt;SQLITE_OK_LOAD_PERMANENTLY&lt;/a&gt; instead of SQLITE_OK, then the extension will not be unloaded (xDlClose will not be invoked) and the extension will remain in process memory indefinitely. The SQLITE_OK_LOAD_PERMANENTLY return value is useful for extensions that want to register new &lt;a href=&quot;vfs&quot;&gt;VFSes&lt;/a&gt;.</source>
          <target state="translated">ロード可能な拡張機能のデフォルトの動作は、最初に&lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension（）を&lt;/a&gt;呼び出したデータベース接続が閉じたときに、プロセスメモリからアンロードされることです。 （つまり、データベース接続が閉じると、&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;オブジェクトのxDlUnloadメソッドがすべての拡張機能に対して呼び出されます。）ただし、初期化プロシージャが&lt;a href=&quot;rescode#ok_load_permanently&quot;&gt;SQLITE_OK&lt;/a&gt;ではなくSQLITE_OK_LOAD_PERMANENTLYを返す場合、拡張機能はアンロードされません（xDlCloseは呼び出されません）。また、拡張機能は無期限にプロセスメモリに残ります。 SQLITE_OK_LOAD_PERMANENTLYの戻り値は、新しい&lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;を登録する拡張機能に役立ちます。</target>
        </trans-unit>
        <trans-unit id="35fa7584b655adc25cbf99cb25271bb088b3504f" translate="yes" xml:space="preserve">
          <source>The default behavior gives this results:</source>
          <target state="translated">デフォルトの動作ではこのような結果になります。</target>
        </trans-unit>
        <trans-unit id="929789505d4e7daeec8d95f7bd37c902d7905d6b" translate="yes" xml:space="preserve">
          <source>The default behavior of assert(X) in standard C is that it is enabled for release builds. This is a reasonable default. However, the SQLite code base has many assert() statements in performance-sensitive areas of the code. Leaving assert(X) turned on causes SQLite to run about three times slower. Also, SQLite strives to provide 100% MC/DC in an as-delivered configuration, which is obviously impossible if assert(X) statements are enabled. For these reasons, assert(X) is a no-op for release builds in SQLite.</source>
          <target state="translated">標準 C の assert(X)のデフォルトの動作は、リリースビルドで有効になっています。これは妥当なデフォルトです。しかし、SQLite のコードベースには、パフォーマンスに敏感な部分に多くの assert()文があります。assert(X)をオンにしたままにしておくと、SQLite の動作が約 3 倍遅くなります。また、SQLite はアズデリバリ構成で 100% の MC/DC を提供するように努力していますが、assert(X)ステートメントが有効になっている場合は明らかに不可能です。これらの理由から、SQLite のリリースビルドでは assert(X)は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d9b3b8cc178a304f2169b7fe7ac799ae14ab4502" translate="yes" xml:space="preserve">
          <source>The default behavior of the &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; operator is to ignore case for ASCII characters. Hence, by default &lt;b&gt;'a' LIKE 'A'&lt;/b&gt; is true. The case_sensitive_like pragma installs a new application-defined LIKE function that is either case sensitive or insensitive depending on the value of the case_sensitive_like pragma. When case_sensitive_like is disabled, the default LIKE behavior is expressed. When case_sensitive_like is enabled, case becomes significant. So, for example, &lt;b&gt;'a' LIKE 'A'&lt;/b&gt; is false but &lt;b&gt;'a' LIKE 'a'&lt;/b&gt; is still true.</source>
          <target state="translated">&lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt;演算子のデフォルトの動作では、ASCII文字の大文字と小文字が区別されません。したがって、デフォルトでは&lt;b&gt;'a' LIKE 'A'&lt;/b&gt;はtrueです。 case_sensitive_likeプラグマは、case_sensitive_likeプラグマの値に応じて、大文字と小文字を区別するか、または区別しない新しいアプリケーション定義のLIKE関数をインストールします。 case_sensitive_likeを無効にすると、デフォルトのLIKE動作が表現されます。 case_sensitive_likeを有効にすると、大文字と小文字が区別されます。したがって、たとえば、&lt;b&gt;'a' LIKE 'A'&lt;/b&gt;は偽ですが、&lt;b&gt;'a' LIKE 'a'&lt;/b&gt;は依然として真です。</target>
        </trans-unit>
        <trans-unit id="9edad614da3d9aaf086c0a5c5b068d92a4f96481" translate="yes" xml:space="preserve">
          <source>The default builds for SQLite on Unix, Windows, and OS/2 include a VFS appropriate for the target platform. SQLite builds for other operating systems do not contain a VFS by default, but the application can register one or more at run-time.</source>
          <target state="translated">Unix、Windows、OS/2上のSQLiteのデフォルトのビルドには、ターゲットプラットフォームに適したVFSが含まれています。他のオペレーティングシステム用の SQLite ビルドにはデフォルトで VFS は含まれていませんが、アプリケーションはランタイムに 1 つ以上の VFS を登録することができます。</target>
        </trans-unit>
        <trans-unit id="6a78f3c92a0ec476b159128dcf1aca02c9237966" translate="yes" xml:space="preserve">
          <source>The default busy callback is NULL.</source>
          <target state="translated">デフォルトのビジーコールバックは NULL です。</target>
        </trans-unit>
        <trans-unit id="a139fc5b0808f70ee2866da438ce9a4197bf896c" translate="yes" xml:space="preserve">
          <source>The default collating function for all strings is BINARY. Alternative collating functions for table columns can be specified in the &lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt; statement using the COLLATE clause on the &lt;a href=&quot;lang_createtable#tablecoldef&quot;&gt;column definition&lt;/a&gt;. When a column is indexed, the same collating function specified in the &lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt; statement is used for the column in the index, by default, though this can be overridden using a COLLATE clause in the &lt;a href=&quot;lang_createindex&quot;&gt;CREATE INDEX&lt;/a&gt; statement.</source>
          <target state="translated">すべての文字列のデフォルトの照合関数はBINARYです。テーブル列の代替照合関数は、&lt;a href=&quot;lang_createtable#tablecoldef&quot;&gt;列定義の&lt;/a&gt; COLLATE句を使用して&lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt;ステートメントで指定できます。列にインデックスが付けられると、デフォルトでは、&lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt;ステートメントで指定された同じ照合関数がインデックス内の列に使用されますが、これは&lt;a href=&quot;lang_createindex&quot;&gt;CREATE INDEX&lt;/a&gt;ステートメントのCOLLATE句を使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="4196a7b520d0708c2ca6c2f0dd09284b39f44638" translate="yes" xml:space="preserve">
          <source>The default configuration for SQLite works great for most applications. But sometimes developers want to tweak the setup to try to squeeze out a little more performance, or take advantage of some obscure feature.</source>
          <target state="translated">SQLite のデフォルトの設定は、ほとんどのアプリケーションで素晴らしい働きをします。しかし、時には開発者はもう少しパフォーマンスを上げたい、あるいはよくわからない機能を利用したいと思うこともあるでしょう。</target>
        </trans-unit>
        <trans-unit id="7f629fe0c846fce25506268b75e0f95dc1a4e2cd" translate="yes" xml:space="preserve">
          <source>The default configuration of SQLite assumes the underlying filesystem supports long filenames.</source>
          <target state="translated">SQLite のデフォルト設定は、基礎となるファイルシステムが長いファイル名をサポートしていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f9ca0f7d70101ac90e64f7de1b18481b2e2650e6" translate="yes" xml:space="preserve">
          <source>The default configuration of SQLite only supports case-insensitive comparisons of ASCII characters. The reason for this is that doing full Unicode case-insensitive comparisons and case conversions requires tables and logic that would nearly double the size of the SQLite library. The SQLite developers reason that any application that needs full Unicode case support probably already has the necessary tables and functions and so SQLite should not take up space to duplicate this ability.</source>
          <target state="translated">SQLite のデフォルトの設定では、ASCII 文字の大文字小文字を区別しない比較しかサポートしていません。その理由は、完全な Unicode 大文字小文字を区別しない比較や大文字小文字の変換を行うためには、SQLite ライブラリのサイズを 2 倍近くにするテーブルやロジックが必要になるからです。SQLite の開発者は、完全な Unicode 大文字小文字のサポートを必要とするアプリケーションは、おそらくすでに必要なテーブルや関数を持っているはずであり、SQLite はこの機能を複製するためにスペースを取るべきではないと考えています。</target>
        </trans-unit>
        <trans-unit id="c23763d0cb18af4da83857106ae71fb287c36d2b" translate="yes" xml:space="preserve">
          <source>The default datatype is 'int32'.</source>
          <target state="translated">デフォルトのデータ型は 'int32' です。</target>
        </trans-unit>
        <trans-unit id="57ca93f20ecfcb67f54da8e6ff374c396f410f8d" translate="yes" xml:space="preserve">
          <source>The default deletion cost</source>
          <target state="translated">デフォルトの削除コスト</target>
        </trans-unit>
        <trans-unit id="348ca4d833d68a6b457e44e2f51c5dde36928e20" translate="yes" xml:space="preserve">
          <source>The default directory for temporary files depends on the OS. Some OS interfaces may choose to ignore this variable and place temporary files in some other directory different from the directory specified here. In that sense, this pragma is only advisory.</source>
          <target state="translated">一時ファイルのデフォルトのディレクトリは OS に依存します。OS のインタフェースによっては、この変数を無視して、一時ファイルをここで指定したディレクトリとは別のディレクトリに置くことを選択する場合があります。その意味で、このpragmaは勧告的なものでしかありません。</target>
        </trans-unit>
        <trans-unit id="09a19fe31cacf32f0a49986af2b636abaafd7a24" translate="yes" xml:space="preserve">
          <source>The default encoding will be UTF-8 for databases created using sqlite3_open() or sqlite3_open_v2(). The default encoding for databases created using sqlite3_open16() will be UTF-16 in the native byte order.</source>
          <target state="translated">sqlite3_open()またはsqlite3_open_v2()を使用して作成されたデータベースのデフォルトのエンコーディングはUTF-8になります。sqlite3_open16()を使用して作成されたデータベースのデフォルトのエンコーディングは、ネイティブのバイト順でUTF-16になります。</target>
        </trans-unit>
        <trans-unit id="93b91496e8c579b792f6528c1582f57d8e5307a9" translate="yes" xml:space="preserve">
          <source>The default file format is now 1.</source>
          <target state="translated">デフォルトのファイル形式が1になりました。</target>
        </trans-unit>
        <trans-unit id="07f52e2687ee82b720aa1390843c77644fb57108" translate="yes" xml:space="preserve">
          <source>The default file format is set by the &lt;a href=&quot;compile#default_file_format&quot;&gt;SQLITE_DEFAULT_FILE_FORMAT&lt;/a&gt; compile-time option.</source>
          <target state="translated">デフォルトのファイル形式は、&lt;a href=&quot;compile#default_file_format&quot;&gt;SQLITE_DEFAULT_FILE_FORMAT&lt;/a&gt;コンパイル時オプションによって設定されます。</target>
        </trans-unit>
        <trans-unit id="cc414446f05fe3ef5190b22cd556bce2036d0102" translate="yes" xml:space="preserve">
          <source>The default frame-spec is:</source>
          <target state="translated">デフォルトのフレーム仕様は</target>
        </trans-unit>
        <trans-unit id="c9df385f1bced3c35670bbdf7a0e4f5a1cfdb4ca" translate="yes" xml:space="preserve">
          <source>The default implementation stores all statistics in a single table named &quot;&lt;a href=&quot;fileformat2#stat1tab&quot;&gt;sqlite_stat1&lt;/a&gt;&quot;. If SQLite is compiled with the &lt;a href=&quot;compile#enable_stat3&quot;&gt;SQLITE_ENABLE_STAT3&lt;/a&gt; option and without the &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt; option, then additional histogram data is collected and stored in &lt;a href=&quot;fileformat2#stat3tab&quot;&gt;sqlite_stat3&lt;/a&gt;. If SQLite is compiled with the &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt; option, then additional histogram data is collected and stored in &lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4&lt;/a&gt;. Older versions of SQLite would make use of the &lt;a href=&quot;fileformat2#stat2tab&quot;&gt;sqlite_stat2&lt;/a&gt; table when compiled with &lt;a href=&quot;compile#enable_stat2&quot;&gt;SQLITE_ENABLE_STAT2&lt;/a&gt; but all recent versions of SQLite ignore the sqlite_stat2 table. Future enhancements may create additional &lt;a href=&quot;fileformat2#intschema&quot;&gt;internal tables&lt;/a&gt; with the same name pattern except with final digit larger than &quot;4&quot;. All of these tables are collectively referred to as &quot;statistics tables&quot;.</source>
          <target state="translated">デフォルトの実装では、すべての統計が「&lt;a href=&quot;fileformat2#stat1tab&quot;&gt;sqlite_stat1&lt;/a&gt;」という名前の単一のテーブルに格納されます。 SQLiteのがコンパイルされている場合は&lt;a href=&quot;compile#enable_stat3&quot;&gt;SQLITE_ENABLE_STAT3の&lt;/a&gt;オプションとすることなく、&lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4の&lt;/a&gt;オプション、追加のヒストグラムデータが収集され、中に格納され&lt;a href=&quot;fileformat2#stat3tab&quot;&gt;sqlite_stat3&lt;/a&gt;。 SQLiteが&lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt;オプションでコンパイルされている場合、追加のヒストグラムデータが収集され、&lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4に&lt;/a&gt;保存されます。 SQLiteの古いバージョンは、&lt;a href=&quot;fileformat2#stat2tab&quot;&gt;SQLITE_ENABLE_STAT2で&lt;/a&gt;コンパイルすると&lt;a href=&quot;compile#enable_stat2&quot;&gt;sqlite_stat2&lt;/a&gt;テーブルを使用しますが、SQLiteの最新バージョンはすべてsqlite_stat2テーブルを無視します。将来の拡張により、追加の&lt;a href=&quot;fileformat2#intschema&quot;&gt;内部テーブル&lt;/a&gt;が作成される可能性があります「4」より大きい最後の桁を除いて、同じ名前パターンで。これらのテーブルはすべてまとめて「統計テーブル」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="2000f471d1e2f9fad888fbe96454c85325906ea0" translate="yes" xml:space="preserve">
          <source>The default implementation stores all statistics in a single table named &quot;&lt;a href=&quot;fileformat2#stat1tab&quot;&gt;sqlite_stat1&lt;/a&gt;&quot;. If SQLite is compiled with the &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt; option, then additional histogram data is collected and stored in &lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4&lt;/a&gt;. Older versions of SQLite would make use of the &lt;a href=&quot;fileformat2#stat2tab&quot;&gt;sqlite_stat2&lt;/a&gt; table or &lt;a href=&quot;fileformat2#stat3tab&quot;&gt;sqlite_stat3&lt;/a&gt; table when compiled with &lt;a href=&quot;compile#enable_stat2&quot;&gt;SQLITE_ENABLE_STAT2&lt;/a&gt; or &lt;a href=&quot;compile#enable_stat3&quot;&gt;SQLITE_ENABLE_STAT3&lt;/a&gt;, but all recent versions of SQLite ignore the sqlite_stat2 and sqlite_stat3 tables. Future enhancements may create additional &lt;a href=&quot;fileformat2#intschema&quot;&gt;internal tables&lt;/a&gt; with the same name pattern except with final digit larger than &quot;4&quot;. All of these tables are collectively referred to as &quot;statistics tables&quot;.</source>
          <target state="translated">デフォルトの実装では、すべての統計が「&lt;a href=&quot;fileformat2#stat1tab&quot;&gt;sqlite_stat1&lt;/a&gt; &quot;」という名前の単一のテーブルに格納されます。 SQLiteが&lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt;オプションを使用してコンパイルされている場合、追加のヒストグラムデータが収集され、&lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4に&lt;/a&gt;保存されます。 SQLiteの古いバージョンの使用になるだろう&lt;a href=&quot;fileformat2#stat2tab&quot;&gt;sqlite_stat2の&lt;/a&gt;テーブルまたは&lt;a href=&quot;fileformat2#stat3tab&quot;&gt;sqlite_stat3&lt;/a&gt;してコンパイルする場合、テーブルを&lt;a href=&quot;compile#enable_stat2&quot;&gt;SQLITE_ENABLE_STAT2&lt;/a&gt;または&lt;a href=&quot;compile#enable_stat3&quot;&gt;SQLITE_ENABLE_STAT3&lt;/a&gt;が、SQLiteのすべての最近のバージョンはsqlite_stat2とsqlite_stat3テーブルを無視します。将来の拡張により、追加の&lt;a href=&quot;fileformat2#intschema&quot;&gt;内部テーブル&lt;/a&gt;が作成される可能性があります最後の桁が「4」より大きいことを除いて、同じ名前パターンで。これらのテーブルはすべて、まとめて「統計テーブル」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="92c0ee558e2a1a06a318ed232e40e1c0e6d83d45" translate="yes" xml:space="preserve">
          <source>The default insertion cost</source>
          <target state="translated">デフォルトの挿入コスト</target>
        </trans-unit>
        <trans-unit id="44b061817ffc2eb0f5dadec06f4e66f4f81231c2" translate="yes" xml:space="preserve">
          <source>The default locking mechanism used by SQLite on unix platforms is POSIX advisory locking, but there are other options. By selecting an alternative &lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; using the &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; interface, an application can make use of other locking protocols that might be more appropriate to certain filesystems. For example, dot-file locking might be select for use in an application that has to run on an NFS filesystem that does not support POSIX advisory locking.</source>
          <target state="translated">UNIXプラットフォームでSQLiteが使用するデフォルトのロックメカニズムはPOSIX勧告ロックですが、他のオプションもあります。&lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2（）&lt;/a&gt;インターフェースを使用して代替の&lt;a href=&quot;c3ref/vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;を選択することで、アプリケーションは、特定のファイルシステムにより適切な他のロックプロトコルを利用できます。たとえば、ドットファイルロックは、POSIXアドバイザリロックをサポートしないNFSファイルシステムで実行する必要があるアプリケーションで使用するために選択される場合があります。</target>
        </trans-unit>
        <trans-unit id="d9e0888f3707dfa1a041c24c2a5eb623fe8f593b" translate="yes" xml:space="preserve">
          <source>The default locking mechanism used by SQLite on unix platforms is POSIX advisory locking. Unfortunately, POSIX advisory locking has design quirks that make it prone to misuse and failure. In particular, any thread in the same process with a file descriptor that is holding a POSIX advisory lock can override that lock using a different file descriptor. One particularly pernicious problem is that the &lt;code&gt;close()&lt;/code&gt; system call will cancel all POSIX advisory locks on the same file for all threads and all file descriptors in the process.</source>
          <target state="translated">UNIXプラットフォームでSQLiteが使用するデフォルトのロックメカニズムは、POSIX勧告ロックです。残念ながら、POSIXアドバイザリロックには設計上の癖があり、誤用や失敗が発生しやすくなっています。特に、POSIXアドバイザリロックを保持しているファイル記述子を持つ同じプロセス内のスレッドは、別のファイル記述子を使用してそのロックをオーバーライドできます。特に厄介な問題の1つは、 &lt;code&gt;close()&lt;/code&gt; システムコールが、プロセス内のすべてのスレッドとすべてのファイル記述子について、同じファイルのすべてのPOSIX勧告ロックをキャンセルすることです。</target>
        </trans-unit>
        <trans-unit id="07275b3b33b4fa68f4e8147d7f962856df7d7bd0" translate="yes" xml:space="preserve">
          <source>The default lookaside configuration has changed from 100 slots of 1200 bytes each (120KB) to be 40 slots of 1200 bytes each (48KB). This space ends up being allocated as 93 slots of 128 bytes each and 30 slots of 1200 bytes each. So more lookaside slots are available but much less heap space is used.</source>
          <target state="translated">デフォルトのルックサイド設定は、各1200バイトの100スロット(120KB)から、各1200バイトの40スロット(48KB)に変更された。このスペースは、128バイトずつの93スロットと1200バイトずつの30スロットとして割り当てられている。つまり、より多くのルックサイドスロットが利用可能になりますが、使用されるヒープスペースははるかに少なくなります。</target>
        </trans-unit>
        <trans-unit id="4e313113e047c2f26bfe18f713c540368922a076" translate="yes" xml:space="preserve">
          <source>The default lookaside configuration, the size of the small-slots, and the details of how heap space is allocated between small-slots and big-slots, are all subject to change from one release to the next.</source>
          <target state="translated">デフォルトのルックサイド設定、スモールスロットのサイズ、スモールスロットとビッグスロットの間のヒープ領域の割り当て方法の詳細は、すべてリリースごとに変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fdf451db4759c12771bfb1206d604a686ee94bb6" translate="yes" xml:space="preserve">
          <source>The default mapping of the rank column for a table may be modified using the &lt;a href=&quot;fts5#the_rank_configuration_option&quot;&gt;FTS5 rank configuration option&lt;/a&gt;.</source>
          <target state="translated">テーブルのランク列のデフォルトのマッピングは、&lt;a href=&quot;fts5#the_rank_configuration_option&quot;&gt;FTS5ランク構成オプション&lt;/a&gt;を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="676ab2fe4bf4ab903767c236b27e9b63051796ee" translate="yes" xml:space="preserve">
          <source>The default maximum trigger recursion depth is 1000.</source>
          <target state="translated">デフォルトでは、トリガの再帰深さの最大値は1000です。</target>
        </trans-unit>
        <trans-unit id="fd5421bb6c7fc35d245339e5557eb27520f8453d" translate="yes" xml:space="preserve">
          <source>The default means that aggregate window functions read all rows from the beginning of the partition up to and including the current row and its peers. This implies that rows that have the same values for all ORDER BY expressions will also have the same value for the result of the window function (as the window frame is the same). For example:</source>
          <target state="translated">デフォルトでは、集約ウィンドウ関数はパーティションの先頭から現在の行とその仲間を含むすべての行を読み取ることを意味します。これは、すべてのORDER BY式に同じ値を持つ行は、ウィンドウ関数の結果にも同じ値を持つことを意味します(ウィンドウフレームが同じであるため)。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2d78a92ed9db0e9db8d034d6998442b87734337c" translate="yes" xml:space="preserve">
          <source>The default mechanism by which SQLite accesses and updates database disk files is the xRead() and xWrite() methods of the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; VFS object. These methods are typically implemented as &quot;read()&quot; and &quot;write()&quot; system calls which cause the operating system to copy disk content between the kernel buffer cache and user space.</source>
          <target state="translated">SQLiteがデータベースディスクファイルにアクセスして更新するデフォルトのメカニズムは、&lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; VFSオブジェクトのxRead（）およびxWrite（）メソッドです。これらのメソッドは通常、 &quot;read（）&quot;および &quot;write（）&quot;システムコールとして実装され、オペレーティングシステムがカーネルバッファーキャッシュとユーザースペースの間でディスクコンテンツをコピーします。</target>
        </trans-unit>
        <trans-unit id="af6b4fd5a17994d4af89bdbebf0e8f01053d45e7" translate="yes" xml:space="preserve">
          <source>The default memory allocation settings in SQLite are appropriate for most applications. However, applications with unusual or particularly strict requirements may want to adjust the configuration to more closely align SQLite to their needs. Both compile-time and start-time configuration options are available.</source>
          <target state="translated">SQLite のデフォルトのメモリ割り当て設定は、ほとんどのアプリケーションに適しています。しかし、通常とは異なる、あるいは特に厳しい要件を持つアプリケーションでは、SQLiteをより密接にニーズに合わせて設定を調整したいと思うかもしれません。コンパイル時と起動時の両方の設定オプションが利用可能です。</target>
        </trans-unit>
        <trans-unit id="62759f30ef7e2768a0dc269d58d4f224a639e96a" translate="yes" xml:space="preserve">
          <source>The default memory allocator is recommended for most applications. If you do not have a compelling need to use an alternative memory allocator, then use the default.</source>
          <target state="translated">ほとんどのアプリケーションでは、デフォルトのメモリアロケータを使用することをお勧めします。代替のメモリアロケータを使用する必要がない場合は、デフォルトのメモリアロケータを使用してください。</target>
        </trans-unit>
        <trans-unit id="dcfc21fe3a44b7df155912e662a52083d37f6130" translate="yes" xml:space="preserve">
          <source>The default method by which SQLite implements &lt;a href=&quot;atomiccommit&quot;&gt;atomic commit and rollback&lt;/a&gt; is a &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt;. Beginning with &lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;version 3.7.0&lt;/a&gt; (2010-07-21), a new &quot;Write-Ahead Log&quot; option (hereafter referred to as &quot;WAL&quot;) is available.</source>
          <target state="translated">SQLiteが&lt;a href=&quot;atomiccommit&quot;&gt;アトミックコミットとロールバックを&lt;/a&gt;実装するデフォルトの方法は、&lt;a href=&quot;lockingv3#rollback&quot;&gt;ロールバックジャーナル&lt;/a&gt;です。始まる&lt;a href=&quot;https://sqlite.org/releaselog/3_7_0.html&quot;&gt;バージョン3.7.0&lt;/a&gt;（2010-07-21）、新「先行書き込みログ」オプション（以下「WAL」と呼ばれる）が使用可能です。</target>
        </trans-unit>
        <trans-unit id="03533018c376c706c7055694a5695128f6d5dba9" translate="yes" xml:space="preserve">
          <source>The default mode is serialized.</source>
          <target state="translated">デフォルトのモードはシリアル化されています。</target>
        </trans-unit>
        <trans-unit id="c91c1c07eac44347101354cb661e73cefc49a14a" translate="yes" xml:space="preserve">
          <source>The default numeric file permissions for newly created database files under unix. If not specified, the default is 0644 which means that the files is globally readable but only writable by the creator.</source>
          <target state="translated">unixで新しく作成されたデータベースファイルのデフォルトのファイルパーミッションを数値で指定します。指定されていない場合、デフォルトは 0644 で、ファイルはグローバルに読み取り可能ですが、作成者のみが書き込み可能であることを意味します。</target>
        </trans-unit>
        <trans-unit id="b7b908d4b0d2fc05c9ddc3f95f430fcff134a8ed" translate="yes" xml:space="preserve">
          <source>The default operation of edit() is to invoke a text editor. But by using an alternative edit program in the second argument, you can also get it to edit images or other non-text resources. For example, if you want to modify a JPEG image that happens to be stored in a field of a table, you could run:</source>
          <target state="translated">edit()のデフォルトの操作は、テキストエディタを呼び出すことです。しかし、第二引数に代替の編集プログラムを使用することで、画像やその他のテキスト以外のリソースを編集することもできます。例えば、テーブルのフィールドに保存されているJPEG画像を修正したい場合、以下のように実行することができます。</target>
        </trans-unit>
        <trans-unit id="e15d9f7898bd04fad7c8bec9316feb2b3c4d67cc" translate="yes" xml:space="preserve">
          <source>The default order of the nested loops in a join is for the left-most table in the FROM clause to form the outer loop and the right-most table to form the inner loop. However, SQLite will nest the loops in a different order if doing so will help it to select better indices.</source>
          <target state="translated">結合におけるネストされたループのデフォルトの順序は、FROM句の左端のテーブルが外側のループを形成し、右端のテーブルが内側のループを形成します。しかし、SQLiteは、より良いインデックスを選択するのに役立つ場合には、ループを別の順序で入れ子にします。</target>
        </trans-unit>
        <trans-unit id="c60124ec3003cce0626fc7fdd9909bdc4316bd6f" translate="yes" xml:space="preserve">
          <source>The default output mode is &quot;list&quot;. In list mode, each row of a query result is written on one line of output and each column within that row is separated by a specific separator string. The default separator is a pipe symbol (&quot;|&quot;). List mode is especially useful when you are going to send the output of a query to another program (such as AWK) for additional processing.</source>
          <target state="translated">デフォルトの出力モードは &quot;list &quot;です。リストモードでは、クエリ結果の各行が1行の出力に書き込まれ、その行内の各列は特定の区切り文字列で区切られます。デフォルトの区切り文字はパイプ記号(&quot;|&quot;)です。リストモードは、クエリの出力を別のプログラム(AWKなど)に送信して追加処理を行う場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="cae14327c7d6852834539912db17ff8fae315187" translate="yes" xml:space="preserve">
          <source>The default output shows the beginning and end of each configuration and test module combination. In the example above &quot;c1&quot; and &quot;64k&quot; are configurations and &quot;pager08&quot;, &quot;build33&quot;, &quot;orderby01&quot;, etc. are test modules. Compile-time and run-time options are available to increase or decrease the amount of output. The output can be increased by showing each test case within each test module. The output can be decreased by degrees: omitting test modules starts and stops, omitting configuration starts and stops, and finally by omitting all output.</source>
          <target state="translated">デフォルトの出力では、各コンフィグレーションとテストモジュールの組み合わせの先頭と末尾が表示されます。上の例では、&quot;c1 &quot;と &quot;64k &quot;がコンフィギュレーション、&quot;pager08&quot;、&quot;build33&quot;、&quot;orderby01 &quot;などがテストモジュールです。出力量を増減させるために、コンパイル時と実行時のオプションが用意されています。各テストモジュール内に各テストケースを表示することで、出力を増やすことができます。出力は、テストモジュールの開始と停止を省略し、設定の開始と停止を省略し、最終的にすべての出力を省略することで、程度の差はありますが、出力を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="81fe79158a35398aa7562b0fca6f1415aa39b894" translate="yes" xml:space="preserve">
          <source>The default page cache implemention does not allocate the full amount of cache memory all at once. Cache memory is allocated in smaller chunks on an as-needed basis. The page_cache setting is a (suggested) upper bound on the amount of memory that the cache can use, not the amount of memory it will use all of the time. This is the behavior of the default page cache implementation, but an &lt;a href=&quot;c3ref/pcache_methods2&quot;&gt;application defined page cache&lt;/a&gt; is free to behave differently if it wants.</source>
          <target state="translated">デフォルトのページキャッシュの実装では、一度に全量のキャッシュメモリが割り当てられるわけではありません。キャッシュメモリは、必要に応じて小さなチャンクで割り当てられます。 page_cache設定は、キャッシュが常に使用するメモリ量ではなく、キャッシュが使用できるメモリ量の（推奨）上限です。これはデフォルトのページキャッシュ実装の動作ですが、&lt;a href=&quot;c3ref/pcache_methods2&quot;&gt;アプリケーション定義のページキャッシュ&lt;/a&gt;は、必要に応じて自由に異なる動作をさせることができます。</target>
        </trans-unit>
        <trans-unit id="fc5d7962d2b50c7baceb7ed65dad81e0058ad64b" translate="yes" xml:space="preserve">
          <source>The default page cache strives more diligently to avoid using memory beyond what is allocated to it by &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;. Or if using page cache is allocating from the heap, it strives to avoid going over the &lt;a href=&quot;c3ref/hard_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64()&lt;/a&gt;, even if &lt;a href=&quot;compile#enable_memory_management&quot;&gt;SQLITE_ENABLE_MEMORY_MANAGEMENT&lt;/a&gt; is not set.</source>
          <target state="translated">デフォルトのページキャッシュは、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;によって割り当てられたメモリを超えてメモリを使用しないように、より熱心に取り組んでいます。または、ページキャッシュの使用がヒープから割り当てられている場合、&lt;a href=&quot;compile#enable_memory_management&quot;&gt;SQLITE_ENABLE_MEMORY_MANAGEMENT&lt;/a&gt;が設定されていなくても、&lt;a href=&quot;c3ref/hard_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64（）&lt;/a&gt;を超えないように努めます。</target>
        </trans-unit>
        <trans-unit id="b40256b332aa600059fdd4657f3e43acb14b4e3d" translate="yes" xml:space="preserve">
          <source>The default page cache strives more diligently to avoid using memory beyond what is allocated to it by &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;. Or if using page cache is allocating from the heap, it strives to avoid going over the &lt;a href=&quot;c3ref/soft_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64()&lt;/a&gt;, even if &lt;a href=&quot;compile#enable_memory_management&quot;&gt;SQLITE_ENABLE_MEMORY_MANAGEMENT&lt;/a&gt; is not set.</source>
          <target state="translated">デフォルトのページキャッシュは、&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;によって割り当てられたメモリを超えてメモリを使用しないように、さらに努力しています。または、ページキャッシュの使用がヒープから割り当てられている場合は、&lt;a href=&quot;compile#enable_memory_management&quot;&gt;SQLITE_ENABLE_MEMORY_MANAGEMENT&lt;/a&gt;が設定されていなくても、&lt;a href=&quot;c3ref/soft_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64（）&lt;/a&gt;を超えないようにします。</target>
        </trans-unit>
        <trans-unit id="619cdf9a91dcb3b5377126d1f738a21802c8e3aa" translate="yes" xml:space="preserve">
          <source>The default page size on windows is automatically adjusted to match the capabilities of the underlying filesystem.</source>
          <target state="translated">Windows上のデフォルトのページサイズは、基礎となるファイルシステムの機能に合わせて自動的に調整されます。</target>
        </trans-unit>
        <trans-unit id="df04859a275716c6652a67712d525008dc797ebb" translate="yes" xml:space="preserve">
          <source>The default setting for SQLITE_MAX_COLUMN is 2000. You can change it at compile time to values as large as 32767. On the other hand, many experienced database designers will argue that a well-normalized database will never need more than 100 columns in a table.</source>
          <target state="translated">SQLITE_MAX_COLUMNのデフォルト設定は2000です。コンパイル時に32767という大きな値に変更することができます。一方で、経験豊富なデータベース設計者の多くは、正規化されたデータベースではテーブルに100以上のカラムが必要になることはないと主張するでしょう。</target>
        </trans-unit>
        <trans-unit id="0506f7d82e65a6fef4e6e411dc34fd230ff22185" translate="yes" xml:space="preserve">
          <source>The default setting for auto-vacuum is 0 or &quot;none&quot;, unless the &lt;a href=&quot;compile#default_autovacuum&quot;&gt;SQLITE_DEFAULT_AUTOVACUUM&lt;/a&gt; compile-time option is used. The &quot;none&quot; setting means that auto-vacuum is disabled. When auto-vacuum is disabled and data is deleted data from a database, the database file remains the same size. Unused database file pages are added to a &quot;&lt;a href=&quot;fileformat2#freelist&quot;&gt;freelist&lt;/a&gt;&quot; and reused for subsequent inserts. So no database file space is lost. However, the database file does not shrink. In this mode the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command can be used to rebuild the entire database file and thus reclaim unused disk space.</source>
          <target state="translated">&lt;a href=&quot;compile#default_autovacuum&quot;&gt;SQLITE_DEFAULT_AUTOVACUUM&lt;/a&gt;コンパイル時オプションが使用されていない限り、自動バキュームのデフォルト設定は0または「なし」です。 「なし」設定は、自動バキュームが無効であることを意味します。自動バキュームが無効で、データがデータベースから削除された場合、データベースファイルは同じサイズのままです。未使用のデータベースファイルページは「&lt;a href=&quot;fileformat2#freelist&quot;&gt;フリーリスト&lt;/a&gt;」に追加され、後続の挿入で再利用されます。したがって、データベースファイル領域が失われることはありません。ただし、データベースファイルは縮小されません。このモードでは、&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;コマンドを使用してデータベースファイル全体を再構築し、未使用のディスク領域を再利用できます。</target>
        </trans-unit>
        <trans-unit id="de25e032063f16295b8e77c37d21842694e060fe" translate="yes" xml:space="preserve">
          <source>The default setting for the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt; is 0, which means to following the recommendation of &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマ&lt;/a&gt;のデフォルト設定は0です。これは、&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターの推奨に従うことを意味します。</target>
        </trans-unit>
        <trans-unit id="d111baa1a5224d066ace9e922bc0723387d0391f" translate="yes" xml:space="preserve">
          <source>The default setting for this pragma is OFF, which means that all references to the table anywhere in the schema are converted to the new name.</source>
          <target state="translated">このプラグマのデフォルト設定はOFFで、スキーマ内のどこかのテーブルへのすべての参照が新しい名前に変換されることを意味します。</target>
        </trans-unit>
        <trans-unit id="5060b84cc58c53853f2caf81d58480c0590b9ac5" translate="yes" xml:space="preserve">
          <source>The default setting is 1. Additional information can be found in &lt;a href=&quot;tempfiles#tempstore&quot;&gt;tempfiles.html&lt;/a&gt;.</source>
          <target state="translated">デフォルト設定は1です。追加情報は&lt;a href=&quot;tempfiles#tempstore&quot;&gt;tempfiles.htmlにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4e7fc079075b7fd84d6268869958a93f9d4d68c3" translate="yes" xml:space="preserve">
          <source>The default sorting procedure is to gather all information that will ultimately be output into a &quot;record&quot; and pass that complete record to the sorter. But in some cases, for example if some of the output columns consists of large BLOB values, the size of the each record can be large, which means that the sorter has to either use more memory, and/or write more content to temporary storage.</source>
          <target state="translated">デフォルトのソート手順は、最終的に &quot;レコード &quot;に出力されるすべての情報を収集し、その完全なレコードをソーターに渡すことです。しかし、いくつかのケースでは、例えば、出力列のいくつかが大きなBLOB値で構成されている場合、各レコードのサイズが大きくなることがあります。</target>
        </trans-unit>
        <trans-unit id="6f4517865a59fec2a530bec6db77e7cd99eb8490" translate="yes" xml:space="preserve">
          <source>The default strategy is to allow successive write transactions to grow the WAL until the WAL becomes about 1000 pages in size, then to run a checkpoint operation for each subsequent COMMIT until the WAL is reset to be smaller than 1000 pages. By default, the checkpoint will be run automatically by the same thread that does the COMMIT that pushes the WAL over its size limit. This has the effect of causing most COMMIT operations to be very fast but an occasional COMMIT (those that trigger a checkpoint) to be much slower. If that effect is undesirable, then the application can disable automatic checkpointing and run the periodic checkpoints in a separate thread, or separate process. (Links to commands and interfaces to accomplish this are &lt;a href=&quot;#how_to_checkpoint&quot;&gt;shown below&lt;/a&gt;.)</source>
          <target state="translated">デフォルトの戦略では、WALのサイズが約1000ページになるまで、連続する書き込みトランザクションでWALを拡張し、その後、WALが1000ページ未満にリセットされるまで、後続の各COMMITに対してチェックポイント操作を実行します。デフォルトでは、チェックポイントは、サイズ制限を超えてWALをプッシュするCOMMITを実行する同じスレッドによって自動的に実行されます。これにより、ほとんどのCOMMIT操作が非常に高速になりますが、時々発生するCOMMIT（チェックポイントをトリガーする操作）は非常に遅くなります。その影響が望ましくない場合、アプリケーションは自動チェックポイントを無効にして、別のスレッドまたは別のプロセスで定期的なチェックポイントを実行できます。 （これを実現するためのコマンドとインターフェースへのリンクを&lt;a href=&quot;#how_to_checkpoint&quot;&gt;以下に示します&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="7aba3882e935c491d72d10d266cb950c10ccee5f" translate="yes" xml:space="preserve">
          <source>The default substitution cost</source>
          <target state="translated">デフォルトの代用コスト</target>
        </trans-unit>
        <trans-unit id="6947c6a992789a324c997f5478292dca047e240d" translate="yes" xml:space="preserve">
          <source>The default synchronous setting is full so the above is what usually happens. However, if the synchronous setting is lowered to &quot;normal&quot;, SQLite only flushes the rollback journal once, after the page count has been written. This carries a risk of corruption because it might happen that the modified (non-zero) page count reaches the disk surface before all of the data does. The data will have been written first, but SQLite assumes that the underlying filesystem can reorder write requests and that the page count can be burned into oxide first even though its write request occurred last. So as a second line of defense, SQLite also uses a 32-bit checksum on every page of data in the rollback journal. This checksum is evaluated for each page during rollback while rolling back a journal as described in &lt;a href=&quot;#section_4_4&quot;&gt;section 4.4&lt;/a&gt;. If an incorrect checksum is seen, the rollback is abandoned. Note that the checksum does not guarantee that the page data is correct since there is a small but finite probability that the checksum might be right even if the data is corrupt. But the checksum does at least make such an error unlikely.</source>
          <target state="translated">デフォルトの同期設定はフルであるため、上記が通常発生します。ただし、同期設定を「通常」に下げると、SQLiteは、ページカウントが書き込まれた後、ロールバックジャーナルを一度だけフラッシュします。すべてのデータが到達する前に、変更された（ゼロ以外の）ページカウントがディスク表面に到達する可能性があるため、これは破損のリスクを伴います。データは最初に書き込まれますが、SQLiteは、基礎となるファイルシステムが書き込み要求を並べ替えることができ、書き込み要求が最後に発生した場合でも、ページカウントを最初に酸化物に書き込むことができると想定しています。したがって、SQLiteは2番目の防御線として、ロールバックジャーナルのデータのすべてのページで32ビットチェックサムを使用します。&lt;a href=&quot;#section_4_4&quot;&gt;セクション4.4で&lt;/a&gt;説明されているように、このチェックサムは、ジャーナルをロールバックしている間、ロールバック中に各ページに対して評価されます。。不正なチェックサムが表示された場合、ロールバックは中止されます。データが破損している場合でもチェックサムが正しい可能性は小さいが有限の確率があるため、チェックサムはページデータが正しいことを保証しないことに注意してください。しかし、チェックサムは少なくともそのようなエラーを起こしそうにありません。</target>
        </trans-unit>
        <trans-unit id="095be1a2c22dcc1b72f1d8ee5a80821a8e3ba1f7" translate="yes" xml:space="preserve">
          <source>The default value for SQLITE_PRINTF_PRECISION_LIMIT is 2147483647 (0x7fffffff).</source>
          <target state="translated">SQLITE_PRINTF_PRECISION_LIMIT のデフォルト値は 2147483647 (0x7fffffff)です。</target>
        </trans-unit>
        <trans-unit id="5887e5cef0e652ea249c383a61a9790399db5025" translate="yes" xml:space="preserve">
          <source>The default value for languageid is 0. If an alternative language is specified in WHERE clause constraints, then that alternative is used instead of 0. There can only be a single languageid per query. In other words, the WHERE clause cannot contain a range constraint or IN operator on the languageid.</source>
          <target state="translated">languageidのデフォルト値は0です。 WHERE句の制約で代替言語が指定されている場合は、その代替言語が0の代わりに使用されます。 クエリごとに1つのlanguageidだけを指定することができます。言い換えれば、WHERE句には、languageidに範囲制約やIN演算子を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="3d6f85ef321cfdfaecfbd8525333d39487f3c884" translate="yes" xml:space="preserve">
          <source>The default value of a languageid column is 0. Any value inserted into a languageid column is converted to a 32-bit (not 64) signed integer.</source>
          <target state="translated">languageid列のデフォルト値は0です。 languageid列に挿入された値はすべて32ビットの符号付き整数に変換されます(64ではありません)。</target>
        </trans-unit>
        <trans-unit id="0bb45f8540234b96b45cb058d442c35d3ea03bfa" translate="yes" xml:space="preserve">
          <source>The default value of the &lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt; compile-time parameter is 1, which means to store temporary files on disk but provide the option of overriding the behavior using the &lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_store pragma&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;compile#temp_store&quot;&gt;SQLITE_TEMP_STORE&lt;/a&gt;コンパイル時パラメーターのデフォルト値は1です。これは、一時ファイルをディスクに格納することを意味しますが、&lt;a href=&quot;pragma#pragma_temp_store&quot;&gt;temp_storeプラグマ&lt;/a&gt;を使用して動作をオーバーライドするオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="3aae70c9121f536fa334d3f452170e8968ea3458" translate="yes" xml:space="preserve">
          <source>The default value of the usermerge option is 4. The minimum allowed value is 2, and the maximum 16.</source>
          <target state="translated">usermergeオプションのデフォルト値は4で、最小許容値は2、最大許容値は16です。</target>
        </trans-unit>
        <trans-unit id="6973079b710b23783ded0a80f07fc117f677c334" translate="yes" xml:space="preserve">
          <source>The default virtual table (&quot;rtree&quot;) normally stores coordinates as single-precision (4-byte) floating point numbers. If integer coordinates are desired, declare the table using &quot;rtree_i32&quot; instead:</source>
          <target state="translated">デフォルトの仮想テーブル (&quot;rtree&quot;)は通常、座標を単精度 (4 バイト)の浮動小数点数で格納します。整数の座標が必要な場合は、代わりに &quot;rtree_i32&quot; を使用してテーブルを宣言します。</target>
        </trans-unit>
        <trans-unit id="f282a44d7dfb6c6134a7e29df48c07aa44737ff7" translate="yes" xml:space="preserve">
          <source>The demonstration code assumes that the SQLite database is opened used as a database object named &quot;db&quot;.</source>
          <target state="translated">デモコードは、SQLiteデータベースが &quot;db &quot;という名前のデータベースオブジェクトとして使用されて開かれていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="8837968f443dfe5005184f2c6a7e1c74103e5e88" translate="yes" xml:space="preserve">
          <source>The demonstration code below includes a status_refresh method that grays-out or activates the Undo and Redo buttons and menu entries depending on whether or not there is anything to be undone or redone. You will need to redefine this method to control the Undo and Redo buttons in your application.</source>
          <target state="translated">以下のデモコードには、元に戻すかやり直すかに応じて、元に戻すボタンややり直しボタン、メニュー項目をグレーアウトしたり、アクティブにしたりする status_refresh メソッドが含まれています。アプリケーションで元に戻すボタンややり直しボタンを制御するには、このメソッドを再定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="e759858c504e056da064aff365282dc111db1fea" translate="yes" xml:space="preserve">
          <source>The depth of recursion for triggers has a hard upper limit set by the &lt;a href=&quot;limits#max_trigger_depth&quot;&gt;SQLITE_MAX_TRIGGER_DEPTH&lt;/a&gt; compile-time option and a run-time limit set by &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimittriggerdepth&quot;&gt;SQLITE_LIMIT_TRIGGER_DEPTH&lt;/a&gt;,...).</source>
          <target state="translated">トリガーの再帰の深さには、&lt;a href=&quot;limits#max_trigger_depth&quot;&gt;SQLITE_MAX_TRIGGER_DEPTH&lt;/a&gt;コンパイル時オプションによって設定されるハード上限と、&lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit&lt;/a&gt;（db、&lt;a href=&quot;c3ref/c_limit_attached#sqlitelimittriggerdepth&quot;&gt;SQLITE_LIMIT_TRIGGER_DEPTH&lt;/a&gt;、...）によって設定されるランタイム制限があります。</target>
        </trans-unit>
        <trans-unit id="40be115b96b882b5a59636c2c2b3cce3bdbb02d6" translate="yes" xml:space="preserve">
          <source>The descendants of OpenOffice tend to segfault more often than commercial competitors. Perhaps for this reason, the OpenOffice forks make periodic backups of their in-memory documents so that users do not lose all pending edits when the inevitable application crash does occur. This causes frustrating pauses in the application for the few seconds while each backup is being made. After restarting from a crash, the user is presented with a dialog box that walks them through the recovery process. Managing the crash recovery this way involves lots of extra application logic and is generally an annoyance to the user.</source>
          <target state="translated">OpenOffice の子孫は商業的な競争相手よりも頻繁にセグメンテーションフォールトを起こす傾向があります。おそらくこの理由のためか、OpenOffice のフォークは、不可避なアプリケーションのクラッシュが発生したときにユーザーが保留中のすべての編集を失わないように、定期的にメモリ内のドキュメントのバックアップを作成します。これは各バックアップが行われている間の数秒間のアプリケーションのイライラするような一時停止を引き起こします。クラッシュから再起動すると、回復プロセスを説明するダイアログボックスが表示されます。この方法でクラッシュ回復を管理すると、多くの余分なアプリケーションロジックが必要となり、一般的にはユーザーを悩ませることになります。</target>
        </trans-unit>
        <trans-unit id="2a2b8799305e9ca9fdc0f3b11f07bd75b53378d6" translate="yes" xml:space="preserve">
          <source>The designed query interface is:</source>
          <target state="translated">設計されたクエリインターフェースは</target>
        </trans-unit>
        <trans-unit id="85d6b31a6dd13fa4a2b19e14c162e00851337050" translate="yes" xml:space="preserve">
          <source>The detail option may be set to &quot;full&quot; (the default value), &quot;column&quot; or &quot;none&quot;. For example:</source>
          <target state="translated">詳細オプションは、&quot;full&quot;(デフォルト値)、&quot;column&quot;、または &quot;none &quot;のいずれかに設定することができます。例えば</target>
        </trans-unit>
        <trans-unit id="1de34563fa7a58730a8b8b8a025ab7bdcb0a2940" translate="yes" xml:space="preserve">
          <source>The details of optimizations performed by this pragma are expected to change and improve over time. Applications should anticipate that this pragma will perform new optimizations in future releases.</source>
          <target state="translated">このpragmaによって実行される最適化の詳細は、時間の経過とともに変化し、改善されることが予想されます。アプリケーションは、将来のリリースでこのプラグマが新しい最適化を実行することを期待してください。</target>
        </trans-unit>
        <trans-unit id="2ec6e7a356da9ba89cc679a27100e250b07d2b68" translate="yes" xml:space="preserve">
          <source>The details of the behavior of the sqlite3_step() interface depend on whether the statement was prepared using the newer &quot;vX&quot; interfaces &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v2()&lt;/a&gt; or the older legacy interfaces &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; and &lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;. The use of the new &quot;vX&quot; interface is recommended for new applications but the legacy interface will continue to be supported.</source>
          <target state="translated">sqlite3_step（）インターフェースの動作の詳細については、ステートメントは、新しい「のvX」インターフェースを用いて調製したかどうかに依存&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v3（） &lt;/a&gt;、&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare_v2（） &lt;/a&gt;、&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v3（） &lt;/a&gt;、&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16_v2（）&lt;/a&gt;または古いレガシーインターフェイスは&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;と&lt;a href=&quot;#sqlite3_prepare&quot;&gt;sqlite3_prepare16を（）&lt;/a&gt;。新しいアプリケーションには新しい「vX」インターフェースの使用が推奨されますが、レガシーインターフェースは引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="a66564cccde706fd2f76931336faa29d5380763d" translate="yes" xml:space="preserve">
          <source>The details of the behavior of the sqlite3_step() interface depend on whether the statement was prepared using the newer &quot;vX&quot; interfaces &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt;, &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt;, &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt;, &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v2()&lt;/a&gt; or the older legacy interfaces &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; and &lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16()&lt;/a&gt;. The use of the new &quot;vX&quot; interface is recommended for new applications but the legacy interface will continue to be supported.</source>
          <target state="translated">sqlite3_step（）インターフェースの動作の詳細については、ステートメントは、新しい「のvX」インターフェースを用いて調製したかどうかに依存&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v3（） &lt;/a&gt;、&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare_v2（） &lt;/a&gt;、&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v3（） &lt;/a&gt;、&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16_v2（）&lt;/a&gt;または古いレガシーインターフェイスは&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare（）&lt;/a&gt;と&lt;a href=&quot;prepare&quot;&gt;sqlite3_prepare16を（）&lt;/a&gt;。新しいアプリケーションには新しい「vX」インターフェースの使用が推奨されますが、レガシーインターフェースは引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="d328873bfc7a5d2f8f59abeab740350558a37fbf" translate="yes" xml:space="preserve">
          <source>The details of the effects of the analysis limit described in the previous paragraph are subject to change in future versions of SQLite. But the core idea will remain the same. An analysis limit of N will strive to limit the number of rows visited in each index to approximately N.</source>
          <target state="translated">前項で説明した解析限界の影響の詳細は、今後のSQLiteのバージョンで変更される可能性があります。しかし、核心的な考え方は変わりません。Nの分析制限は、各インデックスで訪問する行数を約Nに制限しようとするものです。</target>
        </trans-unit>
        <trans-unit id="47cfb6e87da2bbb4d38b35a83664b9fdcddd81cb" translate="yes" xml:space="preserve">
          <source>The details of the operation codes, their meanings, the parameters they take, and what they do are all subject to change without notice. Unlike most of the SQLite API, this function is not guaranteed to operate consistently from one release to the next.</source>
          <target state="translated">操作コードの詳細、その意味、それらが取るパラメータ、そしてそれらが何をするかは、すべて予告なく変更される可能性があります。ほとんどの SQLite API とは異なり、この関数はあるリリースから次のリリースまで一貫して動作することは保証されていません。</target>
        </trans-unit>
        <trans-unit id="dd71fb5d39136060492d732375a6fec71ebfc8ad" translate="yes" xml:space="preserve">
          <source>The developers are also on the lookout for new ways to optimize the commit mechanism. The current VFS implementations for Unix (Linux and Mac OS X) and Windows make pessimistic assumptions about the behavior of those systems. After consultation with experts on how these systems work, we might be able to relax some of the assumptions on these systems and allow them to run faster. In particular, we suspect that most modern filesystems exhibit the safe append property and that many of them might support atomic sector writes. But until this is known for certain, SQLite will take the conservative approach and assume the worst.</source>
          <target state="translated">開発者はまた、コミットメカニズムを最適化するための新しい方法を模索しています。現在の Unix (Linux と Mac OS X)と Windows 用の VFS の実装は、これらのシステムの動作について悲観的な仮定をしています。これらのシステムがどのように動作するかについて専門家と相談した結果、これらのシステムの前提条件をいくつか緩和し、より高速に動作させることができるようになるかもしれません。特に、最新のファイルシステムのほとんどは安全な追加特性を持ち、それらの多くはアトミックセクタ書き込みをサポートしているのではないかと考えています。しかし、これが確実に判明するまでは、SQLite は保守的なアプローチをとり、最悪の事態を想定しています。</target>
        </trans-unit>
        <trans-unit id="e4066095f770552d7d59a59bea4105aa7d61a017" translate="yes" xml:space="preserve">
          <source>The developers have no editorial influence on the content of CVEs, and they do not like to be controlled by groups in which they have no voice.</source>
          <target state="translated">開発者はCVEの内容に編集上の影響力がなく、発言力のないグループに支配されるのを嫌っている。</target>
        </trans-unit>
        <trans-unit id="cba4f98976654b480368200cf64e4d7ca1caf336" translate="yes" xml:space="preserve">
          <source>The developers of SQLite are confident that it is robust in the face of power failures and system crashes because the automatic test procedures do extensive checks on the ability of SQLite to recover from simulated power loss. We call these the &quot;crash tests&quot;.</source>
          <target state="translated">SQLite の開発者は、停電やシステムクラッシュに直面しても SQLite が堅牢であることを確信しています。これを「クラッシュテスト」と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="57e3f42d8aa639c2f77c64f6029c9126e99e122e" translate="yes" xml:space="preserve">
          <source>The developers of SQLite have found that full coverage testing is an extremely effective method for locating and preventing bugs. Because every single branch instruction in SQLite core code is covered by test cases, the developers can be confident that changes made in one part of the code do not have unintended consequences in other parts of the code. The many new features and performance improvements that have been added to SQLite in recent years would not have been possible without the availability full-coverage testing.</source>
          <target state="translated">SQLite の開発者は、フルカバレッジテストがバグを発見し、防止するために非常に効果的な方法であることに気づいています。SQLiteコアコードのすべての分岐命令がテストケースでカバーされているため、開発者はコードのある部分で行われた変更が他の部分で意図しない結果を招くことがないことを確信することができます。近年SQLiteに追加された多くの新機能やパフォーマンスの向上は、フルカバレッジテストなしでは実現できなかったでしょう。</target>
        </trans-unit>
        <trans-unit id="c6e54cb667da50110192519bd611d69d7d2d59cd" translate="yes" xml:space="preserve">
          <source>The developers of SQLite intend to support the product through the year 2050. To this end, the source code is carefully documented to promote long-term maintainability. We prefer mature and stable over trendy and cutting-edge.</source>
          <target state="translated">SQLite の開発者は、2050 年まで製品をサポートすることを意図しています。そのために、ソースコードは長期的な保守性を促進するために慎重に文書化されています。私たちは、流行や最先端のものよりも成熟した安定したものを好みます。</target>
        </trans-unit>
        <trans-unit id="6b11572798416066a74cf3226912c7c4d4e245c6" translate="yes" xml:space="preserve">
          <source>The developers often do not find out about CVEs until long after the bug is fixed. You can see this by the fact that many CVEs reference the bug fix in their initial report.</source>
          <target state="translated">開発者は、バグが修正されてからかなり時間が経ってからでないと、 CVE の存在に気づかないことがよくあります。これは、多くの CVE が最初の報告書でバグ修正を参照していることからもわかります。</target>
        </trans-unit>
        <trans-unit id="aa1c82e2078fb346e28f27499859e5261dd7cb0d" translate="yes" xml:space="preserve">
          <source>The diagram above implies that SQLite computes all of the rowids first and then combines them with a union operation before starting to do rowid lookups on the original table. In reality, the rowid lookups are interspersed with rowid computations. SQLite uses one index at a time to find rowids while remembering which rowids it has seen before so as to avoid duplicates. That is just an implementation detail, though. The diagram, while not 100% accurate, provides a good overview of what is happening.</source>
          <target state="translated">上の図は、SQLite が最初にすべての行 ID を計算してから、元のテーブルの行 ID の検索を開始する前に、それらの行 ID を和演算で結合することを意味しています。実際には、行 ID の検索は行 ID の計算と並行して行われます。SQLite は、重複を避けるために、以前に見たことのある行番号を記憶しながら、一度に一つのインデックスを使用して行番号を検索します。これは実装の詳細に過ぎません。この図は100%正確ではありませんが、何が起こっているのかの良い概要を提供しています。</target>
        </trans-unit>
        <trans-unit id="cc06f8d8201603f348e84ed00b97e2bebb250253" translate="yes" xml:space="preserve">
          <source>The diagram at the right illustrates the concept. One begins with a standard SQLite release. For the sake of example, suppose that one intends to create a private branch off of SQLite version 3.6.15. In the diagram this is version (1). The maintainer makes an exact copy of the baseline SQLite into the branch space, shown as version (2). Note that (1) and (2) are exactly the same. Then the maintainer applies the private changes to version (2) resulting in version (3). In other words, version (3) is SQLite version 3.6.15 plus edits.</source>
          <target state="translated">右の図は、そのコンセプトを説明しています。まず、標準的なSQLiteのリリースから始めます。例として、SQLiteバージョン3.6.15からプライベートブランチを作成しようとしたとします。図ではこれがバージョン(1)です。メンテナは、ベースライン SQLite の正確なコピーをブランチ空間に作成します。(1)と(2)は全く同じであることに注意してください。そして、メンテナはプライベートな変更をバージョン(2)に適用し、結果としてバージョン(3)を生成します。言い換えれば、バージョン(3)はSQLiteのバージョン3.6.15に編集を加えたものです。</target>
        </trans-unit>
        <trans-unit id="7b170d383461e4dd7d9f55e0934f811bdf7d240b" translate="yes" xml:space="preserve">
          <source>The difference between reading from the rank column and using the bm25() function directly within the query is only significant when sorting by the returned value. In this case, using &quot;rank&quot; is faster than using bm25().</source>
          <target state="translated">rank列から読み込む場合と、クエリ内で直接bm25()関数を使用する場合の違いは、返された値でソートする場合にのみ大きくなります。この場合、&quot;rank &quot;を使用する方がbm25()を使用するよりも高速です。</target>
        </trans-unit>
        <trans-unit id="9a6b573084b906296ca61d103b50efb82fd91899" translate="yes" xml:space="preserve">
          <source>The difference between this option and the 'automerge' option is that when the 'automerge' limit is reached FTS5 only begins to merge the b-trees together. Most of the work is performed as part of subsequent INSERT, UPDATE or DELETE operations. Whereas when the 'crisismerge' limit is reached, the offending b-trees are all merged immediately. This means that an INSERT, UPDATE or DELETE that triggers a crisis-merge may take a long time to complete.</source>
          <target state="translated">このオプションと 'automerge' オプションの違いは、'automerge' の制限に達すると、FTS5 は b-tree の結合を開始するだけであるということです。ほとんどの作業は、その後のINSERT、UPDATE、DELETE操作の一部として実行されます。一方、'crisismerge'リミットに達すると、問題のあるb-treeはすべて即座にマージされます。これは、危機的なマージのトリガーとなるINSERT、UPDATE、またはDELETEは、完了するまでに長い時間がかかる可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="6b73e10a6ce3d527b6333ec3f4b76095553830b9" translate="yes" xml:space="preserve">
          <source>The difference is that xConnect is called to establish a new connection to an existing virtual table whereas xCreate is called to create a new virtual table from scratch.</source>
          <target state="translated">違いは、xConnect が既存の仮想テーブルへの新しい接続を確立するために呼び出されるのに対し、xCreate がゼロから新しい仮想テーブルを作成するために呼び出されることです。</target>
        </trans-unit>
        <trans-unit id="2f41e80a4cb41a6cee44f4eaec98226e9c29f84f" translate="yes" xml:space="preserve">
          <source>The differences between a patchset and a changeset are that:</source>
          <target state="translated">パッチセットとチェンジセットの違いは、その点です。</target>
        </trans-unit>
        <trans-unit id="4fa2acc79952a3a20f72fc7c3e0f092b1e96e820" translate="yes" xml:space="preserve">
          <source>The differences between an &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TEMP_DB&lt;/a&gt; database and an &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TRANSIENT_DB&lt;/a&gt; database is this: The &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TEMP_DB&lt;/a&gt; is used for explicitly declared and named TEMP tables (using the CREATE TEMP TABLE syntax) or for named tables in a temporary database that is created by opening a database with a filename that is an empty string. An &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TRANSIENT_DB&lt;/a&gt; holds a database table that SQLite creates automatically in order to evaluate a subquery or ORDER BY or GROUP BY clause. Both TEMP_DB and TRANSIENT_DB databases are private and are deleted automatically. TEMP_DB databases last for the duration of the database connection. TRANSIENT_DB databases last only for the duration of a single SQL statement.</source>
          <target state="translated">間の違い&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TEMP_DBの&lt;/a&gt;データベースと&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TRANSIENT_DBの&lt;/a&gt;データベースはこれです：&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TEMP_DBは&lt;/a&gt;（CREATE TEMP TABLE構文を使用して）明示的に宣言し、名前のTEMPテーブルのために使用されるか、またはファイル名でデータベースをオープンすることによって作成される一時的なデータベース内の名前付きのテーブルのためにされますそれは空の文字列です。アン&lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_TRANSIENT_DBは、&lt;/a&gt; SQLiteのは、サブクエリまたはORDER BYまたはGROUP BY句を評価するために、自動的に作成されるデータベーステーブルを保持しています。 TEMP_DBデータベースとTRANSIENT_DBデータベースはどちらもプライベートであり、自動的に削除されます。 TEMP_DBデータベースは、データベース接続の間存続します。 TRANSIENT_DBデータベースは、単一のSQLステートメントの間だけ持続します。</target>
        </trans-unit>
        <trans-unit id="ea188c1a8a3d9f0d3afac3d8adfd72df27cd7aa2" translate="yes" xml:space="preserve">
          <source>The direct-to-disk writes are accomplished using fopen()/fwrite()/fclose(). By default, and in all the results shown below, the OS filesystem buffers are never flushed to persistent storage using fsync() or FlushFileBuffers(). In other words, there is no attempt to make the direct-to-disk writes transactional or power-safe. We found that invoking fsync() or FlushFileBuffers() on each file written causes direct-to-disk storage to be about 10 times or more slower than writes to SQLite.</source>
          <target state="translated">直接ディスクへの書き込みは、fopen()/fwrite()/fclose()を使用して行われます。デフォルトでは、以下に示すすべての結果において、OS のファイルシステムバッファは fsync()や FlushFileBuffers()を使用して永続的なストレージにフラッシュされることはありません。言い換えれば、直接ディスクへの書き込みをトランザクション的にもパワーセーフにもしようとする試みはありません。書き込まれた各ファイルに対して fsync()や FlushFileBuffers()を実行すると、直接ディスクへの書き込みが SQLite への書き込みの約 10 倍以上遅くなることがわかりました。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
