<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="82caaf3cf8501fb595b30e400f51b26e47b25959" translate="yes" xml:space="preserve">
          <source>The hashbang comment specifies the path to a specific JavaScript interpreter that you want to use to execute the script. An example is as follows:</source>
          <target state="translated">hashbangコメントは、スクリプトを実行するために使用したい特定のJavaScriptインタープリタへのパスを指定します。例は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="acbf0b146da97882ce0ccfda5db5731fc125bfa2" translate="yes" xml:space="preserve">
          <source>The head of a&lt;a href=&quot;../statements/for...in&quot;&gt; for...in&lt;/a&gt; loop contains an initializer expression. That is, a variable is declared and assigned a value |&lt;code&gt;for (var i = 0 in obj)&lt;/code&gt;|. In non-strict mode, this head declaration is silently ignored and behaves like &lt;code&gt;|for (var i in obj)|&lt;/code&gt;. In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, however, a &lt;code&gt;SyntaxError&lt;/code&gt; is thrown.</source>
          <target state="translated">&lt;a href=&quot;../statements/for...in&quot;&gt;for ... in&lt;/a&gt;ループの先頭には、初期化式が含まれています。つまり、変数が宣言され、値が割り当てられます。 &lt;code&gt;for (var i = 0 in obj)&lt;/code&gt; |。非厳密モードでは、このヘッド宣言は無視され、 &lt;code&gt;|for (var i in obj)|&lt;/code&gt; ように動作します| 。で&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;は、しかし、 &lt;code&gt;SyntaxError&lt;/code&gt; スローされます。</target>
        </trans-unit>
        <trans-unit id="174e1373198a9ce05a7767bfaa5ca4d663f360ad" translate="yes" xml:space="preserve">
          <source>The head of a&lt;a href=&quot;../statements/for...of&quot;&gt; for...of&lt;/a&gt; loop contains an initializer expression. That is, a variable is declared and assigned a value |&lt;code&gt;for (var i = 0 of iterable)&lt;/code&gt;|. This is not allowed in for-of loops. You might want a &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; loop that does allow an initializer.</source>
          <target state="translated">&lt;a href=&quot;../statements/for...of&quot;&gt;for ... of&lt;/a&gt;ループの先頭には、初期化式が含まれています。つまり、変数が宣言され、値が割り当てられます。 &lt;code&gt;for (var i = 0 of iterable)&lt;/code&gt; |。これはfor-ofループでは許可されていません。あなたは欲しいかもしれない &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; 初期化を許可しないループ。</target>
        </trans-unit>
        <trans-unit id="2882d2e96ea8f7f0ff7088ac1c1490ed2e6cc656" translate="yes" xml:space="preserve">
          <source>The hour cycle to use. Possible values are &quot;&lt;code&gt;h11&lt;/code&gt;&quot;, &quot;&lt;code&gt;h12&lt;/code&gt;&quot;, &quot;&lt;code&gt;h23&lt;/code&gt;&quot;, or &quot;&lt;code&gt;h24&lt;/code&gt;&quot;. This option overrides the &lt;code&gt;hc&lt;/code&gt; language tag, if both are present, and the &lt;code&gt;hour12&lt;/code&gt; option takes precedence in case both options have been specified.</source>
          <target state="translated">使用する時間サイクル。可能な値は、「 &lt;code&gt;h11&lt;/code&gt; 」、「 &lt;code&gt;h12&lt;/code&gt; 」、「 &lt;code&gt;h23&lt;/code&gt; 」、または「 &lt;code&gt;h24&lt;/code&gt; 」です。このオプションは、両方が存在する場合は &lt;code&gt;hc&lt;/code&gt; 言語タグをオーバーライドし、両方のオプションが指定されている場合は、 &lt;code&gt;hour12&lt;/code&gt; オプションが優先されます。</target>
        </trans-unit>
        <trans-unit id="552ab113655d627cecf03ba0878ba8a32000b73c" translate="yes" xml:space="preserve">
          <source>The hour cycle to use. Possible values are &lt;code&gt;&quot;h11&quot;&lt;/code&gt;, &lt;code&gt;&quot;h12&quot;&lt;/code&gt;, &lt;code&gt;&quot;h23&quot;&lt;/code&gt;, or &lt;code&gt;&quot;h24&quot;&lt;/code&gt;. This option overrides the &lt;code&gt;hc&lt;/code&gt; language tag, if both are present, and the &lt;code&gt;hour12&lt;/code&gt; option takes precedence in case both options have been specified.</source>
          <target state="translated">使用する時間サイクル。可能な値は &lt;code&gt;&quot;h11&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h12&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h23&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;h24&quot;&lt;/code&gt; です。このオプションは &lt;code&gt;hc&lt;/code&gt; 言語タグをオーバーライドします（両方が存在する場合）。両方のオプションが指定されている場合は、 &lt;code&gt;hour12&lt;/code&gt; オプションが優先されます。</target>
        </trans-unit>
        <trans-unit id="3e2b706b1f7b76b1b675661c5ec4c77cca954fba" translate="yes" xml:space="preserve">
          <source>The hyperbolic arc-cosine of the given number. If the number is less than &lt;strong&gt;1&lt;/strong&gt;, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された数値の双曲線逆余弦。数が&lt;strong&gt;1&lt;/strong&gt;未満の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea882b733d44011c36add7c1fd849755068be2ac" translate="yes" xml:space="preserve">
          <source>The hyperbolic arcsine of the given number.</source>
          <target state="translated">与えられた数の双曲アークサイン。</target>
        </trans-unit>
        <trans-unit id="7eb791a354a28fce45fbb892d0739717a1614f2f" translate="yes" xml:space="preserve">
          <source>The hyperbolic arctangent of the given number.</source>
          <target state="translated">与えられた数の双曲線八角。</target>
        </trans-unit>
        <trans-unit id="b2e438be83482889943cb4fc40b62059d88da573" translate="yes" xml:space="preserve">
          <source>The hyperbolic cosine of the given number.</source>
          <target state="translated">与えられた数の双曲余弦。</target>
        </trans-unit>
        <trans-unit id="f1400f32dc9a455d3edae0a1f17e5028080a8e40" translate="yes" xml:space="preserve">
          <source>The hyperbolic sine of the given number.</source>
          <target state="translated">与えられた数の双曲線サイン。</target>
        </trans-unit>
        <trans-unit id="6f604e097a4e9615a5020d901c221426a71dfcf6" translate="yes" xml:space="preserve">
          <source>The hyperbolic tangent of the given number.</source>
          <target state="translated">与えられた数の双曲正接。</target>
        </trans-unit>
        <trans-unit id="b3fc67980048970e777d8b570d676169f31017c5" translate="yes" xml:space="preserve">
          <source>The identity operator returns true if the operands are strictly equal (see above) &lt;strong&gt;with no type conversion&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;型変換を行わずに&lt;/strong&gt;オペランドが厳密に等しい場合（上記を参照）&lt;strong&gt;、&lt;/strong&gt;アイデンティティー演算子はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="4b86f1ae628e43bb330e15419a0a0c54faf3960c" translate="yes" xml:space="preserve">
          <source>The if block's &lt;code&gt;foo&lt;/code&gt; is still in the temporal dead zone.</source>
          <target state="translated">The if block's &lt;code&gt;foo&lt;/code&gt; is still in the temporal dead zone.</target>
        </trans-unit>
        <trans-unit id="299ebba163fd49b025df2cefd8d6147e128674bb" translate="yes" xml:space="preserve">
          <source>The implicit wrapping of return values in &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/a&gt; does not imply that &lt;code&gt;return await promiseValue&lt;/code&gt; is functionally equivalent to &lt;code&gt;return promiseValue&lt;/code&gt;.</source>
          <target state="translated">The implicit wrapping of return values in &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt; &lt;code&gt;Promise.resolve&lt;/code&gt; &lt;/a&gt; does not imply that &lt;code&gt;return await promiseValue&lt;/code&gt; is functionally equivalent to &lt;code&gt;return promiseValue&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a93192febec84096ff8267e60f57cc4b36bd3ff" translate="yes" xml:space="preserve">
          <source>The increment operator (&lt;code&gt;++&lt;/code&gt;) increments (adds one to) its operand and returns a value.</source>
          <target state="translated">インクリメント演算子（ &lt;code&gt;++&lt;/code&gt; ）は、そのオペランドをインクリメント（1を加算）し、値を返します。</target>
        </trans-unit>
        <trans-unit id="3e73dd9f1dac7496631e451063177665bce7fa2b" translate="yes" xml:space="preserve">
          <source>The increment operator increments (adds one to) its operand and returns a value.</source>
          <target state="translated">インクリメント演算子は、そのオペランドをインクリメント(1つ追加)し、値を返します。</target>
        </trans-unit>
        <trans-unit id="67a85865c54da3334c97faa1a88ed42752ec9bc2" translate="yes" xml:space="preserve">
          <source>The index (position) of the current element in the array.</source>
          <target state="translated">配列内の現在の要素のインデックス(位置)。</target>
        </trans-unit>
        <trans-unit id="7ffe01267591f8837241810ff457b1900bdfd8c5" translate="yes" xml:space="preserve">
          <source>The index at which to start changing the array.</source>
          <target state="translated">配列の変更を開始するインデックス。</target>
        </trans-unit>
        <trans-unit id="f81aa488abb81c9d5fd6b63cb29e600c39183d5c" translate="yes" xml:space="preserve">
          <source>The index at which to start searching backwards. Defaults to the array's length minus one (&lt;code&gt;arr.length - 1&lt;/code&gt;), i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.</source>
          <target state="translated">後方検索を開始するインデックス。デフォルトは、配列の長さから1を引いた値（ &lt;code&gt;arr.length - 1&lt;/code&gt; ）です。つまり、配列全体が検索されます。インデックスが配列の長さ以上の場合、配列全体が検索されます。負の場合は、配列の末尾からのオフセットと見なされます。インデックスが負の場合でも、配列は引き続き後ろから前に検索されることに注意してください。計算されたインデックスが0未満の場合、-1が返されます。つまり、配列は検索されません。</target>
        </trans-unit>
        <trans-unit id="12e7d9cf2e5fbb26b7b487a33779ebff623e7933" translate="yes" xml:space="preserve">
          <source>The index at which to start the next match.</source>
          <target state="translated">次のマッチを開始するインデックス。</target>
        </trans-unit>
        <trans-unit id="81c96e9bd927f63dc2c2dc29803f1d1685b4b755" translate="yes" xml:space="preserve">
          <source>The index at which to start the next match. If &lt;code&gt;g&lt;/code&gt; is absent, this will always be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">次の一致を開始するインデックス。 &lt;code&gt;g&lt;/code&gt; が存在しない場合、これは常に &lt;code&gt;0&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a34d6c9e7707b92ea48cc03f89d2de3f58eeb35c" translate="yes" xml:space="preserve">
          <source>The index of &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; in the array.</source>
          <target state="translated">The index of &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; in the array.</target>
        </trans-unit>
        <trans-unit id="cc1ff8860b10df902ebff81881a58b531468f649" translate="yes" xml:space="preserve">
          <source>The index of the current element being processed in the array.</source>
          <target state="translated">配列内で処理されている現在の要素のインデックス.</target>
        </trans-unit>
        <trans-unit id="2fd6e929430e6974adbca5e947ca4d58bafa9f80" translate="yes" xml:space="preserve">
          <source>The index of the current element being processed in the array. Starts at index 0, if an &lt;code&gt;initialValue&lt;/code&gt; is provided, and at index 1 otherwise.</source>
          <target state="translated">配列で処理されている現在の要素のインデックス。 &lt;code&gt;initialValue&lt;/code&gt; が指定されている場合はインデックス0から始まり、それ以外の場合はインデックス1から始まります。</target>
        </trans-unit>
        <trans-unit id="7f9d6fb873da6b62063da7d4f1b7d6b55b21fcdc" translate="yes" xml:space="preserve">
          <source>The index of the current element being processed in the array. Starts from index &lt;code&gt;0&lt;/code&gt; if an &lt;code&gt;initialValue&lt;/code&gt; is provided. Otherwise, it starts from index &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">The index of the current element being processed in the array. Starts from index &lt;code&gt;0&lt;/code&gt; if an &lt;code&gt;initialValue&lt;/code&gt; is provided. Otherwise, it starts from index &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39b7b8ecfbd9528e0672019a2333fad8bf860ef2" translate="yes" xml:space="preserve">
          <source>The index of the current element being processed in the typed array.</source>
          <target state="translated">型付き配列の中で処理されている現在の要素のインデックス。</target>
        </trans-unit>
        <trans-unit id="4e62fd3255e9662d7685ba2ca3e94d371d4e4e4a" translate="yes" xml:space="preserve">
          <source>The index of the element</source>
          <target state="translated">要素のインデックス</target>
        </trans-unit>
        <trans-unit id="7e20c5326e47c6b69c12859e953192437092dc48" translate="yes" xml:space="preserve">
          <source>The index of the first character to exclude from the returned substring.</source>
          <target state="translated">返される部分文字列から除外する最初の文字のインデックス。</target>
        </trans-unit>
        <trans-unit id="1f78231231b933e396fae84668988f35e42d8e9f" translate="yes" xml:space="preserve">
          <source>The index of the first character to include in the returned substring.</source>
          <target state="translated">返された部分文字列に含める最初の文字のインデックス。</target>
        </trans-unit>
        <trans-unit id="fcccb837d8b0bea139158aebd624645ac5b1f678" translate="yes" xml:space="preserve">
          <source>The index of the first element in the array that passes the test. Otherwise, &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">The index of the first element in the array that passes the test. Otherwise, &lt;code&gt;-1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f65d5609b33c7459e10d0ad201dbc7ec922d04b" translate="yes" xml:space="preserve">
          <source>The index of the first match between the regular expression and the given string, or &lt;code&gt;-1&lt;/code&gt; if no match was found.</source>
          <target state="translated">The index of the first match between the regular expression and the given string, or &lt;code&gt;-1&lt;/code&gt; if no match was found.</target>
        </trans-unit>
        <trans-unit id="36739cd660d201d481956db3ac5d01ca1bd6793f" translate="yes" xml:space="preserve">
          <source>The index of the first match between the regular expression and the given string; if not found, &lt;strong&gt;-1&lt;/strong&gt;.</source>
          <target state="translated">正規表現と指定された文字列の間の最初の一致のインデックス。見つからない場合は&lt;strong&gt;-1&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7eeb649d19a6bf315759f881b8cbad67f58f3e5e" translate="yes" xml:space="preserve">
          <source>The index of the first occurrence of &lt;code&gt;&lt;var&gt;searchValue&lt;/var&gt;&lt;/code&gt;, or &lt;code&gt;&lt;strong&gt;-1&lt;/strong&gt;&lt;/code&gt; if not found.</source>
          <target state="translated">The index of the first occurrence of &lt;code&gt;&lt;var&gt;searchValue&lt;/var&gt;&lt;/code&gt; , or &lt;code&gt;&lt;strong&gt;-1&lt;/strong&gt;&lt;/code&gt; if not found.</target>
        </trans-unit>
        <trans-unit id="ee9d07e044583fff7d5c1a63242f20eed8c8db73" translate="yes" xml:space="preserve">
          <source>The index of the first occurrence of &lt;var&gt;searchValue&lt;/var&gt;, or &lt;strong&gt;-1&lt;/strong&gt; if not found.</source>
          <target state="translated">が最初に出現する位置のインデックス &lt;var&gt;searchValue&lt;/var&gt; 、または&lt;strong&gt;-1&lt;/strong&gt;場合が見つかりません。</target>
        </trans-unit>
        <trans-unit id="ba96976abfa8c19822be4aba22902ebe7ea8580a" translate="yes" xml:space="preserve">
          <source>The index of the function reference you want to mutate.</source>
          <target state="translated">突然変異させたい関数参照のインデックス。</target>
        </trans-unit>
        <trans-unit id="ff7eb733f5b352e4ae9d707707716fe0f304ceda" translate="yes" xml:space="preserve">
          <source>The index of the function reference you want to retrieve.</source>
          <target state="translated">取得したい関数参照のインデックス。</target>
        </trans-unit>
        <trans-unit id="d3b2834eee8d6320aac950150fcf1393ecfa37cf" translate="yes" xml:space="preserve">
          <source>The index of the last character in the string to be considered as the beginning of a match. The default value is &lt;code&gt;+Infinity&lt;/code&gt;. If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt; &amp;gt;= &lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, the whole string is searched. If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt; &amp;lt; 0&lt;/code&gt;, the behavior will be the same as if it would be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">The index of the last character in the string to be considered as the beginning of a match. The default value is &lt;code&gt;+Infinity&lt;/code&gt; . If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt; &amp;gt;= &lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , the whole string is searched. If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt; &amp;lt; 0&lt;/code&gt; , the behavior will be the same as if it would be &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d1f18f22d47ed0b5f34040af817342c18952c1f" translate="yes" xml:space="preserve">
          <source>The index of the last character in the string to be considered as the beginning of a match. The default value is &lt;code&gt;+Infinity&lt;/code&gt;. If &lt;code&gt;fromIndex &amp;gt;= str.length&lt;/code&gt;, the whole string is searched. If &lt;code&gt;fromIndex &amp;lt; 0&lt;/code&gt;, the behavior will be the same as if it would be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">一致の開始と見なされる文字列の最後の文字のインデックス。デフォルト値は &lt;code&gt;+Infinity&lt;/code&gt; です。場合 &lt;code&gt;fromIndex &amp;gt;= str.length&lt;/code&gt; 、文字列全体が検索されます。場合 &lt;code&gt;fromIndex &amp;lt; 0&lt;/code&gt; 、それは可能でしょうかのように、動作は同じになります &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="007f291855720542b1afc8d57acd3fb3cc988272" translate="yes" xml:space="preserve">
          <source>The index of the last occurrence of &lt;code&gt;&lt;var&gt;searchValue&lt;/var&gt;&lt;/code&gt;; &lt;code&gt;&lt;strong&gt;-1&lt;/strong&gt;&lt;/code&gt; if not found.</source>
          <target state="translated">The index of the last occurrence of &lt;code&gt;&lt;var&gt;searchValue&lt;/var&gt;&lt;/code&gt; ; &lt;code&gt;&lt;strong&gt;-1&lt;/strong&gt;&lt;/code&gt; if not found.</target>
        </trans-unit>
        <trans-unit id="2688e8b0da8edc7eb408045b2e1977530d37c596" translate="yes" xml:space="preserve">
          <source>The index of the last occurrence of the specified value; &lt;strong&gt;-1&lt;/strong&gt; if not found.</source>
          <target state="translated">指定された値の最後の出現のインデックス。見つからない場合は&lt;strong&gt;-1&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="62d0db95ea8db301c0efb25238eefb7d18b0e228" translate="yes" xml:space="preserve">
          <source>The index of the search at which the result was found.</source>
          <target state="translated">検索結果が出てきた時のインデックス。</target>
        </trans-unit>
        <trans-unit id="fa293dfc3493ff8b6c630513657905198938ab16" translate="yes" xml:space="preserve">
          <source>The index to start the search at. If the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. If the provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).</source>
          <target state="translated">検索を開始するインデックス。インデックスが配列の長さ以上の場合は -1 が返され、これは配列が検索されないことを意味します。指定したインデックスの値が負の値の場合は、配列の末尾からのオフセットとして扱われます。注意:指定したインデックスが負の値の場合でも、配列は前から後ろへと検索されます。指定した添字が 0 の場合は、 配列全体が検索されます。デフォルト:0 (配列全体が検索されます)。</target>
        </trans-unit>
        <trans-unit id="4d2a4eec9e0b63b8347194f0bc4e552a4976fa62" translate="yes" xml:space="preserve">
          <source>The index to start the search at. If the index is greater than or equal to the typed array's length, -1 is returned, which means the typed array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the typed array. Note: if the provided index is negative, the typed array is still searched from front to back. If the calculated index is less than 0, then the whole typed array will be searched. Default: 0 (entire typed array is searched).</source>
          <target state="translated">検索を開始するインデックス。インデックスが型付き配列の長さ以上の場合は -1 が返され、型付き配列は検索されないことを意味します。指定したインデックスの値が負の値の場合は、型付き配列の末尾からのオフセットとして扱われます。注意:与えられたインデックスが負の値であっても,型付き配列は前から後ろへと検索されます.計算されたインデックスが 0 より小さい場合は、 型付き配列全体が検索されます。デ フ ォル ト:0 (型付き配列全体が検索されます)。</target>
        </trans-unit>
        <trans-unit id="19ca37885e086cbd7ab6a124dd7cf6b5a835d382" translate="yes" xml:space="preserve">
          <source>The inequality operator (&lt;code&gt;!=&lt;/code&gt;) checks whether its two operands are not equal, returning a Boolean result. Unlike the &lt;a href=&quot;strict_inequality&quot;&gt;strict inequality&lt;/a&gt; operator, it attempts to convert and compare operands that are of different types.</source>
          <target state="translated">不等演算子（ &lt;code&gt;!=&lt;/code&gt; ）は、その2つのオペランドが等しくないかどうかをチェックし、ブール結果を返します。&lt;a href=&quot;strict_inequality&quot;&gt;厳密な不等式&lt;/a&gt;演算子とは異なり、異なるタイプのオペランドを変換して比較しようとします。</target>
        </trans-unit>
        <trans-unit id="61be6869a689d83741071b7813b80bb6f57839d9" translate="yes" xml:space="preserve">
          <source>The inequality operator checks whether its operands are not equal. It is the negation of the &lt;a href=&quot;equality&quot;&gt;equality&lt;/a&gt; operator so the following two lines will always give the same result:</source>
          <target state="translated">不等演算子は、そのオペランドが等しくないかどうかをチェックします。これは&lt;a href=&quot;equality&quot;&gt;等式&lt;/a&gt;演算子の否定であるため、次の2行は常に同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="d8b8a3f2c8db364b3507cacf9ce21da83426f378" translate="yes" xml:space="preserve">
          <source>The inequality operator returns true if the operands are not equal. If the two operands are &lt;strong&gt;not of the same type&lt;/strong&gt;, JavaScript attempts to convert the operands to an appropriate type for the comparison. If &lt;strong&gt;both operands are objects&lt;/strong&gt;, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.</source>
          <target state="translated">オペランドが等しくない場合、不等式演算子はtrueを返します。2つのオペランドが&lt;strong&gt;同じタイプ&lt;/strong&gt;で&lt;strong&gt;ない&lt;/strong&gt;場合、JavaScriptは比較のためにオペランドを適切なタイプに変換しようとします。場合&lt;strong&gt;、両方のオペランドがオブジェクトである&lt;/strong&gt;場合、JavaScriptはオペランドがメモリ内の別のオブジェクトを参照する際に等しくない内部参照とを比較します。</target>
        </trans-unit>
        <trans-unit id="4c62e98a3197c6dd398fc51d1f97f017634d0607" translate="yes" xml:space="preserve">
          <source>The initial implementation of arrow functions in Firefox made them automatically strict. This has been changed as of Firefox 24. The use of &lt;code&gt;'use strict';&lt;/code&gt; is now required.</source>
          <target state="translated">Firefoxでの矢印関数の初期実装により、それらは自動的に厳密になりました。これは、Firefox 24で変更されました &lt;code&gt;'use strict';&lt;/code&gt; 今は必須です。</target>
        </trans-unit>
        <trans-unit id="e2cedbf2ad5a475ab7c6f1a3d65b05101d8d5d7d" translate="yes" xml:space="preserve">
          <source>The initial number of elements of the WebAssembly Table.</source>
          <target state="translated">WebAssembly テーブルの初期要素数。</target>
        </trans-unit>
        <trans-unit id="6d97d69ef87b8296fe966c39e1420dc1ec050479" translate="yes" xml:space="preserve">
          <source>The initial size of the WebAssembly Memory, in units of WebAssembly pages.</source>
          <target state="translated">WebAssembly ページの単位で、WebAssembly メモリの初期サイズを指定します。</target>
        </trans-unit>
        <trans-unit id="384db43a561603d590c01e012347d7dfb5b09373" translate="yes" xml:space="preserve">
          <source>The initial value given by the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;iterator&lt;/strong&gt;. By default, using &lt;code&gt;arr[Symbol.iterator]&lt;/code&gt; will return the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;イテレーター&lt;/strong&gt;によって指定された初期値。デフォルトでは、 &lt;code&gt;arr[Symbol.iterator]&lt;/code&gt; を使用すると、&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;関数が返されます。</target>
        </trans-unit>
        <trans-unit id="97add4859ccc1075488c28286e2eb1e14afa1a9f" translate="yes" xml:space="preserve">
          <source>The initial value is &lt;a href=&quot;../asyncfunction&quot;&gt;&lt;code&gt;AsyncFunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期値は&lt;a href=&quot;../asyncfunction&quot;&gt; &lt;code&gt;AsyncFunction&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="aee7909b565a55b9102d403b3a9f7ca7c8d88ccf" translate="yes" xml:space="preserve">
          <source>The initial value is &lt;a href=&quot;../generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期値は&lt;a href=&quot;../generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="076448d00c0ef80b7d65965bf6ea4b611fe16bf8" translate="yes" xml:space="preserve">
          <source>The initial value is &lt;a href=&quot;asyncfunction&quot;&gt;&lt;code&gt;AsyncFunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期値は&lt;a href=&quot;asyncfunction&quot;&gt; &lt;code&gt;AsyncFunction&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="63e81e42fd0462c78d2acf6f66ad54f0748df6bd" translate="yes" xml:space="preserve">
          <source>The initial value is &lt;a href=&quot;generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期値は&lt;a href=&quot;generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="11a201eaed53ca1f42ae6eaa962b4ec5c5b3f9d9" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;Infinity&lt;/code&gt; is &lt;a href=&quot;number/positive_infinity&quot;&gt;&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;. The value &lt;code&gt;Infinity&lt;/code&gt; (positive infinity) is greater than any other number.</source>
          <target state="translated">The initial value of &lt;code&gt;Infinity&lt;/code&gt; is &lt;a href=&quot;number/positive_infinity&quot;&gt; &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt;. The value &lt;code&gt;Infinity&lt;/code&gt; (positive infinity) is greater than any other number.</target>
        </trans-unit>
        <trans-unit id="5f65b271a3137f2d97bec42645a6d8a33b1633fd" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;Infinity&lt;/code&gt; is &lt;a href=&quot;number/positive_infinity&quot;&gt;&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;. The value &lt;code&gt;Infinity&lt;/code&gt; (positive infinity) is greater than any other number. Mathematically, this value behaves the same as infinity; for example, any positive number multiplied by &lt;code&gt;Infinity&lt;/code&gt; equals &lt;code&gt;Infinity&lt;/code&gt;, and any number divided by &lt;code&gt;Infinity&lt;/code&gt; equals 0.</source>
          <target state="translated">&lt;code&gt;Infinity&lt;/code&gt; の初期値は&lt;a href=&quot;number/positive_infinity&quot;&gt; &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt;です。値 &lt;code&gt;Infinity&lt;/code&gt; （正の無限大）は、他のどの数値よりも大きくなっています。数学的には、この値は無限大と同じように動作します。例えば、乗じ任意の正の数 &lt;code&gt;Infinity&lt;/code&gt; 等しい &lt;code&gt;Infinity&lt;/code&gt; 、そしてで割った任意の数の &lt;code&gt;Infinity&lt;/code&gt; 0に等しいです。</target>
        </trans-unit>
        <trans-unit id="c418a3fa301bec1069877c8dc7042090de30c82d" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;NaN&lt;/code&gt; is Not-A-Number &amp;mdash; the same as the value of &lt;a href=&quot;number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt;. In modern browsers, &lt;code&gt;NaN&lt;/code&gt; is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; の初期値はNot-A-Numberです&amp;mdash; &lt;a href=&quot;number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt;の値と同じです。最近のブラウザーでは、 &lt;code&gt;NaN&lt;/code&gt; は構成や書き込みができないプロパティです。そうでない場合でも、オーバーライドしないでください。</target>
        </trans-unit>
        <trans-unit id="be7e08fe713546ae096b3cf0ae964a3e47acb908" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;NaN&lt;/code&gt; is Not-A-Number &amp;mdash; the same as the value of &lt;a href=&quot;number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt;. In modern browsers, &lt;code&gt;NaN&lt;/code&gt; is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use &lt;code&gt;NaN&lt;/code&gt; in a program.</source>
          <target state="translated">The initial value of &lt;code&gt;NaN&lt;/code&gt; is Not-A-Number &amp;mdash; the same as the value of &lt;a href=&quot;number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt;. In modern browsers, &lt;code&gt;NaN&lt;/code&gt; is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use &lt;code&gt;NaN&lt;/code&gt; in a program.</target>
        </trans-unit>
        <trans-unit id="db0124b194767f126534be91644b40181ea57381" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;a href=&quot;../../symbol/tostringtag&quot;&gt;@@toStringTag&lt;/a&gt; property is the String value &quot;WebAssembly.Global&quot;.</source>
          <target state="translated">&lt;a href=&quot;../../symbol/tostringtag&quot;&gt;@@ toStringTag&lt;/a&gt;プロパティの初期値は、文字列値「WebAssembly.Global」です。</target>
        </trans-unit>
        <trans-unit id="80a39f1289d57e9b7acde6c3c12f79a398087487" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;a href=&quot;../../symbol/tostringtag&quot;&gt;@@toStringTag&lt;/a&gt; property is the String value &quot;WebAssembly.Module&quot;.</source>
          <target state="translated">&lt;a href=&quot;../../symbol/tostringtag&quot;&gt;@@ toStringTag&lt;/a&gt;プロパティの初期値は、文字列値「WebAssembly.Module」です。</target>
        </trans-unit>
        <trans-unit id="b0d241fff69293ce9e49dc1b559b97c8cb54b884" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;a href=&quot;../symbol/tostringtag&quot;&gt;@@toStringTag&lt;/a&gt; property is the String value &quot;WebAssembly.Global&quot;.</source>
          <target state="translated">&lt;a href=&quot;../symbol/tostringtag&quot;&gt;@@ toStringTag&lt;/a&gt;プロパティの初期値は、文字列値「WebAssembly.Global」です。</target>
        </trans-unit>
        <trans-unit id="9371f12289009957f08e8d76c6fd856e4b2e5784" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;a href=&quot;../symbol/tostringtag&quot;&gt;@@toStringTag&lt;/a&gt; property is the String value &quot;WebAssembly.Module&quot;.</source>
          <target state="translated">&lt;a href=&quot;../symbol/tostringtag&quot;&gt;@@ toStringTag&lt;/a&gt;プロパティの初期値は、文字列値「WebAssembly.Module」です。</target>
        </trans-unit>
        <trans-unit id="712e5c4e8ec05e3b52fd206af05fda8828fa72c7" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;../../global_objects/array/values&quot;&gt;&lt;code&gt;Array.prototype.values&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">初期値 &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; プロパティは初期値と同様の機能オブジェクトである&lt;a href=&quot;../../global_objects/array/values&quot;&gt; &lt;code&gt;Array.prototype.values&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="9b2d88202cf167ea232a92a23340f333bf22c2ee" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;entries&quot;&gt;&lt;code&gt;entries&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">初期値 &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; プロパティは初期値と同様の機能オブジェクトである&lt;a href=&quot;entries&quot;&gt; &lt;code&gt;entries&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="992e738b4469cf33753b498f2228027ceb609d0d" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">初期値 &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; プロパティが初期値と同じ機能オブジェクトである&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="eb75aec2ed25274744212f06bc40052dea8d2895" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">初期値 &lt;code&gt;&lt;strong&gt;@@iterator&lt;/strong&gt;&lt;/code&gt; プロパティは初期値と同様の機能オブジェクトである&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="7f8d5716bc997a4ea02c10dfefa6c90666bf523f" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;@@iterator&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;entries&quot;&gt;&lt;code&gt;entries&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">The initial value of the &lt;code&gt;@@iterator&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;entries&quot;&gt; &lt;code&gt;entries&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="fc793fecbee3106a83bb88206c01e248be004375" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;@@iterator&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">The initial value of the &lt;code&gt;@@iterator&lt;/code&gt; property is the same function object as the initial value of the &lt;a href=&quot;values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt; property.</target>
        </trans-unit>
        <trans-unit id="908a6afd8fabd6ba8ea5189af979655ebc99c2e3" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;code&gt;Boolean&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; オブジェクトの初期値。</target>
        </trans-unit>
        <trans-unit id="e0276b8452afec103e0d6f2bce86d41251d1d525" translate="yes" xml:space="preserve">
          <source>The initial value of the @@iterator property is the same function object as the initial value of the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">@@ iteratorプロパティの初期値は、&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;プロパティの初期値と同じ関数オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="8b3d9964c6f6b12a69d601e5a1895356521b6dac" translate="yes" xml:space="preserve">
          <source>The input to an array comprehension does not itself need to be an array; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterators and generators&lt;/a&gt; can also be used.</source>
          <target state="translated">配列内包への入力は、それ自体が配列である必要はありません。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;イテレータとジェネレータ&lt;/a&gt;も使用できます。</target>
        </trans-unit>
        <trans-unit id="2fa9cbac508b25de09d188d60d05781a41f27e0d" translate="yes" xml:space="preserve">
          <source>The instances of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; implement the &lt;code&gt;toJSON()&lt;/code&gt; function by returning a string (the same as &lt;code&gt;date.toISOString()&lt;/code&gt;). Thus, they are treated as strings.</source>
          <target state="translated">&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;のインスタンスは、文字列を返すことによって &lt;code&gt;toJSON()&lt;/code&gt; 関数を実装します（ &lt;code&gt;date.toISOString()&lt;/code&gt; と同じ）。したがって、それらは文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="50b637825f6db8a063c62c3d0839f81edfc5dbaf" translate="yes" xml:space="preserve">
          <source>The integer number.</source>
          <target state="translated">整数である。</target>
        </trans-unit>
        <trans-unit id="39a0cd03f3df0893aa1d9bce2051e7012e00edf1" translate="yes" xml:space="preserve">
          <source>The integer part of the given number.</source>
          <target state="translated">与えられた数の整数部。</target>
        </trans-unit>
        <trans-unit id="f14753e012b3c81831ae95b244eb5d7eb2c42206" translate="yes" xml:space="preserve">
          <source>The integer to clamp to fit into the supplied bits.</source>
          <target state="translated">指定されたビットに収まるようにクランプする整数。</target>
        </trans-unit>
        <trans-unit id="4ca3837b8e5127cde99f915542009d4c7095f100" translate="yes" xml:space="preserve">
          <source>The internationalization constructors as well as several language sensitive methods of other constructors (listed under &lt;a href=&quot;#See_also&quot;&gt;See also&lt;/a&gt;) use a common pattern for identifying locales and determing the one they will actually use: they all accept &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and negotiate the requested locale(s) against the locales they support using an algorithm specified in the &lt;code&gt;options.localeMatcher&lt;/code&gt; property.</source>
          <target state="translated">国際化コンストラクターおよび他のコンストラクターのいくつかの言語依存のメソッド（&lt;a href=&quot;#See_also&quot;&gt;「」にも&lt;/a&gt;リストされています）は、ロケールを識別し、実際に使用するロケールを決定するための共通のパターンを使用します。これらはすべて &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を受け入れ、要求されたロケールをネゴシエートします） &lt;code&gt;options.localeMatcher&lt;/code&gt; プロパティで指定されたアルゴリズムを使用して、サポートするロケールに対して。</target>
        </trans-unit>
        <trans-unit id="ec2b19cacb666c23b3f9fe5a980e1192cf9219cc" translate="yes" xml:space="preserve">
          <source>The internationalization constructors as well as several language sensitive methods of other constructors (listed under &lt;a href=&quot;#See_also&quot;&gt;See also&lt;/a&gt;) use a common pattern for identifying locales and determining the one they will actually use: they all accept &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and negotiate the requested locale(s) against the locales they support using an algorithm specified in the &lt;code&gt;options.localeMatcher&lt;/code&gt; property.</source>
          <target state="translated">The internationalization constructors as well as several language sensitive methods of other constructors (listed under &lt;a href=&quot;#See_also&quot;&gt;See also&lt;/a&gt;) use a common pattern for identifying locales and determining the one they will actually use: they all accept &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and negotiate the requested locale(s) against the locales they support using an algorithm specified in the &lt;code&gt;options.localeMatcher&lt;/code&gt; property.</target>
        </trans-unit>
        <trans-unit id="afaec0fcc64f246e903edaa8bb2b4e101dc76db2" translate="yes" xml:space="preserve">
          <source>The inverted order of the logs is due to the fact that the &lt;code&gt;then&lt;/code&gt; handlers are called asynchronously. See how &lt;code&gt;then&lt;/code&gt; works &lt;a href=&quot;then#Return_value&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">ログの順序が逆になっているのは、 &lt;code&gt;then&lt;/code&gt; ハンドラーが非同期で呼び出されるためです。&lt;a href=&quot;then#Return_value&quot;&gt;ここで&lt;/a&gt;どのよう &lt;code&gt;then&lt;/code&gt; 機能するかを参照してください。</target>
        </trans-unit>
        <trans-unit id="e2407a47bc811ed16f411c7aa7f8c69fef16c07a" translate="yes" xml:space="preserve">
          <source>The iterable protocol</source>
          <target state="translated">イテレート可能なプロトコル</target>
        </trans-unit>
        <trans-unit id="6a49d38d3e9af007b56150fc6cc735996df7207d" translate="yes" xml:space="preserve">
          <source>The iterator protocol</source>
          <target state="translated">イテレータプロトコル</target>
        </trans-unit>
        <trans-unit id="c1b64483d71e82bf0db593563f457a8c78317073" translate="yes" xml:space="preserve">
          <source>The key of the element to add to the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">The key of the element to add to the &lt;code&gt;Map&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="1868524840cb8c9373d2e11b9f2e161936f51617" translate="yes" xml:space="preserve">
          <source>The key of the element to remove from the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクトから削除する要素のキー。</target>
        </trans-unit>
        <trans-unit id="f5ea5fb7fd444c843ca9edf509a1d4a07414236f" translate="yes" xml:space="preserve">
          <source>The key of the element to remove from the &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">The key of the element to remove from the &lt;code&gt;WeakMap&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="0b08a924b9ddd5faf279b294a411c3221871b979" translate="yes" xml:space="preserve">
          <source>The key of the element to return from the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">The key of the element to return from the &lt;code&gt;Map&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="3fc3693407796aadd1b54ea18a2e94bb767ecf3e" translate="yes" xml:space="preserve">
          <source>The key of the element to test for presence in the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">The key of the element to test for presence in the &lt;code&gt;Map&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="77e35d193d3aadcf285e8ef1dc74935b95bd853a" translate="yes" xml:space="preserve">
          <source>The keys in &lt;code&gt;Map&lt;/code&gt; are ordered in a simple, straightforward way: A &lt;code&gt;Map&lt;/code&gt; object iterates entries, keys, and values in the order of entry insertion.</source>
          <target state="translated">The keys in &lt;code&gt;Map&lt;/code&gt; are ordered in a simple, straightforward way: A &lt;code&gt;Map&lt;/code&gt; object iterates entries, keys, and values in the order of entry insertion.</target>
        </trans-unit>
        <trans-unit id="211433a70ab11e97b43158c1ee7e05bc7ddce2d0" translate="yes" xml:space="preserve">
          <source>The keys in Map are ordered while keys added to object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.</source>
          <target state="translated">Map のキーは順序付けられていますが、オブジェクトに追加されたキーは順序付けられていません。したがって、Map オブジェクトを反復処理すると、Map オブジェクトは挿入された順にキーを返します。</target>
        </trans-unit>
        <trans-unit id="6211d93351d1d4483c62d7f40f7a3dd0844ca0e1" translate="yes" xml:space="preserve">
          <source>The keys of an &lt;code&gt;Object&lt;/code&gt; are &lt;a href=&quot;string&quot;&gt;&lt;code&gt;Strings&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbols&lt;/code&gt;&lt;/a&gt;, whereas they can be any value for a &lt;code&gt;Map&lt;/code&gt;, including functions, objects, and any primitive.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; のキーは&lt;a href=&quot;string&quot;&gt; &lt;code&gt;Strings&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;symbol&quot;&gt; &lt;code&gt;Symbols&lt;/code&gt; &lt;/a&gt;ですが、関数、オブジェクト、プリミティブなど、 &lt;code&gt;Map&lt;/code&gt; 任意の値を使用できます。</target>
        </trans-unit>
        <trans-unit id="6747ecf216749394cb9c66886089f753478a281b" translate="yes" xml:space="preserve">
          <source>The keys of an &lt;code&gt;Object&lt;/code&gt; must be either a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The keys of an &lt;code&gt;Object&lt;/code&gt; must be either a &lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; or a &lt;a href=&quot;symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="866ff8399d6ef75a53519a8e870348f9133e3e03" translate="yes" xml:space="preserve">
          <source>The largest of the given numbers. If any of the arguments are &lt;code&gt;NaN&lt;/code&gt; or cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">The largest of the given numbers. If any of the arguments are &lt;code&gt;NaN&lt;/code&gt; or cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="dc94c4750c8d568e4f0b60dafef98fd45b17a18f" translate="yes" xml:space="preserve">
          <source>The largest of the given numbers. If at least one of the arguments cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された数値の最大値。少なくとも1つの引数を数値に変換できない場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="f07b0bca82f376241bf56059c0415eeb6ab39970" translate="yes" xml:space="preserve">
          <source>The largest positive representable number.</source>
          <target state="translated">最大の正の表現可能数。</target>
        </trans-unit>
        <trans-unit id="49c65db2ab615eb7f210bbeee34dbf5701ac3a2d" translate="yes" xml:space="preserve">
          <source>The last index of the element in the array; &lt;code&gt;-1&lt;/code&gt; if not found.</source>
          <target state="translated">The last index of the element in the array; &lt;code&gt;-1&lt;/code&gt; if not found.</target>
        </trans-unit>
        <trans-unit id="19eafe8fd5db358ddfcd304b8bed92efe70d1500" translate="yes" xml:space="preserve">
          <source>The last index of the element in the array; &lt;strong&gt;-1&lt;/strong&gt; if not found.</source>
          <target state="translated">配列内の要素の最後のインデックス。見つからない場合は&lt;strong&gt;-1&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="86599324ad1c7b940955456bbdbd5ce54c5d61eb" translate="yes" xml:space="preserve">
          <source>The last matched characters.</source>
          <target state="translated">最後に一致した文字。</target>
        </trans-unit>
        <trans-unit id="db12265443921a1cee13cdabf0c5d4c0b508019a" translate="yes" xml:space="preserve">
          <source>The latest version of ECMAScript (ES2015) contains the &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt; function. &lt;code&gt;Number.isNaN(x)&lt;/code&gt; will be a reliable way to test whether &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or not. Even with &lt;code&gt;Number.isNaN&lt;/code&gt;, however, the meaning of &lt;code&gt;NaN&lt;/code&gt; remains the precise numeric meaning, and not simply, &quot;not a number&quot;. Alternatively, in absense of &lt;code&gt;Number.isNaN&lt;/code&gt;, the expression &lt;code&gt;(x != x)&lt;/code&gt; is a more reliable way to test whether variable &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or not, as the result is not subject to the false positives that make &lt;code&gt;isNaN&lt;/code&gt; unreliable.</source>
          <target state="translated">ECMAScript（ES2015）の最新バージョンには、&lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;Number.isNaN()&lt;/code&gt; &lt;/a&gt;関数が含まれています。 &lt;code&gt;Number.isNaN(x)&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; かどうかをテストする信頼できる方法です。ただし、 &lt;code&gt;Number.isNaN&lt;/code&gt; を使用しても、 &lt;code&gt;NaN&lt;/code&gt; の意味は正確な数値の意味のままであり、単に「数値ではない」というわけではありません。あるいは、Number.isNaNを &lt;code&gt;Number.isNaN&lt;/code&gt; 場合、式 &lt;code&gt;(x != x)&lt;/code&gt; は、変数 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; かどうかをテストするためのより信頼できる方法です。これは、 &lt;code&gt;isNaN&lt;/code&gt; の信頼性を低下させる誤検出の影響を受けないためです。</target>
        </trans-unit>
        <trans-unit id="c6e277a30ab922ccb5a769f9c7a9b0af2b13d83d" translate="yes" xml:space="preserve">
          <source>The latter approach will cause &lt;em&gt;any&lt;/em&gt; operation that attempts to mutate, to throw. This approach is best if you want even non-throwing operations to throw on failure, or you want to throw a custom exception value.</source>
          <target state="translated">後者のアプローチでは、ミューテーションやスローを試みる操作が発生し&lt;em&gt;ます&lt;/em&gt;。このアプローチは、スローしない操作でも失敗時にスローする場合、またはカスタム例外値をスローする場合に最適です。</target>
        </trans-unit>
        <trans-unit id="336d2cf539e17bb1afd7a1270afba25d8f127ea1" translate="yes" xml:space="preserve">
          <source>The latter approach will cause &lt;em&gt;any&lt;/em&gt; operation that attempts to mutate, to throw. This approach is required if you want even non-throwing operations to throw on failure, or you want to throw a custom exception value.</source>
          <target state="translated">後者のアプローチでは、変更やスローを試行する操作が発生し&lt;em&gt;ます&lt;/em&gt;。この方法は、スローしない操作でも失敗時にスローする場合や、カスタム例外値をスローする場合に必要です。</target>
        </trans-unit>
        <trans-unit id="1d4e81e8442a37e766ec235fa9e145dab4dbc78a" translate="yes" xml:space="preserve">
          <source>The left shift assignment operator (&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;) moves the specified amount of bits to the left and assigns the result to the variable.</source>
          <target state="translated">左シフト代入演算子（ &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; ）は、指定されたビット数を左に移動し、結果を変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="0cbbb0ab6793d975f719fbef2c67c6385ccf1a65" translate="yes" xml:space="preserve">
          <source>The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Left_shift&quot;&gt;left shift operator&lt;/a&gt; for more details.</source>
          <target state="translated">左シフト代入演算子は、指定された量のビットを左に移動し、結果を変数に代入します。詳細については、&lt;a href=&quot;bitwise_operators#Left_shift&quot;&gt;左シフト演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8b3c2c94f936040ea46d72272cfabd914c2f6437" translate="yes" xml:space="preserve">
          <source>The legacy Iterator protocol</source>
          <target state="translated">レガシーな Iterator プロトコル</target>
        </trans-unit>
        <trans-unit id="c67e01cd42b5d832a6836a5cff2c4c89bf3be123" translate="yes" xml:space="preserve">
          <source>The legacy RegExp &lt;strong&gt;$1, $2, $3, $4, $5, $6, $7, $8, $9&lt;/strong&gt; properties are static and read-only properties of regular expressions that contain parenthesized substring matches.</source>
          <target state="translated">従来のRegExp &lt;strong&gt;$ 1、$ 2、$ 3、$ 4、$ 5、$ 6、$ 7、$ 8、$ 9&lt;/strong&gt;プロパティは、括弧で囲まれた部分文字列の一致を含む正規表現の静的で読み取り専用のプロパティです。</target>
        </trans-unit>
        <trans-unit id="3f1956bcda7ec78590c84d8bc374c074b819abeb" translate="yes" xml:space="preserve">
          <source>The legacy generator function</source>
          <target state="translated">レガシージェネレーター機能</target>
        </trans-unit>
        <trans-unit id="c29848494777d9229bbbb16d3bed7009b060e54f" translate="yes" xml:space="preserve">
          <source>The legacy generator function expression</source>
          <target state="translated">レガシージェネレーターの関数式</target>
        </trans-unit>
        <trans-unit id="da00f0c0d7a586703b854f143d86be4ec9fe0746" translate="yes" xml:space="preserve">
          <source>The length (in bytes) of this view from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. Fixed at construction time and thus &lt;strong&gt;read only.&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;先頭からのこのビューの長さ（バイト単位）。構築時に修正されるため、&lt;strong&gt;読み取り専用です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77008722c9777866e545efeaee6431ea6dd2a61e" translate="yes" xml:space="preserve">
          <source>The length (in bytes) of this view from the start of its &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. Fixed at construction time and thus &lt;strong&gt;read only.&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;先頭からのこのビューの長さ（バイト単位）。構築時に修正されるため、&lt;strong&gt;読み取り専用です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ba4ce713790c76252887b80a74a3a7334fad90a" translate="yes" xml:space="preserve">
          <source>The length of the formated message. Possible values are: &lt;code&gt;&quot;long&quot;&lt;/code&gt; (default, e.g., &lt;code&gt;A, B, and C&lt;/code&gt;); &lt;code&gt;&quot;short&quot;&lt;/code&gt; (e.g., &lt;code&gt;A, B, C&lt;/code&gt;), or &lt;code&gt;&quot;narrow&quot;&lt;/code&gt; (e.g., &lt;code&gt;A&amp;nbsp;B&amp;nbsp;C&lt;/code&gt;). When &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;short&lt;/code&gt; or &lt;code&gt;narrow&lt;/code&gt;, &lt;code&gt;unit&lt;/code&gt; is the only allowed value for the type option.</source>
          <target state="translated">フォーマットされたメッセージの長さ。可能な値は次のとおりです。 &lt;code&gt;&quot;long&quot;&lt;/code&gt; （デフォルト、例： &lt;code&gt;A, B, and C&lt;/code&gt; ）; &lt;code&gt;&quot;short&quot;&lt;/code&gt; （例、 &lt;code&gt;A, B, C&lt;/code&gt; ）、または &lt;code&gt;&quot;narrow&quot;&lt;/code&gt; （例、 &lt;code&gt;A&amp;nbsp;B&amp;nbsp;C&lt;/code&gt; ）。とき &lt;code&gt;style&lt;/code&gt; あり &lt;code&gt;short&lt;/code&gt; または &lt;code&gt;narrow&lt;/code&gt; 、 &lt;code&gt;unit&lt;/code&gt; タイプオプションについてのみ許可された値です。</target>
        </trans-unit>
        <trans-unit id="e8ee2fbedeca943142dde88c1422c234cd4c7018" translate="yes" xml:space="preserve">
          <source>The length of the internationalized message. Possible values are:</source>
          <target state="translated">国際化されたメッセージの長さ。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c0951926215dfc9e12476ded77d10961b76fd784" translate="yes" xml:space="preserve">
          <source>The length of the resulting string once the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; has been padded. If the value is less than &lt;code&gt;&lt;var&gt;str.&lt;/var&gt;length&lt;/code&gt;, then &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; is returned as-is.</source>
          <target state="translated">The length of the resulting string once the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; has been padded. If the value is less than &lt;code&gt;&lt;var&gt;str.&lt;/var&gt;length&lt;/code&gt; , then &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; is returned as-is.</target>
        </trans-unit>
        <trans-unit id="2c368be97586cd765b450c64fcdbe05ae43efa8c" translate="yes" xml:space="preserve">
          <source>The length of the resulting string once the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; has been padded. If the value is lower than &lt;code&gt;&lt;var&gt;str.&lt;/var&gt;length&lt;/code&gt;, the current string will be returned as-is.</source>
          <target state="translated">The length of the resulting string once the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; has been padded. If the value is lower than &lt;code&gt;&lt;var&gt;str.&lt;/var&gt;length&lt;/code&gt; , the current string will be returned as-is.</target>
        </trans-unit>
        <trans-unit id="7db0c884f71c632e913847c53c3b91d57782f8da" translate="yes" xml:space="preserve">
          <source>The length of the resulting string once the current string has been padded. If the value is less than the current string's length, the current string is returned as is.</source>
          <target state="translated">現在の文字列がパディングされた後の結果の文字列の長さ。この値が現在の文字列の長さよりも小さい場合は、現在の文字列がそのまま返されます。</target>
        </trans-unit>
        <trans-unit id="59a7fdc58b461568171aeae93e15395e1ca39535" translate="yes" xml:space="preserve">
          <source>The length of the resulting string once the current string has been padded. If the value is lower than the current string's length, the current string will be returned as is.</source>
          <target state="translated">現在の文字列がパディングされた後の結果の文字列の長さ。この値が現在の文字列の長さよりも低い場合は、現在の文字列がそのまま返されます。</target>
        </trans-unit>
        <trans-unit id="097a58ccc4c76e84486d168761668af816c206fe" translate="yes" xml:space="preserve">
          <source>The length property of the &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; prototype object has a value of 0.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;プロトタイプオブジェクトのlengthプロパティの値は0です。</target>
        </trans-unit>
        <trans-unit id="e9b65d5bb2d3708f29780d281a4523a7ac83ea2d" translate="yes" xml:space="preserve">
          <source>The less than operator (&lt;code&gt;&amp;lt;&lt;/code&gt;) returns &lt;code&gt;true&lt;/code&gt; if the left operand is less than the right operand, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">より小さい演算子（ &lt;code&gt;&amp;lt;&lt;/code&gt; ）は、左のオペランドが右のオペランドよりも小さい場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2512fd4fad823950bad2897cd47f75878de9cef5" translate="yes" xml:space="preserve">
          <source>The less than operator returns true if the left operand is less than the right operand.</source>
          <target state="translated">less than演算子は、左のオペランドが右のオペランドよりも小さい場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="06072d04efee4768c66e7bd4b161444f03d7518e" translate="yes" xml:space="preserve">
          <source>The less than or equal operator (&lt;code&gt;&amp;lt;=&lt;/code&gt;) returns &lt;code&gt;true&lt;/code&gt; if the left operand is less than or equal to the right operand, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">以下の演算子（ &lt;code&gt;&amp;lt;=&lt;/code&gt; ）は、左のオペランドが右のオペランド以下の場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fc1d5ba2e8f8fbc3e0fe7f1234102289d52aa0cc" translate="yes" xml:space="preserve">
          <source>The less than or equal operator returns true if the left operand is less than or equal to the right operand.</source>
          <target state="translated">less than or equal演算子は、左のオペランドが右のオペランド以下の場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="247faea6561900f1bf43bd0ec224ad5b31c47a0c" translate="yes" xml:space="preserve">
          <source>The limitation of static variables being called by only static methods still holds.</source>
          <target state="translated">静的変数が静的メソッドのみで呼び出されるという制限はまだあります。</target>
        </trans-unit>
        <trans-unit id="ab7556bfbedd075dad431bc7e1df48dc530681a4" translate="yes" xml:space="preserve">
          <source>The line number of the code that caused the exception</source>
          <target state="translated">例外の原因となったコードの行番号</target>
        </trans-unit>
        <trans-unit id="2c1794b2194b8f84bbf8cdc0171c5eaf6690c183" translate="yes" xml:space="preserve">
          <source>The line number of the code that caused the exception.</source>
          <target state="translated">例外の原因となったコードの行番号。</target>
        </trans-unit>
        <trans-unit id="11787947e310495c41e64e406969f0ee7b2d021b" translate="yes" xml:space="preserve">
          <source>The line terminator restriction is now implemented. No line terminator between &quot;yield&quot; and &quot;*&quot; is allowed. Code like the following will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">行終端記号の制限が実装されました。「yield」と「*」の間の行末記号は許可されていません。次のようなコードは&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;をスローします：</target>
        </trans-unit>
        <trans-unit id="dfcc2f244bcd66b891e4eecbe426929f7ec254e3" translate="yes" xml:space="preserve">
          <source>The list of arguments for the call.</source>
          <target state="translated">呼び出しの引数のリスト。</target>
        </trans-unit>
        <trans-unit id="ae31076a9f177eccd00fa3c413520f8a494b792b" translate="yes" xml:space="preserve">
          <source>The list of arguments for the constructor.</source>
          <target state="translated">コンストラクタの引数のリスト。</target>
        </trans-unit>
        <trans-unit id="fb39eae30439dd3c090ea07c8777ac4f939b4994" translate="yes" xml:space="preserve">
          <source>The list of locales specified by the &lt;code&gt;locales&lt;/code&gt; argument, after Unicode extensions have been removed from them, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the &quot;&lt;code&gt;lookup&lt;/code&gt;&quot; matcher follows the Lookup algorithm specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc4647#section-3.4&quot;&gt;BCP 47&lt;/a&gt;; the &quot;&lt;code&gt;best fit&lt;/code&gt;&quot; matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a &lt;code&gt;locales&lt;/code&gt; argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the &lt;code&gt;options&lt;/code&gt; argument (see below).</source>
          <target state="translated">The list of locales specified by the &lt;code&gt;locales&lt;/code&gt; argument, after Unicode extensions have been removed from them, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the &quot; &lt;code&gt;lookup&lt;/code&gt; &quot; matcher follows the Lookup algorithm specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc4647#section-3.4&quot;&gt;BCP 47&lt;/a&gt;; the &quot; &lt;code&gt;best fit&lt;/code&gt; &quot; matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a &lt;code&gt;locales&lt;/code&gt; argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the &lt;code&gt;options&lt;/code&gt; argument (see below).</target>
        </trans-unit>
        <trans-unit id="e09c928783446c582c9061aeea7d31de17f49c41" translate="yes" xml:space="preserve">
          <source>The literal notation provides a compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.</source>
          <target state="translated">リテラル記法は、正規表現が評価されるときのコンパイルを提供します。正規表現が不変である場合には、リテラル記法を使用します。例えば、ループで使用される正規表現を構築するためにリテラル記法を使用した場合、正規表現は各反復で再コンパイルされません。</target>
        </trans-unit>
        <trans-unit id="e632d0f8f15b4a76b37368b62c4a2ea1576294c1" translate="yes" xml:space="preserve">
          <source>The literal notation results in compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.</source>
          <target state="translated">リテラル記法は、式が評価されるときに正規表現をコンパイルする結果となります。正規表現が不変である場合は、リテラル記法を使用してください。例えば、ループで使用される正規表現を構築するためにリテラル記法を使用した場合、正規表現は各反復で再コンパイルされません。</target>
        </trans-unit>
        <trans-unit id="836d6b39dcee531957555ac70c92843c2287d5f5" translate="yes" xml:space="preserve">
          <source>The locale and style options used for formatting are given when constructing the &lt;a href=&quot;../listformat&quot;&gt;&lt;code&gt;Intl.ListFormat&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">書式設定に使用されるロケールとスタイルのオプションは、&lt;a href=&quot;../listformat&quot;&gt; &lt;code&gt;Intl.ListFormat&lt;/code&gt; &lt;/a&gt;インスタンスを作成するときに指定されます。</target>
        </trans-unit>
        <trans-unit id="075fea778d5aba872a320a491efa45b6a9ff0825" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &quot;&lt;code&gt;lookup&lt;/code&gt;&quot; and &quot;&lt;code&gt;best fit&lt;/code&gt;&quot;; the default is &quot;&lt;code&gt;best fit&lt;/code&gt;&quot;. For information about this option, see the &lt;a href=&quot;../../intl#Locale_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は「 &lt;code&gt;lookup&lt;/code&gt; 」と「 &lt;code&gt;best fit&lt;/code&gt; 」です。デフォルトは「 &lt;code&gt;best fit&lt;/code&gt; 」です。このオプションの詳細については、&lt;a href=&quot;../../intl#Locale_negotiation&quot;&gt;Intlページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="66bfb9a0e80b5fe37705510f7e2ca2810e4bf6e0" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; and &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;. For information about this option, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; と &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。このオプションの詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f623a6dd0680a670f1b7614ee73e5b7c4450824" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; and &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;. For information about this option, see the &lt;a href=&quot;../../intl#Locale_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; と &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。このオプションの詳細については、&lt;a href=&quot;../../intl#Locale_negotiation&quot;&gt;Intlページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ecdf487cb297ef007af9affba8a853e49d1d2f25" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; and &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;. For information about this option, see the &lt;a href=&quot;../intl#Locale_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; と &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。このオプションの詳細については、&lt;a href=&quot;../intl#Locale_negotiation&quot;&gt;Intlページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fcfea36ae5984c02734a9ee41286258c981ac900" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; and &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;. For information about this option, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation&quot;&gt;&lt;code&gt;Intl&lt;/code&gt; page&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; と &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。このオプションの詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; ページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ea4319b67bf575f5ea3e182713b594901f135ec" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; and &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;. For information about this option, see the &lt;a href=&quot;intl#Locale_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; と &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; です。このオプションの詳細については、&lt;a href=&quot;intl#Locale_negotiation&quot;&gt;Intlページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5e1a8d8eacefe0157fd0cc92173501e3d944c194" translate="yes" xml:space="preserve">
          <source>The locale matching algorithm to use. Possible values are &lt;code&gt;lookup&lt;/code&gt; and &lt;code&gt;best fit&lt;/code&gt;; the default is &lt;code&gt;best fit&lt;/code&gt;. For information about this option, see the &lt;a href=&quot;../../intl#Locale_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">使用するロケールマッチングアルゴリズム。可能な値は &lt;code&gt;lookup&lt;/code&gt; と &lt;code&gt;best fit&lt;/code&gt; です; デフォルトは &lt;code&gt;best fit&lt;/code&gt; です。このオプションの詳細については、&lt;a href=&quot;../../intl#Locale_negotiation&quot;&gt;Intlページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7ae834bf6fb2ca8750d247580ed45d12536a9ac3" translate="yes" xml:space="preserve">
          <source>The logical AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with &lt;a href=&quot;../global_objects/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; (logical) values. When it is, it returns a Boolean value. However, the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.</source>
          <target state="translated">一連のオペランドの論理AND（ &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ）演算子（論理積）は、そのすべてのオペランドが真である場合にのみ真になります。通常、&lt;a href=&quot;../global_objects/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;（論理）値とともに使用されます。そうである場合、ブール値を返します。ただし、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子は実際には指定されたオペランドのいずれかの値を返すため、この演算子を非ブール値で使用すると、非ブール値が返されます。</target>
        </trans-unit>
        <trans-unit id="f336e366d871a94a6133585884d2c93c925fdeae" translate="yes" xml:space="preserve">
          <source>The logical AND assignment (&lt;code&gt;x &amp;amp;&amp;amp;= y&lt;/code&gt;) operator only assigns if &lt;code&gt;x&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;.</source>
          <target state="translated">論理AND代入（ &lt;code&gt;x &amp;amp;&amp;amp;= y&lt;/code&gt; ）演算子は、 &lt;code&gt;x&lt;/code&gt; が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;真である&lt;/a&gt;場合にのみ代入します。</target>
        </trans-unit>
        <trans-unit id="4e4d8d04f0ee501c34768651f340a481f44b568f" translate="yes" xml:space="preserve">
          <source>The logical AND expression is evaluated left to right, it is tested for possible &quot;short-circuit&quot; evaluation using the following rule:</source>
          <target state="translated">論理AND式は左から右に評価され、それは次のルールを使用して、可能性のある &quot;短絡 &quot;評価のためにテストされます。</target>
        </trans-unit>
        <trans-unit id="674951a40de3b8ce914cd17eaa748ab5ebe2f197" translate="yes" xml:space="preserve">
          <source>The logical NOT (&lt;code&gt;!&lt;/code&gt;) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with &lt;a href=&quot;../global_objects/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; (logical) values. When used with non-Boolean values, it returns &lt;code&gt;false&lt;/code&gt; if its single operand can be converted to &lt;code&gt;true&lt;/code&gt;; otherwise, returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">論理NOT（ &lt;code&gt;!&lt;/code&gt; ）演算子（論理補数、否定）は、真実を偽りに、またはその逆に解釈します。通常、&lt;a href=&quot;../global_objects/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;（論理）値とともに使用されます。ブール値以外で使用すると、単一のオペランドを &lt;code&gt;true&lt;/code&gt; に変換できる場合は &lt;code&gt;false&lt;/code&gt; が返されます。それ以外の場合は、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f1551306adbef2d689e0e547906c051b7b77ab5f" translate="yes" xml:space="preserve">
          <source>The logical OR (&lt;code&gt;||&lt;/code&gt;) operator</source>
          <target state="translated">論理OR（ &lt;code&gt;||&lt;/code&gt; ）演算子</target>
        </trans-unit>
        <trans-unit id="dfe3eba554c2a4a04ba0d948c3590a33700ad55b" translate="yes" xml:space="preserve">
          <source>The logical OR (&lt;code&gt;||&lt;/code&gt;) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with &lt;a href=&quot;../global_objects/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; (logical) values. When it is, it returns a Boolean value. However, the &lt;code&gt;||&lt;/code&gt; operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.</source>
          <target state="translated">オペランドのセットの論理OR（ &lt;code&gt;||&lt;/code&gt; ）演算子（論理和）は、そのオペランドの1つ以上が真である場合にのみ真になります。通常、&lt;a href=&quot;../global_objects/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;（論理）値とともに使用されます。そうである場合、ブール値を返します。ただし、 &lt;code&gt;||&lt;/code&gt; 演算子は実際には指定されたオペランドの1つの値を返すため、この演算子を非ブール値で使用すると、非ブール値が返されます。</target>
        </trans-unit>
        <trans-unit id="31c9e9f2e9e1a5486ec215b6bbdc7066940ca18e" translate="yes" xml:space="preserve">
          <source>The logical OR assignment (&lt;code&gt;x ||= y&lt;/code&gt;) operator only assigns if &lt;code&gt;x&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;.</source>
          <target state="translated">論理OR代入（ &lt;code&gt;x ||= y&lt;/code&gt; ）演算子は、 &lt;code&gt;x&lt;/code&gt; が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;偽である&lt;/a&gt;場合にのみ代入します。</target>
        </trans-unit>
        <trans-unit id="70d23b38d2c2648e2c2372b47ddcf5b00d89fa54" translate="yes" xml:space="preserve">
          <source>The logical OR expression is evaluated left to right, it is tested for possible &quot;short-circuit&quot; evaluation using the following rule:</source>
          <target state="translated">論理和式は左から右に評価され、次のルールを使用して可能性のある &quot;短絡 &quot;評価のためにテストされます。</target>
        </trans-unit>
        <trans-unit id="e5dc55a2bfff194780ecd9bf44897c9ac8eed3bc" translate="yes" xml:space="preserve">
          <source>The logical OR operator short-circuits: the second operand is only evaluated if the first operand doesn&amp;rsquo;t already determine the result.</source>
          <target state="translated">論理OR演算子が短絡します。第2オペランドは、第1オペランドが結果をまだ決定していない場合にのみ評価されます。</target>
        </trans-unit>
        <trans-unit id="81446777e0353a458313f8c32b9b6e3c01f21e9d" translate="yes" xml:space="preserve">
          <source>The logical nullish assignment (&lt;code&gt;x ??= y&lt;/code&gt;) operator only assigns if &lt;code&gt;x&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/nullish&quot;&gt;nullish&lt;/a&gt; (&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;).</source>
          <target state="translated">論理nullish代入（ &lt;code&gt;x ??= y&lt;/code&gt; ）演算子は、 &lt;code&gt;x&lt;/code&gt; が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/nullish&quot;&gt;nullish&lt;/a&gt;（ &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; ）の場合にのみ代入します。</target>
        </trans-unit>
        <trans-unit id="a05dc32ac748f9ab7fcae6a5c8a111cdcf7619cc" translate="yes" xml:space="preserve">
          <source>The logical operators are described in the following table:</source>
          <target state="translated">論理演算子については、以下の表で説明します。</target>
        </trans-unit>
        <trans-unit id="10ddbdac54892fdf37b69007fdde5c1641c2879e" translate="yes" xml:space="preserve">
          <source>The main differences to the &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; object are:</source>
          <target state="translated">&lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;オブジェクトとの主な違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8a5c3728502f2419a9f163704dc5ab1d99fd9260" translate="yes" xml:space="preserve">
          <source>The main program: main.js</source>
          <target state="translated">メインプログラム:main.js</target>
        </trans-unit>
        <trans-unit id="54a6539b67da7a728641f8b467252d0973af9215" translate="yes" xml:space="preserve">
          <source>The main purpose of the anonymous function here is to add a &lt;code&gt;print&lt;/code&gt; function to every object, which is able to print the correct index of the object in the array.</source>
          <target state="translated">The main purpose of the anonymous function here is to add a &lt;code&gt;print&lt;/code&gt; function to every object, which is able to print the correct index of the object in the array.</target>
        </trans-unit>
        <trans-unit id="68cce533cada724913297d3c94b69eb36109fa28" translate="yes" xml:space="preserve">
          <source>The major browsers now implement strict mode. However, don't blindly depend on it since there still are numerous &lt;a href=&quot;http://caniuse.com/use-strict&quot;&gt;Browser versions used in the wild that only have partial support for strict mode&lt;/a&gt; or do not support it at all (e.g. Internet Explorer below version 10!). &lt;em&gt;Strict mode changes semantics.&lt;/em&gt; Relying on those changes will cause mistakes and errors in browsers which don't implement strict mode. Exercise caution in using strict mode, and back up reliance on strict mode with feature tests that check whether relevant parts of strict mode are implemented. Finally, make sure to &lt;em&gt;test your code in browsers that do and don't support strict mode&lt;/em&gt;. If you test only in browsers that don't support strict mode, you're very likely to have problems in browsers that do, and vice versa.</source>
          <target state="translated">主要なブラウザは、strictモードを実装しています。ただし、&lt;a href=&quot;http://caniuse.com/use-strict&quot;&gt;厳密なモードを部分的にしか&lt;/a&gt;サポートしていないか、まったくサポートしていないブラウザバージョンが数多く存在するため（たとえば、バージョン10より前のInternet Explorerなど）、盲目的に依存しないでください。&lt;em&gt;厳格モードはセマンティクスを変更します。&lt;/em&gt;これらの変更に依存すると、strictモードを実装していないブラウザでミスやエラーが発生します。ストリクトモードの使用には注意が必要です。また、ストリクトモードの関連部分が実装されているかどうかをチェックする機能テストを使用して、ストリクトモードへの依存をバックアップしてください。最後に、&lt;em&gt;strictモードをサポートするブラウザーとサポートしないブラウザーでコード&lt;/em&gt;を&lt;em&gt;テストしてください。&lt;/em&gt;。ストリクトモードをサポートしていないブラウザーでのみテストする場合、サポートしているブラウザーで問題が発生する可能性が高く、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="bafbaa819a9cc472c9dd5abd2fda36f0258dfdd2" translate="yes" xml:space="preserve">
          <source>The map &lt;strong&gt;iterator&lt;/strong&gt; function, which is the &lt;a href=&quot;entries&quot;&gt;&lt;code&gt;entries()&lt;/code&gt;&lt;/a&gt; function by default.</source>
          <target state="translated">マップ&lt;strong&gt;反復&lt;/strong&gt;関数。デフォルトでは、&lt;a href=&quot;entries&quot;&gt; &lt;code&gt;entries()&lt;/code&gt; &lt;/a&gt;関数です。</target>
        </trans-unit>
        <trans-unit id="590822045faf535e2a907e0b28b78117f22f50b9" translate="yes" xml:space="preserve">
          <source>The map being iterated (&lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt; in the above Syntax box).</source>
          <target state="translated">The map being iterated ( &lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt; in the above Syntax box).</target>
        </trans-unit>
        <trans-unit id="b4cf0dca556641f02466f88f1a006a236af87da2" translate="yes" xml:space="preserve">
          <source>The mask could also have been created with &lt;code&gt;~FLAG_A &amp;amp; ~FLAG_C&lt;/code&gt; (De Morgan's law):</source>
          <target state="translated">マスクは &lt;code&gt;~FLAG_A &amp;amp; ~FLAG_C&lt;/code&gt; （ドモルガンの法則）で作成することもできます。</target>
        </trans-unit>
        <trans-unit id="dcf17b654d6c53d76495c7d1f5f32a02613493ed" translate="yes" xml:space="preserve">
          <source>The matched substring. (Corresponds to &lt;code&gt;$&amp;amp;&lt;/code&gt; above.)</source>
          <target state="translated">一致した部分文字列。（上記の &lt;code&gt;$&amp;amp;&lt;/code&gt; に対応します。）</target>
        </trans-unit>
        <trans-unit id="cb080417c46a159ac80f4c0040b9545a69d9c7de" translate="yes" xml:space="preserve">
          <source>The maximum number of elements the WebAssembly Table is allowed to grow to.</source>
          <target state="translated">WebAssembly テーブルが成長させることができる要素の最大数。</target>
        </trans-unit>
        <trans-unit id="b64129e5e3caa116968e5063fa3abe546865e288" translate="yes" xml:space="preserve">
          <source>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of &lt;code&gt;minimumFractionDigits&lt;/code&gt; and 3; the default for currency formatting is the larger of &lt;code&gt;minimumFractionDigits&lt;/code&gt; and the number of minor unit digits provided by the &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;ISO 4217 currency code list&lt;/a&gt; (2 if the list doesn't provide that information); the default for percent formatting is the larger of &lt;code&gt;minimumFractionDigits&lt;/code&gt; and 0.</source>
          <target state="translated">使用する小数桁の最大数。可能な値は0〜20です。プレーンな数値フォーマットのデフォルトは、 &lt;code&gt;minimumFractionDigits&lt;/code&gt; と3の大きい方です。通貨フォーマットのデフォルトは、 &lt;code&gt;minimumFractionDigits&lt;/code&gt; と&lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;ISO 4217通貨コードリスト&lt;/a&gt;によって提供されるマイナーユニットの桁数の大きい方です（リストにその情報が含まれていない場合は2）。パーセント形式のデフォルトは、 &lt;code&gt;minimumFractionDigits&lt;/code&gt; と0の大きい方です。</target>
        </trans-unit>
        <trans-unit id="d29f6013407c2248ac7c06832b30a540c8c2ee1f" translate="yes" xml:space="preserve">
          <source>The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.</source>
          <target state="translated">使用する有効数字の最大数。使用可能な値は1から21までで、デフォルトは21です。</target>
        </trans-unit>
        <trans-unit id="750989a80cfa27f6160080f8566c63c3e7fc5e63" translate="yes" xml:space="preserve">
          <source>The maximum safe integer in JavaScript (&lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;).</source>
          <target state="translated">JavaScriptでの最大安全整数（ &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="718a6c97bec80ce33fa4d87471469e027f780c5b" translate="yes" xml:space="preserve">
          <source>The maximum size the WebAssembly Memory is allowed to grow to, in units of WebAssembly pages. When present, the &lt;code&gt;maximum&lt;/code&gt; parameter acts as a hint to the engine to reserve memory up front. However, the engine may ignore or clamp this reservation request. In general, most WebAssembly modules shouldn't need to set a &lt;code&gt;maximum&lt;/code&gt;.</source>
          <target state="translated">WebAssemblyメモリがWebAssemblyページの単位で拡大できる最大サイズ。存在する場合、 &lt;code&gt;maximum&lt;/code&gt; パラメータは、エンジンがメモリを事前に予約するためのヒントとして機能します。ただし、エンジンはこの予約要求を無視またはクランプする場合があります。一般に、ほとんどのWebAssemblyモジュールは &lt;code&gt;maximum&lt;/code&gt; を設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e1a7eaeaa5b1dad1b16e2b501a53708b0dcd0929" translate="yes" xml:space="preserve">
          <source>The maximum size the WebAssembly Memory is allowed to grow to, in units of WebAssembly pages. When present, the &lt;code&gt;maximum&lt;/code&gt; parameter acts as a hint to the engine to reserve memory up front. However, the engine may ignore or clamp this reservation request. Unshared WebAssembly memories don't need to set a &lt;code&gt;maximum&lt;/code&gt;, but shared memories do.</source>
          <target state="translated">WebAssemblyメモリが最大サイズ（WebAssemblyページ単位）まで拡張できます。存在する場合、 &lt;code&gt;maximum&lt;/code&gt; パラメータは、メモリを事前に予約するためのエンジンへのヒントとして機能します。ただし、エンジンはこの予約要求を無視またはクランプする場合があります。非共有WebAssemblyメモリは &lt;code&gt;maximum&lt;/code&gt; を設定する必要はありませんが、共有メモリは最大値を設定します。</target>
        </trans-unit>
        <trans-unit id="fd5c373d3e2793fa46239311c0807bcbbab44b3c" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt;&lt;/a&gt; returns an array of symbols and lets you find symbol properties on a given object. Note that every object is initialized with no own symbol properties, so that this array will be empty unless you've set symbol properties on the object.</source>
          <target state="translated">&lt;a href=&quot;object/getownpropertysymbols&quot;&gt; &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; &lt;/a&gt;メソッドは、シンボルの配列を返し、特定のオブジェクトのシンボルプロパティを検索できるようにします。すべてのオブジェクトは独自のシンボルプロパティなしで初期化されるため、オブジェクトにシンボルプロパティを設定しない限り、この配列は空になります。</target>
        </trans-unit>
        <trans-unit id="60dad2efad0b22f77e505717a23ffda8e983fe9a" translate="yes" xml:space="preserve">
          <source>The method returns values &lt;code&gt;Atomics.OK&lt;/code&gt;, &lt;code&gt;Atomics.TIMEDOUT&lt;/code&gt;, and &lt;code&gt;Atomics.NOTEQUAL&lt;/code&gt;, instead of the later-specified strings.</source>
          <target state="translated">このメソッドは、値 &lt;code&gt;Atomics.OK&lt;/code&gt; 、 &lt;code&gt;Atomics.TIMEDOUT&lt;/code&gt; 、および &lt;code&gt;Atomics.NOTEQUAL&lt;/code&gt; 、後で指定される文字列ではなく Atomics.NOTEQUALを。</target>
        </trans-unit>
        <trans-unit id="b9f1f2ece69fae49f5a21177bf3c28cb118a4f77" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;atomics/wait&quot;&gt;&lt;code&gt;Atomics.wait()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake&quot;&gt;&lt;code&gt;Atomics.wake()&lt;/code&gt;&lt;/a&gt; were named &lt;code&gt;Atomics.futexWait()&lt;/code&gt; and &lt;code&gt;Atomics.futexWake()&lt;/code&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1260910&quot;&gt;bug 1260910&lt;/a&gt;). Note: The old names have been removed in version 49 and later (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1262062&quot;&gt;bug 1262062&lt;/a&gt;). &lt;code&gt;Atomics.wake()&lt;/code&gt; has then been renamed to &lt;code&gt;Atomics.notify()&lt;/code&gt; in version 63.</source>
          <target state="translated">メソッド&lt;a href=&quot;atomics/wait&quot;&gt; &lt;code&gt;Atomics.wait()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake&quot;&gt; &lt;code&gt;Atomics.wake()&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;Atomics.futexWait()&lt;/code&gt; および &lt;code&gt;Atomics.futexWake()&lt;/code&gt; と名付けられました（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1260910&quot;&gt;バグ1260910&lt;/a&gt;）。注：古い名前はバージョン49以降で削除されています（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1262062&quot;&gt;バグ1262062&lt;/a&gt;）。その後、 &lt;code&gt;Atomics.wake()&lt;/code&gt; はAtomics.notify（）に名前が変更され &lt;code&gt;Atomics.notify()&lt;/code&gt; 、バージョン63でに。</target>
        </trans-unit>
        <trans-unit id="f371a9482b5371820f5baf3a381a1b6d7b64bc27" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;Atomics.futexWakeOrRequeue()&lt;/code&gt; and &lt;code&gt;Atomics.fence()&lt;/code&gt; are now removed entirely (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1259544&quot;&gt;bug 1259544&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1225028&quot;&gt;bug 1225028&lt;/a&gt;).</source>
          <target state="translated">メソッド &lt;code&gt;Atomics.futexWakeOrRequeue()&lt;/code&gt; および &lt;code&gt;Atomics.fence()&lt;/code&gt; が完全に削除されました（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1259544&quot;&gt;バグ1259544&lt;/a&gt;および&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1225028&quot;&gt;バグ1225028&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5d590e5a7d3b15645275570326815157d6d45c9c" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;promise.then()&lt;/code&gt;, &lt;code&gt;promise.catch()&lt;/code&gt;, and &lt;code&gt;promise.finally()&lt;/code&gt; are used to associate further action with a promise that becomes settled. These methods also return a newly generated promise object, which can optionally be used for chaining; for example, like this:</source>
          <target state="translated">メソッド &lt;code&gt;promise.then()&lt;/code&gt; 、 &lt;code&gt;promise.catch()&lt;/code&gt; 、および &lt;code&gt;promise.finally()&lt;/code&gt; は、さらなるアクションを、解決されるpromiseに関連付けるために使用されます。これらのメソッドは、新しく生成されたpromiseオブジェクトも返します。これは、オプションでチェーンに使用できます。たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="a8b1bd3132eb7e61bbf9ca4e03ccc6a2fbaf6f78" translate="yes" xml:space="preserve">
          <source>The methods shown below are not the best way to do things, and probably should not be used in any production environment.</source>
          <target state="translated">以下に示すような方法は、物事を行うための最善の方法ではなく、おそらくどのような本番環境でも使用すべきではないでしょう。</target>
        </trans-unit>
        <trans-unit id="6e29565d693411976b7ee91ee70c54bff5462838" translate="yes" xml:space="preserve">
          <source>The methods that provide property access. This is analogous to the concept of traps in operating systems.</source>
          <target state="translated">プロパティアクセスを提供するメソッドです。これは、オペレーティングシステムにおけるトラップの概念に類似しています。</target>
        </trans-unit>
        <trans-unit id="763df0069b806ae2d2ced428f58a4492fd633031" translate="yes" xml:space="preserve">
          <source>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;ISO 4217 currency code list&lt;/a&gt; (2 if the list doesn't provide that information).</source>
          <target state="translated">使用する小数桁の最小数。可能な値は0〜20です。単純な数値とパーセントのフォーマットのデフォルトは0です。通貨フォーマットのデフォルトは、&lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;ISO 4217通貨コードリスト&lt;/a&gt;によって提供されるマイナーユニットの桁数です（リストがその情報を提供しない場合は2）。</target>
        </trans-unit>
        <trans-unit id="e859baf661ae604cb1d549a1afb8079362a2ca94" translate="yes" xml:space="preserve">
          <source>The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.</source>
          <target state="translated">使用する整数の最小桁数。使用可能な値は1から21までで、デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="a67ed61e7c39c9ed18569163801f9408e01a5168" translate="yes" xml:space="preserve">
          <source>The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.</source>
          <target state="translated">使用する有効桁数の最小値。使用可能な値は1から21までで、デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="ba4e9ae100f45417e01b853489d958a40d32ce2d" translate="yes" xml:space="preserve">
          <source>The minimum safe integer in JavaScript (&lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt;).</source>
          <target state="translated">JavaScriptの安全な最小整数（ &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6b698914aa94159523cef2bc019c01c7660c3e2a" translate="yes" xml:space="preserve">
          <source>The minus sign string (&quot;-&quot;).</source>
          <target state="translated">マイナス記号文字列(&quot;-&quot;)。</target>
        </trans-unit>
        <trans-unit id="74ab35e95a910537a35fbced3b5c61fa53ef82b9" translate="yes" xml:space="preserve">
          <source>The modified array, filled with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; で満たされた変更された配列。</target>
        </trans-unit>
        <trans-unit id="c25fd4a7a868b02af2fc1b7afb2e53c07c48a7b1" translate="yes" xml:space="preserve">
          <source>The modified array.</source>
          <target state="translated">修正された配列。</target>
        </trans-unit>
        <trans-unit id="a0c786e12edac4e20f56f414da9f51f82fbda622" translate="yes" xml:space="preserve">
          <source>The module to import from. This is often a relative or absolute path name to the &lt;code&gt;.js&lt;/code&gt; file containing the module. Certain bundlers may permit or require the use of the extension; check your environment. Only single quoted and double quoted Strings are allowed.</source>
          <target state="translated">インポート元のモジュール。これは多くの場合、モジュールを含む &lt;code&gt;.js&lt;/code&gt; ファイルへの相対パス名または絶対パス名です。特定のバンドラーは、拡張機能の使用を許可または要求する場合があります。環境を確認してください。一重引用符と二重引用符で囲まれた文字列のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="2ea7edbb20a448cc1cb97971e0bc9df2771292a4" translate="yes" xml:space="preserve">
          <source>The module to import from. This is often a relative or absolute path name to the &lt;code&gt;.js&lt;/code&gt; file containing the module. Certain bundlers may permit or require the use of the extension; check your environment. Only single quotes and double quotes Strings are allowed.</source>
          <target state="translated">インポート元のモジュール。これは多くの場合、モジュールを含む &lt;code&gt;.js&lt;/code&gt; ファイルへの相対パス名または絶対パス名です。特定のバンドル業者は、拡張機能の使用を許可または要求する場合があります。環境を確認してください。一重引用符と二重引用符の文字列のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="1728dd812298796c1cc3435e4a374671c8fdb897" translate="yes" xml:space="preserve">
          <source>The module: file.js</source>
          <target state="translated">モジュール:file.js</target>
        </trans-unit>
        <trans-unit id="dfb81342f946f5482b76a4486bcf238475710ae5" translate="yes" xml:space="preserve">
          <source>The most common radixes:</source>
          <target state="translated">最も一般的な基数。</target>
        </trans-unit>
        <trans-unit id="54a4bd82555a8250f48bf7215dd53c5f837282e3" translate="yes" xml:space="preserve">
          <source>The most notable difference between this operator and the &lt;a href=&quot;equality&quot;&gt;equality&lt;/a&gt; (&lt;code&gt;==&lt;/code&gt;) operator is that if the operands are of different types, the &lt;code&gt;==&lt;/code&gt; operator attempts to convert them to the same type before comparing.</source>
          <target state="translated">この演算子と&lt;a href=&quot;equality&quot;&gt;等式&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）演算子の最も顕著な違いは、オペランドが異なるタイプの場合、 &lt;code&gt;==&lt;/code&gt; 演算子は比較する前にそれらを同じタイプに変換しようとすることです。</target>
        </trans-unit>
        <trans-unit id="ccb27291149b1a970dbb25bc2b17ef13c19c1f72" translate="yes" xml:space="preserve">
          <source>The most notable difference between this operator and the &lt;a href=&quot;strict_equality&quot;&gt;strict equality&lt;/a&gt; (&lt;code&gt;===&lt;/code&gt;) operator is that the strict equality operator does not attempt type conversion. Instead, the strict equality operator always considers operands of different types to be different.</source>
          <target state="translated">この演算子と&lt;a href=&quot;strict_equality&quot;&gt;厳密な等式&lt;/a&gt;（ &lt;code&gt;===&lt;/code&gt; ）演算子の最も顕著な違いは、厳密な等式演算子は型変換を試行しないことです。代わりに、厳密な等式演算子は常に、異なるタイプのオペランドが異なると見なします。</target>
        </trans-unit>
        <trans-unit id="273933067782bfc620f3df1feee270ed72170d96" translate="yes" xml:space="preserve">
          <source>The multiplication assignment operator (&lt;code&gt;*=&lt;/code&gt;) multiplies a variable by the value of the right operand and assigns the result to the variable.</source>
          <target state="translated">乗算代入演算子（ &lt;code&gt;*=&lt;/code&gt; ）は、変数に右オペランドの値を乗算し、その結果を変数に代入します。</target>
        </trans-unit>
        <trans-unit id="76e9d1381a97d92808fb7202cd7432c8f40d2574" translate="yes" xml:space="preserve">
          <source>The multiplication assignment operator &lt;strong&gt;multiplies&lt;/strong&gt; a variable by the value of the right operand and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Multiplication&quot;&gt;multiplication operator&lt;/a&gt; for more details.</source>
          <target state="translated">乗算代入演算子&lt;strong&gt;は&lt;/strong&gt;、変数に右のオペランドの値を&lt;strong&gt;掛け&lt;/strong&gt;て、結果を変数に代入します。詳細については、&lt;a href=&quot;arithmetic_operators#Multiplication&quot;&gt;乗算演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fec6b3983f0944b92015c73b61c50c71752f7794" translate="yes" xml:space="preserve">
          <source>The multiplication operator (&lt;code&gt;*&lt;/code&gt;) produces the product of the operands.</source>
          <target state="translated">乗算演算子（ &lt;code&gt;*&lt;/code&gt; ）は、オペランドの積を生成します。</target>
        </trans-unit>
        <trans-unit id="07c04dea55dedbdf9c86c085d62c2565d2d2a868" translate="yes" xml:space="preserve">
          <source>The multiplication operator produces the product of the operands.</source>
          <target state="translated">乗算演算子はオペランドの積を生成します。</target>
        </trans-unit>
        <trans-unit id="a36b6484d008e058f552129bae2641b50575d28d" translate="yes" xml:space="preserve">
          <source>The name of a formal parameter for the function.</source>
          <target state="translated">関数のフォーマルパラメータの名前。</target>
        </trans-unit>
        <trans-unit id="7da6a49079f3f00ae208d0fe491e14b9275bb90a" translate="yes" xml:space="preserve">
          <source>The name of a property of the object on which you wish to monitor changes.</source>
          <target state="translated">変更を監視するオブジェクトのプロパティ名。</target>
        </trans-unit>
        <trans-unit id="367237829796e61e8d941751ab30eb528f92522e" translate="yes" xml:space="preserve">
          <source>The name of a property of the object to stop watching.</source>
          <target state="translated">視聴を停止する対象のプロパティの名前です。</target>
        </trans-unit>
        <trans-unit id="de532ad388967e52d26bcd33e30fd5c7d491ba33" translate="yes" xml:space="preserve">
          <source>The name of an argument to be passed to the function.</source>
          <target state="translated">関数に渡す引数の名前。</target>
        </trans-unit>
        <trans-unit id="6ce8197cac199d0c6b102526dac5899954ace763" translate="yes" xml:space="preserve">
          <source>The name of an argument to be passed to the function. A function can have up to 255 arguments.</source>
          <target state="translated">関数に渡す引数の名前。関数は最大255個の引数を持つことができます。</target>
        </trans-unit>
        <trans-unit id="a5e25a2a144e74a60e1499c5291c5fd71c60ee1f" translate="yes" xml:space="preserve">
          <source>The name of an argument to be passed to the function. Maximum number of arguments varies in different engines.</source>
          <target state="translated">関数に渡す引数の名前です。引数の最大数はエンジンによって異なります。</target>
        </trans-unit>
        <trans-unit id="24666bfdf5ce4fb588f0dc3645f4c102164077d3" translate="yes" xml:space="preserve">
          <source>The name of an argument. Zero arguments need to be indicated with &lt;code&gt;()&lt;/code&gt;. For only one argument, the parentheses are not required. (like &lt;code&gt;foo =&amp;gt; 1&lt;/code&gt;)</source>
          <target state="translated">引数の名前。ゼロ引数は &lt;code&gt;()&lt;/code&gt; で示す必要があります。引数が1つだけの場合、括弧は必要ありません。（ &lt;code&gt;foo =&amp;gt; 1&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a8eea5cbe47896a553b0b6de01f3790201a77215" translate="yes" xml:space="preserve">
          <source>The name of an object, or an expression evaluating to an object.</source>
          <target state="translated">オブジェクトの名前、またはオブジェクトを評価する式。</target>
        </trans-unit>
        <trans-unit id="275a58fec29e9e236a7c8e425113d65e815df4a4" translate="yes" xml:space="preserve">
          <source>The name of the file containing the code that caused the exception</source>
          <target state="translated">例外の原因となったコードを含むファイル名</target>
        </trans-unit>
        <trans-unit id="f7a9edd78cfb4ca1e86741e132075a8ddc4c30a7" translate="yes" xml:space="preserve">
          <source>The name of the file containing the code that caused the exception.</source>
          <target state="translated">例外の原因となったコードを含むファイル名。</target>
        </trans-unit>
        <trans-unit id="ab3a145fce47d891a2e61310fbd2cd53663e04a2" translate="yes" xml:space="preserve">
          <source>The name of the function used for the tag can be whatever you want.</source>
          <target state="translated">タグに使用する関数の名前は、任意のものを指定することができます。</target>
        </trans-unit>
        <trans-unit id="8d24347b639fc5c1199b8f3590bff6a146e13c82" translate="yes" xml:space="preserve">
          <source>The name of the function.</source>
          <target state="translated">関数の名前です。</target>
        </trans-unit>
        <trans-unit id="d20ee82caf5dcbe9b0057181866dc5e6c8cdd03e" translate="yes" xml:space="preserve">
          <source>The name of the property to be defined or modified.</source>
          <target state="translated">定義または修正するプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="de9de21631261ef9bbf3a8297d8bcea6669a642b" translate="yes" xml:space="preserve">
          <source>The name of the property to be deleted.</source>
          <target state="translated">削除するプロパティの名前です。</target>
        </trans-unit>
        <trans-unit id="22cfab64b23ba9794cc07f1271bd3344a40a9d3e" translate="yes" xml:space="preserve">
          <source>The name of the property to bind to the given function.</source>
          <target state="translated">与えられた関数にバインドするプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="fc2975ca850e4bc98a8819068a30cce40bdf21fa" translate="yes" xml:space="preserve">
          <source>The name of the property to check.</source>
          <target state="translated">チェックする物件名です。</target>
        </trans-unit>
        <trans-unit id="f38bfaab45215366afc5024fb671472a5e6592e9" translate="yes" xml:space="preserve">
          <source>The name of the property to get an own property descriptor for.</source>
          <target state="translated">自身のプロパティ記述子を取得するためのプロパティ名。</target>
        </trans-unit>
        <trans-unit id="2e22159b8af57c29d0edb7193b221eb98a0ca996" translate="yes" xml:space="preserve">
          <source>The name of the property to get.</source>
          <target state="translated">取得する物件名。</target>
        </trans-unit>
        <trans-unit id="f1c14f88a65230d7c15efb3a3d43e7bba43ad5af" translate="yes" xml:space="preserve">
          <source>The name of the property to set.</source>
          <target state="translated">設定するプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="072ab24517a6c39844a42614a2b2313bced7c508" translate="yes" xml:space="preserve">
          <source>The name of the property to test.</source>
          <target state="translated">テストするプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="18e89c33fbbf1a858ab7ea4223bf1b5ffc3bb55e" translate="yes" xml:space="preserve">
          <source>The name of the property whose description should be retrieved.</source>
          <target state="translated">説明を取得するプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="96dfc5262495727e7474b1c79ab763e265a37360" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property to check for existence.</source>
          <target state="translated">存在を確認するプロパティの名前または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="48d8dc51b192220dbef92676b492b50e9f346b4a" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property to delete.</source>
          <target state="translated">削除するプロパティの名前または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2aec28704e47ca94bbbbc1a7315d6eb01820184" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property to get.</source>
          <target state="translated">取得するプロパティの名前または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94b70bd1f03ab362dd3a1a5c9336b84191997169" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property to set.</source>
          <target state="translated">設定するプロパティの名前または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="52cb55e47e54fd554c1c9f1a3bce6aae49730f30" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property whose description is to be retrieved.</source>
          <target state="translated">説明を取得するプロパティの名前または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0029fe62245130a498dc98a1e5a5d91259893a3e" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property to be defined or modified.</source>
          <target state="translated">定義または変更するプロパティの名前または&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad461d8b0ba91390ab5f764281af510114ef480f" translate="yes" xml:space="preserve">
          <source>The name or &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; of the property whose description is to be retrieved.</source>
          <target state="translated">説明を取得するプロパティの名前または&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6dadfd92cf6738daf23bf50c404683d691411356" translate="yes" xml:space="preserve">
          <source>The name property is read-only and cannot be changed by the assigment operator:</source>
          <target state="translated">name プロパティは読み取り専用で、割り当てオペレータによって変更することはできません。</target>
        </trans-unit>
        <trans-unit id="b09aeb3409ebb71b44fc75612e81828cb7fa19a0" translate="yes" xml:space="preserve">
          <source>The names of the variable or variables to declare. Each must be a legal JavaScript identifier.</source>
          <target state="translated">宣言する変数名。それぞれの変数名は、JavaScriptの正当な識別子でなければなりません。</target>
        </trans-unit>
        <trans-unit id="951348e7cb27e191828dfb4671b8e5c23f8e61b7" translate="yes" xml:space="preserve">
          <source>The names of variables, called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;identifiers&lt;/a&gt;, conform to certain rules, which your code must adhere to!</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;識別子&lt;/a&gt;と呼ばれる変数の名前は、コードが従わなければならない特定の規則に準拠しています！</target>
        </trans-unit>
        <trans-unit id="e0ff1cea8f3ecdc88768382088373dd040377d56" translate="yes" xml:space="preserve">
          <source>The names of variables, called &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;identifiers&lt;/a&gt;, conform to certain rules, which your code must adhere to!</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;識別子&lt;/a&gt;と呼ばれる変数の名前は、コードが従わなければならない特定の規則に準拠しています。</target>
        </trans-unit>
        <trans-unit id="bd88dd9f8b42bafd07815195373b97b3ebfbb6ec" translate="yes" xml:space="preserve">
          <source>The natural logarithm (base &lt;a href=&quot;e&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/a&gt;) of &lt;strong&gt;1&lt;/strong&gt; plus the given number. If the number is less than &lt;strong&gt;-1&lt;/strong&gt;, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;strong&gt;1&lt;/strong&gt;と指定された数値の自然対数（底&lt;a href=&quot;e&quot;&gt; &lt;code&gt;e&lt;/code&gt; &lt;/a&gt;）。数値が&lt;strong&gt;-1&lt;/strong&gt;未満の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d313b29c30bbe5cfaa7edd780031234d8f7d64fd" translate="yes" xml:space="preserve">
          <source>The natural logarithm (base &lt;a href=&quot;e&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/a&gt;) of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された数値の自然対数（底は&lt;a href=&quot;e&quot;&gt; &lt;code&gt;e&lt;/code&gt; &lt;/a&gt;）。数値が負の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="e544e53657061913445d2e57a74474507f1d6c85" translate="yes" xml:space="preserve">
          <source>The nearest &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision%20floating-point%20format&quot;&gt;32-bit single precision&lt;/a&gt; float representation of the given number.</source>
          <target state="translated">指定された数値の最も近い&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision%20floating-point%20format&quot;&gt;32ビット単精度&lt;/a&gt;浮動小数点表現。</target>
        </trans-unit>
        <trans-unit id="393b083b54d47b39619c41c132451295b58cab10" translate="yes" xml:space="preserve">
          <source>The nearest &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;32-bit single precision&lt;/a&gt; float representation of the given number.</source>
          <target state="translated">指定された数値の最も近い&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;32ビットの単精度&lt;/a&gt;浮動小数点表現。</target>
        </trans-unit>
        <trans-unit id="55016b9cdc00feeb0fc50c6ef3c78c9e23e1d509" translate="yes" xml:space="preserve">
          <source>The necessity of an &lt;code&gt;isNaN&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;isNaN&lt;/code&gt; 関数の必要性</target>
        </trans-unit>
        <trans-unit id="d538a3f3125a5044904945af33cb3afd6e236c93" translate="yes" xml:space="preserve">
          <source>The necessity of an isNaN function</source>
          <target state="translated">isNaN機能の必要性</target>
        </trans-unit>
        <trans-unit id="28da1899ba88419e5c0070fcfc31214e08e9946d" translate="yes" xml:space="preserve">
          <source>The new &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread operator&lt;/a&gt; is a shorter way of writing the &lt;code&gt;apply&lt;/code&gt; solution to get the maximum of an array:</source>
          <target state="translated">新しい&lt;a href=&quot;../../operators/spread_syntax&quot;&gt;スプレッド演算子&lt;/a&gt;は、配列の最大値を取得するための &lt;code&gt;apply&lt;/code&gt; ソリューションを記述する短い方法です。</target>
        </trans-unit>
        <trans-unit id="15e32319f478746591021d90d06710bd39e641b7" translate="yes" xml:space="preserve">
          <source>The new &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of the object upon which the method was called.</source>
          <target state="translated">メソッドが呼び出されたオブジェクトの新しい&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="a119df48b5040f53e992a07cc14681193b9c81a9" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function.</source>
          <target state="translated">新しい &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数により、アプリケーションは、フォーマット規則を使用する言語を指定し、関数の動作をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="8b7c6e6b2c84604d0b55f6e4f19c3286cf7b572d" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments, the locale and sort order used are entirely implementation-dependent.</source>
          <target state="translated">新しい &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数により、アプリケーションはソート順を使用する言語を指定し、関数の動作をカスタマイズできます。 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールと並べ替え順序は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="49ec580a79319a90f7040d3cb035ea54e34dedf5" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">新しい &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数は、関数の動作をカスタマイズし、フォーマット規則を使用する言語をアプリケーションで指定できるようにします。 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="0d4931ce8fb67879fa37cf5601f98896d39cb08e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale and sort order used are entirely implementation dependent.</source>
          <target state="translated">新しい &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数により、アプリケーションは、ソート順を使用する言語を指定し、関数の動作をカスタマイズできます。 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールとソート順は完全に実装に依存しています。</target>
        </trans-unit>
        <trans-unit id="a64e1c0c60e41953574fdf8aa63bda5884e93d3e" translate="yes" xml:space="preserve">
          <source>The new value of the property to set.</source>
          <target state="translated">設定するプロパティの新しい値。</target>
        </trans-unit>
        <trans-unit id="a5929a3e16874afbd459c0c7ee192675ce9ae5ec" translate="yes" xml:space="preserve">
          <source>The next simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function with pre-specified initial arguments.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; の次の最も簡単な使用法は、事前に指定された初期引数を使用して関数を作成することです。</target>
        </trans-unit>
        <trans-unit id="7b48cd65e58876e403c7adf3d0a480e85996a3d7" translate="yes" xml:space="preserve">
          <source>The next simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided &lt;code&gt;this&lt;/code&gt; value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; の次の最も簡単な使用法は、事前に指定された初期引数を持つ関数を作成することです。これらの引数（存在する場合）は、指定された &lt;code&gt;this&lt;/code&gt; 値に従い、ターゲット関数に渡される引数の先頭に挿入されます。その後、バインド関数が呼び出されるたびに、バインド関数に渡される引数が続きます。</target>
        </trans-unit>
        <trans-unit id="7a9ea12d516aecf0eecc055e83dd2eda707d7102" translate="yes" xml:space="preserve">
          <source>The non-identity operator returns true if the operands &lt;strong&gt;are not equal and/or not of the same type&lt;/strong&gt;.</source>
          <target state="translated">非同一演算子は、オペランド&lt;strong&gt;が等しくないか、同じ型でない&lt;/strong&gt;場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="3280c8f6e0c09ac94ccf90707579eae49cae5772" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat&quot;&gt;&lt;code&gt;Date.prototype.toLocaleFormat&lt;/code&gt;&lt;/a&gt; method is deprecated and shouldn't be used anymore. It uses a format string in the same format expected by the &lt;code&gt;strftime()&lt;/code&gt; function in C. &lt;strong&gt;The function is no longer available in Firefox 58+&lt;/strong&gt;.</source>
          <target state="translated">非標準の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat&quot;&gt; &lt;code&gt;Date.prototype.toLocaleFormat&lt;/code&gt; &lt;/a&gt;メソッドは非推奨であり、今後は使用しないでください。C &lt;strong&gt;の&lt;/strong&gt; &lt;code&gt;strftime()&lt;/code&gt; 関数で想定されている形式と同じ形式の形式文字列を使用します。&lt;strong&gt;この関数は、Firefox 58+では使用できなくなりました&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="39445ffb7e76d037fcab958794abe013d44e19b9" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures&quot;&gt;expression closure&lt;/a&gt; syntax (shorthand function syntax) is deprecated and shouldn't be used anymore. This syntax will be removed entirely in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083458&quot;&gt;bug 1083458&lt;/a&gt; and scripts using it will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; then.</source>
          <target state="translated">非標準の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures&quot;&gt;式クロージャー&lt;/a&gt;構文（短縮関数構文）は非推奨であり、今後は使用しないでください。この構文は&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083458&quot;&gt;バグ1083458で&lt;/a&gt;完全に削除され、それを使用するスクリプトはSyntaxErrorをスローし&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="78eff4754bd77983b2d8587cf88e766887549d6b" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat&quot;&gt;&lt;code&gt;Date.prototype.toLocaleFormat&lt;/code&gt;&lt;/a&gt; method is deprecated and shouldn't be used anymore. It uses a format string in the same format expected by the &lt;code&gt;strftime()&lt;/code&gt; function in C. &lt;strong&gt;The function is no longer available in Firefox 58+&lt;/strong&gt;.</source>
          <target state="translated">非標準の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat&quot;&gt; &lt;code&gt;Date.prototype.toLocaleFormat&lt;/code&gt; &lt;/a&gt;メソッドは非推奨であり、使用しないでください。C&lt;strong&gt;の&lt;/strong&gt; &lt;code&gt;strftime()&lt;/code&gt; 関数で期待されるのと同じフォーマットのフォーマット文字列を使用します。&lt;strong&gt;この関数はFirefox58以降では使用できなくなりました&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="efaa74070547b3ef34297f702f27340a75a2c3aa" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures&quot;&gt;expression closure&lt;/a&gt; syntax (shorthand function syntax) is deprecated and shouldn't be used anymore. This syntax will be removed entirely in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083458&quot;&gt;bug 1083458&lt;/a&gt; and scripts using it will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; then.</source>
          <target state="translated">非標準の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures&quot;&gt;式クロージャ&lt;/a&gt;構文（簡略関数構文）は非推奨であり、使用しないでください。この構文は&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1083458&quot;&gt;バグ1083458で&lt;/a&gt;完全に削除され、それを使用するスクリプトはSyntaxErrorをスローし&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a30473041dd548fdac7f85a6c0107f0ad821670e" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;code&gt;ArrayBuffer.slice()&lt;/code&gt; method has been removed in Firefox 53 (but the standardized version &lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt; is kept.</source>
          <target state="translated">非標準の &lt;code&gt;ArrayBuffer.slice()&lt;/code&gt; メソッドはFirefox 53で削除されました（ただし、標準化されたバージョンの &lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt; は保持されます）。</target>
        </trans-unit>
        <trans-unit id="0d2c1006d937b3726c4d73d8fa54089d1377852a" translate="yes" xml:space="preserve">
          <source>The non-standard generic &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; methods are deprecated and have been removed in Firefox 68 and later. String generics provide &lt;code&gt;String&lt;/code&gt; instance methods on the &lt;code&gt;String&lt;/code&gt; object allowing &lt;code&gt;String&lt;/code&gt; methods to be applied to any object.</source>
          <target state="translated">非標準の汎用&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;メソッドは非推奨になり、Firefox68以降で削除されました。文字列ジェネリックは、 &lt;code&gt;String&lt;/code&gt; オブジェクトに &lt;code&gt;String&lt;/code&gt; インスタンスメソッドを提供し、 &lt;code&gt;String&lt;/code&gt; メソッドを任意のオブジェクトに適用できるようにします。</target>
        </trans-unit>
        <trans-unit id="03bf83b1741498b124fb7864a78c93e0d776606b" translate="yes" xml:space="preserve">
          <source>The non-standard generic &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; methods are deprecated and will be removed in the future (no cross-browser support, available in Firefox only). String generics provide &lt;code&gt;String&lt;/code&gt; instance methods on the &lt;code&gt;String&lt;/code&gt; object allowing &lt;code&gt;String&lt;/code&gt; methods to be applied to any object.</source>
          <target state="translated">非標準の汎用&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;メソッドは非推奨であり、将来削除される予定です（ブラウザー間のサポートはなく、Firefoxでのみ使用可能）。Stringジェネリックは、 &lt;code&gt;String&lt;/code&gt; オブジェクトに &lt;code&gt;String&lt;/code&gt; インスタンスメソッドを提供し、任意のオブジェクトに &lt;code&gt;String&lt;/code&gt; メソッドを適用できるようにします。</target>
        </trans-unit>
        <trans-unit id="469c58387af12bcf85e2ca859e00352a42f3b317" translate="yes" xml:space="preserve">
          <source>The nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;)</source>
          <target state="translated">null合体演算子（ &lt;code&gt;??&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1d5d9c2553b1c352bf69faacd304699654e3920a" translate="yes" xml:space="preserve">
          <source>The nullish coalescing operator avoids this pitfall by only returning the second operand when the first one evaluates to either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (but no other falsy values):</source>
          <target state="translated">null合体演算子は、最初のオペランドが &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; （ただし他の偽の値はない）と評価された場合にのみ2番目のオペランドを返すことにより、この落とし穴を回避します。</target>
        </trans-unit>
        <trans-unit id="8294ad88da1d260f63b8189715b70dc34fa45fdb" translate="yes" xml:space="preserve">
          <source>The nullish coalescing operator treats &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; as specific values and so does the &lt;a href=&quot;optional_chaining&quot;&gt;optional chaining operator (&lt;code&gt;?.&lt;/code&gt;)&lt;/a&gt; which is useful to access a property of an object which may be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 合体演算子は &lt;code&gt;undefined&lt;/code&gt; とnullを特定の値として扱い、 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; の可能性があるオブジェクトのプロパティにアクセスするのに役立つ&lt;a href=&quot;optional_chaining&quot;&gt;オプションの連鎖演算子（ &lt;code&gt;?.&lt;/code&gt; ）&lt;/a&gt;も同様に扱います。</target>
        </trans-unit>
        <trans-unit id="8355336269c0fe7b85ff46c367706faca0a7d8de" translate="yes" xml:space="preserve">
          <source>The number 1.5 can be precisely represented in the binary numeral system, and is identical in 32-bit and 64-bit:</source>
          <target state="translated">1.5という数字は2進数系で正確に表現することができ、32ビットと64ビットでは同じです。</target>
        </trans-unit>
        <trans-unit id="0b2a130cab5fa2bd9042428d3a70e702fe39efc1" translate="yes" xml:space="preserve">
          <source>The number &lt;code&gt;-1&lt;/code&gt; is the integer that is composed completely of 1 bits.</source>
          <target state="translated">数値 &lt;code&gt;-1&lt;/code&gt; は、完全に1ビットで構成される整数です。</target>
        </trans-unit>
        <trans-unit id="bf7411000c2a1e4d71c535236650c7044e865106" translate="yes" xml:space="preserve">
          <source>The number &lt;code&gt;-2147483648&lt;/code&gt; (hexadecimal representation: &lt;code&gt;-0x80000000&lt;/code&gt;) is the integer that is composed completely of 0 bits except the first (left-most) one.</source>
          <target state="translated">数値 &lt;code&gt;-2147483648&lt;/code&gt; （16進表記： &lt;code&gt;-0x80000000&lt;/code&gt; ）は、最初の（左端の）ビットを除いて完全に0ビットで構成される整数です。</target>
        </trans-unit>
        <trans-unit id="b2dc5b85eefd1c66f304322ae69186cb77d7b364" translate="yes" xml:space="preserve">
          <source>The number &lt;code&gt;0&lt;/code&gt; is the integer that is composed completely of 0 bits.</source>
          <target state="translated">数値 &lt;code&gt;0&lt;/code&gt; は、完全に0ビットで構成される整数です。</target>
        </trans-unit>
        <trans-unit id="66e1e7318b6530ea647ef20fcd11f44257ad8e60" translate="yes" xml:space="preserve">
          <source>The number &lt;code&gt;2147483647&lt;/code&gt; (hexadecimal representation: &lt;code&gt;0x7fffffff&lt;/code&gt;) is the integer that is composed completely of 1 bits except the first (left-most) one.</source>
          <target state="translated">数値 &lt;code&gt;2147483647&lt;/code&gt; （16進表記： &lt;code&gt;0x7fffffff&lt;/code&gt; ）は、最初の（左端の）ビットを除いて完全に1ビットで構成される整数です。</target>
        </trans-unit>
        <trans-unit id="4864417096a91cbdc8c012ddeb7487521cff5836" translate="yes" xml:space="preserve">
          <source>The number of WebAssembly pages you want to grow the memory by (each one is 64KiB in size).</source>
          <target state="translated">メモリを増やしたいWebAssemblyページの数を指定します(1つ1つのサイズは64KiBです)。</target>
        </trans-unit>
        <trans-unit id="a87ac602665c8283cba4e7d8209fa56fed5cb859" translate="yes" xml:space="preserve">
          <source>The number of arguments that were passed to the function.</source>
          <target state="translated">関数に渡された引数の数。</target>
        </trans-unit>
        <trans-unit id="b4f4bac267001b782702e6b98d620dc5817e0d90" translate="yes" xml:space="preserve">
          <source>The number of digits to appear after the decimal point; this may be a value between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt;, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">小数点以下に表示される桁数。これは &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;20&lt;/code&gt; までの値であり、実装はオプションでより広い範囲の値をサポートする場合があります。この引数を省略すると、 &lt;code&gt;0&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="aa25dddac8bea7480324ef8dc8073b005c6fd22a" translate="yes" xml:space="preserve">
          <source>The number of elements in the byte array. If unspecified, the view's length will match the buffer's length.</source>
          <target state="translated">バイト配列の要素数。指定しない場合、ビューの長さはバッファの長さと一致します。</target>
        </trans-unit>
        <trans-unit id="0434bfc768016f46ab48c4b6269285869b0a1d1b" translate="yes" xml:space="preserve">
          <source>The number of elements you want to grow the table by.</source>
          <target state="translated">テーブルを成長させたい要素の数。</target>
        </trans-unit>
        <trans-unit id="3a55493b4ecbcc86332ebcf2315835590448881a" translate="yes" xml:space="preserve">
          <source>The number of fractional seconds to apply when calling &lt;code&gt;format()&lt;/code&gt;. Valid values are 0-3.</source>
          <target state="translated">&lt;code&gt;format()&lt;/code&gt; を呼び出すときに適用する小数秒数。有効な値は0〜3です。</target>
        </trans-unit>
        <trans-unit id="83c28c191f438cb2c6f747339f2fcfb9412a813c" translate="yes" xml:space="preserve">
          <source>The number of items in a &lt;code&gt;Map&lt;/code&gt; is easily retrieved from its &lt;a href=&quot;map/size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 内のアイテムの数は、その&lt;a href=&quot;map/size&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt;プロパティから簡単に取得できます。</target>
        </trans-unit>
        <trans-unit id="4ac122d78fc16e382607937c70575742720949db" translate="yes" xml:space="preserve">
          <source>The number of items in an &lt;code&gt;Object&lt;/code&gt; must be determined manually.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 内のアイテムの数は手動で決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f253a501f866006979caa2e5778a8f67a52a7c1" translate="yes" xml:space="preserve">
          <source>The number of leading zero bits in the 32-bit binary representation of the given number.</source>
          <target state="translated">与えられた数の32ビットの2進表現における先頭のゼロビットの数。</target>
        </trans-unit>
        <trans-unit id="b725648291d4c7f9480a4ff66adc75ff12bfb4b6" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object is also changed in place).</source>
          <target state="translated">1970年1月1日00:00:00 UTCと指定された日付の間のミリ秒数（&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトも変更されています）。</target>
        </trans-unit>
        <trans-unit id="cf7a51aac4070623c4f4e3b2748768191df7468d" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date.</source>
          <target state="translated">1970年1月1日00:00:00 UTCから指定された日付までのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="2fdc3c07c01a174ed264e0c8f4a9600053649fa8" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date (effectively, the value of the argument).</source>
          <target state="translated">1970年1月1日00:00:00 UTCから更新日までのミリ秒数(実質的には引数の値)。</target>
        </trans-unit>
        <trans-unit id="d16d3d11b36d3a8e2d976723b523e29a606e12ed" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</source>
          <target state="translated">1970年1月1日00:00:00 UTCから更新日までのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="e71993f33f98dfef7435a93c2236af6594582ace" translate="yes" xml:space="preserve">
          <source>The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.</source>
          <target state="translated">1970年1月1日00:00:00 UTCから更新日までのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="c59a2b53f39255122ccc0b48db5e91e385a5cba5" translate="yes" xml:space="preserve">
          <source>The number of objects or their traversal order is immaterial, so a &lt;code&gt;WeakSet&lt;/code&gt; is more suitable (and performant) than a &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; for tracking object references, especially if a very large number of objects is involved.</source>
          <target state="translated">オブジェクトの数またはそれらの走査順序は重要ではないため、特に非常に多数のオブジェクトが含まれる場合、 &lt;code&gt;WeakSet&lt;/code&gt; は&lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;よりもオブジェクト参照の追跡に適しています（パフォーマンスが高くなります）。</target>
        </trans-unit>
        <trans-unit id="bdced13e7c82b862c5ba2b4f61eb39041361350d" translate="yes" xml:space="preserve">
          <source>The number of possible parenthesized substrings is unlimited, but the &lt;code&gt;RegExp&lt;/code&gt; object can only hold the first nine. You can access all parenthesized substrings through the returned array's indexes.</source>
          <target state="translated">括弧で囲まれた部分文字列の数は無制限ですが、 &lt;code&gt;RegExp&lt;/code&gt; オブジェクトは最初の9つしか保持できません。返された配列のインデックスを介して、括弧で囲まれたすべての部分文字列にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e51aca19bb861c8f5bed34bea7f13e6c45ce49d4" translate="yes" xml:space="preserve">
          <source>The number of possible parenthesized substrings is unlimited.</source>
          <target state="translated">括弧で括られた部分文字列の数は無制限です。</target>
        </trans-unit>
        <trans-unit id="26c9f632510019aa6e6c1d1cb1d6180474816136" translate="yes" xml:space="preserve">
          <source>The number of sleeping agents to notify. Defaults to &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;+Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通知するスリープエージェントの数。デフォルトは&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;+Infinity&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ad9875f50780d2e60921c6b63d95f13c01eb469c" translate="yes" xml:space="preserve">
          <source>The number to add.</source>
          <target state="translated">足し算する数字。</target>
        </trans-unit>
        <trans-unit id="f9c014b7d052f8dbdee08287bf8389882209307c" translate="yes" xml:space="preserve">
          <source>The number to compute the bitwise AND with.</source>
          <target state="translated">ビット単位の AND を計算する番号。</target>
        </trans-unit>
        <trans-unit id="b20fd4f192bd1de81e5397025e24869d303e2407" translate="yes" xml:space="preserve">
          <source>The number to compute the bitwise OR with.</source>
          <target state="translated">ビット単位のORを計算する番号です。</target>
        </trans-unit>
        <trans-unit id="2915f20bdad253a1d84d1288ff45321efc9eef3e" translate="yes" xml:space="preserve">
          <source>The number to compute the bitwise XOR with.</source>
          <target state="translated">ビットごとのXORを計算する番号です。</target>
        </trans-unit>
        <trans-unit id="659948d4af0ce0e538d9fc7583003bf96ae5183c" translate="yes" xml:space="preserve">
          <source>The number to exchange.</source>
          <target state="translated">交換する番号です。</target>
        </trans-unit>
        <trans-unit id="3f218a15291c3c94b883e1d87d28d7c7a5476b0c" translate="yes" xml:space="preserve">
          <source>The number to format.</source>
          <target state="translated">フォーマットする番号。</target>
        </trans-unit>
        <trans-unit id="d7e7721433b70acead29556873e2e66eb4ff9fc5" translate="yes" xml:space="preserve">
          <source>The number to get a plural rule for.</source>
          <target state="translated">複数のルールを取得するための番号です。</target>
        </trans-unit>
        <trans-unit id="76f457c01e52adebc5d6acf13792848ed51de4c8" translate="yes" xml:space="preserve">
          <source>The number to store.</source>
          <target state="translated">貯めておく番号です。</target>
        </trans-unit>
        <trans-unit id="02f9c65f5c74e609ef5af36ef9151b10739dd7d4" translate="yes" xml:space="preserve">
          <source>The number to subtract.</source>
          <target state="translated">引き算する数字。</target>
        </trans-unit>
        <trans-unit id="b35ade9c37b4e132d2b6852ab2d1b1106688773e" translate="yes" xml:space="preserve">
          <source>The numbering system to be used. Possible values include: &quot;&lt;code&gt;adlm&lt;/code&gt;&quot;, &quot;&lt;code&gt;ahom&lt;/code&gt;&quot;, &quot;&lt;code&gt;arab&lt;/code&gt;&quot;, &quot;&lt;code&gt;arabext&lt;/code&gt;&quot;, &quot;&lt;code&gt;bali&lt;/code&gt;&quot;, &quot;&lt;code&gt;beng&lt;/code&gt;&quot;, &quot;&lt;code&gt;bhks&lt;/code&gt;&quot;, &quot;&lt;code&gt;brah&lt;/code&gt;&quot;, &quot;&lt;code&gt;cakm&lt;/code&gt;&quot;, &quot;&lt;code&gt;cham&lt;/code&gt;&quot;, &quot;&lt;code&gt;deva&lt;/code&gt;&quot;, &quot;&lt;code&gt;diak&lt;/code&gt;&quot;, &quot;&lt;code&gt;fullwide&lt;/code&gt;&quot;, &quot;&lt;code&gt;gong&lt;/code&gt;&quot;, &quot;&lt;code&gt;gonm&lt;/code&gt;&quot;, &quot;&lt;code&gt;gujr&lt;/code&gt;&quot;, &quot;&lt;code&gt;guru&lt;/code&gt;&quot;, &quot;&lt;code&gt;hanidec&lt;/code&gt;&quot;, &quot;&lt;code&gt;hmng&lt;/code&gt;&quot;, &quot;&lt;code&gt;hmnp&lt;/code&gt;&quot;, &quot;&lt;code&gt;java&lt;/code&gt;&quot;, &quot;&lt;code&gt;kali&lt;/code&gt;&quot;, &quot;&lt;code&gt;khmr&lt;/code&gt;&quot;, &quot;&lt;code&gt;knda&lt;/code&gt;&quot;, &quot;&lt;code&gt;lana&lt;/code&gt;&quot;, &quot;&lt;code&gt;lanatham&lt;/code&gt;&quot;, &quot;&lt;code&gt;laoo&lt;/code&gt;&quot;, &quot;&lt;code&gt;latn&lt;/code&gt;&quot;, &quot;&lt;code&gt;lepc&lt;/code&gt;&quot;, &quot;&lt;code&gt;limb&lt;/code&gt;&quot;, &quot;&lt;code&gt;mathbold&lt;/code&gt;&quot;, &quot;&lt;code&gt;mathdbl&lt;/code&gt;&quot;, &quot;&lt;code&gt;mathmono&lt;/code&gt;&quot;, &quot;&lt;code&gt;mathsanb&lt;/code&gt;&quot;, &quot;&lt;code&gt;mathsans&lt;/code&gt;&quot;, &quot;&lt;code&gt;mlym&lt;/code&gt;&quot;, &quot;&lt;code&gt;modi&lt;/code&gt;&quot;, &quot;&lt;code&gt;mong&lt;/code&gt;&quot;, &quot;&lt;code&gt;mroo&lt;/code&gt;&quot;, &quot;&lt;code&gt;mtei&lt;/code&gt;&quot;, &quot;&lt;code&gt;mymr&lt;/code&gt;&quot;, &quot;&lt;code&gt;mymrshan&lt;/code&gt;&quot;, &quot;&lt;code&gt;mymrtlng&lt;/code&gt;&quot;, &quot;&lt;code&gt;newa&lt;/code&gt;&quot;, &quot;&lt;code&gt;nkoo&lt;/code&gt;&quot;, &quot;&lt;code&gt;olck&lt;/code&gt;&quot;, &quot;&lt;code&gt;orya&lt;/code&gt;&quot;, &quot;&lt;code&gt;osma&lt;/code&gt;&quot;, &quot;&lt;code&gt;rohg&lt;/code&gt;&quot;, &quot;&lt;code&gt;saur&lt;/code&gt;&quot;, &quot;&lt;code&gt;segment&lt;/code&gt;&quot;, &quot;&lt;code&gt;shrd&lt;/code&gt;&quot;, &quot;&lt;code&gt;sind&lt;/code&gt;&quot;, &quot;&lt;code&gt;sinh&lt;/code&gt;&quot;, &quot;&lt;code&gt;sora&lt;/code&gt;&quot;, &quot;&lt;code&gt;sund&lt;/code&gt;&quot;, &quot;&lt;code&gt;takr&lt;/code&gt;&quot;, &quot;&lt;code&gt;talu&lt;/code&gt;&quot;, &quot;&lt;code&gt;tamldec&lt;/code&gt;&quot;, &quot;&lt;code&gt;telu&lt;/code&gt;&quot;, &quot;&lt;code&gt;thai&lt;/code&gt;&quot;, &quot;&lt;code&gt;tibt&lt;/code&gt;&quot;, &quot;&lt;code&gt;tirh&lt;/code&gt;&quot;, &quot;&lt;code&gt;vaii&lt;/code&gt;&quot;, &quot;&lt;code&gt;wara&lt;/code&gt;&quot;, &quot;&lt;code&gt;wcho&lt;/code&gt;&quot;. &amp;mdash; see the &lt;a href=&quot;../locale/numberingsystem&quot;&gt;standard Unicode numeral systems list&lt;/a&gt;.</source>
          <target state="translated">使用する番号付けシステム。可能な値は次のとおりです。 &quot; &lt;code&gt;adlm&lt;/code&gt; &quot;、 &quot; &lt;code&gt;ahom&lt;/code&gt; &quot;、 &quot; &lt;code&gt;arab&lt;/code&gt; &quot;、 &quot; &lt;code&gt;arabext&lt;/code&gt; &quot;、 &quot; &lt;code&gt;bali&lt;/code&gt; &quot;、 &quot; &lt;code&gt;beng&lt;/code&gt; &quot;、 &quot; &lt;code&gt;bhks&lt;/code&gt; &quot;、 &quot; &lt;code&gt;brah&lt;/code&gt; &quot;、 &quot; &lt;code&gt;cakm&lt;/code&gt; &quot;、 &quot; &lt;code&gt;cham&lt;/code&gt; &quot;、 &quot; &lt;code&gt;deva&lt;/code&gt; &quot;、「 &lt;code&gt;diak&lt;/code&gt; &quot;、&quot; &lt;code&gt;fullwide&lt;/code&gt; &quot;、&quot; &lt;code&gt;gong&lt;/code&gt; &quot;、&quot; &lt;code&gt;gonm&lt;/code&gt; &quot;、&quot; &lt;code&gt;gujr&lt;/code&gt; &quot;、&quot; &lt;code&gt;guru&lt;/code&gt; &quot;、&quot; &lt;code&gt;hanidec&lt;/code&gt; &quot;、&quot; &lt;code&gt;hmng&lt;/code&gt; &quot; &quot; &lt;code&gt;hmnp&lt;/code&gt; &quot;、 &quot; &lt;code&gt;java&lt;/code&gt; &quot;、 &quot; &lt;code&gt;kali&lt;/code&gt; &quot;、&quot; &lt;code&gt;khmr&lt;/code&gt; 」、 &quot; &lt;code&gt;knda&lt;/code&gt; &quot;、 &quot; &lt;code&gt;lana&lt;/code&gt; &quot;、 &quot; &lt;code&gt;lanatham&lt;/code&gt; &quot;、 &quot; &lt;code&gt;laoo&lt;/code&gt; &quot;、 &quot; &lt;code&gt;latn&lt;/code&gt; &quot;、 &quot; &lt;code&gt;lepc&lt;/code&gt; &quot;、 &quot; &lt;code&gt;limb&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mathbold&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mathdbl&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mathmono&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mathsanb&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mathsans&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mlym&lt;/code&gt; &quot;、 &quot; &lt;code&gt;modi&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mong&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mroo&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mtei&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mymr&lt;/code&gt; が&quot;、 &quot; &lt;code&gt;mymrshan&lt;/code&gt; &quot;、 &quot; &lt;code&gt;mymrtlng&lt;/code&gt; &quot;、&quot; &lt;code&gt;newa&lt;/code&gt; &quot;、&quot; &lt;code&gt;nkoo&lt;/code&gt; &quot;、&quot; &lt;code&gt;olck&lt;/code&gt; &quot;、&quot; &lt;code&gt;orya&lt;/code&gt; &quot;、&quot; &lt;code&gt;osma&lt;/code&gt; &quot;、&quot; &lt;code&gt;rohg&lt;/code&gt; &quot;、&quot; &lt;code&gt;saur&lt;/code&gt; &quot;、&quot; &lt;code&gt;segment&lt;/code&gt; &quot;、&quot; &lt;code&gt;shrd&lt;/code&gt; &quot;、&quot; &lt;code&gt;sind&lt;/code&gt; &quot;、&quot; &lt;code&gt;sinh&lt;/code&gt; &quot;、&quot; &lt;code&gt;sora&lt;/code&gt; &quot;、&quot; &lt;code&gt;sund&lt;/code&gt; &quot;、&quot; &lt;code&gt;takr&lt;/code&gt; &quot;、&quot; &lt;code&gt;talu&lt;/code&gt; &quot;、&quot; &lt;code&gt;tamldec&lt;/code&gt; &quot;、 &quot; &lt;code&gt;telu&lt;/code&gt; &quot;、 &quot; &lt;code&gt;thai&lt;/code&gt; &quot;、 &quot; &lt;code&gt;tibt&lt;/code&gt; &quot;、 &quot; &lt;code&gt;tirh&lt;/code&gt; &quot;、 &quot; &lt;code&gt;vaii&lt;/code&gt; &quot;、 &quot; &lt;code&gt;wara&lt;/code&gt; &quot;、 &quot; &lt;code&gt;wcho&lt;/code&gt; &quot;。&amp;mdash;&lt;a href=&quot;../locale/numberingsystem&quot;&gt;標準のUnicode記数法リストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a11c5ee401f4705a50608aeb599eb8095aebe6b3" translate="yes" xml:space="preserve">
          <source>The numbering system to be used. Possible values include: &lt;code&gt;&quot;arab&quot;&lt;/code&gt;, &lt;code&gt;&quot;arabext&quot;&lt;/code&gt;, &lt;code&gt;&quot;bali&quot;&lt;/code&gt;, &lt;code&gt;&quot;beng&quot;&lt;/code&gt;, &lt;code&gt;&quot;deva&quot;&lt;/code&gt;, &lt;code&gt;&quot;fullwide&quot;&lt;/code&gt;, &lt;code&gt;&quot;gujr&quot;&lt;/code&gt;, &lt;code&gt;&quot;guru&quot;&lt;/code&gt;, &lt;code&gt;&quot;hanidec&quot;&lt;/code&gt;, &lt;code&gt;&quot;khmr&quot;&lt;/code&gt;, &lt;code&gt;&quot;knda&quot;&lt;/code&gt;, &lt;code&gt;&quot;laoo&quot;&lt;/code&gt;, &lt;code&gt;&quot;latn&quot;&lt;/code&gt;, &lt;code&gt;&quot;limb&quot;&lt;/code&gt;, &lt;code&gt;&quot;mlym&quot;&lt;/code&gt;, &lt;code&gt;&quot;mong&quot;&lt;/code&gt;, &lt;code&gt;&quot;mymr&quot;&lt;/code&gt;, &lt;code&gt;&quot;orya&quot;&lt;/code&gt;, &lt;code&gt;&quot;tamldec&quot;&lt;/code&gt;, &lt;code&gt;&quot;telu&quot;&lt;/code&gt;, &lt;code&gt;&quot;thai&quot;&lt;/code&gt;, &lt;code&gt;&quot;tibt&quot;&lt;/code&gt;.</source>
          <target state="translated">使用する番号付けシステム。可能な値は次のとおりです。 &lt;code&gt;&quot;arab&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;arabext&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;bali&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;beng&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;deva&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;fullwide&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;gujr&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;guru&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hanidec&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;khmr&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;knda&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;laoo&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;latn&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;limb&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;mlym&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;mong&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;mymr&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;orya&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;tamldec&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;telu&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;thai&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;tibt&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e90dfd2aa880f980c6807ad11ce35690adf4c53b" translate="yes" xml:space="preserve">
          <source>The numbers &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, as well as the value &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, are all considered &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">数値&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;、および値&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;はすべて &lt;code&gt;null&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="dab259e3c08340a782110f81c2b489db6950415f" translate="yes" xml:space="preserve">
          <source>The numbers &lt;code&gt;-2147483648&lt;/code&gt; and &lt;code&gt;2147483647&lt;/code&gt; are the minimum and the maximum integers representable through a 32bit signed number.</source>
          <target state="translated">数値 &lt;code&gt;-2147483648&lt;/code&gt; および &lt;code&gt;2147483647&lt;/code&gt; は、32ビットの符号付き数値で表現できる最小および最大の整数です。</target>
        </trans-unit>
        <trans-unit id="b255e5a3d10a82cd08a282a87e3cd441549dcca8" translate="yes" xml:space="preserve">
          <source>The numeric value of the object being created.</source>
          <target state="translated">作成されるオブジェクトの数値。</target>
        </trans-unit>
        <trans-unit id="c0ba3e9e71a6a3d16d604102e712829e608d1577" translate="yes" xml:space="preserve">
          <source>The numeric value of the object being created. May be a string or an integer.</source>
          <target state="translated">作成されるオブジェクトの数値。文字列または整数です。</target>
        </trans-unit>
        <trans-unit id="aff7247f65f1de78346ce6acaafa45528068a21a" translate="yes" xml:space="preserve">
          <source>The object (not null, false, 3.1415 or other primitive types) returned by the constructor function becomes the result of the whole &lt;code&gt;new&lt;/code&gt; expression. If the constructor function doesn't explicitly return an object, the object created in step 1 is used instead. (Normally constructors don't return a value, but they can choose to do so if they want to override the normal object creation process.)</source>
          <target state="translated">コンストラクター関数によって返されるオブジェクト（null、false、3.1415またはその他のプリミティブ型ではない）は、まったく &lt;code&gt;new&lt;/code&gt; 式の結果になります。コンストラクター関数が明示的にオブジェクトを返さない場合は、ステップ1で作成されたオブジェクトが代わりに使用されます。（通常、コンストラクターは値を返しませんが、通常のオブジェクト作成プロセスをオーバーライドする場合は、値を返すように選択できます。）</target>
        </trans-unit>
        <trans-unit id="1e3f7c7169e8f8703602eafe9a24320e257b9a57" translate="yes" xml:space="preserve">
          <source>The object and array literal expressions provide an easy way to create &lt;em&gt;ad hoc&lt;/em&gt; packages of data.</source>
          <target state="translated">オブジェクトおよび配列リテラル式を使用すると、データの&lt;em&gt;アドホック&lt;/em&gt;パッケージを簡単に作成でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ed5f64856277e53faa5995ee3ac53d31d498198c" translate="yes" xml:space="preserve">
          <source>The object being frozen is &lt;em&gt;immutable&lt;/em&gt;. However, it is not necessarily &lt;em&gt;constant&lt;/em&gt;. The following example shows that a frozen object is not constant (freeze is shallow).</source>
          <target state="translated">凍結されるオブジェクトは&lt;em&gt;不変&lt;/em&gt;です。ただし、必ずしも&lt;em&gt;一定&lt;/em&gt;ではありません。次の例は、凍結されたオブジェクトが一定でないことを示しています（凍結は浅い）。</target>
        </trans-unit>
        <trans-unit id="39ccb1eed1434790f33e775bb46917d34dbd8c08" translate="yes" xml:space="preserve">
          <source>The object being made non-extensible.</source>
          <target state="translated">拡張不可能にされているオブジェクト。</target>
        </trans-unit>
        <trans-unit id="65d1c6d16c6a9975ac052743ffb154f98815dbb7" translate="yes" xml:space="preserve">
          <source>The object being sealed.</source>
          <target state="translated">封印されている対象物。</target>
        </trans-unit>
        <trans-unit id="72f1057afbcfb62419e70234f526fd639ac195e5" translate="yes" xml:space="preserve">
          <source>The object for which to get all own property descriptors.</source>
          <target state="translated">すべての自身のプロパティ記述子を取得するためのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5be727bb6fb858320f328547edd531732d26fe08" translate="yes" xml:space="preserve">
          <source>The object in which to look for the property.</source>
          <target state="translated">プロパティを探すためのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="03a095c56888fd8bad6f1c01460d7416c443afe9" translate="yes" xml:space="preserve">
          <source>The object literal notation is not the same as the &lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;). Although they look similar, there are differences between them:</source>
          <target state="translated">オブジェクト・リテラル表記は同じではありません&lt;strong&gt;J&lt;/strong&gt; AVA &lt;strong&gt;S&lt;/strong&gt; CRIPT &lt;strong&gt;O&lt;/strong&gt; bject &lt;strong&gt;Nの&lt;/strong&gt; otation（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;）。それらは似ていますが、それらの間には違いがあります：</target>
        </trans-unit>
        <trans-unit id="2a9e0c6f96f7ec07094918cc0911541556d97b98" translate="yes" xml:space="preserve">
          <source>The object of which the enumerable's own properties are to be returned.</source>
          <target state="translated">enumerable自身のプロパティが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="df3eea7321d1fad8889ab8078b41a4196cfddec2" translate="yes" xml:space="preserve">
          <source>The object on which to define or modify properties.</source>
          <target state="translated">プロパティを定義または変更するためのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="63b76b7fd94cb9ee6818b8a9f5f445fcec7e16b2" translate="yes" xml:space="preserve">
          <source>The object on which to define the property.</source>
          <target state="translated">プロパティを定義するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5257d3e633253fc44eb813a2d3821bab623738db" translate="yes" xml:space="preserve">
          <source>The object returned by &lt;code&gt;resolvedOptions()&lt;/code&gt; has the following properties:</source>
          <target state="translated">&lt;code&gt;resolvedOptions()&lt;/code&gt; によって返されるオブジェクトには、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="366d64e19cf9ba4de7a885be38083786e1aa0503" translate="yes" xml:space="preserve">
          <source>The object that was passed to the function.</source>
          <target state="translated">関数に渡されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="293cb1e356ecc429d1fa1d057f7130d6aa4728dc" translate="yes" xml:space="preserve">
          <source>The object this method belongs to.</source>
          <target state="translated">このメソッドが属するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3d38b6ac42a7b6f65d8ae6b9c61a924c4a037303" translate="yes" xml:space="preserve">
          <source>The object to freeze.</source>
          <target state="translated">凍結する対象。</target>
        </trans-unit>
        <trans-unit id="9baca65f9cbd0fbc1015e93983d0544dfed81ca6" translate="yes" xml:space="preserve">
          <source>The object to test.</source>
          <target state="translated">テストする対象。</target>
        </trans-unit>
        <trans-unit id="b8718827024d12761f6f835e1664546c244dc2d6" translate="yes" xml:space="preserve">
          <source>The object to which the assignment was originally directed. This is usually the proxy itself. But a &lt;code&gt;set()&lt;/code&gt; handler can also be called indirectly, via the prototype chain or various other ways.</source>
          <target state="translated">割り当てが最初に向けられたオブジェクト。これは通常、プロキシ自体です。ただし、 &lt;code&gt;set()&lt;/code&gt; ハンドラーは、プロトタイプチェーンまたはその他のさまざまな方法を介して間接的に呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="1304624eb6d761703704344a50310762fdc81a0f" translate="yes" xml:space="preserve">
          <source>The object to which the assignment was originally directed. This is usually the proxy itself. But a &lt;code&gt;set&lt;/code&gt; handler can also be called indirectly, via the prototype chain or various other ways.</source>
          <target state="translated">割り当てが最初に向けられたオブジェクト。これは通常、プロキシ自体です。ただし、 &lt;code&gt;set&lt;/code&gt; ハンドラーは、プロトタイプチェーンまたはその他のさまざまな方法で間接的に呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="aa0165de96c6193e5cb7d7b7c72dffc16de38e44" translate="yes" xml:space="preserve">
          <source>The object which is to have its prototype set.</source>
          <target state="translated">そのプロトタイプがセットされているオブジェクト。</target>
        </trans-unit>
        <trans-unit id="201e863f2019256040397b303f37f3f38000b16f" translate="yes" xml:space="preserve">
          <source>The object which should be checked.</source>
          <target state="translated">チェックすべきオブジェクト。</target>
        </trans-unit>
        <trans-unit id="43a35898b1d8addc5cd09979f03c2e1b6dd1cb0b" translate="yes" xml:space="preserve">
          <source>The object which should be made non-extensible.</source>
          <target state="translated">拡張性を持たせないようにすべきオブジェクト。</target>
        </trans-unit>
        <trans-unit id="12d0dca3be70fcd44183f52424ceb694b1cfbf75" translate="yes" xml:space="preserve">
          <source>The object which should be sealed.</source>
          <target state="translated">封印すべき対象物。</target>
        </trans-unit>
        <trans-unit id="a93422b357bfa928d2a0a105069bd82b0f6bc700" translate="yes" xml:space="preserve">
          <source>The object which should be the prototype of the newly-created object.</source>
          <target state="translated">新しく作成したオブジェクトのプロトタイプとなるべきオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4c2739d4584b3eff7cd640e17bf777516e8c3311" translate="yes" xml:space="preserve">
          <source>The object whose enumerable &lt;em&gt;and non-enumerable&lt;/em&gt; own properties are to be returned.</source>
          <target state="translated">列挙可能&lt;em&gt;および&lt;/em&gt;列挙&lt;em&gt;不可能な&lt;/em&gt;独自のプロパティが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6a5634bf9a59eb88ae9abd12902c749baa8fbca2" translate="yes" xml:space="preserve">
          <source>The object whose enumerable and non-enumerable properties are to be returned.</source>
          <target state="translated">列挙可能なプロパティと列挙不可能なプロパティが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5d26e6d1a406a06d81f56c71c21176892ec526d8" translate="yes" xml:space="preserve">
          <source>The object whose enumerable own property &lt;code&gt;[key, value]&lt;/code&gt; pairs are to be returned.</source>
          <target state="translated">列挙可能な独自のプロパティ &lt;code&gt;[key, value]&lt;/code&gt; ペアが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="85a6b506897ee451c6b8ebcf6fc7b2debaee68eb" translate="yes" xml:space="preserve">
          <source>The object whose enumerable own property values are to be returned.</source>
          <target state="translated">列挙可能な自身のプロパティ値が返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="822b0f7c32d221e2f5345d0d5a927362ea023643" translate="yes" xml:space="preserve">
          <source>The object whose own enumerable string-keyed property &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; pairs are to be returned.</source>
          <target state="translated">独自の列挙可能な文字列キープロパティ &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; ペアが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4efbf79d23ce1e9fcabc632125b5edf91e9033c0" translate="yes" xml:space="preserve">
          <source>The object whose prototype chain will be searched.</source>
          <target state="translated">プロトタイプチェーンが検索されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="075b152c4744470238c1aa2d7a7cab773348a22c" translate="yes" xml:space="preserve">
          <source>The object whose prototype is to be returned.</source>
          <target state="translated">プロトタイプが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="c1d4d65e227817406a7a7c6076f0791fc4f0a0c5" translate="yes" xml:space="preserve">
          <source>The object whose symbol properties are to be returned.</source>
          <target state="translated">シンボルプロパティが返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="02ecf4c976c906f05327deb163703547357b02f0" translate="yes" xml:space="preserve">
          <source>The object's new prototype (an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">オブジェクトの新しいプロトタイプ（オブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="606abd8fbe64e746222130b2419c1cf2200ca9d6" translate="yes" xml:space="preserve">
          <source>The object's new prototype or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの新しいプロトタイプまたは &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="775926049bbc2c83571495d9013c8195596905cf" translate="yes" xml:space="preserve">
          <source>The obsolete &lt;code&gt;arguments.caller&lt;/code&gt; property used to provide the function that invoked the currently executing function. This property has been removed and no longer works.</source>
          <target state="translated">現在実行中の関数を呼び出した関数を提供するために使用される廃止された &lt;code&gt;arguments.caller&lt;/code&gt; プロパティ。このプロパティは削除され、機能しなくなりました。</target>
        </trans-unit>
        <trans-unit id="87d933eeb78523a4be6d23a865347381192e4206" translate="yes" xml:space="preserve">
          <source>The offset (in bytes) of this view from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. Fixed at construction time and thus &lt;strong&gt;read only.&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;先頭からのこのビューのオフセット（バイト単位）。構築時に修正されるため、&lt;strong&gt;読み取り専用です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d7293dbedd498867c3ff92402f6adf6fc514a200" translate="yes" xml:space="preserve">
          <source>The offset (in bytes) of this view from the start of its &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. Fixed at construction time and thus &lt;strong&gt;read only.&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;先頭からのこのビューのオフセット（バイト単位）。構築時に修正されるため、&lt;strong&gt;読み取り専用です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dd0b97905b5240f9a6f92b84495a51c3d20542d" translate="yes" xml:space="preserve">
          <source>The offset into the target array at which to begin writing values from the source &lt;code&gt;array&lt;/code&gt;. If you omit this value, 0 is assumed (that is, the source &lt;code&gt;array&lt;/code&gt; will overwrite values in the target array starting at index 0).</source>
          <target state="translated">ソース &lt;code&gt;array&lt;/code&gt; からの値の書き込みを開始するターゲット配列へのオフセット。この値を省略すると、0が想定されます（つまり、ソース &lt;code&gt;array&lt;/code&gt; は、ターゲット配列のインデックス0から始まる値を上書きします）。</target>
        </trans-unit>
        <trans-unit id="60de1ceeb1236d00f620e11d123f277fb0fa0466" translate="yes" xml:space="preserve">
          <source>The offset into the target array at which to begin writing values from the source array. If this value is omitted, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).</source>
          <target state="translated">ターゲット配列へのオフセットで、ソース配列からの値の書き込みを開始します。この値を省略した場合は 0 と見なされます(つまり、ソース配列はインデックス 0 から始まるターゲット配列の値を上書きします)。</target>
        </trans-unit>
        <trans-unit id="636fc596afc32de359f1d96eb3f0ae9a0fe3c66d" translate="yes" xml:space="preserve">
          <source>The offset of the matched substring within the whole string being examined. (For example, if the whole string was &lt;code&gt;'abcd'&lt;/code&gt;, and the matched substring was &lt;code&gt;'bc'&lt;/code&gt;, then this argument will be 1.)</source>
          <target state="translated">検査されている文字列全体の中で一致した部分文字列のオフセット。（たとえば、文字列全体が &lt;code&gt;'abcd'&lt;/code&gt; で、一致した部分文字列が &lt;code&gt;'bc'&lt;/code&gt; の場合、この引数は1になります。）</target>
        </trans-unit>
        <trans-unit id="f606e2f26797addd1300502cd3f1cbe446b51f78" translate="yes" xml:space="preserve">
          <source>The offset of the matched substring within the whole string being examined. (For example, if the whole string was &lt;code&gt;'abcd'&lt;/code&gt;, and the matched substring was &lt;code&gt;'bc'&lt;/code&gt;, then this argument will be &lt;code&gt;1&lt;/code&gt;.)</source>
          <target state="translated">調べている文字列全体の中で一致した部分文字列のオフセット。（たとえば、文字列全体が &lt;code&gt;'abcd'&lt;/code&gt; であり、一致する部分文字列が &lt;code&gt;'bc'&lt;/code&gt; の場合、この引数は &lt;code&gt;1&lt;/code&gt; になります。）</target>
        </trans-unit>
        <trans-unit id="fb1bb892481b2ac4142e9df11bd27b4a771ade0d" translate="yes" xml:space="preserve">
          <source>The offset, in byte, from the start of the view where to read the data.</source>
          <target state="translated">データを読み込むビューの開始位置からのオフセット(バイト単位)。</target>
        </trans-unit>
        <trans-unit id="35401d4c39cdb22722df825d14b1fa8a08c98b04" translate="yes" xml:space="preserve">
          <source>The offset, in byte, from the start of the view where to store the data.</source>
          <target state="translated">データを保存するビューの開始位置からのオフセット(バイト単位)。</target>
        </trans-unit>
        <trans-unit id="cb217eb065015355cf571484615b76dbfe0d54cc" translate="yes" xml:space="preserve">
          <source>The offset, in bytes, from the start of the view to read the data from.</source>
          <target state="translated">データを読み込むビューの先頭からのオフセットをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="9c6fc778917d4085c64c4611ab2ac44a5a192d88" translate="yes" xml:space="preserve">
          <source>The offset, in bytes, from the start of the view to store the data from.</source>
          <target state="translated">データを格納するビューの開始点からのオフセット(バイト単位)。</target>
        </trans-unit>
        <trans-unit id="cf328684716ea3c875f103fb9bf78e5fba9b57bf" translate="yes" xml:space="preserve">
          <source>The offset, in bytes, from the start of the view where to read the data.</source>
          <target state="translated">データを読み込むビューの先頭からのオフセットをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="2dde8f5bd0ea9f29a8b77189d7a1a479575a92a0" translate="yes" xml:space="preserve">
          <source>The offset, in bytes, to the first byte in the above buffer for the new view to reference. If unspecified, the buffer view starts with the first byte.</source>
          <target state="translated">新しいビューが参照するバッファの最初のバイトまでのオフセットをバイト単位で指定します。指定されていない場合、バッファビューは最初のバイトから始まります。</target>
        </trans-unit>
        <trans-unit id="990634359cf929d7e408f15e01f059bd9cfc6c4b" translate="yes" xml:space="preserve">
          <source>The old value at the given position (&lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;[&lt;var&gt;index&lt;/var&gt;]&lt;/code&gt;).</source>
          <target state="translated">指定された位置の古い値（ &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;[&lt;var&gt;index&lt;/var&gt;]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="308b7335f68f8120ce5c15ef7982db9e3f6acfef" translate="yes" xml:space="preserve">
          <source>The old value at the given position (&lt;code&gt;typedArray[index]&lt;/code&gt;).</source>
          <target state="translated">指定された位置の古い値（ &lt;code&gt;typedArray[index]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9e12822ef7cdf01510ae10f7497711deccf80d66" translate="yes" xml:space="preserve">
          <source>The only known browser to have actually taken advantage of this is old Internet Explorer (see &lt;a href=&quot;#IE-specific_notes&quot;&gt;below&lt;/a&gt;).</source>
          <target state="translated">これを実際に利用した唯一の既知のブラウザは、古いInternet Explorerです（&lt;a href=&quot;#IE-specific_notes&quot;&gt;以下を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="20be9c3270c4c09714a147b2b0ea506a7bbb42f8" translate="yes" xml:space="preserve">
          <source>The operand can't be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">オペランドを &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; することはできません</target>
        </trans-unit>
        <trans-unit id="62f01aaad13e348f940397eed6a4536bcd2ddcf6" translate="yes" xml:space="preserve">
          <source>The operands are compared using the &lt;a href=&quot;https://tc39.es/ecma262/#sec-abstract-relational-comparison&quot;&gt;Abstract Relational Comparison&lt;/a&gt; algorithm, which is roughly summarised below:</source>
          <target state="translated">オペランドは、以下に大まかに要約されている&lt;a href=&quot;https://tc39.es/ecma262/#sec-abstract-relational-comparison&quot;&gt;抽象関係比較&lt;/a&gt;アルゴリズムを使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="17df0b1fd7bca59b9460005a95891e53f8979115" translate="yes" xml:space="preserve">
          <source>The operands are compared using the &lt;a href=&quot;https://tc39.es/ecma262/#sec-abstract-relational-comparison&quot;&gt;Abstract Relational Comparison&lt;/a&gt; algorithm. See the documentation for the &lt;a href=&quot;less_than&quot;&gt;Less than&lt;/a&gt; operator for a summary of this algorithm.</source>
          <target state="translated">オペランドは、&lt;a href=&quot;https://tc39.es/ecma262/#sec-abstract-relational-comparison&quot;&gt;抽象関係比較&lt;/a&gt;アルゴリズムを使用して比較されます。このアルゴリズムの概要については、&lt;a href=&quot;less_than&quot;&gt;Lessthan&lt;/a&gt;演算子のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="96b02bc5f7eb1057720563604824c413e6745a7a" translate="yes" xml:space="preserve">
          <source>The operands are converted to 32-bit integers and expressed by a series of bits (zeroes and ones). Numbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32 bit integer:</source>
          <target state="translated">オペランドは32ビットの整数に変換され、一連のビット(0と1)で表現されます。32ビット以上の数値は、その最上位ビットが破棄されます。例えば、次のような32ビット以上の整数は32ビットの整数に変換されます。</target>
        </trans-unit>
        <trans-unit id="b571ea0bd93ed87a048ad53bd2f13df6bafe9a84" translate="yes" xml:space="preserve">
          <source>The operands of all bitwise operators are converted to signed 32-bit integers in two's complement format. Two's complement format means that a number's negative counterpart (e.g. 5 vs. -5) is all the number's bits inverted (bitwise NOT of the number, a.k.a. ones' complement of the number) plus one. For example, the following encodes the integer 314:</source>
          <target state="translated">すべてのビット演算子のオペランドは、2の補数形式で符号付き32ビット整数に変換されます。2の補数形式とは、数値の負の対数(例えば、5対-5)は、数値のすべてのビットを反転したもの(数値のビットごとのNOT、別名、数値の1の補数)に1を加えたものであることを意味します。例えば、以下は整数 314 をエンコードしています。</target>
        </trans-unit>
        <trans-unit id="f311c4708af370d2bf4cad69e8c2ad81f2d4ec12" translate="yes" xml:space="preserve">
          <source>The operations supported on &lt;code&gt;BigInt&lt;/code&gt;s are not constant time. &lt;code&gt;BigInt&lt;/code&gt; is therefore &lt;a href=&quot;https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html&quot;&gt;unsuitable for use in cryptography&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;BigInt&lt;/code&gt; でサポートされる操作は、一定の時間ではありません。したがって、 &lt;code&gt;BigInt&lt;/code&gt; は&lt;a href=&quot;https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html&quot;&gt;暗号化での使用には適してい&lt;/a&gt;ません。</target>
        </trans-unit>
        <trans-unit id="060ac04672669b149249e9a458e1937a5a40653e" translate="yes" xml:space="preserve">
          <source>The operator is applied to each pair of bits, and the result is constructed bitwise.</source>
          <target state="translated">演算子は各ビットのペアに適用され、結果はビット単位で構成されます。</target>
        </trans-unit>
        <trans-unit id="8f6e8a41cab4646ab618bfef474696b573508951" translate="yes" xml:space="preserve">
          <source>The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a&lt;a href=&quot;block&quot;&gt; block statement&lt;/a&gt;, which combines several statements into a single one.</source>
          <target state="translated">複数のステートメントが必要であるがJavaScriptでは単一のステートメントしか許可されないという逆の動作は、複数のステートメントを1つの&lt;a href=&quot;block&quot;&gt;ステートメント&lt;/a&gt;に結合するブロックステートメントを使用して可能です。</target>
        </trans-unit>
        <trans-unit id="d0f48e82409ce7c4dbd4710cffc99b7762b60d2a" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; statement associated with each &lt;code&gt;case&lt;/code&gt; label ensures that the program breaks out of &lt;code&gt;switch&lt;/code&gt; once the matched statement is executed and continues execution at the statement following &lt;code&gt;switch&lt;/code&gt;. If &lt;code&gt;break&lt;/code&gt; is omitted, the program continues execution at the next statement in the &lt;code&gt;switch&lt;/code&gt; statement. The &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; statement is not required if a &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; statement precedes it.</source>
          <target state="translated">オプションの &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; それぞれに関連する文の &lt;code&gt;case&lt;/code&gt; プログラムはの勃発というラベル性を保証 &lt;code&gt;switch&lt;/code&gt; マッチした文を実行し、次の文で実行を継続されると &lt;code&gt;switch&lt;/code&gt; 。場合 &lt;code&gt;break&lt;/code&gt; 省略され、プログラムが中に次のステートメントで実行を継続 &lt;code&gt;switch&lt;/code&gt; 声明。 &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; 場合ステートメントが必要とされていない &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 文は、それに先行します。</target>
        </trans-unit>
        <trans-unit id="113ef359e2fa153524143a2d07b6ac1a2e318560" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; statement associated with each case label ensures that the program breaks out of switch once the matched statement is executed and continues execution at the statement following switch. If &lt;code&gt;break&lt;/code&gt; is omitted, the program continues execution at the next statement in the &lt;code&gt;switch&lt;/code&gt; statement.</source>
          <target state="translated">各ケースラベルに関連付けられたオプションの &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; ステートメントは、一致したステートメントが実行されるとプログラムがスイッチから抜け出し、switchに続くステートメントで実行を継続することを保証します。場合 &lt;code&gt;break&lt;/code&gt; 省略され、プログラムが中に次のステートメントで実行を継続 &lt;code&gt;switch&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="10ee8646e1976846bd327ccf1cc7b18dbb1f227f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;radix&lt;/code&gt; parameter of the &lt;a href=&quot;../global_objects/number/tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; method was specified. Its value must be an integer (a number) between 2 and 36, specifying the base of the number system to be used for representing numeric values. For example, the decimal (base 10) number 169 is represented in hexadecimal (base 16) as A9.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/number/tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt;メソッドのオプションの &lt;code&gt;radix&lt;/code&gt; パラメーターが指定されました。その値は、2〜36の整数（数値）である必要があり、数値を表すために使用される数値システムのベースを指定します。たとえば、10進数（基数10）の数値169は、16進数（基数16）ではA9として表されます。</target>
        </trans-unit>
        <trans-unit id="62403c1dd03a2f93d232454a21ad7bf65895241e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;radix&lt;/code&gt; parameter of the &lt;a href=&quot;../global_objects/number/tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;../global_objects/bigint/tostring&quot;&gt;&lt;code&gt;BigInt.prototype.toString()&lt;/code&gt;&lt;/a&gt; method was specified. Its value must be an integer (a number) between 2 and 36, specifying the base of the number system to be used for representing numeric values. For example, the decimal (base 10) number 169 is represented in hexadecimal (base 16) as A9.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/number/tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/bigint/tostring&quot;&gt; &lt;code&gt;BigInt.prototype.toString()&lt;/code&gt; &lt;/a&gt;メソッドのオプションの &lt;code&gt;radix&lt;/code&gt; パラメーターが指定されました。その値は2から36までの整数（数値）である必要があり、数値を表すために使用される記数法の基数を指定します。たとえば、10進数（基数10）の数値169は、16進数（基数16）でA9として表されます。</target>
        </trans-unit>
        <trans-unit id="2ca773f499f3eaca286b7b45df7bb913b92f9795" translate="yes" xml:space="preserve">
          <source>The optional chaining operator</source>
          <target state="translated">オプションのチェーン演算子</target>
        </trans-unit>
        <trans-unit id="6b26c90f8bc1d2bec49383f85cfefd76fb361656" translate="yes" xml:space="preserve">
          <source>The optional chaining operator provides a way to simplify accessing values through connected objects when it's possible that a reference or function may be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">オプションの連鎖演算子は、参照または関数が &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; である可能性がある場合に、接続されたオブジェクトを介した値へのアクセスを簡素化する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="e7c794f0ddf71b526f21629bc4a19c9dd7d1ba5b" translate="yes" xml:space="preserve">
          <source>The order of the array returned by &lt;code&gt;&lt;strong&gt;Object.entries()&lt;/strong&gt;&lt;/code&gt; does not depend on how an object is defined. If there is a need for certain ordering, then the array should be sorted first, like &lt;code&gt;Object.entries(obj).sort((a, b) =&amp;gt;&amp;nbsp;b[0].localeCompare(a[0]));&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;Object.entries()&lt;/strong&gt;&lt;/code&gt; によって返される配列の順序は、オブジェクトの定義方法に依存しません。特定の順序が必要な場合は、 &lt;code&gt;Object.entries(obj).sort((a, b) =&amp;gt;&amp;nbsp;b[0].localeCompare(a[0]));&lt;/code&gt; ように、配列を最初に並べ替える必要があります。。</target>
        </trans-unit>
        <trans-unit id="5b518001b2730bfd79b73a1ddfbb57de3a0b1024" translate="yes" xml:space="preserve">
          <source>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the &lt;a href=&quot;https://tc39.es/ecma262/#sec-ordinaryownpropertykeys&quot;&gt;OrdinaryOwnPropertyKeys&lt;/a&gt; and &lt;a href=&quot;https://tc39.es/ecma262/#sec-enumerate-object-properties&quot;&gt;EnumerateObjectProperties&lt;/a&gt; abstract specification operations. But note that no single mechanism iterates &lt;strong&gt;all&lt;/strong&gt; of an object's properties; the various mechanisms each include different subsets of properties. (&lt;a href=&quot;../statements/for...in&quot;&gt;&lt;code&gt;for-in&lt;/code&gt;&lt;/a&gt; includes only enumerable string-keyed properties; &lt;a href=&quot;object/keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; includes only own, enumerable, string-keyed properties; &lt;a href=&quot;object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt; includes own, string-keyed properties even if non-enumerable; &lt;a href=&quot;object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt; does the same for just &lt;code&gt;Symbol&lt;/code&gt;-keyed properties, etc.)</source>
          <target state="translated">順序は、ECMAScript2015でのみ独自のプロパティに対して最初に定義されました。ECMAScript 2020は、継承されたプロパティの順序も定義します。&lt;a href=&quot;https://tc39.es/ecma262/#sec-ordinaryownpropertykeys&quot;&gt;OrdinaryOwnPropertyKeys&lt;/a&gt;および&lt;a href=&quot;https://tc39.es/ecma262/#sec-enumerate-object-properties&quot;&gt;EnumerateObjectProperties&lt;/a&gt;抽象仕様操作を参照してください。ただし、単一のメカニズムがオブジェクトの&lt;strong&gt;すべて&lt;/strong&gt;のプロパティを反復する&lt;strong&gt;わけ&lt;/strong&gt;ではないことに注意してください。さまざまなメカニズムにはそれぞれ、プロパティのさまざまなサブセットが含まれています。（&lt;a href=&quot;../statements/for...in&quot;&gt; &lt;code&gt;for-in&lt;/code&gt; &lt;/a&gt;のみ列挙文字列キー付きプロパティが含まれ; &lt;a href=&quot;object/keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; に&lt;/a&gt;のみ自身、列挙、文字列キー付きプロパティが含まれ; &lt;a href=&quot;object/getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; で&lt;/a&gt;も非列挙場合自体、文字列キー付きプロパティが含まれ; &lt;a href=&quot;object/getownpropertysymbols&quot;&gt; &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; は&lt;/a&gt;わずかに同じ処理を行い &lt;code&gt;Symbol&lt;/code&gt; -キー付きプロパティなど）</target>
        </trans-unit>
        <trans-unit id="5b4e9e081a207a4bdff3b4ffadaca854fa879743" translate="yes" xml:space="preserve">
          <source>The original string against which the regular expression was matched.</source>
          <target state="translated">正規表現がマッチした元の文字列。</target>
        </trans-unit>
        <trans-unit id="0294f36832fe89b2a01b7dac64f472413e428499" translate="yes" xml:space="preserve">
          <source>The original string is left unchanged.</source>
          <target state="translated">元の文字列はそのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="e29382ccff54f72abbe49d022f7e11e7cb7a8b53" translate="yes" xml:space="preserve">
          <source>The original string that was matched against.</source>
          <target state="translated">マッチした元の文字列。</target>
        </trans-unit>
        <trans-unit id="8d1a2dec47949be42039563b4b3cd254fdc3f118" translate="yes" xml:space="preserve">
          <source>The other Array methods: &lt;a href=&quot;every&quot;&gt;&lt;code&gt;every()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;some&quot;&gt;&lt;code&gt;some()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;find&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;findindex&quot;&gt;&lt;code&gt;findIndex()&lt;/code&gt;&lt;/a&gt; test the array elements with a predicate returning a truthy value to determine if further iteration is required.</source>
          <target state="translated">その他のArrayメソッド：&lt;a href=&quot;every&quot;&gt; &lt;code&gt;every()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;some&quot;&gt; &lt;code&gt;some()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;find&quot;&gt; &lt;code&gt;find()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;findindex&quot;&gt; &lt;code&gt;findIndex()&lt;/code&gt; &lt;/a&gt;は、真の値を返す述語を使用して配列要素をテストし、さらに反復が必要かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="d3ab60f2cb9fec89dd219153a011787a68f370c6" translate="yes" xml:space="preserve">
          <source>The other way (introduced in ECMAScript 5) is to treat the string as an array-like object, where individual characters correspond to a numerical index:</source>
          <target state="translated">もう一つの方法(ECMAScript 5 で導入された)は、文字列を配列のようなオブジェクトとして扱うことで、個々の文字が数値インデックスに対応しています。</target>
        </trans-unit>
        <trans-unit id="acc65d6b37eb2041f2cf152ca2fcc2f20f799ef7" translate="yes" xml:space="preserve">
          <source>The outer &quot;oops&quot; is not thrown because of the return in the &lt;code&gt;finally&lt;/code&gt;-block. The same would apply to any value returned from the &lt;code&gt;catch&lt;/code&gt;-block.</source>
          <target state="translated">外側の「おっと」は、 &lt;code&gt;finally&lt;/code&gt; - blockで返されるためスローされません。同じことが &lt;code&gt;catch&lt;/code&gt; ブロックから返されるすべての値にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="896d0f785a9072c81f598851d416121b0a56b3a9" translate="yes" xml:space="preserve">
          <source>The outer &quot;oops&quot; is not thrown because of the return in the finally block. The same would apply to any value returned from the catch block.</source>
          <target state="translated">外側の「おっと」は、最後のブロックで返されたために投げられません。キャッチブロックから返された値についても同じことが言えます。</target>
        </trans-unit>
        <trans-unit id="6e7b10eb90956f8dbf9c29aacef62bdf7db86dbc" translate="yes" xml:space="preserve">
          <source>The output from this example:</source>
          <target state="translated">この例の出力です。</target>
        </trans-unit>
        <trans-unit id="931ac897fa8f6aaf44b01b73d678c842b993097c" translate="yes" xml:space="preserve">
          <source>The output looks like this:</source>
          <target state="translated">出力はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="2339242fa4ce5b6def53d6c7ee27c2327adbc6cc" translate="yes" xml:space="preserve">
          <source>The parameters of a function call are the function's &lt;em&gt;arguments&lt;/em&gt;. Arguments are passed to functions &lt;em&gt;by value&lt;/em&gt;. If the function changes the value of an argument, this change is not reflected globally or in the calling function. However, object references are values, too, and they are special: if the function changes the referred object's properties, that change is visible outside the function, as shown in the following example:</source>
          <target state="translated">関数呼び出しのパラメーターは、関数の&lt;em&gt;引数&lt;/em&gt;です。引数は&lt;em&gt;値によって&lt;/em&gt;関数に渡さ&lt;em&gt;れます&lt;/em&gt;。関数が引数の値を変更した場合、この変更はグローバルにも、呼び出し元の関数にも反映されません。ただし、オブジェクト参照も値であり、それらは特別です。関数が参照されたオブジェクトのプロパティを変更した場合、その変更は次の例に示すように、関数の外部で表示されます。</target>
        </trans-unit>
        <trans-unit id="cabcfd176963b76ec5c3f3f48807605c14a596e9" translate="yes" xml:space="preserve">
          <source>The parentheses are optional.</source>
          <target state="translated">括弧は任意です。</target>
        </trans-unit>
        <trans-unit id="dc6662eb6d4bd4bded2aa22975e313d411d51b8f" translate="yes" xml:space="preserve">
          <source>The parenthesized substring matches, if any.</source>
          <target state="translated">括弧で囲まれた部分文字列にマッチするものがあれば、その部分文字列にもマッチします。</target>
        </trans-unit>
        <trans-unit id="b38985b08a6ce87a4282ed323af9b21e221d7528" translate="yes" xml:space="preserve">
          <source>The parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited.</source>
          <target state="translated">括弧で括られた部分文字列がマッチする場合は、その括弧で括られた部分文字列がマッチします。括弧で括られた部分文字列の数に制限はありません。</target>
        </trans-unit>
        <trans-unit id="7fb79f7ce04432fed772112fc53c90019bf87a4e" translate="yes" xml:space="preserve">
          <source>The partial implementation creates bound functions whose &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property does not agree with that mandated by ECMA-262: it creates functions with &lt;code&gt;length&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt;. A full implementation&amp;mdash;depending on the length of the target function and the number of pre-specified arguments&amp;mdash;may return a non-zero length.</source>
          <target state="translated">部分的な実装では、&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティがECMA-262で義務付けられているものと一致しないバインドされた関数が作成されます。 &lt;code&gt;length&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の関数が作成されます。完全な実装は、ターゲット関数の長さと事前に指定された引数の数に応じて、ゼロ以外の長さを返す場合があります。</target>
        </trans-unit>
        <trans-unit id="63045c992f44f05cb5b836d1f1f62a5115521036" translate="yes" xml:space="preserve">
          <source>The partial implementation creates bound functions whose &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.</source>
          <target state="translated">部分実装は、&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティがECMA-262で義務付けられているものと一致しないバインドされた関数を作成します。長さ0の関数を作成しますが、完全な実装は、ターゲット関数の長さと事前指定された引数の数に応じて、ゼロ以外の長さを返します。</target>
        </trans-unit>
        <trans-unit id="de463d520d50677e75915de39c6ece760b3da4d7" translate="yes" xml:space="preserve">
          <source>The partial implementation creates bound functions whose &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is not derived from the original function name. According to ECMA-262, name of the returned bound function should be &quot;bound &quot; + name of target function (note the space character).</source>
          <target state="translated">部分的な実装では、&lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティが元の関数名から派生していないバインドされた関数が作成されます。ECMA-262によると、返されるバインドされた関数の名前は、「バインドされた」+ターゲット関数の名前（スペース文字に注意）である必要があります。</target>
        </trans-unit>
        <trans-unit id="b678326d62e0d4b1b5d26101a15fd5a24c132e8b" translate="yes" xml:space="preserve">
          <source>The partial implementation creates functions that do not have immutable &quot;poison pill&quot; &lt;a href=&quot;caller&quot;&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;arguments&lt;/code&gt; properties that throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; upon get, set, or deletion. (This could be added if the implementation supports &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, or partially implemented [without throw-on-delete behavior] if the implementation supports the &lt;a href=&quot;../object/__definegetter__&quot;&gt;&lt;code&gt;__defineGetter__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../object/__definesetter__&quot;&gt;&lt;code&gt;__defineSetter__&lt;/code&gt;&lt;/a&gt; extensions.)</source>
          <target state="translated">部分的な実装では、不変の「ポイズンピル」&lt;a href=&quot;caller&quot;&gt; &lt;code&gt;caller&lt;/code&gt; &lt;/a&gt;と、取得、設定、または削除時に&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローする &lt;code&gt;arguments&lt;/code&gt; プロパティを持たない関数が作成されます。（これは、実装が&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; を&lt;/a&gt;サポートしている場合に追加できます。または、実装が&lt;a href=&quot;../object/__definegetter__&quot;&gt; &lt;code&gt;__defineGetter__&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../object/__definesetter__&quot;&gt; &lt;code&gt;__defineSetter__&lt;/code&gt; &lt;/a&gt;拡張機能をサポートしている場合は、[削除時のスロー動作なしで]部分的に実装できます。）</target>
        </trans-unit>
        <trans-unit id="dd7cb6d3bc51077269d0d002286cc156def74430" translate="yes" xml:space="preserve">
          <source>The partial implementation creates functions that do not have immutable &quot;poison pill&quot; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;arguments&lt;/code&gt; properties that throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; upon get, set, or deletion. (This could be added if the implementation supports &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, or partially implemented [without throw-on-delete behavior] if the implementation supports the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter&quot;&gt;&lt;code&gt;__defineGetter__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter&quot;&gt;&lt;code&gt;__defineSetter__&lt;/code&gt;&lt;/a&gt; extensions.)</source>
          <target state="translated">部分的な実装は、不変の「ポイズンピル」持っていない関数を作成&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt; &lt;code&gt;caller&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;arguments&lt;/code&gt; 投げるプロパティ&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;取得、セット、または削除時を。（これは、実装が&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; を&lt;/a&gt;サポートしている場合に追加できます。または、実装が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter&quot;&gt; &lt;code&gt;__defineGetter__&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter&quot;&gt; &lt;code&gt;__defineSetter__&lt;/code&gt; &lt;/a&gt;拡張をサポートしている場合は、部分的に[削除時にスロー動作なしで]実装されます。）</target>
        </trans-unit>
        <trans-unit id="cf75782bc788869bc385652ce4b520281786d4f4" translate="yes" xml:space="preserve">
          <source>The partial implementation creates functions that have a &lt;code&gt;prototype&lt;/code&gt; property. (Proper bound functions have none.)</source>
          <target state="translated">部分的な実装は、 &lt;code&gt;prototype&lt;/code&gt; プロパティを持つ関数を作成します。（適切にバインドされた関数には何もありません。）</target>
        </trans-unit>
        <trans-unit id="d4cd0768060ee383d9cad3657a2bbf4fc9930391" translate="yes" xml:space="preserve">
          <source>The partial implementation relies on &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../array/concat&quot;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;, built-in methods to have their original values.</source>
          <target state="translated">部分的な実装は、元の値を保持するために、組み込みメソッドである&lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../array/concat&quot;&gt; &lt;code&gt;Array.prototype.concat()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;に依存しています。</target>
        </trans-unit>
        <trans-unit id="ddcf86d99e1e03f525ad09eb61c1bdf398ebdae4" translate="yes" xml:space="preserve">
          <source>The pattern describing where each split should occur. The &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; can be a simple string or it can be a &lt;a href=&quot;../regexp&quot;&gt;regular expression&lt;/a&gt;.</source>
          <target state="translated">各分割が発生する場所を説明するパターン。 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 単純な文字列であることも、可能&lt;a href=&quot;../regexp&quot;&gt;な正規表現&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a84b6508d245cc64ec41448c4eb28d2c3b77ce38" translate="yes" xml:space="preserve">
          <source>The percent sign string (&quot;%&quot;).</source>
          <target state="translated">パーセント記号文字列 (&quot;%&quot;)。</target>
        </trans-unit>
        <trans-unit id="3b1e9b323d5a174f480d265ea17e005dd9696d22" translate="yes" xml:space="preserve">
          <source>The pipeline operator can improve readability when chaining several functions.</source>
          <target state="translated">パイプライン演算子は、複数の関数を連結する際の可読性を向上させることができます。</target>
        </trans-unit>
        <trans-unit id="690fa9c35f9e446db788f93ccd50e03765cc5ab6" translate="yes" xml:space="preserve">
          <source>The plus sign string (&quot;+&quot;).</source>
          <target state="translated">プラス記号文字列(&quot;+&quot;)。</target>
        </trans-unit>
        <trans-unit id="9335d6fa676fe2a40aeb23ba36ee60d41539ec6e" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to add a &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; to.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; を追加する &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="1febefc0faa15c441ee073a3346b33bfae1c59cf" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to compute the bitwise AND.</source>
          <target state="translated">ビット単位のANDを計算する &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="55397e5160cdea6cb262abf8b11f07fb0f8764cb" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to compute the bitwise OR.</source>
          <target state="translated">ビットごとのORを計算する &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="033d51a09c29480fc1c41025d290b265674bacdb" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to exchange a &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; を交換する &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="314458fa9a0382f6433fc8ad3d19e0be1c9b4277" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to store a &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; in.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; を格納する &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="6822225b1ff37900d28547d15db73dc99cc94b24" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to subtract a &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; from.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; を減算する &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="ef29dcb242c4d4bca8ebec7d15d9a642a36d19e3" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; to wait on.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 内で待機する位置。</target>
        </trans-unit>
        <trans-unit id="4660a15b25977a5de26cd9ebb8239f443109d6c4" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to add a &lt;code&gt;value&lt;/code&gt; to.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; を追加する &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="96d01bdb6e19130138f77c4387a2278063c835b0" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to compute the bitwise AND.</source>
          <target state="translated">ビット単位のANDを計算するための &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="b0524650aadd24d8a057e0ef060c22beb8c95d51" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to compute the bitwise OR.</source>
          <target state="translated">ビットごとのORを計算するための &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="d4e742e0a8ee8ebf6e737e009efd3edb40e5951b" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to compute the bitwise XOR.</source>
          <target state="translated">ビットワイズXORを計算するための &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="477e94204b5068fde7b4dbd31eb1d3b528e67afd" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to exchange a &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; を交換するための &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="57c831e4bbc8b3d6acb703a1828680520d216e29" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to load from.</source>
          <target state="translated">ロード元の &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="9eb7e668e34a0e82e96759682ddeff9cb7853f4a" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to load from&lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">ロード元の &lt;code&gt;typedArray&lt;/code&gt; 内の位置 &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07dda9b8d8370464647ce6e0b587c3847a50af4e" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to store a &lt;code&gt;value&lt;/code&gt; in.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; を格納する &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="b013ff61635bf78d7e3b3bafbb4d86b6e5e322da" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to subtract a &lt;code&gt;value&lt;/code&gt; from.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; を減算する &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="ff7e870bc99011014085c91489ad6c1fb6c31059" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to wait on.</source>
          <target state="translated">待機する &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="995f0ff73614acdbbbf63312b62aacdf3a9e0b44" translate="yes" xml:space="preserve">
          <source>The position in the &lt;code&gt;typedArray&lt;/code&gt; to wake up on.</source>
          <target state="translated">ウェイクアップする &lt;code&gt;typedArray&lt;/code&gt; 内の位置。</target>
        </trans-unit>
        <trans-unit id="88a544020eb55d47bb7e940c2c3f537616d7d683" translate="yes" xml:space="preserve">
          <source>The position in this array at which to begin searching for &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt; の検索を開始するこの配列内の位置。</target>
        </trans-unit>
        <trans-unit id="6403921afb4b40874ce76103550d34ba2c07d906" translate="yes" xml:space="preserve">
          <source>The position in this array at which to begin searching for &lt;code&gt;searchElement&lt;/code&gt;. A negative value searches from the index of &lt;code&gt;array.length -&amp;nbsp;fromIndex&lt;/code&gt; by asc. Defaults to 0.</source>
          <target state="translated">&lt;code&gt;searchElement&lt;/code&gt; 検索を開始するこの配列の位置。負の値は、 &lt;code&gt;array.length -&amp;nbsp;fromIndex&lt;/code&gt; インデックスからasc で検索します。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="e7553803ca05289183d49ad22b8cef6ebb0d3fc8" translate="yes" xml:space="preserve">
          <source>The position in this string at which to begin searching for &lt;code&gt;&lt;var&gt;searchString&lt;/var&gt;&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;searchString&lt;/var&gt;&lt;/code&gt; の検索を開始するこの文字列内の位置。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4ef08508c5d7b9c72be1db76665ed617dcc84e13" translate="yes" xml:space="preserve">
          <source>The position in this string at which to begin searching for &lt;code&gt;searchString&lt;/code&gt;; defaults to 0.</source>
          <target state="translated">この文字列内で &lt;code&gt;searchString&lt;/code&gt; の検索を開始する位置。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="e6b8ef69415540a581e473b22805e246067b1c6c" translate="yes" xml:space="preserve">
          <source>The position within the string at which to begin searching for &lt;code&gt;searchString&lt;/code&gt;. (Defaults to &lt;code&gt;0&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;searchString&lt;/code&gt; の検索を開始する文字列内の位置。（デフォルトは &lt;code&gt;0&lt;/code&gt; です。）</target>
        </trans-unit>
        <trans-unit id="426363a10450adf1a90aceaf29c36ce5df6a292f" translate="yes" xml:space="preserve">
          <source>The position within the string at which to begin searching for &lt;code&gt;searchString&lt;/code&gt;. (defaults to 0).</source>
          <target state="translated">文字列内の &lt;code&gt;searchString&lt;/code&gt; の検索を開始する位置。（デフォルトは0です）。</target>
        </trans-unit>
        <trans-unit id="6ca04baad82996766816c816df6628462f5aeff5" translate="yes" xml:space="preserve">
          <source>The preferred way to get an &lt;code&gt;Instance&lt;/code&gt; is asynchronously, for example using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function like this:</source>
          <target state="translated">&lt;code&gt;Instance&lt;/code&gt; を取得するための推奨される方法は、非同期です。たとえば、次のような&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="157affbbaf96277ae41da5f1304c385c9c28dac7" translate="yes" xml:space="preserve">
          <source>The previous length of the table.</source>
          <target state="translated">テーブルの前の長さ。</target>
        </trans-unit>
        <trans-unit id="8527ce61a473bc18ff2e027d31cc16cdaf53758c" translate="yes" xml:space="preserve">
          <source>The previous size of the memory, in units of WebAssembly pages.</source>
          <target state="translated">前回のメモリのサイズを、WebAssembly ページの単位で指定します。</target>
        </trans-unit>
        <trans-unit id="ed5e99f916bc6b6b7a0cf62aad9e922612e0c7e9" translate="yes" xml:space="preserve">
          <source>The primary API for compiling and instantiating WebAssembly code, returning both a &lt;code&gt;Module&lt;/code&gt; and its first &lt;code&gt;Instance&lt;/code&gt;.</source>
          <target state="translated">WebAssemblyコードをコンパイルしてインスタンス化し、 &lt;code&gt;Module&lt;/code&gt; とその最初の &lt;code&gt;Instance&lt;/code&gt; 両方を返すための主要なAPI 。</target>
        </trans-unit>
        <trans-unit id="45a3de942302f24c62de792544cb89da5128b30a" translate="yes" xml:space="preserve">
          <source>The primary overload takes the WebAssembly binary code, in the form of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, and performs both compilation and instantiation in one step. The returned &lt;code&gt;Promise&lt;/code&gt; resolves to both a compiled &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and its first &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プライマリオーバーロードは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型指定された配列&lt;/a&gt;または&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBufferの&lt;/a&gt;形式でWebAssemblyバイナリコードを取得し、コンパイルとインスタンス化の両方を1つのステップで実行します。返された &lt;code&gt;Promise&lt;/code&gt; は、コンパイルされた&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;とその最初の&lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; の&lt;/a&gt;両方に解決されます。</target>
        </trans-unit>
        <trans-unit id="acc36b826a68dc11884efd2547b884322e4aaebd" translate="yes" xml:space="preserve">
          <source>The primary overload takes the WebAssembly binary code, in the form of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, and performs both compilation and instantiation in one step. The returned &lt;code&gt;Promise&lt;/code&gt; resolves to both a compiled &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and its first &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プライマリオーバーロードは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;または&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;形式でWebAssemblyバイナリコードを受け取り、コンパイルとインスタンス化の両方を1つのステップで実行します。返された &lt;code&gt;Promise&lt;/code&gt; は、コンパイルされた&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;とその最初の&lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; の&lt;/a&gt;両方に解決されます。</target>
        </trans-unit>
        <trans-unit id="43f5aa062dbad7234240cc781877ce058356cf4b" translate="yes" xml:space="preserve">
          <source>The primary uses for the &lt;code&gt;WebAssembly&lt;/code&gt; object are:</source>
          <target state="translated">&lt;code&gt;WebAssembly&lt;/code&gt; オブジェクトの主な用途は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c071e03baa30ba69b94e584c81faf499085c11eb" translate="yes" xml:space="preserve">
          <source>The primary uses of the &lt;code&gt;Number&lt;/code&gt; object are:</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; オブジェクトの主な用途は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b12b405b95a54ff8996417d2b8155eb32e3470ba" translate="yes" xml:space="preserve">
          <source>The primitive value of the given &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="translated">指定された&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトのプリミティブな値</target>
        </trans-unit>
        <trans-unit id="6685f8d8e52bdb92a0a740870373b8493cde617a" translate="yes" xml:space="preserve">
          <source>The primitive value of the given &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object. Depending on the argument, the method can return either a string or a number.</source>
          <target state="translated">指定された&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトのプリミティブな値。引数に応じて、メソッドは文字列または数値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="f976ff961378d26dd626ab2f478b25a918e0b971" translate="yes" xml:space="preserve">
          <source>The primitive value of the specified &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;オブジェクトのプリミティブな値。</target>
        </trans-unit>
        <trans-unit id="0592a04c61263d7e2102a44a37e50daeaba427c0" translate="yes" xml:space="preserve">
          <source>The primitive value of the specified object.</source>
          <target state="translated">指定されたオブジェクトのプリミティブ値。</target>
        </trans-unit>
        <trans-unit id="4c41d9719f79584fa670c194b365f2d482b89dcf" translate="yes" xml:space="preserve">
          <source>The problem might be that an unexpected value is flowing at an unexpected place, or that an object variant of a &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../global_objects/number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; is expected.</source>
          <target state="translated">問題は、予期しない値が予期しない場所に流れているか、&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトバリアントが予期されていることである可能性があります。</target>
        </trans-unit>
        <trans-unit id="ab5c23183c9650bc4b565f250a82d282d73b0d7b" translate="yes" xml:space="preserve">
          <source>The promises of a chain are nested like Russian dolls, but get popped like the top of a stack. The first promise in the chain is most deeply nested and is the first to pop.</source>
          <target state="translated">鎖の約束はロシアの人形のように入れ子になっていますが、スタックの上の方のようにポップになります。鎖の最初の約束は最も深く入れ子にされていて、最初にポップされます。</target>
        </trans-unit>
        <trans-unit id="a4c80fea29c8aeb379b024ca147671669809080c" translate="yes" xml:space="preserve">
          <source>The properties &lt;code&gt;Atomics.OK&lt;/code&gt;, &lt;code&gt;Atomics.TIMEDOUT&lt;/code&gt;, &lt;code&gt;Atomics.NOTEQUAL&lt;/code&gt; have been removed. The &lt;a href=&quot;atomics/wait&quot;&gt;&lt;code&gt;Atomics.wait()&lt;/code&gt;&lt;/a&gt; method now returns the strings &quot;ok&quot;, &quot;timed-out&quot; and &quot;not-equal&quot; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1260835&quot;&gt;bug 1260835&lt;/a&gt;).</source>
          <target state="translated">プロパティ &lt;code&gt;Atomics.OK&lt;/code&gt; 、 &lt;code&gt;Atomics.TIMEDOUT&lt;/code&gt; 、 &lt;code&gt;Atomics.NOTEQUAL&lt;/code&gt; は削除されました。&lt;a href=&quot;atomics/wait&quot;&gt; &lt;code&gt;Atomics.wait()&lt;/code&gt; &lt;/a&gt;メソッドは現在、「OK」の文字列を返します（「-タイムアウトし」と「等しくない」&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1260835&quot;&gt;バグ1260835&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b4a4aa554ed7ee5e4e9ae23da9c48082b284e124" translate="yes" xml:space="preserve">
          <source>The properties and elements returned from this match are as follows:</source>
          <target state="translated">この一致から返されるプロパティと要素は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0f382554c6e88b3c4b24cf6f423547c5aaf1a8d6" translate="yes" xml:space="preserve">
          <source>The properties are overwritten by other objects that have the same properties later in the parameters order.</source>
          <target state="translated">プロパティは、パラメータの順序で後から同じプロパティを持つ他のオブジェクトによって上書きされます。</target>
        </trans-unit>
        <trans-unit id="1459c05fc24e562823b13249afeb3dbdfeb35fe2" translate="yes" xml:space="preserve">
          <source>The property access was operated on &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">プロパティアクセスは、&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;値で操作されました。</target>
        </trans-unit>
        <trans-unit id="7b47c0743d41c5177eb463aca055f534891aabfc" translate="yes" xml:space="preserve">
          <source>The property created on the global object for global variables, is set to be non-configurable because the identifier is to be treated as a variable, rather than a straightforward property of the global object. JavaScript has automatic memory management, and it would make no sense to be able to use the &lt;code&gt;delete&lt;/code&gt; operator on a global variable.</source>
          <target state="translated">グローバル変数のグローバルオブジェクトに作成されたプロパティは、識別子がグローバルオブジェクトの単純なプロパティではなく変数として扱われるため、構成不可能に設定されます。JavaScriptには自動メモリ管理があり、グローバル変数で &lt;code&gt;delete&lt;/code&gt; 演算子を使用できるのは意味がありません。</target>
        </trans-unit>
        <trans-unit id="ce3c28a7c5a180051ef4c56cb921e6fba3489630" translate="yes" xml:space="preserve">
          <source>The property to delete.</source>
          <target state="translated">削除するプロパティです。</target>
        </trans-unit>
        <trans-unit id="33a8b1d5374037f282ae6e0d114d0dab15dceac1" translate="yes" xml:space="preserve">
          <source>The prototype chain is looked up when the object is deconstructed</source>
          <target state="translated">オブジェクトの分解時にプロトタイプチェーンを調べる</target>
        </trans-unit>
        <trans-unit id="fcd81e9c0d95f3f4bc8a7a0de02d34b4f9527196" translate="yes" xml:space="preserve">
          <source>The prototype chain remains untouched. However, the &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt; property is sealed as well.</source>
          <target state="translated">プロトタイプチェーンはそのままです。ただし、&lt;a href=&quot;proto&quot;&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;/a&gt; プロパティもシールされています。</target>
        </trans-unit>
        <trans-unit id="cb058d709a21f233014cf422de3c2c3adb08f766" translate="yes" xml:space="preserve">
          <source>The prototype of the given object. If there are no inherited properties, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定されたオブジェクトのプロトタイプ。継承されたプロパティがない場合、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="86ca918f254ada7bddf176b0d1b0147cabc47321" translate="yes" xml:space="preserve">
          <source>The proxy's handler object is a placeholder object which contains traps for &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt;.</source>
          <target state="translated">プロキシのハンドラオブジェクトが含まれているため、トラッププレースホルダオブジェクトである&lt;a href=&quot;../proxy&quot;&gt;プロキシを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7735fa1a6f06379c02f3817d1e632777161fe756" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; functions is to simplify the behavior of using promises synchronously and to perform some behavior on a group of &lt;code&gt;Promises&lt;/code&gt;. Just as &lt;code&gt;Promises&lt;/code&gt; are similar to structured callbacks, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; is similar to combining generators and promises.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 関数の目的は、Promiseを同期的に使用する動作を単純化し、 &lt;code&gt;Promises&lt;/code&gt; グループに対していくつかの動作を実行することです。同じように &lt;code&gt;Promises&lt;/code&gt; 構造化コールバックに似ている、 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 発電機との約束を組み合わせることに似ています。</target>
        </trans-unit>
        <trans-unit id="f08dd48bdc370a62130eb28c2133fa17b9a9bc6a" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; is to simplify the syntax necessary to consume promise-based APIs. The behavior of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; is similar to combining &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;generators&lt;/a&gt; and promises.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; の目的は、promiseベースのAPIを使用するために必要な構文を単純化することです。 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; の動作は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;ジェネレーター&lt;/a&gt;とpromiseの組み合わせに似ています。</target>
        </trans-unit>
        <trans-unit id="d9f0f958d22886b36350f3a67640c310f801d8ad" translate="yes" xml:space="preserve">
          <source>The radix is coerced to a &lt;code&gt;Number&lt;/code&gt;:</source>
          <target state="translated">基数は &lt;code&gt;Number&lt;/code&gt; 強制されます：</target>
        </trans-unit>
        <trans-unit id="24810b61cf35bc6e25d4d331237efdb51d694a76" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;every&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. Therefore, &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will not run on elements that are appended to the array after the call to &lt;code&gt;every&lt;/code&gt; begins. If existing elements of the array are changed, their value as passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;every&lt;/code&gt; visits them. Elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; の最初の呼び出しの前に設定されます。したがって、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; は、 &lt;code&gt;every&lt;/code&gt; の呼び出しが開始された後に配列に追加された要素に対しては実行されません。配列の既存の要素が変更された場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 渡されるそれらの値は、それらにアクセスする &lt;code&gt;every&lt;/code&gt; 値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="6da674bc4b1b8a7ab6adf4f36282bdc1e7f32c53" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;every&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;every&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If existing elements of the array are changed, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;every&lt;/code&gt; visits them; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;callback&lt;/code&gt; が最初に呼び出される前に設定されます。 &lt;code&gt;every&lt;/code&gt; 開始の呼び出し後に配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。配列の既存の要素が変更された場合、 &lt;code&gt;callback&lt;/code&gt; 渡されるそれらの値は、それらを訪問する &lt;code&gt;every&lt;/code&gt; 値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="e715f1cc8e7a27fa8fca7e6a797ae6ff6511326d" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;filter()&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. Elements which are appended to the array (from &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;) after the call to &lt;code&gt;filter()&lt;/code&gt; begins will not be visited by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If existing elements of the array are deleted in the same way they will not be visited.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;filter()&lt;/code&gt; の呼び出しが開始された後に（ &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; から）配列に追加される要素は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によってアクセスされません。配列の既存の要素が同じ方法で削除された場合、それらはアクセスされません。</target>
        </trans-unit>
        <trans-unit id="ffc43fe022a56b04aa00aeb62eefc26a7fbdec25" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;filter()&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;filter()&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If existing elements of the array are changed, or deleted, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;filter()&lt;/code&gt; visits them; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; によって処理される要素の範囲は、最初の &lt;code&gt;callback&lt;/code&gt; の呼び出しの前に設定されます。 &lt;code&gt;filter()&lt;/code&gt; の呼び出しの開始後に配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。配列の既存の要素が変更または削除された場合、 &lt;code&gt;callback&lt;/code&gt; 渡されるそれらの値は、 &lt;code&gt;filter()&lt;/code&gt; がそれらを訪問したときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="437ffa22e14610025c7fe48f3c107072231bf100" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;filter()&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements which are appended to the typed array after the call to &lt;code&gt;filter()&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If existing elements of the typed array are changed, or deleted, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;filter()&lt;/code&gt; visits them; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; によって処理される要素の範囲は、最初の &lt;code&gt;callback&lt;/code&gt; の呼び出しの前に設定されます。 &lt;code&gt;filter()&lt;/code&gt; の呼び出しの開始後に型付き配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。型指定された配列の既存の要素が変更または削除された場合、 &lt;code&gt;callback&lt;/code&gt; 渡されるそれらの値は、 &lt;code&gt;filter()&lt;/code&gt; がそれらを訪問したときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="fbef2e2b7aaf6872600edc7c6e1e55c2d7451812" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;find&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements that are appended to the array after the call to &lt;code&gt;find&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If an existing, unvisited element of the array is changed by &lt;code&gt;callback&lt;/code&gt;, its value passed to the visiting &lt;code&gt;callback&lt;/code&gt; will be the value at the time that &lt;code&gt;find&lt;/code&gt; visits that element's index; elements that are deleted are still visited.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; によって処理される要素の範囲は、最初の &lt;code&gt;callback&lt;/code&gt; の呼び出しの前に設定されます。 &lt;code&gt;find&lt;/code&gt; の呼び出しが開始された後に配列に追加された要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。配列の既存の未訪問の要素が &lt;code&gt;callback&lt;/code&gt; によって変更された場合、visiting &lt;code&gt;callback&lt;/code&gt; 渡されるその値は、 &lt;code&gt;find&lt;/code&gt; がその要素のインデックスを訪問したときの値になります。削除された要素は引き続きアクセスされます。</target>
        </trans-unit>
        <trans-unit id="f2b14ba27e1a10104c3d2a3d842c5ee832c8acab" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;find&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements that are appended to the typed array after the call to &lt;code&gt;find&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If an existing, unvisited element of the typed array is changed by &lt;code&gt;callback&lt;/code&gt;, its value passed to the visiting &lt;code&gt;callback&lt;/code&gt; will be the value at the time that &lt;code&gt;find&lt;/code&gt; visits that element's index; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; によって処理される要素の範囲は、最初の &lt;code&gt;callback&lt;/code&gt; の呼び出しの前に設定されます。 &lt;code&gt;find&lt;/code&gt; の呼び出しの開始後に型付き配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。型指定された配列の既存の未訪問の要素が &lt;code&gt;callback&lt;/code&gt; によって変更された場合、visiting &lt;code&gt;callback&lt;/code&gt; 渡されるその値は、 &lt;code&gt;find&lt;/code&gt; がその要素のインデックスを訪問したときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="9c5b5fa6d1a05075a9ea097cb07399a26b15c0da" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;findIndex()&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will not process the elements appended to the array after the call to &lt;code&gt;findIndex()&lt;/code&gt; begins. If an existing, unvisited element of the array is changed by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, its value passed to the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;findIndex()&lt;/code&gt; visits the element's index.</source>
          <target state="translated">&lt;code&gt;findIndex()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 最初の呼び出しの前に設定されます。 &lt;code&gt;findIndex()&lt;/code&gt; の呼び出しが開始された後、コール &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; は配列に追加された要素を処理しません。配列の既存の未訪問の要素が &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によって変更された場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 渡されるその値は、 &lt;code&gt;findIndex()&lt;/code&gt; が要素のインデックスにアクセスしたときの値になります。</target>
        </trans-unit>
        <trans-unit id="c74827d61ac18463827bf5d41784e84ff1c29c61" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;findIndex&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements appended to the array after the call to &lt;code&gt;findIndex&lt;/code&gt; begins will not be processed by &lt;code&gt;callback&lt;/code&gt;. If an existing, unvisited element of the array is changed by &lt;code&gt;callback&lt;/code&gt;, its value passed to the &lt;code&gt;callback&lt;/code&gt; will be the value at the time that &lt;code&gt;findIndex&lt;/code&gt; visits that element's index; elements that are &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt; are still visited.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; によって処理される要素の範囲は、最初の &lt;code&gt;callback&lt;/code&gt; の呼び出しの前に設定されます。 &lt;code&gt;findIndex&lt;/code&gt; の呼び出しの開始後に配列に追加された要素は、 &lt;code&gt;callback&lt;/code&gt; によって処理されません。配列の既存の未訪問の要素が &lt;code&gt;callback&lt;/code&gt; によって変更された場合、 &lt;code&gt;callback&lt;/code&gt; 渡されるその値は、 &lt;code&gt;findIndex&lt;/code&gt; がその要素のインデックスにアクセスしたときの値になります。&lt;a href=&quot;../../operators/delete&quot;&gt;削除された&lt;/a&gt;要素は引き続きアクセスされます。</target>
        </trans-unit>
        <trans-unit id="ae3d4b2bb84a02d78f95eaf8d4998a1484900e2f" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;findIndex&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements that are appended to the typed array after the call to &lt;code&gt;findIndex&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If an existing, unvisited element of the typed array is changed by &lt;code&gt;callback&lt;/code&gt;, its value passed to the visiting &lt;code&gt;callback&lt;/code&gt; will be the value at the time that &lt;code&gt;findIndex&lt;/code&gt; visits that element's index; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; によって処理される要素の範囲は、最初の &lt;code&gt;callback&lt;/code&gt; の呼び出しの前に設定されます。 &lt;code&gt;findIndex&lt;/code&gt; の呼び出しの開始後に型付き配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。型指定された配列の既存の未訪問の要素が &lt;code&gt;callback&lt;/code&gt; によって変更された場合、visiting &lt;code&gt;callback&lt;/code&gt; 渡されるその値は、 &lt;code&gt;findIndex&lt;/code&gt; がその要素のインデックスを訪問したときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="49895da5e911ffebe6af9be50fa2605c3a725b73" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;forEach()&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;forEach()&lt;/code&gt; begins will not be visited by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If existing elements of the array are changed or deleted, their value as passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;forEach()&lt;/code&gt; visits them; elements that are deleted before being visited are not visited. If elements that are already visited are removed (e.g. using &lt;a href=&quot;shift&quot;&gt;&lt;code&gt;shift()&lt;/code&gt;&lt;/a&gt;) during the iteration, later elements will be skipped. (&lt;a href=&quot;foreach#Modifying_the_array_during_iteration&quot;&gt;See this example, below&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 最初の呼び出しの前に設定されます。 &lt;code&gt;forEach()&lt;/code&gt; の呼び出しが開始された後に配列に追加される要素は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によってアクセスされません。配列の既存の要素が変更または削除された場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 渡されるそれらの値は、 &lt;code&gt;forEach()&lt;/code&gt; がそれらにアクセスしたときの値になります。訪問される前に削除された要素は訪問されません。反復中にすでにアクセスされた要素が削除された場合（たとえば、&lt;a href=&quot;shift&quot;&gt; &lt;code&gt;shift()&lt;/code&gt; &lt;/a&gt;を使用）、それ以降の要素はスキップされます。 （&lt;a href=&quot;foreach#Modifying_the_array_during_iteration&quot;&gt;以下のこの例を参照してください&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="4e67b5a5c412531a2f1bcee0d4174f89cbaee2f1" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;forEach()&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements that are appended to the array after the call to &lt;code&gt;forEach()&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If the values of existing elements of the array are changed, the value passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;forEach()&lt;/code&gt; visits them; elements that are deleted before being visited are not visited. If elements that are already visited are removed (e.g. using &lt;a href=&quot;shift&quot;&gt;&lt;code&gt;shift()&lt;/code&gt;&lt;/a&gt;) during the iteration, later elements will be skipped - see example below.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;forEach()&lt;/code&gt; の呼び出しの開始後に配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。配列の既存の要素の値が変更された場合、 &lt;code&gt;callback&lt;/code&gt; 渡される値は、 &lt;code&gt;forEach()&lt;/code&gt; がそれらを訪問したときの値になります。訪問される前に削除された要素は訪問されません。既にアクセスされている要素が（たとえば&lt;a href=&quot;shift&quot;&gt; &lt;code&gt;shift()&lt;/code&gt; &lt;/a&gt;を使用して）反復中に削除された場合、以降の要素はスキップされます-以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="0c06a5847c75fadb80372b691d5e2713631aadce" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;forEach()&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements that are appended to the typed array after the call to &lt;code&gt;forEach()&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If the values of existing elements of the typed array are changed, the value passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;forEach()&lt;/code&gt; visits them; elements that are deleted before being visited are not visited.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;forEach()&lt;/code&gt; の呼び出しの開始後に型付き配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。型付き配列の既存の要素の値が変更された場合、 &lt;code&gt;callback&lt;/code&gt; 渡される値は、 &lt;code&gt;forEach()&lt;/code&gt; がそれらを訪問したときの値になります。訪問される前に削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="8b98cdcddf3f8d17e5d789aea3af0c16449a3c29" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;map()&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;map()&lt;/code&gt; begins will not be visited by &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt;. If existing elements of the typed array are changed, or deleted, their value as passed to &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;map()&lt;/code&gt; visits them; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;map()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;map()&lt;/code&gt; の呼び出しの開始後に配列に追加される要素は、 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; によってアクセスされません。型付き配列の既存の要素が変更または削除された場合、 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; に渡される値は、 &lt;code&gt;map()&lt;/code&gt; がそれらにアクセスしたときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="5df1d9751f2fa078148d85a295c3f44432c02f13" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;map&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;map&lt;/code&gt; begins will not be visited by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If existing elements of the array are changed after the call to &lt;code&gt;map&lt;/code&gt;, their value will be the value at the time &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; visits them. Elements that are deleted after the call to &lt;code&gt;map&lt;/code&gt; begins and before being visited are not visited.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;map&lt;/code&gt; の呼び出しの開始後に配列に追加される要素は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によってアクセスされません。 &lt;code&gt;map&lt;/code&gt; の呼び出し後に配列の既存の要素が変更された場合、それらの値は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; がそれらにアクセスしたときの値になります。 &lt;code&gt;map&lt;/code&gt; の呼び出しが開始された後、訪問される前に削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="9e871371187bb129c37ca4223958103d8460a4eb" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;map&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;map&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If existing elements of the array are changed, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;map&lt;/code&gt; visits them. Elements that are deleted after the call to &lt;code&gt;map&lt;/code&gt; begins and before being visited are not visited.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;map&lt;/code&gt; の呼び出しが始まった後に配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。配列の既存の要素が変更された場合、 &lt;code&gt;callback&lt;/code&gt; 渡される値は、 &lt;code&gt;map&lt;/code&gt; がそれらを訪問したときの値になります。 &lt;code&gt;map&lt;/code&gt; の呼び出しが開始された後、訪問される前に削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="1ec15fb00691cba60bb1f8c04e40ee318d87d688" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;map&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements which are appended to the array after the call to &lt;code&gt;map&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If existing elements of the typed array are changed, or deleted, their value as passed to &lt;code&gt;callback&lt;/code&gt; will be the value at the time &lt;code&gt;map&lt;/code&gt; visits them; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;map&lt;/code&gt; の呼び出しが始まった後に配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。型付き配列の既存の要素が変更または削除された場合、 &lt;code&gt;callback&lt;/code&gt; 渡されるそれらの値は、 &lt;code&gt;map&lt;/code&gt; がそれらを訪問したときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="a1d9561ef0be1264fad091a1f4ccd37e81b95153" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;some()&lt;/code&gt; is set before the first invocation of &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. Elements appended to the array after the call to &lt;code&gt;some()&lt;/code&gt; begins will not be visited by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If an existing, unvisited element of the array is changed by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, its value passed to the visiting &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time that &lt;code&gt;some()&lt;/code&gt; visits that element's index. Elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 最初の呼び出しの前に設定されます。 &lt;code&gt;some()&lt;/code&gt; の呼び出しが開始された後に配列に追加された要素は、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によってアクセスされません。配列の既存の未訪問要素が &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によって変更された場合、訪問 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 渡されるその値は、 &lt;code&gt;some()&lt;/code&gt; がその要素のインデックスにアクセスしたときの値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="c17bb9c9e91a0f17fe42b0e4098979b25612b39c" translate="yes" xml:space="preserve">
          <source>The range of elements processed by &lt;code&gt;some()&lt;/code&gt; is set before the first invocation of &lt;code&gt;callback&lt;/code&gt;. Elements that are appended to the array after the call to &lt;code&gt;some()&lt;/code&gt; begins will not be visited by &lt;code&gt;callback&lt;/code&gt;. If an existing, unvisited element of the array is changed by &lt;code&gt;callback&lt;/code&gt;, its value passed to the visiting &lt;code&gt;callback&lt;/code&gt; will be the value at the time that &lt;code&gt;some()&lt;/code&gt; visits that element's index; elements that are deleted are not visited.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; によって処理される要素の範囲は、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの前に設定されます。 &lt;code&gt;some()&lt;/code&gt; の呼び出しの開始後に配列に追加される要素は、 &lt;code&gt;callback&lt;/code&gt; によってアクセスされません。配列の既存の未訪問の要素が &lt;code&gt;callback&lt;/code&gt; によって変更された場合、訪問 &lt;code&gt;callback&lt;/code&gt; 渡されるその値は、 &lt;code&gt;some()&lt;/code&gt; がその要素のインデックスを訪問した時点の値になります。削除された要素は訪問されません。</target>
        </trans-unit>
        <trans-unit id="65371679ab7fdc5f5b8139c6dc4a8371ee6bcd84" translate="yes" xml:space="preserve">
          <source>The range specified by &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; is negative, it refers to an index from the end of the array instead of from the beginning.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; で指定された範囲は、現在の配列の有効なインデックス範囲に固定されます。新しい配列の計算された長さが負になる場合は、ゼロに固定されます。 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;end&lt;/code&gt; のいずれかが負の場合、最初からではなく、配列の最後からのインデックスを参照します。</target>
        </trans-unit>
        <trans-unit id="24b85dd06a6213cf1081464b71f955da06c850ba" translate="yes" xml:space="preserve">
          <source>The range specified by the &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; parameters is clamped to the valid index range for the current array. If the computed length of the new &lt;code&gt;ArrayBuffer&lt;/code&gt; would be negative, it is clamped to zero.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; パラメーターと &lt;code&gt;end&lt;/code&gt; パラメーターで指定された範囲は、現在の配列の有効なインデックス範囲にクランプされます。新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; の計算された長さが負の場合、ゼロにクランプされます。</target>
        </trans-unit>
        <trans-unit id="3b605edb84e51349013fff8a34d0333b8de9dbb3" translate="yes" xml:space="preserve">
          <source>The raw string form of a given template string.</source>
          <target state="translated">与えられたテンプレート文字列の生の文字列形式。</target>
        </trans-unit>
        <trans-unit id="4872ed5b22d0ae3b1f434987b2a71a41aa1f3ac0" translate="yes" xml:space="preserve">
          <source>The read-only &lt;code&gt;&lt;strong&gt;description&lt;/strong&gt;&lt;/code&gt; property is a string returning the optional description of &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">読み取り専用の &lt;code&gt;&lt;strong&gt;description&lt;/strong&gt;&lt;/code&gt; プロパティは、&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;オブジェクトのオプションの説明を返す文字列です。</target>
        </trans-unit>
        <trans-unit id="08a9d11278fec588286a47b1be22a5bfa5f38d06" translate="yes" xml:space="preserve">
          <source>The read-only size, in bytes, of the &lt;code&gt;ArrayBuffer&lt;/code&gt;. This is established when the array is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; の読み取り専用サイズ（バイト単位）。これは、アレイの構築時に確立され、変更できません。</target>
        </trans-unit>
        <trans-unit id="3710da7a8a554d86df2cbb98d6622499fd2ac722" translate="yes" xml:space="preserve">
          <source>The region is an essential part of the locale identifier, as it places the locale in a specific area of the world. Knowing the locale's region is vital to identifying differences between locales. For example, English is spoken in the United Kingdom and the United States of America, but there are differences in spelling and other language conventions between those two countries. Knowing the locale's region helps JavaScript programmers make sure that the content from their sites and applications is correctly displayed when viewed from different areas of the world.</source>
          <target state="translated">地域は、ロケールを世界の特定の地域に位置づけるため、ロケール識別子の重要な要素となります。ロケールの地域を知ることは、ロケール間の違いを識別する上で非常に重要です。たとえば、イギリスとアメリカ合衆国では英語が使われていますが、 両国間ではスペルやその他の言語の慣習に違いがあります。ロケールの地域を知ることは、JavaScript プログラマがサイトやアプリケーションのコンテンツを世界の異なる地域から見たときに正しく表示されるようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="baf36a6bceb47eb4f4cdf7f5604544d9b47c4f49" translate="yes" xml:space="preserve">
          <source>The region is the third part of a valid Unicode language identifier string, and can be set by adding it to the locale identifier string that is passed into the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor. The region is a mandatory part of a</source>
          <target state="translated">リージョンは、有効なUnicode言語識別子文字列の3番目の部分であり、&lt;a href=&quot;locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt;コンストラクタに渡されるロケール識別子文字列に追加することで設定できます。地域はの必須部分です</target>
        </trans-unit>
        <trans-unit id="d10719038db2b3d9352264dc324a0bbea6db5152" translate="yes" xml:space="preserve">
          <source>The registry does not keep a strong reference to the object, as that would defeat the purpose (if the registry held it strongly, the object would never be reclaimed).</source>
          <target state="translated">レジストリが強く参照を保持することは、目的に反してしまうので(レジストリが強く保持していれば、そのオブジェクトは決して再生されない)、レジストリが強く参照を保持しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="74d830bee0702ccb941693f924f1d7feabc1cfe3" translate="yes" xml:space="preserve">
          <source>The regular expression &lt;code&gt;test&lt;/code&gt; checks for any number that ends with &lt;code&gt;F&lt;/code&gt;. The number of Fahrenheit degree is accessible to the function through its second parameter, &lt;code&gt;p1&lt;/code&gt;. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the &lt;code&gt;f2c()&lt;/code&gt; function. &lt;code&gt;f2c()&lt;/code&gt; then returns the Celsius number. This function approximates Perl's &lt;code&gt;s///e&lt;/code&gt; flag.</source>
          <target state="translated">正規表現 &lt;code&gt;test&lt;/code&gt; では、 &lt;code&gt;F&lt;/code&gt; で終わる数値をチェックします。華氏の次数は、2番目のパラメーター &lt;code&gt;p1&lt;/code&gt; を介して関数にアクセスできます。この関数は、文字列で &lt;code&gt;f2c()&lt;/code&gt; 関数に渡される華氏度に基づいて摂氏数を設定します。次に、 &lt;code&gt;f2c()&lt;/code&gt; は摂氏数を返します。この関数は、Perlの &lt;code&gt;s///e&lt;/code&gt; フラグを近似します。</target>
        </trans-unit>
        <trans-unit id="680739a0f2675354de9952a77ed275cf53cff009" translate="yes" xml:space="preserve">
          <source>The regular expression &lt;code&gt;test&lt;/code&gt; checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, &lt;code&gt;p1&lt;/code&gt;. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the &lt;code&gt;f2c()&lt;/code&gt; function. &lt;code&gt;f2c()&lt;/code&gt; then returns the Celsius number. This function approximates Perl's &lt;code&gt;s///e&lt;/code&gt; flag.</source>
          <target state="translated">正規表現 &lt;code&gt;test&lt;/code&gt; は、Fで終わる数値をチェックします。華氏度の数は、2番目のパラメーター &lt;code&gt;p1&lt;/code&gt; を介して関数にアクセスできます。関数は、文字列で &lt;code&gt;f2c()&lt;/code&gt; 関数に渡される華氏度に基づいて摂氏数を設定します。次に、 &lt;code&gt;f2c()&lt;/code&gt; は摂氏数を返します。この関数は、Perlの &lt;code&gt;s///e&lt;/code&gt; フラグを近似します。</target>
        </trans-unit>
        <trans-unit id="6903197bb29b1a4407584ec864683e3ceab56a02" translate="yes" xml:space="preserve">
          <source>The regular expression includes the &lt;code&gt;i&lt;/code&gt; flag so that upper/lower case differences will be ignored.</source>
          <target state="translated">正規表現には &lt;code&gt;i&lt;/code&gt; フラグが含まれているため、大文字と小文字の違いは無視されます。</target>
        </trans-unit>
        <trans-unit id="881be0a98334b09334fc00ba7f6f756fca437c4c" translate="yes" xml:space="preserve">
          <source>The rejection reason.</source>
          <target state="translated">拒絶理由。</target>
        </trans-unit>
        <trans-unit id="36dca44eaa63baddd5450c4657bb79d02922c504" translate="yes" xml:space="preserve">
          <source>The remainder assignment operator (&lt;code&gt;%=&lt;/code&gt;) divides a variable by the value of the right operand and assigns the remainder to the variable.</source>
          <target state="translated">剰余代入演算子（ &lt;code&gt;%=&lt;/code&gt; ）は、変数を右のオペランドの値で除算し、剰余を変数に代入します。</target>
        </trans-unit>
        <trans-unit id="e46ec006c0b64ae3b2fb150411d2dcd7a25635ce" translate="yes" xml:space="preserve">
          <source>The remainder assignment operator &lt;strong&gt;divides&lt;/strong&gt; a variable by the value of the right operand and assigns the &lt;strong&gt;remainder&lt;/strong&gt; to the variable. See the &lt;a href=&quot;arithmetic_operators#Remainder&quot;&gt;remainder operator&lt;/a&gt; for more details.</source>
          <target state="translated">剰余代入演算子&lt;strong&gt;は&lt;/strong&gt;、変数を右のオペランドの値で&lt;strong&gt;除算&lt;/strong&gt;し、&lt;strong&gt;剰余&lt;/strong&gt;を変数に割り当てます。詳細については、&lt;a href=&quot;arithmetic_operators#Remainder&quot;&gt;剰余演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d8ecc086c70c3830b4747649818a0ac68ba2c00d" translate="yes" xml:space="preserve">
          <source>The remainder operator (&lt;code&gt;%&lt;/code&gt;) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.</source>
          <target state="translated">剰余演算子（ &lt;code&gt;%&lt;/code&gt; ）は、1つのオペランドを2番目のオペランドで割ったときに残った剰余を返します。それは常に配当のサインを取ります。</target>
        </trans-unit>
        <trans-unit id="5187d3d5a221cd935660308eb842429ac63cd335" translate="yes" xml:space="preserve">
          <source>The remainder operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.</source>
          <target state="translated">remainder演算子は、1つのオペランドを2つ目のオペランドで割ったときに残った残りを返します。これは常に配当の符号を取ります。</target>
        </trans-unit>
        <trans-unit id="07881a9c3a65a4aa5a5412756c2741ecf8904b70" translate="yes" xml:space="preserve">
          <source>The removed element from the array; &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if the array is empty.</source>
          <target state="translated">配列から削除された要素。配列が空の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4f5d406eb2af9d7b2ee22726999b6d3a063f6ac7" translate="yes" xml:space="preserve">
          <source>The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.</source>
          <target state="translated">置換関数は、マッチしたスニペットをパラメータとして受け取り、それを使用して大文字小文字を変換し、ハイフンを連結してから戻ります。</target>
        </trans-unit>
        <trans-unit id="ef6da55d14c626be633ee1c7607ca98d95b8befe" translate="yes" xml:space="preserve">
          <source>The replacement string can include the following special replacement patterns:</source>
          <target state="translated">置換文字列には、以下の特別な置換パターンを含めることができる。</target>
        </trans-unit>
        <trans-unit id="2dbdd21dce098779754830afcdc2304a7f54e54e" translate="yes" xml:space="preserve">
          <source>The replacer parameter</source>
          <target state="translated">置換者パラメータ</target>
        </trans-unit>
        <trans-unit id="56b89c2f925b29cf68119fa74ec1b4651ca20d8a" translate="yes" xml:space="preserve">
          <source>The representation of the day. Possible values are &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt;.</source>
          <target state="translated">日の表現。可能な値は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="72b0adb350c30e5894df02ff3e13ce7af924bc70" translate="yes" xml:space="preserve">
          <source>The representation of the day. Possible values are:</source>
          <target state="translated">その日の様子を表します。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0c8c124223283ec086ca537c93ff68fb8da7b0ae" translate="yes" xml:space="preserve">
          <source>The representation of the era. Possible values are &lt;code&gt;&quot;narrow&quot;&lt;/code&gt;, &lt;code&gt;&quot;short&quot;&lt;/code&gt;, &lt;code&gt;&quot;long&quot;&lt;/code&gt;.</source>
          <target state="translated">時代の代表。可能な値は &lt;code&gt;&quot;narrow&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;short&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;long&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="651d0da3a5081bae009d6d07d1a08625beaf8f39" translate="yes" xml:space="preserve">
          <source>The representation of the era. Possible values are:</source>
          <target state="translated">時代を表現しています。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="159e5b3048236cea87711420060c884c62868905" translate="yes" xml:space="preserve">
          <source>The representation of the hour. Possible values are &quot;&lt;code&gt;numeric&lt;/code&gt;&quot;, &quot;&lt;code&gt;2-digit&lt;/code&gt;&quot;.</source>
          <target state="translated">時間の表現。可能な値は「 &lt;code&gt;numeric&lt;/code&gt; 」、「 &lt;code&gt;2-digit&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="75ec6c1d1661f5c67da276deded4103e969aef10" translate="yes" xml:space="preserve">
          <source>The representation of the hour. Possible values are &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt;.</source>
          <target state="translated">時間の表現。可能な値は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="412d03c1ac249a6bf895fdaf3f1cf330dfef6351" translate="yes" xml:space="preserve">
          <source>The representation of the minute. Possible values are &quot;&lt;code&gt;numeric&lt;/code&gt;&quot;, &quot;&lt;code&gt;2-digit&lt;/code&gt;&quot;.</source>
          <target state="translated">分の表現。可能な値は「 &lt;code&gt;numeric&lt;/code&gt; 」、「 &lt;code&gt;2-digit&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="ca4f23dca9b476105cb4a1a4a06dc2052f9b71ba" translate="yes" xml:space="preserve">
          <source>The representation of the minute. Possible values are &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt;.</source>
          <target state="translated">分の表現。可能な値は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a4c386acd85fd7b31c2014e4750385f23ba4cfab" translate="yes" xml:space="preserve">
          <source>The representation of the month. Possible values are &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt;, &lt;code&gt;&quot;narrow&quot;&lt;/code&gt;, &lt;code&gt;&quot;short&quot;&lt;/code&gt;, &lt;code&gt;&quot;long&quot;&lt;/code&gt;.</source>
          <target state="translated">月の表現。可能な値は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;narrow&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;short&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;long&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="536fb4970a577e6d581db7d4dc2a53cd3ce6aaab" translate="yes" xml:space="preserve">
          <source>The representation of the month. Possible values are:</source>
          <target state="translated">月を表します。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="012c53249e40841f68173f4ff0bde794314a64ad" translate="yes" xml:space="preserve">
          <source>The representation of the second. Possible values are &quot;&lt;code&gt;numeric&lt;/code&gt;&quot;, &quot;&lt;code&gt;2-digit&lt;/code&gt;&quot;.</source>
          <target state="translated">2番目の表現。可能な値は「 &lt;code&gt;numeric&lt;/code&gt; 」、「 &lt;code&gt;2-digit&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="92c426ab4a82986c4ede5fbd7b75a68464cf99fa" translate="yes" xml:space="preserve">
          <source>The representation of the second. Possible values are &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt;.</source>
          <target state="translated">秒の表現。可能な値は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="98df1e349a808f0fc95c331db5dda3f987fa1cbf" translate="yes" xml:space="preserve">
          <source>The representation of the time zone name. Possible values are &lt;code&gt;&quot;short&quot;&lt;/code&gt;, &lt;code&gt;&quot;long&quot;&lt;/code&gt;.</source>
          <target state="translated">タイムゾーン名の表現。可能な値は &lt;code&gt;&quot;short&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;long&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7127b1b477d71796945982698b39155da9e296c9" translate="yes" xml:space="preserve">
          <source>The representation of the time zone name. Possible values are:</source>
          <target state="translated">タイムゾーン名の表現。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a8ef3ad3a60a860da71831ec397a6a689eca3574" translate="yes" xml:space="preserve">
          <source>The representation of the weekday. Possible values are &lt;code&gt;&quot;narrow&quot;&lt;/code&gt;, &lt;code&gt;&quot;short&quot;&lt;/code&gt;, &lt;code&gt;&quot;long&quot;&lt;/code&gt;.</source>
          <target state="translated">平日の表現。可能な値は &lt;code&gt;&quot;narrow&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;short&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;long&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a80ab7be7b870c0332c33c39137ae41be45736fd" translate="yes" xml:space="preserve">
          <source>The representation of the weekday. Possible values are:</source>
          <target state="translated">曜日を表します。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9ad60c9eeb0a198829bffe136b86a4fd0c190858" translate="yes" xml:space="preserve">
          <source>The representation of the year. Possible values are &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt;.</source>
          <target state="translated">年の表現。可能な値は、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2-digit&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="543fb8b1db7e1ef8afff1f52e42e78326f098170" translate="yes" xml:space="preserve">
          <source>The representation of the year. Possible values are:</source>
          <target state="translated">年を表します。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e7bcb26fe58915d354871d726097f83d6b12e3a8" translate="yes" xml:space="preserve">
          <source>The rest parameter syntax allows representing an indefinite number of arguments as an array. For more details, see &lt;a href=&quot;functions/rest_parameters&quot;&gt;rest parameters&lt;/a&gt;.</source>
          <target state="translated">残りのパラメーター構文では、不特定数の引数を配列として表すことができます。詳細については、&lt;a href=&quot;functions/rest_parameters&quot;&gt;残りのパラメータを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e4ce073e32597bad3bae9968f9560c99c4b0fa2d" translate="yes" xml:space="preserve">
          <source>The result List must contain the keys of all non-configurable own properties of the target object.</source>
          <target state="translated">結果のリストには、ターゲット・オブジェクトの設定不可能な自身のプロパティのすべてのキーが含まれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="09500cf8f96c09694df346e1e07ff088ca5e9c86" translate="yes" xml:space="preserve">
          <source>The result must be an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">結果は &lt;code&gt;Object&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a11ce5cdfabe14e957936b86314c4381d25a99dd" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;Object.getOwnPropertyDescriptor(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt; can be applied to the target object using &lt;code&gt;Object.defineProperty()&lt;/code&gt; and will not throw an exception.</source>
          <target state="translated">結果 &lt;code&gt;Object.getOwnPropertyDescriptor(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt; 使用して対象物に適用することができる &lt;code&gt;Object.defineProperty()&lt;/code&gt; と例外をスローしないであろう。</target>
        </trans-unit>
        <trans-unit id="cb3934e6405e7497942f7716dd9aeb27d642f83f" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;Object.getOwnPropertyDescriptor(target)&lt;/code&gt; can be applied to the target object using &lt;code&gt;Object.defineProperty&lt;/code&gt; and will not throw an exception.</source>
          <target state="translated">結果 &lt;code&gt;Object.getOwnPropertyDescriptor(target)&lt;/code&gt; 使用して対象物に適用することができる &lt;code&gt;Object.defineProperty&lt;/code&gt; を、例外をスローしないであろう。</target>
        </trans-unit>
        <trans-unit id="6e8d07e7c4a7944d089c592e3fcd40d5fefe8c93" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;ownKeys()&lt;/code&gt; must be an array.</source>
          <target state="translated">&lt;code&gt;ownKeys()&lt;/code&gt; の結果は配列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="06d8bbf8b466f0cd6c19d723d1164c3c015447e5" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;ownKeys&lt;/code&gt; must be an array.</source>
          <target state="translated">&lt;code&gt;ownKeys&lt;/code&gt; の結果は配列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e6fd2a7a936185f63bd538f8e6eb93d8f9751f0a" translate="yes" xml:space="preserve">
          <source>The result of a match between a &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; and a string can create a JavaScript array. This array has properties and elements which provide information about the match. Such an array is returned by &lt;a href=&quot;regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;string/match&quot;&gt;&lt;code&gt;String.match()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;string/replace&quot;&gt;&lt;code&gt;String.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;と文字列の一致の結果、JavaScript配列が作成される可能性があります。この配列には、一致に関する情報を提供するプロパティと要素があります。このような配列は、&lt;a href=&quot;regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;string/match&quot;&gt; &lt;code&gt;String.match()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;string/replace&quot;&gt; &lt;code&gt;String.replace()&lt;/code&gt; &lt;/a&gt;によって返されます。</target>
        </trans-unit>
        <trans-unit id="ddba75b24cf56532b5f0afeed74ec2ccccd73b81" translate="yes" xml:space="preserve">
          <source>The result of a match between a regular expression and a string can create a JavaScript array. This array has properties and elements which provide information about the match. Such an array is returned by &lt;a href=&quot;regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;string/match&quot;&gt;&lt;code&gt;String.match&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;string/replace&quot;&gt;&lt;code&gt;String.replace&lt;/code&gt;&lt;/a&gt;. To help explain these properties and elements, look at the following example and then refer to the table below:</source>
          <target state="translated">正規表現と文字列の一致結果により、JavaScript配列が作成されます。この配列には、一致に関する情報を提供するプロパティと要素があります。このような配列は、&lt;a href=&quot;regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;string/match&quot;&gt; &lt;code&gt;String.match&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;string/replace&quot;&gt; &lt;code&gt;String.replace&lt;/code&gt; &lt;/a&gt;によって返されます。これらのプロパティと要素を説明するために、次の例を見てから、以下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a28036fb3ccce36ae8009e2252ac01d0aded163" translate="yes" xml:space="preserve">
          <source>The result of calling &lt;code&gt;Object.freeze(&lt;var&gt;object&lt;/var&gt;)&lt;/code&gt; only applies to the immediate properties of &lt;code&gt;object&lt;/code&gt; itself and will prevent future property addition, removal or value re-assignment operations &lt;em&gt;only&lt;/em&gt; on &lt;code&gt;object&lt;/code&gt;. If the value of those properties are objects themselves, those objects are not frozen and may be the target of property addition, removal or value re-assignment operations.</source>
          <target state="translated">呼び出しの結果 &lt;code&gt;Object.freeze(&lt;var&gt;object&lt;/var&gt;)&lt;/code&gt; のみの即時特性に適用 &lt;code&gt;object&lt;/code&gt; 自体と将来性の付加、除去または値の再割り当て操作を防止する&lt;em&gt;だけ&lt;/em&gt;で &lt;code&gt;object&lt;/code&gt; 。それらのプロパティの値がオブジェクト自体である場合、それらのオブジェクトは凍結されておらず、プロパティの追加、削除、または値の再割り当て操作のターゲットになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fefa72860dcf387ee389a07414494c4d18133e49" translate="yes" xml:space="preserve">
          <source>The result of calling the function with the specified &lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; value and arguments.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; 値と引数を指定して関数を呼び出した結果。</target>
        </trans-unit>
        <trans-unit id="cec2bd2d7ee2ac0e099b359eeeb931d4d0fdb844" translate="yes" xml:space="preserve">
          <source>The result of calling the given &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; function with the specified &lt;code&gt;this&lt;/code&gt; value and arguments.</source>
          <target state="translated">指定された &lt;code&gt;this&lt;/code&gt; 値と引数を使用して指定された &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 関数を呼び出した結果。</target>
        </trans-unit>
        <trans-unit id="99bb18a6e80b92359c8e4e034c6f164b137453c7" translate="yes" xml:space="preserve">
          <source>The result of calling the given target function with the specified &lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; value and arguments.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; 値と引数を指定して、指定されたターゲット関数を呼び出した結果。</target>
        </trans-unit>
        <trans-unit id="b99296763ae8a3f599621dd114c4094796ca2f39" translate="yes" xml:space="preserve">
          <source>The result of evaluating an equality operator is always of type &lt;code&gt;Boolean&lt;/code&gt; based on whether the comparison is true.</source>
          <target state="translated">等価演算子の評価結果は、比較が真であるかどうかに基づいて常に &lt;code&gt;Boolean&lt;/code&gt; 型になります。</target>
        </trans-unit>
        <trans-unit id="a8e999ec047073963bd723d0485ba3b9a54de622" translate="yes" xml:space="preserve">
          <source>The result of the C-like 32-bit multiplication of the given arguments.</source>
          <target state="translated">与えられた引数のCのような32ビットの乗算の結果。</target>
        </trans-unit>
        <trans-unit id="2597fce0ed6ff2389377b1cd91c13f7fa32d0c68" translate="yes" xml:space="preserve">
          <source>The result of this expression is discarded.</source>
          <target state="translated">この式の結果は破棄されます。</target>
        </trans-unit>
        <trans-unit id="de7213f997b8bb96ab88809991cba00fbd846819" translate="yes" xml:space="preserve">
          <source>The resulting module instance is then instantiated using &lt;a href=&quot;instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt;, and the exported function invoked.</source>
          <target state="translated">次に、結果のモジュールインスタンスが&lt;a href=&quot;instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt;を使用してインスタンス化され、エクスポートされた関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c9dd8917f198a197f82a135134ca9b18dbd222a7" translate="yes" xml:space="preserve">
          <source>The resulting object has the following properties:</source>
          <target state="translated">結果として得られるオブジェクトは、以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="9bc62b3d5081c12993b4895e68761adb3c575f6c" translate="yes" xml:space="preserve">
          <source>The resulting string can also not be larger than the maximum string size, which can differ in JavaScript engines. In Firefox (SpiderMonkey) the maximum string size is 2&lt;sup&gt;28&lt;/sup&gt; -1 (&lt;code&gt;0xFFFFFFF&lt;/code&gt;).</source>
          <target state="translated">結果の文字列は、最大文字列サイズを超えることもできません。これは、JavaScriptエンジンで異なる場合があります。Firefox（SpiderMonkey）では、文字列の最大サイズは2 &lt;sup&gt;28&lt;/sup&gt; -1（ &lt;code&gt;0xFFFFFFF&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="9eb98a2fe0acf240d7654071bcd6d921de841684" translate="yes" xml:space="preserve">
          <source>The results are exactly the same for a condition that evaluates to true</source>
          <target state="translated">結果は、真と評価される条件では全く同じです。</target>
        </trans-unit>
        <trans-unit id="bb51b349d59eee807659f8049af5a1f06c6a49fc" translate="yes" xml:space="preserve">
          <source>The results can be customized using the &lt;code&gt;options&lt;/code&gt; argument, which has one property called &lt;code&gt;type&lt;/code&gt; which you can set to &lt;code&gt;ordinal&lt;/code&gt;. This is useful to figure out the ordinal indicator, e.g. &quot;1st&quot;, &quot;2nd&quot;, &quot;3rd&quot;, &quot;4th&quot;, &quot;42nd&quot; and so forth.</source>
          <target state="translated">結果は &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。この引数には、 &lt;code&gt;ordinal&lt;/code&gt; に設定できる &lt;code&gt;type&lt;/code&gt; と呼ばれる1つのプロパティがあります。これは、「1st」、「2nd」、「3rd」、「4th」、「42nd」などの順序インジケータを理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f410a04ef8f2b89064c010e4aca9735da1fb879f" translate="yes" xml:space="preserve">
          <source>The results can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="0590a37d62a639a0ff31052d74383a68576e7a8e" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;a href=&quot;collator/compare&quot;&gt;&lt;code&gt;Collator.prototype.compare()&lt;/code&gt;&lt;/a&gt; can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;a href=&quot;collator/compare&quot;&gt; &lt;code&gt;Collator.prototype.compare()&lt;/code&gt; &lt;/a&gt;によって提供される結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="6460752ea7eb84391c8bafc222830cc7e9fc54c2" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;a href=&quot;collator/compare&quot;&gt;&lt;code&gt;Collator.prototype.compare()&lt;/code&gt;&lt;/a&gt; vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">&lt;a href=&quot;collator/compare&quot;&gt; &lt;code&gt;Collator.prototype.compare()&lt;/code&gt; &lt;/a&gt;によって提供される結果は、言語によって異なります。アプリケーションのユーザーインターフェイスで使用されている言語の並べ替え順序を取得するには、 &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によっては代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="411e49cae96db0cd87482832797aee9efda23925" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;localeCompare()&lt;/code&gt; can be customized using the &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; によって提供される結果は、 &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="02e97af0ba43c68941c59329ec6c94c7d934f37d" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;localeCompare()&lt;/code&gt; can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; によって提供される結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="2da834c52e398fb59639d36bf16b5193db63ad07" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;localeCompare()&lt;/code&gt; vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; によって提供される結果は、言語によって異なります。アプリケーションのユーザーインターフェイスで使用される言語の並べ替え順序を取得するには、 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; 引数を使用してその言語（および場合によっては一部のフォールバック言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="07491f0bcc8c0faaaeb2650b8a25d645da689c62" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;localeCompare()&lt;/code&gt; vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; によって提供される結果は、言語によって異なります。アプリケーションのユーザーインターフェイスで使用されている言語の並べ替え順序を取得するには、 &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によっては代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="c230f29f6c02cdb2b6a382e23dd27d2b3c89bc0f" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;toLocaleDateString()&lt;/code&gt; can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;toLocaleDateString()&lt;/code&gt; によって提供される結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="77ddfcb36a5ffb925a3eafd6224d07f33c95e413" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;toLocaleString()&lt;/code&gt; can be customized using the &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;toLocaleString()&lt;/code&gt; によって提供される結果は、 &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="f77208c5cf48d90e2f10810957b1738415f9029d" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;toLocaleString()&lt;/code&gt; can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;toLocaleString()&lt;/code&gt; によって提供される結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="a4f9d7322f7d850fd3dd3ce966a5357c62b6c5a2" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;toLocaleString&lt;/code&gt; can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;toLocaleString&lt;/code&gt; によって提供される結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="4318bc9ae228b90743c8639d6a756aa6a12aeff3" translate="yes" xml:space="preserve">
          <source>The results provided by &lt;code&gt;toLocaleTimeString()&lt;/code&gt; can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;toLocaleTimeString()&lt;/code&gt; によって提供される結果は、 &lt;code&gt;options&lt;/code&gt; 引数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="d750f0af15205b9111428731d4535ea906318c68" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;nextValue&lt;/code&gt; can be another promise object, in which case the promise gets dynamically inserted into the chain.</source>
          <target state="translated">返される &lt;code&gt;nextValue&lt;/code&gt; は、別のpromiseオブジェクトにすることができます。その場合、promiseは動的にチェーンに挿入されます。</target>
        </trans-unit>
        <trans-unit id="49c375869abb9b071ccfdfcdd2c103a9345635d0" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;value&lt;/code&gt; can be another promise object, in which case the promise gets dynamically inserted into the chain.</source>
          <target state="translated">戻り &lt;code&gt;value&lt;/code&gt; は別のpromiseオブジェクトにすることができます。その場合、promiseはチェーンに動的に挿入されます。</target>
        </trans-unit>
        <trans-unit id="69479ecfb5622a99dbf2f17d21a25e4c7cdab014" translate="yes" xml:space="preserve">
          <source>The returned promise is fulfilled with &lt;strong&gt;the first&lt;/strong&gt; resolved value (or non-promise value) in the &lt;var&gt;iterable&lt;/var&gt; passed as the argument, whether or not the other promises have rejected.</source>
          <target state="translated">返されるpromiseは、他のpromiseが拒否されたかどうかに関係なく、引数として渡された &lt;var&gt;iterable&lt;/var&gt; &lt;strong&gt;の最初に&lt;/strong&gt;解決された値（または非promise値）で実行されます。</target>
        </trans-unit>
        <trans-unit id="ce8cb9fca9847dbce05c10ada3fd39a451a28a10" translate="yes" xml:space="preserve">
          <source>The returned promise is fulfilled with an array containing &lt;strong&gt;all &lt;/strong&gt;the resolved values (including non-promise values) in the &lt;var&gt;iterable&lt;/var&gt; passed as the argument.</source>
          <target state="translated">返されるpromiseは、引数として渡された &lt;var&gt;iterable&lt;/var&gt; 内の&lt;strong&gt;すべて&lt;/strong&gt;の解決された値（promise以外の値を含む）を含む配列で実行されます。</target>
        </trans-unit>
        <trans-unit id="661f37d284e715890d76e7452ee653c77f285192" translate="yes" xml:space="preserve">
          <source>The reversed array.</source>
          <target state="translated">反転した配列です。</target>
        </trans-unit>
        <trans-unit id="8c3aff562680fd07f458619d1c1aa793649db7fa" translate="yes" xml:space="preserve">
          <source>The right shift assignment operator (&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;) moves the specified amount of bits to the right and assigns the result to the variable.</source>
          <target state="translated">右シフト代入演算子（ &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; ）は、指定されたビット数を右に移動し、結果を変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="ce442467d5cf7e73ed965df107f9dfdb61ffd2ec" translate="yes" xml:space="preserve">
          <source>The right shift assignment operator moves the specified amount of bits to the right and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Right_shift&quot;&gt;right shift operator&lt;/a&gt; for more details.</source>
          <target state="translated">右シフト代入演算子は、指定された量のビットを右に移動し、結果を変数に代入します。詳細については、&lt;a href=&quot;bitwise_operators#Right_shift&quot;&gt;右シフト演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c245fc442c6d7bd16d7991dad8024b68c3ea2a14" translate="yes" xml:space="preserve">
          <source>The rules of logic guarantee that these evaluations are always correct. Note that the &lt;code&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/code&gt; part of the above expressions is not evaluated, so any side effects of doing so do not take effect. Also, note that the &lt;code&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/code&gt; part of the above expression is any single logical expression (as indicated by the parentheses).</source>
          <target state="translated">ロジックのルールは、これらの評価が常に正しいことを保証します。注意 &lt;code&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/code&gt; そうすることのいずれかの副作用が有効になりませんので、上記の式の一部が、評価されません。また、上記の式の &lt;code&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/code&gt; 部分は、単一の論理式（括弧で示されている）である&lt;em&gt;こと&lt;/em&gt;に注意してください。</target>
        </trans-unit>
        <trans-unit id="744c688eeb415786a18498e35f0370c335965400" translate="yes" xml:space="preserve">
          <source>The same applies when a file imports another:</source>
          <target state="translated">ファイルが別のファイルをインポートする場合も同様です。</target>
        </trans-unit>
        <trans-unit id="ca1a92d412f75bb14f89203461d00a89e6fc890a" translate="yes" xml:space="preserve">
          <source>The same conversion can be done through the &lt;a href=&quot;../global_objects/boolean/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/boolean/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;関数を使用して同じ変換を行うことができます。</target>
        </trans-unit>
        <trans-unit id="df5326ba109783cec194314860c8cd0f101f29ce" translate="yes" xml:space="preserve">
          <source>The same error is thrown when a class has been defined before using the class expression.</source>
          <target state="translated">クラス式を使用する前にクラスが定義されている場合も同様のエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="f94deddc325beb0ea83824b0cfcbc269df908993" translate="yes" xml:space="preserve">
          <source>The same example as above but with a strict mode:</source>
          <target state="translated">上記の例と同じですが、厳密なモードを使用しています。</target>
        </trans-unit>
        <trans-unit id="882bc50ec19db0d5c5e4b549dde81bfa662ed101" translate="yes" xml:space="preserve">
          <source>The same is true of &lt;code&gt;const&lt;/code&gt;:</source>
          <target state="translated">同じことが &lt;code&gt;const&lt;/code&gt; にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="2602f543ce2428dea5e294f7b4751258179f01d7" translate="yes" xml:space="preserve">
          <source>The same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, &lt;code&gt;this&lt;/code&gt; refers to the object the method was called on, as if the method were on the object.</source>
          <target state="translated">オブジェクトのプロトタイプチェーンのどこかに定義されているメソッドについても、同じ考え方が当てはまります。メソッドがオブジェクトのプロトタイプチェーン上にある場合、 &lt;code&gt;this&lt;/code&gt; はメソッドがオブジェクト上にあるかのように、メソッドが呼び出されたオブジェクトを参照します。</target>
        </trans-unit>
        <trans-unit id="916eb872cad9200388ff02806522199ea2feadc0" translate="yes" xml:space="preserve">
          <source>The same privacy pattern with closures over local variables can be created with &lt;code&gt;var&lt;/code&gt;, but those need a function scope (typically an IIFE in the module pattern) instead of just a block scope like in the example above.</source>
          <target state="translated">ローカル変数をクロージャーと同じプライバシーパターンを &lt;code&gt;var&lt;/code&gt; で作成できますが、上記の例のようなブロックスコープだけでなく、関数スコープ（通常はモジュールパターンのIIFE）が必要です。</target>
        </trans-unit>
        <trans-unit id="3d7b9a7348354d4ee8c942b714a53de91204cccb" translate="yes" xml:space="preserve">
          <source>The same thing happens if &lt;code&gt;Promise.all&lt;/code&gt; rejects:</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; が拒否した場合も同じことが起こります。</target>
        </trans-unit>
        <trans-unit id="d69cdfe19431d597100bf32601f4b9e7ffe9c0ce" translate="yes" xml:space="preserve">
          <source>The same variable name occurs as a function parameter and is then redeclared using a &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; assignment in a function body again. Redeclaring the same variable within the same function or block scope using &lt;code&gt;let&lt;/code&gt; is not allowed in JavaScript.</source>
          <target state="translated">同じ変数名が関数パラメーターとして出現し、関数本体で &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; 割り当てを使用して再宣言されます。JavaScriptでは、 &lt;code&gt;let&lt;/code&gt; を使用して同じ関数またはブロックスコープ内で同じ変数を再宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="1e9c89ceb04b938a0d084470af66e1f4222a742a" translate="yes" xml:space="preserve">
          <source>The same variable name occurs as a function parameter and is then redeclared using a &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; assignment in a function body again. This might be a naming conflict and thus JavaScript warns about it.</source>
          <target state="translated">同じ変数名が関数パラメーターとして出現し、次に関数本体で &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 割り当てを使用して再宣言されます。これは名前の競合である可能性があり、JavaScriptはそれについて警告します。</target>
        </trans-unit>
        <trans-unit id="3cc4fe3dea37b137d5ac1519e93e9e6cd6d1ade2" translate="yes" xml:space="preserve">
          <source>The scope of a variable declared with &lt;code&gt;var&lt;/code&gt; is its current &lt;em&gt;execution context and closures thereof&lt;/em&gt;, which is either the enclosing function and functions declared within it, or, for variables declared outside any function, global. Duplicate variable declarations using &lt;code&gt;var&lt;/code&gt; will not trigger an error, even in strict mode, and the variable will not lose its value, unless another assignment is performed.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; で宣言された変数のスコープは、現在の&lt;em&gt;実行コンテキストとそのクロージャです&lt;/em&gt;。これは、囲んでいる関数と&lt;em&gt;その&lt;/em&gt;中で宣言された関数、または関数の外部で宣言された変数の場合はグローバルです。 &lt;code&gt;var&lt;/code&gt; を使用して変数宣言を複製しても、strictモードでもエラーは発生せず、別の割り当てが実行されない限り、変数の値が失われることはありません。</target>
        </trans-unit>
        <trans-unit id="081845d752bd75fad66789e5488db5f75cfa83ed" translate="yes" xml:space="preserve">
          <source>The scope of a variable declared with &lt;code&gt;var&lt;/code&gt; is its current &lt;em&gt;execution context&lt;/em&gt;, which is either the enclosing function or, for variables declared outside any function, global. If you re-declare a JavaScript variable, it will not lose its value.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; で宣言された変数のスコープは、現在の&lt;em&gt;実行コンテキストです&lt;/em&gt;。これは、囲み関数、または関数の外部で宣言された変数の場合はグローバルです。JavaScript変数を再宣言しても、その値は失われません。</target>
        </trans-unit>
        <trans-unit id="bab8db43358dd1d5ee4220fc058b6fee6434c9d1" translate="yes" xml:space="preserve">
          <source>The script attempted to access an object property which doesn't exist. There are two ways to access properties; see the &lt;a href=&quot;../operators/property_accessors#0&quot;&gt;property accessors&lt;/a&gt; reference page to learn more about them.</source>
          <target state="translated">スクリプトは、存在しないオブジェクトプロパティにアクセスしようとしました。プロパティにアクセスするには2つの方法があります。詳細については、&lt;a href=&quot;../operators/property_accessors#0&quot;&gt;プロパティアクセサーの&lt;/a&gt;リファレンスページを参照してください。</target>
        </trans-unit>
        <trans-unit id="071870096c20119ee084aa15b8157eb9ff8e1bee" translate="yes" xml:space="preserve">
          <source>The script is the second part of a valid Unicode language identifier string, and can be set by adding it to the locale identifier string that is passed into the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor. Note that the script is not a required part of a locale identifier.</source>
          <target state="translated">スクリプトは、有効なUnicode言語識別子文字列の2番目の部分であり、&lt;a href=&quot;locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt;コンストラクターに渡されるロケール識別子文字列に追加することで設定できます。スクリプトはロケール識別子の必須部分ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a57b4c3298b35e7edb3f90845c7cfcfac6e75ef3" translate="yes" xml:space="preserve">
          <source>The second element for comparison.</source>
          <target state="translated">比較のための第二の要素。</target>
        </trans-unit>
        <trans-unit id="22841544311fffdd3a3c30c0a4872284a7c22a0e" translate="yes" xml:space="preserve">
          <source>The second inconvenience is a memory leak because the arrays ensure that references to each key and each value are maintained indefinitely. These references prevent the keys from being garbage collected, even if there are no other references to the object. This would also prevent the corresponding values from being garbage collected.</source>
          <target state="translated">第二の不都合は、配列が各キーと各値への参照を無期限に維持することを保証しているため、メモリリークです。これらの参照は、オブジェクトへの他の参照がない場合でも、キーがガベージコレクションされるのを防ぎます。これにより、対応する値がガベージコレクションされるのを防ぐこともできます。</target>
        </trans-unit>
        <trans-unit id="eb0086131e6b3531ebfb0c6d4586f854d8307796" translate="yes" xml:space="preserve">
          <source>The second one is bigger and less performant, but it permits some usage of the &lt;code&gt;new&lt;/code&gt; operator on bound functions.</source>
          <target state="translated">2つ目は大きくてパフォーマンスが劣りますが、バインドされた関数で &lt;code&gt;new&lt;/code&gt; 演算子をある程度使用できます。</target>
        </trans-unit>
        <trans-unit id="7c3cd18c7c61102635b00bba239d007b9878b9ac" translate="yes" xml:space="preserve">
          <source>The second statement assigns the value -100 to the variable &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">2番目のステートメントは、値-100を変数 &lt;code&gt;year&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="aa55ed83e35a0dcc61d75d6f45d0d4de5c1bf02f" translate="yes" xml:space="preserve">
          <source>The second statement assigns the value 100 to the variable &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">2番目のステートメントは、値100を変数 &lt;code&gt;year&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="0ea122387e98d3e9259a8686622e6469b39aca8a" translate="yes" xml:space="preserve">
          <source>The second statement assigns the value 95 to the variable &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">2番目のステートメントは、値95を変数 &lt;code&gt;year&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="4af5fdad88a53c6ca2e10ebd0e8a5f9481a8a2f1" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 1 to &lt;code&gt;weekday&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;. December 25, 1995, is a Monday.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値1を &lt;code&gt;weekday&lt;/code&gt; 割り当てます。1995年12月25日は月曜日です。</target>
        </trans-unit>
        <trans-unit id="1c879df70b2272c9b5d5ec41f180cc20c882a52d" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 11 to the variable &lt;code&gt;month&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値11を変数 &lt;code&gt;month&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="c119c53df8dbc52c8270c24e802cc1458abdf049" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 15 to the variable &lt;code&gt;minutes&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値15を変数 &lt;code&gt;minutes&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="9a8bee7abf8a4065d5840aec3031141bf9e19841" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 23 to the variable &lt;code&gt;hours&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値23を変数 &lt;code&gt;hours&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="30d33ab3aec9a22329c064d587266eedecf3c3da" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 25 to the variable &lt;code&gt;day&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値25を変数 &lt;code&gt;day&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="745cd8a1301e16f24d369e3eb0cae17a9cf39f01" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 30 to the variable &lt;code&gt;seconds&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値30を変数 &lt;code&gt;seconds&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="4024bd8f1cdd176e7775d73d2b29084da7618627" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
          <target state="translated">比較する2番目の値。</target>
        </trans-unit>
        <trans-unit id="abb522214d42e0562b3bff4958df65ccc0bca73b" translate="yes" xml:space="preserve">
          <source>The second way is the &lt;code&gt;/* */&lt;/code&gt; style, which is much more flexible.</source>
          <target state="translated">2番目の方法は &lt;code&gt;/* */&lt;/code&gt; スタイルで、これははるかに柔軟です。</target>
        </trans-unit>
        <trans-unit id="2e14d22e2ab70917b110055075acca7ffd59eea7" translate="yes" xml:space="preserve">
          <source>The second way to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object is to have it exported by a WebAssembly module. The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得する2番目の方法は、WebAssemblyモジュールによってエクスポートすることです。次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt;を参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;ライブでも表示&lt;/a&gt;）は、上記の行で作成されたメモリをインポートしながら、&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用してロードされたmemory.wasmバイトコードをフェッチしてインスタンス化します。次に、そのメモリにいくつかの値を格納し、関数をエクスポートして、それを使用していくつかの値を合計します。</target>
        </trans-unit>
        <trans-unit id="cefef5fa8e63d0fd4ec579caf525e0c06577e1f0" translate="yes" xml:space="preserve">
          <source>The second way to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object is to have it exported by a WebAssembly module. The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得する2番目の方法は、WebAssemblyモジュールによってオブジェクトをエクスポートすることです。次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt;を参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、上記の行で作成されたメモリをインポートしながら、&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用してロードされたmemory.wasmバイトコードをフェッチしてインスタンス化します。次に、そのメモリにいくつかの値を格納し、関数をエクスポートし、それを使用していくつかの値を合計します。</target>
        </trans-unit>
        <trans-unit id="c1f1f1991cf227b29cc351ef76e1b1c1ad39d33b" translate="yes" xml:space="preserve">
          <source>The secondary overload takes an already-compiled &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to an &lt;code&gt;Instance&lt;/code&gt; of that &lt;code&gt;Module&lt;/code&gt;. This overload is useful if the &lt;code&gt;Module&lt;/code&gt; has already been compiled.</source>
          <target state="translated">セカンダリオーバーロードは、コンパイル済みの&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;を受け取り、その &lt;code&gt;Module&lt;/code&gt; の &lt;code&gt;Instance&lt;/code&gt; に解決される &lt;code&gt;Promise&lt;/code&gt; を返します。このオーバーロードは、 &lt;code&gt;Module&lt;/code&gt; が既にコンパイルされている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="1820b978ecac3858ab3dd6802f3b9ee97c6a18f2" translate="yes" xml:space="preserve">
          <source>The shift() method is often used in condition inside while loop. In the following example every iteration will remove the next element from an array, until it is empty:</source>
          <target state="translated">shift()メソッドはwhileループ内の条件でよく使われます。次の例では、配列から次の要素を空になるまで削除します。</target>
        </trans-unit>
        <trans-unit id="abee9f26ebefaef40a0c699186c2c458782cc646" translate="yes" xml:space="preserve">
          <source>The shorthand syntax also supports computed property names.</source>
          <target state="translated">短縮構文は、計算されたプロパティ名もサポートしています。</target>
        </trans-unit>
        <trans-unit id="0ec96efc35fa3234a2270887e3200075877ba098" translate="yes" xml:space="preserve">
          <source>The shorthand syntax is similar to the &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; and &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; syntax introduced in ECMAScript 2015.</source>
          <target state="translated">省略構文は、ECMAScript 2015で導入された&lt;a href=&quot;get&quot;&gt;ゲッター&lt;/a&gt;および&lt;a href=&quot;set&quot;&gt;セッター&lt;/a&gt;構文に似ています。</target>
        </trans-unit>
        <trans-unit id="d970f2879008a5664e8f8ad4addd15f05ba6423e" translate="yes" xml:space="preserve">
          <source>The shorthand syntax is similar to the &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; and &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; syntax introduced in ES5.</source>
          <target state="translated">省略構文は、ES5で導入された&lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt;および&lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt;構文に似ています。</target>
        </trans-unit>
        <trans-unit id="87d2f0361ed70baca965f9d8e02d83e2c8d6cd67" translate="yes" xml:space="preserve">
          <source>The signatures of these two functions are simple, they accept a single parameter of any type. Of course, the actual names of these functions can be whatever is desired, i.e. they are named as the parameters of &lt;code&gt;executor&lt;/code&gt;. Each function is used by simply calling it when appropriate.</source>
          <target state="translated">これら2つの関数のシグネチャは単純であり、任意のタイプの単一のパラメーターを受け入れます。もちろん、これらの関数の実際の名前は、任意の名前にすることができます。つまり、 &lt;code&gt;executor&lt;/code&gt; のパラメーターとして名前が付けられます。各関数は、必要に応じて呼び出すだけで使用されます。</target>
        </trans-unit>
        <trans-unit id="ab86750f1e64ce498e187f5d5f841e9f26691c5b" translate="yes" xml:space="preserve">
          <source>The simple alternative of assigning the object to a short name variable, then accessing the corresponding property on that variable, stands ready to replace &lt;code&gt;with&lt;/code&gt;.</source>
          <target state="translated">オブジェクトを短い名前の変数に割り当て、その変数の対応するプロパティにアクセスするという簡単な方法は、で置き換える準備ができて &lt;code&gt;with&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ee0e0966334f1019846c5b7f928ea872496aeb90" translate="yes" xml:space="preserve">
          <source>The simple assignment operator (&lt;code&gt;=&lt;/code&gt;) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables</source>
          <target state="translated">単純な代入演算子（ &lt;code&gt;=&lt;/code&gt; ）は、変数に値を代入するために使用されます。割り当て操作は、割り当てられた値に評価されます。単一の値を複数の変数に割り当てるために、代入演算子を連鎖させることができます</target>
        </trans-unit>
        <trans-unit id="3c6147140bc7c5177cf3352c47afa22965051718" translate="yes" xml:space="preserve">
          <source>The simplest case is when &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is just a single character; this is used to split a delimited string. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like this: &lt;code&gt;myString.split(&quot;\t&quot;)&lt;/code&gt;.</source>
          <target state="translated">最も単純なケースは、 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; が1文字だけの場合です。これは、区切られた文字列を分割するために使用されます。たとえば、タブ区切り値（TSV）を含む文字列は、 &lt;code&gt;myString.split(&quot;\t&quot;)&lt;/code&gt; ように、区切り文字としてタブ文字を渡すことで解析できます。</target>
        </trans-unit>
        <trans-unit id="e0b22b9d7ecb2507195389b54eece72bc59a1c02" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function that, no matter how it is called, is called with a particular &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; の最も簡単な使用法は、どのように呼び出されても、特定の &lt;code&gt;this&lt;/code&gt; 値で呼び出される関数を作成することです。</target>
        </trans-unit>
        <trans-unit id="5835c1fc1912869cb1a9f6b017fc5089043ea886" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function that, no matter how it is called, is called with a particular &lt;code&gt;this&lt;/code&gt; value. A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its &lt;code&gt;this&lt;/code&gt; (e.g. by using that method in callback-based code). Without special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; の最も簡単な使用法は、どのように呼び出されても、特定の &lt;code&gt;this&lt;/code&gt; 値で呼び出される関数を作成することです。新しいJavaScriptプログラマーの一般的な間違いは、オブジェクトからメソッドを抽出し、後でその関数を呼び出して、元のオブジェクトを &lt;code&gt;this&lt;/code&gt; として使用することを期待することです（たとえば、コールバックベースのコードでそのメソッドを使用することにより）。ただし、特別な注意がなければ、元のオブジェクトは通常失われます。元のオブジェクトを使用して、関数からバインドされた関数を作成すると、この問題は適切に解決されます。</target>
        </trans-unit>
        <trans-unit id="6d6c63dff4f030464384082acb8b1913506c71dc" translate="yes" xml:space="preserve">
          <source>The simplest version directly imports the default:</source>
          <target state="translated">一番シンプルなバージョンでは、デフォルトのものを直接インポートしています。</target>
        </trans-unit>
        <trans-unit id="d69ece57bbd193284b3f54a7d109daeeae0e20ff" translate="yes" xml:space="preserve">
          <source>The sine of the given number.</source>
          <target state="translated">与えられた数のサイン。</target>
        </trans-unit>
        <trans-unit id="7fa6c3c88196c9890ccc2acd1751ee8a3b162f6e" translate="yes" xml:space="preserve">
          <source>The single code point U+00F1.</source>
          <target state="translated">単一のコードポイントU+00F1。</target>
        </trans-unit>
        <trans-unit id="df80f5ae8e83175ed50005f6bc69db2213cac60d" translate="yes" xml:space="preserve">
          <source>The single value that results from the reduction.</source>
          <target state="translated">還元の結果として得られる単一の値。</target>
        </trans-unit>
        <trans-unit id="668a8c3d578534a6a438f66f8a70854b72068cc7" translate="yes" xml:space="preserve">
          <source>The size in bytes to check.</source>
          <target state="translated">チェックするサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="57a5c0494833bea31465d3b044b0e0d342192fff" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the array buffer to create.</source>
          <target state="translated">作成する配列バッファのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="bcf6eda76bceac4f20d4cfa8a5529bffe65aa5c7" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="translated">配列のサイズ（バイト単位）。これは、配列の作成時に確立され、変更できません。&lt;strong&gt;読み取り専用。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1c647ddc22eacea007c8f8f76aa48ee7a3bdf44" translate="yes" xml:space="preserve">
          <source>The smallest integer greater than or equal to the given number.</source>
          <target state="translated">与えられた数以上の最小の整数。</target>
        </trans-unit>
        <trans-unit id="4d5352391b7cf0872173723c1715230a82d0e709" translate="yes" xml:space="preserve">
          <source>The smallest interval between two representable numbers.</source>
          <target state="translated">2つの表現可能な数の間の最小の間隔。</target>
        </trans-unit>
        <trans-unit id="578a6566f8dd2727ef2138039b6e1b260c726f43" translate="yes" xml:space="preserve">
          <source>The smallest of the given numbers. If any one or more of the parameters cannot be converted into a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned. The result is &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; if no parameters are provided.</source>
          <target state="translated">指定された数値の最小値。1つ以上のパラメーターを数値に変換できない場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。パラメータが指定されていない場合、結果は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1b584b056332604c643da0964809675ae4df19e1" translate="yes" xml:space="preserve">
          <source>The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).</source>
          <target state="translated">最小の正の表現可能な数、つまり、ゼロに最も近い正の数(実際にはゼロではない)。</target>
        </trans-unit>
        <trans-unit id="198213a60d9b14b4686129ce9aee85fc9c96c0ec" translate="yes" xml:space="preserve">
          <source>The smallest positive representable number&amp;mdash;that is, the positive number closest to zero (without actually being zero).</source>
          <target state="translated">正の表現可能な最小の数、つまり、ゼロに最も近い正の数（実際にはゼロではありません）。</target>
        </trans-unit>
        <trans-unit id="59980303f2b550bbba2cfdadd7dee2081477f6e1" translate="yes" xml:space="preserve">
          <source>The snippet below illustrates how to find and filter (thus causing data loss) a cyclic reference by using the &lt;code&gt;replacer&lt;/code&gt; parameter of &lt;a href=&quot;../global_objects/json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下のスニペットは、&lt;a href=&quot;../global_objects/json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;replacer&lt;/code&gt; パラメーターを使用して循環参照を見つけてフィルタリングする（したがってデータ損失を引き起こす）方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0d525c5acea385ad7d50408039e4c710e63be90d" translate="yes" xml:space="preserve">
          <source>The sorted array. Note that the array is sorted &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt;, and no copy is made.</source>
          <target state="translated">ソートされた配列。配列は&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;所定の位置&lt;/a&gt;&lt;/em&gt;でソート&lt;em&gt;され&lt;/em&gt;、コピーは作成されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4d59fac8447c22b135eb4a41f704bad8d5e0df4d" translate="yes" xml:space="preserve">
          <source>The sorted typed array.</source>
          <target state="translated">ソートされた型付き配列。</target>
        </trans-unit>
        <trans-unit id="f8167c1b0cbe252b617b1b1e7b1d0ed414774fce" translate="yes" xml:space="preserve">
          <source>The source map specification changed the syntax due to a conflict with IE whenever it was found in the page after &lt;code&gt;//@cc_on&lt;/code&gt; was interpreted to turn on conditional compilation in the IE JScript engine. The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8ka90k2e%28v=vs.94%29.aspx&quot;&gt;conditional compilation comment&lt;/a&gt; in IE is a little known feature, but it broke source maps with &lt;a href=&quot;https://bugs.jquery.com/ticket/13274&quot;&gt;jQuery&lt;/a&gt; and other libraries.</source>
          <target state="translated">&lt;code&gt;//@cc_on&lt;/code&gt; がIE JScriptエンジンで条件付きコンパイルを有効にするように解釈された後、ページで見つかった場合は常に、IEとの競合のためにソースマップ仕様が構文を変更しました。IE の&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8ka90k2e%28v=vs.94%29.aspx&quot;&gt;条件付きコンパイルコメント&lt;/a&gt;はあまり知られていない機能ですが、&lt;a href=&quot;https://bugs.jquery.com/ticket/13274&quot;&gt;jQuery&lt;/a&gt;およびその他のライブラリでソースマップを壊しました。</target>
        </trans-unit>
        <trans-unit id="aa083e2e5d9db92e1fdd3a2dadc5b300ce6d155e" translate="yes" xml:space="preserve">
          <source>The source object(s) &amp;mdash; objects containing the properties you want to apply.</source>
          <target state="translated">ソースオブジェクト&amp;mdash;適用するプロパティを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a6d0a7de6131e4d732a1c1c89a21e337c87b0b06" translate="yes" xml:space="preserve">
          <source>The source object(s).</source>
          <target state="translated">ソースオブジェクト。</target>
        </trans-unit>
        <trans-unit id="511eb85673324126c566f020ed174ab405eef44c" translate="yes" xml:space="preserve">
          <source>The space argument</source>
          <target state="translated">スペース引数</target>
        </trans-unit>
        <trans-unit id="40b8ea87c618fea41d5aab1faa4ecb32e6d1ea59" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;raw&lt;/code&gt; property, available on the first argument to the tag function, allows you to access the raw strings as they were entered, without processing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;escape sequences&lt;/a&gt;.</source>
          <target state="translated">タグ関数の最初の引数で使用できる特別な &lt;code&gt;raw&lt;/code&gt; プロパティを使用すると、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;エスケープシーケンス&lt;/a&gt;を処理せずに、入力されたraw文字列にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="df8a5b4743460e7bd39f98c02ae1935d30bc0af0" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;raw&lt;/code&gt; property, available on the first function argument of tagged templates, allows you to access the raw strings as they were entered, without processing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;escape sequences&lt;/a&gt;.</source>
          <target state="translated">タグ付きテンプレートの最初の関数引数で使用できる特別な &lt;code&gt;raw&lt;/code&gt; プロパティを使用すると、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;エスケープシーケンス&lt;/a&gt;を処理せずに、入力されたままの文字列にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3bcc0b40ba428a35f9db3d32557e34472af245d4" translate="yes" xml:space="preserve">
          <source>The special property &lt;code&gt;__caller__&lt;/code&gt;, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons.</source>
          <target state="translated">呼び出し元のアクティベーションオブジェクトを返し、スタックの再構築を可能にする特別なプロパティ &lt;code&gt;__caller__&lt;/code&gt; は、セキュリティ上の理由から削除されました。</target>
        </trans-unit>
        <trans-unit id="94f6db19f273c019178b304d1a64313a00b4826e" translate="yes" xml:space="preserve">
          <source>The species accessor property allows subclasses to override the default constructor for objects.</source>
          <target state="translated">species アクセサ プロパティは、サブクラスがオブジェクトのデフォルト コンストラクタをオーバーライドすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="16021061db18ebd6a5d2f1fec6234d9ec169cb96" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;ArrayBuffer&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">種アクセサプロパティは、 &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトのデフォルトのコンストラクタを返します。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="1b750d87e0450750db11d484a6aacc4956dcfa7d" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;Map&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">種アクセサプロパティは、 &lt;code&gt;Map&lt;/code&gt; オブジェクトのデフォルトのコンストラクタを返します。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="491d41ab480e226fed33b559751c6077a08f7be3" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;Set&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">種アクセサプロパティは、 &lt;code&gt;Set&lt;/code&gt; オブジェクトのデフォルトのコンストラクタを返します。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="b584b6a94bc11fac8ce47d9f14648ec420fce3c4" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor for &lt;code&gt;ArrayBuffer&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; プロパティは、デフォルトのコンストラクター関数を返します。これは、 &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトのArrayBufferコンストラクターです。</target>
        </trans-unit>
        <trans-unit id="2a17544fbb410f0df301670f863e167add111875" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;Map&lt;/code&gt; constructor for &lt;code&gt;Map&lt;/code&gt; objects:</source>
          <target state="translated">Speciesプロパティは、 &lt;code&gt;Map&lt;/code&gt; オブジェクトの &lt;code&gt;Map&lt;/code&gt; コンストラクタであるデフォルトのコンストラクタ関数を返します。</target>
        </trans-unit>
        <trans-unit id="46a4bbfb225be485ea6fcd2993d62c627968df55" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;Set&lt;/code&gt; constructor for &lt;code&gt;Set&lt;/code&gt; objects:</source>
          <target state="translated">Speciesプロパティは、デフォルトのコンストラクタ関数を返します。これは、 &lt;code&gt;Set&lt;/code&gt; オブジェクトの &lt;code&gt;Set&lt;/code&gt; コンストラクタです。</target>
        </trans-unit>
        <trans-unit id="9659544f684f8e234ac1326aebca08dd5b470404" translate="yes" xml:space="preserve">
          <source>The specified object.</source>
          <target state="translated">指定されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1f3f0ce94a2bcf1dd429f4d411f2f2b8d1305c23" translate="yes" xml:space="preserve">
          <source>The square brackets of an array comprehension introduce an implicit block for scoping purposes. New variables (such as i in the example) are treated as if they had been declared using &lt;a href=&quot;../statements/let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt;. This means that they will not be available outside of the comprehension.</source>
          <target state="translated">配列内包の角括弧は、スコープの目的で暗黙のブロックを導入します。新しい変数（例のiなど）は、&lt;a href=&quot;../statements/let&quot;&gt; &lt;code&gt;let&lt;/code&gt; &lt;/a&gt;を使用して宣言されたかのように扱われます。つまり、理解度の外では利用できません。</target>
        </trans-unit>
        <trans-unit id="b2bcdf15b0d6fa2bcc088c169892370833652876" translate="yes" xml:space="preserve">
          <source>The square root of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された数値の平方根。数値が負の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="4666bf74066d922cd6cefe693f56d0c8313d153f" translate="yes" xml:space="preserve">
          <source>The square root of the sum of squares of the given arguments. If at least one of the arguments cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">与えられた引数の平方和の平方根。少なくとも1つの引数を数値に変換できない場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="0387989a2fa950c785b09a34ece64a2e3fdcf811" translate="yes" xml:space="preserve">
          <source>The standard equality operators (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt; to compare two operands. If the operands are of different types, it will attempt to convert them to the same type before making the comparison, e.g., in the expression &lt;code&gt;5 == '5'&lt;/code&gt;, the string on the right is converted to &lt;a href=&quot;../global_objects/number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; before the comparison is made.</source>
          <target state="translated">標準の等値演算子（ &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; ）は、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象等値比較アルゴリズム&lt;/a&gt;を使用して2つのオペランドを比較します。オペランドのタイプが異なる場合、比較を行う前にオペランドを同じタイプに変換しようとします。たとえば、式 &lt;code&gt;5 == '5'&lt;/code&gt; では、比較が行われる前に右側の文字列が&lt;a href=&quot;../global_objects/number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;に変換されます。</target>
        </trans-unit>
        <trans-unit id="7d699ff1d0ad15f8264d303c6785a6e283211757" translate="yes" xml:space="preserve">
          <source>The standard import syntax is static and will always result in all code in the imported module being evaluated at load time. In situations where you wish to load a module conditionally or on demand, you can use a dynamic import instead. The following are some reasons why you might need to use dynamic import:</source>
          <target state="translated">標準のインポート構文は静的で、インポートされたモジュールのすべてのコードが常にロード時に評価されます。条件付きまたはオンデマンドでモジュールをロードしたい場合は、代わりにダイナミックインポートを使用することができます。以下に、ダイナミックインポートを使用する必要がある理由をいくつか挙げます。</target>
        </trans-unit>
        <trans-unit id="b74b19f4ceb5276ec846feec252ca8825e9367b4" translate="yes" xml:space="preserve">
          <source>The standard string representation of a date time string is a simplification of the ISO 8601 calendar date extended format. (See the section &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-time-string-format&quot;&gt;Date Time String Format&lt;/a&gt; in the ECMAScript specification for more details.)</source>
          <target state="translated">日時文字列の標準文字列表現は、ISO8601カレンダー日付拡張形式を簡略化したものです。（詳細については、ECMAScript仕様の「&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-time-string-format&quot;&gt;日時文字列形式」&lt;/a&gt;セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="b0898b091e1d3ad98c99f7c945505cae7f09588f" translate="yes" xml:space="preserve">
          <source>The statements comprising the body of the function.</source>
          <target state="translated">関数の本体を構成するステートメント。</target>
        </trans-unit>
        <trans-unit id="5292df8522a93b76d66c5a4afeb6f245ff0ab8ec" translate="yes" xml:space="preserve">
          <source>The statements comprising the body of the function. The &lt;code&gt;await&lt;/code&gt; mechanism may be used.</source>
          <target state="translated">関数の本体を構成するステートメント。 &lt;code&gt;await&lt;/code&gt; 機構を使用することができます。</target>
        </trans-unit>
        <trans-unit id="fda11c0a9bea9de1bd840d175d6e7282612347e8" translate="yes" xml:space="preserve">
          <source>The statements to be executed.</source>
          <target state="translated">実行されるステートメント。</target>
        </trans-unit>
        <trans-unit id="0b7cace5e0a90d7bf7b781a74edd8bfb1a682291" translate="yes" xml:space="preserve">
          <source>The statements which comprise the body of the function.</source>
          <target state="translated">機能の本体を構成するステートメント。</target>
        </trans-unit>
        <trans-unit id="af2de8cd4975cbac3f2c6514c3154e49561e8f73" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;ArrayBuffer.transfer()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;ArrayBuffer&lt;/code&gt; whose contents have been taken from the &lt;code&gt;oldBuffer&lt;/code&gt;'s data and then is either truncated or zero-extended by &lt;code&gt;newByteLength&lt;/code&gt;. If &lt;code&gt;newByteLength&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, the &lt;code&gt;byteLength&lt;/code&gt; of the &lt;code&gt;oldBuffer&lt;/code&gt; is used. This operation leaves &lt;code&gt;oldBuffer&lt;/code&gt; in a detached state.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;ArrayBuffer.transfer()&lt;/strong&gt;&lt;/code&gt; メソッドの戻り新たな &lt;code&gt;ArrayBuffer&lt;/code&gt; 内容から採取された &lt;code&gt;oldBuffer&lt;/code&gt; いずれか切り捨て等によりゼロ拡張され、その後のデータと &lt;code&gt;newByteLength&lt;/code&gt; 。場合 &lt;code&gt;newByteLength&lt;/code&gt; がある &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;byteLength&lt;/code&gt; の &lt;code&gt;oldBuffer&lt;/code&gt; が使用されています。この操作により、 &lt;code&gt;oldBuffer&lt;/code&gt; は切り離された状態のままになります。</target>
        </trans-unit>
        <trans-unit id="fec0e30534f8672c0605f775fb24680275b23217" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.add()&lt;/code&gt; method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.add()&lt;/code&gt; メソッドは、配列内の指定された位置に指定された値を追加し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="f0011b0ab0dfc8540c68447b4bdccd149dfa154e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.and()&lt;/code&gt; method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.and()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値とビット単位のANDを計算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="af50eef77235e45ea0e39a742ebfb44f0032d99d" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.compareExchange()&lt;/code&gt; method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.compareExchange()&lt;/code&gt; メソッドは、指定された期待値が古い値と等しい場合、配列内の指定された位置で指定された置換値を交換します。期待値と等しいかどうかに関係なく、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="58f2eaed64525110a07c2c9298d09c022135db54" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.isLockFree()&lt;/code&gt; method is used to determine whether to use locks or atomic operations. It returns &lt;code&gt;true&lt;/code&gt;, if the given size is one of the &lt;a href=&quot;../typedarray/bytes_per_element&quot;&gt;BYTES_PER_ELEMENT&lt;/a&gt; property of integer TypedArray types.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.isLockFree()&lt;/code&gt; メソッドは、ロックまたはアトミック操作のどちらを使用するかを決定するために使用されます。指定されたサイズが整数TypedArray型の&lt;a href=&quot;../typedarray/bytes_per_element&quot;&gt;BYTES_PER_ELEMENT&lt;/a&gt;プロパティの1つである場合、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2c7f01f3104d4a107eb890565aaa201bffb09a01" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.load()&lt;/code&gt; method returns a value at a given position in the array.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.load()&lt;/code&gt; メソッドは、配列内の指定された位置にある値を返します。</target>
        </trans-unit>
        <trans-unit id="6462b2d9d930792381152b80f1427f0c1f7cca14" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.notify()&lt;/code&gt; method notifies up some agents that are sleeping in the wait queue.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.notify()&lt;/code&gt; メソッドは、待機キューでスリープしている一部のエージェントに通知します。</target>
        </trans-unit>
        <trans-unit id="4205b3973e84d519136144d4c8b46564efb27293" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.or()&lt;/code&gt; method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.or()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値とのビット単位ORを計算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="efe340e63eb2088c81d321b80a5d5d3af5868809" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.store()&lt;/code&gt; method stores a given value at the given position in the array and returns that value.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.store()&lt;/code&gt; メソッドは、配列内の指定された位置に指定された値を格納し、その値を返します。</target>
        </trans-unit>
        <trans-unit id="cb854a5e6cbf84d6e52a0b31506ec682b29c7455" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.sub()&lt;/code&gt; method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.sub()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値を減算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="c927740464da9faa8686eae4c067cde1cdfe2a34" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.wait()&lt;/code&gt; method verifies that a given position in an &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either &quot;&lt;code&gt;ok&lt;/code&gt;&quot;, &quot;&lt;code&gt;not-equal&lt;/code&gt;&quot;, or &quot;&lt;code&gt;timed-out&lt;/code&gt;&quot;.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.wait()&lt;/code&gt; 内の指定された位置ことメソッド検証&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; が&lt;/a&gt;依然としてウェイクアップまたはタイムアウトを待って、所定の値とそうであればスリープを含有します。「 &lt;code&gt;ok&lt;/code&gt; 」、「 &lt;code&gt;not-equal&lt;/code&gt; 」、または「 &lt;code&gt;timed-out&lt;/code&gt; 」のいずれかの文字列を返します。</target>
        </trans-unit>
        <trans-unit id="92b05055b84702f2556852087e51e5debed0fb92" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.wait()&lt;/code&gt; method verifies that a given position in an &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either &lt;code&gt;&quot;ok&quot;&lt;/code&gt;, &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt;, or &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt;.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.wait()&lt;/code&gt; メソッドは、&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;内の指定された位置に指定された値がまだ含まれていることを確認し、そうであればスリープ、ウェイクアップまたはタイムアウトを待機します。 &lt;code&gt;&quot;ok&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt; の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="67be5710c39f4a140b1b493763c08a3e3d826875" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.xor()&lt;/code&gt; method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.xor()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値を使用してビット単位のXORを計算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="7db98a25f456e5329b9fde7e474cdb5208a2b6d7" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect.construct()&lt;/strong&gt;&lt;/code&gt; method acts like the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator, but as a function. It is equivalent to calling &lt;code&gt;new target(...args)&lt;/code&gt;. It gives also the added option to specify a different prototype.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect.construct()&lt;/strong&gt;&lt;/code&gt; メソッドは、&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子のように機能しますが、関数として機能します。これは、 &lt;code&gt;new target(...args)&lt;/code&gt; を呼び出すのと同じです。また、別のプロトタイプを指定するための追加オプションも提供します。</target>
        </trans-unit>
        <trans-unit id="b2ab58b2a2d76388fc95d13db70d0161ffceab73" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.apply()&lt;/code&gt; method calls a target function with arguments as specified.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.apply()&lt;/code&gt; メソッドは、指定された引数を使用してターゲット関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e60a81890510d63e2d6ef8c32ffb1e9b9ecc1c1c" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.construct()&lt;/code&gt; method acts like the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt;, but as a function. It is equivalent to calling &lt;code&gt;new target(...args)&lt;/code&gt;. It gives also the added option to specify a different prototype.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.construct()&lt;/code&gt; メソッドは、&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子の&lt;/a&gt;ように機能しますが、関数として機能します。これは、 &lt;code&gt;new target(...args)&lt;/code&gt; を呼び出すことと同じです。また、別のプロトタイプを指定するオプションが追加されています。</target>
        </trans-unit>
        <trans-unit id="017fa157ac61b53401f5cb2e6e3640d24750e2f0" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.defineProperty()&lt;/code&gt; メソッドは&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; に&lt;/a&gt;似ていますが、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="f6d363c497e88472a0e66be0b359cea42ef4a3cd" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.deleteProperty()&lt;/code&gt; method allows to delete properties. It is like the &lt;a href=&quot;../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.deleteProperty()&lt;/code&gt; メソッドを使用すると、プロパティを削除できます。これは、関数としての&lt;a href=&quot;../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; 演算子の&lt;/a&gt;ようなものです。</target>
        </trans-unit>
        <trans-unit id="f420cd260cbc503b3ed49d8a8602567c43f99e33" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.getOwnPropertyDescriptor()&lt;/code&gt; メソッドは&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; に&lt;/a&gt;似ています。オブジェクトに存在する場合は、指定されたプロパティのプロパティ記述子を返します。それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f594507dfbe84df768deb14a1430e696aec3e282" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.getPrototypeOf()&lt;/code&gt; メソッドは、ほぼ同じ方法である&lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt;。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティの値）を返します。</target>
        </trans-unit>
        <trans-unit id="96117f1bdab8ca07b755f3c9d1f770485254a893" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.has()&lt;/code&gt; メソッドは、関数として&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 演算子の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="61cfa4955f0ed6f84455e3714e51e58a202da52e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible()&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.isExtensible()&lt;/code&gt; メソッドは、オブジェクトが拡張可能かどうか（新しいプロパティを追加できるかどうか）を決定します。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_to_Object.isExtensible()&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="82fbabb68637650603a621e6e651e1c535e33c57" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.ownKeys()&lt;/code&gt; メソッドは、 &lt;code&gt;target&lt;/code&gt; オブジェクトの独自のプロパティキーの配列を返します。</target>
        </trans-unit>
        <trans-unit id="2a57630937594eb73d149839935552dede20e9c9" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.preventExtensions()&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.preventExtensions()&lt;/code&gt; メソッドは、新しいプロパティがオブジェクトに追加されるのを防ぎます（つまり、オブジェクトの将来の拡張を防ぎます）。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_to_Object.preventExtensions()&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ebdbba77dbd45f91cdb48da11c97627eee7d9438" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.set()&lt;/code&gt; method works like setting a property on an object.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.set()&lt;/code&gt; メソッドは、オブジェクトのプロパティを設定するように機能します。</target>
        </trans-unit>
        <trans-unit id="50dd64d4dfc656df46a7e0f060d23ece0a78b434" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.setPrototypeOf()&lt;/code&gt; メソッドは、&lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;と同じメソッドです。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティ）を別のオブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; に設定&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="0eb93af43f589b80cf5a285f46fcba25eb100d45" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; statement is used to import bindings which are exported by another module. Imported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The &lt;code&gt;import&lt;/code&gt; statement cannot be used in embedded scripts unless such script has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; ステートメントは、別のモジュールによってエクスポートされたバインディングをインポートするために使用されます。インポートされたモジュールは、宣言されているかどうかに関係なく、&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;import&lt;/code&gt; こうしたスクリプトは持っていない限り、ステートメントが埋め込まれたスクリプトで使用することができない &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9813705cf188dd5f254d0eaadbddf65400aead3a" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; statement is used to import read only live bindings which are &lt;a href=&quot;export&quot;&gt;exported&lt;/a&gt; by another module. Imported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The &lt;code&gt;import&lt;/code&gt; statement cannot be used in embedded scripts unless such script has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;. Bindings imported are called live bindings because they are updated by the module that exported the binding.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; ステートメントは、別のモジュールによって&lt;a href=&quot;export&quot;&gt;エクスポートさ&lt;/a&gt;れた読み取り専用のライブバインディングをインポートするために使用されます。インポートされたモジュールは、宣言するかどうかに関係なく、&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;import&lt;/code&gt; こうしたスクリプトは持っていない限り、ステートメントが埋め込まれたスクリプトで使用することができない &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; 。インポートされたバインディングは、バインディングをエクスポートしたモジュールによって更新されるため、ライブバインディングと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="d868ba88128cfe2f4dfb6b316e888ebde89b296b" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Atomics.exchange()&lt;/code&gt; method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.</source>
          <target state="translated">静的 &lt;code&gt;Atomics.exchange()&lt;/code&gt; メソッドは、配列内の指定された位置に指定された値を格納し、その位置にある古い値を返します。このアトミック操作は、古い値の読み取りと新しい値の書き込みの間に他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="0a9226ec84e2dacebdb4c2616163cd54f9d3d2e3" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Atomics.sub()&lt;/code&gt; method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;Atomics.sub()&lt;/code&gt; メソッドは、配列内の指定された位置で指定された値を減算し、その位置で古い値を返します。このアトミック操作により、変更された値が書き戻されるまで、他の書き込みが発生しないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="f88bf7eb33c64a57d801dd3379b0fe4e960df80f" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Date.now()&lt;/code&gt; method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</source>
          <target state="translated">静的 &lt;code&gt;Date.now()&lt;/code&gt; メソッドは、1970年1月1日00：00：00UTCから経過したミリ秒数を返します。</target>
        </trans-unit>
        <trans-unit id="4cff4455395e8d7a453784b6672e9138e0133455" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Promise.reject&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is rejected. For debugging purposes and selective error catching, it is useful to make &lt;code&gt;reason&lt;/code&gt; an &lt;code&gt;instanceof&lt;/code&gt;&lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Promise.reject&lt;/code&gt; 関数は、拒否された &lt;code&gt;Promise&lt;/code&gt; を返します。引く目的と選択エラーをデバッグするために、作るために有用である &lt;code&gt;reason&lt;/code&gt; &lt;code&gt;instanceof&lt;/code&gt; は&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90cfd1ce17a09ece2532de9bbc2ae9d0f2bfb7c8" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Promise.resolve&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is resolved.</source>
          <target state="translated">静的な &lt;code&gt;Promise.resolve&lt;/code&gt; 関数は、解決された &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a21d42d17a2f572741533ffa8f2117a5682e671e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.apply()&lt;/code&gt; method calls a target function with arguments as specified.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.apply()&lt;/code&gt; メソッドは、指定された引数を使用してターゲット関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8a62d545267d57e38fd5cd02b700c84afe8a7849" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; メソッドは&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; に&lt;/a&gt;似ていますが、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="daf9541750336db1ef3f90e685a8a5bb35fefbdc" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.get()&lt;/code&gt; method works like getting a property from an object (&lt;code&gt;target[propertyKey]&lt;/code&gt;) as a function.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.get()&lt;/code&gt; メソッドは、オブジェクト（ &lt;code&gt;target[propertyKey]&lt;/code&gt; ）からプロパティを関数として取得するように機能します。</target>
        </trans-unit>
        <trans-unit id="e750705252caaefca2d5abe6183fc3318b43bae0" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; メソッドは、&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; に&lt;/a&gt;似ています。オブジェクトに存在する場合は指定されたプロパティのプロパティ記述子を返し、それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="20a0bb46eb2f22b838e2e9fade5a9bb9eb3a74ca" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; メソッドは、ほぼ同じ方法である&lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt;。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティの値）を返します。</target>
        </trans-unit>
        <trans-unit id="4c7e4ee25c18939f40d68d9058ec9f5333cb752a" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.has()&lt;/code&gt; メソッドは、関数としての&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 演算子の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="7db233c270f8979d1b5c3ef2bbd6d81eac167e17" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.isExtensible()&lt;/code&gt; メソッドは、オブジェクトが拡張可能かどうか（新しいプロパティを追加できるかどうか）を決定します。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_to_Object.isExtensible&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6a7328ff6cc40d7fecd957bafa030946ffe71bbe" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; メソッドは、 &lt;code&gt;target&lt;/code&gt; オブジェクト自体のプロパティキーの配列を返します。</target>
        </trans-unit>
        <trans-unit id="5ee721d282e35985c5967bb8bc2a21bcac8e8779" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_from_Object.preventExtensions&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; メソッドは、新しいプロパティがオブジェクトに追加されるのを防ぎます（つまり、オブジェクトへの将来の拡張を防ぎます）。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_from_Object.preventExtensions&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="91735f1b96d2f17ae9d4b0083013a69e083cb2d9" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.set()&lt;/code&gt; method works like setting a property on an object.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.set()&lt;/code&gt; メソッドは、オブジェクトにプロパティを設定するのと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="b2383c9f6d48cdefe68ddd4c9c98beb354c09aa6" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;, except for its return type. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful, or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; メソッドは、戻り値の型を除いて、&lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;と同じメソッドです。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティ）を別のオブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;に設定し、操作が成功した場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0764467d102945b22b05fd0dad760b35aee367ab" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.fromCharCode()&lt;/code&gt; method returns a string created from the specified sequence of UTF-16 code units.</source>
          <target state="translated">静的な &lt;code&gt;String.fromCharCode()&lt;/code&gt; メソッドは、UTF-16コード単位の指定されたシーケンスから作成された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b69a85724fb361ca15f0c31e4a0e03ac87c2298f" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.fromCodePoint()&lt;/code&gt; method returns a string created by using the specified sequence of code points.</source>
          <target state="translated">static &lt;code&gt;String.fromCodePoint()&lt;/code&gt; メソッドは、指定されたコードポイントのシーケンスを使用して作成された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5a1164088adaed231a8d0365747029a7565e0723" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;, similar to the &lt;code&gt;r&lt;/code&gt; prefix in Python or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals (yet there is a difference: see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt;) are not.</source>
          <target state="translated">静的な &lt;code&gt;String.raw()&lt;/code&gt; メソッドは、&lt;a href=&quot;../../template_literals&quot;&gt;テンプレートリテラルの&lt;/a&gt;タグ関数であり、Python の &lt;code&gt;r&lt;/code&gt; 接頭辞またはC＃の文字列リテラルの &lt;code&gt;@&lt;/code&gt; 接頭辞と似ています（ただし、違いがあります：&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;この問題の&lt;/a&gt;説明を参照してください）。これは、テンプレート文字列の生の文字列形式を取得するために使用されます。つまり、置換（例：$ {foo}）は処理されますが、エスケープ（例： &lt;code&gt;\n&lt;/code&gt; ）は処理されません。</target>
        </trans-unit>
        <trans-unit id="c01b8c9ffec8417a0f29a178c90e8903bce9ce58" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;. This is &lt;em&gt;similar&lt;/em&gt; to the &lt;code&gt;r&lt;/code&gt; prefix in Python, or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals. (But it is not &lt;em&gt;identical&lt;/em&gt;; see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;.) It's used to get the raw string form of template strings, that is, substitutions (e.g. &lt;code&gt;${foo}&lt;/code&gt;) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt;) are not.</source>
          <target state="translated">静的 &lt;code&gt;String.raw()&lt;/code&gt; メソッドは、&lt;a href=&quot;../../template_literals&quot;&gt;テンプレートリテラルの&lt;/a&gt;タグ関数です。これは、Pythonの &lt;code&gt;r&lt;/code&gt; プレフィックス、または文字列リテラルのC＃の &lt;code&gt;@&lt;/code&gt; プレフィックスに&lt;em&gt;似&lt;/em&gt;ています。（ただし、&lt;em&gt;同一&lt;/em&gt;ではありませ&lt;em&gt;ん&lt;/em&gt;。&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;この問題の&lt;/a&gt;説明を参照してください。）これは、テンプレート文字列の生の文字列形式を取得するために使用されます。つまり、置換（ &lt;code&gt;${foo}&lt;/code&gt; ）は処理されますが、エスケープ（ &lt;code&gt;\n&lt;/code&gt; ）は処理されません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a8ea9e9db5e6fe0dea4d47b272e5aa77aa474da1" translate="yes" xml:space="preserve">
          <source>The static function &lt;code&gt;&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if any parameter isn't a number and can't be converted into one.</source>
          <target state="translated">静的関数 &lt;code&gt;&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/code&gt; は、渡された最小値の数値を返します。パラメータが数値ではなく、1に変換できない場合は、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="343f98c933105ceddb9c93f3821cb9a718c16e0c" translate="yes" xml:space="preserve">
          <source>The static function &lt;code&gt;Math.min()&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if any parameter isn't a number and can't be converted into one.</source>
          <target state="translated">静的関数 &lt;code&gt;Math.min()&lt;/code&gt; は、渡された最小値の数値を返します。パラメータが数値ではなく、数値に変換できない場合は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="29631328836304ccf3e2ce47dd6de68f5579f442" translate="yes" xml:space="preserve">
          <source>The static method &lt;code&gt;&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;&lt;/code&gt; defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</source>
          <target state="translated">静的メソッド &lt;code&gt;&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;&lt;/code&gt; は、オブジェクトの新しいプロパティを直接定義するか、オブジェクトの既存のプロパティを変更して、オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="21af28101aabaa0e0931054917f6f4878a80b217" translate="yes" xml:space="preserve">
          <source>The static methods are added to the class constructor with &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; at class evaluation time. These methods are writable, non-enumerable, and configurable.</source>
          <target state="translated">静的メソッドは、クラス評価時に&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;を使用してクラスコンストラクターに追加されます。これらのメソッドは、書き込み可能、​​列挙不可能、および構成可能です。</target>
        </trans-unit>
        <trans-unit id="a47f0ebd85e4368447733e4227d60e812ee3637b" translate="yes" xml:space="preserve">
          <source>The static property &lt;code&gt;String.length&lt;/code&gt; is unrelated to the length of strings, it's the arity of the &lt;code&gt;String&lt;/code&gt; function (loosely, the number of formal parameters it has), which is 1.</source>
          <target state="translated">静的プロパティ &lt;code&gt;String.length&lt;/code&gt; は、文字列の長さとは関係ありません。これは、 &lt;code&gt;String&lt;/code&gt; 関数のアリティ（大まかに言えば、持つ仮パラメーターの数）であり、1です。</target>
        </trans-unit>
        <trans-unit id="cd2c8d431cfc97f7ef0dad5eb64f02608a89c081" translate="yes" xml:space="preserve">
          <source>The static property &lt;code&gt;String.length&lt;/code&gt; returns the value 1.</source>
          <target state="translated">静的プロパティ &lt;code&gt;String.length&lt;/code&gt; は値1を返します。</target>
        </trans-unit>
        <trans-unit id="b4d9b48de1d5ca630452609034e53c9dcbe08e13" translate="yes" xml:space="preserve">
          <source>The strict equality operator (&lt;code&gt;===&lt;/code&gt;) checks whether its two operands are equal, returning a Boolean result. Unlike the &lt;a href=&quot;equality&quot;&gt;equality&lt;/a&gt; operator, the strict equality operator always considers operands of different types to be different.</source>
          <target state="translated">厳密な等式演算子（ &lt;code&gt;===&lt;/code&gt; ）は、その2つのオペランドが等しいかどうかをチェックし、ブール結果を返します。&lt;a href=&quot;equality&quot;&gt;等式&lt;/a&gt;演算子とは異なり、厳密な等式演算子は常に異なるタイプのオペランドが異なると見なします。</target>
        </trans-unit>
        <trans-unit id="d9489b7724c11a3e7506bfd4efd8ea6899a4157a" translate="yes" xml:space="preserve">
          <source>The strict equality operators (&lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;Strict Equality Comparison Algorithm&lt;/a&gt; and are intended for performing equality comparisons on operands of the same type. If the operands are of different types, the result is always &lt;code&gt;false&lt;/code&gt; so &lt;code&gt;5 !== '5'&lt;/code&gt;.</source>
          <target state="translated">厳密な等価演算子（ &lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; ）は、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;厳密な等価比較アルゴリズム&lt;/a&gt;を使用し、同じ型のオペランドに対して等価比較を実行することを目的としています。オペランドのタイプが異なる場合、結果は常に &lt;code&gt;false&lt;/code&gt; になるため、 &lt;code&gt;5 !== '5'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="44e9d722379f1cf60a075e8201cadec525112969" translate="yes" xml:space="preserve">
          <source>The strict equality operators (&lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;Strict Equality Comparison Algorithm&lt;/a&gt; to compare two operands.</source>
          <target state="translated">厳密な等式演算子（ &lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; ）は、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;厳密な等式比較アルゴリズム&lt;/a&gt;を使用して2つのオペランドを比較します。</target>
        </trans-unit>
        <trans-unit id="feacee86f026b7e310b9c58529bba3d5a5533366" translate="yes" xml:space="preserve">
          <source>The strict inequality operator (&lt;code&gt;!==&lt;/code&gt;) checks whether its two operands are not equal, returning a Boolean result. Unlike the &lt;a href=&quot;inequality&quot;&gt;inequality&lt;/a&gt; operator, the strict inequality operator always considers operands of different types to be different.</source>
          <target state="translated">厳密な不等式演算子（ &lt;code&gt;!==&lt;/code&gt; ）は、その2つのオペランドが等しくないかどうかをチェックし、ブール結果を返します。&lt;a href=&quot;inequality&quot;&gt;不等式&lt;/a&gt;演算子とは異なり、厳密な不等式演算子は常に異なるタイプのオペランドが異なると見なします。</target>
        </trans-unit>
        <trans-unit id="a073ad1e42a3770f959fb441bc03dd9c4bd10b9a" translate="yes" xml:space="preserve">
          <source>The strict inequality operator checks whether its operands are not equal. It is the negation of the &lt;a href=&quot;strict_equality&quot;&gt;strict equality&lt;/a&gt; operator so the following two lines will always give the same result:</source>
          <target state="translated">厳密な不等式演算子は、そのオペランドが等しくないかどうかをチェックします。これは&lt;a href=&quot;strict_equality&quot;&gt;厳密な等式&lt;/a&gt;演算子の否定であるため、次の2行は常に同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="2c891432614e0271990b19ee19c1960c4f7ed000" translate="yes" xml:space="preserve">
          <source>The string &quot;GMT&quot;</source>
          <target state="translated">文字列 &quot;GMT&quot;</target>
        </trans-unit>
        <trans-unit id="6088cf870949b49d36a431015f841c203f32b399" translate="yes" xml:space="preserve">
          <source>The string against which the &lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; is compared.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; が比較される文字列。</target>
        </trans-unit>
        <trans-unit id="ea2dee8a6f09197d3ef866b17c4fd784a8a2c4b5" translate="yes" xml:space="preserve">
          <source>The string against which the referring string is compared</source>
          <target state="translated">参照する文字列と比較される文字列</target>
        </trans-unit>
        <trans-unit id="468533e087e1f94dc468f647db1085e7614cb88f" translate="yes" xml:space="preserve">
          <source>The string against which to match the regular expression.</source>
          <target state="translated">正規表現にマッチする文字列。</target>
        </trans-unit>
        <trans-unit id="8791aa250b59014327c5ae3d1bec5e5e7b33faa7" translate="yes" xml:space="preserve">
          <source>The string conversions of all array elements are joined into one string.</source>
          <target state="translated">すべての配列要素の文字列変換は1つの文字列に結合されます。</target>
        </trans-unit>
        <trans-unit id="083e61e70ae1931edd0dd9b748da358341d4a05c" translate="yes" xml:space="preserve">
          <source>The string name of the desired custom section.</source>
          <target state="translated">目的のカスタムセクションの文字列名。</target>
        </trans-unit>
        <trans-unit id="0499197d0f18f7e883f893ecbdf08eba61358189" translate="yes" xml:space="preserve">
          <source>The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is &quot;&quot; (&lt;code&gt;U+0020&lt;/code&gt;).</source>
          <target state="translated">現在の &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; を埋める文字列。 &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; が長すぎてtargetLength内に &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; ない場合は、切り捨てられます。左から右の言語の場合は左端の部分が適用され、右から左の言語の場合は右端が適用されます。このパラメーターのデフォルト値は &quot;&quot;（ &lt;code&gt;U+0020&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3634ae755e3cc6172656cbc241422c078eafe53e" translate="yes" xml:space="preserve">
          <source>The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within the &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;, it will be truncated from the end. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (&lt;code&gt;U+0020 'SPACE'&lt;/code&gt;).</source>
          <target state="translated">現在の &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; を埋める文字列。 &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; が長すぎて &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; 内に留まらない場合、最後から切り捨てられます。デフォルト値は &lt;code&gt;&quot; &quot;&lt;/code&gt; （ &lt;code&gt;U+0020 'SPACE'&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="8949040080f63f417888c8f3d4b5caca1e95b9d2" translate="yes" xml:space="preserve">
          <source>The string to pad the current string with. If this padding string is too long to stay within the &lt;code&gt;targetLength&lt;/code&gt;, it will be truncated from the right. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (U+0020 'SPACE').</source>
          <target state="translated">現在の文字列に埋め込む文字列。このパディング文字列が長すぎて &lt;code&gt;targetLength&lt;/code&gt; 内に収まらない場合は、右側から切り詰められます。デフォルト値は &lt;code&gt;&quot; &quot;&lt;/code&gt; （U + 0020 'SPACE'）です。</target>
        </trans-unit>
        <trans-unit id="3ae9c2ba9c07edac725622631c539ef4861220e2" translate="yes" xml:space="preserve">
          <source>The string to pad the current string with. If this string is too long to stay within the target length, it will be truncated and the left-most part will be applied. The default value for this parameter is &quot; &quot; (U+0020).</source>
          <target state="translated">現在の文字列にパッドを入れる文字列。この文字列が長すぎて目標の長さに収まらない場合は、切り捨てられ、左端の部分が適用されます。このパラメータのデフォルト値は &quot; &quot; (U+0020)です。</target>
        </trans-unit>
        <trans-unit id="6eb20efa8147914bead5cc85faabfd37b0a79ce2" translate="yes" xml:space="preserve">
          <source>The string to parse as JSON. See the &lt;a href=&quot;../json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; object for a description of JSON syntax.</source>
          <target state="translated">JSONとして解析する文字列。JSON構文の説明については、&lt;a href=&quot;../json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;オブジェクトを参照してください。</target>
        </trans-unit>
        <trans-unit id="cea9f75c0cabc23fd2957d391e453feb7b34bd80" translate="yes" xml:space="preserve">
          <source>The string used for separating date and time values, for example &quot;&lt;code&gt;/&lt;/code&gt;&quot;, &quot;&lt;code&gt;,&lt;/code&gt;&quot;, &quot;&lt;code&gt;o'clock&lt;/code&gt;&quot;, &quot;&lt;code&gt;de&lt;/code&gt;&quot;, etc.</source>
          <target state="translated">日付と時刻の値を区切るために使用される文字列。たとえば、「 &lt;code&gt;/&lt;/code&gt; 」、「 &lt;code&gt;,&lt;/code&gt; 」、「 &lt;code&gt;o'clock&lt;/code&gt; 」、「 &lt;code&gt;de&lt;/code&gt; 」など。</target>
        </trans-unit>
        <trans-unit id="ece383f4f046e3b10b8fdb40e94943fce8defe5f" translate="yes" xml:space="preserve">
          <source>The string used for separating date and time values, for example &lt;code&gt;&quot;/&quot;&lt;/code&gt;, &lt;code&gt;&quot;,&quot;&lt;/code&gt;, &lt;code&gt;&quot;o'clock&quot;&lt;/code&gt;, &lt;code&gt;&quot;de&quot;&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;code&gt;&quot;/&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;o'clock&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;de&quot;&lt;/code&gt; など、日付と時刻の値を区切るために使用される文字列。</target>
        </trans-unit>
        <trans-unit id="a8dd1fdc2037d5ce588a76e9fb02ac2a82d34809" translate="yes" xml:space="preserve">
          <source>The string used for the day period, for example, &quot;&lt;code&gt;AM&lt;/code&gt;&quot;, &quot;&lt;code&gt;PM&lt;/code&gt;&quot;, &quot;&lt;code&gt;in the morning&lt;/code&gt;&quot;, or &quot;&lt;code&gt;noon&lt;/code&gt;&quot;</source>
          <target state="translated">日中に使用される文字列。たとえば、「 &lt;code&gt;AM&lt;/code&gt; 」、「 &lt;code&gt;PM&lt;/code&gt; 」、「 &lt;code&gt;in the morning&lt;/code&gt; 」、「 &lt;code&gt;noon&lt;/code&gt; 」など。</target>
        </trans-unit>
        <trans-unit id="97c70adf07ed6fe421e6ab3aea9f6e11b32d0bad" translate="yes" xml:space="preserve">
          <source>The string used for the day period, for example, &lt;code&gt;&quot;AM&quot;&lt;/code&gt; or &lt;code&gt;&quot;PM&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;AM&quot;&lt;/code&gt; や &lt;code&gt;&quot;PM&quot;&lt;/code&gt; など、その日の期間に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="be0b08761dbe464661c472ce38eedaf6c1cc4ff3" translate="yes" xml:space="preserve">
          <source>The string used for the day, for example &quot;&lt;code&gt;17&lt;/code&gt;&quot;.</source>
          <target state="translated">その日に使用される文字列。たとえば、「 &lt;code&gt;17&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="eea68f2b6d4f128ec3670c07ba8f52cfffd311f9" translate="yes" xml:space="preserve">
          <source>The string used for the day, for example &lt;code&gt;&quot;17&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;17&quot;&lt;/code&gt; のように、その日に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="bc25a52aff3f7c6a0d4d67847549b26500c03929" translate="yes" xml:space="preserve">
          <source>The string used for the era, for example &quot;&lt;code&gt;BC&lt;/code&gt;&quot; or &quot;&lt;code&gt;AD&lt;/code&gt;&quot;.</source>
          <target state="translated">時代に使用された文字列。たとえば、「 &lt;code&gt;BC&lt;/code&gt; 」や「 &lt;code&gt;AD&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="f7b7a19d8ba4def5ebc35fa32d9269cd27826d41" translate="yes" xml:space="preserve">
          <source>The string used for the era, for example &lt;code&gt;&quot;BC&quot;&lt;/code&gt; or &lt;code&gt;&quot;AD&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;BC&quot;&lt;/code&gt; や &lt;code&gt;&quot;AD&quot;&lt;/code&gt; など、時代に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="f79d6fd831c41d57b96c95e101c66281c431b746" translate="yes" xml:space="preserve">
          <source>The string used for the fractional seconds, for example &quot;&lt;code&gt;0&lt;/code&gt;&quot; or &quot;&lt;code&gt;00&lt;/code&gt;&quot; or &quot;&lt;code&gt;000&lt;/code&gt;&quot;.</source>
          <target state="translated">分数秒に使用される文字列。たとえば、「 &lt;code&gt;0&lt;/code&gt; 」、「 &lt;code&gt;00&lt;/code&gt; 」、「 &lt;code&gt;000&lt;/code&gt; 」など。</target>
        </trans-unit>
        <trans-unit id="6a6ef3343d7ab97a052a951bcbf0fb6535c643a0" translate="yes" xml:space="preserve">
          <source>The string used for the hour, for example &quot;&lt;code&gt;3&lt;/code&gt;&quot; or &quot;&lt;code&gt;03&lt;/code&gt;&quot;.</source>
          <target state="translated">時間に使用される文字列。たとえば、「 &lt;code&gt;3&lt;/code&gt; 」や「 &lt;code&gt;03&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="e759f6fbbacc6f99271187d7be9864bc5915384e" translate="yes" xml:space="preserve">
          <source>The string used for the hour, for example &lt;code&gt;&quot;3&quot;&lt;/code&gt; or &lt;code&gt;&quot;03&quot;&lt;/code&gt;.</source>
          <target state="translated">時間に使用される文字列。たとえば、 &lt;code&gt;&quot;3&quot;&lt;/code&gt; または &lt;code&gt;&quot;03&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccf2ef8f7a58e56c269870e5797a12817d5c67eb" translate="yes" xml:space="preserve">
          <source>The string used for the minute, for example &quot;&lt;code&gt;00&lt;/code&gt;&quot;.</source>
          <target state="translated">分に使用される文字列。たとえば、「 &lt;code&gt;00&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="c164fc6c65c7700fa960520236c816173fcc5617" translate="yes" xml:space="preserve">
          <source>The string used for the minute, for example &lt;code&gt;&quot;00&quot;&lt;/code&gt;.</source>
          <target state="translated">分に使用される文字列（ &lt;code&gt;&quot;00&quot;&lt;/code&gt; など)。</target>
        </trans-unit>
        <trans-unit id="3b36b14f4e096b36f1d0c26e24507d8f07ba49f6" translate="yes" xml:space="preserve">
          <source>The string used for the month, for example &quot;&lt;code&gt;12&lt;/code&gt;&quot;.</source>
          <target state="translated">月に使用される文字列。たとえば、「 &lt;code&gt;12&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="60ec32bec7d9d2a13914ab52ebda2d26f201b9c4" translate="yes" xml:space="preserve">
          <source>The string used for the month, for example &lt;code&gt;&quot;12&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;12&quot;&lt;/code&gt; など、月に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="608518d6e93450affde17214baf1263acfe96d5f" translate="yes" xml:space="preserve">
          <source>The string used for the name of the time zone, for example &quot;&lt;code&gt;UTC&lt;/code&gt;&quot;.</source>
          <target state="translated">タイムゾーンの名前に使用される文字列。たとえば、「 &lt;code&gt;UTC&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="4d19840cd065c09bec79def64ce95d20a60fb6ef" translate="yes" xml:space="preserve">
          <source>The string used for the name of the time zone, for example &lt;code&gt;&quot;UTC&quot;&lt;/code&gt;.</source>
          <target state="translated">タイムゾーンの名前に使用される文字列（ &lt;code&gt;&quot;UTC&quot;&lt;/code&gt; など)。</target>
        </trans-unit>
        <trans-unit id="f8b90ed88f75385a0ed8c49da23d9f1ce6c4a094" translate="yes" xml:space="preserve">
          <source>The string used for the related 4-digit Gregorian year, in the event that the calendar's representation would be a yearName instead of a year, for example &quot;&lt;code&gt;2019&lt;/code&gt;&quot;.</source>
          <target state="translated">カレンダーの表現が年ではなくyearNameになる場合、関連する4桁のグレゴリオ暦の年に使用される文字列（例：「 &lt;code&gt;2019&lt;/code&gt; 」）。</target>
        </trans-unit>
        <trans-unit id="b878597eb72bf49f3302bc588fc8b68d1e8dda28" translate="yes" xml:space="preserve">
          <source>The string used for the second, for example &quot;&lt;code&gt;07&lt;/code&gt;&quot; or &quot;&lt;code&gt;42&lt;/code&gt;&quot;.</source>
          <target state="translated">2番目に使用される文字列。たとえば、「 &lt;code&gt;07&lt;/code&gt; 」または「 &lt;code&gt;42&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="b1d68127d11a219f5babe3c20efc89826607e6f8" translate="yes" xml:space="preserve">
          <source>The string used for the second, for example &lt;code&gt;&quot;07&quot;&lt;/code&gt; or &lt;code&gt;&quot;42&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;07&quot;&lt;/code&gt; や &lt;code&gt;&quot;42&quot;&lt;/code&gt; など、2番目に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="ec32c3f356f986b4bb965742eb3c4a1a8400e8ab" translate="yes" xml:space="preserve">
          <source>The string used for the weekday, for example &quot;&lt;code&gt;M&lt;/code&gt;&quot;, &quot;&lt;code&gt;Monday&lt;/code&gt;&quot;, or &quot;&lt;code&gt;Montag&lt;/code&gt;&quot;.</source>
          <target state="translated">平日に使用される文字列。たとえば、「 &lt;code&gt;M&lt;/code&gt; 」、「 &lt;code&gt;Monday&lt;/code&gt; 」、「 &lt;code&gt;Montag&lt;/code&gt; 」など。</target>
        </trans-unit>
        <trans-unit id="8d38a4ade74d0ab4b893963b67d1cb09d9f2a404" translate="yes" xml:space="preserve">
          <source>The string used for the weekday, for example &lt;code&gt;&quot;M&quot;&lt;/code&gt;, &lt;code&gt;&quot;Monday&quot;&lt;/code&gt;, or &lt;code&gt;&quot;Montag&quot;&lt;/code&gt;.</source>
          <target state="translated">曜日に使用される文字列。たとえば、 &lt;code&gt;&quot;M&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Monday&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;Montag&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="289fe1894f93de36a2f1fc7515520124d0bfaa98" translate="yes" xml:space="preserve">
          <source>The string used for the year, for example &quot;&lt;code&gt;2012&lt;/code&gt;&quot; or &quot;&lt;code&gt;96&lt;/code&gt;&quot;.</source>
          <target state="translated">年に使用される文字列。たとえば、「 &lt;code&gt;2012&lt;/code&gt; 」または「 &lt;code&gt;96&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="ae2ae8cd920d70f01746ef457540b120762ad06a" translate="yes" xml:space="preserve">
          <source>The string used for the year, for example &lt;code&gt;&quot;2012&quot;&lt;/code&gt; or &lt;code&gt;&quot;96&quot;&lt;/code&gt;.</source>
          <target state="translated">年に使用される文字列、たとえば &lt;code&gt;&quot;2012&quot;&lt;/code&gt; や &lt;code&gt;&quot;96&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d89600bb50a07b1d786985460a7feba9ebbbe59e" translate="yes" xml:space="preserve">
          <source>The string used for the yearName in relevant contexts, for example &quot;&lt;code&gt;geng-zi&lt;/code&gt;&quot;</source>
          <target state="translated">関連するコンテキストでyearNameに使用される文字列（例：「 &lt;code&gt;geng-zi&lt;/code&gt; 」）</target>
        </trans-unit>
        <trans-unit id="86421d2891f0d5bb6fd879465cb16df8ec5f0662" translate="yes" xml:space="preserve">
          <source>The string value to search for.</source>
          <target state="translated">検索する文字列の値。</target>
        </trans-unit>
        <trans-unit id="e9bdde92d3cbeffaa082f651f11b497fa77b8fd2" translate="yes" xml:space="preserve">
          <source>The strings to compare against each other.</source>
          <target state="translated">互いに比較するための文字列。</target>
        </trans-unit>
        <trans-unit id="f492cc4dc8b9f08a8ef3581852dc08ee1c45a4bb" translate="yes" xml:space="preserve">
          <source>The structured clone algorithm accepts &lt;code&gt;SharedArrayBuffers&lt;/code&gt; and &lt;code&gt;TypedArrays&lt;/code&gt; mapped onto &lt;code&gt;SharedArrayBuffers&lt;/code&gt;. In both cases, the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object is transmitted to the receiver resulting in a new, private SharedArrayBuffer object in the receiving agent (just as for &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;). However, the shared data block referenced by the two &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects is the same data block, and a side effect to the block in one agent will eventually become visible in the other agent.</source>
          <target state="translated">構造化クローンアルゴリズムは受け入れ &lt;code&gt;SharedArrayBuffers&lt;/code&gt; と &lt;code&gt;TypedArrays&lt;/code&gt; 上にマッピング &lt;code&gt;SharedArrayBuffers&lt;/code&gt; を。どちらの場合も、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトがレシーバーに送信され、結果として、&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の場合&lt;/a&gt;と同様に、受信エージェントに新しいプライベートSharedArrayBufferオブジェクトが生成されます。ただし、2つの &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトによって参照される共有データブロックは同じデータブロックであり、1つのエージェントのブロックに対する副作用は、最終的に他のエージェントに表示されます。</target>
        </trans-unit>
        <trans-unit id="caf06e59dd9d3fd319181700e1588c2227e098f4" translate="yes" xml:space="preserve">
          <source>The subtags identifying languages, scripts, countries (regions), and (rarely used) variants in BCP 47 language tags can be found in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;.</source>
          <target state="translated">BCP 47言語タグの言語、スクリプト、国（地域）、および（まれに使用される）バリアントを&lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;識別するサブタグ&lt;/a&gt;は、IANA言語サブタグレジストリにあります。</target>
        </trans-unit>
        <trans-unit id="a9423bac9c60cd258c03ee904fae2a893cde2301" translate="yes" xml:space="preserve">
          <source>The subtags identifying languages, scripts, regions (including countries), and (rarely used) variants in Unicode BCP 47 locale identifiers are registered in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;. This registry is periodically updated over time, and implementations may not always be up to date, so be careful not to rely too much on tags being universally supported.</source>
          <target state="translated">Unicode BCP 47ロケール識別子の言語、スクリプト、地域（国を含む）、および（めったに使用されない）バリアントを識別する&lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;サブタグ&lt;/a&gt;は、IANA言語サブタグレジストリに登録されます。このレジストリは時間の経過とともに定期的に更新され、実装は常に最新であるとは限らないため、広くサポートされているタグに過度に依存しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="10fabbe43214c771f9b005a691a4b996bf37a503" translate="yes" xml:space="preserve">
          <source>The subtraction assignment operator (&lt;code&gt;-=&lt;/code&gt;) subtracts the value of the right operand from a variable and assigns the result to the variable.</source>
          <target state="translated">減算代入演算子（ &lt;code&gt;-=&lt;/code&gt; ）は、変数から右のオペランドの値を減算し、その結果を変数に代入します。</target>
        </trans-unit>
        <trans-unit id="1d96fc08252b76140c13df72ca13f6fd74626dbc" translate="yes" xml:space="preserve">
          <source>The subtraction assignment operator &lt;strong&gt;subtracts&lt;/strong&gt; the value of the right operand from a variable and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Subtraction&quot;&gt;subtraction operator&lt;/a&gt; for more details.</source>
          <target state="translated">減算代入演算子は、変数から右のオペランドの値を&lt;strong&gt;減算&lt;/strong&gt;し、結果を変数に代入します。詳細については、&lt;a href=&quot;arithmetic_operators#Subtraction&quot;&gt;減算演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="df416191b58199975c31ebffd195c4bc27b8e690" translate="yes" xml:space="preserve">
          <source>The subtraction operator (&lt;code&gt;-&lt;/code&gt;) subtracts the two operands, producing their difference.</source>
          <target state="translated">減算演算子（ &lt;code&gt;-&lt;/code&gt; ）は、2つのオペランドを減算し、それらの差を生成します。</target>
        </trans-unit>
        <trans-unit id="e5a192606cd2379497ef7500778ef0dedd487da3" translate="yes" xml:space="preserve">
          <source>The subtraction operator subtracts the two operands, producing their difference.</source>
          <target state="translated">減算演算子は、2つのオペランドを減算し、その差分を生成します。</target>
        </trans-unit>
        <trans-unit id="e6dc35427b4f1231c395f42c780c2c32dc31571c" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;&lt;em&gt;function&lt;/em&gt;.arguments&lt;/code&gt; is deprecated. The recommended way to access the &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object available within functions is simply to refer to the variable &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構文 &lt;code&gt;&lt;em&gt;function&lt;/em&gt;.arguments&lt;/code&gt; は非推奨です。関数内で使用可能な&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトにアクセスするための推奨される方法は、単に変数&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;を参照することです。</target>
        </trans-unit>
        <trans-unit id="35225de91c22309587e0765dbda7a1b56bc3fa5c" translate="yes" xml:space="preserve">
          <source>The syntax consists of the keyword &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;, a dot, and the identifier &lt;code&gt;meta&lt;/code&gt;. Normally the left-hand side of the dot is the object on which property access is performed, but here &lt;code&gt;import&lt;/code&gt; is not really an object.</source>
          <target state="translated">構文は、キーワード&lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;、ドット、および識別子 &lt;code&gt;meta&lt;/code&gt; で構成されます。通常、ドットの左側はプロパティアクセスが実行されるオブジェクトですが、ここでは &lt;code&gt;import&lt;/code&gt; は実際にはオブジェクトではありません。</target>
        </trans-unit>
        <trans-unit id="661ebe8cbb257036b3bf53968d2ada79c762b25a" translate="yes" xml:space="preserve">
          <source>The tag function can then perform whatever operations on these arguments you wish, and return the manipulated string. (Alternatively, it can return something completely different, as described in one of the following examples.)</source>
          <target state="translated">tag関数は、これらの引数に対して任意の操作を行い、操作された文字列を返します (あるいは、以下の例で説明するように、完全に異なるものを返すこともできます)。(あるいは、以下の例で説明するように、全く異なるものを返すこともできます)。</target>
        </trans-unit>
        <trans-unit id="dccb74fcc0fb4fc59af8e4a4d10de9e91cf03e6f" translate="yes" xml:space="preserve">
          <source>The tangent of the given number.</source>
          <target state="translated">与えられた数の正接。</target>
        </trans-unit>
        <trans-unit id="469f21f213b41d308c8920db480a81cde33a180c" translate="yes" xml:space="preserve">
          <source>The target function to call.</source>
          <target state="translated">呼び出す対象の関数。</target>
        </trans-unit>
        <trans-unit id="7875ceec72aba0e247daa5bcc9e1dd435300c2d4" translate="yes" xml:space="preserve">
          <source>The target object &amp;mdash; what to apply the sources&amp;rsquo; properties to, which is returned after it is modified.</source>
          <target state="translated">ターゲットオブジェクト&amp;mdash;ソースのプロパティを何に適用するか。変更後に返されます。</target>
        </trans-unit>
        <trans-unit id="00cce84c44330816293f399e47c6565e41c09eab" translate="yes" xml:space="preserve">
          <source>The target object from which to get the own keys.</source>
          <target state="translated">自分の鍵を取得する対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4e874cec897bdf6f3133cdf496c41e2ff9d741f9" translate="yes" xml:space="preserve">
          <source>The target object in which to look for the property.</source>
          <target state="translated">プロパティを探す対象となるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="693e84f9011fa479a759c14fb620c6ff19518f89" translate="yes" xml:space="preserve">
          <source>The target object of the WeakRef, or &lt;code&gt;undefined&lt;/code&gt; if the object has been garbage-collected.</source>
          <target state="translated">WeakRefのターゲットオブジェクト、またはオブジェクトがガベージコレクションされている場合は &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="051b09e678e5463dcd53a2c00c66fcc5f1782088" translate="yes" xml:space="preserve">
          <source>The target object of which to get the prototype.</source>
          <target state="translated">プロトタイプを取得する対象オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3bdead44f0d65b55d04c7601b57d65563c409e3b" translate="yes" xml:space="preserve">
          <source>The target object of which to set the prototype.</source>
          <target state="translated">プロトタイプを設定するターゲットオブジェクト。</target>
        </trans-unit>
        <trans-unit id="bf0854843b5e6ba404edf72c5e026e5f2141d555" translate="yes" xml:space="preserve">
          <source>The target object on which to define the property.</source>
          <target state="translated">プロパティを定義するターゲット・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="675a5362df487c69972974a9c10fa55e04caf16c" translate="yes" xml:space="preserve">
          <source>The target object on which to delete the property.</source>
          <target state="translated">プロパティを削除する対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8b8960b4509e85a95deceb884878547ff861b0fd" translate="yes" xml:space="preserve">
          <source>The target object on which to get the property.</source>
          <target state="translated">プロパティを取得するターゲット・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6616a2e8a46edcbbb895a56e27f583fe0a532ade" translate="yes" xml:space="preserve">
          <source>The target object on which to prevent extensions.</source>
          <target state="translated">拡張子を防止する対象オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5a6cbb29e073667475e26ed91074bb4afb428091" translate="yes" xml:space="preserve">
          <source>The target object on which to set the property.</source>
          <target state="translated">プロパティを設定するターゲット・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="74893ee0c71bc46d3b74e6714913b2976a8c1ca1" translate="yes" xml:space="preserve">
          <source>The target object the WeakRef should refer to (also called the &lt;em&gt;referent&lt;/em&gt;).</source>
          <target state="translated">WeakRefが参照する必要のあるターゲットオブジェクト（&lt;em&gt;参照対象&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="ba5e5cc9f03eda883fd2f2097ea97a7f1e889c74" translate="yes" xml:space="preserve">
          <source>The target object to register.</source>
          <target state="translated">登録する対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3dac858a5554f83564f7741da52fdb4a7aaf52dc" translate="yes" xml:space="preserve">
          <source>The target object which to check if it is extensible.</source>
          <target state="translated">拡張性があるかどうかをチェックする対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="ccd29524854cacce5352c71cfb138711774ab1b4" translate="yes" xml:space="preserve">
          <source>The target object.</source>
          <target state="translated">対象となるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="040c0d8b033a7367e4036448381976cfc9922ebe" translate="yes" xml:space="preserve">
          <source>The target of the split operation.</source>
          <target state="translated">分割操作の対象。</target>
        </trans-unit>
        <trans-unit id="7a67583055232db8b491024de029833ccb0310ac" translate="yes" xml:space="preserve">
          <source>The temporal dead zone and &lt;code&gt;typeof&lt;/code&gt;</source>
          <target state="translated">一時的なデッドゾーンと &lt;code&gt;typeof&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af12426e57044936bc5a7828d384453e2f121825" translate="yes" xml:space="preserve">
          <source>The termination condition of a promise determines the &quot;settled&quot; state of the next promise in the chain. Any termination other than a &lt;code&gt;throw&lt;/code&gt; creates a &quot;resolved&quot; state while terminating with a &lt;code&gt;throw&lt;/code&gt; creates a &quot;rejected&quot; state.</source>
          <target state="translated">約束の終了条件は、チェーン内の次の約束の「解決済み」状態を決定します。 &lt;code&gt;throw&lt;/code&gt; 以外の終了は「解決済み」状態を作成し、 &lt;code&gt;throw&lt;/code&gt; 終了すると「拒否」状態を作成します。</target>
        </trans-unit>
        <trans-unit id="824ca534e0a3140303d94cf320dfce9866fe7a67" translate="yes" xml:space="preserve">
          <source>The ternary operator is right-associative, which means it can be &quot;chained&quot; in the following way, similar to an &lt;code&gt;if &amp;hellip; else if &amp;hellip; else if &amp;hellip; else&lt;/code&gt; chain:</source>
          <target state="translated">三項演算子は右結合です。つまり、 &lt;code&gt;if &amp;hellip; else if &amp;hellip; else if &amp;hellip; else&lt;/code&gt; チェーンと同様に、次の方法で「連鎖」できます。</target>
        </trans-unit>
        <trans-unit id="f17ba73f80e0163509c9c072d0ed6e5856bb4cbe" translate="yes" xml:space="preserve">
          <source>The text of the pattern.</source>
          <target state="translated">パターンのテキストです。</target>
        </trans-unit>
        <trans-unit id="e8bf802ef8806ed6f866faf091bb463b602b37d4" translate="yes" xml:space="preserve">
          <source>The text of the regular expression or, as of ES5, another RegExp object (or literal) to copy (the latter for the two RegExp constructor notations only).</source>
          <target state="translated">正規表現のテキスト、または ES5 ではコピーする別の RegExp オブジェクト(またはリテラル)(後者は 2 つの RegExp コンストラクタ表記のみ)。</target>
        </trans-unit>
        <trans-unit id="50666938177ee823dfcefe3edcfba80d5469a3f9" translate="yes" xml:space="preserve">
          <source>The text of the regular expression.</source>
          <target state="translated">正規表現のテキスト。</target>
        </trans-unit>
        <trans-unit id="195791289d43b75e8e708dc661fc4d0ecceca467" translate="yes" xml:space="preserve">
          <source>The third argument is ignored by &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/a&gt;&amp;mdash;but &lt;em&gt;not&lt;/em&gt; the second one! This is the source of possible confusion.</source>
          <target state="translated">3番目の引数は&lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/a&gt;によって無視されますが、2番目の引数は無視され&lt;em&gt;ません&lt;/em&gt;。これが混乱の原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a9c4cc7a071359b493067f03d2d3649785b711c7" translate="yes" xml:space="preserve">
          <source>The third statement assigns the value 95 to the variable &lt;code&gt;year&lt;/code&gt;, representing the year 1995.</source>
          <target state="translated">3番目のステートメントは、1995 &lt;code&gt;year&lt;/code&gt; を表す変数yearに値95を割り当てます。</target>
        </trans-unit>
        <trans-unit id="4e8de670d0da361927bb0beeeb9f6c7b622d64e7" translate="yes" xml:space="preserve">
          <source>The this argument for the call.</source>
          <target state="translated">呼び出しのためのこの引数。</target>
        </trans-unit>
        <trans-unit id="78bf0895bd11812425093c3ff20374b2395fe39e" translate="yes" xml:space="preserve">
          <source>The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.</source>
          <target state="translated">ソートの時間的・空間的な複雑さは実装に依存するため保証できません。</target>
        </trans-unit>
        <trans-unit id="0bc2d6527e1e2ae900dd565b052cea11a754d135" translate="yes" xml:space="preserve">
          <source>The time and space complexity of the sort cannot be guaranteed as it is implementation dependent.</source>
          <target state="translated">ソートの時間的・空間的な複雑さは実装に依存するため保証できません。</target>
        </trans-unit>
        <trans-unit id="4f78316c0b1d0dc9435832753c88fd74921534f2" translate="yes" xml:space="preserve">
          <source>The time formatting style to use when calling &lt;code&gt;format()&lt;/code&gt;. Possible values include:</source>
          <target state="translated">&lt;code&gt;format()&lt;/code&gt; を呼び出すときに使用する時間フォーマットスタイル。可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="bad9736ef06f86e7966289bce2abb4832b000b82" translate="yes" xml:space="preserve">
          <source>The time zone offset returned is the one that applies for the Date that it's called on.</source>
          <target state="translated">返されるタイムゾーンオフセットは、それが呼び出された日付に適用されるものです。</target>
        </trans-unit>
        <trans-unit id="6e8eb90b7012bf77a3d29bc66b2ceddfe35221e7" translate="yes" xml:space="preserve">
          <source>The time zone offset returned is the one that applies for the Date that it's called on. Where the host system is configured for daylight saving, the offset will change depending on the date and time that the Date represents and that daylight saving applies.</source>
          <target state="translated">返されるタイムゾーンオフセットは、それが呼び出された日付に適用されるものです。ホストシステムがサマータイム用に構成されている場合、オフセットは Date が表す日付と時間、およびサマータイムが適用される日付に応じて変わります。</target>
        </trans-unit>
        <trans-unit id="1a39482d94cd1d6256cfed97610b1b642a2ae493" translate="yes" xml:space="preserve">
          <source>The time zone to use. The only value implementations must recognize is &quot;&lt;code&gt;UTC&lt;/code&gt;&quot;; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA time zone database&lt;/a&gt;, such as &quot;&lt;code&gt;Asia/Shanghai&lt;/code&gt;&quot;, &quot;&lt;code&gt;Asia/Kolkata&lt;/code&gt;&quot;, &quot;&lt;code&gt;America/New_York&lt;/code&gt;&quot;.</source>
          <target state="translated">使用するタイムゾーン。実装が認識しなければならない唯一の値は「 &lt;code&gt;UTC&lt;/code&gt; 」です。デフォルトは、ランタイムのデフォルトのタイムゾーンです。実装では、「 &lt;code&gt;Asia/Shanghai&lt;/code&gt; 」、「 &lt;code&gt;Asia/Kolkata&lt;/code&gt; 」、「 &lt;code&gt;America/New_York&lt;/code&gt; 」など、&lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANAタイムゾーンデータベース&lt;/a&gt;のタイムゾーン名も認識される場合があります。</target>
        </trans-unit>
        <trans-unit id="69013b7077c0106667c8e85d0871460c6d1ede7f" translate="yes" xml:space="preserve">
          <source>The time zone to use. The only value implementations must recognize is &lt;code&gt;&quot;UTC&quot;&lt;/code&gt;; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA time zone database&lt;/a&gt;, such as &lt;code&gt;&quot;Asia/Shanghai&quot;&lt;/code&gt;, &lt;code&gt;&quot;Asia/Kolkata&quot;&lt;/code&gt;, &lt;code&gt;&quot;America/New_York&quot;&lt;/code&gt;.</source>
          <target state="translated">使用するタイムゾーン。実装が認識しなければならない唯一の値は &lt;code&gt;&quot;UTC&quot;&lt;/code&gt; です。デフォルトはランタイムのデフォルトのタイムゾーンです。実装では、 &lt;code&gt;&quot;Asia/Shanghai&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Asia/Kolkata&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;America/New_York&quot;&lt;/code&gt; など、&lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANAタイムゾーンデータベース&lt;/a&gt;のタイムゾーン名も認識される場合があります。</target>
        </trans-unit>
        <trans-unit id="733c8e3f5bb06fb45edb56167b6f5498d9a8721b" translate="yes" xml:space="preserve">
          <source>The time-zone offset is the difference, in minutes, from local time to UTC.</source>
          <target state="translated">タイムゾーンのオフセットは、現地時間からUTCまでの差(分)です。</target>
        </trans-unit>
        <trans-unit id="ed347c9f4cd940be64c7f00782838e610c8b23ba" translate="yes" xml:space="preserve">
          <source>The time-zone offset is the difference, in minutes, from local time to UTC. Note that this means that the offset is positive if the local timezone is behind UTC and negative if it is ahead. For example, for time zone UTC+10:00 (Australian Eastern Standard Time, Vladivostok Time, Chamorro Standard Time), -600 will be returned.</source>
          <target state="translated">タイムゾーンのオフセットは、現地時間からUTCまでの差(分)です。これは、ローカルタイムゾーンがUTCより後ろにある場合はオフセットが正になり、前にある場合は負になることを意味することに注意してください。例えば、タイムゾーン UTC+10:00 (オーストラリア東部標準時、ウラジオストク時間、チャモロ標準時)の場合、-600が返されます。</target>
        </trans-unit>
        <trans-unit id="00efe3686b887dff7b80988ac55525f86765dedb" translate="yes" xml:space="preserve">
          <source>The token used with the &lt;a href=&quot;register&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method when registering the target object.</source>
          <target state="translated">ターゲットオブジェクトを&lt;a href=&quot;register&quot;&gt; &lt;code&gt;register&lt;/code&gt; &lt;/a&gt;するときにregisterメソッドで使用されるトークン。</target>
        </trans-unit>
        <trans-unit id="171070a1a95717128abb448f1c027d74df291847" translate="yes" xml:space="preserve">
          <source>The trailing comma also works with &lt;a href=&quot;functions/method_definitions&quot;&gt;method definitions&lt;/a&gt; for classes or objects:</source>
          <target state="translated">末尾のコンマは、クラスまたはオブジェクトの&lt;a href=&quot;functions/method_definitions&quot;&gt;メソッド定義&lt;/a&gt;でも機能します。</target>
        </trans-unit>
        <trans-unit id="d8894cfe4467d5eb790a05c0aee3d5ffaca1c075" translate="yes" xml:space="preserve">
          <source>The trigonometric functions &lt;code&gt;sin()&lt;/code&gt;, &lt;code&gt;cos()&lt;/code&gt;, &lt;code&gt;tan()&lt;/code&gt;, &lt;code&gt;asin()&lt;/code&gt;, &lt;code&gt;acos()&lt;/code&gt;, &lt;code&gt;atan()&lt;/code&gt;, and &lt;code&gt;atan2()&lt;/code&gt; expect (and return) angles in &lt;em&gt;radians&lt;/em&gt;.</source>
          <target state="translated">三角関数 &lt;code&gt;sin()&lt;/code&gt; 、 &lt;code&gt;cos()&lt;/code&gt; 、 &lt;code&gt;tan()&lt;/code&gt; 、 &lt;code&gt;asin()&lt;/code&gt; 、 &lt;code&gt;acos()&lt;/code&gt; 、 &lt;code&gt;atan()&lt;/code&gt; 、および &lt;code&gt;atan2()&lt;/code&gt; は、&lt;em&gt;ラジアン単位の&lt;/em&gt;角度を期待（および返す）します。</target>
        </trans-unit>
        <trans-unit id="45d97445291e7538aaee3d6e5c3e8cfc5d6dee10" translate="yes" xml:space="preserve">
          <source>The truth table for the &lt;code&gt;NOT&lt;/code&gt; operation is:</source>
          <target state="translated">&lt;code&gt;NOT&lt;/code&gt; 演算の真理値表は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="49c35fe922d1c27673a769fdeef8d3dbfc05c91a" translate="yes" xml:space="preserve">
          <source>The truth table for the AND operation is:</source>
          <target state="translated">AND演算の真理値テーブルは</target>
        </trans-unit>
        <trans-unit id="25c9dc8b51247790fae8c040ed4314ec64e477cd" translate="yes" xml:space="preserve">
          <source>The truth table for the OR operation is:</source>
          <target state="translated">OR演算の真理値テーブルは</target>
        </trans-unit>
        <trans-unit id="fae4a6c0e8f2bcde02cab86934cfec4409ce4ad9" translate="yes" xml:space="preserve">
          <source>The truth table for the XOR operation is:</source>
          <target state="translated">XOR演算の真理値テーブルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b30c359a4c613b1c190581117b776bc087a1dc16" translate="yes" xml:space="preserve">
          <source>The two's complement guarantees that the left-most bit is 0 when the number is positive and 1 when the number is negative. Thus, it is called the &lt;em&gt;sign bit&lt;/em&gt;.</source>
          <target state="translated">2の補数は、左端のビットが、数値が正の場合は0、負の場合は1であることを保証します。したがって、これは&lt;em&gt;符号ビット&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f0e6e55a08664fd87f1098bd9485f986f7871d6" translate="yes" xml:space="preserve">
          <source>The type of each array element is either a &lt;a href=&quot;../../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各配列要素のタイプは、&lt;a href=&quot;../../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;いずれかです。</target>
        </trans-unit>
        <trans-unit id="e35aa223fd73eda1f795b991cd0cb3da98fedde9" translate="yes" xml:space="preserve">
          <source>The type of individual arguments can be determined by indexing &lt;code&gt;arguments&lt;/code&gt;:</source>
          <target state="translated">個々の引数のタイプは、引数にインデックスを付けることで決定でき &lt;code&gt;arguments&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="816c3356316c1d8ce4e8a093ff55c5cdfc72e5ca" translate="yes" xml:space="preserve">
          <source>The type to use.</source>
          <target state="translated">使用するタイプです。</target>
        </trans-unit>
        <trans-unit id="51b6a2ef8e29331a08d48d85c1cc207b866ee6df" translate="yes" xml:space="preserve">
          <source>The type to use. Possible values are:</source>
          <target state="translated">使用するタイプ。使用可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2a7eaaa9a5e1205e7f93111a1f880f2d40b548b1" translate="yes" xml:space="preserve">
          <source>The type used (&lt;code&gt;cardinal&lt;/code&gt; or &lt;code&gt;ordinal&lt;/code&gt;).</source>
          <target state="translated">使用されるタイプ（ &lt;code&gt;cardinal&lt;/code&gt; または &lt;code&gt;ordinal&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c37b46bd7b92c7bb3ebf9ecc3f4d45f87e92652c" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;every&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列が &lt;code&gt;every&lt;/code&gt; 呼び出されました。</target>
        </trans-unit>
        <trans-unit id="5298f166f10ed90e1cdd38e5c53e23ec0c73dbe8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;findIndex&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列 &lt;code&gt;findIndex&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="b983755540296d3bf31c620e2154efed50f704b8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;map()&lt;/code&gt; was called upon.</source>
          <target state="translated">型付き配列 &lt;code&gt;map()&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="e38de23fabf4e3d3556dbf8011fd71dea9a9fba8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;map&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列 &lt;code&gt;map&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="c0c164fa750b8ed95b7699fd8459ee95382c5425" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;reduce&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列 &lt;code&gt;reduce&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="075012c9a0aa358b8a4f8937b9444b4c48842acf" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;some&lt;/code&gt; was called upon.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; の型付き配列が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="978e3ed3a911210de2a12e4cf64e4711b6fd57ba" translate="yes" xml:space="preserve">
          <source>The unary negation operator (&lt;code&gt;-&lt;/code&gt;) precedes its operand and negates it.</source>
          <target state="translated">単項否定演算子（ &lt;code&gt;-&lt;/code&gt; ）は、そのオペランドの前にあり、それを否定します。</target>
        </trans-unit>
        <trans-unit id="471489b10792f9a4d00c12f2951c087d0322e2cc" translate="yes" xml:space="preserve">
          <source>The unary negation operator can convert a non-number into a number.</source>
          <target state="translated">単項否定演算子は、非数値を数値に変換することができます。</target>
        </trans-unit>
        <trans-unit id="93256d9b5ee445d4026c265fa2b246dc43bae9bc" translate="yes" xml:space="preserve">
          <source>The unary negation operator converts its operand to Number type and then negates it.</source>
          <target state="translated">単項否定演算子は、そのオペランドをNumber型に変換して否定します。</target>
        </trans-unit>
        <trans-unit id="a2d8c115850a5d12a72f7054b87d2ed428d4640b" translate="yes" xml:space="preserve">
          <source>The unary negation operator precedes its operand and negates it.</source>
          <target state="translated">単項否定演算子は、そのオペランドの前に、そのオペランドを否定します。</target>
        </trans-unit>
        <trans-unit id="85c1e623c8c56b5d0e7aae82855c43904bc84840" translate="yes" xml:space="preserve">
          <source>The unary plus operator (&lt;code&gt;+&lt;/code&gt;) precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already.</source>
          <target state="translated">単項プラス演算子（ &lt;code&gt;+&lt;/code&gt; ）は、そのオペランドの前にあり、そのオペランドに評価されますが、まだ数値に変換されていない場合は、数値に変換しようとします。</target>
        </trans-unit>
        <trans-unit id="0970e3ebe9139b263bea5622849a0f6b003cdc95" translate="yes" xml:space="preserve">
          <source>The unary plus operator converts its operand to Number type.</source>
          <target state="translated">単項プラス演算子は、そのオペランドを数値型に変換します。</target>
        </trans-unit>
        <trans-unit id="470a22fa7fae7b57fb487e03bf1af5364fe8fa03" translate="yes" xml:space="preserve">
          <source>The unary plus operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already. Although unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number. It can convert string representations of integers and floats, as well as the non-string values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;. Integers in both decimal and hexadecimal (&quot;0x&quot;-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;.</source>
          <target state="translated">単項プラス演算子は、そのオペランドの前にあり、そのオペランドに評価されますが、それがまだ数値でない場合は、数値に変換しようとします。単項否定（-）も非数値を変換できますが、単項プラスは、数値に対して他の演算を実行しないため、何かを数値に変換する最も速く好ましい方法です。整数と浮動小数点数の文字列表現、および文字列以外の値 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、および &lt;code&gt;null&lt;/code&gt; を変換できます。 10進数と16進数（ &quot;0x&quot;で始まる）の両方の形式の整数がサポートされています。負の数がサポートされています（16進数はサポートされていません）。特定の値を解析できない場合は、&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;と評価されます。</target>
        </trans-unit>
        <trans-unit id="4f83ba579414ca019c350e99ec5d37604101dd2d" translate="yes" xml:space="preserve">
          <source>The unit formatting style to use in &lt;code&gt;unit&lt;/code&gt; formatting, the defaults is &quot;&lt;code&gt;short&lt;/code&gt;&quot;.</source>
          <target state="translated">で使用するスタイルをフォーマットするユニット &lt;code&gt;unit&lt;/code&gt; の書式設定は、デフォルトは「ある &lt;code&gt;short&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="0fbf20eee3259a21c2d4bc9cce24d7aac92f5247" translate="yes" xml:space="preserve">
          <source>The unit string, such as the &quot;l&quot; or &quot;litres&quot;, depending on how &lt;code&gt;unitDisplay&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;unitDisplay&lt;/code&gt; の指定方法に応じて、「l」や「litres」などの単位文字列。</target>
        </trans-unit>
        <trans-unit id="79112e82698f4cbc7f330d5cd8cbd92785b8830d" translate="yes" xml:space="preserve">
          <source>The unit to use in &lt;code&gt;unit&lt;/code&gt; formatting, Possible values are core unit identifiers, defined in &lt;a href=&quot;http://unicode.org/reports/tr35/tr35-general.html#Unit_Elements&quot;&gt;UTS #35, Part 2, Section 6&lt;/a&gt;. A &lt;a href=&quot;https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier&quot;&gt;subset&lt;/a&gt; of units from the &lt;a href=&quot;https://github.com/unicode-org/cldr/blob/master/common/validity/unit.xml&quot;&gt;full list&lt;/a&gt; was selected for use in ECMAScript. Pairs of simple units can be concatenated with &quot;&lt;code&gt;-per-&lt;/code&gt;&quot; to make a compound unit. There is no default value; if the &lt;code&gt;style&lt;/code&gt; is &quot;&lt;code&gt;unit&lt;/code&gt;&quot;, the &lt;code&gt;unit&lt;/code&gt; property must be provided.</source>
          <target state="translated">&lt;code&gt;unit&lt;/code&gt; 書式設定で使用する単位。可能な値は、&lt;a href=&quot;http://unicode.org/reports/tr35/tr35-general.html#Unit_Elements&quot;&gt;UTS＃35、パート2、セクション6&lt;/a&gt;で定義されているコア単位識別子です。&lt;a href=&quot;https://github.com/unicode-org/cldr/blob/master/common/validity/unit.xml&quot;&gt;全リスト&lt;/a&gt;からユニットの&lt;a href=&quot;https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier&quot;&gt;サブセット&lt;/a&gt;がECMAScriptで使用するために選択されました。単純なユニットのペアを「 &lt;code&gt;-per-&lt;/code&gt; 」と連結して、複合ユニットを作成できます。デフォルト値はありません。場合 &lt;code&gt;style&lt;/code&gt; 「ある &lt;code&gt;unit&lt;/code&gt; 」、 &lt;code&gt;unit&lt;/code&gt; プロパティが提供されなければなりません。</target>
        </trans-unit>
        <trans-unit id="eeb25db635510d6a2e868cd40fb8649c029dbefd" translate="yes" xml:space="preserve">
          <source>The unsigned right shift assignment operator (&lt;em&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/em&gt;) moves the specified amount of bits to the right and assigns the result to the variable.</source>
          <target state="translated">符号なし右シフト代入演算子（&lt;em&gt; &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; &lt;/em&gt;）は、指定されたビット数を右に移動し、結果を変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="59a4d2b2661caed6293860fbd4d244fb09e13a12" translate="yes" xml:space="preserve">
          <source>The unsigned right shift assignment operator moves the specified amount of bits to the right and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Unsigned_right_shift&quot;&gt; unsigned right shift operator&lt;/a&gt; for more details.</source>
          <target state="translated">符号なし右シフト代入演算子は、指定された量のビットを右に移動し、結果を変数に代入します。詳細については、&lt;a href=&quot;bitwise_operators#Unsigned_right_shift&quot;&gt;符号なし右シフト演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="25e024a19a4d67d0856fd45914d89cb216b0fc0c" translate="yes" xml:space="preserve">
          <source>The use case for this syntax over using the dot notation (&lt;code&gt;Array.prototype.values()&lt;/code&gt;) is in a case where you don't know what object is going to be ahead of time. If you have a function that takes an iterator and then iterate over the value, but don't know if that Object is going to have a [Iterable].prototype.values method. This could be a built-in object like &lt;a href=&quot;../string/@@iterator&quot;&gt;String&lt;/a&gt; object or a custom object.</source>
          <target state="translated">ドット表記（ &lt;code&gt;Array.prototype.values()&lt;/code&gt; ）を使用する場合のこの構文の使用例は、どのオブジェクトが事前に使用されるかわからない場合です。イテレータを受け取ってから値を反復処理する関数があるが、そのオブジェクトに[Iterable] .prototype.valuesメソッドがあるかどうかわからない場合。これは、&lt;a href=&quot;../string/@@iterator&quot;&gt;String&lt;/a&gt;オブジェクトやカスタムオブジェクトなどの組み込みオブジェクトである可能性があります。</target>
        </trans-unit>
        <trans-unit id="7a60d03695e2ab45d0e87e8a25df20b17610f271" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial and discouraged. It was never originally included in the ECMAScript language spec, but modern browsers implemented it anyway. Only recently was the &lt;code&gt;__proto__&lt;/code&gt; property standardized by the ECMAScript 2015 specification for compatibility with web browsers, so it will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt;&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt;&lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; の使用は物議を醸し、推奨されていません。もともとECMAScript言語仕様に含まれていませんでしたが、最近のブラウザはとにかくそれを実装しました。 &lt;code&gt;__proto__&lt;/code&gt; プロパティがECMAScript2015仕様によって標準化され、Webブラウザーとの互換性が確保されたのはごく最近のことであるため、将来的にサポートされる予定です。それは賛成で廃止され&lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/getprototypeof&quot;&gt; &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; &lt;/a&gt;（設定、しかしまだ &lt;code&gt;[[Prototype]]&lt;/code&gt; オブジェクトのと、パフォーマンスが懸念される場合は避けるべき遅い操作です）。</target>
        </trans-unit>
        <trans-unit id="267aaa42385e594f47748569e88ec1144f8cbe9f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial, and has been discouraged. It was never originally included in the EcmaScript language spec, but modern browsers decided to implement it anyway. Only recently, the &lt;code&gt;__proto__&lt;/code&gt; property has been standardized in the ECMAScript 2015 language specification for web browsers to ensure compatibility, so will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt;&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt;&lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; の使用については議論の余地があり、推奨されていません。もともとはEcmaScript言語仕様には含まれていませんでしたが、最近のブラウザはとにかくそれを実装することにしました。最近になって、 &lt;code&gt;__proto__&lt;/code&gt; プロパティは、互換性を確保するためにWebブラウザーのECMAScript 2015言語仕様で標準化されたため、将来サポートされる予定です。&lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/getprototypeof&quot;&gt; &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; &lt;/a&gt;の代わりに非推奨になりました（ただし、オブジェクトの &lt;code&gt;[[Prototype]]&lt;/code&gt; の設定は遅い操作なので、パフォーマンスが問題になる場合は避けてください）。</target>
        </trans-unit>
        <trans-unit id="ee0188e046a11f82692b7df5c152e41e5657f66c" translate="yes" xml:space="preserve">
          <source>The used calendar and numbering formats can also be set independently via &lt;code&gt;options&lt;/code&gt; arguments:</source>
          <target state="translated">使用するカレンダーと番号付けの形式は、 &lt;code&gt;options&lt;/code&gt; 引数を使用して個別に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="63096decad056d7f99c64a85a1b5e24a024a4572" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; is written with a literal: &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is not an identifier for a property of the global object, like &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be. Instead, &lt;code&gt;null&lt;/code&gt; expresses a lack of identification, indicating that a variable points to no object. In APIs, &lt;code&gt;null&lt;/code&gt; is often retrieved in a place where an object can be expected but no object is relevant.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; はリテラルnullで書き込まれ &lt;code&gt;null&lt;/code&gt; 。 &lt;code&gt;null&lt;/code&gt; は、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;ように、グローバルオブジェクトのプロパティの識別子ではありません。代わりに、 &lt;code&gt;null&lt;/code&gt; は識別の欠如を表し、変数がオブジェクトを指していないことを示します。APIでは、多くの場合、オブジェクトが期待できる場所に &lt;code&gt;null&lt;/code&gt; が取得されますが、関連するオブジェクトはありません。</target>
        </trans-unit>
        <trans-unit id="85b116be763af0011adcca25c9521457c55df529" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; and is treated as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy&lt;/a&gt; for boolean operations.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; は、オブジェクト値が意図的に存在しないことを表します。これはJavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;の1つであり、ブール演算では&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;偽物&lt;/a&gt;として扱われます。</target>
        </trans-unit>
        <trans-unit id="33b4500099924c787f1bc7d8f8f6e45953665b50" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt;.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; は、オブジェクト値が意図的に存在しないことを表します。JavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;の1つです。</target>
        </trans-unit>
        <trans-unit id="bff8273e82837d0de52f6e70b8fd3d9415c07ae2" translate="yes" xml:space="preserve">
          <source>The value associated with the property (data descriptors only).</source>
          <target state="translated">プロパティに関連付けられた値(データ記述子のみ)。</target>
        </trans-unit>
        <trans-unit id="a67dddbd2bbd0115cca20e5cd07cf3e22cf36da9" translate="yes" xml:space="preserve">
          <source>The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).</source>
          <target state="translated">プロパティに関連付けられた値。有効な JavaScript の値 (数値、オブジェクト、関数など)を指定することができます。</target>
        </trans-unit>
        <trans-unit id="59a3562a0724b93aba945b7a64c8a3d5ba95b25c" translate="yes" xml:space="preserve">
          <source>The value at the given position (&lt;code&gt;typedArray[index]&lt;/code&gt;).</source>
          <target state="translated">指定された位置の値（ &lt;code&gt;typedArray[index]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0af3009ff47cbbfab21300bac505703ea7352b22" translate="yes" xml:space="preserve">
          <source>The value contained in the the current position in the Set. The same value is passed for both arguments.</source>
          <target state="translated">セット内の現在の位置に含まれる値。両方の引数に同じ値が渡されます。</target>
        </trans-unit>
        <trans-unit id="8ee5fc3c0f69f15c01c307dab39bc4d88cd59ac3" translate="yes" xml:space="preserve">
          <source>The value contained inside the global variable &amp;mdash; this can be used to directly set and get the global's value.</source>
          <target state="translated">グローバル変数内に含まれる値&amp;mdash;これは、グローバルの値を直接設定および取得するために使用できます。</target>
        </trans-unit>
        <trans-unit id="af107e5e4fb5b763a2c4290e0643ab535148bffa" translate="yes" xml:space="preserve">
          <source>The value for the &lt;code&gt;&lt;var&gt;fileName&lt;/var&gt;&lt;/code&gt; property on the created &lt;code&gt;Error&lt;/code&gt; object. Defaults to the name of the file containing the code that called the &lt;code&gt;Error()&lt;/code&gt; constructor.</source>
          <target state="translated">作成された &lt;code&gt;Error&lt;/code&gt; オブジェクトの &lt;code&gt;&lt;var&gt;fileName&lt;/var&gt;&lt;/code&gt; プロパティの値。デフォルトは、 &lt;code&gt;Error()&lt;/code&gt; コンストラクターを呼び出したコードを含むファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="a9cb1c6a5215fc06f37fa8507894c62845de04b7" translate="yes" xml:space="preserve">
          <source>The value for the &lt;code&gt;&lt;var&gt;lineNumber&lt;/var&gt;&lt;/code&gt; property on the created &lt;code&gt;Error&lt;/code&gt; object. Defaults to the line number containing the &lt;code&gt;Error()&lt;/code&gt; constructor invocation.</source>
          <target state="translated">作成された &lt;code&gt;Error&lt;/code&gt; オブジェクトの &lt;code&gt;&lt;var&gt;lineNumber&lt;/var&gt;&lt;/code&gt; プロパティの値。デフォルトは、 &lt;code&gt;Error()&lt;/code&gt; コンストラクター呼び出しを含む行番号です。</target>
        </trans-unit>
        <trans-unit id="992ff3c59c8217dbd05be959d8d3c24fa1b74e5f" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;%GeneratorPrototype%&lt;/code&gt;.</source>
          <target state="translated">値は &lt;code&gt;%GeneratorPrototype%&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="709c0fd06926b7c507c3fc1b3ee8b80d5d5acfa2" translate="yes" xml:space="preserve">
          <source>The value is only read-only for primitive values such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;&quot;test&quot;&lt;/code&gt;.</source>
          <target state="translated">この値は、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;&quot;test&quot;&lt;/code&gt; などのプリミティブ値に対してのみ読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="795679041097cce24480b245a846f179c329ac5b" translate="yes" xml:space="preserve">
          <source>The value is the same as &lt;a href=&quot;parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; of the global object.</source>
          <target state="translated">値は、グローバルオブジェクトの&lt;a href=&quot;parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="59cece73f49dc6e713d1fbe3528758aa6ce588d0" translate="yes" xml:space="preserve">
          <source>The value is the same as &lt;a href=&quot;parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; of the global object.</source>
          <target state="translated">値は、グローバルオブジェクトの&lt;a href=&quot;parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="bf40dac0a88dfa9631032d077d57ca183815d42b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&lt;var&gt;bigint&lt;/var&gt;&lt;/code&gt; modulo 2&lt;sup&gt;&lt;code&gt;&lt;var&gt;width&lt;/var&gt;&lt;/code&gt;&lt;/sup&gt; as a signed integer.</source>
          <target state="translated">値 &lt;code&gt;&lt;var&gt;bigint&lt;/var&gt;&lt;/code&gt; モジュロ2&lt;sup&gt; &lt;code&gt;&lt;var&gt;width&lt;/var&gt;&lt;/code&gt; &lt;/sup&gt;の符号付き整数として。</target>
        </trans-unit>
        <trans-unit id="1ecbb2a2e785ca032a2923bfd6808d8db054d15f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&lt;var&gt;bigint&lt;/var&gt;&lt;/code&gt; modulo 2&lt;sup&gt;&lt;code&gt;&lt;var&gt;width&lt;/var&gt;&lt;/code&gt;&lt;/sup&gt; as an unsigned integer.</source>
          <target state="translated">値 &lt;code&gt;&lt;var&gt;bigint&lt;/var&gt;&lt;/code&gt; モジュロ2&lt;sup&gt; &lt;code&gt;&lt;var&gt;width&lt;/var&gt;&lt;/code&gt; &lt;/sup&gt;の符号なし整数として。</target>
        </trans-unit>
        <trans-unit id="2169594e1b3abf56f5cd7c0c31ebbaaaa0dae79b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Date.length&lt;/code&gt; is 7. This is the number of arguments handled by the constructor.</source>
          <target state="translated">&lt;code&gt;Date.length&lt;/code&gt; の値は7です。これは、コンストラクターによって処理される引数の数です。</target>
        </trans-unit>
        <trans-unit id="4a427b820317c84e0876360cc68648a291f62b99" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; is the same as the negative value of the global object's &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">値 &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; とは、グローバルオブジェクトの負の値と同じである&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="7ad4e9812d1ae85de534771e604c469c669fa5e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; is the same as the value of the global object's &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">値 &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; とは、グローバルオブジェクトの値と同じである&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="24c4ee9f0fe214492d89ff0a9f0d1ee0f239ed43" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;RegExp.length&lt;/code&gt; is 2.</source>
          <target state="translated">&lt;code&gt;RegExp.length&lt;/code&gt; の値は2です。</target>
        </trans-unit>
        <trans-unit id="74c763470e952510b30ad9c515467ad8701ab9e0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;dotAll&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;s&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;s&lt;/code&gt;&quot; flag indicates that the dot special character (&quot;&lt;code&gt;.&lt;/code&gt;&quot;) should additionally match the following line terminator (&quot;newline&quot;) characters in a string, which it would not match otherwise:</source>
          <target state="translated">値 &lt;code&gt;dotAll&lt;/code&gt; ある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「IF &lt;code&gt;s&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。 「 &lt;code&gt;s&lt;/code&gt; 」フラグは、ドット特殊文字（「 &lt;code&gt;.&lt;/code&gt; 」）が文字列内の次の行末記号（「改行」）文字とさらに一致する必要があることを示します。これ以外の場合は一致しません。</target>
        </trans-unit>
        <trans-unit id="3d8c65faad19f540a737c41845ed5faf6bc1720f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;global&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag indicates that the regular expression should be tested against all possible matches in a string. A regular expression defined as both &lt;code&gt;global&lt;/code&gt; (&quot;&lt;code&gt;g&lt;/code&gt;&quot;) and &lt;code&gt;sticky&lt;/code&gt; (&quot;&lt;code&gt;y&lt;/code&gt;&quot;) will ignore the &lt;code&gt;global&lt;/code&gt; flag and perform sticky matches.</source>
          <target state="translated">値は &lt;code&gt;global&lt;/code&gt; あり&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「IF &lt;code&gt;g&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。 「 &lt;code&gt;g&lt;/code&gt; 」フラグは、正規表現を文字列内のすべての可能な一致に対してテストする必要があることを示します。 &lt;code&gt;global&lt;/code&gt; （ &quot; &lt;code&gt;g&lt;/code&gt; &quot;）と &lt;code&gt;sticky&lt;/code&gt; （ &quot; &lt;code&gt;y&lt;/code&gt; &quot;）の両方として定義された正規表現は、 &lt;code&gt;global&lt;/code&gt; フラグを無視してスティッキーマッチを実行します。</target>
        </trans-unit>
        <trans-unit id="2c5f64834e9e94e343e9f6e0919b24594b4a8b2d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;ignoreCase&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag indicates that case should be ignored while attempting a match in a string.</source>
          <target state="translated">値 &lt;code&gt;ignoreCase&lt;/code&gt; ははある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「ならば &lt;code&gt;i&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。 「 &lt;code&gt;i&lt;/code&gt; 」フラグは、文字列での一致を試みる間、大文字と小文字を無視する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="a685c128fb38aa442155516a7c8dbad6545a579b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;multiline&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and is true if the &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag was used; otherwise, false. The &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag indicates that a multiline input string should be treated as multiple lines. For example, if &quot;&lt;code&gt;m&lt;/code&gt;&quot; is used, &quot;&lt;code&gt;^&lt;/code&gt;&quot; and &quot;&lt;code&gt;$&lt;/code&gt;&quot; change from matching at only the start or end of the entire string to the start or end of any line within the string.</source>
          <target state="translated">値は &lt;code&gt;multiline&lt;/code&gt; あり&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;および「場合も同様である &lt;code&gt;m&lt;/code&gt; 」フラグを使用しました。それ以外の場合はfalse。「 &lt;code&gt;m&lt;/code&gt; 」フラグは、複数行の入力文字列を複数行として扱う必要があることを示します。たとえば、「 &lt;code&gt;m&lt;/code&gt; 」が使用されている場合、「 &lt;code&gt;^&lt;/code&gt; 」と「 &lt;code&gt;$&lt;/code&gt; 」は、文字列全体の最初または最後のみのマッチングから、文字列内の任意の行の最初または最後に変更されます。</target>
        </trans-unit>
        <trans-unit id="55f7cdcdb9b2ee1b413602a53db1492a7bb28cf1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;obj.first&lt;/code&gt; is confirmed to be non-&lt;code&gt;null&lt;/code&gt; (and non-&lt;code&gt;undefined&lt;/code&gt;) before then accessing the value of &lt;code&gt;obj.first.second&lt;/code&gt;. This prevents the error that would occur if you simply accessed &lt;code&gt;obj.first.second&lt;/code&gt; directly without testing &lt;code&gt;obj.first&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;obj.first&lt;/code&gt; が非であることが確認された &lt;code&gt;null&lt;/code&gt; （および非 &lt;code&gt;undefined&lt;/code&gt; 、その後の値にアクセスする前に） &lt;code&gt;obj.first.second&lt;/code&gt; を。これは単純にアクセスした場合に発生するエラー防止 &lt;code&gt;obj.first.second&lt;/code&gt; テストすることなく、直接 &lt;code&gt;obj.first&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="66ec41c802e7001a78f1b16509dd083319cbe7b8" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;size&lt;/code&gt; is an integer representing how many entries the &lt;code&gt;Map&lt;/code&gt; object has. A set accessor function for &lt;code&gt;size&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;; you can not change this property.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; の値は、 &lt;code&gt;Map&lt;/code&gt; オブジェクトのエントリ数を表す整数です。 &lt;code&gt;size&lt;/code&gt; 設定アクセサ関数は &lt;code&gt;undefined&lt;/code&gt; です。このプロパティは変更できません。</target>
        </trans-unit>
        <trans-unit id="e86dca3fbd0b3bf54891655d51af4b975b20157f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;size&lt;/code&gt; is an integer representing how many entries the &lt;code&gt;Set&lt;/code&gt; object has. A set accessor function for &lt;code&gt;size&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;; you cannot change this property.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; の値は、 &lt;code&gt;Set&lt;/code&gt; オブジェクトのエントリ数を表す整数です。 &lt;code&gt;size&lt;/code&gt; 設定アクセサ関数は &lt;code&gt;undefined&lt;/code&gt; です。このプロパティは変更できません。</target>
        </trans-unit>
        <trans-unit id="4656ba10a86c93d64d47c6d7344086f608769c22" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;sticky&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and true if the &quot;&lt;code&gt;y&lt;/code&gt;&quot; flag was used; otherwise, false. The &quot;&lt;code&gt;y&lt;/code&gt;&quot; flag indicates that it matches only from the index indicated by the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of this regular expression in the target string (and does not attempt to match from any later indexes). A regular expression defined as both &lt;code&gt;sticky&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; ignores the &lt;code&gt;global&lt;/code&gt; flag.</source>
          <target state="translated">値は &lt;code&gt;sticky&lt;/code&gt; ある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;「場合、真 &lt;code&gt;y&lt;/code&gt; 」フラグを使用しました。それ以外の場合はfalse。「 &lt;code&gt;y&lt;/code&gt; 」フラグは、ターゲット文字列内のこの正規表現の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティで示されるインデックスからのみ一致することを示します（以降のインデックスからは一致しません）。 &lt;code&gt;sticky&lt;/code&gt; と &lt;code&gt;global&lt;/code&gt; 両方として定義された正規表現は、 &lt;code&gt;global&lt;/code&gt; フラグを無視します。</target>
        </trans-unit>
        <trans-unit id="53cb066a0b00c5a9dd351ed993a35d82f72a2023" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ac6f3c7766f1963a25c1aa798c181b73ecbbc5c" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;, it can be an object that inherits from &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">ゲッターが検出された場合の &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; への呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;とともに使用する場合、 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; から継承するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="d8bdcf4b90977169bddf14a9adf7133b7dbba906" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a setter is encountered.</source>
          <target state="translated">セッターが検出された場合の &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; への呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="a2eb1aec06ff39190817095f070f51d570788916" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="417434a4e709b850361422f0142eca501ad2853d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;target&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;, it can be an object that inherits from the target.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;target&lt;/code&gt; ゲッターが発生した場合。&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;で使用する場合、ターゲットから継承するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="0afaed19edc70c8ac45928336a8a643ec2b894f1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;target&lt;/code&gt; if a setter is encountered.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;target&lt;/code&gt; セッターが発生した場合。</target>
        </trans-unit>
        <trans-unit id="9e6fecd45df2f4a2ad6b9eecbceab69bbe9a0a0b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;em&gt;&lt;code&gt;target&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;target&lt;/code&gt; &lt;/em&gt;の呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae126c42ae27c396aedfe16bb6ca187f7069b0c0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;unicode&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag was used; otherwise &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag enables various Unicode-related features. With the &quot;u&quot; flag, any Unicode code point escapes will be interpreted as such, for example.</source>
          <target state="translated">値 &lt;code&gt;unicode&lt;/code&gt; ある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「IF &lt;code&gt;u&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。&quot; &lt;code&gt;u&lt;/code&gt; &quot;フラグは、さまざまなUnicode関連の機能を有効にします。たとえば、「u」フラグを使用すると、Unicodeコードポイントエスケープがそのように解釈されます。</target>
        </trans-unit>
        <trans-unit id="7ab647412c5ad3ef19440885055d8e14d398f0bd" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;yield*&lt;/code&gt; expression itself</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 式自体の値</target>
        </trans-unit>
        <trans-unit id="ba39ac25730a8f654bae49a2a26d1203596c89d0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;yield*&lt;/code&gt; expression itself is the value returned by that iterator when it's closed (i.e., when &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">値 &lt;code&gt;yield*&lt;/code&gt; 式自体は、それが閉じていたときにその反復子が返した値である（すなわち、時に &lt;code&gt;done&lt;/code&gt; ている &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8a17dbfd44499f94b3e43c816bf4f59f07edb8c4" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;length&lt;/code&gt; property is 0.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; プロパティの値は0です。</target>
        </trans-unit>
        <trans-unit id="fb7c54c8a4d05764d8d13573a8581e7d617334d5" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;length&lt;/code&gt; property is an integer with a positive sign and a value less than 2 to the 32nd power (2&lt;sup&gt;32&lt;/sup&gt;).</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; プロパティの値は、正の符号と2の32乗（2 &lt;sup&gt;32&lt;/sup&gt;）未満の値を持つ整数です。</target>
        </trans-unit>
        <trans-unit id="b4b98aa8f02d4951ad92b2ef43da39dc12d9e43a" translate="yes" xml:space="preserve">
          <source>The value of the arguments property is normally null if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned.</source>
          <target state="translated">argumentsプロパティの値は、進行中の関数の未解決の呼び出しがない場合(つまり、関数が呼び出されたがまだ返されていない場合)は、通常NULLになります。</target>
        </trans-unit>
        <trans-unit id="90592bbd3cdb1e13a6675e34e8b7c25f36c0f806" translate="yes" xml:space="preserve">
          <source>The value of the current element being processed in the array.</source>
          <target state="translated">配列内で処理されている現在の要素の値。</target>
        </trans-unit>
        <trans-unit id="9033b77c9e690b9b0b893a3d87ae53a8d2aad20c" translate="yes" xml:space="preserve">
          <source>The value of the element</source>
          <target state="translated">要素の値</target>
        </trans-unit>
        <trans-unit id="5a0b37e004bcdda51419bfe3b87b408c5e919ba3" translate="yes" xml:space="preserve">
          <source>The value of the element to add to the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクトに追加する要素の値。</target>
        </trans-unit>
        <trans-unit id="375cb50ac5f8ae6db5bad228fb27242cc2a6613e" translate="yes" xml:space="preserve">
          <source>The value of the element to add to the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトに追加する要素の値。</target>
        </trans-unit>
        <trans-unit id="2bfc2dd23e72701e22341662650b90645eea05b8" translate="yes" xml:space="preserve">
          <source>The value of the given number rounded to the nearest integer.</source>
          <target state="translated">与えられた数値の値は、最も近い整数に丸められます。</target>
        </trans-unit>
        <trans-unit id="83ccae05d0f3bada8984becded60af7a9c6b9684" translate="yes" xml:space="preserve">
          <source>The value of the global is then changed, first to &lt;code&gt;42&lt;/code&gt; using the &lt;code&gt;Global.value&lt;/code&gt; property, and then to 43 using the &lt;code&gt;incGlobal()&lt;/code&gt; function exported out of the &lt;code&gt;global.wasm&lt;/code&gt; module (this adds 1 to whatever value is given to it and then returns the new value).</source>
          <target state="translated">次に、グローバルの値が変更され、最初に &lt;code&gt;Global.value&lt;/code&gt; プロパティを使用して &lt;code&gt;42&lt;/code&gt; に、次に &lt;code&gt;global.wasm&lt;/code&gt; モジュールからエクスポートされた &lt;code&gt;incGlobal()&lt;/code&gt; 関数を使用して43に変更されます（これにより、指定された値に1が追加されます。新しい値を返します）。</target>
        </trans-unit>
        <trans-unit id="8e6b1a6d6df9caa879e4a52b4aef13f1d4aeeca5" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">物件の価値。</target>
        </trans-unit>
        <trans-unit id="89ac72de17924e273431acd0216774b519716d0c" translate="yes" xml:space="preserve">
          <source>The value of the specified &lt;code&gt;&lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; is passed into the &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; as its sole parameter.</source>
          <target state="translated">指定された &lt;code&gt;&lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; の値は、その唯一のパラメーターとして &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="d10369a304b3dabeb9f648e972d408f825afd5d0" translate="yes" xml:space="preserve">
          <source>The value of this property is &quot;Atomics&quot;.</source>
          <target state="translated">このプロパティの値は &quot;Atomics &quot;です。</target>
        </trans-unit>
        <trans-unit id="602deb4fbff480f54ac3487ed10fc319ebc28bc1" translate="yes" xml:space="preserve">
          <source>The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the object has an initial value of &lt;code&gt;false&lt;/code&gt;. All other values, including any object or the string &lt;code&gt;&quot;false&quot;&lt;/code&gt;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">最初のパラメーターとして渡された値は、必要に応じてブール値に変換されます。値が省略されているか、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;-0&lt;/code&gt; 、&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;false&lt;/code&gt; 、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、または空の文字列（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）の場合、オブジェクトの初期値は &lt;code&gt;false&lt;/code&gt; です。オブジェクトや文字列 &lt;code&gt;&quot;false&quot;&lt;/code&gt; を含む他のすべての値は、初期値が &lt;code&gt;true&lt;/code&gt; のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="e8b2fd4ff59e176e9713ab275f18ea741a9453f6" translate="yes" xml:space="preserve">
          <source>The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the object has an initial value of &lt;code&gt;false&lt;/code&gt;. All other values, including any object, an empty array (&lt;code&gt;[]&lt;/code&gt;), or the string &quot;&lt;code&gt;false&lt;/code&gt;&quot;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">最初のパラメーターとして渡された値は、必要に応じてブール値に変換されます。値が省略されているか、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;-0&lt;/code&gt; 、&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;false&lt;/code&gt; 、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、または空の文字列（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）の場合、オブジェクトの初期値は &lt;code&gt;false&lt;/code&gt; です。オブジェクト、空の配列（ &lt;code&gt;[]&lt;/code&gt; ）、または文字列「 &lt;code&gt;false&lt;/code&gt; 」を含む他のすべての値は、初期値が &lt;code&gt;true&lt;/code&gt; のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="c90cef2323c14d826d0917e6adb3845eff127615" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, if supplied. (See below.)</source>
          <target state="translated">コールバックの最後の呼び出しで以前に返された値、または指定されている場合は &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 。（下記参照。）</target>
        </trans-unit>
        <trans-unit id="4b7328daf04c81ab8137722b8b006bf9c6f2c30c" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied (see below).</source>
          <target state="translated">コールバックの最後の呼び出しで以前に返された値、または提供されている場合は、 &lt;code&gt;initialValue&lt;/code&gt; （以下を参照）。</target>
        </trans-unit>
        <trans-unit id="26938a6c3b7c3667cae874428e7b0f973bd8b0f7" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied. (See below.)</source>
          <target state="translated">コールバックの最後の呼び出しで以前に返された値、または提供されている場合は、 &lt;code&gt;initialValue&lt;/code&gt; 。（下記参照。）</target>
        </trans-unit>
        <trans-unit id="e2cfaf0e41d8f6f6ce5c1052fe177cef46e0cd9c" translate="yes" xml:space="preserve">
          <source>The value provided for this properties in the &lt;code&gt;options&lt;/code&gt; argument, if present, or the value requested using the Unicode extension key &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに提供される値（存在する場合）、またはUnicode拡張キー &lt;code&gt;&quot;nu&quot;&lt;/code&gt; を使用して要求された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="18a94ebff46101a79f457e7774fb7d87dfa03126" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument of the constructor or the default value (&lt;code&gt;&quot;conjunction&quot;&lt;/code&gt;). Its value is either &lt;code&gt;&quot;conjunction&quot;&lt;/code&gt;, &lt;code&gt;&quot;disjunction&quot;&lt;/code&gt;, or &lt;code&gt;&quot;unit&quot;&lt;/code&gt;.</source>
          <target state="translated">コンストラクターの &lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値またはデフォルト値（ &lt;code&gt;&quot;conjunction&quot;&lt;/code&gt; ）。その値は、 &lt;code&gt;&quot;conjunction&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;disjunction&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;unit&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="40dea17bdd021869509a07ea2982dcd5a10d780e" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument of the constructor or the default value (&lt;code&gt;&quot;language&quot;&lt;/code&gt;). Its value is either &lt;code&gt;&quot;language&quot;&lt;/code&gt;, &lt;code&gt;&quot;region&quot;&lt;/code&gt;, &lt;code&gt;&quot;script&quot;&lt;/code&gt;, or &lt;code&gt;&quot;currency&quot;&lt;/code&gt;.</source>
          <target state="translated">コンストラクターの &lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値またはデフォルト値（ &lt;code&gt;&quot;language&quot;&lt;/code&gt; ）。その値は、 &lt;code&gt;&quot;language&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;region&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;script&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;currency&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="75d2ea92f1f00b509eee2c695d40c6a4847b00b6" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument of the constructor or the default value (&lt;code&gt;&quot;long&quot;&lt;/code&gt;). Its value is either &lt;code&gt;&quot;long&quot;&lt;/code&gt;, &lt;code&gt;&quot;short&quot;&lt;/code&gt;, or &lt;code&gt;&quot;narrow&quot;&lt;/code&gt;.</source>
          <target state="translated">コンストラクターの &lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値またはデフォルト値（ &lt;code&gt;&quot;long&quot;&lt;/code&gt; ）。その値は、 &lt;code&gt;&quot;long&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;short&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;narrow&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="9f20cffd5ae4255c4f313c33939037ffe91a735a" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument or filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="de95d75fe6586fac00ba95daec6616a3826997c8" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument, if present, or &lt;code&gt;&quot;standard&lt;/code&gt; filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値（存在する場合）、または &lt;code&gt;&quot;standard&lt;/code&gt; がデフォルトとして入力されます。</target>
        </trans-unit>
        <trans-unit id="c6a624e5b221e801ccf876d6f34458fe7dc0e36b" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument, or &lt;code&gt;&quot;auto&quot;&lt;/code&gt; filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値、またはデフォルトとして入力された &lt;code&gt;&quot;auto&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bfa5cff73d788cf10fe3987a3f2f80dc09420ac" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument, or &lt;code&gt;&quot;short&quot;&lt;/code&gt; filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値、またはデフォルトとして &lt;code&gt;&quot;short&quot;&lt;/code&gt; 入力されます。</target>
        </trans-unit>
        <trans-unit id="00ace78027c82083e683fd5612f6dbeecd527621" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument; &lt;a href=&quot;../../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (representing the runtime's default time zone) if none was provided. Warning: Applications should not rely on &lt;a href=&quot;../../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; being returned, as future versions may return a &lt;a href=&quot;../../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; value identifying the runtime&amp;rsquo;s default time zone instead.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値。何も指定されていない場合は&lt;a href=&quot;../../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;（ランタイムのデフォルトのタイムゾーンを表す）。警告：将来のバージョンでは、代わりにランタイムのデフォルトのタイムゾーンを識別する&lt;a href=&quot;../../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;値が返される可能性があるため、アプリケーションは&lt;a href=&quot;../../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されることに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="1f013e6b1352fd1ab657f01903bf623f3e31d692" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument; &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (representing the runtime's default time zone) if none was provided. Warning: Applications should not rely on &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; being returned, as future versions may return a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; value identifying the runtime&amp;rsquo;s default time zone instead.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに提供される値。何も指定されていない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;（ランタイムのデフォルトのタイムゾーンを表す）。警告：将来のバージョンでは、代わりにランタイムのデフォルトのタイムゾーンを識別する&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;値が返される可能性があるため、アプリケーションは&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されることに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="fe71b6c8c691aae9b368d22040f4bfe6f257036d" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the options argument of the constructor or the default value (&lt;code&gt;&quot;code&quot;&lt;/code&gt;). Its value is either &lt;code&gt;&quot;code&quot;&lt;/code&gt; or &lt;code&gt;&quot;none&quot;&lt;/code&gt;.</source>
          <target state="translated">コンストラクターのoptions引数でこのプロパティに指定された値またはデフォルト値（ &lt;code&gt;&quot;code&quot;&lt;/code&gt; ）。その値は &lt;code&gt;&quot;code&quot;&lt;/code&gt; または &lt;code&gt;&quot;none&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="ae8d412b82b4d12d0146bc50d3b2fff727efd317" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.</source>
          <target state="translated">ターゲット・オブジェクト・プロパティが非書き込み可能で構成不可能なデータ・プロパティである場合、プロパティに対して報告される値は、対応するターゲット・オブジェクト・プロパティの値と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="f2b74d883cbc8f81e98c3afe80bd628c71ecc6fb" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable own data property.</source>
          <target state="translated">ターゲット・オブジェクト・プロパティが非書き込み可能で構成不可能な独自データ・プロパティである場合、プロパティに対して報告される値は、対応するターゲット・オブジェクト・プロパティの値と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="4fcc42ec55e6019a35b9e6167deeb0995a7dc524" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be undefined if the corresponding target object property is a non-configurable own accessor property that has &lt;code&gt;undefined&lt;/code&gt; as its &lt;code&gt;[[Get]]&lt;/code&gt; attribute.</source>
          <target state="translated">対応するターゲットオブジェクトプロパティが、 &lt;code&gt;[[Get]]&lt;/code&gt; 属性として &lt;code&gt;undefined&lt;/code&gt; 構成不可能な独自のアクセサープロパティである場合、プロパティについて報告される値は未定義である必要があります。</target>
        </trans-unit>
        <trans-unit id="fa34a691341ce51b61d78e48ec46aa0f5728c3de" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be undefined if the corresponding target object property is non-configurable accessor property that has undefined as its [[Get]] attribute.</source>
          <target state="translated">対応するターゲット・オブジェクト・プロパティが[[Get]]属性としてundefinedを持つ非構成アクセサ・プロパティである場合、プロパティに対して報告される値はundefinedでなければなりません。</target>
        </trans-unit>
        <trans-unit id="a2ca47894ce66a4ebd121f767d42d690831bfec2" translate="yes" xml:space="preserve">
          <source>The value requested using the Unicode extension key &lt;code&gt;&quot;co&quot;&lt;/code&gt;, if it is supported for &lt;code&gt;locale&lt;/code&gt;, or &lt;code&gt;&quot;default&quot;&lt;/code&gt;.</source>
          <target state="translated">Unicode拡張キー &lt;code&gt;&quot;co&quot;&lt;/code&gt; （ &lt;code&gt;locale&lt;/code&gt; でサポートされている場合）または &lt;code&gt;&quot;default&quot;&lt;/code&gt; を使用して要求された値。</target>
        </trans-unit>
        <trans-unit id="0283424a1178d6f4236ac1d8d6034b7ef42cf0bb" translate="yes" xml:space="preserve">
          <source>The value requested using the Unicode extension key &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as a default.</source>
          <target state="translated">Unicode拡張キー &lt;code&gt;&quot;nu&quot;&lt;/code&gt; を使用して要求された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="3fc94ba8a72cb17a2e2242a0dd731579febe1bc3" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;getFullYear()&lt;/code&gt; is an absolute number. For dates between the years 1000 and 9999, &lt;code&gt;getFullYear()&lt;/code&gt; returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.</source>
          <target state="translated">&lt;code&gt;getFullYear()&lt;/code&gt; によって返される値は絶対数です。1000〜9999年の日付の場合、 &lt;code&gt;getFullYear()&lt;/code&gt; は、1995などの4桁の数値を返します。この関数を使用して、年が2000年以降の年に準拠していることを確認します。</target>
        </trans-unit>
        <trans-unit id="6446a7f617b7c923a7cdded70ece6ac9a5479f4b" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;getUTCFullYear()&lt;/code&gt; is an absolute number that is compliant with year-2000, for example, 1995.</source>
          <target state="translated">&lt;code&gt;getUTCFullYear()&lt;/code&gt; によって返される値は、1995年など、2000年に準拠した絶対数です。</target>
        </trans-unit>
        <trans-unit id="4d02fd6a19ea2394d421b081204d7d538e8ddef3" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduce()&lt;/code&gt; in this case would be &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">返される値 &lt;code&gt;reduce()&lt;/code&gt; この場合には、あろう &lt;code&gt;20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="753762dcffa9651103a411c28aba6537e911cd2a" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduce()&lt;/code&gt; would be that of the last callback invocation (&lt;code&gt;10&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; によって返される値は、最後のコールバック呼び出し（ &lt;code&gt;10&lt;/code&gt; ）の値になります。</target>
        </trans-unit>
        <trans-unit id="25eda24a4c47ede90f492bd3eff94112bb092132" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduceRight&lt;/code&gt; this time would be, of course, &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">今回は &lt;code&gt;reduceRight&lt;/code&gt; によって返される値はもちろん &lt;code&gt;20&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db3194ee28a78bcd5cd0e6d78b00827b8f173473" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduceRight&lt;/code&gt; would be that of the last callback invocation (&lt;code&gt;10&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; によって返される値は、最後のコールバック呼び出し（ &lt;code&gt;10&lt;/code&gt; ）の値になります。</target>
        </trans-unit>
        <trans-unit id="775546357ed316cf0984802343215e45cabfd5ab" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the form &lt;code&gt;&lt;var&gt;Www&lt;/var&gt;, &lt;var&gt;dd&lt;/var&gt; &lt;var&gt;Mmm&lt;/var&gt; &lt;var&gt;yyyy&lt;/var&gt; &lt;var&gt;hh&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss&lt;/var&gt; GMT&lt;/code&gt;, Where:</source>
          <target state="translated">返される値 &lt;code&gt;toUTCString()&lt;/code&gt; 形式の文字列であり、 &lt;code&gt;&lt;var&gt;Www&lt;/var&gt;, &lt;var&gt;dd&lt;/var&gt; &lt;var&gt;Mmm&lt;/var&gt; &lt;var&gt;yyyy&lt;/var&gt; &lt;var&gt;hh&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss&lt;/var&gt; GMT&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b313fb8c3da4ab52c40b731bd01d0a296137a71e" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the same format as &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Date.prototype.toString()&lt;/code&gt;&lt;/a&gt; but with a zero timezone offset (</source>
          <target state="translated">返される値 &lt;code&gt;toUTCString()&lt;/code&gt; と同じ形式の文字列である&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Date.prototype.toString()&lt;/code&gt; &lt;/a&gt;（ただし、ゼロタイムゾーンオフセット</target>
        </trans-unit>
        <trans-unit id="f9bdda3fa3097eefa1caa7944df9fc8d71302bea" translate="yes" xml:space="preserve">
          <source>The value that has been stored.</source>
          <target state="translated">保存されている値です。</target>
        </trans-unit>
        <trans-unit id="c9a55cfa4ad9c8fef910bf08d5266b00ea90e690" translate="yes" xml:space="preserve">
          <source>The value that is always passed as &lt;code&gt;this&lt;/code&gt; value when calling the wrapped function.</source>
          <target state="translated">ラップされた関数を呼び出すときに常に &lt;code&gt;this&lt;/code&gt; 値として渡される値。</target>
        </trans-unit>
        <trans-unit id="ac55f175a6f636d5e37287a3f31bb5c06a9fd70f" translate="yes" xml:space="preserve">
          <source>The value that is given as an argument.</source>
          <target state="translated">引数として与えられる値。</target>
        </trans-unit>
        <trans-unit id="b28bf68d03b135b289d89712da3c9911acf64c8f" translate="yes" xml:space="preserve">
          <source>The value that results from the reduction.</source>
          <target state="translated">減った結果の値。</target>
        </trans-unit>
        <trans-unit id="1ba3bb3a5b53e2ce2574ffcb28fc3cbbb4f9f720" translate="yes" xml:space="preserve">
          <source>The value the variable contains. This can be any value, as long as its type matches the variable's data type. If no value is specified, a typed 0 value is used, as specified by the &lt;a href=&quot;https://webassembly.github.io/spec/js-api/#defaultvalue&quot;&gt;&lt;code&gt;DefaultValue&lt;/code&gt; algorithm&lt;/a&gt;.</source>
          <target state="translated">変数に含まれる値。型が変数のデータ型と一致している限り、これは任意の値にすることができます。値が指定されていない場合、&lt;a href=&quot;https://webassembly.github.io/spec/js-api/#defaultvalue&quot;&gt; &lt;code&gt;DefaultValue&lt;/code&gt; アルゴリズムで&lt;/a&gt;指定されているように、タイプされた0の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="565efbb01120b89e014f45606039540d14a469a7" translate="yes" xml:space="preserve">
          <source>The value to be checked.</source>
          <target state="translated">チェックする値です。</target>
        </trans-unit>
        <trans-unit id="392314efaf475fe63083755ee1503c3782e6768c" translate="yes" xml:space="preserve">
          <source>The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function (supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt;, any primitive value passed as &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind &lt;/code&gt;, or if the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;&lt;var&gt;null&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;undefined&lt;/var&gt;&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; for the new function.</source>
          <target state="translated">バインドされた関数が呼び出されたときに、 &lt;code&gt;this&lt;/code&gt; パラメーターとしてターゲット関数 &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; に渡される値。バインドされた関数が&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子を使用して構築されている場合、値は無視されます。使用する際に &lt;code&gt;bind&lt;/code&gt; 内側（コールバックとして供給される）関数を作成する &lt;code&gt;setTimeout&lt;/code&gt; 、として渡された任意のプリミティブ値 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; をオブジェクトに変換されます。引数がに提供されていない場合 &lt;code&gt;bind &lt;/code&gt; 、又は場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; がある &lt;code&gt;&lt;var&gt;null&lt;/var&gt;&lt;/code&gt; または &lt;code&gt;&lt;var&gt;undefined&lt;/var&gt;&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; 実行範囲として扱われる &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 新しい機能のために。</target>
        </trans-unit>
        <trans-unit id="163a204d47e94755d2a8dea42f492f6afec3ade3" translate="yes" xml:space="preserve">
          <source>The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function(supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt;, any primitive value passed as &lt;code&gt;thisArg&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;thisArg&lt;/code&gt; for the new function.</source>
          <target state="translated">バインドされた関数が呼び出されたときに、 &lt;code&gt;this&lt;/code&gt; パラメーターとしてターゲット関数に渡される値。バインドされた関数が&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子を使用して構築されている場合、値は無視されます。使用する際に &lt;code&gt;bind&lt;/code&gt; 内側（コールバックとして供給される）関数を作成する &lt;code&gt;setTimeout&lt;/code&gt; 、として渡された任意のプリミティブ値 &lt;code&gt;thisArg&lt;/code&gt; をオブジェクトに変換されます。引数がに提供されていない場合は &lt;code&gt;bind&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; 実行スコープのは、次のように扱われ &lt;code&gt;thisArg&lt;/code&gt; 新しい機能のために。</target>
        </trans-unit>
        <trans-unit id="dc6855aee9e42fd78307e3cf03f38826e655a959" translate="yes" xml:space="preserve">
          <source>The value to be tested for &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;についてテストされる値。</target>
        </trans-unit>
        <trans-unit id="0b40053d9aa1992f47c698a9a98680425a9a0efe" translate="yes" xml:space="preserve">
          <source>The value to be tested for being a safe integer.</source>
          <target state="translated">安全な整数であるかどうかをテストする値。</target>
        </trans-unit>
        <trans-unit id="aac6f6a6beee410fdb177d08be0e103d2a3014c4" translate="yes" xml:space="preserve">
          <source>The value to be tested for being an integer.</source>
          <target state="translated">整数であるかどうかをテストする値。</target>
        </trans-unit>
        <trans-unit id="59bfce4de0f3bc70770e7f943f9528be413f79ba" translate="yes" xml:space="preserve">
          <source>The value to be tested for finiteness.</source>
          <target state="translated">有限性を検査する値です。</target>
        </trans-unit>
        <trans-unit id="4b826fb647f77daf90366e276f5a2041c3eea0d6" translate="yes" xml:space="preserve">
          <source>The value to be tested.</source>
          <target state="translated">検査対象となる値です。</target>
        </trans-unit>
        <trans-unit id="06b97d18aabb6ae6c63ded596ef86513a1b9ad9a" translate="yes" xml:space="preserve">
          <source>The value to check for equality.</source>
          <target state="translated">等価であるかどうかをチェックする値。</target>
        </trans-unit>
        <trans-unit id="f5893b2f6845ff50da342763ecbcb431372f8e12" translate="yes" xml:space="preserve">
          <source>The value to convert to a JSON string.</source>
          <target state="translated">JSON 文字列に変換する値。</target>
        </trans-unit>
        <trans-unit id="5a8791a2fe96db71d9fb59af600bdadbf784b614" translate="yes" xml:space="preserve">
          <source>The value to parse. If the &lt;code&gt;string&lt;/code&gt; argument is not a string, then it is converted to a string (using the &lt;code&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation). Leading whitespace in the string argument is ignored.</source>
          <target state="translated">解析する値。 &lt;code&gt;string&lt;/code&gt; 引数が文字列でない場合は、文字列に変換されます（ &lt;code&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用）。文字列引数の先頭の空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="c5d68d1d561fee564f3324376066e2e0b9d7856b" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</source>
          <target state="translated">解析する値。この引数が文字列でない場合は、 &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用して引数に変換されます。この引数の先頭の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="761a888194a1d3efba5aa5728509ec1440c00504" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</source>
          <target state="translated">解析する値。この引数が文字列でない場合は、 &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用して引数に変換されます。この引数の先頭の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="06c60cfe7cf7b22fbd2cfac45c0050efe20b3c47" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading whitespace in this argument is ignored.</source>
          <target state="translated">解析する値。この引数が文字列でない場合は、 &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用して引数に変換されます。この引数の先頭の空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="13e09bc79da3ce70e8ee164dd2679c1aae4b77d0" translate="yes" xml:space="preserve">
          <source>The value to pass to the finalizer for this object. This cannot be the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; object.</source>
          <target state="translated">このオブジェクトのファイナライザーに渡す値。これを &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; オブジェクトにすることはできません。</target>
        </trans-unit>
        <trans-unit id="f1c17f51813a132f8c8e2de408d090acbdfc805e" translate="yes" xml:space="preserve">
          <source>The value to remove from &lt;code&gt;&lt;var&gt;mySet&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;mySet&lt;/var&gt;&lt;/code&gt; から削除する値。</target>
        </trans-unit>
        <trans-unit id="6cbb6f2a4cf02d0acc268f73b395f7eaddccb296" translate="yes" xml:space="preserve">
          <source>The value to return.</source>
          <target state="translated">返す値。</target>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="translated">探すべき値。</target>
        </trans-unit>
        <trans-unit id="4725b3f97020ee2d2e6562f946a3c0c74977edbc" translate="yes" xml:space="preserve">
          <source>The value to send to the generator.</source>
          <target state="translated">ジェネレーターに送る値。</target>
        </trans-unit>
        <trans-unit id="54308eaf4f65f985a376010b2fbadf19181c19b2" translate="yes" xml:space="preserve">
          <source>The value to send to the generator. The value will be assigned as a result of a yield expression. i.e in [variable] = yield [expression], the value passed to the .next function will be assigned to [variable]</source>
          <target state="translated">ジェネレータに送る値。例えば、[変数]=yield [expression]の場合、.next関数に渡された値は、[変数]に代入されます。</target>
        </trans-unit>
        <trans-unit id="670cca83deae00a0a91f6dae310c5afe393cab3c" translate="yes" xml:space="preserve">
          <source>The value to set as a &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;. The highest possible value that fits in a signed 64-bit integer is &lt;code&gt;2n ** (64n -1n) - 1n&lt;/code&gt; (&lt;code&gt;9223372036854775807n&lt;/code&gt;). Upon overflow, it will be negative (&lt;code&gt;-9223372036854775808n&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;として設定する値。符号付き64ビット整数に適合する可能な最大値は &lt;code&gt;2n ** (64n -1n) - 1n&lt;/code&gt; &lt;code&gt;9223372036854775807n&lt;/code&gt; （9223372036854775807n）です。オーバーフローすると、負になります（ &lt;code&gt;-9223372036854775808n&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="90f59308fcc4fbc2e7bb5b91b12b376016f59076" translate="yes" xml:space="preserve">
          <source>The value to set as a &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;. The highest possible value that fits in an unsigned 64-bit integer is &lt;code&gt;2n ** 64n - 1n&lt;/code&gt; (&lt;code&gt;18446744073709551615n&lt;/code&gt;). Upon overflow, it will be zero (&lt;code&gt;0n&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;として設定する値。符号なし64ビット整数に収まる最大値は &lt;code&gt;2n ** 64n - 1n&lt;/code&gt; （ &lt;code&gt;18446744073709551615n&lt;/code&gt; ）です。オーバーフローすると、ゼロ（ &lt;code&gt;0n&lt;/code&gt; ）になります。</target>
        </trans-unit>
        <trans-unit id="27af97cf03ff5b42ffc052b39a9abfc7fee345ba" translate="yes" xml:space="preserve">
          <source>The value to set.</source>
          <target state="translated">設定する値です。</target>
        </trans-unit>
        <trans-unit id="e466a461c0d81a1e5a265350b651378eb345c681" translate="yes" xml:space="preserve">
          <source>The value to test for presence in the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトに存在するかどうかをテストする値。</target>
        </trans-unit>
        <trans-unit id="bccbec616a7aa8d8ff02d2d7771872a2f34ef1f6" translate="yes" xml:space="preserve">
          <source>The value to use as &lt;code&gt;this&lt;/code&gt; when calling &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; を呼び出すときに &lt;code&gt;this&lt;/code&gt; として使用する値。</target>
        </trans-unit>
        <trans-unit id="a42096f81c8b700c01a535b75abd018478cad5e6" translate="yes" xml:space="preserve">
          <source>The value which is given as the right hand-side of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="translated">右手側として与えられる値&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;のために...の&lt;/a&gt;又はような関数の引数として&lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; は&lt;/a&gt;、ではない&lt;a href=&quot;../iteration_protocols&quot;&gt;反復可能オブジェクト&lt;/a&gt;。反復可能オブジェクトは、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;などの組み込みの反復可能型、ジェネレータの結果、または&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;反復可能プロトコルを&lt;/a&gt;実装するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="85f284f4600acf33d2c2218b66e9ae87ac534b68" translate="yes" xml:space="preserve">
          <source>The value which is given as the right hand-side of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of&lt;/a&gt;の右側として、または&lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; &lt;/a&gt;などの関数の引数として指定された値は、&lt;a href=&quot;../iteration_protocols&quot;&gt;反復可能なオブジェクト&lt;/a&gt;ではありません。iterableは、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;などの組み込みのiterable型、ジェネレーターの結果、または&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterableプロトコルを&lt;/a&gt;実装するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="7a48c0bceb25d277223c5b39c5f4e6645c8f3d4f" translate="yes" xml:space="preserve">
          <source>The value will be assigned as a result of a &lt;code&gt;yield&lt;/code&gt; expression. For example, in &lt;code&gt;&lt;var&gt;variable&lt;/var&gt; = yield &lt;var&gt;expression&lt;/var&gt;&lt;/code&gt;, the value passed to the &lt;code&gt;.next()&lt;/code&gt; function will be assigned to &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">値は、 &lt;code&gt;yield&lt;/code&gt; 式の結果として割り当てられます。たとえば、 &lt;code&gt;&lt;var&gt;variable&lt;/var&gt; = yield &lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; では、 &lt;code&gt;.next()&lt;/code&gt; 関数に渡された値が &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt; に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="c8d381c8d22bfc0f19c3ff81e2c2a77327ad37df" translate="yes" xml:space="preserve">
          <source>The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">参照を変更する値。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly関数&lt;/a&gt;である必要があります。これは、基礎となるwasm関数のJavaScriptラッパーです。</target>
        </trans-unit>
        <trans-unit id="6a1a15efc64d14b930da0c0f2af03ced19790118" translate="yes" xml:space="preserve">
          <source>The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">参照を変更する値。これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly関数&lt;/a&gt;である必要があります。これは、基になるwasm関数のJavaScriptラッパーです。</target>
        </trans-unit>
        <trans-unit id="e4a5a6582f1f15de8a353319a060dbca049eb56c" translate="yes" xml:space="preserve">
          <source>The value you want to parse.</source>
          <target state="translated">解析したい値。</target>
        </trans-unit>
        <trans-unit id="0ab8d4d846c56300df64218baa13c4a4ebdfb0fd" translate="yes" xml:space="preserve">
          <source>The values of these properties are read-only and modified whenever successful matches are made.</source>
          <target state="translated">これらのプロパティの値は読み取り専用で、マッチが成功するたびに変更されます。</target>
        </trans-unit>
        <trans-unit id="c330d597b3dfd420a395b97922ea4f601cdaf257" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="3b9865fad94fc56ff337c268a776b107ba4a79a0" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are only present if &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;&quot;currency&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。これらのプロパティは、以下の場合にのみ存在している &lt;code&gt;style&lt;/code&gt; ある &lt;code&gt;&quot;currency&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77632140a6d7f81694a32215750f6043951bce51" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are present only if at least one of them was provided in the &lt;code&gt;options&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。これらのプロパティは、少なくとも1つが &lt;code&gt;options&lt;/code&gt; 引数で指定されている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="c00811fc726b80d0206856d7d727f30706a7dc00" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are present only if neither &lt;code&gt;minimumSignificantDigits&lt;/code&gt; nor &lt;code&gt;maximumSignificantDigits&lt;/code&gt; was provided in the &lt;code&gt;options&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。これらのプロパティは、 &lt;code&gt;options&lt;/code&gt; 引数に &lt;code&gt;minimumSignificantDigits&lt;/code&gt; も &lt;code&gt;maximumSignificantDigits&lt;/code&gt; も指定されていない場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="4e548ac0a58e8f8d45f275ef3a15166b64f3a5ec" translate="yes" xml:space="preserve">
          <source>The values requested for these properties in the &lt;code&gt;options&lt;/code&gt; argument or using the Unicode extension keys &lt;code&gt;&quot;kn&quot;&lt;/code&gt; and &lt;code&gt;&quot;kf&quot;&lt;/code&gt; or filled in as defaults. If the implementation does not support these properties, they are omitted.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに要求された値、またはUnicode拡張キー &lt;code&gt;&quot;kn&quot;&lt;/code&gt; と &lt;code&gt;&quot;kf&quot;&lt;/code&gt; か、デフォルトとして入力された値。実装がこれらのプロパティをサポートしない場合、それらは省略されます。</target>
        </trans-unit>
        <trans-unit id="70d2beda49013ccaade06b55b87b79e9a948f83d" translate="yes" xml:space="preserve">
          <source>The values requested using the Unicode extension keys &lt;code&gt;&quot;ca&quot;&lt;/code&gt; and &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as default values.</source>
          <target state="translated">Unicode拡張キー &lt;code&gt;&quot;ca&quot;&lt;/code&gt; と &lt;code&gt;&quot;nu&quot;&lt;/code&gt; を使用して要求された値、またはデフォルト値として入力された値。</target>
        </trans-unit>
        <trans-unit id="f382186cd21e7990d569381dfed57ffbf95cec18" translate="yes" xml:space="preserve">
          <source>The values resulting from format matching between the corresponding properties in the &lt;code&gt;options&lt;/code&gt; argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数の対応するプロパティと、選択したロケールでの日付と時刻のフォーマットに使用可能な組み合わせと表現の間のフォーマットマッチングの結果の値。これらのプロパティの一部は存在しない可能性があり、対応するコンポーネントがフォーマットされた出力に表示されないことを示しています。</target>
        </trans-unit>
        <trans-unit id="d5c1abe3f8184414323335d2b7a8b7ed460cacb2" translate="yes" xml:space="preserve">
          <source>The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt;&lt;code&gt;arrow functions&lt;/code&gt;&lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</source>
          <target state="translated">関数式が割り当てられる変数には、 &lt;code&gt;name&lt;/code&gt; プロパティがあります。別の変数に割り当てられている場合、名前は変更されません。関数名を省略すると、変数名（暗黙の名前）になります。関数名が存在する場合は、関数名（明示的な名前）になります。これは&lt;a href=&quot;../functions/arrow_functions&quot;&gt; &lt;code&gt;arrow functions&lt;/code&gt; &lt;/a&gt;も当てはまります（矢印には名前がないため、変数に暗黙の名前を付けることしかできません）。</target>
        </trans-unit>
        <trans-unit id="fce9939a07c30c8f960444ebda763316f59e32e7" translate="yes" xml:space="preserve">
          <source>The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</source>
          <target state="translated">関数式が割り当てられている変数には、 &lt;code&gt;name&lt;/code&gt; プロパティがあります。別の変数に割り当てられている場合、名前は変更されません。関数名を省略した場合、変数名（暗黙名）になります。関数名が存在する場合、関数名（明示名）になります。これは、&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数に&lt;/a&gt;も適用されます（矢印には名前がないため、変数に暗黙的な名前を付けることしかできません）。</target>
        </trans-unit>
        <trans-unit id="6ae939816326b73951d2be1abd4bc6d262210aa9" translate="yes" xml:space="preserve">
          <source>The variables contain the same string, except that the second string contains uppercase letters. The first &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; method displays &lt;code&gt;19&lt;/code&gt;. But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &quot;&lt;code&gt;cheddar&lt;/code&gt;&quot; is not found in &lt;code&gt;myCapString&lt;/code&gt;, so the second &lt;code&gt;console.log()&lt;/code&gt; method displays &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">2番目の文字列に大文字が含まれていることを除いて、変数には同じ文字列が含まれています。最初の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;19&lt;/code&gt; を表示します。しかしため &lt;code&gt;indexOf()&lt;/code&gt; メソッドは、大文字と小文字が区別され、文字列「 &lt;code&gt;cheddar&lt;/code&gt; 」中に見出されない &lt;code&gt;myCapString&lt;/code&gt; ので、第二 &lt;code&gt;console.log()&lt;/code&gt; メソッドが表示され &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c31d82c3222f305defb3a18cce3f24faea25ba50" translate="yes" xml:space="preserve">
          <source>The way day periods should be expressed. Possible values include: &quot;&lt;code&gt;narrow&lt;/code&gt;&quot;, &quot;&lt;code&gt;short&lt;/code&gt;&quot;, &quot; &lt;code&gt;long&lt;/code&gt;&quot;.</source>
          <target state="translated">日の期間を表現する方法。可能な値には、「 &lt;code&gt;narrow&lt;/code&gt; 」、「 &lt;code&gt;short&lt;/code&gt; 」、「 &lt;code&gt;long&lt;/code&gt; 」が含まれます。</target>
        </trans-unit>
        <trans-unit id="2d6ec2ee3ed38b088ef2a037a36cdd2b64e278fc" translate="yes" xml:space="preserve">
          <source>The well-known &lt;code&gt;&lt;strong&gt;Symbol.iterator&lt;/strong&gt;&lt;/code&gt; symbol specifies the default iterator for an object. Used by &lt;a href=&quot;../../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">よく知られている &lt;code&gt;&lt;strong&gt;Symbol.iterator&lt;/strong&gt;&lt;/code&gt; シンボルは、オブジェクトのデフォルトのイテレータを指定します。&lt;a href=&quot;../../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="b000b5f55890a7aad1048e348b7ab3061cdcc0ff" translate="yes" xml:space="preserve">
          <source>The well-known symbol &lt;code&gt;&lt;strong&gt;Symbol.species&lt;/strong&gt;&lt;/code&gt; specifies a function-valued property that the constructor function uses to create derived objects.</source>
          <target state="translated">よく知られたシンボル &lt;code&gt;&lt;strong&gt;Symbol.species&lt;/strong&gt;&lt;/code&gt; は、コンストラクター関数が派生オブジェクトを作成するために使用する関数値プロパティを指定します。</target>
        </trans-unit>
        <trans-unit id="834521bdfe73ddcdc5fb64cc09c454aa53e0e311" translate="yes" xml:space="preserve">
          <source>The whole string being examined.</source>
          <target state="translated">検査されている文字列全体。</target>
        </trans-unit>
        <trans-unit id="6513ed80efcd6bb03aba0325f5b6374023f42179" translate="yes" xml:space="preserve">
          <source>The wrapped function object</source>
          <target state="translated">ラップされた関数オブジェクト</target>
        </trans-unit>
        <trans-unit id="b098fda995b359e0cd8b60766d82754994697077" translate="yes" xml:space="preserve">
          <source>The x coordinate of the point</source>
          <target state="translated">点のx座標</target>
        </trans-unit>
        <trans-unit id="cd2c7c9b69f12be1895dc37da25b7e1a86d5f87d" translate="yes" xml:space="preserve">
          <source>The y coordinate of the point.</source>
          <target state="translated">点のy座標。</target>
        </trans-unit>
        <trans-unit id="93dea93a508fb79cd213d78a9c05f9219bfcee1a" translate="yes" xml:space="preserve">
          <source>The zero-based index &lt;em&gt;before&lt;/em&gt; which to end extraction. The character at this index will not be included.</source>
          <target state="translated">抽出を終了する&lt;em&gt;前&lt;/em&gt;のゼロベースのインデックス。このインデックスの文字は含まれません。</target>
        </trans-unit>
        <trans-unit id="bf061c0e8764085670c93808d259b0b1537351a9" translate="yes" xml:space="preserve">
          <source>The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt;. (For example, if &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt;, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt;.) If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is not a number after &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number(&lt;var&gt;beginIndex&lt;/var&gt;)&lt;/code&gt;&lt;/a&gt;, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">抽出を開始するゼロベースのインデックス。負の場合、 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; として扱われます。（たとえば、 &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; が &lt;code&gt;-3&lt;/code&gt; の場合、 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt; として扱われます。） &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; が&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number(&lt;var&gt;beginIndex&lt;/var&gt;)&lt;/code&gt; の&lt;/a&gt;後の数値でない場合、 &lt;code&gt;0&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="34484571df4043bcf44cbe6d7da204798ed3b521" translate="yes" xml:space="preserve">
          <source>The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;strLength + beginIndex&lt;/code&gt; where &lt;code&gt;strLength&lt;/code&gt; is the length of the string (for example, if &lt;code&gt;beginIndex&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; it is treated as &lt;code&gt;strLength - 3&lt;/code&gt;). If &lt;code&gt;beginIndex&lt;/code&gt; is greater than or equal to the length of the string, &lt;code&gt;slice()&lt;/code&gt; returns an empty string.</source>
          <target state="translated">抽出を開始するゼロから始まるインデックス。負の場合は、 &lt;code&gt;strLength + beginIndex&lt;/code&gt; として扱われます。ここで、 &lt;code&gt;strLength&lt;/code&gt; は文字列の長さです（たとえば、 &lt;code&gt;beginIndex&lt;/code&gt; が &lt;code&gt;-3&lt;/code&gt; の場合は、 &lt;code&gt;strLength - 3&lt;/code&gt; として扱われます）。 &lt;code&gt;beginIndex&lt;/code&gt; が文字列の長さ以上の場合、 &lt;code&gt;slice()&lt;/code&gt; は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6773e8fa12942c218deb33c58b745ac45e65ebbc" translate="yes" xml:space="preserve">
          <source>The zero-based index of the match in the string.</source>
          <target state="translated">文字列内のマッチのゼロベースのインデックス。</target>
        </trans-unit>
        <trans-unit id="34d44d2490e2fb4772a727440530e67bf85723bf" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt; &lt;strong&gt;for each...in&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; statement&lt;/strong&gt; iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.</source>
          <target state="translated">&lt;code&gt; &lt;strong&gt;for each...in&lt;/strong&gt;&lt;/code&gt; &lt;strong&gt;のステートメントは、&lt;/strong&gt;オブジェクトのすべてのプロパティの値を超える指定された変数を反復します。個別のプロパティごとに、指定されたステートメントが実行されます。 &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b464e820bc4e87bcd6963f6905cbc1a01380e81" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;const&lt;/code&gt; creates a read-only reference to a value. It does &lt;strong&gt;not&lt;/strong&gt; mean the value it holds is immutable, just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 値への読み取り専用の参照を作成します。それが保持する値が不変であることを意味するのでは&lt;strong&gt;なく&lt;/strong&gt;、変数識別子を再割り当てできないことだけです。たとえば、コンテンツがオブジェクトの場合、これはオブジェクトのコンテンツ（たとえば、プロパティ）を変更できることを意味します。</target>
        </trans-unit>
        <trans-unit id="91d49a20203a919f8b5fd6ad03ea774e29460b2d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;import.meta&lt;/code&gt; object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module's URL.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; のオブジェクトは、JavaScriptのモジュールにコンテキスト固有のメタデータを公開します。モジュールのURLなど、モジュールに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="888ceea4a2d5630cdeaeabae5410b8503e85011e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;import.meta&lt;/code&gt; object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; のオブジェクトは、JavaScriptのモジュールにコンテキスト固有のメタデータを公開メタ特性です。これには、モジュールのURLなど、モジュールに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="f22535f791d6fffe0473d15653bcbb327d44f86c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new.target&lt;/code&gt; property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions instantiated with the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; プロパティは、関数やコンストラクタが使用して呼び出されたかどうかを検出することができます&lt;a href=&quot;new&quot;&gt;新しい&lt;/a&gt;演算子を。&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;演算子でインスタンス化されたコンストラクターおよび関数では、 &lt;code&gt;new.target&lt;/code&gt; はコンストラクターまたは関数への参照を返します。通常の関数呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="fed48d0b750f633b0d77e462949f996a2556975a" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new.target&lt;/code&gt; pseudo-property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions invoked using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; 擬似プロパティを使用すると、関数やコンストラクタが使用して呼び出されたかどうかを検出することができます&lt;a href=&quot;new&quot;&gt;新しい&lt;/a&gt;演算子を。&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;演算子を使用して呼び出されるコンストラクターおよび関数では、 &lt;code&gt;new.target&lt;/code&gt; はコンストラクターまたは関数への参照を返します。通常の関数呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b8d285b4cba86a8ce926d2cc13ded2b699b1549b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new&lt;/code&gt; creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; ユーザー定義オブジェクト型のまたはコンストラクタ機能を有する組み込みオブジェクト・タイプのいずれかのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="86abe5c3b9ab6addd5d0545cccfa22bb72009209" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; comma operator&lt;/strong&gt; (&lt;code&gt;,&lt;/code&gt;) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression's final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; loop.</source>
          <target state="translated">&lt;strong&gt;コンマ演算子は&lt;/strong&gt;（ &lt;code&gt;,&lt;/code&gt; ）（左から右へ）、そのオペランドの各々を評価し、最後のオペランドの値を返します。これにより、複数の式が評価される複合式を作成できます。複合式の最終値は、そのメンバー式の右端の値です。これは通常、 &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; ループに複数のパラメーターを提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1f776538492eb864dce17dd7b00fa104f7b12cb5" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; comma operator&lt;/strong&gt; evaluates each of its operands (from left to right) and returns the value of the last operand.</source>
          <target state="translated">&lt;strong&gt;コンマ演算子は&lt;/strong&gt;（左から右へ）、そのオペランドの各々を評価し、最後のオペランドの値を返します。</target>
        </trans-unit>
        <trans-unit id="b5ebca9ecf732c039f7854f5bb81acb03a7f7440" translate="yes" xml:space="preserve">
          <source>Then in the top-level module included in your HTML page, we could have:</source>
          <target state="translated">そして、HTMLページに含まれるトップレベルのモジュールの中に、私たちが持っている可能性があります。</target>
        </trans-unit>
        <trans-unit id="446e8c7e40da60abbd0e6f84bda93b4619c9635d" translate="yes" xml:space="preserve">
          <source>Then let's talk about solutions.</source>
          <target state="translated">では、解決策の話をしましょう。</target>
        </trans-unit>
        <trans-unit id="1cdd5f8c7de109e5949a05658cbe520dce6c688e" translate="yes" xml:space="preserve">
          <source>Then you can rewrite the definition of &lt;code&gt;Car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a &lt;code&gt;Person&lt;/code&gt; object, as follows:</source>
          <target state="translated">次に、次のように、 &lt;code&gt;Car&lt;/code&gt; の定義を書き直して、 &lt;code&gt;Person&lt;/code&gt; オブジェクトを取得する &lt;code&gt;owner&lt;/code&gt; プロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="89551b1acb52a90d894ad75a0e7e84c5d566dcaf" translate="yes" xml:space="preserve">
          <source>Then you can rewrite the definition of &lt;code&gt;car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a person object, as follows:</source>
          <target state="translated">次に、以下のように、 &lt;code&gt;car&lt;/code&gt; の定義を書き換えて、personオブジェクトを取得する &lt;code&gt;owner&lt;/code&gt; プロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="0af9bc404072565e0a6b82529f40e7b3e31a2334" translate="yes" xml:space="preserve">
          <source>Then you register any objects you want a cleanup callback for by calling the `register` method, passing in the object and a *held value* for it:</source>
          <target state="translated">次に、`register`メソッドを呼び出して、クリーンアップコールバックを行いたいオブジェクトを登録し、オブジェクトとそのオブジェクトの *保持する値*を渡します。</target>
        </trans-unit>
        <trans-unit id="2e2c81dd703d2e6ca2b3ff59db7c330e4a38f40d" translate="yes" xml:space="preserve">
          <source>Then, in another script, it is straightforward to import the default export:</source>
          <target state="translated">そして、別のスクリプトでは、デフォルトのエクスポートをインポートするのが簡単です。</target>
        </trans-unit>
        <trans-unit id="d8256d79752173e7d51d23cf0e31f0b346c9b2c9" translate="yes" xml:space="preserve">
          <source>Then, in another script, it will be straightforward to import the default export:</source>
          <target state="translated">そして、別のスクリプトでは、デフォルトのエクスポートをインポートするのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="8477eef984ea4b4878880d1778d1f4463dab4368" translate="yes" xml:space="preserve">
          <source>Thenable objects</source>
          <target state="translated">切り替え可能なオブジェクト</target>
        </trans-unit>
        <trans-unit id="360af7cf702c9b339d2bb0c3a60ae02ebb6027b6" translate="yes" xml:space="preserve">
          <source>There are 2 main types of time keeping conventions (clocks) used around the world: the 12 hour clock and the 24 hour clock. The &lt;code&gt;hourCycle&lt;/code&gt; property makes it easier for JavaScript programmers to access the clock type used by a particular locale. Like other additional locale data, hour cycle type is an &lt;a href=&quot;https://www.unicode.org/reports/tr35/#u_Extension&quot;&gt;extension subtag&lt;/a&gt;, which extends the data contained in a locale string. The hour cycle type can have several different values, which are listed in the table below.</source>
          <target state="translated">世界中で使用されている計時規則（時計）には、主に2つのタイプがあります。12時間制と24時間制です。 &lt;code&gt;hourCycle&lt;/code&gt; のプロパティは、それが簡単にJavaScriptのプログラマは、特定のロケールで使用されるクロックタイプにアクセスできるようになります。他の追加のロケールデータと同様に、時間サイクルタイプは&lt;a href=&quot;https://www.unicode.org/reports/tr35/#u_Extension&quot;&gt;拡張サブタグ&lt;/a&gt;であり、ロケール文字列に含まれるデータを拡張します。時間サイクルタイプには、以下の表にリストされているいくつかの異なる値を指定できます。</target>
        </trans-unit>
        <trans-unit id="d9b4388540b214218d6ebf1d5963566a2d626a47" translate="yes" xml:space="preserve">
          <source>There are 2 ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a literal notation and a constructor. To indicate strings, the parameters to the literal notation do not use quotation marks while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトを作成するには、リテラル表記とコンストラクターの2つの方法があります。文字列を示すために、リテラル表記のパラメーターは引用符を使用しませんが、コンストラクター関数のパラメーターは引用符を使用します。したがって、次の式は同じ正規表現を作成します。</target>
        </trans-unit>
        <trans-unit id="e197589ec19772b96b290295cfa992ed7b6cf9df" translate="yes" xml:space="preserve">
          <source>There are 3 values that the &lt;code&gt;caseFirst&lt;/code&gt; property can have, outlined in the table below.</source>
          <target state="translated">以下の表に概説されているように、 &lt;code&gt;caseFirst&lt;/code&gt; プロパティが持つことができる3つの値があります。</target>
        </trans-unit>
        <trans-unit id="9c934ffa69a2298f5b7b5e35beabe7d61c92a422" translate="yes" xml:space="preserve">
          <source>There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt;. You can't use these. Sorry :(</source>
          <target state="translated">&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;予約キーワードである&lt;/a&gt;変数名がいくつかあります。これらは使用できません。ごめんなさい ：（</target>
        </trans-unit>
        <trans-unit id="5e9900d3962d4ebc1cc24a8b6e55d7cf55a0a691" translate="yes" xml:space="preserve">
          <source>There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserverd keywords&lt;/a&gt;. You can't use these. Sorry :(</source>
          <target state="translated">&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;予約キーワードで&lt;/a&gt;あるいくつかの変数名があります。これらは使用できません。ごめんなさい ：（</target>
        </trans-unit>
        <trans-unit id="6b75accc15d966eb077568ed588a93a43a522ec5" translate="yes" xml:space="preserve">
          <source>There are also a few non-configurable properties built into JavaScript. Maybe you tried to delete a mathematical constant.</source>
          <target state="translated">また、JavaScriptには設定できないプロパティがいくつか組み込まれています。数学的定数を削除しようとしたのかもしれません。</target>
        </trans-unit>
        <trans-unit id="23dcdc49ca1e35ff68fec21bb12a5225fcb5a8f1" translate="yes" xml:space="preserve">
          <source>There are also a few read-only properties built into JavaScript. Maybe you tried to redefine a mathematical constant.</source>
          <target state="translated">JavaScriptに組み込まれた読み取り専用のプロパティもいくつかあります。数学的定数を再定義しようとしたのかもしれません。</target>
        </trans-unit>
        <trans-unit id="c1c9aeb3f2e2f35f5cd7d2044f132e06b0403e9f" translate="yes" xml:space="preserve">
          <source>There are also additional safer (and faster!) alternatives to &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;Function()&lt;/code&gt; for common use-cases.</source>
          <target state="translated">一般的なユースケースでは、 &lt;code&gt;eval()&lt;/code&gt; または &lt;code&gt;Function()&lt;/code&gt; に代わる、より安全な（そしてより高速な）代替手段もあります。</target>
        </trans-unit>
        <trans-unit id="d3de195742efb3163af3380604286f54bfe6b4f8" translate="yes" xml:space="preserve">
          <source>There are also situations where even implementations that normally call cleanup callbacks are unlikely to call them:</source>
          <target state="translated">また、通常はクリーンアップコールバックを呼び出す実装であっても、それを呼び出す可能性が低いという状況もあります。</target>
        </trans-unit>
        <trans-unit id="3f42928e1a27b37ec5b29736a5ff20394e980f7f" translate="yes" xml:space="preserve">
          <source>There are currently no built-in JavaScript objects that have the &lt;code&gt;[Symbol.asyncIterator]&lt;/code&gt; key set by default. However, WHATWG Streams are set to be the first built-in object to be async iterable, with &lt;code&gt;[Symbol.asyncIterator]&lt;/code&gt; recently landing in the spec.</source>
          <target state="translated">現在、 &lt;code&gt;[Symbol.asyncIterator]&lt;/code&gt; キーがデフォルトで設定されている組み込みのJavaScriptオブジェクトはありません。ただし、WHATWG Streamsは、非同期反復可能である最初の組み込みオブジェクトになるように設定されており、 &lt;code&gt;[Symbol.asyncIterator]&lt;/code&gt; が最近仕様に組み込まれました。</target>
        </trans-unit>
        <trans-unit id="3525ab2cab918389a404e06213ec2767c08f0ae0" translate="yes" xml:space="preserve">
          <source>There are different ways to create a copy of an object. The following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</source>
          <target state="translated">オブジェクトのコピーを作成するには、さまざまな方法があります。以下は1つの方法にすぎず、ECMAScript &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;code&gt;Object.*&lt;/code&gt; メタプロパティ関数を使用してArray.prototype.forEach（）がどのように機能するかを説明するために提示されています。</target>
        </trans-unit>
        <trans-unit id="0d29d25bfa36a0a07c4cea3c152fe33c4a7a12ce" translate="yes" xml:space="preserve">
          <source>There are five different types of operations that return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; を返す操作には5つの異なるタイプがあります。</target>
        </trans-unit>
        <trans-unit id="a2282122b60795218104a67f1b8b085262db8b37" translate="yes" xml:space="preserve">
          <source>There are four basic forms for the &lt;code&gt;Date()&lt;/code&gt; constructor:</source>
          <target state="translated">&lt;code&gt;Date()&lt;/code&gt; コンストラクターには4つの基本的な形式があります。</target>
        </trans-unit>
        <trans-unit id="0ef7627759e43c46aa6fde1debf8fc912c56d99e" translate="yes" xml:space="preserve">
          <source>There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second flag. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only five of them in ECMAScript.</source>
          <target state="translated">コードに無効な正規表現フラグがあります。スラッシュで囲まれたパターンで構成される正規表現リテラルでは、フラグは2番目のフラグの後に定義されます。また、&lt;a href=&quot;../global_objects/regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトのコンストラクター関数（2番目のパラメーター）で定義することもできます。正規表現フラグは個別に、または任意の順序で一緒に使用できますが、ECMAScriptには5つしかありません。</target>
        </trans-unit>
        <trans-unit id="0c6b73b421181013c9343cae02a3a74cf6657f5f" translate="yes" xml:space="preserve">
          <source>There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second slash. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only six of them in ECMAScript.</source>
          <target state="translated">コードに無効な正規表現フラグがあります。スラッシュで囲まれたパターンで構成される正規表現リテラルでは、フラグは2番目のスラッシュの後に定義されます。これらは、&lt;a href=&quot;../global_objects/regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトのコンストラクター関数（2番目のパラメーター）でも定義できます。正規表現フラグは、個別に、または任意の順序で一緒に使用できますが、ECMAScriptには6つしかありません。</target>
        </trans-unit>
        <trans-unit id="328306dfa957732254d942f732e2fe78edd08818" translate="yes" xml:space="preserve">
          <source>There are many APIs that accept iterables, for example: &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map([iterable])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/weakmap&quot;&gt;&lt;code&gt;WeakMap([iterable])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/set&quot;&gt;&lt;code&gt;Set([iterable])&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;global_objects/weakset&quot;&gt;&lt;code&gt;WeakSet([iterable])&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">iterableを受け入れる多くのAPIがあります。たとえば、&lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map([iterable])&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;global_objects/weakmap&quot;&gt; &lt;code&gt;WeakMap([iterable])&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;global_objects/set&quot;&gt; &lt;code&gt;Set([iterable])&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;global_objects/weakset&quot;&gt; &lt;code&gt;WeakSet([iterable])&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a19fad7ee3a1c683cf2203ca175b99d3c2e99019" translate="yes" xml:space="preserve">
          <source>There are many APIs that accept iterables. Some examples include:</source>
          <target state="translated">イテレート値を受け付けるAPIはたくさんあります。いくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="f9c6f5cd6a5367cad9d27d056730f43556553be4" translate="yes" xml:space="preserve">
          <source>There are many built-in functions in need of a (callback) function. You will have to provide a function in order to have these methods working properly:</source>
          <target state="translated">(コールバック)関数を必要とする多くの組み込み関数があります。これらのメソッドを正しく動作させるためには、関数を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d086eb6393ae332077e3f5864edfd84eba69f01" translate="yes" xml:space="preserve">
          <source>There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt;. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt;&lt;code&gt;Reflect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt;&lt;code&gt;Atomics&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;new&lt;/code&gt; を使用して構築できるグローバルオブジェクトは多数あります。ただし、一部のグローバルオブジェクトはそうではなく、それらのプロパティとメソッドは静的です。次のJavaScript標準組み込みオブジェクトはコンストラクターではありません：&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/reflect&quot;&gt; &lt;code&gt;Reflect&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/atomics&quot;&gt; &lt;code&gt;Atomics&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c2ac8cc4acc6e241d016d55aa566b4aa3cdd5b5" translate="yes" xml:space="preserve">
          <source>There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt;. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt;&lt;code&gt;Reflect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/SIMD&quot;&gt;&lt;code&gt;SIMD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt;&lt;code&gt;Atomics&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; など&lt;/a&gt;、 &lt;code&gt;new&lt;/code&gt; を使用して構築可能な多くのグローバルオブジェクトがあります。ただし、一部のグローバルオブジェクトはそうではなく、そのプロパティとメソッドは静的です。次のJavaScript標準組み込みオブジェクトはコンストラクタではありません：&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/reflect&quot;&gt; &lt;code&gt;Reflect&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/SIMD&quot;&gt; &lt;code&gt;SIMD&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/atomics&quot;&gt; &lt;code&gt;Atomics&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="693c279c59ce837d109a798ef270590b0da65569" translate="yes" xml:space="preserve">
          <source>There are multiple options to fix this error. Check what was intended to be achieved with the constant in question.</source>
          <target state="translated">このエラーを修正するには、複数のオプションがあります。問題の定数で何を達成することを意図していたかを確認してください。</target>
        </trans-unit>
        <trans-unit id="ae37fb979bea6740ce70fa124f14a2bebac08325" translate="yes" xml:space="preserve">
          <source>There are no keys in &lt;code&gt;Set&lt;/code&gt; objects, however, so the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;. This is to make it consistent with other &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;Set&lt;/code&gt; オブジェクトにはキーがないため、最初の2つの引数は両方とも&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; に&lt;/a&gt;含まれる&lt;strong&gt;値&lt;/strong&gt;です。これは、&lt;a href=&quot;../map/foreach&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array&lt;/code&gt; の&lt;/a&gt;他の &lt;code&gt;forEach()&lt;/code&gt; メソッドとの一貫性を保つためです。</target>
        </trans-unit>
        <trans-unit id="6607743e80788e12daa18af41a3e436f3282e40b" translate="yes" xml:space="preserve">
          <source>There are no keys in &lt;code&gt;Set&lt;/code&gt; objects. However, the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, so that the callback function is consistent with the &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトにはキーがありません。ただし、最初の2つの引数はどちらも&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;に含まれる&lt;strong&gt;値&lt;/strong&gt;であるため、コールバック関数は&lt;a href=&quot;../map/foreach&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;forEach()&lt;/code&gt; メソッドと整合性があります。</target>
        </trans-unit>
        <trans-unit id="3d5d1af1c0e36eebedace34f6ce7e6c0df713d90" translate="yes" xml:space="preserve">
          <source>There are only five valid regular expression flags.</source>
          <target state="translated">有効な正規表現フラグは5つだけです。</target>
        </trans-unit>
        <trans-unit id="ac2b0c8431e04307419d31c94f79361f6ff31325" translate="yes" xml:space="preserve">
          <source>There are only six valid regular expression flags.</source>
          <target state="translated">有効な正規表現フラグは6つしかありません。</target>
        </trans-unit>
        <trans-unit id="7d10844d61cc30ce621c0ec05519562750155632" translate="yes" xml:space="preserve">
          <source>There are several differences between class expressions and &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;, however:</source>
          <target state="translated">ただし、クラス式と&lt;a href=&quot;../statements/class&quot;&gt;クラスステートメント&lt;/a&gt;にはいくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="da9f3d69fb3ca5669544de1d84f843d8aec9af8d" translate="yes" xml:space="preserve">
          <source>There are several methods available to obtain a date in various formats, as well as to perform time zone conversions. Particularly useful are the functions that output the date and time in Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. (This time is historically known as &lt;em&gt;Greenwich Mean Time&lt;/em&gt;, as UTC lies along the meridian that includes London&amp;mdash;and nearby Greenwich&amp;mdash;in the United Kingdom.) The user's device provides the local time.</source>
          <target state="translated">さまざまな形式で日付を取得したり、タイムゾーン変換を実行したりするには、いくつかの方法があります。特に便利なのは、協定世界時（UTC）で日付と時刻を出力する関数です。これは、世界標準時で定義されているグローバル標準時です。（UTCは英国のロンドン（および近くのグリニッジ）を含む子午線に沿っているため、この時間は歴史的に&lt;em&gt;グリニッジ標準時&lt;/em&gt;として知られています。）ユーザーのデバイスが現地時間を提供します。</target>
        </trans-unit>
        <trans-unit id="2b8060ffb49f99b70454ca7c20d1536cfed320ba" translate="yes" xml:space="preserve">
          <source>There are several ways to define functions:</source>
          <target state="translated">関数を定義する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f46fa20df26a28f3afafec0caf95aacff7634c5f" translate="yes" xml:space="preserve">
          <source>There are three main differences between rest parameters and the &lt;a href=&quot;arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">残りのパラメーターと&lt;a href=&quot;arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトには、主に3つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="cef9fc9ad4d99bdf9fc9094a7d87693bc809f91e" translate="yes" xml:space="preserve">
          <source>There are two different types of export, &lt;strong&gt;named&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt;. You can have multiple named exports per module but only one default export. Each type corresponds to one of the above syntax:</source>
          <target state="translated">&lt;strong&gt;名前付き&lt;/strong&gt;と&lt;strong&gt;デフォルトの&lt;/strong&gt; 2つの異なるタイプのエクスポート&lt;strong&gt;が&lt;/strong&gt;あり&lt;strong&gt;ます&lt;/strong&gt;。モジュールごとに複数の名前付きエクスポートを作成できますが、デフォルトのエクスポートは1つだけです。各タイプは、上記の構文のいずれかに対応しています。</target>
        </trans-unit>
        <trans-unit id="3ddee455cf2360e71a5ca1f1e12008d3d2cfa4aa" translate="yes" xml:space="preserve">
          <source>There are two protocols: The &lt;a href=&quot;#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt; and the &lt;a href=&quot;#The_iterator_protocol&quot;&gt;iterator protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#The_iterable_protocol&quot;&gt;プロトコル&lt;/a&gt;には、反復可能プロトコルと反復プロトコルの 2つがあり&lt;a href=&quot;#The_iterator_protocol&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0c76d53ebd5426a3fa7bc5f62eec9a68003babb" translate="yes" xml:space="preserve">
          <source>There are two types of exports:</source>
          <target state="translated">輸出には2種類あります。</target>
        </trans-unit>
        <trans-unit id="a5f5403695ad4b2c5ef25a3e77d3c0edf0e80b0f" translate="yes" xml:space="preserve">
          <source>There are two ways to access an individual character in a string. The first is the &lt;a href=&quot;string/charat&quot;&gt;&lt;code&gt;charAt()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">文字列内の個々の文字にアクセスするには、2つの方法があります。1つ目は&lt;a href=&quot;string/charat&quot;&gt; &lt;code&gt;charAt()&lt;/code&gt; &lt;/a&gt;メソッドです。</target>
        </trans-unit>
        <trans-unit id="ff0f992d892480fe8b54b8c31c3b84480f99798b" translate="yes" xml:space="preserve">
          <source>There are two ways to access properties: &lt;em&gt;dot notation&lt;/em&gt; and &lt;em&gt;bracket notation&lt;/em&gt;.</source>
          <target state="translated">プロパティにアクセスするには、&lt;em&gt;ドット表記&lt;/em&gt;と&lt;em&gt;ブラケット表記の&lt;/em&gt;2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="3bc1100e82567e2f208fe7a12e55d415075ed582" translate="yes" xml:space="preserve">
          <source>There are two ways to access properties: dot notation and bracket notation.</source>
          <target state="translated">プロパティにアクセスするには、ドット表記とブラケット表記の2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="e2613c11b0a9e89514dcfe56d5a9e17dd865f6da" translate="yes" xml:space="preserve">
          <source>There are two ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a &lt;em&gt;literal notation&lt;/em&gt; and a &lt;em&gt;constructor&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトを作成するには、&lt;em&gt;リテラル表記&lt;/em&gt;と&lt;em&gt;コンストラクターの&lt;/em&gt;2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d9eac4d67471374ce0fca103ca47a518c3f5d80f" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB).</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得するには2つの方法があります。最初の方法は、JavaScriptから構築することです。次の例では、初期サイズが10ページ（640KiB）、最大サイズが100ページ（6.4MiB）の新しいWebAssembly Memoryインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="1339fcd22494edb562a51e8cd16fa25d09718902" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB). Its &lt;code&gt;&lt;a href=&quot;buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; property will return an &lt;code&gt;&lt;a href=&quot;../../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得する方法は2つあります。最初の方法は、JavaScriptから構築することです。次の例では、初期サイズが10ページ（640KiB）、最大サイズが100ページ（6.4MiB）の新しいWebAssemblyメモリインスタンスを作成します。その &lt;code&gt;&lt;a href=&quot;buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; プロパティは &lt;code&gt;&lt;a href=&quot;../../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="401d6e16400c1f5eb29b5ace1859174bc801d65c" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB). Its &lt;code&gt;&lt;a href=&quot;memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; property will return an &lt;code&gt;&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得する方法は2つあります。最初の方法は、JavaScriptから構築することです。次の例では、初期サイズが10ページ（640KiB）、最大サイズが100ページ（6.4MiB）の新しいWebAssemblyメモリインスタンスを作成します。その &lt;code&gt;&lt;a href=&quot;memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; プロパティは &lt;code&gt;&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="08103d657e3ab1660bea7f1345f275c3a3040e73" translate="yes" xml:space="preserve">
          <source>There can be only one ...restParam.</source>
          <target state="translated">1つだけ...restParamがあります。</target>
        </trans-unit>
        <trans-unit id="f78ff8e98e3ceb773092982187159bbba9b6d20d" translate="yes" xml:space="preserve">
          <source>There can be only one special method with the name &quot;&lt;code&gt;constructor&lt;/code&gt;&quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">クラスには、「 &lt;code&gt;constructor&lt;/code&gt; 」という名前の特別なメソッドが1つだけ存在できます。クラスに &lt;code&gt;constructor&lt;/code&gt; メソッドが複数回出現すると、&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="8cecd685f70850c0f03a58c949aa80ac6c0bdf27" translate="yes" xml:space="preserve">
          <source>There can be only one special method with the name &quot;constructor&quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">クラスには、「コンストラクタ」という名前の特別なメソッドを1つだけ含めることができます。クラス内に &lt;code&gt;constructor&lt;/code&gt; メソッドが複数出現すると、&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="966e916d083f8a8c8e09515513f3abbf40caae80" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</source>
          <target state="translated">名前を必要とする&lt;a href=&quot;../statements/function&quot;&gt;関数ステートメント&lt;/a&gt;がコードにあります。関数がどのように定義されているか、名前を付ける必要があるかどうか、問題の関数が関数式、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;である必要があるかどうか、または関数コードがこのコンテキストに正しく配置されているかどうかを確認する必要があります。。</target>
        </trans-unit>
        <trans-unit id="90808877b45c5bd07e9b7ced7576246800e49da6" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</source>
          <target state="translated">コードには、名前を必要とする&lt;a href=&quot;../statements/function&quot;&gt;関数ステートメント&lt;/a&gt;があります。関数がどのように定義されているか、その名前を指定する必要があるかどうか、問題の関数が関数式、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;である必要があるかどうか、または関数コードがこのコンテキストに正しく配置されているかどうかを確認する必要があります。。</target>
        </trans-unit>
        <trans-unit id="5828690653ee4c273ebe5eabccc86bcf251e5ace" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; constructor with at least two arguments passed in the code. The last argument is the source code for the new function you're creating. All the rest make up your new function's argument list.</source>
          <target state="translated">ある &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; のコードに渡された少なくとも二つの引数を持つコンストラクタが。最後の引数は、作成する新しい関数のソースコードです。残りはすべて、新しい関数の引数リストを構成します。</target>
        </trans-unit>
        <trans-unit id="36e983a9e9bfbb388d7bc8a8b42ff6aaf41e7557" translate="yes" xml:space="preserve">
          <source>There is a deprecated source map syntax in a JavaScript source.</source>
          <target state="translated">JavaScriptソースには、非推奨のソースマップ構文があります。</target>
        </trans-unit>
        <trans-unit id="dad988a3dad8edbdac623e474ca021d682a19413" translate="yes" xml:space="preserve">
          <source>There is a distinction between the function name and the variable the function is assigned to. The function name cannot be changed, while the variable the function is assigned to can be reassigned. The function name can be used only within the function's body. Attempting to use it outside the function's body results in an error (or &lt;code&gt;undefined&lt;/code&gt; if the function name was previously declared via a &lt;code&gt;var&lt;/code&gt; statement). For example:</source>
          <target state="translated">関数名とその関数が割り当てられている変数には違いがあります。関数名は変更できませんが、関数が割り当てられている変数は再割り当てできます。関数名は、関数の本体内でのみ使用できます。関数の本体の外で使用しようとすると、エラーになります（または、関数名が以前に &lt;code&gt;var&lt;/code&gt; ステートメントで宣言されている場合は、 &lt;code&gt;undefined&lt;/code&gt; なります）。例えば：</target>
        </trans-unit>
        <trans-unit id="eef3629e677fb9eb1f15308be8de9f061c6ef012" translate="yes" xml:space="preserve">
          <source>There is a mistake in the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma, for example. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.</source>
          <target state="translated">&lt;a href=&quot;../operators/object_initializer&quot;&gt;オブジェクト初期化子の&lt;/a&gt;構文にどこかに誤りがあります。実際には、中括弧が欠落している可能性がありますが、例えば、コンマが欠落している可能性もあります。また、閉じ中括弧または括弧が正しい順序になっているかどうかを確認します。コードを少しインデントしたりフォーマットしたりすると、ジャングルを見通せるようになります。</target>
        </trans-unit>
        <trans-unit id="5bc3b0d19ead633f8047ed968b70ba512ec3dd88" translate="yes" xml:space="preserve">
          <source>There is a more usage oriented way to think of &lt;code&gt;isNaN()&lt;/code&gt;: If &lt;code&gt;isNaN(x)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, you can use &lt;code&gt;x&lt;/code&gt; in an arithmetic expression not making the expression return &lt;code&gt;NaN&lt;/code&gt;. If it returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; will make every arithmetic expression return &lt;code&gt;NaN&lt;/code&gt;. This means that in JavaScript, &lt;code&gt;isNaN(x) == true&lt;/code&gt; is equivalent to &lt;code&gt;x - 0&lt;/code&gt; returning &lt;code&gt;NaN&lt;/code&gt; (though in JavaScript &lt;code&gt;x - 0 == NaN&lt;/code&gt; always returns false, so you can't test for it). Actually, &lt;code&gt;isNaN(x)&lt;/code&gt;, &lt;code&gt;isNaN(x - 0)&lt;/code&gt;, &lt;code&gt;isNaN(Number(x))&lt;/code&gt;, &lt;code&gt;Number.isNaN(x - 0)&lt;/code&gt;, and &lt;code&gt;Number.isNaN(Number(x))&lt;/code&gt; always return the same and in JavaScript &lt;code&gt;isNaN(x)&lt;/code&gt; is just the shortest possible form to express each of these terms.</source>
          <target state="translated">&lt;code&gt;isNaN()&lt;/code&gt; の使用法を重視する方法が他にもあり &lt;code&gt;isNaN(x)&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返す場合、算術式で &lt;code&gt;x&lt;/code&gt; を使用して、式が &lt;code&gt;NaN&lt;/code&gt; を返さないようにすることができます。 &lt;code&gt;true&lt;/code&gt; を返す場合、 &lt;code&gt;x&lt;/code&gt; はすべての算術式に &lt;code&gt;NaN&lt;/code&gt; を返します。つまり、JavaScriptでは、 &lt;code&gt;isNaN(x) == true&lt;/code&gt; は &lt;code&gt;x - 0&lt;/code&gt; &lt;code&gt;NaN&lt;/code&gt; を返すのと同じです（ただし、JavaScriptでは &lt;code&gt;x - 0 == NaN&lt;/code&gt; 常にfalseを返すため、テストできません）。実際には、 &lt;code&gt;isNaN(x)&lt;/code&gt; 、 &lt;code&gt;isNaN(x - 0)&lt;/code&gt; 、 &lt;code&gt;isNaN(Number(x))&lt;/code&gt; 、 &lt;code&gt;Number.isNaN(x - 0)&lt;/code&gt; 、および &lt;code&gt;Number.isNaN(Number(x))&lt;/code&gt; は常に同じ値を返し、JavaScriptでは &lt;code&gt;isNaN(x)&lt;/code&gt; がこれらの各用語を表現するための可能な限り短い形式です。</target>
        </trans-unit>
        <trans-unit id="40dcca166458da9c01e173a2ec8260bb48d15fa0" translate="yes" xml:space="preserve">
          <source>There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need make sure it is available in your current script or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">どこかで参照されている存在しない変数があります。この変数は宣言する必要があります。または、現在のスクリプトまたは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;スコープで&lt;/a&gt;使用できることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="c24a378ea23a0ced2fcd64dacfbf3a9155ca1871" translate="yes" xml:space="preserve">
          <source>There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need to make sure it is available in your current script or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">どこかに参照されている存在しない変数があります。この変数を宣言するか、現在のスクリプトまたは&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;スコープで&lt;/a&gt;使用できることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a711ec269eda6b5833a09757efd9cdf77bc3600a" translate="yes" xml:space="preserve">
          <source>There is a provenance restriction on private static fields. Only the class which defines the private static field can access the field.</source>
          <target state="translated">プライベート・スタティック・フィールドには、証明書の制限があります。プライベート・スタティック・フィールドを定義したクラスのみが、そのフィールドにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="8329c9f9ae3f5403889a2d82f303e7411b01151c" translate="yes" xml:space="preserve">
          <source>There is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">セミコロン（ &lt;code&gt;;&lt;/code&gt; ）がどこかにありません。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScriptステートメント&lt;/a&gt;はセミコロンで終了する必要があります。それらの一部は&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自動セミコロン挿入（ASI）の&lt;/a&gt;影響を受けますが、この場合、JavaScriptがソースコードを正しく解析できるように、セミコロンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d5f3969067a779f17814a6ff550c49abff4d7d19" translate="yes" xml:space="preserve">
          <source>There is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">どこかにセミコロン（ &lt;code&gt;;&lt;/code&gt; ）がありません。&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScriptステートメント&lt;/a&gt;はセミコロンで終了する必要があります。それらのいくつかは&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自動セミコロン挿入（ASI）の&lt;/a&gt;影響を受けますが、この場合、JavaScriptがソースコードを正しく解析できるように、セミコロンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ee613cc3110951c29ee7b623cb9cbfe91ba8967" translate="yes" xml:space="preserve">
          <source>There is a special syntax for declaring functions (see &lt;a href=&quot;statements/function&quot;&gt;function statement&lt;/a&gt; for details):</source>
          <target state="translated">関数を宣言するための特別な構文があります（詳細については、&lt;a href=&quot;statements/function&quot;&gt;関数ステートメント&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="734192a42687a707ba6bbb1d256a37623fffc32a" translate="yes" xml:space="preserve">
          <source>There is a special syntax for generator function declarations (see &lt;a href=&quot;statements/function*&quot;&gt;&lt;code&gt;function* statement&lt;/code&gt;&lt;/a&gt; for details):</source>
          <target state="translated">ジェネレーター関数宣言には特別な構文があります（詳細については、&lt;a href=&quot;statements/function*&quot;&gt; &lt;code&gt;function* statement&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="63b7c66671ccda2191b78892ec7eccc87f33b7b5" translate="yes" xml:space="preserve">
          <source>There is a syntax mistake when creating a function somewhere. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.</source>
          <target state="translated">どこかで関数を作成する際に構文の間違いがあります。また、閉じている中括弧や括弧が正しい順番になっているかどうかもチェックしてください。インデントを入れたり、コードのフォーマットをもう少し綺麗にすると、ジャングルの中を見通すのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="3f90a14251ff602bf67fdc64be67fee8f5029bc0" translate="yes" xml:space="preserve">
          <source>There is also a function-like dynamic &lt;code&gt;&lt;strong&gt;import()&lt;/strong&gt;&lt;/code&gt;, which does not require scripts of &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type=&quot;module&quot;&lt;/code&gt; のスクリプトを必要としない関数のような動的 &lt;code&gt;&lt;strong&gt;import()&lt;/strong&gt;&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="a0ea518cfe459b524823bdf5286dc6e89efe30c3" translate="yes" xml:space="preserve">
          <source>There is an attempt to set a new value to a property for which only a &lt;a href=&quot;../functions/get&quot;&gt;getter&lt;/a&gt; is specified. While this will be silently ignored in non-strict mode, it will throw a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../functions/get&quot;&gt;ゲッター&lt;/a&gt;のみが指定されているプロパティに新しい値を設定しようとしました。これは黙って非strictモードでは無視されますが、それはスローされます&lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;して&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="601d52f1826cbdd8b13cf22716b3e8003a4669ef" translate="yes" xml:space="preserve">
          <source>There is an error with how a function is called. More arguments need to be provided.</source>
          <target state="translated">関数の呼び出し方法にエラーがあります。より多くの引数を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8bd24391f1947eca0620d3846b17ab9be056f5e" translate="yes" xml:space="preserve">
          <source>There is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example.</source>
          <target state="translated">関数の呼び出し方法にエラーがあります。これはタイプミスや演算子の欠落、あるいはエスケープされていない文字列などが考えられます。</target>
        </trans-unit>
        <trans-unit id="079a090a362d6ae9416cb17d4e30a20176cb1123" translate="yes" xml:space="preserve">
          <source>There is an error with how an &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; condition is written. In any programming language, code needs to make decisions and carry out actions accordingly depending on different inputs. The if statement executes a statement if a specified condition is truthy. In JavaScript, this condition must appear in parenthesis after the &lt;code&gt;if&lt;/code&gt; keyword, like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; 条件の記述方法にエラーがあります。どのプログラミング言語でも、コードはさまざまな入力に応じて決定を行い、それに応じてアクションを実行する必要があります。ifステートメントは、指定された条件が真である場合にステートメントを実行します。JavaScriptでは、この条件は次のように &lt;code&gt;if&lt;/code&gt; キーワードの後に括弧で囲まなければなりません。</target>
        </trans-unit>
        <trans-unit id="ac3ac3c8fba568b075002a16e13254b719e6ace9" translate="yes" xml:space="preserve">
          <source>There is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;&lt;code&gt;]&lt;/code&gt;&quot;) or a comma (&quot;&lt;code&gt;,&lt;/code&gt;&quot;) missing.</source>
          <target state="translated">どこかで配列初期化子の構文にエラーがあります。おそらく閉じ括弧（ &quot; &lt;code&gt;]&lt;/code&gt; &quot;）またはコンマ（ &quot; &lt;code&gt;,&lt;/code&gt; &quot;）がありません。</target>
        </trans-unit>
        <trans-unit id="a76af856478d22b7a91de90ab7d8913bbe495720" translate="yes" xml:space="preserve">
          <source>There is an invalid or unexpected token that doesn't belong at this position in the code. Use an editor that supports syntax highlighting and carefully check your code against mismatches like a minus sign (&lt;code&gt; - &lt;/code&gt;) versus a dash (&lt;code&gt; &amp;ndash; &lt;/code&gt;) or simple quotes (&lt;code&gt; &quot; &lt;/code&gt;) vs non-standard quotation marks (&lt;code&gt; &amp;ldquo; &lt;/code&gt;).</source>
          <target state="translated">コードのこの位置に属していない無効または予期しないトークンがあります。構文の強調表示をサポートするエディターを使用し、マイナス記号（ &lt;code&gt; - &lt;/code&gt; ）とダッシュ（ &lt;code&gt; &amp;ndash; &lt;/code&gt; ）または単純な引用符（ &lt;code&gt; &quot; &lt;/code&gt; ）と非標準引用符（ &lt;code&gt; &amp;ldquo; &lt;/code&gt; ）のようなミスマッチがないかコードを注意深くチェックします。</target>
        </trans-unit>
        <trans-unit id="3d79d3a8162216d15e7a3487ca2db20db3c47f5d" translate="yes" xml:space="preserve">
          <source>There is an open source library available called &lt;a href=&quot;https://null.house/open-source/mapsort&quot;&gt;mapsort&lt;/a&gt; which applies this approach.</source>
          <target state="translated">このアプローチを適用する&lt;a href=&quot;https://null.house/open-source/mapsort&quot;&gt;mapsort&lt;/a&gt;と呼ばれるオープンソースライブラリが利用可能です。</target>
        </trans-unit>
        <trans-unit id="6205123b9aa140036711fe353dec412098e0dcd4" translate="yes" xml:space="preserve">
          <source>There is an unterminated &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; somewhere. String literals must be enclosed by single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;) quotes. JavaScript makes no distinction between single-quoted strings and double-quoted strings. &lt;a href=&quot;../global_objects/string#Escape_notation&quot;&gt;Escape sequences&lt;/a&gt; work in strings created with either single or double quotes. To fix this error, check if:</source>
          <target state="translated">どこかに終端されていない&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;があります。文字列リテラルは、一重引用符（ &lt;code&gt;'&lt;/code&gt; ）または二重引用符（ &lt;code&gt;&quot;&lt;/code&gt; ）で囲む必要があります。JavaScriptは、一重引用符付き文字列と二重引用符付き文字列を区別しません。&lt;a href=&quot;../global_objects/string#Escape_notation&quot;&gt;エスケープシーケンス&lt;/a&gt;は、一重引用符または二重引用符で作成された文字列で機能します。このエラーを修正するには、次のことを確認してください。</target>
        </trans-unit>
        <trans-unit id="dced52e45725251a5cf4e231f95674835cb7763b" translate="yes" xml:space="preserve">
          <source>There is no alignment constraint; multi-byte values may be fetched from any offset.</source>
          <target state="translated">アラインメント制約はありません。マルチバイト値は任意のオフセットから取得できます。</target>
        </trans-unit>
        <trans-unit id="a7c7cc1f6395c849e8ecaa5b12975b71fb58c81a" translate="yes" xml:space="preserve">
          <source>There is no negative-zero &lt;code&gt;BigInt&lt;/code&gt; as there are no negative zeros in integers. &lt;code&gt;-0.0&lt;/code&gt; is an IEEE floating-point concept that only appears in the JavaScript &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">整数には負のゼロがないため、負のゼロの &lt;code&gt;BigInt&lt;/code&gt; はありません。 &lt;code&gt;-0.0&lt;/code&gt; は、JavaScriptの&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;型にのみ表示されるIEEE浮動小数点の概念です。</target>
        </trans-unit>
        <trans-unit id="813bfd8ad24be1ca9ab314e589857976cf8d0011" translate="yes" xml:space="preserve">
          <source>There is no way to make an object extensible again once it has been made non-extensible.</source>
          <target state="translated">一度拡張不可能にしたオブジェクトを再び拡張可能にする方法はありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
