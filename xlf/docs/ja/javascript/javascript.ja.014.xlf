<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="a57b4c3298b35e7edb3f90845c7cfcfac6e75ef3" translate="yes" xml:space="preserve">
          <source>The second element for comparison.</source>
          <target state="translated">比較のための第二の要素。</target>
        </trans-unit>
        <trans-unit id="22841544311fffdd3a3c30c0a4872284a7c22a0e" translate="yes" xml:space="preserve">
          <source>The second inconvenience is a memory leak because the arrays ensure that references to each key and each value are maintained indefinitely. These references prevent the keys from being garbage collected, even if there are no other references to the object. This would also prevent the corresponding values from being garbage collected.</source>
          <target state="translated">第二の不都合は、配列が各キーと各値への参照を無期限に維持することを保証しているため、メモリリークです。これらの参照は、オブジェクトへの他の参照がない場合でも、キーがガベージコレクションされるのを防ぎます。これにより、対応する値がガベージコレクションされるのを防ぐこともできます。</target>
        </trans-unit>
        <trans-unit id="eb0086131e6b3531ebfb0c6d4586f854d8307796" translate="yes" xml:space="preserve">
          <source>The second one is bigger and less performant, but it permits some usage of the &lt;code&gt;new&lt;/code&gt; operator on bound functions.</source>
          <target state="translated">2つ目は大きくてパフォーマンスが劣りますが、バインドされた関数で &lt;code&gt;new&lt;/code&gt; 演算子をある程度使用できます。</target>
        </trans-unit>
        <trans-unit id="4af5fdad88a53c6ca2e10ebd0e8a5f9481a8a2f1" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 1 to &lt;code&gt;weekday&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;. December 25, 1995, is a Monday.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値1を &lt;code&gt;weekday&lt;/code&gt; 割り当てます。1995年12月25日は月曜日です。</target>
        </trans-unit>
        <trans-unit id="1c879df70b2272c9b5d5ec41f180cc20c882a52d" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 11 to the variable &lt;code&gt;month&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値11を変数 &lt;code&gt;month&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="c119c53df8dbc52c8270c24e802cc1458abdf049" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 15 to the variable &lt;code&gt;minutes&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値15を変数 &lt;code&gt;minutes&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="9a8bee7abf8a4065d5840aec3031141bf9e19841" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 23 to the variable &lt;code&gt;hours&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値23を変数 &lt;code&gt;hours&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="30d33ab3aec9a22329c064d587266eedecf3c3da" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 25 to the variable &lt;code&gt;day&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値25を変数 &lt;code&gt;day&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="745cd8a1301e16f24d369e3eb0cae17a9cf39f01" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 30 to the variable &lt;code&gt;seconds&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">以下の2番目のステートメントは、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;Xmas95&lt;/code&gt; の値に基づいて、値30を変数 &lt;code&gt;seconds&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="4024bd8f1cdd176e7775d73d2b29084da7618627" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
          <target state="translated">比較する2番目の値。</target>
        </trans-unit>
        <trans-unit id="abb522214d42e0562b3bff4958df65ccc0bca73b" translate="yes" xml:space="preserve">
          <source>The second way is the &lt;code&gt;/* */&lt;/code&gt; style, which is much more flexible.</source>
          <target state="translated">2番目の方法は &lt;code&gt;/* */&lt;/code&gt; スタイルで、これははるかに柔軟です。</target>
        </trans-unit>
        <trans-unit id="cefef5fa8e63d0fd4ec579caf525e0c06577e1f0" translate="yes" xml:space="preserve">
          <source>The second way to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object is to have it exported by a WebAssembly module. The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得する2番目の方法は、WebAssemblyモジュールによってオブジェクトをエクスポートすることです。次の例（GitHubの&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt;を参照し、&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;ライブ&lt;/a&gt;で表示する）は、上記の行で作成されたメモリをインポートしながら、&lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;メソッドを使用してロードされたmemory.wasmバイトコードをフェッチしてインスタンス化します。次に、そのメモリにいくつかの値を格納し、関数をエクスポートし、それを使用していくつかの値を合計します。</target>
        </trans-unit>
        <trans-unit id="c1f1f1991cf227b29cc351ef76e1b1c1ad39d33b" translate="yes" xml:space="preserve">
          <source>The secondary overload takes an already-compiled &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to an &lt;code&gt;Instance&lt;/code&gt; of that &lt;code&gt;Module&lt;/code&gt;. This overload is useful if the &lt;code&gt;Module&lt;/code&gt; has already been compiled.</source>
          <target state="translated">セカンダリオーバーロードは、コンパイル済みの&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;を受け取り、その &lt;code&gt;Module&lt;/code&gt; の &lt;code&gt;Instance&lt;/code&gt; に解決される &lt;code&gt;Promise&lt;/code&gt; を返します。このオーバーロードは、 &lt;code&gt;Module&lt;/code&gt; が既にコンパイルされている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="1820b978ecac3858ab3dd6802f3b9ee97c6a18f2" translate="yes" xml:space="preserve">
          <source>The shift() method is often used in condition inside while loop. In the following example every iteration will remove the next element from an array, until it is empty:</source>
          <target state="translated">shift()メソッドはwhileループ内の条件でよく使われます。次の例では、配列から次の要素を空になるまで削除します。</target>
        </trans-unit>
        <trans-unit id="abee9f26ebefaef40a0c699186c2c458782cc646" translate="yes" xml:space="preserve">
          <source>The shorthand syntax also supports computed property names.</source>
          <target state="translated">短縮構文は、計算されたプロパティ名もサポートしています。</target>
        </trans-unit>
        <trans-unit id="0ec96efc35fa3234a2270887e3200075877ba098" translate="yes" xml:space="preserve">
          <source>The shorthand syntax is similar to the &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; and &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; syntax introduced in ECMAScript 2015.</source>
          <target state="translated">省略構文は、ECMAScript 2015で導入された&lt;a href=&quot;get&quot;&gt;ゲッター&lt;/a&gt;および&lt;a href=&quot;set&quot;&gt;セッター&lt;/a&gt;構文に似ています。</target>
        </trans-unit>
        <trans-unit id="d970f2879008a5664e8f8ad4addd15f05ba6423e" translate="yes" xml:space="preserve">
          <source>The shorthand syntax is similar to the &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; and &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; syntax introduced in ES5.</source>
          <target state="translated">省略構文は、ES5で導入された&lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt;および&lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt;構文に似ています。</target>
        </trans-unit>
        <trans-unit id="ab86750f1e64ce498e187f5d5f841e9f26691c5b" translate="yes" xml:space="preserve">
          <source>The simple alternative of assigning the object to a short name variable, then accessing the corresponding property on that variable, stands ready to replace &lt;code&gt;with&lt;/code&gt;.</source>
          <target state="translated">オブジェクトを短い名前の変数に割り当て、その変数の対応するプロパティにアクセスするという簡単な方法は、で置き換える準備ができて &lt;code&gt;with&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3c6147140bc7c5177cf3352c47afa22965051718" translate="yes" xml:space="preserve">
          <source>The simplest case is when &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is just a single character; this is used to split a delimited string. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like this: &lt;code&gt;myString.split(&quot;\t&quot;)&lt;/code&gt;.</source>
          <target state="translated">最も単純なケースは、 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; が1文字だけの場合です。これは、区切られた文字列を分割するために使用されます。たとえば、タブ区切り値（TSV）を含む文字列は、 &lt;code&gt;myString.split(&quot;\t&quot;)&lt;/code&gt; ように、区切り文字としてタブ文字を渡すことで解析できます。</target>
        </trans-unit>
        <trans-unit id="e0b22b9d7ecb2507195389b54eece72bc59a1c02" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function that, no matter how it is called, is called with a particular &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; の最も簡単な使用法は、どのように呼び出されても、特定の &lt;code&gt;this&lt;/code&gt; 値で呼び出される関数を作成することです。</target>
        </trans-unit>
        <trans-unit id="5835c1fc1912869cb1a9f6b017fc5089043ea886" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function that, no matter how it is called, is called with a particular &lt;code&gt;this&lt;/code&gt; value. A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its &lt;code&gt;this&lt;/code&gt; (e.g. by using that method in callback-based code). Without special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; の最も簡単な使用法は、どのように呼び出されても、特定の &lt;code&gt;this&lt;/code&gt; 値で呼び出される関数を作成することです。新しいJavaScriptプログラマーの一般的な間違いは、オブジェクトからメソッドを抽出し、後でその関数を呼び出して、元のオブジェクトを &lt;code&gt;this&lt;/code&gt; として使用することを期待することです（たとえば、コールバックベースのコードでそのメソッドを使用することにより）。ただし、特別な注意がなければ、元のオブジェクトは通常失われます。元のオブジェクトを使用して、関数からバインドされた関数を作成すると、この問題は適切に解決されます。</target>
        </trans-unit>
        <trans-unit id="6d6c63dff4f030464384082acb8b1913506c71dc" translate="yes" xml:space="preserve">
          <source>The simplest version directly imports the default:</source>
          <target state="translated">一番シンプルなバージョンでは、デフォルトのものを直接インポートしています。</target>
        </trans-unit>
        <trans-unit id="d69ece57bbd193284b3f54a7d109daeeae0e20ff" translate="yes" xml:space="preserve">
          <source>The sine of the given number.</source>
          <target state="translated">与えられた数のサイン。</target>
        </trans-unit>
        <trans-unit id="7fa6c3c88196c9890ccc2acd1751ee8a3b162f6e" translate="yes" xml:space="preserve">
          <source>The single code point U+00F1.</source>
          <target state="translated">単一のコードポイントU+00F1。</target>
        </trans-unit>
        <trans-unit id="df80f5ae8e83175ed50005f6bc69db2213cac60d" translate="yes" xml:space="preserve">
          <source>The single value that results from the reduction.</source>
          <target state="translated">還元の結果として得られる単一の値。</target>
        </trans-unit>
        <trans-unit id="668a8c3d578534a6a438f66f8a70854b72068cc7" translate="yes" xml:space="preserve">
          <source>The size in bytes to check.</source>
          <target state="translated">チェックするサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="57a5c0494833bea31465d3b044b0e0d342192fff" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the array buffer to create.</source>
          <target state="translated">作成する配列バッファのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="bcf6eda76bceac4f20d4cfa8a5529bffe65aa5c7" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="translated">配列のサイズ（バイト単位）。これは、配列の作成時に確立され、変更できません。&lt;strong&gt;読み取り専用。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1c647ddc22eacea007c8f8f76aa48ee7a3bdf44" translate="yes" xml:space="preserve">
          <source>The smallest integer greater than or equal to the given number.</source>
          <target state="translated">与えられた数以上の最小の整数。</target>
        </trans-unit>
        <trans-unit id="4d5352391b7cf0872173723c1715230a82d0e709" translate="yes" xml:space="preserve">
          <source>The smallest interval between two representable numbers.</source>
          <target state="translated">2つの表現可能な数の間の最小の間隔。</target>
        </trans-unit>
        <trans-unit id="578a6566f8dd2727ef2138039b6e1b260c726f43" translate="yes" xml:space="preserve">
          <source>The smallest of the given numbers. If any one or more of the parameters cannot be converted into a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned. The result is &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; if no parameters are provided.</source>
          <target state="translated">指定された数値の最小値。1つ以上のパラメーターを数値に変換できない場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。パラメータが指定されていない場合、結果は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1b584b056332604c643da0964809675ae4df19e1" translate="yes" xml:space="preserve">
          <source>The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).</source>
          <target state="translated">最小の正の表現可能な数、つまり、ゼロに最も近い正の数(実際にはゼロではない)。</target>
        </trans-unit>
        <trans-unit id="198213a60d9b14b4686129ce9aee85fc9c96c0ec" translate="yes" xml:space="preserve">
          <source>The smallest positive representable number&amp;mdash;that is, the positive number closest to zero (without actually being zero).</source>
          <target state="translated">正の表現可能な最小の数、つまり、ゼロに最も近い正の数（実際にはゼロではありません）。</target>
        </trans-unit>
        <trans-unit id="59980303f2b550bbba2cfdadd7dee2081477f6e1" translate="yes" xml:space="preserve">
          <source>The snippet below illustrates how to find and filter (thus causing data loss) a cyclic reference by using the &lt;code&gt;replacer&lt;/code&gt; parameter of &lt;a href=&quot;../global_objects/json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下のスニペットは、&lt;a href=&quot;../global_objects/json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;replacer&lt;/code&gt; パラメーターを使用して循環参照を見つけてフィルタリングする（したがってデータ損失を引き起こす）方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0d525c5acea385ad7d50408039e4c710e63be90d" translate="yes" xml:space="preserve">
          <source>The sorted array. Note that the array is sorted &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt;, and no copy is made.</source>
          <target state="translated">ソートされた配列。配列は&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;所定の位置&lt;/a&gt;&lt;/em&gt;でソート&lt;em&gt;され&lt;/em&gt;、コピーは作成されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4d59fac8447c22b135eb4a41f704bad8d5e0df4d" translate="yes" xml:space="preserve">
          <source>The sorted typed array.</source>
          <target state="translated">ソートされた型付き配列。</target>
        </trans-unit>
        <trans-unit id="f8167c1b0cbe252b617b1b1e7b1d0ed414774fce" translate="yes" xml:space="preserve">
          <source>The source map specification changed the syntax due to a conflict with IE whenever it was found in the page after &lt;code&gt;//@cc_on&lt;/code&gt; was interpreted to turn on conditional compilation in the IE JScript engine. The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8ka90k2e%28v=vs.94%29.aspx&quot;&gt;conditional compilation comment&lt;/a&gt; in IE is a little known feature, but it broke source maps with &lt;a href=&quot;https://bugs.jquery.com/ticket/13274&quot;&gt;jQuery&lt;/a&gt; and other libraries.</source>
          <target state="translated">&lt;code&gt;//@cc_on&lt;/code&gt; がIE JScriptエンジンで条件付きコンパイルを有効にするように解釈された後、ページで見つかった場合は常に、IEとの競合のためにソースマップ仕様が構文を変更しました。IE の&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8ka90k2e%28v=vs.94%29.aspx&quot;&gt;条件付きコンパイルコメント&lt;/a&gt;はあまり知られていない機能ですが、&lt;a href=&quot;https://bugs.jquery.com/ticket/13274&quot;&gt;jQuery&lt;/a&gt;およびその他のライブラリでソースマップを壊しました。</target>
        </trans-unit>
        <trans-unit id="aa083e2e5d9db92e1fdd3a2dadc5b300ce6d155e" translate="yes" xml:space="preserve">
          <source>The source object(s) &amp;mdash; objects containing the properties you want to apply.</source>
          <target state="translated">ソースオブジェクト&amp;mdash;適用するプロパティを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a6d0a7de6131e4d732a1c1c89a21e337c87b0b06" translate="yes" xml:space="preserve">
          <source>The source object(s).</source>
          <target state="translated">ソースオブジェクト。</target>
        </trans-unit>
        <trans-unit id="511eb85673324126c566f020ed174ab405eef44c" translate="yes" xml:space="preserve">
          <source>The space argument</source>
          <target state="translated">スペース引数</target>
        </trans-unit>
        <trans-unit id="40b8ea87c618fea41d5aab1faa4ecb32e6d1ea59" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;raw&lt;/code&gt; property, available on the first argument to the tag function, allows you to access the raw strings as they were entered, without processing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;escape sequences&lt;/a&gt;.</source>
          <target state="translated">タグ関数の最初の引数で使用できる特別な &lt;code&gt;raw&lt;/code&gt; プロパティを使用すると、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;エスケープシーケンス&lt;/a&gt;を処理せずに、入力されたraw文字列にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="df8a5b4743460e7bd39f98c02ae1935d30bc0af0" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;raw&lt;/code&gt; property, available on the first function argument of tagged templates, allows you to access the raw strings as they were entered, without processing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;escape sequences&lt;/a&gt;.</source>
          <target state="translated">タグ付きテンプレートの最初の関数引数で使用できる特別な &lt;code&gt;raw&lt;/code&gt; プロパティを使用すると、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;エスケープシーケンス&lt;/a&gt;を処理せずに、入力されたままの文字列にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="94f6db19f273c019178b304d1a64313a00b4826e" translate="yes" xml:space="preserve">
          <source>The species accessor property allows subclasses to override the default constructor for objects.</source>
          <target state="translated">species アクセサ プロパティは、サブクラスがオブジェクトのデフォルト コンストラクタをオーバーライドすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="16021061db18ebd6a5d2f1fec6234d9ec169cb96" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;ArrayBuffer&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">種アクセサプロパティは、 &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトのデフォルトのコンストラクタを返します。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="1b750d87e0450750db11d484a6aacc4956dcfa7d" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;Map&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">種アクセサプロパティは、 &lt;code&gt;Map&lt;/code&gt; オブジェクトのデフォルトのコンストラクタを返します。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="491d41ab480e226fed33b559751c6077a08f7be3" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;Set&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">種アクセサプロパティは、 &lt;code&gt;Set&lt;/code&gt; オブジェクトのデフォルトのコンストラクタを返します。サブクラスコンストラクターは、コンストラクターの割り当てを変更するためにオーバーライドする場合があります。</target>
        </trans-unit>
        <trans-unit id="b584b6a94bc11fac8ce47d9f14648ec420fce3c4" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor for &lt;code&gt;ArrayBuffer&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; プロパティは、デフォルトのコンストラクター関数を返します。これは、 &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトのArrayBufferコンストラクターです。</target>
        </trans-unit>
        <trans-unit id="2a17544fbb410f0df301670f863e167add111875" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;Map&lt;/code&gt; constructor for &lt;code&gt;Map&lt;/code&gt; objects:</source>
          <target state="translated">Speciesプロパティは、 &lt;code&gt;Map&lt;/code&gt; オブジェクトの &lt;code&gt;Map&lt;/code&gt; コンストラクタであるデフォルトのコンストラクタ関数を返します。</target>
        </trans-unit>
        <trans-unit id="46a4bbfb225be485ea6fcd2993d62c627968df55" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;Set&lt;/code&gt; constructor for &lt;code&gt;Set&lt;/code&gt; objects:</source>
          <target state="translated">Speciesプロパティは、デフォルトのコンストラクタ関数を返します。これは、 &lt;code&gt;Set&lt;/code&gt; オブジェクトの &lt;code&gt;Set&lt;/code&gt; コンストラクタです。</target>
        </trans-unit>
        <trans-unit id="9659544f684f8e234ac1326aebca08dd5b470404" translate="yes" xml:space="preserve">
          <source>The specified object.</source>
          <target state="translated">指定されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1f3f0ce94a2bcf1dd429f4d411f2f2b8d1305c23" translate="yes" xml:space="preserve">
          <source>The square brackets of an array comprehension introduce an implicit block for scoping purposes. New variables (such as i in the example) are treated as if they had been declared using &lt;a href=&quot;../statements/let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt;. This means that they will not be available outside of the comprehension.</source>
          <target state="translated">配列内包の角括弧は、スコープの目的で暗黙のブロックを導入します。新しい変数（例のiなど）は、&lt;a href=&quot;../statements/let&quot;&gt; &lt;code&gt;let&lt;/code&gt; &lt;/a&gt;を使用して宣言されたかのように扱われます。つまり、理解度の外では利用できません。</target>
        </trans-unit>
        <trans-unit id="b2bcdf15b0d6fa2bcc088c169892370833652876" translate="yes" xml:space="preserve">
          <source>The square root of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">指定された数値の平方根。数値が負の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="4666bf74066d922cd6cefe693f56d0c8313d153f" translate="yes" xml:space="preserve">
          <source>The square root of the sum of squares of the given arguments. If at least one of the arguments cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">与えられた引数の平方和の平方根。少なくとも1つの引数を数値に変換できない場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="0387989a2fa950c785b09a34ece64a2e3fdcf811" translate="yes" xml:space="preserve">
          <source>The standard equality operators (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt; to compare two operands. If the operands are of different types, it will attempt to convert them to the same type before making the comparison, e.g., in the expression &lt;code&gt;5 == '5'&lt;/code&gt;, the string on the right is converted to &lt;a href=&quot;../global_objects/number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; before the comparison is made.</source>
          <target state="translated">標準の等値演算子（ &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; ）は、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象等値比較アルゴリズム&lt;/a&gt;を使用して2つのオペランドを比較します。オペランドのタイプが異なる場合、比較を行う前にオペランドを同じタイプに変換しようとします。たとえば、式 &lt;code&gt;5 == '5'&lt;/code&gt; では、比較が行われる前に右側の文字列が&lt;a href=&quot;../global_objects/number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;に変換されます。</target>
        </trans-unit>
        <trans-unit id="7d699ff1d0ad15f8264d303c6785a6e283211757" translate="yes" xml:space="preserve">
          <source>The standard import syntax is static and will always result in all code in the imported module being evaluated at load time. In situations where you wish to load a module conditionally or on demand, you can use a dynamic import instead. The following are some reasons why you might need to use dynamic import:</source>
          <target state="translated">標準のインポート構文は静的で、インポートされたモジュールのすべてのコードが常にロード時に評価されます。条件付きまたはオンデマンドでモジュールをロードしたい場合は、代わりにダイナミックインポートを使用することができます。以下に、ダイナミックインポートを使用する必要がある理由をいくつか挙げます。</target>
        </trans-unit>
        <trans-unit id="b74b19f4ceb5276ec846feec252ca8825e9367b4" translate="yes" xml:space="preserve">
          <source>The standard string representation of a date time string is a simplification of the ISO 8601 calendar date extended format. (See the section &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-time-string-format&quot;&gt;Date Time String Format&lt;/a&gt; in the ECMAScript specification for more details.)</source>
          <target state="translated">日時文字列の標準文字列表現は、ISO8601カレンダー日付拡張形式を簡略化したものです。（詳細については、ECMAScript仕様の「&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-time-string-format&quot;&gt;日時文字列形式」&lt;/a&gt;セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="b0898b091e1d3ad98c99f7c945505cae7f09588f" translate="yes" xml:space="preserve">
          <source>The statements comprising the body of the function.</source>
          <target state="translated">関数の本体を構成するステートメント。</target>
        </trans-unit>
        <trans-unit id="5292df8522a93b76d66c5a4afeb6f245ff0ab8ec" translate="yes" xml:space="preserve">
          <source>The statements comprising the body of the function. The &lt;code&gt;await&lt;/code&gt; mechanism may be used.</source>
          <target state="translated">関数の本体を構成するステートメント。 &lt;code&gt;await&lt;/code&gt; 機構を使用することができます。</target>
        </trans-unit>
        <trans-unit id="fda11c0a9bea9de1bd840d175d6e7282612347e8" translate="yes" xml:space="preserve">
          <source>The statements to be executed.</source>
          <target state="translated">実行されるステートメント。</target>
        </trans-unit>
        <trans-unit id="0b7cace5e0a90d7bf7b781a74edd8bfb1a682291" translate="yes" xml:space="preserve">
          <source>The statements which comprise the body of the function.</source>
          <target state="translated">機能の本体を構成するステートメント。</target>
        </trans-unit>
        <trans-unit id="af2de8cd4975cbac3f2c6514c3154e49561e8f73" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;ArrayBuffer.transfer()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;ArrayBuffer&lt;/code&gt; whose contents have been taken from the &lt;code&gt;oldBuffer&lt;/code&gt;'s data and then is either truncated or zero-extended by &lt;code&gt;newByteLength&lt;/code&gt;. If &lt;code&gt;newByteLength&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, the &lt;code&gt;byteLength&lt;/code&gt; of the &lt;code&gt;oldBuffer&lt;/code&gt; is used. This operation leaves &lt;code&gt;oldBuffer&lt;/code&gt; in a detached state.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;ArrayBuffer.transfer()&lt;/strong&gt;&lt;/code&gt; メソッドの戻り新たな &lt;code&gt;ArrayBuffer&lt;/code&gt; 内容から採取された &lt;code&gt;oldBuffer&lt;/code&gt; いずれか切り捨て等によりゼロ拡張され、その後のデータと &lt;code&gt;newByteLength&lt;/code&gt; 。場合 &lt;code&gt;newByteLength&lt;/code&gt; がある &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;byteLength&lt;/code&gt; の &lt;code&gt;oldBuffer&lt;/code&gt; が使用されています。この操作により、 &lt;code&gt;oldBuffer&lt;/code&gt; は切り離された状態のままになります。</target>
        </trans-unit>
        <trans-unit id="fec0e30534f8672c0605f775fb24680275b23217" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.add()&lt;/code&gt; method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.add()&lt;/code&gt; メソッドは、配列内の指定された位置に指定された値を追加し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="f0011b0ab0dfc8540c68447b4bdccd149dfa154e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.and()&lt;/code&gt; method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.and()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値とビット単位のANDを計算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="af50eef77235e45ea0e39a742ebfb44f0032d99d" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.compareExchange()&lt;/code&gt; method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.compareExchange()&lt;/code&gt; メソッドは、指定された期待値が古い値と等しい場合、配列内の指定された位置で指定された置換値を交換します。期待値と等しいかどうかに関係なく、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="58f2eaed64525110a07c2c9298d09c022135db54" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.isLockFree()&lt;/code&gt; method is used to determine whether to use locks or atomic operations. It returns &lt;code&gt;true&lt;/code&gt;, if the given size is one of the &lt;a href=&quot;../typedarray/bytes_per_element&quot;&gt;BYTES_PER_ELEMENT&lt;/a&gt; property of integer TypedArray types.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.isLockFree()&lt;/code&gt; メソッドは、ロックまたはアトミック操作のどちらを使用するかを決定するために使用されます。指定されたサイズが整数TypedArray型の&lt;a href=&quot;../typedarray/bytes_per_element&quot;&gt;BYTES_PER_ELEMENT&lt;/a&gt;プロパティの1つである場合、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2c7f01f3104d4a107eb890565aaa201bffb09a01" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.load()&lt;/code&gt; method returns a value at a given position in the array.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.load()&lt;/code&gt; メソッドは、配列内の指定された位置にある値を返します。</target>
        </trans-unit>
        <trans-unit id="6462b2d9d930792381152b80f1427f0c1f7cca14" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.notify()&lt;/code&gt; method notifies up some agents that are sleeping in the wait queue.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.notify()&lt;/code&gt; メソッドは、待機キューでスリープしている一部のエージェントに通知します。</target>
        </trans-unit>
        <trans-unit id="4205b3973e84d519136144d4c8b46564efb27293" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.or()&lt;/code&gt; method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.or()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値とのビット単位ORを計算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="efe340e63eb2088c81d321b80a5d5d3af5868809" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.store()&lt;/code&gt; method stores a given value at the given position in the array and returns that value.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.store()&lt;/code&gt; メソッドは、配列内の指定された位置に指定された値を格納し、その値を返します。</target>
        </trans-unit>
        <trans-unit id="cb854a5e6cbf84d6e52a0b31506ec682b29c7455" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.sub()&lt;/code&gt; method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.sub()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値を減算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="c927740464da9faa8686eae4c067cde1cdfe2a34" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.wait()&lt;/code&gt; method verifies that a given position in an &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either &quot;&lt;code&gt;ok&lt;/code&gt;&quot;, &quot;&lt;code&gt;not-equal&lt;/code&gt;&quot;, or &quot;&lt;code&gt;timed-out&lt;/code&gt;&quot;.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.wait()&lt;/code&gt; 内の指定された位置ことメソッド検証&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; が&lt;/a&gt;依然としてウェイクアップまたはタイムアウトを待って、所定の値とそうであればスリープを含有します。「 &lt;code&gt;ok&lt;/code&gt; 」、「 &lt;code&gt;not-equal&lt;/code&gt; 」、または「 &lt;code&gt;timed-out&lt;/code&gt; 」のいずれかの文字列を返します。</target>
        </trans-unit>
        <trans-unit id="92b05055b84702f2556852087e51e5debed0fb92" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.wait()&lt;/code&gt; method verifies that a given position in an &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either &lt;code&gt;&quot;ok&quot;&lt;/code&gt;, &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt;, or &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt;.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.wait()&lt;/code&gt; メソッドは、&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;内の指定された位置に指定された値がまだ含まれていることを確認し、そうであればスリープ、ウェイクアップまたはタイムアウトを待機します。 &lt;code&gt;&quot;ok&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt; の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="67be5710c39f4a140b1b493763c08a3e3d826875" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.xor()&lt;/code&gt; method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.xor()&lt;/code&gt; メソッドは、配列内の指定された位置にある指定された値を使用してビット単位のXORを計算し、その位置にある古い値を返します。このアトミック操作は、変更された値が書き戻されるまで、他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="7db98a25f456e5329b9fde7e474cdb5208a2b6d7" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect.construct()&lt;/strong&gt;&lt;/code&gt; method acts like the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator, but as a function. It is equivalent to calling &lt;code&gt;new target(...args)&lt;/code&gt;. It gives also the added option to specify a different prototype.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect.construct()&lt;/strong&gt;&lt;/code&gt; メソッドは、&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子のように機能しますが、関数として機能します。これは、 &lt;code&gt;new target(...args)&lt;/code&gt; を呼び出すのと同じです。また、別のプロトタイプを指定するための追加オプションも提供します。</target>
        </trans-unit>
        <trans-unit id="b2ab58b2a2d76388fc95d13db70d0161ffceab73" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.apply()&lt;/code&gt; method calls a target function with arguments as specified.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.apply()&lt;/code&gt; メソッドは、指定された引数を使用してターゲット関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e60a81890510d63e2d6ef8c32ffb1e9b9ecc1c1c" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.construct()&lt;/code&gt; method acts like the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt;, but as a function. It is equivalent to calling &lt;code&gt;new target(...args)&lt;/code&gt;. It gives also the added option to specify a different prototype.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.construct()&lt;/code&gt; メソッドは、&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子の&lt;/a&gt;ように機能しますが、関数として機能します。これは、 &lt;code&gt;new target(...args)&lt;/code&gt; を呼び出すことと同じです。また、別のプロトタイプを指定するオプションが追加されています。</target>
        </trans-unit>
        <trans-unit id="017fa157ac61b53401f5cb2e6e3640d24750e2f0" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.defineProperty()&lt;/code&gt; メソッドは&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; に&lt;/a&gt;似ていますが、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="f6d363c497e88472a0e66be0b359cea42ef4a3cd" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.deleteProperty()&lt;/code&gt; method allows to delete properties. It is like the &lt;a href=&quot;../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.deleteProperty()&lt;/code&gt; メソッドを使用すると、プロパティを削除できます。これは、関数としての&lt;a href=&quot;../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; 演算子の&lt;/a&gt;ようなものです。</target>
        </trans-unit>
        <trans-unit id="f420cd260cbc503b3ed49d8a8602567c43f99e33" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.getOwnPropertyDescriptor()&lt;/code&gt; メソッドは&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; に&lt;/a&gt;似ています。オブジェクトに存在する場合は、指定されたプロパティのプロパティ記述子を返します。それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f594507dfbe84df768deb14a1430e696aec3e282" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.getPrototypeOf()&lt;/code&gt; メソッドは、ほぼ同じ方法である&lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt;。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティの値）を返します。</target>
        </trans-unit>
        <trans-unit id="96117f1bdab8ca07b755f3c9d1f770485254a893" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.has()&lt;/code&gt; メソッドは、関数として&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 演算子の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="61cfa4955f0ed6f84455e3714e51e58a202da52e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible()&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.isExtensible()&lt;/code&gt; メソッドは、オブジェクトが拡張可能かどうか（新しいプロパティを追加できるかどうか）を決定します。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_to_Object.isExtensible()&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="82fbabb68637650603a621e6e651e1c535e33c57" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.ownKeys()&lt;/code&gt; メソッドは、 &lt;code&gt;target&lt;/code&gt; オブジェクトの独自のプロパティキーの配列を返します。</target>
        </trans-unit>
        <trans-unit id="2a57630937594eb73d149839935552dede20e9c9" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.preventExtensions()&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.preventExtensions()&lt;/code&gt; メソッドは、新しいプロパティがオブジェクトに追加されるのを防ぎます（つまり、オブジェクトの将来の拡張を防ぎます）。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_to_Object.preventExtensions()&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ebdbba77dbd45f91cdb48da11c97627eee7d9438" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.set()&lt;/code&gt; method works like setting a property on an object.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.set()&lt;/code&gt; メソッドは、オブジェクトのプロパティを設定するように機能します。</target>
        </trans-unit>
        <trans-unit id="50dd64d4dfc656df46a7e0f060d23ece0a78b434" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.setPrototypeOf()&lt;/code&gt; メソッドは、&lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;と同じメソッドです。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティ）を別のオブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; に設定&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="0eb93af43f589b80cf5a285f46fcba25eb100d45" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; statement is used to import bindings which are exported by another module. Imported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The &lt;code&gt;import&lt;/code&gt; statement cannot be used in embedded scripts unless such script has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; ステートメントは、別のモジュールによってエクスポートされたバインディングをインポートするために使用されます。インポートされたモジュールは、宣言されているかどうかに関係なく、&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;import&lt;/code&gt; こうしたスクリプトは持っていない限り、ステートメントが埋め込まれたスクリプトで使用することができない &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9813705cf188dd5f254d0eaadbddf65400aead3a" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; statement is used to import read only live bindings which are &lt;a href=&quot;export&quot;&gt;exported&lt;/a&gt; by another module. Imported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The &lt;code&gt;import&lt;/code&gt; statement cannot be used in embedded scripts unless such script has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;. Bindings imported are called live bindings because they are updated by the module that exported the binding.</source>
          <target state="translated">静的 &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; ステートメントは、別のモジュールによって&lt;a href=&quot;export&quot;&gt;エクスポートさ&lt;/a&gt;れた読み取り専用のライブバインディングをインポートするために使用されます。インポートされたモジュールは、宣言するかどうかに関係なく、&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;import&lt;/code&gt; こうしたスクリプトは持っていない限り、ステートメントが埋め込まれたスクリプトで使用することができない &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; 。インポートされたバインディングは、バインディングをエクスポートしたモジュールによって更新されるため、ライブバインディングと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="d868ba88128cfe2f4dfb6b316e888ebde89b296b" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Atomics.exchange()&lt;/code&gt; method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.</source>
          <target state="translated">静的 &lt;code&gt;Atomics.exchange()&lt;/code&gt; メソッドは、配列内の指定された位置に指定された値を格納し、その位置にある古い値を返します。このアトミック操作は、古い値の読み取りと新しい値の書き込みの間に他の書き込みが発生しないことを保証します。</target>
        </trans-unit>
        <trans-unit id="0a9226ec84e2dacebdb4c2616163cd54f9d3d2e3" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Atomics.sub()&lt;/code&gt; method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">静的 &lt;code&gt;Atomics.sub()&lt;/code&gt; メソッドは、配列内の指定された位置で指定された値を減算し、その位置で古い値を返します。このアトミック操作により、変更された値が書き戻されるまで、他の書き込みが発生しないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="f88bf7eb33c64a57d801dd3379b0fe4e960df80f" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Date.now()&lt;/code&gt; method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</source>
          <target state="translated">静的 &lt;code&gt;Date.now()&lt;/code&gt; メソッドは、1970年1月1日00：00：00UTCから経過したミリ秒数を返します。</target>
        </trans-unit>
        <trans-unit id="4cff4455395e8d7a453784b6672e9138e0133455" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Promise.reject&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is rejected. For debugging purposes and selective error catching, it is useful to make &lt;code&gt;reason&lt;/code&gt; an &lt;code&gt;instanceof&lt;/code&gt;&lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Promise.reject&lt;/code&gt; 関数は、拒否された &lt;code&gt;Promise&lt;/code&gt; を返します。引く目的と選択エラーをデバッグするために、作るために有用である &lt;code&gt;reason&lt;/code&gt; &lt;code&gt;instanceof&lt;/code&gt; は&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90cfd1ce17a09ece2532de9bbc2ae9d0f2bfb7c8" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Promise.resolve&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is resolved.</source>
          <target state="translated">静的な &lt;code&gt;Promise.resolve&lt;/code&gt; 関数は、解決された &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a21d42d17a2f572741533ffa8f2117a5682e671e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.apply()&lt;/code&gt; method calls a target function with arguments as specified.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.apply()&lt;/code&gt; メソッドは、指定された引数を使用してターゲット関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8a62d545267d57e38fd5cd02b700c84afe8a7849" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; メソッドは&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; に&lt;/a&gt;似ていますが、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="daf9541750336db1ef3f90e685a8a5bb35fefbdc" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.get()&lt;/code&gt; method works like getting a property from an object (&lt;code&gt;target[propertyKey]&lt;/code&gt;) as a function.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.get()&lt;/code&gt; メソッドは、オブジェクト（ &lt;code&gt;target[propertyKey]&lt;/code&gt; ）からプロパティを関数として取得するように機能します。</target>
        </trans-unit>
        <trans-unit id="e750705252caaefca2d5abe6183fc3318b43bae0" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; メソッドは、&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; に&lt;/a&gt;似ています。オブジェクトに存在する場合は指定されたプロパティのプロパティ記述子を返し、それ以外の場合は&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="20a0bb46eb2f22b838e2e9fade5a9bb9eb3a74ca" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; メソッドは、ほぼ同じ方法である&lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt;。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティの値）を返します。</target>
        </trans-unit>
        <trans-unit id="4c7e4ee25c18939f40d68d9058ec9f5333cb752a" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.has()&lt;/code&gt; メソッドは、関数としての&lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 演算子の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="7db233c270f8979d1b5c3ef2bbd6d81eac167e17" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.isExtensible()&lt;/code&gt; メソッドは、オブジェクトが拡張可能かどうか（新しいプロパティを追加できるかどうか）を決定します。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_to_Object.isExtensible&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6a7328ff6cc40d7fecd957bafa030946ffe71bbe" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; メソッドは、 &lt;code&gt;target&lt;/code&gt; オブジェクト自体のプロパティキーの配列を返します。</target>
        </trans-unit>
        <trans-unit id="5ee721d282e35985c5967bb8bc2a21bcac8e8779" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_from_Object.preventExtensions&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; メソッドは、新しいプロパティがオブジェクトに追加されるのを防ぎます（つまり、オブジェクトへの将来の拡張を防ぎます）。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; に&lt;/a&gt;似ていますが、いくつかの&lt;a href=&quot;#Difference_from_Object.preventExtensions&quot;&gt;違いがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="91735f1b96d2f17ae9d4b0083013a69e083cb2d9" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.set()&lt;/code&gt; method works like setting a property on an object.</source>
          <target state="translated">静的な &lt;code&gt;Reflect.set()&lt;/code&gt; メソッドは、オブジェクトにプロパティを設定するのと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="b2383c9f6d48cdefe68ddd4c9c98beb354c09aa6" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;, except for its return type. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful, or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">静的 &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; メソッドは、戻り値の型を除いて、&lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;と同じメソッドです。指定されたオブジェクトのプロトタイプ（つまり、内部 &lt;code&gt;[[Prototype]]&lt;/code&gt; プロパティ）を別のオブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;に設定し、操作が成功した場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0764467d102945b22b05fd0dad760b35aee367ab" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.fromCharCode()&lt;/code&gt; method returns a string created from the specified sequence of UTF-16 code units.</source>
          <target state="translated">静的な &lt;code&gt;String.fromCharCode()&lt;/code&gt; メソッドは、UTF-16コード単位の指定されたシーケンスから作成された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b69a85724fb361ca15f0c31e4a0e03ac87c2298f" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.fromCodePoint()&lt;/code&gt; method returns a string created by using the specified sequence of code points.</source>
          <target state="translated">static &lt;code&gt;String.fromCodePoint()&lt;/code&gt; メソッドは、指定されたコードポイントのシーケンスを使用して作成された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5a1164088adaed231a8d0365747029a7565e0723" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;, similar to the &lt;code&gt;r&lt;/code&gt; prefix in Python or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals (yet there is a difference: see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt;) are not.</source>
          <target state="translated">静的な &lt;code&gt;String.raw()&lt;/code&gt; メソッドは、&lt;a href=&quot;../../template_literals&quot;&gt;テンプレートリテラルの&lt;/a&gt;タグ関数であり、Python の &lt;code&gt;r&lt;/code&gt; 接頭辞またはC＃の文字列リテラルの &lt;code&gt;@&lt;/code&gt; 接頭辞と似ています（ただし、違いがあります：&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;この問題の&lt;/a&gt;説明を参照してください）。これは、テンプレート文字列の生の文字列形式を取得するために使用されます。つまり、置換（例：$ {foo}）は処理されますが、エスケープ（例： &lt;code&gt;\n&lt;/code&gt; ）は処理されません。</target>
        </trans-unit>
        <trans-unit id="c01b8c9ffec8417a0f29a178c90e8903bce9ce58" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;. This is &lt;em&gt;similar&lt;/em&gt; to the &lt;code&gt;r&lt;/code&gt; prefix in Python, or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals. (But it is not &lt;em&gt;identical&lt;/em&gt;; see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;.) It's used to get the raw string form of template strings, that is, substitutions (e.g. &lt;code&gt;${foo}&lt;/code&gt;) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt;) are not.</source>
          <target state="translated">静的 &lt;code&gt;String.raw()&lt;/code&gt; メソッドは、&lt;a href=&quot;../../template_literals&quot;&gt;テンプレートリテラルの&lt;/a&gt;タグ関数です。これは、Pythonの &lt;code&gt;r&lt;/code&gt; プレフィックス、または文字列リテラルのC＃の &lt;code&gt;@&lt;/code&gt; プレフィックスに&lt;em&gt;似&lt;/em&gt;ています。（ただし、&lt;em&gt;同一&lt;/em&gt;ではありませ&lt;em&gt;ん&lt;/em&gt;。&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;この問題の&lt;/a&gt;説明を参照してください。）これは、テンプレート文字列の生の文字列形式を取得するために使用されます。つまり、置換（ &lt;code&gt;${foo}&lt;/code&gt; ）は処理されますが、エスケープ（ &lt;code&gt;\n&lt;/code&gt; ）は処理されません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a8ea9e9db5e6fe0dea4d47b272e5aa77aa474da1" translate="yes" xml:space="preserve">
          <source>The static function &lt;code&gt;&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if any parameter isn't a number and can't be converted into one.</source>
          <target state="translated">静的関数 &lt;code&gt;&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/code&gt; は、渡された最小値の数値を返します。パラメータが数値ではなく、1に変換できない場合は、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="343f98c933105ceddb9c93f3821cb9a718c16e0c" translate="yes" xml:space="preserve">
          <source>The static function &lt;code&gt;Math.min()&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if any parameter isn't a number and can't be converted into one.</source>
          <target state="translated">静的関数 &lt;code&gt;Math.min()&lt;/code&gt; は、渡された最小値の数値を返します。パラメータが数値ではなく、数値に変換できない場合は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="29631328836304ccf3e2ce47dd6de68f5579f442" translate="yes" xml:space="preserve">
          <source>The static method &lt;code&gt;&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;&lt;/code&gt; defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</source>
          <target state="translated">静的メソッド &lt;code&gt;&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;&lt;/code&gt; は、オブジェクトの新しいプロパティを直接定義するか、オブジェクトの既存のプロパティを変更して、オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a47f0ebd85e4368447733e4227d60e812ee3637b" translate="yes" xml:space="preserve">
          <source>The static property &lt;code&gt;String.length&lt;/code&gt; is unrelated to the length of strings, it's the arity of the &lt;code&gt;String&lt;/code&gt; function (loosely, the number of formal parameters it has), which is 1.</source>
          <target state="translated">静的プロパティ &lt;code&gt;String.length&lt;/code&gt; は、文字列の長さとは関係ありません。これは、 &lt;code&gt;String&lt;/code&gt; 関数のアリティ（大まかに言えば、持つ仮パラメーターの数）であり、1です。</target>
        </trans-unit>
        <trans-unit id="cd2c8d431cfc97f7ef0dad5eb64f02608a89c081" translate="yes" xml:space="preserve">
          <source>The static property &lt;code&gt;String.length&lt;/code&gt; returns the value 1.</source>
          <target state="translated">静的プロパティ &lt;code&gt;String.length&lt;/code&gt; は値1を返します。</target>
        </trans-unit>
        <trans-unit id="d9489b7724c11a3e7506bfd4efd8ea6899a4157a" translate="yes" xml:space="preserve">
          <source>The strict equality operators (&lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;Strict Equality Comparison Algorithm&lt;/a&gt; and are intended for performing equality comparisons on operands of the same type. If the operands are of different types, the result is always &lt;code&gt;false&lt;/code&gt; so &lt;code&gt;5 !== '5'&lt;/code&gt;.</source>
          <target state="translated">厳密な等価演算子（ &lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; ）は、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;厳密な等価比較アルゴリズム&lt;/a&gt;を使用し、同じ型のオペランドに対して等価比較を実行することを目的としています。オペランドのタイプが異なる場合、結果は常に &lt;code&gt;false&lt;/code&gt; になるため、 &lt;code&gt;5 !== '5'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2c891432614e0271990b19ee19c1960c4f7ed000" translate="yes" xml:space="preserve">
          <source>The string &quot;GMT&quot;</source>
          <target state="translated">文字列 &quot;GMT&quot;</target>
        </trans-unit>
        <trans-unit id="6088cf870949b49d36a431015f841c203f32b399" translate="yes" xml:space="preserve">
          <source>The string against which the &lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; is compared.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; が比較される文字列。</target>
        </trans-unit>
        <trans-unit id="ea2dee8a6f09197d3ef866b17c4fd784a8a2c4b5" translate="yes" xml:space="preserve">
          <source>The string against which the referring string is compared</source>
          <target state="translated">参照する文字列と比較される文字列</target>
        </trans-unit>
        <trans-unit id="468533e087e1f94dc468f647db1085e7614cb88f" translate="yes" xml:space="preserve">
          <source>The string against which to match the regular expression.</source>
          <target state="translated">正規表現にマッチする文字列。</target>
        </trans-unit>
        <trans-unit id="8791aa250b59014327c5ae3d1bec5e5e7b33faa7" translate="yes" xml:space="preserve">
          <source>The string conversions of all array elements are joined into one string.</source>
          <target state="translated">すべての配列要素の文字列変換は1つの文字列に結合されます。</target>
        </trans-unit>
        <trans-unit id="083e61e70ae1931edd0dd9b748da358341d4a05c" translate="yes" xml:space="preserve">
          <source>The string name of the desired custom section.</source>
          <target state="translated">目的のカスタムセクションの文字列名。</target>
        </trans-unit>
        <trans-unit id="0499197d0f18f7e883f893ecbdf08eba61358189" translate="yes" xml:space="preserve">
          <source>The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is &quot;&quot; (&lt;code&gt;U+0020&lt;/code&gt;).</source>
          <target state="translated">現在の &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; を埋める文字列。 &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; が長すぎてtargetLength内に &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; ない場合は、切り捨てられます。左から右の言語の場合は左端の部分が適用され、右から左の言語の場合は右端が適用されます。このパラメーターのデフォルト値は &quot;&quot;（ &lt;code&gt;U+0020&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3634ae755e3cc6172656cbc241422c078eafe53e" translate="yes" xml:space="preserve">
          <source>The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within the &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;, it will be truncated from the end. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (&lt;code&gt;U+0020 'SPACE'&lt;/code&gt;).</source>
          <target state="translated">現在の &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; を埋める文字列。 &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; が長すぎて &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; 内に留まらない場合、最後から切り捨てられます。デフォルト値は &lt;code&gt;&quot; &quot;&lt;/code&gt; （ &lt;code&gt;U+0020 'SPACE'&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="8949040080f63f417888c8f3d4b5caca1e95b9d2" translate="yes" xml:space="preserve">
          <source>The string to pad the current string with. If this padding string is too long to stay within the &lt;code&gt;targetLength&lt;/code&gt;, it will be truncated from the right. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (U+0020 'SPACE').</source>
          <target state="translated">現在の文字列に埋め込む文字列。このパディング文字列が長すぎて &lt;code&gt;targetLength&lt;/code&gt; 内に収まらない場合は、右側から切り詰められます。デフォルト値は &lt;code&gt;&quot; &quot;&lt;/code&gt; （U + 0020 'SPACE'）です。</target>
        </trans-unit>
        <trans-unit id="3ae9c2ba9c07edac725622631c539ef4861220e2" translate="yes" xml:space="preserve">
          <source>The string to pad the current string with. If this string is too long to stay within the target length, it will be truncated and the left-most part will be applied. The default value for this parameter is &quot; &quot; (U+0020).</source>
          <target state="translated">現在の文字列にパッドを入れる文字列。この文字列が長すぎて目標の長さに収まらない場合は、切り捨てられ、左端の部分が適用されます。このパラメータのデフォルト値は &quot; &quot; (U+0020)です。</target>
        </trans-unit>
        <trans-unit id="6eb20efa8147914bead5cc85faabfd37b0a79ce2" translate="yes" xml:space="preserve">
          <source>The string to parse as JSON. See the &lt;a href=&quot;../json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; object for a description of JSON syntax.</source>
          <target state="translated">JSONとして解析する文字列。JSON構文の説明については、&lt;a href=&quot;../json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;オブジェクトを参照してください。</target>
        </trans-unit>
        <trans-unit id="ece383f4f046e3b10b8fdb40e94943fce8defe5f" translate="yes" xml:space="preserve">
          <source>The string used for separating date and time values, for example &lt;code&gt;&quot;/&quot;&lt;/code&gt;, &lt;code&gt;&quot;,&quot;&lt;/code&gt;, &lt;code&gt;&quot;o'clock&quot;&lt;/code&gt;, &lt;code&gt;&quot;de&quot;&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;code&gt;&quot;/&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;o'clock&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;de&quot;&lt;/code&gt; など、日付と時刻の値を区切るために使用される文字列。</target>
        </trans-unit>
        <trans-unit id="97c70adf07ed6fe421e6ab3aea9f6e11b32d0bad" translate="yes" xml:space="preserve">
          <source>The string used for the day period, for example, &lt;code&gt;&quot;AM&quot;&lt;/code&gt; or &lt;code&gt;&quot;PM&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;AM&quot;&lt;/code&gt; や &lt;code&gt;&quot;PM&quot;&lt;/code&gt; など、その日の期間に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="eea68f2b6d4f128ec3670c07ba8f52cfffd311f9" translate="yes" xml:space="preserve">
          <source>The string used for the day, for example &lt;code&gt;&quot;17&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;17&quot;&lt;/code&gt; のように、その日に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="f7b7a19d8ba4def5ebc35fa32d9269cd27826d41" translate="yes" xml:space="preserve">
          <source>The string used for the era, for example &lt;code&gt;&quot;BC&quot;&lt;/code&gt; or &lt;code&gt;&quot;AD&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;BC&quot;&lt;/code&gt; や &lt;code&gt;&quot;AD&quot;&lt;/code&gt; など、時代に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="e759f6fbbacc6f99271187d7be9864bc5915384e" translate="yes" xml:space="preserve">
          <source>The string used for the hour, for example &lt;code&gt;&quot;3&quot;&lt;/code&gt; or &lt;code&gt;&quot;03&quot;&lt;/code&gt;.</source>
          <target state="translated">時間に使用される文字列。たとえば、 &lt;code&gt;&quot;3&quot;&lt;/code&gt; または &lt;code&gt;&quot;03&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c164fc6c65c7700fa960520236c816173fcc5617" translate="yes" xml:space="preserve">
          <source>The string used for the minute, for example &lt;code&gt;&quot;00&quot;&lt;/code&gt;.</source>
          <target state="translated">分に使用される文字列（ &lt;code&gt;&quot;00&quot;&lt;/code&gt; など)。</target>
        </trans-unit>
        <trans-unit id="60ec32bec7d9d2a13914ab52ebda2d26f201b9c4" translate="yes" xml:space="preserve">
          <source>The string used for the month, for example &lt;code&gt;&quot;12&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;12&quot;&lt;/code&gt; など、月に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="4d19840cd065c09bec79def64ce95d20a60fb6ef" translate="yes" xml:space="preserve">
          <source>The string used for the name of the time zone, for example &lt;code&gt;&quot;UTC&quot;&lt;/code&gt;.</source>
          <target state="translated">タイムゾーンの名前に使用される文字列（ &lt;code&gt;&quot;UTC&quot;&lt;/code&gt; など)。</target>
        </trans-unit>
        <trans-unit id="b1d68127d11a219f5babe3c20efc89826607e6f8" translate="yes" xml:space="preserve">
          <source>The string used for the second, for example &lt;code&gt;&quot;07&quot;&lt;/code&gt; or &lt;code&gt;&quot;42&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;07&quot;&lt;/code&gt; や &lt;code&gt;&quot;42&quot;&lt;/code&gt; など、2番目に使用される文字列。</target>
        </trans-unit>
        <trans-unit id="8d38a4ade74d0ab4b893963b67d1cb09d9f2a404" translate="yes" xml:space="preserve">
          <source>The string used for the weekday, for example &lt;code&gt;&quot;M&quot;&lt;/code&gt;, &lt;code&gt;&quot;Monday&quot;&lt;/code&gt;, or &lt;code&gt;&quot;Montag&quot;&lt;/code&gt;.</source>
          <target state="translated">曜日に使用される文字列。たとえば、 &lt;code&gt;&quot;M&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Monday&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;Montag&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae2ae8cd920d70f01746ef457540b120762ad06a" translate="yes" xml:space="preserve">
          <source>The string used for the year, for example &lt;code&gt;&quot;2012&quot;&lt;/code&gt; or &lt;code&gt;&quot;96&quot;&lt;/code&gt;.</source>
          <target state="translated">年に使用される文字列、たとえば &lt;code&gt;&quot;2012&quot;&lt;/code&gt; や &lt;code&gt;&quot;96&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86421d2891f0d5bb6fd879465cb16df8ec5f0662" translate="yes" xml:space="preserve">
          <source>The string value to search for.</source>
          <target state="translated">検索する文字列の値。</target>
        </trans-unit>
        <trans-unit id="e9bdde92d3cbeffaa082f651f11b497fa77b8fd2" translate="yes" xml:space="preserve">
          <source>The strings to compare against each other.</source>
          <target state="translated">互いに比較するための文字列。</target>
        </trans-unit>
        <trans-unit id="f492cc4dc8b9f08a8ef3581852dc08ee1c45a4bb" translate="yes" xml:space="preserve">
          <source>The structured clone algorithm accepts &lt;code&gt;SharedArrayBuffers&lt;/code&gt; and &lt;code&gt;TypedArrays&lt;/code&gt; mapped onto &lt;code&gt;SharedArrayBuffers&lt;/code&gt;. In both cases, the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object is transmitted to the receiver resulting in a new, private SharedArrayBuffer object in the receiving agent (just as for &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;). However, the shared data block referenced by the two &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects is the same data block, and a side effect to the block in one agent will eventually become visible in the other agent.</source>
          <target state="translated">構造化クローンアルゴリズムは受け入れ &lt;code&gt;SharedArrayBuffers&lt;/code&gt; と &lt;code&gt;TypedArrays&lt;/code&gt; 上にマッピング &lt;code&gt;SharedArrayBuffers&lt;/code&gt; を。どちらの場合も、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトがレシーバーに送信され、結果として、&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の場合&lt;/a&gt;と同様に、受信エージェントに新しいプライベートSharedArrayBufferオブジェクトが生成されます。ただし、2つの &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトによって参照される共有データブロックは同じデータブロックであり、1つのエージェントのブロックに対する副作用は、最終的に他のエージェントに表示されます。</target>
        </trans-unit>
        <trans-unit id="caf06e59dd9d3fd319181700e1588c2227e098f4" translate="yes" xml:space="preserve">
          <source>The subtags identifying languages, scripts, countries (regions), and (rarely used) variants in BCP 47 language tags can be found in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;.</source>
          <target state="translated">BCP 47言語タグの言語、スクリプト、国（地域）、および（まれに使用される）バリアントを&lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;識別するサブタグ&lt;/a&gt;は、IANA言語サブタグレジストリにあります。</target>
        </trans-unit>
        <trans-unit id="a9423bac9c60cd258c03ee904fae2a893cde2301" translate="yes" xml:space="preserve">
          <source>The subtags identifying languages, scripts, regions (including countries), and (rarely used) variants in Unicode BCP 47 locale identifiers are registered in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;. This registry is periodically updated over time, and implementations may not always be up to date, so be careful not to rely too much on tags being universally supported.</source>
          <target state="translated">Unicode BCP 47ロケール識別子の言語、スクリプト、地域（国を含む）、および（めったに使用されない）バリアントを識別する&lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;サブタグ&lt;/a&gt;は、IANA言語サブタグレジストリに登録されます。このレジストリは時間の経過とともに定期的に更新され、実装は常に最新であるとは限らないため、広くサポートされているタグに過度に依存しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="1d96fc08252b76140c13df72ca13f6fd74626dbc" translate="yes" xml:space="preserve">
          <source>The subtraction assignment operator &lt;strong&gt;subtracts&lt;/strong&gt; the value of the right operand from a variable and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Subtraction&quot;&gt;subtraction operator&lt;/a&gt; for more details.</source>
          <target state="translated">減算代入演算子は、変数から右のオペランドの値を&lt;strong&gt;減算&lt;/strong&gt;し、結果を変数に代入します。詳細については、&lt;a href=&quot;arithmetic_operators#Subtraction&quot;&gt;減算演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5a192606cd2379497ef7500778ef0dedd487da3" translate="yes" xml:space="preserve">
          <source>The subtraction operator subtracts the two operands, producing their difference.</source>
          <target state="translated">減算演算子は、2つのオペランドを減算し、その差分を生成します。</target>
        </trans-unit>
        <trans-unit id="e6dc35427b4f1231c395f42c780c2c32dc31571c" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;&lt;em&gt;function&lt;/em&gt;.arguments&lt;/code&gt; is deprecated. The recommended way to access the &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object available within functions is simply to refer to the variable &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構文 &lt;code&gt;&lt;em&gt;function&lt;/em&gt;.arguments&lt;/code&gt; は非推奨です。関数内で使用可能な&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトにアクセスするための推奨される方法は、単に変数&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;を参照することです。</target>
        </trans-unit>
        <trans-unit id="35225de91c22309587e0765dbda7a1b56bc3fa5c" translate="yes" xml:space="preserve">
          <source>The syntax consists of the keyword &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;, a dot, and the identifier &lt;code&gt;meta&lt;/code&gt;. Normally the left-hand side of the dot is the object on which property access is performed, but here &lt;code&gt;import&lt;/code&gt; is not really an object.</source>
          <target state="translated">構文は、キーワード&lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;、ドット、および識別子 &lt;code&gt;meta&lt;/code&gt; で構成されます。通常、ドットの左側はプロパティアクセスが実行されるオブジェクトですが、ここでは &lt;code&gt;import&lt;/code&gt; は実際にはオブジェクトではありません。</target>
        </trans-unit>
        <trans-unit id="661ebe8cbb257036b3bf53968d2ada79c762b25a" translate="yes" xml:space="preserve">
          <source>The tag function can then perform whatever operations on these arguments you wish, and return the manipulated string. (Alternatively, it can return something completely different, as described in one of the following examples.)</source>
          <target state="translated">tag関数は、これらの引数に対して任意の操作を行い、操作された文字列を返します (あるいは、以下の例で説明するように、完全に異なるものを返すこともできます)。(あるいは、以下の例で説明するように、全く異なるものを返すこともできます)。</target>
        </trans-unit>
        <trans-unit id="dccb74fcc0fb4fc59af8e4a4d10de9e91cf03e6f" translate="yes" xml:space="preserve">
          <source>The tangent of the given number.</source>
          <target state="translated">与えられた数の正接。</target>
        </trans-unit>
        <trans-unit id="469f21f213b41d308c8920db480a81cde33a180c" translate="yes" xml:space="preserve">
          <source>The target function to call.</source>
          <target state="translated">呼び出す対象の関数。</target>
        </trans-unit>
        <trans-unit id="7875ceec72aba0e247daa5bcc9e1dd435300c2d4" translate="yes" xml:space="preserve">
          <source>The target object &amp;mdash; what to apply the sources&amp;rsquo; properties to, which is returned after it is modified.</source>
          <target state="translated">ターゲットオブジェクト&amp;mdash;ソースのプロパティを何に適用するか。変更後に返されます。</target>
        </trans-unit>
        <trans-unit id="00cce84c44330816293f399e47c6565e41c09eab" translate="yes" xml:space="preserve">
          <source>The target object from which to get the own keys.</source>
          <target state="translated">自分の鍵を取得する対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4e874cec897bdf6f3133cdf496c41e2ff9d741f9" translate="yes" xml:space="preserve">
          <source>The target object in which to look for the property.</source>
          <target state="translated">プロパティを探す対象となるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="051b09e678e5463dcd53a2c00c66fcc5f1782088" translate="yes" xml:space="preserve">
          <source>The target object of which to get the prototype.</source>
          <target state="translated">プロトタイプを取得する対象オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3bdead44f0d65b55d04c7601b57d65563c409e3b" translate="yes" xml:space="preserve">
          <source>The target object of which to set the prototype.</source>
          <target state="translated">プロトタイプを設定するターゲットオブジェクト。</target>
        </trans-unit>
        <trans-unit id="bf0854843b5e6ba404edf72c5e026e5f2141d555" translate="yes" xml:space="preserve">
          <source>The target object on which to define the property.</source>
          <target state="translated">プロパティを定義するターゲット・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="675a5362df487c69972974a9c10fa55e04caf16c" translate="yes" xml:space="preserve">
          <source>The target object on which to delete the property.</source>
          <target state="translated">プロパティを削除する対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8b8960b4509e85a95deceb884878547ff861b0fd" translate="yes" xml:space="preserve">
          <source>The target object on which to get the property.</source>
          <target state="translated">プロパティを取得するターゲット・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6616a2e8a46edcbbb895a56e27f583fe0a532ade" translate="yes" xml:space="preserve">
          <source>The target object on which to prevent extensions.</source>
          <target state="translated">拡張子を防止する対象オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5a6cbb29e073667475e26ed91074bb4afb428091" translate="yes" xml:space="preserve">
          <source>The target object on which to set the property.</source>
          <target state="translated">プロパティを設定するターゲット・オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3dac858a5554f83564f7741da52fdb4a7aaf52dc" translate="yes" xml:space="preserve">
          <source>The target object which to check if it is extensible.</source>
          <target state="translated">拡張性があるかどうかをチェックする対象のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="ccd29524854cacce5352c71cfb138711774ab1b4" translate="yes" xml:space="preserve">
          <source>The target object.</source>
          <target state="translated">対象となるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="040c0d8b033a7367e4036448381976cfc9922ebe" translate="yes" xml:space="preserve">
          <source>The target of the split operation.</source>
          <target state="translated">分割操作の対象。</target>
        </trans-unit>
        <trans-unit id="7a67583055232db8b491024de029833ccb0310ac" translate="yes" xml:space="preserve">
          <source>The temporal dead zone and &lt;code&gt;typeof&lt;/code&gt;</source>
          <target state="translated">一時的なデッドゾーンと &lt;code&gt;typeof&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af12426e57044936bc5a7828d384453e2f121825" translate="yes" xml:space="preserve">
          <source>The termination condition of a promise determines the &quot;settled&quot; state of the next promise in the chain. Any termination other than a &lt;code&gt;throw&lt;/code&gt; creates a &quot;resolved&quot; state while terminating with a &lt;code&gt;throw&lt;/code&gt; creates a &quot;rejected&quot; state.</source>
          <target state="translated">約束の終了条件は、チェーン内の次の約束の「解決済み」状態を決定します。 &lt;code&gt;throw&lt;/code&gt; 以外の終了は「解決済み」状態を作成し、 &lt;code&gt;throw&lt;/code&gt; 終了すると「拒否」状態を作成します。</target>
        </trans-unit>
        <trans-unit id="824ca534e0a3140303d94cf320dfce9866fe7a67" translate="yes" xml:space="preserve">
          <source>The ternary operator is right-associative, which means it can be &quot;chained&quot; in the following way, similar to an &lt;code&gt;if &amp;hellip; else if &amp;hellip; else if &amp;hellip; else&lt;/code&gt; chain:</source>
          <target state="translated">三項演算子は右結合です。つまり、 &lt;code&gt;if &amp;hellip; else if &amp;hellip; else if &amp;hellip; else&lt;/code&gt; チェーンと同様に、次の方法で「連鎖」できます。</target>
        </trans-unit>
        <trans-unit id="f17ba73f80e0163509c9c072d0ed6e5856bb4cbe" translate="yes" xml:space="preserve">
          <source>The text of the pattern.</source>
          <target state="translated">パターンのテキストです。</target>
        </trans-unit>
        <trans-unit id="e8bf802ef8806ed6f866faf091bb463b602b37d4" translate="yes" xml:space="preserve">
          <source>The text of the regular expression or, as of ES5, another RegExp object (or literal) to copy (the latter for the two RegExp constructor notations only).</source>
          <target state="translated">正規表現のテキスト、または ES5 ではコピーする別の RegExp オブジェクト(またはリテラル)(後者は 2 つの RegExp コンストラクタ表記のみ)。</target>
        </trans-unit>
        <trans-unit id="50666938177ee823dfcefe3edcfba80d5469a3f9" translate="yes" xml:space="preserve">
          <source>The text of the regular expression.</source>
          <target state="translated">正規表現のテキスト。</target>
        </trans-unit>
        <trans-unit id="195791289d43b75e8e708dc661fc4d0ecceca467" translate="yes" xml:space="preserve">
          <source>The third argument is ignored by &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/a&gt;&amp;mdash;but &lt;em&gt;not&lt;/em&gt; the second one! This is the source of possible confusion.</source>
          <target state="translated">3番目の引数は&lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/a&gt;によって無視されますが、2番目の引数は無視され&lt;em&gt;ません&lt;/em&gt;。これが混乱の原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4e8de670d0da361927bb0beeeb9f6c7b622d64e7" translate="yes" xml:space="preserve">
          <source>The this argument for the call.</source>
          <target state="translated">呼び出しのためのこの引数。</target>
        </trans-unit>
        <trans-unit id="78bf0895bd11812425093c3ff20374b2395fe39e" translate="yes" xml:space="preserve">
          <source>The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.</source>
          <target state="translated">ソートの時間的・空間的な複雑さは実装に依存するため保証できません。</target>
        </trans-unit>
        <trans-unit id="0bc2d6527e1e2ae900dd565b052cea11a754d135" translate="yes" xml:space="preserve">
          <source>The time and space complexity of the sort cannot be guaranteed as it is implementation dependent.</source>
          <target state="translated">ソートの時間的・空間的な複雑さは実装に依存するため保証できません。</target>
        </trans-unit>
        <trans-unit id="bad9736ef06f86e7966289bce2abb4832b000b82" translate="yes" xml:space="preserve">
          <source>The time zone offset returned is the one that applies for the Date that it's called on.</source>
          <target state="translated">返されるタイムゾーンオフセットは、それが呼び出された日付に適用されるものです。</target>
        </trans-unit>
        <trans-unit id="6e8eb90b7012bf77a3d29bc66b2ceddfe35221e7" translate="yes" xml:space="preserve">
          <source>The time zone offset returned is the one that applies for the Date that it's called on. Where the host system is configured for daylight saving, the offset will change depending on the date and time that the Date represents and that daylight saving applies.</source>
          <target state="translated">返されるタイムゾーンオフセットは、それが呼び出された日付に適用されるものです。ホストシステムがサマータイム用に構成されている場合、オフセットは Date が表す日付と時間、およびサマータイムが適用される日付に応じて変わります。</target>
        </trans-unit>
        <trans-unit id="69013b7077c0106667c8e85d0871460c6d1ede7f" translate="yes" xml:space="preserve">
          <source>The time zone to use. The only value implementations must recognize is &lt;code&gt;&quot;UTC&quot;&lt;/code&gt;; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA time zone database&lt;/a&gt;, such as &lt;code&gt;&quot;Asia/Shanghai&quot;&lt;/code&gt;, &lt;code&gt;&quot;Asia/Kolkata&quot;&lt;/code&gt;, &lt;code&gt;&quot;America/New_York&quot;&lt;/code&gt;.</source>
          <target state="translated">使用するタイムゾーン。実装が認識しなければならない唯一の値は &lt;code&gt;&quot;UTC&quot;&lt;/code&gt; です。デフォルトはランタイムのデフォルトのタイムゾーンです。実装では、 &lt;code&gt;&quot;Asia/Shanghai&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Asia/Kolkata&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;America/New_York&quot;&lt;/code&gt; など、&lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANAタイムゾーンデータベース&lt;/a&gt;のタイムゾーン名も認識される場合があります。</target>
        </trans-unit>
        <trans-unit id="733c8e3f5bb06fb45edb56167b6f5498d9a8721b" translate="yes" xml:space="preserve">
          <source>The time-zone offset is the difference, in minutes, from local time to UTC.</source>
          <target state="translated">タイムゾーンのオフセットは、現地時間からUTCまでの差(分)です。</target>
        </trans-unit>
        <trans-unit id="ed347c9f4cd940be64c7f00782838e610c8b23ba" translate="yes" xml:space="preserve">
          <source>The time-zone offset is the difference, in minutes, from local time to UTC. Note that this means that the offset is positive if the local timezone is behind UTC and negative if it is ahead. For example, for time zone UTC+10:00 (Australian Eastern Standard Time, Vladivostok Time, Chamorro Standard Time), -600 will be returned.</source>
          <target state="translated">タイムゾーンのオフセットは、現地時間からUTCまでの差(分)です。これは、ローカルタイムゾーンがUTCより後ろにある場合はオフセットが正になり、前にある場合は負になることを意味することに注意してください。例えば、タイムゾーン UTC+10:00 (オーストラリア東部標準時、ウラジオストク時間、チャモロ標準時)の場合、-600が返されます。</target>
        </trans-unit>
        <trans-unit id="d8894cfe4467d5eb790a05c0aee3d5ffaca1c075" translate="yes" xml:space="preserve">
          <source>The trigonometric functions &lt;code&gt;sin()&lt;/code&gt;, &lt;code&gt;cos()&lt;/code&gt;, &lt;code&gt;tan()&lt;/code&gt;, &lt;code&gt;asin()&lt;/code&gt;, &lt;code&gt;acos()&lt;/code&gt;, &lt;code&gt;atan()&lt;/code&gt;, and &lt;code&gt;atan2()&lt;/code&gt; expect (and return) angles in &lt;em&gt;radians&lt;/em&gt;.</source>
          <target state="translated">三角関数 &lt;code&gt;sin()&lt;/code&gt; 、 &lt;code&gt;cos()&lt;/code&gt; 、 &lt;code&gt;tan()&lt;/code&gt; 、 &lt;code&gt;asin()&lt;/code&gt; 、 &lt;code&gt;acos()&lt;/code&gt; 、 &lt;code&gt;atan()&lt;/code&gt; 、および &lt;code&gt;atan2()&lt;/code&gt; は、&lt;em&gt;ラジアン単位の&lt;/em&gt;角度を期待（および返す）します。</target>
        </trans-unit>
        <trans-unit id="b30c359a4c613b1c190581117b776bc087a1dc16" translate="yes" xml:space="preserve">
          <source>The two's complement guarantees that the left-most bit is 0 when the number is positive and 1 when the number is negative. Thus, it is called the &lt;em&gt;sign bit&lt;/em&gt;.</source>
          <target state="translated">2の補数は、左端のビットが、数値が正の場合は0、負の場合は1であることを保証します。したがって、これは&lt;em&gt;符号ビット&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f0e6e55a08664fd87f1098bd9485f986f7871d6" translate="yes" xml:space="preserve">
          <source>The type of each array element is either a &lt;a href=&quot;../../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各配列要素のタイプは、&lt;a href=&quot;../../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;いずれかです。</target>
        </trans-unit>
        <trans-unit id="e35aa223fd73eda1f795b991cd0cb3da98fedde9" translate="yes" xml:space="preserve">
          <source>The type of individual arguments can be determined by indexing &lt;code&gt;arguments&lt;/code&gt;:</source>
          <target state="translated">個々の引数のタイプは、引数にインデックスを付けることで決定でき &lt;code&gt;arguments&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51b6a2ef8e29331a08d48d85c1cc207b866ee6df" translate="yes" xml:space="preserve">
          <source>The type to use. Possible values are:</source>
          <target state="translated">使用するタイプ。使用可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2a7eaaa9a5e1205e7f93111a1f880f2d40b548b1" translate="yes" xml:space="preserve">
          <source>The type used (&lt;code&gt;cardinal&lt;/code&gt; or &lt;code&gt;ordinal&lt;/code&gt;).</source>
          <target state="translated">使用されるタイプ（ &lt;code&gt;cardinal&lt;/code&gt; または &lt;code&gt;ordinal&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c37b46bd7b92c7bb3ebf9ecc3f4d45f87e92652c" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;every&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列が &lt;code&gt;every&lt;/code&gt; 呼び出されました。</target>
        </trans-unit>
        <trans-unit id="5298f166f10ed90e1cdd38e5c53e23ec0c73dbe8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;findIndex&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列 &lt;code&gt;findIndex&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="b983755540296d3bf31c620e2154efed50f704b8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;map()&lt;/code&gt; was called upon.</source>
          <target state="translated">型付き配列 &lt;code&gt;map()&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="e38de23fabf4e3d3556dbf8011fd71dea9a9fba8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;map&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列 &lt;code&gt;map&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="c0c164fa750b8ed95b7699fd8459ee95382c5425" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;reduce&lt;/code&gt; was called upon.</source>
          <target state="translated">型指定された配列 &lt;code&gt;reduce&lt;/code&gt; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="075012c9a0aa358b8a4f8937b9444b4c48842acf" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;some&lt;/code&gt; was called upon.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; の型付き配列が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="93256d9b5ee445d4026c265fa2b246dc43bae9bc" translate="yes" xml:space="preserve">
          <source>The unary negation operator converts its operand to Number type and then negates it.</source>
          <target state="translated">単項否定演算子は、そのオペランドをNumber型に変換して否定します。</target>
        </trans-unit>
        <trans-unit id="a2d8c115850a5d12a72f7054b87d2ed428d4640b" translate="yes" xml:space="preserve">
          <source>The unary negation operator precedes its operand and negates it.</source>
          <target state="translated">単項否定演算子は、そのオペランドの前に、そのオペランドを否定します。</target>
        </trans-unit>
        <trans-unit id="0970e3ebe9139b263bea5622849a0f6b003cdc95" translate="yes" xml:space="preserve">
          <source>The unary plus operator converts its operand to Number type.</source>
          <target state="translated">単項プラス演算子は、そのオペランドを数値型に変換します。</target>
        </trans-unit>
        <trans-unit id="470a22fa7fae7b57fb487e03bf1af5364fe8fa03" translate="yes" xml:space="preserve">
          <source>The unary plus operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already. Although unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number. It can convert string representations of integers and floats, as well as the non-string values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;. Integers in both decimal and hexadecimal (&quot;0x&quot;-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;.</source>
          <target state="translated">単項プラス演算子は、そのオペランドの前にあり、そのオペランドに評価されますが、それがまだ数値でない場合は、数値に変換しようとします。単項否定（-）も非数値を変換できますが、単項プラスは、数値に対して他の演算を実行しないため、何かを数値に変換する最も速く好ましい方法です。整数と浮動小数点数の文字列表現、および文字列以外の値 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、および &lt;code&gt;null&lt;/code&gt; を変換できます。 10進数と16進数（ &quot;0x&quot;で始まる）の両方の形式の整数がサポートされています。負の数がサポートされています（16進数はサポートされていません）。特定の値を解析できない場合は、&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;と評価されます。</target>
        </trans-unit>
        <trans-unit id="59a4d2b2661caed6293860fbd4d244fb09e13a12" translate="yes" xml:space="preserve">
          <source>The unsigned right shift assignment operator moves the specified amount of bits to the right and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Unsigned_right_shift&quot;&gt; unsigned right shift operator&lt;/a&gt; for more details.</source>
          <target state="translated">符号なし右シフト代入演算子は、指定された量のビットを右に移動し、結果を変数に代入します。詳細については、&lt;a href=&quot;bitwise_operators#Unsigned_right_shift&quot;&gt;符号なし右シフト演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="25e024a19a4d67d0856fd45914d89cb216b0fc0c" translate="yes" xml:space="preserve">
          <source>The use case for this syntax over using the dot notation (&lt;code&gt;Array.prototype.values()&lt;/code&gt;) is in a case where you don't know what object is going to be ahead of time. If you have a function that takes an iterator and then iterate over the value, but don't know if that Object is going to have a [Iterable].prototype.values method. This could be a built-in object like &lt;a href=&quot;../string/@@iterator&quot;&gt;String&lt;/a&gt; object or a custom object.</source>
          <target state="translated">ドット表記（ &lt;code&gt;Array.prototype.values()&lt;/code&gt; ）を使用する場合のこの構文の使用例は、どのオブジェクトが事前に使用されるかわからない場合です。イテレータを受け取ってから値を反復処理する関数があるが、そのオブジェクトに[Iterable] .prototype.valuesメソッドがあるかどうかわからない場合。これは、&lt;a href=&quot;../string/@@iterator&quot;&gt;String&lt;/a&gt;オブジェクトやカスタムオブジェクトなどの組み込みオブジェクトである可能性があります。</target>
        </trans-unit>
        <trans-unit id="7a60d03695e2ab45d0e87e8a25df20b17610f271" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial and discouraged. It was never originally included in the ECMAScript language spec, but modern browsers implemented it anyway. Only recently was the &lt;code&gt;__proto__&lt;/code&gt; property standardized by the ECMAScript 2015 specification for compatibility with web browsers, so it will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt;&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt;&lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; の使用は物議を醸し、推奨されていません。もともとECMAScript言語仕様に含まれていませんでしたが、最近のブラウザはとにかくそれを実装しました。 &lt;code&gt;__proto__&lt;/code&gt; プロパティがECMAScript2015仕様によって標準化され、Webブラウザーとの互換性が確保されたのはごく最近のことであるため、将来的にサポートされる予定です。それは賛成で廃止され&lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/getprototypeof&quot;&gt; &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; &lt;/a&gt;（設定、しかしまだ &lt;code&gt;[[Prototype]]&lt;/code&gt; オブジェクトのと、パフォーマンスが懸念される場合は避けるべき遅い操作です）。</target>
        </trans-unit>
        <trans-unit id="267aaa42385e594f47748569e88ec1144f8cbe9f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial, and has been discouraged. It was never originally included in the EcmaScript language spec, but modern browsers decided to implement it anyway. Only recently, the &lt;code&gt;__proto__&lt;/code&gt; property has been standardized in the ECMAScript 2015 language specification for web browsers to ensure compatibility, so will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt;&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt;&lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; の使用については議論の余地があり、推奨されていません。もともとはEcmaScript言語仕様には含まれていませんでしたが、最近のブラウザはとにかくそれを実装することにしました。最近になって、 &lt;code&gt;__proto__&lt;/code&gt; プロパティは、互換性を確保するためにWebブラウザーのECMAScript 2015言語仕様で標準化されたため、将来サポートされる予定です。&lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/getprototypeof&quot;&gt; &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; &lt;/a&gt;の代わりに非推奨になりました（ただし、オブジェクトの &lt;code&gt;[[Prototype]]&lt;/code&gt; の設定は遅い操作なので、パフォーマンスが問題になる場合は避けてください）。</target>
        </trans-unit>
        <trans-unit id="63096decad056d7f99c64a85a1b5e24a024a4572" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; is written with a literal: &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is not an identifier for a property of the global object, like &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be. Instead, &lt;code&gt;null&lt;/code&gt; expresses a lack of identification, indicating that a variable points to no object. In APIs, &lt;code&gt;null&lt;/code&gt; is often retrieved in a place where an object can be expected but no object is relevant.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; はリテラルnullで書き込まれ &lt;code&gt;null&lt;/code&gt; 。 &lt;code&gt;null&lt;/code&gt; は、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;ように、グローバルオブジェクトのプロパティの識別子ではありません。代わりに、 &lt;code&gt;null&lt;/code&gt; は識別の欠如を表し、変数がオブジェクトを指していないことを示します。APIでは、多くの場合、オブジェクトが期待できる場所に &lt;code&gt;null&lt;/code&gt; が取得されますが、関連するオブジェクトはありません。</target>
        </trans-unit>
        <trans-unit id="85b116be763af0011adcca25c9521457c55df529" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; and is treated as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy&lt;/a&gt; for boolean operations.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; は、オブジェクト値が意図的に存在しないことを表します。これはJavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;の1つであり、ブール演算では&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;偽物&lt;/a&gt;として扱われます。</target>
        </trans-unit>
        <trans-unit id="33b4500099924c787f1bc7d8f8f6e45953665b50" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt;.</source>
          <target state="translated">値 &lt;code&gt;null&lt;/code&gt; は、オブジェクト値が意図的に存在しないことを表します。JavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;の1つです。</target>
        </trans-unit>
        <trans-unit id="bff8273e82837d0de52f6e70b8fd3d9415c07ae2" translate="yes" xml:space="preserve">
          <source>The value associated with the property (data descriptors only).</source>
          <target state="translated">プロパティに関連付けられた値(データ記述子のみ)。</target>
        </trans-unit>
        <trans-unit id="a67dddbd2bbd0115cca20e5cd07cf3e22cf36da9" translate="yes" xml:space="preserve">
          <source>The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).</source>
          <target state="translated">プロパティに関連付けられた値。有効な JavaScript の値 (数値、オブジェクト、関数など)を指定することができます。</target>
        </trans-unit>
        <trans-unit id="59a3562a0724b93aba945b7a64c8a3d5ba95b25c" translate="yes" xml:space="preserve">
          <source>The value at the given position (&lt;code&gt;typedArray[index]&lt;/code&gt;).</source>
          <target state="translated">指定された位置の値（ &lt;code&gt;typedArray[index]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0af3009ff47cbbfab21300bac505703ea7352b22" translate="yes" xml:space="preserve">
          <source>The value contained in the the current position in the Set. The same value is passed for both arguments.</source>
          <target state="translated">セット内の現在の位置に含まれる値。両方の引数に同じ値が渡されます。</target>
        </trans-unit>
        <trans-unit id="8ee5fc3c0f69f15c01c307dab39bc4d88cd59ac3" translate="yes" xml:space="preserve">
          <source>The value contained inside the global variable &amp;mdash; this can be used to directly set and get the global's value.</source>
          <target state="translated">グローバル変数内に含まれる値&amp;mdash;これは、グローバルの値を直接設定および取得するために使用できます。</target>
        </trans-unit>
        <trans-unit id="992ff3c59c8217dbd05be959d8d3c24fa1b74e5f" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;%GeneratorPrototype%&lt;/code&gt;.</source>
          <target state="translated">値は &lt;code&gt;%GeneratorPrototype%&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="709c0fd06926b7c507c3fc1b3ee8b80d5d5acfa2" translate="yes" xml:space="preserve">
          <source>The value is only read-only for primitive values such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;&quot;test&quot;&lt;/code&gt;.</source>
          <target state="translated">この値は、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;&quot;test&quot;&lt;/code&gt; などのプリミティブ値に対してのみ読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="795679041097cce24480b245a846f179c329ac5b" translate="yes" xml:space="preserve">
          <source>The value is the same as &lt;a href=&quot;parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; of the global object.</source>
          <target state="translated">値は、グローバルオブジェクトの&lt;a href=&quot;parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="59cece73f49dc6e713d1fbe3528758aa6ce588d0" translate="yes" xml:space="preserve">
          <source>The value is the same as &lt;a href=&quot;parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; of the global object.</source>
          <target state="translated">値は、グローバルオブジェクトの&lt;a href=&quot;parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="2169594e1b3abf56f5cd7c0c31ebbaaaa0dae79b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Date.length&lt;/code&gt; is 7. This is the number of arguments handled by the constructor.</source>
          <target state="translated">&lt;code&gt;Date.length&lt;/code&gt; の値は7です。これは、コンストラクターによって処理される引数の数です。</target>
        </trans-unit>
        <trans-unit id="4a427b820317c84e0876360cc68648a291f62b99" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; is the same as the negative value of the global object's &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">値 &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; とは、グローバルオブジェクトの負の値と同じである&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="7ad4e9812d1ae85de534771e604c469c669fa5e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; is the same as the value of the global object's &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">値 &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; とは、グローバルオブジェクトの値と同じである&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;プロパティ。</target>
        </trans-unit>
        <trans-unit id="24c4ee9f0fe214492d89ff0a9f0d1ee0f239ed43" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;RegExp.length&lt;/code&gt; is 2.</source>
          <target state="translated">&lt;code&gt;RegExp.length&lt;/code&gt; の値は2です。</target>
        </trans-unit>
        <trans-unit id="3d8c65faad19f540a737c41845ed5faf6bc1720f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;global&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag indicates that the regular expression should be tested against all possible matches in a string. A regular expression defined as both &lt;code&gt;global&lt;/code&gt; (&quot;&lt;code&gt;g&lt;/code&gt;&quot;) and &lt;code&gt;sticky&lt;/code&gt; (&quot;&lt;code&gt;y&lt;/code&gt;&quot;) will ignore the &lt;code&gt;global&lt;/code&gt; flag and perform sticky matches.</source>
          <target state="translated">値は &lt;code&gt;global&lt;/code&gt; あり&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「IF &lt;code&gt;g&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。 「 &lt;code&gt;g&lt;/code&gt; 」フラグは、正規表現を文字列内のすべての可能な一致に対してテストする必要があることを示します。 &lt;code&gt;global&lt;/code&gt; （ &quot; &lt;code&gt;g&lt;/code&gt; &quot;）と &lt;code&gt;sticky&lt;/code&gt; （ &quot; &lt;code&gt;y&lt;/code&gt; &quot;）の両方として定義された正規表現は、 &lt;code&gt;global&lt;/code&gt; フラグを無視してスティッキーマッチを実行します。</target>
        </trans-unit>
        <trans-unit id="2c5f64834e9e94e343e9f6e0919b24594b4a8b2d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;ignoreCase&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag indicates that case should be ignored while attempting a match in a string.</source>
          <target state="translated">値 &lt;code&gt;ignoreCase&lt;/code&gt; ははある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「ならば &lt;code&gt;i&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。 「 &lt;code&gt;i&lt;/code&gt; 」フラグは、文字列での一致を試みる間、大文字と小文字を無視する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="a685c128fb38aa442155516a7c8dbad6545a579b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;multiline&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and is true if the &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag was used; otherwise, false. The &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag indicates that a multiline input string should be treated as multiple lines. For example, if &quot;&lt;code&gt;m&lt;/code&gt;&quot; is used, &quot;&lt;code&gt;^&lt;/code&gt;&quot; and &quot;&lt;code&gt;$&lt;/code&gt;&quot; change from matching at only the start or end of the entire string to the start or end of any line within the string.</source>
          <target state="translated">値は &lt;code&gt;multiline&lt;/code&gt; あり&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;および「場合も同様である &lt;code&gt;m&lt;/code&gt; 」フラグを使用しました。それ以外の場合はfalse。「 &lt;code&gt;m&lt;/code&gt; 」フラグは、複数行の入力文字列を複数行として扱う必要があることを示します。たとえば、「 &lt;code&gt;m&lt;/code&gt; 」が使用されている場合、「 &lt;code&gt;^&lt;/code&gt; 」と「 &lt;code&gt;$&lt;/code&gt; 」は、文字列全体の最初または最後のみのマッチングから、文字列内の任意の行の最初または最後に変更されます。</target>
        </trans-unit>
        <trans-unit id="66ec41c802e7001a78f1b16509dd083319cbe7b8" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;size&lt;/code&gt; is an integer representing how many entries the &lt;code&gt;Map&lt;/code&gt; object has. A set accessor function for &lt;code&gt;size&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;; you can not change this property.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; の値は、 &lt;code&gt;Map&lt;/code&gt; オブジェクトのエントリ数を表す整数です。 &lt;code&gt;size&lt;/code&gt; 設定アクセサ関数は &lt;code&gt;undefined&lt;/code&gt; です。このプロパティは変更できません。</target>
        </trans-unit>
        <trans-unit id="e86dca3fbd0b3bf54891655d51af4b975b20157f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;size&lt;/code&gt; is an integer representing how many entries the &lt;code&gt;Set&lt;/code&gt; object has. A set accessor function for &lt;code&gt;size&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;; you cannot change this property.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; の値は、 &lt;code&gt;Set&lt;/code&gt; オブジェクトのエントリ数を表す整数です。 &lt;code&gt;size&lt;/code&gt; 設定アクセサ関数は &lt;code&gt;undefined&lt;/code&gt; です。このプロパティは変更できません。</target>
        </trans-unit>
        <trans-unit id="4656ba10a86c93d64d47c6d7344086f608769c22" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;sticky&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and true if the &quot;&lt;code&gt;y&lt;/code&gt;&quot; flag was used; otherwise, false. The &quot;&lt;code&gt;y&lt;/code&gt;&quot; flag indicates that it matches only from the index indicated by the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of this regular expression in the target string (and does not attempt to match from any later indexes). A regular expression defined as both &lt;code&gt;sticky&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; ignores the &lt;code&gt;global&lt;/code&gt; flag.</source>
          <target state="translated">値は &lt;code&gt;sticky&lt;/code&gt; ある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;「場合、真 &lt;code&gt;y&lt;/code&gt; 」フラグを使用しました。それ以外の場合はfalse。「 &lt;code&gt;y&lt;/code&gt; 」フラグは、ターゲット文字列内のこの正規表現の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティで示されるインデックスからのみ一致することを示します（以降のインデックスからは一致しません）。 &lt;code&gt;sticky&lt;/code&gt; と &lt;code&gt;global&lt;/code&gt; 両方として定義された正規表現は、 &lt;code&gt;global&lt;/code&gt; フラグを無視します。</target>
        </trans-unit>
        <trans-unit id="53cb066a0b00c5a9dd351ed993a35d82f72a2023" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ac6f3c7766f1963a25c1aa798c181b73ecbbc5c" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;, it can be an object that inherits from &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">ゲッターが検出された場合の &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; への呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;とともに使用する場合、 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; から継承するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="d8bdcf4b90977169bddf14a9adf7133b7dbba906" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a setter is encountered.</source>
          <target state="translated">セッターが検出された場合の &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; への呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="a2eb1aec06ff39190817095f070f51d570788916" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="417434a4e709b850361422f0142eca501ad2853d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;target&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;, it can be an object that inherits from the target.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;target&lt;/code&gt; ゲッターが発生した場合。&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;で使用する場合、ターゲットから継承するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="0afaed19edc70c8ac45928336a8a643ec2b894f1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;target&lt;/code&gt; if a setter is encountered.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; への呼び出しのために提供 &lt;code&gt;target&lt;/code&gt; セッターが発生した場合。</target>
        </trans-unit>
        <trans-unit id="9e6fecd45df2f4a2ad6b9eecbceab69bbe9a0a0b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;em&gt;&lt;code&gt;target&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;target&lt;/code&gt; &lt;/em&gt;の呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae126c42ae27c396aedfe16bb6ca187f7069b0c0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;unicode&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag was used; otherwise &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag enables various Unicode-related features. With the &quot;u&quot; flag, any Unicode code point escapes will be interpreted as such, for example.</source>
          <target state="translated">値 &lt;code&gt;unicode&lt;/code&gt; ある&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;true&lt;/code&gt; 「IF &lt;code&gt;u&lt;/code&gt; 」フラグを使用しました。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。&quot; &lt;code&gt;u&lt;/code&gt; &quot;フラグは、さまざまなUnicode関連の機能を有効にします。たとえば、「u」フラグを使用すると、Unicodeコードポイントエスケープがそのように解釈されます。</target>
        </trans-unit>
        <trans-unit id="7ab647412c5ad3ef19440885055d8e14d398f0bd" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;yield*&lt;/code&gt; expression itself</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 式自体の値</target>
        </trans-unit>
        <trans-unit id="ba39ac25730a8f654bae49a2a26d1203596c89d0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;yield*&lt;/code&gt; expression itself is the value returned by that iterator when it's closed (i.e., when &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">値 &lt;code&gt;yield*&lt;/code&gt; 式自体は、それが閉じていたときにその反復子が返した値である（すなわち、時に &lt;code&gt;done&lt;/code&gt; ている &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8a17dbfd44499f94b3e43c816bf4f59f07edb8c4" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;length&lt;/code&gt; property is 0.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; プロパティの値は0です。</target>
        </trans-unit>
        <trans-unit id="fb7c54c8a4d05764d8d13573a8581e7d617334d5" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;length&lt;/code&gt; property is an integer with a positive sign and a value less than 2 to the 32nd power (2&lt;sup&gt;32&lt;/sup&gt;).</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; プロパティの値は、正の符号と2の32乗（2 &lt;sup&gt;32&lt;/sup&gt;）未満の値を持つ整数です。</target>
        </trans-unit>
        <trans-unit id="b4b98aa8f02d4951ad92b2ef43da39dc12d9e43a" translate="yes" xml:space="preserve">
          <source>The value of the arguments property is normally null if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned.</source>
          <target state="translated">argumentsプロパティの値は、進行中の関数の未解決の呼び出しがない場合(つまり、関数が呼び出されたがまだ返されていない場合)は、通常NULLになります。</target>
        </trans-unit>
        <trans-unit id="90592bbd3cdb1e13a6675e34e8b7c25f36c0f806" translate="yes" xml:space="preserve">
          <source>The value of the current element being processed in the array.</source>
          <target state="translated">配列内で処理されている現在の要素の値。</target>
        </trans-unit>
        <trans-unit id="9033b77c9e690b9b0b893a3d87ae53a8d2aad20c" translate="yes" xml:space="preserve">
          <source>The value of the element</source>
          <target state="translated">要素の値</target>
        </trans-unit>
        <trans-unit id="5a0b37e004bcdda51419bfe3b87b408c5e919ba3" translate="yes" xml:space="preserve">
          <source>The value of the element to add to the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクトに追加する要素の値。</target>
        </trans-unit>
        <trans-unit id="375cb50ac5f8ae6db5bad228fb27242cc2a6613e" translate="yes" xml:space="preserve">
          <source>The value of the element to add to the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトに追加する要素の値。</target>
        </trans-unit>
        <trans-unit id="2bfc2dd23e72701e22341662650b90645eea05b8" translate="yes" xml:space="preserve">
          <source>The value of the given number rounded to the nearest integer.</source>
          <target state="translated">与えられた数値の値は、最も近い整数に丸められます。</target>
        </trans-unit>
        <trans-unit id="83ccae05d0f3bada8984becded60af7a9c6b9684" translate="yes" xml:space="preserve">
          <source>The value of the global is then changed, first to &lt;code&gt;42&lt;/code&gt; using the &lt;code&gt;Global.value&lt;/code&gt; property, and then to 43 using the &lt;code&gt;incGlobal()&lt;/code&gt; function exported out of the &lt;code&gt;global.wasm&lt;/code&gt; module (this adds 1 to whatever value is given to it and then returns the new value).</source>
          <target state="translated">次に、グローバルの値が変更され、最初に &lt;code&gt;Global.value&lt;/code&gt; プロパティを使用して &lt;code&gt;42&lt;/code&gt; に、次に &lt;code&gt;global.wasm&lt;/code&gt; モジュールからエクスポートされた &lt;code&gt;incGlobal()&lt;/code&gt; 関数を使用して43に変更されます（これにより、指定された値に1が追加されます。新しい値を返します）。</target>
        </trans-unit>
        <trans-unit id="8e6b1a6d6df9caa879e4a52b4aef13f1d4aeeca5" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">物件の価値。</target>
        </trans-unit>
        <trans-unit id="89ac72de17924e273431acd0216774b519716d0c" translate="yes" xml:space="preserve">
          <source>The value of the specified &lt;code&gt;&lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; is passed into the &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; as its sole parameter.</source>
          <target state="translated">指定された &lt;code&gt;&lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; の値は、その唯一のパラメーターとして &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="d10369a304b3dabeb9f648e972d408f825afd5d0" translate="yes" xml:space="preserve">
          <source>The value of this property is &quot;Atomics&quot;.</source>
          <target state="translated">このプロパティの値は &quot;Atomics &quot;です。</target>
        </trans-unit>
        <trans-unit id="602deb4fbff480f54ac3487ed10fc319ebc28bc1" translate="yes" xml:space="preserve">
          <source>The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the object has an initial value of &lt;code&gt;false&lt;/code&gt;. All other values, including any object or the string &lt;code&gt;&quot;false&quot;&lt;/code&gt;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">最初のパラメーターとして渡された値は、必要に応じてブール値に変換されます。値が省略されているか、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;-0&lt;/code&gt; 、&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;false&lt;/code&gt; 、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、または空の文字列（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）の場合、オブジェクトの初期値は &lt;code&gt;false&lt;/code&gt; です。オブジェクトや文字列 &lt;code&gt;&quot;false&quot;&lt;/code&gt; を含む他のすべての値は、初期値が &lt;code&gt;true&lt;/code&gt; のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="e8b2fd4ff59e176e9713ab275f18ea741a9453f6" translate="yes" xml:space="preserve">
          <source>The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the object has an initial value of &lt;code&gt;false&lt;/code&gt;. All other values, including any object, an empty array (&lt;code&gt;[]&lt;/code&gt;), or the string &quot;&lt;code&gt;false&lt;/code&gt;&quot;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">最初のパラメーターとして渡された値は、必要に応じてブール値に変換されます。値が省略されているか、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;-0&lt;/code&gt; 、&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;false&lt;/code&gt; 、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、または空の文字列（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）の場合、オブジェクトの初期値は &lt;code&gt;false&lt;/code&gt; です。オブジェクト、空の配列（ &lt;code&gt;[]&lt;/code&gt; ）、または文字列「 &lt;code&gt;false&lt;/code&gt; 」を含む他のすべての値は、初期値が &lt;code&gt;true&lt;/code&gt; のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="c90cef2323c14d826d0917e6adb3845eff127615" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, if supplied. (See below.)</source>
          <target state="translated">コールバックの最後の呼び出しで以前に返された値、または指定されている場合は &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 。（下記参照。）</target>
        </trans-unit>
        <trans-unit id="4b7328daf04c81ab8137722b8b006bf9c6f2c30c" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied (see below).</source>
          <target state="translated">コールバックの最後の呼び出しで以前に返された値、または提供されている場合は、 &lt;code&gt;initialValue&lt;/code&gt; （以下を参照）。</target>
        </trans-unit>
        <trans-unit id="26938a6c3b7c3667cae874428e7b0f973bd8b0f7" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied. (See below.)</source>
          <target state="translated">コールバックの最後の呼び出しで以前に返された値、または提供されている場合は、 &lt;code&gt;initialValue&lt;/code&gt; 。（下記参照。）</target>
        </trans-unit>
        <trans-unit id="9f20cffd5ae4255c4f313c33939037ffe91a735a" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument or filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに指定された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="1f013e6b1352fd1ab657f01903bf623f3e31d692" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument; &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (representing the runtime's default time zone) if none was provided. Warning: Applications should not rely on &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; being returned, as future versions may return a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; value identifying the runtime&amp;rsquo;s default time zone instead.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこのプロパティに提供される値。何も指定されていない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;（ランタイムのデフォルトのタイムゾーンを表す）。警告：将来のバージョンでは、代わりにランタイムのデフォルトのタイムゾーンを識別する&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;値が返される可能性があるため、アプリケーションは&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されることに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="ae8d412b82b4d12d0146bc50d3b2fff727efd317" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.</source>
          <target state="translated">ターゲット・オブジェクト・プロパティが非書き込み可能で構成不可能なデータ・プロパティである場合、プロパティに対して報告される値は、対応するターゲット・オブジェクト・プロパティの値と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="fa34a691341ce51b61d78e48ec46aa0f5728c3de" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be undefined if the corresponding target object property is non-configurable accessor property that has undefined as its [[Get]] attribute.</source>
          <target state="translated">対応するターゲット・オブジェクト・プロパティが[[Get]]属性としてundefinedを持つ非構成アクセサ・プロパティである場合、プロパティに対して報告される値はundefinedでなければなりません。</target>
        </trans-unit>
        <trans-unit id="a2ca47894ce66a4ebd121f767d42d690831bfec2" translate="yes" xml:space="preserve">
          <source>The value requested using the Unicode extension key &lt;code&gt;&quot;co&quot;&lt;/code&gt;, if it is supported for &lt;code&gt;locale&lt;/code&gt;, or &lt;code&gt;&quot;default&quot;&lt;/code&gt;.</source>
          <target state="translated">Unicode拡張キー &lt;code&gt;&quot;co&quot;&lt;/code&gt; （ &lt;code&gt;locale&lt;/code&gt; でサポートされている場合）または &lt;code&gt;&quot;default&quot;&lt;/code&gt; を使用して要求された値。</target>
        </trans-unit>
        <trans-unit id="0283424a1178d6f4236ac1d8d6034b7ef42cf0bb" translate="yes" xml:space="preserve">
          <source>The value requested using the Unicode extension key &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as a default.</source>
          <target state="translated">Unicode拡張キー &lt;code&gt;&quot;nu&quot;&lt;/code&gt; を使用して要求された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="3fc94ba8a72cb17a2e2242a0dd731579febe1bc3" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;getFullYear()&lt;/code&gt; is an absolute number. For dates between the years 1000 and 9999, &lt;code&gt;getFullYear()&lt;/code&gt; returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.</source>
          <target state="translated">&lt;code&gt;getFullYear()&lt;/code&gt; によって返される値は絶対数です。1000〜9999年の日付の場合、 &lt;code&gt;getFullYear()&lt;/code&gt; は、1995などの4桁の数値を返します。この関数を使用して、年が2000年以降の年に準拠していることを確認します。</target>
        </trans-unit>
        <trans-unit id="6446a7f617b7c923a7cdded70ece6ac9a5479f4b" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;getUTCFullYear()&lt;/code&gt; is an absolute number that is compliant with year-2000, for example, 1995.</source>
          <target state="translated">&lt;code&gt;getUTCFullYear()&lt;/code&gt; によって返される値は、1995年など、2000年に準拠した絶対数です。</target>
        </trans-unit>
        <trans-unit id="4d02fd6a19ea2394d421b081204d7d538e8ddef3" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduce()&lt;/code&gt; in this case would be &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">返される値 &lt;code&gt;reduce()&lt;/code&gt; この場合には、あろう &lt;code&gt;20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="753762dcffa9651103a411c28aba6537e911cd2a" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduce()&lt;/code&gt; would be that of the last callback invocation (&lt;code&gt;10&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; によって返される値は、最後のコールバック呼び出し（ &lt;code&gt;10&lt;/code&gt; ）の値になります。</target>
        </trans-unit>
        <trans-unit id="25eda24a4c47ede90f492bd3eff94112bb092132" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduceRight&lt;/code&gt; this time would be, of course, &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">今回は &lt;code&gt;reduceRight&lt;/code&gt; によって返される値はもちろん &lt;code&gt;20&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db3194ee28a78bcd5cd0e6d78b00827b8f173473" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduceRight&lt;/code&gt; would be that of the last callback invocation (&lt;code&gt;10&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; によって返される値は、最後のコールバック呼び出し（ &lt;code&gt;10&lt;/code&gt; ）の値になります。</target>
        </trans-unit>
        <trans-unit id="775546357ed316cf0984802343215e45cabfd5ab" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the form &lt;code&gt;&lt;var&gt;Www&lt;/var&gt;, &lt;var&gt;dd&lt;/var&gt; &lt;var&gt;Mmm&lt;/var&gt; &lt;var&gt;yyyy&lt;/var&gt; &lt;var&gt;hh&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss&lt;/var&gt; GMT&lt;/code&gt;, Where:</source>
          <target state="translated">返される値 &lt;code&gt;toUTCString()&lt;/code&gt; 形式の文字列であり、 &lt;code&gt;&lt;var&gt;Www&lt;/var&gt;, &lt;var&gt;dd&lt;/var&gt; &lt;var&gt;Mmm&lt;/var&gt; &lt;var&gt;yyyy&lt;/var&gt; &lt;var&gt;hh&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss&lt;/var&gt; GMT&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b313fb8c3da4ab52c40b731bd01d0a296137a71e" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the same format as &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Date.prototype.toString()&lt;/code&gt;&lt;/a&gt; but with a zero timezone offset (</source>
          <target state="translated">返される値 &lt;code&gt;toUTCString()&lt;/code&gt; と同じ形式の文字列である&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Date.prototype.toString()&lt;/code&gt; &lt;/a&gt;（ただし、ゼロタイムゾーンオフセット</target>
        </trans-unit>
        <trans-unit id="f9bdda3fa3097eefa1caa7944df9fc8d71302bea" translate="yes" xml:space="preserve">
          <source>The value that has been stored.</source>
          <target state="translated">保存されている値です。</target>
        </trans-unit>
        <trans-unit id="c9a55cfa4ad9c8fef910bf08d5266b00ea90e690" translate="yes" xml:space="preserve">
          <source>The value that is always passed as &lt;code&gt;this&lt;/code&gt; value when calling the wrapped function.</source>
          <target state="translated">ラップされた関数を呼び出すときに常に &lt;code&gt;this&lt;/code&gt; 値として渡される値。</target>
        </trans-unit>
        <trans-unit id="ac55f175a6f636d5e37287a3f31bb5c06a9fd70f" translate="yes" xml:space="preserve">
          <source>The value that is given as an argument.</source>
          <target state="translated">引数として与えられる値。</target>
        </trans-unit>
        <trans-unit id="b28bf68d03b135b289d89712da3c9911acf64c8f" translate="yes" xml:space="preserve">
          <source>The value that results from the reduction.</source>
          <target state="translated">減った結果の値。</target>
        </trans-unit>
        <trans-unit id="1ba3bb3a5b53e2ce2574ffcb28fc3cbbb4f9f720" translate="yes" xml:space="preserve">
          <source>The value the variable contains. This can be any value, as long as its type matches the variable's data type. If no value is specified, a typed 0 value is used, as specified by the &lt;a href=&quot;https://webassembly.github.io/spec/js-api/#defaultvalue&quot;&gt;&lt;code&gt;DefaultValue&lt;/code&gt; algorithm&lt;/a&gt;.</source>
          <target state="translated">変数に含まれる値。型が変数のデータ型と一致している限り、これは任意の値にすることができます。値が指定されていない場合、&lt;a href=&quot;https://webassembly.github.io/spec/js-api/#defaultvalue&quot;&gt; &lt;code&gt;DefaultValue&lt;/code&gt; アルゴリズムで&lt;/a&gt;指定されているように、タイプされた0の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="565efbb01120b89e014f45606039540d14a469a7" translate="yes" xml:space="preserve">
          <source>The value to be checked.</source>
          <target state="translated">チェックする値です。</target>
        </trans-unit>
        <trans-unit id="392314efaf475fe63083755ee1503c3782e6768c" translate="yes" xml:space="preserve">
          <source>The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function (supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt;, any primitive value passed as &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind &lt;/code&gt;, or if the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;&lt;var&gt;null&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;undefined&lt;/var&gt;&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; for the new function.</source>
          <target state="translated">バインドされた関数が呼び出されたときに、 &lt;code&gt;this&lt;/code&gt; パラメーターとしてターゲット関数 &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; に渡される値。バインドされた関数が&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子を使用して構築されている場合、値は無視されます。使用する際に &lt;code&gt;bind&lt;/code&gt; 内側（コールバックとして供給される）関数を作成する &lt;code&gt;setTimeout&lt;/code&gt; 、として渡された任意のプリミティブ値 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; をオブジェクトに変換されます。引数がに提供されていない場合 &lt;code&gt;bind &lt;/code&gt; 、又は場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; がある &lt;code&gt;&lt;var&gt;null&lt;/var&gt;&lt;/code&gt; または &lt;code&gt;&lt;var&gt;undefined&lt;/var&gt;&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; 実行範囲として扱われる &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 新しい機能のために。</target>
        </trans-unit>
        <trans-unit id="163a204d47e94755d2a8dea42f492f6afec3ade3" translate="yes" xml:space="preserve">
          <source>The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function(supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt;, any primitive value passed as &lt;code&gt;thisArg&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;thisArg&lt;/code&gt; for the new function.</source>
          <target state="translated">バインドされた関数が呼び出されたときに、 &lt;code&gt;this&lt;/code&gt; パラメーターとしてターゲット関数に渡される値。バインドされた関数が&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子を使用して構築されている場合、値は無視されます。使用する際に &lt;code&gt;bind&lt;/code&gt; 内側（コールバックとして供給される）関数を作成する &lt;code&gt;setTimeout&lt;/code&gt; 、として渡された任意のプリミティブ値 &lt;code&gt;thisArg&lt;/code&gt; をオブジェクトに変換されます。引数がに提供されていない場合は &lt;code&gt;bind&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; 実行スコープのは、次のように扱われ &lt;code&gt;thisArg&lt;/code&gt; 新しい機能のために。</target>
        </trans-unit>
        <trans-unit id="dc6855aee9e42fd78307e3cf03f38826e655a959" translate="yes" xml:space="preserve">
          <source>The value to be tested for &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;についてテストされる値。</target>
        </trans-unit>
        <trans-unit id="0b40053d9aa1992f47c698a9a98680425a9a0efe" translate="yes" xml:space="preserve">
          <source>The value to be tested for being a safe integer.</source>
          <target state="translated">安全な整数であるかどうかをテストする値。</target>
        </trans-unit>
        <trans-unit id="aac6f6a6beee410fdb177d08be0e103d2a3014c4" translate="yes" xml:space="preserve">
          <source>The value to be tested for being an integer.</source>
          <target state="translated">整数であるかどうかをテストする値。</target>
        </trans-unit>
        <trans-unit id="59bfce4de0f3bc70770e7f943f9528be413f79ba" translate="yes" xml:space="preserve">
          <source>The value to be tested for finiteness.</source>
          <target state="translated">有限性を検査する値です。</target>
        </trans-unit>
        <trans-unit id="4b826fb647f77daf90366e276f5a2041c3eea0d6" translate="yes" xml:space="preserve">
          <source>The value to be tested.</source>
          <target state="translated">検査対象となる値です。</target>
        </trans-unit>
        <trans-unit id="06b97d18aabb6ae6c63ded596ef86513a1b9ad9a" translate="yes" xml:space="preserve">
          <source>The value to check for equality.</source>
          <target state="translated">等価であるかどうかをチェックする値。</target>
        </trans-unit>
        <trans-unit id="f5893b2f6845ff50da342763ecbcb431372f8e12" translate="yes" xml:space="preserve">
          <source>The value to convert to a JSON string.</source>
          <target state="translated">JSON 文字列に変換する値。</target>
        </trans-unit>
        <trans-unit id="5a8791a2fe96db71d9fb59af600bdadbf784b614" translate="yes" xml:space="preserve">
          <source>The value to parse. If the &lt;code&gt;string&lt;/code&gt; argument is not a string, then it is converted to a string (using the &lt;code&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation). Leading whitespace in the string argument is ignored.</source>
          <target state="translated">解析する値。 &lt;code&gt;string&lt;/code&gt; 引数が文字列でない場合は、文字列に変換されます（ &lt;code&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用）。文字列引数の先頭の空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="c5d68d1d561fee564f3324376066e2e0b9d7856b" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</source>
          <target state="translated">解析する値。この引数が文字列でない場合は、 &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用して引数に変換されます。この引数の先頭の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="761a888194a1d3efba5aa5728509ec1440c00504" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</source>
          <target state="translated">解析する値。この引数が文字列でない場合は、 &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用して引数に変換されます。この引数の先頭の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="06c60cfe7cf7b22fbd2cfac45c0050efe20b3c47" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading whitespace in this argument is ignored.</source>
          <target state="translated">解析する値。この引数が文字列でない場合は、 &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 抽象演算を使用して引数に変換されます。この引数の先頭の空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="f1c17f51813a132f8c8e2de408d090acbdfc805e" translate="yes" xml:space="preserve">
          <source>The value to remove from &lt;code&gt;&lt;var&gt;mySet&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;mySet&lt;/var&gt;&lt;/code&gt; から削除する値。</target>
        </trans-unit>
        <trans-unit id="6cbb6f2a4cf02d0acc268f73b395f7eaddccb296" translate="yes" xml:space="preserve">
          <source>The value to return.</source>
          <target state="translated">返す値。</target>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="translated">探すべき値。</target>
        </trans-unit>
        <trans-unit id="4725b3f97020ee2d2e6562f946a3c0c74977edbc" translate="yes" xml:space="preserve">
          <source>The value to send to the generator.</source>
          <target state="translated">ジェネレーターに送る値。</target>
        </trans-unit>
        <trans-unit id="54308eaf4f65f985a376010b2fbadf19181c19b2" translate="yes" xml:space="preserve">
          <source>The value to send to the generator. The value will be assigned as a result of a yield expression. i.e in [variable] = yield [expression], the value passed to the .next function will be assigned to [variable]</source>
          <target state="translated">ジェネレータに送る値。例えば、[変数]=yield [expression]の場合、.next関数に渡された値は、[変数]に代入されます。</target>
        </trans-unit>
        <trans-unit id="27af97cf03ff5b42ffc052b39a9abfc7fee345ba" translate="yes" xml:space="preserve">
          <source>The value to set.</source>
          <target state="translated">設定する値です。</target>
        </trans-unit>
        <trans-unit id="e466a461c0d81a1e5a265350b651378eb345c681" translate="yes" xml:space="preserve">
          <source>The value to test for presence in the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトに存在するかどうかをテストする値。</target>
        </trans-unit>
        <trans-unit id="bccbec616a7aa8d8ff02d2d7771872a2f34ef1f6" translate="yes" xml:space="preserve">
          <source>The value to use as &lt;code&gt;this&lt;/code&gt; when calling &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; を呼び出すときに &lt;code&gt;this&lt;/code&gt; として使用する値。</target>
        </trans-unit>
        <trans-unit id="a42096f81c8b700c01a535b75abd018478cad5e6" translate="yes" xml:space="preserve">
          <source>The value which is given as the right hand-side of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="translated">右手側として与えられる値&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;のために...の&lt;/a&gt;又はような関数の引数として&lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; は&lt;/a&gt;、ではない&lt;a href=&quot;../iteration_protocols&quot;&gt;反復可能オブジェクト&lt;/a&gt;。反復可能オブジェクトは、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;などの組み込みの反復可能型、ジェネレータの結果、または&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;反復可能プロトコルを&lt;/a&gt;実装するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="85f284f4600acf33d2c2218b66e9ae87ac534b68" translate="yes" xml:space="preserve">
          <source>The value which is given as the right hand-side of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of&lt;/a&gt;の右側として、または&lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; &lt;/a&gt;などの関数の引数として指定された値は、&lt;a href=&quot;../iteration_protocols&quot;&gt;反復可能なオブジェクト&lt;/a&gt;ではありません。iterableは、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;などの組み込みのiterable型、ジェネレーターの結果、または&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterableプロトコルを&lt;/a&gt;実装するオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="7a48c0bceb25d277223c5b39c5f4e6645c8f3d4f" translate="yes" xml:space="preserve">
          <source>The value will be assigned as a result of a &lt;code&gt;yield&lt;/code&gt; expression. For example, in &lt;code&gt;&lt;var&gt;variable&lt;/var&gt; = yield &lt;var&gt;expression&lt;/var&gt;&lt;/code&gt;, the value passed to the &lt;code&gt;.next()&lt;/code&gt; function will be assigned to &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">値は、 &lt;code&gt;yield&lt;/code&gt; 式の結果として割り当てられます。たとえば、 &lt;code&gt;&lt;var&gt;variable&lt;/var&gt; = yield &lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; では、 &lt;code&gt;.next()&lt;/code&gt; 関数に渡された値が &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt; に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="c8d381c8d22bfc0f19c3ff81e2c2a77327ad37df" translate="yes" xml:space="preserve">
          <source>The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">参照を変更する値。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly関数&lt;/a&gt;である必要があります。これは、基礎となるwasm関数のJavaScriptラッパーです。</target>
        </trans-unit>
        <trans-unit id="6a1a15efc64d14b930da0c0f2af03ced19790118" translate="yes" xml:space="preserve">
          <source>The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">参照を変更する値。これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;エクスポートされたWebAssembly関数&lt;/a&gt;である必要があります。これは、基になるwasm関数のJavaScriptラッパーです。</target>
        </trans-unit>
        <trans-unit id="e4a5a6582f1f15de8a353319a060dbca049eb56c" translate="yes" xml:space="preserve">
          <source>The value you want to parse.</source>
          <target state="translated">解析したい値。</target>
        </trans-unit>
        <trans-unit id="c330d597b3dfd420a395b97922ea4f601cdaf257" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。</target>
        </trans-unit>
        <trans-unit id="3b9865fad94fc56ff337c268a776b107ba4a79a0" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are only present if &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;&quot;currency&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。これらのプロパティは、以下の場合にのみ存在している &lt;code&gt;style&lt;/code&gt; ある &lt;code&gt;&quot;currency&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77632140a6d7f81694a32215750f6043951bce51" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are present only if at least one of them was provided in the &lt;code&gt;options&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。これらのプロパティは、少なくとも1つが &lt;code&gt;options&lt;/code&gt; 引数で指定されている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="c00811fc726b80d0206856d7d727f30706a7dc00" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are present only if neither &lt;code&gt;minimumSignificantDigits&lt;/code&gt; nor &lt;code&gt;maximumSignificantDigits&lt;/code&gt; was provided in the &lt;code&gt;options&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに提供された値、またはデフォルトとして入力された値。これらのプロパティは、 &lt;code&gt;options&lt;/code&gt; 引数に &lt;code&gt;minimumSignificantDigits&lt;/code&gt; も &lt;code&gt;maximumSignificantDigits&lt;/code&gt; も指定されていない場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="4e548ac0a58e8f8d45f275ef3a15166b64f3a5ec" translate="yes" xml:space="preserve">
          <source>The values requested for these properties in the &lt;code&gt;options&lt;/code&gt; argument or using the Unicode extension keys &lt;code&gt;&quot;kn&quot;&lt;/code&gt; and &lt;code&gt;&quot;kf&quot;&lt;/code&gt; or filled in as defaults. If the implementation does not support these properties, they are omitted.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数でこれらのプロパティに要求された値、またはUnicode拡張キー &lt;code&gt;&quot;kn&quot;&lt;/code&gt; と &lt;code&gt;&quot;kf&quot;&lt;/code&gt; か、デフォルトとして入力された値。実装がこれらのプロパティをサポートしない場合、それらは省略されます。</target>
        </trans-unit>
        <trans-unit id="70d2beda49013ccaade06b55b87b79e9a948f83d" translate="yes" xml:space="preserve">
          <source>The values requested using the Unicode extension keys &lt;code&gt;&quot;ca&quot;&lt;/code&gt; and &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as default values.</source>
          <target state="translated">Unicode拡張キー &lt;code&gt;&quot;ca&quot;&lt;/code&gt; と &lt;code&gt;&quot;nu&quot;&lt;/code&gt; を使用して要求された値、またはデフォルト値として入力された値。</target>
        </trans-unit>
        <trans-unit id="f382186cd21e7990d569381dfed57ffbf95cec18" translate="yes" xml:space="preserve">
          <source>The values resulting from format matching between the corresponding properties in the &lt;code&gt;options&lt;/code&gt; argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数の対応するプロパティと、選択したロケールでの日付と時刻のフォーマットに使用可能な組み合わせと表現の間のフォーマットマッチングの結果の値。これらのプロパティの一部は存在しない可能性があり、対応するコンポーネントがフォーマットされた出力に表示されないことを示しています。</target>
        </trans-unit>
        <trans-unit id="d5c1abe3f8184414323335d2b7a8b7ed460cacb2" translate="yes" xml:space="preserve">
          <source>The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt;&lt;code&gt;arrow functions&lt;/code&gt;&lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</source>
          <target state="translated">関数式が割り当てられる変数には、 &lt;code&gt;name&lt;/code&gt; プロパティがあります。別の変数に割り当てられている場合、名前は変更されません。関数名を省略すると、変数名（暗黙の名前）になります。関数名が存在する場合は、関数名（明示的な名前）になります。これは&lt;a href=&quot;../functions/arrow_functions&quot;&gt; &lt;code&gt;arrow functions&lt;/code&gt; &lt;/a&gt;も当てはまります（矢印には名前がないため、変数に暗黙の名前を付けることしかできません）。</target>
        </trans-unit>
        <trans-unit id="fce9939a07c30c8f960444ebda763316f59e32e7" translate="yes" xml:space="preserve">
          <source>The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</source>
          <target state="translated">関数式が割り当てられている変数には、 &lt;code&gt;name&lt;/code&gt; プロパティがあります。別の変数に割り当てられている場合、名前は変更されません。関数名を省略した場合、変数名（暗黙名）になります。関数名が存在する場合、関数名（明示名）になります。これは、&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数に&lt;/a&gt;も適用されます（矢印には名前がないため、変数に暗黙的な名前を付けることしかできません）。</target>
        </trans-unit>
        <trans-unit id="6ae939816326b73951d2be1abd4bc6d262210aa9" translate="yes" xml:space="preserve">
          <source>The variables contain the same string, except that the second string contains uppercase letters. The first &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; method displays &lt;code&gt;19&lt;/code&gt;. But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &quot;&lt;code&gt;cheddar&lt;/code&gt;&quot; is not found in &lt;code&gt;myCapString&lt;/code&gt;, so the second &lt;code&gt;console.log()&lt;/code&gt; method displays &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">2番目の文字列に大文字が含まれていることを除いて、変数には同じ文字列が含まれています。最初の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;19&lt;/code&gt; を表示します。しかしため &lt;code&gt;indexOf()&lt;/code&gt; メソッドは、大文字と小文字が区別され、文字列「 &lt;code&gt;cheddar&lt;/code&gt; 」中に見出されない &lt;code&gt;myCapString&lt;/code&gt; ので、第二 &lt;code&gt;console.log()&lt;/code&gt; メソッドが表示され &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d6ec2ee3ed38b088ef2a037a36cdd2b64e278fc" translate="yes" xml:space="preserve">
          <source>The well-known &lt;code&gt;&lt;strong&gt;Symbol.iterator&lt;/strong&gt;&lt;/code&gt; symbol specifies the default iterator for an object. Used by &lt;a href=&quot;../../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">よく知られている &lt;code&gt;&lt;strong&gt;Symbol.iterator&lt;/strong&gt;&lt;/code&gt; シンボルは、オブジェクトのデフォルトのイテレータを指定します。&lt;a href=&quot;../../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="b000b5f55890a7aad1048e348b7ab3061cdcc0ff" translate="yes" xml:space="preserve">
          <source>The well-known symbol &lt;code&gt;&lt;strong&gt;Symbol.species&lt;/strong&gt;&lt;/code&gt; specifies a function-valued property that the constructor function uses to create derived objects.</source>
          <target state="translated">よく知られたシンボル &lt;code&gt;&lt;strong&gt;Symbol.species&lt;/strong&gt;&lt;/code&gt; は、コンストラクター関数が派生オブジェクトを作成するために使用する関数値プロパティを指定します。</target>
        </trans-unit>
        <trans-unit id="834521bdfe73ddcdc5fb64cc09c454aa53e0e311" translate="yes" xml:space="preserve">
          <source>The whole string being examined.</source>
          <target state="translated">検査されている文字列全体。</target>
        </trans-unit>
        <trans-unit id="6513ed80efcd6bb03aba0325f5b6374023f42179" translate="yes" xml:space="preserve">
          <source>The wrapped function object</source>
          <target state="translated">ラップされた関数オブジェクト</target>
        </trans-unit>
        <trans-unit id="b098fda995b359e0cd8b60766d82754994697077" translate="yes" xml:space="preserve">
          <source>The x coordinate of the point</source>
          <target state="translated">点のx座標</target>
        </trans-unit>
        <trans-unit id="cd2c7c9b69f12be1895dc37da25b7e1a86d5f87d" translate="yes" xml:space="preserve">
          <source>The y coordinate of the point.</source>
          <target state="translated">点のy座標。</target>
        </trans-unit>
        <trans-unit id="93dea93a508fb79cd213d78a9c05f9219bfcee1a" translate="yes" xml:space="preserve">
          <source>The zero-based index &lt;em&gt;before&lt;/em&gt; which to end extraction. The character at this index will not be included.</source>
          <target state="translated">抽出を終了する&lt;em&gt;前&lt;/em&gt;のゼロベースのインデックス。このインデックスの文字は含まれません。</target>
        </trans-unit>
        <trans-unit id="bf061c0e8764085670c93808d259b0b1537351a9" translate="yes" xml:space="preserve">
          <source>The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt;. (For example, if &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt;, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt;.) If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is not a number after &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number(&lt;var&gt;beginIndex&lt;/var&gt;)&lt;/code&gt;&lt;/a&gt;, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">抽出を開始するゼロベースのインデックス。負の場合、 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; として扱われます。（たとえば、 &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; が &lt;code&gt;-3&lt;/code&gt; の場合、 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt; として扱われます。） &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; が&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number(&lt;var&gt;beginIndex&lt;/var&gt;)&lt;/code&gt; の&lt;/a&gt;後の数値でない場合、 &lt;code&gt;0&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="34484571df4043bcf44cbe6d7da204798ed3b521" translate="yes" xml:space="preserve">
          <source>The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;strLength + beginIndex&lt;/code&gt; where &lt;code&gt;strLength&lt;/code&gt; is the length of the string (for example, if &lt;code&gt;beginIndex&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; it is treated as &lt;code&gt;strLength - 3&lt;/code&gt;). If &lt;code&gt;beginIndex&lt;/code&gt; is greater than or equal to the length of the string, &lt;code&gt;slice()&lt;/code&gt; returns an empty string.</source>
          <target state="translated">抽出を開始するゼロから始まるインデックス。負の場合は、 &lt;code&gt;strLength + beginIndex&lt;/code&gt; として扱われます。ここで、 &lt;code&gt;strLength&lt;/code&gt; は文字列の長さです（たとえば、 &lt;code&gt;beginIndex&lt;/code&gt; が &lt;code&gt;-3&lt;/code&gt; の場合は、 &lt;code&gt;strLength - 3&lt;/code&gt; として扱われます）。 &lt;code&gt;beginIndex&lt;/code&gt; が文字列の長さ以上の場合、 &lt;code&gt;slice()&lt;/code&gt; は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6773e8fa12942c218deb33c58b745ac45e65ebbc" translate="yes" xml:space="preserve">
          <source>The zero-based index of the match in the string.</source>
          <target state="translated">文字列内のマッチのゼロベースのインデックス。</target>
        </trans-unit>
        <trans-unit id="34d44d2490e2fb4772a727440530e67bf85723bf" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt; &lt;strong&gt;for each...in&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; statement&lt;/strong&gt; iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.</source>
          <target state="translated">&lt;code&gt; &lt;strong&gt;for each...in&lt;/strong&gt;&lt;/code&gt; &lt;strong&gt;のステートメントは、&lt;/strong&gt;オブジェクトのすべてのプロパティの値を超える指定された変数を反復します。個別のプロパティごとに、指定されたステートメントが実行されます。 &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b464e820bc4e87bcd6963f6905cbc1a01380e81" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;const&lt;/code&gt; creates a read-only reference to a value. It does &lt;strong&gt;not&lt;/strong&gt; mean the value it holds is immutable, just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 値への読み取り専用の参照を作成します。それが保持する値が不変であることを意味するのでは&lt;strong&gt;なく&lt;/strong&gt;、変数識別子を再割り当てできないことだけです。たとえば、コンテンツがオブジェクトの場合、これはオブジェクトのコンテンツ（たとえば、プロパティ）を変更できることを意味します。</target>
        </trans-unit>
        <trans-unit id="91d49a20203a919f8b5fd6ad03ea774e29460b2d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;import.meta&lt;/code&gt; object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module's URL.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; のオブジェクトは、JavaScriptのモジュールにコンテキスト固有のメタデータを公開します。モジュールのURLなど、モジュールに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="888ceea4a2d5630cdeaeabae5410b8503e85011e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;import.meta&lt;/code&gt; object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; のオブジェクトは、JavaScriptのモジュールにコンテキスト固有のメタデータを公開メタ特性です。これには、モジュールのURLなど、モジュールに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="f22535f791d6fffe0473d15653bcbb327d44f86c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new.target&lt;/code&gt; property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions instantiated with the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; プロパティは、関数やコンストラクタが使用して呼び出されたかどうかを検出することができます&lt;a href=&quot;new&quot;&gt;新しい&lt;/a&gt;演算子を。&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;演算子でインスタンス化されたコンストラクターおよび関数では、 &lt;code&gt;new.target&lt;/code&gt; はコンストラクターまたは関数への参照を返します。通常の関数呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="fed48d0b750f633b0d77e462949f996a2556975a" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new.target&lt;/code&gt; pseudo-property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions invoked using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; 擬似プロパティを使用すると、関数やコンストラクタが使用して呼び出されたかどうかを検出することができます&lt;a href=&quot;new&quot;&gt;新しい&lt;/a&gt;演算子を。&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;演算子を使用して呼び出されるコンストラクターおよび関数では、 &lt;code&gt;new.target&lt;/code&gt; はコンストラクターまたは関数への参照を返します。通常の関数呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b8d285b4cba86a8ce926d2cc13ded2b699b1549b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new&lt;/code&gt; creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; ユーザー定義オブジェクト型のまたはコンストラクタ機能を有する組み込みオブジェクト・タイプのいずれかのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="86abe5c3b9ab6addd5d0545cccfa22bb72009209" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; comma operator&lt;/strong&gt; (&lt;code&gt;,&lt;/code&gt;) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression's final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; loop.</source>
          <target state="translated">&lt;strong&gt;コンマ演算子は&lt;/strong&gt;（ &lt;code&gt;,&lt;/code&gt; ）（左から右へ）、そのオペランドの各々を評価し、最後のオペランドの値を返します。これにより、複数の式が評価される複合式を作成できます。複合式の最終値は、そのメンバー式の右端の値です。これは通常、 &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; ループに複数のパラメーターを提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1f776538492eb864dce17dd7b00fa104f7b12cb5" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; comma operator&lt;/strong&gt; evaluates each of its operands (from left to right) and returns the value of the last operand.</source>
          <target state="translated">&lt;strong&gt;コンマ演算子は&lt;/strong&gt;（左から右へ）、そのオペランドの各々を評価し、最後のオペランドの値を返します。</target>
        </trans-unit>
        <trans-unit id="b5ebca9ecf732c039f7854f5bb81acb03a7f7440" translate="yes" xml:space="preserve">
          <source>Then in the top-level module included in your HTML page, we could have:</source>
          <target state="translated">そして、HTMLページに含まれるトップレベルのモジュールの中に、私たちが持っている可能性があります。</target>
        </trans-unit>
        <trans-unit id="446e8c7e40da60abbd0e6f84bda93b4619c9635d" translate="yes" xml:space="preserve">
          <source>Then let's talk about solutions.</source>
          <target state="translated">では、解決策の話をしましょう。</target>
        </trans-unit>
        <trans-unit id="1cdd5f8c7de109e5949a05658cbe520dce6c688e" translate="yes" xml:space="preserve">
          <source>Then you can rewrite the definition of &lt;code&gt;Car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a &lt;code&gt;Person&lt;/code&gt; object, as follows:</source>
          <target state="translated">次に、次のように、 &lt;code&gt;Car&lt;/code&gt; の定義を書き直して、 &lt;code&gt;Person&lt;/code&gt; オブジェクトを取得する &lt;code&gt;owner&lt;/code&gt; プロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="89551b1acb52a90d894ad75a0e7e84c5d566dcaf" translate="yes" xml:space="preserve">
          <source>Then you can rewrite the definition of &lt;code&gt;car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a person object, as follows:</source>
          <target state="translated">次に、以下のように、 &lt;code&gt;car&lt;/code&gt; の定義を書き換えて、personオブジェクトを取得する &lt;code&gt;owner&lt;/code&gt; プロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="2e2c81dd703d2e6ca2b3ff59db7c330e4a38f40d" translate="yes" xml:space="preserve">
          <source>Then, in another script, it is straightforward to import the default export:</source>
          <target state="translated">そして、別のスクリプトでは、デフォルトのエクスポートをインポートするのが簡単です。</target>
        </trans-unit>
        <trans-unit id="d8256d79752173e7d51d23cf0e31f0b346c9b2c9" translate="yes" xml:space="preserve">
          <source>Then, in another script, it will be straightforward to import the default export:</source>
          <target state="translated">そして、別のスクリプトでは、デフォルトのエクスポートをインポートするのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="8477eef984ea4b4878880d1778d1f4463dab4368" translate="yes" xml:space="preserve">
          <source>Thenable objects</source>
          <target state="translated">切り替え可能なオブジェクト</target>
        </trans-unit>
        <trans-unit id="d9b4388540b214218d6ebf1d5963566a2d626a47" translate="yes" xml:space="preserve">
          <source>There are 2 ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a literal notation and a constructor. To indicate strings, the parameters to the literal notation do not use quotation marks while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトを作成するには、リテラル表記とコンストラクターの2つの方法があります。文字列を示すために、リテラル表記のパラメーターは引用符を使用しませんが、コンストラクター関数のパラメーターは引用符を使用します。したがって、次の式は同じ正規表現を作成します。</target>
        </trans-unit>
        <trans-unit id="9c934ffa69a2298f5b7b5e35beabe7d61c92a422" translate="yes" xml:space="preserve">
          <source>There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt;. You can't use these. Sorry :(</source>
          <target state="translated">&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;予約キーワードである&lt;/a&gt;変数名がいくつかあります。これらは使用できません。ごめんなさい ：（</target>
        </trans-unit>
        <trans-unit id="5e9900d3962d4ebc1cc24a8b6e55d7cf55a0a691" translate="yes" xml:space="preserve">
          <source>There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserverd keywords&lt;/a&gt;. You can't use these. Sorry :(</source>
          <target state="translated">&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;予約キーワードで&lt;/a&gt;あるいくつかの変数名があります。これらは使用できません。ごめんなさい ：（</target>
        </trans-unit>
        <trans-unit id="6b75accc15d966eb077568ed588a93a43a522ec5" translate="yes" xml:space="preserve">
          <source>There are also a few non-configurable properties built into JavaScript. Maybe you tried to delete a mathematical constant.</source>
          <target state="translated">また、JavaScriptには設定できないプロパティがいくつか組み込まれています。数学的定数を削除しようとしたのかもしれません。</target>
        </trans-unit>
        <trans-unit id="23dcdc49ca1e35ff68fec21bb12a5225fcb5a8f1" translate="yes" xml:space="preserve">
          <source>There are also a few read-only properties built into JavaScript. Maybe you tried to redefine a mathematical constant.</source>
          <target state="translated">JavaScriptに組み込まれた読み取り専用のプロパティもいくつかあります。数学的定数を再定義しようとしたのかもしれません。</target>
        </trans-unit>
        <trans-unit id="c1c9aeb3f2e2f35f5cd7d2044f132e06b0403e9f" translate="yes" xml:space="preserve">
          <source>There are also additional safer (and faster!) alternatives to &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;Function()&lt;/code&gt; for common use-cases.</source>
          <target state="translated">一般的なユースケースでは、 &lt;code&gt;eval()&lt;/code&gt; または &lt;code&gt;Function()&lt;/code&gt; に代わる、より安全な（そしてより高速な）代替手段もあります。</target>
        </trans-unit>
        <trans-unit id="3525ab2cab918389a404e06213ec2767c08f0ae0" translate="yes" xml:space="preserve">
          <source>There are different ways to create a copy of an object. The following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</source>
          <target state="translated">オブジェクトのコピーを作成するには、さまざまな方法があります。以下は1つの方法にすぎず、ECMAScript &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;code&gt;Object.*&lt;/code&gt; メタプロパティ関数を使用してArray.prototype.forEach（）がどのように機能するかを説明するために提示されています。</target>
        </trans-unit>
        <trans-unit id="0d29d25bfa36a0a07c4cea3c152fe33c4a7a12ce" translate="yes" xml:space="preserve">
          <source>There are five different types of operations that return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; を返す操作には5つの異なるタイプがあります。</target>
        </trans-unit>
        <trans-unit id="0ef7627759e43c46aa6fde1debf8fc912c56d99e" translate="yes" xml:space="preserve">
          <source>There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second flag. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only five of them in ECMAScript.</source>
          <target state="translated">コードに無効な正規表現フラグがあります。スラッシュで囲まれたパターンで構成される正規表現リテラルでは、フラグは2番目のフラグの後に定義されます。また、&lt;a href=&quot;../global_objects/regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトのコンストラクター関数（2番目のパラメーター）で定義することもできます。正規表現フラグは個別に、または任意の順序で一緒に使用できますが、ECMAScriptには5つしかありません。</target>
        </trans-unit>
        <trans-unit id="0c6b73b421181013c9343cae02a3a74cf6657f5f" translate="yes" xml:space="preserve">
          <source>There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second slash. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only six of them in ECMAScript.</source>
          <target state="translated">コードに無効な正規表現フラグがあります。スラッシュで囲まれたパターンで構成される正規表現リテラルでは、フラグは2番目のスラッシュの後に定義されます。これらは、&lt;a href=&quot;../global_objects/regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトのコンストラクター関数（2番目のパラメーター）でも定義できます。正規表現フラグは、個別に、または任意の順序で一緒に使用できますが、ECMAScriptには6つしかありません。</target>
        </trans-unit>
        <trans-unit id="328306dfa957732254d942f732e2fe78edd08818" translate="yes" xml:space="preserve">
          <source>There are many APIs that accept iterables, for example: &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map([iterable])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/weakmap&quot;&gt;&lt;code&gt;WeakMap([iterable])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/set&quot;&gt;&lt;code&gt;Set([iterable])&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;global_objects/weakset&quot;&gt;&lt;code&gt;WeakSet([iterable])&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">iterableを受け入れる多くのAPIがあります。たとえば、&lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map([iterable])&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;global_objects/weakmap&quot;&gt; &lt;code&gt;WeakMap([iterable])&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;global_objects/set&quot;&gt; &lt;code&gt;Set([iterable])&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;global_objects/weakset&quot;&gt; &lt;code&gt;WeakSet([iterable])&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a19fad7ee3a1c683cf2203ca175b99d3c2e99019" translate="yes" xml:space="preserve">
          <source>There are many APIs that accept iterables. Some examples include:</source>
          <target state="translated">イテレート値を受け付けるAPIはたくさんあります。いくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="f9c6f5cd6a5367cad9d27d056730f43556553be4" translate="yes" xml:space="preserve">
          <source>There are many built-in functions in need of a (callback) function. You will have to provide a function in order to have these methods working properly:</source>
          <target state="translated">(コールバック)関数を必要とする多くの組み込み関数があります。これらのメソッドを正しく動作させるためには、関数を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d086eb6393ae332077e3f5864edfd84eba69f01" translate="yes" xml:space="preserve">
          <source>There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt;. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt;&lt;code&gt;Reflect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt;&lt;code&gt;Atomics&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;new&lt;/code&gt; を使用して構築できるグローバルオブジェクトは多数あります。ただし、一部のグローバルオブジェクトはそうではなく、それらのプロパティとメソッドは静的です。次のJavaScript標準組み込みオブジェクトはコンストラクターではありません：&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/reflect&quot;&gt; &lt;code&gt;Reflect&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/atomics&quot;&gt; &lt;code&gt;Atomics&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c2ac8cc4acc6e241d016d55aa566b4aa3cdd5b5" translate="yes" xml:space="preserve">
          <source>There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt;. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt;&lt;code&gt;Reflect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/SIMD&quot;&gt;&lt;code&gt;SIMD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt;&lt;code&gt;Atomics&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; など&lt;/a&gt;、 &lt;code&gt;new&lt;/code&gt; を使用して構築可能な多くのグローバルオブジェクトがあります。ただし、一部のグローバルオブジェクトはそうではなく、そのプロパティとメソッドは静的です。次のJavaScript標準組み込みオブジェクトはコンストラクタではありません：&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/reflect&quot;&gt; &lt;code&gt;Reflect&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/SIMD&quot;&gt; &lt;code&gt;SIMD&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/atomics&quot;&gt; &lt;code&gt;Atomics&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="693c279c59ce837d109a798ef270590b0da65569" translate="yes" xml:space="preserve">
          <source>There are multiple options to fix this error. Check what was intended to be achieved with the constant in question.</source>
          <target state="translated">このエラーを修正するには、複数のオプションがあります。問題の定数で何を達成することを意図していたかを確認してください。</target>
        </trans-unit>
        <trans-unit id="ae37fb979bea6740ce70fa124f14a2bebac08325" translate="yes" xml:space="preserve">
          <source>There are no keys in &lt;code&gt;Set&lt;/code&gt; objects, however, so the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;. This is to make it consistent with other &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;Set&lt;/code&gt; オブジェクトにはキーがないため、最初の2つの引数は両方とも&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; に&lt;/a&gt;含まれる&lt;strong&gt;値&lt;/strong&gt;です。これは、&lt;a href=&quot;../map/foreach&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array&lt;/code&gt; の&lt;/a&gt;他の &lt;code&gt;forEach()&lt;/code&gt; メソッドとの一貫性を保つためです。</target>
        </trans-unit>
        <trans-unit id="6607743e80788e12daa18af41a3e436f3282e40b" translate="yes" xml:space="preserve">
          <source>There are no keys in &lt;code&gt;Set&lt;/code&gt; objects. However, the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, so that the callback function is consistent with the &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトにはキーがありません。ただし、最初の2つの引数はどちらも&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;に含まれる&lt;strong&gt;値&lt;/strong&gt;であるため、コールバック関数は&lt;a href=&quot;../map/foreach&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;forEach()&lt;/code&gt; メソッドと整合性があります。</target>
        </trans-unit>
        <trans-unit id="3d5d1af1c0e36eebedace34f6ce7e6c0df713d90" translate="yes" xml:space="preserve">
          <source>There are only five valid regular expression flags.</source>
          <target state="translated">有効な正規表現フラグは5つだけです。</target>
        </trans-unit>
        <trans-unit id="ac2b0c8431e04307419d31c94f79361f6ff31325" translate="yes" xml:space="preserve">
          <source>There are only six valid regular expression flags.</source>
          <target state="translated">有効な正規表現フラグは6つしかありません。</target>
        </trans-unit>
        <trans-unit id="7d10844d61cc30ce621c0ec05519562750155632" translate="yes" xml:space="preserve">
          <source>There are several differences between class expressions and &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;, however:</source>
          <target state="translated">ただし、クラス式と&lt;a href=&quot;../statements/class&quot;&gt;クラスステートメント&lt;/a&gt;にはいくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="da9f3d69fb3ca5669544de1d84f843d8aec9af8d" translate="yes" xml:space="preserve">
          <source>There are several methods available to obtain a date in various formats, as well as to perform time zone conversions. Particularly useful are the functions that output the date and time in Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. (This time is historically known as &lt;em&gt;Greenwich Mean Time&lt;/em&gt;, as UTC lies along the meridian that includes London&amp;mdash;and nearby Greenwich&amp;mdash;in the United Kingdom.) The user's device provides the local time.</source>
          <target state="translated">さまざまな形式で日付を取得したり、タイムゾーン変換を実行したりするには、いくつかの方法があります。特に便利なのは、協定世界時（UTC）で日付と時刻を出力する関数です。これは、世界標準時で定義されているグローバル標準時です。（UTCは英国のロンドン（および近くのグリニッジ）を含む子午線に沿っているため、この時間は歴史的に&lt;em&gt;グリニッジ標準時&lt;/em&gt;として知られています。）ユーザーのデバイスが現地時間を提供します。</target>
        </trans-unit>
        <trans-unit id="2b8060ffb49f99b70454ca7c20d1536cfed320ba" translate="yes" xml:space="preserve">
          <source>There are several ways to define functions:</source>
          <target state="translated">関数を定義する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f46fa20df26a28f3afafec0caf95aacff7634c5f" translate="yes" xml:space="preserve">
          <source>There are three main differences between rest parameters and the &lt;a href=&quot;arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">残りのパラメーターと&lt;a href=&quot;arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトには、主に3つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="cef9fc9ad4d99bdf9fc9094a7d87693bc809f91e" translate="yes" xml:space="preserve">
          <source>There are two different types of export, &lt;strong&gt;named&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt;. You can have multiple named exports per module but only one default export. Each type corresponds to one of the above syntax:</source>
          <target state="translated">&lt;strong&gt;名前付き&lt;/strong&gt;と&lt;strong&gt;デフォルトの&lt;/strong&gt; 2つの異なるタイプのエクスポート&lt;strong&gt;が&lt;/strong&gt;あり&lt;strong&gt;ます&lt;/strong&gt;。モジュールごとに複数の名前付きエクスポートを作成できますが、デフォルトのエクスポートは1つだけです。各タイプは、上記の構文のいずれかに対応しています。</target>
        </trans-unit>
        <trans-unit id="3ddee455cf2360e71a5ca1f1e12008d3d2cfa4aa" translate="yes" xml:space="preserve">
          <source>There are two protocols: The &lt;a href=&quot;#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt; and the &lt;a href=&quot;#The_iterator_protocol&quot;&gt;iterator protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#The_iterable_protocol&quot;&gt;プロトコル&lt;/a&gt;には、反復可能プロトコルと反復プロトコルの 2つがあり&lt;a href=&quot;#The_iterator_protocol&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0c76d53ebd5426a3fa7bc5f62eec9a68003babb" translate="yes" xml:space="preserve">
          <source>There are two types of exports:</source>
          <target state="translated">輸出には2種類あります。</target>
        </trans-unit>
        <trans-unit id="a5f5403695ad4b2c5ef25a3e77d3c0edf0e80b0f" translate="yes" xml:space="preserve">
          <source>There are two ways to access an individual character in a string. The first is the &lt;a href=&quot;string/charat&quot;&gt;&lt;code&gt;charAt()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">文字列内の個々の文字にアクセスするには、2つの方法があります。1つ目は&lt;a href=&quot;string/charat&quot;&gt; &lt;code&gt;charAt()&lt;/code&gt; &lt;/a&gt;メソッドです。</target>
        </trans-unit>
        <trans-unit id="ff0f992d892480fe8b54b8c31c3b84480f99798b" translate="yes" xml:space="preserve">
          <source>There are two ways to access properties: &lt;em&gt;dot notation&lt;/em&gt; and &lt;em&gt;bracket notation&lt;/em&gt;.</source>
          <target state="translated">プロパティにアクセスするには、&lt;em&gt;ドット表記&lt;/em&gt;と&lt;em&gt;ブラケット表記の&lt;/em&gt;2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="3bc1100e82567e2f208fe7a12e55d415075ed582" translate="yes" xml:space="preserve">
          <source>There are two ways to access properties: dot notation and bracket notation.</source>
          <target state="translated">プロパティにアクセスするには、ドット表記とブラケット表記の2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="e2613c11b0a9e89514dcfe56d5a9e17dd865f6da" translate="yes" xml:space="preserve">
          <source>There are two ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a &lt;em&gt;literal notation&lt;/em&gt; and a &lt;em&gt;constructor&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトを作成するには、&lt;em&gt;リテラル表記&lt;/em&gt;と&lt;em&gt;コンストラクターの&lt;/em&gt;2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d9eac4d67471374ce0fca103ca47a518c3f5d80f" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB).</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得するには2つの方法があります。最初の方法は、JavaScriptから構築することです。次の例では、初期サイズが10ページ（640KiB）、最大サイズが100ページ（6.4MiB）の新しいWebAssembly Memoryインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="401d6e16400c1f5eb29b5ace1859174bc801d65c" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB). Its &lt;code&gt;&lt;a href=&quot;memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; property will return an &lt;code&gt;&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; オブジェクトを取得する方法は2つあります。最初の方法は、JavaScriptから構築することです。次の例では、初期サイズが10ページ（640KiB）、最大サイズが100ページ（6.4MiB）の新しいWebAssemblyメモリインスタンスを作成します。その &lt;code&gt;&lt;a href=&quot;memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; プロパティは &lt;code&gt;&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="08103d657e3ab1660bea7f1345f275c3a3040e73" translate="yes" xml:space="preserve">
          <source>There can be only one ...restParam.</source>
          <target state="translated">1つだけ...restParamがあります。</target>
        </trans-unit>
        <trans-unit id="f78ff8e98e3ceb773092982187159bbba9b6d20d" translate="yes" xml:space="preserve">
          <source>There can be only one special method with the name &quot;&lt;code&gt;constructor&lt;/code&gt;&quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">クラスには、「 &lt;code&gt;constructor&lt;/code&gt; 」という名前の特別なメソッドが1つだけ存在できます。クラスに &lt;code&gt;constructor&lt;/code&gt; メソッドが複数回出現すると、&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="8cecd685f70850c0f03a58c949aa80ac6c0bdf27" translate="yes" xml:space="preserve">
          <source>There can be only one special method with the name &quot;constructor&quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">クラスには、「コンストラクタ」という名前の特別なメソッドを1つだけ含めることができます。クラス内に &lt;code&gt;constructor&lt;/code&gt; メソッドが複数出現すると、&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="966e916d083f8a8c8e09515513f3abbf40caae80" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</source>
          <target state="translated">名前を必要とする&lt;a href=&quot;../statements/function&quot;&gt;関数ステートメント&lt;/a&gt;がコードにあります。関数がどのように定義されているか、名前を付ける必要があるかどうか、問題の関数が関数式、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;である必要があるかどうか、または関数コードがこのコンテキストに正しく配置されているかどうかを確認する必要があります。。</target>
        </trans-unit>
        <trans-unit id="90808877b45c5bd07e9b7ced7576246800e49da6" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</source>
          <target state="translated">コードには、名前を必要とする&lt;a href=&quot;../statements/function&quot;&gt;関数ステートメント&lt;/a&gt;があります。関数がどのように定義されているか、その名前を指定する必要があるかどうか、問題の関数が関数式、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;である必要があるかどうか、または関数コードがこのコンテキストに正しく配置されているかどうかを確認する必要があります。。</target>
        </trans-unit>
        <trans-unit id="5828690653ee4c273ebe5eabccc86bcf251e5ace" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; constructor with at least two arguments passed in the code. The last argument is the source code for the new function you're creating. All the rest make up your new function's argument list.</source>
          <target state="translated">ある &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; のコードに渡された少なくとも二つの引数を持つコンストラクタが。最後の引数は、作成する新しい関数のソースコードです。残りはすべて、新しい関数の引数リストを構成します。</target>
        </trans-unit>
        <trans-unit id="36e983a9e9bfbb388d7bc8a8b42ff6aaf41e7557" translate="yes" xml:space="preserve">
          <source>There is a deprecated source map syntax in a JavaScript source.</source>
          <target state="translated">JavaScriptソースには、非推奨のソースマップ構文があります。</target>
        </trans-unit>
        <trans-unit id="dad988a3dad8edbdac623e474ca021d682a19413" translate="yes" xml:space="preserve">
          <source>There is a distinction between the function name and the variable the function is assigned to. The function name cannot be changed, while the variable the function is assigned to can be reassigned. The function name can be used only within the function's body. Attempting to use it outside the function's body results in an error (or &lt;code&gt;undefined&lt;/code&gt; if the function name was previously declared via a &lt;code&gt;var&lt;/code&gt; statement). For example:</source>
          <target state="translated">関数名とその関数が割り当てられている変数には違いがあります。関数名は変更できませんが、関数が割り当てられている変数は再割り当てできます。関数名は、関数の本体内でのみ使用できます。関数の本体の外で使用しようとすると、エラーになります（または、関数名が以前に &lt;code&gt;var&lt;/code&gt; ステートメントで宣言されている場合は、 &lt;code&gt;undefined&lt;/code&gt; なります）。例えば：</target>
        </trans-unit>
        <trans-unit id="eef3629e677fb9eb1f15308be8de9f061c6ef012" translate="yes" xml:space="preserve">
          <source>There is a mistake in the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma, for example. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.</source>
          <target state="translated">&lt;a href=&quot;../operators/object_initializer&quot;&gt;オブジェクト初期化子の&lt;/a&gt;構文にどこかに誤りがあります。実際には、中括弧が欠落している可能性がありますが、例えば、コンマが欠落している可能性もあります。また、閉じ中括弧または括弧が正しい順序になっているかどうかを確認します。コードを少しインデントしたりフォーマットしたりすると、ジャングルを見通せるようになります。</target>
        </trans-unit>
        <trans-unit id="5bc3b0d19ead633f8047ed968b70ba512ec3dd88" translate="yes" xml:space="preserve">
          <source>There is a more usage oriented way to think of &lt;code&gt;isNaN()&lt;/code&gt;: If &lt;code&gt;isNaN(x)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, you can use &lt;code&gt;x&lt;/code&gt; in an arithmetic expression not making the expression return &lt;code&gt;NaN&lt;/code&gt;. If it returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; will make every arithmetic expression return &lt;code&gt;NaN&lt;/code&gt;. This means that in JavaScript, &lt;code&gt;isNaN(x) == true&lt;/code&gt; is equivalent to &lt;code&gt;x - 0&lt;/code&gt; returning &lt;code&gt;NaN&lt;/code&gt; (though in JavaScript &lt;code&gt;x - 0 == NaN&lt;/code&gt; always returns false, so you can't test for it). Actually, &lt;code&gt;isNaN(x)&lt;/code&gt;, &lt;code&gt;isNaN(x - 0)&lt;/code&gt;, &lt;code&gt;isNaN(Number(x))&lt;/code&gt;, &lt;code&gt;Number.isNaN(x - 0)&lt;/code&gt;, and &lt;code&gt;Number.isNaN(Number(x))&lt;/code&gt; always return the same and in JavaScript &lt;code&gt;isNaN(x)&lt;/code&gt; is just the shortest possible form to express each of these terms.</source>
          <target state="translated">&lt;code&gt;isNaN()&lt;/code&gt; の使用法を重視する方法が他にもあり &lt;code&gt;isNaN(x)&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返す場合、算術式で &lt;code&gt;x&lt;/code&gt; を使用して、式が &lt;code&gt;NaN&lt;/code&gt; を返さないようにすることができます。 &lt;code&gt;true&lt;/code&gt; を返す場合、 &lt;code&gt;x&lt;/code&gt; はすべての算術式に &lt;code&gt;NaN&lt;/code&gt; を返します。つまり、JavaScriptでは、 &lt;code&gt;isNaN(x) == true&lt;/code&gt; は &lt;code&gt;x - 0&lt;/code&gt; &lt;code&gt;NaN&lt;/code&gt; を返すのと同じです（ただし、JavaScriptでは &lt;code&gt;x - 0 == NaN&lt;/code&gt; 常にfalseを返すため、テストできません）。実際には、 &lt;code&gt;isNaN(x)&lt;/code&gt; 、 &lt;code&gt;isNaN(x - 0)&lt;/code&gt; 、 &lt;code&gt;isNaN(Number(x))&lt;/code&gt; 、 &lt;code&gt;Number.isNaN(x - 0)&lt;/code&gt; 、および &lt;code&gt;Number.isNaN(Number(x))&lt;/code&gt; は常に同じ値を返し、JavaScriptでは &lt;code&gt;isNaN(x)&lt;/code&gt; がこれらの各用語を表現するための可能な限り短い形式です。</target>
        </trans-unit>
        <trans-unit id="40dcca166458da9c01e173a2ec8260bb48d15fa0" translate="yes" xml:space="preserve">
          <source>There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need make sure it is available in your current script or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">どこかで参照されている存在しない変数があります。この変数は宣言する必要があります。または、現在のスクリプトまたは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;スコープで&lt;/a&gt;使用できることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="c24a378ea23a0ced2fcd64dacfbf3a9155ca1871" translate="yes" xml:space="preserve">
          <source>There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need to make sure it is available in your current script or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">どこかに参照されている存在しない変数があります。この変数を宣言するか、現在のスクリプトまたは&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;スコープで&lt;/a&gt;使用できることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8329c9f9ae3f5403889a2d82f303e7411b01151c" translate="yes" xml:space="preserve">
          <source>There is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">セミコロン（ &lt;code&gt;;&lt;/code&gt; ）がどこかにありません。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScriptステートメント&lt;/a&gt;はセミコロンで終了する必要があります。それらの一部は&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自動セミコロン挿入（ASI）の&lt;/a&gt;影響を受けますが、この場合、JavaScriptがソースコードを正しく解析できるように、セミコロンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d5f3969067a779f17814a6ff550c49abff4d7d19" translate="yes" xml:space="preserve">
          <source>There is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">どこかにセミコロン（ &lt;code&gt;;&lt;/code&gt; ）がありません。&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScriptステートメント&lt;/a&gt;はセミコロンで終了する必要があります。それらのいくつかは&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自動セミコロン挿入（ASI）の&lt;/a&gt;影響を受けますが、この場合、JavaScriptがソースコードを正しく解析できるように、セミコロンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ee613cc3110951c29ee7b623cb9cbfe91ba8967" translate="yes" xml:space="preserve">
          <source>There is a special syntax for declaring functions (see &lt;a href=&quot;statements/function&quot;&gt;function statement&lt;/a&gt; for details):</source>
          <target state="translated">関数を宣言するための特別な構文があります（詳細については、&lt;a href=&quot;statements/function&quot;&gt;関数ステートメント&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="734192a42687a707ba6bbb1d256a37623fffc32a" translate="yes" xml:space="preserve">
          <source>There is a special syntax for generator function declarations (see &lt;a href=&quot;statements/function*&quot;&gt;&lt;code&gt;function* statement&lt;/code&gt;&lt;/a&gt; for details):</source>
          <target state="translated">ジェネレーター関数宣言には特別な構文があります（詳細については、&lt;a href=&quot;statements/function*&quot;&gt; &lt;code&gt;function* statement&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="63b7c66671ccda2191b78892ec7eccc87f33b7b5" translate="yes" xml:space="preserve">
          <source>There is a syntax mistake when creating a function somewhere. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.</source>
          <target state="translated">どこかで関数を作成する際に構文の間違いがあります。また、閉じている中括弧や括弧が正しい順番になっているかどうかもチェックしてください。インデントを入れたり、コードのフォーマットをもう少し綺麗にすると、ジャングルの中を見通すのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="3f90a14251ff602bf67fdc64be67fee8f5029bc0" translate="yes" xml:space="preserve">
          <source>There is also a function-like dynamic &lt;code&gt;&lt;strong&gt;import()&lt;/strong&gt;&lt;/code&gt;, which does not require scripts of &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type=&quot;module&quot;&lt;/code&gt; のスクリプトを必要としない関数のような動的 &lt;code&gt;&lt;strong&gt;import()&lt;/strong&gt;&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="a0ea518cfe459b524823bdf5286dc6e89efe30c3" translate="yes" xml:space="preserve">
          <source>There is an attempt to set a new value to a property for which only a &lt;a href=&quot;../functions/get&quot;&gt;getter&lt;/a&gt; is specified. While this will be silently ignored in non-strict mode, it will throw a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../functions/get&quot;&gt;ゲッター&lt;/a&gt;のみが指定されているプロパティに新しい値を設定しようとしました。これは黙って非strictモードでは無視されますが、それはスローされます&lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;して&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="601d52f1826cbdd8b13cf22716b3e8003a4669ef" translate="yes" xml:space="preserve">
          <source>There is an error with how a function is called. More arguments need to be provided.</source>
          <target state="translated">関数の呼び出し方法にエラーがあります。より多くの引数を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8bd24391f1947eca0620d3846b17ab9be056f5e" translate="yes" xml:space="preserve">
          <source>There is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example.</source>
          <target state="translated">関数の呼び出し方法にエラーがあります。これはタイプミスや演算子の欠落、あるいはエスケープされていない文字列などが考えられます。</target>
        </trans-unit>
        <trans-unit id="079a090a362d6ae9416cb17d4e30a20176cb1123" translate="yes" xml:space="preserve">
          <source>There is an error with how an &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; condition is written. In any programming language, code needs to make decisions and carry out actions accordingly depending on different inputs. The if statement executes a statement if a specified condition is truthy. In JavaScript, this condition must appear in parenthesis after the &lt;code&gt;if&lt;/code&gt; keyword, like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; 条件の記述方法にエラーがあります。どのプログラミング言語でも、コードはさまざまな入力に応じて決定を行い、それに応じてアクションを実行する必要があります。ifステートメントは、指定された条件が真である場合にステートメントを実行します。JavaScriptでは、この条件は次のように &lt;code&gt;if&lt;/code&gt; キーワードの後に括弧で囲まなければなりません。</target>
        </trans-unit>
        <trans-unit id="ac3ac3c8fba568b075002a16e13254b719e6ace9" translate="yes" xml:space="preserve">
          <source>There is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;&lt;code&gt;]&lt;/code&gt;&quot;) or a comma (&quot;&lt;code&gt;,&lt;/code&gt;&quot;) missing.</source>
          <target state="translated">どこかで配列初期化子の構文にエラーがあります。おそらく閉じ括弧（ &quot; &lt;code&gt;]&lt;/code&gt; &quot;）またはコンマ（ &quot; &lt;code&gt;,&lt;/code&gt; &quot;）がありません。</target>
        </trans-unit>
        <trans-unit id="a76af856478d22b7a91de90ab7d8913bbe495720" translate="yes" xml:space="preserve">
          <source>There is an invalid or unexpected token that doesn't belong at this position in the code. Use an editor that supports syntax highlighting and carefully check your code against mismatches like a minus sign (&lt;code&gt; - &lt;/code&gt;) versus a dash (&lt;code&gt; &amp;ndash; &lt;/code&gt;) or simple quotes (&lt;code&gt; &quot; &lt;/code&gt;) vs non-standard quotation marks (&lt;code&gt; &amp;ldquo; &lt;/code&gt;).</source>
          <target state="translated">コードのこの位置に属していない無効または予期しないトークンがあります。構文の強調表示をサポートするエディターを使用し、マイナス記号（ &lt;code&gt; - &lt;/code&gt; ）とダッシュ（ &lt;code&gt; &amp;ndash; &lt;/code&gt; ）または単純な引用符（ &lt;code&gt; &quot; &lt;/code&gt; ）と非標準引用符（ &lt;code&gt; &amp;ldquo; &lt;/code&gt; ）のようなミスマッチがないかコードを注意深くチェックします。</target>
        </trans-unit>
        <trans-unit id="3d79d3a8162216d15e7a3487ca2db20db3c47f5d" translate="yes" xml:space="preserve">
          <source>There is an open source library available called &lt;a href=&quot;https://null.house/open-source/mapsort&quot;&gt;mapsort&lt;/a&gt; which applies this approach.</source>
          <target state="translated">このアプローチを適用する&lt;a href=&quot;https://null.house/open-source/mapsort&quot;&gt;mapsort&lt;/a&gt;と呼ばれるオープンソースライブラリが利用可能です。</target>
        </trans-unit>
        <trans-unit id="6205123b9aa140036711fe353dec412098e0dcd4" translate="yes" xml:space="preserve">
          <source>There is an unterminated &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; somewhere. String literals must be enclosed by single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;) quotes. JavaScript makes no distinction between single-quoted strings and double-quoted strings. &lt;a href=&quot;../global_objects/string#Escape_notation&quot;&gt;Escape sequences&lt;/a&gt; work in strings created with either single or double quotes. To fix this error, check if:</source>
          <target state="translated">どこかに終端されていない&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;があります。文字列リテラルは、一重引用符（ &lt;code&gt;'&lt;/code&gt; ）または二重引用符（ &lt;code&gt;&quot;&lt;/code&gt; ）で囲む必要があります。JavaScriptは、一重引用符付き文字列と二重引用符付き文字列を区別しません。&lt;a href=&quot;../global_objects/string#Escape_notation&quot;&gt;エスケープシーケンス&lt;/a&gt;は、一重引用符または二重引用符で作成された文字列で機能します。このエラーを修正するには、次のことを確認してください。</target>
        </trans-unit>
        <trans-unit id="dced52e45725251a5cf4e231f95674835cb7763b" translate="yes" xml:space="preserve">
          <source>There is no alignment constraint; multi-byte values may be fetched from any offset.</source>
          <target state="translated">アラインメント制約はありません。マルチバイト値は任意のオフセットから取得できます。</target>
        </trans-unit>
        <trans-unit id="813bfd8ad24be1ca9ab314e589857976cf8d0011" translate="yes" xml:space="preserve">
          <source>There is no way to make an object extensible again once it has been made non-extensible.</source>
          <target state="translated">一度拡張不可能にしたオブジェクトを再び拡張可能にする方法はありません。</target>
        </trans-unit>
        <trans-unit id="c6b6702ca6f9ac3a7721cff4e66e661d718f8baf" translate="yes" xml:space="preserve">
          <source>There is no way to stop or break a &lt;code&gt;forEach()&lt;/code&gt; loop other than by throwing an exception. If you need such behavior, the &lt;code&gt;forEach()&lt;/code&gt; method is the wrong tool.</source>
          <target state="translated">例外をスローする以外に &lt;code&gt;forEach()&lt;/code&gt; ループを停止または解除する方法はありません。このような動作が必要な場合、 &lt;code&gt;forEach()&lt;/code&gt; メソッドは間違ったツールです。</target>
        </trans-unit>
        <trans-unit id="19b88f705ac5c1d6eceb88623955d3cbf474e151" translate="yes" xml:space="preserve">
          <source>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation and must be accessed using bracket notation.</source>
          <target state="translated">JavaScriptの配列やプロパティには、この原因となる特別なものはありません。桁で始まる JavaScript のプロパティはドット表記では参照できず、括弧表記を使用してアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="7e79d1c336655d9a3379f42b74223cd9f8017298" translate="yes" xml:space="preserve">
          <source>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation; and must be accessed using bracket notation. For example, if you had an object with a property named &lt;code&gt;'3d'&lt;/code&gt;, it can only be referenced using bracket notation. E.g.:</source>
          <target state="translated">JavaScriptの配列とこれを引き起こすプロパティについて特別なことは何もありません。数字で始まるJavaScriptプロパティは、ドット表記では参照できません。ブラケット表記を使用してアクセスする必要があります。たとえば、 &lt;code&gt;'3d'&lt;/code&gt; という名前のプロパティを持つオブジェクトがある場合、そのオブジェクトはブラケット表記を使用してのみ参照できます。例えば：</target>
        </trans-unit>
        <trans-unit id="252b4e8437eedd402437cd68393224c8497ca855" translate="yes" xml:space="preserve">
          <source>There isn't any method in an Object itself to delete its own properties (e.g. like &lt;code&gt;&lt;a href=&quot;map/delete&quot;&gt;Map.prototype.delete()&lt;/a&gt;&lt;/code&gt;). To do so one has to use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</source>
          <target state="translated">オブジェクト自体には、独自のプロパティを削除するメソッドはありません（例： &lt;code&gt;&lt;a href=&quot;map/delete&quot;&gt;Map.prototype.delete()&lt;/a&gt;&lt;/code&gt; ）。これを行うには、&lt;a href=&quot;../operators/delete&quot;&gt;削除演算子&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="10b1ddca0fb6ef669c81b9c4f20fa38570137851" translate="yes" xml:space="preserve">
          <source>There isn't any method in an Object itself to delete its own properties (such as &lt;a href=&quot;map/delete&quot;&gt;&lt;code&gt;Map.prototype.delete()&lt;/code&gt;&lt;/a&gt;). To do so, one must use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</source>
          <target state="translated">オブジェクト自体には、それ自体のプロパティ（&lt;a href=&quot;map/delete&quot;&gt; &lt;code&gt;Map.prototype.delete()&lt;/code&gt; &lt;/a&gt;など）を削除するメソッドはありません。これを行うには、&lt;a href=&quot;../operators/delete&quot;&gt;削除演算子を&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3d402ccef36d314f4b2419d96fd7f974013a48d" translate="yes" xml:space="preserve">
          <source>There was an assignment (&lt;code&gt;=&lt;/code&gt;) when you would normally expect a test for equality (&lt;code&gt;==&lt;/code&gt;). To help debugging, JavaScript (with strict warnings enabled) warns about this pattern.</source>
          <target state="translated">通常、等価性のテスト（ &lt;code&gt;==&lt;/code&gt; ）を期待するときに割り当て（ &lt;code&gt;=&lt;/code&gt; ）がありました。デバッグを支援するために、JavaScript（厳密な警告が有効になっている）はこのパターンについて警告します。</target>
        </trans-unit>
        <trans-unit id="f9227994116fe5d0f8085970ec6f16ff6bfdc73c" translate="yes" xml:space="preserve">
          <source>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</source>
          <target state="translated">オブジェクトまたは変数をコンストラクターとして使用しようとしましたが、そのオブジェクトまたは変数はコンストラクターではありません。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;コンストラクターの&lt;/a&gt;詳細については、コンストラクターまたは&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f951ee1c35465bac5e1963445b6acaf0bbbefedc" translate="yes" xml:space="preserve">
          <source>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</source>
          <target state="translated">オブジェクトまたは変数をコンストラクターとして使用しようとしましたが、そのオブジェクトまたは変数はコンストラクターではありません。コンストラクターとは何かの詳細については、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;コンストラクター&lt;/a&gt;または&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="891ffccc316759ba568170669ba5546a49a0e599" translate="yes" xml:space="preserve">
          <source>There was an out of range precision argument in one of these methods:</source>
          <target state="translated">これらの方法の一つに範囲外の精度の議論がありました。</target>
        </trans-unit>
        <trans-unit id="8555a1b96929dda25e05855a91841930b9895b54" translate="yes" xml:space="preserve">
          <source>There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;../operators/assignment_operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;../operators/comparison_operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign assigns a value to a variable, the &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot; operators compare a value.</source>
          <target state="translated">どこかに予期しない割り当てがありました。たとえば、&lt;a href=&quot;../operators/assignment_operators&quot;&gt;代入演算子&lt;/a&gt;と&lt;a href=&quot;../operators/comparison_operators&quot;&gt;比較演算&lt;/a&gt;子の不一致が原因である可能性があります。単一の「 &lt;code&gt;=&lt;/code&gt; 」記号は値を変数に割り当てますが、「 &lt;code&gt;==&lt;/code&gt; 」または「 &lt;code&gt;===&lt;/code&gt; 」演算子は値を比較します。</target>
        </trans-unit>
        <trans-unit id="2cc0b62de74b6015a40cc1de92b6c589e33d8858" translate="yes" xml:space="preserve">
          <source>There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign assigns a value to a variable, the &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot; operators compare a value.</source>
          <target state="translated">どこかに予期しない割り当てがありました。これは、たとえば、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;代入演算子&lt;/a&gt;と&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;比較演算&lt;/a&gt;子の不一致が原因である可能性があります。シングル「 &lt;code&gt;=&lt;/code&gt; &quot; =」記号は変数に値を割り当てますが、「 &lt;code&gt;==&lt;/code&gt; &quot;」または「 &lt;code&gt;===&lt;/code&gt; &quot;」演算子は値を比較します。</target>
        </trans-unit>
        <trans-unit id="c743d038ce86d7d1cf9aef67d46c92805bb7360b" translate="yes" xml:space="preserve">
          <source>There was an unexpected type. This occurs oftentimes with &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">意外なタイプがありました。これは、&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;値で頻繁に発生します。</target>
        </trans-unit>
        <trans-unit id="fa851d659f9e3a5e5404c00816c8b91ca7df0be7" translate="yes" xml:space="preserve">
          <source>There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">権限のないオブジェクトにアクセスしようとしました。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;同じ生成元のポリシーに&lt;/a&gt;違反した別のドメインから読み込まれた&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;要素である可能性があります。</target>
        </trans-unit>
        <trans-unit id="573476911bbd2032116682ce4f1dfae94f4ea1e9" translate="yes" xml:space="preserve">
          <source>There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">権限のないオブジェクトにアクセスしようとしました。これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;同一生成元ポリシーに&lt;/a&gt;違反した別のドメインから読み込まれた&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;要素である可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a2fec0c776a0bb5124c90983a67b0ba18a2c6ee" translate="yes" xml:space="preserve">
          <source>There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;と非推奨の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して、指定されたオブジェクトのキーと値のペアを反復する非推奨のイディオムがあります。</target>
        </trans-unit>
        <trans-unit id="f9de48cf02c49531431b9a478a6c399bfdff23ed" translate="yes" xml:space="preserve">
          <source>There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;と非推奨の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して、指定されたオブジェクトのキーと値のペアを反復処理するための非推奨のイディオムがあります。</target>
        </trans-unit>
        <trans-unit id="f79eb6500b4844bbdbe1fa124b2a371c97ab0a22" translate="yes" xml:space="preserve">
          <source>There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;a href=&quot;substr&quot;&gt;&lt;code&gt;substr()&lt;/code&gt;&lt;/a&gt; methods, so you should be careful not to get them confused.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; &lt;a href=&quot;substr&quot;&gt; &lt;code&gt;substr()&lt;/code&gt; &lt;/a&gt;メソッドとsubstr（）メソッドには微妙な違いがあるため、混乱しないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="d47764807ef3f4ab89be2f3e1fff9829ca861331" translate="yes" xml:space="preserve">
          <source>There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; methods, and you should be careful not get them confused.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; メソッドとsubstr（）メソッドの間には微妙な違いがあり、それらを混同しないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="388052c72ae9c911a2a9c7d0600224bb8a43d9e8" translate="yes" xml:space="preserve">
          <source>Therefore we can't obtain the class name for virtually any class with a static method property &lt;code&gt;name()&lt;/code&gt;:</source>
          <target state="translated">したがって、静的メソッドのプロパティ &lt;code&gt;name()&lt;/code&gt; を持つ実質的にすべてのクラスのクラス名を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="44baae7b20052d28f0d454acdd98cfe8611bd134" translate="yes" xml:space="preserve">
          <source>Therefore you may not rely on the built-in &lt;code&gt;Function.name&lt;/code&gt; property to always hold a class's name.</source>
          <target state="translated">したがって、組み込みの &lt;code&gt;Function.name&lt;/code&gt; プロパティが常にクラスの名前を保持しているとは限りません。</target>
        </trans-unit>
        <trans-unit id="2cdba98eff68875b3d99014eb4149d2554d08b62" translate="yes" xml:space="preserve">
          <source>Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by &lt;code&gt;JSON.stringify&lt;/code&gt; into a JavaScript string to be passed to &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;new Function&lt;/code&gt; or as part of a &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; URL, and the following utility can be used:</source>
          <target state="translated">したがって、古いJavaScriptエンジンとの互換性が必要な場合は、 &lt;code&gt;JSON.stringify&lt;/code&gt; によって返された文字列をJavaScript文字列に直接置き換えて、 &lt;code&gt;eval&lt;/code&gt; または &lt;code&gt;new Function&lt;/code&gt; に渡すか、&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPURLの&lt;/a&gt;一部として渡すのは危険です。次のユーティリティは次のようになります。中古：</target>
        </trans-unit>
        <trans-unit id="8dbf70e76e01d89d71c9236522a7b76a076b920f" translate="yes" xml:space="preserve">
          <source>Therefore, if the JSON is meant to be evaluated or directly utilized within &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;, the following utility can be used:</source>
          <target state="translated">したがって、JSONが評価されるか、&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;内で直接利用される場合は、次のユーティリティを使用できます。</target>
        </trans-unit>
        <trans-unit id="69388a8bead74bc115a22073ad3512cb27d74046" translate="yes" xml:space="preserve">
          <source>Therefore, this appears to work in a way:</source>
          <target state="translated">したがって、これはある意味では機能しているように見える。</target>
        </trans-unit>
        <trans-unit id="40cbde5ec7d37565542fef4246a75fc1451e7a61" translate="yes" xml:space="preserve">
          <source>These are &lt;strong&gt;not&lt;/strong&gt; part of ECMAScript standards and they are not supported by non-Gecko browsers. As a standard alternative, you can convert your object to a proper array using &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;; although that method may not be supported in old browsers:</source>
          <target state="translated">これらはECMAScript標準の一部では&lt;strong&gt;なく&lt;/strong&gt;、Gecko以外のブラウザではサポートされていません。標準的な代替手段として、&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトを適切な配列に変換できます。その方法は古いブラウザではサポートされていないかもしれませんが：</target>
        </trans-unit>
        <trans-unit id="19f1bdd2a382fb545b7ca233307dfaaa84cb23aa" translate="yes" xml:space="preserve">
          <source>These are always reserved:</source>
          <target state="translated">これらは常に予約されています。</target>
        </trans-unit>
        <trans-unit id="59320fcd83ed1d0de297136831e93c2907c65ba8" translate="yes" xml:space="preserve">
          <source>These are the base objects representing numbers, dates, and mathematical calculations.</source>
          <target state="translated">これらは、数字、日付、数学的計算を表す基底オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="adf2d53afae434de46f79f2141ac3e8883ace949" translate="yes" xml:space="preserve">
          <source>These are the fundamental, basic objects upon which all other objects are based. This includes objects that represent general objects, functions, and errors.</source>
          <target state="translated">これらは、他のすべてのオブジェクトの基礎となる基本的なオブジェクトです。これには、一般的なオブジェクト、関数、エラーを表すオブジェクトが含まれます。</target>
        </trans-unit>
        <trans-unit id="6fe3d01344deb2754adced0b183508db74566905" translate="yes" xml:space="preserve">
          <source>These arguments (if any) follow the provided &lt;code&gt;this&lt;/code&gt; value and are then inserted at the start of the arguments passed to the target function, followed by whatever arguments are passed bound function at the time it is called.</source>
          <target state="translated">これらの引数（存在する場合）は、指定された &lt;code&gt;this&lt;/code&gt; 値に従い、ターゲット関数に渡される引数の先頭に挿入され、その後、呼び出されたときにバインドされた関数に渡される引数が続きます。</target>
        </trans-unit>
        <trans-unit id="42c8e79787069b6f572c221d974856e04924de96" translate="yes" xml:space="preserve">
          <source>These arguments count backwards from the end by &lt;code&gt;5&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;1&lt;/code&gt; to find the end index.</source>
          <target state="translated">これらの引数は、開始インデックスを見つけるために末尾から &lt;code&gt;5&lt;/code&gt; だけ逆方向にカウントし、終了インデックスを見つけるために末尾から &lt;code&gt;1&lt;/code&gt; ずつ逆方向にカウントします。</target>
        </trans-unit>
        <trans-unit id="c7f95be1daff8bb613e12808aacd684fe02e1320" translate="yes" xml:space="preserve">
          <source>These arguments customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations which ignore the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation-dependent.</source>
          <target state="translated">これらの引数は関数の動作をカスタマイズし、アプリケーションがフォーマット規則を使用する言語を指定できるようにします。 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数を無視する実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="23194fbe91023a3d742e7a70b01d6964ebbe7f8c" translate="yes" xml:space="preserve">
          <source>These differences are very subtle differences. It's possible that a test suite doesn't catch this kind of subtle difference. Careful review of your code base will probably be necessary to be sure these differences don't affect the semantics of your code. Fortunately, this careful review can be done gradually down the function granularity.</source>
          <target state="translated">これらの違いは非常に微妙な違いです。テストスイートがこの種の微妙な違いをキャッチしていない可能性があります。これらの違いがコードのセマンティクスに影響を与えないことを確認するためには、コードベースの慎重なレビューが必要になるでしょう。幸いなことに、この慎重なレビューは関数の粒度を徐々に下げていくことができます。</target>
        </trans-unit>
        <trans-unit id="7c06c6284f0ffaf0405fa11a8b8cc1d7f5522abc" translate="yes" xml:space="preserve">
          <source>These errors are good, because they reveal plain errors or bad practices. They occur before the code is running.</source>
          <target state="translated">これらのエラーは、明白なエラーや悪い習慣を明らかにするので、良いものです。これらのエラーはコードが実行される前に発生します。</target>
        </trans-unit>
        <trans-unit id="18942180c831ea71766358ab2ffac6c2e9f26c64" translate="yes" xml:space="preserve">
          <source>These flags are represented by a sequence of bits: DCBA. When a flag is &lt;em&gt;set&lt;/em&gt;, it has a value of 1. When a flag is &lt;em&gt;cleared&lt;/em&gt;, it has a value of 0. Suppose a variable &lt;code&gt;flags&lt;/code&gt; has the binary value 0101:</source>
          <target state="translated">これらのフラグはビットのシーケンスで表されます：DCBA。フラグが&lt;em&gt;設定され&lt;/em&gt;ている場合、値は1です。フラグが&lt;em&gt;クリアされ&lt;/em&gt;ている場合、値は0です。変数 &lt;code&gt;flags&lt;/code&gt; のバイナリ値が0101であるとします。</target>
        </trans-unit>
        <trans-unit id="7a8bbfc9a327eeeeb451f9c5c4ea38d87c6a7c23" translate="yes" xml:space="preserve">
          <source>These functions optionally take an &lt;code&gt;initialValue&lt;/code&gt; (which will be used as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;). However, if no initial value is provided, it will use the first element of the &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; as the initial value. This error is raised when an empty array is provided because no initial value can be returned in that case.</source>
          <target state="translated">これらの関数はオプションで、 &lt;code&gt;initialValue&lt;/code&gt; を受け取ります（これは、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの最初の引数として使用されます）。ただし、初期値が指定されていない場合は、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; の&lt;/a&gt;最初の要素が初期値として使用されます。この場合、初期値を返すことができないため、空の配列が提供されると、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d3ebf99aa1376aaab8e2544a1885be39b3c3454f" translate="yes" xml:space="preserve">
          <source>These global functions&amp;mdash;functions which are called globally rather than on an object&amp;mdash;directly return their results to the caller.</source>
          <target state="translated">これらのグローバル関数（オブジェクトではなくグローバルに呼び出される関数）は、その結果を呼び出し元に直接返します。</target>
        </trans-unit>
        <trans-unit id="be3662942b2e23e810fbcea86843f724a5380ee4" translate="yes" xml:space="preserve">
          <source>These global properties return a simple value; they have no properties or methods.</source>
          <target state="translated">これらのグローバル・プロパティは単純な値を返します。</target>
        </trans-unit>
        <trans-unit id="3eb980c6d99c1f5db9089a31df189593846fe7bf" translate="yes" xml:space="preserve">
          <source>These lines display the following:</source>
          <target state="translated">これらの行には以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="b875f200c113c3bad4e865d005ac933a288076a1" translate="yes" xml:space="preserve">
          <source>These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.</source>
          <target state="translated">これらのメソッドは、利用可能なHTMLタグと属性のサブセットを提供するだけなので、使用用途は限られています。</target>
        </trans-unit>
        <trans-unit id="e3ee9bd03f2c6bfdada06f10486463c886ffa413" translate="yes" xml:space="preserve">
          <source>These methods do not modify the array and return some representation of the array.</source>
          <target state="translated">これらのメソッドは配列を変更せず、配列の何らかの表現を返します。</target>
        </trans-unit>
        <trans-unit id="cca597257f192f0edcd8d3eb2d971b0102febe49" translate="yes" xml:space="preserve">
          <source>These methods modify the array:</source>
          <target state="translated">これらのメソッドは配列を変更します。</target>
        </trans-unit>
        <trans-unit id="dddf9337efe3c3b9762a99aafc56201b0dedb279" translate="yes" xml:space="preserve">
          <source>These objects represent and interact with structured data buffers and data coded using JavaScript Object Notation (JSON).</source>
          <target state="translated">これらのオブジェクトは、構造化されたデータバッファやJavaScript Object Notation (JSON)を使用してコード化されたデータを表現し、それらと対話します。</target>
        </trans-unit>
        <trans-unit id="6c51b197bb3602dd2f9ac7530edbb1a23d06ee30" translate="yes" xml:space="preserve">
          <source>These objects represent collections of data which are ordered by an index value. This includes (typed) arrays and array-like constructs.</source>
          <target state="translated">これらのオブジェクトは、インデックス値によって順序付けられたデータの集合を表します。これには、(型付きの)配列や配列のような構造体が含まれます。</target>
        </trans-unit>
        <trans-unit id="5a5c5cf351e08162c242dffe9e27358c69a77ce6" translate="yes" xml:space="preserve">
          <source>These objects represent collections which use keys; these contain elements which are iterable in the order of insertion.</source>
          <target state="translated">これらのオブジェクトはキーを使用するコレクションを表します。</target>
        </trans-unit>
        <trans-unit id="be1ed535f65e43f334e953098d706e7033065d61" translate="yes" xml:space="preserve">
          <source>These objects represent strings and support manipulating them.</source>
          <target state="translated">これらのオブジェクトは文字列を表現し、その操作をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a5000062ebcb72866a9718df3463c1a4fa8f41d9" translate="yes" xml:space="preserve">
          <source>These problems can be solved in two different ways.</source>
          <target state="translated">これらの問題は、2つの方法で解決することができます。</target>
        </trans-unit>
        <trans-unit id="aac36ff9b0b311c2538349f2b1b05f49629e4853" translate="yes" xml:space="preserve">
          <source>These values have the following meanings:</source>
          <target state="translated">これらの値は以下の意味を持っています。</target>
        </trans-unit>
        <trans-unit id="9a9946bdc385aabfb76bc69f8808fede478b2fa9" translate="yes" xml:space="preserve">
          <source>They are of limited use, as they provide only a subset of the available HTML tags and attributes.</source>
          <target state="translated">これらは、利用可能なHTMLタグや属性のサブセットを提供するだけなので、利用は限られています。</target>
        </trans-unit>
        <trans-unit id="1bcb29680b8ba21cacb23cbd3cd454ddff5f16ef" translate="yes" xml:space="preserve">
          <source>They were called &quot;template strings&quot; in prior editions of the ES2015 specification.</source>
          <target state="translated">これらは、ES2015仕様の以前のエディションでは「テンプレート文字列」と呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="babef9389b45b02009b9150991ba15ce9ad6f6ee" translate="yes" xml:space="preserve">
          <source>Third example: Appending a chain to the Function.prototype object and appending a new function to that chain</source>
          <target state="translated">3つ目の例。Function.prototypeオブジェクトにチェーンを追加し、そのチェーンに新しい関数を追加します。</target>
        </trans-unit>
        <trans-unit id="78207ad5ecdb11b4b012586ec80cedacc9d1ec75" translate="yes" xml:space="preserve">
          <source>Third, &lt;code&gt;arguments.callee&lt;/code&gt; is no longer supported. In normal code &lt;code&gt;arguments.callee&lt;/code&gt; refers to the enclosing function. This use case is weak: simply name the enclosing function! Moreover, &lt;code&gt;arguments.callee&lt;/code&gt; substantially hinders optimizations like inlining functions, because it must be made possible to provide a reference to the un-inlined function if &lt;code&gt;arguments.callee&lt;/code&gt; is accessed. &lt;code&gt;arguments.callee&lt;/code&gt; for strict mode functions is a non-deletable property which throws an error when set or retrieved:</source>
          <target state="translated">3番目に、 &lt;code&gt;arguments.callee&lt;/code&gt; はサポートされなくなりました。通常のコードでは、 &lt;code&gt;arguments.callee&lt;/code&gt; は囲んでいる関数を指します。この使用例は弱いです：単に囲む関数に名前を付けてください！また、 &lt;code&gt;arguments.callee&lt;/code&gt; のは、実質的にあれば非インライン関数への参照を提供することが可能となされなければならないので、関数をインライン展開ような最適化を妨げる &lt;code&gt;arguments.callee&lt;/code&gt; のがアクセスされます。ストリクトモード関数の &lt;code&gt;arguments.callee&lt;/code&gt; は、設定または取得時にエラーをスローする削除不可のプロパティです。</target>
        </trans-unit>
        <trans-unit id="a968b5b6e8588988f5a74e8a5155d1a4b027f828" translate="yes" xml:space="preserve">
          <source>Third, &lt;code&gt;arguments&lt;/code&gt; for strict mode functions no longer provide access to the corresponding function call's variables. In some old ECMAScript implementations &lt;code&gt;arguments.caller&lt;/code&gt; was an object whose properties aliased variables in that function. This is a &lt;a href=&quot;http://stuff.mit.edu/iap/2008/facebook/&quot;&gt;security hazard&lt;/a&gt; because it breaks the ability to hide privileged values via function abstraction; it also precludes most optimizations. For these reasons no recent browsers implement it. Yet because of its historical functionality, &lt;code&gt;arguments.caller&lt;/code&gt; for a strict mode function is also a non-deletable property which throws when set or retrieved:</source>
          <target state="translated">第3に、ストリクトモード関数の &lt;code&gt;arguments&lt;/code&gt; は、対応する関数呼び出しの変数へのアクセスを提供しなくなりました。一部の古いECMAScript実装では、 &lt;code&gt;arguments.caller&lt;/code&gt; は、そのプロパティがその関数の変数にエイリアスを付けるオブジェクトでした。これは、関数の抽象化によって特権値を非表示にする機能を破壊するため、&lt;a href=&quot;http://stuff.mit.edu/iap/2008/facebook/&quot;&gt;セキュリティ上の危険&lt;/a&gt;です。また、ほとんどの最適化ができなくなります。これらの理由により、最近のブラウザはそれを実装していません。しかし、その歴史的な機能により、厳密モード関数の &lt;code&gt;arguments.caller&lt;/code&gt; も、設定または取得されたときにスローされる削除不可のプロパティです。</target>
        </trans-unit>
        <trans-unit id="f0bf4f0e82effc2fcdfbd0bafd2806f94fa53428" translate="yes" xml:space="preserve">
          <source>Third, strict mode forbids deleting plain names. &lt;code&gt;delete name&lt;/code&gt; in strict mode is a syntax error:</source>
          <target state="translated">第3に、ストリクトモードでは、プレーンネームの削除が禁止されています。ストリクトモードでの &lt;code&gt;delete name&lt;/code&gt; は構文エラーです。</target>
        </trans-unit>
        <trans-unit id="ff008ff7ee98b437d5c1a16b7ee7b658db491651" translate="yes" xml:space="preserve">
          <source>Third, strict mode makes attempts to delete undeletable properties throw (where before the attempt would simply have no effect):</source>
          <target state="translated">第三に、strict モードでは、削除不可能なプロパティを削除しようとする試みがスローされます (以前の試みは単に何の効果もありません)。</target>
        </trans-unit>
        <trans-unit id="7c10bb714d54c5d432d668317715e557bddcd5c9" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; doesn't support symbol properties, since ES5 doesn't have symbols anyway:</source>
          <target state="translated">ES5にはシンボルが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;含まれて&lt;/a&gt;いないため、このポリフィルはシンボルプロパティをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="7ddedacdb98faa51edf3865ceeff542d95ca3174" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://gist.github.com/384583&quot;&gt;Polyfill&lt;/a&gt; offers &lt;code&gt;watch&lt;/code&gt; to all ES5 compatible browsers.</source>
          <target state="translated">この&lt;a href=&quot;https://gist.github.com/384583&quot;&gt;ポリフィル&lt;/a&gt;は、すべてのES5互換ブラウザーに &lt;code&gt;watch&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="c93fa53d0bbd47a3db878d767ffa2e7c1648219a" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; doesn't support symbol properties, since ES5 doesn't have symbols anyway:</source>
          <target state="translated">ES5にはシンボルがないため、この&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;ポリフィル&lt;/a&gt;はシンボルプロパティをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="be206cd04ed5688a80c6141f96aa0b59a1e416bd" translate="yes" xml:space="preserve">
          <source>This Polyfill emulates the &lt;code&gt;Math.log2&lt;/code&gt; function. Note that it returns imprecise values on some inputs (like 1 &amp;lt;&amp;lt; 29), wrap into &lt;a href=&quot;round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt; if working with bit masks.</source>
          <target state="translated">このポリフィルは、 &lt;code&gt;Math.log2&lt;/code&gt; 関数をエミュレートします。一部の入力（1 &amp;lt;&amp;lt; 29など）では不正確な値を返すことに注意してください。ビットマスクを使用している場合は、&lt;a href=&quot;round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; に&lt;/a&gt;ラップします。</target>
        </trans-unit>
        <trans-unit id="b2049c2c2e9560624c110069b0ab4063f7b90969" translate="yes" xml:space="preserve">
          <source>This algorithm is exactly the one specified in ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このアルゴリズムは、&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が元の値を持ち、 &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;.call&lt;/code&gt; .callが&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; の&lt;/a&gt;元の値に評価されると仮定すると、ECMA-262、&lt;sup&gt;第&lt;/sup&gt;5版で指定されたものとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="17fdf255bf97502cb62fe16d12b782c79ab82346" translate="yes" xml:space="preserve">
          <source>This algorithm is exactly the one specified in ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition, assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values, and that &lt;code&gt;&lt;var&gt;callbackfn&lt;/var&gt;.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このアルゴリズムは、 &lt;code&gt;Object&lt;/code&gt; と &lt;code&gt;TypeError&lt;/code&gt; が元の値を持ち、 &lt;code&gt;&lt;var&gt;callbackfn&lt;/var&gt;.call&lt;/code&gt; .callが&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; の&lt;/a&gt;元の値に評価されると仮定すると、ECMA-262、&lt;sup&gt;第&lt;/sup&gt;5版で指定されたものとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="5509417f952d62bdba51aef5570b1804b8848367" translate="yes" xml:space="preserve">
          <source>This also demonstrates how the &lt;code&gt;exports&lt;/code&gt; property is used to access exported functions.</source>
          <target state="translated">これは、 &lt;code&gt;exports&lt;/code&gt; プロパティを使用してエクスポートされた関数にアクセスする方法も示しています。</target>
        </trans-unit>
        <trans-unit id="bd5220bea55e1a743b859d6d37204563a0636619" translate="yes" xml:space="preserve">
          <source>This also outputs &quot;value&quot;, since both foo and bar are converted to the same string. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScript engine, this string would be &quot;['object Object']&quot;.</source>
          <target state="translated">fooとbarの両方が同じ文字列に変換されるため、これも「値」を出力します。で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkeyの&lt;/a&gt; JavaScriptエンジンは、この文字列は「[ 『オブジェクトオブジェクト』]」になります。</target>
        </trans-unit>
        <trans-unit id="987e22c0bf5a3bdeaa9ce39fd36c228ec1917bab" translate="yes" xml:space="preserve">
          <source>This also outputs &lt;code&gt;'value'&lt;/code&gt;, since both &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;bar&lt;/var&gt;&lt;/code&gt; are converted to the same string.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;bar&lt;/var&gt;&lt;/code&gt; の両方が同じ文字列に変換されるため、これも &lt;code&gt;'value'&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="43e3ab0dc2fac9991fde806932764fcc7d178e23" translate="yes" xml:space="preserve">
          <source>This article aims at providing guidance for developers.</source>
          <target state="translated">この記事は、開発者のためのガイダンスを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="9626b764e08efbd935cba08ae43dfb975f652917" translate="yes" xml:space="preserve">
          <source>This behavior does not apply to &lt;code&gt;Boolean&lt;/code&gt; primitives. For example, the condition in the following &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement evaluates to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">この動作は &lt;code&gt;Boolean&lt;/code&gt; プリミティブには適用されません。たとえば、次の&lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;ステートメントの条件は &lt;code&gt;false&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="a7d9211767c7428f9136180953a4195577a05ab3" translate="yes" xml:space="preserve">
          <source>This can be achieved with a combination of &lt;a href=&quot;math/random&quot;&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">これは、&lt;a href=&quot;math/random&quot;&gt; &lt;code&gt;Math.random()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; の&lt;/a&gt;組み合わせで実現できます。</target>
        </trans-unit>
        <trans-unit id="54a8582be47d36134e44af859785bba94f93d79c" translate="yes" xml:space="preserve">
          <source>This can be achieved with the &quot;export from&quot; syntax:</source>
          <target state="translated">これは &quot;export from &quot;構文で実現できます。</target>
        </trans-unit>
        <trans-unit id="3ad291aa4d8ee431b14c569c6df3b5210c4b79f9" translate="yes" xml:space="preserve">
          <source>This can be converted to the following expression:</source>
          <target state="translated">これを次の式に変換することができます。</target>
        </trans-unit>
        <trans-unit id="93b25c64a2bb1e288bd99c8fbe5b8bafb815e7e5" translate="yes" xml:space="preserve">
          <source>This can be emulated using the following function:</source>
          <target state="translated">これは、以下の関数を使用してエミュレートすることができます。</target>
        </trans-unit>
        <trans-unit id="f926f626ea1e32d2d481952e313cfa41dc28e854" translate="yes" xml:space="preserve">
          <source>This can be emulated with the following function, if &lt;a href=&quot;../float32array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; are supported:</source>
          <target state="translated">&lt;a href=&quot;../float32array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;がサポートされている場合、これは次の関数でエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="d21f00b36784c0aeb2b851d770e82cc575dfd3b1" translate="yes" xml:space="preserve">
          <source>This can be emulated with the following function:</source>
          <target state="translated">これは以下の関数でエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="f0fc43e5f46c538b39638bfb56ef17a17afaac04" translate="yes" xml:space="preserve">
          <source>This can be emulated with the help of the &lt;a href=&quot;exp&quot;&gt;&lt;code&gt;Math.exp()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">これは、&lt;a href=&quot;exp&quot;&gt; &lt;code&gt;Math.exp()&lt;/code&gt; &lt;/a&gt;関数を使用してエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="1caecfd92674232e7963c8708a5db376087af9c3" translate="yes" xml:space="preserve">
          <source>This can be encountered when:</source>
          <target state="translated">といった場合に遭遇することがあります。</target>
        </trans-unit>
        <trans-unit id="d2878f6477ef171927dfb7b63ee15513ab49a0e4" translate="yes" xml:space="preserve">
          <source>This can be fixed by storing the value in another property. In &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods, &lt;code&gt;this&lt;/code&gt; points to the object which is used to access or modify the property.</source>
          <target state="translated">これは、値を別のプロパティに格納することで修正できます。で &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; 方法、 &lt;code&gt;this&lt;/code&gt; アクセスに使用されるか、またはプロパティを変更されたオブジェクトをポイント。</target>
        </trans-unit>
        <trans-unit id="8637424076e7fdfeee1e684695bee835d9c5b29c" translate="yes" xml:space="preserve">
          <source>This capability is similar to features present in languages such as Perl and Python.</source>
          <target state="translated">この機能は、PerlやPythonなどの言語に存在する機能に似ています。</target>
        </trans-unit>
        <trans-unit id="f270662d770728da9dd5f30c95435fca6101409c" translate="yes" xml:space="preserve">
          <source>This change should be backwards-compatible as long as you pass the result of &lt;code&gt;JSON.stringify&lt;/code&gt; to APIs such as &lt;code&gt;JSON.parse&lt;/code&gt; that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves. &lt;em&gt;Only&lt;/em&gt; if you are directly interpreting the result of &lt;code&gt;JSON.stringify&lt;/code&gt; do you need to carefully handle &lt;code&gt;JSON.stringify&lt;/code&gt;'s two possible encodings of these code points.</source>
          <target state="translated">この変更は、 &lt;code&gt;JSON.stringify&lt;/code&gt; の結果を有効なJSONテキストを受け入れる &lt;code&gt;JSON.parse&lt;/code&gt; などのAPIに渡す限り、下位互換性があります。これは、単独のサロゲートのUnicodeエスケープを単独のサロゲート自体と同一として扱うためです。&lt;em&gt;唯一の&lt;/em&gt;あなたが直接の結果を解釈している場合 &lt;code&gt;JSON.stringify&lt;/code&gt; を慎重に処理する必要がない &lt;code&gt;JSON.stringify&lt;/code&gt; これらのコード・ポイントのの2つの可能なエンコーディングを。</target>
        </trans-unit>
        <trans-unit id="52ec415c21656b4e1b8e73732c50ced79b4f1a06" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;JavaScript standard built-in objects&lt;/a&gt;, along with their methods and properties.</source>
          <target state="translated">この章では、すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;JavaScript標準組み込みオブジェクト&lt;/a&gt;と、それらのメソッドおよびプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="a0489c62937cfb2364acc83ca2a1245aa5088fbc" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;JavaScript expressions and operators&lt;/a&gt;.</source>
          <target state="translated">この章では、すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;JavaScript式と演算子について説明し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cb18bdfe69d338a2e163b4a1ab159bf54053304d" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements and declarations&lt;/a&gt;.</source>
          <target state="translated">この章では、すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScriptステートメントと宣言について説明し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1946293170999b6370e4a8efc4bfc761c8dc2309" translate="yes" xml:space="preserve">
          <source>This chapter documents all the JavaScript language operators, expressions and keywords.</source>
          <target state="translated">この章では、JavaScript言語のすべての演算子、式、キーワードについて説明します。</target>
        </trans-unit>
        <trans-unit id="2d3db99e9899796f2e575c3e83689ed0ea4faaa0" translate="yes" xml:space="preserve">
          <source>This chapter documents all the JavaScript standard built-in objects, along with their methods and properties.</source>
          <target state="translated">この章では、すべてのJavaScript標準の組み込みオブジェクトと、そのメソッドとプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="8ea2390318cc20ce6263f76f13a6bae75bcc9bf0" translate="yes" xml:space="preserve">
          <source>This chapter documents how to work with &lt;a href=&quot;functions&quot;&gt;JavaScript functions&lt;/a&gt; to develop your applications.</source>
          <target state="translated">この章では、&lt;a href=&quot;functions&quot;&gt;JavaScript関数&lt;/a&gt;を使用してアプリケーションを開発する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="ab3c71a069164684e41148766021ad5ff5657de9" translate="yes" xml:space="preserve">
          <source>This code can be run under NodeJS. Comprehension is enhanced by seeing the errors actually occur. To force more errors, change the &lt;code&gt;threshold&lt;/code&gt; values.</source>
          <target state="translated">このコードはNodeJSで実行できます。エラーが実際に発生するのを確認することで、理解が深まります。より多くのエラーを強制するには、 &lt;code&gt;threshold&lt;/code&gt; 変更します。</target>
        </trans-unit>
        <trans-unit id="62359e7e1c67ff757c79cb13ebfa480bbfeddf35" translate="yes" xml:space="preserve">
          <source>This code fails, as the equal sign can't be used this way in this object initializer syntax.</source>
          <target state="translated">このコードは、このオブジェクトの初期化構文では等号をこのように使用できないため、失敗します。</target>
        </trans-unit>
        <trans-unit id="e93d09fba02a1fa5bed87320e7d4bb9906dcbc5d" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;classes sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;).</source>
          <target state="translated">このコードスニペットは、&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;クラスのサンプル&lt;/a&gt;（&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;）から抜粋したものです。</target>
        </trans-unit>
        <trans-unit id="f2ceb2ebf615c7ca60bc60dad3b8703a4ff16b94" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;classes sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;). Here &lt;code&gt;super()&lt;/code&gt; is called to avoid duplicating the constructor parts' that are common between &lt;code&gt;Rectangle&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;.</source>
          <target state="translated">このコードスニペットは、&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;クラスのサンプル&lt;/a&gt;（&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;）から抜粋したものです。ここで &lt;code&gt;super()&lt;/code&gt; が呼び出され、 &lt;code&gt;Rectangle&lt;/code&gt; と &lt;code&gt;Square&lt;/code&gt; の間で共通するコンストラクター部分の重複を回避しています。</target>
        </trans-unit>
        <trans-unit id="86727df284471763d7a0565fcf32b92e27198e51" translate="yes" xml:space="preserve">
          <source>This code will now output &lt;code&gt;hello&lt;/code&gt; in the console as it should, without any errors at all.</source>
          <target state="translated">このコードは、エラーなしで、コンソールに &lt;code&gt;hello&lt;/code&gt; を出力するようになりました。</target>
        </trans-unit>
        <trans-unit id="07a0c0a1c5279be7ca0fcebe7c55e2d76317b6a4" translate="yes" xml:space="preserve">
          <source>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do &lt;strong&gt;not&lt;/strong&gt; become properties of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; object, unlike &lt;a href=&quot;var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; variables.</source>
          <target state="translated">この宣言は、スコープが宣言されたブロックに対してグローバルまたはローカルのいずれかである定数を作成します。&lt;a href=&quot;var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt;変数とは異なり、グローバル定数は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt;オブジェクトのプロパティにはなりませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="acecf8c55497d383f08519c6b9f28ff9d6bb0d15" translate="yes" xml:space="preserve">
          <source>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the window object, unlike &lt;code&gt;&lt;a href=&quot;var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; variables. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).</source>
          <target state="translated">この宣言は、スコープが宣言されたブロックに対してグローバルまたはローカルのいずれかになる定数を作成します。 &lt;code&gt;&lt;a href=&quot;var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 変数とは異なり、グローバル定数はウィンドウオブジェクトのプロパティにはなりません。定数の初期化子が必要です。つまり、その値は宣言されているのと同じステートメントで指定する必要があります（後で変更できないことを考えると、これは理にかなっています）。</target>
        </trans-unit>
        <trans-unit id="bad3d863e88d4e3c25abb04fb7e467e62f6e75c5" translate="yes" xml:space="preserve">
          <source>This definition supersedes the definition provided in ECMA-262.</source>
          <target state="translated">この定義は、ECMA-262に規定されている定義に優先する。</target>
        </trans-unit>
        <trans-unit id="6f968fc9ccc244f1b76b93c6844d3619a51936f4" translate="yes" xml:space="preserve">
          <source>This demonstrates that it matters only that the function was invoked from the &lt;code&gt;f&lt;/code&gt; member of &lt;code&gt;o&lt;/code&gt;.</source>
          <target state="translated">これは、関数が &lt;code&gt;o&lt;/code&gt; の &lt;code&gt;f&lt;/code&gt; メンバーから呼び出されたことだけが重要であることを示しています。</target>
        </trans-unit>
        <trans-unit id="0bda21ee36aa642cf18c3b46156646dc4fb2bfea" translate="yes" xml:space="preserve">
          <source>This differs from ECMAScript 3, which discouraged but allowed octal interpretation.</source>
          <target state="translated">これは、8進数の解釈を許可していたECMAScript 3とは異なります。</target>
        </trans-unit>
        <trans-unit id="b2458fde30306d280c6f35c49d963363652697ca" translate="yes" xml:space="preserve">
          <source>This differs from ECMAScript 3, which merely &lt;em&gt;discouraged&lt;/em&gt; (but allowed) octal interpretation.</source>
          <target state="translated">これは、8進数の解釈を単に&lt;em&gt;推奨しない&lt;/em&gt;（ただし許可する）ECMAScript3とは異なります。</target>
        </trans-unit>
        <trans-unit id="1519bf6763aba2fd7a8258fc6d70b97467e733a1" translate="yes" xml:space="preserve">
          <source>This displays &quot;Smith, John&quot;.</source>
          <target state="translated">Smith,John」と表示されます。</target>
        </trans-unit>
        <trans-unit id="ed5511f2421466f5e03a5a0b0c9360e0ff60283a" translate="yes" xml:space="preserve">
          <source>This displays &lt;code&gt;&quot;Smith, John&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;Smith, John&quot;&lt;/code&gt; 表示されます。</target>
        </trans-unit>
        <trans-unit id="06ee698241a832f0c35ecf961e5a598b1cb373fd" translate="yes" xml:space="preserve">
          <source>This does the exact same thing as the previous example.</source>
          <target state="translated">これは先ほどの例と全く同じことをしています。</target>
        </trans-unit>
        <trans-unit id="2e9c0a635918e3c9d07d290025ea86eea4026e4c" translate="yes" xml:space="preserve">
          <source>This ensures the return value of &lt;code&gt;doSomething&lt;/code&gt; changing from &lt;code&gt;undefined&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will not change the behavior of this code.</source>
          <target state="translated">これは、の戻り値が保証 &lt;code&gt;doSomething&lt;/code&gt; から変更 &lt;code&gt;undefined&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; 、このコードの動作を変更しません。</target>
        </trans-unit>
        <trans-unit id="911d9f9d45b91545c221c3486eeb449728c67558" translate="yes" xml:space="preserve">
          <source>This error can occur easily when not escaping strings properly and the JavaScript engine is expecting the end of your string already. For example:</source>
          <target state="translated">このエラーは、文字列を適切にエスケープしておらず、JavaScriptエンジンがすでに文字列の末尾を期待している場合に簡単に発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0201c0b7ba051d29f8ca6584a85c6705befd0c09" translate="yes" xml:space="preserve">
          <source>This error happens only in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the assignment is silently ignored.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;strictモードのコードで&lt;/a&gt;のみ発生します。非厳密なコードでは、割り当ては警告なしで無視されます。</target>
        </trans-unit>
        <trans-unit id="096835feb91d9ff6a57e922f78bbdd190711d6fd" translate="yes" xml:space="preserve">
          <source>This error happens only in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the operation returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;strictモードのコードで&lt;/a&gt;のみ発生します。厳密でないコードでは、操作は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1a0e3ad44d95312052d97db9a3a1d9c7cc2d5f29" translate="yes" xml:space="preserve">
          <source>This error occurs as a warning in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt; only. In non-strict code, the redeclaration is silently ignored.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;厳格モードのコードで&lt;/a&gt;のみ警告として発生します。厳格でないコードでは、再宣言は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="bbd89c12b15d7bbad4f26beb179fde8bbe893186" translate="yes" xml:space="preserve">
          <source>This error only happens in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the operation just returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;厳格モードのコード&lt;/a&gt;でのみ発生します。非厳密なコードでは、操作は単に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bb2f48d817f97074af67cc74fa3d8ccee5fee9f0" translate="yes" xml:space="preserve">
          <source>This even applies to functions and variables:</source>
          <target state="translated">これは関数や変数にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="0418362082cc8bf02ccf057b5001fec07604aec0" translate="yes" xml:space="preserve">
          <source>This example counts backwards from the end of the string by &lt;code&gt;11&lt;/code&gt; to find the start index and forwards from the start of the string by &lt;code&gt;16&lt;/code&gt; to find the end index.</source>
          <target state="translated">この例では、文字列の末尾から &lt;code&gt;11&lt;/code&gt; ずつ逆方向にカウントして開始インデックスを見つけ、文字列の先頭から &lt;code&gt;16&lt;/code&gt; ずつ順方向にカウントして終了インデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="e0ad76db7e3ffc323f896f6c610ff40d7b05bede" translate="yes" xml:space="preserve">
          <source>This example defines a function that concatenates several strings. The function's only formal argument is a string containing the characters that separate the items to concatenate.</source>
          <target state="translated">この例では、複数の文字列を連結する関数を定義しています。この関数の唯一の形式的な引数は、連結する項目を区切る文字を含む文字列です。</target>
        </trans-unit>
        <trans-unit id="90f25031bc45dce7cbb8e9209d0d66425c578957" translate="yes" xml:space="preserve">
          <source>This example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is &quot;&lt;code&gt;u&lt;/code&gt;&quot; if the list is to be &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;unordered (bulleted)&lt;/a&gt;, or &quot;&lt;code&gt;o&lt;/code&gt;&quot; if the list is to be &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt;ordered (numbered)&lt;/a&gt;. The function is defined as follows:</source>
          <target state="translated">この例では、リストのHTMLを含む文字列を作成する関数を定義します。関数の唯一の正式な引数は、リストを&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;順序付けしない（箇条書き）&lt;/a&gt;場合は「 &lt;code&gt;u&lt;/code&gt; 」、リストを順序付け&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt;する（番号を付ける）&lt;/a&gt;場合は「 &lt;code&gt;o&lt;/code&gt; 」の文字列です。関数は次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="73a7c3b2b05f6ed743c9e09f0bd5e66a60a75b6f" translate="yes" xml:space="preserve">
          <source>This example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is &quot;&lt;code&gt;u&lt;/code&gt;&quot; if the list is to be unordered (bulleted), or &quot;&lt;code&gt;o&lt;/code&gt;&quot; if the list is to be ordered (numbered). The function is defined as follows:</source>
          <target state="translated">この例では、リストのHTMLを含む文字列を作成する関数を定義しています。関数の唯一の仮引数は、リストを順序付けしない（箇条書き）場合は「 &lt;code&gt;u&lt;/code&gt; 」、リストを順序付けする（番号付き）場合は「 &lt;code&gt;o&lt;/code&gt; 」である文字列です。関数は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="bf75ffc93a3f734d878ab27162b4c36ee16bc2c6" translate="yes" xml:space="preserve">
          <source>This example demonstrates how one can separate out Unicode characters from a word.</source>
          <target state="translated">この例では、単語から Unicode 文字をどのように分離するかを示しています。</target>
        </trans-unit>
        <trans-unit id="871c98d30147b459568b64391ee95744afc6f560" translate="yes" xml:space="preserve">
          <source>This example demonstrates that &lt;code&gt;Baz.prototype&lt;/code&gt;, &lt;code&gt;Bar.prototype&lt;/code&gt;, &lt;code&gt;Foo.prototype&lt;/code&gt; and &lt;code&gt;Object.prototype&lt;/code&gt; exist in the prototype chain for object &lt;code&gt;baz&lt;/code&gt;:</source>
          <target state="translated">この例は、 &lt;code&gt;Baz.prototype&lt;/code&gt; 、 &lt;code&gt;Bar.prototype&lt;/code&gt; 、 &lt;code&gt;Foo.prototype&lt;/code&gt; および &lt;code&gt;Object.prototype&lt;/code&gt; がオブジェクト &lt;code&gt;baz&lt;/code&gt; のプロトタイプチェーンに存在することを示しています。</target>
        </trans-unit>
        <trans-unit id="5cfd66d3f85028f1818634da1d4c6321fd88e0c9" translate="yes" xml:space="preserve">
          <source>This example displays the following output (comments added for reference):</source>
          <target state="translated">この例では、以下のような出力が表示されます(参考のためにコメントを追加しました)。</target>
        </trans-unit>
        <trans-unit id="47851f66673ccc14ec0754c46428b69ca2e0999f" translate="yes" xml:space="preserve">
          <source>This example displays the following output:</source>
          <target state="translated">この例では、以下のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="1a2e7cbddcea7b49fd155d4d8b4a95f64e4d1074" translate="yes" xml:space="preserve">
          <source>This example extends the built-in &lt;a href=&quot;../global_objects/date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object. This example is extracted from this &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt;.</source>
          <target state="translated">この例では、組み込みの&lt;a href=&quot;../global_objects/date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを拡張しています。この例は、この&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;（ソース）&lt;/a&gt;から抽出されます。</target>
        </trans-unit>
        <trans-unit id="09e17c7f0dca3ac4b5a7ef196f654212d4264e30" translate="yes" xml:space="preserve">
          <source>This example first creates an async iterable for a stream of data, then uses it to find the size of the response from the API.</source>
          <target state="translated">この例では、まずデータのストリームに対して非同期のイテレータブルを作成し、それを使用して API からのレスポンスのサイズを見つけます。</target>
        </trans-unit>
        <trans-unit id="3c0cb82830ca1098ba1b0b5512fa2c2036073c25" translate="yes" xml:space="preserve">
          <source>This example is started by clicking the button. (You need a browser that supports &lt;code&gt;Promise&lt;/code&gt;. )</source>
          <target state="translated">この例は、ボタンをクリックすることから始まります。（ &lt;code&gt;Promise&lt;/code&gt; をサポートするブラウザが必要です。）</target>
        </trans-unit>
        <trans-unit id="0bd856e759126f7feb000d22a885f2704c020494" translate="yes" xml:space="preserve">
          <source>This example is started by clicking the button. You need a browser that supports &lt;code&gt;Promise&lt;/code&gt;. By clicking the button several times in a short amount of time, you'll even see the different promises being fulfilled one after another.</source>
          <target state="translated">この例は、ボタンをクリックすることから始まります。 &lt;code&gt;Promise&lt;/code&gt; をサポートするブラウザが必要です。ボタンを短時間で数回クリックすることにより、さまざまな約束が次々と満たされていることもわかります。</target>
        </trans-unit>
        <trans-unit id="506e976c52ce7c84b595b66adf2793ef1c3bea8d" translate="yes" xml:space="preserve">
          <source>This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.</source>
          <target state="translated">この例では、以下のような出力が得られます。このように、比較関数を使用すると、数値が数字であっても数値列であっても正しくソートされます。</target>
        </trans-unit>
        <trans-unit id="b834c1665b1411c83b15a236780f0e6f998b2e68" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">この例では、以下のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="dbe0fb62601b83dd6e280fe780efcb2b15db5715" translate="yes" xml:space="preserve">
          <source>This example returns a random &lt;em&gt;integer&lt;/em&gt; between the specified values. The value is no lower than &lt;code&gt;min&lt;/code&gt; (or the next integer greater than &lt;code&gt;min&lt;/code&gt; if &lt;code&gt;min&lt;/code&gt; isn't an integer), and is less than (but not equal to) &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">この例では、指定された値の間のランダムな&lt;em&gt;整数を&lt;/em&gt;返します。値よりも低くなっていない &lt;code&gt;min&lt;/code&gt; （またはそれより次の整数大きい &lt;code&gt;min&lt;/code&gt; 場合 &lt;code&gt;min&lt;/code&gt; は整数でない）、および（ただしに等しい）未満である &lt;code&gt;max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ad9a85be409f64d9aef24ce2c3dbcb40ad199d5" translate="yes" xml:space="preserve">
          <source>This example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) &lt;code&gt;min&lt;/code&gt;, and is less than (and not equal) &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">この例では、指定された値の間の乱数を返します。戻り値は &lt;code&gt;min&lt;/code&gt; よりも小さく（場合によっては等しい）、 &lt;code&gt;max&lt;/code&gt; よりも小さい（等しくない）場合があります。</target>
        </trans-unit>
        <trans-unit id="cd6856f24749ae44c743869c3071898a38155b08" translate="yes" xml:space="preserve">
          <source>This example shows diverse techniques for using Promise capabilities and diverse situations that can occur. To understand this, start by scrolling to the bottom of the code block, and examine the promise chain. Upon provision of an initial promise, a chain of promises can follow. The chain is composed of &lt;code&gt;.then()&lt;/code&gt; calls, and typically (but not necessarily) has a single &lt;code&gt;.catch()&lt;/code&gt; at the end, optionally followed by &lt;code&gt;.finally()&lt;/code&gt;. In this example, the promise chain is initiated by a custom-written &lt;code&gt;new Promise()&lt;/code&gt; construct; but in actual practice, promise chains more typically start with an API function (written by someone else) that returns a promise.</source>
          <target state="translated">この例は、Promise機能を使用するためのさまざまな手法と発生する可能性のあるさまざまな状況を示しています。これを理解するには、まずコードブロックの一番下までスクロールし、Promiseチェーンを調べます。最初の約束が提供されると、一連の約束が続く可能性があります。チェーンは &lt;code&gt;.then()&lt;/code&gt; 呼び出しで構成され、通常（必ずではありませんが）最後に単一の &lt;code&gt;.catch()&lt;/code&gt; があり、オプションで &lt;code&gt;.finally()&lt;/code&gt; が続きます。この例では、promiseチェーンはカスタム作成された &lt;code&gt;new Promise()&lt;/code&gt; コンストラクトによって開始されます。しかし実際には、promiseチェーンは通常、promiseを返すAPI関数（他の誰かによって作成されたもの）で始まります。</target>
        </trans-unit>
        <trans-unit id="57f2c7b225c188a1add4b85e9a2cc4aff53e12d6" translate="yes" xml:space="preserve">
          <source>This example shows how to iterate through a collection of objects collected by &lt;code&gt;querySelectorAll&lt;/code&gt;. In this case we get all selected options on the screen and printed on the console:</source>
          <target state="translated">この例は、 &lt;code&gt;querySelectorAll&lt;/code&gt; によって収集されたオブジェクトのコレクションを反復処理する方法を示しています。この場合、選択したすべてのオプションが画面に表示され、コンソールに出力されます。</target>
        </trans-unit>
        <trans-unit id="eed1860eb426bfdbc2f776b86d3192a5fc464c1c" translate="yes" xml:space="preserve">
          <source>This example shows how to iterate through a collection of objects collected by &lt;code&gt;querySelectorAll&lt;/code&gt;. This is because &lt;code&gt;querySelectorAll&lt;/code&gt; returns a &lt;code&gt;NodeList&lt;/code&gt; (which is a collection of objects).</source>
          <target state="translated">この例は、 &lt;code&gt;querySelectorAll&lt;/code&gt; によって収集されたオブジェクトのコレクションを反復処理する方法を示しています。これは、 &lt;code&gt;querySelectorAll&lt;/code&gt; が &lt;code&gt;NodeList&lt;/code&gt; （オブジェクトのコレクション）を返すためです。</target>
        </trans-unit>
        <trans-unit id="dd2e6ee40526a1d0465fe37ec3a7aeb12df0a955" translate="yes" xml:space="preserve">
          <source>This example shows how to load functionality on to a page based on a user action, in this case a button click, and then call a function within that module. This is not the only way to implement this functionality. The &lt;code&gt;import()&lt;/code&gt; function also supports &lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">この例は、ユーザーのアクション（この場合はボタンのクリック）に基づいて機能をページにロードし、そのモジュール内の関数を呼び出す方法を示しています。これがこの機能を実装する唯一の方法ではありません。 &lt;code&gt;import()&lt;/code&gt; 関数もサポートしています &lt;code&gt;await&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5cda9459bc6fad44cf5002bc12a2fafdfe5f77e4" translate="yes" xml:space="preserve">
          <source>This example shows how to use map on a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; to get an array of bytes in the ASCII encoding representing the character values:</source>
          <target state="translated">次の例は、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; mapを使用して、文字値を表すASCIIエンコーディングのバイト配列を取得する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c6010b9290e4cac16f9239768f4269d093761d15" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた日付と時刻の形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェイスで使用される言語の形式を取得するには、 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; 引数を使用してその言語（および場合によっては一部のフォールバック言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="590cefd23d1edd4dd188f61dcd919f75b1c64a1c" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた日付と時刻の形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="43a7a6d067d8754510839a686064cf456dccd946" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた日付形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="325cec468238da657537fbdc631c44daba6ab6b9" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた数値形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="d8b708372e6c816d7911558aa144dff0a2b1fb0d" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized plural rules. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた複数のルールのバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="630dd3659d7f6ea887e3de3f43ca34b30710ff4d" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた時刻形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="4a4a4676f6326fd0a096aa3c44f833d606d3cea8" translate="yes" xml:space="preserve">
          <source>This example shows that we're creating and accessing the table from JavaScript, but the same table is visible and callable inside the wasm instance too.</source>
          <target state="translated">この例では、JavaScript からテーブルを作成してアクセスしていますが、同じテーブルが wasm インスタンス内でも表示され、呼び出し可能であることを示しています。</target>
        </trans-unit>
        <trans-unit id="d1fcd9a201cc02314fd2430857eef298620fd20d" translate="yes" xml:space="preserve">
          <source>This example throws a &lt;code&gt;SyntaxError&lt;/code&gt;:</source>
          <target state="translated">この例では、 &lt;code&gt;SyntaxError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="ede9db60430dbac72f66f4b56bcb70a97ac80f5e" translate="yes" xml:space="preserve">
          <source>This example uses &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; to push all elements from a second array.</source>
          <target state="translated">この例では、&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;を使用して、2番目の配列からすべての要素をプッシュします。</target>
        </trans-unit>
        <trans-unit id="1dbdf5d54bd7ed988a153277a1893e923a88c1d4" translate="yes" xml:space="preserve">
          <source>This example will output the error &lt;code&gt;Uncaught SyntaxError: Identifier 'message' has already been declared&lt;/code&gt; which you were not probably expecting.</source>
          <target state="translated">この例では、エラー &lt;code&gt;Uncaught SyntaxError: Identifier 'message' has already been declared&lt;/code&gt; いますが、おそらく予期していなかったエラーが出力されます。</target>
        </trans-unit>
        <trans-unit id="11b1e0cb1465747928aea91ff0e45f56160857bb" translate="yes" xml:space="preserve">
          <source>This feature is deprecated in favor of defining getters using the &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer syntax&lt;/a&gt; or the &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; API. While this feature is widely implemented, it is only described in the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers&quot;&gt;ECMAScript specification&lt;/a&gt; because of legacy usage. This method should not be used since better alternatives exist.</source>
          <target state="translated">この機能は非推奨になり、&lt;a href=&quot;../../operators/object_initializer&quot;&gt;オブジェクト初期化子構文&lt;/a&gt;または&lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; API を使用してゲッターを定義します。この機能は広く実装されていますが、従来の使用法のため、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers&quot;&gt;ECMAScript仕様&lt;/a&gt;でのみ説明されています。より良い代替手段が存在するため、この方法は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="86411ba63951d765641d545f8df4bcf74c901436" translate="yes" xml:space="preserve">
          <source>This feature is deprecated in favor of defining setters using the &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer syntax&lt;/a&gt; or the &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">この機能は非推奨になり、&lt;a href=&quot;../../operators/object_initializer&quot;&gt;オブジェクト初期化子構文&lt;/a&gt;または&lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; API を使用してセッターを定義します。</target>
        </trans-unit>
        <trans-unit id="17fdac85d6009334c365dfdd6eb6bef5e4374b26" translate="yes" xml:space="preserve">
          <source>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the &lt;a href=&quot;#Browser_compatibility&quot;&gt;compatibility table&lt;/a&gt; at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</source>
          <target state="translated">この機能は推奨されなくなりました。一部のブラウザーはまだそれをサポートしている可能性がありますが、関連するWeb標準から既に削除されているか、削除中か、互換性を保つ目的でのみ保持されている可能性があります。使用を避け、可能であれば既存のコードを更新してください。このページの下部にある&lt;a href=&quot;#Browser_compatibility&quot;&gt;互換性の表&lt;/a&gt;を参照して、決定を行ってください。この機能はいつでも機能しなくなる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ad63cac1625affd2a84d66756a720def351fb2b3" translate="yes" xml:space="preserve">
          <source>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</source>
          <target state="translated">この機能は非標準であり、標準化されていません。Webに面した本番サイトでは使用しないでください:すべてのユーザーに対して動作するわけではありません。また、実装間に大きな非互換性があるかもしれませんし、将来的に動作が変わるかもしれません。</target>
        </trans-unit>
        <trans-unit id="59314e7aec66910164f6914bdc2ab1c6bad7e1f6" translate="yes" xml:space="preserve">
          <source>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</source>
          <target state="translated">この機能は廃止されました。一部のブラウザではまだ動作するかもしれませんが、いつでも削除される可能性があるため、使用はお勧めしません。使用しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="9332d8bd72a7b666b3413523cb1369cd245eb1c2" translate="yes" xml:space="preserve">
          <source>This field does not exist in old browsers. Using it without checking its existence, such as &lt;code&gt;Math.max(Number.MAX_SAFE_INTEGER, 2)&lt;/code&gt;, will yield undesired results such as NaN.</source>
          <target state="translated">このフィールドは古いブラウザには存在しません。 &lt;code&gt;Math.max(Number.MAX_SAFE_INTEGER, 2)&lt;/code&gt; ように存在を確認せずに使用すると、NaNなどの望ましくない結果が生成されます。</target>
        </trans-unit>
        <trans-unit id="46be1def72425868eca09f0760411eb2dd9baccb" translate="yes" xml:space="preserve">
          <source>This finds the min of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and assigns it to &lt;code&gt;z&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最小値を見つけ、それを &lt;code&gt;z&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="4b107bfe566d2f9992ca9dc28cf2aca5b2af5d50" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity (or synchronicity, if the &lt;var&gt;iterable&lt;/var&gt; passed is empty) of &lt;code&gt;Promise.all&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;Promise.all&lt;/code&gt; の非同期性（または、渡された &lt;var&gt;iterable&lt;/var&gt; オブジェクトが空の場合は同期性）を示しています。</target>
        </trans-unit>
        <trans-unit id="48475607d930124ebfc60f7a61a8c364116689e8" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity of &lt;code&gt;Promise.race:&lt;/code&gt;</source>
          <target state="translated">次の例は、 &lt;code&gt;Promise.race:&lt;/code&gt; の非同期性を示しています。</target>
        </trans-unit>
        <trans-unit id="bbe307e833b2a5b11c90c84540468877e39c9e08" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity of &lt;code&gt;Promise.race&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;Promise.race&lt;/code&gt; の非同期性を示しています。</target>
        </trans-unit>
        <trans-unit id="9d108093f87ed6fc8998f994e0fbf28bc1f87721" translate="yes" xml:space="preserve">
          <source>This form also supports the &lt;code&gt;await&lt;/code&gt; keyword.</source>
          <target state="translated">このフォームは &lt;code&gt;await&lt;/code&gt; キーワードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="790804d0887e21fb95e200e492b9af4cd6eecb43" translate="yes" xml:space="preserve">
          <source>This form also supports the await keyword.</source>
          <target state="translated">このフォームは await キーワードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="c6167b8589c3c1fe2493bf4052b5f23a49bc97a8" translate="yes" xml:space="preserve">
          <source>This function can be an ordinary function, or it can be a generator function, so that when invoked, an iterator object is returned. Inside of this generator function, each entry can be provided by using &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">この関数は通常の関数にすることも、ジェネレーター関数にすることもできるため、呼び出されるとイテレーターオブジェクトが返されます。このジェネレーター関数の内部では、 &lt;code&gt;yield&lt;/code&gt; を使用して各エントリを提供できます。</target>
        </trans-unit>
        <trans-unit id="f54b605c0dd86aec12c2d22119452c0b0adc8f5a" translate="yes" xml:space="preserve">
          <source>This function has 5 kinds of return values, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, which represent &quot;positive number&quot;, &quot;negative number&quot;, &quot;positive zero&quot;, &quot;negative zero&quot; and &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; respectively.</source>
          <target state="translated">この関数は、戻り値、の5種類が &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;-1&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;-0&lt;/code&gt; 、 &lt;code&gt;NaN&lt;/code&gt; に「正数」、「負の数」、「正のゼロ」、「負のゼロ」と表し、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;それぞれ。</target>
        </trans-unit>
        <trans-unit id="4c64e07cb40ec02a6c4db2b3c13d9073478870a2" translate="yes" xml:space="preserve">
          <source>This function is also used to identify if objects have the behavior of regular expressions. For example, the methods &lt;a href=&quot;../string/startswith&quot;&gt;&lt;code&gt;String.prototype.startsWith()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string/endswith&quot;&gt;&lt;code&gt;String.prototype.endsWith()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/includes&quot;&gt;&lt;code&gt;String.prototype.includes()&lt;/code&gt;&lt;/a&gt;, check if their first argument is a regular expression and will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are. Now, if the &lt;code&gt;match&lt;/code&gt; symbol is set to &lt;code&gt;false&lt;/code&gt; (or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; value), it indicates that the object is not intended to be used as a regular expression object.</source>
          <target state="translated">この関数は、オブジェクトに正規表現の動作があるかどうかを識別するためにも使用されます。たとえば、メソッド&lt;a href=&quot;../string/startswith&quot;&gt; &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../string/endswith&quot;&gt; &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../string/includes&quot;&gt; &lt;code&gt;String.prototype.includes()&lt;/code&gt; &lt;/a&gt;は、最初の引数が正規表現であるかどうかを確認し、そうであれば&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。場合今、 &lt;code&gt;match&lt;/code&gt; シンボルに設定されている &lt;code&gt;false&lt;/code&gt; （または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsyの&lt;/a&gt;値）は、対象物が正規表現オブジェクトとして使用されるものではないことを示しています。</target>
        </trans-unit>
        <trans-unit id="51d34802e89b2dc0913e112fe99752a9146cac73" translate="yes" xml:space="preserve">
          <source>This function is also used to identify if objects have the behavior of regular expressions. For example, the methods &lt;a href=&quot;../string/startswith&quot;&gt;&lt;code&gt;String.prototype.startsWith()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string/endswith&quot;&gt;&lt;code&gt;String.prototype.endsWith()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/includes&quot;&gt;&lt;code&gt;String.prototype.includes()&lt;/code&gt;&lt;/a&gt;, check if their first argument is a regular expression and will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are. Now, if the &lt;code&gt;match&lt;/code&gt; symbol is set to &lt;code&gt;false&lt;/code&gt; (or a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; value), it indicates that the object is not intended to be used as a regular expression object.</source>
          <target state="translated">この関数は、オブジェクトが正規表現の動作をするかどうかを識別するためにも使用されます。たとえば、メソッド&lt;a href=&quot;../string/startswith&quot;&gt; &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../string/endswith&quot;&gt; &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../string/includes&quot;&gt; &lt;code&gt;String.prototype.includes()&lt;/code&gt; &lt;/a&gt;は、最初の引数が正規表現であるかどうかを確認し、正規表現である場合は&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。ここで、 &lt;code&gt;match&lt;/code&gt; 記号が &lt;code&gt;false&lt;/code&gt; （または&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt;値）に設定されている場合、そのオブジェクトが正規表現オブジェクトとして使用されることを意図していないことを示します。</target>
        </trans-unit>
        <trans-unit id="d9492f9fdf29859365cab477b4f5efad02b714ac" translate="yes" xml:space="preserve">
          <source>This function is part of the ECMAScript 2015 standard.</source>
          <target state="translated">この機能はECMAScript 2015標準の一部です。</target>
        </trans-unit>
        <trans-unit id="04e100fbaed23fb495fcdbbace27beaf29c58f01" translate="yes" xml:space="preserve">
          <source>This function is part of the ECMAScript 2015 standard. For more information see &lt;a href=&quot;https://gist.github.com/rwaldron/1074126&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt; and &lt;code&gt;Array.from&lt;/code&gt; proposal&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/rwaldron/3186576&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt; polyfill&lt;/a&gt;.</source>
          <target state="translated">この関数はECMAScript 2015標準の一部です。詳細については、&lt;a href=&quot;https://gist.github.com/rwaldron/1074126&quot;&gt; &lt;code&gt;Array.of&lt;/code&gt; および &lt;code&gt;Array.from&lt;/code&gt; 提案&lt;/a&gt;と&lt;a href=&quot;https://gist.github.com/rwaldron/3186576&quot;&gt; &lt;code&gt;Array.of&lt;/code&gt; polyfillを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb60a4fbe159ca3a19c77f3d546c7dc7e3000fb0" translate="yes" xml:space="preserve">
          <source>This function is particularly useful for systems that compile to JS, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;など、JSにコンパイルするシステムで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8e06d06bd6d58f9afc5d4f430f376fd7ba568d8c" translate="yes" xml:space="preserve">
          <source>This function is particularly useful for systems that compile to JS, like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscriptenの&lt;/a&gt;ようにJSにコンパイルするシステムで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="66989f0dc7f4e0c3124cfbe7ba078b8f38a9390b" translate="yes" xml:space="preserve">
          <source>This function is provided to give objects a generic &lt;code&gt;toLocaleString&lt;/code&gt; method, even though not all may use it. See the list below.</source>
          <target state="translated">この関数は、すべてのオブジェクトが使用できるわけではありませんが、オブジェクトに一般的な &lt;code&gt;toLocaleString&lt;/code&gt; メソッドを提供するために提供されています。以下のリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="3bb0b38afd0b129339285d21c0385c86e345c176" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of Math.log(x) / Math.log(10). For log10(e) use the constant &lt;a href=&quot;log10e&quot;&gt;&lt;code&gt;Math.LOG10E&lt;/code&gt;&lt;/a&gt; which is 1 / &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、Math.log（x）/ Math.log（10）と同等です。&lt;a href=&quot;log10e&quot;&gt; &lt;code&gt;Math.LOG10E&lt;/code&gt; &lt;/a&gt;（e）の場合、1 / &lt;a href=&quot;ln10&quot;&gt; &lt;code&gt;Math.LN10&lt;/code&gt; &lt;/a&gt;である定数Math.LOG10Eを使用します。</target>
        </trans-unit>
        <trans-unit id="ddc1e6c850ddfa49ea34bff3fb25ca39ff5834dd" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of Math.log(x) / Math.log(2). For log2(e) use the constant &lt;a href=&quot;log2e&quot;&gt;&lt;code&gt;Math.LOG2E&lt;/code&gt;&lt;/a&gt; which is 1 / &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、Math.log（x）/ Math.log（2）と同等です。log2（e）の場合、1 / &lt;a href=&quot;ln2&quot;&gt; &lt;code&gt;Math.LN2&lt;/code&gt; &lt;/a&gt;である定数&lt;a href=&quot;log2e&quot;&gt; &lt;code&gt;Math.LOG2E&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="1dcdabb5b09f90d23d75a1602712d7f2e2cce4cc" translate="yes" xml:space="preserve">
          <source>This function is useful for setting date values based on string values, for example in conjunction with the &lt;a href=&quot;settime&quot;&gt;&lt;code&gt;setTime()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この関数は、たとえば&lt;a href=&quot;settime&quot;&gt; &lt;code&gt;setTime()&lt;/code&gt; &lt;/a&gt;メソッドおよび&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトと組み合わせて、文字列値に基づいて日付値を設定する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8c2c9ac3b5f94f2cd80fd4dd8e672996cc3413a8" translate="yes" xml:space="preserve">
          <source>This function makes it a little easier and faster, you just call &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; , or &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; .</source>
          <target state="translated">この関数を使用すると、簡単で高速になります &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; または &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; 呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="8d202b859680f485def6942c8ce2f1d29b582052" translate="yes" xml:space="preserve">
          <source>This function makes this calculation easier and faster; you simply call &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; , or &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt;.</source>
          <target state="translated">この関数により、この計算がより簡単かつ迅速になります。 &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; または &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; 呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="ae5c15791167b2f0e30cb3ce7631e52ffb33d946" translate="yes" xml:space="preserve">
          <source>This function selects a plural rule according to the locale and formatting options of a &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この関数は、&lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って複数ルールを選択します。</target>
        </trans-unit>
        <trans-unit id="9292582dc2047a763c27a857f57223d2a2a2d860" translate="yes" xml:space="preserve">
          <source>This functionality can be approximated like this, which demonstrates how many edge cases are handled:</source>
          <target state="translated">この機能は、このように近似することができ、エッジケースがどれだけ多く処理されるかを示しています。</target>
        </trans-unit>
        <trans-unit id="e0d53ad502bbff0c0ab0cffb0ee72a35b804eed2" translate="yes" xml:space="preserve">
          <source>This has numerous benefits:</source>
          <target state="translated">これには数々のメリットがあります。</target>
        </trans-unit>
        <trans-unit id="0f88dbb0ebed51dd25eeac1290a329de8471f3a5" translate="yes" xml:space="preserve">
          <source>This helps to avoid duplicating code in both the promise's &lt;a href=&quot;then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;catch()&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">これにより、promiseの&lt;a href=&quot;then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;catch&quot;&gt; &lt;code&gt;catch()&lt;/code&gt; &lt;/a&gt;ハンドラーとcatch（）ハンドラーの両方でコードが重複するのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="40db1baaae21d697ce344817f85d6c1d56cdb99c" translate="yes" xml:space="preserve">
          <source>This highlights the subtle difference between &lt;code&gt;return foo;&lt;/code&gt; and &lt;code&gt;return await foo;&lt;/code&gt; &amp;mdash; &lt;code&gt;return foo&lt;/code&gt; immediately returns &lt;code&gt;foo&lt;/code&gt; and never throws, even if &lt;code&gt;foo&lt;/code&gt; is a Promise that rejects. &lt;code&gt;return await foo&lt;/code&gt; will &lt;em&gt;wait &lt;/em&gt;for &lt;code&gt;foo&lt;/code&gt; to resolve or reject if it's a Promise, and throws &lt;strong&gt;before returning&lt;/strong&gt; if it rejects.</source>
          <target state="translated">これは、returnfooの微妙な違いを浮き彫りにし &lt;code&gt;return foo;&lt;/code&gt; そして、 &lt;code&gt;return await foo;&lt;/code&gt; &amp;mdash; &lt;code&gt;return foo&lt;/code&gt; は、 &lt;code&gt;foo&lt;/code&gt; が拒否するPromiseであっても、すぐに &lt;code&gt;foo&lt;/code&gt; を返し、スローすることはありません。 &lt;code&gt;return await foo&lt;/code&gt; は、 &lt;code&gt;foo&lt;/code&gt; がPromiseの場合は解決または拒否するのを&lt;em&gt;待ち&lt;/em&gt;、拒否した場合はスロー&lt;strong&gt;して戻り&lt;/strong&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7dd453db4261d3e809715390b84eb4575dacb268" translate="yes" xml:space="preserve">
          <source>This inserts &lt;code&gt;myModule&lt;/code&gt; into the current scope, containing all the exports from the module in the file located in &lt;code&gt;/modules/my-module.js&lt;/code&gt;.</source>
          <target state="translated">このインサートは &lt;code&gt;myModule&lt;/code&gt; にあるファイル内のモジュールのすべてのエクスポートを含む、現在のスコープに &lt;code&gt;/modules/my-module.js&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0aa48f38d5f447ed23921a93c4502d7fcac1a7e0" translate="yes" xml:space="preserve">
          <source>This inserts both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; into the current scope.</source>
          <target state="translated">これにより、 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; の両方が現在のスコープに挿入されます。</target>
        </trans-unit>
        <trans-unit id="a98d1a980f5c0a36ea503bbe11383206d1a0e32f" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;==&lt;/code&gt; operator applies various coercions to both sides (if they are not the same Type) before testing for equality (resulting in such behavior as &lt;code&gt;&quot;&quot; == false&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;), but &lt;code&gt;Object.is&lt;/code&gt; doesn't coerce either value.</source>
          <target state="translated">これは&lt;em&gt;ない&lt;/em&gt;に係る等しい同じ&lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;演算子。 &lt;code&gt;==&lt;/code&gt; （同じタイプでない場合）、オペレータは、（このような行動に結果の平等のためにテストする前に、両側に様々な型変換を適用する &lt;code&gt;&quot;&quot; == false&lt;/code&gt; という &lt;code&gt;true&lt;/code&gt; ）が、 &lt;code&gt;Object.is&lt;/code&gt; は、どちらかの値を強要しません。</target>
        </trans-unit>
        <trans-unit id="008f43d7b675b2decf01f251a65f2abc148b65b1" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;==&lt;/code&gt; operator applies various coercions to both sides (if they are not the same Type) before testing for equality (resulting in such behavior as &lt;code&gt;&quot;&quot; == false&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;), but &lt;code&gt;Object.is&lt;/code&gt; doesn't coerce either value.</source>
          <target state="translated">これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;演算子によると等しいことと同じではあり&lt;em&gt;ません&lt;/em&gt;。 &lt;code&gt;==&lt;/code&gt; （同じタイプでない場合）、オペレータは、（このような行動に結果の平等のためにテストする前に、両側に様々な型変換を適用する &lt;code&gt;&quot;&quot; == false&lt;/code&gt; という &lt;code&gt;true&lt;/code&gt; ）が、 &lt;code&gt;Object.is&lt;/code&gt; は、どちらかの値を強要しません。</target>
        </trans-unit>
        <trans-unit id="de74b347a723e07f2adc3e7d2325f165a647b429" translate="yes" xml:space="preserve">
          <source>This is a JavaScript wrapper object &amp;mdash; an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</source>
          <target state="translated">これはJavaScriptラッパーオブジェクトです&amp;mdash;関数参照を格納するWebAssemblyテーブルを表す配列のような構造です。JavaScriptまたはWebAssemblyコードで作成されたテーブルは、JavaScriptとWebAssemblyの両方からアクセスでき、変更可能です。</target>
        </trans-unit>
        <trans-unit id="071df58adc32e3304b9300ca79770a087ffcd66c" translate="yes" xml:space="preserve">
          <source>This is also &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;===&lt;/code&gt; operator (and the &lt;code&gt;==&lt;/code&gt; operator as well) treats the number values &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; as equal and treats &lt;a href=&quot;../number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt; as not equal to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これもあり&lt;em&gt;ません&lt;/em&gt;に従って等しい同じ&lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;演算子。 &lt;code&gt;===&lt;/code&gt; オペレータ（及び &lt;code&gt;==&lt;/code&gt; オペレータも）扱い数値 &lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; 等しいと扱いとして&lt;a href=&quot;../number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt;と等しくないとして&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d2ec8d8345b64e733264037034d8ce25643de09" translate="yes" xml:space="preserve">
          <source>This is also &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;===&lt;/code&gt; operator (and the &lt;code&gt;==&lt;/code&gt; operator as well) treats the number values &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; as equal and treats &lt;a href=&quot;../number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt; as not equal to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;演算子によると等しいことと同じではあり&lt;em&gt;ません&lt;/em&gt;。 &lt;code&gt;===&lt;/code&gt; オペレータ（及び &lt;code&gt;==&lt;/code&gt; オペレータも）扱い数値 &lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; 等しいと扱いとして&lt;a href=&quot;../number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt;と等しくないとして&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4b4c6648b0b4bb0e1933cfc63ddbb24f3498f86" translate="yes" xml:space="preserve">
          <source>This is an example of a multiple-operation sequential &lt;code&gt;case&lt;/code&gt; clause, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the &lt;code&gt;case&lt;/code&gt; clauses, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these &lt;code&gt;case&lt;/code&gt; statements as well.</source>
          <target state="translated">これは、複数操作の順次 &lt;code&gt;case&lt;/code&gt; 句の例であり、指定された整数に応じて、異なる出力を受け取ることができます。これは、 &lt;code&gt;case&lt;/code&gt; 句を配置した順序でトラバースすることを示しており、数値的に連続している必要はありません。JavaScriptでは、文字列の定義をこれらの &lt;code&gt;case&lt;/code&gt; ステートメントに混在させることもできます。</target>
        </trans-unit>
        <trans-unit id="676fc2cf28b2cedb333e788eb070025ce27886f2" translate="yes" xml:space="preserve">
          <source>This is an example of a multiple-operation sequential switch statement, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the case statements, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these case statements as well.</source>
          <target state="translated">これは、与えられた整数によって、異なる出力を受け取ることができる、複数の操作のシーケンシャルスイッチ文の例です。これは、case文を入れた順番でトラバースすることを示しており、数値的にシーケンシャルである必要はありません。JavaScriptでは、これらのcase文に文字列の定義を混ぜることもできます。</target>
        </trans-unit>
        <trans-unit id="b85fbba149f890d7e27c8cd91c2eededf5f628c6" translate="yes" xml:space="preserve">
          <source>This is an example of a single operation sequential &lt;code&gt;case&lt;/code&gt; statement, where four different values perform exactly the same.</source>
          <target state="translated">これは、4つの異なる値がまったく同じように実行される単一操作の順次 &lt;code&gt;case&lt;/code&gt; ステートメントの例です。</target>
        </trans-unit>
        <trans-unit id="e8b3ee4757c675a8fed64b62d3c878f601fe81d6" translate="yes" xml:space="preserve">
          <source>This is an example of a single operation sequential switch statement, where four different values perform exactly the same.</source>
          <target state="translated">これは、4つの異なる値が全く同じ動作をする単一操作逐次切り替え文の例です。</target>
        </trans-unit>
        <trans-unit id="1c90ab2742a000b45036ef92b7dd0f8e48fa10e9" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; would be evaluated first as a string literal (resulting in the same &lt;code&gt;'$&amp;amp;'&lt;/code&gt;) before using the characters as a pattern.</source>
          <target state="translated">これは、文字をパターンとして使用する前に、 &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; が最初に文字列リテラルとして評価されるため（結果として同じ &lt;code&gt;'$&amp;amp;'&lt;/code&gt; になる）ためです。</target>
        </trans-unit>
        <trans-unit id="fe6eaa3e73a5755d718a7471f3f60b32c355e48d" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; would first be evaluated as a string literal (resulting in the same &lt;code&gt;'$&amp;amp;'&lt;/code&gt;) before using the characters as a pattern.</source>
          <target state="translated">これは、文字をパターンとして使用する前に、 &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; が最初に文字列リテラルとして評価され（結果は同じ &lt;code&gt;'$&amp;amp;'&lt;/code&gt; になる）、</target>
        </trans-unit>
        <trans-unit id="208ce14e060f11ae59221dc400e278091b2f8708" translate="yes" xml:space="preserve">
          <source>This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. &lt;code&gt;foo&lt;/code&gt; is treated like a label, not a key in an object literal).</source>
          <target state="translated">これは、中括弧（{}）内のコードが一連のステートメントとして解析されるためです（つまり、 &lt;code&gt;foo&lt;/code&gt; はオブジェクトリテラルのキーではなく、ラベルのように扱われます）。</target>
        </trans-unit>
        <trans-unit id="46a64a221d74a1f7969a48b07f5d469a42d407a7" translate="yes" xml:space="preserve">
          <source>This is because the first &lt;code&gt;let message = 'hello';&lt;/code&gt; conflicts with second let statement &lt;code&gt;let message = 'hi';&lt;/code&gt; even they're within their own separate case clauses &lt;code&gt;case 'say_hello':&lt;/code&gt; and &lt;code&gt;case 'say_hi':&lt;/code&gt;. Ultimately, this is due to both &lt;code&gt;let&lt;/code&gt; statements being interpreted as duplicate declarations of the same variable name within the same block scope.</source>
          <target state="translated">これは、最初の &lt;code&gt;let message = 'hello';&lt;/code&gt; 2番目のletステートメントと競合し &lt;code&gt;let message = 'hi';&lt;/code&gt; それらが独自の別々のcase節内にある &lt;code&gt;case 'say_hello':&lt;/code&gt; および &lt;code&gt;case 'say_hi':&lt;/code&gt; 。最終的に、これは、両方の &lt;code&gt;let&lt;/code&gt; ステートメントが同じブロックスコープ内の同じ変数名の重複した宣言として解釈されるためです。</target>
        </trans-unit>
        <trans-unit id="322e18c06f0cd5355bd782d8e430f33df48d0a05" translate="yes" xml:space="preserve">
          <source>This is because the limit (and indeed, even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments &lt;code&gt;5, 6, 2, 3&lt;/code&gt; had been passed to &lt;code&gt;apply&lt;/code&gt; in the examples above, rather than the full array.</source>
          <target state="translated">これは、制限（そして実際、過度に大きなスタック動作の性質でさえ）が指定されていないためです。一部のエンジンは例外をスローします。さらに厄介なことに、適用された関数に実際に渡される引数の数を任意に制限するものもあります。この後者の場合を説明するために：そのようなエンジンは、4つの引数（実際の制限はもちろん有意に高いのである）の限界があった場合、引数があるかのように、それは次のようになり &lt;code&gt;5, 6, 2, 3&lt;/code&gt; に渡されていた &lt;code&gt;apply&lt;/code&gt; 上記実施例において、完全な配列ではなく。</target>
        </trans-unit>
        <trans-unit id="14d3998758b1b2576489bfb42056c3c30e470107" translate="yes" xml:space="preserve">
          <source>This is deprecated as a property of &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;. Use the &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object (available within the function) instead.</source>
          <target state="translated">これは、&lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; の&lt;/a&gt;プロパティとして非推奨になりました。代わりに、&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクト（関数内で使用可能）を使用してください。</target>
        </trans-unit>
        <trans-unit id="c252eae447e9cf5663be46226b163ee6e10465a8" translate="yes" xml:space="preserve">
          <source>This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a generator function expression.</source>
          <target state="translated">これは、ジェネレーター関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用することとは異なります。</target>
        </trans-unit>
        <trans-unit id="073922126be7ad02a2ecb08bcaeb9932e3bf72c5" translate="yes" xml:space="preserve">
          <source>This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for an async function expression.</source>
          <target state="translated">これは、非同期関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用することとは異なります。</target>
        </trans-unit>
        <trans-unit id="413187aaa333089aed8b057a0bcd81eca7f1c4c4" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; operation:</source>
          <target state="translated">これは、次の&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;操作と同等です。</target>
        </trans-unit>
        <trans-unit id="9c3a3de3442fecc3f0f59b51415d77d1af0ed66e" translate="yes" xml:space="preserve">
          <source>This is especially important for certain array subclasses, like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed arrays&lt;/a&gt;, since the intermediate array would necessarily have values truncated to fit into the appropriate type.</source>
          <target state="translated">これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;などの特定の配列サブクラスにとって特に重要です。中間配列では、適切な型に収まるように値が切り捨てられる必要があるためです。</target>
        </trans-unit>
        <trans-unit id="b314f830b2a93a472d6d90bf7bb7cc23bf075e6b" translate="yes" xml:space="preserve">
          <source>This is explained further on the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;Array.length&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">これについては、&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;Array.length&lt;/code&gt; &lt;/a&gt;ページで詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="a663719672c7bbbc98766394f1d89b793f57ceb5" translate="yes" xml:space="preserve">
          <source>This is just a simple anonymous class expression which you can refer to using the variable &quot;Foo&quot;.</source>
          <target state="translated">これは、変数 &quot;Foo &quot;を使って参照できる単純な匿名クラス表現に過ぎません。</target>
        </trans-unit>
        <trans-unit id="eb13e45389aa5a141c169430057cb9ed714f79ce" translate="yes" xml:space="preserve">
          <source>This is just a simple anonymous class expression which you can refer to using the variable &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">これは、変数 &lt;code&gt;Foo&lt;/code&gt; を使用して参照できる単純な匿名クラス式です。</target>
        </trans-unit>
        <trans-unit id="1b13cac8cafe5eeceac27b3bac59e70b2f7171b9" translate="yes" xml:space="preserve">
          <source>This is no longer the case in ECMAScript 2015 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">これはECMAScript 2015 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;ではもう当てはまり&lt;/a&gt;ません（バグ1041128）。</target>
        </trans-unit>
        <trans-unit id="cf188543175f13d490410725532bec6c37e058eb" translate="yes" xml:space="preserve">
          <source>This is not a complete polyfill, since it returns an instance of Array, and not Uint8Array, so it lacks properties that would normally exist on TypedArrays.</source>
          <target state="translated">これは完全なポリフィルではなく、Uint8ArrayではなくArrayのインスタンスを返すので、TypedArraysに通常存在するであろうプロパティを欠いています。</target>
        </trans-unit>
        <trans-unit id="bf8132eb74c2cf22ba7e0b5fe71b7215b5ce98fc" translate="yes" xml:space="preserve">
          <source>This is not a robust way to reverse a string:</source>
          <target state="translated">これでは、文字列を逆にするような頑強な方法ではありません。</target>
        </trans-unit>
        <trans-unit id="359c68fa95bdf9de648bfba3053c422111f3a164" translate="yes" xml:space="preserve">
          <source>This is not legal (the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise constructor&lt;/a&gt; is not being called correctly) and will throw a &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; exception:</source>
          <target state="translated">これは不正であり（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promiseコンストラクター&lt;/a&gt;が正しく呼び出されない）、 &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; がスローされます。これはコンストラクターの例外ではありません。</target>
        </trans-unit>
        <trans-unit id="b599f8a621ba4222a4aac8151c0981083d9ff16a" translate="yes" xml:space="preserve">
          <source>This is not legal (the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise constructor&lt;/a&gt; is not being called correctly) and will throw a &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; exception:</source>
          <target state="translated">これは正当ではなく（&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promiseコンストラクター&lt;/a&gt;が正しく呼び出されていません）、 &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; をスローします：これはコンストラクターの例外ではありません：</target>
        </trans-unit>
        <trans-unit id="5733b399958defe53c59bb5929031dc51b87600d" translate="yes" xml:space="preserve">
          <source>This is not the best way to do things, and probably not to be used in any production environment.</source>
          <target state="translated">これは最善の方法ではありませんし、おそらくどのような本番環境でも使うべきではないでしょう。</target>
        </trans-unit>
        <trans-unit id="4d60dba41c390f2f7c1c5e15f9c7b5e18daf2bf8" translate="yes" xml:space="preserve">
          <source>This is now possible with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; (ES2015) loops as well.</source>
          <target state="translated">これは、&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;（ES2015）ループでも可能になりました。</target>
        </trans-unit>
        <trans-unit id="be239762b46386fb92109519d0bbd048a6b09c7d" translate="yes" xml:space="preserve">
          <source>This is really different from</source>
          <target state="translated">これは本当に違う</target>
        </trans-unit>
        <trans-unit id="36b20f089e6393f1c8f2e76828d14573207c1677" translate="yes" xml:space="preserve">
          <source>This is really different from:</source>
          <target state="translated">これは本当に違う。</target>
        </trans-unit>
        <trans-unit id="5d4b4888b60a7c7f44232635981717e49f6887fc" translate="yes" xml:space="preserve">
          <source>This is similar to the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object, so that each entry's &lt;em&gt;key&lt;/em&gt; is the same as its &lt;em&gt;value&lt;/em&gt; for a &lt;code&gt;Set&lt;/code&gt;.</source>
          <target state="translated">これは、に似ている&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;各エントリのように、オブジェクト&lt;em&gt;キーは&lt;/em&gt;その同じである&lt;em&gt;値&lt;/em&gt;のための &lt;code&gt;Set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1075ce64a26f9ab08ab3d64987d886262a92513" translate="yes" xml:space="preserve">
          <source>This is still in the temporal dead zone as its declaration statement has not been reached and terminated.</source>
          <target state="translated">宣言文に到達していないため、これはまだ一時的なデッドゾーンにあり、終了していません。</target>
        </trans-unit>
        <trans-unit id="6fd74be57be6f93ffca00ff71e1d39061bd27902" translate="yes" xml:space="preserve">
          <source>This is the same as the global &lt;a href=&quot;parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">これは、グローバル&lt;a href=&quot;parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;関数と同じです。</target>
        </trans-unit>
        <trans-unit id="f2871763944d73fb8fffa612235b093d207efe83" translate="yes" xml:space="preserve">
          <source>This is the same as the global &lt;a href=&quot;parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">これは、グローバル&lt;a href=&quot;parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;関数と同じです。</target>
        </trans-unit>
        <trans-unit id="88221358a8c319f8e71bd4d82231d103ea61668a" translate="yes" xml:space="preserve">
          <source>This is what it would look like using code snippets:</source>
          <target state="translated">コードスニペットを使うとこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="e9368acabfbbc0558888b69038b0a6146f379cc6" translate="yes" xml:space="preserve">
          <source>This issue also appears if the same variable is used in the getter.</source>
          <target state="translated">この問題は、ゲッターで同じ変数が使用されている場合にも発生します。</target>
        </trans-unit>
        <trans-unit id="ee37fbd5bde80ef8e8547277a4747ebc935aa3cf" translate="yes" xml:space="preserve">
          <source>This issue can also happen when providing a function (stored in an object) as an argument to another function. In this case, the object won't the &lt;code&gt;this&lt;/code&gt; target of the function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt; function to force the &lt;code&gt;this&lt;/code&gt; argument to the expected object.</source>
          <target state="translated">この問題は、（オブジェクトに格納されている）関数を別の関数の引数として提供する場合にも発生する可能性があります。この場合、オブジェクトは関数の &lt;code&gt;this&lt;/code&gt; ターゲットではありません。この問題を回避するには、呼び出しを行うラムダを提供するか、&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt;関数を使用して、 &lt;code&gt;this&lt;/code&gt; 引数を期待されるオブジェクトに強制する必要があります。</target>
        </trans-unit>
        <trans-unit id="cd883cc8bd740c640410d1ab1754c0d88be04eca" translate="yes" xml:space="preserve">
          <source>This issue can also happen when providing a function that is stored as a property of an object as an argument to another function. In this case, the object that stores the function won't be the &lt;code&gt;this&lt;/code&gt; target of that function when it is called by the other function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt; function to force the &lt;code&gt;this&lt;/code&gt; argument to the expected object.</source>
          <target state="translated">この問題は、オブジェクトのプロパティとして格納されている関数を別の関数の引数として提供する場合にも発生する可能性があります。この場合、関数を格納するオブジェクトは、他の関数によって呼び出されたときに、その関数の &lt;code&gt;this&lt;/code&gt; ターゲットにはなりません。この問題を回避するには、呼び出しを行うラムダを指定するか、&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt;関数を使用して &lt;code&gt;this&lt;/code&gt; 引数を期待されるオブジェクトに強制する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5a72d273fff00c9ce64d02a267b12f39fa00462" translate="yes" xml:space="preserve">
          <source>This issue can arise when using the &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; methods, and providing a &lt;code&gt;this&lt;/code&gt; argument which does not have the expected type.</source>
          <target state="translated">この問題は、&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;メソッドを使用し、予期されたタイプではない &lt;code&gt;this&lt;/code&gt; 引数を提供する場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0c4d71403f2dccf2aa58ddcf9d5d880a2549dc90" translate="yes" xml:space="preserve">
          <source>This lets you avoid duplicating code in both the promise's &lt;a href=&quot;then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;catch()&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">これにより、promiseの&lt;a href=&quot;then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;catch&quot;&gt; &lt;code&gt;catch()&lt;/code&gt; &lt;/a&gt;ハンドラとcatch（）ハンドラの両方でコードが重複するのを回避できます。</target>
        </trans-unit>
        <trans-unit id="dcbad0e9023fc522b259cefc46df847e5f50f715" translate="yes" xml:space="preserve">
          <source>This logs &quot;819199440000&quot;.</source>
          <target state="translated">これは「819199440000」を記録します。</target>
        </trans-unit>
        <trans-unit id="aa08ad3dc43c45f1a4ba5c981f5040dc358a1b07" translate="yes" xml:space="preserve">
          <source>This logs 'Smith, John'.</source>
          <target state="translated">これは「スミス、ジョン」を記録しています。</target>
        </trans-unit>
        <trans-unit id="8b5fad24ae3bf54a37018d5192408c9fee5fcf60" translate="yes" xml:space="preserve">
          <source>This logs 'Twas the night before Christmas...'</source>
          <target state="translated">過去ログ 'Twas the night before Christmas...</target>
        </trans-unit>
        <trans-unit id="2434413d65324cae030c2d45551314b68ec65fd7" translate="yes" xml:space="preserve">
          <source>This logs 'oranges are round, and oranges are juicy'.</source>
          <target state="translated">このログでは「みかんは丸くて、みかんはジューシー」となっています。</target>
        </trans-unit>
        <trans-unit id="46dac4a89ea279eb2cd5c3e1e51ebcc49bad4a78" translate="yes" xml:space="preserve">
          <source>This logs 2 because the &lt;code&gt;var x&lt;/code&gt; statement within the block is in the same scope as the &lt;code&gt;var x&lt;/code&gt; statement before the block.</source>
          <target state="translated">ブロック内の &lt;code&gt;var x&lt;/code&gt; ステートメントは、ブロックの前の &lt;code&gt;var x&lt;/code&gt; ステートメントと同じスコープ内にあるため、これは2をログに記録します。</target>
        </trans-unit>
        <trans-unit id="bd32d940192f8f335d13d0e14bd38ea9ceec204f" translate="yes" xml:space="preserve">
          <source>This logs 2 because the &lt;code&gt;var x&lt;/code&gt; statement within the block is in the same scope as the &lt;code&gt;var x&lt;/code&gt; statement before the block. In C or Java, the equivalent code would have outputted 1.</source>
          <target state="translated">このログ2ため &lt;code&gt;var x&lt;/code&gt; ブロック内の文は同じスコープ内にある &lt;code&gt;var x&lt;/code&gt; ブロックの前に声明。CまたはJavaでは、同等のコードは1を出力します。</target>
        </trans-unit>
        <trans-unit id="eef6a2951162ef4b9fdfafdd91476e4959e0e5b2" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'Smith, John'&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;'Smith, John'&lt;/code&gt; ログに記録します。</target>
        </trans-unit>
        <trans-unit id="14cd5d6ad2ddeb940b09b38acb76fe57b64be76c" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'Twas the night before Christmas...'&lt;/code&gt;.</source>
          <target state="translated">このログは &lt;code&gt;'Twas the night before Christmas...'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="28e6436e01c0063fe9c5dcb237ac04d17cbc993a" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'oranges are round, and oranges are juicy'&lt;/code&gt;.</source>
          <target state="translated">このログ &lt;code&gt;'oranges are round, and oranges are juicy'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="912efd6cc77f26d9c238d8e86e5f91f8734ce187" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;819199440000&lt;/code&gt;.</source>
          <target state="translated">このログは &lt;code&gt;819199440000&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eeaaab61da8ae77302900204ae7682c5842307c1" translate="yes" xml:space="preserve">
          <source>This logs two lines; the first line logs the original string, and the second line logs the resulting array.</source>
          <target state="translated">最初の行は元の文字列を記録し、2 行目は結果の配列を記録します。</target>
        </trans-unit>
        <trans-unit id="ff01ab748a447654b55cf2a732930c48cb640771" translate="yes" xml:space="preserve">
          <source>This loop is similar to the first one, but it uses &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; to check if the found enumerable property is the object's own, i.e. not inherited. If it is, the property is logged. Properties &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; are logged because they are own properties (&lt;strong&gt;not inherited&lt;/strong&gt;). Properties &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt; are not logged because they &lt;strong&gt;are inherited&lt;/strong&gt;.</source>
          <target state="translated">このループは最初のループと似ていますが、&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;を使用して、見つかった列挙可能なプロパティがオブジェクト自体であるかどうか、つまり継承されていないかどうかを確認します。そうである場合、プロパティはログに記録されます。プロパティ &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 及び &lt;code&gt;foo&lt;/code&gt; が、彼らは独自のプロパティであるため、記録されます（&lt;strong&gt;継承されません&lt;/strong&gt;）。プロパティ &lt;code&gt;arrCustom&lt;/code&gt; および &lt;code&gt;objCustom&lt;/code&gt; &lt;strong&gt;は継承&lt;/strong&gt;されて&lt;strong&gt;いる&lt;/strong&gt;ため、ログに記録されません。</target>
        </trans-unit>
        <trans-unit id="8cbb9f7119905b2586838956a1338b5278260435" translate="yes" xml:space="preserve">
          <source>This loop is similar to the first one, but it uses &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; to check, if the found enumerable property is object's own (not inherited). And if it is, the property is logged. Properties &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; are logged because they are own properties (&lt;strong&gt;not inherited&lt;/strong&gt;). Properties &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt; are not logged because they &lt;strong&gt;are inherited&lt;/strong&gt;.</source>
          <target state="translated">このループは最初のループと似ていますが、&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;を使用して、見つかった列挙可能なプロパティがオブジェクト自身のもの（継承されていない）かどうかを確認します。その場合、プロパティはログに記録されます。プロパティ &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 及び &lt;code&gt;foo&lt;/code&gt; が、彼らは独自のプロパティであるため、記録されます（&lt;strong&gt;継承されません&lt;/strong&gt;）。プロパティ &lt;code&gt;arrCustom&lt;/code&gt; および &lt;code&gt;objCustom&lt;/code&gt; &lt;strong&gt;は継承&lt;/strong&gt;されるため、ログに記録されません。</target>
        </trans-unit>
        <trans-unit id="728cd810df8a5cfddb3cc665aaae28fc8419faf9" translate="yes" xml:space="preserve">
          <source>This loop iterates and logs &lt;strong&gt;values&lt;/strong&gt; that &lt;code&gt;iterable&lt;/code&gt;, as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt;, defines to be iterated over. The object's &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; are shown, but none of the object's &lt;strong&gt;properties&lt;/strong&gt;.</source>
          <target state="translated">このループは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;反復可能オブジェクト&lt;/a&gt;として反復可能であると定義されている&lt;strong&gt;値&lt;/strong&gt;を &lt;code&gt;iterable&lt;/code&gt; 処理してログに記録し&lt;strong&gt;ます&lt;/strong&gt;。オブジェクトの&lt;strong&gt;要素&lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; が示されているが、オブジェクトののどれ&lt;strong&gt;特性&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bd17082d80f63cf403d892f1a8c1bcc9695ce8b" translate="yes" xml:space="preserve">
          <source>This loop iterates and logs values that &lt;code&gt;iterable&lt;/code&gt; as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt;defines to be iterated over, which are array elements &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; and not any of object's &lt;strong&gt;properties&lt;/strong&gt;.</source>
          <target state="translated">このループの反復とログ値その &lt;code&gt;iterable&lt;/code&gt; として&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;反復可能オブジェクトの&lt;/a&gt;配列要素である反復処理する定義、 &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; としない任意のオブジェクトのの&lt;strong&gt;プロパティ&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9e61403415ab99c6515a2bc6a172cd44f69e2d71" translate="yes" xml:space="preserve">
          <source>This loop logs only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of &lt;code&gt;iterable&lt;/code&gt; object, in original insertion order. It doesn't log array &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;hello&lt;/code&gt; because those are &lt;strong&gt;not&lt;/strong&gt; enumerable properties. But it logs array &lt;strong&gt;indexes&lt;/strong&gt; as well as &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt;, which are. If you're not sure why the properties are iterated over, there's a more thorough explanation of how &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt;&lt;code&gt;array iteration and for...in&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">このループは、ログのみ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;列挙プロパティ&lt;/a&gt;の &lt;code&gt;iterable&lt;/code&gt; 元のオーダーで、オブジェクト。これは、アレイ・ログない&lt;strong&gt;要素&lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; または &lt;code&gt;hello&lt;/code&gt; ものであるため&lt;strong&gt;ではない&lt;/strong&gt;列挙特性。ただし、配列の&lt;strong&gt;インデックス&lt;/strong&gt;と &lt;code&gt;arrCustom&lt;/code&gt; と &lt;code&gt;objCustom&lt;/code&gt; はログに記録され&lt;strong&gt;ます&lt;/strong&gt;。プロパティが繰り返し処理される理由がわからない場合は、&lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt; &lt;code&gt;array iteration and for...in&lt;/code&gt; &lt;/a&gt;詳細な説明があります。</target>
        </trans-unit>
        <trans-unit id="2dd45d02933ab08f03fa6d824036dccf5751085c" translate="yes" xml:space="preserve">
          <source>This loop logs only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of the &lt;code&gt;iterable&lt;/code&gt; object, in arbitrary order. It doesn't log array &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;hello&lt;/code&gt; because those are &lt;strong&gt;not&lt;/strong&gt; enumerable properties, in fact they are not properties at all, they are &lt;strong&gt;values&lt;/strong&gt;. It logs array &lt;strong&gt;indexes&lt;/strong&gt; as well as &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt;, which are. If you're not sure why these properties are iterated over, there's a more thorough explanation of how &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt;&lt;code&gt;array iteration and for...in&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">このループは、 &lt;code&gt;iterable&lt;/code&gt; オブジェクトの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;列挙可能なプロパティ&lt;/a&gt;のみを任意の順序でログに記録します。これは、アレイ・ログない&lt;strong&gt;要素&lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; または &lt;code&gt;hello&lt;/code&gt; ものであるため&lt;strong&gt;ではない&lt;/strong&gt;列挙特性、実際にはそれらは全く特性ではなく、それらは&lt;strong&gt;値&lt;/strong&gt;。配列&lt;strong&gt;インデックス&lt;/strong&gt;と、 &lt;code&gt;arrCustom&lt;/code&gt; および &lt;code&gt;objCustom&lt;/code&gt; をログに記録し&lt;strong&gt;ます&lt;/strong&gt;。これらのプロパティが&lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt; &lt;code&gt;array iteration and for...in&lt;/code&gt; &lt;/a&gt;れる理由がわからない場合は、配列の反復とfor ...がどのように機能するかについてのより完全な説明があります。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4b41d6f357f793b0bfe160c3e66477745c702dd" translate="yes" xml:space="preserve">
          <source>This may not make sense at first but when you start dealing with multiple frames or windows in your script and pass objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is, in fact, an Array using &lt;code&gt;Array.isArray(myObj)&lt;/code&gt;</source>
          <target state="translated">これは最初は意味をなさないかもしれませんが、スクリプトで複数のフレームまたはウィンドウの処理を開始し、関数を介してあるコンテキストから別のコンテキストにオブジェクトを渡す場合、これは有効かつ強力な問題になります。たとえば、特定のオブジェクトが実際に &lt;code&gt;Array.isArray(myObj)&lt;/code&gt; を使用して配列であるかどうかを安全に確認できます。</target>
        </trans-unit>
        <trans-unit id="af969ba43007ff7edea6fe9c040fe7c98008d444" translate="yes" xml:space="preserve">
          <source>This may not make sense at first, but for scripts dealing with multiple frames or windows, and passing objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is, in fact, an Array using &lt;code&gt;Array.isArray(&lt;var&gt;myObj&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="translated">これは最初は意味がないかもしれませんが、複数のフレームまたはウィンドウを処理し、関数を介してオブジェクトをあるコンテキストから別のコンテキストに渡すスクリプトの場合、これは有効で強力な問題になります。たとえば、 &lt;code&gt;Array.isArray(&lt;var&gt;myObj&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;myObj&lt;/var&gt; ）を使用して、特定のオブジェクトが実際に配列であるかどうかを安全に確認できます。</target>
        </trans-unit>
        <trans-unit id="f7b801d88a0da407c7128c2ff1c47e2c14695387" translate="yes" xml:space="preserve">
          <source>This means that a tagged template like the following is problematic, because, per ECMAScript grammar, a parser looks for valid Unicode escape sequences, but finds malformed syntax:</source>
          <target state="translated">これは、ECMAScript の文法に従って、パーサーは有効な Unicode エスケープシーケンスを探しますが、不正な構文を見つけてしまうため、以下のようなタグ付きテンプレートは問題があることを意味します。</target>
        </trans-unit>
        <trans-unit id="4a5d64b9105ca942c48c028a9679b334a111eec7" translate="yes" xml:space="preserve">
          <source>This means that different browsers can give a different result. Even the same JavaScript engine on a different OS or architecture can give different results!</source>
          <target state="translated">これは、ブラウザによって結果が異なる可能性があることを意味します。同じJavaScriptエンジンでも、OSやアーキテクチャが違えば、異なる結果が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d559f000b511e827a28282de94374f00bee4f11b" translate="yes" xml:space="preserve">
          <source>This means that functions and variables declared in the function body cannot be referred to from default value parameter initializers; attempting to do so throws a run-time &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、関数本体で宣言された関数と変数がデフォルト値のパラメーター初期化子から参照できないことを意味します。そうしようとすると、実行時の&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; が&lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="5b2ebc97be974edede44a91f6b7acedb37463134" translate="yes" xml:space="preserve">
          <source>This means that you shouldn&amp;rsquo;t write a lazy getter for a property whose value you expect to change, because if the getter is lazy then it will not recalculate the value.</source>
          <target state="translated">これは、値が変更されると予想されるプロパティに対してレイジーゲッターを記述しないことを意味します。ゲッターがレイジーの場合、値が再計算されないためです。</target>
        </trans-unit>
        <trans-unit id="fdf14e175098f04334392b1707305811a5a0ff5c" translate="yes" xml:space="preserve">
          <source>This means that you shouldn't use a lazy getter for a property whose value you expect to change, because the getter will not recalculate the value.</source>
          <target state="translated">これは、値が変更されると予想されるプロパティに遅延ゲッターを使用すべきではないということを意味します。</target>
        </trans-unit>
        <trans-unit id="4f40669dfc3c484794dee2581cdbe35c00b46e74" translate="yes" xml:space="preserve">
          <source>This memory's &lt;code&gt;buffer&lt;/code&gt; property will return a &lt;code&gt;&lt;a href=&quot;../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメモリの &lt;code&gt;buffer&lt;/code&gt; プロパティは、 &lt;code&gt;&lt;a href=&quot;../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7d54e4170435adc72ca9d3b2670d169f5e688127" translate="yes" xml:space="preserve">
          <source>This method allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (&lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop or &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; method), whose values may be changed, and which may be &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt;. This method allows these extra details to be changed from their defaults. By default, values added using &lt;code&gt;Object.defineProperty()&lt;/code&gt; are immutable and not enumerable.</source>
          <target state="translated">このメソッドを使用すると、オブジェクトのプロパティを正確に追加または変更できます。割り当てによる通常のプロパティの追加により、プロパティの列挙中に表示されるプロパティが作成され（&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループまたは&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;メソッド）、その値が変更されたり、&lt;a href=&quot;../../operators/delete&quot;&gt;削除され&lt;/a&gt;たりする可能性があります。この方法では、これらの追加の詳細をデフォルトから変更できます。デフォルトでは、 &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用して追加された値は不変であり、列挙できません。</target>
        </trans-unit>
        <trans-unit id="491161e77a4b6245ea874583805ac06680c8c066" translate="yes" xml:space="preserve">
          <source>This method allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (&lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop or &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; method), whose values may be changed, and which may be &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt;. This method allows these extra details to be changed from their defaults. By default, values added using &lt;code&gt;Object.defineProperty()&lt;/code&gt; are immutable.</source>
          <target state="translated">このメソッドを使用すると、オブジェクトのプロパティを正確に追加または変更できます。割り当てによる通常のプロパティの追加により、プロパティの列挙（&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループまたは&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;メソッド）中に表示されるプロパティが作成され、その値が変更されたり、&lt;a href=&quot;../../operators/delete&quot;&gt;削除され&lt;/a&gt;たりする可能性があります。この方法では、これらの追加の詳細をデフォルトから変更できます。デフォルトでは、 &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用して追加された値は不変です。</target>
        </trans-unit>
        <trans-unit id="f704901faae524431730bdf40f9707422fd2785b" translate="yes" xml:space="preserve">
          <source>This method can be used in &lt;em&gt;almost&lt;/em&gt; the same way as &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;と&lt;em&gt;ほぼ&lt;/em&gt;同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="5e58d5e8f25a596fd61c42be4c70acd1f3af5138" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="d0e48a6c5ace0bade4c8279bb0f59b436d1ebb79" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="3af8eb9981bc847519477ca9d0eb927fcdbb1fb7" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="2eda3fb2183a80f9f04697f8a3f51ec46e60dd89" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="8c5a18dc13bb7c0f49f12e2d027ebf5a25908724" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different order of arguments.</source>
          <target state="translated">このメソッドは、引数の &lt;code&gt;this&lt;/code&gt; と順序が異なることを除いて、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="496b730643a0f9292cc6f1f1b5c17f4ff7d7e8fa" translate="yes" xml:space="preserve">
          <source>This method can be useful for aggregating the results of multiple promises.</source>
          <target state="translated">この方法は、複数のプロミスの結果を集計するのに便利です。</target>
        </trans-unit>
        <trans-unit id="c3c50061f520cf8433f9f488097531f0f156580e" translate="yes" xml:space="preserve">
          <source>This method can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully &amp;mdash; all of whom we want to fulfill before the code execution continues.</source>
          <target state="translated">この方法は、複数のプロミスの結果を集計するのに役立ちます。これは通常、コード全体が正常に機能するために依存する複数の関連する非同期タスクがある場合に使用されます。これらはすべて、コードの実行を続行する前に実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="094f1b1bbabc6f64860f9c4d079b311edc345aec" translate="yes" xml:space="preserve">
          <source>This method does not change the &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object it is called on. It simply returns a new string.</source>
          <target state="translated">このメソッドは、呼び出された&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトを変更しません。単に新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6666baba3f580ccd286b61386774c40457db494b" translate="yes" xml:space="preserve">
          <source>This method does not change the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object. It simply returns a new string.</source>
          <target state="translated">このメソッドは、呼び出し元の&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトを変更しません。新しい文字列を返すだけです。</target>
        </trans-unit>
        <trans-unit id="3a8f56da2c8475aed3f21d446424c570a9f6def7" translate="yes" xml:space="preserve">
          <source>This method exists for customizing match behavior within &lt;code&gt;RegExp&lt;/code&gt; subclasses.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラス内の一致動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="e76d94ba71bcfb16503893dd48081fd35f84674b" translate="yes" xml:space="preserve">
          <source>This method exists for customizing replace behavior in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの置換動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="24b40d7ea7ebe565d676832de325fe71c3207bac" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the behavior of &lt;code&gt;split()&lt;/code&gt; in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの &lt;code&gt;split()&lt;/code&gt; の動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="2a1aa28c4d36bff7298821a1aa9ee8c1461c765f" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the search behavior in &lt;code&gt;RegExp&lt;/code&gt; subclasses.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの検索動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="21c6ecc9ef52cc6b8b8b85ede1e2f1c62b5fcf1f" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the split behavior in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの分割動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="c14635a53db4b1e8b459a7ea3abf070bd7b3f80e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet.</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、まだすべてのJavaScript実装で利用できない可能性があります。</target>
        </trans-unit>
        <trans-unit id="53cd014293bf6eef1dca1fc6b0aedf94ffb3257e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can easily polyfill this method:</source>
          <target state="translated">このメソッドはECMAScript 2015の仕様に追加されており、まだすべてのJavaScript実装で利用できない可能性があります。しかし、このメソッドを簡単にポリフィルすることができます。</target>
        </trans-unit>
        <trans-unit id="82515c7dd3160807e861a6cfc787f7e6349f9c7f" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;Array.prototype.find&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを &lt;code&gt;Array.prototype.find&lt;/code&gt; してArray.prototype.findをポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="1fc57f4cdb3c305fad0a32bc254517afa35c24c2" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.repeat()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを使用して &lt;code&gt;String.prototype.repeat()&lt;/code&gt; をポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="57b7a3036cae93c2fe97c1a5f5ee95bfd9ab48bb" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを使用して &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; をポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="936616e173741f4312192e2fcd2409dedbf7dc5e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 6 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 6仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを使用して &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; をポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="bfe844b6cbf350ae41cd8dcbe1f13a0e68c8c4eb" translate="yes" xml:space="preserve">
          <source>This method has the same functionality as the global &lt;a href=&quot;../parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このメソッドには、グローバル&lt;a href=&quot;../parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;関数と同じ機能があります。</target>
        </trans-unit>
        <trans-unit id="ba83ba57f2891f92243494071d0afca752ad2fe8" translate="yes" xml:space="preserve">
          <source>This method has the same functionality as the global &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このメソッドには、グローバル&lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;関数と同じ機能があります。</target>
        </trans-unit>
        <trans-unit id="157a467bd4bfe2a9b7253d40a7eb7f1188b91c19" translate="yes" xml:space="preserve">
          <source>This method is also part of ECMAScript 2015. (Its purpose is modularization of globals.)</source>
          <target state="translated">このメソッドも ECMAScript 2015 の一部です。(その目的はグローバルのモジュール化)。</target>
        </trans-unit>
        <trans-unit id="4155f5bb3d4edfa3e164f79c343e9177bbab6699" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="58ce8895f44a9778e2bccac14b26144462e4ee01" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return same result.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="867134c7dad2a60527307e11728be2b02487822b" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;pattern&lt;/code&gt; argument is a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. For example, following two examples return same result.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;pattern&lt;/code&gt; 引数が&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトの場合、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="86fa8de37fbd2280d1611f0feaa8813ab9f284ac" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return the same result.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="4b9d738d59cda9c7b6b804054c0d55b16db02235" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; if its &lt;code&gt;separator&lt;/code&gt; argument is an object that has a &lt;code&gt;@@split&lt;/code&gt; method, such as a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return the same result.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;separator&lt;/code&gt; 引数が&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;などの &lt;code&gt;@@split&lt;/code&gt; メソッドを持つオブジェクトである場合、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="aecce4dcdcf1c90ba9852754479cf86d49774f06" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;separator&lt;/code&gt; argument is a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. For example, the following two examples return the same result.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;separator&lt;/code&gt; 引数が&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトの場合、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="2215b5714302af0ad9a6b2b9e3f63217245d405b" translate="yes" xml:space="preserve">
          <source>This method is functionally equivalent to the &lt;a href=&quot;gettime&quot;&gt;&lt;code&gt;Date.prototype.getTime()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このメソッドは、機能的には&lt;a href=&quot;gettime&quot;&gt; &lt;code&gt;Date.prototype.getTime()&lt;/code&gt; &lt;/a&gt;メソッドと同等です。</target>
        </trans-unit>
        <trans-unit id="e0f103d7fcbba7a9364dd76f1a0d2ace0a684f79" translate="yes" xml:space="preserve">
          <source>This method is usually called internally by JavaScript and not explicitly in code.</source>
          <target state="translated">このメソッドは通常、JavaScriptによって内部的に呼び出され、コード内では明示的に呼び出されません。</target>
        </trans-unit>
        <trans-unit id="943bb8e3d6bff4653010c545f007aa18b80883f3" translate="yes" xml:space="preserve">
          <source>This method is usually called internally by JavaScript and not explicitly in web code.</source>
          <target state="translated">このメソッドは通常、JavaScriptによって内部的に呼び出され、ウェブコードでは明示的に呼び出されません。</target>
        </trans-unit>
        <trans-unit id="a9f3feedcfbd882b304fea40935da4e86d837cb8" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string begins with another string. This method is case-sensitive.</source>
          <target state="translated">このメソッドは、文字列が別の文字列で始まるかどうかを判断します。このメソッドは大文字小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="d6141821c36a082c54ef6dfceab269824cd1f20b" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string ends with another string. This method is case-sensitive.</source>
          <target state="translated">このメソッドは、文字列が別の文字列で終わるかどうかを判断します。このメソッドは大文字小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="f23d94e3a4f55e53eefade5510673cafacf53bdf" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string includes another string.</source>
          <target state="translated">このメソッドは、文字列が他の文字列を含むかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="1894a3eb4db50a4dc5d92a5ef479f8032ffb99c5" translate="yes" xml:space="preserve">
          <source>This method makes the &lt;code&gt;[[prototype]]&lt;/code&gt; of the target immutable; any &lt;code&gt;[[prototype]]&lt;/code&gt; re-assignment will throw a &lt;code&gt;TypeError&lt;/code&gt;. This behavior is specific to the internal &lt;code&gt;[[prototype]]&lt;/code&gt; property, other properties of the target object will remain mutable.</source>
          <target state="translated">このメソッドは、ターゲットの &lt;code&gt;[[prototype]]&lt;/code&gt; を不変にします。任意の &lt;code&gt;[[prototype]]&lt;/code&gt; の再割り当てがスローされます &lt;code&gt;TypeError&lt;/code&gt; 。この動作は内部 &lt;code&gt;[[prototype]]&lt;/code&gt; プロパティに固有であり、ターゲットオブジェクトの他のプロパティは変更可能なままです。</target>
        </trans-unit>
        <trans-unit id="500393b711fdd6a88b9196ca67eb4cc609689293" translate="yes" xml:space="preserve">
          <source>This method permits examination of the precise description of a property. A</source>
          <target state="translated">この方法では、物件の正確な説明を調べることができます。A</target>
        </trans-unit>
        <trans-unit id="3eacf62a095eeef78b835892cfa8d4ad1b86db35" translate="yes" xml:space="preserve">
          <source>This method permits examination of the precise description of all own properties of an object. A</source>
          <target state="translated">この方法では、対象物のすべての自身の特性の正確な記述を調べることができます。A</target>
        </trans-unit>
        <trans-unit id="f628a9e2d86a894b84ba58b4f4db996ed00761dc" translate="yes" xml:space="preserve">
          <source>This method replaces the experimental &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move&quot;&gt;&lt;code&gt;TypedArray.prototype.move()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、実験的な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move&quot;&gt; &lt;code&gt;TypedArray.prototype.move()&lt;/code&gt; を&lt;/a&gt;置き換えます。</target>
        </trans-unit>
        <trans-unit id="b769488df20b7fa0fb182ad7f05d33b3fef47b8b" translate="yes" xml:space="preserve">
          <source>This method returns a string (and &lt;em&gt;not&lt;/em&gt; a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">この方法は、文字列（および返し&lt;em&gt;ていない&lt;/em&gt;&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="ecec38c609050aa60e91994e7d8ba633872bb9d0" translate="yes" xml:space="preserve">
          <source>This method returns a string and not a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトではなく文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f0d6240f8eb87d18ef982897ec85c80727169310" translate="yes" xml:space="preserve">
          <source>This method takes advantage of the fact that if there is no break below a &lt;code&gt;case&lt;/code&gt; clause it will continue to execute the next &lt;code&gt;case&lt;/code&gt; clause regardless if the &lt;code&gt;case&lt;/code&gt; meets the criteria. (See the section &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/What_happens_if_I_forgot_a_break&quot;&gt;What happens if I forgot a &lt;code&gt;break&lt;/code&gt;?&lt;/a&gt;)</source>
          <target state="translated">このメソッドは、 &lt;code&gt;case&lt;/code&gt; 句の下に区切りがない場合、 &lt;code&gt;case&lt;/code&gt; が基準を満たしているかどうかに関係なく、次の &lt;code&gt;case&lt;/code&gt; 句を実行し続けるという事実を利用します。（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/What_happens_if_I_forgot_a_break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;を忘れた場合はどうなりますか？のセクションを参照してください）</target>
        </trans-unit>
        <trans-unit id="160d98375587cf100c86355045411e205a9aa3c6" translate="yes" xml:space="preserve">
          <source>This method takes advantage of the fact that if there is no break below a case statement it will continue to execute the next case statement regardless if the case meets the criteria. See the section titled &quot;What happens if I forgot a break?&quot;</source>
          <target state="translated">このメソッドは、ケース文の下にブレークがない場合、ケースが基準を満たしているかどうかに関わらず、次のケース文を実行し続けるという事実を利用しています。ブレークを忘れたらどうなるか」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f8e0a731699a0eee17b0a5f9ff70ada64cee899c" translate="yes" xml:space="preserve">
          <source>This method uses the same algorithm as &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;, so the same polyfill can be used here: simply replace &lt;code&gt;Array.prototype.reduce&lt;/code&gt; with &lt;code&gt;TypedArray.prototype.reduce&lt;/code&gt;.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムを使用するため、ここでも同じポリフィルを使用できます &lt;code&gt;Array.prototype.reduce&lt;/code&gt; を &lt;code&gt;TypedArray.prototype.reduce&lt;/code&gt; に置き換えるだけです。</target>
        </trans-unit>
        <trans-unit id="1fb272f1e69fbd9d448926c2c4913638d9cc457d" translate="yes" xml:space="preserve">
          <source>This method was standardized in ECMA-262 5&lt;sup&gt;th&lt;/sup&gt; edition. Engines which have not been updated to support this method can work around the absence of this method using the following shim:</source>
          <target state="translated">この方法は、ECMA-262 &lt;sup&gt;第&lt;/sup&gt; 5 版で標準化されました。このメソッドをサポートするように更新されていないエンジンは、次のシムを使用して、このメソッドがないことを回避できます。</target>
        </trans-unit>
        <trans-unit id="b91db49b547b2ce36f7047eddefa7ad664ba8706" translate="yes" xml:space="preserve">
          <source>This method was standardized in ECMA-262 5th edition. Engines which have not been updated to support this method can work around the absence of this method using the following shim:</source>
          <target state="translated">この方法は ECMA-262 第 5 版で標準化されました。このメソッドをサポートするために更新されていないエンジンは、以下のシムを使用して、このメソッドが存在しないことを回避することができます。</target>
        </trans-unit>
        <trans-unit id="f4f646092c3469f7bcbadba53da6650a96ad9c82" translate="yes" xml:space="preserve">
          <source>This method will convert any non-string value to a string, when you set its &lt;code&gt;this&lt;/code&gt; to a value that is not a string:</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; を文字列ではない値に設定すると、文字列以外の値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="d9e15cff51fdda19eea3480a0c3927434a5c139f" translate="yes" xml:space="preserve">
          <source>This method will convert any non-string value to a string, when you set its &lt;code&gt;this&lt;/code&gt; to a value that is not a string: ​​​​</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; を文字列ではない値に設定すると、文字列以外の値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="5a8275b6636a094c259f413cf80b1c146b13f174" translate="yes" xml:space="preserve">
          <source>This nonstandard behavior is now ignored in version 40 and later, and will present a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; (&quot;&lt;a href=&quot;../errors/invalid_for-in_initializer&quot;&gt;for-in loop head declarations may not have initializers&lt;/a&gt;&quot;) error in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=748550&quot;&gt;bug 748550&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1164741&quot;&gt;bug 1164741&lt;/a&gt;).</source>
          <target state="translated">この非標準の動作はバージョン40で無視され、以降、および提示する&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;（「&lt;a href=&quot;../errors/invalid_for-in_initializer&quot;&gt;初期化子を持っていない可能性のためのインループヘッド宣言&lt;/a&gt;に」）エラーを&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=748550&quot;&gt;バグ748550&lt;/a&gt;と&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1164741&quot;&gt;バグ1164741&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bb93a48f120d06b9e746fa2ffa4fd9989decd1d7" translate="yes" xml:space="preserve">
          <source>This notation is rather wasteful and JavaScript 1.6 introduced a generic shorthand:</source>
          <target state="translated">この表記法はかなり無駄が多く、JavaScript 1.6では一般的な速記法が導入されました。</target>
        </trans-unit>
        <trans-unit id="af24edab927c2ed4ec4c6f5f292138da26677829" translate="yes" xml:space="preserve">
          <source>This object cannot be instantiated directly. Instead, a &lt;code&gt;Generator&lt;/code&gt; instance can be returned from a &lt;a href=&quot;../statements/function*&quot;&gt;generator function&lt;/a&gt;:</source>
          <target state="translated">このオブジェクトを直接インスタンス化することはできません。代わりに、 &lt;code&gt;Generator&lt;/code&gt; インスタンスを&lt;a href=&quot;../statements/function*&quot;&gt;ジェネレーター関数&lt;/a&gt;から返すことができます。</target>
        </trans-unit>
        <trans-unit id="4afda9ac25610715df5495b7cfe5137d0c5e5b32" translate="yes" xml:space="preserve">
          <source>This object cannot be instantiated directly. Instead, you create an instance of an array of a particular type, such as a &lt;a href=&quot;int8array&quot;&gt;&lt;code&gt;Int8Array&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;bigint64array&quot;&gt;&lt;code&gt;BigInt64Array&lt;/code&gt;&lt;/a&gt;. These objects all have a common syntax for their constructors:</source>
          <target state="translated">このオブジェクトを直接インスタンス化することはできません。代わりに、次のような特定の型の配列のインスタンスを作成&lt;a href=&quot;int8array&quot;&gt; &lt;code&gt;Int8Array&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;bigint64array&quot;&gt; &lt;code&gt;BigInt64Array&lt;/code&gt; を&lt;/a&gt;。これらのオブジェクトはすべて、コンストラクターに共通の構文を持っています。</target>
        </trans-unit>
        <trans-unit id="c7839fe8fd2c6eb56255867dc586a7fb858261f6" translate="yes" xml:space="preserve">
          <source>This operator allows evaluating expressions that produce a value into places where an expression that evaluates to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is desired.</source>
          <target state="translated">この演算子を使用すると、&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;評価される式が必要な場所に値を生成する式を評価できます。</target>
        </trans-unit>
        <trans-unit id="7fd3a6ffaef17da0022d470be037d9568832d020" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.</source>
          <target state="translated">オペランドの先頭ビットを指定したビット数だけ左にシフトします。左にシフトした余分なビットは破棄されます。ゼロビットは右からシフトインします。</target>
        </trans-unit>
        <trans-unit id="1de4e33f05c9641a53e16b11a59c33498bdab388" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.</source>
          <target state="translated">オペランドの先頭ビットを指定したビット数だけ右にシフトします。右にシフトした余分なビットは破棄されます。左端のビットのコピーが左から入ってきます。新しい左端のビットは前の左端のビットと同じ値を持つので、符号ビット(左端のビット)は変化しません。それゆえ、「符号伝播」という名前がついています。</target>
        </trans-unit>
        <trans-unit id="32e932f7047a9122ced44d45cc753479d51a81a0" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative.</source>
          <target state="translated">オペランドの先頭ビットを指定したビット数だけ右にシフトします。右にシフトした余分なビットは破棄されます。ゼロビットは左から挿入されます。符号ビットは0になりますので、結果は常に非負になります。</target>
        </trans-unit>
        <trans-unit id="0e111cd40eced5b108c9050cbe82b03b064b622a" translate="yes" xml:space="preserve">
          <source>This outputs &quot;value&quot;, since 1 is type-casted into '1'.</source>
          <target state="translated">1が'1'に型キャストされているので、これは &quot;値 &quot;を出力します。</target>
        </trans-unit>
        <trans-unit id="20bac07695b8ca5f84f1f7fd0c290eff44fd1484" translate="yes" xml:space="preserve">
          <source>This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;white space&lt;/a&gt;. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</source>
          <target state="translated">このページでは、JavaScriptの字句文法について説明します。ECMAScriptスクリプトのソーステキストは左から右にスキャンされ、トークン、制御文字、行末記号、コメント、または&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;である入力要素のシーケンスに変換されます。ECMAScriptは、特定のキーワードとリテラルも定義し、終了ステートメントにセミコロンを自動的に挿入するためのルールがあります。</target>
        </trans-unit>
        <trans-unit id="01d92d11e05c85e95d6683f157729dc8ad9e7ed6" translate="yes" xml:space="preserve">
          <source>This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</source>
          <target state="translated">このページでは、JavaScriptの語彙文法について説明します。ECMAScript スクリプトのソーステキストは、左から右へスキャンされ、トークン、制御文字、行終端、コメント、空白などの一連の入力要素に変換されます。ECMAScript はまた、特定のキーワードとリテラルを定義し、文末にセミコロンを自動的に挿入するルールを持っています。</target>
        </trans-unit>
        <trans-unit id="93feabb1077a32bf47dd12b7732c3541d81b02c2" translate="yes" xml:space="preserve">
          <source>This page documents the use of the &lt;code&gt;Error&lt;/code&gt; object itself and its use as a constructor function. For a list of properties and methods inherited by &lt;code&gt;Error&lt;/code&gt; instances, see &lt;a href=&quot;error/prototype&quot;&gt;&lt;code&gt;Error.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このページでは、 &lt;code&gt;Error&lt;/code&gt; オブジェクト自体の使用と、コンストラクター関数としてのその使用について説明します。 &lt;code&gt;Error&lt;/code&gt; インスタンスによって継承されるプロパティとメソッドのリストについては、&lt;a href=&quot;error/prototype&quot;&gt; &lt;code&gt;Error.prototype&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2915a39190c4a1dd93fc41a4654be2f795649d92" translate="yes" xml:space="preserve">
          <source>This part of the JavaScript section on MDN serves as a repository of facts about the JavaScript language. Read more &lt;a href=&quot;about&quot;&gt;about this reference&lt;/a&gt;.</source>
          <target state="translated">MDNのJavaScriptセクションのこの部分は、JavaScript言語に関する事実のリポジトリとして機能します。&lt;a href=&quot;about&quot;&gt;このリファレンスの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="979cd4db3e64e3b95348dd7cbdc13acf17ee3c52" translate="yes" xml:space="preserve">
          <source>This pattern is what &lt;code&gt;&lt;a href=&quot;async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; functions are built on top of.</source>
          <target state="translated">このパターンは、 &lt;code&gt;&lt;a href=&quot;async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 関数がその上に構築されるものです。</target>
        </trans-unit>
        <trans-unit id="24899ef6e799fafad90014f7131779dab0d21866" translate="yes" xml:space="preserve">
          <source>This phenomenon may confuse you in a situation like the following. The instruction &lt;code&gt;let n of n.a&lt;/code&gt; is already inside the private scope of the &lt;u&gt;for loop's block&lt;/u&gt;, hence the identifier&lt;strong&gt; &quot;n.a&quot;&lt;/strong&gt; is resolved to the property 'a' of the &lt;u&gt;'n' object located in the first part of the instruction itself&lt;/u&gt; (&quot;let n&quot;), which is still in the temporal dead zone since its declaration statement has not been reached and &lt;strong&gt;terminated&lt;/strong&gt;.</source>
          <target state="translated">この現象は、次のような状況で混乱する可能性があります。 &lt;code&gt;let n of n.a&lt;/code&gt; 命令はすでに&lt;u&gt;forループのblock&lt;/u&gt;のプライベートスコープ内にあるため、識別子&lt;strong&gt;「na」&lt;/strong&gt;は&lt;u&gt;、命令自体の最初の部分にある「n」オブジェクト&lt;/u&gt;のプロパティ「a」に解決され&lt;u&gt;ます&lt;/u&gt;（「let n &quot;）。宣言ステートメントに到達していないため、一時的なデッドゾーンにあり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="937f40e5237ef7b0264a21cd7f210b57dc6843bc" translate="yes" xml:space="preserve">
          <source>This phenomenon may confuse you in a situation like the following. The instruction &lt;code&gt;let n of n.a&lt;/code&gt; is already inside the private scope of the for loop's block. So, the identifier &lt;code&gt;n.a&lt;/code&gt; is resolved to the property '&lt;code&gt;a&lt;/code&gt;' of the '&lt;code&gt;n&lt;/code&gt;' object located in the first part of the instruction itself (&lt;code&gt;let n&lt;/code&gt;).</source>
          <target state="translated">この現象は、次のような状況で混乱する可能性があります。 &lt;code&gt;let n of n.a&lt;/code&gt; 命令は、すでにforループのブロックのプライベートスコープ内にあります。したがって、識別子 &lt;code&gt;n.a&lt;/code&gt; は、命令自体の最初の部分にある' &lt;code&gt;n&lt;/code&gt; 'オブジェクトのプロパティ ' &lt;code&gt;a&lt;/code&gt; 'に解決されます（ &lt;code&gt;let n&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e3c84e7611673a5e2c6ffc14c37964b05fe32994" translate="yes" xml:space="preserve">
          <source>This polyfill covers the main use case, which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.</source>
          <target state="translated">このポリフィルは、プロトタイプが選択されているが第2引数を考慮に入れない新規オブジェクトを作成するという主なユースケースをカバーしています。</target>
        </trans-unit>
        <trans-unit id="fe30a72a0c38324d405058ca91860820ecbc46cd" translate="yes" xml:space="preserve">
          <source>This prevents authors from creating an explicit &lt;code&gt;Symbol&lt;/code&gt; wrapper object instead of a new symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, &lt;code&gt;new Boolean&lt;/code&gt;, &lt;code&gt;new String&lt;/code&gt; and &lt;code&gt;new Number&lt;/code&gt;).</source>
          <target state="translated">これにより、作成者は新しいシンボル値の代わりに明示的な &lt;code&gt;Symbol&lt;/code&gt; ラッパーオブジェクトを作成できなくなり、プリミティブデータ型（たとえば、 &lt;code&gt;new Boolean&lt;/code&gt; 、 &lt;code&gt;new String&lt;/code&gt; 、 &lt;code&gt;new Number&lt;/code&gt; ）の周りに明示的なラッパーオブジェクトを作成できるため、驚くかもしれません。</target>
        </trans-unit>
        <trans-unit id="dd869962a817927e401d4f9a67bc9dcc9a5752d8" translate="yes" xml:space="preserve">
          <source>This problem appears frequently when combined with a filter (&lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/typedarray/filter&quot;&gt;&lt;code&gt;TypedArray.prototype.filter()&lt;/code&gt;&lt;/a&gt;) which will remove all elements of the list. Thus leaving none to be used as the initial value.</source>
          <target state="translated">この問題は、リストのすべての要素を削除するフィルター（&lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/typedarray/filter&quot;&gt; &lt;code&gt;TypedArray.prototype.filter()&lt;/code&gt; &lt;/a&gt;）と組み合わせると頻繁に発生します。したがって、初期値として使用されるものはありません。</target>
        </trans-unit>
        <trans-unit id="d8412d6f266972faab17f3f66c154c1239965cfe" translate="yes" xml:space="preserve">
          <source>This prohibition isn't strict mode proper because such function statements are an extension of basic ES5. But it is the recommendation of the ECMAScript committee, and browsers will implement it.</source>
          <target state="translated">このような関数文は基本的なES5の延長線上にあるので、この禁止は厳密なモード適正ではありません。しかし、これはECMAScript委員会の勧告であり、ブラウザはこれを実装するでしょう。</target>
        </trans-unit>
        <trans-unit id="202a2db44d59ddd4acaa1f18d4ffa7ecf2a16ab5" translate="yes" xml:space="preserve">
          <source>This property contains a brief description of the error if one is available or has been set. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; makes extensive use of the &lt;code&gt;message&lt;/code&gt; property for exceptions. The &lt;code&gt;message&lt;/code&gt; property combined with the &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the Error.</source>
          <target state="translated">このプロパティには、エラーが使用可能な場合または設定されている場合のエラーの簡単な説明が含まれています。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;は、例外の &lt;code&gt;message&lt;/code&gt; プロパティを広範囲に使用します。 &lt;code&gt;message&lt;/code&gt; と組み合わせるプロパティ&lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティがで使用され&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt;エラーの文字列表現を作成する方法。</target>
        </trans-unit>
        <trans-unit id="e32b98d6bdcb68b6b9679955c7a1cc5624bf529f" translate="yes" xml:space="preserve">
          <source>This property contains a brief description of the error if one is available or has been set. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; makes extensive use of the &lt;code&gt;message&lt;/code&gt; property for exceptions. The &lt;code&gt;message&lt;/code&gt; property combined with the &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the Error.</source>
          <target state="translated">このプロパティには、エラーが使用可能であるか、設定されている場合のエラーの簡単な説明が含まれています。&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;は、例外のために &lt;code&gt;message&lt;/code&gt; プロパティを広範囲に使用します。 &lt;code&gt;message&lt;/code&gt; と組み合わせるプロパティ&lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティがで使用され&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt;エラーの文字列表現を作成する方法。</target>
        </trans-unit>
        <trans-unit id="e7eb285194c539b0f44fb0a7e4f806262c8482b2" translate="yes" xml:space="preserve">
          <source>This property is deprecated, and is only functional for some non-strict functions.</source>
          <target state="translated">このプロパティは非推奨であり、いくつかの厳密でない関数に対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="f5998fce63dfca9c1fb87201411dd0ad827571fa" translate="yes" xml:space="preserve">
          <source>This property is not available anymore, but you can still use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロパティは使用できなくなりましたが、引き続き&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="0cf7ef2c65386430033403f11c63d24f9affc6de" translate="yes" xml:space="preserve">
          <source>This property is set only if the regular expression instance used the &lt;code&gt;&quot;g&quot;&lt;/code&gt; flag to indicate a global search, or the &lt;code&gt;&quot;y&quot;&lt;/code&gt; flag to indicate a sticky search. The following rules apply:</source>
          <target state="translated">このプロパティは、正規表現インスタンスが &lt;code&gt;&quot;g&quot;&lt;/code&gt; フラグを使用してグローバル検索を示すか、 &lt;code&gt;&quot;y&quot;&lt;/code&gt; フラグを使用してスティッキー検索を示す場合にのみ設定されます。次の規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="aab683ca27f26abb7ad2b645f8a4f2493ee2e20a" translate="yes" xml:space="preserve">
          <source>This property is set only if the regular expression instance used the &lt;code&gt;g&lt;/code&gt; flag to indicate a global search, or the &lt;code&gt;y&lt;/code&gt; flag to indicate a sticky search. The following rules apply:</source>
          <target state="translated">このプロパティは、正規表現インスタンスがグローバル検索を示すために &lt;code&gt;g&lt;/code&gt; フラグを使用した場合、またはスティッキー検索を示すために &lt;code&gt;y&lt;/code&gt; フラグを使用した場合にのみ設定されます。次のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="2320fa0c41f8739c3c394cbe2f1188606b3e3f28" translate="yes" xml:space="preserve">
          <source>This property returns the number of code units in the string. &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by &lt;code&gt;length&lt;/code&gt; to not match the actual number of characters in the string.</source>
          <target state="translated">このプロパティは、文字列内のコード単位の数を返します。JavaScriptで使用される文字列形式である&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;は、最も一般的な文字を表すために単一の16ビットコード単位を使用しますが、あまり一般的に使用されない文字には2つのコード単位を使用する必要があるため、 &lt;code&gt;length&lt;/code&gt; によって返される値が文字列の実際の文字数と一致しません。</target>
        </trans-unit>
        <trans-unit id="51f7df5a59f1072af28236cee6828da432beb411" translate="yes" xml:space="preserve">
          <source>This provides developers with a way to include custom data inside wasm modules for other purposes, for example the &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section&quot;&gt;name custom section&lt;/a&gt;, which allows developers to provide names for all the functions and locals in the module (like &quot;symbols&quot; in a native build).</source>
          <target state="translated">これにより、開発者は他の目的のためにwasmモジュール内にカスタムデータを含めることができます。たとえば、&lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section&quot;&gt;カスタムセクション&lt;/a&gt;の名前を使用すると、モジュール内のすべての関数とローカル（ネイティブビルドの「シンボル」のような）に名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="4111ee54927f5e20a9a2557a5ce105b1380bc928" translate="yes" xml:space="preserve">
          <source>This proxy extends an array with some utility features. As you see, you can flexibly &quot;define&quot; properties without using &lt;a href=&quot;object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt;. This example can be adapted to find a table row by its cell. In that case, the target will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/table.rows&quot;&gt;&lt;code&gt;table.rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロキシは、いくつかのユーティリティ機能で配列を拡張します。ご覧のとおり、&lt;a href=&quot;object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties&lt;/code&gt; &lt;/a&gt;を使用せずにプロパティを柔軟に「定義」できます。この例は、セルによってテーブル行を見つけるように構成できます。その場合、ターゲットは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/table.rows&quot;&gt; &lt;code&gt;table.rows&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="82d934c9f1a0b8ea09917dc15c4260459f515c79" translate="yes" xml:space="preserve">
          <source>This proxy extends an array with some utility features. As you see, you can flexibly &quot;define&quot; properties without using &lt;a href=&quot;object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt;. This example can be adapted to find a table row by its cell. In that case, the target will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows&quot;&gt;&lt;code&gt;table.rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロキシは、いくつかのユーティリティ機能でアレイを拡張します。ご覧のとおり、&lt;a href=&quot;object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties&lt;/code&gt; &lt;/a&gt;を使用せずに、プロパティを柔軟に「定義」できます。この例は、セルごとにテーブルの行を見つけるように適合させることができます。その場合、ターゲットは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows&quot;&gt; &lt;code&gt;table.rows&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="01d23dbd17d04a53d683524917699a6da5b9ca70" translate="yes" xml:space="preserve">
          <source>This recursive function is missing a base case. As there is no exit condition, the function will call itself infinitely.</source>
          <target state="translated">この再帰関数にはベースケースがありません。終了条件がないので、この関数は無限に自分自身を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bdcaea2351fa8298ed886d1f656da74f45e12f03" translate="yes" xml:space="preserve">
          <source>This recursive function runs 10 times, as per the exit condition.</source>
          <target state="translated">この再帰関数は、終了条件通りに10回実行されます。</target>
        </trans-unit>
        <trans-unit id="6d7fe022c1b8d346cdb3559df2027563a8d076f9" translate="yes" xml:space="preserve">
          <source>This returns 2 because in floating points, the value is actually the decimal trailing &quot;1&quot; except for in subnormal precision cases such as zero.</source>
          <target state="translated">浮動小数点の場合、ゼロのような正規の精度以下の場合を除いて、実際には10進数の末尾の &quot;1 &quot;が値となるため、これは2を返します。</target>
        </trans-unit>
        <trans-unit id="cffba478216f1d53d5fd2660d7146f1f6f21e730" translate="yes" xml:space="preserve">
          <source>This script displays the following text:</source>
          <target state="translated">このスクリプトは以下のテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="fc5e8aa3503a78d527035852a3bb3a3c978f762a" translate="yes" xml:space="preserve">
          <source>This script displays the following:</source>
          <target state="translated">このスクリプトでは以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="dd82a7a8c7d4b2a36b690c950052c93a110723dd" translate="yes" xml:space="preserve">
          <source>This script writes:</source>
          <target state="translated">このスクリプトは書きます。</target>
        </trans-unit>
        <trans-unit id="3a8a92244d2d79390941df48f29fed6be1f59072" translate="yes" xml:space="preserve">
          <source>This section contains implementation-specific behavior that can be inconsistent across implementations.</source>
          <target state="translated">このセクションには、実装間で矛盾する可能性のある実装固有の動作が含まれています。</target>
        </trans-unit>
        <trans-unit id="55ef13a1e73329e726feb2ef079106cad9f434f9" translate="yes" xml:space="preserve">
          <source>This should work:</source>
          <target state="translated">これはうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="57425f37455982cba70a01c510cce95685b95c23" translate="yes" xml:space="preserve">
          <source>This small example shows the mechanism of a &lt;code&gt;Promise&lt;/code&gt;. The &lt;code&gt;testPromise()&lt;/code&gt; method is called each time the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt; is clicked. It creates a promise that will be fulfilled, using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;, to the promise count (number starting from 1) every 1-3 seconds, at random. The &lt;code&gt;Promise()&lt;/code&gt; constructor is used to create the promise.</source>
          <target state="translated">この小さな例は、 &lt;code&gt;Promise&lt;/code&gt; のメカニズムを示しています。 &lt;code&gt;testPromise()&lt;/code&gt; メソッドはたびに呼び出され&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt; &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; &lt;/a&gt;クリックされました。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt; &lt;code&gt;window.setTimeout()&lt;/code&gt; &lt;/a&gt;を使用して、1〜3秒ごとにランダムにプロミスカウント（1から始まる数値）に応じられるプロミスを作成します。 &lt;code&gt;Promise()&lt;/code&gt; コンストラクタは約束を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="972d14a331e7e6b9052bc3420e7e6e7f39917288" translate="yes" xml:space="preserve">
          <source>This snippet generates an array of 3 objects in the desired format without using a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">このスニペットは、 &lt;code&gt;for&lt;/code&gt; ループを使用せずに、3つのオブジェクトの配列を目的の形式で生成します。</target>
        </trans-unit>
        <trans-unit id="53341a59cc29d0476aae7b7ae1e4c3d989b12ca1" translate="yes" xml:space="preserve">
          <source>This statement creates &lt;code&gt;myCar&lt;/code&gt; and assigns it the specified values for its properties. Then the value of &lt;code&gt;myCar.make&lt;/code&gt; is the string &quot;Eagle&quot;, &lt;code&gt;myCar.year&lt;/code&gt; is the integer 1993, and so on.</source>
          <target state="translated">このステートメントは &lt;code&gt;myCar&lt;/code&gt; を作成し、そのプロパティに指定された値を割り当てます。この場合、 &lt;code&gt;myCar.make&lt;/code&gt; の値は文字列「Eagle」、 &lt;code&gt;myCar.year&lt;/code&gt; は整数1993などです。</target>
        </trans-unit>
        <trans-unit id="75afc102c7b3254dfeceb06e6c8c171d8bc37a92" translate="yes" xml:space="preserve">
          <source>This statement creates &lt;code&gt;mycar&lt;/code&gt; and assigns it the specified values for its properties. Then the value of &lt;code&gt;mycar.make&lt;/code&gt; is the string &quot;Eagle&quot;, &lt;code&gt;mycar.year&lt;/code&gt; is the integer 1993, and so on.</source>
          <target state="translated">このステートメントは &lt;code&gt;mycar&lt;/code&gt; を作成し、それにプロパティの指定された値を割り当てます。次に、 &lt;code&gt;mycar.make&lt;/code&gt; の値は文字列「Eagle」、 &lt;code&gt;mycar.year&lt;/code&gt; は整数1993などです。</target>
        </trans-unit>
        <trans-unit id="d4fdd4777e071bdcffbfcfe8ccadf9de6f044a61" translate="yes" xml:space="preserve">
          <source>This syntax has a trap that has &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;already bitten&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;a major site&lt;/a&gt;: it isn't possible to blindly concatenate conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Obviously, concatenation of scripts is never ideal, but if you must, consider enabling strict on a function-by-function basis.</source>
          <target state="translated">この構文には、&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;すでに&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;主要なサイトを&lt;/a&gt;噛んでいるトラップがあります。競合するスクリプトを盲目的に連結することはできません。厳密モードのスクリプトを非厳密モードのスクリプトと連結することを検討してください。連結全体が厳密に見えます。逆もまた真です。非厳密プラス厳密は非厳密に見えます。明らかに、スクリプトの連結は決して理想的ではありませんが、必要な場合は、関数ごとにstrictを有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="94b85c795c1bd21e753a02bbb64f696799e5dcf5" translate="yes" xml:space="preserve">
          <source>This syntax has a trap that has &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;already bitten&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;a major site&lt;/a&gt;: it isn't possible to blindly concatenate conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Obviously, concatentation of scripts is never ideal, but if you must, consider enabling strict on a function-by-function basis.</source>
          <target state="translated">この構文には、&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;すでに&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;主要なサイトに&lt;/a&gt;かみついている罠があります。競合するスクリプトを盲目的に連結することはできません。厳格モードのスクリプトと非厳格モードのスクリプトを連結することを検討してください。連結全体が厳格に見えます！逆も当てはまります。非厳格と厳格は非厳格に見えます。明らかに、スクリプトの連結は決して理想的ではありませんが、必要な場合は、関数ごとにstrictを有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="d79411a38550f1777768ec88eb728359a1fabc0b" translate="yes" xml:space="preserve">
          <source>This tests for a global &lt;code&gt;Intl&lt;/code&gt; object, checks that it's not &lt;code&gt;null&lt;/code&gt; and that it has a &lt;code&gt;NumberFormat&lt;/code&gt; property that is a function.</source>
          <target state="translated">これは、グローバル &lt;code&gt;Intl&lt;/code&gt; オブジェクトをテストし、それが &lt;code&gt;null&lt;/code&gt; ではないこと、および関数である &lt;code&gt;NumberFormat&lt;/code&gt; プロパティがあることを確認します。</target>
        </trans-unit>
        <trans-unit id="0c7b2dfd21538cefc6243b00c498ce94e98de0bc" translate="yes" xml:space="preserve">
          <source>This trap can intercept these operations:</source>
          <target state="translated">このトラップは、これらの操作を傍受することができます。</target>
        </trans-unit>
        <trans-unit id="44780b8b6d104dea26bfef46597862478326e5ef" translate="yes" xml:space="preserve">
          <source>This unpacks the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;displayName&lt;/code&gt; and &lt;code&gt;firstName&lt;/code&gt; from the user object and prints them.</source>
          <target state="translated">これにより、ユーザーオブジェクトから &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;displayName&lt;/code&gt; 、 &lt;code&gt;firstName&lt;/code&gt; がアンパックされ、出力されます。</target>
        </trans-unit>
        <trans-unit id="2e72e3a3418ec2d204fbf9885686c8cee5ab7178" translate="yes" xml:space="preserve">
          <source>This used to change a value on the global object which is rarely the expected effect. If you really want to set a value to the global object, pass it as an argument and explicitly assign it as a property:</source>
          <target state="translated">これは、グローバル・オブジェクトの値を変更していましたが、期待していた効果はほとんどありませんでした。本当にグローバルオブジェクトに値を設定したい場合は、引数として渡し、明示的にプロパティとして代入します。</target>
        </trans-unit>
        <trans-unit id="321fdbbee133de6d338ef5ef7c8b1150d19ef59b" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; function to remove the enumerable keys (obtained with &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) from a list of all keys (obtained with &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;) leaving only the non-enumerable keys.</source>
          <target state="translated">これは、&lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;関数を使用して、列挙可能なキー（&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; で&lt;/a&gt;取得）をすべてのキー（ &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; で取得）のリストから削除し、列挙できないキーのみを残します。</target>
        </trans-unit>
        <trans-unit id="71fc3bcdf532ca114046a8f9b6f3e72e4c6060de" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; function to remove the enumerable keys (obtained with &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) from a list of all keys (obtained with &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;) thus giving only the non-enumerable keys as output.</source>
          <target state="translated">これは、&lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;関数を使用して、すべてのキー（ &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; で取得）のリストから列挙可能なキー（&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; で&lt;/a&gt;取得）を削除し、列挙不可能なキーのみを出力として提供します。 。</target>
        </trans-unit>
        <trans-unit id="3c02e9c7a3c452cf4739f32629f3bba5108e1474" translate="yes" xml:space="preserve">
          <source>This value behaves slightly differently than mathematical infinity:</source>
          <target state="translated">この値は、数学的な無限大とは少し違った振る舞いをします。</target>
        </trans-unit>
        <trans-unit id="00be7e991d66825c1ced6628eaf258a6382e117a" translate="yes" xml:space="preserve">
          <source>This value behaves slightly differently than mathematical infinity; see &lt;a href=&quot;number/positive_infinity&quot;&gt;&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">この値は、数学的な無限大とは少し異なる動作をします。詳細については、&lt;a href=&quot;number/positive_infinity&quot;&gt; &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7fffb9a86edf50e0f87a0b2a9c08748436821f09" translate="yes" xml:space="preserve">
          <source>This value indicates:</source>
          <target state="translated">この値が示しています。</target>
        </trans-unit>
        <trans-unit id="48034df0e320e5ef796a29033dc21b65f9f3b5a7" translate="yes" xml:space="preserve">
          <source>This version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.</source>
          <target state="translated">このバージョンは、指定されたインデックス位置の前にBMP以外の文字が存在するかどうかが不明な場合に、forループなどで使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="b0a97fea9fad05d93f86710b42ddab43931ceeba" translate="yes" xml:space="preserve">
          <source>This way, in another script, we could have:</source>
          <target state="translated">このように、別の台本では</target>
        </trans-unit>
        <trans-unit id="fe9a5081a4c414346879b2f958aec2a00dc20419" translate="yes" xml:space="preserve">
          <source>This will always be &lt;code&gt;false&lt;/code&gt;. (&lt;code&gt;!mycar&lt;/code&gt; will be evaluated before &lt;code&gt;instanceof&lt;/code&gt;, so you always try to know if a boolean is an instance of &lt;code&gt;Car&lt;/code&gt;).</source>
          <target state="translated">これは常に &lt;code&gt;false&lt;/code&gt; になります。（ &lt;code&gt;!mycar&lt;/code&gt; は &lt;code&gt;instanceof&lt;/code&gt; の前に評価されるため、ブール値が &lt;code&gt;Car&lt;/code&gt; のインスタンスであるかどうかを常に確認しようとします）。</target>
        </trans-unit>
        <trans-unit id="eb0e28917792ec578dc71cec340d6470748b6262" translate="yes" xml:space="preserve">
          <source>This will create a pseudo-property &lt;code&gt;latest&lt;/code&gt; for object &lt;code&gt;obj&lt;/code&gt;, which will return the last array item in &lt;code&gt;log&lt;/code&gt;.</source>
          <target state="translated">これにより、オブジェクト &lt;code&gt;obj&lt;/code&gt; の &lt;code&gt;latest&lt;/code&gt; 疑似プロパティが作成され、 &lt;code&gt;log&lt;/code&gt; の最後の配列項目が返されます。</target>
        </trans-unit>
        <trans-unit id="37a760abd8402149b9ad72f21d3ac28804ce7d37" translate="yes" xml:space="preserve">
          <source>This will define a pseudo-property &lt;code&gt;current&lt;/code&gt; of object language that, when assigned a value, will update &lt;code&gt;log&lt;/code&gt; with that value:</source>
          <target state="translated">これにより、オブジェクト言語の疑似プロパティ &lt;code&gt;current&lt;/code&gt; が定義され、値が割り当てられると、その値で &lt;code&gt;log&lt;/code&gt; が更新されます。</target>
        </trans-unit>
        <trans-unit id="3cefb4be8f41f052ae7fd64b565e044e7ac52ef9" translate="yes" xml:space="preserve">
          <source>This will log a message containing 'hello world!'.</source>
          <target state="translated">これは、'hello world!'を含むメッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="23e59f9e3a66f884c91f809acf557e7ebb34688a" translate="yes" xml:space="preserve">
          <source>This will log a message containing &lt;code&gt;'hello world!'&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;'hello world!'&lt;/code&gt; を含むメッセージがログに記録されます。。</target>
        </trans-unit>
        <trans-unit id="9cee2a4ecc0015ec63b3c281e6605427d41fcd66" translate="yes" xml:space="preserve">
          <source>This will make the currency bold, when using the &lt;code&gt;formatToParts()&lt;/code&gt; method.</source>
          <target state="translated">これにより、 &lt;code&gt;formatToParts()&lt;/code&gt; メソッドを使用すると、通貨が太字になります。</target>
        </trans-unit>
        <trans-unit id="8028172fe00091f1c1cf3fccd5b1a1ed5fc5633e" translate="yes" xml:space="preserve">
          <source>This will make the day period bold, when using the &lt;code&gt;formatToParts()&lt;/code&gt; method.</source>
          <target state="translated">これにより、 &lt;code&gt;formatToParts()&lt;/code&gt; メソッドを使用する場合、その日の期間が太字になります。</target>
        </trans-unit>
        <trans-unit id="100ed6381b382eab7586beb70a7b65e5f7d35b63" translate="yes" xml:space="preserve">
          <source>This works with &lt;a href=&quot;#Dynamic_Imports&quot;&gt;dynamic imports&lt;/a&gt; as well:</source>
          <target state="translated">これは&lt;a href=&quot;#Dynamic_Imports&quot;&gt;動的インポート&lt;/a&gt;でも機能します。</target>
        </trans-unit>
        <trans-unit id="636db55917614035fe1b036f236d448914b79ae3" translate="yes" xml:space="preserve">
          <source>This would be correct:</source>
          <target state="translated">これは正しいでしょう。</target>
        </trans-unit>
        <trans-unit id="188c51ce091fb6e829236976f947e1e4bce2a47f" translate="yes" xml:space="preserve">
          <source>This would work, for example:</source>
          <target state="translated">これは、例えば、うまくいくでしょう。</target>
        </trans-unit>
        <trans-unit id="9410a411b7f52a1be65e72497f953473df6e2875" translate="yes" xml:space="preserve">
          <source>This, however, returns &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; in Firefox:</source>
          <target state="translated">ただし、これはFirefoxで&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="09a7b6c28e17a2a60b04a76384d6bb9623973bd2" translate="yes" xml:space="preserve">
          <source>Three things to note about declared and undeclared variables:</source>
          <target state="translated">宣言された変数と宣言されていない変数について注意すべき3つのこと。</target>
        </trans-unit>
        <trans-unit id="a870888fa60e764069405b004c2fe3eab15ca774" translate="yes" xml:space="preserve">
          <source>Throw an object</source>
          <target state="translated">オブジェクトを投げる</target>
        </trans-unit>
        <trans-unit id="24ec8833996f8992a0b4c3785e514bcae986e6ab" translate="yes" xml:space="preserve">
          <source>Throwing a custom error</source>
          <target state="translated">カスタムエラーのスロー</target>
        </trans-unit>
        <trans-unit id="6ba4891001405ff1a4ec6b1cfe33bd10ec6a01cc" translate="yes" xml:space="preserve">
          <source>Throwing a generic error</source>
          <target state="translated">一般的なエラーを投げる</target>
        </trans-unit>
        <trans-unit id="c389a8efc2390a1aa64a95dbca196af84249da0f" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such as it would read beyond the end of the view.</source>
          <target state="translated">ビューの終わりを超えて読み取るような &lt;code&gt;byteOffset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="0922a946a5169cd26976b7ef72965c11c56aef37" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such as it would store beyond the end of the view.</source>
          <target state="translated">ビューの終わりを超えて格納するように &lt;code&gt;byteOffset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="3e91d77e2cbdd56a77448393bc4f5e96543cdd4a" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; or &lt;code&gt;byteLength&lt;/code&gt; parameter values result in the view extending past the end of the buffer.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; または &lt;code&gt;byteLength&lt;/code&gt; パラメーター値の結果、ビューがバッファーの終わりを超えて拡張される場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="bb3234934bcd796fdf4ef1e5d3add12530cfe9e2" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;offset&lt;/code&gt; is set such as it would store beyond the end of the typed array.</source>
          <target state="translated">型付き配列の終わりを超えて格納するような &lt;code&gt;offset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="b8da8f7f44eb2e8aad25d07636127923f72337fc" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;Global_objects/SyntaxError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; if the property is an own non-configurable property.</source>
          <target state="translated">スロー&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;Global_objects/SyntaxError&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;プロパティが自身の非構成可能性である場合。</target>
        </trans-unit>
        <trans-unit id="d767214910c80de840f71784865caecc6fb0b66e" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict mode&lt;/code&gt;&lt;/a&gt; if the property is an own non-configurable property.</source>
          <target state="translated">例外&lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;して&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict mode&lt;/code&gt; &lt;/a&gt;プロパティは自身の非構成可能なプロパティである場合。</target>
        </trans-unit>
        <trans-unit id="d976806ffa3ac78e1eec4fa41bb8e665570edeb7" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; is out of bounds in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">例外&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;あれば、 &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; で範囲外の &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3d5a15ba4e2883562ccc781325a904f1c1ed200" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;index&lt;/code&gt; is out of bounds in the &lt;code&gt;typedArray&lt;/code&gt;.</source>
          <target state="translated">例外&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;あれば、 &lt;code&gt;index&lt;/code&gt; で範囲外の &lt;code&gt;typedArray&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6a99a2a7ba0910c50ad732908be04470cf0773c" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; exception if the string to parse is not valid JSON.</source>
          <target state="translated">解析する文字列が有効なJSONでない場合、&lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;例外をスローします。</target>
        </trans-unit>
        <trans-unit id="a4ac5c3d480d82b0a12a86f5a24ea2f76f4f7901" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;BigInt value can't be serialized in JSON&quot;) when trying to stringify a &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">BigInt値を文字&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;しようとすると、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（ &quot;BigInt値をJSONでシリアル化できません&quot;）をスローします。</target>
        </trans-unit>
        <trans-unit id="9b742f071cb53d20fd249f8f0e5f93c441ae76fb" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;cyclic object value&quot;) exception when a circular reference is found.</source>
          <target state="translated">循環参照が見つかった場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（「循環オブジェクト値」）例外をスローします。</target>
        </trans-unit>
        <trans-unit id="c5dfdfcd952515fb76b078b574cbd5677fc65b9f" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; is to be modified is non-extensible according to &lt;a href=&quot;isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;. Does nothing if the &lt;code&gt;prototype&lt;/code&gt; parameter isn't an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; (i.e., number, string, boolean, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;). Otherwise, this method changes the &lt;code&gt;[[Prototype]]&lt;/code&gt; of &lt;code&gt;obj&lt;/code&gt; to the new value.</source>
          <target state="translated">&lt;code&gt;[[Prototype]]&lt;/code&gt; が変更されるオブジェクトが&lt;a href=&quot;isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;に従って拡張できない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外をスローします。 &lt;code&gt;prototype&lt;/code&gt; パラメータがオブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; で&lt;/a&gt;ない場合（つまり、数値、文字列、ブール値、または&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;）、何もしません。それ以外の場合、このメソッドは &lt;code&gt;obj&lt;/code&gt; の &lt;code&gt;[[Prototype]]&lt;/code&gt; を新しい値に変更します。</target>
        </trans-unit>
        <trans-unit id="3333628f0ecce9f8df87cce1b8b5ea238120f628" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is not a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; が共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; で&lt;/a&gt;ない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;スローします。</target>
        </trans-unit>
        <trans-unit id="93d661497f452e06f5e196f867d1ebf61ee1cfad" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is not one of the allowed integer types.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; が許可された整数型の1つでない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="5397c200d2a2ee90e06e0032022137c360cfe34b" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; がInt32Arrayでない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7ed853f33a922f8707507e2c55422e5484a7c330" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; が共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; で&lt;/a&gt;ない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;スローします。</target>
        </trans-unit>
        <trans-unit id="7b0b3b69354d9aa876d74badc3490211a69d9c9a" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a shared typed array type.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; が共有の型付き配列型でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="48c5d4bb1483df722a7363fcd4779e6ef9f37814" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not one of the allowed integer types.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; が許可された整数型のいずれでもない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="6379845ba68b9ce053f692a29e59dd73bac1533b" translate="yes" xml:space="preserve">
          <source>Throws a user-defined exception.</source>
          <target state="translated">ユーザー定義の例外をスローします。</target>
        </trans-unit>
        <trans-unit id="1900005b555b636b4c5a98c47e3b5430ad9cce7e" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when &lt;code&gt;&lt;em&gt;encodedURI&lt;/em&gt;&lt;/code&gt; contains invalid character sequences.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;encodedURI&lt;/em&gt;&lt;/code&gt; に無効な文字シーケンスが含まれている場合、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;（「不正なURIシーケンス」）例外が&lt;em&gt;スローさ&lt;/em&gt;れます。</target>
        </trans-unit>
        <trans-unit id="ade68e28b40dd65aa4ae02bf634b315bc9197553" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when &lt;code&gt;&lt;var&gt;encodedURI&lt;/var&gt;&lt;/code&gt; contains invalid character sequences.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;encodedURI&lt;/var&gt;&lt;/code&gt; に無効な文字シーケンスが含まれている場合、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;（「不正な形式のURIシーケンス」）例外をスローします。</target>
        </trans-unit>
        <trans-unit id="d0596e3edf384baf6965162fe31f6e5aeabf2b6d" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when used wrongly.</source>
          <target state="translated">誤って使用すると、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;（「不正なURIシーケンス」）例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7679a34cdca145043e71acfbd4afa3f6f45b224c" translate="yes" xml:space="preserve">
          <source>Throws an error to a generator (also finishes the generator, unless caught from within that generator).</source>
          <target state="translated">ジェネレーターにエラーをスローします(そのジェネレーターの中からキャッチされない限り、ジェネレーターも終了します)。</target>
        </trans-unit>
        <trans-unit id="cd29b66a9ed7f4874f06db4d5590c606798c05ae" translate="yes" xml:space="preserve">
          <source>Throws an error to a generator. This corresponds to the &lt;code&gt;throw()&lt;/code&gt; method in the ES2015 generator object.</source>
          <target state="translated">ジェネレーターにエラーをスローします。これは、ES2015ジェネレーターオブジェクトの &lt;code&gt;throw()&lt;/code&gt; メソッドに対応します。</target>
        </trans-unit>
        <trans-unit id="92298a4c89aa669c689af0dc8dbe4bc0cec2e65f" translate="yes" xml:space="preserve">
          <source>Thus from the above example of class &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;, it seems that &lt;code&gt;new.target&lt;/code&gt; points to the class definition of class which is initialized. For example, when &lt;code&gt;d&lt;/code&gt; was initialized using &lt;code&gt;new D()&lt;/code&gt;, the class definition of &lt;code&gt;D&lt;/code&gt; was printed; and similarly, in case of &lt;code&gt;c&lt;/code&gt;, the class &lt;code&gt;C&lt;/code&gt; was printed.</source>
          <target state="translated">したがって、上記のクラス &lt;code&gt;C&lt;/code&gt; と &lt;code&gt;D&lt;/code&gt; の例から、 &lt;code&gt;new.target&lt;/code&gt; は初期化されたクラスのクラス定義を指しているように見えます。たとえば、 &lt;code&gt;d&lt;/code&gt; が &lt;code&gt;new D()&lt;/code&gt; を使用して初期化された場合、 &lt;code&gt;D&lt;/code&gt; のクラス定義が出力されました。同様に、 &lt;code&gt;c&lt;/code&gt; の場合、クラス &lt;code&gt;C&lt;/code&gt; が出力されました。</target>
        </trans-unit>
        <trans-unit id="006e0d66e833b398c42cfcdef2352f749de24e90" translate="yes" xml:space="preserve">
          <source>Thus from the above example of class C and D, it seems that new.target points to the class Definition of class which is initialized. For example, when D was initialized using new, the class definition of D was printed and similarly in case of c, class C was printed</source>
          <target state="translated">このように、上記のクラスCとDの例から、new.targetは初期化されたクラスのクラス定義を指しているようです。例えばDをnewで初期化した場合、Dのクラス定義が出力され、同様にcの場合はCのクラスが出力されます。</target>
        </trans-unit>
        <trans-unit id="8869c01d48f0801606614941c0ab16d5ec6cf1de" translate="yes" xml:space="preserve">
          <source>Thus names in strict mode &lt;code&gt;eval&lt;/code&gt; code behave identically to names in strict mode code not being evaluated as the result of &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">したがって、strictモードの &lt;code&gt;eval&lt;/code&gt; コードの名前は、 &lt;code&gt;eval&lt;/code&gt; の結果として評価されないstrictモードのコードの名前と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="c6c74f1c6a27fa19af3bb0c8b1fa0d332430eda3" translate="yes" xml:space="preserve">
          <source>Thus, any routine cleanup code done in that enclosed (or the main) section before it exits, will be skipped. However, If the try-block has a finally-block, then that finally-block code will be executed first to permit any such cleanup, and THEN the other try's catch-block (or the error-generator) will get control to handle the second exception.</source>
          <target state="translated">したがって、その閉じられた(またはメインの)セクションが終了する前に行われたルーチンのクリーンアップコードはすべてスキップされます。しかし、もしtry-blockにfinal-blockがある場合、そのfinal-blockコードは、そのようなクリーンアップを許可するために最初に実行され、その後、他のtryのキャッチブロック(またはエラー生成器)は、2番目の例外を処理するために制御を取得します。</target>
        </trans-unit>
        <trans-unit id="734772e40bb6d21a7d6769a3d97371f37de54286" translate="yes" xml:space="preserve">
          <source>Thus, in the &lt;code&gt;eval()&lt;/code&gt; version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called &lt;code&gt;Date()&lt;/code&gt;. This is incredibly inefficient compared to &lt;code&gt;Function()&lt;/code&gt;.</source>
          <target state="translated">したがって、コードの &lt;code&gt;eval()&lt;/code&gt; バージョンでは、ブラウザーは、 &lt;code&gt;Date()&lt;/code&gt; と呼ばれるローカル変数があるかどうかを確認するために、コストのかかるルックアップ呼び出しを行うことを余儀なくされます。これは、 &lt;code&gt;Function()&lt;/code&gt; と比較して非常に非効率的です。</target>
        </trans-unit>
        <trans-unit id="7d5f001fb79d8a238bf76ed9526f508a6f1ac77a" translate="yes" xml:space="preserve">
          <source>Thus, in the &lt;code&gt;eval()&lt;/code&gt; version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called &lt;code&gt;Date()&lt;/code&gt;. This is incredibly innefficient compared to &lt;code&gt;Function()&lt;/code&gt;.</source>
          <target state="translated">したがって、コードの &lt;code&gt;eval()&lt;/code&gt; バージョンでは、ブラウザは、 &lt;code&gt;Date()&lt;/code&gt; と呼ばれるローカル変数があるかどうかを確認するために、コストのかかるルックアップ呼び出しを行う必要があります。これは &lt;code&gt;Function()&lt;/code&gt; と比較して信じられないほど非効率的です。</target>
        </trans-unit>
        <trans-unit id="960afc28473e8cfc97b5a580872af16e460681a1" translate="yes" xml:space="preserve">
          <source>Thus, presented below are two options for &lt;code&gt;Function.prototype.bind()&lt;/code&gt; polyfills:</source>
          <target state="translated">したがって、以下に示すのは、 &lt;code&gt;Function.prototype.bind()&lt;/code&gt; ポリフィルの2つのオプションです。</target>
        </trans-unit>
        <trans-unit id="b2ba52891c01a48629ba1937711224af337bf0ed" translate="yes" xml:space="preserve">
          <source>Time to wait in milliseconds. &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, if no time is provided.</source>
          <target state="translated">ミリ秒単位で待機する時間。時間がない場合は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8554d053f59f2ea34bc31ee4681625faa76e305e" translate="yes" xml:space="preserve">
          <source>Timezone offset sign, either:</source>
          <target state="translated">タイムゾーンのオフセット記号、どちらか。</target>
        </trans-unit>
        <trans-unit id="79697cbcd2045cc71c3c01ceb134196ebf980f06" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries()&lt;/code&gt; support in older environments that do not natively support it, you can use any of the following:</source>
          <target state="translated">ネイティブにサポートされていない古い環境で互換性のある &lt;code&gt;Object.entries()&lt;/code&gt; サポートを追加するには、次のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="735010d8962f0aecbb49e6bc825b61c55829c7cd" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries&lt;/code&gt; support in older environments that do not natively support it, you can find a demonstrational implementation of Object.entries in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; (if you don't need any support for IE), a polyfill in the &lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-shims/Object.entries&lt;/a&gt; repositories, or you can use the simple, ready to deploy polyfill listed below.</source>
          <target state="translated">ネイティブでサポートしていない古い環境で互換性のある &lt;code&gt;Object.entries&lt;/code&gt; サポートを追加するには、Object.entriesのデモ実装を&lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entriesで&lt;/a&gt;見つけることができます（IEのサポートが必要ない場合）。 、&lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-&lt;/a&gt; shims / Object.entriesリポジトリのポリフィル、または以下にリストされている、すぐに導入できるシンプルなポリフィルを使用できます。</target>
        </trans-unit>
        <trans-unit id="11e8061b160ea169ddea72755f0b856618a737a7" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.keys&lt;/code&gt; support in older environments that do not natively support it, copy the following snippet:</source>
          <target state="translated">互換性のある &lt;code&gt;Object.keys&lt;/code&gt; サポートを、ネイティブでサポートしていない古い環境に追加するには、次のスニペットをコピーします。</target>
        </trans-unit>
        <trans-unit id="05bf4d01ba615f0cd3a215a0e64d9df3bd7f545e" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.values&lt;/code&gt; support in older environments that do not natively support it, you can find a Polyfill in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; or in the &lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims/Object.values&lt;/a&gt; repositories.</source>
          <target state="translated">互換性のある &lt;code&gt;Object.values&lt;/code&gt; サポートを、ネイティブでサポートしていない古い環境に追加するには、&lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entries&lt;/a&gt;または&lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims / Object.values&lt;/a&gt;リポジトリでポリフィルを検索できます。</target>
        </trans-unit>
        <trans-unit id="e87c9dfadb234300ea044e3a6a526ff10cd3c440" translate="yes" xml:space="preserve">
          <source>To append a getter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">後でいつでも既存のオブジェクトにゲッターを追加するには、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="659eb35f4c695cf5f4dcfc2937f3da494d4e2a1e" translate="yes" xml:space="preserve">
          <source>To append a setter to an &lt;em&gt;existing&lt;/em&gt; object, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セッターを&lt;em&gt;既存の&lt;/em&gt;オブジェクトに追加するには、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="2a3e1471758522734b843aea1b4e92cd9ed7b6bb" translate="yes" xml:space="preserve">
          <source>To append a setter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">後でいつでも既存のオブジェクトにセッターを追加するには、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="229057f1da598e787ee444d5057c05857da31eb2" translate="yes" xml:space="preserve">
          <source>To avoid name clashes with your global symbol keys and other (library code) global symbols, it might be a good idea to prefix your symbols:</source>
          <target state="translated">グローバルシンボルキーや他の (ライブラリコードの)グローバルシンボルとの名前の衝突を避けるために、シンボルの前にプレフィックスをつけるのは良いアイデアかもしれません。</target>
        </trans-unit>
        <trans-unit id="b126d6e2e80461da4f922af64279968f4f8c738b" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; one way to do that is to use the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method), like this:</source>
          <target state="translated">エラーを回避するには、オブジェクトに &lt;code&gt;bar&lt;/code&gt; の定義を追加するか、アクセスする前に &lt;code&gt;bar&lt;/code&gt; プロパティの存在を確認する必要があります。これを行う1つの方法は、次のように&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt;メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="cad7a96c7701e37d8b09b86ca2aa88e3150eb037" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; ways to do that include using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, or the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method, like this:</source>
          <target state="translated">エラーを回避するには、オブジェクトに &lt;code&gt;bar&lt;/code&gt; の定義を追加するか、 &lt;code&gt;bar&lt;/code&gt; プロパティの存在を確認してからアクセスする必要があります。これを行う方法には、次のように、&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子または&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt;メソッドを使用することが含まれます。</target>
        </trans-unit>
        <trans-unit id="ff71ce43fff60e2c7e40d45499a27a7de439dc4a" translate="yes" xml:space="preserve">
          <source>To avoid this just assign necessary constructor which you are going to use.</source>
          <target state="translated">これを避けるためには、必要なコンストラクタを代入するだけです。</target>
        </trans-unit>
        <trans-unit id="ef05d88a53a4e9cf7aa2df5505542ee1fc23439c" translate="yes" xml:space="preserve">
          <source>To avoid this problem (to prevent ASI), you could use parentheses:</source>
          <target state="translated">この問題を避けるために(ASIを防ぐために)括弧を使うことができます。</target>
        </trans-unit>
        <trans-unit id="3f1fb295cbfdf10675698a084f9573787dc73972" translate="yes" xml:space="preserve">
          <source>To avoid this problem, make sure that the property being assigned to inside the setter function is different from the one that initially triggered the setter.The same goes for the getter.</source>
          <target state="translated">この問題を避けるためには、セッター関数内で代入されるプロパティが、最初にセッターを起動したプロパティと異なることを確認してください。</target>
        </trans-unit>
        <trans-unit id="14166ee0fec3c194f4fc0df0688a0bc1f17feb8b" translate="yes" xml:space="preserve">
          <source>To avoid this, just assign the necessary constructor you are going to use.</source>
          <target state="translated">これを避けるためには、使用するコンストラクタに必要なものを代入するだけです。</target>
        </trans-unit>
        <trans-unit id="4ee0ee4bb579af779267dc3c125db70264731acb" translate="yes" xml:space="preserve">
          <source>To avoid this, make sure a new array is always filled with non-empty values or not write to indexes past the end of array.</source>
          <target state="translated">これを避けるためには、新しい配列が常に空ではない値で満たされていることを確認したり、配列の終わりを過ぎたインデックスには書き込みをしないようにします。</target>
        </trans-unit>
        <trans-unit id="b1f701e4f578c53ab427a079283d5ee6a7b477b0" translate="yes" xml:space="preserve">
          <source>To be a constant object, the entire reference graph (direct and indirect references to other objects) must reference only immutable frozen objects. The object being frozen is said to be immutable because the entire object &lt;em&gt;state&lt;/em&gt; (values and references to other objects) within the whole object is fixed. Note that strings, numbers, and booleans are always immutable and that Functions and Arrays are objects.</source>
          <target state="translated">定数オブジェクトになるためには、参照グラフ全体（他のオブジェクトへの直接および間接参照）は、不変の凍結オブジェクトのみを参照する必要があります。オブジェクト全体のオブジェクト&lt;em&gt;状態&lt;/em&gt;（値と他のオブジェクトへの参照）全体が固定されているため、フリーズされるオブジェクトは不変であるといいます。文字列、数値、ブール値は常に不変であり、関数と配列はオブジェクトであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de007351cb0387325d3097a635ab72efab68a96d" translate="yes" xml:space="preserve">
          <source>To be more precise, the block statement is preventing the function declaration from being &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; to the top of the scope. The function is behaving as if it were defined as a function expression and, as such, it is only the implicit variable declaration that gets hoisted to the top of the scope:</source>
          <target state="translated">より正確に言うと、ブロックステートメントにより、関数宣言がスコープの最上部に移動することが妨げ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;られ&lt;/a&gt;ています。関数は関数式として定義されているかのように動作しており、スコープの最上部に巻き上げられるのは暗黙的な変数宣言だけです。</target>
        </trans-unit>
        <trans-unit id="91d84150764106dcb84b71d84665d49643ba81c1" translate="yes" xml:space="preserve">
          <source>To be more stringent in adhering to &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt; (which reserves !, ', (, ), and *), even though these characters have no formalized URI delimiting uses, the following can be safely used:</source>
          <target state="translated">付着していないで、より厳格であるために&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt;これらの文字は何の用途を区切るURIを定式化しているにもかかわらず、（！その埋蔵量、」、（、）、および*）、以下が安全に使用することができます。</target>
        </trans-unit>
        <trans-unit id="3ed4a43645f0a2537c0221912eb5a09df85356fb" translate="yes" xml:space="preserve">
          <source>To change &quot;foo&quot; inside the if statement, you need to remove the &lt;code&gt;let&lt;/code&gt; that causes the redeclaration.</source>
          <target state="translated">ifステートメント内の「foo」を変更するには、再宣言の原因となっている &lt;code&gt;let&lt;/code&gt; を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="d405cf494444cd6fd79287277242d527e2322819" translate="yes" xml:space="preserve">
          <source>To change it, use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これを変更するには、&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="16cc73a3ccd7572782dfa5f7a136f79687bbbe73" translate="yes" xml:space="preserve">
          <source>To change it, you could use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; though.</source>
          <target state="translated">これを変更するには、&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b23e40255a27317ad4c5e7988f79e6d83e22e91b" translate="yes" xml:space="preserve">
          <source>To check if cross origin isolation has been successful, you can test against the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;crossOriginIsolated&lt;/a&gt;&lt;/code&gt; property available to window and worker contexts:</source>
          <target state="translated">クロスオリジン分離が成功したかどうかを確認するには、ウィンドウおよびワーカーコンテキストで使用可能な &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;crossOriginIsolated&lt;/a&gt;&lt;/code&gt; プロパティに対してテストできます。</target>
        </trans-unit>
        <trans-unit id="4f129204df59c5d4904a8a7b491a530f5eecaa53" translate="yes" xml:space="preserve">
          <source>To check whether an implementation supports them, use the &lt;code&gt;&quot;i&quot;&lt;/code&gt; argument (a requirement that illegal language tags are rejected) and look for a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">実装がそれらをサポートしているかどうかを確認するには、 &lt;code&gt;&quot;i&quot;&lt;/code&gt; 引数（不正な言語タグが拒否されるという要件）を使用して、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外を探します。</target>
        </trans-unit>
        <trans-unit id="cf6c25e7e31c11f7c29484cdde462e57ff8e0ec5" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array ascending (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">数字の代わりに文字列を比較するために、比較関数は単純に差し引くことができ &lt;code&gt;b&lt;/code&gt; から。次の関数は、配列を昇順でソートします（ &lt;code&gt;Infinity&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; が含まれていない場合）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f0b72177be072c3cc5f16b4c720a3f88c9d6225" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array in ascending order (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">数字の代わりに文字列を比較するために、比較関数は単純に差し引くことができ &lt;code&gt;b&lt;/code&gt; から。次の関数は、配列を昇順で並べ替えます（ &lt;code&gt;Infinity&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; が含まれていない場合）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37e2da601250c750672096a3ac258a97ae0d4506" translate="yes" xml:space="preserve">
          <source>To convert a number to its string literal in a particular radix, use &lt;code&gt;&lt;var&gt;thatNumber&lt;/var&gt;.toString(&lt;var&gt;radix&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">数値を特定の基数の文字列リテラルに変換するには、 &lt;code&gt;&lt;var&gt;thatNumber&lt;/var&gt;.toString(&lt;var&gt;radix&lt;/var&gt;)&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="af4d1fa2b60b0aab96f8363f72219fd6ee63d633" translate="yes" xml:space="preserve">
          <source>To convert number to its string literal in a particular radix use &lt;code&gt;intValue.toString(radix)&lt;/code&gt;.</source>
          <target state="translated">特定の基数で数値を文字列リテラルに変換するには、 &lt;code&gt;intValue.toString(radix)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bdd25ea23fa70526ba94776a9ffa7c104991659a" translate="yes" xml:space="preserve">
          <source>To convert the non-standard expression closures syntax to standard ECMAScript syntax, you can add curly braces and return statements.</source>
          <target state="translated">非標準の式クロージャ構文を標準のECMAScript構文に変換するには、中括弧と戻り文を追加することができます。</target>
        </trans-unit>
        <trans-unit id="9c3d95d344533848c975698d3517cac4ca51dc93" translate="yes" xml:space="preserve">
          <source>To count how many elements are in a &lt;code&gt;Set&lt;/code&gt;, use &lt;a href=&quot;set/size&quot;&gt;&lt;code&gt;Set.prototype.size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; に含まれる要素の数をカウントするには、&lt;a href=&quot;set/size&quot;&gt; &lt;code&gt;Set.prototype.size&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4a70476c40d7f474041614202b80673d7ed88ad9" translate="yes" xml:space="preserve">
          <source>To create a new primitive symbol, you write &lt;code&gt;Symbol()&lt;/code&gt; with an optional string as its description:</source>
          <target state="translated">新しいプリミティブシンボルを作成するには、説明としてオプションの文字列を使用して &lt;code&gt;Symbol()&lt;/code&gt; を記述します。</target>
        </trans-unit>
        <trans-unit id="78eca4ff24cae301e8c463b3113c921a5299b2f0" translate="yes" xml:space="preserve">
          <source>To customise the proxy, we define functions on the handler object:</source>
          <target state="translated">プロキシをカスタマイズするために、ハンドラオブジェクトに関数を定義します。</target>
        </trans-unit>
        <trans-unit id="1b00f2f6bb9327ee2c8dec177efb6a4af21ed29e" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself another object. See the examples below.</source>
          <target state="translated">オブジェクト・タイプを定義するには、そのオブジェクト・タイプの名前とプロパティを指定する関数を作成します。オブジェクトは、それ自体が別のオブジェクトであるプロパティを持つことができます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="4131b3bc54e63c2abd6c58d537708c1ccc9e759c" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself or another object. See the examples below.</source>
          <target state="translated">オブジェクト・タイプを定義するには、そのオブジェクト・タイプの名前とプロパティを指定する関数を作成します。オブジェクトは、それ自身または別のオブジェクトであるプロパティを持つことができます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b7c92209a721c1091a0c7a22d35353dd58f6f205" translate="yes" xml:space="preserve">
          <source>To dynamically import a module, the &lt;code&gt;import&lt;/code&gt; keyword may be called as a function. When used this way, it returns a promise.</source>
          <target state="translated">モジュールを動的にインポートするために、 &lt;code&gt;import&lt;/code&gt; キーワードを関数として呼び出すことができます。このように使用すると、promiseが返されます。</target>
        </trans-unit>
        <trans-unit id="d87c4eabb66bc009e7eab7f129b2bc8668efc006" translate="yes" xml:space="preserve">
          <source>To escape a backtick in a template literal, put a backslash (&lt;code&gt;\&lt;/code&gt;)before the backtick.</source>
          <target state="translated">テンプレートリテラルのバッククォートをエスケープするには、バッククォートの前にバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）を置きます。</target>
        </trans-unit>
        <trans-unit id="4b772057c1501138b9270507d45837bdfa729e3b" translate="yes" xml:space="preserve">
          <source>To execute multiple statements within a clause, use a block statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested &lt;code&gt;if&lt;/code&gt; statements:</source>
          <target state="translated">句内で複数のステートメントを実行するには、ブロックステートメント（ &lt;code&gt;{ ... }&lt;/code&gt; ）を使用してそれらのステートメントをグループ化します。一般的に、特にネストされた &lt;code&gt;if&lt;/code&gt; ステートメントを含むコードでは、常にブロックステートメントを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fb5b6aa172088f8e8cb00281ed35e00d5092703a" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">nullポインターを &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; 値に修正するには、たとえば、&lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt;演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="91a86984838df61ba0846a39480b0309f51a02cc" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 値へのnullポインターを修正するには、たとえば、&lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt;演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="5d0de1e00e0b24955b2e7edd966d5a8cb99b6bfe" translate="yes" xml:space="preserve">
          <source>To fix these errors, you will either need to replace the &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt; operator&lt;/a&gt; with the &lt;a href=&quot;../operators/typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt; operator&lt;/a&gt;, or to make sure you use the function name, instead of the result of its evaluation.</source>
          <target state="translated">これらのエラーを修正するには、&lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; 演算子&lt;/a&gt;を&lt;a href=&quot;../operators/typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; 演算&lt;/a&gt;子に置き換えるか、評価結果ではなく関数名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b30ab0fa15a53ce2b025fb9fcebeedead602778" translate="yes" xml:space="preserve">
          <source>To fix this code, you need to access the object like this:</source>
          <target state="translated">このコードを修正するには、このようなオブジェクトにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="0b75000801b86b4c7e3a6280f97393340f3378fc" translate="yes" xml:space="preserve">
          <source>To fix this code, you would need to add a parenthesis that closes the condition.</source>
          <target state="translated">このコードを修正するには、条件を閉じる括弧を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="86accf46f3e132880f45e8ff095e3c12c10d297a" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove line 16, where there is an attempt to set the temperature property, or you will need to implement a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt; for it, for example like this:</source>
          <target state="translated">このエラーを修正するには、温度プロパティを設定しようとしている行16を削除するか、次のように、そのための&lt;a href=&quot;../functions/set&quot;&gt;セッター&lt;/a&gt;を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="bf97dc62646ce58482960a37576e08c369e17aa5" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove the call to &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; entirely, or move it to a position so that the property is added earlier and only later the object is marked as non-extensible. Of course you can also remove the property that was attempted to be added, if you don't need it.</source>
          <target state="translated">このエラーを修正するには、&lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;への呼び出しを完全に削除するか、プロパティを以前に追加し、後でのみオブジェクトが非拡張可能としてマークされるような位置に移動する必要があります。もちろん、必要がなければ、追加しようとしたプロパティを削除することもできます。</target>
        </trans-unit>
        <trans-unit id="b4ba67838ff27fd0b5e835c26d775ab0240d0d03" translate="yes" xml:space="preserve">
          <source>To fix this warning, the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; statement can just be omitted, because the variable exists already. In other cases, you might to rename either the function parameter or the variable name.</source>
          <target state="translated">この警告を修正するには、変数がすでに存在しているため、 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; ステートメントを省略できます。他の場合では、関数パラメーターまたは変数名のいずれかの名前を変更する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="956ca320c80ca726eca3552fa06ab58884939c87" translate="yes" xml:space="preserve">
          <source>To force the base of an exponentiation expression to be a negative number:</source>
          <target state="translated">指数式の基底を強制的に負の数にすること。</target>
        </trans-unit>
        <trans-unit id="421bbcc452e2335197d911b9dedefef9f4238ca7" translate="yes" xml:space="preserve">
          <source>To free the contents of a variable, you can set it to &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">変数の内容を解放するには、変数を&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="52dba64c34ae66410ba3b4d58157ff01e4fa831f" translate="yes" xml:space="preserve">
          <source>To get Date, Month and Year or Time</source>
          <target state="translated">日付、月、年または時間を取得するには</target>
        </trans-unit>
        <trans-unit id="9e05bade19c4913cbfab30bd2bf88e465332af90" translate="yes" xml:space="preserve">
          <source>To get more information (but with slower execution), use the &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method. (This is similar to the &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt; method.)</source>
          <target state="translated">より多くの情報を取得するには（ただし実行速度は遅くなります）、&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。（これは&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;メソッドに似ています。）</target>
        </trans-unit>
        <trans-unit id="747d05132d9cc0d0814a6d6f49d6ab71a0abfb50" translate="yes" xml:space="preserve">
          <source>To get the same effect using template literals, you can now write:</source>
          <target state="translated">テンプレートリテラルを使用して同じ効果を得るために、今すぐ書けるようになりました。</target>
        </trans-unit>
        <trans-unit id="038ccd252ffc16f9a65c61b5b1a06febf39f6feb" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">これを防ぐために、2行目のようなものが使用されます。ここで、 &lt;code&gt;multiply&lt;/code&gt; が1つの引数のみで呼び出された場合、 &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="0cd3ea0c08a76d95e41cc575c73f75a27dbaa192" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;b&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">どここれを防ぐために、二行目のようなものは、使用される &lt;code&gt;b&lt;/code&gt; に設定されている &lt;code&gt;1&lt;/code&gt; 場合 &lt;code&gt;multiply&lt;/code&gt; 唯一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c97668d524a150f31ca392e34bb401cbf968f4d2" translate="yes" xml:space="preserve">
          <source>To help explain these properties and elements, see this example and then refer to the table below:</source>
          <target state="translated">これらのプロパティと要素を説明するのに役立つように、この例を見てから、下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="2281f8bdaf901641e3dec3fa6d152fcde978085a" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">メモリ使用量を改善し、メモリリークを防ぐために、Firefoxでは、アドオンが親ドキュメントが破棄された後もDOMオブジェクトへの強い参照を維持することを禁止しています。死んだオブジェクトは、DOMで破棄された後も存続するDOM要素への強力な（キープアライブ）参照を保持しています。これらの問題を回避するには、外部ドキュメントのDOMノードへの参照を代わりにそのドキュメントに固有のオブジェクトに保存し、ドキュメントがアンロードされたときにクリーンアップするか、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;弱参照&lt;/a&gt;として保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="af8a11962f2fa3f3529a0d98f145c56042a6b760" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">メモリ使用量を改善し、メモリリークを防ぐために、Firefoxは、親ドキュメントが破棄された後、アドオンがDOMオブジェクトへの強力な参照を保持することを許可していません。デッドオブジェクトは、DOMで破棄された後も存続するDOM要素への強力な（キープアライブ）参照を保持しています。これらの問題を回避するには、代わりに、外部ドキュメントのDOMノードへの参照をそのドキュメントに固有のオブジェクトに保存し、ドキュメントがアンロードされるときにクリーンアップするか、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;弱参照&lt;/a&gt;として保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="18ada6a5fe0260eaa93b8a294f2a8aa0b6e264d2" translate="yes" xml:space="preserve">
          <source>To improve readability for numeric literals, underscores (&lt;code&gt;_&lt;/code&gt;, &lt;code&gt;U+005F&lt;/code&gt;) can be used as separators:</source>
          <target state="translated">数値リテラルの読みやすさを向上させるために、アンダースコア（ &lt;code&gt;_&lt;/code&gt; 、 &lt;code&gt;U+005F&lt;/code&gt; ）を区切り文字として使用できます。</target>
        </trans-unit>
        <trans-unit id="62ae4acb76421f9729079bcd34138c41da17b09d" translate="yes" xml:space="preserve">
          <source>To include a flag with the regular expression, use this syntax:</source>
          <target state="translated">正規表現にフラグを含めるには、この構文を使用します。</target>
        </trans-unit>
        <trans-unit id="6d7b234f80319b329c9f890cf3c6fb0952c75d99" translate="yes" xml:space="preserve">
          <source>To instantiate the new objects, you then use the following:</source>
          <target state="translated">新しいオブジェクトをインスタンス化するには、次に次のようにします。</target>
        </trans-unit>
        <trans-unit id="2da07bc6be7bd717dced39e45d7ac3036fc78a69" translate="yes" xml:space="preserve">
          <source>To invert the sign of the result of an exponentiation expression:</source>
          <target state="translated">指数式の結果の符号を反転させる。</target>
        </trans-unit>
        <trans-unit id="307515a0238257589b141add168f26a6658356a9" translate="yes" xml:space="preserve">
          <source>To invoke strict mode for an entire script, put the &lt;em&gt;exact&lt;/em&gt; statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; (or &lt;code&gt;'use strict';&lt;/code&gt;) before any other statements.</source>
          <target state="translated">スクリプト全体に対してストリクトモードを呼び出すには、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; という&lt;em&gt;正確な&lt;/em&gt;ステートメントを入力します。（または &lt;code&gt;'use strict';&lt;/code&gt; ）他のステートメントの前。</target>
        </trans-unit>
        <trans-unit id="f1bb7e56e4e1c57532789b488df9a11f77ade640" translate="yes" xml:space="preserve">
          <source>To learn about the way promises work and how you can use them, we advise you to read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Using promises&lt;/a&gt; first.</source>
          <target state="translated">promiseの機能とその使用方法については、最初に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Promiseの使用&lt;/a&gt;を読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="75ac8e5447823b69e4e0fe22510dea636a6c8749" translate="yes" xml:space="preserve">
          <source>To learn more about ES2015 generators, see:</source>
          <target state="translated">ES2015のジェネレーターの詳細については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="576cfdce3de5306eb146e890163b32ca758257fd" translate="yes" xml:space="preserve">
          <source>To make &quot;bar&quot; a declared variable, you can add the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; keyword in front of it.</source>
          <target state="translated">「bar」を宣言された変数にするには、その前に &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; キーワードを追加できます。</target>
        </trans-unit>
        <trans-unit id="7f704faae950a1e35871b3c65d28aa063776d91a" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;finally&lt;/code&gt; blocks of a sync generator to be always called use appropriate form of the loop, &lt;code&gt;for await...of&lt;/code&gt; for the async generator and &lt;code&gt;for...of&lt;/code&gt; for the sync one and await yielded promises explicitly inside the loop.</source>
          <target state="translated">作るために &lt;code&gt;finally&lt;/code&gt; 、ループの同期発電機のブロックが常に呼び出される使用に適切なフォームを &lt;code&gt;for await...of&lt;/code&gt; 非同期発電機のためにと &lt;code&gt;for...of&lt;/code&gt; シンク1のため、ループ内で明示的に約束をもたらし待ちます。</target>
        </trans-unit>
        <trans-unit id="3d1fdea6be9a37db2a93137b0b09db6d812a2958" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_(graph_theory)&quot;&gt;cycles&lt;/a&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">オブジェクトを不変にするには、オブジェクト型の各プロパティを再帰的にフリーズします（ディープフリーズ）。オブジェクトに参照グラフに&lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_(graph_theory)&quot;&gt;サイクル&lt;/a&gt;が含まれていないことがわかっている場合は、設計に基づいてケースバイケースでパターンを使用してください。含まれていない場合は、無限ループがトリガーされます。 &lt;code&gt;deepFreeze()&lt;/code&gt; の拡張機能は、パス（配列など）引数を受け取る内部関数を持つことです。これにより、オブジェクトが不変になる過程で、 &lt;code&gt;deepFreeze()&lt;/code&gt; の再帰的な呼び出しを抑制できます。 [ウィンドウ]など、フリーズすべきではないオブジェクトをフリーズするリスクがあります。</target>
        </trans-unit>
        <trans-unit id="1b6d41263a3058c202ec56d40a9d6b8e1652059e" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;em&gt;Unknown prefix: Cycle_(graph_theory).&lt;/em&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">オブジェクトを不変にするには、オブジェクトタイプの各プロパティを再帰的にフリーズします（ディープフリーズ）。オブジェクトに&lt;em&gt;不明な接頭辞&lt;/em&gt;が含まれていないことがわかっている場合は、設計に基づいてケースバイケースでパターンを使用します&lt;em&gt;：Cycle_（graph_theory）。&lt;/em&gt;参照グラフでは、それ以外の場合は無限ループがトリガーされます。 &lt;code&gt;deepFreeze()&lt;/code&gt; の拡張機能は、パス（例：配列）引数を受け取る内部関数を使用することです。これにより、オブジェクトが不変になる過程で、 &lt;code&gt;deepFreeze()&lt;/code&gt; の再帰的な呼び出しを抑制できます。[ウィンドウ]のように、フリーズしてはならないオブジェクトをフリーズするリスクはまだあります。</target>
        </trans-unit>
        <trans-unit id="1efb7a94840c6df8e1529f399f820556da3a48dc" translate="yes" xml:space="preserve">
          <source>To match characters from other languages such as Cyrillic or Hebrew, use &lt;code&gt;\u&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt;, where &lt;code&gt;&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; is the character's Unicode value in hexadecimal.</source>
          <target state="translated">キリル文字やヘブライ語などの他の言語の文字と一致さ &lt;code&gt;&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; は、 &lt;code&gt;\u&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; 使用します。ここで、hhhhは16進数の文字のUnicode値です。</target>
        </trans-unit>
        <trans-unit id="cdd97829643819341bae18d4865a301c7a49ae25" translate="yes" xml:space="preserve">
          <source>To mimic the function of the &lt;code&gt;includes()&lt;/code&gt; method, this custom function returns &lt;code&gt;true&lt;/code&gt; if the element exists in the array:</source>
          <target state="translated">contains &lt;code&gt;includes()&lt;/code&gt; メソッドの関数を模倣するために、このカスタム関数は、要素が配列に存在する場合に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c99a2f7ab2302c62cb1ccbd0c741ca57d774dc7e" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;Date.now()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">タイミング攻撃とフィンガープリントに対する保護を提供するために、ブラウザの設定によっては、 &lt;code&gt;Date.now()&lt;/code&gt; の精度が丸められる場合があります。</target>
        </trans-unit>
        <trans-unit id="96915bb562bd10f7386212a4daf00e9d0be01c6c" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">タイミング攻撃とフィンガープリントに対する保護を提供するために、ブラウザの設定によっては、 &lt;code&gt;new Date().getTime()&lt;/code&gt; の精度が丸められる場合があります。</target>
        </trans-unit>
        <trans-unit id="bfcee662fb59dd61867d35e910871be399e7d731" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings. In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20&amp;micro;s in Firefox 59; in 60 it will be 2ms.</source>
          <target state="translated">タイミング攻撃やフィンガープリントからの保護を提供するために、ブラウザの設定によっては、 &lt;code&gt;new Date().getTime()&lt;/code&gt; の精度が丸められる場合があります。Firefoxでは、 &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; プリファレンスはデフォルトで有効になっており、Firefox 59ではデフォルトで20&amp;micro;sになっています。60では2msになります。</target>
        </trans-unit>
        <trans-unit id="ac37440f1ea5fb363f65d9cc2e0bc140f034f623" translate="yes" xml:space="preserve">
          <source>To pass the value of &lt;code&gt;this&lt;/code&gt; from one context to another, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; の値をあるコンテキストから別のコンテキストに渡すには、&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; を&lt;/a&gt;使用します&lt;strong&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4cf44ffc496e1c3ddaf8ae8f93838d413caef85" translate="yes" xml:space="preserve">
          <source>To perform a global search and replace, include the &lt;code&gt;g&lt;/code&gt; switch in the regular expression.</source>
          <target state="translated">グローバル検索と置換を実行するには、正規表現に &lt;code&gt;g&lt;/code&gt; スイッチを含めます。</target>
        </trans-unit>
        <trans-unit id="f23eacdabe4319920cbeec8293bbfab4a25022b3" translate="yes" xml:space="preserve">
          <source>To provide a function with promise functionality, simply have it return a promise:</source>
          <target state="translated">プロミス機能を持つ関数を提供するには、単にプロミスを返させるだけです。</target>
        </trans-unit>
        <trans-unit id="eefa6ae82f1c0d30ce5bb0a330d91982a9f8b2a7" translate="yes" xml:space="preserve">
          <source>To re-run a definition, use Scratchpad's menu Execute &amp;gt; Reload and Run.</source>
          <target state="translated">定義を再実行するには、スクラッチパッドのメニューの[実行]&amp;gt; [再読み込みして実行]を使用します。</target>
        </trans-unit>
        <trans-unit id="ca212f1a4ca5b68e70b2f13799d3d4a605bdfbe3" translate="yes" xml:space="preserve">
          <source>To remove a watchpoint, use the &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt; method. By default, the &lt;code&gt;watch&lt;/code&gt; method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ウォッチポイントを削除するには、&lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。デフォルトでは、 &lt;code&gt;watch&lt;/code&gt; メソッドは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;から派生したすべてのオブジェクトに継承されます。</target>
        </trans-unit>
        <trans-unit id="87769fb85ddf637fc522a9dfb87a72113fd21eef" translate="yes" xml:space="preserve">
          <source>To represent integers smaller than this, consider using &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これよりも小さい整数を表すには、&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="8ee6bc67f7ce03bb1e34c845d08bbc1ab32fdec2" translate="yes" xml:space="preserve">
          <source>To return a value other than the default, a function must have a &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; statement that specifies the value to return. A function without a return statement will return a default value. In the case of a &lt;a href=&quot;global_objects/object/constructor&quot;&gt;constructor&lt;/a&gt; called with the &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; keyword, the default value is the value of its &lt;code&gt;this&lt;/code&gt; parameter. For all other functions, the default return value is &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルト以外の値を返すには、関数には、 &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 値を指定するreturnステートメントが必要です。returnステートメントのない関数は、デフォルト値を返します。 &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; キーワードで呼び出される&lt;a href=&quot;global_objects/object/constructor&quot;&gt;コンストラクター&lt;/a&gt;の場合、デフォルト値は &lt;code&gt;this&lt;/code&gt; パラメーターの値です。他のすべての関数の場合、デフォルトの戻り値は&lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bbe3e5bf31754ac82a3fa0bb9dc3481a4afd3106" translate="yes" xml:space="preserve">
          <source>To return an object literal expression requires parentheses around expression:</source>
          <target state="translated">オブジェクトリテラル式を返すには、式の周りに括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="d31111b28eb9b4fc6974976c91cab6c393986b53" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">書き換えるために&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;値ができるように、文 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; で&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;うまくとして、あなたの周りにガードする必要がある&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e88d9bfb366adfc5ca7ab4e34ccc17a0c2342ad" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">書き換えるために&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;値ができるように、文 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; で&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;うまくとして、あなたの周りにガードする必要がある&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae85078dfd808f11e87a09a90b41a86b6930269f" translate="yes" xml:space="preserve">
          <source>To see how this works, this is how it would look if the nesting were properly indented:</source>
          <target state="translated">これがどのように動作するかを確認するには、入れ子を適切にインデントした場合には、このようになります。</target>
        </trans-unit>
        <trans-unit id="6d3d253ad399aba71e8bddceac06b64b3c64fcf9" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt; by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">循環参照をシリアル化するには、それらをサポートするライブラリ（たとえば、Douglas Crockfordに&lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;よるcycle.js&lt;/a&gt;）を使用するか、循環参照を検索してシリアル化可能な値で置換（または削除）する必要があるソリューションを自分で実装します。</target>
        </trans-unit>
        <trans-unit id="61341a387a73c6e0974b541c310c31fa835bad37" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt;) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">循環参照をシリアル化するには、それらをサポートするライブラリ（&lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.jsなど&lt;/a&gt;）を使用するか、循環参照を検索してシリアル化可能な値で置き換える（または削除する）必要があるソリューションを自分で実装します。</target>
        </trans-unit>
        <trans-unit id="10e0214ad945a12c3e4bcb01423a2eee0fe2f7da" translate="yes" xml:space="preserve">
          <source>To set the value of &lt;code&gt;this&lt;/code&gt; to a particular value when calling a function, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; as in the examples below.</source>
          <target state="translated">関数を呼び出すときに &lt;code&gt;this&lt;/code&gt; 値を特定の値に設定するには、以下の例のように&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="66dfb8b03b279299af3ce7e3e3995c740c761e43" translate="yes" xml:space="preserve">
          <source>To share memory using &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects from one agent in the cluster to another (an agent is either the web page&amp;rsquo;s main program or one of its web workers), &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;structured cloning&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;オブジェクトを使用してクラスター内の1つのエージェントから別のエージェントに（エージェントはWebページのメインプログラムまたはそのWebワーカーの1つです）を使用してメモリを共有するには、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;構造化複製&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="4c69f72f8a8e1556fbbba4284e4de161a49d7aa0" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">これを解決するには、 &lt;code&gt;Math.fround()&lt;/code&gt; を使用して64ビットfloatを32ビットfloatにキャストできます。内部的には、JavaScriptは数値を64ビット浮動小数点数として扱い続け、仮数の23番目のビットで「偶数に丸める」だけを実行し、後続のすべての仮数ビットを &lt;code&gt;0&lt;/code&gt; に設定します。数値が32ビットfloatの範囲外の場合、&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;-Infinity&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="51294f1892b4cc30fb189f09c42cde8df76f4c80" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">これを解決するために、 &lt;code&gt;Math.fround()&lt;/code&gt; を使用して64ビット浮動小数点を32ビット浮動小数点にキャストできます。内部的には、JavaScriptは数値を64ビットの浮動小数点数として扱い続け、仮数の23番目のビットで「偶数に丸める」だけを実行し、後続のすべての仮数ビットを &lt;code&gt;0&lt;/code&gt; に設定します。数値が32ビットfloatの範囲外の場合、 &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;-Infinity&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="6b99e751f92b027a44ab3719b0e301b6ed16d648" translate="yes" xml:space="preserve">
          <source>To sum up values contained in an array of objects you &lt;strong&gt;must&lt;/strong&gt; supply an initial value so that each item passes through your function.</source>
          <target state="translated">オブジェクトの配列に含まれる値を合計するには、各項目が関数を通過するように初期値を指定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="aedd09040224912bb4fa03a83868a27bf974dd84" translate="yes" xml:space="preserve">
          <source>To sum up, the values contained in an array of objects, you &lt;strong&gt;must&lt;/strong&gt; supply an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, so that each item passes through your function.</source>
          <target state="translated">要約すると、オブジェクトの配列に含まれる値は、各アイテムが関数を通過するように、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; を指定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ff9bdaefda4afeb1b2d3c5e304f7dfdacddbf997" translate="yes" xml:space="preserve">
          <source>To test if an object is not an &lt;code&gt;instanceof&lt;/code&gt; a specific constructor, you can do</source>
          <target state="translated">オブジェクトが特定のコンストラクターの &lt;code&gt;instanceof&lt;/code&gt; はないかどうかをテストするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d113798c2a75c1ed214232bb80df9ddd29edac47" translate="yes" xml:space="preserve">
          <source>To test if an object is not an instanceof a specific Constructor, you can do</source>
          <target state="translated">オブジェクトが特定のコンストラクタのインスタンスではないかどうかをテストするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6189e37965976e54d4248b20bb1532f0b7800f11" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">プロトタイプが継承にどのように使用されるかを理解するには、ガイド記事「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;継承とプロトタイプチェーン&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0c27c1563eef054518761c7a92f5cf21d8d5ac6" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">プロトタイプが継承にどのように使用されるかを理解するには、ガイド記事の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;継承とプロトタイプチェーンを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="aae9c12807500fea71bdcc71051a39f54f1052f0" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;Array&lt;/code&gt; methods on the &lt;code&gt;arguments&lt;/code&gt; object, it must be converted to a real array first.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトで &lt;code&gt;Array&lt;/code&gt; メソッドを使用するには、最初に実際の配列に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="75f905abea55b3adbcb30a94d7249e1c63fef4e2" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;new&lt;/code&gt; with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">拡散構文を使用せずにパラメーターの配列で &lt;code&gt;new&lt;/code&gt; を使用するには、部分適用を介して&lt;strong&gt;間接&lt;/strong&gt;的に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="04a0acd17137930958c4357224572608c36ceb9a" translate="yes" xml:space="preserve">
          <source>To use new with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">構文を広げずにパラメータの配列でnewを使用するには、部分的なアプリケーションを介して&lt;strong&gt;間接的&lt;/strong&gt;に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="7274f7dbf9016c13ad74c7d68af0822075863807" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;Object.prototype.toString()&lt;/code&gt; with every object, you need to call &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; on it, passing the object you want to inspect as the first parameter (called &lt;code&gt;thisArg&lt;/code&gt;).</source>
          <target state="translated">すべてのオブジェクトで &lt;code&gt;Object.prototype.toString()&lt;/code&gt; を使用するには、そのオブジェクトで&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;を呼び出し、検査するオブジェクトを最初のパラメーター（ &lt;code&gt;thisArg&lt;/code&gt; と呼ばれる）として渡す必要があります。）。</target>
        </trans-unit>
        <trans-unit id="660ef13750fc5d9c949b57cdae0a4e8e70e15f7a" translate="yes" xml:space="preserve">
          <source>Too much recursion</source>
          <target state="translated">再帰が多すぎる</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="c2313470950f865647156a7a4a25ce3c2e83792f" translate="yes" xml:space="preserve">
          <source>Trailing ; is now optional.</source>
          <target state="translated">後続の;はオプションになりました。</target>
        </trans-unit>
        <trans-unit id="e55b06e9f89f5676c1b49a5534be9075559f2b41" translate="yes" xml:space="preserve">
          <source>Trailing comma in parameters</source>
          <target state="translated">パラメータの最後のカンマ</target>
        </trans-unit>
        <trans-unit id="7b5b3a2e5f602edd973d6bc7c27d9b7106a52ef4" translate="yes" xml:space="preserve">
          <source>Trailing commas</source>
          <target state="translated">トレイリングカンマ</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">厳格モードへの移行</target>
        </trans-unit>
        <trans-unit id="7677dc0a64e242392b7b759584fdce97846e967e" translate="yes" xml:space="preserve">
          <source>Tricky use case</source>
          <target state="translated">トリッキーな使用例</target>
        </trans-unit>
        <trans-unit id="5c4f40eb67c2580cbb047c0c2d7b18e62cfc6b44" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.</source>
          <target state="translated">文字列の先頭と末尾の空白を削除します。ECMAScript 5 標準の一部。</target>
        </trans-unit>
        <trans-unit id="589248aae63e048840e2320146a334266180f14a" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning of the string.</source>
          <target state="translated">文字列の先頭から空白を削除します。</target>
        </trans-unit>
        <trans-unit id="f98e79143326b9112cafa11878a9f99a93d9f8f4" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the end of the string.</source>
          <target state="translated">文字列の末尾から空白を削除します。</target>
        </trans-unit>
        <trans-unit id="4d46d56fedff8d9d8e85c637f94cca6486220b3d" translate="yes" xml:space="preserve">
          <source>Try it:</source>
          <target state="translated">試してみてください。</target>
        </trans-unit>
        <trans-unit id="ce521adbbb8a6a96e8c658ce0f73754df5d00657" translate="yes" xml:space="preserve">
          <source>Trying to delete a non-configurable property</source>
          <target state="translated">構成不可能なプロパティを削除しようとすると</target>
        </trans-unit>
        <trans-unit id="0bc27c8a219ca95024ca4076d021dd8abbc3f750" translate="yes" xml:space="preserve">
          <source>Trying to obtain the class of &lt;code&gt;fooInstance&lt;/code&gt; via &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; won't give us the class name at all but a reference to the static class method. Example:</source>
          <target state="translated">&lt;code&gt;fooInstance&lt;/code&gt; .constructor.nameを介して &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; クラスを取得しようとしても、クラス名はまったく得られず、静的クラスメソッドへの参照しか得られません。例：</target>
        </trans-unit>
        <trans-unit id="40cfb43d46ab09f148bea5b1d9e1aa5abb45e0bb" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;code&gt;Object.defineProperty()&lt;/code&gt; on native objects throws an error.</source>
          <target state="translated">ネイティブオブジェクトで &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用しようとすると、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="42aa153f6061661d917a475e9e234bf07b1cb4ae" translate="yes" xml:space="preserve">
          <source>Tutorial on proxies</source>
          <target state="translated">プロキシに関するチュートリアル</target>
        </trans-unit>
        <trans-unit id="f48575e167a871ba14022198cbf7f03912cfd2c1" translate="yes" xml:space="preserve">
          <source>Two Boolean operands are strictly equal if both are &lt;code&gt;true&lt;/code&gt; or both are &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">2つのブール値のオペランドは、両方が &lt;code&gt;true&lt;/code&gt; または両方が &lt;code&gt;false&lt;/code&gt; の場合、完全に等しくなります。</target>
        </trans-unit>
        <trans-unit id="87c778f38cdd455f723836213ff5541f9312375a" translate="yes" xml:space="preserve">
          <source>Two Mozilla-specific caveats: First, if your code is JavaScript 1.7 or greater (for example in chrome code or when using the right &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt;) and is strict mode code, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; have the functionality they've had since those keywords were first introduced. But strict mode code on the web, loaded with &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;, won't be able to use &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;yield&lt;/code&gt; as identifiers. Second, while ES5 unconditionally reserves the words &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;super&lt;/code&gt;, before Firefox 5 Mozilla reserved them only in strict mode.</source>
          <target state="translated">2つのMozilla固有の警告：最初に、コードがJavaScript 1.7以上（たとえば、Chromeコード内または適切な &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt; を使用している場合）で、ストリクトモードコードである場合、 &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;yield&lt;/code&gt; にはそれらの機能がありますこれらのキーワードが最初に導入されてからありました。しかし、 &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; でロードされたWeb上のストリクトモードコードは、識別子として &lt;code&gt;let&lt;/code&gt; / &lt;code&gt;yield&lt;/code&gt; を使用できません。次に、ES5は無条件に &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、 &lt;code&gt;export&lt;/code&gt; 、 &lt;code&gt;extends&lt;/code&gt; 、 &lt;code&gt;import&lt;/code&gt; 、および &lt;code&gt;super&lt;/code&gt; という単語を予約します、Firefox 5以前は、Mozillaはストリクトモードでのみそれらを予約していました。</target>
        </trans-unit>
        <trans-unit id="c90bd8efd9aba75342919e60f01051208a1b0dbe" translate="yes" xml:space="preserve">
          <source>Two digit day of the month, padded on the left a zero if necessary</source>
          <target state="translated">月の二桁の日、必要に応じて左のゼロにパディングされた</target>
        </trans-unit>
        <trans-unit id="06ba5800961ba03ca52214a88183a949ee3568cc" translate="yes" xml:space="preserve">
          <source>Two digit hour offset, e.g. &quot;14&quot;</source>
          <target state="translated">2桁の時間オフセット、例:&quot;14&quot;</target>
        </trans-unit>
        <trans-unit id="8621e04d7232cc2dc37e5b84e933ec3bc06b72e3" translate="yes" xml:space="preserve">
          <source>Two digit minute offset, e.g. &quot;00&quot;</source>
          <target state="translated">2桁の分単位のオフセット、例:&quot;00&quot;</target>
        </trans-unit>
        <trans-unit id="d96364e22c9ee0fb4977ea215560ad73a809bd3c" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 &amp;ndash; 1999</source>
          <target state="translated">2桁の年は1900年から1999年にマップされます</target>
        </trans-unit>
        <trans-unit id="dcc0b0e27681a4bfd0bb02dab459be7e1da3d54e" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 - 1999</source>
          <target state="translated">1900年から1999年までの二桁の年の地図</target>
        </trans-unit>
        <trans-unit id="bfdef2d93e0187c887de26ec520756ec15fd21f0" translate="yes" xml:space="preserve">
          <source>Two distinct objects are never equal for either strict or abstract comparisons.</source>
          <target state="translated">厳密な比較でも抽象的な比較でも、2つの異なる物体は決して等しくありません。</target>
        </trans-unit>
        <trans-unit id="f9f69cd7d34f5586d87a3b0bb756cc56e3e4faee" translate="yes" xml:space="preserve">
          <source>Two factors influenced the introduction of arrow functions: shorter functions and no existence of &lt;code&gt;this&lt;/code&gt; keyword.</source>
          <target state="translated">矢印関数の導入には2つの要素が影響しました。短い関数と &lt;code&gt;this&lt;/code&gt; キーワードが存在しないことです。</target>
        </trans-unit>
        <trans-unit id="fdb1ca806fe597861317d9dd8b9b0f4e1091e759" translate="yes" xml:space="preserve">
          <source>Two kinds of exceptions</source>
          <target state="translated">2種類の例外</target>
        </trans-unit>
        <trans-unit id="7e45222dc719a42189ddea086a477a76a9f58c58" translate="yes" xml:space="preserve">
          <source>Two numbers are strictly equal when they are numerically equal (have the same number value). &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt; is not equal to anything, including NaN. Positive and negative zeros are equal to one another.</source>
          <target state="translated">2つの数値は、数値が等しい（数値が同じ）場合、厳密に等しくなります。&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;は、NaNを含め、何にも等しくありません。正と負のゼロは互いに等しい。</target>
        </trans-unit>
        <trans-unit id="b2dfc98cea6d4f038c0adeb2a717a43bd3cbd1bd" translate="yes" xml:space="preserve">
          <source>Two other functions, &lt;code&gt;Food&lt;/code&gt; and &lt;code&gt;Toy&lt;/code&gt;, invoke &lt;code&gt;Product&lt;/code&gt;, passing &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;price&lt;/code&gt;. &lt;code&gt;Product&lt;/code&gt; initializes the properties &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;, both specialized functions define the &lt;code&gt;category&lt;/code&gt;.</source>
          <target state="translated">他の2つの関数、 &lt;code&gt;Food&lt;/code&gt; と &lt;code&gt;Toy&lt;/code&gt; は、 &lt;code&gt;Product&lt;/code&gt; を呼び出し、 &lt;code&gt;this&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;price&lt;/code&gt; を渡します。 &lt;code&gt;Product&lt;/code&gt; はプロパティ &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;price&lt;/code&gt; 初期化し、両方の特殊な関数が &lt;code&gt;category&lt;/code&gt; 定義します。</target>
        </trans-unit>
        <trans-unit id="767364ed74f9dfef1bba457b2a31bd97d28ec12b" translate="yes" xml:space="preserve">
          <source>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</source>
          <target state="translated">2つの文字列は、同じ文字列、同じ長さ、対応する位置に同じ文字がある場合に厳密に等しくなります。</target>
        </trans-unit>
        <trans-unit id="22e62aada2d2ed4e6ef25446cc5d425779700a8b" translate="yes" xml:space="preserve">
          <source>Two variables values can be swapped in one destructuring expression.</source>
          <target state="translated">1つの破壊式で2つの変数の値を入れ替えることができます。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="6d00d4d021cf7823f5159794a262002d93abec26" translate="yes" xml:space="preserve">
          <source>TypeError.prototype</source>
          <target state="translated">TypeError.prototype</target>
        </trans-unit>
        <trans-unit id="d88135ee691d49ad087f9ee359ecbe46ea9528b7" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; has no properties</source>
          <target state="translated">TypeError。&quot;x&quot; にはプロパティがありません。</target>
        </trans-unit>
        <trans-unit id="fda9971b475c2dc350019d59b66915fe2fc5f709" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is (not) &quot;y&quot;</source>
          <target state="translated">TypeError.&quot;x&quot; は (yではない)&quot;y&quot; です。</target>
        </trans-unit>
        <trans-unit id="0c6838555438ef7c5a3c7cfdcfb9cd2b062e017a" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a constructor</source>
          <target state="translated">TypeError。&quot;x&quot; はコンストラクタではありません。</target>
        </trans-unit>
        <trans-unit id="b4b3f22cfb909a7ea57fce3d810b02b8c9c4944d" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a function</source>
          <target state="translated">TypeError。&quot;x&quot; は関数ではありません</target>
        </trans-unit>
        <trans-unit id="0907c062321c618b949345d16de90e484526d617" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a non-null object</source>
          <target state="translated">TypeError。&quot;x&quot; は非 null オブジェクトではありません。</target>
        </trans-unit>
        <trans-unit id="7f1a59d8d05baff12e8984f0d4f979e255eb85be" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is read-only</source>
          <target state="translated">TypeError。&quot;x&quot; は読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="93a64ae87ca50694ea65931b825ebbc14316100d" translate="yes" xml:space="preserve">
          <source>TypeError: 'x' is not iterable</source>
          <target state="translated">TypeError:'x' は反復可能ではありません。</target>
        </trans-unit>
        <trans-unit id="eadd3f3dd3d515bc2008a8c3ecbf97e414fadd33" translate="yes" xml:space="preserve">
          <source>TypeError: More arguments needed</source>
          <target state="translated">TypeErrorを使用しています。より多くの引数が必要</target>
        </trans-unit>
        <trans-unit id="2a7a8f3a34edd73e7329425eba83dee00c2a463e" translate="yes" xml:space="preserve">
          <source>TypeError: Reduce of empty array with no initial value</source>
          <target state="translated">TypeErrorを使用しています。初期値がない空の配列のリデュース</target>
        </trans-unit>
        <trans-unit id="fc7a003e68b18bd51a0e2c7b4e9aa739a2628e68" translate="yes" xml:space="preserve">
          <source>TypeError: X.prototype.y called on incompatible type</source>
          <target state="translated">TypeError。X.prototype.y は互換性のない型で呼び出されました。</target>
        </trans-unit>
        <trans-unit id="2062e055b44d15065484da17110096e531bf60f7" translate="yes" xml:space="preserve">
          <source>TypeError: can't access dead object</source>
          <target state="translated">TypeError:デッドオブジェクトにアクセスできない</target>
        </trans-unit>
        <trans-unit id="9eadd715821193dbb59f2029ac46c9c5acb67bac" translate="yes" xml:space="preserve">
          <source>TypeError: can't access property &quot;x&quot; of &quot;y&quot;</source>
          <target state="translated">TypeError:&quot;y&quot; のプロパティ &quot;x&quot; にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="ffdc9764529529f831000de89ae3e001a2f25d64" translate="yes" xml:space="preserve">
          <source>TypeError: can't assign to property &quot;x&quot; on &quot;y&quot;: not an object</source>
          <target state="translated">TypeError:&quot;y&quot; のプロパティ &quot;x&quot; に代入できません。</target>
        </trans-unit>
        <trans-unit id="ad4dd8b46b5c3df52f2a0bc7f14317bff5729363" translate="yes" xml:space="preserve">
          <source>TypeError: can't define property &quot;x&quot;: &quot;obj&quot; is not extensible</source>
          <target state="translated">TypeError:プロパティ &quot;x&quot; を定義できません。&quot;obj&quot; は拡張可能ではありません。</target>
        </trans-unit>
        <trans-unit id="e7eda2849a3fa05ea9821acd46a58275cc93af66" translate="yes" xml:space="preserve">
          <source>TypeError: can't delete non-configurable array element</source>
          <target state="translated">TypeError:構成不可能な配列要素を削除できません。</target>
        </trans-unit>
        <trans-unit id="9d546ed256470970d571134f12c516214042a8f8" translate="yes" xml:space="preserve">
          <source>TypeError: can't redefine non-configurable property &quot;x&quot;</source>
          <target state="translated">TypeError:構成不可能なプロパティ &quot;x&quot; を再定義できません。</target>
        </trans-unit>
        <trans-unit id="0f6a8ff06a09e02690b7ab0b6f620e52b063692d" translate="yes" xml:space="preserve">
          <source>TypeError: cannot use 'in' operator to search for 'x' in 'y'</source>
          <target state="translated">TypeError:'y' 内の 'x' を検索するために 'in' オペレータを使用できません。</target>
        </trans-unit>
        <trans-unit id="ab60634a7b25184b9af6dbfe2b46a127f045f29c" translate="yes" xml:space="preserve">
          <source>TypeError: cyclic object value</source>
          <target state="translated">TypeError:サイクリックオブジェクトの値</target>
        </trans-unit>
        <trans-unit id="4c9fb78d7a67808097cba5dfefcb9df30ae2287d" translate="yes" xml:space="preserve">
          <source>TypeError: invalid 'instanceof' operand 'x'</source>
          <target state="translated">TypeError:無効な 'instanceof' オペランド 'x' です。</target>
        </trans-unit>
        <trans-unit id="804985ebf62efa82c95ca44aeb325d939fdd8196" translate="yes" xml:space="preserve">
          <source>TypeError: invalid Array.prototype.sort argument</source>
          <target state="translated">TypeError:無効な Array.prototype.sort 引数</target>
        </trans-unit>
        <trans-unit id="8bd8a78e630e8119c68b4da0cc755876148f3614" translate="yes" xml:space="preserve">
          <source>TypeError: invalid arguments</source>
          <target state="translated">TypeError:無効な引数</target>
        </trans-unit>
        <trans-unit id="da892f4d86f86bbc79faa3ccbe6da8413753b79e" translate="yes" xml:space="preserve">
          <source>TypeError: invalid assignment to const &quot;x&quot;</source>
          <target state="translated">TypeError:const &quot;x&quot; への代入が無効です。</target>
        </trans-unit>
        <trans-unit id="504d7c54e7d6b0bedf86d99552944cda9b64611d" translate="yes" xml:space="preserve">
          <source>TypeError: property &quot;x&quot; is non-configurable and can't be deleted</source>
          <target state="translated">TypeError:プロパティ &quot;x&quot; は構成不可能であり、削除できません。</target>
        </trans-unit>
        <trans-unit id="d59f59299d78a1e084bc1ab108285fbe7f7ff24a" translate="yes" xml:space="preserve">
          <source>TypeError: setting getter-only property &quot;x&quot;</source>
          <target state="translated">TypeError:ゲッター専用プロパティ &quot;x&quot; の設定</target>
        </trans-unit>
        <trans-unit id="162a63e1f2a43ab2ace2903a72b848afcab003b2" translate="yes" xml:space="preserve">
          <source>TypeError: variable &quot;x&quot; redeclares argument</source>
          <target state="translated">TypeError:変数 &quot;x&quot; は引数を再宣言します。</target>
        </trans-unit>
        <trans-unit id="8668a6f3f477fa3a4eefc9753392f294a609fc27" translate="yes" xml:space="preserve">
          <source>Typed Array Specification</source>
          <target state="translated">型付き配列仕様</target>
        </trans-unit>
        <trans-unit id="0e3ced9152ebb319d31f440c27bb52b32c3d74e3" translate="yes" xml:space="preserve">
          <source>Typed Arrays</source>
          <target state="translated">型付き配列</target>
        </trans-unit>
        <trans-unit id="c32fcb187550b7bf4d1702cf9e0d2d8aeae8400f" translate="yes" xml:space="preserve">
          <source>Typed array invalid arguments</source>
          <target state="translated">型付けされた配列の無効な引数</target>
        </trans-unit>
        <trans-unit id="831e06c03f1dd990a2ed633ba22453d03ef9310d" translate="yes" xml:space="preserve">
          <source>Typed arrays</source>
          <target state="translated">型付き配列</target>
        </trans-unit>
        <trans-unit id="5e174443616f1ab6a6488259f4a4c0962e193335" translate="yes" xml:space="preserve">
          <source>Typed arrays, for example a &lt;a href=&quot;../global_objects/uint8array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;, can't be constructed from a string. In fact, strings can't be in typed arrays at all.</source>
          <target state="translated">型付き配列（&lt;a href=&quot;../global_objects/uint8array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;など）は、文字列から作成できません。実際、文字列を型付き配列にすることはできません。</target>
        </trans-unit>
        <trans-unit id="a675e12d09245bf3e11559a6c906caf65a0c34ae" translate="yes" xml:space="preserve">
          <source>TypedArray</source>
          <target state="translated">TypedArray</target>
        </trans-unit>
        <trans-unit id="9565828e7e18feab488461ba94cc0f8b6e1c6d60" translate="yes" xml:space="preserve">
          <source>TypedArray objects</source>
          <target state="translated">TypedArray オブジェクト</target>
        </trans-unit>
        <trans-unit id="df563443a3d6070fb25ab6fc8e7e2386c0ceb9a1" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; constant contains the number of bytes each element in the given TypedArray has.</source>
          <target state="translated">TypedArrayオブジェクトは、要素ごとのバイト数とバイトの解釈方法が互いに異なります。 &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; の定数は所与TypedArrayの各要素が有するバイトの数を含んでいます。</target>
        </trans-unit>
        <trans-unit id="8308ed4a83ee6818d0174d014e66c11e46202d6a" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;name&lt;/code&gt; property describes of what data type the array consists. The first part can be &lt;code&gt;Int&lt;/code&gt; for &quot;integer&quot; or &lt;code&gt;Uint&lt;/code&gt; for an &quot;unsigned integer&quot;, also &lt;code&gt;Float&lt;/code&gt; for &quot;floating point&quot; is used. The second part is a number describing the bit-size of the array. Finally, the object type is &lt;code&gt;Array&lt;/code&gt;, with &lt;code&gt;ClampedArray&lt;/code&gt; as a special case. Please see &lt;a href=&quot;../uint8clampedarray&quot;&gt;&lt;code&gt;Uint8ClampedArray&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">TypedArrayオブジェクトは、要素ごとのバイト数とバイトの解釈方法が互いに異なります。 &lt;code&gt;name&lt;/code&gt; プロパティは、データが配列で構成されて入力する内容で説明します。最初の部分は、「整数」の場合は &lt;code&gt;Int&lt;/code&gt; 、「符号なし整数」の場合は &lt;code&gt;Uint&lt;/code&gt; にすることができ、「浮動小数点」の場合は &lt;code&gt;Float&lt;/code&gt; も使用されます。2番目の部分は、配列のビットサイズを表す数値です。最後に、オブジェクトタイプは &lt;code&gt;Array&lt;/code&gt; で、 &lt;code&gt;ClampedArray&lt;/code&gt; は特殊なケースです。詳細については、&lt;a href=&quot;../uint8clampedarray&quot;&gt; &lt;code&gt;Uint8ClampedArray&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="09d7acc3385ee25cf71171846ae0bfe859fe9a73" translate="yes" xml:space="preserve">
          <source>TypedArray prototype</source>
          <target state="translated">TypedArrayプロトタイプ</target>
        </trans-unit>
        <trans-unit id="d4ce014df3421685733cf5ffe8d38b6f3c599df4" translate="yes" xml:space="preserve">
          <source>TypedArray.@@species</source>
          <target state="translated">TypedArray.@@species</target>
        </trans-unit>
        <trans-unit id="e489cfc13d902aa038749ff4fe48077ca0a7211c" translate="yes" xml:space="preserve">
          <source>TypedArray.BYTES_PER_ELEMENT</source>
          <target state="translated">TypedArray.BYTES_PER_ELEMENT</target>
        </trans-unit>
        <trans-unit id="adf7db6dc7263fcbaca680036e73631182759551" translate="yes" xml:space="preserve">
          <source>TypedArray.from</source>
          <target state="translated">TypedArray.from</target>
        </trans-unit>
        <trans-unit id="8551dc8209fb18b38be485c43801c646aade3a70" translate="yes" xml:space="preserve">
          <source>TypedArray.name</source>
          <target state="translated">TypedArray.name</target>
        </trans-unit>
        <trans-unit id="9a0fb51cb88bee1e979510c2e27b232ed2323ee7" translate="yes" xml:space="preserve">
          <source>TypedArray.of</source>
          <target state="translated">TypedArray.of</target>
        </trans-unit>
        <trans-unit id="059f9b7c5f42d42cd8daa1d1d8596ee8f58560aa" translate="yes" xml:space="preserve">
          <source>TypedArray.prototype</source>
          <target state="translated">TypedArray.prototype</target>
        </trans-unit>
        <trans-unit id="928297cbc22683b1dcaf8e3a80b77c161ec670c5" translate="yes" xml:space="preserve">
          <source>Typical invalid assignments</source>
          <target state="translated">典型的な無効な割り当て</target>
        </trans-unit>
        <trans-unit id="b6575abbbad2379dfd5301919609cfbc4ce6b7d0" translate="yes" xml:space="preserve">
          <source>U+0009</source>
          <target state="translated">U+0009</target>
        </trans-unit>
        <trans-unit id="1f49cae739d7edd9863d8bd81c01910dbbc089fd" translate="yes" xml:space="preserve">
          <source>U+000A</source>
          <target state="translated">U+000A</target>
        </trans-unit>
        <trans-unit id="87323b9e4dc26abc74fce3bd43d832f3f2dd8b38" translate="yes" xml:space="preserve">
          <source>U+000B</source>
          <target state="translated">U+000B</target>
        </trans-unit>
        <trans-unit id="ff0ef333b5e697ca7c0c191c7f65e6b0975a9fde" translate="yes" xml:space="preserve">
          <source>U+000C</source>
          <target state="translated">U+000C</target>
        </trans-unit>
        <trans-unit id="027e1c393361cda817913c6c63c5749c1a1ebf1c" translate="yes" xml:space="preserve">
          <source>U+000D</source>
          <target state="translated">U+000D</target>
        </trans-unit>
        <trans-unit id="28871eed17ccf0d0ed7cb83461497517a2d9d4b0" translate="yes" xml:space="preserve">
          <source>U+000D &amp;lt;CR&amp;gt;,</source>
          <target state="translated">U + 000D &amp;lt;CR&amp;gt;、</target>
        </trans-unit>
        <trans-unit id="538258cce356d6acc3d1b59869631a1b26b44251" translate="yes" xml:space="preserve">
          <source>U+0020</source>
          <target state="translated">U+0020</target>
        </trans-unit>
        <trans-unit id="ac91663a7dc88186dc866819cba4ad5bba584a83" translate="yes" xml:space="preserve">
          <source>U+005C (backslash),</source>
          <target state="translated">U+005C(\(^o^)/)。</target>
        </trans-unit>
        <trans-unit id="8588a5507dea10de63bbd8777f9338ad2cd338d0" translate="yes" xml:space="preserve">
          <source>U+005C \ (backslash),</source>
          <target state="translated">U+005C \(^o^)/。</target>
        </trans-unit>
        <trans-unit id="0fec4782338f4a34ab331b24e3952b0e5cb1ad5d" translate="yes" xml:space="preserve">
          <source>U+00A0</source>
          <target state="translated">U+00A0</target>
        </trans-unit>
        <trans-unit id="18beeeef428ffc1df892b484afcdbd03b7363497" translate="yes" xml:space="preserve">
          <source>U+2028</source>
          <target state="translated">U+2028</target>
        </trans-unit>
        <trans-unit id="e3743466af5e5ae35b041ce90fbacc309905247d" translate="yes" xml:space="preserve">
          <source>U+2029</source>
          <target state="translated">U+2029</target>
        </trans-unit>
        <trans-unit id="46d53800c7cc79a0380ef914950cceb919311d12" translate="yes" xml:space="preserve">
          <source>URI encoding or decoding wasn't successful. An argument given to either the &lt;a href=&quot;../global_objects/decodeuri&quot;&gt;&lt;code&gt;decodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuri&quot;&gt;&lt;code&gt;encodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt;&lt;code&gt;decodeURIComponent&lt;/code&gt;&lt;/a&gt; function was not valid, so that the function was unable encode or decode properly.</source>
          <target state="translated">URIのエンコードまたはデコードは成功しませんでした。&lt;a href=&quot;../global_objects/decodeuri&quot;&gt; &lt;code&gt;decodeURI&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/encodeuri&quot;&gt; &lt;code&gt;encodeURI&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt; &lt;code&gt;encodeURIComponent&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt; &lt;code&gt;decodeURIComponent&lt;/code&gt; &lt;/a&gt;関数に指定された引数が無効だったため、関数は正しくエンコードまたはデコードできませんでした。</target>
        </trans-unit>
        <trans-unit id="d093bdaa782f59ac13b897f7b9054b31839f2bb9" translate="yes" xml:space="preserve">
          <source>URIError</source>
          <target state="translated">URIError</target>
        </trans-unit>
        <trans-unit id="fcd826fdce3e680ba53ae40238970f0c243a035c" translate="yes" xml:space="preserve">
          <source>URIError.prototype</source>
          <target state="translated">URIError.prototype</target>
        </trans-unit>
        <trans-unit id="24dfa6bae3df7e359ff385d1cf0198596d4240ba" translate="yes" xml:space="preserve">
          <source>URIError: malformed URI sequence</source>
          <target state="translated">URIError:不正な URI シーケンス</target>
        </trans-unit>
        <trans-unit id="bdfd4d8d6952777c39403b2d2e2f8a2a52bf255f" translate="yes" xml:space="preserve">
          <source>UTC</source>
          <target state="translated">UTC</target>
        </trans-unit>
        <trans-unit id="8b25ca8547ac04d71799be3d0a64dd85bdecc8c2" translate="yes" xml:space="preserve">
          <source>UTC)</source>
          <target state="translated">UTC)</target>
        </trans-unit>
        <trans-unit id="cfef49be4c8add6d6446b4adcc537017014f4915" translate="yes" xml:space="preserve">
          <source>UTC+3</source>
          <target state="translated">UTC+3</target>
        </trans-unit>
        <trans-unit id="fe85076f264e61cd020d0710115899e483ea0989" translate="yes" xml:space="preserve">
          <source>UTC-8</source>
          <target state="translated">UTC-8</target>
        </trans-unit>
        <trans-unit id="259c0ebc019175a9e0bd64273d4462cdb56f289e" translate="yes" xml:space="preserve">
          <source>UTF-16 code unit / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+FFFF&lt;/code&gt;</source>
          <target state="translated">UTF-16コードユニット/ &lt;code&gt;U+0000&lt;/code&gt; と &lt;code&gt;U+FFFF&lt;/code&gt; の間のUnicodeコードポイント</target>
        </trans-unit>
        <trans-unit id="d758c4107adfa362d034a7ff3fa05dfc9926675d" translate="yes" xml:space="preserve">
          <source>UTF-32 code unit / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+10FFFF&lt;/code&gt;</source>
          <target state="translated">間のUTF-32コード単位/ Unicodeコード・ポイント &lt;code&gt;U+0000&lt;/code&gt; と &lt;code&gt;U+10FFFF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff3d5b2abcbe69d249b5c141c82edeacc8a5da9a" translate="yes" xml:space="preserve">
          <source>Udacity: JavaScript Promises</source>
          <target state="translated">Udacity.JavaScriptの約束</target>
        </trans-unit>
        <trans-unit id="ee17a2d4842b1562f38fb267817829d58a3dedfb" translate="yes" xml:space="preserve">
          <source>Uint16Array</source>
          <target state="translated">Uint16Array</target>
        </trans-unit>
        <trans-unit id="c5710667eadea14743f763131bdbd164d4d4297f" translate="yes" xml:space="preserve">
          <source>Uint16Array.length</source>
          <target state="translated">Uint16Array.length</target>
        </trans-unit>
        <trans-unit id="633c2aa79d88322b5d53222bfe0bb765531ece57" translate="yes" xml:space="preserve">
          <source>Uint32Array</source>
          <target state="translated">Uint32Array</target>
        </trans-unit>
        <trans-unit id="9a32be0557e5b962a300fae5eae084606cc75c5b" translate="yes" xml:space="preserve">
          <source>Uint32Array.length</source>
          <target state="translated">Uint32Array.length</target>
        </trans-unit>
        <trans-unit id="9dafd0a91ea1eadf5a4b323d71716a37f430543c" translate="yes" xml:space="preserve">
          <source>Uint8Array</source>
          <target state="translated">Uint8Array</target>
        </trans-unit>
        <trans-unit id="ad6c3f16d622ed3c29d4d93a881fdbf40e238c0f" translate="yes" xml:space="preserve">
          <source>Uint8Array.length</source>
          <target state="translated">Uint8Array.length</target>
        </trans-unit>
        <trans-unit id="80d3d1902630c787d741b39af0ddaba8dab6c5b7" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray</source>
          <target state="translated">Uint8ClampedArray</target>
        </trans-unit>
        <trans-unit id="3a7bddb5e24e03c48a5b389efa8055d3f2f596c5" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray.length</source>
          <target state="translated">Uint8ClampedArray.length</target>
        </trans-unit>
        <trans-unit id="bb9756e2dd53d8b412b093978529a20e6d87e501" translate="yes" xml:space="preserve">
          <source>Unary Negation</source>
          <target state="translated">単項否定</target>
        </trans-unit>
        <trans-unit id="d2cedd82f30bde7abbd2d251adf7228473d72aed" translate="yes" xml:space="preserve">
          <source>Unary Plus</source>
          <target state="translated">ユニラリープラス</target>
        </trans-unit>
        <trans-unit id="513b253806a1a356b911c79a51a7bafa6bc52f0a" translate="yes" xml:space="preserve">
          <source>Unary negation (-)</source>
          <target state="translated">単項否定(-)</target>
        </trans-unit>
        <trans-unit id="befe22eda70bd6b5e1a787a97596068e0774676c" translate="yes" xml:space="preserve">
          <source>Unary negation (&lt;code&gt;-&lt;/code&gt;)</source>
          <target state="translated">単項否定（ &lt;code&gt;-&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ca09f5dbf89ea3eafb5ab27f217efe0b06a097c4" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
          <target state="translated">単項演算子</target>
        </trans-unit>
        <trans-unit id="abac30e3a2acb94fc462772b11ad68a9aa79c850" translate="yes" xml:space="preserve">
          <source>Unary plus (+)</source>
          <target state="translated">単項プラス(+)</target>
        </trans-unit>
        <trans-unit id="6bddeb4ef451282ac6aa78a777db40cd95d2a793" translate="yes" xml:space="preserve">
          <source>Unary plus (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">単項プラス（ &lt;code&gt;+&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2ae6cd0092c46d08603bf82278684279219f6c3a" translate="yes" xml:space="preserve">
          <source>Unconditional &lt;code&gt;catch&lt;/code&gt; clause</source>
          <target state="translated">無条件の &lt;code&gt;catch&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="cf180ccf6ec4ce4f39c2feff2a257878d4d851c6" translate="yes" xml:space="preserve">
          <source>Unconditional catch-block</source>
          <target state="translated">無条件キャッチブロック</target>
        </trans-unit>
        <trans-unit id="5140ee34748e590252ad94ce595eb05fc7886054" translate="yes" xml:space="preserve">
          <source>Undeclared var</source>
          <target state="translated">未定義の var</target>
        </trans-unit>
        <trans-unit id="0646f4afd90c8fdb87bbcb57b63ee1911f5a9a46" translate="yes" xml:space="preserve">
          <source>Undefined</source>
          <target state="translated">Undefined</target>
        </trans-unit>
        <trans-unit id="fb9dc4c2e3785b2c955042e52cbcc556d0858881" translate="yes" xml:space="preserve">
          <source>Undefined prop</source>
          <target state="translated">未定義の支柱</target>
        </trans-unit>
        <trans-unit id="3fec4e60edf8ef578608ef502f4b2bacf3d7f069" translate="yes" xml:space="preserve">
          <source>Unescaped strings</source>
          <target state="translated">非エスケープされていない文字列</target>
        </trans-unit>
        <trans-unit id="9fea685493a4859bb8dc7e48575411686bbd53e5" translate="yes" xml:space="preserve">
          <source>Unexpected token</source>
          <target state="translated">予期せぬトークン</target>
        </trans-unit>
        <trans-unit id="74dc936b263127fe4e9c42a9713ee6214e5bfcfe" translate="yes" xml:space="preserve">
          <source>Unexpected type</source>
          <target state="translated">意外なタイプ</target>
        </trans-unit>
        <trans-unit id="3aa854c653b7eb660e3b2a7248d1ad77d3b5c56a" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;next()&lt;/code&gt; is asymmetric, but that can&amp;rsquo;t be helped: It always sends a value to the currently suspended &lt;code&gt;yield&lt;/code&gt;, but returns the operand of the following &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">残念ながら、 &lt;code&gt;next()&lt;/code&gt; は非対称ですが、それは仕方がありません。常に現在中断されている &lt;code&gt;yield&lt;/code&gt; に値を送信しますが、次の &lt;code&gt;yield&lt;/code&gt; のオペランドを返します。</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="5a088d8dac52305ddd74345a8b035629f9284105" translate="yes" xml:space="preserve">
          <source>Unicode Standard Annex #15, Unicode Normalization Forms</source>
          <target state="translated">Unicode 標準付属書#15、Unicode 正規化フォーム</target>
        </trans-unit>
        <trans-unit id="48c01f8059a880d3490d40f931d17143df746745" translate="yes" xml:space="preserve">
          <source>Unicode assigns a unique numerical value, called a &lt;em&gt;code point&lt;/em&gt;, to each character. For example, the code point for &lt;code&gt;&quot;A&quot;&lt;/code&gt; is given as U+0041. However, sometimes more than one code point, or sequence of code points, can represent the same abstract character &amp;mdash; the character &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; for example can be represented by either of:</source>
          <target state="translated">Unicodeは、&lt;em&gt;コードポイント&lt;/em&gt;と呼ばれる一意の数値を各文字に割り当てます。たとえば、 &lt;code&gt;&quot;A&quot;&lt;/code&gt; コードポイントはU +0041として与えられます。ただし、複数のコードポイントまたはコードポイントのシーケンスが同じ抽象文字を表す場合があります。たとえば、文字 &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; は次のいずれかで表すことができます。</target>
        </trans-unit>
        <trans-unit id="f9c11da5db018877d7b5c0c5897bd818df342deb" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes</source>
          <target state="translated">Unicode ポイントコードのエスケープ</target>
        </trans-unit>
        <trans-unit id="53798ed42b9b310fc8897a38bd9f5a8ec102f8a2" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes \u{xxxxxx}</source>
          <target state="translated">Unicodeポイントコードエスケープ ΜΜετετεώγραμμαμαώγραμαμαμα</target>
        </trans-unit>
        <trans-unit id="ab691dc2f55ca32e25cc09e838e42a2db66ff157" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;&lt;code&gt;\u{}&lt;/code&gt;&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">「 &lt;code&gt;\u{}&lt;/code&gt; 」で示されるUnicodeコードポイントエスケープ（例： &lt;code&gt;\u{2F804}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2520911378d53256963efaa10beebc649575df9" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;\u{}&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">「\ u {}」で示されるUnicodeコードポイントエスケープ、たとえば &lt;code&gt;\u{2F804}&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
