<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="e410f550731be85f946b7f2f4aed03a005c57a1c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">場合 &lt;code&gt;length&lt;/code&gt; 省略され、 &lt;code&gt;substr()&lt;/code&gt; 文字列の末尾に文字を抽出します。</target>
        </trans-unit>
        <trans-unit id="a34d5712abc36aaa2eaef3f633100f03db354c27" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maximum&lt;/code&gt; is specified and is smaller than &lt;code&gt;initial&lt;/code&gt;, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">場合は &lt;code&gt;maximum&lt;/code&gt; 指定され、より小さくなっている &lt;code&gt;initial&lt;/code&gt; 、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="c0f0bc257bf3b949201321dcae7fcebf0bb14339" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;memoryDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;memoryDescriptor&lt;/code&gt; がオブジェクト型ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="73a182f41773189b8cfdf256c034f5a1d80c29e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;module&lt;/code&gt; is not a &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object instance, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; が&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;オブジェクトのインスタンスでない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="ae5c7ddce76e5aae957eb4fa1138ed2f02a10861" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;onFulfilled&lt;/code&gt; returns a promise, the return value of &lt;code&gt;then&lt;/code&gt; will be resolved/rejected by the promise.</source>
          <target state="translated">場合 &lt;code&gt;onFulfilled&lt;/code&gt; は約束を返す、の戻り値 &lt;code&gt;then&lt;/code&gt; /解決の約束によって拒否されます。</target>
        </trans-unit>
        <trans-unit id="2f2728a4f70add9e2f77317adda6b2ef26418eaa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseFloat&lt;/code&gt; encounters a character other than a plus sign (&lt;code&gt;+&lt;/code&gt;), minus sign (&lt;code&gt;-&lt;/code&gt; U+002D HYPHEN-MINUS), numeral (&lt;code&gt;0&lt;/code&gt;&amp;ndash;&lt;code&gt;9&lt;/code&gt;), decimal point (&lt;code&gt;.&lt;/code&gt;), or exponent (&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;), it returns the value up to that character, ignoring the invalid character and characters following it.</source>
          <target state="translated">場合 &lt;code&gt;parseFloat&lt;/code&gt; ははプラス記号（以外の文字に遭遇 &lt;code&gt;+&lt;/code&gt; （）、マイナス記号 &lt;code&gt;-&lt;/code&gt; U + 002D HYPHEN-MINUS）、数字（ &lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt; ）（小数点 &lt;code&gt;.&lt;/code&gt; ）、又は指数（ &lt;code&gt;e&lt;/code&gt; 又は &lt;code&gt;E&lt;/code&gt; に）、それが返さ無効な文字とそれに続く文字を無視して、その文字までの値。</target>
        </trans-unit>
        <trans-unit id="83728eb0d2a9e584dc04b1ee5d31294530473376" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified &lt;code&gt;radix&lt;/code&gt;, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.</source>
          <target state="translated">場合 &lt;code&gt;parseInt&lt;/code&gt; 、指定中の数字ではない文字に遭遇 &lt;code&gt;radix&lt;/code&gt; 、それを無視し、すべての後続の文字と戻って整数値は、その時点までに解析されました。 &lt;code&gt;parseInt&lt;/code&gt; は、数値を整数値に切り捨てます。先頭と末尾のスペースは許可されます。</target>
        </trans-unit>
        <trans-unit id="8ead9333b62110d8b1b732ad127cf111fdc2eaf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.</source>
          <target state="translated">場合 &lt;code&gt;parseInt&lt;/code&gt; 指定された基数での数字ではない文字に遭遇し、それを無視し、すべての後続の文字と戻って整数値は、その時点までに解析されました。 &lt;code&gt;parseInt&lt;/code&gt; は数値を整数値に切り捨てます。先頭と末尾のスペースを使用できます。</target>
        </trans-unit>
        <trans-unit id="5ffbeddf0bcd7aec9bc1eee89d991e6401f78d4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;precision&lt;/code&gt; is not between 1 and 100 (inclusive), a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; が1〜100（両端を含む）の間でない場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。実装では、より大きな値とより小さな値もサポートできます。ECMA-262は、最大21桁の有効桁数しか必要としません。</target>
        </trans-unit>
        <trans-unit id="46150c365467758d22f0868ddafd9b7825000fcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;precision&lt;/code&gt; is not between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; (inclusive), a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;100&lt;/code&gt; （両端を含む）の間にない場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。実装は、より大きな値とより小さな値もサポートできます。ECMA-262は、最大21桁の有効数字の精度のみを必要とします。</target>
        </trans-unit>
        <trans-unit id="9a5460969a95744dffb5bbddf36d4bfb1069be0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;proto&lt;/code&gt; is neither of these a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; がこれらのどちらでもない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="33c87e445a7edd2b640f50dae6ac2b0133882f41" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;replacer&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</source>
          <target state="translated">場合 &lt;code&gt;replacer&lt;/code&gt; 配列であり、配列の値が得られたJSON文字列に含まれるべきであるオブジェクトのプロパティの名前を示します。</target>
        </trans-unit>
        <trans-unit id="3c3a227a6da9d264dbe28f5f791a62dedb0625b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return(&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; is called on a generator that is already in &quot;completed&quot; state, the generator will remain in &quot;completed&quot; state.</source>
          <target state="translated">場合は &lt;code&gt;return(&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; 「完了」状態に既にある発電機で呼び出され、発電機は、「完了」状態のままになります。</target>
        </trans-unit>
        <trans-unit id="87bf4b6e3dc943f062b1864ad40de7d0964087f1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return(value)&lt;/code&gt; is called on a generator that is already in &quot;completed&quot; state, the generator will remain in &quot;completed&quot; state. If no argument is provided, the return object is the same as if &lt;code&gt;.next()&lt;/code&gt;. If an argument is provided, it will be set to the value of the &lt;code&gt;value&lt;/code&gt; property of the returned object.</source>
          <target state="translated">場合は &lt;code&gt;return(value)&lt;/code&gt; 、「完了」状態に既にある発電機で呼び出され、発電機は、「完了」状態のままになります。引数を指定しない場合、戻りオブジェクトは &lt;code&gt;.next()&lt;/code&gt; の場合と同じです。引数を指定すると、返されたオブジェクトの &lt;code&gt;value&lt;/code&gt; プロパティの値に設定されます。</target>
        </trans-unit>
        <trans-unit id="cc1bfe2351b82485683c733bf222344eda1527d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;separator&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, matched results are included in the array.</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt; がキャプチャ括弧 &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; を含む正規表現である場合、一致した結果が配列に含まれます。</target>
        </trans-unit>
        <trans-unit id="d1eff576ddb621e4680b204ed4d5b41859eeef85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;separator&lt;/code&gt; is a regular expression that contains capturing parentheses, then each time &lt;code&gt;separator&lt;/code&gt; is matched, the results (including any undefined results) of the capturing parentheses are spliced into the output array.</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt; がキャプチャ括弧を含む正規表現である場合、 &lt;code&gt;separator&lt;/code&gt; が一致するたびに、キャプチャ括弧の結果（未定義の結果を含む）が出力配列にスプライスされます。</target>
        </trans-unit>
        <trans-unit id="58a1c53b01b40592a9c84549b9f166da18ea38eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-str.length&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;start&lt;/code&gt; が負の数で、インデックスは、文字列の末尾からカウントを開始します。その値の上限は &lt;code&gt;-str.length&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c54578109a534f15d42b5a741a3d3d14d8a65f39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;str.length&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;start&lt;/code&gt; が正の数で、インデックスは、文字列の先頭でカウントを開始します。その値の上限は &lt;code&gt;str.length&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ca01d0a0b0471740d571f8985792b98bb6955453" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is negative, it is treated as &lt;code&gt;array.length + start&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; が負の場合、 &lt;code&gt;array.length + start&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="a731fd434daa5cb19e9e29afc38306b20ebfb1ef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is negative, it is treated as &lt;code&gt;length+start&lt;/code&gt; where &lt;code&gt;length&lt;/code&gt; is the length of the array. If &lt;code&gt;end&lt;/code&gt; is negative, it is treated as &lt;code&gt;length+end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; が負の場合、 &lt;code&gt;length+start&lt;/code&gt; として扱われます。ここで、 &lt;code&gt;length&lt;/code&gt; は配列の長さです。 &lt;code&gt;end&lt;/code&gt; が負の場合、それは &lt;code&gt;length+end&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="4de0599f1ce5809ec70b824f6abdd7e50e9e2834" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;start&lt;/code&gt; 省略され、 &lt;code&gt;copyWithin&lt;/code&gt; がインデックスからコピーされます &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ebf5416996cbb15b5dc86c882e373b81b313cbcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy from the start (defaults to 0).</source>
          <target state="translated">場合は &lt;code&gt;start&lt;/code&gt; 省略され、 &lt;code&gt;copyWithin&lt;/code&gt; がスタート（0デフォルト）からコピーされます。</target>
        </trans-unit>
        <trans-unit id="779eb5bbe71bf9f737544ad79ab2ebdb40b507a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;tableDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;tableDescriptor&lt;/code&gt; がオブジェクト型ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="e03af582a3944b0e649958576a4fa9f071ece201" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is at or greater than &lt;code&gt;arr.length&lt;/code&gt;, nothing will be copied. If &lt;code&gt;target&lt;/code&gt; is positioned after &lt;code&gt;start&lt;/code&gt;, the copied sequence will be trimmed to fit &lt;code&gt;arr.length&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;target&lt;/code&gt; であるか、より大きい &lt;code&gt;arr.length&lt;/code&gt; 、何もコピーされません。 &lt;code&gt;target&lt;/code&gt; が &lt;code&gt;start&lt;/code&gt; 後に配置された場合、コピーされたシーケンスは &lt;code&gt;arr.length&lt;/code&gt; に合うようにトリミングされます。</target>
        </trans-unit>
        <trans-unit id="6a0d8e33e57948f6db6a21fc620101b71b816549" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, &lt;code&gt;Object.getPrototypeOf(proxy)&lt;/code&gt; method must return the same value as &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; が拡張可能でない場合、 &lt;code&gt;Object.getPrototypeOf(proxy)&lt;/code&gt; メソッドは &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt; と同じ値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="d26238ec78eee84e2aeb55c52477788256e17a5e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, the &lt;code&gt;prototype&lt;/code&gt; parameter must be the same value as &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; が拡張可能でない場合、 &lt;code&gt;prototype&lt;/code&gt; パラメータは &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt; と同じ値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="984a9eed37b95f2c80689bed658a7a680c02c700" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;this&lt;/code&gt; is a mystery, please refer to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this document&lt;/a&gt; for more information on how &lt;code&gt;this&lt;/code&gt; works. To summarize, &lt;code&gt;this&lt;/code&gt; refers to the instance. Instances are created when the &lt;code&gt;new&lt;/code&gt; keyword is invoked. Otherwise, &lt;code&gt;this&lt;/code&gt; will default to the window &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;this&lt;/code&gt; 謎である、を参照してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;このドキュメント&lt;/a&gt;方法の詳細については、 &lt;code&gt;this&lt;/code&gt; 動作します。要約すると、 &lt;code&gt;this&lt;/code&gt; はインスタンスを指します。インスタンスは、 &lt;code&gt;new&lt;/code&gt; キーワードが呼び出されたときに作成されます。それ以外の場合、 &lt;code&gt;this&lt;/code&gt; はデフォルトでウィンドウ&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;スコープ&lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="c19cd77cae60ad00d362fc1024e84e33d0571105" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;three&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, nothing will happen, &lt;code&gt;four&lt;/code&gt; does not matter, and also the &lt;code&gt;launchRocket()&lt;/code&gt; function in the &lt;code&gt;else&lt;/code&gt; case will not be executed.</source>
          <target state="translated">場合は &lt;code&gt;three&lt;/code&gt; あり &lt;code&gt;true&lt;/code&gt; 、何も、起こりません &lt;code&gt;four&lt;/code&gt; 問題ではない、とも &lt;code&gt;launchRocket()&lt;/code&gt; 関数 &lt;code&gt;else&lt;/code&gt; 場合は実行されません。</target>
        </trans-unit>
        <trans-unit id="3eef6456246e4dbfc287e8737faddd2509501cbb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;toString()&lt;/code&gt; is given a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; less than &lt;code&gt;2&lt;/code&gt; or greater than &lt;code&gt;36&lt;/code&gt;, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; に &lt;code&gt;2&lt;/code&gt; 未満または &lt;code&gt;36&lt;/code&gt; を超える &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; が指定されている場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="6c379906b5792e3372d4efc200a114b3805195e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;toString()&lt;/code&gt; is given a radix less than 2 or greater than 36, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; に 2未満または36より大きい基数が指定されている場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="ed0a1bf3b0563282d5e450783f1851ac37bf1a0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が数値でない場合は、最初に数値に変換され、次に32ビットの符号なし整数に変換されます。</target>
        </trans-unit>
        <trans-unit id="e2747de4d9fc8c30f2b40be49e35fdbf847eb82f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;index&lt;/em&gt; is greater than or equal to &lt;a href=&quot;length&quot;&gt;&lt;code&gt;Table.prototype.length&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;em&gt;index&lt;/em&gt;が&lt;a href=&quot;length&quot;&gt; &lt;code&gt;Table.prototype.length&lt;/code&gt; &lt;/a&gt;以上の場合、&lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="3c1e63156a59a69e643e2a9b0e2e65948c77850e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;value&lt;/em&gt; is not an exported WebAssembly function or &lt;code&gt;&lt;a href=&quot;../../null&quot;&gt;null&lt;/a&gt;&lt;/code&gt;, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;がエクスポートされたWebAssembly関数または &lt;code&gt;&lt;a href=&quot;../../null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; でない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="d1f4c5491a947837a75b2577ec9165501da34cd8" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;radix&lt;/var&gt; is &lt;code&gt;undefined&lt;/code&gt; or 0 (or absent), JavaScript assumes the following:</source>
          <target state="translated">場合は &lt;var&gt;radix&lt;/var&gt; されて &lt;code&gt;undefined&lt;/code&gt; または0（または不在）、JavaScriptは次のことを前提としています。</target>
        </trans-unit>
        <trans-unit id="bed881bbe4332a3924a8e5000bd3b3ce26c729d3" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; is used a function name and the symbol has a description, the method's name is the description in square brackets.</source>
          <target state="translated">場合&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;関数名を使用していると、シンボルが記述されている、メソッドの名前は角括弧内の説明があります。</target>
        </trans-unit>
        <trans-unit id="6c5ecf5b73187ab3241c34814c90ceb806d68640" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; is specified, the value computed by parsing is &lt;em&gt;transformed&lt;/em&gt; before being returned. Specifically, the computed value and all its properties (beginning with the most nested properties and proceeding to the original value itself) are individually run through the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt;. Then it is called, with the object containing the property being processed as &lt;code&gt;this&lt;/code&gt;, and with the property name as a string, and the property value as arguments. If the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; function returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (or returns no value, for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; が指定されている場合、解析によって計算された値は、返される前に&lt;em&gt;変換&lt;/em&gt;されます。具体的には、計算された値とそのすべてのプロパティ（最もネストされたプロパティから始まり、元の値自体に進む）は、 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 介して個別に実行されます。次に、 &lt;code&gt;this&lt;/code&gt; ように処理されているプロパティを含むオブジェクト、文字列としてのプロパティ名、および引数としてのプロパティ値を使用して呼び出されます。 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 関数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; を&lt;/a&gt;返す場合（または、実行が関数の終わりから外れた場合など、値を返さない場合）、プロパティはオブジェクトから削除されます。それ以外の場合、プロパティは戻り値になるように再定義されます。</target>
        </trans-unit>
        <trans-unit id="c53eaa65f5d849d2ba7af580ec11f6071fb51361" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is passed to &lt;code&gt;findIndex()&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; inside each invocation of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">A場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメータが渡される &lt;code&gt;findIndex()&lt;/code&gt; 、それはとして使用される &lt;code&gt;this&lt;/code&gt; の各呼び出し内部 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 。提供されていない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="4b3191155df0440c882d493d118c3dac1f4c66d1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメータがに提供される &lt;code&gt;every&lt;/code&gt; 、それはコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f498864454499bf2fa726743bb2df845d90f352" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;filter&lt;/code&gt; に提供されている場合、それはコールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d22cacfb6b4ad93d1afb332b58bc2b8b9e92dbe4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;find&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; value inside each invocation of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; のパラメータをするために設けられている &lt;code&gt;find&lt;/code&gt; 、それは次のように使用される &lt;code&gt;this&lt;/code&gt; の各呼び出し内部値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 。提供されていない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="09097dc35d89b7d28dbca20d40abc8970c3cab00" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;forEach()&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76ab4918e0c8bd05f962be5b62c98b05000b19de" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;forEach()&lt;/code&gt; に提供されている場合、それはコールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; することにより、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ead08dc3ec7c47ac1db79cebb6c9921620ff42a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;forEach&lt;/code&gt; に指定されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa8f21a8595a09932fdcda7eaee1666d3af2bf6a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;map()&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;map()&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; は、に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ad3e1dc3914885dba756cd8beedafc58dbd95b7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;some()&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;some()&lt;/code&gt; に提供されている場合、それはコールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2836faa89237b75d06562d178e0d8e7b62b20e4a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Promise&lt;/code&gt; is passed to an &lt;code&gt;await&lt;/code&gt; expression, it waits for the &lt;code&gt;Promise&lt;/code&gt; to be fulfilled and returns the fulfilled value.</source>
          <target state="translated">場合 &lt;code&gt;Promise&lt;/code&gt; 渡される &lt;code&gt;await&lt;/code&gt; 式、それが待つ &lt;code&gt;Promise&lt;/code&gt; 成就すると満たされた値を返します。</target>
        </trans-unit>
        <trans-unit id="2f0cd65c256b789ded1c56afc95a831c106e6d12" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;reviver&lt;/code&gt; is specified, the value computed by parsing is &lt;em&gt;transformed&lt;/em&gt; before being returned. Specifically, the computed value and all its properties (beginning with the most nested properties and proceeding to the original value itself) are individually run through the &lt;code&gt;reviver&lt;/code&gt;. Then it is called, with the object containing the property being processed as &lt;code&gt;this&lt;/code&gt;, and with the property name as a string, and the property value as arguments. If the &lt;code&gt;reviver&lt;/code&gt; function returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (or returns no value, for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value.</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt; が指定されている場合、解析によって計算された値は返される前に&lt;em&gt;変換&lt;/em&gt;されます。具体的には、計算された値とそのすべてのプロパティ（最もネストされたプロパティから始まり、元の値自体に進む）は、個別に &lt;code&gt;reviver&lt;/code&gt; を介して実行されます。次に、処理されるプロパティを含むオブジェクトが &lt;code&gt;this&lt;/code&gt; として、プロパティ名が文字列として、プロパティ値が引数として呼び出されます。 &lt;code&gt;reviver&lt;/code&gt; 関数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;返す場合（または、実行が関数の最後から落ちる場合など、値を返さない場合）、プロパティはオブジェクトから削除されます。それ以外の場合、プロパティは戻り値になるように再定義されます。</target>
        </trans-unit>
        <trans-unit id="f242b5dc288eac0b5d0ce91ad4f100013514504d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is passed to &lt;code&gt;findIndex&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; inside each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;findIndex&lt;/code&gt; に渡された場合、 &lt;code&gt;callback&lt;/code&gt; 各呼び出しの中で &lt;code&gt;this&lt;/code&gt; として使用されます。指定しない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="c6932692e1d4fb28b8121dffe2f3e2d0eb25fc31" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供され &lt;code&gt;every&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c67511fcd2a06b290b63f0afdae294248024ceaa" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメーターが &lt;code&gt;every&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;callback&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="03473c038dbaa94c0f2f584238f87bb0a1c995c4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供される &lt;code&gt;every&lt;/code&gt; 、それはコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e885503fc50fcf3433a76da451d3a39bdb27787" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され &lt;code&gt;filter&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74757f9a027a1bd668415335ce369872b5c572ad" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され &lt;code&gt;filter&lt;/code&gt; 、それはコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf9143a7a8700db09906f59debf6818c19eb9dde" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;find&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; のパラメータをするために提供されて &lt;code&gt;find&lt;/code&gt; 、それは次のように使用される &lt;code&gt;this&lt;/code&gt; の各呼び出しのため &lt;code&gt;callback&lt;/code&gt; 。指定しない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="eb1fb27d6a8d4daf130eff947e69b141ae7f6214" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;findIndex&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; のパラメータが提供される &lt;code&gt;findIndex&lt;/code&gt; 、それは次のように使用される &lt;code&gt;this&lt;/code&gt; の各呼び出しのための &lt;code&gt;callback&lt;/code&gt; 。指定しない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="9bf571e8c9fd950c0cba47616f69e3244e8ac908" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供され &lt;code&gt;forEach()&lt;/code&gt; 、ために渡されます &lt;code&gt;callback&lt;/code&gt; そのとして使用するために、呼び出されたときに &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dadf3c2d4b8690337dfbe93c3a13c6ba5122a763" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供され &lt;code&gt;forEach()&lt;/code&gt; 、ために渡されます &lt;code&gt;callback&lt;/code&gt; そのとして使用するために、呼び出されたときに &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff6f3b4478f7d568a6bd567df8cf574b18334edf" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;forEach()&lt;/code&gt; に提供されている場合、コールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b270f7b4f88096d2dc8decbc2a68475af4db9b54" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供されて &lt;code&gt;forEach&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2c264894e88d2165b79806c0e46c3a7c2ac7698" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータをするために提供される &lt;code&gt;map&lt;/code&gt; は、に渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="abc6187e52a5196ebde638cf0d74059344cc96a3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;map&lt;/code&gt; に提供されている場合、コールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cfcc5144fcb480f5a9615bf35d8d640124ed689e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some()&lt;/code&gt;, it will be used as callbacks' &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;some()&lt;/code&gt; に提供されている場合、コールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c67518b6a0defe9f309867be0175b853cf5c13a8" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され &lt;code&gt;some&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9064bb0e6133b19da0f634085d617942132a380b" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメーターが &lt;code&gt;some&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;callback&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bda7ab606ed3004f2ea85c74dca1da94e54a790" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され、それがコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b15cc313fa96f0002ca8177237c5a6a7eaf8200b" translate="yes" xml:space="preserve">
          <source>If a browser doesn't support the &lt;code&gt;TypedArray.prototype.toString()&lt;/code&gt; method yet, JavaScript will call the &lt;code&gt;toString&lt;/code&gt; method of &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ブラウザが &lt;code&gt;TypedArray.prototype.toString()&lt;/code&gt; メソッドをまだサポートしていない場合、JavaScriptは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;toString&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="2d6530ce720bdee0f80c81e26f6ecfbd283b444c" translate="yes" xml:space="preserve">
          <source>If a descriptor has neither of &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keys, it is treated as a data descriptor. If a descriptor has both &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; keys, an exception is thrown.</source>
          <target state="translated">記述子に &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;writable&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; キーのいずれもない場合、それはデータ記述子として扱われます。記述子に &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;writable&lt;/code&gt; と &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; キーの両方がある場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="2c34c6a69dfdce3e819260be6a04cfda0fbf1dc6" translate="yes" xml:space="preserve">
          <source>If a descriptor has neither of &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keys, it is treated as a data descriptor. If a descriptor has both [&lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt;] and [&lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;] keys, an exception is thrown.</source>
          <target state="translated">記述子に &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;writable&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; のいずれのキーもない場合、データ記述子として扱われます。記述子は[両方持っている場合は &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;writable&lt;/code&gt; ]および[ &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; ]キーを、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="8e83c8dedbe6c06d159a3f6dfaa971e14e68ad6d" translate="yes" xml:space="preserve">
          <source>If a function, this prescribes how the value originally produced by parsing is transformed, before being returned.</source>
          <target state="translated">関数の場合は、パースによって生成された値がどのように変換されてから返されるかを規定します。</target>
        </trans-unit>
        <trans-unit id="391bf4a33b8c432c6b93a5a5e69abe068858d3be" translate="yes" xml:space="preserve">
          <source>If a negative number is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt;, the date will be set counting backwards from the last day of the previous month. -1 would result in the date being set to 1 day before the last day of the previous month.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; に負の数を指定すると、前月の最終日から逆算して日付が設定されます。-1の場合、日付は前月の最終日の1日前に設定されます。</target>
        </trans-unit>
        <trans-unit id="676a3f09e860cb1fdd6b7c64da13dd48930a4a79" translate="yes" xml:space="preserve">
          <source>If a new element is added to either array, the other array is not affected.</source>
          <target state="translated">どちらかの配列に新しい要素が追加されても、もう一方の配列は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="be4193e9e29d983836aef2375c967598b0df9279" translate="yes" xml:space="preserve">
          <source>If a new element is added to either typed array, the other typed array is not affected.</source>
          <target state="translated">どちらかの型付き配列に新しい要素が追加されても、もう一方の型付き配列は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="be50878ec0b2563ddd3389f7eebc5e92b8258b9c" translate="yes" xml:space="preserve">
          <source>If a non-RegExp object &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">非RegExpオブジェクトの &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; が渡されると、 &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;regexp&lt;/var&gt; ）を使用して暗黙的に&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; に&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="281423783d855ddb3f0a19f8508114c22a018543" translate="yes" xml:space="preserve">
          <source>If a non-strict function &lt;strong&gt;&lt;strong&gt;does &lt;/strong&gt;not&lt;/strong&gt; contain rest, default, or destructured parameters, then the values in the &lt;code&gt;arguments&lt;/code&gt; object &lt;strong&gt;do&lt;/strong&gt; change in sync with the values of the argument variables. See the code below:</source>
          <target state="translated">非厳格な関数が場合&lt;strong&gt;&lt;strong&gt;ない&lt;/strong&gt;ない&lt;/strong&gt;残り、デフォルト、または破壊さパラメータが含まれ、その後の値 &lt;code&gt;arguments&lt;/code&gt; オブジェクト&lt;strong&gt;行う&lt;/strong&gt;引数の変数の値に同期して変化します。以下のコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="25fb90bb85af1ebb4d9188ee2fd33dfe9e1c2f50" translate="yes" xml:space="preserve">
          <source>If a nonempty &lt;em&gt;iterable&lt;/em&gt; is passed, and &lt;strong&gt;all&lt;/strong&gt; of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.</source>
          <target state="translated">空でない&lt;em&gt;iterable&lt;/em&gt;が渡され、&lt;strong&gt;すべて&lt;/strong&gt;のPromiseが満たされるか、Promiseでない場合、このメソッドによって返されるPromiseは非同期で実行されます。</target>
        </trans-unit>
        <trans-unit id="d069c32d6d18bca5b8bc39c5dc8fb8c3caa232ba" translate="yes" xml:space="preserve">
          <source>If a number has more digits than requested by the &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; parameter, the number is rounded to the nearest number represented by &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toExponential()&lt;/code&gt;.</source>
          <target state="translated">数値の桁数が &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; パラメーターで要求された数より多い場合、その数値は、 &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 桁で表される最も近い数値に丸められます。説明に丸めの議論を参照&lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;/a&gt;も適用方法、 &lt;code&gt;toExponential()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ea7ce40a49626eb3ae67d76fb0cb47271742b47" translate="yes" xml:space="preserve">
          <source>If a number has more digits than requested by the &lt;code&gt;fractionDigits&lt;/code&gt; parameter, the number is rounded to the nearest number represented by &lt;code&gt;fractionDigits&lt;/code&gt; digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toExponential()&lt;/code&gt;.</source>
          <target state="translated">数値に、 &lt;code&gt;fractionDigits&lt;/code&gt; パラメーターで要求されたよりも多くの桁がある場合、その数値は、 &lt;code&gt;fractionDigits&lt;/code&gt; 桁で表される最も近い数値に丸められます。説明に丸めの議論を参照&lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;/a&gt;も適用方法、 &lt;code&gt;toExponential()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="288361a178a4532457b48ca23e1080ecff1e23e8" translate="yes" xml:space="preserve">
          <source>If a parameter is outside of the expected range, the &lt;code&gt;UTC()&lt;/code&gt; method updates the other parameters to accommodate the value. For example, if 15 is used for month, the year will be incremented by 1 &lt;code&gt;(year + 1)&lt;/code&gt; and 3 will be used for the month.</source>
          <target state="translated">パラメータが予想範囲外の場合、 &lt;code&gt;UTC()&lt;/code&gt; メソッドは他のパラメータを更新して値を調整します。たとえば、月に15が使用されている場合、年は1 &lt;code&gt;(year + 1)&lt;/code&gt; インクリメントされ、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="c725aba9dc8cfc4ecef16eaeb9213edebcbb05da" translate="yes" xml:space="preserve">
          <source>If a parameter is outside of the expected range, the &lt;code&gt;UTC()&lt;/code&gt; method updates the other parameters to accommodate the value. For example, if &lt;code&gt;15&lt;/code&gt; is used for &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt;, the year will be incremented by 1 &lt;code&gt;(&lt;var&gt;year&lt;/var&gt; + 1)&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; will be used for the month.</source>
          <target state="translated">パラメータが予想範囲外の場合、 &lt;code&gt;UTC()&lt;/code&gt; メソッドは他のパラメータを更新して値に対応します。たとえば、 &lt;code&gt;15&lt;/code&gt; が使用され &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt; 、年が1ずつインクリメントされます &lt;code&gt;(&lt;var&gt;year&lt;/var&gt; + 1)&lt;/code&gt; と &lt;code&gt;3&lt;/code&gt; が月に使用されます。</target>
        </trans-unit>
        <trans-unit id="76e695a5051810de75d193b74766ab525b424229" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setFullYear()&lt;/code&gt; はそれに応じて他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; に15を指定すると、年は1（ &lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="bc226135066c452e9f891ad0716eedfaf99c4f78" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;yearValue + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setFullYear()&lt;/code&gt; は他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を適宜更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を指定すると、年は1ずつ増分され（ &lt;code&gt;yearValue + 1&lt;/code&gt; ）、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="ccc6a64d169dbd4da5c7d23a80b1dd0d637ecc21" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="a0bae704c8f363a3c418460072e51a073a948dc4" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="23b4dd0c538d62e6f6e8b5adb2fc8de560c3e8ba" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setMinutes()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="8dd78caa2b59300ea65d3ff5bde2b0076413d09a" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setMinutes()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="18bd212d1a40736bf3e113a154e00179fdae9e3c" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setMonth()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; に15を使用すると、年は1ずつ増加し、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="0cbcdc0755030f824b7ef9e0e2ebcf2e5cbc9c6f" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setMonth()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を使用すると、年は1ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="ad6f7cf92def3c1f8a1915da21b1d6f52234d3f7" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setSeconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている分が1ずつ増加し、40が秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="e0c6676cd42b85e15c3ec0b0481c70d568ae9434" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setSeconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている分は1ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="df01689b65802985e92b006b852bab1789537c7d" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCDate()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 40 for &lt;code&gt;dayValue&lt;/code&gt;, and the month stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object is June, the day will be changed to 10 and the month will be incremented to July.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCDate()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;dayValue&lt;/code&gt; に40を使用し、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている月が6月の場合、日は10に変更され、月は7月に増分されます。</target>
        </trans-unit>
        <trans-unit id="0f6027596c322cca311a687bf3cf406e0ffc5812" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCFullYear()&lt;/code&gt; はそれに応じて他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; に15を指定すると、年は1（ &lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="52dac7927320e1182e697b79ec8295155d19dc5c" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;yearValue + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCFullYear()&lt;/code&gt; は他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を適宜更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を指定すると、年は1ずつ増分され（ &lt;code&gt;yearValue + 1&lt;/code&gt; ）、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="5a55c9e4f35d76aa47c88004d1e11b285eaed954" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="c11c6ecd9791e9b4a84c89341e5b7e2f0989ca49" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="0be0566f667d3135990a5889ec32194ccf1a34d5" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 1100 for &lt;code&gt;&lt;var&gt;millisecondsValue&lt;/var&gt;&lt;/code&gt;, the seconds stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 100 will be used for milliseconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。あなたは1100を使用している場合たとえば、 &lt;code&gt;&lt;var&gt;millisecondsValue&lt;/var&gt;&lt;/code&gt; 、に保存されている秒&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトが1つインクリメントされ、100ミリ秒のために使用されます。</target>
        </trans-unit>
        <trans-unit id="6e0fddf94acbeb7b53ae965497ce04cbb007f210" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 1100 for &lt;code&gt;millisecondsValue&lt;/code&gt;, the seconds stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 100 will be used for milliseconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;millisecondsValue&lt;/code&gt; に1100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている秒数が1増加し、ミリ秒には100が使用されます。</target>
        </trans-unit>
        <trans-unit id="0844e22920653f7ff879d175734f8ca20542884e" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCMinutes()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="a4ab1e641e438a15929a07e53e62551090004df3" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCMinutes()&lt;/code&gt; は、それに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="77a89ca3d2dd51667af8624bdb97060e7f86c012" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCMonth()&lt;/code&gt; は、それに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を使用すると、年は1ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="d37c5d009a9e0ab4ebd4c03c9cbe96e7a5031ea7" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCSeconds()&lt;/code&gt; は、それに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている分は1ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="54e5d5b9374c3920ec4b4ed3a7977f0fa06e19b2" translate="yes" xml:space="preserve">
          <source>If a property has a corresponding target object property then &lt;code&gt;Object.defineProperty(target, prop, descriptor)&lt;/code&gt; will not throw an exception.</source>
          <target state="translated">プロパティに対応するターゲットオブジェクトプロパティがある場合、 &lt;code&gt;Object.defineProperty(target, prop, descriptor)&lt;/code&gt; は例外をスローしません。</target>
        </trans-unit>
        <trans-unit id="837d8d104001710dc6b1a33f7143ccc511c3351f" translate="yes" xml:space="preserve">
          <source>If a property is modified in one iteration and then visited at a later time, its value in the loop is its value at that later time. A property that is deleted before it has been visited will not be visited later. Properties added to the object over which iteration is occurring may either be visited or omitted from iteration.</source>
          <target state="translated">あるプロパティが1回の反復で変更された後、後から訪問された場合、ループ内の値は後から訪問された時の値となります。訪問前に削除されたプロパティは、後から訪問されることはありません。反復が発生しているオブジェクトに追加されたプロパティは、訪問されるか、反復から省略されるかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="a5534a4c3390c3a7ec2f13247ce7f50b399f6066" translate="yes" xml:space="preserve">
          <source>If a property with the same name exists on the object's prototype chain, then, after deletion, the object will use the property from the prototype chain (in other words, &lt;code&gt;delete&lt;/code&gt; only has an effect on own properties).</source>
          <target state="translated">同じ名前のプロパティがオブジェクトのプロトタイプチェーンに存在する場合、削除後、オブジェクトはプロトタイプチェーンのプロパティを使用します（つまり、 &lt;code&gt;delete&lt;/code&gt; は自分のプロパティにのみ影響します）。</target>
        </trans-unit>
        <trans-unit id="5e95bbcb4d00da3194f60f32b87c232cfe48eb8b" translate="yes" xml:space="preserve">
          <source>If a value can be converted to &lt;code&gt;true&lt;/code&gt;, the value is so-called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;. If a value can be converted to &lt;code&gt;false&lt;/code&gt;, the value is so-called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;.</source>
          <target state="translated">値を &lt;code&gt;true&lt;/code&gt; に変換できる場合、その値はいわゆる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truey&lt;/a&gt;です。値を &lt;code&gt;false&lt;/code&gt; に変換できる場合、その値はいわゆる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="8ab400bc46efabee8fe3b7f7d0f93c12a2cfeb1f" translate="yes" xml:space="preserve">
          <source>If all of the passed-in promises fulfill, or are not promises, the promise returned by &lt;code&gt;Promise.all&lt;/code&gt; is fulfilled asynchronously.</source>
          <target state="translated">渡された &lt;code&gt;Promise.all&lt;/code&gt; がすべてPromiseである場合、またはPromiseではない場合、Promise.allによって返されるPromiseは非同期で実行されます。</target>
        </trans-unit>
        <trans-unit id="6f42c36a852e8a0e3d96038c9b48c242a9784442" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../statements/for...of&quot;&gt;iterable object &lt;/a&gt;is passed, all of its elements will be added to the new &lt;code&gt;Set&lt;/code&gt;. If you don't specify this parameter, or its value is &lt;code&gt;null&lt;/code&gt;, the new &lt;code&gt;Set&lt;/code&gt; is empty.</source>
          <target state="translated">場合は&lt;a href=&quot;../statements/for...of&quot;&gt;反復可能オブジェクトが&lt;/a&gt;渡され、その要素のすべてが新に追加されます &lt;code&gt;Set&lt;/code&gt; 。このパラメーターを指定しない場合、またはその値が &lt;code&gt;null&lt;/code&gt; の場合、新しい &lt;code&gt;Set&lt;/code&gt; は空になります。</target>
        </trans-unit>
        <trans-unit id="3d39d83ba6dd7a9c8c32bf2347faf691e07c8e4e" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../statements/for...of&quot;&gt;iterable object &lt;/a&gt;is passed, all of its elements will be added to the new &lt;code&gt;WeakSet&lt;/code&gt;. null is treated as undefined.</source>
          <target state="translated">場合は&lt;a href=&quot;../statements/for...of&quot;&gt;反復可能オブジェクトが&lt;/a&gt;渡され、その要素のすべてが新に追加されます &lt;code&gt;WeakSet&lt;/code&gt; 。nullは未定義として扱われます。</target>
        </trans-unit>
        <trans-unit id="2d3fe08780b4a61c2df0afb894ef6c7d6c984467" translate="yes" xml:space="preserve">
          <source>If an accessor property is inherited, its &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods will be called when the property is accessed and modified on descendant objects. If these methods use a variable to store the value, this value will be shared by all objects.</source>
          <target state="translated">アクセサープロパティが継承されている場合、子孫オブジェクトでプロパティにアクセスして変更すると、その &lt;code&gt;get&lt;/code&gt; メソッドと &lt;code&gt;set&lt;/code&gt; メソッドが呼び出されます。これらのメソッドが変数を使用して値を格納する場合、この値はすべてのオブジェクトで共有されます。</target>
        </trans-unit>
        <trans-unit id="0a6096c9d36c7d06be6e0a07577d30ae12433148" translate="yes" xml:space="preserve">
          <source>If an arrow function needs to access the &lt;code&gt;this&lt;/code&gt; variable, you can use the arrow function as the enclosing function:</source>
          <target state="translated">アロー関数が &lt;code&gt;this&lt;/code&gt; 変数にアクセスする必要がある場合は、アロー関数を囲み関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="7b4be48e7bf99e7bb43a149c21ac7c6e39523941" translate="yes" xml:space="preserve">
          <source>If an element is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, it is converted to the empty string.</source>
          <target state="translated">要素が &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; の場合、空の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="e363aa536e88387e5c0cbd67a99ffab5a7c14024" translate="yes" xml:space="preserve">
          <source>If an element is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or an empty array &lt;code&gt;[]&lt;/code&gt;, it is converted to an empty string.</source>
          <target state="translated">要素が &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; 、または空の配列 &lt;code&gt;[]&lt;/code&gt; の場合、空の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="082c0044fd10aae386a6cf9e4adb69b5ca782b44" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then the promise returned by this method is fulfilled synchronously. The resolved value is an empty array.</source>
          <target state="translated">空の &lt;var&gt;iterable&lt;/var&gt; が渡された場合、このメソッドによって返されるpromiseは同期的に実行されます。解決された値は空の配列です。</target>
        </trans-unit>
        <trans-unit id="54bc642374ee70081e3afb8490bd2269bdefd134" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then this method returns (synchronously) an already resolved promise.</source>
          <target state="translated">空の &lt;var&gt;iterable&lt;/var&gt; が渡された場合、このメソッドはすでに解決されたpromiseを（同期的に）返します。</target>
        </trans-unit>
        <trans-unit id="115182e50bdd6201c48fa9cf7d25930ad3769130" translate="yes" xml:space="preserve">
          <source>If an existing, yet-unvisited element of the array is changed by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, its value passed to the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;find&lt;/code&gt; visits that element's index.</source>
          <target state="translated">配列の既存のまだアクセスされていない要素が &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によって変更された場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 渡されるその値は、 &lt;code&gt;find&lt;/code&gt; がその要素のインデックスにアクセスしたときの値になります。</target>
        </trans-unit>
        <trans-unit id="bd198759ec716bf61d3d545c999fb000e2238a04" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method does not return an iterator object, then it is a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:</source>
          <target state="translated">イテラブルの &lt;code&gt;@@iterator&lt;/code&gt; メソッドがイテレータオブジェクトを返さない場合は、整形式でないイテラブルです。このように使用すると、実行時例外またはバグのある動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d69c0eecc261f462796bd6ac56dedc90c4a7ce55" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method doesn't return an iterator object, then it's a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:</source>
          <target state="translated">イテラブルの &lt;code&gt;@@iterator&lt;/code&gt; メソッドがイテレータオブジェクトを返さない場合は、整形式でないイテラブルです。このように使用すると、実行時例外またはバグのある動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2112de509477c036e2a78f9bd9296395f6174868" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method doesn't return an iterator object, then it's considered a &lt;em&gt;non-well-formed&lt;/em&gt; iterable.</source>
          <target state="translated">&lt;code&gt;@@iterator&lt;/code&gt; の@@ iteratorメソッドがイテレータオブジェクトを返さない場合、それは&lt;em&gt;整形式で&lt;/em&gt;はないイテレータと見なさ&lt;em&gt;れ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="31b3cbae51b5fe192cd7a0df742cf2ba526bfcfb" translate="yes" xml:space="preserve">
          <source>If an object being stringified has a property named &lt;code&gt;toJSON&lt;/code&gt; whose value is a function, then the &lt;code&gt;toJSON()&lt;/code&gt; method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the &lt;code&gt;toJSON()&lt;/code&gt; method when called will be serialized. &lt;code&gt;JSON.stringify()&lt;/code&gt; calls &lt;code&gt;toJSON&lt;/code&gt; with one parameter:</source>
          <target state="translated">文字列化されるオブジェクトに &lt;code&gt;toJSON&lt;/code&gt; というプロパティがあり、その値が関数である場合、 &lt;code&gt;toJSON()&lt;/code&gt; メソッドはJSON文字列化の動作をカスタマイズします。オブジェクトがシリアル化される代わりに、 &lt;code&gt;toJSON()&lt;/code&gt; メソッドによって呼び出されたときに返される値がシリアル化されます。 &lt;code&gt;JSON.stringify()&lt;/code&gt; は、1つのパラメーターで &lt;code&gt;toJSON&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="cef8f2323faa3f13ce8f7260bf8626d3157109e1" translate="yes" xml:space="preserve">
          <source>If an object is compared with a number or string, JavaScript attempts to return the default value for the object. Operators attempt to convert the object to a primitive value, a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Number&lt;/code&gt; value, using the &lt;code&gt;valueOf&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods of the objects. If this attempt to convert the object fails, a runtime error is generated.</source>
          <target state="translated">オブジェクトが数値または文字列と比較される場合、JavaScriptはオブジェクトのデフォルト値を返そうとします。演算子は、オブジェクトの &lt;code&gt;valueOf&lt;/code&gt; メソッドと &lt;code&gt;toString&lt;/code&gt; メソッドを使用して、オブジェクトをプリミティブ値（ &lt;code&gt;String&lt;/code&gt; または &lt;code&gt;Number&lt;/code&gt; 値）に変換しようとします。このオブジェクト変換の試みが失敗すると、実行時エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="5d9c8d242f07d4b8da5fc1c766cac77ace48f8da" translate="yes" xml:space="preserve">
          <source>If an optional value is passed to the generator's &lt;code&gt;next()&lt;/code&gt; method, that value becomes the value returned by the generator's current &lt;code&gt;yield&lt;/code&gt; operation.</source>
          <target state="translated">オプションの値がジェネレーターの &lt;code&gt;next()&lt;/code&gt; メソッドに渡されると、その値はジェネレーターの現在の &lt;code&gt;yield&lt;/code&gt; 操作によって返される値になります。</target>
        </trans-unit>
        <trans-unit id="eab9a8913c422ab58b02bbfa5d83f5998bdc01c2" translate="yes" xml:space="preserve">
          <source>If any of the arguments are &lt;code&gt;NaN&lt;/code&gt; or cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数のいずれかが &lt;code&gt;NaN&lt;/code&gt; であるか、数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="14e60bca484450eba75e83eae86d457071ed10b7" translate="yes" xml:space="preserve">
          <source>If any of the passed-in promises reject, &lt;code&gt;Promise.all&lt;/code&gt; asynchronously rejects with the value of the promise that rejected, whether or not the other promises have resolved.</source>
          <target state="translated">渡された約束のいずれかが拒否された場合、 &lt;code&gt;Promise.all&lt;/code&gt; は、他の約束が解決されたかどうかに関係なく、拒否された約束の値で非同期に拒否します。</target>
        </trans-unit>
        <trans-unit id="48d47027ffc774196b349859fb3e9da455a451c9" translate="yes" xml:space="preserve">
          <source>If at least one of arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">少なくとも1つの引数を数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d5be6d3c080275816767e73cf9852e3c597d6d12" translate="yes" xml:space="preserve">
          <source>If at least one of the arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">少なくとも1つの引数を数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="09f549348155baea9ff0cca9052911fb73fa52d5" translate="yes" xml:space="preserve">
          <source>If at least two arguments are supplied, missing arguments are either set to 1 (if the day is missing) or 0 for all others.</source>
          <target state="translated">少なくとも2つの引数が与えられた場合、欠落している引数は1(その日が欠落している場合)に設定されるか、他のすべての引数は0に設定されます。</target>
        </trans-unit>
        <trans-unit id="82315591edcb2db1b2e04264330ce3348f0aee52" translate="yes" xml:space="preserve">
          <source>If compilation fails, the promise rejects with a &lt;a href=&quot;compileerror&quot;&gt;&lt;code&gt;WebAssembly.CompileError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンパイルが失敗すると、Promiseは&lt;a href=&quot;compileerror&quot;&gt; &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; で&lt;/a&gt;拒否します。</target>
        </trans-unit>
        <trans-unit id="cea3dd981e7a3aff7561a6922483101c40442bb9" translate="yes" xml:space="preserve">
          <source>If default parameters are defined for one or more parameter, then a &lt;a href=&quot;https://tc39.es/ecma262/#sec-functiondeclarationinstantiation&quot;&gt;second scope&lt;/a&gt; (Environment Record) is created, specifically for the identifiers within the parameter list. This scope is a parent of the scope created for the function body.</source>
          <target state="translated">1つ以上のパラメーターに対してデフォルトのパラメーターが定義されている場合、特にパラメーター・リスト内のIDに対して、&lt;a href=&quot;https://tc39.es/ecma262/#sec-functiondeclarationinstantiation&quot;&gt;2番目のスコープ&lt;/a&gt;（環境レコード）が作成されます。このスコープは、関数本体用に作成されたスコープの親です。</target>
        </trans-unit>
        <trans-unit id="e1f0c5928a0099cfe5ce965bc4209aa587dd166e" translate="yes" xml:space="preserve">
          <source>If either of the parameters are not of the correct type or structure, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">パラメータのいずれかが正しいタイプまたは構造でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="329fa71267e94c738bbeefa5e7aa0eabd7f7ae7a" translate="yes" xml:space="preserve">
          <source>If either or both of the arguments are negative or &lt;code&gt;NaN&lt;/code&gt;, the &lt;code&gt;substring()&lt;/code&gt; method treats them as if they were &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">引数のいずれかまたは両方が負または &lt;code&gt;NaN&lt;/code&gt; の場合、 &lt;code&gt;substring()&lt;/code&gt; メソッドはそれらを &lt;code&gt;0&lt;/code&gt; であるかのように扱います。</target>
        </trans-unit>
        <trans-unit id="69769f880229b3b08f71eee7e43ec58963b459f3" translate="yes" xml:space="preserve">
          <source>If greater than the length of the array, &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.</source>
          <target state="translated">配列の長さより大きい場合、 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; は配列の長さに設定されます。この場合、要素は削除されませんが、メソッドは追加関数として動作し、提供されたitem [n *]と同じ数の要素を追加します。</target>
        </trans-unit>
        <trans-unit id="cb72faf000f170f1b80581e4a48d82155c0c3894" translate="yes" xml:space="preserve">
          <source>If instead, you want to remove an array element by changing the contents of the array, use the &lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt; method. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed from the array completely using &lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">代わりに、配列の内容を変更して配列要素を削除する場合は、&lt;a href=&quot;../global_objects/array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。次の例では、&lt;a href=&quot;../global_objects/array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;trees[3]&lt;/code&gt; が配列から完全に削除されています。</target>
        </trans-unit>
        <trans-unit id="49fc2322ca24a4cc53ec295316ce4fd08b085e67" translate="yes" xml:space="preserve">
          <source>If instead, you want to remove an array element by changing the contents of the array, use the &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed from the array completely using &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">代わりに、配列の内容を変更して配列要素を削除する場合は、 &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドを使用します。次の例では、 &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;trees[3]&lt;/code&gt; 配列から完全に削除しています。</target>
        </trans-unit>
        <trans-unit id="2aa5046f9eb74295f861c69f7b20dc6058c9f652" translate="yes" xml:space="preserve">
          <source>If it is a positive number with a positive sign, &lt;code&gt;RegExp()&lt;/code&gt; will ignore the positive sign.</source>
          <target state="translated">正の符号が付いた正の数の場合、 &lt;code&gt;RegExp()&lt;/code&gt; は正の符号を無視します。</target>
        </trans-unit>
        <trans-unit id="6fe41e69103f9edde244c8197d5369fb1ea48d61" translate="yes" xml:space="preserve">
          <source>If it is resolved</source>
          <target state="translated">解決した場合</target>
        </trans-unit>
        <trans-unit id="446ee71b57c4dc727ad4482eb4cb20418b406cbe" translate="yes" xml:space="preserve">
          <source>If it rejects, it is rejected with the reason from the first promise in the iterable that was rejected.</source>
          <target state="translated">拒否された場合は、拒否されたイテラブルの最初の約束から理由をつけて拒否されます。</target>
        </trans-unit>
        <trans-unit id="e1d9729db77586d30dcb90e9b3c12a312fac9880" translate="yes" xml:space="preserve">
          <source>If it rejects, it is rejected with the reason from the first promise that was rejected.</source>
          <target state="translated">拒否する場合は、最初に拒否された約束から理由をつけて拒否します。</target>
        </trans-unit>
        <trans-unit id="cfb1cc05b2c2ef7200a99e47d5f93b8653470671" translate="yes" xml:space="preserve">
          <source>If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed or shouldn't be re-calculated.</source>
          <target state="translated">使われていれば何度かアクセスされることになるので、値が変わることはないだろうし、再計算してはいけないということはありません。</target>
        </trans-unit>
        <trans-unit id="8d09c7d906444b72f87c57393ac10ac8d90cbc87" translate="yes" xml:space="preserve">
          <source>If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed, or shouldn't be re-calculated.</source>
          <target state="translated">使われていれば何度かアクセスされることになるので、値が変わることはないだろうし、再計算する必要はないはずです。</target>
        </trans-unit>
        <trans-unit id="d31244b48c8d3b0b322ef9ce1f75a06324d0d657" translate="yes" xml:space="preserve">
          <source>If module is not a &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object instance, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">moduleが&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;オブジェクトのインスタンスでない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="a6b8e3ea5e20c3a5881face3771f7491d5f74865" translate="yes" xml:space="preserve">
          <source>If negative, it will begin that many elements from the end of the array. (In this case, the origin &lt;code&gt;-1&lt;/code&gt;, meaning &lt;code&gt;-&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; is the index of the &lt;code&gt;&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; last element, and is therefore equivalent to the index of &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.) If &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length + &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;, it will begin from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">負の場合、配列の最後からその数の要素が始まります。（原点、この場合には &lt;code&gt;-1&lt;/code&gt; 、意味 &lt;code&gt;-&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; の指標である &lt;code&gt;&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; &lt;sup&gt;番目の&lt;/sup&gt;最後の要素、そのための指標に相当する &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; 。）場合 &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length + &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 未満である &lt;code&gt;0&lt;/code&gt; は、インデックス &lt;code&gt;0&lt;/code&gt; から始まります。</target>
        </trans-unit>
        <trans-unit id="6f05381949d7c897bb41de21ca73f9e4317dd755" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; is provided to &lt;code&gt;charAt()&lt;/code&gt;, the default is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;charAt()&lt;/code&gt; に &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; が指定されていない場合、デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f91f0e4cc5abd9a5b3dbdbb7a0297c9b1abf06c5" translate="yes" xml:space="preserve">
          <source>If no argument is provided, the &lt;code&gt;value&lt;/code&gt; property of returned object is the same as if &lt;code&gt;.next()&lt;/code&gt;. If an argument is provided, it will be set to the value of the &lt;code&gt;value&lt;/code&gt; property of the returned object.</source>
          <target state="translated">引数が指定されていない場合、返されるオブジェクトの &lt;code&gt;value&lt;/code&gt; プロパティは、 &lt;code&gt;.next()&lt;/code&gt; の場合と同じです。引数を指定すると、返されたオブジェクトの &lt;code&gt;value&lt;/code&gt; プロパティの値に設定されます。</target>
        </trans-unit>
        <trans-unit id="4e0091f074b8afb9219bdfed384f304735f7b83e" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is +0.</source>
          <target state="translated">引数が与えられていない場合、結果は+0となります。</target>
        </trans-unit>
        <trans-unit id="9990c049d2e8a0255f2ea7fdd43424a88bf9391b" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is +0. If any of the arguments is &amp;plusmn;Infinity, the result is Infinity. If any of the arguments is NaN (unless another argument is &amp;plusmn;Infinity), the result is NaN. If at least one of the arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数が指定されていない場合、結果は+0になります。引数のいずれかが&amp;plusmn;Infinityの場合、結果はInfinityになります。引数のいずれかがNaNの場合（別の引数が&amp;plusmn;Infinityでない限り）、結果はNaNになります。引数の少なくとも1つを数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cec49b483dc5f92d00626cab7c85c35367d1467e" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is -&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数を指定しない場合、結果は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d63e690a371b2f42dfb850c4bf3dbb9ed32758d6" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数を指定しない場合、結果は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1ce565041aff6de5300fa5e4efb7b43bee1e0ca9" translate="yes" xml:space="preserve">
          <source>If no arguments are provided, the constructor creates a JavaScript &lt;code&gt;Date&lt;/code&gt; object for the current date and time according to system settings for timezone offset.</source>
          <target state="translated">引数が指定されていない場合、コンストラクターは、タイムゾーンオフセットのシステム設定に従って、現在の日時のJavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="349be3fe930215fab503b160fac65a4afd9578ab" translate="yes" xml:space="preserve">
          <source>If no elements are removed, an empty array is returned.</source>
          <target state="translated">要素が削除されなかった場合は、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="f768f5cdd68c2b69894b9dde66eb214e5224574b" translate="yes" xml:space="preserve">
          <source>If no index is provided to &lt;code&gt;charAt()&lt;/code&gt;, the default is 0.</source>
          <target state="translated">&lt;code&gt;charAt()&lt;/code&gt; にインデックスが提供されていない場合、デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="df2278328be6b4739a3d8c782a34d0454e15f504" translate="yes" xml:space="preserve">
          <source>If no matching &lt;code&gt;case&lt;/code&gt; clause is found, the program looks for the optional &lt;code&gt;default&lt;/code&gt; clause, and if found, transfers control to that clause, executing the associated statements. If no &lt;code&gt;default&lt;/code&gt; clause is found, the program continues execution at the statement following the end of &lt;code&gt;switch&lt;/code&gt;. By convention, the &lt;code&gt;default&lt;/code&gt; clause is the last clause, but it does not need to be so.</source>
          <target state="translated">一致する &lt;code&gt;case&lt;/code&gt; 句が見つからない場合、プログラムはオプションの &lt;code&gt;default&lt;/code&gt; 句を検索し、見つかった場合は、その句に制御を移して、関連するステートメントを実行します。 &lt;code&gt;default&lt;/code&gt; 句が見つからない場合、プログラムは &lt;code&gt;switch&lt;/code&gt; の終わりの次のステートメントで実行を継続します。慣例により、 &lt;code&gt;default&lt;/code&gt; 句は最後の句ですが、そうである必要はありません。</target>
        </trans-unit>
        <trans-unit id="f9c179b8d44481d64d61150bf0f2642fed87585c" translate="yes" xml:space="preserve">
          <source>If no string is explicitly provided, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;&lt;var&gt;searchValue&lt;/var&gt; will be coerced to &quot;&lt;code&gt;undefined&lt;/code&gt;&quot;&lt;/a&gt;, and this value will be searched for in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">文字列が明示的に指定されていない場合、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt; &lt;var&gt;searchValue&lt;/var&gt; は &quot; &lt;code&gt;undefined&lt;/code&gt; &quot;に強制変換され&lt;/a&gt;、この値は &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; で検索されます。</target>
        </trans-unit>
        <trans-unit id="03d6fe27bce7cb59badbbf88b73e5ae858f2f1f6" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;NaN&lt;/code&gt;, the return value will be the integer that is the first argument taken as a number in the specified &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt;. (For example, a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; of &lt;code&gt;10&lt;/code&gt; converts from a decimal number, &lt;code&gt;8&lt;/code&gt; converts from octal, &lt;code&gt;16&lt;/code&gt; from hexadecimal, and so on.)</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; でない場合、戻り値は、指定された &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 数値として取得される最初の引数である整数になります。 （たとえば、 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; &lt;code&gt;10&lt;/code&gt; は10進数から変換され、 &lt;code&gt;8&lt;/code&gt; は8進数から変換され、 &lt;code&gt;16&lt;/code&gt; は16進数から変換されます。）</target>
        </trans-unit>
        <trans-unit id="157db00b7126c89fc2532f635dc2767990139ad4" translate="yes" xml:space="preserve">
          <source>If one of the operands is &lt;code&gt;Boolean&lt;/code&gt;, the Boolean operand is converted to 1 if it is &lt;code&gt;true&lt;/code&gt; and +0 if it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オペランドの1つが &lt;code&gt;Boolean&lt;/code&gt; 場合、ブール値のオペランドは、 &lt;code&gt;true&lt;/code&gt; 場合は1に、 &lt;code&gt;false&lt;/code&gt; 場合は+0に変換されます。</target>
        </trans-unit>
        <trans-unit id="5aa8b2baae192e612c1543533ffaebb114c4ec0f" translate="yes" xml:space="preserve">
          <source>If one or both arguments are omitted or are provided non-functions, then &lt;code&gt;then&lt;/code&gt; will be missing the handler(s), but will not generate any errors. If the &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;then&lt;/code&gt; is called on adopts a state (&lt;code&gt;fulfillment&lt;/code&gt; or &lt;code&gt;rejection&lt;/code&gt;) for which &lt;code&gt;then&lt;/code&gt; has no handler, a new &lt;code&gt;Promise&lt;/code&gt; is created with no additional handlers, simply adopting the final state of the original &lt;code&gt;Promise&lt;/code&gt; on which &lt;code&gt;then&lt;/code&gt; was called.</source>
          <target state="translated">一方または両方の引数が省略されているか、非機能を提供している場合は、 &lt;code&gt;then&lt;/code&gt; （S）ハンドラを失われますが、すべてのエラーを生成しません。場合 &lt;code&gt;Promise&lt;/code&gt; &lt;code&gt;then&lt;/code&gt; に呼び出された状態（採用 &lt;code&gt;fulfillment&lt;/code&gt; または &lt;code&gt;rejection&lt;/code&gt; ）そのため &lt;code&gt;then&lt;/code&gt; 何のハンドラを持っていない、新しい &lt;code&gt;Promise&lt;/code&gt; 単に元の最終状態を採用、追加のハンドラを使用して作成された &lt;code&gt;Promise&lt;/code&gt; その上で &lt;code&gt;then&lt;/code&gt; と呼ばれていましたが。</target>
        </trans-unit>
        <trans-unit id="3b2d6b28b997335014500b08d8f04f7c3691b2c8" translate="yes" xml:space="preserve">
          <source>If one or both arguments are omitted or are provided non-functions, then &lt;code&gt;then&lt;/code&gt; will be missing the handler(s), but will not generate any errors. If the &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;then&lt;/code&gt; is called on adopts a state (&lt;code&gt;fulfillment&lt;/code&gt; or &lt;code&gt;rejection&lt;/code&gt;) for which &lt;code&gt;then&lt;/code&gt; has no handler, the returned promise simply adopts the final state of the original &lt;code&gt;Promise&lt;/code&gt; on which &lt;code&gt;then&lt;/code&gt; was called.</source>
          <target state="translated">一方または両方の引数が省略されているか、非機能を提供している場合は、 &lt;code&gt;then&lt;/code&gt; （S）ハンドラを失われますが、すべてのエラーを生成しません。場合 &lt;code&gt;Promise&lt;/code&gt; &lt;code&gt;then&lt;/code&gt; に呼び出された状態（採用 &lt;code&gt;fulfillment&lt;/code&gt; または &lt;code&gt;rejection&lt;/code&gt; ）そのため &lt;code&gt;then&lt;/code&gt; 何のハンドラを持っていない、返された約束は、単に元の最終的な状態を採用 &lt;code&gt;Promise&lt;/code&gt; どの &lt;code&gt;then&lt;/code&gt; 呼ばれました。</target>
        </trans-unit>
        <trans-unit id="457b342baa5fd75eb025ca9f5b99efd20082c5f4" translate="yes" xml:space="preserve">
          <source>If one wishes to follow the more recent &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt; for URLs, which makes square brackets reserved (for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IPv6&quot;&gt;IPv6&lt;/a&gt;) and thus not encoded when forming something which could be part of a URL (such as a host), the following code snippet may help:</source>
          <target state="translated">URLの最新の&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt;に従いたい場合は、角かっこを予約し（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IPv6&quot;&gt;IPv6の場合&lt;/a&gt;）、URLの一部となる可能性のあるもの（ホストなど）を形成するときにエンコードされないようにします。</target>
        </trans-unit>
        <trans-unit id="e1c69555d0da6cfd17e4847850dca3e2008fe6a4" translate="yes" xml:space="preserve">
          <source>If only one element is removed, an array of one element is returned.</source>
          <target state="translated">1つの要素だけが削除された場合は、1つの要素の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="89d18e2f04f7d7d60c84e76982daf3b58967d734" translate="yes" xml:space="preserve">
          <source>If passing the function argument using an &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow function expression&lt;/a&gt; the &lt;code&gt;thisArg&lt;/code&gt; parameter can be omitted as arrow functions lexically bind the &lt;a href=&quot;../../operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">&lt;a href=&quot;../../functions/arrow_functions&quot;&gt;矢印関数式&lt;/a&gt;を使用して関数の引数を渡す場合、矢印関数が&lt;a href=&quot;../../operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;/a&gt;値を字句的にバインドするため、 &lt;code&gt;thisArg&lt;/code&gt; パラメータを省略できます。</target>
        </trans-unit>
        <trans-unit id="6b009fba48b5763df48e0358044ceb1e1dc86d5e" translate="yes" xml:space="preserve">
          <source>If pattern argument is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object, &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; doesn't call this method, nor creates a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">pattern引数がある場合&lt;strong&gt;ではない&lt;/strong&gt;&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; は、&lt;/a&gt;このメソッドを呼び出して、また作成していない&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="6c9e2fc126b23061bb02204abf1952156dba945b" translate="yes" xml:space="preserve">
          <source>If provided, it is used as the length of &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;. Defaults to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">提供されている場合は、 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; の長さとして使用されます。デフォルトは &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="afe3f0eab5663e5d1ba57f7d29abefac6af921f5" translate="yes" xml:space="preserve">
          <source>If specified and not &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, an object whose enumerable own properties (that is, those properties defined upon itself and &lt;em&gt;not&lt;/em&gt; enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of &lt;a href=&quot;defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定され、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;でない場合、列挙可能な独自のプロパティ（つまり、それ自体で定義され、プロトタイプチェーンに沿った列挙可能なプロパティで&lt;em&gt;はない&lt;/em&gt;プロパティ）を持つオブジェクトは、対応するプロパティ名とともに、新しく作成されたオブジェクトに追加されるプロパティ記述子を指定します。これらのプロパティは、&lt;a href=&quot;defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties()&lt;/code&gt; の&lt;/a&gt;2番目の引数に対応します。</target>
        </trans-unit>
        <trans-unit id="2ffe4874009bf36af9606205e966fc91f48654a0" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;flags&lt;/code&gt; indicates the flags to add, or if an object is supplied for the pattern, the &lt;code&gt;flags&lt;/code&gt; value will replace any of that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; will be reset to 0) (as of ES2015). If &lt;code&gt;flags&lt;/code&gt; is not specified and a regular expressions object is supplied, that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; value) will be copied over. The value is a string containing any combination of the following values:</source>
          <target state="translated">指定した場合、 &lt;code&gt;flags&lt;/code&gt; は追加するフラグを示します。または、パターンにオブジェクトが指定されている場合、 &lt;code&gt;flags&lt;/code&gt; 値はそのオブジェクトのフラグを置き換えます（および &lt;code&gt;lastIndex&lt;/code&gt; は0にリセットされます）（ES2015以降）。場合は &lt;code&gt;flags&lt;/code&gt; 指定されておらず、正規表現オブジェクトが供給され、そのオブジェクトの旗（および &lt;code&gt;lastIndex&lt;/code&gt; のの値）がコピーされます。値は、次の値の任意の組み合わせを含む文字列です。</target>
        </trans-unit>
        <trans-unit id="0f278705572fe4cf68405aa4e5bdb3c3070a0a9a" translate="yes" xml:space="preserve">
          <source>If specified, flags can have any combination of the following values:</source>
          <target state="translated">指定された場合、フラグは以下の値の任意の組み合わせを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d41c0656b3d2ecfbd3b7ffcf0502574cc52a75c7" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;[@@search]()&lt;/code&gt; returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1.</source>
          <target state="translated">成功した場合、 &lt;code&gt;[@@search]()&lt;/code&gt; は、ストリング内の正規表現の最初の一致のインデックスを返します。それ以外の場合は、-1を返します。</target>
        </trans-unit>
        <trans-unit id="ee11a9ac2ddedc856e6b1b7ccdce4f9c79a7d963" translate="yes" xml:space="preserve">
          <source>If such an element is found, &lt;code&gt;findIndex()&lt;/code&gt; immediately returns the element's index. If &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; never returns a truthy value (or the array's &lt;code&gt;length&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;), &lt;code&gt;findIndex()&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">そのような要素が見つかった場合、 &lt;code&gt;findIndex()&lt;/code&gt; はすぐに要素のインデックスを返します。 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; が真の値を返さない場合（または配列の &lt;code&gt;length&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合）、 &lt;code&gt;findIndex()&lt;/code&gt; は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9c16da19397f9747a7c13f6fa34a9db0332a7be3" translate="yes" xml:space="preserve">
          <source>If such an element is found, &lt;code&gt;findIndex&lt;/code&gt; immediately returns that found element's index. If the callback never returns a truthy value or the array's &lt;code&gt;length&lt;/code&gt; is 0, &lt;code&gt;findIndex&lt;/code&gt; returns -1. Unlike some other array methods such as &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.some&lt;/code&gt;&lt;/a&gt;, in sparse arrays the &lt;code&gt;callback&lt;/code&gt;&lt;strong&gt;is called&lt;/strong&gt; even for indexes of entries not present in the array.</source>
          <target state="translated">そのような要素が見つかると、 &lt;code&gt;findIndex&lt;/code&gt; はすぐにその見つかった要素のインデックスを返します。コールバックが真の値を返さないか、配列の &lt;code&gt;length&lt;/code&gt; が0の場合、 &lt;code&gt;findIndex&lt;/code&gt; は-1を返します。&lt;a href=&quot;some&quot;&gt; &lt;code&gt;Array.some&lt;/code&gt; &lt;/a&gt;などの他のいくつかの配列メソッドとは異なり、スパース配列では、配列に存在しないエントリのインデックスに対しても &lt;code&gt;callback&lt;/code&gt; &lt;strong&gt;が呼び出さ&lt;/strong&gt;れます。</target>
        </trans-unit>
        <trans-unit id="aa1e6e164506acad60b43c996244e0ccc14c8ac0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; is outside of the range of date values for the month, &lt;code&gt;setDate()&lt;/code&gt; will update the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; がその月の日付値の範囲外にある場合、setDate &lt;code&gt;setDate()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを更新します。</target>
        </trans-unit>
        <trans-unit id="50246270bc94fbe34619b2358197206035242ab3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 引数を省略した場合、小数点以下の桁数は、デフォルトで値を一意に表すために必要な桁数になります。</target>
        </trans-unit>
        <trans-unit id="a8a042a031513c64b3651a694e6ea1a7b0776593" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is &lt;code&gt;2&lt;/code&gt;; the string returned is the positive binary representation of the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; が負で、符号が保持されます。これは、基数が &lt;code&gt;2&lt;/code&gt; の場合でも当てはまります。返される文字列は、正のバイナリ表現である &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; がが先行 &lt;code&gt;-&lt;/code&gt; 記号、&lt;strong&gt;ない&lt;/strong&gt;の2の補数 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d7a7c24bdbbc78170e073659c5f668b16269b25" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is not a whole number, the 'dot' sign is used to separate the decimal places.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; が整数でない場合は、「ドット」記号を使用して小数点以下の桁数を区切ります。</target>
        </trans-unit>
        <trans-unit id="b245f6f7566843542a7c173cff50732fbfd3bacf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is not specified, the preferred radix is assumed to be &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; が指定されていない場合、優先される基数は &lt;code&gt;10&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="54ad481de4c33588fdb0802190cf8b149d7966ee" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is smaller than &lt;code&gt;2&lt;/code&gt; or bigger than &lt;code&gt;36&lt;/code&gt;, and the first non-whitespace character cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; より小さくなる &lt;code&gt;2&lt;/code&gt; またはそれより大きく &lt;code&gt;36&lt;/code&gt; 、および最初の非空白文字が数値に変換することができない、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; が&lt;/a&gt;返されます。</target>
        </trans-unit>
        <trans-unit id="2a67a27ec1cbf334f567215905a7753278f9f6b8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; only transforms some values and not others, be certain to return all untransformed values as-is, otherwise, they will be deleted from the resulting object.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 一部のみの値ではなく、他の変形として、すべての形質転換されていない値を返す特定すること、そうでなければ、それらは結果のオブジェクトから削除されます。</target>
        </trans-unit>
        <trans-unit id="3f05af6384b04457cbb7e13272e0dc49a80bd675" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; このメソッドの引数は、オブジェクト（プリミティブ）ではない、それが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初のオブジェクトに強制変換されます。</target>
        </trans-unit>
        <trans-unit id="4b9f99648bb256a49a00568bf5dfb30e3033d62e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; このメソッドの引数は、オブジェクト（プリミティブ）ではない、それが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初にオブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="7dcf4e160575e283d63147e2cc65d135d2974ea8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, a non-object &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; will be coerced to an object.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; このメソッドの引数は、オブジェクト（プリミティブ）ではない、それが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;、非対象 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; オブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="ed3ac025020aed5a0890e8afac6c32f2c8ae815b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; value passed to &lt;code&gt;TypedArray.from()&lt;/code&gt; is not a constructor, &lt;code&gt;TypedArray.from()&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.from()&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; の値が渡さ &lt;code&gt;TypedArray.from()&lt;/code&gt; コンストラクタではない &lt;code&gt;TypedArray.from()&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array.from()&lt;/code&gt; 新しい作成にデフォルト値を&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e38a2717bbd5bd5ac9ed570a97494bee3fa7ab86" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Promise&lt;/code&gt; is rejected, the &lt;code&gt;await&lt;/code&gt; expression throws the rejected value.</source>
          <target state="translated">場合 &lt;code&gt;Promise&lt;/code&gt; 拒否された、 &lt;code&gt;await&lt;/code&gt; 式は拒否された値をスローします。</target>
        </trans-unit>
        <trans-unit id="35e4d659d7d35a3c85c18d904b4849b0e0e985e0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Promise&lt;/code&gt; is rejected, the rejected value is thrown.</source>
          <target state="translated">場合 &lt;code&gt;Promise&lt;/code&gt; 拒否され、拒否された値がスローされます。</target>
        </trans-unit>
        <trans-unit id="be3b876046ad63614f4af66a1f82f87240d95fa8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;configurable&lt;/code&gt; attribute of &lt;code&gt;o.a&lt;/code&gt; had been &lt;code&gt;true&lt;/code&gt;, none of the errors would be thrown and the property would be deleted at the end.</source>
          <target state="translated">&lt;code&gt;o.a&lt;/code&gt; の &lt;code&gt;configurable&lt;/code&gt; 属性が &lt;code&gt;true&lt;/code&gt; の場合、エラーはスローされず、プロパティは最後に削除されます。</target>
        </trans-unit>
        <trans-unit id="ac47f72ce3f75c7a5073bd32d1f6a7c725984cd3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dayValue&lt;/code&gt; is outside of the range of date values for the month, &lt;code&gt;setDate()&lt;/code&gt; will update the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if 0 is provided for &lt;code&gt;dayValue&lt;/code&gt;, the date will be set to the last day of the previous month.</source>
          <target state="translated">&lt;code&gt;dayValue&lt;/code&gt; がその月の日付値の範囲外の場合、setDate &lt;code&gt;setDate()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを更新します。たとえば、 &lt;code&gt;dayValue&lt;/code&gt; に 0が指定されている場合、日付は前月の最終日に設定されます。</target>
        </trans-unit>
        <trans-unit id="8c831ca3402dbcf2a32deaa1dbe0ffc5d3e40992" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;finally&lt;/code&gt; block returns a value, this value becomes the return value of the entire &lt;code&gt;try-catch-finally&lt;/code&gt; production, regardless of any &lt;code&gt;return&lt;/code&gt; statements in the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks. This includes exceptions thrown inside of the catch block:</source>
          <target state="translated">場合は &lt;code&gt;finally&lt;/code&gt; ブロックが値を返す、この値は、全体の戻り値になると &lt;code&gt;try-catch-finally&lt;/code&gt; かかわらずの、生産 &lt;code&gt;return&lt;/code&gt; で文 &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; ブロック。これには、catchブロック内でスローされた例外が含まれます。</target>
        </trans-unit>
        <trans-unit id="6bd8c3283258f28a255b8f9242378a0b430c842d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;finally&lt;/code&gt;-block returns a value, this value becomes the return value of the entire &lt;code&gt;try-catch-finally&lt;/code&gt; statement, regardless of any &lt;code&gt;return&lt;/code&gt; statements in the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;-blocks. This includes exceptions thrown inside of the &lt;code&gt;catch&lt;/code&gt;-block:</source>
          <target state="translated">場合は &lt;code&gt;finally&lt;/code&gt; -block戻り値は、この値は、全体の戻り値になると &lt;code&gt;try-catch-finally&lt;/code&gt; かかわらずの、文の &lt;code&gt;return&lt;/code&gt; で文 &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; -blocks。これには、 &lt;code&gt;catch&lt;/code&gt; - block内でスローされる例外が含まれます。</target>
        </trans-unit>
        <trans-unit id="887007377f2e5472d0d2ce3630b6c75058342d26" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fractionDigits&lt;/code&gt; argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.</source>
          <target state="translated">&lt;code&gt;fractionDigits&lt;/code&gt; 引数を省略した場合、小数点以下の桁数は、デフォルトで値を一意に表すために必要な桁数になります。</target>
        </trans-unit>
        <trans-unit id="3945a3dae8e73ba351db0fe2aed7b731eb381952" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;g&lt;/code&gt; flag is used, all results matching the complete regular expression will be returned, but capturing groups will not.</source>
          <target state="translated">場合 &lt;code&gt;g&lt;/code&gt; フラグが使用され、完全な正規表現に一致するすべての結果が返されますが、キャプチャグループはしません。</target>
        </trans-unit>
        <trans-unit id="ef660d2f00a701c21aacee179340977e0be81003" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;grow()&lt;/code&gt; operation fails for whatever reason, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">場合 &lt;code&gt;grow()&lt;/code&gt; 操作が何らかの理由で失敗し、&lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="62ed07c8a605b46ecbd26f7316bd0d1b6317b32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;numObj&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the &lt;code&gt;numObj&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;numObj&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;numObj&lt;/code&gt; が負で、符号が保持されます。これは、基数が2の場合でも同じです。返される文字列は、正のバイナリ表現である &lt;code&gt;numObj&lt;/code&gt; がが先行 &lt;code&gt;-&lt;/code&gt; 記号、&lt;strong&gt;ない&lt;/strong&gt;の2の補数 &lt;code&gt;numObj&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="964309f504b1e8dbcd7544bd0f936b81ccb62f80" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;numObj&lt;/code&gt; is not a whole number, the 'dot' sign is used to separate the decimal places.</source>
          <target state="translated">&lt;code&gt;numObj&lt;/code&gt; が整数でない場合、小数点を区切るために「ドット」記号が使用されます。</target>
        </trans-unit>
        <trans-unit id="a28f6f94f14d2f4d2bb91f60f2a5ef633b20a00e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;precision&lt;/code&gt; argument is omitted, behaves as &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;precision&lt;/code&gt; argument is a non-integer value, it is rounded to the nearest integer.</source>
          <target state="translated">場合 &lt;code&gt;precision&lt;/code&gt; 引数が省略されている、として動作&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt;。場合 &lt;code&gt;precision&lt;/code&gt; 引数が非整数値であり、それは最も近い整数に丸められます。</target>
        </trans-unit>
        <trans-unit id="6a944bff6bb8c754d1d8d302d8f5101d5f14b110" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;radix&lt;/code&gt; is not specified, the preferred radix is assumed to be 10.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; が指定されていない場合、優先される基数は10と見なされます。</target>
        </trans-unit>
        <trans-unit id="d18fb91572aa023d50209da5a43a714383069e99" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;reviver&lt;/code&gt; only transforms some values and not others, be certain to return all untransformed values as-is, otherwise they will be deleted from the resulting object.</source>
          <target state="translated">場合 &lt;code&gt;reviver&lt;/code&gt; 唯一のいくつかの値ではなく他人を変換し、そのままですべての形質転換されていない値を返すことが確実である、そうでなければ、結果のオブジェクトから削除されます。</target>
        </trans-unit>
        <trans-unit id="a158dec28bab58d57879567bd00f0791b3830d8a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;revoke()&lt;/code&gt; function gets called, the proxy becomes unusable: Any trap to a handler will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. Once a proxy is revoked, it will remain revoked and can be garbage collected. Calling &lt;code&gt;revoke()&lt;/code&gt; again has no effect.</source>
          <target state="translated">場合 &lt;code&gt;revoke()&lt;/code&gt; 関数が呼び出される、プロキシが使用できなくなる：ハンドラに任意のトラップがスローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。プロキシが取り消されると、取り消されたままになり、ガベージコレクションの対象になります。 &lt;code&gt;revoke()&lt;/code&gt; を再度呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="fb5c716988ff9e8f76361370d17e445497a6277b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;str&lt;/code&gt; argument is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object, &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; doesn't call this method, nor create a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">場合 &lt;code&gt;str&lt;/code&gt; の引数が&lt;strong&gt;ない&lt;/strong&gt;&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; は、&lt;/a&gt;このメソッドを呼び出して、また作成しない&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="8eb4dd6a3439d48edde8782414da2fc33e520fe8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;this&lt;/code&gt; value passed to &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.of&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;this&lt;/code&gt; に渡された値 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; コンストラクタではありません、 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array.of&lt;/code&gt; の新しい作成にデフォルト値を&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="723c644a1915a6d351777f6cab8660518aaa2659" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;this&lt;/code&gt; value passed to &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.of&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;this&lt;/code&gt; に渡された値 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; コンストラクタではありません、 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array.of&lt;/code&gt; の新しい作成にデフォルト値を&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09c65f33aa598404d3369137e257e8e881b958f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;toString()&lt;/code&gt; method is called on a function created by the &lt;code&gt;Function&lt;/code&gt; constructor, &lt;code&gt;toString()&lt;/code&gt; returns the source code of a synthesized function declaration named &quot;anonymous&quot; using the provided parameters and function body.</source>
          <target state="translated">場合 &lt;code&gt;toString()&lt;/code&gt; メソッドは、によって作成された関数で呼び出される &lt;code&gt;Function&lt;/code&gt; コンストラクタ、 &lt;code&gt;toString()&lt;/code&gt; 提供されたパラメータと機能本体を使用して「匿名」という名前の合成関数宣言のソースコードを返します。</target>
        </trans-unit>
        <trans-unit id="d2d395675e98f1c324b31de3e7f800ca7f0ca1d0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;toString()&lt;/code&gt; method is called on built-in function objects or a function created by &lt;code&gt;Function.prototype.bind&lt;/code&gt;, &lt;code&gt;toString()&lt;/code&gt; returns a &lt;em&gt;native function string&lt;/em&gt; which looks like</source>
          <target state="translated">場合 &lt;code&gt;toString()&lt;/code&gt; メソッドは、組み込み関数オブジェクトまたはによって作成された関数で呼び出され &lt;code&gt;Function.prototype.bind&lt;/code&gt; 、 &lt;code&gt;toString()&lt;/code&gt; を返す&lt;em&gt;ネイティブ関数文字列&lt;/em&gt;のように見えます</target>
        </trans-unit>
        <trans-unit id="4e56640ad0ffad1ff5993fcb62e39036efe032f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;|this|&lt;/code&gt; value passed to &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.from&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">もし &lt;code&gt;|this|&lt;/code&gt; 渡された値 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; コンストラクタではありません、 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、どこ &lt;code&gt;Array.from&lt;/code&gt; が新しい作成デフォルト&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77fff64ff9eae8df8bbff897e13e7521a4049f5a" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;iterable&lt;/var&gt; contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):</source>
          <target state="translated">&lt;var&gt;iterable&lt;/var&gt; に非Promise値が含まれている場合、それらは無視されますが、返されたPromise配列値で引き続きカウントされます（Promiseが満たされている場合）。</target>
        </trans-unit>
        <trans-unit id="4d5a749e884b72ff7fdb5c875dfb8ade05e78e57" translate="yes" xml:space="preserve">
          <source>If the JavaScript interpreter cannot guarantee that all the provided arguments are numbers at the point that the call is made, it needs to either insert checks for all the arguments before the inlined code, or it cannot inline the function. Now in this particular case a smart interpreter should be able to rearrange the checks to be more optimal and not check any values that would not be used. However in many cases that's just not possible and therefore it becomes impossible to inline.</source>
          <target state="translated">JavaScript インタープリタが、呼び出しの時点で提供されたすべての引数が数値であることを保証できない場合、インライン化されたコードの前にすべての引数のチェックを挿入するか、関数をインライン化できないようにする必要があります。この特定のケースでは、スマートなインタプリタはチェックをより最適なものにアレンジし、使用されない値をチェックしないようにすることができます。しかし、多くの場合はそれができないため、インライン化が不可能になります。</target>
        </trans-unit>
        <trans-unit id="68a358bd84ef01c0635528f27a3fd8e8510d7208" translate="yes" xml:space="preserve">
          <source>If the above is written using traditional function-based syntax, then autoboxing in method calls will happen in non&amp;ndash;strict mode based on the initial &lt;em&gt;this&lt;/em&gt; value. If the initial value is &lt;code&gt;undefined&lt;/code&gt;, &lt;em&gt;this&lt;/em&gt; will be set to the global object.</source>
          <target state="translated">上記が従来の関数ベースの構文を使用して記述されている場合、メソッド呼び出しのオートボクシングは、&lt;em&gt;このthis&lt;/em&gt;の初期値に基づいて非厳密モードで行われます。初期値が &lt;code&gt;undefined&lt;/code&gt; の場合、&lt;em&gt;これ&lt;/em&gt;はグローバルオブジェクトに設定されます。</target>
        </trans-unit>
        <trans-unit id="2de2f8611418b917390e5f634cefd48a2681c4fe" translate="yes" xml:space="preserve">
          <source>If the argument cannot be converted into a number, it returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数を数値に変換できない場合は、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="f86e9bf415bebd29a0f92aca1846c02d35a1eafa" translate="yes" xml:space="preserve">
          <source>If the argument is negative zero, returns &lt;code&gt;-0&lt;/code&gt;.</source>
          <target state="translated">引数が負のゼロの場合、 &lt;code&gt;-0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="289d26426ef6dd5e6d6eab0c14be2df2d5ca5e8d" translate="yes" xml:space="preserve">
          <source>If the argument is negative, returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">引数が負の場合、 &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c6e8a717149be7c86d7d72f862e113481d8afe3c" translate="yes" xml:space="preserve">
          <source>If the argument is positive zero, returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">引数が正のゼロの場合、0を返し &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d32df946129f68834ae9d6e3c48b76560ca41a5" translate="yes" xml:space="preserve">
          <source>If the argument is positive, returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">引数が正の場合、 &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="48a314159461e2f1c2180c3f2cc15ad46da26b49" translate="yes" xml:space="preserve">
          <source>If the argument of &lt;code&gt;eval()&lt;/code&gt; is not a string, &lt;code&gt;eval()&lt;/code&gt; returns the argument unchanged. In the following example, the &lt;code&gt;String&lt;/code&gt; constructor is specified and &lt;code&gt;eval()&lt;/code&gt; returns a &lt;code&gt;String&lt;/code&gt; object rather than evaluating the string.</source>
          <target state="translated">引数場合 &lt;code&gt;eval()&lt;/code&gt; 文字列ではない、 &lt;code&gt;eval()&lt;/code&gt; 、引数をそのまま返します。次の例では、 &lt;code&gt;String&lt;/code&gt; コンストラクタが指定され、 &lt;code&gt;eval()&lt;/code&gt; は文字列を評価するのではなく、 &lt;code&gt;String&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="1bfa86a1ae20fafacc59165c12911fe2c76ebf6c" translate="yes" xml:space="preserve">
          <source>If the argument&amp;rsquo;s first character can&amp;rsquo;t be converted to a number (it&amp;rsquo;s not any of the above characters), &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数の最初の文字を数値に変換できない場合（上記の文字のいずれでもない場合）、 &lt;code&gt;parseFloat&lt;/code&gt; は&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="9039cba0fc2b860a2bac0dd4ce6f62caa5dec6d9" translate="yes" xml:space="preserve">
          <source>If the arguments are not of the type string, they are converted to string values before concatenating.</source>
          <target state="translated">引数が文字列型でない場合は、連結する前に文字列値に変換されます。</target>
        </trans-unit>
        <trans-unit id="8fa2bcd893cb4d56cf48e54162eb8eabb074cee3" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">配列が空で、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="251133e014c170d65b3f1b94cd31ef8f9657cbc6" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, or if &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided but the array is empty, the solo value would be returned without calling &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">配列が空で、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。配列に要素が1つだけあり（位置に関係なく）、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、または &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されているが配列が空の場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="8ca4c7e25be73952009dedc5b8fea1da899df392" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;initialValue &lt;/code&gt;was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;initialValue &lt;/code&gt;was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">配列が空で、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。配列に要素が1つしかなく（位置に関係なく）、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が指定されているが配列が空の場合、 &lt;code&gt;callback&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="2c59f20390f4add64d4abadd81feb605dba0b978" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;initialValue&lt;/code&gt; is provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;initialValue&lt;/code&gt; is provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the array is empty, the solo value will be returned &lt;em&gt;without calling &lt;code&gt;callback&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">配列が空で、 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。配列に要素が1つだけあり（位置に関係なく）、 &lt;code&gt;initialValue&lt;/code&gt; が提供されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が提供されているが配列が空の場合、&lt;em&gt; &lt;code&gt;callback&lt;/code&gt; &lt;/em&gt;&lt;em&gt;を呼び出さずに&lt;/em&gt;ソロ値が返され&lt;em&gt;ます&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1066bdb8f6e775da5b0f08dd139c62f7735718b8" translate="yes" xml:space="preserve">
          <source>If the array is modified during iteration, other elements might be skipped.</source>
          <target state="translated">反復中に配列が変更された場合、他の要素はスキップされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b7918e87d675662b81e34c9d4d3015efc6c03c96" translate="yes" xml:space="preserve">
          <source>If the array only has one element (regardless of position) and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, or if &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided but the array is empty, the solo value will be returned &lt;em&gt;without &lt;/em&gt;calling&lt;em&gt; &lt;code&gt;callback&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">配列に要素が1つしかなく（位置に関係なく）、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、または &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されているが配列が空の場合、&lt;em&gt; &lt;code&gt;callback&lt;/code&gt; &lt;/em&gt;&lt;em&gt;を&lt;/em&gt;呼び出さ&lt;em&gt;ずに&lt;/em&gt;ソロ値が返され&lt;em&gt;ます&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;em&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e8c9b894a110d1dce237c3ffe9e8ff7d483f6e8" translate="yes" xml:space="preserve">
          <source>If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker thread, retrieves remote file, etc).</source>
          <target state="translated">プロパティ値の計算にコストがかかる場合(RAMやCPUに多くの時間がかかる、ワーカースレッドをスポーンする、リモートファイルを取得するなど)。</target>
        </trans-unit>
        <trans-unit id="b4773ffb9070fe50ec4b5a95d53687ea8941a3c4" translate="yes" xml:space="preserve">
          <source>If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker threads, retrieves remote file, etc).</source>
          <target state="translated">プロパティ値の計算にコストがかかる場合(RAMやCPUに多くの時間がかかる、ワーカースレッドをスポーンする、リモートファイルを取得するなど)。</target>
        </trans-unit>
        <trans-unit id="97084eab376f3b04d4908cc6bf47f923311c72b1" translate="yes" xml:space="preserve">
          <source>If the converted 32-bit unsigned integer is &lt;code&gt;0&lt;/code&gt;, then return &lt;code&gt;32&lt;/code&gt;, because all bits are &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">変換された32ビット符号なし整数が &lt;code&gt;0&lt;/code&gt; の場合、すべてのビットが &lt;code&gt;0&lt;/code&gt; であるため、 &lt;code&gt;32&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0ad167e307d5ae6b6eba5969fea22aadee5ee633" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初のオブジェクトに強制変換されます。</target>
        </trans-unit>
        <trans-unit id="f5e9511e31d3fc65e2014860d72bf862465ad596" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初にオブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="1fce2befc5daf124a888421997f4eb1a74803bb3" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初にオブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="74367fdf24ade95ee132ed1601c1dd829d6eab8f" translate="yes" xml:space="preserve">
          <source>If the first character cannot be converted to a number with the radix in use, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">基数を使用して最初の文字を数値に変換できない場合、 &lt;code&gt;parseInt&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ace5bb08886884c70b8510126b7ab1ac0624e793" translate="yes" xml:space="preserve">
          <source>If the first character cannot be converted to a number, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">最初の文字を数値に変換できない場合、 &lt;code&gt;parseInt&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2466baa3d5ce80a7bc532ef0c023761bde57195c" translate="yes" xml:space="preserve">
          <source>If the first parameter is an object, each slot in the array will reference that object.</source>
          <target state="translated">最初のパラメータがオブジェクトの場合、配列の各スロットはそのオブジェクトを参照します。</target>
        </trans-unit>
        <trans-unit id="e830391a32752966b6f8d6e46ae869596b43464d" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の不変条件に違反している場合、プロキシは&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="02ea11ae320384d65baba2b2012559732cdf307a" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a TypeError:</source>
          <target state="translated">以下の不変量に違反した場合、プロキシはTypeErrorをスローします。</target>
        </trans-unit>
        <trans-unit id="9a774c38f7a09fed2dfaac1cf3398252fa33b21d" translate="yes" xml:space="preserve">
          <source>If the fractional portion of the argument is greater than 0.5, the argument is rounded to the integer with the next higher absolute value. If it is less than 0.5, the argument is rounded to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the argument is rounded to the next integer in the direction of +&amp;infin;. &lt;strong&gt;Note that this differs from many languages' &lt;code&gt;round()&lt;/code&gt; functions, which often round this case to the next integer &lt;em&gt;away from zero&lt;/em&gt;&lt;/strong&gt;, instead giving a different result in the case of negative numbers with a fractional part of exactly 0.5.</source>
          <target state="translated">引数の小数部分が0.5より大きい場合、引数は次に大きい絶対値の整数に丸められます。 0.5未満の場合、引数は絶対値の小さい整数に丸められます。小数部分がちょうど0.5の場合、引数は+&amp;infin;の方向にある次の整数に丸められます。&lt;strong&gt;これは多くの言語の &lt;code&gt;round()&lt;/code&gt; 関数とは異なることに注意してください。この関数は、多くの場合、このケースを&lt;em&gt;0から離れ&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;た次の整数に丸め&lt;/strong&gt;ますが、小数部がちょうど0.5の負の数の場合に異なる結果を返します。</target>
        </trans-unit>
        <trans-unit id="b0634e6f899b35ea60f41dd19d559af0166b4abf" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;eval&lt;/code&gt; is invoked by an expression of the form &lt;code&gt;eval(...)&lt;/code&gt; in strict mode code, the code will be evaluated as strict mode code. The code may explicitly invoke strict mode, but it's unnecessary to do so.</source>
          <target state="translated">関数 &lt;code&gt;eval&lt;/code&gt; がストリクトモードコードで &lt;code&gt;eval(...)&lt;/code&gt; 形式の式によって呼び出された場合、コードはストリクトモードコードとして評価されます。コードは明示的に厳格モードを呼び出すことができますが、そうする必要はありません。</target>
        </trans-unit>
        <trans-unit id="24479fad2ce8f41c59aa63feefedbe701c9c9fa0" translate="yes" xml:space="preserve">
          <source>If the function passed as handler to &lt;code&gt;then&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt;, an equivalent &lt;code&gt;Promise&lt;/code&gt; will be exposed to the subsequent &lt;code&gt;then&lt;/code&gt; in the method chain. The below snippet simulates asynchronous code with the &lt;code&gt;setTimeout&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; ハンドラとして渡された関数が &lt;code&gt;Promise&lt;/code&gt; を返す場合、同等の &lt;code&gt;Promise&lt;/code&gt; がメソッドチェーン内の後続の &lt;code&gt;then&lt;/code&gt; に公開されます。以下のスニペットは、 &lt;code&gt;setTimeout&lt;/code&gt; 関数を使用して非同期コードをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="d889ec98d8457e0aea924810e5726b978b821209" translate="yes" xml:space="preserve">
          <source>If the function should be in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, and the entire script or enclosing function is also okay to be in strict mode, you can move the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive outside of the function:</source>
          <target state="translated">関数を&lt;a href=&quot;../strict_mode&quot;&gt;strictモードに&lt;/a&gt;する必要があり、スクリプト全体またはそれを囲む関数もstrictモードにすることに問題がない場合は、 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ディレクティブを関数の外に移動できます。</target>
        </trans-unit>
        <trans-unit id="32ec2a558d2d7d263d497637245a807ee03c4f24" translate="yes" xml:space="preserve">
          <source>If the host system is configured for daylight saving, the offset will change depending on the date and time that the Date represents and that daylight saving applies.</source>
          <target state="translated">ホストシステムがサマータイム用に設定されている場合、オフセットは日付が表す日時とサマータイムが適用される日時に応じて変更されます。</target>
        </trans-unit>
        <trans-unit id="62f63a4a41145b733714a201b2e285ab0739d3b7" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;0&quot;, &lt;var&gt;radix&lt;/var&gt; is eight (octal) or 10 (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet. For this reason &lt;code&gt;parseInt&lt;/code&gt;.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「0」で始まる場合、 &lt;var&gt;radix&lt;/var&gt; は8（8進数）または10（10進数）です。どの基数を選択するかは、実装によって異なります。ECMAScript 5は、10（10進数）が使用されることを指定していますが、すべてのブラウザーがまだこれをサポートしているわけではありません。このため、 &lt;code&gt;parseInt&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="014fd7b5028fdfd4181a76d255e1c44887ca6dae" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;0x&quot; or &quot;0X&quot;, &lt;var&gt;radix&lt;/var&gt; is 16 (hexadecimal) and the remainder of the string is parsed.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「0x」または「0X」で始まる場合、 &lt;var&gt;radix&lt;/var&gt; は16（16進数）であり、残りの文字列は解析されます。</target>
        </trans-unit>
        <trans-unit id="f247d76b51985796282d05631d015cfe0ded8f0d" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;&lt;code&gt;0&lt;/code&gt;&quot; (a zero), &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is assumed to be &lt;code&gt;8&lt;/code&gt; (octal) or &lt;code&gt;10&lt;/code&gt; (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 clarifies that &lt;code&gt;10&lt;/code&gt; (decimal) &lt;em&gt;should&lt;/em&gt; be used, but not all browsers support this yet. For this reason, &lt;strong&gt;always specify a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; when using &lt;code&gt;parseInt&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「 &lt;code&gt;0&lt;/code&gt; 」（ゼロ）で始まる場合、 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; は &lt;code&gt;8&lt;/code&gt; （8進数）または &lt;code&gt;10&lt;/code&gt; （10進数）と見なされます。どの基数が選択されるかは、実装によって異なります。 ECMAScript 5は、 &lt;code&gt;10&lt;/code&gt; （10進数）&lt;em&gt;を&lt;/em&gt;使用する&lt;em&gt;必要&lt;/em&gt;があることを明確にしていますが、すべてのブラウザーがまだこれをサポートしているわけではありません。このため、&lt;strong&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;を使用&lt;/strong&gt;&lt;strong&gt;する場合は &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; &lt;/strong&gt;、&lt;strong&gt;常に&lt;/strong&gt;&lt;strong&gt;基数を&lt;/strong&gt;&lt;strong&gt;指定してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="85d899c9908f1b8511a58cfbfbbc6efdff187932" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;&lt;code&gt;0x&lt;/code&gt;&quot; or &quot;&lt;code&gt;0X&lt;/code&gt;&quot; (a zero, followed by lowercase or uppercase X), &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is assumed to be &lt;code&gt;16&lt;/code&gt; and the rest of the string is parsed as a hexidecimal number.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「 &lt;code&gt;0x&lt;/code&gt; 」または「 &lt;code&gt;0X&lt;/code&gt; 」（ゼロの後に小文字または大文字のXが続く）で始まる場合、 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; は &lt;code&gt;16&lt;/code&gt; と見なされ、文字列の残りの部分は16進数として解析されます。</target>
        </trans-unit>
        <trans-unit id="7391a0c805a3a7880ff98c62370413cf4a99a3c4" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is 10 (decimal).</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が他の値で始まる場合、基数は10（10進数）です。</target>
        </trans-unit>
        <trans-unit id="d48b16e0cf301f14341f3f7bd0a5ddc3c6245fa4" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is &lt;code&gt;10&lt;/code&gt; (decimal).</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が他の値で始まる場合、基数は &lt;code&gt;10&lt;/code&gt; （10進数）です。</target>
        </trans-unit>
        <trans-unit id="d8f0eb6abc2d809f6720afec4140ffa6145e1b16" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already resolved/rejected promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the array:</source>
          <target state="translated">iterableに1つ以上のnon-promise値および/またはすでに解決/拒否されたpromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; は配列で見つかったこれらの値の最初に解決されます。</target>
        </trans-unit>
        <trans-unit id="42bb8061af2674b09d2e81c3c794c84558b5c8c1" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already resolved/rejected promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the iterable.</source>
          <target state="translated">iterableに1つ以上の非Promise値および/またはすでに解決/拒否されたPromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; は、Iterableで見つかったこれらの値の最初に解決されます。</target>
        </trans-unit>
        <trans-unit id="eba5348fb21f253314c74035ef8a94d981d39d85" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already settled promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the array:</source>
          <target state="translated">iterableに1つ以上の非promise値および/またはすでに解決されたpromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; は配列内で見つかったこれらの値の最初のものに解決されます。</target>
        </trans-unit>
        <trans-unit id="8455736e47a9a384da44aad6c284be518f32649f" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already settled promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the iterable.</source>
          <target state="translated">iterableに1つ以上の非promise値および/またはすでに解決されたpromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; はiterableで見つかったこれらの値の最初のものに解決されます。</target>
        </trans-unit>
        <trans-unit id="133cdb90b6400a76c679993e7493ba162315d6a4" translate="yes" xml:space="preserve">
          <source>If the iterable passed is empty, the promise returned will be forever pending.</source>
          <target state="translated">渡された iterable が空の場合、返された約束は永遠に保留されます。</target>
        </trans-unit>
        <trans-unit id="5929c9470016412d62a0f7f3f9a21acab412f404" translate="yes" xml:space="preserve">
          <source>If the match fails, the &lt;code&gt;exec()&lt;/code&gt; method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, and sets &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">一致が失敗した場合、 &lt;code&gt;exec()&lt;/code&gt; メソッドは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返し、&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;0&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="fed5bcc169dd3c7fb57fbf0f3eae42cda09790da" translate="yes" xml:space="preserve">
          <source>If the match fails, the &lt;code&gt;exec()&lt;/code&gt; method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一致が失敗した場合、 &lt;code&gt;exec()&lt;/code&gt; メソッドは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="992c9b88d4c619e867d5faf6f752e55dcfba43d1" translate="yes" xml:space="preserve">
          <source>If the match succeeds, the &lt;code&gt;exec()&lt;/code&gt; method returns an array (with extra properties &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt;; see below) and updates the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.</source>
          <target state="translated">一致が成功すると、 &lt;code&gt;exec()&lt;/code&gt; メソッドは配列（追加のプロパティ &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;input&lt;/code&gt; を含む;以下を参照）を返し、正規表現オブジェクトの&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティを更新します。返される配列には、最初の項目として一致したテキストがあり、次に一致したテキストの括弧で囲まれたキャプチャグループごとに1つの項目があります。</target>
        </trans-unit>
        <trans-unit id="ad048d5802a4482d98378bb3e60f9d8891c84dff" translate="yes" xml:space="preserve">
          <source>If the match succeeds, the &lt;code&gt;exec()&lt;/code&gt; method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.</source>
          <target state="translated">一致が成功すると、 &lt;code&gt;exec()&lt;/code&gt; メソッドは配列を返し、正規表現オブジェクトのプロパティを更新します。返された配列には、最初の項目として一致したテキストがあり、次に、キャプチャされたテキストを含む、一致したキャプチャ括弧ごとに1つの項目があります。</target>
        </trans-unit>
        <trans-unit id="06b04d89d7ced98dfbbede5881b9b567808008e8" translate="yes" xml:space="preserve">
          <source>If the method is a function in &lt;a href=&quot;../../strict_mode&quot;&gt;non-strict mode&lt;/a&gt;, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be replaced with the global object, and primitive values will be converted to objects.</source>
          <target state="translated">メソッドが&lt;a href=&quot;../../strict_mode&quot;&gt;非厳密モードの&lt;/a&gt;関数である場合、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;はグローバルオブジェクトに置き換えられ、プリミティブ値はオブジェクトに変換されます。</target>
        </trans-unit>
        <trans-unit id="d74a4cb5fa65d9b34a16e5d974e6dcf978094959" translate="yes" xml:space="preserve">
          <source>If the number is greater than 1e+21 (including) or less than 1e-7 (including), it will return &lt;code&gt;1&lt;/code&gt;. (when using radix 10).</source>
          <target state="translated">数値が1e + 21（含む）より大きいか1e-7（含む）より小さい場合、 &lt;code&gt;1&lt;/code&gt; が返されます。（基数10を使用する場合）。</target>
        </trans-unit>
        <trans-unit id="076b090beef22f90ac6afa326097c3fb2ace6350" translate="yes" xml:space="preserve">
          <source>If the object is sealed/frozen then the change has no effect and no exception is thrown:</source>
          <target state="translated">オブジェクトが封印/凍結されている場合は、変更は何の効果もなく、例外はスローされません。</target>
        </trans-unit>
        <trans-unit id="ea7372e8703a5521adb89c3b333094c42fd39770" translate="yes" xml:space="preserve">
          <source>If the only argument passed to the &lt;code&gt;Array&lt;/code&gt; constructor is an integer between 0 and 2&lt;sup&gt;32&lt;/sup&gt;-1 (inclusive), this returns a new JavaScript array with its &lt;code&gt;length&lt;/code&gt; property set to that number (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;arrayLength&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values). If the argument is any other number, a &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception is thrown.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; コンストラクターに渡される唯一の引数が0〜2 &lt;sup&gt;32&lt;/sup&gt; -1（両端を含む）の間の整数である場合、これはその &lt;code&gt;length&lt;/code&gt; 設定された新しいJavaScript配列を返します（&lt;strong&gt;注：&lt;/strong&gt;これは &lt;code&gt;arrayLength&lt;/code&gt; 空のスロットの配列を意味します。実際の &lt;code&gt;undefined&lt;/code&gt; 値を持つスロット）。引数が他の数値の場合、&lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="3de7d3547772b56e44d561daed2b5f4e5c0051e3" translate="yes" xml:space="preserve">
          <source>If the operation fails, the promise rejects with a &lt;a href=&quot;compileerror&quot;&gt;&lt;code&gt;WebAssembly.CompileError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linkerror&quot;&gt;&lt;code&gt;WebAssembly.LinkError&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt;&lt;/a&gt;, depending on the cause of the failure.</source>
          <target state="translated">操作が失敗すると、失敗の原因に応じて、&lt;a href=&quot;compileerror&quot;&gt; &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;linkerror&quot;&gt; &lt;code&gt;WebAssembly.LinkError&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt; &lt;/a&gt;でプロミスが拒否されます。</target>
        </trans-unit>
        <trans-unit id="c7ae6267575070773ce0e34354913d3b4cb253db" translate="yes" xml:space="preserve">
          <source>If the parameter cannot be converted to a number, or it is &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt; (&lt;code&gt;NaN&lt;/code&gt;), &lt;code&gt;Math.fround()&lt;/code&gt; will return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">パラメータを数値に変換、またはそれができない場合、&lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;非数&lt;/a&gt;（ &lt;code&gt;NaN&lt;/code&gt; で）、 &lt;code&gt;Math.fround()&lt;/code&gt; 戻ります &lt;code&gt;NaN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4cb915c64d1dc820b0c684cdac48718bd6a3e1d" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, &lt;code&gt;delete&lt;/code&gt; will not have any effect and will return &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">削除しようとしているプロパティが存在しない場合、 &lt;code&gt;delete&lt;/code&gt; は効果がなく、 &lt;code&gt;true&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="9571ccb67395bfe77750e491cdef9006177ddfa8" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, &lt;code&gt;delete&lt;/code&gt; will not have any effect and will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">削除しようとしているプロパティが存在しない場合、 &lt;code&gt;delete&lt;/code&gt; は効果がなく、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="928fd5633160fac29d5cef2872c5f9bc821a1144" translate="yes" xml:space="preserve">
          <source>If the regex has the global flag set, &lt;code&gt;test()&lt;/code&gt; will advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; of the regex. A subsequent use of &lt;code&gt;test()&lt;/code&gt; will start the search at the substring of &lt;code&gt;str&lt;/code&gt; specified by &lt;code&gt;lastIndex&lt;/code&gt; (&lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;code&gt;lastIndex&lt;/code&gt; property). It is worth noting that the &lt;code&gt;lastIndex&lt;/code&gt; will not reset when testing a different string.</source>
          <target state="translated">正規表現にグローバルフラグが設定されている場合、 &lt;code&gt;test()&lt;/code&gt; は正規表現の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;を進めます。その後 &lt;code&gt;test()&lt;/code&gt; を使用すると、 &lt;code&gt;lastIndex&lt;/code&gt; で指定された &lt;code&gt;str&lt;/code&gt; の部分文字列から検索が開始されます（&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;も &lt;code&gt;lastIndex&lt;/code&gt; プロパティを進めます）。別の文字列をテストしても、 &lt;code&gt;lastIndex&lt;/code&gt; はリセットされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="54e623d784ebb3ca9ec36dc663b3600d3fafdecc" translate="yes" xml:space="preserve">
          <source>If the regular expression does not include the &lt;code&gt;g&lt;/code&gt; flag, &lt;code&gt;str.match()&lt;/code&gt; will return the same result as &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規表現に &lt;code&gt;g&lt;/code&gt; フラグが含まれていない場合、 &lt;code&gt;str.match()&lt;/code&gt; はRegExp.exec（）と同じ結果を&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ce0d349d09340572916f1b2c5d1d97584f2175f9" translate="yes" xml:space="preserve">
          <source>If the regular expression does not include the &lt;code&gt;g&lt;/code&gt; flag, &lt;code&gt;str.match()&lt;/code&gt; will return the same result as &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;. The returned &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; has an extra &lt;code&gt;input&lt;/code&gt; property, which contains the original string that was parsed. In addition, it has an &lt;code&gt;index&lt;/code&gt; property, which represents the zero-based index of the match in the string.</source>
          <target state="translated">正規表現に &lt;code&gt;g&lt;/code&gt; フラグが含まれていない場合、 &lt;code&gt;str.match()&lt;/code&gt; はRegExp.exec（）と同じ結果を&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;ます。返された&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;は、解析された元の文字列を含む追加の &lt;code&gt;input&lt;/code&gt; プロパティがあります。さらに、文字列内の一致のゼロから始まるインデックスを表す &lt;code&gt;index&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="30138364a3c3af0aa6191de310201697ce047a82" translate="yes" xml:space="preserve">
          <source>If the regular expression includes the &lt;code&gt;g&lt;/code&gt; flag, the method returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing all matched substrings rather than match objects. Captured groups are not returned. If there were no matches, the method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規表現に &lt;code&gt;g&lt;/code&gt; フラグが含まれている場合、メソッドは、一致オブジェクトではなく、一致したすべての部分文字列を含む&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を返します。キャプチャされたグループは返されません。一致するものがなかった場合、メソッドは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="8b959552ef94320337e1ed0aeb1c7362f749576d" translate="yes" xml:space="preserve">
          <source>If the returned promise resolves, it is resolved with an aggregating array of the values from the resolved promises, in the same order as defined in the iterable of multiple promises.</source>
          <target state="translated">返されたプロミスが解決された場合、解決されたプロミスからの値の集約配列で解決され、複数のプロミスのイテレータブルで定義されている順序と同じ順序で解決されます。</target>
        </trans-unit>
        <trans-unit id="9aad8e2f8495619d7aae6f0803f38d9b68950bdc" translate="yes" xml:space="preserve">
          <source>If the returned promise resolves, it is resolved with the value of the first promise in the iterable that resolved.</source>
          <target state="translated">返されたプロミスが解決された場合、解決されたイテレータブルの最初のプロミスの値で解決されます。</target>
        </trans-unit>
        <trans-unit id="a177c490157a79f5a76e27fe6956e99555e128cb" translate="yes" xml:space="preserve">
          <source>If the selected language tag had a Unicode extension substring, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the language tag. For example, the &quot;&lt;code&gt;co&lt;/code&gt;&quot; key (collation) is only supported by &lt;a href=&quot;intl/collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, and its &quot;&lt;code&gt;phonebk&lt;/code&gt;&quot; value is only supported for German.</source>
          <target state="translated">選択した言語タグにUnicode拡張部分文字列が含まれている場合、その拡張機能を使用して、構築されたオブジェクトまたは関数の動作をカスタマイズできるようになりました。各コンストラクターまたは関数は、Unicode拡張用に定義されたキーのサブセットのみをサポートし、サポートされる値は多くの場合、言語タグに依存します。たとえば、「 &lt;code&gt;co&lt;/code&gt; 」キー（照合）は&lt;a href=&quot;intl/collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;でのみサポートされ、その「 &lt;code&gt;phonebk&lt;/code&gt; 」値はドイツ語でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="52e0cd12612909bf0c4a612be8384c6d969c9ac4" translate="yes" xml:space="preserve">
          <source>If the selected language tag had a Unicode extension substring, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the language tag. For example, the &lt;code&gt;&quot;co&quot;&lt;/code&gt; key (collation) is only supported by &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, and its &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; value is only supported for German.</source>
          <target state="translated">選択した言語タグにUnicode拡張部分文字列が含まれていた場合、その拡張を使用して、作成されたオブジェクトまたは関数の動作をカスタマイズします。各コンストラクターまたは関数は、Unicode拡張用に定義されたキーのサブセットのみをサポートし、サポートされる値は、言語タグに依存することがよくあります。たとえば、 &lt;code&gt;&quot;co&quot;&lt;/code&gt; キー（照合）は&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;でのみサポートされており、その &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; 値はドイツ語でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="0051f2f9e3b0c3c5f0efed5769af9ea4eeaaac1c" translate="yes" xml:space="preserve">
          <source>If the separator is an array, then that Array is coerced to a String and used as a separator.</source>
          <target state="translated">区切り文字が配列の場合は、その配列を強制的に文字列にして区切り文字として使用します。</target>
        </trans-unit>
        <trans-unit id="1b286f7a3b45c9d956b26ab348a1958c44fb5f42" translate="yes" xml:space="preserve">
          <source>If the source array is a typed array, the two arrays may share the same underlying &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;; the JavaScript engine will intelligently &lt;strong&gt;copy&lt;/strong&gt; the source range of the buffer to the destination range.</source>
          <target state="translated">ソース配列が型付き配列である場合、2つの配列は同じ基になる&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; を&lt;/a&gt;共有できます。JavaScriptエンジンは、バッファーのソース範囲を宛先範囲にインテリジェントに&lt;strong&gt;コピー&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="b353db1fb14273700c08d890316bc02b3fd861ed" translate="yes" xml:space="preserve">
          <source>If the source value is a reference to an object, it only copies the reference value.</source>
          <target state="translated">ソース値がオブジェクトへの参照である場合、参照値のみをコピーします。</target>
        </trans-unit>
        <trans-unit id="6a4ef9aab8e43c2b5e9c78c499c653ff6b14a42f" translate="yes" xml:space="preserve">
          <source>If the specified number of elements to insert differs from the number of elements being removed, the array's &lt;code&gt;length&lt;/code&gt; will be changed.</source>
          <target state="translated">指定した挿入要素数と削除要素数が異なる場合、配列の &lt;code&gt;length&lt;/code&gt; さが変更されます。</target>
        </trans-unit>
        <trans-unit id="11118b48f62c5ceba27585b77797df31fab20d6a" translate="yes" xml:space="preserve">
          <source>If the string matches the expression, it will return an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing the entire matched string as the first element, followed by any results captured in parentheses. If there were no matches, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">文字列が式と一致すると、最初の要素として一致した文字列全体を含む&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;が返され、その後に括弧で囲まれた結果が続きます。一致がなかった場合は、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="8df86ca042f37da0bf772e9d1368d49d51710bb8" translate="yes" xml:space="preserve">
          <source>If the string you're calling &lt;code&gt;eval()&lt;/code&gt; on contains data (for example, an array: &lt;code&gt;&quot;[1, 2, 3]&quot;&lt;/code&gt;), as opposed to code, you should consider switching to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;, which allows the string to use a subset of JavaScript syntax to represent data. See also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions&quot;&gt;Downloading JSON and JavaScript in extensions&lt;/a&gt;.</source>
          <target state="translated">コードではなく、 &lt;code&gt;eval()&lt;/code&gt; を呼び出す文字列にデータ（たとえば、配列： &lt;code&gt;&quot;[1, 2, 3]&quot;&lt;/code&gt; ）が含まれている場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;に切り替えることを検討してください。データを表すJavaScript構文のサブセット。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions&quot;&gt;拡張機能でのJSONおよびJavaScriptのダウンロード&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b7e003732737f7eeca987515a181e7a6c0886873" translate="yes" xml:space="preserve">
          <source>If the target object is not extensible, then the result List must contain all the keys of the own properties of the target object and no other values.</source>
          <target state="translated">ターゲット・オブジェクトが拡張可能でない場合、結果リストはターゲット・オブジェクトの自身のプロパティのすべてのキーを含み、それ以外の値は含まれていない必要があります。</target>
        </trans-unit>
        <trans-unit id="e848b7dd6ac3915d3833ea99453aeb25eaa52820" translate="yes" xml:space="preserve">
          <source>If the target value is an integer, return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. If the value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, return &lt;code&gt;false&lt;/code&gt;. The method will also return &lt;code&gt;true&lt;/code&gt; for floating point numbers that can be represented as integer.</source>
          <target state="translated">ターゲット値が整数の場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。値が&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;false&lt;/code&gt; を返します。このメソッドは、整数として表すことができる浮動小数点数に対しても &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bdd4f6c5189b324bbcf046826b6268c8f7662e9b" translate="yes" xml:space="preserve">
          <source>If the target value is an integer, return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. If the value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or infinite, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ターゲット値が整数の場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。値が&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;または無限の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3b163d07b932ce80b4a6e15721f922f7fb30650e" translate="yes" xml:space="preserve">
          <source>If the typed array is empty and no &lt;code&gt;initialValue &lt;/code&gt;was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the typed array has only one element (regardless of position) and no &lt;code&gt;initialValue &lt;/code&gt;was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the typed array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">型付き配列が空で、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。型付き配列に（位置に関係なく）要素が1つだけあり、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が指定されているが型付き配列が空の場合、 &lt;code&gt;callback&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="32f1892613c48627e71e01cfec6b0670419135f0" translate="yes" xml:space="preserve">
          <source>If the typed array is empty and no &lt;code&gt;initialValue&lt;/code&gt; was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the typed array has only one element (regardless of position) and no &lt;code&gt;initialValue&lt;/code&gt; was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the typed array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">型付き配列が空で、 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。型付き配列に（位置に関係なく）要素が1つだけあり、 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が指定されているが型付き配列が空の場合、 &lt;code&gt;callback&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="510bd268f45e4d1729f707209afb02f9c7b0083d" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;a href=&quot;#toJSON()_behavior&quot;&gt;toJSON()&lt;/a&gt; method, it's responsible to define what data will be serialized.</source>
          <target state="translated">値に&lt;a href=&quot;#toJSON()_behavior&quot;&gt;toJSON（）&lt;/a&gt;メソッドがある場合、シリアル化するデータを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="e00674da0b18b7b91ffb49a53cd9a91a4d73a00f" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;code&gt;&lt;a href=&quot;#toJSON_behavior&quot;&gt;toJSON()&lt;/a&gt;&lt;/code&gt; method, it's responsible to define what data will be serialized.</source>
          <target state="translated">値に &lt;code&gt;&lt;a href=&quot;#toJSON_behavior&quot;&gt;toJSON()&lt;/a&gt;&lt;/code&gt; メソッドがある場合、シリアル化されるデータを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="54140dc9eb589e0c204678e22bbbdb9cf79a2d04" translate="yes" xml:space="preserve">
          <source>If the value is &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object.</source>
          <target state="translated">値が&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、空のオブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="561c9acef125c9f472e17089eda2c02ed61b2c26" translate="yes" xml:space="preserve">
          <source>If the value is a string and first character cannot be converted to a number, &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値が文字列で、最初の文字を数値に変換できない場合、 &lt;code&gt;parseFloat&lt;/code&gt; は&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="ef9bb279e649c6b04963f948bf7ce36a932c8c2d" translate="yes" xml:space="preserve">
          <source>If the value is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;true&lt;/code&gt; is returned; otherwise, &lt;code&gt;false&lt;/code&gt; is.</source>
          <target state="translated">値が&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;true&lt;/code&gt; が返されます。それ以外の場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53a1da54003d5163c28e486b08412caa8da3e737" translate="yes" xml:space="preserve">
          <source>If the value is an object already, it will return the value.</source>
          <target state="translated">値が既にオブジェクトである場合は、その値を返します。</target>
        </trans-unit>
        <trans-unit id="1640abfaf088fbcbdcadda1eedf8dab180bb6242" translate="yes" xml:space="preserve">
          <source>If the value is not a &lt;code&gt;Promise&lt;/code&gt;, it converts the value to a resolved &lt;code&gt;Promise&lt;/code&gt;, and waits for it.</source>
          <target state="translated">値が &lt;code&gt;Promise&lt;/code&gt; でない場合、値を解決済みの &lt;code&gt;Promise&lt;/code&gt; に変換し、それを待ちます。</target>
        </trans-unit>
        <trans-unit id="f0a64651c26d9a65bc75cc4516d6f569cc7361ac" translate="yes" xml:space="preserve">
          <source>If the value is omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">値を省略すると、代わりに &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7ea4c0759ce10f3ec998abec7f06323cfdcb044e" translate="yes" xml:space="preserve">
          <source>If the value isn't needed just now. It will be used later, or in some case it's not used at all.</source>
          <target state="translated">その値が今だけ必要ない場合。後で使用されるか、場合によっては全く使用されません。</target>
        </trans-unit>
        <trans-unit id="dcd7892bd313c45ff27bee53ccf94aa493673289" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is 0, the return value is always &lt;a href=&quot;../number/negative_infinity&quot;&gt;&lt;code&gt;-Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が0の場合、戻り値は常に&lt;a href=&quot;../number/negative_infinity&quot;&gt; &lt;code&gt;-Infinity&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d4f9318ece72f4c2eeef6e7c2a93aef5af0daf69" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is less than 0, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が0未満の場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1239996883a93b9b2c50ccbd8a405e2eb8177812" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;Math.sqrt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が負の場合、 &lt;code&gt;Math.sqrt()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="059376bc4439a5267686d0fa5d49aac6a927f1ff" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is negative, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が負の場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ac2d5fb2a300d0369ab4234e82cc168cc8762ee4" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is less than -1, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が-1より小さい場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9274a7a137b577eeaa2f04b6902d872eb4466cee" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is less than 0, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が0より小さい場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e9eb70669a6e170dc1e8ae977b8cb8a15a0498f1" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is negative, &lt;code&gt;Math.sqrt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が負の場合、 &lt;code&gt;Math.sqrt()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="6dbda7783aa9232721a5872c34710ccbbff0ffb5" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is negative, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が負の場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7c96df6c0dbc7425e0d4c9a6c302f795ee1fc7c1" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;em&gt;expression&lt;/em&gt; following the &lt;code&gt;await&lt;/code&gt; operator is not a &lt;code&gt;Promise&lt;/code&gt;, it's converted to a &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;resolved Promise&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 演算子に続く&lt;em&gt;式&lt;/em&gt;の値が &lt;code&gt;Promise&lt;/code&gt; でない場合は、&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;解決されたPromiseに&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="7777a3173c1fc93619bfe4928f7864e3ee37ca7e" translate="yes" xml:space="preserve">
          <source>If there is a constructor present in the subclass, it needs to first call super() before using &quot;this&quot;.</source>
          <target state="translated">サブクラスにコンストラクタが存在する場合、&quot;this &quot;を使用する前にまずsuper()を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="21978f541a285d4f0f6b8649673a45e9d8c65652" translate="yes" xml:space="preserve">
          <source>If there is no element at the specified position, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned. If no UTF-16 surrogate pair begins at &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt;, the code unit at &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">指定された位置に要素がない場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。何UTF-16サロゲートペアがで開始しない場合 &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; 、でコード部 &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="73a5e90cc482f2c146104da9fc8a32ddba669924" translate="yes" xml:space="preserve">
          <source>If there is no element at the specified position, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned. If no UTF-16 surrogate pair begins at &lt;code&gt;pos&lt;/code&gt;, the code unit at &lt;code&gt;pos&lt;/code&gt; is returned.</source>
          <target state="translated">指定された位置に要素がない場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。何UTF-16サロゲートペアがで開始しない場合 &lt;code&gt;pos&lt;/code&gt; 、でコード部 &lt;code&gt;pos&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="afdb33990e63ce9b5d36a9e521b9b2dbdc06c9d9" translate="yes" xml:space="preserve">
          <source>If this is a &lt;code&gt;Number&lt;/code&gt;, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just &lt;code&gt;10&lt;/code&gt;). Values less than 1 indicate that no space should be used.</source>
          <target state="translated">これが &lt;code&gt;Number&lt;/code&gt; の場合、空白として使用するスペース文字の数を示します。この数の上限は10です（それより大きい場合、値は &lt;code&gt;10&lt;/code&gt; になります）。1未満の値は、スペースを使用しないことを示します。</target>
        </trans-unit>
        <trans-unit id="4657fbccd094cf1a6aae2b07836eaa2e143cf7da" translate="yes" xml:space="preserve">
          <source>If this is a &lt;code&gt;String&lt;/code&gt;, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;), no white space is used.</source>
          <target state="translated">これが &lt;code&gt;String&lt;/code&gt; の場合、文字列（またはそれより長い場合は、文字列の最初の10文字）が空白として使用されます。このパラメーターが指定されていない場合（または&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; の場合&lt;/a&gt;）、空白は使用されません。</target>
        </trans-unit>
        <trans-unit id="3fe1411948efd2142af6ac7caf00bbd4cd925703" translate="yes" xml:space="preserve">
          <source>If this method is invoked on an object that is not a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドが&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;ではないオブジェクトで呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="fe15855eb8f13ceac6922262bfec88886e019764" translate="yes" xml:space="preserve">
          <source>If used immediately after any of the quantifiers &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;{}&lt;/code&gt;, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).</source>
          <target state="translated">数量のいずれかが、直後に使用した場合 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; 、または &lt;code&gt;{}&lt;/code&gt; は、デフォルトの貪欲（最大回数に一致）とは対照的に、数量詞を貪欲（最小回数に一致）にします。</target>
        </trans-unit>
        <trans-unit id="9fd706dc1d0360b94ec21dbf8552ac9d5f3e383e" translate="yes" xml:space="preserve">
          <source>If used postfix (for example, x--), then it returns the value before decrementing.</source>
          <target state="translated">postfix (例えば x--)を使用した場合は、デクリメントする前の値を返します。</target>
        </trans-unit>
        <trans-unit id="de1231f0f16dedb361c482a319c20aff31b05c5e" translate="yes" xml:space="preserve">
          <source>If used postfix, with operator after operand (for example, x++), then it returns the value before incrementing.</source>
          <target state="translated">オペランドの後に演算子を指定してpostfixを使用した場合(例:x++)は、インクリメントする前の値を返します。</target>
        </trans-unit>
        <trans-unit id="e6e40e35ce4cf016961cce9be2454b86125ceb4b" translate="yes" xml:space="preserve">
          <source>If used prefix (for example, --x), then it returns the value after decrementing.</source>
          <target state="translated">プレフィックス(--xなど)を使用した場合は、デクリメントした後の値を返します。</target>
        </trans-unit>
        <trans-unit id="9df9321ebb8182da95c82368fad1cd967b2ab528" translate="yes" xml:space="preserve">
          <source>If used prefix with operator before operand (for example, ++x), then it returns the value after incrementing.</source>
          <target state="translated">オペランドの前に演算子を接頭辞として使用した場合(例:++x)は、インクリメント後の値を返します。</target>
        </trans-unit>
        <trans-unit id="f7ff4cc4432ffc5f89ff00a0952d717a8a1a68b0" translate="yes" xml:space="preserve">
          <source>If we rewrite the above using traditional function-based syntax in non&amp;ndash;strict mode, then &lt;code&gt;this&lt;/code&gt; method calls are automatically bound to the initial &lt;code&gt;this&lt;/code&gt; value, which by default is the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Global_object&quot;&gt;global object&lt;/a&gt;. In strict mode, autobinding will not happen; the value of &lt;code&gt;this&lt;/code&gt; remains as passed.</source>
          <target state="translated">非厳密モードで従来の関数ベースの構文を使用して上記を書き直すと、 &lt;code&gt;this&lt;/code&gt; メソッド呼び出しは、デフォルトで&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Global_object&quot;&gt;グローバルオブジェクト&lt;/a&gt;である最初の &lt;code&gt;this&lt;/code&gt; 値に自動的にバインドされます。厳密モードでは、自動バインドは発生しません。値は &lt;code&gt;this&lt;/code&gt; 合格として残ります。</target>
        </trans-unit>
        <trans-unit id="263dbd217b7b782c539a10e8e47d0cd7d0c685a1" translate="yes" xml:space="preserve">
          <source>If we want to calculate the height of an equalateral triangle, and we know its side length is 100, we can use the formulae &lt;em&gt;length of the adjacent multiplied by the tangent of the angle is equal to the opposite.&lt;/em&gt;</source>
          <target state="translated">等辺三角形の高さを計算する必要があり、その辺の長さが100であることがわかっている場合&lt;em&gt;は、隣接する&lt;/em&gt;三角形の&lt;em&gt;長さに角度の接線を掛けたものが反対に等しい&lt;/em&gt;という式を使用できます&lt;em&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44416e4cb440058b3e2168092fa043d526ea6bd6" translate="yes" xml:space="preserve">
          <source>If we want to export a single value or to have a fallback value for our module, we could use a default export:</source>
          <target state="translated">単一の値をエクスポートしたり、モジュールのフォールバック値を設定したい場合は、デフォルトのエクスポートを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e8ced299cf7385e721622ed81fc4d2edb2bdf9e3" translate="yes" xml:space="preserve">
          <source>If we want to export a single value or to have a fallback value for your module, you could use a default export:</source>
          <target state="translated">単一の値をエクスポートしたい場合や、モジュールのフォールバック値を持ちたい場合は、デフォルトのエクスポートを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e1e42279903ed183e261f8299c80921fedf73370" translate="yes" xml:space="preserve">
          <source>If we want to export default, and star from another module (effectively creating a &quot;redirect&quot;):</source>
          <target state="translated">私たちはデフォルトをエクスポートする場合は、別のモジュールからスター(効果的に &quot;リダイレクト &quot;を作成します)。</target>
        </trans-unit>
        <trans-unit id="d6463f6ee85e1b3683452de8f289526c45b1d166" translate="yes" xml:space="preserve">
          <source>If you are coming from another programming language (like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHP&lt;/a&gt;), it is also easy to mix up the dot operator (&lt;code&gt;.&lt;/code&gt;) and the concatenation operator (&lt;code&gt;+&lt;/code&gt;).</source>
          <target state="translated">別のプログラミング言語（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHPなど&lt;/a&gt;）を使用している場合は、ドット演算子（ &lt;code&gt;.&lt;/code&gt; ）と連結演算子（ &lt;code&gt;+&lt;/code&gt; ）を混同することも簡単です。</target>
        </trans-unit>
        <trans-unit id="b266e11ed2f48331bcbc5cd3a2651fd6ea8db942" translate="yes" xml:space="preserve">
          <source>If you are coming from another programming language (like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHP&lt;/a&gt;), it is also easy to mix up the dot operator (&lt;code&gt;.&lt;/code&gt;) and the concatenation operator (&lt;code&gt;+&lt;/code&gt;).</source>
          <target state="translated">別のプログラミング言語（&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHPなど&lt;/a&gt;）を使用している場合は、ドット演算子（ &lt;code&gt;.&lt;/code&gt; ）と連結演算子（ &lt;code&gt;+&lt;/code&gt; ）を混同することも簡単です。</target>
        </trans-unit>
        <trans-unit id="bb66cb61a06782782fcf8588e20af249ee21a6b0" translate="yes" xml:space="preserve">
          <source>If you are coming from another programming language, it is also easy to add keywords that don't mean the same or have no meaning at all in JavaScript.</source>
          <target state="translated">他のプログラミング言語から来ている場合は、JavaScriptで同じ意味を持たないキーワードや全く意味を持たないキーワードを追加するのも簡単です。</target>
        </trans-unit>
        <trans-unit id="659845dc301670bca252df4853db8e2f3ac23b6a" translate="yes" xml:space="preserve">
          <source>If you are creating an &lt;code&gt;Array&lt;/code&gt;, using the constructor, you probably want to use the literal notation instead, as the first argument is interpreted as the length of the &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">最初の引数は &lt;code&gt;Array&lt;/code&gt; の長さと解釈されるため、コンストラクターを使用して &lt;code&gt;Array&lt;/code&gt; を作成する場合は、代わりにリテラル表記を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0d24793ed02c1f52e768f26367f343405e5dd686" translate="yes" xml:space="preserve">
          <source>If you are executing a match simply to find &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, use &lt;a href=&quot;test&quot;&gt;&lt;code&gt;RegExp.prototype.test()&lt;/code&gt;&lt;/a&gt; method or &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">あなたは、単に検索し、一致を実行している場合は &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 使用し、&lt;a href=&quot;test&quot;&gt; &lt;code&gt;RegExp.prototype.test()&lt;/code&gt; &lt;/a&gt;メソッドまたは&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;代わりに。</target>
        </trans-unit>
        <trans-unit id="23c1a323209deeb808a2a36b6ad4684b94b02231" translate="yes" xml:space="preserve">
          <source>If you are executing a match simply to find true or false, use the &lt;a href=&quot;test&quot;&gt;&lt;code&gt;RegExp.prototype.test()&lt;/code&gt;&lt;/a&gt; method or the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">trueまたはfalseを見つけるためだけに一致を実行する場合は、&lt;a href=&quot;test&quot;&gt; &lt;code&gt;RegExp.prototype.test()&lt;/code&gt; &lt;/a&gt;メソッドまたは&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="68b817fe3ff3a62bc615632f841b38339b8524eb" translate="yes" xml:space="preserve">
          <source>If you are new to JavaScript, start with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;guide&lt;/a&gt;. Once you have a firm grasp of the fundamentals, you can use the &lt;a href=&quot;index&quot;&gt;reference&lt;/a&gt; to get more details on individual objects and language constructs.</source>
          <target state="translated">JavaScriptを初めて使用する場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;ガイド&lt;/a&gt;から始めてください。基本をしっかり理解したら、&lt;a href=&quot;index&quot;&gt;リファレンス&lt;/a&gt;を使用して、個々のオブジェクトと言語構成の詳細を取得できます。</target>
        </trans-unit>
        <trans-unit id="a535257a688b66c7fecab217e89655ac1ba3f8dc" translate="yes" xml:space="preserve">
          <source>If you are new to JavaScript, start with the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;guide&lt;/a&gt;. Once you have a firm grasp of the fundamentals, you can use the &lt;a href=&quot;index&quot;&gt;reference&lt;/a&gt; to get more details on individual objects and language constructs.</source>
          <target state="translated">JavaScriptを初めて使用する場合は、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;ガイド&lt;/a&gt;から始めてください。基本をしっかりと理解したら、&lt;a href=&quot;index&quot;&gt;リファレンス&lt;/a&gt;を使用して、個々のオブジェクトと言語構造の詳細を取得できます。</target>
        </trans-unit>
        <trans-unit id="613a62f0a62a3e51be50183314f313d624f6bc5b" translate="yes" xml:space="preserve">
          <source>If you are using an older browser that does not yet implement &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt;, for example, you should update to a more recent browser version that does support these new language features.</source>
          <target state="translated">たとえば、まだ &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt; を実装していない古いブラウザーを使用している場合は、これらの新しい言語機能をサポートする最新のブラウザーバージョンに更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="b2c3a9d53d40d1800d714f24dc84a4f4ba306069" translate="yes" xml:space="preserve">
          <source>If you are using function &lt;a href=&quot;../statements/label&quot;&gt;labels&lt;/a&gt;, you will still need to provide a function name after the &lt;code&gt;function&lt;/code&gt; keyword. This doesn't work:</source>
          <target state="translated">関数&lt;a href=&quot;../statements/label&quot;&gt;ラベル&lt;/a&gt;を使用している場合でも、 &lt;code&gt;function&lt;/code&gt; キーワードの後に関数名を指定する必要があります。これは機能しません：</target>
        </trans-unit>
        <trans-unit id="77903e97dc13aed96b929fd6a5c838a5b3a347a1" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; in an ECMAScript 5 environment, then the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement will resolve to &lt;code&gt;obj&lt;/code&gt;. However, ECMAScript 2015 introduces a &lt;code&gt;values&lt;/code&gt; property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; (so that it will be available on every array). So, in a JavaScript environment that supports ECMAScript 2015, the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement could resolve to &lt;code&gt;[1,2,3].values&lt;/code&gt;. However, in this particular example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; has been defined with &lt;code&gt;values&lt;/code&gt; in its &lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt;&lt;code&gt;Symbol.unscopables&lt;/code&gt;&lt;/a&gt; object. If it were not, one can see how this would be a difficult issue to debug.</source>
          <target state="translated">ECMAScript 5環境で &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; を呼び出すと、 &lt;code&gt;with&lt;/code&gt; ステートメント内の &lt;code&gt;values&lt;/code&gt; 参照は &lt;code&gt;obj&lt;/code&gt; に解決されます。ただし、ECMAScript 2015では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; に&lt;/a&gt; &lt;code&gt;values&lt;/code&gt; プロパティが導入されています（すべての配列で使用できるようになります）。したがって、ECMAScript 2015をサポートするJavaScript環境では、 &lt;code&gt;with&lt;/code&gt; ステートメント内の &lt;code&gt;values&lt;/code&gt; 参照は &lt;code&gt;[1,2,3].values&lt;/code&gt; に解決される可能性があります。ただし、この特定の例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt; &lt;code&gt;Symbol.unscopables&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;values&lt;/code&gt; で定義されています。オブジェクト。そうでない場合は、これがデバッグが難しい問題であることがわかります。</target>
        </trans-unit>
        <trans-unit id="a590cd4ce738fdd82efe0e9731e381f8954b9061" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; in an ECMAScript 5 environment, then the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement will resolve to &lt;code&gt;obj&lt;/code&gt;. However, ECMAScript 6 introduces a &lt;code&gt;values&lt;/code&gt; property on &lt;a href=&quot;../global_objects/array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; (so that it will be available on every array). So, in a JavaScript environment that supports ECMAScript 6, the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement could resolve to &lt;code&gt;[1,2,3].values&lt;/code&gt;. However, in this particular example, &lt;a href=&quot;../global_objects/array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; has been defined with &lt;code&gt;values&lt;/code&gt; in its &lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt;&lt;code&gt;Symbol.unscopables&lt;/code&gt;&lt;/a&gt; object. If it were not, one can see how this would be a difficult issue to debug.</source>
          <target state="translated">ECMAScript 5環境で &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; を呼び出すと、 &lt;code&gt;with&lt;/code&gt; ステートメント内の &lt;code&gt;values&lt;/code&gt; 参照は &lt;code&gt;obj&lt;/code&gt; に解決されます。ただし、ECMAScript 6では、&lt;a href=&quot;../global_objects/array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; に&lt;/a&gt; &lt;code&gt;values&lt;/code&gt; プロパティが導入されています（そのため、すべての配列で使用できます）。したがって、ECMAScript 6をサポートするJavaScript環境では、 &lt;code&gt;with&lt;/code&gt; ステートメント内の &lt;code&gt;values&lt;/code&gt; 参照は &lt;code&gt;[1,2,3].values&lt;/code&gt; に解決される可能性があります。ただし、この特定の例では、&lt;a href=&quot;../global_objects/array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt; &lt;code&gt;Symbol.unscopables&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;values&lt;/code&gt; で定義されています。オブジェクト。そうでない場合、これがデバッグするのが難しい問題であることがわかります。</target>
        </trans-unit>
        <trans-unit id="5c956ed676ebd4cdf0ef2b881c4cdd44209fec2e" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;pop()&lt;/code&gt; on an empty array, it returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">空の配列に対して &lt;code&gt;pop()&lt;/code&gt; を呼び出すと、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="982fa524918e289d54b948aa1c92f09ae356ee5c" translate="yes" xml:space="preserve">
          <source>If you call the &lt;code&gt;toString()&lt;/code&gt; method on this custom object, it returns the default value inherited from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">あなたが呼び出す場合 &lt;code&gt;toString()&lt;/code&gt; このカスタムオブジェクトのメソッドを、それがから継承されたデフォルト値を返す&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="9d335486efc475b952d22569f82a62a2788b89c6" translate="yes" xml:space="preserve">
          <source>If you choose to use this partial implementation, &lt;strong&gt;you must not rely on those cases where behavior deviates from ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition!&lt;/strong&gt; Thankfully, these deviations from the specification rarely (if ever) come up in most coding situations. If you do not understand any of the deviations from the specification above, then it is safe in this particular case to not worry about these noncompliant deviation details.</source>
          <target state="translated">この部分的な実装を使用することを選択した&lt;strong&gt;場合、動作がECMA-262、&lt;sup&gt;第&lt;/sup&gt;5版から逸脱するケースに依存してはなりません。&lt;/strong&gt;ありがたいことに、仕様からのこれらの逸脱は、ほとんどのコーディング状況で発生することはめったにありません。上記の仕様からの逸脱のいずれかを理解していない場合は、この特定のケースでは、これらの非準拠の逸脱の詳細について心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="67afcf342da3e90693d7ecef744d3642516938dd" translate="yes" xml:space="preserve">
          <source>If you choose to use this partial implementation, &lt;strong&gt;you must not rely on those cases where behavior deviates from ECMA-262, 5th edition!&lt;/strong&gt; With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when &lt;code&gt;bind()&lt;/code&gt; is widely implemented according to the specification.</source>
          <target state="translated">この部分的な実装を使用&lt;strong&gt;する場合は、動作がECMA-262第5版から逸脱している場合に依存してはなりません。&lt;/strong&gt;ただし、いくつかの注意を払って（そしておそらく特定のニーズに合わせて追加の変更を加えて）、この部分的な実装は、 &lt;code&gt;bind()&lt;/code&gt; が仕様に従って広く実装されている時代への合理的な橋渡しになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7d8ff152a7506a8df981872cd6144a994c604418" translate="yes" xml:space="preserve">
          <source>If you come from another programming language, it is also common to use keywords that don't mean the same or have no meaning at all in javaScript:</source>
          <target state="translated">また、他のプログラミング言語から来た場合、javaScriptでは意味が違ったり、全く意味を持たないキーワードを使うこともよくあります。</target>
        </trans-unit>
        <trans-unit id="56181bd1d66f2b2ed3709ed12001807e1c6d7be4" translate="yes" xml:space="preserve">
          <source>If you construct an arithmetic expression as a string, you can use &lt;code&gt;eval()&lt;/code&gt; to evaluate it at a later time. For example, suppose you have a variable &lt;code&gt;x&lt;/code&gt;. You can postpone evaluation of an expression involving &lt;code&gt;x&lt;/code&gt; by assigning the string value of the expression, say &quot;&lt;code&gt;3 * x + 2&lt;/code&gt;&quot;, to a variable, and then calling &lt;code&gt;eval()&lt;/code&gt; at a later point in your script.</source>
          <target state="translated">算術式を文字列として作成する場合は、 &lt;code&gt;eval()&lt;/code&gt; を使用して後で評価できます。たとえば、変数 &lt;code&gt;x&lt;/code&gt; があるとします。 &lt;code&gt;x&lt;/code&gt; を含む式の評価を延期するには、式の文字列値、たとえば「 &lt;code&gt;3 * x + 2&lt;/code&gt; 」を変数に割り当て、スクリプトの後半で &lt;code&gt;eval()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8d68f6b9f418726c69743b66c16ac037f82b5627" translate="yes" xml:space="preserve">
          <source>If you create a property key from an expression, you need to use square brackets. Otherwise the property name can't be computed:</source>
          <target state="translated">式からプロパティ・キーを作成する場合は、角括弧を使用する必要があります。そうしないと、プロパティ名を計算できません。</target>
        </trans-unit>
        <trans-unit id="be14b3ea8c1e9826f6190d19d2cab72fdf85cb50" translate="yes" xml:space="preserve">
          <source>If you define multiple values then the last value is returned.</source>
          <target state="translated">複数の値を定義した場合は、最後の値が返されます。</target>
        </trans-unit>
        <trans-unit id="f10d361ef5a163329364a3df976bc77ea83e3dc0" translate="yes" xml:space="preserve">
          <source>If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect.</source>
          <target state="translated">ウォッチポイントが設定されているプロパティを削除しても、そのウォッチポイントは消えません。後でプロパティを再作成しても、ウォッチポイントは有効です。</target>
        </trans-unit>
        <trans-unit id="9e2bd2b895541007ef32841e0415947532555ac7" translate="yes" xml:space="preserve">
          <source>If you delete a property with the &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator, the &lt;code&gt;in&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt; for that property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 演算子を使用してプロパティを削除すると、 &lt;code&gt;in&lt;/code&gt; 演算子はそのプロパティに対して &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5f6e1de3c0913e4cc6a427cd152ae3adbdbf83ba" translate="yes" xml:space="preserve">
          <source>If you didn't write the &lt;code&gt;new&lt;/code&gt; operator, &lt;strong&gt;the Constructor Function would be invoked like any Regular Function,&lt;/strong&gt;&lt;em&gt;without creating an Object.&lt;/em&gt; In this case, the value of &lt;code&gt;this&lt;/code&gt; is also different.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 演算子を記述しなかった場合&lt;strong&gt;、コンストラクター関数は&lt;/strong&gt;&lt;em&gt;、オブジェクトを作成せずに&lt;/em&gt;&lt;strong&gt;、通常の関数と同じように呼び出されます&lt;/strong&gt;&lt;em&gt;。&lt;/em&gt;この場合には、の値 &lt;code&gt;this&lt;/code&gt; また異なっています。</target>
        </trans-unit>
        <trans-unit id="bddfe554f36b287490547eed85632d9e23d92c9d" translate="yes" xml:space="preserve">
          <source>If you didn't write the &lt;code&gt;new&lt;/code&gt; operator, &lt;strong&gt;the Constructor Function would be invoked like any Regular Function,&lt;/strong&gt;&lt;em&gt;without creating an Object.&lt;/em&gt;In this case, the value of &lt;code&gt;this&lt;/code&gt; is also different.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 演算子を記述しなかった場合&lt;em&gt;、オブジェクトを作成せずに&lt;/em&gt;&lt;strong&gt;、通常の関数のようにコンストラクター関数が呼び出されます&lt;/strong&gt;&lt;em&gt;。&lt;/em&gt;この場合には、の値 &lt;code&gt;this&lt;/code&gt; また異なっています。</target>
        </trans-unit>
        <trans-unit id="d5715ce7b490b3178a67fbab44e46e0895854da4" translate="yes" xml:space="preserve">
          <source>If you do not specify a constructor method, a default constructor is used.</source>
          <target state="translated">コンストラクタメソッドを指定しない場合は、デフォルトのコンストラクタが使用されます。</target>
        </trans-unit>
        <trans-unit id="91809d53b8b015a60ef70d0dcdc8f1e75e790479" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; パラメーターを指定しない場合、&lt;a href=&quot;getdate&quot;&gt; &lt;code&gt;getDate()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="5ad54b71740a03f15b390b615e6bf7ef289e62f3" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getminutes&quot;&gt;&lt;code&gt;getMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメーターを指定しない場合、&lt;a href=&quot;getminutes&quot;&gt; &lt;code&gt;getMinutes()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getseconds&quot;&gt; &lt;code&gt;getSeconds()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返される値が使用されます。</target>
        </trans-unit>
        <trans-unit id="c1b14924a4ad8ffa7796c3bfab19bb7a60650112" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcminutes&quot;&gt;&lt;code&gt;getUTCMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメーターを指定しない場合、&lt;a href=&quot;getutcminutes&quot;&gt; &lt;code&gt;getUTCMinutes()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getutcseconds&quot;&gt; &lt;code&gt;getUTCSeconds()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返される値が使用されます。</target>
        </trans-unit>
        <trans-unit id="82fa69a0144131eaebaa23e3873fb3414a94568f" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;dateValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getmonth&quot;&gt;&lt;code&gt;getMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">指定しない場合 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;dateValue&lt;/var&gt;&lt;/code&gt; パラメータは、値が返されたから&lt;a href=&quot;getmonth&quot;&gt; &lt;code&gt;getMonth()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;getdate&quot;&gt; &lt;code&gt;getDate()&lt;/code&gt; &lt;/a&gt;メソッドが使用されています。</target>
        </trans-unit>
        <trans-unit id="3df5d83c279d0c8023216b21336a639196b7ed77" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcmonth&quot;&gt;&lt;code&gt;getUTCMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcdate&quot;&gt;&lt;code&gt;getUTCDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">指定しない場合 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; パラメータは、値が返されたから&lt;a href=&quot;getutcmonth&quot;&gt; &lt;code&gt;getUTCMonth()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;getutcdate&quot;&gt; &lt;code&gt;getUTCDate()&lt;/code&gt; &lt;/a&gt;メソッドが使用されています。</target>
        </trans-unit>
        <trans-unit id="47bc293e91c6175b64ee14299e94b76f046b77c1" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメーターを指定しない場合、&lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返される値が使用されます。</target>
        </trans-unit>
        <trans-unit id="80f5fcbf1f345056595a0febb2d4450e65ef680f" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">指定しない場合 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメータは、値が返されたから&lt;a href=&quot;getseconds&quot;&gt; &lt;code&gt;getSeconds()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドが使用されています。</target>
        </trans-unit>
        <trans-unit id="9f9f19a7f8ab4f40f5bd17f11354e3f6271fb12c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">指定しない場合 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメータは、値が返されたから&lt;a href=&quot;getutcseconds&quot;&gt; &lt;code&gt;getUTCSeconds()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドが使用されています。</target>
        </trans-unit>
        <trans-unit id="59226b478f68551a725b4904aa9e073fdd1245c0" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;dayValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">&lt;code&gt;dayValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getdate&quot;&gt; &lt;code&gt;getDate()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="f69c9e92ce00676ee4d2916a406ce0640412ab41" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;dayValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getutcdate&quot;&gt;&lt;code&gt;getUTCDate()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">&lt;code&gt;dayValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getutcdate&quot;&gt; &lt;code&gt;getUTCDate()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="3a6e5b4b10c44b2a624b4d411895f115df5e9376" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;minutesValue&lt;/code&gt;, &lt;code&gt;secondsValue&lt;/code&gt;, and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getminutes&quot;&gt;&lt;code&gt;getMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">&lt;code&gt;minutesValue&lt;/code&gt; 、 &lt;code&gt;secondsValue&lt;/code&gt; 、および &lt;code&gt;msValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getminutes&quot;&gt; &lt;code&gt;getMinutes()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getseconds&quot;&gt; &lt;code&gt;getSeconds()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="196d20153d788622cbd58314f072ed3ac7c88814" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;minutesValue&lt;/code&gt;, &lt;code&gt;secondsValue&lt;/code&gt;, and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcminutes&quot;&gt;&lt;code&gt;getUTCMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">&lt;code&gt;minutesValue&lt;/code&gt; 、 &lt;code&gt;secondsValue&lt;/code&gt; 、および &lt;code&gt;msValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getutcminutes&quot;&gt; &lt;code&gt;getUTCMinutes()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getutcseconds&quot;&gt; &lt;code&gt;getUTCSeconds()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="3e065f2df26eadd9c019745d680d610654be27e8" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;monthValue&lt;/code&gt; and &lt;code&gt;dateValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getmonth&quot;&gt;&lt;code&gt;getMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">&lt;code&gt;monthValue&lt;/code&gt; および &lt;code&gt;dateValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getmonth&quot;&gt; &lt;code&gt;getMonth()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;getdate&quot;&gt; &lt;code&gt;getDate()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="8f17a4828fb9f406dde0b1835b9d908b2753f5da" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;monthValue&lt;/code&gt; and &lt;code&gt;dayValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcmonth&quot;&gt;&lt;code&gt;getUTCMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcdate&quot;&gt;&lt;code&gt;getUTCDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">&lt;code&gt;monthValue&lt;/code&gt; および &lt;code&gt;dayValue&lt;/code&gt; パラメーターを指定しない場合、&lt;a href=&quot;getutcmonth&quot;&gt; &lt;code&gt;getUTCMonth()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;getutcdate&quot;&gt; &lt;code&gt;getUTCDate()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="d5d6a263711a564bafff20ce9a44e33aecf895b2" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;msValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">&lt;code&gt;msValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="13b2fd50258a2835809a9814d00ddc68fb9b08a2" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;msValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">&lt;code&gt;msValue&lt;/code&gt; パラメータを指定しない場合、&lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドから返された値が使用されます。</target>
        </trans-unit>
        <trans-unit id="9ae79f7fb255a43982f924ce9d07ff130cc8750c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;secondsValue&lt;/code&gt; and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">指定しない場合 &lt;code&gt;secondsValue&lt;/code&gt; と &lt;code&gt;msValue&lt;/code&gt; パラメータは、値が返されたから&lt;a href=&quot;getseconds&quot;&gt; &lt;code&gt;getSeconds()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドが使用されています。</target>
        </trans-unit>
        <trans-unit id="f9b9c693ad5b1943fcbb6c027381de26570f41e6" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;secondsValue&lt;/code&gt; and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">指定しない場合 &lt;code&gt;secondsValue&lt;/code&gt; と &lt;code&gt;msValue&lt;/code&gt; パラメータは、値が返されたから&lt;a href=&quot;getutcseconds&quot;&gt; &lt;code&gt;getUTCSeconds()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt;メソッドが使用されています。</target>
        </trans-unit>
        <trans-unit id="05cb4b511b1661f5586af08ed24530681a2151ee" translate="yes" xml:space="preserve">
          <source>If you don't give any parameter and use the &lt;code&gt;match()&lt;/code&gt; method directly, you will get an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; with an empty string: &lt;code&gt;[&quot;&quot;]&lt;/code&gt;.</source>
          <target state="translated">パラメータを指定せずに &lt;code&gt;match()&lt;/code&gt; メソッドを直接使用すると、空の文字列 &lt;code&gt;[&quot;&quot;]&lt;/code&gt; を含む&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;が取得されます。</target>
        </trans-unit>
        <trans-unit id="af40479ee91482e63e43f4df0bb7624dbe144771" translate="yes" xml:space="preserve">
          <source>If you don't provide your own constructor, then a default constructor will be supplied for you. If your class is a base class, the default constructor is empty:</source>
          <target state="translated">独自のコンストラクタを提供しない場合は、デフォルトのコンストラクタが提供されます。あなたのクラスが基底クラスの場合、デフォルトのコンストラクタは空です。</target>
        </trans-unit>
        <trans-unit id="35c32852d31c81ac10578986fc553bf83224d9e5" translate="yes" xml:space="preserve">
          <source>If you express color as a hexadecimal RGB triplet, you must use the format &lt;code&gt;rrggbb&lt;/code&gt;. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is &lt;code&gt;&quot;FA8072&quot;&lt;/code&gt;.</source>
          <target state="translated">16進数のRGB 3 &lt;code&gt;rrggbb&lt;/code&gt; 色を表現する場合は、rrggbbの形式を使用する必要があります。たとえば、サーモンの16進数のRGB値はred = FA、green = 80、blue = 72なので、サーモンのRGB 3 &lt;code&gt;&quot;FA8072&quot;&lt;/code&gt; は&quot;FA8072&quot;です。</target>
        </trans-unit>
        <trans-unit id="424cbece6047c20988ec0b925f0d69bf351d88e0" translate="yes" xml:space="preserve">
          <source>If you forget a &lt;code&gt;break&lt;/code&gt; then the script will run from the &lt;code&gt;case&lt;/code&gt; where the criterion is met and will run the cases after that &lt;strong&gt;regardless if a criterion was met&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; を忘れた場合、スクリプトは基準が満たされた &lt;code&gt;case&lt;/code&gt; から実行され、その後&lt;strong&gt;、基準が満たされたかどうかに関係なく&lt;/strong&gt;ケースが実行されます。</target>
        </trans-unit>
        <trans-unit id="5829843e73f7b32286683290a76dfea716fae9b0" translate="yes" xml:space="preserve">
          <source>If you forget a break then the script will run from the case where the criterion is met and will run the case after that regardless if criterion was met. See example here:</source>
          <target state="translated">ブレークを忘れた場合、スクリプトは基準が満たされたケースから実行され、基準が満たされていたかどうかに関わらず、それ以降のケースを実行します。ここに例を示します。</target>
        </trans-unit>
        <trans-unit id="392bc9770f3f38cbe5fa9323408292a9e2ec9a76" translate="yes" xml:space="preserve">
          <source>If you intended to create a method of an object, you will need to create an object. The following syntax without a name after the &lt;code&gt;function&lt;/code&gt; keyword is valid then.</source>
          <target state="translated">オブジェクトのメソッドを作成する場合は、オブジェクトを作成する必要があります。その場合、 &lt;code&gt;function&lt;/code&gt; キーワードの後に名前を付けない次の構文が有効です。</target>
        </trans-unit>
        <trans-unit id="2b7602e387bd2af7647914f024cab0e3d3062237" translate="yes" xml:space="preserve">
          <source>If you meant to declare another constant, pick another name and re-name. This constant name is already taken in this scope.</source>
          <target state="translated">もし別の定数を宣言するつもりであれば、別の名前を選んで再定義してください。この定数名はすでにこのスコープに取り込まれています。</target>
        </trans-unit>
        <trans-unit id="4f1e13b196b133d23d16e2eca23049991007c75b" translate="yes" xml:space="preserve">
          <source>If you must run the code, consider running it with reduced privileges. This advice applies mainly to extensions and XUL applications, which can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Components.utils.evalInSandbox&quot;&gt;Components.utils.evalInSandbox&lt;/a&gt; for this.</source>
          <target state="translated">コードを実行する必要がある場合は、特権を減らして実行することを検討してください。このアドバイスは主に、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Components.utils.evalInSandbox&quot;&gt;Components.utils.evalInSandbox&lt;/a&gt;を使用できる拡張機能とXULアプリケーションに適用されます。</target>
        </trans-unit>
        <trans-unit id="f05da75db7bf9aa79df3571a16ac371a8a1c09b8" translate="yes" xml:space="preserve">
          <source>If you need the &lt;strong&gt;index&lt;/strong&gt; of the found element in the array, use &lt;a href=&quot;findindex&quot;&gt;&lt;code&gt;findIndex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列で見つかった要素の&lt;strong&gt;インデックス&lt;/strong&gt;が必要な場合は、&lt;a href=&quot;findindex&quot;&gt; &lt;code&gt;findIndex()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="44577c6fc47c8a13363a3871df6144ffae8f08db" translate="yes" xml:space="preserve">
          <source>If you need the natural log of 2 or 10, use the constants &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt; . If you need a logarithm to base 2 or 10, use &lt;a href=&quot;log2&quot;&gt;&lt;code&gt;Math.log2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;log10&quot;&gt;&lt;code&gt;Math.log10()&lt;/code&gt;&lt;/a&gt; . If you need a logarithm to other bases, use Math.log(x) / Math.log(otherBase) as in the example below; you might want to precalculate 1 / Math.log(otherBase) .</source>
          <target state="translated">2または10の自然対数が必要な場合は、定数&lt;a href=&quot;ln2&quot;&gt; &lt;code&gt;Math.LN2&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ln10&quot;&gt; &lt;code&gt;Math.LN10&lt;/code&gt; を&lt;/a&gt;使用します。2または10を底とする対数が必​​要な場合は、&lt;a href=&quot;log2&quot;&gt; &lt;code&gt;Math.log2()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;log10&quot;&gt; &lt;code&gt;Math.log10()&lt;/code&gt; を&lt;/a&gt;使用してください。他の底への対数が必要な場合は、以下の例のようにMath.log（x）/ Math.log（otherBase）を使用してください。1 / Math.log（otherBase）を事前計算したい場合があります。</target>
        </trans-unit>
        <trans-unit id="68beaac9d5aafe09513d7eccd070b1b3d71bb486" translate="yes" xml:space="preserve">
          <source>If you need the natural log of 2 or 10, use the constants &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt;. If you need a logarithm to base 2 or 10, use &lt;a href=&quot;log2&quot;&gt;&lt;code&gt;Math.log2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;log10&quot;&gt;&lt;code&gt;Math.log10()&lt;/code&gt;&lt;/a&gt;. If you need a logarithm to other bases, use Math.log(x) / Math.log(otherBase) as in the example below; you might want to precalculate 1 / Math.log(otherBase).</source>
          <target state="translated">2または10の自然対数が必要な場合は、定数&lt;a href=&quot;ln2&quot;&gt; &lt;code&gt;Math.LN2&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ln10&quot;&gt; &lt;code&gt;Math.LN10&lt;/code&gt; を&lt;/a&gt;使用します。2または10を底とする対数が必​​要な場合は、&lt;a href=&quot;log2&quot;&gt; &lt;code&gt;Math.log2()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;log10&quot;&gt; &lt;code&gt;Math.log10()&lt;/code&gt; を使用し&lt;/a&gt;ます。他の基数の対数が必要な場合は、以下の例のようにMath.log（x）/ Math.log（otherBase）を使用してください。1 / Math.log（otherBase）を事前に計算することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ff9dd66eafaabe75ecf9115145d2b767ab19cb10" translate="yes" xml:space="preserve">
          <source>If you need to define a property without a value, you might use &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; as a value.</source>
          <target state="translated">値なしでプロパティを定義する必要がある場合は、値として&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="8f2598944e0ea66e2ceaf4e11c59c0cdff9b64a0" translate="yes" xml:space="preserve">
          <source>If you need to export the default, write the following instead:</source>
          <target state="translated">デフォルトをエクスポートする必要がある場合は、代わりに以下のように書きます。</target>
        </trans-unit>
        <trans-unit id="48354edaa3e95aef6e6a48c3e5f6b6df17eeb92b" translate="yes" xml:space="preserve">
          <source>If you need to find if a value &lt;strong&gt;exists&lt;/strong&gt; in an array, use &lt;a href=&quot;includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;. Again, it checks each element for equality with the value instead of using a testing function.</source>
          <target state="translated">値&lt;strong&gt;が&lt;/strong&gt;配列に&lt;strong&gt;存在する&lt;/strong&gt;かどうかを確認する必要がある場合は、&lt;a href=&quot;includes&quot;&gt; &lt;code&gt;Array.prototype.includes()&lt;/code&gt; を&lt;/a&gt;使用します。ここでも、テスト関数を使用する代わりに、各要素が値と等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="f6d63d0046baee1f832f04d68cdceccdcee365fd" translate="yes" xml:space="preserve">
          <source>If you need to find if any element satisfies the provided testing function, use &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">提供されたテスト関数を満たす要素があるかどうかを確認する必要がある場合は、&lt;a href=&quot;some&quot;&gt; &lt;code&gt;Array.prototype.some()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="92ed2ad090bbb7a6fac237e3660f1c52e2f3ec91" translate="yes" xml:space="preserve">
          <source>If you need to find the &lt;strong&gt;index of a value&lt;/strong&gt;, use &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;. (It&amp;rsquo;s similar to &lt;a href=&quot;findindex&quot;&gt;&lt;code&gt;findIndex()&lt;/code&gt;&lt;/a&gt;, but checks each element for equality with the value instead of using a testing function.)</source>
          <target state="translated">&lt;strong&gt;値&lt;/strong&gt;の&lt;strong&gt;インデックス&lt;/strong&gt;を見つける必要&lt;strong&gt;がある場合は&lt;/strong&gt;、&lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; を&lt;/a&gt;使用します。（これは&lt;a href=&quot;findindex&quot;&gt; &lt;code&gt;findIndex()&lt;/code&gt; に&lt;/a&gt;似ていますが、テスト関数を使用する代わりに、各要素が値と等しいかどうかをチェックします。）</target>
        </trans-unit>
        <trans-unit id="2f7b0f1b470fc3559b362594aea4dada581a211a" translate="yes" xml:space="preserve">
          <source>If you need to find the position of an element or whether an element exists in an array, use &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素の位置や、要素が配列に存在するかどうかを調べる必要がある場合は、&lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;includes&quot;&gt; &lt;code&gt;Array.prototype.includes()&lt;/code&gt; を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="53ac54e6412bacc63b8624a67da085e48a736a3a" translate="yes" xml:space="preserve">
          <source>If you need to know if a string matches a regular expression &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, use &lt;a href=&quot;../regexp/test&quot;&gt;&lt;code&gt;RegExp.test()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列が正規表現&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;と一致するかどうかを知る必要がある場合は、&lt;a href=&quot;../regexp/test&quot;&gt; &lt;code&gt;RegExp.test()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="9701887d047bb96bcab9229f97c6b2c436038b1d" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that do not support &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, it is best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you cannot make them non-enumerable.</source>
          <target state="translated">&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; を&lt;/a&gt;サポートしない真に廃止されたJavaScriptエンジンをサポートする必要がある場合は、 &lt;code&gt;Array.prototype&lt;/code&gt; メソッドを列挙できないようにすることはできないため、ポリフィルしないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="98c814d727deb065c2a896b0632604aebd175c33" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them non-enumerable.</source>
          <target state="translated">&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; を&lt;/a&gt;サポートしない真に廃止されたJavaScriptエンジンをサポートする必要がある場合は、 &lt;code&gt;Array.prototype&lt;/code&gt; メソッドを列挙できないようにすることはできないため、ポリフィルしないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6fe432265bccad633d8efa5ca4d1fac0eea99e3f" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them &lt;strong&gt;non-enumerable&lt;/strong&gt;.</source>
          <target state="translated">あなたがサポートしていない、本当に時代遅れのJavaScriptエンジンをサポートする必要がある場合は &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt; 、それはポリフィルしないことが最善です &lt;code&gt;Array.prototype&lt;/code&gt; をするあなたがそれらを作ることができないよう、すべてのメソッドを&lt;strong&gt;非列挙&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b656e640c400c1887a63c15bbd8901d8a955a1f8" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them non-enumerable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt; をサポートしていない、本当に時代遅れのJavaScriptエンジンをサポートする必要がある場合は、 &lt;code&gt;Array.prototype&lt;/code&gt; メソッドをポリフィルしないようにしてください。</target>
        </trans-unit>
        <trans-unit id="bd9f376dc29844e3f900bec4366cbbf039c586ee" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt;, it is best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; at all, as you cannot make it non-enumerable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt; をサポートしない真に廃止されたJavaScriptエンジンをサポートする必要がある場合は、Array.prototypeを &lt;code&gt;Array.prototype&lt;/code&gt; できないようにすることはできないため、polyfillをまったく行わないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="57168d3fef20557c94e31ea753dbe3ba115b9dc4" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them non-enumerable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt; をサポートしていない、本当に時代遅れのJavaScriptエンジンをサポートする必要がある場合は、 &lt;code&gt;Array.prototype&lt;/code&gt; メソッドを列挙できないようにすることはできないため、メソッドをまったくポリフィルしないことが最善です。</target>
        </trans-unit>
        <trans-unit id="3edaaddf2630ab4d776484bd61b50696d946fc29" translate="yes" xml:space="preserve">
          <source>If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:</source>
          <target state="translated">条件式の中で代入を使用する必要がある場合、一般的には代入の周りに括弧を追加するのが一般的です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d40d82c950e9a812cd674e6001dbf28de03af32b" translate="yes" xml:space="preserve">
          <source>If you only want the first match found, you might want to use &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">最初に一致したものだけが必要な場合は、代わりに&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="c57242f318553d3f36f9cf38af0a4f7480baa928" translate="yes" xml:space="preserve">
          <source>If you only want to consider properties attached to the object itself, and not its prototypes, use &lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt;&lt;code&gt;getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt; or perform a &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; check (&lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt;&lt;code&gt;propertyIsEnumerable()&lt;/code&gt;&lt;/a&gt; can also be used). Alternatively, if you know there won't be any outside code interference, you can extend built-in prototypes with a check method.</source>
          <target state="translated">プロトタイプではなく、オブジェクト自体にアタッチされたプロパティのみを考慮したい場合は、&lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt; &lt;code&gt;getOwnPropertyNames()&lt;/code&gt; を&lt;/a&gt;使用するか、&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;チェックを実行します（&lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt; &lt;code&gt;propertyIsEnumerable()&lt;/code&gt; &lt;/a&gt;も使用できます）。または、外部コードの干渉がないことがわかっている場合は、checkメソッドを使用して組み込みのプロトタイプを拡張できます。</target>
        </trans-unit>
        <trans-unit id="735530012ac3a4439f6528b8ed499f68e90f9884" translate="yes" xml:space="preserve">
          <source>If you only want to consider properties attached to the object itself, and not its prototypes, use &lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt;&lt;code&gt;getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt; or perform a &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; check (&lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt;&lt;code&gt;propertyIsEnumerable&lt;/code&gt;&lt;/a&gt; can also be used). Alternatively, if you know there won't be any outside code interference, you can extend built-in prototypes with a check method.</source>
          <target state="translated">オブジェクト自体に関連付けられているプロパティのみを考慮し、プロトタイプは考慮しない場合は、&lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt; &lt;code&gt;getOwnPropertyNames()&lt;/code&gt; を&lt;/a&gt;使用するか、&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;チェックを実行します（&lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt; &lt;code&gt;propertyIsEnumerable&lt;/code&gt; &lt;/a&gt;も使用できます）。または、外部コードによる干渉がないことがわかっている場合は、checkメソッドを使用して組み込みのプロトタイプを拡張できます。</target>
        </trans-unit>
        <trans-unit id="0e97d2b27233fdaf7731ef52386bfd0124047bc8" translate="yes" xml:space="preserve">
          <source>If you really want to create a &lt;code&gt;Symbol&lt;/code&gt; wrapper object, you can use the &lt;code&gt;Object()&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;Symbol&lt;/code&gt; ラッパーオブジェクトを本当に作成したい場合は、 &lt;code&gt;Object()&lt;/code&gt; 関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="a1843b29c2d5c6fd4913d7563bf6437e92296a87" translate="yes" xml:space="preserve">
          <source>If you return &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; will be added to the JSON string.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; を返すと、JSON文字列に &lt;code&gt;null&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="7ec5df79d7c885974c5aa582c610905dc7cdac8d" translate="yes" xml:space="preserve">
          <source>If you return &lt;code&gt;undefined&lt;/code&gt;, the property is not included (i.e., filtered out) in the output JSON string.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; を返す場合、プロパティは出力JSON文字列に含まれません（つまり、フィルターで除外されます）。</target>
        </trans-unit>
        <trans-unit id="2c70929d7e200a5fe36f9edeb06a1b0a8c7a9d88" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, &quot;true&quot; or &quot;false&quot; is used as the property's value, as appropriate, when adding it to the JSON string.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;を返す場合、JSON文字列に追加するときに、プロパティの値として「true」または「false」が適切に使用されます。</target>
        </trans-unit>
        <trans-unit id="aebe43fc49075ca5e764acfd1f8b57b86a33df55" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, the property is not included in the output.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;を返す場合、プロパティは出力に含まれません。</target>
        </trans-unit>
        <trans-unit id="dba4f295774a527ffbb538fec3b29039be43a105" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, the stringified version of that value is used as the property's value.</source>
          <target state="translated">&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;を返す場合、その値の文字列化されたバージョンがプロパティの値として使用されます。</target>
        </trans-unit>
        <trans-unit id="cb68ba0a762626c3b4353aedeeb2ffb44a69ed51" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, the string corresponding to that number is used as the value for the property when added to the JSON string.</source>
          <target state="translated">&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;を返す場合、その番号に対応する文字列は、JSON文字列に追加されるときにプロパティの値として使用されます。</target>
        </trans-unit>
        <trans-unit id="0b5099af9e7be5c72550fd23afd94bd55e6142b2" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, that string is used as the property's value when adding it to the JSON string.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を返す場合、その文字列は、JSON文字列に追加するときにプロパティの値として使用されます。</target>
        </trans-unit>
        <trans-unit id="131cdc0db5e0530808f6767f2a2daddd0e55eba1" translate="yes" xml:space="preserve">
          <source>If you return any other object, the object is recursively stringified into the JSON string, calling the &lt;code&gt;replacer&lt;/code&gt; function on each property, unless the object is a function, in which case nothing is added to the JSON string.</source>
          <target state="translated">他のオブジェクトを返す場合、オブジェクトが関数である場合を除いて、オブジェクトは再帰的にJSON文字列に文字列化され、各プロパティで &lt;code&gt;replacer&lt;/code&gt; 関数を呼び出します。この場合、JSON文字列には何も追加されません。</target>
        </trans-unit>
        <trans-unit id="ce9a704ee385f7c72710bc2ca6fef00b73d2fb09" translate="yes" xml:space="preserve">
          <source>If you return any other object, the object is recursively stringified, calling the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; function on each property.</source>
          <target state="translated">他のオブジェクトを返すと、オブジェクトは再帰的に文字列化され、各プロパティで &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="61d92592decdab65c8c7d88c8b2e526399e93164" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;getBaseLog(10, 1000)&lt;/code&gt; it returns &lt;code&gt;2.9999999999999996&lt;/code&gt; due to floating-point rounding, which is very close to the actual answer of 3.</source>
          <target state="translated">&lt;code&gt;getBaseLog(10, 1000)&lt;/code&gt; を実行すると、浮動小数点の丸めが原因で &lt;code&gt;2.9999999999999996&lt;/code&gt; が返されます。これは、実際の答えの3に非常に近い値です。</target>
        </trans-unit>
        <trans-unit id="935b1b976508db5afe6cca08176c17239b09c114" translate="yes" xml:space="preserve">
          <source>If you set a property to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; but do not delete it, the &lt;code&gt;in&lt;/code&gt; operator returns true for that property.</source>
          <target state="translated">プロパティを&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; に&lt;/a&gt;設定しても削除しない場合、 &lt;code&gt;in&lt;/code&gt; 演算子はそのプロパティに対してtrueを返します。</target>
        </trans-unit>
        <trans-unit id="34e10440b87179c5669d287c33d08bce47b6fa19" translate="yes" xml:space="preserve">
          <source>If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.</source>
          <target state="translated">挿入する要素の数を削除する数と異なる数を指定すると、呼び出しの最後に配列の長さが変わってしまいます。</target>
        </trans-unit>
        <trans-unit id="682d3439d2fa9871ecad9eae1652e23eb74f6221" translate="yes" xml:space="preserve">
          <source>If you specify a number outside the expected range, the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.</source>
          <target state="translated">予期される範囲外の数値を指定すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報がそれに応じて更新されます。たとえば、1005を指定すると、秒数は1ずつ増加し、ミリ秒には5が使用されます。</target>
        </trans-unit>
        <trans-unit id="32c4cced0b807fb68ae6694984513b4abd3c73a9" translate="yes" xml:space="preserve">
          <source>If you specify any object, including a &lt;code&gt;Boolean&lt;/code&gt; object whose value is &lt;code&gt;false&lt;/code&gt;, as the initial value of a &lt;code&gt;Boolean&lt;/code&gt; object, the new &lt;code&gt;Boolean&lt;/code&gt; object has a value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">あなたは、任意のオブジェクト、指定した場合は &lt;code&gt;Boolean&lt;/code&gt; 値であるオブジェクト &lt;code&gt;false&lt;/code&gt; 初期値として、 &lt;code&gt;Boolean&lt;/code&gt; オブジェクト、新しい &lt;code&gt;Boolean&lt;/code&gt; オブジェクトはの値持つ &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98ae5f892e8f6de3201d6782cad351ca1383c87b" translate="yes" xml:space="preserve">
          <source>If you use a method for a numeric literal and the numeric literal has no exponent and no decimal point, leave white-space(s) before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.</source>
          <target state="translated">数値リテラルにメソッドを使用していて、数値リテラルに指数と小数点がない場合は、メソッド呼び出しの前のドットの前に空白を残しておくと、ドットが小数点と解釈されるのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="edd6afd92c9f7a2538aece19a2aa77da3a6f3da8" translate="yes" xml:space="preserve">
          <source>If you use a method for a numeric literal, and the numeric literal has no exponent and no decimal point, you should leave &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Whitespace&quot;&gt;white-space(s)&lt;/a&gt; before the dot preceding the method call, so that the dot is not interpreted as a decimal point.</source>
          <target state="translated">数値リテラルのメソッドを使用し、数値リテラルに指数と小数点がない場合は、ドットが小数点として解釈されないように、メソッド呼び出しの前のドットの前に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Whitespace&quot;&gt;空白&lt;/a&gt;を残す必要があります。。</target>
        </trans-unit>
        <trans-unit id="a5f1d9b94d0b0382335af42f55617a4070d22713" translate="yes" xml:space="preserve">
          <source>If you use an unconditional &lt;code&gt;catch&lt;/code&gt; clause with one or more conditional &lt;code&gt;catch&lt;/code&gt; clauses, the unconditional &lt;code&gt;catch&lt;/code&gt; clause must be specified last. Otherwise, the unconditional &lt;code&gt;catch&lt;/code&gt; clause will intercept all types of exception before they can reach the conditional ones.</source>
          <target state="translated">あなたは無条件使用している場合は &lt;code&gt;catch&lt;/code&gt; 一つ以上の条件付き句 &lt;code&gt;catch&lt;/code&gt; 句を、無条件 &lt;code&gt;catch&lt;/code&gt; 句は、最後に指定する必要があります。それ以外の場合、無条件の &lt;code&gt;catch&lt;/code&gt; 句は、すべてのタイプの例外をインターセプトしてから、条件付きの例外に到達します。</target>
        </trans-unit>
        <trans-unit id="78afbb13097de5c8b78471387fa8f8af3bf94b11" translate="yes" xml:space="preserve">
          <source>If you use normal JavaScript floating point numbers in imul, you will experience a degrade in performance. This is because of the costly conversion from a floating point to an integer for multiplication, and then converting the multiplied integer back into a floating point. The reason imul exists is because it is faster in only one (so far) circumstance: AsmJS. AsmJS allows for JIST-optimizers to more easily implement internal integers in JavaScript. Multiplying two numbers stored internally as integers (which is only possible with AsmJS) with imul is the only potential circumstance where Math.imul may prove performant in current browsers.</source>
          <target state="translated">通常の JavaScript の浮動小数点数を imul で使用すると、パフォーマンスが低下します。これは、乗算のために浮動小数点から整数に変換し、乗算された整数を浮動小数点に変換するというコストのかかる作業があるからです。imulが存在する理由は、たった1つの(今のところ)状況ではimulの方が高速だからです。それはAsmJSです。AsmJSはJISTオプティマイザがJavaScriptで内部整数をより簡単に実装できるようにします。内部的に整数として格納されている2つの数値をimulで乗算すること(これはAsmJSでのみ可能です)は、Math.imulが現在のブラウザで性能を発揮する可能性がある唯一の潜在的な状況です。</target>
        </trans-unit>
        <trans-unit id="5d05f89ff9b94e2efe15b7bec1cbbc6dcdeb7392" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;eval&lt;/code&gt; function &lt;em&gt;indirectly,&lt;/em&gt; by invoking it via a reference other than &lt;code&gt;eval&lt;/code&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;as of ECMAScript 5&lt;/a&gt; it works in the global scope rather than the local scope. This means, for instance, that function declarations create global functions, and that the code being evaluated doesn't have access to local variables within the scope where it's being called.</source>
          <target state="translated">あなたが使用している場合 &lt;code&gt;eval&lt;/code&gt; 関数を&lt;em&gt;、間接的&lt;/em&gt;以外の参照を経由して、それを呼び出すことにより、 &lt;code&gt;eval&lt;/code&gt; を、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;ECMAScriptの5のよう&lt;/a&gt;に、グローバルスコープではなく、ローカルスコープで動作します。これは、たとえば、関数宣言がグローバル関数を作成し、評価されるコードが、それが呼び出されているスコープ内のローカル変数にアクセスできないことを意味します。</target>
        </trans-unit>
        <trans-unit id="73d1c2ee0e60284da071d578e3277739538eefac" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;toExponential()&lt;/code&gt; method for a numeric literal and the numeric literal has no exponent and no decimal point, leave whitespace(s) before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.</source>
          <target state="translated">数値リテラルに &lt;code&gt;toExponential()&lt;/code&gt; メソッドを使用し、数値リテラルに指数と小数点がない場合は、メソッド呼び出しの前にあるドットの前に空白を残して、ドットが小数点として解釈されないようにします。</target>
        </trans-unit>
        <trans-unit id="597a2c20eb78f0898e472f8de984f91f02ea471c" translate="yes" xml:space="preserve">
          <source>If you want &lt;em&gt;all&lt;/em&gt; properties&amp;mdash;including non-enumerables&amp;mdash;see &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">列挙不可能なものを含む&lt;em&gt;すべての&lt;/em&gt;プロパティが必要な場合は、&lt;a href=&quot;getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6d19c207f7baf216ddd324adb7472fc913a7eb3d" translate="yes" xml:space="preserve">
          <source>If you want all properties, even non-enumerables, see &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">列挙できないものも&lt;a href=&quot;getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt;てすべてのプロパティが必要な場合は、Object.getOwnPropertyNames（）を参照してください。</target>
        </trans-unit>
        <trans-unit id="2948b5beeb992bfbdd3d635cd05e062df02e23d7" translate="yes" xml:space="preserve">
          <source>If you want an array element to exist but have an undefined value, use the &lt;code&gt;undefined&lt;/code&gt; value instead of the &lt;code&gt;delete&lt;/code&gt; operator. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is assigned the value &lt;code&gt;undefined&lt;/code&gt;, but the array element still exists:</source>
          <target state="translated">配列要素は存在するが未定義の値が必要な場合は、 &lt;code&gt;delete&lt;/code&gt; 演算子の代わりに &lt;code&gt;undefined&lt;/code&gt; 値を使用してください。次の例では、 &lt;code&gt;trees[3]&lt;/code&gt; に値 &lt;code&gt;undefined&lt;/code&gt; が割り当てられていますが、配列要素はまだ存在しています。</target>
        </trans-unit>
        <trans-unit id="9b17dbe4a9978e35e0df77cda82cc871d93e5145" translate="yes" xml:space="preserve">
          <source>If you want an array element to exist but have an undefined value, use the &lt;code&gt;undefined&lt;/code&gt; value instead of the &lt;code&gt;delete&lt;/code&gt; operator. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is assigned the value undefined, but the array element still exists:</source>
          <target state="translated">配列要素が存在したいが未定義の値が必要な場合は、 &lt;code&gt;delete&lt;/code&gt; 演算子の代わりに &lt;code&gt;undefined&lt;/code&gt; 値を使用します。次の例では、 &lt;code&gt;trees[3]&lt;/code&gt; に値undefinedが割り当てられていますが、配列要素はまだ存在しています。</target>
        </trans-unit>
        <trans-unit id="2418cdf14fe502c2af1708e66eb2202ca0a9648f" translate="yes" xml:space="preserve">
          <source>If you want only the enumerable properties, see &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; or use a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (although note that this will return enumerable properties not only found directly upon that object but also along the prototype chain for the object unless the latter is filtered with &lt;a href=&quot;hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">列挙可能なプロパティのみが必要な場合は、&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; を&lt;/a&gt;参照するか、&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループを使用します（ただし、これにより、そのオブジェクトで直接見られるだけでなく、オブジェクトのプロトタイプチェーンに沿って列挙されたプロパティも返されます。後者は&lt;a href=&quot;hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; で&lt;/a&gt;フィルタリングされます）。</target>
        </trans-unit>
        <trans-unit id="39e653fdc0628060fb29f300dfac7bff4e0e7b80" translate="yes" xml:space="preserve">
          <source>If you want only the enumerable properties, see &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; or use a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (note that this will also return enumerable properties found along the prototype chain for the object unless the latter is filtered with &lt;a href=&quot;hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">列挙可能なプロパティのみが必要な場合は、&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; を&lt;/a&gt;参照するか、&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループを使用します（オブジェクトのプロトタイプチェーンに沿って見つかった列挙可能なプロパティも、&lt;a href=&quot;hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; で&lt;/a&gt;フィルタリングされない限り返されることに注意してください）。 。</target>
        </trans-unit>
        <trans-unit id="081dc7a00575a1581dcf7b3a349ab503bed65012" translate="yes" xml:space="preserve">
          <source>If you want to change the value of &quot;arg&quot; in the function body, you can do so, but you do not need to declare the same variable again. In other words: you can omit the &lt;code&gt;let&lt;/code&gt; keyword. If you want to create a new variable, you need to rename it as conflicts with the function parameter already.</source>
          <target state="translated">関数本体の「arg」の値を変更したい場合は変更できますが、同じ変数を再度宣言する必要はありません。つまり、 &lt;code&gt;let&lt;/code&gt; キーワードを省略できます。新しい変数を作成する場合は、すでに関数パラメーターと競合しているため、名前を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5c69934f7bf2e4d350baba14d96404b2849e4d9" translate="yes" xml:space="preserve">
          <source>If you want to create an &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; from a mask you can use this code:</source>
          <target state="translated">あなたが作成したい場合は &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; マスクから、あなたはこのコードを使用することができます：</target>
        </trans-unit>
        <trans-unit id="b4a31baeccc4d5cda15fdaad0b7733d54070608b" translate="yes" xml:space="preserve">
          <source>If you want to disallow setting a new prototype for your object, your handler's &lt;code&gt;setPrototypeOf&lt;/code&gt; method can either return &lt;code&gt;false&lt;/code&gt;, or it can throw an exception.</source>
          <target state="translated">オブジェクトの新しいプロトタイプの設定を許可しない場合、ハンドラーの &lt;code&gt;setPrototypeOf&lt;/code&gt; メソッドは &lt;code&gt;false&lt;/code&gt; を返すか、例外をスローします。</target>
        </trans-unit>
        <trans-unit id="8f4823c44fafa3ab81be841e2d53941d57b47410" translate="yes" xml:space="preserve">
          <source>If you want to export a single value or need a fallback value for a module, a default export can be used:</source>
          <target state="translated">単一の値をエクスポートしたい場合や、モジュールのフォールバック値が必要な場合は、デフォルトのエクスポートを使用することができます。</target>
        </trans-unit>
        <trans-unit id="50cbe95c4ee11ee4d5865b13d455d501fdd62c86" translate="yes" xml:space="preserve">
          <source>If you want to obtain capture groups and the global flag is set, you need to use &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">キャプチャグループを取得する必要があり、グローバルフラグが設定されている場合は、代わりに&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;matchall&quot;&gt; &lt;code&gt;String.prototype.matchAll()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d27f9e5e25120e14455ea16bd96cef1e320218ef" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current class inside the class body, you can create a &lt;em&gt;named class expression&lt;/em&gt;. The name is only visible within the scope of the class expression itself.</source>
          <target state="translated">クラス本体内の現在のクラスを参照する場合は、&lt;em&gt;名前付きクラス式を&lt;/em&gt;作成できます。名前は、クラス式自体のスコープ内でのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="2dc47424fb527730f62198aaaa25c3348ff0fba7" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current class inside the class body, you can create a named class expression. This name is only visible in the scope of the class expression itself.</source>
          <target state="translated">クラス本体内で現在のクラスを参照したい場合は、名前付きのクラス式を作成することができます。この名前は、クラス式自体のスコープ内でのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="481ba14f2f65c81318d305b87a92b52bfe033114" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current function inside the function body, you need to create a named function expression. &lt;u&gt;&lt;strong&gt;This name is then local only to the function body (scope)&lt;/strong&gt;&lt;/u&gt;. This also avoids using the non-standard &lt;a href=&quot;../functions/arguments/callee&quot;&gt;&lt;code&gt;arguments.callee&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">関数本体内の現在の関数を参照する場合は、名前付き関数式を作成する必要があります。&lt;u&gt;&lt;strong&gt;この名前は、関数本体（スコープ）に対してのみローカルになります&lt;/strong&gt;&lt;/u&gt;。これにより、非標準の&lt;a href=&quot;../functions/arguments/callee&quot;&gt; &lt;code&gt;arguments.callee&lt;/code&gt; &lt;/a&gt;プロパティの使用も回避されます。</target>
        </trans-unit>
        <trans-unit id="9597ad4f9e7ad14879829bc41d7ee7dd8599f31b" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current function inside the function body, you need to create a named function expression. &lt;u&gt;&lt;strong&gt;This name is then local only to the function body (scope)&lt;/strong&gt;&lt;/u&gt;. This also avoids using the non-standard &lt;code&gt;&lt;a href=&quot;../functions/arguments/callee&quot;&gt;arguments.callee&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">関数本体内の現在の関数を参照する場合は、名前付き関数式を作成する必要があります。&lt;u&gt;&lt;strong&gt;この名前は、関数本体（スコープ）に対してのみローカルになります&lt;/strong&gt;&lt;/u&gt;。これにより、非標準の &lt;code&gt;&lt;a href=&quot;../functions/arguments/callee&quot;&gt;arguments.callee&lt;/a&gt;&lt;/code&gt; プロパティの使用も回避されます。</target>
        </trans-unit>
        <trans-unit id="99528303e4fa98874c6d3b7da8c65a874a1f9d0b" translate="yes" xml:space="preserve">
          <source>If you want to remove the getter, you can just &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; it:</source>
          <target state="translated">ゲッターを削除したい場合は、&lt;a href=&quot;../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="a7fc22c8401e0f59ce33412d5d1a62fa14a2a8f0" translate="yes" xml:space="preserve">
          <source>If you want to remove the getter, you can just &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; it:</source>
          <target state="translated">あなたがゲッターを削除したい場合は、あなただけのことができます &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 、それを：</target>
        </trans-unit>
        <trans-unit id="e1fd57c263b80cc07ff24ec488e383d11e16fe7f" translate="yes" xml:space="preserve">
          <source>If you want to remove the setter, you can just &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; it:</source>
          <target state="translated">セッターを削除したい場合は、&lt;a href=&quot;../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="afab6a24815f73f4c694b81bf63bd41e2e5c193b" translate="yes" xml:space="preserve">
          <source>If you want to remove the setter, you can just &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; it:</source>
          <target state="translated">セッターを削除したい場合は、 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; するだけです。</target>
        </trans-unit>
        <trans-unit id="c7a8801610bdd961430a0f13ef356227a205175f" translate="yes" xml:space="preserve">
          <source>If you want to see how to use the &lt;code&gt;Object.defineProperty&lt;/code&gt; method with a &lt;em&gt;binary-flags-like&lt;/em&gt; syntax, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;additional examples&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;バイナリフラグのような&lt;/em&gt;構文で &lt;code&gt;Object.defineProperty&lt;/code&gt; メソッドを使用する方法を確認するには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;追加の例を&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a33a81af4ee501f0c074526b9710c19c67c2ea6e" translate="yes" xml:space="preserve">
          <source>If you want to see how to use the &lt;code&gt;Object.defineProperty&lt;/code&gt; method with a &lt;em&gt;binary-flags-like&lt;/em&gt; syntax, see &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;additional examples&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Object.defineProperty&lt;/code&gt; メソッドを&lt;em&gt;バイナリフラグのような&lt;/em&gt;構文で使用する方法を確認したい場合は、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;追加の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="088b49e17dfc48492f7ae931aa8eea2f898fed94" translate="yes" xml:space="preserve">
          <source>If you want to use an ordered associative array in a cross-browser environment, use a &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object if available, or simulate this structure with two separate arrays (one for the keys and the other for the values), or build an array of single-property objects, etc.</source>
          <target state="translated">クロスブラウザー環境で順序付き連想配列を使用する場合は、可能な場合は&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;オブジェクトを使用するか、2つの個別の配列（1つはキー用、もう1つは値用）でこの構造をシミュレートするか、単一の配列を作成します。 -プロパティオブジェクトなど</target>
        </trans-unit>
        <trans-unit id="19381b630a3a814e91674608c14a389044af178b" translate="yes" xml:space="preserve">
          <source>If you were to provide an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; as the second argument to &lt;code&gt;reduce()&lt;/code&gt;, the result would look like this:</source>
          <target state="translated">あなたが提供した場合 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; するために2番目の引数として &lt;code&gt;reduce()&lt;/code&gt; 、その結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="ffb5ffcd2b43a51e7c0b5d8ecc72c4f2fa812052" translate="yes" xml:space="preserve">
          <source>If you were to provide an initial value as the second argument to &lt;code&gt;reduce()&lt;/code&gt;, the result would look like this:</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; の 2番目の引数として初期値を指定すると、結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9641348677babae98e66baf7b0dc8fe9f67d1d9b" translate="yes" xml:space="preserve">
          <source>If you wish to await two or more promises in parallel, you must still use &lt;code&gt;Promise#then&lt;/code&gt;, as &lt;code&gt;parallel&lt;/code&gt; does in the example.</source>
          <target state="translated">2つ以上の &lt;code&gt;Promise#then&lt;/code&gt; を &lt;code&gt;parallel&lt;/code&gt; して待機する場合でも、例のparallelと同様に、Promise＃thenを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c253c1c3b6acd6d4520eacac9b373475e00e1fb8" translate="yes" xml:space="preserve">
          <source>If you wish to inherit from multiple objects, then mixins are a possibility.</source>
          <target state="translated">複数のオブジェクトを継承したい場合は、mixinsが可能です。</target>
        </trans-unit>
        <trans-unit id="b358a85c79019bc0c27a5e9a086df327f3612e47" translate="yes" xml:space="preserve">
          <source>If you wish to safely perform two or more jobs in parallel, you must await a call to &lt;code&gt;&lt;a href=&quot;../global_objects/promise/all&quot;&gt;Promise.all&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../global_objects/promise/allsettled&quot;&gt;Promise.allSettled&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2つ以上のジョブを安全に並行して実行したい場合は、 &lt;code&gt;&lt;a href=&quot;../global_objects/promise/all&quot;&gt;Promise.all&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../global_objects/promise/allsettled&quot;&gt;Promise.allSettled&lt;/a&gt;&lt;/code&gt; への呼び出しを待つ必要があります。</target>
        </trans-unit>
        <trans-unit id="3d85b069cf65c1056e4db1149435fcd8a68335dc" translate="yes" xml:space="preserve">
          <source>If you wish to support the use of a bound function only using &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;, or only by calling it, the target function must enforce that restriction.</source>
          <target state="translated">&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;のみを使用して、またはそれを呼び出すことによってのみ、バインドされた関数の使用をサポートする場合、ターゲット関数はその制限を適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="28b16738f775180a66d096e17e9c0fac48e31c55" translate="yes" xml:space="preserve">
          <source>If you're experimenting with code in a web browser, such as the Firefox Web Console (&lt;strong&gt;Tools &lt;/strong&gt;&amp;gt;&lt;strong&gt; Web Developer &lt;/strong&gt;&amp;gt;&lt;strong&gt; Web Console&lt;/strong&gt;) and you 'Run' a definition of a class with the same name twice, you'll get a &lt;code&gt;SyntaxError: redeclaration of let &lt;em&gt;ClassName&lt;/em&gt;;&lt;/code&gt;. (See further discussion of this issue in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1428672&quot;&gt;bug 1428672&lt;/a&gt;.) Doing something similar in Chrome Developer Tools gives you a message like &lt;code&gt;Uncaught SyntaxError: Identifier '&lt;em&gt;ClassName&lt;/em&gt;' has already been declared at &amp;lt;anonymous&amp;gt;:1:1&lt;/code&gt;.</source>
          <target state="translated">Firefox Webコンソール（[&lt;strong&gt;ツール]&lt;/strong&gt; &amp;gt; [ &lt;strong&gt;Web開発者]&lt;/strong&gt; &amp;gt; [ &lt;strong&gt;Webコンソール]&lt;/strong&gt;）などのWebブラウザーでコードを試しているときに、同じ名前のクラスの定義を2回「実行」 &lt;code&gt;SyntaxError: redeclaration of let &lt;em&gt;ClassName&lt;/em&gt;;&lt;/code&gt; 、SyntaxErrorが発生します。&lt;em&gt;letClassNameの&lt;/em&gt;再宣言;。 （&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1428672&quot;&gt;バグ1428672&lt;/a&gt;でこの問題の詳細な説明を参照してください。）Chrome Developer Toolsで同様のことを行うと、 &lt;code&gt;Uncaught SyntaxError: Identifier '&lt;em&gt;ClassName&lt;/em&gt;' has already been declared at &amp;lt;anonymous&amp;gt;:1:1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1718e56ab56bc63e9b5c1230d10ad98783a6bcb6" translate="yes" xml:space="preserve">
          <source>If your class is a derived class, the default constructor calls the parent constructor, passing along any arguments that were provided:</source>
          <target state="translated">クラスが派生クラスの場合、デフォルトのコンストラクタは親コンストラクタを呼び出し、与えられた引数を渡します。</target>
        </trans-unit>
        <trans-unit id="1c3ce3648420f55b4147d24cab187f467076e9ce" translate="yes" xml:space="preserve">
          <source>If your project uses packages that export ESM, you can also import them for side effects only. This will run the code in the package entry point file (and any files it imports) only.</source>
          <target state="translated">プロジェクトでESMをエクスポートするパッケージを使用している場合は、副作用のためだけにインポートすることもできます。これは、パッケージのエントリポイントファイル (およびそれがインポートするすべてのファイル)のコードのみを実行します。</target>
        </trans-unit>
        <trans-unit id="9752f0db065b6780513593f5577369639a2acaaf" translate="yes" xml:space="preserve">
          <source>If your regular expression uses the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag, you can use the &lt;code&gt;exec()&lt;/code&gt; method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; specified by the regular expression's &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property (&lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property). Note that the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property will not be reset when searching a different string, it will start its search at its existing &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; .</source>
          <target state="translated">正規表現で「 &lt;code&gt;g&lt;/code&gt; 」フラグを使用している場合は、 &lt;code&gt;exec()&lt;/code&gt; メソッドを複数回使用して、同じ文字列内の連続する一致を見つけることができます。これを行うと、検索は正規表現の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティで指定された &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; の部分文字列から開始されます（&lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティも進めます）。&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティは、別の文字列を検索するときにリセットされず、既存の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; から&lt;/a&gt;検索を開始することに注意してください。</target>
        </trans-unit>
        <trans-unit id="c2d04674a5af9a41b5f728b702f2b91de19a7082" translate="yes" xml:space="preserve">
          <source>If your regular expression uses the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag, you can use the &lt;code&gt;exec()&lt;/code&gt; method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of &lt;code&gt;str&lt;/code&gt; specified by the regular expression's &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property (&lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property). Note that the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property will not be reset when searching a different string it will start its search at its existing &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; .</source>
          <target state="translated">正規表現で「 &lt;code&gt;g&lt;/code&gt; 」フラグを使用している場合は、 &lt;code&gt;exec()&lt;/code&gt; メソッドを複数回使用して、同じ文字列で連続する一致を見つけることができます。その場合、検索は正規表現の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティで指定された &lt;code&gt;str&lt;/code&gt; の部分文字列から始まります（&lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティも進みます）。別の文字列を検索しても、&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティはリセットされず、既存の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; から&lt;/a&gt;検索が開始されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3a9f12b1dc332abbb2f8fc8ea3de59b0640a4c8e" translate="yes" xml:space="preserve">
          <source>If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:</source>
          <target state="translated">値の配列が何万にもなる可能性がある場合は、ハイブリッド戦略を使用します。</target>
        </trans-unit>
        <trans-unit id="00f07d80e0be0674f46c91673837e8b3acb3567d" translate="yes" xml:space="preserve">
          <source>Ignoring some returned values</source>
          <target state="translated">返された値の一部を無視する</target>
        </trans-unit>
        <trans-unit id="57f2c95b766adf67d35d720bd7a552837b1ff2f2" translate="yes" xml:space="preserve">
          <source>Illegal character</source>
          <target state="translated">違法なキャラクター</target>
        </trans-unit>
        <trans-unit id="bf8a946bee9899de71266d734c579d7b3e7c14a0" translate="yes" xml:space="preserve">
          <source>Immediately Invoked Function Expressions</source>
          <target state="translated">すぐに呼び出される関数式</target>
        </trans-unit>
        <trans-unit id="0a98f9ab649d5842f0e2d4409933f707c73e764f" translate="yes" xml:space="preserve">
          <source>Implementation Progress</source>
          <target state="translated">実装の進捗状況</target>
        </trans-unit>
        <trans-unit id="1d77a4da59a498bc0526734d1d32ceaf44b25a12" translate="yes" xml:space="preserve">
          <source>Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the &lt;code&gt;formatMatcher&lt;/code&gt; property: A &lt;a href=&quot;http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher&quot;&gt;fully specified &lt;code&gt;&quot;basic&quot;&lt;/code&gt; algorithm&lt;/a&gt; and an implementation-dependent &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; algorithm.</source>
          <target state="translated">実装は他のサブセットをサポートする場合があり、要求は、最適な一致を見つけるために、使用可能なすべてのサブセットと表現の組み合わせに対してネゴシエートされます。このネゴシエーションには2つのアルゴリズムが利用可能であり、 &lt;code&gt;formatMatcher&lt;/code&gt; プロパティによって選択されます。&lt;a href=&quot;http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher&quot;&gt;完全に指定された &lt;code&gt;&quot;basic&quot;&lt;/code&gt; アルゴリズム&lt;/a&gt;と、実装に依存する &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; アルゴリズムです。</target>
        </trans-unit>
        <trans-unit id="9891b7f1f9d2e885ea5e7211c73846949ae5ce55" translate="yes" xml:space="preserve">
          <source>Implemented in JavaScript 1.0.</source>
          <target state="translated">JavaScript 1.0で実装されています。</target>
        </trans-unit>
        <trans-unit id="f33ba6d0736fb021c9fc01268c7a34b22e5f56c8" translate="yes" xml:space="preserve">
          <source>Implementing a &lt;code&gt;WeakMap&lt;/code&gt;-like class with a .clear() method</source>
          <target state="translated">.clear（）メソッドを使用して &lt;code&gt;WeakMap&lt;/code&gt; のようなクラスを実装する</target>
        </trans-unit>
        <trans-unit id="0532eeb0dfeca745a29b54a058021727371ec22f" translate="yes" xml:space="preserve">
          <source>Implementing a WeakMap-like class with a .clear() method</source>
          <target state="translated">.clear()メソッドでWeakMapライクなクラスを実装する</target>
        </trans-unit>
        <trans-unit id="c749b374aeb24624ee8aa56bb696c115d5f5e9a5" translate="yes" xml:space="preserve">
          <source>Implementing basic set operations</source>
          <target state="translated">基本的なセット操作の実装</target>
        </trans-unit>
        <trans-unit id="b88a338120312301e3ec4ab586557d6a7e9f0f33" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;Function.prototype.toString&lt;/code&gt; revision</source>
          <target state="translated">&lt;code&gt;Function.prototype.toString&lt;/code&gt; リビジョンを実装します</target>
        </trans-unit>
        <trans-unit id="380f227f10005ab46ff9c7c323b946317aa5a7e7" translate="yes" xml:space="preserve">
          <source>Implicit call:</source>
          <target state="translated">暗黙の呼び出し。</target>
        </trans-unit>
        <trans-unit id="7cf7edc6eed680f670f1903e2fa95dffe98c8491" translate="yes" xml:space="preserve">
          <source>Implicit globals and outer function scope</source>
          <target state="translated">暗黙のグローバルと外部関数スコープ</target>
        </trans-unit>
        <trans-unit id="23dadb4aba4124154d197243dcf4d7ef8b8da923" translate="yes" xml:space="preserve">
          <source>Import a module for its side effects only</source>
          <target state="translated">副作用のみのモジュールをインポートする</target>
        </trans-unit>
        <trans-unit id="c5b568ec8548086b4de521e5d8033aec1c934aac" translate="yes" xml:space="preserve">
          <source>Import a single export from a module</source>
          <target state="translated">モジュールから単一のエクスポートをインポートする</target>
        </trans-unit>
        <trans-unit id="a221101514292b5fcf882207fe6e9cbe5953924e" translate="yes" xml:space="preserve">
          <source>Import an entire module for side effects only, without importing anything. This runs the module's global code, but doesn't actually import any values.</source>
          <target state="translated">何もインポートせずに、モジュール全体を副作用のためだけにインポートします。これはモジュールのグローバルコードを実行しますが、実際には値をインポートしません。</target>
        </trans-unit>
        <trans-unit id="6dba1b2f0c4295b30c790350d8885ab2810a087e" translate="yes" xml:space="preserve">
          <source>Import an entire module's contents</source>
          <target state="translated">モジュールのコンテンツ全体をインポートする</target>
        </trans-unit>
        <trans-unit id="b51d3f221713e66532ca8daeac5ec886156d5d57" translate="yes" xml:space="preserve">
          <source>Import an export with a more convenient alias</source>
          <target state="translated">より便利なエイリアスでエクスポートをインポートする</target>
        </trans-unit>
        <trans-unit id="478b4766b3a380867a3862a6ca8bdb0a668262eb" translate="yes" xml:space="preserve">
          <source>Import multiple exports from a module with convenient aliases.</source>
          <target state="translated">便利なエイリアスを使ってモジュールから複数のエクスポートをインポートします。</target>
        </trans-unit>
        <trans-unit id="bd9c8faa833f0f94f37e3eaac33816aac5e508cc" translate="yes" xml:space="preserve">
          <source>Import multiple exports from module</source>
          <target state="translated">モジュールから複数のエクスポートをインポート</target>
        </trans-unit>
        <trans-unit id="2adb455832e9c0f94412f3522b3179fa5ada0ef0" translate="yes" xml:space="preserve">
          <source>Import the exported module correctly</source>
          <target state="translated">エクスポートされたモジュールを正しくインポートする</target>
        </trans-unit>
        <trans-unit id="8d4ecf2834d54b456e6157b4f56fd8d7bf4ecc2a" translate="yes" xml:space="preserve">
          <source>Import/Export mutable globals proposal</source>
          <target state="translated">インポート/エクスポート可能なグローバルの提案</target>
        </trans-unit>
        <trans-unit id="102ff9d8f76a710f00d76cead3a7e8bba6f5cdfc" translate="yes" xml:space="preserve">
          <source>Importing defaults</source>
          <target state="translated">デフォルトのインポート</target>
        </trans-unit>
        <trans-unit id="f71dcbf6278006d50e621d3d0c3ded43630b6564" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;new.target&lt;/code&gt; is inherited from the surrounding scope.</source>
          <target state="translated">&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印機能&lt;/a&gt;、 &lt;code&gt;new.target&lt;/code&gt; が周囲の範囲から継承されています。</target>
        </trans-unit>
        <trans-unit id="a195036ba7dec4c4382e6cf6537c69752b0ed431" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;this&lt;/code&gt; retains the value of the enclosing lexical context's &lt;code&gt;this&lt;/code&gt;. In global code, it will be set to the global object:</source>
          <target state="translated">では&lt;a href=&quot;../functions/arrow_functions&quot;&gt;、矢印の機能&lt;/a&gt;、 &lt;code&gt;this&lt;/code&gt; レキシカルコンテキストの値が保持されます &lt;code&gt;this&lt;/code&gt; 。グローバルコードでは、グローバルオブジェクトに設定されます。</target>
        </trans-unit>
        <trans-unit id="6c73f4538311a378c8c9424d32c3f8811910d419" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; code, however, this will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">で&lt;a href=&quot;../strict_mode&quot;&gt;strictモードの&lt;/a&gt;コードは、しかし、これがスローされます&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="82dc5204fd47b97a4c4e971fee4ed30a2687404c" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; code, you can't use &quot;&lt;code&gt;let&lt;/code&gt;&quot; as a label name. It will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; (let is a reserved identifier).</source>
          <target state="translated">で&lt;a href=&quot;../strict_mode&quot;&gt;strictモードの&lt;/a&gt;コードは、「使用することはできません &lt;code&gt;let&lt;/code&gt; ラベル名として」。&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;がスローされます（letは予約済み識別子です）。</target>
        </trans-unit>
        <trans-unit id="c6054ae0aa42f967abbaaff8c7c370a661682c9b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, attempting to add new properties to a non-extensible object throws a &lt;code&gt;TypeError&lt;/code&gt;. In sloppy mode, the addition of the &quot;x&quot; property is silently ignored.</source>
          <target state="translated">&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;、非拡張可能オブジェクトに新しいプロパティを追加しようとするとスロー &lt;code&gt;TypeError&lt;/code&gt; 。ずさんなモードでは、 &quot;x&quot;プロパティの追加は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="af9aba5cd8d260931e6c60474eae352d67a9887b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, starting with ES2015, functions inside blocks are scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode.</source>
          <target state="translated">&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;、ES2015始まる、ブロック内部の機能は、そのブロックにスコープされています。ES2015より前は、ブロックレベルの機能は厳密モードでは禁止されていました。</target>
        </trans-unit>
        <trans-unit id="216d48a6757220d152e7f994000123b4833e4e79" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, the &lt;a href=&quot;../global_objects/function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/arguments&quot;&gt;&lt;code&gt;Function.arguments&lt;/code&gt;&lt;/a&gt; properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature.</source>
          <target state="translated">&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;、&lt;a href=&quot;../global_objects/function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/arguments&quot;&gt; &lt;code&gt;Function.arguments&lt;/code&gt; &lt;/a&gt;特性が使用されてはなりません。これらは関数呼び出し元をリークし、非標準であり、最適化が難しく、パフォーマンスに悪影響を与える可能性があるため、非推奨です。</target>
        </trans-unit>
        <trans-unit id="b3ea4e9343d838f1294b3b7ae8cc65f8857960e3" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/arguments&quot;&gt;&lt;code&gt;Function.arguments&lt;/code&gt;&lt;/a&gt; properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature.</source>
          <target state="translated">&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/arguments&quot;&gt; &lt;code&gt;Function.arguments&lt;/code&gt; &lt;/a&gt;特性が使用されてはなりません。これらは、関数呼び出し元をリークし、非標準であり、最適化が困難で、パフォーマンスに悪影響を与える可能性があるため、非推奨です。</target>
        </trans-unit>
        <trans-unit id="9ae11f4b28ed355c17fb2cf7b60c3de003e3a4a0" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, identifiers can contain only alphanumeric characters (or &quot;$&quot; or &quot;_&quot;), and may not start with a digit. An identifier differs from a &lt;strong&gt;string&lt;/strong&gt; in that a string is data, while an identifier is part of the code.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScriptを&lt;/a&gt;、識別子は、英数字のみ（または「$」または「_」）を含めることができ、数字で始めることはできません。識別子は&lt;strong&gt;文字列&lt;/strong&gt;とは異なり、文字列はデータですが、識別子はコードの一部です。</target>
        </trans-unit>
        <trans-unit id="b1cf0c9af0f3437de670684af61db176a2e024d0" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, identifiers can contain only alphanumeric characters (or &quot;$&quot; or &quot;_&quot;), and may not start with a digit. An identifier differs from a &lt;strong&gt;string&lt;/strong&gt; in that a string is data, while an identifier is part of the code.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScriptを&lt;/a&gt;、識別子は、英数字のみ（または「$」または「_」）を含めることができ、数字で始めることはできません。識別子は文字列がデータであるのに対し、識別子はコードの一部であるという点で&lt;strong&gt;文字列&lt;/strong&gt;とは異なります。</target>
        </trans-unit>
        <trans-unit id="9ceac41023ca7e64457c2a69427be9598fb1653c" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, all browsers that support ES2015 handle this the same way: &lt;code&gt;zero&lt;/code&gt; is defined only if &lt;code&gt;shouldDefineZero&lt;/code&gt; is true, and only in the scope of the &lt;code&gt;if&lt;/code&gt;-block.</source>
          <target state="translated">で&lt;a href=&quot;strict_mode&quot;&gt;strictモード&lt;/a&gt;、サポートES2015はこれと同じように扱うことをすべてのブラウザ： &lt;code&gt;zero&lt;/code&gt; 場合にのみ定義されて &lt;code&gt;shouldDefineZero&lt;/code&gt; が真である、とだけの範囲で &lt;code&gt;if&lt;/code&gt; -ブロック。</target>
        </trans-unit>
        <trans-unit id="29666e4908ed732ae018d4d4721ff9754d3c167b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, starting with ES2015, functions inside blocks are now scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode.</source>
          <target state="translated">&lt;a href=&quot;strict_mode&quot;&gt;厳密モード&lt;/a&gt;、ES2015始まる、ブロック内部の機能について、そのブロックにスコープされています。ES2015より前のバージョンでは、ブロックレベルの関数は厳格モードでは禁止されていました。</target>
        </trans-unit>
        <trans-unit id="873415a6a8f203e4bdfe8b79a65ee0b40b608117" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentPromise,&lt;/code&gt;&lt;code&gt;Promise.all&lt;/code&gt; wires up the promise chain in one go, meaning that the operation will fail-fast regardless of the order of rejection of the promises, and the error will always occur within the configured promise chain, enabling it to be caught in the normal way.</source>
          <target state="translated">では &lt;code&gt;concurrentPromise,&lt;/code&gt; &lt;code&gt;Promise.all&lt;/code&gt; の操作に関係なく、約束の拒絶反応のための高速失敗し、エラーを常にキャッチするためにそれを可能に構成された約束チェーン内で発生することを意味し、一度で約束チェーンアップワイヤー、通常の方法で。</target>
        </trans-unit>
        <trans-unit id="221555bbaf990eeb6c49e029c703b9faa3ef204e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentStart&lt;/code&gt;, both timers are created and then &lt;code&gt;await&lt;/code&gt;ed. The timers are running concurrently but the &lt;code&gt;await&lt;/code&gt; calls are still running in series, meaning the second &lt;code&gt;await&lt;/code&gt; will wait for the first one to finish. This leads the code to finish in 2 rather than 3 seconds, which is the time the slowest timer needs. The same happens in &lt;code&gt;stillConcurrent&lt;/code&gt; using &lt;code&gt;Promise.all&lt;/code&gt; this time.</source>
          <target state="translated">で &lt;code&gt;concurrentStart&lt;/code&gt; 、両方のタイマーを作成し、されている &lt;code&gt;await&lt;/code&gt; 編。タイマーは同時に実行され &lt;code&gt;await&lt;/code&gt; ますが、await呼び出しは引き続き実行されています。つまり、2番目の &lt;code&gt;await&lt;/code&gt; は最初のawaitが終了するまで待機します。これにより、コードが3秒ではなく2秒で終了します。これは、最も遅いタイマーに必要な時間です。今回は &lt;code&gt;stillConcurrent&lt;/code&gt; を使用して &lt;code&gt;Promise.all&lt;/code&gt; 同じことが起こります。</target>
        </trans-unit>
        <trans-unit id="dca20ace845e482ba3a705f727cc3a8ad77cf9d7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentStart&lt;/code&gt;, both timers are created and then &lt;code&gt;await&lt;/code&gt;ed. The timers run concurrently, which means the code finishes in 2 rather than 3 seconds, i.e. the slowest timer.</source>
          <target state="translated">で &lt;code&gt;concurrentStart&lt;/code&gt; 、両方のタイマーを作成し、されている &lt;code&gt;await&lt;/code&gt; 編。タイマーは同時に実行されます。つまり、コードは3秒ではなく2秒で終了します。つまり、最も遅いタイマーです。</target>
        </trans-unit>
        <trans-unit id="f4f97a7bbaeebe37b6849072c8d4d0a9f173528d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentStart&lt;/code&gt;, if promise &lt;code&gt;fast&lt;/code&gt; rejects before promise &lt;code&gt;slow&lt;/code&gt; is fulfilled, then an unhandled promise rejection error will be raised, regardless of whether the caller has configured a catch clause.</source>
          <target state="translated">で &lt;code&gt;concurrentStart&lt;/code&gt; 約束場合は、 &lt;code&gt;fast&lt;/code&gt; 約束を拒否する前に &lt;code&gt;slow&lt;/code&gt; 満たされ、その後、未処理の約束拒否エラーにかかわらず、発信者がcatch節を構成しているかどうかの、発生します。</target>
        </trans-unit>
        <trans-unit id="9d7a6fe3cf2916c84be2ef5c18d5e7128c24c00e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;for...of&lt;/code&gt; loops, abrupt iteration termination can be caused by &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;. In these cases, the iterator is closed.</source>
          <target state="translated">で &lt;code&gt;for...of&lt;/code&gt; ループ、突然の反復終了のが原因で発生することができ &lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; または &lt;code&gt;return&lt;/code&gt; 。これらの場合、イテレータは閉じています。</target>
        </trans-unit>
        <trans-unit id="f24173b93852ae7003f7140596ebc37c863720d7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;for...of&lt;/code&gt; loops, abrupt iteration termination can be caused by &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;. In these cases, the iterator is closed.</source>
          <target state="translated">で &lt;code&gt;for...of&lt;/code&gt; ループ、突然の反復終了のが原因で発生することができ &lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; または &lt;code&gt;return&lt;/code&gt; 。このような場合、イテレータは閉じられます。</target>
        </trans-unit>
        <trans-unit id="4d6add7a612b365f8147b939f3c6f66bc22b629f" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;sequentialStart&lt;/code&gt;, execution suspends 2 seconds for the first &lt;code&gt;await&lt;/code&gt;, and then again another 1 second for the second &lt;code&gt;await&lt;/code&gt;. The second timer is not created until the first has already fired.</source>
          <target state="translated">&lt;code&gt;sequentialStart&lt;/code&gt; 、実行が最初の2秒間中断 &lt;code&gt;await&lt;/code&gt; 、再度第二のために別の1秒 &lt;code&gt;await&lt;/code&gt; 。2番目のタイマーは、最初のタイマーがすでに起動するまで作成されません。</target>
        </trans-unit>
        <trans-unit id="8ffa1771a0ac6f2ae699ccfcc00a18930b4b803c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;sequentialStart&lt;/code&gt;, execution suspends 2 seconds for the first &lt;code&gt;await&lt;/code&gt;, and then another second for the second &lt;code&gt;await&lt;/code&gt;. The second timer is not created until the first has already fired, so the code finishes after 3 seconds.</source>
          <target state="translated">&lt;code&gt;sequentialStart&lt;/code&gt; 、実行が最初の2秒の中断 &lt;code&gt;await&lt;/code&gt; 、及び第二のために、別の第二 &lt;code&gt;await&lt;/code&gt; 。2番目のタイマーは、最初のタイマーがすでに起動するまで作成されないため、コードは3秒後に終了します。</target>
        </trans-unit>
        <trans-unit id="176a20a11517113033606aab1e61e3d4ca20c6ad" translate="yes" xml:space="preserve">
          <source>In C, the &lt;code&gt;strcmp()&lt;/code&gt; function is used for comparing strings. In JavaScript, you just use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;less-than and greater-than operators&lt;/a&gt;:</source>
          <target state="translated">Cでは、 &lt;code&gt;strcmp()&lt;/code&gt; 関数を使用して文字列を比較します。JavaScriptでは、小&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;なり記号と大なり記号を&lt;/a&gt;使用するだけです。</target>
        </trans-unit>
        <trans-unit id="309d60f8743568aecbdf811d2d351da393f4b34d" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015 There is a way to concisely define properties whose values are generator functions:</source>
          <target state="translated">ECMAScript 2015では、値がジェネレーター関数であるプロパティを簡潔に定義する方法があります。</target>
        </trans-unit>
        <trans-unit id="a8ee30c3781491b37d2d91aa12c3f275c2e033a0" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015, a shorthand notation is available, so that the keyword &quot;&lt;code&gt;function&lt;/code&gt;&quot; is no longer necessary.</source>
          <target state="translated">ECMAScript 2015では、省略表記が使用できるため、キーワード「 &lt;code&gt;function&lt;/code&gt; 」は不要になりました。</target>
        </trans-unit>
        <trans-unit id="7df1fd3d991e32f1320629672612245d3c92c0f7" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015, a shorthand notation is available, so that the keyword &quot;function&quot; is no longer necessary.</source>
          <target state="translated">ECMAScript 2015では、短縮記法が使えるようになり、「関数」というキーワードが不要になりました。</target>
        </trans-unit>
        <trans-unit id="fbe274850fe44af194eea5fda8294e245f5d4c8b" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015, there is a way to concisely define properties whose values are generator functions:</source>
          <target state="translated">ECMAScript 2015では、値がジェネレーター関数であるプロパティを簡潔に定義する方法があります。</target>
        </trans-unit>
        <trans-unit id="948177c7ae9848dd8e493ddbacacd75cb5473d9a" translate="yes" xml:space="preserve">
          <source>In ECMAScript 3/5, the &lt;code&gt;this&lt;/code&gt; issue was fixable by assigning the value in &lt;code&gt;this&lt;/code&gt; to a variable that could be closed over.</source>
          <target state="translated">ECMAScriptの3/5で、 &lt;code&gt;this&lt;/code&gt; 問題は、の値を割り当てることによって固定可能であった &lt;code&gt;this&lt;/code&gt; 上閉じられる変数です。</target>
        </trans-unit>
        <trans-unit id="4fd06900882a105e2510f94e9cdbf294840e46f9" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5 strict mode code, duplicate property names were considered a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. With the introduction of computed property names making duplication possible at runtime, ECMAScript 2015 has removed this restriction.</source>
          <target state="translated">ECMAScript 5の厳密モードコードでは、重複するプロパティ名は&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;と見なされていました。実行時に複製を可能にする計算されたプロパティ名の導入により、ECMAScript 2015ではこの制限が取り除かれました。</target>
        </trans-unit>
        <trans-unit id="02e140d416437887a7872326dba6eed9437d2415" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5, this behavior was changed for &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. Assignment to an unqualified identifier in strict mode will result in a &lt;code&gt;ReferenceError&lt;/code&gt;, to avoid the accidental creation of properties on the global object.</source>
          <target state="translated">ECMAScript 5では、この動作は&lt;a href=&quot;../strict_mode&quot;&gt;strictモードで&lt;/a&gt;変更されました。strictモードで非修飾識別子に割り当てると、 &lt;code&gt;ReferenceError&lt;/code&gt; が発生し、グローバルオブジェクトに誤ってプロパティが作成されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="82de7fe847ca3c223f7295513a60c00f3cc6f251" translate="yes" xml:space="preserve">
          <source>In ES2015 with nested template literals:</source>
          <target state="translated">ES2015でテンプレートリテラルを入れ子にした場合。</target>
        </trans-unit>
        <trans-unit id="2e28d1359b78caea73bd201eb664d9160434980d" translate="yes" xml:space="preserve">
          <source>In ES2015 with template literals and without nesting:</source>
          <target state="translated">ES2015では、テンプレートリテラルと入れ子なし。</target>
        </trans-unit>
        <trans-unit id="f3672427c7965f113f3fe4cb570beacc248c8428" translate="yes" xml:space="preserve">
          <source>In ES2015, the class syntax allows for sub-classing of both built-in and user defined classes; as a result, static methods such as &lt;code&gt;Array.from&lt;/code&gt; are &quot;inherited&quot; by subclasses of &lt;code&gt;Array&lt;/code&gt; and create new instances of the subclass, not &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">ES2015では、クラス構文により、組み込みクラスとユーザー定義クラスの両方をサブクラス化できます。結果として、のような静的メソッド &lt;code&gt;Array.from&lt;/code&gt; はのサブクラスによって「継承」されている &lt;code&gt;Array&lt;/code&gt; およびサブクラス、ないの新しいインスタンスを作成 &lt;code&gt;Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c41c52a21154ec2619b7bacc530a4f16cecd0dd3" translate="yes" xml:space="preserve">
          <source>In ES2015, the class syntax allows sub-classing of both built-in and user-defined classes. As a result, static methods such as &lt;code&gt;Array.from()&lt;/code&gt; are &quot;inherited&quot; by subclasses of &lt;code&gt;Array&lt;/code&gt;, and create new instances &lt;em&gt;of the subclass&lt;/em&gt;, not &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">ES2015では、クラス構文により、組み込みクラスとユーザー定義クラスの両方のサブクラス化が可能です。結果として、例えば、スタティックメソッド &lt;code&gt;Array.from()&lt;/code&gt; のサブクラスによって「継承」されている &lt;code&gt;Array&lt;/code&gt; 、及び新しいインスタンス作成&lt;em&gt;サブクラスの&lt;/em&gt;ではなく、 &lt;code&gt;Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ef0e40b46bde57de45d710a8decfe4f424e88a4" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="53864ec850c8528b35459bfdb64c830661afe252" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be coerced to an object.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、非オブジェクト引数はオブジェクトに強制変換されます。</target>
        </trans-unit>
        <trans-unit id="0030a6d3d27dbe9c4a6e9e4e06ecd6adb4308138" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a frozen ordinary object, simply return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、非オブジェクト引数は固定された通常のオブジェクトであるかのように扱われ、単に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8ca534830639609923b78d052142ef445d9da986" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、非オブジェクト引数は、拡張できない通常のオブジェクトであるかのように扱われ、単に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9bcfc35ed6e7f198824d6e0b0dcb22d3b293ba28" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return it.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、オブジェクト以外の引数は、拡張できない通常のオブジェクトであるかのように扱われ、単に返されます。</target>
        </trans-unit>
        <trans-unit id="007cf956ed6956737327164237b3afece1b87b2b" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a sealed ordinary object by simply returning it.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、オブジェクト以外の引数は、単に返すだけで、封印された通常のオブジェクトであるかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="a6d58ae111e6808420d9135fd6bfc1e632b51c47" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a sealed ordinary object, simply return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、非オブジェクト引数は封印された通常のオブジェクトであるかのように扱われ、単に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a25f137ee01cf4301c10ca6fc3d32a3d19298e37" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a sealed ordinary object, simply return it.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、非オブジェクト引数はあたかもそれが封印された通常のオブジェクトであるかのように扱われ、単にそれを返します。</target>
        </trans-unit>
        <trans-unit id="3d0bff99dd5b84da47050253c2c62698a5c39a02" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it were a frozen ordinary object, and be simply returned.</source>
          <target state="translated">ES5では、このメソッドの引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、非オブジェクト引数はあたかもフリーズされた通常のオブジェクトであるかのように扱われ、単純に返されます。</target>
        </trans-unit>
        <trans-unit id="8598ec4f16e006f73c4b98ace30ef3c88220ab1a" translate="yes" xml:space="preserve">
          <source>In ES5, if the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">ES5では、このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。ES2015では、最初に非オブジェクトの最初の引数がオブジェクトに強制変換されます。</target>
        </trans-unit>
        <trans-unit id="e2c167c36d97c1d699b099b1ec68b4a0acdf0879" translate="yes" xml:space="preserve">
          <source>In ES5, it will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the &lt;var&gt;obj&lt;/var&gt; parameter isn't an object. In ES2015, the parameter will be coerced to an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ES5では、 &lt;var&gt;obj&lt;/var&gt; パラメータがオブジェクトでない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外がスローされます。ES2015では、パラメーターは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;強制変換されます。</target>
        </trans-unit>
        <trans-unit id="e6d38ce849906adde58d4d32cd183bb3cd5e181f" translate="yes" xml:space="preserve">
          <source>In ES5, you typically use the &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; method to call a function with a given &lt;code&gt;this&lt;/code&gt; value and &lt;code&gt;arguments&lt;/code&gt; provided as an array (or an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;array-like object&lt;/a&gt;).</source>
          <target state="translated">ES5では、通常、&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;this&lt;/code&gt; 値と配列（または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;配列のようなオブジェクト&lt;/a&gt;）として提供される &lt;code&gt;arguments&lt;/code&gt; 指定して関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="7e6653f25dc7136aed24c5070c600b114c374f9a" translate="yes" xml:space="preserve">
          <source>In ES5, you typically use the &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; method to call a function with a given &lt;code&gt;this&lt;/code&gt; value and &lt;code&gt;arguments&lt;/code&gt; provided as an array (or an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;array-like object&lt;/a&gt;).</source>
          <target state="translated">ES5では、通常、&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;arguments&lt;/code&gt; された &lt;code&gt;this&lt;/code&gt; 値と配列（または&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;配列のようなオブジェクト&lt;/a&gt;）として提供される引数を使用して関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="cb9d84f212ebfd0b494629810bc4f123430adee3" translate="yes" xml:space="preserve">
          <source>In ES5:</source>
          <target state="translated">ES5では。</target>
        </trans-unit>
        <trans-unit id="4867ea47a940c21ea6c6af42152c706a4ec82ba3" translate="yes" xml:space="preserve">
          <source>In Edge 12 and 13, &lt;code&gt;let&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop initializer does not create a separate variable for each loop iteration as defined by ES2015. Instead, it behaves as though the loop were wrapped in a scoping block with the &lt;code&gt;let&lt;/code&gt; immediately before the loop.</source>
          <target state="translated">エッジ12および13に、 &lt;code&gt;let&lt;/code&gt; 内 &lt;code&gt;for&lt;/code&gt; ES2015によって定義される各ループ反復のために別の変数を作成しないイニシャライザループ。代わりに、ループがループの直前にある &lt;code&gt;let&lt;/code&gt; でスコープブロックにラップされているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="38f05042b00889b690877f9c1f38bccf3790a39b" translate="yes" xml:space="preserve">
          <source>In Firefox 18 - 39, the name of this method was &lt;code&gt;contains()&lt;/code&gt;. It was renamed to &lt;code&gt;includes()&lt;/code&gt; in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1102219&quot;&gt;bug 1102219&lt;/a&gt; due to the following reason:</source>
          <target state="translated">Firefox 18〜39では、このメソッドの名前は &lt;code&gt;contains()&lt;/code&gt; でした。&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1102219&quot;&gt;バグ1102219では&lt;/a&gt;、次の理由により、 &lt;code&gt;includes()&lt;/code&gt; に名前が変更されました。</target>
        </trans-unit>
        <trans-unit id="b3441497965bb64df9474736353a9248115e770e" translate="yes" xml:space="preserve">
          <source>In Firefox 42, the implementation got updated to reflect the final ES2015 specification: The result is now checked if it is an array and if the array elements are either of type string or of type symbol. Enumerating duplicate own property names is not a failure anymore.</source>
          <target state="translated">Firefox 42 では、実装が更新され、最終的な ES2015 仕様を反映するようになりました。結果が配列であるかどうか、配列の要素が文字列型かシンボル型かどうかをチェックするようになりました。自身のプロパティ名の重複を列挙しても失敗しないようになりました。</target>
        </trans-unit>
        <trans-unit id="be8d03fdcab501aecd669f36c6937ea8fde7271a" translate="yes" xml:space="preserve">
          <source>In Firefox 48, &lt;code&gt;String.prototype.contains()&lt;/code&gt; has been removed. Use &lt;code&gt;String.prototype.includes()&lt;/code&gt; only.</source>
          <target state="translated">Firefox 48では、 &lt;code&gt;String.prototype.contains()&lt;/code&gt; が削除されました。 &lt;code&gt;String.prototype.includes()&lt;/code&gt; のみを使用してください。</target>
        </trans-unit>
        <trans-unit id="6eab913afe11ef8c151060fcbf4894152ade8632" translate="yes" xml:space="preserve">
          <source>In Firefox 58, when the exception is unused, the identifier can be omitted, as in the code below. This is also &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-5.html&quot;&gt;allowed in TypeScript 2.5&lt;/a&gt; and later. However, at the time of this writing (August 2018), &lt;a href=&quot;https://github.com/tc39/proposal-optional-catch-binding&quot;&gt;the proposal to support this&lt;/a&gt; has not yet been included into an ECMAScript standard, so this syntax may not work in other browsers.</source>
          <target state="translated">Firefox 58では、例外が使用されていない場合、次のコードのように識別子を省略できます。これは&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-5.html&quot;&gt;TypeScript 2.5&lt;/a&gt;以降でも使用できます。ただし、この記事の執筆時点（2018年8月）では&lt;a href=&quot;https://github.com/tc39/proposal-optional-catch-binding&quot;&gt;、これをサポートする提案&lt;/a&gt;はまだECMAScript標準に含まれていないため、この構文は他のブラウザーでは機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="1730c0df30cd5ba97c5141ded4e91edebdb5d504" translate="yes" xml:space="preserve">
          <source>In Firefox, &lt;code&gt;handler&lt;/code&gt; is only called from assignments in script, not from native code. For example, &lt;code&gt;window.watch('location', myHandler)&lt;/code&gt; will not call &lt;code&gt;myHandler&lt;/code&gt; if the user clicks a link to an anchor within the current document. However, &lt;code&gt;window.location += '#myAnchor'&lt;/code&gt; will call &lt;code&gt;myHandler&lt;/code&gt;.</source>
          <target state="translated">Firefoxでは、 &lt;code&gt;handler&lt;/code&gt; はスクリプト内の割り当てからのみ呼び出され、ネイティブコードからは呼び出されません。例えば、 &lt;code&gt;window.watch('location', myHandler)&lt;/code&gt; 呼び出さないだろう &lt;code&gt;myHandler&lt;/code&gt; 、ユーザーが現在のドキュメント内のアンカーへのリンクをクリックした場合。ただし、 &lt;code&gt;window.location += '#myAnchor'&lt;/code&gt; は &lt;code&gt;myHandler&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="20427e6f530262dedd1f66d1091224f92b38be66" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20&amp;micro;s in Firefox 59; in 60 it will be 2ms.</source>
          <target state="translated">Firefoxでは、 &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; プリファレンスはデフォルトで有効になっており、Firefox 59ではデフォルトで20&amp;micro;sになっています。60では2msになります。</target>
        </trans-unit>
        <trans-unit id="0af97ad69484c392ea6d2c53e11669126d6b3def" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20us in Firefox 59; in 60 it will be 2ms.</source>
          <target state="translated">Firefoxでは、 &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; 設定がデフォルトで有効になっており、Firefox 59ではデフォルトで20usに設定されています。60では2msになります。</target>
        </trans-unit>
        <trans-unit id="2760c20e75f06135284b55f675e6ca0ea87f3385" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enable &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;, the precision will be 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="translated">Firefoxでは、 &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; を有効にすることもできます。精度は100msか、 &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt; の値のいずれか大きい方になります。</target>
        </trans-unit>
        <trans-unit id="9c7ba06ca4f441cd2e83c2b7bd2b5b0d766466d1" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enabled &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;, the precision will be 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="translated">Firefoxでは、 &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; を有効にすることもできます。精度は100msか、 &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt; の値のいずれか大きい方になります。</target>
        </trans-unit>
        <trans-unit id="5b8bed5863664df70343acda1590937b7118915f" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 11, numbers are rounded to 15 decimal digits. For example, &lt;code&gt;(1000000000000005).toLocaleString('en-US')&lt;/code&gt; returns &lt;code&gt;&quot;1,000,000,000,000,010&quot;&lt;/code&gt;.</source>
          <target state="translated">Internet Explorer 11では、数値は小数点以下15桁に丸められます。たとえば、 &lt;code&gt;(1000000000000005).toLocaleString('en-US')&lt;/code&gt; は &lt;code&gt;&quot;1,000,000,000,000,010&quot;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="16ae8ad7d0e4ba6962d4b6f17b97388cf31cdc72" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8, this was only supported on DOM objects and with some non-standard behaviors. This was later fixed in Internet Explorer 9.</source>
          <target state="translated">Internet Explorer 8 では、これは DOM オブジェクトといくつかの非標準的な動作でのみサポートされていました。これは後に Internet Explorer 9 で修正されました。</target>
        </trans-unit>
        <trans-unit id="4db24d0846e3ba3185a867d8668c69a5571ec019" translate="yes" xml:space="preserve">
          <source>In Internet Explorer, &lt;code&gt;let&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop initializer does not create a separate variable for each loop iteration as defined by ES2015. Instead, it behaves as though the loop were wrapped in a scoping block with the &lt;code&gt;let&lt;/code&gt; immediately before the loop.</source>
          <target state="translated">Internet Explorerで、 &lt;code&gt;let&lt;/code&gt; 内 &lt;code&gt;for&lt;/code&gt; ES2015で定義された各ループの繰り返しのために別の変数を作成していない初期化子ループ。代わりに、ループがループの直前にある &lt;code&gt;let&lt;/code&gt; でスコープブロックにラップされているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="a5615497b68ccaa1ea32d698e965d876cea2548f" translate="yes" xml:space="preserve">
          <source>In JSON the values can only be strings, numbers, arrays, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, or another (JSON) object.</source>
          <target state="translated">JSONでは、値は文字列、数値、配列、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; 、または別の（JSON）オブジェクトのみです。</target>
        </trans-unit>
        <trans-unit id="668b19b6452d0e28e81f530219de59631b89f0c9" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;s are not iterable unless they implement the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;. Therefore, you cannot use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;to iterate over the properties of an object.</source>
          <target state="translated">JavaScriptでは、&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;反復可能なプロトコル&lt;/a&gt;を実装しない限り、&lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;は反復可能ではありません。したがって、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of&lt;/a&gt;を使用してオブジェクトのプロパティを反復処理することはできません。</target>
        </trans-unit>
        <trans-unit id="895cd1421cbf51353ea473367f38e162aabe3974" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;s are not iterable unless they implement the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;. Therefore, you cannot use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;to iterate over the properties of an object.</source>
          <target state="translated">JavaScriptでは、&lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;反復可能なプロトコル&lt;/a&gt;を実装しない限り反復可能ではありません。したがって、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of&lt;/a&gt;を使用してオブジェクトのプロパティを反復処理することはできません。</target>
        </trans-unit>
        <trans-unit id="2855ac845af4473bd3a6be21040f1c7e0ad7b25b" translate="yes" xml:space="preserve">
          <source>In JavaScript, a setter can be used to execute a function whenever a specified property is attempted to be changed. Setters are most often used in conjunction with getters to create a type of pseudo-property. It is not possible to simultaneously have a setter on a property that holds an actual value.</source>
          <target state="translated">JavaScriptでは、指定したプロパティを変更しようとしたときに関数を実行するためにセッターを使用することができます。セッターは、疑似プロパティのタイプを作成するためにゲッターと一緒に使用されることが最も多いです。実際の値を保持しているプロパティにセッターを同時に持つことはできません。</target>
        </trans-unit>
        <trans-unit id="ca543fb85472cc8f29fc43d21952496053e3fecd" translate="yes" xml:space="preserve">
          <source>In JavaScript, function parameters default to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. However, it's often useful to set a different default value. This is where default parameters can help.</source>
          <target state="translated">JavaScriptでは、関数パラメーターのデフォルトは&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。ただし、多くの場合、別のデフォルト値を設定すると便利です。これは、デフォルトのパラメータが役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="c19c8d5903929df29ffd31d91bc12841578c097c" translate="yes" xml:space="preserve">
          <source>In JavaScript, function parameters default to &lt;code&gt;&lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. However, it's often useful to set a different default value. This is where default parameters can help.</source>
          <target state="translated">JavaScriptでは、関数パラメーターのデフォルトは &lt;code&gt;&lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; です。ただし、別のデフォルト値を設定すると便利な場合があります。ここで、デフォルトのパラメータが役立ちます。</target>
        </trans-unit>
        <trans-unit id="a20f27b3f1c13809f77edbf8f97737045dcbcf21" translate="yes" xml:space="preserve">
          <source>In JavaScript, functions are first-class objects, because they can have properties and methods just like any other object. What distinguishes them from other objects is that functions can be called. In brief, they are &lt;code&gt;&lt;a href=&quot;global_objects/function&quot;&gt;Function&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">JavaScriptでは、関数は他のオブジェクトと同じようにプロパティとメソッドを持つことができるため、ファーストクラスのオブジェクトです。それらを他のオブジェクトと区別するのは、関数を呼び出すことができることです。簡単に言うと、これらは &lt;code&gt;&lt;a href=&quot;global_objects/function&quot;&gt;Function&lt;/a&gt;&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="0482de27c3e98ed79056a4c8e3487f1d9c7e2eb4" translate="yes" xml:space="preserve">
          <source>In JavaScript, there are several reduce functions:</source>
          <target state="translated">JavaScriptにはいくつかのreduce関数があります。</target>
        </trans-unit>
        <trans-unit id="4e500e271dd9c768e0229c1f8cd060c64d5a885f" translate="yes" xml:space="preserve">
          <source>In JavaScript, we can do this with the following:</source>
          <target state="translated">JavaScriptでは、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="67dd1e314b8d816c5d9c9ed86c33a7c3051041e8" translate="yes" xml:space="preserve">
          <source>In Promises</source>
          <target state="translated">約束事の中で</target>
        </trans-unit>
        <trans-unit id="8753023eb7cfee3b18013db421fe39f22ac9cfb7" translate="yes" xml:space="preserve">
          <source>In UTF-16, the most common characters can be represented by a single 16-bit value (i.e. a code unit). However, this set of characters, known as the Base Multilingual Plane (BMP), is only &lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;17&lt;/sub&gt;&lt;sup&gt;th&lt;/sup&gt; of the total addressable Unicode code points. The remaining code points, in the range of &lt;code&gt;65536&lt;/code&gt; (&lt;code&gt;0x010000&lt;/code&gt;) to &lt;code&gt;1114111&lt;/code&gt; (&lt;code&gt;0x10FFFF&lt;/code&gt;) are known as supplementary characters. In UTF-16, supplementary characters are represented by two 16-bit code units, known as surrogates, that were reserved for this purpose. A valid combination of two surrogates used to represent a supplementary character is known as a surrogate pair.</source>
          <target state="translated">UTF-16では、最も一般的な文字を単一の16ビット値（つまり、コード単位）で表すことができます。しかし、基本多言語面（BMP）として知られている文字のこのセットは、唯一である&lt;sup&gt;1&lt;/sup&gt; / &lt;sub&gt;17&lt;/sub&gt;&lt;sup&gt;番目の&lt;/sup&gt;総アドレス可能なUnicodeコードポイント。 &lt;code&gt;65536&lt;/code&gt; （ &lt;code&gt;0x010000&lt;/code&gt; ）から &lt;code&gt;1114111&lt;/code&gt; （ &lt;code&gt;0x10FFFF&lt;/code&gt; ）の範囲の残りのコードポイントは、補足文字と呼ばれます。 UTF-16では、補助文字は、この目的のために予約された、サロゲートと呼ばれる2つの16ビットコードユニットで表されます。補足文字を表すために使用される2つのサロゲートの有効な組み合わせは、サロゲートペアと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3af0213442e56d88e4f08027d4396f1d413cc06e" translate="yes" xml:space="preserve">
          <source>In Unicode, two sequences of code points are compatible if they represent the same abstract characters, and should be treated alike in some &amp;mdash; but not necessarily all &amp;mdash; applications.</source>
          <target state="translated">Unicodeでは、コードポイントの2つのシーケンスは、それらが同じ抽象文字を表す場合に互換性があり、一部の（必ずしもすべてではない）アプリケーションで同様に扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="06fcf052ca7ee2994caca99f7c2a53bdfa453a22" translate="yes" xml:space="preserve">
          <source>In Unicode, two sequences of code points have canonical equivalence if they represent the same abstract characters, and should always have the same visual appearance and behavior (for example, they should always be sorted in the same way).</source>
          <target state="translated">Unicodeでは、2つのコード点の列は、同じ抽象文字を表す場合には正準等価性を持ち、常に同じ視覚的外観と動作を持つべきである(例えば、常に同じように並べ替えられるべきである)。</target>
        </trans-unit>
        <trans-unit id="30ccea940dd72f9de64442358a3ee98e6136515f" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop, it jumps to the update expression.</source>
          <target state="translated">で&lt;a href=&quot;for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ループは、更新式にジャンプします。</target>
        </trans-unit>
        <trans-unit id="f0090629de3eb7e932efc2299ea2b0e11274be76" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop, it jumps back to the condition.</source>
          <target state="translated">で&lt;a href=&quot;while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;ループ、それが戻っ条件にジャンプします。</target>
        </trans-unit>
        <trans-unit id="802ad80650674fefbc5baab939de5d45ff49c037" translate="yes" xml:space="preserve">
          <source>In a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed, the following example is a model for the applicability of &lt;code&gt;JSON.stringify()&lt;/code&gt;:</source>
          <target state="translated">ユーザーが作成したオブジェクトを保存し、ブラウザーを閉じた後でも復元できるようにする場合、次の例は &lt;code&gt;JSON.stringify()&lt;/code&gt; の適用可能性のモデルです。</target>
        </trans-unit>
        <trans-unit id="b974b8e0c8cc3adb8992389d2d0a1cd08b75c03c" translate="yes" xml:space="preserve">
          <source>In a circular structure like the following</source>
          <target state="translated">のような円形の構造で</target>
        </trans-unit>
        <trans-unit id="9a9eae68242ed66a24716ccc35563a64f014c279" translate="yes" xml:space="preserve">
          <source>In a concise body, only an expression is specified, which becomes the implicit return value. In a block body, you must use an explicit &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">簡潔な本文では、式のみが指定され、暗黙の戻り値になります。ブロック本体では、明示的な &lt;code&gt;return&lt;/code&gt; ステートメントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4f1b8f09e11f544c05027c4ef2b7cb80ca9f74d" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom array &lt;code&gt;MyArray&lt;/code&gt;), the &lt;code&gt;MyArray&lt;/code&gt; species is the &lt;code&gt;MyArray&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;Array&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（たとえば、カスタム配列 &lt;code&gt;MyArray&lt;/code&gt; ）では、 &lt;code&gt;MyArray&lt;/code&gt; 種は &lt;code&gt;MyArray&lt;/code&gt; コンストラクターです。ただし、派生クラスのメソッドで親の &lt;code&gt;Array&lt;/code&gt; オブジェクトを返すために、これを上書きしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="cf6e2e091bde1b1e25306a26d58b0ccc4c15bee3" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom array buffer &lt;code&gt;MyArrayBuffer&lt;/code&gt;), the &lt;code&gt;MyArrayBuffer&lt;/code&gt; species is the &lt;code&gt;MyArrayBuffer&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;ArrayBuffer&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（カスタムアレイバッファー &lt;code&gt;MyArrayBuffer&lt;/code&gt; など）では、 &lt;code&gt;MyArrayBuffer&lt;/code&gt; 種は &lt;code&gt;MyArrayBuffer&lt;/code&gt; コンストラクターです。ただし、派生クラスのメソッドで親の &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトを返すために、これを上書きしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="8676f845dcd23c9b49f4af2f5389c64e7e8218ba" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom map &lt;code&gt;MyMap&lt;/code&gt;), the &lt;code&gt;MyMap&lt;/code&gt; species is the &lt;code&gt;MyMap&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;Map&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（カスタムマップ &lt;code&gt;MyMap&lt;/code&gt; など）では、 &lt;code&gt;MyMap&lt;/code&gt; 種は &lt;code&gt;MyMap&lt;/code&gt; コンストラクターです。ただし、派生クラスのメソッドで親 &lt;code&gt;Map&lt;/code&gt; オブジェクトを返すために、これを上書きする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="6a21922d4d45a039d44b74194264a3b6620d0aa9" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom regexp &lt;code&gt;MyRegExp&lt;/code&gt;), the &lt;code&gt;MyRegExp&lt;/code&gt; species is the &lt;code&gt;MyRegExp&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;RegExp&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（カスタムregexp &lt;code&gt;MyRegExp&lt;/code&gt; など）では、 &lt;code&gt;MyRegExp&lt;/code&gt; 種は &lt;code&gt;MyRegExp&lt;/code&gt; コンストラクターです。ただし、派生クラスメソッドで親 &lt;code&gt;RegExp&lt;/code&gt; オブジェクトを返すために、これを上書きしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="a1c37cca7fcf5c973f743b17eb0dd855d1eeaf6f" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom set &lt;code&gt;MySet&lt;/code&gt;), the &lt;code&gt;MySet&lt;/code&gt; species is the &lt;code&gt;MySet&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;Set&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（カスタムセット &lt;code&gt;MySet&lt;/code&gt; など）では、 &lt;code&gt;MySet&lt;/code&gt; 種は &lt;code&gt;MySet&lt;/code&gt; コンストラクタです。ただし、派生クラスのメソッドで親の &lt;code&gt;Set&lt;/code&gt; オブジェクトを返すために、これを上書きしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="1133b3da65f4298a37b3e1fc081e7c925554e075" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom typed array &lt;code&gt;MyTypedArray&lt;/code&gt;), the &lt;code&gt;MyTypedArray&lt;/code&gt; species is the &lt;code&gt;MyTypedArray&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return a parent &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（カスタム型付き配列 &lt;code&gt;MyTypedArray&lt;/code&gt; など）では、 &lt;code&gt;MyTypedArray&lt;/code&gt; 種は &lt;code&gt;MyTypedArray&lt;/code&gt; コンストラクターです。ただし、派生クラスのメソッドで親の&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;型付き配列&lt;/a&gt;オブジェクトを返すために、これを上書きしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="2ce247dad140e8fba2d68c52d0b5deed3560020a" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom typed array &lt;code&gt;MyTypedArray&lt;/code&gt;), the &lt;code&gt;MyTypedArray&lt;/code&gt; species is the &lt;code&gt;MyTypedArray&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return a parent &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object in your derived class methods:</source>
          <target state="translated">派生コレクションオブジェクト（カスタム型付き配列 &lt;code&gt;MyTypedArray&lt;/code&gt; など）では、 &lt;code&gt;MyTypedArray&lt;/code&gt; 種は &lt;code&gt;MyTypedArray&lt;/code&gt; コンストラクターです。ただし、派生クラスのメソッドで親&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;型の配列&lt;/a&gt;オブジェクトを返すために、これを上書きすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="350adacc4d9e715c786318e8468e47b1e9d05e5a" translate="yes" xml:space="preserve">
          <source>In a module &lt;code&gt;my-module.js&lt;/code&gt;, we could include the following code:</source>
          <target state="translated">モジュール &lt;code&gt;my-module.js&lt;/code&gt; に、次のコードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="340c77fb144b30a4542ea8a0c0d5a2ac8c4b516d" translate="yes" xml:space="preserve">
          <source>In a non-constructor context (i.e., without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator), &lt;code&gt;Number&lt;/code&gt; can be used to perform a type conversion.</source>
          <target state="translated">非コンストラクタコンテキスト（つまり、&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子なし）では、 &lt;code&gt;Number&lt;/code&gt; を使用して型変換を実行できます。</target>
        </trans-unit>
        <trans-unit id="e7dda02a1acb072f90af69f2907af38348fc815a" translate="yes" xml:space="preserve">
          <source>In a related circumstance, what if you actually wanted your &lt;code&gt;Date()&lt;/code&gt; function to be able to be called from the code inside &lt;code&gt;Function()&lt;/code&gt;. Should you just take the easy way out and fall back to &lt;code&gt;eval()&lt;/code&gt;? No! Never. Instead try the approach below.</source>
          <target state="translated">関連する状況で、実際に &lt;code&gt;Date()&lt;/code&gt; 関数を &lt;code&gt;Function()&lt;/code&gt; 内のコードから呼び出せるようにしたい場合はどうでしょうか。簡単な方法で &lt;code&gt;eval()&lt;/code&gt; にフォールバックする必要がありますか？番号！決して。代わりに、以下のアプローチを試してください。</target>
        </trans-unit>
        <trans-unit id="810fedbd7d3efd9acd82311336fa539410213dc0" translate="yes" xml:space="preserve">
          <source>In a related circumstance, what if you actually wanted your &lt;code&gt;Date&lt;/code&gt; function to be able to be called from the code inside &lt;code&gt;Function()&lt;/code&gt;. Should you just wimp out and fall back to &lt;code&gt;eval()&lt;/code&gt;? Absolutely not, never ever. Instead try the approach below.</source>
          <target state="translated">関連する状況で、実際に &lt;code&gt;Date&lt;/code&gt; &lt;code&gt;Function()&lt;/code&gt; 内のコードから呼び出せるようにしたい場合はどうでしょうか。気を抜いて &lt;code&gt;eval()&lt;/code&gt; にフォールバックする必要がありますか？絶対にありません。代わりに、以下のアプローチを試してください。</target>
        </trans-unit>
        <trans-unit id="b2fc3d6faac50dc84e09287729aea3901d7164ff" translate="yes" xml:space="preserve">
          <source>In a word: Don't.</source>
          <target state="translated">一言で言えば しないでください。</target>
        </trans-unit>
        <trans-unit id="3a3bc3b6e0682977940132c5c77dc0be406db238" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Whitespace&quot;&gt;white space&lt;/a&gt; characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of &lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion&lt;/a&gt;. Line terminators are matched by the &lt;strong&gt;\s&lt;/strong&gt; class in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Whitespace&quot;&gt;空白&lt;/a&gt;文字に加えて、行末記号文字は、ソーステキストの読みやすさを向上させるために使用されます。ただし、場合によっては、行末記号が禁止されている場所がいくつかあるため、JavaScriptコードの実行に影響を与える可能性があります。ラインターミネータは、&lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;自動セミコロン挿入の&lt;/a&gt;プロセスにも影響します。行末記号は、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;正規表現の&lt;/a&gt;&lt;strong&gt;\ s&lt;/strong&gt;クラスと一致します。</target>
        </trans-unit>
        <trans-unit id="45902b9c216bd387d2fe70315207b8d21f3b38a8" translate="yes" xml:space="preserve">
          <source>In addition to methods to read and alter individual components of the local date and time (such as &lt;a href=&quot;date/getday&quot;&gt;&lt;code&gt;getDay()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/sethours&quot;&gt;&lt;code&gt;setHours()&lt;/code&gt;&lt;/a&gt;), there are also versions of the same methods that read and manipulate the date and time using UTC (such as &lt;a href=&quot;date/getutcday&quot;&gt;&lt;code&gt;getUTCDay()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/setutchours&quot;&gt;&lt;code&gt;setUTCHours()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ローカルの日付と時刻の個々のコンポーネントを読み取って変更するメソッド（&lt;a href=&quot;date/getday&quot;&gt; &lt;code&gt;getDay()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;date/sethours&quot;&gt; &lt;code&gt;setHours()&lt;/code&gt; など&lt;/a&gt;）に加えて、UTCを使用して日付と時刻を読み取って操作する同じメソッドのバージョン（&lt;a href=&quot;date/getutcday&quot;&gt; &lt;code&gt;getUTCDay()&lt;/code&gt; &lt;/a&gt;など）もあります。 （）および&lt;a href=&quot;date/setutchours&quot;&gt; &lt;code&gt;setUTCHours()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="eae3ca63d02d68155e6bfd686d4025760d2e921e" translate="yes" xml:space="preserve">
          <source>In addition to white space characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of &lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion&lt;/a&gt;. Line terminators are matched by the &lt;strong&gt;\s&lt;/strong&gt; class in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expressions&lt;/a&gt;.</source>
          <target state="translated">空白文字に加えて、行ターミネーター文字がソーステキストの読みやすさを向上させるために使用されます。ただし、場合によっては、行末記号が禁止されている場所がいくつかあるため、行末記号がJavaScriptコードの実行に影響を与えることがあります。&lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;行末記号は、セミコロン&lt;/a&gt;の自動挿入のプロセスにも影響します。行末記号は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;正規表現&lt;/a&gt;で&lt;strong&gt;\ s&lt;/strong&gt;クラスによって一致します。</target>
        </trans-unit>
        <trans-unit id="d1dbbf23ea13be77ce53036651bf06faa4f98b65" translate="yes" xml:space="preserve">
          <source>In addition to your own symbols, JavaScript has some built-in symbols which represent internal language behaviors which were not exposed to developers in ECMAScript 5 and before. These symbols can be accessed using the following properties:</source>
          <target state="translated">独自のシンボルに加えて、JavaScript には、ECMAScript 5 以前の開発者には公開されていなかった内部言語の動作を表すいくつかの組み込みシンボルがあります。これらのシンボルは、以下のプロパティを使用してアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="541fce84d020f8e809b1424cc43c2d8605b35d86" translate="yes" xml:space="preserve">
          <source>In addition, since true iterables cannot be polyfilled, this implementation does not support generic iterables as defined in the 6&lt;sup&gt;th&lt;/sup&gt; Edition of ECMA-262.</source>
          <target state="translated">さらに、真のイテラブルはポリフィルできないため、この実装はECMA-262の&lt;sup&gt;第&lt;/sup&gt;6版で定義されている汎用イテラブルをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="772f53b7684325c70c59fb803ea949efc447df73" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;global_objects/string/raw&quot;&gt;&lt;code&gt;String.raw()&lt;/code&gt;&lt;/a&gt; method exists to create raw strings just like the default template function and string concatenation would create.</source>
          <target state="translated">さらに、&lt;a href=&quot;global_objects/string/raw&quot;&gt; &lt;code&gt;String.raw()&lt;/code&gt; &lt;/a&gt;メソッドは、デフォルトのテンプレート関数と文字列の連結によって作成されるのと同じように、未加工の文字列を作成するために存在します。</target>
        </trans-unit>
        <trans-unit id="afdac2e1c883f1486c41d87b72385f76020d0b90" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;global_objects/string/raw&quot;&gt;&lt;code&gt;String.raw()&lt;/code&gt;&lt;/a&gt; method exists to create raw strings&amp;mdash;just like the default template function and string concatenation would create.</source>
          <target state="translated">さらに、&lt;a href=&quot;global_objects/string/raw&quot;&gt; &lt;code&gt;String.raw()&lt;/code&gt; &lt;/a&gt;メソッドは、生の文字列を作成するために存在します。これは、デフォルトのテンプレート関数と文字列の連結で作成されるのと同じです。</target>
        </trans-unit>
        <trans-unit id="dc6c8d3bc5587fba3a2992288ddc497a933c9e1d" translate="yes" xml:space="preserve">
          <source>In addition, you can use it to disable code to prevent it from running, by wrapping code in a comment, like this:</source>
          <target state="translated">また、このようにコメントでコードを包むことで、コードが実行されないように無効化することもできます。</target>
        </trans-unit>
        <trans-unit id="3895a9d4c10daddb44b0baf3cea41b98e617fe5c" translate="yes" xml:space="preserve">
          <source>In all cases, the returned promise is fulfilled with an array containing &lt;strong&gt;all &lt;/strong&gt;the values of the &lt;var&gt;iterable&lt;/var&gt; passed as argument (also non-promise values).</source>
          <target state="translated">すべての場合において、返されたpromiseは、引数として渡された &lt;var&gt;iterable&lt;/var&gt; &lt;strong&gt;すべて&lt;/strong&gt;の値（非promise値）を含む配列で満たされます。</target>
        </trans-unit>
        <trans-unit id="c81b508fa4aa4f5e76e7a5fb07f3df97a3e6e267" translate="yes" xml:space="preserve">
          <source>In all other cases, a resolving Promise is returned. In the following example, the first &lt;code&gt;then()&lt;/code&gt; will return &lt;code&gt;42&lt;/code&gt; wrapped in a resolving Promise even though the previous Promise in the chain was rejected.</source>
          <target state="translated">それ以外の場合はすべて、解決するPromiseが返されます。次の例では、チェーン内の前のPromiseが拒否された場合でも、最初の &lt;code&gt;then()&lt;/code&gt; は解決するPromiseにラップされた &lt;code&gt;42&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8f2e12a377e763cd095116ed09fef665af7281bf" translate="yes" xml:space="preserve">
          <source>In all other cases, a resolving Promise is returned. In the following example, the first &lt;code&gt;then()&lt;/code&gt; will return &lt;code&gt;42&lt;/code&gt; wrapped resolving Promise even though the previous Promise in the chain was rejected.</source>
          <target state="translated">それ以外の場合はすべて、解決するPromiseが返されます。次の例では、チェーン内の前のPromiseが拒否された場合でも、最初の &lt;code&gt;then()&lt;/code&gt; は &lt;code&gt;42&lt;/code&gt; のラップ済み解決Promise を返します。</target>
        </trans-unit>
        <trans-unit id="4f386d0fd63e7041445027553d8387adba4f48a3" translate="yes" xml:space="preserve">
          <source>In an ECMAScript 2016 environment which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does increment for an incrementing variable automatically (if the character warrants it in being a surrogate pair).</source>
          <target state="translated">破壊された代入を可能にするECMAScript 2016環境では、以下はより簡潔で、より柔軟な代替案です。</target>
        </trans-unit>
        <trans-unit id="b003a314ef1e4fb418bf66b8bc466ac14403b108" translate="yes" xml:space="preserve">
          <source>In an ECMAScript 2016 environment which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair).</source>
          <target state="translated">破壊された代入を可能にするECMAScript 2016環境では、以下はより簡潔で、より柔軟性のある代替案で、インクリメント変数のインクリメントを自動的に行います(文字がサロゲートペアであることを保証する場合)。</target>
        </trans-unit>
        <trans-unit id="6ae1d411c5185e7a3f1b56084729d3af21f20494" translate="yes" xml:space="preserve">
          <source>In an inline event handler</source>
          <target state="translated">インラインのイベントハンドラでは</target>
        </trans-unit>
        <trans-unit id="15a234979acf5c85ed72ab3a44cfa7cf0c039e37" translate="yes" xml:space="preserve">
          <source>In basic use without specifying a locale, &lt;code&gt;DateTimeFormat&lt;/code&gt; uses the default locale and default options.</source>
          <target state="translated">ロケールを指定しない基本的な使用では、 &lt;code&gt;DateTimeFormat&lt;/code&gt; はデフォルトのロケールとデフォルトのオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="6c8fca8d2d4d72fbc7ff12349b16baad5284d084" translate="yes" xml:space="preserve">
          <source>In basic use without specifying a locale, a formatted string in the default locale and with default options is returned.</source>
          <target state="translated">基本的にはロケールを指定せずに使用する場合は、デフォルトのロケールでフォーマットされた文字列とデフォルトのオプションを返します。</target>
        </trans-unit>
        <trans-unit id="e30dc2f73ac6e65084e81c106ff21218b79a2446" translate="yes" xml:space="preserve">
          <source>In basic use without specifying a locale, a formatted string in the default locale and with default options is returned. This is useful to distinguish between singular and plural forms, e.g. &quot;dog&quot; and &quot;dogs&quot;.</source>
          <target state="translated">ロケールを指定せずに基本的に使用する場合は、デフォルトのロケールでフォーマットされた文字列とデフォルトのオプションを返します。これは、単数形と複数形、例えば &quot;dog&quot; と &quot;dogs&quot; を区別するのに便利です。</target>
        </trans-unit>
        <trans-unit id="4e6edcf1e99e27f4a3c003689651a55d0701af0f" translate="yes" xml:space="preserve">
          <source>In both, &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; and sloppy mode, a call to &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; throws when adding a new property to a non-extensible object.</source>
          <target state="translated">&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;とsloppyモードの両方で、拡張できないオブジェクトに新しいプロパティを追加すると、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;への呼び出しがスローされます。</target>
        </trans-unit>
        <trans-unit id="1c5b208d6a1696deaa27e5631e305def887a5f0d" translate="yes" xml:space="preserve">
          <source>In browser versions supporting named capturing groups, will be an object whose keys are the used group names, and whose values are the matched portions (&lt;code&gt;undefined&lt;/code&gt; if not matched).</source>
          <target state="translated">名前付きキャプチャグループをサポートするブラウザバージョンでは、キーが使用されたグループ名であり、値が一致した部分（一致し &lt;code&gt;undefined&lt;/code&gt; 場合は未定義）であるオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="212201f4cd8f19efb2a09bdffc69dc9cf7ec33b3" translate="yes" xml:space="preserve">
          <source>In browsers which support named capturing groups, the following code captures &quot;&lt;code&gt;fox&lt;/code&gt;&quot; or &quot;&lt;code&gt;cat&lt;/code&gt;&quot; into a group named &quot;&lt;code&gt;animal&lt;/code&gt;&quot;:</source>
          <target state="translated">名前付きキャプチャグループをサポートするブラウザでは、次のコードが「 &lt;code&gt;fox&lt;/code&gt; 」または「 &lt;code&gt;cat&lt;/code&gt; 」を「 &lt;code&gt;animal&lt;/code&gt; 」という名前のグループにキャプチャします。</target>
        </trans-unit>
        <trans-unit id="2fec9e70a7a8e5a0b462b870bc9aad4fb731e521" translate="yes" xml:space="preserve">
          <source>In case of an error, for example if a property is non-writable, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised, and the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; object is changed if any properties are added before the error is raised.</source>
          <target state="translated">エラーの場合、たとえばプロパティが書き込み不可の場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生し、エラーが発生する前にプロパティが追加されると、 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; オブジェクトが変更されます。</target>
        </trans-unit>
        <trans-unit id="5c53b39ddf5eb1e541cbcb2fd25d92feed9aab69" translate="yes" xml:space="preserve">
          <source>In case of an error, for example if a property is non-writable, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised, and the &lt;code&gt;target&lt;/code&gt; object can be changed if any properties are added before error is raised.</source>
          <target state="translated">エラーが発生した場合（たとえば、プロパティが書き込み不可の場合）、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生し、エラーが発生する前にプロパティが追加されると、 &lt;code&gt;target&lt;/code&gt; オブジェクトが変更されます。</target>
        </trans-unit>
        <trans-unit id="2715483284a25ba548ae565967fe75b81647c6bb" translate="yes" xml:space="preserve">
          <source>In certain cases, nesting a template is the easiest (and perhaps more readable) way to have configurable strings. Within a backticked template, it is simple to allow inner backticks simply by using them inside a placeholder &lt;code&gt;${ }&lt;/code&gt; within the template.</source>
          <target state="translated">場合によっては、テンプレートをネストすることが、構成可能な文字列を作成する最も簡単な（そしておそらくより読みやすい）方法です。バックティックテンプレート内では、テンプレート内のプレースホルダー &lt;code&gt;${ }&lt;/code&gt; 内で使用するだけで、内部バックティックを簡単に許可できます。</target>
        </trans-unit>
        <trans-unit id="185b559f3c0aaf526e6b24fa70557e54bd43808c" translate="yes" xml:space="preserve">
          <source>In certain times, nesting a template is the easiest and perhaps more readable way to have configurable strings. Within a backticked template it is simple to allow inner backticks simply by using them inside a placeholder &lt;code&gt;${ }&lt;/code&gt; within the template. For instance, if condition a is true: then return this templated literal.</source>
          <target state="translated">場合によっては、テンプレートをネストすることが、設定可能な文字列を作成するための最も簡単で読みやすい方法です。バッククォートされたテンプレート内では、テンプレート内のプレースホルダー &lt;code&gt;${ }&lt;/code&gt; 内でそれらを使用するだけで、内部のバックティックを簡単に許可できます。たとえば、条件aがtrueの場合、このテンプレート化されたリテラルを返します。</target>
        </trans-unit>
        <trans-unit id="4db1a326096311ea6af1c3fb975c7c9930e3121d" translate="yes" xml:space="preserve">
          <source>In class constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor that was directly invoked by &lt;code&gt;new&lt;/code&gt;. This is also the case if the constructor is in a parent class and was delegated from a child constructor.</source>
          <target state="translated">クラスコンストラクターでは、 &lt;code&gt;new.target&lt;/code&gt; は &lt;code&gt;new&lt;/code&gt; によって直接呼び出されたコンストラクターを指します。これは、コンストラクターが親クラスにあり、子コンストラクターから委任された場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="6bdb1b0d5feb35f9fbe77dd15e2d3235928fcdf4" translate="yes" xml:space="preserve">
          <source>In class constructors, it refers to the constructed class.</source>
          <target state="translated">クラスのコンストラクタでは、構築されたクラスを参照します。</target>
        </trans-unit>
        <trans-unit id="94af82422eceede92c75ba324542543e93fcf1e0" translate="yes" xml:space="preserve">
          <source>In code using XPCOM &lt;code&gt;instanceof&lt;/code&gt; has special effect: &lt;code&gt;obj instanceof &lt;/code&gt;&lt;em&gt;&lt;code&gt;xpcomInterface&lt;/code&gt;&lt;/em&gt; (e.g. &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt;) calls &lt;code&gt;obj.QueryInterface(&lt;em&gt;xpcomInterface&lt;/em&gt;)&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; if QueryInterface succeeded. A side effect of such call is that you can use &lt;em&gt;&lt;code&gt;xpcomInterface&lt;/code&gt;&lt;/em&gt;'s properties on &lt;code&gt;obj&lt;/code&gt; after a successful &lt;code&gt;instanceof&lt;/code&gt; test. Unlike standard JavaScript globals, the test &lt;code&gt;obj instanceof xpcomInterface&lt;/code&gt; works as expected even if &lt;code&gt;obj&lt;/code&gt; is from a different scope.</source>
          <target state="translated">XPCOMを使用するコードでは、 &lt;code&gt;instanceof&lt;/code&gt; には特別な効果があり &lt;code&gt;obj instanceof &lt;/code&gt; &lt;em&gt; &lt;code&gt;xpcomInterface&lt;/code&gt; &lt;/em&gt;（たとえば &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt; ）は &lt;code&gt;obj.QueryInterface(&lt;em&gt;xpcomInterface&lt;/em&gt;)&lt;/code&gt; を呼び出し、QueryInterfaceが成功した場合に &lt;code&gt;true&lt;/code&gt; を返します。そのような呼び出しの副作用は、 &lt;code&gt;instanceof&lt;/code&gt; テストが成功した後、 &lt;code&gt;obj&lt;/code&gt; で&lt;em&gt; &lt;code&gt;xpcomInterface&lt;/code&gt; &lt;/em&gt;のプロパティを使用できることです。標準のJavaScriptグローバルとは異なり、 &lt;code&gt;obj&lt;/code&gt; が別のスコープからのものであっても、 &lt;code&gt;obj instanceof xpcomInterface&lt;/code&gt; のテストobj instanceは期待どおりに機能します。</target>
        </trans-unit>
        <trans-unit id="14cfe9e8018b79bf958a062759f1007e85f4498c" translate="yes" xml:space="preserve">
          <source>In code using XPCOM, &lt;code&gt;instanceof&lt;/code&gt; has special effect: &lt;code&gt;&lt;var&gt;obj&lt;/var&gt; instanceof &lt;var&gt;xpcomInterface&lt;/var&gt;&lt;/code&gt; (e.g. &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt;) calls &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;.QueryInterface(&lt;var&gt;xpcomInterface&lt;/var&gt;)&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;QueryInterface&lt;/code&gt; succeeded.</source>
          <target state="translated">XPCOMを使用してコードでは、 &lt;code&gt;instanceof&lt;/code&gt; は特殊効果を持っている： &lt;code&gt;&lt;var&gt;obj&lt;/var&gt; instanceof &lt;var&gt;xpcomInterface&lt;/var&gt;&lt;/code&gt; （例えば &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt; ）を呼び出し &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;.QueryInterface(&lt;var&gt;xpcomInterface&lt;/var&gt;)&lt;/code&gt; と戻り &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;QueryInterface&lt;/code&gt; 成功しました。</target>
        </trans-unit>
        <trans-unit id="992fc64c413d9c88cc713416bf184f970d9fbfac" translate="yes" xml:space="preserve">
          <source>In comparison to the global &lt;a href=&quot;../isfinite&quot;&gt;&lt;code&gt;isFinite()&lt;/code&gt;&lt;/a&gt; function, this method doesn't first convert the parameter to a number. This means only values of the type number &lt;em&gt;and&lt;/em&gt; are finite return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">グローバル&lt;a href=&quot;../isfinite&quot;&gt; &lt;code&gt;isFinite()&lt;/code&gt; &lt;/a&gt;関数と比較すると、このメソッドは最初にパラメーターを数値に変換しません。この手段は唯一のタイプ番号の値&lt;em&gt;と&lt;/em&gt;有限復帰している &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a613e3bd8d9172c0deeee7a9b7b65c63525ed0bb" translate="yes" xml:space="preserve">
          <source>In comparison to the global &lt;a href=&quot;../isfinite&quot;&gt;&lt;code&gt;isFinite()&lt;/code&gt;&lt;/a&gt; function, this method doesn't forcibly convert the parameter to a number. This means only values of the type number, that are also finite, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">グローバル&lt;a href=&quot;../isfinite&quot;&gt; &lt;code&gt;isFinite()&lt;/code&gt; &lt;/a&gt;関数と比較して、このメソッドはパラメーターを強制的に数値に変換しません。つまり、型番号の値だけが有限であり、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d244f5107598de168b205e3c43fd027e6571c188" translate="yes" xml:space="preserve">
          <source>In comparison to the global &lt;a href=&quot;../isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt; function, &lt;code&gt;Number.isNaN()&lt;/code&gt; doesn't suffer the problem of forcefully converting the parameter to a number. This means it is now safe to pass values that would normally convert to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, but aren't actually the same value as &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;. This also means that only values of the type number, that are also &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">グローバル&lt;a href=&quot;../isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; &lt;/a&gt;関数と比較して、 &lt;code&gt;Number.isNaN()&lt;/code&gt; はパラメーターを強制的に数値に変換する問題に悩まされません。つまり、通常は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;に変換される値を渡すことは安全ですが、実際には&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;と同じ値ではありません。これは、型番号の値（&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;でもある）のみが &lt;code&gt;true&lt;/code&gt; を返すことも意味します。</target>
        </trans-unit>
        <trans-unit id="8217e6b58b2edad9f5a6741e352a92ad99a7c0e8" translate="yes" xml:space="preserve">
          <source>In constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor that was invoked by &lt;a href=&quot;operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンストラクターでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;によって呼び出されたコンストラクターを指します。</target>
        </trans-unit>
        <trans-unit id="f621dfa4be91ca91418c57854499d4ee4a81c259" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;Sets&lt;/code&gt;, &lt;code&gt;WeakSets&lt;/code&gt; are &lt;strong&gt;collections of objects only&lt;/strong&gt; and not of arbitrary values of any type.</source>
          <target state="translated">&lt;code&gt;Sets&lt;/code&gt; とは対照的に、 &lt;code&gt;WeakSets&lt;/code&gt; は&lt;strong&gt;オブジェクトのコレクションで&lt;/strong&gt;あり、任意のタイプの任意の値ではありません。</target>
        </trans-unit>
        <trans-unit id="29612058b2a37d96155ca6d8e8846e19f5383f8e" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;Symbol()&lt;/code&gt;, the &lt;code&gt;Symbol.for()&lt;/code&gt; function creates a symbol available in a global symbol registry list. &lt;code&gt;Symbol.for()&lt;/code&gt; does also not necessarily create a new symbol on every call, but checks first if a symbol with the given &lt;code&gt;key&lt;/code&gt; is already present in the registry. In that case, that symbol is returned. If no symbol with the given key is found, &lt;code&gt;Symbol.for()&lt;/code&gt; will create a new global symbol.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; とは対照的に、 &lt;code&gt;Symbol.for()&lt;/code&gt; 関数は、グローバルシンボルレジストリリストで使用可能なシンボルを作成します。 &lt;code&gt;Symbol.for()&lt;/code&gt; は、必ずしもすべての呼び出しで新しいシンボルを作成するわけではありませんが、最初に、指定された &lt;code&gt;key&lt;/code&gt; 持つシンボルがレジストリにすでに存在するかどうかをチェックします。その場合、そのシンボルが返されます。指定されたキーを持つシンボルが見つからない場合、 &lt;code&gt;Symbol.for()&lt;/code&gt; は新しいグローバルシンボルを作成します。</target>
        </trans-unit>
        <trans-unit id="2ff9ea516bcf681c13dab78eda856670cc61010b" translate="yes" xml:space="preserve">
          <source>In contrast to the &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; statement, &lt;code&gt;continue&lt;/code&gt; does not terminate the execution of the loop entirely: instead,</source>
          <target state="translated">&lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;ステートメントと &lt;code&gt;continue&lt;/code&gt; 対照的に、continueはループの実行を完全には終了しません。代わりに、</target>
        </trans-unit>
        <trans-unit id="abde0a67e7f66ee66240fa3ae208e8af08646767" translate="yes" xml:space="preserve">
          <source>In dealing with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Constructor&quot;&gt;constructors&lt;/a&gt; it is possible to use the &lt;code&gt;let&lt;/code&gt; bindings to share one or more private members without using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Constructor&quot;&gt;コンストラクター&lt;/a&gt;を処理する場合、 &lt;code&gt;let&lt;/code&gt; バインディングを使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;クロージャー&lt;/a&gt;を使用せずに1つ以上のプライベートメンバーを共有できます。</target>
        </trans-unit>
        <trans-unit id="add9606929e73b3d9b2d5274b0b0c6a25af99476" translate="yes" xml:space="preserve">
          <source>In depth analysis on delete</source>
          <target state="translated">削除に関する詳細な分析</target>
        </trans-unit>
        <trans-unit id="1ee02026d6da5c79915a450ae4a367bd8161a9d5" translate="yes" xml:space="preserve">
          <source>In following code, values yielded by &lt;code&gt;g1()&lt;/code&gt; are returned from &lt;code&gt;next()&lt;/code&gt; calls just like those which are yielded by &lt;code&gt;g2()&lt;/code&gt;.</source>
          <target state="translated">次のコードでは、 &lt;code&gt;g1()&lt;/code&gt; によって生成された値は、 &lt;code&gt;g2()&lt;/code&gt; によって生成された値と同様に、 &lt;code&gt;next()&lt;/code&gt; 呼び出しから返されます。</target>
        </trans-unit>
        <trans-unit id="0a15b0c2b14bd2c1fe2943c815c7efbf0fce1279" translate="yes" xml:space="preserve">
          <source>In function calls like &lt;code&gt;f()&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; value was the global object. In strict mode, it is now &lt;code&gt;undefined&lt;/code&gt;. When a function was called with &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt;, if the value was a primitive value, this one was boxed into an object (or the global object for &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;). In strict mode, the value is passed directly without conversion or replacement.</source>
          <target state="translated">&lt;code&gt;f()&lt;/code&gt; のような関数呼び出しでは、 &lt;code&gt;this&lt;/code&gt; 値はグローバルオブジェクトでした。strictモードでは、 &lt;code&gt;undefined&lt;/code&gt; になりました。関数が &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; で呼び出されたときに、値がプリミティブ値である場合、これはオブジェクト（または &lt;code&gt;undefined&lt;/code&gt; および &lt;code&gt;null&lt;/code&gt; のグローバルオブジェクト）にボックス化されていました。厳密モードでは、値は変換または置換なしで直接渡されます。</target>
        </trans-unit>
        <trans-unit id="bcb456854f7e12a1b6d3067042522e245c1c473c" translate="yes" xml:space="preserve">
          <source>In general, it is best not to add, modify, or remove properties from the object during iteration, other than the property currently being visited. There is no guarantee whether an added property will be visited, whether a modified property (other than the current one) will be visited before or after it is modified, or whether a deleted property will be visited before it is deleted.</source>
          <target state="translated">一般的には、現在訪問しているプロパティ以外のプロパティを反復中にオブジェクトから追加、修正、削除することはしない方が良いでしょう。追加されたプロパティが訪問されるかどうか、修正されたプロパティ(現在のプロパティ以外)が修正前に訪問されるか修正後に訪問されるか、削除されたプロパティが削除前に訪問されるかどうかは保証されていません。</target>
        </trans-unit>
        <trans-unit id="469cf6b2ef6e68adf3f920541f214faf833cd651" translate="yes" xml:space="preserve">
          <source>In math, you can write 2 &amp;times; (3 + 5) as 2*(3 + 5) or just 2(3 + 5).</source>
          <target state="translated">数学では、2&amp;times;（3 + 5）を2 *（3 + 5）または単に2（3 + 5）と書くことができます。</target>
        </trans-unit>
        <trans-unit id="fd4e3c69a66abeb7081b617a2e513e6ed402c377" translate="yes" xml:space="preserve">
          <source>In math, you can write 2 x (3 + 5) as 2*(3 + 5) or just 2(3 + 5). Using the latter will throw an error:</source>
          <target state="translated">数学では、2 x (3+5)を 2*(3+5)と書くか、単に 2(3+5)と書くことができます。後者を使うとエラーになります。</target>
        </trans-unit>
        <trans-unit id="15f72587f05206c7a8bbb329e12777545b394d35" translate="yes" xml:space="preserve">
          <source>In modern browsers (JavaScript 1.8.5 / Firefox 4+), &lt;code&gt;undefined&lt;/code&gt; is a non-configurable, non-writable property per the ECMAScript 5 specification. Even when this is not the case, avoid overriding it.</source>
          <target state="translated">最近のブラウザー（JavaScript 1.8.5 / Firefox 4+）では、 &lt;code&gt;undefined&lt;/code&gt; はECMAScript 5仕様に従って構成および書き込みができないプロパティです。そうでない場合でも、オーバーライドしないでください。</target>
        </trans-unit>
        <trans-unit id="4e0d4934fe476d8eb4009f64ddad5959ccf4aadb" translate="yes" xml:space="preserve">
          <source>In modern browsers (JavaScript 1.8.5 / Firefox 4+), &lt;code&gt;undefined&lt;/code&gt; is a non-configurable, non-writable property, per the ECMAScript 5 specification. (Even when this is not the case, avoid overriding it.)</source>
          <target state="translated">最新のブラウザー（JavaScript 1.8.5 / Firefox 4以降）では、ECMAScript 5仕様に従って、 &lt;code&gt;undefined&lt;/code&gt; は構成不可能で書き込み不可能なプロパティです。（そうでない場合でも、オーバーライドしないでください。）</target>
        </trans-unit>
        <trans-unit id="c6effb59d91f10a30d514644f887cd90896f02d7" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;String.raw()&lt;/code&gt; is used with template strings. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, (just like with other &lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;tag functions&lt;/a&gt;).</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;String.raw()&lt;/code&gt; はテンプレート文字列とともに使用されます。上記の最初の構文はめったに使用されません。JavaScriptエンジンが適切な引数を使用してこれを呼び出すためです（他の&lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;タグ関数&lt;/a&gt;と同様）。</target>
        </trans-unit>
        <trans-unit id="5a29654e172b7c9185515aad6d728b59b008dcd2" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;String.raw()&lt;/code&gt; is used with template strings. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, just like with other &lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;tag functions&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;String.raw()&lt;/code&gt; はテンプレート文字列で使用されます。上記の最初の構文はほとんど使用されません。JavaScriptエンジンは、他の&lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;タグ関数&lt;/a&gt;と同様に、適切な引数を使用してこれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="eb884e7d7586dde23b9e701c398786a65a36db9b" translate="yes" xml:space="preserve">
          <source>In most cases, the value of &lt;code&gt;this&lt;/code&gt; is determined by how a function is called (runtime binding). It can't be set by assignment during execution, and it may be different each time the function is called. ES5 introduced the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/a&gt; method to &lt;a href=&quot;this#The_bind_method&quot;&gt;set the value of a function's &lt;code&gt;this&lt;/code&gt; regardless of how it's called&lt;/a&gt;, and ES2015 introduced &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; which don't provide their own &lt;code&gt;this&lt;/code&gt; binding (it retains the &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical context).</source>
          <target state="translated">ほとんどの場合、の値 &lt;code&gt;this&lt;/code&gt; 関数が（実行時バインディング）と呼ばれる方法によって決定されます。実行時の割り当てでは設定できず、関数を呼び出すたびに異なる場合があります。 ES5は&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind()&lt;/code&gt; &lt;/a&gt;メソッドを導入して&lt;a href=&quot;this#The_bind_method&quot;&gt;、関数の呼び出し方法に関係なく関数の &lt;code&gt;this&lt;/code&gt; の値&lt;/a&gt;を設定し、 ES2015は独自の &lt;code&gt;this&lt;/code&gt; バインディングを提供しない（囲んでいる字句コンテキストの &lt;code&gt;this&lt;/code&gt; 値を保持する）&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数&lt;/a&gt;を導入しました。</target>
        </trans-unit>
        <trans-unit id="ac60cdf424b99dce62b5701d4d143d86d375a54d" translate="yes" xml:space="preserve">
          <source>In most cases, the value of &lt;code&gt;this&lt;/code&gt; is determined by how a function is called. It can't be set by assignment during execution, and it may be different each time the function is called. ES5 introduced the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/a&gt; method to &lt;a href=&quot;#The_bind_method&quot;&gt;set the value of a function's &lt;code&gt;this&lt;/code&gt; regardless of how it's called&lt;/a&gt;, and ES2015 introduced &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; which don't provide their own &lt;code&gt;this&lt;/code&gt; binding (it retains the &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical context).</source>
          <target state="translated">ほとんどの場合、の値 &lt;code&gt;this&lt;/code&gt; 関数が呼び出された方法によって決定されます。実行中の代入では設定できず、関数を呼び出すたびに異なる場合があります。ES5は&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind()&lt;/code&gt; &lt;/a&gt;メソッドを導入し、&lt;a href=&quot;#The_bind_method&quot;&gt;それがどのように呼び出されたかに関係なく&lt;/a&gt;関数の &lt;code&gt;this&lt;/code&gt; の値を設定しました。ES2015 は独自の &lt;code&gt;this&lt;/code&gt; バインディングを提供しない&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数&lt;/a&gt;を導入しました（それは囲んでいる字句コンテキストの &lt;code&gt;this&lt;/code&gt; 値を保持します）。</target>
        </trans-unit>
        <trans-unit id="6d3bbd72aff7458ac96d23ca8ea12c673fb557f5" translate="yes" xml:space="preserve">
          <source>In most cases, using &lt;a href=&quot;rest_parameters&quot;&gt;rest parameters&lt;/a&gt; is a good alternative to using an &lt;code&gt;arguments&lt;/code&gt; object.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;rest_parameters&quot;&gt;restパラメータ&lt;/a&gt;を使用することは、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトを使用するより良い代替手段です。</target>
        </trans-unit>
        <trans-unit id="5fc6c6c77ddc6a5c73413e02d1078992067d9c03" translate="yes" xml:space="preserve">
          <source>In most languages like PHP and Python and others that have an exponentiation operator (**), the exponentiation operator is defined to have a higher precedence than unary operators such as unary + and unary -, but there are a few exceptions. For example, in Bash the ** operator is defined to have a lower precedence than unary operators. In JavaScript, it is impossible to write an ambiguous exponentiation expression, i.e. you cannot put a unary operator (&lt;code&gt;+/-/~/!/delete/void/typeof&lt;/code&gt;) immediately before the base number.</source>
          <target state="translated">PHPやPythonなどの指数演算子（**）を備えたほとんどの言語では、指数演算子は単項+や単項-などの単項演算子よりも優先順位が高くなるように定義されていますが、いくつかの例外があります。たとえば、Bashでは**演算子は単項演算子よりも優先順位が低くなるように定義されています。 JavaScriptでは、曖昧な指数式を記述することはできません。つまり、単項演算子（ &lt;code&gt;+/-/~/!/delete/void/typeof&lt;/code&gt; ）を基底数の直前に置くことはできません。</target>
        </trans-unit>
        <trans-unit id="22a5793df1225a02f211cbab4dd35b2dfa4aa24a" translate="yes" xml:space="preserve">
          <source>In non-strict code, function declarations inside blocks behave strangely. Do not use them.</source>
          <target state="translated">厳密でないコードでは、ブロック内の関数宣言は奇妙な振る舞いをします。それらを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="1874ca4c77d194ed9a187f427ff439010d26be13" translate="yes" xml:space="preserve">
          <source>In non-strict code, function declarations inside blocks behave strangely. For example:</source>
          <target state="translated">厳密でないコードでは、ブロック内の関数宣言は奇妙な振る舞いをします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="860c9839372531fc54aae6d18e28914fe55a5604" translate="yes" xml:space="preserve">
          <source>In non-strict mode, modifying a value in the &lt;code&gt;arguments&lt;/code&gt; object modifies the corresponding named argument. This made optimizations complicated for JavaScript engine and made code harder to read/understand. In strict mode, the &lt;code&gt;arguments&lt;/code&gt; object is created and initialized with the same values than the named arguments, but changes to either the &lt;code&gt;arguments&lt;/code&gt; object or the named arguments aren't reflected in one another.</source>
          <target state="translated">非厳密モードでは、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトの値を変更すると、対応する名前付き引数が変更されます。これにより、JavaScriptエンジンの最適化が複雑になり、コードの読み取り/理解が困難になりました。strictモードでは、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトが作成され、名前付き引数と同じ値で初期化されますが、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトまたは名前付き引数への変更は互いに反映されません。</target>
        </trans-unit>
        <trans-unit id="95aa3b03b2032d638c1633fec4e82b00ad7a1890" translate="yes" xml:space="preserve">
          <source>In non-strict, this would silently fail, in contradiction with the user expectation.</source>
          <target state="translated">厳格でない場合、これはユーザーの期待に反して、黙って失敗することになります。</target>
        </trans-unit>
        <trans-unit id="cb7ee7b5cd4eb0f5efd8c7fee9d564b5efb524f6" translate="yes" xml:space="preserve">
          <source>In normal function calls (as opposed to constructor function calls), &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. This lets you detect if a function was called with &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; as a constructor.</source>
          <target state="translated">（コンストラクター関数呼び出しではなく）通常の関数呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。これにより、関数が&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;をコンストラクタとして呼び出されたかどうかを検出できます。</target>
        </trans-unit>
        <trans-unit id="230572d6652702c77e4d55e58d676991394f1446" translate="yes" xml:space="preserve">
          <source>In normal function calls (as opposed to constructor function calls), &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. This lets you detect whether a function was called with &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; as a constructor.</source>
          <target state="translated">（コンストラクター関数呼び出しとは対照的に）通常の関数呼び出しでは、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。これにより、コンストラクターとして&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;を使用して関数が呼び出されたかどうかを検出できます。</target>
        </trans-unit>
        <trans-unit id="e0a271923b767ecf71d00311996c399f935078d0" translate="yes" xml:space="preserve">
          <source>In older implementations, which ignore the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation-dependent.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数を無視する古い実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="a68eef8c5fb49c60634ed1d21df3a98ae0e0f974" translate="yes" xml:space="preserve">
          <source>In order to be &lt;strong&gt;iterable&lt;/strong&gt;, an object must implement the &lt;code&gt;@@iterator&lt;/code&gt; method, meaning that the object (or one of the objects up its &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;prototype chain&lt;/a&gt;) must have a property with a &lt;code&gt;@@iterator&lt;/code&gt; key which is available via constant &lt;a href=&quot;global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;strong&gt;反復可能&lt;/strong&gt;であるためには、オブジェクトは &lt;code&gt;@@iterator&lt;/code&gt; メソッドを実装する必要があります。つまり、オブジェクト（またはその&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;プロトタイプチェーンの&lt;/a&gt;&lt;a href=&quot;global_objects/symbol/iterator&quot;&gt; &lt;code&gt;Symbol.iterator&lt;/code&gt; &lt;/a&gt;にあるオブジェクトの1つ）は、定数Symbol.iteratorを介して使用できる &lt;code&gt;@@iterator&lt;/code&gt; キーを持つプロパティを持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="e0eefb52bc8e7160456b7047e4f143d09203972a" translate="yes" xml:space="preserve">
          <source>In order to be &lt;strong&gt;iterable&lt;/strong&gt;, an object must implement the &lt;strong&gt;@@iterator&lt;/strong&gt; method, meaning that the object (or one of the objects up its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;prototype chain&lt;/a&gt;) must have a property with a &lt;strong&gt;@@iterator &lt;/strong&gt;key which is available via constant &lt;code&gt;&lt;a href=&quot;global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;反復可能&lt;/strong&gt;にするために、オブジェクトは&lt;strong&gt;@@ iterator&lt;/strong&gt;メソッドを実装する必要があり&lt;strong&gt;ます。&lt;/strong&gt;つまり、オブジェクト（または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;プロトタイプチェーンの&lt;/a&gt;上のオブジェクトの1つ）には、定数 &lt;code&gt;&lt;a href=&quot;global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を介して利用できる&lt;strong&gt;@@ iterator&lt;/strong&gt;キーを持つプロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="9de074ed49182f2a1dc2aec280709fa9abad4868" translate="yes" xml:space="preserve">
          <source>In order to call a static method or property within another static method of the same class, you can use the &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; keyword.</source>
          <target state="translated">同じクラスの別の静的メソッド内で静的メソッドまたはプロパティを呼び出すには、 &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; キーワードを使用できます。</target>
        </trans-unit>
        <trans-unit id="862bd58d82c44825625f345f8000cff5f3f26277" translate="yes" xml:space="preserve">
          <source>In order to call a static method within another static method of the same class, you can use the &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; keyword.</source>
          <target state="translated">同じクラスの別の静的メソッド内で静的メソッドを呼び出すには、 &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; キーワードを使用できます。</target>
        </trans-unit>
        <trans-unit id="e455045de218103473f428d3071d54854bd467dc" translate="yes" xml:space="preserve">
          <source>In order to create and get dates between the years 0 and 99 the &lt;a href=&quot;date/setfullyear&quot;&gt;&lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/getfullyear&quot;&gt;&lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt;&lt;/a&gt; methods should be used.</source>
          <target state="translated">作成し、年0と99の間の日付を取得するために&lt;a href=&quot;date/setfullyear&quot;&gt; &lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;date/getfullyear&quot;&gt; &lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7bdbb65503f173efe6d93b336bcc3c56478167b" translate="yes" xml:space="preserve">
          <source>In order to create and get dates between the years &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;99&lt;/code&gt; the &lt;a href=&quot;date/setfullyear&quot;&gt;&lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/getfullyear&quot;&gt;&lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt;&lt;/a&gt; methods should be used.</source>
          <target state="translated">作成し、数年の間の日付を取得するためには &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;99&lt;/code&gt; &lt;a href=&quot;date/setfullyear&quot;&gt; &lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;date/getfullyear&quot;&gt; &lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a06ff19557c3cd24895157a5889dec3667d90b42" translate="yes" xml:space="preserve">
          <source>In order to embed expressions within normal strings, you would use the following syntax:</source>
          <target state="translated">通常の文字列内に式を埋め込むには、以下の構文を使用します。</target>
        </trans-unit>
        <trans-unit id="261c57c7b8631ce4358a48ec7330061dc4f99420" translate="yes" xml:space="preserve">
          <source>In ordinary functions, it refers to the function itself, assuming it was invoked via the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator; otherwise &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常の関数では、&lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;演算子を介して呼び出されたと仮定して、関数自体を参照します。それ以外の場合、 &lt;code&gt;new.target&lt;/code&gt; は&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c30f8199b4dd458c0968198031c49f62bc167924" translate="yes" xml:space="preserve">
          <source>In our example above, the arrow function does not have its own &lt;code&gt;this&lt;/code&gt;. The &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt; is used; arrow functions follow the normal variable lookup rules. So while searching for &lt;code&gt;this&lt;/code&gt; which is not present in the current &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;, an arrow function ends up finding the &lt;code&gt;this&lt;/code&gt; from its enclosing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">上記の例では、矢印関数には独自の &lt;code&gt;this&lt;/code&gt; がありません。囲んでいる字句&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;スコープ&lt;/a&gt;の &lt;code&gt;this&lt;/code&gt; 値が使用されます。矢印関数は、通常の変数ルックアップルールに従います。したがって、現在の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;スコープに&lt;/a&gt;存在しない &lt;code&gt;this&lt;/code&gt; を検索しているときに、矢印関数は、それを囲む&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;スコープ&lt;/a&gt;から &lt;code&gt;this&lt;/code&gt; を見つけることになります。</target>
        </trans-unit>
        <trans-unit id="eaa11c5c2db715285eac1e1df98254200504f278" translate="yes" xml:space="preserve">
          <source>In practice, it is often desirable to catch rejected promises rather than use &lt;code&gt;then&lt;/code&gt;'s two case syntax, as demonstrated below.</source>
          <target state="translated">実際には、 &lt;code&gt;then&lt;/code&gt; 示すように、thenの2つのケースの構文を使用するのではなく、拒否されたpromiseをキャッチすることが望ましい場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="1fbd7dce6756453ed26553376d0427f3b5a41799" translate="yes" xml:space="preserve">
          <source>In some respects (such as sorting) they should be treated as equivalent&amp;mdash;and in some (such as visual appearance) they should not, so they are not canonically equivalent.</source>
          <target state="translated">いくつかの点（並べ替えなど）では、それらは同等として扱われる必要があります。また、いくつかの点（外観など）ではそうではないため、標準的に同等ではありません。</target>
        </trans-unit>
        <trans-unit id="e7bd329bf1a6fca5cc1d9f8ca14653cea85fd687" translate="yes" xml:space="preserve">
          <source>In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.</source>
          <target state="translated">ある意味では、再帰はループに似ています。どちらも同じコードを複数回実行し、どちらも条件を必要とします(無限ループを避けるため、というか、この場合は無限の再帰を避けるため)。関数呼び出しが多すぎる場合や、関数にベースケースがない場合、JavaScriptはこのエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="dcc3359fcfde967d3f070026eabf07f701112c4c" translate="yes" xml:space="preserve">
          <source>In strict mode code, &lt;code&gt;eval&lt;/code&gt; doesn't create a new variable in the scope from which it was called. Also, of course, in strict mode, the string is evaluated with strict mode rules. Thorough testing will need to be performed to make sure nothing breaks. Not using eval if you don't really need it may be another pragmatic solution.</source>
          <target state="translated">厳格モードのコードでは、 &lt;code&gt;eval&lt;/code&gt; はそれが呼び出されたスコープ内に新しい変数を作成しません。また、もちろん、厳密モードでは、文字列は厳密モードルールで評価されます。破損がないことを確認するために、徹底的なテストを実行する必要があります。本当に必要ない場合にevalを使用しないことは、別の実用的な解決策になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c986ac9c061545ea61f73243c079a502c902273c" translate="yes" xml:space="preserve">
          <source>In strict mode code, more identifiers are reserved.</source>
          <target state="translated">厳密なモードコードでは、より多くの識別子が予約されています。</target>
        </trans-unit>
        <trans-unit id="0305e05ae84323bdcca0727b14cfc634f066fb00" translate="yes" xml:space="preserve">
          <source>In strict mode, a &lt;code&gt;false&lt;/code&gt; return value from the &lt;code&gt;defineProperty&lt;/code&gt; handler will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">厳密モードでは、 &lt;code&gt;defineProperty&lt;/code&gt; ハンドラーからの &lt;code&gt;false&lt;/code&gt; 戻り値は&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外をスローします。</target>
        </trans-unit>
        <trans-unit id="9d09582a0bc85e38ae88283afb2b5fcbd5053155" translate="yes" xml:space="preserve">
          <source>In strict mode, a &lt;code&gt;false&lt;/code&gt; return value from the &lt;code&gt;set&lt;/code&gt; handler will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">strictモードでは、 &lt;code&gt;set&lt;/code&gt; ハンドラーからの &lt;code&gt;false&lt;/code&gt; 戻り値は&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外をスローします。</target>
        </trans-unit>
        <trans-unit id="6b6d02975bb8de9c2d2b0b5332c5792b28df3140" translate="yes" xml:space="preserve">
          <source>In strict mode, however, if the value of &lt;code&gt;this&lt;/code&gt; is not set when entering an execution context, it remains as &lt;code&gt;undefined&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">ただし、strictモードでは、実行コンテキストに入るときに &lt;code&gt;this&lt;/code&gt; 値が設定されていない場合、次の例に示すように、 &lt;code&gt;undefined&lt;/code&gt; ままになります。</target>
        </trans-unit>
        <trans-unit id="4d4bd884970a79efd62e157b542fb73cb029e026" translate="yes" xml:space="preserve">
          <source>In strict mode, however, the value of &lt;code&gt;this&lt;/code&gt; remains at whatever it was set to when entering the execution context, so, in the following case, &lt;code&gt;this&lt;/code&gt;will default to &lt;code&gt;undefined&lt;/code&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">strictモードでは、しかし、の値 &lt;code&gt;this&lt;/code&gt; それはそう、実行コンテキストを入力するときに設定したものは何でものままでは、次のような場合には、 &lt;code&gt;this&lt;/code&gt; デフォルトになります &lt;code&gt;undefined&lt;/code&gt; &lt;strong&gt;：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5edd29a28bbd08562217025986be25352d683242" translate="yes" xml:space="preserve">
          <source>In strict mode, this would have raised an exception.</source>
          <target state="translated">厳密なモードでは例外が発生していました。</target>
        </trans-unit>
        <trans-unit id="d019380674a16813ef94c54a0d343b4618bc0042" translate="yes" xml:space="preserve">
          <source>In strict-mode code, the &lt;code&gt;arguments&lt;/code&gt; object behaves the same whether or not a function is passed rest, default, or destructured parameters. That is, assigning new values to variables in the body of the function will not affect the &lt;code&gt;arguments&lt;/code&gt; object. Nor will assigning new variables to the &lt;code&gt;arguments&lt;/code&gt; object affect the value of variables.</source>
          <target state="translated">strict-modeコードでは、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトは、関数にrest、default、またはdestructuredパラメーターが渡されるかどうかに関係なく同じように動作します。つまり、関数の本体の変数に新しい値を割り当てても、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトには影響しません。また、 &lt;code&gt;arguments&lt;/code&gt; オブジェクトに新しい変数を割り当てることは、変数の値に影響を与えません。</target>
        </trans-unit>
        <trans-unit id="95ba434dcfc26a308be81afbb8f480fb122aa093" translate="yes" xml:space="preserve">
          <source>In that very line, the &lt;u&gt;if block's &quot;foo&quot;&lt;/u&gt; has already been created in the lexical environment, but has not yet reached (and &lt;strong&gt;terminated&lt;/strong&gt;) its initialization (which is part of the statement itself): it's still in the temporal dead zone.</source>
          <target state="translated">そのまさに行で、&lt;u&gt;ifブロックの &quot;foo&quot;&lt;/u&gt;はレキシカル環境ですでに作成されていますが、まだ初期化（ステートメント自体の一部です）に達していない（そして&lt;strong&gt;終了し&lt;/strong&gt;ていない）：それはまだ一時的なデッドゾーンにあります。</target>
        </trans-unit>
        <trans-unit id="344dc469ad2fb516272004fea64179e2bc4964ae" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScript engine, this string would be &quot;&lt;code&gt;[object Object]&lt;/code&gt;&quot;.</source>
          <target state="translated">で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkeyの&lt;/a&gt;JavaScriptエンジンは、この文字列は、「だろう &lt;code&gt;[object Object]&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="fc766e1776bb917de6591132669602b3df9697de" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;3d&lt;/code&gt; example, &lt;code&gt;'3d'&lt;/code&gt;&lt;em&gt;had &lt;/em&gt;to be quoted (because it begins with a digit). But it's also possible to quote the array indexes as well (e.g., &lt;code&gt;years['2']&lt;/code&gt; instead of &lt;code&gt;years[2]&lt;/code&gt;), although it's not necessary.</source>
          <target state="translated">では &lt;code&gt;3d&lt;/code&gt; たとえば、 &lt;code&gt;'3d'&lt;/code&gt; &lt;em&gt;だった&lt;/em&gt;（それが数字で始まっているので）、引用符で囲みます。ただし、必須ではありませんが、配列インデックスを引用することもできます（たとえば、 &lt;code&gt;years['2']&lt;/code&gt; 代わりに &lt;code&gt;years[2]&lt;/code&gt; '2' ]）。</target>
        </trans-unit>
        <trans-unit id="bfb123889f9c99fb835bcc26628fcbd3f7f67f01" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;&lt;var&gt;object.property&lt;/var&gt;&lt;/code&gt; syntax, the &lt;code&gt;property&lt;/code&gt; must be a valid JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt;. (In the ECMAScript standard, the names of properties are technically &quot;IdentifierNames&quot;, not &quot;Identifiers&quot;, so reserved words can be used but are not recommended). For example, &lt;code&gt;&lt;var&gt;object&lt;/var&gt;.$1&lt;/code&gt; is valid, while &lt;code&gt;&lt;var&gt;object&lt;/var&gt;.1&lt;/code&gt; is not.</source>
          <target state="translated">で &lt;code&gt;&lt;var&gt;object.property&lt;/var&gt;&lt;/code&gt; の構文、 &lt;code&gt;property&lt;/code&gt; 有効なJavaScriptでなければならない&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;識別子&lt;/a&gt;。（ECMAScript標準では、プロパティの名前は技術的には「Identifiers」ではなく「IdentifierNames」であるため、予約語を使用できますが、お勧めしません）。たとえば、 &lt;code&gt;&lt;var&gt;object&lt;/var&gt;.$1&lt;/code&gt; は有効ですが、 &lt;code&gt;&lt;var&gt;object&lt;/var&gt;.1&lt;/code&gt; は無効です。</target>
        </trans-unit>
        <trans-unit id="3dc2a210be3838d3448081d22f4b72f5712e5f4a" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;if&lt;/code&gt; statement, you want to use a comparison operator (&quot;==&quot;), and for the string concatenation, the plus (&quot;+&quot;) operator is needed.</source>
          <target state="translated">で &lt;code&gt;if&lt;/code&gt; 文で、あなたは（「==」）比較演算子を使用すると、文字列の連結のために、プラス（「+」）演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="bc49181d6c445c536525c61ec569330429a69827" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;object[property_name]&lt;/code&gt; syntax, the &lt;code&gt;&lt;var&gt;property_name&lt;/var&gt;&lt;/code&gt; is just a string or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;Symbol&lt;/a&gt;. So, it can be any string, including &lt;code&gt;'1foo'&lt;/code&gt;, &lt;code&gt;'!bar!'&lt;/code&gt;, or even &lt;code&gt;' '&lt;/code&gt; (a space).</source>
          <target state="translated">では &lt;code&gt;object[property_name]&lt;/code&gt; 構文は、 &lt;code&gt;&lt;var&gt;property_name&lt;/var&gt;&lt;/code&gt; 単なる文字列またはある&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;記号&lt;/a&gt;。したがって、 &lt;code&gt;'1foo'&lt;/code&gt; 、 &lt;code&gt;'!bar!'&lt;/code&gt; を含む任意の文字列にすることができます。、または &lt;code&gt;' '&lt;/code&gt; （スペース）。</target>
        </trans-unit>
        <trans-unit id="504e2effa4c01ce2afda7c35aaa16e32fcaa9400" translate="yes" xml:space="preserve">
          <source>In the JavaScript reference you can find the following chapters:</source>
          <target state="translated">JavaScriptのリファレンスには、以下の章があります。</target>
        </trans-unit>
        <trans-unit id="f9ebab3674334dea74506ab92354e81bf49a5348" translate="yes" xml:space="preserve">
          <source>In the above example, notice there is no &lt;code&gt;await&lt;/code&gt; statement after the &lt;code&gt;return&lt;/code&gt; keyword, although that would be valid too: The return value of an &lt;code&gt;async function&lt;/code&gt; is implicitly wrapped in &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/a&gt; - if it's not already a promise itself (as in this example).</source>
          <target state="translated">上記の例では、 &lt;code&gt;return&lt;/code&gt; キーワードの後に &lt;code&gt;await&lt;/code&gt; ステートメントがないことに注意してください。ただし、それも有効です。 &lt;code&gt;async function&lt;/code&gt; の戻り値は、&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt; &lt;code&gt;Promise.resolve&lt;/code&gt; に&lt;/a&gt;暗黙的にラップされます-それ自体がまだpromiseでない場合（この例のように） ）。</target>
        </trans-unit>
        <trans-unit id="51b25d369879120965a73c97bd3bb3c4bc0dcba2" translate="yes" xml:space="preserve">
          <source>In the above example, the spread syntax does not work as one might expect: it spreads an &lt;em&gt;array&lt;/em&gt; of arguments into the object literal, due to the rest parameter.</source>
          <target state="translated">上記の例では、spread構文は期待どおりに機能しません。restパラメーターが原因で、引数の&lt;em&gt;配列&lt;/em&gt;をオブジェクトリテラルに分散します。</target>
        </trans-unit>
        <trans-unit id="639bc8814e61c3ad66222c2a753077d09d6095ed" translate="yes" xml:space="preserve">
          <source>In the above polyfill, no extra type-coercing is needed to make &lt;code&gt;(x &amp;gt; 0) or&amp;nbsp;(x &amp;lt; 0)&lt;/code&gt; numbers because subtracting them from each other forces a type conversion from boolean to numbers.</source>
          <target state="translated">上記のポリフィルでは、 &lt;code&gt;(x &amp;gt; 0) or&amp;nbsp;(x &amp;lt; 0)&lt;/code&gt; 数値を作成するために追加の型強制は必要ありません。これらを互いに減算すると、ブールから数値への型変換が強制されるためです。</target>
        </trans-unit>
        <trans-unit id="97c92f0acdf5c43d4bf308a9791b1d873616af45" translate="yes" xml:space="preserve">
          <source>In the above polyfill, no extra type-coercing is needed to make &lt;code&gt;(x &amp;gt; 0)&lt;/code&gt; or &lt;code&gt;(x &amp;lt; 0)&lt;/code&gt; numbers because subtracting them from each other forces a type conversion from booleans to numbers.</source>
          <target state="translated">上記のポリフィルでは、 &lt;code&gt;(x &amp;gt; 0)&lt;/code&gt; または &lt;code&gt;(x &amp;lt; 0)&lt;/code&gt; 数値を作成するために追加の型強制は必要ありません。これらを互いに減算すると、ブール値から数値への型変換が強制されるためです。</target>
        </trans-unit>
        <trans-unit id="3320efd6ed4bd76923685057972479f17a63057a" translate="yes" xml:space="preserve">
          <source>In the above, the function (call it anonymous function A) assigned to &lt;code&gt;obj.bar&lt;/code&gt; returns another function (call it anonymous function B) that is created as an arrow function. As a result, function B's &lt;code&gt;this&lt;/code&gt; is permanently set to the &lt;code&gt;this&lt;/code&gt; of &lt;code&gt;obj.bar&lt;/code&gt; (function A) when called. When the returned function (function B) is called, its &lt;code&gt;this&lt;/code&gt; will always be what it was set to initially. In the above code example, function B's &lt;code&gt;this&lt;/code&gt; is set to function A's &lt;code&gt;this&lt;/code&gt; which is &lt;code&gt;obj&lt;/code&gt;, so it remains set to &lt;code&gt;obj&lt;/code&gt; even when called in a manner that would normally set its &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt; or the global object (or any other method as in the previous example in the global execution context).</source>
          <target state="translated">上記では、 &lt;code&gt;obj.bar&lt;/code&gt; に割り当てられた関数（無名関数Aと呼びます）は、矢印関数として作成された別の関数（無名関数Bと呼びます）を返します。その結果、関数Bの &lt;code&gt;this&lt;/code&gt; は、 &lt;code&gt;obj.bar&lt;/code&gt; れた &lt;code&gt;this&lt;/code&gt; にobj.bar（関数A）のthisに永続的に設定されます。返された関数（関数B）が呼び出されると、 &lt;code&gt;this&lt;/code&gt; は常に最初に設定されたものになります。上記のコード例では、関数Bの &lt;code&gt;this&lt;/code&gt; は関数Aの &lt;code&gt;this&lt;/code&gt; に設定されています。これは &lt;code&gt;obj&lt;/code&gt; であるため、通常は &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;undefined&lt;/code&gt; に設定する方法で呼び出されても、 &lt;code&gt;obj&lt;/code&gt; に設定されたままになります。 またはグローバルオブジェクト（またはグローバル実行コンテキストの前の例のような他のメソッド）。</target>
        </trans-unit>
        <trans-unit id="62bdda2e0a21fb28a7f5675957c393b044577a67" translate="yes" xml:space="preserve">
          <source>In the above, the function(call it anonymous function A) assigned to &lt;code&gt;obj.bar&lt;/code&gt; returns another function(call it anonymous function B) that is created as an arrow function. As a result, function B's &lt;code&gt;this&lt;/code&gt; is permanently set to the &lt;code&gt;this&lt;/code&gt; of &lt;code&gt;obj.bar&lt;/code&gt; (function A)when called. When the returned function(function B) is called, its &lt;code&gt;this&lt;/code&gt; will always be what it was set to initially. In the above code example, function B's &lt;code&gt;this&lt;/code&gt; is set to function A's &lt;code&gt;this&lt;/code&gt; which is obj, so it remains set to &lt;code&gt;obj&lt;/code&gt; even when called in a manner that would normally set its &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt; or the global object (or any other method as in the previous example in the global execution context).</source>
          <target state="translated">上記では、 &lt;code&gt;obj.bar&lt;/code&gt; に割り当てられた関数（無名関数Aと呼びます）は、矢印関数として作成された別の関数（無名関数Bと呼びます）を返します。その結果、関数Bの &lt;code&gt;this&lt;/code&gt; は、 &lt;code&gt;obj.bar&lt;/code&gt; れた &lt;code&gt;this&lt;/code&gt; にobj.bar（関数A）のthisに永続的に設定されます。返された関数（関数B）が呼び出されると、 &lt;code&gt;this&lt;/code&gt; は常に最初に設定されたものになります。上記のコード例では、関数Bの &lt;code&gt;this&lt;/code&gt; は関数Aの &lt;code&gt;this&lt;/code&gt; であるobjに設定されているため、通常は &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;undefined&lt;/code&gt; に設定する方法で呼び出された場合でも、 &lt;code&gt;obj&lt;/code&gt; に設定されたままです。 またはグローバルオブジェクト（または前の例にあるグローバル実行コンテキストの他のメソッド）。</target>
        </trans-unit>
        <trans-unit id="42d2f894ef11d503ede81ebcedd96f07d7f0fab6" translate="yes" xml:space="preserve">
          <source>In the case of recursion, i.e. if function &lt;code&gt;f&lt;/code&gt; appears several times on the call stack, the value of &lt;code&gt;f.arguments&lt;/code&gt; represents the arguments corresponding to the most recent invocation of the function.</source>
          <target state="translated">再帰の場合、つまり、関数 &lt;code&gt;f&lt;/code&gt; が呼び出しスタックに複数回出現する場合、 &lt;code&gt;f.arguments&lt;/code&gt; の値は、関数の最新の呼び出しに対応する引数を表します。</target>
        </trans-unit>
        <trans-unit id="661fd464b4a2050134037311daed90c57e20fd0a" translate="yes" xml:space="preserve">
          <source>In the current ECMAScript specification, &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are considered equal, although this was not so in earlier drafts. See &lt;em&gt;&quot;Value equality for -0 and 0&quot;&lt;/em&gt; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; table for details.</source>
          <target state="translated">現在のECMAScript仕様では、 &lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; は等しいと見なされますが、以前のドラフトではそうではありませんでした。詳細については、&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザの互換性&lt;/a&gt;表の&lt;em&gt;「-0と0の値の同等性」&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="de188306b04f104700fac924cdd1e9567febef02" translate="yes" xml:space="preserve">
          <source>In the example above the exception will be shown since constructor links to Parent.</source>
          <target state="translated">上の例では、コンストラクタが Parent にリンクしているため、例外が表示されます。</target>
        </trans-unit>
        <trans-unit id="acef3bf46acb0ba10cb256e32b5f0d0bb458c455" translate="yes" xml:space="preserve">
          <source>In the example above the exception will be shown since the constructor links to Parent.</source>
          <target state="translated">上の例では、コンストラクタが Parent にリンクしているため、例外が表示されます。</target>
        </trans-unit>
        <trans-unit id="ad8390434acf6607f1bb47c24b30e5f18f5b3f46" translate="yes" xml:space="preserve">
          <source>In the example below, we invoke the &lt;code&gt;display&lt;/code&gt; function without passing the first argument. If the first argument is not passed, the value of &lt;code&gt;this&lt;/code&gt; is bound to the global object.</source>
          <target state="translated">以下の例では、最初の引数を渡さずに &lt;code&gt;display&lt;/code&gt; 関数を呼び出しています。最初の引数が渡されない場合、 &lt;code&gt;this&lt;/code&gt; 値はグローバルオブジェクトにバインドされます。</target>
        </trans-unit>
        <trans-unit id="0c4da435fcb2e56dfca1fdbb66425c53d9f93888" translate="yes" xml:space="preserve">
          <source>In the example below, when we call &lt;code&gt;greet&lt;/code&gt;, the value of &lt;code&gt;this&lt;/code&gt; will be bound to object &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">私たちが呼ぶとき以下の例では、 &lt;code&gt;greet&lt;/code&gt; 、の値 &lt;code&gt;this&lt;/code&gt; 、オブジェクトにバインドされます &lt;code&gt;obj&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c878dda71bd4d57212f4760d1a5d6612fffe1a77" translate="yes" xml:space="preserve">
          <source>In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. &lt;code&gt;null&lt;/code&gt; was represented as the NULL pointer (0x00 in most platforms). Consequently, null had 0 as type tag, hence the bogus &lt;code&gt;typeof&lt;/code&gt; return value. (&lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;reference&lt;/a&gt;)</source>
          <target state="translated">JavaScriptの最初の実装では、JavaScript値はタイプタグと値として表されていました。オブジェクトの型のタグは0であった &lt;code&gt;null&lt;/code&gt; NULLポインタ（ほとんどのプラットフォームでは0x00）として表しました。その結果、nullはタイプタグとして0を持っていたため、偽の &lt;code&gt;typeof&lt;/code&gt; 戻り値が返されました。（&lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;参考&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="857eee85d465027bf36c77ed510b6ca131138764" translate="yes" xml:space="preserve">
          <source>In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was &lt;code&gt;0&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; was represented as the NULL pointer (&lt;code&gt;0x00&lt;/code&gt; in most platforms). Consequently, &lt;code&gt;null&lt;/code&gt; had &lt;code&gt;0&lt;/code&gt; as type tag, hence the &lt;code&gt;&quot;object&quot;&lt;/code&gt;&lt;code&gt;typeof&lt;/code&gt; return value. (&lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;reference&lt;/a&gt;)</source>
          <target state="translated">JavaScriptの最初の実装では、JavaScriptの値はタイプタグと値として表されていました。オブジェクトのタイプタグは &lt;code&gt;0&lt;/code&gt; でした。 &lt;code&gt;null&lt;/code&gt; はNULLポインターとして表されました（ほとんどのプラットフォームでは &lt;code&gt;0x00&lt;/code&gt; ）。結果として、 &lt;code&gt;null&lt;/code&gt; あっ &lt;code&gt;0&lt;/code&gt; 型タグ、従ってように &lt;code&gt;&quot;object&quot;&lt;/code&gt; &lt;code&gt;typeof&lt;/code&gt; 演算の戻り値。（&lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;参考&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="c4c1b2e168bd2c3f0960e008564fab4afcfb0149" translate="yes" xml:space="preserve">
          <source>In the following code, &lt;code&gt;flag.toString()&lt;/code&gt; returns &quot;&lt;code&gt;true&lt;/code&gt;&quot;:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;flag.toString()&lt;/code&gt; は「 &lt;code&gt;true&lt;/code&gt; 」を返します。</target>
        </trans-unit>
        <trans-unit id="326dc4a22d6e5d66e05e913ed076ab8871545c67" translate="yes" xml:space="preserve">
          <source>In the following code, both of the statements containing &lt;code&gt;eval()&lt;/code&gt; return 42. The first evaluates the string &quot;&lt;code&gt;x + y + 1&lt;/code&gt;&quot;; the second evaluates the string &quot;&lt;code&gt;42&lt;/code&gt;&quot;.</source>
          <target state="translated">次のコードでは、 &lt;code&gt;eval()&lt;/code&gt; を含む両方のステートメントが42を返します。最初のステートメントは文字列 &quot; &lt;code&gt;x + y + 1&lt;/code&gt; &quot;を評価します。2番目は文字列 &quot; &lt;code&gt;42&lt;/code&gt; &quot;を評価します。</target>
        </trans-unit>
        <trans-unit id="7227f231dba8b388ff90697deb637f835c642754" translate="yes" xml:space="preserve">
          <source>In the following example we will create a global &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; method called &lt;code&gt;construct&lt;/code&gt;, which will enable you to use an array-like object with a constructor instead of an arguments list.</source>
          <target state="translated">次の例では、 &lt;code&gt;construct&lt;/code&gt; というグローバル&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;メソッドを作成します。これにより、引数リストの代わりにコンストラクターで配列のようなオブジェクトを使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="2ccaa53cc09c2b150a701f3de632d7c64e3076c6" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;match()&lt;/code&gt; is used to find '&lt;code&gt;Chapter&lt;/code&gt;' followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times.</source>
          <target state="translated">次の例では、 &lt;code&gt;match()&lt;/code&gt; を使用して、「 &lt;code&gt;Chapter&lt;/code&gt; 」の後に1つ以上の数字が続き、その後に小数点と数字が0回以上続くことを検索します。</target>
        </trans-unit>
        <trans-unit id="551908074dab38737ca378f22dc2a0152b483db4" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;match()&lt;/code&gt; is used to find &lt;code&gt;'Chapter'&lt;/code&gt; followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the &lt;code&gt;i&lt;/code&gt; flag so that upper/lower case differences will be ignored.</source>
          <target state="translated">次の例では、 &lt;code&gt;match()&lt;/code&gt; を使用して、 &lt;code&gt;'Chapter'&lt;/code&gt; 後に1つ以上の数字が続き、その後に小数点と数字が0回以上続くことを検出します。正規表現には &lt;code&gt;i&lt;/code&gt; フラグが含まれているため、大文字と小文字の違いは無視されます。</target>
        </trans-unit>
        <trans-unit id="3a1da1e1b8bfab54b105a4ada0152c93b74660c6" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;slice&lt;/code&gt; creates a new array, &lt;code&gt;newCar&lt;/code&gt;, from &lt;code&gt;myCar&lt;/code&gt;. Both include a reference to the object &lt;code&gt;myHonda&lt;/code&gt;. When the color of &lt;code&gt;myHonda&lt;/code&gt; is changed to purple, both arrays reflect the change.</source>
          <target state="translated">次の例では、 &lt;code&gt;slice&lt;/code&gt; は &lt;code&gt;myCar&lt;/code&gt; から新しい配列 &lt;code&gt;newCar&lt;/code&gt; を作成します。どちらにも、オブジェクト &lt;code&gt;myHonda&lt;/code&gt; への参照が含まれています。 &lt;code&gt;myHonda&lt;/code&gt; の色が紫に変更されると、両方の配列が変更を反映します。</target>
        </trans-unit>
        <trans-unit id="b027578ad80c9e8c2b2c3dd35b71ae535a33dd33" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;split()&lt;/code&gt; looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces and the semicolon from the string. &lt;code&gt;nameList&lt;/code&gt; is the array returned as a result of &lt;code&gt;split()&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;split()&lt;/code&gt; は0個以上のスペースとそれに続くセミコロンと0個以上のスペースを検索し、見つかった場合は、スペースとセミコロンを文字列から削除します。 &lt;code&gt;nameList&lt;/code&gt; は、 &lt;code&gt;split()&lt;/code&gt; の結果として返される配列です。</target>
        </trans-unit>
        <trans-unit id="5c2e6d8d45fd169d7a77ecae81e085840f806133" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;split()&lt;/code&gt; looks for spaces in a string and returns the first 3 splits that it finds.</source>
          <target state="translated">次の例では、 &lt;code&gt;split()&lt;/code&gt; は文字列内のスペースを検索し、見つかった最初の3つの分割を返します。</target>
        </trans-unit>
        <trans-unit id="2489eb3658fe2037e9cdda5effddf0b3a84f250d" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;split()&lt;/code&gt; looks for zero or more spaces, followed by a semicolon, followed by zero or more spaces&amp;mdash;and, when found, removes the spaces and the semicolon from the string. &lt;code&gt;nameList&lt;/code&gt; is the array returned as a result of &lt;code&gt;split()&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;split()&lt;/code&gt; は、0個以上のスペース、セミコロン、0個以上のスペースを検索し、見つかった場合は、文字列からスペースとセミコロンを削除します。 &lt;code&gt;nameList&lt;/code&gt; は、 &lt;code&gt;split()&lt;/code&gt; の結果として返される配列です。</target>
        </trans-unit>
        <trans-unit id="ccb536da7c5287e832a975ca6e887bf6be2e7026" translate="yes" xml:space="preserve">
          <source>In the following example, a statement labeled &lt;code&gt;checkiandj&lt;/code&gt; contains a statement labeled &lt;code&gt;checkj&lt;/code&gt;. If &lt;code&gt;continue&lt;/code&gt; is encountered, the program continues at the top of the &lt;code&gt;checkj&lt;/code&gt; statement. Each time &lt;code&gt;continue&lt;/code&gt; is encountered, &lt;code&gt;checkj&lt;/code&gt; reiterates until its condition returns false. When false is returned, the remainder of the &lt;code&gt;checkiandj&lt;/code&gt; statement is completed.</source>
          <target state="translated">次の例では、 &lt;code&gt;checkiandj&lt;/code&gt; というラベルのステートメントにcheckjというラベルのステートメントが含まれてい &lt;code&gt;checkj&lt;/code&gt; 。場合は &lt;code&gt;continue&lt;/code&gt; 遭遇され、プログラムはの先頭に続け &lt;code&gt;checkj&lt;/code&gt; の声明。たび &lt;code&gt;continue&lt;/code&gt; 、検出された &lt;code&gt;checkj&lt;/code&gt; のその状態を返します偽になるまで繰り返し述べています。 falseが返されると、 &lt;code&gt;checkiandj&lt;/code&gt; ステートメントの残りの部分が完了します。</target>
        </trans-unit>
        <trans-unit id="0b489dc35a2ac4c8c478d127272578dceb8f8cdb" translate="yes" xml:space="preserve">
          <source>In the following example, if &lt;code&gt;expr&lt;/code&gt; evaluates to &quot;Bananas&quot;, the program matches the value with case &quot;Bananas&quot; and executes the associated statement. When &lt;code&gt;break&lt;/code&gt; is encountered, the program breaks out of &lt;code&gt;switch&lt;/code&gt; and executes the statement following &lt;code&gt;switch&lt;/code&gt;. If &lt;code&gt;break&lt;/code&gt; were omitted, the statement for case &quot;Cherries&quot; would also be executed.</source>
          <target state="translated">次の例では、 &lt;code&gt;expr&lt;/code&gt; が &quot;Bananas&quot;と評価された場合、プログラムはその値をケース &quot;Bananas&quot;と照合し、関連するステートメントを実行します。ときに &lt;code&gt;break&lt;/code&gt; 検出されると、プログラムはの勃発 &lt;code&gt;switch&lt;/code&gt; と、次の文を実行 &lt;code&gt;switch&lt;/code&gt; 。場合 &lt;code&gt;break&lt;/code&gt; 省略された、ケース「さくらんぼ」のためのステートメントも実行されます。</target>
        </trans-unit>
        <trans-unit id="96f6335874bf336b7e951fdce7655cff74fd7933" translate="yes" xml:space="preserve">
          <source>In the following example, if &lt;code&gt;expr&lt;/code&gt; evaluates to &quot;Oranges&quot; or &quot;Apples&quot;, the program matches the values with either the case &quot;Oranges&quot; or &quot;Apples&quot; and executes the corresponding statement. The &lt;code&gt;default&lt;/code&gt; keyword will help in any other case and executes the associated statement.</source>
          <target state="translated">次の例では、 &lt;code&gt;expr&lt;/code&gt; が「Oranges」または「Apples」に評価される場合、プログラムは値を大文字と小文字の「Oranges」または「Apples」のいずれかに一致させ、対応するステートメントを実行します。 &lt;code&gt;default&lt;/code&gt; キーワードは、他の場合に役立つとそれに関連する文を実行します。</target>
        </trans-unit>
        <trans-unit id="8237fe8e3542597e9f1b9aab949f95c7735fe5b9" translate="yes" xml:space="preserve">
          <source>In the following example, if &lt;code&gt;expr&lt;/code&gt; evaluates to &lt;code&gt;Bananas&lt;/code&gt;, the program matches the value with case &lt;code&gt;case 'Bananas'&lt;/code&gt; and executes the associated statement. When &lt;code&gt;break&lt;/code&gt; is encountered, the program breaks out of &lt;code&gt;switch&lt;/code&gt; and executes the statement following &lt;code&gt;switch&lt;/code&gt;. If &lt;code&gt;break&lt;/code&gt; were omitted, the statement for the &lt;code&gt;case 'Cherries'&lt;/code&gt; would also be executed.</source>
          <target state="translated">次の例では、 &lt;code&gt;expr&lt;/code&gt; が &lt;code&gt;Bananas&lt;/code&gt; と評価された場合、プログラムは値をcase &lt;code&gt;case 'Bananas'&lt;/code&gt; と照合し、関連するステートメントを実行します。ときに &lt;code&gt;break&lt;/code&gt; 検出されると、プログラムはの勃発 &lt;code&gt;switch&lt;/code&gt; と、次の文を実行 &lt;code&gt;switch&lt;/code&gt; 。場合 &lt;code&gt;break&lt;/code&gt; 省略された、のための声明 &lt;code&gt;case 'Cherries'&lt;/code&gt; また、実行されます。</target>
        </trans-unit>
        <trans-unit id="6f90002f54cb6c6ac4fe50fef20e7a2668d7f3de" translate="yes" xml:space="preserve">
          <source>In the following example, if no value is provided for &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; when &lt;code&gt;multiply&lt;/code&gt; is called, &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt;'s value would be &lt;code&gt;undefined&lt;/code&gt; when evaluating &lt;code&gt;&lt;var&gt;a&lt;/var&gt; * &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt; would return &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;multiply&lt;/code&gt; が呼び出されたときに &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; に値が指定されていない場合、 &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; &lt;code&gt;&lt;var&gt;a&lt;/var&gt; * &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; &lt;var&gt;b&lt;/var&gt; を評価 &lt;var&gt;a&lt;/var&gt; ときにbの値は &lt;code&gt;undefined&lt;/code&gt; になり、 &lt;code&gt;multiply&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="16ddded5321b57a0d866951feace6e4cea99bc3c" translate="yes" xml:space="preserve">
          <source>In the following example, if no value is provided for &lt;code&gt;b&lt;/code&gt; when &lt;code&gt;multiply&lt;/code&gt; is called, &lt;code&gt;b&lt;/code&gt;&amp;rsquo;s value would be &lt;code&gt;undefined&lt;/code&gt; when evaluating &lt;code&gt;a * b&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt; would return &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;multiply&lt;/code&gt; が呼び出されたときに &lt;code&gt;b&lt;/code&gt; に値が指定されていない場合、 &lt;code&gt;b&lt;/code&gt; &lt;code&gt;a * b&lt;/code&gt; 評価時にbの値は &lt;code&gt;undefined&lt;/code&gt; となり、 &lt;code&gt;multiply&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9742f1b1d9915daea9f896ab1adc27f1b391e232" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;do...while&lt;/code&gt; loop iterates at least once and reiterates until &lt;code&gt;i&lt;/code&gt; is no longer less than 5.</source>
          <target state="translated">次の例では、 &lt;code&gt;do...while&lt;/code&gt; ループは少なくとも1回反復し、 &lt;code&gt;i&lt;/code&gt; が5以上になるまで繰り返します。</target>
        </trans-unit>
        <trans-unit id="290da318e59120487518c92d769cd84cc341a64b" translate="yes" xml:space="preserve">
          <source>In the following example, the array &lt;code&gt;numbers&lt;/code&gt; is iterated through by looking at the &lt;code&gt;length&lt;/code&gt; property. The value in each element is then doubled.</source>
          <target state="translated">次の例では、 &lt;code&gt;length&lt;/code&gt; プロパティを調べることにより、配列 &lt;code&gt;numbers&lt;/code&gt; が反復されます。その後、各要素の値が2倍になります。</target>
        </trans-unit>
        <trans-unit id="3e970986a7e8da7faf5f169eb8ef1a860c621631" translate="yes" xml:space="preserve">
          <source>In the following example, the constructor for the &lt;code&gt;Product&lt;/code&gt; object is defined with two parameters: &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;Product&lt;/code&gt; オブジェクトのコンストラクターは、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;price&lt;/code&gt; の2つのパラメーターで定義されています。</target>
        </trans-unit>
        <trans-unit id="5c716507b55f4e7d36a7bf5bbf5705d645b4cfbd" translate="yes" xml:space="preserve">
          <source>In the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally the value gets returned.</source>
          <target state="translated">次の例では、オブジェクトは自身のプロパティとしてゲッターを持っています。プロパティを取得すると、プロパティはオブジェクトから削除され、再度追加されますが、今回は暗黙のうちにデータプロパティとして追加されます。最終的に値が返されます。</target>
        </trans-unit>
        <trans-unit id="948e31f9a2ae361570277883f29ebf342acf68b5" translate="yes" xml:space="preserve">
          <source>In the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally, the value gets returned.</source>
          <target state="translated">次の例では、オブジェクトは自身のプロパティとしてゲッターを持っています。プロパティを取得すると、そのプロパティはオブジェクトから削除され、再度追加されますが、今回は暗黙のうちにデータプロパティとして追加されます。最後に、値が返されます。</target>
        </trans-unit>
        <trans-unit id="63491fcad57234202d5746abce8c2f912c702dac" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression is defined in &lt;code&gt;replace()&lt;/code&gt; and includes the ignore case flag.</source>
          <target state="translated">次の例では、正規表現が &lt;code&gt;replace()&lt;/code&gt; で定義されており、大文字と小文字を区別しないフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="e10c0f043f02b2123d978ede8da98693e4584598" translate="yes" xml:space="preserve">
          <source>In the following example, the usage is probably not intentional:</source>
          <target state="translated">以下の例では、おそらく意図的な使い方ではないと思われます。</target>
        </trans-unit>
        <trans-unit id="7e3a594f9a72b0094faccc4763da19747b8d1679" translate="yes" xml:space="preserve">
          <source>In the following example, the variable &lt;code&gt;bigNumber&lt;/code&gt; is assigned a value that is larger than the maximum value. When the &lt;a href=&quot;../../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement executes, &lt;code&gt;bigNumber&lt;/code&gt; has the value &lt;code&gt;Infinity&lt;/code&gt;, so &lt;code&gt;bigNumber&lt;/code&gt; is set to a more manageable value before continuing.</source>
          <target state="translated">次の例では、変数 &lt;code&gt;bigNumber&lt;/code&gt; に最大値より大きい値が割り当てられています。とき&lt;a href=&quot;../../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;ステートメントを実行、 &lt;code&gt;bigNumber&lt;/code&gt; 価値がある &lt;code&gt;Infinity&lt;/code&gt; 、そう &lt;code&gt;bigNumber&lt;/code&gt; 継続する前に、より管理しやすい値に設定されています。</target>
        </trans-unit>
        <trans-unit id="a0d991c308ff8ad2345c76fb15afab7a3798cf66" translate="yes" xml:space="preserve">
          <source>In the following example, the variable &lt;code&gt;smallNumber&lt;/code&gt; is assigned a value that is smaller than the minimum value. When the &lt;a href=&quot;../../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement executes, &lt;code&gt;smallNumber&lt;/code&gt; has the value &lt;code&gt;-Infinity&lt;/code&gt;, so &lt;code&gt;smallNumber&lt;/code&gt; is set to a more manageable value before continuing.</source>
          <target state="translated">次の例では、変数 &lt;code&gt;smallNumber&lt;/code&gt; に最小値より小さい値が割り当てられています。とき&lt;a href=&quot;../../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;ステートメントを実行、 &lt;code&gt;smallNumber&lt;/code&gt; には価値がある &lt;code&gt;-Infinity&lt;/code&gt; を、そう &lt;code&gt;smallNumber&lt;/code&gt; には、継続する前に、より管理しやすい値に設定されています。</target>
        </trans-unit>
        <trans-unit id="d0bdf3814229a99d3d55903e9dbbccafa691e79d" translate="yes" xml:space="preserve">
          <source>In the following example, we delete an own property of an object while a property with the same name is available on the prototype chain:</source>
          <target state="translated">以下の例では、プロトタイプチェーン上で同名のプロパティが利用可能な状態で、オブジェクトの自身のプロパティを削除しています。</target>
        </trans-unit>
        <trans-unit id="d1688dd1bc4311871facdb22d215ac29f4cfd269" translate="yes" xml:space="preserve">
          <source>In the following example, we first define a class named &lt;code&gt;Polygon&lt;/code&gt;, then extend it to create a class named &lt;code&gt;Square&lt;/code&gt;.</source>
          <target state="translated">次の例では、最初に &lt;code&gt;Polygon&lt;/code&gt; という名前のクラスを定義し、次にそれを拡張して &lt;code&gt;Square&lt;/code&gt; という名前のクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="3915fb85a203c34c4701029950bb8a9c14f92f1b" translate="yes" xml:space="preserve">
          <source>In the following example, we first define a class named Polygon, then extend it to create a class named Square. Note that super(), used in the constructor, can only be used in constructors and must be called before the &lt;code&gt;this&lt;/code&gt; keyword can be used.</source>
          <target state="translated">次の例では、最初にPolygonという名前のクラスを定義してから、それを拡張してSquareという名前のクラスを作成します。コンストラクターで使用されるsuper（）はコンストラクターでのみ使用でき、 &lt;code&gt;this&lt;/code&gt; キーワードを使用する前に呼び出す必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="382dd03774580bb2f9d04acd67e5dab59c412528" translate="yes" xml:space="preserve">
          <source>In the following example, we successively await two promises. Progress moves through function &lt;code&gt;foo&lt;/code&gt; in three stages.</source>
          <target state="translated">次の例では、2つの約束を連続して待ちます。進行状況は、関数 &lt;code&gt;foo&lt;/code&gt; を3段階で移動します。</target>
        </trans-unit>
        <trans-unit id="0ec0333973c02fd58485ca1aa0e462c7548eff95" translate="yes" xml:space="preserve">
          <source>In the following example, when &lt;code&gt;o.f()&lt;/code&gt; is invoked, inside the function &lt;code&gt;this&lt;/code&gt; is bound to the &lt;code&gt;o&lt;/code&gt; object.</source>
          <target state="translated">次の例では、 &lt;code&gt;o.f()&lt;/code&gt; が呼び出されると、関数内で &lt;code&gt;this&lt;/code&gt; が &lt;code&gt;o&lt;/code&gt; オブジェクトにバインドされます。</target>
        </trans-unit>
        <trans-unit id="04bcd5d96a4ccd8139ff398132b2d5a23f10fbfa" translate="yes" xml:space="preserve">
          <source>In the following piece of code, &lt;code&gt;slice()&lt;/code&gt; is a bound function to the &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; function of &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;, with the &lt;code&gt;this&lt;/code&gt; value set to the &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; function of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. This means that additional &lt;code&gt;apply()&lt;/code&gt; calls can be eliminated:</source>
          <target state="translated">次のコードでは、 &lt;code&gt;slice()&lt;/code&gt; は&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;関数にバインドされた関数であり、 &lt;code&gt;this&lt;/code&gt; 値は&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt;関数に設定されています。これは、追加の &lt;code&gt;apply()&lt;/code&gt; 呼び出しを排除できることを意味します。</target>
        </trans-unit>
        <trans-unit id="910701d472ecd5b702fc4b46aec86e952f4bac39" translate="yes" xml:space="preserve">
          <source>In the former instance, JS seems to find an empty string just after the specified index value. In the latter instance, JS seems to be finding an empty string at the end of the searched string.</source>
          <target state="translated">前者の場合、JS は指定したインデックス値の直後に空の文字列を見つけているようです。後者の場合、JSは検索された文字列の最後に空の文字列を見つけているようです。</target>
        </trans-unit>
        <trans-unit id="e95ef1758d9879398c7d717728553d776121d64a" translate="yes" xml:space="preserve">
          <source>In the function signature for &lt;code&gt;drawChart&lt;/code&gt; above, the destructured left-hand side is assigned to an empty object literal on the right-hand side: &lt;code&gt;{size = 'big', coords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt;. You could have also written the function without the right-hand side assignment. However, if you leave out the right-hand side assignment, the function will look for at least one argument to be supplied when invoked, whereas in its current form, you can simply call &lt;code&gt;&lt;strong&gt;drawChart()&lt;/strong&gt;&lt;/code&gt; without supplying any parameters. The current design is useful if you want to be able to call the function without supplying any parameters, the other can be useful when you want to ensure an object is passed to the function.</source>
          <target state="translated">上記の &lt;code&gt;drawChart&lt;/code&gt; の関数シグネチャでは、非構造化された左側が右側の空のオブジェクトリテラルに割り当てられています： &lt;code&gt;{size = 'big', coords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt; 。右側の割り当てなしで関数を作成することもできます。ただし、右側の割り当てを省略した場合、関数は呼び出されたときに指定される引数を少なくとも1つ検索しますが、現在の形式では、パラメーターを指定せずに &lt;code&gt;&lt;strong&gt;drawChart()&lt;/strong&gt;&lt;/code&gt; を呼び出すだけです。現在の設計は、パラメーターを指定せずに関数を呼び出せるようにする場合に役立ちます。もう1つは、オブジェクトが関数に確実に渡されるようにする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="320ac0eafa6debb7dcd8b9758ef8cfe6b6f8db61" translate="yes" xml:space="preserve">
          <source>In the function signature for &lt;code&gt;drawES2015Chart&lt;/code&gt; above, the destructured left-hand side is assigned to an empty object literal on the right-hand side: &lt;code&gt;{size = 'big', cords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt;. You could have also written the function without the right-hand side assignment. However, if you leave out the right-hand side assignment, the function will look for at least one argument to be supplied when invoked, whereas in its current form, you can simply call &lt;code&gt;&lt;strong&gt;drawES2015Chart()&lt;/strong&gt;&lt;/code&gt; without supplying any parameters. The current design is useful if you want to be able to call the function without supplying any parameters, the other can be useful when you want to ensure an object is passed to the function.</source>
          <target state="translated">上記の &lt;code&gt;drawES2015Chart&lt;/code&gt; の関数シグネチャでは、分解された左側が右側の空のオブジェクトリテラルに割り当てられています： &lt;code&gt;{size = 'big', cords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt; 。また、右側の代入なしで関数を作成することもできます。ただし、右側の割り当てを省略すると、関数は呼び出されたときに提供される少なくとも1つの引数を探しますが、現在の形式では、パラメーターを指定せずに単に &lt;code&gt;&lt;strong&gt;drawES2015Chart()&lt;/strong&gt;&lt;/code&gt; を呼び出すことができます。現在の設計は、パラメーターを指定せずに関数を呼び出せるようにする場合に便利です。もう1つは、オブジェクトが関数に確実に渡されるようにする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="384cd9fe2f63891e05c6315f490a0fe09b2696a0" translate="yes" xml:space="preserve">
          <source>In the global context, a variable declared using &lt;code&gt;var&lt;/code&gt; is added as a non-configurable property of the global object. This means its property descriptor cannot be changed and it cannot be deleted using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;. The corresponding name is also added to a list on the internal &lt;code&gt;[[VarNames]]&lt;/code&gt; slot on the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-global-environment-records&quot;&gt;global environment record&lt;/a&gt; (which forms part of the global lexical environment). The list of names in &lt;code&gt;[[VarNames]]&lt;/code&gt; enables the runtime to distinguish between global variables and straightforward properties on the global object.</source>
          <target state="translated">グローバルコンテキストでは、 &lt;code&gt;var&lt;/code&gt; を使用して宣言された変数が、グローバルオブジェクトの構成不可能なプロパティとして追加されます。つまり、そのプロパティ記述子は変更できず、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;を使用して削除することもできません。対応する名前は、&lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-global-environment-records&quot;&gt;グローバル環境レコード&lt;/a&gt;（グローバル字句環境の一部を形成する）の内部 &lt;code&gt;[[VarNames]]&lt;/code&gt; スロットのリストにも追加されます。 &lt;code&gt;[[VarNames]]&lt;/code&gt; の名前のリストにより、ランタイムはグローバル変数とグローバルオブジェクトの単純なプロパティを区別できます。</target>
        </trans-unit>
        <trans-unit id="7ec2ed1a49c59897eb318170d9b6bd3065461b6d" translate="yes" xml:space="preserve">
          <source>In the global execution context (outside of any function), &lt;code&gt;this&lt;/code&gt; refers to the global object whether in strict mode or not.</source>
          <target state="translated">グローバル実行コンテキスト（関数の外）では、 &lt;code&gt;this&lt;/code&gt; は、厳密モードかどうかに関係なく、グローバルオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="4323cb3e94dbb71c6dea4adf5e31307a360729a9" translate="yes" xml:space="preserve">
          <source>In the last example (&lt;code&gt;C2&lt;/code&gt;), because an object was returned during construction, the new object that &lt;code&gt;this&lt;/code&gt; was bound to simply gets discarded. (This essentially makes the statement &quot;&lt;code&gt;this.a = 37;&lt;/code&gt;&quot; dead code. It's not exactly dead because it gets executed, but it can be eliminated with no outside effects.)</source>
          <target state="translated">最後の例（ &lt;code&gt;C2&lt;/code&gt; ）では、構築中にオブジェクトが返されたため、 &lt;code&gt;this&lt;/code&gt; がバインドされていた新しいオブジェクトは単に破棄されます。（これにより、ステートメント「 &lt;code&gt;this.a = 37;&lt;/code&gt; 」がデッドコードになります。実行されるため、完全にデッドではありませんが、外部への影響なしに削除できます。）</target>
        </trans-unit>
        <trans-unit id="00e90f9a8f3cbcb6e3ee4661127d9871d59bd623" translate="yes" xml:space="preserve">
          <source>In the module, we could use the following code:</source>
          <target state="translated">モジュールでは、以下のようなコードを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f8a9e58aa43466c9b9026972ff36cb4dd102c297" translate="yes" xml:space="preserve">
          <source>In the next example, a rest parameter is used to collect all arguments after the first one in an array. Each one of them is then multiplied by the first parameter and the array is returned:</source>
          <target state="translated">次の例では、残りのパラメータを使用して、最初の引数の後のすべての引数を配列に集めています。そして、それぞれの引数に最初のパラメータが掛けられ、配列が返されます。</target>
        </trans-unit>
        <trans-unit id="a1d0de29c2467a1bcda0bcf6cead5586e0aa1d34" translate="yes" xml:space="preserve">
          <source>In the next example, a rest parameter is used to collect all parameters after the first into an array. Each one of them is then multiplied by the first parameter, and the array is returned:</source>
          <target state="translated">次の例では、残りのパラメータを使用して、最初のパラメータ以降のすべてのパラメータを配列に集めます。そして、それぞれのパラメータに最初のパラメータを乗算して配列を返します。</target>
        </trans-unit>
        <trans-unit id="3deb91bb9b2b1254cf0c448c27969519e3a92034" translate="yes" xml:space="preserve">
          <source>In the next example, an &lt;a href=&quot;if...else&quot;&gt;&lt;code&gt;if...else&lt;/code&gt;&lt;/a&gt; statement without curly braces (&lt;code&gt;{}&lt;/code&gt;) is used.</source>
          <target state="translated">次の例では、中括弧（ &lt;code&gt;{}&lt;/code&gt; ）のない&lt;a href=&quot;if...else&quot;&gt; &lt;code&gt;if...else&lt;/code&gt; &lt;/a&gt;ステートメントが使用されています。</target>
        </trans-unit>
        <trans-unit id="7e204d4b72625c73764da0600a44e35ab5711b4a" translate="yes" xml:space="preserve">
          <source>In the past, the general strategy for setting defaults was to test parameter values in the function body and assign a value if they are &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">以前は、デフォルトを設定するための一般的な戦略は、関数本体のパラメーター値をテストし、 &lt;code&gt;undefined&lt;/code&gt; 場合は値を割り当てることでした。</target>
        </trans-unit>
        <trans-unit id="118743fe11f8aa51b1246d6b929e4cf6c2a3a3c4" translate="yes" xml:space="preserve">
          <source>In the replacement text, the script uses &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to indicate the results of the corresponding matching parentheses in the regular expression pattern.</source>
          <target state="translated">置換テキストでは、スクリプトは &lt;code&gt;$1&lt;/code&gt; と &lt;code&gt;$2&lt;/code&gt; を使用して、正規表現パターンの対応する一致する括弧の結果を示します。</target>
        </trans-unit>
        <trans-unit id="18901524c393bd6c9d4140d7173cf206ad8f759d" translate="yes" xml:space="preserve">
          <source>In the same line, the &lt;code&gt;if&lt;/code&gt; block's &lt;code&gt;foo&lt;/code&gt; has already been created in the lexical environment, but has not yet reached (and terminated) its initialization (which is part of the statement itself).</source>
          <target state="translated">同じ行で、 &lt;code&gt;if&lt;/code&gt; ブロックの &lt;code&gt;foo&lt;/code&gt; はすでに字句環境で作成されていますが、その初期化（ステートメント自体の一部）にまだ到達（および終了）していません。</target>
        </trans-unit>
        <trans-unit id="6f67384bff317df6dc3f3c5721272dbec196a342" translate="yes" xml:space="preserve">
          <source>In the second call in this example, even if the first argument is set explicitly to &lt;code&gt;undefined&lt;/code&gt; (though not &lt;code&gt;null&lt;/code&gt; or other &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt; values), the value of the &lt;code&gt;&lt;var&gt;num&lt;/var&gt;&lt;/code&gt; argument is still the default.</source>
          <target state="translated">この例の2番目の呼び出しでは、最初の引数が明示的に &lt;code&gt;undefined&lt;/code&gt; に設定されている場合でも（ &lt;code&gt;null&lt;/code&gt; やその他の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;偽の&lt;/a&gt;値ではありませんが）、 &lt;code&gt;&lt;var&gt;num&lt;/var&gt;&lt;/code&gt; 引数の値がデフォルトのままです。</target>
        </trans-unit>
        <trans-unit id="c8b8cef8365495d74b0b650d8145880b109b506c" translate="yes" xml:space="preserve">
          <source>In the second call in this example, even if the first argument is set explicitly to &lt;code&gt;undefined&lt;/code&gt; (though not &lt;code&gt;null&lt;/code&gt; or other &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy&lt;/a&gt; values&lt;/em&gt;), the value of the &lt;code&gt;num&lt;/code&gt; argument is still the default.</source>
          <target state="translated">この例の2番目の呼び出しでは、最初の引数が明示的に &lt;code&gt;undefined&lt;/code&gt; に設定されていても（ &lt;code&gt;null&lt;/code&gt; または他の&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;偽の&lt;/a&gt;値では&lt;/em&gt;ありません）、 &lt;code&gt;num&lt;/code&gt; 引数の値はデフォルトのままです。</target>
        </trans-unit>
        <trans-unit id="7b79ff68d3fff0dd724c0e66e2c8369970388f4e" translate="yes" xml:space="preserve">
          <source>In the second example, &lt;code&gt;this&lt;/code&gt; should be &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;f2&lt;/code&gt; was called directly and not as a method or property of an object (e.g. &lt;code&gt;window.f2()&lt;/code&gt;). This feature wasn't implemented in some browsers when they first started to support &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. As a result, they incorrectly returned the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">第2の例では、 &lt;code&gt;this&lt;/code&gt; なければならない&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ので、 &lt;code&gt;f2&lt;/code&gt; はオブジェクトのメソッドまたはプロパティとして直接なく、呼ばれた（例えば &lt;code&gt;window.f2()&lt;/code&gt; ）。一部のブラウザが最初に&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;をサポートし始めたとき、この機能は実装されていませんでした。その結果、 &lt;code&gt;window&lt;/code&gt; オブジェクトが誤って返されました。</target>
        </trans-unit>
        <trans-unit id="0cd33ef758331369d99dcee31aeb7e6ca215fa7f" translate="yes" xml:space="preserve">
          <source>In the syntax, the text string represents the literal text that you want the user to see. The &lt;code&gt;name&lt;/code&gt; parameter string represents the &lt;code&gt;name&lt;/code&gt; attribute of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">構文では、テキスト文字列は、ユーザーに表示するリテラルテキストを表します。 &lt;code&gt;name&lt;/code&gt; パラメータ文字列を表し &lt;code&gt;name&lt;/code&gt; の属性&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt;要素を。</target>
        </trans-unit>
        <trans-unit id="eae556c3be7f945436b5d6044a42766b280d5e47" translate="yes" xml:space="preserve">
          <source>In the table below, &lt;strong&gt;Grouping&lt;/strong&gt; is listed as having the highest precedence. However, that does not always mean the expression within the grouping symbols &lt;code&gt;( &amp;hellip; )&lt;/code&gt; is evaluated first, especially when it comes to short-circuiting.</source>
          <target state="translated">次の表では、&lt;strong&gt;グループ化&lt;/strong&gt;が最も優先度の高いものとしてリストされています。ただし、これは、特に短絡に関しては、グループ化記号 &lt;code&gt;( &amp;hellip; )&lt;/code&gt; 内の式が最初に評価されることを常に意味するわけではありません。</target>
        </trans-unit>
        <trans-unit id="53bb1c4268b088f014ea5a9a7d9ea551816d49cc" translate="yes" xml:space="preserve">
          <source>In the uncompressed version, the program runs into the truthy-branch and logs &quot;&lt;code&gt;'foo' is an instance of 'Foo'&lt;/code&gt;&quot;. Whereas, in the compressed version it behaves differently, and runs into the else-branch. If you rely on &lt;code&gt;Function.name&lt;/code&gt;, like in the example above, make sure your build pipeline doesn't change function names, or don't assume a function to have a particular name.</source>
          <target state="translated">非圧縮バージョンでは、プログラムはtruthy-branchにぶつかり、「 &lt;code&gt;'foo' is an instance of 'Foo'&lt;/code&gt; 」のインスタンスであるとログに記録します。一方、圧縮バージョンでは、動作が異なり、elseブランチにぶつかります。上記の例のように &lt;code&gt;Function.name&lt;/code&gt; に依存している場合は、ビルドパイプラインが関数名を変更しないこと、または関数に特定の名前があると想定しないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="79bb87933d62241b361f74acb67f3e98a281c829" translate="yes" xml:space="preserve">
          <source>In the uncompressed version, the program runs into the truthy-branch and logs &lt;em&gt;'foo' is an instance of 'Foo'&lt;/em&gt;. Whereas, in the compressed version it behaves differently, and runs into the else-branch. If you rely on &lt;code&gt;Function.name&lt;/code&gt;, like in the example above, make sure your build pipeline doesn't change function names, or don't assume a function to have a particular name.</source>
          <target state="translated">非圧縮バージョンでは、プログラムは真のブランチに実行され、&lt;em&gt;「foo」が「Foo」のインスタンスであること&lt;/em&gt;をログに記録&lt;em&gt;します&lt;/em&gt;。一方、圧縮バージョンでは動作が異なり、else-branchに実行されます。上記の例のように、 &lt;code&gt;Function.name&lt;/code&gt; に依存している場合は、ビルドパイプラインが関数名を変更しないこと、または関数に特定の名前があると想定しないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="a6045774c4491fab11ca343b8a71fe9f28294720" translate="yes" xml:space="preserve">
          <source>In the worker (see &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt;) we define an import object for the module to use, then set up an event handler to receive the module from the main thread. When the module is received, we create an instance from it using the &lt;a href=&quot;instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt; method and invoke an exported function from inside it.</source>
          <target state="translated">ワーカー（ &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt; を参照）で、使用するモジュールのインポートオブジェクトを定義し、メインスレッドからモジュールを受け取るようにイベントハンドラーを設定します。モジュールを受け取ると、&lt;a href=&quot;instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt;メソッドを使用してモジュールからインスタンスを作成し、その内部からエクスポートされた関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="012ee32c213d819cb9d3fb7476f49f1095628ce9" translate="yes" xml:space="preserve">
          <source>In the worker (see &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt;) we define an import object for the module to use, then set up an event handler to receive the module from the main thread. when the module is received, we create an instance from it using the &lt;a href=&quot;../instantiate&quot;&gt;&lt;code&gt;WebAssembly.Instantiate()&lt;/code&gt;&lt;/a&gt; method, invoke an exported function from inside it, then show how we can return information on the available exports on a module using &lt;code&gt;WebAssembly.Module.exports&lt;/code&gt;.</source>
          <target state="translated">ワーカー（ &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt; を参照）で、使用するモジュールのインポートオブジェクトを定義し、メインスレッドからモジュールを受け取るようにイベントハンドラーを設定します。モジュールを受け取ると、&lt;a href=&quot;../instantiate&quot;&gt; &lt;code&gt;WebAssembly.Instantiate()&lt;/code&gt; &lt;/a&gt;メソッドを使用してインスタンスを作成し、その内部からエクスポートされた関数を呼び出して、 &lt;code&gt;WebAssembly.Module.exports&lt;/code&gt; を使用してモジュールで使用可能なエクスポートに関する情報を返す方法を示します。</target>
        </trans-unit>
        <trans-unit id="70bec1ed815f54f78684ae17e4732e9e7306cdd6" translate="yes" xml:space="preserve">
          <source>In this case it's important to return only an integer (so a simple division won't do), and also to only return actually elapsed seconds (that's why this code uses &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt; and not &lt;a href=&quot;math/round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">この場合は、（このコードが使用する理由です（シンプルな部門が行うことはありませんので）、また、唯一の実際の経過秒を返すだけに整数を返すことが重要です&lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; を&lt;/a&gt;していない&lt;a href=&quot;math/round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8c9f7d01af5e1fce725fc980e3a1487d78434b0a" translate="yes" xml:space="preserve">
          <source>In this case, it's important to return only an integer&amp;mdash;so a simple division won't do. It's also important to only return actually elapsed seconds. (That's why this code uses &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;, and &lt;em&gt;not&lt;/em&gt;&lt;a href=&quot;math/round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">この場合、整数のみを返すことが重要です。したがって、単純な除算では返されません。実際に経過した秒数のみを返すことも重要です。（そのため、このコードは&lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt;では&lt;em&gt;なく&lt;/em&gt;&lt;a href=&quot;math/round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt;ます。）</target>
        </trans-unit>
        <trans-unit id="186a0d96b6bdd1c3792c513064740ed74358e3ab" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;console.log()&lt;/code&gt; call is never issued, since it's inside a comment. Any number of lines of code can be disabled this way.</source>
          <target state="translated">この場合、コメント内にあるため、 &lt;code&gt;console.log()&lt;/code&gt; コールは発行されません。この方法で、任意の数のコード行を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="03c6fb8b542b497eb35334ab759b3e7f836b4e4a" translate="yes" xml:space="preserve">
          <source>In this case, the function &lt;code&gt;sum&lt;/code&gt; has default parameters &lt;code&gt;a=1&lt;/code&gt; and &lt;code&gt;b=2&lt;/code&gt;:</source>
          <target state="translated">この場合、関数 &lt;code&gt;sum&lt;/code&gt; にはデフォルトのパラメーター &lt;code&gt;a=1&lt;/code&gt; および &lt;code&gt;b=2&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="83c25e00d5dc533083c80281b6cb39e68fc1bfd2" translate="yes" xml:space="preserve">
          <source>In this case, the inner function's &lt;code&gt;this&lt;/code&gt; isn't set so it returns the global/window object (i.e. the default object in non&amp;ndash;strict mode where &lt;code&gt;this&lt;/code&gt; isn't set by the call).</source>
          <target state="translated">この場合、内側の関数はだ &lt;code&gt;this&lt;/code&gt; それがグローバル/ウィンドウオブジェクトを返すように設定されていない（すなわち、非strictモードでのデフォルトのオブジェクト &lt;code&gt;this&lt;/code&gt; コールによって設定されていません）。</target>
        </trans-unit>
        <trans-unit id="ee090e37a02dcb4f76244ca9578ebc7366ff2c73" translate="yes" xml:space="preserve">
          <source>In this case, the property &lt;code&gt;bar&lt;/code&gt; is an undefined property, so a &lt;code&gt;ReferenceError&lt;/code&gt; will occur.</source>
          <target state="translated">この場合、プロパティ &lt;code&gt;bar&lt;/code&gt; は未定義のプロパティであるため、 &lt;code&gt;ReferenceError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="5ba12f762c8080d1368efbc5da9ff771dc86bdae" translate="yes" xml:space="preserve">
          <source>In this case, the variable &quot;arg&quot; redeclares the argument.</source>
          <target state="translated">この場合、変数 &quot;arg &quot;は引数を再宣言します。</target>
        </trans-unit>
        <trans-unit id="37c152d2215becaac46c7389493a06f938d3439c" translate="yes" xml:space="preserve">
          <source>In this case, the variable &quot;bar&quot; is an undeclared variable.</source>
          <target state="translated">この場合、変数 &quot;bar &quot;は宣言されていない変数です。</target>
        </trans-unit>
        <trans-unit id="1089c3880315f3e567e584d5eccf757d257bcc7e" translate="yes" xml:space="preserve">
          <source>In this case, the variable &quot;foo&quot; is redeclared in the block statement using &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">この場合、変数 &quot;foo&quot;は &lt;code&gt;let&lt;/code&gt; を使用してblockステートメントで再宣言されます。</target>
        </trans-unit>
        <trans-unit id="607fad50d33fb3b355e7cc4cdeae47a48846941f" translate="yes" xml:space="preserve">
          <source>In this case, we return all the selected &lt;code&gt;option&lt;/code&gt;s' values on the screen:</source>
          <target state="translated">この場合、選択したすべての &lt;code&gt;option&lt;/code&gt; の値を画面に返します。</target>
        </trans-unit>
        <trans-unit id="b5233ec322e51b52c87cb640dd6c9fe7a2b2a7d5" translate="yes" xml:space="preserve">
          <source>In this case, which happens way too often, there is a typo in the method name:</source>
          <target state="translated">あまりにも頻繁に起こるこのケースでは、メソッド名にタイプミスがあります。</target>
        </trans-unit>
        <trans-unit id="ce98cc8bdab5c6d18ec608646a8a392ecc6990dc" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;property&lt;/code&gt; must be a valid JavaScript identifier, i.e. a sequence of alphanumerical characters, also including the underscore (&quot;&lt;code&gt;_&lt;/code&gt;&quot;) and dollar sign (&quot;&lt;code&gt;$&lt;/code&gt;&quot;), that cannot start with a number. For example, &lt;code&gt;object.$1&lt;/code&gt; is valid, while &lt;code&gt;object.1&lt;/code&gt; is not.</source>
          <target state="translated">このコードでは、 &lt;code&gt;property&lt;/code&gt; は有効なJavaScript識別子、つまり、数字で始めることのできない、アンダースコア（ &quot; &lt;code&gt;_&lt;/code&gt; &quot;）とドル記号（ &quot; &lt;code&gt;$&lt;/code&gt; &quot;）を含む英数字のシーケンスでなければなりません。たとえば、 &lt;code&gt;object.$1&lt;/code&gt; は有効ですが、 &lt;code&gt;object.1&lt;/code&gt; は無効です。</target>
        </trans-unit>
        <trans-unit id="bcac0f21dd62d88cc1fc1d7c5edc9c0b7b37a5fd" translate="yes" xml:space="preserve">
          <source>In this example we define a function that can add two or more numbers together.</source>
          <target state="translated">この例では、2つ以上の数字を足し算できる関数を定義しています。</target>
        </trans-unit>
        <trans-unit id="44ecc52fcc1dd532a59d37d9c27852cb4e6632c6" translate="yes" xml:space="preserve">
          <source>In this example when the setter is triggered, it is told to do the same thing again: &lt;em&gt;to set the same property that it is meant to handle.&lt;/em&gt; This causes the function to call itself, again and again, making it infinitely recursive.</source>
          <target state="translated">この例では、セッターがトリガーされると、同じことを再度実行するように指示されます&lt;em&gt;。つまり、処理する予定の同じプロパティを設定します。&lt;/em&gt;これにより、関数は何度も何度もそれ自体を呼び出し、無限に再帰的になります。</target>
        </trans-unit>
        <trans-unit id="bfda2fb9a04305f886bcd0e49716e0ef48179b89" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;f()&lt;/code&gt; returns the values &lt;code&gt;[1, 2]&lt;/code&gt; as its output, which can be parsed in a single line with destructuring.</source>
          <target state="translated">この例では、 &lt;code&gt;f()&lt;/code&gt; は値として &lt;code&gt;[1, 2]&lt;/code&gt; を出力として返します。これは、構造化を解除して1行で解析できます。</target>
        </trans-unit>
        <trans-unit id="4ec37b22188853fa195e1eb0a40dd6fc5647d4b0" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;next&lt;/code&gt; is called with a value.</source>
          <target state="translated">この例では、 &lt;code&gt;next&lt;/code&gt; は値を使用して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d6a73078322457f6e2a4f76866f7f2bd2d296423" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;next&lt;/code&gt; is called with a value. Note that the first call did not log anything, because the generator was not yielding anything initially.</source>
          <target state="translated">この例では、 &lt;code&gt;next&lt;/code&gt; は値を指定して呼び出されます。ジェネレーターは最初は何も生成していなかったため、最初の呼び出しでは何もログに記録されなかったことに注意してください。</target>
        </trans-unit>
        <trans-unit id="563d6171046b28102d99d569274b89bdabeb1e27" translate="yes" xml:space="preserve">
          <source>In this example, a getter always returns the same value.</source>
          <target state="translated">この例では、ゲッターは常に同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="2d925e67a635ae1e3d2c5b8950ddc3283286c2d1" translate="yes" xml:space="preserve">
          <source>In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.</source>
          <target state="translated">この例では、文字列内に出現するすべての大文字が小文字に変換され、一致する場所の直前にハイフンが挿入されます。ここで重要なのは、マッチした項目が置換される前に、マッチした項目に対して追加の操作が必要であるということです。</target>
        </trans-unit>
        <trans-unit id="f33012959cef3631ac1b179a71cdf251a2d34c8f" translate="yes" xml:space="preserve">
          <source>In this example, the first argument is mapped to &lt;code&gt;&quot;a&quot;&lt;/code&gt; and the second to &lt;code&gt;&quot;b&quot;&lt;/code&gt;, so these named arguments are used like normal. However the third argument &lt;code&gt;&quot;manyMoreArgs&quot;&lt;/code&gt; will be an array that contains the 3rd, 4th, 5th, 6th ... nth -- as many arguments that the user includes.</source>
          <target state="translated">この例では、最初の引数は &lt;code&gt;&quot;a&quot;&lt;/code&gt; に、2番目の引数は &lt;code&gt;&quot;b&quot;&lt;/code&gt; にマップされているため、これらの名前付き引数は通常のように使用されます。ただし、3番目の引数 &lt;code&gt;&quot;manyMoreArgs&quot;&lt;/code&gt; は、3番目、4番目、5番目、6番目... n番目（ユーザーが含む引数の数）を含む配列になります。</target>
        </trans-unit>
        <trans-unit id="b5ba9ccc89fc1604d1696a6f06c45a0e15818a82" translate="yes" xml:space="preserve">
          <source>In this example, the first argument is mapped to &lt;code&gt;a&lt;/code&gt; and the second to &lt;code&gt;b&lt;/code&gt;, so these named arguments are used as normal.</source>
          <target state="translated">この例では、最初の引数をにマッピングされると第2 &lt;code&gt;b&lt;/code&gt; ので、これらの名前付き引数は通常通り使用されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="694ce76b4ee53e67741df07c604b0136305f4feb" translate="yes" xml:space="preserve">
          <source>In this example, the object assigned to the variable &lt;code&gt;p&lt;/code&gt; doesn't have its own &lt;code&gt;f&lt;/code&gt; property, it inherits it from its prototype. But it doesn't matter that the lookup for &lt;code&gt;f&lt;/code&gt; eventually finds a member with that name on &lt;code&gt;o&lt;/code&gt;; the lookup began as a reference to &lt;code&gt;p.f&lt;/code&gt;, so &lt;code&gt;this&lt;/code&gt; inside the function takes the value of the object referred to as &lt;code&gt;p&lt;/code&gt;. That is, since &lt;code&gt;f&lt;/code&gt; is called as a method of &lt;code&gt;p&lt;/code&gt;, its &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;p&lt;/code&gt;. This is an interesting feature of JavaScript's prototype inheritance.</source>
          <target state="translated">この例では、変数 &lt;code&gt;p&lt;/code&gt; に割り当てられたオブジェクトには独自の &lt;code&gt;f&lt;/code&gt; プロパティがなく、プロトタイプから継承されます。しかし、 &lt;code&gt;f&lt;/code&gt; のルックアップが最終的にその名前のメンバーを &lt;code&gt;o&lt;/code&gt; で見つけることは重要ではありません。ルックアップは &lt;code&gt;p.f&lt;/code&gt; への参照として開始されたため、関数内の &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;p&lt;/code&gt; と呼ばれるオブジェクトの値を取ります。つまり、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;p&lt;/code&gt; のメソッドとして呼び出されるため、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;p&lt;/code&gt; を参照します。これは、JavaScriptのプロトタイプ継承の興味深い機能です。</target>
        </trans-unit>
        <trans-unit id="66ff041dbef1cfc7f06522a5a35ef052cd6ff39d" translate="yes" xml:space="preserve">
          <source>In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.</source>
          <target state="translated">この例では、ネイティブのJavaScriptオブジェクトを使用していますが、そのオブジェクトに適用されたすべての操作をプロキシが転送します。</target>
        </trans-unit>
        <trans-unit id="38f8bcdd4576e052baef77d87b035aec5006ad25" translate="yes" xml:space="preserve">
          <source>In this example, we create a 8-byte buffer with a &lt;a href=&quot;int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; view referring to the buffer:</source>
          <target state="translated">この例では、バッファーを参照する&lt;a href=&quot;int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;ビューで8バイトのバッファーを作成します。</target>
        </trans-unit>
        <trans-unit id="87a870c20fd5c4ac21e8e1fefbf9420b0799bf46" translate="yes" xml:space="preserve">
          <source>In this example, we create an anonymous function and use &lt;code&gt;call&lt;/code&gt; to invoke it on every object in an array.</source>
          <target state="translated">この例では、無名関数を作成し、 &lt;code&gt;call&lt;/code&gt; を使用して配列内のすべてのオブジェクトでそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="02d622e8d0d99304a0a0a4b1c302b418fb7d05cf" translate="yes" xml:space="preserve">
          <source>In this example, we create an anonymous function and use &lt;code&gt;call&lt;/code&gt; to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as &lt;code&gt;this&lt;/code&gt; value was not strictly necessary, but is done for explanatory purpose.</source>
          <target state="translated">この例では、無名関数を作成し、 &lt;code&gt;call&lt;/code&gt; を使用して配列内のすべてのオブジェクトで呼び出します。ここでの無名関数の主な目的は、すべてのオブジェクトに印刷関数を追加することです。これにより、配列内のオブジェクトの正しいインデックスを印刷できます。 &lt;code&gt;this&lt;/code&gt; 値としてオブジェクトを渡すことは厳密には必要ありませんが、説明の目的で行われます。</target>
        </trans-unit>
        <trans-unit id="d35974a3e7587dcc087e5970b5717fe14b1ffcde" translate="yes" xml:space="preserve">
          <source>In this list, each page is listed by name (the type of error) and message (a more detailed human-readable error message). Together, these two properties provide a starting point toward understanding and resolving the error. For more information, follow the links below!</source>
          <target state="translated">このリストでは、各ページは名前(エラーの種類)とメッセージ(より詳細な人間が読めるエラーメッセージ)でリスト化されています。これら2つの特性を合わせて、エラーを理解して解決するための出発点を提供します。詳細については、以下のリンクを参照してください!</target>
        </trans-unit>
        <trans-unit id="84cc35eeca38031ad4f482983b4a69f835b760cf" translate="yes" xml:space="preserve">
          <source>In this simple example the number &lt;code&gt;37&lt;/code&gt; gets returned as the default value when the property name is not in the object. It is using the &lt;a href=&quot;proxy/handler/get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">この単純な例では、プロパティ名がオブジェクト内にない場合、 &lt;code&gt;37&lt;/code&gt; という数値がデフォルト値として返されます。&lt;a href=&quot;proxy/handler/get&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt;ハンドラーを使用しています。</target>
        </trans-unit>
        <trans-unit id="c9f63da3eb0045c2357f1cdb851b284fdcaffc13" translate="yes" xml:space="preserve">
          <source>In this simple example, the number &lt;code&gt;37&lt;/code&gt; gets returned as the default value when the property name is not in the object. It is using the &lt;a href=&quot;proxy/proxy/get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">この簡単な例では、プロパティ名がオブジェクトにない場合、数値 &lt;code&gt;37&lt;/code&gt; がデフォルト値として返されます。&lt;a href=&quot;proxy/proxy/get&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt;ハンドラーを使用しています。</target>
        </trans-unit>
        <trans-unit id="590403612835e59c245f0cdab1e404168d22e494" translate="yes" xml:space="preserve">
          <source>In unusual situations, the assignment operator (e.g.&lt;code&gt; x += y&lt;/code&gt;) is not identical to the meaning expression (here &lt;code&gt;x = x + y&lt;/code&gt;). When the left operand of an assignment operator itself contains an assignment operator, the left operand is evaluated only once. For example:</source>
          <target state="translated">異常な状況では、代入演算子（例： &lt;code&gt; x += y&lt;/code&gt; ）は意味式（ここでは &lt;code&gt;x = x + y&lt;/code&gt; ）と同一ではありません。代入演算子自体の左側のオペランドに代入演算子が含まれている場合、左側のオペランドは1回だけ評価されます。例えば：</target>
        </trans-unit>
        <trans-unit id="a131dacbe54fb64553702d39cdf6558030b34fb8" translate="yes" xml:space="preserve">
          <source>Included in the (normative) annex for additional ECMAScript legacy features for Web browsers (note that the specification codifies what is already in implementations).</source>
          <target state="translated">Web ブラウザ用の追加の ECMAScript レガシー機能のための (規範的な)附属書に含まれています (この仕様では、すでに実装されているものが成文化されていることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="4041f4126b0351dfe2e79c79a3f6557e3c70b29b" translate="yes" xml:space="preserve">
          <source>Incomplete array initializer</source>
          <target state="translated">配列のイニシャライザが不完全</target>
        </trans-unit>
        <trans-unit id="4c69aeda2103b6e78518bbb410b414f8da34036f" translate="yes" xml:space="preserve">
          <source>Increases the size of the Table instance by a specified number of elements.</source>
          <target state="translated">テーブルインスタンスのサイズを指定した要素数だけ大きくします。</target>
        </trans-unit>
        <trans-unit id="1ad7f4e9bdfd8b6afc5185d816fa7e2287a97748" translate="yes" xml:space="preserve">
          <source>Increases the size of the Table instance by a specified number of references.</source>
          <target state="translated">テーブルインスタンスのサイズを指定された参照数だけ増やします。</target>
        </trans-unit>
        <trans-unit id="c99f880b72799cc04c963d4317c186789a75c6d6" translate="yes" xml:space="preserve">
          <source>Increases the size of the memory instance by a specified number of WebAssembly pages (each one is 64KB in size).</source>
          <target state="translated">メモリインスタンスのサイズを指定した数だけWebAssemblyページのサイズを増加させます(各ページのサイズは64KB)。</target>
        </trans-unit>
        <trans-unit id="401d8f49917326f6d322f2dadc2fa0c24677d373" translate="yes" xml:space="preserve">
          <source>Increasing the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;増やします。</target>
        </trans-unit>
        <trans-unit id="65bc9ccd743dd3dce9047eb75c52a48c168f2c7a" translate="yes" xml:space="preserve">
          <source>Increment &amp;amp; decrement</source>
          <target state="translated">インクリメント＆デクリメント</target>
        </trans-unit>
        <trans-unit id="f6baea39d0ecb0d64a9c1b43f7ae26c1991070ca" translate="yes" xml:space="preserve">
          <source>Increment (++)</source>
          <target state="translated">インクリメント (++)</target>
        </trans-unit>
        <trans-unit id="7137b97519cd5a3352b194f1a47ef7b8d00c0803" translate="yes" xml:space="preserve">
          <source>Increment (&lt;code&gt;++&lt;/code&gt;)</source>
          <target state="translated">増分（ &lt;code&gt;++&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7e427ab8b4862191565a1a29a01d981f9c08b30f" translate="yes" xml:space="preserve">
          <source>Increment and decrement</source>
          <target state="translated">インクリメントとデクリメント</target>
        </trans-unit>
        <trans-unit id="6ffb5e37a0de256063704a907edfe0ba275b1cf7" translate="yes" xml:space="preserve">
          <source>Indeterminate form (e.g. &lt;code&gt;0 * Infinity&lt;/code&gt;, or &lt;code&gt;undefined + undefined&lt;/code&gt;)</source>
          <target state="translated">不定形（例： &lt;code&gt;0 * Infinity&lt;/code&gt; 、または &lt;code&gt;undefined + undefined&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e37f91419162687bd95af5bf7c6d8af3c0b436e1" translate="yes" xml:space="preserve">
          <source>Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.</source>
          <target state="translated">配列の変更を開始するインデックス (原点 0)。配列の長さよりも大きい場合、実際の開始インデックスは配列の長さに設定されます。負の値を指定した場合は、配列の末尾からその数だけの要素を開始し (原点 -1)、絶対値が配列の長さよりも大きい場合は 0 に設定されます。</target>
        </trans-unit>
        <trans-unit id="45e917d5246c9f80b81acc22465ce7ef8dada20f" translate="yes" xml:space="preserve">
          <source>Indexed Collections</source>
          <target state="translated">インデックス付きコレクション</target>
        </trans-unit>
        <trans-unit id="0a5a3ab920950c8b210b9bac77077845cb8eefef" translate="yes" xml:space="preserve">
          <source>Indexed collections</source>
          <target state="translated">インデックス付きコレクション</target>
        </trans-unit>
        <trans-unit id="ad269f38c4b63f8bfa0ecb35d25d42a1aaead76a" translate="yes" xml:space="preserve">
          <source>Indexed properties not consulting prototype</source>
          <target state="translated">プロトタイプをコンサルティングしていないインデックス付きプロパティ</target>
        </trans-unit>
        <trans-unit id="7600e0fb90c939a2d9f2134c598b9b3ebcc27ac1" translate="yes" xml:space="preserve">
          <source>Indicates an error during WebAssembly decoding or validation.</source>
          <target state="translated">WebAssembly のデコードまたは検証中にエラーが発生したことを示します。</target>
        </trans-unit>
        <trans-unit id="018b8e5d38f9e27fad5f584feea16ea2dc658705" translate="yes" xml:space="preserve">
          <source>Indicates an error during module instantiation (besides &lt;a href=&quot;http://webassembly.org/docs/semantics/#traps&quot;&gt;traps&lt;/a&gt; from the start function).</source>
          <target state="translated">モジュールのインスタンス化中のエラーを示します（開始関数からの&lt;a href=&quot;http://webassembly.org/docs/semantics/#traps&quot;&gt;トラップを除く&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="20c0a83d7993f36b5134ae07826c8ecfe2d53d68" translate="yes" xml:space="preserve">
          <source>Indicates if the &lt;code&gt;g&lt;/code&gt; flag was used for a global match.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; フラグがグローバル一致に使用されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="7dceb2034a666f7087defcc0f1f7e6314d0528af" translate="yes" xml:space="preserve">
          <source>Indicates if the &lt;code&gt;i&lt;/code&gt; flag was used to ignore case.</source>
          <target state="translated">大文字小文字を区別するために &lt;code&gt;i&lt;/code&gt; フラグが使用されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="8b87a4dc659a01a5ec6a2bb79eda040056bd8bfe" translate="yes" xml:space="preserve">
          <source>Indicates if the &lt;code&gt;m&lt;/code&gt; flag was used to search across multiple lines.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; フラグが複数行にわたる検索に使用されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="5c3c699849bd9690ce57a8e4f7dfc1232fdafc22" translate="yes" xml:space="preserve">
          <source>Individual flag values can be extracted by ANDing them with a bitmask, where each bit with the value of one will &quot;extract&quot; the corresponding flag. The bitmask &lt;em&gt;masks&lt;/em&gt; out the non-relevant flags by ANDing with zeroes (hence the term &quot;bitmask&quot;). For example, the bitmask 0100 can be used to see if flag C is set:</source>
          <target state="translated">個々のフラグ値は、ビットマスクとのANDをとることによって抽出できます。1の値を持つ各ビットは、対応するフラグを「抽出」します。ビット&lt;em&gt;マスクは&lt;/em&gt;、ゼロとのANDをとることによって関係のないフラグを&lt;em&gt;マスク&lt;/em&gt;します（そのため、「ビットマスク」という用語）。たとえば、ビットマスク0100を使用して、フラグCが設定されているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="a9e2bf39c1e2a07161681d68dede8a4a0984febe" translate="yes" xml:space="preserve">
          <source>Individual operators</source>
          <target state="translated">個人事業者</target>
        </trans-unit>
        <trans-unit id="8d4cadd23dc0f47618e0017475e1b69c0cbc8e21" translate="yes" xml:space="preserve">
          <source>Inequality</source>
          <target state="translated">Inequality</target>
        </trans-unit>
        <trans-unit id="e6cec31e8a65681ae7ec444c7f456b4cab73fee8" translate="yes" xml:space="preserve">
          <source>Inequality (!=)</source>
          <target state="translated">不等号(!=)</target>
        </trans-unit>
        <trans-unit id="68eb52167d8b6624a0b93dc5831d7c86c5135093" translate="yes" xml:space="preserve">
          <source>Inequality (&lt;code&gt;a != b&lt;/code&gt;)</source>
          <target state="translated">不等式（ &lt;code&gt;a != b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d488f35d25db0196ffb7b0d1ffbbaed095958c24" translate="yes" xml:space="preserve">
          <source>Inequality operator.</source>
          <target state="translated">不等式演算子。</target>
        </trans-unit>
        <trans-unit id="a79dc3d005cf68005384e3b181f0842a749aefcd" translate="yes" xml:space="preserve">
          <source>Inferred function names</source>
          <target state="translated">推定された関数名</target>
        </trans-unit>
        <trans-unit id="ae29dd030af2c6013a342baa4496df5423ffebe1" translate="yes" xml:space="preserve">
          <source>Inferred names on anonymous functions</source>
          <target state="translated">匿名関数の名前の推定</target>
        </trans-unit>
        <trans-unit id="f6c883b54018ef7a4cdbcff87341648a7e230e30" translate="yes" xml:space="preserve">
          <source>Infinite iterator</source>
          <target state="translated">無限イテレータ</target>
        </trans-unit>
        <trans-unit id="0219fd54bd5841008b18c414a5b2dea331bad1c5" translate="yes" xml:space="preserve">
          <source>Infinity</source>
          <target state="translated">Infinity</target>
        </trans-unit>
        <trans-unit id="59e354f06c04e0eb393e460ca726f509ae4ece3e" translate="yes" xml:space="preserve">
          <source>Inheritance of properties</source>
          <target state="translated">プロパティの継承</target>
        </trans-unit>
        <trans-unit id="7951150c36a5b0078509be63ec158d0a10f3f90a" translate="yes" xml:space="preserve">
          <source>Inherited properties</source>
          <target state="translated">継承されたプロパティ</target>
        </trans-unit>
        <trans-unit id="df616f44e2c500bdaf1406df4828fd9ed5d52f72" translate="yes" xml:space="preserve">
          <source>Inherited property access: &lt;code&gt;Object.create(proxy)[foo]&lt;/code&gt;</source>
          <target state="translated">継承されたプロパティアクセス： &lt;code&gt;Object.create(proxy)[foo]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2150882f012dfc772b92621683506749d96ecd3" translate="yes" xml:space="preserve">
          <source>Inherited property assignment: &lt;code&gt;Object.create(proxy)[foo] = bar&lt;/code&gt;</source>
          <target state="translated">継承されたプロパティの割り当て： &lt;code&gt;Object.create(proxy)[foo] = bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a75868d63eb79c862251acc96e281c4c93b846e2" translate="yes" xml:space="preserve">
          <source>Inherited property query: &lt;code&gt;foo in Object.create(proxy)&lt;/code&gt;</source>
          <target state="translated">継承されたプロパティクエリ： &lt;code&gt;foo in Object.create(proxy)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abd7f16fa284794d2ca981389668e28d3cd48524" translate="yes" xml:space="preserve">
          <source>Initial WebAssembly draft definition.</source>
          <target state="translated">WebAssemblyの初期ドラフト定義。</target>
        </trans-unit>
        <trans-unit id="9e915d7086e42ba7ad8fb470ce6fd37be732353b" translate="yes" xml:space="preserve">
          <source>Initial definition</source>
          <target state="translated">初期定義</target>
        </trans-unit>
        <trans-unit id="a37acae44fb32c850ce995533205c3c2eb69f53c" translate="yes" xml:space="preserve">
          <source>Initial definition in ECMA standard.</source>
          <target state="translated">ECMA規格での初期定義。</target>
        </trans-unit>
        <trans-unit id="35e9e36e8328392208cdb962c3a79bddae0d63a2" translate="yes" xml:space="preserve">
          <source>Initial definition in ECMAScript 2017.</source>
          <target state="translated">ECMAScript 2017での初期定義。</target>
        </trans-unit>
        <trans-unit id="f7d55f8d05c9e8c07926850628936b042dbed3d6" translate="yes" xml:space="preserve">
          <source>Initial definition in ES2017.</source>
          <target state="translated">ES2017での初期定義。</target>
        </trans-unit>
        <trans-unit id="6b379dfab4923f85c6fe72c56d94f6fd30cd942c" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard</source>
          <target state="translated">ECMA規格での初期定義</target>
        </trans-unit>
        <trans-unit id="bee4945b5c9770ada5b145f4f6bd2f1332eb9f3f" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard.</source>
          <target state="translated">ECMA規格での初期定義。</target>
        </trans-unit>
        <trans-unit id="e29784b04e2a292b41764fd796f01398698302ab" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard. Specified behaviour for indexed and named properties. Specified that &lt;code&gt;new&lt;/code&gt; is required.</source>
          <target state="translated">ECMA標準の初期定義。インデックス付きの名前付きプロパティの指定された動作。 &lt;code&gt;new&lt;/code&gt; が必要であることを指定しました。</target>
        </trans-unit>
        <trans-unit id="82c35f70e5937c8e4260b39081fd9fc366d7bedb" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard. Specified that &lt;code&gt;new&lt;/code&gt; is required.</source>
          <target state="translated">ECMA標準の初期定義。 &lt;code&gt;new&lt;/code&gt; が必要であることを指定しました。</target>
        </trans-unit>
        <trans-unit id="804103ada9286a91818a9c6f943e1357a3cee5f3" translate="yes" xml:space="preserve">
          <source>Initial definition was in ECMAScript 3.</source>
          <target state="translated">初期定義はECMAScript 3であった。</target>
        </trans-unit>
        <trans-unit id="1996078361460df53a1d2f9e9930c7c26d7f873c" translate="yes" xml:space="preserve">
          <source>Initial definition.</source>
          <target state="translated">初期定義。</target>
        </trans-unit>
        <trans-unit id="c74d3aa9086119cde5be85b65c88465515b8ab05" translate="yes" xml:space="preserve">
          <source>Initial definition. Defined in several section of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literals&quot;&gt;Template Literals&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tagged-templates&quot;&gt;Tagged Templates&lt;/a&gt;</source>
          <target state="translated">初期定義。仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literals&quot;&gt;テンプレートリテラル&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tagged-templates&quot;&gt;タグ付きテンプレート&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d8b74490582a852fffa70f4fc964c8e54beb501" translate="yes" xml:space="preserve">
          <source>Initial definition. Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers.</source>
          <target state="translated">初期定義。Web ブラウザ用の追加 ECMAScript 機能のための(規範的な)附属書 B で定義されています。</target>
        </trans-unit>
        <trans-unit id="cf63efa5c0322f19ea7d903fb16ba743a12e456d" translate="yes" xml:space="preserve">
          <source>Initial definition. Does not specify let expressions or let blocks.</source>
          <target state="translated">初期定義。let式やletブロックを指定しない。</target>
        </trans-unit>
        <trans-unit id="40263062f582b9167e63d837c485ac319158cdd4" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0</source>
          <target state="translated">初期定義。JavaScript 1.0で実装</target>
        </trans-unit>
        <trans-unit id="4ce05f6ce50ee64e9b4ab5c56bb413d0aef9cda2" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0.</source>
          <target state="translated">初期定義。JavaScript 1.0で実装。</target>
        </trans-unit>
        <trans-unit id="ef9ece1071525c79ebc962c49979dc6140499d8b" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0. Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers.</source>
          <target state="translated">初期定義。JavaScript 1.0 で実装。Web ブラウザ用の追加 ECMAScript 機能のための(規範的な)付属書 B で定義されています。</target>
        </trans-unit>
        <trans-unit id="a3477ed16aca83fcc6cb881f80d7e09ec7c62282" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0. Deprecated in favor of &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; in ES3.</source>
          <target state="translated">初期定義。JavaScript 1.0で実装されています。ES3 の&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;ために廃止されました。</target>
        </trans-unit>
        <trans-unit id="9ed464ab05f4b7a4db1b22334a85ff353174c997" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.1</source>
          <target state="translated">初期定義。JavaScript 1.1 で実装</target>
        </trans-unit>
        <trans-unit id="ac3e55bf74a2e48b37e9ce44c0f80517a3bec394" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.1.</source>
          <target state="translated">初期定義。JavaScript 1.1で実装。</target>
        </trans-unit>
        <trans-unit id="bb8e116565952c369a0e33d04e78e8cfdb7d6847" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2</source>
          <target state="translated">初期定義。JavaScript 1.2 で実装</target>
        </trans-unit>
        <trans-unit id="941a5c7ff7cd2d2d4aa695b24556fd6f3bfb1a20" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2.</source>
          <target state="translated">初期定義。JavaScript 1.2で実装。</target>
        </trans-unit>
        <trans-unit id="dc7ad3d394c062cdaa8069fe5fd888ffa41f60f1" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;global&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">初期定義。JavaScript 1.2で実装されています。JavaScriptの1.5： &lt;code&gt;global&lt;/code&gt; のプロパティで&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;ない、インスタンス&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="c66c9736512070345f9e9afd89f67fb870b37654" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;ignoreCase&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">初期定義。JavaScript 1.2で実装されています。JavaScriptの1.5： &lt;code&gt;ignoreCase&lt;/code&gt; ははの財産である&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;インスタンスではなく、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="bbd4b92992b6ccec49a23065c54399ff4c99f8d4" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;lastIndex&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">初期定義。JavaScript 1.2で実装されています。JavaScriptの1.5： &lt;code&gt;lastIndex&lt;/code&gt; のはの財産である&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;インスタンスではなく、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="fad0be06a8ade79e3f7b0862a68a4d8db5a2420c" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;multiline&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">初期定義。JavaScript 1.2で実装されています。JavaScriptの1.5： &lt;code&gt;multiline&lt;/code&gt; の財産である&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;インスタンスではなく、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="cbac5462a80516b70d45fe45a2fbbd5e4d6ceb8d" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;source&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">初期定義。JavaScript 1.2で実装されています。JavaScriptの1.5： &lt;code&gt;source&lt;/code&gt; のプロパティで&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;インスタンスではなく、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="a85f7a92d71856d124832fd97d098db448fd811d" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.3</source>
          <target state="translated">初期定義。JavaScript 1.3 で実装</target>
        </trans-unit>
        <trans-unit id="b38e7ce9b5cf83a8b1f0b1490a6268e2b973a0a3" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.3.</source>
          <target state="translated">初期定義。JavaScript 1.3で実装。</target>
        </trans-unit>
        <trans-unit id="ae0b462c8892ec0161d3febb8a3272c7c02d863f" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.3. Format is implementation dependent.</source>
          <target state="translated">初期定義。JavaScript 1.3で実装。形式は実装に依存します。</target>
        </trans-unit>
        <trans-unit id="059285ca9aa0072aad8a001d0290031512394a78" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.4</source>
          <target state="translated">初期定義。JavaScript 1.4 で実装</target>
        </trans-unit>
        <trans-unit id="c1808274911cabdf7ca684c1f1735365f7772fde" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.4.</source>
          <target state="translated">初期定義。JavaScript 1.4 で実装。</target>
        </trans-unit>
        <trans-unit id="a40791e2d6b8b660293bab3f511003e62d469c50" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.5.</source>
          <target state="translated">初期定義。JavaScript 1.5で実装。</target>
        </trans-unit>
        <trans-unit id="b912d0e0846319e918d16802811ba094f6f47499" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.6.</source>
          <target state="translated">初期定義。JavaScript 1.6 で実装。</target>
        </trans-unit>
        <trans-unit id="26a478c8236e6faa48a87a57bc5275286f41b4d7" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.7.</source>
          <target state="translated">初期定義。JavaScript 1.7 で実装。</target>
        </trans-unit>
        <trans-unit id="078ca5ed2fd128eff8b0b9a2d46b4238264e128c" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.</source>
          <target state="translated">初期定義。JavaScript 1.8 で実装。</target>
        </trans-unit>
        <trans-unit id="8a4d24fd7dd67bd64acdeb068c2c167ada819f10" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.1.</source>
          <target state="translated">初期定義。JavaScript 1.8.1 で実装。</target>
        </trans-unit>
        <trans-unit id="58d49a89bac6a7dedf8b042873e15e72e65f0ebb" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.5</source>
          <target state="translated">初期定義。JavaScript 1.8.5 で実装</target>
        </trans-unit>
        <trans-unit id="cad1ad3e2afcf629593f6eb50d4bac93cd34486b" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.5.</source>
          <target state="translated">初期定義。JavaScript 1.8.5 で実装。</target>
        </trans-unit>
        <trans-unit id="2018c675b7f3b4f89b1656e50a4ae4c9277685f2" translate="yes" xml:space="preserve">
          <source>Initial definition. JavaScript 1.0 (UNIX Only) / JavaScript 1.1 (All platforms).</source>
          <target state="translated">初期定義。JavaScript 1.0 (UNIXのみ)/JavaScript 1.1 (全プラットフォーム)。</target>
        </trans-unit>
        <trans-unit id="7173bef762ccdf92ab23687cfc1d5be4a9ad804d" translate="yes" xml:space="preserve">
          <source>Initial definition. See also: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-C&quot;&gt;Strict mode restriction and exceptions&lt;/a&gt;</source>
          <target state="translated">初期定義。参照：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-C&quot;&gt;厳格モードの制限と例外&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57325d451f55171c368ce61331d89e6d3d0aeaf6" translate="yes" xml:space="preserve">
          <source>Initial definition. Unlabeled version.</source>
          <target state="translated">初期定義。ラベルなしバージョン。</target>
        </trans-unit>
        <trans-unit id="022515f406a57864f40cd1203eb4dcb41febf436" translate="yes" xml:space="preserve">
          <source>Initial defintion.</source>
          <target state="translated">初期定義。</target>
        </trans-unit>
        <trans-unit id="69a9e0de842d8ae55591da42504603cd7e7262df" translate="yes" xml:space="preserve">
          <source>Initial draft definition.</source>
          <target state="translated">初期草案の定義。</target>
        </trans-unit>
        <trans-unit id="b975dbb1192b113cadea247a55fa22b519dfca4d" translate="yes" xml:space="preserve">
          <source>Initial publication</source>
          <target state="translated">初版発行</target>
        </trans-unit>
        <trans-unit id="c02800d28cb9343126029438b218e44c2370a6a7" translate="yes" xml:space="preserve">
          <source>Initial value of the variable. It can be any legal expression. Default value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">変数の初期値。それはどんな法的な表現でもかまいません。デフォルト値は &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e1b224617736038fb54e6a25aa285ec6283eba9" translate="yes" xml:space="preserve">
          <source>Initial value of the variable. It can be any legal expression. Default value is &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="translated">変数の初期値。正当な表現であれば何でもかまいません。デフォルト値は&lt;em&gt;未定義&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="8c5eae6e8ad5c7eff82b70392594bd4874c1a340" translate="yes" xml:space="preserve">
          <source>Initialization of several variables</source>
          <target state="translated">複数の変数の初期化</target>
        </trans-unit>
        <trans-unit id="9f8693a57ce3d9a432b19813a82043b25a29e309" translate="yes" xml:space="preserve">
          <source>Initially, the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified.</source>
          <target state="translated">最初に、 &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; 関数は、文字列化されるオブジェクトを表すキーとして空の文字列を使用して呼び出されます。次に、文字列化されるオブジェクトまたは配列のプロパティごとに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d858124bcdda6ccdc66224e0325d22439387781d" translate="yes" xml:space="preserve">
          <source>Initially, the &lt;code&gt;replacer&lt;/code&gt; function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified.</source>
          <target state="translated">最初に、文字列化されるオブジェクトを表すキーとして空の文字列を使用して &lt;code&gt;replacer&lt;/code&gt; 関数が呼び出されます。次に、文字列化されるオブジェクトまたは配列の各プロパティに対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="08711e711134e579523d56126b09874d8022e4b2" translate="yes" xml:space="preserve">
          <source>Inserts</source>
          <target state="translated">Inserts</target>
        </trans-unit>
        <trans-unit id="2b48e8876ecb78ba7e1968f36e0fd6a0717b2571" translate="yes" xml:space="preserve">
          <source>Inserts a &quot;$&quot;.</source>
          <target state="translated">&quot;$&quot;を挿入します。</target>
        </trans-unit>
        <trans-unit id="40864899bf9e01467baa3d38448be2a7cdcbcb11" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;code&gt;&quot;$&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;$&quot;&lt;/code&gt; 挿入します。</target>
        </trans-unit>
        <trans-unit id="3ce7b5d4c8da12992edd7415b06c863f63baa582" translate="yes" xml:space="preserve">
          <source>Inserts the matched substring.</source>
          <target state="translated">マッチした部分文字列を挿入します。</target>
        </trans-unit>
        <trans-unit id="e58f47bb0ef2776a10dd15f573a06a8e5d0afde5" translate="yes" xml:space="preserve">
          <source>Inserts the portion of the string that follows the matched substring.</source>
          <target state="translated">一致した部分文字列の後に続く部分を挿入します。</target>
        </trans-unit>
        <trans-unit id="4fed5693b7d1971ffd7cacdb16b81e94032e1511" translate="yes" xml:space="preserve">
          <source>Inserts the portion of the string that precedes the matched substring.</source>
          <target state="translated">マッチした部分文字列の前に文字列の部分を挿入します。</target>
        </trans-unit>
        <trans-unit id="ca5c1c3094ae7abe52cdce1ab07a6ed84f2ed2aa" translate="yes" xml:space="preserve">
          <source>Inside a character set, the dot loses its special meaning and matches a literal dot.</source>
          <target state="translated">文字セットの中では、ドットは特別な意味を失い、リテラルのドットと一致します。</target>
        </trans-unit>
        <trans-unit id="362024d61ebb70536bd9394b65dd78d5aad24d05" translate="yes" xml:space="preserve">
          <source>Inside a function, the value of &lt;code&gt;this&lt;/code&gt; depends on how the function is called.</source>
          <target state="translated">関数内での値 &lt;code&gt;this&lt;/code&gt; 関数が呼び出される方法によって異なります。</target>
        </trans-unit>
        <trans-unit id="d0721f17dea6dcfcdf19c0b198b3112c883bdb01" translate="yes" xml:space="preserve">
          <source>Inside array comprehensions, these two kinds of components are allowed:</source>
          <target state="translated">配列理解の内部では、この2種類の構成要素が認められています。</target>
        </trans-unit>
        <trans-unit id="29e60640aa891200ac53331b0be76d088bf2cff8" translate="yes" xml:space="preserve">
          <source>Insignificant &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; may be present anywhere except within a &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; (numbers must contain no whitespace) or &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (&lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U+0009&lt;/a&gt;), carriage return (&lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U+000D&lt;/a&gt;), line feed (&lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U+000A&lt;/a&gt;), and space (&lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U+0020&lt;/a&gt;) characters are the only valid whitespace characters.</source>
          <target state="translated">意味のない&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;は、 &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; （数値に空白を含めることはできません）または &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; （文字列内の対応する文字として解釈されるか、エラーが発生する）以外の場所に存在する可能性があります。有効な空白文字は、タブ文字（&lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U + 0009&lt;/a&gt;）、キャリッジリターン（&lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U + 000D&lt;/a&gt;）、改行（&lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U + &lt;/a&gt;000A）、およびスペース（&lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U + 0020&lt;/a&gt;）文字のみです。</target>
        </trans-unit>
        <trans-unit id="2f3b9e6560de73eb8bc85eb42a04c1141865b37d" translate="yes" xml:space="preserve">
          <source>Insignificant whitespace may be present anywhere except within a &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; (numbers must contain no whitespace) or &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (&lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U+0009&lt;/a&gt;), carriage return (&lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U+000D&lt;/a&gt;), line feed (&lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U+000A&lt;/a&gt;), and space (&lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U+0020&lt;/a&gt;) characters are the only valid whitespace characters.</source>
          <target state="translated">意味のない空白は、 &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; （数値に空白を含めることはできません）または &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; （文字列内の対応する文字として解釈されるか、エラーが発生する場所）以外の場所に存在する可能性があります。タブ文字（&lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U + 0009&lt;/a&gt;）、キャリッジリターン（&lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U + 000D&lt;/a&gt;）、ラインフィード（&lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U + &lt;/a&gt;000A）、およびスペース（&lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U + 0020&lt;/a&gt;）文字のみが有効な空白文字です。</target>
        </trans-unit>
        <trans-unit id="6ab7d1d49dd26afc2c53ee28fa81799fd390b0a3" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
          <target state="translated">インスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="c1f424042c7e8bee2655a6672ddd3752109cc8d7" translate="yes" xml:space="preserve">
          <source>Instance properties</source>
          <target state="translated">インスタンスのプロパティ</target>
        </trans-unit>
        <trans-unit id="755387148de4cd392d1630cb598a8c5176cd9afc" translate="yes" xml:space="preserve">
          <source>Instance properties must be defined inside of class methods:</source>
          <target state="translated">インスタンス・プロパティは、クラス・メソッドの内部で定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="86d67413e7f102d37a19a41e92518fd07b196a5a" translate="yes" xml:space="preserve">
          <source>Instances</source>
          <target state="translated">Instances</target>
        </trans-unit>
        <trans-unit id="f3a70c71d702bb70b2b487042ba6e7c30d331112" translate="yes" xml:space="preserve">
          <source>Instantiating streaming</source>
          <target state="translated">ストリーミングのインスタンス化</target>
        </trans-unit>
        <trans-unit id="581ba3673a3337b2762fb544acd4152c49002ae6" translate="yes" xml:space="preserve">
          <source>Instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;ken&lt;/code&gt; as the parameters for the owners. To find out the name of the owner of &lt;code&gt;car2&lt;/code&gt;, you can access the following property:</source>
          <target state="translated">新しいオブジェクトを作成するときにリテラル文字列または整数値を渡す代わりに、上記のステートメントは所有者のパラメーターとしてオブジェクト &lt;code&gt;rand&lt;/code&gt; および &lt;code&gt;ken&lt;/code&gt; を渡します。 &lt;code&gt;car2&lt;/code&gt; の所有者の名前を確認するには、次のプロパティにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a75193ab1f417d6c56a3655429671908b8e061a5" translate="yes" xml:space="preserve">
          <source>Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL_API&quot;&gt;URL API&lt;/a&gt;.</source>
          <target state="translated">URLの解析に正規表現を使用する代わりに、通常はURLAPIを使用してブラウザーの組み込みURLパーサーを使用することをお&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL_API&quot;&gt;勧めします&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31e05bde158595118d55e0ce91c002d27d730c1f" translate="yes" xml:space="preserve">
          <source>Instead write &quot;foo&quot;:</source>
          <target state="translated">代わりに「foo」と書きます。</target>
        </trans-unit>
        <trans-unit id="c2466dca884b77085cade35f77be32e5976572af" translate="yes" xml:space="preserve">
          <source>Instead write just 1 without a zero and use at least one digit after a decimal point:</source>
          <target state="translated">その代わりに、ゼロを使わずに1だけを書き、小数点の後に最低1桁の数字を使います。</target>
        </trans-unit>
        <trans-unit id="5b2d66e7682b0dcb605d4bd8661e57ecd97726ab" translate="yes" xml:space="preserve">
          <source>Instead you have to use &lt;a href=&quot;../global_objects/object/keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/object/entries&quot;&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/a&gt;, to iterate over the properties or entries of an object.</source>
          <target state="translated">代わりに、&lt;a href=&quot;../global_objects/object/keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/object/entries&quot;&gt; &lt;code&gt;Object.entries&lt;/code&gt; &lt;/a&gt;を使用して、オブジェクトのプロパティまたはエントリを反復処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="e0dc4bb2296425f8a0793107a400c064a277518e" translate="yes" xml:space="preserve">
          <source>Instead you need to use a correct &lt;a href=&quot;../operators/comparison_operators&quot;&gt;comparison operator&lt;/a&gt;. For example:</source>
          <target state="translated">代わりに、正しい&lt;a href=&quot;../operators/comparison_operators&quot;&gt;比較演算子&lt;/a&gt;を使用する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="7532357558d58b8bad52cc03601e93e8920a39f9" translate="yes" xml:space="preserve">
          <source>Instead you need to use a correct &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;comparison operator&lt;/a&gt;. For example:</source>
          <target state="translated">代わりに、正しい&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;比較演算子&lt;/a&gt;を使用する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="26ecae46cb3e3f193194f48e69fb49562b84b075" translate="yes" xml:space="preserve">
          <source>Instead you need to use a plus sign for concatenation:</source>
          <target state="translated">その代わり、連結にはプラス記号を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="76292350e40ad23d7d412256c27e38fdaf0dd3a1" translate="yes" xml:space="preserve">
          <source>Instead you will need to use &lt;a href=&quot;../global_objects/string/indexof&quot;&gt;&lt;code&gt;String.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="translated">代わりに、たとえば、&lt;a href=&quot;../global_objects/string/indexof&quot;&gt; &lt;code&gt;String.prototype.indexOf()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e718841d850e49aba103de513cdaa93d90232f63" translate="yes" xml:space="preserve">
          <source>Instead, omit the &lt;code&gt;var&lt;/code&gt; keyword:</source>
          <target state="translated">代わりに、 &lt;code&gt;var&lt;/code&gt; キーワードを省略します。</target>
        </trans-unit>
        <trans-unit id="1757078b656e7c52f58307e98a78b7315354f37c" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;code&gt;function&lt;/code&gt; instead of &lt;code&gt;def&lt;/code&gt;:</source>
          <target state="translated">代わりに、 &lt;code&gt;def&lt;/code&gt; の代わりに &lt;code&gt;function&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="599aca68c4dc962e7acfb73fd721311eb7302ad6" translate="yes" xml:space="preserve">
          <source>Instead, use the &lt;a href=&quot;../operators/arithmetic_operators#Addition&quot;&gt;+ operator&lt;/a&gt;, a backslash, or &lt;a href=&quot;../template_literals&quot;&gt;template literals&lt;/a&gt;. The &lt;code&gt;+&lt;/code&gt; operator variant looks like this:</source>
          <target state="translated">代わりに、&lt;a href=&quot;../operators/arithmetic_operators#Addition&quot;&gt;+演算子&lt;/a&gt;、バックスラッシュ、または&lt;a href=&quot;../template_literals&quot;&gt;テンプレートリテラルを使用してください&lt;/a&gt;。 &lt;code&gt;+&lt;/code&gt; のこのようなオペレータのバリアントルックス：</target>
        </trans-unit>
        <trans-unit id="4feb09025f8ee92644b05f5d28aa4adb7bc126b7" translate="yes" xml:space="preserve">
          <source>Instead, use the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Addition&quot;&gt;+ operator&lt;/a&gt;, a backslash, or &lt;a href=&quot;../template_literals&quot;&gt;template literals&lt;/a&gt;. The &lt;code&gt;+&lt;/code&gt; operator variant looks like this:</source>
          <target state="translated">代わりに、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Addition&quot;&gt;+演算子&lt;/a&gt;、円記号、または&lt;a href=&quot;../template_literals&quot;&gt;テンプレートリテラルを使用してください&lt;/a&gt;。 &lt;code&gt;+&lt;/code&gt; のこのようなオペレータのバリアントルックス：</target>
        </trans-unit>
        <trans-unit id="9fbc895f8d9aa2582102b700c1698001202a6907" translate="yes" xml:space="preserve">
          <source>Instead, use the&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt; Promise.resolve()&lt;/a&gt; or &lt;a href=&quot;../global_objects/promise/reject&quot;&gt;Promise.reject()&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Method_(computer_programming)#Static_methods&quot;&gt;static methods&lt;/a&gt;:</source>
          <target state="translated">代わりに、&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;Promise.resolve（）&lt;/a&gt;または&lt;a href=&quot;../global_objects/promise/reject&quot;&gt;Promise.reject（）&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Method_(computer_programming)#Static_methods&quot;&gt;静的メソッドを使用します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="691e0102b6c4ff1f7d6b4b79971b501f00d71a45" translate="yes" xml:space="preserve">
          <source>Int16Array</source>
          <target state="translated">Int16Array</target>
        </trans-unit>
        <trans-unit id="0c9c8691e93fc3ce025dc71a355d7393d4850061" translate="yes" xml:space="preserve">
          <source>Int16Array.length</source>
          <target state="translated">Int16Array.length</target>
        </trans-unit>
        <trans-unit id="5c193dd46f10dac764d5258087bf039ad767fbce" translate="yes" xml:space="preserve">
          <source>Int32Array</source>
          <target state="translated">Int32Array</target>
        </trans-unit>
        <trans-unit id="f26c93914721585282e868e1c2ebee5732099508" translate="yes" xml:space="preserve">
          <source>Int32Array.length</source>
          <target state="translated">Int32Array.length</target>
        </trans-unit>
        <trans-unit id="e088a2144c05ba06fd761a7dbefbb84d2fc79069" translate="yes" xml:space="preserve">
          <source>Int8Array</source>
          <target state="translated">Int8Array</target>
        </trans-unit>
        <trans-unit id="10b20c86b339c682e7d8ffa6aba23f3f2f096672" translate="yes" xml:space="preserve">
          <source>Int8Array.length</source>
          <target state="translated">Int8Array.length</target>
        </trans-unit>
        <trans-unit id="1105090c6c0a2edf92fa65478c36a65f5ad15cbc" translate="yes" xml:space="preserve">
          <source>Integer range for &lt;code&gt;Number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 整数範囲</target>
        </trans-unit>
        <trans-unit id="1d12bfc6efb01cb013ad7062520bad116239a06a" translate="yes" xml:space="preserve">
          <source>Integer range for Number</source>
          <target state="translated">数値の整数範囲</target>
        </trans-unit>
        <trans-unit id="c73bb4b5b8345a476d2718ae49ba14176bceb702" translate="yes" xml:space="preserve">
          <source>Integer specifying a limit on the number of splits to be found. The &lt;code&gt;[@@split]()&lt;/code&gt; method still splits on every match of &lt;code&gt;this&lt;/code&gt; RegExp pattern (or, in the Syntax above, &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt;), until the number of split items match the &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; or the string falls short of &lt;code&gt;this&lt;/code&gt; pattern.</source>
          <target state="translated">検出される分割数の制限を指定する整数。 &lt;code&gt;[@@split]()&lt;/code&gt; メソッドは、依然としてのすべての一致に分割し &lt;code&gt;this&lt;/code&gt; 正規表現パターン（又は、上記の構文で、 &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; 分割アイテムの数が一致するまで、） &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; 、または文字列がを下回る &lt;code&gt;this&lt;/code&gt; パターン。</target>
        </trans-unit>
        <trans-unit id="7c58c51c392fd6e958ce0e7867611f13bdeb40ff" translate="yes" xml:space="preserve">
          <source>Integer specifying a limit on the number of splits to be found. When this parameter is provided, the &lt;code&gt;split()&lt;/code&gt; method splits the string at each occurrence of the specified &lt;code&gt;separator&lt;/code&gt; but stops when &lt;code&gt;limit&lt;/code&gt; entries have been placed into the array. It may still contain fewer entries than &lt;code&gt;limit&lt;/code&gt; if the end of the string is reached before the specified limit is reached. The left-over text is not returned in the new array.</source>
          <target state="translated">検索する分割数の制限を指定する整数。このパラメーターを指定すると、 &lt;code&gt;split()&lt;/code&gt; メソッドは、指定された &lt;code&gt;separator&lt;/code&gt; が出現するたびに文字列を分割しますが、配列に &lt;code&gt;limit&lt;/code&gt; エントリーが配置されると停止します。指定された制限に達する前に文字列の終わりに達した場合、 &lt;code&gt;limit&lt;/code&gt; よりも少ないエントリが含まれる可能性があります。残ったテキストは新しい配列に返されません。</target>
        </trans-unit>
        <trans-unit id="40f9b7d1768a1e02150ecacea6dc02e42357f890" translate="yes" xml:space="preserve">
          <source>Integer value representing the day of the month.</source>
          <target state="translated">月の曜日を表す整数値です。</target>
        </trans-unit>
        <trans-unit id="9bcbe074de1314a8090bd96f91252df74c70b0e7" translate="yes" xml:space="preserve">
          <source>Integer value representing the hour of the day.</source>
          <target state="translated">1日の時間を表す整数値です。</target>
        </trans-unit>
        <trans-unit id="34cf13846246cef5d1c62df7a0b15451169bda90" translate="yes" xml:space="preserve">
          <source>Integer value representing the millisecond segment of a time.</source>
          <target state="translated">時間のミリ秒単位を表す整数値です。</target>
        </trans-unit>
        <trans-unit id="241a7a4eb2efe8cc61b6dd45dbfef2428df56460" translate="yes" xml:space="preserve">
          <source>Integer value representing the minute segment of a time.</source>
          <target state="translated">時刻の分単位を表す整数値です。</target>
        </trans-unit>
        <trans-unit id="be02731127495b3b13396f2468f942ddd732796e" translate="yes" xml:space="preserve">
          <source>Integer value representing the month, beginning with 0 for January to 11 for December.</source>
          <target state="translated">1月は0から12月は11までの月を表す整数値。</target>
        </trans-unit>
        <trans-unit id="dbce99ca6771dbb1b8cb6588d10e62f7b1e9d10d" translate="yes" xml:space="preserve">
          <source>Integer value representing the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored (Unix Epoch; but consider that most Unix timestamp functions count in seconds).</source>
          <target state="translated">1970 年 1 月 1 日 00:00:00:00 UTC からのミリ秒数を表す整数値で、うるう秒は無視されます (Unix Epoch;しかし、ほとんどの Unix タイムスタンプ関数は秒単位でカウントすることを考慮してください)。</target>
        </trans-unit>
        <trans-unit id="83e39e42a0a037d33ecb1c8a3c5eea08f0b99cf3" translate="yes" xml:space="preserve">
          <source>Integer value representing the second segment of a time.</source>
          <target state="translated">時間の2番目のセグメントを表す整数値です。</target>
        </trans-unit>
        <trans-unit id="5db4d14c7dc17afe340582090d55b7545c1b3eb0" translate="yes" xml:space="preserve">
          <source>Integer value representing the year. Values from 0 to 99 map to the years 1900 to 1999. See the &lt;a href=&quot;#Two_digit_years_map_to_1900_-_1999&quot;&gt;example below&lt;/a&gt;.</source>
          <target state="translated">年を表す整数値。0〜99の値は、1900〜1999年にマッピングされ&lt;a href=&quot;#Two_digit_years_map_to_1900_-_1999&quot;&gt;ます&lt;/a&gt;。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="f71c075259752a2939bdd6faa004b91f60e192a1" translate="yes" xml:space="preserve">
          <source>Integers with arbitrary precision: &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">任意精度の整数：&lt;a href=&quot;bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a04591ed8cd35a609e53970d909ddd65bdd9925c" translate="yes" xml:space="preserve">
          <source>Interceptions</source>
          <target state="translated">Interceptions</target>
        </trans-unit>
        <trans-unit id="d68324d2f9cb7da0deed981cf558925381f4aba7" translate="yes" xml:space="preserve">
          <source>InternalError: too much recursion</source>
          <target state="translated">InternalError:再帰が多すぎる</target>
        </trans-unit>
        <trans-unit id="6e5a8eb19bb596773f3a9570412498f21d3b1c30" translate="yes" xml:space="preserve">
          <source>Internally calls &lt;code&gt;Promise.prototype.then&lt;/code&gt; on the object upon which is called, passing the parameters &lt;code&gt;undefined&lt;/code&gt; and the &lt;code&gt;onRejected&lt;/code&gt; handler received; then returns the value of that call (which is a &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Promise.prototype.then&lt;/code&gt; れたオブジェクトで内部的にPromise.prototype.thenを呼び出し、パラメーターを &lt;code&gt;undefined&lt;/code&gt; に渡して &lt;code&gt;onRejected&lt;/code&gt; ハンドラーを受け取ります。次に、その呼び出しの値（&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;）を返します。</target>
        </trans-unit>
        <trans-unit id="a01e8a33df41e96537ebd6e4fa7dbce634312754" translate="yes" xml:space="preserve">
          <source>Internally calls &lt;code&gt;Promise.prototype.then&lt;/code&gt; on the object upon which it was called, passing the parameters &lt;code&gt;undefined&lt;/code&gt; and the received &lt;code&gt;&lt;var&gt;onRejected&lt;/var&gt;&lt;/code&gt; handler. Returns the value of that call, which is a &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">内部的には、 &lt;code&gt;Promise.prototype.then&lt;/code&gt; れたオブジェクトでPromise.prototype.thenを呼び出し、パラメーター &lt;code&gt;undefined&lt;/code&gt; と受信した &lt;code&gt;&lt;var&gt;onRejected&lt;/var&gt;&lt;/code&gt; ハンドラーを渡します。その呼び出しの値を返します。これは&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="76d5733b82b9b85e7c7c9538c8b1cbf395dc743e" translate="yes" xml:space="preserve">
          <source>Internet Explorer</source>
          <target state="translated">インターネットエクスプローラ</target>
        </trans-unit>
        <trans-unit id="28e5441a7bdfedada4425bf69cae741f24bb602b" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8 implemented a &lt;code&gt;Object.defineProperty()&lt;/code&gt; method that could &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd229916%28VS.85%29.aspx&quot;&gt;only be used on DOM objects&lt;/a&gt;. A few things need to be noted:</source>
          <target state="translated">Internet Explorer 8は、&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd229916%28VS.85%29.aspx&quot;&gt;DOMオブジェクトでのみ使用&lt;/a&gt;できる &lt;code&gt;Object.defineProperty()&lt;/code&gt; メソッドを実装しました。注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="5790aa85105b2f707aa89140c69ddea48c4d6e3e" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8 specific notes</source>
          <target state="translated">Internet Explorer 8固有の注意事項</target>
        </trans-unit>
        <trans-unit id="4138084098c5ad0c43aa900db4e2093e03cbf674" translate="yes" xml:space="preserve">
          <source>Interrupt a function</source>
          <target state="translated">関数の割り込み</target>
        </trans-unit>
        <trans-unit id="148008a6c97111d9a4baac98fac041378bd84ebd" translate="yes" xml:space="preserve">
          <source>Intl</source>
          <target state="translated">Intl</target>
        </trans-unit>
        <trans-unit id="9fec477cb4348073d98179a98fcd20fd16c1b51a" translate="yes" xml:space="preserve">
          <source>Intl Plural Rules Draft</source>
          <target state="translated">国際複数形規則案</target>
        </trans-unit>
        <trans-unit id="691a439705b6454b10075bcadfd1eba82e0809bf" translate="yes" xml:space="preserve">
          <source>Intl.Collator</source>
          <target state="translated">Intl.Collator</target>
        </trans-unit>
        <trans-unit id="94effe562809ae6b476c47a05969b7d808a1b064" translate="yes" xml:space="preserve">
          <source>Intl.Collator.prototype</source>
          <target state="translated">Intl.Collator.prototype</target>
        </trans-unit>
        <trans-unit id="0b377b74eeb9851f1e25bb146f28a1f051d72446" translate="yes" xml:space="preserve">
          <source>Intl.Collator.supportedLocalesOf</source>
          <target state="translated">Intl.Collator.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="91770c02e353a04997b7e8198eb99e13c00635b2" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat</source>
          <target state="translated">Intl.DateTimeFormat</target>
        </trans-unit>
        <trans-unit id="6f720195e10d50c2f6666c80ded510eb7e91ee56" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat.prototype</source>
          <target state="translated">Intl.DateTimeFormat.prototype</target>
        </trans-unit>
        <trans-unit id="8c35054313946594df544a441084c18f481dc900" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat.supportedLocalesOf</source>
          <target state="translated">Intl.DateTimeFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="7267adddab78d6c517f39c7fbcf74e8abc940038" translate="yes" xml:space="preserve">
          <source>Intl.NumberFormat</source>
          <target state="translated">Intl.NumberFormat</target>
        </trans-unit>
        <trans-unit id="3d26a08d98ebcd5d28de6ddf3c2bd9cb829194a0" translate="yes" xml:space="preserve">
          <source>Intl.NumberFormat.prototype</source>
          <target state="translated">Intl.NumberFormat.prototype</target>
        </trans-unit>
        <trans-unit id="607ba4bc780b223d3fd5127334576ba2f8e0667c" translate="yes" xml:space="preserve">
          <source>Intl.NumberFormat.supportedLocalesOf</source>
          <target state="translated">Intl.NumberFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="66c7f57d39868752ebca01af0acb783a59f9ca74" translate="yes" xml:space="preserve">
          <source>Intl.collator.compare</source>
          <target state="translated">Intl.collator.compare</target>
        </trans-unit>
        <trans-unit id="9236ad9d72ffabd8ab8b1fdd93b3ae2fe0889b2d" translate="yes" xml:space="preserve">
          <source>Intl.collator.resolvedOptions</source>
          <target state="translated">Intl.collator.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="ac6e598b10bdd85f1d5e69697d5f02158893d3a3" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.format</source>
          <target state="translated">Intl.dateTimeFormat.format</target>
        </trans-unit>
        <trans-unit id="79234597f72df02f1a94d543bde865a99bd7d684" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.formatToParts</source>
          <target state="translated">Intl.dateTimeFormat.formatToParts</target>
        </trans-unit>
        <trans-unit id="904c6383f067aec078a7b1768309a99adb54dfca" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.resolvedOptions</source>
          <target state="translated">Intl.dateTimeFormat.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="091fff844313d48a74de1aab92c22d59e6263ad4" translate="yes" xml:space="preserve">
          <source>Intl.getCanonicalLocales</source>
          <target state="translated">Intl.getCanonicalLocales</target>
        </trans-unit>
        <trans-unit id="461a6cbec9e5f4d76bf0dcce35f41b5fae08133d" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.format</source>
          <target state="translated">Intl.numberFormat.format</target>
        </trans-unit>
        <trans-unit id="0244be6b0c3a6a82ba4428fb87fd56189351f3d2" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.formatToParts</source>
          <target state="translated">Intl.numberFormat.formatToParts</target>
        </trans-unit>
        <trans-unit id="e2d465b50d59450e9d5c5b8344aa05c1fd17b8ed" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.resolvedOptions</source>
          <target state="translated">Intl.numberFormat.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="0f821397d0f52bfe785a3b5ae0994d5665808b0d" translate="yes" xml:space="preserve">
          <source>Introduced in Gecko 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30). Functions declared in the function body cannot be referred to inside the outer function]s default parameters. If attempted, a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; is thrown. Default parameters are always executed first, so function declarations inside the function body evaluate afterwards.</source>
          <target state="translated">Gecko 33（Firefox 33 / Thunderbird 33 / SeaMonkey 2.30）で導入されました。関数本体で宣言された関数は、外部関数のデフォルトパラメータ内で参照できません。実行しようとすると、&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;がスローされます。デフォルトのパラメーターは常に最初に実行されるため、関数本体内の関数宣言は後で評価されます。</target>
        </trans-unit>
        <trans-unit id="3c3fbd2398c4e535f509ed566c2214525cbf5078" translate="yes" xml:space="preserve">
          <source>Introduction to Object-Oriented JavaScript</source>
          <target state="translated">オブジェクト指向JavaScript入門</target>
        </trans-unit>
        <trans-unit id="8e006f5d6c51e5f500e63738a7a4e5ab708ef28b" translate="yes" xml:space="preserve">
          <source>Introduction to source maps &amp;ndash; HTML5 rocks</source>
          <target state="translated">ソースマップの概要&amp;ndash; HTML5はすばらしい</target>
        </trans-unit>
        <trans-unit id="685d8b8a451d5c25429cf00e02a70396ec23ea94" translate="yes" xml:space="preserve">
          <source>Introduction: &lt;a href=&quot;http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;The ECMAScript Internationalization API&lt;/a&gt;</source>
          <target state="translated">はじめに：&lt;a href=&quot;http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;ECMAScript国際化API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43c9754a8861b7fd0f8dd51ab243bdb722045151" translate="yes" xml:space="preserve">
          <source>Introduction: &lt;a href=&quot;https://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;The ECMAScript Internationalization API&lt;/a&gt;</source>
          <target state="translated">はじめに：&lt;a href=&quot;https://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;ECMAScript国際化API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d94a1b20a86da8d8ef52d86140d5faa7244a1b37" translate="yes" xml:space="preserve">
          <source>Invalid &lt;code&gt;for-of&lt;/code&gt; loop</source>
          <target state="translated">無効な &lt;code&gt;for-of&lt;/code&gt; ループ</target>
        </trans-unit>
        <trans-unit id="660272f83ac71948bccc6b24478abcb5e8309a01" translate="yes" xml:space="preserve">
          <source>Invalid JavaScript identifier as a property name</source>
          <target state="translated">プロパティ名としての JavaScript 識別子が無効です。</target>
        </trans-unit>
        <trans-unit id="6cb64cdbd8ca48ac355e5ba934792e50b7b643a3" translate="yes" xml:space="preserve">
          <source>Invalid array length</source>
          <target state="translated">無効な配列長</target>
        </trans-unit>
        <trans-unit id="2bb5db0093030ed959d9e116d255a162895d06b8" translate="yes" xml:space="preserve">
          <source>Invalid assignment left-hand side</source>
          <target state="translated">左側の無効な割り当て</target>
        </trans-unit>
        <trans-unit id="b7aa12cebc342348149a588c562fbe64f3283163" translate="yes" xml:space="preserve">
          <source>Invalid cases</source>
          <target state="translated">無効な場合</target>
        </trans-unit>
        <trans-unit id="9e0f593040b832479d554e779693995956176e29" translate="yes" xml:space="preserve">
          <source>Invalid const assignment</source>
          <target state="translated">無効な定数代入</target>
        </trans-unit>
        <trans-unit id="3f45d8ccffe75e10e46696189989b5121bdc235b" translate="yes" xml:space="preserve">
          <source>Invalid date</source>
          <target state="translated">無効な日付</target>
        </trans-unit>
        <trans-unit id="1ee4d92944915ed61af938fd4b4fb38eb5ca730a" translate="yes" xml:space="preserve">
          <source>Invalid for-in initializer</source>
          <target state="translated">無効な for-in イニシャライザ</target>
        </trans-unit>
        <trans-unit id="a1afb0a15ce516af40f158e64da36cf6e02266c4" translate="yes" xml:space="preserve">
          <source>Invalid for-of initializer</source>
          <target state="translated">無効な for-of イニシャライザ</target>
        </trans-unit>
        <trans-unit id="a0a196b58c85a10ea9cf485d0b56fe28ac2f61a4" translate="yes" xml:space="preserve">
          <source>Invalid input:</source>
          <target state="translated">無効な入力です。</target>
        </trans-unit>
        <trans-unit id="3a4b82ac678593606aa369204a68abe42e54f0ff" translate="yes" xml:space="preserve">
          <source>Invalid octal numbers</source>
          <target state="translated">無効な8進数</target>
        </trans-unit>
        <trans-unit id="d6e64d0ec42180ad42843b3147e19fa8b02da721" translate="yes" xml:space="preserve">
          <source>Invalid redeclaration</source>
          <target state="translated">無効な再宣言</target>
        </trans-unit>
        <trans-unit id="3390616cafac7ff314d6aadaf20e48034cbb3314" translate="yes" xml:space="preserve">
          <source>Invariants</source>
          <target state="translated">Invariants</target>
        </trans-unit>
        <trans-unit id="4e1321c7e45e4c40761381b9b683387d488bf32f" translate="yes" xml:space="preserve">
          <source>Inverts the bits of its operand.</source>
          <target state="translated">オペランドのビットを反転させます。</target>
        </trans-unit>
        <trans-unit id="5fd458722c8cfcbb53c39ea1f3c5645c09338076" translate="yes" xml:space="preserve">
          <source>Invoked through call or apply</source>
          <target state="translated">呼び出しまたは適用によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="32a22853078d6023f226d27e51d0b2a6e5b9ae81" translate="yes" xml:space="preserve">
          <source>Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.</source>
          <target state="translated">利用可能なデバッグ機能を起動します。利用可能なデバッグ機能がない場合、このステートメントは何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="546fbb50ff089e3855d79b13d86e4a369e5a842d" translate="yes" xml:space="preserve">
          <source>Invoking JavaScript &lt;code&gt;Date&lt;/code&gt; as a function (i.e., without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator) will return a string representing the current date and time.</source>
          <target state="translated">JavaScriptの &lt;code&gt;Date&lt;/code&gt; を関数として（つまり、&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子なしで）呼び出すと、現在の日付と時刻を表す文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="7bc5e46ab780fcbc7794152fa6c4870b7d727aa2" translate="yes" xml:space="preserve">
          <source>Invoking strict mode</source>
          <target state="translated">厳格モードの呼び出し</target>
        </trans-unit>
        <trans-unit id="208ae9750e5d18010716a63f7a64c8864b8720b3" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor as a function (without using the &lt;code&gt;new&lt;/code&gt; operator) has the same effect as invoking it as a constructor.</source>
          <target state="translated">呼び出し &lt;code&gt;AsyncFunction&lt;/code&gt; の（使用せずに関数としてコンストラクタを &lt;code&gt;new&lt;/code&gt; オペレータ）がコンストラクタとしてそれを呼び出すのと同じ効果を有します。</target>
        </trans-unit>
        <trans-unit id="1f49636aa3cddb53862e739e488ae9fb9c6c0139" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;Function&lt;/code&gt; constructor as a function (without using the &lt;code&gt;new&lt;/code&gt; operator) has the same effect as invoking it as a constructor.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; コンストラクターを関数として呼び出す（ &lt;code&gt;new&lt;/code&gt; 演算子を使用しない）ことは、コンストラクターとして呼び出すことと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="a09fdf87d82db4d13b9fdd5d76e4b7e7f19d7fac" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor as a function (without using the &lt;code&gt;new&lt;/code&gt; operator) has the same effect as invoking it as a constructor.</source>
          <target state="translated">呼び出し &lt;code&gt;GeneratorFunction&lt;/code&gt; の（使用せずに関数としてコンストラクタを &lt;code&gt;new&lt;/code&gt; オペレータ）がコンストラクタとしてそれを呼び出すのと同じ効果を有します。</target>
        </trans-unit>
        <trans-unit id="b4cd7f60b4d184101c2a6bf4b757b7b2b30bac77" translate="yes" xml:space="preserve">
          <source>Is a generator object an iterator or an iterable?</source>
          <target state="translated">ジェネレータオブジェクトはイテレータかイテレート可能か?</target>
        </trans-unit>
        <trans-unit id="0b0d56ef77469a2f756007c6a62fa7926b600b31" translate="yes" xml:space="preserve">
          <source>Is a stateful, executable instance of a &lt;a href=&quot;webassembly/module&quot;&gt;WebAssembly.Module&lt;/a&gt;</source>
          <target state="translated">Is a stateful, executable instance of a &lt;a href=&quot;webassembly/module&quot;&gt;WebAssembly.Module&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="690a13704ccda7c99a1f2a9585cf62a8ecc1ef9e" translate="yes" xml:space="preserve">
          <source>Is the same function as the &lt;code&gt;values()&lt;/code&gt; function and returns a new &lt;code&gt;Iterator&lt;/code&gt; object that contains the values for each element in the &lt;code&gt;Set&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; 関数と同じ関数で、 &lt;code&gt;Set&lt;/code&gt; オブジェクトの各要素の値を挿入順に含む新しい &lt;code&gt;Iterator&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="237c366b14d4ac2c7ac8dcc981e25cf07610f224" translate="yes" xml:space="preserve">
          <source>Issue with &lt;code&gt;JSON.stringify()&lt;/code&gt; when serializing circular references</source>
          <target state="translated">循環参照をシリアル化するときの &lt;code&gt;JSON.stringify()&lt;/code&gt; の問題</target>
        </trans-unit>
        <trans-unit id="0fe883a4a2cebd3337cac0b6f63f321bc9cfbcf4" translate="yes" xml:space="preserve">
          <source>Issue with JSON.stringify() when serializing circular references</source>
          <target state="translated">循環参照をシリアライズする際の JSON.stringify()の問題</target>
        </trans-unit>
        <trans-unit id="5600fcf5422fc9dfe3b3d78fa586442113fe282e" translate="yes" xml:space="preserve">
          <source>Issue with plain &lt;code&gt;JSON.stringify&lt;/code&gt; for use as JavaScript</source>
          <target state="translated">JavaScriptとして使用するためのプレーンな &lt;code&gt;JSON.stringify&lt;/code&gt; の問題</target>
        </trans-unit>
        <trans-unit id="cfecb0665bc38a3d23f86eec2febbf45d4496177" translate="yes" xml:space="preserve">
          <source>Issue with plain JSON.stringify for use as JavaScript</source>
          <target state="translated">JavaScriptとして使用するためのプレーンなJSON.stringifyの問題</target>
        </trans-unit>
        <trans-unit id="b5f064f8234fa60048c058abe8b49b99a3a6d87a" translate="yes" xml:space="preserve">
          <source>It accepts three arguments:</source>
          <target state="translated">3つの引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="41203c0da0da22d05561ac067143a1455ee0fac2" translate="yes" xml:space="preserve">
          <source>It allows the code in the string passed to &lt;code&gt;runCodeWithDateFunction()&lt;/code&gt; to be minified.</source>
          <target state="translated">It allows the code in the string passed to &lt;code&gt;runCodeWithDateFunction()&lt;/code&gt; to be minified.</target>
        </trans-unit>
        <trans-unit id="00081e6a2ee8da25b0c2fa487f2293a0e3a9300f" translate="yes" xml:space="preserve">
          <source>It also avoids a problem if the magnitude of your numbers is huge. The largest number you can represent in JS's double floats is &lt;code&gt;Number.MAX_VALUE =&amp;nbsp;1.797...e+308&lt;/code&gt; . If your numbers are larger than about 1e154, taking the square of them will result in Infinity, demolishing your results. For example, &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) =&amp;nbsp;Infinity&lt;/code&gt; . If you use &lt;code&gt;hypot()&lt;/code&gt; instead, you get a good answer &lt;code&gt;Math.hypot(1e200, 1e200) =&amp;nbsp;1.4142...e+200&lt;/code&gt; . This is also true with very small numbers. &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) =&amp;nbsp;0&lt;/code&gt;, but &lt;code&gt;Math.hypot(1e-200, 1e-200) =&lt;/code&gt;&lt;code&gt;1.4142...e-200&lt;/code&gt;, a good answer.</source>
          <target state="translated">また、数値の規模が大きい場合にも問題を回避します。 JSのダブルフロートで表すことができる最大の数値は、 &lt;code&gt;Number.MAX_VALUE =&amp;nbsp;1.797...e+308&lt;/code&gt; です。数値が約1e154より大きい場合、それらの2乗を取ると無限になり、結果が解体されます。たとえば、 &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) =&amp;nbsp;Infinity&lt;/code&gt; です。代わりに &lt;code&gt;hypot()&lt;/code&gt; を使用すると、適切な答えが得られますMath.hypot（ &lt;code&gt;Math.hypot(1e200, 1e200) =&amp;nbsp;1.4142...e+200&lt;/code&gt; 。これは、非常に小さい数でも当てはまります。 &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) =&amp;nbsp;0&lt;/code&gt; ですが、 &lt;code&gt;Math.hypot(1e-200, 1e-200) =&lt;/code&gt; &lt;code&gt;1.4142...e-200&lt;/code&gt; -200）= 1.4142 ... e-200が良い答えです。</target>
        </trans-unit>
        <trans-unit id="e475453a8d4616b44db70ed2898a74507d1d08d9" translate="yes" xml:space="preserve">
          <source>It also means that variables declared inside the function body using &lt;code&gt;var&lt;/code&gt; will mask parameters of the same name, instead of the usual behavior of duplicate &lt;code&gt;var&lt;/code&gt; declarations having no effect.</source>
          <target state="translated">It also means that variables declared inside the function body using &lt;code&gt;var&lt;/code&gt; will mask parameters of the same name, instead of the usual behavior of duplicate &lt;code&gt;var&lt;/code&gt; declarations having no effect.</target>
        </trans-unit>
        <trans-unit id="046a89c09b8e69d7519433ee5f4799dde2a0f2f5" translate="yes" xml:space="preserve">
          <source>It also works when you put &lt;code&gt;default&lt;/code&gt; before all other &lt;code&gt;case&lt;/code&gt;s.</source>
          <target state="translated">It also works when you put &lt;code&gt;default&lt;/code&gt; before all other &lt;code&gt;case&lt;/code&gt; s.</target>
        </trans-unit>
        <trans-unit id="5c1ebb7ab8937cf2664e8c849a22e22823d62684" translate="yes" xml:space="preserve">
          <source>It also works when you put default before all other cases.</source>
          <target state="translated">また、他のすべてのケースの前にデフォルトを置くと動作します。</target>
        </trans-unit>
        <trans-unit id="898d6cff7f0d4ac02e7c8c72fea0f382f5f1a39e" translate="yes" xml:space="preserve">
          <source>It attempted to call a value from a function, but the value is not actually a function. Some code expects you to provide a function, but that didn't happen.</source>
          <target state="translated">関数から値を呼ぼうとしましたが、その値は実際には関数ではありません。一部のコードでは、関数を提供することを期待していますが、それは起こりませんでした。</target>
        </trans-unit>
        <trans-unit id="b2adb77288fe8601577f558b0c9e3989d99e0757" translate="yes" xml:space="preserve">
          <source>It can be a Function or other non-primitive value.</source>
          <target state="translated">関数やその他の非一次的な値を指定することができます。</target>
        </trans-unit>
        <trans-unit id="c48068ce741966c4d12a0279fea298e01c807447" translate="yes" xml:space="preserve">
          <source>It can be more obscure when using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures&lt;/a&gt;, or other constructs that use a lot of different parenthesis and curly brackets, for example.</source>
          <target state="translated">これは、使用しているときより曖昧にすることができ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;生命維持&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;クロージャ&lt;/a&gt;、または異なる括弧と中括弧の多くを使用する他の構造を、たとえば、。</target>
        </trans-unit>
        <trans-unit id="aaf4352228b453b336e8eafbf659e9e48282c4b5" translate="yes" xml:space="preserve">
          <source>It can be more obscure when using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures&lt;/a&gt;, or other constructs that use a lot of different parenthesis and curly brackets, for example.</source>
          <target state="translated">It can be more obscure when using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures&lt;/a&gt;, or other constructs that use a lot of different parenthesis and curly brackets, for example.</target>
        </trans-unit>
        <trans-unit id="637735e5f525f257cdcfa7d7c573a1134e3b31c0" translate="yes" xml:space="preserve">
          <source>It can have an identifier which is either a number or a string;</source>
          <target state="translated">数値または文字列のいずれかの識別子を持つことができます。</target>
        </trans-unit>
        <trans-unit id="fee2b94ebdffc711d03534a6c9c32859543eb863" translate="yes" xml:space="preserve">
          <source>It doesn't work if the string contains grapheme clusters, even when using a unicode aware split (use for example &lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esrever&lt;/a&gt; instead).</source>
          <target state="translated">文字列に書記素クラスターが含まれている場合、Unicode対応のスプリットを使用していても機能しません（たとえば、代わりに&lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esreverを&lt;/a&gt;使用してください）。</target>
        </trans-unit>
        <trans-unit id="f947e606472d4347ad32397429bfe2112731e5ac" translate="yes" xml:space="preserve">
          <source>It doesn't work if the string contains grapheme clusters, even when using a unicode-aware split. (Use, for example, &lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esrever&lt;/a&gt; instead.)</source>
          <target state="translated">It doesn't work if the string contains grapheme clusters, even when using a unicode-aware split. (Use, for example, &lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esrever&lt;/a&gt; instead.)</target>
        </trans-unit>
        <trans-unit id="a4fafc92e6281926700d4d162cec8f063e6ae134" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;not&lt;/em&gt; called for missing elements of the array; that is:</source>
          <target state="translated">It is &lt;em&gt;not&lt;/em&gt; called for missing elements of the array; that is:</target>
        </trans-unit>
        <trans-unit id="adef4106e76e6addc70a8d2ae997c1248d91d94f" translate="yes" xml:space="preserve">
          <source>It is a good idea to comment &lt;em&gt;intentional&lt;/em&gt; use of the empty statement, as it is not really obvious to distinguish from a normal semicolon.</source>
          <target state="translated">It is a good idea to comment &lt;em&gt;intentional&lt;/em&gt; use of the empty statement, as it is not really obvious to distinguish from a normal semicolon.</target>
        </trans-unit>
        <trans-unit id="10eb0a5f9478db379a0c234799a056177e982243" translate="yes" xml:space="preserve">
          <source>It is advisable to not use simple assignments in a conditional expression (such as &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt;), because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</source>
          <target state="translated">条件式（ &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt; ）で単純な割り当てを使用しないことをお勧めします。これは、コードをちらっと見たときに、割り当てが等価であると混同される可能性があるためです。たとえば、次のコードは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="b1f5b1660aed98af62b5049d964d12af0b3a267c" translate="yes" xml:space="preserve">
          <source>It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</source>
          <target state="translated">条件式の中で単純な代入を使用しないことをお勧めします。例えば、次のようなコードは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="24d3facbde01a9ba1b0055ecd1c1d62977eb59f1" translate="yes" xml:space="preserve">
          <source>It is almost always safer to provide an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, because there can be up to &lt;em&gt;four&lt;/em&gt; possible output types without &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">It is almost always safer to provide an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; , because there can be up to &lt;em&gt;four&lt;/em&gt; possible output types without &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; , as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="8e0b595c50396c3cdbc92c5f6b750e905ed42003" translate="yes" xml:space="preserve">
          <source>It is also possible to &quot;import/export&quot; from different modules in a parent module so that they are available to import from that module. In other words, one can create a single module concentrating various exports from various modules.</source>
          <target state="translated">また、親モジュール内の異なるモジュールからの「インポート/エクスポート」も可能で、そのモジュールからのインポートも可能です。言い換えれば、様々なモジュールからの様々なエクスポートを集約した一つのモジュールを作成することができます。</target>
        </trans-unit>
        <trans-unit id="bb4cc67af098b1db09d7c4c8d6064bf4903ec064" translate="yes" xml:space="preserve">
          <source>It is also possible to provide a name inside the definition in order to create a &lt;strong&gt;named&lt;/strong&gt; function expression:</source>
          <target state="translated">&lt;strong&gt;名前&lt;/strong&gt;付き関数式を作成するために、定義内に名前を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="d15511bc331dcf794b253aed11d5d6bc426cf771" translate="yes" xml:space="preserve">
          <source>It is also possible to use the default syntax with the ones seen above (namespace imports or named imports). In such cases, the default import will have to be declared first. For instance:</source>
          <target state="translated">上で見たもの(名前空間インポートや名前付きインポート)と一緒にデフォルトの構文を使用することも可能です。このような場合、デフォルトのインポートを最初に宣言しなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="af4edb990c5fdf727cafe82fdb0540d797482226" translate="yes" xml:space="preserve">
          <source>It is an array of bytes, often referred to in other languages as a &quot;byte array&quot;.You cannot directly manipulate the contents of an &lt;code&gt;ArrayBuffer&lt;/code&gt;; instead, you create one of the &lt;a href=&quot;typedarray&quot;&gt;typed array objects&lt;/a&gt; or a &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</source>
          <target state="translated">It is an array of bytes, often referred to in other languages as a &quot;byte array&quot;.You cannot directly manipulate the contents of an &lt;code&gt;ArrayBuffer&lt;/code&gt; ; instead, you create one of the &lt;a href=&quot;typedarray&quot;&gt;typed array objects&lt;/a&gt; or a &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt; object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</target>
        </trans-unit>
        <trans-unit id="e582cadd5e2af8a250319887c5b15dd0b445e4ca" translate="yes" xml:space="preserve">
          <source>It is common to use &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; in cases where you want to use the elements of an array as arguments to a function.</source>
          <target state="translated">It is common to use &lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; in cases where you want to use the elements of an array as arguments to a function.</target>
        </trans-unit>
        <trans-unit id="ccb9df029f10f1c4b5a120be3422d4cce76c0172" translate="yes" xml:space="preserve">
          <source>It is common to use &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply&lt;/code&gt;&lt;/a&gt; in cases where you want to use the elements of an array as arguments to a function.</source>
          <target state="translated">配列の要素を関数の引数として使用する場合は、&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply&lt;/code&gt; &lt;/a&gt;を使用するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="e47762cbcbb8539a041b86f5911c627bfe43782a" translate="yes" xml:space="preserve">
          <source>It is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors.</source>
          <target state="translated">コールバックを使用する際には、1 つの引数 (移動する要素)を指定するのが一般的です。一部の関数では、追加のオプション引数を取っていても、1つの引数で使用するのが一般的です。これらの習慣は、混乱を招くような動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="85416cea4b3eddb14fb95e0c0cb8577b27c9847a" translate="yes" xml:space="preserve">
          <source>It is important to consider the way default values of attributes are applied. There is often a difference between simply using dot notation to assign a value and using &lt;code&gt;Object.defineProperty()&lt;/code&gt;, as shown in the example below.</source>
          <target state="translated">属性のデフォルト値が適用される方法を考慮することが重要です。以下の例に示すように、値を割り当てるために単純にドット表記を使用することと &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用することの間には、しばしば違いがあります。</target>
        </trans-unit>
        <trans-unit id="c1db1351f7a897a851f490253a603fa473ce35df" translate="yes" xml:space="preserve">
          <source>It is important to note the following:</source>
          <target state="translated">以下の点に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="d8dda9f554abc422ea39aabc120a7ac0d13f88f6" translate="yes" xml:space="preserve">
          <source>It is not possible to know reflectively whether a particular object implements the iterator protocol, however it is easy to create an object that satisfies both the iterator and iterable protocols (as shown in the example below). Doing so allows an iterator to be consumed by the various syntaxes expecting iterables. Thus it is rarely desireable to implement the iterator protocol without also implementing iterable.</source>
          <target state="translated">特定のオブジェクトがイテレータプロトコルを実装しているかどうかを反射的に知ることはできませんが、イテレータプロトコルとイテレート可能プロトコルの両方を満たすオブジェクトを簡単に作成することができます(以下の例のように)。そうすることで、イテレータがイテレート可能性を期待する様々な構文によって消費されるようになります。したがって、イテレータプロトコルを実装してもイテレータブルを実装せずにイテレータプロトコルを実装することを望むことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="bbba11b1cf2f60a0f1e56080fd83cc82be1fb642" translate="yes" xml:space="preserve">
          <source>It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it &lt;em&gt;is&lt;/em&gt; possible to use a getter and a setter in conjunction to create a type of pseudo-property.</source>
          <target state="translated">It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it &lt;em&gt;is&lt;/em&gt; possible to use a getter and a setter in conjunction to create a type of pseudo-property.</target>
        </trans-unit>
        <trans-unit id="34110370fd48f5a59887b0bd5220e344fd6f9b8c" translate="yes" xml:space="preserve">
          <source>It is not recommended to use &lt;code&gt;Date.parse&lt;/code&gt; as until ES5, parsing of strings was entirely implementation dependent. There are still many differences in how different hosts parse date strings, therefore date strings should be manually parsed (a library can help if many different formats are to be accommodated).</source>
          <target state="translated">ES5まで、文字列の解析は完全に実装に依存していたため、 &lt;code&gt;Date.parse&lt;/code&gt; の使用はお勧めしません。異なるホストが日付文字列を解析する方法にはまだ多くの違いがあるため、日付文字列は手動で解析する必要があります（多くの異なる形式に対応する場合は、ライブラリが役立ちます）。</target>
        </trans-unit>
        <trans-unit id="73dcdfa951545bec950ab075835e1130523dd188" translate="yes" xml:space="preserve">
          <source>It is possible to change this behaviour by handling possible rejections:</source>
          <target state="translated">拒否の可能性がある場合の処理によって、この動作を変更することができます。</target>
        </trans-unit>
        <trans-unit id="1dc88e3e25b3ab537eecc21b53f748a8be78bdb7" translate="yes" xml:space="preserve">
          <source>It is possible to have a default &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; (whether it is an object, a function, a class, etc.). The &lt;code&gt;import&lt;/code&gt; statement may then be used to import such defaults.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;（オブジェクト、関数、クラスなど）を持つことが可能です。次に、 &lt;code&gt;import&lt;/code&gt; 文を使用して、このようなデフォルトをインポートできます。</target>
        </trans-unit>
        <trans-unit id="b5bd6a46ab029adb771c2868831032b213e42613" translate="yes" xml:space="preserve">
          <source>It is possible to redefine the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of arrays, subject to the usual redefinition restrictions. (The &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property is initially non-configurable, non-enumerable, and writable. Thus on an unaltered array, it's possible to change the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property's value or to make it non-writable. It is not allowed to change its enumerability or configurability, or if it is non-writable to change its value or writability.) However, not all browsers permit this redefinition.</source>
          <target state="translated">通常の再定義の制限に従って、配列の&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを再定義することが可能です。（&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティは、最初は構成不可能、列挙不可能、および書き込み可能です。したがって、変更されていない配列では、&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティの値を変更したり、書き込み不可能にしたりできます。列挙可能性または構成可能性を変更することはできません。または、その値または書き込み可能性を変更することが書き込み不可の場合。）ただし、すべてのブラウザがこの再定義を許可するわけではありません。</target>
        </trans-unit>
        <trans-unit id="aba7c66856ef3424f32c864a39cb61a9c7d5f9b7" translate="yes" xml:space="preserve">
          <source>It is rather rare to use &lt;code&gt;NaN&lt;/code&gt; in a program. It is the returned value when &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; functions fail (&lt;code&gt;Math.sqrt(-1)&lt;/code&gt;) or when a function trying to parse a number fails (&lt;code&gt;parseInt(&quot;blabla&quot;)&lt;/code&gt;).</source>
          <target state="translated">プログラムで &lt;code&gt;NaN&lt;/code&gt; を使用することはかなりまれです。これは、&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;関数が失敗した場合（ &lt;code&gt;Math.sqrt(-1)&lt;/code&gt; ）または数値を解析しようとしている関数が失敗した場合（ &lt;code&gt;parseInt(&quot;blabla&quot;)&lt;/code&gt; ）の戻り値です。</target>
        </trans-unit>
        <trans-unit id="8d807a334bdce03af9753e48784800ecd42f96a6" translate="yes" xml:space="preserve">
          <source>It is sometime useful to have a stricter way to parse float values, regular expressions can help :</source>
          <target state="translated">浮動小数点以下の値を解析するために、より厳密な方法があると便利な場合もありますが、正規表現を使用すると便利です。</target>
        </trans-unit>
        <trans-unit id="a9028e6cb1ea88953f0056159fb43c778bc96771" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to have a stricter way to parse int values. Regular expressions can help:</source>
          <target state="translated">intの値を解析するために、より厳密な方法があると便利な場合があります。正規表現が役立ちます。</target>
        </trans-unit>
        <trans-unit id="dbdea303761b144c9595974be207942a85ce77f9" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to have a stricter way to parse integers.</source>
          <target state="translated">整数を解析するために、より厳密な方法があると便利なことがあります。</target>
        </trans-unit>
        <trans-unit id="788331654327003b9a3e20533f1dd22dd0adf40e" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;assignment operators&lt;/a&gt; (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;) are used instead of the &lt;code&gt;concat()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;concat()&lt;/code&gt; メソッドの代わりに&lt;a href=&quot;../../operators/assignment_operators&quot;&gt;代入演算子&lt;/a&gt;（ &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;+=&lt;/code&gt; ）を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="e8a1c18ba9110166bc671d87e12d9f825477f805" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operators&lt;/a&gt; (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;) are used instead of the &lt;code&gt;concat()&lt;/code&gt; method.</source>
          <target state="translated">It is strongly recommended that the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operators&lt;/a&gt; ( &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; ) are used instead of the &lt;code&gt;concat()&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="f64ce9678fde9b6ccb870d85fc1f1595c83b8450" translate="yes" xml:space="preserve">
          <source>It is usually safer to provide an initial value because there are three possible outputs without &lt;code&gt;initialValue&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">次の例に示すように、 &lt;code&gt;initialValue&lt;/code&gt; なしで3つの可能な出力があるため、通常は初期値を指定する方が安全です。</target>
        </trans-unit>
        <trans-unit id="f39e377b324a5c9f08b33569e89ef7d1ecc19a5e" translate="yes" xml:space="preserve">
          <source>It may be most practically used for debugging purposes, being an easy way to check the properties of an object (by outputting to the console or otherwise). Although arrays are often more practical for storing data, in situations where a key-value pair is preferred for working with data (with properties acting as the &quot;key&quot;), there may be instances where you want to check if any of those keys hold a particular value.</source>
          <target state="translated">これは、オブジェクトのプロパティを(コンソールに出力するなどして)簡単にチェックする方法であり、デバッグ目的で最も実用的に使われるかもしれません。データを格納するには配列の方が実用的な場合が多いですが、データを扱うにはキーと値のペアが好まれる状況では(プロパティが &quot;キー &quot;として機能します)、それらのキーが特定の値を保持しているかどうかをチェックしたい場合があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="dae584578a863d7bff34ff1b67e5fef9249f60d6" translate="yes" xml:space="preserve">
          <source>It may seem strange to have a special exception-related clause that executes &lt;strong&gt;regardless&lt;/strong&gt; of whether there is an exception, but this construct actually does serve a purpose. The important point is not that the &lt;code&gt;finally&lt;/code&gt;-clause always executes, but rather that ordinary code following a &lt;code&gt;try..catch&lt;/code&gt; does not.</source>
          <target state="translated">例外があるかどうかに&lt;strong&gt;関係なく&lt;/strong&gt;実行される特別な例外関連の句があるのは奇妙に思えるかもしれませんが、この構造は実際には目的を果たします。重要な点は、 &lt;code&gt;finally&lt;/code&gt; -clauseが常に実行されるということではなく、 &lt;code&gt;try..catch&lt;/code&gt; に続く通常のコードでは実行されないということです。</target>
        </trans-unit>
        <trans-unit id="641a1f1bfb9cdea9572c9f6c64ca77cd267d097a" translate="yes" xml:space="preserve">
          <source>It might be tempting to use &lt;code&gt;Math.round()&lt;/code&gt; to accomplish that, but doing so would cause your random numbers to follow a non-uniform distribution, which may not be acceptable for your needs.</source>
          <target state="translated">それを達成するために &lt;code&gt;Math.round()&lt;/code&gt; を使用するのは魅力的かもしれませんが、そうすると、乱数が不均一な分布に従うことになり、ニーズに受け入れられない可能性があります。</target>
        </trans-unit>
        <trans-unit id="e9d68bf98ccf8c0937c95ad24485ddb23a78f60f" translate="yes" xml:space="preserve">
          <source>It might just be an oversight, carefully check all you parenthesis in your code.</source>
          <target state="translated">それはちょうど見落としかもしれませんが、慎重にあなたのコードのすべてのあなたの括弧をチェックしてください。</target>
        </trans-unit>
        <trans-unit id="09d6a7960d6344daf110a07aa0f46e23fd7619dd" translate="yes" xml:space="preserve">
          <source>It must have exactly one parameter (see &lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;Incompatible &lt;abbr&gt;ES5&lt;/abbr&gt; change: literal getter and setter functions must now have exactly zero or one arguments&lt;/a&gt; for more information);</source>
          <target state="translated">パラメータは1つのみである必要があります（&lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;互換性のない&lt;abbr&gt;ES5の&lt;/abbr&gt;変更を&lt;/a&gt;ご覧ください。詳細については、リテラルゲッターおよびセッター関数の引数が0個または1個でなければなりません）。</target>
        </trans-unit>
        <trans-unit id="e0d34231d840869638e3aa9002ecd024ffbeb1d0" translate="yes" xml:space="preserve">
          <source>It must have exactly zero parameters (see &lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;Incompatible &lt;abbr&gt;ES5&lt;/abbr&gt; change: literal getter and setter functions must now have exactly zero or one arguments&lt;/a&gt; for more information);</source>
          <target state="translated">正確にゼロのパラメーターが必要です（&lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;互換性のない&lt;abbr&gt;ES5の&lt;/abbr&gt;変更を&lt;/a&gt;参照：リテラルゲッターおよびセッター関数は、詳細については正確にゼロまたは1つの引数を持つ必要があります）;</target>
        </trans-unit>
        <trans-unit id="657ebce6cc38bce8085a97e3ff70384ec64422e5" translate="yes" xml:space="preserve">
          <source>It must not appear in an object literal with another &lt;code&gt;get&lt;/code&gt; or with a data entry for the same property (&lt;code&gt;{ get x() { }, get x() { } }&lt;/code&gt; and &lt;code&gt;{ x: ..., get x() { } }&lt;/code&gt; are forbidden).</source>
          <target state="translated">別の &lt;code&gt;get&lt;/code&gt; を持つオブジェクトリテラル、または同じプロパティのデータエントリ（ &lt;code&gt;{ get x() { }, get x() { } }&lt;/code&gt; および &lt;code&gt;{ x: ..., get x() { } }&lt;/code&gt; は禁止されています）。</target>
        </trans-unit>
        <trans-unit id="05463fbb4aaf21f08a3ab5f26554235003d67ae9" translate="yes" xml:space="preserve">
          <source>It must not appear in an object literal with another &lt;code&gt;set&lt;/code&gt; or with a data entry for the same property.</source>
          <target state="translated">別の &lt;code&gt;set&lt;/code&gt; や同じプロパティのデータエントリを持つオブジェクトリテラルに表示することはできません。</target>
        </trans-unit>
        <trans-unit id="de37cc0fc3c6bed823b6d0ee0f3b91c3251ed188" translate="yes" xml:space="preserve">
          <source>It returns an object with a &lt;code&gt;url&lt;/code&gt; property indicating the base URL of the module. This will either be the URL from which the script was obtained, for external scripts, or the document base URL of the containing document, for inline scripts.</source>
          <target state="translated">モジュールのベースURLを示す &lt;code&gt;url&lt;/code&gt; プロパティを持つオブジェクトを返します。これは、外部スクリプトの場合はスクリプトの取得元のURL、またはインラインスクリプトの場合は含まれているドキュメントのドキュメントベースURLのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="bb2fc09f8688c1fd395eb3e9195d969486229a89" translate="yes" xml:space="preserve">
          <source>It should be noted that &lt;a href=&quot;operator_precedence&quot;&gt;the precedence&lt;/a&gt; of the &lt;code&gt;void&lt;/code&gt; operator should be taken into account and that parentheses can help clarify the resolution of the expression following the &lt;code&gt;void&lt;/code&gt; operator:</source>
          <target state="translated">It should be noted that &lt;a href=&quot;operator_precedence&quot;&gt;the precedence&lt;/a&gt; of the &lt;code&gt;void&lt;/code&gt; operator should be taken into account and that parentheses can help clarify the resolution of the expression following the &lt;code&gt;void&lt;/code&gt; operator:</target>
        </trans-unit>
        <trans-unit id="0ea4eb774c6833ffc646efd58e60903a08815e06" translate="yes" xml:space="preserve">
          <source>It should be noted that the maximum &lt;code&gt;Date&lt;/code&gt; is not of the same value as the maximum safe integer (&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; is 9,007,199,254,740,991). Instead, it is defined in ECMA-262 that a maximum of &amp;plusmn;100,000,000 (one hundred million) days relative to January 1, 1970 UTC (that is, April 20, 271821 BCE ~ September 13, 275760 CE) can be represented by the standard &lt;code&gt;Date&lt;/code&gt; object (equivalent to &amp;plusmn;8,640,000,000,000,000 milliseconds).</source>
          <target state="translated">It should be noted that the maximum &lt;code&gt;Date&lt;/code&gt; is not of the same value as the maximum safe integer ( &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; is 9,007,199,254,740,991). Instead, it is defined in ECMA-262 that a maximum of &amp;plusmn;100,000,000 (one hundred million) days relative to January 1, 1970 UTC (that is, April 20, 271821 BCE ~ September 13, 275760 CE) can be represented by the standard &lt;code&gt;Date&lt;/code&gt; object (equivalent to &amp;plusmn;8,640,000,000,000,000 milliseconds).</target>
        </trans-unit>
        <trans-unit id="954e387ac20208cc03c4f242e0c768abc0226976" translate="yes" xml:space="preserve">
          <source>It should be noted, however, that function expressions and function declarations nested within the function generated by parsing a &lt;code&gt;Function constructor&lt;/code&gt; 's string aren't parsed repeatedly. For example:</source>
          <target state="translated">ただし、 &lt;code&gt;Function constructor&lt;/code&gt; の文字列の解析によって生成された関数内にネストされた関数式および関数宣言は、繰り返し解析されないことに注意してください。例えば：</target>
        </trans-unit>
        <trans-unit id="5add076469b11cb8d7fb6364d8cdde585210a41c" translate="yes" xml:space="preserve">
          <source>It should return the value that should be added to the JSON string, as follows:</source>
          <target state="translated">以下のようにJSON文字列に追加すべき値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="f8133026fa0d9fb510eaf9a781595de1b0f3fe04" translate="yes" xml:space="preserve">
          <source>It takes four arguments:</source>
          <target state="translated">4つの引数が必要です。</target>
        </trans-unit>
        <trans-unit id="8e1dcd4bfabeba9ef57034858eb07de6c007a236" translate="yes" xml:space="preserve">
          <source>It takes three arguments:</source>
          <target state="translated">3つの引数が必要です。</target>
        </trans-unit>
        <trans-unit id="49a4eb485bbd793345a88879a66885954804a585" translate="yes" xml:space="preserve">
          <source>It was attempted to &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;shorten the length&lt;/a&gt; of an array, but one of the array's elements is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation.</source>
          <target state="translated">配列&lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;の長さ&lt;/a&gt;を短くしようとしましたが、配列の要素の1つを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;構成できません&lt;/a&gt;。配列を短くすると、新しい配列の長さを超える要素は削除され、この状況では失敗しました。</target>
        </trans-unit>
        <trans-unit id="02e2c9120f5b81da0f3dc90fab1cb8d051a5e07e" translate="yes" xml:space="preserve">
          <source>It was attempted to &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;shorten the length&lt;/a&gt; of an array, but one of the array's elements is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation.</source>
          <target state="translated">It was attempted to &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;shorten the length&lt;/a&gt; of an array, but one of the array's elements is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation.</target>
        </trans-unit>
        <trans-unit id="3b01aa32def2c0fe928809ced8d9324a50887fe5" translate="yes" xml:space="preserve">
          <source>It was attempted to delete a property, but that property is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">プロパティを削除しようとしましたが、そのプロパティは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;構成できません&lt;/a&gt;。 &lt;code&gt;configurable&lt;/code&gt; プロパティは、オブジェクトから、および（以外の属性かどうかを削除することができるかどうか属性コントロール &lt;code&gt;writable&lt;/code&gt; ）変更することができます。</target>
        </trans-unit>
        <trans-unit id="cef26e246ba549e7961e66ec8bd877f8126498a0" translate="yes" xml:space="preserve">
          <source>It was attempted to delete a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">It was attempted to delete a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt; ) can be changed.</target>
        </trans-unit>
        <trans-unit id="ccad8caf638b4903b95cc599d522675b3d9021ba" translate="yes" xml:space="preserve">
          <source>It was attempted to redefine a property, but that property is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed. Usually, properties in an object created by an &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, the property isn't configurable by default.</source>
          <target state="translated">プロパティを再定義しようとしましたが、そのプロパティは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;構成できません&lt;/a&gt;。 &lt;code&gt;configurable&lt;/code&gt; プロパティは、オブジェクトから、および（以外の属性かどうかを削除することができるかどうか属性コントロール &lt;code&gt;writable&lt;/code&gt; ）変更することができます。通常、&lt;a href=&quot;../operators/object_initializer&quot;&gt;オブジェクト初期化子&lt;/a&gt;によって作成されたオブジェクトのプロパティは構成可能です。ただし、たとえば、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;を使用する場合、プロパティはデフォルトでは構成できません。</target>
        </trans-unit>
        <trans-unit id="ec1f1b3574980048baf67633369823cce4b51a22" translate="yes" xml:space="preserve">
          <source>It was attempted to redefine a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed. Usually, properties in an object created by an &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, the property isn't configurable by default.</source>
          <target state="translated">It was attempted to redefine a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt; ) can be changed. Usually, properties in an object created by an &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;, the property isn't configurable by default.</target>
        </trans-unit>
        <trans-unit id="bab397dbab28fef0eebb4b36ff8f4cad76612d87" translate="yes" xml:space="preserve">
          <source>It will create an infinite loop if there is a match, due to the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property being reset upon each iteration.</source>
          <target state="translated">It will create an infinite loop if there is a match, due to the &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; property being reset upon each iteration.</target>
        </trans-unit>
        <trans-unit id="1d60210731c923bbd8d426ee1b331915626a35b0" translate="yes" xml:space="preserve">
          <source>It will return &lt;code&gt;0&lt;/code&gt; on non-shared &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</source>
          <target state="translated">It will return &lt;code&gt;0&lt;/code&gt; on non-shared &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</target>
        </trans-unit>
        <trans-unit id="4c6ba868b0d358d7be2e94d5d913452de49af160" translate="yes" xml:space="preserve">
          <source>It's also possible to explicitly get the string representation of a function using the &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">It's also possible to explicitly get the string representation of a function using the &lt;code&gt;+&lt;/code&gt; operator:</target>
        </trans-unit>
        <trans-unit id="d0ae4f0160efc5dbbcb8104a8d363de06b4efe61" translate="yes" xml:space="preserve">
          <source>It's always been possible to return an array from a function. Destructuring can make working with an array return value more concise.</source>
          <target state="translated">関数から配列を返すことはいつでも可能です。デストラクチャリングを行うことで、配列の戻り値をより簡潔に扱うことができます。</target>
        </trans-unit>
        <trans-unit id="cab096b013facf5171fb20f7a5008433704a6c33" translate="yes" xml:space="preserve">
          <source>It's an error to reference private fields from outside of the class; they can only be read or written within the class body. By defining things which are not visible outside of the class, you ensure that your classes' users can't depend on internals, which may change version to version.</source>
          <target state="translated">クラスの外部からプライベートフィールドを参照するのはエラーです。クラスの外では見えないものを定義することで、クラスのユーザがバージョンごとに変わる内部に依存しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="03716457a38dd613fb146f492439c6694b559017" translate="yes" xml:space="preserve">
          <source>It's been &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036&quot;&gt;reported&lt;/a&gt; that some websites using MooTools 1.2 broke on Firefox 17. This version of MooTools checks whether &lt;code&gt;String.prototype.contains()&lt;/code&gt; exists and, if it doesn't, MooTools adds its own function. With the introduction of this function in Firefox 17, the behavior of that check changed in a way that causes code based on MooTools' &lt;code&gt;String.prototype.contains()&lt;/code&gt; implementation to break. As a result, the implementation was &lt;a href=&quot;https://hg.mozilla.org/releases/mozilla-aurora/rev/086db97198a8&quot;&gt;disabled&lt;/a&gt; in Firefox 17 and &lt;code&gt;String.prototype.contains()&lt;/code&gt; was available one version later, in Firefox 18, when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036#c32&quot;&gt;outreach to MooTools &lt;/a&gt;was leading to the &lt;a href=&quot;http://mootools.net/blog/2013/02/19/mootools-1-2-6-released&quot;&gt;release of MooTools version 1.2.6&lt;/a&gt;.</source>
          <target state="translated">MooTools 1.2を使用する一部のWebサイトがFirefox 17で破損した&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036&quot;&gt;と報告&lt;/a&gt;されています。このバージョンのMooToolsは、 &lt;code&gt;String.prototype.contains()&lt;/code&gt; が存在するかどうかを確認し、存在しない場合は独自の機能を追加します。 Firefox 17でのこの関数の導入により、MooToolsの &lt;code&gt;String.prototype.contains()&lt;/code&gt; 実装に基づくコードが壊れるように、チェックの動作が変更されました。その結果、Firefox 17では実装が&lt;a href=&quot;https://hg.mozilla.org/releases/mozilla-aurora/rev/086db97198a8&quot;&gt;無効になり&lt;/a&gt;、&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036#c32&quot;&gt;MooToolsへのアウトリーチ&lt;/a&gt;&lt;a href=&quot;http://mootools.net/blog/2013/02/19/mootools-1-2-6-released&quot;&gt;がMooToolsバージョン1.2.6のリリース&lt;/a&gt;につながったとき、Firefox 18では &lt;code&gt;String.prototype.contains()&lt;/code&gt; が利用可能になりました。</target>
        </trans-unit>
        <trans-unit id="ad42705853bcc5b13365e9dd36fbcbb6ceb6b2bb" translate="yes" xml:space="preserve">
          <source>It's easy to forget a character here or there.</source>
          <target state="translated">あちこちでキャラを忘れがちです。</target>
        </trans-unit>
        <trans-unit id="aa341c3ae049b775c45f18a031d679d3313fdb7e" translate="yes" xml:space="preserve">
          <source>It's important to note the nature of block scoping.</source>
          <target state="translated">ブロックスコープの性質に注意することが重要です。</target>
        </trans-unit>
        <trans-unit id="b7e9905f65f341e990222d4ff317bc808ce28e95" translate="yes" xml:space="preserve">
          <source>It's important to point out that the hoisting will affect the variable declaration, but not its value's initialization. The value will be indeed assigned when the assignment statement is reached:</source>
          <target state="translated">ここで重要なのは、巻き上げは変数の宣言には影響しますが、値の初期化には影響しないということです。値は、代入文に到達したときに確かに代入されます。</target>
        </trans-unit>
        <trans-unit id="4bec33562b92cfeb84dad9aaca2fd74a7fdf2830" translate="yes" xml:space="preserve">
          <source>It's possible to use &lt;code&gt;String&lt;/code&gt; as a more reliable &lt;a href=&quot;string/tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; alternative, as it works when used on &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, and on &lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;symbols&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">それは使用することが可能です &lt;code&gt;String&lt;/code&gt; 、より信頼性の高いと&lt;a href=&quot;string/tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;で使用された場合、それが動作するよう、代替&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、そして上の&lt;a href=&quot;symbol&quot;&gt; &lt;code&gt;symbols&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="8b848ab2fb08e43e529543c6e2fab3e9726bc663" translate="yes" xml:space="preserve">
          <source>It's tough coming up with good variable names. We all have been there.</source>
          <target state="translated">良い変数名を思いつくのは大変です。誰もが経験したことがあります。</target>
        </trans-unit>
        <trans-unit id="9386f043281c3ea26d3f1bdde2724658066699bc" translate="yes" xml:space="preserve">
          <source>It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called (for example, if it has a reference to a &lt;a href=&quot;../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; instance as its value).</source>
          <target state="translated">It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called (for example, if it has a reference to a &lt;a href=&quot;../global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; instance as its value).</target>
        </trans-unit>
        <trans-unit id="5feb4718af1649655101d14d39d1577ed4fe6db2" translate="yes" xml:space="preserve">
          <source>Items on the prototype chain are not listed:</source>
          <target state="translated">プロトタイプチェーンのアイテムは掲載されていません。</target>
        </trans-unit>
        <trans-unit id="a3b526c83f0fbd860687a229f7de46226cbf3f2a" translate="yes" xml:space="preserve">
          <source>Iterable examples</source>
          <target state="translated">反復可能な例</target>
        </trans-unit>
        <trans-unit id="303add622a0aab032fae6819c4ebe6b995c08abd" translate="yes" xml:space="preserve">
          <source>Iterable in constructor</source>
          <target state="translated">コンストラクタで反復可能</target>
        </trans-unit>
        <trans-unit id="12279667aeedad166b3a644b34522ec0663e7e6b" translate="yes" xml:space="preserve">
          <source>Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). Each key-value pair will be added to the new WeakMap. null is treated as undefined.</source>
          <target state="translated">Iterable は、配列などの反復可能なオブジェクトで、その要素はキーと値のペア(2 要素の配列)となります。各キーと値のペアは、新しいWeakMapに追加されます。</target>
        </trans-unit>
        <trans-unit id="2b023afbe3bb8465459d650343ef64c1ac087ed9" translate="yes" xml:space="preserve">
          <source>Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.</source>
          <target state="translated">オブジェクトのプロパティのすべての値に対して、指定された変数を反復処理します。それぞれのプロパティに対して、指定された文が実行されます。</target>
        </trans-unit>
        <trans-unit id="21fbe6e5ed65189e6f03abfbf39cf77716f2b19a" translate="yes" xml:space="preserve">
          <source>Iterates over async iterable objects, array-like objects, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterators and generators&lt;/a&gt;, invoking a custom iteration hook with statements to be executed for the value of each distinct property.</source>
          <target state="translated">非同期の反復可能オブジェクト、配列のようなオブジェクト、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;イテレーター、ジェネレーターを&lt;/a&gt;反復処理し、個別の各プロパティの値に対して実行されるステートメントを含むカスタム反復フックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7fee0e8392755185b42e899080e03939cef85638" translate="yes" xml:space="preserve">
          <source>Iterates over iterable objects (including &lt;a href=&quot;global_objects/array&quot;&gt;arrays&lt;/a&gt;, array-like objects, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterators and generators&lt;/a&gt;), invoking a custom iteration hook with statements to be executed for the value of each distinct property.</source>
          <target state="translated">反復可能なオブジェクト（&lt;a href=&quot;global_objects/array&quot;&gt;配列&lt;/a&gt;、配列のようなオブジェクト、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;イテレーター、ジェネレーターを含む&lt;/a&gt;）を反復処理し、個別の各プロパティの値に対して実行されるステートメントを含むカスタム反復フックを呼び出します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
