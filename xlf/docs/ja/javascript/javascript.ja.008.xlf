<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="33c38a2e18db9c66b1471f76b75c402d86a467fb" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt;, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">For both &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; , &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; is treated as &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4ebd17ee6524394d68de55d71267a3a2129d421" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;, NaN is treated as 0.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; の両方で、NaNは0として扱われます。</target>
        </trans-unit>
        <trans-unit id="26aabe4f640dee6e21eddc2167826f78cdca41f3" translate="yes" xml:space="preserve">
          <source>For certain methods, you have to provide a (callback) function and it will work on specific objects only. In this example, &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt; is used, which will work with &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects only.</source>
          <target state="translated">特定のメソッドでは、（コールバック）関数を提供する必要があり、特定のオブジェクトでのみ機能します。この例では、&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;が使用されています。これは、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクトでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="e0e1751073e5970c64bca2f757d1c623e86bb3c0" translate="yes" xml:space="preserve">
          <source>For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See &lt;a href=&quot;object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; for more information.)</source>
          <target state="translated">ブラケット表記を使用した文字アクセスの場合、これらのプロパティを削除または値を割り当てようとしても成功しません。関連するプロパティは、書き込みも構成もできません。（詳細については、&lt;a href=&quot;object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="99044996f4e427d6809e09a478ce8eac0722235a" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.</source>
          <target state="translated">通常、文字通りに扱われる文字については、次の文字が特別であり、文字通りに解釈されないことを示しています。</target>
        </trans-unit>
        <trans-unit id="a748d10a4ab866b8eb98e9cd6ef0ff7546d5f266" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.</source>
          <target state="translated">通常特別に扱われる文字については、次の文字は特別ではなく、文字通りに解釈すべきであることを示しています。</target>
        </trans-unit>
        <trans-unit id="85db0ab8b5ed013f390f3a080dd3cfc842bb264d" translate="yes" xml:space="preserve">
          <source>For checking non-existent variables that would otherwise throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;typeof nonExistentVar&amp;nbsp;=== 'undefined'&lt;/code&gt;.</source>
          <target state="translated">For checking non-existent variables that would otherwise throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;, use &lt;code&gt;typeof nonExistentVar&amp;nbsp;=== 'undefined'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b13759ba937d4a7dfd20fa0a292bf064a8452b9" translate="yes" xml:space="preserve">
          <source>For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods &lt;a href=&quot;getfullyear&quot;&gt;&lt;code&gt;getFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;setfullyear&quot;&gt;&lt;code&gt;setFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcfullyear&quot;&gt;&lt;code&gt;getUTCFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setutcfullyear&quot;&gt;&lt;code&gt;setUTCFullYear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ミレニアム計算との互換性のために（つまり、2000年を考慮に入れるため）、常に年全体を指定する必要があります。たとえば、98ではなく1998を使用します。完全な年を指定するのに役立つように、JavaScriptにはメソッド&lt;a href=&quot;getfullyear&quot;&gt; &lt;code&gt;getFullYear()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;setfullyear&quot;&gt; &lt;code&gt;setFullYear()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getutcfullyear&quot;&gt; &lt;code&gt;getUTCFullYear()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;setutcfullyear&quot;&gt; &lt;code&gt;setUTCFullYear()&lt;/code&gt; が含まれてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3404e5bf70a885865d212605712da9b2b525a7d4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padend&quot;&gt;&lt;code&gt;String.prototype.padEnd&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimEnd&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimRight&lt;/code&gt; remains as an alias to &lt;code&gt;trimEnd&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padend&quot;&gt; &lt;code&gt;String.prototype.padEnd&lt;/code&gt; &lt;/a&gt;などの関数との整合性を保つため、標準のメソッド名は &lt;code&gt;trimEnd&lt;/code&gt; です。ただし、Web互換性の理由から、 &lt;code&gt;trimRight&lt;/code&gt; はtrimEndのエイリアスのまま &lt;code&gt;trimEnd&lt;/code&gt; 。一部のエンジンでは、これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="f18d1ae2a3eb146497e18d6828d80707fdde7cf4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padstart&quot;&gt;&lt;code&gt;String.prototype.padStart&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimStart&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimLeft&lt;/code&gt; remains as an alias to &lt;code&gt;trimStart&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padstart&quot;&gt; &lt;code&gt;String.prototype.padStart&lt;/code&gt; &lt;/a&gt;などの関数との整合性を保つため、標準のメソッド名は &lt;code&gt;trimStart&lt;/code&gt; です。ただし、Web互換性の理由から、 &lt;code&gt;trimLeft&lt;/code&gt; はtrimStartのエイリアスとして &lt;code&gt;trimStart&lt;/code&gt; ます。一部のエンジンでは、これは以下を意味します：</target>
        </trans-unit>
        <trans-unit id="e8af3d83a48402e400f35cfeec3c1af710d38b6f" translate="yes" xml:space="preserve">
          <source>For copying property definitions (including their enumerability) into prototypes, use &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">For copying property definitions (including their enumerability) into prototypes, use &lt;a href=&quot;getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="f9918cac41143b821348744973cb230ce45c39e6" translate="yes" xml:space="preserve">
          <source>For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value). Note that values that are objects can still be modified, unless they are also frozen. As an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added to or removed from the array.</source>
          <target state="translated">フローズドオブジェクトのデータプロパティについては、値を変更することはできず、書き込み可能属性と設定可能属性はfalseに設定されています。アクセサプロパティ(ゲッターとセッター)も同じように動作します(なお、値を変更しているかのような錯覚を与えます)。オブジェクトである値は、フリーズしていない限り、変更することができることに注意してください。オブジェクトとして、配列を凍結することができます。</target>
        </trans-unit>
        <trans-unit id="10a18c2526932f22e98b63c9cadb43418dd3bf51" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use alternatives, because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values.</source>
          <target state="translated">For deep cloning, we need to use alternatives, because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values.</target>
        </trans-unit>
        <trans-unit id="3fc009100b3e934d5118774a507a120144dc3f88" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use other alternatives because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values. If the source value is a reference to an object, it only copies that reference value.</source>
          <target state="translated">ディープクローニングでは、 &lt;code&gt;Object.assign()&lt;/code&gt; がプロパティ値をコピーするため、他の代替手段を使用する必要があります。ソース値がオブジェクトへの参照である場合、その参照値のみがコピーされます。</target>
        </trans-unit>
        <trans-unit id="a872f9cc20d8e834dae1ca1ebcab116bbe0ba998" translate="yes" xml:space="preserve">
          <source>For derived classes, the default constructor is:</source>
          <target state="translated">派生クラスの場合、デフォルトのコンストラクタは</target>
        </trans-unit>
        <trans-unit id="4093c0e4275a12fade1e18346d4b3f6b759cc5d2" translate="yes" xml:space="preserve">
          <source>For details of the comparison algorithm, see the page for the &lt;a href=&quot;equality&quot;&gt;equality&lt;/a&gt; operator.</source>
          <target state="translated">比較アルゴリズムの詳細については、&lt;a href=&quot;equality&quot;&gt;等式&lt;/a&gt;演算子のページを参照してください。</target>
        </trans-unit>
        <trans-unit id="37d61376b4d28260be3207ecd491fe3ddd063874" translate="yes" xml:space="preserve">
          <source>For details of the comparison algorithm, see the page for the &lt;a href=&quot;strict_equality&quot;&gt;strict equality&lt;/a&gt; operator.</source>
          <target state="translated">比較アルゴリズムの詳細については、&lt;a href=&quot;strict_equality&quot;&gt;厳密な等式&lt;/a&gt;演算子のページを参照してください。</target>
        </trans-unit>
        <trans-unit id="5ae3d3d29fc3be84e49f8896de494e2a5bc4e77f" translate="yes" xml:space="preserve">
          <source>For didactic purpose only (since there is the &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; method), we show how it is possible to modify the &lt;code&gt;arrayFromMask&lt;/code&gt; algorithm in order to create a &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; containing the binary representation of a &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;, rather than an &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; メソッドがあるため）教訓的な目的のみで、 &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; ではなく、 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; のバイナリ表現を含む &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; を作成するために &lt;code&gt;arrayFromMask&lt;/code&gt; アルゴリズムを変更する方法を示します。</target>
        </trans-unit>
        <trans-unit id="c85141589120f45f5cb60eb2198157fb89d1407a" translate="yes" xml:space="preserve">
          <source>For each outcome object, a &lt;code&gt;status&lt;/code&gt; string is present. If the status is &lt;code&gt;fulfilled&lt;/code&gt;, then a &lt;code&gt;value&lt;/code&gt; is present. If the status is &lt;code&gt;rejected&lt;/code&gt;, then a &lt;code&gt;reason&lt;/code&gt; is present. The value (or reason) reflects what value each promise was fulfilled (or rejected) with.</source>
          <target state="translated">結果オブジェクトごとに、 &lt;code&gt;status&lt;/code&gt; 文字列が表示されます。ステータスがされている場合は &lt;code&gt;fulfilled&lt;/code&gt; 、その後、 &lt;code&gt;value&lt;/code&gt; 存在しています。ステータスが &lt;code&gt;rejected&lt;/code&gt; 場合は、 &lt;code&gt;reason&lt;/code&gt; があります。値（または理由）は、各約束が履行（または拒否）された値を反映します。</target>
        </trans-unit>
        <trans-unit id="3be8fcb6f27956cba103591a38605bc08e18e6ee" translate="yes" xml:space="preserve">
          <source>For each variable declared, you may optionally specify its initial value to any legal JavaScript expression.</source>
          <target state="translated">宣言された各変数に対して、その初期値を任意の合法的な JavaScript 式に指定することができます。</target>
        </trans-unit>
        <trans-unit id="3c660e337b7d93bed6e13f9f0a73344500d5771b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;work as expected with Traditional functions, because we establish the scope for each of the methods:</source>
          <target state="translated">For example &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;work as expected with Traditional functions, because we establish the scope for each of the methods:</target>
        </trans-unit>
        <trans-unit id="af9424dff50db5cffee05db82f14e282e8a7ffab" translate="yes" xml:space="preserve">
          <source>For example checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;ノード&lt;/a&gt;が別のコンテキストで&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt;かどうかを確認するには、 &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="a1921efdfed6a87b6e5c50e8a40d2c7e77f411a0" translate="yes" xml:space="preserve">
          <source>For example, &quot;*&quot; is a special character that means 0 or more occurrences of the preceding character should be matched; for example, &lt;code&gt;/a*/&lt;/code&gt; means match 0 or more &quot;a&quot;s. To match &lt;code&gt;*&lt;/code&gt; literally, precede it with a backslash; for example, &lt;code&gt;/a\*/&lt;/code&gt; matches &quot;a*&quot;.</source>
          <target state="translated">たとえば、「*」は、先行する文字の0回以上の出現に一致する必要があることを意味する特殊文字です。たとえば、 &lt;code&gt;/a*/&lt;/code&gt; は0個以上の「a」に一致することを意味します。 &lt;code&gt;*&lt;/code&gt; を文字どおり一致させるには、その前にバックスラッシュを付けます。たとえば、 &lt;code&gt;/a\*/&lt;/code&gt; 「a *」と一致します。</target>
        </trans-unit>
        <trans-unit id="06a8a96f44d115ddf9235c827e88879b5a516490" translate="yes" xml:space="preserve">
          <source>For example, &quot;&lt;code&gt;2011-10-10&lt;/code&gt;&quot; (&lt;em&gt;date-only&lt;/em&gt; form), &quot;&lt;code&gt;2011-10-10T14:48:00&lt;/code&gt;&quot; (&lt;em&gt;date-time&lt;/em&gt; form), or &quot;&lt;code&gt;2011-10-10T14:48:00.000+09:00&lt;/code&gt;&quot; (&lt;em&gt;date-time&lt;/em&gt; form with milliseconds and time zone) can be passed and will be parsed. When the time zone offset is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.</source>
          <target state="translated">For example, &quot; &lt;code&gt;2011-10-10&lt;/code&gt; &quot; (&lt;em&gt;date-only&lt;/em&gt; form), &quot; &lt;code&gt;2011-10-10T14:48:00&lt;/code&gt; &quot; (&lt;em&gt;date-time&lt;/em&gt; form), or &quot; &lt;code&gt;2011-10-10T14:48:00.000+09:00&lt;/code&gt; &quot; (&lt;em&gt;date-time&lt;/em&gt; form with milliseconds and time zone) can be passed and will be parsed. When the time zone offset is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.</target>
        </trans-unit>
        <trans-unit id="bea3e1a01ebe6de98dcc04169dd3576954076ff3" translate="yes" xml:space="preserve">
          <source>For example, /&lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; matches &quot;Jack&quot; only if it is followed by &quot;Sprat&quot;.</source>
          <target state="translated">たとえば、/ &lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; は、「Sprat」が後に続く場合にのみ「Jack」と一致します。</target>
        </trans-unit>
        <trans-unit id="25c08938dc686489d7672a95a913a61d324a6a3f" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt; will create and throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; itself. If the mutation is performed by an operation that &lt;em&gt;doesn't&lt;/em&gt; ordinarily throw in case of failure, such as &lt;a href=&quot;../../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;, no exception will be thrown.</source>
          <target state="translated">たとえば、&lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;自体を作成してスローします。&lt;a href=&quot;../../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;など、失敗した場合に通常はスローされ&lt;em&gt;ない&lt;/em&gt;操作によってミューテーションが実行された場合、例外はスローされません。</target>
        </trans-unit>
        <trans-unit id="f7e97cc7164eebed5ae5d22dd9b94a3bbd85996a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;'hello world'.indexOf('o', -5)&lt;/code&gt; will return &lt;code&gt;4&lt;/code&gt;, as it starts at position &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;o&lt;/code&gt; is found at position &lt;code&gt;4&lt;/code&gt;. On the other hand, &lt;code&gt;'hello world'.indexOf('o', 11)&lt;/code&gt; (and with any &lt;code&gt;fromIndex&lt;/code&gt; value greater than &lt;code&gt;11&lt;/code&gt;) will return &lt;code&gt;-1&lt;/code&gt;, as the search is started at position &lt;code&gt;11&lt;/code&gt;, a position &lt;em&gt;after&lt;/em&gt; the end of the string.</source>
          <target state="translated">For example, &lt;code&gt;'hello world'.indexOf('o', -5)&lt;/code&gt; will return &lt;code&gt;4&lt;/code&gt; , as it starts at position &lt;code&gt;0&lt;/code&gt; , and &lt;code&gt;o&lt;/code&gt; is found at position &lt;code&gt;4&lt;/code&gt; . On the other hand, &lt;code&gt;'hello world'.indexOf('o', 11)&lt;/code&gt; (and with any &lt;code&gt;fromIndex&lt;/code&gt; value greater than &lt;code&gt;11&lt;/code&gt; ) will return &lt;code&gt;-1&lt;/code&gt; , as the search is started at position &lt;code&gt;11&lt;/code&gt; , a position &lt;em&gt;after&lt;/em&gt; the end of the string.</target>
        </trans-unit>
        <trans-unit id="f996f230c5ba69cacb722a4b28f7baf9a2451188" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt;&quot; in &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;, whereas &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; &amp;lt; 。*？ &amp;gt; /は「&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;」の「&amp;lt;foo&amp;gt;」に一致し、/ &amp;lt;。 &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; &amp;gt; /は「&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;」に一致します。</target>
        </trans-unit>
        <trans-unit id="27e4be0ac9808621eb5d1917ee74c672f0b47394" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/(foo)/&lt;/code&gt; matches and remembers &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/(foo)/&lt;/code&gt; は、「foo bar」の「foo」に一致して記憶します。</target>
        </trans-unit>
        <trans-unit id="731dc4cf5c8a54fbcbc2af314a327d088d98638c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/.y/&lt;/code&gt; matches &quot;my&quot; and &quot;ay&quot;, but not &quot;yes&quot;, in &quot;yes make my day&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/.y/&lt;/code&gt; 。y /は「yes make my day」の「my」と「ay」に一致しますが、「yes」には一致しません。</target>
        </trans-unit>
        <trans-unit id="e2ecf141ae7a336698fb8c2752ab124b962f13e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\Bon/&lt;/code&gt; matches &quot;on&quot; in &quot;at noon&quot;, and &lt;code&gt;/ye\B/&lt;/code&gt; matches &quot;ye&quot; in &quot;possibly yesterday&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\Bon/&lt;/code&gt; は「正午」の「on」に一致し、 &lt;code&gt;/ye\B/&lt;/code&gt; は「おそらく昨日」の「ye」に一致します。</target>
        </trans-unit>
        <trans-unit id="ba512b360907fd081a5c8d7d957c6b35edbcd627" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\D/&lt;/code&gt; or &lt;code&gt;/[^0-9]/&lt;/code&gt; matches &quot;B&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\D/&lt;/code&gt; または &lt;code&gt;/[^0-9]/&lt;/code&gt; は、「B2 is the suite number」の「B」に一致します。</target>
        </trans-unit>
        <trans-unit id="72c8f4c13713a783b774b36799e9b95d4b11c727" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\S\w*/&lt;/code&gt; matches &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\S\w*/&lt;/code&gt; は、「foo bar」の「foo」に一致します。</target>
        </trans-unit>
        <trans-unit id="a10d7b5dd4f43f12c1a090ad22713c68343dbcce" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\W/&lt;/code&gt; or &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; matches &quot;%&quot; in &quot;50%&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\W/&lt;/code&gt; または &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; は、「50％」の「％」に一致します。</target>
        </trans-unit>
        <trans-unit id="58a7325cb42e0955f08d3fb78805a675633c686c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\cM/&lt;/code&gt; matches control-M in a string.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\cM/&lt;/code&gt; は文字列内のcontrol-Mに一致します。</target>
        </trans-unit>
        <trans-unit id="54379d80b8754985be2df6f32cd7b59e7b5d22b6" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; matches a number only if it is not followed by a decimal point.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; 。）/は、小数点が続かない場合にのみ数値と一致します。</target>
        </trans-unit>
        <trans-unit id="2f99f6f3b6617e0baeab0f498629bf696685e7c5" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d/&lt;/code&gt; or &lt;code&gt;/[0-9]/&lt;/code&gt; matches &quot;2&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\d/&lt;/code&gt; または &lt;code&gt;/[0-9]/&lt;/code&gt; は、「B2 is the suite number」の「2」に一致します。</target>
        </trans-unit>
        <trans-unit id="b666bd4de97017a6096dee7ee40ac60fc051d1ad" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\s\w*/&lt;/code&gt; matches &quot; bar&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\s\w*/&lt;/code&gt; は、「foo bar」の「bar」に一致します。</target>
        </trans-unit>
        <trans-unit id="c081fbd7f9e8826910cd2ba54069a078d1643b1f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\w/&lt;/code&gt; matches &quot;a&quot; in &quot;apple&quot;, &quot;5&quot; in &quot;$5.28&quot;, and &quot;3&quot; in &quot;3D&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/\w/&lt;/code&gt; は、「apple」の「a」、「$ 5.28」の「5」、「3D」の「3」に一致します。</target>
        </trans-unit>
        <trans-unit id="04e47940435de007ee6bfc72f9ee144bd618626f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/^A/&lt;/code&gt; does not match the &quot;A&quot; in &quot;an A&quot;, but does match the first &quot;A&quot; in &quot;An A&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/^A/&lt;/code&gt; は「an A」の「A」とは一致しませんが、「An A」の最初の「A」とは一致します。</target>
        </trans-unit>
        <trans-unit id="d8627b8a39beff2d023b9ce420d597267ed2aac7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a+/&lt;/code&gt; matches the &quot;a&quot; in &quot;candy&quot; and all the &quot;a&quot;'s in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a+/&lt;/code&gt; は、「candy」の「a」と「caaaaaaandy」のすべての「a」に一致します。</target>
        </trans-unit>
        <trans-unit id="77f98d5935fe226c6d759c07f102de18c3583fba" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; matches &quot;apple, orange,&quot; in &quot;apple, orange, cherry, peach&quot;. A complete example follows this table.</source>
          <target state="translated">たとえば、 &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; は、「apple、orange、cherry、peach」の「apple、orange、」に一致します。完全な例はこの表の後にあります。</target>
        </trans-unit>
        <trans-unit id="08296657ebef91f76b34b0de5567df76b6e97cb4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{1,3}/&lt;/code&gt; matches nothing in &quot;cndy&quot;, the &quot;a&quot; in &quot;candy&quot;, the two &quot;a&quot;'s in &quot;caandy&quot;, and the first three &quot;a&quot;'s in &quot;caaaaaaandy&quot;. Notice that when matching &quot;caaaaaaandy&quot;, the match is &quot;aaa&quot;, even though the original string had more &quot;a&quot;'s in it.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a{1,3}/&lt;/code&gt; は、「cndy」、「candy」の「a」、「caandy」の2つの「a」、および「」の最初の3つの「a」には一致しません。 caaaaaaandy」。「caaaaaaandy」に一致する場合、元の文字列にさらに「a」が含まれていても、一致は「aaa」になります。</target>
        </trans-unit>
        <trans-unit id="a90f3faff5967d1b354e84aa4ba89dec44e6af85" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2,}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but matches all of the a's in &quot;caandy&quot; and in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a{2,}/&lt;/code&gt; は「candy」の「a」とは一致しませんが、「caandy」と「caaaaaaandy」のすべてのaと一致します。</target>
        </trans-unit>
        <trans-unit id="a4af36d397a8b981ed8a1d428eaa0a51abce8c20" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but it matches all of the &quot;a&quot;'s in &quot;caandy&quot;, and the first two &quot;a&quot;'s in &quot;caaandy&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/a{2}/&lt;/code&gt; は「キャンディー」の「a」とは一致しませんが、「caandy」の「a」のすべて、および「caaandy」の最初の2つの「a」と一致します。 」</target>
        </trans-unit>
        <trans-unit id="3616762289f2ad86d25dbe81ba9ff555c4b706e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/b/&lt;/code&gt; matches the character &quot;b&quot;. By placing a backslash in front of &quot;b&quot;, that is by using &lt;code&gt;/\b/&lt;/code&gt;, the character becomes special to mean match a word boundary.</source>
          <target state="translated">たとえば、 &lt;code&gt;/b/&lt;/code&gt; は文字「b」に一致します。&quot; &lt;code&gt;/\b/&lt;/code&gt; &quot;の前にバックスラッシュを配置することにより、つまり/ \ b /を使用すると、文字は単語境界と一致することを意味する特別なものになります。</target>
        </trans-unit>
        <trans-unit id="8e340ac6bd33c408c1574b00399d8080044c2819" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/bo*/&lt;/code&gt; matches &quot;boooo&quot; in &quot;A ghost booooed&quot; and &quot;b&quot; in &quot;A bird warbled&quot;, but nothing in &quot;A goat grunted&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/bo*/&lt;/code&gt; は、「A ghost booooed」の「boooo」と「A bird warbled」の「b」に一致しますが、「ヤギのうなり声」には一致しません。</target>
        </trans-unit>
        <trans-unit id="ee70c325b7fda48a36f20806ce19cd350a23827a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/e?le?/&lt;/code&gt; matches the &quot;el&quot; in &quot;angel&quot; and the &quot;le&quot; in &quot;angle.&quot;</source>
          <target state="translated">たとえば、 &lt;code&gt;/e?le?/&lt;/code&gt; は、「angel」の「el」および「angle」の「le」と一致します。</target>
        </trans-unit>
        <trans-unit id="0890428ef6f4a779e8ee5f7ad1dcddbac728b190" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/green|red/&lt;/code&gt; matches &quot;green&quot; in &quot;green apple&quot; and &quot;red&quot; in &quot;red apple&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/green|red/&lt;/code&gt; は、「緑のリンゴ」の「緑」および「赤いリンゴ」の「赤」に一致します。</target>
        </trans-unit>
        <trans-unit id="8133255e243f3bc7a528482f8249e11e97cbc601" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/t$/&lt;/code&gt; does not match the &quot;t&quot; in &quot;eater&quot;, but does match it in &quot;eat&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;/t$/&lt;/code&gt; は「eater」の「t」とは一致しませんが、「eat」の「t」とは一致します。</target>
        </trans-unit>
        <trans-unit id="5cc5b6d1d137d8d2cc001b6a446910cfa7fb6b4f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a safe integer: it can be exactly represented in IEEE-754, but the integer &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; can't be directly represented in IEEE-754 but instead rounds to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; under round-to-nearest and round-to-zero rounding. The safe integers consist of all integers from &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; inclusive to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; inclusive (&amp;plusmn; &lt;code&gt;9007199254740991&lt;/code&gt; or &amp;plusmn; 9,007,199,254,740,991).</source>
          <target state="translated">例えば、 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; 安全な整数である：それは正確に表現しない、任意のIEEE-754丸めモードの下でそれを他の整数ラウンドすることができます。対照的に、 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; は安全な整数ではあり&lt;em&gt;ません&lt;/em&gt;。IEEE-754で正確に表すことができますが、整数 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; はIEEE-754で直接表すことはできませんが、代わりに最も近い丸 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; で2 &lt;sup&gt;53&lt;/sup&gt;に丸めますゼロに丸めます。安全な整数から全ての整数から成る &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; に包括的 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; （&amp;plusmn;包括 &lt;code&gt;9007199254740991&lt;/code&gt; または&amp;plusmn;9,007,199,254,740,991）。</target>
        </trans-unit>
        <trans-unit id="1468820736d3768571efe41dbb75777077dfdee4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; yields 2:</source>
          <target state="translated">たとえば、 &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; は2になります。</target>
        </trans-unit>
        <trans-unit id="43017361c6ef1192dc85fc698a7f5457aa051e32" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; yields 36:</source>
          <target state="translated">たとえば、 &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; は36になります。</target>
        </trans-unit>
        <trans-unit id="d40cd50395c60e958fd69dd0d91559fbae320fed" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[^abc]&lt;/code&gt; is the same as &lt;code&gt;[^a-c]&lt;/code&gt;. They initially match &quot;o&quot; in &quot;bacon&quot; and &quot;h&quot; in &quot;chop&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;[^abc]&lt;/code&gt; は &lt;code&gt;[^a-c]&lt;/code&gt; と同じです。最初は「ベーコン」の「o」と「チョップ」の「h」に一致します。</target>
        </trans-unit>
        <trans-unit id="3e34984e389a74734f82bae79350f3d5f1e65463" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[abcd]&lt;/code&gt; is the same as &lt;code&gt;[a-d]&lt;/code&gt;. They match the &quot;b&quot; in &quot;brisket&quot; and the &quot;c&quot; in &quot;chop&quot;.</source>
          <target state="translated">たとえば、 &lt;code&gt;[abcd]&lt;/code&gt; は &lt;code&gt;[a-d]&lt;/code&gt; と同じです。それらは「ブリスケット」の「b」と「チョップ」の「c」に一致します。</target>
        </trans-unit>
        <trans-unit id="2d4c70a562d592dc4b4f50eca2763191f11d3182" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;slice(1,4)&lt;/code&gt; extracts the second element through the fourth element (elements indexed 1, 2, and 3).</source>
          <target state="translated">たとえば、 &lt;code&gt;slice(1,4)&lt;/code&gt; は、2番目の要素から4番目の要素（インデックスが1、2、3の要素）を抽出します。</target>
        </trans-unit>
        <trans-unit id="866a7c2ace957888375af096e8b401b5012bea84" translate="yes" xml:space="preserve">
          <source>For example, [\w-] is the same as [A-Za-z0-9_-]. They match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;n&quot; in &quot;non-profit&quot;.</source>
          <target state="translated">例えば、[\w-]は[A-Za-z0-9_-]と同じです。brisket」の「b」、「chop」の「c」、「non-profit」の「n」が一致します。</target>
        </trans-unit>
        <trans-unit id="1b85b07b0e9d23ce4d536e495de0c011cfeb1892" translate="yes" xml:space="preserve">
          <source>For example, [abcd-] and [-abcd] match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;-&quot; (hyphen) in &quot;non-profit&quot;.</source>
          <target state="translated">例えば、[abcd-]と[-abcd]は、「brisket」の「b」、「chop」の「c」、「non-profit」の「-」(ハイフン)に一致します。</target>
        </trans-unit>
        <trans-unit id="d534024361a43e9b767937a323c46e5884274247" translate="yes" xml:space="preserve">
          <source>For example, a bitwise AND of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0001&lt;/code&gt; which is 1 in decimal.</source>
          <target state="translated">たとえば、 &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; ビットごとのANDは、 &lt;code&gt;0001&lt;/code&gt; になり、これは10進数で1です。</target>
        </trans-unit>
        <trans-unit id="35dfc44891ed2854f3701d280c936b920ff7097c" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">たとえば、ORのビット単位の &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; における結果 &lt;code&gt;0101&lt;/code&gt; 小数で5です。</target>
        </trans-unit>
        <trans-unit id="7323a4bc05d149bad307094ed612a35fbc241715" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 | 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">For example, a bitwise OR of &lt;code&gt;5 | 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</target>
        </trans-unit>
        <trans-unit id="ff16bc0ecdfd4fb29f2ad2e161dd9ad9ab4eaa13" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">例えば、ビット単位のXOR &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; における結果 &lt;code&gt;0100&lt;/code&gt; 小数で4です。</target>
        </trans-unit>
        <trans-unit id="d1c2cefbc98e7cccd6aa2ad1f5d4474b54e230e7" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 ^ 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">For example, a bitwise XOR of &lt;code&gt;5 ^ 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</target>
        </trans-unit>
        <trans-unit id="18a0c77ee8e8d786fbaa02174f49d557f339c981" translate="yes" xml:space="preserve">
          <source>For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPath&lt;/a&gt; instead of JavaScript code.</source>
          <target state="translated">たとえば、Webページのコンテンツをスクレイピングするように設計された拡張機能では、JavaScriptコードではなく&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPathで&lt;/a&gt;スクレイピングルールを定義できます。</target>
        </trans-unit>
        <trans-unit id="30d78476f415ba39dfea6fce2e88c0a1b1289345" translate="yes" xml:space="preserve">
          <source>For example, assume you have this script:</source>
          <target state="translated">例えば、次のようなスクリプトがあるとします。</target>
        </trans-unit>
        <trans-unit id="bb063a9af9663d39a47eb4d1e7486590fe3ad853" translate="yes" xml:space="preserve">
          <source>For example, check if &lt;code&gt;baz&lt;/code&gt; object descends from &lt;code&gt;Foo.prototype&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;baz&lt;/code&gt; オブジェクトが &lt;code&gt;Foo.prototype&lt;/code&gt; から派生しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="28f481915e88904767cd8c7e2eaf0055f62e4a76" translate="yes" xml:space="preserve">
          <source>For example, checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context, you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;.</source>
          <target state="translated">For example, checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context, you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77866eb3501170410f292080c471f427ab9f9911" translate="yes" xml:space="preserve">
          <source>For example, consider an object &lt;code&gt;obj&lt;/code&gt; which has a nested structure. Without optional chaining, looking up a deeply-nested subproperty requires validating the references in between, such as:</source>
          <target state="translated">たとえば、ネストされた構造を持つオブジェクト &lt;code&gt;obj&lt;/code&gt; について考えてみます。オプションの連鎖がない場合、深くネストされたサブプロパティを検索するには、次のように、その間の参照を検証する必要があります。</target>
        </trans-unit>
        <trans-unit id="e88872bda7dcb80ad8bdf7d45a7fe8e4824839d7" translate="yes" xml:space="preserve">
          <source>For example, dividing zero by zero results in a &lt;code&gt;NaN&lt;/code&gt; &amp;mdash; but dividing other numbers by zero does not.</source>
          <target state="translated">たとえば、ゼロをゼロで除算すると &lt;code&gt;NaN&lt;/code&gt; が生成されますが、他の数値をゼロで除算すると変換されません。</target>
        </trans-unit>
        <trans-unit id="69c55058ffebb896925e6bc270d2df44eabd3997" translate="yes" xml:space="preserve">
          <source>For example, if 0 is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt;, the date will be set to the last day of the previous month.</source>
          <target state="translated">For example, if 0 is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; , the date will be set to the last day of the previous month.</target>
        </trans-unit>
        <trans-unit id="34ab198aa4b01ccc2fc1e99847d64c05bdafb92c" translate="yes" xml:space="preserve">
          <source>For example, if a function is passed 3 arguments, you can access them as follows:</source>
          <target state="translated">例えば、関数に3つの引数が渡された場合、以下のようにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="937d79a6cfd454f4894cee8f40a83443bcd6a1f3" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &quot;Jack &amp;amp; Jill&quot;, the text may get encoded as &quot;Jack &amp;amp;amp; Jill&quot;. Without &lt;code&gt;encodeURIComponent&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">たとえば、ユーザーが「Jack＆Jill」と書いた場合、テキストは「Jack＆amp; Jill」としてエンコードされます。 &lt;code&gt;encodeURIComponent&lt;/code&gt; がなければ、アンパサンドはサーバー上で新しいフィールドの始まりとして解釈され、データの整合性を危険にさらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="a2a4384a07fe7bac3504b23df1745b8a2d2a4643" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &lt;code&gt;Jack &amp;amp; Jill&lt;/code&gt;, the text may get encoded as &lt;code&gt;Jack &amp;amp;amp; Jill&lt;/code&gt;. Without &lt;code&gt;encodeURIComponent()&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">For example, if a user writes &lt;code&gt;Jack &amp;amp; Jill&lt;/code&gt; , the text may get encoded as &lt;code&gt;Jack &amp;amp;amp; Jill&lt;/code&gt; . Without &lt;code&gt;encodeURIComponent()&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</target>
        </trans-unit>
        <trans-unit id="5799cfe8931ec98fb88c4a0444b5af94210cf13a" translate="yes" xml:space="preserve">
          <source>For example, if the buffer is 16 bytes long, the &lt;code&gt;byteOffset&lt;/code&gt; is 8, and the &lt;code&gt;byteLength&lt;/code&gt; is 10, this error is thrown because the resulting view tries to extend 2 bytes past the total length of the buffer.</source>
          <target state="translated">たとえば、バッファの長さが16バイト、 &lt;code&gt;byteOffset&lt;/code&gt; が8、 &lt;code&gt;byteLength&lt;/code&gt; が10の場合、結果のビューがバッファの全長を2バイト超えて拡張しようとするため、このエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="f667de28c6f09dc72511b3c72cdbcf9a60a30c1b" translate="yes" xml:space="preserve">
          <source>For example, if you had an object with a property named &lt;code&gt;3d&lt;/code&gt;, it can only be referenced using bracket notation.</source>
          <target state="translated">For example, if you had an object with a property named &lt;code&gt;3d&lt;/code&gt; , it can only be referenced using bracket notation.</target>
        </trans-unit>
        <trans-unit id="9623036ffbe9cadc02b09fb197118440205870ef" translate="yes" xml:space="preserve">
          <source>For example, if you have &lt;strong&gt;multiple arguments&lt;/strong&gt; or &lt;strong&gt;no arguments&lt;/strong&gt;, you'll need to re-introduce parentheses around the arguments:</source>
          <target state="translated">For example, if you have &lt;strong&gt;multiple arguments&lt;/strong&gt; or &lt;strong&gt;no arguments&lt;/strong&gt;, you'll need to re-introduce parentheses around the arguments:</target>
        </trans-unit>
        <trans-unit id="244a2aa8b9cb3ab3a65881329256b99f1e2c5386" translate="yes" xml:space="preserve">
          <source>For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt;; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt;.</source>
          <target state="translated">For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt; ; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bbc03761f9eac4f5b7dd03a95b3ade42914f7efb" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; block it is not required to initialize variables:</source>
          <target state="translated">For example, in the &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; block it is not required to initialize variables:</target>
        </trans-unit>
        <trans-unit id="b02fbdba4483319e083506a278688555164aea94" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;em&gt;initialization&lt;/em&gt; block it is not required to initialize variables:</source>
          <target state="translated">たとえば、&lt;em&gt;初期化&lt;/em&gt;ブロックでは、変数を初期化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b10d4f788c270734ca92e90166633502ba4bbfb4" translate="yes" xml:space="preserve">
          <source>For example, in the following code an unhandled promise rejection error will be thrown, even if a &lt;code&gt;.catch&lt;/code&gt; handler has been configured further along the promise chain. This is because &lt;code&gt;p2&lt;/code&gt; will not be &quot;wired into&quot; the promise chain until control returns from &lt;code&gt;p1&lt;/code&gt;.</source>
          <target state="translated">For example, in the following code an unhandled promise rejection error will be thrown, even if a &lt;code&gt;.catch&lt;/code&gt; handler has been configured further along the promise chain. This is because &lt;code&gt;p2&lt;/code&gt; will not be &quot;wired into&quot; the promise chain until control returns from &lt;code&gt;p1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99ec1dd0889b0f7d806f56f4eb1bb18db712b1fb" translate="yes" xml:space="preserve">
          <source>For example, suppose a script does &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt;, and &lt;code&gt;obj&lt;/code&gt; is not a proxy, and has no own property &lt;code&gt;.name&lt;/code&gt;, but it has a proxy on its prototype chain. That proxy's &lt;code&gt;set&lt;/code&gt; handler will be called, and &lt;code&gt;obj&lt;/code&gt; will be passed as the receiver.</source>
          <target state="translated">たとえば、スクリプトが &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt; を実行し、 &lt;code&gt;obj&lt;/code&gt; がプロキシではなく、独自のプロパティ &lt;code&gt;.name&lt;/code&gt; を持たないが、プロトタイプチェーンにプロキシがあるとします。そのプロキシの &lt;code&gt;set&lt;/code&gt; ハンドラーが呼び出され、 &lt;code&gt;obj&lt;/code&gt; がレシーバーとして渡されます。</target>
        </trans-unit>
        <trans-unit id="71916a917e381d9f4baa72eb7d0f481b27298684" translate="yes" xml:space="preserve">
          <source>For example, the following are equivalent:</source>
          <target state="translated">例えば、以下のようなものが該当します。</target>
        </trans-unit>
        <trans-unit id="cf3c80207a4428c3e01d80e5b0a5f1cb417b40ef" translate="yes" xml:space="preserve">
          <source>For example, the following syntax is often seen in many scripts.</source>
          <target state="translated">例えば、以下のような構文は多くのスクリプトでよく見られます。</target>
        </trans-unit>
        <trans-unit id="0104484cd72318de837fc950dcc5c74b5243acc3" translate="yes" xml:space="preserve">
          <source>For example, the following two examples return same result.</source>
          <target state="translated">例えば、以下の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="2467e34ebb06a05a1bf1438ed09bb680f3c3c652" translate="yes" xml:space="preserve">
          <source>For example, the following two functions are equivalent.</source>
          <target state="translated">例えば、以下の2つの関数は等価です。</target>
        </trans-unit>
        <trans-unit id="0a5e19a07f0f940d54dbc5e573ed269580925a99" translate="yes" xml:space="preserve">
          <source>For example, the following:</source>
          <target state="translated">例えば、以下のようなものです。</target>
        </trans-unit>
        <trans-unit id="088fad1989d603ce1394ef481901b076020a1abe" translate="yes" xml:space="preserve">
          <source>For example, this code defines a simple target with just two properties, and an even simpler handler with no properties:</source>
          <target state="translated">例えば、このコードでは、2 つのプロパティだけのシンプルなターゲットと、プロパティを持たないよりシンプルなハンドラを定義しています。</target>
        </trans-unit>
        <trans-unit id="8762ede52d7e131b7a89f66401e61b7b5608dc17" translate="yes" xml:space="preserve">
          <source>For example, this syntax worked:</source>
          <target state="translated">例えば、この構文は機能しました。</target>
        </trans-unit>
        <trans-unit id="add9ffbfd10baafea3cde62754b319742dc998d8" translate="yes" xml:space="preserve">
          <source>For example, to return an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; instead of an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterator&lt;/a&gt;:</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;イテレータの&lt;/a&gt;代わりに&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を返すには：</target>
        </trans-unit>
        <trans-unit id="86aa87dc02431531a1951cc0ccafa84c378749c8" translate="yes" xml:space="preserve">
          <source>For example, when chaining expressions, trailing commas are not allowed.</source>
          <target state="translated">例えば、式を連結する際には、末尾のカンマを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="202acdf71c225449c011c82d77563f9f789c506e" translate="yes" xml:space="preserve">
          <source>For example, when using methods such as &lt;a href=&quot;global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; that returns the default constructor, you want these methods to return a parent &lt;code&gt;Array&lt;/code&gt; object, instead of the &lt;code&gt;MyArray&lt;/code&gt; object. The &lt;a href=&quot;global_objects/symbol/species&quot;&gt;&lt;code&gt;Symbol.species&lt;/code&gt;&lt;/a&gt; symbol lets you do this:</source>
          <target state="translated">たとえば、デフォルトのコンストラクタを返す&lt;a href=&quot;global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;などのメソッドを使用する場合、これらのメソッドが &lt;code&gt;MyArray&lt;/code&gt; オブジェクトではなく親の &lt;code&gt;Array&lt;/code&gt; オブジェクトを返すようにする必要があります。&lt;a href=&quot;global_objects/symbol/species&quot;&gt; &lt;code&gt;Symbol.species&lt;/code&gt; &lt;/a&gt;記号は、あなたがこれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="72cf8e5e4e01454d7bd5aec5a5d5f1e02a408d12" translate="yes" xml:space="preserve">
          <source>For example, with the following HTML:</source>
          <target state="translated">例えば、以下のようなHTMLで</target>
        </trans-unit>
        <trans-unit id="528dfe874f4c6aa065144a48883f47780d348e68" translate="yes" xml:space="preserve">
          <source>For example, you can use it on a single line:</source>
          <target state="translated">例えば、1行で使うことができます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="01a23d9503be041aca2248747ff63b7c2a66fcbb" translate="yes" xml:space="preserve">
          <source>For function calls:</source>
          <target state="translated">関数呼び出し用。</target>
        </trans-unit>
        <trans-unit id="4899d05a52dfbdd8e893cffe81a4b7588cd8afd5" translate="yes" xml:space="preserve">
          <source>For greater specificity in checking types, a &lt;code&gt;typeof&lt;/code&gt; wrapper for usage in production-level code would be as follows (provided &lt;code&gt;obj&lt;/code&gt; exists):</source>
          <target state="translated">For greater specificity in checking types, a &lt;code&gt;typeof&lt;/code&gt; wrapper for usage in production-level code would be as follows (provided &lt;code&gt;obj&lt;/code&gt; exists):</target>
        </trans-unit>
        <trans-unit id="f9351ecb7139ba4a292947d12e3373f477026a84" translate="yes" xml:space="preserve">
          <source>For instance, if another exception occurs inside a try's catch-block, any remaining code in the same outer try-block enclosing that try..catch (or in the main flow, if not in an outer try-block) , will not get executed, since control is immediately transferred to the outer try's catch-block (or the internal error-generator, if not in a try-block).</source>
          <target state="translated">例えば、tryのキャッチブロック内で別の例外が発生した場合、そのtry..catchを囲んでいる同じ外側のtryブロック(または外側のtryブロック内でない場合はメインフロー内)に残っているコードは実行されません。</target>
        </trans-unit>
        <trans-unit id="e5c59bc69ad175064d7452caaf3a7309c82376dd" translate="yes" xml:space="preserve">
          <source>For instance, if condition a is &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;return&lt;/code&gt; this templated literal.</source>
          <target state="translated">For instance, if condition a is &lt;code&gt;true&lt;/code&gt; , then &lt;code&gt;return&lt;/code&gt; this templated literal.</target>
        </trans-unit>
        <trans-unit id="3d6c2ff5aafe8379fafb6af50138a5bbb4622c48" translate="yes" xml:space="preserve">
          <source>For instance, the following example adds a method to the &lt;code&gt;Math&lt;/code&gt; object for calculating the &lt;em&gt;greatest common divisor&lt;/em&gt; of a list of arguments.</source>
          <target state="translated">たとえば、次の例では、引数リストの&lt;em&gt;最大公約数&lt;/em&gt;を計算するためのメソッドを &lt;code&gt;Math&lt;/code&gt; オブジェクトに追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1868c7d85f9039bc5f29a9b5c60931981ac4943c" translate="yes" xml:space="preserve">
          <source>For larger integers, consider using &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">For larger integers, consider using &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b0b6c7680b4411889f316e62858715f52104323d" translate="yes" xml:space="preserve">
          <source>For larger integers, consider using the &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">For larger integers, consider using the &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; type.</target>
        </trans-unit>
        <trans-unit id="21711d63e992ed5c39c7e55a8b4160a3ddd59a3e" translate="yes" xml:space="preserve">
          <source>For migrating away from String generics, see also &lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;Warning: String.x is deprecated; use String.prototype.x instead&lt;/a&gt;.</source>
          <target state="translated">Stringジェネリックからの移行については、&lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;警告：String.xは非推奨です。代わりにString.prototype.xを使用してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb079a75ce78aeb8e4751ad38cdd82e4e1931681" translate="yes" xml:space="preserve">
          <source>For more details and examples, see the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; reference page.</source>
          <target state="translated">詳細と例については、 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; リファレンスページを参照してください。</target>
        </trans-unit>
        <trans-unit id="e5c537fbbdfb46a6df802c4196646c039b2d58aa" translate="yes" xml:space="preserve">
          <source>For more details see the</source>
          <target state="translated">詳細については</target>
        </trans-unit>
        <trans-unit id="565399faf193cd242082c77a9136a91023cacc82" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="537acebfecc5ae5d569fe9aa4cc7353d681d905f" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;../global_objects/date/parse&quot;&gt;&lt;code&gt;Date.parse()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../global_objects/date/parse&quot;&gt; &lt;code&gt;Date.parse()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6ec7bb7f7f306725bc0cc8d0a9596c029c14e67e" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">その他の例と説明については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;関数に関するJavaScriptガイド&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="29d5f8519fba312b94a2d3d21282946efe02f428" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">For more examples and explanations, see also the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f8c75dccfa7bff0491d015e11249ba2e60cb980b" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;メソッドもご覧ください。</target>
        </trans-unit>
        <trans-unit id="7b1d54ba61f44c6833dff7ca5a653708fc668d09" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../intl/numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../intl/datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">For more examples, see also the &lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../intl/numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;../intl/datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; pages.</target>
        </trans-unit>
        <trans-unit id="bd469e9a34419903e864c6e6bb0279a91ed2b956" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;ページも参照してください。</target>
        </trans-unit>
        <trans-unit id="c0de23395c0de08f95a240914e3c72a06c77acc1" translate="yes" xml:space="preserve">
          <source>For more information (but slower execution) use &lt;a href=&quot;match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; (similar to the regular expression &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">For more information (but slower execution) use &lt;a href=&quot;match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt; (similar to the regular expression &lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; method).</target>
        </trans-unit>
        <trans-unit id="2b2a62fa06a569a4e71db2218e5ef99dea39c4d2" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;BigInt&lt;/code&gt;, see also &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#BigInt_type&quot;&gt;JavaScript data structures&lt;/a&gt;.</source>
          <target state="translated">For more information about &lt;code&gt;BigInt&lt;/code&gt; , see also &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#BigInt_type&quot;&gt;JavaScript data structures&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa45aa826bc67e52c3699e8add9da78f080b141c" translate="yes" xml:space="preserve">
          <source>For more information about the constructor syntax and the parameters, see &lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">コンストラクターの構文とパラメーターの詳細については、「&lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray&lt;/a&gt;&lt;/em&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb077bcb1697973ae809872951b88bd50d47f865" translate="yes" xml:space="preserve">
          <source>For more information and examples about methods, see &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definitions&lt;/a&gt;.</source>
          <target state="translated">メソッドの詳細と例については、&lt;a href=&quot;../functions/method_definitions&quot;&gt;メソッド定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4147ffff788ad6e8dd732f25c8f44303ca5eff09" translate="yes" xml:space="preserve">
          <source>For more information on ES2015 generators, see &lt;a href=&quot;statements/function*&quot;&gt;the function* documentation&lt;/a&gt;.</source>
          <target state="translated">ES2015ジェネレーターの詳細について&lt;a href=&quot;statements/function*&quot;&gt;は、function *のドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c20f6816b01b03bef7066dc636a8fdc827e288d4" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@replace&quot;&gt;&lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../regexp/@@replace&quot;&gt; &lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d249c0c1e1c5c8d53c7694847144936b46861ae" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@search&quot;&gt;&lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../regexp/@@search&quot;&gt; &lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="22a55ca163b96bcc1e7fca930dc6fbd5e236d8e6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@split&quot;&gt;&lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../regexp/@@split&quot;&gt; &lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b6e8482902bcbc4ca1024b1b563c87452c280bc6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;classes/private_class_fields&quot;&gt;private class fields&lt;/a&gt;.</source>
          <target state="translated">For more information, see &lt;a href=&quot;classes/private_class_fields&quot;&gt;private class fields&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3cadad1fb936cd59a173ee4ad751226d192504b1" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細はこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c3d3fb5e56a0795c1d85cbb417c634f7eb2a1bef" translate="yes" xml:space="preserve">
          <source>For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c0607794d251fdce700dc8d89c0e7d5e6e11c20f" translate="yes" xml:space="preserve">
          <source>For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0ff1246a9ef90a722598fb1022139c892f34d135" translate="yes" xml:space="preserve">
          <source>For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 2, the same as &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt;:</source>
          <target state="translated">負でない数値の場合、ゼロフィル右シフトと符号伝播右シフトは同じ結果になります。たとえば、 &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; は、 &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; と同じ2を返します。</target>
        </trans-unit>
        <trans-unit id="6d9507377b2f2c62fec727a5e7ce33f88d4c131d" translate="yes" xml:space="preserve">
          <source>For object &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">For object &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a object changes, the changes are visible to both the new and original arrays.</target>
        </trans-unit>
        <trans-unit id="948269bcb1af5d5bc928b45a45c3946fc9810b7e" translate="yes" xml:space="preserve">
          <source>For object literals (new in ECMAScript 2018):</source>
          <target state="translated">オブジェクトリテラルの場合(ECMAScript 2018の新機能)。</target>
        </trans-unit>
        <trans-unit id="934a86b954c8fa55f872d6a94658543d7acf642d" translate="yes" xml:space="preserve">
          <source>For object references (and not the actual object), &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">オブジェクト参照（実際のオブジェクトではない）の場合、 &lt;code&gt;slice&lt;/code&gt; はオブジェクト参照を新しい配列にコピーします。元の配列と新しい配列の両方が同じオブジェクトを参照しています。参照オブジェクトが変更された場合、変更は新しい配列と元の配列の両方に表示されます。</target>
        </trans-unit>
        <trans-unit id="f2ef7c7562983cf61dc4f265a8e5904aee8958ff" translate="yes" xml:space="preserve">
          <source>For octal &lt;code&gt;BigInt&lt;/code&gt; numbers, always use zero followed by the letter &quot;o&quot; (uppercase or lowercase):</source>
          <target state="translated">For octal &lt;code&gt;BigInt&lt;/code&gt; numbers, always use zero followed by the letter &quot;o&quot; (uppercase or lowercase):</target>
        </trans-unit>
        <trans-unit id="5af6e6762708ddaa2c5f00a451db70105ec9d12f" translate="yes" xml:space="preserve">
          <source>For octal escape sequences, you can use hexadecimal escape sequences instead:</source>
          <target state="translated">8進数のエスケープシーケンスの場合は、代わりに16進数のエスケープシーケンスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f9f59cbb942a8e1a9e18f6e55a2b55245320287c" translate="yes" xml:space="preserve">
          <source>For of iteration and destructuring</source>
          <target state="translated">反復と破壊のために</target>
        </trans-unit>
        <trans-unit id="68d3d4aadf2af6b1d406267a65a2761e6a41bcd2" translate="yes" xml:space="preserve">
          <source>For radices above &lt;code&gt;10&lt;/code&gt;, letters of the English alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt;. For example, for hexadecimal numbers (base &lt;code&gt;16&lt;/code&gt;), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</source>
          <target state="translated">For radices above &lt;code&gt;10&lt;/code&gt; , letters of the English alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt; . For example, for hexadecimal numbers (base &lt;code&gt;16&lt;/code&gt; ), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</target>
        </trans-unit>
        <trans-unit id="ec534dca289b00a3b54f4910479eff1332f34eb9" translate="yes" xml:space="preserve">
          <source>For several versions, Firefox's SpiderMonkey engine had &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;a bug&lt;/a&gt; with regard to the &lt;code&gt;^&lt;/code&gt; assertion and the sticky flag which allowed expressions starting with the &lt;code&gt;^&lt;/code&gt; assertion and using the sticky flag to match when they shouldn't. The bug was introduced some time after Firefox 3.6 (which had the sticky flag but not the bug) and fixed in 2015. Perhaps because of the bug, the ES2015 specification &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;specifically calls out&lt;/a&gt; the fact that:</source>
          <target state="translated">いくつかのバージョンでは、FirefoxのSpiderMonkeyのエンジンが持っていた&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;バグを&lt;/a&gt;に関して &lt;code&gt;^&lt;/code&gt; 式が始まる許可アサーションとスティッキーフラグ &lt;code&gt;^&lt;/code&gt; アサーションとするとき、彼らはいけないと一致するようにスティッキーフラグを使用して。このバグは、Firefox 3.6（スティッキーフラグはあったが、バグはなかった）の少し後に導入され、2015年に修正されました。おそらく、バグが原因で、ES2015仕様は&lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;特に次&lt;/a&gt;の事実を明らかにしています。</target>
        </trans-unit>
        <trans-unit id="93c92034cd1eb47a40c418b73dd2c65b5a95c260" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English, use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English, use &lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; &lt;/a&gt;. This function can compare those characters so they appear in the right order.</target>
        </trans-unit>
        <trans-unit id="4b46591f15bdd7e9992fad829386c92aad2d66b7" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English: use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">非ASCII文字を含む文字列、つまりアクセント付き文字（e、&amp;eacute;、&amp;egrave;、a、&amp;auml;など）を含む文字列を&lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; &lt;/a&gt;するには、英語以外の言語の文字列：String.localeCompareを使用します。この関数は、それらの文字を比較して、正しい順序で表示されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="540a56d0783c49dbe2c11278be8b492feebaf797" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number or boolean in one array do not affect the other array.</source>
          <target state="translated">文字列、数値、ブール値（&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトではない）の場合、 &lt;code&gt;slice&lt;/code&gt; は値を新しい配列にコピーします。1つの配列の文字列、数値、またはブール値を変更しても、他の配列には影響しません。</target>
        </trans-unit>
        <trans-unit id="9d444bd84437a0b6fcee2a95864c95e882927697" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number, or boolean in one array do not affect the other array.</source>
          <target state="translated">For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number, or boolean in one array do not affect the other array.</target>
        </trans-unit>
        <trans-unit id="06785c7ab3ceabe53e023cc803f4cbcf0a2ea208" translate="yes" xml:space="preserve">
          <source>For that reason, it is recommended to always declare variables at the top of their scope (the top of global code and the top of function code) so it's clear which variables are function scoped (local) and which are resolved on the scope chain.</source>
          <target state="translated">そのため、変数は常にスコープの一番上(グローバルコードの一番上と関数コードの一番上)で宣言することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1a8ab842102daf5a75a62664fc4cef78325333c6" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE &amp;lt; 9, then you will also need an Object.keys polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">上記のポリフィルコードスニペットで、IE &amp;lt;9のサポートが必要な場合は、Object.keysポリフィル（&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;ページにあるものなど）も必要です。</target>
        </trans-unit>
        <trans-unit id="2ff286ee9816975926ad2df5b818bca27d4aa4f3" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE&amp;lt;9, then you will also need an &lt;code&gt;Object.keys()&lt;/code&gt; polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">For the above polyfill code snippet, if you need support for IE&amp;lt;9, then you will also need an &lt;code&gt;Object.keys()&lt;/code&gt; polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; page).</target>
        </trans-unit>
        <trans-unit id="e86c69e41d5578c8ab620467b118befa7b4c82a3" translate="yes" xml:space="preserve">
          <source>For these reasons, the code may break when it encounters &lt;code&gt;String&lt;/code&gt; objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.</source>
          <target state="translated">これらの理由により、通常は作成者が区別を気にする必要はありませんが、代わりにプリミティブ文字列を予期しているときに &lt;code&gt;String&lt;/code&gt; オブジェクトに遭遇すると、コードが壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e795205d3a92bb247c9c7bd22a188d11d61d947e" translate="yes" xml:space="preserve">
          <source>For this example we need either to stay parent constructor to continue to work properly or reassign static properties to child's constructor:</source>
          <target state="translated">この例では、正常に動作するように親のコンストラクタを維持するか、静的プロパティを子のコンストラクタに再割り当てする必要があります。</target>
        </trans-unit>
        <trans-unit id="a80fbe0f90b18884c38de565a55619dfc8eef409" translate="yes" xml:space="preserve">
          <source>For this example we need to stay parent constructor to continue to work properly.</source>
          <target state="translated">この例では、正しく動作するためには親コンストラクタのままでいる必要があります。</target>
        </trans-unit>
        <trans-unit id="84d9ebf35a9fb052dc6520246e27e9c8406f4395" translate="yes" xml:space="preserve">
          <source>For this reason you cannot expect to be able to compare the results of &lt;code&gt;format()&lt;/code&gt; to a static value:</source>
          <target state="translated">このため、 &lt;code&gt;format()&lt;/code&gt; の結果を静的な値と比較できるとは期待できません。</target>
        </trans-unit>
        <trans-unit id="623d1636d2cb82911dcfaa1f03be33571ed68e0b" translate="yes" xml:space="preserve">
          <source>For this reason, you cannot expect to be able to compare the results of &lt;code&gt;toLocaleString()&lt;/code&gt; to a static value:</source>
          <target state="translated">For this reason, you cannot expect to be able to compare the results of &lt;code&gt;toLocaleString()&lt;/code&gt; to a static value:</target>
        </trans-unit>
        <trans-unit id="d60021b97245913ab5c4645ab6423ee66b339bfc" translate="yes" xml:space="preserve">
          <source>For top-level documents, two headers will need to be set to cross-origin isolate your site:</source>
          <target state="translated">トップレベルのドキュメントでは、2つのヘッダを設定して、クロスオリジンでサイトを分離する必要があります。</target>
        </trans-unit>
        <trans-unit id="b56658dd3fa703a5f77c5743fefd762f4e9d9be5" translate="yes" xml:space="preserve">
          <source>For top-level documents, two headers will need to be set:</source>
          <target state="translated">トップレベルのドキュメントでは、2つのヘッダを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7e72d021a9c7dcee914ef4ae15b51fa929f6676a" translate="yes" xml:space="preserve">
          <source>For values greater than 1 or less than -1, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">1より大きい値または-1より小さい値の場合、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="87dff4f71b0ce96c7e09b920f635128236b8af67" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.acos()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1未満または1より大きい値の場合、 &lt;code&gt;Math.acos()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="07875d85c183bca60211acd95bc562b6d1f1151b" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.asin()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1未満または1より大きい値の場合、 &lt;code&gt;Math.asin()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="dbccb44e1ad1d9938a16b005939cd9587366d68f" translate="yes" xml:space="preserve">
          <source>For values less than 1 &lt;code&gt;Math.acosh()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1 &lt;code&gt;Math.acosh()&lt;/code&gt; 値の場合、Math.acosh（）は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="9b6b3c574ade47a62c108d529c0e430d70e98212" translate="yes" xml:space="preserve">
          <source>For very small values of &lt;em&gt;x&lt;/em&gt;, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.</source>
          <target state="translated">&lt;em&gt;xの&lt;/em&gt;値が非常に小さい場合、1を追加すると精度が低下または排除される可能性があります。JSで使用される倍精度浮動小数点数は、約15桁の精度を提供します。1 + 1e-15 = 1.000000000000001、ただし1 + 1e-16 = 1.000000000000000、したがって15を超える桁は四捨五入されるため、その算術演算では正確に1.0。</target>
        </trans-unit>
        <trans-unit id="2bbd71eaf791bfb3f63adbb189825a54962439b5" translate="yes" xml:space="preserve">
          <source>For years between and including 1900 and 1999, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is between 0 and 99. For example, if the year is 1976, &lt;code&gt;getYear()&lt;/code&gt; returns 76.</source>
          <target state="translated">1900年から1999年までの年の場合、 &lt;code&gt;getYear()&lt;/code&gt; によって返される値は0から99の間です。たとえば、年が1976の場合、 &lt;code&gt;getYear()&lt;/code&gt; は76を返します。</target>
        </trans-unit>
        <trans-unit id="e42acf139f10d14a863cb22ae932066d8cc7564f" translate="yes" xml:space="preserve">
          <source>For years between and including 1900 and 1999, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is the year minus 1900. For example, if the year is 1976, the value returned is 76.</source>
          <target state="translated">1900年から1999年までの年の場合、 &lt;code&gt;getYear()&lt;/code&gt; によって返される値は年から1900を引いたものです。たとえば、年が1976の場合、返される値は76です。</target>
        </trans-unit>
        <trans-unit id="ca03ba2316c9371cee228c46bf88e3639ba32e55" translate="yes" xml:space="preserve">
          <source>For years greater than or equal to 2000, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is 100 or greater. For example, if the year is 2026, &lt;code&gt;getYear()&lt;/code&gt; returns 126.</source>
          <target state="translated">2000以上の年の場合、 &lt;code&gt;getYear()&lt;/code&gt; によって返される値は100以上です。たとえば、年が2026の場合、 &lt;code&gt;getYear()&lt;/code&gt; は126を返します。</target>
        </trans-unit>
        <trans-unit id="34007a6b1801033b144059d555c483ce55e3a15f" translate="yes" xml:space="preserve">
          <source>For years less than 1900 or greater than 1999, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.</source>
          <target state="translated">1900年未満または1999年を超える年の場合、 &lt;code&gt;getYear()&lt;/code&gt; によって返される値は4桁の年です。たとえば、年が1856の場合、返される値は1856です。年が2026の場合、返される値は2026です。</target>
        </trans-unit>
        <trans-unit id="ec139ce1d67e28d42838e5f9cf1549db614c6512" translate="yes" xml:space="preserve">
          <source>For years less than 1900, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is less than 0. For example, if the year is 1800, &lt;code&gt;getYear()&lt;/code&gt; returns -100.</source>
          <target state="translated">1900年未満の場合、 &lt;code&gt;getYear()&lt;/code&gt; によって返される値は0未満です。たとえば、年が1800の場合、 &lt;code&gt;getYear()&lt;/code&gt; は-100を返します。</target>
        </trans-unit>
        <trans-unit id="04e11fb6d3be3c51b3a94e7dbcd6c14d6c2cfa81" translate="yes" xml:space="preserve">
          <source>For-each-in loops are deprecated</source>
          <target state="translated">For-each-in ループは非推奨です。</target>
        </trans-unit>
        <trans-unit id="af0e67684b1c4abe6fb7b9901318f2329739aabd" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: Promises and Generators: control flow utopia -- JSConf EU 2013</source>
          <target state="translated">フォーブス・リンデッセイ 約束とジェネレーター:制御フローのユートピア --JSConf EU 2013</target>
        </trans-unit>
        <trans-unit id="7b32fb1f943493003851f2d112058fd52282df82" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: promisejs.org</source>
          <target state="translated">フォーブス リンデッセイ:promisejs.org</target>
        </trans-unit>
        <trans-unit id="a053925e9cf7d7a90e5b988e023b63f45b8b1600" translate="yes" xml:space="preserve">
          <source>Forgotten characters</source>
          <target state="translated">忘れられたキャラクター</target>
        </trans-unit>
        <trans-unit id="a6261dda713480f61e179215417e7e8c9ea57961" translate="yes" xml:space="preserve">
          <source>Forgotten closing curly bracket</source>
          <target state="translated">閉じ方を忘れた中括弧</target>
        </trans-unit>
        <trans-unit id="736612168ad4b2ebbdea7fc60c97a690632ed1ff" translate="yes" xml:space="preserve">
          <source>Forgotten comma</source>
          <target state="translated">カンマを忘れた</target>
        </trans-unit>
        <trans-unit id="55550d89e7ca43740394fa9c2e706f8405aa15d0" translate="yes" xml:space="preserve">
          <source>Form feed</source>
          <target state="translated">フォームフィード</target>
        </trans-unit>
        <trans-unit id="150d9f841097f64a42b925806fe3290abd9bc35d" translate="yes" xml:space="preserve">
          <source>Format String</source>
          <target state="translated">書式文字列</target>
        </trans-unit>
        <trans-unit id="c9564ba8c76d4110b57b41baba092e3a50ad181e" translate="yes" xml:space="preserve">
          <source>Format of Date.prototype.toString is standardised.</source>
          <target state="translated">Date.prototype.toStringのフォーマットが標準化されました。</target>
        </trans-unit>
        <trans-unit id="6303135fd457f5748b0f65e1c0ed6811b359b7fe" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;value&lt;/code&gt; and a &lt;code&gt;unit&lt;/code&gt; according to the locale and formatting options of the given &lt;a href=&quot;relativetimeformat&quot;&gt;&lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された&lt;a href=&quot;relativetimeformat&quot;&gt; &lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って、 &lt;code&gt;value&lt;/code&gt; と &lt;code&gt;unit&lt;/code&gt; をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="d885ea1814e7b1a55728852a1261e55f94c3db14" translate="yes" xml:space="preserve">
          <source>Formatting dates and numbers</source>
          <target state="translated">日付と数字の書式設定</target>
        </trans-unit>
        <trans-unit id="9137de70f2a2e3b29ff45205f6e6d3f76de7e217" translate="yes" xml:space="preserve">
          <source>Formatting dates: &lt;a href=&quot;../datetimeformat/formattoparts&quot;&gt;&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">日付のフォーマット：&lt;a href=&quot;../datetimeformat/formattoparts&quot;&gt; &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="98fa7137d9a2d748fcbbbfd8b1e23d8f46f9b4f2" translate="yes" xml:space="preserve">
          <source>Formatting dates: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt;&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">日付のフォーマット：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt; &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac8fc42d2b96064f7447761abb1d6b2a1cc4fe6c" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="d61bb5d1708bc7b38517ac71a7df63c26e5057f7" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="425c654a6ac340d691d752960a9e7f52569afd68" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="14546609f361e44ca966512a77290cf12a63fa3e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="60db126691b5722582058185268706c6e85661e3" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="99164b3e66d1fe611117c5f5c408c48a0336e80b" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="0a7997ac147da1feac14077729de0f0f06e382f0" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="787212c5a9c84503f45356ae7e6124bb9b8bca71" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="229f398e7f83b0bbc501b9d259ec99c5eadbf00e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="9dc5fa3b4b962f46918bf70fff9a0ed4d0005fe6" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="61573e9050bbc7f9716c65c5a5be5d32c4b6dd10" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt; の&lt;/a&gt;以前の非標準バージョン。</target>
        </trans-unit>
        <trans-unit id="01f10e37c5790e1fbab7120f2426462069f625d0" translate="yes" xml:space="preserve">
          <source>Fortunately, there's a very good alternative to &lt;code&gt;eval()&lt;/code&gt;: simply using &lt;a href=&quot;function&quot;&gt;&lt;code&gt;window.Function()&lt;/code&gt;&lt;/a&gt;. See this example of how to convert code using a dangerous &lt;code&gt;eval()&lt;/code&gt; to using &lt;code&gt;Function()&lt;/code&gt;, see below.</source>
          <target state="translated">Fortunately, there's a very good alternative to &lt;code&gt;eval()&lt;/code&gt; : simply using &lt;a href=&quot;function&quot;&gt; &lt;code&gt;window.Function()&lt;/code&gt; &lt;/a&gt;. See this example of how to convert code using a dangerous &lt;code&gt;eval()&lt;/code&gt; to using &lt;code&gt;Function()&lt;/code&gt; , see below.</target>
        </trans-unit>
        <trans-unit id="0accbe68619f41f048c00252dd5cd3de52b67409" translate="yes" xml:space="preserve">
          <source>Four digit year (at least), padded on the left with zeros if necessary</source>
          <target state="translated">4桁の年号(少なくとも)、必要に応じて左にゼロを入れてパディングします。</target>
        </trans-unit>
        <trans-unit id="48a73d90ee5399219a2b26ba8bbeaddc97c358c8" translate="yes" xml:space="preserve">
          <source>Fourth, strict mode prior to Gecko 34 requires that all properties named in an object literal be unique. The normal code may duplicate property names, with the last one determining the property's value. But since only the last one does anything, the duplication is simply a vector for bugs, if the code is modified to change the property value other than by changing the last instance. Duplicate property names are a syntax error in strict mode:</source>
          <target state="translated">第四に、Gecko 34 より前の strict mode では、オブジェクトリテラルの中で命名されたすべてのプロパティが一意であることが要求されます。通常のコードはプロパティ名を複製し、最後のものがプロパティの値を決定します。しかし、最後のものだけが何かをするので、コードが変更されて最後のインスタンスを変更する以外にプロパティの値が変更された場合、重複は単なるバグのためのベクトルになってしまいます。プロパティ名の重複は、厳密なモードでは構文エラーになります。</target>
        </trans-unit>
        <trans-unit id="4ca9f0aa5fd010590c2d9a5b1b7f430707dde52b" translate="yes" xml:space="preserve">
          <source>Freeing the contents of a variable</source>
          <target state="translated">変数の内容を解放する</target>
        </trans-unit>
        <trans-unit id="342be9907aff8d146abb693da5c5fbdf10b3bfd4" translate="yes" xml:space="preserve">
          <source>Freezes an object. Other code cannot delete or change its properties.</source>
          <target state="translated">オブジェクトを凍結します。他のコードでは、そのプロパティを削除したり変更したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="c12396c0b31eb0d4a22472ff15863783b40b01cf" translate="yes" xml:space="preserve">
          <source>Freezes an object: other code can't delete or change any properties.</source>
          <target state="translated">オブジェクトをフリーズさせる:他のコードではプロパティを削除したり変更したりできません。</target>
        </trans-unit>
        <trans-unit id="dda8928286e33df7e9ce870b122f4032e106574b" translate="yes" xml:space="preserve">
          <source>Freezing arrays</source>
          <target state="translated">配列の凍結</target>
        </trans-unit>
        <trans-unit id="fff69c46ec0f3f13c6b9d6db7e3128d82b5edef7" translate="yes" xml:space="preserve">
          <source>Freezing objects</source>
          <target state="translated">オブジェクトの凍結</target>
        </trans-unit>
        <trans-unit id="f845f4e8f7b96ac0598f032fd671c668cddf0fe3" translate="yes" xml:space="preserve">
          <source>From Chrome 42 to 48 strict mode is required. Non-strict mode support can be enabled using the flag &quot;Enable Experimental JavaScript&quot;.</source>
          <target state="translated">Chrome 42から48までは厳密なモードが必要です。厳密モード以外のサポートは、&quot;Enable Experimental JavaScript &quot;フラグを使用して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="a74d82ca6d704d6a1739c2f0ba541b688f9663fa" translate="yes" xml:space="preserve">
          <source>From ES2015 onwards, a non-object argument will be coerced to an object.</source>
          <target state="translated">ES2015以降は、オブジェクトではない引数がオブジェクトに強制されるようになりました。</target>
        </trans-unit>
        <trans-unit id="c25679ace478e563cd698a280a119eebace2f598" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Map.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13からFirefox 18まで、 &lt;code&gt;size&lt;/code&gt; プロパティは &lt;code&gt;Map.prototype.size()&lt;/code&gt; メソッドとして実装されていましたが、ECMAScript 2015仕様に準拠する新しいバージョンのプロパティに変更されました。</target>
        </trans-unit>
        <trans-unit id="0e0b399dc9eebfc7d1990373abc52e0d61c10f38" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Set.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13からFirefox 18まで、 &lt;code&gt;size&lt;/code&gt; プロパティは &lt;code&gt;Set.prototype.size()&lt;/code&gt; メソッドとして実装されていましたが、ECMAScript 2015仕様に準拠する新しいバージョンのプロパティに変更されました。</target>
        </trans-unit>
        <trans-unit id="551d3389162532e90e92d427f16e210eab0145b2" translate="yes" xml:space="preserve">
          <source>From Internet Explorer 5.5 through 8, all elements of the array will not be deleted if &lt;code&gt;deleteCount&lt;/code&gt; is omitted. This behavior was fixed in Internet Explorer 9.</source>
          <target state="translated">From Internet Explorer 5.5 through 8, all elements of the array will not be deleted if &lt;code&gt;deleteCount&lt;/code&gt; is omitted. This behavior was fixed in Internet Explorer 9.</target>
        </trans-unit>
        <trans-unit id="ee3161c209cb087ce7f1ec61b18e678d56621e54" translate="yes" xml:space="preserve">
          <source>From a Base64 string</source>
          <target state="translated">Base64文字列から</target>
        </trans-unit>
        <trans-unit id="e9fcc3ba0dacb2c33f5572d6513c46ec1f51af44" translate="yes" xml:space="preserve">
          <source>From a local file</source>
          <target state="translated">ローカルファイルから</target>
        </trans-unit>
        <trans-unit id="59ccfc107d86a4ba03bdf450f5345eccf7570e45" translate="yes" xml:space="preserve">
          <source>From a string</source>
          <target state="translated">文字列から</target>
        </trans-unit>
        <trans-unit id="3c0ab59efded56b63f6b9de125b17bebffc0ee1c" translate="yes" xml:space="preserve">
          <source>From an iterable object (Set)</source>
          <target state="translated">イテレート可能なオブジェクトから (Set)</target>
        </trans-unit>
        <trans-unit id="95b25b855817858fdde0a383b9816b0ebbbd9c77" translate="yes" xml:space="preserve">
          <source>From another static method</source>
          <target state="translated">別の静的メソッドから</target>
        </trans-unit>
        <trans-unit id="cdc7d2920f0a75374a2c82187a3825b5b375d499" translate="yes" xml:space="preserve">
          <source>From arguments to an array</source>
          <target state="translated">引数から配列へ</target>
        </trans-unit>
        <trans-unit id="edb7e13687c4fd064af515ae57c789b549d14b28" translate="yes" xml:space="preserve">
          <source>From class constructor and other methods</source>
          <target state="translated">クラスのコンストラクタなどのメソッドから</target>
        </trans-unit>
        <trans-unit id="1ab51c50144aa0f901d80f0ccd25700a9ed4ce50" translate="yes" xml:space="preserve">
          <source>From the JavaScript Guide:</source>
          <target state="translated">JavaScriptガイドより。</target>
        </trans-unit>
        <trans-unit id="3ce37f1321a1df7acda07b02703feaf9ec4a6639" translate="yes" xml:space="preserve">
          <source>Fulfillment</source>
          <target state="translated">Fulfillment</target>
        </trans-unit>
        <trans-unit id="c72c051b28b8c78171bcbcf2fd4fcfe0b74f3d7a" translate="yes" xml:space="preserve">
          <source>Fulfillment:</source>
          <target state="translated">Fulfillment:</target>
        </trans-unit>
        <trans-unit id="9b556da9671d8001f81148151b0a6bfa6ee1ec5c" translate="yes" xml:space="preserve">
          <source>Full JSON syntax</source>
          <target state="translated">完全なJSON構文</target>
        </trans-unit>
        <trans-unit id="479c6a660c8cca606924f9a8f60062ac60b95222" translate="yes" xml:space="preserve">
          <source>Full width digits</source>
          <target state="translated">全幅の桁数</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="94666812ce5866cd1a15db937596988239737375" translate="yes" xml:space="preserve">
          <source>Function Call</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="c17d72a13ca98610038debcb2b1acf449da4ad6e" translate="yes" xml:space="preserve">
          <source>Function Properties of the &lt;code&gt;Module&lt;/code&gt; Constructor</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; コンストラクターの関数プロパティ</target>
        </trans-unit>
        <trans-unit id="5bfbcebae9458d0af9e37589048c8edd93acdcad" translate="yes" xml:space="preserve">
          <source>Function body</source>
          <target state="translated">機能体</target>
        </trans-unit>
        <trans-unit id="19afabef296132b00adb34f8261f3cebd24ae6c3" translate="yes" xml:space="preserve">
          <source>Function call or new construction</source>
          <target state="translated">関数呼び出しまたは新規構築</target>
        </trans-unit>
        <trans-unit id="11a9b2d4161e5ad9ec54d8d926e757e2efe309de" translate="yes" xml:space="preserve">
          <source>Function call overhead is minimal, making the far smaller code size well worth the benefit</source>
          <target state="translated">関数呼び出しのオーバーヘッドは最小限に抑えられているため、コードサイズがはるかに小さくなり、そのメリットに見合うだけの価値があります。</target>
        </trans-unit>
        <trans-unit id="b6f490406ad4b3c4986a489d476e2a16ce80e13b" translate="yes" xml:space="preserve">
          <source>Function called on the wrong object</source>
          <target state="translated">間違ったオブジェクトで呼び出された関数</target>
        </trans-unit>
        <trans-unit id="307d58da1cb5c708acf50f78b41a528827c81cf8" translate="yes" xml:space="preserve">
          <source>Function calls</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="b00de2862aa946dfc63f1e8f57701a7ce09a0278" translate="yes" xml:space="preserve">
          <source>Function composition enabling piping</source>
          <target state="translated">配管を可能にする機能構成</target>
        </trans-unit>
        <trans-unit id="d1af7f91669f189668c5eb3a09479b4ab49a0508" translate="yes" xml:space="preserve">
          <source>Function constructor name</source>
          <target state="translated">関数コンストラクタ名</target>
        </trans-unit>
        <trans-unit id="ec3a38ff47b4e9447d9b4167f95723643ee1edca" translate="yes" xml:space="preserve">
          <source>Function context</source>
          <target state="translated">関数コンテキスト</target>
        </trans-unit>
        <trans-unit id="371cd61240f0b649474e4841824d099d52b4a785" translate="yes" xml:space="preserve">
          <source>Function declaration hoisting</source>
          <target state="translated">関数宣言掲揚</target>
        </trans-unit>
        <trans-unit id="964604cea11cd6874a8ee2a3a7585807e1d95455" translate="yes" xml:space="preserve">
          <source>Function declarations in JavaScript are hoisted to the top of the enclosing function or global scope. You can use the function before you declared it:</source>
          <target state="translated">JavaScriptでの関数宣言は、それを囲む関数やグローバルスコープの最上位に持ち上げられます。宣言する前の関数を使うことができます。</target>
        </trans-unit>
        <trans-unit id="0882844bfef9215bf1252619621dc4233118aee9" translate="yes" xml:space="preserve">
          <source>Function expression</source>
          <target state="translated">関数式</target>
        </trans-unit>
        <trans-unit id="17fb59f0733689ed2045be8aa3262ce6ec9a7435" translate="yes" xml:space="preserve">
          <source>Function expression hoisting</source>
          <target state="translated">関数式吊り上げ</target>
        </trans-unit>
        <trans-unit id="daae0e7952ba89448f51a03b65028ea3105791cd" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;&lt;code&gt;function declarations&lt;/code&gt;&lt;/a&gt;. You can't use function expressions before you define them:</source>
          <target state="translated">JavaScriptの関数式は、&lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt; &lt;code&gt;function declarations&lt;/code&gt; &lt;/a&gt;とは異なり、巻き上げられません。定義する前に関数式を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="c255ed20dadf629d5459965af68b505c200db729" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;function declarations&lt;/a&gt;. You can't use function expressions before you create them:</source>
          <target state="translated">Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;function declarations&lt;/a&gt;. You can't use function expressions before you create them:</target>
        </trans-unit>
        <trans-unit id="dc209ae9e238f3c0aff47d37bc404c3e7a2be0ad" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise. It accepts three arguments:</source>
          <target state="translated">関数は述語であり、配列の各要素をテストします。要素を保持する &lt;code&gt;true&lt;/code&gt; を、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。次の3つの引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="5127dd5f27f6c6a6d5f0d78ec539e5213cae7cca" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return a value that coerces to &lt;code&gt;true&lt;/code&gt; to keep the element, or to &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">Function is a predicate, to test each element of the array. Return a value that coerces to &lt;code&gt;true&lt;/code&gt; to keep the element, or to &lt;code&gt;false&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="5a44c442ae585c40fccbf2f6faa786a10212d74f" translate="yes" xml:space="preserve">
          <source>Function names for getters and setters</source>
          <target state="translated">ゲッターとセッターの関数名</target>
        </trans-unit>
        <trans-unit id="708c1dbb97c63bf19d7f91be53f2b8467bf5e2e1" translate="yes" xml:space="preserve">
          <source>Function names in classes</source>
          <target state="translated">クラス内の関数名</target>
        </trans-unit>
        <trans-unit id="fd9bc7843bf061faafecc018aa83931d7818ecba" translate="yes" xml:space="preserve">
          <source>Function object (implements [[Call]] in ECMA-262 terms)</source>
          <target state="translated">関数オブジェクト (ECMA-262用語では[[Call]]を実装しています)</target>
        </trans-unit>
        <trans-unit id="95796ca8b637d8dc40b037d8af4785cff79319f7" translate="yes" xml:space="preserve">
          <source>Function parameter definitions or function invocations only containing a comma will throw a &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. Furthermore, when using a &lt;a href=&quot;functions/rest_parameters&quot;&gt;rest parameters&lt;/a&gt;, trailing commas are not allowed:</source>
          <target state="translated">カンマのみを含む関数パラメーター定義または関数呼び出しは、&lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;をスローします。さらに、&lt;a href=&quot;functions/rest_parameters&quot;&gt;残りのパラメーター&lt;/a&gt;を使用する場合、末尾のコンマは使用できません。</target>
        </trans-unit>
        <trans-unit id="1e0d99529d66efa9e16b2a37d29fa7405450d6fd" translate="yes" xml:space="preserve">
          <source>Function parameters</source>
          <target state="translated">機能パラメータ</target>
        </trans-unit>
        <trans-unit id="672b8daa03c25145e5097f1862c9ef31387136fa" translate="yes" xml:space="preserve">
          <source>Function parameters must be identifiers when setting up a function. All these function declarations fail, as they are providing values for their parameters:</source>
          <target state="translated">関数を設定する際には、関数のパラメータは識別子でなければなりません。これらの関数宣言は、パラメータに値を提供しているため、すべて失敗します。</target>
        </trans-unit>
        <trans-unit id="5600fe54b54a8b636f91ef1623504e92aeaf1ae6" translate="yes" xml:space="preserve">
          <source>Function properties</source>
          <target state="translated">関数プロパティ</target>
        </trans-unit>
        <trans-unit id="6b465d97d33508de4883b2ea2aacf42b30c0c590" translate="yes" xml:space="preserve">
          <source>Function properties of the Global constructor</source>
          <target state="translated">グローバルコンストラクタの関数プロパティ</target>
        </trans-unit>
        <trans-unit id="96d13c4b058b0e3603f90420cc0657996a50eabb" translate="yes" xml:space="preserve">
          <source>Function scope in the JavaScript Guide</source>
          <target state="translated">JavaScriptガイドの関数スコープ</target>
        </trans-unit>
        <trans-unit id="ab4bd9f09183936227e630a7c7b39b941aaf5590" translate="yes" xml:space="preserve">
          <source>Function shares a name with a pre-existing property</source>
          <target state="translated">関数は既存のプロパティと名前を共有します。</target>
        </trans-unit>
        <trans-unit id="bd3b89a4a10cf13f1260aab66f1be84bb80af97e" translate="yes" xml:space="preserve">
          <source>Function statement</source>
          <target state="translated">関数文</target>
        </trans-unit>
        <trans-unit id="eafea940d1e511a0a2f1cebf6796b3477ec72210" translate="yes" xml:space="preserve">
          <source>Function statement name</source>
          <target state="translated">関数文名</target>
        </trans-unit>
        <trans-unit id="4cf12e2d177115edaad5e51ea329fbaa9987ccad" translate="yes" xml:space="preserve">
          <source>Function syntax</source>
          <target state="translated">関数構文</target>
        </trans-unit>
        <trans-unit id="ea4d890dd16623c5c8446dce95b5a932109c776b" translate="yes" xml:space="preserve">
          <source>Function that is called for every element of &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt;. Each time &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; executes, the returned value is added to &lt;code&gt;&lt;var&gt;new_array&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">Function that is called for every element of &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt; . Each time &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; executes, the returned value is added to &lt;code&gt;&lt;var&gt;new_array&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d8ee8398d60cc1a5f5c35466d2a76d13621895a" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new Array, taking three arguments:</source>
          <target state="translated">3 つの引数を取り、新しい配列の要素を生成する関数。</target>
        </trans-unit>
        <trans-unit id="e6f81952ca9f35c640c03b5be0a1ea2ca810fee4" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new typed array, taking three arguments:</source>
          <target state="translated">3つの引数を取り、新しい型付き配列の要素を生成する関数。</target>
        </trans-unit>
        <trans-unit id="e0aaa783b56f46ef91a7fcf55d33b81a0f903750" translate="yes" xml:space="preserve">
          <source>Function to execute for each element, taking three arguments:</source>
          <target state="translated">3つの引数を取り、各要素に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="0a9a09fba73beb71e3ec6b2f4fced16c535d8900" translate="yes" xml:space="preserve">
          <source>Function to execute for each element.</source>
          <target state="translated">各要素に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="8245e0a7fd1fb6820a2bdc6134a7f51effa836cd" translate="yes" xml:space="preserve">
          <source>Function to execute for each element. See &lt;a href=&quot;#Description&quot;&gt;Description&lt;/a&gt; for details.</source>
          <target state="translated">各要素に対して実行する関数。詳細については、&lt;a href=&quot;#Description&quot;&gt;説明&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="789b91b805025c1abb9b41a09ad7531dd443b8fd" translate="yes" xml:space="preserve">
          <source>Function to execute for each entry of &lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt;. It takes the following arguments:</source>
          <target state="translated">Function to execute for each entry of &lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt; . It takes the following arguments:</target>
        </trans-unit>
        <trans-unit id="e59e92aca05dfc3936638050c64046f21a70c72f" translate="yes" xml:space="preserve">
          <source>Function to execute on each element in the array, taking four arguments:</source>
          <target state="translated">4つの引数を取り、配列の各要素に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="8b0874ca6973cf3a686ef74edf9eb2c5aa9496a2" translate="yes" xml:space="preserve">
          <source>Function to execute on each element. It accepts between one and three arguments:</source>
          <target state="translated">各要素に対して実行される関数。1つから3つの間の引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="70dcfc2e124f327fc9032cb2b97496b173d1c660" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking 3 arguments:</source>
          <target state="translated">3つの引数を取り、配列の各値に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="d9c16d36fcae4e723d177e4453f6bedf0139948a" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking four arguments:</source>
          <target state="translated">4つの引数を取り、配列の各値に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="e6195e252567d35a10d21eb1e04df6a69d8cfbdf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking three arguments:</source>
          <target state="translated">3つの引数を取り、配列の各値に対して実行する関数です。</target>
        </trans-unit>
        <trans-unit id="06ab7f94fc517f961f4f408b0c5f87cd008986bf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking four arguments:</source>
          <target state="translated">4つの引数を取り、型付き配列の各値に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="5f6b934406be9d6249cdc1b3a19e92f08c41af81" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking three arguments:</source>
          <target state="translated">3つの引数を取り、型付き配列の各値に対して実行する関数。</target>
        </trans-unit>
        <trans-unit id="d0399838948b85571daab359e55567d43009c4e7" translate="yes" xml:space="preserve">
          <source>Function to test against</source>
          <target state="translated">に対してテストする機能</target>
        </trans-unit>
        <trans-unit id="3675e65254805019fa03ca3bbd0a78cd966d0b59" translate="yes" xml:space="preserve">
          <source>Function to test each element of the typed array. Invoked with arguments &lt;code&gt;(element, index, typedarray)&lt;/code&gt;. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">型付き配列の各要素をテストする関数。引数 &lt;code&gt;(element, index, typedarray)&lt;/code&gt; 呼び出されます。要素を保持する &lt;code&gt;true&lt;/code&gt; を、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5e7473d030993e2d6eb3f57687483d5d690862bd" translate="yes" xml:space="preserve">
          <source>Function to test for each element, taking three arguments:</source>
          <target state="translated">3つの引数を取り、各要素をテストするための関数。</target>
        </trans-unit>
        <trans-unit id="6dc02321ce201fb9e422a8eb5cc0645d8fa94712" translate="yes" xml:space="preserve">
          <source>Function.function</source>
          <target state="translated">Function.function</target>
        </trans-unit>
        <trans-unit id="ec0042429e084ef113ff136b415ef99aef55e4ca" translate="yes" xml:space="preserve">
          <source>Function.length</source>
          <target state="translated">Function.length</target>
        </trans-unit>
        <trans-unit id="fdbbb1ee0fc1df9dbe0f5ce2283603d07adf60ad" translate="yes" xml:space="preserve">
          <source>Function.name</source>
          <target state="translated">Function.name</target>
        </trans-unit>
        <trans-unit id="61048c595732199c0b042fcddcb8a4147d570f28" translate="yes" xml:space="preserve">
          <source>Function.prototype</source>
          <target state="translated">Function.prototype</target>
        </trans-unit>
        <trans-unit id="e8db8cd46941a2c6cb8556f8f50bea337d34209b" translate="yes" xml:space="preserve">
          <source>Function.prototype.toString result</source>
          <target state="translated">Function.prototype.toString 結果</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="c3b29c6be0b6a24a1feb33b3fab2c4f7ffa22f5d" translate="yes" xml:space="preserve">
          <source>Functions and classes</source>
          <target state="translated">関数とクラス</target>
        </trans-unit>
        <trans-unit id="a993a7d52a753df1bbff39ffb1b6921b25fde081" translate="yes" xml:space="preserve">
          <source>Functions and function scope</source>
          <target state="translated">機能と機能の範囲</target>
        </trans-unit>
        <trans-unit id="6673418c5f8022362be941a6c397594c4ab43b3a" translate="yes" xml:space="preserve">
          <source>Functions can be conditionally declared, that is, a function statement can be nested within an &lt;code&gt;if&lt;/code&gt; statement, however the results are inconsistent across implementations and therefore this pattern should not be used in production code. For conditional function creation, use function expressions instead.</source>
          <target state="translated">関数は条件付きで宣言できます。つまり、関数ステートメントを &lt;code&gt;if&lt;/code&gt; ステートメント内にネストできますが、実装間で結果に一貫性がないため、このパターンを本番用コードで使用しないでください。条件付き関数の作成には、代わりに関数式を使用してください。</target>
        </trans-unit>
        <trans-unit id="7a375adfd2b106044376f7940f10595ea47f0544" translate="yes" xml:space="preserve">
          <source>Functions created with the &lt;code&gt;Function&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;Function&lt;/code&gt; constructor was created. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a function expression.</source>
          <target state="translated">Function コンストラクターで作成された &lt;code&gt;Function&lt;/code&gt; は、作成コンテキストにクロージャーを作成しません。それらは常にグローバルスコープで作成されます。それらを実行すると、 &lt;code&gt;Function&lt;/code&gt; コンストラクターが作成されたスコープからのものではなく、独自のローカル変数とグローバル変数にのみアクセスできます。これは、関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用する場合とは異なります。</target>
        </trans-unit>
        <trans-unit id="59d73efc9d6d784f8d7600d608f8c956ab9681d7" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...) create&lt;/code&gt;&lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">構文 &lt;code&gt;new Function(...)&lt;/code&gt; または単に &lt;code&gt;Function(...) create&lt;/code&gt; &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;オブジェクトを作成し、その名前は「匿名」です。</target>
        </trans-unit>
        <trans-unit id="bd8f3ed7e9cf62bb2ef8799057f7ef8ed53c6712" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...)&lt;/code&gt; create &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...)&lt;/code&gt; create &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; objects and their name is &quot;anonymous&quot;.</target>
        </trans-unit>
        <trans-unit id="767b81b474f513e1ae3378489bb47b34cbac169b" translate="yes" xml:space="preserve">
          <source>Functions defined by function expressions and function declarations are parsed only once, while those defined by the &lt;code&gt;Function&lt;/code&gt; constructor are not. That is, the function body string passed to the &lt;code&gt;Function&lt;/code&gt; constructor must be parsed each and every time the constructor is called. Although a function expression creates a closure every time, the function body is not reparsed, so function expressions are still faster than &quot;&lt;code&gt;new Function(...)&lt;/code&gt;&quot;. Therefore the &lt;code&gt;Function&lt;/code&gt; constructor should generally be avoided whenever possible.</source>
          <target state="translated">関数式と関数宣言で定義された関数は一度だけ解析されますが、 &lt;code&gt;Function&lt;/code&gt; コンストラクターで定義された関数はそうではありません。つまり、 &lt;code&gt;Function&lt;/code&gt; コンストラクターに渡された関数本体文字列は、コンストラクターが呼び出されるたびに解析される必要があります。関数式は毎回クロージャを作成しますが、関数本体は再解析されないため、関数式は「 &lt;code&gt;new Function(...)&lt;/code&gt; 」よりも高速です。したがって、可能な場合は常に &lt;code&gt;Function&lt;/code&gt; コンストラクターを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="fea71cda87d91c331ea7710f6b634b839573601d" translate="yes" xml:space="preserve">
          <source>Functions defined inside function body</source>
          <target state="translated">関数本体内で定義された関数</target>
        </trans-unit>
        <trans-unit id="edd7fcd1cb74de67d317175dfdbe9485ebef1286" translate="yes" xml:space="preserve">
          <source>Functions in the JavaScript Guide</source>
          <target state="translated">JavaScriptガイドの関数</target>
        </trans-unit>
        <trans-unit id="bfa76ec20828c5499231c7f6de98463a13153ffb" translate="yes" xml:space="preserve">
          <source>Functions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed.</source>
          <target state="translated">自分自身を再帰的に呼び出す関数は、どのオブジェクトがすでに処理されているかを追跡することで、円形のデータ構造を防ぐ方法が必要です。</target>
        </trans-unit>
        <trans-unit id="808e29a2e402297441116279af3d78e2c5812556" translate="yes" xml:space="preserve">
          <source>Functions which are part of an object (apart from the global scope) can be deleted with &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの一部である関数（グローバルスコープを除く）は、 &lt;code&gt;delete&lt;/code&gt; を使用して削除できます。</target>
        </trans-unit>
        <trans-unit id="519b03d9cd4fe17b24fdac2c2c1f48f9d5d19463" translate="yes" xml:space="preserve">
          <source>Fundamental objects</source>
          <target state="translated">基本オブジェクト</target>
        </trans-unit>
        <trans-unit id="af96cb6cb2cb8bbbf404180840dbd3f203d28b86" translate="yes" xml:space="preserve">
          <source>Further calls to &lt;code&gt;test(&lt;var&gt;str&lt;/var&gt;)&lt;/code&gt; will resume searching &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; starting from &lt;code&gt;lastIndex&lt;/code&gt;. The &lt;code&gt;lastIndex&lt;/code&gt; property will continue to increase each time &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Further calls to &lt;code&gt;test(&lt;var&gt;str&lt;/var&gt;)&lt;/code&gt; will resume searching &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; starting from &lt;code&gt;lastIndex&lt;/code&gt; . The &lt;code&gt;lastIndex&lt;/code&gt; property will continue to increase each time &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e44c8b638baa470dbb5f127964c092cc77ea465" translate="yes" xml:space="preserve">
          <source>Further reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="f56da1ac0eed73b36f6abe8c31e7f536f9ed32f4" translate="yes" xml:space="preserve">
          <source>Further, this technique could be extended to create jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to erase all higher set bits so that clz can then be used.</source>
          <target state="translated">Further, this technique could be extended to create jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to erase all higher set bits so that clz can then be used.</target>
        </trans-unit>
        <trans-unit id="e0f4637b5c4a3036a3d75ea225910b8db3ffab0a" translate="yes" xml:space="preserve">
          <source>Further, this teqnique could be extended to creating jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to earase all higher set bits so that clz can then be used.</source>
          <target state="translated">さらに、このテクニックは、以下に示すように、ジャンプのない「Count Trailing Zeros」および「Count Trailing Ones」関数を作成するように拡張できます。以下の &lt;code&gt;ctrz&lt;/code&gt; 関数は、すべての上位ビットを最も低いビットで埋め、次にビットを否定して上位セットビットをすべて消去し、clzを使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="028e83b088bd223b83541d60f46f27cfb73bef3a" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;substr()&lt;/code&gt; is considered a &lt;strong&gt;legacy feature in ECMAScript&lt;/strong&gt; and could be removed from future versions, so it is best to avoid using it if possible.</source>
          <target state="translated">Furthermore, &lt;code&gt;substr()&lt;/code&gt; is considered a &lt;strong&gt;legacy feature in ECMAScript&lt;/strong&gt; and could be removed from future versions, so it is best to avoid using it if possible.</target>
        </trans-unit>
        <trans-unit id="e95bc397d4ac052736cf87b758eeb2c07cff1cb8" translate="yes" xml:space="preserve">
          <source>Future ECMAScript versions will likely introduce new syntax, and strict mode in ECMAScript 5 applies some restrictions to ease the transition. It will be easier to make some changes if the foundations of those changes are prohibited in strict mode.</source>
          <target state="translated">将来の ECMAScript のバージョンでは、新しい構文が導入される可能性が高く、ECMAScript 5 の strict mode では、その移行を容易にするためにいくつかの制限が適用されます。厳密モードでは、変更の基礎となる部分が禁止されている場合は、いくつかの変更を行うことが容易になります。</target>
        </trans-unit>
        <trans-unit id="c206106a39358ac1d296043204ca34946d2e58c3" translate="yes" xml:space="preserve">
          <source>Future reserved keywords</source>
          <target state="translated">今後の予約キーワード</target>
        </trans-unit>
        <trans-unit id="b493f1c7f16fd418270a7c7b36ea4521bd5a8305" translate="yes" xml:space="preserve">
          <source>Future reserved keywords in older standards</source>
          <target state="translated">古い規格の将来の予約キーワード</target>
        </trans-unit>
        <trans-unit id="eeec35195b8fa6e3f75a2d7f1965493078ca0bf3" translate="yes" xml:space="preserve">
          <source>GMT and UTC are considered equivalent. The local time zone is used to interpret arguments in &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt; format that do not contain time zone information.</source>
          <target state="translated">GMTとUTCは同等と見なされます。ローカルタイムゾーンは、タイムゾーン情報を含まない&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822セクション3.3&lt;/a&gt;形式の引数を解釈するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f0d653807dac2b51d6e8b14c89bde357143fb7fa" translate="yes" xml:space="preserve">
          <source>Garbage collection work can be split up over time using incremental and concurrent techniques.</source>
          <target state="translated">ゴミの収集作業は、インクリメンタルとコンカレントの技術を使って、時間をかけて分割することができます。</target>
        </trans-unit>
        <trans-unit id="48b5cf380b98788e6ec261d8df907dfa694f80ed" translate="yes" xml:space="preserve">
          <source>Gecko-specific notes</source>
          <target state="translated">ヤモリ特有の注意事項</target>
        </trans-unit>
        <trans-unit id="bf536d82538e3716aa45f22ff44fd02408c927f0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a function is a &quot;subprogram&quot; that can be &lt;em&gt;called&lt;/em&gt; by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the &lt;em&gt;function body&lt;/em&gt;. Values can be &lt;em&gt;passed&lt;/em&gt; to a function, and the function will &lt;em&gt;return&lt;/em&gt; a value.</source>
          <target state="translated">一般的に言えば、関数は関数の外部（再帰の場合は内部）のコードから&lt;em&gt;呼び出す&lt;/em&gt;ことができる「サブプログラム」です。プログラム自体と同様に、関数は&lt;em&gt;関数本体&lt;/em&gt;と呼ばれる一連のステートメントで構成されます。値は関数に&lt;em&gt;渡す&lt;/em&gt;ことができ、関数は値を&lt;em&gt;返し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="73d6b75809b724848c64268de10f6d2bb1d9bed7" translate="yes" xml:space="preserve">
          <source>Generally, if you don't know if a value is a promise or not, &lt;a href=&quot;promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve(value)&lt;/code&gt;&lt;/a&gt; it instead and work with the return value as a promise.</source>
          <target state="translated">Generally, if you don't know if a value is a promise or not, &lt;a href=&quot;promise/resolve&quot;&gt; &lt;code&gt;Promise.resolve(value)&lt;/code&gt; &lt;/a&gt; it instead and work with the return value as a promise.</target>
        </trans-unit>
        <trans-unit id="65a78dd223dd91fcaee9d90ee9beff7dff817351" translate="yes" xml:space="preserve">
          <source>Generally, in most code it's very rare to see &lt;code&gt;new&lt;/code&gt; used on a bound function, so it is generally best to go with the first option.</source>
          <target state="translated">Generally, in most code it's very rare to see &lt;code&gt;new&lt;/code&gt; used on a bound function, so it is generally best to go with the first option.</target>
        </trans-unit>
        <trans-unit id="37dfbd51d44cf4644175611088cd71ca34038f22" translate="yes" xml:space="preserve">
          <source>Generate a sequence of numbers</source>
          <target state="translated">数字の列を生成する</target>
        </trans-unit>
        <trans-unit id="1d20de03126b297e05c13a7d280f33e24c72c537" translate="yes" xml:space="preserve">
          <source>Generator</source>
          <target state="translated">Generator</target>
        </trans-unit>
        <trans-unit id="d3f2061539e543a51091b4d970d40aa70534574d" translate="yes" xml:space="preserve">
          <source>Generator Functions enable writing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;iterators&lt;/a&gt; more easily.</source>
          <target state="translated">ジェネレータ関数を使用すると、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;イテレータを&lt;/a&gt;より簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="e142f1d86c6a656c893b034d595c0a2c316a2572" translate="yes" xml:space="preserve">
          <source>Generator as a computed property</source>
          <target state="translated">計算されたプロパティとしてのジェネレータ</target>
        </trans-unit>
        <trans-unit id="94dba629617954b87149624231d0b9c8c8add564" translate="yes" xml:space="preserve">
          <source>Generator as an object method</source>
          <target state="translated">オブジェクトメソッドとしてのジェネレータ</target>
        </trans-unit>
        <trans-unit id="046b63f03e98ea467eac58a8c9e48fd5a3dbef60" translate="yes" xml:space="preserve">
          <source>Generator as an object property</source>
          <target state="translated">オブジェクトのプロパティとしてのジェネレータ</target>
        </trans-unit>
        <trans-unit id="3e6c1576c99e691366d463b6cc7261f52436128a" translate="yes" xml:space="preserve">
          <source>Generator comprehensions</source>
          <target state="translated">ジェネレータの理解</target>
        </trans-unit>
        <trans-unit id="ea618cb70bb6a900ab6754a69ae6cc8b7800d1ae" translate="yes" xml:space="preserve">
          <source>Generator comprehensions.</source>
          <target state="translated">ジェネレーターの理解。</target>
        </trans-unit>
        <trans-unit id="760f7f62ed1bb4c4df9cae1aeb12d6e6a7d3cff3" translate="yes" xml:space="preserve">
          <source>Generator defined in an expression</source>
          <target state="translated">式で定義されたジェネレータ</target>
        </trans-unit>
        <trans-unit id="8147ce33fc30c02f837dbffc168db88b0d2bb485" translate="yes" xml:space="preserve">
          <source>Generator example</source>
          <target state="translated">ジェネレータの例</target>
        </trans-unit>
        <trans-unit id="e794b11cba8f11ca654cb29060aa1e3ce3e6b0fd" translate="yes" xml:space="preserve">
          <source>Generator methods</source>
          <target state="translated">ジェネレータの方法</target>
        </trans-unit>
        <trans-unit id="c1435d362ab37b4b01f1069647bcc8d8375e7adc" translate="yes" xml:space="preserve">
          <source>Generator methods are not constructable (ES2016)</source>
          <target state="translated">ジェネレータメソッドが構築できない(ES2016)</target>
        </trans-unit>
        <trans-unit id="6048aba4df24c5f501add490c86e5a00ceca6ecf" translate="yes" xml:space="preserve">
          <source>GeneratorFunction</source>
          <target state="translated">GeneratorFunction</target>
        </trans-unit>
        <trans-unit id="2a0186662d51266237099d799c6ba09ec8791ee4" translate="yes" xml:space="preserve">
          <source>GeneratorFunction.prototype</source>
          <target state="translated">GeneratorFunction.prototype</target>
        </trans-unit>
        <trans-unit id="19b9eb24b04f641254c53a3e7f692e1ee1738460" translate="yes" xml:space="preserve">
          <source>Generators and iterators in Firefox versions before 26</source>
          <target state="translated">26以前のバージョンのFirefoxでのジェネレータとイテレータ</target>
        </trans-unit>
        <trans-unit id="598e59e5777c5d9c20fe8167bf445d2664315ae7" translate="yes" xml:space="preserve">
          <source>Generators are functions that can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">ジェネレータは、終了してから再入力することができる関数です。それらのコンテキスト(変数バインディング)は、再入力時にも保存されます。</target>
        </trans-unit>
        <trans-unit id="efc1c21247260851933d4a582e95a94e6b02af01" translate="yes" xml:space="preserve">
          <source>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">ジェネレータは、終了してから再入力することができる関数です。コンテキスト(変数バインディング)は、再入力時にも保存されます。</target>
        </trans-unit>
        <trans-unit id="869d87770dc1b9354d4e10914b5250ec24707455" translate="yes" xml:space="preserve">
          <source>Generators are not constructable</source>
          <target state="translated">ジェネレータは構築不可能</target>
        </trans-unit>
        <trans-unit id="4f0cd84055f0e4e5bb70077c4ce1a3815d964046" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;.</source>
          <target state="translated">JavaScriptのジェネレーター（特にPromiseと組み合わせた場合）は、&lt;a href=&quot;http://callbackhell.com/&quot;&gt;コールバック地獄&lt;/a&gt;や&lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;制御の反転&lt;/a&gt;などのコールバックの問題を完全に排除するわけではないにせよ、軽減する非同期プログラミングにとって非常に強力なツールです。</target>
        </trans-unit>
        <trans-unit id="289f27e87bbd62506b66c91bc83fb45e1ac1646b" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;. However, an even simpler solution to these problems can be achieved with &lt;a href=&quot;async_function&quot;&gt;async functions&lt;/a&gt;.</source>
          <target state="translated">Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;. However, an even simpler solution to these problems can be achieved with &lt;a href=&quot;async_function&quot;&gt;async functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="50585588be2138822abbe8f8b1df2809a6a3a359" translate="yes" xml:space="preserve">
          <source>Generators should not be re-used, even if the &lt;code&gt;for...of&lt;/code&gt; loop is terminated early, for example via the &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; keyword. Upon exiting a loop, the generator is closed and trying to iterate over it again does not yield any further results.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; ループが&lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;キーワードなどによって早期に終了した場合でも、ジェネレーターを再利用しないでください。ループを終了すると、ジェネレーターは閉じられ、ループをもう一度反復しようとしても、それ以上の結果は得られません。</target>
        </trans-unit>
        <trans-unit id="19ff32cabc04ec23eb1a5aec10de0239f6e32924" translate="yes" xml:space="preserve">
          <source>Generic function</source>
          <target state="translated">汎用関数</target>
        </trans-unit>
        <trans-unit id="857bc90faf0413b73759698277c41331ae085628" translate="yes" xml:space="preserve">
          <source>Generic methods (non-standard)</source>
          <target state="translated">汎用メソッド(非標準</target>
        </trans-unit>
        <trans-unit id="469e0788e79d852a9a805ea846c580f27362cc2a" translate="yes" xml:space="preserve">
          <source>Gentle explanation of 'this' keyword in JavaScript</source>
          <target state="translated">JavaScriptでの'this'キーワードの優しい説明</target>
        </trans-unit>
        <trans-unit id="01399544e6a6b247ebc9945e42a93b7039922a05" translate="yes" xml:space="preserve">
          <source>Georgian numerals &amp;mdash; algorithmic</source>
          <target state="translated">グルジア数字&amp;mdash;アルゴリズム</target>
        </trans-unit>
        <trans-unit id="f83d0b54329e66f173582e1190480dc976e5939b" translate="yes" xml:space="preserve">
          <source>Get Non-Enumerable Only</source>
          <target state="translated">非数値のみを取得</target>
        </trans-unit>
        <trans-unit id="96d7d9996736514d94d8665c714bc88031c21a2e" translate="yes" xml:space="preserve">
          <source>Get non-enumerable properties only</source>
          <target state="translated">数値化できないプロパティのみを取得する</target>
        </trans-unit>
        <trans-unit id="ac8081883e1d5686a080039aa13ba3a61df7e4fb" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since Unix Epoch</source>
          <target state="translated">Unix エポックからの秒数を取得します。</target>
        </trans-unit>
        <trans-unit id="cc48a219b2e420c26d82a0a469611fa88424b57a" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since the ECMAScript Epoch</source>
          <target state="translated">ECMAScript エポックからの秒数を取得します。</target>
        </trans-unit>
        <trans-unit id="24c89d564893863a779b5a6e9bbe9934dfe48687" translate="yes" xml:space="preserve">
          <source>Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの先頭から指定されたバイトオフセットの符号付き16ビット整数(ショート)を取得します。</target>
        </trans-unit>
        <trans-unit id="7c5b0df8b04a0c459aba5cd19fee72b7324990e0" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定したバイトオフセットの符号付き32ビットのフロート(float)を取得します。</target>
        </trans-unit>
        <trans-unit id="d609650bbdb5e336c7b9bb56379a37b51538aeea" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの先頭から指定したバイトオフセットの符号付き32ビット整数(long)を取得します。</target>
        </trans-unit>
        <trans-unit id="0e5cc6ced115c2b184167e3f8f66963001ef368a" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットの符号付き64ビットのfloat(double)を取得します。</target>
        </trans-unit>
        <trans-unit id="1dcff3ef5fec7543be1f9816175abb10166b11a3" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit integer (long long) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの先頭から指定されたバイトオフセットの符号付き64ビット整数(long long)を取得します。</target>
        </trans-unit>
        <trans-unit id="81db90d6ffde9b6412bbe66c68c47ef4e7743159" translate="yes" xml:space="preserve">
          <source>Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットの符号付き 8 ビット整数(バイト)を取得します。</target>
        </trans-unit>
        <trans-unit id="8fc72f256d25a90c98cdb40cba94a8871282ad94" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットに、符号なし 16 ビット整数(符号なしショート)を取得します。</target>
        </trans-unit>
        <trans-unit id="d7f4131283bcadf677ce4db2eedf7e688f79ab97" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットにある、符号なし 32 ビット整数(符号なしロング)を取得します。</target>
        </trans-unit>
        <trans-unit id="9e9ab26b9ed9c46b2c8810613671bb1eff49aa86" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 64-bit integer (unsigned long long) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセットで、符号なし64ビット整数(符号なしlong long long)を取得します。</target>
        </trans-unit>
        <trans-unit id="d5b761248a23b47f9e33c7eae9b8dc3f30519d6b" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">ビューの開始位置から指定されたバイトオフセット位置の符号なし 8 ビット整数(符号なしバイト)を取得します。</target>
        </trans-unit>
        <trans-unit id="517e73146e7ee4f454706494cbb5d4f32255eb4b" translate="yes" xml:space="preserve">
          <source>Gets the most likely values for the language, script, and region of the locale based on existing values.</source>
          <target state="translated">既存の値に基づいて、ロケールの言語、スクリプト、地域の最も可能性の高い値を取得します。</target>
        </trans-unit>
        <trans-unit id="96857c88cebeabc578d887e01fbcb2fd02cbcdb7" translate="yes" xml:space="preserve">
          <source>Getter</source>
          <target state="translated">Getter</target>
        </trans-unit>
        <trans-unit id="f2e54c330cdd01c6d47ab5b44eb43fb8cf8f5947" translate="yes" xml:space="preserve">
          <source>Getter and setter functions</source>
          <target state="translated">ゲッターとセッター関数</target>
        </trans-unit>
        <trans-unit id="c2c017ff0a7d1ff62b3f698df3acbdea5c0a8d2a" translate="yes" xml:space="preserve">
          <source>Getter function that compares two strings according to the sort order of this &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;オブジェクトのソート順に従って2つの文字列を比較するゲッター関数。</target>
        </trans-unit>
        <trans-unit id="9d4fcdb364f11755535ec293d4d71f80eeed9d8d" translate="yes" xml:space="preserve">
          <source>Getter function that formats a date according to the locale and formatting options of this &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って日付をフォーマットするゲッター関数。</target>
        </trans-unit>
        <trans-unit id="22ac10018fde177456efdcb94558b350e814fc69" translate="yes" xml:space="preserve">
          <source>Getter function that formats a number according to the locale and formatting options of this &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この&lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って数値をフォーマットするゲッター関数。</target>
        </trans-unit>
        <trans-unit id="cb65abe3705de84bc96c85c734723746cfaff77d" translate="yes" xml:space="preserve">
          <source>Getter only</source>
          <target state="translated">ゲッターのみ</target>
        </trans-unit>
        <trans-unit id="b82e2aa4437224c3ce65ca8da908b4469c7c2482" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;オブジェクトの並べ替え順序に従って2つの文字列を比較する関数を返します。</target>
        </trans-unit>
        <trans-unit id="c22fac77c009059affb217382c064ececfc99ac0" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;オブジェクトの並べ替え順序に従って2つの文字列を比較する関数を返します。</target>
        </trans-unit>
        <trans-unit id="b3bbfe3f0cad3780f6ed32aa64f5415f3f02b3ea" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って日付をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="101493502c3dabb33abe624e85075b4278d7088d" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って日付をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="0d595a3294f368cb93ba183d5cf3d0d933407b9a" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って数値をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="d32338c2f6c2e1ff3f7f292dd7d93f2f42a2385e" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ゲッター; この&lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って数値をフォーマットする関数を返します。</target>
        </trans-unit>
        <trans-unit id="84e6081823bf6b4731797c6da752dd3058121ab9" translate="yes" xml:space="preserve">
          <source>Getters and setters are special methods that bind to a class property and are called when that property is accessed or set. Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;set&lt;/a&gt; syntax to declare a public instance getter or setter.</source>
          <target state="translated">ゲッターとセッターは、クラスプロパティにバインドする特別なメソッドであり、そのプロパティがアクセスまたは設定されたときに呼び出されます。使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot;&gt;GET&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;セット&lt;/a&gt;パブリックインスタンスゲッターやセッターを宣言するための構文を。</target>
        </trans-unit>
        <trans-unit id="f51c7283f5fc0d078770fc5011a7b53470280401" translate="yes" xml:space="preserve">
          <source>Getters give you a way to &lt;em&gt;define&lt;/em&gt; a property of an object, but they do not &lt;em&gt;calculate&lt;/em&gt; the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.</source>
          <target state="translated">Getters give you a way to &lt;em&gt;define&lt;/em&gt; a property of an object, but they do not &lt;em&gt;calculate&lt;/em&gt; the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.</target>
        </trans-unit>
        <trans-unit id="d8ea8a70e0c66dbc7cdb18bf43206be829e1c2b4" translate="yes" xml:space="preserve">
          <source>Getters give you a way to define a property of an object, but they do not calculate the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed, and if it is never needed, you never pay the cost.</source>
          <target state="translated">ゲッターはオブジェクトのプロパティを定義する方法を提供しますが、アクセスされるまでプロパティの値を計算しません。ゲッターは、値が必要になるまで値を計算するためのコストを延期し、値が必要になることがなければコストを支払うことはありません。</target>
        </trans-unit>
        <trans-unit id="b65d9b412c6df59f988b1cc08ddee0764855c0ac" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values</source>
          <target state="translated">2つの値の間のランダムな整数を取得する</target>
        </trans-unit>
        <trans-unit id="e006e97377ead1206e5712837e81f4c8008e48bd" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values, inclusive</source>
          <target state="translated">2つの値の間のランダムな整数を取得します。</target>
        </trans-unit>
        <trans-unit id="a7aaee129f91cb0de88f607c96a13e02b3eadf9e" translate="yes" xml:space="preserve">
          <source>Getting a random number between 0 (inclusive) and 1 (exclusive)</source>
          <target state="translated">0(含む)と1(含む)の間の乱数の取得</target>
        </trans-unit>
        <trans-unit id="e7e9b5402b7c69e9cfcf0a3dc0c6734f74f10e42" translate="yes" xml:space="preserve">
          <source>Getting a random number between two values</source>
          <target state="translated">2つの値の間の乱数を取得する</target>
        </trans-unit>
        <trans-unit id="9cdb6a445dbcaa1ef224574cb3e4c4af50c03c03" translate="yes" xml:space="preserve">
          <source>Getting an array buffer from existing data</source>
          <target state="translated">既存のデータから配列バッファを取得する</target>
        </trans-unit>
        <trans-unit id="0c5070744f1dae1186acd94d2236210213d9a650" translate="yes" xml:space="preserve">
          <source>Getting it to work with higher values</source>
          <target state="translated">より高い値で動作するようにする</target>
        </trans-unit>
        <trans-unit id="95954ee87db9f0acbfea36a4c6b6016a61fd3d3e" translate="yes" xml:space="preserve">
          <source>Getting the global context: &lt;a href=&quot;../global_objects/globalthis&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Getting the global context: &lt;a href=&quot;../global_objects/globalthis&quot;&gt; &lt;code&gt;globalThis&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93fa8562e2ad496efa70d8d322f9289d62409ab4" translate="yes" xml:space="preserve">
          <source>Getting the maximum element of an array</source>
          <target state="translated">配列の最大要素を取得する</target>
        </trans-unit>
        <trans-unit id="159afb1c4f6c9a04181e9922b1f6ba14fa8bf7f4" translate="yes" xml:space="preserve">
          <source>Getting whole characters</source>
          <target state="translated">キャラクター全体の取得</target>
        </trans-unit>
        <trans-unit id="c7b80d1da362b36bfdf86ed39ef7c4eb5beb6a45" translate="yes" xml:space="preserve">
          <source>Github - Proposal-pipeline-operator</source>
          <target state="translated">Github-提案書-パイプラインオペレータ</target>
        </trans-unit>
        <trans-unit id="1ccf04e9757d71b593670b6503b8dfb8626fea28" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns 'border-top'.</source>
          <target state="translated">与えられた &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; 、この'border-top'を返します。</target>
        </trans-unit>
        <trans-unit id="1cbcc3faa93f2d068c8c5e13ce1cbe4bbad1c49e" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns &lt;code&gt;'border-top'&lt;/code&gt;.</source>
          <target state="translated">Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; , this returns &lt;code&gt;'border-top'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8cf85e175fcc3bf8d435c791b50a25d2626fc4d0" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt; and string, returns a copy of the contents of all custom sections in the module with the given string name.</source>
          <target state="translated">与えられた &lt;code&gt;Module&lt;/code&gt; と文字列、指定された文字列名を持つモジュール内のすべてのカスタムセクションの内容のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="71816309ab49deddc634406a637aa5de13c077ff" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared exports.</source>
          <target state="translated">与えられた &lt;code&gt;Module&lt;/code&gt; 、宣言されたすべての輸出の記述を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="f856fccf3beb4cca4ef1ea953cc00f8bd48e12ac" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared imports.</source>
          <target state="translated">与えられた &lt;code&gt;Module&lt;/code&gt; 、宣言されたすべての輸入品の説明を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="dd5ae485e18c7c0ddc8083d7c7bb31df74e1088c" translate="yes" xml:space="preserve">
          <source>Given a date string of &lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given an ISO format such as &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">&lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt; 日付文字列を指定すると、 &lt;code&gt;parse()&lt;/code&gt; はローカルタイムゾーンを想定しますが、 &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; などのISO形式を指定すると、UTC（ES5およびECMAScript 2015）のタイムゾーンを想定します。したがって、これらの文字列を使用して生成された&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトは、システムがUTCのローカルタイムゾーンで設定されていない限り、サポートされているECMAScriptのバージョンによって異なる瞬間を表す場合があります。つまり、等価に見える2つの日付文字列は、変換される文字列の形式に応じて、2つの異なる値になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9c73621eb8378bc40ca8b96e5182b675e0b3c0c" translate="yes" xml:space="preserve">
          <source>Given a module &lt;code&gt;my-module.js&lt;/code&gt;</source>
          <target state="translated">モジュール &lt;code&gt;my-module.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6e9202ed4a0bee0090059436feae9f4d70aaff5" translate="yes" xml:space="preserve">
          <source>Given a non-standard date string of &quot;&lt;code&gt;March 7, 2014&lt;/code&gt;&quot;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given a simplification of the ISO 8601 calendar date extended format such as &quot;&lt;code&gt;2014-03-07&lt;/code&gt;&quot;, it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">Given a non-standard date string of &quot; &lt;code&gt;March 7, 2014&lt;/code&gt; &quot;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given a simplification of the ISO 8601 calendar date extended format such as &quot; &lt;code&gt;2014-03-07&lt;/code&gt; &quot;, it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</target>
        </trans-unit>
        <trans-unit id="35be346396e126b3b89b1cd82cc0c32b468472ae" translate="yes" xml:space="preserve">
          <source>Given a shared &lt;code&gt;Int32Array&lt;/code&gt;:</source>
          <target state="translated">共有された &lt;code&gt;Int32Array&lt;/code&gt; が与えられた場合：</target>
        </trans-unit>
        <trans-unit id="d6fd3993d58d86b8a2d1b9dacc8bf0a3179cf150" translate="yes" xml:space="preserve">
          <source>Given a string representing a time, &lt;code&gt;parse()&lt;/code&gt; returns the time value. It accepts the RFC2822 / IETF date syntax (&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt;), e.g. &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt;. It understands the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian).</source>
          <target state="translated">時間を表す文字列を指定すると、 &lt;code&gt;parse()&lt;/code&gt; は時間の値を返します。RFC2822 / IETF日付構文（&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822セクション3.3&lt;/a&gt;）を受け入れます（例： &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt; 。米国大陸のタイムゾーンの省略形を理解しますが、一般的に使用するには、タイムゾーンオフセットを使用します。たとえば、 &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; （グリニッジ子午線の東4時間30分）です。</target>
        </trans-unit>
        <trans-unit id="95e6727da6ca58f8c51ff5196575c2e7fcac3248" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example counts the number of items that passes all the tests.</source>
          <target state="translated">項目の配列とテストの配列を指定すると、この例ではすべてのテストに合格した項目の数をカウントします。</target>
        </trans-unit>
        <trans-unit id="ed0e87792cb402fa5496b2410e4f2a4d126225e0" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example determines whether all items pass all tests.</source>
          <target state="translated">項目の配列とテストの配列があると、この例では、すべての項目がすべてのテストに合格するかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="ce988ebc4e75168602f3d1de0e938f1b059ff589" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">モジュール &lt;code&gt;my-module&lt;/code&gt; から暗黙的に（モジュール全体がエクスポートされるため）または明示的に（&lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;ステートメントを使用して）エクスポートされた &lt;code&gt;myExport&lt;/code&gt; という名前のオブジェクトまたは値を指定すると、 &lt;code&gt;myExport&lt;/code&gt; が現在のスコープに挿入されます。</target>
        </trans-unit>
        <trans-unit id="69376498e6019aa34656f953a77822cfbd1dc255" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported, for example using &lt;code&gt;export * from 'another.js'&lt;/code&gt;) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported, for example using &lt;code&gt;export * from 'another.js'&lt;/code&gt; ) or explicitly (using the &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</target>
        </trans-unit>
        <trans-unit id="36f6b120ef9e249fbfdff73698868c21b30ab839" translate="yes" xml:space="preserve">
          <source>Given at least a year and month, this form of &lt;code&gt;Date()&lt;/code&gt; returns a &lt;code&gt;Date&lt;/code&gt; object whose component values (year, month, day, hour, minute, second, and millisecond) all come from the following parameters. Any missing fields are given the lowest possible value (&lt;code&gt;1&lt;/code&gt; for &lt;code&gt;&lt;var&gt;day&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; for every other component).</source>
          <target state="translated">少なくとも年と月が与えられると、この形式の &lt;code&gt;Date()&lt;/code&gt; は、コンポーネント値（年、月、日、時、分、秒、およびミリ秒）がすべて次のパラメーターから取得される &lt;code&gt;Date&lt;/code&gt; オブジェクトを返します。欠落しているフィールドには、可能な限り低い値が与えられます（ &lt;code&gt;1&lt;/code&gt; 日は &lt;code&gt;&lt;var&gt;day&lt;/var&gt;&lt;/code&gt; 、他のすべてのコンポーネントは &lt;code&gt;0&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ffa489942e5ce90ee9348d67bca34bc046d3d1a8" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;for...in&lt;/code&gt; is built for iterating object properties, not recommended for use with arrays, and options like &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; exist, what might be the use of &lt;code&gt;for...in&lt;/code&gt; at all?</source>
          <target state="translated">Given that &lt;code&gt;for...in&lt;/code&gt; is built for iterating object properties, not recommended for use with arrays, and options like &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; exist, what might be the use of &lt;code&gt;for...in&lt;/code&gt; at all?</target>
        </trans-unit>
        <trans-unit id="57777d79c2c7fcb95a77d48ba531eb7fb132081d" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">ことを考えると &lt;code&gt;this&lt;/code&gt; 、周囲の字句文脈から来て、&lt;a href=&quot;../strict_mode&quot;&gt;厳格なモード&lt;/a&gt;に関する規則 &lt;code&gt;this&lt;/code&gt; 無視されます。</target>
        </trans-unit>
        <trans-unit id="118a8602658c501cc841b17b0c4e058cb5605a35" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;code&gt;&lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/code&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;code&gt;&lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/code&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</target>
        </trans-unit>
        <trans-unit id="54f2ff8a238acabb2079588d5c2033656ef069ee" translate="yes" xml:space="preserve">
          <source>Given the following code:</source>
          <target state="translated">以下のコードが与えられているとします。</target>
        </trans-unit>
        <trans-unit id="66cc8f0aba96a51c396c49f13e7a6a7e2cfea340" translate="yes" xml:space="preserve">
          <source>Global Context</source>
          <target state="translated">グローバルコンテキスト</target>
        </trans-unit>
        <trans-unit id="b5cdadeb82c625264f87984cdb7712780b8ec0e8" translate="yes" xml:space="preserve">
          <source>Global Objects</source>
          <target state="translated">グローバルオブジェクト</target>
        </trans-unit>
        <trans-unit id="9c1d41d613e2de602e0cfbbc37dd6fb38c9598e2" translate="yes" xml:space="preserve">
          <source>Global context</source>
          <target state="translated">グローバルコンテキスト</target>
        </trans-unit>
        <trans-unit id="d1a3f442a9873910f12738a060cce503718a5808" translate="yes" xml:space="preserve">
          <source>Global instances</source>
          <target state="translated">グローバルインスタンス</target>
        </trans-unit>
        <trans-unit id="6c1092b384c391c235bf0f03a6b067bc9829d4dd" translate="yes" xml:space="preserve">
          <source>Global objects</source>
          <target state="translated">グローバルオブジェクト</target>
        </trans-unit>
        <trans-unit id="8a4af69f1f63429ee0c62b75219b583716fe311b" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;global and ignore case flags&lt;/a&gt; which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of &lt;code&gt;'apples'&lt;/code&gt; in the string with &lt;code&gt;'oranges'&lt;/code&gt;.</source>
          <target state="translated">Global replace can only be done with a regular expression. In the following example, the regular expression includes the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;global and ignore case flags&lt;/a&gt; which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of &lt;code&gt;'apples'&lt;/code&gt; in the string with &lt;code&gt;'oranges'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20c3687f785130a94e95b82635515a9bed2f11aa" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of 'apples' in the string with 'oranges'.</source>
          <target state="translated">グローバル置換は、正規表現でのみ実行できます。次の例では、正規表現にグローバルと無視のフラグが含まれており、 &lt;code&gt;replace()&lt;/code&gt; で文字列内の「apples」が出現するたびに「oranges」に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="fcd2f358507f46dacf4e333df045d970161f3961" translate="yes" xml:space="preserve">
          <source>Global search.</source>
          <target state="translated">グローバル検索。</target>
        </trans-unit>
        <trans-unit id="167937e0f76150c8fbf7b4c427c862e86b880570" translate="yes" xml:space="preserve">
          <source>Global symbol registry</source>
          <target state="translated">グローバルシンボルレジストリ</target>
        </trans-unit>
        <trans-unit id="2d42c9982fdb6c0ca28b87b881b760533f39e3bf" translate="yes" xml:space="preserve">
          <source>Glossary: &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt;</source>
          <target state="translated">Glossary: &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b29ffb55e0badb65375a434cf64ab1147fe24e3" translate="yes" xml:space="preserve">
          <source>Glossary: Symbol data type</source>
          <target state="translated">用語集 シンボルデータ型</target>
        </trans-unit>
        <trans-unit id="3ed7f82aff7c093f6dce93e01e74889c131e51f5" translate="yes" xml:space="preserve">
          <source>Good variable names</source>
          <target state="translated">良い変数名</target>
        </trans-unit>
        <trans-unit id="693f74831dc013209e1555b1f5c7cc96e6a7244c" translate="yes" xml:space="preserve">
          <source>Google Chrome will accept a numerical string as a valid &lt;code&gt;&lt;em&gt;dateString&lt;/em&gt;&lt;/code&gt; parameter. This means that, for instance, while &lt;code&gt;!!Date.parse(&quot;42&quot;)&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; in Firefox, it evaluates to &lt;code&gt;true&lt;/code&gt; in Google Chrome because &quot;&lt;code&gt;42&lt;/code&gt;&quot; is interpreted as January 1&lt;sup&gt;st&lt;/sup&gt;, 2042.</source>
          <target state="translated">Google Chrome will accept a numerical string as a valid &lt;code&gt;&lt;em&gt;dateString&lt;/em&gt;&lt;/code&gt; parameter. This means that, for instance, while &lt;code&gt;!!Date.parse(&quot;42&quot;)&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; in Firefox, it evaluates to &lt;code&gt;true&lt;/code&gt; in Google Chrome because &quot; &lt;code&gt;42&lt;/code&gt; &quot; is interpreted as January 1&lt;sup&gt;st&lt;/sup&gt;, 2042.</target>
        </trans-unit>
        <trans-unit id="18e43c184811802315da94a97ea03158c2b342c5" translate="yes" xml:space="preserve">
          <source>Gotchas when throwing errors</source>
          <target state="translated">エラーを投げるときのゴッチャ</target>
        </trans-unit>
        <trans-unit id="c48b6eab0a11f2fb1311c4134683f1d6408941fe" translate="yes" xml:space="preserve">
          <source>Graceful asynchronous programming with promises</source>
          <target state="translated">プロミスを用いた優雅な非同期プログラミング</target>
        </trans-unit>
        <trans-unit id="755f5dc8338fdd2b9f3422f770363e935afd3aac" translate="yes" xml:space="preserve">
          <source>Gradual transition</source>
          <target state="translated">漸進的な移行</target>
        </trans-unit>
        <trans-unit id="7be07c875cfba8e109b4abbd611ba4cce5fd4c77" translate="yes" xml:space="preserve">
          <source>Greater Than</source>
          <target state="translated">凌駕</target>
        </trans-unit>
        <trans-unit id="661a1cf195498e4d5ef48d28086f549d7a9f9e52" translate="yes" xml:space="preserve">
          <source>Greater Than Or Equal</source>
          <target state="translated">大なり</target>
        </trans-unit>
        <trans-unit id="599294f23ef04a992bc69ba465066344c3c7cf34" translate="yes" xml:space="preserve">
          <source>Greater than</source>
          <target state="translated">グレーター</target>
        </trans-unit>
        <trans-unit id="acaff83628aa9c951c9c96ec4a78d05b5903c181" translate="yes" xml:space="preserve">
          <source>Greater than (&lt;code&gt;a &amp;gt; b&lt;/code&gt;)</source>
          <target state="translated">より大きい（ &lt;code&gt;a &amp;gt; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ffe32369a84f4ec739ceff967787219177706892" translate="yes" xml:space="preserve">
          <source>Greater than operator</source>
          <target state="translated">オペレータよりも大きい</target>
        </trans-unit>
        <trans-unit id="19339cbb3bf9612b2d425533788b474fc71b7fc8" translate="yes" xml:space="preserve">
          <source>Greater than operator (&amp;gt;)</source>
          <target state="translated">大なり演算子（&amp;gt;）</target>
        </trans-unit>
        <trans-unit id="ba00f24f428c5c797c9c1a02fe3126b504dc367c" translate="yes" xml:space="preserve">
          <source>Greater than operator.</source>
          <target state="translated">オペレーターよりも大きい。</target>
        </trans-unit>
        <trans-unit id="e8e9fd4aba5d1d5c651cb14cfb7ea55a98478786" translate="yes" xml:space="preserve">
          <source>Greater than or equal</source>
          <target state="translated">大きいか、または等しい</target>
        </trans-unit>
        <trans-unit id="ce9ce28c1418e4236454c52dcc54f02f5b21530f" translate="yes" xml:space="preserve">
          <source>Greater than or equal (&lt;code&gt;a &amp;gt;= b&lt;/code&gt;)</source>
          <target state="translated">以上（ &lt;code&gt;a &amp;gt;= b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3640b6be07fa5c3e01237da1227a658dbc2702e5" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator</source>
          <target state="translated">大きいか等しい演算子</target>
        </trans-unit>
        <trans-unit id="49067406979e72aabf504916a7dbce98a5bea221" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator (&amp;gt;=)</source>
          <target state="translated">以上の演算子（&amp;gt; =）</target>
        </trans-unit>
        <trans-unit id="4aeb184a334e8273aa73cf8c81481065f24bf2f2" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator.</source>
          <target state="translated">大きいか等しい演算子。</target>
        </trans-unit>
        <trans-unit id="073a35811e22c290eb43ebc97da19cbac54af050" translate="yes" xml:space="preserve">
          <source>Greek lower case numerals &amp;mdash; algorithmic</source>
          <target state="translated">ギリシャ語の小文字の数字&amp;mdash;アルゴリズム</target>
        </trans-unit>
        <trans-unit id="e1ccadc4241e2cb20334df4b15a97fa2ecbc301f" translate="yes" xml:space="preserve">
          <source>Greek upper case numerals &amp;mdash; algorithmic</source>
          <target state="translated">ギリシャ語の大文字の数字&amp;mdash;アルゴリズム</target>
        </trans-unit>
        <trans-unit id="b48836bd60f1a3a7305ae4aec52e094503f42798" translate="yes" xml:space="preserve">
          <source>Gregorian calendar</source>
          <target state="translated">グレゴリオ暦</target>
        </trans-unit>
        <trans-unit id="2ae6967b07a45b63c8543a6c5e34052414ba32af" translate="yes" xml:space="preserve">
          <source>Grouping</source>
          <target state="translated">Grouping</target>
        </trans-unit>
        <trans-unit id="a558ecadea6e7417651ffb43f2ee9ca2c34b30f4" translate="yes" xml:space="preserve">
          <source>Grouping and back references</source>
          <target state="translated">グループ化とバックリファレンス</target>
        </trans-unit>
        <trans-unit id="2cef99738d01030fced8fc7aad3f62156b1e6acd" translate="yes" xml:space="preserve">
          <source>Grouping objects by a property</source>
          <target state="translated">プロパティによるオブジェクトのグループ化</target>
        </trans-unit>
        <trans-unit id="915853015f3b98ee479d01ab7ae275510ea0172b" translate="yes" xml:space="preserve">
          <source>Grouping operator &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">Grouping operator &lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="527e76a146b1b5490208a09d5b54bffbd071c7e6" translate="yes" xml:space="preserve">
          <source>Grouping operator.</source>
          <target state="translated">グループ化演算子。</target>
        </trans-unit>
        <trans-unit id="2502d06c6006140375ec3d62c3dc9f293b0195cd" translate="yes" xml:space="preserve">
          <source>Gujarati digits</source>
          <target state="translated">グジャラートもじ</target>
        </trans-unit>
        <trans-unit id="40ec51c8281742718756a57689093f05a70d38eb" translate="yes" xml:space="preserve">
          <source>Gunjala Gondi digits</source>
          <target state="translated">グンジャラゴンディの数字</target>
        </trans-unit>
        <trans-unit id="ac47222ef99a366857403f36335b7ae783a1dacc" translate="yes" xml:space="preserve">
          <source>Gurmukhi digits</source>
          <target state="translated">ぐるむけいすう</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="af3b3fd4e5a91be3c9ae24e7f9f2b199db3bc273" translate="yes" xml:space="preserve">
          <source>HTML Living Standard&lt;br/&gt;&lt;small&gt;The definition of 'import.meta' in that specification.&lt;/small&gt;</source>
          <target state="translated">HTML Living Standard &lt;br/&gt;&lt;small&gt;その仕様における「import.meta」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e651f6ceca9dc60673a6ca401a75b541edb381d0" translate="yes" xml:space="preserve">
          <source>HTML and the WindowProxy</source>
          <target state="translated">HTML と WindowProxy</target>
        </trans-unit>
        <trans-unit id="4c41038188894303cbb976481fb1aa9e2a5e355e" translate="yes" xml:space="preserve">
          <source>HTML content</source>
          <target state="translated">HTMLコンテンツ</target>
        </trans-unit>
        <trans-unit id="bcbc9616d000628a0c49e8fdf2dae8519b74150b" translate="yes" xml:space="preserve">
          <source>HTML wrapper methods</source>
          <target state="translated">HTML ラッパーメソッド</target>
        </trans-unit>
        <trans-unit id="046b1a2a2d5f0690114e58492ae64eaf9df91f47" translate="yes" xml:space="preserve">
          <source>Hacks blog post by Jason Orendorff: &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 in Depth: Modules&lt;/a&gt;</source>
          <target state="translated">Hacks blog post by Jason Orendorff: &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 in Depth: Modules&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef7049864e420c4deb0c6720a77f740d5c1d6f31" translate="yes" xml:space="preserve">
          <source>Hacks blog post by Lin Clark: &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive&lt;/a&gt;</source>
          <target state="translated">Hacks blog post by Lin Clark: &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4d8d5585a333787270876f8d1add954316ec4fe" translate="yes" xml:space="preserve">
          <source>Han-character day-of-month numbering for lunar/other traditional calendars</source>
          <target state="translated">ばんごう</target>
        </trans-unit>
        <trans-unit id="c6ade9cd7521f0bda3a7985cfe1fbb3d2ca278a4" translate="yes" xml:space="preserve">
          <source>Handle rejected &lt;code&gt;Promise&lt;/code&gt; without try block.</source>
          <target state="translated">拒否された &lt;code&gt;Promise&lt;/code&gt; をtryブロックなしで処理します。</target>
        </trans-unit>
        <trans-unit id="8be500f20ceca94b841f8434fc8566ac689d6ad6" translate="yes" xml:space="preserve">
          <source>Handler functions</source>
          <target state="translated">ハンドラ機能</target>
        </trans-unit>
        <trans-unit id="6049f9c7ffa20764b4ab263789591f7465a81e57" translate="yes" xml:space="preserve">
          <source>Handler functions are sometimes called &lt;em&gt;traps&lt;/em&gt;, presumably because they trap calls to the target object. The very simple trap in &lt;code&gt;handler2&lt;/code&gt; above redefines all property accessors:</source>
          <target state="translated">Handler functions are sometimes called &lt;em&gt;traps&lt;/em&gt;, presumably because they trap calls to the target object. The very simple trap in &lt;code&gt;handler2&lt;/code&gt; above redefines all property accessors:</target>
        </trans-unit>
        <trans-unit id="8609bae83f23d806c7b6766e0836ddbd278c693c" translate="yes" xml:space="preserve">
          <source>Handling a rejected promise too early has consequences further down the promise chain. Sometimes there is no choice because an error must be handled immediately; in such cases we must &lt;code&gt;throw&lt;/code&gt; something, even if it is a dummy error message like &lt;code&gt;throw -999&lt;/code&gt;, to maintain error state down the chain. On the other hand, in the absence of an immediate need it is simpler to leave out error handling until a final &lt;code&gt;.catch()&lt;/code&gt; statement.</source>
          <target state="translated">Handling a rejected promise too early has consequences further down the promise chain. Sometimes there is no choice because an error must be handled immediately; in such cases we must &lt;code&gt;throw&lt;/code&gt; something, even if it is a dummy error message like &lt;code&gt;throw -999&lt;/code&gt; , to maintain error state down the chain. On the other hand, in the absence of an immediate need it is simpler to leave out error handling until a final &lt;code&gt;.catch()&lt;/code&gt; statement.</target>
        </trans-unit>
        <trans-unit id="05be078b093d3d7249de3afe5aeea8df03ebd38b" translate="yes" xml:space="preserve">
          <source>Handling a specific error</source>
          <target state="translated">特定のエラーの処理</target>
        </trans-unit>
        <trans-unit id="7d0fe42db132d1f32eb7831f4f5dfd3df8464a0c" translate="yes" xml:space="preserve">
          <source>Handling null values</source>
          <target state="translated">ヌル値の取り扱い</target>
        </trans-unit>
        <trans-unit id="b559965568e49e7ef2cb356360355aff78f4b4ad" translate="yes" xml:space="preserve">
          <source>Handling rejected promises</source>
          <target state="translated">拒否された約束を処理する</target>
        </trans-unit>
        <trans-unit id="0f0511546a2fd284a7b7e7b3e0c83c8b0aa321c0" translate="yes" xml:space="preserve">
          <source>Handling values larger or smaller than ~9 quadrillion with full precision requires using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;arbitrary precision arithmetic library&lt;/a&gt;. See &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;What Every Programmer Needs to Know about Floating Point Arithmetic&lt;/a&gt; for more information on floating point representations of numbers.</source>
          <target state="translated">最大で9兆を超える値や小さい値を処理するには、&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;任意の精度の算術ライブラリ&lt;/a&gt;を使用する必要があります。数値の浮動小数点表現の詳細について&lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;は、すべてのプログラマが浮動小数点演算について知っておくべきことを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="77b9dc1c507b553a2f069b382fe1361e6cd58f8c" translate="yes" xml:space="preserve">
          <source>Hanifi Rohingya digits</source>
          <target state="translated">ハニフィ・ロヒンギャ数字</target>
        </trans-unit>
        <trans-unit id="c4f14b0be5232bf7b6a4a221e3c77e209ae1957e" translate="yes" xml:space="preserve">
          <source>Has a value of 1.</source>
          <target state="translated">1の値を持っています。</target>
        </trans-unit>
        <trans-unit id="6769a17273095a460a5770629c83ce2f07e68f73" translate="yes" xml:space="preserve">
          <source>Has the same functionality as &lt;a href=&quot;arraybuffer/slice&quot;&gt;&lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;arraybuffer/slice&quot;&gt; &lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt; &lt;/a&gt;と同じ機能があります。</target>
        </trans-unit>
        <trans-unit id="086c9aa87eb5a88c029b61d7a7132c3c214e334a" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. (This is equivalent to not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.)</source>
          <target state="translated">Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. (This is equivalent to not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.)</target>
        </trans-unit>
        <trans-unit id="3842628d6ffd70cf6c89393a3508b1bc7fbb2c25" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.</source>
          <target state="translated">イテレータがシーケンスの次の値を生成できた場合、値は &lt;code&gt;false&lt;/code&gt; になります。これは、 &lt;code&gt;done&lt;/code&gt; プロパティを完全に指定しないことと同じです。</target>
        </trans-unit>
        <trans-unit id="8a395a560e0f4b02cb4707fbf65de88414505b92" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator has completed its sequence. In this case, &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">Has the value &lt;code&gt;true&lt;/code&gt; if the iterator has completed its sequence. In this case, &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</target>
        </trans-unit>
        <trans-unit id="f160378fa42521846caacc333df5e6d0e7f03987" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the &lt;em&gt;return value&lt;/em&gt; of the iterator.</source>
          <target state="translated">反復子が反復シーケンスの終わりを超えている場合、値は &lt;code&gt;true&lt;/code&gt; です。この場合、 &lt;code&gt;value&lt;/code&gt; オプションでイテレータの&lt;em&gt;戻り値&lt;/em&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="706e860c1a9505d02f07d336b066f2bf2d9d2bb4" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">反復子が反復シーケンスの終わりを超えている場合、値は &lt;code&gt;true&lt;/code&gt; です。この場合、 &lt;code&gt;value&lt;/code&gt; オプションでイテレータの戻り値を指定します。</target>
        </trans-unit>
        <trans-unit id="eb04312cb7765c6aeb622507d89de37f07bd7570" translate="yes" xml:space="preserve">
          <source>Hashbang (&lt;code&gt;#!&lt;/code&gt;) comment syntax</source>
          <target state="translated">Hashbang ( &lt;code&gt;#!&lt;/code&gt; ) comment syntax</target>
        </trans-unit>
        <trans-unit id="c95ada6418643a8e50ee540a13b76604f7c0d069" translate="yes" xml:space="preserve">
          <source>Hashbang comments</source>
          <target state="translated">ハッシュバングコメント</target>
        </trans-unit>
        <trans-unit id="2c22c3520114fb61d11e204af264631a078cc957" translate="yes" xml:space="preserve">
          <source>Hebrew numerals &amp;mdash; algorithmic</source>
          <target state="translated">ヘブライ数字&amp;mdash;アルゴリズム</target>
        </trans-unit>
        <trans-unit id="dff380fb452861e60226e0ba7e56afc16a92aaf9" translate="yes" xml:space="preserve">
          <source>Hence &lt;code&gt;encodeURI()&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, &lt;code&gt;encodeURI()&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">Hence &lt;code&gt;encodeURI()&lt;/code&gt; &lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, &lt;code&gt;encodeURI()&lt;/code&gt; &lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="89a512c7a0d8eebcc121926b32d2b19cb2392d47" translate="yes" xml:space="preserve">
          <source>Hence encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">したがって、encodeURI &lt;strong&gt;は&lt;/strong&gt;完全なURIを作成するために必要な文字をエンコード&lt;strong&gt;しません&lt;/strong&gt;。また、encodeURI &lt;strong&gt;は&lt;/strong&gt;、「予約されていないマーク」と呼ばれるいくつかの追加の文字をエンコード&lt;strong&gt;しません。これらの&lt;/strong&gt;文字は予約されていませんが、URIで「そのまま」使用できます。（&lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="cfa8a8d1543f550fd84beae6436f9ccfae0853b0" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt; , because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06a53efe4443b193ea939246d0bee3605e739beb" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;++&lt;/code&gt; は変数 &lt;code&gt;b&lt;/code&gt; に適用される&lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;後置演算子&lt;/a&gt;として扱われません。これは、 &lt;code&gt;b&lt;/code&gt; と &lt;code&gt;++&lt;/code&gt; の間に行末記号が発生するためです。</target>
        </trans-unit>
        <trans-unit id="b316f1fcc81d86f5ec38af0adc62588474cb39dc" translate="yes" xml:space="preserve">
          <source>Here JavaScript thinks that you meant to have &lt;code&gt;);&lt;/code&gt; inside the string and ignores it, and it ends up not knowing that you meant the &lt;code&gt;);&lt;/code&gt; to end the function &lt;code&gt;console.log&lt;/code&gt;. To fix this, we could put a&lt;code&gt;'&lt;/code&gt; after the &quot;Script&quot; string:</source>
          <target state="translated">ここでJavaScriptはあなたが持っているつもりであると考えています &lt;code&gt;);&lt;/code&gt; 文字列の内側にあり、それを無視し、それがあなたが &lt;code&gt;);&lt;/code&gt; を意味していたことを知らないことになります。関数 &lt;code&gt;console.log&lt;/code&gt; を終了します。これを修正するには、「スクリプト」文字列 &lt;code&gt;'&lt;/code&gt; 後に'を付けます。</target>
        </trans-unit>
        <trans-unit id="0856a04ac4cb4e4e83ac047c8e991838afc7b8c6" translate="yes" xml:space="preserve">
          <source>Here are some specific points that the authors of the WeakRef proposal included in its &lt;a href=&quot;https://github.com/tc39/proposal-weakrefs/blob/master/README.md&quot;&gt;explainer document&lt;/a&gt;:</source>
          <target state="translated">WeakRef提案の作成者が&lt;a href=&quot;https://github.com/tc39/proposal-weakrefs/blob/master/README.md&quot;&gt;説明文書に&lt;/a&gt;含めた特定のポイントは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b69f63202829808a3ed5c904407f09912f3f4f7d" translate="yes" xml:space="preserve">
          <source>Here are some specific points that the authors of the WeakRef proposal that FinalizationRegistry is part of included in its &lt;a href=&quot;https://github.com/tc39/proposal-FinalizationRegistrys/blob/master/README.md&quot;&gt;explainer document&lt;/a&gt;:</source>
          <target state="translated">FinalizationRegistryがその&lt;a href=&quot;https://github.com/tc39/proposal-FinalizationRegistrys/blob/master/README.md&quot;&gt;説明文書に&lt;/a&gt;含まれているWeakRef提案の作成者がいくつかの特定のポイントを以下に示します。</target>
        </trans-unit>
        <trans-unit id="c196a482f6e0ba5b36fd2d7f104c322d2271fc25" translate="yes" xml:space="preserve">
          <source>Here is a concise example of the iteration steps:</source>
          <target state="translated">ここでは、繰り返しのステップの簡潔な例を示します。</target>
        </trans-unit>
        <trans-unit id="24a2c42eadaee1c238dcb34a8a11541d3566436b" translate="yes" xml:space="preserve">
          <source>Here is a correct implementation:</source>
          <target state="translated">ここに正しい実装があります。</target>
        </trans-unit>
        <trans-unit id="6b78dc499efcb3a2e64d5a1d08544b298bfb6496" translate="yes" xml:space="preserve">
          <source>Here is an example of an &lt;strong&gt;anonymous&lt;/strong&gt; function expression (the &lt;code&gt;name&lt;/code&gt; is not used):</source>
          <target state="translated">&lt;strong&gt;無名&lt;/strong&gt;関数式の例を次に示します（ &lt;code&gt;name&lt;/code&gt; は使用されません）。</target>
        </trans-unit>
        <trans-unit id="3165612e15dd81d081ad2ea3bdee303a0e8cef7a" translate="yes" xml:space="preserve">
          <source>Here is the output:</source>
          <target state="translated">こちらが出力です。</target>
        </trans-unit>
        <trans-unit id="a25458ba1519e52ca3b4eba3bb4f22092fc95ae9" translate="yes" xml:space="preserve">
          <source>Here is the same &quot;Conditional catch clauses&quot; using code that conforms to ECMAScript specification (obviously it's verbose, but works everywhere):</source>
          <target state="translated">ここでは、ECMAScriptの仕様に準拠したコードを使った同じ「条件付きキャッチ句」を紹介します(明らかに冗長ですが、どこでも動作します)。</target>
        </trans-unit>
        <trans-unit id="2b981861ba4dd1afcb8302d8db5d56f4e3e89e1e" translate="yes" xml:space="preserve">
          <source>Here it counts forwards from the start by &lt;code&gt;11&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;7&lt;/code&gt; to find the end index.</source>
          <target state="translated">Here it counts forwards from the start by &lt;code&gt;11&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;7&lt;/code&gt; to find the end index.</target>
        </trans-unit>
        <trans-unit id="f0d1bc6ef7a193898558dcd4287addc94cb7eb24" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;code&gt;Square&lt;/code&gt; class is changed&amp;mdash;but the constructor of its base class &lt;code&gt;Polygon&lt;/code&gt;is still called when a new instance of a square is created.</source>
          <target state="translated">Here the prototype of &lt;code&gt;Square&lt;/code&gt; class is changed&amp;mdash;but the constructor of its base class &lt;code&gt;Polygon&lt;/code&gt; is still called when a new instance of a square is created.</target>
        </trans-unit>
        <trans-unit id="b6ddfd08130fdd41064ead403ecc7771b756bd7a" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;strong&gt;Square&lt;/strong&gt; class is changed but still the constructor of the previous base class &lt;strong&gt;Polygon &lt;/strong&gt;is called when a new instance of a square is being created.</source>
          <target state="translated">ここでは&lt;strong&gt;Square&lt;/strong&gt;クラスのプロトタイプが変更されていますが、正方形の新しいインスタンスが作成されるときに、以前の基本クラス&lt;strong&gt;Polygonの&lt;/strong&gt;コンストラクターが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9d344bd5b43ce8d7785f99d6710ed007bee41389" translate="yes" xml:space="preserve">
          <source>Here the short-circuit is especially beneficial, since the element will not be updated unnecessarily and won't cause unwanted side-effects such as additional parsing or rendering work, or loss of focus, etc.</source>
          <target state="translated">ここでの短絡は、要素が不必要に更新されることがなく、追加のパースやレンダリング作業、フォーカスの損失などの望ましくない副作用を引き起こすことがないので、特に有益です。</target>
        </trans-unit>
        <trans-unit id="5e9eaf917eac3048ca5292e8791a5a553b13c8df" translate="yes" xml:space="preserve">
          <source>Here we've provided an implementation of the &lt;a href=&quot;proxy/proxy/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; handler, which intercepts attempts to access properties in the target.</source>
          <target state="translated">Here we've provided an implementation of the &lt;a href=&quot;proxy/proxy/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; handler, which intercepts attempts to access properties in the target.</target>
        </trans-unit>
        <trans-unit id="90b6aaa340bd0ee0aff948f94fa41abe49107e85" translate="yes" xml:space="preserve">
          <source>Here's an external resource for getting the complete Unicode block range for different scripts: &lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt;.</source>
          <target state="translated">さまざまなスクリプトの完全なUnicodeブロック範囲を取得するための外部リソースは次のとおりです：&lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7857a46a59cc12380ddb853b6b9f402e6c55d9ef" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are declared before any code is executed, but the assignments occur later. At the time &quot;&lt;code&gt;x = y&lt;/code&gt;&quot; is evaluated, &lt;code&gt;y&lt;/code&gt; exists so no &lt;code&gt;ReferenceError&lt;/code&gt; is thrown and its value is &lt;code&gt;undefined&lt;/code&gt;. So, &lt;code&gt;x&lt;/code&gt; is assigned the undefined value. Then, &lt;code&gt;y&lt;/code&gt; is assigned the value &lt;code&gt;'A'&lt;/code&gt;. Consequently, after the first line, &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt;, hence the result.</source>
          <target state="translated">ここで、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; はコードが実行される前に宣言されますが、割り当ては後で発生します。 &quot; &lt;code&gt;x = y&lt;/code&gt; &quot;が評価される時点では、 &lt;code&gt;y&lt;/code&gt; が存在するため、 &lt;code&gt;ReferenceError&lt;/code&gt; はスローされず、その値は &lt;code&gt;undefined&lt;/code&gt; です。したがって、 &lt;code&gt;x&lt;/code&gt; には未定義の値が割り当てられます。次に、 &lt;code&gt;y&lt;/code&gt; に値 &lt;code&gt;'A'&lt;/code&gt; が割り当てられます。その結果、最初の行の後、 &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt; 、したがって結果。</target>
        </trans-unit>
        <trans-unit id="c6bb89830625753d156ab93a0373ccd6a9471aee" translate="yes" xml:space="preserve">
          <source>Here, a &lt;code&gt;WeakSet&lt;/code&gt; is created on the first run, and passed along with every subsequent function call (using the internal &lt;code&gt;_refs&lt;/code&gt; parameter).</source>
          <target state="translated">Here, a &lt;code&gt;WeakSet&lt;/code&gt; is created on the first run, and passed along with every subsequent function call (using the internal &lt;code&gt;_refs&lt;/code&gt; parameter).</target>
        </trans-unit>
        <trans-unit id="f2c3bff61e26f4963cd35a7ab991589ba7008419" translate="yes" xml:space="preserve">
          <source>Here, accessing the exports means using the module name (&quot;myModule&quot; in this case) as a namespace. For example, if the module imported above includes an export &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt;, you would call it like this:</source>
          <target state="translated">ここで、エクスポートにアクセスすることは、モジュール名（この場合は「myModule」）を名前空間として使用することを意味します。たとえば、上記でインポートしたモジュールにエクスポート &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt; が含まれている場合は、次のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="15fbcc06494476e024486f2e5d0653c7309b6c60" translate="yes" xml:space="preserve">
          <source>Here, for example, &lt;code&gt;const {p: foo} = o&lt;/code&gt; takes from the object &lt;code&gt;o&lt;/code&gt; the property named &lt;code&gt;p&lt;/code&gt; and assigns it to a local variable named &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">Here, for example, &lt;code&gt;const {p: foo} = o&lt;/code&gt; takes from the object &lt;code&gt;o&lt;/code&gt; the property named &lt;code&gt;p&lt;/code&gt; and assigns it to a local variable named &lt;code&gt;foo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f4a47d89f93702cfa385c9f04a141e2759682494" translate="yes" xml:space="preserve">
          <source>Here, the function produces a string (the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;primitive&lt;/a&gt; type) as promised. However, the constructor produces an instance of the type String (an object wrapper) and that's why you rarely want to use the String constructor at all.</source>
          <target state="translated">ここで、関数は約束どおりに文字列（&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;プリミティブ&lt;/a&gt;型）を生成します。ただし、コンストラクターはString型（オブジェクトラッパー）のインスタンスを生成するため、Stringコンストラクターを使用することはめったにありません。</target>
        </trans-unit>
        <trans-unit id="51f81ae1558077795df8fc0042020be94e3ff570" translate="yes" xml:space="preserve">
          <source>Here, the method named &quot;createElement&quot; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">ここでは、「createElement」という名前のメソッドが &lt;code&gt;document&lt;/code&gt; から取得され、呼び出されます。</target>
        </trans-unit>
        <trans-unit id="40d821e94b177f191399f4c6848c0999525332fe" translate="yes" xml:space="preserve">
          <source>Here, the method named &lt;code&gt;createElement&lt;/code&gt; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">Here, the method named &lt;code&gt;createElement&lt;/code&gt; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="0a2f21efe45a597d0c5e08f0bcf4197917ea15a9" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences</source>
          <target state="translated">16進数のエスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="9b58c9bceb1fb4cd00c1b0d68cba9a880adb6196" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences (&lt;code&gt;'\0xA9'&lt;/code&gt;)</source>
          <target state="translated">16進数のエスケープシーケンス（ &lt;code&gt;'\0xA9'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d77a4d628bd253cb9d7796f35659fc6bb4dc2dfa" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences consist of &lt;code&gt;\x&lt;/code&gt; followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF.</source>
          <target state="translated">16進数のエスケープシーケンスは、 &lt;code&gt;\x&lt;/code&gt; それに続く0x0000から0x00FFの範囲のコードユニットまたはコードポイントを表す2桁の16進数で構成されます。</target>
        </trans-unit>
        <trans-unit id="8a582ad8df25c5d47dfed0df5132809e7d6d15eb" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;&lt;code&gt;\x&lt;/code&gt;&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">Hexadecimal escapes started by &quot; &lt;code&gt;\x&lt;/code&gt; &quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4bd87c365a900dd5094579ce438c4cfe544351c" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;\x&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">「\ x」で始まる16進エスケープ、たとえば &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9924bfb13046ed8f8cebb38c6e636ffefd5cb02" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; ( &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt; . If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</target>
        </trans-unit>
        <trans-unit id="e066ca26a734b38a5a274a8d41c70f6df347e59e" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">16進数の構文では、先頭の0の後に小文字または大文字のラテン文字 &quot;X&quot;（ &lt;code&gt;0x&lt;/code&gt; または &lt;code&gt;0X)&lt;/code&gt; が続きます。0xの後の数字が範囲（0123456789ABCDEF）の外にある場合、次の &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; がスローされます：「識別子は数値リテラルの直後に始まります」。</target>
        </trans-unit>
        <trans-unit id="a69413db5aeb0efb2c0b65dd4800effb756f3189" translate="yes" xml:space="preserve">
          <source>Hexadecimal numeric literals (&lt;code&gt;0xAF&lt;/code&gt;)</source>
          <target state="translated">16進数の数値リテラル（ &lt;code&gt;0xAF&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ed159796c6374be3a3a7fcdf94ff47de9417b532" translate="yes" xml:space="preserve">
          <source>Hidden characters</source>
          <target state="translated">隠しキャラ</target>
        </trans-unit>
        <trans-unit id="ba8e27ee7970ed22acceee3b123e2ed01cfef7b9" translate="yes" xml:space="preserve">
          <source>Hiding Implementation Details with ECMAScript 6 WeakMaps</source>
          <target state="translated">ECMAScript 6 WeakMaps で実装の詳細を隠す</target>
        </trans-unit>
        <trans-unit id="48c7f05df7a5b55b6867d43de9a4ff0ca135540e" translate="yes" xml:space="preserve">
          <source>Historically &lt;code&gt;eval()&lt;/code&gt; had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was definitely removed from Firefox 4. See &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;bug 531675&lt;/a&gt;.</source>
          <target state="translated">歴史的に &lt;code&gt;eval()&lt;/code&gt; にはオプションの2番目の引数があり、評価を実行するコンテキストでオブジェクトを指定していました。この引数は非標準であり、Firefox 4から完全に削除され&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;ました&lt;/a&gt;。バグ531675を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d0556094a79057d9c2ab59684cc5203152ab3bf" translate="yes" xml:space="preserve">
          <source>Historically, JSON was &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;not a completely strict subset of JavaScript&lt;/a&gt;. The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text, only using Unicode escapes as &lt;code&gt;\u2028&lt;/code&gt; and &lt;code&gt;\u2029&lt;/code&gt;. This recently changed: now both code points may appear literally in strings in JSON and JavaScript both.</source>
          <target state="translated">Historically, JSON was &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;not a completely strict subset of JavaScript&lt;/a&gt;. The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text, only using Unicode escapes as &lt;code&gt;\u2028&lt;/code&gt; and &lt;code&gt;\u2029&lt;/code&gt; . This recently changed: now both code points may appear literally in strings in JSON and JavaScript both.</target>
        </trans-unit>
        <trans-unit id="c4e7aea155b6fd0365d90d2db06835ebcdaa15e0" translate="yes" xml:space="preserve">
          <source>Historically, accessing the global object has required different syntax in different JavaScript environments. On the web you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/self&quot;&gt;&lt;code&gt;self&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/frames&quot;&gt;&lt;code&gt;frames&lt;/code&gt;&lt;/a&gt; - but in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker&quot;&gt;Web Workers&lt;/a&gt; only &lt;code&gt;self&lt;/code&gt; will work. In Node.js none of these work, and you must instead use &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">これまで、グローバルオブジェクトにアクセスするには、JavaScript環境ごとに異なる構文が必要でした。Webでは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/self&quot;&gt; &lt;code&gt;self&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/frames&quot;&gt; &lt;code&gt;frames&lt;/code&gt; を&lt;/a&gt;使用できますが、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker&quot;&gt;Web Workersでは&lt;/a&gt;、 &lt;code&gt;self&lt;/code&gt; のみが機能します。Node.jsでは、これらはいずれも機能しないため、代わりに &lt;code&gt;global&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bcaf634e9dbfa99922f815d7eb0b950882fbc2c" translate="yes" xml:space="preserve">
          <source>Hoisting</source>
          <target state="translated">Hoisting</target>
        </trans-unit>
        <trans-unit id="5f27b866d76e39ba378b955e78eb58dfdd94f6f6" translate="yes" xml:space="preserve">
          <source>Horizontal tabulation</source>
          <target state="translated">水平方向の集計</target>
        </trans-unit>
        <trans-unit id="3adb95f9912f2091bd36deb307c797f8d4c2f8ed" translate="yes" xml:space="preserve">
          <source>Host object (provided by the JS environment)</source>
          <target state="translated">ホストオブジェクト(JS環境で提供される</target>
        </trans-unit>
        <trans-unit id="d39c373de107a4bce739387a89a889c47d0c8cad" translate="yes" xml:space="preserve">
          <source>Hour cycle type</source>
          <target state="translated">代表的な時間サイクル</target>
        </trans-unit>
        <trans-unit id="35b2dfb78eac72ed6693d54e3fef42f6d54dd0ef" translate="yes" xml:space="preserve">
          <source>Hour cycle. Possible values include: &quot;&lt;code&gt;h11&lt;/code&gt;&quot;, &quot;&lt;code&gt;h12&lt;/code&gt;&quot;, &quot;&lt;code&gt;h23&lt;/code&gt;&quot;, &quot;&lt;code&gt;h24&lt;/code&gt;&quot;.</source>
          <target state="translated">時間サイクル。可能な値には、「 &lt;code&gt;h11&lt;/code&gt; 」、「 &lt;code&gt;h12&lt;/code&gt; 」、「 &lt;code&gt;h23&lt;/code&gt; 」、「 &lt;code&gt;h24&lt;/code&gt; 」が含まれます。</target>
        </trans-unit>
        <trans-unit id="05d832afb150e6d6cee536a5366db6a39f98f7aa" translate="yes" xml:space="preserve">
          <source>Hour cycle. Possible values include: &lt;code&gt;&quot;h11&quot;&lt;/code&gt;, &lt;code&gt;&quot;h12&quot;&lt;/code&gt;, &lt;code&gt;&quot;h23&quot;&lt;/code&gt;, &lt;code&gt;&quot;h24&quot;&lt;/code&gt;.</source>
          <target state="translated">時間サイクル。可能な値には、 &lt;code&gt;&quot;h11&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h12&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h23&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;h24&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5ccc02ad3ffdd408fd6859d246a6a1c3e64a7a20" translate="yes" xml:space="preserve">
          <source>Hour system using 0&amp;ndash;11; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am.</source>
          <target state="translated">0〜11を使用する時法。パターンの「K」に対応します。午前0時から始まる12時間制。</target>
        </trans-unit>
        <trans-unit id="889ee33866e46727e54f1b752dd77e90c5bb090a" translate="yes" xml:space="preserve">
          <source>Hour system using 0&amp;ndash;23; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00.</source>
          <target state="translated">0〜23を使用する時法。パターンの「H」に対応します。深夜0時から始まる24時間制。</target>
        </trans-unit>
        <trans-unit id="19ddd9112121365c57597c61d1c4206ef99b714f" translate="yes" xml:space="preserve">
          <source>Hour system using 1&amp;ndash;12; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am.</source>
          <target state="translated">1〜12を使用する時法。パターンの「h」に対応します。午前0時から始まる12時間制。</target>
        </trans-unit>
        <trans-unit id="93a7c0c8873aebc58cf62b3e1f748e30e821f3ae" translate="yes" xml:space="preserve">
          <source>Hour system using 1&amp;ndash;24; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00.</source>
          <target state="translated">1〜24を使用する時法。パターンの「k」に対応します。24時間制で、深夜は24:00から始まります。</target>
        </trans-unit>
        <trans-unit id="ee3e1dbb726eba3df0ad73f985155dde4b677d93" translate="yes" xml:space="preserve">
          <source>Hour, as two digits with leading zero if required</source>
          <target state="translated">時間、2桁の数字で、必要に応じて先頭にゼロを付けてください。</target>
        </trans-unit>
        <trans-unit id="f4d808298af4e3a344801b330a4f9fdcd1165517" translate="yes" xml:space="preserve">
          <source>Hour: 2 digit hour of day, e.g. &quot;14&quot;</source>
          <target state="translated">時間:2桁の曜日の時間、例:&quot;14&quot;</target>
        </trans-unit>
        <trans-unit id="2f6aca7c8ed3e78d7b2ca4654ff033cbca51140c" translate="yes" xml:space="preserve">
          <source>How a static member (method or property) is defined on a class.</source>
          <target state="translated">クラス上の静的メンバ(メソッドやプロパティ)がどのように定義されているか。</target>
        </trans-unit>
        <trans-unit id="170fd3a12359241b63d931c864e00d0ebab3ff77" translate="yes" xml:space="preserve">
          <source>How a static member can and cannot be called.</source>
          <target state="translated">静的なメンバーがどのように呼び出せるか、呼び出せないか。</target>
        </trans-unit>
        <trans-unit id="02b8a9b69ed5e801a258f6ff432668b197dc1977" translate="yes" xml:space="preserve">
          <source>How a static method can and cannot be called.</source>
          <target state="translated">静的なメソッドの呼び方、呼び方。</target>
        </trans-unit>
        <trans-unit id="9212bc0bac3b7334165992d907eff590f2d58bf7" translate="yes" xml:space="preserve">
          <source>How a static method is implemented on a class.</source>
          <target state="translated">静的メソッドがクラスにどのように実装されているか。</target>
        </trans-unit>
        <trans-unit id="3c942ed885b162688cb9195ae45a134e9665a26b" translate="yes" xml:space="preserve">
          <source>How reduce() works</source>
          <target state="translated">reduce()の動作方法</target>
        </trans-unit>
        <trans-unit id="590c269c92635e56c357d9c996f7ebd80cef25ce" translate="yes" xml:space="preserve">
          <source>How to display the currency in currency formatting. Possible values are &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; to use a localized currency symbol such as &amp;euro;, &lt;code&gt;&quot;code&quot;&lt;/code&gt; to use the ISO currency code, &lt;code&gt;&quot;name&quot;&lt;/code&gt; to use a localized currency name such as &lt;code&gt;&quot;dollar&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;symbol&quot;&lt;/code&gt;.</source>
          <target state="translated">通貨を通貨フォーマットで表示する方法。可能な値は、&amp;euro;などのローカライズされた通貨記号を使用する &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; 、ISO通貨コードを使用する &lt;code&gt;&quot;code&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;dollar&quot;&lt;/code&gt; などのローカライズされた通貨名を使用する &lt;code&gt;&quot;name&quot;&lt;/code&gt; 」です。デフォルトは &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b0c044b13c7bb4fb298968475ed3fc9068f5056c" translate="yes" xml:space="preserve">
          <source>How to display the currency in currency formatting. Possible values are:</source>
          <target state="translated">通貨フォーマットで通貨を表示する方法。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="317cebfb06712b03449e83ae5a1cfac238766c01" translate="yes" xml:space="preserve">
          <source>How to use a source map &amp;ndash; Firefox Tools documentation</source>
          <target state="translated">ソースマップの使用方法&amp;ndash; Firefoxツールのドキュメント</target>
        </trans-unit>
        <trans-unit id="3cd53a529a6d6f543acf35035d0de8d5fea99843" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;const {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;const {a, b} = {a: 1, b: 2}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72c36f97b9d3ec431e2384db73310aeb72ab6819" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">ただし、 &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; は有効です &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ca0de76b3b99b8b56c8d7af288735c24f70c1f3" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;eval()&lt;/code&gt; is not necessary here. In fact, its use here is discouraged. Instead, use the &lt;a href=&quot;../operators/property_accessors&quot;&gt;property accessors&lt;/a&gt;, which are much faster and safer:</source>
          <target state="translated">ただし、ここでは &lt;code&gt;eval()&lt;/code&gt; は必要ありません。実際、ここでの使用はお勧めできません。代わりに、はるかに高速で安全な&lt;a href=&quot;../operators/property_accessors&quot;&gt;プロパティアクセサを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f9d62d5a3dc9dfd3f9a930073640792a4689bc84" translate="yes" xml:space="preserve">
          <source>However, &lt;strong&gt;if and only if&lt;/strong&gt; an empty iterable is passed as an argument, &lt;code&gt;Promise.allSettled()&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt; object that has &lt;strong&gt;already been resolved&lt;/strong&gt; as an empty array.</source>
          <target state="translated">ただし、空のiterableが引数として渡された&lt;strong&gt;場合にのみ&lt;/strong&gt;、 &lt;code&gt;Promise.allSettled()&lt;/code&gt; は、空の配列として&lt;strong&gt;既に解決さ&lt;/strong&gt;れ&lt;strong&gt;ている&lt;/strong&gt; &lt;code&gt;Promise&lt;/code&gt; オブジェクトを返します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b921fc32f59289040086bb44d7385dce3af7b6ca" translate="yes" xml:space="preserve">
          <source>However, a function can access all variables and functions defined inside the scope in which it is defined. In other words, a function defined in the global scope can access all variables defined in the global scope.</source>
          <target state="translated">ただし、関数は、定義されているスコープ内で定義されているすべての変数や関数にアクセスすることができます。つまり、グローバルスコープで定義された関数は、グローバルスコープで定義されたすべての変数にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="1344ff6ea20d410b0de6c7bf7acfe1eadf51dcfb" translate="yes" xml:space="preserve">
          <source>However, adding non-standard methods to the array object can cause issues later, either with your own code, or when &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;adding features to JavaScript&lt;/a&gt;.</source>
          <target state="translated">ただし、非標準のメソッドを配列オブジェクトに追加すると、後で独自のコードを使用するか、&lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;JavaScriptに機能を追加する&lt;/a&gt;ときに問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e2fc3da3ae9c154becb2bd8619ed5afc981767c4" translate="yes" xml:space="preserve">
          <source>However, as it is widely implemented and used on the Web, it is very unlikely that browsers will stop implementing it.</source>
          <target state="translated">しかし、Web上では広く実装・利用されているため、ブラウザが実装をやめる可能性は極めて低いと考えられます。</target>
        </trans-unit>
        <trans-unit id="f9600d456633eb4645e65e56ab2737fa05e32c69" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using &lt;code&gt;apply&lt;/code&gt; and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">ただし、spread（ &lt;code&gt;...&lt;/code&gt; ）と &lt;code&gt;apply&lt;/code&gt; はどちらも、配列に要素が多すぎると、失敗するか、誤った結果を返します。これは、配列要素を関数パラメーターとして渡そうとするためです。詳しくは、&lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt; &lt;code&gt;apply&lt;/code&gt; &lt;/a&gt;関数と組み込み関数の使用を参照してください。 &lt;code&gt;reduce&lt;/code&gt; ソリューションは、この問題はありません。</target>
        </trans-unit>
        <trans-unit id="a8f4a701bba3d52df404267d8b38008d653efd94" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using apply and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">However, both spread ( &lt;code&gt;...&lt;/code&gt; ) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using apply and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</target>
        </trans-unit>
        <trans-unit id="155f9210fb274769199d9d6e37fb1cb3e08415b0" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN():&lt;/code&gt; the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN:&lt;/code&gt;</source>
          <target state="translated">ただし、 &lt;code&gt;isNaN()&lt;/code&gt; と &lt;code&gt;Number.isNaN():&lt;/code&gt; の違いに注意してください。値が現在 &lt;code&gt;NaN&lt;/code&gt; である場合、または数値に強制変換された後に &lt;code&gt;NaN&lt;/code&gt; になる場合、前者は &lt;code&gt;true&lt;/code&gt; を返しますが、後者は返されます。値が現在 &lt;code&gt;NaN:&lt;/code&gt; 場合のみ &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1a05afbdfaaafa830031102e2b9809905ecfa0f3" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN()&lt;/code&gt;: the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN()&lt;/code&gt; : the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt; , or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d1cec757f8ff73194c703cf76ff4d0beb35547cf" translate="yes" xml:space="preserve">
          <source>However, due to &lt;code&gt;||&lt;/code&gt; being a boolean logical operator, the left hand-side operand was coerced to a boolean for the evaluation and any &lt;em&gt;falsy&lt;/em&gt; value (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;) was not returned. This behavior may cause unexpected consequences if you consider &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt; as valid values.</source>
          <target state="translated">ただし、 &lt;code&gt;||&lt;/code&gt; ブール論理演算子であるため、左側のオペランドは評価のためにブール値に強制され、&lt;em&gt;偽の&lt;/em&gt;値（ &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;''&lt;/code&gt; 、 &lt;code&gt;NaN&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; ）は返されませんでした。 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;''&lt;/code&gt; 、または &lt;code&gt;NaN&lt;/code&gt; を有効な値と見なすと、この動作によって予期しない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bb5955412c243802f624c3fcc726fa95ed764470" translate="yes" xml:space="preserve">
          <source>However, if a feature is part of the language, the burden of implementing that feature performantly is on the engine developers (ideally).</source>
          <target state="translated">しかし、ある機能が言語の一部である場合、その機能を性能的に実装する負担はエンジン開発者にあります(理想的には)。</target>
        </trans-unit>
        <trans-unit id="7d0e9166cc3877049fade8de88ba8526c9f995c0" translate="yes" xml:space="preserve">
          <source>However, if the string is recognized as an ISO format string and it contains invalid values, it will return &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; in all browsers compliant with ES5 and later:</source>
          <target state="translated">However, if the string is recognized as an ISO format string and it contains invalid values, it will return &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; in all browsers compliant with ES5 and later:</target>
        </trans-unit>
        <trans-unit id="022c3ab98768670bbf1933120325adce314d4bb1" translate="yes" xml:space="preserve">
          <source>However, if you are more interested in all the little technical bits defined by the ECMA standard, and are less concerned about performance or conciseness, then you may find this more descriptive polyfill to be more useful.</source>
          <target state="translated">しかし、ECMA規格で定義されているすべての小さな技術的なビットに興味があり、性能や簡潔さにあまり関心がない場合は、このより記述的なポリフィルの方が有用であると感じるかもしれません。</target>
        </trans-unit>
        <trans-unit id="fc57e792d30fa7d983982bc737c871ec52c8ca4c" translate="yes" xml:space="preserve">
          <source>However, if you provide your own constructor, and your class derives from some parent class, then you must explicitly call the parent class constructor using &lt;code&gt;super&lt;/code&gt;. For example:</source>
          <target state="translated">However, if you provide your own constructor, and your class derives from some parent class, then you must explicitly call the parent class constructor using &lt;code&gt;super&lt;/code&gt; . For example:</target>
        </trans-unit>
        <trans-unit id="e8b64102d1a72628622132dccbb3c2f213dbfead" translate="yes" xml:space="preserve">
          <source>However, if you set &lt;code&gt;Symbol.match&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;isRegExp&lt;/code&gt; check (that uses the &lt;code&gt;match&lt;/code&gt; property) will indicate that the object is not a regular expression object. The methods &lt;code&gt;startsWith&lt;/code&gt; and &lt;code&gt;endsWith&lt;/code&gt; won't throw a &lt;code&gt;TypeError&lt;/code&gt; as a consequence.</source>
          <target state="translated">ただし、 &lt;code&gt;Symbol.match&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、 &lt;code&gt;isRegExp&lt;/code&gt; チェック（ &lt;code&gt;match&lt;/code&gt; プロパティを使用）は、オブジェクトが正規表現オブジェクトではないことを示します。 &lt;code&gt;startsWith&lt;/code&gt; メソッドと &lt;code&gt;endsWith&lt;/code&gt; メソッドは結果として &lt;code&gt;TypeError&lt;/code&gt; をスローしません。</target>
        </trans-unit>
        <trans-unit id="31f1e2bdac94b098b9f877ce5da8857a1ad83361" translate="yes" xml:space="preserve">
          <source>However, illegal escape sequences must still be represented in the &amp;ldquo;cooked&amp;rdquo; representation. They will show up as &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; element in the &amp;ldquo;cooked&amp;rdquo; array:</source>
          <target state="translated">ただし、違法なエスケープシーケンスは、「調理された」表現で表す必要があります。それらは、「cooked」配列の&lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;要素として表示されます。</target>
        </trans-unit>
        <trans-unit id="03a698f36d60dc84adc893e9fc94c9f9a1a121dc" translate="yes" xml:space="preserve">
          <source>However, in a case like the following, there are not alternatives to &lt;code&gt;arguments.callee&lt;/code&gt;, so its deprecation could be a bug (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;bug 725398&lt;/a&gt;):</source>
          <target state="translated">ただし、次のような場合は、 &lt;code&gt;arguments.callee&lt;/code&gt; に代わるものがないため、非推奨となる可能性があります（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;バグ725398を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4589d67aea24a69292bd71d7b10227587745cfc4" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;DateTimeFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">ただし、多くのユーザーインターフェイスでは、この文字列のフォーマットをカスタマイズしたいという要望があります。 &lt;code&gt;formatToParts&lt;/code&gt; の方法は、によって生成文字列の書式設定ロケール対応可能 &lt;code&gt;DateTimeFormat&lt;/code&gt; のあなたの部分の文字列を提供することにより、フォーマッタ：</target>
        </trans-unit>
        <trans-unit id="8022b3b7bd063cb56b7912845f1a0f26bce01df9" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;NumberFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">ただし、多くのユーザーインターフェイスでは、この文字列のフォーマットをカスタマイズしたいという要望があります。 &lt;code&gt;formatToParts&lt;/code&gt; の方法は、によって生成文字列の書式設定ロケール対応可能 &lt;code&gt;NumberFormat&lt;/code&gt; あなたの部分の文字列を提供することにより、フォーマッタ：</target>
        </trans-unit>
        <trans-unit id="f669417c4db529251f3383ce99a11f4abe560111" translate="yes" xml:space="preserve">
          <source>However, invalid values in date strings not recognized as simplified ISO format as defined by ECMA-262 may or may not result in &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, depending on the browser and values provided, e.g.:</source>
          <target state="translated">ただし、ECMA-262で定義されている簡易ISO形式として認識されない日付文字列の無効な値は、ブラウザーや指定された値によっては、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になる&lt;/a&gt;場合とならない場合があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="ef074962521111d0da446df3606b66ac6041432b" translate="yes" xml:space="preserve">
          <source>However, it can be converted to a real &lt;code&gt;Array&lt;/code&gt;:</source>
          <target state="translated">However, it can be converted to a real &lt;code&gt;Array&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a74265a92b19fdffe551a7aa2ab8d023b875e39a" translate="yes" xml:space="preserve">
          <source>However, it is important to consider the following scenarios:</source>
          <target state="translated">しかし、次のようなシナリオを考えることが重要です。</target>
        </trans-unit>
        <trans-unit id="84cb019d3ebd3521eafb6da4bfd6f75dae35c17b" translate="yes" xml:space="preserve">
          <source>However, it's important to point out that a block nested inside a case clause will create a new block scoped lexical environment, which will not produce the redeclaration errors shown above.</source>
          <target state="translated">しかし、case節の中に入れ子になったブロックは、新しいブロックスコープ付き語彙環境を作成し、上記のような再宣言エラーを発生させないことを指摘しておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="baa6aadd1c660682617a1e4f8bf27000cbc1c4f7" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">However, objects created with the object literal notation are an exception here: Although the prototype is &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb206323f2e15d213b5f0f56c363d1864f9a048d" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is undefined, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ただし、オブジェクトリテラル表記で作成されたオブジェクトはここでは例外です。プロトタイプは未定義ですが、 &lt;code&gt;instanceof Object&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cb8b548450bac1315df5f50eded94022c2cca6c2" translate="yes" xml:space="preserve">
          <source>However, oftentimes, this error is only a consequence of another error, like not escaping strings properly, or using &lt;code&gt;var&lt;/code&gt; wrongly. You might also have too many parenthesis somewhere. Carefully check the syntax when this error is thrown.</source>
          <target state="translated">ただし、多くの場合、このエラーは、文字列を適切にエスケープしない、 &lt;code&gt;var&lt;/code&gt; を誤って使用するなど、別のエラーの結果にすぎません。どこかに括弧が多すぎる可能性もあります。このエラーがスローされた場合は、構文を慎重に確認してください。</target>
        </trans-unit>
        <trans-unit id="75c2f10e5aa796faf9bc362b9bd19e6e889e4841" translate="yes" xml:space="preserve">
          <source>However, provided arguments are still prepended to the constructor call:</source>
          <target state="translated">ただし、指定された引数はコンストラクタ呼び出しの前に付加されます。</target>
        </trans-unit>
        <trans-unit id="dd19dccaef7562e3656c9a100b4f55ef42fffd08" translate="yes" xml:space="preserve">
          <source>However, providing parenthesis to explicitly indicate precedence is correct:</source>
          <target state="translated">ただし、優先順位を明示するために括弧をつけるのが正しい。</target>
        </trans-unit>
        <trans-unit id="97e2c5535a759168412becefdd1bf3e1815503f4" translate="yes" xml:space="preserve">
          <source>However, setting the generic &lt;strong&gt;prototype&lt;/strong&gt; as the new object's prototype works even better:</source>
          <target state="translated">ただし、新しいオブジェクトのプロトタイプとして汎用&lt;strong&gt;プロトタイプ&lt;/strong&gt;を設定すると、さらにうまく機能します。</target>
        </trans-unit>
        <trans-unit id="1e11e841387ec0c6e1a4dbc05297c9f5c95dcde4" translate="yes" xml:space="preserve">
          <source>However, since the code points are different, string comparison will not treat them as equal. And since the number of code points in each version is different, they even have different lengths.</source>
          <target state="translated">しかし、コードポイントが違うので、文字列比較では同じ扱いにはなりません。また、バージョンごとにコードポイントの数が違うので、長ささえも違います。</target>
        </trans-unit>
        <trans-unit id="39ec507653dca53c60f648601219f3a82bc12d6d" translate="yes" xml:space="preserve">
          <source>However, since these are &lt;code&gt;BigInt&lt;/code&gt;s and not &lt;code&gt;BigDecimal&lt;/code&gt;s, this operation will round towards &lt;code&gt;0&lt;/code&gt; (which is to say, it will not return any fractional digits).</source>
          <target state="translated">ただし、これらは &lt;code&gt;BigInt&lt;/code&gt; であり、 &lt;code&gt;BigDecimal&lt;/code&gt; ではないため、この演算は &lt;code&gt;0&lt;/code&gt; に向かって丸められます（つまり、小数桁は返されません）。</target>
        </trans-unit>
        <trans-unit id="8a1264969786c794608eb6828a419e597ec032e7" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;await&lt;/code&gt; calls still run in series, which means the second &lt;code&gt;await&lt;/code&gt; will wait for the first one to finish. In this case, the result of the fastest timer is processed after the slowest.</source>
          <target state="translated">However, the &lt;code&gt;await&lt;/code&gt; calls still run in series, which means the second &lt;code&gt;await&lt;/code&gt; will wait for the first one to finish. In this case, the result of the fastest timer is processed after the slowest.</target>
        </trans-unit>
        <trans-unit id="a979c19b10bb900d27fa12f6bd72e17ef4663d95" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by comma. The following code creates an object with three properties and the keys are &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, &lt;code&gt;&quot;age&quot;&lt;/code&gt; and &lt;code&gt;&quot;baz&quot;&lt;/code&gt;. The values of these keys are a string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;, a number &lt;code&gt;42&lt;/code&gt;, and another object.</source>
          <target state="translated">ただし、&lt;em&gt;リテラル&lt;/em&gt;または&lt;em&gt;初期化子&lt;/em&gt;表記の利点は、中括弧内にプロパティを持つオブジェクトをすばやく作成できることです。カンマで区切られた &lt;code&gt;key: value&lt;/code&gt; ペアのリストを単純に表記します。次のコードは、3つのプロパティを持つオブジェクトを作成し、キーは &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;age&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;baz&quot;&lt;/code&gt; です。これらのキーの値は、文字列 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; 、数値 &lt;code&gt;42&lt;/code&gt; 、および別のオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="842b6087386cc39e29d6f9f778642f041abe2fd9" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by commas.</source>
          <target state="translated">However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by commas.</target>
        </trans-unit>
        <trans-unit id="90eb6b0644af78d5b428ee0a62bbaacec5e664a7" translate="yes" xml:space="preserve">
          <source>However, the following expressions are not equivalent due to &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence&lt;/a&gt; and stresses the importance of requiring the right-hand operand to be a single expression (grouped if needed by parentheses).</source>
          <target state="translated">ただし、次の式は&lt;a href=&quot;operator_precedence&quot;&gt;演算子の優先順位の&lt;/a&gt;ために同等ではなく、右側のオペランドを単一の式（括弧でグループ化する必要がある場合はグループ化）にする必要があることの重要性を強調しています。</target>
        </trans-unit>
        <trans-unit id="30b34a0bab1e094dcb3cefc2509d153860c7d52c" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in JavaScript, instead using floating points for all numbers.</source>
          <target state="translated">しかし、このポリフィルが使用されるであろうブラウザは、JavaScriptの内部整数型で最適化されておらず、すべての数値に浮動小数点を使用している可能性が高いため、以下の関数の方がパフォーマンスが高いと考えられます。</target>
        </trans-unit>
        <trans-unit id="5502e7d43a8615c92869746e5397dde33bba4059" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in javascript, instead using floating points for all numbers.</source>
          <target state="translated">しかし、このポリフィルが使われるであろうブラウザは、javascriptの内部整数型で最適化されておらず、すべての数値に浮動小数点を使用している可能性が高いため、次の関数の方がパフォーマンスが高いです。</target>
        </trans-unit>
        <trans-unit id="cb6b6a8647000d55f54a8880aa12a2276fcbbc59" translate="yes" xml:space="preserve">
          <source>However, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 32-bit and 64-bit:</source>
          <target state="translated">ただし、1.337という数字は2進数系では正確に表現できないため、32ビットと64ビットで異なります。</target>
        </trans-unit>
        <trans-unit id="f5124f1c3ad2f7f00e73baa927186aad0ccc0316" translate="yes" xml:space="preserve">
          <source>However, the preferred way to get an &lt;code&gt;Instance&lt;/code&gt; is through the asynchronous &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function, for example like this:</source>
          <target state="translated">ただし、 &lt;code&gt;Instance&lt;/code&gt; を取得するための推奨される方法は、非同期の&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;関数を使用することです（例：次のようになります）。</target>
        </trans-unit>
        <trans-unit id="755d9f766b888cb8715a1a08914fb46649ab701f" translate="yes" xml:space="preserve">
          <source>However, the third argument, &lt;code&gt;manyMoreArgs&lt;/code&gt;, will be an array that contains the 3&lt;sup&gt;rd&lt;/sup&gt;, 4&lt;sup&gt;th&lt;/sup&gt;, 5&lt;sup&gt;th&lt;/sup&gt;, 6&lt;sup&gt;th&lt;/sup&gt; ... &lt;var&gt;n&lt;/var&gt;&lt;sup&gt;th&lt;/sup&gt; &amp;mdash; as many arguments that the user includes.</source>
          <target state="translated">However, the third argument, &lt;code&gt;manyMoreArgs&lt;/code&gt; , will be an array that contains the 3&lt;sup&gt;rd&lt;/sup&gt;, 4&lt;sup&gt;th&lt;/sup&gt;, 5&lt;sup&gt;th&lt;/sup&gt;, 6&lt;sup&gt;th&lt;/sup&gt; ... &lt;var&gt;n&lt;/var&gt; &lt;sup&gt;th&lt;/sup&gt; &amp;mdash; as many arguments that the user includes.</target>
        </trans-unit>
        <trans-unit id="3a937a7caf1d4996fe3ff6dfb753bac4db8bb380" translate="yes" xml:space="preserve">
          <source>However, there are important differences that make &lt;code&gt;Map&lt;/code&gt; preferable in certain cases:</source>
          <target state="translated">However, there are important differences that make &lt;code&gt;Map&lt;/code&gt; preferable in certain cases:</target>
        </trans-unit>
        <trans-unit id="66ed0c333ad51c15ca60e48fe30cb7b8328df4a7" translate="yes" xml:space="preserve">
          <source>However, there is another alternative. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context.</source>
          <target state="translated">しかし、もう一つの選択肢があります。JavaScriptは静的にスコープされた言語なので、変数が宣言されているかどうかを知るには、それが囲い込みコンテキストで宣言されているかどうかを見ることで読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="471ebf7edf48600abd0f6d54e5ea534330273953" translate="yes" xml:space="preserve">
          <source>However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.</source>
          <target state="translated">しかし、これは矢印の後に改行を入れるか、以下のように括弧や中括弧を使うことで修正することができ、コードがきれいでふんわりとしたものになります。また、引数の間に改行を入れることもできます。</target>
        </trans-unit>
        <trans-unit id="cf3c21d43997f2e38fde291780ac2373d6107bbd" translate="yes" xml:space="preserve">
          <source>However, this combination of &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; declaration below is a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; due to &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; being hoisted to the top of the block. This results in an implicit re-declaration of the variable.</source>
          <target state="translated">However, this combination of &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; declaration below is a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; due to &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; being hoisted to the top of the block. This results in an implicit re-declaration of the variable.</target>
        </trans-unit>
        <trans-unit id="5eb7c1d2404c8192a9680a075b13909caf70856d" translate="yes" xml:space="preserve">
          <source>However, this is not the case for negative numbers. For example, &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 1073741821, which is different than &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; (which yields &lt;code&gt;-3&lt;/code&gt;):</source>
          <target state="translated">ただし、これは負の数には当てはまりません。たとえば、 &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; は1073741821を生成し、 &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; （ &lt;code&gt;-3&lt;/code&gt; を生成）とは異なります。</target>
        </trans-unit>
        <trans-unit id="14dcb2bd120f90b22199060ec27ba9fae6eef4eb" translate="yes" xml:space="preserve">
          <source>However, this kind of technique should be avoided. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context. The only exception is the global scope, but the global scope is bound to the global object, so checking the existence of a variable in the global context can be done by checking the existence of a property on the &lt;em&gt;global object&lt;/em&gt; (using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, for instance).</source>
          <target state="translated">ただし、このような手法は避けてください。 JavaScriptは静的スコープの言語であるため、変数が宣言されているかどうかは、それが囲んでいるコンテキストで宣言されているかどうかを確認することで読み取ることができます。唯一の例外はグローバルスコープですが、グローバルスコープはグローバルオブジェクトにバインドされているため、グローバルコンテキスト内の変数の存在を確認するには、&lt;em&gt;グローバルオブジェクトの&lt;/em&gt;プロパティの存在を確認し&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子を使用して、例えば）。</target>
        </trans-unit>
        <trans-unit id="2730f9b7a2f6ab7900a8832f3fabf4b290a2468e" translate="yes" xml:space="preserve">
          <source>However, this was actually a really bad solution as this (in conjunction with other &lt;code&gt;arguments&lt;/code&gt;, &lt;code&gt;callee&lt;/code&gt;, and &lt;code&gt;caller&lt;/code&gt; issues) make inlining and tail recursion impossible in the general case (you can achieve it in select cases through tracing, etc., but even the best code is suboptimal due to checks that would not otherwise be necessary.) The other major issue is that the recursive call will get a different &lt;code&gt;this&lt;/code&gt; value, e.g.:</source>
          <target state="translated">ただし、これは実際に非常に悪い解決策でした（他の &lt;code&gt;arguments&lt;/code&gt; 、 &lt;code&gt;callee&lt;/code&gt; 、 &lt;code&gt;caller&lt;/code&gt; 問題と組み合わせて）により、一般的なケースではインライン化と末尾再帰が不可能になります（トレースなどを通じて特定のケースで実現できますが、最善のコードは、他の方法では必要とされないチェックのために最適ではありません。）他の主要な問題は、再帰呼び出しが異なる &lt;code&gt;this&lt;/code&gt; 値を取得することです。例：</target>
        </trans-unit>
        <trans-unit id="e63c447862c1a00700022089166c5e9918e6d125" translate="yes" xml:space="preserve">
          <source>However, when possible, it's better for &lt;code&gt;iterable[Symbol.iterator]&lt;/code&gt; to return different iterators that always start from the beginning, like &lt;code&gt;&lt;a href=&quot;global_objects/set/@@iterator&quot;&gt;Set.prototype[@@iterator]()&lt;/a&gt;&lt;/code&gt; does.</source>
          <target state="translated">However, when possible, it's better for &lt;code&gt;iterable[Symbol.iterator]&lt;/code&gt; to return different iterators that always start from the beginning, like &lt;code&gt;&lt;a href=&quot;global_objects/set/@@iterator&quot;&gt;Set.prototype[@@iterator]()&lt;/a&gt;&lt;/code&gt; does.</target>
        </trans-unit>
        <trans-unit id="2c7f6b4de6ca0412e32fe91b98df7b3eb953a189" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</target>
        </trans-unit>
        <trans-unit id="f70a9726f7f1c9df802ece4459bb5ec212f9dbd6" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">ただし、最終結果は同じですが、プロセスには1つの重要な違いがあります。 &lt;code&gt;Object.create()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; を使用する場合、 &lt;code&gt;new.target&lt;/code&gt; 演算子は、コンストラクターとして使用される関数内で &lt;code&gt;undefined&lt;/code&gt; を指します。これは、オブジェクトの作成に &lt;code&gt;new&lt;/code&gt; キーワードが使用されていないためです。</target>
        </trans-unit>
        <trans-unit id="44a5203eb3853d077adb7930e82ede4e77c6e086" translate="yes" xml:space="preserve">
          <source>However, with any &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; value equal to or greater than the string's &lt;code&gt;length&lt;/code&gt;, the returned value &lt;em&gt;is&lt;/em&gt; the string's &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">However, with any &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; value equal to or greater than the string's &lt;code&gt;length&lt;/code&gt; , the returned value &lt;em&gt;is&lt;/em&gt; the string's &lt;code&gt;length&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d665da1be9c5139e8b9c230d03e2c075c39ac725" translate="yes" xml:space="preserve">
          <source>However, you can easily polyfill this method:</source>
          <target state="translated">しかし、この方法なら簡単にポリフィルができます。</target>
        </trans-unit>
        <trans-unit id="92b2e22e1dbe601387214c0563f125b87f989255" translate="yes" xml:space="preserve">
          <source>Human-readable description of the error</source>
          <target state="translated">エラーの人間が読める記述</target>
        </trans-unit>
        <trans-unit id="774702501a96f9f0360fe3448d0861eb6e5a1874" translate="yes" xml:space="preserve">
          <source>Human-readable description of the error.</source>
          <target state="translated">エラーの人間が読める説明。</target>
        </trans-unit>
        <trans-unit id="448a81285c534cff1a1840023fec38448070a6b1" translate="yes" xml:space="preserve">
          <source>IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;timeZone&lt;/code&gt; オプションのIANAタイムゾーン名</target>
        </trans-unit>
        <trans-unit id="a21d59a5661c2ebdd093c152333c7379faae31bd" translate="yes" xml:space="preserve">
          <source>IE-specific notes</source>
          <target state="translated">IE固有の注意事項</target>
        </trans-unit>
        <trans-unit id="60b82a5cb94fb01631398c058b59f037ae77f375" translate="yes" xml:space="preserve">
          <source>IIFE</source>
          <target state="translated">IIFE</target>
        </trans-unit>
        <trans-unit id="5b708885213e869006690316087909daafe502c3" translate="yes" xml:space="preserve">
          <source>IIFE are function expressions that are invoked as soon as the function is declared.</source>
          <target state="translated">IIFEは、関数が宣言されるとすぐに呼び出される関数式です。</target>
        </trans-unit>
        <trans-unit id="1cfaaf83b26c6843fa3671116defdf1614fa45fb" translate="yes" xml:space="preserve">
          <source>ISO 8601 format</source>
          <target state="translated">ISO8601形式</target>
        </trans-unit>
        <trans-unit id="9eeaa74042397b97a14990cbf31d4240f4ad8556" translate="yes" xml:space="preserve">
          <source>ISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)</source>
          <target state="translated">ISO暦</target>
        </trans-unit>
        <trans-unit id="cf8e6bee03070b3dc40f512e498ab2c7e3c95539" translate="yes" xml:space="preserve">
          <source>ISO-8859-1 character / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+00FF&lt;/code&gt;</source>
          <target state="translated">ISO-8859-1 character / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+00FF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="662d84aac50b0d7e6987ea1c9fc03b1a8ce495d6" translate="yes" xml:space="preserve">
          <source>Ideally, an integer between 0 and 23, representing the hour. If a value greater than 23 is provided, the datetime will be incremented by the extra hours.</source>
          <target state="translated">理想的には、0から23の間の整数で、時間を表します。23よりも大きな値を指定した場合は、その時間分だけ datetime がインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="2afda55b08fab9ecb1a05641c3479447864735a5" translate="yes" xml:space="preserve">
          <source>Identifier after number</source>
          <target state="translated">番号の後の識別子</target>
        </trans-unit>
        <trans-unit id="847e3311b1908b59346f71c4d71a8ffa62245c5d" translate="yes" xml:space="preserve">
          <source>Identifier associated with the label of the statement.</source>
          <target state="translated">ステートメントのラベルに関連付けられた識別子。</target>
        </trans-unit>
        <trans-unit id="eb00410628b8bc6a2a83e41c14565e4b8c6ef408" translate="yes" xml:space="preserve">
          <source>Identifier associated with the label of the statement. If the statement is not a loop or &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, this is required.</source>
          <target state="translated">Identifier associated with the label of the statement. If the statement is not a loop or &lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;, this is required.</target>
        </trans-unit>
        <trans-unit id="48da5a75972beaa5c2cdb9f750d86967381f2555" translate="yes" xml:space="preserve">
          <source>Identifier to be exported (so that it can be imported via &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; in another script).</source>
          <target state="translated">エクスポートする識別子（別のスクリプトの&lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;でインポートできるようにするため）。</target>
        </trans-unit>
        <trans-unit id="ce4aea56ef53c9d0e88aee0e538775cd2f579600" translate="yes" xml:space="preserve">
          <source>Identifiers with special meanings</source>
          <target state="translated">特別な意味を持つ識別子</target>
        </trans-unit>
        <trans-unit id="d51a0c29dcde247f2c5fa07087cd7413f54881c7" translate="yes" xml:space="preserve">
          <source>Identity (&lt;code&gt;a === b&lt;/code&gt;)</source>
          <target state="translated">アイデンティティ（ &lt;code&gt;a === b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b6ee669ffc2f6225a3fb2a4731a3e560ea59a0b1" translate="yes" xml:space="preserve">
          <source>Identity / strict equality (===)</source>
          <target state="translated">同一性/厳格な平等(===)</target>
        </trans-unit>
        <trans-unit id="e31d1e49c9c1b5219f967fd5909aabf716932429" translate="yes" xml:space="preserve">
          <source>Identity operator.</source>
          <target state="translated">アイデンティティ演算子。</target>
        </trans-unit>
        <trans-unit id="37706df937348636f41c4367505b2b1bf3c7bdc7" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; is encountered during conversion it is either omitted (when it is found in an object) or censored to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; (when it is found in an array). &lt;code&gt;JSON.stringify()&lt;/code&gt; can also just return &lt;code&gt;undefined&lt;/code&gt; when passing in &quot;pure&quot; values like &lt;code&gt;JSON.stringify(function(){})&lt;/code&gt; or &lt;code&gt;JSON.stringify(undefined)&lt;/code&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;変換中に遭遇することはどちらか（それがオブジェクトに発見された場合）を省略又はに打ち切られる&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;（これは配列中に発見された場合）。 &lt;code&gt;JSON.stringify()&lt;/code&gt; は、 &lt;code&gt;JSON.stringify(function(){})&lt;/code&gt; や &lt;code&gt;JSON.stringify(undefined)&lt;/code&gt; のような「純粋な」値を渡すと、単に &lt;code&gt;undefined&lt;/code&gt; を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="0830366e44ca860573514c10a22740499f87aeaa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;begin&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;begin&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ee01d9cf0fc88d1b48492c445ed087ead9d9db5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, an empty string is returned.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , an empty string is returned.</target>
        </trans-unit>
        <trans-unit id="cf2a71f8aad1d69fb27e2edb72ffdca7718b8575" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or negative, no elements are removed. In this case, you should specify at least one new element (see below).</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or negative, no elements are removed. In this case, you should specify at least one new element (see below).</target>
        </trans-unit>
        <trans-unit id="493249ea5a30d91075fe23609561379fb3cfc61a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is omitted, or if its value is equal to or larger than &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; (that is, if it is equal to or greater than the number of elements left in the array, starting at &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt;), then all the elements from &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; to the end of the array will be deleted.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is omitted, or if its value is equal to or larger than &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; (that is, if it is equal to or greater than the number of elements left in the array, starting at &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; ), then all the elements from &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; to the end of the array will be deleted.</target>
        </trans-unit>
        <trans-unit id="0db5b6ced976a6ac58bdc41473dd0de476e98846" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; , inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</target>
        </trans-unit>
        <trans-unit id="d616a57339402e501cabfc684de039bd2e7d84e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence (&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;).</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence ( &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b1146ef210942a5665073aedf95f5b545cec3a64" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;).</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence ( &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21d843701dc6ae4dccacff84635f2767354ca7d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;sab.byteLength&lt;/code&gt;).</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence ( &lt;code&gt;sab.byteLength&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0ed5ac3600cda1d212d5c69ad6c4d2b72f2bce4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;typedarray.length&lt;/code&gt;).</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence ( &lt;code&gt;typedarray.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5aa89169f61bf8a0b59192f2c6adc83e482b095e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is omitted or undefined, or greater than &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, &lt;code&gt;slice()&lt;/code&gt; extracts to the end of the string. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt;. (For example, if &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt;, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt;.) If it is not undefined and not a number after &lt;code&gt;Number(&lt;var&gt;endIndex&lt;/var&gt;)&lt;/code&gt;, an empty string is returned.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is omitted or undefined, or greater than &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , &lt;code&gt;slice()&lt;/code&gt; extracts to the end of the string. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; . (For example, if &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; , it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt; .) If it is not undefined and not a number after &lt;code&gt;Number(&lt;var&gt;endIndex&lt;/var&gt;)&lt;/code&gt; , an empty string is returned.</target>
        </trans-unit>
        <trans-unit id="4acb01293c9ebc96050277ec4ecea3d16d5d902c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be negative, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-3, 0)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.)</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be negative, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-3, 0)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="8878d32eee2cef239c9db5973a9f340fcbb26f81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified, and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; are both positive or negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be greater than &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt;, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-1, -3)&lt;/code&gt; or &lt;code&gt;slice(3, 1)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.)</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified, and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; are both positive or negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be greater than &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; , otherwise an empty string is returned. (For example, &lt;code&gt;slice(-1, -3)&lt;/code&gt; or &lt;code&gt;slice(3, 1)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="121294759ab7292c1337d19189daa430ce452c18" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; is not specified and a regular expressions object is supplied, that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; value) will be copied over.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; 指定されておらず、正規表現オブジェクトが供給され、そのオブジェクトの旗（および &lt;code&gt;lastIndex&lt;/code&gt; のの値）がコピーされます。</target>
        </trans-unit>
        <trans-unit id="8d99b93b549e170bd47548fe7639c9d43ffa3b25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt;, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt; , inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</target>
        </trans-unit>
        <trans-unit id="66544d3874ce4edf9eae7f1ef1fc6624550a1bd4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</target>
        </trans-unit>
        <trans-unit id="3da6648a80a1cefb8dd16cb0d291276bb874d4ee" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt;. If the computed index is less or equal than &lt;code&gt;-1 * &lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;, the entire array will be searched.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt; . If the computed index is less or equal than &lt;code&gt;-1 * &lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; , the entire array will be searched.</target>
        </trans-unit>
        <trans-unit id="487c67ed27fb656d12527f75dab2874199fb2c3b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;hint&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;hint&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0f5efa3659e939cb61d75f409dbc397e5dfd4f0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</target>
        </trans-unit>
        <trans-unit id="74661abc79fb28575922d95466c74870f72fbf49" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;substring()&lt;/code&gt; returns an empty string.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; が &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; と等しい場合、 &lt;code&gt;substring()&lt;/code&gt; は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="84c11d6a40baa8e63817b8454dc5cce38f79ac98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is greater than &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is greater than &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; , then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</target>
        </trans-unit>
        <trans-unit id="4a1188d27acd2c85324f5dbe55ce141e568b561d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</target>
        </trans-unit>
        <trans-unit id="5b7e60e3ac0d123fc54358e5f55ea9dba862cec9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is a negative number, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is a negative number, it is treated as &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="130c6593a9b08fcf958e0b432ebefd8329c78064" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</target>
        </trans-unit>
        <trans-unit id="ebb546c2adf4b19ea6847ce51502abf3f40c22af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt; is returned.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;[]&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="12844bd10cfb1aad475650759ba13047e670ffb9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is a non-&lt;code&gt;RegExp&lt;/code&gt; object, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is a non- &lt;code&gt;RegExp&lt;/code&gt; object, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; by using &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40d9a3e2e0e4ac01cd08feafbb23aaa11cbf2888" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</target>
        </trans-unit>
        <trans-unit id="ffed4cc806e515983ab47d40601f3fb95e4df288" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; appears at the beginning (or end) of the string, it still has the effect of splitting. The result is an empty (i.e. zero length) string, which appears at the first (or last) position of the returned array.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; appears at the beginning (or end) of the string, it still has the effect of splitting. The result is an empty (i.e. zero length) string, which appears at the first (or last) position of the returned array.</target>
        </trans-unit>
        <trans-unit id="68e199d99c252fd48e1f805263f62e2034604071" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; contains multiple characters, that entire character sequence must be found in order to split.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; contains multiple characters, that entire character sequence must be found in order to split.</target>
        </trans-unit>
        <trans-unit id="5b60c088d78a681e73c91c163ad39c4f7b653fc5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, matched results are included in the array.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; , matched results are included in the array.</target>
        </trans-unit>
        <trans-unit id="6a59ad5deb2302a9520d8bf6c2c307e8389d3d22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression with capturing parentheses, then each time &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; matches, the results (including any &lt;code&gt;undefined&lt;/code&gt; results) of the capturing parentheses are spliced into the output array.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression with capturing parentheses, then each time &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; matches, the results (including any &lt;code&gt;undefined&lt;/code&gt; results) of the capturing parentheses are spliced into the output array.</target>
        </trans-unit>
        <trans-unit id="dd5410db2a9d04127c7025a228a8e52b90759641" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; is converted to an array of each of its UTF-16 &quot;characters&quot;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is an empty string ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; is converted to an array of each of its UTF-16 &quot;characters&quot;.</target>
        </trans-unit>
        <trans-unit id="15b494b90462f7791f44743fe53dc8f69ae000e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is omitted or does not occur in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;, the returned array contains one element consisting of the entire string.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is omitted or does not occur in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; , the returned array contains one element consisting of the entire string.</target>
        </trans-unit>
        <trans-unit id="8fab622fa90718e949282abdba7d384b53a7b0ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd3655fbe616d69829dde2d91c2c3cbc32cae520" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="62a6623bb0673ca48812684ca8a1b3785951570f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is greater than the index range of the sequence, an empty array is returned.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is greater than the index range of the sequence, an empty array is returned.</target>
        </trans-unit>
        <trans-unit id="518b8100637a518349d561e5c0006da27418be4d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; starts from the index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; starts from the index &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4bcc887cd3d6ed9699dcf5331a44ecb87115cfcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; is not extensible, the &lt;code&gt;prototype&lt;/code&gt; parameter must be the same value as &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; が拡張可能でない場合、 &lt;code&gt;prototype&lt;/code&gt; パラメータは &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt; と同じ値である必要があります。</target>
        </trans-unit>
        <trans-unit id="27f8a986dabc90f3ed0ff5a4753f1d7845a6539b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</source>
          <target state="translated">If &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</target>
        </trans-unit>
        <trans-unit id="64b63b25d9e84effd29498fdf2a885d5484eb8c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IPOdate&lt;/code&gt; is an existing &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object, it can be set to August 9, 1995 (local time) as follows:</source>
          <target state="translated">場合 &lt;code&gt;IPOdate&lt;/code&gt; 既存のある&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトは、次のように、それは1995年8月9日（現地時間）に設定することができます。</target>
        </trans-unit>
        <trans-unit id="eed1125bbd1b5a051850eabf9e5873d34704e7da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OP&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt; and &lt;code&gt;OP&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt; have different precedence levels (see the table below), the operator with the highest precedence goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code.</source>
          <target state="translated">If &lt;code&gt;OP&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt; and &lt;code&gt;OP&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt; have different precedence levels (see the table below), the operator with the highest precedence goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code.</target>
        </trans-unit>
        <trans-unit id="c8a241ffd2138d21f32a5fee3d772c309c3fb36c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment &lt;code&gt;i&lt;/code&gt; and decrement &lt;code&gt;j&lt;/code&gt; at once.</source>
          <target state="translated">If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment &lt;code&gt;i&lt;/code&gt; and decrement &lt;code&gt;j&lt;/code&gt; at once.</target>
        </trans-unit>
        <trans-unit id="eb85c26fba31d1a9441d0eb6dbc46b2aea5b80a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment two variables at once.</source>
          <target state="translated">場合各側に10個の要素を持つ2次元配列であり、次のコードは、一度に2つの変数をインクリメントするコンマ演算子を使用します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4b027b1b24fc7bb8b04abb0cb7a08da1bf2616b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;begin&lt;/code&gt; is greater than the length of the sequence, an empty array is returned.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; がシーケンスの長さより大きい場合、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="1dc400567ab75269215a8320aa1d021ca5028205" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;begin&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; が未定義の場合、 &lt;code&gt;slice&lt;/code&gt; はインデックス &lt;code&gt;0&lt;/code&gt; から始まります。</target>
        </trans-unit>
        <trans-unit id="70ac2a72695a74d8e8f6b33ca1a725afc2199df0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;bufferSource&lt;/code&gt; が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;または&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="c105983c489170e4e720a825176c1cbbe0a9eafe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;bufferSource&lt;/code&gt; が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="1a5537e2caa6ceac829f312a0e5008c342f283b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;bufferSource&lt;/code&gt; が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;または&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="3ccdf435ee7864d06931191b2056c8e2ed7a8c22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;bufferSource&lt;/code&gt; が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="4e89c55d2f78906b0dcf24470198719184ae2ae3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is greater than 0, sort &lt;code&gt;b&lt;/code&gt; to an index lower than &lt;code&gt;a&lt;/code&gt;, i.e. &lt;code&gt;b&lt;/code&gt; comes first.</source>
          <target state="translated">場合 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 、ソート0より大きい &lt;code&gt;b&lt;/code&gt; より低いインデックス、すなわち &lt;code&gt;b&lt;/code&gt; が最初に来ます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5d2bff07568b6c90bcc417bf4d0e753a3bcc19f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is less than 0, sort &lt;code&gt;a&lt;/code&gt; to an index lower than &lt;code&gt;b&lt;/code&gt;, i.e. &lt;code&gt;a&lt;/code&gt; comes first.</source>
          <target state="translated">場合 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0以上で、ソートインデックスよりも低い &lt;code&gt;b&lt;/code&gt; 、すなわち &lt;code&gt;a&lt;/code&gt; 最初に来ます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="223405fddc558bc5f7143526ce03de9f76e4808f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0, leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behavior, thus, not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</source>
          <target state="translated">場合 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0を返す、のままと &lt;code&gt;b&lt;/code&gt; は互いに対して変化しないが、すべての異なる要素に対してソート。注：ECMAscript標準はこの動作を保証しないため、すべてのブラウザー（たとえば、少なくとも2003年にさかのぼるMozillaバージョン）がこれを尊重するわけではありません。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa305bceeb386390b56ee72977e5735d91c97853" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0, leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</source>
          <target state="translated">場合 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0を返す、のままと &lt;code&gt;b&lt;/code&gt; は互いに対して変化しないが、すべての異なる要素に対してソート。注：ECMAscript標準はこの動作を保証するものではないため、すべてのブラウザー（たとえば、少なくとも2003年まで遡るMozillaバージョン）がこれを尊重するわけではありません。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0225b42f9d41db4959457c9bc952359283745d0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns greater than 0, sort &lt;code&gt;b&lt;/code&gt; to an index lower than &lt;code&gt;a&lt;/code&gt; (i.e. &lt;code&gt;b&lt;/code&gt; comes first).</source>
          <target state="translated">場合 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 、ソート、0より大きく返し &lt;code&gt;b&lt;/code&gt; のより低いインデックス（すなわち &lt;code&gt;b&lt;/code&gt; 最初に来ます）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="517740eb24e4a25aeecf7184e1a227c9c3fcbfed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns less than 0, sort &lt;code&gt;a&lt;/code&gt; to an index lower than &lt;code&gt;b&lt;/code&gt; (i.e. &lt;code&gt;a&lt;/code&gt; comes first).</source>
          <target state="translated">もし &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0以上戻り、ソート率よりも低いと &lt;code&gt;b&lt;/code&gt; （つまり、 &lt;code&gt;a&lt;/code&gt; が最初に来ます）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed385a756462543affcbb15ce05a2a5778a35f22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, &quot;Banana&quot; comes before &quot;cherry&quot;. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, &quot;80&quot; comes before &quot;9&quot; in Unicode order. All &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array.</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt; が指定されていない場合、すべての &lt;code&gt;undefined&lt;/code&gt; 配列要素は、それらを文字列に変換し、文字列をUTF-16コード単位の順序で比較することによって並べ替えられます。たとえば、「バナナ」は「チェリー」の前にきます。数値ソートでは、9は80の前に来ますが、数値は文字列に変換されるため、 &quot;80&quot;はUnicode順で &quot;9&quot;の前に来ます。 &lt;code&gt;undefined&lt;/code&gt; 要素はすべて配列の最後にソートされます。</target>
        </trans-unit>
        <trans-unit id="b76b7a0aeafaa087aee6bc8d316aa1cc0301c1a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, &quot;banana&quot; comes before &quot;cherry&quot;. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, &quot;80&quot; comes before &quot;9&quot; in the Unicode order. All &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array.</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt; が指定されていない場合、 &lt;code&gt;undefined&lt;/code&gt; すべての配列要素は、文字列に変換し、UTF-16コード単位の順序で文字列を比較することによって並べ替えられます。たとえば、「バナナ」は「チェリー」の前にあります。数値ソートでは、9は80の前にありますが、数値は文字列に変換されるため、Unicodeの順序では「80」が「9」の前にあります。 &lt;code&gt;undefined&lt;/code&gt; 要素はすべて、配列の最後に並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="2d2c5c13a8881bbff4667bdffbd6ad348b6e379a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted according to the return value of the compare function (all &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array, with no call to &lt;code&gt;compareFunction&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are two elements being compared, then:</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt; が指定されている場合、すべての &lt;code&gt;undefined&lt;/code&gt; 配列要素は、compare関数の戻り値に従ってソートされます（すべての &lt;code&gt;undefined&lt;/code&gt; 要素は、 &lt;code&gt;compareFunction&lt;/code&gt; への呼び出しなしで、配列の最後にソートされます）。 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が比較される2つの要素の場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="130adca0f52b183426249a215e0d0abe632aa26e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;condition&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt; (it is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;), the operator returns the value of &lt;code&gt;exprT&lt;/code&gt;; otherwise (when &lt;code&gt;condition&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;) it returns the value of &lt;code&gt;exprF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に変換できる場合（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truey&lt;/a&gt;）、演算子は &lt;code&gt;exprT&lt;/code&gt; の値を返します。それ以外の場合（ &lt;code&gt;condition&lt;/code&gt; が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsyの&lt;/a&gt;場合）、 &lt;code&gt;exprF&lt;/code&gt; の値を返します。</target>
        </trans-unit>
        <trans-unit id="81390427ea93c90575169e03eabf59e8dba53feb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;continue&lt;/code&gt; had a label of &lt;code&gt;checkiandj&lt;/code&gt;, the program would continue at the top of the &lt;code&gt;checkiandj&lt;/code&gt; statement.</source>
          <target state="translated">場合は &lt;code&gt;continue&lt;/code&gt; のラベルだった &lt;code&gt;checkiandj&lt;/code&gt; を、プログラムはの先頭に継続する &lt;code&gt;checkiandj&lt;/code&gt; の声明。</target>
        </trans-unit>
        <trans-unit id="0669233d4672aaeccf93a7f396024d752c9f52d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;deleteCount&lt;/code&gt; is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).</source>
          <target state="translated">場合 &lt;code&gt;deleteCount&lt;/code&gt; が 0または負であり、何の要素が除去されていません。この場合、少なくとも1つの新しい要素を指定する必要があります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="4c76efae73e4cb264a24f14a2cd58259099138f9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;deleteCount&lt;/code&gt; is omitted, or if its value is larger than &lt;code&gt;array.length - start&lt;/code&gt; (that is, if it is greater than the number of elements left in the array, starting at &lt;code&gt;start&lt;/code&gt;), then all of the elements from &lt;code&gt;start&lt;/code&gt; through the end of the array will be deleted.</source>
          <target state="translated">&lt;code&gt;deleteCount&lt;/code&gt; が省略されている場合、またはその値が &lt;code&gt;array.length - start&lt;/code&gt; よりも大きい場合（つまり、 &lt;code&gt;start&lt;/code&gt; から始まる、配列に残っている要素の数より大きい場合）、 &lt;code&gt;start&lt;/code&gt; からend までのすべての要素アレイのが削除されます。</target>
        </trans-unit>
        <trans-unit id="70a2b4d9d3b36ae4510ef7245f5f535ff3ce5084" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;digits&lt;/code&gt; is too small or too large. Values between 0 and 100, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</source>
          <target state="translated">もし &lt;code&gt;digits&lt;/code&gt; 小さすぎる、または大きすぎます。0から100までの値は、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; を&lt;/a&gt;引き起こしません。実装では、選択した値よりも大きい値と小さい値をサポートできます。</target>
        </trans-unit>
        <trans-unit id="4580b6fff4be8bc33c435f043a3c4fea2f3c3e85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence (&lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; がシーケンスの長さより大きい場合、 &lt;code&gt;slice&lt;/code&gt; はシーケンスの最後（ &lt;code&gt;arr.length&lt;/code&gt; ）まで抽出を抽出します。</target>
        </trans-unit>
        <trans-unit id="f53aeed879b131ebf52a47532e5ca0f2980fae0c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is negative, it is treated as &lt;code&gt;array.length + end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; が負の場合、 &lt;code&gt;array.length + end&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="622cb32152550c51b1ec138f2a6a7f8d94aa6205" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy until the end (default to &lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">場合は &lt;code&gt;end&lt;/code&gt; 省略され、 &lt;code&gt;copyWithin&lt;/code&gt; は最後（のデフォルトまでコピーされます &lt;code&gt;arr.length&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="732b6a679d4cc00072a8041a727498042ab37315" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy until the last index (default to &lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; を省略した場合、 &lt;code&gt;copyWithin&lt;/code&gt; は最後のインデックス（デフォルトは &lt;code&gt;arr.length&lt;/code&gt; ）までコピーします。</target>
        </trans-unit>
        <trans-unit id="b66c532602a6b4b7f541db03b69a714e5a2b76a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">もし &lt;code&gt;end&lt;/code&gt; 、省略されている &lt;code&gt;slice&lt;/code&gt; シーケンス（の端部を通って抽出を &lt;code&gt;arr.length&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8a30a0de12206cc82d1d8300d6d97b1aabb83b4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;sab.byteLength&lt;/code&gt;)&lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">場合 &lt;code&gt;end&lt;/code&gt; 省略され、 &lt;code&gt;slice&lt;/code&gt; 配列（の端部を通って抽出 &lt;code&gt;sab.byteLength&lt;/code&gt; ） &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8d10f38ed7b5214cddef84203097e400579f986" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;typedarray.length&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;end&lt;/code&gt; 省略され、 &lt;code&gt;slice&lt;/code&gt; 配列（の端部を通って抽出 &lt;code&gt;typedarray.length&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8d21f59d081b9187253e8d053e0e5fcd55d4d566" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt;, returns &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt;; else, returns &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; に変換することができ &lt;code&gt;true&lt;/code&gt; 、返品は &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; 。他に、リターンは &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35d9abc0608d0e3ea3f9c0446a5ba23235d15644" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt;, returns &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt;; else, returns &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; に変換することができる &lt;code&gt;true&lt;/code&gt; 、戻って &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt; 。他に、リターンは &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f24f8d2a77b27c491ed6280ed52670147ab0b196" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fractionDigits&lt;/code&gt; is too small or too large. Values between 0 and 20, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</source>
          <target state="translated">場合 &lt;code&gt;fractionDigits&lt;/code&gt; 小さすぎる、または大きすぎます。0から20までの値は、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; を&lt;/a&gt;引き起こしません。実装では、より大きな値とより小さな値もサポートできます。</target>
        </trans-unit>
        <trans-unit id="c3a08523a482bf8b3d61cb286205ca75f1674f55" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</source>
          <target state="translated">&lt;code&gt;fromIndex&lt;/code&gt; が配列の長さ以上の場合、 &lt;code&gt;false&lt;/code&gt; が返されます。配列は検索されません。</target>
        </trans-unit>
        <trans-unit id="5df6396fcd29ff991a9e14ea494b1556385ed2d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fromIndex&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;searchElement&lt;/code&gt;. If the computed index is less or equal than &lt;code&gt;-1 * array.length&lt;/code&gt;, the entire array will be searched.</source>
          <target state="translated">場合 &lt;code&gt;fromIndex&lt;/code&gt; 負であり、計算されたインデックスは、の検索を開始するために、アレイ内の位置として使用されるように計算される &lt;code&gt;searchElement&lt;/code&gt; と。計算されたインデックスが &lt;code&gt;-1 * array.length&lt;/code&gt; 以下の場合、配列全体が検索されます。</target>
        </trans-unit>
        <trans-unit id="0c13c1e9ad0c6b9a449ebb75ebc92f5c906c3f07" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;g&lt;/code&gt; is absent, this will always be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; がない場合、これは常に &lt;code&gt;0&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8c6c46a41fb76b9e0e681e95a66aa79b8f042960" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;&quot;number&quot;&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; first tries to call &lt;code&gt;valueOf&lt;/code&gt;, and if that fails, it calls &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hint&lt;/code&gt; が &lt;code&gt;&quot;number&quot;&lt;/code&gt; の場合、 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 最初に &lt;code&gt;valueOf&lt;/code&gt; の呼び出しを試み、それが失敗した場合は &lt;code&gt;toString&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="df85462510e04f2f839a7631bf941f80c7953f6c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;&quot;string&quot;&lt;/code&gt; or &lt;code&gt;&quot;default&quot;&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;hint&lt;/code&gt; ある &lt;code&gt;&quot;string&quot;&lt;/code&gt; または &lt;code&gt;&quot;default&quot;&lt;/code&gt; 、 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; を呼び出すしようとする&lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt;メソッドを。場合 &lt;code&gt;toString&lt;/code&gt; プロパティが存在しない、それが呼び出そうと&lt;a href=&quot;../object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt;方法および場合 &lt;code&gt;valueOf&lt;/code&gt; いずれかが存在しない、 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; スロー&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c761509807341dc52703b81421a4a131e809acc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; first tries to call &lt;code&gt;valueOf&lt;/code&gt;, and if that fails, it calls &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hint&lt;/code&gt; が &lt;code&gt;number&lt;/code&gt; の場合、 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 最初に &lt;code&gt;valueOf&lt;/code&gt; を呼び出そうとし、失敗した場合は &lt;code&gt;toString&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2b21616d26fe4a78293d088842e2969994ff5f28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indexEnd&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">場合 &lt;code&gt;indexEnd&lt;/code&gt; が省略され、 &lt;code&gt;substring()&lt;/code&gt; 、文字列の末尾に文字を抽出します。</target>
        </trans-unit>
        <trans-unit id="11187126c129f39c22041af784cef8d066d040df" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indexStart&lt;/code&gt; is greater than &lt;code&gt;indexEnd&lt;/code&gt;, then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</source>
          <target state="translated">&lt;code&gt;indexStart&lt;/code&gt; が &lt;code&gt;indexEnd&lt;/code&gt; より大きい場合、 &lt;code&gt;substring()&lt;/code&gt; の効果は2つの引数が交換されたかのようになります。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="d95177eda65034248451a49cc0f1e66632749edd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to or less than the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting from &lt;code&gt;lastIndex&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;lastIndex&lt;/code&gt; のは、文字列の長さ以下であり、正規表現が空の文字列と一致する場合、正規表現から始まる入力と一致 &lt;code&gt;lastIndex&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="7b33670f984535e0b59f902eaf191c404eb48715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and &lt;code&gt;lastIndex&lt;/code&gt; is reset to 0.</source>
          <target state="translated">場合 &lt;code&gt;lastIndex&lt;/code&gt; のは、文字列の長さに等しく、正規表現が空の文字列は、正規表現のミスマッチ入力と一致し、しない場合 &lt;code&gt;lastIndex&lt;/code&gt; のは 0にリセットされます。</target>
        </trans-unit>
        <trans-unit id="5bf25365ce1d6a9d04df754837052ef1438d40ea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at &lt;code&gt;lastIndex&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;lastIndex&lt;/code&gt; のは、文字列の長さに等しく、正規表現が空の文字列と一致する場合、正規表現が始まる入力と一致 &lt;code&gt;lastIndex&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="f431551312059047b6d1f0177bad8d497d6b2ecd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is greater than the length of the string, &lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; fail, then &lt;code&gt;lastIndex&lt;/code&gt; is set to 0.</source>
          <target state="translated">&lt;code&gt;lastIndex&lt;/code&gt; が文字列の長さより大きい場合、&lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; は&lt;/a&gt;失敗し、 &lt;code&gt;lastIndex&lt;/code&gt; は0に設定されます。</target>
        </trans-unit>
        <trans-unit id="5422b869ba1037ff1cca0689e54f83d4ea561a1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;substr()&lt;/code&gt; は文字列の最後までの文字を抽出します。</target>
        </trans-unit>
        <trans-unit id="083906d99f8ee5dd58fa1d2cf691d55abc86cda6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is a negative number, it is treated as 0.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; が負の数の場合、0として扱われます。</target>
        </trans-unit>
        <trans-unit id="e410f550731be85f946b7f2f4aed03a005c57a1c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">場合 &lt;code&gt;length&lt;/code&gt; 省略され、 &lt;code&gt;substr()&lt;/code&gt; 文字列の末尾に文字を抽出します。</target>
        </trans-unit>
        <trans-unit id="4cc430c3c8ccf77b6186468cad0a93d2a7e19225" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maximum&lt;/code&gt; is specified and is smaller than &lt;code&gt;initial&lt;/code&gt;, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">場合は &lt;code&gt;maximum&lt;/code&gt; 指定され、より小さくなっている &lt;code&gt;initial&lt;/code&gt; 、&lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="a34d5712abc36aaa2eaef3f633100f03db354c27" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maximum&lt;/code&gt; is specified and is smaller than &lt;code&gt;initial&lt;/code&gt;, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">場合は &lt;code&gt;maximum&lt;/code&gt; 指定され、より小さくなっている &lt;code&gt;initial&lt;/code&gt; 、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="601972a8fa25f9b39b82c8fefe704d9ac430e5cf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;memoryDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;memoryDescriptor&lt;/code&gt; がオブジェクト型でない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="c0f0bc257bf3b949201321dcae7fcebf0bb14339" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;memoryDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;memoryDescriptor&lt;/code&gt; がオブジェクト型ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="73a182f41773189b8cfdf256c034f5a1d80c29e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;module&lt;/code&gt; is not a &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object instance, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; が&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;オブジェクトのインスタンスでない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="58c26c2f532124c97bb04e627c6da47861a4662f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;numeric:auto&lt;/code&gt; option is passed, it will produce the string &lt;code&gt;yesterday&lt;/code&gt; or &lt;code&gt;tomorrow&lt;/code&gt; instead of &lt;code&gt;1 day ago&lt;/code&gt; or &lt;code&gt;in 1 day&lt;/code&gt;. This allows to not always have to use numeric values in the output.</source>
          <target state="translated">場合 &lt;code&gt;numeric:auto&lt;/code&gt; オプションが渡され、それが文字列に生成されます &lt;code&gt;yesterday&lt;/code&gt; や &lt;code&gt;tomorrow&lt;/code&gt; の代わりに、 &lt;code&gt;1 day ago&lt;/code&gt; または &lt;code&gt;in 1 day&lt;/code&gt; 。これにより、出力で常に数値を使用する必要がなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae5c7ddce76e5aae957eb4fa1138ed2f02a10861" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;onFulfilled&lt;/code&gt; returns a promise, the return value of &lt;code&gt;then&lt;/code&gt; will be resolved/rejected by the promise.</source>
          <target state="translated">場合 &lt;code&gt;onFulfilled&lt;/code&gt; は約束を返す、の戻り値 &lt;code&gt;then&lt;/code&gt; /解決の約束によって拒否されます。</target>
        </trans-unit>
        <trans-unit id="2f2728a4f70add9e2f77317adda6b2ef26418eaa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseFloat&lt;/code&gt; encounters a character other than a plus sign (&lt;code&gt;+&lt;/code&gt;), minus sign (&lt;code&gt;-&lt;/code&gt; U+002D HYPHEN-MINUS), numeral (&lt;code&gt;0&lt;/code&gt;&amp;ndash;&lt;code&gt;9&lt;/code&gt;), decimal point (&lt;code&gt;.&lt;/code&gt;), or exponent (&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;), it returns the value up to that character, ignoring the invalid character and characters following it.</source>
          <target state="translated">場合 &lt;code&gt;parseFloat&lt;/code&gt; ははプラス記号（以外の文字に遭遇 &lt;code&gt;+&lt;/code&gt; （）、マイナス記号 &lt;code&gt;-&lt;/code&gt; U + 002D HYPHEN-MINUS）、数字（ &lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt; ）（小数点 &lt;code&gt;.&lt;/code&gt; ）、又は指数（ &lt;code&gt;e&lt;/code&gt; 又は &lt;code&gt;E&lt;/code&gt; に）、それが返さ無効な文字とそれに続く文字を無視して、その文字までの値。</target>
        </trans-unit>
        <trans-unit id="83728eb0d2a9e584dc04b1ee5d31294530473376" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified &lt;code&gt;radix&lt;/code&gt;, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.</source>
          <target state="translated">場合 &lt;code&gt;parseInt&lt;/code&gt; 、指定中の数字ではない文字に遭遇 &lt;code&gt;radix&lt;/code&gt; 、それを無視し、すべての後続の文字と戻って整数値は、その時点までに解析されました。 &lt;code&gt;parseInt&lt;/code&gt; は、数値を整数値に切り捨てます。先頭と末尾のスペースは許可されます。</target>
        </trans-unit>
        <trans-unit id="8ead9333b62110d8b1b732ad127cf111fdc2eaf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.</source>
          <target state="translated">場合 &lt;code&gt;parseInt&lt;/code&gt; 指定された基数での数字ではない文字に遭遇し、それを無視し、すべての後続の文字と戻って整数値は、その時点までに解析されました。 &lt;code&gt;parseInt&lt;/code&gt; は数値を整数値に切り捨てます。先頭と末尾のスペースを使用できます。</target>
        </trans-unit>
        <trans-unit id="5ffbeddf0bcd7aec9bc1eee89d991e6401f78d4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;precision&lt;/code&gt; is not between 1 and 100 (inclusive), a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; が1〜100（両端を含む）の間でない場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。実装では、より大きな値とより小さな値もサポートできます。ECMA-262は、最大21桁の有効桁数しか必要としません。</target>
        </trans-unit>
        <trans-unit id="46150c365467758d22f0868ddafd9b7825000fcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;precision&lt;/code&gt; is not between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; (inclusive), a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;100&lt;/code&gt; （両端を含む）の間にない場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。実装は、より大きな値とより小さな値もサポートできます。ECMA-262は、最大21桁の有効数字の精度のみを必要とします。</target>
        </trans-unit>
        <trans-unit id="9a5460969a95744dffb5bbddf36d4bfb1069be0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;proto&lt;/code&gt; is neither of these a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; がこれらのどちらでもない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="33c87e445a7edd2b640f50dae6ac2b0133882f41" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;replacer&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</source>
          <target state="translated">場合 &lt;code&gt;replacer&lt;/code&gt; 配列であり、配列の値が得られたJSON文字列に含まれるべきであるオブジェクトのプロパティの名前を示します。</target>
        </trans-unit>
        <trans-unit id="3c3a227a6da9d264dbe28f5f791a62dedb0625b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return(&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; is called on a generator that is already in &quot;completed&quot; state, the generator will remain in &quot;completed&quot; state.</source>
          <target state="translated">場合は &lt;code&gt;return(&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; 「完了」状態に既にある発電機で呼び出され、発電機は、「完了」状態のままになります。</target>
        </trans-unit>
        <trans-unit id="87bf4b6e3dc943f062b1864ad40de7d0964087f1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return(value)&lt;/code&gt; is called on a generator that is already in &quot;completed&quot; state, the generator will remain in &quot;completed&quot; state. If no argument is provided, the return object is the same as if &lt;code&gt;.next()&lt;/code&gt;. If an argument is provided, it will be set to the value of the &lt;code&gt;value&lt;/code&gt; property of the returned object.</source>
          <target state="translated">場合は &lt;code&gt;return(value)&lt;/code&gt; 、「完了」状態に既にある発電機で呼び出され、発電機は、「完了」状態のままになります。引数を指定しない場合、戻りオブジェクトは &lt;code&gt;.next()&lt;/code&gt; の場合と同じです。引数を指定すると、返されたオブジェクトの &lt;code&gt;value&lt;/code&gt; プロパティの値に設定されます。</target>
        </trans-unit>
        <trans-unit id="cc1bfe2351b82485683c733bf222344eda1527d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;separator&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, matched results are included in the array.</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt; がキャプチャ括弧 &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; を含む正規表現である場合、一致した結果が配列に含まれます。</target>
        </trans-unit>
        <trans-unit id="d1eff576ddb621e4680b204ed4d5b41859eeef85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;separator&lt;/code&gt; is a regular expression that contains capturing parentheses, then each time &lt;code&gt;separator&lt;/code&gt; is matched, the results (including any undefined results) of the capturing parentheses are spliced into the output array.</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt; がキャプチャ括弧を含む正規表現である場合、 &lt;code&gt;separator&lt;/code&gt; が一致するたびに、キャプチャ括弧の結果（未定義の結果を含む）が出力配列にスプライスされます。</target>
        </trans-unit>
        <trans-unit id="58a1c53b01b40592a9c84549b9f166da18ea38eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-str.length&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;start&lt;/code&gt; が負の数で、インデックスは、文字列の末尾からカウントを開始します。その値の上限は &lt;code&gt;-str.length&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c54578109a534f15d42b5a741a3d3d14d8a65f39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;str.length&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;start&lt;/code&gt; が正の数で、インデックスは、文字列の先頭でカウントを開始します。その値の上限は &lt;code&gt;str.length&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ca01d0a0b0471740d571f8985792b98bb6955453" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is negative, it is treated as &lt;code&gt;array.length + start&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; が負の場合、 &lt;code&gt;array.length + start&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="a731fd434daa5cb19e9e29afc38306b20ebfb1ef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is negative, it is treated as &lt;code&gt;length+start&lt;/code&gt; where &lt;code&gt;length&lt;/code&gt; is the length of the array. If &lt;code&gt;end&lt;/code&gt; is negative, it is treated as &lt;code&gt;length+end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; が負の場合、 &lt;code&gt;length+start&lt;/code&gt; として扱われます。ここで、 &lt;code&gt;length&lt;/code&gt; は配列の長さです。 &lt;code&gt;end&lt;/code&gt; が負の場合、それは &lt;code&gt;length+end&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="4de0599f1ce5809ec70b824f6abdd7e50e9e2834" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;start&lt;/code&gt; 省略され、 &lt;code&gt;copyWithin&lt;/code&gt; がインデックスからコピーされます &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ebf5416996cbb15b5dc86c882e373b81b313cbcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy from the start (defaults to 0).</source>
          <target state="translated">場合は &lt;code&gt;start&lt;/code&gt; 省略され、 &lt;code&gt;copyWithin&lt;/code&gt; がスタート（0デフォルト）からコピーされます。</target>
        </trans-unit>
        <trans-unit id="78f1054bd85abad9229ac7aa8446546688aa2e3a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;tableDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;tableDescriptor&lt;/code&gt; がオブジェクト型でない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="779eb5bbe71bf9f737544ad79ab2ebdb40b507a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;tableDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;tableDescriptor&lt;/code&gt; がオブジェクト型ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="e03af582a3944b0e649958576a4fa9f071ece201" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is at or greater than &lt;code&gt;arr.length&lt;/code&gt;, nothing will be copied. If &lt;code&gt;target&lt;/code&gt; is positioned after &lt;code&gt;start&lt;/code&gt;, the copied sequence will be trimmed to fit &lt;code&gt;arr.length&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;target&lt;/code&gt; であるか、より大きい &lt;code&gt;arr.length&lt;/code&gt; 、何もコピーされません。 &lt;code&gt;target&lt;/code&gt; が &lt;code&gt;start&lt;/code&gt; 後に配置された場合、コピーされたシーケンスは &lt;code&gt;arr.length&lt;/code&gt; に合うようにトリミングされます。</target>
        </trans-unit>
        <trans-unit id="921ceb48925cd3034432561bd64a6bf4a1ebb7c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; method must return the same value as &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; が拡張可能でない場合、 &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; メソッドは &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt; と同じ値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="6a0d8e33e57948f6db6a21fc620101b71b816549" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, &lt;code&gt;Object.getPrototypeOf(proxy)&lt;/code&gt; method must return the same value as &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; が拡張可能でない場合、 &lt;code&gt;Object.getPrototypeOf(proxy)&lt;/code&gt; メソッドは &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt; と同じ値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="d26238ec78eee84e2aeb55c52477788256e17a5e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, the &lt;code&gt;prototype&lt;/code&gt; parameter must be the same value as &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; が拡張可能でない場合、 &lt;code&gt;prototype&lt;/code&gt; パラメータは &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt; と同じ値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3518942ce67ca5092859f653ed3ba773852ba0d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;theObject&lt;/code&gt; is reclaimed, your cleanup callback may be called at some point with the &lt;em&gt;held value&lt;/em&gt; you provided for it (&lt;code&gt;&quot;some value&quot;&lt;/code&gt; in the above). The held value can be any value you like: a primitive or an object, even &lt;code&gt;undefined&lt;/code&gt;. If the held value is an object, the registry keeps a &lt;em&gt;strong&lt;/em&gt; reference to it (so it can pass it to your cleanup callback later).</source>
          <target state="translated">場合 &lt;code&gt;theObject&lt;/code&gt; が再利用され、あなたのクリーンアップコールバックを持ついくつかの時点で呼び出すことが&lt;em&gt;保持されている値&lt;/em&gt;あなたはそれのために提供（ &lt;code&gt;&quot;some value&quot;&lt;/code&gt; 以上で）。保持される値は、プリミティブまたはオブジェクト、さらには &lt;code&gt;undefined&lt;/code&gt; など、任意の値にすることができます。保持された値がオブジェクトである場合、レジストリはその値への&lt;em&gt;強力な&lt;/em&gt;参照を保持します（したがって、後でクリーンアップコールバックに渡すことができます）。</target>
        </trans-unit>
        <trans-unit id="984a9eed37b95f2c80689bed658a7a680c02c700" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;this&lt;/code&gt; is a mystery, please refer to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this document&lt;/a&gt; for more information on how &lt;code&gt;this&lt;/code&gt; works. To summarize, &lt;code&gt;this&lt;/code&gt; refers to the instance. Instances are created when the &lt;code&gt;new&lt;/code&gt; keyword is invoked. Otherwise, &lt;code&gt;this&lt;/code&gt; will default to the window &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;this&lt;/code&gt; 謎である、を参照してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;このドキュメント&lt;/a&gt;方法の詳細については、 &lt;code&gt;this&lt;/code&gt; 動作します。要約すると、 &lt;code&gt;this&lt;/code&gt; はインスタンスを指します。インスタンスは、 &lt;code&gt;new&lt;/code&gt; キーワードが呼び出されたときに作成されます。それ以外の場合、 &lt;code&gt;this&lt;/code&gt; はデフォルトでウィンドウ&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;スコープ&lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="c19cd77cae60ad00d362fc1024e84e33d0571105" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;three&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, nothing will happen, &lt;code&gt;four&lt;/code&gt; does not matter, and also the &lt;code&gt;launchRocket()&lt;/code&gt; function in the &lt;code&gt;else&lt;/code&gt; case will not be executed.</source>
          <target state="translated">場合は &lt;code&gt;three&lt;/code&gt; あり &lt;code&gt;true&lt;/code&gt; 、何も、起こりません &lt;code&gt;four&lt;/code&gt; 問題ではない、とも &lt;code&gt;launchRocket()&lt;/code&gt; 関数 &lt;code&gt;else&lt;/code&gt; 場合は実行されません。</target>
        </trans-unit>
        <trans-unit id="3eef6456246e4dbfc287e8737faddd2509501cbb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;toString()&lt;/code&gt; is given a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; less than &lt;code&gt;2&lt;/code&gt; or greater than &lt;code&gt;36&lt;/code&gt;, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; に &lt;code&gt;2&lt;/code&gt; 未満または &lt;code&gt;36&lt;/code&gt; を超える &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; が指定されている場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="6c379906b5792e3372d4efc200a114b3805195e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;toString()&lt;/code&gt; is given a radix less than 2 or greater than 36, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; に 2未満または36より大きい基数が指定されている場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="40eec480888d2c94873752b1567aea7b7efd8c4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;u&lt;/code&gt; flag is also enabled, use Unicode case folding.</source>
          <target state="translated">場合は &lt;code&gt;u&lt;/code&gt; フラグも有効になっている、Unicodeのケースの折り畳みを使用しています。</target>
        </trans-unit>
        <trans-unit id="ed0a1bf3b0563282d5e450783f1851ac37bf1a0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が数値でない場合は、最初に数値に変換され、次に32ビットの符号なし整数に変換されます。</target>
        </trans-unit>
        <trans-unit id="bac40477e650e00204753fc97988ad91cec502d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;yearValue&lt;/code&gt; is a number between 0 and 99 (inclusive), then the year for &lt;code&gt;dateObj&lt;/code&gt; is set to &lt;code&gt;1900 + yearValue&lt;/code&gt;. Otherwise, the year for &lt;code&gt;dateObj&lt;/code&gt; is set to &lt;code&gt;yearValue&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;yearValue&lt;/code&gt; は（包括的）0〜99の数である、その後のための年 &lt;code&gt;dateObj&lt;/code&gt; はに設定されている &lt;code&gt;1900 + yearValue&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;dateObj&lt;/code&gt; の年はyearValueに設定され &lt;code&gt;yearValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2747de4d9fc8c30f2b40be49e35fdbf847eb82f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;index&lt;/em&gt; is greater than or equal to &lt;a href=&quot;length&quot;&gt;&lt;code&gt;Table.prototype.length&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;em&gt;index&lt;/em&gt;が&lt;a href=&quot;length&quot;&gt; &lt;code&gt;Table.prototype.length&lt;/code&gt; &lt;/a&gt;以上の場合、&lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="3c1e63156a59a69e643e2a9b0e2e65948c77850e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;value&lt;/em&gt; is not an exported WebAssembly function or &lt;code&gt;&lt;a href=&quot;../../null&quot;&gt;null&lt;/a&gt;&lt;/code&gt;, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;がエクスポートされたWebAssembly関数または &lt;code&gt;&lt;a href=&quot;../../null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; でない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="d1f4c5491a947837a75b2577ec9165501da34cd8" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;radix&lt;/var&gt; is &lt;code&gt;undefined&lt;/code&gt; or 0 (or absent), JavaScript assumes the following:</source>
          <target state="translated">場合は &lt;var&gt;radix&lt;/var&gt; されて &lt;code&gt;undefined&lt;/code&gt; または0（または不在）、JavaScriptは次のことを前提としています。</target>
        </trans-unit>
        <trans-unit id="bed881bbe4332a3924a8e5000bd3b3ce26c729d3" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; is used a function name and the symbol has a description, the method's name is the description in square brackets.</source>
          <target state="translated">場合&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;関数名を使用していると、シンボルが記述されている、メソッドの名前は角括弧内の説明があります。</target>
        </trans-unit>
        <trans-unit id="6c5ecf5b73187ab3241c34814c90ceb806d68640" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; is specified, the value computed by parsing is &lt;em&gt;transformed&lt;/em&gt; before being returned. Specifically, the computed value and all its properties (beginning with the most nested properties and proceeding to the original value itself) are individually run through the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt;. Then it is called, with the object containing the property being processed as &lt;code&gt;this&lt;/code&gt;, and with the property name as a string, and the property value as arguments. If the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; function returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (or returns no value, for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; が指定されている場合、解析によって計算された値は、返される前に&lt;em&gt;変換&lt;/em&gt;されます。具体的には、計算された値とそのすべてのプロパティ（最もネストされたプロパティから始まり、元の値自体に進む）は、 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 介して個別に実行されます。次に、 &lt;code&gt;this&lt;/code&gt; ように処理されているプロパティを含むオブジェクト、文字列としてのプロパティ名、および引数としてのプロパティ値を使用して呼び出されます。 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 関数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; を&lt;/a&gt;返す場合（または、実行が関数の終わりから外れた場合など、値を返さない場合）、プロパティはオブジェクトから削除されます。それ以外の場合、プロパティは戻り値になるように再定義されます。</target>
        </trans-unit>
        <trans-unit id="c53eaa65f5d849d2ba7af580ec11f6071fb51361" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is passed to &lt;code&gt;findIndex()&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; inside each invocation of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">A場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメータが渡される &lt;code&gt;findIndex()&lt;/code&gt; 、それはとして使用される &lt;code&gt;this&lt;/code&gt; の各呼び出し内部 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 。提供されていない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="4b3191155df0440c882d493d118c3dac1f4c66d1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメータがに提供される &lt;code&gt;every&lt;/code&gt; 、それはコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f498864454499bf2fa726743bb2df845d90f352" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;filter&lt;/code&gt; に提供されている場合、それはコールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d22cacfb6b4ad93d1afb332b58bc2b8b9e92dbe4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;find&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; value inside each invocation of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; のパラメータをするために設けられている &lt;code&gt;find&lt;/code&gt; 、それは次のように使用される &lt;code&gt;this&lt;/code&gt; の各呼び出し内部値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 。提供されていない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="09097dc35d89b7d28dbca20d40abc8970c3cab00" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;forEach()&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76ab4918e0c8bd05f962be5b62c98b05000b19de" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;forEach()&lt;/code&gt; に提供されている場合、それはコールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; することにより、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ead08dc3ec7c47ac1db79cebb6c9921620ff42a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;forEach&lt;/code&gt; に指定されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa8f21a8595a09932fdcda7eaee1666d3af2bf6a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;map()&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;map()&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; は、に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ad3e1dc3914885dba756cd8beedafc58dbd95b7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;some()&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; パラメーターが &lt;code&gt;some()&lt;/code&gt; に提供されている場合、それはコールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2836faa89237b75d06562d178e0d8e7b62b20e4a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Promise&lt;/code&gt; is passed to an &lt;code&gt;await&lt;/code&gt; expression, it waits for the &lt;code&gt;Promise&lt;/code&gt; to be fulfilled and returns the fulfilled value.</source>
          <target state="translated">場合 &lt;code&gt;Promise&lt;/code&gt; 渡される &lt;code&gt;await&lt;/code&gt; 式、それが待つ &lt;code&gt;Promise&lt;/code&gt; 成就すると満たされた値を返します。</target>
        </trans-unit>
        <trans-unit id="2f0cd65c256b789ded1c56afc95a831c106e6d12" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;reviver&lt;/code&gt; is specified, the value computed by parsing is &lt;em&gt;transformed&lt;/em&gt; before being returned. Specifically, the computed value and all its properties (beginning with the most nested properties and proceeding to the original value itself) are individually run through the &lt;code&gt;reviver&lt;/code&gt;. Then it is called, with the object containing the property being processed as &lt;code&gt;this&lt;/code&gt;, and with the property name as a string, and the property value as arguments. If the &lt;code&gt;reviver&lt;/code&gt; function returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (or returns no value, for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value.</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt; が指定されている場合、解析によって計算された値は返される前に&lt;em&gt;変換&lt;/em&gt;されます。具体的には、計算された値とそのすべてのプロパティ（最もネストされたプロパティから始まり、元の値自体に進む）は、個別に &lt;code&gt;reviver&lt;/code&gt; を介して実行されます。次に、処理されるプロパティを含むオブジェクトが &lt;code&gt;this&lt;/code&gt; として、プロパティ名が文字列として、プロパティ値が引数として呼び出されます。 &lt;code&gt;reviver&lt;/code&gt; 関数が&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;返す場合（または、実行が関数の最後から落ちる場合など、値を返さない場合）、プロパティはオブジェクトから削除されます。それ以外の場合、プロパティは戻り値になるように再定義されます。</target>
        </trans-unit>
        <trans-unit id="f242b5dc288eac0b5d0ce91ad4f100013514504d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is passed to &lt;code&gt;findIndex&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; inside each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;findIndex&lt;/code&gt; に渡された場合、 &lt;code&gt;callback&lt;/code&gt; 各呼び出しの中で &lt;code&gt;this&lt;/code&gt; として使用されます。指定しない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="c6932692e1d4fb28b8121dffe2f3e2d0eb25fc31" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供され &lt;code&gt;every&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c67511fcd2a06b290b63f0afdae294248024ceaa" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメーターが &lt;code&gt;every&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;callback&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="03473c038dbaa94c0f2f584238f87bb0a1c995c4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供される &lt;code&gt;every&lt;/code&gt; 、それはコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e885503fc50fcf3433a76da451d3a39bdb27787" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され &lt;code&gt;filter&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74757f9a027a1bd668415335ce369872b5c572ad" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され &lt;code&gt;filter&lt;/code&gt; 、それはコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf9143a7a8700db09906f59debf6818c19eb9dde" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;find&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; のパラメータをするために提供されて &lt;code&gt;find&lt;/code&gt; 、それは次のように使用される &lt;code&gt;this&lt;/code&gt; の各呼び出しのため &lt;code&gt;callback&lt;/code&gt; 。指定しない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="eb1fb27d6a8d4daf130eff947e69b141ae7f6214" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;findIndex&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; のパラメータが提供される &lt;code&gt;findIndex&lt;/code&gt; 、それは次のように使用される &lt;code&gt;this&lt;/code&gt; の各呼び出しのための &lt;code&gt;callback&lt;/code&gt; 。指定しない場合は、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="9bf571e8c9fd950c0cba47616f69e3244e8ac908" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供され &lt;code&gt;forEach()&lt;/code&gt; 、ために渡されます &lt;code&gt;callback&lt;/code&gt; そのとして使用するために、呼び出されたときに &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dadf3c2d4b8690337dfbe93c3a13c6ba5122a763" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供され &lt;code&gt;forEach()&lt;/code&gt; 、ために渡されます &lt;code&gt;callback&lt;/code&gt; そのとして使用するために、呼び出されたときに &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff6f3b4478f7d568a6bd567df8cf574b18334edf" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;forEach()&lt;/code&gt; に提供されている場合、コールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b270f7b4f88096d2dc8decbc2a68475af4db9b54" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータがに提供されて &lt;code&gt;forEach&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2c264894e88d2165b79806c0e46c3a7c2ac7698" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータをするために提供される &lt;code&gt;map&lt;/code&gt; は、に渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="abc6187e52a5196ebde638cf0d74059344cc96a3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;map&lt;/code&gt; に提供されている場合、コールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cfcc5144fcb480f5a9615bf35d8d640124ed689e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some()&lt;/code&gt;, it will be used as callbacks' &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメータが &lt;code&gt;some()&lt;/code&gt; に提供されている場合、コールバックの &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c67518b6a0defe9f309867be0175b853cf5c13a8" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され &lt;code&gt;some&lt;/code&gt; 、ために渡される &lt;code&gt;callback&lt;/code&gt; 呼び出したときにそのとして使用するために、 &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値が &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9064bb0e6133b19da0f634085d617942132a380b" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; パラメーターが &lt;code&gt;some&lt;/code&gt; に提供されている場合、このパラメーターは、呼び出されたときに &lt;code&gt;callback&lt;/code&gt; に渡され、 &lt;code&gt;this&lt;/code&gt; 値として使用されます。それ以外の場合、 &lt;code&gt;undefined&lt;/code&gt; の値は、 &lt;code&gt;this&lt;/code&gt; 値として使用するために渡されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;callback&lt;/code&gt; に応じて決定される&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bda7ab606ed3004f2ea85c74dca1da94e54a790" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">A場合 &lt;code&gt;thisArg&lt;/code&gt; パラメータが提供され、それがコールバックのように使用されます &lt;code&gt;this&lt;/code&gt; 値。それ以外の場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;this&lt;/code&gt; 値として使用されます。 &lt;code&gt;this&lt;/code&gt; によって、最終的に観察可能な値 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; に応じて決定される&lt;a href=&quot;../../operators/this&quot;&gt;決定するための通常の規則 &lt;code&gt;this&lt;/code&gt; 機能によって見られるが&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b15cc313fa96f0002ca8177237c5a6a7eaf8200b" translate="yes" xml:space="preserve">
          <source>If a browser doesn't support the &lt;code&gt;TypedArray.prototype.toString()&lt;/code&gt; method yet, JavaScript will call the &lt;code&gt;toString&lt;/code&gt; method of &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ブラウザが &lt;code&gt;TypedArray.prototype.toString()&lt;/code&gt; メソッドをまだサポートしていない場合、JavaScriptは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;toString&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="2d6530ce720bdee0f80c81e26f6ecfbd283b444c" translate="yes" xml:space="preserve">
          <source>If a descriptor has neither of &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keys, it is treated as a data descriptor. If a descriptor has both &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; keys, an exception is thrown.</source>
          <target state="translated">記述子に &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;writable&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; キーのいずれもない場合、それはデータ記述子として扱われます。記述子に &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;writable&lt;/code&gt; と &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; キーの両方がある場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="2c34c6a69dfdce3e819260be6a04cfda0fbf1dc6" translate="yes" xml:space="preserve">
          <source>If a descriptor has neither of &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keys, it is treated as a data descriptor. If a descriptor has both [&lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt;] and [&lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;] keys, an exception is thrown.</source>
          <target state="translated">記述子に &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;writable&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; のいずれのキーもない場合、データ記述子として扱われます。記述子は[両方持っている場合は &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;writable&lt;/code&gt; ]および[ &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; ]キーを、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="8e83c8dedbe6c06d159a3f6dfaa971e14e68ad6d" translate="yes" xml:space="preserve">
          <source>If a function, this prescribes how the value originally produced by parsing is transformed, before being returned.</source>
          <target state="translated">関数の場合は、パースによって生成された値がどのように変換されてから返されるかを規定します。</target>
        </trans-unit>
        <trans-unit id="8b6c176c1bea48b791fa3c9ab49298d1b603e778" translate="yes" xml:space="preserve">
          <source>If a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. &lt;code&gt;__lookupGetter__&lt;/code&gt; can be used to obtain a reference to the getter function.</source>
          <target state="translated">オブジェクトのプロパティにゲッターが定義されている場合、そのプロパティはその関数の戻り値を参照するため、そのプロパティを介してゲッター関数を参照することはできません。 &lt;code&gt;__lookupGetter__&lt;/code&gt; を使用して、getter関数への参照を取得できます。</target>
        </trans-unit>
        <trans-unit id="391bf4a33b8c432c6b93a5a5e69abe068858d3be" translate="yes" xml:space="preserve">
          <source>If a negative number is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt;, the date will be set counting backwards from the last day of the previous month. -1 would result in the date being set to 1 day before the last day of the previous month.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; に負の数を指定すると、前月の最終日から逆算して日付が設定されます。-1の場合、日付は前月の最終日の1日前に設定されます。</target>
        </trans-unit>
        <trans-unit id="676a3f09e860cb1fdd6b7c64da13dd48930a4a79" translate="yes" xml:space="preserve">
          <source>If a new element is added to either array, the other array is not affected.</source>
          <target state="translated">どちらかの配列に新しい要素が追加されても、もう一方の配列は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="be4193e9e29d983836aef2375c967598b0df9279" translate="yes" xml:space="preserve">
          <source>If a new element is added to either typed array, the other typed array is not affected.</source>
          <target state="translated">どちらかの型付き配列に新しい要素が追加されても、もう一方の型付き配列は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="137c989c820760dd6f0e6247ad814de963ee17c5" translate="yes" xml:space="preserve">
          <source>If a non-&lt;code&gt;RegExp&lt;/code&gt; object &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(&lt;var&gt;obj&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">非 &lt;code&gt;RegExp&lt;/code&gt; オブジェクト &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt; が渡された場合、 &lt;code&gt;new RegExp(&lt;var&gt;obj&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;obj&lt;/var&gt; ）を使用して暗黙的に&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="be50878ec0b2563ddd3389f7eebc5e92b8258b9c" translate="yes" xml:space="preserve">
          <source>If a non-RegExp object &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">非RegExpオブジェクトの &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; が渡されると、 &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;regexp&lt;/var&gt; ）を使用して暗黙的に&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; に&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="281423783d855ddb3f0a19f8508114c22a018543" translate="yes" xml:space="preserve">
          <source>If a non-strict function &lt;strong&gt;&lt;strong&gt;does &lt;/strong&gt;not&lt;/strong&gt; contain rest, default, or destructured parameters, then the values in the &lt;code&gt;arguments&lt;/code&gt; object &lt;strong&gt;do&lt;/strong&gt; change in sync with the values of the argument variables. See the code below:</source>
          <target state="translated">非厳格な関数が場合&lt;strong&gt;&lt;strong&gt;ない&lt;/strong&gt;ない&lt;/strong&gt;残り、デフォルト、または破壊さパラメータが含まれ、その後の値 &lt;code&gt;arguments&lt;/code&gt; オブジェクト&lt;strong&gt;行う&lt;/strong&gt;引数の変数の値に同期して変化します。以下のコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="25fb90bb85af1ebb4d9188ee2fd33dfe9e1c2f50" translate="yes" xml:space="preserve">
          <source>If a nonempty &lt;em&gt;iterable&lt;/em&gt; is passed, and &lt;strong&gt;all&lt;/strong&gt; of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.</source>
          <target state="translated">空でない&lt;em&gt;iterable&lt;/em&gt;が渡され、&lt;strong&gt;すべて&lt;/strong&gt;のPromiseが満たされるか、Promiseでない場合、このメソッドによって返されるPromiseは非同期で実行されます。</target>
        </trans-unit>
        <trans-unit id="0966c8b1283cd19fabd190331cceb4900390d4f4" translate="yes" xml:space="preserve">
          <source>If a nonempty &lt;em&gt;iterable&lt;/em&gt; is passed, and &lt;strong&gt;any&lt;/strong&gt; of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.</source>
          <target state="translated">空でない場合は&lt;em&gt;反復可能で&lt;/em&gt;渡され、&lt;strong&gt;任意の&lt;/strong&gt;約束の履行は、または約束ではありません、このメソッドによって返された約束は非同期的に満たされています。</target>
        </trans-unit>
        <trans-unit id="d069c32d6d18bca5b8bc39c5dc8fb8c3caa232ba" translate="yes" xml:space="preserve">
          <source>If a number has more digits than requested by the &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; parameter, the number is rounded to the nearest number represented by &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toExponential()&lt;/code&gt;.</source>
          <target state="translated">数値の桁数が &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; パラメーターで要求された数より多い場合、その数値は、 &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 桁で表される最も近い数値に丸められます。説明に丸めの議論を参照&lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;/a&gt;も適用方法、 &lt;code&gt;toExponential()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ea7ce40a49626eb3ae67d76fb0cb47271742b47" translate="yes" xml:space="preserve">
          <source>If a number has more digits than requested by the &lt;code&gt;fractionDigits&lt;/code&gt; parameter, the number is rounded to the nearest number represented by &lt;code&gt;fractionDigits&lt;/code&gt; digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toExponential()&lt;/code&gt;.</source>
          <target state="translated">数値に、 &lt;code&gt;fractionDigits&lt;/code&gt; パラメーターで要求されたよりも多くの桁がある場合、その数値は、 &lt;code&gt;fractionDigits&lt;/code&gt; 桁で表される最も近い数値に丸められます。説明に丸めの議論を参照&lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;/a&gt;も適用方法、 &lt;code&gt;toExponential()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="288361a178a4532457b48ca23e1080ecff1e23e8" translate="yes" xml:space="preserve">
          <source>If a parameter is outside of the expected range, the &lt;code&gt;UTC()&lt;/code&gt; method updates the other parameters to accommodate the value. For example, if 15 is used for month, the year will be incremented by 1 &lt;code&gt;(year + 1)&lt;/code&gt; and 3 will be used for the month.</source>
          <target state="translated">パラメータが予想範囲外の場合、 &lt;code&gt;UTC()&lt;/code&gt; メソッドは他のパラメータを更新して値を調整します。たとえば、月に15が使用されている場合、年は1 &lt;code&gt;(year + 1)&lt;/code&gt; インクリメントされ、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="c725aba9dc8cfc4ecef16eaeb9213edebcbb05da" translate="yes" xml:space="preserve">
          <source>If a parameter is outside of the expected range, the &lt;code&gt;UTC()&lt;/code&gt; method updates the other parameters to accommodate the value. For example, if &lt;code&gt;15&lt;/code&gt; is used for &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt;, the year will be incremented by 1 &lt;code&gt;(&lt;var&gt;year&lt;/var&gt; + 1)&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; will be used for the month.</source>
          <target state="translated">パラメータが予想範囲外の場合、 &lt;code&gt;UTC()&lt;/code&gt; メソッドは他のパラメータを更新して値に対応します。たとえば、 &lt;code&gt;15&lt;/code&gt; が使用され &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt; 、年が1ずつインクリメントされます &lt;code&gt;(&lt;var&gt;year&lt;/var&gt; + 1)&lt;/code&gt; と &lt;code&gt;3&lt;/code&gt; が月に使用されます。</target>
        </trans-unit>
        <trans-unit id="76e695a5051810de75d193b74766ab525b424229" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setFullYear()&lt;/code&gt; はそれに応じて他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; に15を指定すると、年は1（ &lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="bc226135066c452e9f891ad0716eedfaf99c4f78" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;yearValue + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setFullYear()&lt;/code&gt; は他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を適宜更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を指定すると、年は1ずつ増分され（ &lt;code&gt;yearValue + 1&lt;/code&gt; ）、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="ccc6a64d169dbd4da5c7d23a80b1dd0d637ecc21" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="a0bae704c8f363a3c418460072e51a073a948dc4" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="23b4dd0c538d62e6f6e8b5adb2fc8de560c3e8ba" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setMinutes()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="8dd78caa2b59300ea65d3ff5bde2b0076413d09a" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setMinutes()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="18bd212d1a40736bf3e113a154e00179fdae9e3c" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setMonth()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; に15を使用すると、年は1ずつ増加し、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="0cbcdc0755030f824b7ef9e0e2ebcf2e5cbc9c6f" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setMonth()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を使用すると、年は1ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="ad6f7cf92def3c1f8a1915da21b1d6f52234d3f7" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setSeconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている分が1ずつ増加し、40が秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="e0c6676cd42b85e15c3ec0b0481c70d568ae9434" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setSeconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている分は1ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="df01689b65802985e92b006b852bab1789537c7d" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCDate()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 40 for &lt;code&gt;dayValue&lt;/code&gt;, and the month stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object is June, the day will be changed to 10 and the month will be incremented to July.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCDate()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;dayValue&lt;/code&gt; に40を使用し、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている月が6月の場合、日は10に変更され、月は7月に増分されます。</target>
        </trans-unit>
        <trans-unit id="0f6027596c322cca311a687bf3cf406e0ffc5812" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCFullYear()&lt;/code&gt; はそれに応じて他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; に15を指定すると、年は1（ &lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="52dac7927320e1182e697b79ec8295155d19dc5c" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;yearValue + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCFullYear()&lt;/code&gt; は他のパラメーターと&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を適宜更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を指定すると、年は1ずつ増分され（ &lt;code&gt;yearValue + 1&lt;/code&gt; ）、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="5a55c9e4f35d76aa47c88004d1e11b285eaed954" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="c11c6ecd9791e9b4a84c89341e5b7e2f0989ca49" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCHours()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="0be0566f667d3135990a5889ec32194ccf1a34d5" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 1100 for &lt;code&gt;&lt;var&gt;millisecondsValue&lt;/var&gt;&lt;/code&gt;, the seconds stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 100 will be used for milliseconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。あなたは1100を使用している場合たとえば、 &lt;code&gt;&lt;var&gt;millisecondsValue&lt;/var&gt;&lt;/code&gt; 、に保存されている秒&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトが1つインクリメントされ、100ミリ秒のために使用されます。</target>
        </trans-unit>
        <trans-unit id="6e0fddf94acbeb7b53ae965497ce04cbb007f210" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 1100 for &lt;code&gt;millisecondsValue&lt;/code&gt;, the seconds stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 100 will be used for milliseconds.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;millisecondsValue&lt;/code&gt; に1100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている秒数が1増加し、ミリ秒には100が使用されます。</target>
        </trans-unit>
        <trans-unit id="0844e22920653f7ff879d175734f8ca20542884e" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCMinutes()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; に100を使用すると、分は1（ &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ）ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="a4ab1e641e438a15929a07e53e62551090004df3" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCMinutes()&lt;/code&gt; は、それに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、分は1だけ増加し（ &lt;code&gt;minutesValue + 1&lt;/code&gt; ）、秒には40が使用されます。</target>
        </trans-unit>
        <trans-unit id="77a89ca3d2dd51667af8624bdb97060e7f86c012" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">指定したパラメーターが予期される範囲外の場合、 &lt;code&gt;setUTCMonth()&lt;/code&gt; は、それに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;monthValue&lt;/code&gt; に15を使用すると、年は1ずつ増分され、月には3が使用されます。</target>
        </trans-unit>
        <trans-unit id="d37c5d009a9e0ab4ebd4c03c9cbe96e7a5031ea7" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">指定したパラメーターが予想範囲外の場合、 &lt;code&gt;setUTCSeconds()&lt;/code&gt; は、それに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトの日付情報を更新しようとします。たとえば、 &lt;code&gt;secondsValue&lt;/code&gt; に100を使用すると、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに格納されている分は1ずつ増加し、40は秒に使用されます。</target>
        </trans-unit>
        <trans-unit id="587e004496e55096118f3c7229f4118638bf8fb6" translate="yes" xml:space="preserve">
          <source>If a property has a corresponding target object property then &lt;code&gt;Object.defineProperty(&lt;var&gt;target&lt;/var&gt;, &lt;var&gt;prop&lt;/var&gt;, &lt;var&gt;descriptor&lt;/var&gt;)&lt;/code&gt; will not throw an exception.</source>
          <target state="translated">プロパティに対応するターゲットオブジェクトプロパティがある場合、 &lt;code&gt;Object.defineProperty(&lt;var&gt;target&lt;/var&gt;, &lt;var&gt;prop&lt;/var&gt;, &lt;var&gt;descriptor&lt;/var&gt;)&lt;/code&gt; は例外をスローしません。</target>
        </trans-unit>
        <trans-unit id="54e5d5b9374c3920ec4b4ed3a7977f0fa06e19b2" translate="yes" xml:space="preserve">
          <source>If a property has a corresponding target object property then &lt;code&gt;Object.defineProperty(target, prop, descriptor)&lt;/code&gt; will not throw an exception.</source>
          <target state="translated">プロパティに対応するターゲットオブジェクトプロパティがある場合、 &lt;code&gt;Object.defineProperty(target, prop, descriptor)&lt;/code&gt; は例外をスローしません。</target>
        </trans-unit>
        <trans-unit id="837d8d104001710dc6b1a33f7143ccc511c3351f" translate="yes" xml:space="preserve">
          <source>If a property is modified in one iteration and then visited at a later time, its value in the loop is its value at that later time. A property that is deleted before it has been visited will not be visited later. Properties added to the object over which iteration is occurring may either be visited or omitted from iteration.</source>
          <target state="translated">あるプロパティが1回の反復で変更された後、後から訪問された場合、ループ内の値は後から訪問された時の値となります。訪問前に削除されたプロパティは、後から訪問されることはありません。反復が発生しているオブジェクトに追加されたプロパティは、訪問されるか、反復から省略されるかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="a5534a4c3390c3a7ec2f13247ce7f50b399f6066" translate="yes" xml:space="preserve">
          <source>If a property with the same name exists on the object's prototype chain, then, after deletion, the object will use the property from the prototype chain (in other words, &lt;code&gt;delete&lt;/code&gt; only has an effect on own properties).</source>
          <target state="translated">同じ名前のプロパティがオブジェクトのプロトタイプチェーンに存在する場合、削除後、オブジェクトはプロトタイプチェーンのプロパティを使用します（つまり、 &lt;code&gt;delete&lt;/code&gt; は自分のプロパティにのみ影響します）。</target>
        </trans-unit>
        <trans-unit id="e99786657c508f5fdf7a106b6e2772b4a4777958" translate="yes" xml:space="preserve">
          <source>If a setter has been defined for an object's property, it was not possible to reference the setter function through that property, because that property refers to the return value of that function. &lt;code&gt;__lookupSetter__&lt;/code&gt; can be used to obtain a reference to the setter function.</source>
          <target state="translated">オブジェクトのプロパティにセッターが定義されている場合、そのプロパティはその関数の戻り値を参照するため、そのプロパティを介してセッター関数を参照することはできませんでした。 &lt;code&gt;__lookupSetter__&lt;/code&gt; を使用して、setter関数への参照を取得できます。</target>
        </trans-unit>
        <trans-unit id="5e95bbcb4d00da3194f60f32b87c232cfe48eb8b" translate="yes" xml:space="preserve">
          <source>If a value can be converted to &lt;code&gt;true&lt;/code&gt;, the value is so-called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;. If a value can be converted to &lt;code&gt;false&lt;/code&gt;, the value is so-called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;.</source>
          <target state="translated">値を &lt;code&gt;true&lt;/code&gt; に変換できる場合、その値はいわゆる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truey&lt;/a&gt;です。値を &lt;code&gt;false&lt;/code&gt; に変換できる場合、その値はいわゆる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="8ab400bc46efabee8fe3b7f7d0f93c12a2cfeb1f" translate="yes" xml:space="preserve">
          <source>If all of the passed-in promises fulfill, or are not promises, the promise returned by &lt;code&gt;Promise.all&lt;/code&gt; is fulfilled asynchronously.</source>
          <target state="translated">渡された &lt;code&gt;Promise.all&lt;/code&gt; がすべてPromiseである場合、またはPromiseではない場合、Promise.allによって返されるPromiseは非同期で実行されます。</target>
        </trans-unit>
        <trans-unit id="27a946b1cec42590a3be910f1e249671d49ae692" translate="yes" xml:space="preserve">
          <source>If all of the passed-in promises reject, &lt;code&gt;Promise.any&lt;/code&gt; asynchronously rejects with an &lt;a href=&quot;../aggregateerror&quot;&gt;&lt;code&gt;AggregateError&lt;/code&gt;&lt;/a&gt; object, which extends &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;, and contains an &lt;code&gt;errors&lt;/code&gt; property with an array of rejection values.</source>
          <target state="translated">渡されたすべての &lt;code&gt;Promise.any&lt;/code&gt; 拒否された場合、Promise.anyは、&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;を拡張し、拒否値の配列を含む &lt;code&gt;errors&lt;/code&gt; プロパティを含む&lt;a href=&quot;../aggregateerror&quot;&gt; &lt;code&gt;AggregateError&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して非同期的に拒否します。</target>
        </trans-unit>
        <trans-unit id="bc419899ffe92367558ce569728bd6eda06f9488" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../../statements/for...of&quot;&gt;iterable object&lt;/a&gt; is passed, all of its elements will be added to the new &lt;code&gt;Set&lt;/code&gt;.</source>
          <target state="translated">場合は&lt;a href=&quot;../../statements/for...of&quot;&gt;反復可能オブジェクトが&lt;/a&gt;渡され、その要素のすべてが新に追加されます &lt;code&gt;Set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a787a0c72cff07bbfd19755db6d82f58eef48c6" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../../statements/for...of&quot;&gt;iterable object&lt;/a&gt; is passed, all of its elements will be added to the new &lt;code&gt;WeakSet&lt;/code&gt;. null is treated as undefined.</source>
          <target state="translated">場合は&lt;a href=&quot;../../statements/for...of&quot;&gt;反復可能オブジェクトが&lt;/a&gt;渡され、その要素のすべてが新に追加されます &lt;code&gt;WeakSet&lt;/code&gt; 。nullは未定義として扱われます。</target>
        </trans-unit>
        <trans-unit id="6f42c36a852e8a0e3d96038c9b48c242a9784442" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../statements/for...of&quot;&gt;iterable object &lt;/a&gt;is passed, all of its elements will be added to the new &lt;code&gt;Set&lt;/code&gt;. If you don't specify this parameter, or its value is &lt;code&gt;null&lt;/code&gt;, the new &lt;code&gt;Set&lt;/code&gt; is empty.</source>
          <target state="translated">場合は&lt;a href=&quot;../statements/for...of&quot;&gt;反復可能オブジェクトが&lt;/a&gt;渡され、その要素のすべてが新に追加されます &lt;code&gt;Set&lt;/code&gt; 。このパラメーターを指定しない場合、またはその値が &lt;code&gt;null&lt;/code&gt; の場合、新しい &lt;code&gt;Set&lt;/code&gt; は空になります。</target>
        </trans-unit>
        <trans-unit id="3d39d83ba6dd7a9c8c32bf2347faf691e07c8e4e" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../statements/for...of&quot;&gt;iterable object &lt;/a&gt;is passed, all of its elements will be added to the new &lt;code&gt;WeakSet&lt;/code&gt;. null is treated as undefined.</source>
          <target state="translated">場合は&lt;a href=&quot;../statements/for...of&quot;&gt;反復可能オブジェクトが&lt;/a&gt;渡され、その要素のすべてが新に追加されます &lt;code&gt;WeakSet&lt;/code&gt; 。nullは未定義として扱われます。</target>
        </trans-unit>
        <trans-unit id="2d3fe08780b4a61c2df0afb894ef6c7d6c984467" translate="yes" xml:space="preserve">
          <source>If an accessor property is inherited, its &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods will be called when the property is accessed and modified on descendant objects. If these methods use a variable to store the value, this value will be shared by all objects.</source>
          <target state="translated">アクセサープロパティが継承されている場合、子孫オブジェクトでプロパティにアクセスして変更すると、その &lt;code&gt;get&lt;/code&gt; メソッドと &lt;code&gt;set&lt;/code&gt; メソッドが呼び出されます。これらのメソッドが変数を使用して値を格納する場合、この値はすべてのオブジェクトで共有されます。</target>
        </trans-unit>
        <trans-unit id="0a6096c9d36c7d06be6e0a07577d30ae12433148" translate="yes" xml:space="preserve">
          <source>If an arrow function needs to access the &lt;code&gt;this&lt;/code&gt; variable, you can use the arrow function as the enclosing function:</source>
          <target state="translated">アロー関数が &lt;code&gt;this&lt;/code&gt; 変数にアクセスする必要がある場合は、アロー関数を囲み関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="7b4be48e7bf99e7bb43a149c21ac7c6e39523941" translate="yes" xml:space="preserve">
          <source>If an element is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, it is converted to the empty string.</source>
          <target state="translated">要素が &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; の場合、空の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="e363aa536e88387e5c0cbd67a99ffab5a7c14024" translate="yes" xml:space="preserve">
          <source>If an element is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or an empty array &lt;code&gt;[]&lt;/code&gt;, it is converted to an empty string.</source>
          <target state="translated">要素が &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; 、または空の配列 &lt;code&gt;[]&lt;/code&gt; の場合、空の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="082c0044fd10aae386a6cf9e4adb69b5ca782b44" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then the promise returned by this method is fulfilled synchronously. The resolved value is an empty array.</source>
          <target state="translated">空の &lt;var&gt;iterable&lt;/var&gt; が渡された場合、このメソッドによって返されるpromiseは同期的に実行されます。解決された値は空の配列です。</target>
        </trans-unit>
        <trans-unit id="e60fae81c7a7430bdf5c15d8026a70bc4af462c2" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then the promise returned by this method is rejected synchronously. The rejected reason is an &lt;code&gt;AggregateError&lt;/code&gt; object whose &lt;code&gt;errors&lt;/code&gt; property is an empty array.</source>
          <target state="translated">空の &lt;var&gt;iterable&lt;/var&gt; が渡された場合、このメソッドによって返されるpromiseは同期的に拒否されます。拒否された理由は、 &lt;code&gt;errors&lt;/code&gt; プロパティが空の配列である &lt;code&gt;AggregateError&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="54bc642374ee70081e3afb8490bd2269bdefd134" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then this method returns (synchronously) an already resolved promise.</source>
          <target state="translated">空の &lt;var&gt;iterable&lt;/var&gt; が渡された場合、このメソッドはすでに解決されたpromiseを（同期的に）返します。</target>
        </trans-unit>
        <trans-unit id="115182e50bdd6201c48fa9cf7d25930ad3769130" translate="yes" xml:space="preserve">
          <source>If an existing, yet-unvisited element of the array is changed by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, its value passed to the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;find&lt;/code&gt; visits that element's index.</source>
          <target state="translated">配列の既存のまだアクセスされていない要素が &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; によって変更された場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 渡されるその値は、 &lt;code&gt;find&lt;/code&gt; がその要素のインデックスにアクセスしたときの値になります。</target>
        </trans-unit>
        <trans-unit id="bd198759ec716bf61d3d545c999fb000e2238a04" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method does not return an iterator object, then it is a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:</source>
          <target state="translated">イテラブルの &lt;code&gt;@@iterator&lt;/code&gt; メソッドがイテレータオブジェクトを返さない場合は、整形式でないイテラブルです。このように使用すると、実行時例外またはバグのある動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d69c0eecc261f462796bd6ac56dedc90c4a7ce55" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method doesn't return an iterator object, then it's a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:</source>
          <target state="translated">イテラブルの &lt;code&gt;@@iterator&lt;/code&gt; メソッドがイテレータオブジェクトを返さない場合は、整形式でないイテラブルです。このように使用すると、実行時例外またはバグのある動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2112de509477c036e2a78f9bd9296395f6174868" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method doesn't return an iterator object, then it's considered a &lt;em&gt;non-well-formed&lt;/em&gt; iterable.</source>
          <target state="translated">&lt;code&gt;@@iterator&lt;/code&gt; の@@ iteratorメソッドがイテレータオブジェクトを返さない場合、それは&lt;em&gt;整形式で&lt;/em&gt;はないイテレータと見なさ&lt;em&gt;れ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="31b3cbae51b5fe192cd7a0df742cf2ba526bfcfb" translate="yes" xml:space="preserve">
          <source>If an object being stringified has a property named &lt;code&gt;toJSON&lt;/code&gt; whose value is a function, then the &lt;code&gt;toJSON()&lt;/code&gt; method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the &lt;code&gt;toJSON()&lt;/code&gt; method when called will be serialized. &lt;code&gt;JSON.stringify()&lt;/code&gt; calls &lt;code&gt;toJSON&lt;/code&gt; with one parameter:</source>
          <target state="translated">文字列化されるオブジェクトに &lt;code&gt;toJSON&lt;/code&gt; というプロパティがあり、その値が関数である場合、 &lt;code&gt;toJSON()&lt;/code&gt; メソッドはJSON文字列化の動作をカスタマイズします。オブジェクトがシリアル化される代わりに、 &lt;code&gt;toJSON()&lt;/code&gt; メソッドによって呼び出されたときに返される値がシリアル化されます。 &lt;code&gt;JSON.stringify()&lt;/code&gt; は、1つのパラメーターで &lt;code&gt;toJSON&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="cef8f2323faa3f13ce8f7260bf8626d3157109e1" translate="yes" xml:space="preserve">
          <source>If an object is compared with a number or string, JavaScript attempts to return the default value for the object. Operators attempt to convert the object to a primitive value, a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Number&lt;/code&gt; value, using the &lt;code&gt;valueOf&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods of the objects. If this attempt to convert the object fails, a runtime error is generated.</source>
          <target state="translated">オブジェクトが数値または文字列と比較される場合、JavaScriptはオブジェクトのデフォルト値を返そうとします。演算子は、オブジェクトの &lt;code&gt;valueOf&lt;/code&gt; メソッドと &lt;code&gt;toString&lt;/code&gt; メソッドを使用して、オブジェクトをプリミティブ値（ &lt;code&gt;String&lt;/code&gt; または &lt;code&gt;Number&lt;/code&gt; 値）に変換しようとします。このオブジェクト変換の試みが失敗すると、実行時エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="5d9c8d242f07d4b8da5fc1c766cac77ace48f8da" translate="yes" xml:space="preserve">
          <source>If an optional value is passed to the generator's &lt;code&gt;next()&lt;/code&gt; method, that value becomes the value returned by the generator's current &lt;code&gt;yield&lt;/code&gt; operation.</source>
          <target state="translated">オプションの値がジェネレーターの &lt;code&gt;next()&lt;/code&gt; メソッドに渡されると、その値はジェネレーターの現在の &lt;code&gt;yield&lt;/code&gt; 操作によって返される値になります。</target>
        </trans-unit>
        <trans-unit id="eab9a8913c422ab58b02bbfa5d83f5998bdc01c2" translate="yes" xml:space="preserve">
          <source>If any of the arguments are &lt;code&gt;NaN&lt;/code&gt; or cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数のいずれかが &lt;code&gt;NaN&lt;/code&gt; であるか、数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="14e60bca484450eba75e83eae86d457071ed10b7" translate="yes" xml:space="preserve">
          <source>If any of the passed-in promises reject, &lt;code&gt;Promise.all&lt;/code&gt; asynchronously rejects with the value of the promise that rejected, whether or not the other promises have resolved.</source>
          <target state="translated">渡された約束のいずれかが拒否された場合、 &lt;code&gt;Promise.all&lt;/code&gt; は、他の約束が解決されたかどうかに関係なく、拒否された約束の値で非同期に拒否します。</target>
        </trans-unit>
        <trans-unit id="48d47027ffc774196b349859fb3e9da455a451c9" translate="yes" xml:space="preserve">
          <source>If at least one of arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">少なくとも1つの引数を数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d5be6d3c080275816767e73cf9852e3c597d6d12" translate="yes" xml:space="preserve">
          <source>If at least one of the arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">少なくとも1つの引数を数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="09f549348155baea9ff0cca9052911fb73fa52d5" translate="yes" xml:space="preserve">
          <source>If at least two arguments are supplied, missing arguments are either set to 1 (if the day is missing) or 0 for all others.</source>
          <target state="translated">少なくとも2つの引数が与えられた場合、欠落している引数は1(その日が欠落している場合)に設定されるか、他のすべての引数は0に設定されます。</target>
        </trans-unit>
        <trans-unit id="cf691c2a790d699ec9ba78a1973cef3c5c42d3c9" translate="yes" xml:space="preserve">
          <source>If both operands are &lt;code&gt;null&lt;/code&gt; or both operands are &lt;code&gt;undefined&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">両方のオペランドが &lt;code&gt;null&lt;/code&gt; の場合、または両方のオペランドが &lt;code&gt;undefined&lt;/code&gt; 場合は、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c1c94151e65fa592234f81a33fa33dd6a609f2fd" translate="yes" xml:space="preserve">
          <source>If both operands are objects, return &lt;code&gt;true&lt;/code&gt; only if they refer to the same object.</source>
          <target state="translated">両方のオペランドがオブジェクトの場合、同じオブジェクトを参照している場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a9d7637f29541f6febab3fa6b0b1f3aef2768080" translate="yes" xml:space="preserve">
          <source>If both values are strings, they are compared as strings, based on the values of the Unicode code points they contain.</source>
          <target state="translated">両方の値が文字列の場合は、それらが含む Unicode コードポイントの値に基づいて文字列として比較されます。</target>
        </trans-unit>
        <trans-unit id="82315591edcb2db1b2e04264330ce3348f0aee52" translate="yes" xml:space="preserve">
          <source>If compilation fails, the promise rejects with a &lt;a href=&quot;compileerror&quot;&gt;&lt;code&gt;WebAssembly.CompileError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンパイルが失敗すると、Promiseは&lt;a href=&quot;compileerror&quot;&gt; &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; で&lt;/a&gt;拒否します。</target>
        </trans-unit>
        <trans-unit id="cea3dd981e7a3aff7561a6922483101c40442bb9" translate="yes" xml:space="preserve">
          <source>If default parameters are defined for one or more parameter, then a &lt;a href=&quot;https://tc39.es/ecma262/#sec-functiondeclarationinstantiation&quot;&gt;second scope&lt;/a&gt; (Environment Record) is created, specifically for the identifiers within the parameter list. This scope is a parent of the scope created for the function body.</source>
          <target state="translated">1つ以上のパラメーターに対してデフォルトのパラメーターが定義されている場合、特にパラメーター・リスト内のIDに対して、&lt;a href=&quot;https://tc39.es/ecma262/#sec-functiondeclarationinstantiation&quot;&gt;2番目のスコープ&lt;/a&gt;（環境レコード）が作成されます。このスコープは、関数本体用に作成されたスコープの親です。</target>
        </trans-unit>
        <trans-unit id="e1f0c5928a0099cfe5ce965bc4209aa587dd166e" translate="yes" xml:space="preserve">
          <source>If either of the parameters are not of the correct type or structure, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">パラメータのいずれかが正しいタイプまたは構造でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="942b12103e01cee38325fcffdc6011f2a313fd82" translate="yes" xml:space="preserve">
          <source>If either operand is &lt;code&gt;NaN&lt;/code&gt;, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">いずれかのオペランドが &lt;code&gt;NaN&lt;/code&gt; の場合、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="329fa71267e94c738bbeefa5e7aa0eabd7f7ae7a" translate="yes" xml:space="preserve">
          <source>If either or both of the arguments are negative or &lt;code&gt;NaN&lt;/code&gt;, the &lt;code&gt;substring()&lt;/code&gt; method treats them as if they were &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">引数のいずれかまたは両方が負または &lt;code&gt;NaN&lt;/code&gt; の場合、 &lt;code&gt;substring()&lt;/code&gt; メソッドはそれらを &lt;code&gt;0&lt;/code&gt; であるかのように扱います。</target>
        </trans-unit>
        <trans-unit id="8b1c72aa7914ae18205e9e718b1e5ff403ea5f72" translate="yes" xml:space="preserve">
          <source>If either value is &lt;code&gt;&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;&lt;/code&gt;, the operator returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">いずれかの値が &lt;code&gt;&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;&lt;/code&gt; の場合、演算子は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="69769f880229b3b08f71eee7e43ec58963b459f3" translate="yes" xml:space="preserve">
          <source>If greater than the length of the array, &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.</source>
          <target state="translated">配列の長さより大きい場合、 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; は配列の長さに設定されます。この場合、要素は削除されませんが、メソッドは追加関数として動作し、提供されたitem [n *]と同じ数の要素を追加します。</target>
        </trans-unit>
        <trans-unit id="cb72faf000f170f1b80581e4a48d82155c0c3894" translate="yes" xml:space="preserve">
          <source>If instead, you want to remove an array element by changing the contents of the array, use the &lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt; method. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed from the array completely using &lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">代わりに、配列の内容を変更して配列要素を削除する場合は、&lt;a href=&quot;../global_objects/array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。次の例では、&lt;a href=&quot;../global_objects/array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;trees[3]&lt;/code&gt; が配列から完全に削除されています。</target>
        </trans-unit>
        <trans-unit id="49fc2322ca24a4cc53ec295316ce4fd08b085e67" translate="yes" xml:space="preserve">
          <source>If instead, you want to remove an array element by changing the contents of the array, use the &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed from the array completely using &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">代わりに、配列の内容を変更して配列要素を削除する場合は、 &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドを使用します。次の例では、 &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;trees[3]&lt;/code&gt; 配列から完全に削除しています。</target>
        </trans-unit>
        <trans-unit id="2aa5046f9eb74295f861c69f7b20dc6058c9f652" translate="yes" xml:space="preserve">
          <source>If it is a positive number with a positive sign, &lt;code&gt;RegExp()&lt;/code&gt; will ignore the positive sign.</source>
          <target state="translated">正の符号が付いた正の数の場合、 &lt;code&gt;RegExp()&lt;/code&gt; は正の符号を無視します。</target>
        </trans-unit>
        <trans-unit id="6fe41e69103f9edde244c8197d5369fb1ea48d61" translate="yes" xml:space="preserve">
          <source>If it is resolved</source>
          <target state="translated">解決した場合</target>
        </trans-unit>
        <trans-unit id="446ee71b57c4dc727ad4482eb4cb20418b406cbe" translate="yes" xml:space="preserve">
          <source>If it rejects, it is rejected with the reason from the first promise in the iterable that was rejected.</source>
          <target state="translated">拒否された場合は、拒否されたイテラブルの最初の約束から理由をつけて拒否されます。</target>
        </trans-unit>
        <trans-unit id="e1d9729db77586d30dcb90e9b3c12a312fac9880" translate="yes" xml:space="preserve">
          <source>If it rejects, it is rejected with the reason from the first promise that was rejected.</source>
          <target state="translated">拒否する場合は、最初に拒否された約束から理由をつけて拒否します。</target>
        </trans-unit>
        <trans-unit id="cfb1cc05b2c2ef7200a99e47d5f93b8653470671" translate="yes" xml:space="preserve">
          <source>If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed or shouldn't be re-calculated.</source>
          <target state="translated">使われていれば何度かアクセスされることになるので、値が変わることはないだろうし、再計算してはいけないということはありません。</target>
        </trans-unit>
        <trans-unit id="8d09c7d906444b72f87c57393ac10ac8d90cbc87" translate="yes" xml:space="preserve">
          <source>If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed, or shouldn't be re-calculated.</source>
          <target state="translated">使われていれば何度かアクセスされることになるので、値が変わることはないだろうし、再計算する必要はないはずです。</target>
        </trans-unit>
        <trans-unit id="d31244b48c8d3b0b322ef9ce1f75a06324d0d657" translate="yes" xml:space="preserve">
          <source>If module is not a &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object instance, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">moduleが&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;オブジェクトのインスタンスでない場合、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="ed3504e341054924945fff0b8682ea59d40acaba" translate="yes" xml:space="preserve">
          <source>If more than one argument is passed to the constructor, a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; with the given elements is created.</source>
          <target state="translated">複数の引数がコンストラクターに渡されると、指定された要素を持つ新しい&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="1af819851a3c2bc5b680040e3a8ec24cc1ab5313" translate="yes" xml:space="preserve">
          <source>If more than one trailing comma is used, an elision (or hole) is produced. An array with holes is called &lt;em&gt;sparse&lt;/em&gt; (a &lt;em&gt;dense&lt;/em&gt; array has no holes). When iterating arrays for example with &lt;a href=&quot;global_objects/array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;, array holes are skipped.</source>
          <target state="translated">末尾のコンマが複数使用されている場合、エリジオン（または穴）が生成されます。穴のある配列は&lt;em&gt;スパース&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;（&lt;em&gt;密な&lt;/em&gt;配列には穴がありません）。たとえば、&lt;a href=&quot;global_objects/array/foreach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;を使用して配列を反復処理する場合、配列の穴はスキップされます。</target>
        </trans-unit>
        <trans-unit id="1159ebab54dad1aea2ed2a3c6ea83b2343288cc8" translate="yes" xml:space="preserve">
          <source>If multiple &lt;code&gt;WeakRef&lt;/code&gt;s have the same target, they're consistent with one another. The result of calling &lt;code&gt;deref&lt;/code&gt; on one of them will match the result of calling &lt;code&gt;deref&lt;/code&gt; on another of them (in the same job), you won't get the target object from one of them but &lt;code&gt;undefined&lt;/code&gt; from another.</source>
          <target state="translated">複数の &lt;code&gt;WeakRef&lt;/code&gt; が同じターゲットを持っている場合、それらは互いに一貫しています。それらの1つで &lt;code&gt;deref&lt;/code&gt; を呼び出した結果は、（同じジョブで）別のそれらで &lt;code&gt;deref&lt;/code&gt; を呼び出した結果と一致します。ターゲットオブジェクトは、それらの1つからは取得されませんが、別のオブジェクトからは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a6b8e3ea5e20c3a5881face3771f7491d5f74865" translate="yes" xml:space="preserve">
          <source>If negative, it will begin that many elements from the end of the array. (In this case, the origin &lt;code&gt;-1&lt;/code&gt;, meaning &lt;code&gt;-&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; is the index of the &lt;code&gt;&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; last element, and is therefore equivalent to the index of &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.) If &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length + &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;, it will begin from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">負の場合、配列の最後からその数の要素が始まります。（原点、この場合には &lt;code&gt;-1&lt;/code&gt; 、意味 &lt;code&gt;-&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; の指標である &lt;code&gt;&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; &lt;sup&gt;番目の&lt;/sup&gt;最後の要素、そのための指標に相当する &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; 。）場合 &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length + &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 未満である &lt;code&gt;0&lt;/code&gt; は、インデックス &lt;code&gt;0&lt;/code&gt; から始まります。</target>
        </trans-unit>
        <trans-unit id="6f05381949d7c897bb41de21ca73f9e4317dd755" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; is provided to &lt;code&gt;charAt()&lt;/code&gt;, the default is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;charAt()&lt;/code&gt; に &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; が指定されていない場合、デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f91f0e4cc5abd9a5b3dbdbb7a0297c9b1abf06c5" translate="yes" xml:space="preserve">
          <source>If no argument is provided, the &lt;code&gt;value&lt;/code&gt; property of returned object is the same as if &lt;code&gt;.next()&lt;/code&gt;. If an argument is provided, it will be set to the value of the &lt;code&gt;value&lt;/code&gt; property of the returned object.</source>
          <target state="translated">引数が指定されていない場合、返されるオブジェクトの &lt;code&gt;value&lt;/code&gt; プロパティは、 &lt;code&gt;.next()&lt;/code&gt; の場合と同じです。引数を指定すると、返されたオブジェクトの &lt;code&gt;value&lt;/code&gt; プロパティの値に設定されます。</target>
        </trans-unit>
        <trans-unit id="4e0091f074b8afb9219bdfed384f304735f7b83e" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is +0.</source>
          <target state="translated">引数が与えられていない場合、結果は+0となります。</target>
        </trans-unit>
        <trans-unit id="9990c049d2e8a0255f2ea7fdd43424a88bf9391b" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is +0. If any of the arguments is &amp;plusmn;Infinity, the result is Infinity. If any of the arguments is NaN (unless another argument is &amp;plusmn;Infinity), the result is NaN. If at least one of the arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数が指定されていない場合、結果は+0になります。引数のいずれかが&amp;plusmn;Infinityの場合、結果はInfinityになります。引数のいずれかがNaNの場合（別の引数が&amp;plusmn;Infinityでない限り）、結果はNaNになります。引数の少なくとも1つを数値に変換できない場合、結果は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cec49b483dc5f92d00626cab7c85c35367d1467e" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is -&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数を指定しない場合、結果は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d63e690a371b2f42dfb850c4bf3dbb9ed32758d6" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数を指定しない場合、結果は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1ce565041aff6de5300fa5e4efb7b43bee1e0ca9" translate="yes" xml:space="preserve">
          <source>If no arguments are provided, the constructor creates a JavaScript &lt;code&gt;Date&lt;/code&gt; object for the current date and time according to system settings for timezone offset.</source>
          <target state="translated">引数が指定されていない場合、コンストラクターは、タイムゾーンオフセットのシステム設定に従って、現在の日時のJavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="349be3fe930215fab503b160fac65a4afd9578ab" translate="yes" xml:space="preserve">
          <source>If no elements are removed, an empty array is returned.</source>
          <target state="translated">要素が削除されなかった場合は、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="f768f5cdd68c2b69894b9dde66eb214e5224574b" translate="yes" xml:space="preserve">
          <source>If no index is provided to &lt;code&gt;charAt()&lt;/code&gt;, the default is 0.</source>
          <target state="translated">&lt;code&gt;charAt()&lt;/code&gt; にインデックスが提供されていない場合、デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="df2278328be6b4739a3d8c782a34d0454e15f504" translate="yes" xml:space="preserve">
          <source>If no matching &lt;code&gt;case&lt;/code&gt; clause is found, the program looks for the optional &lt;code&gt;default&lt;/code&gt; clause, and if found, transfers control to that clause, executing the associated statements. If no &lt;code&gt;default&lt;/code&gt; clause is found, the program continues execution at the statement following the end of &lt;code&gt;switch&lt;/code&gt;. By convention, the &lt;code&gt;default&lt;/code&gt; clause is the last clause, but it does not need to be so.</source>
          <target state="translated">一致する &lt;code&gt;case&lt;/code&gt; 句が見つからない場合、プログラムはオプションの &lt;code&gt;default&lt;/code&gt; 句を検索し、見つかった場合は、その句に制御を移して、関連するステートメントを実行します。 &lt;code&gt;default&lt;/code&gt; 句が見つからない場合、プログラムは &lt;code&gt;switch&lt;/code&gt; の終わりの次のステートメントで実行を継続します。慣例により、 &lt;code&gt;default&lt;/code&gt; 句は最後の句ですが、そうである必要はありません。</target>
        </trans-unit>
        <trans-unit id="f9c179b8d44481d64d61150bf0f2642fed87585c" translate="yes" xml:space="preserve">
          <source>If no string is explicitly provided, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;&lt;var&gt;searchValue&lt;/var&gt; will be coerced to &quot;&lt;code&gt;undefined&lt;/code&gt;&quot;&lt;/a&gt;, and this value will be searched for in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">文字列が明示的に指定されていない場合、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt; &lt;var&gt;searchValue&lt;/var&gt; は &quot; &lt;code&gt;undefined&lt;/code&gt; &quot;に強制変換され&lt;/a&gt;、この値は &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; で検索されます。</target>
        </trans-unit>
        <trans-unit id="03d6fe27bce7cb59badbbf88b73e5ae858f2f1f6" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;NaN&lt;/code&gt;, the return value will be the integer that is the first argument taken as a number in the specified &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt;. (For example, a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; of &lt;code&gt;10&lt;/code&gt; converts from a decimal number, &lt;code&gt;8&lt;/code&gt; converts from octal, &lt;code&gt;16&lt;/code&gt; from hexadecimal, and so on.)</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; でない場合、戻り値は、指定された &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 数値として取得される最初の引数である整数になります。 （たとえば、 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; &lt;code&gt;10&lt;/code&gt; は10進数から変換され、 &lt;code&gt;8&lt;/code&gt; は8進数から変換され、 &lt;code&gt;16&lt;/code&gt; は16進数から変換されます。）</target>
        </trans-unit>
        <trans-unit id="62b6da4ddc0e467fae3e22e79269a0cd81d2e64c" translate="yes" xml:space="preserve">
          <source>If one of the operands is &lt;code&gt;Boolean&lt;/code&gt;, convert the Boolean operand to 1 if it is &lt;code&gt;true&lt;/code&gt; and +0 if it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オペランドの1つが &lt;code&gt;Boolean&lt;/code&gt; 場合、ブール値のオペランドを &lt;code&gt;true&lt;/code&gt; の場合は1に変換し、 &lt;code&gt;false&lt;/code&gt; の場合は+0に変換します。</target>
        </trans-unit>
        <trans-unit id="157db00b7126c89fc2532f635dc2767990139ad4" translate="yes" xml:space="preserve">
          <source>If one of the operands is &lt;code&gt;Boolean&lt;/code&gt;, the Boolean operand is converted to 1 if it is &lt;code&gt;true&lt;/code&gt; and +0 if it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オペランドの1つが &lt;code&gt;Boolean&lt;/code&gt; 場合、ブール値のオペランドは、 &lt;code&gt;true&lt;/code&gt; 場合は1に、 &lt;code&gt;false&lt;/code&gt; 場合は+0に変換されます。</target>
        </trans-unit>
        <trans-unit id="0799160a055aadf04357a628011b51ab4b1c6f7e" translate="yes" xml:space="preserve">
          <source>If one of the operands is an object and the other is a number or a string, try to convert the object to a primitive using the object's &lt;code&gt;valueOf()&lt;/code&gt; and &lt;code&gt;toString()&lt;/code&gt; methods.</source>
          <target state="translated">オペランドの1つがオブジェクトで、もう1つが数値または文字列の場合は、オブジェクトの &lt;code&gt;valueOf()&lt;/code&gt; &lt;code&gt;toString()&lt;/code&gt; メソッドとtoString（）メソッドを使用して、オブジェクトをプリミティブに変換してみてください。</target>
        </trans-unit>
        <trans-unit id="820dfebc6e6888d4bc662c589d18f5d1c4b96705" translate="yes" xml:space="preserve">
          <source>If one operand is &lt;code&gt;null&lt;/code&gt; and the other is &lt;code&gt;undefined&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">一方のオペランドが &lt;code&gt;null&lt;/code&gt; で、もう一方が &lt;code&gt;undefined&lt;/code&gt; 場合は、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5aa8b2baae192e612c1543533ffaebb114c4ec0f" translate="yes" xml:space="preserve">
          <source>If one or both arguments are omitted or are provided non-functions, then &lt;code&gt;then&lt;/code&gt; will be missing the handler(s), but will not generate any errors. If the &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;then&lt;/code&gt; is called on adopts a state (&lt;code&gt;fulfillment&lt;/code&gt; or &lt;code&gt;rejection&lt;/code&gt;) for which &lt;code&gt;then&lt;/code&gt; has no handler, a new &lt;code&gt;Promise&lt;/code&gt; is created with no additional handlers, simply adopting the final state of the original &lt;code&gt;Promise&lt;/code&gt; on which &lt;code&gt;then&lt;/code&gt; was called.</source>
          <target state="translated">一方または両方の引数が省略されているか、非機能を提供している場合は、 &lt;code&gt;then&lt;/code&gt; （S）ハンドラを失われますが、すべてのエラーを生成しません。場合 &lt;code&gt;Promise&lt;/code&gt; &lt;code&gt;then&lt;/code&gt; に呼び出された状態（採用 &lt;code&gt;fulfillment&lt;/code&gt; または &lt;code&gt;rejection&lt;/code&gt; ）そのため &lt;code&gt;then&lt;/code&gt; 何のハンドラを持っていない、新しい &lt;code&gt;Promise&lt;/code&gt; 単に元の最終状態を採用、追加のハンドラを使用して作成された &lt;code&gt;Promise&lt;/code&gt; その上で &lt;code&gt;then&lt;/code&gt; と呼ばれていましたが。</target>
        </trans-unit>
        <trans-unit id="3b2d6b28b997335014500b08d8f04f7c3691b2c8" translate="yes" xml:space="preserve">
          <source>If one or both arguments are omitted or are provided non-functions, then &lt;code&gt;then&lt;/code&gt; will be missing the handler(s), but will not generate any errors. If the &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;then&lt;/code&gt; is called on adopts a state (&lt;code&gt;fulfillment&lt;/code&gt; or &lt;code&gt;rejection&lt;/code&gt;) for which &lt;code&gt;then&lt;/code&gt; has no handler, the returned promise simply adopts the final state of the original &lt;code&gt;Promise&lt;/code&gt; on which &lt;code&gt;then&lt;/code&gt; was called.</source>
          <target state="translated">一方または両方の引数が省略されているか、非機能を提供している場合は、 &lt;code&gt;then&lt;/code&gt; （S）ハンドラを失われますが、すべてのエラーを生成しません。場合 &lt;code&gt;Promise&lt;/code&gt; &lt;code&gt;then&lt;/code&gt; に呼び出された状態（採用 &lt;code&gt;fulfillment&lt;/code&gt; または &lt;code&gt;rejection&lt;/code&gt; ）そのため &lt;code&gt;then&lt;/code&gt; 何のハンドラを持っていない、返された約束は、単に元の最終的な状態を採用 &lt;code&gt;Promise&lt;/code&gt; どの &lt;code&gt;then&lt;/code&gt; 呼ばれました。</target>
        </trans-unit>
        <trans-unit id="457b342baa5fd75eb025ca9f5b99efd20082c5f4" translate="yes" xml:space="preserve">
          <source>If one wishes to follow the more recent &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt; for URLs, which makes square brackets reserved (for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IPv6&quot;&gt;IPv6&lt;/a&gt;) and thus not encoded when forming something which could be part of a URL (such as a host), the following code snippet may help:</source>
          <target state="translated">URLの最新の&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt;に従いたい場合は、角かっこを予約し（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IPv6&quot;&gt;IPv6の場合&lt;/a&gt;）、URLの一部となる可能性のあるもの（ホストなど）を形成するときにエンコードされないようにします。</target>
        </trans-unit>
        <trans-unit id="e1c69555d0da6cfd17e4847850dca3e2008fe6a4" translate="yes" xml:space="preserve">
          <source>If only one element is removed, an array of one element is returned.</source>
          <target state="translated">1つの要素だけが削除された場合は、1つの要素の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="89d18e2f04f7d7d60c84e76982daf3b58967d734" translate="yes" xml:space="preserve">
          <source>If passing the function argument using an &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow function expression&lt;/a&gt; the &lt;code&gt;thisArg&lt;/code&gt; parameter can be omitted as arrow functions lexically bind the &lt;a href=&quot;../../operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">&lt;a href=&quot;../../functions/arrow_functions&quot;&gt;矢印関数式&lt;/a&gt;を使用して関数の引数を渡す場合、矢印関数が&lt;a href=&quot;../../operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;/a&gt;値を字句的にバインドするため、 &lt;code&gt;thisArg&lt;/code&gt; パラメータを省略できます。</target>
        </trans-unit>
        <trans-unit id="6b009fba48b5763df48e0358044ceb1e1dc86d5e" translate="yes" xml:space="preserve">
          <source>If pattern argument is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object, &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; doesn't call this method, nor creates a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">pattern引数がある場合&lt;strong&gt;ではない&lt;/strong&gt;&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; は、&lt;/a&gt;このメソッドを呼び出して、また作成していない&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="6c9e2fc126b23061bb02204abf1952156dba945b" translate="yes" xml:space="preserve">
          <source>If provided, it is used as the length of &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;. Defaults to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">提供されている場合は、 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; の長さとして使用されます。デフォルトは &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="afe3f0eab5663e5d1ba57f7d29abefac6af921f5" translate="yes" xml:space="preserve">
          <source>If specified and not &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, an object whose enumerable own properties (that is, those properties defined upon itself and &lt;em&gt;not&lt;/em&gt; enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of &lt;a href=&quot;defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定され、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;でない場合、列挙可能な独自のプロパティ（つまり、それ自体で定義され、プロトタイプチェーンに沿った列挙可能なプロパティで&lt;em&gt;はない&lt;/em&gt;プロパティ）を持つオブジェクトは、対応するプロパティ名とともに、新しく作成されたオブジェクトに追加されるプロパティ記述子を指定します。これらのプロパティは、&lt;a href=&quot;defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties()&lt;/code&gt; の&lt;/a&gt;2番目の引数に対応します。</target>
        </trans-unit>
        <trans-unit id="13baf25040218d0501b94ae7baee74ac3f797eac" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; is a string that contains the flags to add.</source>
          <target state="translated">指定した場合、 &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; は追加するフラグを含む文字列です。</target>
        </trans-unit>
        <trans-unit id="2ffe4874009bf36af9606205e966fc91f48654a0" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;flags&lt;/code&gt; indicates the flags to add, or if an object is supplied for the pattern, the &lt;code&gt;flags&lt;/code&gt; value will replace any of that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; will be reset to 0) (as of ES2015). If &lt;code&gt;flags&lt;/code&gt; is not specified and a regular expressions object is supplied, that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; value) will be copied over. The value is a string containing any combination of the following values:</source>
          <target state="translated">指定した場合、 &lt;code&gt;flags&lt;/code&gt; は追加するフラグを示します。または、パターンにオブジェクトが指定されている場合、 &lt;code&gt;flags&lt;/code&gt; 値はそのオブジェクトのフラグを置き換えます（および &lt;code&gt;lastIndex&lt;/code&gt; は0にリセットされます）（ES2015以降）。場合は &lt;code&gt;flags&lt;/code&gt; 指定されておらず、正規表現オブジェクトが供給され、そのオブジェクトの旗（および &lt;code&gt;lastIndex&lt;/code&gt; のの値）がコピーされます。値は、次の値の任意の組み合わせを含む文字列です。</target>
        </trans-unit>
        <trans-unit id="0f278705572fe4cf68405aa4e5bdb3c3070a0a9a" translate="yes" xml:space="preserve">
          <source>If specified, flags can have any combination of the following values:</source>
          <target state="translated">指定された場合、フラグは以下の値の任意の組み合わせを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d41c0656b3d2ecfbd3b7ffcf0502574cc52a75c7" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;[@@search]()&lt;/code&gt; returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1.</source>
          <target state="translated">成功した場合、 &lt;code&gt;[@@search]()&lt;/code&gt; は、ストリング内の正規表現の最初の一致のインデックスを返します。それ以外の場合は、-1を返します。</target>
        </trans-unit>
        <trans-unit id="ee11a9ac2ddedc856e6b1b7ccdce4f9c79a7d963" translate="yes" xml:space="preserve">
          <source>If such an element is found, &lt;code&gt;findIndex()&lt;/code&gt; immediately returns the element's index. If &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; never returns a truthy value (or the array's &lt;code&gt;length&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;), &lt;code&gt;findIndex()&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">そのような要素が見つかった場合、 &lt;code&gt;findIndex()&lt;/code&gt; はすぐに要素のインデックスを返します。 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; が真の値を返さない場合（または配列の &lt;code&gt;length&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合）、 &lt;code&gt;findIndex()&lt;/code&gt; は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9c16da19397f9747a7c13f6fa34a9db0332a7be3" translate="yes" xml:space="preserve">
          <source>If such an element is found, &lt;code&gt;findIndex&lt;/code&gt; immediately returns that found element's index. If the callback never returns a truthy value or the array's &lt;code&gt;length&lt;/code&gt; is 0, &lt;code&gt;findIndex&lt;/code&gt; returns -1. Unlike some other array methods such as &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.some&lt;/code&gt;&lt;/a&gt;, in sparse arrays the &lt;code&gt;callback&lt;/code&gt;&lt;strong&gt;is called&lt;/strong&gt; even for indexes of entries not present in the array.</source>
          <target state="translated">そのような要素が見つかると、 &lt;code&gt;findIndex&lt;/code&gt; はすぐにその見つかった要素のインデックスを返します。コールバックが真の値を返さないか、配列の &lt;code&gt;length&lt;/code&gt; が0の場合、 &lt;code&gt;findIndex&lt;/code&gt; は-1を返します。&lt;a href=&quot;some&quot;&gt; &lt;code&gt;Array.some&lt;/code&gt; &lt;/a&gt;などの他のいくつかの配列メソッドとは異なり、スパース配列では、配列に存在しないエントリのインデックスに対しても &lt;code&gt;callback&lt;/code&gt; &lt;strong&gt;が呼び出さ&lt;/strong&gt;れます。</target>
        </trans-unit>
        <trans-unit id="748d54b21db1a50dc3ebf29e5799dd004bbc2b0c" translate="yes" xml:space="preserve">
          <source>If the &quot;lyrics&quot; element is empty, set the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;innerHTML&lt;/a&gt;&lt;/code&gt; to a default value:</source>
          <target state="translated">「lyrics」要素が空の場合は、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;innerHTML&lt;/a&gt;&lt;/code&gt; をデフォルト値に設定します。</target>
        </trans-unit>
        <trans-unit id="aa1e6e164506acad60b43c996244e0ccc14c8ac0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; is outside of the range of date values for the month, &lt;code&gt;setDate()&lt;/code&gt; will update the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; がその月の日付値の範囲外にある場合、setDate &lt;code&gt;setDate()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを更新します。</target>
        </trans-unit>
        <trans-unit id="50246270bc94fbe34619b2358197206035242ab3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 引数を省略した場合、小数点以下の桁数は、デフォルトで値を一意に表すために必要な桁数になります。</target>
        </trans-unit>
        <trans-unit id="a8a042a031513c64b3651a694e6ea1a7b0776593" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is &lt;code&gt;2&lt;/code&gt;; the string returned is the positive binary representation of the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; が負で、符号が保持されます。これは、基数が &lt;code&gt;2&lt;/code&gt; の場合でも当てはまります。返される文字列は、正のバイナリ表現である &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; がが先行 &lt;code&gt;-&lt;/code&gt; 記号、&lt;strong&gt;ない&lt;/strong&gt;の2の補数 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d7a7c24bdbbc78170e073659c5f668b16269b25" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is not a whole number, the 'dot' sign is used to separate the decimal places.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; が整数でない場合は、「ドット」記号を使用して小数点以下の桁数を区切ります。</target>
        </trans-unit>
        <trans-unit id="b245f6f7566843542a7c173cff50732fbfd3bacf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is not specified, the preferred radix is assumed to be &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; が指定されていない場合、優先される基数は &lt;code&gt;10&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="54ad481de4c33588fdb0802190cf8b149d7966ee" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is smaller than &lt;code&gt;2&lt;/code&gt; or bigger than &lt;code&gt;36&lt;/code&gt;, and the first non-whitespace character cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; より小さくなる &lt;code&gt;2&lt;/code&gt; またはそれより大きく &lt;code&gt;36&lt;/code&gt; 、および最初の非空白文字が数値に変換することができない、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; が&lt;/a&gt;返されます。</target>
        </trans-unit>
        <trans-unit id="2a67a27ec1cbf334f567215905a7753278f9f6b8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; only transforms some values and not others, be certain to return all untransformed values as-is, otherwise, they will be deleted from the resulting object.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 一部のみの値ではなく、他の変形として、すべての形質転換されていない値を返す特定すること、そうでなければ、それらは結果のオブジェクトから削除されます。</target>
        </trans-unit>
        <trans-unit id="3f05af6384b04457cbb7e13272e0dc49a80bd675" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; このメソッドの引数は、オブジェクト（プリミティブ）ではない、それが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初のオブジェクトに強制変換されます。</target>
        </trans-unit>
        <trans-unit id="4b9f99648bb256a49a00568bf5dfb30e3033d62e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; このメソッドの引数は、オブジェクト（プリミティブ）ではない、それが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初にオブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="7dcf4e160575e283d63147e2cc65d135d2974ea8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, a non-object &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; will be coerced to an object.</source>
          <target state="translated">場合は &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; このメソッドの引数は、オブジェクト（プリミティブ）ではない、それが原因となります&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;、非対象 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; オブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="ed3ac025020aed5a0890e8afac6c32f2c8ae815b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; value passed to &lt;code&gt;TypedArray.from()&lt;/code&gt; is not a constructor, &lt;code&gt;TypedArray.from()&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.from()&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; の値が渡さ &lt;code&gt;TypedArray.from()&lt;/code&gt; コンストラクタではない &lt;code&gt;TypedArray.from()&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array.from()&lt;/code&gt; 新しい作成にデフォルト値を&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e38a2717bbd5bd5ac9ed570a97494bee3fa7ab86" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Promise&lt;/code&gt; is rejected, the &lt;code&gt;await&lt;/code&gt; expression throws the rejected value.</source>
          <target state="translated">場合 &lt;code&gt;Promise&lt;/code&gt; 拒否された、 &lt;code&gt;await&lt;/code&gt; 式は拒否された値をスローします。</target>
        </trans-unit>
        <trans-unit id="35e4d659d7d35a3c85c18d904b4849b0e0e985e0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Promise&lt;/code&gt; is rejected, the rejected value is thrown.</source>
          <target state="translated">場合 &lt;code&gt;Promise&lt;/code&gt; 拒否され、拒否された値がスローされます。</target>
        </trans-unit>
        <trans-unit id="99d06a119e5b144d9d835a4bbbcbc47ccdafda9b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;bigIntObj&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the &lt;code&gt;bigIntObj&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;bigIntObj&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;bigIntObj&lt;/code&gt; が負で、符号が保持されます。これは、基数が2の場合でも当てはまります。返される文字列は、正のバイナリ表現である &lt;code&gt;bigIntObj&lt;/code&gt; がが先行 &lt;code&gt;-&lt;/code&gt; 記号、&lt;strong&gt;ない&lt;/strong&gt;の2の補数 &lt;code&gt;bigIntObj&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be3b876046ad63614f4af66a1f82f87240d95fa8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;configurable&lt;/code&gt; attribute of &lt;code&gt;o.a&lt;/code&gt; had been &lt;code&gt;true&lt;/code&gt;, none of the errors would be thrown and the property would be deleted at the end.</source>
          <target state="translated">&lt;code&gt;o.a&lt;/code&gt; の &lt;code&gt;configurable&lt;/code&gt; 属性が &lt;code&gt;true&lt;/code&gt; の場合、エラーはスローされず、プロパティは最後に削除されます。</target>
        </trans-unit>
        <trans-unit id="ac47f72ce3f75c7a5073bd32d1f6a7c725984cd3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dayValue&lt;/code&gt; is outside of the range of date values for the month, &lt;code&gt;setDate()&lt;/code&gt; will update the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if 0 is provided for &lt;code&gt;dayValue&lt;/code&gt;, the date will be set to the last day of the previous month.</source>
          <target state="translated">&lt;code&gt;dayValue&lt;/code&gt; がその月の日付値の範囲外の場合、setDate &lt;code&gt;setDate()&lt;/code&gt; はそれに応じて&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを更新します。たとえば、 &lt;code&gt;dayValue&lt;/code&gt; に 0が指定されている場合、日付は前月の最終日に設定されます。</target>
        </trans-unit>
        <trans-unit id="8c831ca3402dbcf2a32deaa1dbe0ffc5d3e40992" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;finally&lt;/code&gt; block returns a value, this value becomes the return value of the entire &lt;code&gt;try-catch-finally&lt;/code&gt; production, regardless of any &lt;code&gt;return&lt;/code&gt; statements in the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks. This includes exceptions thrown inside of the catch block:</source>
          <target state="translated">場合は &lt;code&gt;finally&lt;/code&gt; ブロックが値を返す、この値は、全体の戻り値になると &lt;code&gt;try-catch-finally&lt;/code&gt; かかわらずの、生産 &lt;code&gt;return&lt;/code&gt; で文 &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; ブロック。これには、catchブロック内でスローされた例外が含まれます。</target>
        </trans-unit>
        <trans-unit id="6bd8c3283258f28a255b8f9242378a0b430c842d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;finally&lt;/code&gt;-block returns a value, this value becomes the return value of the entire &lt;code&gt;try-catch-finally&lt;/code&gt; statement, regardless of any &lt;code&gt;return&lt;/code&gt; statements in the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;-blocks. This includes exceptions thrown inside of the &lt;code&gt;catch&lt;/code&gt;-block:</source>
          <target state="translated">場合は &lt;code&gt;finally&lt;/code&gt; -block戻り値は、この値は、全体の戻り値になると &lt;code&gt;try-catch-finally&lt;/code&gt; かかわらずの、文の &lt;code&gt;return&lt;/code&gt; で文 &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; -blocks。これには、 &lt;code&gt;catch&lt;/code&gt; - block内でスローされる例外が含まれます。</target>
        </trans-unit>
        <trans-unit id="887007377f2e5472d0d2ce3630b6c75058342d26" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fractionDigits&lt;/code&gt; argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.</source>
          <target state="translated">&lt;code&gt;fractionDigits&lt;/code&gt; 引数を省略した場合、小数点以下の桁数は、デフォルトで値を一意に表すために必要な桁数になります。</target>
        </trans-unit>
        <trans-unit id="3945a3dae8e73ba351db0fe2aed7b731eb381952" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;g&lt;/code&gt; flag is used, all results matching the complete regular expression will be returned, but capturing groups will not.</source>
          <target state="translated">場合 &lt;code&gt;g&lt;/code&gt; フラグが使用され、完全な正規表現に一致するすべての結果が返されますが、キャプチャグループはしません。</target>
        </trans-unit>
        <trans-unit id="ef660d2f00a701c21aacee179340977e0be81003" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;grow()&lt;/code&gt; operation fails for whatever reason, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">場合 &lt;code&gt;grow()&lt;/code&gt; 操作が何らかの理由で失敗し、&lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="62ed07c8a605b46ecbd26f7316bd0d1b6317b32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;numObj&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the &lt;code&gt;numObj&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;numObj&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;numObj&lt;/code&gt; が負で、符号が保持されます。これは、基数が2の場合でも同じです。返される文字列は、正のバイナリ表現である &lt;code&gt;numObj&lt;/code&gt; がが先行 &lt;code&gt;-&lt;/code&gt; 記号、&lt;strong&gt;ない&lt;/strong&gt;の2の補数 &lt;code&gt;numObj&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="964309f504b1e8dbcd7544bd0f936b81ccb62f80" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;numObj&lt;/code&gt; is not a whole number, the 'dot' sign is used to separate the decimal places.</source>
          <target state="translated">&lt;code&gt;numObj&lt;/code&gt; が整数でない場合、小数点を区切るために「ドット」記号が使用されます。</target>
        </trans-unit>
        <trans-unit id="a28f6f94f14d2f4d2bb91f60f2a5ef633b20a00e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;precision&lt;/code&gt; argument is omitted, behaves as &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;precision&lt;/code&gt; argument is a non-integer value, it is rounded to the nearest integer.</source>
          <target state="translated">場合 &lt;code&gt;precision&lt;/code&gt; 引数が省略されている、として動作&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt;。場合 &lt;code&gt;precision&lt;/code&gt; 引数が非整数値であり、それは最も近い整数に丸められます。</target>
        </trans-unit>
        <trans-unit id="6a944bff6bb8c754d1d8d302d8f5101d5f14b110" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;radix&lt;/code&gt; is not specified, the preferred radix is assumed to be 10.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; が指定されていない場合、優先される基数は10と見なされます。</target>
        </trans-unit>
        <trans-unit id="d18fb91572aa023d50209da5a43a714383069e99" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;reviver&lt;/code&gt; only transforms some values and not others, be certain to return all untransformed values as-is, otherwise they will be deleted from the resulting object.</source>
          <target state="translated">場合 &lt;code&gt;reviver&lt;/code&gt; 唯一のいくつかの値ではなく他人を変換し、そのままですべての形質転換されていない値を返すことが確実である、そうでなければ、結果のオブジェクトから削除されます。</target>
        </trans-unit>
        <trans-unit id="a158dec28bab58d57879567bd00f0791b3830d8a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;revoke()&lt;/code&gt; function gets called, the proxy becomes unusable: Any trap to a handler will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. Once a proxy is revoked, it will remain revoked and can be garbage collected. Calling &lt;code&gt;revoke()&lt;/code&gt; again has no effect.</source>
          <target state="translated">場合 &lt;code&gt;revoke()&lt;/code&gt; 関数が呼び出される、プロキシが使用できなくなる：ハンドラに任意のトラップがスローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。プロキシが取り消されると、取り消されたままになり、ガベージコレクションの対象になります。 &lt;code&gt;revoke()&lt;/code&gt; を再度呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="e826b19fe49a495620cb6d66d9279f62014050dc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;set()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, and the assignment happened in strict-mode code, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">場合 &lt;code&gt;set()&lt;/code&gt; メソッドが返し &lt;code&gt;false&lt;/code&gt; 、及び割り当てが厳密モードコードで起こっ、&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外が&lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="fb5c716988ff9e8f76361370d17e445497a6277b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;str&lt;/code&gt; argument is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object, &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; doesn't call this method, nor create a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">場合 &lt;code&gt;str&lt;/code&gt; の引数が&lt;strong&gt;ない&lt;/strong&gt;&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; は、&lt;/a&gt;このメソッドを呼び出して、また作成しない&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="cf613b15f554627e183a5a0f855d2a4c7a2d77bb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;'currency'&lt;/code&gt;, a &lt;code&gt;currency&lt;/code&gt; property must be provided. Optionally, &lt;code&gt;currencyDisplay&lt;/code&gt; and &lt;code&gt;currencySign&lt;/code&gt; control the unit formatting.</source>
          <target state="translated">場合 &lt;code&gt;style&lt;/code&gt; ある &lt;code&gt;'currency'&lt;/code&gt; 、 &lt;code&gt;currency&lt;/code&gt; プロパティが提供されなければなりません。オプションで、 &lt;code&gt;currencyDisplay&lt;/code&gt; と &lt;code&gt;currencySign&lt;/code&gt; は単位のフォーマットを制御します。</target>
        </trans-unit>
        <trans-unit id="5951f79c7aa318ae67f76dd9d9501b02e6390889" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;'unit'&lt;/code&gt;, a &lt;code&gt;unit&lt;/code&gt; property must be provided. Optionally, &lt;code&gt;unitDisplay&lt;/code&gt; controls the unit formatting.</source>
          <target state="translated">場合 &lt;code&gt;style&lt;/code&gt; ある &lt;code&gt;'unit'&lt;/code&gt; 、 &lt;code&gt;unit&lt;/code&gt; プロパティが提供されなければなりません。オプションで、 &lt;code&gt;unitDisplay&lt;/code&gt; は単位のフォーマットを制御します。</target>
        </trans-unit>
        <trans-unit id="8eb4dd6a3439d48edde8782414da2fc33e520fe8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;this&lt;/code&gt; value passed to &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.of&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;this&lt;/code&gt; に渡された値 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; コンストラクタではありません、 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array.of&lt;/code&gt; の新しい作成にデフォルト値を&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="723c644a1915a6d351777f6cab8660518aaa2659" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;this&lt;/code&gt; value passed to &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.of&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;this&lt;/code&gt; に渡された値 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; コンストラクタではありません、 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Array.of&lt;/code&gt; の新しい作成にデフォルト値を&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09c65f33aa598404d3369137e257e8e881b958f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;toString()&lt;/code&gt; method is called on a function created by the &lt;code&gt;Function&lt;/code&gt; constructor, &lt;code&gt;toString()&lt;/code&gt; returns the source code of a synthesized function declaration named &quot;anonymous&quot; using the provided parameters and function body.</source>
          <target state="translated">場合 &lt;code&gt;toString()&lt;/code&gt; メソッドは、によって作成された関数で呼び出される &lt;code&gt;Function&lt;/code&gt; コンストラクタ、 &lt;code&gt;toString()&lt;/code&gt; 提供されたパラメータと機能本体を使用して「匿名」という名前の合成関数宣言のソースコードを返します。</target>
        </trans-unit>
        <trans-unit id="d2d395675e98f1c324b31de3e7f800ca7f0ca1d0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;toString()&lt;/code&gt; method is called on built-in function objects or a function created by &lt;code&gt;Function.prototype.bind&lt;/code&gt;, &lt;code&gt;toString()&lt;/code&gt; returns a &lt;em&gt;native function string&lt;/em&gt; which looks like</source>
          <target state="translated">場合 &lt;code&gt;toString()&lt;/code&gt; メソッドは、組み込み関数オブジェクトまたはによって作成された関数で呼び出され &lt;code&gt;Function.prototype.bind&lt;/code&gt; 、 &lt;code&gt;toString()&lt;/code&gt; を返す&lt;em&gt;ネイティブ関数文字列&lt;/em&gt;のように見えます</target>
        </trans-unit>
        <trans-unit id="97c0dc3a0c924bef934b157bfd71aa0df99712cd" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;year&lt;/code&gt; option is not set in the bag (to any value), the result will include only the &lt;code&gt;relatedYear&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; オプションがバッグに（任意の値に）設定されていない場合、結果には &lt;code&gt;relatedYear&lt;/code&gt; のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="4e56640ad0ffad1ff5993fcb62e39036efe032f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;|this|&lt;/code&gt; value passed to &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.from&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">もし &lt;code&gt;|this|&lt;/code&gt; 渡された値 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; コンストラクタではありません、 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; スローされます&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;、どこ &lt;code&gt;Array.from&lt;/code&gt; が新しい作成デフォルト&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77fff64ff9eae8df8bbff897e13e7521a4049f5a" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;iterable&lt;/var&gt; contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):</source>
          <target state="translated">&lt;var&gt;iterable&lt;/var&gt; に非Promise値が含まれている場合、それらは無視されますが、返されたPromise配列値で引き続きカウントされます（Promiseが満たされている場合）。</target>
        </trans-unit>
        <trans-unit id="4d5a749e884b72ff7fdb5c875dfb8ade05e78e57" translate="yes" xml:space="preserve">
          <source>If the JavaScript interpreter cannot guarantee that all the provided arguments are numbers at the point that the call is made, it needs to either insert checks for all the arguments before the inlined code, or it cannot inline the function. Now in this particular case a smart interpreter should be able to rearrange the checks to be more optimal and not check any values that would not be used. However in many cases that's just not possible and therefore it becomes impossible to inline.</source>
          <target state="translated">JavaScript インタープリタが、呼び出しの時点で提供されたすべての引数が数値であることを保証できない場合、インライン化されたコードの前にすべての引数のチェックを挿入するか、関数をインライン化できないようにする必要があります。この特定のケースでは、スマートなインタプリタはチェックをより最適なものにアレンジし、使用されない値をチェックしないようにすることができます。しかし、多くの場合はそれができないため、インライン化が不可能になります。</target>
        </trans-unit>
        <trans-unit id="68a358bd84ef01c0635528f27a3fd8e8510d7208" translate="yes" xml:space="preserve">
          <source>If the above is written using traditional function-based syntax, then autoboxing in method calls will happen in non&amp;ndash;strict mode based on the initial &lt;em&gt;this&lt;/em&gt; value. If the initial value is &lt;code&gt;undefined&lt;/code&gt;, &lt;em&gt;this&lt;/em&gt; will be set to the global object.</source>
          <target state="translated">上記が従来の関数ベースの構文を使用して記述されている場合、メソッド呼び出しのオートボクシングは、&lt;em&gt;このthis&lt;/em&gt;の初期値に基づいて非厳密モードで行われます。初期値が &lt;code&gt;undefined&lt;/code&gt; の場合、&lt;em&gt;これ&lt;/em&gt;はグローバルオブジェクトに設定されます。</target>
        </trans-unit>
        <trans-unit id="2de2f8611418b917390e5f634cefd48a2681c4fe" translate="yes" xml:space="preserve">
          <source>If the argument cannot be converted into a number, it returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数を数値に変換できない場合は、&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="f86e9bf415bebd29a0f92aca1846c02d35a1eafa" translate="yes" xml:space="preserve">
          <source>If the argument is negative zero, returns &lt;code&gt;-0&lt;/code&gt;.</source>
          <target state="translated">引数が負のゼロの場合、 &lt;code&gt;-0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="289d26426ef6dd5e6d6eab0c14be2df2d5ca5e8d" translate="yes" xml:space="preserve">
          <source>If the argument is negative, returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">引数が負の場合、 &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c6e8a717149be7c86d7d72f862e113481d8afe3c" translate="yes" xml:space="preserve">
          <source>If the argument is positive zero, returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">引数が正のゼロの場合、0を返し &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d32df946129f68834ae9d6e3c48b76560ca41a5" translate="yes" xml:space="preserve">
          <source>If the argument is positive, returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">引数が正の場合、 &lt;code&gt;1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="48a314159461e2f1c2180c3f2cc15ad46da26b49" translate="yes" xml:space="preserve">
          <source>If the argument of &lt;code&gt;eval()&lt;/code&gt; is not a string, &lt;code&gt;eval()&lt;/code&gt; returns the argument unchanged. In the following example, the &lt;code&gt;String&lt;/code&gt; constructor is specified and &lt;code&gt;eval()&lt;/code&gt; returns a &lt;code&gt;String&lt;/code&gt; object rather than evaluating the string.</source>
          <target state="translated">引数場合 &lt;code&gt;eval()&lt;/code&gt; 文字列ではない、 &lt;code&gt;eval()&lt;/code&gt; 、引数をそのまま返します。次の例では、 &lt;code&gt;String&lt;/code&gt; コンストラクタが指定され、 &lt;code&gt;eval()&lt;/code&gt; は文字列を評価するのではなく、 &lt;code&gt;String&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="1bfa86a1ae20fafacc59165c12911fe2c76ebf6c" translate="yes" xml:space="preserve">
          <source>If the argument&amp;rsquo;s first character can&amp;rsquo;t be converted to a number (it&amp;rsquo;s not any of the above characters), &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数の最初の文字を数値に変換できない場合（上記の文字のいずれでもない場合）、 &lt;code&gt;parseFloat&lt;/code&gt; は&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="9039cba0fc2b860a2bac0dd4ce6f62caa5dec6d9" translate="yes" xml:space="preserve">
          <source>If the arguments are not of the type string, they are converted to string values before concatenating.</source>
          <target state="translated">引数が文字列型でない場合は、連結する前に文字列値に変換されます。</target>
        </trans-unit>
        <trans-unit id="8fa2bcd893cb4d56cf48e54162eb8eabb074cee3" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">配列が空で、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="251133e014c170d65b3f1b94cd31ef8f9657cbc6" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, or if &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided but the array is empty, the solo value would be returned without calling &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">配列が空で、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。配列に要素が1つだけあり（位置に関係なく）、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、または &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されているが配列が空の場合、 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="8ca4c7e25be73952009dedc5b8fea1da899df392" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;initialValue &lt;/code&gt;was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;initialValue &lt;/code&gt;was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">配列が空で、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。配列に要素が1つしかなく（位置に関係なく）、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が指定されているが配列が空の場合、 &lt;code&gt;callback&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="2c59f20390f4add64d4abadd81feb605dba0b978" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;initialValue&lt;/code&gt; is provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;initialValue&lt;/code&gt; is provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the array is empty, the solo value will be returned &lt;em&gt;without calling &lt;code&gt;callback&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">配列が空で、 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。配列に要素が1つだけあり（位置に関係なく）、 &lt;code&gt;initialValue&lt;/code&gt; が提供されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が提供されているが配列が空の場合、&lt;em&gt; &lt;code&gt;callback&lt;/code&gt; &lt;/em&gt;&lt;em&gt;を呼び出さずに&lt;/em&gt;ソロ値が返され&lt;em&gt;ます&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1066bdb8f6e775da5b0f08dd139c62f7735718b8" translate="yes" xml:space="preserve">
          <source>If the array is modified during iteration, other elements might be skipped.</source>
          <target state="translated">反復中に配列が変更された場合、他の要素はスキップされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b7918e87d675662b81e34c9d4d3015efc6c03c96" translate="yes" xml:space="preserve">
          <source>If the array only has one element (regardless of position) and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, or if &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided but the array is empty, the solo value will be returned &lt;em&gt;without &lt;/em&gt;calling&lt;em&gt; &lt;code&gt;callback&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">配列に要素が1つしかなく（位置に関係なく）、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されていない場合、または &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; が指定されているが配列が空の場合、&lt;em&gt; &lt;code&gt;callback&lt;/code&gt; &lt;/em&gt;&lt;em&gt;を&lt;/em&gt;呼び出さ&lt;em&gt;ずに&lt;/em&gt;ソロ値が返され&lt;em&gt;ます&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;em&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e8c9b894a110d1dce237c3ffe9e8ff7d483f6e8" translate="yes" xml:space="preserve">
          <source>If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker thread, retrieves remote file, etc).</source>
          <target state="translated">プロパティ値の計算にコストがかかる場合(RAMやCPUに多くの時間がかかる、ワーカースレッドをスポーンする、リモートファイルを取得するなど)。</target>
        </trans-unit>
        <trans-unit id="b4773ffb9070fe50ec4b5a95d53687ea8941a3c4" translate="yes" xml:space="preserve">
          <source>If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker threads, retrieves remote file, etc).</source>
          <target state="translated">プロパティ値の計算にコストがかかる場合(RAMやCPUに多くの時間がかかる、ワーカースレッドをスポーンする、リモートファイルを取得するなど)。</target>
        </trans-unit>
        <trans-unit id="97084eab376f3b04d4908cc6bf47f923311c72b1" translate="yes" xml:space="preserve">
          <source>If the converted 32-bit unsigned integer is &lt;code&gt;0&lt;/code&gt;, then return &lt;code&gt;32&lt;/code&gt;, because all bits are &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">変換された32ビット符号なし整数が &lt;code&gt;0&lt;/code&gt; の場合、すべてのビットが &lt;code&gt;0&lt;/code&gt; であるため、 &lt;code&gt;32&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0ad167e307d5ae6b6eba5969fea22aadee5ee633" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初のオブジェクトに強制変換されます。</target>
        </trans-unit>
        <trans-unit id="f5e9511e31d3fc65e2014860d72bf862465ad596" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初にオブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="1fce2befc5daf124a888421997f4eb1a74803bb3" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">このメソッドの最初の引数がオブジェクト（プリミティブ）ではない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;、非オブジェクト最初の引数は、最初にオブジェクトに強制されます。</target>
        </trans-unit>
        <trans-unit id="74367fdf24ade95ee132ed1601c1dd829d6eab8f" translate="yes" xml:space="preserve">
          <source>If the first character cannot be converted to a number with the radix in use, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">基数を使用して最初の文字を数値に変換できない場合、 &lt;code&gt;parseInt&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ace5bb08886884c70b8510126b7ab1ac0624e793" translate="yes" xml:space="preserve">
          <source>If the first character cannot be converted to a number, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">最初の文字を数値に変換できない場合、 &lt;code&gt;parseInt&lt;/code&gt; は &lt;code&gt;NaN&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2466baa3d5ce80a7bc532ef0c023761bde57195c" translate="yes" xml:space="preserve">
          <source>If the first parameter is an object, each slot in the array will reference that object.</source>
          <target state="translated">最初のパラメータがオブジェクトの場合、配列の各スロットはそのオブジェクトを参照します。</target>
        </trans-unit>
        <trans-unit id="e759c6695a2302d21f9826503a1de5738e34c26d" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の不変条件に違反した場合、プロキシは&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="e830391a32752966b6f8d6e46ae869596b43464d" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の不変条件に違反している場合、プロキシは&lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="02ea11ae320384d65baba2b2012559732cdf307a" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a TypeError:</source>
          <target state="translated">以下の不変量に違反した場合、プロキシはTypeErrorをスローします。</target>
        </trans-unit>
        <trans-unit id="9a774c38f7a09fed2dfaac1cf3398252fa33b21d" translate="yes" xml:space="preserve">
          <source>If the fractional portion of the argument is greater than 0.5, the argument is rounded to the integer with the next higher absolute value. If it is less than 0.5, the argument is rounded to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the argument is rounded to the next integer in the direction of +&amp;infin;. &lt;strong&gt;Note that this differs from many languages' &lt;code&gt;round()&lt;/code&gt; functions, which often round this case to the next integer &lt;em&gt;away from zero&lt;/em&gt;&lt;/strong&gt;, instead giving a different result in the case of negative numbers with a fractional part of exactly 0.5.</source>
          <target state="translated">引数の小数部分が0.5より大きい場合、引数は次に大きい絶対値の整数に丸められます。 0.5未満の場合、引数は絶対値の小さい整数に丸められます。小数部分がちょうど0.5の場合、引数は+&amp;infin;の方向にある次の整数に丸められます。&lt;strong&gt;これは多くの言語の &lt;code&gt;round()&lt;/code&gt; 関数とは異なることに注意してください。この関数は、多くの場合、このケースを&lt;em&gt;0から離れ&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;た次の整数に丸め&lt;/strong&gt;ますが、小数部がちょうど0.5の負の数の場合に異なる結果を返します。</target>
        </trans-unit>
        <trans-unit id="b0634e6f899b35ea60f41dd19d559af0166b4abf" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;eval&lt;/code&gt; is invoked by an expression of the form &lt;code&gt;eval(...)&lt;/code&gt; in strict mode code, the code will be evaluated as strict mode code. The code may explicitly invoke strict mode, but it's unnecessary to do so.</source>
          <target state="translated">関数 &lt;code&gt;eval&lt;/code&gt; がストリクトモードコードで &lt;code&gt;eval(...)&lt;/code&gt; 形式の式によって呼び出された場合、コードはストリクトモードコードとして評価されます。コードは明示的に厳格モードを呼び出すことができますが、そうする必要はありません。</target>
        </trans-unit>
        <trans-unit id="05bd31a40e7ca7512908a8b320de5524c479ea0e" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;f&lt;/code&gt; was invoked by the top level code, the value of &lt;code&gt;f.caller&lt;/code&gt; is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, otherwise it's the function that called &lt;code&gt;f&lt;/code&gt;. It's also &lt;code&gt;null&lt;/code&gt; for strict, async function and generator function callers.</source>
          <target state="translated">関数ならば &lt;code&gt;f&lt;/code&gt; は、トップレベルのコードによって呼び出された、の値 &lt;code&gt;f.caller&lt;/code&gt; がある&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;それ以外の場合は、呼び出されることを機能だ、 &lt;code&gt;f&lt;/code&gt; を。厳密な非同期関数およびジェネレーター関数の呼び出し元の場合も &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="24479fad2ce8f41c59aa63feefedbe701c9c9fa0" translate="yes" xml:space="preserve">
          <source>If the function passed as handler to &lt;code&gt;then&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt;, an equivalent &lt;code&gt;Promise&lt;/code&gt; will be exposed to the subsequent &lt;code&gt;then&lt;/code&gt; in the method chain. The below snippet simulates asynchronous code with the &lt;code&gt;setTimeout&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; ハンドラとして渡された関数が &lt;code&gt;Promise&lt;/code&gt; を返す場合、同等の &lt;code&gt;Promise&lt;/code&gt; がメソッドチェーン内の後続の &lt;code&gt;then&lt;/code&gt; に公開されます。以下のスニペットは、 &lt;code&gt;setTimeout&lt;/code&gt; 関数を使用して非同期コードをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="d889ec98d8457e0aea924810e5726b978b821209" translate="yes" xml:space="preserve">
          <source>If the function should be in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, and the entire script or enclosing function is also okay to be in strict mode, you can move the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive outside of the function:</source>
          <target state="translated">関数を&lt;a href=&quot;../strict_mode&quot;&gt;strictモードに&lt;/a&gt;する必要があり、スクリプト全体またはそれを囲む関数もstrictモードにすることに問題がない場合は、 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ディレクティブを関数の外に移動できます。</target>
        </trans-unit>
        <trans-unit id="32ec2a558d2d7d263d497637245a807ee03c4f24" translate="yes" xml:space="preserve">
          <source>If the host system is configured for daylight saving, the offset will change depending on the date and time that the Date represents and that daylight saving applies.</source>
          <target state="translated">ホストシステムがサマータイム用に設定されている場合、オフセットは日付が表す日時とサマータイムが適用される日時に応じて変更されます。</target>
        </trans-unit>
        <trans-unit id="62f63a4a41145b733714a201b2e285ab0739d3b7" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;0&quot;, &lt;var&gt;radix&lt;/var&gt; is eight (octal) or 10 (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet. For this reason &lt;code&gt;parseInt&lt;/code&gt;.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「0」で始まる場合、 &lt;var&gt;radix&lt;/var&gt; は8（8進数）または10（10進数）です。どの基数を選択するかは、実装によって異なります。ECMAScript 5は、10（10進数）が使用されることを指定していますが、すべてのブラウザーがまだこれをサポートしているわけではありません。このため、 &lt;code&gt;parseInt&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="014fd7b5028fdfd4181a76d255e1c44887ca6dae" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;0x&quot; or &quot;0X&quot;, &lt;var&gt;radix&lt;/var&gt; is 16 (hexadecimal) and the remainder of the string is parsed.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「0x」または「0X」で始まる場合、 &lt;var&gt;radix&lt;/var&gt; は16（16進数）であり、残りの文字列は解析されます。</target>
        </trans-unit>
        <trans-unit id="f247d76b51985796282d05631d015cfe0ded8f0d" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;&lt;code&gt;0&lt;/code&gt;&quot; (a zero), &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is assumed to be &lt;code&gt;8&lt;/code&gt; (octal) or &lt;code&gt;10&lt;/code&gt; (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 clarifies that &lt;code&gt;10&lt;/code&gt; (decimal) &lt;em&gt;should&lt;/em&gt; be used, but not all browsers support this yet. For this reason, &lt;strong&gt;always specify a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; when using &lt;code&gt;parseInt&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「 &lt;code&gt;0&lt;/code&gt; 」（ゼロ）で始まる場合、 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; は &lt;code&gt;8&lt;/code&gt; （8進数）または &lt;code&gt;10&lt;/code&gt; （10進数）と見なされます。どの基数が選択されるかは、実装によって異なります。 ECMAScript 5は、 &lt;code&gt;10&lt;/code&gt; （10進数）&lt;em&gt;を&lt;/em&gt;使用する&lt;em&gt;必要&lt;/em&gt;があることを明確にしていますが、すべてのブラウザーがまだこれをサポートしているわけではありません。このため、&lt;strong&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;を使用&lt;/strong&gt;&lt;strong&gt;する場合は &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; &lt;/strong&gt;、&lt;strong&gt;常に&lt;/strong&gt;&lt;strong&gt;基数を&lt;/strong&gt;&lt;strong&gt;指定してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="85d899c9908f1b8511a58cfbfbbc6efdff187932" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;&lt;code&gt;0x&lt;/code&gt;&quot; or &quot;&lt;code&gt;0X&lt;/code&gt;&quot; (a zero, followed by lowercase or uppercase X), &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is assumed to be &lt;code&gt;16&lt;/code&gt; and the rest of the string is parsed as a hexidecimal number.</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が「 &lt;code&gt;0x&lt;/code&gt; 」または「 &lt;code&gt;0X&lt;/code&gt; 」（ゼロの後に小文字または大文字のXが続く）で始まる場合、 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; は &lt;code&gt;16&lt;/code&gt; と見なされ、文字列の残りの部分は16進数として解析されます。</target>
        </trans-unit>
        <trans-unit id="7391a0c805a3a7880ff98c62370413cf4a99a3c4" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is 10 (decimal).</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が他の値で始まる場合、基数は10（10進数）です。</target>
        </trans-unit>
        <trans-unit id="d48b16e0cf301f14341f3f7bd0a5ddc3c6245fa4" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is &lt;code&gt;10&lt;/code&gt; (decimal).</source>
          <target state="translated">入力 &lt;code&gt;string&lt;/code&gt; が他の値で始まる場合、基数は &lt;code&gt;10&lt;/code&gt; （10進数）です。</target>
        </trans-unit>
        <trans-unit id="d8f0eb6abc2d809f6720afec4140ffa6145e1b16" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already resolved/rejected promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the array:</source>
          <target state="translated">iterableに1つ以上のnon-promise値および/またはすでに解決/拒否されたpromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; は配列で見つかったこれらの値の最初に解決されます。</target>
        </trans-unit>
        <trans-unit id="42bb8061af2674b09d2e81c3c794c84558b5c8c1" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already resolved/rejected promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the iterable.</source>
          <target state="translated">iterableに1つ以上の非Promise値および/またはすでに解決/拒否されたPromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; は、Iterableで見つかったこれらの値の最初に解決されます。</target>
        </trans-unit>
        <trans-unit id="eba5348fb21f253314c74035ef8a94d981d39d85" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already settled promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the array:</source>
          <target state="translated">iterableに1つ以上の非promise値および/またはすでに解決されたpromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; は配列内で見つかったこれらの値の最初のものに解決されます。</target>
        </trans-unit>
        <trans-unit id="8455736e47a9a384da44aad6c284be518f32649f" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already settled promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the iterable.</source>
          <target state="translated">iterableに1つ以上の非promise値および/またはすでに解決されたpromiseが含まれている場合、 &lt;code&gt;Promise.race&lt;/code&gt; はiterableで見つかったこれらの値の最初のものに解決されます。</target>
        </trans-unit>
        <trans-unit id="133cdb90b6400a76c679993e7493ba162315d6a4" translate="yes" xml:space="preserve">
          <source>If the iterable passed is empty, the promise returned will be forever pending.</source>
          <target state="translated">渡された iterable が空の場合、返された約束は永遠に保留されます。</target>
        </trans-unit>
        <trans-unit id="5929c9470016412d62a0f7f3f9a21acab412f404" translate="yes" xml:space="preserve">
          <source>If the match fails, the &lt;code&gt;exec()&lt;/code&gt; method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, and sets &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">一致が失敗した場合、 &lt;code&gt;exec()&lt;/code&gt; メソッドは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返し、&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;0&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="fed5bcc169dd3c7fb57fbf0f3eae42cda09790da" translate="yes" xml:space="preserve">
          <source>If the match fails, the &lt;code&gt;exec()&lt;/code&gt; method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一致が失敗した場合、 &lt;code&gt;exec()&lt;/code&gt; メソッドは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="992c9b88d4c619e867d5faf6f752e55dcfba43d1" translate="yes" xml:space="preserve">
          <source>If the match succeeds, the &lt;code&gt;exec()&lt;/code&gt; method returns an array (with extra properties &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt;; see below) and updates the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.</source>
          <target state="translated">一致が成功すると、 &lt;code&gt;exec()&lt;/code&gt; メソッドは配列（追加のプロパティ &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;input&lt;/code&gt; を含む;以下を参照）を返し、正規表現オブジェクトの&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティを更新します。返される配列には、最初の項目として一致したテキストがあり、次に一致したテキストの括弧で囲まれたキャプチャグループごとに1つの項目があります。</target>
        </trans-unit>
        <trans-unit id="ad048d5802a4482d98378bb3e60f9d8891c84dff" translate="yes" xml:space="preserve">
          <source>If the match succeeds, the &lt;code&gt;exec()&lt;/code&gt; method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.</source>
          <target state="translated">一致が成功すると、 &lt;code&gt;exec()&lt;/code&gt; メソッドは配列を返し、正規表現オブジェクトのプロパティを更新します。返された配列には、最初の項目として一致したテキストがあり、次に、キャプチャされたテキストを含む、一致したキャプチャ括弧ごとに1つの項目があります。</target>
        </trans-unit>
        <trans-unit id="06b04d89d7ced98dfbbede5881b9b567808008e8" translate="yes" xml:space="preserve">
          <source>If the method is a function in &lt;a href=&quot;../../strict_mode&quot;&gt;non-strict mode&lt;/a&gt;, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be replaced with the global object, and primitive values will be converted to objects.</source>
          <target state="translated">メソッドが&lt;a href=&quot;../../strict_mode&quot;&gt;非厳密モードの&lt;/a&gt;関数である場合、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;はグローバルオブジェクトに置き換えられ、プリミティブ値はオブジェクトに変換されます。</target>
        </trans-unit>
        <trans-unit id="d74a4cb5fa65d9b34a16e5d974e6dcf978094959" translate="yes" xml:space="preserve">
          <source>If the number is greater than 1e+21 (including) or less than 1e-7 (including), it will return &lt;code&gt;1&lt;/code&gt;. (when using radix 10).</source>
          <target state="translated">数値が1e + 21（含む）より大きいか1e-7（含む）より小さい場合、 &lt;code&gt;1&lt;/code&gt; が返されます。（基数10を使用する場合）。</target>
        </trans-unit>
        <trans-unit id="076b090beef22f90ac6afa326097c3fb2ace6350" translate="yes" xml:space="preserve">
          <source>If the object is sealed/frozen then the change has no effect and no exception is thrown:</source>
          <target state="translated">オブジェクトが封印/凍結されている場合は、変更は何の効果もなく、例外はスローされません。</target>
        </trans-unit>
        <trans-unit id="07ccc48a8d47601113458d419e32b12076ea766d" translate="yes" xml:space="preserve">
          <source>If the only argument passed to the &lt;code&gt;Array&lt;/code&gt; constructor is an integer between 0 and 2&lt;sup&gt;32&lt;/sup&gt;-1 (inclusive), this returns a new JavaScript array with its &lt;code&gt;length&lt;/code&gt; property set to that number (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;arrayLength&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values). If the argument is any other number, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception is thrown.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; コンストラクターに渡される唯一の引数が0〜2 &lt;sup&gt;32&lt;/sup&gt; -1（両端を含む）の整数である場合、これは、 &lt;code&gt;length&lt;/code&gt; プロパティがその数に設定された新しいJavaScript配列を返します（&lt;strong&gt;注：&lt;/strong&gt;これは、 &lt;code&gt;arrayLength&lt;/code&gt; の空のスロットの配列を意味します。実際の &lt;code&gt;undefined&lt;/code&gt; 値を持つスロット）。引数が他の数値の場合、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="ea7372e8703a5521adb89c3b333094c42fd39770" translate="yes" xml:space="preserve">
          <source>If the only argument passed to the &lt;code&gt;Array&lt;/code&gt; constructor is an integer between 0 and 2&lt;sup&gt;32&lt;/sup&gt;-1 (inclusive), this returns a new JavaScript array with its &lt;code&gt;length&lt;/code&gt; property set to that number (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;arrayLength&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values). If the argument is any other number, a &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception is thrown.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; コンストラクターに渡される唯一の引数が0〜2 &lt;sup&gt;32&lt;/sup&gt; -1（両端を含む）の間の整数である場合、これはその &lt;code&gt;length&lt;/code&gt; 設定された新しいJavaScript配列を返します（&lt;strong&gt;注：&lt;/strong&gt;これは &lt;code&gt;arrayLength&lt;/code&gt; 空のスロットの配列を意味します。実際の &lt;code&gt;undefined&lt;/code&gt; 値を持つスロット）。引数が他の数値の場合、&lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="c151f90630c0da1907fe3ede9799a04e02835ced" translate="yes" xml:space="preserve">
          <source>If the operands are both objects, return &lt;code&gt;true&lt;/code&gt; only if both operands reference the same object.</source>
          <target state="translated">オペランドが両方のオブジェクトである場合、両方のオペランドが同じオブジェクトを参照している場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="33939db6a50d98508eed0a834601097c3eacd494" translate="yes" xml:space="preserve">
          <source>If the operands are of different types, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オペランドのタイプが異なる場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="84881d69ed9598fe6d4fdbd0dbf254ee65068845" translate="yes" xml:space="preserve">
          <source>If the operands are of different types, try to convert them to the same type before comparing:</source>
          <target state="translated">オペランドの型が異なる場合は、比較する前に同じ型に変換してみてください。</target>
        </trans-unit>
        <trans-unit id="29b04c75a7118532d56bf833fa26085a56463036" translate="yes" xml:space="preserve">
          <source>If the operands have the same type, they are compared as follows:</source>
          <target state="translated">オペランドが同じ型の場合は、以下のように比較されます。</target>
        </trans-unit>
        <trans-unit id="3de7d3547772b56e44d561daed2b5f4e5c0051e3" translate="yes" xml:space="preserve">
          <source>If the operation fails, the promise rejects with a &lt;a href=&quot;compileerror&quot;&gt;&lt;code&gt;WebAssembly.CompileError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linkerror&quot;&gt;&lt;code&gt;WebAssembly.LinkError&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt;&lt;/a&gt;, depending on the cause of the failure.</source>
          <target state="translated">操作が失敗すると、失敗の原因に応じて、&lt;a href=&quot;compileerror&quot;&gt; &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;linkerror&quot;&gt; &lt;code&gt;WebAssembly.LinkError&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt; &lt;/a&gt;でプロミスが拒否されます。</target>
        </trans-unit>
        <trans-unit id="c7ae6267575070773ce0e34354913d3b4cb253db" translate="yes" xml:space="preserve">
          <source>If the parameter cannot be converted to a number, or it is &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt; (&lt;code&gt;NaN&lt;/code&gt;), &lt;code&gt;Math.fround()&lt;/code&gt; will return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">パラメータを数値に変換、またはそれができない場合、&lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;非数&lt;/a&gt;（ &lt;code&gt;NaN&lt;/code&gt; で）、 &lt;code&gt;Math.fround()&lt;/code&gt; 戻ります &lt;code&gt;NaN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4cb915c64d1dc820b0c684cdac48718bd6a3e1d" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, &lt;code&gt;delete&lt;/code&gt; will not have any effect and will return &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">削除しようとしているプロパティが存在しない場合、 &lt;code&gt;delete&lt;/code&gt; は効果がなく、 &lt;code&gt;true&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="9571ccb67395bfe77750e491cdef9006177ddfa8" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, &lt;code&gt;delete&lt;/code&gt; will not have any effect and will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">削除しようとしているプロパティが存在しない場合、 &lt;code&gt;delete&lt;/code&gt; は効果がなく、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="928fd5633160fac29d5cef2872c5f9bc821a1144" translate="yes" xml:space="preserve">
          <source>If the regex has the global flag set, &lt;code&gt;test()&lt;/code&gt; will advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; of the regex. A subsequent use of &lt;code&gt;test()&lt;/code&gt; will start the search at the substring of &lt;code&gt;str&lt;/code&gt; specified by &lt;code&gt;lastIndex&lt;/code&gt; (&lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;code&gt;lastIndex&lt;/code&gt; property). It is worth noting that the &lt;code&gt;lastIndex&lt;/code&gt; will not reset when testing a different string.</source>
          <target state="translated">正規表現にグローバルフラグが設定されている場合、 &lt;code&gt;test()&lt;/code&gt; は正規表現の&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;を進めます。その後 &lt;code&gt;test()&lt;/code&gt; を使用すると、 &lt;code&gt;lastIndex&lt;/code&gt; で指定された &lt;code&gt;str&lt;/code&gt; の部分文字列から検索が開始されます（&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;も &lt;code&gt;lastIndex&lt;/code&gt; プロパティを進めます）。別の文字列をテストしても、 &lt;code&gt;lastIndex&lt;/code&gt; はリセットされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="54e623d784ebb3ca9ec36dc663b3600d3fafdecc" translate="yes" xml:space="preserve">
          <source>If the regular expression does not include the &lt;code&gt;g&lt;/code&gt; flag, &lt;code&gt;str.match()&lt;/code&gt; will return the same result as &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規表現に &lt;code&gt;g&lt;/code&gt; フラグが含まれていない場合、 &lt;code&gt;str.match()&lt;/code&gt; はRegExp.exec（）と同じ結果を&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ce0d349d09340572916f1b2c5d1d97584f2175f9" translate="yes" xml:space="preserve">
          <source>If the regular expression does not include the &lt;code&gt;g&lt;/code&gt; flag, &lt;code&gt;str.match()&lt;/code&gt; will return the same result as &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;. The returned &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; has an extra &lt;code&gt;input&lt;/code&gt; property, which contains the original string that was parsed. In addition, it has an &lt;code&gt;index&lt;/code&gt; property, which represents the zero-based index of the match in the string.</source>
          <target state="translated">正規表現に &lt;code&gt;g&lt;/code&gt; フラグが含まれていない場合、 &lt;code&gt;str.match()&lt;/code&gt; はRegExp.exec（）と同じ結果を&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt;ます。返された&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;は、解析された元の文字列を含む追加の &lt;code&gt;input&lt;/code&gt; プロパティがあります。さらに、文字列内の一致のゼロから始まるインデックスを表す &lt;code&gt;index&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="30138364a3c3af0aa6191de310201697ce047a82" translate="yes" xml:space="preserve">
          <source>If the regular expression includes the &lt;code&gt;g&lt;/code&gt; flag, the method returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing all matched substrings rather than match objects. Captured groups are not returned. If there were no matches, the method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規表現に &lt;code&gt;g&lt;/code&gt; フラグが含まれている場合、メソッドは、一致オブジェクトではなく、一致したすべての部分文字列を含む&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を返します。キャプチャされたグループは返されません。一致するものがなかった場合、メソッドは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="8b959552ef94320337e1ed0aeb1c7362f749576d" translate="yes" xml:space="preserve">
          <source>If the returned promise resolves, it is resolved with an aggregating array of the values from the resolved promises, in the same order as defined in the iterable of multiple promises.</source>
          <target state="translated">返されたプロミスが解決された場合、解決されたプロミスからの値の集約配列で解決され、複数のプロミスのイテレータブルで定義されている順序と同じ順序で解決されます。</target>
        </trans-unit>
        <trans-unit id="9aad8e2f8495619d7aae6f0803f38d9b68950bdc" translate="yes" xml:space="preserve">
          <source>If the returned promise resolves, it is resolved with the value of the first promise in the iterable that resolved.</source>
          <target state="translated">返されたプロミスが解決された場合、解決されたイテレータブルの最初のプロミスの値で解決されます。</target>
        </trans-unit>
        <trans-unit id="a177c490157a79f5a76e27fe6956e99555e128cb" translate="yes" xml:space="preserve">
          <source>If the selected language tag had a Unicode extension substring, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the language tag. For example, the &quot;&lt;code&gt;co&lt;/code&gt;&quot; key (collation) is only supported by &lt;a href=&quot;intl/collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, and its &quot;&lt;code&gt;phonebk&lt;/code&gt;&quot; value is only supported for German.</source>
          <target state="translated">選択した言語タグにUnicode拡張部分文字列が含まれている場合、その拡張機能を使用して、構築されたオブジェクトまたは関数の動作をカスタマイズできるようになりました。各コンストラクターまたは関数は、Unicode拡張用に定義されたキーのサブセットのみをサポートし、サポートされる値は多くの場合、言語タグに依存します。たとえば、「 &lt;code&gt;co&lt;/code&gt; 」キー（照合）は&lt;a href=&quot;intl/collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;でのみサポートされ、その「 &lt;code&gt;phonebk&lt;/code&gt; 」値はドイツ語でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="52e0cd12612909bf0c4a612be8384c6d969c9ac4" translate="yes" xml:space="preserve">
          <source>If the selected language tag had a Unicode extension substring, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the language tag. For example, the &lt;code&gt;&quot;co&quot;&lt;/code&gt; key (collation) is only supported by &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, and its &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; value is only supported for German.</source>
          <target state="translated">選択した言語タグにUnicode拡張部分文字列が含まれていた場合、その拡張を使用して、作成されたオブジェクトまたは関数の動作をカスタマイズします。各コンストラクターまたは関数は、Unicode拡張用に定義されたキーのサブセットのみをサポートし、サポートされる値は、言語タグに依存することがよくあります。たとえば、 &lt;code&gt;&quot;co&quot;&lt;/code&gt; キー（照合）は&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;でのみサポートされており、その &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; 値はドイツ語でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="0051f2f9e3b0c3c5f0efed5769af9ea4eeaaac1c" translate="yes" xml:space="preserve">
          <source>If the separator is an array, then that Array is coerced to a String and used as a separator.</source>
          <target state="translated">区切り文字が配列の場合は、その配列を強制的に文字列にして区切り文字として使用します。</target>
        </trans-unit>
        <trans-unit id="1b286f7a3b45c9d956b26ab348a1958c44fb5f42" translate="yes" xml:space="preserve">
          <source>If the source array is a typed array, the two arrays may share the same underlying &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;; the JavaScript engine will intelligently &lt;strong&gt;copy&lt;/strong&gt; the source range of the buffer to the destination range.</source>
          <target state="translated">ソース配列が型付き配列である場合、2つの配列は同じ基になる&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; を&lt;/a&gt;共有できます。JavaScriptエンジンは、バッファーのソース範囲を宛先範囲にインテリジェントに&lt;strong&gt;コピー&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="b353db1fb14273700c08d890316bc02b3fd861ed" translate="yes" xml:space="preserve">
          <source>If the source value is a reference to an object, it only copies the reference value.</source>
          <target state="translated">ソース値がオブジェクトへの参照である場合、参照値のみをコピーします。</target>
        </trans-unit>
        <trans-unit id="6a4ef9aab8e43c2b5e9c78c499c653ff6b14a42f" translate="yes" xml:space="preserve">
          <source>If the specified number of elements to insert differs from the number of elements being removed, the array's &lt;code&gt;length&lt;/code&gt; will be changed.</source>
          <target state="translated">指定した挿入要素数と削除要素数が異なる場合、配列の &lt;code&gt;length&lt;/code&gt; さが変更されます。</target>
        </trans-unit>
        <trans-unit id="11118b48f62c5ceba27585b77797df31fab20d6a" translate="yes" xml:space="preserve">
          <source>If the string matches the expression, it will return an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing the entire matched string as the first element, followed by any results captured in parentheses. If there were no matches, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">文字列が式と一致すると、最初の要素として一致した文字列全体を含む&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;が返され、その後に括弧で囲まれた結果が続きます。一致がなかった場合は、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="8df86ca042f37da0bf772e9d1368d49d51710bb8" translate="yes" xml:space="preserve">
          <source>If the string you're calling &lt;code&gt;eval()&lt;/code&gt; on contains data (for example, an array: &lt;code&gt;&quot;[1, 2, 3]&quot;&lt;/code&gt;), as opposed to code, you should consider switching to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;, which allows the string to use a subset of JavaScript syntax to represent data. See also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions&quot;&gt;Downloading JSON and JavaScript in extensions&lt;/a&gt;.</source>
          <target state="translated">コードではなく、 &lt;code&gt;eval()&lt;/code&gt; を呼び出す文字列にデータ（たとえば、配列： &lt;code&gt;&quot;[1, 2, 3]&quot;&lt;/code&gt; ）が含まれている場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;に切り替えることを検討してください。データを表すJavaScript構文のサブセット。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions&quot;&gt;拡張機能でのJSONおよびJavaScriptのダウンロード&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b7e003732737f7eeca987515a181e7a6c0886873" translate="yes" xml:space="preserve">
          <source>If the target object is not extensible, then the result List must contain all the keys of the own properties of the target object and no other values.</source>
          <target state="translated">ターゲット・オブジェクトが拡張可能でない場合、結果リストはターゲット・オブジェクトの自身のプロパティのすべてのキーを含み、それ以外の値は含まれていない必要があります。</target>
        </trans-unit>
        <trans-unit id="e8487fe85382c0faecab53eac35c276804fd64cd" translate="yes" xml:space="preserve">
          <source>If the target of a &lt;code&gt;WeakRef&lt;/code&gt; is also in a &lt;a href=&quot;finalizationregistry&quot;&gt;&lt;code&gt;FinalizationRegistry&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;WeakRef&lt;/code&gt;'s target is cleared at the same time or before any cleanup callback associated with the registry is called; if your cleanup callback calls &lt;code&gt;deref&lt;/code&gt; on a &lt;code&gt;WeakRef&lt;/code&gt; for the object, it will receive &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WeakRef&lt;/code&gt; のターゲットも&lt;a href=&quot;finalizationregistry&quot;&gt; &lt;code&gt;FinalizationRegistry&lt;/code&gt; にある&lt;/a&gt;場合、 &lt;code&gt;WeakRef&lt;/code&gt; のターゲットは、レジストリに関連付けられたクリーンアップコールバックが呼び出されるのと同時に、または呼び出される前にクリアされます。クリーンアップコールバックがオブジェクトの &lt;code&gt;WeakRef&lt;/code&gt; で &lt;code&gt;deref&lt;/code&gt; を呼び出すと、 &lt;code&gt;undefined&lt;/code&gt; を受け取ります。</target>
        </trans-unit>
        <trans-unit id="e848b7dd6ac3915d3833ea99453aeb25eaa52820" translate="yes" xml:space="preserve">
          <source>If the target value is an integer, return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. If the value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, return &lt;code&gt;false&lt;/code&gt;. The method will also return &lt;code&gt;true&lt;/code&gt; for floating point numbers that can be represented as integer.</source>
          <target state="translated">ターゲット値が整数の場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。値が&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;false&lt;/code&gt; を返します。このメソッドは、整数として表すことができる浮動小数点数に対しても &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bdd4f6c5189b324bbcf046826b6268c8f7662e9b" translate="yes" xml:space="preserve">
          <source>If the target value is an integer, return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. If the value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or infinite, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ターゲット値が整数の場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。値が&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;または無限の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="68866588f03b84c0c3e398a9e3f5578b4ce34bf3" translate="yes" xml:space="preserve">
          <source>If the type is &quot;currency&quot;, code should be a &lt;a href=&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;&gt;3-letter ISO 4217 currency code&lt;/a&gt;.</source>
          <target state="translated">タイプが「通貨」の場合、コードは&lt;a href=&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;&gt;3文字のISO4217通貨コードである&lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="f0cb5c046dac4045c9a89761a4a8b98c0ae77670" translate="yes" xml:space="preserve">
          <source>If the type is &quot;language&quot;, code should be a &lt;em&gt;languageCode&lt;/em&gt; [&quot;-&quot; &lt;em&gt;scriptCode&lt;/em&gt;] [&quot;-&quot; &lt;em&gt;regionCode&lt;/em&gt; ] *(&quot;-&quot; &lt;em&gt;variant&lt;/em&gt; ) subsequence of the unicode_language_id grammar in &lt;a href=&quot;http://unicode.org/reports/tr35/#Unicode_language_identifier&quot;&gt;UTS 35's Unicode Language and Locale Identifiers grammar&lt;/a&gt;. &lt;em&gt;languageCode&lt;/em&gt; is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.</source>
          <target state="translated">タイプが「言語」の場合、コードは&lt;em&gt;UTS35&lt;/em&gt;&lt;a href=&quot;http://unicode.org/reports/tr35/#Unicode_language_identifier&quot;&gt;のUnicode言語およびロケール識別子文法の&lt;/a&gt;unicode_language_id文法の&lt;em&gt;languageCode&lt;/em&gt; [&quot;-&quot; &lt;em&gt;scriptCode&lt;/em&gt; ] [&quot;-&quot; &lt;em&gt;regionCode&lt;/em&gt; ] *（ &quot;-&quot;&lt;em&gt;バリアント&lt;/em&gt;）サブシーケンスである必要があります。&lt;em&gt;languageCode&lt;/em&gt;は、2文字のISO639-1言語コードまたは3文字のISO639-2言語コードのいずれかです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca78f095eb556d05599a45f5418d96e0f963fba2" translate="yes" xml:space="preserve">
          <source>If the type is &quot;region&quot;, code should be either an &lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot;&gt;ISO-3166 two letters region code&lt;/a&gt;, or a &lt;a href=&quot;https://unstats.un.org/unsd/methodology/m49/&quot;&gt;three digits UN M49 Geographic Regions&lt;/a&gt;.</source>
          <target state="translated">タイプが「region」の場合、コードは&lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot;&gt;ISO-31662文字のリージョンコード&lt;/a&gt;または&lt;a href=&quot;https://unstats.un.org/unsd/methodology/m49/&quot;&gt;3桁のUNM49 GeographicRegionsの&lt;/a&gt;いずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="cfe9db6773b02e2ea80f4ddb7ce1c0e560d94678" translate="yes" xml:space="preserve">
          <source>If the type is &quot;script&quot;, code should be an &lt;a href=&quot;http://unicode.org/iso15924/iso15924-codes.html&quot;&gt;ISO-15924 four letters script code&lt;/a&gt;.</source>
          <target state="translated">タイプが「スクリプト」の場合、コードは&lt;a href=&quot;http://unicode.org/iso15924/iso15924-codes.html&quot;&gt;ISO-159244文字のスクリプトコードである&lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="3b163d07b932ce80b4a6e15721f922f7fb30650e" translate="yes" xml:space="preserve">
          <source>If the typed array is empty and no &lt;code&gt;initialValue &lt;/code&gt;was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the typed array has only one element (regardless of position) and no &lt;code&gt;initialValue &lt;/code&gt;was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the typed array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">型付き配列が空で、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。型付き配列に（位置に関係なく）要素が1つだけあり、 &lt;code&gt;initialValue &lt;/code&gt; が指定されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が指定されているが型付き配列が空の場合、 &lt;code&gt;callback&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="32f1892613c48627e71e01cfec6b0670419135f0" translate="yes" xml:space="preserve">
          <source>If the typed array is empty and no &lt;code&gt;initialValue&lt;/code&gt; was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the typed array has only one element (regardless of position) and no &lt;code&gt;initialValue&lt;/code&gt; was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the typed array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">型付き配列が空で、 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;がスローされます。型付き配列に（位置に関係なく）要素が1つだけあり、 &lt;code&gt;initialValue&lt;/code&gt; が指定されていない場合、または &lt;code&gt;initialValue&lt;/code&gt; が指定されているが型付き配列が空の場合、 &lt;code&gt;callback&lt;/code&gt; を呼び出さずにソロ値が返されます。</target>
        </trans-unit>
        <trans-unit id="510bd268f45e4d1729f707209afb02f9c7b0083d" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;a href=&quot;#toJSON()_behavior&quot;&gt;toJSON()&lt;/a&gt; method, it's responsible to define what data will be serialized.</source>
          <target state="translated">値に&lt;a href=&quot;#toJSON()_behavior&quot;&gt;toJSON（）&lt;/a&gt;メソッドがある場合、シリアル化するデータを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="e00674da0b18b7b91ffb49a53cd9a91a4d73a00f" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;code&gt;&lt;a href=&quot;#toJSON_behavior&quot;&gt;toJSON()&lt;/a&gt;&lt;/code&gt; method, it's responsible to define what data will be serialized.</source>
          <target state="translated">値に &lt;code&gt;&lt;a href=&quot;#toJSON_behavior&quot;&gt;toJSON()&lt;/a&gt;&lt;/code&gt; メソッドがある場合、シリアル化されるデータを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="c197d6eace707cd4160203ef188b37b5f8ddd8e2" translate="yes" xml:space="preserve">
          <source>If the value is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object.</source>
          <target state="translated">値が&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、空のオブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="54140dc9eb589e0c204678e22bbbdb9cf79a2d04" translate="yes" xml:space="preserve">
          <source>If the value is &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object.</source>
          <target state="translated">値が&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、空のオブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="561c9acef125c9f472e17089eda2c02ed61b2c26" translate="yes" xml:space="preserve">
          <source>If the value is a string and first character cannot be converted to a number, &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値が文字列で、最初の文字を数値に変換できない場合、 &lt;code&gt;parseFloat&lt;/code&gt; は&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="ef9bb279e649c6b04963f948bf7ce36a932c8c2d" translate="yes" xml:space="preserve">
          <source>If the value is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;true&lt;/code&gt; is returned; otherwise, &lt;code&gt;false&lt;/code&gt; is.</source>
          <target state="translated">値が&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;true&lt;/code&gt; が返されます。それ以外の場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53a1da54003d5163c28e486b08412caa8da3e737" translate="yes" xml:space="preserve">
          <source>If the value is an object already, it will return the value.</source>
          <target state="translated">値が既にオブジェクトである場合は、その値を返します。</target>
        </trans-unit>
        <trans-unit id="1640abfaf088fbcbdcadda1eedf8dab180bb6242" translate="yes" xml:space="preserve">
          <source>If the value is not a &lt;code&gt;Promise&lt;/code&gt;, it converts the value to a resolved &lt;code&gt;Promise&lt;/code&gt;, and waits for it.</source>
          <target state="translated">値が &lt;code&gt;Promise&lt;/code&gt; でない場合、値を解決済みの &lt;code&gt;Promise&lt;/code&gt; に変換し、それを待ちます。</target>
        </trans-unit>
        <trans-unit id="f0a64651c26d9a65bc75cc4516d6f569cc7361ac" translate="yes" xml:space="preserve">
          <source>If the value is omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">値を省略すると、代わりに &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7ea4c0759ce10f3ec998abec7f06323cfdcb044e" translate="yes" xml:space="preserve">
          <source>If the value isn't needed just now. It will be used later, or in some case it's not used at all.</source>
          <target state="translated">その値が今だけ必要ない場合。後で使用されるか、場合によっては全く使用されません。</target>
        </trans-unit>
        <trans-unit id="dcd7892bd313c45ff27bee53ccf94aa493673289" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is 0, the return value is always &lt;a href=&quot;../number/negative_infinity&quot;&gt;&lt;code&gt;-Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が0の場合、戻り値は常に&lt;a href=&quot;../number/negative_infinity&quot;&gt; &lt;code&gt;-Infinity&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d4f9318ece72f4c2eeef6e7c2a93aef5af0daf69" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is less than 0, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が0未満の場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1239996883a93b9b2c50ccbd8a405e2eb8177812" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;Math.sqrt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が負の場合、 &lt;code&gt;Math.sqrt()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="059376bc4439a5267686d0fa5d49aac6a927f1ff" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is negative, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; の値が負の場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ac2d5fb2a300d0369ab4234e82cc168cc8762ee4" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is less than -1, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が-1より小さい場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9274a7a137b577eeaa2f04b6902d872eb4466cee" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is less than 0, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が0より小さい場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e9eb70669a6e170dc1e8ae977b8cb8a15a0498f1" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is negative, &lt;code&gt;Math.sqrt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が負の場合、 &lt;code&gt;Math.sqrt()&lt;/code&gt; は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="6dbda7783aa9232721a5872c34710ccbbff0ffb5" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is negative, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が負の場合、戻り値は常に&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7c96df6c0dbc7425e0d4c9a6c302f795ee1fc7c1" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;em&gt;expression&lt;/em&gt; following the &lt;code&gt;await&lt;/code&gt; operator is not a &lt;code&gt;Promise&lt;/code&gt;, it's converted to a &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;resolved Promise&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 演算子に続く&lt;em&gt;式&lt;/em&gt;の値が &lt;code&gt;Promise&lt;/code&gt; でない場合は、&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;解決されたPromiseに&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="7777a3173c1fc93619bfe4928f7864e3ee37ca7e" translate="yes" xml:space="preserve">
          <source>If there is a constructor present in the subclass, it needs to first call super() before using &quot;this&quot;.</source>
          <target state="translated">サブクラスにコンストラクタが存在する場合、&quot;this &quot;を使用する前にまずsuper()を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="21978f541a285d4f0f6b8649673a45e9d8c65652" translate="yes" xml:space="preserve">
          <source>If there is no element at the specified position, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned. If no UTF-16 surrogate pair begins at &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt;, the code unit at &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">指定された位置に要素がない場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。何UTF-16サロゲートペアがで開始しない場合 &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; 、でコード部 &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="73a5e90cc482f2c146104da9fc8a32ddba669924" translate="yes" xml:space="preserve">
          <source>If there is no element at the specified position, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned. If no UTF-16 surrogate pair begins at &lt;code&gt;pos&lt;/code&gt;, the code unit at &lt;code&gt;pos&lt;/code&gt; is returned.</source>
          <target state="translated">指定された位置に要素がない場合、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;が返されます。何UTF-16サロゲートペアがで開始しない場合 &lt;code&gt;pos&lt;/code&gt; 、でコード部 &lt;code&gt;pos&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="afdb33990e63ce9b5d36a9e521b9b2dbdc06c9d9" translate="yes" xml:space="preserve">
          <source>If this is a &lt;code&gt;Number&lt;/code&gt;, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just &lt;code&gt;10&lt;/code&gt;). Values less than 1 indicate that no space should be used.</source>
          <target state="translated">これが &lt;code&gt;Number&lt;/code&gt; の場合、空白として使用するスペース文字の数を示します。この数の上限は10です（それより大きい場合、値は &lt;code&gt;10&lt;/code&gt; になります）。1未満の値は、スペースを使用しないことを示します。</target>
        </trans-unit>
        <trans-unit id="4657fbccd094cf1a6aae2b07836eaa2e143cf7da" translate="yes" xml:space="preserve">
          <source>If this is a &lt;code&gt;String&lt;/code&gt;, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;), no white space is used.</source>
          <target state="translated">これが &lt;code&gt;String&lt;/code&gt; の場合、文字列（またはそれより長い場合は、文字列の最初の10文字）が空白として使用されます。このパラメーターが指定されていない場合（または&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; の場合&lt;/a&gt;）、空白は使用されません。</target>
        </trans-unit>
        <trans-unit id="3fe1411948efd2142af6ac7caf00bbd4cd925703" translate="yes" xml:space="preserve">
          <source>If this method is invoked on an object that is not a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドが&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;ではないオブジェクトで呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="fe15855eb8f13ceac6922262bfec88886e019764" translate="yes" xml:space="preserve">
          <source>If used immediately after any of the quantifiers &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;{}&lt;/code&gt;, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).</source>
          <target state="translated">数量のいずれかが、直後に使用した場合 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; 、または &lt;code&gt;{}&lt;/code&gt; は、デフォルトの貪欲（最大回数に一致）とは対照的に、数量詞を貪欲（最小回数に一致）にします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
