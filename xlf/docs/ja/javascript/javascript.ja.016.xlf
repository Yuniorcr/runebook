<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="c6b6702ca6f9ac3a7721cff4e66e661d718f8baf" translate="yes" xml:space="preserve">
          <source>There is no way to stop or break a &lt;code&gt;forEach()&lt;/code&gt; loop other than by throwing an exception. If you need such behavior, the &lt;code&gt;forEach()&lt;/code&gt; method is the wrong tool.</source>
          <target state="translated">例外をスローする以外に &lt;code&gt;forEach()&lt;/code&gt; ループを停止または解除する方法はありません。このような動作が必要な場合、 &lt;code&gt;forEach()&lt;/code&gt; メソッドは間違ったツールです。</target>
        </trans-unit>
        <trans-unit id="19b88f705ac5c1d6eceb88623955d3cbf474e151" translate="yes" xml:space="preserve">
          <source>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation and must be accessed using bracket notation.</source>
          <target state="translated">JavaScriptの配列やプロパティには、この原因となる特別なものはありません。桁で始まる JavaScript のプロパティはドット表記では参照できず、括弧表記を使用してアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="7e79d1c336655d9a3379f42b74223cd9f8017298" translate="yes" xml:space="preserve">
          <source>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation; and must be accessed using bracket notation. For example, if you had an object with a property named &lt;code&gt;'3d'&lt;/code&gt;, it can only be referenced using bracket notation. E.g.:</source>
          <target state="translated">JavaScriptの配列とこれを引き起こすプロパティについて特別なことは何もありません。数字で始まるJavaScriptプロパティは、ドット表記では参照できません。ブラケット表記を使用してアクセスする必要があります。たとえば、 &lt;code&gt;'3d'&lt;/code&gt; という名前のプロパティを持つオブジェクトがある場合、そのオブジェクトはブラケット表記を使用してのみ参照できます。例えば：</target>
        </trans-unit>
        <trans-unit id="b566a2051714573149c76a854f467057a2d44234" translate="yes" xml:space="preserve">
          <source>There is standardization work ongoing that enables developers to create &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects again, but changes are needed in order to be use these across threads (i.e., &lt;code&gt;postMessage()&lt;/code&gt; for &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects throws by default). These changes provide further isolation between sites and help reduce the impact of attacks with high-resolution timers, which can be created with shared memory.</source>
          <target state="translated">そこ標準化作業は、それが作成する開発者を可能に進行中である&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; は&lt;/a&gt;（すなわち、再びオブジェクトが、変更は、スレッド間でこれらを使用するために必要とされている &lt;code&gt;postMessage()&lt;/code&gt; のために &lt;code&gt;SharedArrayBuffer&lt;/code&gt; は、デフォルトでスローオブジェクト）。これらの変更により、サイト間の分離がさらに進み、共有メモリで作成できる高解像度タイマーによる攻撃の影響を軽減できます。</target>
        </trans-unit>
        <trans-unit id="252b4e8437eedd402437cd68393224c8497ca855" translate="yes" xml:space="preserve">
          <source>There isn't any method in an Object itself to delete its own properties (e.g. like &lt;code&gt;&lt;a href=&quot;map/delete&quot;&gt;Map.prototype.delete()&lt;/a&gt;&lt;/code&gt;). To do so one has to use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</source>
          <target state="translated">オブジェクト自体には、独自のプロパティを削除するメソッドはありません（例： &lt;code&gt;&lt;a href=&quot;map/delete&quot;&gt;Map.prototype.delete()&lt;/a&gt;&lt;/code&gt; ）。これを行うには、&lt;a href=&quot;../operators/delete&quot;&gt;削除演算子&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="10b1ddca0fb6ef669c81b9c4f20fa38570137851" translate="yes" xml:space="preserve">
          <source>There isn't any method in an Object itself to delete its own properties (such as &lt;a href=&quot;map/delete&quot;&gt;&lt;code&gt;Map.prototype.delete()&lt;/code&gt;&lt;/a&gt;). To do so, one must use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</source>
          <target state="translated">オブジェクト自体には、それ自体のプロパティ（&lt;a href=&quot;map/delete&quot;&gt; &lt;code&gt;Map.prototype.delete()&lt;/code&gt; &lt;/a&gt;など）を削除するメソッドはありません。これを行うには、&lt;a href=&quot;../operators/delete&quot;&gt;削除演算子を&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3d402ccef36d314f4b2419d96fd7f974013a48d" translate="yes" xml:space="preserve">
          <source>There was an assignment (&lt;code&gt;=&lt;/code&gt;) when you would normally expect a test for equality (&lt;code&gt;==&lt;/code&gt;). To help debugging, JavaScript (with strict warnings enabled) warns about this pattern.</source>
          <target state="translated">通常、等価性のテスト（ &lt;code&gt;==&lt;/code&gt; ）を期待するときに割り当て（ &lt;code&gt;=&lt;/code&gt; ）がありました。デバッグを支援するために、JavaScript（厳密な警告が有効になっている）はこのパターンについて警告します。</target>
        </trans-unit>
        <trans-unit id="f9227994116fe5d0f8085970ec6f16ff6bfdc73c" translate="yes" xml:space="preserve">
          <source>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</source>
          <target state="translated">オブジェクトまたは変数をコンストラクターとして使用しようとしましたが、そのオブジェクトまたは変数はコンストラクターではありません。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;コンストラクターの&lt;/a&gt;詳細については、コンストラクターまたは&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f951ee1c35465bac5e1963445b6acaf0bbbefedc" translate="yes" xml:space="preserve">
          <source>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</source>
          <target state="translated">オブジェクトまたは変数をコンストラクターとして使用しようとしましたが、そのオブジェクトまたは変数はコンストラクターではありません。コンストラクターとは何かの詳細については、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;コンストラクター&lt;/a&gt;または&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="891ffccc316759ba568170669ba5546a49a0e599" translate="yes" xml:space="preserve">
          <source>There was an out of range precision argument in one of these methods:</source>
          <target state="translated">これらの方法の一つに範囲外の精度の議論がありました。</target>
        </trans-unit>
        <trans-unit id="8555a1b96929dda25e05855a91841930b9895b54" translate="yes" xml:space="preserve">
          <source>There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;../operators/assignment_operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;../operators/comparison_operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign assigns a value to a variable, the &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot; operators compare a value.</source>
          <target state="translated">どこかに予期しない割り当てがありました。たとえば、&lt;a href=&quot;../operators/assignment_operators&quot;&gt;代入演算子&lt;/a&gt;と&lt;a href=&quot;../operators/comparison_operators&quot;&gt;比較演算&lt;/a&gt;子の不一致が原因である可能性があります。単一の「 &lt;code&gt;=&lt;/code&gt; 」記号は値を変数に割り当てますが、「 &lt;code&gt;==&lt;/code&gt; 」または「 &lt;code&gt;===&lt;/code&gt; 」演算子は値を比較します。</target>
        </trans-unit>
        <trans-unit id="2cc0b62de74b6015a40cc1de92b6c589e33d8858" translate="yes" xml:space="preserve">
          <source>There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign assigns a value to a variable, the &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot; operators compare a value.</source>
          <target state="translated">どこかに予期しない割り当てがありました。これは、たとえば、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;代入演算子&lt;/a&gt;と&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;比較演算&lt;/a&gt;子の不一致が原因である可能性があります。シングル「 &lt;code&gt;=&lt;/code&gt; &quot; =」記号は変数に値を割り当てますが、「 &lt;code&gt;==&lt;/code&gt; &quot;」または「 &lt;code&gt;===&lt;/code&gt; &quot;」演算子は値を比較します。</target>
        </trans-unit>
        <trans-unit id="c743d038ce86d7d1cf9aef67d46c92805bb7360b" translate="yes" xml:space="preserve">
          <source>There was an unexpected type. This occurs oftentimes with &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">意外なタイプがありました。これは、&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;値で頻繁に発生します。</target>
        </trans-unit>
        <trans-unit id="fa851d659f9e3a5e5404c00816c8b91ca7df0be7" translate="yes" xml:space="preserve">
          <source>There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">権限のないオブジェクトにアクセスしようとしました。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;同じ生成元のポリシーに&lt;/a&gt;違反した別のドメインから読み込まれた&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;要素である可能性があります。</target>
        </trans-unit>
        <trans-unit id="573476911bbd2032116682ce4f1dfae94f4ea1e9" translate="yes" xml:space="preserve">
          <source>There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">権限のないオブジェクトにアクセスしようとしました。これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;同一生成元ポリシーに&lt;/a&gt;違反した別のドメインから読み込まれた&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;要素である可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a2fec0c776a0bb5124c90983a67b0ba18a2c6ee" translate="yes" xml:space="preserve">
          <source>There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;と非推奨の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して、指定されたオブジェクトのキーと値のペアを反復する非推奨のイディオムがあります。</target>
        </trans-unit>
        <trans-unit id="f9de48cf02c49531431b9a478a6c399bfdff23ed" translate="yes" xml:space="preserve">
          <source>There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;と非推奨の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して、指定されたオブジェクトのキーと値のペアを反復処理するための非推奨のイディオムがあります。</target>
        </trans-unit>
        <trans-unit id="f79eb6500b4844bbdbe1fa124b2a371c97ab0a22" translate="yes" xml:space="preserve">
          <source>There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;a href=&quot;substr&quot;&gt;&lt;code&gt;substr()&lt;/code&gt;&lt;/a&gt; methods, so you should be careful not to get them confused.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; &lt;a href=&quot;substr&quot;&gt; &lt;code&gt;substr()&lt;/code&gt; &lt;/a&gt;メソッドとsubstr（）メソッドには微妙な違いがあるため、混乱しないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="d47764807ef3f4ab89be2f3e1fff9829ca861331" translate="yes" xml:space="preserve">
          <source>There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; methods, and you should be careful not get them confused.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; メソッドとsubstr（）メソッドの間には微妙な違いがあり、それらを混同しないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="388052c72ae9c911a2a9c7d0600224bb8a43d9e8" translate="yes" xml:space="preserve">
          <source>Therefore we can't obtain the class name for virtually any class with a static method property &lt;code&gt;name()&lt;/code&gt;:</source>
          <target state="translated">したがって、静的メソッドのプロパティ &lt;code&gt;name()&lt;/code&gt; を持つ実質的にすべてのクラスのクラス名を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="44baae7b20052d28f0d454acdd98cfe8611bd134" translate="yes" xml:space="preserve">
          <source>Therefore you may not rely on the built-in &lt;code&gt;Function.name&lt;/code&gt; property to always hold a class's name.</source>
          <target state="translated">したがって、組み込みの &lt;code&gt;Function.name&lt;/code&gt; プロパティが常にクラスの名前を保持しているとは限りません。</target>
        </trans-unit>
        <trans-unit id="2cdba98eff68875b3d99014eb4149d2554d08b62" translate="yes" xml:space="preserve">
          <source>Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by &lt;code&gt;JSON.stringify&lt;/code&gt; into a JavaScript string to be passed to &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;new Function&lt;/code&gt; or as part of a &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; URL, and the following utility can be used:</source>
          <target state="translated">したがって、古いJavaScriptエンジンとの互換性が必要な場合は、 &lt;code&gt;JSON.stringify&lt;/code&gt; によって返された文字列をJavaScript文字列に直接置き換えて、 &lt;code&gt;eval&lt;/code&gt; または &lt;code&gt;new Function&lt;/code&gt; に渡すか、&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPURLの&lt;/a&gt;一部として渡すのは危険です。次のユーティリティは次のようになります。中古：</target>
        </trans-unit>
        <trans-unit id="8dbf70e76e01d89d71c9236522a7b76a076b920f" translate="yes" xml:space="preserve">
          <source>Therefore, if the JSON is meant to be evaluated or directly utilized within &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;, the following utility can be used:</source>
          <target state="translated">したがって、JSONが評価されるか、&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;内で直接利用される場合は、次のユーティリティを使用できます。</target>
        </trans-unit>
        <trans-unit id="69388a8bead74bc115a22073ad3512cb27d74046" translate="yes" xml:space="preserve">
          <source>Therefore, this appears to work in a way:</source>
          <target state="translated">したがって、これはある意味では機能しているように見える。</target>
        </trans-unit>
        <trans-unit id="40cbde5ec7d37565542fef4246a75fc1451e7a61" translate="yes" xml:space="preserve">
          <source>These are &lt;strong&gt;not&lt;/strong&gt; part of ECMAScript standards and they are not supported by non-Gecko browsers. As a standard alternative, you can convert your object to a proper array using &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;; although that method may not be supported in old browsers:</source>
          <target state="translated">これらはECMAScript標準の一部では&lt;strong&gt;なく&lt;/strong&gt;、Gecko以外のブラウザではサポートされていません。標準的な代替手段として、&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトを適切な配列に変換できます。その方法は古いブラウザではサポートされていないかもしれませんが：</target>
        </trans-unit>
        <trans-unit id="19f1bdd2a382fb545b7ca233307dfaaa84cb23aa" translate="yes" xml:space="preserve">
          <source>These are always reserved:</source>
          <target state="translated">これらは常に予約されています。</target>
        </trans-unit>
        <trans-unit id="59320fcd83ed1d0de297136831e93c2907c65ba8" translate="yes" xml:space="preserve">
          <source>These are the base objects representing numbers, dates, and mathematical calculations.</source>
          <target state="translated">これらは、数字、日付、数学的計算を表す基底オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="adf2d53afae434de46f79f2141ac3e8883ace949" translate="yes" xml:space="preserve">
          <source>These are the fundamental, basic objects upon which all other objects are based. This includes objects that represent general objects, functions, and errors.</source>
          <target state="translated">これらは、他のすべてのオブジェクトの基礎となる基本的なオブジェクトです。これには、一般的なオブジェクト、関数、エラーを表すオブジェクトが含まれます。</target>
        </trans-unit>
        <trans-unit id="6fe3d01344deb2754adced0b183508db74566905" translate="yes" xml:space="preserve">
          <source>These arguments (if any) follow the provided &lt;code&gt;this&lt;/code&gt; value and are then inserted at the start of the arguments passed to the target function, followed by whatever arguments are passed bound function at the time it is called.</source>
          <target state="translated">これらの引数（存在する場合）は、指定された &lt;code&gt;this&lt;/code&gt; 値に従い、ターゲット関数に渡される引数の先頭に挿入され、その後、呼び出されたときにバインドされた関数に渡される引数が続きます。</target>
        </trans-unit>
        <trans-unit id="42c8e79787069b6f572c221d974856e04924de96" translate="yes" xml:space="preserve">
          <source>These arguments count backwards from the end by &lt;code&gt;5&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;1&lt;/code&gt; to find the end index.</source>
          <target state="translated">これらの引数は、開始インデックスを見つけるために末尾から &lt;code&gt;5&lt;/code&gt; だけ逆方向にカウントし、終了インデックスを見つけるために末尾から &lt;code&gt;1&lt;/code&gt; ずつ逆方向にカウントします。</target>
        </trans-unit>
        <trans-unit id="c7f95be1daff8bb613e12808aacd684fe02e1320" translate="yes" xml:space="preserve">
          <source>These arguments customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations which ignore the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation-dependent.</source>
          <target state="translated">これらの引数は関数の動作をカスタマイズし、アプリケーションがフォーマット規則を使用する言語を指定できるようにします。 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 引数を無視する実装では、使用されるロケールと返される文字列の形式は完全に実装に依存します。</target>
        </trans-unit>
        <trans-unit id="23194fbe91023a3d742e7a70b01d6964ebbe7f8c" translate="yes" xml:space="preserve">
          <source>These differences are very subtle differences. It's possible that a test suite doesn't catch this kind of subtle difference. Careful review of your code base will probably be necessary to be sure these differences don't affect the semantics of your code. Fortunately, this careful review can be done gradually down the function granularity.</source>
          <target state="translated">これらの違いは非常に微妙な違いです。テストスイートがこの種の微妙な違いをキャッチしていない可能性があります。これらの違いがコードのセマンティクスに影響を与えないことを確認するためには、コードベースの慎重なレビューが必要になるでしょう。幸いなことに、この慎重なレビューは関数の粒度を徐々に下げていくことができます。</target>
        </trans-unit>
        <trans-unit id="7c06c6284f0ffaf0405fa11a8b8cc1d7f5522abc" translate="yes" xml:space="preserve">
          <source>These errors are good, because they reveal plain errors or bad practices. They occur before the code is running.</source>
          <target state="translated">これらのエラーは、明白なエラーや悪い習慣を明らかにするので、良いものです。これらのエラーはコードが実行される前に発生します。</target>
        </trans-unit>
        <trans-unit id="b14b84161f5524d3adb0fa6b6297bce8175bdd74" translate="yes" xml:space="preserve">
          <source>These examples will show you how to add hour cycle data to your &lt;a href=&quot;../locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">これらの例は、&lt;a href=&quot;../locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt;オブジェクトに時間サイクルデータを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="18942180c831ea71766358ab2ffac6c2e9f26c64" translate="yes" xml:space="preserve">
          <source>These flags are represented by a sequence of bits: DCBA. When a flag is &lt;em&gt;set&lt;/em&gt;, it has a value of 1. When a flag is &lt;em&gt;cleared&lt;/em&gt;, it has a value of 0. Suppose a variable &lt;code&gt;flags&lt;/code&gt; has the binary value 0101:</source>
          <target state="translated">これらのフラグはビットのシーケンスで表されます：DCBA。フラグが&lt;em&gt;設定され&lt;/em&gt;ている場合、値は1です。フラグが&lt;em&gt;クリアされ&lt;/em&gt;ている場合、値は0です。変数 &lt;code&gt;flags&lt;/code&gt; のバイナリ値が0101であるとします。</target>
        </trans-unit>
        <trans-unit id="7a8bbfc9a327eeeeb451f9c5c4ea38d87c6a7c23" translate="yes" xml:space="preserve">
          <source>These functions optionally take an &lt;code&gt;initialValue&lt;/code&gt; (which will be used as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;). However, if no initial value is provided, it will use the first element of the &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; as the initial value. This error is raised when an empty array is provided because no initial value can be returned in that case.</source>
          <target state="translated">これらの関数はオプションで、 &lt;code&gt;initialValue&lt;/code&gt; を受け取ります（これは、 &lt;code&gt;callback&lt;/code&gt; の最初の呼び出しの最初の引数として使用されます）。ただし、初期値が指定されていない場合は、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; の&lt;/a&gt;最初の要素が初期値として使用されます。この場合、初期値を返すことができないため、空の配列が提供されると、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d3ebf99aa1376aaab8e2544a1885be39b3c3454f" translate="yes" xml:space="preserve">
          <source>These global functions&amp;mdash;functions which are called globally rather than on an object&amp;mdash;directly return their results to the caller.</source>
          <target state="translated">これらのグローバル関数（オブジェクトではなくグローバルに呼び出される関数）は、その結果を呼び出し元に直接返します。</target>
        </trans-unit>
        <trans-unit id="be3662942b2e23e810fbcea86843f724a5380ee4" translate="yes" xml:space="preserve">
          <source>These global properties return a simple value; they have no properties or methods.</source>
          <target state="translated">これらのグローバル・プロパティは単純な値を返します。</target>
        </trans-unit>
        <trans-unit id="3eb980c6d99c1f5db9089a31df189593846fe7bf" translate="yes" xml:space="preserve">
          <source>These lines display the following:</source>
          <target state="translated">これらの行には以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="b875f200c113c3bad4e865d005ac933a288076a1" translate="yes" xml:space="preserve">
          <source>These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.</source>
          <target state="translated">これらのメソッドは、利用可能なHTMLタグと属性のサブセットを提供するだけなので、使用用途は限られています。</target>
        </trans-unit>
        <trans-unit id="e3ee9bd03f2c6bfdada06f10486463c886ffa413" translate="yes" xml:space="preserve">
          <source>These methods do not modify the array and return some representation of the array.</source>
          <target state="translated">これらのメソッドは配列を変更せず、配列の何らかの表現を返します。</target>
        </trans-unit>
        <trans-unit id="cca597257f192f0edcd8d3eb2d971b0102febe49" translate="yes" xml:space="preserve">
          <source>These methods modify the array:</source>
          <target state="translated">これらのメソッドは配列を変更します。</target>
        </trans-unit>
        <trans-unit id="dddf9337efe3c3b9762a99aafc56201b0dedb279" translate="yes" xml:space="preserve">
          <source>These objects represent and interact with structured data buffers and data coded using JavaScript Object Notation (JSON).</source>
          <target state="translated">これらのオブジェクトは、構造化されたデータバッファやJavaScript Object Notation (JSON)を使用してコード化されたデータを表現し、それらと対話します。</target>
        </trans-unit>
        <trans-unit id="6c51b197bb3602dd2f9ac7530edbb1a23d06ee30" translate="yes" xml:space="preserve">
          <source>These objects represent collections of data which are ordered by an index value. This includes (typed) arrays and array-like constructs.</source>
          <target state="translated">これらのオブジェクトは、インデックス値によって順序付けられたデータの集合を表します。これには、(型付きの)配列や配列のような構造体が含まれます。</target>
        </trans-unit>
        <trans-unit id="5a5c5cf351e08162c242dffe9e27358c69a77ce6" translate="yes" xml:space="preserve">
          <source>These objects represent collections which use keys; these contain elements which are iterable in the order of insertion.</source>
          <target state="translated">これらのオブジェクトはキーを使用するコレクションを表します。</target>
        </trans-unit>
        <trans-unit id="be1ed535f65e43f334e953098d706e7033065d61" translate="yes" xml:space="preserve">
          <source>These objects represent strings and support manipulating them.</source>
          <target state="translated">これらのオブジェクトは文字列を表現し、その操作をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a5000062ebcb72866a9718df3463c1a4fa8f41d9" translate="yes" xml:space="preserve">
          <source>These problems can be solved in two different ways.</source>
          <target state="translated">これらの問題は、2つの方法で解決することができます。</target>
        </trans-unit>
        <trans-unit id="f94c0ced3a3d7721fcab4e3332633670789cbf8e" translate="yes" xml:space="preserve">
          <source>These properties can be used in the replacement text for the &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.replace&lt;/code&gt;&lt;/a&gt; method. When used this way, do not prepend them with &lt;code&gt;RegExp&lt;/code&gt;. The example below illustrates this. When parentheses are not included in the regular expression, the script interprets &lt;code&gt;$n&lt;/code&gt;'s literally (where &lt;code&gt;n&lt;/code&gt; is a positive integer).</source>
          <target state="translated">これらのプロパティは、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.replace&lt;/code&gt; &lt;/a&gt;メソッドの置換テキストで使用できます。このように使用する場合は、それらの前に &lt;code&gt;RegExp&lt;/code&gt; を付けないでください。以下の例はこれを示しています。正規表現に括弧が含まれていない場合、スクリプトは &lt;code&gt;$n&lt;/code&gt; 文字通りに解釈します（ &lt;code&gt;n&lt;/code&gt; は正の整数です）。</target>
        </trans-unit>
        <trans-unit id="aac36ff9b0b311c2538349f2b1b05f49629e4853" translate="yes" xml:space="preserve">
          <source>These values have the following meanings:</source>
          <target state="translated">これらの値は以下の意味を持っています。</target>
        </trans-unit>
        <trans-unit id="9a9946bdc385aabfb76bc69f8808fede478b2fa9" translate="yes" xml:space="preserve">
          <source>They are of limited use, as they provide only a subset of the available HTML tags and attributes.</source>
          <target state="translated">これらは、利用可能なHTMLタグや属性のサブセットを提供するだけなので、利用は限られています。</target>
        </trans-unit>
        <trans-unit id="d3a587c858faebaf0b4716171b0d9144af89cc8c" translate="yes" xml:space="preserve">
          <source>They may be mixed in arrays and sorted:</source>
          <target state="translated">それらは配列に混ぜて並べ替えてもよい。</target>
        </trans-unit>
        <trans-unit id="1bcb29680b8ba21cacb23cbd3cd454ddff5f16ef" translate="yes" xml:space="preserve">
          <source>They were called &quot;template strings&quot; in prior editions of the ES2015 specification.</source>
          <target state="translated">これらは、ES2015仕様の以前のエディションでは「テンプレート文字列」と呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="babef9389b45b02009b9150991ba15ce9ad6f6ee" translate="yes" xml:space="preserve">
          <source>Third example: Appending a chain to the Function.prototype object and appending a new function to that chain</source>
          <target state="translated">3つ目の例。Function.prototypeオブジェクトにチェーンを追加し、そのチェーンに新しい関数を追加します。</target>
        </trans-unit>
        <trans-unit id="78207ad5ecdb11b4b012586ec80cedacc9d1ec75" translate="yes" xml:space="preserve">
          <source>Third, &lt;code&gt;arguments.callee&lt;/code&gt; is no longer supported. In normal code &lt;code&gt;arguments.callee&lt;/code&gt; refers to the enclosing function. This use case is weak: simply name the enclosing function! Moreover, &lt;code&gt;arguments.callee&lt;/code&gt; substantially hinders optimizations like inlining functions, because it must be made possible to provide a reference to the un-inlined function if &lt;code&gt;arguments.callee&lt;/code&gt; is accessed. &lt;code&gt;arguments.callee&lt;/code&gt; for strict mode functions is a non-deletable property which throws an error when set or retrieved:</source>
          <target state="translated">3番目に、 &lt;code&gt;arguments.callee&lt;/code&gt; はサポートされなくなりました。通常のコードでは、 &lt;code&gt;arguments.callee&lt;/code&gt; は囲んでいる関数を指します。この使用例は弱いです：単に囲む関数に名前を付けてください！また、 &lt;code&gt;arguments.callee&lt;/code&gt; のは、実質的にあれば非インライン関数への参照を提供することが可能となされなければならないので、関数をインライン展開ような最適化を妨げる &lt;code&gt;arguments.callee&lt;/code&gt; のがアクセスされます。ストリクトモード関数の &lt;code&gt;arguments.callee&lt;/code&gt; は、設定または取得時にエラーをスローする削除不可のプロパティです。</target>
        </trans-unit>
        <trans-unit id="a968b5b6e8588988f5a74e8a5155d1a4b027f828" translate="yes" xml:space="preserve">
          <source>Third, &lt;code&gt;arguments&lt;/code&gt; for strict mode functions no longer provide access to the corresponding function call's variables. In some old ECMAScript implementations &lt;code&gt;arguments.caller&lt;/code&gt; was an object whose properties aliased variables in that function. This is a &lt;a href=&quot;http://stuff.mit.edu/iap/2008/facebook/&quot;&gt;security hazard&lt;/a&gt; because it breaks the ability to hide privileged values via function abstraction; it also precludes most optimizations. For these reasons no recent browsers implement it. Yet because of its historical functionality, &lt;code&gt;arguments.caller&lt;/code&gt; for a strict mode function is also a non-deletable property which throws when set or retrieved:</source>
          <target state="translated">第3に、ストリクトモード関数の &lt;code&gt;arguments&lt;/code&gt; は、対応する関数呼び出しの変数へのアクセスを提供しなくなりました。一部の古いECMAScript実装では、 &lt;code&gt;arguments.caller&lt;/code&gt; は、そのプロパティがその関数の変数にエイリアスを付けるオブジェクトでした。これは、関数の抽象化によって特権値を非表示にする機能を破壊するため、&lt;a href=&quot;http://stuff.mit.edu/iap/2008/facebook/&quot;&gt;セキュリティ上の危険&lt;/a&gt;です。また、ほとんどの最適化ができなくなります。これらの理由により、最近のブラウザはそれを実装していません。しかし、その歴史的な機能により、厳密モード関数の &lt;code&gt;arguments.caller&lt;/code&gt; も、設定または取得されたときにスローされる削除不可のプロパティです。</target>
        </trans-unit>
        <trans-unit id="f0bf4f0e82effc2fcdfbd0bafd2806f94fa53428" translate="yes" xml:space="preserve">
          <source>Third, strict mode forbids deleting plain names. &lt;code&gt;delete name&lt;/code&gt; in strict mode is a syntax error:</source>
          <target state="translated">第3に、ストリクトモードでは、プレーンネームの削除が禁止されています。ストリクトモードでの &lt;code&gt;delete name&lt;/code&gt; は構文エラーです。</target>
        </trans-unit>
        <trans-unit id="ff008ff7ee98b437d5c1a16b7ee7b658db491651" translate="yes" xml:space="preserve">
          <source>Third, strict mode makes attempts to delete undeletable properties throw (where before the attempt would simply have no effect):</source>
          <target state="translated">第三に、strict モードでは、削除不可能なプロパティを削除しようとする試みがスローされます (以前の試みは単に何の効果もありません)。</target>
        </trans-unit>
        <trans-unit id="7c10bb714d54c5d432d668317715e557bddcd5c9" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; doesn't support symbol properties, since ES5 doesn't have symbols anyway:</source>
          <target state="translated">ES5にはシンボルが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;含まれて&lt;/a&gt;いないため、このポリフィルはシンボルプロパティをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="7ddedacdb98faa51edf3865ceeff542d95ca3174" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://gist.github.com/384583&quot;&gt;Polyfill&lt;/a&gt; offers &lt;code&gt;watch&lt;/code&gt; to all ES5 compatible browsers.</source>
          <target state="translated">この&lt;a href=&quot;https://gist.github.com/384583&quot;&gt;ポリフィル&lt;/a&gt;は、すべてのES5互換ブラウザーに &lt;code&gt;watch&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="c93fa53d0bbd47a3db878d767ffa2e7c1648219a" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; doesn't support symbol properties, since ES5 doesn't have symbols anyway:</source>
          <target state="translated">ES5にはシンボルがないため、この&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;ポリフィル&lt;/a&gt;はシンボルプロパティをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="be206cd04ed5688a80c6141f96aa0b59a1e416bd" translate="yes" xml:space="preserve">
          <source>This Polyfill emulates the &lt;code&gt;Math.log2&lt;/code&gt; function. Note that it returns imprecise values on some inputs (like 1 &amp;lt;&amp;lt; 29), wrap into &lt;a href=&quot;round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt; if working with bit masks.</source>
          <target state="translated">このポリフィルは、 &lt;code&gt;Math.log2&lt;/code&gt; 関数をエミュレートします。一部の入力（1 &amp;lt;&amp;lt; 29など）では不正確な値を返すことに注意してください。ビットマスクを使用している場合は、&lt;a href=&quot;round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; に&lt;/a&gt;ラップします。</target>
        </trans-unit>
        <trans-unit id="8478709ca6177e7dab3cebb15cdc3fdc64b4ab4d" translate="yes" xml:space="preserve">
          <source>This Symbol is used for &lt;a href=&quot;../string/matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt; and specifically in &lt;a href=&quot;../regexp/@@matchall&quot;&gt;&lt;code&gt;RegExp.prototype[@@matchAll]()&lt;/code&gt;&lt;/a&gt;. The following two examples return same result:</source>
          <target state="translated">このシンボルは、&lt;a href=&quot;../string/matchall&quot;&gt; &lt;code&gt;String.prototype.matchAll()&lt;/code&gt; &lt;/a&gt;、特に&lt;a href=&quot;../regexp/@@matchall&quot;&gt; &lt;code&gt;RegExp.prototype[@@matchAll]()&lt;/code&gt; &lt;/a&gt;ます。次の2つの例は、同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="b2049c2c2e9560624c110069b0ab4063f7b90969" translate="yes" xml:space="preserve">
          <source>This algorithm is exactly the one specified in ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このアルゴリズムは、&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が元の値を持ち、 &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;.call&lt;/code&gt; .callが&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; の&lt;/a&gt;元の値に評価されると仮定すると、ECMA-262、&lt;sup&gt;第&lt;/sup&gt;5版で指定されたものとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="17fdf255bf97502cb62fe16d12b782c79ab82346" translate="yes" xml:space="preserve">
          <source>This algorithm is exactly the one specified in ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition, assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values, and that &lt;code&gt;&lt;var&gt;callbackfn&lt;/var&gt;.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このアルゴリズムは、 &lt;code&gt;Object&lt;/code&gt; と &lt;code&gt;TypeError&lt;/code&gt; が元の値を持ち、 &lt;code&gt;&lt;var&gt;callbackfn&lt;/var&gt;.call&lt;/code&gt; .callが&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; の&lt;/a&gt;元の値に評価されると仮定すると、ECMA-262、&lt;sup&gt;第&lt;/sup&gt;5版で指定されたものとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="5509417f952d62bdba51aef5570b1804b8848367" translate="yes" xml:space="preserve">
          <source>This also demonstrates how the &lt;code&gt;exports&lt;/code&gt; property is used to access exported functions.</source>
          <target state="translated">これは、 &lt;code&gt;exports&lt;/code&gt; プロパティを使用してエクスポートされた関数にアクセスする方法も示しています。</target>
        </trans-unit>
        <trans-unit id="4efcdb18d1efa4766385565fe5c67ab4d0d28148" translate="yes" xml:space="preserve">
          <source>This also makes it possible to mix locale and calendar in both &lt;code&gt;format&lt;/code&gt;:</source>
          <target state="translated">これにより、ロケールとカレンダーを両方の &lt;code&gt;format&lt;/code&gt; で混在させることもできます。</target>
        </trans-unit>
        <trans-unit id="bd5220bea55e1a743b859d6d37204563a0636619" translate="yes" xml:space="preserve">
          <source>This also outputs &quot;value&quot;, since both foo and bar are converted to the same string. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScript engine, this string would be &quot;['object Object']&quot;.</source>
          <target state="translated">fooとbarの両方が同じ文字列に変換されるため、これも「値」を出力します。で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkeyの&lt;/a&gt; JavaScriptエンジンは、この文字列は「[ 『オブジェクトオブジェクト』]」になります。</target>
        </trans-unit>
        <trans-unit id="987e22c0bf5a3bdeaa9ce39fd36c228ec1917bab" translate="yes" xml:space="preserve">
          <source>This also outputs &lt;code&gt;'value'&lt;/code&gt;, since both &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;bar&lt;/var&gt;&lt;/code&gt; are converted to the same string.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;bar&lt;/var&gt;&lt;/code&gt; の両方が同じ文字列に変換されるため、これも &lt;code&gt;'value'&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="8c0e7165561b6758ccd2e215912b9ccb5a001691" translate="yes" xml:space="preserve">
          <source>This approach means that any mutating operation that throws an exception on failure to mutate, must create the exception itself.</source>
          <target state="translated">このアプローチは、突然変異に失敗したときに例外を投げる突然変異操作は、例外自体を生成しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="43e3ab0dc2fac9991fde806932764fcc7d178e23" translate="yes" xml:space="preserve">
          <source>This article aims at providing guidance for developers.</source>
          <target state="translated">この記事は、開発者のためのガイダンスを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="9626b764e08efbd935cba08ae43dfb975f652917" translate="yes" xml:space="preserve">
          <source>This behavior does not apply to &lt;code&gt;Boolean&lt;/code&gt; primitives. For example, the condition in the following &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement evaluates to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">この動作は &lt;code&gt;Boolean&lt;/code&gt; プリミティブには適用されません。たとえば、次の&lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;ステートメントの条件は &lt;code&gt;false&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="a7d9211767c7428f9136180953a4195577a05ab3" translate="yes" xml:space="preserve">
          <source>This can be achieved with a combination of &lt;a href=&quot;math/random&quot;&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">これは、&lt;a href=&quot;math/random&quot;&gt; &lt;code&gt;Math.random()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; の&lt;/a&gt;組み合わせで実現できます。</target>
        </trans-unit>
        <trans-unit id="54a8582be47d36134e44af859785bba94f93d79c" translate="yes" xml:space="preserve">
          <source>This can be achieved with the &quot;export from&quot; syntax:</source>
          <target state="translated">これは &quot;export from &quot;構文で実現できます。</target>
        </trans-unit>
        <trans-unit id="3ad291aa4d8ee431b14c569c6df3b5210c4b79f9" translate="yes" xml:space="preserve">
          <source>This can be converted to the following expression:</source>
          <target state="translated">これを次の式に変換することができます。</target>
        </trans-unit>
        <trans-unit id="93b25c64a2bb1e288bd99c8fbe5b8bafb815e7e5" translate="yes" xml:space="preserve">
          <source>This can be emulated using the following function:</source>
          <target state="translated">これは、以下の関数を使用してエミュレートすることができます。</target>
        </trans-unit>
        <trans-unit id="f926f626ea1e32d2d481952e313cfa41dc28e854" translate="yes" xml:space="preserve">
          <source>This can be emulated with the following function, if &lt;a href=&quot;../float32array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; are supported:</source>
          <target state="translated">&lt;a href=&quot;../float32array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;がサポートされている場合、これは次の関数でエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="d21f00b36784c0aeb2b851d770e82cc575dfd3b1" translate="yes" xml:space="preserve">
          <source>This can be emulated with the following function:</source>
          <target state="translated">これは以下の関数でエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="f0fc43e5f46c538b39638bfb56ef17a17afaac04" translate="yes" xml:space="preserve">
          <source>This can be emulated with the help of the &lt;a href=&quot;exp&quot;&gt;&lt;code&gt;Math.exp()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">これは、&lt;a href=&quot;exp&quot;&gt; &lt;code&gt;Math.exp()&lt;/code&gt; &lt;/a&gt;関数を使用してエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="1caecfd92674232e7963c8708a5db376087af9c3" translate="yes" xml:space="preserve">
          <source>This can be encountered when:</source>
          <target state="translated">といった場合に遭遇することがあります。</target>
        </trans-unit>
        <trans-unit id="d2878f6477ef171927dfb7b63ee15513ab49a0e4" translate="yes" xml:space="preserve">
          <source>This can be fixed by storing the value in another property. In &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods, &lt;code&gt;this&lt;/code&gt; points to the object which is used to access or modify the property.</source>
          <target state="translated">これは、値を別のプロパティに格納することで修正できます。で &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; 方法、 &lt;code&gt;this&lt;/code&gt; アクセスに使用されるか、またはプロパティを変更されたオブジェクトをポイント。</target>
        </trans-unit>
        <trans-unit id="51f3d4ad0e5f37ef073bfc1c74f290b696b1da36" translate="yes" xml:space="preserve">
          <source>This can lead to unexpected behaviour when using &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">使用するとき、これは予期しない動作につながることができ &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff188149c29647cce77538db186dd9251c7514cb" translate="yes" xml:space="preserve">
          <source>This can lead to unexpected behaviour when using &lt;code&gt;this&lt;/code&gt;. In the following example &lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;Derived&lt;/code&gt; class (not the &lt;code&gt;Base&lt;/code&gt; class) when we try to call &lt;code&gt;Derived.publicStaticMethod2()&lt;/code&gt;, and thus exhibits the same &quot;provenance restriction&quot; as mentioned above:</source>
          <target state="translated">使用するとき、これは予期しない動作につながることができ &lt;code&gt;this&lt;/code&gt; 。次の例では、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;Derived.publicStaticMethod2()&lt;/code&gt; を呼び出そうとしたときに、 &lt;code&gt;Derived&lt;/code&gt; クラス（ &lt;code&gt;Base&lt;/code&gt; クラスではない）を参照しているため、上記と同じ「来歴制限」を示します。</target>
        </trans-unit>
        <trans-unit id="8637424076e7fdfeee1e684695bee835d9c5b29c" translate="yes" xml:space="preserve">
          <source>This capability is similar to features present in languages such as Perl and Python.</source>
          <target state="translated">この機能は、PerlやPythonなどの言語に存在する機能に似ています。</target>
        </trans-unit>
        <trans-unit id="f270662d770728da9dd5f30c95435fca6101409c" translate="yes" xml:space="preserve">
          <source>This change should be backwards-compatible as long as you pass the result of &lt;code&gt;JSON.stringify&lt;/code&gt; to APIs such as &lt;code&gt;JSON.parse&lt;/code&gt; that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves. &lt;em&gt;Only&lt;/em&gt; if you are directly interpreting the result of &lt;code&gt;JSON.stringify&lt;/code&gt; do you need to carefully handle &lt;code&gt;JSON.stringify&lt;/code&gt;'s two possible encodings of these code points.</source>
          <target state="translated">この変更は、 &lt;code&gt;JSON.stringify&lt;/code&gt; の結果を有効なJSONテキストを受け入れる &lt;code&gt;JSON.parse&lt;/code&gt; などのAPIに渡す限り、下位互換性があります。これは、単独のサロゲートのUnicodeエスケープを単独のサロゲート自体と同一として扱うためです。&lt;em&gt;唯一の&lt;/em&gt;あなたが直接の結果を解釈している場合 &lt;code&gt;JSON.stringify&lt;/code&gt; を慎重に処理する必要がない &lt;code&gt;JSON.stringify&lt;/code&gt; これらのコード・ポイントのの2つの可能なエンコーディングを。</target>
        </trans-unit>
        <trans-unit id="52ec415c21656b4e1b8e73732c50ced79b4f1a06" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;JavaScript standard built-in objects&lt;/a&gt;, along with their methods and properties.</source>
          <target state="translated">この章では、すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;JavaScript標準組み込みオブジェクト&lt;/a&gt;と、それらのメソッドおよびプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="a0489c62937cfb2364acc83ca2a1245aa5088fbc" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;JavaScript expressions and operators&lt;/a&gt;.</source>
          <target state="translated">この章では、すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;JavaScript式と演算子について説明し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cb18bdfe69d338a2e163b4a1ab159bf54053304d" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements and declarations&lt;/a&gt;.</source>
          <target state="translated">この章では、すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScriptステートメントと宣言について説明し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1946293170999b6370e4a8efc4bfc761c8dc2309" translate="yes" xml:space="preserve">
          <source>This chapter documents all the JavaScript language operators, expressions and keywords.</source>
          <target state="translated">この章では、JavaScript言語のすべての演算子、式、キーワードについて説明します。</target>
        </trans-unit>
        <trans-unit id="2d3db99e9899796f2e575c3e83689ed0ea4faaa0" translate="yes" xml:space="preserve">
          <source>This chapter documents all the JavaScript standard built-in objects, along with their methods and properties.</source>
          <target state="translated">この章では、すべてのJavaScript標準の組み込みオブジェクトと、そのメソッドとプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="8ea2390318cc20ce6263f76f13a6bae75bcc9bf0" translate="yes" xml:space="preserve">
          <source>This chapter documents how to work with &lt;a href=&quot;functions&quot;&gt;JavaScript functions&lt;/a&gt; to develop your applications.</source>
          <target state="translated">この章では、&lt;a href=&quot;functions&quot;&gt;JavaScript関数&lt;/a&gt;を使用してアプリケーションを開発する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="ab3c71a069164684e41148766021ad5ff5657de9" translate="yes" xml:space="preserve">
          <source>This code can be run under NodeJS. Comprehension is enhanced by seeing the errors actually occur. To force more errors, change the &lt;code&gt;threshold&lt;/code&gt; values.</source>
          <target state="translated">このコードはNodeJSで実行できます。エラーが実際に発生するのを確認することで、理解が深まります。より多くのエラーを強制するには、 &lt;code&gt;threshold&lt;/code&gt; 変更します。</target>
        </trans-unit>
        <trans-unit id="62359e7e1c67ff757c79cb13ebfa480bbfeddf35" translate="yes" xml:space="preserve">
          <source>This code fails, as the equal sign can't be used this way in this object initializer syntax.</source>
          <target state="translated">このコードは、このオブジェクトの初期化構文では等号をこのように使用できないため、失敗します。</target>
        </trans-unit>
        <trans-unit id="e93d09fba02a1fa5bed87320e7d4bb9906dcbc5d" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;classes sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;).</source>
          <target state="translated">このコードスニペットは、&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;クラスのサンプル&lt;/a&gt;（&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;）から抜粋したものです。</target>
        </trans-unit>
        <trans-unit id="f2ceb2ebf615c7ca60bc60dad3b8703a4ff16b94" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;classes sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;). Here &lt;code&gt;super()&lt;/code&gt; is called to avoid duplicating the constructor parts' that are common between &lt;code&gt;Rectangle&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;.</source>
          <target state="translated">このコードスニペットは、&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;クラスのサンプル&lt;/a&gt;（&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;）から抜粋したものです。ここで &lt;code&gt;super()&lt;/code&gt; が呼び出され、 &lt;code&gt;Rectangle&lt;/code&gt; と &lt;code&gt;Square&lt;/code&gt; の間で共通するコンストラクター部分の重複を回避しています。</target>
        </trans-unit>
        <trans-unit id="86727df284471763d7a0565fcf32b92e27198e51" translate="yes" xml:space="preserve">
          <source>This code will now output &lt;code&gt;hello&lt;/code&gt; in the console as it should, without any errors at all.</source>
          <target state="translated">このコードは、エラーなしで、コンソールに &lt;code&gt;hello&lt;/code&gt; を出力するようになりました。</target>
        </trans-unit>
        <trans-unit id="07a0c0a1c5279be7ca0fcebe7c55e2d76317b6a4" translate="yes" xml:space="preserve">
          <source>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do &lt;strong&gt;not&lt;/strong&gt; become properties of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; object, unlike &lt;a href=&quot;var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; variables.</source>
          <target state="translated">この宣言は、スコープが宣言されたブロックに対してグローバルまたはローカルのいずれかである定数を作成します。&lt;a href=&quot;var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt;変数とは異なり、グローバル定数は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt;オブジェクトのプロパティにはなりませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="acecf8c55497d383f08519c6b9f28ff9d6bb0d15" translate="yes" xml:space="preserve">
          <source>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the window object, unlike &lt;code&gt;&lt;a href=&quot;var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; variables. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).</source>
          <target state="translated">この宣言は、スコープが宣言されたブロックに対してグローバルまたはローカルのいずれかになる定数を作成します。 &lt;code&gt;&lt;a href=&quot;var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 変数とは異なり、グローバル定数はウィンドウオブジェクトのプロパティにはなりません。定数の初期化子が必要です。つまり、その値は宣言されているのと同じステートメントで指定する必要があります（後で変更できないことを考えると、これは理にかなっています）。</target>
        </trans-unit>
        <trans-unit id="bad3d863e88d4e3c25abb04fb7e467e62f6e75c5" translate="yes" xml:space="preserve">
          <source>This definition supersedes the definition provided in ECMA-262.</source>
          <target state="translated">この定義は、ECMA-262に規定されている定義に優先する。</target>
        </trans-unit>
        <trans-unit id="6f968fc9ccc244f1b76b93c6844d3619a51936f4" translate="yes" xml:space="preserve">
          <source>This demonstrates that it matters only that the function was invoked from the &lt;code&gt;f&lt;/code&gt; member of &lt;code&gt;o&lt;/code&gt;.</source>
          <target state="translated">これは、関数が &lt;code&gt;o&lt;/code&gt; の &lt;code&gt;f&lt;/code&gt; メンバーから呼び出されたことだけが重要であることを示しています。</target>
        </trans-unit>
        <trans-unit id="0bda21ee36aa642cf18c3b46156646dc4fb2bfea" translate="yes" xml:space="preserve">
          <source>This differs from ECMAScript 3, which discouraged but allowed octal interpretation.</source>
          <target state="translated">これは、8進数の解釈を許可していたECMAScript 3とは異なります。</target>
        </trans-unit>
        <trans-unit id="b2458fde30306d280c6f35c49d963363652697ca" translate="yes" xml:space="preserve">
          <source>This differs from ECMAScript 3, which merely &lt;em&gt;discouraged&lt;/em&gt; (but allowed) octal interpretation.</source>
          <target state="translated">これは、8進数の解釈を単に&lt;em&gt;推奨しない&lt;/em&gt;（ただし許可する）ECMAScript3とは異なります。</target>
        </trans-unit>
        <trans-unit id="1519bf6763aba2fd7a8258fc6d70b97467e733a1" translate="yes" xml:space="preserve">
          <source>This displays &quot;Smith, John&quot;.</source>
          <target state="translated">Smith,John」と表示されます。</target>
        </trans-unit>
        <trans-unit id="ed5511f2421466f5e03a5a0b0c9360e0ff60283a" translate="yes" xml:space="preserve">
          <source>This displays &lt;code&gt;&quot;Smith, John&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;Smith, John&quot;&lt;/code&gt; 表示されます。</target>
        </trans-unit>
        <trans-unit id="06ee698241a832f0c35ecf961e5a598b1cb373fd" translate="yes" xml:space="preserve">
          <source>This does the exact same thing as the previous example.</source>
          <target state="translated">これは先ほどの例と全く同じことをしています。</target>
        </trans-unit>
        <trans-unit id="1102d84b7d189298ca2a49c889e5b503912a712c" translate="yes" xml:space="preserve">
          <source>This effectively means the dot will match any character on the Unicode Basic Multilingual Plane (BMP). To allow it to match astral characters, the &quot;&lt;code&gt;u&lt;/code&gt;&quot; (unicode) flag should be used. Using both flags in conjunction allows the dot to match any Unicode character, without exceptions.</source>
          <target state="translated">これは事実上、ドットがUnicode Basic Multilingual Plane（BMP）上の任意の文字と一致することを意味します。アストラル文字と一致させるには、「 &lt;code&gt;u&lt;/code&gt; 」（ユニコード）フラグを使用する必要があります。両方のフラグを組み合わせて使用​​すると、ドットを例外なく任意のUnicode文字に一致させることができます。</target>
        </trans-unit>
        <trans-unit id="2e9c0a635918e3c9d07d290025ea86eea4026e4c" translate="yes" xml:space="preserve">
          <source>This ensures the return value of &lt;code&gt;doSomething&lt;/code&gt; changing from &lt;code&gt;undefined&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will not change the behavior of this code.</source>
          <target state="translated">これは、の戻り値が保証 &lt;code&gt;doSomething&lt;/code&gt; から変更 &lt;code&gt;undefined&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; 、このコードの動作を変更しません。</target>
        </trans-unit>
        <trans-unit id="911d9f9d45b91545c221c3486eeb449728c67558" translate="yes" xml:space="preserve">
          <source>This error can occur easily when not escaping strings properly and the JavaScript engine is expecting the end of your string already. For example:</source>
          <target state="translated">このエラーは、文字列を適切にエスケープしておらず、JavaScriptエンジンがすでに文字列の末尾を期待している場合に簡単に発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0201c0b7ba051d29f8ca6584a85c6705befd0c09" translate="yes" xml:space="preserve">
          <source>This error happens only in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the assignment is silently ignored.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;strictモードのコードで&lt;/a&gt;のみ発生します。非厳密なコードでは、割り当ては警告なしで無視されます。</target>
        </trans-unit>
        <trans-unit id="096835feb91d9ff6a57e922f78bbdd190711d6fd" translate="yes" xml:space="preserve">
          <source>This error happens only in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the operation returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;strictモードのコードで&lt;/a&gt;のみ発生します。厳密でないコードでは、操作は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1a0e3ad44d95312052d97db9a3a1d9c7cc2d5f29" translate="yes" xml:space="preserve">
          <source>This error occurs as a warning in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt; only. In non-strict code, the redeclaration is silently ignored.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;厳格モードのコードで&lt;/a&gt;のみ警告として発生します。厳格でないコードでは、再宣言は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="bbd89c12b15d7bbad4f26beb179fde8bbe893186" translate="yes" xml:space="preserve">
          <source>This error only happens in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the operation just returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../strict_mode&quot;&gt;厳格モードのコード&lt;/a&gt;でのみ発生します。非厳密なコードでは、操作は単に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bb2f48d817f97074af67cc74fa3d8ccee5fee9f0" translate="yes" xml:space="preserve">
          <source>This even applies to functions and variables:</source>
          <target state="translated">これは関数や変数にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="0418362082cc8bf02ccf057b5001fec07604aec0" translate="yes" xml:space="preserve">
          <source>This example counts backwards from the end of the string by &lt;code&gt;11&lt;/code&gt; to find the start index and forwards from the start of the string by &lt;code&gt;16&lt;/code&gt; to find the end index.</source>
          <target state="translated">この例では、文字列の末尾から &lt;code&gt;11&lt;/code&gt; ずつ逆方向にカウントして開始インデックスを見つけ、文字列の先頭から &lt;code&gt;16&lt;/code&gt; ずつ順方向にカウントして終了インデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="e0ad76db7e3ffc323f896f6c610ff40d7b05bede" translate="yes" xml:space="preserve">
          <source>This example defines a function that concatenates several strings. The function's only formal argument is a string containing the characters that separate the items to concatenate.</source>
          <target state="translated">この例では、複数の文字列を連結する関数を定義しています。この関数の唯一の形式的な引数は、連結する項目を区切る文字を含む文字列です。</target>
        </trans-unit>
        <trans-unit id="90f25031bc45dce7cbb8e9209d0d66425c578957" translate="yes" xml:space="preserve">
          <source>This example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is &quot;&lt;code&gt;u&lt;/code&gt;&quot; if the list is to be &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;unordered (bulleted)&lt;/a&gt;, or &quot;&lt;code&gt;o&lt;/code&gt;&quot; if the list is to be &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt;ordered (numbered)&lt;/a&gt;. The function is defined as follows:</source>
          <target state="translated">この例では、リストのHTMLを含む文字列を作成する関数を定義します。関数の唯一の正式な引数は、リストを&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;順序付けしない（箇条書き）&lt;/a&gt;場合は「 &lt;code&gt;u&lt;/code&gt; 」、リストを順序付け&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt;する（番号を付ける）&lt;/a&gt;場合は「 &lt;code&gt;o&lt;/code&gt; 」の文字列です。関数は次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="73a7c3b2b05f6ed743c9e09f0bd5e66a60a75b6f" translate="yes" xml:space="preserve">
          <source>This example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is &quot;&lt;code&gt;u&lt;/code&gt;&quot; if the list is to be unordered (bulleted), or &quot;&lt;code&gt;o&lt;/code&gt;&quot; if the list is to be ordered (numbered). The function is defined as follows:</source>
          <target state="translated">この例では、リストのHTMLを含む文字列を作成する関数を定義しています。関数の唯一の仮引数は、リストを順序付けしない（箇条書き）場合は「 &lt;code&gt;u&lt;/code&gt; 」、リストを順序付けする（番号付き）場合は「 &lt;code&gt;o&lt;/code&gt; 」である文字列です。関数は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="bf75ffc93a3f734d878ab27162b4c36ee16bc2c6" translate="yes" xml:space="preserve">
          <source>This example demonstrates how one can separate out Unicode characters from a word.</source>
          <target state="translated">この例では、単語から Unicode 文字をどのように分離するかを示しています。</target>
        </trans-unit>
        <trans-unit id="871c98d30147b459568b64391ee95744afc6f560" translate="yes" xml:space="preserve">
          <source>This example demonstrates that &lt;code&gt;Baz.prototype&lt;/code&gt;, &lt;code&gt;Bar.prototype&lt;/code&gt;, &lt;code&gt;Foo.prototype&lt;/code&gt; and &lt;code&gt;Object.prototype&lt;/code&gt; exist in the prototype chain for object &lt;code&gt;baz&lt;/code&gt;:</source>
          <target state="translated">この例は、 &lt;code&gt;Baz.prototype&lt;/code&gt; 、 &lt;code&gt;Bar.prototype&lt;/code&gt; 、 &lt;code&gt;Foo.prototype&lt;/code&gt; および &lt;code&gt;Object.prototype&lt;/code&gt; がオブジェクト &lt;code&gt;baz&lt;/code&gt; のプロトタイプチェーンに存在することを示しています。</target>
        </trans-unit>
        <trans-unit id="5cfd66d3f85028f1818634da1d4c6321fd88e0c9" translate="yes" xml:space="preserve">
          <source>This example displays the following output (comments added for reference):</source>
          <target state="translated">この例では、以下のような出力が表示されます(参考のためにコメントを追加しました)。</target>
        </trans-unit>
        <trans-unit id="47851f66673ccc14ec0754c46428b69ca2e0999f" translate="yes" xml:space="preserve">
          <source>This example displays the following output:</source>
          <target state="translated">この例では、以下のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="1a2e7cbddcea7b49fd155d4d8b4a95f64e4d1074" translate="yes" xml:space="preserve">
          <source>This example extends the built-in &lt;a href=&quot;../global_objects/date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object. This example is extracted from this &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt;.</source>
          <target state="translated">この例では、組み込みの&lt;a href=&quot;../global_objects/date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトを拡張しています。この例は、この&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;ライブデモ&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;（ソース）&lt;/a&gt;から抽出されます。</target>
        </trans-unit>
        <trans-unit id="09e17c7f0dca3ac4b5a7ef196f654212d4264e30" translate="yes" xml:space="preserve">
          <source>This example first creates an async iterable for a stream of data, then uses it to find the size of the response from the API.</source>
          <target state="translated">この例では、まずデータのストリームに対して非同期のイテレータブルを作成し、それを使用して API からのレスポンスのサイズを見つけます。</target>
        </trans-unit>
        <trans-unit id="3c0cb82830ca1098ba1b0b5512fa2c2036073c25" translate="yes" xml:space="preserve">
          <source>This example is started by clicking the button. (You need a browser that supports &lt;code&gt;Promise&lt;/code&gt;. )</source>
          <target state="translated">この例は、ボタンをクリックすることから始まります。（ &lt;code&gt;Promise&lt;/code&gt; をサポートするブラウザが必要です。）</target>
        </trans-unit>
        <trans-unit id="0bd856e759126f7feb000d22a885f2704c020494" translate="yes" xml:space="preserve">
          <source>This example is started by clicking the button. You need a browser that supports &lt;code&gt;Promise&lt;/code&gt;. By clicking the button several times in a short amount of time, you'll even see the different promises being fulfilled one after another.</source>
          <target state="translated">この例は、ボタンをクリックすることから始まります。 &lt;code&gt;Promise&lt;/code&gt; をサポートするブラウザが必要です。ボタンを短時間で数回クリックすることにより、さまざまな約束が次々と満たされていることもわかります。</target>
        </trans-unit>
        <trans-unit id="edbfc7964d60aa14322d5d4e406d8655ff32dd06" translate="yes" xml:space="preserve">
          <source>This example looks for the value of the &lt;code&gt;name&lt;/code&gt; property for the member &lt;code&gt;bar&lt;/code&gt; in a map when there is no such member. The result is therefore &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">この例では、そのようなメンバーがない場合に、マップ内のメンバー &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; プロパティの値を検索します。したがって、結果は &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="506e976c52ce7c84b595b66adf2793ef1c3bea8d" translate="yes" xml:space="preserve">
          <source>This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.</source>
          <target state="translated">この例では、以下のような出力が得られます。このように、比較関数を使用すると、数値が数字であっても数値列であっても正しくソートされます。</target>
        </trans-unit>
        <trans-unit id="b834c1665b1411c83b15a236780f0e6f998b2e68" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">この例では、以下のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="dbe0fb62601b83dd6e280fe780efcb2b15db5715" translate="yes" xml:space="preserve">
          <source>This example returns a random &lt;em&gt;integer&lt;/em&gt; between the specified values. The value is no lower than &lt;code&gt;min&lt;/code&gt; (or the next integer greater than &lt;code&gt;min&lt;/code&gt; if &lt;code&gt;min&lt;/code&gt; isn't an integer), and is less than (but not equal to) &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">この例では、指定された値の間のランダムな&lt;em&gt;整数を&lt;/em&gt;返します。値よりも低くなっていない &lt;code&gt;min&lt;/code&gt; （またはそれより次の整数大きい &lt;code&gt;min&lt;/code&gt; 場合 &lt;code&gt;min&lt;/code&gt; は整数でない）、および（ただしに等しい）未満である &lt;code&gt;max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ad9a85be409f64d9aef24ce2c3dbcb40ad199d5" translate="yes" xml:space="preserve">
          <source>This example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) &lt;code&gt;min&lt;/code&gt;, and is less than (and not equal) &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">この例では、指定された値の間の乱数を返します。戻り値は &lt;code&gt;min&lt;/code&gt; よりも小さく（場合によっては等しい）、 &lt;code&gt;max&lt;/code&gt; よりも小さい（等しくない）場合があります。</target>
        </trans-unit>
        <trans-unit id="cd6856f24749ae44c743869c3071898a38155b08" translate="yes" xml:space="preserve">
          <source>This example shows diverse techniques for using Promise capabilities and diverse situations that can occur. To understand this, start by scrolling to the bottom of the code block, and examine the promise chain. Upon provision of an initial promise, a chain of promises can follow. The chain is composed of &lt;code&gt;.then()&lt;/code&gt; calls, and typically (but not necessarily) has a single &lt;code&gt;.catch()&lt;/code&gt; at the end, optionally followed by &lt;code&gt;.finally()&lt;/code&gt;. In this example, the promise chain is initiated by a custom-written &lt;code&gt;new Promise()&lt;/code&gt; construct; but in actual practice, promise chains more typically start with an API function (written by someone else) that returns a promise.</source>
          <target state="translated">この例は、Promise機能を使用するためのさまざまな手法と発生する可能性のあるさまざまな状況を示しています。これを理解するには、まずコードブロックの一番下までスクロールし、Promiseチェーンを調べます。最初の約束が提供されると、一連の約束が続く可能性があります。チェーンは &lt;code&gt;.then()&lt;/code&gt; 呼び出しで構成され、通常（必ずではありませんが）最後に単一の &lt;code&gt;.catch()&lt;/code&gt; があり、オプションで &lt;code&gt;.finally()&lt;/code&gt; が続きます。この例では、promiseチェーンはカスタム作成された &lt;code&gt;new Promise()&lt;/code&gt; コンストラクトによって開始されます。しかし実際には、promiseチェーンは通常、promiseを返すAPI関数（他の誰かによって作成されたもの）で始まります。</target>
        </trans-unit>
        <trans-unit id="57f2c7b225c188a1add4b85e9a2cc4aff53e12d6" translate="yes" xml:space="preserve">
          <source>This example shows how to iterate through a collection of objects collected by &lt;code&gt;querySelectorAll&lt;/code&gt;. In this case we get all selected options on the screen and printed on the console:</source>
          <target state="translated">この例は、 &lt;code&gt;querySelectorAll&lt;/code&gt; によって収集されたオブジェクトのコレクションを反復処理する方法を示しています。この場合、選択したすべてのオプションが画面に表示され、コンソールに出力されます。</target>
        </trans-unit>
        <trans-unit id="eed1860eb426bfdbc2f776b86d3192a5fc464c1c" translate="yes" xml:space="preserve">
          <source>This example shows how to iterate through a collection of objects collected by &lt;code&gt;querySelectorAll&lt;/code&gt;. This is because &lt;code&gt;querySelectorAll&lt;/code&gt; returns a &lt;code&gt;NodeList&lt;/code&gt; (which is a collection of objects).</source>
          <target state="translated">この例は、 &lt;code&gt;querySelectorAll&lt;/code&gt; によって収集されたオブジェクトのコレクションを反復処理する方法を示しています。これは、 &lt;code&gt;querySelectorAll&lt;/code&gt; が &lt;code&gt;NodeList&lt;/code&gt; （オブジェクトのコレクション）を返すためです。</target>
        </trans-unit>
        <trans-unit id="dd2e6ee40526a1d0465fe37ec3a7aeb12df0a955" translate="yes" xml:space="preserve">
          <source>This example shows how to load functionality on to a page based on a user action, in this case a button click, and then call a function within that module. This is not the only way to implement this functionality. The &lt;code&gt;import()&lt;/code&gt; function also supports &lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">この例は、ユーザーのアクション（この場合はボタンのクリック）に基づいて機能をページにロードし、そのモジュール内の関数を呼び出す方法を示しています。これがこの機能を実装する唯一の方法ではありません。 &lt;code&gt;import()&lt;/code&gt; 関数もサポートしています &lt;code&gt;await&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5cda9459bc6fad44cf5002bc12a2fafdfe5f77e4" translate="yes" xml:space="preserve">
          <source>This example shows how to use map on a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; to get an array of bytes in the ASCII encoding representing the character values:</source>
          <target state="translated">次の例は、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; mapを使用して、文字値を表すASCIIエンコーディングのバイト配列を取得する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="dfa4da7a857f34fbf5920df13cc8f8b7c6fd8518" translate="yes" xml:space="preserve">
          <source>This example shows registering a target object using a different object as its unregister token:</source>
          <target state="translated">この例では、登録解除トークンとして別のオブジェクトを使用して対象のオブジェクトを登録しています。</target>
        </trans-unit>
        <trans-unit id="e321bf52ec4289f6af83e4193d807f41f0ee67e9" translate="yes" xml:space="preserve">
          <source>This example shows registering a target object using that same object as the unregister token, then later unregistering it via &lt;code&gt;unregister&lt;/code&gt;:</source>
          <target state="translated">この例は、登録解除トークンと同じオブジェクトを使用してターゲットオブジェクトを登録し、後でunregisterを介して &lt;code&gt;unregister&lt;/code&gt; 解除する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c6010b9290e4cac16f9239768f4269d093761d15" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた日付と時刻の形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェイスで使用される言語の形式を取得するには、 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; 引数を使用してその言語（および場合によっては一部のフォールバック言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="590cefd23d1edd4dd188f61dcd919f75b1c64a1c" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた日付と時刻の形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="43a7a6d067d8754510839a686064cf456dccd946" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた日付形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="325cec468238da657537fbdc631c44daba6ab6b9" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた数値形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="d8b708372e6c816d7911558aa144dff0a2b1fb0d" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized plural rules. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた複数のルールのバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="630dd3659d7f6ea887e3de3f43ca34b30710ff4d" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">この例は、ローカライズされた時刻形式のバリエーションの一部を示しています。アプリケーションのユーザーインターフェースで使用される言語の形式を取得するには、必ず &lt;code&gt;locales&lt;/code&gt; 引数を使用してその言語（および場合によってはいくつかの代替言語）を指定してください。</target>
        </trans-unit>
        <trans-unit id="4a4a4676f6326fd0a096aa3c44f833d606d3cea8" translate="yes" xml:space="preserve">
          <source>This example shows that we're creating and accessing the table from JavaScript, but the same table is visible and callable inside the wasm instance too.</source>
          <target state="translated">この例では、JavaScript からテーブルを作成してアクセスしていますが、同じテーブルが wasm インスタンス内でも表示され、呼び出し可能であることを示しています。</target>
        </trans-unit>
        <trans-unit id="5370a79866abd50d3ba6219d57c260b605ddb46d" translate="yes" xml:space="preserve">
          <source>This example starts a counter shown in a DOM element, stopping when the element doesn't exist anymore:</source>
          <target state="translated">この例では、DOM 要素に表示されているカウンタを起動し、その要素が存在しなくなったら停止します。</target>
        </trans-unit>
        <trans-unit id="d1fcd9a201cc02314fd2430857eef298620fd20d" translate="yes" xml:space="preserve">
          <source>This example throws a &lt;code&gt;SyntaxError&lt;/code&gt;:</source>
          <target state="translated">この例では、 &lt;code&gt;SyntaxError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="ede9db60430dbac72f66f4b56bcb70a97ac80f5e" translate="yes" xml:space="preserve">
          <source>This example uses &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; to push all elements from a second array.</source>
          <target state="translated">この例では、&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;を使用して、2番目の配列からすべての要素をプッシュします。</target>
        </trans-unit>
        <trans-unit id="1dbdf5d54bd7ed988a153277a1893e923a88c1d4" translate="yes" xml:space="preserve">
          <source>This example will output the error &lt;code&gt;Uncaught SyntaxError: Identifier 'message' has already been declared&lt;/code&gt; which you were not probably expecting.</source>
          <target state="translated">この例では、エラー &lt;code&gt;Uncaught SyntaxError: Identifier 'message' has already been declared&lt;/code&gt; いますが、おそらく予期していなかったエラーが出力されます。</target>
        </trans-unit>
        <trans-unit id="11b1e0cb1465747928aea91ff0e45f56160857bb" translate="yes" xml:space="preserve">
          <source>This feature is deprecated in favor of defining getters using the &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer syntax&lt;/a&gt; or the &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; API. While this feature is widely implemented, it is only described in the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers&quot;&gt;ECMAScript specification&lt;/a&gt; because of legacy usage. This method should not be used since better alternatives exist.</source>
          <target state="translated">この機能は非推奨になり、&lt;a href=&quot;../../operators/object_initializer&quot;&gt;オブジェクト初期化子構文&lt;/a&gt;または&lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; API を使用してゲッターを定義します。この機能は広く実装されていますが、従来の使用法のため、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers&quot;&gt;ECMAScript仕様&lt;/a&gt;でのみ説明されています。より良い代替手段が存在するため、この方法は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="86411ba63951d765641d545f8df4bcf74c901436" translate="yes" xml:space="preserve">
          <source>This feature is deprecated in favor of defining setters using the &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer syntax&lt;/a&gt; or the &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">この機能は非推奨になり、&lt;a href=&quot;../../operators/object_initializer&quot;&gt;オブジェクト初期化子構文&lt;/a&gt;または&lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; API を使用してセッターを定義します。</target>
        </trans-unit>
        <trans-unit id="17fdac85d6009334c365dfdd6eb6bef5e4374b26" translate="yes" xml:space="preserve">
          <source>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the &lt;a href=&quot;#Browser_compatibility&quot;&gt;compatibility table&lt;/a&gt; at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</source>
          <target state="translated">この機能は推奨されなくなりました。一部のブラウザーはまだそれをサポートしている可能性がありますが、関連するWeb標準から既に削除されているか、削除中か、互換性を保つ目的でのみ保持されている可能性があります。使用を避け、可能であれば既存のコードを更新してください。このページの下部にある&lt;a href=&quot;#Browser_compatibility&quot;&gt;互換性の表&lt;/a&gt;を参照して、決定を行ってください。この機能はいつでも機能しなくなる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ad63cac1625affd2a84d66756a720def351fb2b3" translate="yes" xml:space="preserve">
          <source>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</source>
          <target state="translated">この機能は非標準であり、標準化されていません。Webに面した本番サイトでは使用しないでください:すべてのユーザーに対して動作するわけではありません。また、実装間に大きな非互換性があるかもしれませんし、将来的に動作が変わるかもしれません。</target>
        </trans-unit>
        <trans-unit id="59314e7aec66910164f6914bdc2ab1c6bad7e1f6" translate="yes" xml:space="preserve">
          <source>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</source>
          <target state="translated">この機能は廃止されました。一部のブラウザではまだ動作するかもしれませんが、いつでも削除される可能性があるため、使用はお勧めしません。使用しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="9332d8bd72a7b666b3413523cb1369cd245eb1c2" translate="yes" xml:space="preserve">
          <source>This field does not exist in old browsers. Using it without checking its existence, such as &lt;code&gt;Math.max(Number.MAX_SAFE_INTEGER, 2)&lt;/code&gt;, will yield undesired results such as NaN.</source>
          <target state="translated">このフィールドは古いブラウザには存在しません。 &lt;code&gt;Math.max(Number.MAX_SAFE_INTEGER, 2)&lt;/code&gt; ように存在を確認せずに使用すると、NaNなどの望ましくない結果が生成されます。</target>
        </trans-unit>
        <trans-unit id="46be1def72425868eca09f0760411eb2dd9baccb" translate="yes" xml:space="preserve">
          <source>This finds the min of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and assigns it to &lt;code&gt;z&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最小値を見つけ、それを &lt;code&gt;z&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="4b107bfe566d2f9992ca9dc28cf2aca5b2af5d50" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity (or synchronicity, if the &lt;var&gt;iterable&lt;/var&gt; passed is empty) of &lt;code&gt;Promise.all&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;Promise.all&lt;/code&gt; の非同期性（または、渡された &lt;var&gt;iterable&lt;/var&gt; オブジェクトが空の場合は同期性）を示しています。</target>
        </trans-unit>
        <trans-unit id="48475607d930124ebfc60f7a61a8c364116689e8" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity of &lt;code&gt;Promise.race:&lt;/code&gt;</source>
          <target state="translated">次の例は、 &lt;code&gt;Promise.race:&lt;/code&gt; の非同期性を示しています。</target>
        </trans-unit>
        <trans-unit id="bbe307e833b2a5b11c90c84540468877e39c9e08" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity of &lt;code&gt;Promise.race&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;Promise.race&lt;/code&gt; の非同期性を示しています。</target>
        </trans-unit>
        <trans-unit id="9d108093f87ed6fc8998f994e0fbf28bc1f87721" translate="yes" xml:space="preserve">
          <source>This form also supports the &lt;code&gt;await&lt;/code&gt; keyword.</source>
          <target state="translated">このフォームは &lt;code&gt;await&lt;/code&gt; キーワードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="790804d0887e21fb95e200e492b9af4cd6eecb43" translate="yes" xml:space="preserve">
          <source>This form also supports the await keyword.</source>
          <target state="translated">このフォームは await キーワードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="c6167b8589c3c1fe2493bf4052b5f23a49bc97a8" translate="yes" xml:space="preserve">
          <source>This function can be an ordinary function, or it can be a generator function, so that when invoked, an iterator object is returned. Inside of this generator function, each entry can be provided by using &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">この関数は通常の関数にすることも、ジェネレーター関数にすることもできるため、呼び出されるとイテレーターオブジェクトが返されます。このジェネレーター関数の内部では、 &lt;code&gt;yield&lt;/code&gt; を使用して各エントリを提供できます。</target>
        </trans-unit>
        <trans-unit id="f54b605c0dd86aec12c2d22119452c0b0adc8f5a" translate="yes" xml:space="preserve">
          <source>This function has 5 kinds of return values, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, which represent &quot;positive number&quot;, &quot;negative number&quot;, &quot;positive zero&quot;, &quot;negative zero&quot; and &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; respectively.</source>
          <target state="translated">この関数は、戻り値、の5種類が &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;-1&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;-0&lt;/code&gt; 、 &lt;code&gt;NaN&lt;/code&gt; に「正数」、「負の数」、「正のゼロ」、「負のゼロ」と表し、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;それぞれ。</target>
        </trans-unit>
        <trans-unit id="4c64e07cb40ec02a6c4db2b3c13d9073478870a2" translate="yes" xml:space="preserve">
          <source>This function is also used to identify if objects have the behavior of regular expressions. For example, the methods &lt;a href=&quot;../string/startswith&quot;&gt;&lt;code&gt;String.prototype.startsWith()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string/endswith&quot;&gt;&lt;code&gt;String.prototype.endsWith()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/includes&quot;&gt;&lt;code&gt;String.prototype.includes()&lt;/code&gt;&lt;/a&gt;, check if their first argument is a regular expression and will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are. Now, if the &lt;code&gt;match&lt;/code&gt; symbol is set to &lt;code&gt;false&lt;/code&gt; (or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; value), it indicates that the object is not intended to be used as a regular expression object.</source>
          <target state="translated">この関数は、オブジェクトに正規表現の動作があるかどうかを識別するためにも使用されます。たとえば、メソッド&lt;a href=&quot;../string/startswith&quot;&gt; &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../string/endswith&quot;&gt; &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../string/includes&quot;&gt; &lt;code&gt;String.prototype.includes()&lt;/code&gt; &lt;/a&gt;は、最初の引数が正規表現であるかどうかを確認し、そうであれば&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。場合今、 &lt;code&gt;match&lt;/code&gt; シンボルに設定されている &lt;code&gt;false&lt;/code&gt; （または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsyの&lt;/a&gt;値）は、対象物が正規表現オブジェクトとして使用されるものではないことを示しています。</target>
        </trans-unit>
        <trans-unit id="51d34802e89b2dc0913e112fe99752a9146cac73" translate="yes" xml:space="preserve">
          <source>This function is also used to identify if objects have the behavior of regular expressions. For example, the methods &lt;a href=&quot;../string/startswith&quot;&gt;&lt;code&gt;String.prototype.startsWith()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string/endswith&quot;&gt;&lt;code&gt;String.prototype.endsWith()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/includes&quot;&gt;&lt;code&gt;String.prototype.includes()&lt;/code&gt;&lt;/a&gt;, check if their first argument is a regular expression and will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are. Now, if the &lt;code&gt;match&lt;/code&gt; symbol is set to &lt;code&gt;false&lt;/code&gt; (or a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; value), it indicates that the object is not intended to be used as a regular expression object.</source>
          <target state="translated">この関数は、オブジェクトが正規表現の動作をするかどうかを識別するためにも使用されます。たとえば、メソッド&lt;a href=&quot;../string/startswith&quot;&gt; &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../string/endswith&quot;&gt; &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../string/includes&quot;&gt; &lt;code&gt;String.prototype.includes()&lt;/code&gt; &lt;/a&gt;は、最初の引数が正規表現であるかどうかを確認し、正規表現である場合は&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。ここで、 &lt;code&gt;match&lt;/code&gt; 記号が &lt;code&gt;false&lt;/code&gt; （または&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt;値）に設定されている場合、そのオブジェクトが正規表現オブジェクトとして使用されることを意図していないことを示します。</target>
        </trans-unit>
        <trans-unit id="d9492f9fdf29859365cab477b4f5efad02b714ac" translate="yes" xml:space="preserve">
          <source>This function is part of the ECMAScript 2015 standard.</source>
          <target state="translated">この機能はECMAScript 2015標準の一部です。</target>
        </trans-unit>
        <trans-unit id="04e100fbaed23fb495fcdbbace27beaf29c58f01" translate="yes" xml:space="preserve">
          <source>This function is part of the ECMAScript 2015 standard. For more information see &lt;a href=&quot;https://gist.github.com/rwaldron/1074126&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt; and &lt;code&gt;Array.from&lt;/code&gt; proposal&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/rwaldron/3186576&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt; polyfill&lt;/a&gt;.</source>
          <target state="translated">この関数はECMAScript 2015標準の一部です。詳細については、&lt;a href=&quot;https://gist.github.com/rwaldron/1074126&quot;&gt; &lt;code&gt;Array.of&lt;/code&gt; および &lt;code&gt;Array.from&lt;/code&gt; 提案&lt;/a&gt;と&lt;a href=&quot;https://gist.github.com/rwaldron/3186576&quot;&gt; &lt;code&gt;Array.of&lt;/code&gt; polyfillを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb60a4fbe159ca3a19c77f3d546c7dc7e3000fb0" translate="yes" xml:space="preserve">
          <source>This function is particularly useful for systems that compile to JS, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;など、JSにコンパイルするシステムで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8e06d06bd6d58f9afc5d4f430f376fd7ba568d8c" translate="yes" xml:space="preserve">
          <source>This function is particularly useful for systems that compile to JS, like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscriptenの&lt;/a&gt;ようにJSにコンパイルするシステムで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="66989f0dc7f4e0c3124cfbe7ba078b8f38a9390b" translate="yes" xml:space="preserve">
          <source>This function is provided to give objects a generic &lt;code&gt;toLocaleString&lt;/code&gt; method, even though not all may use it. See the list below.</source>
          <target state="translated">この関数は、すべてのオブジェクトが使用できるわけではありませんが、オブジェクトに一般的な &lt;code&gt;toLocaleString&lt;/code&gt; メソッドを提供するために提供されています。以下のリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="3bb0b38afd0b129339285d21c0385c86e345c176" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of Math.log(x) / Math.log(10). For log10(e) use the constant &lt;a href=&quot;log10e&quot;&gt;&lt;code&gt;Math.LOG10E&lt;/code&gt;&lt;/a&gt; which is 1 / &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、Math.log（x）/ Math.log（10）と同等です。&lt;a href=&quot;log10e&quot;&gt; &lt;code&gt;Math.LOG10E&lt;/code&gt; &lt;/a&gt;（e）の場合、1 / &lt;a href=&quot;ln10&quot;&gt; &lt;code&gt;Math.LN10&lt;/code&gt; &lt;/a&gt;である定数Math.LOG10Eを使用します。</target>
        </trans-unit>
        <trans-unit id="ddc1e6c850ddfa49ea34bff3fb25ca39ff5834dd" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of Math.log(x) / Math.log(2). For log2(e) use the constant &lt;a href=&quot;log2e&quot;&gt;&lt;code&gt;Math.LOG2E&lt;/code&gt;&lt;/a&gt; which is 1 / &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、Math.log（x）/ Math.log（2）と同等です。log2（e）の場合、1 / &lt;a href=&quot;ln2&quot;&gt; &lt;code&gt;Math.LN2&lt;/code&gt; &lt;/a&gt;である定数&lt;a href=&quot;log2e&quot;&gt; &lt;code&gt;Math.LOG2E&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="1dcdabb5b09f90d23d75a1602712d7f2e2cce4cc" translate="yes" xml:space="preserve">
          <source>This function is useful for setting date values based on string values, for example in conjunction with the &lt;a href=&quot;settime&quot;&gt;&lt;code&gt;setTime()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この関数は、たとえば&lt;a href=&quot;settime&quot;&gt; &lt;code&gt;setTime()&lt;/code&gt; &lt;/a&gt;メソッドおよび&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトと組み合わせて、文字列値に基づいて日付値を設定する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8c2c9ac3b5f94f2cd80fd4dd8e672996cc3413a8" translate="yes" xml:space="preserve">
          <source>This function makes it a little easier and faster, you just call &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; , or &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; .</source>
          <target state="translated">この関数を使用すると、簡単で高速になります &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; または &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; 呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="8d202b859680f485def6942c8ce2f1d29b582052" translate="yes" xml:space="preserve">
          <source>This function makes this calculation easier and faster; you simply call &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; , or &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt;.</source>
          <target state="translated">この関数により、この計算がより簡単かつ迅速になります。 &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; または &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; 呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="ae5c15791167b2f0e30cb3ce7631e52ffb33d946" translate="yes" xml:space="preserve">
          <source>This function selects a plural rule according to the locale and formatting options of a &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この関数は、&lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って複数ルールを選択します。</target>
        </trans-unit>
        <trans-unit id="c4861d49591e86de8effd6d69fd22b24c8ec6642" translate="yes" xml:space="preserve">
          <source>This function selects a pluralization category according to the locale and formatting options of a &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">この関数は、&lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; &lt;/a&gt;オブジェクトのロケールとフォーマットオプションに従って複数化カテゴリを選択します。</target>
        </trans-unit>
        <trans-unit id="9292582dc2047a763c27a857f57223d2a2a2d860" translate="yes" xml:space="preserve">
          <source>This functionality can be approximated like this, which demonstrates how many edge cases are handled:</source>
          <target state="translated">この機能は、このように近似することができ、エッジケースがどれだけ多く処理されるかを示しています。</target>
        </trans-unit>
        <trans-unit id="e0d53ad502bbff0c0ab0cffb0ee72a35b804eed2" translate="yes" xml:space="preserve">
          <source>This has numerous benefits:</source>
          <target state="translated">これには数々のメリットがあります。</target>
        </trans-unit>
        <trans-unit id="0f88dbb0ebed51dd25eeac1290a329de8471f3a5" translate="yes" xml:space="preserve">
          <source>This helps to avoid duplicating code in both the promise's &lt;a href=&quot;then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;catch()&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">これにより、promiseの&lt;a href=&quot;then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;catch&quot;&gt; &lt;code&gt;catch()&lt;/code&gt; &lt;/a&gt;ハンドラーとcatch（）ハンドラーの両方でコードが重複するのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="40db1baaae21d697ce344817f85d6c1d56cdb99c" translate="yes" xml:space="preserve">
          <source>This highlights the subtle difference between &lt;code&gt;return foo;&lt;/code&gt; and &lt;code&gt;return await foo;&lt;/code&gt; &amp;mdash; &lt;code&gt;return foo&lt;/code&gt; immediately returns &lt;code&gt;foo&lt;/code&gt; and never throws, even if &lt;code&gt;foo&lt;/code&gt; is a Promise that rejects. &lt;code&gt;return await foo&lt;/code&gt; will &lt;em&gt;wait &lt;/em&gt;for &lt;code&gt;foo&lt;/code&gt; to resolve or reject if it's a Promise, and throws &lt;strong&gt;before returning&lt;/strong&gt; if it rejects.</source>
          <target state="translated">これは、returnfooの微妙な違いを浮き彫りにし &lt;code&gt;return foo;&lt;/code&gt; そして、 &lt;code&gt;return await foo;&lt;/code&gt; &amp;mdash; &lt;code&gt;return foo&lt;/code&gt; は、 &lt;code&gt;foo&lt;/code&gt; が拒否するPromiseであっても、すぐに &lt;code&gt;foo&lt;/code&gt; を返し、スローすることはありません。 &lt;code&gt;return await foo&lt;/code&gt; は、 &lt;code&gt;foo&lt;/code&gt; がPromiseの場合は解決または拒否するのを&lt;em&gt;待ち&lt;/em&gt;、拒否した場合はスロー&lt;strong&gt;して戻り&lt;/strong&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7dd453db4261d3e809715390b84eb4575dacb268" translate="yes" xml:space="preserve">
          <source>This inserts &lt;code&gt;myModule&lt;/code&gt; into the current scope, containing all the exports from the module in the file located in &lt;code&gt;/modules/my-module.js&lt;/code&gt;.</source>
          <target state="translated">このインサートは &lt;code&gt;myModule&lt;/code&gt; にあるファイル内のモジュールのすべてのエクスポートを含む、現在のスコープに &lt;code&gt;/modules/my-module.js&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0aa48f38d5f447ed23921a93c4502d7fcac1a7e0" translate="yes" xml:space="preserve">
          <source>This inserts both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; into the current scope.</source>
          <target state="translated">これにより、 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; の両方が現在のスコープに挿入されます。</target>
        </trans-unit>
        <trans-unit id="a98d1a980f5c0a36ea503bbe11383206d1a0e32f" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;==&lt;/code&gt; operator applies various coercions to both sides (if they are not the same Type) before testing for equality (resulting in such behavior as &lt;code&gt;&quot;&quot; == false&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;), but &lt;code&gt;Object.is&lt;/code&gt; doesn't coerce either value.</source>
          <target state="translated">これは&lt;em&gt;ない&lt;/em&gt;に係る等しい同じ&lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;演算子。 &lt;code&gt;==&lt;/code&gt; （同じタイプでない場合）、オペレータは、（このような行動に結果の平等のためにテストする前に、両側に様々な型変換を適用する &lt;code&gt;&quot;&quot; == false&lt;/code&gt; という &lt;code&gt;true&lt;/code&gt; ）が、 &lt;code&gt;Object.is&lt;/code&gt; は、どちらかの値を強要しません。</target>
        </trans-unit>
        <trans-unit id="008f43d7b675b2decf01f251a65f2abc148b65b1" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;==&lt;/code&gt; operator applies various coercions to both sides (if they are not the same Type) before testing for equality (resulting in such behavior as &lt;code&gt;&quot;&quot; == false&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;), but &lt;code&gt;Object.is&lt;/code&gt; doesn't coerce either value.</source>
          <target state="translated">これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;演算子によると等しいことと同じではあり&lt;em&gt;ません&lt;/em&gt;。 &lt;code&gt;==&lt;/code&gt; （同じタイプでない場合）、オペレータは、（このような行動に結果の平等のためにテストする前に、両側に様々な型変換を適用する &lt;code&gt;&quot;&quot; == false&lt;/code&gt; という &lt;code&gt;true&lt;/code&gt; ）が、 &lt;code&gt;Object.is&lt;/code&gt; は、どちらかの値を強要しません。</target>
        </trans-unit>
        <trans-unit id="de74b347a723e07f2adc3e7d2325f165a647b429" translate="yes" xml:space="preserve">
          <source>This is a JavaScript wrapper object &amp;mdash; an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</source>
          <target state="translated">これはJavaScriptラッパーオブジェクトです&amp;mdash;関数参照を格納するWebAssemblyテーブルを表す配列のような構造です。JavaScriptまたはWebAssemblyコードで作成されたテーブルは、JavaScriptとWebAssemblyの両方からアクセスでき、変更可能です。</target>
        </trans-unit>
        <trans-unit id="071df58adc32e3304b9300ca79770a087ffcd66c" translate="yes" xml:space="preserve">
          <source>This is also &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;===&lt;/code&gt; operator (and the &lt;code&gt;==&lt;/code&gt; operator as well) treats the number values &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; as equal and treats &lt;a href=&quot;../number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt; as not equal to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これもあり&lt;em&gt;ません&lt;/em&gt;に従って等しい同じ&lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;演算子。 &lt;code&gt;===&lt;/code&gt; オペレータ（及び &lt;code&gt;==&lt;/code&gt; オペレータも）扱い数値 &lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; 等しいと扱いとして&lt;a href=&quot;../number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt;と等しくないとして&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d2ec8d8345b64e733264037034d8ce25643de09" translate="yes" xml:space="preserve">
          <source>This is also &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;===&lt;/code&gt; operator (and the &lt;code&gt;==&lt;/code&gt; operator as well) treats the number values &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; as equal and treats &lt;a href=&quot;../number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt; as not equal to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;演算子によると等しいことと同じではあり&lt;em&gt;ません&lt;/em&gt;。 &lt;code&gt;===&lt;/code&gt; オペレータ（及び &lt;code&gt;==&lt;/code&gt; オペレータも）扱い数値 &lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; 等しいと扱いとして&lt;a href=&quot;../number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt;と等しくないとして&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4b4c6648b0b4bb0e1933cfc63ddbb24f3498f86" translate="yes" xml:space="preserve">
          <source>This is an example of a multiple-operation sequential &lt;code&gt;case&lt;/code&gt; clause, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the &lt;code&gt;case&lt;/code&gt; clauses, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these &lt;code&gt;case&lt;/code&gt; statements as well.</source>
          <target state="translated">これは、複数操作の順次 &lt;code&gt;case&lt;/code&gt; 句の例であり、指定された整数に応じて、異なる出力を受け取ることができます。これは、 &lt;code&gt;case&lt;/code&gt; 句を配置した順序でトラバースすることを示しており、数値的に連続している必要はありません。JavaScriptでは、文字列の定義をこれらの &lt;code&gt;case&lt;/code&gt; ステートメントに混在させることもできます。</target>
        </trans-unit>
        <trans-unit id="676fc2cf28b2cedb333e788eb070025ce27886f2" translate="yes" xml:space="preserve">
          <source>This is an example of a multiple-operation sequential switch statement, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the case statements, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these case statements as well.</source>
          <target state="translated">これは、与えられた整数によって、異なる出力を受け取ることができる、複数の操作のシーケンシャルスイッチ文の例です。これは、case文を入れた順番でトラバースすることを示しており、数値的にシーケンシャルである必要はありません。JavaScriptでは、これらのcase文に文字列の定義を混ぜることもできます。</target>
        </trans-unit>
        <trans-unit id="b85fbba149f890d7e27c8cd91c2eededf5f628c6" translate="yes" xml:space="preserve">
          <source>This is an example of a single operation sequential &lt;code&gt;case&lt;/code&gt; statement, where four different values perform exactly the same.</source>
          <target state="translated">これは、4つの異なる値がまったく同じように実行される単一操作の順次 &lt;code&gt;case&lt;/code&gt; ステートメントの例です。</target>
        </trans-unit>
        <trans-unit id="e8b3ee4757c675a8fed64b62d3c878f601fe81d6" translate="yes" xml:space="preserve">
          <source>This is an example of a single operation sequential switch statement, where four different values perform exactly the same.</source>
          <target state="translated">これは、4つの異なる値が全く同じ動作をする単一操作逐次切り替え文の例です。</target>
        </trans-unit>
        <trans-unit id="1c90ab2742a000b45036ef92b7dd0f8e48fa10e9" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; would be evaluated first as a string literal (resulting in the same &lt;code&gt;'$&amp;amp;'&lt;/code&gt;) before using the characters as a pattern.</source>
          <target state="translated">これは、文字をパターンとして使用する前に、 &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; が最初に文字列リテラルとして評価されるため（結果として同じ &lt;code&gt;'$&amp;amp;'&lt;/code&gt; になる）ためです。</target>
        </trans-unit>
        <trans-unit id="fe6eaa3e73a5755d718a7471f3f60b32c355e48d" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; would first be evaluated as a string literal (resulting in the same &lt;code&gt;'$&amp;amp;'&lt;/code&gt;) before using the characters as a pattern.</source>
          <target state="translated">これは、文字をパターンとして使用する前に、 &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; が最初に文字列リテラルとして評価され（結果は同じ &lt;code&gt;'$&amp;amp;'&lt;/code&gt; になる）、</target>
        </trans-unit>
        <trans-unit id="208ce14e060f11ae59221dc400e278091b2f8708" translate="yes" xml:space="preserve">
          <source>This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. &lt;code&gt;foo&lt;/code&gt; is treated like a label, not a key in an object literal).</source>
          <target state="translated">これは、中括弧（{}）内のコードが一連のステートメントとして解析されるためです（つまり、 &lt;code&gt;foo&lt;/code&gt; はオブジェクトリテラルのキーではなく、ラベルのように扱われます）。</target>
        </trans-unit>
        <trans-unit id="46a64a221d74a1f7969a48b07f5d469a42d407a7" translate="yes" xml:space="preserve">
          <source>This is because the first &lt;code&gt;let message = 'hello';&lt;/code&gt; conflicts with second let statement &lt;code&gt;let message = 'hi';&lt;/code&gt; even they're within their own separate case clauses &lt;code&gt;case 'say_hello':&lt;/code&gt; and &lt;code&gt;case 'say_hi':&lt;/code&gt;. Ultimately, this is due to both &lt;code&gt;let&lt;/code&gt; statements being interpreted as duplicate declarations of the same variable name within the same block scope.</source>
          <target state="translated">これは、最初の &lt;code&gt;let message = 'hello';&lt;/code&gt; 2番目のletステートメントと競合し &lt;code&gt;let message = 'hi';&lt;/code&gt; それらが独自の別々のcase節内にある &lt;code&gt;case 'say_hello':&lt;/code&gt; および &lt;code&gt;case 'say_hi':&lt;/code&gt; 。最終的に、これは、両方の &lt;code&gt;let&lt;/code&gt; ステートメントが同じブロックスコープ内の同じ変数名の重複した宣言として解釈されるためです。</target>
        </trans-unit>
        <trans-unit id="322e18c06f0cd5355bd782d8e430f33df48d0a05" translate="yes" xml:space="preserve">
          <source>This is because the limit (and indeed, even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments &lt;code&gt;5, 6, 2, 3&lt;/code&gt; had been passed to &lt;code&gt;apply&lt;/code&gt; in the examples above, rather than the full array.</source>
          <target state="translated">これは、制限（そして実際、過度に大きなスタック動作の性質でさえ）が指定されていないためです。一部のエンジンは例外をスローします。さらに厄介なことに、適用された関数に実際に渡される引数の数を任意に制限するものもあります。この後者の場合を説明するために：そのようなエンジンは、4つの引数（実際の制限はもちろん有意に高いのである）の限界があった場合、引数があるかのように、それは次のようになり &lt;code&gt;5, 6, 2, 3&lt;/code&gt; に渡されていた &lt;code&gt;apply&lt;/code&gt; 上記実施例において、完全な配列ではなく。</target>
        </trans-unit>
        <trans-unit id="14d3998758b1b2576489bfb42056c3c30e470107" translate="yes" xml:space="preserve">
          <source>This is deprecated as a property of &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;. Use the &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object (available within the function) instead.</source>
          <target state="translated">これは、&lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; の&lt;/a&gt;プロパティとして非推奨になりました。代わりに、&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクト（関数内で使用可能）を使用してください。</target>
        </trans-unit>
        <trans-unit id="c252eae447e9cf5663be46226b163ee6e10465a8" translate="yes" xml:space="preserve">
          <source>This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a generator function expression.</source>
          <target state="translated">これは、ジェネレーター関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用することとは異なります。</target>
        </trans-unit>
        <trans-unit id="073922126be7ad02a2ecb08bcaeb9932e3bf72c5" translate="yes" xml:space="preserve">
          <source>This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for an async function expression.</source>
          <target state="translated">これは、非同期関数式のコードで&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を使用することとは異なります。</target>
        </trans-unit>
        <trans-unit id="413187aaa333089aed8b057a0bcd81eca7f1c4c4" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; operation:</source>
          <target state="translated">これは、次の&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;操作と同等です。</target>
        </trans-unit>
        <trans-unit id="a43434ec629280e1b21dd9055fd3805e9e9ed00f" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following, except that the temporary variable is in fact not created:</source>
          <target state="translated">これは、実際には一時変数が作成されないことを除いて、以下と同等です。</target>
        </trans-unit>
        <trans-unit id="9c3a3de3442fecc3f0f59b51415d77d1af0ed66e" translate="yes" xml:space="preserve">
          <source>This is especially important for certain array subclasses, like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed arrays&lt;/a&gt;, since the intermediate array would necessarily have values truncated to fit into the appropriate type.</source>
          <target state="translated">これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;型付き配列&lt;/a&gt;などの特定の配列サブクラスにとって特に重要です。中間配列では、適切な型に収まるように値が切り捨てられる必要があるためです。</target>
        </trans-unit>
        <trans-unit id="b314f830b2a93a472d6d90bf7bb7cc23bf075e6b" translate="yes" xml:space="preserve">
          <source>This is explained further on the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;Array.length&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">これについては、&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;Array.length&lt;/code&gt; &lt;/a&gt;ページで詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="a663719672c7bbbc98766394f1d89b793f57ceb5" translate="yes" xml:space="preserve">
          <source>This is just a simple anonymous class expression which you can refer to using the variable &quot;Foo&quot;.</source>
          <target state="translated">これは、変数 &quot;Foo &quot;を使って参照できる単純な匿名クラス表現に過ぎません。</target>
        </trans-unit>
        <trans-unit id="eb13e45389aa5a141c169430057cb9ed714f79ce" translate="yes" xml:space="preserve">
          <source>This is just a simple anonymous class expression which you can refer to using the variable &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">これは、変数 &lt;code&gt;Foo&lt;/code&gt; を使用して参照できる単純な匿名クラス式です。</target>
        </trans-unit>
        <trans-unit id="1b13cac8cafe5eeceac27b3bac59e70b2f7171b9" translate="yes" xml:space="preserve">
          <source>This is no longer the case in ECMAScript 2015 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">これはECMAScript 2015 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;ではもう当てはまり&lt;/a&gt;ません（バグ1041128）。</target>
        </trans-unit>
        <trans-unit id="cf188543175f13d490410725532bec6c37e058eb" translate="yes" xml:space="preserve">
          <source>This is not a complete polyfill, since it returns an instance of Array, and not Uint8Array, so it lacks properties that would normally exist on TypedArrays.</source>
          <target state="translated">これは完全なポリフィルではなく、Uint8ArrayではなくArrayのインスタンスを返すので、TypedArraysに通常存在するであろうプロパティを欠いています。</target>
        </trans-unit>
        <trans-unit id="bf8132eb74c2cf22ba7e0b5fe71b7215b5ce98fc" translate="yes" xml:space="preserve">
          <source>This is not a robust way to reverse a string:</source>
          <target state="translated">これでは、文字列を逆にするような頑強な方法ではありません。</target>
        </trans-unit>
        <trans-unit id="359c68fa95bdf9de648bfba3053c422111f3a164" translate="yes" xml:space="preserve">
          <source>This is not legal (the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise constructor&lt;/a&gt; is not being called correctly) and will throw a &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; exception:</source>
          <target state="translated">これは不正であり（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promiseコンストラクター&lt;/a&gt;が正しく呼び出されない）、 &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; がスローされます。これはコンストラクターの例外ではありません。</target>
        </trans-unit>
        <trans-unit id="b599f8a621ba4222a4aac8151c0981083d9ff16a" translate="yes" xml:space="preserve">
          <source>This is not legal (the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise constructor&lt;/a&gt; is not being called correctly) and will throw a &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; exception:</source>
          <target state="translated">これは正当ではなく（&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promiseコンストラクター&lt;/a&gt;が正しく呼び出されていません）、 &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; をスローします：これはコンストラクターの例外ではありません：</target>
        </trans-unit>
        <trans-unit id="5733b399958defe53c59bb5929031dc51b87600d" translate="yes" xml:space="preserve">
          <source>This is not the best way to do things, and probably not to be used in any production environment.</source>
          <target state="translated">これは最善の方法ではありませんし、おそらくどのような本番環境でも使うべきではないでしょう。</target>
        </trans-unit>
        <trans-unit id="4d60dba41c390f2f7c1c5e15f9c7b5e18daf2bf8" translate="yes" xml:space="preserve">
          <source>This is now possible with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; (ES2015) loops as well.</source>
          <target state="translated">これは、&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;（ES2015）ループでも可能になりました。</target>
        </trans-unit>
        <trans-unit id="be239762b46386fb92109519d0bbd048a6b09c7d" translate="yes" xml:space="preserve">
          <source>This is really different from</source>
          <target state="translated">これは本当に違う</target>
        </trans-unit>
        <trans-unit id="36b20f089e6393f1c8f2e76828d14573207c1677" translate="yes" xml:space="preserve">
          <source>This is really different from:</source>
          <target state="translated">これは本当に違う。</target>
        </trans-unit>
        <trans-unit id="5d4b4888b60a7c7f44232635981717e49f6887fc" translate="yes" xml:space="preserve">
          <source>This is similar to the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object, so that each entry's &lt;em&gt;key&lt;/em&gt; is the same as its &lt;em&gt;value&lt;/em&gt; for a &lt;code&gt;Set&lt;/code&gt;.</source>
          <target state="translated">これは、に似ている&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;各エントリのように、オブジェクト&lt;em&gt;キーは&lt;/em&gt;その同じである&lt;em&gt;値&lt;/em&gt;のための &lt;code&gt;Set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1075ce64a26f9ab08ab3d64987d886262a92513" translate="yes" xml:space="preserve">
          <source>This is still in the temporal dead zone as its declaration statement has not been reached and terminated.</source>
          <target state="translated">宣言文に到達していないため、これはまだ一時的なデッドゾーンにあり、終了していません。</target>
        </trans-unit>
        <trans-unit id="6fd74be57be6f93ffca00ff71e1d39061bd27902" translate="yes" xml:space="preserve">
          <source>This is the same as the global &lt;a href=&quot;parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">これは、グローバル&lt;a href=&quot;parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;関数と同じです。</target>
        </trans-unit>
        <trans-unit id="f2871763944d73fb8fffa612235b093d207efe83" translate="yes" xml:space="preserve">
          <source>This is the same as the global &lt;a href=&quot;parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">これは、グローバル&lt;a href=&quot;parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;関数と同じです。</target>
        </trans-unit>
        <trans-unit id="88221358a8c319f8e71bd4d82231d103ea61668a" translate="yes" xml:space="preserve">
          <source>This is what it would look like using code snippets:</source>
          <target state="translated">コードスニペットを使うとこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="e9368acabfbbc0558888b69038b0a6146f379cc6" translate="yes" xml:space="preserve">
          <source>This issue also appears if the same variable is used in the getter.</source>
          <target state="translated">この問題は、ゲッターで同じ変数が使用されている場合にも発生します。</target>
        </trans-unit>
        <trans-unit id="ee37fbd5bde80ef8e8547277a4747ebc935aa3cf" translate="yes" xml:space="preserve">
          <source>This issue can also happen when providing a function (stored in an object) as an argument to another function. In this case, the object won't the &lt;code&gt;this&lt;/code&gt; target of the function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt; function to force the &lt;code&gt;this&lt;/code&gt; argument to the expected object.</source>
          <target state="translated">この問題は、（オブジェクトに格納されている）関数を別の関数の引数として提供する場合にも発生する可能性があります。この場合、オブジェクトは関数の &lt;code&gt;this&lt;/code&gt; ターゲットではありません。この問題を回避するには、呼び出しを行うラムダを提供するか、&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt;関数を使用して、 &lt;code&gt;this&lt;/code&gt; 引数を期待されるオブジェクトに強制する必要があります。</target>
        </trans-unit>
        <trans-unit id="cd883cc8bd740c640410d1ab1754c0d88be04eca" translate="yes" xml:space="preserve">
          <source>This issue can also happen when providing a function that is stored as a property of an object as an argument to another function. In this case, the object that stores the function won't be the &lt;code&gt;this&lt;/code&gt; target of that function when it is called by the other function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt; function to force the &lt;code&gt;this&lt;/code&gt; argument to the expected object.</source>
          <target state="translated">この問題は、オブジェクトのプロパティとして格納されている関数を別の関数の引数として提供する場合にも発生する可能性があります。この場合、関数を格納するオブジェクトは、他の関数によって呼び出されたときに、その関数の &lt;code&gt;this&lt;/code&gt; ターゲットにはなりません。この問題を回避するには、呼び出しを行うラムダを指定するか、&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt;関数を使用して &lt;code&gt;this&lt;/code&gt; 引数を期待されるオブジェクトに強制する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5a72d273fff00c9ce64d02a267b12f39fa00462" translate="yes" xml:space="preserve">
          <source>This issue can arise when using the &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; methods, and providing a &lt;code&gt;this&lt;/code&gt; argument which does not have the expected type.</source>
          <target state="translated">この問題は、&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;メソッドを使用し、予期されたタイプではない &lt;code&gt;this&lt;/code&gt; 引数を提供する場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0c4d71403f2dccf2aa58ddcf9d5d880a2549dc90" translate="yes" xml:space="preserve">
          <source>This lets you avoid duplicating code in both the promise's &lt;a href=&quot;then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;catch()&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">これにより、promiseの&lt;a href=&quot;then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;catch&quot;&gt; &lt;code&gt;catch()&lt;/code&gt; &lt;/a&gt;ハンドラとcatch（）ハンドラの両方でコードが重複するのを回避できます。</target>
        </trans-unit>
        <trans-unit id="dcbad0e9023fc522b259cefc46df847e5f50f715" translate="yes" xml:space="preserve">
          <source>This logs &quot;819199440000&quot;.</source>
          <target state="translated">これは「819199440000」を記録します。</target>
        </trans-unit>
        <trans-unit id="aa08ad3dc43c45f1a4ba5c981f5040dc358a1b07" translate="yes" xml:space="preserve">
          <source>This logs 'Smith, John'.</source>
          <target state="translated">これは「スミス、ジョン」を記録しています。</target>
        </trans-unit>
        <trans-unit id="8b5fad24ae3bf54a37018d5192408c9fee5fcf60" translate="yes" xml:space="preserve">
          <source>This logs 'Twas the night before Christmas...'</source>
          <target state="translated">過去ログ 'Twas the night before Christmas...</target>
        </trans-unit>
        <trans-unit id="2434413d65324cae030c2d45551314b68ec65fd7" translate="yes" xml:space="preserve">
          <source>This logs 'oranges are round, and oranges are juicy'.</source>
          <target state="translated">このログでは「みかんは丸くて、みかんはジューシー」となっています。</target>
        </trans-unit>
        <trans-unit id="46dac4a89ea279eb2cd5c3e1e51ebcc49bad4a78" translate="yes" xml:space="preserve">
          <source>This logs 2 because the &lt;code&gt;var x&lt;/code&gt; statement within the block is in the same scope as the &lt;code&gt;var x&lt;/code&gt; statement before the block.</source>
          <target state="translated">ブロック内の &lt;code&gt;var x&lt;/code&gt; ステートメントは、ブロックの前の &lt;code&gt;var x&lt;/code&gt; ステートメントと同じスコープ内にあるため、これは2をログに記録します。</target>
        </trans-unit>
        <trans-unit id="bd32d940192f8f335d13d0e14bd38ea9ceec204f" translate="yes" xml:space="preserve">
          <source>This logs 2 because the &lt;code&gt;var x&lt;/code&gt; statement within the block is in the same scope as the &lt;code&gt;var x&lt;/code&gt; statement before the block. In C or Java, the equivalent code would have outputted 1.</source>
          <target state="translated">このログ2ため &lt;code&gt;var x&lt;/code&gt; ブロック内の文は同じスコープ内にある &lt;code&gt;var x&lt;/code&gt; ブロックの前に声明。CまたはJavaでは、同等のコードは1を出力します。</target>
        </trans-unit>
        <trans-unit id="eef6a2951162ef4b9fdfafdd91476e4959e0e5b2" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'Smith, John'&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;'Smith, John'&lt;/code&gt; ログに記録します。</target>
        </trans-unit>
        <trans-unit id="14cd5d6ad2ddeb940b09b38acb76fe57b64be76c" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'Twas the night before Christmas...'&lt;/code&gt;.</source>
          <target state="translated">このログは &lt;code&gt;'Twas the night before Christmas...'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="28e6436e01c0063fe9c5dcb237ac04d17cbc993a" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'oranges are round, and oranges are juicy'&lt;/code&gt;.</source>
          <target state="translated">このログ &lt;code&gt;'oranges are round, and oranges are juicy'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="912efd6cc77f26d9c238d8e86e5f91f8734ce187" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;819199440000&lt;/code&gt;.</source>
          <target state="translated">このログは &lt;code&gt;819199440000&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eeaaab61da8ae77302900204ae7682c5842307c1" translate="yes" xml:space="preserve">
          <source>This logs two lines; the first line logs the original string, and the second line logs the resulting array.</source>
          <target state="translated">最初の行は元の文字列を記録し、2 行目は結果の配列を記録します。</target>
        </trans-unit>
        <trans-unit id="ff01ab748a447654b55cf2a732930c48cb640771" translate="yes" xml:space="preserve">
          <source>This loop is similar to the first one, but it uses &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; to check if the found enumerable property is the object's own, i.e. not inherited. If it is, the property is logged. Properties &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; are logged because they are own properties (&lt;strong&gt;not inherited&lt;/strong&gt;). Properties &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt; are not logged because they &lt;strong&gt;are inherited&lt;/strong&gt;.</source>
          <target state="translated">このループは最初のループと似ていますが、&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;を使用して、見つかった列挙可能なプロパティがオブジェクト自体であるかどうか、つまり継承されていないかどうかを確認します。そうである場合、プロパティはログに記録されます。プロパティ &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 及び &lt;code&gt;foo&lt;/code&gt; が、彼らは独自のプロパティであるため、記録されます（&lt;strong&gt;継承されません&lt;/strong&gt;）。プロパティ &lt;code&gt;arrCustom&lt;/code&gt; および &lt;code&gt;objCustom&lt;/code&gt; &lt;strong&gt;は継承&lt;/strong&gt;されて&lt;strong&gt;いる&lt;/strong&gt;ため、ログに記録されません。</target>
        </trans-unit>
        <trans-unit id="8cbb9f7119905b2586838956a1338b5278260435" translate="yes" xml:space="preserve">
          <source>This loop is similar to the first one, but it uses &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; to check, if the found enumerable property is object's own (not inherited). And if it is, the property is logged. Properties &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; are logged because they are own properties (&lt;strong&gt;not inherited&lt;/strong&gt;). Properties &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt; are not logged because they &lt;strong&gt;are inherited&lt;/strong&gt;.</source>
          <target state="translated">このループは最初のループと似ていますが、&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;を使用して、見つかった列挙可能なプロパティがオブジェクト自身のもの（継承されていない）かどうかを確認します。その場合、プロパティはログに記録されます。プロパティ &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 及び &lt;code&gt;foo&lt;/code&gt; が、彼らは独自のプロパティであるため、記録されます（&lt;strong&gt;継承されません&lt;/strong&gt;）。プロパティ &lt;code&gt;arrCustom&lt;/code&gt; および &lt;code&gt;objCustom&lt;/code&gt; &lt;strong&gt;は継承&lt;/strong&gt;されるため、ログに記録されません。</target>
        </trans-unit>
        <trans-unit id="728cd810df8a5cfddb3cc665aaae28fc8419faf9" translate="yes" xml:space="preserve">
          <source>This loop iterates and logs &lt;strong&gt;values&lt;/strong&gt; that &lt;code&gt;iterable&lt;/code&gt;, as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt;, defines to be iterated over. The object's &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; are shown, but none of the object's &lt;strong&gt;properties&lt;/strong&gt;.</source>
          <target state="translated">このループは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;反復可能オブジェクト&lt;/a&gt;として反復可能であると定義されている&lt;strong&gt;値&lt;/strong&gt;を &lt;code&gt;iterable&lt;/code&gt; 処理してログに記録し&lt;strong&gt;ます&lt;/strong&gt;。オブジェクトの&lt;strong&gt;要素&lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; が示されているが、オブジェクトののどれ&lt;strong&gt;特性&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bd17082d80f63cf403d892f1a8c1bcc9695ce8b" translate="yes" xml:space="preserve">
          <source>This loop iterates and logs values that &lt;code&gt;iterable&lt;/code&gt; as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt;defines to be iterated over, which are array elements &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; and not any of object's &lt;strong&gt;properties&lt;/strong&gt;.</source>
          <target state="translated">このループの反復とログ値その &lt;code&gt;iterable&lt;/code&gt; として&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;反復可能オブジェクトの&lt;/a&gt;配列要素である反復処理する定義、 &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; としない任意のオブジェクトのの&lt;strong&gt;プロパティ&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9e61403415ab99c6515a2bc6a172cd44f69e2d71" translate="yes" xml:space="preserve">
          <source>This loop logs only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of &lt;code&gt;iterable&lt;/code&gt; object, in original insertion order. It doesn't log array &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;hello&lt;/code&gt; because those are &lt;strong&gt;not&lt;/strong&gt; enumerable properties. But it logs array &lt;strong&gt;indexes&lt;/strong&gt; as well as &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt;, which are. If you're not sure why the properties are iterated over, there's a more thorough explanation of how &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt;&lt;code&gt;array iteration and for...in&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">このループは、ログのみ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;列挙プロパティ&lt;/a&gt;の &lt;code&gt;iterable&lt;/code&gt; 元のオーダーで、オブジェクト。これは、アレイ・ログない&lt;strong&gt;要素&lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; または &lt;code&gt;hello&lt;/code&gt; ものであるため&lt;strong&gt;ではない&lt;/strong&gt;列挙特性。ただし、配列の&lt;strong&gt;インデックス&lt;/strong&gt;と &lt;code&gt;arrCustom&lt;/code&gt; と &lt;code&gt;objCustom&lt;/code&gt; はログに記録され&lt;strong&gt;ます&lt;/strong&gt;。プロパティが繰り返し処理される理由がわからない場合は、&lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt; &lt;code&gt;array iteration and for...in&lt;/code&gt; &lt;/a&gt;詳細な説明があります。</target>
        </trans-unit>
        <trans-unit id="2dd45d02933ab08f03fa6d824036dccf5751085c" translate="yes" xml:space="preserve">
          <source>This loop logs only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of the &lt;code&gt;iterable&lt;/code&gt; object, in arbitrary order. It doesn't log array &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;hello&lt;/code&gt; because those are &lt;strong&gt;not&lt;/strong&gt; enumerable properties, in fact they are not properties at all, they are &lt;strong&gt;values&lt;/strong&gt;. It logs array &lt;strong&gt;indexes&lt;/strong&gt; as well as &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt;, which are. If you're not sure why these properties are iterated over, there's a more thorough explanation of how &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt;&lt;code&gt;array iteration and for...in&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">このループは、 &lt;code&gt;iterable&lt;/code&gt; オブジェクトの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;列挙可能なプロパティ&lt;/a&gt;のみを任意の順序でログに記録します。これは、アレイ・ログない&lt;strong&gt;要素&lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;7&lt;/code&gt; または &lt;code&gt;hello&lt;/code&gt; ものであるため&lt;strong&gt;ではない&lt;/strong&gt;列挙特性、実際にはそれらは全く特性ではなく、それらは&lt;strong&gt;値&lt;/strong&gt;。配列&lt;strong&gt;インデックス&lt;/strong&gt;と、 &lt;code&gt;arrCustom&lt;/code&gt; および &lt;code&gt;objCustom&lt;/code&gt; をログに記録し&lt;strong&gt;ます&lt;/strong&gt;。これらのプロパティが&lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt; &lt;code&gt;array iteration and for...in&lt;/code&gt; &lt;/a&gt;れる理由がわからない場合は、配列の反復とfor ...がどのように機能するかについてのより完全な説明があります。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4b41d6f357f793b0bfe160c3e66477745c702dd" translate="yes" xml:space="preserve">
          <source>This may not make sense at first but when you start dealing with multiple frames or windows in your script and pass objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is, in fact, an Array using &lt;code&gt;Array.isArray(myObj)&lt;/code&gt;</source>
          <target state="translated">これは最初は意味をなさないかもしれませんが、スクリプトで複数のフレームまたはウィンドウの処理を開始し、関数を介してあるコンテキストから別のコンテキストにオブジェクトを渡す場合、これは有効かつ強力な問題になります。たとえば、特定のオブジェクトが実際に &lt;code&gt;Array.isArray(myObj)&lt;/code&gt; を使用して配列であるかどうかを安全に確認できます。</target>
        </trans-unit>
        <trans-unit id="af969ba43007ff7edea6fe9c040fe7c98008d444" translate="yes" xml:space="preserve">
          <source>This may not make sense at first, but for scripts dealing with multiple frames or windows, and passing objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is, in fact, an Array using &lt;code&gt;Array.isArray(&lt;var&gt;myObj&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="translated">これは最初は意味がないかもしれませんが、複数のフレームまたはウィンドウを処理し、関数を介してオブジェクトをあるコンテキストから別のコンテキストに渡すスクリプトの場合、これは有効で強力な問題になります。たとえば、 &lt;code&gt;Array.isArray(&lt;var&gt;myObj&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;myObj&lt;/var&gt; ）を使用して、特定のオブジェクトが実際に配列であるかどうかを安全に確認できます。</target>
        </trans-unit>
        <trans-unit id="f7b801d88a0da407c7128c2ff1c47e2c14695387" translate="yes" xml:space="preserve">
          <source>This means that a tagged template like the following is problematic, because, per ECMAScript grammar, a parser looks for valid Unicode escape sequences, but finds malformed syntax:</source>
          <target state="translated">これは、ECMAScript の文法に従って、パーサーは有効な Unicode エスケープシーケンスを探しますが、不正な構文を見つけてしまうため、以下のようなタグ付きテンプレートは問題があることを意味します。</target>
        </trans-unit>
        <trans-unit id="4a5d64b9105ca942c48c028a9679b334a111eec7" translate="yes" xml:space="preserve">
          <source>This means that different browsers can give a different result. Even the same JavaScript engine on a different OS or architecture can give different results!</source>
          <target state="translated">これは、ブラウザによって結果が異なる可能性があることを意味します。同じJavaScriptエンジンでも、OSやアーキテクチャが違えば、異なる結果が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d559f000b511e827a28282de94374f00bee4f11b" translate="yes" xml:space="preserve">
          <source>This means that functions and variables declared in the function body cannot be referred to from default value parameter initializers; attempting to do so throws a run-time &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、関数本体で宣言された関数と変数がデフォルト値のパラメーター初期化子から参照できないことを意味します。そうしようとすると、実行時の&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; が&lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="5b2ebc97be974edede44a91f6b7acedb37463134" translate="yes" xml:space="preserve">
          <source>This means that you shouldn&amp;rsquo;t write a lazy getter for a property whose value you expect to change, because if the getter is lazy then it will not recalculate the value.</source>
          <target state="translated">これは、値が変更されると予想されるプロパティに対してレイジーゲッターを記述しないことを意味します。ゲッターがレイジーの場合、値が再計算されないためです。</target>
        </trans-unit>
        <trans-unit id="fdf14e175098f04334392b1707305811a5a0ff5c" translate="yes" xml:space="preserve">
          <source>This means that you shouldn't use a lazy getter for a property whose value you expect to change, because the getter will not recalculate the value.</source>
          <target state="translated">これは、値が変更されると予想されるプロパティに遅延ゲッターを使用すべきではないということを意味します。</target>
        </trans-unit>
        <trans-unit id="ed8711dd06c3b1d8ecfd2bc84073a8c10dd07c98" translate="yes" xml:space="preserve">
          <source>This memory's &lt;code&gt;buffer&lt;/code&gt; property will return a &lt;code&gt;&lt;a href=&quot;../../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメモリの &lt;code&gt;buffer&lt;/code&gt; プロパティは、 &lt;code&gt;&lt;a href=&quot;../../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4f40669dfc3c484794dee2581cdbe35c00b46e74" translate="yes" xml:space="preserve">
          <source>This memory's &lt;code&gt;buffer&lt;/code&gt; property will return a &lt;code&gt;&lt;a href=&quot;../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメモリの &lt;code&gt;buffer&lt;/code&gt; プロパティは、 &lt;code&gt;&lt;a href=&quot;../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7d54e4170435adc72ca9d3b2670d169f5e688127" translate="yes" xml:space="preserve">
          <source>This method allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (&lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop or &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; method), whose values may be changed, and which may be &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt;. This method allows these extra details to be changed from their defaults. By default, values added using &lt;code&gt;Object.defineProperty()&lt;/code&gt; are immutable and not enumerable.</source>
          <target state="translated">このメソッドを使用すると、オブジェクトのプロパティを正確に追加または変更できます。割り当てによる通常のプロパティの追加により、プロパティの列挙中に表示されるプロパティが作成され（&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループまたは&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;メソッド）、その値が変更されたり、&lt;a href=&quot;../../operators/delete&quot;&gt;削除され&lt;/a&gt;たりする可能性があります。この方法では、これらの追加の詳細をデフォルトから変更できます。デフォルトでは、 &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用して追加された値は不変であり、列挙できません。</target>
        </trans-unit>
        <trans-unit id="491161e77a4b6245ea874583805ac06680c8c066" translate="yes" xml:space="preserve">
          <source>This method allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (&lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop or &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; method), whose values may be changed, and which may be &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt;. This method allows these extra details to be changed from their defaults. By default, values added using &lt;code&gt;Object.defineProperty()&lt;/code&gt; are immutable.</source>
          <target state="translated">このメソッドを使用すると、オブジェクトのプロパティを正確に追加または変更できます。割り当てによる通常のプロパティの追加により、プロパティの列挙（&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;ループまたは&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt;メソッド）中に表示されるプロパティが作成され、その値が変更されたり、&lt;a href=&quot;../../operators/delete&quot;&gt;削除され&lt;/a&gt;たりする可能性があります。この方法では、これらの追加の詳細をデフォルトから変更できます。デフォルトでは、 &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用して追加された値は不変です。</target>
        </trans-unit>
        <trans-unit id="f704901faae524431730bdf40f9707422fd2785b" translate="yes" xml:space="preserve">
          <source>This method can be used in &lt;em&gt;almost&lt;/em&gt; the same way as &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;と&lt;em&gt;ほぼ&lt;/em&gt;同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="5e58d5e8f25a596fd61c42be4c70acd1f3af5138" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="074d0b34f1dd3c299639a8e941839598a9733944" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt;, except for the different value of &lt;code&gt;this&lt;/code&gt; and the different order of arguments.</source>
          <target state="translated">この方法は、ほぼ同じ方法で使用することができる&lt;a href=&quot;../string/matchall&quot;&gt; &lt;code&gt;String.prototype.matchAll()&lt;/code&gt; &lt;/a&gt;の異なる値を除いて、 &lt;code&gt;this&lt;/code&gt; と異なる引数の順序。</target>
        </trans-unit>
        <trans-unit id="d0e48a6c5ace0bade4c8279bb0f59b436d1ebb79" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="3af8eb9981bc847519477ca9d0eb927fcdbb1fb7" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="2eda3fb2183a80f9f04697f8a3f51ec46e60dd89" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; と引数の順序が異なることを除いて、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="8c5a18dc13bb7c0f49f12e2d027ebf5a25908724" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different order of arguments.</source>
          <target state="translated">このメソッドは、引数の &lt;code&gt;this&lt;/code&gt; と順序が異なることを除いて、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt;とほぼ同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="496b730643a0f9292cc6f1f1b5c17f4ff7d7e8fa" translate="yes" xml:space="preserve">
          <source>This method can be useful for aggregating the results of multiple promises.</source>
          <target state="translated">この方法は、複数のプロミスの結果を集計するのに便利です。</target>
        </trans-unit>
        <trans-unit id="c3c50061f520cf8433f9f488097531f0f156580e" translate="yes" xml:space="preserve">
          <source>This method can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully &amp;mdash; all of whom we want to fulfill before the code execution continues.</source>
          <target state="translated">この方法は、複数のプロミスの結果を集計するのに役立ちます。これは通常、コード全体が正常に機能するために依存する複数の関連する非同期タスクがある場合に使用されます。これらはすべて、コードの実行を続行する前に実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="223b5e9fccfb7bb6cb3cea00a341d837e42f7000" translate="yes" xml:space="preserve">
          <source>This method carries out the reverse of &lt;a href=&quot;maximize&quot;&gt;&lt;code&gt;maximize()&lt;/code&gt;&lt;/a&gt;, removing any language, script, or region subtags from the locale language identifier (essentially the contents of &lt;code&gt;baseName&lt;/code&gt;). This is useful when there are superfluous subtags in the language identifier; for instance, &quot;en-Latn&quot; can be simplified to &quot;en&quot;, since &quot;Latn&quot; is the only script used to write English. &lt;code&gt;minimize()&lt;/code&gt; only affects the main subtags that comprise the &lt;a href=&quot;https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions&quot;&gt;language identifier&lt;/a&gt;: language, script, and region subtags. Other subtags after the &quot;-u&quot; in the locale indentifier are called extension subtags and are not affected by the &lt;code&gt;minimize()&lt;/code&gt; method. Examples of these subtags include &lt;a href=&quot;hourcycle&quot;&gt;&lt;code&gt;Locale.hourCycle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calendar&quot;&gt;&lt;code&gt;Locale.calendar&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Locale.numeric&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;maximize&quot;&gt; &lt;code&gt;maximize()&lt;/code&gt; の&lt;/a&gt;逆を実行し、ロケール言語識別子（基本的に &lt;code&gt;baseName&lt;/code&gt; の内容）から言語、スクリプト、または地域のサブタグを削除します。これは、言語識別子に余分なサブタグがある場合に役立ちます。たとえば、「en-Latn」は英語を書くために使用される唯一のスクリプトであるため、「en-Latn」は「en」に簡略化できます。 &lt;code&gt;minimize()&lt;/code&gt; は、&lt;a href=&quot;https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions&quot;&gt;言語識別子&lt;/a&gt;を構成するメインサブタグ（言語、スクリプト、およびリージョンのサブタグ）にのみ影響します。ロケール識別子の「-u」の後の他のサブタグは拡張サブタグと呼ばれ、 &lt;code&gt;minimize()&lt;/code&gt; メソッドの影響を受けません。これらの&lt;a href=&quot;hourcycle&quot;&gt; &lt;code&gt;Locale.hourCycle&lt;/code&gt; &lt;/a&gt;例には、Locale.hourCycleが含まれます。&lt;a href=&quot;calendar&quot;&gt; &lt;code&gt;Locale.calendar&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;numeric&quot;&gt; &lt;code&gt;Locale.numeric&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="094f1b1bbabc6f64860f9c4d079b311edc345aec" translate="yes" xml:space="preserve">
          <source>This method does not change the &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object it is called on. It simply returns a new string.</source>
          <target state="translated">このメソッドは、呼び出された&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトを変更しません。単に新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6666baba3f580ccd286b61386774c40457db494b" translate="yes" xml:space="preserve">
          <source>This method does not change the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object. It simply returns a new string.</source>
          <target state="translated">このメソッドは、呼び出し元の&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトを変更しません。新しい文字列を返すだけです。</target>
        </trans-unit>
        <trans-unit id="315f4731db33091be4dd1cd133bbcc46aa0a2e1c" translate="yes" xml:space="preserve">
          <source>This method exists for customizing match behavior within &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; subclasses.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;サブクラス内の一致動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="3a8f56da2c8475aed3f21d446424c570a9f6def7" translate="yes" xml:space="preserve">
          <source>This method exists for customizing match behavior within &lt;code&gt;RegExp&lt;/code&gt; subclasses.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラス内の一致動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="e76d94ba71bcfb16503893dd48081fd35f84674b" translate="yes" xml:space="preserve">
          <source>This method exists for customizing replace behavior in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの置換動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="6fddff09cb17c17c40e247e221a2e7fec79a24cd" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the behavior of &lt;code&gt;matchAll()&lt;/code&gt; in &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; subclasses.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;サブクラスの &lt;code&gt;matchAll()&lt;/code&gt; の動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="24b40d7ea7ebe565d676832de325fe71c3207bac" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the behavior of &lt;code&gt;split()&lt;/code&gt; in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの &lt;code&gt;split()&lt;/code&gt; の動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="2a1aa28c4d36bff7298821a1aa9ee8c1461c765f" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the search behavior in &lt;code&gt;RegExp&lt;/code&gt; subclasses.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの検索動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="21c6ecc9ef52cc6b8b8b85ede1e2f1c62b5fcf1f" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the split behavior in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;RegExp&lt;/code&gt; サブクラスの分割動作をカスタマイズするために存在します。</target>
        </trans-unit>
        <trans-unit id="c14635a53db4b1e8b459a7ea3abf070bd7b3f80e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet.</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、まだすべてのJavaScript実装で利用できない可能性があります。</target>
        </trans-unit>
        <trans-unit id="53cd014293bf6eef1dca1fc6b0aedf94ffb3257e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can easily polyfill this method:</source>
          <target state="translated">このメソッドはECMAScript 2015の仕様に追加されており、まだすべてのJavaScript実装で利用できない可能性があります。しかし、このメソッドを簡単にポリフィルすることができます。</target>
        </trans-unit>
        <trans-unit id="82515c7dd3160807e861a6cfc787f7e6349f9c7f" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;Array.prototype.find&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを &lt;code&gt;Array.prototype.find&lt;/code&gt; してArray.prototype.findをポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="1fc57f4cdb3c305fad0a32bc254517afa35c24c2" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.repeat()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを使用して &lt;code&gt;String.prototype.repeat()&lt;/code&gt; をポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="57b7a3036cae93c2fe97c1a5f5ee95bfd9ab48bb" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 2015仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを使用して &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; をポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="936616e173741f4312192e2fcd2409dedbf7dc5e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 6 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">このメソッドはECMAScript 6仕様に追加されており、すべてのJavaScript実装でまだ使用できるとは限りません。ただし、次のスニペットを使用して &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; をポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="bfe844b6cbf350ae41cd8dcbe1f13a0e68c8c4eb" translate="yes" xml:space="preserve">
          <source>This method has the same functionality as the global &lt;a href=&quot;../parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このメソッドには、グローバル&lt;a href=&quot;../parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;関数と同じ機能があります。</target>
        </trans-unit>
        <trans-unit id="ba83ba57f2891f92243494071d0afca752ad2fe8" translate="yes" xml:space="preserve">
          <source>This method has the same functionality as the global &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このメソッドには、グローバル&lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;関数と同じ機能があります。</target>
        </trans-unit>
        <trans-unit id="157a467bd4bfe2a9b7253d40a7eb7f1188b91c19" translate="yes" xml:space="preserve">
          <source>This method is also part of ECMAScript 2015. (Its purpose is modularization of globals.)</source>
          <target state="translated">このメソッドも ECMAScript 2015 の一部です。(その目的はグローバルのモジュール化)。</target>
        </trans-unit>
        <trans-unit id="4155f5bb3d4edfa3e164f79c343e9177bbab6699" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="58ce8895f44a9778e2bccac14b26144462e4ee01" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return same result.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="569236feddbd8cdb488a12e2dbf69722b9897c14" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return same result.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/matchall&quot;&gt; &lt;code&gt;String.prototype.matchAll()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="867134c7dad2a60527307e11728be2b02487822b" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;pattern&lt;/code&gt; argument is a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. For example, following two examples return same result.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;pattern&lt;/code&gt; 引数が&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトの場合、&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="86fa8de37fbd2280d1611f0feaa8813ab9f284ac" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return the same result.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="4b9d738d59cda9c7b6b804054c0d55b16db02235" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; if its &lt;code&gt;separator&lt;/code&gt; argument is an object that has a &lt;code&gt;@@split&lt;/code&gt; method, such as a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return the same result.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;separator&lt;/code&gt; 引数が&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;などの &lt;code&gt;@@split&lt;/code&gt; メソッドを持つオブジェクトである場合、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="aecce4dcdcf1c90ba9852754479cf86d49774f06" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;separator&lt;/code&gt; argument is a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. For example, the following two examples return the same result.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;separator&lt;/code&gt; 引数が&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;オブジェクトの場合、&lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; で&lt;/a&gt;内部的に呼び出されます。たとえば、次の2つの例は同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="2215b5714302af0ad9a6b2b9e3f63217245d405b" translate="yes" xml:space="preserve">
          <source>This method is functionally equivalent to the &lt;a href=&quot;gettime&quot;&gt;&lt;code&gt;Date.prototype.getTime()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このメソッドは、機能的には&lt;a href=&quot;gettime&quot;&gt; &lt;code&gt;Date.prototype.getTime()&lt;/code&gt; &lt;/a&gt;メソッドと同等です。</target>
        </trans-unit>
        <trans-unit id="eaf913b37268c39f19542c33e0219e952b4165ac" translate="yes" xml:space="preserve">
          <source>This method is useful for returning the first promise that fulfills. It short-circuits after a promise fulfills, so it does not wait for the other promises to complete once it finds one. Unlike &lt;a href=&quot;all&quot;&gt;&lt;code&gt;Promise.all()&lt;/code&gt;&lt;/a&gt;, which returns an &lt;em&gt;array&lt;/em&gt; of fulfillment values, we only get one fulfillment value (assuming at least one promise fulfills). This can be beneficial if we need only one promise to fulfill but we do not care which one does. Note another difference: This method rejects upon receiving an &lt;em&gt;empty iterable&lt;/em&gt;, since, truthfully, the iterable contains no items that fulfill.</source>
          <target state="translated">このメソッドは、満たす最初の約束を返すのに役立ちます。約束が履行された後に短絡するため、他の約束が見つかると、他の約束が完了するのを待ちません。フルフィルメント値の&lt;em&gt;配列&lt;/em&gt;を返す&lt;a href=&quot;all&quot;&gt; &lt;code&gt;Promise.all()&lt;/code&gt; &lt;/a&gt;とは異なり、フルフィルメント値は1つしか取得されません（少なくとも1つのプロミスがフルフィルメントであると想定）。これは、約束を1つだけ実行する必要があるが、どちらを実行するかは気にしない場合に役立ちます。別の違いに注意してください。このメソッドは、&lt;em&gt;空のiterable&lt;/em&gt;を受信すると拒否します。これは、正直なところ、iterableには満たすアイテムが含まれていないためです。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e0f103d7fcbba7a9364dd76f1a0d2ace0a684f79" translate="yes" xml:space="preserve">
          <source>This method is usually called internally by JavaScript and not explicitly in code.</source>
          <target state="translated">このメソッドは通常、JavaScriptによって内部的に呼び出され、コード内では明示的に呼び出されません。</target>
        </trans-unit>
        <trans-unit id="943bb8e3d6bff4653010c545f007aa18b80883f3" translate="yes" xml:space="preserve">
          <source>This method is usually called internally by JavaScript and not explicitly in web code.</source>
          <target state="translated">このメソッドは通常、JavaScriptによって内部的に呼び出され、ウェブコードでは明示的に呼び出されません。</target>
        </trans-unit>
        <trans-unit id="a9f3feedcfbd882b304fea40935da4e86d837cb8" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string begins with another string. This method is case-sensitive.</source>
          <target state="translated">このメソッドは、文字列が別の文字列で始まるかどうかを判断します。このメソッドは大文字小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="d6141821c36a082c54ef6dfceab269824cd1f20b" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string ends with another string. This method is case-sensitive.</source>
          <target state="translated">このメソッドは、文字列が別の文字列で終わるかどうかを判断します。このメソッドは大文字小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="f23d94e3a4f55e53eefade5510673cafacf53bdf" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string includes another string.</source>
          <target state="translated">このメソッドは、文字列が他の文字列を含むかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="1894a3eb4db50a4dc5d92a5ef479f8032ffb99c5" translate="yes" xml:space="preserve">
          <source>This method makes the &lt;code&gt;[[prototype]]&lt;/code&gt; of the target immutable; any &lt;code&gt;[[prototype]]&lt;/code&gt; re-assignment will throw a &lt;code&gt;TypeError&lt;/code&gt;. This behavior is specific to the internal &lt;code&gt;[[prototype]]&lt;/code&gt; property, other properties of the target object will remain mutable.</source>
          <target state="translated">このメソッドは、ターゲットの &lt;code&gt;[[prototype]]&lt;/code&gt; を不変にします。任意の &lt;code&gt;[[prototype]]&lt;/code&gt; の再割り当てがスローされます &lt;code&gt;TypeError&lt;/code&gt; 。この動作は内部 &lt;code&gt;[[prototype]]&lt;/code&gt; プロパティに固有であり、ターゲットオブジェクトの他のプロパティは変更可能なままです。</target>
        </trans-unit>
        <trans-unit id="500393b711fdd6a88b9196ca67eb4cc609689293" translate="yes" xml:space="preserve">
          <source>This method permits examination of the precise description of a property. A</source>
          <target state="translated">この方法では、物件の正確な説明を調べることができます。A</target>
        </trans-unit>
        <trans-unit id="3eacf62a095eeef78b835892cfa8d4ad1b86db35" translate="yes" xml:space="preserve">
          <source>This method permits examination of the precise description of all own properties of an object. A</source>
          <target state="translated">この方法では、対象物のすべての自身の特性の正確な記述を調べることができます。A</target>
        </trans-unit>
        <trans-unit id="371b80b0851126cb0e1dfc4386fd36c8adb230f6" translate="yes" xml:space="preserve">
          <source>This method receives a &lt;code&gt;code&lt;/code&gt; and returns a string based on the locale and options provided when instantiating &lt;code&gt;Intl.DisplayNames&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;code&lt;/code&gt; を受け取り、 &lt;code&gt;Intl.DisplayNames&lt;/code&gt; をインスタンス化するときに提供されるロケールとオプションに基づいて文字列を返します。</target>
        </trans-unit>
        <trans-unit id="48fdb04ac740fcfea18416ac0acbba0df9a999f1" translate="yes" xml:space="preserve">
          <source>This method receives two &lt;a href=&quot;../../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;s and formats the date range in the most concise way based on the &lt;code&gt;locale&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; provided when instantiating &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは2つの&lt;a href=&quot;../../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;を受け取り、&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; を&lt;/a&gt;インスタンス化するときに提供される &lt;code&gt;locale&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 基づいて、最も簡潔な方法で日付範囲をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="bade61e16c3696ae4b72ce445661ddcd658db483" translate="yes" xml:space="preserve">
          <source>This method receives two &lt;a href=&quot;../../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;s and returns an &lt;a href=&quot;../../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the locale-specific tokens representing each part of the formatted date range.</source>
          <target state="translated">このメソッドは2つの&lt;a href=&quot;../../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;を受け取り、フォーマットされた日付範囲の各部分を表すロケール固有のトークンを含むオブジェクトの&lt;a href=&quot;../../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="467dd313d9ec30ffdda6de5d293d65058d8ebf76" translate="yes" xml:space="preserve">
          <source>This method receives two &lt;a href=&quot;../date&quot;&gt;Dates&lt;/a&gt; and formats the date range in the most concise way based on the locale and options provided when instantiating &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは2つの&lt;a href=&quot;../date&quot;&gt;日付&lt;/a&gt;を受け取り、&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; を&lt;/a&gt;インスタンス化するときに提供されるロケールとオプションに基づいて、最も簡潔な方法で日付範囲をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="5010105983cd7e65d5c11aa12760002462fee220" translate="yes" xml:space="preserve">
          <source>This method receives two &lt;a href=&quot;../date&quot;&gt;Dates&lt;/a&gt; and returns an Array of objects containing the locale-specific tokens representing each part of the formatted date range.</source>
          <target state="translated">このメソッドは2つの&lt;a href=&quot;../date&quot;&gt;日付&lt;/a&gt;を受け取り、フォーマットされた日付範囲の各部分を表すロケール固有のトークンを含むオブジェクトの配列を返します。</target>
        </trans-unit>
        <trans-unit id="f628a9e2d86a894b84ba58b4f4db996ed00761dc" translate="yes" xml:space="preserve">
          <source>This method replaces the experimental &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move&quot;&gt;&lt;code&gt;TypedArray.prototype.move()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、実験的な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move&quot;&gt; &lt;code&gt;TypedArray.prototype.move()&lt;/code&gt; を&lt;/a&gt;置き換えます。</target>
        </trans-unit>
        <trans-unit id="b769488df20b7fa0fb182ad7f05d33b3fef47b8b" translate="yes" xml:space="preserve">
          <source>This method returns a string (and &lt;em&gt;not&lt;/em&gt; a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">この方法は、文字列（および返し&lt;em&gt;ていない&lt;/em&gt;&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="ecec38c609050aa60e91994e7d8ba633872bb9d0" translate="yes" xml:space="preserve">
          <source>This method returns a string and not a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトではなく文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f0d6240f8eb87d18ef982897ec85c80727169310" translate="yes" xml:space="preserve">
          <source>This method takes advantage of the fact that if there is no break below a &lt;code&gt;case&lt;/code&gt; clause it will continue to execute the next &lt;code&gt;case&lt;/code&gt; clause regardless if the &lt;code&gt;case&lt;/code&gt; meets the criteria. (See the section &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/What_happens_if_I_forgot_a_break&quot;&gt;What happens if I forgot a &lt;code&gt;break&lt;/code&gt;?&lt;/a&gt;)</source>
          <target state="translated">このメソッドは、 &lt;code&gt;case&lt;/code&gt; 句の下に区切りがない場合、 &lt;code&gt;case&lt;/code&gt; が基準を満たしているかどうかに関係なく、次の &lt;code&gt;case&lt;/code&gt; 句を実行し続けるという事実を利用します。（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/What_happens_if_I_forgot_a_break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;を忘れた場合はどうなりますか？のセクションを参照してください）</target>
        </trans-unit>
        <trans-unit id="160d98375587cf100c86355045411e205a9aa3c6" translate="yes" xml:space="preserve">
          <source>This method takes advantage of the fact that if there is no break below a case statement it will continue to execute the next case statement regardless if the case meets the criteria. See the section titled &quot;What happens if I forgot a break?&quot;</source>
          <target state="translated">このメソッドは、ケース文の下にブレークがない場合、ケースが基準を満たしているかどうかに関わらず、次のケース文を実行し続けるという事実を利用しています。ブレークを忘れたらどうなるか」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f8e0a731699a0eee17b0a5f9ff70ada64cee899c" translate="yes" xml:space="preserve">
          <source>This method uses the same algorithm as &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;, so the same polyfill can be used here: simply replace &lt;code&gt;Array.prototype.reduce&lt;/code&gt; with &lt;code&gt;TypedArray.prototype.reduce&lt;/code&gt;.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt;と同じアルゴリズムを使用するため、ここでも同じポリフィルを使用できます &lt;code&gt;Array.prototype.reduce&lt;/code&gt; を &lt;code&gt;TypedArray.prototype.reduce&lt;/code&gt; に置き換えるだけです。</target>
        </trans-unit>
        <trans-unit id="1fb272f1e69fbd9d448926c2c4913638d9cc457d" translate="yes" xml:space="preserve">
          <source>This method was standardized in ECMA-262 5&lt;sup&gt;th&lt;/sup&gt; edition. Engines which have not been updated to support this method can work around the absence of this method using the following shim:</source>
          <target state="translated">この方法は、ECMA-262 &lt;sup&gt;第&lt;/sup&gt; 5 版で標準化されました。このメソッドをサポートするように更新されていないエンジンは、次のシムを使用して、このメソッドがないことを回避できます。</target>
        </trans-unit>
        <trans-unit id="b91db49b547b2ce36f7047eddefa7ad664ba8706" translate="yes" xml:space="preserve">
          <source>This method was standardized in ECMA-262 5th edition. Engines which have not been updated to support this method can work around the absence of this method using the following shim:</source>
          <target state="translated">この方法は ECMA-262 第 5 版で標準化されました。このメソッドをサポートするために更新されていないエンジンは、以下のシムを使用して、このメソッドが存在しないことを回避することができます。</target>
        </trans-unit>
        <trans-unit id="f4f646092c3469f7bcbadba53da6650a96ad9c82" translate="yes" xml:space="preserve">
          <source>This method will convert any non-string value to a string, when you set its &lt;code&gt;this&lt;/code&gt; to a value that is not a string:</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; を文字列ではない値に設定すると、文字列以外の値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="d9e15cff51fdda19eea3480a0c3927434a5c139f" translate="yes" xml:space="preserve">
          <source>This method will convert any non-string value to a string, when you set its &lt;code&gt;this&lt;/code&gt; to a value that is not a string: ​​​​</source>
          <target state="translated">このメソッドは、 &lt;code&gt;this&lt;/code&gt; を文字列ではない値に設定すると、文字列以外の値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="5a8275b6636a094c259f413cf80b1c146b13f174" translate="yes" xml:space="preserve">
          <source>This nonstandard behavior is now ignored in version 40 and later, and will present a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; (&quot;&lt;a href=&quot;../errors/invalid_for-in_initializer&quot;&gt;for-in loop head declarations may not have initializers&lt;/a&gt;&quot;) error in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=748550&quot;&gt;bug 748550&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1164741&quot;&gt;bug 1164741&lt;/a&gt;).</source>
          <target state="translated">この非標準の動作はバージョン40で無視され、以降、および提示する&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;（「&lt;a href=&quot;../errors/invalid_for-in_initializer&quot;&gt;初期化子を持っていない可能性のためのインループヘッド宣言&lt;/a&gt;に」）エラーを&lt;a href=&quot;../strict_mode&quot;&gt;strictモード&lt;/a&gt;（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=748550&quot;&gt;バグ748550&lt;/a&gt;と&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1164741&quot;&gt;バグ1164741&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bb93a48f120d06b9e746fa2ffa4fd9989decd1d7" translate="yes" xml:space="preserve">
          <source>This notation is rather wasteful and JavaScript 1.6 introduced a generic shorthand:</source>
          <target state="translated">この表記法はかなり無駄が多く、JavaScript 1.6では一般的な速記法が導入されました。</target>
        </trans-unit>
        <trans-unit id="af24edab927c2ed4ec4c6f5f292138da26677829" translate="yes" xml:space="preserve">
          <source>This object cannot be instantiated directly. Instead, a &lt;code&gt;Generator&lt;/code&gt; instance can be returned from a &lt;a href=&quot;../statements/function*&quot;&gt;generator function&lt;/a&gt;:</source>
          <target state="translated">このオブジェクトを直接インスタンス化することはできません。代わりに、 &lt;code&gt;Generator&lt;/code&gt; インスタンスを&lt;a href=&quot;../statements/function*&quot;&gt;ジェネレーター関数&lt;/a&gt;から返すことができます。</target>
        </trans-unit>
        <trans-unit id="4afda9ac25610715df5495b7cfe5137d0c5e5b32" translate="yes" xml:space="preserve">
          <source>This object cannot be instantiated directly. Instead, you create an instance of an array of a particular type, such as a &lt;a href=&quot;int8array&quot;&gt;&lt;code&gt;Int8Array&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;bigint64array&quot;&gt;&lt;code&gt;BigInt64Array&lt;/code&gt;&lt;/a&gt;. These objects all have a common syntax for their constructors:</source>
          <target state="translated">このオブジェクトを直接インスタンス化することはできません。代わりに、次のような特定の型の配列のインスタンスを作成&lt;a href=&quot;int8array&quot;&gt; &lt;code&gt;Int8Array&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;bigint64array&quot;&gt; &lt;code&gt;BigInt64Array&lt;/code&gt; を&lt;/a&gt;。これらのオブジェクトはすべて、コンストラクターに共通の構文を持っています。</target>
        </trans-unit>
        <trans-unit id="c7839fe8fd2c6eb56255867dc586a7fb858261f6" translate="yes" xml:space="preserve">
          <source>This operator allows evaluating expressions that produce a value into places where an expression that evaluates to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is desired.</source>
          <target state="translated">この演算子を使用すると、&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;評価される式が必要な場所に値を生成する式を評価できます。</target>
        </trans-unit>
        <trans-unit id="7fd3a6ffaef17da0022d470be037d9568832d020" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.</source>
          <target state="translated">オペランドの先頭ビットを指定したビット数だけ左にシフトします。左にシフトした余分なビットは破棄されます。ゼロビットは右からシフトインします。</target>
        </trans-unit>
        <trans-unit id="1de4e33f05c9641a53e16b11a59c33498bdab388" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.</source>
          <target state="translated">オペランドの先頭ビットを指定したビット数だけ右にシフトします。右にシフトした余分なビットは破棄されます。左端のビットのコピーが左から入ってきます。新しい左端のビットは前の左端のビットと同じ値を持つので、符号ビット(左端のビット)は変化しません。それゆえ、「符号伝播」という名前がついています。</target>
        </trans-unit>
        <trans-unit id="32e932f7047a9122ced44d45cc753479d51a81a0" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative.</source>
          <target state="translated">オペランドの先頭ビットを指定したビット数だけ右にシフトします。右にシフトした余分なビットは破棄されます。ゼロビットは左から挿入されます。符号ビットは0になりますので、結果は常に非負になります。</target>
        </trans-unit>
        <trans-unit id="85b58193abe791256339ad4e2abeb7c70636d33d" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes &lt;code&gt;0&lt;/code&gt;, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.</source>
          <target state="translated">この演算子は、最初のオペランドを指定されたビット数だけ右にシフトします。右にシフトオフされた余分なビットは破棄されます。ゼロビットは左からシフトインされます。符号ビットは &lt;code&gt;0&lt;/code&gt; になるため、結果は常に負ではありません。他のビット演算子とは異なり、ゼロフィル右シフトは符号なし32ビット整数を返します。</target>
        </trans-unit>
        <trans-unit id="0e111cd40eced5b108c9050cbe82b03b064b622a" translate="yes" xml:space="preserve">
          <source>This outputs &quot;value&quot;, since 1 is type-casted into '1'.</source>
          <target state="translated">1が'1'に型キャストされているので、これは &quot;値 &quot;を出力します。</target>
        </trans-unit>
        <trans-unit id="20bac07695b8ca5f84f1f7fd0c290eff44fd1484" translate="yes" xml:space="preserve">
          <source>This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;white space&lt;/a&gt;. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</source>
          <target state="translated">このページでは、JavaScriptの字句文法について説明します。ECMAScriptスクリプトのソーステキストは左から右にスキャンされ、トークン、制御文字、行末記号、コメント、または&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;空白&lt;/a&gt;である入力要素のシーケンスに変換されます。ECMAScriptは、特定のキーワードとリテラルも定義し、終了ステートメントにセミコロンを自動的に挿入するためのルールがあります。</target>
        </trans-unit>
        <trans-unit id="01d92d11e05c85e95d6683f157729dc8ad9e7ed6" translate="yes" xml:space="preserve">
          <source>This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</source>
          <target state="translated">このページでは、JavaScriptの語彙文法について説明します。ECMAScript スクリプトのソーステキストは、左から右へスキャンされ、トークン、制御文字、行終端、コメント、空白などの一連の入力要素に変換されます。ECMAScript はまた、特定のキーワードとリテラルを定義し、文末にセミコロンを自動的に挿入するルールを持っています。</target>
        </trans-unit>
        <trans-unit id="93feabb1077a32bf47dd12b7732c3541d81b02c2" translate="yes" xml:space="preserve">
          <source>This page documents the use of the &lt;code&gt;Error&lt;/code&gt; object itself and its use as a constructor function. For a list of properties and methods inherited by &lt;code&gt;Error&lt;/code&gt; instances, see &lt;a href=&quot;error/prototype&quot;&gt;&lt;code&gt;Error.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このページでは、 &lt;code&gt;Error&lt;/code&gt; オブジェクト自体の使用と、コンストラクター関数としてのその使用について説明します。 &lt;code&gt;Error&lt;/code&gt; インスタンスによって継承されるプロパティとメソッドのリストについては、&lt;a href=&quot;error/prototype&quot;&gt; &lt;code&gt;Error.prototype&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2915a39190c4a1dd93fc41a4654be2f795649d92" translate="yes" xml:space="preserve">
          <source>This part of the JavaScript section on MDN serves as a repository of facts about the JavaScript language. Read more &lt;a href=&quot;about&quot;&gt;about this reference&lt;/a&gt;.</source>
          <target state="translated">MDNのJavaScriptセクションのこの部分は、JavaScript言語に関する事実のリポジトリとして機能します。&lt;a href=&quot;about&quot;&gt;このリファレンスの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="979cd4db3e64e3b95348dd7cbdc13acf17ee3c52" translate="yes" xml:space="preserve">
          <source>This pattern is what &lt;code&gt;&lt;a href=&quot;async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; functions are built on top of.</source>
          <target state="translated">このパターンは、 &lt;code&gt;&lt;a href=&quot;async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 関数がその上に構築されるものです。</target>
        </trans-unit>
        <trans-unit id="24899ef6e799fafad90014f7131779dab0d21866" translate="yes" xml:space="preserve">
          <source>This phenomenon may confuse you in a situation like the following. The instruction &lt;code&gt;let n of n.a&lt;/code&gt; is already inside the private scope of the &lt;u&gt;for loop's block&lt;/u&gt;, hence the identifier&lt;strong&gt; &quot;n.a&quot;&lt;/strong&gt; is resolved to the property 'a' of the &lt;u&gt;'n' object located in the first part of the instruction itself&lt;/u&gt; (&quot;let n&quot;), which is still in the temporal dead zone since its declaration statement has not been reached and &lt;strong&gt;terminated&lt;/strong&gt;.</source>
          <target state="translated">この現象は、次のような状況で混乱する可能性があります。 &lt;code&gt;let n of n.a&lt;/code&gt; 命令はすでに&lt;u&gt;forループのblock&lt;/u&gt;のプライベートスコープ内にあるため、識別子&lt;strong&gt;「na」&lt;/strong&gt;は&lt;u&gt;、命令自体の最初の部分にある「n」オブジェクト&lt;/u&gt;のプロパティ「a」に解決され&lt;u&gt;ます&lt;/u&gt;（「let n &quot;）。宣言ステートメントに到達していないため、一時的なデッドゾーンにあり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="937f40e5237ef7b0264a21cd7f210b57dc6843bc" translate="yes" xml:space="preserve">
          <source>This phenomenon may confuse you in a situation like the following. The instruction &lt;code&gt;let n of n.a&lt;/code&gt; is already inside the private scope of the for loop's block. So, the identifier &lt;code&gt;n.a&lt;/code&gt; is resolved to the property '&lt;code&gt;a&lt;/code&gt;' of the '&lt;code&gt;n&lt;/code&gt;' object located in the first part of the instruction itself (&lt;code&gt;let n&lt;/code&gt;).</source>
          <target state="translated">この現象は、次のような状況で混乱する可能性があります。 &lt;code&gt;let n of n.a&lt;/code&gt; 命令は、すでにforループのブロックのプライベートスコープ内にあります。したがって、識別子 &lt;code&gt;n.a&lt;/code&gt; は、命令自体の最初の部分にある' &lt;code&gt;n&lt;/code&gt; 'オブジェクトのプロパティ ' &lt;code&gt;a&lt;/code&gt; 'に解決されます（ &lt;code&gt;let n&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e3c84e7611673a5e2c6ffc14c37964b05fe32994" translate="yes" xml:space="preserve">
          <source>This polyfill covers the main use case, which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.</source>
          <target state="translated">このポリフィルは、プロトタイプが選択されているが第2引数を考慮に入れない新規オブジェクトを作成するという主なユースケースをカバーしています。</target>
        </trans-unit>
        <trans-unit id="fe30a72a0c38324d405058ca91860820ecbc46cd" translate="yes" xml:space="preserve">
          <source>This prevents authors from creating an explicit &lt;code&gt;Symbol&lt;/code&gt; wrapper object instead of a new symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, &lt;code&gt;new Boolean&lt;/code&gt;, &lt;code&gt;new String&lt;/code&gt; and &lt;code&gt;new Number&lt;/code&gt;).</source>
          <target state="translated">これにより、作成者は新しいシンボル値の代わりに明示的な &lt;code&gt;Symbol&lt;/code&gt; ラッパーオブジェクトを作成できなくなり、プリミティブデータ型（たとえば、 &lt;code&gt;new Boolean&lt;/code&gt; 、 &lt;code&gt;new String&lt;/code&gt; 、 &lt;code&gt;new Number&lt;/code&gt; ）の周りに明示的なラッパーオブジェクトを作成できるため、驚くかもしれません。</target>
        </trans-unit>
        <trans-unit id="dd869962a817927e401d4f9a67bc9dcc9a5752d8" translate="yes" xml:space="preserve">
          <source>This problem appears frequently when combined with a filter (&lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/typedarray/filter&quot;&gt;&lt;code&gt;TypedArray.prototype.filter()&lt;/code&gt;&lt;/a&gt;) which will remove all elements of the list. Thus leaving none to be used as the initial value.</source>
          <target state="translated">この問題は、リストのすべての要素を削除するフィルター（&lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/typedarray/filter&quot;&gt; &lt;code&gt;TypedArray.prototype.filter()&lt;/code&gt; &lt;/a&gt;）と組み合わせると頻繁に発生します。したがって、初期値として使用されるものはありません。</target>
        </trans-unit>
        <trans-unit id="d8412d6f266972faab17f3f66c154c1239965cfe" translate="yes" xml:space="preserve">
          <source>This prohibition isn't strict mode proper because such function statements are an extension of basic ES5. But it is the recommendation of the ECMAScript committee, and browsers will implement it.</source>
          <target state="translated">このような関数文は基本的なES5の延長線上にあるので、この禁止は厳密なモード適正ではありません。しかし、これはECMAScript委員会の勧告であり、ブラウザはこれを実装するでしょう。</target>
        </trans-unit>
        <trans-unit id="202a2db44d59ddd4acaa1f18d4ffa7ecf2a16ab5" translate="yes" xml:space="preserve">
          <source>This property contains a brief description of the error if one is available or has been set. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; makes extensive use of the &lt;code&gt;message&lt;/code&gt; property for exceptions. The &lt;code&gt;message&lt;/code&gt; property combined with the &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the Error.</source>
          <target state="translated">このプロパティには、エラーが使用可能な場合または設定されている場合のエラーの簡単な説明が含まれています。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;は、例外の &lt;code&gt;message&lt;/code&gt; プロパティを広範囲に使用します。 &lt;code&gt;message&lt;/code&gt; と組み合わせるプロパティ&lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティがで使用され&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt;エラーの文字列表現を作成する方法。</target>
        </trans-unit>
        <trans-unit id="e32b98d6bdcb68b6b9679955c7a1cc5624bf529f" translate="yes" xml:space="preserve">
          <source>This property contains a brief description of the error if one is available or has been set. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; makes extensive use of the &lt;code&gt;message&lt;/code&gt; property for exceptions. The &lt;code&gt;message&lt;/code&gt; property combined with the &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the Error.</source>
          <target state="translated">このプロパティには、エラーが使用可能であるか、設定されている場合のエラーの簡単な説明が含まれています。&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;は、例外のために &lt;code&gt;message&lt;/code&gt; プロパティを広範囲に使用します。 &lt;code&gt;message&lt;/code&gt; と組み合わせるプロパティ&lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティがで使用され&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt;エラーの文字列表現を作成する方法。</target>
        </trans-unit>
        <trans-unit id="e7eb285194c539b0f44fb0a7e4f806262c8482b2" translate="yes" xml:space="preserve">
          <source>This property is deprecated, and is only functional for some non-strict functions.</source>
          <target state="translated">このプロパティは非推奨であり、いくつかの厳密でない関数に対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="f5998fce63dfca9c1fb87201411dd0ad827571fa" translate="yes" xml:space="preserve">
          <source>This property is not available anymore, but you can still use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロパティは使用できなくなりましたが、引き続き&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="5140b4e174a8279636894ee5ebea50159bccebab" translate="yes" xml:space="preserve">
          <source>This property is only present if the &lt;code&gt;notation&lt;/code&gt; is set to &quot;compact&quot;.</source>
          <target state="translated">このプロパティは、 &lt;code&gt;notation&lt;/code&gt; が「コンパクト」に設定されている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="0cf7ef2c65386430033403f11c63d24f9affc6de" translate="yes" xml:space="preserve">
          <source>This property is set only if the regular expression instance used the &lt;code&gt;&quot;g&quot;&lt;/code&gt; flag to indicate a global search, or the &lt;code&gt;&quot;y&quot;&lt;/code&gt; flag to indicate a sticky search. The following rules apply:</source>
          <target state="translated">このプロパティは、正規表現インスタンスが &lt;code&gt;&quot;g&quot;&lt;/code&gt; フラグを使用してグローバル検索を示すか、 &lt;code&gt;&quot;y&quot;&lt;/code&gt; フラグを使用してスティッキー検索を示す場合にのみ設定されます。次の規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="aab683ca27f26abb7ad2b645f8a4f2493ee2e20a" translate="yes" xml:space="preserve">
          <source>This property is set only if the regular expression instance used the &lt;code&gt;g&lt;/code&gt; flag to indicate a global search, or the &lt;code&gt;y&lt;/code&gt; flag to indicate a sticky search. The following rules apply:</source>
          <target state="translated">このプロパティは、正規表現インスタンスがグローバル検索を示すために &lt;code&gt;g&lt;/code&gt; フラグを使用した場合、またはスティッキー検索を示すために &lt;code&gt;y&lt;/code&gt; フラグを使用した場合にのみ設定されます。次のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="c71b4f06b509b029e2ed439f9b5d1f2d39373372" translate="yes" xml:space="preserve">
          <source>This property replaces the obsolete &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller&quot;&gt;&lt;code&gt;arguments.caller&lt;/code&gt;&lt;/a&gt; property of the &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">このプロパティは、&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;オブジェクトの廃止された&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller&quot;&gt; &lt;code&gt;arguments.caller&lt;/code&gt; &lt;/a&gt;プロパティを置き換えます。</target>
        </trans-unit>
        <trans-unit id="2320fa0c41f8739c3c394cbe2f1188606b3e3f28" translate="yes" xml:space="preserve">
          <source>This property returns the number of code units in the string. &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by &lt;code&gt;length&lt;/code&gt; to not match the actual number of characters in the string.</source>
          <target state="translated">このプロパティは、文字列内のコード単位の数を返します。JavaScriptで使用される文字列形式である&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;は、最も一般的な文字を表すために単一の16ビットコード単位を使用しますが、あまり一般的に使用されない文字には2つのコード単位を使用する必要があるため、 &lt;code&gt;length&lt;/code&gt; によって返される値が文字列の実際の文字数と一致しません。</target>
        </trans-unit>
        <trans-unit id="51f7df5a59f1072af28236cee6828da432beb411" translate="yes" xml:space="preserve">
          <source>This provides developers with a way to include custom data inside wasm modules for other purposes, for example the &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section&quot;&gt;name custom section&lt;/a&gt;, which allows developers to provide names for all the functions and locals in the module (like &quot;symbols&quot; in a native build).</source>
          <target state="translated">これにより、開発者は他の目的のためにwasmモジュール内にカスタムデータを含めることができます。たとえば、&lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section&quot;&gt;カスタムセクション&lt;/a&gt;の名前を使用すると、モジュール内のすべての関数とローカル（ネイティブビルドの「シンボル」のような）に名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="4111ee54927f5e20a9a2557a5ce105b1380bc928" translate="yes" xml:space="preserve">
          <source>This proxy extends an array with some utility features. As you see, you can flexibly &quot;define&quot; properties without using &lt;a href=&quot;object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt;. This example can be adapted to find a table row by its cell. In that case, the target will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/table.rows&quot;&gt;&lt;code&gt;table.rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロキシは、いくつかのユーティリティ機能で配列を拡張します。ご覧のとおり、&lt;a href=&quot;object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties&lt;/code&gt; &lt;/a&gt;を使用せずにプロパティを柔軟に「定義」できます。この例は、セルによってテーブル行を見つけるように構成できます。その場合、ターゲットは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/table.rows&quot;&gt; &lt;code&gt;table.rows&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="82d934c9f1a0b8ea09917dc15c4260459f515c79" translate="yes" xml:space="preserve">
          <source>This proxy extends an array with some utility features. As you see, you can flexibly &quot;define&quot; properties without using &lt;a href=&quot;object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt;. This example can be adapted to find a table row by its cell. In that case, the target will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows&quot;&gt;&lt;code&gt;table.rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロキシは、いくつかのユーティリティ機能でアレイを拡張します。ご覧のとおり、&lt;a href=&quot;object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties&lt;/code&gt; &lt;/a&gt;を使用せずに、プロパティを柔軟に「定義」できます。この例は、セルごとにテーブルの行を見つけるように適合させることができます。その場合、ターゲットは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows&quot;&gt; &lt;code&gt;table.rows&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="01d23dbd17d04a53d683524917699a6da5b9ca70" translate="yes" xml:space="preserve">
          <source>This recursive function is missing a base case. As there is no exit condition, the function will call itself infinitely.</source>
          <target state="translated">この再帰関数にはベースケースがありません。終了条件がないので、この関数は無限に自分自身を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bdcaea2351fa8298ed886d1f656da74f45e12f03" translate="yes" xml:space="preserve">
          <source>This recursive function runs 10 times, as per the exit condition.</source>
          <target state="translated">この再帰関数は、終了条件通りに10回実行されます。</target>
        </trans-unit>
        <trans-unit id="05dc7fe080ac4ecf0e0f1db5006196f0ac948fd9" translate="yes" xml:space="preserve">
          <source>This results in shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing. It can also be helpful while exploring the content of an object when there's no known guarantee as to which properties are required.</source>
          <target state="translated">これにより、参照が見つからない可能性がある場合に、連鎖したプロパティにアクセスする際に、より短くシンプルな表現が可能になります。また、どのプロパティが必要なのか保証されていない場合に、オブジェクトの内容を調べる際にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="6d7fe022c1b8d346cdb3559df2027563a8d076f9" translate="yes" xml:space="preserve">
          <source>This returns 2 because in floating points, the value is actually the decimal trailing &quot;1&quot; except for in subnormal precision cases such as zero.</source>
          <target state="translated">浮動小数点の場合、ゼロのような正規の精度以下の場合を除いて、実際には10進数の末尾の &quot;1 &quot;が値となるため、これは2を返します。</target>
        </trans-unit>
        <trans-unit id="cffba478216f1d53d5fd2660d7146f1f6f21e730" translate="yes" xml:space="preserve">
          <source>This script displays the following text:</source>
          <target state="translated">このスクリプトは以下のテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="fc5e8aa3503a78d527035852a3bb3a3c978f762a" translate="yes" xml:space="preserve">
          <source>This script displays the following:</source>
          <target state="translated">このスクリプトでは以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="dd82a7a8c7d4b2a36b690c950052c93a110723dd" translate="yes" xml:space="preserve">
          <source>This script writes:</source>
          <target state="translated">このスクリプトは書きます。</target>
        </trans-unit>
        <trans-unit id="3a8a92244d2d79390941df48f29fed6be1f59072" translate="yes" xml:space="preserve">
          <source>This section contains implementation-specific behavior that can be inconsistent across implementations.</source>
          <target state="translated">このセクションには、実装間で矛盾する可能性のある実装固有の動作が含まれています。</target>
        </trans-unit>
        <trans-unit id="198fa1f611aa1104a2859f811e9f295e9ca65672" translate="yes" xml:space="preserve">
          <source>This section lists all the handler functions you can define. Handler functions are sometimes called &lt;em&gt;traps&lt;/em&gt;, because they trap calls to the underlying target object.</source>
          <target state="translated">このセクションでは、定義できるすべてのハンドラー関数をリストします。ハンドラ関数が呼ばれることもありますされている&lt;em&gt;トラップ&lt;/em&gt;根底にある目標物への彼らのトラップコールので、。</target>
        </trans-unit>
        <trans-unit id="55ef13a1e73329e726feb2ef079106cad9f434f9" translate="yes" xml:space="preserve">
          <source>This should work:</source>
          <target state="translated">これはうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="57425f37455982cba70a01c510cce95685b95c23" translate="yes" xml:space="preserve">
          <source>This small example shows the mechanism of a &lt;code&gt;Promise&lt;/code&gt;. The &lt;code&gt;testPromise()&lt;/code&gt; method is called each time the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt; is clicked. It creates a promise that will be fulfilled, using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;, to the promise count (number starting from 1) every 1-3 seconds, at random. The &lt;code&gt;Promise()&lt;/code&gt; constructor is used to create the promise.</source>
          <target state="translated">この小さな例は、 &lt;code&gt;Promise&lt;/code&gt; のメカニズムを示しています。 &lt;code&gt;testPromise()&lt;/code&gt; メソッドはたびに呼び出され&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt; &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; &lt;/a&gt;クリックされました。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt; &lt;code&gt;window.setTimeout()&lt;/code&gt; &lt;/a&gt;を使用して、1〜3秒ごとにランダムにプロミスカウント（1から始まる数値）に応じられるプロミスを作成します。 &lt;code&gt;Promise()&lt;/code&gt; コンストラクタは約束を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="972d14a331e7e6b9052bc3420e7e6e7f39917288" translate="yes" xml:space="preserve">
          <source>This snippet generates an array of 3 objects in the desired format without using a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">このスニペットは、 &lt;code&gt;for&lt;/code&gt; ループを使用せずに、3つのオブジェクトの配列を目的の形式で生成します。</target>
        </trans-unit>
        <trans-unit id="53341a59cc29d0476aae7b7ae1e4c3d989b12ca1" translate="yes" xml:space="preserve">
          <source>This statement creates &lt;code&gt;myCar&lt;/code&gt; and assigns it the specified values for its properties. Then the value of &lt;code&gt;myCar.make&lt;/code&gt; is the string &quot;Eagle&quot;, &lt;code&gt;myCar.year&lt;/code&gt; is the integer 1993, and so on.</source>
          <target state="translated">このステートメントは &lt;code&gt;myCar&lt;/code&gt; を作成し、そのプロパティに指定された値を割り当てます。この場合、 &lt;code&gt;myCar.make&lt;/code&gt; の値は文字列「Eagle」、 &lt;code&gt;myCar.year&lt;/code&gt; は整数1993などです。</target>
        </trans-unit>
        <trans-unit id="75afc102c7b3254dfeceb06e6c8c171d8bc37a92" translate="yes" xml:space="preserve">
          <source>This statement creates &lt;code&gt;mycar&lt;/code&gt; and assigns it the specified values for its properties. Then the value of &lt;code&gt;mycar.make&lt;/code&gt; is the string &quot;Eagle&quot;, &lt;code&gt;mycar.year&lt;/code&gt; is the integer 1993, and so on.</source>
          <target state="translated">このステートメントは &lt;code&gt;mycar&lt;/code&gt; を作成し、それにプロパティの指定された値を割り当てます。次に、 &lt;code&gt;mycar.make&lt;/code&gt; の値は文字列「Eagle」、 &lt;code&gt;mycar.year&lt;/code&gt; は整数1993などです。</target>
        </trans-unit>
        <trans-unit id="d4fdd4777e071bdcffbfcfe8ccadf9de6f044a61" translate="yes" xml:space="preserve">
          <source>This syntax has a trap that has &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;already bitten&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;a major site&lt;/a&gt;: it isn't possible to blindly concatenate conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Obviously, concatenation of scripts is never ideal, but if you must, consider enabling strict on a function-by-function basis.</source>
          <target state="translated">この構文には、&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;すでに&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;主要なサイトを&lt;/a&gt;噛んでいるトラップがあります。競合するスクリプトを盲目的に連結することはできません。厳密モードのスクリプトを非厳密モードのスクリプトと連結することを検討してください。連結全体が厳密に見えます。逆もまた真です。非厳密プラス厳密は非厳密に見えます。明らかに、スクリプトの連結は決して理想的ではありませんが、必要な場合は、関数ごとにstrictを有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="94b85c795c1bd21e753a02bbb64f696799e5dcf5" translate="yes" xml:space="preserve">
          <source>This syntax has a trap that has &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;already bitten&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;a major site&lt;/a&gt;: it isn't possible to blindly concatenate conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Obviously, concatentation of scripts is never ideal, but if you must, consider enabling strict on a function-by-function basis.</source>
          <target state="translated">この構文には、&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;すでに&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;主要なサイトに&lt;/a&gt;かみついている罠があります。競合するスクリプトを盲目的に連結することはできません。厳格モードのスクリプトと非厳格モードのスクリプトを連結することを検討してください。連結全体が厳格に見えます！逆も当てはまります。非厳格と厳格は非厳格に見えます。明らかに、スクリプトの連結は決して理想的ではありませんが、必要な場合は、関数ごとにstrictを有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="d79411a38550f1777768ec88eb728359a1fabc0b" translate="yes" xml:space="preserve">
          <source>This tests for a global &lt;code&gt;Intl&lt;/code&gt; object, checks that it's not &lt;code&gt;null&lt;/code&gt; and that it has a &lt;code&gt;NumberFormat&lt;/code&gt; property that is a function.</source>
          <target state="translated">これは、グローバル &lt;code&gt;Intl&lt;/code&gt; オブジェクトをテストし、それが &lt;code&gt;null&lt;/code&gt; ではないこと、および関数である &lt;code&gt;NumberFormat&lt;/code&gt; プロパティがあることを確認します。</target>
        </trans-unit>
        <trans-unit id="0c7b2dfd21538cefc6243b00c498ce94e98de0bc" translate="yes" xml:space="preserve">
          <source>This trap can intercept these operations:</source>
          <target state="translated">このトラップは、これらの操作を傍受することができます。</target>
        </trans-unit>
        <trans-unit id="44780b8b6d104dea26bfef46597862478326e5ef" translate="yes" xml:space="preserve">
          <source>This unpacks the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;displayName&lt;/code&gt; and &lt;code&gt;firstName&lt;/code&gt; from the user object and prints them.</source>
          <target state="translated">これにより、ユーザーオブジェクトから &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;displayName&lt;/code&gt; 、 &lt;code&gt;firstName&lt;/code&gt; がアンパックされ、出力されます。</target>
        </trans-unit>
        <trans-unit id="2e72e3a3418ec2d204fbf9885686c8cee5ab7178" translate="yes" xml:space="preserve">
          <source>This used to change a value on the global object which is rarely the expected effect. If you really want to set a value to the global object, pass it as an argument and explicitly assign it as a property:</source>
          <target state="translated">これは、グローバル・オブジェクトの値を変更していましたが、期待していた効果はほとんどありませんでした。本当にグローバルオブジェクトに値を設定したい場合は、引数として渡し、明示的にプロパティとして代入します。</target>
        </trans-unit>
        <trans-unit id="321fdbbee133de6d338ef5ef7c8b1150d19ef59b" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; function to remove the enumerable keys (obtained with &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) from a list of all keys (obtained with &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;) leaving only the non-enumerable keys.</source>
          <target state="translated">これは、&lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;関数を使用して、列挙可能なキー（&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; で&lt;/a&gt;取得）をすべてのキー（ &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; で取得）のリストから削除し、列挙できないキーのみを残します。</target>
        </trans-unit>
        <trans-unit id="71fc3bcdf532ca114046a8f9b6f3e72e4c6060de" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; function to remove the enumerable keys (obtained with &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) from a list of all keys (obtained with &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;) thus giving only the non-enumerable keys as output.</source>
          <target state="translated">これは、&lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;関数を使用して、すべてのキー（ &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; で取得）のリストから列挙可能なキー（&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; で&lt;/a&gt;取得）を削除し、列挙不可能なキーのみを出力として提供します。 。</target>
        </trans-unit>
        <trans-unit id="3c02e9c7a3c452cf4739f32629f3bba5108e1474" translate="yes" xml:space="preserve">
          <source>This value behaves slightly differently than mathematical infinity:</source>
          <target state="translated">この値は、数学的な無限大とは少し違った振る舞いをします。</target>
        </trans-unit>
        <trans-unit id="00be7e991d66825c1ced6628eaf258a6382e117a" translate="yes" xml:space="preserve">
          <source>This value behaves slightly differently than mathematical infinity; see &lt;a href=&quot;number/positive_infinity&quot;&gt;&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">この値は、数学的な無限大とは少し異なる動作をします。詳細については、&lt;a href=&quot;number/positive_infinity&quot;&gt; &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7fffb9a86edf50e0f87a0b2a9c08748436821f09" translate="yes" xml:space="preserve">
          <source>This value indicates:</source>
          <target state="translated">この値が示しています。</target>
        </trans-unit>
        <trans-unit id="48034df0e320e5ef796a29033dc21b65f9f3b5a7" translate="yes" xml:space="preserve">
          <source>This version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.</source>
          <target state="translated">このバージョンは、指定されたインデックス位置の前にBMP以外の文字が存在するかどうかが不明な場合に、forループなどで使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="b0a97fea9fad05d93f86710b42ddab43931ceeba" translate="yes" xml:space="preserve">
          <source>This way, in another script, we could have:</source>
          <target state="translated">このように、別の台本では</target>
        </trans-unit>
        <trans-unit id="fe9a5081a4c414346879b2f958aec2a00dc20419" translate="yes" xml:space="preserve">
          <source>This will always be &lt;code&gt;false&lt;/code&gt;. (&lt;code&gt;!mycar&lt;/code&gt; will be evaluated before &lt;code&gt;instanceof&lt;/code&gt;, so you always try to know if a boolean is an instance of &lt;code&gt;Car&lt;/code&gt;).</source>
          <target state="translated">これは常に &lt;code&gt;false&lt;/code&gt; になります。（ &lt;code&gt;!mycar&lt;/code&gt; は &lt;code&gt;instanceof&lt;/code&gt; の前に評価されるため、ブール値が &lt;code&gt;Car&lt;/code&gt; のインスタンスであるかどうかを常に確認しようとします）。</target>
        </trans-unit>
        <trans-unit id="eb0e28917792ec578dc71cec340d6470748b6262" translate="yes" xml:space="preserve">
          <source>This will create a pseudo-property &lt;code&gt;latest&lt;/code&gt; for object &lt;code&gt;obj&lt;/code&gt;, which will return the last array item in &lt;code&gt;log&lt;/code&gt;.</source>
          <target state="translated">これにより、オブジェクト &lt;code&gt;obj&lt;/code&gt; の &lt;code&gt;latest&lt;/code&gt; 疑似プロパティが作成され、 &lt;code&gt;log&lt;/code&gt; の最後の配列項目が返されます。</target>
        </trans-unit>
        <trans-unit id="37a760abd8402149b9ad72f21d3ac28804ce7d37" translate="yes" xml:space="preserve">
          <source>This will define a pseudo-property &lt;code&gt;current&lt;/code&gt; of object language that, when assigned a value, will update &lt;code&gt;log&lt;/code&gt; with that value:</source>
          <target state="translated">これにより、オブジェクト言語の疑似プロパティ &lt;code&gt;current&lt;/code&gt; が定義され、値が割り当てられると、その値で &lt;code&gt;log&lt;/code&gt; が更新されます。</target>
        </trans-unit>
        <trans-unit id="3cefb4be8f41f052ae7fd64b565e044e7ac52ef9" translate="yes" xml:space="preserve">
          <source>This will log a message containing 'hello world!'.</source>
          <target state="translated">これは、'hello world!'を含むメッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="23e59f9e3a66f884c91f809acf557e7ebb34688a" translate="yes" xml:space="preserve">
          <source>This will log a message containing &lt;code&gt;'hello world!'&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;'hello world!'&lt;/code&gt; を含むメッセージがログに記録されます。。</target>
        </trans-unit>
        <trans-unit id="9cee2a4ecc0015ec63b3c281e6605427d41fcd66" translate="yes" xml:space="preserve">
          <source>This will make the currency bold, when using the &lt;code&gt;formatToParts()&lt;/code&gt; method.</source>
          <target state="translated">これにより、 &lt;code&gt;formatToParts()&lt;/code&gt; メソッドを使用すると、通貨が太字になります。</target>
        </trans-unit>
        <trans-unit id="8028172fe00091f1c1cf3fccd5b1a1ed5fc5633e" translate="yes" xml:space="preserve">
          <source>This will make the day period bold, when using the &lt;code&gt;formatToParts()&lt;/code&gt; method.</source>
          <target state="translated">これにより、 &lt;code&gt;formatToParts()&lt;/code&gt; メソッドを使用する場合、その日の期間が太字になります。</target>
        </trans-unit>
        <trans-unit id="7b981c7b156731dee59fa70a3a4d07e3181b03de" translate="yes" xml:space="preserve">
          <source>This will work:</source>
          <target state="translated">これなら大丈夫。</target>
        </trans-unit>
        <trans-unit id="100ed6381b382eab7586beb70a7b65e5f7d35b63" translate="yes" xml:space="preserve">
          <source>This works with &lt;a href=&quot;#Dynamic_Imports&quot;&gt;dynamic imports&lt;/a&gt; as well:</source>
          <target state="translated">これは&lt;a href=&quot;#Dynamic_Imports&quot;&gt;動的インポート&lt;/a&gt;でも機能します。</target>
        </trans-unit>
        <trans-unit id="636db55917614035fe1b036f236d448914b79ae3" translate="yes" xml:space="preserve">
          <source>This would be correct:</source>
          <target state="translated">これは正しいでしょう。</target>
        </trans-unit>
        <trans-unit id="188c51ce091fb6e829236976f947e1e4bce2a47f" translate="yes" xml:space="preserve">
          <source>This would work, for example:</source>
          <target state="translated">これは、例えば、うまくいくでしょう。</target>
        </trans-unit>
        <trans-unit id="9410a411b7f52a1be65e72497f953473df6e2875" translate="yes" xml:space="preserve">
          <source>This, however, returns &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; in Firefox:</source>
          <target state="translated">ただし、これはFirefoxで&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="09a7b6c28e17a2a60b04a76384d6bb9623973bd2" translate="yes" xml:space="preserve">
          <source>Three things to note about declared and undeclared variables:</source>
          <target state="translated">宣言された変数と宣言されていない変数について注意すべき3つのこと。</target>
        </trans-unit>
        <trans-unit id="a870888fa60e764069405b004c2fe3eab15ca774" translate="yes" xml:space="preserve">
          <source>Throw an object</source>
          <target state="translated">オブジェクトを投げる</target>
        </trans-unit>
        <trans-unit id="24ec8833996f8992a0b4c3785e514bcae986e6ab" translate="yes" xml:space="preserve">
          <source>Throwing a custom error</source>
          <target state="translated">カスタムエラーのスロー</target>
        </trans-unit>
        <trans-unit id="6ba4891001405ff1a4ec6b1cfe33bd10ec6a01cc" translate="yes" xml:space="preserve">
          <source>Throwing a generic error</source>
          <target state="translated">一般的なエラーを投げる</target>
        </trans-unit>
        <trans-unit id="c389a8efc2390a1aa64a95dbca196af84249da0f" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such as it would read beyond the end of the view.</source>
          <target state="translated">ビューの終わりを超えて読み取るような &lt;code&gt;byteOffset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="0922a946a5169cd26976b7ef72965c11c56aef37" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such as it would store beyond the end of the view.</source>
          <target state="translated">ビューの終わりを超えて格納するように &lt;code&gt;byteOffset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="7070a9dd42f3db810c974d3e5ed962308476f7e1" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such that it would read beyond the end of the view.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; がビューの終わりを超えて読み取られるように設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="c5cda195c951922ed78778cc7b820fe784bf89b7" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such that it would store beyond the end of the view.</source>
          <target state="translated">ビューの終わりを超えて格納されるように &lt;code&gt;byteOffset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="3e91d77e2cbdd56a77448393bc4f5e96543cdd4a" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; or &lt;code&gt;byteLength&lt;/code&gt; parameter values result in the view extending past the end of the buffer.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; または &lt;code&gt;byteLength&lt;/code&gt; パラメーター値の結果、ビューがバッファーの終わりを超えて拡張される場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="bb3234934bcd796fdf4ef1e5d3add12530cfe9e2" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;offset&lt;/code&gt; is set such as it would store beyond the end of the typed array.</source>
          <target state="translated">型付き配列の終わりを超えて格納するような &lt;code&gt;offset&lt;/code&gt; が設定されている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="b8da8f7f44eb2e8aad25d07636127923f72337fc" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;Global_objects/SyntaxError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; if the property is an own non-configurable property.</source>
          <target state="translated">スロー&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;Global_objects/SyntaxError&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;プロパティが自身の非構成可能性である場合。</target>
        </trans-unit>
        <trans-unit id="d767214910c80de840f71784865caecc6fb0b66e" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict mode&lt;/code&gt;&lt;/a&gt; if the property is an own non-configurable property.</source>
          <target state="translated">例外&lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;して&lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict mode&lt;/code&gt; &lt;/a&gt;プロパティは自身の非構成可能なプロパティである場合。</target>
        </trans-unit>
        <trans-unit id="d976806ffa3ac78e1eec4fa41bb8e665570edeb7" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; is out of bounds in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">例外&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;あれば、 &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; で範囲外の &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3d5a15ba4e2883562ccc781325a904f1c1ed200" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;index&lt;/code&gt; is out of bounds in the &lt;code&gt;typedArray&lt;/code&gt;.</source>
          <target state="translated">例外&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;あれば、 &lt;code&gt;index&lt;/code&gt; で範囲外の &lt;code&gt;typedArray&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6a99a2a7ba0910c50ad732908be04470cf0773c" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; exception if the string to parse is not valid JSON.</source>
          <target state="translated">解析する文字列が有効なJSONでない場合、&lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;例外をスローします。</target>
        </trans-unit>
        <trans-unit id="a4ac5c3d480d82b0a12a86f5a24ea2f76f4f7901" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;BigInt value can't be serialized in JSON&quot;) when trying to stringify a &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">BigInt値を文字&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;しようとすると、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（ &quot;BigInt値をJSONでシリアル化できません&quot;）をスローします。</target>
        </trans-unit>
        <trans-unit id="9b742f071cb53d20fd249f8f0e5f93c441ae76fb" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;cyclic object value&quot;) exception when a circular reference is found.</source>
          <target state="translated">循環参照が見つかった場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（「循環オブジェクト値」）例外をスローします。</target>
        </trans-unit>
        <trans-unit id="c5dfdfcd952515fb76b078b574cbd5677fc65b9f" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; is to be modified is non-extensible according to &lt;a href=&quot;isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;. Does nothing if the &lt;code&gt;prototype&lt;/code&gt; parameter isn't an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; (i.e., number, string, boolean, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;). Otherwise, this method changes the &lt;code&gt;[[Prototype]]&lt;/code&gt; of &lt;code&gt;obj&lt;/code&gt; to the new value.</source>
          <target state="translated">&lt;code&gt;[[Prototype]]&lt;/code&gt; が変更されるオブジェクトが&lt;a href=&quot;isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;に従って拡張できない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外をスローします。 &lt;code&gt;prototype&lt;/code&gt; パラメータがオブジェクトまたは&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; で&lt;/a&gt;ない場合（つまり、数値、文字列、ブール値、または&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;）、何もしません。それ以外の場合、このメソッドは &lt;code&gt;obj&lt;/code&gt; の &lt;code&gt;[[Prototype]]&lt;/code&gt; を新しい値に変更します。</target>
        </trans-unit>
        <trans-unit id="3333628f0ecce9f8df87cce1b8b5ea238120f628" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is not a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; が共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; で&lt;/a&gt;ない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;スローします。</target>
        </trans-unit>
        <trans-unit id="93d661497f452e06f5e196f867d1ebf61ee1cfad" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is not one of the allowed integer types.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; が許可された整数型の1つでない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="5397c200d2a2ee90e06e0032022137c360cfe34b" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; がInt32Arrayでない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7ed853f33a922f8707507e2c55422e5484a7c330" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; が共有&lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; で&lt;/a&gt;ない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;スローします。</target>
        </trans-unit>
        <trans-unit id="7b0b3b69354d9aa876d74badc3490211a69d9c9a" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a shared typed array type.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; が共有の型付き配列型でない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="48c5d4bb1483df722a7363fcd4779e6ef9f37814" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not one of the allowed integer types.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; が許可された整数型のいずれでもない場合、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="6379845ba68b9ce053f692a29e59dd73bac1533b" translate="yes" xml:space="preserve">
          <source>Throws a user-defined exception.</source>
          <target state="translated">ユーザー定義の例外をスローします。</target>
        </trans-unit>
        <trans-unit id="1900005b555b636b4c5a98c47e3b5430ad9cce7e" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when &lt;code&gt;&lt;em&gt;encodedURI&lt;/em&gt;&lt;/code&gt; contains invalid character sequences.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;encodedURI&lt;/em&gt;&lt;/code&gt; に無効な文字シーケンスが含まれている場合、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;（「不正なURIシーケンス」）例外が&lt;em&gt;スローさ&lt;/em&gt;れます。</target>
        </trans-unit>
        <trans-unit id="ade68e28b40dd65aa4ae02bf634b315bc9197553" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when &lt;code&gt;&lt;var&gt;encodedURI&lt;/var&gt;&lt;/code&gt; contains invalid character sequences.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;encodedURI&lt;/var&gt;&lt;/code&gt; に無効な文字シーケンスが含まれている場合、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;（「不正な形式のURIシーケンス」）例外をスローします。</target>
        </trans-unit>
        <trans-unit id="d0596e3edf384baf6965162fe31f6e5aeabf2b6d" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when used wrongly.</source>
          <target state="translated">誤って使用すると、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;（「不正なURIシーケンス」）例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7679a34cdca145043e71acfbd4afa3f6f45b224c" translate="yes" xml:space="preserve">
          <source>Throws an error to a generator (also finishes the generator, unless caught from within that generator).</source>
          <target state="translated">ジェネレーターにエラーをスローします(そのジェネレーターの中からキャッチされない限り、ジェネレーターも終了します)。</target>
        </trans-unit>
        <trans-unit id="cd29b66a9ed7f4874f06db4d5590c606798c05ae" translate="yes" xml:space="preserve">
          <source>Throws an error to a generator. This corresponds to the &lt;code&gt;throw()&lt;/code&gt; method in the ES2015 generator object.</source>
          <target state="translated">ジェネレーターにエラーをスローします。これは、ES2015ジェネレーターオブジェクトの &lt;code&gt;throw()&lt;/code&gt; メソッドに対応します。</target>
        </trans-unit>
        <trans-unit id="92298a4c89aa669c689af0dc8dbe4bc0cec2e65f" translate="yes" xml:space="preserve">
          <source>Thus from the above example of class &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;, it seems that &lt;code&gt;new.target&lt;/code&gt; points to the class definition of class which is initialized. For example, when &lt;code&gt;d&lt;/code&gt; was initialized using &lt;code&gt;new D()&lt;/code&gt;, the class definition of &lt;code&gt;D&lt;/code&gt; was printed; and similarly, in case of &lt;code&gt;c&lt;/code&gt;, the class &lt;code&gt;C&lt;/code&gt; was printed.</source>
          <target state="translated">したがって、上記のクラス &lt;code&gt;C&lt;/code&gt; と &lt;code&gt;D&lt;/code&gt; の例から、 &lt;code&gt;new.target&lt;/code&gt; は初期化されたクラスのクラス定義を指しているように見えます。たとえば、 &lt;code&gt;d&lt;/code&gt; が &lt;code&gt;new D()&lt;/code&gt; を使用して初期化された場合、 &lt;code&gt;D&lt;/code&gt; のクラス定義が出力されました。同様に、 &lt;code&gt;c&lt;/code&gt; の場合、クラス &lt;code&gt;C&lt;/code&gt; が出力されました。</target>
        </trans-unit>
        <trans-unit id="006e0d66e833b398c42cfcdef2352f749de24e90" translate="yes" xml:space="preserve">
          <source>Thus from the above example of class C and D, it seems that new.target points to the class Definition of class which is initialized. For example, when D was initialized using new, the class definition of D was printed and similarly in case of c, class C was printed</source>
          <target state="translated">このように、上記のクラスCとDの例から、new.targetは初期化されたクラスのクラス定義を指しているようです。例えばDをnewで初期化した場合、Dのクラス定義が出力され、同様にcの場合はCのクラスが出力されます。</target>
        </trans-unit>
        <trans-unit id="8869c01d48f0801606614941c0ab16d5ec6cf1de" translate="yes" xml:space="preserve">
          <source>Thus names in strict mode &lt;code&gt;eval&lt;/code&gt; code behave identically to names in strict mode code not being evaluated as the result of &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">したがって、strictモードの &lt;code&gt;eval&lt;/code&gt; コードの名前は、 &lt;code&gt;eval&lt;/code&gt; の結果として評価されないstrictモードのコードの名前と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="c6c74f1c6a27fa19af3bb0c8b1fa0d332430eda3" translate="yes" xml:space="preserve">
          <source>Thus, any routine cleanup code done in that enclosed (or the main) section before it exits, will be skipped. However, If the try-block has a finally-block, then that finally-block code will be executed first to permit any such cleanup, and THEN the other try's catch-block (or the error-generator) will get control to handle the second exception.</source>
          <target state="translated">したがって、その閉じられた(またはメインの)セクションが終了する前に行われたルーチンのクリーンアップコードはすべてスキップされます。しかし、もしtry-blockにfinal-blockがある場合、そのfinal-blockコードは、そのようなクリーンアップを許可するために最初に実行され、その後、他のtryのキャッチブロック(またはエラー生成器)は、2番目の例外を処理するために制御を取得します。</target>
        </trans-unit>
        <trans-unit id="734772e40bb6d21a7d6769a3d97371f37de54286" translate="yes" xml:space="preserve">
          <source>Thus, in the &lt;code&gt;eval()&lt;/code&gt; version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called &lt;code&gt;Date()&lt;/code&gt;. This is incredibly inefficient compared to &lt;code&gt;Function()&lt;/code&gt;.</source>
          <target state="translated">したがって、コードの &lt;code&gt;eval()&lt;/code&gt; バージョンでは、ブラウザーは、 &lt;code&gt;Date()&lt;/code&gt; と呼ばれるローカル変数があるかどうかを確認するために、コストのかかるルックアップ呼び出しを行うことを余儀なくされます。これは、 &lt;code&gt;Function()&lt;/code&gt; と比較して非常に非効率的です。</target>
        </trans-unit>
        <trans-unit id="7d5f001fb79d8a238bf76ed9526f508a6f1ac77a" translate="yes" xml:space="preserve">
          <source>Thus, in the &lt;code&gt;eval()&lt;/code&gt; version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called &lt;code&gt;Date()&lt;/code&gt;. This is incredibly innefficient compared to &lt;code&gt;Function()&lt;/code&gt;.</source>
          <target state="translated">したがって、コードの &lt;code&gt;eval()&lt;/code&gt; バージョンでは、ブラウザは、 &lt;code&gt;Date()&lt;/code&gt; と呼ばれるローカル変数があるかどうかを確認するために、コストのかかるルックアップ呼び出しを行う必要があります。これは &lt;code&gt;Function()&lt;/code&gt; と比較して信じられないほど非効率的です。</target>
        </trans-unit>
        <trans-unit id="960afc28473e8cfc97b5a580872af16e460681a1" translate="yes" xml:space="preserve">
          <source>Thus, presented below are two options for &lt;code&gt;Function.prototype.bind()&lt;/code&gt; polyfills:</source>
          <target state="translated">したがって、以下に示すのは、 &lt;code&gt;Function.prototype.bind()&lt;/code&gt; ポリフィルの2つのオプションです。</target>
        </trans-unit>
        <trans-unit id="f574601dd728a58c9403c823a24839651a07162f" translate="yes" xml:space="preserve">
          <source>Tibetan digits</source>
          <target state="translated">チベット桁</target>
        </trans-unit>
        <trans-unit id="b2ba52891c01a48629ba1937711224af337bf0ed" translate="yes" xml:space="preserve">
          <source>Time to wait in milliseconds. &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, if no time is provided.</source>
          <target state="translated">ミリ秒単位で待機する時間。時間がない場合は&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="92ea20d44a43782d3f82096f6b61daaa67b8d475" translate="yes" xml:space="preserve">
          <source>Time value or timestamp number</source>
          <target state="translated">時間値またはタイムスタンプ番号</target>
        </trans-unit>
        <trans-unit id="eefbe726359bb852a46c68aac05e3e8b07c067b6" translate="yes" xml:space="preserve">
          <source>Timestamp string</source>
          <target state="translated">タイムスタンプ文字列</target>
        </trans-unit>
        <trans-unit id="8554d053f59f2ea34bc31ee4681625faa76e305e" translate="yes" xml:space="preserve">
          <source>Timezone offset sign, either:</source>
          <target state="translated">タイムゾーンのオフセット記号、どちらか。</target>
        </trans-unit>
        <trans-unit id="91439d2bae078effb60e20bf1b961ae2a6714339" translate="yes" xml:space="preserve">
          <source>Tirhuta digits</source>
          <target state="translated">ティルフタ数字</target>
        </trans-unit>
        <trans-unit id="79697cbcd2045cc71c3c01ceb134196ebf980f06" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries()&lt;/code&gt; support in older environments that do not natively support it, you can use any of the following:</source>
          <target state="translated">ネイティブにサポートされていない古い環境で互換性のある &lt;code&gt;Object.entries()&lt;/code&gt; サポートを追加するには、次のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="735010d8962f0aecbb49e6bc825b61c55829c7cd" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries&lt;/code&gt; support in older environments that do not natively support it, you can find a demonstrational implementation of Object.entries in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; (if you don't need any support for IE), a polyfill in the &lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-shims/Object.entries&lt;/a&gt; repositories, or you can use the simple, ready to deploy polyfill listed below.</source>
          <target state="translated">ネイティブでサポートしていない古い環境で互換性のある &lt;code&gt;Object.entries&lt;/code&gt; サポートを追加するには、Object.entriesのデモ実装を&lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entriesで&lt;/a&gt;見つけることができます（IEのサポートが必要ない場合）。 、&lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-&lt;/a&gt; shims / Object.entriesリポジトリのポリフィル、または以下にリストされている、すぐに導入できるシンプルなポリフィルを使用できます。</target>
        </trans-unit>
        <trans-unit id="11e8061b160ea169ddea72755f0b856618a737a7" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.keys&lt;/code&gt; support in older environments that do not natively support it, copy the following snippet:</source>
          <target state="translated">互換性のある &lt;code&gt;Object.keys&lt;/code&gt; サポートを、ネイティブでサポートしていない古い環境に追加するには、次のスニペットをコピーします。</target>
        </trans-unit>
        <trans-unit id="05bf4d01ba615f0cd3a215a0e64d9df3bd7f545e" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.values&lt;/code&gt; support in older environments that do not natively support it, you can find a Polyfill in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; or in the &lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims/Object.values&lt;/a&gt; repositories.</source>
          <target state="translated">互換性のある &lt;code&gt;Object.values&lt;/code&gt; サポートを、ネイティブでサポートしていない古い環境に追加するには、&lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entries&lt;/a&gt;または&lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims / Object.values&lt;/a&gt;リポジトリでポリフィルを検索できます。</target>
        </trans-unit>
        <trans-unit id="e87c9dfadb234300ea044e3a6a526ff10cd3c440" translate="yes" xml:space="preserve">
          <source>To append a getter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">後でいつでも既存のオブジェクトにゲッターを追加するには、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="659eb35f4c695cf5f4dcfc2937f3da494d4e2a1e" translate="yes" xml:space="preserve">
          <source>To append a setter to an &lt;em&gt;existing&lt;/em&gt; object, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セッターを&lt;em&gt;既存の&lt;/em&gt;オブジェクトに追加するには、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="2a3e1471758522734b843aea1b4e92cd9ed7b6bb" translate="yes" xml:space="preserve">
          <source>To append a setter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">後でいつでも既存のオブジェクトにセッターを追加するには、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="348ad68185c758c2ab6212188f29897ef433df4d" translate="yes" xml:space="preserve">
          <source>To avoid having to check whether &lt;code&gt;postMessage()&lt;/code&gt; throws, &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;&lt;code&gt;self.crossOriginIsolated&lt;/code&gt;&lt;/a&gt; is being standardized (a getter that returns a boolean; &lt;code&gt;true&lt;/code&gt; if the headers are set), available in window and worker contexts.</source>
          <target state="translated">&lt;code&gt;postMessage()&lt;/code&gt; がスローされるかどうかを確認する必要をなくすために、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt; &lt;code&gt;self.crossOriginIsolated&lt;/code&gt; &lt;/a&gt;が標準化され（ブール値を返すゲッター。ヘッダーが設定されている場合は &lt;code&gt;true&lt;/code&gt; ）、ウィンドウおよびワーカーのコンテキストで使用できます。</target>
        </trans-unit>
        <trans-unit id="229057f1da598e787ee444d5057c05857da31eb2" translate="yes" xml:space="preserve">
          <source>To avoid name clashes with your global symbol keys and other (library code) global symbols, it might be a good idea to prefix your symbols:</source>
          <target state="translated">グローバルシンボルキーや他の (ライブラリコードの)グローバルシンボルとの名前の衝突を避けるために、シンボルの前にプレフィックスをつけるのは良いアイデアかもしれません。</target>
        </trans-unit>
        <trans-unit id="b126d6e2e80461da4f922af64279968f4f8c738b" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; one way to do that is to use the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method), like this:</source>
          <target state="translated">エラーを回避するには、オブジェクトに &lt;code&gt;bar&lt;/code&gt; の定義を追加するか、アクセスする前に &lt;code&gt;bar&lt;/code&gt; プロパティの存在を確認する必要があります。これを行う1つの方法は、次のように&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt;メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="cad7a96c7701e37d8b09b86ca2aa88e3150eb037" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; ways to do that include using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, or the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method, like this:</source>
          <target state="translated">エラーを回避するには、オブジェクトに &lt;code&gt;bar&lt;/code&gt; の定義を追加するか、 &lt;code&gt;bar&lt;/code&gt; プロパティの存在を確認してからアクセスする必要があります。これを行う方法には、次のように、&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子または&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt;メソッドを使用することが含まれます。</target>
        </trans-unit>
        <trans-unit id="ff71ce43fff60e2c7e40d45499a27a7de439dc4a" translate="yes" xml:space="preserve">
          <source>To avoid this just assign necessary constructor which you are going to use.</source>
          <target state="translated">これを避けるためには、必要なコンストラクタを代入するだけです。</target>
        </trans-unit>
        <trans-unit id="ef05d88a53a4e9cf7aa2df5505542ee1fc23439c" translate="yes" xml:space="preserve">
          <source>To avoid this problem (to prevent ASI), you could use parentheses:</source>
          <target state="translated">この問題を避けるために(ASIを防ぐために)括弧を使うことができます。</target>
        </trans-unit>
        <trans-unit id="3f1fb295cbfdf10675698a084f9573787dc73972" translate="yes" xml:space="preserve">
          <source>To avoid this problem, make sure that the property being assigned to inside the setter function is different from the one that initially triggered the setter.The same goes for the getter.</source>
          <target state="translated">この問題を避けるためには、セッター関数内で代入されるプロパティが、最初にセッターを起動したプロパティと異なることを確認してください。</target>
        </trans-unit>
        <trans-unit id="14166ee0fec3c194f4fc0df0688a0bc1f17feb8b" translate="yes" xml:space="preserve">
          <source>To avoid this, just assign the necessary constructor you are going to use.</source>
          <target state="translated">これを避けるためには、使用するコンストラクタに必要なものを代入するだけです。</target>
        </trans-unit>
        <trans-unit id="4ee0ee4bb579af779267dc3c125db70264731acb" translate="yes" xml:space="preserve">
          <source>To avoid this, make sure a new array is always filled with non-empty values or not write to indexes past the end of array.</source>
          <target state="translated">これを避けるためには、新しい配列が常に空ではない値で満たされていることを確認したり、配列の終わりを過ぎたインデックスには書き込みをしないようにします。</target>
        </trans-unit>
        <trans-unit id="b1f701e4f578c53ab427a079283d5ee6a7b477b0" translate="yes" xml:space="preserve">
          <source>To be a constant object, the entire reference graph (direct and indirect references to other objects) must reference only immutable frozen objects. The object being frozen is said to be immutable because the entire object &lt;em&gt;state&lt;/em&gt; (values and references to other objects) within the whole object is fixed. Note that strings, numbers, and booleans are always immutable and that Functions and Arrays are objects.</source>
          <target state="translated">定数オブジェクトになるためには、参照グラフ全体（他のオブジェクトへの直接および間接参照）は、不変の凍結オブジェクトのみを参照する必要があります。オブジェクト全体のオブジェクト&lt;em&gt;状態&lt;/em&gt;（値と他のオブジェクトへの参照）全体が固定されているため、フリーズされるオブジェクトは不変であるといいます。文字列、数値、ブール値は常に不変であり、関数と配列はオブジェクトであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de007351cb0387325d3097a635ab72efab68a96d" translate="yes" xml:space="preserve">
          <source>To be more precise, the block statement is preventing the function declaration from being &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; to the top of the scope. The function is behaving as if it were defined as a function expression and, as such, it is only the implicit variable declaration that gets hoisted to the top of the scope:</source>
          <target state="translated">より正確に言うと、ブロックステートメントにより、関数宣言がスコープの最上部に移動することが妨げ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;られ&lt;/a&gt;ています。関数は関数式として定義されているかのように動作しており、スコープの最上部に巻き上げられるのは暗黙的な変数宣言だけです。</target>
        </trans-unit>
        <trans-unit id="91d84150764106dcb84b71d84665d49643ba81c1" translate="yes" xml:space="preserve">
          <source>To be more stringent in adhering to &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt; (which reserves !, ', (, ), and *), even though these characters have no formalized URI delimiting uses, the following can be safely used:</source>
          <target state="translated">付着していないで、より厳格であるために&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt;これらの文字は何の用途を区切るURIを定式化しているにもかかわらず、（！その埋蔵量、」、（、）、および*）、以下が安全に使用することができます。</target>
        </trans-unit>
        <trans-unit id="3ed4a43645f0a2537c0221912eb5a09df85356fb" translate="yes" xml:space="preserve">
          <source>To change &quot;foo&quot; inside the if statement, you need to remove the &lt;code&gt;let&lt;/code&gt; that causes the redeclaration.</source>
          <target state="translated">ifステートメント内の「foo」を変更するには、再宣言の原因となっている &lt;code&gt;let&lt;/code&gt; を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="d405cf494444cd6fd79287277242d527e2322819" translate="yes" xml:space="preserve">
          <source>To change it, use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これを変更するには、&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="16cc73a3ccd7572782dfa5f7a136f79687bbbe73" translate="yes" xml:space="preserve">
          <source>To change it, you could use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; though.</source>
          <target state="translated">これを変更するには、&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b23e40255a27317ad4c5e7988f79e6d83e22e91b" translate="yes" xml:space="preserve">
          <source>To check if cross origin isolation has been successful, you can test against the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;crossOriginIsolated&lt;/a&gt;&lt;/code&gt; property available to window and worker contexts:</source>
          <target state="translated">クロスオリジン分離が成功したかどうかを確認するには、ウィンドウおよびワーカーコンテキストで使用可能な &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;crossOriginIsolated&lt;/a&gt;&lt;/code&gt; プロパティに対してテストできます。</target>
        </trans-unit>
        <trans-unit id="4f129204df59c5d4904a8a7b491a530f5eecaa53" translate="yes" xml:space="preserve">
          <source>To check whether an implementation supports them, use the &lt;code&gt;&quot;i&quot;&lt;/code&gt; argument (a requirement that illegal language tags are rejected) and look for a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">実装がそれらをサポートしているかどうかを確認するには、 &lt;code&gt;&quot;i&quot;&lt;/code&gt; 引数（不正な言語タグが拒否されるという要件）を使用して、&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;例外を探します。</target>
        </trans-unit>
        <trans-unit id="cf6c25e7e31c11f7c29484cdde462e57ff8e0ec5" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array ascending (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">数字の代わりに文字列を比較するために、比較関数は単純に差し引くことができ &lt;code&gt;b&lt;/code&gt; から。次の関数は、配列を昇順でソートします（ &lt;code&gt;Infinity&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; が含まれていない場合）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f0b72177be072c3cc5f16b4c720a3f88c9d6225" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array in ascending order (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">数字の代わりに文字列を比較するために、比較関数は単純に差し引くことができ &lt;code&gt;b&lt;/code&gt; から。次の関数は、配列を昇順で並べ替えます（ &lt;code&gt;Infinity&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; が含まれていない場合）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37e2da601250c750672096a3ac258a97ae0d4506" translate="yes" xml:space="preserve">
          <source>To convert a number to its string literal in a particular radix, use &lt;code&gt;&lt;var&gt;thatNumber&lt;/var&gt;.toString(&lt;var&gt;radix&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">数値を特定の基数の文字列リテラルに変換するには、 &lt;code&gt;&lt;var&gt;thatNumber&lt;/var&gt;.toString(&lt;var&gt;radix&lt;/var&gt;)&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="af4d1fa2b60b0aab96f8363f72219fd6ee63d633" translate="yes" xml:space="preserve">
          <source>To convert number to its string literal in a particular radix use &lt;code&gt;intValue.toString(radix)&lt;/code&gt;.</source>
          <target state="translated">特定の基数で数値を文字列リテラルに変換するには、 &lt;code&gt;intValue.toString(radix)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bdd25ea23fa70526ba94776a9ffa7c104991659a" translate="yes" xml:space="preserve">
          <source>To convert the non-standard expression closures syntax to standard ECMAScript syntax, you can add curly braces and return statements.</source>
          <target state="translated">非標準の式クロージャ構文を標準のECMAScript構文に変換するには、中括弧と戻り文を追加することができます。</target>
        </trans-unit>
        <trans-unit id="9c3d95d344533848c975698d3517cac4ca51dc93" translate="yes" xml:space="preserve">
          <source>To count how many elements are in a &lt;code&gt;Set&lt;/code&gt;, use &lt;a href=&quot;set/size&quot;&gt;&lt;code&gt;Set.prototype.size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; に含まれる要素の数をカウントするには、&lt;a href=&quot;set/size&quot;&gt; &lt;code&gt;Set.prototype.size&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4a70476c40d7f474041614202b80673d7ed88ad9" translate="yes" xml:space="preserve">
          <source>To create a new primitive symbol, you write &lt;code&gt;Symbol()&lt;/code&gt; with an optional string as its description:</source>
          <target state="translated">新しいプリミティブシンボルを作成するには、説明としてオプションの文字列を使用して &lt;code&gt;Symbol()&lt;/code&gt; を記述します。</target>
        </trans-unit>
        <trans-unit id="f42ab57be0173161e8fb095e478f4bbf83516c21" translate="yes" xml:space="preserve">
          <source>To create an &lt;code&gt;Intl.DisplayNames&lt;/code&gt; for a locale and get the display name for a language-script-region sequence.</source>
          <target state="translated">ロケールの &lt;code&gt;Intl.DisplayNames&lt;/code&gt; を作成し、言語-スクリプト-リージョンシーケンスの表示名を取得します。</target>
        </trans-unit>
        <trans-unit id="b821fa942f3d76819fc62e40fb9b0875ee750c45" translate="yes" xml:space="preserve">
          <source>To create an &lt;code&gt;Intl.DisplayNames&lt;/code&gt; for a locale and get the display name for a region code.</source>
          <target state="translated">ロケールの &lt;code&gt;Intl.DisplayNames&lt;/code&gt; を作成し、リージョンコードの表示名を取得します。</target>
        </trans-unit>
        <trans-unit id="68efc9860f29255f7970eec85ca9ab358e705421" translate="yes" xml:space="preserve">
          <source>To create an &lt;code&gt;Intl.DisplayNames&lt;/code&gt; for a locale and get the display name for a script code.</source>
          <target state="translated">ロケールの &lt;code&gt;Intl.DisplayNames&lt;/code&gt; を作成し、スクリプトコードの表示名を取得します。</target>
        </trans-unit>
        <trans-unit id="e94058935d2b939e3590dd6ccdfdda2800f60b3b" translate="yes" xml:space="preserve">
          <source>To create an &lt;code&gt;Intl.DisplayNames&lt;/code&gt; for a locale and get the display name for currency code.</source>
          <target state="translated">ロケールの &lt;code&gt;Intl.DisplayNames&lt;/code&gt; を作成し、通貨コードの表示名を取得します。</target>
        </trans-unit>
        <trans-unit id="78eca4ff24cae301e8c463b3113c921a5299b2f0" translate="yes" xml:space="preserve">
          <source>To customise the proxy, we define functions on the handler object:</source>
          <target state="translated">プロキシをカスタマイズするために、ハンドラオブジェクトに関数を定義します。</target>
        </trans-unit>
        <trans-unit id="1b00f2f6bb9327ee2c8dec177efb6a4af21ed29e" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself another object. See the examples below.</source>
          <target state="translated">オブジェクト・タイプを定義するには、そのオブジェクト・タイプの名前とプロパティを指定する関数を作成します。オブジェクトは、それ自体が別のオブジェクトであるプロパティを持つことができます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="4131b3bc54e63c2abd6c58d537708c1ccc9e759c" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself or another object. See the examples below.</source>
          <target state="translated">オブジェクト・タイプを定義するには、そのオブジェクト・タイプの名前とプロパティを指定する関数を作成します。オブジェクトは、それ自身または別のオブジェクトであるプロパティを持つことができます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b7c92209a721c1091a0c7a22d35353dd58f6f205" translate="yes" xml:space="preserve">
          <source>To dynamically import a module, the &lt;code&gt;import&lt;/code&gt; keyword may be called as a function. When used this way, it returns a promise.</source>
          <target state="translated">モジュールを動的にインポートするために、 &lt;code&gt;import&lt;/code&gt; キーワードを関数として呼び出すことができます。このように使用すると、promiseが返されます。</target>
        </trans-unit>
        <trans-unit id="d87c4eabb66bc009e7eab7f129b2bc8668efc006" translate="yes" xml:space="preserve">
          <source>To escape a backtick in a template literal, put a backslash (&lt;code&gt;\&lt;/code&gt;)before the backtick.</source>
          <target state="translated">テンプレートリテラルのバッククォートをエスケープするには、バッククォートの前にバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）を置きます。</target>
        </trans-unit>
        <trans-unit id="4b772057c1501138b9270507d45837bdfa729e3b" translate="yes" xml:space="preserve">
          <source>To execute multiple statements within a clause, use a block statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested &lt;code&gt;if&lt;/code&gt; statements:</source>
          <target state="translated">句内で複数のステートメントを実行するには、ブロックステートメント（ &lt;code&gt;{ ... }&lt;/code&gt; ）を使用してそれらのステートメントをグループ化します。一般的に、特にネストされた &lt;code&gt;if&lt;/code&gt; ステートメントを含むコードでは、常にブロックステートメントを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fb5b6aa172088f8e8cb00281ed35e00d5092703a" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">nullポインターを &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; 値に修正するには、たとえば、&lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt;演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="91a86984838df61ba0846a39480b0309f51a02cc" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 値へのnullポインターを修正するには、たとえば、&lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt;演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="5d0de1e00e0b24955b2e7edd966d5a8cb99b6bfe" translate="yes" xml:space="preserve">
          <source>To fix these errors, you will either need to replace the &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt; operator&lt;/a&gt; with the &lt;a href=&quot;../operators/typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt; operator&lt;/a&gt;, or to make sure you use the function name, instead of the result of its evaluation.</source>
          <target state="translated">これらのエラーを修正するには、&lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; 演算子&lt;/a&gt;を&lt;a href=&quot;../operators/typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; 演算&lt;/a&gt;子に置き換えるか、評価結果ではなく関数名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b30ab0fa15a53ce2b025fb9fcebeedead602778" translate="yes" xml:space="preserve">
          <source>To fix this code, you need to access the object like this:</source>
          <target state="translated">このコードを修正するには、このようなオブジェクトにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="0b75000801b86b4c7e3a6280f97393340f3378fc" translate="yes" xml:space="preserve">
          <source>To fix this code, you would need to add a parenthesis that closes the condition.</source>
          <target state="translated">このコードを修正するには、条件を閉じる括弧を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="86accf46f3e132880f45e8ff095e3c12c10d297a" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove line 16, where there is an attempt to set the temperature property, or you will need to implement a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt; for it, for example like this:</source>
          <target state="translated">このエラーを修正するには、温度プロパティを設定しようとしている行16を削除するか、次のように、そのための&lt;a href=&quot;../functions/set&quot;&gt;セッター&lt;/a&gt;を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="bf97dc62646ce58482960a37576e08c369e17aa5" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove the call to &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; entirely, or move it to a position so that the property is added earlier and only later the object is marked as non-extensible. Of course you can also remove the property that was attempted to be added, if you don't need it.</source>
          <target state="translated">このエラーを修正するには、&lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;への呼び出しを完全に削除するか、プロパティを以前に追加し、後でのみオブジェクトが非拡張可能としてマークされるような位置に移動する必要があります。もちろん、必要がなければ、追加しようとしたプロパティを削除することもできます。</target>
        </trans-unit>
        <trans-unit id="b4ba67838ff27fd0b5e835c26d775ab0240d0d03" translate="yes" xml:space="preserve">
          <source>To fix this warning, the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; statement can just be omitted, because the variable exists already. In other cases, you might to rename either the function parameter or the variable name.</source>
          <target state="translated">この警告を修正するには、変数がすでに存在しているため、 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; ステートメントを省略できます。他の場合では、関数パラメーターまたは変数名のいずれかの名前を変更する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="956ca320c80ca726eca3552fa06ab58884939c87" translate="yes" xml:space="preserve">
          <source>To force the base of an exponentiation expression to be a negative number:</source>
          <target state="translated">指数式の基底を強制的に負の数にすること。</target>
        </trans-unit>
        <trans-unit id="421bbcc452e2335197d911b9dedefef9f4238ca7" translate="yes" xml:space="preserve">
          <source>To free the contents of a variable, you can set it to &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">変数の内容を解放するには、変数を&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; に&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="52dba64c34ae66410ba3b4d58157ff01e4fa831f" translate="yes" xml:space="preserve">
          <source>To get Date, Month and Year or Time</source>
          <target state="translated">日付、月、年または時間を取得するには</target>
        </trans-unit>
        <trans-unit id="9e05bade19c4913cbfab30bd2bf88e465332af90" translate="yes" xml:space="preserve">
          <source>To get more information (but with slower execution), use the &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method. (This is similar to the &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt; method.)</source>
          <target state="translated">より多くの情報を取得するには（ただし実行速度は遅くなります）、&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。（これは&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;メソッドに似ています。）</target>
        </trans-unit>
        <trans-unit id="747d05132d9cc0d0814a6d6f49d6ab71a0abfb50" translate="yes" xml:space="preserve">
          <source>To get the same effect using template literals, you can now write:</source>
          <target state="translated">テンプレートリテラルを使用して同じ効果を得るために、今すぐ書けるようになりました。</target>
        </trans-unit>
        <trans-unit id="038ccd252ffc16f9a65c61b5b1a06febf39f6feb" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">これを防ぐために、2行目のようなものが使用されます。ここで、 &lt;code&gt;multiply&lt;/code&gt; が1つの引数のみで呼び出された場合、 &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="0cd3ea0c08a76d95e41cc575c73f75a27dbaa192" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;b&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">どここれを防ぐために、二行目のようなものは、使用される &lt;code&gt;b&lt;/code&gt; に設定されている &lt;code&gt;1&lt;/code&gt; 場合 &lt;code&gt;multiply&lt;/code&gt; 唯一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c97668d524a150f31ca392e34bb401cbf968f4d2" translate="yes" xml:space="preserve">
          <source>To help explain these properties and elements, see this example and then refer to the table below:</source>
          <target state="translated">これらのプロパティと要素を説明するのに役立つように、この例を見てから、下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="2281f8bdaf901641e3dec3fa6d152fcde978085a" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">メモリ使用量を改善し、メモリリークを防ぐために、Firefoxでは、アドオンが親ドキュメントが破棄された後もDOMオブジェクトへの強い参照を維持することを禁止しています。死んだオブジェクトは、DOMで破棄された後も存続するDOM要素への強力な（キープアライブ）参照を保持しています。これらの問題を回避するには、外部ドキュメントのDOMノードへの参照を代わりにそのドキュメントに固有のオブジェクトに保存し、ドキュメントがアンロードされたときにクリーンアップするか、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;弱参照&lt;/a&gt;として保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="af8a11962f2fa3f3529a0d98f145c56042a6b760" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">メモリ使用量を改善し、メモリリークを防ぐために、Firefoxは、親ドキュメントが破棄された後、アドオンがDOMオブジェクトへの強力な参照を保持することを許可していません。デッドオブジェクトは、DOMで破棄された後も存続するDOM要素への強力な（キープアライブ）参照を保持しています。これらの問題を回避するには、代わりに、外部ドキュメントのDOMノードへの参照をそのドキュメントに固有のオブジェクトに保存し、ドキュメントがアンロードされるときにクリーンアップするか、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;弱参照&lt;/a&gt;として保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="18ada6a5fe0260eaa93b8a294f2a8aa0b6e264d2" translate="yes" xml:space="preserve">
          <source>To improve readability for numeric literals, underscores (&lt;code&gt;_&lt;/code&gt;, &lt;code&gt;U+005F&lt;/code&gt;) can be used as separators:</source>
          <target state="translated">数値リテラルの読みやすさを向上させるために、アンダースコア（ &lt;code&gt;_&lt;/code&gt; 、 &lt;code&gt;U+005F&lt;/code&gt; ）を区切り文字として使用できます。</target>
        </trans-unit>
        <trans-unit id="62ae4acb76421f9729079bcd34138c41da17b09d" translate="yes" xml:space="preserve">
          <source>To include a flag with the regular expression, use this syntax:</source>
          <target state="translated">正規表現にフラグを含めるには、この構文を使用します。</target>
        </trans-unit>
        <trans-unit id="6d7b234f80319b329c9f890cf3c6fb0952c75d99" translate="yes" xml:space="preserve">
          <source>To instantiate the new objects, you then use the following:</source>
          <target state="translated">新しいオブジェクトをインスタンス化するには、次に次のようにします。</target>
        </trans-unit>
        <trans-unit id="2da07bc6be7bd717dced39e45d7ac3036fc78a69" translate="yes" xml:space="preserve">
          <source>To invert the sign of the result of an exponentiation expression:</source>
          <target state="translated">指数式の結果の符号を反転させる。</target>
        </trans-unit>
        <trans-unit id="307515a0238257589b141add168f26a6658356a9" translate="yes" xml:space="preserve">
          <source>To invoke strict mode for an entire script, put the &lt;em&gt;exact&lt;/em&gt; statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; (or &lt;code&gt;'use strict';&lt;/code&gt;) before any other statements.</source>
          <target state="translated">スクリプト全体に対してストリクトモードを呼び出すには、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; という&lt;em&gt;正確な&lt;/em&gt;ステートメントを入力します。（または &lt;code&gt;'use strict';&lt;/code&gt; ）他のステートメントの前。</target>
        </trans-unit>
        <trans-unit id="f1bb7e56e4e1c57532789b488df9a11f77ade640" translate="yes" xml:space="preserve">
          <source>To learn about the way promises work and how you can use them, we advise you to read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Using promises&lt;/a&gt; first.</source>
          <target state="translated">promiseの機能とその使用方法については、最初に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Promiseの使用&lt;/a&gt;を読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="75ac8e5447823b69e4e0fe22510dea636a6c8749" translate="yes" xml:space="preserve">
          <source>To learn more about ES2015 generators, see:</source>
          <target state="translated">ES2015のジェネレーターの詳細については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="576cfdce3de5306eb146e890163b32ca758257fd" translate="yes" xml:space="preserve">
          <source>To make &quot;bar&quot; a declared variable, you can add the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; keyword in front of it.</source>
          <target state="translated">「bar」を宣言された変数にするには、その前に &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; キーワードを追加できます。</target>
        </trans-unit>
        <trans-unit id="7f704faae950a1e35871b3c65d28aa063776d91a" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;finally&lt;/code&gt; blocks of a sync generator to be always called use appropriate form of the loop, &lt;code&gt;for await...of&lt;/code&gt; for the async generator and &lt;code&gt;for...of&lt;/code&gt; for the sync one and await yielded promises explicitly inside the loop.</source>
          <target state="translated">作るために &lt;code&gt;finally&lt;/code&gt; 、ループの同期発電機のブロックが常に呼び出される使用に適切なフォームを &lt;code&gt;for await...of&lt;/code&gt; 非同期発電機のためにと &lt;code&gt;for...of&lt;/code&gt; シンク1のため、ループ内で明示的に約束をもたらし待ちます。</target>
        </trans-unit>
        <trans-unit id="3d1fdea6be9a37db2a93137b0b09db6d812a2958" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_(graph_theory)&quot;&gt;cycles&lt;/a&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">オブジェクトを不変にするには、オブジェクト型の各プロパティを再帰的にフリーズします（ディープフリーズ）。オブジェクトに参照グラフに&lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_(graph_theory)&quot;&gt;サイクル&lt;/a&gt;が含まれていないことがわかっている場合は、設計に基づいてケースバイケースでパターンを使用してください。含まれていない場合は、無限ループがトリガーされます。 &lt;code&gt;deepFreeze()&lt;/code&gt; の拡張機能は、パス（配列など）引数を受け取る内部関数を持つことです。これにより、オブジェクトが不変になる過程で、 &lt;code&gt;deepFreeze()&lt;/code&gt; の再帰的な呼び出しを抑制できます。 [ウィンドウ]など、フリーズすべきではないオブジェクトをフリーズするリスクがあります。</target>
        </trans-unit>
        <trans-unit id="1b6d41263a3058c202ec56d40a9d6b8e1652059e" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;em&gt;Unknown prefix: Cycle_(graph_theory).&lt;/em&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">オブジェクトを不変にするには、オブジェクトタイプの各プロパティを再帰的にフリーズします（ディープフリーズ）。オブジェクトに&lt;em&gt;不明な接頭辞&lt;/em&gt;が含まれていないことがわかっている場合は、設計に基づいてケースバイケースでパターンを使用します&lt;em&gt;：Cycle_（graph_theory）。&lt;/em&gt;参照グラフでは、それ以外の場合は無限ループがトリガーされます。 &lt;code&gt;deepFreeze()&lt;/code&gt; の拡張機能は、パス（例：配列）引数を受け取る内部関数を使用することです。これにより、オブジェクトが不変になる過程で、 &lt;code&gt;deepFreeze()&lt;/code&gt; の再帰的な呼び出しを抑制できます。[ウィンドウ]のように、フリーズしてはならないオブジェクトをフリーズするリスクはまだあります。</target>
        </trans-unit>
        <trans-unit id="1efb7a94840c6df8e1529f399f820556da3a48dc" translate="yes" xml:space="preserve">
          <source>To match characters from other languages such as Cyrillic or Hebrew, use &lt;code&gt;\u&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt;, where &lt;code&gt;&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; is the character's Unicode value in hexadecimal.</source>
          <target state="translated">キリル文字やヘブライ語などの他の言語の文字と一致さ &lt;code&gt;&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; は、 &lt;code&gt;\u&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; 使用します。ここで、hhhhは16進数の文字のUnicode値です。</target>
        </trans-unit>
        <trans-unit id="cdd97829643819341bae18d4865a301c7a49ae25" translate="yes" xml:space="preserve">
          <source>To mimic the function of the &lt;code&gt;includes()&lt;/code&gt; method, this custom function returns &lt;code&gt;true&lt;/code&gt; if the element exists in the array:</source>
          <target state="translated">contains &lt;code&gt;includes()&lt;/code&gt; メソッドの関数を模倣するために、このカスタム関数は、要素が配列に存在する場合に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c99a2f7ab2302c62cb1ccbd0c741ca57d774dc7e" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;Date.now()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">タイミング攻撃とフィンガープリントに対する保護を提供するために、ブラウザの設定によっては、 &lt;code&gt;Date.now()&lt;/code&gt; の精度が丸められる場合があります。</target>
        </trans-unit>
        <trans-unit id="96915bb562bd10f7386212a4daf00e9d0be01c6c" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">タイミング攻撃とフィンガープリントに対する保護を提供するために、ブラウザの設定によっては、 &lt;code&gt;new Date().getTime()&lt;/code&gt; の精度が丸められる場合があります。</target>
        </trans-unit>
        <trans-unit id="bfcee662fb59dd61867d35e910871be399e7d731" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings. In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20&amp;micro;s in Firefox 59; in 60 it will be 2ms.</source>
          <target state="translated">タイミング攻撃やフィンガープリントからの保護を提供するために、ブラウザの設定によっては、 &lt;code&gt;new Date().getTime()&lt;/code&gt; の精度が丸められる場合があります。Firefoxでは、 &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; プリファレンスはデフォルトで有効になっており、Firefox 59ではデフォルトで20&amp;micro;sになっています。60では2msになります。</target>
        </trans-unit>
        <trans-unit id="ac37440f1ea5fb363f65d9cc2e0bc140f034f623" translate="yes" xml:space="preserve">
          <source>To pass the value of &lt;code&gt;this&lt;/code&gt; from one context to another, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; の値をあるコンテキストから別のコンテキストに渡すには、&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; を&lt;/a&gt;使用します&lt;strong&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4cf44ffc496e1c3ddaf8ae8f93838d413caef85" translate="yes" xml:space="preserve">
          <source>To perform a global search and replace, include the &lt;code&gt;g&lt;/code&gt; switch in the regular expression.</source>
          <target state="translated">グローバル検索と置換を実行するには、正規表現に &lt;code&gt;g&lt;/code&gt; スイッチを含めます。</target>
        </trans-unit>
        <trans-unit id="b008d3dd045e14a5c27739c1ad3f06fff19a840a" translate="yes" xml:space="preserve">
          <source>To prevent this, and require that different types are considered to be different, use the &lt;a href=&quot;strict_inequality&quot;&gt;strict inequality&lt;/a&gt; operator instead:</source>
          <target state="translated">これを防ぎ、異なるタイプが異なると見なされるようにするために、代わりに&lt;a href=&quot;strict_inequality&quot;&gt;厳密な不等式&lt;/a&gt;演算子を使用してください。</target>
        </trans-unit>
        <trans-unit id="ba02f6ac85f2610b49d1f81839273fbfa95e73a5" translate="yes" xml:space="preserve">
          <source>To provide a function with promise functionality, have it return a promise:</source>
          <target state="translated">プロミス機能を持つ関数を提供するには、プロミスを返すようにします。</target>
        </trans-unit>
        <trans-unit id="f23eacdabe4319920cbeec8293bbfab4a25022b3" translate="yes" xml:space="preserve">
          <source>To provide a function with promise functionality, simply have it return a promise:</source>
          <target state="translated">プロミス機能を持つ関数を提供するには、単にプロミスを返させるだけです。</target>
        </trans-unit>
        <trans-unit id="eefa6ae82f1c0d30ce5bb0a330d91982a9f8b2a7" translate="yes" xml:space="preserve">
          <source>To re-run a definition, use Scratchpad's menu Execute &amp;gt; Reload and Run.</source>
          <target state="translated">定義を再実行するには、スクラッチパッドのメニューの[実行]&amp;gt; [再読み込みして実行]を使用します。</target>
        </trans-unit>
        <trans-unit id="ca212f1a4ca5b68e70b2f13799d3d4a605bdfbe3" translate="yes" xml:space="preserve">
          <source>To remove a watchpoint, use the &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt; method. By default, the &lt;code&gt;watch&lt;/code&gt; method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ウォッチポイントを削除するには、&lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。デフォルトでは、 &lt;code&gt;watch&lt;/code&gt; メソッドは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;から派生したすべてのオブジェクトに継承されます。</target>
        </trans-unit>
        <trans-unit id="87769fb85ddf637fc522a9dfb87a72113fd21eef" translate="yes" xml:space="preserve">
          <source>To represent integers smaller than this, consider using &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これよりも小さい整数を表すには、&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="8ee6bc67f7ce03bb1e34c845d08bbc1ab32fdec2" translate="yes" xml:space="preserve">
          <source>To return a value other than the default, a function must have a &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; statement that specifies the value to return. A function without a return statement will return a default value. In the case of a &lt;a href=&quot;global_objects/object/constructor&quot;&gt;constructor&lt;/a&gt; called with the &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; keyword, the default value is the value of its &lt;code&gt;this&lt;/code&gt; parameter. For all other functions, the default return value is &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルト以外の値を返すには、関数には、 &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 値を指定するreturnステートメントが必要です。returnステートメントのない関数は、デフォルト値を返します。 &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; キーワードで呼び出される&lt;a href=&quot;global_objects/object/constructor&quot;&gt;コンストラクター&lt;/a&gt;の場合、デフォルト値は &lt;code&gt;this&lt;/code&gt; パラメーターの値です。他のすべての関数の場合、デフォルトの戻り値は&lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bbe3e5bf31754ac82a3fa0bb9dc3481a4afd3106" translate="yes" xml:space="preserve">
          <source>To return an object literal expression requires parentheses around expression:</source>
          <target state="translated">オブジェクトリテラル式を返すには、式の周りに括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="d31111b28eb9b4fc6974976c91cab6c393986b53" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">書き換えるために&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;値ができるように、文 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; で&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;うまくとして、あなたの周りにガードする必要がある&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e88d9bfb366adfc5ca7ab4e34ccc17a0c2342ad" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">書き換えるために&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;値ができるように、文 &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; で&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;うまくとして、あなたの周りにガードする必要がある&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae85078dfd808f11e87a09a90b41a86b6930269f" translate="yes" xml:space="preserve">
          <source>To see how this works, this is how it would look if the nesting were properly indented:</source>
          <target state="translated">これがどのように動作するかを確認するには、入れ子を適切にインデントした場合には、このようになります。</target>
        </trans-unit>
        <trans-unit id="6d3d253ad399aba71e8bddceac06b64b3c64fcf9" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt; by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">循環参照をシリアル化するには、それらをサポートするライブラリ（たとえば、Douglas Crockfordに&lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;よるcycle.js&lt;/a&gt;）を使用するか、循環参照を検索してシリアル化可能な値で置換（または削除）する必要があるソリューションを自分で実装します。</target>
        </trans-unit>
        <trans-unit id="61341a387a73c6e0974b541c310c31fa835bad37" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt;) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">循環参照をシリアル化するには、それらをサポートするライブラリ（&lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.jsなど&lt;/a&gt;）を使用するか、循環参照を検索してシリアル化可能な値で置き換える（または削除する）必要があるソリューションを自分で実装します。</target>
        </trans-unit>
        <trans-unit id="10e0214ad945a12c3e4bcb01423a2eee0fe2f7da" translate="yes" xml:space="preserve">
          <source>To set the value of &lt;code&gt;this&lt;/code&gt; to a particular value when calling a function, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; as in the examples below.</source>
          <target state="translated">関数を呼び出すときに &lt;code&gt;this&lt;/code&gt; 値を特定の値に設定するには、以下の例のように&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="66dfb8b03b279299af3ce7e3e3995c740c761e43" translate="yes" xml:space="preserve">
          <source>To share memory using &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects from one agent in the cluster to another (an agent is either the web page&amp;rsquo;s main program or one of its web workers), &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;structured cloning&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;オブジェクトを使用してクラスター内の1つのエージェントから別のエージェントに（エージェントはWebページのメインプログラムまたはそのWebワーカーの1つです）を使用してメモリを共有するには、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;構造化複製&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="4c69f72f8a8e1556fbbba4284e4de161a49d7aa0" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">これを解決するには、 &lt;code&gt;Math.fround()&lt;/code&gt; を使用して64ビットfloatを32ビットfloatにキャストできます。内部的には、JavaScriptは数値を64ビット浮動小数点数として扱い続け、仮数の23番目のビットで「偶数に丸める」だけを実行し、後続のすべての仮数ビットを &lt;code&gt;0&lt;/code&gt; に設定します。数値が32ビットfloatの範囲外の場合、&lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;-Infinity&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="51294f1892b4cc30fb189f09c42cde8df76f4c80" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">これを解決するために、 &lt;code&gt;Math.fround()&lt;/code&gt; を使用して64ビット浮動小数点を32ビット浮動小数点にキャストできます。内部的には、JavaScriptは数値を64ビットの浮動小数点数として扱い続け、仮数の23番目のビットで「偶数に丸める」だけを実行し、後続のすべての仮数ビットを &lt;code&gt;0&lt;/code&gt; に設定します。数値が32ビットfloatの範囲外の場合、 &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;-Infinity&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="6b99e751f92b027a44ab3719b0e301b6ed16d648" translate="yes" xml:space="preserve">
          <source>To sum up values contained in an array of objects you &lt;strong&gt;must&lt;/strong&gt; supply an initial value so that each item passes through your function.</source>
          <target state="translated">オブジェクトの配列に含まれる値を合計するには、各項目が関数を通過するように初期値を指定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="aedd09040224912bb4fa03a83868a27bf974dd84" translate="yes" xml:space="preserve">
          <source>To sum up, the values contained in an array of objects, you &lt;strong&gt;must&lt;/strong&gt; supply an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, so that each item passes through your function.</source>
          <target state="translated">要約すると、オブジェクトの配列に含まれる値は、各アイテムが関数を通過するように、 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; を指定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7daf9417287e38a1dc089e991e790fb60c2d291a" translate="yes" xml:space="preserve">
          <source>To take into account years before and after 2000, you should use &lt;a href=&quot;getfullyear&quot;&gt;&lt;code&gt;getFullYear()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;getYear()&lt;/code&gt; so that the year is specified in full.</source>
          <target state="translated">2000年の前後の年数を考慮するには、 &lt;code&gt;getYear()&lt;/code&gt; の代わりに&lt;a href=&quot;getfullyear&quot;&gt; &lt;code&gt;getFullYear()&lt;/code&gt; &lt;/a&gt;を使用して、年が完全に指定されるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="ff9bdaefda4afeb1b2d3c5e304f7dfdacddbf997" translate="yes" xml:space="preserve">
          <source>To test if an object is not an &lt;code&gt;instanceof&lt;/code&gt; a specific constructor, you can do</source>
          <target state="translated">オブジェクトが特定のコンストラクターの &lt;code&gt;instanceof&lt;/code&gt; はないかどうかをテストするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d113798c2a75c1ed214232bb80df9ddd29edac47" translate="yes" xml:space="preserve">
          <source>To test if an object is not an instanceof a specific Constructor, you can do</source>
          <target state="translated">オブジェクトが特定のコンストラクタのインスタンスではないかどうかをテストするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6189e37965976e54d4248b20bb1532f0b7800f11" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">プロトタイプが継承にどのように使用されるかを理解するには、ガイド記事「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;継承とプロトタイプチェーン&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0c27c1563eef054518761c7a92f5cf21d8d5ac6" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">プロトタイプが継承にどのように使用されるかを理解するには、ガイド記事の&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;継承とプロトタイプチェーンを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="aae9c12807500fea71bdcc71051a39f54f1052f0" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;Array&lt;/code&gt; methods on the &lt;code&gt;arguments&lt;/code&gt; object, it must be converted to a real array first.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; オブジェクトで &lt;code&gt;Array&lt;/code&gt; メソッドを使用するには、最初に実際の配列に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="75f905abea55b3adbcb30a94d7249e1c63fef4e2" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;new&lt;/code&gt; with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">拡散構文を使用せずにパラメーターの配列で &lt;code&gt;new&lt;/code&gt; を使用するには、部分適用を介して&lt;strong&gt;間接&lt;/strong&gt;的に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="04a0acd17137930958c4357224572608c36ceb9a" translate="yes" xml:space="preserve">
          <source>To use new with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">構文を広げずにパラメータの配列でnewを使用するには、部分的なアプリケーションを介して&lt;strong&gt;間接的&lt;/strong&gt;に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="7274f7dbf9016c13ad74c7d68af0822075863807" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;Object.prototype.toString()&lt;/code&gt; with every object, you need to call &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; on it, passing the object you want to inspect as the first parameter (called &lt;code&gt;thisArg&lt;/code&gt;).</source>
          <target state="translated">すべてのオブジェクトで &lt;code&gt;Object.prototype.toString()&lt;/code&gt; を使用するには、そのオブジェクトで&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;を呼び出し、検査するオブジェクトを最初のパラメーター（ &lt;code&gt;thisArg&lt;/code&gt; と呼ばれる）として渡す必要があります。）。</target>
        </trans-unit>
        <trans-unit id="660ef13750fc5d9c949b57cdae0a4e8e70e15f7a" translate="yes" xml:space="preserve">
          <source>Too much recursion</source>
          <target state="translated">再帰が多すぎる</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="a047f11b40760f38d7e783939b2e82abcfc6ab7f" translate="yes" xml:space="preserve">
          <source>Traditional Chinese calendar</source>
          <target state="translated">暦</target>
        </trans-unit>
        <trans-unit id="86cd26eb757faf0efc3c7db5fd1e8b6c09b68a1e" translate="yes" xml:space="preserve">
          <source>Traditional Chinese financial numerals &amp;mdash; algorithmic</source>
          <target state="translated">繁体字中国語の財務数値&amp;mdash;アルゴリズム</target>
        </trans-unit>
        <trans-unit id="a97f176144564ad335dfebdfff1d4aa19ecee5d2" translate="yes" xml:space="preserve">
          <source>Traditional Chinese numerals &amp;mdash; algorithmic</source>
          <target state="translated">繁体字中国語の数字&amp;mdash;アルゴリズム</target>
        </trans-unit>
        <trans-unit id="d4b6bb50d64b17cde88af87f46db02693c510b8d" translate="yes" xml:space="preserve">
          <source>Traditional Hebrew calendar</source>
          <target state="translated">伝統的なヘブライ暦</target>
        </trans-unit>
        <trans-unit id="3bc6adae28e3196ad520cd1612fbd8db76ab3fd0" translate="yes" xml:space="preserve">
          <source>Traditional Korean calendar</source>
          <target state="translated">韓国の伝統的な暦</target>
        </trans-unit>
        <trans-unit id="38eafeaee1eb5c0ebc58b085154625dc6d40b7d0" translate="yes" xml:space="preserve">
          <source>Traditional numerals &amp;mdash; may be algorithmic</source>
          <target state="translated">従来の数字&amp;mdash;アルゴリズム的かもしれません</target>
        </trans-unit>
        <trans-unit id="a038f925c2354f78270479612e4c406b8b70b99c" translate="yes" xml:space="preserve">
          <source>Traditional style ordering (such as in Spanish)</source>
          <target state="translated">伝統的なスタイルのオーダー(スペイン語など</target>
        </trans-unit>
        <trans-unit id="04b17ddb1b0676b09312ee2b1fef4ebedf271d5c" translate="yes" xml:space="preserve">
          <source>Traditionally, the Intl API used strings to represent locales, just as Unicode does. This is a simple and lightweight solution that works well. Adding a Locale class, however, adds ease of parsing and manipulating the language, script, and region, as well as extension tags.</source>
          <target state="translated">従来、Intl API は Unicode と同様にロケールを表現するために文字列を使用していました。これはシンプルで軽量なソリューションであり、十分に機能します。しかし、Locale クラスを追加することで、言語、スクリプト、地域、および拡張タグの解析や操作が容易になります。</target>
        </trans-unit>
        <trans-unit id="c2313470950f865647156a7a4a25ce3c2e83792f" translate="yes" xml:space="preserve">
          <source>Trailing ; is now optional.</source>
          <target state="translated">後続の;はオプションになりました。</target>
        </trans-unit>
        <trans-unit id="f8d0aef6cfd4076e6ae9658e932d251387bc8675" translate="yes" xml:space="preserve">
          <source>Trailing comma in functions</source>
          <target state="translated">関数の末尾のカンマ</target>
        </trans-unit>
        <trans-unit id="606d1c76a0b30826fcabf50a15df87d4fe7880f4" translate="yes" xml:space="preserve">
          <source>Trailing comma in object literals</source>
          <target state="translated">オブジェクトリテラルの末尾のカンマ</target>
        </trans-unit>
        <trans-unit id="e55b06e9f89f5676c1b49a5534be9075559f2b41" translate="yes" xml:space="preserve">
          <source>Trailing comma in parameters</source>
          <target state="translated">パラメータの最後のカンマ</target>
        </trans-unit>
        <trans-unit id="7b5b3a2e5f602edd973d6bc7c27d9b7106a52ef4" translate="yes" xml:space="preserve">
          <source>Trailing commas</source>
          <target state="translated">トレイリングカンマ</target>
        </trans-unit>
        <trans-unit id="4007c7bcde192099739da7b5dc3cf25cd194e8bd" translate="yes" xml:space="preserve">
          <source>Trailing commas in JSON</source>
          <target state="translated">JSON の末尾のカンマ</target>
        </trans-unit>
        <trans-unit id="5b556f3c60faa4af035bd9f6f0fc94e405b23e5c" translate="yes" xml:space="preserve">
          <source>Trailing commas in destructuring</source>
          <target state="translated">破壊する際の末尾のカンマ</target>
        </trans-unit>
        <trans-unit id="f1631be78b031090e069670587881a4eeb73c391" translate="yes" xml:space="preserve">
          <source>Trailing commas in functions</source>
          <target state="translated">関数の末尾のカンマ</target>
        </trans-unit>
        <trans-unit id="5cb816480c81b2419e2dbfc7b5f105323a7ef3f0" translate="yes" xml:space="preserve">
          <source>Trailing commas in literals</source>
          <target state="translated">リテラルの末尾のコンマ</target>
        </trans-unit>
        <trans-unit id="963f940d4cc4812e25912331449dd4620c780746" translate="yes" xml:space="preserve">
          <source>Trailing commas in objects were only introduced in ECMAScript 5. As JSON is based on JavaScript's syntax prior to ES5, &lt;strong&gt;trailing commas are not allowed in JSON&lt;/strong&gt;.</source>
          <target state="translated">オブジェクトの&lt;strong&gt;末尾のコンマは&lt;/strong&gt;ECMAScript5でのみ導入されました。JSONはES5より前のJavaScriptの構文に基づいて&lt;strong&gt;いるため、JSON&lt;/strong&gt;では&lt;strong&gt;末尾のコンマは使用できません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">厳格モードへの移行</target>
        </trans-unit>
        <trans-unit id="5a29ccb54979d40cdd379a05c84aba78669cb957" translate="yes" xml:space="preserve">
          <source>Trap for getting a property value</source>
          <target state="translated">資産価値を得るための罠</target>
        </trans-unit>
        <trans-unit id="8d5c3e387c5c8b74c2713dacfb99ad1d7297b358" translate="yes" xml:space="preserve">
          <source>Trap setting of a property value</source>
          <target state="translated">プロパティ値のトラップ設定</target>
        </trans-unit>
        <trans-unit id="f599724d7bc16c310db22d648b379528fb9c38fa" translate="yes" xml:space="preserve">
          <source>Trapping a function call</source>
          <target state="translated">関数呼び出しのトラップ</target>
        </trans-unit>
        <trans-unit id="cc0f7812ffa9461511f7207552d4edb546be603a" translate="yes" xml:space="preserve">
          <source>Trapping of defineProperty</source>
          <target state="translated">definePropertyのトラップ</target>
        </trans-unit>
        <trans-unit id="286af7ac072fc5957ee5c0a8789d6d325c02afc4" translate="yes" xml:space="preserve">
          <source>Trapping of getOwnPropertyDescriptor</source>
          <target state="translated">getOwnPropertyDescriptorのトラップ</target>
        </trans-unit>
        <trans-unit id="5acb82259fe5b5123a7d1e49d0b961a4a20cf472" translate="yes" xml:space="preserve">
          <source>Trapping of getOwnPropertyNames</source>
          <target state="translated">getOwnPropertyNamesのトラップ</target>
        </trans-unit>
        <trans-unit id="96841e1c47413851ba7d7ac6fd52668381128c99" translate="yes" xml:space="preserve">
          <source>Trapping of isExtensible</source>
          <target state="translated">isExtensibleのトラップ</target>
        </trans-unit>
        <trans-unit id="82e8719daf5e151fbc43019c7c88c846183a9cbc" translate="yes" xml:space="preserve">
          <source>Trapping of preventExtensions</source>
          <target state="translated">preventExtensionsのトラップ</target>
        </trans-unit>
        <trans-unit id="cf50639ff6ebf498e560d079ba23de8f5594fb24" translate="yes" xml:space="preserve">
          <source>Trapping the delete operator</source>
          <target state="translated">削除演算子のトラップ</target>
        </trans-unit>
        <trans-unit id="5d6c9896bdc80081144ca8332ac18586320ff157" translate="yes" xml:space="preserve">
          <source>Trapping the in operator</source>
          <target state="translated">イン演算子のトラップ</target>
        </trans-unit>
        <trans-unit id="3ce746bf2c192d25518aad32cb980a4747a56b4d" translate="yes" xml:space="preserve">
          <source>Trapping the new operator</source>
          <target state="translated">新オペレーターのトラップ</target>
        </trans-unit>
        <trans-unit id="f690af062336ee897b0521e913ce0847542b5b21" translate="yes" xml:space="preserve">
          <source>Treat &lt;code&gt;&lt;var&gt;pattern&lt;/var&gt;&lt;/code&gt; as a sequence of Unicode code points. (See also &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary&quot;&gt;Binary strings&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;pattern&lt;/var&gt;&lt;/code&gt; をUnicodeコードポイントのシーケンスとして扱います。（&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary&quot;&gt;バイナリ文字列&lt;/a&gt;も参照してください）。</target>
        </trans-unit>
        <trans-unit id="31dbbdd4c06bdcc8d3024bc91c5f1955ff6adccd" translate="yes" xml:space="preserve">
          <source>Treat beginning and end characters (&lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;) as working over multiple lines. In other words, match the beginning or end of &lt;em&gt;each&lt;/em&gt; line (delimited by &lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;\r&lt;/code&gt;), not only the very beginning or end of the whole input string.</source>
          <target state="translated">開始文字と終了文字（ &lt;code&gt;^&lt;/code&gt; と &lt;code&gt;$&lt;/code&gt; ）を複数行にわたる作業として扱います。つまり、入力文字列全体の最初または最後だけでなく、&lt;em&gt;各行の&lt;/em&gt;最初または最後（ &lt;code&gt;\n&lt;/code&gt; または &lt;code&gt;\r&lt;/code&gt; 区切られる）に一致します。</target>
        </trans-unit>
        <trans-unit id="7677dc0a64e242392b7b759584fdce97846e967e" translate="yes" xml:space="preserve">
          <source>Tricky use case</source>
          <target state="translated">トリッキーな使用例</target>
        </trans-unit>
        <trans-unit id="5c4f40eb67c2580cbb047c0c2d7b18e62cfc6b44" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.</source>
          <target state="translated">文字列の先頭と末尾の空白を削除します。ECMAScript 5 標準の一部。</target>
        </trans-unit>
        <trans-unit id="589248aae63e048840e2320146a334266180f14a" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning of the string.</source>
          <target state="translated">文字列の先頭から空白を削除します。</target>
        </trans-unit>
        <trans-unit id="f98e79143326b9112cafa11878a9f99a93d9f8f4" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the end of the string.</source>
          <target state="translated">文字列の末尾から空白を削除します。</target>
        </trans-unit>
        <trans-unit id="603de98e02b4ceb2a80e713c8e0e0a5b7e7bf0aa" translate="yes" xml:space="preserve">
          <source>Truthy</source>
          <target state="translated">Truthy</target>
        </trans-unit>
        <trans-unit id="4d46d56fedff8d9d8e85c637f94cca6486220b3d" translate="yes" xml:space="preserve">
          <source>Try it:</source>
          <target state="translated">試してみてください。</target>
        </trans-unit>
        <trans-unit id="ce521adbbb8a6a96e8c658ce0f73754df5d00657" translate="yes" xml:space="preserve">
          <source>Trying to delete a non-configurable property</source>
          <target state="translated">構成不可能なプロパティを削除しようとすると</target>
        </trans-unit>
        <trans-unit id="0bc27c8a219ca95024ca4076d021dd8abbc3f750" translate="yes" xml:space="preserve">
          <source>Trying to obtain the class of &lt;code&gt;fooInstance&lt;/code&gt; via &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; won't give us the class name at all but a reference to the static class method. Example:</source>
          <target state="translated">&lt;code&gt;fooInstance&lt;/code&gt; .constructor.nameを介して &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; クラスを取得しようとしても、クラス名はまったく得られず、静的クラスメソッドへの参照しか得られません。例：</target>
        </trans-unit>
        <trans-unit id="40cfb43d46ab09f148bea5b1d9e1aa5abb45e0bb" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;code&gt;Object.defineProperty()&lt;/code&gt; on native objects throws an error.</source>
          <target state="translated">ネイティブオブジェクトで &lt;code&gt;Object.defineProperty()&lt;/code&gt; を使用しようとすると、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="42aa153f6061661d917a475e9e234bf07b1cb4ae" translate="yes" xml:space="preserve">
          <source>Tutorial on proxies</source>
          <target state="translated">プロキシに関するチュートリアル</target>
        </trans-unit>
        <trans-unit id="f48575e167a871ba14022198cbf7f03912cfd2c1" translate="yes" xml:space="preserve">
          <source>Two Boolean operands are strictly equal if both are &lt;code&gt;true&lt;/code&gt; or both are &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">2つのブール値のオペランドは、両方が &lt;code&gt;true&lt;/code&gt; または両方が &lt;code&gt;false&lt;/code&gt; の場合、完全に等しくなります。</target>
        </trans-unit>
        <trans-unit id="87c778f38cdd455f723836213ff5541f9312375a" translate="yes" xml:space="preserve">
          <source>Two Mozilla-specific caveats: First, if your code is JavaScript 1.7 or greater (for example in chrome code or when using the right &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt;) and is strict mode code, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; have the functionality they've had since those keywords were first introduced. But strict mode code on the web, loaded with &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;, won't be able to use &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;yield&lt;/code&gt; as identifiers. Second, while ES5 unconditionally reserves the words &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;super&lt;/code&gt;, before Firefox 5 Mozilla reserved them only in strict mode.</source>
          <target state="translated">2つのMozilla固有の警告：最初に、コードがJavaScript 1.7以上（たとえば、Chromeコード内または適切な &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt; を使用している場合）で、ストリクトモードコードである場合、 &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;yield&lt;/code&gt; にはそれらの機能がありますこれらのキーワードが最初に導入されてからありました。しかし、 &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; でロードされたWeb上のストリクトモードコードは、識別子として &lt;code&gt;let&lt;/code&gt; / &lt;code&gt;yield&lt;/code&gt; を使用できません。次に、ES5は無条件に &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、 &lt;code&gt;export&lt;/code&gt; 、 &lt;code&gt;extends&lt;/code&gt; 、 &lt;code&gt;import&lt;/code&gt; 、および &lt;code&gt;super&lt;/code&gt; という単語を予約します、Firefox 5以前は、Mozillaはストリクトモードでのみそれらを予約していました。</target>
        </trans-unit>
        <trans-unit id="c90bd8efd9aba75342919e60f01051208a1b0dbe" translate="yes" xml:space="preserve">
          <source>Two digit day of the month, padded on the left a zero if necessary</source>
          <target state="translated">月の二桁の日、必要に応じて左のゼロにパディングされた</target>
        </trans-unit>
        <trans-unit id="06ba5800961ba03ca52214a88183a949ee3568cc" translate="yes" xml:space="preserve">
          <source>Two digit hour offset, e.g. &quot;14&quot;</source>
          <target state="translated">2桁の時間オフセット、例:&quot;14&quot;</target>
        </trans-unit>
        <trans-unit id="8621e04d7232cc2dc37e5b84e933ec3bc06b72e3" translate="yes" xml:space="preserve">
          <source>Two digit minute offset, e.g. &quot;00&quot;</source>
          <target state="translated">2桁の分単位のオフセット、例:&quot;00&quot;</target>
        </trans-unit>
        <trans-unit id="d96364e22c9ee0fb4977ea215560ad73a809bd3c" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 &amp;ndash; 1999</source>
          <target state="translated">2桁の年は1900年から1999年にマップされます</target>
        </trans-unit>
        <trans-unit id="dcc0b0e27681a4bfd0bb02dab459be7e1da3d54e" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 - 1999</source>
          <target state="translated">1900年から1999年までの二桁の年の地図</target>
        </trans-unit>
        <trans-unit id="bfdef2d93e0187c887de26ec520756ec15fd21f0" translate="yes" xml:space="preserve">
          <source>Two distinct objects are never equal for either strict or abstract comparisons.</source>
          <target state="translated">厳密な比較でも抽象的な比較でも、2つの異なる物体は決して等しくありません。</target>
        </trans-unit>
        <trans-unit id="f9f69cd7d34f5586d87a3b0bb756cc56e3e4faee" translate="yes" xml:space="preserve">
          <source>Two factors influenced the introduction of arrow functions: shorter functions and no existence of &lt;code&gt;this&lt;/code&gt; keyword.</source>
          <target state="translated">矢印関数の導入には2つの要素が影響しました。短い関数と &lt;code&gt;this&lt;/code&gt; キーワードが存在しないことです。</target>
        </trans-unit>
        <trans-unit id="fdb1ca806fe597861317d9dd8b9b0f4e1091e759" translate="yes" xml:space="preserve">
          <source>Two kinds of exceptions</source>
          <target state="translated">2種類の例外</target>
        </trans-unit>
        <trans-unit id="7e45222dc719a42189ddea086a477a76a9f58c58" translate="yes" xml:space="preserve">
          <source>Two numbers are strictly equal when they are numerically equal (have the same number value). &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt; is not equal to anything, including NaN. Positive and negative zeros are equal to one another.</source>
          <target state="translated">2つの数値は、数値が等しい（数値が同じ）場合、厳密に等しくなります。&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;は、NaNを含め、何にも等しくありません。正と負のゼロは互いに等しい。</target>
        </trans-unit>
        <trans-unit id="b2dfc98cea6d4f038c0adeb2a717a43bd3cbd1bd" translate="yes" xml:space="preserve">
          <source>Two other functions, &lt;code&gt;Food&lt;/code&gt; and &lt;code&gt;Toy&lt;/code&gt;, invoke &lt;code&gt;Product&lt;/code&gt;, passing &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;price&lt;/code&gt;. &lt;code&gt;Product&lt;/code&gt; initializes the properties &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;, both specialized functions define the &lt;code&gt;category&lt;/code&gt;.</source>
          <target state="translated">他の2つの関数、 &lt;code&gt;Food&lt;/code&gt; と &lt;code&gt;Toy&lt;/code&gt; は、 &lt;code&gt;Product&lt;/code&gt; を呼び出し、 &lt;code&gt;this&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;price&lt;/code&gt; を渡します。 &lt;code&gt;Product&lt;/code&gt; はプロパティ &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;price&lt;/code&gt; 初期化し、両方の特殊な関数が &lt;code&gt;category&lt;/code&gt; 定義します。</target>
        </trans-unit>
        <trans-unit id="767364ed74f9dfef1bba457b2a31bd97d28ec12b" translate="yes" xml:space="preserve">
          <source>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</source>
          <target state="translated">2つの文字列は、同じ文字列、同じ長さ、対応する位置に同じ文字がある場合に厳密に等しくなります。</target>
        </trans-unit>
        <trans-unit id="22e62aada2d2ed4e6ef25446cc5d425779700a8b" translate="yes" xml:space="preserve">
          <source>Two variables values can be swapped in one destructuring expression.</source>
          <target state="translated">1つの破壊式で2つの変数の値を入れ替えることができます。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="6dce0107ce06419ab2948b0df54410a6ad499cd9" translate="yes" xml:space="preserve">
          <source>Type information</source>
          <target state="translated">タイプ情報</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="6d00d4d021cf7823f5159794a262002d93abec26" translate="yes" xml:space="preserve">
          <source>TypeError.prototype</source>
          <target state="translated">TypeError.prototype</target>
        </trans-unit>
        <trans-unit id="2cb623b8d9a209025f51248514be8a05923d3323" translate="yes" xml:space="preserve">
          <source>TypeError.typeError</source>
          <target state="translated">TypeError.typeError</target>
        </trans-unit>
        <trans-unit id="d88135ee691d49ad087f9ee359ecbe46ea9528b7" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; has no properties</source>
          <target state="translated">TypeError。&quot;x&quot; にはプロパティがありません。</target>
        </trans-unit>
        <trans-unit id="fda9971b475c2dc350019d59b66915fe2fc5f709" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is (not) &quot;y&quot;</source>
          <target state="translated">TypeError.&quot;x&quot; は (yではない)&quot;y&quot; です。</target>
        </trans-unit>
        <trans-unit id="0c6838555438ef7c5a3c7cfdcfb9cd2b062e017a" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a constructor</source>
          <target state="translated">TypeError。&quot;x&quot; はコンストラクタではありません。</target>
        </trans-unit>
        <trans-unit id="b4b3f22cfb909a7ea57fce3d810b02b8c9c4944d" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a function</source>
          <target state="translated">TypeError。&quot;x&quot; は関数ではありません</target>
        </trans-unit>
        <trans-unit id="0907c062321c618b949345d16de90e484526d617" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a non-null object</source>
          <target state="translated">TypeError。&quot;x&quot; は非 null オブジェクトではありません。</target>
        </trans-unit>
        <trans-unit id="7f1a59d8d05baff12e8984f0d4f979e255eb85be" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is read-only</source>
          <target state="translated">TypeError。&quot;x&quot; は読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="93a64ae87ca50694ea65931b825ebbc14316100d" translate="yes" xml:space="preserve">
          <source>TypeError: 'x' is not iterable</source>
          <target state="translated">TypeError:'x' は反復可能ではありません。</target>
        </trans-unit>
        <trans-unit id="eadd3f3dd3d515bc2008a8c3ecbf97e414fadd33" translate="yes" xml:space="preserve">
          <source>TypeError: More arguments needed</source>
          <target state="translated">TypeErrorを使用しています。より多くの引数が必要</target>
        </trans-unit>
        <trans-unit id="2a7a8f3a34edd73e7329425eba83dee00c2a463e" translate="yes" xml:space="preserve">
          <source>TypeError: Reduce of empty array with no initial value</source>
          <target state="translated">TypeErrorを使用しています。初期値がない空の配列のリデュース</target>
        </trans-unit>
        <trans-unit id="fc7a003e68b18bd51a0e2c7b4e9aa739a2628e68" translate="yes" xml:space="preserve">
          <source>TypeError: X.prototype.y called on incompatible type</source>
          <target state="translated">TypeError。X.prototype.y は互換性のない型で呼び出されました。</target>
        </trans-unit>
        <trans-unit id="2062e055b44d15065484da17110096e531bf60f7" translate="yes" xml:space="preserve">
          <source>TypeError: can't access dead object</source>
          <target state="translated">TypeError:デッドオブジェクトにアクセスできない</target>
        </trans-unit>
        <trans-unit id="9eadd715821193dbb59f2029ac46c9c5acb67bac" translate="yes" xml:space="preserve">
          <source>TypeError: can't access property &quot;x&quot; of &quot;y&quot;</source>
          <target state="translated">TypeError:&quot;y&quot; のプロパティ &quot;x&quot; にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="ffdc9764529529f831000de89ae3e001a2f25d64" translate="yes" xml:space="preserve">
          <source>TypeError: can't assign to property &quot;x&quot; on &quot;y&quot;: not an object</source>
          <target state="translated">TypeError:&quot;y&quot; のプロパティ &quot;x&quot; に代入できません。</target>
        </trans-unit>
        <trans-unit id="ad4dd8b46b5c3df52f2a0bc7f14317bff5729363" translate="yes" xml:space="preserve">
          <source>TypeError: can't define property &quot;x&quot;: &quot;obj&quot; is not extensible</source>
          <target state="translated">TypeError:プロパティ &quot;x&quot; を定義できません。&quot;obj&quot; は拡張可能ではありません。</target>
        </trans-unit>
        <trans-unit id="e7eda2849a3fa05ea9821acd46a58275cc93af66" translate="yes" xml:space="preserve">
          <source>TypeError: can't delete non-configurable array element</source>
          <target state="translated">TypeError:構成不可能な配列要素を削除できません。</target>
        </trans-unit>
        <trans-unit id="9d546ed256470970d571134f12c516214042a8f8" translate="yes" xml:space="preserve">
          <source>TypeError: can't redefine non-configurable property &quot;x&quot;</source>
          <target state="translated">TypeError:構成不可能なプロパティ &quot;x&quot; を再定義できません。</target>
        </trans-unit>
        <trans-unit id="0f6a8ff06a09e02690b7ab0b6f620e52b063692d" translate="yes" xml:space="preserve">
          <source>TypeError: cannot use 'in' operator to search for 'x' in 'y'</source>
          <target state="translated">TypeError:'y' 内の 'x' を検索するために 'in' オペレータを使用できません。</target>
        </trans-unit>
        <trans-unit id="ab60634a7b25184b9af6dbfe2b46a127f045f29c" translate="yes" xml:space="preserve">
          <source>TypeError: cyclic object value</source>
          <target state="translated">TypeError:サイクリックオブジェクトの値</target>
        </trans-unit>
        <trans-unit id="4c9fb78d7a67808097cba5dfefcb9df30ae2287d" translate="yes" xml:space="preserve">
          <source>TypeError: invalid 'instanceof' operand 'x'</source>
          <target state="translated">TypeError:無効な 'instanceof' オペランド 'x' です。</target>
        </trans-unit>
        <trans-unit id="804985ebf62efa82c95ca44aeb325d939fdd8196" translate="yes" xml:space="preserve">
          <source>TypeError: invalid Array.prototype.sort argument</source>
          <target state="translated">TypeError:無効な Array.prototype.sort 引数</target>
        </trans-unit>
        <trans-unit id="8bd8a78e630e8119c68b4da0cc755876148f3614" translate="yes" xml:space="preserve">
          <source>TypeError: invalid arguments</source>
          <target state="translated">TypeError:無効な引数</target>
        </trans-unit>
        <trans-unit id="da892f4d86f86bbc79faa3ccbe6da8413753b79e" translate="yes" xml:space="preserve">
          <source>TypeError: invalid assignment to const &quot;x&quot;</source>
          <target state="translated">TypeError:const &quot;x&quot; への代入が無効です。</target>
        </trans-unit>
        <trans-unit id="504d7c54e7d6b0bedf86d99552944cda9b64611d" translate="yes" xml:space="preserve">
          <source>TypeError: property &quot;x&quot; is non-configurable and can't be deleted</source>
          <target state="translated">TypeError:プロパティ &quot;x&quot; は構成不可能であり、削除できません。</target>
        </trans-unit>
        <trans-unit id="d59f59299d78a1e084bc1ab108285fbe7f7ff24a" translate="yes" xml:space="preserve">
          <source>TypeError: setting getter-only property &quot;x&quot;</source>
          <target state="translated">TypeError:ゲッター専用プロパティ &quot;x&quot; の設定</target>
        </trans-unit>
        <trans-unit id="162a63e1f2a43ab2ace2903a72b848afcab003b2" translate="yes" xml:space="preserve">
          <source>TypeError: variable &quot;x&quot; redeclares argument</source>
          <target state="translated">TypeError:変数 &quot;x&quot; は引数を再宣言します。</target>
        </trans-unit>
        <trans-unit id="8668a6f3f477fa3a4eefc9753392f294a609fc27" translate="yes" xml:space="preserve">
          <source>Typed Array Specification</source>
          <target state="translated">型付き配列仕様</target>
        </trans-unit>
        <trans-unit id="0e3ced9152ebb319d31f440c27bb52b32c3d74e3" translate="yes" xml:space="preserve">
          <source>Typed Arrays</source>
          <target state="translated">型付き配列</target>
        </trans-unit>
        <trans-unit id="c32fcb187550b7bf4d1702cf9e0d2d8aeae8400f" translate="yes" xml:space="preserve">
          <source>Typed array invalid arguments</source>
          <target state="translated">型付けされた配列の無効な引数</target>
        </trans-unit>
        <trans-unit id="831e06c03f1dd990a2ed633ba22453d03ef9310d" translate="yes" xml:space="preserve">
          <source>Typed arrays</source>
          <target state="translated">型付き配列</target>
        </trans-unit>
        <trans-unit id="5e174443616f1ab6a6488259f4a4c0962e193335" translate="yes" xml:space="preserve">
          <source>Typed arrays, for example a &lt;a href=&quot;../global_objects/uint8array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;, can't be constructed from a string. In fact, strings can't be in typed arrays at all.</source>
          <target state="translated">型付き配列（&lt;a href=&quot;../global_objects/uint8array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;など）は、文字列から作成できません。実際、文字列を型付き配列にすることはできません。</target>
        </trans-unit>
        <trans-unit id="a675e12d09245bf3e11559a6c906caf65a0c34ae" translate="yes" xml:space="preserve">
          <source>TypedArray</source>
          <target state="translated">TypedArray</target>
        </trans-unit>
        <trans-unit id="9565828e7e18feab488461ba94cc0f8b6e1c6d60" translate="yes" xml:space="preserve">
          <source>TypedArray objects</source>
          <target state="translated">TypedArray オブジェクト</target>
        </trans-unit>
        <trans-unit id="df563443a3d6070fb25ab6fc8e7e2386c0ceb9a1" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; constant contains the number of bytes each element in the given TypedArray has.</source>
          <target state="translated">TypedArrayオブジェクトは、要素ごとのバイト数とバイトの解釈方法が互いに異なります。 &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; の定数は所与TypedArrayの各要素が有するバイトの数を含んでいます。</target>
        </trans-unit>
        <trans-unit id="8308ed4a83ee6818d0174d014e66c11e46202d6a" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;name&lt;/code&gt; property describes of what data type the array consists. The first part can be &lt;code&gt;Int&lt;/code&gt; for &quot;integer&quot; or &lt;code&gt;Uint&lt;/code&gt; for an &quot;unsigned integer&quot;, also &lt;code&gt;Float&lt;/code&gt; for &quot;floating point&quot; is used. The second part is a number describing the bit-size of the array. Finally, the object type is &lt;code&gt;Array&lt;/code&gt;, with &lt;code&gt;ClampedArray&lt;/code&gt; as a special case. Please see &lt;a href=&quot;../uint8clampedarray&quot;&gt;&lt;code&gt;Uint8ClampedArray&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">TypedArrayオブジェクトは、要素ごとのバイト数とバイトの解釈方法が互いに異なります。 &lt;code&gt;name&lt;/code&gt; プロパティは、データが配列で構成されて入力する内容で説明します。最初の部分は、「整数」の場合は &lt;code&gt;Int&lt;/code&gt; 、「符号なし整数」の場合は &lt;code&gt;Uint&lt;/code&gt; にすることができ、「浮動小数点」の場合は &lt;code&gt;Float&lt;/code&gt; も使用されます。2番目の部分は、配列のビットサイズを表す数値です。最後に、オブジェクトタイプは &lt;code&gt;Array&lt;/code&gt; で、 &lt;code&gt;ClampedArray&lt;/code&gt; は特殊なケースです。詳細については、&lt;a href=&quot;../uint8clampedarray&quot;&gt; &lt;code&gt;Uint8ClampedArray&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="09d7acc3385ee25cf71171846ae0bfe859fe9a73" translate="yes" xml:space="preserve">
          <source>TypedArray prototype</source>
          <target state="translated">TypedArrayプロトタイプ</target>
        </trans-unit>
        <trans-unit id="d4ce014df3421685733cf5ffe8d38b6f3c599df4" translate="yes" xml:space="preserve">
          <source>TypedArray.@@species</source>
          <target state="translated">TypedArray.@@species</target>
        </trans-unit>
        <trans-unit id="e489cfc13d902aa038749ff4fe48077ca0a7211c" translate="yes" xml:space="preserve">
          <source>TypedArray.BYTES_PER_ELEMENT</source>
          <target state="translated">TypedArray.BYTES_PER_ELEMENT</target>
        </trans-unit>
        <trans-unit id="adf7db6dc7263fcbaca680036e73631182759551" translate="yes" xml:space="preserve">
          <source>TypedArray.from</source>
          <target state="translated">TypedArray.from</target>
        </trans-unit>
        <trans-unit id="8551dc8209fb18b38be485c43801c646aade3a70" translate="yes" xml:space="preserve">
          <source>TypedArray.name</source>
          <target state="translated">TypedArray.name</target>
        </trans-unit>
        <trans-unit id="9a0fb51cb88bee1e979510c2e27b232ed2323ee7" translate="yes" xml:space="preserve">
          <source>TypedArray.of</source>
          <target state="translated">TypedArray.of</target>
        </trans-unit>
        <trans-unit id="059f9b7c5f42d42cd8daa1d1d8596ee8f58560aa" translate="yes" xml:space="preserve">
          <source>TypedArray.prototype</source>
          <target state="translated">TypedArray.prototype</target>
        </trans-unit>
        <trans-unit id="928297cbc22683b1dcaf8e3a80b77c161ec670c5" translate="yes" xml:space="preserve">
          <source>Typical invalid assignments</source>
          <target state="translated">典型的な無効な割り当て</target>
        </trans-unit>
        <trans-unit id="1b979ac27e75fcee38735e4810e82baa1e8038c0" translate="yes" xml:space="preserve">
          <source>Typically, it works like this: The operation within &lt;code&gt;executor&lt;/code&gt; is asynchronous and provides a callback. The callback is defined within the &lt;code&gt;executor&lt;/code&gt; code. The callback terminates by invoking &lt;code&gt;resolutionFunc&lt;/code&gt;. The invocation of &lt;code&gt;resolutionFunc&lt;/code&gt; includes a &lt;code&gt;value&lt;/code&gt; parameter. The &lt;code&gt;value&lt;/code&gt; is passed back to the tethered &lt;code&gt;promiseObj&lt;/code&gt;. The &lt;code&gt;promiseObj&lt;/code&gt; (asynchronously) invokes any &lt;code&gt;.then()&lt;/code&gt; associated with it. The &lt;code&gt;value&lt;/code&gt; received by &lt;code&gt;promiseObj.then()&lt;/code&gt; is passed to the invocation of &lt;code&gt;handleFulfilled&lt;/code&gt; as an input parameter (See &quot;Chained Promises&quot; section).</source>
          <target state="translated">通常、これは次のように機能します。 &lt;code&gt;executor&lt;/code&gt; 内の操作は非同期であり、コールバックを提供します。コールバックは &lt;code&gt;executor&lt;/code&gt; コード内で定義されます。コールバックは、 &lt;code&gt;resolutionFunc&lt;/code&gt; を呼び出すことによって終了します。 &lt;code&gt;resolutionFunc&lt;/code&gt; の呼び出しには、 &lt;code&gt;value&lt;/code&gt; パラメーターが含まれています。 &lt;code&gt;value&lt;/code&gt; つながに戻される &lt;code&gt;promiseObj&lt;/code&gt; 。 &lt;code&gt;promiseObj&lt;/code&gt; （非同期）呼び出す任意の &lt;code&gt;.then()&lt;/code&gt; 、それに関連付けられています。 &lt;code&gt;value&lt;/code&gt; によって受信 &lt;code&gt;promiseObj.then()&lt;/code&gt; の呼び出しに渡される &lt;code&gt;handleFulfilled&lt;/code&gt; （「連鎖約束」を参照）は、入力パラメータとして。</target>
        </trans-unit>
        <trans-unit id="b6575abbbad2379dfd5301919609cfbc4ce6b7d0" translate="yes" xml:space="preserve">
          <source>U+0009</source>
          <target state="translated">U+0009</target>
        </trans-unit>
        <trans-unit id="1f49cae739d7edd9863d8bd81c01910dbbc089fd" translate="yes" xml:space="preserve">
          <source>U+000A</source>
          <target state="translated">U+000A</target>
        </trans-unit>
        <trans-unit id="9f9e359ff78497d0af0cbd355c11f4736ab31dbc" translate="yes" xml:space="preserve">
          <source>U+000A LINE FEED (LF) (&quot;&lt;code&gt;\n&lt;/code&gt;&quot;)</source>
          <target state="translated">U + 000Aラインフィード（LF）（ &quot; &lt;code&gt;\n&lt;/code&gt; &quot;）</target>
        </trans-unit>
        <trans-unit id="87323b9e4dc26abc74fce3bd43d832f3f2dd8b38" translate="yes" xml:space="preserve">
          <source>U+000B</source>
          <target state="translated">U+000B</target>
        </trans-unit>
        <trans-unit id="ff0ef333b5e697ca7c0c191c7f65e6b0975a9fde" translate="yes" xml:space="preserve">
          <source>U+000C</source>
          <target state="translated">U+000C</target>
        </trans-unit>
        <trans-unit id="027e1c393361cda817913c6c63c5749c1a1ebf1c" translate="yes" xml:space="preserve">
          <source>U+000D</source>
          <target state="translated">U+000D</target>
        </trans-unit>
        <trans-unit id="28871eed17ccf0d0ed7cb83461497517a2d9d4b0" translate="yes" xml:space="preserve">
          <source>U+000D &amp;lt;CR&amp;gt;,</source>
          <target state="translated">U + 000D &amp;lt;CR&amp;gt;、</target>
        </trans-unit>
        <trans-unit id="831748f4fcda7d6442be3b2e36bb594cbf6e7541" translate="yes" xml:space="preserve">
          <source>U+000D CARRIAGE RETURN (CR) (&quot;&lt;code&gt;\r&lt;/code&gt;&quot;)</source>
          <target state="translated">U + 000Dキャリッジリターン（CR）（ &quot; &lt;code&gt;\r&lt;/code&gt; &quot;）</target>
        </trans-unit>
        <trans-unit id="538258cce356d6acc3d1b59869631a1b26b44251" translate="yes" xml:space="preserve">
          <source>U+0020</source>
          <target state="translated">U+0020</target>
        </trans-unit>
        <trans-unit id="ac91663a7dc88186dc866819cba4ad5bba584a83" translate="yes" xml:space="preserve">
          <source>U+005C (backslash),</source>
          <target state="translated">U+005C(\(^o^)/)。</target>
        </trans-unit>
        <trans-unit id="8588a5507dea10de63bbd8777f9338ad2cd338d0" translate="yes" xml:space="preserve">
          <source>U+005C \ (backslash),</source>
          <target state="translated">U+005C \(^o^)/。</target>
        </trans-unit>
        <trans-unit id="0fec4782338f4a34ab331b24e3952b0e5cb1ad5d" translate="yes" xml:space="preserve">
          <source>U+00A0</source>
          <target state="translated">U+00A0</target>
        </trans-unit>
        <trans-unit id="18beeeef428ffc1df892b484afcdbd03b7363497" translate="yes" xml:space="preserve">
          <source>U+2028</source>
          <target state="translated">U+2028</target>
        </trans-unit>
        <trans-unit id="40497104d3319a72f908cbcdc271528ba5b28265" translate="yes" xml:space="preserve">
          <source>U+2028 LINE SEPARATOR</source>
          <target state="translated">U+2028 ラインセパレータ</target>
        </trans-unit>
        <trans-unit id="e3743466af5e5ae35b041ce90fbacc309905247d" translate="yes" xml:space="preserve">
          <source>U+2029</source>
          <target state="translated">U+2029</target>
        </trans-unit>
        <trans-unit id="1d228de143c01c574d8da11ea9ff05379396ab1d" translate="yes" xml:space="preserve">
          <source>U+2029 PARAGRAPH SEPARATOR</source>
          <target state="translated">U+2029 パラグラフセパレータ</target>
        </trans-unit>
        <trans-unit id="46d53800c7cc79a0380ef914950cceb919311d12" translate="yes" xml:space="preserve">
          <source>URI encoding or decoding wasn't successful. An argument given to either the &lt;a href=&quot;../global_objects/decodeuri&quot;&gt;&lt;code&gt;decodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuri&quot;&gt;&lt;code&gt;encodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt;&lt;code&gt;decodeURIComponent&lt;/code&gt;&lt;/a&gt; function was not valid, so that the function was unable encode or decode properly.</source>
          <target state="translated">URIのエンコードまたはデコードは成功しませんでした。&lt;a href=&quot;../global_objects/decodeuri&quot;&gt; &lt;code&gt;decodeURI&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/encodeuri&quot;&gt; &lt;code&gt;encodeURI&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt; &lt;code&gt;encodeURIComponent&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt; &lt;code&gt;decodeURIComponent&lt;/code&gt; &lt;/a&gt;関数に指定された引数が無効だったため、関数は正しくエンコードまたはデコードできませんでした。</target>
        </trans-unit>
        <trans-unit id="d093bdaa782f59ac13b897f7b9054b31839f2bb9" translate="yes" xml:space="preserve">
          <source>URIError</source>
          <target state="translated">URIError</target>
        </trans-unit>
        <trans-unit id="fcd826fdce3e680ba53ae40238970f0c243a035c" translate="yes" xml:space="preserve">
          <source>URIError.prototype</source>
          <target state="translated">URIError.prototype</target>
        </trans-unit>
        <trans-unit id="13c409698d80277c91dae19cf95c65924dd58f70" translate="yes" xml:space="preserve">
          <source>URIError.uRIError</source>
          <target state="translated">URIError.uRIError</target>
        </trans-unit>
        <trans-unit id="24dfa6bae3df7e359ff385d1cf0198596d4240ba" translate="yes" xml:space="preserve">
          <source>URIError: malformed URI sequence</source>
          <target state="translated">URIError:不正な URI シーケンス</target>
        </trans-unit>
        <trans-unit id="bdfd4d8d6952777c39403b2d2e2f8a2a52bf255f" translate="yes" xml:space="preserve">
          <source>UTC</source>
          <target state="translated">UTC</target>
        </trans-unit>
        <trans-unit id="8b25ca8547ac04d71799be3d0a64dd85bdecc8c2" translate="yes" xml:space="preserve">
          <source>UTC)</source>
          <target state="translated">UTC)</target>
        </trans-unit>
        <trans-unit id="cfef49be4c8add6d6446b4adcc537017014f4915" translate="yes" xml:space="preserve">
          <source>UTC+3</source>
          <target state="translated">UTC+3</target>
        </trans-unit>
        <trans-unit id="fe85076f264e61cd020d0710115899e483ea0989" translate="yes" xml:space="preserve">
          <source>UTC-8</source>
          <target state="translated">UTC-8</target>
        </trans-unit>
        <trans-unit id="259c0ebc019175a9e0bd64273d4462cdb56f289e" translate="yes" xml:space="preserve">
          <source>UTF-16 code unit / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+FFFF&lt;/code&gt;</source>
          <target state="translated">UTF-16コードユニット/ &lt;code&gt;U+0000&lt;/code&gt; と &lt;code&gt;U+FFFF&lt;/code&gt; の間のUnicodeコードポイント</target>
        </trans-unit>
        <trans-unit id="d758c4107adfa362d034a7ff3fa05dfc9926675d" translate="yes" xml:space="preserve">
          <source>UTF-32 code unit / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+10FFFF&lt;/code&gt;</source>
          <target state="translated">間のUTF-32コード単位/ Unicodeコード・ポイント &lt;code&gt;U+0000&lt;/code&gt; と &lt;code&gt;U+10FFFF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff3d5b2abcbe69d249b5c141c82edeacc8a5da9a" translate="yes" xml:space="preserve">
          <source>Udacity: JavaScript Promises</source>
          <target state="translated">Udacity.JavaScriptの約束</target>
        </trans-unit>
        <trans-unit id="ee17a2d4842b1562f38fb267817829d58a3dedfb" translate="yes" xml:space="preserve">
          <source>Uint16Array</source>
          <target state="translated">Uint16Array</target>
        </trans-unit>
        <trans-unit id="c5710667eadea14743f763131bdbd164d4d4297f" translate="yes" xml:space="preserve">
          <source>Uint16Array.length</source>
          <target state="translated">Uint16Array.length</target>
        </trans-unit>
        <trans-unit id="a77298f77601025a0dbbfa764941e92848829328" translate="yes" xml:space="preserve">
          <source>Uint16Array.uint16Array</source>
          <target state="translated">Uint16Array.uint16Array</target>
        </trans-unit>
        <trans-unit id="633c2aa79d88322b5d53222bfe0bb765531ece57" translate="yes" xml:space="preserve">
          <source>Uint32Array</source>
          <target state="translated">Uint32Array</target>
        </trans-unit>
        <trans-unit id="9a32be0557e5b962a300fae5eae084606cc75c5b" translate="yes" xml:space="preserve">
          <source>Uint32Array.length</source>
          <target state="translated">Uint32Array.length</target>
        </trans-unit>
        <trans-unit id="3ddd1a79a08fc259a7e408049af5fbb7e974b888" translate="yes" xml:space="preserve">
          <source>Uint32Array.uint32Array</source>
          <target state="translated">Uint32Array.uint32Array</target>
        </trans-unit>
        <trans-unit id="9dafd0a91ea1eadf5a4b323d71716a37f430543c" translate="yes" xml:space="preserve">
          <source>Uint8Array</source>
          <target state="translated">Uint8Array</target>
        </trans-unit>
        <trans-unit id="ad6c3f16d622ed3c29d4d93a881fdbf40e238c0f" translate="yes" xml:space="preserve">
          <source>Uint8Array.length</source>
          <target state="translated">Uint8Array.length</target>
        </trans-unit>
        <trans-unit id="1bf45e170522d1591a01b5e5a68a4483726762cd" translate="yes" xml:space="preserve">
          <source>Uint8Array.uint8Array</source>
          <target state="translated">Uint8Array.uint8Array</target>
        </trans-unit>
        <trans-unit id="80d3d1902630c787d741b39af0ddaba8dab6c5b7" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray</source>
          <target state="translated">Uint8ClampedArray</target>
        </trans-unit>
        <trans-unit id="3a7bddb5e24e03c48a5b389efa8055d3f2f596c5" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray.length</source>
          <target state="translated">Uint8ClampedArray.length</target>
        </trans-unit>
        <trans-unit id="ccfac38ad09ac22fbd87ec8e921d941b07493a76" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray.uint8ClampedArray</source>
          <target state="translated">Uint8ClampedArray.uint8ClampedArray</target>
        </trans-unit>
        <trans-unit id="bb9756e2dd53d8b412b093978529a20e6d87e501" translate="yes" xml:space="preserve">
          <source>Unary Negation</source>
          <target state="translated">単項否定</target>
        </trans-unit>
        <trans-unit id="d2cedd82f30bde7abbd2d251adf7228473d72aed" translate="yes" xml:space="preserve">
          <source>Unary Plus</source>
          <target state="translated">ユニラリープラス</target>
        </trans-unit>
        <trans-unit id="8ef32a4eb4865a453296ac56533c333d88cd656a" translate="yes" xml:space="preserve">
          <source>Unary negation</source>
          <target state="translated">単項否定</target>
        </trans-unit>
        <trans-unit id="513b253806a1a356b911c79a51a7bafa6bc52f0a" translate="yes" xml:space="preserve">
          <source>Unary negation (-)</source>
          <target state="translated">単項否定(-)</target>
        </trans-unit>
        <trans-unit id="befe22eda70bd6b5e1a787a97596068e0774676c" translate="yes" xml:space="preserve">
          <source>Unary negation (&lt;code&gt;-&lt;/code&gt;)</source>
          <target state="translated">単項否定（ &lt;code&gt;-&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2175fbf583faffd964056ecd48216ec1b48dc4d3" translate="yes" xml:space="preserve">
          <source>Unary negation operator</source>
          <target state="translated">単項否定演算子</target>
        </trans-unit>
        <trans-unit id="ca09f5dbf89ea3eafb5ab27f217efe0b06a097c4" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
          <target state="translated">単項演算子</target>
        </trans-unit>
        <trans-unit id="15dd199b76f75f334b5e0311a2aebbf1ae2e499c" translate="yes" xml:space="preserve">
          <source>Unary plus</source>
          <target state="translated">単項プラス</target>
        </trans-unit>
        <trans-unit id="abac30e3a2acb94fc462772b11ad68a9aa79c850" translate="yes" xml:space="preserve">
          <source>Unary plus (+)</source>
          <target state="translated">単項プラス(+)</target>
        </trans-unit>
        <trans-unit id="6bddeb4ef451282ac6aa78a777db40cd95d2a793" translate="yes" xml:space="preserve">
          <source>Unary plus (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">単項プラス（ &lt;code&gt;+&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f1e6a8690b5407a8cd8b47ecfc5993848fa44158" translate="yes" xml:space="preserve">
          <source>Unary plus operator</source>
          <target state="translated">単項演算子</target>
        </trans-unit>
        <trans-unit id="2ae6cd0092c46d08603bf82278684279219f6c3a" translate="yes" xml:space="preserve">
          <source>Unconditional &lt;code&gt;catch&lt;/code&gt; clause</source>
          <target state="translated">無条件の &lt;code&gt;catch&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="cf180ccf6ec4ce4f39c2feff2a257878d4d851c6" translate="yes" xml:space="preserve">
          <source>Unconditional catch-block</source>
          <target state="translated">無条件キャッチブロック</target>
        </trans-unit>
        <trans-unit id="5140ee34748e590252ad94ce595eb05fc7886054" translate="yes" xml:space="preserve">
          <source>Undeclared var</source>
          <target state="translated">未定義の var</target>
        </trans-unit>
        <trans-unit id="0646f4afd90c8fdb87bbcb57b63ee1911f5a9a46" translate="yes" xml:space="preserve">
          <source>Undefined</source>
          <target state="translated">Undefined</target>
        </trans-unit>
        <trans-unit id="fb9dc4c2e3785b2c955042e52cbcc556d0858881" translate="yes" xml:space="preserve">
          <source>Undefined prop</source>
          <target state="translated">未定義の支柱</target>
        </trans-unit>
        <trans-unit id="3fec4e60edf8ef578608ef502f4b2bacf3d7f069" translate="yes" xml:space="preserve">
          <source>Unescaped strings</source>
          <target state="translated">非エスケープされていない文字列</target>
        </trans-unit>
        <trans-unit id="9fea685493a4859bb8dc7e48575411686bbd53e5" translate="yes" xml:space="preserve">
          <source>Unexpected token</source>
          <target state="translated">予期せぬトークン</target>
        </trans-unit>
        <trans-unit id="74dc936b263127fe4e9c42a9713ee6214e5bfcfe" translate="yes" xml:space="preserve">
          <source>Unexpected type</source>
          <target state="translated">意外なタイプ</target>
        </trans-unit>
        <trans-unit id="3aa854c653b7eb660e3b2a7248d1ad77d3b5c56a" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;next()&lt;/code&gt; is asymmetric, but that can&amp;rsquo;t be helped: It always sends a value to the currently suspended &lt;code&gt;yield&lt;/code&gt;, but returns the operand of the following &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">残念ながら、 &lt;code&gt;next()&lt;/code&gt; は非対称ですが、それは仕方がありません。常に現在中断されている &lt;code&gt;yield&lt;/code&gt; に値を送信しますが、次の &lt;code&gt;yield&lt;/code&gt; のオペランドを返します。</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="537e31c48ccfc41d333a11e569663d9bfbd973d3" translate="yes" xml:space="preserve">
          <source>Unicode Calendar Identifiers</source>
          <target state="translated">ユニコードカレンダー識別子</target>
        </trans-unit>
        <trans-unit id="3aa67e229e028f4e2518a13e826c51320c849d4e" translate="yes" xml:space="preserve">
          <source>Unicode Hour Cycle extension key spec</source>
          <target state="translated">ユニコードアワーサイクル拡張キー仕様</target>
        </trans-unit>
        <trans-unit id="5a088d8dac52305ddd74345a8b035629f9284105" translate="yes" xml:space="preserve">
          <source>Unicode Standard Annex #15, Unicode Normalization Forms</source>
          <target state="translated">Unicode 標準付属書#15、Unicode 正規化フォーム</target>
        </trans-unit>
        <trans-unit id="48c01f8059a880d3490d40f931d17143df746745" translate="yes" xml:space="preserve">
          <source>Unicode assigns a unique numerical value, called a &lt;em&gt;code point&lt;/em&gt;, to each character. For example, the code point for &lt;code&gt;&quot;A&quot;&lt;/code&gt; is given as U+0041. However, sometimes more than one code point, or sequence of code points, can represent the same abstract character &amp;mdash; the character &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; for example can be represented by either of:</source>
          <target state="translated">Unicodeは、&lt;em&gt;コードポイント&lt;/em&gt;と呼ばれる一意の数値を各文字に割り当てます。たとえば、 &lt;code&gt;&quot;A&quot;&lt;/code&gt; コードポイントはU +0041として与えられます。ただし、複数のコードポイントまたはコードポイントのシーケンスが同じ抽象文字を表す場合があります。たとえば、文字 &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; は次のいずれかで表すことができます。</target>
        </trans-unit>
        <trans-unit id="8aeb7b4cc9b69c84a8bd5b5a1b98a28feefcdbd5" translate="yes" xml:space="preserve">
          <source>Unicode calendar keys</source>
          <target state="translated">ユニコードカレンダーキー</target>
        </trans-unit>
        <trans-unit id="a6806fbefa012f1af07a892d26cd3987cb481a4c" translate="yes" xml:space="preserve">
          <source>Unicode case first collation spec</source>
          <target state="translated">ユニコードケースファースト照合仕様</target>
        </trans-unit>
        <trans-unit id="f9c11da5db018877d7b5c0c5897bd818df342deb" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes</source>
          <target state="translated">Unicode ポイントコードのエスケープ</target>
        </trans-unit>
        <trans-unit id="53798ed42b9b310fc8897a38bd9f5a8ec102f8a2" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes \u{xxxxxx}</source>
          <target state="translated">Unicodeポイントコードエスケープ ΜΜετετεώγραμμαμαώγραμαμαμα</target>
        </trans-unit>
        <trans-unit id="ab691dc2f55ca32e25cc09e838e42a2db66ff157" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;&lt;code&gt;\u{}&lt;/code&gt;&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">「 &lt;code&gt;\u{}&lt;/code&gt; 」で示されるUnicodeコードポイントエスケープ（例： &lt;code&gt;\u{2F804}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2520911378d53256963efaa10beebc649575df9" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;\u{}&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">「\ u {}」で示されるUnicodeコードポイントエスケープ、たとえば &lt;code&gt;\u{2F804}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2a65696a4b66acd3ee78503a48ea845d6affce7" translate="yes" xml:space="preserve">
          <source>Unicode code points range from 0 to 1114111 (0x10FFFF). The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript Guide&lt;/a&gt;.</source>
          <target state="translated">Unicodeコードポイントの範囲は0〜1114111（0x10FFFF）です。最初の128個のUnicodeコードポイントは、ASCII文字エンコーディングと直接一致しています。Unicodeについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScriptガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="94b4b6127f87c683d4345dfc6bfc7a024191f59b" translate="yes" xml:space="preserve">
          <source>Unicode code points range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1114111&lt;/code&gt;&lt;code&gt;(0x10FFFF&lt;/code&gt;). The first 128 Unicode code points are a direct match of the ASCII character encoding. (For information on Unicode, see the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript Guide&lt;/a&gt;.)</source>
          <target state="translated">Unicodeコードポイントは、範囲 &lt;code&gt;0&lt;/code&gt; に &lt;code&gt;1114111&lt;/code&gt; &lt;code&gt;(0x10FFFF&lt;/code&gt; ）。最初の128個のUnicodeコードポイントは、ASCII文字エンコーディングと直接一致します。（Unicodeについては、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScriptガイドを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="a025134c79f4b9916732f16566a13ab47dedcf4b" translate="yes" xml:space="preserve">
          <source>Unicode equivalence</source>
          <target state="translated">ユニコード等価性</target>
        </trans-unit>
        <trans-unit id="e71b40efb0d9265c1c1c189e5fac0f62e09e0426" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences</source>
          <target state="translated">ユニコードエスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="d76088f1c6b72836fc3ecd9c247d6015e773943c" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences (&lt;code&gt;'\u00A9'&lt;/code&gt;)</source>
          <target state="translated">Unicodeエスケープシーケンス（ &lt;code&gt;'\u00A9'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6a07429888c5454a48c5e7f3c7157573736be014" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences are valid JSON and are well-formed in both UTF-16 and UTF-8.</source>
          <target state="translated">Unicode エスケープシーケンスは有効な JSON であり、UTF-16 と UTF-8 の両方で整形されています。</target>
        </trans-unit>
        <trans-unit id="0fdaa28f5f9111accb0453491f8fbe09c9322dbe" translate="yes" xml:space="preserve">
          <source>Unicode escapes started by &quot;&lt;code&gt;\u&lt;/code&gt;&quot;, for example &lt;code&gt;\u00A9&lt;/code&gt;</source>
          <target state="translated">「 &lt;code&gt;\u&lt;/code&gt; 」で始まるUnicodeエスケープ、たとえば &lt;code&gt;\u00A9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a6ca54dc4df4102b400b35f7aa6149f2bc04adc" translate="yes" xml:space="preserve">
          <source>Unicode escapes started by &quot;\u&quot;, for example &lt;code&gt;\u00A9&lt;/code&gt;</source>
          <target state="translated">「\ u」で始まるUnicodeエスケープ、たとえば &lt;code&gt;\u00A9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5ae9c1a41c16af126275d4895ad5a15fbd0a14b" translate="yes" xml:space="preserve">
          <source>Unicode format-control characters</source>
          <target state="translated">ユニコード形式制御文字</target>
        </trans-unit>
        <trans-unit id="afe90b8a0cefd230b17ee353f92930bd95abde75" translate="yes" xml:space="preserve">
          <source>Unicode language subtag specification</source>
          <target state="translated">ユニコード言語サブタグ仕様</target>
        </trans-unit>
        <trans-unit id="4207405a376524e0f464800ab5a6d19943e6fdbe" translate="yes" xml:space="preserve">
          <source>Unicode locale identifiers spec</source>
          <target state="translated">ユニコードローカル識別子仕様</target>
        </trans-unit>
        <trans-unit id="efa15d0d47400b8935adb1ab9d0e8b0e45121a09" translate="yes" xml:space="preserve">
          <source>Unicode point escapes (&lt;code&gt;\u{}&lt;/code&gt;)</source>
          <target state="translated">Unicodeポイントエスケープ（ &lt;code&gt;\u{}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="882ff6fb6578ac00311b7f580283cea902a289e7" translate="yes" xml:space="preserve">
          <source>Unicode property escapes (&lt;code&gt;\p{...}&lt;/code&gt;)</source>
          <target state="translated">Unicodeプロパティエスケープ（ &lt;code&gt;\p{...}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6214bbccfadbea038e76de6938a79dd717300127" translate="yes" xml:space="preserve">
          <source>Unicode region chart</source>
          <target state="translated">ユニコード地域図</target>
        </trans-unit>
        <trans-unit id="07dfb270cb268ed19379dc3dceef5af758e17b36" translate="yes" xml:space="preserve">
          <source>Unicode's Likely Subtags spec</source>
          <target state="translated">Unicode の可能性の高いサブタグ仕様</target>
        </trans-unit>
        <trans-unit id="00ea79b512d9b8c3b654288c74bbc4478360f373" translate="yes" xml:space="preserve">
          <source>Unicode's script subtag specification</source>
          <target state="translated">ユニコードのスクリプトサブタグ仕様</target>
        </trans-unit>
        <trans-unit id="b457734b05257a40626b40dc1f3d85a644a6b034" translate="yes" xml:space="preserve">
          <source>Unicode; treat pattern as a sequence of Unicode code points</source>
          <target state="translated">Unicode;パターンを Unicode コードポイントのシーケンスとして扱います。</target>
        </trans-unit>
        <trans-unit id="24a26a3e21bc5c2b19eca935b90d92fc4e3215cb" translate="yes" xml:space="preserve">
          <source>Unintentional usage</source>
          <target state="translated">意図しない使い方</target>
        </trans-unit>
        <trans-unit id="3c68db9ebd05bc7b84e6663809b1bf05cfd135cd" translate="yes" xml:space="preserve">
          <source>Unit formatting</source>
          <target state="translated">単位フォーマット</target>
        </trans-unit>
        <trans-unit id="aa095f39367e9770516becaf1eae9a982d34d239" translate="yes" xml:space="preserve">
          <source>Unit to use in the relative time internationalized message. Possible values are: &lt;code&gt;&quot;year&quot;&lt;/code&gt;, &lt;code&gt;&quot;quarter&quot;&lt;/code&gt;, &lt;code&gt;&quot;month&quot;, &quot;week&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;&lt;/code&gt;. Plural forms are also permitted.</source>
          <target state="translated">相対時間の国際化されたメッセージで使用する単位。可能な値は、 &lt;code&gt;&quot;year&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;quarter&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;month&quot;, &quot;week&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;&lt;/code&gt; です。複数形も許可されます。</target>
        </trans-unit>
        <trans-unit id="bc7819b34ff87570745fbe461e36a16f80e562ce" translate="yes" xml:space="preserve">
          <source>Unknown</source>
          <target state="translated">Unknown</target>
        </trans-unit>
        <trans-unit id="261fcf34c4ffd802d6ad89abd31a44a403246f9b" translate="yes" xml:space="preserve">
          <source>Unknown&lt;br/&gt;&lt;small&gt;The definition of 'Date.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">不明&lt;br/&gt;&lt;small&gt;その仕様における「Date.prototype.toString」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ca1ec488d4c3813e5ddc4aeabede823ddee58876" translate="yes" xml:space="preserve">
          <source>Unless the two headers mentioned above are set, the various &lt;code&gt;postMessage()&lt;/code&gt; APIs will throw for &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects. If they are set, &lt;code&gt;postMessage()&lt;/code&gt; on &lt;code&gt;Window&lt;/code&gt; objects and dedicated workers will function and allow for memory sharing.</source>
          <target state="translated">上記の2つのヘッダーが設定されていない限り、さまざまな &lt;code&gt;postMessage()&lt;/code&gt; APIが &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトに対してスローします。これらが設定されている場合、 &lt;code&gt;postMessage()&lt;/code&gt; 上の &lt;code&gt;Window&lt;/code&gt; オブジェクトと、専用の労働者が機能し、メモリ共有が可能になります。</target>
        </trans-unit>
        <trans-unit id="5d6eb41228ded668c4a8d6e78574bc28b4827b14" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; (which will be resolved with &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; will be resolved with &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">異なり &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; （で解決される &lt;code&gt;undefined&lt;/code&gt; ）、 &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; の意志 &lt;code&gt;2&lt;/code&gt; で解決されます。</target>
        </trans-unit>
        <trans-unit id="992c78e7dae6d35a22f3c338d3ca7543e3e2aebd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;, you must specify a value for a &lt;code&gt;const&lt;/code&gt; declaration. This throws:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; や &lt;code&gt;let&lt;/code&gt; とは異なり、 &lt;code&gt;const&lt;/code&gt; 宣言の値を指定する必要があります。これはスローします：</target>
        </trans-unit>
        <trans-unit id="613c8f89d1402bfce10e0e37b5d94ff07d7a3cb9" translate="yes" xml:space="preserve">
          <source>Unlike accessor properties, value properties are always set on the object itself, not on a prototype. However, if a non-writable value property is inherited, it still prevents from modifying the property on the object.</source>
          <target state="translated">アクセサプロパティとは異なり、値プロパティは常にプロトタイプ上ではなく、オブジェクト自体に設定されます。しかし、書き換え不可能な値プロパティが継承された場合でも、そのプロパティをオブジェクト上で変更することはできません。</target>
        </trans-unit>
        <trans-unit id="ba04f2c0c252a2d67593d43ddb3827c08d93eb16" translate="yes" xml:space="preserve">
          <source>Unlike all other possible values in JavaScript, it is not possible to rely on the equality operators (== and ===) to determine whether a value &lt;em&gt;is&lt;/em&gt;&lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or not, because both &lt;code&gt;NaN == NaN&lt;/code&gt; and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt;. Hence, the necessity of an &lt;code&gt;isNaN&lt;/code&gt; function.</source>
          <target state="translated">JavaScriptの他のすべての可能な値とは異なり、 &lt;code&gt;NaN == NaN&lt;/code&gt; と &lt;code&gt;NaN === NaN&lt;/code&gt; 両方が次のように評価されるため、値&lt;em&gt;が&lt;/em&gt;&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;かどうかを判断するために等号演算子（==および===）に依存することはできません。 &lt;code&gt;false&lt;/code&gt; 。したがって、 &lt;code&gt;isNaN&lt;/code&gt; 関数の必要性。</target>
        </trans-unit>
        <trans-unit id="8c25308bb7bf2bbbc7257d1a5273188bec1c4892" translate="yes" xml:space="preserve">
          <source>Unlike all other possible values in JavaScript, it is not possible to use the equality operators (== and ===) to compare a value against &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; to determine whether the value &lt;em&gt;is&lt;/em&gt;&lt;code&gt;NaN&lt;/code&gt; or not, because both &lt;code&gt;NaN == NaN&lt;/code&gt; and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt;. Hence, the necessity of an &lt;code&gt;isNaN&lt;/code&gt; function.</source>
          <target state="translated">JavaScriptで可能な他のすべての値とは異なり、 &lt;code&gt;NaN == NaN&lt;/code&gt; と &lt;code&gt;NaN === NaN&lt;/code&gt; 両方であるため、等価演算子（==および===）を使用して値を&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;と比較し、値&lt;em&gt;が&lt;/em&gt; &lt;code&gt;NaN&lt;/code&gt; であるかどうかを判断すること&lt;em&gt;は&lt;/em&gt;できません。== NaNは &lt;code&gt;false&lt;/code&gt; と評価されます。したがって、 &lt;code&gt;isNaN&lt;/code&gt; 関数の必要性。</target>
        </trans-unit>
        <trans-unit id="8e5e68074ae161a867483e827fe011f25ea61ed3" translate="yes" xml:space="preserve">
          <source>Unlike base class constructors, derived constructors have no initial &lt;code&gt;this&lt;/code&gt; binding. Calling &lt;a href=&quot;super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;this&lt;/code&gt; binding within the constructor and essentially has the effect of evaluating the following line of code, where Base is the inherited class:</source>
          <target state="translated">基本クラスのコンストラクターとは異なり、派生コンストラクターには最初の &lt;code&gt;this&lt;/code&gt; バインディングがありません。&lt;a href=&quot;super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;を呼び出すと、コンストラクター内に &lt;code&gt;this&lt;/code&gt; バインディングが作成され、基本的に次のコード行を評価する効果があります。ここで、Baseは継承されたクラスです。</target>
        </trans-unit>
        <trans-unit id="5efd508e8d41fe9661eaa00bc9ed36669f651ee8" translate="yes" xml:space="preserve">
          <source>Unlike functions defined by function expressions or by the &lt;code&gt;Function&lt;/code&gt; constructor, a function defined by a function declaration can be used before the function declaration itself. For example:</source>
          <target state="translated">関数式または &lt;code&gt;Function&lt;/code&gt; コンストラクターによって定義された関数とは異なり、関数宣言によって定義された関数は、関数宣言自体の前に使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="22fe178bb9987412c1ce8ad5b696df107c408836" translate="yes" xml:space="preserve">
          <source>Unlike in other programming languages (e.g. Python), you can't search in strings using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">他のプログラミング言語（Pythonなど）とは異なり、&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 演算子&lt;/a&gt;を使用して文字列を検索することはできません。</target>
        </trans-unit>
        <trans-unit id="e97c189d35dbbc3bbd40408b5695832d7c02e8a0" translate="yes" xml:space="preserve">
          <source>Unlike many other global objects, &lt;code&gt;Math&lt;/code&gt; is not a constructor. All properties and methods of &lt;code&gt;Math&lt;/code&gt; are static. You refer to the constant pi as &lt;code&gt;Math.PI&lt;/code&gt; and you call the sine function as &lt;code&gt;Math.sin(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;, where &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is the method&amp;rsquo;s argument. Constants are defined with the full precision of real numbers in JavaScript.</source>
          <target state="translated">他の多くのグローバルオブジェクトとは異なり、 &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません。 &lt;code&gt;Math&lt;/code&gt; のすべてのプロパティとメソッドは静的です。定数piを &lt;code&gt;Math.PI&lt;/code&gt; と呼び、正弦関数を &lt;code&gt;Math.sin(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; と呼びます。ここで、 &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; はメソッドの引数です。定数は、JavaScriptの実数の完全な精度で定義されます。</target>
        </trans-unit>
        <trans-unit id="98b024aecb9721a4423deed34c80d321abd01b94" translate="yes" xml:space="preserve">
          <source>Unlike most global objects, &lt;code&gt;Reflect&lt;/code&gt; is not a constructor. You cannot use it with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; or invoke the &lt;code&gt;Reflect&lt;/code&gt; object as a function. All properties and methods of &lt;code&gt;Reflect&lt;/code&gt; are static (just like the &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">ほとんどのグローバルオブジェクトとは異なり、 &lt;code&gt;Reflect&lt;/code&gt; はコンストラクタではありません。&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 演算子で&lt;/a&gt;使用したり、 &lt;code&gt;Reflect&lt;/code&gt; オブジェクトを関数として呼び出したりすることはできません。 &lt;code&gt;Reflect&lt;/code&gt; のすべてのプロパティとメソッドは静的です（&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;オブジェクトと同様）。</target>
        </trans-unit>
        <trans-unit id="ddc001d6383fdc0b3350bcf9ef726630747b7699" translate="yes" xml:space="preserve">
          <source>Unlike most other global objects, &lt;code&gt;WebAssembly&lt;/code&gt; is not a constructor (it is not a function object). You can compare it to &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, which is also a namespace object for mathematical constants and functions, or to &lt;a href=&quot;intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt; which is the namespace object for internationalization constructors and other language sensitive functions.</source>
          <target state="translated">他のほとんどのグローバルオブジェクトとは異なり、 &lt;code&gt;WebAssembly&lt;/code&gt; はコンストラクターではありません（関数オブジェクトではありません）。これを、数学定数および関数の名前空間オブジェクトでもある&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、または国際化コンストラクターやその他の言語依存関数の名前空間オブジェクトである&lt;a href=&quot;intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;と比較できます。</target>
        </trans-unit>
        <trans-unit id="122764b6a950c39ddd1acc102dbb5a46e158e8ef" translate="yes" xml:space="preserve">
          <source>Unlike most other global objects, &lt;code&gt;WebAssembly&lt;/code&gt; is not a constructor (it is not a function object). You can compare it to &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, which is also a namespace object for mathematical constants and functions, or to &lt;a href=&quot;intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt; which is the namespace object for internationalization constructors and other language-sensitive functions.</source>
          <target state="translated">他のほとんどのグローバルオブジェクトとは異なり、 &lt;code&gt;WebAssembly&lt;/code&gt; はコンストラクターではありません（関数オブジェクトではありません）。これを、数学定数や関数の名前空間オブジェクトでもある&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、または国際化コンストラクターやその他の言語に依存する関数の名前空間オブジェクトである&lt;a href=&quot;intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;と比較できます。</target>
        </trans-unit>
        <trans-unit id="d4056340aaf08be974198ab42625840e3f1defbd" translate="yes" xml:space="preserve">
          <source>Unlike some other languages, JavaScript makes no distinction between single-quoted strings and double-quoted strings; therefore, the escape sequences above work in strings created with either single or double quotes.</source>
          <target state="translated">他の言語とは異なり、JavaScript は単一引用符で囲まれた文字列と二重引用符で囲まれた文字列を区別しません。</target>
        </trans-unit>
        <trans-unit id="3b9dce1197424f6e6df686b7bcbba3ed30a161fc" translate="yes" xml:space="preserve">
          <source>Unlike the other global objects, &lt;code&gt;Math&lt;/code&gt; is not a constructor. All properties and methods of &lt;code&gt;Math&lt;/code&gt; are static. You refer to the constant pi as &lt;code&gt;Math.PI&lt;/code&gt; and you call the sine function as &lt;code&gt;Math.sin(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.</source>
          <target state="translated">他のグローバルオブジェクトとは異なり、 &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません。 &lt;code&gt;Math&lt;/code&gt; のすべてのプロパティとメソッドは静的です。定数piを &lt;code&gt;Math.PI&lt;/code&gt; として参照し、正弦関数を &lt;code&gt;Math.sin(x)&lt;/code&gt; として呼び出します。ここで、 &lt;code&gt;x&lt;/code&gt; はメソッドの引数です。定数は、JavaScriptで実数の完全な精度で定義されます。</target>
        </trans-unit>
        <trans-unit id="eeefb383e0bbc04cf7a736fd1f6a3533defaebd6" translate="yes" xml:space="preserve">
          <source>Unlike the other three &lt;code&gt;Math&lt;/code&gt; methods: &lt;a href=&quot;floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ceil&quot;&gt;&lt;code&gt;Math.ceil()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;, the way &lt;code&gt;Math.trunc()&lt;/code&gt; works is very simple. It &lt;em&gt;truncates&lt;/em&gt; (cuts off) the dot and the digits to the right of it, no matter whether the argument is a positive or negative number.</source>
          <target state="translated">他の3つの &lt;code&gt;Math&lt;/code&gt; メソッドとは異なります。&lt;a href=&quot;floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;ceil&quot;&gt; &lt;code&gt;Math.ceil()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt;、道 &lt;code&gt;Math.trunc()&lt;/code&gt; の作品は非常に簡単です。これは、&lt;em&gt;切り捨て&lt;/em&gt;（カットオフ）その右、引数が正または負の数であるかどうかに関係なくにドットと数字を。</target>
        </trans-unit>
        <trans-unit id="f1844c37bdbe74a20f4144cdd99b6a1033b0ce1c" translate="yes" xml:space="preserve">
          <source>Unlike variables declared with &lt;a href=&quot;var#var_hoisting&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt;, which will start with the value &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; variables are &lt;em&gt;not&lt;/em&gt; initialized until their definition is evaluated. Accessing the variable before the initialization results in a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;. The variable is in a &quot;temporal dead zone&quot; from the start of the block until the initialization is processed.</source>
          <target state="translated">宣言した変数とは異なり&lt;a href=&quot;var#var_hoisting&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt;の値で開始し、 &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 変数がされて&lt;em&gt;いない&lt;/em&gt;彼らの定義が評価されるまで初期化。初期化の前に変数にアクセスすると、&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; が発生し&lt;/a&gt;ます。変数は、ブロックの開始から初期化が処理されるまで「一時的なデッドゾーン」にあります。</target>
        </trans-unit>
        <trans-unit id="7c863a340e0612467bd35ad32221ddc10e7153e9" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests (perhaps due to other programming languages like &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cpp/delete-operator-cpp?view=vs-2019&quot;&gt;delete in C++&lt;/a&gt;), the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page for more details.</source>
          <target state="translated">一般的な信念が示唆していることとは異なり（おそらく&lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cpp/delete-operator-cpp?view=vs-2019&quot;&gt;C ++のdeleteの&lt;/a&gt;ような他のプログラミング言語のため）、 &lt;code&gt;delete&lt;/code&gt; 演算子はメモリを直接解放することとは&lt;strong&gt;何の関係も&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。メモリ管理は、参照を壊すことによって間接的に行われます。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;メモリ管理&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="3777b67e3ef2b77b0df4da0e1a2446fea2519cd3" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page and the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator page for more details.</source>
          <target state="translated">一般的な考えが示唆するものとは異なり、 &lt;code&gt;delete&lt;/code&gt; 演算子はメモリを直接解放することとは&lt;strong&gt;何の関係も&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。メモリ管理は、参照を壊して間接的に行われます。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;メモリ管理&lt;/a&gt;ページと &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 演算子ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="8094e45f031ff99438db42e704fbbb4cdbea53d7" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references, see the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page and the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator page for more details.</source>
          <target state="translated">一般的な信念が示唆していることとは異なり、 &lt;code&gt;delete&lt;/code&gt; 演算子はメモリを直接解放することとは&lt;strong&gt;何の関係も&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。メモリ管理は、参照を解除することで間接的に実行されます。詳細については、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;メモリ管理&lt;/a&gt;ページと &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 演算子ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="ea30abbe64db13ca7800df70b372d3d8701c60f0" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page for more details.</source>
          <target state="translated">一般的な考えが示唆するものとは異なり、 &lt;code&gt;delete&lt;/code&gt; 演算子はメモリを直接解放することとは&lt;strong&gt;何の関係も&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。メモリ管理は、参照を壊すことで間接的に行われます。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;メモリ管理&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="1892325da1ca271d2f0925142d0f4c916c78e9ff" translate="yes" xml:space="preserve">
          <source>Unlike with simply undeclared variables and variables that hold a value of &lt;code&gt;undefined&lt;/code&gt;, using the &lt;code&gt;typeof&lt;/code&gt; operator to check for the type of a variable in that variable's TDZ will throw a &lt;code&gt;ReferenceError&lt;/code&gt;:</source>
          <target state="translated">単に宣言されていない変数や &lt;code&gt;undefined&lt;/code&gt; の値を保持する変数とは異なり、 &lt;code&gt;typeof&lt;/code&gt; 演算子を使用してその変数のTDZ内の変数の型を確認すると、 &lt;code&gt;ReferenceError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="e3f39eec656c6819edddd487c281136c888d559f" translate="yes" xml:space="preserve">
          <source>Unlike with simply undeclared variables and variables that hold a value of &lt;code&gt;undefined&lt;/code&gt;, using the &lt;code&gt;typeof&lt;/code&gt; operator to check for the type of a variable in that variable's temporal dead zone will throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">単に宣言されていない変数や &lt;code&gt;undefined&lt;/code&gt; の値を保持する変数とは異なり、 &lt;code&gt;typeof&lt;/code&gt; 演算子を使用してその変数の一時的な不感帯にある変数の型を確認すると、&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="13fbb415054724c22847ea0715d22ed47c3a9f06" translate="yes" xml:space="preserve">
          <source>Unnamed function statement</source>
          <target state="translated">名前のない関数文</target>
        </trans-unit>
        <trans-unit id="3a823b2e9d8bb93c11fe4029a9d33a0572f111b1" translate="yes" xml:space="preserve">
          <source>Unpacked from an object and assigned to a variable with a different name.</source>
          <target state="translated">オブジェクトから解凍して、別の名前の変数に代入します。</target>
        </trans-unit>
        <trans-unit id="de009fd834e141f4ba177dc9618c2d16e92d6029" translate="yes" xml:space="preserve">
          <source>Unpacking fields from objects passed as a function parameter</source>
          <target state="translated">関数パラメータとして渡されたオブジェクトからフィールドを展開する</target>
        </trans-unit>
        <trans-unit id="9862cd4cd322ef31e87d03071b6bcceeff8ba01f" translate="yes" xml:space="preserve">
          <source>Unpacking fields from objects passed as function parameter</source>
          <target state="translated">関数パラメータとして渡されたオブジェクトからフィールドを展開する</target>
        </trans-unit>
        <trans-unit id="a72c257472bbec8c93924ec70c97af088fa8b78f" translate="yes" xml:space="preserve">
          <source>Unpacking values from a regular expression match</source>
          <target state="translated">正規表現のマッチから値を展開する</target>
        </trans-unit>
        <trans-unit id="3c28b41a73146e42cc542100b6790d2fcad942af" translate="yes" xml:space="preserve">
          <source>Unprivileged code has no access to Component.utils and might just be able catch the exception.</source>
          <target state="translated">非特権コードはComponent.utilsにアクセスできないので、例外をキャッチできるかもしれません。</target>
        </trans-unit>
        <trans-unit id="0f77d48631d074f8812ce7e706fd824c895d74d8" translate="yes" xml:space="preserve">
          <source>Unqualified identifier assignments</source>
          <target state="translated">非限定的な識別子の割り当て</target>
        </trans-unit>
        <trans-unit id="798bada17a5178e499c053a0efb6062522b9a545" translate="yes" xml:space="preserve">
          <source>Unreachable code after a return statement might occur in these situations:</source>
          <target state="translated">このような状況では、return文の後に到達不可能なコードが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b064fc67acbd0ef9b9b63753613c5ec8f5262efc" translate="yes" xml:space="preserve">
          <source>Unrecognizable strings or dates containing illegal element values in ISO formatted strings usually return &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;. However, depending on the implementation, non&amp;ndash;conforming ISO format strings, may also throw &lt;code&gt;RangeError: invalid date&lt;/code&gt;, like the following cases in Firefox:</source>
          <target state="translated">ISO形式の文字列に認識できない文字列または無効な要素値を含む日付は、通常&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; を&lt;/a&gt;返します。ただし、実装によっては、ISO形式に準拠していない文字列でも &lt;code&gt;RangeError: invalid date&lt;/code&gt; スローされることがあります。これは、Firefoxでの次のケースのようです。</target>
        </trans-unit>
        <trans-unit id="ed4b4cb54e255328feddea88595866fc8d421e3b" translate="yes" xml:space="preserve">
          <source>Unregisters an object from the registry.</source>
          <target state="translated">レジストリからオブジェクトの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="a37e276fc3dbd030fca8077a9bf31908eb1390f5" translate="yes" xml:space="preserve">
          <source>Unscopables in objects</source>
          <target state="translated">オブジェクトのuncopables</target>
        </trans-unit>
        <trans-unit id="e81fef07edc67efb5e5490c3757143a0a1dfe468" translate="yes" xml:space="preserve">
          <source>Unsigned right shift</source>
          <target state="translated">符号なし右シフト</target>
        </trans-unit>
        <trans-unit id="1a424d3649ada9bd2e68f41ec2ffaf5a64c6736e" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment</source>
          <target state="translated">符号なしの右シフト代入</target>
        </trans-unit>
        <trans-unit id="01cfe037451019c8188afb27bfd425f5645d3d7c" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment (&lt;code&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/code&gt;)</source>
          <target state="translated">符号なし右シフト割り当て（ &lt;code&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7174ad40b094623912230b22e6426073b58eab4e" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment operator</source>
          <target state="translated">符号なし右シフト代入演算子</target>
        </trans-unit>
        <trans-unit id="af4eae21d35a396aab333964e702c6f49fee4317" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment.</source>
          <target state="translated">符号なしの右シフト代入。</target>
        </trans-unit>
        <trans-unit id="39bb8b693b9f5dddd8e42f00c9b2036e7957e7fc" translate="yes" xml:space="preserve">
          <source>Unsigned right shift operator</source>
          <target state="translated">符号なし右シフト演算子</target>
        </trans-unit>
        <trans-unit id="7d202f64842a95528992bee505d4ede3f3717db4" translate="yes" xml:space="preserve">
          <source>Unterminated string literal</source>
          <target state="translated">終端されていない文字列リテラル</target>
        </trans-unit>
        <trans-unit id="426b353b9db4c19924afb606b4d29ebfe9ff35a2" translate="yes" xml:space="preserve">
          <source>Unterminated strings</source>
          <target state="translated">終端処理されていない文字列</target>
        </trans-unit>
        <trans-unit id="29ea0648053f54642ebdbcc8d7bc0b0d60c2732f" translate="yes" xml:space="preserve">
          <source>Until ECMAScript 2018 (edition 9), the format of the string returned by &lt;code&gt;Date.prototype.toString&lt;/code&gt; was implementation dependent. Therefore it should not be relied upon to be in the specified format.</source>
          <target state="translated">ECMAScript 2018（エディション9）までは、 &lt;code&gt;Date.prototype.toString&lt;/code&gt; によって返される文字列の形式は実装に依存していました。したがって、指定された形式であることを信頼してはなりません。</target>
        </trans-unit>
        <trans-unit id="796e16a716c7e4675178c5c341dd62f55ed0ba3c" translate="yes" xml:space="preserve">
          <source>Until arrow functions, every new function defined its own &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; value (based on how function was called, a new object in the case of a constructor, undefined in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; function calls, the base object if the function is called as an &quot;object method&quot;, etc.). This proved to be less than ideal with an object-oriented style of programming.</source>
          <target state="translated">アロー関数まで、すべての新しい関数はそれ自身を定義しました &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 値を（関数の呼び出し&lt;a href=&quot;../strict_mode&quot;&gt;方法&lt;/a&gt;、コンストラクターの場合の新しいオブジェクト、厳密モードの関数呼び出しでは未定義、関数が「オブジェクトメソッド」として呼び出された場合の基本オブジェクト） 」など）。これは、オブジェクト指向のプログラミングスタイルでは理想的とは言えません。</target>
        </trans-unit>
        <trans-unit id="60e73ac896fcd1e20ecdbe62b6e971173531a272" translate="yes" xml:space="preserve">
          <source>Update older browsers</source>
          <target state="translated">古いブラウザを更新する</target>
        </trans-unit>
        <trans-unit id="48578c6a749b5ff67cf1e8b4b13ab9237f09b50f" translate="yes" xml:space="preserve">
          <source>Updating and synchronizing shared memory with Atomic operations</source>
          <target state="translated">アトミック操作による共有メモリの更新と同期</target>
        </trans-unit>
        <trans-unit id="60e0e9ec143532c6eb903423c9a4cfc54cee36cc" translate="yes" xml:space="preserve">
          <source>Updating and synchronizing shared memory with atomic operations</source>
          <target state="translated">アトミック操作による共有メモリの更新と同期化</target>
        </trans-unit>
        <trans-unit id="cc5dae35ee91a22668ad8f529681490cfba9ffb4" translate="yes" xml:space="preserve">
          <source>Upper case is used instead of lower case in this function, due to problems with certain UTF-8 character conversions.</source>
          <target state="translated">この関数では、特定のUTF-8文字変換の問題のため、小文字ではなく大文字が使用されます。</target>
        </trans-unit>
        <trans-unit id="78b10f80de038a5230685ac2a51ff8884c32b6d0" translate="yes" xml:space="preserve">
          <source>Upper case to be sorted before lower case.</source>
          <target state="translated">大文字を小文字よりも先にソートします。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="92d99b032888bf69448943e3813f272f0f43c556" translate="yes" xml:space="preserve">
          <source>Usage notes</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="867198ce00157b368bb5c423c6bb949f2887d2cf" translate="yes" xml:space="preserve">
          <source>Usage recommendations</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="5c942f20c0ed0dfb516dfab6a7395d958c8a2ff7" translate="yes" xml:space="preserve">
          <source>Usage with non-numbers</source>
          <target state="translated">数字以外での使用法</target>
        </trans-unit>
        <trans-unit id="346a6fa9ba897c863e39207539cf265ef787041d" translate="yes" xml:space="preserve">
          <source>Usage with numbers</source>
          <target state="translated">数字を使った使い方</target>
        </trans-unit>
        <trans-unit id="47494a4e92a2758779e1405fc2cd1ef125bb1051" translate="yes" xml:space="preserve">
          <source>Usage with unary operators</source>
          <target state="translated">単項演算子での使用法</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="fae11d04640598770c380ecc173c3e3f57bb841a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;encodeURIComponent()&lt;/code&gt; on user-entered fields from forms &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt;'d to the server. This will encode &lt;code&gt;&amp;amp;&lt;/code&gt; symbols that may inadvertently be generated during data entry for special HTML entities or other characters that require encoding/decoding.</source>
          <target state="translated">使用 &lt;code&gt;encodeURIComponent()&lt;/code&gt; のフォームからユーザが入力したフィールド上の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot;&gt; &lt;code&gt;POST&lt;/code&gt; &lt;/a&gt;サーバーに「D。これにより、特別なHTMLエンティティまたはエンコード/デコードが必要なその他の文字のデータ入力中に誤って生成される可能性のある &lt;code&gt;&amp;amp;&lt;/code&gt; シンボルがエンコードされます。</target>
        </trans-unit>
        <trans-unit id="5b924f3a5d893825fa7ff6e707d26913c7b71dd1" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;encodeURIComponent&lt;/code&gt; on user-entered fields from forms POST'd to the server. This will encode &quot;&amp;amp;&quot; symbols that may inadvertently be generated during data entry for special HTML entities or other characters that require encoding/decoding.</source>
          <target state="translated">使用する &lt;code&gt;encodeURIComponent&lt;/code&gt; でサーバにPOST'dフォームからユーザーが入力したフィールド上。これにより、特殊なHTMLエンティティまたはエンコード/デコードを必要とするその他の文字のデータ入力中に誤って生成される可能性がある「＆」記号がエンコードされます。</target>
        </trans-unit>
        <trans-unit id="8169020de50874cab1f3dee3fd82094c9d0d7a54" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;test()&lt;/code&gt; whenever you want to know whether a pattern is found in a string. &lt;code&gt;test()&lt;/code&gt; returns a boolean, unlike the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method (which returns the index of a match, or &lt;code&gt;-1&lt;/code&gt; if not found).</source>
          <target state="translated">文字列にパターンが含まれているかどうかを知りたい場合は、 &lt;code&gt;test()&lt;/code&gt; を使用してください。 &lt;code&gt;test()&lt;/code&gt; は、&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;メソッド（一致のインデックスを返すか、見つからない場合は &lt;code&gt;-1&lt;/code&gt; を返す）とは異なり、ブール値を返します。</target>
        </trans-unit>
        <trans-unit id="b18d67e8a5ac3a6674fdb1efc60252ad8106a7b6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;test()&lt;/code&gt; whenever you want to know whether a pattern is found in a string. &lt;code&gt;test()&lt;/code&gt; returns a boolean, unlike the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method, which returns the index (or -1 if not found). To get more information (but with slower execution), use the &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method (similar to the &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt; method). As with &lt;code&gt;exec()&lt;/code&gt; (or in combination with it), &lt;code&gt;test()&lt;/code&gt; called multiple times on the same global regular expression instance will advance past the previous match.</source>
          <target state="translated">文字列内にパターンが見つかったかどうかを知りたい場合は、常に &lt;code&gt;test()&lt;/code&gt; を使用します。 &lt;code&gt;test()&lt;/code&gt; は、インデックス（または見つからない場合は-1 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;を返すString.prototype.search（）メソッドとは異なり、ブール値を返します。より多くの情報を取得するには（ただし、実行速度は遅くなります）、&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;メソッドを使用します（&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;メソッドと同様）。 &lt;code&gt;exec()&lt;/code&gt; と同様（またはそれと組み合わせて）、 &lt;code&gt;test()&lt;/code&gt; 前回のマッチを越えて前進するのと同じグローバル正規表現のインスタンスで複数回呼ばれます。</target>
        </trans-unit>
        <trans-unit id="e517f7c1c07a707de4fab4379936f4514452e989" translate="yes" xml:space="preserve">
          <source>Use Case for brace notation</source>
          <target state="translated">ブレース表記のユースケース</target>
        </trans-unit>
        <trans-unit id="720b4edf04389b8169218ea37223d4a391a3a5d7" translate="yes" xml:space="preserve">
          <source>Use Generator function</source>
          <target state="translated">ジェネレーター機能を使用</target>
        </trans-unit>
        <trans-unit id="da4e0328e40a8194d5399bae005f4ada08dad0b5" translate="yes" xml:space="preserve">
          <source>Use Set to ensure the uniqueness of a list of values</source>
          <target state="translated">値のリストの一意性を確保するために Set を使用します。</target>
        </trans-unit>
        <trans-unit id="30a3888da5f4a28292777575e9aa3adc54e79b94" translate="yes" xml:space="preserve">
          <source>Use a different property name instead:</source>
          <target state="translated">代わりに別のプロパティ名を使用します。</target>
        </trans-unit>
        <trans-unit id="bf2a85345d61cec27db77f35fab64a0e6ac9a223" translate="yes" xml:space="preserve">
          <source>Use a leading zero followed by the letter &quot;o&quot; or &quot;O&quot;:</source>
          <target state="translated">先頭のゼロの後に「o」または「O」をつけてください。</target>
        </trans-unit>
        <trans-unit id="a2211d331794e0404bb9813a32f412e1fdf21c22" translate="yes" xml:space="preserve">
          <source>Use a leading zero followed by the letter &quot;o&quot;;</source>
          <target state="translated">先頭のゼロの後に「o」を付けてください。</target>
        </trans-unit>
        <trans-unit id="430bf270b3e2cd9d51f68c54d784a47b6b409383" translate="yes" xml:space="preserve">
          <source>Use a stack</source>
          <target state="translated">スタックを使う</target>
        </trans-unit>
        <trans-unit id="cfa9ad22e487d75c6991da84fa3c0ec91af14d5a" translate="yes" xml:space="preserve">
          <source>Use an array instead:</source>
          <target state="translated">代わりに配列を使用します。</target>
        </trans-unit>
        <trans-unit id="ea5779e1fbdf5349917e803615c876e87a124938" translate="yes" xml:space="preserve">
          <source>Use an inline function with a regular expression to avoid &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">避けるために正規表現でインライン関数を使用してください &lt;code&gt;for&lt;/code&gt; ループに</target>
        </trans-unit>
        <trans-unit id="ec33787345829822780f6bb3ebf9f829c2e73505" translate="yes" xml:space="preserve">
          <source>Use case: Detecting circular references</source>
          <target state="translated">ケースを使用します。循環参照の検出</target>
        </trans-unit>
        <trans-unit id="4475d8e25078166d996b8e417cd93847ea682358" translate="yes" xml:space="preserve">
          <source>Use dynamic import only when necessary. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">動的インポートは、必要な場合にのみ使用してください。静的フォームは、初期の依存関係をロードするのに適していて、静的分析ツールと&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking&quot;&gt;ツリーの揺れ&lt;/a&gt;からより簡単に恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="eecb7e122bd5a7261c65d771f6a80279af55c95f" translate="yes" xml:space="preserve">
          <source>Use functions instead of evaluating snippets of code</source>
          <target state="translated">コードのスニペットを評価する代わりに関数を使う</target>
        </trans-unit>
        <trans-unit id="21027ef412585805c5156982cc14f1e2ed4e3134" translate="yes" xml:space="preserve">
          <source>Use in with environments</source>
          <target state="translated">環境との併用</target>
        </trans-unit>
        <trans-unit id="59689be5f7f6db3befe58ea4502d6346d8f0e784" translate="yes" xml:space="preserve">
          <source>Use objects instead:</source>
          <target state="translated">代わりにオブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="3289254e2cd8eff81fe4fba3443ba5e72f7369a7" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;prototype&lt;/code&gt; property</source>
          <target state="translated">の使用 &lt;code&gt;prototype&lt;/code&gt; プロパティの</target>
        </trans-unit>
        <trans-unit id="3996252cd710649cfc857aa5772afe5d4e526301" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">の使用 &lt;code&gt;new&lt;/code&gt; 演算子の</target>
        </trans-unit>
        <trans-unit id="9094eaab1aa22a2ddf2a490a883b3004802fb753" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;with&lt;/code&gt; statement is not recommended, as it may be the source of confusing bugs and compatibility issues. See the &quot;Ambiguity Contra&quot; paragraph in the &quot;Description&quot; section below for details.</source>
          <target state="translated">の使用 &lt;code&gt;with&lt;/code&gt; 混乱したバグや互換性の問題の原因となる可能性があるため withステートメントのお勧めしません。詳細については、以下の「説明」セクションの「あいまいさの対比」の段落を参照してください。</target>
        </trans-unit>
        <trans-unit id="5604289c2f9b05e787276b05d6de50556f3ad0d2" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;yield&lt;/code&gt; keyword</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 使用キーワードの</target>
        </trans-unit>
        <trans-unit id="268f6efe6c4edc7a7a776c983c85355ce0bcb3c2" translate="yes" xml:space="preserve">
          <source>Use strict equality operators if the operands must be of a specific type as well as value or if the exact type of the operands is important. Otherwise, use the standard equality operators, which allow you to compare the identity of two operands even if they are not of the same type.</source>
          <target state="translated">オペランドが値と同様に特定の型でなければならない場合や、オペランドの正確な型が重要な場合は、厳密な等号演算子を使用します。それ以外の場合は、2つのオペランドが同じ型でなくても、その同一性を比較することができる標準の等号演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="a0ead207547cfc5b8a2f1836b2c3c936baac7322" translate="yes" xml:space="preserve">
          <source>Use the &quot;#&quot; sign instead.</source>
          <target state="translated">代わりに &quot;#&quot;記号を使用してください。</target>
        </trans-unit>
        <trans-unit id="97f72e445fb132fa33d5ab40d570ae764de2e399" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Proxy()&lt;/code&gt; constructor to create a new &lt;code&gt;Proxy&lt;/code&gt; object. This constructor takes two mandatory arguments:</source>
          <target state="translated">使用する &lt;code&gt;Proxy()&lt;/code&gt; 新しい作成するためにコンストラクタを &lt;code&gt;Proxy&lt;/code&gt; オブジェクトを。このコンストラクターは、2つの必須の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="8de4076a747cfe1532a44b2bc3ca2df452856104" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;anchor()&lt;/code&gt; method to programmatically create and display an anchor in a document.</source>
          <target state="translated">&lt;code&gt;anchor()&lt;/code&gt; を使用しますメソッドをプログラムで文書内にアンカーを作成および表示します。</target>
        </trans-unit>
        <trans-unit id="8332f8dd84bbc21480140108337d77519b6d7f8b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;compare&lt;/code&gt; getter function for finding matching strings in arrays:</source>
          <target state="translated">配列内の一致する文字列を見つけるには、 &lt;code&gt;compare&lt;/code&gt; ゲッター関数を使用します。</target>
        </trans-unit>
        <trans-unit id="50de926ca9e18011c5dacebed5fcb02574aaab31" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;compare&lt;/code&gt; getter function for sorting arrays. Note that the function is bound to the collator from which it was obtained, so it can be passed directly to &lt;a href=&quot;../../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列の並べ替えには、 &lt;code&gt;compare&lt;/code&gt; ゲッター関数を使用します。関数は取得&lt;a href=&quot;../../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;されているため、Array.prototype.sort（）に直接渡すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe807985a106faf21a0cf0a1214d13b4dcb1f106" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;format&lt;/code&gt; getter function for formatting a single currency value, here for Russia:</source>
          <target state="translated">ここではロシアの場合、単一の通貨値をフォーマットするためにフォーマットゲッター関数を使用し &lt;code&gt;format&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98a2f348ccd2daf6dc628a1769cdc26c72eea4b8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;format&lt;/code&gt; getter function for formatting a single date, here for Serbia:</source>
          <target state="translated">単一の日付をフォーマットするには、 &lt;code&gt;format&lt;/code&gt; ゲッター関数を使用します。ここではセルビアの場合です。</target>
        </trans-unit>
        <trans-unit id="af282577f5e554acbc3eb0cb3a09c91649954517" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;format&lt;/code&gt; getter function for formatting all dates in an array. Note that the function is bound to the &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内のすべての日付をフォーマットするには、formatgetter関数を使用し &lt;code&gt;format&lt;/code&gt; 。関数は、&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;バインドされているため、&lt;a href=&quot;../../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; に&lt;/a&gt;直接渡すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="97eb661e1dd78448b5aae62263980b03793e9c92" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;format&lt;/code&gt; getter function for formatting all numbers in an array. Note that the function is bound to the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../../array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;. This is considered a historical artefact, as part of a convention which is no longer followed for new features, but is preserved to maintain compatibility with existing programs.</source>
          <target state="translated">配列内のすべての数値をフォーマットするには、formatgetter関数を使用し &lt;code&gt;format&lt;/code&gt; 。関数は取得元の&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; に&lt;/a&gt;バインドされているため、&lt;a href=&quot;../../array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; に&lt;/a&gt;直接渡すことができることに注意してください。これは、新しい機能についてはもはや従わないが、既存のプログラムとの互換性を維持するために保持される規則の一部として、歴史的な遺物と見なされます。</target>
        </trans-unit>
        <trans-unit id="259cb606e19c132188e630c58910ccf9746caeda" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;link()&lt;/code&gt; method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;&lt;code&gt;element.innerHTML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;link()&lt;/code&gt; ハイパーテキストリンク用のHTMLスニペットを作成する方法を。返された文字列は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt; &lt;code&gt;document.write()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt; &lt;code&gt;element.innerHTML&lt;/code&gt; を&lt;/a&gt;介してドキュメントに追加できます。</target>
        </trans-unit>
        <trans-unit id="6ea4b6f5310e3fa0a5adc1ac28dc2c3ca97ff63e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;link()&lt;/code&gt; method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;&lt;code&gt;element.innerHTML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;link()&lt;/code&gt; ハイパーテキストリンク用のHTMLスニペットを作成する方法を。返された文字列は、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt; &lt;code&gt;document.write()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt; &lt;code&gt;element.innerHTML&lt;/code&gt; を&lt;/a&gt;介してドキュメントに追加できます。</target>
        </trans-unit>
        <trans-unit id="f0db81531108fc16c5eb7e4e47995a7302205612" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;setTime()&lt;/code&gt; method to help assign a date and time to another &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;setTime()&lt;/code&gt; メソッドを使用して、日付と時刻を別の&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトに割り当てます。</target>
        </trans-unit>
        <trans-unit id="5ff4c5c7b65009624928276d53eeac4f648d1962" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;throw&lt;/code&gt; statement to throw an exception. When you throw an exception, &lt;code&gt;expression&lt;/code&gt; specifies the value of the exception. Each of the following throws an exception:</source>
          <target state="translated">例外をスローするには、 &lt;code&gt;throw&lt;/code&gt; ステートメントを使用します。例外をスローすると、 &lt;code&gt;expression&lt;/code&gt; は例外の値を指定します。次のそれぞれが例外をスローします。</target>
        </trans-unit>
        <trans-unit id="f2ba2a1040af150a170a58a7d87d684aec196c2a" translate="yes" xml:space="preserve">
          <source>Use the code below for a polyfill:</source>
          <target state="translated">ポリフィルは下記のコードを使用してください。</target>
        </trans-unit>
        <trans-unit id="ed1258678e4f54580c8c0dec2115541b6000d8ec" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;compare&lt;/code&gt; getter for finding matching strings in arrays:</source>
          <target state="translated">&lt;code&gt;compare&lt;/code&gt; によって返された関数を使用する配列内の一致する文字列を見つけるにゲッターします。</target>
        </trans-unit>
        <trans-unit id="0a94e0addaa6e80f549291005ee82c31eb3029d4" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;compare&lt;/code&gt; getter for sorting arrays. Note that the function is bound to the collator from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のソートには、 &lt;code&gt;compare&lt;/code&gt; getter によって返される関数を使用します。関数は取得&lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;されているため、Array.prototype.sort（）に直接渡すことができます。。</target>
        </trans-unit>
        <trans-unit id="08c434f65b76eb32642e2da1515f1c044f361f95" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting a single currency value, here for Russia:</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; によって返された関数を使用するロシアの場合、単一の通貨値をフォーマットするにゲッター。</target>
        </trans-unit>
        <trans-unit id="d03ec2e55d3b859d9b58982b987671a50a0b6434" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting a single date, here for Serbia:</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; によって返された関数を使用するセルビアでは、単一の日付をフォーマットするためにゲッター。</target>
        </trans-unit>
        <trans-unit id="ae052fe508232936eb87b2ad396357bb6d4a625c" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting all dates in an array. Note that the function is bound to the &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内のすべての日付をフォーマットするには、 &lt;code&gt;format&lt;/code&gt; ゲッターによって返される関数を使用します。関数は取得&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;バインドされているため、&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; に&lt;/a&gt;直接渡すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d54c9c7d9b0bff48e6a95b24be16fb1999c65ee0" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting all numbers in an array. Note that the function is bound to the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内のすべての数値をフォーマットするには、 &lt;code&gt;format&lt;/code&gt; ゲッターによって返される関数を使用します。関数は取得元の&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; に&lt;/a&gt;バインドされているため、&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; に&lt;/a&gt;直接渡すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bedc93a6a650821a167633ec706aac11a9101f79" translate="yes" xml:space="preserve">
          <source>Use this method instead of the &lt;a href=&quot;getyear&quot;&gt;&lt;code&gt;getYear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;getyear&quot;&gt; &lt;code&gt;getYear()&lt;/code&gt; &lt;/a&gt;メソッドの代わりにこのメソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="49702e4d4cf8e2ba2300109ed149a26289ed510a" translate="yes" xml:space="preserve">
          <source>Use this method instead of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear&quot;&gt;&lt;code&gt;getYear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear&quot;&gt; &lt;code&gt;getYear()&lt;/code&gt; &lt;/a&gt;メソッドの代わりにこのメソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="7af22a996975d27462e2f16cdba162f4fe94e747" translate="yes" xml:space="preserve">
          <source>Use with arrow function and map</source>
          <target state="translated">矢印機能やマップとの併用</target>
        </trans-unit>
        <trans-unit id="ae58a51186e74834d59036d0ceece2148e2deb6b" translate="yes" xml:space="preserve">
          <source>Use within JSON</source>
          <target state="translated">JSON内での使用</target>
        </trans-unit>
        <trans-unit id="e38d388b3fbc5f871702b5debb9b3ab8ec2478f5" translate="yes" xml:space="preserve">
          <source>Used as a function</source>
          <target state="translated">機能として使用</target>
        </trans-unit>
        <trans-unit id="f3bcc454496e0d8095ef9d6544013fa49b94c904" translate="yes" xml:space="preserve">
          <source>Used at the start of the script to mark it as Unicode and the text's byte order (&lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;).</source>
          <target state="translated">スクリプトの開始時に、Unicodeおよびテキストのバイトオーダーとしてマークするために使用されます（&lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="91a9a56f8d5c07eee8eea8919cddd9d901f21448" translate="yes" xml:space="preserve">
          <source>Used at the start of the script to mark it as Unicode and the text's byte order (&lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;).</source>
          <target state="translated">スクリプトの開始時に、スクリプトをUnicodeおよびテキストのバイト順序としてマークするために使用されます（&lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="133e68ee5d8ba76c955db630077bf0beeee673ec" translate="yes" xml:space="preserve">
          <source>Used to access the character in the &lt;em&gt;N&lt;/em&gt;th position where &lt;em&gt;N&lt;/em&gt; is an integer between 0 and one less than the value of &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;. These properties are read-only.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt;番目の位置にある文字にアクセスするために使用されます&lt;em&gt;。N&lt;/em&gt;は、0から&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;の値より1小さい整数の間です。です。これらのプロパティは読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="812e93e06643aee1ecaa300513446c1a6beb968c" translate="yes" xml:space="preserve">
          <source>Used to access the character in the &lt;em&gt;N&lt;/em&gt;th position where &lt;em&gt;N&lt;/em&gt; is an integer between 0 and one less than the value of &lt;a href=&quot;string/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;. These properties are read-only.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt;番目の位置にある文字にアクセスするために使用されます&lt;em&gt;。N&lt;/em&gt;は、0から&lt;a href=&quot;string/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;の値より1小さい整数の間です。です。これらのプロパティは読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="3b7acc356fa4a2bc2ccbd7d48e70ac3513c4a7e5" translate="yes" xml:space="preserve">
          <source>Used to export functions to make them available for imports in external modules, and other scripts.</source>
          <target state="translated">関数をエクスポートして、外部モジュールや他のスクリプトでインポートできるようにするために使用します。</target>
        </trans-unit>
        <trans-unit id="fb37f1aad3749171bebb1228de96a4676e09cfa5" translate="yes" xml:space="preserve">
          <source>Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.</source>
          <target state="translated">正規表現と文字列の間のマッチを見つけ、マッチした部分文字列を新しい部分文字列に置き換えるために使われます。</target>
        </trans-unit>
        <trans-unit id="7955ee6b6bfc35018c789e83e4e210fac8047e36" translate="yes" xml:space="preserve">
          <source>Used to import functions exported from an external module, another script.</source>
          <target state="translated">外部モジュールや別のスクリプトからエクスポートした関数をインポートするために使用します。</target>
        </trans-unit>
        <trans-unit id="13c2ae74a2bde43fe084992394a9e639aee35c2b" translate="yes" xml:space="preserve">
          <source>Used to match a regular expression against a string.</source>
          <target state="translated">文字列に対して正規表現をマッチさせるために使用します。</target>
        </trans-unit>
        <trans-unit id="b48f072e0df994bfca9f19d46f45af529b2e1d8a" translate="yes" xml:space="preserve">
          <source>Used to match regular expression &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; against a string.</source>
          <target state="translated">正規表現 &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; を文字列と照合するために使用されます。</target>
        </trans-unit>
        <trans-unit id="3dbed0041feb748fbbfcba1cc48420c33fadb168" translate="yes" xml:space="preserve">
          <source>Used to replace all occurrences of &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; using &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; may be a string or Regular Expression, and &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; may be a string or function.</source>
          <target state="translated">Used to replace all occurrences of &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; using &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; . &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; may be a string or Regular Expression, and &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; may be a string or function.</target>
        </trans-unit>
        <trans-unit id="7edb7787ba6b0b7e8e6eeb532ac19fd7b1c85e4f" translate="yes" xml:space="preserve">
          <source>Used to replace occurrences of &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; using &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; may be a string or Regular Expression, and &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; may be a string or function.</source>
          <target state="translated">Used to replace occurrences of &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; using &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; . &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; may be a string or Regular Expression, and &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; may be a string or function.</target>
        </trans-unit>
        <trans-unit id="863c58fdd8701f9a6eb314389dddf8b12cb690be" translate="yes" xml:space="preserve">
          <source>Used to send a value to a generator. The value is returned from the &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression, and returns a value yielded by the next &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression. &lt;code&gt;send(x)&lt;/code&gt; corresponds to &lt;code&gt;next(x)&lt;/code&gt; in the ES2015 generator object.</source>
          <target state="translated">ジェネレータに値を送信するために使用されます。値は&lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt;式から返され、次の&lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt;式で得られた値を返します。 &lt;code&gt;send(x)&lt;/code&gt; は &lt;code&gt;next(x)&lt;/code&gt; に対応しますは、ES2015ジェネレーターオブジェクトのにます。</target>
        </trans-unit>
        <trans-unit id="1ec22aff197651958c30fe3e4239fc7b58e48d52" translate="yes" xml:space="preserve">
          <source>Useful special-case behavior</source>
          <target state="translated">便利な特殊ケース動作</target>
        </trans-unit>
        <trans-unit id="6f2dc09a3bce88630bbbd004fbec9e59ed9e4944" translate="yes" xml:space="preserve">
          <source>User-defined Async Iterables</source>
          <target state="translated">ユーザー定義の非同期反復可能</target>
        </trans-unit>
        <trans-unit id="8f27339731a5380e7f5e31ad049633a94a300d7e" translate="yes" xml:space="preserve">
          <source>User-defined iterables</source>
          <target state="translated">ユーザー定義のイテレータブル</target>
        </trans-unit>
        <trans-unit id="28dafe5587205ea728cfd56a35524bbae528ca52" translate="yes" xml:space="preserve">
          <source>User-defined vs. built-in objects</source>
          <target state="translated">ユーザー定義オブジェクトと組み込みオブジェクト</target>
        </trans-unit>
        <trans-unit id="60551ea1bff7b4550201d95ea8c5d34732d0b1bf" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;@@iterator&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;@@iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4562f8aefc1e7271c8a66b1eed41b4777a575795" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;contains&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;contains&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c93d825490057c3453aec31fdf28a9dcae9fa1a" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;futexWait&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;futexWait&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89858b40234e19d9eadd0f8948f6700c18941a2f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;futexWake&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;futexWake&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2fbc98c756378751b8ba87caf92912e491ac620" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;iterator&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c51d0794d624ef371c8c4c7c70a4aaaa7f15011" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;trimLeft&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;trimLeft&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10b04306e1d06010bfe91004003ff857af27e87f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;trimRight&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;trimRight&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2d239f5599e889e3ad65585fee736f8cbbc9cc3" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;wake&lt;/code&gt;</source>
          <target state="translated">非標準の名前を使用します： &lt;code&gt;wake&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52bae716d129494f23ff260af50a5f5eede24f9e" translate="yes" xml:space="preserve">
          <source>Using $n with RegExp.test</source>
          <target state="translated">RegExp.testで$nを使用する</target>
        </trans-unit>
        <trans-unit id="35fcbfb19a0b596e8d891c26c59bdd2f66007a69" translate="yes" xml:space="preserve">
          <source>Using $n with String.replace</source>
          <target state="translated">String.replaceで$nを使用する</target>
        </trans-unit>
        <trans-unit id="fa7fcc0cace95ab92fb739e84bcfba711f862206" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../../operators/destructuring_assignment#Array_destructuring&quot;&gt;Array Destructuring&lt;/a&gt;, you can iterate through objects easily.</source>
          <target state="translated">&lt;a href=&quot;../../operators/destructuring_assignment#Array_destructuring&quot;&gt;Array Destructuring&lt;/a&gt;を使用すると、オブジェクトを簡単に反復できます。</target>
        </trans-unit>
        <trans-unit id="a35e8629d4205d716d7879db06211269443cff86" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../global_objects/eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; as variable or function argument name</source>
          <target state="translated">変数または関数の引数名としての&lt;a href=&quot;../global_objects/eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;使用</target>
        </trans-unit>
        <trans-unit id="eaa1157703e2fddddf937141842eb4dded62c00e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; values, negative Integers (&lt;code&gt;-1&lt;/code&gt;), non-Integers (&lt;code&gt;3.14&lt;/code&gt;), or values larger than &lt;code&gt;0x10FFFF&lt;/code&gt; (&lt;code&gt;1114111&lt;/code&gt;) won't work with this method.</source>
          <target state="translated">使用&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;値は、負の整数（ &lt;code&gt;-1&lt;/code&gt; ）、非整数（ &lt;code&gt;3.14&lt;/code&gt; より大きい）、または値 &lt;code&gt;0x10FFFF&lt;/code&gt; （ &lt;code&gt;1114111&lt;/code&gt; をこの方法で作業）がないであろう。</target>
        </trans-unit>
        <trans-unit id="3942794d0225dda9d28d31b5dbc2330d28350e6c" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../object/proto&quot;&gt;&lt;code&gt;Object.__proto__&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../object/proto&quot;&gt; &lt;code&gt;Object.__proto__&lt;/code&gt; &lt;/a&gt;使用：</target>
        </trans-unit>
        <trans-unit id="51a5319931313933fe5d478d723005385757590e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;filter&quot;&gt;&lt;code&gt;Array.filter()&lt;/code&gt;&lt;/a&gt; then &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Array.map()&lt;/code&gt;&lt;/a&gt; traverses the array twice, but you can achieve the same effect while traversing only once with &lt;a href=&quot;reduce&quot;&gt;&lt;code&gt;Array.reduce()&lt;/code&gt;&lt;/a&gt;, thereby being more efficient. (If you like for loops, you can filter and map while traversing once with &lt;a href=&quot;foreach&quot;&gt;&lt;code&gt;Array.forEach()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Using &lt;a href=&quot;filter&quot;&gt; &lt;code&gt;Array.filter()&lt;/code&gt; &lt;/a&gt; then &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Array.map()&lt;/code&gt; &lt;/a&gt; traverses the array twice, but you can achieve the same effect while traversing only once with &lt;a href=&quot;reduce&quot;&gt; &lt;code&gt;Array.reduce()&lt;/code&gt; &lt;/a&gt;, thereby being more efficient. (If you like for loops, you can filter and map while traversing once with &lt;a href=&quot;foreach&quot;&gt; &lt;code&gt;Array.forEach()&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="535c1dd52fe8972c1fadf5078900fec27d10d19b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;クロージャーの&lt;/a&gt;使用：</target>
        </trans-unit>
        <trans-unit id="c87322977a52f7bca265e3d228df36c203fead5f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">Using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="17fb1f169a3b25758d8ccd42a6076d9b750f451f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; with any &lt;code&gt;BigInt&lt;/code&gt; value will raise a &lt;code&gt;TypeError&lt;/code&gt; as &lt;code&gt;BigInt&lt;/code&gt; values aren't serialized in JSON by default. However, you can implement your own &lt;code&gt;toJSON&lt;/code&gt; method if needed:</source>
          <target state="translated">使用&lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt;いずれかと &lt;code&gt;BigInt&lt;/code&gt; 値は高くなります &lt;code&gt;TypeError&lt;/code&gt; 例外をとして &lt;code&gt;BigInt&lt;/code&gt; 値は、デフォルトでJSONでシリアライズされていません。ただし、必要に応じて独自の &lt;code&gt;toJSON&lt;/code&gt; メソッドを実装できます。</target>
        </trans-unit>
        <trans-unit id="afdf4a3c9b67bda257874ee44595423d90a12a17" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; on a variable name &lt;code&gt;delete myVariable&lt;/code&gt;;</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 変数名に &lt;code&gt;delete myVariable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26a3027fe72a00facbe50a3574538264e8f6778d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@match&lt;/code&gt; in subclasses</source>
          <target state="translated">サブクラスで &lt;code&gt;@@match&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="6bd6526be1e62345fcf720d5a44848ce5d217f27" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@search&lt;/code&gt; in subclasses</source>
          <target state="translated">サブクラスで &lt;code&gt;@@search&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="364a8655b56917844b72bbbe59f34bf6a668d4ab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@split&lt;/code&gt; in subclasses</source>
          <target state="translated">サブクラスで &lt;code&gt;@@split&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="db3eff818e2b5e01a1d45cd599a94c576a00c6d5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Collator&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="aa9dd8a51114847faf5d80c7ec6a03c647bfb967" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Date.UTC()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Date.UTC()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="dfbef0440c4ef535d60b20ec05e2da99357c3949" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Date.parse()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Date.parse()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="5b21d712bf1c7abde9c3a7a830c3d3690d1d9336" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;DateTimeFormat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DateTimeFormat&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fe7b70b0ad42931d4672a8fad5e459a0ddc059c8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;JSON.parse()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;JSON.parse()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fda9d47a7ba09f6e96cc1c88589cfc8f90e9550b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;MAX_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MAX_VALUE&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="ab1356c5da899d85adf68d98790d0688df3d9f4d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;MIN_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="93859a76bff967dc62caa4d9aec6711cc95e39b9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.E&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fdb062b8b41f6dd98a6b478f0c71351aa5f7f259" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LN10&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LN10&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="a8ac61c569646f667f7438c0f2008561889bb2cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LN2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LN2&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="f9f1159c9e322782a4c298efe9b7aaac4b3d7fa1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LOG10E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LOG10E&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="5d3f9a2daa7a1ca960475ed285b5de5ea74d1a82" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LOG2E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LOG2E&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="f43cc4d9501290c9fffb78530c1cc6e23e1fd9a8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.PI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.PI&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="ba651258cafb6f72b81503d4151ee1478c832059" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.SQRT1_2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.SQRT1_2&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="976aebb1bd71fa2937d372d6aff476b4860fff47" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.SQRT2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.SQRT2&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="e330c7190d2b0eed0076bc51b0c6727ee372dee7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.acos()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.acos()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="bbb8abbf744a7a471e0adef33108ce352e2cef14" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.acosh()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.acosh()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fe4e358b1ea8a6793bbbd038119abac908fa5d41" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.asin()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.asin()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="a7aaabb5d4c18bc47babe1fee3768b4cd56e819f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.asinh()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.asinh()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="5a7acbe2b93c55e6766c21bb99a61136980f063f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atan()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.atan()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="6ae2e7939d311a6f4c12eeacc87617b45cc46426" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atan2()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="3e63930d26ed0da0e98e746e6a580eb549a18081" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atanh()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.atanh()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="3de3f7ff132e94d11bcf96ec79c085701fa6d13f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cbrt()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.cbrt()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="0f0795c7f6c72f3c4ee45db15995c4e83c4203e7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.ceil()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.ceil()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="f4b41b1997f3949c616b129d914b271ff196baf9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.clz32()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.clz32()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="ea87848369f3d8c269353d427b2f0ae6f09fc086" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cos()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.cos()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="4bc1746f4cc157b4b9df11ea279e9f777a7fdbd4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cosh()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.cosh()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="cb976ebe7c51e42a78c6812722dfe8cd5141a674" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.exp()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.exp()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="540b461b79bcaaa482e1e163588fe18bd457760c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.expm1()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.expm1()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="0bdc8b03db4073f084688d35cd02f9c80f2922d2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.floor()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.floor()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="9e46a26bbc48638758a2228cb6d988bc690e678d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.fround()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.fround()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="ab97a7135ca6e7d20e6ad6ae467453d0e92d8204" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.hypot()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.hypot()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="91ae785187110558b2089a65084f689ee71a03c7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.imul()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.imul()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="b9efc53c4e8b4e3a2795c2633f2e1579c2de24ae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.log()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="8b86f5d0131c58200f4e9f3a71450915e406593f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log()&lt;/code&gt; with a different base</source>
          <target state="translated">異なるベースで &lt;code&gt;Math.log()&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="8cb369bd84fb3a9db42477c3d471253c1915fc98" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log10()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.log10()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fee67d42c34c290aa8bab4fac8f488c3fbf54b9b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log1p()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.log1p()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="f76b6d6234aa36ce4d5c91bcb25f95c1f4680033" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log2()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.log2()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="2d9e3a25687984bbdd6d8db20416e7b4b148e79a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.max()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.max()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="a8fe838b29e47e2ddc6c06243aa367e185007b1a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.min()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.min()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="d047225943fee3e56662b65dd0dadae4d2d06fb0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.pow()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.pow()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="895e46a61e964641de16b978bac120590e127e57" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sign()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.sign()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="2600f96fe3577a76e5bce2a8a5fa33a334ca4c5f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sin()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.sin()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="217b9b4dd477ec3b46def6888a0b6063371b73ba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sinh()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.sinh()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="2073d1948e291a0aba2f718d62ca6364e24cdfd6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sqrt()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.sqrt()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fce291cc3896de50d37da9836e86f63c6918e4bc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.tan()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.tan()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="227a5c68b610fa47d48e59f2bf2d80650dba11e0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.tanh()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.tanh()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="a5bee87d01db0a595ec64fba9359ca73345f1712" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.trunc()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.trunc()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="b4b4eb92a2ffff450696a5a3428799c8ada5aa97" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="06af22fcde5b1c83b1a5ee4cc714405b474f3f85" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;NaN&lt;/code&gt; as &lt;code&gt;Map&lt;/code&gt; keys</source>
          <target state="translated">使い方 &lt;code&gt;NaN&lt;/code&gt; として &lt;code&gt;Map&lt;/code&gt; キー</target>
        </trans-unit>
        <trans-unit id="34dcba570421eba4fd9981ae6cb67359e4a415cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Number&lt;/code&gt; to convert a &lt;code&gt;Date&lt;/code&gt; object</source>
          <target state="translated">使用して &lt;code&gt;Number&lt;/code&gt; 変換するには &lt;code&gt;Date&lt;/code&gt; オブジェクトを</target>
        </trans-unit>
        <trans-unit id="50ad87e74aca29ee32cefc8aac202e01f3d594b9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="40636fe65b241f78323c31826a3c853885dcb1de" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object&lt;/code&gt; given &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; types</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; および &lt;code&gt;null&lt;/code&gt; 型が指定された &lt;code&gt;Object&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="1aed730fa13857ec34a8c1c7e6f1049d04b29aaa" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object&lt;/code&gt; to create &lt;code&gt;Boolean&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; を使用して &lt;code&gt;Boolean&lt;/code&gt; オブジェクトを作成する</target>
        </trans-unit>
        <trans-unit id="e64eb4c4dd053b88dcc89b8eb82656f5f33979eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="f8347a2bd0fee1e51d6d7c3a5a03c73b5f92291b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Promise.all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="c7983a310913579e7f1d6d7d29f541ca7f7bc31f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Promise.race&lt;/code&gt; &amp;ndash; examples with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Promise.race&lt;/code&gt; の使用&amp;ndash; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt; &lt;code&gt;setTimeout&lt;/code&gt; の&lt;/a&gt;例</target>
        </trans-unit>
        <trans-unit id="4bf3c2c92b26655f965a63cf04e47a407038309f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RangeError&lt;/code&gt; (for non-numeric values)</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; の使用（非数値の場合）</target>
        </trans-unit>
        <trans-unit id="9b3910a80105a107726af7df53c14bf5decb74eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RangeError&lt;/code&gt; (for numeric values)</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; の使用（数値の場合）</target>
        </trans-unit>
        <trans-unit id="32dc028e6ae49406b0f8b232da7879a6841597eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.apply()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.apply()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="78dff74d34e66be69e07fb73eba8414dcb7abbe3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.construct()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.construct()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="7b278a106b6bc8adc803d37d53b05b9680bc0aa8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.defineProperty()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.defineProperty()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="b6e50310ac666f839a6b1c49d16cbc284733c482" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.deleteProperty()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.deleteProperty()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="28791d84abb7871970f58bfc08646d85a486347b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.get()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.get()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="8304e4a1ba40865f8890fe46ab03864fe6553640" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="c915e2c366a2a77265d9b4e74ef7c4f046504257" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="5ba2ab55ddd7497bfffbe0d72ebb882fbd8a1585" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.has()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.has()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="e24091a1e3ada68c43e5ad27ca36e597fb39a070" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.isExtensible()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.isExtensible()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="467c5ecb9bbb04697b7c860e3a3ae3cb73ef2080" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.ownKeys()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="8a825f724001bbe43c60c22d1e2911eeeabeaa9d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="ad6e1fb12d2ff922480e416b7ca1e13789b8da3a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.set()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.set()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="86e64df031ede334382545587be9f79339c7a4b4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="6becec3636e1ce2e5f1db49408fb138f4cb2061b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;String.raw()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;String.raw()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="7ac59f9f4cf19519393847dd73ca3e85fe1ee39c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;WeakMap&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="4e935599049c4d331606cf35f69f87d2fe630a33" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;[@@iterator]()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;[@@iterator]()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fcb2836a59b3825a96f686735cb098d1f8f1275" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;[@@iterator]()&lt;/code&gt; with &lt;code&gt;for..of&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;[@@iterator]()&lt;/code&gt; と &lt;code&gt;for..of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad6d25bb50f04ee46ca5804c8b77367a34dcf780" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;anchor()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;anchor()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="3797b2e02eb1b50879089022d7c3164e16ab7f69" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; and built-in functions</source>
          <target state="translated">使用して &lt;code&gt;apply&lt;/code&gt; し、組み込み関数</target>
        </trans-unit>
        <trans-unit id="b083afe9d3840b17bd2a374e9b1d657c93e787c9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; to append an array to another</source>
          <target state="translated">使用して &lt;code&gt;apply&lt;/code&gt; 別に配列を追加します</target>
        </trans-unit>
        <trans-unit id="9713bdc691906ef72a6bc1a711804f2d79f4fa6e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; to chain constructors</source>
          <target state="translated">チェーンコンストラクターへの &lt;code&gt;apply&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="ceb48f3a5a4041edde04441562f95c41474638eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arguments.callee&lt;/code&gt; in an anonymous recursive function</source>
          <target state="translated">無名の再帰関数で &lt;code&gt;arguments.callee&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="09ad6b15b561cc4dea86fc3be9b381b7f96551c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arguments.length&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arguments.length&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="07b2edb9538b6d9db4de55e7358538e95e277d2e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;big()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;big()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="1a63831b9174917bd4ef59e8bac4ee7ad3750620" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;blink()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;blink()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="7fe07760305ea8b8baefa5e929fe548307c06f95" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;bold()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bold()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="16940a37535534140b72c771a3bd4135af0df59a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to chain constructors for an object</source>
          <target state="translated">オブジェクトのコンストラクターをチェーンするための &lt;code&gt;call&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="2030c5b59f5ca0acd57384cb212220b648ba3eae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke a function and specifying the context for '&lt;code&gt;this&lt;/code&gt;'</source>
          <target state="translated">&lt;code&gt;call&lt;/code&gt; を使用して関数を呼び出し、 ' &lt;code&gt;this&lt;/code&gt; 'のコンテキストを指定する</target>
        </trans-unit>
        <trans-unit id="20932bf11484b9bd555433ee437743ea8fc7634c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke a function and without specifying the first argument</source>
          <target state="translated">使用して &lt;code&gt;call&lt;/code&gt; 機能を呼び出すために、最初の引数を指定せず</target>
        </trans-unit>
        <trans-unit id="c7186bc460b794bceddf4a328c393fa6cdc29640" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke an anonymous function</source>
          <target state="translated">&lt;code&gt;call&lt;/code&gt; を使用して無名関数を呼び出す</target>
        </trans-unit>
        <trans-unit id="b867b50212ed6e89d2de6441c976ef336360830d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;charCodeAt()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="556d615d9041c8d5478e767d4d7a1410838ba06a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;codePointAt()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;codePointAt()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="e9429375d874123b345d7191586002d8083da071" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compare&lt;/code&gt; for array search</source>
          <target state="translated">配列検索に &lt;code&gt;compare&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="f16a1b178f956b7d75464f71fb597fe309cf5c10" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compare&lt;/code&gt; for array sort</source>
          <target state="translated">配列ソートの &lt;code&gt;compare&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="02b5e9985b8ecaa7f12774be0a8688f361e65c6c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compile()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;compile()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="85e65691e7cc08b10e7b80bb001289e75bbf23c9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;concat()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;concat()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="611eb26acf09c73abf163660771fc340757a96d3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;default&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements</source>
          <target state="translated">使用して &lt;code&gt;default&lt;/code&gt; 中で &lt;code&gt;switch&lt;/code&gt; ステートメント</target>
        </trans-unit>
        <trans-unit id="642628aa034f0b4d4c2784d4456bb61f2057fe09" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;default&lt;/code&gt; with &lt;code&gt;export&lt;/code&gt;</source>
          <target state="translated">使用して &lt;code&gt;default&lt;/code&gt; して &lt;code&gt;export&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78923445351c108fc913a9fac23c1aa9f6d3f3f3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;do...while&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;do...while&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="3d08a1b407f0e9f068dc379a46a93d074fbafc75" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;dotAll&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;dotAll&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="5a3bcbcba095740840e728c39a3f242bfb701569" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;else if&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;else if&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="646ee9e811ab23d353a774a0b354b8342975e5a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;endsWith()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;endsWith()&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="fe0ae54c13633401a1ceb09277a500848db451ea" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;entries()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;entries()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="f9436728bf5ff88c5da41003c9a695a4269ce66b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="eb8f6039130d6008e8dc9ef8d1c09417e49c7f51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt; to evaluate a string of JavaScript statements</source>
          <target state="translated">JavaScriptステートメントの文字列を評価するための &lt;code&gt;eval&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="88e071cfe4d98766b2d0a4c39ce83f967246717a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;exec()&lt;/code&gt; with &lt;code&gt;RegExp&lt;/code&gt; literals</source>
          <target state="translated">使い方 &lt;code&gt;exec()&lt;/code&gt; と &lt;code&gt;RegExp&lt;/code&gt; リテラルを</target>
        </trans-unit>
        <trans-unit id="a52ec19db691f347f5f2433ee6eb7fe006475d56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;extends&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="e5eae3a4415c107042d5f17503c6ecae2bcdc31b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;extends&lt;/code&gt; with built-in objects</source>
          <target state="translated">組み込みオブジェクトでの &lt;code&gt;extends&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="6f7e9118e94835fcd9f5a428acb6732b0b3bfe05" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fixed()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fixed()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="8058f81484f83098711cee882913078eb17fe117" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;flags&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="3ec060be63d9a2d6b30d94a663eea50439b802b3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fontcolor()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fontcolor()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fea03ae88fb10291a0695fd13fe77eec964a23bf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fontsize()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fontsize()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="702e8d93e7600e0549629ee260fdf1db5a27a4db" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for each...in&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;for each...in&lt;/code&gt; 使用...</target>
        </trans-unit>
        <trans-unit id="0a7f47d7718b9d78b1fe878b530e960cb18938eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="491008517aae1412f6b94546b3220fd5b4353c00" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for&lt;/code&gt; without a statement</source>
          <target state="translated">ステートメントなしで &lt;code&gt;for&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="d5a9aaaeac0acbdcf769678baa5b9f4acff26d0d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="bb2e604aa63b714da8b15b55ebe41223fb2ac6d6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format&lt;/code&gt; with &lt;code&gt;map&lt;/code&gt;</source>
          <target state="translated">使用する &lt;code&gt;format&lt;/code&gt; して &lt;code&gt;map&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d104e0628dbbb852f433440106690c19f2c07e33" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fromCharCode()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fromCharCode()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="80b847492a6095bbae8614aec0a6543cf0367d9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fromCodePoint()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fromCodePoint()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="6d00420b95ee683cbed8717a78c05748e24282a7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="a4b9545503ad7e7caaab9a705491e3e94e905a67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getDay()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getDay()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="540160723a5364f95f0dfafc1d17361d9d5a1964" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getFullYear()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getFullYear()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="91a3254251e7e95341290aec33ebd31b9038cf56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getHours()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getHours()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="a0528a1d02cd150547cf68575462307a6013150c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMilliseconds()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getMilliseconds()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="84519873ea12bef2a0b320cf648b5ba2c66f681f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMinutes()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getMinutes()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="6ef82941d61c1f5ca81d2bc7825f0299185f34a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMonth()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getMonth()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="bb6ce8532e2eed1444291d51e61fef2c99751a9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getSeconds()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getSeconds()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="eea233044fa126b4a981036ba57bcb77efe79c4d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getTime()&lt;/code&gt; for copying dates</source>
          <target state="translated">日付をコピーするための &lt;code&gt;getTime()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="45e362351d8145434a2ad82319115f1d839ca87e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getTimezoneOffset()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getTimezoneOffset()&lt;/code&gt; の使用</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
