<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="1b94f212c1058f85e4abf17b4fe48c9e33edefdc" translate="yes" xml:space="preserve">
          <source>Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.</source>
          <target state="translated">オブジェクトの列挙可能なプロパティを任意の順序で繰り返し処理します。それぞれの個別のプロパティに対して、ステートメントを実行することができます。</target>
        </trans-unit>
        <trans-unit id="56d3a70287785e5fa4e941a07061cdd1478f560f" translate="yes" xml:space="preserve">
          <source>Iterating &lt;code&gt;Maps&lt;/code&gt; with &lt;code&gt;for..of&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;for..of&lt;/code&gt; で &lt;code&gt;Maps&lt;/code&gt; を反復する</target>
        </trans-unit>
        <trans-unit id="496362b32a792f687bc6cb94d683922c1b2faeb0" translate="yes" xml:space="preserve">
          <source>Iterating &lt;code&gt;Maps&lt;/code&gt; with &lt;code&gt;forEach()&lt;/code&gt;</source>
          <target state="translated">反復処理 &lt;code&gt;Maps&lt;/code&gt; と &lt;code&gt;forEach()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40ab9f00419e3d7a971bf12b9e6bdeb7069a3374" translate="yes" xml:space="preserve">
          <source>Iterating Map with for..of</source>
          <target state="translated">のためのマップを繰り返し使用しています。</target>
        </trans-unit>
        <trans-unit id="3b13732009253de3c0e616d1484eb8249d06df9d" translate="yes" xml:space="preserve">
          <source>Iterating Map with forEach()</source>
          <target state="translated">forEach()でマップを反復処理する</target>
        </trans-unit>
        <trans-unit id="d27439a31a816c4d2a55814b1d2a74e6be2b97e8" translate="yes" xml:space="preserve">
          <source>Iterating Sets</source>
          <target state="translated">反復集合</target>
        </trans-unit>
        <trans-unit id="4d045ad50ff36df18ffc24df4519d293570d9402" translate="yes" xml:space="preserve">
          <source>Iterating generators asynchronously</source>
          <target state="translated">ジェネレータを非同期に反復処理</target>
        </trans-unit>
        <trans-unit id="4ca2c07db7642120f42b8ddc127bd59d4545455f" translate="yes" xml:space="preserve">
          <source>Iterating over DOM collections like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;: the following example adds a &lt;code&gt;read&lt;/code&gt; class to paragraphs that are direct descendants of an article:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt; &lt;code&gt;NodeList&lt;/code&gt; &lt;/a&gt;などのDOMコレクションを反復処理します。次の例では、記事の直接の子孫である段落に &lt;code&gt;read&lt;/code&gt; クラスを追加します。</target>
        </trans-unit>
        <trans-unit id="15eb37b3d4eaeab4e4041b1203c12a7e51a06e97" translate="yes" xml:space="preserve">
          <source>Iterating over Object properties</source>
          <target state="translated">オブジェクトのプロパティの反復処理</target>
        </trans-unit>
        <trans-unit id="5785379b283506426da37af2daac50321c939cf1" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;反復</target>
        </trans-unit>
        <trans-unit id="faf9e7e150ab3aadac7b42beae071f087812406b" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;反復</target>
        </trans-unit>
        <trans-unit id="67435ad9c2794513dba566d0fd08bbd265b7e9af" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;反復する</target>
        </trans-unit>
        <trans-unit id="ee7063025fae3e507f8e9ddcbd6728d7df3e3817" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; の&lt;/a&gt;反復</target>
        </trans-unit>
        <trans-unit id="fc7709ac59619dbe62326f750cb2e5dbe03c2089" translate="yes" xml:space="preserve">
          <source>Iterating over a DOM collection</source>
          <target state="translated">DOM コレクションの反復処理</target>
        </trans-unit>
        <trans-unit id="f0dd8cb2fd3f7d0a7d9ad1e2575ac2d8bef1fc81" translate="yes" xml:space="preserve">
          <source>Iterating over a custom iterable</source>
          <target state="translated">カスタムイテレータブルの反復処理</target>
        </trans-unit>
        <trans-unit id="c3dc9daac57270ee67396bd5364644ae68886b7b" translate="yes" xml:space="preserve">
          <source>Iterating over a generator</source>
          <target state="translated">ジェネレータの反復処理</target>
        </trans-unit>
        <trans-unit id="a0dc6e73ee2e37d38beb08f50a02dc45573ef71c" translate="yes" xml:space="preserve">
          <source>Iterating over a null-able array</source>
          <target state="translated">ヌル可能な配列の繰り返し処理</target>
        </trans-unit>
        <trans-unit id="94e4424cf8cedd9015568a70cb7d3b5ee4affdcc" translate="yes" xml:space="preserve">
          <source>Iterating over an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;反復</target>
        </trans-unit>
        <trans-unit id="2e60e562508b0ed60988554d07223e7b2d99da86" translate="yes" xml:space="preserve">
          <source>Iterating over an &lt;code&gt;Object&lt;/code&gt; requires obtaining its keys in some fashion and iterating over them.</source>
          <target state="translated">Iterating over an &lt;code&gt;Object&lt;/code&gt; requires obtaining its keys in some fashion and iterating over them.</target>
        </trans-unit>
        <trans-unit id="f68897b9a5f552a14700497db5885c704c7ef951" translate="yes" xml:space="preserve">
          <source>Iterating over an array</source>
          <target state="translated">配列の繰り返し処理</target>
        </trans-unit>
        <trans-unit id="4cc7ed0da156acec2c68ed9bf0a521a98d8d6e0b" translate="yes" xml:space="preserve">
          <source>Iterating over an object's key-value pair</source>
          <target state="translated">オブジェクトのキーと値のペアを繰り返し処理する</target>
        </trans-unit>
        <trans-unit id="88bb9e15d633e1057b3bc67f5bceb61e9de30cc6" translate="yes" xml:space="preserve">
          <source>Iterating over async generators</source>
          <target state="translated">非同期ジェネレータの反復処理</target>
        </trans-unit>
        <trans-unit id="2de9ec73e2d0f138fa633c55f04c2ed679f286c5" translate="yes" xml:space="preserve">
          <source>Iterating over async iterables</source>
          <target state="translated">非同期イテレータブルの反復処理</target>
        </trans-unit>
        <trans-unit id="8261b2bba8471445708c79a32892c6c29ef1a417" translate="yes" xml:space="preserve">
          <source>Iterating over generators</source>
          <target state="translated">ジェネレータの反復処理</target>
        </trans-unit>
        <trans-unit id="455adf44859e7fb0cfd2c5e7ab19ab8ee204fe91" translate="yes" xml:space="preserve">
          <source>Iterating over other iterable objects</source>
          <target state="translated">他の反復可能なオブジェクトの反復処理</target>
        </trans-unit>
        <trans-unit id="d2b2115ccf256747d8672ffc5d69d7406c205ab8" translate="yes" xml:space="preserve">
          <source>Iterating over own properties only</source>
          <target state="translated">自分のプロパティのみを繰り返し処理する</target>
        </trans-unit>
        <trans-unit id="b706b05db27d81be7980fff650e1efd676429131" translate="yes" xml:space="preserve">
          <source>Iterating over sync iterables and generators</source>
          <target state="translated">同期イテレータブルとジェネレータの反復処理</target>
        </trans-unit>
        <trans-unit id="197fe49a2a1c4d237370fea18854987d4402b9d6" translate="yes" xml:space="preserve">
          <source>Iterating over the arguments object</source>
          <target state="translated">引数オブジェクトの繰り返し処理</target>
        </trans-unit>
        <trans-unit id="a0c9b1100058d497cbedce594920f40748a99b04" translate="yes" xml:space="preserve">
          <source>Iterating over the properties of an object</source>
          <target state="translated">オブジェクトのプロパティを繰り返し処理する</target>
        </trans-unit>
        <trans-unit id="f00d02193dcc47913c30580455567325cb2dfc7d" translate="yes" xml:space="preserve">
          <source>Iterating own properties</source>
          <target state="translated">自身のプロパティの反復処理</target>
        </trans-unit>
        <trans-unit id="6fcc61476205d976879fe5c5834ef09fdec97d05" translate="yes" xml:space="preserve">
          <source>Iterating through an &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 反復する</target>
        </trans-unit>
        <trans-unit id="b729f2bb4ecffd58ba4c201a1207816bbea198ab" translate="yes" xml:space="preserve">
          <source>Iterating with index and element</source>
          <target state="translated">インデックスと要素の反復処理</target>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="translated">Iteration</target>
        </trans-unit>
        <trans-unit id="e57f738f4cf22de41d9639f210cde2805b2f793b" translate="yes" xml:space="preserve">
          <source>Iteration methods</source>
          <target state="translated">反復法</target>
        </trans-unit>
        <trans-unit id="cb861e59baf33cf5ef305c875f90f2d688e7c3a8" translate="yes" xml:space="preserve">
          <source>Iteration protocols</source>
          <target state="translated">イテレーションプロトコル</target>
        </trans-unit>
        <trans-unit id="87fc3eb7786823f67bfe4af13f35f991a544dbc4" translate="yes" xml:space="preserve">
          <source>Iteration symbols</source>
          <target state="translated">反復記号</target>
        </trans-unit>
        <trans-unit id="5424022050225204cf8727255495e6b24e82ff2f" translate="yes" xml:space="preserve">
          <source>Iteration using .next()</source>
          <target state="translated">.next()を使ったイテレーション</target>
        </trans-unit>
        <trans-unit id="eb79f142ae3daf3d1b99a2963dd0297f477bdb9c" translate="yes" xml:space="preserve">
          <source>Iteration using &lt;code&gt;&lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt;&lt;/code&gt; loop</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt;&lt;/code&gt; ループを使用した反復</target>
        </trans-unit>
        <trans-unit id="ab213d9f3b72f0094031342e450e11230c30ff03" translate="yes" xml:space="preserve">
          <source>Iteration using &lt;code&gt;for...of&lt;/code&gt; loop</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; ループを使用した反復</target>
        </trans-unit>
        <trans-unit id="caa6a77d6122fb34e678cfd0ceac3f71a3842492" translate="yes" xml:space="preserve">
          <source>Iteration using for...of loop</source>
          <target state="translated">ループのfor...を使った反復処理</target>
        </trans-unit>
        <trans-unit id="b0c34a82a6cb315de14486f56ef52965c9d62447" translate="yes" xml:space="preserve">
          <source>Iterations</source>
          <target state="translated">Iterations</target>
        </trans-unit>
        <trans-unit id="56c3f198d3a131f50b3aedf9e825651f8c11a967" translate="yes" xml:space="preserve">
          <source>Iterator examples</source>
          <target state="translated">イテレータの例</target>
        </trans-unit>
        <trans-unit id="0685bbcbd8ed67f28143ac80d8c20ee967c3be97" translate="yes" xml:space="preserve">
          <source>Iterators and generators</source>
          <target state="translated">イテレータとジェネレータ</target>
        </trans-unit>
        <trans-unit id="a5fff14a8fe4cf0ab4b7206119ff5ade05d8866a" translate="yes" xml:space="preserve">
          <source>JS Guide: Defining Getters and Setters</source>
          <target state="translated">JSガイド。ゲッターとセッターの定義</target>
        </trans-unit>
        <trans-unit id="9680a1e52ba14f160bd036f4c6ffa903b1428b1a" translate="yes" xml:space="preserve">
          <source>JS1.7/JS1.8 comprehensions are removed from Gecko starting with version 46 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1220564&quot;&gt;bug 1220564&lt;/a&gt;).</source>
          <target state="translated">JS1.7 / JS1.8の内包表記は、バージョン46以降、Geckoから削除されました（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1220564&quot;&gt;バグ1220564&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="c0ad391892841c8ebe22bd1fcdd0679b25d24c17" translate="yes" xml:space="preserve">
          <source>JSON Beautifier/editor</source>
          <target state="translated">JSON美化師/編集者</target>
        </trans-unit>
        <trans-unit id="100ffe778ac7ccdc31372ac8a52b744ce3cda1c0" translate="yes" xml:space="preserve">
          <source>JSON Parser</source>
          <target state="translated">JSON パーサー</target>
        </trans-unit>
        <trans-unit id="1c79289ed03d4e908f749949854866b01446c023" translate="yes" xml:space="preserve">
          <source>JSON Validator</source>
          <target state="translated">JSON バリデータ</target>
        </trans-unit>
        <trans-unit id="d37128db436e358a875a4420cb7e2d8bdc28ad9e" translate="yes" xml:space="preserve">
          <source>JSON bad parse</source>
          <target state="translated">JSON の不正なパース</target>
        </trans-unit>
        <trans-unit id="811285db50f8a8eb83d950550317fb65834a9157" translate="yes" xml:space="preserve">
          <source>JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. It is based upon JavaScript syntax but is distinct from it: some JavaScript is &lt;em&gt;not&lt;/em&gt; JSON.</source>
          <target state="translated">JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;. It is based upon JavaScript syntax but is distinct from it: some JavaScript is &lt;em&gt;not&lt;/em&gt; JSON.</target>
        </trans-unit>
        <trans-unit id="bf54a2760253e5523dd126645682e6342ba96377" translate="yes" xml:space="preserve">
          <source>JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON.</source>
          <target state="translated">JSONは、オブジェクト、配列、数値、文字列、ブール値、および&lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;をシリアル化するための構文です。これはJavaScript構文に基づいていますが、それとは異なります。一部のJavaScriptはJSONではありません。</target>
        </trans-unit>
        <trans-unit id="4f2a89c61c86c35467830a85aa4b232738cf254f" translate="yes" xml:space="preserve">
          <source>JSON permits &lt;em&gt;only&lt;/em&gt; property definition using &lt;code&gt;&quot;property&quot;: value&lt;/code&gt; syntax. The property name must be double-quoted, and the definition cannot be a shorthand.</source>
          <target state="translated">JSONは &lt;code&gt;&quot;property&quot;: value&lt;/code&gt; 構文を使用したプロパティ定義&lt;em&gt;のみを&lt;/em&gt;許可します。プロパティ名は二重引用符で囲む必要があり、定義を省略形にすることはできません。</target>
        </trans-unit>
        <trans-unit id="64b5375f0360e9044ba38df47f55f6d563d59252" translate="yes" xml:space="preserve">
          <source>JSON.parse</source>
          <target state="translated">JSON.parse</target>
        </trans-unit>
        <trans-unit id="9644748ebd63f29d453cce2a8979bae8f40c9f10" translate="yes" xml:space="preserve">
          <source>JSON.parse() does not allow single quotes</source>
          <target state="translated">JSON.parse()はシングルクォートを許可しません。</target>
        </trans-unit>
        <trans-unit id="cbd48627b99656cef31788a0ab301f29b0738042" translate="yes" xml:space="preserve">
          <source>JSON.parse() does not allow trailing commas</source>
          <target state="translated">JSON.parse()は末尾のカンマを許可しません。</target>
        </trans-unit>
        <trans-unit id="3898286ce044bc87123989a97e0cdf2ef51669ae" translate="yes" xml:space="preserve">
          <source>JSON.stringify</source>
          <target state="translated">JSON.stringify</target>
        </trans-unit>
        <trans-unit id="74e384b6b5577955a3669ecd037932490c489e66" translate="yes" xml:space="preserve">
          <source>Jake Archibald: JavaScript Promises: There and Back Again</source>
          <target state="translated">Jake Archibald:JavaScript の約束。そこにいてまた戻ってくる</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="cf9f0b7d11604683e3cd3536c286c1fbb6a1a234" translate="yes" xml:space="preserve">
          <source>JavaScript &quot;use strict&quot; tutorial for beginners.</source>
          <target state="translated">初心者のためのJavaScript &quot;use strict&quot; チュートリアル</target>
        </trans-unit>
        <trans-unit id="95f38db69c9860d4c53e8e685654bf16597668ff" translate="yes" xml:space="preserve">
          <source>JavaScript 1.6's &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each (variable in obj)&lt;/code&gt;&lt;/a&gt; statement is deprecated, and will be removed in the near future.</source>
          <target state="translated">&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each (variable in obj)&lt;/code&gt; &lt;/a&gt;ステートメントのJavaScript 1.6 は非推奨であり、近い将来削除される予定です。</target>
        </trans-unit>
        <trans-unit id="b11fcfb5e6c4095c390cc74243bf136eff9202ee" translate="yes" xml:space="preserve">
          <source>JavaScript 1.6's &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each (variable in obj)&lt;/code&gt;&lt;/a&gt; statement is deprecated, and will be removed in the near future.</source>
          <target state="translated">JavaScript 1.6's &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each (variable in obj)&lt;/code&gt; &lt;/a&gt; statement is deprecated, and will be removed in the near future.</target>
        </trans-unit>
        <trans-unit id="ea7b87afcbfa3966fea708fd6422311e4516f203" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Date.prototype&lt;/code&gt;. You can modify the constructor's prototype object to affect properties and methods inherited by JavaScript &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">JavaScriptの&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスは &lt;code&gt;Date.prototype&lt;/code&gt; から継承します。コンストラクターのプロトタイプオブジェクトを変更して、JavaScript &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスによって継承されるプロパティとメソッドに影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="1bfd90e7c2dbb27dce27ca27bdac42e0dcc0f232" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; objects are &lt;strong&gt;stateful&lt;/strong&gt; when they have the &lt;a href=&quot;global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sticky&quot;&gt;&lt;code&gt;sticky&lt;/code&gt;&lt;/a&gt; flags set (e.g. &lt;code&gt;/foo/g&lt;/code&gt; or &lt;code&gt;/foo/y&lt;/code&gt;). They store a &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; from the previous match. Using this internally, &lt;code&gt;exec()&lt;/code&gt; can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JavaScript &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; objects are &lt;strong&gt;stateful&lt;/strong&gt; when they have the &lt;a href=&quot;global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;sticky&quot;&gt; &lt;code&gt;sticky&lt;/code&gt; &lt;/a&gt; flags set (e.g. &lt;code&gt;/foo/g&lt;/code&gt; or &lt;code&gt;/foo/y&lt;/code&gt; ). They store a &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; from the previous match. Using this internally, &lt;code&gt;exec()&lt;/code&gt; can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e185614f6000d0678a516450668693294c69226e" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; instances</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; インスタンス</target>
        </trans-unit>
        <trans-unit id="0c24fd7a6e89387c4f243f44598ae892c1180321" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; objects represent a single moment in time in a platform-independent format. &lt;code&gt;Date&lt;/code&gt; objects contain a &lt;code&gt;Number&lt;/code&gt; that represents milliseconds since 1 January 1970 UTC.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; objects represent a single moment in time in a platform-independent format. &lt;code&gt;Date&lt;/code&gt; objects contain a &lt;code&gt;Number&lt;/code&gt; that represents milliseconds since 1 January 1970 UTC.</target>
        </trans-unit>
        <trans-unit id="8a87f819f80e77daa36501c55d2c2194b0cf3fe2" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;String.length&lt;/code&gt; and Internationalizing Web Applications</source>
          <target state="translated">JavaScript &lt;code&gt;String.length&lt;/code&gt; およびWebアプリケーションの国際化</target>
        </trans-unit>
        <trans-unit id="e3e1e7a0cc811b106bfef783b0416af73ca33679" translate="yes" xml:space="preserve">
          <source>JavaScript Guide: &amp;ldquo;Indexing object properties&amp;rdquo;</source>
          <target state="translated">JavaScriptガイド：「オブジェクトプロパティのインデックス作成」</target>
        </trans-unit>
        <trans-unit id="6a82cb7626330736e6c599c3af57e1f82e2ef675" translate="yes" xml:space="preserve">
          <source>JavaScript Guide: &amp;ldquo;Predefined Core Objects: &lt;code&gt;Array&lt;/code&gt; Object&amp;rdquo;</source>
          <target state="translated">JavaScriptガイド：「事前定義のコアオブジェクト： &lt;code&gt;Array&lt;/code&gt; オブジェクト」</target>
        </trans-unit>
        <trans-unit id="f586882c868e8d1ea5952465445447e739fcd864" translate="yes" xml:space="preserve">
          <source>JavaScript Guide: Inheritance revisited</source>
          <target state="translated">JavaScriptガイド。相続再考</target>
        </trans-unit>
        <trans-unit id="8a9eb27e2d92ebadf6635ebf472954fddd2b2da1" translate="yes" xml:space="preserve">
          <source>JavaScript URIs</source>
          <target state="translated">JavaScript URI</target>
        </trans-unit>
        <trans-unit id="54e3077631b43981930a15403a3d80fa000df5fe" translate="yes" xml:space="preserve">
          <source>JavaScript and JSON differences</source>
          <target state="translated">JavaScriptとJSONの違い</target>
        </trans-unit>
        <trans-unit id="e296c3871618d551c3deb57435cdb708b2ce43ec" translate="yes" xml:space="preserve">
          <source>JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.</source>
          <target state="translated">JavaScriptアプリケーションは、適切な構文を持つステートメントで構成されています。1つのステートメントは複数の行にまたがることがあります。各ステートメントがセミコロンで区切られている場合、複数のステートメントが1行に存在することがあります。これはキーワードではなく、キーワードのグループです。</target>
        </trans-unit>
        <trans-unit id="4c6223ca18121abcd5886040798a9233e0f4edd4" translate="yes" xml:space="preserve">
          <source>JavaScript arguments object and beyond</source>
          <target state="translated">JavaScript の引数オブジェクトとその先</target>
        </trans-unit>
        <trans-unit id="d99bc0de4948386c462dba4ba7e8077b8ebf7e66" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are zero-indexed. The first element of an array is at index &lt;code&gt;0&lt;/code&gt;, and the last element is at the index value equal to the value of the array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property minus &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">JavaScript arrays are zero-indexed. The first element of an array is at index &lt;code&gt;0&lt;/code&gt; , and the last element is at the index value equal to the value of the array's &lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; property minus &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f21e4eca6175c2b188c4fef15f8f69d8441431c" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are zero-indexed: the first element of an array is at index &lt;code&gt;0&lt;/code&gt;, and the last element is at the index equal to the value of the array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property minus 1. Using an invalid index number returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">JavaScript配列のインデックスはゼロです。配列の最初の要素はインデックス &lt;code&gt;0&lt;/code&gt; にあり、最後の要素は配列の&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティの値から1を引いた値に等しいインデックスにあります。無効なインデックス番号を使用すると、 &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="2f140eaf1bc562f42183779bed82bd97513bcc4c" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method to convert an object to a primitive value. You rarely need to invoke the &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.</source>
          <target state="translated">JavaScriptは &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; メソッドを呼び出して、オブジェクトをプリミティブ値に変換します。 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; メソッドを自分で呼び出す必要はほとんどありません。JavaScriptは、プリミティブ値が期待されるオブジェクトに遭遇すると、それを自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="50294983ecbb0dfe18825d0151cd8d983a64aa0d" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString()&lt;/code&gt; method automatically when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is to be represented as a text value or when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is referred to in a string concatenation.</source>
          <target state="translated">JavaScript calls the &lt;code&gt;toString()&lt;/code&gt; method automatically when a &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; is to be represented as a text value or when a &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; is referred to in a string concatenation.</target>
        </trans-unit>
        <trans-unit id="5066082528c32a0346c3e4a351fbb930d1b3fa37" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is to be represented as a text value or when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is referred to in a string concatenation.</source>
          <target state="translated">JavaScriptは、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;値をテキスト値として表す場合、または&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;が文字列連結で参照される場合に、 &lt;code&gt;toString&lt;/code&gt; メソッドを自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="4c3f5e361a1003614ebc1a7ce6eeb53269aa5790" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; is to be represented as a text value, e.g. when a function is concatenated with a string.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;がテキスト値として表される場合、たとえば関数が文字列と連結される場合、JavaScriptは &lt;code&gt;toString&lt;/code&gt; メソッドを自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="393f0b6efbb93056c0b250145a8ea958adf4262a" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when a typed array is to be represented as a text value or when an array is referred to in a string concatenation.</source>
          <target state="translated">型指定された配列をテキスト値として表す場合、または配列が文字列連結で参照される場合、JavaScriptは &lt;code&gt;toString&lt;/code&gt; メソッドを自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="683fa5acf0e0743489be2182726e924b6e304505" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.</source>
          <target state="translated">JavaScriptは、配列がテキスト値として表される場合、または配列が文字列連結で参照される場合に、 &lt;code&gt;toString&lt;/code&gt; メソッドを自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="184b276782b0e1581363d9931664ae6bc740c6f7" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;valueOf&lt;/code&gt; method to convert an object to a primitive value. You rarely need to invoke the &lt;code&gt;valueOf&lt;/code&gt; method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.</source>
          <target state="translated">JavaScriptは &lt;code&gt;valueOf&lt;/code&gt; メソッドを呼び出して、オブジェクトをプリミティブ値に変換します。自分で &lt;code&gt;valueOf&lt;/code&gt; メソッドを呼び出す必要はほとんどありません。JavaScriptは、プリミティブ値が期待されるオブジェクトに遭遇すると、それを自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="a577236e04190d40c6076c0d7d543e39819cea97" translate="yes" xml:space="preserve">
          <source>JavaScript classes use prototype-based inheritance.</source>
          <target state="translated">JavaScriptのクラスはプロトタイプベースの継承を使用しています。</target>
        </trans-unit>
        <trans-unit id="2931f30ff332619933e36eefb2c8dedc78c4d337" translate="yes" xml:space="preserve">
          <source>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax &lt;em&gt;does not&lt;/em&gt; introduce a new object-oriented inheritance model to JavaScript.</source>
          <target state="translated">ECMAScript 2015で導入されたJavaScriptクラスは、主にJavaScriptの既存のプロトタイプベースの継承に対する構文上の砂糖です。クラス構文&lt;em&gt;は&lt;/em&gt;、JavaScriptに新しいオブジェクト指向の継承モデルを導入&lt;em&gt;しません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f90b832f4be39c9624e04c4d939b964593b45fbc" translate="yes" xml:space="preserve">
          <source>JavaScript compressors and minifiers</source>
          <target state="translated">JavaScript のコンプレッサーとミニファイヤー</target>
        </trans-unit>
        <trans-unit id="0a62b40b41ce0d42df8ba4b0874263a7aa928401" translate="yes" xml:space="preserve">
          <source>JavaScript content</source>
          <target state="translated">JavaScriptの内容</target>
        </trans-unit>
        <trans-unit id="1e969f4dea65068f57af2163d858ddfb54949632" translate="yes" xml:space="preserve">
          <source>JavaScript documentation of core language features (pure &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt;, for the most part) includes the following:</source>
          <target state="translated">コア言語機能のJavaScriptドキュメント（大部分は純粋な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt;）には、次のものが含まれています。</target>
        </trans-unit>
        <trans-unit id="1762e80126b8c04f9760ca489f7c178ef60a0f3e" translate="yes" xml:space="preserve">
          <source>JavaScript documentation of core language features (pure &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt;, for the most part) includes the following:</source>
          <target state="translated">JavaScript documentation of core language features (pure &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt;, for the most part) includes the following:</target>
        </trans-unit>
        <trans-unit id="b93db76fbe081ca564a2858e45a41eafa11ee556" translate="yes" xml:space="preserve">
          <source>JavaScript does not protect the property name &lt;code&gt;hasOwnProperty&lt;/code&gt;; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an &lt;em&gt;external&lt;/em&gt;&lt;code&gt;hasOwnProperty&lt;/code&gt; to get correct results:</source>
          <target state="translated">JavaScriptはプロパティ名 &lt;code&gt;hasOwnProperty&lt;/code&gt; を保護しません。したがって、オブジェクトにこの名前のプロパティがある可能性がある場合は、&lt;em&gt;外部の&lt;/em&gt; &lt;code&gt;hasOwnProperty&lt;/code&gt; を使用して正しい結果を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="744ac18ff13febca682b94a53d3b047df2f4abee" translate="yes" xml:space="preserve">
          <source>JavaScript has &lt;a href=&quot;http://en.wikipedia.org/wiki/First-class_function&quot;&gt;first-class functions&lt;/a&gt;, which means you can pass functions as arguments to other APIs, store them in variables and objects' properties, and so on. Many DOM APIs are designed with this in mind, so you can (and should) write:</source>
          <target state="translated">JavaScriptには&lt;a href=&quot;http://en.wikipedia.org/wiki/First-class_function&quot;&gt;ファーストクラスの関数&lt;/a&gt;があります。つまり、関数を引数として他のAPIに渡し、それらを変数やオブジェクトのプロパティなどに格納できます。多くのDOM APIはこれを念頭に置いて設計されているため、次のように書くことができます（すべきです）。</target>
        </trans-unit>
        <trans-unit id="b0f73fb099b33ee3d477b6e6ec4117cca801b107" translate="yes" xml:space="preserve">
          <source>JavaScript has a Unicode problem &amp;ndash; Mathias Bynens</source>
          <target state="translated">JavaScriptにはUnicodeの問題があります&amp;ndash; Mathias Bynens</target>
        </trans-unit>
        <trans-unit id="56309979b027f223f5f71cfacdefde8dd70b7b0d" translate="yes" xml:space="preserve">
          <source>JavaScript has both strict and type&amp;ndash;converting comparisons. A strict comparison (e.g., &lt;code&gt;===&lt;/code&gt;) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. &lt;code&gt;==&lt;/code&gt;) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;code&gt;&amp;lt;=&lt;/code&gt;), the operands are first converted to primitives, then to the same type, before comparison.</source>
          <target state="translated">JavaScriptには、厳密な比較と型変換の比較があります。厳密な比較（例えば、 &lt;code&gt;===&lt;/code&gt; ）は、オペランドが同じタイプで内容が一致する場合にのみ真になります。より一般的に使用される抽象比較（ &lt;code&gt;==&lt;/code&gt; など）は、比較を行う前に、オペランドを同じ型に変換します。リレーショナル抽象比較（例： &lt;code&gt;&amp;lt;=&lt;/code&gt; ）の場合、比較の前に、オペランドは最初にプリミティブに変換され、次に同じ型に変換されます。</target>
        </trans-unit>
        <trans-unit id="e1bdbb8ec850c38a8026b2608b3250a593c52c81" translate="yes" xml:space="preserve">
          <source>JavaScript has two long-standing ways to add comments to code.</source>
          <target state="translated">JavaScriptには、コードにコメントを追加するための2つの長い間の方法があります。</target>
        </trans-unit>
        <trans-unit id="d451ffb310870083fd5a49cb2b8ef66dfdfe1f3c" translate="yes" xml:space="preserve">
          <source>JavaScript has two ways of assigning comments in its code.</source>
          <target state="translated">JavaScriptには、コード内のコメントを割り当てる2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="8fa5fe2946ae7adfe543cac944c95cd7b341ce22" translate="yes" xml:space="preserve">
          <source>JavaScript is a superset of JSON</source>
          <target state="translated">JavaScriptはJSONのスーパーセット</target>
        </trans-unit>
        <trans-unit id="b4076ff618dfacee58cdf4a93cbdfdfe84945b25" translate="yes" xml:space="preserve">
          <source>JavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The 'with' statement adds the given object to the head of this scope chain during the evaluation of its statement body. If an unqualified name used in the body matches a property in the scope chain, then the name is bound to the property and the object containing the property. Otherwise a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">JavaScriptは、非修飾名を含むスクリプトまたは関数の実行コンテキストに関連付けられたスコープチェーンを検索することにより、非修飾名を検索します。「with」ステートメントは、ステートメント本体の評価中に、指定されたオブジェクトをこのスコープチェーンの先頭に追加します。本文で使用されている非修飾名がスコープチェーンのプロパティと一致する場合、名前はプロパティとそのプロパティを含むオブジェクトにバインドされます。それ以外の場合、&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="ed0db572e5996fee5b434deb324bc5076fbb6fd1" translate="yes" xml:space="preserve">
          <source>JavaScript novices often make the mistake of using &lt;a href=&quot;../global_objects/eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; where the bracket notation can be used instead.</source>
          <target state="translated">JavaScript novices often make the mistake of using &lt;a href=&quot;../global_objects/eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt; where the bracket notation can be used instead.</target>
        </trans-unit>
        <trans-unit id="500d283647b665226bc80b83e62ac36d1f5c187d" translate="yes" xml:space="preserve">
          <source>JavaScript novices often make the mistake of using &lt;a href=&quot;../global_objects/eval&quot;&gt;eval&lt;/a&gt; where the bracket notation can be used instead. For example, the following syntax is often seen in many scripts.</source>
          <target state="translated">JavaScriptの初心者は、ブラケット表記を代わりに使用できる&lt;a href=&quot;../global_objects/eval&quot;&gt;evalを&lt;/a&gt;誤って使用することがよくあります。たとえば、次の構文は多くのスクリプトでよく見られます。</target>
        </trans-unit>
        <trans-unit id="e21dab6f4cb682e4bba5a78456152ff1d779abee" translate="yes" xml:space="preserve">
          <source>JavaScript sources are often combined and minified to make delivering them from the server more efficient. With &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt;, the debugger can map the code being executed to the original source files.</source>
          <target state="translated">多くの場合、JavaScriptソースは、サーバーからの配信をより効率的にするために結合および縮小されます。で&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;ソースマップ&lt;/a&gt;、デバッガは、元のソースファイルに実行されているコードをマッピングすることができます。</target>
        </trans-unit>
        <trans-unit id="ad8cd050ac71fdbacf40f64310ee52ea5ed02597" translate="yes" xml:space="preserve">
          <source>JavaScript sources are often combined and minified to make delivering them from the server more efficient. With &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt;, the debugger can map the code being executed to the original source files. There are two ways to assign a source map, either by using a comment or by setting a header to the JavaScript file.</source>
          <target state="translated">多くの場合、JavaScriptソースは、サーバーからの配信をより効率的にするために結合および縮小されます。で&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;ソースマップ&lt;/a&gt;、デバッガは、元のソースファイルに実行されているコードをマッピングすることができます。ソースマップを割り当てるには、コメントを使用する方法と、JavaScriptファイルにヘッダーを設定する方法の2つがあります。</target>
        </trans-unit>
        <trans-unit id="9181d1be8221d2a98ab781830924aa6d7f552254" translate="yes" xml:space="preserve">
          <source>JavaScript statements</source>
          <target state="translated">JavaScriptステートメント</target>
        </trans-unit>
        <trans-unit id="259994f4d52f71d4fbed52e072b9ba70b6557f01" translate="yes" xml:space="preserve">
          <source>JavaScript statements and declarations</source>
          <target state="translated">JavaScript のステートメントと宣言</target>
        </trans-unit>
        <trans-unit id="37b17512d10a675de7d71fd732c55ebc7a3b9f99" translate="yes" xml:space="preserve">
          <source>JavaScript typed arrays</source>
          <target state="translated">JavaScript の型付き配列</target>
        </trans-unit>
        <trans-unit id="d9f300a88147dae849b96edf9997d43decbfc431" translate="yes" xml:space="preserve">
          <source>JavaScript used to silently fail in contexts where what was done was an error. Strict mode throws in such cases. If your code base contains such cases, testing will be necessary to be sure nothing is broken. Once again, it can happen at the function granularity level.</source>
          <target state="translated">JavaScript は以前、何をしたかがエラーになるような状況では、黙って失敗していました。Strict モードはそのようなケースをスローします。コードベースにそのようなケースが含まれている場合、何も壊れていないことを確認するためにテストが必要になります。繰り返しになりますが、これは関数の粒度レベルで起こる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a77ef21cb7721ec6f8aebd2995c230f5309fb642" translate="yes" xml:space="preserve">
          <source>JavaScript uses 64-bit double floating-point numbers internally, which offer a very high precision. However, sometimes you may be working with 32-bit floating-point numbers, for example if you are reading values from a &lt;a href=&quot;../float32array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt;. This can create confusion: Checking a 64-bit float and a 32-bit float for equality may fail even though the numbers are seemingly identical.</source>
          <target state="translated">JavaScriptは内部で64ビットの倍精度浮動小数点数を使用しており、非常に高い精度を提供します。ただし、たとえば&lt;a href=&quot;../float32array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;から値を読み取る場合など、32ビットの浮動小数点数を使用している場合があります。これにより混乱が生じる可能性があります。64ビットのフロートと32ビットのフロートが等しいかどうかのチェックは、数値が一見同じに見えても失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fc81a73fdcb27f667ca60560af29085d17998baf" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive types&lt;/a&gt;</source>
          <target state="translated">JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive types&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7518d19c0a8ea33bde8476c80bb0232ba1ac7e0b" translate="yes" xml:space="preserve">
          <source>JavaScript's strict mode, introduced in ECMAScript 5, is a way to &lt;em&gt;opt in&lt;/em&gt; to a restricted variant of JavaScript, thereby implicitly opting-out of &quot;&lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Sloppy_mode&quot;&gt;sloppy mode&lt;/a&gt;&quot;. Strict mode isn't just a subset: it &lt;em&gt;intentionally&lt;/em&gt; has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.</source>
          <target state="translated">ECMAScript 5で導入されたJavaScriptのストリクトモードは、JavaScriptの制限されたバリアントを&lt;em&gt;オプトイン&lt;/em&gt;する方法であり、それによって暗黙的に「&lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Sloppy_mode&quot;&gt;ずさんなモード&lt;/a&gt;」を&lt;em&gt;オプトアウトし&lt;/em&gt;ます。Strictモードは単なるサブセットではありません。&lt;em&gt;意図&lt;/em&gt;的に通常のコードとは異なるセマンティクスを持っています。厳密モードをサポートしないブラウザーは、厳密モードコードを実行しますが、ブラウザーとは異なる動作をするため、厳密モードの関連する側面のサポートを機能テストすることなく、厳密モードに依存しないでください。ストリクトモードコードと非ストリクトモードコードは共存できるため、スクリプトはストリクトモードを段階的に選択できます。</target>
        </trans-unit>
        <trans-unit id="d8e32ab2db9b079eda92fa09b2355bca2f171c5d" translate="yes" xml:space="preserve">
          <source>Jeff Walden: Binary and octal numbers</source>
          <target state="translated">ジェフ・ウォールデン 2進数と8進数</target>
        </trans-unit>
        <trans-unit id="b658a93f5080a188c9235ee53c6be002c9eab5c1" translate="yes" xml:space="preserve">
          <source>John Resig - ECMAScript 5 Strict Mode, JSON, and More</source>
          <target state="translated">John Resig-ECMAScript 5 Strict Mode,JSON,その他</target>
        </trans-unit>
        <trans-unit id="e109b48140a2c26bae797c244c9bfbe125064793" translate="yes" xml:space="preserve">
          <source>John Resig's post on &lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;getPrototypeOf()&lt;/a&gt;</source>
          <target state="translated">John Resigの&lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;getPrototypeOf（）&lt;/a&gt;に関する投稿</target>
        </trans-unit>
        <trans-unit id="1cb2dd32eeadac5ce1b22baa719abf0989f79767" translate="yes" xml:space="preserve">
          <source>John Resig's post on &lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;getPrototypeOf&lt;/a&gt;</source>
          <target state="translated">John Resigの&lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;getPrototypeOf&lt;/a&gt;に関する投稿</target>
        </trans-unit>
        <trans-unit id="ce7fefe555466a8ed76878d9ad48a19e9f5ed947" translate="yes" xml:space="preserve">
          <source>Joining an array four different ways</source>
          <target state="translated">4つの異なる方法で配列を結合する</target>
        </trans-unit>
        <trans-unit id="ca75637a97b45df264928724e8c930f8f2374d29" translate="yes" xml:space="preserve">
          <source>Joining an array-like object</source>
          <target state="translated">配列のようなオブジェクトを結合する</target>
        </trans-unit>
        <trans-unit id="58cf6e8e2b4250d2ee6acd3e6658db4bca072f47" translate="yes" xml:space="preserve">
          <source>Joins all elements of an array into a string.</source>
          <target state="translated">配列のすべての要素を文字列に結合します。</target>
        </trans-unit>
        <trans-unit id="c5cf3b0b8befbf9cb5a1bdb4c752da3d1915e294" translate="yes" xml:space="preserve">
          <source>Joins all elements of an array into a string. See also &lt;a href=&quot;../array/join&quot;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のすべての要素を文字列に結合します。&lt;a href=&quot;../array/join&quot;&gt; &lt;code&gt;Array.prototype.join()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="562ca02600cc3d32d6d31461ceb9523ce4867295" translate="yes" xml:space="preserve">
          <source>Joins all elements of an array into a string. See also &lt;a href=&quot;array/join&quot;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のすべての要素を文字列に結合します。&lt;a href=&quot;array/join&quot;&gt; &lt;code&gt;Array.prototype.join()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="42a137bec040460e475257375a4cce301ea33e78" translate="yes" xml:space="preserve">
          <source>Just in the same manner at which you can check if an object is an instance of a class using the &lt;code&gt;instanceof&lt;/code&gt; keyword, we can also use &lt;code&gt;Symbol.hasInstance&lt;/code&gt; for such checks also.</source>
          <target state="translated">Just in the same manner at which you can check if an object is an instance of a class using the &lt;code&gt;instanceof&lt;/code&gt; keyword, we can also use &lt;code&gt;Symbol.hasInstance&lt;/code&gt; for such checks also.</target>
        </trans-unit>
        <trans-unit id="ef4fda55212e685f6922b9ab18069589fa05df90" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;../statements/const#Description&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;let&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; create properties of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; object when declared globally (in the top-most scope).</source>
          <target state="translated">Just like &lt;a href=&quot;../statements/const#Description&quot;&gt; &lt;code&gt;const&lt;/code&gt; &lt;/a&gt; the &lt;code&gt;let&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; create properties of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt; object when declared globally (in the top-most scope).</target>
        </trans-unit>
        <trans-unit id="31908c57894e69aa4075c11a7827e02a40c3d02e" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;Array&lt;/code&gt;s, &lt;code&gt;Map&lt;/code&gt;s can be cloned:</source>
          <target state="translated">Just like &lt;code&gt;Array&lt;/code&gt; s, &lt;code&gt;Map&lt;/code&gt; s can be cloned:</target>
        </trans-unit>
        <trans-unit id="3171f5f59eaafdb8bfb35802f80f8d75b1cb8d82" translate="yes" xml:space="preserve">
          <source>Just like Arrays, Maps can be cloned:</source>
          <target state="translated">配列と同じように、マップもクローンを作成することができます。</target>
        </trans-unit>
        <trans-unit id="97172eff647c6d5219091962ca2611beb32eeb98" translate="yes" xml:space="preserve">
          <source>Just like spread for argument lists, &lt;code&gt;...&lt;/code&gt; can be used anywhere in the array literal and it can be used multiple times.</source>
          <target state="translated">引数リストのスプレッドと同じように、 &lt;code&gt;...&lt;/code&gt; は配列リテラルの任意の場所で使用でき、複数回使用できます。</target>
        </trans-unit>
        <trans-unit id="448cce5867e24f2c805aa405815a60c7e121ab75" translate="yes" xml:space="preserve">
          <source>Just like spread for argument lists, &lt;code&gt;...&lt;/code&gt; can be used anywhere in the array literal, and may be used more than once.</source>
          <target state="translated">Just like spread for argument lists, &lt;code&gt;...&lt;/code&gt; can be used anywhere in the array literal, and may be used more than once.</target>
        </trans-unit>
        <trans-unit id="9bc13bdbc40dbbf16930c00359072c0a20a24037" translate="yes" xml:space="preserve">
          <source>Just like with class statements, the class body of class expressions is executed in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="translated">classステートメントと同様に、クラス式のクラス本体は&lt;a href=&quot;../strict_mode&quot;&gt;strictモードで&lt;/a&gt;実行されます。</target>
        </trans-unit>
        <trans-unit id="334d0e27a60ef5578e3f70a25c79218f4fe82068" translate="yes" xml:space="preserve">
          <source>Just like with regular functions, the value of &lt;code&gt;this&lt;/code&gt; within methods depends on how they are called. Sometimes it is useful to override this behavior so that &lt;code&gt;this&lt;/code&gt; within classes always refers to the class instance. To achieve this, bind the class methods in the constructor:</source>
          <target state="translated">Just like with regular functions, the value of &lt;code&gt;this&lt;/code&gt; within methods depends on how they are called. Sometimes it is useful to override this behavior so that &lt;code&gt;this&lt;/code&gt; within classes always refers to the class instance. To achieve this, bind the class methods in the constructor:</target>
        </trans-unit>
        <trans-unit id="69d426e0b0b4de27b15660b01fc62946e5938d84" translate="yes" xml:space="preserve">
          <source>Keep in mind that returning object literals using the concise body syntax &lt;code&gt;params =&amp;gt; {object:literal}&lt;/code&gt; will not work as expected.</source>
          <target state="translated">簡潔な本文構文 &lt;code&gt;params =&amp;gt; {object:literal}&lt;/code&gt; を使用してオブジェクトリテラルを返すと、期待どおりに機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="45641e7e3979cd965842335c014475cef41a87fc" translate="yes" xml:space="preserve">
          <source>Keep in mind that the &lt;em&gt;data&lt;/em&gt; itself is not cloned</source>
          <target state="translated">ことを覚えておいてください&lt;em&gt;データ&lt;/em&gt;自体は複製されません</target>
        </trans-unit>
        <trans-unit id="2c4957a169b89c153b565ae42b9ef3901c360eac" translate="yes" xml:space="preserve">
          <source>Key Order</source>
          <target state="translated">キーオーダー</target>
        </trans-unit>
        <trans-unit id="d8fda7e7073ab6e066cc5fdfad0bb7200902f96f" translate="yes" xml:space="preserve">
          <source>Key Types</source>
          <target state="translated">キータイプ</target>
        </trans-unit>
        <trans-unit id="58858bc70a5dcc03fe17b9c1101d84c397faeb12" translate="yes" xml:space="preserve">
          <source>Key equality</source>
          <target state="translated">主要な平等</target>
        </trans-unit>
        <trans-unit id="418428fa68e56676339f9e99c7d969243f4dcf32" translate="yes" xml:space="preserve">
          <source>Key equality for -0 and 0</source>
          <target state="translated">0と0の主要な等式</target>
        </trans-unit>
        <trans-unit id="6563e14e4c7f853e64030f302a776db20d4f7014" translate="yes" xml:space="preserve">
          <source>Key equality is based on the &quot;SameValueZero&quot; algorithm: &lt;code&gt;NaN&lt;/code&gt; is considered the same as &lt;code&gt;NaN&lt;/code&gt; (even though &lt;code&gt;NaN !== NaN&lt;/code&gt;) and all other values are considered equal according to the semantics of the &lt;code&gt;===&lt;/code&gt; operator. In the current ECMAScript specification &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are considered equal, although this was not so in earlier drafts. See &quot;Value equality for -0 and 0&quot; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; table for details.</source>
          <target state="translated">主な平等は「SameValueZero」アルゴリズムに基づいています： &lt;code&gt;NaN&lt;/code&gt; は同じと考えられている &lt;code&gt;NaN&lt;/code&gt; （にもかかわらず &lt;code&gt;NaN !== NaN&lt;/code&gt; ）および他のすべての値は、の意味論に従って等しいと見なされます &lt;code&gt;===&lt;/code&gt; 演算子。現在のECMAScript仕様では &lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; は等しいと見なされていますが、以前のドラフトではそうではありませんでした。詳細については、&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザ互換性&lt;/a&gt;テーブルの「-0と0の値の等価性」を参照してください。</target>
        </trans-unit>
        <trans-unit id="560f7deb9fbd3419ef9f86474562f05574fd62b6" translate="yes" xml:space="preserve">
          <source>Key equality is based on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;&lt;code&gt;sameValueZero&lt;/code&gt;&lt;/a&gt; algorithm.</source>
          <target state="translated">Key equality is based on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt; &lt;code&gt;sameValueZero&lt;/code&gt; &lt;/a&gt; algorithm.</target>
        </trans-unit>
        <trans-unit id="e058bd41ac73e100088d83fe4389c6bbf1edf666" translate="yes" xml:space="preserve">
          <source>Key iterator doesn't ignore holes</source>
          <target state="translated">キーイテレータは穴を無視しない</target>
        </trans-unit>
        <trans-unit id="c4b1e3d15db5cb909c8e5c3bc50d9848da8a66a6" translate="yes" xml:space="preserve">
          <source>Key of each iteration.</source>
          <target state="translated">各イテレーションのキー。</target>
        </trans-unit>
        <trans-unit id="21bcd8b61da1a79642efef50ec42b117725cfd0b" translate="yes" xml:space="preserve">
          <source>Keyed collections</source>
          <target state="translated">キー付きコレクション</target>
        </trans-unit>
        <trans-unit id="e858ac0582f24507144f71eb06b9663abeb13fe9" translate="yes" xml:space="preserve">
          <source>Keys of WeakMaps are of the type &lt;code&gt;Object&lt;/code&gt; only. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;Primitive data types&lt;/a&gt; as keys are not allowed (e.g. a &lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; can't be a &lt;code&gt;WeakMap&lt;/code&gt; key).</source>
          <target state="translated">WeakMapsのキーは、 &lt;code&gt;Object&lt;/code&gt; タイプのみです。キーとしての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブデータタイプ&lt;/a&gt;は許可されません（たとえば、&lt;a href=&quot;symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;WeakMap&lt;/code&gt; キーにすることはできません）。</target>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="325af73483fcf5c08a91b8eb3976b4d6df09fb26" translate="yes" xml:space="preserve">
          <source>Labeled function declarations</source>
          <target state="translated">ラベル付き関数宣言</target>
        </trans-unit>
        <trans-unit id="b410fe2d42fb15e228b8ae7a8709673d13e20776" translate="yes" xml:space="preserve">
          <source>Labeled functions</source>
          <target state="translated">ラベル付けされた機能</target>
        </trans-unit>
        <trans-unit id="fbfac8f52cada2e823dffb384cec8f92ee566cc1" translate="yes" xml:space="preserve">
          <source>Labeled version added.</source>
          <target state="translated">ラベル付きバージョンを追加しました。</target>
        </trans-unit>
        <trans-unit id="18ec3a98210aeff5bfef56e8e71a0e2c6e2d980e" translate="yes" xml:space="preserve">
          <source>Labelled Block Statement</source>
          <target state="translated">ラベル付きブロックステートメント</target>
        </trans-unit>
        <trans-unit id="e41fcf1417b00add077b976c546098d3e0536e21" translate="yes" xml:space="preserve">
          <source>Larger numbers can be represented using the &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Larger numbers can be represented using the &lt;a href=&quot;bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; type.</target>
        </trans-unit>
        <trans-unit id="d4d22d5671692704cf9c12c2f01bc613043ef602" translate="yes" xml:space="preserve">
          <source>Last expression is evaluated</source>
          <target state="translated">最後の式が評価される</target>
        </trans-unit>
        <trans-unit id="7071422e0583b8e4fb6b9167f225e466e2e38239" translate="yes" xml:space="preserve">
          <source>Lastly, let's examine minification. With using &lt;code&gt;Function()&lt;/code&gt; as shown above, you can minify the code string passed to &lt;code&gt;runCodeWithDateFunction()&lt;/code&gt; far more efficiently because the function arguments names can be minified too as seen in the minified code below.</source>
          <target state="translated">Lastly, let's examine minification. With using &lt;code&gt;Function()&lt;/code&gt; as shown above, you can minify the code string passed to &lt;code&gt;runCodeWithDateFunction()&lt;/code&gt; far more efficiently because the function arguments names can be minified too as seen in the minified code below.</target>
        </trans-unit>
        <trans-unit id="330564a59eaa49b0ee4ffeca30a4dbf5c461f71d" translate="yes" xml:space="preserve">
          <source>Lastly, let's examine minification. With using &lt;code&gt;Function()&lt;/code&gt; as shown above, you can minify the code string passed to &lt;code&gt;runCodeWithDateFunction&lt;/code&gt; far more efficiently because the function arguments names can be minified too as seen in the minified code below.</source>
          <target state="translated">最後に、ミニファイについて見てみましょう。上記のように &lt;code&gt;Function()&lt;/code&gt; を使用すると、以下の縮小コードにあるように関数の引数名も縮小できるため、 &lt;code&gt;runCodeWithDateFunction&lt;/code&gt; に渡されるコード文字列をはるかに効率的に縮小できます。</target>
        </trans-unit>
        <trans-unit id="38df12cc2e08bdc92e4c234437ee9953901f40b0" translate="yes" xml:space="preserve">
          <source>Leading and trailing spaces in the argument are ignored.</source>
          <target state="translated">引数の先頭と末尾のスペースは無視されます。</target>
        </trans-unit>
        <trans-unit id="ed2e9e2a0d6f7444c85a01dfc9c3452d30b19c69" translate="yes" xml:space="preserve">
          <source>Leading zeros and decimal points</source>
          <target state="translated">先頭のゼロと小数点</target>
        </trans-unit>
        <trans-unit id="839d8fec4eaf98bd81c386bc951d0be390bc6b7d" translate="yes" xml:space="preserve">
          <source>Leading zeros are prohibited. A decimal point must be followed by at least one digit. &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; are unsupported.</source>
          <target state="translated">Leading zeros are prohibited. A decimal point must be followed by at least one digit. &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; are unsupported.</target>
        </trans-unit>
        <trans-unit id="3550917d985bcf43d7da8e759629c3801030e94d" translate="yes" xml:space="preserve">
          <source>Left bracket, i.e. &quot;(&quot;</source>
          <target state="translated">左括弧、すなわち「(</target>
        </trans-unit>
        <trans-unit id="4e329848308f51ed814ae607db0d48ff6b12bc29" translate="yes" xml:space="preserve">
          <source>Left operand with another assignment operator</source>
          <target state="translated">別の代入演算子を持つ左オペランド</target>
        </trans-unit>
        <trans-unit id="5ab1c2256c381beee948a90f36638f4339d1df90" translate="yes" xml:space="preserve">
          <source>Left shift</source>
          <target state="translated">左シフト</target>
        </trans-unit>
        <trans-unit id="d7274e5e97e51f89dcc992f63e442d7583589718" translate="yes" xml:space="preserve">
          <source>Left shift assignment</source>
          <target state="translated">左シフト配置</target>
        </trans-unit>
        <trans-unit id="39d5c755451f34abdf8a7a8468ab7b426868dc27" translate="yes" xml:space="preserve">
          <source>Left shift assignment (&lt;code&gt;x &amp;lt;&amp;lt;= y&lt;/code&gt;)</source>
          <target state="translated">左シフト割り当て（ &lt;code&gt;x &amp;lt;&amp;lt;= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="10260cd617377a3686a745d1ef1f4a169149adf4" translate="yes" xml:space="preserve">
          <source>Left shift assignment.</source>
          <target state="translated">左シフト勤務。</target>
        </trans-unit>
        <trans-unit id="ea928326b4adac815fd38c1db5569eadf2096576" translate="yes" xml:space="preserve">
          <source>Left values are the destination of an assignment.</source>
          <target state="translated">左の値は割り当て先です。</target>
        </trans-unit>
        <trans-unit id="d44ab597e37bc45df68eb94fbe2d47be14440f3f" translate="yes" xml:space="preserve">
          <source>Left-associativity (left-to-right) means that it is processed as &lt;code&gt;(a OP b) OP c&lt;/code&gt;, while right-associativity (right-to-left) means it is interpreted as &lt;code&gt;a OP (b OP c)&lt;/code&gt;. Assignment operators are right-associative, so you can write:</source>
          <target state="translated">左連想性（左から右）は &lt;code&gt;(a OP b) OP c&lt;/code&gt; として処理されることを意味し、右連想性（右から左）は &lt;code&gt;a OP (b OP c)&lt;/code&gt; として解釈されることを意味します。代入演算子は右結合なので、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="58e547eac6fd0cb111e95248a40a03f759cf2091" translate="yes" xml:space="preserve">
          <source>Left-associativity (left-to-right) means that it is processed as &lt;code&gt;(a OP&lt;sub&gt;1&lt;/sub&gt; b) OP&lt;sub&gt;2&lt;/sub&gt; c&lt;/code&gt;, while right-associativity (right-to-left) means it is interpreted as &lt;code&gt;a OP&lt;sub&gt;1&lt;/sub&gt; (b OP&lt;sub&gt;2&lt;/sub&gt; c)&lt;/code&gt;. Assignment operators are right-associative, so you can write:</source>
          <target state="translated">Left-associativity (left-to-right) means that it is processed as &lt;code&gt;(a OP&lt;sub&gt;1&lt;/sub&gt; b) OP&lt;sub&gt;2&lt;/sub&gt; c&lt;/code&gt; , while right-associativity (right-to-left) means it is interpreted as &lt;code&gt;a OP&lt;sub&gt;1&lt;/sub&gt; (b OP&lt;sub&gt;2&lt;/sub&gt; c)&lt;/code&gt; . Assignment operators are right-associative, so you can write:</target>
        </trans-unit>
        <trans-unit id="8a0ac8d169f689f3a2cbd1f0c5a1ee04afb63d6f" translate="yes" xml:space="preserve">
          <source>Left-hand-side expressions</source>
          <target state="translated">左側の表現</target>
        </trans-unit>
        <trans-unit id="602f77beb646fe8826dc6d59330122f698aa5b2e" translate="yes" xml:space="preserve">
          <source>Legacy generator example</source>
          <target state="translated">レガシージェネレータの例</target>
        </trans-unit>
        <trans-unit id="eb1a6ef6b2d5a96b637c6e2bd94b083c753413f8" translate="yes" xml:space="preserve">
          <source>Legacy generator methods</source>
          <target state="translated">レガシージェネレーターのメソッド</target>
        </trans-unit>
        <trans-unit id="8af3ba8c920b432b9c13eb766c3f0c0bf790a870" translate="yes" xml:space="preserve">
          <source>Legacy generator objects</source>
          <target state="translated">レガシージェネレータオブジェクト</target>
        </trans-unit>
        <trans-unit id="1b8061cca5a68493c20cda07ce8f656eb979a139" translate="yes" xml:space="preserve">
          <source>Legacy generators</source>
          <target state="translated">レガシージェネレータ</target>
        </trans-unit>
        <trans-unit id="0f9e45be357f889577f439ce926c901f589cb3af" translate="yes" xml:space="preserve">
          <source>Length property whose value is 0.</source>
          <target state="translated">値が0の長さプロパティです。</target>
        </trans-unit>
        <trans-unit id="8b0e154f6fbf4b8216767e2eb6b9ecd7e1492256" translate="yes" xml:space="preserve">
          <source>Length property whose value is 1.</source>
          <target state="translated">値が1のLengthプロパティです。</target>
        </trans-unit>
        <trans-unit id="4d0a93ec5c62c053a0e24faecae6b5343849485f" translate="yes" xml:space="preserve">
          <source>Length property whose value is always 1 (number of constructor arguments).</source>
          <target state="translated">値が常に 1 (コンストラクタの引数の数)である Length プロパティ。</target>
        </trans-unit>
        <trans-unit id="9f9f32c700bfddfe21bbb527814fc47e1731c5d0" translate="yes" xml:space="preserve">
          <source>Less Than</source>
          <target state="translated">未満</target>
        </trans-unit>
        <trans-unit id="32df0a960ce3356d1cfe450da55371bc7bcb69d0" translate="yes" xml:space="preserve">
          <source>Less Than Or Equal</source>
          <target state="translated">等しくない</target>
        </trans-unit>
        <trans-unit id="40dc2ee0e264136024068cd0794698032c7ad458" translate="yes" xml:space="preserve">
          <source>Less than (&lt;code&gt;a &amp;lt; b&lt;/code&gt;)</source>
          <target state="translated">より小さい（ &lt;code&gt;a &amp;lt; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="55c66b888888499ad1dfb866fdff6519b6d2ce5f" translate="yes" xml:space="preserve">
          <source>Less than operator (&amp;lt;)</source>
          <target state="translated">小なり演算子（&amp;lt;）</target>
        </trans-unit>
        <trans-unit id="2f0d73ebb0c45ad4a8dbee6c9fcfbabbb55b0f89" translate="yes" xml:space="preserve">
          <source>Less than operator.</source>
          <target state="translated">オペレーター以下。</target>
        </trans-unit>
        <trans-unit id="a302a77ca46cc23064776fa25ec403984a286bf0" translate="yes" xml:space="preserve">
          <source>Less than or equal (&lt;code&gt;a &amp;lt;= b&lt;/code&gt;)</source>
          <target state="translated">以下（ &lt;code&gt;a &amp;lt;= b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4b9f58eec281d9c0ba0a0607187b98b54044cfec" translate="yes" xml:space="preserve">
          <source>Less than or equal operator (&amp;lt;=)</source>
          <target state="translated">より小さいか等しい演算子（&amp;lt;=）</target>
        </trans-unit>
        <trans-unit id="3179bc9de0a9648440c95b1257803b6f4aa7b760" translate="yes" xml:space="preserve">
          <source>Less than or equal operator.</source>
          <target state="translated">以下の演算子。</target>
        </trans-unit>
        <trans-unit id="75dec6da0b5023d14b33a11fe322c77f47c4e401" translate="yes" xml:space="preserve">
          <source>Let us look into the above code step by step.</source>
          <target state="translated">上記のコードを一歩一歩調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="e61c0d9498d37365ae7a501fc96cdef6330c51ff" translate="yes" xml:space="preserve">
          <source>Let's checkout below how to delete an Object from a Set.</source>
          <target state="translated">以下では、セットからオブジェクトを削除する方法を確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="a256335e0c569736a039cec7785923ac4619bbef" translate="yes" xml:space="preserve">
          <source>Let's consider one more case.</source>
          <target state="translated">もう一つのケースを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="097fb1a76af3f7fa494599f7ef1303e112e2e8bf" translate="yes" xml:space="preserve">
          <source>Let's decompose a &quot;traditional function&quot; down to the simplest &quot;arrow function&quot; step-by-step:</source>
          <target state="translated">伝統的な関数」を、最もシンプルな「矢印関数」まで段階的に分解してみましょう。</target>
        </trans-unit>
        <trans-unit id="6e77fa97f0c24aa56b75afd6280462dad845bf54" translate="yes" xml:space="preserve">
          <source>Let's generate a list of words from a list of sentences.</source>
          <target state="translated">文章のリストから単語のリストを生成してみましょう。</target>
        </trans-unit>
        <trans-unit id="b9a168e2d3e45553b7bda64e54155b467277f279" translate="yes" xml:space="preserve">
          <source>Let's see how the same code behaves in strict mode. Instead of returning &lt;code&gt;false&lt;/code&gt;, the statement raises a &lt;code&gt;SyntaxError&lt;/code&gt;.</source>
          <target state="translated">同じコードがストリクトモードでどのように動作するかを見てみましょう。ステートメントは &lt;code&gt;false&lt;/code&gt; を返す代わりに、 &lt;code&gt;SyntaxError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="ce461e8eb1b6590d9c10317362f43850ac28b48e" translate="yes" xml:space="preserve">
          <source>Let's take an example where we have the following hierarchy:</source>
          <target state="translated">以下のような階層がある場合を例に考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f6b1bf22849af13b2f0efc6a4a757f7779cdff64" translate="yes" xml:space="preserve">
          <source>Let's try to define the cases in which re-assignment of the original constructor will play a major role and when it will be one extra unused line of code.</source>
          <target state="translated">元のコンストラクタの再割り当てが大きな役割を果たす場合と、使われていないコードが1行増える場合を定義してみましょう。</target>
        </trans-unit>
        <trans-unit id="15c29f1b1524edd0f78d1dfc4229f770d1697d80" translate="yes" xml:space="preserve">
          <source>Let's try to define the cases in which re-assignment of the original constructor will play a major role, and when it will be one superfluous line of code.</source>
          <target state="translated">元のコンストラクタの再割り当てが大きな役割を果たす場合と、1行の余分なコードになる場合を定義してみましょう。</target>
        </trans-unit>
        <trans-unit id="2a3d90294e5a1e21d9e3e9d1fe99e3e1da56c584" translate="yes" xml:space="preserve">
          <source>Lexical grammar</source>
          <target state="translated">語彙文法</target>
        </trans-unit>
        <trans-unit id="76d8e88746aed29c5732084d86f85c42f51868b5" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.</source>
          <target state="translated">クリエイティブ・コモンズ 表示-継承ライセンス v2.5以降でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="ecb8ea108e7fb941470afc0e3af1ac1baf6a1e0e" translate="yes" xml:space="preserve">
          <source>Licensing note</source>
          <target state="translated">ライセンスノート</target>
        </trans-unit>
        <trans-unit id="2547adb84f5a1797842e48834e0968b78669a451" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; block, the &lt;code&gt;&lt;var&gt;condition&lt;/var&gt;&lt;/code&gt; block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</source>
          <target state="translated">Like the &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; block, the &lt;code&gt;&lt;var&gt;condition&lt;/var&gt;&lt;/code&gt; block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</target>
        </trans-unit>
        <trans-unit id="db7db35c4dbf8be45e2b497be99beed0bbb897fe" translate="yes" xml:space="preserve">
          <source>Like the &lt;em&gt;initialization&lt;/em&gt; block, the &lt;em&gt;condition&lt;/em&gt; block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</source>
          <target state="translated">&lt;em&gt;初期化&lt;/em&gt;ブロックと同様に、&lt;em&gt;条件&lt;/em&gt;ブロックもオプションです。この式を省略する場合は、無限ループを作成しないように、本体のループを必ず解除する必要があります。</target>
        </trans-unit>
        <trans-unit id="3b6e5620970fc24f2fc3597154381f339b82c1d8" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; yields &lt;code&gt;-3&lt;/code&gt;, because the sign is preserved:</source>
          <target state="translated">同様に、符号が保持されるため、 &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; は &lt;code&gt;-3&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="aedf2b5b9df70af978abb98ed16901998bfa00a8" translate="yes" xml:space="preserve">
          <source>Likewise, if the body requires&lt;strong&gt; additional lines&lt;/strong&gt; of processing, you'll need to re-introduce brackets &lt;strong&gt;PLUS the &quot;return&quot;&lt;/strong&gt; (arrow functions do not magically guess what or when you want to &quot;return&quot;):</source>
          <target state="translated">Likewise, if the body requires&lt;strong&gt; additional lines&lt;/strong&gt; of processing, you'll need to re-introduce brackets &lt;strong&gt;PLUS the &quot;return&quot;&lt;/strong&gt; (arrow functions do not magically guess what or when you want to &quot;return&quot;):</target>
        </trans-unit>
        <trans-unit id="83d037e7f68258c3071cb41e229a9addf7ab1b28" translate="yes" xml:space="preserve">
          <source>Likewise, to invoke strict mode for a function, put the &lt;em&gt;exact&lt;/em&gt; statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; (or &lt;code&gt;'use strict';&lt;/code&gt;) in the function's body before any other statements.</source>
          <target state="translated">同様に、関数に対してstrictモードを呼び出すには、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; という&lt;em&gt;正確な&lt;/em&gt;ステートメントを入力します。（または &lt;code&gt;'use strict';&lt;/code&gt; ）他のステートメントの前の関数本体で。</target>
        </trans-unit>
        <trans-unit id="5a31dca72ac86af075288f93494ce671cfae7b44" translate="yes" xml:space="preserve">
          <source>Limin Zhu, Brian Terlson and Microsoft Edge Team: &lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond/&quot;&gt;Previewing ES6 Modules and more from ES2015, ES2016 and beyond&lt;/a&gt;</source>
          <target state="translated">Limin Zhu, Brian Terlson and Microsoft Edge Team: &lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond/&quot;&gt;Previewing ES6 Modules and more from ES2015, ES2016 and beyond&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2abd199292d800fa3a80bd3c37bdfccc94f580e6" translate="yes" xml:space="preserve">
          <source>Line Feed</source>
          <target state="translated">ラインフィード</target>
        </trans-unit>
        <trans-unit id="8063848dd725bd56f98d4d78213b9bcdc4a7dc13" translate="yes" xml:space="preserve">
          <source>Line Separator</source>
          <target state="translated">ラインセパレータ</target>
        </trans-unit>
        <trans-unit id="416c5c2bab7e468b1cc70ef96bfcfdf5d2ae4c96" translate="yes" xml:space="preserve">
          <source>Line breaks</source>
          <target state="translated">改行</target>
        </trans-unit>
        <trans-unit id="02790dc9cfdfc267dabc9ecbdafb6cb09aa3210b" translate="yes" xml:space="preserve">
          <source>Line number in file that raised this error.</source>
          <target state="translated">このエラーを発生させたファイルの行番号。</target>
        </trans-unit>
        <trans-unit id="e1c65d1701b98a1496e34b62a1d5a4eb0a8dbabf" translate="yes" xml:space="preserve">
          <source>Line number in file that raised this error. Inherited from &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーが発生したファイルの行番号。&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="1717aa35763a62c52c6cb8ab288a48bcaa9cb242" translate="yes" xml:space="preserve">
          <source>Line number in file that raised this error. Inherited from &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーが発生したファイルの行番号。&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="353341e850ac457bc0d81c175649fba5a8d94e0f" translate="yes" xml:space="preserve">
          <source>Line tabulation</source>
          <target state="translated">ライン集計</target>
        </trans-unit>
        <trans-unit id="c5b93f1599cfea8a5bf1876a65571fc997066bd9" translate="yes" xml:space="preserve">
          <source>Line terminator characters</source>
          <target state="translated">ライン終端文字</target>
        </trans-unit>
        <trans-unit id="aa3ba830ebf0f8ac5651680deb0ea80de3efc5f2" translate="yes" xml:space="preserve">
          <source>Line terminators</source>
          <target state="translated">ラインターミネーター</target>
        </trans-unit>
        <trans-unit id="b2a2f02d4365575afb9208fc575114b2157b9bb8" translate="yes" xml:space="preserve">
          <source>Links (sets the constructor of) the newly created object to another object by setting the other object as its parent prototype;</source>
          <target state="translated">他のオブジェクトを親プロトタイプとすることで、新しく作成されたオブジェクトと他のオブジェクトをリンク(そのコンストラクタを設定)します。</target>
        </trans-unit>
        <trans-unit id="d1b0d288e4a7ac8ca8db710117e546db4b95c92e" translate="yes" xml:space="preserve">
          <source>Links created with the &lt;code&gt;link()&lt;/code&gt; method become elements in the &lt;code&gt;links&lt;/code&gt; array of the &lt;code&gt;document&lt;/code&gt; object. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/links&quot;&gt;&lt;code&gt;document.links&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;link()&lt;/code&gt; メソッドで作成されたリンクは、 &lt;code&gt;document&lt;/code&gt; オブジェクトの &lt;code&gt;links&lt;/code&gt; 配列の要素になります。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/links&quot;&gt; &lt;code&gt;document.links&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c3a042898163bd32ec015d60ede23b01d0751fd" translate="yes" xml:space="preserve">
          <source>Links created with the &lt;code&gt;link()&lt;/code&gt; method become elements in the &lt;code&gt;links&lt;/code&gt; array of the &lt;code&gt;document&lt;/code&gt; object. See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Document/links&quot;&gt;&lt;code&gt;document.links&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Links created with the &lt;code&gt;link()&lt;/code&gt; method become elements in the &lt;code&gt;links&lt;/code&gt; array of the &lt;code&gt;document&lt;/code&gt; object. See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Document/links&quot;&gt; &lt;code&gt;document.links&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa6e00a67dfa744b3fd8a96d04fc716d5fb177de" translate="yes" xml:space="preserve">
          <source>List of errors</source>
          <target state="translated">エラー一覧</target>
        </trans-unit>
        <trans-unit id="6e9f153c19568b783feed4f41257792e54a52509" translate="yes" xml:space="preserve">
          <source>Literal notation and constructor</source>
          <target state="translated">リテラル表記とコンストラクタ</target>
        </trans-unit>
        <trans-unit id="df09025c15b71245a7836ec9ea8cd72c09fd934a" translate="yes" xml:space="preserve">
          <source>Literal syntax</source>
          <target state="translated">リテラル構文</target>
        </trans-unit>
        <trans-unit id="6f3870dfe8c8aad7b4dc942acda1bb8b9c1e8958" translate="yes" xml:space="preserve">
          <source>Literal, constructor, and factory notations are possible:</source>
          <target state="translated">リテラル、コンストラクタ、ファクトリー表記が可能です。</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="c165a985fde914a6d808548fe0ff08989ad3a241" translate="yes" xml:space="preserve">
          <source>Little known fact: &lt;code&gt;Array.prototype&lt;/code&gt; itself is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Array.prototype&lt;/code&gt; 知られていない事実：Array.prototype自体は&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;です：</target>
        </trans-unit>
        <trans-unit id="d81b072a609cb829f45333cb83e086a659ba9738" translate="yes" xml:space="preserve">
          <source>Living Standard</source>
          <target state="translated">生活水準</target>
        </trans-unit>
        <trans-unit id="c91f6a1a8d1cf38d8d158fef6da1fe8a36f5eb93" translate="yes" xml:space="preserve">
          <source>Loading WebAssembly code, using the &lt;a href=&quot;webassembly/instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;webassembly/instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt;関数を使用して、WebAssemblyコードをロードします。</target>
        </trans-unit>
        <trans-unit id="3e6a247fd789a5192828663a4d93e87c54002101" translate="yes" xml:space="preserve">
          <source>Loading an image with XHR</source>
          <target state="translated">XHR での画像の読み込み</target>
        </trans-unit>
        <trans-unit id="3493471d212e62809e63296faf35533fc451d338" translate="yes" xml:space="preserve">
          <source>Locale identification and negotiation</source>
          <target state="translated">ロケールの識別と交渉</target>
        </trans-unit>
        <trans-unit id="2dbe8d7c8898fa5020ae2221efb3961dc068f159" translate="yes" xml:space="preserve">
          <source>Locale negotiation</source>
          <target state="translated">ロケール交渉</target>
        </trans-unit>
        <trans-unit id="2bc25af59d1441fccaa49517d3f4e24b6b3a2775" translate="yes" xml:space="preserve">
          <source>Log text</source>
          <target state="translated">ログテキスト</target>
        </trans-unit>
        <trans-unit id="eb0246ab597f101100cd98bf79e39c235710b3bd" translate="yes" xml:space="preserve">
          <source>Logging the contents of a &lt;code&gt;Set&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトの内容のロギング</target>
        </trans-unit>
        <trans-unit id="fe7acd4756c808c0546f76c1d0e556f665dfedcb" translate="yes" xml:space="preserve">
          <source>Logging the contents of a Set object</source>
          <target state="translated">セットオブジェクトの内容をログに記録する</target>
        </trans-unit>
        <trans-unit id="ba8b87ccf6093ed4cdf22d73250f879496fe82c1" translate="yes" xml:space="preserve">
          <source>Logging the contents of a typed array</source>
          <target state="translated">型付き配列の内容をログに記録する</target>
        </trans-unit>
        <trans-unit id="c5d5c5fb2a8798e4f962780fba63386de96b07b6" translate="yes" xml:space="preserve">
          <source>Logical AND</source>
          <target state="translated">論理 AND</target>
        </trans-unit>
        <trans-unit id="71cf2f6080983225905de36905505154a820ef28" translate="yes" xml:space="preserve">
          <source>Logical AND (&amp;amp;&amp;amp;)</source>
          <target state="translated">論理AND（&amp;amp;&amp;amp;）</target>
        </trans-unit>
        <trans-unit id="c682b147edc0ff986803f250255168d7cc20e0f9" translate="yes" xml:space="preserve">
          <source>Logical AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">論理AND（ &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="109b4017ee11f0a03112a188ef1036525a53b900" translate="yes" xml:space="preserve">
          <source>Logical AND.</source>
          <target state="translated">論理的なAND。</target>
        </trans-unit>
        <trans-unit id="e7e803ba6df9ebf5f542bc2b7ce91db2dc559f7e" translate="yes" xml:space="preserve">
          <source>Logical NOT</source>
          <target state="translated">論理 NOT</target>
        </trans-unit>
        <trans-unit id="d2374f9ccca8d3bbbfdb8c395f8771438da0f191" translate="yes" xml:space="preserve">
          <source>Logical NOT (!)</source>
          <target state="translated">論理的なNOT(!</target>
        </trans-unit>
        <trans-unit id="6d19dfcd9f3d114d74ecfa9d75fca8de01c9fbea" translate="yes" xml:space="preserve">
          <source>Logical NOT (&lt;code&gt;!&lt;/code&gt;)</source>
          <target state="translated">論理否定（ &lt;code&gt;!&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="474ac7621d0c9fac077b4360d120fcec72cfee3e" translate="yes" xml:space="preserve">
          <source>Logical NOT operator.</source>
          <target state="translated">論理的なNOT演算子。</target>
        </trans-unit>
        <trans-unit id="e9b0aefdf7ed2c67abbfc572bbc5743979450674" translate="yes" xml:space="preserve">
          <source>Logical OR</source>
          <target state="translated">論理和</target>
        </trans-unit>
        <trans-unit id="b4cc4ec7b525ae12e6d3ec39068869ce695094b8" translate="yes" xml:space="preserve">
          <source>Logical OR (&lt;code&gt;||&lt;/code&gt;)</source>
          <target state="translated">論理OR（ &lt;code&gt;||&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3c2b7ba8c479287d3a4eec45ee8b468ffed65e9a" translate="yes" xml:space="preserve">
          <source>Logical OR (||)</source>
          <target state="translated">論理和 (||)</target>
        </trans-unit>
        <trans-unit id="07dfdb18def1b141fb32dd8352fb998a138625d3" translate="yes" xml:space="preserve">
          <source>Logical OR.</source>
          <target state="translated">論理的なOR。</target>
        </trans-unit>
        <trans-unit id="65eac6118ebdd55aa38b41f70efdf532e567ffd8" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="a5da835bb3de6e8855950138a28dea23921e5aaa" translate="yes" xml:space="preserve">
          <source>Logical operators</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="6202ce53795218c63434b0f094e3fb5b2ca0c343" translate="yes" xml:space="preserve">
          <source>Logical operators are typically used with &lt;a href=&quot;../global_objects/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; (logical) values. When they are, they return a Boolean value. However, the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.</source>
          <target state="translated">論理演算子は通常、&lt;a href=&quot;../global_objects/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;（論理）値とともに使用されます。ある場合、ブール値を返します。ただし、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;||&lt;/code&gt; 演算子は実際には指定されたオペランドの1つの値を返すため、これらの演算子が非ブール値で使用された場合、非ブール値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="7cb3dab21dceb50db9b6bd20053a72d2499ed94d" translate="yes" xml:space="preserve">
          <source>Logical operators are typically used with boolean (logical) values, and when they are, they return a boolean value.</source>
          <target state="translated">論理演算子は通常、ブーリアン(論理)値と一緒に使用され、その時はブーリアン値を返します。</target>
        </trans-unit>
        <trans-unit id="1de39c4c352bfa494121c02e60c85c0710d936cc" translate="yes" xml:space="preserve">
          <source>Long literal strings</source>
          <target state="translated">長いリテラル文字列</target>
        </trans-unit>
        <trans-unit id="aaed96df1d8ac53a4a5e240799bfbd3615c200b1" translate="yes" xml:space="preserve">
          <source>Looking at the code snippets above, &lt;code&gt;6 / 3 / 2&lt;/code&gt; is the same as &lt;code&gt;(6 / 3) / 2&lt;/code&gt; because division is left-associative. Exponentiation, on the other hand, is right-associative, so &lt;code&gt;2 ** 3 ** 2&lt;/code&gt; is the same as &lt;code&gt;2 ** (3 ** 2)&lt;/code&gt;. Thus, doing &lt;code&gt;(2 ** 3) ** 2&lt;/code&gt; changes the order and results in the 64 seen in the table above.</source>
          <target state="translated">Looking at the code snippets above, &lt;code&gt;6 / 3 / 2&lt;/code&gt; is the same as &lt;code&gt;(6 / 3) / 2&lt;/code&gt; because division is left-associative. Exponentiation, on the other hand, is right-associative, so &lt;code&gt;2 ** 3 ** 2&lt;/code&gt; is the same as &lt;code&gt;2 ** (3 ** 2)&lt;/code&gt; . Thus, doing &lt;code&gt;(2 ** 3) ** 2&lt;/code&gt; changes the order and results in the 64 seen in the table above.</target>
        </trans-unit>
        <trans-unit id="5550ed243d079c4325b071fff5ddc848497a48b3" translate="yes" xml:space="preserve">
          <source>Looping with &lt;code&gt;codePointAt()&lt;/code&gt;</source>
          <target state="translated">Looping with &lt;code&gt;codePointAt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="translated">M</target>
        </trans-unit>
        <trans-unit id="47f92b0f2157d1bcafd77ad8eaac1469b67f6377" translate="yes" xml:space="preserve">
          <source>Make sure the object you are inspecting isn't actually &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">検査しているオブジェクトが実際に&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; で&lt;/a&gt;ないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="d3e8923256c2075fcd48662465eb7bd4338549a6" translate="yes" xml:space="preserve">
          <source>Make these helper functions into ASM.JS module; then, you have a true performance masterpiece. Situations like these are exactly what ASM.JS was designed for.</source>
          <target state="translated">これらのヘルパー関数をASM.JSモジュールにすることで、真のパフォーマンスを発揮することができます。このような状況は、まさにASM.JSのために設計されたものです。</target>
        </trans-unit>
        <trans-unit id="10e006600917ceb77cac8d44689476f5a602046a" translate="yes" xml:space="preserve">
          <source>Making &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; simpler</source>
          <target state="translated">作る &lt;code&gt;eval&lt;/code&gt; と &lt;code&gt;arguments&lt;/code&gt; 単純</target>
        </trans-unit>
        <trans-unit id="94f25c4bd4be3a85e0ccc787dbddec0f1b6ad397" translate="yes" xml:space="preserve">
          <source>Making decisions in your code &amp;mdash; conditionals</source>
          <target state="translated">コードでの決定&amp;mdash;条件付き</target>
        </trans-unit>
        <trans-unit id="2ec214fd963d6f6503131ec2d3759b6aa9845b31" translate="yes" xml:space="preserve">
          <source>Malformed URI</source>
          <target state="translated">マルフォームされたURI</target>
        </trans-unit>
        <trans-unit id="364ca1cca718a82b0e8b9aba612af2221c8197a7" translate="yes" xml:space="preserve">
          <source>Malformed formal parameter</source>
          <target state="translated">不正な形式のフォーマルパラメータ</target>
        </trans-unit>
        <trans-unit id="9793cecc7913a283a6412227868c14a226159013" translate="yes" xml:space="preserve">
          <source>Manipulating DOM nodes</source>
          <target state="translated">DOM ノードの操作</target>
        </trans-unit>
        <trans-unit id="2a984b00528b674a36d1093b08804d2f9cf3dfb7" translate="yes" xml:space="preserve">
          <source>Many JavaScript types have tags by default:</source>
          <target state="translated">多くのJavaScriptの型はデフォルトでタグを持っています。</target>
        </trans-unit>
        <trans-unit id="ee6228db5716ce834618968b5075dfb7ddf8790b" translate="yes" xml:space="preserve">
          <source>Many implementations have not adopted this behavior as of 2013, and because older browsers must be supported, &lt;strong&gt;always specify a radix&lt;/strong&gt;.</source>
          <target state="translated">2013年の時点では、多くの実装でこの動作は採用されていません。古いブラウザーをサポートする必要があるため、&lt;strong&gt;常に基数を指定してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b42254898bdd2749657b580d6eaad096204e2f1f" translate="yes" xml:space="preserve">
          <source>Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, &lt;strong&gt;always specify a radix&lt;/strong&gt;.</source>
          <target state="translated">Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, &lt;strong&gt;always specify a radix&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="38074f184337e8c0f2b5e1282b3fa754c19a65e5" translate="yes" xml:space="preserve">
          <source>Many methods on the JavaScript Array object are designed to be generally applied to all objects which &amp;ldquo;look like&amp;rdquo; Arrays. That is, they can be used on any object which has a &lt;code&gt;length&lt;/code&gt; property, and which can usefully be accessed using numeric property names (as with &lt;code&gt;array[5]&lt;/code&gt; indexing). Some methods, such as &lt;a href=&quot;join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt;, only read the &lt;code&gt;length&lt;/code&gt; and numeric properties of the object they are called on. Others, like &lt;a href=&quot;reverse&quot;&gt;&lt;code&gt;reverse&lt;/code&gt;&lt;/a&gt;, require that the object's numeric properties and &lt;code&gt;length&lt;/code&gt; be mutable; these methods can therefore not be called on objects like &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, which does not permit its &lt;code&gt;length&lt;/code&gt; property or synthesized numeric properties to be set.</source>
          <target state="translated">JavaScript配列オブジェクトの多くのメソッドは、配列のように見えるすべてのオブジェクトに一般的に適用されるように設計されています。つまり、それらは &lt;code&gt;length&lt;/code&gt; プロパティを持ち、数値のプロパティ名を使用して（ &lt;code&gt;array[5]&lt;/code&gt; インデックスと同様に）便利にアクセスできる任意のオブジェクトで使用できます。&lt;a href=&quot;join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt;などの一部のメソッドは、呼び出されたオブジェクトの &lt;code&gt;length&lt;/code&gt; と数値のプロパティのみを読み取ります。その他、&lt;a href=&quot;reverse&quot;&gt; &lt;code&gt;reverse&lt;/code&gt; の&lt;/a&gt;ように、オブジェクトの数値プロパティと &lt;code&gt;length&lt;/code&gt; が変更可能である必要があります。したがって、これらのメソッドは、その &lt;code&gt;length&lt;/code&gt; プロパティまたは合成された数値プロパティの設定を許可しない&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;などのオブジェクトでは呼び出すことができません。</target>
        </trans-unit>
        <trans-unit id="d58dcdbca1db135797115b71ecb2bbc85c55cb09" translate="yes" xml:space="preserve">
          <source>Many of the methods used in Typed Arrays can be polyfilled using the methods present in regular Javascript Arrays. The following snippet of JavaScript demonstrates how you might polyfill any missing Typed Array methods.</source>
          <target state="translated">型付き配列で使用されるメソッドの多くは、通常のJavascriptの配列に存在するメソッドを使用してポリフィルすることができます。次のJavaScriptのスニペットは、欠落している型付き配列のメソッドをポリフィルする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="81cc26193b1e4336b0213cd69657b3adaf553a80" translate="yes" xml:space="preserve">
          <source>Map and Set bug at Mozilla</source>
          <target state="translated">Mozilla のマップとセットのバグ</target>
        </trans-unit>
        <trans-unit id="0c7c901071b1c00f4611079f4bbd2fd7999ef857" translate="yes" xml:space="preserve">
          <source>Map function to call on every element of the array.</source>
          <target state="translated">配列の各要素に対して呼び出すマップ関数。</target>
        </trans-unit>
        <trans-unit id="b87f9f33dc8f896320771530ffe039e26cf001d2" translate="yes" xml:space="preserve">
          <source>Map function to call on every element of the typed array.</source>
          <target state="translated">型付き配列の各要素を呼び出すためのマップ関数.</target>
        </trans-unit>
        <trans-unit id="30333d96616fc331544ac0dc8f16d0a1ecc2201f" translate="yes" xml:space="preserve">
          <source>Map.@@species</source>
          <target state="translated">Map.@@species</target>
        </trans-unit>
        <trans-unit id="f7784cb6fc12c06b4f6d131ad6c04f7c4c5df907" translate="yes" xml:space="preserve">
          <source>Map.prototype</source>
          <target state="translated">Map.prototype</target>
        </trans-unit>
        <trans-unit id="c8b79d82821254b74dc67b71d6b561469594cfc4" translate="yes" xml:space="preserve">
          <source>Mapped array contains undefined</source>
          <target state="translated">マップされた配列には未定義のものが含まれています。</target>
        </trans-unit>
        <trans-unit id="66f9585dae47b28dfd292e935863e699966c0911" translate="yes" xml:space="preserve">
          <source>Mapping a typed array of numbers using a function containing an argument</source>
          <target state="translated">引数を含む関数を用いた型付き数値配列のマッピング</target>
        </trans-unit>
        <trans-unit id="ffa60dcf6a3fb79d04c4e1c419c7b4dc4b1e51a9" translate="yes" xml:space="preserve">
          <source>Mapping a typed array to a typed array of square roots</source>
          <target state="translated">型付き配列から平方根の型付き配列へのマッピング</target>
        </trans-unit>
        <trans-unit id="7f4b091aae29ef01ed046161cdb2a58dcf35fbda" translate="yes" xml:space="preserve">
          <source>Mapping an array of numbers to an array of square roots</source>
          <target state="translated">数の配列を平方根の配列にマッピングする</target>
        </trans-unit>
        <trans-unit id="9ddd45553e91cc7f306d0482f6ea3dea6fe4cbf8" translate="yes" xml:space="preserve">
          <source>Mapping an array of numbers using a function containing an argument</source>
          <target state="translated">引数を含む関数を用いた数値の配列のマッピング</target>
        </trans-unit>
        <trans-unit id="f00191feebbe32a730ad9b1ef766f519bdbeae2d" translate="yes" xml:space="preserve">
          <source>Maps can be iterated using a &lt;code&gt;for..of&lt;/code&gt; loop:</source>
          <target state="translated">マップは、 &lt;code&gt;for..of&lt;/code&gt; ループを使用して反復できます。</target>
        </trans-unit>
        <trans-unit id="9df8b64c06d326e3b7f8204bcb4211e4e9a17aa5" translate="yes" xml:space="preserve">
          <source>Maps can be iterated using the &lt;a href=&quot;map/foreach&quot;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">Maps can be iterated using the &lt;a href=&quot;map/foreach&quot;&gt; &lt;code&gt;forEach()&lt;/code&gt; &lt;/a&gt; method:</target>
        </trans-unit>
        <trans-unit id="af817d8d64732af5aca786014389609694f431c2" translate="yes" xml:space="preserve">
          <source>Maps can be iterated using the &lt;code&gt;forEach()&lt;/code&gt; method:</source>
          <target state="translated">マップは、 &lt;code&gt;forEach()&lt;/code&gt; メソッドを使用して反復できます。</target>
        </trans-unit>
        <trans-unit id="bee40c7f75aa75e13050db8184766163cdd58c7f" translate="yes" xml:space="preserve">
          <source>Maps can be merged with Arrays, too:</source>
          <target state="translated">マップはArraysと統合することもできます。</target>
        </trans-unit>
        <trans-unit id="27b76325198b0619788fc18c507dc9775f9e9fab" translate="yes" xml:space="preserve">
          <source>Maps can be merged, maintaining key uniqueness:</source>
          <target state="translated">マップは、キーとなる一意性を維持したまま結合することができます。</target>
        </trans-unit>
        <trans-unit id="10af6decdf3b20f0fe89ccdf948ecd7e269a58f0" translate="yes" xml:space="preserve">
          <source>Marks a block of statements to try, and specifies a response, should an exception be thrown.</source>
          <target state="translated">試すステートメントのブロックをマークし、例外がスローされた場合のレスポンスを指定します。</target>
        </trans-unit>
        <trans-unit id="d264222cc33aa1835f889940932a3f65dd5adbd8" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; and remembers the match. These are called capturing groups.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; に一致し、一致を記憶します。これらはキャプチャグループと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3a39d7d32c27c77551e70ff0b897043f37cf59f2" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; but does not remember the match. These are called non-capturing groups. The matched substring cannot be recalled from the resulting array's elements &lt;code&gt;[1], ..., [n]&lt;/code&gt; or from the predefined &lt;code&gt;RegExp&lt;/code&gt; object's properties &lt;code&gt;$1, ..., $9&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; に一致しますが、一致を記憶しません。これらは、非キャプチャグループと呼ばれます。一致した部分文字列は、結果の配列の要素 &lt;code&gt;[1], ..., [n]&lt;/code&gt; または事前定義された &lt;code&gt;RegExp&lt;/code&gt; オブジェクトのプロパティ &lt;code&gt;$1, ..., $9&lt;/code&gt; から呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="02752d003d228562b52e2e7337da295d18ad82a5" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; only if &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; is followed by &lt;code&gt;&lt;em&gt;y&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; の後に &lt;code&gt;&lt;em&gt;y&lt;/em&gt;&lt;/code&gt; が続く場合にのみ &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; に一致します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d5cfd3ad68268178822ae001e4225881ffac2642" translate="yes" xml:space="preserve">
          <source>Matches &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; only if &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; is not followed by &lt;code&gt;&lt;em&gt;y&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; の後に &lt;code&gt;&lt;em&gt;y&lt;/em&gt;&lt;/code&gt; がない場合にのみ、 &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; に一致します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="882c3cff02bb35ee36343298ae6d099fc6597a04" translate="yes" xml:space="preserve">
          <source>Matches a NUL character. Do not follow this with another digit.</source>
          <target state="translated">NUL文字にマッチします。これを他の桁に続けてはいけません。</target>
        </trans-unit>
        <trans-unit id="2d04bf3b98eaa77becf0235f31cc7fff43422512" translate="yes" xml:space="preserve">
          <source>Matches a UTF-16 code-unit with the value &lt;code&gt;&lt;em&gt;hhhh&lt;/em&gt;&lt;/code&gt; (four hexadecimal digits).</source>
          <target state="translated">UTF-16コード単位を値 &lt;code&gt;&lt;em&gt;hhhh&lt;/em&gt;&lt;/code&gt; （4桁の16進数）と&lt;em&gt;突き合わせ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="677951f08a30895e333e144f8f2aa3ee0fb36fdc" translate="yes" xml:space="preserve">
          <source>Matches a backspace. (Not to be confused with &lt;code&gt;\b&lt;/code&gt;)</source>
          <target state="translated">バックスペースに一致します。（ &lt;code&gt;\b&lt;/code&gt; と混同しないでください）</target>
        </trans-unit>
        <trans-unit id="f606b656f572127873723194c4af191001b29421" translate="yes" xml:space="preserve">
          <source>Matches a carriage return.</source>
          <target state="translated">キャリッジリターンにマッチします。</target>
        </trans-unit>
        <trans-unit id="7eee8a35d88ea2079f897c4d9fccc9516205df99" translate="yes" xml:space="preserve">
          <source>Matches a form-feed.</source>
          <target state="translated">フォームフィードにマッチします。</target>
        </trans-unit>
        <trans-unit id="e5e37526dbc01c7df974ad8c00aece75ebbe5ece" translate="yes" xml:space="preserve">
          <source>Matches a horizontal tab.</source>
          <target state="translated">水平タブにマッチします。</target>
        </trans-unit>
        <trans-unit id="5f878421637bc44a5e4a958f398922458fb5196a" translate="yes" xml:space="preserve">
          <source>Matches a linefeed.</source>
          <target state="translated">ラインフィードにマッチします。</target>
        </trans-unit>
        <trans-unit id="fbf62b81f5e775f13b2fb7c11d37b8412e8bbf21" translate="yes" xml:space="preserve">
          <source>Matches a non-word boundary. This is a position where the previous and next character are of the same type: Either both must be words, or both must be non-words. Such as between two letters or between two spaces. The beginning and end of a string are considered non-words. Same as the matched word boundary, the matched non-word boundary is also not included in the match.</source>
          <target state="translated">単語以外の境界にマッチします。これは、前の文字と次の文字が同じ種類の文字である位置です。両方とも単語でなければならないか、または両方とも非単語でなければなりません。例えば、2つの文字の間や2つのスペースの間などです。文字列の先頭と末尾は非単語とみなされます。一致した単語境界と同様に、一致した非単語境界も一致に含まれません。</target>
        </trans-unit>
        <trans-unit id="6f79164c6630d0b348e21e6d5ec6763effa0ad9b" translate="yes" xml:space="preserve">
          <source>Matches a single character other than white space. Equivalent to &lt;code&gt;[^ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]&lt;/code&gt;.</source>
          <target state="translated">空白以外の1文字と一致します。相当 &lt;code&gt;[^ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dff84fbbda1445f3d4c5b23de3dc4f936e12a3b2" translate="yes" xml:space="preserve">
          <source>Matches a single white space character, including space, tab, form feed, line feed and other Unicode spaces. Equivalent to &lt;code&gt;[ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]&lt;/code&gt;.</source>
          <target state="translated">スペース、タブ、フォームフィード、ラインフィード、その他のUnicodeスペースを含む単一の空白文字に一致します。相当 &lt;code&gt;[ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="275f3cb4cec8658e784822d5f8a92328f35d78ad" translate="yes" xml:space="preserve">
          <source>Matches a vertical tab.</source>
          <target state="translated">垂直タブにマッチします。</target>
        </trans-unit>
        <trans-unit id="cd214ac0fe5a25154504c9308341c0218ab9da82" translate="yes" xml:space="preserve">
          <source>Matches a word boundary. This is the position where a word character is not followed or preceded by another word-character, such as between a letter and a space. Note that a matched word boundary is not included in the match. In other words, the length of a matched word boundary is zero.</source>
          <target state="translated">単語の境界にマッチします。これは、文字とスペースの間など、単語文字の後に他の単語文字が続いたり、前に続いたりしない位置です。一致した単語の境界線は一致に含まれないことに注意してください。言い換えれば、一致した単語境界の長さはゼロです。</target>
        </trans-unit>
        <trans-unit id="706f47a724a320aa7ab0991783efd83c2c0cba82" translate="yes" xml:space="preserve">
          <source>Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;.</source>
          <target state="translated">アンダースコアを含む、基本的なラテンアルファベットの英数字に一致します。相当 &lt;code&gt;[A-Za-z0-9_]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db4d522e556952f55bb330b53cf71ea46aabf1bf" translate="yes" xml:space="preserve">
          <source>Matches any character that is not a digit (Arabic numeral). Equivalent to &lt;code&gt;[^0-9]&lt;/code&gt;.</source>
          <target state="translated">数字（アラビア数字）以外の任意の文字に一致します。相当 &lt;code&gt;[^0-9]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="461869738b8fea1b2e7dcf73f45e158dd567dc2d" translate="yes" xml:space="preserve">
          <source>Matches any character that is not a word character from the basic Latin alphabet. Equivalent to &lt;code&gt;[^A-Za-z0-9_]&lt;/code&gt;.</source>
          <target state="translated">基本ラテンアルファベットの単語文字ではない任意の文字に一致します。相当 &lt;code&gt;[^A-Za-z0-9_]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7209b1e156931d2dfec61e32b7d52ed1957b712" translate="yes" xml:space="preserve">
          <source>Matches any digit (Arabic numeral). Equivalent to &lt;code&gt;[0-9]&lt;/code&gt;.</source>
          <target state="translated">任意の数字（アラビア数字）に一致します。相当 &lt;code&gt;[0-9]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36334364f2cde2d3ffa40c0972e032b1a3da425d" translate="yes" xml:space="preserve">
          <source>Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.</source>
          <target state="translated">入力の先頭にマッチします。マルチラインフラグがtrueに設定されている場合は、改行文字の直後にもマッチします。</target>
        </trans-unit>
        <trans-unit id="4ad1a96a3ac8220ac602d1ba742feafad7f0d4de" translate="yes" xml:space="preserve">
          <source>Matches either &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; or &lt;code&gt;&lt;em&gt;y&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; または &lt;code&gt;&lt;em&gt;y&lt;/em&gt;&lt;/code&gt; のいずれかに一致します。</target>
        </trans-unit>
        <trans-unit id="984bc93b36041e96833cae9e316372a771950cf1" translate="yes" xml:space="preserve">
          <source>Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character.</source>
          <target state="translated">入力の最後にマッチします。マルチラインフラグがtrueに設定されている場合、改行文字の直前にもマッチします。</target>
        </trans-unit>
        <trans-unit id="341133b0694b32d586c145d99c70f768bf2f3db0" translate="yes" xml:space="preserve">
          <source>Matches the character with the code &lt;code&gt;&lt;em&gt;hh&lt;/em&gt;&lt;/code&gt; (two hexadecimal digits).</source>
          <target state="translated">文字をコード &lt;code&gt;&lt;em&gt;hh&lt;/em&gt;&lt;/code&gt; （2桁の16進数）と照合します。</target>
        </trans-unit>
        <trans-unit id="05a7a82d3242b3b2590c83b726cd9db95ee63b59" translate="yes" xml:space="preserve">
          <source>Matches the empty string.</source>
          <target state="translated">空の文字列にマッチします。</target>
        </trans-unit>
        <trans-unit id="2623b390765c0915cee5bac65340abea9e1fd88d" translate="yes" xml:space="preserve">
          <source>Matches the preceding item &lt;em&gt;x&lt;/em&gt; 0 or 1 time.</source>
          <target state="translated">前のアイテム&lt;em&gt;xに&lt;/em&gt; 0回または1回一致します。</target>
        </trans-unit>
        <trans-unit id="b4acd595190ac3a2215603081ec97cddc00bf0fb" translate="yes" xml:space="preserve">
          <source>Matches the preceding item &lt;em&gt;x&lt;/em&gt; 0 or more times.</source>
          <target state="translated">前のアイテム&lt;em&gt;xに&lt;/em&gt; 0回以上一致します。</target>
        </trans-unit>
        <trans-unit id="8c24693910a66b00b9cf18bbfb1b1b36d727fee2" translate="yes" xml:space="preserve">
          <source>Matches the preceding item &lt;em&gt;x&lt;/em&gt; 1 or more times. Equivalent to &lt;code&gt;{1,}&lt;/code&gt;.</source>
          <target state="translated">前のアイテム&lt;em&gt;xと&lt;/em&gt; 1回以上一致します。 &lt;code&gt;{1,}&lt;/code&gt; 相当します。</target>
        </trans-unit>
        <trans-unit id="a6a6af3e46e0d425931e30d7f768b51f72779fa1" translate="yes" xml:space="preserve">
          <source>Matches the preceding item &lt;em&gt;x&lt;/em&gt; like &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, and &lt;code&gt;{...}&lt;/code&gt; from above, however the match is the smallest possible match.</source>
          <target state="translated">前の項目に一致し&lt;em&gt;、Xを&lt;/em&gt;同様に &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; 、および上記の &lt;code&gt;{...}&lt;/code&gt; ですが、一致は可能な限り最小の一致です。</target>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="d72f155a984110e5b00cb0082167ebecfcd895f4" translate="yes" xml:space="preserve">
          <source>Math operation where the result is not a real number (e.g. &lt;code&gt;Math.sqrt(-1)&lt;/code&gt;)</source>
          <target state="translated">Math operation where the result is not a real number (e.g. &lt;code&gt;Math.sqrt(-1)&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="7994c7a96c8e9eb563679f8e889cf1da5b7ce6ab" translate="yes" xml:space="preserve">
          <source>Math.E</source>
          <target state="translated">Math.E</target>
        </trans-unit>
        <trans-unit id="3329f1c1c01ec614d01bdfb5ae9916fe6732a48f" translate="yes" xml:space="preserve">
          <source>Math.LN10</source>
          <target state="translated">Math.LN10</target>
        </trans-unit>
        <trans-unit id="58d87221f24496309d86a226ff38e6aaf78b5121" translate="yes" xml:space="preserve">
          <source>Math.LN2</source>
          <target state="translated">Math.LN2</target>
        </trans-unit>
        <trans-unit id="ab0180df6c538e83c2d1b2f3cfb30d85ea7d44b9" translate="yes" xml:space="preserve">
          <source>Math.LOG10E</source>
          <target state="translated">Math.LOG10E</target>
        </trans-unit>
        <trans-unit id="6bb5f08d86e8e83095df2cf99cb36a4a7c2608a7" translate="yes" xml:space="preserve">
          <source>Math.LOG2E</source>
          <target state="translated">Math.LOG2E</target>
        </trans-unit>
        <trans-unit id="8eb0aa2e2eaf6d220ee9aa91dbaaef38886bc084" translate="yes" xml:space="preserve">
          <source>Math.PI</source>
          <target state="translated">Math.PI</target>
        </trans-unit>
        <trans-unit id="e2f0869dcdb5e6a8adb783f5b8df7a3a76f3537d" translate="yes" xml:space="preserve">
          <source>Math.SQRT1_2</source>
          <target state="translated">Math.SQRT1_2</target>
        </trans-unit>
        <trans-unit id="8021dd2c05a86100b105340a694c5ba94f5f3d1a" translate="yes" xml:space="preserve">
          <source>Math.SQRT2</source>
          <target state="translated">Math.SQRT2</target>
        </trans-unit>
        <trans-unit id="ccaf3c604e96d65af03cf144ac3b2fdfe947d37d" translate="yes" xml:space="preserve">
          <source>Math.abs</source>
          <target state="translated">Math.abs</target>
        </trans-unit>
        <trans-unit id="bf30426297e443ad214b75ffa63c60a0c51744a6" translate="yes" xml:space="preserve">
          <source>Math.acos</source>
          <target state="translated">Math.acos</target>
        </trans-unit>
        <trans-unit id="73ede0e1482c1dca7aafcc20a87fd42c47a67f89" translate="yes" xml:space="preserve">
          <source>Math.acosh</source>
          <target state="translated">Math.acosh</target>
        </trans-unit>
        <trans-unit id="4ee0bdc5e316c2ab5aa7db588a1df601b2e5dd9c" translate="yes" xml:space="preserve">
          <source>Math.asin</source>
          <target state="translated">Math.asin</target>
        </trans-unit>
        <trans-unit id="395f3f4b141d2b6d04e929068a1c70fd1616b3a1" translate="yes" xml:space="preserve">
          <source>Math.asinh</source>
          <target state="translated">Math.asinh</target>
        </trans-unit>
        <trans-unit id="12ecbeaab69e4b10ae7c40f197f232197812550b" translate="yes" xml:space="preserve">
          <source>Math.atan</source>
          <target state="translated">Math.atan</target>
        </trans-unit>
        <trans-unit id="08e87074500ab227a328f82b1273dcfd2af9ccd0" translate="yes" xml:space="preserve">
          <source>Math.atan2</source>
          <target state="translated">Math.atan2</target>
        </trans-unit>
        <trans-unit id="dc13d4d9d7004fb4e2fd670171f998f176b742cd" translate="yes" xml:space="preserve">
          <source>Math.atanh</source>
          <target state="translated">Math.atanh</target>
        </trans-unit>
        <trans-unit id="38014a25a7ef241042705c1d5d010fd7b07f4cac" translate="yes" xml:space="preserve">
          <source>Math.cbrt</source>
          <target state="translated">Math.cbrt</target>
        </trans-unit>
        <trans-unit id="6b88077501ed020eb50cbf92b4eb7be814327411" translate="yes" xml:space="preserve">
          <source>Math.ceil</source>
          <target state="translated">Math.ceil</target>
        </trans-unit>
        <trans-unit id="d2df401562726cd4f0b6f77ab50e9869fa157ca2" translate="yes" xml:space="preserve">
          <source>Math.clz32</source>
          <target state="translated">Math.clz32</target>
        </trans-unit>
        <trans-unit id="83c367edc6747170c3dd924e0b1c94ee7c534c6a" translate="yes" xml:space="preserve">
          <source>Math.cos</source>
          <target state="translated">Math.cos</target>
        </trans-unit>
        <trans-unit id="5fba06c01708d531f89a5a919162c8eaad11789c" translate="yes" xml:space="preserve">
          <source>Math.cosh</source>
          <target state="translated">Math.cosh</target>
        </trans-unit>
        <trans-unit id="cd019e0a3f2d4673e1ca84e37eee7806ba23d800" translate="yes" xml:space="preserve">
          <source>Math.cosh(x)</source>
          <target state="translated">Math.cosh(x)</target>
        </trans-unit>
        <trans-unit id="289886e5f4a5e09e3a8ea7b58c14923b5d7af813" translate="yes" xml:space="preserve">
          <source>Math.exp</source>
          <target state="translated">Math.exp</target>
        </trans-unit>
        <trans-unit id="1797030f80e695456a7defdcdb108d73d5dcc0d5" translate="yes" xml:space="preserve">
          <source>Math.expm1</source>
          <target state="translated">Math.expm1</target>
        </trans-unit>
        <trans-unit id="865fc1bcd6df2e104eb5c7bfd8120936a8c1bfeb" translate="yes" xml:space="preserve">
          <source>Math.floor</source>
          <target state="translated">Math.floor</target>
        </trans-unit>
        <trans-unit id="57e4cd797cadb515da1abcd4091980daa38684f9" translate="yes" xml:space="preserve">
          <source>Math.fround</source>
          <target state="translated">Math.fround</target>
        </trans-unit>
        <trans-unit id="1d8b270f895f71f29abb73e144cf17129c8271a4" translate="yes" xml:space="preserve">
          <source>Math.hypot</source>
          <target state="translated">Math.hypot</target>
        </trans-unit>
        <trans-unit id="c0b10bb3b45541494f26d88ecf007443214833eb" translate="yes" xml:space="preserve">
          <source>Math.imul</source>
          <target state="translated">Math.imul</target>
        </trans-unit>
        <trans-unit id="e034f41ee44dab7149a91243dffc9e21bf4b2095" translate="yes" xml:space="preserve">
          <source>Math.log</source>
          <target state="translated">Math.log</target>
        </trans-unit>
        <trans-unit id="7c734a40be828c8a4ecafa04fc2c1f8957d2fbf0" translate="yes" xml:space="preserve">
          <source>Math.log10</source>
          <target state="translated">Math.log10</target>
        </trans-unit>
        <trans-unit id="758b15de2192a0b9c46c75974f5554be5b604f8d" translate="yes" xml:space="preserve">
          <source>Math.log1p</source>
          <target state="translated">Math.log1p</target>
        </trans-unit>
        <trans-unit id="cdc100f4e47ac71eb8ae32aec95efcba018bdccf" translate="yes" xml:space="preserve">
          <source>Math.log2</source>
          <target state="translated">Math.log2</target>
        </trans-unit>
        <trans-unit id="b216579b22c2ed4608a4910fc3fe70bd8acfcadb" translate="yes" xml:space="preserve">
          <source>Math.max</source>
          <target state="translated">Math.max</target>
        </trans-unit>
        <trans-unit id="00d7002122bd56440e59d99bba0a589df36d459b" translate="yes" xml:space="preserve">
          <source>Math.min</source>
          <target state="translated">Math.min</target>
        </trans-unit>
        <trans-unit id="bf6a0d2b8e5fb86891642a01dd99e9fb72bd31c3" translate="yes" xml:space="preserve">
          <source>Math.pow</source>
          <target state="translated">Math.pow</target>
        </trans-unit>
        <trans-unit id="37ca7979cb602f81b3d7ebb70a93be5dd8d7a2a9" translate="yes" xml:space="preserve">
          <source>Math.random</source>
          <target state="translated">Math.random</target>
        </trans-unit>
        <trans-unit id="6622fa4403e7083f92f6d3144102c7594827772b" translate="yes" xml:space="preserve">
          <source>Math.round</source>
          <target state="translated">Math.round</target>
        </trans-unit>
        <trans-unit id="aa1bec0001e22985568738bbe08a00d4cc48adca" translate="yes" xml:space="preserve">
          <source>Math.sign</source>
          <target state="translated">Math.sign</target>
        </trans-unit>
        <trans-unit id="e9ccf88318dbfe9c07069bd649419105083fef7b" translate="yes" xml:space="preserve">
          <source>Math.sin</source>
          <target state="translated">Math.sin</target>
        </trans-unit>
        <trans-unit id="d1fb3dfbd5676124d51e030bb987b4141bfbe1d4" translate="yes" xml:space="preserve">
          <source>Math.sinh</source>
          <target state="translated">Math.sinh</target>
        </trans-unit>
        <trans-unit id="9edd2550c136c21e14adc217c873ee328e7d3996" translate="yes" xml:space="preserve">
          <source>Math.sinh(x)</source>
          <target state="translated">Math.sinh(x)</target>
        </trans-unit>
        <trans-unit id="74a1f5c85920fe3af7e569916321e3757879b3f0" translate="yes" xml:space="preserve">
          <source>Math.sqrt</source>
          <target state="translated">Math.sqrt</target>
        </trans-unit>
        <trans-unit id="616dcd98536f46efa5c47eacf4b4c0a589c1ceeb" translate="yes" xml:space="preserve">
          <source>Math.tan</source>
          <target state="translated">Math.tan</target>
        </trans-unit>
        <trans-unit id="ca6e85a6fbd385970d7a551f18e54ed955aeb147" translate="yes" xml:space="preserve">
          <source>Math.tanh</source>
          <target state="translated">Math.tanh</target>
        </trans-unit>
        <trans-unit id="dcb60e2fd35aa0d4dc6d9b49810ec7daa4a9833a" translate="yes" xml:space="preserve">
          <source>Math.trunc</source>
          <target state="translated">Math.trunc</target>
        </trans-unit>
        <trans-unit id="74c367514aaba6e4eae54e7d73df11299e0f818c" translate="yes" xml:space="preserve">
          <source>Mathias Bynens: JavaScript character escape sequences</source>
          <target state="translated">マティアス・バイネンス JavaScript の文字エスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="2cdcd95c7caa6d5c68c3de40d4c1478f3f02b5b4" translate="yes" xml:space="preserve">
          <source>Matt Greer: JavaScript Promises ... In Wicked Detail</source>
          <target state="translated">マット・グリア JavaScriptの約束 ...邪悪な詳細</target>
        </trans-unit>
        <trans-unit id="d8837a214b2d2aba85c9dfeec20020f4b5391a13" translate="yes" xml:space="preserve">
          <source>Maybe there is a typo in the function name? Maybe the object you are calling the method on does not have this function? For example, JavaScript &lt;code&gt;Objects&lt;/code&gt; have no &lt;code&gt;map&lt;/code&gt; function, but the JavaScript &lt;code&gt;Array&lt;/code&gt; object does.</source>
          <target state="translated">Maybe there is a typo in the function name? Maybe the object you are calling the method on does not have this function? For example, JavaScript &lt;code&gt;Objects&lt;/code&gt; have no &lt;code&gt;map&lt;/code&gt; function, but the JavaScript &lt;code&gt;Array&lt;/code&gt; object does.</target>
        </trans-unit>
        <trans-unit id="c0c8f30fb77ef491692bfbd045ee339a2c727093" translate="yes" xml:space="preserve">
          <source>Maybe there is a typo in the function name? Maybe the object you are calling the method on does not have this function? For example, JavaScript objects have no &lt;code&gt;map&lt;/code&gt; function, but the JavaScript Array object does.</source>
          <target state="translated">関数名にタイプミスがあるのでしょうか？多分あなたがメソッドを呼び出しているオブジェクトはこの機能を持っていませんか？たとえば、JavaScriptオブジェクトには &lt;code&gt;map&lt;/code&gt; 関数がありませんが、JavaScript配列オブジェクトにはあります。</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="32ae4044a6d91b84c5cdd36108e37461759dc667" translate="yes" xml:space="preserve">
          <source>Measuring execution time</source>
          <target state="translated">実行時間の測定</target>
        </trans-unit>
        <trans-unit id="42082a8a3faf95f5906cc2f31bd2cfd4c7a0812d" translate="yes" xml:space="preserve">
          <source>Member Access</source>
          <target state="translated">会員アクセス</target>
        </trans-unit>
        <trans-unit id="2742f92a05251bd8b22357a6f3aa482165c782ff" translate="yes" xml:space="preserve">
          <source>Member operators provide access to a property or method of an object</source>
          <target state="translated">メンバ演算子は、オブジェクトのプロパティまたはメソッドへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="1c5536b98ab016fe61807564b4a34c80211a7613" translate="yes" xml:space="preserve">
          <source>Memory management</source>
          <target state="translated">メモリ管理</target>
        </trans-unit>
        <trans-unit id="4772d95ba29a640d30f48c96b8012773ec532d09" translate="yes" xml:space="preserve">
          <source>Merging objects</source>
          <target state="translated">オブジェクトのマージ</target>
        </trans-unit>
        <trans-unit id="e783d9e184edce4feef4a8eb1755f904a63cb09b" translate="yes" xml:space="preserve">
          <source>Merging objects with same properties</source>
          <target state="translated">同じプロパティを持つオブジェクトをマージする</target>
        </trans-unit>
        <trans-unit id="2845fa81e4300423540d076289e4fd24a72818af" translate="yes" xml:space="preserve">
          <source>Merging two arrays</source>
          <target state="translated">2つの配列を結合する</target>
        </trans-unit>
        <trans-unit id="68f4145fee7dde76afceb910165924ad14cf0d00" translate="yes" xml:space="preserve">
          <source>Message</source>
          <target state="translated">Message</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="69730e09bf114397207217d4dd78cb352a89fea2" translate="yes" xml:space="preserve">
          <source>Method 1</source>
          <target state="translated">方法1</target>
        </trans-unit>
        <trans-unit id="4e8e7e0c1c80c3593b440e52c45595d6ab2c65cd" translate="yes" xml:space="preserve">
          <source>Method 2</source>
          <target state="translated">方法2</target>
        </trans-unit>
        <trans-unit id="4ea2cafd85e43a11661c43bb857632229ca3d1a5" translate="yes" xml:space="preserve">
          <source>Method binding</source>
          <target state="translated">メソッドバインディング</target>
        </trans-unit>
        <trans-unit id="b1e0dda9d554b5de0e97cc3a8969aa82ad2fefd3" translate="yes" xml:space="preserve">
          <source>Method definition syntax</source>
          <target state="translated">メソッド定義構文</target>
        </trans-unit>
        <trans-unit id="24cdd80596e8be69a291a0a93b2ea86ebd106c75" translate="yes" xml:space="preserve">
          <source>Method definitions</source>
          <target state="translated">メソッドの定義</target>
        </trans-unit>
        <trans-unit id="f1899ae00e7005fc77e7252da2c5abf4de986cfd" translate="yes" xml:space="preserve">
          <source>Method definitions are not constructable</source>
          <target state="translated">メソッドの定義が構築できない</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="bf07858e8e01fe9e63025918e30c022de5a77784" translate="yes" xml:space="preserve">
          <source>Methods Polyfill</source>
          <target state="translated">方法 ポリフィル</target>
        </trans-unit>
        <trans-unit id="0d27c5a84cad43ef5b9a24d2835dc3459a51998b" translate="yes" xml:space="preserve">
          <source>Methods cannot be constructors! They will throw a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if you try to instantiate them.</source>
          <target state="translated">Methods cannot be constructors! They will throw a &lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; if you try to instantiate them.</target>
        </trans-unit>
        <trans-unit id="eac8f58d20eac05c92a6b45131ab7d8bfa374e92" translate="yes" xml:space="preserve">
          <source>Methods for multi-criteria &lt;code&gt;case&lt;/code&gt;</source>
          <target state="translated">Methods for multi-criteria &lt;code&gt;case&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b359fc4b992b5310b06b482980bb86d89888ad6e" translate="yes" xml:space="preserve">
          <source>Methods for multi-criteria case</source>
          <target state="translated">多基準ケースのための方法</target>
        </trans-unit>
        <trans-unit id="2d4d7d3afb6b465b7aa978719f97d97dccf47dc7" translate="yes" xml:space="preserve">
          <source>Methods of the &lt;code&gt;Object&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; コンストラクターのメソッド</target>
        </trans-unit>
        <trans-unit id="0a86e9fa10a6a2ce2b664df6d172d8e0f8956e92" translate="yes" xml:space="preserve">
          <source>Methods of the handler object</source>
          <target state="translated">ハンドラオブジェクトのメソッド</target>
        </trans-unit>
        <trans-unit id="f37dcf12f5cad1a913f85812dde02569c1b39d40" translate="yes" xml:space="preserve">
          <source>Methods unrelated to HTML</source>
          <target state="translated">HTMLに関係のないメソッド</target>
        </trans-unit>
        <trans-unit id="11f3242118ff2add5d117cbf216f29ac578f6ba6" translate="yes" xml:space="preserve">
          <source>Microsoft</source>
          <target state="translated">Microsoft</target>
        </trans-unit>
        <trans-unit id="0c91f8d2134260edcad24e279bbffab045533a57" translate="yes" xml:space="preserve">
          <source>Microsoft's JScript does not support negative values for the start index. To use this feature in JScript, you can use the following code:</source>
          <target state="translated">MicrosoftのJScriptは、開始インデックスの負の値をサポートしていません。この機能をJScriptで使用するには、以下のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="8cae20a09f5616b19c8bedcef2530776075b3b37" translate="yes" xml:space="preserve">
          <source>Minute, as two digits with leading zero if required</source>
          <target state="translated">分、必要に応じて最初のゼロを含む2桁の数字として</target>
        </trans-unit>
        <trans-unit id="8798ceea0a11a821b057036790a060751fe0c64b" translate="yes" xml:space="preserve">
          <source>Minute: 2 digit minute of hour, e.g. &quot;53&quot;</source>
          <target state="translated">分:時の2桁の分、例:&quot;53&quot;</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="ead045fe948be7ea5e008222b76ccb12a9d6157b" translate="yes" xml:space="preserve">
          <source>Mismatched characters</source>
          <target state="translated">不一致の文字</target>
        </trans-unit>
        <trans-unit id="c6bfe8d08ac1cce3691b75142d66869195854fb0" translate="yes" xml:space="preserve">
          <source>Missing a variable name</source>
          <target state="translated">変数名の欠落</target>
        </trans-unit>
        <trans-unit id="04710d9e33ca854dbc5582dadebf3a2ed0d86d85" translate="yes" xml:space="preserve">
          <source>Missing bracket after list</source>
          <target state="translated">リストの後のカッコの欠落</target>
        </trans-unit>
        <trans-unit id="2d235bf30599bfae84517e6baa48ea80693db0f9" translate="yes" xml:space="preserve">
          <source>Missing colon after property id</source>
          <target state="translated">プロパティIDの後にコロンがない</target>
        </trans-unit>
        <trans-unit id="c701593900706845ea863233742bef73a7cd1a04" translate="yes" xml:space="preserve">
          <source>Missing const initializer</source>
          <target state="translated">欠落した const 初期化子</target>
        </trans-unit>
        <trans-unit id="547f619525c0e588e2b518b330b32b0247bd210a" translate="yes" xml:space="preserve">
          <source>Missing curly after function body</source>
          <target state="translated">機能体後のミッシングカーリー</target>
        </trans-unit>
        <trans-unit id="783a307c1b40aa2740e7254efc8b761ef0e85383" translate="yes" xml:space="preserve">
          <source>Missing curly after property list</source>
          <target state="translated">プロパティリストの後のカーリーの欠落</target>
        </trans-unit>
        <trans-unit id="9b23bbabd7eacca3ec302aa8bc8449e153c54e50" translate="yes" xml:space="preserve">
          <source>Missing curly brackets</source>
          <target state="translated">括弧の欠落</target>
        </trans-unit>
        <trans-unit id="6946cb63d867319ad149c8b2f398588b3314bebc" translate="yes" xml:space="preserve">
          <source>Missing formal parameter</source>
          <target state="translated">フォーマルパラメータの欠落</target>
        </trans-unit>
        <trans-unit id="247fd0b519669b01bb1cc69237c31a3238d029f1" translate="yes" xml:space="preserve">
          <source>Missing initializer in const</source>
          <target state="translated">const の初期化子が見つからない</target>
        </trans-unit>
        <trans-unit id="d7f3d50032b13610b1dbb5cfb4b08df2568a9127" translate="yes" xml:space="preserve">
          <source>Missing name after dot operator</source>
          <target state="translated">ドット演算子の後の名前の欠落</target>
        </trans-unit>
        <trans-unit id="2838fb66f2dec82d59af8cbc966a3b7ec248a85c" translate="yes" xml:space="preserve">
          <source>Missing parenthesis</source>
          <target state="translated">括弧の欠落</target>
        </trans-unit>
        <trans-unit id="d014a511124a2115e517ff56af6ec509f65c8273" translate="yes" xml:space="preserve">
          <source>Missing parenthesis after argument list</source>
          <target state="translated">引数リストの後に括弧がない</target>
        </trans-unit>
        <trans-unit id="0c1fcc141f82962c593952eb0fd54e85112e0397" translate="yes" xml:space="preserve">
          <source>Missing parenthesis after condition</source>
          <target state="translated">条件の後の括弧の欠落</target>
        </trans-unit>
        <trans-unit id="45ae0e646985e28013fcc87e3832ddfca290f7df" translate="yes" xml:space="preserve">
          <source>Missing semicolon before statement</source>
          <target state="translated">文の前にセミコロンがない</target>
        </trans-unit>
        <trans-unit id="57c52a3af366d2e07ca9554b312e3549c086f958" translate="yes" xml:space="preserve">
          <source>Misused &lt;code&gt;is&lt;/code&gt; keyword</source>
          <target state="translated">Misused &lt;code&gt;is&lt;/code&gt; keyword</target>
        </trans-unit>
        <trans-unit id="1c9abcc122dbc35a590dfaf5d43ef774f845114f" translate="yes" xml:space="preserve">
          <source>Mix-ins</source>
          <target state="translated">Mix-ins</target>
        </trans-unit>
        <trans-unit id="b1d702459399a2512fba5a402d4d5f26aee34693" translate="yes" xml:space="preserve">
          <source>Mobile</source>
          <target state="translated">Mobile</target>
        </trans-unit>
        <trans-unit id="0c0930fef9d0d06ade78d378fb148192665a750e" translate="yes" xml:space="preserve">
          <source>Modifying a property</source>
          <target state="translated">プロパティを変更する</target>
        </trans-unit>
        <trans-unit id="c976dba6b6e708992c2ddfcadf73c9463035f94f" translate="yes" xml:space="preserve">
          <source>Modifying primitive values converted from an object</source>
          <target state="translated">オブジェクトから変換されたプリミティブ値の修正</target>
        </trans-unit>
        <trans-unit id="37d3b69ea59a760f27c71afa3054744f36af1c54" translate="yes" xml:space="preserve">
          <source>Modifying the array during iteration</source>
          <target state="translated">イテレーション中に配列を変更する</target>
        </trans-unit>
        <trans-unit id="782ee845b12862b0a1ee347599d483a23aa49179" translate="yes" xml:space="preserve">
          <source>Module Redirects</source>
          <target state="translated">モジュールのリダイレクト</target>
        </trans-unit>
        <trans-unit id="723cd98652954fa92f791cdd9a53e5365e8ad7c8" translate="yes" xml:space="preserve">
          <source>Module filenames must end with &lt;code&gt;.mjs&lt;/code&gt;, not .js. See Node's &lt;a href=&quot;https://nodejs.org/docs/latest-v8.x/api/esm.html#esm_enabling&quot;&gt;ECMAScript Modules documentation&lt;/a&gt; for more details.</source>
          <target state="translated">Module filenames must end with &lt;code&gt;.mjs&lt;/code&gt; , not .js. See Node's &lt;a href=&quot;https://nodejs.org/docs/latest-v8.x/api/esm.html#esm_enabling&quot;&gt;ECMAScript Modules documentation&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="dd4cf8174821e8e1880a8119fc1df052768998ed" translate="yes" xml:space="preserve">
          <source>Module instances have no default methods of their own.</source>
          <target state="translated">モジュールインスタンスには、それ自身のデフォルトメソッドがありません。</target>
        </trans-unit>
        <trans-unit id="0eae6de93412c2a354d2415155e4cc8664ec45d6" translate="yes" xml:space="preserve">
          <source>Modules must either have a filename ending in &lt;code&gt;.mjs&lt;/code&gt;, or the nearest parent &lt;code&gt;package.json&lt;/code&gt; file must contain &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt;. See Node's &lt;a href=&quot;https://nodejs.org/api/esm.html#esm_enabling&quot;&gt;ECMAScript Modules documentation&lt;/a&gt; for more details.</source>
          <target state="translated">Modules must either have a filename ending in &lt;code&gt;.mjs&lt;/code&gt; , or the nearest parent &lt;code&gt;package.json&lt;/code&gt; file must contain &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; . See Node's &lt;a href=&quot;https://nodejs.org/api/esm.html#esm_enabling&quot;&gt;ECMAScript Modules documentation&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="a3ef99944dbf668cacf3d1ea1d23e04b75bf464a" translate="yes" xml:space="preserve">
          <source>Modules must either have a filename ending in &lt;code&gt;.mjs&lt;/code&gt;, or the nearest parent &lt;code&gt;package.json&lt;/code&gt; file must contain &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt;. See Node's &lt;a href=&quot;https://nodejs.org/docs/latest-v12.x/api/esm.html#esm_enabling&quot;&gt;ECMAScript Modules documentation&lt;/a&gt; for more details.</source>
          <target state="translated">モジュールのファイル名は &lt;code&gt;.mjs&lt;/code&gt; で終わるか、最も近い親の &lt;code&gt;package.json&lt;/code&gt; ファイルに &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; が含まれている必要があります。詳細については、ノードの&lt;a href=&quot;https://nodejs.org/docs/latest-v12.x/api/esm.html#esm_enabling&quot;&gt;ECMAScriptモジュールのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b6805e32bd4de5f6b98d1ecbb9dcc1d711cd6047" translate="yes" xml:space="preserve">
          <source>Month name: 3 letter English month name, e.g. &quot;Sep&quot;</source>
          <target state="translated">月名:3文字の英語の月名、例:&quot;Sep&quot;</target>
        </trans-unit>
        <trans-unit id="1e4467487b5fd600a383ac15a3689e13aa06f5b4" translate="yes" xml:space="preserve">
          <source>Month, as three letters (e.g. Jan, Feb, ...)</source>
          <target state="translated">月、3文字として(例:1月、2月、...</target>
        </trans-unit>
        <trans-unit id="6f490c1d3478719a7601cdceff98808d64b9a639" translate="yes" xml:space="preserve">
          <source>MooTools 1.3 forces its own version of &lt;code&gt;String.prototype.contains()&lt;/code&gt;, so websites relying on it should not break. However, you should note that &lt;a href=&quot;http://mootools.net/core/docs/1.3.2/Types/String#String-method:-contains&quot;&gt;MooTools 1.3 signature&lt;/a&gt; and ECMAScript 2015 signatures for this method differ (on the second argument). Later, &lt;a href=&quot;https://github.com/mootools/mootools-core/blob/master/Docs/Types/String.md#note&quot;&gt;MooTools 1.5+ changed the signature to match the ES2015 standard.&lt;/a&gt;</source>
          <target state="translated">MooTools 1.3は独自のバージョンの &lt;code&gt;String.prototype.contains()&lt;/code&gt; を強制するので、それに依存するWebサイトは壊れません。ただし、このメソッドの&lt;a href=&quot;http://mootools.net/core/docs/1.3.2/Types/String#String-method:-contains&quot;&gt;MooTools 1.3署名&lt;/a&gt;とECMAScript 2015署名は（2番目の引数で）異なることに注意してください。その後、&lt;a href=&quot;https://github.com/mootools/mootools-core/blob/master/Docs/Types/String.md#note&quot;&gt;MooTools 1.5以降では、署名をES2015標準に一致するように変更しました。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3ded464d1cda2b83720aa7ad9ebdd057d4b481d" translate="yes" xml:space="preserve">
          <source>More arguments needed</source>
          <target state="translated">より多くの引数が必要</target>
        </trans-unit>
        <trans-unit id="77fbec4f373601c736da69a3f7d1674ce9a4d7a8" translate="yes" xml:space="preserve">
          <source>More clearly, &lt;code&gt;Array.from(&lt;var&gt;obj&lt;/var&gt;, &lt;var&gt;mapFn&lt;/var&gt;, &lt;var&gt;thisArg&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="translated">より明確に &lt;code&gt;Array.from(&lt;var&gt;obj&lt;/var&gt;, &lt;var&gt;mapFn&lt;/var&gt;, &lt;var&gt;thisArg&lt;/var&gt;)&lt;/code&gt; ば、Array.from（ &lt;var&gt;obj&lt;/var&gt; 、 &lt;var&gt;mapFn&lt;/var&gt; 、 &lt;var&gt;thisArg&lt;/var&gt; ）</target>
        </trans-unit>
        <trans-unit id="3cb592c1fecdda2623e47d9a1d833c325e8fa130" translate="yes" xml:space="preserve">
          <source>More commonly it is used as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Callback_function&quot;&gt;callback&lt;/a&gt;:</source>
          <target state="translated">より一般的には&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Callback_function&quot;&gt;コールバック&lt;/a&gt;として使用されます：</target>
        </trans-unit>
        <trans-unit id="383f0e0e882a4dc2683b66372e6aa52e3a75f04b" translate="yes" xml:space="preserve">
          <source>More examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="ed41998e464737eacfb99f7081e8a44457a2ab7f" translate="yes" xml:space="preserve">
          <source>More reference pages</source>
          <target state="translated">その他の参考ページ</target>
        </trans-unit>
        <trans-unit id="066a5d8297a8393089fee30dde3f38c9d1c771d7" translate="yes" xml:space="preserve">
          <source>Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array-like objects and will throw an exception.</source>
          <target state="translated">Chrome 14やInternet Explorer 9を含むほとんどのブラウザは、いまだに配列のようなオブジェクトを受け付けず、例外を投げます。</target>
        </trans-unit>
        <trans-unit id="4e0f814ffe3f71013e8a719b05efd84610af4b45" translate="yes" xml:space="preserve">
          <source>Most notably, the IE and Edge browsers insert bidirectional control characters around dates, so the output text will flow properly when concatenated with other text.</source>
          <target state="translated">最も注目すべきは、IEとEdgeブラウザは日付の周りに双方向の制御文字を挿入するため、他のテキストと連結したときに出力テキストが適切に流れるようになります。</target>
        </trans-unit>
        <trans-unit id="85f86a473ded932a55f38d4c49de5de87e948487" translate="yes" xml:space="preserve">
          <source>Most of the time, the formatting returned by &lt;code&gt;toLocaleString()&lt;/code&gt; is consistent. However, this might change in the future, and isn't guaranteed for all languages; output variations are by design, and allowed by the specification.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;toLocaleString()&lt;/code&gt; によって返されるフォーマットは一貫しています。ただし、これは将来変更される可能性があり、すべての言語で保証されるわけではありません。出力の変動は設計によるものであり、仕様で許可されています。</target>
        </trans-unit>
        <trans-unit id="e6a1387912e988056d5a48e5ac571fccd3f059c6" translate="yes" xml:space="preserve">
          <source>Mostly this property is used for defining a function as a &lt;strong&gt;function-constructor&lt;/strong&gt; with further calling it with &lt;strong&gt;new&lt;/strong&gt; and prototype-inherits chain.</source>
          <target state="translated">ほとんどの場合、このプロパティは、&lt;strong&gt;新しい&lt;/strong&gt;プロトタイプ継承チェーンでさらに呼び出すことにより、&lt;strong&gt;関数を関数コンストラクター&lt;/strong&gt;として定義するために使用されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d83016dd56e9bf9199d175870ff56ee77659cfb7" translate="yes" xml:space="preserve">
          <source>Mozilla</source>
          <target state="translated">Mozilla</target>
        </trans-unit>
        <trans-unit id="0c93153393268b494f055cab19336758fe3931a8" translate="yes" xml:space="preserve">
          <source>Much like a &lt;code&gt;return&lt;/code&gt; statement, an error is thrown inside the generator will make the generator finished -- unless caught within the generator's body.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; ステートメントと同様に、ジェネレーター内でエラーがスローされると、ジェネレーターが終了します-ジェネレーターの本体内に捕らえられない限り。</target>
        </trans-unit>
        <trans-unit id="3a0e03621e1caeb4567a4ba39b0fdfe4e3f43f34" translate="yes" xml:space="preserve">
          <source>Much like a &lt;code&gt;return&lt;/code&gt; statement, an error thrown inside the generator will make the generator finished -- unless caught within the generator's body.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; ステートメントと同様に、ジェネレーターの内部でエラーがスローされると、ジェネレーターの本体内でキャッチされない限り、ジェネレーターは終了します。</target>
        </trans-unit>
        <trans-unit id="a939914e8ecd5bf65dbb056793ae66e7d5180066" translate="yes" xml:space="preserve">
          <source>Multi-&lt;code&gt;case&lt;/code&gt; : chained operations</source>
          <target state="translated">マルチ &lt;code&gt;case&lt;/code&gt; ：連鎖操作</target>
        </trans-unit>
        <trans-unit id="51a45f4926969f00c882096d5de562c734085843" translate="yes" xml:space="preserve">
          <source>Multi-&lt;code&gt;case&lt;/code&gt; : single operation</source>
          <target state="translated">マルチ &lt;code&gt;case&lt;/code&gt; ：単一操作</target>
        </trans-unit>
        <trans-unit id="4c738c6d3d74233783f7b96060bfeed7b0c3abd2" translate="yes" xml:space="preserve">
          <source>Multi-byte number formats are represented in memory differently depending on machine architecture &amp;mdash; see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;Endianness&lt;/a&gt; for an explanation. &lt;code&gt;DataView&lt;/code&gt; accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness.</source>
          <target state="translated">マルチバイトの数値形式は、マシンアーキテクチャに応じてメモリ内で異なる方法で表現されます。説明については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;エンディアン&lt;/a&gt;を参照してください。 &lt;code&gt;DataView&lt;/code&gt; アクセサーは、実行中のコンピューターのエンディアンに関係なく、データへのアクセス方法を明示的に制御します。</target>
        </trans-unit>
        <trans-unit id="45547c82b3d107dd68f9daa0979f6f8524d8fe41" translate="yes" xml:space="preserve">
          <source>Multi-case - chained operations</source>
          <target state="translated">マルチケース-連鎖演算</target>
        </trans-unit>
        <trans-unit id="187bc476b097eb708e54a90b80a07a1474e02b36" translate="yes" xml:space="preserve">
          <source>Multi-case - single operation</source>
          <target state="translated">マルチケース-シングルオペレーション</target>
        </trans-unit>
        <trans-unit id="d7e7c012f74a51c913dc1473b49e5ff251e92948" translate="yes" xml:space="preserve">
          <source>Multi-line search.</source>
          <target state="translated">複数行検索。</target>
        </trans-unit>
        <trans-unit id="04001df0dbe7d02ecc4231f228169387b546cfd8" translate="yes" xml:space="preserve">
          <source>Multi-line strings</source>
          <target state="translated">複数行の文字列</target>
        </trans-unit>
        <trans-unit id="f2c9c22d2f5040152bcd029d261ed3e7bd2eaf4a" translate="yes" xml:space="preserve">
          <source>Multiline statements require body brackets and return:</source>
          <target state="translated">マルチライン文では、ボディカッコとリターンが必要です。</target>
        </trans-unit>
        <trans-unit id="c70668a80f6e27483a35c68555c2dbd8aa226406" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;if...else&lt;/code&gt; statements can be nested to create an &lt;code&gt;else if&lt;/code&gt; clause. Note that there is no &lt;code&gt;elseif&lt;/code&gt; (in one word) keyword in JavaScript.</source>
          <target state="translated">複数の &lt;code&gt;if...else&lt;/code&gt; ステートメントをネストして、 &lt;code&gt;else if&lt;/code&gt; 句を作成できます。JavaScript には &lt;code&gt;elseif&lt;/code&gt; （一言で言えば）キーワードがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="91f980bf5c98e13d46d6f51ec9d1c716af220ca8" translate="yes" xml:space="preserve">
          <source>Multiple lines</source>
          <target state="translated">複数行</target>
        </trans-unit>
        <trans-unit id="6076e7744e9e036fd469fa2af1c56a1db3661014" translate="yes" xml:space="preserve">
          <source>Multiple params require parentheses. Multiline statements require body brackets and return:</source>
          <target state="translated">複数のパラメータは括弧が必要です。複数行のステートメントは、本文カッコとリターンを必要とします。</target>
        </trans-unit>
        <trans-unit id="59f68135f0f65227d2630a74da6704c058ee0d14" translate="yes" xml:space="preserve">
          <source>Multiple params require parentheses. With simple expression return is not needed:</source>
          <target state="translated">複数のパラメータは括弧が必要です。単純な式ではreturnは不要です。</target>
        </trans-unit>
        <trans-unit id="cf527f48ca51801e8fc83e714aca36e495d12a76" translate="yes" xml:space="preserve">
          <source>Multiple statements need to be enclosed in brackets. A single expression requires no brackets. The expression is also the implicit return value of the function.</source>
          <target state="translated">複数の文は括弧で囲む必要があります。単一の式には括弧は必要ありません。式は関数の暗黙の戻り値でもあります。</target>
        </trans-unit>
        <trans-unit id="2b9ee6e2b5fcdbd970e8f069acf17877e49e0441" translate="yes" xml:space="preserve">
          <source>Multiplication</source>
          <target state="translated">Multiplication</target>
        </trans-unit>
        <trans-unit id="29bec0c4ea1142a32691ebfb61cdb6560525eb20" translate="yes" xml:space="preserve">
          <source>Multiplication (*)</source>
          <target state="translated">掛け算 (*)</target>
        </trans-unit>
        <trans-unit id="c41e6546f2f09c72f9c4264b134a64d1e3f0725d" translate="yes" xml:space="preserve">
          <source>Multiplication (&lt;code&gt;*&lt;/code&gt;)</source>
          <target state="translated">乗算（ &lt;code&gt;*&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bc5f7a8e3f6c574a340d00ceb468d9ad4997d1a2" translate="yes" xml:space="preserve">
          <source>Multiplication assignment</source>
          <target state="translated">掛け算の割り当て</target>
        </trans-unit>
        <trans-unit id="68c5526133ad24050eb09725afae35a9f3f94b08" translate="yes" xml:space="preserve">
          <source>Multiplication assignment (&lt;code&gt;x *= y&lt;/code&gt;)</source>
          <target state="translated">乗算代入（ &lt;code&gt;x *= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="07d8af07b89b3cd3cdcde482fe72b5eef9743367" translate="yes" xml:space="preserve">
          <source>Multiplication assignment.</source>
          <target state="translated">掛け算の課題。</target>
        </trans-unit>
        <trans-unit id="2268b7ba08eaa2111a987e683d3af8c78d7134c2" translate="yes" xml:space="preserve">
          <source>Multiplication operator.</source>
          <target state="translated">乗算演算子。</target>
        </trans-unit>
        <trans-unit id="54694fff9fa76306fe7c989ccae1434b6f8e4db4" translate="yes" xml:space="preserve">
          <source>Mutates a reference stored at a given index to a different value.</source>
          <target state="translated">指定されたインデックスに格納されている参照を別の値に変換します。</target>
        </trans-unit>
        <trans-unit id="660ecb8914204527375df5f117ea5a25cb860eab" translate="yes" xml:space="preserve">
          <source>Mutator methods</source>
          <target state="translated">変異子法</target>
        </trans-unit>
        <trans-unit id="984ac544f1d0a5036cc20ca285334515bae3fc49" translate="yes" xml:space="preserve">
          <source>NOT a</source>
          <target state="translated">ではない</target>
        </trans-unit>
        <trans-unit id="f13d35bf57a61f13a731200b8d4c90b8437c1b01" translate="yes" xml:space="preserve">
          <source>NOTE: Each step along the way is a valid &quot;arrow function&quot;</source>
          <target state="translated">注:途中の各ステップは有効な「矢印関数」です。</target>
        </trans-unit>
        <trans-unit id="550e6ece1caf9469f8690661e9844c32af056bbe" translate="yes" xml:space="preserve">
          <source>NOTE: Please fact-check notes on &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="translated">注：&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;に関するメモをファクトチェックしてください。</target>
        </trans-unit>
        <trans-unit id="f7fd9c68f804acda665d2ab082217bb1583318f2" translate="yes" xml:space="preserve">
          <source>NaN</source>
          <target state="translated">NaN</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="1507b9e9bcd5de9387013d4f48b50175dd0b65f4" translate="yes" xml:space="preserve">
          <source>Name of the exports to be imported.</source>
          <target state="translated">輸入する輸出品の名前。</target>
        </trans-unit>
        <trans-unit id="50ae1009f3fe21ff378ffa746e9b63e39211a8ee" translate="yes" xml:space="preserve">
          <source>Name of the module object that will be used as a kind of namespace when referring to the imports.</source>
          <target state="translated">インポートを参照する際に名前空間のようなものとして使用されるモジュールオブジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="c21b0a75b8bc8ff270a0e74bfc6ecdc3a207997f" translate="yes" xml:space="preserve">
          <source>Name that will refer to the default export from the module.</source>
          <target state="translated">モジュールからのデフォルトのエクスポートを参照する名前。</target>
        </trans-unit>
        <trans-unit id="c3ce1731f86264702a939e414faf66cc9a6463dc" translate="yes" xml:space="preserve">
          <source>Named Exports (Zero or more exports per module)</source>
          <target state="translated">名前付きエクスポート(モジュールごとにゼロ以上のエクスポート</target>
        </trans-unit>
        <trans-unit id="4ae448f887cd5d248e74aca3dcecc82fa17f1c45" translate="yes" xml:space="preserve">
          <source>Named capture groups</source>
          <target state="translated">名前付き捕獲グループ</target>
        </trans-unit>
        <trans-unit id="c35ea6f71982fb5e872a4f834ec738eede19541e" translate="yes" xml:space="preserve">
          <source>Named class expressions</source>
          <target state="translated">名前付きクラス表現</target>
        </trans-unit>
        <trans-unit id="8bb303667ef4ac79882b9d41b44e8be3358ba3e0" translate="yes" xml:space="preserve">
          <source>Named exports are useful to export several values. During the import, it is mandatory to use the same name of the corresponding object.</source>
          <target state="translated">名前付きエクスポートは、複数の値をエクスポートするのに便利です。インポート時には、対応するオブジェクトと同じ名前を使用することが必須です。</target>
        </trans-unit>
        <trans-unit id="04d7093c70a1108e9c5984ef06cece016f4a560b" translate="yes" xml:space="preserve">
          <source>Named exports:</source>
          <target state="translated">名前のついた輸出品。</target>
        </trans-unit>
        <trans-unit id="26061f731614204dbc36682a9e1cecacb17c8ee9" translate="yes" xml:space="preserve">
          <source>Named function expression</source>
          <target state="translated">名前付き関数式</target>
        </trans-unit>
        <trans-unit id="0d4f1a679b799c296d44bb53786ee4ff92fd1297" translate="yes" xml:space="preserve">
          <source>Named properties</source>
          <target state="translated">名前付きプロパティ</target>
        </trans-unit>
        <trans-unit id="59d20556f999c9717011dce6c0590115f3714407" translate="yes" xml:space="preserve">
          <source>Names for functions defined in a dictionary are properly assigned; however, anonymous functions defined on a var/let variable assignment have blank names.</source>
          <target state="translated">辞書で定義された関数の名前は適切に代入されますが、var/let変数の代入で定義された匿名関数の名前は空白になります。</target>
        </trans-unit>
        <trans-unit id="a16d9fe91bcd8d71db33de2fdb78e09ec94c9758" translate="yes" xml:space="preserve">
          <source>Names that will refer to the named imports.</source>
          <target state="translated">指定されたインポートを参照する名前。</target>
        </trans-unit>
        <trans-unit id="07a58dec630a2094f2bac8489ef1376195b50ea3" translate="yes" xml:space="preserve">
          <source>Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example &quot;&lt;code&gt;x&lt;/code&gt;&quot;, &quot;&lt;code&gt;theValue&lt;/code&gt;&quot;, or &quot;&lt;code&gt;a,b&lt;/code&gt;&quot;.</source>
          <target state="translated">関数が仮引数名として使用する名前。それぞれは、有効なJavaScript識別子に対応する文字列、またはコンマで区切られたそのような文字列のリストでなければなりません。たとえば、 &quot; &lt;code&gt;x&lt;/code&gt; &quot;、 &quot; &lt;code&gt;theValue&lt;/code&gt; &quot;、または &quot; &lt;code&gt;a,b&lt;/code&gt; &quot;。</target>
        </trans-unit>
        <trans-unit id="7ed1c8dd7972a58d00463e8e1a107d29a25e5246" translate="yes" xml:space="preserve">
          <source>Natural logarithm of 10, approximately 2.303.</source>
          <target state="translated">10の自然対数、約2.303。</target>
        </trans-unit>
        <trans-unit id="416cfbf01ae8c7bc29a905c8714c433900c2ffbe" translate="yes" xml:space="preserve">
          <source>Natural logarithm of 2, approximately 0.693.</source>
          <target state="translated">2の自然対数、約0.693。</target>
        </trans-unit>
        <trans-unit id="2bbec62b2cab2e5c0780d4a309ceea4010f76deb" translate="yes" xml:space="preserve">
          <source>Natural logarithm of &lt;code&gt;10&lt;/code&gt;; approximately &lt;code&gt;2.303&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;10&lt;/code&gt; の自然対数; 約 &lt;code&gt;2.303&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c50c2a3bf15ea7909c8288b52ab930b4fcc17970" translate="yes" xml:space="preserve">
          <source>Natural logarithm of &lt;code&gt;2&lt;/code&gt;; approximately &lt;code&gt;0.693&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;2&lt;/code&gt; の自然対数; 約 &lt;code&gt;0.693&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fedf02a1f3fea92069599c49ef4d87f7675ed222" translate="yes" xml:space="preserve">
          <source>Nearly all objects in JavaScript are instances of &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;; a typical object inherits properties (including methods) from &lt;code&gt;Object.prototype&lt;/code&gt;, although these properties may be shadowed (a.k.a. overridden). However, an &lt;code&gt;Object&lt;/code&gt; may be deliberately created for which this is not true (e.g. by &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;), or it may be altered so that this is no longer true (e.g. with &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">JavaScriptのほぼすべてのオブジェクトは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; の&lt;/a&gt;インスタンスです。典型的なオブジェクトは &lt;code&gt;Object.prototype&lt;/code&gt; からプロパティ（メソッドを含む）を継承しますが、これらのプロパティはシャドウされる（別名オーバーライドされる）可能性があります。ただし、これが真ではない &lt;code&gt;Object&lt;/code&gt; が意図的に作成されたり（たとえば、&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create(null)&lt;/code&gt; &lt;/a&gt;によって）、または変更されて（たとえば、&lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; を使用して&lt;/a&gt;）これが真でなくなったりする場合があります。</target>
        </trans-unit>
        <trans-unit id="a18d4c9d8ff748382d33866061124fa9bb7c3f09" translate="yes" xml:space="preserve">
          <source>Nearly all objects in JavaScript are instances of &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;; a typical object inherits properties (including methods) from &lt;code&gt;Object.prototype&lt;/code&gt;, although these properties may be shadowed (a.k.a. overridden). However, an &lt;code&gt;Object&lt;/code&gt; may be deliberately created for which this is not true (e.g. by &lt;a href=&quot;object/create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;), or it may be altered so that this is no longer true (e.g. with &lt;a href=&quot;object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">JavaScriptのほぼすべてのオブジェクトは&lt;a href=&quot;object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; の&lt;/a&gt;インスタンスです。一般的なオブジェクトは、 &lt;code&gt;Object.prototype&lt;/code&gt; からプロパティ（メソッドを含む）を継承しますが、これらのプロパティはシャドウ（別名オーバーライド）される場合があります。ただし、これが当てはまらない &lt;code&gt;Object&lt;/code&gt; を意図的に作成したり&lt;a href=&quot;object/create&quot;&gt; &lt;code&gt;Object.create(null)&lt;/code&gt; &lt;/a&gt;）、変更してこれが&lt;a href=&quot;object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt;なくなったりする場合があります（Object.setPrototypeOfなど）。</target>
        </trans-unit>
        <trans-unit id="65a1aa90e5ce901372e65e7efce50772db151276" translate="yes" xml:space="preserve">
          <source>Need for parentheses in Syntax</source>
          <target state="translated">構文の括弧の必要性</target>
        </trans-unit>
        <trans-unit id="e71dfa9fc72cb878d4974b9f7162935e23e6f1b4" translate="yes" xml:space="preserve">
          <source>Need to set the flag on the commandline via --js-flags</source>
          <target state="translated">コマンドラインで --js-flags を使ってフラグを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c79852cc4ee6f56327d71481d7eb09ce7d2cceff" translate="yes" xml:space="preserve">
          <source>Negative and positive integer results vary between browsers (as well as between browser versions) because the W3C specification only mandates negative and positive values. Some browsers may return &lt;code&gt;-2&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;, or even some other negative or positive value.</source>
          <target state="translated">W3C仕様では負の値と正の値のみが義務付けられているため、負と正の整数の結果はブラウザ間（およびブラウザのバージョン間）で異なります。一部のブラウザは、 &lt;code&gt;-2&lt;/code&gt; または &lt;code&gt;2&lt;/code&gt; 、あるいはその他の負または正の値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="97fab52ebdfb8cddfb5bb0866105e44e9f3b81bf" translate="yes" xml:space="preserve">
          <source>Negative integers are not considered as indexed properties and therefore return the value of the prototype property.</source>
          <target state="translated">負の整数はインデックス付きプロパティとはみなされないため、プロトタイププロパティの値を返します。</target>
        </trans-unit>
        <trans-unit id="f114d13af557871750ae927f40c08a0ebae2fb93" translate="yes" xml:space="preserve">
          <source>Negative repetition count</source>
          <target state="translated">ネガティブな繰り返し回数</target>
        </trans-unit>
        <trans-unit id="9b14ab55114bbc6fb96f09c2412bfc4016ec9326" translate="yes" xml:space="preserve">
          <source>Negative when the &lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; occurs before &lt;code&gt;&lt;var&gt;compareString&lt;/var&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;compareString&lt;/var&gt;&lt;/code&gt; の前に &lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; が発生すると負になります</target>
        </trans-unit>
        <trans-unit id="833ed969d2a6a2fad3f87bda88773f90f927ac90" translate="yes" xml:space="preserve">
          <source>Negative when the &lt;strong&gt;referenceStr&lt;/strong&gt; occurs before &lt;strong&gt;compareStr&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;compareStrの&lt;/strong&gt;前に&lt;strong&gt;referenceStr&lt;/strong&gt;が発生する場合は負&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b51ed36ac23c16ba1d7fe422d4192c3d86f082d" translate="yes" xml:space="preserve">
          <source>Nested object and array destructuring</source>
          <target state="translated">入れ子になったオブジェクトと配列の破壊</target>
        </trans-unit>
        <trans-unit id="69a930784cc1871541d6c9f52e4b4b51f9c36379" translate="yes" xml:space="preserve">
          <source>Nested try-blocks</source>
          <target state="translated">入れ子になったトライブロック</target>
        </trans-unit>
        <trans-unit id="c5f7b13e5df2686661ca169a8a315cd0e531d609" translate="yes" xml:space="preserve">
          <source>Nesting templates</source>
          <target state="translated">ネスティングテンプレート</target>
        </trans-unit>
        <trans-unit id="81ecc659e169041f8098c285a1f2e9acfb98e818" translate="yes" xml:space="preserve">
          <source>Never use eval()!</source>
          <target state="translated">eval()は絶対に使ってはいけません!</target>
        </trans-unit>
        <trans-unit id="e9d61c228244e80a827e26b1ede04cfbb5a1305a" translate="yes" xml:space="preserve">
          <source>New bitmasks can be created by using the bitwise logical operators on these primitive bitmasks. For example, the bitmask 1011 can be created by ORing FLAG_A, FLAG_B, and FLAG_D:</source>
          <target state="translated">これらのプリミティブビットマスクにビット論理演算子を使用することにより、新しいビットマスクを作成することができる。例えば、FLAG_A、FLAG_B、FLAG_DをORすることで、ビットマスク1011を作成することができます。</target>
        </trans-unit>
        <trans-unit id="a78ae48a655c194ce9f25de48a7386849ea9f568" translate="yes" xml:space="preserve">
          <source>New in JavaScript</source>
          <target state="translated">JavaScriptの新機能</target>
        </trans-unit>
        <trans-unit id="30e6678037330cdad4610515a7015b892755bce2" translate="yes" xml:space="preserve">
          <source>New is required</source>
          <target state="translated">新しいものが必要です。</target>
        </trans-unit>
        <trans-unit id="f1deedbf18333a7029cfa84cdcc491aed511a3e1" translate="yes" xml:space="preserve">
          <source>New line character in Commodore and early Mac systems.</source>
          <target state="translated">コモドールや初期のMacシステムでの新ライン文字。</target>
        </trans-unit>
        <trans-unit id="32190972ea93208b4c44876f3c7240a3b836fa02" translate="yes" xml:space="preserve">
          <source>New line character in UNIX systems.</source>
          <target state="translated">UNIXシステムでの改行文字。</target>
        </trans-unit>
        <trans-unit id="35efbc72fabdb55c68f4edabf07f195df0056401" translate="yes" xml:space="preserve">
          <source>New method added: &lt;a href=&quot;array/includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">追加された新しいメソッド：&lt;a href=&quot;array/includes&quot;&gt; &lt;code&gt;Array.prototype.includes()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="22da9740a337ab48e0f49b7d058507681ec7d15a" translate="yes" xml:space="preserve">
          <source>New methods &lt;a href=&quot;math/log10&quot;&gt;&lt;code&gt;log10()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/log2&quot;&gt;&lt;code&gt;log2()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/log1p&quot;&gt;&lt;code&gt;log1p()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/expm1&quot;&gt;&lt;code&gt;expm1()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/cosh&quot;&gt;&lt;code&gt;cosh()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/sinh&quot;&gt;&lt;code&gt;sinh()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/tanh&quot;&gt;&lt;code&gt;tanh()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/acosh&quot;&gt;&lt;code&gt;acosh()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/asinh&quot;&gt;&lt;code&gt;asinh()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/atanh&quot;&gt;&lt;code&gt;atanh()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/hypot&quot;&gt;&lt;code&gt;hypot()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/trunc&quot;&gt;&lt;code&gt;trunc()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/sign&quot;&gt;&lt;code&gt;sign()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/imul&quot;&gt;&lt;code&gt;imul()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/fround&quot;&gt;&lt;code&gt;fround()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math/cbrt&quot;&gt;&lt;code&gt;cbrt()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;math/clz32&quot;&gt;&lt;code&gt;clz32()&lt;/code&gt;&lt;/a&gt; added.</source>
          <target state="translated">新しいメソッド&lt;a href=&quot;math/log1p&quot;&gt; &lt;code&gt;log1p()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;math/log10&quot;&gt; &lt;code&gt;log10()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/log2&quot;&gt; &lt;code&gt;log2()&lt;/code&gt; &lt;/a&gt;、log1p（）、&lt;a href=&quot;math/expm1&quot;&gt; &lt;code&gt;expm1()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/cosh&quot;&gt; &lt;code&gt;cosh()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/sinh&quot;&gt; &lt;code&gt;sinh()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/tanh&quot;&gt; &lt;code&gt;tanh()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/acosh&quot;&gt; &lt;code&gt;acosh()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/asinh&quot;&gt; &lt;code&gt;asinh()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/atanh&quot;&gt; &lt;code&gt;atanh()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/hypot&quot;&gt; &lt;code&gt;hypot()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/trunc&quot;&gt; &lt;code&gt;trunc()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/sign&quot;&gt; &lt;code&gt;sign()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/imul&quot;&gt; &lt;code&gt;imul()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/fround&quot;&gt; &lt;code&gt;fround()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math/cbrt&quot;&gt; &lt;code&gt;cbrt()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;math/clz32&quot;&gt; &lt;code&gt;clz32()&lt;/code&gt; が&lt;/a&gt;追加されました。</target>
        </trans-unit>
        <trans-unit id="4576b1cdd1a75ff690a3d4c2e228c09d191ca7b7" translate="yes" xml:space="preserve">
          <source>New methods added: &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/findindex&quot;&gt;&lt;code&gt;findIndex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/fill&quot;&gt;&lt;code&gt;fill&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/copywithin&quot;&gt;&lt;code&gt;copyWithin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">追加された新しいメソッド：&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/findindex&quot;&gt; &lt;code&gt;findIndex&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/fill&quot;&gt; &lt;code&gt;fill&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/copywithin&quot;&gt; &lt;code&gt;copyWithin&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c5d3d80d6e6b23f9c9c31132f3f8ac1135c271c" translate="yes" xml:space="preserve">
          <source>New methods added: &lt;a href=&quot;array/isarray&quot;&gt;&lt;code&gt;Array.isArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/indexof&quot;&gt;&lt;code&gt;indexOf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/lastindexof&quot;&gt;&lt;code&gt;lastIndexOf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/every&quot;&gt;&lt;code&gt;every&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/foreach&quot;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/reduceright&quot;&gt;&lt;code&gt;reduceRight&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">追加された新しいメソッド：&lt;a href=&quot;array/isarray&quot;&gt; &lt;code&gt;Array.isArray&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/indexof&quot;&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/lastindexof&quot;&gt; &lt;code&gt;lastIndexOf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/every&quot;&gt; &lt;code&gt;every&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/some&quot;&gt; &lt;code&gt;some&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/foreach&quot;&gt; &lt;code&gt;forEach&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/reduce&quot;&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/reduceright&quot;&gt; &lt;code&gt;reduceRight&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a012fda7a04adcf12c5afca05aadad805a2c8321" translate="yes" xml:space="preserve">
          <source>New methods and properties added: &lt;a href=&quot;number/epsilon&quot;&gt;&lt;code&gt;EPSILON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/isfinite&quot;&gt;&lt;code&gt;isFinite&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/isinteger&quot;&gt;&lt;code&gt;isInteger&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;isNaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/parsefloat&quot;&gt;&lt;code&gt;parseFloat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/parseint&quot;&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">追加された新しいメソッドとプロパティ：&lt;a href=&quot;number/epsilon&quot;&gt; &lt;code&gt;EPSILON&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;number/isfinite&quot;&gt; &lt;code&gt;isFinite&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;number/isinteger&quot;&gt; &lt;code&gt;isInteger&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;isNaN&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;number/parsefloat&quot;&gt; &lt;code&gt;parseFloat&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;number/parseint&quot;&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e062df5eb2babfba09feb7f8ce039eda0edaffa" translate="yes" xml:space="preserve">
          <source>New notations in ECMAScript 2015</source>
          <target state="translated">ECMAScript 2015 の新しい表記法</target>
        </trans-unit>
        <trans-unit id="9cd201883d862a52b0be469a4df5110e0199e682" translate="yes" xml:space="preserve">
          <source>New runtime errors</source>
          <target state="translated">新しいランタイムエラー</target>
        </trans-unit>
        <trans-unit id="f5fc78d78a498ec3ad24279fd81c75260eb84035" translate="yes" xml:space="preserve">
          <source>New: &lt;code&gt;[for (i of numbers) i * 2]&lt;/code&gt;</source>
          <target state="translated">新規： &lt;code&gt;[for (i of numbers) i * 2]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc04f1621f986e31a64bebcec4c536c6670bfcb8" translate="yes" xml:space="preserve">
          <source>New: &lt;code&gt;[for (x of [0, 1, 2]) ()=&amp;gt;x][1]() // 1, each iteration creates a fresh binding for x. &lt;/code&gt;</source>
          <target state="translated">新規： &lt;code&gt;[for (x of [0, 1, 2]) ()=&amp;gt;x][1]() // 1, each iteration creates a fresh binding for x. &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e47e20caa1fc9b842eb6aad6b5043454041447f2" translate="yes" xml:space="preserve">
          <source>New: Arrow functions, Generator functions, default parameters, rest parameters.</source>
          <target state="translated">新機能です。矢印関数、ジェネレータ関数、デフォルトパラメータ、残りのパラメータ。</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="bedd4ab5dc06f676dac6118d694e9cae3887b0d2" translate="yes" xml:space="preserve">
          <source>No binding of &lt;code&gt;arguments&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 束縛なし</target>
        </trans-unit>
        <trans-unit id="ea00acbd49f88aab365d53c50e9542039bde2547" translate="yes" xml:space="preserve">
          <source>No change.</source>
          <target state="translated">変化はありません。</target>
        </trans-unit>
        <trans-unit id="9b1fcbda693f085c4d6d33acbf333e420ba23fca" translate="yes" xml:space="preserve">
          <source>No changes.</source>
          <target state="translated">変化はありません。</target>
        </trans-unit>
        <trans-unit id="99d07fe9e437e67fac02eb30ab57840edfc9ec5e" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;javascript.builtins.WebAssembly.Global.prototype&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="translated">互換性データが見つかりません。「javascript.builtins.WebAssembly.Global.prototype」（深さ：1）の&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;データをMDN互換性データリポジトリに提供してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a97d87364553370d0a46bcf5e2bf283e8c7b6493" translate="yes" xml:space="preserve">
          <source>No matter what, &lt;code&gt;foo&lt;/code&gt;'s &lt;code&gt;this&lt;/code&gt; is set to what it was when it was created (in the example above, the global object). The same applies to arrow functions created inside other functions: their &lt;code&gt;this&lt;/code&gt; remains that of the enclosing lexical context.</source>
          <target state="translated">何、どんなに &lt;code&gt;foo&lt;/code&gt; さん &lt;code&gt;this&lt;/code&gt; それが（グローバルオブジェクト、上記の例で）作成されたとき、それが何だったかに設定されています。同じことが他の関数の内部で作成された矢印関数にも当てはまります。それらは、 &lt;code&gt;this&lt;/code&gt; を囲んでいる字句コンテキストのそれのままです。</target>
        </trans-unit>
        <trans-unit id="9b0dfa57d315daee94b26c05846cfc9279894f61" translate="yes" xml:space="preserve">
          <source>No non-null object</source>
          <target state="translated">非 null オブジェクトはありません。</target>
        </trans-unit>
        <trans-unit id="0cf351c6879d24ab2313e5015e7fda03e5918ed2" translate="yes" xml:space="preserve">
          <source>No operation for uninitialized values (sparse arrays)</source>
          <target state="translated">初期化されていない値(疎な配列)に対する操作はありません。</target>
        </trans-unit>
        <trans-unit id="7124c63029b1f42ee5194f7a0bf73f8290447e26" translate="yes" xml:space="preserve">
          <source>No permission to access document</source>
          <target state="translated">文書へのアクセスを許可しない</target>
        </trans-unit>
        <trans-unit id="7418c52ec0ed46f6dd897d5e8cf3a1bce3ecae63" translate="yes" xml:space="preserve">
          <source>No properties</source>
          <target state="translated">物件はありません。</target>
        </trans-unit>
        <trans-unit id="85e4f309cabe48b9aa4e70f7d02f76fc70cb154c" translate="yes" xml:space="preserve">
          <source>No separate &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">別途 &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90b723811bbcd29fcd775259110211c736e6cc5d" translate="yes" xml:space="preserve">
          <source>No string concatenation</source>
          <target state="translated">文字列連結なし</target>
        </trans-unit>
        <trans-unit id="783029fd374c4e3a3bb6b14f4cbbab0aec2672a5" translate="yes" xml:space="preserve">
          <source>No strings in typed arrays</source>
          <target state="translated">型付き配列では文字列を使用しない</target>
        </trans-unit>
        <trans-unit id="a29be68055fcd821421daceb3b0a89ab3ff31d3c" translate="yes" xml:space="preserve">
          <source>No support for an undefined description.</source>
          <target state="translated">未定義の記述には対応していません。</target>
        </trans-unit>
        <trans-unit id="de908e478c03080cf2e59dc459f7282c468d397a" translate="yes" xml:space="preserve">
          <source>No variable name</source>
          <target state="translated">変数名がありません</target>
        </trans-unit>
        <trans-unit id="f5804885b58e4e8d3f8f18966a078c574a206330" translate="yes" xml:space="preserve">
          <source>No-break space</source>
          <target state="translated">ノーブレークスペース</target>
        </trans-unit>
        <trans-unit id="3cede159aa73f967896140194ccc2a5a57d4e5f1" translate="yes" xml:space="preserve">
          <source>No-op forwarding proxy</source>
          <target state="translated">ノーオペ転送プロキシ</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="cd162c52c98aae8684633d7b414ed89b23a893c3" translate="yes" xml:space="preserve">
          <source>Non configurable array element</source>
          <target state="translated">設定不可能な配列要素</target>
        </trans-unit>
        <trans-unit id="31b9f8e707060fb606f21a05f7411d3493f064b0" translate="yes" xml:space="preserve">
          <source>Non-configurable properties</source>
          <target state="translated">非設定可能なプロパティ</target>
        </trans-unit>
        <trans-unit id="21a990941d2a774733cf199d891e684299b3742a" translate="yes" xml:space="preserve">
          <source>Non-configurable properties are not super common, but they can be created using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/object/freeze&quot;&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">設定不可能なプロパティはそれほど一般的ではありませんが、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../global_objects/object/freeze&quot;&gt; &lt;code&gt;Object.freeze()&lt;/code&gt; &lt;/a&gt;を使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="d5d4f4e574e4cd7702ef26d6b39b3ab8a2813078" translate="yes" xml:space="preserve">
          <source>Non-configurable properties cannot be removed. This includes properties of built-in objects like &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and properties that are created as non-configurable with methods like &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構成できないプロパティは削除できません。これには、&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;などの組み込みオブジェクトのプロパティと、&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;などのメソッドで構成不可能として作成されたプロパティが含まれます。</target>
        </trans-unit>
        <trans-unit id="3b3f72a04edeed6042a629bb543c4d10ed5a1ad3" translate="yes" xml:space="preserve">
          <source>Non-configurable properties created by &lt;code&gt;Object.defineProperty&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.defineProperty&lt;/code&gt; によって作成された構成不可能なプロパティ</target>
        </trans-unit>
        <trans-unit id="21e70857a3796b6611a87ec74b6287d45ad26d67" translate="yes" xml:space="preserve">
          <source>Non-generator method definitions cannot contain the &lt;code&gt;yield&lt;/code&gt; keyword. This means that &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;legacy generator functions&lt;/a&gt; won't work either, and will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. Always use &lt;code&gt;yield&lt;/code&gt; in conjunction with the asterisk (&lt;code&gt;*&lt;/code&gt;).</source>
          <target state="translated">ジェネレーター以外のメソッド定義に &lt;code&gt;yield&lt;/code&gt; キーワードを含めることはできません。これは、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;レガシージェネレーター関数も機能&lt;/a&gt;せず、&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;をスローすることを意味します。常にアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）と組み合わせて &lt;code&gt;yield&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="59e6b7d2f8f23f5f5b0b3185cfe061f28315b226" translate="yes" xml:space="preserve">
          <source>Non-identity (&lt;code&gt;a !== b&lt;/code&gt;)</source>
          <target state="translated">同一性なし（ &lt;code&gt;a !== b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="08276813a3ca6c55a0fe8a87f813f3801c43a5d5" translate="yes" xml:space="preserve">
          <source>Non-identity / strict inequality (!==)</source>
          <target state="translated">非同一性/厳密な不等式(!==)</target>
        </trans-unit>
        <trans-unit id="14f08c6d0fe3dec0ebf55de6f111c257d895f76f" translate="yes" xml:space="preserve">
          <source>Non-leaking Arrow Functions</source>
          <target state="translated">ノンリークアロー関数</target>
        </trans-unit>
        <trans-unit id="f3d2dc263f87c0d2d84c2bc6289ee1e6dbe46903" translate="yes" xml:space="preserve">
          <source>Non-object coercion</source>
          <target state="translated">非対象強制</target>
        </trans-unit>
        <trans-unit id="26ff9dec765c27e6a61475bc905c65f18baf9b53" translate="yes" xml:space="preserve">
          <source>Non-standard and deprecated way</source>
          <target state="translated">非標準で非推奨の方法</target>
        </trans-unit>
        <trans-unit id="adaa1c47c48625a937afbb12fd85f832796659ae" translate="yes" xml:space="preserve">
          <source>Non-standard date strings</source>
          <target state="translated">非標準の日付文字列</target>
        </trans-unit>
        <trans-unit id="ca5c3b035aa809710c6689b77ab9cb8d9228893c" translate="yes" xml:space="preserve">
          <source>Non-standard features</source>
          <target state="translated">非標準機能</target>
        </trans-unit>
        <trans-unit id="1ad79462eb26236358dd06be87b70b091edb4c28" translate="yes" xml:space="preserve">
          <source>Non-strict functions that are passed only simple parameters (that is, not rest, default, or restructured parameters) will sync the value of variables new values in the body of the function with the &lt;code&gt;arguments&lt;/code&gt; object, and vice versa:</source>
          <target state="translated">単純なパラメーター（つまり、rest、default、または再構築されたパラメーターではない）のみが渡される非厳密な関数は、関数の本体の変数の新しい値を &lt;code&gt;arguments&lt;/code&gt; オブジェクトと同期します。その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="f6f0ec38f327f319b4bcd574b6192c8978dca32b" translate="yes" xml:space="preserve">
          <source>Non-well-formed iterables</source>
          <target state="translated">非整形イテレータブル</target>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="7161bb4b99446fa501c3ceb7aedb6a85e373f596" translate="yes" xml:space="preserve">
          <source>Nonidentity operator.</source>
          <target state="translated">非同一性演算子。</target>
        </trans-unit>
        <trans-unit id="14656ed74ab77f997a9626a118a0b93f88217ad2" translate="yes" xml:space="preserve">
          <source>Normal space</source>
          <target state="translated">通常の空間</target>
        </trans-unit>
        <trans-unit id="cb7726a2d816826dddce80338e1e351235034774" translate="yes" xml:space="preserve">
          <source>Normal space, but no point at which a line may break</source>
          <target state="translated">通常の空間だが、線が切れる点はない。</target>
        </trans-unit>
        <trans-unit id="2f1583623455f8243b26ee06713b7076b1d7169a" translate="yes" xml:space="preserve">
          <source>Normal variables in JavaScript can't be deleted using the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator. In strict mode, an attempt to delete a variable will throw an error and is not allowed.</source>
          <target state="translated">JavaScriptの通常の変数は、 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 演算子を使用して削除することはできません。厳密モードでは、変数を削除しようとするとエラーがスローされ、許可されません。</target>
        </trans-unit>
        <trans-unit id="40982f925ee19769c42f549717d8ee70798c4b05" translate="yes" xml:space="preserve">
          <source>Not a codepoint</source>
          <target state="translated">コードポイントではなく</target>
        </trans-unit>
        <trans-unit id="33f2c395db1e1eb4df8474dbb567f9bd66711316" translate="yes" xml:space="preserve">
          <source>Not a constructor</source>
          <target state="translated">コンストラクタではない</target>
        </trans-unit>
        <trans-unit id="6d358abaff1485fb49d572a68e47b82b693e6145" translate="yes" xml:space="preserve">
          <source>Not a function</source>
          <target state="translated">機能ではない</target>
        </trans-unit>
        <trans-unit id="3cde9b1853c037e517613f587ee3bd3ce085f2f8" translate="yes" xml:space="preserve">
          <source>Not an instanceof</source>
          <target state="translated">のインスタンスではなく</target>
        </trans-unit>
        <trans-unit id="1290581ef5b7b0f1183c494b6d4b0e171acf60ca" translate="yes" xml:space="preserve">
          <source>Not constructable with &lt;code&gt;new&lt;/code&gt; (ES2016)</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; （ES2016）では構成できません</target>
        </trans-unit>
        <trans-unit id="815f1f0049cf798fb57acca1d98e1ff9f708e142" translate="yes" xml:space="preserve">
          <source>Not defined</source>
          <target state="translated">定義されていない</target>
        </trans-unit>
        <trans-unit id="fd4dd0b6bb7f1cc7b045b70a26b58a50488d5a30" translate="yes" xml:space="preserve">
          <source>Not enough brackets</source>
          <target state="translated">ブラケットが足りない</target>
        </trans-unit>
        <trans-unit id="e13c21189af563620a26d251453f525698f9fcdd" translate="yes" xml:space="preserve">
          <source>Not optimized for frequent additions and removals of key-value pairs.</source>
          <target state="translated">キーと値のペアを頻繁に追加したり削除したりするために最適化されていません。</target>
        </trans-unit>
        <trans-unit id="7e7edabbe7fee71cefbeceec9a9266fb61cd2bbe" translate="yes" xml:space="preserve">
          <source>Not part of a current ECMA-262 specification. Implemented in JavaScript 1.6 and deprecated.</source>
          <target state="translated">現在のECMA-262仕様の一部ではありません。JavaScript 1.6 で実装され、非推奨。</target>
        </trans-unit>
        <trans-unit id="ec60a5240ccc0e46f9df830b76490450a0a060d0" translate="yes" xml:space="preserve">
          <source>Not part of any specifications.</source>
          <target state="translated">仕様の一部ではありません。</target>
        </trans-unit>
        <trans-unit id="67eb3c8bee76aa560a2df9bc1902473ce47e9b0c" translate="yes" xml:space="preserve">
          <source>Not part of any specifications. Implemented in JavaScript 1.2.</source>
          <target state="translated">仕様の一部ではありません。JavaScript 1.2で実装されています。</target>
        </trans-unit>
        <trans-unit id="9727767999f6f49b96e43b9df9cdab3894078e4b" translate="yes" xml:space="preserve">
          <source>Not part of any standard. Deprecated in favor of &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; in ECMAScript 3.</source>
          <target state="translated">標準の一部ではありません。ECMAScript3の&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;を優先して非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="0751ffe6a171fa0caec8d2cb58f80c7e4e56c4c5" translate="yes" xml:space="preserve">
          <source>Not part of any standard. Implemented in JavaScript 1.1 and removed in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=7224&quot;&gt;bug 7224&lt;/a&gt; due to potentially vulnerable for security.</source>
          <target state="translated">標準の一部ではありません。JavaScript 1.1で実装され、潜在的にセキュリティの脆弱性があるため&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=7224&quot;&gt;バグ7224で&lt;/a&gt;削除されました。</target>
        </trans-unit>
        <trans-unit id="8b41cea1251aee48872864ecdcbb33b5e062c34f" translate="yes" xml:space="preserve">
          <source>Not part of the ECMAScript specification yet.</source>
          <target state="translated">ECMAScript の仕様にはまだ含まれていません。</target>
        </trans-unit>
        <trans-unit id="f76f2339b380c09635f034929c4240ec42e159c1" translate="yes" xml:space="preserve">
          <source>Not part of the current ECMA-262 standard: Multiple catch clauses and conditional clauses (SpiderMonkey extension, JavaScript 1.5).</source>
          <target state="translated">現在のECMA-262標準の一部ではありません。複数のキャッチ句と条件付き句 (SpiderMonkey拡張、JavaScript 1.5)。</target>
        </trans-unit>
        <trans-unit id="138ecf7d5bb8c24b6f6caef459f68a61b8e2abba" translate="yes" xml:space="preserve">
          <source>Not suitable for &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; methods, which generally rely on establishing a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;.&lt;/a&gt;</source>
          <target state="translated">通常、&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;確立に依存&lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; 、バインドには適していません。</target>
        </trans-unit>
        <trans-unit id="cefb01124c75c1f4210a425aeab4be2e09cee2b3" translate="yes" xml:space="preserve">
          <source>Not to be confused with Unix epoch time. To get total milliseconds since 1970/01/01, use the method &quot;.getTime()&quot;.</source>
          <target state="translated">Unixのエポックタイムと混同しないようにしてください。1970/01/01からの総ミリ秒数を取得するには、&quot;.getTime()&quot;というメソッドを使います。</target>
        </trans-unit>
        <trans-unit id="e1a3c34afaca2db48ad204740e08882a029318c0" translate="yes" xml:space="preserve">
          <source>Not used in this specification. Present for backward compatibility.</source>
          <target state="translated">この仕様では使用しない。下位互換性のために存在する。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="798e4fecd1999107e0319bcedac748873330c2d0" translate="yes" xml:space="preserve">
          <source>Note how the promise chain is not built-up in one go. Instead, the promise chain is constructed in stages as control is successively yielded from and returned to the async function. As a result, we must be mindful of error handling behavior when dealing with concurrent asynchronous operations.</source>
          <target state="translated">プロミスチェーンが一度に構築されるのではないことに注意してください。その代わりに、非同期関数から制御を受けたり、非同期関数に返されたりすることで、プロミスチェーンは段階的に構築されています。その結果、同時並行の非同期操作を扱う際には、エラー処理の動作に注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="123f29f42750e7479b6ec012a3080d44aeab4c94" translate="yes" xml:space="preserve">
          <source>Note how you've got to include a second function invocation operator at the end of the accessor to actually invoke the referenced function and log the value stored inside it (e.g. &lt;code&gt;get(0)()&lt;/code&gt; rather than &lt;code&gt;get(0)&lt;/code&gt;) .</source>
          <target state="translated">アクセサーの最後に2番目の関数呼び出し演算子を含めて、参照される関数を実際に呼び出し、その中に格納されている値をログに記録する方法に注意してください（例： &lt;code&gt;get(0)()&lt;/code&gt; ではなく &lt;code&gt;get(0)&lt;/code&gt; ()）。</target>
        </trans-unit>
        <trans-unit id="cec81496111d3c9b16de005cfdcd4162f96e81e7" translate="yes" xml:space="preserve">
          <source>Note how you've got to include a second function invocation operator at the end of the accessor to actually retrieve the value stored inside the reference (e.g. &lt;code&gt;get(0)()&lt;/code&gt; rather than &lt;code&gt;get(0)&lt;/code&gt;) &amp;mdash; it is a function rather than a simple value.</source>
          <target state="translated">参照内に格納されている値を実際に取得するために、アクセサーの最後に2番目の関数呼び出し演算子を含める必要があることに注意してください（例： &lt;code&gt;get(0)()&lt;/code&gt; ではなく &lt;code&gt;get(0)&lt;/code&gt; ()）&amp;mdash;これは関数ではなく関数です単純な値。</target>
        </trans-unit>
        <trans-unit id="7821d32b61e2829f2bb6f9992ba1b10e2f290582" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; に関する注意</target>
        </trans-unit>
        <trans-unit id="91f2222a22cf66e18967a6a7643eef0c67ae4c10" translate="yes" xml:space="preserve">
          <source>Note on grouping and short-circuiting</source>
          <target state="translated">グループ化と短絡化の注意点</target>
        </trans-unit>
        <trans-unit id="4f2354437178298c0bfbb8f9801162f7d09646b4" translate="yes" xml:space="preserve">
          <source>Note that '0' doesn't evaluate to &lt;code&gt;true&lt;/code&gt; and '-1' doesn't evaluate to &lt;code&gt;false&lt;/code&gt;. Therefore, when checking if a specific string exists within another string the correct way to check would be:</source>
          <target state="translated">「0」は &lt;code&gt;true&lt;/code&gt; に評価されず、「-1」は &lt;code&gt;false&lt;/code&gt; に評価されないことに注意してください。したがって、特定の文字列が別の文字列内に存在するかどうかを確認する場合、正しい確認方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="05c62717d2905ca58c36719673c46c2cffc2308e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; triggers &lt;a href=&quot;../functions/set&quot;&gt;&lt;code&gt;setters&lt;/code&gt;&lt;/a&gt;, whereas spread syntax doesn't.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; は&lt;/a&gt;&lt;a href=&quot;../functions/set&quot;&gt; &lt;code&gt;setters&lt;/code&gt; &lt;/a&gt;トリガーしますが、spread構文はトリガーしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1fc16af7f3c4f29b3893170e08c41b87a2f2ae51" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; triggers &lt;a href=&quot;../functions/set&quot;&gt;setters&lt;/a&gt; whereas spread syntax doesn't.</source>
          <target state="translated">なお&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;トリガの&lt;a href=&quot;../functions/set&quot;&gt;セッター&lt;/a&gt;スプレッドの構文はそうではないのに対し。</target>
        </trans-unit>
        <trans-unit id="c503f3ee902f80a6d403b329a9d641000167a462" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; triggers &lt;a href=&quot;../functions/set&quot;&gt;setters&lt;/a&gt; whereas the spread operator doesn't.</source>
          <target state="translated">なお&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;トリガの&lt;a href=&quot;../functions/set&quot;&gt;セッター&lt;/a&gt;拡散演算子はそうではないのに対し。</target>
        </trans-unit>
        <trans-unit id="6a4b5ca2ea9d446cc06836ef404a3a1534eda9d8" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; triggers &lt;a href=&quot;../functions/set&quot;&gt;setters&lt;/a&gt;, whereas the spread operator doesn't!</source>
          <target state="translated">&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; は&lt;/a&gt;&lt;a href=&quot;../functions/set&quot;&gt;セッターを&lt;/a&gt;トリガーしますが、spread演算子はトリガーしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1b70c98d89c4a1fcc093b0a11f289e920b83fbda" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../operators/function&quot;&gt;&lt;code&gt;function expressions&lt;/code&gt;&lt;/a&gt; are not hoisted:</source>
          <target state="translated">&lt;a href=&quot;../operators/function&quot;&gt; &lt;code&gt;function expressions&lt;/code&gt; &lt;/a&gt;は巻き上げられないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b88db6585eaabb2baa0140a46d7528f3c6545a6f" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../operators/function&quot;&gt;function expressions&lt;/a&gt; are not hoisted:</source>
          <target state="translated">&lt;a href=&quot;../operators/function&quot;&gt;関数式&lt;/a&gt;は引き上げられないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="440057b7d3a2ffc307e2446c1b3cd38a75a30d82" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;0&lt;/code&gt; doesn't evaluate to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt; doesn't evaluate to &lt;code&gt;false&lt;/code&gt;. Therefore, when checking if a specific string exists within another string, the correct way to check would be:</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; と評価されず、 &lt;code&gt;-1&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; と評価されないことに注意してください。したがって、特定の文字列が別の文字列内に存在するかどうかを確認する場合、確認する正しい方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="71c833a03feec21442aaed0cd1c213bed5ed6688" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;AsyncFunction&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a global object. It can be obtained with the following code:</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; はグローバルオブジェクトでは&lt;em&gt;ない&lt;/em&gt;ことに注意してください。次のコードで取得できます。</target>
        </trans-unit>
        <trans-unit id="8d8672f6336abf908b6aeb3e67aaa07fb51f16c9" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;AsyncFunction&lt;/code&gt; is not a global object. It could be obtained by evaluating the following code.</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; はグローバルオブジェクトではないことに注意してください。次のコードを評価することで取得できます。</target>
        </trans-unit>
        <trans-unit id="7616c0d37ddf092b2eb710f1c15781d6e517e96f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;GeneratorFunction&lt;/code&gt; is not a global object. It could be obtained by evaluating the following code.</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; はグローバルオブジェクトではないことに注意してください。次のコードを評価することで取得できます。</target>
        </trans-unit>
        <trans-unit id="703d6dd9a1dbdd799c913401132dd49ea394dd4e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Object.assign()&lt;/code&gt; does not throw on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; source values.</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; は&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ソース値をスローしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8248ec8d3d8f4add68617faa6dc73848c5e46fc8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;SharedArrayBuffer&lt;/code&gt; was disabled by default in all major browsers on 5 January, 2018 in response to &lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Spectre&lt;/a&gt;. Chrome &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=821270&quot;&gt;re-enabled it in v67&lt;/a&gt; on platforms where its site-isolation feature is enabled to protect against Spectre-style vulnerabilities.</source>
          <target state="translated">2018年1月5日、&lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Spectre&lt;/a&gt;への対応として、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; がすべての主要なブラウザーでデフォルトで無効にされたことに注意してください。Chrome &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=821270&quot;&gt;では、&lt;/a&gt; Spectreスタイルの脆弱性から保護するためにサイト分離機能が有効になっているプラ​​ットフォームで、v67で再度有効にしました。</target>
        </trans-unit>
        <trans-unit id="34137566e555cddb0451d1ebd70b3d07566b3b8f" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;a == b&lt;/code&gt; compares the strings in &lt;code&gt;&lt;var&gt;a&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; for being equal in the usual case-sensitive way. If you wish to compare without regard to upper or lower case characters, use a function similar to this:</source>
          <target state="translated">（注）こと &lt;code&gt;a == b&lt;/code&gt; で文字列を比較し、 &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; 通常、大文字と小文字を区別方法で等しいため。大文字または小文字に関係なく比較する場合は、次のような関数を使用します。 &lt;code&gt;&lt;var&gt;a&lt;/var&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a52db76f66ad2b8ed108c4e3fd51f3f26f49622" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;charCodeAt()&lt;/code&gt; will always return a value that is less than 65536. This is because the higher code points are represented by a pair of (lower valued) &quot;surrogate&quot; pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65536 and above, for such characters, it is necessary to retrieve not only &lt;code&gt;charCodeAt(i)&lt;/code&gt;, but also &lt;code&gt;charCodeAt(i+1)&lt;/code&gt; (as if examining/reproducing a string with two letters), or to use codePointAt(i) instead. See example 2 and 3 below.</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; は常に65536未満の値を返すことに注意してください。これは、高いコードポイントが、実際の文字を構成するために使用される（低い値の）「代理」疑似文字のペアによって表されるためです。このため、値が65536以上の個々の文字の完全な文字を検査または再現するには、そのような文字について、 &lt;code&gt;charCodeAt(i)&lt;/code&gt; だけでなく、 &lt;code&gt;charCodeAt(i+1)&lt;/code&gt; も取得する必要があります（ / 2文字の文字列を再現する）、または代わりにcodePointAt（i）を使用する。以下の例2と3を参照してください。</target>
        </trans-unit>
        <trans-unit id="b985d870c9381c700fdbf978594067a12ee80692" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;current&lt;/code&gt; is not defined and any attempts to access it will result in &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">なお、 &lt;code&gt;current&lt;/code&gt; 定義されておらず、アクセスしようとする試みは、それがになります &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49c3dcd2bd0600d948bf89a0714f591f8231af4c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;current&lt;/code&gt; is not defined, and any attempts to access it will result in &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;current&lt;/code&gt; は定義されておらず、それにアクセスしようとすると &lt;code&gt;undefined&lt;/code&gt; になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="86e08bc52996718f4a1e153291b4081b8f7bc7f8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;encodeURI()&lt;/code&gt; by itself &lt;em&gt;cannot&lt;/em&gt; form proper HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; requests, such as for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;, because &quot;&lt;code&gt;&amp;amp;&lt;/code&gt;&quot;, &quot;&lt;code&gt;+&lt;/code&gt;&quot;, and &quot;&lt;code&gt;=&lt;/code&gt;&quot; are not encoded, which are treated as special characters in &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests. &lt;code&gt;encodeURIComponent()&lt;/code&gt;, however, does encode these characters.</source>
          <target state="translated">「 &lt;code&gt;&amp;amp;&lt;/code&gt; 」、「 &lt;code&gt;+&lt;/code&gt; 」、「 &lt;code&gt;=&lt;/code&gt; 」はエンコードされておらず、 &lt;code&gt;GET&lt;/code&gt; および &lt;code&gt;POST&lt;/code&gt; リクエストでは特殊文字として扱われるため、 &lt;code&gt;encodeURI()&lt;/code&gt; 自体&lt;em&gt;は&lt;/em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt; &lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;/a&gt;などの適切な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET&quot;&gt; &lt;code&gt;GET&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot;&gt; &lt;code&gt;POST&lt;/code&gt; &lt;/a&gt;リクエストを形成&lt;em&gt;できないことに&lt;/em&gt;注意してください。ただし、 &lt;code&gt;encodeURIComponent()&lt;/code&gt; はこれらの文字をエンコードします。</target>
        </trans-unit>
        <trans-unit id="97875263007a8b2dfaac16dc4378638ebbbd5f21" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;encodeURI&lt;/code&gt; by itself &lt;em&gt;cannot&lt;/em&gt; form proper HTTP GET and POST requests, such as for XMLHTTPRequests, because &quot;&amp;amp;&quot;, &quot;+&quot;, and &quot;=&quot; are not encoded, which are treated as special characters in GET and POST requests. &lt;a href=&quot;encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent&lt;/code&gt;&lt;/a&gt;, however, does encode these characters.</source>
          <target state="translated">「＆」、「+」、および「=」はエンコードされず、GETおよびPOSTリクエストで特殊文字として扱われるため、 &lt;code&gt;encodeURI&lt;/code&gt; 自体&lt;em&gt;は&lt;/em&gt; XMLHTTPRequestsなどの適切なHTTP GETおよびPOSTリクエストを形成&lt;em&gt;できないことに&lt;/em&gt;注意してください。ただし、&lt;a href=&quot;encodeuricomponent&quot;&gt; &lt;code&gt;encodeURIComponent&lt;/code&gt; &lt;/a&gt;はこれらの文字をエンコードします。</target>
        </trans-unit>
        <trans-unit id="199ad16d3ea7734573ad0b58572230c80f2ba315" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;foo !== bar&lt;/code&gt;. While they are similar objects, &lt;em&gt;they are not &lt;strong&gt;the same object&lt;/strong&gt;&lt;/em&gt;. And so they are both added to the set.</source>
          <target state="translated">&lt;code&gt;foo !== bar&lt;/code&gt; あることに注意してください。彼らは同様のオブジェクトであるが、&lt;em&gt;そうではありません&lt;strong&gt;同じオブジェクト&lt;/strong&gt;&lt;/em&gt;。そして、両方ともセットに追加されます。</target>
        </trans-unit>
        <trans-unit id="e332343050d1b8bf3c9fdcfc19bf67233d83f5b0" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;super()&lt;/code&gt;, used in the &lt;code&gt;constructor&lt;/code&gt;, can only be used in constructors, and &lt;em&gt;must&lt;/em&gt; be called &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;this&lt;/code&gt; keyword can be used.</source>
          <target state="translated">その注意 &lt;code&gt;super()&lt;/code&gt; で使用される、 &lt;code&gt;constructor&lt;/code&gt; 、コンストラクタでのみ使用することができ、かつ&lt;em&gt;必要があります&lt;/em&gt;と呼ばれる&lt;em&gt;前に、&lt;/em&gt; &lt;code&gt;this&lt;/code&gt; キーワードを使用することができます。</target>
        </trans-unit>
        <trans-unit id="aac73adc8944242ac788dd2a391f317e1c98aef8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;this&lt;/code&gt; may not be the actual value seen by the method: if the method is a function in &lt;a href=&quot;../../strict_mode&quot;&gt;non-strict mode&lt;/a&gt; code, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be replaced with the global object, and primitive values will be boxed. This argument is required.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; はメソッドで見られる実際の値ではない可能性があることに注意してください。メソッドが&lt;a href=&quot;../../strict_mode&quot;&gt;非厳密モード&lt;/a&gt;コードの関数である場合、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;はグローバルオブジェクトに置き換えられ、プリミティブ値はボックス化されます。この引数は必須です。</target>
        </trans-unit>
        <trans-unit id="e30ea4aaaa255e9f899ce8ad6a7352f078bc72cf" translate="yes" xml:space="preserve">
          <source>Note that JSON is &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;not a completely strict subset of JavaScript&lt;/a&gt;, with two line terminators (Line separator and Paragraph separator) which do not require escaping in JSON, but do require escaping in JavaScript.</source>
          <target state="translated">JSONは&lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;JavaScriptの完全に厳密なサブセットで&lt;/a&gt;はないことに注意してください。JSONでエスケープする必要はありませんが、JavaScriptでエスケープする必要がある2つの行ターミネーター（行セパレーターと段落セパレーター）があります。</target>
        </trans-unit>
        <trans-unit id="90c3c7efcf67749c1fad716b1e7c0b167da9b811" translate="yes" xml:space="preserve">
          <source>Note that JavaScript distinguishes between &lt;code&gt;String&lt;/code&gt; objects and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive string&lt;/a&gt; values. (The same is true of &lt;a href=&quot;boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">JavaScriptは、 &lt;code&gt;String&lt;/code&gt; オブジェクトと&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;プリミティブ文字列&lt;/a&gt;値を区別することに注意してください。（&lt;a href=&quot;boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;number&quot;&gt; &lt;code&gt;Numbers&lt;/code&gt; &lt;/a&gt;についても同じことが言えます。）</target>
        </trans-unit>
        <trans-unit id="a13fe16a54826d75af85c1c096f948fc8b696190" translate="yes" xml:space="preserve">
          <source>Note that JavaScript distinguishes between &lt;code&gt;String&lt;/code&gt; objects and primitive string values. (The same is true of &lt;a href=&quot;boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">JavaScriptは &lt;code&gt;String&lt;/code&gt; オブジェクトとプリミティブ文字列値を区別することに注意してください。（&lt;a href=&quot;boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;number&quot;&gt; &lt;code&gt;Numbers&lt;/code&gt; &lt;/a&gt;についても同様です。）</target>
        </trans-unit>
        <trans-unit id="eb48903ad147295aa7c801ec2e07a5a15a2436ea" translate="yes" xml:space="preserve">
          <source>Note that JavaScript has &lt;em&gt;no&lt;/em&gt;&lt;code&gt;goto&lt;/code&gt; statement, you can only use labels with &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt;.</source>
          <target state="translated">JavaScriptには &lt;code&gt;goto&lt;/code&gt; ステートメントが&lt;em&gt;ない&lt;/em&gt;ことに注意してください。ラベルを使用できるのは、 &lt;code&gt;break&lt;/code&gt; または &lt;code&gt;continue&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="5c118cf7d8001c1d337ddff2a3172e652fd77ab5" translate="yes" xml:space="preserve">
          <source>Note that a &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; will be thrown if one attempts to encode a surrogate which is not part of a high-low pair, e.g.,</source>
          <target state="translated">たとえば、高低ペアの一部ではないサロゲートをエンコードしようとすると、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="717a2256e06329faee97dd6ef93c798877eceeb0" translate="yes" xml:space="preserve">
          <source>Note that although &lt;code&gt;obj&lt;/code&gt; is not an array, the method &lt;code&gt;push&lt;/code&gt; successfully incremented &lt;code&gt;obj&lt;/code&gt;'s &lt;code&gt;length&lt;/code&gt; property just like if we were dealing with an actual array.</source>
          <target state="translated">注意がいることを &lt;code&gt;obj&lt;/code&gt; が配列でない、メソッドの &lt;code&gt;push&lt;/code&gt; 成功しインクリメント &lt;code&gt;obj&lt;/code&gt; の &lt;code&gt;length&lt;/code&gt; だけで私たちは実際の配列を扱った場合のようにプロパティを。</target>
        </trans-unit>
        <trans-unit id="12781aabcdb157ccee4b475e9f2e3a084ff89617" translate="yes" xml:space="preserve">
          <source>Note that an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; will be thrown if one attempts to encode a surrogate which is not part of a high-low pair, e.g.,</source>
          <target state="translated">たとえば、高低ペアの一部ではないサロゲートをエンコードしようとすると、&lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt;がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f5229ea194f37e9b69f3ed460ca84c75624d7fc9" translate="yes" xml:space="preserve">
          <source>Note that an object is converted into a primitive if, and only if, its comparand is a primitive. If both operands are objects, they're compared as objects, and the equality test is true only if both refer the same object.</source>
          <target state="translated">オブジェクトは、そのコンパランドがプリミティブである場合にのみ、プリミティブに変換されることに注意してください。両方のオペランドがオブジェクトである場合、それらはオブジェクトとして比較され、両方が同じオブジェクトを参照している場合にのみ、平等性のテストが真となります。</target>
        </trans-unit>
        <trans-unit id="6c04dbd2e7e6b4c6469af154ed10997d74e6810b" translate="yes" xml:space="preserve">
          <source>Note that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, the ranges claimed for the functions below (excluding the one for &lt;code&gt;Math.random()&lt;/code&gt; itself) aren't exact. If extremely large bounds are chosen (2&lt;sup&gt;53&lt;/sup&gt; or higher), it's possible in &lt;em&gt;extremely&lt;/em&gt; rare cases to calculate the usually-excluded upper bound.</source>
          <target state="translated">JavaScriptの数値は、最も近い偶数に丸める動作を持つIEEE 754浮動小数点数であるため、以下の関数に対して要求される範囲（ &lt;code&gt;Math.random()&lt;/code&gt; 自体に対するものを除く）は正確ではないことに注意してください。非常に大きな境界（2 &lt;sup&gt;53&lt;/sup&gt;以上）が選択された場合、&lt;em&gt;非常に&lt;/em&gt;まれなケースで、通常は除外される上限を計算することができます。</target>
        </trans-unit>
        <trans-unit id="96f1469c96baa69bfacf344ea851b7a69278b710" translate="yes" xml:space="preserve">
          <source>Note that attempting to assign a value to &lt;code&gt;latest&lt;/code&gt; will not change it.</source>
          <target state="translated">&lt;code&gt;latest&lt;/code&gt; 値を割り当てようとしても、変更されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ef7ec2027dc9a730bc7cb60ab5e986dd0b83d018" translate="yes" xml:space="preserve">
          <source>Note that classes cannot extend regular (non-constructible) objects. If you want to inherit from a regular object, you can instead use &lt;a href=&quot;global_objects/object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">クラスは通常の（構築できない）オブジェクトを拡張できないことに注意してください。通常のオブジェクトから継承したい場合は、代わりに&lt;a href=&quot;global_objects/object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="dc0096a6458a183b831ed11cda6111da13e9cc10" translate="yes" xml:space="preserve">
          <source>Note that decimal literals can start with a zero (&lt;code&gt;0&lt;/code&gt;) followed by another decimal digit, but If all digits after the leading &lt;code&gt;0&lt;/code&gt; are smaller than 8, the number is interpreted as an octal number. This won't throw in JavaScript, see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=957513&quot;&gt;bug 957513&lt;/a&gt;. See also the page about &lt;a href=&quot;global_objects/parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">10進リテラルは、ゼロ（ &lt;code&gt;0&lt;/code&gt; ）で始まり、その後に別の10進数字が続く場合がありますが、先頭の &lt;code&gt;0&lt;/code&gt; の後のすべての数字が8より小さい場合、数値は8進数として解釈されることに注意してください。これはJavaScriptをスローしません。&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=957513&quot;&gt;バグ957513を&lt;/a&gt;参照してください。&lt;a href=&quot;global_objects/parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;に関するページも参照してください。</target>
        </trans-unit>
        <trans-unit id="85435900a96627fdadbecca322dbd9df4f462217" translate="yes" xml:space="preserve">
          <source>Note that decimal literals can start with a zero (&lt;code&gt;0&lt;/code&gt;) followed by another decimal digit, but If all digits after the leading &lt;code&gt;0&lt;/code&gt; are smaller than 8, the number is interpreted as an octal number. This won't throw in JavaScript, see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=957513&quot;&gt;bug 957513&lt;/a&gt;. See also the page about &lt;a href=&quot;global_objects/parseint#Octal_interpretations_with_no_radix&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">10進リテラルはゼロ（ &lt;code&gt;0&lt;/code&gt; ）で始まり、その後に別の10進数字が続く場合がありますが、先行する &lt;code&gt;0&lt;/code&gt; の後のすべての数字が8より小さい場合、数値は8進数として解釈されます。これはJavaScriptではスローされません。&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=957513&quot;&gt;バグ957513を&lt;/a&gt;参照してください。&lt;a href=&quot;global_objects/parseint#Octal_interpretations_with_no_radix&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;に関するページも参照してください。</target>
        </trans-unit>
        <trans-unit id="9f35339e11014ced44afa24edd50182aea869370" translate="yes" xml:space="preserve">
          <source>Note that due to using 32-bit representation for numbers both &lt;code&gt;~-1&lt;/code&gt; and &lt;code&gt;~4294967295&lt;/code&gt; (2&lt;sup&gt;32&lt;/sup&gt;-1) results in &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">数値に32ビット表現を使用しているため、 &lt;code&gt;~-1&lt;/code&gt; と &lt;code&gt;~4294967295&lt;/code&gt; （2 &lt;sup&gt;32&lt;/sup&gt; -1）の両方が &lt;code&gt;0&lt;/code&gt; になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="568aee6056dc72c380bd4726d1404da50d8c5439" translate="yes" xml:space="preserve">
          <source>Note that due to web compatibility, &lt;code&gt;RegExp.$N&lt;/code&gt; will still return an empty string instead of &lt;code&gt;undefined&lt;/code&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1053944&quot;&gt;bug 1053944&lt;/a&gt;).</source>
          <target state="translated">Web互換性のため、 &lt;code&gt;RegExp.$N&lt;/code&gt; は &lt;code&gt;undefined&lt;/code&gt; なく空の文字列を返します（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1053944&quot;&gt;バグ1053944&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c509c9b9a38352dd5249555889e83bafbdf6d977" translate="yes" xml:space="preserve">
          <source>Note that due to web compatibility, &lt;code&gt;RegExp.&lt;var&gt;$N&lt;/var&gt;&lt;/code&gt; will still return an empty string instead of &lt;code&gt;undefined&lt;/code&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1053944&quot;&gt;bug 1053944&lt;/a&gt;).</source>
          <target state="translated">Webの互換性のため、 &lt;code&gt;RegExp.&lt;var&gt;$N&lt;/var&gt;&lt;/code&gt; 注意してください。$ Nは、 &lt;code&gt;undefined&lt;/code&gt; なく空の文字列を返します（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1053944&quot;&gt;バグ1053944&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b9b82040c06715267dc842bb40776915884ffbd2" translate="yes" xml:space="preserve">
          <source>Note that functions &lt;code&gt;concurrentStart&lt;/code&gt; and &lt;code&gt;concurrentPromise&lt;/code&gt; are not functionally equivalent.</source>
          <target state="translated">関数 &lt;code&gt;concurrentStart&lt;/code&gt; と &lt;code&gt;concurrentPromise&lt;/code&gt; は機能的に同等ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7cdd0462ef84b181b460e37aeb92c8933e6f33f5" translate="yes" xml:space="preserve">
          <source>Note that getters are not &amp;ldquo;lazy&amp;rdquo; or &amp;ldquo;memozied&amp;rdquo; by nature; you must implement this technique if you desire this behavior.</source>
          <target state="translated">ゲッターは本質的に「怠惰」または「記憶」ではないことに注意してください。この動作が必要な場合は、この手法を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="e1e6d60f1a1e4fdec1c9ed2c97ceec4319a62e8f" translate="yes" xml:space="preserve">
          <source>Note that in both NodeJS &lt;a href=&quot;http://www.commonjs.org/&quot;&gt;CommonJS&lt;/a&gt; modules and native &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot;&gt;ECMAScript modules&lt;/a&gt;, top-level variable declarations are scoped to the module, and are not, therefore added as properties to the global object.</source>
          <target state="translated">NodeJS &lt;a href=&quot;http://www.commonjs.org/&quot;&gt;CommonJS&lt;/a&gt;モジュールとネイティブ&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot;&gt;ECMAScriptモジュールの&lt;/a&gt;両方で、トップレベルの変数宣言はモジュールにスコープされているため、プロパティとしてグローバルオブジェクトに追加されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c265acc06135cb9b4f9bf1a1d3c8a588f9da028f" translate="yes" xml:space="preserve">
          <source>Note that in non&amp;ndash;strict mode, with &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, if the value passed as &lt;code&gt;this&lt;/code&gt; is not an object, an attempt will be made to convert it to an object. Values &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; become the global object. Primitives like &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;'foo'&lt;/code&gt; will be converted to an Object using the related constructor, so the primitive number &lt;code&gt;7&lt;/code&gt; is converted to an object as if by &lt;code&gt;new Number(7)&lt;/code&gt; and the string &lt;code&gt;'foo'&lt;/code&gt; to an object as if by &lt;code&gt;new String('foo')&lt;/code&gt;, e.g.</source>
          <target state="translated">非厳密モードでは、 &lt;code&gt;call&lt;/code&gt; と &lt;code&gt;apply&lt;/code&gt; を使用して、 &lt;code&gt;this&lt;/code&gt; がオブジェクトではないために渡された値がオブジェクトでない場合、それをオブジェクトに変換しようとすることに注意してください。値は &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; グローバルオブジェクトになります。 &lt;code&gt;7&lt;/code&gt; や &lt;code&gt;'foo'&lt;/code&gt; などのプリミティブは関連するコンストラクターを使用してオブジェクトに変換されるため、プリミティブ番号 &lt;code&gt;7&lt;/code&gt; は &lt;code&gt;new Number(7)&lt;/code&gt; ようにオブジェクトに変換され、文字列 &lt;code&gt;'foo'&lt;/code&gt; は &lt;code&gt;new String('foo')&lt;/code&gt; ようにオブジェクトに変換されます。（ 'foo'）、例えば</target>
        </trans-unit>
        <trans-unit id="6a50780aeb7a827d28054dd1260fddffa7beb516" translate="yes" xml:space="preserve">
          <source>Note that in non-standard, pre-ES2015 implementations the &lt;code&gt;configurable&lt;/code&gt; attribute was &lt;code&gt;false&lt;/code&gt; as well.</source>
          <target state="translated">ES2015より前の非標準の実装では、 &lt;code&gt;configurable&lt;/code&gt; 属性も &lt;code&gt;false&lt;/code&gt; であったことに注意してください。</target>
        </trans-unit>
        <trans-unit id="18152720c80dbf06834c6e40dd6c2a4141fa617a" translate="yes" xml:space="preserve">
          <source>Note that in the &lt;code&gt;3d&lt;/code&gt; example, &lt;code&gt;'3d'&lt;/code&gt; had to be quoted. It's possible to quote the JavaScript array indexes as well (e.g., &lt;code&gt;years['2']&lt;/code&gt; instead of &lt;code&gt;years[2]&lt;/code&gt;), although it's not necessary. The 2 in &lt;code&gt;years[2]&lt;/code&gt; is coerced into a string by the JavaScript engine through an implicit &lt;code&gt;toString&lt;/code&gt; conversion. It is, for this reason, that &lt;code&gt;'2'&lt;/code&gt; and &lt;code&gt;'02'&lt;/code&gt; would refer to two different slots on the &lt;code&gt;years&lt;/code&gt; object and the following example could be &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;3d&lt;/code&gt; の例では、 &lt;code&gt;'3d'&lt;/code&gt; を引用符で囲む必要があることに注意してください。必須ではありませんが、JavaScript配列のインデックスを引用することもできます（例： &lt;code&gt;years['2']&lt;/code&gt; ではなくyears ['2' &lt;code&gt;years[2]&lt;/code&gt; ）。 &lt;code&gt;years[2]&lt;/code&gt; の2は、暗黙的な &lt;code&gt;toString&lt;/code&gt; 変換によってJavaScriptエンジンによって文字列に強制変換されます。このため、 &lt;code&gt;'2'&lt;/code&gt; と &lt;code&gt;'02'&lt;/code&gt; は &lt;code&gt;years&lt;/code&gt; オブジェクトの2つの異なるスロットを参照し、次の例が &lt;code&gt;true&lt;/code&gt; 可能性があります。</target>
        </trans-unit>
        <trans-unit id="e0a0c0b10e66ec37f22c79ff0342f1476fb36d18" translate="yes" xml:space="preserve">
          <source>Note that in the &lt;code&gt;if&lt;/code&gt; test, a reference to &lt;code&gt;noFunc&lt;/code&gt; is used&amp;mdash;there are no brackets &quot;()&quot; after the function name so the actual function is not called.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; テストでは、 &lt;code&gt;noFunc&lt;/code&gt; への参照が使用されていることに注意してください。関数名の後に括弧（（））がないため、実際の関数は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="6f286f755a65bf78c08beee0b946804e45a58f54" translate="yes" xml:space="preserve">
          <source>Note that in the above example, there is no &lt;code&gt;await&lt;/code&gt; statement on the &lt;code&gt;return&lt;/code&gt; statement, because the return value of an &lt;code&gt;async function&lt;/code&gt; is implicitly wrapped in &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">上記の例では、何も存在しないことを注意 &lt;code&gt;await&lt;/code&gt; の声明 &lt;code&gt;return&lt;/code&gt; の戻り値ため、ステートメントは、 &lt;code&gt;async function&lt;/code&gt; 、暗黙的にラップされ&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt; &lt;code&gt;Promise.resolve&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dae5ea370e118e8b1c249dfd5e9cce3d31256d24" translate="yes" xml:space="preserve">
          <source>Note that in the last case there are no newly created objects.</source>
          <target state="translated">最後のケースでは、新たに作成されたオブジェクトがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="05422b1cceaa80609cd6103fbfcbcbcddbc158b9" translate="yes" xml:space="preserve">
          <source>Note that it is not possible to use &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; with &lt;code&gt;export default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; を &lt;code&gt;export default&lt;/code&gt; では使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="afc211002dbae03e352470035a8ca856a0b4971a" translate="yes" xml:space="preserve">
          <source>Note that legacy octal numbers with just a leading zero won't work for &lt;code&gt;BigInt&lt;/code&gt;:</source>
          <target state="translated">先行ゼロのみのレガシー8進数は、 &lt;code&gt;BigInt&lt;/code&gt; では機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2d1be0a0947bb569147f37a17d68d634a985473c" translate="yes" xml:space="preserve">
          <source>Note that many math functions have a precision that's implementation-dependent. This means that different browsers can give a different result, and even the same JS engine on a different OS or architecture can give different results.</source>
          <target state="translated">多くの数学関数の精度は実装に依存することに注意してください。つまり、ブラウザが違えば異なる結果が得られる可能性があり、同じJSエンジンでもOSやアーキテクチャが違えば異なる結果が得られる可能性があるということです。</target>
        </trans-unit>
        <trans-unit id="a86b42f5282d2c308201cc21e1596a62c4c59e64" translate="yes" xml:space="preserve">
          <source>Note that octal literals and octal escape sequences are deprecated and will present an additional deprecation warning. With ECMAScript 6 and later, the syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;O&quot; (&lt;code&gt;0o&lt;/code&gt; or &lt;code&gt;0O)&lt;/code&gt;. See the page about &lt;a href=&quot;../lexical_grammar#Octal&quot;&gt;lexical grammar&lt;/a&gt; for more information.</source>
          <target state="translated">8進リテラルと8進エスケープシーケンスは非推奨であり、追加の非推奨警告が表示されることに注意してください。ECMAScript 6以降では、構文は先行ゼロを使用し、その後に小文字または大文字のラテン文字 &quot;O&quot;（ &lt;code&gt;0o&lt;/code&gt; または &lt;code&gt;0O)&lt;/code&gt; が続きます。詳細については、&lt;a href=&quot;../lexical_grammar#Octal&quot;&gt;字句文法&lt;/a&gt;に関するページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e676081ef51333515ce7ebefaa059e7feaad4af" translate="yes" xml:space="preserve">
          <source>Note that several of the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.</source>
          <target state="translated">&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;プロパティのいくつかには、長い名前と短い（Perlのような）名前の両方があることに注意してください。どちらの名前も常に同じ値を参照します。Perlは、JavaScriptが正規表現をモデル化したプログラミング言語です。</target>
        </trans-unit>
        <trans-unit id="7250f720fc2801000726463639bc2f11eb988451" translate="yes" xml:space="preserve">
          <source>Note that several of the &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; properties have both long and short (Perl-like) names. Both names always refer to the same value. (Perl is the programming language from which JavaScript modeled its regular expressions.). See also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties&quot;&gt;deprecated &lt;code&gt;RegExp&lt;/code&gt; properties.&lt;/a&gt;</source>
          <target state="translated">いくつかの&lt;a href=&quot;regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;プロパティには、長い名前と短い（Perlのような）名前の両方があることに注意してください。両方の名前は常に同じ値を参照します。（Perlは、JavaScriptが正規表現をモデル化したプログラミング言語です。）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties&quot;&gt;非推奨の&lt;/a&gt; &lt;code&gt;RegExp&lt;/code&gt; プロパティも参照してください。</target>
        </trans-unit>
        <trans-unit id="ad096e10b1e6dceefdb3deef7e4896ced4ca2671" translate="yes" xml:space="preserve">
          <source>Note that several of the &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.</source>
          <target state="translated">&lt;a href=&quot;regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;プロパティのいくつかには、長い名前と短い（Perlのような）名前の両方があることに注意してください。どちらの名前も常に同じ値を参照します。Perlは、JavaScriptが正規表現をモデル化したプログラミング言語です。</target>
        </trans-unit>
        <trans-unit id="ab0095e429e239e576b1ecad43494b38716172fb" translate="yes" xml:space="preserve">
          <source>Note that since JSON syntax is limited compared to JavaScript syntax, many valid JavaScript literals will not parse as JSON. For example, trailing commas are not allowed in JSON, and property names (keys) in object literals must be enclosed in quotes. Be sure to use a JSON serializer to generate strings that will be later parsed as JSON.</source>
          <target state="translated">JSON の構文は JavaScript の構文に比べて制限されているため、多くの有効な JavaScript リテラルは JSON としてパースできないことに注意してください。たとえば、末尾のカンマはJSONでは許可されておらず、オブジェクトリテラルのプロパティ名(キー)は引用符で囲む必要があります。後でJSONとして解析される文字列を生成するには、必ずJSONシリアライザを使用してください。</target>
        </trans-unit>
        <trans-unit id="6cb2dd8155033be17a80dfdf575de5da54b4a738" translate="yes" xml:space="preserve">
          <source>Note that since the &lt;a href=&quot;https://www.json.org/&quot;&gt;JSON format&lt;/a&gt; doesn't support object references (although an &lt;a href=&quot;http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&quot;&gt;IETF draft exists&lt;/a&gt;), a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown if one attempts to encode an object with circular references.</source>
          <target state="translated">以来、そのノート&lt;a href=&quot;https://www.json.org/&quot;&gt;JSON形式の&lt;/a&gt;オブジェクト参照をサポートしていないが（ただし、&lt;a href=&quot;http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&quot;&gt;IETFドラフトが存在する&lt;/a&gt;）、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外が&lt;/a&gt; 1つの試みが循環参照を持つオブジェクトをエンコードする場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="e8bbbc78361c9c3e3dc8e93f7bc2a908fb0e834e" translate="yes" xml:space="preserve">
          <source>Note that such a different order may arise statically via disparate fixed codings such as here, but also dynamically via whatever the order any such property-adding code-branches actually get executed at runtime as depends on inputs and/or random-variables. Then again, the actual iteration order is not guaranteed no matter what the order members are added.</source>
          <target state="translated">このような異なる順序は、ここでのように固定されたコードを介して静的に発生する可能性がありますが、動的に発生する可能性もあります。そして再び、実際の繰り返しの順序は、どのような順序のメンバーが追加されても保証されません。</target>
        </trans-unit>
        <trans-unit id="7302b0a2c1178c71e82f3bf364ff7bf84b19f475" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;m&lt;/code&gt; multiline flag doesn't change the dot behavior. So to match a pattern across multiple lines, the character set &lt;code&gt;[^]&lt;/code&gt; can be used (if you don't mean an old version of IE, of course), it will match any character including newlines.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; マルチラインフラグはドットの動作を変更しないことに注意してください。したがって、複数行にわたってパターンを照合するために、文字セット &lt;code&gt;[^]&lt;/code&gt; を使用できます（もちろん、古いバージョンのIEを意味しない場合）、改行を含むすべての文字に一致します。</target>
        </trans-unit>
        <trans-unit id="9317ca9043fffb5f4b1c4f38d18a8afc42ff0c84" translate="yes" xml:space="preserve">
          <source>Note that the WebAssembly text format currently doesn't have a syntax specified for adding new custom sections; you can however add a name section to your wasm during conversion from text format over to .wasm. The wast2wasm command available as part of the &lt;a href=&quot;https://github.com/webassembly/wabt&quot;&gt;wabt tool&lt;/a&gt; has a &lt;code&gt;--debug-names&lt;/code&gt; option &amp;mdash; specify this during conversion to get a .wasm with a names custom section, for example:</source>
          <target state="translated">WebAssemblyテキスト形式には、現在、新しいカスタムセクションを追加するための構文が指定されていないことに注意してください。ただし、テキスト形式から.wasmへの変換中に、名前セクションをwasmに追加できます。&lt;a href=&quot;https://github.com/webassembly/wabt&quot;&gt;wabtツールの&lt;/a&gt;一部として使用できるwast2wasmコマンドには &lt;code&gt;--debug-names&lt;/code&gt; オプションがあります&amp;mdash;変換時にこれを指定して、名前のカスタムセクションを持つ.wasmを取得します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="3e5bcd29eb044f930530fd1a51d6198733929f6f" translate="yes" xml:space="preserve">
          <source>Note that the block-scoped &lt;code&gt;const c = 2&lt;/code&gt;&lt;em&gt;does not&lt;/em&gt; throw a &lt;code&gt;SyntaxError: Identifier 'c' has already been declared&lt;/code&gt; because it can be declared uniquely within the block.</source>
          <target state="translated">ブロックスコープの &lt;code&gt;const c = 2&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;SyntaxError: Identifier 'c' has already been declared&lt;/code&gt; スロー&lt;em&gt;しません&lt;/em&gt;。ブロック内で一意に宣言できるため、識別子 'c'は既に宣言されています。</target>
        </trans-unit>
        <trans-unit id="f0c421b852d51df9ce972cd296b6e3206ff56369" translate="yes" xml:space="preserve">
          <source>Note that the comma in assignments such as the &lt;code&gt;var&lt;/code&gt; statement may appear not to have the normal effect of comma operators because they don't exist within an expression. In the following example, &lt;code&gt;a&lt;/code&gt; is set to the value of &lt;code&gt;b = 3&lt;/code&gt; (which is 3), but the &lt;code&gt;c = 4&lt;/code&gt; expression still evaluates and its result returned to console (i.e., 4). This is due to &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence and associativity&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; ステートメントなどの割り当て内のコンマは、式内に存在しないため、コンマ演算子の通常の効果がないように見える場合があることに注意してください。次の例では、 &lt;code&gt;a&lt;/code&gt; は &lt;code&gt;b = 3&lt;/code&gt; （つまり3）の値に設定されていますが、 &lt;code&gt;c = 4&lt;/code&gt; 式は引き続き評価され、その結果はコンソール（つまり4）に返されます。これは、&lt;a href=&quot;operator_precedence&quot;&gt;演算子の優先順位と結合性によるもの&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e47b72d8b6b4d9dd804fdc19bc24e16cbe4f69b3" translate="yes" xml:space="preserve">
          <source>Note that the comma operators in assignments may appear not to have the normal effect of comma operators because they don't exist within an expression. In the following example, &lt;code&gt;a&lt;/code&gt; is set to the value of &lt;code&gt;b = 3&lt;/code&gt; (which is 3), but the &lt;code&gt;c = 4&lt;/code&gt; expression still evaluates and its result returned to console (i.e., 4). This is due to &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence and associativity&lt;/a&gt;.</source>
          <target state="translated">割り当て内のコンマ演算子は、式内に存在しないため、通常のコンマ演算子の効果がないように見える場合があることに注意してください。次の例では、 &lt;code&gt;a&lt;/code&gt; は &lt;code&gt;b = 3&lt;/code&gt; （3）の値に設定されていますが、 &lt;code&gt;c = 4&lt;/code&gt; 式は引き続き評価され、その結果はコンソール（つまり、4）に返されます。これは、&lt;a href=&quot;operator_precedence&quot;&gt;演算子の優先順位と結合性によるもの&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="8fb0b31cc07e11285eaab2f90031b0e91ac70257" translate="yes" xml:space="preserve">
          <source>Note that the escape sequence restriction is only dropped from &lt;em&gt;tagged&lt;/em&gt; templates and not from &lt;em&gt;untagged&lt;/em&gt; template literals:</source>
          <target state="translated">エスケープシーケンスの制限は&lt;em&gt;タグ付き&lt;/em&gt;テンプレートからのみ削除され、&lt;em&gt;タグなし&lt;/em&gt;テンプレートリテラルからは削除されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9c1867f83bc77a17f2eb2250a8efe39fbbd4494d" translate="yes" xml:space="preserve">
          <source>Note that the escape sequence restriction is only dropped from &lt;em&gt;tagged&lt;/em&gt; templates&amp;mdash;not from &lt;em&gt;untagged&lt;/em&gt; template literals:</source>
          <target state="translated">エスケープシーケンスの制限は、&lt;em&gt;タグ付けされ&lt;/em&gt;ていないテンプレートリテラルからではなく、&lt;em&gt;タグ&lt;/em&gt;&lt;em&gt;付けされた&lt;/em&gt;テンプレートからのみ削除されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7c511ada476755a85f915c2a5e613e8478ccb322" translate="yes" xml:space="preserve">
          <source>Note that the first call does not log anything, because the generator was not yielding anything initially.</source>
          <target state="translated">最初の呼び出しでは何もログに残らないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="11e8fd41ba6325108248c738202ab2c77a7f287a" translate="yes" xml:space="preserve">
          <source>Note that the function &lt;code&gt;troubleWithGetNumber()&lt;/code&gt; ends with a &lt;code&gt;throw()&lt;/code&gt;. That is forced because an ES6 promise chain goes through all the &lt;code&gt;.then()&lt;/code&gt; promises, even after an error, and without the &quot;throw()&quot;, the error would seem &quot;fixed&quot;. This is a hassle, and for this reason, it is common to omit &lt;code&gt;rejectionFunc&lt;/code&gt; throughout the chain of &lt;code&gt;.then()&lt;/code&gt; promises, and just have a single &lt;code&gt;rejectionFunc&lt;/code&gt; in the final &lt;code&gt;catch()&lt;/code&gt;. The alternative is to throw a special value (in this case &quot;-999&quot;, but a custom Error type would be more appropriate).</source>
          <target state="translated">注関数という &lt;code&gt;troubleWithGetNumber()&lt;/code&gt; で終わる &lt;code&gt;throw()&lt;/code&gt; 。ES6プロミスチェーンはすべての &lt;code&gt;.then()&lt;/code&gt; プロミスを通過するため、エラーが発生した後でも、「throw（）」がないと、エラーは「修正済み」のように見えます。これは面倒であり、このため、 &lt;code&gt;.then()&lt;/code&gt; promiseのチェーン全体で &lt;code&gt;rejectionFunc&lt;/code&gt; を省略し、最後の &lt;code&gt;catch()&lt;/code&gt; に &lt;code&gt;rejectionFunc&lt;/code&gt; を1つだけ含めるのが一般的です。別の方法は、特別な値をスローすることです（この場合は「-999」ですが、カスタムエラータイプの方が適切です）。</target>
        </trans-unit>
        <trans-unit id="e909cd5cd3d9b43912251e495f43e29393aa2014" translate="yes" xml:space="preserve">
          <source>Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.</source>
          <target state="translated">最初のパラメータの正規表現がグローバルである場合は、置換される完全一致ごとにこの関数が複数回呼び出されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6a4a9de02107e4ee576341cfaddb1b9c0f9ed4a8" translate="yes" xml:space="preserve">
          <source>Note that the implication of the above, is that, contrary to popular misinformation, JavaScript does not have implicit or undeclared variables, it merely has a syntax that looks like it does.</source>
          <target state="translated">上記の意味合いは、一般的な誤報に反して、JavaScriptは暗黙の変数や宣言されていない変数を持っておらず、単にそのように見える構文を持っているだけだということに注意してください。</target>
        </trans-unit>
        <trans-unit id="cd2bf18a565e9aee768496bddd1900a93572ab34" translate="yes" xml:space="preserve">
          <source>Note that the length of the normalized form under &lt;code&gt;&quot;NFD&quot;&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;. That's because &lt;code&gt;&quot;NFD&quot;&lt;/code&gt; gives you the &lt;strong&gt;decomposed&lt;/strong&gt; version of the canonical form, in which single code points are split into multiple combining ones. The decomposed canonical form for &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; is &lt;code&gt;&quot;\u006E\u0303&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;NFD&quot;&lt;/code&gt; 下の正規化されたフォームの長さは &lt;code&gt;2&lt;/code&gt; であることに注意してください。これは、 &lt;code&gt;&quot;NFD&quot;&lt;/code&gt; が、単一のコードポイントが複数の結合ポイントに分割される正規形式の&lt;strong&gt;分解&lt;/strong&gt;バージョンを提供するためです。 &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; の分解された正規形は &lt;code&gt;&quot;\u006E\u0303&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="61b22e5e94655c56be6f44302671658a96e6c0b2" translate="yes" xml:space="preserve">
          <source>Note that the order of the patterns in the regular expression matters.</source>
          <target state="translated">正規表現のパターンの順序が重要であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9dd7be5f05359fb27023d87fd24b57d610b2c7f7" translate="yes" xml:space="preserve">
          <source>Note that the results shown in the code above can vary between browsers and browser versions. This is because the values are implementation-specific. That is, the specification requires only that the before and after values are negative and positive.</source>
          <target state="translated">上記のコードで示された結果は、ブラウザやブラウザのバージョンによって異なる可能性があることに注意してください。これは、値が実装固有のものであるためです。つまり、仕様では前後の値が負と正の値であることだけが要求されています。</target>
        </trans-unit>
        <trans-unit id="b9da1c1db86dd393891044a482bf172e36da757d" translate="yes" xml:space="preserve">
          <source>Note that the trigonometric functions (&lt;code&gt;sin()&lt;/code&gt;, &lt;code&gt;cos()&lt;/code&gt;, &lt;code&gt;tan()&lt;/code&gt;, &lt;code&gt;asin()&lt;/code&gt;, &lt;code&gt;acos()&lt;/code&gt;, &lt;code&gt;atan()&lt;/code&gt;, &lt;code&gt;atan2()&lt;/code&gt;) expect or return angles in radians. To convert radians to degrees, divide by &lt;code&gt;(Math.PI / 180)&lt;/code&gt;, and multiply by this to convert the other way.</source>
          <target state="translated">三角関数（ &lt;code&gt;sin()&lt;/code&gt; 、 &lt;code&gt;cos()&lt;/code&gt; 、 &lt;code&gt;tan()&lt;/code&gt; 、 &lt;code&gt;asin()&lt;/code&gt; 、 &lt;code&gt;acos()&lt;/code&gt; 、 &lt;code&gt;atan()&lt;/code&gt; 、 &lt;code&gt;atan2()&lt;/code&gt; ）は角度をラジアンで予測または返すことに注意してください。ラジアンを度に変換するには、 &lt;code&gt;(Math.PI / 180)&lt;/code&gt; で割り、これを掛けて逆の方法で変換します。</target>
        </trans-unit>
        <trans-unit id="05d9f4c62248b1aeb8a356a6df2d135c0cd0b559" translate="yes" xml:space="preserve">
          <source>Note that the value of an &lt;code&gt;instanceof&lt;/code&gt; test can change based on changes to the &lt;code&gt;prototype&lt;/code&gt; property of constructors, and it can also be changed by changing an object prototype using &lt;code&gt;Object.setPrototypeOf&lt;/code&gt;. It is also possible using the non-standard &lt;code&gt;__proto__&lt;/code&gt; pseudo-property.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; testの値は、コンストラクターの &lt;code&gt;prototype&lt;/code&gt; プロパティの変更に基づいて変更でき、 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; を使用してオブジェクトプロトタイプを変更することによっても変更できることに注意してください。非標準の &lt;code&gt;__proto__&lt;/code&gt; 疑似プロパティを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="2ff4210942bac732b642ed4df56d4be6b7be8132" translate="yes" xml:space="preserve">
          <source>Note that the value of an &lt;code&gt;instanceof&lt;/code&gt; test can change based on changes to the &lt;code&gt;prototype&lt;/code&gt; property of constructors. It can also be changed by changing an object's prototype using &lt;code&gt;Object.setPrototypeOf&lt;/code&gt;. It is also possible using the non-standard &lt;code&gt;__proto__&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; testの値は、コンストラクターの &lt;code&gt;prototype&lt;/code&gt; プロパティの変更に基づいて変更される可能性があることに注意してください。 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; を使用してオブジェクトのプロトタイプを変更することによっても変更できます。非標準の &lt;code&gt;__proto__&lt;/code&gt; プロパティを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="7741c61e8b49d3e2e383a1abacaa777a126edbdd" translate="yes" xml:space="preserve">
          <source>Note that there is no &lt;code&gt;elseif&lt;/code&gt; syntax in JavaScript. However, you can write it with a space between &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;:</source>
          <target state="translated">JavaScript には &lt;code&gt;elseif&lt;/code&gt; 構文がないことに注意してください。ただし、 &lt;code&gt;else&lt;/code&gt; と &lt;code&gt;if&lt;/code&gt; の間にスペースを入れて記述できます。</target>
        </trans-unit>
        <trans-unit id="a8db8f294dbcfb4632044ee8283f40c3eee6b7d4" translate="yes" xml:space="preserve">
          <source>Note that this behavior is not at all affected by how or where the function was defined. In the previous example, we defined the function inline as the &lt;code&gt;f&lt;/code&gt; member during the definition of &lt;code&gt;o&lt;/code&gt;. However, we could have just as easily defined the function first and later attached it to &lt;code&gt;o.f&lt;/code&gt;. Doing so results in the same behavior:</source>
          <target state="translated">この動作は、関数が定義された方法または場所によってまったく影響を受けないことに注意してください。前の例では、 &lt;code&gt;o&lt;/code&gt; の定義中に関数inlineを &lt;code&gt;f&lt;/code&gt; メンバーとして定義しました。ただし、最初に関数を定義し、後でそれを &lt;code&gt;o.f&lt;/code&gt; に追加することもできます。これを行うと、同じ動作になります。</target>
        </trans-unit>
        <trans-unit id="9faaea4291e65f8d479e5e16bc12586950295dae" translate="yes" xml:space="preserve">
          <source>Note that this can result in an infinite loop if &lt;code&gt;oldS&lt;/code&gt; is itself a substring of &lt;code&gt;newS&lt;/code&gt; &amp;mdash; for example, if you attempted to replace 'World' with 'OtherWorld' here. A better method for replacing strings is as follows:</source>
          <target state="translated">&lt;code&gt;oldS&lt;/code&gt; 自体が &lt;code&gt;newS&lt;/code&gt; のサブストリングである場合、たとえば、ここで「World」を「OtherWorld」に置き換えようとした場合、これにより無限ループが発生する可能性があることに注意してください。文字列を置き換えるより良い方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dd0a572649142c3f55682e7ae85af6476b39cbda" translate="yes" xml:space="preserve">
          <source>Note that this can result in an infinite loop if &lt;code&gt;oldS&lt;/code&gt; is itself a substring of &lt;code&gt;newS&lt;/code&gt; &amp;mdash; for example, if you attempted to replace &lt;code&gt;'World'&lt;/code&gt; with &lt;code&gt;'OtherWorld'&lt;/code&gt; here.</source>
          <target state="translated">&lt;code&gt;oldS&lt;/code&gt; 自体が &lt;code&gt;newS&lt;/code&gt; の部分文字列である場合、たとえば、ここで &lt;code&gt;'OtherWorld'&lt;/code&gt; &lt;code&gt;'World'&lt;/code&gt; を「OtherWorld」に置き換えようとした場合、これにより無限ループが発生する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3a00b9df89e778c37409fcfac8a650745361a6d2" translate="yes" xml:space="preserve">
          <source>Note that this code is an example only; it does not accept valid numbers such as &lt;code&gt;1.&lt;/code&gt; or &lt;code&gt;.5&lt;/code&gt;.</source>
          <target state="translated">このコードは例にすぎないことに注意してください。 &lt;code&gt;1.&lt;/code&gt; や &lt;code&gt;.5&lt;/code&gt; などの有効な数値は受け付けません。</target>
        </trans-unit>
        <trans-unit id="f16fa41c0a4ab1894fce44a1d291e186bc98c8c5" translate="yes" xml:space="preserve">
          <source>Note that this means that the offset is positive if the local timezone is behind UTC, and negative if it is ahead. For example, for time zone UTC+10:00 (Australian Eastern Standard Time, Vladivostok Time, Chamorro Standard Time), &lt;code&gt;-600&lt;/code&gt; will be returned.</source>
          <target state="translated">これは、ローカルタイムゾーンがUTCより遅れている場合はオフセットが正であり、進んでいる場合は負であることを意味することに注意してください。たとえば、タイムゾーンUTC + 10：00（オーストラリア東部標準時、ウラジオストク時間、チャモロ標準時）の場合、 &lt;code&gt;-600&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="eb548cf218257a148693e07ddf6949ae0bc2499a" translate="yes" xml:space="preserve">
          <source>Note that this will include query parameters and/or hash (i.e., following the &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt;).</source>
          <target state="translated">これにはクエリパラメータやハッシュが含まれることに注意してください（つまり、 &lt;code&gt;?&lt;/code&gt; または &lt;code&gt;#&lt;/code&gt; の後に）。</target>
        </trans-unit>
        <trans-unit id="bfc23f6245430295e921350aae3669ec1d95f7a6" translate="yes" xml:space="preserve">
          <source>Note that we don't create an array to store a collection of objects. Instead, we store the collection on the object itself and use &lt;code&gt;call&lt;/code&gt; on &lt;code&gt;Array.prototype.push&lt;/code&gt; to trick the method into thinking we are dealing with an array&amp;mdash;and it just works, thanks to the way JavaScript allows us to establish the execution context in any way we want.</source>
          <target state="translated">オブジェクトのコレクションを格納するための配列は作成しないことに注意してください。代わりに、コレクションをオブジェクト自体に &lt;code&gt;Array.prototype.push&lt;/code&gt; し、Array.prototype.pushの &lt;code&gt;call&lt;/code&gt; を使用して、メソッドをだまして配列を処理していると思い込ませます。JavaScriptを使用して実行コンテキストを確立できるため、これは機能します。好きなように。</target>
        </trans-unit>
        <trans-unit id="eb8aa2e7d13b4fcf561acadb5cc068b976b71b73" translate="yes" xml:space="preserve">
          <source>Note that we have to handle the case &lt;code&gt;idx == 0&lt;/code&gt; separately here because the element will always be found regardless of the &lt;code&gt;fromIndex&lt;/code&gt; parameter if it is the first element of the array. This is different from the &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;indexOf&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">要素が配列の最初の要素である場合、要素は &lt;code&gt;fromIndex&lt;/code&gt; パラメータに関係なく常に検出されるため、ここでは &lt;code&gt;idx == 0&lt;/code&gt; のケースを個別に処理する必要があることに注意してください。これは、&lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;/a&gt;メソッドとは異なります。</target>
        </trans-unit>
        <trans-unit id="6eae75098f2a74b2ca3277efcfd90d5b54f284a4" translate="yes" xml:space="preserve">
          <source>Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the &lt;code&gt;this&lt;/code&gt; keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration.</source>
          <target state="translated">このゼロ引数関数が呼び出されると、反復可能オブジェクトのメソッドとして呼び出されることに注意してください。したがって、関数内で &lt;code&gt;this&lt;/code&gt; キーワードを使用して、反復可能なオブジェクトのプロパティにアクセスし、反復中に何を提供するかを決定できます。</target>
        </trans-unit>
        <trans-unit id="da7456a5cba24d32b09c867d6c49b0a632f46bae" translate="yes" xml:space="preserve">
          <source>Note that while Node.js will pass on query parameters (or the hash) as in the latter example, as of Node 14.1.0, a URL with query parameters will err when loading in the form &lt;code&gt;node --experimental-modules index.mjs?someURLInfo=5&lt;/code&gt; (it is treated as a file rather than a URL in this context).</source>
          <target state="translated">後者の例のようにNode.jsはクエリパラメーター（またはハッシュ）を渡しますが、 &lt;code&gt;node --experimental-modules index.mjs?someURLInfo=5&lt;/code&gt; 、フォームノード--experimental-modules index.mjsにロードすると、クエリパラメーターを含むURLがエラーになることに注意してください。 ？someURLInfo = 5（このコンテキストではURLではなくファイルとして扱われます）。</target>
        </trans-unit>
        <trans-unit id="26c2ae3bb9aea4cccee37b2f148e59d95d86693f" translate="yes" xml:space="preserve">
          <source>Note that while the setting of &lt;code&gt;null&lt;/code&gt; as &lt;code&gt;[[Prototype]]&lt;/code&gt; is supported in the real ES5 &lt;code&gt;Object.create&lt;/code&gt;, this polyfill cannot support it due to a limitation inherent in versions of ECMAScript lower than 5.</source>
          <target state="translated">&lt;code&gt;[[Prototype]]&lt;/code&gt; としての &lt;code&gt;null&lt;/code&gt; の設定は実際のES5 &lt;code&gt;Object.create&lt;/code&gt; でサポートされていますが、5未満のECMAScriptのバージョンに固有の制限により、このポリフィルはそれをサポートできません。</target>
        </trans-unit>
        <trans-unit id="29d2f36187f315e0e6ae89d658ad3563914fde02" translate="yes" xml:space="preserve">
          <source>Note that while this &quot;no-op&quot; works for JavaScript objects it does not work for native browser objects like DOM Elements. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/&quot;&gt;See this for one solution&lt;/a&gt;.</source>
          <target state="translated">この &quot;no-op&quot;はJavaScriptオブジェクトに対しては機能しますが、DOM要素などのネイティブブラウザオブジェクトに対しては機能しないことに注意してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/&quot;&gt;1つのソリューションについては、こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="42a5d0d6cae56586efb992e7ad3a75023edfc3f8" translate="yes" xml:space="preserve">
          <source>Note that while this &quot;no-op&quot; works for JavaScript objects, it does not work for native browser objects like DOM Elements.</source>
          <target state="translated">この「no-op」は JavaScript オブジェクトに対しては動作しますが、DOM Elements のようなネイティブブラウザオブジェクトに対しては動作しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8c471aa0dff39ec2f99de8a999d955158a4e06a8" translate="yes" xml:space="preserve">
          <source>Note that with &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, if the value passed as &lt;code&gt;this&lt;/code&gt; is not an object, an attempt will be made to convert it to an object using the internal &lt;code&gt;ToObject&lt;/code&gt; operation. So if the value passed is a primitive like &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;'foo'&lt;/code&gt;, it will be converted to an Object using the related constructor, so the primitive number &lt;code&gt;7&lt;/code&gt; is converted to an object as if by &lt;code&gt;new Number(7)&lt;/code&gt; and the string &lt;code&gt;'foo'&lt;/code&gt; to an object as if by &lt;code&gt;new String('foo')&lt;/code&gt;, e.g.</source>
          <target state="translated">なお、で &lt;code&gt;call&lt;/code&gt; し、 &lt;code&gt;apply&lt;/code&gt; された値が渡された場合、 &lt;code&gt;this&lt;/code&gt; オブジェクトではありません、試みは内部使用してオブジェクトに変換するために行われます &lt;code&gt;ToObject&lt;/code&gt; の操作を。したがって、渡された値が &lt;code&gt;7&lt;/code&gt; または &lt;code&gt;'foo'&lt;/code&gt; のようなプリミティブである場合、関連するコンストラクタを使用してObjectに変換されるため、プリミティブ番号 &lt;code&gt;7&lt;/code&gt; は &lt;code&gt;new Number(7)&lt;/code&gt; と文字列 &lt;code&gt;'foo'&lt;/code&gt; ようにオブジェクトに変換されます' &lt;code&gt;new String('foo')&lt;/code&gt; ようにオブジェクトに、例えば</target>
        </trans-unit>
        <trans-unit id="1e11798a56f7d902796c89512fd574c784f0185e" translate="yes" xml:space="preserve">
          <source>Note that you cannot replace nor mimic the &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;関数を置き換えたり模倣したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="58b1d95de5e69173a0ec12721e1e9550a7781104" translate="yes" xml:space="preserve">
          <source>Note that you cannot replace or mimic the &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">&lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;関数を置き換えたり模倣したりすることはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ba9d79769c0b86e1d0db7b5a66f5a9b830616493" translate="yes" xml:space="preserve">
          <source>Note that you may want to avoid using &lt;strong&gt;&amp;plusmn;&lt;/strong&gt;&lt;code&gt;Infinity&lt;/code&gt; for stylistic reasons. In this case, &lt;a href=&quot;atan2&quot;&gt;&lt;code&gt;Math.atan2()&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;0&lt;/code&gt; as the second argument may be a better solution.</source>
          <target state="translated">文体上の理由から、&lt;strong&gt;&amp;plusmn; &lt;/strong&gt; &lt;code&gt;Infinity&lt;/code&gt; の使用を避けたい場合があることに注意してください。この場合、2番目の引数として &lt;code&gt;0&lt;/code&gt; を指定した&lt;a href=&quot;atan2&quot;&gt; &lt;code&gt;Math.atan2()&lt;/code&gt; &lt;/a&gt;がより良い解決策になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6dc86a90d58eb45aafe7124321909cadee746d9d" translate="yes" xml:space="preserve">
          <source>Note that you need do nothing special to create a bound function for use with &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;で使用するバインドされた関数を作成するために特別なことを行う必要はないことに注意してください。その結果、バインドされた関数を&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;を使用してのみ呼び出す必要がある場合でも、明確に呼び出されるバインドされた関数を作成するために特別なことを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="dcc14038c04cd1ff864a607842150a1bac3ba232" translate="yes" xml:space="preserve">
          <source>Note that you need not do anything special to create a bound function for use with &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;で使用するバインドされた関数を作成するために特別なことをする必要はないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b9a1be02ab592aa6d4b6efcd21b498ef87f17d20" translate="yes" xml:space="preserve">
          <source>Note that; as the standard three properties (&lt;code&gt;buf.byteLength&lt;/code&gt;, &lt;code&gt;buf.byteOffset&lt;/code&gt; and &lt;code&gt;buf.buffer&lt;/code&gt;) are read-only (as are those of an &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;), there is no reason for attempting to freeze these properties.</source>
          <target state="translated">ご了承ください; 標準の3つのプロパティ（ &lt;code&gt;buf.byteLength&lt;/code&gt; 、 &lt;code&gt;buf.byteOffset&lt;/code&gt; 、および &lt;code&gt;buf.buffer&lt;/code&gt; ）は読み取り専用であるため（&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; のプロパティと同様&lt;/a&gt;）、これらのプロパティを凍結しようとする理由はありません。</target>
        </trans-unit>
        <trans-unit id="bf18f531a356627607b3ae5f0d74f109c4ce0b59" translate="yes" xml:space="preserve">
          <source>Note the difference between &lt;a href=&quot;../../global_objects/function/length&quot;&gt;&lt;code&gt;Function.length&lt;/code&gt;&lt;/a&gt; and arguments.length</source>
          <target state="translated">&lt;a href=&quot;../../global_objects/function/length&quot;&gt; &lt;code&gt;Function.length&lt;/code&gt; &lt;/a&gt;とarguments.lengthの違いに注意してください</target>
        </trans-unit>
        <trans-unit id="5a64f0f65552fba28f063a3c7b387028be7339d9" translate="yes" xml:space="preserve">
          <source>Note the examples below are throwing instances of &lt;a href=&quot;../error&quot;&gt;Error&lt;/a&gt;. This is considered good practice in contrast to throwing Strings; otherwise, the part doing the catching would have to perform checks to see if the argument was a string or an error, and you might lose valuable information like stack traces.</source>
          <target state="translated">以下の例は、&lt;a href=&quot;../error&quot;&gt;Errorの&lt;/a&gt;インスタンスをスローしていることに注意してください。これは、文字列を投げるのとは対照的に、良い習慣と考えられています。そうしないと、キャッチを実行する部分が、引数が文字列であるかエラーであるかを確認するためのチェックを実行する必要があり、スタックトレースなどの貴重な情報が失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="32f779296673bd826b5f982467ecc6fc8e838714" translate="yes" xml:space="preserve">
          <source>Note the following when working with the &lt;code&gt;get&lt;/code&gt; syntax:</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 構文を使用する場合は、次の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="d7c82ee1fb75f8a1f3103fa9c5f488ea380a2bd9" translate="yes" xml:space="preserve">
          <source>Note the following when working with the &lt;code&gt;set&lt;/code&gt; syntax:</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 構文を使用する場合は、次の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="8e06ac9a6781fead8358daed4f4bb9d8b3f5963f" translate="yes" xml:space="preserve">
          <source>Note the return value of &lt;code&gt;grow()&lt;/code&gt; here is the previous number of WebAssembly pages.</source>
          <target state="translated">ここで、 &lt;code&gt;grow()&lt;/code&gt; の戻り値は、WebAssemblyページの以前の数です。</target>
        </trans-unit>
        <trans-unit id="fffc4e6e3d92d339a50005bad3373dd98f16741d" translate="yes" xml:space="preserve">
          <source>Note these limitations:</source>
          <target state="translated">これらの制限に注意してください。</target>
        </trans-unit>
        <trans-unit id="5e2eabf889063165d97f5283638f4f232c253bff" translate="yes" xml:space="preserve">
          <source>Note, however, that the &lt;code&gt;javascript:&lt;/code&gt; pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers.</source>
          <target state="translated">ただし、 &lt;code&gt;javascript:&lt;/code&gt; 疑似プロトコルは、控えめなイベントハンドラーなどの他の代替手段よりも推奨されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="463b97bdcb1b715a8841adeea0169a2a03b60b25" translate="yes" xml:space="preserve">
          <source>Note, however, that this is inefficient and should be avoided for large arrays: in each iteration, it creates a new temporary array that must be garbage-collected, and it copies elements from the current accumulator array into a new array instead of just adding the new elements to the existing array.</source>
          <target state="translated">しかし,これは非効率的であり,大きな配列の場合は避けるべきであることに注意してください.各処理で,ゴミ箱に回収されなければならない新しい一時的な配列を作成し,既存の配列に新しい要素を追加するのではなく,現在のアキュムレータ配列から新しい配列に要素をコピーします.</target>
        </trans-unit>
        <trans-unit id="bed6f54ef32d3e3c97c2eb581fa80a3a015e2ee9" translate="yes" xml:space="preserve">
          <source>Note: Do not place the regular expression literal (or &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; constructor) within the &lt;code&gt;while&lt;/code&gt; condition or it will create an infinite loop if there is a match due to the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property being reset upon each iteration. Also be sure that the global flag (&quot;&lt;code&gt;g&lt;/code&gt;&quot;) is set or an infinite loop will occur here also.</source>
          <target state="translated">注：正規表現リテラル（または&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;コンストラクター）を &lt;code&gt;while&lt;/code&gt; 条件内に配置しないでください。繰り返しごとに&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt;プロパティがリセットされるために一致する場合、無限ループが発生します。また、グローバルフラグ（ &quot; &lt;code&gt;g&lt;/code&gt; &quot;）が設定されていることを確認してください。そうしないと、ここでも無限ループが発生します。</target>
        </trans-unit>
        <trans-unit id="80330d397f34d778dc60df3071979572a81912a6" translate="yes" xml:space="preserve">
          <source>Note: In Microsoft JScript, negative values of the &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; argument are not considered to refer to the end of the string.</source>
          <target state="translated">注：Microsoft JScriptでは、 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 引数の負の値は、文字列の終わりを参照しているとは見なされません。</target>
        </trans-unit>
        <trans-unit id="7019305dd8fa306744c48d9c794dc4dcabed5604" translate="yes" xml:space="preserve">
          <source>Note: In Microsoft JScript, negative values of the &lt;code&gt;start&lt;/code&gt; argument are not considered to refer to the end of the string.</source>
          <target state="translated">注：Microsoft JScriptでは、 &lt;code&gt;start&lt;/code&gt; 引数の負の値は、ストリングの終わりを参照するとは見なされません。</target>
        </trans-unit>
        <trans-unit id="59be927df9288b8c4077df258bf4f90d9389fd7c" translate="yes" xml:space="preserve">
          <source>Note: The length property is used to control the number of object properties to be added. In the above example, length:2 indicates two properties has to be added.</source>
          <target state="translated">注意:lengthプロパティは、追加するオブジェクトプロパティの数を制御するために使用されます。上記の例では、length:2は2つのプロパティを追加する必要があることを示しています。</target>
        </trans-unit>
        <trans-unit id="c0e231314f86b257739bc8c0ffa3b6fc321d7def" translate="yes" xml:space="preserve">
          <source>Note: The strict equality operator rather than the standard equality operator must be used here, because &lt;code&gt;x == undefined&lt;/code&gt; also checks whether &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, while strict equality doesn't. &lt;code&gt;null&lt;/code&gt; is not equivalent to &lt;code&gt;undefined&lt;/code&gt;. See &lt;a href=&quot;../operators/comparison_operators&quot;&gt;&lt;code&gt;comparison operators&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">注： &lt;code&gt;x == undefined&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; かどうかもチェックしますが、厳密な等価性はチェックしないため、標準の等価性演算子ではなく厳密な等価性演算子を使用する必要があります。 &lt;code&gt;null&lt;/code&gt; は &lt;code&gt;undefined&lt;/code&gt; と同じではありません。詳細については、&lt;a href=&quot;../operators/comparison_operators&quot;&gt; &lt;code&gt;comparison operators&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d222f5ca458a923f2e5d9ceafd7edec2e087062" translate="yes" xml:space="preserve">
          <source>Note: Use the &lt;code&gt;break&lt;/code&gt; statement to stop a loop before condition evaluates to true.</source>
          <target state="translated">注：条件がtrueと評価される前にループを停止するには、 &lt;code&gt;break&lt;/code&gt; ステートメントを使用します。</target>
        </trans-unit>
        <trans-unit id="3f63fdf9aee50510728cc3d103d43f1c3dc7aeb1" translate="yes" xml:space="preserve">
          <source>Note: Use the break statement to stop a loop before condition evaluates to true.</source>
          <target state="translated">注意:条件が真と評価される前にループを停止するには break 文を使用します。</target>
        </trans-unit>
        <trans-unit id="a3e682de38837cdda59be91fa55b9fef3c5c7ace" translate="yes" xml:space="preserve">
          <source>Note: if &lt;code&gt;this&lt;/code&gt; arg is passed to &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;, or &lt;code&gt;apply&lt;/code&gt; on invocation of an arrow function it will be ignored. You can still prepend arguments to the call, but the first argument (&lt;code&gt;thisArg&lt;/code&gt;) should be set to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">注：場合は &lt;code&gt;this&lt;/code&gt; 引数が渡される &lt;code&gt;call&lt;/code&gt; 、 &lt;code&gt;bind&lt;/code&gt; 、または &lt;code&gt;apply&lt;/code&gt; 、それは無視される矢印関数の呼び出しに。呼び出しの前に引数を &lt;code&gt;thisArg&lt;/code&gt; することはできますが、最初の引数（thisArg）は &lt;code&gt;null&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d8f583703a30033891b7552420940f520ae84ad" translate="yes" xml:space="preserve">
          <source>Note: if this arg is passed to call, bind, or apply on invocation of an arrow function it will be ignored. You can still prepend arguments to the call, but the first argument (thisArg) should be set to null.</source>
          <target state="translated">注意:この引数が矢印関数の呼び出し、バインド、または適用に渡された場合、それは無視されます。呼び出しに引数を前置することはできますが、最初の引数 (thisArg)は NULL に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b61f7ba07dc912d955061735265a29fafb0ae0a2" translate="yes" xml:space="preserve">
          <source>Note: that is two underscores, followed by the five characters &quot;proto&quot;, followed by two more underscores.</source>
          <target state="translated">注:それは2つのアンダースコアで、その後に5つの文字「proto」が続き、さらに2つのアンダースコアが続きます。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="28495ab68819e01c03a4f6664aa021425bc63183" translate="yes" xml:space="preserve">
          <source>Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception (most commonly, but not exclusively, when in &lt;a href=&quot;../../strict_mode&quot;&gt;strict mode&lt;/a&gt;).</source>
          <target state="translated">フリーズされたオブジェクトのプロパティセットには、何も追加または削除できません。これを実行しようとすると、暗黙的に、または&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外をスローすることで失敗します（&lt;a href=&quot;../../strict_mode&quot;&gt;厳密モードでは&lt;/a&gt;、最も一般的ですが、これに限定されません）。</target>
        </trans-unit>
        <trans-unit id="b1634d2a1b6262f229bf5d427a4c97f24d9538c0" translate="yes" xml:space="preserve">
          <source>Notice how redefining &lt;code&gt;@@iterator&lt;/code&gt; affects the behavior of built-in constructs that use the iteration protocol:</source>
          <target state="translated">&lt;code&gt;@@iterator&lt;/code&gt; 再定義が、反復プロトコルを使用する組み込み構成の動作にどのように影響するかに注意してください。</target>
        </trans-unit>
        <trans-unit id="f7b7d30c834fda1d1ad1ad85f07081bd9751e93e" translate="yes" xml:space="preserve">
          <source>Notice, the output list length can be different from the input list length.</source>
          <target state="translated">出力リストの長さは入力リストの長さとは異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7c519ba797a2d11469f812660290b10591ae7fe0" translate="yes" xml:space="preserve">
          <source>Notifies agents that are waiting on the specified index of the array. Returns the number of agents that were notified.</source>
          <target state="translated">配列の指定したインデックスで待機しているエージェントに通知します。通知されたエージェントの数を返します。</target>
        </trans-unit>
        <trans-unit id="1db14eb7136eab37e1baff1e1e7463bf44f5675f" translate="yes" xml:space="preserve">
          <source>Novice developers sometimes believe a leading zero prefix has no semantic meaning, so they use it as an alignment device &amp;mdash; but this changes the number's meaning! A leading zero syntax for the octals is rarely useful and can be mistakenly used, so strict mode makes it a syntax error:</source>
          <target state="translated">初心者の開発者は、先頭のゼロプレフィックスには意味的な意味がないと考えることがあるので、これをアライメントデバイスとして使用しますが、これにより数値の意味が変わります。8進数の先行ゼロ構文はほとんど使用されず、誤って使用される可能性があるため、厳密モードでは構文エラーになります。</target>
        </trans-unit>
        <trans-unit id="3e91724d9b2b90231f93b13497529b9cdc52c277" translate="yes" xml:space="preserve">
          <source>Now forbidden in strict mode.</source>
          <target state="translated">現在は厳禁モードで禁止されています。</target>
        </trans-unit>
        <trans-unit id="bdbc7887d3cf2b8aa0bd16aa3cc676dde57bb568" translate="yes" xml:space="preserve">
          <source>Now in order to create a complete sample &lt;code&gt;traps&lt;/code&gt; list, for didactic purposes, we will try to proxify a &lt;em&gt;non native&lt;/em&gt; object that is particularly suited to this type of operation: the &lt;code&gt;docCookies&lt;/code&gt; global object created by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie/Simple_document.cookie_framework&quot;&gt;the &quot;little framework&quot; published on the &lt;code&gt;document.cookie&lt;/code&gt; page&lt;/a&gt;.</source>
          <target state="translated">完全なサンプル &lt;code&gt;traps&lt;/code&gt; リストを作成するために、教訓的な目的のために、このタイプの操作に特に適した&lt;em&gt;非ネイティブ&lt;/em&gt;オブジェクトをプロキシしようとし&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie/Simple_document.cookie_framework&quot;&gt; &lt;code&gt;document.cookie&lt;/code&gt; &lt;/a&gt;公開された「小さなフレームワーク」によって作成された &lt;code&gt;docCookies&lt;/code&gt; グローバルオブジェクトです。クッキーページ。</target>
        </trans-unit>
        <trans-unit id="499780ce25a6c7d79da33ad5519cc2508ece3145" translate="yes" xml:space="preserve">
          <source>Now in order to create a complete sample &lt;code&gt;traps&lt;/code&gt; list, for didactic purposes, we will try to proxify a &lt;em&gt;non-native&lt;/em&gt; object that is particularly suited to this type of operation: the &lt;code&gt;docCookies&lt;/code&gt; global object created by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie/Simple_document.cookie_framework&quot;&gt;the &quot;little framework&quot; published on the &lt;code&gt;document.cookie&lt;/code&gt; page&lt;/a&gt;.</source>
          <target state="translated">ここで、完全なサンプル &lt;code&gt;traps&lt;/code&gt; リストを作成するために、教訓的な目的で、このタイプの操作に特に適した&lt;em&gt;非ネイティブ&lt;/em&gt;オブジェクト（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie/Simple_document.cookie_framework&quot;&gt; &lt;code&gt;document.cookie&lt;/code&gt; &lt;/a&gt;公開されている「小さなフレームワーク」によって作成された &lt;code&gt;docCookies&lt;/code&gt; グローバルオブジェクト）をプロキシ化しようとします。 .cookieページ。</target>
        </trans-unit>
        <trans-unit id="1046b504ee45cf74d531a73ea41f14236628eb9c" translate="yes" xml:space="preserve">
          <source>Now the information is available separately and it can be formatted and concatenated again in a customized way. For example by using &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, a &lt;a href=&quot;../../statements/switch&quot;&gt;switch statement&lt;/a&gt;, &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;, and &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これで、情報は個別に利用できるようになり、カスタマイズされた方法で再度フォーマットおよび連結できます。たとえば、&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../functions/arrow_functions&quot;&gt;矢印関数&lt;/a&gt;、&lt;a href=&quot;../../statements/switch&quot;&gt;スイッチステートメント&lt;/a&gt;、&lt;a href=&quot;../../template_literals&quot;&gt;テンプレートリテラル&lt;/a&gt;、および&lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7da9e4b8116055ad1812e5cb870ec26ff4bdc68d" translate="yes" xml:space="preserve">
          <source>Now you can create an object called &lt;code&gt;myCar&lt;/code&gt; as follows:</source>
          <target state="translated">これで、 &lt;code&gt;myCar&lt;/code&gt; というオブジェクトを次のように作成できます。</target>
        </trans-unit>
        <trans-unit id="34e0936c9312e813910d1338db9bce48d6915dce" translate="yes" xml:space="preserve">
          <source>Now you can create an object called &lt;code&gt;mycar&lt;/code&gt; as follows:</source>
          <target state="translated">これで、次のように &lt;code&gt;mycar&lt;/code&gt; というオブジェクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="3ae087c677d6251fe8192363403e8404ee076378" translate="yes" xml:space="preserve">
          <source>Now you can use a similar syntax in object literals, too:</source>
          <target state="translated">これで、オブジェクトリテラルでも同様の構文を使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="606e36eccd76bbe2df758a010c6e193c37180015" translate="yes" xml:space="preserve">
          <source>Now, if that routine cleanup must be done whether or not the try..catch code succeeds, then if the finally-block only executed after an exception, the same cleanup code would have to be duplicated both inside and outside the finally-block, and therefore there is no reason not to have just the finally-block alone, and let it execute regardless of exceptions or not.</source>
          <target state="translated">さて、try..catchコードが成功してもしなくても、そのルーチンのクリーンアップが行われなければならない場合、もし finally-blockが例外の後にのみ実行された場合、同じクリーンアップコードは finally-blockの内側と外側の両方で複製されなければならないので、 finally-blockだけを持っていて、例外の有無に関係なく実行させない理由はありません。</target>
        </trans-unit>
        <trans-unit id="ab338422d77b974cdd3b4ff7b8a65a4a538a4354" translate="yes" xml:space="preserve">
          <source>Now, if we already caught the exception in the inner &lt;code&gt;try&lt;/code&gt;-block by adding a &lt;code&gt;catch&lt;/code&gt;-block</source>
          <target state="translated">ここで、 &lt;code&gt;catch&lt;/code&gt; -blockを追加して、内部の &lt;code&gt;try&lt;/code&gt; - blockで例外を既にキャッチしている場合</target>
        </trans-unit>
        <trans-unit id="4a129f496aefa48f086cde8c25668e91a4aaec6c" translate="yes" xml:space="preserve">
          <source>Now, if we already caught the exception in the inner try-block by adding a catch block</source>
          <target state="translated">さて、キャッチブロックを追加して内側のトライブロックですでに例外をキャッチした場合</target>
        </trans-unit>
        <trans-unit id="1cd4efb00869a6583e4d94d1153eda91be69c20a" translate="yes" xml:space="preserve">
          <source>Now, with template literals, you are able to make use of the syntactic sugar making substitutions like this more readable:</source>
          <target state="translated">テンプレートリテラルを使用することで、このような置換をより読みやすくする構文的な糖質を利用することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="d9821269410ed7e5514ed29203c7c695ba034942" translate="yes" xml:space="preserve">
          <source>Now, with template literals, you are able to make use of the syntactic sugar, making substitutions like this more readable:</source>
          <target state="translated">テンプレートリテラルを使用することで、構文的な糖質を利用することができるようになり、このような置換をより読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="d6a039d3bfa855f8b88cddb9a92ac8422a25f640" translate="yes" xml:space="preserve">
          <source>Now, with the help of &lt;code&gt;toStringTag&lt;/code&gt;, you are able to set your own custom tag:</source>
          <target state="translated">これで、 &lt;code&gt;toStringTag&lt;/code&gt; を使用して、独自のカスタムタグを設定できます。</target>
        </trans-unit>
        <trans-unit id="109085beaaa80ac89858b283a64f7c75d7e5bb12" translate="yes" xml:space="preserve">
          <source>Null</source>
          <target state="translated">Null</target>
        </trans-unit>
        <trans-unit id="51dbbdfcaeb0bc923f99da3217f87d57a5db4195" translate="yes" xml:space="preserve">
          <source>Null and Undefined Types are strictly equal to themselves and abstractly equal to each other.</source>
          <target state="translated">ヌル型と未定義型は、それ自体は厳密には等しいが、抽象的には互いに等しい。</target>
        </trans-unit>
        <trans-unit id="fb88bbb352121968a76119aae891370e37079ca8" translate="yes" xml:space="preserve">
          <source>Null literal</source>
          <target state="translated">ヌルリテラル</target>
        </trans-unit>
        <trans-unit id="e1017425089f8186fd1fb9d0842c9c0b0a64be85" translate="yes" xml:space="preserve">
          <source>Null literal (&lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">nullリテラル（ &lt;code&gt;null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a46a1d2e73eb2b08e65223a833ff29ec95718a3e" translate="yes" xml:space="preserve">
          <source>Nullish coalescing operator</source>
          <target state="translated">ヌルい合体演算子</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="5f896a3d54e88cb7fe0791ee980ac282b357bc8e" translate="yes" xml:space="preserve">
          <source>Number cannot be parsed (e.g. &lt;code&gt;parseInt(&quot;blabla&quot;)&lt;/code&gt; or &lt;code&gt;Number(undefined)&lt;/code&gt;)</source>
          <target state="translated">数値を解析できません（例： &lt;code&gt;parseInt(&quot;blabla&quot;)&lt;/code&gt; または &lt;code&gt;Number(undefined)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="19abbe0550ddd7892de224af7d46e045794a2f6c" translate="yes" xml:space="preserve">
          <source>Number may also be expressed in literal forms like &lt;code&gt;0b101&lt;/code&gt;, &lt;code&gt;0o13&lt;/code&gt;, &lt;code&gt;0x0A&lt;/code&gt;. Learn more on numeric &lt;a href=&quot;../lexical_grammar#Numeric_literals&quot;&gt;lexical grammar here&lt;/a&gt;.</source>
          <target state="translated">数も同様に、リテラルの形で表すことができる &lt;code&gt;0b101&lt;/code&gt; 、 &lt;code&gt;0o13&lt;/code&gt; 、 &lt;code&gt;0x0A&lt;/code&gt; 。数値&lt;a href=&quot;../lexical_grammar#Numeric_literals&quot;&gt;字句文法の&lt;/a&gt;詳細については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="daaaab0ed146e3f5b5d1c5a736260a0eca5d551c" translate="yes" xml:space="preserve">
          <source>Number toLocaleString() override</source>
          <target state="translated">Number toLocaleString()オーバーライド</target>
        </trans-unit>
        <trans-unit id="d8454350ddcb351d51d54b3e07ea1396cc2236a8" translate="yes" xml:space="preserve">
          <source>Number type in details</source>
          <target state="translated">詳細の番号タイプ</target>
        </trans-unit>
        <trans-unit id="a742d56a3657d392ca56fafb1e7213c945008c0c" translate="yes" xml:space="preserve">
          <source>Number.EPSILON</source>
          <target state="translated">Number.EPSILON</target>
        </trans-unit>
        <trans-unit id="dd8c6b3cdabbfc0c1023a1835d330ee2647ae4fa" translate="yes" xml:space="preserve">
          <source>Number.MAX_SAFE_INTEGER</source>
          <target state="translated">Number.MAX_SAFE_INTEGER</target>
        </trans-unit>
        <trans-unit id="b69c92491996ff2631ab08261f8ab5c41351a30a" translate="yes" xml:space="preserve">
          <source>Number.MAX_VALUE</source>
          <target state="translated">Number.MAX_VALUE</target>
        </trans-unit>
        <trans-unit id="e3ff4a0e20a3c8a223098515fd13f8baa5103124" translate="yes" xml:space="preserve">
          <source>Number.MIN_SAFE_INTEGER</source>
          <target state="translated">Number.MIN_SAFE_INTEGER</target>
        </trans-unit>
        <trans-unit id="cab6bc3e7f6688dcc3610cf7655d2a486226c9a4" translate="yes" xml:space="preserve">
          <source>Number.MIN_VALUE</source>
          <target state="translated">Number.MIN_VALUE</target>
        </trans-unit>
        <trans-unit id="5d85e9440a8e902f524d160f672c5b366bd582c9" translate="yes" xml:space="preserve">
          <source>Number.NEGATIVE_INFINITY</source>
          <target state="translated">Number.NEGATIVE_INFINITY</target>
        </trans-unit>
        <trans-unit id="c94b096286ba8ccde8f2d94366ed7e9c4f7d608f" translate="yes" xml:space="preserve">
          <source>Number.NaN</source>
          <target state="translated">Number.NaN</target>
        </trans-unit>
        <trans-unit id="8fa1bc0fbe58e183e54642a597f8933ca617cbf1" translate="yes" xml:space="preserve">
          <source>Number.POSITIVE_INFINITY</source>
          <target state="translated">Number.POSITIVE_INFINITY</target>
        </trans-unit>
        <trans-unit id="cd3914b79e15a9de66e2dd991838cde6e116af68" translate="yes" xml:space="preserve">
          <source>Number.isFinite</source>
          <target state="translated">Number.isFinite</target>
        </trans-unit>
        <trans-unit id="47766359cf44919a1a0c60c51ee53a9e89e8a648" translate="yes" xml:space="preserve">
          <source>Number.isInteger</source>
          <target state="translated">Number.isInteger</target>
        </trans-unit>
        <trans-unit id="97ad380a07aa2db9d0064d03e18b75e4a37a0a78" translate="yes" xml:space="preserve">
          <source>Number.isNaN</source>
          <target state="translated">Number.isNaN</target>
        </trans-unit>
        <trans-unit id="9921c82f3f8d9e25de131b1ba4179f4fd8a19470" translate="yes" xml:space="preserve">
          <source>Number.isSafeInteger</source>
          <target state="translated">Number.isSafeInteger</target>
        </trans-unit>
        <trans-unit id="874c8f7be2ec578126ecc2d641a856b6d3230955" translate="yes" xml:space="preserve">
          <source>Number.parseFloat</source>
          <target state="translated">Number.parseFloat</target>
        </trans-unit>
        <trans-unit id="2b39b699c42aea1102ca0aea3379b92453f9b53f" translate="yes" xml:space="preserve">
          <source>Number.parseFloat vs parseFloat</source>
          <target state="translated">Number.parseFloat vs parseFloat</target>
        </trans-unit>
        <trans-unit id="fb59e71f3e9dbed68980384436b2bd9c5c504755" translate="yes" xml:space="preserve">
          <source>Number.parseInt</source>
          <target state="translated">Number.parseInt</target>
        </trans-unit>
        <trans-unit id="862eb2506cb824b0e5067d40e18aa2a83be8513d" translate="yes" xml:space="preserve">
          <source>Number.parseInt vs parseInt</source>
          <target state="translated">Number.parseInt vs parseInt</target>
        </trans-unit>
        <trans-unit id="a6beedb203ce189253108e519d9882e5d498273e" translate="yes" xml:space="preserve">
          <source>Number.prototype</source>
          <target state="translated">Number.prototype</target>
        </trans-unit>
        <trans-unit id="0dce729c1f239758111a59ec56807f133c5161db" translate="yes" xml:space="preserve">
          <source>Numbering system. Possible values include: &lt;code&gt;&quot;arab&quot;&lt;/code&gt;, &lt;code&gt;&quot;arabext&quot;&lt;/code&gt;, &lt;code&gt;&quot;bali&quot;&lt;/code&gt;, &lt;code&gt;&quot;beng&quot;&lt;/code&gt;, &lt;code&gt;&quot;deva&quot;&lt;/code&gt;, &lt;code&gt;&quot;fullwide&quot;&lt;/code&gt;, &lt;code&gt;&quot;gujr&quot;&lt;/code&gt;, &lt;code&gt;&quot;guru&quot;&lt;/code&gt;, &lt;code&gt;&quot;hanidec&quot;&lt;/code&gt;, &lt;code&gt;&quot;khmr&quot;&lt;/code&gt;, &lt;code&gt;&quot;knda&quot;&lt;/code&gt;, &lt;code&gt;&quot;laoo&quot;&lt;/code&gt;, &lt;code&gt;&quot;latn&quot;&lt;/code&gt;, &lt;code&gt;&quot;limb&quot;&lt;/code&gt;, &lt;code&gt;&quot;mlym&quot;&lt;/code&gt;, &lt;code&gt;&quot;mong&quot;&lt;/code&gt;, &lt;code&gt;&quot;mymr&quot;&lt;/code&gt;, &lt;code&gt;&quot;orya&quot;&lt;/code&gt;, &lt;code&gt;&quot;tamldec&quot;&lt;/code&gt;, &lt;code&gt;&quot;telu&quot;&lt;/code&gt;, &lt;code&gt;&quot;thai&quot;&lt;/code&gt;, &lt;code&gt;&quot;tibt&quot;&lt;/code&gt;.</source>
          <target state="translated">番号付けシステム。可能な値は次のとおりです。 &lt;code&gt;&quot;arab&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;arabext&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;bali&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;beng&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;deva&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;fullwide&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;gujr&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;guru&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hanidec&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;khmr&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;knda&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;laoo&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;latn&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;limb&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;mlym&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;mong&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;mymr&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;orya&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;tamldec&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;telu&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;thai&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;tibt&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9477a3d0b53ef2250d73c4d9f4e068bd96145eaa" translate="yes" xml:space="preserve">
          <source>Numbers &amp;amp; dates</source>
          <target state="translated">番号と日付</target>
        </trans-unit>
        <trans-unit id="24556b28394d712542c87fdae09eb7a61ea85bba" translate="yes" xml:space="preserve">
          <source>Numbers and dates</source>
          <target state="translated">数字と日付</target>
        </trans-unit>
        <trans-unit id="d508ec23bfb6d2202daf05991aab90be56a49da5" translate="yes" xml:space="preserve">
          <source>Numbers higher than safe integer</source>
          <target state="translated">安全な整数よりも高い数値</target>
        </trans-unit>
        <trans-unit id="f16fdfbff67b1070daadaa1d5eb06dfdf29dbc55" translate="yes" xml:space="preserve">
          <source>Numbers.</source>
          <target state="translated">Numbers.</target>
        </trans-unit>
        <trans-unit id="48b8cea5176301854bb33d1c73f8b7e0714b960e" translate="yes" xml:space="preserve">
          <source>Numeric literals</source>
          <target state="translated">数値リテラル</target>
        </trans-unit>
        <trans-unit id="830f0ed9d3be32844d496bfeb9d33c2f9dea7d6a" translate="yes" xml:space="preserve">
          <source>Numeric separators</source>
          <target state="translated">数値セパレータ</target>
        </trans-unit>
        <trans-unit id="8e7b8e180f16368b046acb8dba195a21c9921fa9" translate="yes" xml:space="preserve">
          <source>Numeric separators (&lt;code&gt;1_000_000_000_000&lt;/code&gt;)</source>
          <target state="translated">数値区切り文字（ &lt;code&gt;1_000_000_000_000&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="70d17be49253c52c6b6999c4fef039cfe8fc766b" translate="yes" xml:space="preserve">
          <source>Numeric sorting</source>
          <target state="translated">数値ソート</target>
        </trans-unit>
        <trans-unit id="d72f3f36d65608cf6814ea50affc22ea1982ba35" translate="yes" xml:space="preserve">
          <source>OK, that fixed my problem. But why didn't you say that in the first place?</source>
          <target state="translated">問題は解決したわ でもなぜ最初に言わなかったの?</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="a7dc9622d9872b2041ea4b92f628450cd8b88097" translate="yes" xml:space="preserve">
          <source>Object destructuring</source>
          <target state="translated">オブジェクトの破壊</target>
        </trans-unit>
        <trans-unit id="2c2cbbc826c5bb597345c055833162ff9ebaf074" translate="yes" xml:space="preserve">
          <source>Object for which the properties are iterated.</source>
          <target state="translated">プロパティが反復処理されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="909840cb3e63a76efd9b286f78f024720d816a0e" translate="yes" xml:space="preserve">
          <source>Object initializer</source>
          <target state="translated">オブジェクトのイニシャライザ</target>
        </trans-unit>
        <trans-unit id="1a5080520c7e015789b1f08a193be7964d2f2eb9" translate="yes" xml:space="preserve">
          <source>Object initializer/literal syntax.</source>
          <target state="translated">オブジェクトのイニシャライザ/リテラル構文。</target>
        </trans-unit>
        <trans-unit id="9b5e4c69ef604ed340a3861fd63df244ae0948cb" translate="yes" xml:space="preserve">
          <source>Object iteration</source>
          <target state="translated">オブジェクトの繰り返し</target>
        </trans-unit>
        <trans-unit id="5ac6e63785bb63178fb4269cb3e1f1fbf1db7783" translate="yes" xml:space="preserve">
          <source>Object literal notation vs JSON</source>
          <target state="translated">オブジェクトリテラル記法とJSON</target>
        </trans-unit>
        <trans-unit id="d42c3ad7cb75bb53ff9e8f6d1fa2aa0f08b3c271" translate="yes" xml:space="preserve">
          <source>Object literals</source>
          <target state="translated">オブジェクトリテラル</target>
        </trans-unit>
        <trans-unit id="09dd9201d82ff1751e0474427ce645d44cd6061f" translate="yes" xml:space="preserve">
          <source>Object methods</source>
          <target state="translated">オブジェクトメソッド</target>
        </trans-unit>
        <trans-unit id="0c205ccc6a785cecb0e5f75020370d4618313ccb" translate="yes" xml:space="preserve">
          <source>Object property that is itself another object</source>
          <target state="translated">それ自身が別のオブジェクトであるオブジェクトプロパティ</target>
        </trans-unit>
        <trans-unit id="e5c83d23c16df6f4ac11ed77d3195e8b1242b6b7" translate="yes" xml:space="preserve">
          <source>Object prototypes</source>
          <target state="translated">オブジェクトのプロトタイプ</target>
        </trans-unit>
        <trans-unit id="cea32dd4664b3208132e8994e560ecbc21885560" translate="yes" xml:space="preserve">
          <source>Object references (and not the actual object): &lt;code&gt;concat&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays. This includes elements of array arguments that are also arrays.</source>
          <target state="translated">オブジェクト参照（実際のオブジェクトではない）： &lt;code&gt;concat&lt;/code&gt; は、オブジェクト参照を新しい配列にコピーします。元の配列と新しい配列の両方が同じオブジェクトを参照しています。つまり、参照先のオブジェクトが変更された場合、変更は新しい配列と元の配列の両方に表示されます。これには、配列でもある配列引数の要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="26a2d35f48fdf3ea0ac3bdf6bea4fdfce21b28f0" translate="yes" xml:space="preserve">
          <source>Object to check if it (or its prototype chain) &lt;span id=&quot;result_box&quot;&gt;contains&lt;/span&gt; the property with specified name (&lt;code&gt;&lt;var&gt;prop&lt;/var&gt;&lt;/code&gt;).</source>
          <target state="translated">オブジェクト（またはそのプロトタイプチェーン）&lt;span id=&quot;result_box&quot;&gt;に&lt;/span&gt;、指定された名前（ &lt;code&gt;&lt;var&gt;prop&lt;/var&gt;&lt;/code&gt; ）のプロパティが&lt;span id=&quot;result_box&quot;&gt;含まれて&lt;/span&gt;いるかどうかを確認するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e82aec661987c4a687474ba3a8888549f534cfa5" translate="yes" xml:space="preserve">
          <source>Object to check if it (or its prototype chain) &lt;span id=&quot;result_box&quot;&gt;contains&lt;/span&gt; the property with specified name.</source>
          <target state="translated">オブジェクト（またはそのプロトタイプチェーン）&lt;span id=&quot;result_box&quot;&gt;に&lt;/span&gt;指定した名前のプロパティが&lt;span id=&quot;result_box&quot;&gt;含まれて&lt;/span&gt;いるかどうかを確認するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6bd33cf8966b77b5f83bd225f90d45d5c8623879" translate="yes" xml:space="preserve">
          <source>Object to use as &lt;a href=&quot;../../operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; inside &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;/a&gt;内部 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; として使用するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7207b7c2509b68556068ac7fd883f789d1472a6d" translate="yes" xml:space="preserve">
          <source>Object to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 実行時に &lt;code&gt;this&lt;/code&gt; として使用するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a91b9c6600e3da12d78e6ed9278ab68d6ba82947" translate="yes" xml:space="preserve">
          <source>Object to use as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;. If no initial value is supplied, the last element in the array will be used. Calling reduce on an empty array without an initial value is an error.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 最初の呼び出しの最初の引数として使用するオブジェクト。初期値を指定しない場合、配列の最後の要素が使用されます。初期値なしで空の配列に対してreduceを呼び出すとエラーになります。</target>
        </trans-unit>
        <trans-unit id="a79ef1be7c6b1571f5ba3ec1cb78bb0f4ac52a48" translate="yes" xml:space="preserve">
          <source>Object transformations</source>
          <target state="translated">オブジェクトの変換</target>
        </trans-unit>
        <trans-unit id="539434478ab81454acee100589f581a17aa3637e" translate="yes" xml:space="preserve">
          <source>Object type and object instance</source>
          <target state="translated">オブジェクトの種類とオブジェクトのインスタンス</target>
        </trans-unit>
        <trans-unit id="c57b5d877d979747255a4b2533bf17dd38044ec4" translate="yes" xml:space="preserve">
          <source>Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.</source>
          <target state="translated">プロキシが仮想化するオブジェクト。プロキシのストレージバックエンドとして使用されることが多い。オブジェクトの非拡張性や設定不可能なプロパティに関する不変量(変更されないセマンティクス)が ターゲットに対して検証されます。</target>
        </trans-unit>
        <trans-unit id="5c93e1d1a5157c01dcc014f79b1d1295cf5d2a82" translate="yes" xml:space="preserve">
          <source>Object whose iterable properties are iterated.</source>
          <target state="translated">イテレート可能なプロパティがイテレートされるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9c2fce95f2ceb371a5969a100525ae6c686da465" translate="yes" xml:space="preserve">
          <source>Object whose iterable properties are to be iterated over.</source>
          <target state="translated">反復可能なプロパティが反復処理されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d820fa59638feca2d1e7ce5b67237fb602afbd8c" translate="yes" xml:space="preserve">
          <source>Object whose non-Symbol enumerable properties are iterated over.</source>
          <target state="translated">シンボルではない列挙可能なプロパティが反復処理されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1d51672345557c0f022fd737f9b7489d16b30459" translate="yes" xml:space="preserve">
          <source>Object.assign</source>
          <target state="translated">Object.assign</target>
        </trans-unit>
        <trans-unit id="afeac9832f20f4f960fcbf8efdf9a36bb14b252d" translate="yes" xml:space="preserve">
          <source>Object.create</source>
          <target state="translated">Object.create</target>
        </trans-unit>
        <trans-unit id="792a27c424ad52e5a9356f3722643e927041e20f" translate="yes" xml:space="preserve">
          <source>Object.defineProperties</source>
          <target state="translated">Object.defineProperties</target>
        </trans-unit>
        <trans-unit id="1787236ef0de7cdd99f6661cc7e12ed0cad67a57" translate="yes" xml:space="preserve">
          <source>Object.defineProperty</source>
          <target state="translated">Object.defineProperty</target>
        </trans-unit>
        <trans-unit id="23657d35b7978a1ef599d76ac96dd819a05b63f1" translate="yes" xml:space="preserve">
          <source>Object.entries</source>
          <target state="translated">Object.entries</target>
        </trans-unit>
        <trans-unit id="11300a686cd7515f24159128678600c710b75b7d" translate="yes" xml:space="preserve">
          <source>Object.freeze</source>
          <target state="translated">Object.freeze</target>
        </trans-unit>
        <trans-unit id="8bdb894c2c9b7aab893887fee7ffbe717c0a3088" translate="yes" xml:space="preserve">
          <source>Object.fromEntries</source>
          <target state="translated">Object.fromEntries</target>
        </trans-unit>
        <trans-unit id="c4498f87db08d462e0147a43191926ac2168042c" translate="yes" xml:space="preserve">
          <source>Object.getOwnPropertyDescriptor</source>
          <target state="translated">Object.getOwnPropertyDescriptor</target>
        </trans-unit>
        <trans-unit id="807e7ea84c59e8904c697c58f447e5ecc35d7f6d" translate="yes" xml:space="preserve">
          <source>Object.getOwnPropertyDescriptors</source>
          <target state="translated">Object.getOwnPropertyDescriptors</target>
        </trans-unit>
        <trans-unit id="a37c98a6f5f7ca5863f83538b43a1b90ce0f8d42" translate="yes" xml:space="preserve">
          <source>Object.getOwnPropertyNames</source>
          <target state="translated">Object.getOwnPropertyNames</target>
        </trans-unit>
        <trans-unit id="1061044277b2b1b91a3ad9fd72b96a926df8e0ad" translate="yes" xml:space="preserve">
          <source>Object.getOwnPropertySymbols</source>
          <target state="translated">Object.getOwnPropertySymbols</target>
        </trans-unit>
        <trans-unit id="11a92c8196539fdab3857b1551dea0f331c775a8" translate="yes" xml:space="preserve">
          <source>Object.getPrototypeOf</source>
          <target state="translated">Object.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="984b87d74b780b8037e041c89fdb3b9ea8b428c1" translate="yes" xml:space="preserve">
          <source>Object.is</source>
          <target state="translated">Object.is</target>
        </trans-unit>
        <trans-unit id="3e331a82ef535f984ef9183956b7286a203567e2" translate="yes" xml:space="preserve">
          <source>Object.isExtensible</source>
          <target state="translated">Object.isExtensible</target>
        </trans-unit>
        <trans-unit id="5d740eafae2d7f4c23753871edf8da6baf39e321" translate="yes" xml:space="preserve">
          <source>Object.isFrozen</source>
          <target state="translated">Object.isFrozen</target>
        </trans-unit>
        <trans-unit id="401b9e2d171902ba97c10b15298ed41024d439e5" translate="yes" xml:space="preserve">
          <source>Object.isSealed</source>
          <target state="translated">Object.isSealed</target>
        </trans-unit>
        <trans-unit id="c5a933e00dc39b7be5f3039f9caf7a7ff8b476c8" translate="yes" xml:space="preserve">
          <source>Object.keys</source>
          <target state="translated">Object.keys</target>
        </trans-unit>
        <trans-unit id="c5ae9d62247de99530000c1b502d54c119c0d70a" translate="yes" xml:space="preserve">
          <source>Object.preventExtensions</source>
          <target state="translated">Object.preventExtensions</target>
        </trans-unit>
        <trans-unit id="184a9f46e6f8df1d301d8b176559956340a32e13" translate="yes" xml:space="preserve">
          <source>Object.proto</source>
          <target state="translated">Object.proto</target>
        </trans-unit>
        <trans-unit id="e361988f8a29677e37e2253ff4367ab335d2d805" translate="yes" xml:space="preserve">
          <source>Object.prototype</source>
          <target state="translated">Object.prototype</target>
        </trans-unit>
        <trans-unit id="2be0f5b5be7ab78df495b765e0cf5fa3e658f896" translate="yes" xml:space="preserve">
          <source>Object.prototype.constructor</source>
          <target state="translated">Object.prototype.constructor</target>
        </trans-unit>
        <trans-unit id="21670eec92055706400650389c6e16301b7d4ab7" translate="yes" xml:space="preserve">
          <source>Object.seal</source>
          <target state="translated">Object.seal</target>
        </trans-unit>
        <trans-unit id="55f5999ac0dfe119c304a066eeb503b47cf1fa90" translate="yes" xml:space="preserve">
          <source>Object.setPrototypeOf</source>
          <target state="translated">Object.setPrototypeOf</target>
        </trans-unit>
        <trans-unit id="cbb16b7daf317d430c04b08c1bf4811c56181f3a" translate="yes" xml:space="preserve">
          <source>Object.values</source>
          <target state="translated">Object.values</target>
        </trans-unit>
        <trans-unit id="c63ede0fd2f8ab23693436f3ea422a8f9968a84e" translate="yes" xml:space="preserve">
          <source>Objects and maps compared</source>
          <target state="translated">オブジェクトと地図を比較</target>
        </trans-unit>
        <trans-unit id="68742af0b22b6e7f22112c6f31f5760699c2f283" translate="yes" xml:space="preserve">
          <source>Objects are extensible by default: they can have new properties added to them, and (in engines that support &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt;  their __proto__ property) can be modified. An object can be marked as non-extensible using &lt;a href=&quot;preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;seal&quot;&gt;&lt;code&gt;Object.seal()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;freeze&quot;&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトはデフォルトで拡張可能です。オブジェクトには新しいプロパティを追加でき、（&lt;a href=&quot;proto&quot;&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;/a&gt;をサポートするエンジンで は__proto__プロパティを）変更できます。&lt;a href=&quot;preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;seal&quot;&gt; &lt;code&gt;Object.seal()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;freeze&quot;&gt; &lt;code&gt;Object.freeze()&lt;/code&gt; &lt;/a&gt;を使用して、オブジェクトを非拡張可能としてマークできます。</target>
        </trans-unit>
        <trans-unit id="f58bdefefec140013b14693c1564450924226747" translate="yes" xml:space="preserve">
          <source>Objects are extensible by default: they can have new properties added to them, and (in engines that support &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt;) their &lt;code&gt;__proto__&lt;/code&gt; property can be modified. An object can be marked as non-extensible using &lt;a href=&quot;preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;seal&quot;&gt;&lt;code&gt;Object.seal()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;freeze&quot;&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトはデフォルトで拡張可能です。オブジェクトに新しいプロパティを追加したり、（&lt;a href=&quot;proto&quot;&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;/a&gt;をサポートするエンジンでは） &lt;code&gt;__proto__&lt;/code&gt; プロパティを変更したりできます。&lt;a href=&quot;preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;seal&quot;&gt; &lt;code&gt;Object.seal()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;freeze&quot;&gt; &lt;code&gt;Object.freeze()&lt;/code&gt; &lt;/a&gt;を使用して、オブジェクトを非拡張可能としてマークできます。</target>
        </trans-unit>
        <trans-unit id="b044a3aff72fdad9c2206d29b8b5f7c8c3486301" translate="yes" xml:space="preserve">
          <source>Objects can be initialized using &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;new Object()&lt;/code&gt;&lt;/a&gt;,&lt;code&gt; &lt;a href=&quot;../global_objects/object/create&quot;&gt;Object.create()&lt;/a&gt;&lt;/code&gt;, or using the &lt;em&gt;literal&lt;/em&gt; notation (&lt;em&gt;initializer&lt;/em&gt; notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">オブジェクトは、&lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;new Object()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt; &lt;a href=&quot;../global_objects/object/create&quot;&gt;Object.create()&lt;/a&gt;&lt;/code&gt; 、または&lt;em&gt;リテラル&lt;/em&gt;表記（&lt;em&gt;初期化&lt;/em&gt;表記）を使用して&lt;em&gt;初期化できます&lt;/em&gt;。オブジェクト初期化子は、中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で囲まれた、オブジェクトのプロパティ名と関連する値の0個以上のペアのコンマ区切りリストです。 &lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abf8ac5ef48d5ee159fe510a0970535582e07fe9" translate="yes" xml:space="preserve">
          <source>Objects can be initialized using &lt;a href=&quot;../global_objects/object/object&quot;&gt;&lt;code&gt;new Object()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&lt;a href=&quot;../global_objects/object/create&quot;&gt;Object.create()&lt;/a&gt;&lt;/code&gt;, or using the &lt;em&gt;literal&lt;/em&gt; notation (&lt;em&gt;initializer&lt;/em&gt; notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">オブジェクトは、&lt;a href=&quot;../global_objects/object/object&quot;&gt; &lt;code&gt;new Object()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;&lt;a href=&quot;../global_objects/object/create&quot;&gt;Object.create()&lt;/a&gt;&lt;/code&gt; を使用するか、&lt;em&gt;リテラル&lt;/em&gt;表記（&lt;em&gt;初期化&lt;/em&gt;表記）を使用して&lt;em&gt;初期化できます&lt;/em&gt;。オブジェクト初期化子は、オブジェクトのプロパティ名と関連する値の0個以上のペアのコンマ区切りのリストであり、中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で囲まれています。</target>
        </trans-unit>
        <trans-unit id="aa26dfa5a9bb1b6c3980956f02a24cbbf2def923" translate="yes" xml:space="preserve">
          <source>Objects can be sorted given the value of one of their properties.</source>
          <target state="translated">オブジェクトは、プロパティのいずれかの値を指定してソートすることができます。</target>
        </trans-unit>
        <trans-unit id="00c4b53bfcdfc997ada5dff96857873175ec7749" translate="yes" xml:space="preserve">
          <source>Objects can be sorted, given the value of one of their properties.</source>
          <target state="translated">オブジェクトは、プロパティのいずれかの値を指定してソートすることができます。</target>
        </trans-unit>
        <trans-unit id="e090e0051f8f6019e7f092d7073dd1d97cf3d118" translate="yes" xml:space="preserve">
          <source>Objects like &lt;a href=&quot;../global_objects/date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; will be a string after &lt;a href=&quot;../global_objects/json/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;などのオブジェクトは、&lt;a href=&quot;../global_objects/json/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; の&lt;/a&gt;後の文字列になります。</target>
        </trans-unit>
        <trans-unit id="2fd99ecc7e9637258048cc755dd3dc2918b6e9a2" translate="yes" xml:space="preserve">
          <source>Objects overriding &lt;code&gt;toLocaleString&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toLocaleString&lt;/code&gt; をオーバーライドするオブジェクト</target>
        </trans-unit>
        <trans-unit id="b7d47a49ddf72149c546e97fb9bbb6129ffe9333" translate="yes" xml:space="preserve">
          <source>Objects overriding toLocaleString</source>
          <target state="translated">オブジェクト toLocaleString をオーバーライドする</target>
        </trans-unit>
        <trans-unit id="5ce0e56128a4f90000e416b34336b31c1c5b8295" translate="yes" xml:space="preserve">
          <source>Objects sealed with &lt;a href=&quot;seal&quot;&gt;&lt;code&gt;Object.seal()&lt;/code&gt;&lt;/a&gt; can have their existing properties changed. Existing properties in objects frozen with &lt;code&gt;Object.freeze()&lt;/code&gt; are made immutable.</source>
          <target state="translated">&lt;a href=&quot;seal&quot;&gt; &lt;code&gt;Object.seal()&lt;/code&gt; で&lt;/a&gt;シールされたオブジェクトは、既存のプロパティを変更できます。 &lt;code&gt;Object.freeze()&lt;/code&gt; で凍結されたオブジェクトの既存のプロパティは不変になります。</target>
        </trans-unit>
        <trans-unit id="2ea02164b35810facc8fd5f868d6a8e0b4f02ecf" translate="yes" xml:space="preserve">
          <source>Objects themselves are not iterable, but they become iterable when used in an Array, or with iterating functions such as &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;, and &lt;code&gt;assign()&lt;/code&gt;. When merging 2 objects together with the spread operator, it is assumed another iterating function is used when the merging occurs.</source>
          <target state="translated">オブジェクト自体は反復可能ではありませんが、配列で使用したり、 &lt;code&gt;map()&lt;/code&gt; 、 &lt;code&gt;reduce()&lt;/code&gt; 、 &lt;code&gt;assign()&lt;/code&gt; などの反復関数を使用したりすると反復可能になります。スプレッド演算子を使用して2つのオブジェクトをマージする場合、マージが発生すると別の反復関数が使用されると想定されます。</target>
        </trans-unit>
        <trans-unit id="beb30cf5b8f4097496ea2b9dd4283f5e341a1ec1" translate="yes" xml:space="preserve">
          <source>Objects vs. Maps</source>
          <target state="translated">オブジェクトとマップ</target>
        </trans-unit>
        <trans-unit id="4e7d8c7849f1648c77052055f32051f9581d8bc7" translate="yes" xml:space="preserve">
          <source>Obsolete</source>
          <target state="translated">Obsolete</target>
        </trans-unit>
        <trans-unit id="9b18d91c749126d46c3bf5e9a65d6064ff9a1b3a" translate="yes" xml:space="preserve">
          <source>Obvious errors</source>
          <target state="translated">明らかな誤り</target>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="translated">Octal</target>
        </trans-unit>
        <trans-unit id="90528a941045d7980fe1098bd071fe92ef94b8ba" translate="yes" xml:space="preserve">
          <source>Octal escape sequences</source>
          <target state="translated">オクタルエスケープシーケンス</target>
        </trans-unit>
        <trans-unit id="35db65f5024bbcd9581dc9b55989112f514902d7" translate="yes" xml:space="preserve">
          <source>Octal interpretations with no radix</source>
          <target state="translated">基数のない八進数解釈</target>
        </trans-unit>
        <trans-unit id="3aba3e82f634db6f57c6bc8b33c40e18e5270dbf" translate="yes" xml:space="preserve">
          <source>Octal literal escapes started by &quot;&lt;code&gt;\0o&lt;/code&gt;&quot; and followed by one or more digits, for example &lt;code&gt;\0o251&lt;/code&gt;</source>
          <target state="translated">8進数のリテラルエスケープは、「 &lt;code&gt;\0o&lt;/code&gt; 」で始まり、その後に1つ以上の数字が続きます（例： &lt;code&gt;\0o251&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a4fa462defa6720eb1a2e15decf18e7981dec8a" translate="yes" xml:space="preserve">
          <source>Octal literal escapes started by &quot;\&quot; and (a) digit(s), for example &lt;code&gt;\251&lt;/code&gt;</source>
          <target state="translated">&quot;\&quot;と（a）数字で始まる8進リテラルエスケープ、たとえば &lt;code&gt;\251&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf801c9640c23535858bd98be19f85836f029ce3" translate="yes" xml:space="preserve">
          <source>Octal literals and octal escape sequences are deprecated and will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; in strict mode. With ECMAScript 2015 and later, the standardized syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;O&quot; (&lt;code&gt;0o&lt;/code&gt; or &lt;code&gt;0O)&lt;/code&gt;.</source>
          <target state="translated">8進リテラルと8進エスケープシーケンスは非推奨であり、厳密モードでは&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;をスローします。ECMAScript 2015以降では、標準化された構文は先行ゼロを使用し、その後に小文字または大文字のラテン文字 &quot;O&quot;（ &lt;code&gt;0o&lt;/code&gt; または &lt;code&gt;0O)&lt;/code&gt; が続きます。</target>
        </trans-unit>
        <trans-unit id="e5539914d6089732786ff3c0b10e28353625f9c2" translate="yes" xml:space="preserve">
          <source>Octal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;O&quot; (&lt;code&gt;0o&lt;/code&gt; or &lt;code&gt;0O)&lt;/code&gt;. Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the &lt;code&gt;0o&lt;/code&gt; are outside the range (01234567), the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is thrown: &quot;Missing octal digits after 0o&quot;.</source>
          <target state="translated">8進数の構文では、先行ゼロとそれに続く小文字または大文字のラテン文字「O」（ &lt;code&gt;0o&lt;/code&gt; または &lt;code&gt;0O)&lt;/code&gt; を使用します。この構文はECMAScript2015の新機能であるため、以下のブラウザー互換性表を参照してください。 &lt;code&gt;0o&lt;/code&gt; の後の数字が範囲（01234567）の外にある場合、次の&lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;がスローされます： &quot;0oの後の8進数がありません&quot;。</target>
        </trans-unit>
        <trans-unit id="a9d3b81b66cc2bee52e203e0da8a810f05c16898" translate="yes" xml:space="preserve">
          <source>Octal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;O&quot; (&lt;code&gt;0o&lt;/code&gt; or &lt;code&gt;0O)&lt;/code&gt;. Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the &lt;code&gt;0o&lt;/code&gt; are outside the range (01234567), the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Missing octal digits after 0o&quot;.</source>
          <target state="translated">8進数の構文では、先頭のゼロの後に小文字または大文字のラテン文字 &quot;O&quot;（ &lt;code&gt;0o&lt;/code&gt; または &lt;code&gt;0O)&lt;/code&gt; が続きます。この構文はECMAScript 2015の新機能なので、以下のブラウザー互換性表を参照してください。 &lt;code&gt;0o&lt;/code&gt; の後の数字が範囲（01234567）の外にある場合、次の &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; がスローされます：「0oの後の8進数字がありません」。</target>
        </trans-unit>
        <trans-unit id="f7b0ebdb75c3b76f9782d78b58500613cd134b9d" translate="yes" xml:space="preserve">
          <source>Octal numeric literals (&lt;code&gt;0o&lt;/code&gt;)</source>
          <target state="translated">8進数のリテラル（ &lt;code&gt;0o&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1af767caeb567e9b51bd28eba20513fff98efb12" translate="yes" xml:space="preserve">
          <source>Octal syntax &lt;code&gt;var n = 023;&lt;/code&gt;</source>
          <target state="translated">8進構文 &lt;code&gt;var n = 023;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fec0e52243a8aacabf2009b1d14ed746829c73a6" translate="yes" xml:space="preserve">
          <source>Oftentimes, indenting differently or double checking indentation helps to spot these errors.</source>
          <target state="translated">多くの場合、インデントの仕方を変えたり、インデントを二重にチェックしたりすることで、このようなエラーを発見することができます。</target>
        </trans-unit>
        <trans-unit id="6c9a14e3dadfd26458e25523ea19370fbbe31c25" translate="yes" xml:space="preserve">
          <source>Oftentimes, there is a missing comma in your object initializer code:</source>
          <target state="translated">よくあるのは、オブジェクトのイニシャライザのコードにカンマがないことです。</target>
        </trans-unit>
        <trans-unit id="2cb70f9c6d8e5eded9a4d44e5ec42d0832863800" translate="yes" xml:space="preserve">
          <source>Oftentimes, there is a missing curly bracket in your function code:</source>
          <target state="translated">しばしば、関数コードの中に中括弧がないことがあります。</target>
        </trans-unit>
        <trans-unit id="abd4ce6e78272423121b045b9bd9d040305af2cb" translate="yes" xml:space="preserve">
          <source>Ok, now it's pretty clear why changing of the constructor can be useful.</source>
          <target state="translated">これで、コンストラクタの変更が便利な理由がよくわかりました。</target>
        </trans-unit>
        <trans-unit id="57b1a568db87af836e74c9321e1f1e35040e63f1" translate="yes" xml:space="preserve">
          <source>Ok, now it's pretty clear why changing the constructor can be useful.</source>
          <target state="translated">コンストラクタを変更すると便利な理由がよくわかりました。</target>
        </trans-unit>
        <trans-unit id="c039c3bb5698ca9418d734906ec806e00ff643ec" translate="yes" xml:space="preserve">
          <source>Old-style method that returns the value contained inside the global variable.</source>
          <target state="translated">グローバル変数の内部に含まれる値を返す旧式のメソッド。</target>
        </trans-unit>
        <trans-unit id="adef1ddbafa19516af05ed7d1c5464a4a84bbc63" translate="yes" xml:space="preserve">
          <source>Old: &lt;code&gt;[()=&amp;gt;x for (x of [0, 1, 2])][1]() // 2&lt;/code&gt;</source>
          <target state="translated">古い： &lt;code&gt;[()=&amp;gt;x for (x of [0, 1, 2])][1]() // 2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01e1bfa5e54b3cbd699d11001d32a99cea15bd41" translate="yes" xml:space="preserve">
          <source>Old: &lt;code&gt;[i * 2 for (i of numbers)]&lt;/code&gt;</source>
          <target state="translated">古い： &lt;code&gt;[i * 2 for (i of numbers)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f3cf2460c09c5409d739ecc8741dd670c9e980f" translate="yes" xml:space="preserve">
          <source>Older Firefox versions implement an older version of the generators proposal. In the older version, generators were defined using a regular &lt;code&gt;function&lt;/code&gt; keyword (without an asterisk) among other differences. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;Legacy generator function &lt;/a&gt;for further information.</source>
          <target state="translated">古いバージョンのFirefoxは、古いバージョンのジェネレーターの提案を実装しています。以前のバージョンでは、ジェネレータは通常の &lt;code&gt;function&lt;/code&gt; キーワード（アスタリスクなし）を使用して定義されていました。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;レガシージェネレーター関数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8c1ddb115381b88b95fe615710e6984ac0dd8475" translate="yes" xml:space="preserve">
          <source>Omit the trailing commas to parse the JSON correctly:</source>
          <target state="translated">JSONを正しくパースするために、最後のカンマを省略してください。</target>
        </trans-unit>
        <trans-unit id="d22c751d2f2fa0b40ee0013b11339f8eab4c23a5" translate="yes" xml:space="preserve">
          <source>On &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;../array/tolocalestring&quot;&gt;&lt;code&gt;toLocaleString()&lt;/code&gt;&lt;/a&gt; can be used to print array values as a string, optionally with locale-specific identifiers (such as currency symbols) appended to them:</source>
          <target state="translated">上の&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクト&lt;a href=&quot;../array/tolocalestring&quot;&gt; &lt;code&gt;toLocaleString()&lt;/code&gt; &lt;/a&gt;必要に応じてそれらに付加（例えば、通貨記号など）ロケール固有の識別子で、文字列として配列値を印刷するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b6afbfd579d5e581ef4cb5540922cafa23e1d3e2" translate="yes" xml:space="preserve">
          <source>On &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;../date/tolocalestring&quot;&gt;&lt;code&gt;toLocaleString()&lt;/code&gt;&lt;/a&gt; is used to print out date displays more suitable for specific locales:</source>
          <target state="translated">上の&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;../date/tolocalestring&quot;&gt; &lt;code&gt;toLocaleString()&lt;/code&gt; &lt;/a&gt;、特定のロケールのためのより適切な日付が表示をプリントアウトするために使用されます。</target>
        </trans-unit>
        <trans-unit id="7950071d969ac8dee9435b161c0e94dde1ba1122" translate="yes" xml:space="preserve">
          <source>On &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;../number/tolocalestring&quot;&gt;&lt;code&gt;toLocaleString()&lt;/code&gt;&lt;/a&gt; is used to print out number displays more suitable for specific locales, e.g. with the correct separators:</source>
          <target state="translated">上&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクト&lt;a href=&quot;../number/tolocalestring&quot;&gt; &lt;code&gt;toLocaleString()&lt;/code&gt; &lt;/a&gt;正しいセパレータと、例えば、特定のロケールのためのより適切な数のディスプレイをプリントアウトするために使用されます。</target>
        </trans-unit>
        <trans-unit id="6f5ee5326703ea0acadab67fded2f70da772e810" translate="yes" xml:space="preserve">
          <source>On IE 6, 7, and 8 a lot of host objects are objects and not functions. For example:</source>
          <target state="translated">IE 6,7,8 では、ホストオブジェクトの多くはオブジェクトであって関数ではありません。例えば</target>
        </trans-unit>
        <trans-unit id="5e13a7a64ea3bfc67050fce97da8c494a480b3c4" translate="yes" xml:space="preserve">
          <source>On each iteration a value of a different property is assigned to &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt; may be declared with &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt;.</source>
          <target state="translated">各反復で、異なるプロパティの値が &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt; 割り当てられます。 &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt; は、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; で宣言できます。</target>
        </trans-unit>
        <trans-unit id="19ef483a3b402f3e9cf904fc746b4245571f1c27" translate="yes" xml:space="preserve">
          <source>On each iteration a value of a different property is assigned to &lt;em&gt;variable&lt;/em&gt;.</source>
          <target state="translated">各反復で、異なるプロパティの値が&lt;em&gt;variableに&lt;/em&gt;割り当てられ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="16051ce58a5eaf6e90e2572cd4b9bba9901538b9" translate="yes" xml:space="preserve">
          <source>On the other hand the following is illegal because it's an Identifier, which is an &lt;code&gt;IdentifierName&lt;/code&gt; without the reserved words. Identifiers are used for &lt;code&gt;FunctionDeclaration,&amp;nbsp;FunctionExpression, VariableDeclaration&lt;/code&gt; and so on. &lt;code&gt;IdentifierNames &lt;/code&gt;are used for&lt;code&gt; MemberExpression,&amp;nbsp;CallExpression&lt;/code&gt; and so on.</source>
          <target state="translated">それは識別子、ですので、一方以下は違法である &lt;code&gt;IdentifierName&lt;/code&gt; 予約語なし。識別子は、 &lt;code&gt;FunctionDeclaration,&amp;nbsp;FunctionExpression, VariableDeclaration&lt;/code&gt; などに使用されます。 &lt;code&gt;IdentifierNames &lt;/code&gt; は、 &lt;code&gt; MemberExpression,&amp;nbsp;CallExpression&lt;/code&gt; などに使用されます。</target>
        </trans-unit>
        <trans-unit id="688b98ea36059fd7b3392c33ae974783d43960bf" translate="yes" xml:space="preserve">
          <source>On the other hand the following is illegal because it's an&lt;em&gt; Identifier&lt;/em&gt;, which is an &lt;em&gt;IdentifierName&lt;/em&gt; without the reserved words. Identifiers are used for &lt;em&gt;FunctionDeclaration&lt;/em&gt;, &lt;em&gt;FunctionExpression&lt;/em&gt;,&lt;em&gt; VariableDeclaration&lt;/em&gt; and so on. &lt;em&gt;IdentifierNames&lt;/em&gt; are used for&lt;em&gt; MemberExpression&lt;/em&gt;,&lt;em&gt; CallExpression&lt;/em&gt; and so on.</source>
          <target state="translated">それはだから一方以下は違法である&lt;em&gt;識別子&lt;/em&gt;である、&lt;em&gt;IdentifierName&lt;/em&gt;予約語なし。識別子は、&lt;em&gt;FunctionDeclaration&lt;/em&gt;、&lt;em&gt;FunctionExpression&lt;/em&gt;、&lt;em&gt;VariableDeclaration&lt;/em&gt;などに使用されます。&lt;em&gt;IdentifierNames&lt;/em&gt;は、&lt;em&gt;MemberExpression&lt;/em&gt;、&lt;em&gt;CallExpression&lt;/em&gt;などに使用されます。</target>
        </trans-unit>
        <trans-unit id="9935fb8939730fb09b5ab3d58a8b86982428a7e8" translate="yes" xml:space="preserve">
          <source>On the other hand, the variable the function is assigned to is limited only by its scope, which is guaranteed to include the scope in which the function is declared.</source>
          <target state="translated">一方、関数が代入される変数は、そのスコープによってのみ制限され、関数が宣言されているスコープを含むことが保証されています。</target>
        </trans-unit>
        <trans-unit id="3dbc34eb4553fabed01be09202a41f4b8667aec5" translate="yes" xml:space="preserve">
          <source>Once a &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; is fulfilled or rejected, the respective handler function (&lt;code&gt;onFulfilled&lt;/code&gt; or &lt;code&gt;onRejected&lt;/code&gt;) will be called &lt;strong&gt;asynchronously&lt;/strong&gt; (scheduled in the current thread loop). The behavior of the handler function follows a specific set of rules. If a handler function:</source>
          <target state="translated">いったん&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;果たさまたは拒否され、それぞれのハンドラ関数（ &lt;code&gt;onFulfilled&lt;/code&gt; または &lt;code&gt;onRejected&lt;/code&gt; が）と呼ばれる&lt;strong&gt;非同期&lt;/strong&gt;（現在のスレッドのループでスケジュール）。ハンドラー関数の動作は、特定のルールセットに従います。ハンドラー関数の場合：</target>
        </trans-unit>
        <trans-unit id="2ac13fec58fdbd2f4f000683032bc0eb067b2238" translate="yes" xml:space="preserve">
          <source>Once a generator function is defined, it can be used by constructing an iterator as shown.</source>
          <target state="translated">ジェネレータ関数が定義されると、以下のようにイテレータを構築することで使用することができます。</target>
        </trans-unit>
        <trans-unit id="550aba73272657a8916d7a002e494b38a959b72a" translate="yes" xml:space="preserve">
          <source>Once paused on a &lt;code&gt;yield&lt;/code&gt; expression, the generator's code execution remains paused until the generator's &lt;code&gt;next()&lt;/code&gt; method is called. Each time the generator's &lt;code&gt;next()&lt;/code&gt; method is called, the generator resumes execution and runs until it reaches one of the following:</source>
          <target state="translated">上で一時停止した後 &lt;code&gt;yield&lt;/code&gt; 発現ジェネレータのまで、ジェネレータのコードが実行される遺骨は、一時停止 &lt;code&gt;next()&lt;/code&gt; メソッドが呼び出されます。ジェネレーターの &lt;code&gt;next()&lt;/code&gt; メソッドが呼び出されるたびに、ジェネレーターは実行を再開し、次のいずれかに到達するまで実行されます。</target>
        </trans-unit>
        <trans-unit id="aa166c9b686cd79b09884264920debb2d7092d8a" translate="yes" xml:space="preserve">
          <source>Once paused on a &lt;code&gt;yield&lt;/code&gt; expression, the generator's code execution remains paused until the generator's &lt;code&gt;next()&lt;/code&gt; method is called. Each time the generator's &lt;code&gt;next()&lt;/code&gt; method is called, the generator resumes execution, and runs until it reaches one of the following:</source>
          <target state="translated">ジェネレーターの &lt;code&gt;next()&lt;/code&gt; メソッドが呼び出されるまで、 &lt;code&gt;yield&lt;/code&gt; 式で一時停止すると、ジェネレーターのコード実行は一時停止したままになります。ジェネレーターの &lt;code&gt;next()&lt;/code&gt; メソッドが呼び出されるたびに、ジェネレーターは実行を再開し、次のいずれかに到達するまで実行されます。</target>
        </trans-unit>
        <trans-unit id="7d33786d1f0781e041bb90fc87c270eab496e610" translate="yes" xml:space="preserve">
          <source>Once you have created an object, you might want to read or change them. Object properties can be accessed by using the dot notation or the bracket notation. (See &lt;a href=&quot;property_accessors&quot;&gt;property accessors&lt;/a&gt; for detailed information.)</source>
          <target state="translated">オブジェクトを作成したら、それらを読んだり変更したりすることができます。オブジェクトのプロパティには、ドット表記またはブラケット表記を使用してアクセスできます。（詳細については、&lt;a href=&quot;property_accessors&quot;&gt;プロパティアクセサー&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="1f86b4d6f4312f8c40b57e62ba63c0f13fb0d1ff" translate="yes" xml:space="preserve">
          <source>Once you have created an object, you might want to read or change them. Object properties can be accessed by using the dot notation or the bracket notation. See &lt;a href=&quot;property_accessors&quot;&gt;property accessors&lt;/a&gt; for detailed information.</source>
          <target state="translated">オブジェクトを作成したら、それらを読んだり変更したりすることができます。オブジェクトのプロパティには、ドット表記またはブラケット表記を使用してアクセスできます。詳細については、&lt;a href=&quot;property_accessors&quot;&gt;プロパティアクセサー&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3c6742b1f29b4bbe7ffab5556333d5a31e2eea3d" translate="yes" xml:space="preserve">
          <source>One alternative output of the map method being called with &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/a&gt; as a parameter runs as follows:</source>
          <target state="translated">&lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/a&gt;をパラメーターとして使用して呼び出されるmapメソッドの代替出力の1つは、次のように実行されます。</target>
        </trans-unit>
        <trans-unit id="bd0c7a905b0c4a2d1b0e641e2e877fcded7ee9d6" translate="yes" xml:space="preserve">
          <source>One alternative output of the map method being called with parseInt as a parameter runs as follows:</source>
          <target state="translated">パラメータとして parseInt を使用して呼び出された map メソッドの代替出力の 1 つは、以下のように実行されます。</target>
        </trans-unit>
        <trans-unit id="adf158551835ca3e5b738171b537ad969a4cbd8d" translate="yes" xml:space="preserve">
          <source>One can assign the &lt;code&gt;constructor&lt;/code&gt; property for any value except &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; since those don't have a corresponding constructor function (like &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; etc.), but values which are primitives won't keep the change (with no exception thrown). This is due to the same mechanism, which allows one to set any property on primitive values (except &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;) with no effect. namely wherenever one uses such a primitive as an object an instance of the corresponding constructor is created and discarded right after the statement was executed.</source>
          <target state="translated">対応するコンストラクター関数（ &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;Boolean&lt;/code&gt; など）がないため、 &lt;code&gt;null&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; 以外の任意の値に &lt;code&gt;constructor&lt;/code&gt; プロパティを割り当てることができますが、プリミティブである値は変更を保持しません（例外はスローされません） ）。これは同じメカニズムによるもので、プリミティブ値（ &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; を除く）に任意のプロパティを設定しても効果はありません。つまり、そのようなプリミティブをオブジェクトとして使用する場合は常に、対応するコンストラクターのインスタンスが作成され、ステートメントが実行された直後に破棄されます。</target>
        </trans-unit>
        <trans-unit id="e03dedb798ac511cbb80bcea406687568f0eab5a" translate="yes" xml:space="preserve">
          <source>One can think of an object as an &lt;em&gt;associative array&lt;/em&gt; (a.k.a. &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;dictionary&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, &lt;em&gt;lookup table&lt;/em&gt;). The &lt;em&gt;keys&lt;/em&gt; in this array are the names of the object's properties.</source>
          <target state="translated">オブジェクトは&lt;em&gt;連想配列&lt;/em&gt;（別名、&lt;em&gt;マップ&lt;/em&gt;、&lt;em&gt;辞書&lt;/em&gt;、&lt;em&gt;ハッシュ&lt;/em&gt;、&lt;em&gt;ルックアップテーブル&lt;/em&gt;）と考えることができます。この配列の&lt;em&gt;キー&lt;/em&gt;は、オブジェクトのプロパティの名前です。</target>
        </trans-unit>
        <trans-unit id="3dbd786e01c29d58131b1e22872bec4bd7cd53c0" translate="yes" xml:space="preserve">
          <source>One can think of an object as an &lt;em&gt;associative array&lt;/em&gt; (a.k.a. &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;dictionary&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, &lt;em&gt;lookup table&lt;/em&gt;). The &lt;em&gt;keys&lt;/em&gt; in this array are the names of the object's properties. It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called, for example if it has a reference to a &lt;a href=&quot;../functions&quot;&gt;Function&lt;/a&gt; instance as its value.</source>
          <target state="translated">オブジェクトは&lt;em&gt;連想配列&lt;/em&gt;（&lt;em&gt;マップ&lt;/em&gt;、&lt;em&gt;辞書&lt;/em&gt;、&lt;em&gt;ハッシュ&lt;/em&gt;、&lt;em&gt;ルックアップテーブル&lt;/em&gt;）と考えることができます。この配列の&lt;em&gt;キー&lt;/em&gt;は、オブジェクトのプロパティの名前です。オブジェクトのプロパティといえば、プロパティとメソッドを区別するのが一般的です。ただし、プロパティとメソッドの違いは、慣例にすぎません。メソッドは、たとえば、そのインスタンスが&lt;a href=&quot;../functions&quot;&gt;Function&lt;/a&gt;インスタンスへの参照を値として持っている場合に呼び出せるプロパティです。</target>
        </trans-unit>
        <trans-unit id="0ed9ce8fd54a6264f3d0b48d15ebf9af37d4a049" translate="yes" xml:space="preserve">
          <source>One common usage is to handle a value that may be &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="translated">一般的な使用法の1つは、 &lt;code&gt;null&lt;/code&gt; の可能性がある値を処理することです。</target>
        </trans-unit>
        <trans-unit id="62d6c14ca58fa50f887336c01c6e3ad10d3a0498" translate="yes" xml:space="preserve">
          <source>One may also extend traditional function-based &quot;classes&quot;:</source>
          <target state="translated">また、従来の関数ベースの「クラス」を拡張することもできます。</target>
        </trans-unit>
        <trans-unit id="ba3c945b3416a5ad49f757e8952aad4347c1f9ea" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;NFC&quot;&lt;/code&gt;, &lt;code&gt;&quot;NFD&quot;&lt;/code&gt;, &lt;code&gt;&quot;NFKC&quot;&lt;/code&gt;, or &lt;code&gt;&quot;NFKD&quot;&lt;/code&gt;, specifying the Unicode Normalization Form. If omitted or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&quot;NFC&quot;&lt;/code&gt; is used.</source>
          <target state="translated">一つ &lt;code&gt;&quot;NFC&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;NFD&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;NFKC&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;NFKD&quot;&lt;/code&gt; 、Unicodeの正規化形式を指定します。省略または&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合、 &lt;code&gt;&quot;NFC&quot;&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="c6d946fd54d85f7477222819089d81618ca563bf" translate="yes" xml:space="preserve">
          <source>One of the benefits of creating a named function expression is that in case we encountered an error, the stack trace will contain the name of the function, making it easier to find the origin of the error.</source>
          <target state="translated">名前付き関数式を作成するメリットの一つは、万が一エラーに遭遇した場合、スタックトレースに関数名が含まれているので、エラーの発生源を見つけやすくなることです。</target>
        </trans-unit>
        <trans-unit id="7503c9c4e2c63743bbc98b4506b2a0be85d9ad78" translate="yes" xml:space="preserve">
          <source>One or more expressions, the last of which is returned as the value of the compound expression.</source>
          <target state="translated">1つ以上の式で、最後の式が複合式の値として返されます。</target>
        </trans-unit>
        <trans-unit id="004d0febea1fb3060de3b44a91551e0da8498872" translate="yes" xml:space="preserve">
          <source>One param. With simple expression return is not needed:</source>
          <target state="translated">1つのパラメタ。単純な式であればreturnは不要です。</target>
        </trans-unit>
        <trans-unit id="90d5573baee8e3179e6200035a1d76d01323ea12" translate="yes" xml:space="preserve">
          <source>One property is supported by all language sensitive constructors and functions: The &lt;code&gt;localeMatcher&lt;/code&gt; property, whose value must be a string &quot;&lt;code&gt;lookup&lt;/code&gt;&quot; or &quot;&lt;code&gt;best fit&lt;/code&gt;&quot; and which selects one of the locale matching algorithms described above.</source>
          <target state="translated">：一つのプロパティは、すべての言語に敏感なコンストラクタや機能によってサポートされている &lt;code&gt;localeMatcher&lt;/code&gt; のプロパティ、値が文字列「でなければならない &lt;code&gt;lookup&lt;/code&gt; 」または「 &lt;code&gt;best fit&lt;/code&gt; 」とどのロケールマッチングアルゴリズムの1上記を選択します。</target>
        </trans-unit>
        <trans-unit id="0b464cbca3d711eae35183961c376991af3e95f1" translate="yes" xml:space="preserve">
          <source>One property is supported by all language sensitive constructors and functions: The &lt;code&gt;localeMatcher&lt;/code&gt; property, whose value must be a string &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; or &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; and which selects one of the locale matching algorithms described above.</source>
          <target state="translated">：一つのプロパティは、すべての言語に敏感なコンストラクタや機能によってサポートされている &lt;code&gt;localeMatcher&lt;/code&gt; のプロパティ、値が文字列でなければなりません &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; または &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; とどのロケールマッチングアルゴリズムの1上記を選択します。</target>
        </trans-unit>
        <trans-unit id="f7552293c68b3765a29ff266407a66e2a10bb809" translate="yes" xml:space="preserve">
          <source>One reason arrow functions were introduced was to alleviate scope ( &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; ) complexities and make executing functions much more intuitive.</source>
          <target state="translated">矢印関数が導入された理由の1つは、スコープ（ &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; ）の複雑さを軽減し、関数の実行をはるかに直感的にするためでした。</target>
        </trans-unit>
        <trans-unit id="17d274ecef3f92c8ef2accd00a8ddbaaeb99c22c" translate="yes" xml:space="preserve">
          <source>One reason to use &lt;a href=&quot;../operators/typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt; is that it does not throw an error if the variable has not been declared.</source>
          <target state="translated">&lt;a href=&quot;../operators/typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;/a&gt;を使用する理由の1つは、変数が宣言されていなくてもエラーをスローしないことです。</target>
        </trans-unit>
        <trans-unit id="0040acfc492ad4431afadda8b534706f1991a354" translate="yes" xml:space="preserve">
          <source>One way is to actually provide an &lt;code&gt;initialValue&lt;/code&gt; as the neutral element of the operator, such as 0 for the addition, 1 for a multiplication, or an empty string for a concatenation.</source>
          <target state="translated">1つの方法は、加算の0、乗算の1、連結の空の文字列など、演算子のニュートラル要素として実際に &lt;code&gt;initialValue&lt;/code&gt; を提供することです。</target>
        </trans-unit>
        <trans-unit id="dae4da1ccd270f4ab3b0706248815f16a240220a" translate="yes" xml:space="preserve">
          <source>One way to define a class is using a &lt;strong&gt;class declaration&lt;/strong&gt;. To declare a class, you use the &lt;code&gt;class&lt;/code&gt; keyword with the name of the class (&quot;Rectangle&quot; here).</source>
          <target state="translated">クラスを定義する1つの方法は、&lt;strong&gt;クラス宣言&lt;/strong&gt;を使用する&lt;strong&gt;こと&lt;/strong&gt;です。クラスを宣言するには、クラスの名前を付けて &lt;code&gt;class&lt;/code&gt; キーワードを使用します（ここでは「長方形」）。</target>
        </trans-unit>
        <trans-unit id="f61c6e1ce07e9a55256d63dd5ecd0f2b60c7fe60" translate="yes" xml:space="preserve">
          <source>One-use: the array iterator object is one use or temporary object</source>
          <target state="translated">ワンユース:配列のイテレータオブジェクトは、ワンユースまたは一時的なオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="b88714da31d7ed1f6136f21ef409a7c1254e2b6a" translate="yes" xml:space="preserve">
          <source>Only Internet Explorer 9 and later, and Firefox 23 and later, appear to fully and correctly implement redefinition of the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of arrays. For now, don't rely on redefining the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of an array to either work, or to work in a particular manner. And even when you &lt;em&gt;can&lt;/em&gt; rely on it, &lt;a href=&quot;http://whereswalden.com/2013/08/05/new-in-firefox-23-the-length-property-of-an-array-can-be-made-non-writable-but-you-shouldnt-do-it/&quot;&gt;there's really no good reason to do so&lt;/a&gt;.</source>
          <target state="translated">配列の&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティの再定義を完全かつ正しく実装しているように見えるのは、Internet Explorer 9以降とFirefox 23以降のみです。とりあえず、配列の&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを再定義して動作したり、特定の方法で動作したりしないでください。そして、あなた&lt;em&gt;が&lt;/em&gt;それに頼ること&lt;em&gt;ができる&lt;/em&gt;ときでさえ、そう&lt;em&gt;する&lt;/em&gt;&lt;a href=&quot;http://whereswalden.com/2013/08/05/new-in-firefox-23-the-length-property-of-an-array-can-be-made-non-writable-but-you-shouldnt-do-it/&quot;&gt;正当な理由は本当にありません&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d00478c70727f916cf685115fe8f54791c16a7ac" translate="yes" xml:space="preserve">
          <source>Only a single prototype mutation is permitted in an object literal. Multiple prototype mutations are a syntax error.</source>
          <target state="translated">オブジェクトリテラルでは、1つのプロトタイプの突然変異のみが許可されます。複数のプロトタイプの突然変異は構文エラーです。</target>
        </trans-unit>
        <trans-unit id="daa4ff0e795013b6417daf135041f5e37f432a5e" translate="yes" xml:space="preserve">
          <source>Only a single prototype mutation is permitted in an object literal: multiple prototype mutations are a syntax error.</source>
          <target state="translated">オブジェクトリテラルでは、1つのプロトタイプの突然変異のみが許可されます:複数のプロトタイプの突然変異は構文エラーです。</target>
        </trans-unit>
        <trans-unit id="dbf66284df8e9f102bc1c0a99f4341d7a62b817d" translate="yes" xml:space="preserve">
          <source>Only for iterables</source>
          <target state="translated">イテラーブルのみ</target>
        </trans-unit>
        <trans-unit id="f5b5aaf5822ba205a7787ea0676a6de89e4ee051" translate="yes" xml:space="preserve">
          <source>Only mentioned as reserved word.</source>
          <target state="translated">予約語として言及されているだけ。</target>
        </trans-unit>
        <trans-unit id="e2934cecb3d6c0649ebb041d194444a024aa75a6" translate="yes" xml:space="preserve">
          <source>Only one of the following two groups of properties is included:</source>
          <target state="translated">以下の2つの物件群のうち、いずれか1つのみが含まれています。</target>
        </trans-unit>
        <trans-unit id="4c79871de6b6f31ab9002b599cbecc7040d27c3d" translate="yes" xml:space="preserve">
          <source>Only the following Unicode code points are treated as line terminators in ECMAScript, other line breaking characters are treated as white space (for example, Next Line, NEL, U+0085 is considered as white space).</source>
          <target state="translated">ECMAScriptでは、以下のUnicodeコードポイントのみが改行文字として扱われ、その他の改行文字は空白として扱われます(例えば、Next Line,NEL,U+0085は空白とみなされます)。</target>
        </trans-unit>
        <trans-unit id="9bb91d784c31e5a69dc70f5b3a00fb1b6f93502f" translate="yes" xml:space="preserve">
          <source>Only the last parameter can be a &quot;rest parameter&quot;.</source>
          <target state="translated">最後のパラメータだけが「残りのパラメータ」になります。</target>
        </trans-unit>
        <trans-unit id="02d38a5bfc02e73c666b38fdc0238e4670062fd9" translate="yes" xml:space="preserve">
          <source>Only when &lt;code&gt;f&lt;/code&gt; is called is &lt;code&gt;x&lt;/code&gt; either found or not, and if found, either in &lt;code&gt;o&lt;/code&gt; or (if no such property exists) in &lt;code&gt;f&lt;/code&gt;'s activation object, where &lt;code&gt;x&lt;/code&gt; names the first formal argument. If you forget to define &lt;code&gt;x&lt;/code&gt; in the object you pass as the second argument, or if there's some similar bug or confusion, you won't get an error -- just unexpected results.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; が呼び出されたときのみ、 &lt;code&gt;x&lt;/code&gt; が見つかったかどうか、および見つかった場合は &lt;code&gt;o&lt;/code&gt; または（そのようなプロパティが存在しない場合） &lt;code&gt;f&lt;/code&gt; のアクティベーションオブジェクトで &lt;code&gt;x&lt;/code&gt; が最初の仮引数を指定します。2番目の引数として渡すオブジェクトで &lt;code&gt;x&lt;/code&gt; を定義するのを忘れた場合、または同様のバグや混乱がある場合は、エラーは発生せず、予期しない結果になります。</target>
        </trans-unit>
        <trans-unit id="19c9c9ed8477a3a275bcf0fa3f27c69151b58b7d" translate="yes" xml:space="preserve">
          <source>Opera</source>
          <target state="translated">Opera</target>
        </trans-unit>
        <trans-unit id="71e00d3376fba679bd68ca4280fa7959a01200c7" translate="yes" xml:space="preserve">
          <source>Opera Android</source>
          <target state="translated">オペラ アンドロイド</target>
        </trans-unit>
        <trans-unit id="4497b69b3e58a8b8c4ab04b8430dd1bf6b9df545" translate="yes" xml:space="preserve">
          <source>Opera for Android</source>
          <target state="translated">Android用Opera</target>
        </trans-unit>
        <trans-unit id="2a11858bb8602e6bcb8900754f254a66e2609ccc" translate="yes" xml:space="preserve">
          <source>Opera-specific notes</source>
          <target state="translated">オペラ固有の注意事項</target>
        </trans-unit>
        <trans-unit id="2135ad1d119b354a539d671f5fa603e00ff1d444" translate="yes" xml:space="preserve">
          <source>Operand of an argument is &lt;code&gt;NaN&lt;/code&gt; (e.g. &lt;code&gt;7 ** NaN&lt;/code&gt;)</source>
          <target state="translated">引数のオペランドは &lt;code&gt;NaN&lt;/code&gt; です（例： &lt;code&gt;7 ** NaN&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d5e812022431eae1cbb45efa2a44337aa2acc1b0" translate="yes" xml:space="preserve">
          <source>Operations to shift all bits of the operand.</source>
          <target state="translated">オペランドの全ビットをシフトする操作。</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="5ab53f8310f5b3d7c33f42f382419ed45034e50e" translate="yes" xml:space="preserve">
          <source>Operator Precedence</source>
          <target state="translated">オペレーターの前例</target>
        </trans-unit>
        <trans-unit id="685048571a4f4db99cb190b311def264fc71eb0e" translate="yes" xml:space="preserve">
          <source>Operator precedence</source>
          <target state="translated">オペレータの優先順位</target>
        </trans-unit>
        <trans-unit id="8294e4068997b53d5de8f5b8685132a9198009c6" translate="yes" xml:space="preserve">
          <source>Operator precedence determines the way in which operators are parsed with respect to each other. Operators with higher precedence become the operands of operators with lower precedence.</source>
          <target state="translated">演算子の優先順位は、演算子が互いに関連して解析される方法を決定します。優先度の高い演算子は、優先度の低い演算子のオペランドになります。</target>
        </trans-unit>
        <trans-unit id="d68df45459b8bbc212c3255fae17cdd9e9cd91e6" translate="yes" xml:space="preserve">
          <source>Operator type</source>
          <target state="translated">オペレータの種類</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="aec817b78be32e9eb6a28b10c01a44463709ad54" translate="yes" xml:space="preserve">
          <source>Optional &lt;code&gt;for&lt;/code&gt; expressions</source>
          <target state="translated">オプション &lt;code&gt;for&lt;/code&gt; の式</target>
        </trans-unit>
        <trans-unit id="322f4230bd8561e436cf75ddcff2ba65278091bb" translate="yes" xml:space="preserve">
          <source>Optional &lt;code&gt;locales&lt;/code&gt; parameter</source>
          <target state="translated">オプションの &lt;code&gt;locales&lt;/code&gt; パラメータ</target>
        </trans-unit>
        <trans-unit id="ad4da8ecdac8ce3a9ddac5dc8d5f1d4f08942264" translate="yes" xml:space="preserve">
          <source>Optional &lt;code&gt;options&lt;/code&gt; parameter</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; パラメータ</target>
        </trans-unit>
        <trans-unit id="1dbd0406de4381bd345e9f66bc0ee5a7981c67df" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 16-bit int is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is read.</source>
          <target state="translated">16ビット整数が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで格納されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が読み取られます。</target>
        </trans-unit>
        <trans-unit id="dd2778311b39a11505037f13b3d77f24f8a4fe57" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 16-bit int is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is written.</source>
          <target state="translated">16ビット整数が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで格納されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="023444365056aba3ee5de5ab1c2737a4264ebcf1" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 16-bit int is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is read.</source>
          <target state="translated">オプション16ビット整数が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式で保存されるかビッグエンディアン形式で保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が読み出されます。</target>
        </trans-unit>
        <trans-unit id="1561a1ec72a10d4f2037cce5ab20ff2f9e1710c9" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 16-bit int is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is written.</source>
          <target state="translated">オプション16ビット整数が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式で保存されるかビッグエンディアン形式で保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が書かれています。</target>
        </trans-unit>
        <trans-unit id="33ce32a3acc8aa0f7e4c410f6748a44b1a4d1322" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit float is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is read.</source>
          <target state="translated">32ビットfloatが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで保存されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が読み取られます。</target>
        </trans-unit>
        <trans-unit id="ce088e1b9aa45236caffed3077f9fc2964cbd94e" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit float is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is written.</source>
          <target state="translated">32ビットfloatが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで保存されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2b8bca9ac247e7d0c03f3b3e0e930dd5d93bdd89" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit float is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is read.</source>
          <target state="translated">オプション32ビットフロートが&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が読み出されます。</target>
        </trans-unit>
        <trans-unit id="678b0a696032823e6f9aa5db5b6c3bce251daf72" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit float is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is written.</source>
          <target state="translated">オプション32ビットフロートが&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が書かれています。</target>
        </trans-unit>
        <trans-unit id="fea6fdc8b1a774861c2807d66d6081130e6aee95" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit int is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is read.</source>
          <target state="translated">32ビットの整数が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式またはビッグエンディアン形式のどちらで格納されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が読み取られます。</target>
        </trans-unit>
        <trans-unit id="61a13b27e60244cb6ac6d07fa8a9fa8196bd8e7b" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit int is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is written.</source>
          <target state="translated">32ビットの整数が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式またはビッグエンディアン形式のどちらで格納されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="a01c42bb6fd3820acf62cf3c2cd56f31fc5d2c0f" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit int is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is read.</source>
          <target state="translated">オプション32ビット整数が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式で保存されるかビッグエンディアン形式で保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が読み出されます。</target>
        </trans-unit>
        <trans-unit id="f5ee30c634a40eb6963b42bd96ea4d01c4ae852f" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 32-bit int is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is written.</source>
          <target state="translated">オプション32ビット整数が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式で保存されるかビッグエンディアン形式で保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が書かれています。</target>
        </trans-unit>
        <trans-unit id="ba1cc0b145bf652ff3b9c289bc9bf1937128ebac" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 64-bit float is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is read.</source>
          <target state="translated">64ビットfloatが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで格納されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が読み取られます。</target>
        </trans-unit>
        <trans-unit id="c5c0e4455c30fc5f637331254f29994c27b676d2" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 64-bit float is stored in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If false or undefined, a big-endian value is written.</source>
          <target state="translated">64ビットfloatが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式とビッグエンディアン形式のどちらで格納されているかを示します。falseまたは未定義の場合、ビッグエンディアン値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="65fd3398d9230850735d4f718a7840bf262917c4" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 64-bit float is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is read.</source>
          <target state="translated">オプション64ビット浮動小数点数が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式で保存されるかビッグエンディアン形式で保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が読み出されます。</target>
        </trans-unit>
        <trans-unit id="a67862baec5ad8a2ce266e09b6980c3da8231cc9" translate="yes" xml:space="preserve">
          <source>Optional Indicates whether the 64-bit float is stored in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;little- or big-endian&lt;/a&gt; format. If &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, a big-endian value is written.</source>
          <target state="translated">オプション64ビット浮動小数点数が&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;リトルエンディアン&lt;/a&gt;形式で保存されるかビッグエンディアン形式で保存されるかを示します。場合は &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 、ビッグエンディアン値が書かれています。</target>
        </trans-unit>
        <trans-unit id="9d270afcb3e308aae58e25f9a980e7961ac5e076" translate="yes" xml:space="preserve">
          <source>Optional catch binding</source>
          <target state="translated">オプションのキャッチバインディング</target>
        </trans-unit>
        <trans-unit id="9725a28ce99163c57a200c331c63c095fb43a3d0" translate="yes" xml:space="preserve">
          <source>Optional chaining</source>
          <target state="translated">オプションのチェーン</target>
        </trans-unit>
        <trans-unit id="ceeae57ea84e6115e67bf303cd3a288ed6528012" translate="yes" xml:space="preserve">
          <source>Optional for expressions</source>
          <target state="translated">式のオプション</target>
        </trans-unit>
        <trans-unit id="d36a9daee3dabd000afa4a76de0c8c143dd1c710" translate="yes" xml:space="preserve">
          <source>Optional object to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 実行するときに &lt;code&gt;this&lt;/code&gt; として使用するオプションのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="459ad54074494479350419eda5692e1f0d64b9f0" translate="yes" xml:space="preserve">
          <source>Optional, string. A description of the symbol which can be used for debugging but not to access the symbol itself.</source>
          <target state="translated">省略可能な文字列。デバッグには使用できますが、シンボル自体にはアクセスできません。</target>
        </trans-unit>
        <trans-unit id="15927a99544f12526f1a2f88d22759a81c345de9" translate="yes" xml:space="preserve">
          <source>Optional. A human-readable description of the error.</source>
          <target state="translated">オプション。エラーの人間が読める説明。</target>
        </trans-unit>
        <trans-unit id="5a8f7fef26a2df202125e25c73ef64e1164aefeb" translate="yes" xml:space="preserve">
          <source>Optional. A number between 0 and 999, representing the milliseconds.</source>
          <target state="translated">オプション。ミリ秒を表す 0 から 999 の間の数値。</target>
        </trans-unit>
        <trans-unit id="4df43d32d5e53b7ab6ac59d5b8ea7d56d304be1c" translate="yes" xml:space="preserve">
          <source>Optional. A number between 0 and 999, representing the milliseconds. If you specify the &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameter, you must also specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション。ミリ秒を表す0から999までの数値。 &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメーターを指定する場合は、 &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f7e907c71f7ff4e0d638b8ffecd64a691a3619b7" translate="yes" xml:space="preserve">
          <source>Optional. A number between 0 and 999, representing the milliseconds. If you specify the &lt;code&gt;msValue&lt;/code&gt; parameter, you must also specify the &lt;code&gt;minutesValue&lt;/code&gt; and &lt;code&gt;secondsValue&lt;/code&gt;.</source>
          <target state="translated">オプション。ミリ秒を表す0〜999の数値。 &lt;code&gt;msValue&lt;/code&gt; パラメータを指定する場合は、 &lt;code&gt;minutesValue&lt;/code&gt; および &lt;code&gt;secondsValue&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="884122e141d18eb5c16663b5cbee4354e105cca1" translate="yes" xml:space="preserve">
          <source>Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;../intl#Locale_identification_and_negotiation&quot;&gt;Intl page&lt;/a&gt;. The following Unicode extension key is allowed:</source>
          <target state="translated">オプション。BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式と解釈については、&lt;a href=&quot;../intl#Locale_identification_and_negotiation&quot;&gt;国際ページを&lt;/a&gt;参照してください。次のUnicode拡張キーを使用できます。</target>
        </trans-unit>
        <trans-unit id="a56610b39e63b2c43031839b11afc1d9e7ead719" translate="yes" xml:space="preserve">
          <source>Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;../intl#Locale_identification_and_negotiation&quot;&gt;Intl page&lt;/a&gt;. The following Unicode extension keys are allowed:</source>
          <target state="translated">オプション。BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式と解釈については、&lt;a href=&quot;../intl#Locale_identification_and_negotiation&quot;&gt;国際ページを&lt;/a&gt;参照してください。次のUnicode拡張キーを使用できます。</target>
        </trans-unit>
        <trans-unit id="a54cfda896e3a729ccfcda80487629955af807ba" translate="yes" xml:space="preserve">
          <source>Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;intl#Locale_identification_and_negotiation&quot;&gt;Intl page&lt;/a&gt;.</source>
          <target state="translated">オプション。BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式と解釈については、&lt;a href=&quot;intl#Locale_identification_and_negotiation&quot;&gt;国際ページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bed3283bfc52ab0a193edb33ca67e508e0e1927d" translate="yes" xml:space="preserve">
          <source>Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;intl#Locale_identification_and_negotiation&quot;&gt;Intl page&lt;/a&gt;. The following Unicode extension key is allowed:</source>
          <target state="translated">オプション。BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式と解釈については、&lt;a href=&quot;intl#Locale_identification_and_negotiation&quot;&gt;国際ページを&lt;/a&gt;参照してください。次のUnicode拡張キーを使用できます。</target>
        </trans-unit>
        <trans-unit id="30cd0a723f60f5d5a5fc5bbb0cb3eea20cee69c3" translate="yes" xml:space="preserve">
          <source>Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the &lt;code&gt;locales&lt;/code&gt; argument, see the &lt;a href=&quot;intl#Locale_identification_and_negotiation&quot;&gt;Intl page&lt;/a&gt;. The following Unicode extension keys are allowed:</source>
          <target state="translated">オプション。BCP 47言語タグを含む文字列、またはそのような文字列の配列。 &lt;code&gt;locales&lt;/code&gt; 引数の一般的な形式と解釈については、&lt;a href=&quot;intl#Locale_identification_and_negotiation&quot;&gt;国際ページを&lt;/a&gt;参照してください。次のUnicode拡張キーを使用できます。</target>
        </trans-unit>
        <trans-unit id="734f22fdf2fbc41f4960c118753cd751e06f0c18" translate="yes" xml:space="preserve">
          <source>Optional. An array-like object, specifying the arguments with which &lt;em&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; should be called, or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if no arguments should be provided to the function. Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; information.</source>
          <target state="translated">オプション。&lt;em&gt; &lt;code&gt;func&lt;/code&gt; &lt;/em&gt;を呼び出すときに使用する引数を指定する配列のようなオブジェクト。引数を関数に提供し&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;場合は&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;またはundefined。ECMAScript 5以降、これらの引数は、配列ではなく、配列のような一般的なオブジェクトにすることができます。&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザの互換性&lt;/a&gt;情報については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="95bcdeccf8fa92f09552978e8b5466d6c049673f" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 11 representing the months January through December.</source>
          <target state="translated">オプション。1 月から 12 月までの月を表す 0 から 11 までの整数。</target>
        </trans-unit>
        <trans-unit id="3e06ee7808c9d219b86be5730255f13da12e4600" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 23 representing the hours. If omitted, defaults to 0.</source>
          <target state="translated">オプション。時間を表す 0 から 23 までの整数。省略した場合のデフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="70cc13be2265b54e06de46d8c93e89959f03eceb" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 59 representing the minutes. If omitted, defaults to 0.</source>
          <target state="translated">オプション。分を表す 0 から 59 までの整数。省略した場合のデフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="392e20e3585d866790cf14f6d054cf40a872f584" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 59 representing the seconds. If omitted, defaults to 0.</source>
          <target state="translated">オプション。0 から 59 までの整数で、秒数を表します。省略した場合のデフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="6344e50d97de06bcdc91a8e68b47290f334920d7" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 59, representing the minutes.</source>
          <target state="translated">オプション。0 から 59 までの整数で、分を表します。</target>
        </trans-unit>
        <trans-unit id="e2cd4c94388cf2e26aa84fa14f7d4aa1f1b66b91" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 59, representing the seconds. If you specify the &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; parameter, you must also specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション。秒を表す0から59までの整数。あなたが指定した場合 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; パラメータを、あなたも指定しなければなりません &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="5ea25fbc6b722b45e94db9bc60c9374192db2842" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 59, representing the seconds. If you specify the &lt;code&gt;secondsValue&lt;/code&gt; parameter, you must also specify the &lt;code&gt;minutesValue&lt;/code&gt;.</source>
          <target state="translated">オプション。秒を表す0から59までの整数。あなたが指定した場合 &lt;code&gt;secondsValue&lt;/code&gt; パラメータを、あなたも指定しなければなりません &lt;code&gt;minutesValue&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c69b718b64c0a6b7b981cf612e638be1ea86ec81" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 0 and 999 representing the milliseconds. If omitted, defaults to 0.</source>
          <target state="translated">オプション。ミリ秒を表す 0 から 999 までの整数。省略した場合のデフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="e7eab31619c25eb916fff52039008d8a6bc1f374" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 1 and 31 representing the day of the month. If omitted, defaults to 1.</source>
          <target state="translated">オプション。月の曜日を表す 1 から 31 までの整数。省略した場合のデフォルトは 1 です。</target>
        </trans-unit>
        <trans-unit id="9e4dcf71cf49e55f9fc37d3731278b4344dc4740" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 1 and 31 representing the day of the month. If you specify the &lt;code&gt;&lt;var&gt;dateValue&lt;/var&gt;&lt;/code&gt; parameter, you must also specify the &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション。月の日を表す1から31までの整数。あなたが指定した場合 &lt;code&gt;&lt;var&gt;dateValue&lt;/var&gt;&lt;/code&gt; パラメータを、あなたも指定しなければなりません &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="bfd8a3e01bf1e010337ea4f04b3fd11e2cfe61eb" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 1 and 31 representing the day of the month. If you specify the &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; parameter, you must also specify the &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション。月の日を表す1から31までの整数。あなたが指定した場合 &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; のパラメータを、あなたも指定しなければなりません &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="119deebd8a3bfce2a9aab0b02803f139019ca5d4" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 1 and 31 representing the day of the month. If you specify the &lt;code&gt;dateValue&lt;/code&gt; parameter, you must also specify the &lt;code&gt;monthValue&lt;/code&gt;.</source>
          <target state="translated">オプション。月の日を表す1〜31の整数。あなたが指定した場合 &lt;code&gt;dateValue&lt;/code&gt; パラメータを、あなたも指定しなければなりません &lt;code&gt;monthValue&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="794534433bb78c2fedeeae558dd5ba9b1d6cf405" translate="yes" xml:space="preserve">
          <source>Optional. An integer between 1 and 31 representing the day of the month. If you specify the &lt;code&gt;dayValue&lt;/code&gt; parameter, you must also specify the &lt;code&gt;monthValue&lt;/code&gt;.</source>
          <target state="translated">オプション。月の日を表す1〜31の整数。あなたが指定した場合 &lt;code&gt;dayValue&lt;/code&gt; のパラメータを、あなたも指定しなければなりません &lt;code&gt;monthValue&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="de521932ec12aede20e134be40b52d4486413849" translate="yes" xml:space="preserve">
          <source>Optional. An integer from 1 to 31, representing the day of the month.</source>
          <target state="translated">オプション。1 から 31 までの整数で、月の曜日を表します。</target>
        </trans-unit>
        <trans-unit id="b6e0aead3210bb58b2f2f80b24696dd07e012419" translate="yes" xml:space="preserve">
          <source>Optional. An integer in the range 2 through 36 specifying the base to use for representing numeric values.</source>
          <target state="translated">オプション。数値の表現に使用するベースを指定する 2 から 36 の範囲の整数。</target>
        </trans-unit>
        <trans-unit id="d41f86f9f990b41a8690bac861a83a7c19afe2b1" translate="yes" xml:space="preserve">
          <source>Optional. An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.</source>
          <target state="translated">オプション。小数点以下の桁数を指定する整数。デフォルトでは、必要な数だけ桁数を指定します。</target>
        </trans-unit>
        <trans-unit id="c8659e39bcb54ccb07d1263a52c02d2b21756be4" translate="yes" xml:space="preserve">
          <source>Optional. An integer specifying the number of significant digits.</source>
          <target state="translated">オプション。有効桁数を指定する整数。</target>
        </trans-unit>
        <trans-unit id="353ed7852cbcbec30c3db2ef64319b0ef482260b" translate="yes" xml:space="preserve">
          <source>Optional. An object that may have the following property:</source>
          <target state="translated">オプション。以下のプロパティを持つ可能性のあるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="abf7840a4cc97a1bb333ec1221380d6d98962f6c" translate="yes" xml:space="preserve">
          <source>Optional. An object with some or all of the following properties:</source>
          <target state="translated">オプション。以下のプロパティの一部またはすべてを持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="ad93f452faeb48fc19601c83ad17d961bde586f5" translate="yes" xml:space="preserve">
          <source>Optional. Arguments for the function.</source>
          <target state="translated">オプションです。関数の引数。</target>
        </trans-unit>
        <trans-unit id="a83c9f300ddf325bb2ecec154e7090f219542bff" translate="yes" xml:space="preserve">
          <source>Optional. End index (not included). Defaults to this.length.</source>
          <target state="translated">オプションです。終了インデックス(含まれません)。デフォルトは this.length です。</target>
        </trans-unit>
        <trans-unit id="891f18a6a091e549009579bb240f61e70570afe2" translate="yes" xml:space="preserve">
          <source>Optional. Human-readable description of the error</source>
          <target state="translated">オプション。エラーの人間が読める説明</target>
        </trans-unit>
        <trans-unit id="a953db7a93ee9b28375d77ed3bebd63275e9599b" translate="yes" xml:space="preserve">
          <source>Optional. Ideally, a number between 0 and 999, representing the milliseconds. If a value greater than 999 is provided, the datetime will be incremented by the extra milliseconds. If you specify the &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameter, you must also specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;secondsValue&lt;/code&gt;.</source>
          <target state="translated">オプション。理想的には、ミリ秒を表す0〜999の数値です。999より大きい値が指定された場合、日時は追加のミリ秒単位で増分されます。 &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; パラメーターを指定する場合は、 &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; と &lt;code&gt;secondsValue&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="76d23dce4f14fa27a93b742575a652782883e47c" translate="yes" xml:space="preserve">
          <source>Optional. Ideally, a number between 0 and 999, representing the milliseconds. If a value greater than 999 is provided, the datetime will be incremented by the extra milliseconds. If you specify the &lt;code&gt;msValue&lt;/code&gt; parameter, you must also specify the &lt;code&gt;minutesValue&lt;/code&gt; and &lt;code&gt;secondsValue&lt;/code&gt;.</source>
          <target state="translated">オプション。理想的には、ミリ秒を表す0〜999の数値。999より大きい値が指定された場合、日時は追加のミリ秒単位で増分されます。 &lt;code&gt;msValue&lt;/code&gt; パラメータを指定する場合は、 &lt;code&gt;minutesValue&lt;/code&gt; および &lt;code&gt;secondsValue&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="926ac8a53a7118c4f7de796b28f1cfb09bf70e0d" translate="yes" xml:space="preserve">
          <source>Optional. Ideally, an integer between 0 and 59, representing the minutes. If a value greater than 59 is provided, the datetime will be incremented by the extra minutes.</source>
          <target state="translated">オプション。理想的には 0 から 59 の間の整数で、分を表します。59よりも大きな値を指定した場合、日付の時刻は余分な分だけインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="b5b96c416f1e71a32bba6f665c7bceb8c147c08a" translate="yes" xml:space="preserve">
          <source>Optional. Ideally, an integer between 0 and 59, representing the seconds. If a value greater than 59 is provided, the datetime will be incremented by the extra seconds. If you specify the &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; parameter, you must also specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション。理想的には、秒を表す0〜59の整数です。59より大きい値が指定された場合、日時は余分な秒単位で増分されます。あなたが指定した場合 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; パラメータを、あなたも指定しなければなりません &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cb24c0fad7b58d52c6f9e3734121802d8effd2c2" translate="yes" xml:space="preserve">
          <source>Optional. Ideally, an integer between 0 and 59, representing the seconds. If a value greater than 59 is provided, the datetime will be incremented by the extra seconds. If you specify the &lt;code&gt;secondsValue&lt;/code&gt; parameter, you must also specify the &lt;code&gt;minutesValue&lt;/code&gt;.</source>
          <target state="translated">オプション。理想的には、秒を表す0〜59の整数。59より大きい値が指定された場合、日時は追加の秒だけ増分されます。あなたが指定した場合 &lt;code&gt;secondsValue&lt;/code&gt; パラメータを、あなたも指定しなければなりません &lt;code&gt;minutesValue&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8633352230c6311d91477d390a70aa3e54b81cd4" translate="yes" xml:space="preserve">
          <source>Optional. Identifier associated with the label of the statement. If the statement is not a loop or &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, this is required.</source>
          <target state="translated">オプション。ステートメントのラベルに関連付けられている識別子。ステートメントがループまたは&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;ではない場合、これは必須です。</target>
        </trans-unit>
        <trans-unit id="1e45ec4778c6fe43f5ded55f64760fcc8908678d" translate="yes" xml:space="preserve">
          <source>Optional. If provided it is used as the length of &lt;code&gt;str&lt;/code&gt;. If omitted, the default value is the length of the string.</source>
          <target state="translated">オプション。指定した場合、それは &lt;code&gt;str&lt;/code&gt; の長さとして使用されます。省略した場合、デフォルト値は文字列の長さです。</target>
        </trans-unit>
        <trans-unit id="87576836830a40a3bc21cabd68b16268a1dda70a" translate="yes" xml:space="preserve">
          <source>Optional. If specified and not &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, an object whose enumerable own properties (that is, those properties defined upon itself and &lt;em&gt;not&lt;/em&gt; enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of &lt;a href=&quot;defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプション。&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;ではなく、指定されている場合、独自の列挙可能なプロパティ（つまり、自身で定義され、プロトタイプチェーンに沿って列挙&lt;em&gt;できない&lt;/em&gt;プロパティ）を持つオブジェクトは、対応するプロパティ名とともに、新しく作成されたオブジェクトに追加されるプロパティ記述子を指定します。これらのプロパティは、&lt;a href=&quot;defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties()&lt;/code&gt; の&lt;/a&gt; 2番目の引数に対応しています。</target>
        </trans-unit>
        <trans-unit id="038964dcd9cd69eb136c81a61805e894d0bc29d8" translate="yes" xml:space="preserve">
          <source>Optional. Integer specifying a limit on the number of splits to be found. The &lt;code&gt;[@@split]()&lt;/code&gt; method still splits on every match of &lt;code&gt;this&lt;/code&gt; RegExp pattern, until the number of split items match the &lt;code&gt;limit&lt;/code&gt; or the string falls short of &lt;code&gt;this&lt;/code&gt; pattern.</source>
          <target state="translated">オプション。検索する分割数の制限を指定する整数。 &lt;code&gt;[@@split]()&lt;/code&gt; メソッドは、依然としてのすべての一致に分割し &lt;code&gt;this&lt;/code&gt; 分割されたアイテムの数が一致するまで、正規表現パターン &lt;code&gt;limit&lt;/code&gt; 、または文字列が短いの低下 &lt;code&gt;this&lt;/code&gt; パターン。</target>
        </trans-unit>
        <trans-unit id="ad62e61ace2e91c4d90832bcc43d2c5681163981" translate="yes" xml:space="preserve">
          <source>Optional. Map function to call on every element of the typed array.</source>
          <target state="translated">オプション。型付き配列の各要素に対して呼び出すマップ関数.</target>
        </trans-unit>
        <trans-unit id="89c8b8954ab82da15b9c273518f962028942ee3e" translate="yes" xml:space="preserve">
          <source>Optional. Object to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">オプション。 &lt;code&gt;callback&lt;/code&gt; 実行時に &lt;code&gt;this&lt;/code&gt; として使用するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="661dc5ad590952276ea552e672da13d5c554734c" translate="yes" xml:space="preserve">
          <source>Optional. Object to use as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">オプション。 &lt;code&gt;callback&lt;/code&gt; 最初の呼び出しの最初の引数として使用するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6074a535b20b97ca3166f40dac53dc58ce7a9fe6" translate="yes" xml:space="preserve">
          <source>Optional. Source end index position where to end copying elements from.</source>
          <target state="translated">省略可能。コピー元の要素のコピーを終了するソース終了インデックスの位置。</target>
        </trans-unit>
        <trans-unit id="a0b19e3793a5da0e5e8a4575d4cfe9550d167a05" translate="yes" xml:space="preserve">
          <source>Optional. Specifies a string to separate each element. The separator is converted to a string if necessary. If omitted, the typed array elements are separated with a comma (&quot;,&quot;).</source>
          <target state="translated">オプション。各要素を区切る文字列を指定します。区切り文字は必要に応じて文字列に変換されます。省略した場合、型付けされた配列の要素はカンマ(&quot;,&quot;)で区切られます。</target>
        </trans-unit>
        <trans-unit id="0633ec8064ef0762e54a4544a122fdb7d490dc35" translate="yes" xml:space="preserve">
          <source>Optional. Start index. Defaults to 0.</source>
          <target state="translated">オプションです。開始インデックス。デフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="f4ba9bf2362af11ff12963eb2eb83193e7cd7f8a" translate="yes" xml:space="preserve">
          <source>Optional. The index at which to start searching backwards. Defaults to the typed array's length, i.e. the whole typed array will be searched. If the index is greater than or equal to the length of the typed array, the whole typed array will be searched. If negative, it is taken as the offset from the end of the typed array. Note that even when the index is negative, the typed array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the typed array will not be searched.</source>
          <target state="translated">オプションです。逆方向から検索を開始するインデックス。デフォルトは,型付き配列の長さ,つまり型付き配列全体が検索されます.インデックスが型付き配列の長さ以上の場合は,型付き配列全体が検索されます.負の値の場合は,型付き配列の末尾からのオフセットとして扱われます.インデックスが負の値であっても,型付き配列は後ろから前に向かって検索されることに注意してください.計算されたインデックスが0よりも小さい場合は,-1が返されます.</target>
        </trans-unit>
        <trans-unit id="9d1cd959121feaeb0d8d43dedf19dab7ae446d96" translate="yes" xml:space="preserve">
          <source>Optional. The index of the first character to exclude from the returned substring.</source>
          <target state="translated">省略可能です。返される部分文字列から除外する最初の文字のインデックス。</target>
        </trans-unit>
        <trans-unit id="cebf85129aa3ee4548e165952d2739e2b298dafc" translate="yes" xml:space="preserve">
          <source>Optional. The initial value of the &lt;code&gt;Boolean&lt;/code&gt; object.</source>
          <target state="translated">オプション。 &lt;code&gt;Boolean&lt;/code&gt; オブジェクトの初期値。</target>
        </trans-unit>
        <trans-unit id="ee894f08b98fb7fdef8e7541ab831d10c17fc2cd" translate="yes" xml:space="preserve">
          <source>Optional. The line number of the code that caused the exception</source>
          <target state="translated">オプション。例外の原因となったコードの行番号</target>
        </trans-unit>
        <trans-unit id="c347532465befbe673fa4f0fd7c851afd12ec327" translate="yes" xml:space="preserve">
          <source>Optional. The name of the file containing the code that caused the exception</source>
          <target state="translated">省略可能です。例外の原因となったコードを含むファイル名</target>
        </trans-unit>
        <trans-unit id="e5d51ea62238de211964057685b7b04d3c14d9bd" translate="yes" xml:space="preserve">
          <source>Optional. The number of characters to extract.</source>
          <target state="translated">省略可能。抽出する文字数。</target>
        </trans-unit>
        <trans-unit id="e3a4726f3452f9c6f29f0dfd04191a12bc03d3f1" translate="yes" xml:space="preserve">
          <source>Optional. The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.</source>
          <target state="translated">オプション。これは0から20の間の値である可能性があり、実装ではオプションでより大きな範囲の値をサポートしている可能性があります。この引数を省略した場合は0として扱われます。</target>
        </trans-unit>
        <trans-unit id="f6ebf0738faf94966ce80f730d3860a36ca21d61" translate="yes" xml:space="preserve">
          <source>Optional. The position in this array at which to begin searching for &lt;code&gt;searchElement&lt;/code&gt;; defaults to 0.</source>
          <target state="translated">オプション。この配列内で &lt;code&gt;searchElement&lt;/code&gt; の検索を開始する位置。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="a10a9f1ce1dc1d39ba88a7dd25f4f4845154214e" translate="yes" xml:space="preserve">
          <source>Optional. The value for the &lt;code&gt;fileName&lt;/code&gt; property on the created &lt;code&gt;Error&lt;/code&gt; object. Defaults to the name of the file containing the code that called the &lt;code&gt;Error()&lt;/code&gt; constructor.</source>
          <target state="translated">オプション。作成された &lt;code&gt;Error&lt;/code&gt; オブジェクトの &lt;code&gt;fileName&lt;/code&gt; プロパティの値。デフォルトは、 &lt;code&gt;Error()&lt;/code&gt; コンストラクターを呼び出したコードを含むファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="ead99ac56ff43e8df9daf96761b9c793dc15b6e8" translate="yes" xml:space="preserve">
          <source>Optional. The value for the &lt;code&gt;lineNumber&lt;/code&gt; property on the created &lt;code&gt;Error&lt;/code&gt; object. Defaults to the line number containing the &lt;code&gt;Error()&lt;/code&gt; constructor invocation.</source>
          <target state="translated">オプション。作成された &lt;code&gt;Error&lt;/code&gt; オブジェクトの &lt;code&gt;lineNumber&lt;/code&gt; プロパティの値。デフォルトは、 &lt;code&gt;Error()&lt;/code&gt; コンストラクター呼び出しを含む行番号です。</target>
        </trans-unit>
        <trans-unit id="ed2a8fd44000dc6062e1099888733f586d1c8623" translate="yes" xml:space="preserve">
          <source>Optional. The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;em&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;. Note that &lt;code&gt;this&lt;/code&gt; may not be the actual value seen by the method: if the method is a function in &lt;a href=&quot;../../strict_mode&quot;&gt;non-strict mode&lt;/a&gt; code, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be replaced with the global object, and primitive values will be boxed.</source>
          <target state="translated">オプション。&lt;em&gt; &lt;code&gt;func&lt;/code&gt; &lt;/em&gt;の呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。 &lt;code&gt;this&lt;/code&gt; は、メソッドによって表示される実際の値ではない可能性があることに注意してください。メソッドが&lt;a href=&quot;../../strict_mode&quot;&gt;非厳密モード&lt;/a&gt;コードの関数である場合、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;はグローバルオブジェクトに置き換えられ、プリミティブ値はボックス化されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fc32772615f562c59dfc39b88293c03171b4d1b" translate="yes" xml:space="preserve">
          <source>Optional. The value of &lt;code&gt;this&lt;/code&gt; provided for the call to a &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt;. Note that &lt;code&gt;this&lt;/code&gt; may not be the actual value seen by the method: if the method is a function in &lt;a href=&quot;../../strict_mode&quot;&gt;non-strict mode&lt;/a&gt;, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be replaced with the global object and primitive values will be converted to objects.</source>
          <target state="translated">オプション。 &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; 呼び出しに提供される &lt;code&gt;this&lt;/code&gt; 値。 &lt;code&gt;this&lt;/code&gt; は、メソッドによって表示される実際の値ではない可能性があることに注意してください。メソッドが&lt;a href=&quot;../../strict_mode&quot;&gt;非厳密モードの&lt;/a&gt;関数である場合、&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;はグローバルオブジェクトに置き換えられ、プリミティブ値はオブジェクトに変換されます。</target>
        </trans-unit>
        <trans-unit id="a42b36fe9e22d2aa06f08ec1a45b3250a3dda3f3" translate="yes" xml:space="preserve">
          <source>Optional. The zero-based index &lt;em&gt;before&lt;/em&gt; which to end extraction. The character at this index will not be included. If &lt;code&gt;endIndex&lt;/code&gt; is omitted, &lt;code&gt;slice()&lt;/code&gt; extracts to the end of the string. If negative, it is treated as &lt;code&gt;strLength + endIndex&lt;/code&gt; where &lt;code&gt;strLength&lt;/code&gt; is the length of the string (for example, if &lt;code&gt;endIndex&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; it is treated as &lt;code&gt;strLength - 3)&lt;/code&gt;.</source>
          <target state="translated">オプション。抽出を終了する&lt;em&gt;前&lt;/em&gt;のゼロベースのインデックス。このインデックスの文字は含まれません。場合 &lt;code&gt;endIndex&lt;/code&gt; のは、省略された &lt;code&gt;slice()&lt;/code&gt; 文字列の末尾に抽出物。負の場合は、 &lt;code&gt;strLength + endIndex&lt;/code&gt; として扱われます。ここで、 &lt;code&gt;strLength&lt;/code&gt; は文字列の長さです（たとえば、 &lt;code&gt;endIndex&lt;/code&gt; が &lt;code&gt;-3&lt;/code&gt; の場合は、 &lt;code&gt;strLength - 3)&lt;/code&gt; として扱われます）。</target>
        </trans-unit>
        <trans-unit id="e0710be00ed69d027490be2d4513d1df7c6f8583" translate="yes" xml:space="preserve">
          <source>Optional. Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">オプション。 &lt;code&gt;callback&lt;/code&gt; 実行時に &lt;code&gt;this&lt;/code&gt; として使用する値。</target>
        </trans-unit>
        <trans-unit id="7e5469e13e11ac128945b224614de4b2013eede4" translate="yes" xml:space="preserve">
          <source>Optional. Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;mapFn&lt;/code&gt;.</source>
          <target state="translated">オプション。 &lt;code&gt;mapFn&lt;/code&gt; の実行時に &lt;code&gt;this&lt;/code&gt; として使用する値。</target>
        </trans-unit>
        <trans-unit id="fa26ccf85bc6f968242ada4c599f68a407b51da6" translate="yes" xml:space="preserve">
          <source>Optionally, a timezone name consisting of:</source>
          <target state="translated">オプションで、以下からなるタイムゾーン名。</target>
        </trans-unit>
        <trans-unit id="69b0c6cb3e1ef64fdf535fe0b7056ba6a5655b96" translate="yes" xml:space="preserve">
          <source>Or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; when the first non-whitespace character cannot be converted to a number.</source>
          <target state="translated">または、最初の非空白文字を数値に変換できない場合は&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c91908f2e72d1b82f2aed3fc8ad45082d5fbf27" translate="yes" xml:space="preserve">
          <source>Or &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; when</source>
          <target state="translated">または&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; の&lt;/a&gt;場合</target>
        </trans-unit>
        <trans-unit id="22e6c0d23e858004b7a233cf7b576b77f6404489" translate="yes" xml:space="preserve">
          <source>Or &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; when the first non-whitespace character cannot be converted to a number.</source>
          <target state="translated">または、最初の非空白文字を数値に変換できない場合は&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a8c59b395d3e866fed015beee40819bb644292b7" translate="yes" xml:space="preserve">
          <source>Or did you mean to create a string instead? Add single or double quotes to create a string literal.</source>
          <target state="translated">それとも代わりに文字列を作成するということでしょうか?一重引用符または二重引用符を追加して、文字列リテラルを作成します。</target>
        </trans-unit>
        <trans-unit id="4ee5bdfd3f18821f7ae7bbbf90b13aa437bc8f12" translate="yes" xml:space="preserve">
          <source>Or iterables can be defined directly inside a class or object using a &lt;a href=&quot;../../operators/object_initializer#Computed_property_names&quot;&gt;computed property&lt;/a&gt;:</source>
          <target state="translated">または、&lt;a href=&quot;../../operators/object_initializer#Computed_property_names&quot;&gt;計算されたプロパティ&lt;/a&gt;を使用して、クラスまたはオブジェクト内で反復可能オブジェクトを直接定義できます。</target>
        </trans-unit>
        <trans-unit id="8569149e10dc9d7bef361199016922c2127e6fae" translate="yes" xml:space="preserve">
          <source>Or you can use the backslash character (&quot;\&quot;) at the end of each line to indicate that the string will continue on the next line. Make sure there is no space or any other character after the backslash (except for a line break), or as an indent; otherwise it will not work. That form looks like this:</source>
          <target state="translated">あるいは、文字列が次の行に続くことを示すために、各行の最後にバックスラッシュ(&quot;\&quot;)を使用することもできます。バックスラッシュの後にスペースやその他の文字がないことを確認してください(改行を除く)。このフォームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="561c903b00152f42d67e5dfa8c71b2b860d0d0fa" translate="yes" xml:space="preserve">
          <source>Or, alternatively, you can set a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap&quot;&gt;&lt;code&gt;SourceMap&lt;/code&gt;&lt;/a&gt; header to your JavaScript file to avoid having a comment at all:</source>
          <target state="translated">または、JavaScriptのファイルに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap&quot;&gt; &lt;code&gt;SourceMap&lt;/code&gt; &lt;/a&gt;ヘッダーを設定して、コメントをまったく付けないようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="4555b2d3182c93dd73e5157360212e6dc7dfe946" translate="yes" xml:space="preserve">
          <source>Or, alternatively, you can set a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap&quot;&gt;&lt;code&gt;SourceMap&lt;/code&gt;&lt;/a&gt; header to your JavaScript file to avoid having a comment at all:</source>
          <target state="translated">または、JavaScriptファイルに&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap&quot;&gt; &lt;code&gt;SourceMap&lt;/code&gt; &lt;/a&gt;ヘッダーを設定して、コメントがまったくないようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="6c1391cddfcd691f9f63995b9ebbe7aa877cf210" translate="yes" xml:space="preserve">
          <source>Or, alternatively, you can set a header to your JavaScript file:</source>
          <target state="translated">あるいは、JavaScriptファイルにヘッダーを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="cfc225b5c0d8aeb09ad8d8785f450ad2f67371e5" translate="yes" xml:space="preserve">
          <source>Or, using &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; (ES2015) and &lt;a href=&quot;../global_objects/object/entries&quot;&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/a&gt; (ES2017), you can get an array of the specified object values and iterate over the array like this:</source>
          <target state="translated">または、&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;（ES2015）および&lt;a href=&quot;../global_objects/object/entries&quot;&gt; &lt;code&gt;Object.entries&lt;/code&gt; &lt;/a&gt;（ES2017）を使用して、指定したオブジェクト値の配列を取得し、次のように配列を反復処理できます。</target>
        </trans-unit>
        <trans-unit id="e86fd006e313f64b39e4c682a50b0eb76e476232" translate="yes" xml:space="preserve">
          <source>Or, using &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; (ES2015) and &lt;a href=&quot;../global_objects/object/values&quot;&gt;&lt;code&gt;Object.values&lt;/code&gt;&lt;/a&gt; (ES2017), you can get an array of the specified object values and iterate over the array like this:</source>
          <target state="translated">または、&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;（ES2015）および&lt;a href=&quot;../global_objects/object/values&quot;&gt; &lt;code&gt;Object.values&lt;/code&gt; &lt;/a&gt;（ES2017）を使用して、指定されたオブジェクト値の配列を取得し、次のように配列を反復処理できます。</target>
        </trans-unit>
        <trans-unit id="aad1c3743ece8e84953400999df40f29690171c3" translate="yes" xml:space="preserve">
          <source>Or, using ES6 &lt;a href=&quot;../../template_literals&quot;&gt;template strings&lt;/a&gt;:</source>
          <target state="translated">または、ES6&lt;a href=&quot;../../template_literals&quot;&gt;テンプレート文字列&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="d980251994211e5ebae644678a623630f11240b8" translate="yes" xml:space="preserve">
          <source>Or, you can make use of the &lt;a href=&quot;../global_objects/datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object, which allows you to cache an object with most of the computations done so that formatting is fast. This is useful if you have a loop of dates to format.</source>
          <target state="translated">または、&lt;a href=&quot;../global_objects/datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトを使用することもできます。これにより、ほとんどの計算を実行してオブジェクトをキャッシュし、フォーマットを高速化できます。これは、フォーマットする日付のループがある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="de4e925d4c06dedf87f4d35490dc57ceadd9316c" translate="yes" xml:space="preserve">
          <source>Or, you can make use of the &lt;a href=&quot;../global_objects/intl/datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object, which allows you to cache an object with most of the computations done so that formatting is fast. This is useful if you have a loop of dates to format.</source>
          <target state="translated">または、&lt;a href=&quot;../global_objects/intl/datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトを使用できます。これにより、ほとんどの計算が実行されたオブジェクトをキャッシュできるため、フォーマットが高速になります。これは、フォーマットする日付のループがある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bc4db7e5207387c25e0c15c8f40cd9651ff9cfcb" translate="yes" xml:space="preserve">
          <source>Or, you function is maybe intended to be an &lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot;&gt;IIFE&lt;/a&gt; (Immediately Invoked Function Expression), which is a function that runs as soon as it is defined. You will need a few more braces in this case:</source>
          <target state="translated">または、関数が&lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot;&gt;IIFE&lt;/a&gt;（Immediately Invoked Function Expression）であることを意図している可能性があります。これは、定義されるとすぐに実行される関数です。この場合、さらにいくつかのブレースが必要になります。</target>
        </trans-unit>
        <trans-unit id="f5f6fdc01b44ccf9e40e55c69e5530d502010ffc" translate="yes" xml:space="preserve">
          <source>Ordinary object (ES2015)</source>
          <target state="translated">普通の物体(ES2015)</target>
        </trans-unit>
        <trans-unit id="d95225a5d97931830cc8fe562af038ce2cd9f500" translate="yes" xml:space="preserve">
          <source>Ordinary parameter and rest parameters</source>
          <target state="translated">通常のパラメータと残りのパラメータ</target>
        </trans-unit>
        <trans-unit id="cb492e1a10ad8495d78f8f606b68b93de0c2d3de" translate="yes" xml:space="preserve">
          <source>Origin of &lt;code&gt;NaN&lt;/code&gt; values</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 値の起源</target>
        </trans-unit>
        <trans-unit id="9b2eb23e93b21ac546291450b75b7a09d5e1fbe4" translate="yes" xml:space="preserve">
          <source>Origin of NaN values</source>
          <target state="translated">NaN値の由来</target>
        </trans-unit>
        <trans-unit id="398b7df1c5d76e072b03f1f5853ed5290220702a" translate="yes" xml:space="preserve">
          <source>Original proposal at ecmascript.org</source>
          <target state="translated">ecmascript.orgでの原案</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="6f7c009939da2aff2a698e1024561b48df273397" translate="yes" xml:space="preserve">
          <source>Other BCP 47 extension tags can be found in the &lt;a href=&quot;https://github.com/unicode-org/cldr/tree/master/common/bcp47&quot;&gt;Unicode CLDR Project&lt;/a&gt;.</source>
          <target state="translated">その他のBCP47拡張タグは、&lt;a href=&quot;https://github.com/unicode-org/cldr/tree/master/common/bcp47&quot;&gt;UnicodeCLDRプロジェクトにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a33b584f108e537a2ab567a24434561b745d6223" translate="yes" xml:space="preserve">
          <source>Other Iterable objects</source>
          <target state="translated">その他の反復可能なオブジェクト</target>
        </trans-unit>
        <trans-unit id="20632887f6af52c68ba1ba09c785953c74157a8e" translate="yes" xml:space="preserve">
          <source>Other Unicode space characters</source>
          <target state="translated">その他の Unicode スペース文字</target>
        </trans-unit>
        <trans-unit id="317aabdb40e78bc77b4f1b62a66eb4f0e0d062a1" translate="yes" xml:space="preserve">
          <source>Other differences include allowing only double-quoted strings and having no provisions for &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or comments. For those who wish to use a more human-friendly configuration format based on JSON, there is &lt;a href=&quot;https://json5.org/&quot;&gt;JSON5&lt;/a&gt;, used by the Babel compiler, and the more commonly used &lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt;.</source>
          <target state="translated">その他の違いには、二重引用符で囲まれた文字列のみを許可することと、&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;またはコメントの規定がないことが含まれます。JSONに基づくより人間に優しい構成形式を使用したい場合は、Babelコンパイラーで使用される&lt;a href=&quot;https://json5.org/&quot;&gt;JSON5&lt;/a&gt;と、より一般的に使用される&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAMLがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="616034e9f60a9fc4c74d097d8a234b2d8a39d993" translate="yes" xml:space="preserve">
          <source>Other engines such as v8 (Chrome), Chakra (IE/Edge), and JSC (WebKit/Safari) are investigating whether to remove the nonstandard behavior as well.</source>
          <target state="translated">他にもv8(Chrome)、Chakra(IE/Edge)、JSC(WebKit/Safari)などのエンジンでも、標準外の動作を削除するかどうかを検討しています。</target>
        </trans-unit>
        <trans-unit id="f7e13bed50c4da975b1ae3753cc2c408d114b3b9" translate="yes" xml:space="preserve">
          <source>Other errors regarding formal parameters:</source>
          <target state="translated">形式パラメータに関するその他の誤り。</target>
        </trans-unit>
        <trans-unit id="0ac3c9882a4b70189ad1bfa57e91f5a096b4d423" translate="yes" xml:space="preserve">
          <source>Other examples:</source>
          <target state="translated">その他の例。</target>
        </trans-unit>
        <trans-unit id="ea910b17053e23533d815464a56b475af947b4f3" translate="yes" xml:space="preserve">
          <source>Other methods</source>
          <target state="translated">その他の方法</target>
        </trans-unit>
        <trans-unit id="aae1e11b4924213c54fb0ec6583f020c4f972e61" translate="yes" xml:space="preserve">
          <source>Other methods (e.g., &lt;a href=&quot;array/push&quot;&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt;, etc.) also result in updates to an array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">他のメソッド（&lt;a href=&quot;array/push&quot;&gt; &lt;code&gt;push()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt;など）も、配列の&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを更新します。</target>
        </trans-unit>
        <trans-unit id="b3517ea889fc79250f4f16d49b6965b31eff2cf8" translate="yes" xml:space="preserve">
          <source>Other situations</source>
          <target state="translated">その他の状況</target>
        </trans-unit>
        <trans-unit id="4c92d3af7eb13785b6decd174d81a89c46cd4734" translate="yes" xml:space="preserve">
          <source>Other symbols</source>
          <target state="translated">その他の記号</target>
        </trans-unit>
        <trans-unit id="f8eff7fad83e9b98891ec2d767bf7b6d40f71fd1" translate="yes" xml:space="preserve">
          <source>Other web resources:</source>
          <target state="translated">その他のウェブリソース。</target>
        </trans-unit>
        <trans-unit id="8d7bf5bf136e81f9388c1f4eca050d6d94e965d7" translate="yes" xml:space="preserve">
          <source>Others</source>
          <target state="translated">Others</target>
        </trans-unit>
        <trans-unit id="443e113ca0920f666c098e4c8e7f848c277cdfc5" translate="yes" xml:space="preserve">
          <source>Others have a built-in &lt;code&gt;toStringTag&lt;/code&gt; symbol defined:</source>
          <target state="translated">その他には、組み込みの &lt;code&gt;toStringTag&lt;/code&gt; シンボルが定義されています。</target>
        </trans-unit>
        <trans-unit id="601687825e5236ffe7ada585636c3083b64a9210" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">それ以外の場合は、&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="b35597599f24c717eeb3af9e9bb75beb75e35b6f" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;lastIndex&lt;/code&gt; is set to the next position following the most recent match.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;lastIndex&lt;/code&gt; は、最新の一致に続く次の位置に設定されます。</target>
        </trans-unit>
        <trans-unit id="4161ba82920cb1606a6457c62739c937ea009662" translate="yes" xml:space="preserve">
          <source>Otherwise, it will return an object of a Type that corresponds to the given value.</source>
          <target state="translated">そうでなければ、与えられた値に対応するTypeのオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2a325456213d6a737e467e5cd9b893c75f1dc08b" translate="yes" xml:space="preserve">
          <source>Otherwise, you might want to clamp the length before setting the length property, or using it as argument of the constructor.</source>
          <target state="translated">そうでない場合は、length プロパティを設定する前に長さをクランプしておくか、コンストラクタの引数として使用するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="e5c85f2fa5903cc5eeb11de2a20f258881785536" translate="yes" xml:space="preserve">
          <source>Otherwise, you probably meant to use a comparison operator (e.g. &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;===&lt;/code&gt;):</source>
          <target state="translated">そうでない場合は、おそらく比較演算子を使用するつもり &lt;code&gt;===&lt;/code&gt; （例 &lt;code&gt;==&lt;/code&gt; または===）：</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="59f0d085026f741b88da2c8d9b558e0b4f1434b8" translate="yes" xml:space="preserve">
          <source>Output: !</source>
          <target state="translated">出力します。!</target>
        </trans-unit>
        <trans-unit id="6d17757e0c8a93cbc3e3aae70c1f62c08c3fb3fa" translate="yes" xml:space="preserve">
          <source>Output: ?</source>
          <target state="translated">出力します。?</target>
        </trans-unit>
        <trans-unit id="bbbbf8704d35ecaa7c5ff39e3292fa22b5463667" translate="yes" xml:space="preserve">
          <source>Output: Name?</source>
          <target state="translated">出力します。名前は?</target>
        </trans-unit>
        <trans-unit id="b1ec8d4e3a446f4ce4aba6ed7bf6f4a4462d5ce4" translate="yes" xml:space="preserve">
          <source>Output: So What Is Your Name?</source>
          <target state="translated">出力します。で、お名前は?</target>
        </trans-unit>
        <trans-unit id="fc9c07518809d176f3f7fbdaae1c8826d9b965c1" translate="yes" xml:space="preserve">
          <source>Output: What Is Your Name?</source>
          <target state="translated">出力します。お名前は?</target>
        </trans-unit>
        <trans-unit id="a1f9c1423a0d09d03c22da31af627179e76f5a01" translate="yes" xml:space="preserve">
          <source>Output: Your Name?</source>
          <target state="translated">出力します。お名前は?</target>
        </trans-unit>
        <trans-unit id="3ef900159fcc4d4fe27dda5776d1655c21ffd64a" translate="yes" xml:space="preserve">
          <source>Overrides the &lt;a href=&quot;object/tostring&quot;&gt;&lt;code&gt;Object.prototype.toString&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;object/tostring&quot;&gt; &lt;code&gt;Object.prototype.toString&lt;/code&gt; &lt;/a&gt;メソッドをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="e9e45df48568522617002870a7d2ab82c5d7baca" translate="yes" xml:space="preserve">
          <source>Overriding multiplication and division first, then addition and subtraction to evaluate addition first.</source>
          <target state="translated">掛け算と割り算を先にオーバーライドして、足し算と引き算を先に評価します。</target>
        </trans-unit>
        <trans-unit id="37db5e0251bd02a6aba5a0707a0d9b11ac1083f9" translate="yes" xml:space="preserve">
          <source>Overriding the default &lt;code&gt;toString&lt;/code&gt; method</source>
          <target state="translated">デフォルトの &lt;code&gt;toString&lt;/code&gt; メソッドのオーバーライド</target>
        </trans-unit>
        <trans-unit id="4408806708c57b5656b0868b520017091309455c" translate="yes" xml:space="preserve">
          <source>Overriding the default toString method</source>
          <target state="translated">デフォルトのtoStringメソッドをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="1f69ccdf47fd60a31f8e13e4018e8b48fd8a5ab5" translate="yes" xml:space="preserve">
          <source>Overriding valueOf for custom objects</source>
          <target state="translated">カスタムオブジェクトのvalueOfをオーバーライド</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="199d6fe6f5c59596942287546c66ce5317e07b6c" translate="yes" xml:space="preserve">
          <source>Pads the current string from the end with a given string and returns a new string of the length &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">現在の文字列を最後から指定された文字列で &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; 、長さtargetLengthの新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8565248303cd94d7e15e24c82fe48cfaa477b291" translate="yes" xml:space="preserve">
          <source>Pads the current string from the end with a given string to create a new string from a given length.</source>
          <target state="translated">現在の文字列の末尾から指定された文字列でパディングし、指定された長さの文字列から新しい文字列を作成します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
