<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="70a96367ea67f94fc6b60925b6c44c0cdf87e534" translate="yes" xml:space="preserve">
          <source>Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler, or to its original settled value if the promise was not handled (i.e. if the relevant handler &lt;code&gt;onFulfilled&lt;/code&gt; or &lt;code&gt;onRejected&lt;/code&gt; is not a function).</source>
          <target state="translated">フルフィルメントおよび拒否ハンドラをプロミスに追加し、呼び出されたハンドラの戻り値に解決する新しいプロミスを返すか、またはプロミスが処理されなかった場合（つまり、関連するハンドラ &lt;code&gt;onFulfilled&lt;/code&gt; または &lt;code&gt;onRejected&lt;/code&gt; が関数でない場合） 。</target>
        </trans-unit>
        <trans-unit id="9eeacb1c816d22849b1be1fe7f2e84686087551d" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.</source>
          <target state="translated">アキュムレータと配列の各値(左から右へ)に対して関数を適用して,それを1つの値に減らす。</target>
        </trans-unit>
        <trans-unit id="2154cdb14e22c7ce545ad07a11a7b90e5dc570c0" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アキュムレータと配列の各値（左から右へ）に対して関数を適用して、単一の値に減らします。&lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="099b64b5de77495c7e47f56cd30d2f07ec8b4595" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also &lt;a href=&quot;array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アキュムレータと配列の各値（左から右へ）に対して関数を適用して、単一の値に減らします。&lt;a href=&quot;array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="27387529f0930425db4f86da78ab484c122b8fc4" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.</source>
          <target state="translated">アキュムレータと配列の各値(右から左へ)に対して,それを1つの値に減らすように関数を適用します.</target>
        </trans-unit>
        <trans-unit id="298c3527001d4e1d738cbe7b386014991537faad" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also &lt;a href=&quot;../array/reduceright&quot;&gt;&lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アキュムレータと配列の各値（右から左へ）に対して関数を適用して、単一の値に減らします。&lt;a href=&quot;../array/reduceright&quot;&gt; &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="14db5180710bd1da842052aa2f9ebdacf810244c" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also &lt;a href=&quot;array/reduceright&quot;&gt;&lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アキュムレータと配列の各値（右から左へ）に対して関数を適用して、単一の値に減らします。&lt;a href=&quot;array/reduceright&quot;&gt; &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="8c393806e45fa4e9152ad8610af2469c3143412f" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator&amp;gt; and each value of the array (from right-to-left) as to reduce it to a single value.</source>
          <target state="translated">Apply a function against an accumulator&amp;gt; and each value of the array (from right-to-left) as to reduce it to a single value.</target>
        </trans-unit>
        <trans-unit id="adfb2ef8d1613f689214f2f3c938cdd74c395d2b" translate="yes" xml:space="preserve">
          <source>Apply for new</source>
          <target state="translated">新規申し込み</target>
        </trans-unit>
        <trans-unit id="9a2dcc4f62af67bd61a78054ffb7861d7fe5e35a" translate="yes" xml:space="preserve">
          <source>Apply for new operator</source>
          <target state="translated">新規オペレーターへの応募</target>
        </trans-unit>
        <trans-unit id="7570af5b2814be60d3225f429a5da3b60a955a03" translate="yes" xml:space="preserve">
          <source>Argument length</source>
          <target state="translated">引数の長さ</target>
        </trans-unit>
        <trans-unit id="219458337756538964c610a180311ef64788987f" translate="yes" xml:space="preserve">
          <source>Argument to be resolved by this &lt;code&gt;Promise&lt;/code&gt;. Can also be a &lt;code&gt;Promise&lt;/code&gt; or a thenable to resolve.</source>
          <target state="translated">この &lt;code&gt;Promise&lt;/code&gt; によって解決される議論。また、 &lt;code&gt;Promise&lt;/code&gt; または解決することができます。</target>
        </trans-unit>
        <trans-unit id="de8b14636021ee8ac55612174a0e052d70a4d91c" translate="yes" xml:space="preserve">
          <source>Arguments for the function.</source>
          <target state="translated">関数の引数。</target>
        </trans-unit>
        <trans-unit id="8372bf4b683d80ce379677415160200a3acb0226" translate="yes" xml:space="preserve">
          <source>Arguments object</source>
          <target state="translated">引数 オブジェクト</target>
        </trans-unit>
        <trans-unit id="75f3906ff5866811055573d5f65f94577a39b679" translate="yes" xml:space="preserve">
          <source>Arguments to prepend to arguments provided to the bound function when invoking &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">Arguments to prepend to arguments provided to the bound function when invoking &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9c170746708bafd69661d37a9e52f81b9c365da" translate="yes" xml:space="preserve">
          <source>Arguments to prepend to arguments provided to the bound function when invoking the target function.</source>
          <target state="translated">ターゲット関数を呼び出す際にバインド関数に提供される引数の前に付加する引数。</target>
        </trans-unit>
        <trans-unit id="6104f39ed22a2cd32e98536a3447a01c4b9f4781" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">算術演算子</target>
        </trans-unit>
        <trans-unit id="d077356b7b5076ff62409f2fbd19527762e29c71" translate="yes" xml:space="preserve">
          <source>Arithmetic operators</source>
          <target state="translated">算術演算子</target>
        </trans-unit>
        <trans-unit id="ad2101986bf079834f5e97462d8a86b84df9d757" translate="yes" xml:space="preserve">
          <source>Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value.</source>
          <target state="translated">算術演算子は、数値(リテラルまたは変数)をオペランドとして取り、単一の数値を返します。</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="407b3375ba305104bfa3347f5f11fda2fe33bf93" translate="yes" xml:space="preserve">
          <source>Array and Object destructuring can be combined. Say you want the third element in the array &lt;code&gt;props&lt;/code&gt; below, and then you want the &lt;code&gt;name&lt;/code&gt; property in the object, you can do the following:</source>
          <target state="translated">Array and Object destructuring can be combined. Say you want the third element in the array &lt;code&gt;props&lt;/code&gt; below, and then you want the &lt;code&gt;name&lt;/code&gt; property in the object, you can do the following:</target>
        </trans-unit>
        <trans-unit id="5e24458d846b2cac571b6dad13f86f103be1e9ea" translate="yes" xml:space="preserve">
          <source>Array comprehension was previously proposed to be standardized in ECMAScript 2016, it provide a useful shortcut for constructing a new array based on the contents of another. Comprehensions can often be used in place of calls to &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, or as a way of combining the two.</source>
          <target state="translated">配列内包表記は、以前ECMAScript 2016で標準化されることが提案されており、別の内容に基づいて新しい配列を作成するための便利なショートカットを提供します。多くの場合、内包表記は&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;の呼び出しの代わりに、または2つを組み合わせる方法として使用できます。</target>
        </trans-unit>
        <trans-unit id="56e943b579120bf89542182a985318248ca1cdc7" translate="yes" xml:space="preserve">
          <source>Array comprehensions</source>
          <target state="translated">配列理解</target>
        </trans-unit>
        <trans-unit id="ec92be30c7075d7cbaf977412d5f7c60c6ba5ab0" translate="yes" xml:space="preserve">
          <source>Array comprehensions compared to &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; および &lt;code&gt;filter&lt;/code&gt; と比較した配列内包表記</target>
        </trans-unit>
        <trans-unit id="f9bd19cb1530ba2b98635d89f6578c4e48630f1d" translate="yes" xml:space="preserve">
          <source>Array comprehensions with if statement</source>
          <target state="translated">if文による配列内包</target>
        </trans-unit>
        <trans-unit id="842b581677d7bbf424ba11a565664f3dd7ca2c6f" translate="yes" xml:space="preserve">
          <source>Array comprehensions with two arrays</source>
          <target state="translated">2つの配列を持つ配列内包</target>
        </trans-unit>
        <trans-unit id="c165216e453ed98c3aef7f84dc7c701408f4b8e8" translate="yes" xml:space="preserve">
          <source>Array comprehensions.</source>
          <target state="translated">配列理解。</target>
        </trans-unit>
        <trans-unit id="5b19a51e973f07fb33a1f0b3290dd21625155468" translate="yes" xml:space="preserve">
          <source>Array destructuring</source>
          <target state="translated">配列の破壊</target>
        </trans-unit>
        <trans-unit id="ca912dfb8ab25b6c79495135bc628a32c75efd38" translate="yes" xml:space="preserve">
          <source>Array elements are object properties in the same way that &lt;code&gt;toString&lt;/code&gt; is a property (to be specific, however, &lt;code&gt;toString()&lt;/code&gt; is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:</source>
          <target state="translated">Array elements are object properties in the same way that &lt;code&gt;toString&lt;/code&gt; is a property (to be specific, however, &lt;code&gt;toString()&lt;/code&gt; is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:</target>
        </trans-unit>
        <trans-unit id="33944814a24fadb9f412474be11953dc9ae05219" translate="yes" xml:space="preserve">
          <source>Array elements are object properties in the same way that &lt;code&gt;toString&lt;/code&gt; is a property, but trying to access an element of an array as follows throws a syntax error because the property name is not valid:</source>
          <target state="translated">配列要素は、 &lt;code&gt;toString&lt;/code&gt; がプロパティであるのと同じ方法でオブジェクトプロパティですが、次のように配列の要素にアクセスしようとすると、プロパティ名が無効であるため構文エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="a40bd58f6e852afaa3de5912db101f1c7a6e3647" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;Map&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; からの配列</target>
        </trans-unit>
        <trans-unit id="f8931b112e9cecb36b14b2c391707b7847aec858" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;NodeList&lt;/code&gt;</source>
          <target state="translated">Array from a &lt;code&gt;NodeList&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b311cad8218d80babeada604a6cfc0dceac040a" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;Set&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; からの配列</target>
        </trans-unit>
        <trans-unit id="c37271e2e7ebbd1be8f375e1ccbe1037bef4e172" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; からの配列</target>
        </trans-unit>
        <trans-unit id="b8e55e94bdd15b33dc5e89e076dda9c9a54dbdcf" translate="yes" xml:space="preserve">
          <source>Array from an Array-like object (arguments)</source>
          <target state="translated">配列のようなオブジェクトからの配列(引数</target>
        </trans-unit>
        <trans-unit id="3dcb2d95c8fe2c2782c9cecd792d3969e8a95c47" translate="yes" xml:space="preserve">
          <source>Array indexes are just enumerable properties with integer names and are otherwise identical to general object properties. There is no guarantee that &lt;code&gt;for...in&lt;/code&gt; will return the indexes in any particular order. The &lt;code&gt;for...in&lt;/code&gt; loop statement will return all enumerable properties, including those with non&amp;ndash;integer names and those that are inherited.</source>
          <target state="translated">配列インデックスは整数名を持つ列挙可能なプロパティであり、それ以外は一般的なオブジェクトプロパティと同じです。 &lt;code&gt;for...in&lt;/code&gt; が特定の順序でインデックスを返すという保証はありません。 &lt;code&gt;for...in&lt;/code&gt; ループ文非整数の名前を持つものと継承されたものも含め、すべての列挙のプロパティを返します。</target>
        </trans-unit>
        <trans-unit id="8dce53e0a0975947c956658914379abbbb9bb300" translate="yes" xml:space="preserve">
          <source>Array initializer/literal syntax.</source>
          <target state="translated">配列のイニシャライザ/リテラル構文。</target>
        </trans-unit>
        <trans-unit id="0ff3d11bd339374764a52e87cc9cd404db976cee" translate="yes" xml:space="preserve">
          <source>Array iteration</source>
          <target state="translated">配列の繰り返し</target>
        </trans-unit>
        <trans-unit id="70b6af200f3cd9da5e8eedc08862c1d1e9e582ad" translate="yes" xml:space="preserve">
          <source>Array iteration and for...in</source>
          <target state="translated">配列の反復と...in</target>
        </trans-unit>
        <trans-unit id="051f0d6bd098df06454138ddf1bfe22d07625d2a" translate="yes" xml:space="preserve">
          <source>Array literals</source>
          <target state="translated">配列リテラル</target>
        </trans-unit>
        <trans-unit id="d400b46a131622426486cc164c53df3470099bd7" translate="yes" xml:space="preserve">
          <source>Array literals (&lt;code&gt;[1, 2, 3]&lt;/code&gt;)</source>
          <target state="translated">配列リテラル（ &lt;code&gt;[1, 2, 3]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="41e00548a25f87e7867d99260498c2ed70f7a7b2" translate="yes" xml:space="preserve">
          <source>Array methods: &lt;a href=&quot;every&quot;&gt;&lt;code&gt;every()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;some&quot;&gt;&lt;code&gt;some()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;find&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;findindex&quot;&gt;&lt;code&gt;findIndex()&lt;/code&gt;&lt;/a&gt; test the array elements with a predicate returning a truthy value to determine if further iteration is required.</source>
          <target state="translated">Array methods: &lt;a href=&quot;every&quot;&gt; &lt;code&gt;every()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;some&quot;&gt; &lt;code&gt;some()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;find&quot;&gt; &lt;code&gt;find()&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;findindex&quot;&gt; &lt;code&gt;findIndex()&lt;/code&gt; &lt;/a&gt; test the array elements with a predicate returning a truthy value to determine if further iteration is required.</target>
        </trans-unit>
        <trans-unit id="3a6c98dce72395c00ba5120f10385bf1cdf1c586" translate="yes" xml:space="preserve">
          <source>Array sort argument</source>
          <target state="translated">配列のソート引数</target>
        </trans-unit>
        <trans-unit id="048806b25e664d5f25b564c6d8dadfa08d426f7c" translate="yes" xml:space="preserve">
          <source>Array subclassing</source>
          <target state="translated">配列のサブクラス化</target>
        </trans-unit>
        <trans-unit id="b3ba691d70f6a4d851bed750b01467ee0aa6bfc3" translate="yes" xml:space="preserve">
          <source>Array toLocaleString() override</source>
          <target state="translated">配列 toLocaleString()オーバーライド</target>
        </trans-unit>
        <trans-unit id="eb626b6aa22fe542a1defb09c31049c352ca0566" translate="yes" xml:space="preserve">
          <source>Array-like objects</source>
          <target state="translated">配列のようなオブジェクト</target>
        </trans-unit>
        <trans-unit id="f11c41c31481af345045cf968702b9aaeedbdbe4" translate="yes" xml:space="preserve">
          <source>Array.@@species</source>
          <target state="translated">Array.@@species</target>
        </trans-unit>
        <trans-unit id="679ef0f69b71ffcfffd14154349f3a662a2bf231" translate="yes" xml:space="preserve">
          <source>Array.from</source>
          <target state="translated">Array.from</target>
        </trans-unit>
        <trans-unit id="e441a7e4503c40df54307ae7673c8302a82898f2" translate="yes" xml:space="preserve">
          <source>Array.isArray</source>
          <target state="translated">Array.isArray</target>
        </trans-unit>
        <trans-unit id="fb5ce6e940582647f2fa3ae56246c93e000d7601" translate="yes" xml:space="preserve">
          <source>Array.length</source>
          <target state="translated">Array.length</target>
        </trans-unit>
        <trans-unit id="7c95f9796809d5949a3a953877aa14c969a75aa9" translate="yes" xml:space="preserve">
          <source>Array.of</source>
          <target state="translated">Array.of</target>
        </trans-unit>
        <trans-unit id="9db637ab084a17ac81478a045a51d8242d7e6da5" translate="yes" xml:space="preserve">
          <source>Array.prototype</source>
          <target state="translated">Array.prototype</target>
        </trans-unit>
        <trans-unit id="95971ea269213b08d09c9553e6421bde178a5ca7" translate="yes" xml:space="preserve">
          <source>ArrayBuffer</source>
          <target state="translated">ArrayBuffer</target>
        </trans-unit>
        <trans-unit id="0759b3dac7ff4e7674f2a2c8f44a224ff636d7ea" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.@@species</source>
          <target state="translated">ArrayBuffer.@@species</target>
        </trans-unit>
        <trans-unit id="ae7d638de1e11b639e68239572ac648b21255da8" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.isView</source>
          <target state="translated">ArrayBuffer.isView</target>
        </trans-unit>
        <trans-unit id="f9865f3e07c8d91cb9ff94628a52a2470b489e09" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.prototype</source>
          <target state="translated">ArrayBuffer.prototype</target>
        </trans-unit>
        <trans-unit id="95303c90ba12f2bf9d4a1daadf6aa1ea9000c060" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.prototype.constructor</source>
          <target state="translated">ArrayBuffer.prototype.constructor</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="5b5440253bf0400a58ae4dba7c2ffaea43b107b9" translate="yes" xml:space="preserve">
          <source>Arrays and/or values to concatenate into a new array. If &lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt; returns a shallow copy of the existing array on which it is called. See the description below for more details.</source>
          <target state="translated">新しい配列に連結する配列または値、あるいはその両方。 &lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; の場合、 &lt;code&gt;concat&lt;/code&gt; は、それが呼び出された既存の配列の浅いコピーを返します。詳細については、以下の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="6950bc50cd1ba244d3d3571a66ff67ee31553234" translate="yes" xml:space="preserve">
          <source>Arrays and/or values to concatenate into a new array. If all &lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt; parameters are omitted, &lt;code&gt;concat&lt;/code&gt; returns a shallow copy of the existing array on which it is called. See the description below for more details.</source>
          <target state="translated">Arrays and/or values to concatenate into a new array. If all &lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt; parameters are omitted, &lt;code&gt;concat&lt;/code&gt; returns a shallow copy of the existing array on which it is called. See the description below for more details.</target>
        </trans-unit>
        <trans-unit id="d451c76312f844d3627616e3e376a66e8aeea81d" translate="yes" xml:space="preserve">
          <source>Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations. Neither the length of a JavaScript array nor the types of its elements are fixed. Since an array's length can change at any time, and data can be stored at non-contiguous locations in the array, JavaScript arrays are not guaranteed to be dense; this depends on how the programmer chooses to use them. In general, these are convenient characteristics; but if these features are not desirable for your particular use, you might consider using typed arrays.</source>
          <target state="translated">配列はリストのようなオブジェクトであり、そのプロトタイプには探索や突然変異操作を行うメソッドがあります。JavaScript の配列の長さも要素の型も固定ではありません。配列の長さはいつでも変更することができ、データは配列内の連続しない場所に格納することができるので、JavaScriptの配列は密であることが保証されていません。一般的には、これらは便利な特性ですが、特定の用途にこれらの機能が望ましくない場合は、型付き配列の使用を検討してみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="6012be3ed9adcc6640c51a8dcfc660bb766ea888" translate="yes" xml:space="preserve">
          <source>Arrays cannot use strings as element indexes (as in an &lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;associative array&lt;/a&gt;) but must use integers. Setting or accessing via non-integers using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Objects_and_properties&quot;&gt;bracket notation&lt;/a&gt; (or &lt;a href=&quot;../operators/property_accessors&quot;&gt;dot notation&lt;/a&gt;) will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;object property collection&lt;/a&gt;. The array's object properties and list of array elements are separate, and the array's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_methods&quot;&gt;traversal and mutation operations&lt;/a&gt; cannot be applied to these named properties.</source>
          <target state="translated">配列は（&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;連想配列のように&lt;/a&gt;）文字列を要素のインデックスとして使用できませんが、整数を使用する必要があります。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Objects_and_properties&quot;&gt;ブラケット表記&lt;/a&gt;（または&lt;a href=&quot;../operators/property_accessors&quot;&gt;ドット表記&lt;/a&gt;）を使用して非整数を介して設定またはアクセスすると、配列リスト自体から要素が設定または取得されませんが、その配列の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;オブジェクトプロパティコレクションに&lt;/a&gt;関連付けられた変数が設定またはアクセスされます。配列のオブジェクトプロパティと配列要素のリストは別々であり、配列の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_methods&quot;&gt;トラバース操作とミューテーション操作&lt;/a&gt;はこれらの名前付きプロパティに適用できません。</target>
        </trans-unit>
        <trans-unit id="1e8a3c32c7e9b4c8f886e1bbebcdc7df95965d0d" translate="yes" xml:space="preserve">
          <source>Arrow function</source>
          <target state="translated">矢印機能</target>
        </trans-unit>
        <trans-unit id="fc6d0b4a3431a2895e9d69a29dd7c9026e676f98" translate="yes" xml:space="preserve">
          <source>Arrow functions</source>
          <target state="translated">矢印関数</target>
        </trans-unit>
        <trans-unit id="d503a4473544d47a97ef7776556a3f29e4c47c0a" translate="yes" xml:space="preserve">
          <source>Arrow functions can have either a &quot;concise body&quot; or the usual &quot;block body&quot;.</source>
          <target state="translated">矢印関数は、「簡潔なボディ」と通常の「ブロックボディ」のどちらかを持つことができます。</target>
        </trans-unit>
        <trans-unit id="71b9a8dee12aacd502cecf7ed7a0ba5a0b89bc89" translate="yes" xml:space="preserve">
          <source>Arrow functions cannot be used as constructors and will throw an error when used with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">アロー関数はコンストラクターとして使用できず、 &lt;code&gt;new&lt;/code&gt; で使用するとエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="8a7e7eee4b710ae724e5cf53d2cb03fcc499ec71" translate="yes" xml:space="preserve">
          <source>Arrow functions do not have a &lt;code&gt;prototype&lt;/code&gt; property.</source>
          <target state="translated">矢印関数には &lt;code&gt;prototype&lt;/code&gt; プロパティはありません。</target>
        </trans-unit>
        <trans-unit id="88efb2e48554f7f22c48e051b67d6b53b28be6a6" translate="yes" xml:space="preserve">
          <source>Arrow functions do not have their own &lt;a href=&quot;arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt; object&lt;/a&gt;. Thus, in this example, &lt;code&gt;arguments&lt;/code&gt; is simply a reference to the arguments of the enclosing scope:</source>
          <target state="translated">矢印関数には、独自の&lt;a href=&quot;arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; オブジェクト&lt;/a&gt;はありません。したがって、この例では、 &lt;code&gt;arguments&lt;/code&gt; 単に囲む範囲の引数への参照です。</target>
        </trans-unit>
        <trans-unit id="c57dbaecef381f062a942d4d6e763bd851543042" translate="yes" xml:space="preserve">
          <source>Arrow functions do not have their own &lt;code&gt;this&lt;/code&gt;. Another example involving &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">アロー関数には独自の &lt;code&gt;this&lt;/code&gt; がありません。&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;を含む別の例：</target>
        </trans-unit>
        <trans-unit id="df85bc5997113f0441758b4fdcf56fbbd456a41a" translate="yes" xml:space="preserve">
          <source>Arrow functions introduce a short-hand braceless syntax that returns an expression. This can cause unintended side effects by returning the result of a function call that previously returned nothing. To be safe, when the return value of a function is not intended to be used, it can be passed to the void operator to ensure that (for example) changing APIs do not cause arrow functions' behaviors to change.</source>
          <target state="translated">矢印関数は、式を返す短手のブレイクスルー構文を導入しています。これは、以前は何も返さなかった関数呼び出しの結果を返すことで、意図しない副作用を引き起こす可能性があります。安全のために、関数の戻り値が使用されることを意図していない場合、それをvoid演算子に渡すことで、(例えば)APIを変更しても矢印関数の動作が変更されないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="9375a1b9855e61c8027f0cf7732afbaa29837a39" translate="yes" xml:space="preserve">
          <source>Arrow functions used as methods</source>
          <target state="translated">メソッドとして使用される矢印関数</target>
        </trans-unit>
        <trans-unit id="d45babcae94938a3c75f01f70e934447e795901a" translate="yes" xml:space="preserve">
          <source>As a DOM event handler</source>
          <target state="translated">DOM イベントハンドラとして</target>
        </trans-unit>
        <trans-unit id="8b61459c1af9aa2cd532db4d8e210ca778fe21f1" translate="yes" xml:space="preserve">
          <source>As a baseline requirement, your document needs to be in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts&quot;&gt;secure context&lt;/a&gt;.</source>
          <target state="translated">As a baseline requirement, your document needs to be in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts&quot;&gt;secure context&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="429a16b965fd947d5a1e23ea21fc9c7acb81cf44" translate="yes" xml:space="preserve">
          <source>As a constructor</source>
          <target state="translated">コンストラクタとして</target>
        </trans-unit>
        <trans-unit id="d1153130f3a3654ab903ab7e17dab6458c4a7799" translate="yes" xml:space="preserve">
          <source>As a couple of additions to ECMAScript 2015, &lt;strong&gt;Iteration protocols&lt;/strong&gt; aren't new built-ins or syntax, but &lt;em&gt;protocols&lt;/em&gt;. These protocols can be implemented by any object by simply following some conventions.</source>
          <target state="translated">As a couple of additions to ECMAScript 2015, &lt;strong&gt;Iteration protocols&lt;/strong&gt; aren't new built-ins or syntax, but &lt;em&gt;protocols&lt;/em&gt;. These protocols can be implemented by any object by simply following some conventions.</target>
        </trans-unit>
        <trans-unit id="2f7cda1e552cc8fbbcb34407a14ed1f6d2513b06" translate="yes" xml:space="preserve">
          <source>As a quick and dirty hack the expression</source>
          <target state="translated">迅速かつ汚いハックの表現として</target>
        </trans-unit>
        <trans-unit id="85317fe7f561e137bf6a3057ad71f87e70b5f0e5" translate="yes" xml:space="preserve">
          <source>As all objects have no own symbol properties initially, &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; returns an empty array unless you have set symbol properties on your object.</source>
          <target state="translated">最初はすべてのオブジェクトに独自のシンボルプロパティがないため、オブジェクトにシンボルプロパティを設定していない限り、 &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; は空の配列を返します。</target>
        </trans-unit>
        <trans-unit id="aef2ce6a60ba776240379210716384a2e73586e4" translate="yes" xml:space="preserve">
          <source>As all other objects, &lt;a href=&quot;global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects can be created using the &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="translated">他のすべてのオブジェクトと同様に、&lt;a href=&quot;global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;オブジェクトは &lt;code&gt;new&lt;/code&gt; 演算子を使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="a16ab5a2287e3f880e1444c946f5f1cf3c609f54" translate="yes" xml:space="preserve">
          <source>As all other objects, &lt;a href=&quot;global_objects/generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt; objects can be created using the &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="translated">他のすべてのオブジェクトと同様に、&lt;a href=&quot;global_objects/generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt;オブジェクトは &lt;code&gt;new&lt;/code&gt; 演算子を使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="743aa5d6255f8f38463d29b47164e632032c5cd3" translate="yes" xml:space="preserve">
          <source>As an example, &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.slice(2, -1)&lt;/code&gt; extracts the third character through the second to last character in the string.</source>
          <target state="translated">As an example, &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.slice(2, -1)&lt;/code&gt; extracts the third character through the second to last character in the string.</target>
        </trans-unit>
        <trans-unit id="316d4ebbc7f55319e26f659bc6183c143a6e7095" translate="yes" xml:space="preserve">
          <source>As an example, &lt;code&gt;str.slice(2, -1)&lt;/code&gt; extracts the third character through the second to last character in the string.</source>
          <target state="translated">例として、 &lt;code&gt;str.slice(2, -1)&lt;/code&gt; は、文字列の3番目の文字から2番目から最後の文字までを抽出します。</target>
        </trans-unit>
        <trans-unit id="69d1b408492ed5838e44e10bb431c5daad89f9e2" translate="yes" xml:space="preserve">
          <source>As an example, here are &lt;code&gt;Math.max&lt;/code&gt;/&lt;code&gt;Math.min&lt;/code&gt;, used to find out the maximum/minimum value in an array.</source>
          <target state="translated">As an example, here are &lt;code&gt;Math.max&lt;/code&gt; / &lt;code&gt;Math.min&lt;/code&gt; , used to find out the maximum/minimum value in an array.</target>
        </trans-unit>
        <trans-unit id="c3604afbf4a4aac3adb46d11b657fd186dbeaec0" translate="yes" xml:space="preserve">
          <source>As an object method</source>
          <target state="translated">オブジェクトメソッドとして</target>
        </trans-unit>
        <trans-unit id="6aafeba3a118374a3c2e543ef5c4b61e80001046" translate="yes" xml:space="preserve">
          <source>As another example, the unique exponentiation operator has right-associativity, whereas other arithmetic operators have left-associativity. It is interesting to note that, the order of evaluation is always left-to-right irregardless of associativity and precedence.</source>
          <target state="translated">別の例として、ユニークな指数演算子は右連想性を持ちますが、他の算術演算子は左連想性を持ちます。興味深いのは、連想性や優先順位に関係なく、評価の順序は常に左から右になります。</target>
        </trans-unit>
        <trans-unit id="9a3f20c0b7149e2a5b69aca6a85dbd88e7bfa06c" translate="yes" xml:space="preserve">
          <source>As defined by the ECMAScript 5 specification, &lt;code&gt;Infinity&lt;/code&gt; is read-only (implemented in JavaScript 1.8.5 / Firefox 4).</source>
          <target state="translated">ECMAScript 5仕様で定義されているように、 &lt;code&gt;Infinity&lt;/code&gt; は読み取り専用です（JavaScript 1.8.5 / Firefox 4で実装）。</target>
        </trans-unit>
        <trans-unit id="2f2e163714feed8b14c3ab9777cefaa758e9a170" translate="yes" xml:space="preserve">
          <source>As explained above, some results contain additional properties as described below.</source>
          <target state="translated">以上説明したように、いくつかの結果には、以下に説明するような追加の特性が含まれている。</target>
        </trans-unit>
        <trans-unit id="27266e7938b0cc73a7255c19c6a79a6c2e4e030b" translate="yes" xml:space="preserve">
          <source>As logical expressions are evaluated left to right, it is always possible to remove parentheses from a complex expression following some rules.</source>
          <target state="translated">論理式は左から右に評価されるので、いくつかのルールに従って複雑な式から括弧を削除することは常に可能です。</target>
        </trans-unit>
        <trans-unit id="de89faab92512d4843c7e08807f95f16cb8c3a6c" translate="yes" xml:space="preserve">
          <source>As logical expressions are evaluated left to right, they are tested for possible &quot;short-circuit&quot; evaluation using the following rules:</source>
          <target state="translated">論理式は左から右に評価されるので、以下のルールを使用して「短絡」評価の可能性があるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="2e5845a76203089fc9b6ffd2ba3e1d1f05c9b349" translate="yes" xml:space="preserve">
          <source>As mentioned above, &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;\W&lt;/code&gt; only matches ASCII based characters; for example, &quot;a&quot; to &quot;z&quot;, &quot;A&quot; to &quot;Z&quot;, &quot;0&quot; to &quot;9&quot; and &quot;_&quot;. To match characters from other languages such as Cyrillic or Hebrew, use &lt;code&gt;\uhhhh&lt;/code&gt;, where &quot;hhhh&quot; is the character's Unicode value in hexadecimal. This example demonstrates how one can separate out Unicode characters from a word.</source>
          <target state="translated">上記のように、 &lt;code&gt;\w&lt;/code&gt; または &lt;code&gt;\W&lt;/code&gt; はASCIIベースの文字にのみ一致します。たとえば、「a」から「z」、「A」から「Z」、「0」から「9」、「_」。キリル文字やヘブライ語などの他の言語の文字に一致さ &lt;code&gt;\uhhhh&lt;/code&gt; 、\ uhhhhを使用します。「hhhh」は、16進数の文字のUnicode値です。この例は、単語からUnicode文字を分離する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d340023a46ddca802c957e47e8ac822fa3908132" translate="yes" xml:space="preserve">
          <source>As mentioned above, &lt;code&gt;push&lt;/code&gt; is intentionally generic, and we can use that to our advantage. &lt;code&gt;Array.prototype.push&lt;/code&gt; can work on an object just fine, as this example shows.</source>
          <target state="translated">As mentioned above, &lt;code&gt;push&lt;/code&gt; is intentionally generic, and we can use that to our advantage. &lt;code&gt;Array.prototype.push&lt;/code&gt; can work on an object just fine, as this example shows.</target>
        </trans-unit>
        <trans-unit id="8b89ad20db407fbc1dbcf949ff2ea73d3e7739cc" translate="yes" xml:space="preserve">
          <source>As mentioned above, &lt;code&gt;push&lt;/code&gt; is intentionally generic, and we can use that to our advantage. &lt;code&gt;Array.prototype.push&lt;/code&gt; can work on an object just fine, as this example shows. Note that we don't create an array to store a collection of objects. Instead, we store the collection on the object itself and use &lt;code&gt;call&lt;/code&gt; on &lt;code&gt;Array.prototype.push&lt;/code&gt; to trick the method into thinking we are dealing with an array, and it just works, thanks to the way JavaScript allows us to establish the execution context however we please.</source>
          <target state="translated">上記のように、 &lt;code&gt;push&lt;/code&gt; は意図的にジェネリックであり、私たちはそれを有利に使用できます。この例が示すように、 &lt;code&gt;Array.prototype.push&lt;/code&gt; はオブジェクトを問題なく処理できます。オブジェクトのコレクションを格納する配列を作成しないことに注意してください。代わりに、我々は、オブジェクト自体の収集および使用の保存 &lt;code&gt;call&lt;/code&gt; 上 &lt;code&gt;Array.prototype.push&lt;/code&gt; 、JavaScriptを私たちはしかし、実行コンテキストを確立することを可能にする方法のおかげで、我々は、配列を扱っているという考えに方法をだまして、それだけで動作しますお願いします。</target>
        </trans-unit>
        <trans-unit id="bdaa8b62f43dc63e0ad47d864f7b58399b69902c" translate="yes" xml:space="preserve">
          <source>As of ECMAScript 2016, tagged templates conform to the rules of the following escape sequences:</source>
          <target state="translated">ECMAScript 2016の時点では、タグ付きテンプレートは以下のエスケープシーケンスのルールに準拠しています。</target>
        </trans-unit>
        <trans-unit id="86e7074b192dda8a1ea062acc4b52554bbdf7bf1" translate="yes" xml:space="preserve">
          <source>As of ES2015, you can also use &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;.</source>
          <target state="translated">ES2015以降、&lt;a href=&quot;../functions/arrow_functions&quot;&gt;矢印関数を&lt;/a&gt;使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c921421fe81703c8f087d8c7268acc1471abd2a8" translate="yes" xml:space="preserve">
          <source>As said, these differences can make debugging even simple-seeming problems quickly go astray. For example:</source>
          <target state="translated">このように、これらの違いにより、一見単純そうに見える問題であっても、デバッグがすぐに迷走してしまうことがあります。例えば、以下のようなものです。</target>
        </trans-unit>
        <trans-unit id="7968e2796cc6687a5f4953a8ad7fa7b732d73941" translate="yes" xml:space="preserve">
          <source>As seen above, the fields can be declared with or without a default value.</source>
          <target state="translated">上で見たように、フィールドはデフォルト値の有無に関わらず宣言することができます。</target>
        </trans-unit>
        <trans-unit id="46c6c7f8bfb6ac149c26748e945c00f905895f02" translate="yes" xml:space="preserve">
          <source>As seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either.</source>
          <target state="translated">例にあるように、書き換え不可能なプロパティに書き込もうとしても、それは変わりませんが、エラーも発生しません。</target>
        </trans-unit>
        <trans-unit id="21d2a264c9fde6e01cdf2ed05d84f01da72050fc" translate="yes" xml:space="preserve">
          <source>As shown above, all seems normal so far. However, when attempting to actually use these objects, their differences quickly become apparent:</source>
          <target state="translated">上記のように、今のところすべてが正常に見えます。しかし、実際に使ってみると、その違いはすぐに明らかになります。</target>
        </trans-unit>
        <trans-unit id="982bf3ceaec868376092718e6ddc9c0ea2778ee8" translate="yes" xml:space="preserve">
          <source>As shown above, the { brackets } and ( parentheses ) and &quot;return&quot; are optional, but may be required.</source>
          <target state="translated">上記のように、{括弧}は と(カッコ)と &quot;return&quot; は任意ですが、必須の場合もあります。</target>
        </trans-unit>
        <trans-unit id="73c0dbacbcb3a76bc1ffa8c313fdd8b9265aed3c" translate="yes" xml:space="preserve">
          <source>As shown, objects modified this way now look very much like ordinary objects.</source>
          <target state="translated">このように、このように変更されたオブジェクトは、通常のオブジェクトと非常によく似ています。</target>
        </trans-unit>
        <trans-unit id="1aa22bacbb90ee485c142e8d6f87aa78c9b48fd9" translate="yes" xml:space="preserve">
          <source>As stated previously, arrow function expressions are best suited for non-method functions. Let's see what happens when we try to use them as methods:</source>
          <target state="translated">前述したように、矢印関数式は非メソッド関数に最適です。これをメソッドとして使おうとするとどうなるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="7cbfbd88cd6fe7b112788dcbd77c64a11bc25a9d" translate="yes" xml:space="preserve">
          <source>As stated, if you do not specify a constructor method a default constructor is used. For base classes the default constructor is:</source>
          <target state="translated">前述の通り、コンストラクタメソッドを指定しない場合はデフォルトのコンストラクタが使用されます。基底クラスのデフォルトのコンストラクタは</target>
        </trans-unit>
        <trans-unit id="01141694d25e0ba11fdfedb99ad78dedf9123324" translate="yes" xml:space="preserve">
          <source>As such, &lt;code&gt;delete&lt;/code&gt; cannot delete any functions in the global scope (whether this is part from a function definition or a function expression).</source>
          <target state="translated">そのため、 &lt;code&gt;delete&lt;/code&gt; は、グローバルスコープ内の関数を削除できません（これが関数定義からのものか、関数式からのものか）。</target>
        </trans-unit>
        <trans-unit id="43de276e02fb5cae067a91bb1ffdd5afad4051d8" translate="yes" xml:space="preserve">
          <source>As the 4th example shows, the function name can be different from the variable the function is assigned to. They have no relation to each other. A function declaration also creates a variable with the same name as the function name. Thus, unlike those defined by function expressions, functions defined by function declarations can be accessed by their name in the scope they were defined in:</source>
          <target state="translated">第4の例で示したように、関数名と関数が代入されている変数が異なる場合があります。これらは互いに関係がありません。また、関数宣言は、関数名と同じ名前の変数を作成します。このように、関数式で定義されたものとは異なり、関数宣言で定義された関数は、定義されたスコープ内でその名前でアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="bf55a33661f108fbde9b2bb54f72e0af2bb68fd8" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;&lt;a href=&quot;promise/then&quot;&gt;&lt;code&gt;Promise.prototype.then()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;promise/catch&quot;&gt;&lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; methods return promises, they can be chained.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;promise/then&quot;&gt;&lt;code&gt;Promise.prototype.then()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;promise/catch&quot;&gt;&lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドは、彼らが連鎖させることができ、約束を返します。</target>
        </trans-unit>
        <trans-unit id="27a98fb309af44abe38dbcc1a4d5cecf1cbd0796" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;then&lt;/code&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/a&gt; methods return promises, they &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#Chaining&quot;&gt;can be chained&lt;/a&gt; &amp;mdash; an operation called &lt;em&gt;composition&lt;/em&gt;.</source>
          <target state="translated">As the &lt;code&gt;then&lt;/code&gt; and &lt;a href=&quot;catch&quot;&gt; &lt;code&gt;Promise.prototype.catch()&lt;/code&gt; &lt;/a&gt; methods return promises, they &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#Chaining&quot;&gt;can be chained&lt;/a&gt; &amp;mdash; an operation called &lt;em&gt;composition&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="04b9cb9920dc356539a8a67ecac564d8697a4b53" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;then&lt;/code&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/a&gt; methods return promises, they can be chained &amp;mdash; an operation called &lt;em&gt;composition&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; と&lt;a href=&quot;catch&quot;&gt; &lt;code&gt;Promise.prototype.catch()&lt;/code&gt; &lt;/a&gt;メソッドの戻り値の約束、それらが連鎖させることができます-と呼ばれる操作&lt;em&gt;構図を&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="04c18933c5032f4ca8d5f4ea92b287dae00fb65e" translate="yes" xml:space="preserve">
          <source>As we can see, both examples do not start with the &lt;code&gt;function&lt;/code&gt; keyword. Statements involving functions which do not start with &lt;code&gt;function&lt;/code&gt; are function expressions.</source>
          <target state="translated">ご覧のとおり、どちらの例も &lt;code&gt;function&lt;/code&gt; キーワードで始まっていません。始まらない関数を含むステートメント &lt;code&gt;function&lt;/code&gt; 関数式です。</target>
        </trans-unit>
        <trans-unit id="ed44fde2babb09e3ed5b178484a8683808645050" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;exec()&lt;/code&gt; (or in combination with it), &lt;code&gt;test()&lt;/code&gt; called multiple times on the same global regular expression instance will advance past the previous match.</source>
          <target state="translated">As with &lt;code&gt;exec()&lt;/code&gt; (or in combination with it), &lt;code&gt;test()&lt;/code&gt; called multiple times on the same global regular expression instance will advance past the previous match.</target>
        </trans-unit>
        <trans-unit id="d5ad447d3a0144bf7de3d53bf1cbaa189de9bf26" translate="yes" xml:space="preserve">
          <source>As with canonical normalization, you can ask for decomposed or composed compatible forms by passing &lt;code&gt;&quot;NFKD&quot;&lt;/code&gt; or &lt;code&gt;&quot;NFKC&quot;&lt;/code&gt;, respectively.</source>
          <target state="translated">As with canonical normalization, you can ask for decomposed or composed compatible forms by passing &lt;code&gt;&quot;NFKD&quot;&lt;/code&gt; or &lt;code&gt;&quot;NFKC&quot;&lt;/code&gt; , respectively.</target>
        </trans-unit>
        <trans-unit id="dfea5df33fceeb3e5a45b870d696433556ac14ce" translate="yes" xml:space="preserve">
          <source>As with most of the built-in objects in JavaScript, the &lt;code&gt;Math&lt;/code&gt; object can be extended with custom properties and methods. To extend the &lt;code&gt;Math&lt;/code&gt; object, you do not use &lt;code&gt;prototype&lt;/code&gt;. Instead, you directly extend &lt;code&gt;Math&lt;/code&gt;:</source>
          <target state="translated">JavaScriptのほとんどの組み込みオブジェクトと同様に、 &lt;code&gt;Math&lt;/code&gt; オブジェクトはカスタムプロパティとメソッドで拡張できます。 &lt;code&gt;Math&lt;/code&gt; オブジェクトを拡張するには、 &lt;code&gt;prototype&lt;/code&gt; を使用しません。代わりに、 &lt;code&gt;Math&lt;/code&gt; を直接拡張します。</target>
        </trans-unit>
        <trans-unit id="94774134762debfbbc3a38c381068610d4609520" translate="yes" xml:space="preserve">
          <source>As you can do with any Array-like object, you can use ES2015's &lt;a href=&quot;../global_objects/array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method or &lt;a href=&quot;../operators/spread_syntax&quot;&gt;spread operator&lt;/a&gt; to convert &lt;code&gt;arguments&lt;/code&gt; to a real Array:</source>
          <target state="translated">配列のような任意のオブジェクトと同じように、ES2015の&lt;a href=&quot;../global_objects/array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;メソッドまたは&lt;a href=&quot;../operators/spread_syntax&quot;&gt;スプレッド演算子&lt;/a&gt;を使用して、 &lt;code&gt;arguments&lt;/code&gt; を実際の配列に変換できます。</target>
        </trans-unit>
        <trans-unit id="157261e12ec94162e8c2641c02afcfc4e1a05bb4" translate="yes" xml:space="preserve">
          <source>As you can do with any Array-like object, you can use ES2015's &lt;a href=&quot;../global_objects/array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method or &lt;a href=&quot;../operators/spread_syntax&quot;&gt;spread syntax&lt;/a&gt; to convert &lt;code&gt;arguments&lt;/code&gt; to a real Array:</source>
          <target state="translated">As you can do with any Array-like object, you can use ES2015's &lt;a href=&quot;../global_objects/array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt; method or &lt;a href=&quot;../operators/spread_syntax&quot;&gt;spread syntax&lt;/a&gt; to convert &lt;code&gt;arguments&lt;/code&gt; to a real Array:</target>
        </trans-unit>
        <trans-unit id="14a803907be712fb3db4c6a6f7769d34cb77477b" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;length&lt;/code&gt; property does not necessarily indicate the number of defined values in the array. See also &lt;a href=&quot;../array#Relationship_between_length_and_numerical_properties&quot;&gt;Relationship between &lt;code&gt;length&lt;/code&gt; and numerical properties&lt;/a&gt;.</source>
          <target state="translated">As you can see, the &lt;code&gt;length&lt;/code&gt; property does not necessarily indicate the number of defined values in the array. See also &lt;a href=&quot;../array#Relationship_between_length_and_numerical_properties&quot;&gt;Relationship between &lt;code&gt;length&lt;/code&gt; and numerical properties&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="28924a0707293aafe7600f1f8f95ea48d506e615" translate="yes" xml:space="preserve">
          <source>Assigned a default value in case the unpacked value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Assigned a default value in case the unpacked value is &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19ee3ef8fecaf357009c4e42e1758b79bd67b243" translate="yes" xml:space="preserve">
          <source>Assigning a value to an undeclared variable implicitly creates it as a global variable (it becomes a property of the global object) when the assignment is executed. The differences between declared and undeclared variables are:</source>
          <target state="translated">宣言されていない変数に値を代入すると、代入が実行されたときに暗黙のうちにグローバル変数として作成されます(グローバル・オブジェクトのプロパティになります)。宣言された変数と宣言されていない変数の違いは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a328cf23950a4c2dd7cf0d84df9d0f0b55887b06" translate="yes" xml:space="preserve">
          <source>Assigning a value to the same constant name in the same block-scope will throw.</source>
          <target state="translated">同じブロックスコープ内の同じ定数名に値を代入すると、スローされます。</target>
        </trans-unit>
        <trans-unit id="77d7cec53736acd03c12949621fbb4f0fef2b3f8" translate="yes" xml:space="preserve">
          <source>Assigning the rest of an array to a variable</source>
          <target state="translated">配列の残りの部分を変数に代入する</target>
        </trans-unit>
        <trans-unit id="fc89d73de1e7985333c94758dd3f77af4489b824" translate="yes" xml:space="preserve">
          <source>Assigning to length</source>
          <target state="translated">長さへの代入</target>
        </trans-unit>
        <trans-unit id="dab86c2f68dc9210ef0bdb54850781f15563ef0c" translate="yes" xml:space="preserve">
          <source>Assigning to new variable names</source>
          <target state="translated">新しい変数名への代入</target>
        </trans-unit>
        <trans-unit id="b3a2f1aa05c3769666a3869dfe2488d80afcf977" translate="yes" xml:space="preserve">
          <source>Assigning to new variables names and providing default values</source>
          <target state="translated">新しい変数名の割り当てとデフォルト値の提供</target>
        </trans-unit>
        <trans-unit id="dd1bfc09c8e5fbdfec303db25c21f0f19458bebf" translate="yes" xml:space="preserve">
          <source>Assigning two variables with single string value</source>
          <target state="translated">単一の文字列値を持つ2つの変数を代入する</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="5f1106667a3ffe6b7d174acec14d782a9c3ea70e" translate="yes" xml:space="preserve">
          <source>Assignment (&lt;code&gt;x = y&lt;/code&gt;)</source>
          <target state="translated">割り当て（ &lt;code&gt;x = y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7bec00ae67953bf63f8b1b3f8ddf8f9255f79d82" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
          <target state="translated">代入演算子</target>
        </trans-unit>
        <trans-unit id="87c55c9d7cf3600d0c45a8fa56b1b4cc7c337e78" translate="yes" xml:space="preserve">
          <source>Assignment operator.</source>
          <target state="translated">代入演算子です。</target>
        </trans-unit>
        <trans-unit id="aa098245c1ec6b3b4a9cec4ec49f68bc2b3dc905" translate="yes" xml:space="preserve">
          <source>Assignment operators</source>
          <target state="translated">配置演算子</target>
        </trans-unit>
        <trans-unit id="831e549cdc8903a28dcd904d46eb9b62d0711db3" translate="yes" xml:space="preserve">
          <source>Assignment separate from declaration</source>
          <target state="translated">宣言とは別の割り当て</target>
        </trans-unit>
        <trans-unit id="99708553016c28b2ad5d67c421a22ae856a7943d" translate="yes" xml:space="preserve">
          <source>Assignment within conditional expressions</source>
          <target state="translated">条件式内での代入</target>
        </trans-unit>
        <trans-unit id="159e1ce04e2cd5322d4cb306182e2709c3b28d64" translate="yes" xml:space="preserve">
          <source>Assignment within the conditional expression</source>
          <target state="translated">条件式内での割り当て</target>
        </trans-unit>
        <trans-unit id="9a37acb2e24f30a5a26e984dd635a4ee536e546f" translate="yes" xml:space="preserve">
          <source>Assignment without declaration</source>
          <target state="translated">申告なしの譲渡</target>
        </trans-unit>
        <trans-unit id="18c67934740cd2dda50cc308a7af44a2cbc3ff0b" translate="yes" xml:space="preserve">
          <source>Associates a function with a property that, when accessed, executes that function and returns its return value.</source>
          <target state="translated">アクセスされたときにその関数を実行し、その戻り値を返すプロパティに関数を関連付けます。</target>
        </trans-unit>
        <trans-unit id="5fb3991ea7907d72606d3a58259eeab463111ab2" translate="yes" xml:space="preserve">
          <source>Associates a function with a property that, when set, executes that function which modifies the property.</source>
          <target state="translated">関数をプロパティに関連付け、そのプロパティを設定すると、そのプロパティを変更する関数を実行します。</target>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="7e8c8e8756c3e2a099abe557013eea7ecf8ac4e8" translate="yes" xml:space="preserve">
          <source>Associativity determines the way in which operators of the same precedence are parsed. For example, consider an expression:</source>
          <target state="translated">連想性は、同じ優先順位の演算子の解析方法を決定します。例えば、ある式を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="40a30fc881d26c18d47a972f2de5340d0bddd541" translate="yes" xml:space="preserve">
          <source>Assuming a pristine execution environment with all names and properties referring to their initial values, &lt;code&gt;Object.defineProperties&lt;/code&gt; is almost completely equivalent (note the comment in &lt;code&gt;isCallable&lt;/code&gt;) to the following reimplementation in JavaScript:</source>
          <target state="translated">すべての名前とプロパティが初期値を参照する初期状態の実行環境を想定すると、 &lt;code&gt;Object.defineProperties&lt;/code&gt; は、JavaScriptでの次の再実装とほぼ完全に同じです（ &lt;code&gt;isCallable&lt;/code&gt; のコメントに注意してください）。</target>
        </trans-unit>
        <trans-unit id="e6287d405a76408031a1b4e4ab2ff51598b84909" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in collation, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though pinyin collation is not used with Indonesian and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="translated">照合でインドネシア語とドイツ語は &lt;code&gt;supportedLocalesOf&lt;/code&gt; が、バリ語はサポートしないランタイムを想定すると、pinyin照合はインドネシア語では使用されず、インドネシアに特化したドイツ語はサポートされない場合でも、supportedLocalesOfはインドネシア語とドイツ語の言語タグを変更せずに返します。ここでの &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; アルゴリズムの仕様に注意してください。 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; マッチャーは、ほとんどのバリ語話者もインドネシア語を理解しているため、インドネシア語がバリニーズにとって適切なマッチングであると判断し、バリ語の言語タグも返すことがあります。</target>
        </trans-unit>
        <trans-unit id="20cfbcee80b679f703032bf9fd2069c9ca834319" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in date and time formatting, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though pinyin collation is neither relevant to date and time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="translated">日付と時刻のフォーマットでインドネシア語とドイツ語を &lt;code&gt;supportedLocalesOf&lt;/code&gt; が、バリ語はサポートしないランタイムを想定すると、pinyin照合が日付と時刻のフォーマットに関連せず、インドネシア語で使用されず、インドネシアの専門ドイツ語であっても、supportedLocalesOfはインドネシア語とドイツ語の言語タグを変更せずに返します。サポートされる可能性は低いです。ここでの &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; アルゴリズムの仕様に注意してください。 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; マッチャーは、ほとんどのバリ語話者もインドネシア語を理解しているため、インドネシア語がバリニーズにとって適切なマッチングであると判断し、バリ語の言語タグも返すことがあります。</target>
        </trans-unit>
        <trans-unit id="4b74a342ee44ef6af7964c6966d0846ba4b275b6" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in number formatting, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though &lt;code&gt;pinyin&lt;/code&gt; collation is neither relevant to number formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="translated">インドネシア語とドイツ語はサポートしているが、バリ語はサポートしていないランタイムを数値フォーマットで想定すると、 &lt;code&gt;pinyin&lt;/code&gt; 照合は数値フォーマットに関連せず、インドネシア語でも使用されず、インドネシア専用のドイツ語はありそうもないが、 &lt;code&gt;supportedLocalesOf&lt;/code&gt; はインドネシア語とドイツ語の言語タグを変更せずに返します。サポートされています。ここでの &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; アルゴリズムの仕様に注意してください。 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; マッチャーは、ほとんどのバリ語話者もインドネシア語を理解しているため、インドネシア語がバリニーズにとって適切なマッチングであると判断し、バリ語の言語タグも返すことがあります。</target>
        </trans-unit>
        <trans-unit id="139cd6b0d8a3c6ef09755401116cf1edc4fd2f7b" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in plural formatting, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though &lt;code&gt;pinyin&lt;/code&gt; collation is neither relevant to plural formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="translated">複数の形式でインドネシア語とドイツ語を &lt;code&gt;supportedLocalesOf&lt;/code&gt; が、バリ語はサポートしないランタイムを想定すると、 &lt;code&gt;pinyin&lt;/code&gt; 照合が複数形式に関連せず、インドネシア語で使用されず、インドネシアに特化したドイツ語がありそうもないにもかかわらず、supportedLocalesOfはインドネシア語とドイツ語の言語タグを変更せずに返します。サポートされています。ここでの &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; アルゴリズムの仕様に注意してください。 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; マッチャーは、ほとんどのバリ語話者もインドネシア語を理解しているため、インドネシア語がバリニーズにとって適切なマッチングであると判断し、バリ語の言語タグも返すことがあります。</target>
        </trans-unit>
        <trans-unit id="445aedd2e680d1bbdbabb034f3ca19f76188528b" translate="yes" xml:space="preserve">
          <source>Async functions always return a promise. If the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise.</source>
          <target state="translated">非同期関数は常にプロミスを返します。非同期関数の戻り値が明示的にプロミスではない場合は、暗黙のうちにプロミスでラップされます。</target>
        </trans-unit>
        <trans-unit id="783f2a2df615b75e6dce64939ba51bad05f6b44f" translate="yes" xml:space="preserve">
          <source>Async functions and execution order</source>
          <target state="translated">非同期関数と実行順序</target>
        </trans-unit>
        <trans-unit id="c90ad4f9f702414e2b5dbfa5221c549d5854c7db" translate="yes" xml:space="preserve">
          <source>Async functions can contain zero or more &lt;a href=&quot;../operators/await&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; expressions. Await expressions suspend progress through an async function, yielding control and subsequently resuming progress only when an awaited promise-based asynchronous operation is either fulfilled or rejected. The resolved value of the promise is treated as the return value of the await expression. Use of &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; enables the use of ordinary &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; blocks around asynchronous code.</source>
          <target state="translated">Async functions can contain zero or more &lt;a href=&quot;../operators/await&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; expressions. Await expressions suspend progress through an async function, yielding control and subsequently resuming progress only when an awaited promise-based asynchronous operation is either fulfilled or rejected. The resolved value of the promise is treated as the return value of the await expression. Use of &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; enables the use of ordinary &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; blocks around asynchronous code.</target>
        </trans-unit>
        <trans-unit id="a54306afe1186b35f39454949b654df02eaf5921" translate="yes" xml:space="preserve">
          <source>Async functions may also be defined &lt;a href=&quot;../operators/async_function&quot;&gt;as expressions&lt;/a&gt;.</source>
          <target state="translated">Async functions may also be defined &lt;a href=&quot;../operators/async_function&quot;&gt;as expressions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f1de478364d359d80003f50ac6c23dfbb8ec17b9" translate="yes" xml:space="preserve">
          <source>Async generator methods</source>
          <target state="translated">非同期発生器のメソッド</target>
        </trans-unit>
        <trans-unit id="eff9960bccab37df30db91c6d36347885aa7dad8" translate="yes" xml:space="preserve">
          <source>Async methods</source>
          <target state="translated">非同期メソッド</target>
        </trans-unit>
        <trans-unit id="72461dccf2067d5111358217c4577db8984d2f42" translate="yes" xml:space="preserve">
          <source>AsyncFunction</source>
          <target state="translated">AsyncFunction</target>
        </trans-unit>
        <trans-unit id="675d9dafc3dde5f6f1f3e1b07267f9831dd78bc7" translate="yes" xml:space="preserve">
          <source>AsyncFunction.prototype</source>
          <target state="translated">AsyncFunction.prototype</target>
        </trans-unit>
        <trans-unit id="84383a8f0f36526e51c1d4e8d7d5425bfd96b2ca" translate="yes" xml:space="preserve">
          <source>Asynchronicity of &lt;code&gt;Promise.race&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise.race&lt;/code&gt; の非同期性</target>
        </trans-unit>
        <trans-unit id="a04460fc77d5b7420cece76e636d242c9930e141" translate="yes" xml:space="preserve">
          <source>Asynchronicity of Promise.race</source>
          <target state="translated">Promise.raceの非同期性</target>
        </trans-unit>
        <trans-unit id="02d60b958686cb1f594032ede8ba5c532cc8eb38" translate="yes" xml:space="preserve">
          <source>Asynchronicity or synchronicity of &lt;code&gt;Promise.all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; の非同期性または同期性</target>
        </trans-unit>
        <trans-unit id="d8915ffb7180e68b4e8c7b56ae94c96836bae276" translate="yes" xml:space="preserve">
          <source>At present, there is no &lt;code&gt;Math.clon&lt;/code&gt; for &quot;Count Leading Ones&quot; (named &quot;clon&quot;, not &quot;clo&quot;, because &quot;clo&quot; and &quot;clz&quot; are too similar especially for non-English-speaking people). However, a &lt;code&gt;clon&lt;/code&gt; function can easily be created by inversing the bits of a number and passing the result to &lt;code&gt;Math.clz32&lt;/code&gt;. Doing this will work because the inverse of 1 is 0 and vice-versa. Thus, inversing the bits will inverse the measured quantity of 0's (from &lt;code&gt;Math.clz32&lt;/code&gt;), thereby making &lt;code&gt;Math.clz32&lt;/code&gt; count the number of ones instead of counting the number of zeros.</source>
          <target state="translated">At present, there is no &lt;code&gt;Math.clon&lt;/code&gt; for &quot;Count Leading Ones&quot; (named &quot;clon&quot;, not &quot;clo&quot;, because &quot;clo&quot; and &quot;clz&quot; are too similar especially for non-English-speaking people). However, a &lt;code&gt;clon&lt;/code&gt; function can easily be created by inversing the bits of a number and passing the result to &lt;code&gt;Math.clz32&lt;/code&gt; . Doing this will work because the inverse of 1 is 0 and vice-versa. Thus, inversing the bits will inverse the measured quantity of 0's (from &lt;code&gt;Math.clz32&lt;/code&gt; ), thereby making &lt;code&gt;Math.clz32&lt;/code&gt; count the number of ones instead of counting the number of zeros.</target>
        </trans-unit>
        <trans-unit id="caf455145317822f90dd7493431b1576d0e6536d" translate="yes" xml:space="preserve">
          <source>At present, there is no &lt;code&gt;Math.clon&lt;/code&gt; for &quot;Count Leading Ones&quot; (named &quot;clon&quot;, not &quot;clo&quot;, because &quot;clo&quot; and &quot;clz&quot; are too similar especially for non-english-speaking people). However, a CLON function can easily be created by inversing the bits of a number and passing the result to `Math.clz` which will work because the inverse of 1 is 0 and vice-versa. Thus, inversing the bits will inverse the measured quanity 0 (of Math.clz), thereby making Math.clz count the number of ones instead of the number of zeros.</source>
          <target state="translated">現在のところ、「Count Leading Ones」の &lt;code&gt;Math.clon&lt;/code&gt; はありません（「clo」と「clz」は英語を話さない人々にとって特に類似しているため、「clo」ではなく「clon」という名前です）。ただし、CLON関数は、数値のビットを反転し、その結果を「Math.clz」に渡すことで簡単に作成できます。これは、1の逆が0であり、逆も同様であるため機能します。したがって、ビットを反転すると、（Math.clzの）測定された量0が反転し、Math.clzにゼロの数ではなく1の数がカウントされます。</target>
        </trans-unit>
        <trans-unit id="21647d40658d5c2bb791c8dd38ca360a2deedaab" translate="yes" xml:space="preserve">
          <source>At the top level of programs and functions, &lt;code&gt;let&lt;/code&gt;, unlike &lt;code&gt;var&lt;/code&gt;, does not create a property on the global object. For example:</source>
          <target state="translated">プログラムと関数のトップレベルでは、 &lt;code&gt;let&lt;/code&gt; は、 &lt;code&gt;var&lt;/code&gt; とは異なり、グローバルオブジェクトにプロパティを作成しません。例えば：</target>
        </trans-unit>
        <trans-unit id="fb34ad6782840b3609292d56d50524837de11852" translate="yes" xml:space="preserve">
          <source>Atomic operations</source>
          <target state="translated">原子操作</target>
        </trans-unit>
        <trans-unit id="3f836adca87be251d502a94ed73c994043ad8e3e" translate="yes" xml:space="preserve">
          <source>Atomic operations on non-shared &lt;code&gt;ArrayBuffer&lt;/code&gt; objects</source>
          <target state="translated">Atomic operations on non-shared &lt;code&gt;ArrayBuffer&lt;/code&gt; objects</target>
        </trans-unit>
        <trans-unit id="22cd0cbd81dee9dcd227285a4fb456261af24ea4" translate="yes" xml:space="preserve">
          <source>Atomics</source>
          <target state="translated">Atomics</target>
        </trans-unit>
        <trans-unit id="f85f7410ec8be229ef5b91b1cd3f92c61f353f5a" translate="yes" xml:space="preserve">
          <source>Atomics.add</source>
          <target state="translated">Atomics.add</target>
        </trans-unit>
        <trans-unit id="e00a0386c1e6b2b0638039f05bc4001df4969ab8" translate="yes" xml:space="preserve">
          <source>Atomics.and</source>
          <target state="translated">Atomics.and</target>
        </trans-unit>
        <trans-unit id="ad2717348dd0b78b3ee3b1d52eedf3294cae060a" translate="yes" xml:space="preserve">
          <source>Atomics.compareExchange</source>
          <target state="translated">Atomics.compareExchange</target>
        </trans-unit>
        <trans-unit id="badd0d0872059c86c2354b2522695f9e9b64e841" translate="yes" xml:space="preserve">
          <source>Atomics.exchange</source>
          <target state="translated">Atomics.exchange</target>
        </trans-unit>
        <trans-unit id="9a2ef3ec645728e3192050492ca789f56bd331ef" translate="yes" xml:space="preserve">
          <source>Atomics.isLockFree</source>
          <target state="translated">Atomics.isLockFree</target>
        </trans-unit>
        <trans-unit id="1fb98a238867f9795a0ca47509ccc73a1f3804e1" translate="yes" xml:space="preserve">
          <source>Atomics.load</source>
          <target state="translated">Atomics.load</target>
        </trans-unit>
        <trans-unit id="8f33001e9afb9970703f3e069d77cd387440522c" translate="yes" xml:space="preserve">
          <source>Atomics.notify</source>
          <target state="translated">Atomics.notify</target>
        </trans-unit>
        <trans-unit id="4b59069ef282276419e62366e7890757fc613351" translate="yes" xml:space="preserve">
          <source>Atomics.or</source>
          <target state="translated">Atomics.or</target>
        </trans-unit>
        <trans-unit id="7a3aec76fe1cacc70b5c6d279f1176edd778085b" translate="yes" xml:space="preserve">
          <source>Atomics.store</source>
          <target state="translated">Atomics.store</target>
        </trans-unit>
        <trans-unit id="b2be5619f1b779bdbcc894c4b051895bb2cf5398" translate="yes" xml:space="preserve">
          <source>Atomics.sub</source>
          <target state="translated">Atomics.sub</target>
        </trans-unit>
        <trans-unit id="6b37ac0d3d457722e8601f3c8e946f5f5bf02162" translate="yes" xml:space="preserve">
          <source>Atomics.wait</source>
          <target state="translated">Atomics.wait</target>
        </trans-unit>
        <trans-unit id="a82e5513b087ae217336da68fa152fea0c82446d" translate="yes" xml:space="preserve">
          <source>Atomics.xor</source>
          <target state="translated">Atomics.xor</target>
        </trans-unit>
        <trans-unit id="2b33afd0e78ae876c55d72cc152397ba1385a00e" translate="yes" xml:space="preserve">
          <source>Attempting to declare a class twice</source>
          <target state="translated">クラスを二度宣言しようとする</target>
        </trans-unit>
        <trans-unit id="72d46d7d3d242c212209a1fadee72567b294d7d2" translate="yes" xml:space="preserve">
          <source>Attempting to delete a plain variable, doesn't work in JavaScript and it throws an error in strict mode:</source>
          <target state="translated">プレーン変数を削除しようとすると、JavaScriptでは動作せず、厳密モードではエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="ddd176d7dc7b62615a492c4fdf896a00beffcfde" translate="yes" xml:space="preserve">
          <source>Attempting to delete non-configurable properties</source>
          <target state="translated">構成不可能なプロパティを削除しようとする</target>
        </trans-unit>
        <trans-unit id="db5152f6fbed10d8441cb928a545cd73f0aaed25" translate="yes" xml:space="preserve">
          <source>Attention: If an empty string (&quot;&quot;) is used as the separator, the string is &lt;strong&gt;not&lt;/strong&gt; split between each &lt;em&gt;user-perceived character&lt;/em&gt; (&lt;a href=&quot;https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries&quot;&gt;grapheme cluster&lt;/a&gt;) or between each unicode character (codepoint) but between each UTF-16 codeunit. This destroys &lt;a href=&quot;http://unicode.org/faq/utf_bom.html#utf16-2&quot;&gt;surrogate pairs&lt;/a&gt;. See also &lt;a href=&quot;https://stackoverflow.com/a/34717402&quot;&gt;How do you get a string to a character array in JavaScript?&lt;/a&gt; on stackoverflow.</source>
          <target state="translated">重要：空の文字列（ &quot;&quot;）をセパレーターとして使用する場合、文字列は&lt;em&gt;ユーザーが認識する&lt;/em&gt;各&lt;em&gt;文字&lt;/em&gt;（&lt;a href=&quot;https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries&quot;&gt;書記素クラスター&lt;/a&gt;）間または各Unicode文字（コードポイント）間ではなく、各UTF-16コードユニット間で分割され&lt;strong&gt;ません&lt;/strong&gt;。これにより、&lt;a href=&quot;http://unicode.org/faq/utf_bom.html#utf16-2&quot;&gt;サロゲートペア&lt;/a&gt;が破棄されます。&lt;a href=&quot;https://stackoverflow.com/a/34717402&quot;&gt;JavaScriptで文字配列を取得するにはどうすればよいですか？&lt;/a&gt;もご覧ください。stackoverflow。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b9198038145c380df9f218dd05386e8b57cbcae3" translate="yes" xml:space="preserve">
          <source>Autoboxing will not happen in strict mode, the &lt;em&gt;this&lt;/em&gt; value remains as passed.</source>
          <target state="translated">自動ボクシングは厳密モードでは発生しません。&lt;em&gt;この&lt;/em&gt;値は渡されたままです。</target>
        </trans-unit>
        <trans-unit id="2f1bd0e4bb77a22b6b44b6989aabd07d1ca2d4a8" translate="yes" xml:space="preserve">
          <source>Automate Mask Creation</source>
          <target state="translated">マスク作成の自動化</target>
        </trans-unit>
        <trans-unit id="ef03d415de3b288ce45c39fae71498f3e9051f49" translate="yes" xml:space="preserve">
          <source>Automatic Semicolon Insertion</source>
          <target state="translated">セミコロンの自動挿入</target>
        </trans-unit>
        <trans-unit id="872127103480de5d4b855a7eef875473dc644f22" translate="yes" xml:space="preserve">
          <source>Automatic semicolon insertion</source>
          <target state="translated">セミコロンの自動挿入</target>
        </trans-unit>
        <trans-unit id="ea2f6197435b14aebe5f46e481ed29407de6b116" translate="yes" xml:space="preserve">
          <source>Automatic semicolon insertion (ASI)</source>
          <target state="translated">セミコロン自動挿入(ASI)</target>
        </trans-unit>
        <trans-unit id="0dbde6894a574267e8a91c3cb9bcd71799f17575" translate="yes" xml:space="preserve">
          <source>Available in Firefox Nightly.</source>
          <target state="translated">Firefox Nightlyで利用可能。</target>
        </trans-unit>
        <trans-unit id="1d28ddbdb25cf79cfa52355eac8bf17a5cbf93a8" translate="yes" xml:space="preserve">
          <source>Available in workers</source>
          <target state="translated">労働者で利用可能</target>
        </trans-unit>
        <trans-unit id="b318f9f25ac95a943d98d2de8173c1823b4dea0e" translate="yes" xml:space="preserve">
          <source>Avoid comparing formatted date values to static values</source>
          <target state="translated">フォーマットされた日付の値を静的な値と比較しないようにする</target>
        </trans-unit>
        <trans-unit id="3de44dc233fdc574da2ac9dba3876a893c9af95f" translate="yes" xml:space="preserve">
          <source>Avoiding &lt;code&gt;eval()&lt;/code&gt; here could be done by splitting the property path and looping through the different properties:</source>
          <target state="translated">ここで &lt;code&gt;eval()&lt;/code&gt; を回避するには、プロパティパスを分割し、さまざまなプロパティをループします。</target>
        </trans-unit>
        <trans-unit id="310d1e06f91217d130d6eb9ad2231dbd27fd8bfd" translate="yes" xml:space="preserve">
          <source>Awaiting a promise to be fulfilled</source>
          <target state="translated">約束が果たされるのを待って</target>
        </trans-unit>
        <trans-unit id="5f18a12ebb8823e606a287182279c3b7bf13c914" translate="yes" xml:space="preserve">
          <source>Axel Rauschmayer's book: &quot;Exploring JS: Modules&quot;</source>
          <target state="translated">Axel Rauschmayerの本。&quot;Exploring JS:Modules&quot;</target>
        </trans-unit>
        <trans-unit id="cfad1589094fb6bb5ab258c1bab5dad61852e4a2" translate="yes" xml:space="preserve">
          <source>Axel Rauschmayer's book: &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;&quot;Exploring JS: Modules&quot;&lt;/a&gt;</source>
          <target state="translated">Axel Rauschmayer's book: &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;&quot;Exploring JS: Modules&quot;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6909aee501b628ab957c138b9e729d59fbb7b1f0" translate="yes" xml:space="preserve">
          <source>BCP 47 also allows for extensions, each consisting of a single digit or letter (other than &lt;code&gt;&quot;x&quot;&lt;/code&gt;) and one or more two- to eight-letter or digit tags, all separated by hyphens. JavaScript internationalization functions use the &lt;code&gt;&quot;u&quot;&lt;/code&gt; (Unicode) extension, which can be used to request additional customization of &lt;a href=&quot;intl/collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;intl/numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;intl/datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; objects. Examples:</source>
          <target state="translated">BCP 47 also allows for extensions, each consisting of a single digit or letter (other than &lt;code&gt;&quot;x&quot;&lt;/code&gt; ) and one or more two- to eight-letter or digit tags, all separated by hyphens. JavaScript internationalization functions use the &lt;code&gt;&quot;u&quot;&lt;/code&gt; (Unicode) extension, which can be used to request additional customization of &lt;a href=&quot;intl/collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;intl/numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;, or &lt;a href=&quot;intl/datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; objects. Examples:</target>
        </trans-unit>
        <trans-unit id="e6a4665f91bc71a6040ede9f0b9a35ce77ce0584" translate="yes" xml:space="preserve">
          <source>BCP 47 also allows for extensions. JavaScript internationalization functions use the &lt;code&gt;&quot;u&quot;&lt;/code&gt; (Unicode) extension, which can be used to request additional customization of &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; objects. Examples:</source>
          <target state="translated">BCP 47では、拡張も可能です。JavaScript国際化関数は &lt;code&gt;&quot;u&quot;&lt;/code&gt; （Unicode）拡張機能を使用します。これは、&lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt;オブジェクトの追加のカスタマイズを要求するために使用できます。例：</target>
        </trans-unit>
        <trans-unit id="ce1d3d04df88b03c0902b03fc277abd7509b89f7" translate="yes" xml:space="preserve">
          <source>BMP characters, in UTF-16, use a single code unit:</source>
          <target state="translated">UTF-16 の BMP キ ャ ラ ク タ は、 1 つの コ ー ド 単位を使用 し ます。</target>
        </trans-unit>
        <trans-unit id="14f79f39f0a63aa933f5da5de18563f76130fdb0" translate="yes" xml:space="preserve">
          <source>Babel can handle Custom Error Class methods, but only when they are declared with &lt;a href=&quot;object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;. Otherwise, Babel and other transpilers will not correctly handle the following code without &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;additional configuration&lt;/a&gt;.</source>
          <target state="translated">Babelはカスタムエラークラスメソッドを処理できますが、それらは&lt;a href=&quot;object/defineproperty&quot;&gt;Object.defineProperty（）で&lt;/a&gt;宣言されている場合に限られます。そうしないと、Babelと他のトランスパイラーは、&lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;追加の構成&lt;/a&gt;なしに次のコードを正しく処理しません。</target>
        </trans-unit>
        <trans-unit id="34a0c4a7da2073aae9dc11efe23ad6817bc43ca9" translate="yes" xml:space="preserve">
          <source>Backward compatibility can be ensured using attribute &lt;code&gt;nomodule&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">Backward compatibility can be ensured using attribute &lt;code&gt;nomodule&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;/a&gt; tag.</target>
        </trans-unit>
        <trans-unit id="8c1d2b7474b3062f0921e1c8062aee5ea36a9a24" translate="yes" xml:space="preserve">
          <source>Backward compatibility: In historic versions (like JavaScript 1.2) the &lt;code&gt;charCodeAt()&lt;/code&gt; method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.</source>
          <target state="translated">下位互換性：過去のバージョン（JavaScript 1.2など）では、 &lt;code&gt;charCodeAt()&lt;/code&gt; メソッドは、指定されたインデックスにある文字のISO-Latin-1コードセット値を示す数値を返します。ISO-Latin-1コードセットの範囲は0〜255です。最初の0〜127は、ASCII文字セットの直接一致です。</target>
        </trans-unit>
        <trans-unit id="acf9d65267d783baf67f1e532c25a3c9280dc0e0" translate="yes" xml:space="preserve">
          <source>Backward compatibility: In historic versions (like JavaScript 1.2) the &lt;code&gt;charCodeAt()&lt;/code&gt; method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. The first &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;127&lt;/code&gt; are a direct match of the ASCII character set.</source>
          <target state="translated">Backward compatibility: In historic versions (like JavaScript 1.2) the &lt;code&gt;charCodeAt()&lt;/code&gt; method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; . The first &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;127&lt;/code&gt; are a direct match of the ASCII character set.</target>
        </trans-unit>
        <trans-unit id="21d14d590046bace542231b735e58a3935f07bd1" translate="yes" xml:space="preserve">
          <source>Bad code with &lt;code&gt;eval()&lt;/code&gt;:</source>
          <target state="translated">Bad code with &lt;code&gt;eval()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4503df1131ba4201009636d74c2ac16a6cb58b3a" translate="yes" xml:space="preserve">
          <source>Bad code with eval:</source>
          <target state="translated">eval でのコードが間違っています。</target>
        </trans-unit>
        <trans-unit id="1ddbaaa28a35cb31e8f654cd17ff8f5babeaec2b" translate="yes" xml:space="preserve">
          <source>Bad keywords</source>
          <target state="translated">悪いキーワード</target>
        </trans-unit>
        <trans-unit id="cb778240eb1a8d5a5b8d65d21154595b3c8f0201" translate="yes" xml:space="preserve">
          <source>Bad octal</source>
          <target state="translated">バッドオクタル</target>
        </trans-unit>
        <trans-unit id="c3938ec2fcbf136263fe632f93c19fa52f055a88" translate="yes" xml:space="preserve">
          <source>Bad radix</source>
          <target state="translated">悪い基数</target>
        </trans-unit>
        <trans-unit id="52ef861c5150691f8f54cf9fda204d94d1f25438" translate="yes" xml:space="preserve">
          <source>Bad regexp flag</source>
          <target state="translated">不正な正規表現フラグ</target>
        </trans-unit>
        <trans-unit id="56c45ab05316e25c53faf5dfe1d3443f60ccab8a" translate="yes" xml:space="preserve">
          <source>Bad return or yield</source>
          <target state="translated">戻りが悪かったり、利回りが悪かったり</target>
        </trans-unit>
        <trans-unit id="a598b79d487db8f6e5350ab4e06367a72ce91665" translate="yes" xml:space="preserve">
          <source>Base 10 logarithm of E, approximately 0.434.</source>
          <target state="translated">Eのベース10対数、約0.434。</target>
        </trans-unit>
        <trans-unit id="90d513cda2433f2c16588aab1e2d0e868d46a7e3" translate="yes" xml:space="preserve">
          <source>Base 2 logarithm of E, approximately 1.443.</source>
          <target state="translated">Eの基底2対数、約1.443。</target>
        </trans-unit>
        <trans-unit id="7e65305b3de5a607a44d39b5b89d6bcecf695442" translate="yes" xml:space="preserve">
          <source>Base-10 logarithm of &lt;code&gt;E&lt;/code&gt;; approximately &lt;code&gt;0.434&lt;/code&gt;.</source>
          <target state="translated">Base-10 logarithm of &lt;code&gt;E&lt;/code&gt; ; approximately &lt;code&gt;0.434&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54ef76ef210fba93e149b9c0d3d3ea9bd7a633e5" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;E&lt;/code&gt;; approximately &lt;code&gt;1.443&lt;/code&gt;.</source>
          <target state="translated">Base-2 logarithm of &lt;code&gt;E&lt;/code&gt; ; approximately &lt;code&gt;1.443&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec7bef0e28378298bb0f60a8456b619c42be767e" translate="yes" xml:space="preserve">
          <source>Base62x</source>
          <target state="translated">Base62x</target>
        </trans-unit>
        <trans-unit id="93a7282c9864a1028a984aa6cbbb2ec6b5aa16d3" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-7.1.1.1&quot;&gt;rfc7231&lt;/a&gt; and modified according to &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-date.prototype.toutcstring&quot;&gt;ecma-262 toUTCString&lt;/a&gt;, it can have negative values in the &lt;a href=&quot;https://tc39.es/ecma262/#sec-date.prototype.toutcstring&quot;&gt;2021 version&lt;/a&gt;</source>
          <target state="translated">Based on &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-7.1.1.1&quot;&gt;rfc7231&lt;/a&gt; and modified according to &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-date.prototype.toutcstring&quot;&gt;ecma-262 toUTCString&lt;/a&gt;, it can have negative values in the &lt;a href=&quot;https://tc39.es/ecma262/#sec-date.prototype.toutcstring&quot;&gt;2021 version&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="d3171daff0fd5c1a55e8e273e630be925b5dab7f" translate="yes" xml:space="preserve">
          <source>Basic assignment</source>
          <target state="translated">基本的な課題</target>
        </trans-unit>
        <trans-unit id="385f92dd7e327ad7e274a02d06c99636307445f5" translate="yes" xml:space="preserve">
          <source>Basic const usage</source>
          <target state="translated">基本的な定数の使い方</target>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="4c8d5fdc5db9950cf7bea592d196bad4f803b3fb" translate="yes" xml:space="preserve">
          <source>Basic examples</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="603a17103ca6f4689a7f39d7753cccdc316ac985" translate="yes" xml:space="preserve">
          <source>Basic keywords and general expressions in JavaScript.</source>
          <target state="translated">JavaScriptの基本的なキーワードと一般的な表現</target>
        </trans-unit>
        <trans-unit id="48e2b3aff207a2929af920ad2047a4854ec8d687" translate="yes" xml:space="preserve">
          <source>Basic support</source>
          <target state="translated">基本的なサポート</target>
        </trans-unit>
        <trans-unit id="953657b3d60232a538f74887fa8b6a3c3c1d63ab" translate="yes" xml:space="preserve">
          <source>Basic syntax</source>
          <target state="translated">基本構文</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="d0cb1bfda35a10398f80e9a6a90f2d5ba29df508" translate="yes" xml:space="preserve">
          <source>Basic variable assignment</source>
          <target state="translated">基本的な変数の代入</target>
        </trans-unit>
        <trans-unit id="f0190e01f6433ac19adccb460422e2fa412fec44" translate="yes" xml:space="preserve">
          <source>Be aware of, also, that using Object.entries() on an object created via Object.create() will result in an empty array being returned.</source>
          <target state="translated">また、Object.create()で作成されたオブジェクトに対して Object.entry()を使用すると、空の配列が返されることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="97c266c8bd468b1c3cd55d582d8503a21e064806" translate="yes" xml:space="preserve">
          <source>Be aware that a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; will be thrown if a trailing comma is used on the left-hand side with a rest element:</source>
          <target state="translated">残りの要素と共に左側にコンマが使用されている場合、&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e02c3864b4961d4d706a2d9dc784c97800627ab4" translate="yes" xml:space="preserve">
          <source>Be aware that a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; will be thrown if a trailing comma is used on the right-hand side of a rest element:</source>
          <target state="translated">Be aware that a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; will be thrown if a trailing comma is used on the right-hand side of a rest element:</target>
        </trans-unit>
        <trans-unit id="dc9bbd3411cedcf90a22d35246e2dd08020ba70c" translate="yes" xml:space="preserve">
          <source>Be careful when using the &lt;code&gt;in&lt;/code&gt; operator to search in &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;in&lt;/code&gt; operator checks the index number, not the value at that index.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子を使用して&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクトを検索するときは注意してください。オペレータは、インデックス番号ではなく、そのインデックスの値をチェックします。 &lt;code&gt;in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04bf3c3bb0512624aeb7e2950aaef79621519c1b" translate="yes" xml:space="preserve">
          <source>Be mindful of the order:</source>
          <target state="translated">順番に気をつけましょう。</target>
        </trans-unit>
        <trans-unit id="17b155441a7c080cfc06afe199d93e49f39490b1" translate="yes" xml:space="preserve">
          <source>Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze the &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; upfront, specify all options explicitly, or point to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze the &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; upfront, specify all options explicitly, or point to &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; with &lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create(null)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="48d4529f5c08d6e05c06f2a846ce44f96dd10e1b" translate="yes" xml:space="preserve">
          <source>Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze the &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; upfront, specify all options explicitly, or point to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの属性は必ずしも記述子自体のプロパティではないことに注意してください。継承されたプロパティも考慮されます。これらのデフォルトが確実に保持されるようにするには、&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; を事前に&lt;/a&gt;フリーズするか、すべてのオプションを明示的に指定するか、&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create(null)&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;をポイントします。</target>
        </trans-unit>
        <trans-unit id="a9c00375e350157c8ada33eaad97c26905f63efc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;E&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.E&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;E&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.E&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="0b82237b8ca287548c8c9d966231902587413854" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LN10&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LN10&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;LN10&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.LN10&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="74c299425352e96db9b847db61898b8bd8a3bbb7" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LN2&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LN2&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;LN2&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.LN2&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="b21307b05117fad93dfb591d1dc7fbf9248e5e7d" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LOG10E&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LOG10E&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;LOG10E&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.LOG10E&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="35a8bdd1c3ebf5931310584099a45bdb95dc7a00" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LOG2E&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LOG2E&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;LOG2E&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.LOG2E&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="28da257f917dc14a7461c78d28327d34af66855c" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">&lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; は&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; の&lt;/a&gt;静的プロパティであるため、作成した&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="077f4de5c3ea80491f5d9c680f34de3613201936" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MAX_VALUE&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">Because &lt;code&gt;MAX_VALUE&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; , rather than as a property of a &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; object you created.</target>
        </trans-unit>
        <trans-unit id="d0bd2fe13bef8111056df1f25f32475d70d3dd46" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MAX_VALUE&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created. Calling it on the object you created(rather than &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; itself), will result in &lt;strong&gt;undefined&lt;/strong&gt; value.</source>
          <target state="translated">&lt;code&gt;MAX_VALUE&lt;/code&gt; は&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; の&lt;/a&gt;静的プロパティであるため、作成した&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; として使用します。（&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;自体ではなく）作成したオブジェクトで呼び出すと、&lt;strong&gt;未定義の&lt;/strong&gt;値になります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f7668233da44d6b3d40245d7d5498724e4e43aab" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">&lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; は&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; の&lt;/a&gt;静的プロパティであるため、作成した&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="ddc83264c5614617d7120921ebe62621ba077b15" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MIN_VALUE&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MIN_VALUE&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; は&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; の&lt;/a&gt;静的プロパティであるため、作成した&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Number.MIN_VALUE&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="59e28bee002f1e71a28d51e2c1d9ebf64a4e0b72" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Math&lt;/code&gt; is not a constructor, &lt;code&gt;max()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt; (You always use it as &lt;code&gt;Math.max()&lt;/code&gt;, rather than as a method of an instanced &lt;code&gt;Math&lt;/code&gt; object).</source>
          <target state="translated">Because &lt;code&gt;Math&lt;/code&gt; is not a constructor, &lt;code&gt;max()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt; (You always use it as &lt;code&gt;Math.max()&lt;/code&gt; , rather than as a method of an instanced &lt;code&gt;Math&lt;/code&gt; object).</target>
        </trans-unit>
        <trans-unit id="2d446b3d7d27b21910d3a0b232b222b99cad1cf7" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">Because &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;, you always use it as &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; , rather than as a property of a &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; object you created.</target>
        </trans-unit>
        <trans-unit id="dc6003a808eb6b1e37755f0a59d5c4579d5512c5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;PI&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.PI&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;PI&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.PI&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="170df98252c4d129f7ddcfc182b168b1f8e3d185" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">Because &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;, you always use it as &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; , rather than as a property of a &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; object you created.</target>
        </trans-unit>
        <trans-unit id="c20ad6b99ef4e0c6cd5c7258b7e31dabeb8fb09b" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Reflect.defineProperty&lt;/code&gt; returns a Boolean success status, you can just use an &lt;code&gt;&lt;a href=&quot;../../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt; block here:</source>
          <target state="translated">Because &lt;code&gt;Reflect.defineProperty&lt;/code&gt; returns a Boolean success status, you can just use an &lt;code&gt;&lt;a href=&quot;../../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt; block here:</target>
        </trans-unit>
        <trans-unit id="ce3db7decf4d8bb989733ad671d3d4a23d7d324f" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;SQRT1_2&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.SQRT1_2&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;SQRT1_2&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.SQRT1_2&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="8eadbe8117d2da8fddf518944fb3798a13a205fc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;SQRT2&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.SQRT2&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;SQRT2&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的プロパティであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのプロパティとしてではなく、常に &lt;code&gt;Math.SQRT2&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="da0573ddff08ba142b239d6699ca38a32055fb53" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;abs()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.abs()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;abs()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.abs()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="37e61cbad7672ad9ad2a476a1d4818ce03c60692" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;acos()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.acos()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">ので &lt;code&gt;acos()&lt;/code&gt; の静的メソッドである &lt;code&gt;Math&lt;/code&gt; 、あなたはいつものようにそれを使用する &lt;code&gt;Math.acos()&lt;/code&gt; ではなく、方法として、 &lt;code&gt;Math&lt;/code&gt; 、作成したオブジェクト（ &lt;code&gt;Math&lt;/code&gt; コンストラクタではありません）。</target>
        </trans-unit>
        <trans-unit id="e20ec90111527afee6c1b5758ff6c8166867c76d" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;acosh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.acosh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is no constructor).</source>
          <target state="translated">&lt;code&gt;acosh()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.acosh()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="c42515ecc3b7607915622996be58b945e58008c5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;asin()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.asin()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;asin()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.asin()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="1ad7904f3ecae86089f72ff0a3814609d377719a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;asinh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.asinh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;asinh()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.asinh()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="9e875c549d11bc970b0f1afdcf76ded5ef1eac90" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;atan()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.atan()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;atan()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.atan()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="9b8b9b1909763a487ac98201cce52fefdc1934b5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;atan2()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.atan2()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;atan2()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.atan2()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="4edbcd2c6fdb404e5be6e4271ec17592b8ea3453" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;atanh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.atanh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;atanh()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.atanh()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="c39bc6d4aaea62511e5e16c760ed8a7cd2057282" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;cbrt()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.cbrt()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;cbrt()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.cbrt()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="7536b1cc9a985c4bb5f8409e31dcaf4731519d46" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;ceil()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.ceil()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;ceil()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.ceil()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="b5199a2af06df91de5b4bcfdf9fbd3a86fe3452f" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;cos()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.cos()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;cos()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.cos()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="ae64a33697739a9c10e13dcd75bd1d4c6f28d9d9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;cosh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.cosh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;cosh()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.cosh()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="60fe84081b0a915785751f48959e6fc0527d23da" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;exp()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.exp()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;exp()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.exp()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="492133ebabf3cb8131ecd1375ae5a01bc20e3ba9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;expm1()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.expm1()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;expm1()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.expm1()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="e762507e1c13ded9a98083683b7484be5bb493e4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;floor()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.floor()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;floor()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.floor()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="d44790cd68c5a20a416530969112fe05b3fed5a0" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fromCharCode()&lt;/code&gt; is a static method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;String.fromCharCode()&lt;/code&gt;, rather than as a method of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">&lt;code&gt;fromCharCode()&lt;/code&gt; は&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; の&lt;/a&gt;静的メソッドであるため、作成した&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトのメソッドとしてではなく、常に &lt;code&gt;String.fromCharCode()&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="cbf818ffb66ea3de63f350cd39e18544f1de4b2a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fromCharCode()&lt;/code&gt; only works with 16-bit values (same as the &lt;code&gt;\u&lt;/code&gt; escape sequence), a surrogate pair is required in order to return a supplementary character. For example, both &lt;code&gt;String.fromCharCode(0xD83C, 0xDF03)&lt;/code&gt; and &lt;code&gt;\uD83C\uDF03&lt;/code&gt; return code point &lt;code&gt;U+1F303&lt;/code&gt; &quot;Night with Stars&quot;.</source>
          <target state="translated">Because &lt;code&gt;fromCharCode()&lt;/code&gt; only works with 16-bit values (same as the &lt;code&gt;\u&lt;/code&gt; escape sequence), a surrogate pair is required in order to return a supplementary character. For example, both &lt;code&gt;String.fromCharCode(0xD83C, 0xDF03)&lt;/code&gt; and &lt;code&gt;\uD83C\uDF03&lt;/code&gt; return code point &lt;code&gt;U+1F303&lt;/code&gt; &quot;Night with Stars&quot;.</target>
        </trans-unit>
        <trans-unit id="d013ee9d50f6892ef3976a970b60a910ebe9b4c4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fromCodePoint()&lt;/code&gt; is a static method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;String.fromCodePoint()&lt;/code&gt;, rather than as a method of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">&lt;code&gt;fromCodePoint()&lt;/code&gt; は&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; の&lt;/a&gt;静的メソッドであるため、作成した&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;オブジェクトのメソッドとしてではなく、常に &lt;code&gt;String.fromCodePoint()&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="aad7bfed48215b0f742476bab0b572a56f15eaf5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fromCodePoint()&lt;/code&gt; is a static method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, you must call it as &lt;code&gt;String.fromCodePoint()&lt;/code&gt;, rather than as a method of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="translated">Because &lt;code&gt;fromCodePoint()&lt;/code&gt; is a static method of &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;, you must call it as &lt;code&gt;String.fromCodePoint()&lt;/code&gt; , rather than as a method of a &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; object you created.</target>
        </trans-unit>
        <trans-unit id="ad160d0aa4d77d60deec7ba899aff53d3317dbc8" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fround()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.fround()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;fround()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.fround()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="53268151587d2de8c8d329793e7fa99990cf27ce" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;hypot()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.hypot()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">ので &lt;code&gt;hypot()&lt;/code&gt; の静的メソッドである &lt;code&gt;Math&lt;/code&gt; 、あなたはいつものようにそれを使用する &lt;code&gt;Math.hypot()&lt;/code&gt; 、ではなくする方法として、 &lt;code&gt;Math&lt;/code&gt; 、作成したオブジェクト（ &lt;code&gt;Math&lt;/code&gt; コンストラクタではありません）。</target>
        </trans-unit>
        <trans-unit id="ee560aad8583510bf57e46a82e9d61aa9eaef074" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;imul()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.imul()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">Because &lt;code&gt;imul()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt; , you always use it as &lt;code&gt;Math.imul()&lt;/code&gt; , rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created ( &lt;code&gt;Math&lt;/code&gt; is not a constructor).</target>
        </trans-unit>
        <trans-unit id="ca090e636d85d8126929e1be48b1bedb97a25f21" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;log()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.log()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="06ff84d1cfb60efb814067d964a1badf08b59ca8" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log10()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log10()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">ので &lt;code&gt;log10()&lt;/code&gt; の静的メソッドである &lt;code&gt;Math&lt;/code&gt; 、あなたはいつものようにそれを使用する &lt;code&gt;Math.log10()&lt;/code&gt; 、ではなくする方法として、 &lt;code&gt;Math&lt;/code&gt; 、作成したオブジェクト（ &lt;code&gt;Math&lt;/code&gt; コンストラクタではありません）。</target>
        </trans-unit>
        <trans-unit id="d4504da10c3b187be135cf0b93ebfb704290c6dd" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log1p()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log1p()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;log1p()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.log1p()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="f1c683e74b27b4bb60facc44c92d320f9cacd257" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log2()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log2()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;log2()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.log2()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="11fbf5fcd5f937dc77c18cf2f7ab47a9611d3751" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;max()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.max()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;max()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.max()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="5a8071e18e448e739f60e98d44548d36040ed2f9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;min()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.min()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;min()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.min()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="4e9a349771578ae630f5b9ceca8e29d7d1f4ca26" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;now()&lt;/code&gt; is a static method of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Date.now()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;now()&lt;/code&gt; は&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; の&lt;/a&gt;静的メソッドであるため、常に &lt;code&gt;Date.now()&lt;/code&gt; として使用します。</target>
        </trans-unit>
        <trans-unit id="8b49ed67cd88286bc6e1698ad754539ba1a1a87c" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;parse()&lt;/code&gt; is a static method of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, it is called as &lt;code&gt;Date.parse()&lt;/code&gt; rather than as a method of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;parse()&lt;/code&gt; は&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; の&lt;/a&gt;静的メソッドであるため、&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;インスタンスのメソッドとしてではなく、 &lt;code&gt;Date.parse()&lt;/code&gt; として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8a80d77f1956af42d7d1e58a2096c01b4786f98a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;pow()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.pow()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; has no constructor).</source>
          <target state="translated">&lt;code&gt;pow()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.pow()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; にはコンストラクターがありません）。</target>
        </trans-unit>
        <trans-unit id="173e452c64721d1ef540c6145ebf7e4c90e4c6e4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;pow()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.pow()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; has no constructor). If the base is negative and the exponent is not an integer, the result is NaN.</source>
          <target state="translated">Because &lt;code&gt;pow()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt; , you always use it as &lt;code&gt;Math.pow()&lt;/code&gt; , rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created ( &lt;code&gt;Math&lt;/code&gt; has no constructor). If the base is negative and the exponent is not an integer, the result is NaN.</target>
        </trans-unit>
        <trans-unit id="de9f67058c4fe9ab68863945bdf1f1f9fd637f13" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;round()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.round()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; has no constructor).</source>
          <target state="translated">&lt;code&gt;round()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.round()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; にはコンストラクターがありません）。</target>
        </trans-unit>
        <trans-unit id="17c60362cae5bfd6dcbd5b5c30746edb43c3f633" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sign()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sign()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;sign()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.sign()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="a98e1606f6da2fede2d7644872da386e2f311bbb" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sin()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sin()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;sin()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.sin()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="d397c84b8315649a9cf478375d3f01829dad94d0" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sinh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sinh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;sinh()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.sinh()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="372e97a5361f71355eab20c306344aad5abea7fb" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sqrt()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sqrt()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;sqrt()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.sqrt()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="b2bffdc67853a6649c3a6b0f0e3fba320e583173" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;tan()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.tan()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;tan()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.tan()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="30244635651b5dba22a6f60b570c933ced1b0c92" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;tanh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.tanh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;tanh()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.tanh()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="d3eef51281b9d3788e8242b114a41ca29e195be9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;trunc()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.trunc()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="translated">&lt;code&gt;trunc()&lt;/code&gt; は &lt;code&gt;Math&lt;/code&gt; の静的メソッドであるため、作成した &lt;code&gt;Math&lt;/code&gt; オブジェクトのメソッドとしてではなく、常に &lt;code&gt;Math.trunc()&lt;/code&gt; として使用します（ &lt;code&gt;Math&lt;/code&gt; はコンストラクターではありません）。</target>
        </trans-unit>
        <trans-unit id="53aa7796acbc86b1404a9e2d8c7392875eb591a9" translate="yes" xml:space="preserve">
          <source>Because JavaScript does not currently include standard support for 64-bit integer values, &lt;code&gt;DataView&lt;/code&gt; does not offer native 64-bit operations. As a workaround, you could implement your own &lt;code&gt;getUint64()&lt;/code&gt; function to obtain a value with precision up to &lt;a href=&quot;number/max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt;, which could suffice for certain cases.</source>
          <target state="translated">Because JavaScript does not currently include standard support for 64-bit integer values, &lt;code&gt;DataView&lt;/code&gt; does not offer native 64-bit operations. As a workaround, you could implement your own &lt;code&gt;getUint64()&lt;/code&gt; function to obtain a value with precision up to &lt;a href=&quot;number/max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt;, which could suffice for certain cases.</target>
        </trans-unit>
        <trans-unit id="b5ce40564816fc1649df79ceab1927c7ff224088" translate="yes" xml:space="preserve">
          <source>Because JavaScript does not currently include standard support for 64-bit integer values, &lt;code&gt;DataView&lt;/code&gt; does not offer native 64-bit operations. As a workaround, you could implement your own getUint64() method to obtain a value with precision up to &lt;a href=&quot;number/max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt;, which could suffice for certain cases.</source>
          <target state="translated">JavaScriptは現在64ビット整数値の標準サポートを含んでいないため、 &lt;code&gt;DataView&lt;/code&gt; はネイティブ64ビット操作を提供していません。回避策として、独自のgetUint64（）メソッドを実装して、特定の場合には十分な&lt;a href=&quot;number/max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt;までの精度で値を取得できます。</target>
        </trans-unit>
        <trans-unit id="69c444e974b0711efc78517b5a1232f2bfd599d1" translate="yes" xml:space="preserve">
          <source>Because each value in the &lt;code&gt;Set&lt;/code&gt; has to be unique, the value equality will be checked. In an earlier version of ECMAScript specification, this was not based on the same algorithm as the one used in the &lt;code&gt;===&lt;/code&gt; operator. Specifically, for &lt;code&gt;Set&lt;/code&gt;s, &lt;code&gt;+0&lt;/code&gt; (which is strictly equal to &lt;code&gt;-0&lt;/code&gt;) and &lt;code&gt;-0&lt;/code&gt; were different values. However, this was changed in the ECMAScript 2015 specification. See &lt;em&gt;&quot;Key equality for -0 and 0&quot;&lt;/em&gt; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; table for details.</source>
          <target state="translated">Because each value in the &lt;code&gt;Set&lt;/code&gt; has to be unique, the value equality will be checked. In an earlier version of ECMAScript specification, this was not based on the same algorithm as the one used in the &lt;code&gt;===&lt;/code&gt; operator. Specifically, for &lt;code&gt;Set&lt;/code&gt; s, &lt;code&gt;+0&lt;/code&gt; (which is strictly equal to &lt;code&gt;-0&lt;/code&gt; ) and &lt;code&gt;-0&lt;/code&gt; were different values. However, this was changed in the ECMAScript 2015 specification. See &lt;em&gt;&quot;Key equality for -0 and 0&quot;&lt;/em&gt; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; table for details.</target>
        </trans-unit>
        <trans-unit id="c20a9cfdd69df242b88e730600c7db46b22fe86f" translate="yes" xml:space="preserve">
          <source>Because each value in the Set has to be unique, the value equality will be checked. In an earlier version of ECMAScript specification, this was not based on the same algorithm as the one used in the === operator. Specifically, for &lt;code&gt;Set&lt;/code&gt;s, &lt;code&gt;+0&lt;/code&gt; (which is strictly equal to &lt;code&gt;-0&lt;/code&gt;) and &lt;code&gt;-0&lt;/code&gt; were different values. However, this was changed in the ECMAScript 2015 specification. See &quot;Value equality for -0 and 0&quot; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; table for details.</source>
          <target state="translated">セット内の各値は一意である必要があるため、値の等価性がチェックされます。 ECMAScript仕様の以前のバージョンでは、これは===演算子で使用されているアルゴリズムと同じアルゴリズムに基づいていませんでした。具体的には、 &lt;code&gt;Set&lt;/code&gt; の場合、 &lt;code&gt;+0&lt;/code&gt; （厳密には &lt;code&gt;-0&lt;/code&gt; と等しい）と &lt;code&gt;-0&lt;/code&gt; は異なる値でした。ただし、これはECMAScript 2015仕様で変更されました。詳細については、&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザ互換性&lt;/a&gt;テーブルの「-0と0の値の等価性」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d1fded9ba75595ca39290a957e0bae450c1108c6" translate="yes" xml:space="preserve">
          <source>Because of references being weak, &lt;code&gt;WeakMap&lt;/code&gt; keys are not enumerable (i.e. there is no method giving you a list of the keys). If they were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照が弱いため、 &lt;code&gt;WeakMap&lt;/code&gt; キーは列挙できません（つまり、キーのリストを提供するメソッドはありません）。もしそうなら、リストはガベージコレクションの状態に依存し、非決定論を導入します。キーのリストが必要な場合は、&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="eb652a847f513489449cba9cb7f59972b1464b30" translate="yes" xml:space="preserve">
          <source>Because of the variances in parsing of date strings, it is recommended to always manually parse strings as results are inconsistent, especially across different ECMAScript implementations where strings like &lt;code&gt;&quot;2015-10-12 12:00:00&quot;&lt;/code&gt; may be parsed to as &lt;code&gt;NaN&lt;/code&gt;, UTC or local timezone.</source>
          <target state="translated">日付文字列の解析には差異があるため、特に &lt;code&gt;&quot;2015-10-12 12:00:00&quot;&lt;/code&gt; ような文字列が &lt;code&gt;NaN&lt;/code&gt; として解析される可能性があるさまざまなECMAScript実装全体で結果に一貫性がないため、常に手動で文字列を解析することをお勧めします。 UTCまたはローカルタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="db1f1a95df83f9cfc159023a1630ca2b35b2c638" translate="yes" xml:space="preserve">
          <source>Because of these three differences, failure to declare variables will very likely lead to unexpected results. Thus &lt;strong&gt;it is recommended to always declare variables, regardless of whether they are in a function or global scope.&lt;/strong&gt; And in ECMAScript 5 &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, assigning to an undeclared variable throws an error.</source>
          <target state="translated">これら3つの違いにより、変数の宣言に失敗すると、予期しない結果が生じる可能性が高くなります。したがって&lt;strong&gt;、変数が関数スコープにあるかグローバルスコープにあるかに関係なく、常に変数を宣言することをお勧めします。&lt;/strong&gt;また、ECMAScript 5の&lt;a href=&quot;../strict_mode&quot;&gt;厳密モード&lt;/a&gt;では、宣言されていない変数に割り当てるとエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="e0e35cb376ac0f59af1af4e600f13bf7c337eb9e" translate="yes" xml:space="preserve">
          <source>Because of this, in order to examine (or reproduce) the full character for individual character values of &lt;code&gt;65536&lt;/code&gt; or greater, for such characters, it is necessary to retrieve not only &lt;code&gt;charCodeAt(&lt;var&gt;i&lt;/var&gt;)&lt;/code&gt;, but also &lt;code&gt;charCodeAt(&lt;var&gt;i&lt;/var&gt;+1)&lt;/code&gt; (as if manipulating a string with two letters), or to use &lt;code&gt;codePointAt(&lt;var&gt;i&lt;/var&gt;)&lt;/code&gt; instead. See examples 2 and 3 (below).</source>
          <target state="translated">Because of this, in order to examine (or reproduce) the full character for individual character values of &lt;code&gt;65536&lt;/code&gt; or greater, for such characters, it is necessary to retrieve not only &lt;code&gt;charCodeAt(&lt;var&gt;i&lt;/var&gt;)&lt;/code&gt; , but also &lt;code&gt;charCodeAt(&lt;var&gt;i&lt;/var&gt;+1)&lt;/code&gt; (as if manipulating a string with two letters), or to use &lt;code&gt;codePointAt(&lt;var&gt;i&lt;/var&gt;)&lt;/code&gt; instead. See examples 2 and 3 (below).</target>
        </trans-unit>
        <trans-unit id="b4dc9e30827c38b33a9bd89036ccdc332bcc2662" translate="yes" xml:space="preserve">
          <source>Because older browsers are generally also slower browsers, it is far more critical than most people recognize to create performance polyfills to make the browsing experience in outdated browsers slightly less horrible.</source>
          <target state="translated">古いブラウザは一般的に遅いブラウザでもあるので、古いブラウザでのブラウジング体験を少しでも恐ろしくなくするために、パフォーマンスポリフィルを作成することは、多くの人が認識しているよりもはるかに重要なことです。</target>
        </trans-unit>
        <trans-unit id="4bb7ef7b8fd64ccc09bf1a82f2ef249678defa0d" translate="yes" xml:space="preserve">
          <source>Because some numbers include the &lt;code&gt;e&lt;/code&gt; character in their string representation (e.g. &lt;code&gt;6.022e23&lt;/code&gt;), using &lt;code&gt;parseInt&lt;/code&gt; to truncate numeric values will produce unexpected results when used on very large or very small numbers. &lt;code&gt;parseInt&lt;/code&gt; should not be used as a substitute for &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一部の数値には文字列表現に &lt;code&gt;e&lt;/code&gt; 文字が含まれているため（例： &lt;code&gt;6.022e23&lt;/code&gt; ）、 &lt;code&gt;parseInt&lt;/code&gt; を使用して数値を切り捨てると、非常に大きな数値または非常に小さな数値で使用すると予期しない結果が生じます。 &lt;code&gt;parseInt&lt;/code&gt; は、&lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; の&lt;/a&gt;代替として使用しないでください。</target>
        </trans-unit>
        <trans-unit id="19a4700dffa9ea6423afda27d38271425bf4ded4" translate="yes" xml:space="preserve">
          <source>Because some numbers use the &lt;code&gt;e&lt;/code&gt; character in their string representation (e.g. &lt;code&gt;6.022e23&lt;/code&gt; for 6.022 &amp;times; 10&lt;sup&gt;23&lt;/sup&gt;), using &lt;code&gt;parseInt&lt;/code&gt; to truncate numbers will produce unexpected results when used on very large or very small numbers. &lt;code&gt;parseInt&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be used as a substitute for &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Because some numbers use the &lt;code&gt;e&lt;/code&gt; character in their string representation (e.g. &lt;code&gt;6.022e23&lt;/code&gt; for 6.022 &amp;times; 10&lt;sup&gt;23&lt;/sup&gt;), using &lt;code&gt;parseInt&lt;/code&gt; to truncate numbers will produce unexpected results when used on very large or very small numbers. &lt;code&gt;parseInt&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be used as a substitute for &lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5d20de304942bae9b22b7814302f926fb3ecafa2" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;Math.tan()&lt;/code&gt; function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.</source>
          <target state="translated">ため &lt;code&gt;Math.tan()&lt;/code&gt; 関数はラジアンを受け入れ、それは度付き作業にしばしば容易であり、次の関数は、ラジアンに変換し、それを、度の値を受け取り、タンジェントを返します。</target>
        </trans-unit>
        <trans-unit id="5b8dc76b38cfe7796676c8492b5362ea45614e08" translate="yes" xml:space="preserve">
          <source>Because the handler is empty, this proxy behaves just like the original target:</source>
          <target state="translated">ハンドラは空なので、このプロキシは元のターゲットと同じように振る舞います。</target>
        </trans-unit>
        <trans-unit id="1d2baf8a9799699735ddc9e7f897328da1c9244e" translate="yes" xml:space="preserve">
          <source>Because the order of iteration is implementation-dependent, iterating over an array may not visit elements in a consistent order. Therefore, it is better to use a &lt;a href=&quot;for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop with a numeric index (or &lt;a href=&quot;../global_objects/array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; loop) when iterating over arrays where the order of access is important.</source>
          <target state="translated">反復の順序は実装に依存するため、配列を反復処理しても、要素に一貫した順序でアクセスできない場合があります。したがって、アクセスの順序が重要な配列を反復処理するときは、数値インデックスを備えた&lt;a href=&quot;for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ループ（または&lt;a href=&quot;../global_objects/array/foreach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;ループ）を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4281d9845fae6b6d0dce14f1297972fc4b1d4319" translate="yes" xml:space="preserve">
          <source>Because there is no &quot;+&quot; operator to concatenate the string, JavaScript expects the argument for the &lt;code&gt;log&lt;/code&gt; function to be just &lt;code&gt;&quot;PI: &quot;&lt;/code&gt;. In that case, it should be terminated by a closing parenthesis.</source>
          <target state="translated">文字列を連結する「+」演算子がないため、JavaScriptは &lt;code&gt;log&lt;/code&gt; 関数の引数が単なる &lt;code&gt;&quot;PI: &quot;&lt;/code&gt; 想定しています。その場合は、閉じ括弧で終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="4fa36743099fb41e622047846221819607dcb74a" translate="yes" xml:space="preserve">
          <source>Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="603f4e4965885c0d0b4786f6777af45a20fc2100" translate="yes" xml:space="preserve">
          <source>Because variable declarations (and declarations in general) are processed before any code is executed, declaring a variable anywhere in the code is equivalent to declaring it at the top. This also means that a variable can appear to be used before it's declared. This behavior is called &quot;</source>
          <target state="translated">変数の宣言(および一般的な宣言)はコードが実行される前に処理されるので、コードのどこかで変数を宣言することは、変数を先頭で宣言することと同じことになります。これは、変数が宣言される前に使用されているように見えることも意味します。この動作を&quot;</target>
        </trans-unit>
        <trans-unit id="dc95003644b4ff30716b50875dcd9e7875b16289" translate="yes" xml:space="preserve">
          <source>Because variable declarations (and declarations in general) are processed before any code is executed, declaring a variable anywhere in the code is equivalent to declaring it at the top. This also means that a variable can appear to be used before it's declared. This behavior is called &quot;hoisting&quot;, as it appears that the variable declaration is moved to the top of the function or global code.</source>
          <target state="translated">変数の宣言(および一般的な宣言)はコードが実行される前に処理されるので、コードのどこかで変数を宣言することは、変数を先頭で宣言することと同じことになります。これは、変数が宣言される前に使用されているように見えることも意味します。この動作は、変数宣言が関数やグローバルコードの先頭に移動したように見えることから、「ホイスト」と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="2abcf792e9e27d8dafb82479f92f8a86c66adb6f" translate="yes" xml:space="preserve">
          <source>Because we want to further transform the &lt;em&gt;result&lt;/em&gt; of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt; method. If we had tried to do this using the match without a function, the &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt; would have no effect.</source>
          <target state="translated">最後の置換が行われる前に、一致の&lt;em&gt;結果&lt;/em&gt;をさらに変換したいので、関数を使用する必要があります。これにより、&lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;メソッドの前に一致の評価が強制されます。関数を使用せずに一致を使用してこれを実行しようとした場合、&lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;は効果がありません。</target>
        </trans-unit>
        <trans-unit id="b6ae924cc0de1fac266b0475d2bc8a29c06258cf" translate="yes" xml:space="preserve">
          <source>Been formally correct it suffers from a number of issues related to floating point computations. Accurate result requires special handling of positive/negative, small/large arguments as it done e.g. in &lt;a href=&quot;https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/ieee754/dbl-64/s_asinh.c&quot;&gt;glibc&lt;/a&gt; or &lt;a href=&quot;http://git.savannah.gnu.org/cgit/gsl.git/tree/sys/invhyp.c&quot;&gt;GNU Scientific Library&lt;/a&gt;.</source>
          <target state="translated">正式に修正されているため、浮動小数点計算に関連する多くの問題に悩まされています。正確な結果を得るには、たとえば&lt;a href=&quot;https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/ieee754/dbl-64/s_asinh.c&quot;&gt;glibc&lt;/a&gt;や&lt;a href=&quot;http://git.savannah.gnu.org/cgit/gsl.git/tree/sys/invhyp.c&quot;&gt;GNU Scientific Library&lt;/a&gt;で行われるように、正/負、小さい/大きい引数の特別な処理が必要です。</target>
        </trans-unit>
        <trans-unit id="159644552db2acc7dd9b689cc5dc2eaa6ac55f74" translate="yes" xml:space="preserve">
          <source>Before ECMAScript 2015, &lt;code&gt;typeof&lt;/code&gt; was always guaranteed to return a string for any operand it was supplied with. Even with undeclared identifiers, &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;'undefined'&lt;/code&gt;. Using &lt;code&gt;typeof&lt;/code&gt; could never generate an error.</source>
          <target state="translated">ECMAScript 2015より前は、 &lt;code&gt;typeof&lt;/code&gt; は常に、提供されたオペランドの文字列を返すことが保証されていました。宣言されていない識別子でも、 &lt;code&gt;typeof&lt;/code&gt; は &lt;code&gt;'undefined'&lt;/code&gt; を返します。 &lt;code&gt;typeof&lt;/code&gt; を使用してもエラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="55091dd1c45efd77c4be5bc4d41fc309633f94a4" translate="yes" xml:space="preserve">
          <source>Before Edge 18, numbers are rounded to 15 decimal digits. For example, &lt;code&gt;(1000000000000005).toLocaleString('en-US')&lt;/code&gt; returns &lt;code&gt;&quot;1,000,000,000,000,010&quot;&lt;/code&gt;.</source>
          <target state="translated">Before Edge 18, numbers are rounded to 15 decimal digits. For example, &lt;code&gt;(1000000000000005).toLocaleString('en-US')&lt;/code&gt; returns &lt;code&gt;&quot;1,000,000,000,000,010&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8256a9242be184b84e484474da214718a6118e5a" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator&quot;&gt;the &lt;code&gt;Collator()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator&quot;&gt;the &lt;code&gt;Collator()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="962a2ad2b18607490c51c4d5b622a533c2c94ec9" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat&quot;&gt;the &lt;code&gt;DateTimeFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat&quot;&gt;the &lt;code&gt;DateTimeFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="2db5edee86ad1fa7add680ac3ed5c30cc5ad7de3" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat&quot;&gt;the &lt;code&gt;ListFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat&quot;&gt;the &lt;code&gt;ListFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="e3bb5b68af13f14fe777adc7b2edbfd32ea0cac7" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale&quot;&gt;the &lt;code&gt;Locale()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale&quot;&gt;the &lt;code&gt;Locale()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="d196043c4a8c8fdc06465fb5c3e4d6b429765af3" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat&quot;&gt;the &lt;code&gt;NumberFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat&quot;&gt;the &lt;code&gt;NumberFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="e77eae32ad4859d20aeefd5755ecfea676e18fc9" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules&quot;&gt;the &lt;code&gt;PluralRules()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules&quot;&gt;the &lt;code&gt;PluralRules()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="3d420e773551fa06a48acaa68ddd45ad37625769" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat&quot;&gt;the &lt;code&gt;RelativeTimeFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat&quot;&gt;the &lt;code&gt;RelativeTimeFormat()&lt;/code&gt; constructor&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="4847f861c63545ad43e69129f441b955f04ce81b" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. When other locales are specified, the &lt;code&gt;Intl&lt;/code&gt; APIs silently fall back to &lt;code&gt;en-US&lt;/code&gt;. To make full ICU (locale) data available for versions prior to 13, see &lt;a href=&quot;https://nodejs.org/docs/latest/api/intl.html#intl_options_for_building_node_js&quot;&gt;Node.js documentation on the &lt;code&gt;--with-intl&lt;/code&gt; option&lt;/a&gt; and how to provide the data.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. When other locales are specified, the &lt;code&gt;Intl&lt;/code&gt; APIs silently fall back to &lt;code&gt;en-US&lt;/code&gt; . To make full ICU (locale) data available for versions prior to 13, see &lt;a href=&quot;https://nodejs.org/docs/latest/api/intl.html#intl_options_for_building_node_js&quot;&gt;Node.js documentation on the &lt;code&gt;--with-intl&lt;/code&gt; option&lt;/a&gt; and how to provide the data.</target>
        </trans-unit>
        <trans-unit id="c3993bc53a1d1460ac1d88aa64eb530fe29dee19" translate="yes" xml:space="preserve">
          <source>Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. When other locales are specified, the function silently falls back to &lt;code&gt;en-US&lt;/code&gt;. To make full ICU (locale) data available for versions prior to 13, see &lt;a href=&quot;https://nodejs.org/docs/latest/api/intl.html#intl_options_for_building_node_js&quot;&gt;Node.js documentation on the &lt;code&gt;--with-intl&lt;/code&gt; option&lt;/a&gt; and how to provide the data.</source>
          <target state="translated">Before version 13.0.0, only the locale data for &lt;code&gt;en-US&lt;/code&gt; is available by default. When other locales are specified, the function silently falls back to &lt;code&gt;en-US&lt;/code&gt; . To make full ICU (locale) data available for versions prior to 13, see &lt;a href=&quot;https://nodejs.org/docs/latest/api/intl.html#intl_options_for_building_node_js&quot;&gt;Node.js documentation on the &lt;code&gt;--with-intl&lt;/code&gt; option&lt;/a&gt; and how to provide the data.</target>
        </trans-unit>
        <trans-unit id="d75a7b56c05bb5521d3f28fbe0024c97cf4e0458" translate="yes" xml:space="preserve">
          <source>Behavior of &lt;code&gt;Math.abs()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.abs()&lt;/code&gt; の動作</target>
        </trans-unit>
        <trans-unit id="030746620683a06e6082bbc1c67e2963a3b93e9c" translate="yes" xml:space="preserve">
          <source>Behavior of Math.abs()</source>
          <target state="translated">Math.abs()の挙動</target>
        </trans-unit>
        <trans-unit id="baa70661bdbd1c409645a470f04d8aa9be63099c" translate="yes" xml:space="preserve">
          <source>Below is an example of how to use &lt;code&gt;Object.create()&lt;/code&gt; to achieve classical inheritance. This is for a single inheritance, which is all that JavaScript supports.</source>
          <target state="translated">Below is an example of how to use &lt;code&gt;Object.create()&lt;/code&gt; to achieve classical inheritance. This is for a single inheritance, which is all that JavaScript supports.</target>
        </trans-unit>
        <trans-unit id="51f92d6f7fd65c8ad04ba8889f67557332d328c6" translate="yes" xml:space="preserve">
          <source>Below is an example of how to use &lt;code&gt;Object.create()&lt;/code&gt; to achieve classical inheritance. This is for single inheritance, which is all that JavaScript supports.</source>
          <target state="translated">以下は、 &lt;code&gt;Object.create()&lt;/code&gt; を使用して従来の継承を実現する方法の例です。これはJavaScriptがサポートするすべての単一継承用です。</target>
        </trans-unit>
        <trans-unit id="6cb1774d9020d13243cb4c0ad8b262714aec3bbb" translate="yes" xml:space="preserve">
          <source>Below, the third argument isn't provided, but &lt;code&gt;manyMoreArgs&lt;/code&gt; is still an array (albeit an empty one).</source>
          <target state="translated">Below, the third argument isn't provided, but &lt;code&gt;manyMoreArgs&lt;/code&gt; is still an array (albeit an empty one).</target>
        </trans-unit>
        <trans-unit id="c41b032a35727b00a30611f89e3948a0493d74fe" translate="yes" xml:space="preserve">
          <source>Below, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the &lt;a href=&quot;global_objects/error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, and has a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">以下に、JavaScriptによってスローされるエラーのリストを示します。これらのエラーはデバッグに役立ちますが、報告された問題がすぐに明確になるとは限りません。以下のページに、これらのエラーに関する詳細が記載されています。各エラーは、&lt;a href=&quot;global_objects/error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトに基づくオブジェクトであり、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;message&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf8202e0fab4410750ecb314be24a983994b26bd" translate="yes" xml:space="preserve">
          <source>Below... even though there is just one value, the last argument still gets put into an array.</source>
          <target state="translated">以下...値が1つしかないにもかかわらず、最後の引数は配列に入れられてしまいます。</target>
        </trans-unit>
        <trans-unit id="261185687d86dcc2558ac603bc22ba3f33059610" translate="yes" xml:space="preserve">
          <source>Below... the third argument wasn't provided, yet &quot;manyMoreArgs&quot; is still an array (although empty).</source>
          <target state="translated">以下...第3引数が提供されていないのに、&quot;manyMoreArgs &quot;はまだ配列になっています(空ですが)。</target>
        </trans-unit>
        <trans-unit id="20cd995d35d428b0741c03ebed037a0ac338a5c0" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;false&lt;/code&gt;, possible falsy expressions are: &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;&lt;code&gt;0&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;, the empty string (&lt;code&gt;&lt;code&gt;&lt;code&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;), and &lt;code&gt;&lt;code&gt;&lt;code&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;. If &lt;code&gt;condition&lt;/code&gt; is any of these, the result of the conditional expression will be &lt;code&gt;exprF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に加えて、考えられる偽の式は &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;code&gt;&lt;code&gt;0&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; 、空の文字列（ &lt;code&gt;&lt;code&gt;&lt;code&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; ）、および &lt;code&gt;&lt;code&gt;&lt;code&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; です。 &lt;code&gt;condition&lt;/code&gt; がこれらのいずれかである場合、条件式の結果は &lt;code&gt;exprF&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b309977549c7b35f0463b03147736866c045ba81" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;false&lt;/code&gt;, possible falsy expressions are: &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), and &lt;code&gt;undefined&lt;/code&gt;. If &lt;code&gt;&lt;var&gt;condition&lt;/var&gt;&lt;/code&gt; is any of these, the result of the conditional expression will be the result of executing the expression &lt;code&gt;exprIfFalse&lt;/code&gt;.</source>
          <target state="translated">Besides &lt;code&gt;false&lt;/code&gt; , possible falsy expressions are: &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;NaN&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , the empty string ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), and &lt;code&gt;undefined&lt;/code&gt; . If &lt;code&gt;&lt;var&gt;condition&lt;/var&gt;&lt;/code&gt; is any of these, the result of the conditional expression will be the result of executing the expression &lt;code&gt;exprIfFalse&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8523ec8a82ebe573bcf2ecdd81f9704e7581a58f" translate="yes" xml:space="preserve">
          <source>Besides generator objects, &lt;code&gt;yield*&lt;/code&gt; can also &lt;code&gt;yield&lt;/code&gt; other kinds of iterables (e.g., arrays, strings, or &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; objects).</source>
          <target state="translated">Besides generator objects, &lt;code&gt;yield*&lt;/code&gt; can also &lt;code&gt;yield&lt;/code&gt; other kinds of iterables (e.g., arrays, strings, or &lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; objects).</target>
        </trans-unit>
        <trans-unit id="1dd9d33fbffbae845ccc0b4876c531ee46de4cdc" translate="yes" xml:space="preserve">
          <source>Besides generator objects, &lt;code&gt;yield*&lt;/code&gt; can also &lt;code&gt;yield&lt;/code&gt; other kinds of iterables, e.g. arrays, strings or arguments objects.</source>
          <target state="translated">ジェネレーターオブジェクトのほかに、 &lt;code&gt;yield*&lt;/code&gt; は、配列、文​​字列、引数オブジェクトなど、他の種類のイテラブルを &lt;code&gt;yield&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="9e6eafdf023657a3fd3a8b11636254d4fad58147" translate="yes" xml:space="preserve">
          <source>Besides regular, printable characters, special characters can be encoded using escape notation:</source>
          <target state="translated">通常の印刷可能な文字の他に、特殊文字はエスケープ表記を使用してエンコードすることができます。</target>
        </trans-unit>
        <trans-unit id="3f8fb1122f77fe0ba01680d6e22b4baf1b576598" translate="yes" xml:space="preserve">
          <source>Besides the generic &lt;code&gt;Error&lt;/code&gt; constructor, there are other core error constructors in JavaScript. For client-side exceptions, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Statements#Exception_handling_statements&quot;&gt;Exception handling statements&lt;/a&gt;.</source>
          <target state="translated">Besides the generic &lt;code&gt;Error&lt;/code&gt; constructor, there are other core error constructors in JavaScript. For client-side exceptions, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Statements#Exception_handling_statements&quot;&gt;Exception handling statements&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a7c2e151a3cc5d7777c01be8bc72c029402798cc" translate="yes" xml:space="preserve">
          <source>Besides the generic &lt;code&gt;Error&lt;/code&gt; constructor, there are seven other core error constructors in JavaScript. For client-side exceptions, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Statements#Exception_handling_statements&quot;&gt;Exception handling statements&lt;/a&gt;.</source>
          <target state="translated">一般的な &lt;code&gt;Error&lt;/code&gt; コンストラクターの他に、JavaScriptには7つのコアエラーコンストラクターがあります。クライアント側の例外については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Statements#Exception_handling_statements&quot;&gt;例外処理ステートメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9771605fc0f821b322531f36410ed7ccf7f3b31a" translate="yes" xml:space="preserve">
          <source>Better code without &lt;code&gt;eval()&lt;/code&gt;:</source>
          <target state="translated">Better code without &lt;code&gt;eval()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="77d11c5ac571ff07519a187888bdf11074258b69" translate="yes" xml:space="preserve">
          <source>Better code without eval:</source>
          <target state="translated">evalを使わない方が良いコードです。</target>
        </trans-unit>
        <trans-unit id="d9d539cd76ae701f0f3708222006d5c1b01546b8" translate="yes" xml:space="preserve">
          <source>Between the generator's code path, its &lt;code&gt;yield&lt;/code&gt; operators, and the ability to specify a new starting value by passing it to &lt;a href=&quot;../global_objects/generator/next&quot;&gt;&lt;code&gt;Generator.prototype.next()&lt;/code&gt;&lt;/a&gt;, generators offer enormous power and control.</source>
          <target state="translated">ジェネレーターのコードパス、 &lt;code&gt;yield&lt;/code&gt; オペレーター、および&lt;a href=&quot;../global_objects/generator/next&quot;&gt; &lt;code&gt;Generator.prototype.next()&lt;/code&gt; に&lt;/a&gt;渡すことによって新しい開始値を指定する機能の間で、ジェネレーターは非常に強力な制御を提供します。</target>
        </trans-unit>
        <trans-unit id="9ec8edd65739efa3eaea12b2df2dafcba3bba456" translate="yes" xml:space="preserve">
          <source>BigInt literal</source>
          <target state="translated">ビッグインテリテラル</target>
        </trans-unit>
        <trans-unit id="66639f7d455dd71faa9147f5d69e5ce885d8bebd" translate="yes" xml:space="preserve">
          <source>Binary</source>
          <target state="translated">Binary</target>
        </trans-unit>
        <trans-unit id="a6ae5e739bb51d1efcd9ab02e0c4453257e53d13" translate="yes" xml:space="preserve">
          <source>Binary bitwise operators</source>
          <target state="translated">2進ビット演算子</target>
        </trans-unit>
        <trans-unit id="8756d89e35f765492208b16956608e9c330132ec" translate="yes" xml:space="preserve">
          <source>Binary logical operators</source>
          <target state="translated">二項論理演算子</target>
        </trans-unit>
        <trans-unit id="a7be905883f7d051cd0a22fef7a668ee621d2079" translate="yes" xml:space="preserve">
          <source>Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;B&quot; (&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;). Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the &lt;code&gt;0b&lt;/code&gt; are not 0 or 1, the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is thrown: &quot;Missing binary digits after 0b&quot;.</source>
          <target state="translated">Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;B&quot; ( &lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt; ). Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the &lt;code&gt;0b&lt;/code&gt; are not 0 or 1, the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; is thrown: &quot;Missing binary digits after 0b&quot;.</target>
        </trans-unit>
        <trans-unit id="2874efcc76cef8287eda56aabf4377e410abf486" translate="yes" xml:space="preserve">
          <source>Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;B&quot; (&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;). Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the &lt;code&gt;0b&lt;/code&gt; are not 0 or 1, the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Missing binary digits after 0b&quot;.</source>
          <target state="translated">2進数の構文では、先行ゼロを使用し、その後に小文字または大文字のラテン文字「B」（ &lt;code&gt;0b&lt;/code&gt; または &lt;code&gt;0B&lt;/code&gt; ）を続けます。この構文はECMAScript 2015の新機能であるため、以下のブラウザー互換性表を参照してください。 &lt;code&gt;0b&lt;/code&gt; の後の数字が0または1で &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; 場合、次のSyntaxErrorがスローされます：「0bの後に2進数字がありません」。</target>
        </trans-unit>
        <trans-unit id="4a017cd979dca481c1cc4d0dba522bb792b6ec74" translate="yes" xml:space="preserve">
          <source>Binary numeric literals (&lt;code&gt;0b&lt;/code&gt;)</source>
          <target state="translated">2進数リテラル（ &lt;code&gt;0b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4bdf2505c1f9ea6cd90d41762fb41d00a51b1117" translate="yes" xml:space="preserve">
          <source>Binary strings</source>
          <target state="translated">バイナリ文字列</target>
        </trans-unit>
        <trans-unit id="9f01c29a338dbfbd4129972247f2c426c77f6ed9" translate="yes" xml:space="preserve">
          <source>Binding &lt;code&gt;this&lt;/code&gt; with prototype and static methods</source>
          <target state="translated">Binding &lt;code&gt;this&lt;/code&gt; with prototype and static methods</target>
        </trans-unit>
        <trans-unit id="76de4944f8b748c8a0e7daa5916ebaebf0eb3452" translate="yes" xml:space="preserve">
          <source>Binding can be done with the .&lt;code&gt;call&lt;/code&gt; function of &lt;a href=&quot;../function/prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt; and it can also be reduced using &lt;code&gt;[].slice.call(arguments)&lt;/code&gt; instead of &lt;code&gt;Array.prototype.slice.call&lt;/code&gt;. Anyway, it can be simplified using &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バインドはで行うことができます。&lt;a href=&quot;../function/prototype&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; の&lt;/a&gt;関数を &lt;code&gt;call&lt;/code&gt; 、 &lt;code&gt;Array.prototype.slice.call&lt;/code&gt; の代わりに &lt;code&gt;[].slice.call(arguments)&lt;/code&gt; を使用して減らすこともできます。とにかく、&lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;を使用して簡略化できます。</target>
        </trans-unit>
        <trans-unit id="33685dd0afcc1232eb1cd1adcb82fc4c2cfb09eb" translate="yes" xml:space="preserve">
          <source>Binding can be done with the &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt; method of &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt; and it can also be reduced using &lt;code&gt;[].slice.call(arguments)&lt;/code&gt; instead of &lt;code&gt;Array.prototype.slice.call&lt;/code&gt;.</source>
          <target state="translated">Binding can be done with the &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; method of &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;/a&gt; and it can also be reduced using &lt;code&gt;[].slice.call(arguments)&lt;/code&gt; instead of &lt;code&gt;Array.prototype.slice.call&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="286ca3119c2dddb2961e31f60e4a3e163da17eae" translate="yes" xml:space="preserve">
          <source>Binds an object property to a function that will be called when that property is looked up.</source>
          <target state="translated">オブジェクトのプロパティを、そのプロパティが検索されたときに呼び出される関数にバインドします。</target>
        </trans-unit>
        <trans-unit id="5e3a56716d36edae26cdf7ba11e2b0a7f1f03c0e" translate="yes" xml:space="preserve">
          <source>Binds an object property to a function to be called when there is an attempt to set that property.</source>
          <target state="translated">オブジェクトのプロパティを、そのプロパティを設定しようとしたときに呼び出される関数にバインドします。</target>
        </trans-unit>
        <trans-unit id="17e80e5f71e9b85954b350f117d4dfeb3c5cf70a" translate="yes" xml:space="preserve">
          <source>Bitwise AND</source>
          <target state="translated">ビットごとのAND</target>
        </trans-unit>
        <trans-unit id="904b0e8a139eb9ff00c6255a632105837af7ed24" translate="yes" xml:space="preserve">
          <source>Bitwise AND (&lt;code&gt;a &amp;amp; b&lt;/code&gt;)</source>
          <target state="translated">ビットごとのAND（ &lt;code&gt;a &amp;amp; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="19157360058c50bbf65aa36c06fcf24282a48b35" translate="yes" xml:space="preserve">
          <source>Bitwise AND assignment</source>
          <target state="translated">ビットごとのAND代入</target>
        </trans-unit>
        <trans-unit id="207c0ede4c9f854f279319be8d54c1851a4c68e6" translate="yes" xml:space="preserve">
          <source>Bitwise AND assignment (&lt;code&gt;x &amp;amp;= y&lt;/code&gt;)</source>
          <target state="translated">ビットごとのAND割り当て（ &lt;code&gt;x &amp;amp;= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b83b40bc737146a9d8ff05e395bc13b4f754647f" translate="yes" xml:space="preserve">
          <source>Bitwise AND assignment.</source>
          <target state="translated">ビット単位のAND代入。</target>
        </trans-unit>
        <trans-unit id="ffba6db82603dad8914301fabc35b8806c66bd9d" translate="yes" xml:space="preserve">
          <source>Bitwise AND.</source>
          <target state="translated">ビットごとのAND。</target>
        </trans-unit>
        <trans-unit id="228f1254537780a1665d7d6053bc84359b75bc83" translate="yes" xml:space="preserve">
          <source>Bitwise ANDing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; yields &lt;code&gt;0&lt;/code&gt;. Bitwise ANDing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt; yields &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">ビット単位のAND演算は、任意の数 &lt;code&gt;x&lt;/code&gt; はと &lt;code&gt;0&lt;/code&gt; 利回り &lt;code&gt;0&lt;/code&gt; 。ビット単位のAND演算は、任意の数の &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;-1&lt;/code&gt; 収量は &lt;code&gt;x&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="1106c19e63f1ecb8c7e66bf9006a1aeb1bfdb0e8" translate="yes" xml:space="preserve">
          <source>Bitwise Left Shift</source>
          <target state="translated">ビットごとの左シフト</target>
        </trans-unit>
        <trans-unit id="136c3a93310929e09124297eaf66ab9f3782d009" translate="yes" xml:space="preserve">
          <source>Bitwise NOT</source>
          <target state="translated">ビット単位ではありません。</target>
        </trans-unit>
        <trans-unit id="b85f0285386bcc121aa981e9285153a238ab302c" translate="yes" xml:space="preserve">
          <source>Bitwise NOT (&lt;code&gt;~a&lt;/code&gt;)</source>
          <target state="translated">ビットごとのNOT（ &lt;code&gt;~a&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ea10ea62f6783893a49bcccf186e0af033c9f677" translate="yes" xml:space="preserve">
          <source>Bitwise NOT operator.</source>
          <target state="translated">ビット単位のNOT演算子。</target>
        </trans-unit>
        <trans-unit id="b9eca6b3f86ef4b57c63a63799bfc18d87f7ade5" translate="yes" xml:space="preserve">
          <source>Bitwise NOTing any number &lt;code&gt;x&lt;/code&gt; yields &lt;code&gt;-(x + 1)&lt;/code&gt;. For example, &lt;code&gt;~-5&lt;/code&gt; yields &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">任意の数 &lt;code&gt;x&lt;/code&gt; をビット単位で否定すると、 &lt;code&gt;-(x + 1)&lt;/code&gt; ます。たとえば、 &lt;code&gt;~-5&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f4be0adcfa81c37e1e7bbf2e23630f30974d164f" translate="yes" xml:space="preserve">
          <source>Bitwise OR</source>
          <target state="translated">ビットごとのOR</target>
        </trans-unit>
        <trans-unit id="78a461b3681192de29c2632b67cf5c033faafe18" translate="yes" xml:space="preserve">
          <source>Bitwise OR (&lt;code&gt;a | b&lt;/code&gt;)</source>
          <target state="translated">ビットOR（ &lt;code&gt;a | b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a7d8fd299d5c1bafd6ababe24987384c94c58173" translate="yes" xml:space="preserve">
          <source>Bitwise OR assignment</source>
          <target state="translated">ビットごとのOR代入</target>
        </trans-unit>
        <trans-unit id="cf6f335e17a5850b36eca82a39c1fb3b9497c5cf" translate="yes" xml:space="preserve">
          <source>Bitwise OR assignment (&lt;code&gt;x |= y&lt;/code&gt;)</source>
          <target state="translated">ビットごとのOR代入（ &lt;code&gt;x |= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="02d812fc3cec8b81c5535cd3018fc4f06ade94e9" translate="yes" xml:space="preserve">
          <source>Bitwise OR assignment.</source>
          <target state="translated">ビット単位のOR代入。</target>
        </trans-unit>
        <trans-unit id="f6cce76615b422f50d91d4d2e6ab10761c70e02d" translate="yes" xml:space="preserve">
          <source>Bitwise OR.</source>
          <target state="translated">ビットごとのOR。</target>
        </trans-unit>
        <trans-unit id="76ed4e1870847d788b5165f69f2a25c0d1bdf96f" translate="yes" xml:space="preserve">
          <source>Bitwise ORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; yields &lt;code&gt;x&lt;/code&gt;. Bitwise ORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt; yields &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">ビット単位の論理和、任意の数の &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;0&lt;/code&gt; 利回りの &lt;code&gt;x&lt;/code&gt; 。ビット単位の論理和、任意の数の &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;-1&lt;/code&gt; 利回り &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f06f824cef5caab026aebdaccc85d665d4b620db" translate="yes" xml:space="preserve">
          <source>Bitwise Operators</source>
          <target state="translated">ビット演算子</target>
        </trans-unit>
        <trans-unit id="13d1bf85f6108733cd5763f383227ae586d1706d" translate="yes" xml:space="preserve">
          <source>Bitwise Right Shift</source>
          <target state="translated">ビットごとの右シフト</target>
        </trans-unit>
        <trans-unit id="d105663d9d701d23ae726ff9dc6d8ecf8192aa61" translate="yes" xml:space="preserve">
          <source>Bitwise Unsigned Right Shift</source>
          <target state="translated">ビットごとの符号なし右シフト</target>
        </trans-unit>
        <trans-unit id="74269e9a4eb117ac43a93ed74bc3c8cd96fd4ff4" translate="yes" xml:space="preserve">
          <source>Bitwise XOR</source>
          <target state="translated">ビットごとのXOR</target>
        </trans-unit>
        <trans-unit id="51306fe75b76bd49cbe3e00e768e9b55bf4ae5f7" translate="yes" xml:space="preserve">
          <source>Bitwise XOR (&lt;code&gt;a ^ b&lt;/code&gt;)</source>
          <target state="translated">ビットごとのXOR（ &lt;code&gt;a ^ b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e3e1709ce290a67ec5f21e03a6b6317c9f304436" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment</source>
          <target state="translated">ビットごとのXOR代入</target>
        </trans-unit>
        <trans-unit id="5528a7a5704835b370988fe2d816030aee967dc6" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment (&lt;code&gt;x ^= y&lt;/code&gt;)</source>
          <target state="translated">ビットごとのXOR割り当て（ &lt;code&gt;x ^= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a2e6f0879c56242b4b6e0dfcdd52258af33ed61f" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment.</source>
          <target state="translated">ビットごとのXOR代入。</target>
        </trans-unit>
        <trans-unit id="208853b1399b38924467bde1a53c6b31b3f0d077" translate="yes" xml:space="preserve">
          <source>Bitwise XOR.</source>
          <target state="translated">ビットごとのXOR。</target>
        </trans-unit>
        <trans-unit id="8496e18e62495844702902d344bb9aee1d53dca8" translate="yes" xml:space="preserve">
          <source>Bitwise XORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; yields x. Bitwise XORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt; yields &lt;code&gt;~x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; でビットごとにXORすると、xが得られます。ビット単位の排他的論理和、任意の数の &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;-1&lt;/code&gt; 利回り &lt;code&gt;~x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49799e0ede49c819113d20d6cebe854b9eb4b468" translate="yes" xml:space="preserve">
          <source>Bitwise left shift (&lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt;)</source>
          <target state="translated">ビットごとの左シフト（ &lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e6cd89765f9f07982713f6158dd811fb58407b4c" translate="yes" xml:space="preserve">
          <source>Bitwise left shift operator.</source>
          <target state="translated">ビット単位の左シフト演算子。</target>
        </trans-unit>
        <trans-unit id="b43dfc8d2e6ac1a2f9d917e7bf1ee01506c3ea48" translate="yes" xml:space="preserve">
          <source>Bitwise logical operators</source>
          <target state="translated">ビット単位の論理演算子</target>
        </trans-unit>
        <trans-unit id="3dc97888788cc1b09dac9d2412a98d54e24f8b1e" translate="yes" xml:space="preserve">
          <source>Bitwise operators</source>
          <target state="translated">ビット演算子</target>
        </trans-unit>
        <trans-unit id="cf36d30aed7538bcf7a534272f9f63ef2c05b3d7" translate="yes" xml:space="preserve">
          <source>Bitwise operators treat their operands as a set of 32 bits (zeros and ones) and return standard JavaScript numerical values.</source>
          <target state="translated">ビット演算子は、そのオペランドを32ビット(0と1)の集合として扱い、JavaScriptの標準的な数値を返します。</target>
        </trans-unit>
        <trans-unit id="21e3d2983421ad31e10303ddd77128c1f7ec8861" translate="yes" xml:space="preserve">
          <source>Bitwise right shift (&lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt;)</source>
          <target state="translated">ビット単位の右シフト（ &lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ed5a09a9d7f5e8fb884bd222a4d9226d68817eec" translate="yes" xml:space="preserve">
          <source>Bitwise right shift operator.</source>
          <target state="translated">ビット単位の右シフト演算子。</target>
        </trans-unit>
        <trans-unit id="d49fb1543c1cf037be882f516f8283e8411c03af" translate="yes" xml:space="preserve">
          <source>Bitwise shift operators</source>
          <target state="translated">ビット単位のシフト演算子</target>
        </trans-unit>
        <trans-unit id="b55b921b4ab4b2a4aa94c854dd6f474fd101c31b" translate="yes" xml:space="preserve">
          <source>Bitwise shifting any number &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits yields &lt;code&gt;x * 2&amp;nbsp;** y&lt;/code&gt;.</source>
          <target state="translated">任意の数 &lt;code&gt;x&lt;/code&gt; を &lt;code&gt;y&lt;/code&gt; ビットだけ左にビット単位でシフトすると、 &lt;code&gt;x * 2&amp;nbsp;** y&lt;/code&gt; 生成されます。</target>
        </trans-unit>
        <trans-unit id="0c4cfc404dc07a4c79c7f13da23a3d2f9325c509" translate="yes" xml:space="preserve">
          <source>Bitwise unsigned right shift (&lt;code&gt;a &amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;)</source>
          <target state="translated">ビット単位の符号なし右シフト（ &lt;code&gt;a &amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="295c9191efffb3bb34f27f69cfe56325dce052a0" translate="yes" xml:space="preserve">
          <source>Bitwise unsigned right shift operator.</source>
          <target state="translated">ビット単位の符号なし右シフト演算子。</target>
        </trans-unit>
        <trans-unit id="4bbca20f48097a12932f951b2540fe1cef457e75" translate="yes" xml:space="preserve">
          <source>Block Scoping Rules</source>
          <target state="translated">ブロックスコープのルール</target>
        </trans-unit>
        <trans-unit id="44f23b923d4c118ace9751471e8a32d3ddca275e" translate="yes" xml:space="preserve">
          <source>Block Statement</source>
          <target state="translated">ブロックステートメント</target>
        </trans-unit>
        <trans-unit id="1a8f0843bcf082b23c210f56bc6a9711e29db02a" translate="yes" xml:space="preserve">
          <source>Block scoping</source>
          <target state="translated">ブロックスコープ</target>
        </trans-unit>
        <trans-unit id="bc371f6dae1e3e909b4c05d159ced5d5bf380148" translate="yes" xml:space="preserve">
          <source>Block scoping rules with let, const or function declaration in strict mode</source>
          <target state="translated">厳密なモードでの let,const,関数宣言によるブロックスコープルール</target>
        </trans-unit>
        <trans-unit id="5c452d77debbc7a83908ba2c8511d154548f5ab6" translate="yes" xml:space="preserve">
          <source>Block scoping rules with var or function declaration in non-strict mode</source>
          <target state="translated">厳密でないモードでの var や関数の宣言によるブロックスコープルール</target>
        </trans-unit>
        <trans-unit id="969ef7f93e174f019c94a1a2b4d8cb9962752777" translate="yes" xml:space="preserve">
          <source>Block-level functions</source>
          <target state="translated">ブロックレベル関数</target>
        </trans-unit>
        <trans-unit id="3a4dc39931e8b4f58b52224be0ab5913ab714b6f" translate="yes" xml:space="preserve">
          <source>Block-level functions in non-strict code</source>
          <target state="translated">厳密でないコードでのブロックレベル関数</target>
        </trans-unit>
        <trans-unit id="223690972993f09a3e260b9055786a3bcfde4eea" translate="yes" xml:space="preserve">
          <source>Block-scope variables within &lt;code&gt;switch&lt;/code&gt; statements</source>
          <target state="translated">Block-scope variables within &lt;code&gt;switch&lt;/code&gt; statements</target>
        </trans-unit>
        <trans-unit id="4b378921152c8fce52a9f4a8108f22a325030ee4" translate="yes" xml:space="preserve">
          <source>Blocks are commonly used in association with &lt;a href=&quot;if...else&quot;&gt;&lt;code&gt;if...else&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; statements.</source>
          <target state="translated">Blocks are commonly used in association with &lt;a href=&quot;if...else&quot;&gt; &lt;code&gt;if...else&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; statements.</target>
        </trans-unit>
        <trans-unit id="90000c3ff777303da5ba95029671caaecb1a0646" translate="yes" xml:space="preserve">
          <source>Blog post: &quot;ES6 In Depth: Classes&quot;</source>
          <target state="translated">ブログ記事を紹介します。&quot; ES6 In Depth.クラス&quot;</target>
        </trans-unit>
        <trans-unit id="0b4be1c4511e65eb0f5a72d1caf15f5b4c50d45d" translate="yes" xml:space="preserve">
          <source>Bonding arrays contained in an array of objects using the spread operator and initialValue</source>
          <target state="translated">spread 演算子と initialValue を用いたオブジェクトの配列に含まれるボンディング配列</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="e7bd2781af4b67186aeca61c0314545e3d8f6ee2" translate="yes" xml:space="preserve">
          <source>Boolean data type (Wikipedia)</source>
          <target state="translated">ブール型データ型(ウィキペディア</target>
        </trans-unit>
        <trans-unit id="8eaf8a6b9a4be72c9ec43f36ab75dc481def2fef" translate="yes" xml:space="preserve">
          <source>Boolean literal</source>
          <target state="translated">ブールリテラル</target>
        </trans-unit>
        <trans-unit id="ebd49e494985f6506a4c46505a8445efd7b5d37e" translate="yes" xml:space="preserve">
          <source>Boolean literals (&lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">ブールリテラル（ &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e806555369690f003bb66da55fa7f106f81b42e8" translate="yes" xml:space="preserve">
          <source>Boolean primitives</source>
          <target state="translated">ブールプリミティブ</target>
        </trans-unit>
        <trans-unit id="1f102602ed247c6b12a26812e81bca2ba1dd4627" translate="yes" xml:space="preserve">
          <source>Boolean.prototype</source>
          <target state="translated">Boolean.prototype</target>
        </trans-unit>
        <trans-unit id="8330bbb5ea1b3cd628f51340a64838a6c79182c8" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; properties are copied.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;プロパティと&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;プロパティの両方がコピーされます。</target>
        </trans-unit>
        <trans-unit id="16d710b26d846dc5dfd857489d4c042180867059" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;for...in&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; statements iterate over something. The main difference between them is in what they iterate over.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; と &lt;code&gt;for...of&lt;/code&gt; 両方のステートメントで何かを繰り返します。それらの主な違いは、何を繰り返すかです。</target>
        </trans-unit>
        <trans-unit id="d99c247e5d195ef53c983662a3f089c50ba31b78" translate="yes" xml:space="preserve">
          <source>Both data and accessor descriptors are objects. They share the following optional keys (please note: the &lt;strong&gt;defaults&lt;/strong&gt; mentioned here are in the case of defining properties using &lt;code&gt;Object.defineProperty()&lt;/code&gt;):</source>
          <target state="translated">Both data and accessor descriptors are objects. They share the following optional keys (please note: the &lt;strong&gt;defaults&lt;/strong&gt; mentioned here are in the case of defining properties using &lt;code&gt;Object.defineProperty()&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="1b4e9beeb224225cc3fb98b04f8fe30d72ea557d" translate="yes" xml:space="preserve">
          <source>Both data and accessor descriptors are objects. They share the following optional keys:</source>
          <target state="translated">データ記述子とアクセサ記述子はどちらもオブジェクトです。これらは以下のオプションキーを共有しています。</target>
        </trans-unit>
        <trans-unit id="6c75fb4d493afe560bfc951ac11a9f2a488aa359" translate="yes" xml:space="preserve">
          <source>Both lines will throw a SyntaxError:</source>
          <target state="translated">両方の行で SyntaxError がスローされます。</target>
        </trans-unit>
        <trans-unit id="3d92eca167111ea2c3e464fb0ae5da04ea28fd55" translate="yes" xml:space="preserve">
          <source>Both of the above methods result in identical strings.</source>
          <target state="translated">上記の方法はどちらも同じ文字列になります。</target>
        </trans-unit>
        <trans-unit id="2a336ea754922474e5193fc394f3b779e9feeda5" translate="yes" xml:space="preserve">
          <source>Both of these result in identical strings being created.</source>
          <target state="translated">どちらも同じ文字列が作成されます。</target>
        </trans-unit>
        <trans-unit id="f5a7d65234a859b8fc71598d624cf812f967748d" translate="yes" xml:space="preserve">
          <source>Both, &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, have no properties you could access.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; の&lt;/a&gt;両方に、アクセスできるプロパティはありません。</target>
        </trans-unit>
        <trans-unit id="33b3636f5258d6a496a704ec54c29db5b253a832" translate="yes" xml:space="preserve">
          <source>Bound function names</source>
          <target state="translated">バウンド関数名</target>
        </trans-unit>
        <trans-unit id="d7159e794664ac62bfac2747b789576dbdcf1c60" translate="yes" xml:space="preserve">
          <source>Bound functions are automatically suitable for use with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided &lt;code&gt;this&lt;/code&gt; is ignored.</source>
          <target state="translated">Bound functions are automatically suitable for use with the &lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided &lt;code&gt;this&lt;/code&gt; is ignored.</target>
        </trans-unit>
        <trans-unit id="bae8c99681fcb5bed93319c3a8e784ff8f36832c" translate="yes" xml:space="preserve">
          <source>Bound functions are automatically suitable for use with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided &lt;code&gt;this&lt;/code&gt; is ignored. However, provided arguments are still prepended to the constructor call:</source>
          <target state="translated">バインドされた関数は、ターゲット関数によって作成された新しいインスタンスを構築するための&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;演算子での使用に自動的に適しています。バインドされた関数を使用して値を構築する場合、 &lt;code&gt;this&lt;/code&gt; が提供されても無視されます。ただし、提供された引数はコンストラクター呼び出しの前に追加されます。</target>
        </trans-unit>
        <trans-unit id="b16480759bbc4d89ce784dfdc68a435b33834d1e" translate="yes" xml:space="preserve">
          <source>Bound functions used as constructors</source>
          <target state="translated">コンストラクタとして使用されるバウンド関数</target>
        </trans-unit>
        <trans-unit id="676167cbb2c97275c4be4d6c7fc8fcffc08b6517" translate="yes" xml:space="preserve">
          <source>Boundaries</source>
          <target state="translated">Boundaries</target>
        </trans-unit>
        <trans-unit id="a4b116a0b5493666bad04b28569b9c9f04d07eed" translate="yes" xml:space="preserve">
          <source>Boxing with prototype and static methods</source>
          <target state="translated">プロトタイプとスタティックメソッドによるボクシング</target>
        </trans-unit>
        <trans-unit id="00a4a57c91f2fdc5c903c80c715cfd51d25d159c" translate="yes" xml:space="preserve">
          <source>Bracket notation</source>
          <target state="translated">ブラケット表記</target>
        </trans-unit>
        <trans-unit id="7e3a2e6e2e6ecc584b6eac09ac9297599bd044a1" translate="yes" xml:space="preserve">
          <source>Bracket notation vs. &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">Bracket notation vs. &lt;code&gt;eval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c437544a2fdc41e6c287d1fca5e9492cc91a589" translate="yes" xml:space="preserve">
          <source>Breaking changes in &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; in Firefox 44</source>
          <target state="translated">Firefox 44の &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;const&lt;/code&gt; の重大な変更</target>
        </trans-unit>
        <trans-unit id="b99b91e559917941bb0e259fb1c7151b747a651d" translate="yes" xml:space="preserve">
          <source>Browser compatibility</source>
          <target state="translated">ブラウザの互換性</target>
        </trans-unit>
        <trans-unit id="b9596fac5cc2ce26e02f68794e8302c229989e32" translate="yes" xml:space="preserve">
          <source>Browser compatibility&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="translated">ブラウザーの互換性&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;GitHubの互換性データを更新します&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad735f3a90b4762d4bc98ff90a8d1ea0c7f3598c" translate="yes" xml:space="preserve">
          <source>Built-in APIs accepting iterables</source>
          <target state="translated">イテレートを受け付ける組み込みAPI</target>
        </trans-unit>
        <trans-unit id="581abb698c99c4b1120288f3de3a9b64c9286720" translate="yes" xml:space="preserve">
          <source>Built-in iterables</source>
          <target state="translated">組み込みのイテレーション</target>
        </trans-unit>
        <trans-unit id="884ab2c39a0a22ef21580b757472274ae839547e" translate="yes" xml:space="preserve">
          <source>Built-in toStringTag symbols</source>
          <target state="translated">組み込みのtoStringTagシンボル</target>
        </trans-unit>
        <trans-unit id="448aea1f663f911f7037eb448b904b903acbc888" translate="yes" xml:space="preserve">
          <source>Built-ins</source>
          <target state="translated">Built-ins</target>
        </trans-unit>
        <trans-unit id="92721da1822273850afdb94edb4d22e3303367c0" translate="yes" xml:space="preserve">
          <source>But a default export can be imported with any name for example:</source>
          <target state="translated">しかし、デフォルトのエクスポートは、例えば任意の名前でインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="9555f50cca8312e6f450839db586b008b4b6efe4" translate="yes" xml:space="preserve">
          <source>But beware: by using &lt;code&gt;apply&lt;/code&gt; this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (that is, more than tens of thousands of arguments) varies across engines. (The JavaScriptCore engine has hard-coded &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=80797&quot;&gt;argument limit of 65536&lt;/a&gt;.</source>
          <target state="translated">But beware: by using &lt;code&gt;apply&lt;/code&gt; this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (that is, more than tens of thousands of arguments) varies across engines. (The JavaScriptCore engine has hard-coded &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=80797&quot;&gt;argument limit of 65536&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7f2a03247dac989b4bafc6987ec5a3c8d8668c6a" translate="yes" xml:space="preserve">
          <source>But beware: in using &lt;code&gt;apply&lt;/code&gt; this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines (JavaScriptCore has hard-coded &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=80797&quot;&gt;argument limit of 65536&lt;/a&gt;), because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments &lt;code&gt;5, 6, 2, 3&lt;/code&gt; had been passed to &lt;code&gt;apply&lt;/code&gt; in the examples above, rather than the full array.</source>
          <target state="translated">ただし、注意してください。applythis way を使用 &lt;code&gt;apply&lt;/code&gt; 、JavaScriptエンジンの引数の長さ制限を超えるリスクがあります。引数が多すぎる（数万を超えると考える）関数を適用した場合の結果は、エンジンによって異なります（JavaScriptCoreは&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=80797&quot;&gt;65536の引数&lt;/a&gt;がハードコードされています）。制限（実際には、過度に大きなスタックの性質でさえも動作）は指定されていません。一部のエンジンは例外をスローします。さらに厄介なことに、適用された関数に実際に渡される引数の数を任意に制限するものもあります。この後者の場合を説明するために：そのようなエンジンは、4つの引数（実際の制限はもちろん有意に高いのである）の限界があった場合、引数があるかのように、それは次のようになり &lt;code&gt;5, 6, 2, 3&lt;/code&gt; に渡されていた &lt;code&gt;apply&lt;/code&gt; 上記の例では、配列全体ではありません。</target>
        </trans-unit>
        <trans-unit id="c5b583455c2fbecd20a5fd6c20328e66a1b3fe39" translate="yes" xml:space="preserve">
          <source>But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:</source>
          <target state="translated">しかし、そのようなプロパティの設定方法は、Mapデータ構造とは相互作用しません。それはジェネリック オブジェクトの機能を使用します。bla' の値は、クエリ用のマップには保存されません。データに対する他の操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="acab0ffeb0e96c00b7547d458b0d5582e549bad5" translate="yes" xml:space="preserve">
          <source>But when do we need to perform last line here? Unfortunately the answer is - it depends.</source>
          <target state="translated">しかし、ここではいつ最後の行を実行する必要があるのでしょうか?残念ながら答えは-それは依存しています。</target>
        </trans-unit>
        <trans-unit id="6028000d5a15ce56f4d39ed3e2cbf1dd3f527ec0" translate="yes" xml:space="preserve">
          <source>But when do we need to perform the last line here? Unfortunately, the answer is: &lt;em&gt;it depends&lt;/em&gt;.</source>
          <target state="translated">But when do we need to perform the last line here? Unfortunately, the answer is: &lt;em&gt;it depends&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="977e4a9357ea1f101d39dbc97f777df1a9f0b2b0" translate="yes" xml:space="preserve">
          <source>But where &lt;code&gt;function1&lt;/code&gt; and &lt;code&gt;function2&lt;/code&gt; do not become available inside the current module.</source>
          <target state="translated">But where &lt;code&gt;function1&lt;/code&gt; and &lt;code&gt;function2&lt;/code&gt; do not become available inside the current module.</target>
        </trans-unit>
        <trans-unit id="e962dcf9bf0e8855188d7c4bfc8bb71e56d5031b" translate="yes" xml:space="preserve">
          <source>But with the addition of block-scoped &lt;a href=&quot;../statements/let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../statements/const&quot;&gt;&lt;code&gt;Statements/const&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;typeof&lt;/code&gt; on &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables (or using &lt;code&gt;typeof&lt;/code&gt; on a &lt;code&gt;class&lt;/code&gt;) in a block before they are declared will throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;. Block scoped variables are in a &quot;&lt;a href=&quot;../statements/let#The_temporal_dead_zone_and_typeof&quot;&gt;temporal dead zone&lt;/a&gt;&quot; from the start of the block until the initialization is processed, during which, it will throw an error if accessed.</source>
          <target state="translated">But with the addition of block-scoped &lt;a href=&quot;../statements/let&quot;&gt; &lt;code&gt;let&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../statements/const&quot;&gt; &lt;code&gt;Statements/const&lt;/code&gt; &lt;/a&gt; using &lt;code&gt;typeof&lt;/code&gt; on &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables (or using &lt;code&gt;typeof&lt;/code&gt; on a &lt;code&gt;class&lt;/code&gt; ) in a block before they are declared will throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;. Block scoped variables are in a &quot;&lt;a href=&quot;../statements/let#The_temporal_dead_zone_and_typeof&quot;&gt;temporal dead zone&lt;/a&gt;&quot; from the start of the block until the initialization is processed, during which, it will throw an error if accessed.</target>
        </trans-unit>
        <trans-unit id="2386b0cb8bc197488708768792aa4518bd775961" translate="yes" xml:space="preserve">
          <source>But with the addition of non-hoisted, block-scoped &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;typeof&lt;/code&gt; on &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables (or using &lt;code&gt;typeof&lt;/code&gt; on a &lt;code&gt;class)&lt;/code&gt; in a block before they are declared will throw a &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt;. Block scoped variables are in a &quot;&lt;a href=&quot;../statements/let#Temporal_Dead_Zone_and_errors_with_let&quot;&gt;temporal dead zone&lt;/a&gt;&quot; from the start of the block until the initialization is processed, during which, it will throw an error if accessed.</source>
          <target state="translated">しかしを添加したブロックスコープ、非掲揚 &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; の使用、 &lt;code&gt;typeof&lt;/code&gt; 演算に &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;const&lt;/code&gt; 変数（または使用して &lt;code&gt;typeof&lt;/code&gt; 演算に &lt;code&gt;class)&lt;/code&gt; 、彼らがスローされますと宣言される前にブロックで &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt; 。ブロックスコープ変数は、ブロックの開始から初期化が処理されるまでの「&lt;a href=&quot;../statements/let#Temporal_Dead_Zone_and_errors_with_let&quot;&gt;一時的なデッドゾーン&lt;/a&gt;」にあります。その間に、アクセスするとエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="acab9b5ebf6d33af79db5b88d974ec8ff3aade38" translate="yes" xml:space="preserve">
          <source>But with this change &lt;code&gt;JSON.stringify&lt;/code&gt; represents lone surrogates using JSON escape sequences that &lt;em&gt;can&lt;/em&gt; be encoded in valid UTF-8 or UTF-16:</source>
          <target state="translated">But with this change &lt;code&gt;JSON.stringify&lt;/code&gt; represents lone surrogates using JSON escape sequences that &lt;em&gt;can&lt;/em&gt; be encoded in valid UTF-8 or UTF-16:</target>
        </trans-unit>
        <trans-unit id="4a7cc2b2cbe895d93ecd7208ead5d9a31b5ce6a7" translate="yes" xml:space="preserve">
          <source>But you can mutate the properties in a variable:</source>
          <target state="translated">しかし、変数内のプロパティを変異させることができます。</target>
        </trans-unit>
        <trans-unit id="ae4e6b4934b4082b0607861655201c9bddd4928c" translate="yes" xml:space="preserve">
          <source>But you wanted to append to the existing array... So what now? Write a loop? Surely not?</source>
          <target state="translated">でも既存の配列に追加したかったんですよね...で、どうする?ループを書く?そうじゃないのか?</target>
        </trans-unit>
        <trans-unit id="df4f3610603e26f63d0b839316556ad1b13bcdf1" translate="yes" xml:space="preserve">
          <source>But, &lt;code&gt;Promise.all&lt;/code&gt; resolves synchronously &lt;strong&gt;if and only if&lt;/strong&gt; the &lt;var&gt;iterable&lt;/var&gt; passed is empty:</source>
          <target state="translated">しかし、 &lt;code&gt;Promise.all&lt;/code&gt; は同期的解決&lt;strong&gt;場合に限り、&lt;/strong&gt; &lt;var&gt;iterable&lt;/var&gt; 合格は空です。</target>
        </trans-unit>
        <trans-unit id="56c3a9c1f13d2c03f486c47c2ef4f97cbc875fc9" translate="yes" xml:space="preserve">
          <source>But, if you pass an array to &lt;code&gt;push&lt;/code&gt;, it will actually add that array as a single element, instead of adding the elements individually. So you end up with an array inside an array.</source>
          <target state="translated">But, if you pass an array to &lt;code&gt;push&lt;/code&gt; , it will actually add that array as a single element, instead of adding the elements individually. So you end up with an array inside an array.</target>
        </trans-unit>
        <trans-unit id="e395f352635c44cff809d07317daf64f2921e510" translate="yes" xml:space="preserve">
          <source>But, the &lt;code&gt;length&lt;/code&gt; property does not necessarily indicate the number of defined values in the array. See also &lt;a href=&quot;../array#Relationship_between_length_and_numerical_properties&quot;&gt;Relationship between &lt;code&gt;length&lt;/code&gt; and numerical properties&lt;/a&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;length&lt;/code&gt; プロパティは、配列内の定義された値の数を必ずしも示すわけではありません。&lt;a href=&quot;../array#Relationship_between_length_and_numerical_properties&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;と数値プロパティの関係も参照してください。</target>
        </trans-unit>
        <trans-unit id="7bbae1cbadd6294457f6e790fc07e56efdedeb9c" translate="yes" xml:space="preserve">
          <source>By clicking the button several times in a short amount of time, you'll even see the different promises being fulfilled one after another.</source>
          <target state="translated">短時間に数回ボタンをクリックすることで、次々と異なる約束が成就していく様子を見ることもできます。</target>
        </trans-unit>
        <trans-unit id="33195d68474668ca9b4fbeb87084df1cb01c7086" translate="yes" xml:space="preserve">
          <source>By contrast, identifiers declared with &lt;a href=&quot;let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;const&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;do have &lt;/strong&gt;block scope:</source>
          <target state="translated">対照的に、&lt;a href=&quot;let&quot;&gt; &lt;code&gt;let&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;const&quot;&gt; &lt;code&gt;const&lt;/code&gt; で&lt;/a&gt;宣言された識別子に&lt;strong&gt;は&lt;/strong&gt;ブロックスコープがあります。</target>
        </trans-unit>
        <trans-unit id="692c4388cf797b740802098c3e95fb8fcd78c138" translate="yes" xml:space="preserve">
          <source>By contrast, native &lt;code&gt;WeakMap&lt;/code&gt;s hold &quot;weak&quot; references to key objects, which means that they do not prevent garbage collection in case there would be no other reference to the key object. This also avoids preventing garbage collection of values in the map. Native WeakMaps can be particularly useful constructs when mapping keys to information about the key that is valuable only if the key has not been garbage collected.</source>
          <target state="translated">By contrast, native &lt;code&gt;WeakMap&lt;/code&gt; s hold &quot;weak&quot; references to key objects, which means that they do not prevent garbage collection in case there would be no other reference to the key object. This also avoids preventing garbage collection of values in the map. Native WeakMaps can be particularly useful constructs when mapping keys to information about the key that is valuable only if the key has not been garbage collected.</target>
        </trans-unit>
        <trans-unit id="07d7055e7599fed5e77ac1117d25535cd8b0ebb9" translate="yes" xml:space="preserve">
          <source>By contrast, native WeakMaps hold &quot;weak&quot; references to key objects, which means that they do not prevent garbage collection in case there would be no other reference to the key object. This also avoids preventing garbage collection of values in the map. Native WeakMaps can be particularly useful constructs when mapping keys to information about the key that is valuable only if the key has not been garbage collected.</source>
          <target state="translated">対照的に、ネイティブの WeakMaps はキーオブジェクトへの「弱い」参照を保持していますが、これはキーオブジェクトへの他の参照がない場合のガベージコレクションを防止しないことを意味します。これにより、マップ内の値のガベージコレクションを防ぐこともできます。ネイティブWeakMapsは、キーがガベージコレクションされていない場合にのみ価値があるキーに関する情報にキーをマッピングする場合に特に有用な構成要素となります。</target>
        </trans-unit>
        <trans-unit id="19a482c4520a9ba92e09ec0677ce2851220b93a6" translate="yes" xml:space="preserve">
          <source>By declaring fields up-front, class definitions become more self-documenting, and the fields are always present.</source>
          <target state="translated">フィールドを前もって宣言することで、クラス定義はより自己文書化され、フィールドは常に存在するようになります。</target>
        </trans-unit>
        <trans-unit id="c7c5a64edfd385ed53a10245ea0f514af1e6d3b0" translate="yes" xml:space="preserve">
          <source>By default within &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;this&lt;/code&gt; keyword will be set to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;global&lt;/code&gt;) object. When working with class methods that require &lt;code&gt;this&lt;/code&gt; to refer to class instances, you may explicitly bind &lt;code&gt;this&lt;/code&gt; to the callback function, in order to maintain the instance.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt; &lt;code&gt;window.setTimeout()&lt;/code&gt; &lt;/a&gt;内で、 &lt;code&gt;this&lt;/code&gt; キーワードは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt;（または &lt;code&gt;global&lt;/code&gt; ）オブジェクトに設定されます。クラスインスタンスを参照するために &lt;code&gt;this&lt;/code&gt; を必要とするクラスメソッドを使用する場合、インスタンスを維持するために、 &lt;code&gt;this&lt;/code&gt; をコールバック関数に明示的にバインドできます。</target>
        </trans-unit>
        <trans-unit id="659359b5cf4c8436196c0eca9ad42a5da58e11ff" translate="yes" xml:space="preserve">
          <source>By default within &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;this&lt;/code&gt; keyword will be set to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;global&lt;/code&gt;) object. When working with class methods that require &lt;code&gt;this&lt;/code&gt; to refer to class instances, you may explicitly bind &lt;code&gt;this&lt;/code&gt; to the callback function, in order to maintain the instance.</source>
          <target state="translated">By default within &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt; &lt;code&gt;window.setTimeout()&lt;/code&gt; &lt;/a&gt;, the &lt;code&gt;this&lt;/code&gt; keyword will be set to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt; (or &lt;code&gt;global&lt;/code&gt; ) object. When working with class methods that require &lt;code&gt;this&lt;/code&gt; to refer to class instances, you may explicitly bind &lt;code&gt;this&lt;/code&gt; to the callback function, in order to maintain the instance.</target>
        </trans-unit>
        <trans-unit id="10e28890ee038393999a1380b4faf5a01bb1578a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../array/concat&quot;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/a&gt; spreads (flattens) arrays into its result:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../array/concat&quot;&gt; &lt;code&gt;Array.prototype.concat()&lt;/code&gt; &lt;/a&gt;）は配列を結果に展開（フラット化）します。</target>
        </trans-unit>
        <trans-unit id="62d6641e0d6b851c30bd6b7fd4c1a2ddbb3d2e80" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; instances are given the name &quot;Error&quot;. The &lt;code&gt;name&lt;/code&gt; property, in addition to the &lt;a href=&quot;message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt; property, is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the error.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;インスタンスには「Error」という名前が付けられています。 &lt;code&gt;name&lt;/code&gt; プロパティは、に加えて、&lt;a href=&quot;message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt;プロパティで使用され&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt;エラーの文字列表現を作成する方法。</target>
        </trans-unit>
        <trans-unit id="272853013a210f467b913bed382af8c88e6adc38" translate="yes" xml:space="preserve">
          <source>By default, WebAssembly memories are unshared. You can create a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format#Shared_memories&quot;&gt;shared memory&lt;/a&gt; by passing &lt;code&gt;shared: true&lt;/code&gt; in the constructor's initialization object:</source>
          <target state="translated">By default, WebAssembly memories are unshared. You can create a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format#Shared_memories&quot;&gt;shared memory&lt;/a&gt; by passing &lt;code&gt;shared: true&lt;/code&gt; in the constructor's initialization object:</target>
        </trans-unit>
        <trans-unit id="e8f721be42732dfaaa8dc900a44483d0c45cf0fd" translate="yes" xml:space="preserve">
          <source>By default, functions return &lt;code&gt;undefined&lt;/code&gt;. To return any other value, the function must have a &lt;a href=&quot;return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statement that specifies the value to return.</source>
          <target state="translated">デフォルトでは、関数は &lt;code&gt;undefined&lt;/code&gt; を返します。その他の値を返すには、関数には、&lt;a href=&quot;return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;値を指定するreturnステートメントが必要です。</target>
        </trans-unit>
        <trans-unit id="3121504be0e2cb862120db5715233b6181f79215" translate="yes" xml:space="preserve">
          <source>By default, objects are &lt;a href=&quot;isextensible&quot;&gt;extensible&lt;/a&gt; (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (most commonly, although not exclusively, when in &lt;a href=&quot;../../strict_mode&quot;&gt;strict mode&lt;/a&gt; code).</source>
          <target state="translated">デフォルトでは、オブジェクトは&lt;a href=&quot;isextensible&quot;&gt;拡張可能です&lt;/a&gt;（新しいプロパティをオブジェクトに追加できます）。オブジェクトをシールすると、新しいプロパティが追加されなくなり、既存のすべてのプロパティを構成不可能としてマークします。これは、オブジェクトのプロパティのセットを固定して不変にする効果があります。すべてのプロパティを構成不可能にすると、それらがデータプロパティからアクセサプロパティに、またはその逆に変換されることも防止されますが、データプロパティの値が変更されることは防止されません。シールされたオブジェクトのプロパティを削除または追加しようとしたり、データプロパティをアクセサーに変換したり、その逆を試みたりすると、サイレントまたは&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を&lt;/a&gt;スローすることで失敗します（&lt;a href=&quot;../../strict_mode&quot;&gt;厳密モード&lt;/a&gt;コードの場合、最も一般的ですが、これに限定されません）。</target>
        </trans-unit>
        <trans-unit id="28e6d0fc51ec1ee314b5c461991b5894747dd62c" translate="yes" xml:space="preserve">
          <source>By default, objects are &lt;a href=&quot;isextensible&quot;&gt;extensible&lt;/a&gt; (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (most commonly, although not exclusively, when in &lt;a href=&quot;../../strict_mode&quot;&gt;strict mode&lt;/a&gt; code).</source>
          <target state="translated">By default, objects are &lt;a href=&quot;isextensible&quot;&gt;extensible&lt;/a&gt; (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; (most commonly, although not exclusively, when in &lt;a href=&quot;../../strict_mode&quot;&gt;strict mode&lt;/a&gt; code).</target>
        </trans-unit>
        <trans-unit id="22bf756fbb55c71ec9b2b9351542a91bee798090" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;message&lt;/code&gt; property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error constructor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;message&lt;/code&gt; プロパティは空の文字列ですが、この動作は、&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error constructor&lt;/code&gt; &lt;/a&gt;最初の引数としてメッセージを指定することで、インスタンスに対してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="132de52e398cb45787f34b3ef44936d5e7d944f2" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;message&lt;/code&gt; property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">By default, the &lt;code&gt;message&lt;/code&gt; property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the &lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; constructor.</target>
        </trans-unit>
        <trans-unit id="8785fd69786fee35f445f4dccf23f2fe0e41ac32" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;valueOf&lt;/code&gt; method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, &lt;code&gt;valueOf&lt;/code&gt; returns the object itself.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;valueOf&lt;/code&gt; メソッドは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;から派生したすべてのオブジェクトに継承されます。すべての組み込みコアオブジェクトは、このメソッドをオーバーライドして適切な値を返します。オブジェクトにプリミティブ値がない場合、 &lt;code&gt;valueOf&lt;/code&gt; はオブジェクト自体を返します。</target>
        </trans-unit>
        <trans-unit id="7873be2b91374dc17c7f6a426afcf13220ec712f" translate="yes" xml:space="preserve">
          <source>By default, this method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、このメソッドは&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;から派生したすべてのオブジェクトによって継承されます。</target>
        </trans-unit>
        <trans-unit id="046fbef544b28cf30f608e4ced019d95a74980a3" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;radix&lt;/code&gt; you can also convert base 10 numbers (like 1,2,3,4,5,.........) to another base numbers, in example below we are converting base 10 number to a base 2 (binary) number.</source>
          <target state="translated">By using &lt;code&gt;radix&lt;/code&gt; you can also convert base 10 numbers (like 1,2,3,4,5,.........) to another base numbers, in example below we are converting base 10 number to a base 2 (binary) number.</target>
        </trans-unit>
        <trans-unit id="374179f942f22d09db25dc99065a0cc232ed77dc" translate="yes" xml:space="preserve">
          <source>Byte index before which to end slicing. If end is unspecified, the new &lt;code&gt;ArrayBuffer&lt;/code&gt; contains all bytes from begin to the end of this &lt;code&gt;ArrayBuffer&lt;/code&gt;. If negative, it will make the Byte index begin from the last Byte.</source>
          <target state="translated">Byte index before which to end slicing. If end is unspecified, the new &lt;code&gt;ArrayBuffer&lt;/code&gt; contains all bytes from begin to the end of this &lt;code&gt;ArrayBuffer&lt;/code&gt; . If negative, it will make the Byte index begin from the last Byte.</target>
        </trans-unit>
        <trans-unit id="5969a259516b46e9263305388faf90ad0f94edb5" translate="yes" xml:space="preserve">
          <source>Byte index before which to end slicing. If end is unspecified, the new &lt;code&gt;ArrayBuffer&lt;/code&gt; contains all bytes from begin to the end of this &lt;code&gt;ArrayBuffer&lt;/code&gt;. The range specified by the begin and end values is clamped to the valid index range for the current array. If the computed length of the new &lt;code&gt;ArrayBuffer&lt;/code&gt; would be negative, it is clamped to zero.</source>
          <target state="translated">スライスを終了する前のバイトインデックス。endが指定されていない場合、新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; には、この &lt;code&gt;ArrayBuffer&lt;/code&gt; の beginからendまでのすべてのバイトが含まれます。開始値と終了値で指定された範囲は、現在の配列の有効なインデックス範囲に固定されます。新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; の計算された長さが負の場合、ゼロにクランプされます。</target>
        </trans-unit>
        <trans-unit id="65c69de6b60d275943eb0b345c38a4da863d03c4" translate="yes" xml:space="preserve">
          <source>Byte order mark</source>
          <target state="translated">バイトオーダーマーク</target>
        </trans-unit>
        <trans-unit id="421b23d45757122556d21f325621aca603974ed8" translate="yes" xml:space="preserve">
          <source>C developers have the &lt;code&gt;strcmp()&lt;/code&gt; function for comparing strings. In JavaScript, you just use the &lt;a href=&quot;../operators/comparison_operators&quot;&gt;less-than and greater-than operators&lt;/a&gt;:</source>
          <target state="translated">Cの開発者には、文字列を比較するための &lt;code&gt;strcmp()&lt;/code&gt; 関数があります。JavaScriptでは、小&lt;a href=&quot;../operators/comparison_operators&quot;&gt;なり演算子と大なり演算子を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="1c8b28082cf2210fb50e12c5b438c7c48e487269" translate="yes" xml:space="preserve">
          <source>Calculating elapsed time</source>
          <target state="translated">経過時間の計算</target>
        </trans-unit>
        <trans-unit id="3deb97bb6737095095f7e93d8c67cbbe7f00b636" translate="yes" xml:space="preserve">
          <source>Calculating the height of an equalateral triangle</source>
          <target state="translated">等辺三角形の高さの計算</target>
        </trans-unit>
        <trans-unit id="2cd3c40d7e3c9323d20f88c3334e1f59d6a5bd56" translate="yes" xml:space="preserve">
          <source>Calculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula &lt;code&gt;Math.sqrt(v1*v1 + v2*v2)&lt;/code&gt; where v1 and v2 are either the sides of the triangle, or the real and complex values. For calculating distance in 2 or more dimensions, simply add in more squares inside the square root sign, like &lt;code&gt;Math.sqrt(v1*v1 + v2*v2 + v3*v3&amp;nbsp;+ v4*v4)&lt;/code&gt;.</source>
          <target state="translated">直角三角形の斜辺または複素数の大きさを計算するには、数式 &lt;code&gt;Math.sqrt(v1*v1 + v2*v2)&lt;/code&gt; ここで、v1とv2は三角形の辺、または実数値と複素数値のいずれかです。 2次元以上の距離を計算するには、 &lt;code&gt;Math.sqrt(v1*v1 + v2*v2 + v3*v3&amp;nbsp;+ v4*v4)&lt;/code&gt; ように平方根記号の内側にさらに正方形を追加します。</target>
        </trans-unit>
        <trans-unit id="35c3b580c4c9bd656b61a8a81be780a8a57bd1e7" translate="yes" xml:space="preserve">
          <source>Calculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula &lt;code&gt;Math.sqrt(v1*v1 + v2*v2)&lt;/code&gt;, where v1 and v2 are the lengths of the triangle's legs, or the complex number's real and complex components. The corresponding distance in 2 or more dimensions can be calculated by adding more squares under the square root: &lt;code&gt;Math.sqrt(v1*v1 + v2*v2 + v3*v3 + v4*v4)&lt;/code&gt;.</source>
          <target state="translated">Calculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula &lt;code&gt;Math.sqrt(v1*v1 + v2*v2)&lt;/code&gt; , where v1 and v2 are the lengths of the triangle's legs, or the complex number's real and complex components. The corresponding distance in 2 or more dimensions can be calculated by adding more squares under the square root: &lt;code&gt;Math.sqrt(v1*v1 + v2*v2 + v3*v3 + v4*v4)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2b5c53c059f496e27e1159f1dc69b90da7746174" translate="yes" xml:space="preserve">
          <source>Calendar. Possible values include: &lt;code&gt;&quot;buddhist&quot;&lt;/code&gt;, &lt;code&gt;&quot;chinese&quot;&lt;/code&gt;, &lt;code&gt;&quot;coptic&quot;&lt;/code&gt;, &lt;code&gt;&quot;ethioaa&quot;&lt;/code&gt;, &lt;code&gt;&quot;ethiopic&quot;&lt;/code&gt;, &lt;code&gt;&quot;gregory&quot;&lt;/code&gt;, &lt;code&gt;&quot;hebrew&quot;&lt;/code&gt;, &lt;code&gt;&quot;indian&quot;&lt;/code&gt;, &lt;code&gt;&quot;islamic&quot;&lt;/code&gt;, &lt;code&gt;&quot;islamicc&quot;&lt;/code&gt;, &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt;, &lt;code&gt;&quot;japanese&quot;&lt;/code&gt;, &lt;code&gt;&quot;persian&quot;&lt;/code&gt;, &lt;code&gt;&quot;roc&quot;&lt;/code&gt;.</source>
          <target state="translated">カレンダー。可能な値は次のとおりです。 &lt;code&gt;&quot;buddhist&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;chinese&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;coptic&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ethioaa&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ethiopic&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;gregory&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hebrew&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;indian&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;islamic&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;islamicc&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;japanese&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;persian&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;roc&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fbce4777ecf7e4fc72ebe54c4e04060cedde117" translate="yes" xml:space="preserve">
          <source>Call on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; の&lt;/a&gt;呼び出しは &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt; 返し、&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Undefined&lt;/em&gt; ]を返します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8e186b3d8ff5821b46c8f7369ddda98fc1e0ffed" translate="yes" xml:space="preserve">
          <source>Callable regular expressions were a non-standard addition in some browsers.</source>
          <target state="translated">呼び出し可能な正規表現は、一部のブラウザでは非標準的な追加機能でした。</target>
        </trans-unit>
        <trans-unit id="d5157eb03ac0f1193906f8c156634761b124dd4b" translate="yes" xml:space="preserve">
          <source>Callback syntax</source>
          <target state="translated">コールバック構文</target>
        </trans-unit>
        <trans-unit id="2e460981c486df13f5d0cd1868eb0746a20c9cf2" translate="yes" xml:space="preserve">
          <source>Called on incompatible type</source>
          <target state="translated">互換性のないタイプで呼び出される</target>
        </trans-unit>
        <trans-unit id="889f0e32311aeca12d2e298ab0f2f76248da8fb8" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;unwatch()&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; since Firefox 23 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=903332&quot;&gt;bug 903332&lt;/a&gt;). This regression has been fixed with Firefox 27.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt; &lt;code&gt;Document&lt;/code&gt; &lt;/a&gt;オブジェクトで&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=903332&quot;&gt;unwatch &lt;/a&gt; &lt;code&gt;unwatch()&lt;/code&gt; を呼び出すと、Firefox 23以降、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が&lt;/a&gt;スローされます（バグ903332）。このリグレッションはFirefox 27で修正されました。</target>
        </trans-unit>
        <trans-unit id="6575e91d0422fff5661a7b9b7443646d92438f7b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;watch()&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; since Firefox 23 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=903332&quot;&gt;bug 903332&lt;/a&gt;). This regression has been fixed with Firefox 27.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt; &lt;code&gt;Document&lt;/code&gt; &lt;/a&gt;オブジェクトで &lt;code&gt;watch()&lt;/code&gt; を呼び出すと、Firefox 23以降、&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が&lt;/a&gt;スローされます（&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=903332&quot;&gt;バグ903332&lt;/a&gt;）。このリグレッションはFirefox 27で修正されました。</target>
        </trans-unit>
        <trans-unit id="f42ab521cde0170d0efb7b998bdc09448e1809ac" translate="yes" xml:space="preserve">
          <source>Calling a generator function does not execute its body immediately; an &lt;a href=&quot;../iteration_protocols#iterator&quot;&gt;iterator&lt;/a&gt; object for the function is returned instead. When the iterator's &lt;code&gt;next()&lt;/code&gt; method is called, the generator function's body is executed until the first &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression, which specifies the value to be returned from the iterator or, with &lt;a href=&quot;../operators/yield*&quot;&gt;&lt;code&gt;yield*&lt;/code&gt;&lt;/a&gt;, delegates to another generator function. The &lt;code&gt;next()&lt;/code&gt; method returns an object with a &lt;code&gt;value&lt;/code&gt; property containing the yielded value and a &lt;code&gt;done&lt;/code&gt; property which indicates whether the generator has yielded its last value as a boolean. Calling the &lt;code&gt;next()&lt;/code&gt; method with an argument will resume the generator function execution, replacing the &lt;code&gt;yield&lt;/code&gt; expression where execution was paused with the argument from &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="translated">ジェネレータ関数を呼び出しても、本体はすぐには実行されません。&lt;a href=&quot;../iteration_protocols#iterator&quot;&gt;イテレータ&lt;/a&gt;関数のオブジェクトが代わりに返されます。イテレーターの &lt;code&gt;next()&lt;/code&gt; メソッドが呼び出されると、ジェネレーター関数の本体は、イテレーターから返される値を指定する最初の&lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt;式、または&lt;a href=&quot;../operators/yield*&quot;&gt; &lt;code&gt;yield*&lt;/code&gt; &lt;/a&gt;を使用して別のジェネレーター関数にデリゲートするまで実行されます。 &lt;code&gt;next()&lt;/code&gt; メソッドを持つオブジェクト戻り &lt;code&gt;value&lt;/code&gt; が得られた値とを含むプロパティ &lt;code&gt;done&lt;/code&gt; ジェネレータはbooleanとしてその最後の値が得られたかどうかを示すプロパティ。 &lt;code&gt;next()&lt;/code&gt; を呼び出す引数付きのメソッドは、ジェネレーター関数の実行を再開し、実行が一時停止された &lt;code&gt;yield&lt;/code&gt; 式を &lt;code&gt;next()&lt;/code&gt; の引数で置き換えます。</target>
        </trans-unit>
        <trans-unit id="a75b1d81e9b82935964d222b2ad5170a861e55c0" translate="yes" xml:space="preserve">
          <source>Calling a generator function does not execute its body immediately; an &lt;a href=&quot;../iteration_protocols#iterator&quot;&gt;iterator&lt;/a&gt; object for the function is returned instead. When the iterator's &lt;code&gt;next()&lt;/code&gt; method is called, the generator function's body is executed until the first &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression, which specifies the value to be returned from the iterator or, with &lt;a href=&quot;../operators/yield*&quot;&gt;&lt;code&gt;yield*&lt;/code&gt;&lt;/a&gt;, delegates to another generator function. The &lt;code&gt;next()&lt;/code&gt; method returns an object with a &lt;code&gt;value&lt;/code&gt; property containing the yielded value and a &lt;code&gt;done&lt;/code&gt; property which indicates whether the generator has yielded its last value, as a boolean. Calling the &lt;code&gt;next()&lt;/code&gt; method with an argument will resume the generator function execution, replacing the &lt;code&gt;yield&lt;/code&gt; expression where an execution was paused with the argument from &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="translated">Calling a generator function does not execute its body immediately; an &lt;a href=&quot;../iteration_protocols#iterator&quot;&gt;iterator&lt;/a&gt; object for the function is returned instead. When the iterator's &lt;code&gt;next()&lt;/code&gt; method is called, the generator function's body is executed until the first &lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt; expression, which specifies the value to be returned from the iterator or, with &lt;a href=&quot;../operators/yield*&quot;&gt; &lt;code&gt;yield*&lt;/code&gt; &lt;/a&gt;, delegates to another generator function. The &lt;code&gt;next()&lt;/code&gt; method returns an object with a &lt;code&gt;value&lt;/code&gt; property containing the yielded value and a &lt;code&gt;done&lt;/code&gt; property which indicates whether the generator has yielded its last value, as a boolean. Calling the &lt;code&gt;next()&lt;/code&gt; method with an argument will resume the generator function execution, replacing the &lt;code&gt;yield&lt;/code&gt; expression where an execution was paused with the argument from &lt;code&gt;next()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e901561b4a22e5f9eacea38ce285943904d42ddf" translate="yes" xml:space="preserve">
          <source>Calling on &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; および &lt;code&gt;null&lt;/code&gt; の呼び出し</target>
        </trans-unit>
        <trans-unit id="ea379a24ab68b305d9c0aa33f04920490c92d81b" translate="yes" xml:space="preserve">
          <source>Calling static members from a class constructor and other methods</source>
          <target state="translated">クラスのコンストラクタなどのメソッドから静的メンバを呼び出す</target>
        </trans-unit>
        <trans-unit id="b7666378058b0722ea7d905219476325c4b0e543" translate="yes" xml:space="preserve">
          <source>Calling static members from another static method</source>
          <target state="translated">別の静的メソッドから静的メンバを呼び出す</target>
        </trans-unit>
        <trans-unit id="f1261188c334d4f578f6c32e2f64fa810ffc2511" translate="yes" xml:space="preserve">
          <source>Calling static methods</source>
          <target state="translated">静的メソッドの呼び出し</target>
        </trans-unit>
        <trans-unit id="4af1b3ced70e5598a015a0ed094936bcafe046a5" translate="yes" xml:space="preserve">
          <source>Calls (executes) a function and sets its &lt;em&gt;this&lt;/em&gt; to the provided value, arguments can be passed as they are.</source>
          <target state="translated">関数を呼び出し（実行）、&lt;em&gt;this&lt;/em&gt;を指定された値に設定します。引数はそのまま渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d2cdf79658501a4a681dd5a5557f58c8403077ee" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;object/tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;object/tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="8abcebb38f72b783a3dbe8dcf4f949c70b525c8f" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="615b966f8f0c002877179f680de5615470fa4cb0" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;var&gt;callbackFn&lt;/var&gt;&lt;/code&gt; once for each key-value pair present in the &lt;code&gt;Map&lt;/code&gt; object, in insertion order. If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; value for each callback.</source>
          <target state="translated">Calls &lt;code&gt;&lt;var&gt;callbackFn&lt;/var&gt;&lt;/code&gt; once for each key-value pair present in the &lt;code&gt;Map&lt;/code&gt; object, in insertion order. If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt; , it will be used as the &lt;code&gt;this&lt;/code&gt; value for each callback.</target>
        </trans-unit>
        <trans-unit id="4684663bd20d289a845c569e5f959bd5507b0a37" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;var&gt;callbackFn&lt;/var&gt;&lt;/code&gt; once for each value present in the &lt;code&gt;Set&lt;/code&gt; object, in insertion order. If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided, it will be used as the &lt;code&gt;this&lt;/code&gt; value for each invocation of &lt;code&gt;&lt;var&gt;callbackFn&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">Calls &lt;code&gt;&lt;var&gt;callbackFn&lt;/var&gt;&lt;/code&gt; once for each value present in the &lt;code&gt;Set&lt;/code&gt; object, in insertion order. If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided, it will be used as the &lt;code&gt;this&lt;/code&gt; value for each invocation of &lt;code&gt;&lt;var&gt;callbackFn&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43fa8d127c1ffbb91af039b977d206cfbf6ac83b" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;callbackFn&lt;/code&gt; once for each value present in the &lt;code&gt;Set&lt;/code&gt; object, in insertion order. If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; value for each callback.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; オブジェクトに存在する値ごとに、挿入順で &lt;code&gt;callbackFn&lt;/code&gt; を 1回呼び出します。場合 &lt;code&gt;thisArg&lt;/code&gt; のパラメータが提供される &lt;code&gt;forEach&lt;/code&gt; 、それは次のように使用され &lt;code&gt;this&lt;/code&gt; 各コールバックの値。</target>
        </trans-unit>
        <trans-unit id="3594748321e62e7bdbb192e86808f906b02d35c2" translate="yes" xml:space="preserve">
          <source>Calls a &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; function with arguments as specified by the &lt;code&gt;&lt;var&gt;argumentsList&lt;/var&gt;&lt;/code&gt; parameter. See also &lt;a href=&quot;function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Calls a &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; function with arguments as specified by the &lt;code&gt;&lt;var&gt;argumentsList&lt;/var&gt;&lt;/code&gt; parameter. See also &lt;a href=&quot;function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4d2cac206f8f3b6e52ce7731524dfbd26e537e1e" translate="yes" xml:space="preserve">
          <source>Calls a function and sets its &lt;code&gt;this&lt;/code&gt; to the provided &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt;. Arguments can be passed as an &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">Calls a function and sets its &lt;code&gt;this&lt;/code&gt; to the provided &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; . Arguments can be passed as an &lt;a href=&quot;array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="e5d0058f8e1cbf4b92fd726f1a826ae92e591626" translate="yes" xml:space="preserve">
          <source>Calls a function and sets its &lt;code&gt;this&lt;/code&gt; to the provided value. Arguments can be passed as they are.</source>
          <target state="translated">Calls a function and sets its &lt;code&gt;this&lt;/code&gt; to the provided value. Arguments can be passed as they are.</target>
        </trans-unit>
        <trans-unit id="36f7549cf84d65e8e7769e045872eccc8294d6e4" translate="yes" xml:space="preserve">
          <source>Calls a function and sets its &lt;em&gt;this&lt;/em&gt; to the provided value, arguments can be passed as an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">関数を呼び出し、&lt;em&gt;これ&lt;/em&gt;を指定された値に設定します。引数は&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクトとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3b09d006bb82d5a4c264605f63a1bd10e28dc317" translate="yes" xml:space="preserve">
          <source>Calls a function and sets its &lt;em&gt;this&lt;/em&gt; to the provided value, arguments can be passed as an &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">関数を呼び出し、&lt;em&gt;これ&lt;/em&gt;を指定された値に設定します。引数は&lt;a href=&quot;array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;オブジェクトとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b0e0146189882ee8e04fff56d3944d2d03acdb88" translate="yes" xml:space="preserve">
          <source>Calls a function for each element in the array.</source>
          <target state="translated">配列の各要素に対して関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b4e174aca340d974eda375094f3873ba6f49a1de" translate="yes" xml:space="preserve">
          <source>Calls a function for each element in the array. See also &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内の各要素の関数を呼び出します。&lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="fca1c9d7e964ddedab04d30530ab836310a60c9e" translate="yes" xml:space="preserve">
          <source>Calls a function for each element in the array. See also &lt;a href=&quot;array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内の各要素の関数を呼び出します。&lt;a href=&quot;array/foreach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="212f094d04a22c9ac2e2bbf28e3e6aa87dd373e3" translate="yes" xml:space="preserve">
          <source>Calls a target function with arguments as specified by the &lt;code&gt;args&lt;/code&gt; parameter. See also &lt;a href=&quot;function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; パラメータで指定された引数でターゲット関数を呼び出します。&lt;a href=&quot;function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="96510284b9c7d34dfc5d4219cb5ed3647d47d48b" translate="yes" xml:space="preserve">
          <source>Calls callbackFn once for each key-value pair present in the &lt;code&gt;Map&lt;/code&gt; object, in insertion order. If a thisArg parameter is provided to forEach, it will be used as the this value for each callback.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクトに存在するキーと値のペアごとに、callbackFn を挿入順に1回呼び出します。thisArgパラメータがforEachに提供されている場合、各コールバックのthis値として使用されます。</target>
        </trans-unit>
        <trans-unit id="2fcb6937ffe306468d9d6341f2c2b0711cb864cb" translate="yes" xml:space="preserve">
          <source>Can I put a &lt;code&gt;default&lt;/code&gt; between cases?</source>
          <target state="translated">Can I put a &lt;code&gt;default&lt;/code&gt; between cases?</target>
        </trans-unit>
        <trans-unit id="193f9932fdf9edf2457858d4680968cd3cdbdc42" translate="yes" xml:space="preserve">
          <source>Can I put a default between cases?</source>
          <target state="translated">ケース間にデフォルトを入れることはできますか?</target>
        </trans-unit>
        <trans-unit id="69ec9025ffcb602ac7cb3c0b98a529f094fa30eb" translate="yes" xml:space="preserve">
          <source>Can be converted to:</source>
          <target state="translated">に変換することができます。</target>
        </trans-unit>
        <trans-unit id="772956de60ed5504e26d8561e1c902e102b0db98" translate="yes" xml:space="preserve">
          <source>Can not be used as &lt;code&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Can not be used as &lt;code&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructors&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a03c4726a68aa3c5301aaef47f2e386ce661c57e" translate="yes" xml:space="preserve">
          <source>Can not use &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt;, within its body.</source>
          <target state="translated">Can not use &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; , within its body.</target>
        </trans-unit>
        <trans-unit id="857d5f648425a0efc56254b89efdbfc0c12bb65f" translate="yes" xml:space="preserve">
          <source>Candidate (3)</source>
          <target state="translated">候補者 (3)</target>
        </trans-unit>
        <trans-unit id="a7f5e4b809d5399b107f212ff2236558b40af3f2" translate="yes" xml:space="preserve">
          <source>Cannot change the value of a property to be different from the value of the corresponding target object property if the corresponding target object property is a non-writable, non-configurable data property.</source>
          <target state="translated">対応するターゲット・オブジェクト・プロパティが書き換え不可能な、設定不可能なデータ・プロパティである場合、プロパティの値を対応するターゲット・オブジェクト・プロパティの値とは異なる値に変更することはできません。</target>
        </trans-unit>
        <trans-unit id="5227cc47318ced556addb0fb0570438b92aa0b4d" translate="yes" xml:space="preserve">
          <source>Cannot set the value of a property if the corresponding target object property is a non-configurable accessor property that has &lt;code&gt;undefined&lt;/code&gt; as its [[Set]] attribute.</source>
          <target state="translated">対応するターゲットオブジェクトプロパティが、[[Set]]属性として &lt;code&gt;undefined&lt;/code&gt; 設定不可能なアクセサープロパティである場合、プロパティの値を設定できません。</target>
        </trans-unit>
        <trans-unit id="80571b58aaaeb0b704cda407a24b8a006fd1aa06" translate="yes" xml:space="preserve">
          <source>Canonical Decomposition, followed by Canonical Composition.</source>
          <target state="translated">カノニカル分解、続いてカノニカルコンポジション。</target>
        </trans-unit>
        <trans-unit id="877dfd797913376f8e15c59bf278932d979a66a4" translate="yes" xml:space="preserve">
          <source>Canonical Decomposition.</source>
          <target state="translated">正準分解。</target>
        </trans-unit>
        <trans-unit id="fb1512e3e8f1f68c04addc04ef3bd4a5eae6dbd7" translate="yes" xml:space="preserve">
          <source>Canonical equivalence normalization</source>
          <target state="translated">正準等価正規化</target>
        </trans-unit>
        <trans-unit id="8db520a3f09f2b998ddd13d07e46b10c70323685" translate="yes" xml:space="preserve">
          <source>Cant access lexical declaration before init</source>
          <target state="translated">init の前に語彙宣言にアクセスできない</target>
        </trans-unit>
        <trans-unit id="ceb052af6694338d4ca7f970e15c5e474e927257" translate="yes" xml:space="preserve">
          <source>Cant access property</source>
          <target state="translated">缶は特性にアクセスします</target>
        </trans-unit>
        <trans-unit id="6cddf0ea095f935a5dfdfa4a63cb8bc6c2683704" translate="yes" xml:space="preserve">
          <source>Cant define property object not extensible</source>
          <target state="translated">拡張可能ではないプロパティオブジェクトを定義することはできません</target>
        </trans-unit>
        <trans-unit id="64d8bae6685aa9295032aec1eb9e7127a8dffd66" translate="yes" xml:space="preserve">
          <source>Cant delete</source>
          <target state="translated">カント削除</target>
        </trans-unit>
        <trans-unit id="53fda823e63c79adb65308d70cd1e546ca255fa1" translate="yes" xml:space="preserve">
          <source>Cant redefine property</source>
          <target state="translated">カントのプロパティを再定義することはできません</target>
        </trans-unit>
        <trans-unit id="968a449286e7dba99d61444f2f3c3b4ce94286e4" translate="yes" xml:space="preserve">
          <source>Capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer non-capturing parentheses (see below).</source>
          <target state="translated">グループをキャプチャするとパフォーマンスが低下します。マッチした部分文字列を呼び出す必要がない場合は、 キャプチャしない括弧を使うとよいでしょう (以下を参照)。</target>
        </trans-unit>
        <trans-unit id="159392d633c2cffbc6a491daf2bedda249a234bf" translate="yes" xml:space="preserve">
          <source>Carriage Return</source>
          <target state="translated">キャリッジリターン</target>
        </trans-unit>
        <trans-unit id="37160635d7fcea80b889e50c530839adfee56375" translate="yes" xml:space="preserve">
          <source>Case folding is implemented in version 13</source>
          <target state="translated">ケース折りたたみはバージョン13で実装されています</target>
        </trans-unit>
        <trans-unit id="0f3ded69256e3963f4a988788ac30cda1f845698" translate="yes" xml:space="preserve">
          <source>Case folding is implemented in version 8.6.0</source>
          <target state="translated">ケース折りたたみはバージョン8.6.0で実装されています。</target>
        </trans-unit>
        <trans-unit id="d40586098bcb31c0615249ab2992b8cddbf26177" translate="yes" xml:space="preserve">
          <source>Case-insensitive search.</source>
          <target state="translated">大文字小文字を区別しない検索。</target>
        </trans-unit>
        <trans-unit id="42a4f5b1edd00e96ccdcd395b8d7ad27fdb67d58" translate="yes" xml:space="preserve">
          <source>Case-sensitivity</source>
          <target state="translated">Case-sensitivity</target>
        </trans-unit>
        <trans-unit id="fc1abe74bd4ac1d8b2552132bda2e7eda851c06c" translate="yes" xml:space="preserve">
          <source>Catching a &lt;code&gt;ReferenceError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ReferenceError&lt;/code&gt; のキャッチ</target>
        </trans-unit>
        <trans-unit id="ae22123a234e448c41ac11520930d854ff6f6c53" translate="yes" xml:space="preserve">
          <source>Catching a &lt;code&gt;SyntaxError&lt;/code&gt;</source>
          <target state="translated">キャッチ &lt;code&gt;SyntaxError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a67f726138638a207f598c0a8d70a3a5cd069f26" translate="yes" xml:space="preserve">
          <source>Catching a &lt;code&gt;TypeError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; のキャッチ</target>
        </trans-unit>
        <trans-unit id="04402809781943ccfc6c9cfaf50df6c3961bf23d" translate="yes" xml:space="preserve">
          <source>Catching a ReferenceError</source>
          <target state="translated">ReferenceErrorのキャッチ</target>
        </trans-unit>
        <trans-unit id="5edd9bc4aa66a56f3c2d894fe68f1e141b7b6c29" translate="yes" xml:space="preserve">
          <source>Catching a SyntaxError</source>
          <target state="translated">SyntaxError のキャッチ</target>
        </trans-unit>
        <trans-unit id="eeb17c4d826a75dd22a9e18dd874ccd7c77023fa" translate="yes" xml:space="preserve">
          <source>Catching a TypeError</source>
          <target state="translated">TypeErrorのキャッチ</target>
        </trans-unit>
        <trans-unit id="66b684e76a6cbe5d74c7bf8d68a3d7ce0fbf9a7b" translate="yes" xml:space="preserve">
          <source>Catching an &lt;code&gt;URIError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;URIError&lt;/code&gt; をキャッチする</target>
        </trans-unit>
        <trans-unit id="0d74940232cfc4f01ef267ce26fa5c668400a878" translate="yes" xml:space="preserve">
          <source>Catching an URIError</source>
          <target state="translated">URIErrorのキャッチ</target>
        </trans-unit>
        <trans-unit id="9417ed24965e3b15bb78730b447c82b48c97f1e0" translate="yes" xml:space="preserve">
          <source>Catching errors</source>
          <target state="translated">キャッチエラー</target>
        </trans-unit>
        <trans-unit id="0e8f0f0fd420495e939a7cfe7aa1cb89f252cd29" translate="yes" xml:space="preserve">
          <source>Chained Promises</source>
          <target state="translated">鎖付き約束</target>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes" xml:space="preserve">
          <source>Chaining</source>
          <target state="translated">Chaining</target>
        </trans-unit>
        <trans-unit id="afb6cfa111e784e9b1307fa3011033d8673fb57c" translate="yes" xml:space="preserve">
          <source>Chaining function calls</source>
          <target state="translated">関数呼び出しのチェイニング</target>
        </trans-unit>
        <trans-unit id="83805dad481f8eda906be98799a52ec52fd9332a" translate="yes" xml:space="preserve">
          <source>Change to &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; に変更</target>
        </trans-unit>
        <trans-unit id="4bae4c84ac55b0db3e5795375e15e78d0ec525e5" translate="yes" xml:space="preserve">
          <source>Changed that generator methods should also not have a [[Construct]] trap and will throw when used with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">ジェネレーターメソッドにも[[Construct]]トラップがなく、 &lt;code&gt;new&lt;/code&gt; で使用するとスローされるように変更しました。</target>
        </trans-unit>
        <trans-unit id="479e48122230cd898c40b37870004b3ac000fde5" translate="yes" xml:space="preserve">
          <source>Changed that generators should not have [[Construct]] trap and will throw when used with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">ジェネレーターが[[Construct]]トラップを持たないようにし、 &lt;code&gt;new&lt;/code&gt; で使用するとスローされるように変更しました。</target>
        </trans-unit>
        <trans-unit id="1bb3f9f06e25e53e48e9b120b80f043fa26acda1" translate="yes" xml:space="preserve">
          <source>Changes in strict mode</source>
          <target state="translated">厳格なモードでの変更</target>
        </trans-unit>
        <trans-unit id="e92beb6824637c63ce2f1c3b59d875dc39b4b038" translate="yes" xml:space="preserve">
          <source>Changes to the &lt;code&gt;Object&lt;/code&gt; prototype object are seen by &lt;strong&gt;all&lt;/strong&gt; objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain. This provides a very powerful although potentially dangerous mechanism to override or extend object behavior.</source>
          <target state="translated">変更 &lt;code&gt;Object&lt;/code&gt; プロトタイプオブジェクトはによって見られる&lt;strong&gt;すべての&lt;/strong&gt;これらの変更のプロパティとメソッド対象がプロトタイプチェーンに沿ってさらに上書きされない限り、プロトタイプチェーンを介してオブジェクト。これは非常に強力ですが、オブジェクトの動作をオーバーライドまたは拡張する潜在的に危険なメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="1dc0b26d4bf7240f67754c1adcd01a4c7445afc2" translate="yes" xml:space="preserve">
          <source>Changing the constructor of a function</source>
          <target state="translated">関数のコンストラクタを変更する</target>
        </trans-unit>
        <trans-unit id="d0cf536bc57d40a4f5a94263457fbe66091624f5" translate="yes" xml:space="preserve">
          <source>Changing the constructor of an object</source>
          <target state="translated">オブジェクトのコンストラクタを変更する</target>
        </trans-unit>
        <trans-unit id="cb6cc576576581f057ef011656a91eaaca063dbf" translate="yes" xml:space="preserve">
          <source>Chapter about JavaScript classes introduced in ECMAScript 2015.</source>
          <target state="translated">ECMAScript 2015で導入されたJavaScriptクラスについての章。</target>
        </trans-unit>
        <trans-unit id="63c9a66eb6c66063b1b10fe8596c803c58cbd60d" translate="yes" xml:space="preserve">
          <source>Chapter about JavaScript functions.</source>
          <target state="translated">JavaScriptの機能についての章。</target>
        </trans-unit>
        <trans-unit id="60668b1994544deb729e910abf30842b6407c838" translate="yes" xml:space="preserve">
          <source>Chapter about JavaScript version history.</source>
          <target state="translated">JavaScriptのバージョン履歴についての章。</target>
        </trans-unit>
        <trans-unit id="423fe430ed25af9d3fa6a149b31770b5ad11826d" translate="yes" xml:space="preserve">
          <source>Chapter about specific errors, exceptions and warnings thrown by JavaScript.</source>
          <target state="translated">JavaScriptが投げる具体的なエラー、例外、警告についての章です。</target>
        </trans-unit>
        <trans-unit id="ee9946c82d4a077c5be79e3015a3d2479d9fcaf2" translate="yes" xml:space="preserve">
          <source>Character</source>
          <target state="translated">Character</target>
        </trans-unit>
        <trans-unit id="89a0d26064c88761be4481b9b52065531e5e024c" translate="yes" xml:space="preserve">
          <source>Character Classes</source>
          <target state="translated">文字クラス</target>
        </trans-unit>
        <trans-unit id="0e7c11d7a7200a36005057b0e953e12aae6033f0" translate="yes" xml:space="preserve">
          <source>Character Sets</source>
          <target state="translated">キャラクターセット</target>
        </trans-unit>
        <trans-unit id="45c55510b8e6ddea96a28172e7f341683b02bdc7" translate="yes" xml:space="preserve">
          <source>Character access</source>
          <target state="translated">文字アクセス</target>
        </trans-unit>
        <trans-unit id="536f0f1015299e73ab8379e221c9a9f5233e3f04" translate="yes" xml:space="preserve">
          <source>Character tabulation</source>
          <target state="translated">文字集計</target>
        </trans-unit>
        <trans-unit id="67b1bbfc35c89d4dcc994be3e6c61f07a3fd9429" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called &lt;code&gt;stringName&lt;/code&gt; is &lt;code&gt;stringName.length - 1&lt;/code&gt;. If the &lt;code&gt;index&lt;/code&gt; you supply is out of this range, JavaScript returns an empty string.</source>
          <target state="translated">文字列内の文字は、左から右にインデックスされます。最初の文字のインデックスは0で、 &lt;code&gt;stringName&lt;/code&gt; という文字列の最後の文字のインデックスは &lt;code&gt;stringName.length - 1&lt;/code&gt; です。指定した &lt;code&gt;index&lt;/code&gt; がこの範囲外の場合、JavaScriptは空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="a3a430bf0019fde9e5035e898a80f9a9a264979e" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is &lt;code&gt;str.length - 1&lt;/code&gt;.</source>
          <target state="translated">文字列内の文字は、左から右にインデックスされます。最初の文字のインデックスは0で、最後の文字のインデックスは &lt;code&gt;str.length - 1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="35117224c0b2f55971d08a800cf983c9401503a4" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called &lt;code&gt;stringName&lt;/code&gt; is &lt;code&gt;stringName.length - 1&lt;/code&gt;.</source>
          <target state="translated">文字列内の文字は、左から右にインデックスされます。最初の文字のインデックスは0で、 &lt;code&gt;stringName&lt;/code&gt; という文字列の最後の文字のインデックスは &lt;code&gt;stringName.length - 1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3696b5e78c0dffcae6e7eaf0428b1d94aed98132" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is &lt;code&gt;0&lt;/code&gt;, and the index of the last character is &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 1&lt;/code&gt;.</source>
          <target state="translated">Characters in a string are indexed from left to right. The index of the first character is &lt;code&gt;0&lt;/code&gt; , and the index of the last character is &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2caaa9704db83aeed48dbfe94ff30de8a659365c" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is &lt;code&gt;0&lt;/code&gt;, and the index of the last character of a string called &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;.length - 1&lt;/code&gt;.</source>
          <target state="translated">Characters in a string are indexed from left to right. The index of the first character is &lt;code&gt;0&lt;/code&gt; , and the index of the last character of a string called &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;.length - 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0c9af5fa1238c13a5e4c6073e20c38fab650935" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is &lt;code&gt;0&lt;/code&gt;, and the index of the last character&amp;mdash;in a string called &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;&lt;/code&gt;&amp;mdash;is &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;.length - 1&lt;/code&gt;. If the &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; you supply is out of this range, JavaScript returns an empty string.</source>
          <target state="translated">Characters in a string are indexed from left to right. The index of the first character is &lt;code&gt;0&lt;/code&gt; , and the index of the last character&amp;mdash;in a string called &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;&lt;/code&gt; &amp;mdash;is &lt;code&gt;&lt;var&gt;stringName&lt;/var&gt;.length - 1&lt;/code&gt; . If the &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; you supply is out of this range, JavaScript returns an empty string.</target>
        </trans-unit>
        <trans-unit id="0170a1fee39ff37af419f1b3ee3ae3fea96051d3" translate="yes" xml:space="preserve">
          <source>Check browser support for extended arguments</source>
          <target state="translated">拡張引数のブラウザサポートを確認する</target>
        </trans-unit>
        <trans-unit id="25068dcc83b92a8b7e8ef58133df57f8ff115074" translate="yes" xml:space="preserve">
          <source>Check if you are in the correct scope. Should this constant appear in this scope or was it meant to appear in a function, for example?</source>
          <target state="translated">正しいスコープに入っているかどうかを確認します。この定数はこのスコープに表示されるべきなのか、それとも関数などに表示されることを意味していたのか。</target>
        </trans-unit>
        <trans-unit id="01525f626a795bc22815e04a455bae77bfb137c2" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_Compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and &lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments&lt;/a&gt; for feature detection.</source>
          <target state="translated">「&lt;a href=&quot;#Browser_Compatibility&quot;&gt;ブラウザーの互換性」&lt;/a&gt;セクションをチェックして、 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数をサポートしているブラウザーを&lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;確認し &lt;code&gt;locales&lt;/code&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt;、機能検出のためのロケールとオプションの引数のサポートを確認します。</target>
        </trans-unit>
        <trans-unit id="f7a65cc5d2df77be22c6b275f9c4817bb0a5efc7" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_Compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and the &lt;a href=&quot;#Example:_Checking_for_support_for_locales_and_options_arguments&quot;&gt;Example: Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments&lt;/a&gt; for feature detection.</source>
          <target state="translated">「&lt;a href=&quot;#Browser_Compatibility&quot;&gt;ブラウザーの互換性」&lt;/a&gt;セクションをチェックして、 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数をサポートしているブラウザー、および&lt;a href=&quot;#Example:_Checking_for_support_for_locales_and_options_arguments&quot;&gt;例： &lt;code&gt;locales&lt;/code&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt;機能検出のためのロケールとオプションの引数のサポートの確認を確認してください。</target>
        </trans-unit>
        <trans-unit id="245374780def29c61ce1165c1fdbe13bc3583f38" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility table&lt;/a&gt; carefully before using this in production.</source>
          <target state="translated">チェック &lt;a href=&quot;#Browser_compatibility&quot;&gt;&lt;/a&gt;これを本番環境で使用する前にブラウザ互換性テーブルを注意深く。</target>
        </trans-unit>
        <trans-unit id="48cf3564e854e04d30104437ef4e3e4d44f37cb2" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and &lt;a href=&quot;#Check_browser_support_for_extended_arguments&quot;&gt;Check browser support for extended arguments&lt;/a&gt; for feature detection.</source>
          <target state="translated">「&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザーの互換性」&lt;/a&gt;セクションをチェックして、どのブラウザーが &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を&lt;a href=&quot;#Check_browser_support_for_extended_arguments&quot;&gt;サポートしているかを確認し、ブラウザーのサポート&lt;/a&gt;で機能検出の拡張引数を確認してください。</target>
        </trans-unit>
        <trans-unit id="f80c9d0733b71fdc9860c7dbe39fec2c83bba5d7" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and the &lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;Example: Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments&lt;/a&gt; for feature detection.</source>
          <target state="translated">「&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザーの互換性」&lt;/a&gt;セクションをチェックして、 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数をサポートしているブラウザー、および&lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;例： &lt;code&gt;locales&lt;/code&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt;機能検出のためのロケールとオプションの引数のサポートの確認を確認してください。</target>
        </trans-unit>
        <trans-unit id="0429fb6eeb4e98571016558b14e9f2c0b1253bc9" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and the Example: &lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;Checking for support for locales and options arguments&lt;/a&gt; for feature detection.</source>
          <target state="translated">「&lt;a href=&quot;#Browser_compatibility&quot;&gt;ブラウザーの互換性」&lt;/a&gt;セクションをチェックして、 &lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数をサポートしているブラウザー、および例：機能検出の&lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;ためのロケールとオプションの引数のサポートの確認を確認してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4867d558aef432b9d28dac1b27502e619090fc40" translate="yes" xml:space="preserve">
          <source>Check to ensure the previous lines / declaration does not end with a comma instead of a semi-colon.</source>
          <target state="translated">前の行/宣言がセミコロンではなくカンマで終わっていないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="ad7d828d07110519d233bc6d31f6990d2639286b" translate="yes" xml:space="preserve">
          <source>Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数のサポートの確認</target>
        </trans-unit>
        <trans-unit id="c830fd591c56ff15f9230ea09e1297b1b745b2fa" translate="yes" xml:space="preserve">
          <source>Checking for support for locales and options arguments</source>
          <target state="translated">ロケールとオプション引数のサポートをチェックする</target>
        </trans-unit>
        <trans-unit id="8c9a5804172e6be2b4b01d8ac43b740c1002d8b3" translate="yes" xml:space="preserve">
          <source>Checking if an object is dead</source>
          <target state="translated">オブジェクトが死んでいるかどうかのチェック</target>
        </trans-unit>
        <trans-unit id="b8c65930befa58265ea2e6b8c3ed29591458c85f" translate="yes" xml:space="preserve">
          <source>Checking if property definition has been successful</source>
          <target state="translated">プロパティの定義が成功したかどうかの確認</target>
        </trans-unit>
        <trans-unit id="70029cb4f538112f0598c035cff6dcd78d29f471" translate="yes" xml:space="preserve">
          <source>Checking occurrences</source>
          <target state="translated">発生状況の確認</target>
        </trans-unit>
        <trans-unit id="13ebc3aee732bbc914165b97900a2dd6e93e9aa0" translate="yes" xml:space="preserve">
          <source>Checking the instance of an object</source>
          <target state="translated">オブジェクトのインスタンスをチェックする</target>
        </trans-unit>
        <trans-unit id="d784f9079d0b1ed3546113c218b2b80cdd4b5940" translate="yes" xml:space="preserve">
          <source>Checking whether a value exists in an array</source>
          <target state="translated">配列に値が存在するかどうかのチェック</target>
        </trans-unit>
        <trans-unit id="742e78f3e91fee3483ddd25bf992577b5ea16c43" translate="yes" xml:space="preserve">
          <source>Checking whether a value exists using an arrow function</source>
          <target state="translated">矢印関数を使って値が存在するかどうかを調べる</target>
        </trans-unit>
        <trans-unit id="e6694cfbbafef813e8f957ea844523dcc8fc9359" translate="yes" xml:space="preserve">
          <source>Checking whether values are numeric</source>
          <target state="translated">値が数値かどうかの確認</target>
        </trans-unit>
        <trans-unit id="218e75c7a912404b048fff0747e40108873b6334" translate="yes" xml:space="preserve">
          <source>Chrome</source>
          <target state="translated">Chrome</target>
        </trans-unit>
        <trans-unit id="7a65851cb092c55a9c0f7d28ab0033b657820895" translate="yes" xml:space="preserve">
          <source>Chrome 37 (and below) has a &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=3448&quot;&gt;bug&lt;/a&gt; where an attempt to define a &quot;prototype&quot; property, on a function, with &lt;code&gt;writable: false&lt;/code&gt; doesn't work as expected.</source>
          <target state="translated">Chrome 37 (and below) has a &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=3448&quot;&gt;bug&lt;/a&gt; where an attempt to define a &quot;prototype&quot; property, on a function, with &lt;code&gt;writable: false&lt;/code&gt; doesn't work as expected.</target>
        </trans-unit>
        <trans-unit id="2ca75d529d9e37ce916254ef4065840afe16cb6c" translate="yes" xml:space="preserve">
          <source>Chrome 37 (and below) specific notes</source>
          <target state="translated">Chrome 37(以下)特有の注意事項</target>
        </trans-unit>
        <trans-unit id="1bc76fcce779da9b7294b7917bea607eed2865c4" translate="yes" xml:space="preserve">
          <source>Chrome disabled &lt;code&gt;SharedArrayBuffer&lt;/code&gt; on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This is intended as a temporary measure until other mitigations are in place.</source>
          <target state="translated">Chrome は2018年1月5日に &lt;code&gt;SharedArrayBuffer&lt;/code&gt; を無効にして、&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;投機的なサイドチャネル攻撃の&lt;/a&gt;効果を減らしました。これは、他の緩和策が実施されるまでの一時的な手段として意図されています。</target>
        </trans-unit>
        <trans-unit id="f46551e1ef3a452fa46817707b191c83ac38094f" translate="yes" xml:space="preserve">
          <source>Chrome disabled &lt;code&gt;SharedArrayBuffer&lt;/code&gt; on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This was a temporary removal while mitigations were put in place.</source>
          <target state="translated">Chrome は2018年1月5日に &lt;code&gt;SharedArrayBuffer&lt;/code&gt; を無効にして、&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;投機的なサイドチャネル攻撃の&lt;/a&gt;効果を減らしました。これは、緩和策が講じられている間の一時的な削除でした。</target>
        </trans-unit>
        <trans-unit id="5ce37c3b8bf3a38ca7fcfbb76e8e28879d0100bb" translate="yes" xml:space="preserve">
          <source>Chrome disabled SharedArrayBuffer on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This is intended as a temporary measure until other mitigations are in place.</source>
          <target state="translated">Chromeは2018年1月5日にSharedArrayBufferを無効にして、&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;投機的なサイドチャネル攻撃の&lt;/a&gt;効果を減らしました。これは、他の緩和策が実施されるまでの一時的な手段として意図されています。</target>
        </trans-unit>
        <trans-unit id="a98d66902acd22fd0965bfed20780ce505de06f9" translate="yes" xml:space="preserve">
          <source>Chrome disabled SharedArrayBuffer on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This was a temporary removal while mitigations were put in place.</source>
          <target state="translated">Chromeは2018年1月5日にSharedArrayBufferを無効にして、&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;投機的なサイドチャネル攻撃の&lt;/a&gt;効果を減らしました。これは、緩和策が講じられている間の一時的な削除でした。</target>
        </trans-unit>
        <trans-unit id="d099f88b010d4398cebebe8e633ffe4874c4aa01" translate="yes" xml:space="preserve">
          <source>Chrome for Android</source>
          <target state="translated">Chrome for Android</target>
        </trans-unit>
        <trans-unit id="1ad6eacf907a8e577b51ed2386597a7f6f70f9d7" translate="yes" xml:space="preserve">
          <source>Chrome, Opera (V8)</source>
          <target state="translated">Chrome、Opera (V8)</target>
        </trans-unit>
        <trans-unit id="1b7351d5a86a31280da0f41dc40b7ceed76e184e" translate="yes" xml:space="preserve">
          <source>Circular references</source>
          <target state="translated">回覧板</target>
        </trans-unit>
        <trans-unit id="ec03a926866f57741f7a227b4d38f9ebb70d4c1f" translate="yes" xml:space="preserve">
          <source>Class body and method definitions</source>
          <target state="translated">クラス本体とメソッドの定義</target>
        </trans-unit>
        <trans-unit id="a63af16b434d9e15731c58d422c6d699bcd88cab" translate="yes" xml:space="preserve">
          <source>Class constructor</source>
          <target state="translated">クラスコンストラクタ</target>
        </trans-unit>
        <trans-unit id="b962feed9b53d905a946d8343f4d11fa49293614" translate="yes" xml:space="preserve">
          <source>Class context</source>
          <target state="translated">クラスコンテキスト</target>
        </trans-unit>
        <trans-unit id="40c69a9ab1aa40a9a4ae362841d5877c79410c42" translate="yes" xml:space="preserve">
          <source>Class declaration</source>
          <target state="translated">クラス宣言</target>
        </trans-unit>
        <trans-unit id="92812dbecd62945462d6707495446285d5a7ed58" translate="yes" xml:space="preserve">
          <source>Class declarations</source>
          <target state="translated">クラス宣言</target>
        </trans-unit>
        <trans-unit id="cadac57d671500e625355754fa346cbd8408f86f" translate="yes" xml:space="preserve">
          <source>Class declarations are not &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; (unlike &lt;a href=&quot;function&quot;&gt;function declarations&lt;/a&gt;).</source>
          <target state="translated">クラス宣言は（&lt;a href=&quot;function&quot;&gt;関数宣言&lt;/a&gt;とは異なり）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;巻き上げられ&lt;/a&gt;ません。</target>
        </trans-unit>
        <trans-unit id="8c8e9baf3d5df03d5a58efdb1ddf8367cb56c047" translate="yes" xml:space="preserve">
          <source>Class error: too much recursion</source>
          <target state="translated">クラスエラー:再帰が多すぎる</target>
        </trans-unit>
        <trans-unit id="17339556e7ad7709847a75274febd591296e07e1" translate="yes" xml:space="preserve">
          <source>Class expressions</source>
          <target state="translated">クラス式</target>
        </trans-unit>
        <trans-unit id="21a6483d7e78da5eb5f6db4b7bc2082d19ced60a" translate="yes" xml:space="preserve">
          <source>Class expressions allow you to redefine (re-declare) classes &lt;strong&gt;without throwing&lt;/strong&gt; a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. This is not the case with &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;.</source>
          <target state="translated">Class expressions allow you to redefine (re-declare) classes &lt;strong&gt;without throwing&lt;/strong&gt; a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;. This is not the case with &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d4c53fdfff79071be301e33abe05bc51edbb8d46" translate="yes" xml:space="preserve">
          <source>Class expressions may omit the class name (&quot;binding identifier&quot;), which is not possible with &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;.</source>
          <target state="translated">Class expressions may omit the class name (&quot;binding identifier&quot;), which is not possible with &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="efafbd4b2c2d4ba12a0b4bae024f5186ec9a7d32" translate="yes" xml:space="preserve">
          <source>Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are not shared with ES5 classalike semantics.</source>
          <target state="translated">クラスはオブジェクトを作成するためのテンプレートです。それらは、そのデータを作業するためのコードでデータをカプセル化します。JSのクラスはプロトタイプの上に構築されていますが、ES5のクラスライクなセマンティクスと共有されていない構文やセマンティクスも持っています。</target>
        </trans-unit>
        <trans-unit id="68a62711f21d061784f6184121613d134009b236" translate="yes" xml:space="preserve">
          <source>Classes are in fact &quot;special &lt;a href=&quot;functions&quot;&gt;functions&lt;/a&gt;&quot;, and just as you can define &lt;a href=&quot;operators/function&quot;&gt;function expressions&lt;/a&gt; and &lt;a href=&quot;statements/function&quot;&gt;function declarations&lt;/a&gt;, the class syntax has two components: &lt;a href=&quot;operators/class&quot;&gt;class expressions&lt;/a&gt; and &lt;a href=&quot;statements/class&quot;&gt;class declarations&lt;/a&gt;.</source>
          <target state="translated">クラスは実際には「特別な&lt;a href=&quot;functions&quot;&gt;関数&lt;/a&gt;」であり、&lt;a href=&quot;operators/function&quot;&gt;関数式&lt;/a&gt;と&lt;a href=&quot;statements/function&quot;&gt;関数宣言を&lt;/a&gt;定義できるのと同じように、クラス構文には、&lt;a href=&quot;operators/class&quot;&gt;クラス式&lt;/a&gt;と&lt;a href=&quot;statements/class&quot;&gt;クラス宣言&lt;/a&gt;という 2つのコンポーネントがあります。</target>
        </trans-unit>
        <trans-unit id="c240d1a5911ec065cfa8c1fc7e652b8cf7de4399" translate="yes" xml:space="preserve">
          <source>Classical inheritance with &lt;code&gt;Object.create()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.create()&lt;/code&gt; による従来の継承</target>
        </trans-unit>
        <trans-unit id="20827d1a03a342fab6d405f70d2610b9a815dbc4" translate="yes" xml:space="preserve">
          <source>Clever usage of &lt;code&gt;apply&lt;/code&gt; allows you to use built-in functions for some tasks that would probably have otherwise been written by looping over the array values.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; を巧妙に使用すると、配列値をループすることで作成された可能性のある一部のタスクに組み込み関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="159186d16cd85cfe1f0fd8c0967a81a8ce57d61e" translate="yes" xml:space="preserve">
          <source>Clever usage of &lt;code&gt;apply&lt;/code&gt; allows you to use built-in functions for some tasks, that otherwise probably would have been written by looping over the array values. As an example here we are going to use &lt;code&gt;Math.max&lt;/code&gt;/&lt;code&gt;Math.min&lt;/code&gt;, to find out the maximum/minimum value in an array.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; を上手に使用すると、一部のタスクに組み込み関数を使用できるようになります。それ以外の場合は、おそらく配列値をループすることによって作成されます。ここでは例として、 &lt;code&gt;Math.max&lt;/code&gt; / &lt;code&gt;Math.min&lt;/code&gt; を使用して、配列内の最大値/最小値を見つけます。</target>
        </trans-unit>
        <trans-unit id="adff11da65e94ea55758937a5d0bd27584629a58" translate="yes" xml:space="preserve">
          <source>Clipping a value with &lt;code&gt;Math.min()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.min()&lt;/code&gt; で値をクリッピングする</target>
        </trans-unit>
        <trans-unit id="a255299b6435865d997ac493e62aaa383097a14b" translate="yes" xml:space="preserve">
          <source>Clipping a value with Math.min()</source>
          <target state="translated">Math.min()で値をクリッピングする</target>
        </trans-unit>
        <trans-unit id="85fb0940516348e1a72a1f878103be3346084dda" translate="yes" xml:space="preserve">
          <source>Cloning an object</source>
          <target state="translated">オブジェクトのクローニング</target>
        </trans-unit>
        <trans-unit id="71427f396f56dccc094a99ad628b77b1002050dc" translate="yes" xml:space="preserve">
          <source>Cloning and merging &lt;code&gt;Maps&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Maps&lt;/code&gt; 複製とマージ</target>
        </trans-unit>
        <trans-unit id="5c66c8a399220ae7c6594525f99a3e2a47ae0c3c" translate="yes" xml:space="preserve">
          <source>Cloning and merging Maps</source>
          <target state="translated">マップの複製と結合</target>
        </trans-unit>
        <trans-unit id="b2cdd87c13a55b67b7a7053ea83d9f10ad1f2a19" translate="yes" xml:space="preserve">
          <source>Closes the generator, so that when calling &lt;code&gt;next()&lt;/code&gt; an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; error will be thrown. This corresponds to the &lt;code&gt;return()&lt;/code&gt; method in the ES2015 generator object.</source>
          <target state="translated">呼び出すときにそのことを、発電機を閉じ &lt;code&gt;next()&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration&quot;&gt; &lt;code&gt;StopIteration&lt;/code&gt; &lt;/a&gt;エラーがスローされます。これは、ES2015ジェネレーターオブジェクトの &lt;code&gt;return()&lt;/code&gt; メソッドに対応します。</target>
        </trans-unit>
        <trans-unit id="d736b1b3337c4a1e865bb10334f9e4f5bd3f7cf0" translate="yes" xml:space="preserve">
          <source>Closing iterators</source>
          <target state="translated">閉じたイテレータ</target>
        </trans-unit>
        <trans-unit id="16b1546bfaf51b2730baa3cec8823ad69c6d520a" translate="yes" xml:space="preserve">
          <source>Closures</source>
          <target state="translated">Closures</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="720f8fc81853680964ac25cfc1c4a554f966aad3" translate="yes" xml:space="preserve">
          <source>Code after each await expression can be thought of as existing in a &lt;code&gt;.then&lt;/code&gt; callback. In this way a promise chain is progressively constructed with each reentrant step through the function. The return value forms the final link in the chain.</source>
          <target state="translated">各await式の後のコードは、 &lt;code&gt;.then&lt;/code&gt; コールバックに存在すると考えることができます。このようにして、関数の各リエントラントステップでプロミスチェーンが段階的に構築されます。戻り値は、チェーンの最後のリンクを形成します。</target>
        </trans-unit>
        <trans-unit id="f60f36f4db67f21e71a72761d315435a9c529b04" translate="yes" xml:space="preserve">
          <source>Code point</source>
          <target state="translated">コードポイント</target>
        </trans-unit>
        <trans-unit id="76e2f93a7b66626151662333f42b2be7287b5233" translate="yes" xml:space="preserve">
          <source>Colons vs. equal signs</source>
          <target state="translated">コロン対等号</target>
        </trans-unit>
        <trans-unit id="dbf092f09b76a6f2453e282ef8f2b8bf433d9bb1" translate="yes" xml:space="preserve">
          <source>Column number in line that raised this error.</source>
          <target state="translated">このエラーが発生した行の列番号。</target>
        </trans-unit>
        <trans-unit id="ce2a9d862f97ecd682f9df7d2276f484b17c5a62" translate="yes" xml:space="preserve">
          <source>Column number in line that raised this error. Inherited from &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーを発生させた行の列番号。&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="45367426a5d0996e0279386d310f3aa188f6457c" translate="yes" xml:space="preserve">
          <source>Column number in line that raised this error. Inherited from &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーを発生させた行の列番号。&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;から継承されます。</target>
        </trans-unit>
        <trans-unit id="c151c81772760823598010a75dc1ec1f74a65c39" translate="yes" xml:space="preserve">
          <source>Combined Array and Object Destructuring</source>
          <target state="translated">配列とオブジェクトの複合的な構造化</target>
        </trans-unit>
        <trans-unit id="8332a3493504e95c2fca7108c5f7e5ae8d9fb54c" translate="yes" xml:space="preserve">
          <source>Combines the text of two (or more) strings and returns a new string.</source>
          <target state="translated">2つ(またはそれ以上)の文字列のテキストを結合し、新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="105b6ea34c923a2a3d6b66b9fe741254a5e89b96" translate="yes" xml:space="preserve">
          <source>Combines the text of two strings and returns a new string.</source>
          <target state="translated">2つの文字列のテキストを結合し、新しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="d625ea326feb65d6f24b54ebdef0a0bd95ae57ea" translate="yes" xml:space="preserve">
          <source>Comma / Sequence</source>
          <target state="translated">コンマ/シーケンス</target>
        </trans-unit>
        <trans-unit id="32bae387055126d95306c7bb6532b73268f5a2d5" translate="yes" xml:space="preserve">
          <source>Comma Operator</source>
          <target state="translated">コンマ演算子</target>
        </trans-unit>
        <trans-unit id="b506b24efb6525b0ee356cf0162e2de834afe47c" translate="yes" xml:space="preserve">
          <source>Comma operator</source>
          <target state="translated">コンマ演算子</target>
        </trans-unit>
        <trans-unit id="153d7a58b3a3e898fcbdd04c462af308414bd09d" translate="yes" xml:space="preserve">
          <source>Comment</source>
          <target state="translated">Comment</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="9a5e486ba0184d4b42fd4dcc0768b5f7d7ffa822" translate="yes" xml:space="preserve">
          <source>Comments are used to add hints, notes, suggestions, or warnings to JavaScript code. This can make it easier to read and understand. They can also be used to disable code to prevent it from being executed; this can be a valuable debugging tool.</source>
          <target state="translated">コメントは、JavaScriptのコードにヒント、メモ、提案、または警告を追加するために使用されます。これにより、読みやすく、理解しやすくすることができます。また、コードが実行されるのを防ぐためにコードを無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="e89188eb5b49b1238ddabeafbc3597fb0a0565e1" translate="yes" xml:space="preserve">
          <source>Common causes of memory leaks in extensions</source>
          <target state="translated">拡張機能のメモリリークの一般的な原因</target>
        </trans-unit>
        <trans-unit id="eacd29e150bf7f4b19b8fab3eb797604a6c1b6f2" translate="yes" xml:space="preserve">
          <source>Common operations</source>
          <target state="translated">共通操作</target>
        </trans-unit>
        <trans-unit id="0318a73036a46f0f8a141499cd73521dd9c49b95" translate="yes" xml:space="preserve">
          <source>Compare the following:</source>
          <target state="translated">以下を比較してみてください。</target>
        </trans-unit>
        <trans-unit id="7d7f628e8dcc4103d238aec5e6ea87d14dfb9dc3" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; と比較</target>
        </trans-unit>
        <trans-unit id="bb29c7581a6ad2220cfbf22c9e06c48492f18dde" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;fromCharCode()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fromCharCode()&lt;/code&gt; と比較</target>
        </trans-unit>
        <trans-unit id="d7c7b804472bb9c2221dba855c8979c36d47e19b" translate="yes" xml:space="preserve">
          <source>Compared to Object.getPrototypeOf()</source>
          <target state="translated">Object.getPrototypeOf()と比較して</target>
        </trans-unit>
        <trans-unit id="c486068f142dd18e8eae77363e6842b9a3922425" translate="yes" xml:space="preserve">
          <source>Compares if two values are the same value. Equates all &lt;code&gt;NaN&lt;/code&gt; values (which differs from both Abstract Equality Comparison and Strict Equality Comparison).</source>
          <target state="translated">2つの値が同じ値であるかどうかを比較します。すべての &lt;code&gt;NaN&lt;/code&gt; 値を等しくします（これは、抽象的同等性比較と厳密な同等性比較の両方とは異なります）。</target>
        </trans-unit>
        <trans-unit id="86214e3cdb8ec5301da0371f4da85bfd01cfe478" translate="yes" xml:space="preserve">
          <source>Compares if two values are the same value. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison).</source>
          <target state="translated">2つの値が同じ値かどうかを比較します。すべてのNaN値を等しくします(抽象的等比比較、厳格等比比較とは異なります)。</target>
        </trans-unit>
        <trans-unit id="118b25a45a8567ec63e03a40be7d32ee56d43ca2" translate="yes" xml:space="preserve">
          <source>Comparing actual source code and toString results</source>
          <target state="translated">実際のソースコードとtoStringの結果を比較する</target>
        </trans-unit>
        <trans-unit id="56636862149ba9455cfa10dcf654e98196d3820b" translate="yes" xml:space="preserve">
          <source>Comparing strings</source>
          <target state="translated">文字列の比較</target>
        </trans-unit>
        <trans-unit id="a5a33d9655bb4449a333726e1c96003dd5fa2185" translate="yes" xml:space="preserve">
          <source>Comparing the two code snippets above, the two code snippets might seem to work the same way, but think again: the &lt;code&gt;eval()&lt;/code&gt; one is a great deal slower. Notice &lt;code&gt;c: new Date()&lt;/code&gt; in the evaluated object. In the function without the &lt;code&gt;eval()&lt;/code&gt;, the object is being evaluated in the global scope, so it is safe for the browser to assume that &lt;code&gt;Date&lt;/code&gt; refers to &lt;code&gt;window.Date()&lt;/code&gt; instead of a local variable called &lt;code&gt;Date&lt;/code&gt;. But, in the code using &lt;code&gt;eval()&lt;/code&gt;, the browser cannot assume this since what if your code looked like the following:</source>
          <target state="translated">上記の2つのコードスニペットを比較すると、2つのコードスニペットは同じように機能するように見えるかもしれませんが、もう一度考えてみてください &lt;code&gt;eval()&lt;/code&gt; 方がはるかに低速です。 &lt;code&gt;c: new Date()&lt;/code&gt; 評価されたオブジェクトの新しいDate（）に注意してください。ない関数で &lt;code&gt;eval()&lt;/code&gt; ブラウザがいると仮定することが安全であるように、オブジェクトは、グローバルスコープで評価されている &lt;code&gt;Date&lt;/code&gt; を指す &lt;code&gt;window.Date()&lt;/code&gt; の代わりに呼ばれるローカル変数の &lt;code&gt;Date&lt;/code&gt; 。ただし、 &lt;code&gt;eval()&lt;/code&gt; を使用するコードでは、コードが次のようになっている場合はどうなるため、ブラウザーはこれを想定できません。</target>
        </trans-unit>
        <trans-unit id="491af6e089de075cb1cddc844a85aed35b1303e3" translate="yes" xml:space="preserve">
          <source>Comparing the two code snippets above, the two code snippets might seem to work the same way, but think again: the eval one is a huge amount slower. Notice &lt;code&gt;c: new Date()&lt;/code&gt; in the evaluated object. In the function without the eval, the object is being evaluated in the global scope, so it is safe for the browser to assume that &lt;code&gt;Date&lt;/code&gt; refers to &lt;code&gt;window.Date&lt;/code&gt; instead of a local variable called Date. But, in the code using &lt;code&gt;eval()&lt;/code&gt;, the browser cannot assume this since what if your code looked like the following:</source>
          <target state="translated">上記の2つのコードスニペットを比較すると、2つのコードスニペットは同じように機能するように見えるかもしれませんが、もう一度考えてみてください。evalの方がはるかに遅いです。注意 &lt;code&gt;c: new Date()&lt;/code&gt; 評価されたオブジェクトのnew Date（）。evalのない関数では、オブジェクトはグローバルスコープで評価されているので、ブラウザーが &lt;code&gt;Date&lt;/code&gt; を、Dateというローカル変数ではなく &lt;code&gt;window.Date&lt;/code&gt; を参照していると想定しても安全です。しかし、 &lt;code&gt;eval()&lt;/code&gt; を使用するコードでは、ブラウザーはこれを想定できません。コードが次のようになっている場合はどうなるでしょうか。</target>
        </trans-unit>
        <trans-unit id="25acda77b0bc6b058bd349dd6f4a271e2a967bfe" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
          <target state="translated">比較演算子</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">比較演算子</target>
        </trans-unit>
        <trans-unit id="f7cf7733ad31698cd2948e3b5515768590fe965e" translate="yes" xml:space="preserve">
          <source>Comparison to &lt;code&gt;Object.freeze()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.freeze()&lt;/code&gt; との比較</target>
        </trans-unit>
        <trans-unit id="863058f0e63c30ee906e3bbce288176602ad060e" translate="yes" xml:space="preserve">
          <source>Comparison to &lt;code&gt;Object.seal()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.seal()&lt;/code&gt; との比較</target>
        </trans-unit>
        <trans-unit id="84c310ee18192732f5f41f433768e9fdc502e226" translate="yes" xml:space="preserve">
          <source>Comparison to Object.freeze()</source>
          <target state="translated">Object.freeze()との比較</target>
        </trans-unit>
        <trans-unit id="d35d03b7a4c8b558b09f712f1601b7eb56fbc77b" translate="yes" xml:space="preserve">
          <source>Comparison to Object.seal()</source>
          <target state="translated">Object.seal()との比較</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="f0eb5b962a76dfc22be8c2924147afb0d49198c2" translate="yes" xml:space="preserve">
          <source>Compatibility Decomposition, followed by Canonical Composition.</source>
          <target state="translated">互換性分解、続いて正準合成。</target>
        </trans-unit>
        <trans-unit id="b1815c31757816e85d90ae44ac442929c748f375" translate="yes" xml:space="preserve">
          <source>Compatibility Decomposition.</source>
          <target state="translated">互換性分解。</target>
        </trans-unit>
        <trans-unit id="aa14260bdf74b305013dbe0eb489fd9cfcb55be0" translate="yes" xml:space="preserve">
          <source>Compatibility normalization</source>
          <target state="translated">互換性の正規化</target>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">互換性に関する注意事項</target>
        </trans-unit>
        <trans-unit id="5ee93b8114a847627da05b6864a97e8c2edfb449" translate="yes" xml:space="preserve">
          <source>Compatibility: Initializer expressions in strict mode</source>
          <target state="translated">互換性。厳密なモードでのイニシャライザ式</target>
        </trans-unit>
        <trans-unit id="85a643d85a7bc1c395fffe4965abcd6d3cee8b01" translate="yes" xml:space="preserve">
          <source>Compile streaming</source>
          <target state="translated">ストリーミングをコンパイル</target>
        </trans-unit>
        <trans-unit id="4edadadf34b13469bb7c5181d670c391f586c659" translate="yes" xml:space="preserve">
          <source>Compiles a &lt;a href=&quot;webassembly/module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; from WebAssembly binary code, leaving instantiation as a separate step.</source>
          <target state="translated">コンパイルA &lt;a href=&quot;webassembly/module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; WebAssemblyバイナリコードから、別個のステップとしてインスタンスを残します。</target>
        </trans-unit>
        <trans-unit id="664249a8a03a06b5d1b4502bc94ced0e7866d5fe" translate="yes" xml:space="preserve">
          <source>Compiles and instantiates a WebAssembly module directly from a streamed underlying source, returning both a &lt;code&gt;Module&lt;/code&gt; and its first &lt;code&gt;Instance&lt;/code&gt;.</source>
          <target state="translated">ストリームされた基になるソースから直接WebAssemblyモジュールをコンパイルしてインスタンス化し、 &lt;code&gt;Module&lt;/code&gt; とその最初の &lt;code&gt;Instance&lt;/code&gt; の両方を返します。</target>
        </trans-unit>
        <trans-unit id="911f7f5eac3ba8273725ec1d3db387cda14f141f" translate="yes" xml:space="preserve">
          <source>Components.utils</source>
          <target state="translated">Components.utils</target>
        </trans-unit>
        <trans-unit id="07f8764e8283c5cd23ee21bc8123623476958173" translate="yes" xml:space="preserve">
          <source>Composed and decomposed forms</source>
          <target state="translated">構成された形態と分解された形態</target>
        </trans-unit>
        <trans-unit id="cc1963966568b35f1dfb97c50835920d057cd441" translate="yes" xml:space="preserve">
          <source>Comprehensions can also be used to select items that match a particular expression. Here is a comprehension which selects only even numbers:</source>
          <target state="translated">理解度は、特定の式に一致する項目を選択することもできます。ここでは、偶数のみを選択する理解度を示します。</target>
        </trans-unit>
        <trans-unit id="cc308e35d01a7c0c62f2be0700a699d385238e8f" translate="yes" xml:space="preserve">
          <source>Computed Member Access</source>
          <target state="translated">計算されたメンバーのアクセス</target>
        </trans-unit>
        <trans-unit id="19c189a24c5620703893f1954702f4ee4ec17619" translate="yes" xml:space="preserve">
          <source>Computed index is less than 0</source>
          <target state="translated">計算されたインデックスが0未満</target>
        </trans-unit>
        <trans-unit id="e484a46433a25d96bc35a93363a29fc54d1bbffe" translate="yes" xml:space="preserve">
          <source>Computed object property names and destructuring</source>
          <target state="translated">計算されたオブジェクトのプロパティ名とデストラクチャリング</target>
        </trans-unit>
        <trans-unit id="38e65524c92dd7a22334161d17dd8cd47bc733c7" translate="yes" xml:space="preserve">
          <source>Computed properties</source>
          <target state="translated">計算されたプロパティ</target>
        </trans-unit>
        <trans-unit id="7af694c5daedbb7faa534e8cca9aa8e3c5f55491" translate="yes" xml:space="preserve">
          <source>Computed property names</source>
          <target state="translated">計算されたプロパティ名</target>
        </trans-unit>
        <trans-unit id="307662157329fcb91d6b28f35c93f41b749231f3" translate="yes" xml:space="preserve">
          <source>Computed property names, like on &lt;a href=&quot;object_initializer#Computed_property_names&quot;&gt;object literals&lt;/a&gt;, can be used with destructuring.</source>
          <target state="translated">&lt;a href=&quot;object_initializer#Computed_property_names&quot;&gt;オブジェクトリテラルの&lt;/a&gt;ような計算されたプロパティ名は、構造化解除で使用できます。</target>
        </trans-unit>
        <trans-unit id="617c1a87a356bb5fd1c8fea6579173c0cd30f204" translate="yes" xml:space="preserve">
          <source>Computes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.</source>
          <target state="translated">配列の指定されたインデックスの値と、指定された値とのビット単位でのANDを計算します。そのインデックスの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="54377381913d8f2011457eabfd73d70a6e09ed4b" translate="yes" xml:space="preserve">
          <source>Computes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.</source>
          <target state="translated">配列の指定されたインデックスの値に対して、指定された値を用いてビット単位でORを計算します。そのインデックスの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="6b1b0d880953605062c8257d6e6ec184de58f10f" translate="yes" xml:space="preserve">
          <source>Computes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.</source>
          <target state="translated">配列の指定されたインデックスの値に対して、指定された値を用いてビット単位のXORを計算します。そのインデックスの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="5f0cfa9ad99c05952864e47bc476176b7107b2bf" translate="yes" xml:space="preserve">
          <source>Concatenating nested arrays</source>
          <target state="translated">入れ子になった配列を連結する</target>
        </trans-unit>
        <trans-unit id="ac2767d0f7e7f0cb86fa006eb29854e1f7763a04" translate="yes" xml:space="preserve">
          <source>Concatenating three arrays</source>
          <target state="translated">3つの配列を連結する</target>
        </trans-unit>
        <trans-unit id="1c1f439cb831a1b986807dae1744e64d35932f75" translate="yes" xml:space="preserve">
          <source>Concatenating two arrays</source>
          <target state="translated">2つの配列を連結する</target>
        </trans-unit>
        <trans-unit id="f009b8655992624919bd06809038edd788850228" translate="yes" xml:space="preserve">
          <source>Concatenating values to an array</source>
          <target state="translated">値を配列に連結する</target>
        </trans-unit>
        <trans-unit id="65a3223edfe78b44881480bd3b13315475cbb809" translate="yes" xml:space="preserve">
          <source>Conceptually, the bitwise logical operators work as follows:</source>
          <target state="translated">概念的には、ビット単位の論理演算子は次のように動作します。</target>
        </trans-unit>
        <trans-unit id="c3accb895f001e39bb983a80902ba897c94294bd" translate="yes" xml:space="preserve">
          <source>Conditional</source>
          <target state="translated">Conditional</target>
        </trans-unit>
        <trans-unit id="b93d34fb0613df29c9293f6aa39fcf1c37c312ef" translate="yes" xml:space="preserve">
          <source>Conditional (ternary) operator</source>
          <target state="translated">条件付き(三項演算子</target>
        </trans-unit>
        <trans-unit id="9ef90b907268ba1801bb0b4e2788eac85ca72225" translate="yes" xml:space="preserve">
          <source>Conditional &lt;code&gt;catch&lt;/code&gt; clauses</source>
          <target state="translated">条件付き &lt;code&gt;catch&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="0dbde46110575d19c57e331505cceacbb06fd5c7" translate="yes" xml:space="preserve">
          <source>Conditional Operator</source>
          <target state="translated">条件付き演算子</target>
        </trans-unit>
        <trans-unit id="fe5308658956f3862b1f4c55cd795e3f8e333ead" translate="yes" xml:space="preserve">
          <source>Conditional catch-blocks</source>
          <target state="translated">条件付きキャッチブロック</target>
        </trans-unit>
        <trans-unit id="2326591cc0831be359f112e0c91dfe72ac4eb96e" translate="yes" xml:space="preserve">
          <source>Conditional chains</source>
          <target state="translated">条件付きチェーン</target>
        </trans-unit>
        <trans-unit id="2fa0e910d9d4f121492321dddf5292440d790aa9" translate="yes" xml:space="preserve">
          <source>Conditional clauses</source>
          <target state="translated">条件付き条項</target>
        </trans-unit>
        <trans-unit id="86d8c4f438a64027d9c179cbd6cac7228180ae16" translate="yes" xml:space="preserve">
          <source>Conditional operator</source>
          <target state="translated">条件付き演算子</target>
        </trans-unit>
        <trans-unit id="3fda7812175c64e3ab41628cd9802716ef9fc727" translate="yes" xml:space="preserve">
          <source>Conditional operator (&lt;code&gt;c ? t : f&lt;/code&gt;)</source>
          <target state="translated">条件演算子（ &lt;code&gt;c ? t : f&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5de626f2d03cb6ae24ef8cd5ca11f0802aaaef50" translate="yes" xml:space="preserve">
          <source>Conditionally created functions</source>
          <target state="translated">条件付きで作成された関数</target>
        </trans-unit>
        <trans-unit id="a4e77fa02ee4d7eef4123bbae308e1f9df3f6b90" translate="yes" xml:space="preserve">
          <source>Configurable</source>
          <target state="translated">Configurable</target>
        </trans-unit>
        <trans-unit id="fa1d2f966a0fd10317835f09c191de009929c07e" translate="yes" xml:space="preserve">
          <source>Configurable attribute</source>
          <target state="translated">設定可能な属性</target>
        </trans-unit>
        <trans-unit id="bf82819d030635f3616d335af38db53b4ca782bb" translate="yes" xml:space="preserve">
          <source>Configurable: true</source>
          <target state="translated">設定可能:true</target>
        </trans-unit>
        <trans-unit id="e6740e54be4bf7bebfb054bc3f7ea4a73033a8bb" translate="yes" xml:space="preserve">
          <source>Confusing special-case behavior</source>
          <target state="translated">特殊なケースの動作を混乱させる</target>
        </trans-unit>
        <trans-unit id="afff3902c0485f69a9239be70cc2fe2f7ab30190" translate="yes" xml:space="preserve">
          <source>Consequently, this means that if we move the call to &lt;code&gt;foo&lt;/code&gt; below the block statement that there will be no error:</source>
          <target state="translated">したがって、これは、 &lt;code&gt;foo&lt;/code&gt; への呼び出しをブロックステートメントの下に移動しても、エラーは発生しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="6259abedbd4365b11f86994237f3face8021b831" translate="yes" xml:space="preserve">
          <source>Consider &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number(value)&lt;/code&gt;&lt;/a&gt; for stricter parsing, which converts to &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; for arguments with invalid characters anywhere.</source>
          <target state="translated">より厳密な解析には&lt;a href=&quot;number&quot;&gt; &lt;code&gt;Number(value)&lt;/code&gt; &lt;/a&gt;を検討してください。これは、どこかに無効な文字が含まれる引数に対して&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;に変換されます。</target>
        </trans-unit>
        <trans-unit id="2bb4a2edceec224c2fb8b7574078efbc2964f9bd" translate="yes" xml:space="preserve">
          <source>Consider an expression describable by the representation below. Note that both OP&lt;sub&gt;1&lt;/sub&gt; and OP&lt;sub&gt;2&lt;/sub&gt; are fill-in-the-blanks for OPerators.</source>
          <target state="translated">以下の表現で記述できる式を考えてみましょう。OP両方のことに注意してください&lt;sub&gt;1&lt;/sub&gt;およびOP &lt;sub&gt;2は&lt;/sub&gt;フィル・イン・ザ・ブランクオペレータにとってあります。</target>
        </trans-unit>
        <trans-unit id="4087262f9e5f72b4779ebdaff63d7ea678845b1e" translate="yes" xml:space="preserve">
          <source>Consider the following 32-bit word:</source>
          <target state="translated">次の32ビットワードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">次のような例を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="ae5fe4fc241dc530b3f2599198d6f906bbc8d0b4" translate="yes" xml:space="preserve">
          <source>Consider the following rewrite of the above code. It returns &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;processDataInWorker&lt;/code&gt; rejects with an error:</source>
          <target state="translated">上記のコードを次のように書き直すことを検討してください。 &lt;code&gt;processDataInWorker&lt;/code&gt; がエラーで拒否した場合は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="05e8c69b3c94e09c38e4eb32292a78ec8abd4873" translate="yes" xml:space="preserve">
          <source>Consider the following sequence of statements:</source>
          <target state="translated">次のような一連の文を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1097d09f23a8ae8ac2f2dc6691fd019397c72788" translate="yes" xml:space="preserve">
          <source>Consider this example where &lt;a href=&quot;json/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; parses the string as JSON and &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; executes the string as JavaScript:</source>
          <target state="translated">&lt;a href=&quot;json/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt;が文字列をJSONとして解析し、&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;が文字列をJavaScriptとして実行する次の例について考えてみます。</target>
        </trans-unit>
        <trans-unit id="f879afb7d17477909333f6cc1384764175572ad8" translate="yes" xml:space="preserve">
          <source>Consider this example where &lt;a href=&quot;json/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; parses the string as JSON and &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; executes the string as JavaScript:</source>
          <target state="translated">&lt;a href=&quot;json/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt;が文字列をJSONとして解析し、 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; が文字列をJavaScriptとして実行する次の例を考えてみます。</target>
        </trans-unit>
        <trans-unit id="75e291169a2ebb63c935a5de7382990c0513d618" translate="yes" xml:space="preserve">
          <source>Consider:</source>
          <target state="translated">Consider:</target>
        </trans-unit>
        <trans-unit id="f271163897012ea113e0458faf0b411bb558e70b" translate="yes" xml:space="preserve">
          <source>Constants are block-scoped, much like variables declared using the &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared.</source>
          <target state="translated">定数は、 &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; キーワードを使用して宣言された変数と同様に、ブロックスコープです。定数の値は、再割り当てによって変更したり、再宣言したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="86ed688e045547761d8c2063419d36d27f127261" translate="yes" xml:space="preserve">
          <source>Constants are block-scoped, much like variables defined using the &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; statement. The value of a constant cannot change through reassignment, and it can't be redeclared.</source>
          <target state="translated">定数は、 &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; ステートメントを使用して定義された変数によく似た、ブロックスコープです。定数の値は再割り当てによって変更することはできず、再宣言することはできません。</target>
        </trans-unit>
        <trans-unit id="f1c4cabce89d398ea9bb0d2f807a82d51e817307" translate="yes" xml:space="preserve">
          <source>Constants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters.</source>
          <target state="translated">定数は大文字または小文字で宣言することができますが、一般的にはすべて大文字で宣言するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="89ae0dbddf1a08de084d0fb3ffe518f5eab25f1c" translate="yes" xml:space="preserve">
          <source>Constants in the JavaScript Guide</source>
          <target state="translated">JavaScriptガイドの定数</target>
        </trans-unit>
        <trans-unit id="dae821f8c9f730ab579a625f25871f1d8d15c48d" translate="yes" xml:space="preserve">
          <source>Constructing a date object with the identical time value.</source>
          <target state="translated">同一の時間値を持つ日付オブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="65381e1b5992ca2033fe30b317bcf4389b5e6159" translate="yes" xml:space="preserve">
          <source>Constructing is required with &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 演算子での構築が必要です</target>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="d2f527d8322b39105846cc404cb56869bbc8c4be" translate="yes" xml:space="preserve">
          <source>Constructor Syntax</source>
          <target state="translated">コンストラクタ構文</target>
        </trans-unit>
        <trans-unit id="1897132e23e336279ec91c173022580777e63c66" translate="yes" xml:space="preserve">
          <source>Constructor for collators, objects that enable language sensitive string comparison.</source>
          <target state="translated">言語に依存した文字列比較を可能にするオブジェクトであるコレータのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="912959f381578cd245b02e8d75daea430a43f298" translate="yes" xml:space="preserve">
          <source>Constructor for collators, which are objects that enable language-sensitive string comparison.</source>
          <target state="translated">言語に依存した文字列比較を可能にするオブジェクトである照合器のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="4e61d5b56d0afdcb3e6fec9e57b739aa825b4b65" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language sensitive date and time formatting.</source>
          <target state="translated">言語に依存した日付と時刻の書式設定を可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="b14db8342396212e059351367bede85af4ead8a8" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language sensitive number formatting.</source>
          <target state="translated">言語に依存した数値フォーマットを可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="a0dfac0315385572d82435ffa69382b5d01d0fdd" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language-sensitive date and time formatting.</source>
          <target state="translated">言語に依存しない日付と時刻の書式設定を可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="af666bb97a305b7c9c733ea8270a7abb5c56268b" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language-sensitive list formatting.</source>
          <target state="translated">言語依存のリストフォーマットを可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="9dc738a18e4cf9de03677227a06ac69e5479045e" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language-sensitive number formatting.</source>
          <target state="translated">言語依存の数値フォーマットを可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="05f9b45f199a867a88f6dd87c6f5e67162a5aaad" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language-sensitive relative time formatting.</source>
          <target state="translated">言語依存の相対時間フォーマットを可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="043054f68b5d4e3b1085a1572bdd068040395a87" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable plural sensitive formatting and plural language langue rules.</source>
          <target state="translated">複数の言語に対応した書式設定と複数の言語言語ルールを可能にするオブジェクトのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="b1c28ddfa1cdf97b18b2650dd1611ea8ccca8c63" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable plural-sensitive formatting and language-specific rules for plurals.</source>
          <target state="translated">複数形を考慮した書式設定と複数形のための言語固有のルールを可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="ad9f791f9dd0fd5e3a383bab57b97f1f906dc09e" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable the consistent translation of language, region and script display names.</source>
          <target state="translated">言語、地域、スクリプト表示名の一貫した翻訳を可能にするオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="8b3af765ac87a36a99900be0d5c5f1b2eecb19ad" translate="yes" xml:space="preserve">
          <source>Constructor for objects that represents a Unicode locale identifier.</source>
          <target state="translated">Unicode ロケール識別子を表すオブジェクトのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="2fb555257a96b8a7267b54da090459896bc7866d" translate="yes" xml:space="preserve">
          <source>Constructor properties</source>
          <target state="translated">コンストラクタのプロパティ</target>
        </trans-unit>
        <trans-unit id="a7ce74cb455f0901da4885d605a5b6f17fffdb20" translate="yes" xml:space="preserve">
          <source>Constructor requires a new operator since version 10.</source>
          <target state="translated">コンストラクタにはバージョン10からの新しい演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="37933effc1117711c03ecb6f80a571ad8f0b390e" translate="yes" xml:space="preserve">
          <source>Constructor requires a new operator since version 37.</source>
          <target state="translated">コンストラクタには、バージョン 37 以降の新しい演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="212078369040fc1d537f6cc8d97d0b63efd2a978" translate="yes" xml:space="preserve">
          <source>Constructor requires a new operator since version 4.</source>
          <target state="translated">コンストラクタにはバージョン 4 からの新しい演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="3f1ed2d54976488fe4ef079be47acc05ae15139a" translate="yes" xml:space="preserve">
          <source>Constructor vs. declaration vs. expression</source>
          <target state="translated">コンストラクタ対宣言対式</target>
        </trans-unit>
        <trans-unit id="3cd8b6f2455839a6d2b1443eb15d2d5eee90a71f" translate="yes" xml:space="preserve">
          <source>Constructor without arguments</source>
          <target state="translated">引数なしのコンストラクタ</target>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="53c8de9e0ab01929b967292bc091424fac08f478" translate="yes" xml:space="preserve">
          <source>Contains stateless WebAssembly code that has already been compiled by the browser and can be efficiently &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;shared with Workers&lt;/a&gt;, and instantiated multiple times.</source>
          <target state="translated">ブラウザーによって既にコンパイルされており&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;、Workers&lt;/a&gt;と効率的に共有でき、複数回インスタンス化できるステートレスWebAssemblyコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="c68254a1efeff2db1be8e4f2758d5de2f876c083" translate="yes" xml:space="preserve">
          <source>Contains substitution values.</source>
          <target state="translated">置換値を含みます。</target>
        </trans-unit>
        <trans-unit id="080483b199f1c14ff53000f1352cf7489e7fe7ae" translate="yes" xml:space="preserve">
          <source>Control abstraction</source>
          <target state="translated">制御の抽象化</target>
        </trans-unit>
        <trans-unit id="c490f4aa158169ff3496a920c23c4f2fcd534bf5" translate="yes" xml:space="preserve">
          <source>Control abstraction objects</source>
          <target state="translated">制御抽象化オブジェクト</target>
        </trans-unit>
        <trans-unit id="bce115b0c925643288d6d66089149032ada8c603" translate="yes" xml:space="preserve">
          <source>Control characters</source>
          <target state="translated">制御文字</target>
        </trans-unit>
        <trans-unit id="28450f2d804b03ca3a7497595971f90daf89c3df" translate="yes" xml:space="preserve">
          <source>Control characters have no visual representation but are used to control the interpretation of the text.</source>
          <target state="translated">制御文字には視覚的な表現はありませんが、テキストの解釈を制御するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ac3c5834f77ae59c902947ccef1074dc7ca1801a" translate="yes" xml:space="preserve">
          <source>Control flow</source>
          <target state="translated">制御フロー</target>
        </trans-unit>
        <trans-unit id="72dc8f805f0c7b23c5504248d475a2eadb225ede" translate="yes" xml:space="preserve">
          <source>Conversely, non-strict functions that &lt;strong&gt;are&lt;/strong&gt; passed rest, default, or destructured parameters &lt;strong&gt;will not&lt;/strong&gt; sync new values assigned to argument variables in the function body with the &lt;code&gt;arguments&lt;/code&gt; object. Instead, the &lt;code&gt;arguments&lt;/code&gt; object in non-strict functions with complex parameters &lt;strong&gt;will always&lt;/strong&gt; reflect the values passed to the function when the function was called (this is the same behavior as exhibited by all strict-mode functions, regardless of the type of variables they are passed):</source>
          <target state="translated">逆に、rest、default、またはdestructuredパラメーター&lt;strong&gt;が&lt;/strong&gt;渡された非厳密関数は、関数本体の引数変数に割り当てられた新しい値を &lt;code&gt;arguments&lt;/code&gt; オブジェクトと同期し&lt;strong&gt;ません&lt;/strong&gt;。代わりに、複雑なパラメーター&lt;strong&gt;を&lt;/strong&gt;持つ非厳密関数の &lt;code&gt;arguments&lt;/code&gt; オブジェクトは、関数が呼び出されたときに関数に渡された値&lt;strong&gt;を常に&lt;/strong&gt;反映します（これは、変数のタイプに関係なく、すべての厳密モード関数によって示される動作と同じです。合格しました）：&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="173b730d07ec8c9487ab59b5e69862e800554ed4" translate="yes" xml:space="preserve">
          <source>Conversion getter</source>
          <target state="translated">コンバージョンゲッター</target>
        </trans-unit>
        <trans-unit id="507a525b644a210c5c2f605d85621c2ba794d522" translate="yes" xml:space="preserve">
          <source>Conversion of non-string &lt;code&gt;this&lt;/code&gt; values to strings</source>
          <target state="translated">非文字列 &lt;code&gt;this&lt;/code&gt; 値の文字列への変換</target>
        </trans-unit>
        <trans-unit id="40688a3526daf34d410e9d22388b4c3f0484f208" translate="yes" xml:space="preserve">
          <source>Conversion rules</source>
          <target state="translated">変換ルール</target>
        </trans-unit>
        <trans-unit id="3ffc593858c48f50a019451dc234c42cc05def9b" translate="yes" xml:space="preserve">
          <source>Conversion snippets</source>
          <target state="translated">変換スニペット</target>
        </trans-unit>
        <trans-unit id="8a6527f2f77c8a0f8bdc1ad2f6f64d8914ce6bc8" translate="yes" xml:space="preserve">
          <source>Conversion to promise</source>
          <target state="translated">約束への変換</target>
        </trans-unit>
        <trans-unit id="795478e47a014acdc6b9ee9f10bbed775918fe91" translate="yes" xml:space="preserve">
          <source>Convert a binary &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to a decimal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">バイナリ &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; を10進 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; 変換します。</target>
        </trans-unit>
        <trans-unit id="93a598cb172d2b6c3a543f2d42c8b6c16990b060" translate="yes" xml:space="preserve">
          <source>Convert a decimal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; to a binary &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">10進 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; をバイナリ &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 変換します。</target>
        </trans-unit>
        <trans-unit id="5816fd7b3697b554f74c75057df0d1207cbda118" translate="yes" xml:space="preserve">
          <source>Convert numeric strings and null to numbers</source>
          <target state="translated">数値文字列とヌルを数値に変換</target>
        </trans-unit>
        <trans-unit id="837c133f3ab1873a0b6776263f3f725b999960ff" translate="yes" xml:space="preserve">
          <source>Converting AND to OR</source>
          <target state="translated">ANDからORへの変換</target>
        </trans-unit>
        <trans-unit id="c7e0b12e97c954dd8540210783fa08c280176f83" translate="yes" xml:space="preserve">
          <source>Converting OR to AND</source>
          <target state="translated">ORからANDへの変換</target>
        </trans-unit>
        <trans-unit id="79608c284f91b92fd379b63af561c1f1bfa3d8bb" translate="yes" xml:space="preserve">
          <source>Converting a &lt;code&gt;Map&lt;/code&gt; to an &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; を &lt;code&gt;Object&lt;/code&gt; 変換する</target>
        </trans-unit>
        <trans-unit id="e75f81cb813a3f0c534df8e8cf1f474fd25bd4d4" translate="yes" xml:space="preserve">
          <source>Converting a Map to an Object</source>
          <target state="translated">マップをオブジェクトに変換する</target>
        </trans-unit>
        <trans-unit id="53c2a776c42b3a62c1d54285c73faf49c4015684" translate="yes" xml:space="preserve">
          <source>Converting a for loop to forEach</source>
          <target state="translated">forループをforEachに変換する</target>
        </trans-unit>
        <trans-unit id="6b6bc8ace21f55c9258d364bd869282b56459dd2" translate="yes" xml:space="preserve">
          <source>Converting an &lt;code&gt;Array&lt;/code&gt; to an &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; を &lt;code&gt;Object&lt;/code&gt; 変換する</target>
        </trans-unit>
        <trans-unit id="c3c1837a10cc7c015b7c35d11dac590cac9b4d72" translate="yes" xml:space="preserve">
          <source>Converting an &lt;code&gt;Object&lt;/code&gt; to a &lt;code&gt;Map&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; を &lt;code&gt;Map&lt;/code&gt; 変換する</target>
        </trans-unit>
        <trans-unit id="84ead1412d1935029ecf770ba32dfe62b8f3fa1f" translate="yes" xml:space="preserve">
          <source>Converting an Array to an Object</source>
          <target state="translated">配列をオブジェクトに変換する</target>
        </trans-unit>
        <trans-unit id="04345082cdfa7038aca287a5e8077c13a91d7df0" translate="yes" xml:space="preserve">
          <source>Converting any value to Boolean</source>
          <target state="translated">任意の値をブール値に変換</target>
        </trans-unit>
        <trans-unit id="6676a31469b2564687dd959c923f24f440a05c37" translate="yes" xml:space="preserve">
          <source>Converting between NOTs</source>
          <target state="translated">NOT間の変換</target>
        </trans-unit>
        <trans-unit id="6a4bc32d3a1481a56766952359ee57f863181032" translate="yes" xml:space="preserve">
          <source>Converting between degrees and radians</source>
          <target state="translated">度とラジアンの変換</target>
        </trans-unit>
        <trans-unit id="4b10717e8199e836157d7aab0acfff3e090cef53" translate="yes" xml:space="preserve">
          <source>Converting mistakes into errors</source>
          <target state="translated">ミスをエラーに変換する</target>
        </trans-unit>
        <trans-unit id="5aab91da7aa5bdf43cd2b54e19d26edc8f12393d" translate="yes" xml:space="preserve">
          <source>Converts a date to a string following the ISO 8601 Extended Format.</source>
          <target state="translated">日付をISO 8601拡張フォーマットに従った文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="5fdff4e0b6a988434fc80ab921cd1afcb98f4519" translate="yes" xml:space="preserve">
          <source>Converts a date to a string using the UTC timezone.</source>
          <target state="translated">UTCタイムゾーンを使用して、日付を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="750e100fd87f304c0046c08d00b10c7fd0426c25" translate="yes" xml:space="preserve">
          <source>Converts a date to a string, using a format string.</source>
          <target state="translated">フォーマット文字列を使用して、日付を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="18fdbd089e46818b1d02bd4b21adbf6fb0a4eebb" translate="yes" xml:space="preserve">
          <source>Copies a sequence of array elements within the array.</source>
          <target state="translated">配列内の配列要素のシーケンスをコピーします.</target>
        </trans-unit>
        <trans-unit id="f417a6bd36b5c8658523960930fb85e281406413" translate="yes" xml:space="preserve">
          <source>Copies a sequence of array elements within the array. See also &lt;a href=&quot;../array/copywithin&quot;&gt;&lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内の配列要素のシーケンスをコピーします。&lt;a href=&quot;../array/copywithin&quot;&gt; &lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="142cae919d0d766d6046821d79ee5486884856dd" translate="yes" xml:space="preserve">
          <source>Copies a sequence of array elements within the array. See also &lt;a href=&quot;array/copywithin&quot;&gt;&lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内の配列要素のシーケンスをコピーします。&lt;a href=&quot;array/copywithin&quot;&gt; &lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="a84683ae6af33dad395d41c65d6204338adb5436" translate="yes" xml:space="preserve">
          <source>Copies the values of all enumerable own properties from one or more source objects to a target object.</source>
          <target state="translated">列挙可能なすべての自身のプロパティの値を、1つ以上のソース・オブジェクトからターゲット・オブジェクトにコピーします。</target>
        </trans-unit>
        <trans-unit id="d54e08737fc653815b707fc7b8d550c81b5201a6" translate="yes" xml:space="preserve">
          <source>Copy an array</source>
          <target state="translated">配列のコピー</target>
        </trans-unit>
        <trans-unit id="ca8b260639bf072caa2c72c42c244dd5ba209bfa" translate="yes" xml:space="preserve">
          <source>Copying accessors</source>
          <target state="translated">コピーアクセサ</target>
        </trans-unit>
        <trans-unit id="3f022736b79fbf76dfb1ce0fdde466bd18da3c29" translate="yes" xml:space="preserve">
          <source>Copying an &lt;code&gt;ArrayBuffer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; のコピー</target>
        </trans-unit>
        <trans-unit id="0e2380b5622f854536d266bf51ee69ce4bc1ea48" translate="yes" xml:space="preserve">
          <source>Copying an ArrayBuffer</source>
          <target state="translated">ArrayBufferのコピー</target>
        </trans-unit>
        <trans-unit id="e8119f9022387042567006169274636876cd3da2" translate="yes" xml:space="preserve">
          <source>Copying symbol-typed properties</source>
          <target state="translated">シンボル型プロパティのコピー</target>
        </trans-unit>
        <trans-unit id="3644cecd9f5b422e6771ce0a64e64d8eb469c58d" translate="yes" xml:space="preserve">
          <source>Correct would be omitting the comma or adding another expression:</source>
          <target state="translated">正しいのは、カンマを省略したり、別の表現を追加したりすることです。</target>
        </trans-unit>
        <trans-unit id="96108c9e5bc70662e9b9303c4f7daaca9d181373" translate="yes" xml:space="preserve">
          <source>Correct would be to use a colon, or to use square brackets to assign a new property after the object has been created already.</source>
          <target state="translated">正しいのは、コロンを使用するか、オブジェクトが既に作成された後に新しいプロパティを割り当てるために角括弧を使用することです。</target>
        </trans-unit>
        <trans-unit id="9290701046ed031583dfd9127fa4a2a1ef4524db" translate="yes" xml:space="preserve">
          <source>Correct would be:</source>
          <target state="translated">正しいのは</target>
        </trans-unit>
        <trans-unit id="612ba4d7671f3469429b3ac344b1c55c80161553" translate="yes" xml:space="preserve">
          <source>Count Leading Ones And Beyond</source>
          <target state="translated">カウント・リーディング・ワンズ・アンド・ビヨンド</target>
        </trans-unit>
        <trans-unit id="48558c2dc6cc097190c65b007af1304a8f26282b" translate="yes" xml:space="preserve">
          <source>Count Leading Ones and beyond</source>
          <target state="translated">カウント・リーディング・ワンズ以降</target>
        </trans-unit>
        <trans-unit id="abf221340a681287f0a1d457ca8c5267b60467c5" translate="yes" xml:space="preserve">
          <source>Counting instances of values in an object</source>
          <target state="translated">オブジェクト内の値のインスタンスをカウントする</target>
        </trans-unit>
        <trans-unit id="e958b975c2e13f2cc4c0add06edb53707543f9f6" translate="yes" xml:space="preserve">
          <source>Create an instance of the object with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; でオブジェクトのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="31233079c252dd8a4b8dce9bad3afa3309fd9d65" translate="yes" xml:space="preserve">
          <source>Create empty array of fixed length</source>
          <target state="translated">固定長の空の配列を作成</target>
        </trans-unit>
        <trans-unit id="353fa068d46bdb9de8b742822558d90bf10cc0f6" translate="yes" xml:space="preserve">
          <source>Creates a JavaScript &lt;code&gt;Date&lt;/code&gt; instance that represents a single moment in time. &lt;code&gt;Date&lt;/code&gt; objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</source>
          <target state="translated">ある瞬間を表すJavaScript &lt;code&gt;Date&lt;/code&gt; インスタンスを作成します。 &lt;code&gt;Date&lt;/code&gt; オブジェクトは、1970年1月1日UTC以降のミリ秒数である時間値に基づいています。</target>
        </trans-unit>
        <trans-unit id="679a1eb549f3fcf3409f312115d98357721a3904" translate="yes" xml:space="preserve">
          <source>Creates a blank, plain JavaScript object;</source>
          <target state="translated">空白のプレーンな JavaScript オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="207211e8ba684b833c551564aea6152cae067bdd" translate="yes" xml:space="preserve">
          <source>Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.</source>
          <target state="translated">括弧で囲み、セミコロンで区切られた3つのオプション式と、ループ内で実行される文で構成されるループを作成します。</target>
        </trans-unit>
        <trans-unit id="bbd66f61ce6c00d086463edd656ea2ebafbbf9e6" translate="yes" xml:space="preserve">
          <source>Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</source>
          <target state="translated">テスト条件が真と評価される限り、指定された文を実行するループを作成します。条件は文を実行する前に評価されます。</target>
        </trans-unit>
        <trans-unit id="9b40b036233214e772da768731c6e4bde5ab5af7" translate="yes" xml:space="preserve">
          <source>Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</source>
          <target state="translated">テスト条件が false に評価されるまで、指定された文を実行するループを作成します。条件は文を実行した後に評価され、その結果、指定された文が少なくとも一度は実行されるようになります。</target>
        </trans-unit>
        <trans-unit id="790ab9230cd98bbb07f82fe0e8011eb18beca3af" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="bb96aa989871b5607e10d34c8d9509fe0b5a2ec2" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;&lt;/code&gt; して新しいTypedArrayを作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="09d703394259ecefab336fb4e519d188268cc39e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; instance from an array-like or iterable object.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Array&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="13e8198a7ae6f84efa45146c4cca3d8d96a400ba" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; instance with a variable number of arguments, regardless of number or type of the arguments.</source>
          <target state="translated">引数の数やタイプに関係なく、可変数の引数を持つ新しい &lt;code&gt;Array&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="ebe0ad241cbd47ae0de4eb097b570cac8834f06a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="81a19270c2ce731ff70eb714b847ab56d0140665" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;ArrayBuffer&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="5141196789ece59d77052f4157b46f410e296a01" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Boolean&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Boolean&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="7a122412ad55a9494c35bdef325a50ffda3b072f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;DataView&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;DataView&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="ea86d7c98980e202f2540981b471d4d7998b9844" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Date&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="d5b8ba2689bbc79be33071422dad465ac83d5fee" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Error&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b20bc035036bc5f93a48a23a853205c5426037b3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;EvalError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;EvalError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="448b0e0531feee96116bad268410445a880c9f0a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float32Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Float32Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="afd28c3d7d7f48e88e37625015beedb421ec5c68" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float32Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Float32Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="563c0594ee539c91d44d82c92c857118f1bf4473" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float32Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Float32Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="0130b1c223e94cf04986b96e248bd57641d86323" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float64Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Float64Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="66ee5610dfc7a8420cf2f6a8ef8210446c61398e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float64Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Float64Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="f8110fc070a36c5578144cbc2d11a3bd48bf9430" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float64Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Float64Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="3f0cce3873add138b733bea01745202e1dc8ea39" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Function&lt;/code&gt; object. Calling the constructor directly can create functions dynamically but suffers from security and similar (but far less significant) performance issues to &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. However, unlike eval, the &lt;code&gt;Function&lt;/code&gt; constructor creates functions that execute in the global scope only.</source>
          <target state="translated">新しい &lt;code&gt;Function&lt;/code&gt; オブジェクトを作成します。コンストラクターを直接呼び出すと、関数を動的に作成できますが、&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;と同様の（ただしそれほど重要ではない）パフォーマンスの問題が発生します。ただし、evalとは異なり、 &lt;code&gt;Function&lt;/code&gt; コンストラクターはグローバルスコープでのみ実行される関数を作成します。</target>
        </trans-unit>
        <trans-unit id="56a946af6b831ea5f2a15d7fa06d8117eeb6d648" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Global&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Global&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="f36fbfb2ef05803c1bc5519b088d0c9b1c3c5944" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Instance&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Instance&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="2c1c68ecb3eb72727c3d4c726f5a770c3c651f5a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int16Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Int16Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="2c8509f25c9256cc329f99a9a1c796fdcdc9f170" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int16Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Int16Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="9c729fef8b23dec4ed110cbb976b62f651fa7f76" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int16Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Int16Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="8a74166cf5fdb5868f55fabbc597db10c7c4ecc8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int32Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Int32Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="a781ab5ff918365a523020d3f7e9d41f3ef8d875" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int32Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Int32Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="e022cb3b1ef3d7b6a298b9e7454b443b7cc2b5e3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int8Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Int8Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="3741975065f34e77af4ee5557ab070d2c4aede6a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int8Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Int8Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="07f687dc3b0c07267f851495b92b76a2054cb8d9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int8Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Int8Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="d33632ce89d8e860be800a7c93a915bc886c9b41" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Map&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="16a51dabe19a7234aa899a9a8934cc7ca0586ad1" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Memory&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Memory&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="8a665b6164c96483b3dea8b1ef8d83565036a5ab" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Module&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Module&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="6a845144613cb78ab144ae2897c024f1378edcd7" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Number&lt;/code&gt; value.</source>
          <target state="translated">新しい &lt;code&gt;Number&lt;/code&gt; 値を作成します。</target>
        </trans-unit>
        <trans-unit id="83da8636eac9f03b733a6531072c3ad1dc978351" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Object&lt;/code&gt; object. It is a wrapper for the given value.</source>
          <target state="translated">新しい &lt;code&gt;Object&lt;/code&gt; オブジェクトを作成します。これは、指定された値のラッパーです。</target>
        </trans-unit>
        <trans-unit id="0574660b040fe317beb77a89083fe8b88383a681" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Promise&lt;/code&gt; object. The constructor is primarily used to wrap functions that do not already support promises.</source>
          <target state="translated">新しい &lt;code&gt;Promise&lt;/code&gt; オブジェクトを作成します。コンストラクターは主に、promiseをまだサポートしていない関数をラップするために使用されます。</target>
        </trans-unit>
        <trans-unit id="25e6aa6b5afe2ad0c37cb2d7e74bfdbe9479193f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Proxy&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Proxy&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="1ac8703c1b6efc1e89efca7241e96fcfe8d7bdf4" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;RangeError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;RangeError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="c0a455df391afd4eb61f79f8a9046011f01fc211" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;ReferenceError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;ReferenceError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="a83e9d1bba69eb5cb8b4041c12a1f5c6ff9a11e6" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;RegExp&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;RegExp&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="647c1803b30720cb75b78a08611fb37bee151b40" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Set&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="bbe16c0bb517f5277e5de81c19824e137c6a9eb5" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="154ed68d71095bc2fece2c91ef9935c8c8468215" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;String&lt;/code&gt; object. It performs type conversion when called as a function, rather than as a constructor, which is usually more useful.</source>
          <target state="translated">新しい &lt;code&gt;String&lt;/code&gt; オブジェクトを作成します。コンストラクターとしてではなく、関数として呼び出されたときに型変換を実行します。これは通常、より便利です。</target>
        </trans-unit>
        <trans-unit id="6e22e6121ce477e00abcde772fc91db76f53273a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Symbol&lt;/code&gt; object. It is incomplete as a constructor because it does not support the syntax &quot;&lt;code&gt;new Symbol()&lt;/code&gt;&quot;.</source>
          <target state="translated">新しい &lt;code&gt;Symbol&lt;/code&gt; オブジェクトを作成します。構文「 &lt;code&gt;new Symbol()&lt;/code&gt; 」をサポートしていないため、コンストラクターとしては不完全です。</target>
        </trans-unit>
        <trans-unit id="90ad8781147a73da782630dceb3ebf521aa469fc" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;SyntaxError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;SyntaxError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="8ae70598389c3999b9ce5518f6553dec8ed3c277" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Table&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Table&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="462ab3e185598fea64790c409d2c4be356be7502" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;TypeError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;TypeError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="ec7db217e487e063ac365d927951bdc7e48dea78" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;URIError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;URIError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="1bf78511b4ed5e45f25ea6a8de807280c7250447" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint16Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Uint16Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="1475611c24d01e14c230adc1ca4831e7d81f4f14" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint16Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Uint16Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b8dd695aa327d0492e47dc9b375ac7a6573a68d8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint16Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Uint16Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="405c581b78e0a32ad59f0539dd141ba9996695e1" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint32Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Uint32Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="655b53e41f4e0f525bb919740cd619f19391cf2d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint32Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Uint32Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="c64c8515edb6fb4256b4524d73a13829a4367922" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint32Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Uint32Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="f6de9130229df04494784c040222acd595982855" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Uint8Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="67bc379f53464de7c95de1b9d21ae90b4cfc51f9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8Array&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Uint8Array&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="a4e7326267804716b0aab12594b3f531b7d24e2a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Uint8Array&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="aef5db6730b0f0ccb422c02d48b3c97b1327a10c" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8ClampedArray&lt;/code&gt; from a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数から新しい &lt;code&gt;Uint8ClampedArray&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e4415344c6bfe11948ff6fd62652456c8aec827d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8ClampedArray&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい &lt;code&gt;Uint8ClampedArray&lt;/code&gt; を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="d96c45a599093fe989641afbe085b25401732c40" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8ClampedArray&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;Uint8ClampedArray&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="9359c89a212eaeed25dd85e84690caafe4911a88" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8ClampedArray&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい &lt;code&gt;Uint8ClampedArray&lt;/code&gt; を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="98c295442b69f60fb82d583a9abf3871d087cbb8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;WeakMap&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="686b5cebe997197fa5be59a1f1087f481cac5adf" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;WeakSet&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;WeakSet&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="033d666b316769c744a4156b3ca4d0eb6e07e90a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="55a26e408f60f98214e41e7796d024fc6385df80" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;WebAssembly.LinkError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;WebAssembly.LinkError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="0f2c19f175e127c3d3b5e95bfecaddd20e392025" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="9b5ffb25bdd631efefcf52ab4c8801d96096e319" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;CompileError&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;CompileError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="aa866faeaf85131bd36a278d3942ed28957b7b1c" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Global&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;Global&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fb7b6d9e6f1ab9bedf5cb3bdf9a6a9af29c3fc84" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Instance&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;Instance&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="278b1060516f2914eff8428000d1acb22bb63da6" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;LinkError&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;LinkError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b012eda4fcaf994516dc566b62d54f7acc14a9d5" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Memory&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;Memory&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="c7a789eda8f021813cb015ee78a3aa68da75f4d3" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Module&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;Module&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="822468251b89d8150ff32d819f92ebca68baa244" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;RuntimeError&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;RuntimeError&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="0875d16187758993eddbb02cfb74efb49f6f9226" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Table&lt;/code&gt; object.</source>
          <target state="translated">新しいWebAssembly &lt;code&gt;Table&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b3de340f9ef6f4232633584739d1dd43928de714" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns &lt;code&gt;true&lt;/code&gt;. See also &lt;a href=&quot;array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">提供されたフィルタリング関数が &lt;code&gt;true&lt;/code&gt; を返す、この配列のすべての要素を使用して新しい配列を作成します。&lt;a href=&quot;array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="99d73f7491da263a5c202296612fc3ef8f026983" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns true.</source>
          <target state="translated">指定したフィルタリング関数が true を返す配列のすべての要素を含む新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="26aa34913b6651a7497c3c73551e90d324be35fb" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたフィルタリング関数がtrueを返す、この配列のすべての要素で新しい配列を作成します。&lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="c4e83d917013dbade409cab2ad85cb5794918356" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also &lt;a href=&quot;array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたフィルタリング関数がtrueを返す、この配列のすべての要素で新しい配列を作成します。&lt;a href=&quot;array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="0948ac0407df327263346c7f3f02ddc0926f2a52" translate="yes" xml:space="preserve">
          <source>Creates a new array with the results of calling a provided function on every element in this array.</source>
          <target state="translated">この配列の各要素に対して指定された関数を呼び出した結果を持つ新しい配列を作成します。</target>
        </trans-unit>
        <trans-unit id="c5d4be038a6a693c59a2c224fc8a6f6b07612f0b" translate="yes" xml:space="preserve">
          <source>Creates a new array with the results of calling a provided function on every element in this array. See also &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この配列内のすべての要素で提供された関数を呼び出した結果で新しい配列を作成します。&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="44b80c352aeb1a3c2208d5c444c0e233346f5e3b" translate="yes" xml:space="preserve">
          <source>Creates a new array with the results of calling a provided function on every element in this array. See also &lt;a href=&quot;array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この配列内のすべての要素で提供された関数を呼び出した結果で新しい配列を作成します。&lt;a href=&quot;array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="a7412b7dfa2aad48bd6b96767d7368bb76cc179f" translate="yes" xml:space="preserve">
          <source>Creates a new function which, when called, has its &lt;code&gt;this&lt;/code&gt; set to the provided &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt;. Optionally, a given sequence of arguments will be prepended to arguments provided the newly-bound function is called.</source>
          <target state="translated">呼び出されると、提供された &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; に &lt;code&gt;this&lt;/code&gt; が設定される新しい関数を作成します。オプションで、新しくバインドされた関数が呼び出された場合、引数の特定のシーケンスが引数の前に追加されます。</target>
        </trans-unit>
        <trans-unit id="8c968c88e3d2f29972bd5829699b951ae9724794" translate="yes" xml:space="preserve">
          <source>Creates a new function which, when called, has its &lt;em&gt;this&lt;/em&gt; set to the provided value, with a given sequence of arguments preceding any provided when the new function was called.</source>
          <target state="translated">呼び出されたときに&lt;em&gt;thisが指定&lt;/em&gt;された値に設定された新しい関数を作成します。新しい関数が呼び出されたときに指定された引数の前に指定された引数のシーケンスがあります。</target>
        </trans-unit>
        <trans-unit id="ac103331a329dbcb9dee9f73b36b77f2698e9530" translate="yes" xml:space="preserve">
          <source>Creates a new object with the specified prototype object and properties.</source>
          <target state="translated">指定したプロトタイプオブジェクトとプロパティを持つ新しいオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="9819ba3316a395be8705acd1a83b16e96dedc4a0" translate="yes" xml:space="preserve">
          <source>Creates a new typed array from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のようなオブジェクトまたは反復可能なオブジェクトから新しい型付き配列を作成します。&lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="2808c228a8b2ad6640b92f39852a5768ff0b3b5b" translate="yes" xml:space="preserve">
          <source>Creates a new typed array with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変数の引数を持つ新しい型付き配列を作成します。&lt;a href=&quot;array/of&quot;&gt; &lt;code&gt;Array.of()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="59caca672113daa896e33a4955ae61d1fefb8ebb" translate="yes" xml:space="preserve">
          <source>Creates a revocable &lt;code&gt;Proxy&lt;/code&gt; object.</source>
          <target state="translated">取り消し可能な &lt;code&gt;Proxy&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="ab26b67829775551e5aee31a5301e2ad728556ef" translate="yes" xml:space="preserve">
          <source>Creates an instance representing a syntax error that occurs while parsing code in &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; で&lt;/a&gt;コードを解析中に発生する構文エラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="81cd88064e5ecd8fbf55c6f20b5d8203b12a8737" translate="yes" xml:space="preserve">
          <source>Creates an instance representing a syntax error.</source>
          <target state="translated">構文エラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="01f41c374d2b61c664410680feba4927c5b02d44" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs regarding the global function &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">グローバル関数&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;に関して発生するエラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="67b7641bff2782e117cdc0f1d2c40c7aa58a1e2c" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when &lt;a href=&quot;encodeuri&quot;&gt;&lt;code&gt;encodeURI()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;decodeuri&quot;&gt;&lt;code&gt;decodeURI()&lt;/code&gt;&lt;/a&gt; are passed invalid parameters.</source>
          <target state="translated">&lt;a href=&quot;encodeuri&quot;&gt; &lt;code&gt;encodeURI()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;decodeuri&quot;&gt; &lt;code&gt;decodeURI()&lt;/code&gt; &lt;/a&gt;に無効なパラメーターが渡されたときに発生するエラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="195b4999c0e893046aa42ceedd5cf85f3d47d360" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.</source>
          <target state="translated">数値変数やパラメータが有効範囲外の場合に発生するエラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="653ee6f5147d5792120d3b733f27aadace26a3eb" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.</source>
          <target state="translated">変数やパラメータが有効な型ではない場合に発生するエラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="a7775c220d7ea55132098eb381cd1b38f7fcf56c" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. &quot;too much recursion&quot;.</source>
          <target state="translated">JavaScriptエンジンの内部エラーがスローされたときに発生するエラーを表すインスタンスを作成します。例:「再帰が多すぎる」など。</target>
        </trans-unit>
        <trans-unit id="0f4d1f6ef80a8ccaffe0205de09f2c81d8d429e6" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when de-referencing an invalid reference.</source>
          <target state="translated">無効な参照を参照解除する際に発生するエラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="3d6ac5ea831431114d49ade5727e8236d393eba9" translate="yes" xml:space="preserve">
          <source>Creates an instance representing several errors wrapped in a single error when multiple errors need to be reported by an operation, for example by &lt;a href=&quot;promise/any&quot;&gt;&lt;code&gt;Promise.any()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;promise/any&quot;&gt; &lt;code&gt;Promise.any()&lt;/code&gt; &lt;/a&gt;などの操作で複数のエラーを報告する必要がある場合に、1つのエラーにラップされた複数のエラーを表すインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="fd3d6c84743a0c04547e4c1da77025abddee96c9" translate="yes" xml:space="preserve">
          <source>Creating &lt;code&gt;Boolean&lt;/code&gt; objects with an initial value of &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">初期値が &lt;code&gt;false&lt;/code&gt; の &lt;code&gt;Boolean&lt;/code&gt; オブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="a75bffdb6856335bf585859f9595aabab1f5595c" translate="yes" xml:space="preserve">
          <source>Creating &lt;code&gt;Boolean&lt;/code&gt; objects with an initial value of &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">初期値が &lt;code&gt;true&lt;/code&gt; の &lt;code&gt;Boolean&lt;/code&gt; オブジェクトを作成する</target>
        </trans-unit>
        <trans-unit id="5848bcff0e203f493dbac5a4866b2e71a73403cb" translate="yes" xml:space="preserve">
          <source>Creating Boolean objects with an initial value of false</source>
          <target state="translated">初期値が false の Boolean オブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="96429defd895025ffbd7a4fa83321c24f5ea92a7" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;ReferenceError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ReferenceError&lt;/code&gt; の作成</target>
        </trans-unit>
        <trans-unit id="41179e566eb6abd6a50b7ad6fa363bcfd9098b38" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;SyntaxError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SyntaxError&lt;/code&gt; の作成</target>
        </trans-unit>
        <trans-unit id="3e45504a8fb4abb96896c33157ac154413873d3e" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;TypeError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; の作成</target>
        </trans-unit>
        <trans-unit id="b8e357577c79ed07f6632a71273674d077663eb2" translate="yes" xml:space="preserve">
          <source>Creating a Promise</source>
          <target state="translated">プロミスの作成</target>
        </trans-unit>
        <trans-unit id="bebdef561831f776a31bae258e2196d465e5f206" translate="yes" xml:space="preserve">
          <source>Creating a ReferenceError</source>
          <target state="translated">ReferenceErrorの作成</target>
        </trans-unit>
        <trans-unit id="03084851803a98e723fa7871872a9df02542fe78" translate="yes" xml:space="preserve">
          <source>Creating a SyntaxError</source>
          <target state="translated">SyntaxError の作成</target>
        </trans-unit>
        <trans-unit id="ac837d9d75cf5ff9061628f650d042bf68cf8cc3" translate="yes" xml:space="preserve">
          <source>Creating a TypeError</source>
          <target state="translated">TypeErrorの作成</target>
        </trans-unit>
        <trans-unit id="64db8ecdfb044ac4d84f77c63dcfb06f695d2cef" translate="yes" xml:space="preserve">
          <source>Creating a bound function</source>
          <target state="translated">バウンド関数の作成</target>
        </trans-unit>
        <trans-unit id="4202b85441eae07edb8e4df6354acf22fec80344" translate="yes" xml:space="preserve">
          <source>Creating a generator function from a &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; コンストラクターからのジェネレーター関数の作成</target>
        </trans-unit>
        <trans-unit id="d8b42dbc29b39d91f7b08d019e052c2f41a4c6cb" translate="yes" xml:space="preserve">
          <source>Creating a generator function from a GeneratorFunction() constructor</source>
          <target state="translated">GeneratorFunction()コンストラクタからジェネレータ関数を作成する</target>
        </trans-unit>
        <trans-unit id="49b7600dd7eee44ccd778b168e9489c38fdf4380" translate="yes" xml:space="preserve">
          <source>Creating a new CompileError instance</source>
          <target state="translated">新しいCompileErrorインスタンスの作成</target>
        </trans-unit>
        <trans-unit id="e3b7afbf683c30a4705e3df026cc7ce8dc45ab3c" translate="yes" xml:space="preserve">
          <source>Creating a new Global instance</source>
          <target state="translated">新しいグローバルインスタンスの作成</target>
        </trans-unit>
        <trans-unit id="0c116077501803b08ebdfa5666436874caf81aa1" translate="yes" xml:space="preserve">
          <source>Creating a new LinkError instance</source>
          <target state="translated">新しい LinkError インスタンスの作成</target>
        </trans-unit>
        <trans-unit id="afcb41d3c987a993175bff858c487ee565f8ff95" translate="yes" xml:space="preserve">
          <source>Creating a new Memory object</source>
          <target state="translated">新しいメモリオブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="b553d30b050157414aa169447bb9bf432e94234c" translate="yes" xml:space="preserve">
          <source>Creating a new RuntimeError instance</source>
          <target state="translated">新しい RuntimeError インスタンスの作成</target>
        </trans-unit>
        <trans-unit id="0de10adef7898e8ce59aadea227a359f9c16631a" translate="yes" xml:space="preserve">
          <source>Creating a new SharedArrayBuffer</source>
          <target state="translated">新しいSharedArrayBufferの作成</target>
        </trans-unit>
        <trans-unit id="0348336a42aa08280f45a7a5cb70aa337c3d05a6" translate="yes" xml:space="preserve">
          <source>Creating a new WebAssembly Table instance</source>
          <target state="translated">新しいWebAssembly Tableインスタンスの作成</target>
        </trans-unit>
        <trans-unit id="f71ec0b012384c98027e3969e3e123b2e62eaa7a" translate="yes" xml:space="preserve">
          <source>Creating a property</source>
          <target state="translated">プロパティの作成</target>
        </trans-unit>
        <trans-unit id="7e7e7a6401476a8a83b43ac1c27874fab800983f" translate="yes" xml:space="preserve">
          <source>Creating a shallow clone</source>
          <target state="translated">浅いクローンの作成</target>
        </trans-unit>
        <trans-unit id="05b2c6a797a751bdb5aa278c69bfda0f643d830a" translate="yes" xml:space="preserve">
          <source>Creating a shared memory</source>
          <target state="translated">共有メモリの作成</target>
        </trans-unit>
        <trans-unit id="1616b64477fad525ba99c05ad2ad09d63e318e5a" translate="yes" xml:space="preserve">
          <source>Creating a subclass</source>
          <target state="translated">サブクラスの作成</target>
        </trans-unit>
        <trans-unit id="e5c2c8fc909c79e5035f68391fb925251bfa4e1e" translate="yes" xml:space="preserve">
          <source>Creating a two-dimensional array</source>
          <target state="translated">二次元配列の作成</target>
        </trans-unit>
        <trans-unit id="75de7b1eba703deebe0ac4f24e5b5a1c3087c710" translate="yes" xml:space="preserve">
          <source>Creating a user-defined object requires two steps:</source>
          <target state="translated">ユーザー定義オブジェクトを作成するには、2つのステップが必要です。</target>
        </trans-unit>
        <trans-unit id="1e00d30db065c31a45c62cd0912916e4fe977bb0" translate="yes" xml:space="preserve">
          <source>Creating an &lt;code&gt;URIError&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;URIError&lt;/code&gt; の作成</target>
        </trans-unit>
        <trans-unit id="0e143a7a7c11714b15410d3f64dbb8bd2028b4eb" translate="yes" xml:space="preserve">
          <source>Creating an ArrayBuffer</source>
          <target state="translated">ArrayBufferの作成</target>
        </trans-unit>
        <trans-unit id="3cd63011de21cb71f1ab176a0e23f987a62590f6" translate="yes" xml:space="preserve">
          <source>Creating an EvalError</source>
          <target state="translated">EvalErrorの作成</target>
        </trans-unit>
        <trans-unit id="3e82b2f70fa2386f32adf32ae398cde206d7fb25" translate="yes" xml:space="preserve">
          <source>Creating an URIError</source>
          <target state="translated">URIErrorの作成</target>
        </trans-unit>
        <trans-unit id="5bf971c425a6836f80070c394a91af539bc3bf65" translate="yes" xml:space="preserve">
          <source>Creating an array</source>
          <target state="translated">配列の作成</target>
        </trans-unit>
        <trans-unit id="1fba2483c7b4185df1dc146f3bdbc51c00872337" translate="yes" xml:space="preserve">
          <source>Creating an array using the result of a match</source>
          <target state="translated">マッチの結果を使用した配列の作成</target>
        </trans-unit>
        <trans-unit id="90a73c25fc4f34ed78f832ed4ea978fe6c379054" translate="yes" xml:space="preserve">
          <source>Creating an async function from an &lt;code&gt;AsyncFunction&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; コンストラクターからの非同期関数の作成</target>
        </trans-unit>
        <trans-unit id="a92cb75f15fa63f71d69a5a6c01aae95d89da7c8" translate="yes" xml:space="preserve">
          <source>Creating an async function from an AsyncFunction() constructor</source>
          <target state="translated">AsyncFunction()コンストラクタからの非同期関数の作成</target>
        </trans-unit>
        <trans-unit id="5b959068162fb118bafe3ebb7f8757f5af7ca996" translate="yes" xml:space="preserve">
          <source>Creating an unnamed function</source>
          <target state="translated">名前のない関数の作成</target>
        </trans-unit>
        <trans-unit id="4083765d230d4e8e6a48e6cdc76e1fa8365b8909" translate="yes" xml:space="preserve">
          <source>Creating new memory and table instances via the &lt;a href=&quot;webassembly/memory&quot;&gt;&lt;code&gt;WebAssembly.Memory()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;webassembly/table&quot;&gt;&lt;code&gt;WebAssembly.Table()&lt;/code&gt;&lt;/a&gt; constructors.</source>
          <target state="translated">&lt;a href=&quot;webassembly/memory&quot;&gt; &lt;code&gt;WebAssembly.Memory()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;webassembly/table&quot;&gt; &lt;code&gt;WebAssembly.Table()&lt;/code&gt; &lt;/a&gt;コンストラクターを介して新しいメモリとテーブルインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="d8dd4d67f3136087378e105e7c5e653955a5db29" translate="yes" xml:space="preserve">
          <source>Creating objects</source>
          <target state="translated">オブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="729c3ef2ff29241cb95dc60be589c457eee79b24" translate="yes" xml:space="preserve">
          <source>Creating shortcuts</source>
          <target state="translated">ショートカットの作成</target>
        </trans-unit>
        <trans-unit id="8fb2c384a4732e8bcfcfec530c9793e3142c0507" translate="yes" xml:space="preserve">
          <source>Creating strings</source>
          <target state="translated">文字列の作成</target>
        </trans-unit>
        <trans-unit id="e19c516d1146bde3aefa8e260ed503645aa5a0b1" translate="yes" xml:space="preserve">
          <source>Creating, displaying, and sorting an array</source>
          <target state="translated">配列の作成、表示、ソート</target>
        </trans-unit>
        <trans-unit id="eb3850b7f53182376e6ca1d58a5a2a5b19ca637e" translate="yes" xml:space="preserve">
          <source>Cross-browser notes</source>
          <target state="translated">クロスブラウザの注意事項</target>
        </trans-unit>
        <trans-unit id="51aac09e249b57ea3082fe6e2cb425a4067224c2" translate="yes" xml:space="preserve">
          <source>Current Index (&lt;code&gt;&lt;var&gt;idx&lt;/var&gt;&lt;/code&gt;)</source>
          <target state="translated">現在のインデックス（ &lt;code&gt;&lt;var&gt;idx&lt;/var&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d8f7c126aae9a16be0ec64812f345248bb46e4c6" translate="yes" xml:space="preserve">
          <source>Current Index (idx)</source>
          <target state="translated">現在のインデックス (idx)</target>
        </trans-unit>
        <trans-unit id="7857baa405012b33b4e7ec10cae2d79508d3aa75" translate="yes" xml:space="preserve">
          <source>Current Locale</source>
          <target state="translated">現在の地域</target>
        </trans-unit>
        <trans-unit id="5fe4257901b441060324e54c623edb26804eb6aa" translate="yes" xml:space="preserve">
          <source>Current Value (&lt;code&gt;&lt;var&gt;cur&lt;/var&gt;&lt;/code&gt;)</source>
          <target state="translated">現在の値（ &lt;code&gt;&lt;var&gt;cur&lt;/var&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="91e290d65d07a3ee9845b96a33526a2ccb44190c" translate="yes" xml:space="preserve">
          <source>Current Value (cur)</source>
          <target state="translated">現在の値(cur)</target>
        </trans-unit>
        <trans-unit id="2a07d7a6eb63401121db3faf992827fda0f0642a" translate="yes" xml:space="preserve">
          <source>Custom Error Types</source>
          <target state="translated">カスタムエラータイプ</target>
        </trans-unit>
        <trans-unit id="ac888906b3322dfbc9a77ddf6acf09e4929eec69" translate="yes" xml:space="preserve">
          <source>Custom Setters and Getters</source>
          <target state="translated">カスタムセッターとゲッター</target>
        </trans-unit>
        <trans-unit id="db81fb863d70b1982d9c9ee9d0fa321da613e6da" translate="yes" xml:space="preserve">
          <source>Custom and Null objects</source>
          <target state="translated">カスタムオブジェクトとヌルオブジェクト</target>
        </trans-unit>
        <trans-unit id="09ef5ca574f2a6d9417dfbe6c0a37b254224a426" translate="yes" xml:space="preserve">
          <source>Custom classes default to object tag</source>
          <target state="translated">カスタムクラスのデフォルトはオブジェクトタグ</target>
        </trans-unit>
        <trans-unit id="663f1afff82eab83480f351c9ec51bdfec9dafc2" translate="yes" xml:space="preserve">
          <source>Custom instanceof behavior</source>
          <target state="translated">カスタムインスタンスの動作</target>
        </trans-unit>
        <trans-unit id="ace9ca0c210bb274529981434475c88af75d5624" translate="yes" xml:space="preserve">
          <source>Custom iterables can be created by implementing the &lt;a href=&quot;../global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt; method. You must be certain that your iterator method returns an object which is an iterator, which is to say it must have a next method.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/symbol/iterator&quot;&gt; &lt;code&gt;Symbol.iterator&lt;/code&gt; &lt;/a&gt;メソッドを実装することにより、カスタムイテレータを作成できます。イテレータメソッドがイテレータであるオブジェクトを返すことを確認する必要があります。つまり、次のメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="30630ef0727e52089ce0a41e1abe9f440eafdfe0" translate="yes" xml:space="preserve">
          <source>Custom reverse split</source>
          <target state="translated">カスタム逆スプリット</target>
        </trans-unit>
        <trans-unit id="6585bd54b66ab70d9ba219be3541ec80c7ab0ba1" translate="yes" xml:space="preserve">
          <source>Custom sections</source>
          <target state="translated">カスタムセクション</target>
        </trans-unit>
        <trans-unit id="c66526b6f054e44614e232f862b431f1ae43ee57" translate="yes" xml:space="preserve">
          <source>Custom string search</source>
          <target state="translated">カスタム文字列検索</target>
        </trans-unit>
        <trans-unit id="c98cd471a7b05df78996790576252b25702ed9d0" translate="yes" xml:space="preserve">
          <source>Custom tag with toStringTag</source>
          <target state="translated">toStringTagを使ったカスタムタグ</target>
        </trans-unit>
        <trans-unit id="22146508bee8ca93336b11551f970a527ba7dc8b" translate="yes" xml:space="preserve">
          <source>Cyclic object value</source>
          <target state="translated">サイクリックオブジェクトの値</target>
        </trans-unit>
        <trans-unit id="eb171816be48050176e80b685fafdfe4814e000d" translate="yes" xml:space="preserve">
          <source>Data descriptors and accessor descriptors may optionally contain the following keys:</source>
          <target state="translated">データ記述子及びアクセサ記述子は、オプションで以下のキーを含むことができる。</target>
        </trans-unit>
        <trans-unit id="e4e33264a4e9b2dd177076a424e765dffdc72722" translate="yes" xml:space="preserve">
          <source>Data property of the &lt;code&gt;Function&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; コンストラクターのDataプロパティ</target>
        </trans-unit>
        <trans-unit id="d420dd85202cd95f0bddc8f730bfe77919e0ccc7" translate="yes" xml:space="preserve">
          <source>Data property of the Function constructor</source>
          <target state="translated">関数コンストラクタのデータプロパティ</target>
        </trans-unit>
        <trans-unit id="4b18ec27e01d225aee8875064a322ad5531b0ef8" translate="yes" xml:space="preserve">
          <source>Data types and data structures</source>
          <target state="translated">データ型とデータ構造</target>
        </trans-unit>
        <trans-unit id="f61b2275608fd670dd2a256a88981e3cb36ffed3" translate="yes" xml:space="preserve">
          <source>Data types such as strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects): &lt;code&gt;concat&lt;/code&gt; copies the values of strings and numbers into the new array.</source>
          <target state="translated">文字列、数値、ブール（&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;オブジェクトではない）などのデータ型： &lt;code&gt;concat&lt;/code&gt; は、文字列と数値の値を新しい配列にコピーします。</target>
        </trans-unit>
        <trans-unit id="16dcedc9e32ace9d82832081fe934341dd1cd877" translate="yes" xml:space="preserve">
          <source>DataView</source>
          <target state="translated">DataView</target>
        </trans-unit>
        <trans-unit id="af4cf47b0776ca34c76ab1f0a7eeb11a91d18abb" translate="yes" xml:space="preserve">
          <source>DataView.prototype</source>
          <target state="translated">DataView.prototype</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="a884921ab75b8dfe0a05adb47778b42bd4ca73b8" translate="yes" xml:space="preserve">
          <source>Date Time String Format</source>
          <target state="translated">日付時間文字列形式</target>
        </trans-unit>
        <trans-unit id="eb59d83604d333e9ad0dea933a9cede276c8c0dd" translate="yes" xml:space="preserve">
          <source>Date format and time zone conversions</source>
          <target state="translated">日付形式とタイムゾーンの変換</target>
        </trans-unit>
        <trans-unit id="95d3ecc8cce1722346abd5b60e1d4ba685187fe7" translate="yes" xml:space="preserve">
          <source>Date toLocaleString() override</source>
          <target state="translated">Date toLocaleString()オーバーライド</target>
        </trans-unit>
        <trans-unit id="17aeb43f1a9719a41558037bd1b702074092d248" translate="yes" xml:space="preserve">
          <source>Date.UTC</source>
          <target state="translated">Date.UTC</target>
        </trans-unit>
        <trans-unit id="dec8f5be8519a4c2865f63a643ac83022303a3b8" translate="yes" xml:space="preserve">
          <source>Date.UTC() with fewer than two arguments</source>
          <target state="translated">Date.UTC()の引数が 2 つ未満の場合</target>
        </trans-unit>
        <trans-unit id="b9484f971bcf9c5e45fa04b38731a47acacc2e30" translate="yes" xml:space="preserve">
          <source>Date.now</source>
          <target state="translated">Date.now</target>
        </trans-unit>
        <trans-unit id="88288325bb1780a9a064bffaa6e61413a8d11f99" translate="yes" xml:space="preserve">
          <source>Date.parse</source>
          <target state="translated">Date.parse</target>
        </trans-unit>
        <trans-unit id="26621c1d28b3b6286ddb9cd4e79a883aa11c04be" translate="yes" xml:space="preserve">
          <source>Date.prototype</source>
          <target state="translated">Date.prototype</target>
        </trans-unit>
        <trans-unit id="b23b93ccfb29529ffd6e4cbe4eb008d40126c38b" translate="yes" xml:space="preserve">
          <source>Date.prototype Methods</source>
          <target state="translated">Date.prototype メソッド</target>
        </trans-unit>
        <trans-unit id="7df70406ffbe29d666c5c889c294fb45047ffdd2" translate="yes" xml:space="preserve">
          <source>Date: 2 digit day in month, e.g. &quot;01&quot;</source>
          <target state="translated">日付:月の2桁の日、例:&quot;01&quot;</target>
        </trans-unit>
        <trans-unit id="ded021da1cc2104a5274d8b4aee97a12af229a7b" translate="yes" xml:space="preserve">
          <source>Day of month, as two digits with leading zero if required</source>
          <target state="translated">月の日、2桁の数字で、必要に応じて先頭にゼロを付けてください。</target>
        </trans-unit>
        <trans-unit id="35839d0d968ad8c07ebb5bf15036196f8936cb00" translate="yes" xml:space="preserve">
          <source>Day of week, as three letters (e.g. Sun, Mon, ...)</source>
          <target state="translated">曜日、3文字(例:日、月、...</target>
        </trans-unit>
        <trans-unit id="78506828583538147b1eafcfb833fee95b4281a6" translate="yes" xml:space="preserve">
          <source>Dead object</source>
          <target state="translated">死体</target>
        </trans-unit>
        <trans-unit id="292f3a50be1f743a1a34d6e95f1b89af03ca7559" translate="yes" xml:space="preserve">
          <source>Debugging JavaScript</source>
          <target state="translated">JavaScriptのデバッグ</target>
        </trans-unit>
        <trans-unit id="e4c3a2d0cc24a4535ef91791064ffe989cbd382a" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>
        </trans-unit>
        <trans-unit id="04585d27452c9c00b7d2ec726de07b2ab7469fa7" translate="yes" xml:space="preserve">
          <source>Decimal adjustment</source>
          <target state="translated">小数点調整</target>
        </trans-unit>
        <trans-unit id="b4f12c8351d59108eb63e6cfeabaa0293ee919f6" translate="yes" xml:space="preserve">
          <source>Decimal literals can start with a zero (&lt;code&gt;0&lt;/code&gt;) followed by another decimal digit, but If all digits after the leading &lt;code&gt;0&lt;/code&gt; are smaller than 8, the number is interpreted as an octal number. Because this is not the case with &lt;code&gt;08&lt;/code&gt; and &lt;code&gt;09&lt;/code&gt;, JavaScript warns about it.</source>
          <target state="translated">10進リテラルは、ゼロ（ &lt;code&gt;0&lt;/code&gt; ）で始まり、その後に別の10進数字が続き &lt;code&gt;0&lt;/code&gt; が、先頭の0の後のすべての数字が8より小さい場合、数値は8進数として解釈されます。これは &lt;code&gt;08&lt;/code&gt; と &lt;code&gt;09&lt;/code&gt; には当てはまらないため、JavaScriptが警告します。</target>
        </trans-unit>
        <trans-unit id="101849b49489e7190ef4f4952340a3f6d69176df" translate="yes" xml:space="preserve">
          <source>Decimal numeric literals (&lt;code&gt;1234567890&lt;/code&gt;)</source>
          <target state="translated">10進数の数値リテラル（ &lt;code&gt;1234567890&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="89b2503accebe08e1ce4cccda135a27c467745e3" translate="yes" xml:space="preserve">
          <source>Declared variables are a non-configurable property of their execution context (function or global). Undeclared variables are configurable (e.g. can be deleted).</source>
          <target state="translated">宣言された変数は、その実行コンテキスト(関数またはグローバル)の設定不可能なプロパティです。宣言されていない変数は設定可能です(例:削除可能)。</target>
        </trans-unit>
        <trans-unit id="e231d91c450652977122218becc8240ac93fd20a" translate="yes" xml:space="preserve">
          <source>Declared variables are constrained in the execution context in which they are declared. Undeclared variables are always global.</source>
          <target state="translated">宣言された変数は、宣言された実行コンテキストで制約を受けます。宣言されていない変数は常にグローバルです。</target>
        </trans-unit>
        <trans-unit id="d202cb312297448d951d9462340ef0ad2b7b5e51" translate="yes" xml:space="preserve">
          <source>Declared variables are created before any code is executed. Undeclared variables do not exist until the code assigning to them is executed.</source>
          <target state="translated">宣言された変数は、コードが実行される前に作成されます。宣言されていない変数は、それらに代入するコードが実行されるまで存在しません。</target>
        </trans-unit>
        <trans-unit id="913a3d9a44ab3f2193c073473bf40ec3113de401" translate="yes" xml:space="preserve">
          <source>Declares a block scope local variable, optionally initializing it to a value.</source>
          <target state="translated">ブロックスコープのローカル変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="55dd7e94cdb35a8efea09c4a013b621f0815242f" translate="yes" xml:space="preserve">
          <source>Declares a class.</source>
          <target state="translated">クラスを宣言します。</target>
        </trans-unit>
        <trans-unit id="d11b1b32114a9d225ec4c70408cb118dc0c73dfd" translate="yes" xml:space="preserve">
          <source>Declares a function with the specified parameters.</source>
          <target state="translated">指定されたパラメータを持つ関数を宣言します。</target>
        </trans-unit>
        <trans-unit id="ea799c4582672ba72076254244cb5e51b6ef8f50" translate="yes" xml:space="preserve">
          <source>Declares a read-only named constant.</source>
          <target state="translated">読み取り専用の名前付き定数を宣言します。</target>
        </trans-unit>
        <trans-unit id="11696ba8db438d098916104a09dbc514e0e2044d" translate="yes" xml:space="preserve">
          <source>Declares a variable, optionally initializing it to a value.</source>
          <target state="translated">変数を宣言し、オプションで値を初期化します。</target>
        </trans-unit>
        <trans-unit id="31e19cf54ede291a69e69e4ffb8aa5039d3c5bda" translate="yes" xml:space="preserve">
          <source>Declares an async function with the specified parameters.</source>
          <target state="translated">指定されたパラメータを持つ非同期関数を宣言します。</target>
        </trans-unit>
        <trans-unit id="1839377be9b02c22c258e29b5b0a52dee652a3fd" translate="yes" xml:space="preserve">
          <source>Declaring and initializing two variables</source>
          <target state="translated">2つの変数の宣言と初期化</target>
        </trans-unit>
        <trans-unit id="3c70b1c6380973161ef60b56252d130b0a9d7ee9" translate="yes" xml:space="preserve">
          <source>Declaring function in blocks &lt;code&gt;if (a &amp;lt; b) { function f() {} }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;if (a &amp;lt; b) { function f() {} }&lt;/code&gt; ブロック内の関数の宣言</target>
        </trans-unit>
        <trans-unit id="cb56509ff212e4e32d33c9a021c1d7d5d5a1f729" translate="yes" xml:space="preserve">
          <source>Declaring multiple variables</source>
          <target state="translated">複数の変数の宣言</target>
        </trans-unit>
        <trans-unit id="96b6182d5e47a561111cb4fd57d6288892bc9553" translate="yes" xml:space="preserve">
          <source>Declaring properties with var</source>
          <target state="translated">var を使ったプロパティの宣言</target>
        </trans-unit>
        <trans-unit id="18d924bfd8ac141a0033ab4c9d80cb3616972567" translate="yes" xml:space="preserve">
          <source>Declaring twice the same name for a property name in an object literal &lt;code&gt;{a: 1, b: 3, a: 7}&lt;/code&gt; This is no longer the case in ECMAScript 2015 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">オブジェクトリテラル &lt;code&gt;{a: 1, b: 3, a: 7}&lt;/code&gt; プロパティ名に同じ名前を2回宣言するこれは、ECMAScript 2015 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;ではもう当てはまり&lt;/a&gt;ません（バグ1041128）。</target>
        </trans-unit>
        <trans-unit id="7a98aa50abe1811e9c8a9a135887c6c2b362ec3e" translate="yes" xml:space="preserve">
          <source>Declaring two function parameters with the same name &lt;code&gt;function f(a, b, b) {}&lt;/code&gt;</source>
          <target state="translated">同じ名前の2つの関数パラメーターの宣言 &lt;code&gt;function f(a, b, b) {}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8fe7fdcd4a344a13eb8efa5bce14165a51ec863a" translate="yes" xml:space="preserve">
          <source>Declaring variables in the JavaScript Guide</source>
          <target state="translated">JavaScriptガイドで変数を宣言する</target>
        </trans-unit>
        <trans-unit id="4b9d36d83c06e37782d740af6424903230486d88" translate="yes" xml:space="preserve">
          <source>Decoding</source>
          <target state="translated">Decoding</target>
        </trans-unit>
        <trans-unit id="a2644a9fe5339b4e3fa18a836ae66d6324621a59" translate="yes" xml:space="preserve">
          <source>Decoding a Cyrillic URL</source>
          <target state="translated">キリル文字のURLをデコードする</target>
        </trans-unit>
        <trans-unit id="b11b816ef2fe8e2b8df5e7b24dd220b2e9206e18" translate="yes" xml:space="preserve">
          <source>Decoding a Cyrillic URL component</source>
          <target state="translated">キリル文字のURLコンポーネントをデコードする</target>
        </trans-unit>
        <trans-unit id="6480ddfa0ffe367f170111dc9e35f20e9916669f" translate="yes" xml:space="preserve">
          <source>Decoding query parameters from a URL</source>
          <target state="translated">URL からのクエリパラメータのデコード</target>
        </trans-unit>
        <trans-unit id="775274f7a214337d1df8c6c1f84db58ee1130e3b" translate="yes" xml:space="preserve">
          <source>Decoding replaces each escape sequence in the encoded URI component with the character that it represents. If there isn't such a character, an error will be thrown:</source>
          <target state="translated">デコードは、エンコードされたURIコンポーネントの各エスケープシーケンスを、それが表す文字で置き換えます。そのような文字がない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="2a80ede259425afac73997306cbbdb8b556c9522" translate="yes" xml:space="preserve">
          <source>Decreasing the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property does, however, delete elements.</source>
          <target state="translated">ただし、&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;プロパティを減らすと、要素が削除されます。</target>
        </trans-unit>
        <trans-unit id="eac4938470d245c2c11c6bab1a6dd390d8ae1011" translate="yes" xml:space="preserve">
          <source>Decrement (--)</source>
          <target state="translated">減少(--)</target>
        </trans-unit>
        <trans-unit id="202ad1ad07c2a2408e88c05481a0f16aac7ee1e0" translate="yes" xml:space="preserve">
          <source>Decrement (&lt;code&gt;--&lt;/code&gt;)</source>
          <target state="translated">減少（ &lt;code&gt;--&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d64d0e53f5125bb0fe41561d3d8ed643b13c2cec" translate="yes" xml:space="preserve">
          <source>Default Exports (One per module)</source>
          <target state="translated">デフォルトのエクスポート (モジュールごとに1つ)</target>
        </trans-unit>
        <trans-unit id="3f40ff32236c5b97eee71a7291eea7f2cf15cd7a" translate="yes" xml:space="preserve">
          <source>Default constructors</source>
          <target state="translated">デフォルトのコンストラクタ</target>
        </trans-unit>
        <trans-unit id="89ba39d50f3b702bb5d6ece8e317ca5c20b4bb65" translate="yes" xml:space="preserve">
          <source>Default exports (class):</source>
          <target state="translated">デフォルトのエクスポート(クラス)。</target>
        </trans-unit>
        <trans-unit id="54d742c08cbe8684d03b92c7d780e04875609ada" translate="yes" xml:space="preserve">
          <source>Default exports (function):</source>
          <target state="translated">デフォルトのエクスポート(関数)。</target>
        </trans-unit>
        <trans-unit id="2179bea0ab0aa093fe4ee6543539f14fce38374e" translate="yes" xml:space="preserve">
          <source>Default exports:</source>
          <target state="translated">デフォルトのエクスポート。</target>
        </trans-unit>
        <trans-unit id="635d89e064f8c0a520a07f0ee2acdd210adbf996" translate="yes" xml:space="preserve">
          <source>Default function parameters allow formal parameters to be initialized with default values if no value or &lt;code&gt;undefined&lt;/code&gt; is passed. For more details, see&lt;a href=&quot;functions/default_parameters&quot;&gt; default parameters&lt;/a&gt;.</source>
          <target state="translated">デフォルトの関数パラメーターを使用すると、値がない場合や &lt;code&gt;undefined&lt;/code&gt; 場合に、仮パラメーターをデフォルト値で初期化できます。詳細については、&lt;a href=&quot;functions/default_parameters&quot;&gt;デフォルトパラメータを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a9000eb05897147ae92de90fbc771b0e33766037" translate="yes" xml:space="preserve">
          <source>Default parameters</source>
          <target state="translated">デフォルトパラメータ</target>
        </trans-unit>
        <trans-unit id="6c550c7cc57013f36fa40b31a06225c93ab300d8" translate="yes" xml:space="preserve">
          <source>Default parameters are available to later default parameters</source>
          <target state="translated">デフォルトパラメータは、後のデフォルトパラメータに利用可能</target>
        </trans-unit>
        <trans-unit id="270b0f369b5f266751f63c8385d02eb0b0af52f9" translate="yes" xml:space="preserve">
          <source>Default tags</source>
          <target state="translated">デフォルトのタグ</target>
        </trans-unit>
        <trans-unit id="e034cbbe2b8762f796d4892d08bbfed1145d3ef8" translate="yes" xml:space="preserve">
          <source>Default values</source>
          <target state="translated">デフォルト値</target>
        </trans-unit>
        <trans-unit id="e2065f7c8a0f6845b78a98fceca8a4f710d9e7f8" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6d7d6ed07ee5e21d035c66fc13a569dcceb2dc63" translate="yes" xml:space="preserve">
          <source>Define the object type by writing a function.</source>
          <target state="translated">関数を書いてオブジェクトの型を定義します。</target>
        </trans-unit>
        <trans-unit id="f4f04ed477aaf8206908f44f0bb95b7718648813" translate="yes" xml:space="preserve">
          <source>Defined as &lt;code&gt;&lt;em&gt;NativeError&lt;/em&gt;.prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;NativeError&lt;/em&gt;.prototype&lt;/code&gt; として定義されています。</target>
        </trans-unit>
        <trans-unit id="8135c055383efbc8d34d7abd1f852beab2509a47" translate="yes" xml:space="preserve">
          <source>Defined as &lt;code&gt;TypedArray&lt;/code&gt; and &lt;code&gt;ArrayBufferView&lt;/code&gt; interface with typed array view types. Superseded by ECMAScript 2015.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; および &lt;code&gt;ArrayBufferView&lt;/code&gt; インターフェイスとして定義され、型付きの配列ビュータイプを持ちます。ECMAScript 2015に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="d3284e4eca66ca802bfe816260c1b06e2bbab189" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/9.0/#sec-object-initializer&quot;&gt;Object Initializer&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.ecma-international.org/ecma-262/9.0/#sec-object-initializer&quot;&gt;オブジェクト初期化子で&lt;/a&gt;定義</target>
        </trans-unit>
        <trans-unit id="6a50331dee3a148f385474bdfa09f947c2196de2" translate="yes" xml:space="preserve">
          <source>Defined in several section of the specification: &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-template-literals&quot;&gt;Template Literals&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tagged-templates&quot;&gt;Tagged Templates&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-template-literals&quot;&gt;テンプレートリテラル&lt;/a&gt;、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tagged-templates&quot;&gt;タグ付きテンプレート&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba369cb1d831962f57ddaf0ab85e930212eaf90a" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-bitwise-not-operator&quot;&gt;Bitwise NOT operator&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-bitwise-shift-operators&quot;&gt;Bitwise shift operators&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-binary-bitwise-operators&quot;&gt;Binary bitwise operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-bitwise-not-operator&quot;&gt;ビット&lt;/a&gt;&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-binary-bitwise-operators&quot;&gt;ごとの&lt;/a&gt;NOT演算子、&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-bitwise-shift-operators&quot;&gt;ビット&lt;/a&gt;ごとのシフト演算子、バイナリのビット演算子</target>
        </trans-unit>
        <trans-unit id="8e30f9cc4f7408e076e62f67630ff14c2e540624" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-logical-not-operator&quot;&gt;Logical NOT Operator&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-binary-logical-operators&quot;&gt;Binary Logical Operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-logical-not-operator&quot;&gt;論理NOT演算子&lt;/a&gt;、&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-binary-logical-operators&quot;&gt;二項論理演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e803ea055c200a094696e39f109ccb5cfc84df8a" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-relational-operators&quot;&gt;Relational Operators&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-equality-operators&quot;&gt;Equality Operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-relational-operators&quot;&gt;関係演算子&lt;/a&gt;、&lt;a href=&quot;http://tc39.github.io/ecma262/#sec-equality-operators&quot;&gt;等値演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a922f0dafd60000915f3b53e5b7d741996eba7d2" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.8&quot;&gt;Bitwise NOT operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.7&quot;&gt;Bitwise shift operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.10&quot;&gt;Binary bitwise operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.8&quot;&gt;ビット&lt;/a&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.10&quot;&gt;ごとの&lt;/a&gt;NOT演算子、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.7&quot;&gt;ビット&lt;/a&gt;ごとのシフト演算子、バイナリのビット演算子</target>
        </trans-unit>
        <trans-unit id="31c360f8cf977b1c8b79b5612e912e41cfe9beb2" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9&quot;&gt;Logical NOT Operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.11&quot;&gt;Binary Logical Operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9&quot;&gt;論理NOT演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.11&quot;&gt;二項論理演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8dba1798a2f21c1f83942e67f96b513a391849f6" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.6&quot;&gt;Additive operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.5&quot;&gt;Multiplicative operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.3&quot;&gt;Postfix expressions&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4&quot;&gt;Unary operators&lt;/a&gt;.</source>
          <target state="translated">仕様のいくつかのセクションで定義されています：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.6&quot;&gt;加法演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.5&quot;&gt;乗法演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.3&quot;&gt;Postfix式&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4&quot;&gt;単項演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84b1f13a754d92874b858a5bc746a28230943e7a" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.8&quot;&gt;Relational Operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9&quot;&gt;Equality Operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.8&quot;&gt;関係演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9&quot;&gt;等値演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a54debf7451a06b9283efe078744afabc774484b" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-additive-operators&quot;&gt;Additive operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-multiplicative-operators&quot;&gt;Multiplicative operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-postfix-expressions&quot;&gt;Postfix expressions&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-unary-operators&quot;&gt;Unary operators&lt;/a&gt;.</source>
          <target state="translated">仕様のいくつかのセクションで定義されています：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-additive-operators&quot;&gt;加法演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-multiplicative-operators&quot;&gt;乗法演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-postfix-expressions&quot;&gt;Postfix式&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-unary-operators&quot;&gt;単項演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90263793a58d0a7d5f66c3cae0e947275b379c1f" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer&quot;&gt;Array Initializer&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-argument-lists&quot;&gt;Argument Lists&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer&quot;&gt;配列初期化子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-argument-lists&quot;&gt;引数リスト&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b84a68de1a59daf33789e4df758725512ca501b7" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-not-operator&quot;&gt;Bitwise NOT operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-shift-operators&quot;&gt;Bitwise shift operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-binary-bitwise-operators&quot;&gt;Binary bitwise operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-not-operator&quot;&gt;ビット&lt;/a&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-binary-bitwise-operators&quot;&gt;ごとの&lt;/a&gt;NOT演算子、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-shift-operators&quot;&gt;ビット&lt;/a&gt;ごとのシフト演算子、バイナリのビット演算子</target>
        </trans-unit>
        <trans-unit id="e4819bc95f9b3e8724fd7c9c6bc83f8869605f32" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-logical-not-operator&quot;&gt;Logical NOT Operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-binary-logical-operators&quot;&gt;Binary Logical Operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-logical-not-operator&quot;&gt;論理NOT演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-binary-logical-operators&quot;&gt;二項論理演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f62ce1bf99fdbf9f53f8540e34490de8042fbd20" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-relational-operators&quot;&gt;Relational Operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-equality-operators&quot;&gt;Equality Operators&lt;/a&gt;</source>
          <target state="translated">仕様のいくつかのセクションで定義：&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-relational-operators&quot;&gt;関係演算子&lt;/a&gt;、&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-equality-operators&quot;&gt;等値演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e56abc5166d19e38fb40d8b6ec113b3532ae1a1" translate="yes" xml:space="preserve">
          <source>Defined in the (informative) Compatibility Annex B</source>
          <target state="translated">(有益な)互換性付属書Bで定義されています。</target>
        </trans-unit>
        <trans-unit id="75a750a94adea24f176dca15a3f421404ac09263" translate="yes" xml:space="preserve">
          <source>Defined in the (informative) Compatibility Annex B. Implemented in JavaScript 1.0.</source>
          <target state="translated">(有益な)互換性附属書Bで定義されています。</target>
        </trans-unit>
        <trans-unit id="0a1314bd1b27f5eef24dc26544e1e41d6c692206" translate="yes" xml:space="preserve">
          <source>Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers</source>
          <target state="translated">Web ブラウザ用追加 ECMAScript 機能のための(規範的な)附属書 B で定義されています。</target>
        </trans-unit>
        <trans-unit id="16872b91c99cec7396e1a80a1ba0e2dbee1be100" translate="yes" xml:space="preserve">
          <source>Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers.</source>
          <target state="translated">Web ブラウザ用の追加 ECMAScript 機能のための(規範的な)附属書 B で定義されています。</target>
        </trans-unit>
        <trans-unit id="4d2dbce72daf00164b733da92413d3d5bedcf7c4" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;import.meta&lt;/code&gt; properties in HTML.</source>
          <target state="translated">HTMLで &lt;code&gt;import.meta&lt;/code&gt; プロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="a35d2a82f796df6ee53e547ed5547b91b3b33c63" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments.</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; と &lt;code&gt;options&lt;/code&gt; 引数を定義します。</target>
        </trans-unit>
        <trans-unit id="04407b319c71159b7fc42fab883b60c97bb47745" translate="yes" xml:space="preserve">
          <source>Defines the value to return from the generator function via &lt;a href=&quot;../iteration_protocols#The_iterator_protocol&quot;&gt;the iterator protocol&lt;/a&gt;. If omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">&lt;a href=&quot;../iteration_protocols#The_iterator_protocol&quot;&gt;イテレータプロトコルを&lt;/a&gt;介してジェネレータ関数から返す値を定義します。省略すると、代わりに &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
