<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="8dcd12c669cda5e58092102e97cb8d8dd360a58b" translate="yes" xml:space="preserve">
          <source>RouteDefinition</source>
          <target state="translated">RouteDefinition</target>
        </trans-unit>
        <trans-unit id="76a5f5f22494bf6a3c36afbf4839eb11b038893c" translate="yes" xml:space="preserve">
          <source>RouteParams</source>
          <target state="translated">RouteParams</target>
        </trans-unit>
        <trans-unit id="6dcf16e1c5d3e9fd2ae4a4d54c174448fe43e1b6" translate="yes" xml:space="preserve">
          <source>Router</source>
          <target state="translated">Router</target>
        </trans-unit>
        <trans-unit id="8183a5a123ef606156a7236c70c6654dd427ccb8" translate="yes" xml:space="preserve">
          <source>Routers and &quot;Routing Component&quot; instances have a 1:1 correspondence.</source>
          <target state="translated">ルータと「ルーティングコンポーネント」インスタンスは、1:1の対応をしています。</target>
        </trans-unit>
        <trans-unit id="83fdf92a177cbfa66587a728de0b8ede57b01242" translate="yes" xml:space="preserve">
          <source>Routes that specify &lt;code&gt;redirectTo&lt;/code&gt; will not have their controllers, template functions or resolves called, the &lt;code&gt;$location&lt;/code&gt; will be changed to the redirect url and route processing will stop. The exception to this is if the &lt;code&gt;redirectTo&lt;/code&gt; is a function that returns &lt;code&gt;undefined&lt;/code&gt;. In this case the route transition occurs as though there was no redirection.</source>
          <target state="translated">&lt;code&gt;redirectTo&lt;/code&gt; を指定するルートでは、コントローラー、テンプレート関数、または解決が呼び出されず、 &lt;code&gt;$location&lt;/code&gt; がリダイレクトURLに変更され、ルート処理が停止します。これの例外は、 &lt;code&gt;redirectTo&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; を返す関数である場合です。この場合、リダイレクションがないかのようにルート遷移が発生します。</target>
        </trans-unit>
        <trans-unit id="e7b1153512a20069add6781cd8603848df2e4812" translate="yes" xml:space="preserve">
          <source>Run Blocks</source>
          <target state="translated">ランブロック</target>
        </trans-unit>
        <trans-unit id="6722ce3ddf6850ce91e5f88f346e10e3149acc4e" translate="yes" xml:space="preserve">
          <source>Run blocks are the closest thing in AngularJS to the main method. A run block is the code which needs to run to kickstart the application. It is executed after all of the services have been configured and the injector has been created. Run blocks typically contain code which is hard to unit-test, and for this reason should be declared in isolated modules, so that they can be ignored in the unit-tests.</source>
          <target state="translated">ランブロックはAngularJSではメインメソッドに最も近いものです。ランブロックはアプリケーションをキックスタートさせるために実行する必要があるコードです。すべてのサービスが設定され、インジェクタが作成された後に実行されます。ランブロックには通常ユニットテストが難しいコードが含まれており、ユニットテストで無視できるように隔離されたモジュールで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c8d88336270bc857b4196cfd5d242d75f0df581" translate="yes" xml:space="preserve">
          <source>Running in Production</source>
          <target state="translated">製造中の走行</target>
        </trans-unit>
        <trans-unit id="6bf708b8b6443fe6b3516682e7295e2172a361cc" translate="yes" xml:space="preserve">
          <source>Runs each of the registered validators (first synchronous validators and then asynchronous validators). If the validity changes to invalid, the model will be set to &lt;code&gt;undefined&lt;/code&gt;, unless &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;. If the validity changes to valid, it will set the model to the last available valid &lt;code&gt;$modelValue&lt;/code&gt;, i.e. either the last parsed value or the last value set from the scope.</source>
          <target state="translated">登録された各バリデーターを実行します（最初に同期バリデーター、次に非同期バリデーター）。有効性が無効に変更されると、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; でない限り、モデルは &lt;code&gt;undefined&lt;/code&gt; に設定されます。有効性が有効に変更されると、モデルは最後に利用可能な有効な &lt;code&gt;$modelValue&lt;/code&gt; に設定されます。つまり、最後に解析された値またはスコープから設定された最後の値のいずれかです。</target>
        </trans-unit>
        <trans-unit id="51a25d271cdba006eac5b5ccdf053324c5952492" translate="yes" xml:space="preserve">
          <source>Runs interval tasks scheduled to be run in the next &lt;code&gt;millis&lt;/code&gt; milliseconds.</source>
          <target state="translated">次の中で実行されるようにスケジュールされた間隔たタスク実行します &lt;code&gt;millis&lt;/code&gt; ミリ秒。</target>
        </trans-unit>
        <trans-unit id="4d98cf965492ebc44005e85cab154fe7869e024c" translate="yes" xml:space="preserve">
          <source>Runs the model -&amp;gt; view pipeline on the current &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;$modelValue&lt;/a&gt;.</source>
          <target state="translated">現在の&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;$ modelValueで&lt;/a&gt;モデル-&amp;gt;ビューパイプラインを実行します。</target>
        </trans-unit>
        <trans-unit id="2694e7251db3dfe3d11328de106646d2159d761d" translate="yes" xml:space="preserve">
          <source>Runtime equivalent of the &lt;code&gt;$httpProvider.defaults&lt;/code&gt; property. Allows configuration of default headers, withCredentials as well as request and response transformations.</source>
          <target state="translated">&lt;code&gt;$httpProvider.defaults&lt;/code&gt; プロパティに相当するランタイム。デフォルトヘッダー、withCredentials、およびリクエストとレスポンスの変換を設定できます。</target>
        </trans-unit>
        <trans-unit id="14edc209d09ed27caa061a338e4aa18cb1b36a06" translate="yes" xml:space="preserve">
          <source>Sample project</source>
          <target state="translated">サンプルプロジェクト</target>
        </trans-unit>
        <trans-unit id="3344d56affca2f26f3349fbdd450598c93585333" translate="yes" xml:space="preserve">
          <source>Sandbox removal</source>
          <target state="translated">サンドボックスの除去</target>
        </trans-unit>
        <trans-unit id="0f3d939de1df71ef2e1f63f17842b0611b8ef64d" translate="yes" xml:space="preserve">
          <source>Sanitized HTML.</source>
          <target state="translated">サニタイズされたHTML。</target>
        </trans-unit>
        <trans-unit id="580aa4cc01f79a6c59249fb583ca11e7ec51d9fe" translate="yes" xml:space="preserve">
          <source>Sanitizes an html string by stripping all potentially dangerous tokens.</source>
          <target state="translated">潜在的に危険なトークンをすべて取り除くことで、HTML文字列をサニタイズします。</target>
        </trans-unit>
        <trans-unit id="9e175993438b3e28876508d6f59beb5b4a306211" translate="yes" xml:space="preserve">
          <source>Savvy readers may be wondering what the difference is between &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;controller&lt;/code&gt;. The basic difference is that &lt;code&gt;controller&lt;/code&gt; can expose an API, and &lt;code&gt;link&lt;/code&gt; functions can interact with controllers using &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">知識の豊富な読者は、 &lt;code&gt;link&lt;/code&gt; と &lt;code&gt;controller&lt;/code&gt; 違いは何か疑問に思うかもしれません。基本的な違いは、 &lt;code&gt;controller&lt;/code&gt; がAPIを公開できることと、 &lt;code&gt;link&lt;/code&gt; 関数が &lt;code&gt;require&lt;/code&gt; を使用してコントローラーとやり取りできることです。</target>
        </trans-unit>
        <trans-unit id="0026a1fa21295bd980ca8124863ef3160c0b9ac7" translate="yes" xml:space="preserve">
          <source>Say for example we have the following template code:</source>
          <target state="translated">例えば、次のようなテンプレートコードがあるとします。</target>
        </trans-unit>
        <trans-unit id="c722c123fc2fd2bee33be1a4dd76341ecd74052f" translate="yes" xml:space="preserve">
          <source>Schedule the invocation of $apply to occur at a later time. The actual time difference varies across browsers, but is typically around ~10 milliseconds.</source>
          <target state="translated">後日、$apply の呼び出しを実行するようにスケジュールします。実際の時間差はブラウザによって異なりますが、通常は約10ミリ秒程度です。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="d62f8def19ab323ad10bffef70588ee9540fc2d6" translate="yes" xml:space="preserve">
          <source>Scope $watch Depths</source>
          <target state="translated">スコープ $watch Depths</target>
        </trans-unit>
        <trans-unit id="a0d0cff31594de76eaec1ced0bc0427022b195e7" translate="yes" xml:space="preserve">
          <source>Scope $watch Performance Considerations</source>
          <target state="translated">スコープ $watch パフォーマンスに関する考察</target>
        </trans-unit>
        <trans-unit id="302b65ae6f117c3e38e7c18bfe45c77b70add9db" translate="yes" xml:space="preserve">
          <source>Scope Events Propagation</source>
          <target state="translated">スコープイベント伝搬</target>
        </trans-unit>
        <trans-unit id="14241b753df73c19b8820274254a2c60ac0f3554" translate="yes" xml:space="preserve">
          <source>Scope Hierarchies</source>
          <target state="translated">スコープ階層</target>
        </trans-unit>
        <trans-unit id="235fb31c091c88a3fb9489274d806ccefa3ab9aa" translate="yes" xml:space="preserve">
          <source>Scope Life Cycle</source>
          <target state="translated">スコープのライフサイクル</target>
        </trans-unit>
        <trans-unit id="d0976b956d6be8d6a8545b0183535a72f8ebf106" translate="yes" xml:space="preserve">
          <source>Scope and DOMWindow objects are being compared only by identify (&lt;code&gt;===&lt;/code&gt;).</source>
          <target state="translated">スコープとDOMWindowオブジェクトは、識別（ &lt;code&gt;===&lt;/code&gt; ）によってのみ比較されます。</target>
        </trans-unit>
        <trans-unit id="916a87217731f57973f048683cb4e97fb8e65898" translate="yes" xml:space="preserve">
          <source>Scope as Data-Model</source>
          <target state="translated">データモデルとしてのスコープ</target>
        </trans-unit>
        <trans-unit id="bc212604b2d7699ce510ae90a60dff8c0da3bd01" translate="yes" xml:space="preserve">
          <source>Scope characteristics</source>
          <target state="translated">スコープ特性</target>
        </trans-unit>
        <trans-unit id="439fa51120c7e99613ab6ed03151eda647cd3102" translate="yes" xml:space="preserve">
          <source>Scope is the glue between application controller and the view. During the template &lt;a href=&quot;compiler&quot;&gt;linking&lt;/a&gt; phase the &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; set up &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; expressions on the scope. The &lt;code&gt;$watch&lt;/code&gt; allows the directives to be notified of property changes, which allows the directive to render the updated value to the DOM.</source>
          <target state="translated">スコープは、アプリケーションコントローラーとビューの間の接着剤です。テンプレートの&lt;a href=&quot;compiler&quot;&gt;リンク&lt;/a&gt;段階で、&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;はスコープに&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;式を設定します。 &lt;code&gt;$watch&lt;/code&gt; ディレクティブは、ディレクティブはDOMに更新された値をレンダリングすることを可能にするプロパティの変更の通知を受けることができます。</target>
        </trans-unit>
        <trans-unit id="bd3e0ec8cb2c6725e8aebcf009d5a5f0c7046543" translate="yes" xml:space="preserve">
          <source>Scope's &lt;code&gt;$apply()&lt;/code&gt; method transitions through the following stages:</source>
          <target state="translated">スコープの &lt;code&gt;$apply()&lt;/code&gt; メソッドは、次の段階を経て遷移します。</target>
        </trans-unit>
        <trans-unit id="c23540e5fb551edff0ac95649a1d551f9736d55e" translate="yes" xml:space="preserve">
          <source>Scopes</source>
          <target state="translated">Scopes</target>
        </trans-unit>
        <trans-unit id="e3c4eecb101b53837a98d4900e291d21207bd54b" translate="yes" xml:space="preserve">
          <source>Scopes and Directives</source>
          <target state="translated">スコープとディレクティブ</target>
        </trans-unit>
        <trans-unit id="b0f972ffeb44595b9c559cde18f280bbcdb9f0ed" translate="yes" xml:space="preserve">
          <source>Scopes and controllers interact with each other in the following situations:</source>
          <target state="translated">スコープとコントローラは、次のような状況で相互に作用します。</target>
        </trans-unit>
        <trans-unit id="e2e9569b987d972c9628df7d29a9a7916ae77fe8" translate="yes" xml:space="preserve">
          <source>Scopes are attached to the DOM as &lt;code&gt;$scope&lt;/code&gt; data property, and can be retrieved for debugging purposes. (It is unlikely that one would need to retrieve scopes in this way inside the application.) The location where the root scope is attached to the DOM is defined by the location of &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ng-app&lt;/code&gt;&lt;/a&gt; directive. Typically &lt;code&gt;ng-app&lt;/code&gt; is placed on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, but it can be placed on other elements as well, if, for example, only a portion of the view needs to be controlled by AngularJS.</source>
          <target state="translated">スコープは &lt;code&gt;$scope&lt;/code&gt; dataプロパティとしてDOMにアタッチされ、デバッグ目的で取得できます。 （アプリケーション内でこの方法でスコープを取得する必要があることはほとんどありません。）ルートスコープがDOMにアタッチされる場所は、&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ng-app&lt;/code&gt; &lt;/a&gt;ディレクティブの場所によって定義されます。通常、 &lt;code&gt;ng-app&lt;/code&gt; は &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素に配置されますが、たとえば、ビューの一部のみをAngularJSで制御する必要がある場合は、他の要素にも配置できます。</target>
        </trans-unit>
        <trans-unit id="4d7b2296b8556dc8d3127680a232536b62a2e88a" translate="yes" xml:space="preserve">
          <source>Scopes can be nested to limit access to the properties of application components while providing access to shared model properties. Nested scopes are either &quot;child scopes&quot; or &quot;isolate scopes&quot;. A &quot;child scope&quot; (prototypically) inherits properties from its parent scope. An &quot;isolate scope&quot; does not. See &lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;isolated scopes&lt;/a&gt; for more information.</source>
          <target state="translated">スコープを入れ子にして、共有コンポーネントのプロパティへのアクセスを提供しながら、アプリケーションコンポーネントのプロパティへのアクセスを制限できます。ネストされたスコープは、「子スコープ」または「分離スコープ」のいずれかです。「子スコープ」は（典型的には）親スコープからプロパティを継承します。「分離スコープ」にはありません。詳細については、&lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;分離スコープ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="305cd57d6f32dc5f9b280f00159d0df0f3023e4e" translate="yes" xml:space="preserve">
          <source>Scopes can propagate events in similar fashion to DOM events. The event can be &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24broadcast.html&quot;&gt;broadcasted&lt;/a&gt; to the scope children or &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24emit.html&quot;&gt;emitted&lt;/a&gt; to scope parents.</source>
          <target state="translated">スコープは、DOMイベントと同様の方法でイベントを伝播できます。イベントが可能な&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24broadcast.html&quot;&gt;放送&lt;/a&gt;範囲の子供にまたは&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24emit.html&quot;&gt;放出された&lt;/a&gt;スコープの親に。</target>
        </trans-unit>
        <trans-unit id="d1a3bd31aed7d75d260f08509418244324e8a207" translate="yes" xml:space="preserve">
          <source>Scopes provide APIs (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;) to propagate any model changes through the system into the view from outside of the &quot;AngularJS realm&quot; (controllers, services, AngularJS event handlers).</source>
          <target state="translated">スコープは、「AngularJSレルム」（コントローラー、サービス、AngularJSイベントハンドラー）の外部からシステムへのモデル変更をビューに伝播するためのAPI（&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt;）を提供します。</target>
        </trans-unit>
        <trans-unit id="11ac5700c534742d0e8c9053281de57235e54557" translate="yes" xml:space="preserve">
          <source>Scopes provide APIs (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt;) to observe model mutations.</source>
          <target state="translated">スコープは、モデルの変更を&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;するためのAPI（$ watch）を提供します。</target>
        </trans-unit>
        <trans-unit id="ce449a4334e989d4805feb6f59bfbc096fd1d3f1" translate="yes" xml:space="preserve">
          <source>Scopes provide context against which &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt; are evaluated. For example &lt;code&gt;{{username}}&lt;/code&gt; expression is meaningless, unless it is evaluated against a specific scope which defines the &lt;code&gt;username&lt;/code&gt; property.</source>
          <target state="translated">スコープは、&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;が評価されるコンテキストを提供します。たとえば、 &lt;code&gt;{{username}}&lt;/code&gt; 式は、 &lt;code&gt;username&lt;/code&gt; プロパティを定義する特定のスコープに対して評価されない限り、意味がありません。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="translated">セキュリティへの配慮</target>
        </trans-unit>
        <trans-unit id="c656e13929f42b006319c02054f25a66cda15f73" translate="yes" xml:space="preserve">
          <source>See &quot;Setting HTTP Headers&quot; and &quot;Transforming Requests and Responses&quot; sections above.</source>
          <target state="translated">上記の「HTTPヘッダの設定」と「リクエストとレスポンスの変換」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2ce580465f075a927c26bd792f620faeb08178d8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;%24resource#using-interceptors.html&quot;&gt;below&lt;/a&gt; for an example of using interceptors in &lt;code&gt;$resource&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; インターセプターを使用する例については、&lt;a href=&quot;%24resource#using-interceptors.html&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a0f7cdb05f0d1da3c48719d367b1b98eaed811b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;%24rootscope.scope#%24suspend.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; for information about the dangers of using this approach.</source>
          <target state="translated">このアプローチを使用することの危険性については、&lt;a href=&quot;%24rootscope.scope#%24suspend.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ab6e9c3878b3b65c683ceec3e46af03e5068396" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;getTrusted&lt;/a&gt; for the function that will consume those trusted values, and &lt;a href=&quot;%24sce&quot;&gt;$sce&lt;/a&gt; for general documentation about strict contextual escaping.</source>
          <target state="translated">これらの信頼できる値を消費する関数については&lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;getTrusted&lt;/a&gt;を、厳密なコンテキストエスケープに関する一般的なドキュメントについては&lt;a href=&quot;%24sce&quot;&gt;$ &lt;/a&gt;sceを参照してください。</target>
        </trans-unit>
        <trans-unit id="08a2abfd00cc89b00d13557bd045d8a7fc819d20" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#decorator.html&quot;&gt;$provide.decorator()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#decorator.html&quot;&gt;$ provide.decorator（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4881e6ea68349cef48089f2f637bc14482f49cf0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#factory.html&quot;&gt;$provide.factory()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#factory.html&quot;&gt;$ provide.factory（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc816366c830b4ded4b6885c7268a758294924b3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#provider.html&quot;&gt;$provide.provider()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#provider.html&quot;&gt;$ provide.provider（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="802e7e1e8c14b1ed28b14aaa7fe5ba0c8a8729a5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;$provide.service()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;$ provide.service（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1492fdd835886f46960aff4b15c1ea7527996eee" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#value.html&quot;&gt;$provide.value()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#value.html&quot;&gt;$ provide.value（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d4702c3d54b709af87dc2b647ec20769598ffc5d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; for information about what options can be specified and how model option inheritance works.</source>
          <target state="translated">指定できるオプションとモデルオプションの継承のしくみについては、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="45e9c3ebaad21216152aaedcba8b19ad6f025f8c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24animateprovider#register.html&quot;&gt;$animateProvider.register()&lt;/a&gt; and &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate module&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../provider/%24animateprovider#register.html&quot;&gt;$ animateProvider.register（）&lt;/a&gt;および&lt;a href=&quot;../../nganimate&quot;&gt;ngAnimateモジュール&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="658501b0548d68515ff6b170517e8aa37a8f25fc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;$compileProvider.component()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;$ compileProvider.component（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="33da85697433ddb423abb205cb0071fc01ab0c67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; for more.</source>
          <target state="translated">詳細は&lt;a href=&quot;../provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8e7660c1158870c4e303c6c71117d715a3757a1a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;$compileProvider.directive()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;$ compileProvider.directive（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3680a0f086330aee3870b424d3ec342433ba7964" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24controllerprovider#register.html&quot;&gt;$controllerProvider.register()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24controllerprovider#register.html&quot;&gt;$ controllerProvider.register（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="24b5bfecbf9bb5014e4c2c79d7ace634c3181572" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24filterprovider#register.html&quot;&gt;$filterProvider.register()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24filterprovider#register.html&quot;&gt;$ filterProvider.register（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d993d3401264eac8064f38c18942944ab3315a88" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../service/%24route#examples.html&quot;&gt;$route&lt;/a&gt; for an example of configuring and using &lt;code&gt;ngRoute&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; の構成と使用の例については、&lt;a href=&quot;../service/%24route#examples.html&quot;&gt;$ route&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="078f7235c75d6b9194ec298e0b95e74d1ffd82cc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt; for usage example</source>
          <target state="translated">使用例については、&lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="913150b7af43d4803c12014f2495d922c6f53ce1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;di#using-dependency-injection.html&quot;&gt;Using Dependency Injection&lt;/a&gt; to find out which dependencies can be injected in each method.</source>
          <target state="translated">各メソッドで注入できる依存関係を確認するには、依存&lt;a href=&quot;di#using-dependency-injection.html&quot;&gt;関係注入の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34a10d5c19333054e6759e18c71a55e84a1b5185" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;directive&quot;&gt;&lt;code&gt;$compileProvider.directive&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;directive&quot;&gt; &lt;code&gt;$compileProvider.directive&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="788b9222c3928afb09f4b7e9ad07a03aa9ce0a97" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;form.formcontroller#%24error.html&quot;&gt;$error&lt;/a&gt; for a list of built-in validation tokens.</source>
          <target state="translated">組み込みの検証トークンのリストについては、&lt;a href=&quot;form.formcontroller#%24error.html&quot;&gt;$ error&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d368454c2e9095f2ee9538a7b3902eef5c5e921e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;the design doc&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;は、設計ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6c9dadfccbd374155d0b83905fbf6db42471eb01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/angular/angular.js/issues/14018&quot;&gt;https://github.com/angular/angular.js/issues/14018&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/issues/14018&quot;&gt;https：//github.com/angular/angular.js/issues/14018&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="965fb29fc499cec553ef8ae9cda41d3773f4c576" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/angular/angular.js/pull/14221&quot;&gt;https://github.com/angular/angular.js/pull/14221&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/pull/14221&quot;&gt;https：//github.com/angular/angular.js/pull/14221&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="98bc08e70cdb8a19e8f8ebd22122e19a9f54a166" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/angular/angular.js/pull/14610#issuecomment-219401099&quot;&gt;https://github.com/angular/angular.js/pull/14610#issuecomment-219401099&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/pull/14610#issuecomment-219401099&quot;&gt;https：//github.com/angular/angular.js/pull/14610#issuecomment-219401099&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1c0e9938efdfba23465cbe6b8ab60e447cad7f63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;module#module-loading.html&quot;&gt;Modules&lt;/a&gt; for more details about &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; blocks and &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt; for more information about the different provider types.</source>
          <target state="translated">参照&lt;a href=&quot;module#module-loading.html&quot;&gt;モジュールの&lt;/a&gt;詳細については &lt;code&gt;run&lt;/code&gt; し、 &lt;code&gt;config&lt;/code&gt; ブロックと&lt;a href=&quot;providers&quot;&gt;プロバイダ&lt;/a&gt;別のプロバイダの種類の詳細については。</target>
        </trans-unit>
        <trans-unit id="3bc920667f9c77737168e5d37cbdaf815ee9f2e4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngclick&quot;&gt;ngClick&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ngclick&quot;&gt;ngClickを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="4c8ebb4aa13aea65763e9630efc734b8dacab942" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt;&lt;code&gt;$cookies&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用法については&lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt; &lt;code&gt;$cookies&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b00bd75d710a9877128c13b28d66fe558262c35" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngresource/provider/%24resourceprovider&quot;&gt;&lt;code&gt;$resourceProvider&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ngresource/service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用方法については、&lt;a href=&quot;ngresource/provider/%24resourceprovider&quot;&gt; &lt;code&gt;$resourceProvider&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;ngresource/service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9abd4a1fe19f2348c740c086f1fff0376f8e4ee1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngroute/service/%24route#examples.html&quot;&gt;$route&lt;/a&gt; for an example of configuring and using &lt;code&gt;ngRoute&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; の構成と使用の例については、&lt;a href=&quot;ngroute/service/%24route#examples.html&quot;&gt;$ route&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe5ebe5579c1ff1fb6425c15ca757267ab25d0f1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用法については&lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b77962b1216fdb1070cf25eb9261359639bd5c8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt;&lt;code&gt;$swipe&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用法については&lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt; &lt;code&gt;$swipe&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">参照:</target>
        </trans-unit>
        <trans-unit id="78c3f2286b3fda189f510bf130cb1cba700dbf32" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;$compileProvider.directive()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;$ compileProvider.directive（）&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="695bf02cec46c2f164a6c7f21e6ef9aba935626c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;angular.mock.module&quot;&gt;angular.mock.module&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;angular.mock.module&quot;&gt;angular.mock.module&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="cd3f9d3a288e4edfd08f32cdd1bff967082410f8" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;directive.templateNamespace&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;directive.templateNamespace&lt;/code&gt; プロパティも参照してください。</target>
        </trans-unit>
        <trans-unit id="7d9c5af2f6c5167826b7ec17bb16740907b4b38f" translate="yes" xml:space="preserve">
          <source>See also the section &lt;a href=&quot;ngmodeloptions#triggering-and-debouncing-model-updates.html&quot;&gt;Triggering and debouncing model updates&lt;/a&gt;.</source>
          <target state="translated">「&lt;a href=&quot;ngmodeloptions#triggering-and-debouncing-model-updates.html&quot;&gt;モデル更新のトリガーとデバウンス」&lt;/a&gt;セクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="0f37f7a74aab87f2d11b0d459293de0e44b0e806" translate="yes" xml:space="preserve">
          <source>See also the section on &lt;a href=&quot;../../../guide/component#unit-testing-component-controllers.html&quot;&gt;unit-testing component controllers&lt;/a&gt; in the guide.</source>
          <target state="translated">このガイドの&lt;a href=&quot;../../../guide/component#unit-testing-component-controllers.html&quot;&gt;コンポーネントテストのユニットテスト&lt;/a&gt;に関するセクションもご覧ください。</target>
        </trans-unit>
        <trans-unit id="12880cab413a482aa6873d2df0c5a842044fb490" translate="yes" xml:space="preserve">
          <source>See issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/2573&quot;&gt;#2573&lt;/a&gt;.</source>
          <target state="translated">問題&lt;a href=&quot;https://github.com/angular/angular.js/issues/2573&quot;&gt;＃2573を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c7426cfb869fb1c7d073ad5ed6bbc028b648f91" translate="yes" xml:space="preserve">
          <source>See issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/5695&quot;&gt;#5695&lt;/a&gt;.</source>
          <target state="translated">問題&lt;a href=&quot;https://github.com/angular/angular.js/issues/5695&quot;&gt;＃5695を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ea55e8498372eb1f024f52d96101f8fb71faaf3d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../ngtouch&quot;&gt;module&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../ngtouch&quot;&gt;モジュールの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9577d47cd8e376d70b5f7b81428401efa96d1c58" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="52635c86d5cf5e4f60fbff484d0717b60887bca1" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/nganimate&quot;&gt;API docs for &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/a&gt; for instructions on installing the module.</source>
          <target state="translated">モジュールのインストール手順については&lt;a href=&quot;../api/nganimate&quot;&gt;、 &lt;code&gt;ngAnimate&lt;/code&gt; &lt;/a&gt;のAPIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cbc2aedb974bc24d1a1d0fe5601fb4355ef0880c" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://docs.angularjs.org/tutorial/step_11#testing&quot;&gt;phonecat tutorial&lt;/a&gt; for an example.</source>
          <target state="translated">例については、&lt;a href=&quot;http://docs.angularjs.org/tutorial/step_11#testing&quot;&gt;phonecatチュートリアル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e96b1274bd6c727dce216a1b5acee68ec84c0ca0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt; project for an example.</source>
          <target state="translated">例については、&lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt;プロジェクトを参照してください。</target>
        </trans-unit>
        <trans-unit id="ecbca68833ed80713fcaa64526c17fb2e9a100f9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt; project for more examples, or look at the embedded examples in the AngularJS documentation (For example, &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt; has an end-to-end test in the example under the &lt;code&gt;protractor.js&lt;/code&gt; tag).</source>
          <target state="translated">その他の例については、&lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt;プロジェクトを参照するか、AngularJSのドキュメントに埋め込まれた例をご覧ください（たとえば、&lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ httpに&lt;/a&gt;は、 &lt;code&gt;protractor.js&lt;/code&gt; タグの下の例でエンドツーエンドのテストがあります）。</target>
        </trans-unit>
        <trans-unit id="a97d058011d5be26c50a6e74f8dd95fdb2c79e6f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://www.w3.org/TR/html5/forms.html#range-state-(type=range&quot;&gt;HTML Spec on input[type=range]&lt;/a&gt;) for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.w3.org/TR/html5/forms.html#range-state-(type=range&quot;&gt;input [type = range]&lt;/a&gt;のHTML仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="a0ac40f43c65be1e3b12dcd86bffd6396395ed77" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;ngoptions&quot;&gt;ngOptions documentation&lt;/a&gt; for more &lt;code&gt;ngOptions&lt;/code&gt; usage examples.</source>
          <target state="translated">&lt;code&gt;ngOptions&lt;/code&gt; の使用例については、&lt;a href=&quot;ngoptions&quot;&gt;ngOptionsのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="03e009db4d43734ae27201bff8730d827beb301f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;uppercase&quot;&gt;uppercase filter documentation&lt;/a&gt; for a functionally identical example.</source>
          <target state="translated">機能的に同一の例については、&lt;a href=&quot;uppercase&quot;&gt;大文字のフィルターのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc206a7f0c07635a54d0ca822bcfd4363363fb84" translate="yes" xml:space="preserve">
          <source>See the &lt;strong&gt;slide&lt;/strong&gt; CSS class? Let's use that class to define an animation that we'll structure in our module code by using &lt;code&gt;module.animation&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;スライドの&lt;/strong&gt; CSSクラスをご覧ください。そのクラスを使用して、 &lt;code&gt;module.animation&lt;/code&gt; を使用してモジュールコードで構造化するアニメーションを定義します。</target>
        </trans-unit>
        <trans-unit id="762e1d695b4823d06070273412a16dd54a01941e" translate="yes" xml:space="preserve">
          <source>See the example below for defining CSS animations with ngRepeat.</source>
          <target state="translated">ngRepeatを使ってCSSアニメーションを定義する方法は以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="38e7a99ee9904d4a3ca99f81d4ea33b739210ca9" translate="yes" xml:space="preserve">
          <source>See the individual methods for more information and examples.</source>
          <target state="translated">詳細や事例については、個別の方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b3d99daed982770005e723c4b9d03993ce65aa3" translate="yes" xml:space="preserve">
          <source>Seed App project template</source>
          <target state="translated">シードアプリプロジェクトテンプレート</target>
        </trans-unit>
        <trans-unit id="b5e9867f9c9fb18570b4889cb5ba94603532720d" translate="yes" xml:space="preserve">
          <source>Seed application with directory layout and test scripts as a starting point.</source>
          <target state="translated">ディレクトリレイアウトとテストスクリプトを出発点としたシードアプリケーション。</target>
        </trans-unit>
        <trans-unit id="c0b0079380b481f580b80b102f99f264e29300e9" translate="yes" xml:space="preserve">
          <source>Selection Keywords</source>
          <target state="translated">選択キーワード</target>
        </trans-unit>
        <trans-unit id="3cc82bb8092a6e32b7d5991c4002b66633c4d1a1" translate="yes" xml:space="preserve">
          <source>Selection keywords are simple words like &quot;male&quot; and &quot;female&quot;. The keyword, &quot;other&quot;, and its corresponding message are required while others are optional. It is used when the AngularJS expression does not match (case-insensitively) any of the other keywords specified.</source>
          <target state="translated">選択キーワードは「男性」「女性」などの簡単な言葉です。キーワード &quot;other &quot;とそれに対応するメッセージは必須ですが、その他はオプションです。これは、AngularJSの式が指定された他のキーワードと(大文字小文字を区別せずに)一致しない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="453fe4cf0f44957ceadddad3ad82b8d24441bc5c" translate="yes" xml:space="preserve">
          <source>Selects a subset of items from &lt;code&gt;array&lt;/code&gt; and returns it as a new array.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; から項目のサブセットを選択し、それを新しい配列として返します。</target>
        </trans-unit>
        <trans-unit id="70fa919b37728a67741bcb7de4d4f2cbf49a9644" translate="yes" xml:space="preserve">
          <source>Self for chaining.</source>
          <target state="translated">鎖を繋ぐためのセルフ。</target>
        </trans-unit>
        <trans-unit id="0d96db08ad1c08844aadb4911cf17b34a5194067" translate="yes" xml:space="preserve">
          <source>Sending links among different browsers</source>
          <target state="translated">異なるブラウザ間でのリンクの送信</target>
        </trans-unit>
        <trans-unit id="e61c30e14ad5323669cf2e66c324a47f65e65e5b" translate="yes" xml:space="preserve">
          <source>Separation of Concerns</source>
          <target state="translated">懸念事項の分離</target>
        </trans-unit>
        <trans-unit id="19d21afe1a379e6586329fb405c968df49d2f7f3" translate="yes" xml:space="preserve">
          <source>Serializes and sets a value for given cookie key</source>
          <target state="translated">指定されたクッキーキーの値をシリアライズして設定します。</target>
        </trans-unit>
        <trans-unit id="26190591db24a6a79c2d1ffe033434cf28e66535" translate="yes" xml:space="preserve">
          <source>Serializes input into a JSON-formatted string. Properties with leading $$ characters will be stripped since AngularJS uses this notation internally.</source>
          <target state="translated">入力をJSON形式の文字列にシリアライズします。AngularJSは内部的にこの表記法を使用しているため、先頭の$$文字を含むプロパティは削除されます。</target>
        </trans-unit>
        <trans-unit id="ca7646045bd114335a4473cb2df4fbc234ba73cb" translate="yes" xml:space="preserve">
          <source>Server side</source>
          <target state="translated">サーバー側</target>
        </trans-unit>
        <trans-unit id="657dec6d9dd77fb2ceb1d1b38c7ffe17f33b168d" translate="yes" xml:space="preserve">
          <source>Server-Specific</source>
          <target state="translated">Server-Specific</target>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="translated">Service</target>
        </trans-unit>
        <trans-unit id="bf72267dd99d909ed5df067cc726ef7155c6d854" translate="yes" xml:space="preserve">
          <source>Service Recipe</source>
          <target state="translated">サービスレシピ</target>
        </trans-unit>
        <trans-unit id="8941e9f98c519e0d286557e21cfb4e0c0de17a20" translate="yes" xml:space="preserve">
          <source>Service Type</source>
          <target state="translated">サービスの種類</target>
        </trans-unit>
        <trans-unit id="5a5f6c0274940063e399d3946bd3ae49d442c0ff" translate="yes" xml:space="preserve">
          <source>Service components in auto</source>
          <target state="translated">自動車のサービス部品</target>
        </trans-unit>
        <trans-unit id="fcebb0a024198276992ada4dbb480721bb3e0f64" translate="yes" xml:space="preserve">
          <source>Service components in ng</source>
          <target state="translated">サービスの内容はNG</target>
        </trans-unit>
        <trans-unit id="09c48cf4ffd74297617899c30e1bba806a4773cf" translate="yes" xml:space="preserve">
          <source>Service components in ngAnimate</source>
          <target state="translated">ngAnimateのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="941158836f6e9fe94ae316ee9c323959baae61ad" translate="yes" xml:space="preserve">
          <source>Service components in ngAria</source>
          <target state="translated">ngAriaのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="32c26b48edde3b80c434980acb12e669bd2b93ab" translate="yes" xml:space="preserve">
          <source>Service components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="a3fca5601631e00648b89298c06d29e4b69f5fb2" translate="yes" xml:space="preserve">
          <source>Service components in ngCookies</source>
          <target state="translated">ngCookiesのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="2a9e9867bcb9b11bd3ee9f53a4a820cbbb948291" translate="yes" xml:space="preserve">
          <source>Service components in ngMock</source>
          <target state="translated">ngMock のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="2b3406d3d296f3b15db73360e223b513501ebc46" translate="yes" xml:space="preserve">
          <source>Service components in ngMockE2E</source>
          <target state="translated">ngMockE2Eのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="665c83ec475bf1c3dfa6e446e3a1706d040945a7" translate="yes" xml:space="preserve">
          <source>Service components in ngResource</source>
          <target state="translated">ngResourceのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="5a2a586611d056bdd1386c772b665fa21edbdbd9" translate="yes" xml:space="preserve">
          <source>Service components in ngRoute</source>
          <target state="translated">ngRoute のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="a2478a17991c8ce33653609be29f656e3efdd561" translate="yes" xml:space="preserve">
          <source>Service components in ngSanitize</source>
          <target state="translated">ngSanitize のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="5084bf79af04c50fa80607d773f3bdac80e62479" translate="yes" xml:space="preserve">
          <source>Service components in ngTouch</source>
          <target state="translated">ngTouch のサービス・コンポーネント</target>
        </trans-unit>
        <trans-unit id="d54887f3349556c2f12ee7ba270d6bd56b4b3fcb" translate="yes" xml:space="preserve">
          <source>Service instance object.</source>
          <target state="translated">サービスのインスタンスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b41d874b42ed9e2cbb2ee48532479463e46f60d6" translate="yes" xml:space="preserve">
          <source>Service provider names start with the name of the service they provide followed by &lt;code&gt;Provider&lt;/code&gt;. For example, the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service has a provider called &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$logProvider&lt;/a&gt;.</source>
          <target state="translated">サービスプロバイダー名は、提供するサービスの名前で始まり、その後に &lt;code&gt;Provider&lt;/code&gt; が続きます。たとえば、&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt;サービスには&lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$ logProvider&lt;/a&gt;というプロバイダーがあります。</target>
        </trans-unit>
        <trans-unit id="952222f0e3de1e4052da5b327ee9d39b9d455a7c" translate="yes" xml:space="preserve">
          <source>Service provider objects can have additional methods which allow configuration of the provider and its service. Importantly, you can configure what kind of service is created by the &lt;code&gt;$get&lt;/code&gt; method, or how that service will act. For example, the &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$logProvider&lt;/a&gt; has a method &lt;a href=&quot;../../ng/provider/%24logprovider#debugEnabled.html&quot;&gt;debugEnabled&lt;/a&gt; which lets you specify whether the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service will log debug messages to the console or not.</source>
          <target state="translated">サービスプロバイダーオブジェクトには、プロバイダーとそのサービスの構成を可能にする追加のメソッドを含めることができます。重要なのは、 &lt;code&gt;$get&lt;/code&gt; メソッドによって作成されるサービスの種類、またはそのサービスの動作を構成できることです。例えば、&lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$ logProviderは&lt;/a&gt;方法がいる&lt;a href=&quot;../../ng/provider/%24logprovider#debugEnabled.html&quot;&gt;debugEnabled&lt;/a&gt;あなたがするかどうかを指定することができますどの&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ログ&lt;/a&gt;サービスは、コンソールにデバッグメッセージをログに記録したりしません。</target>
        </trans-unit>
        <trans-unit id="0d2b4d42fe2b710998d810b0e4e1cf1b4de34480" translate="yes" xml:space="preserve">
          <source>Service vs Factory</source>
          <target state="translated">サービスと工場</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="4b6d0d4999e71cef617ce73b369d4cb1158a482a" translate="yes" xml:space="preserve">
          <source>Services are objects whose API is defined by the developer writing the service.</source>
          <target state="translated">サービスとは、サービスを書く開発者によってAPIが定義されているオブジェクトのことです。</target>
        </trans-unit>
        <trans-unit id="525d27448e42507fcffe428f6bbdacdf06c2b08a" translate="yes" xml:space="preserve">
          <source>Services are registered to modules via the &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;Module API&lt;/a&gt;. Typically you use the &lt;a href=&quot;../api/ng/type/angular.module#factory.html&quot;&gt;Module factory&lt;/a&gt; API to register a service:</source>
          <target state="translated">サービスは、&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールAPI&lt;/a&gt;を介してモジュールに登録されます。通常、&lt;a href=&quot;../api/ng/type/angular.module#factory.html&quot;&gt;モジュールファクトリ&lt;/a&gt; APIを使用してサービスを登録します。</target>
        </trans-unit>
        <trans-unit id="4833132fc4c899fee8d34eaa64ff5a98c4f288cd" translate="yes" xml:space="preserve">
          <source>Services can have their own dependencies. Just like declaring dependencies in a controller, you declare dependencies by specifying them in the service's factory function signature.</source>
          <target state="translated">サービスは独自の依存関係を持つことができます。コントローラで依存関係を宣言するのと同じように、 サービスのファクトリ関数のシグネチャで依存関係を指定して宣言します。</target>
        </trans-unit>
        <trans-unit id="a789f25acb702b4e658b9657b679e824eb2b9d67" translate="yes" xml:space="preserve">
          <source>Set DOM element attribute value.</source>
          <target state="translated">DOM 要素の属性値を設定します。</target>
        </trans-unit>
        <trans-unit id="94b8b9a9904cbc044a493b9000523b46087495ae" translate="yes" xml:space="preserve">
          <source>Set a custom error when the unknown option is selected</source>
          <target state="translated">不明なオプションが選択された場合のカスタムエラーを設定する</target>
        </trans-unit>
        <trans-unit id="f48ee2d0db513f849bc3a687f193acaff12bf0a8" translate="yes" xml:space="preserve">
          <source>Set the &quot;required&quot; error when the unknown option is selected.</source>
          <target state="translated">不明なオプションを選択した場合の「必須」エラーを設定します。</target>
        </trans-unit>
        <trans-unit id="b8b76efca5914891c846b9591b11c415cdec0179" translate="yes" xml:space="preserve">
          <source>Set up the initial state of the &lt;code&gt;$scope&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;$scope&lt;/code&gt; オブジェクトの初期状態を設定します。</target>
        </trans-unit>
        <trans-unit id="32a934c3e8358dca34c040197808a0f980d47635" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;maxlength&lt;/code&gt; validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</source>
          <target state="translated">値がmaxlengthよりも長い場合、 &lt;code&gt;maxlength&lt;/code&gt; 検証エラーキーを設定します。属性を負または非数値に設定すると、任意の長さのビュー値が許可されます。</target>
        </trans-unit>
        <trans-unit id="547bb7088e70130cb7f5489e9adfa8a661612808" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;minlength&lt;/code&gt; validation error key if the value is shorter than minlength.</source>
          <target state="translated">値がminlengthより短い場合、 &lt;code&gt;minlength&lt;/code&gt; 検証エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="10560bdef7511146ccdde4c1d4eb0b3d418a69fc" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;pattern&lt;/code&gt; validation error key if the ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$viewValue&lt;/a&gt; does not match a RegExp found by evaluating the AngularJS expression given in the attribute value. If the expression evaluates to a RegExp object, then this is used directly. If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$ viewValue&lt;/a&gt;が、属性値で指定されたAngularJS式を評価して見つかったRegExpと一致しない場合、 &lt;code&gt;pattern&lt;/code&gt; 検証エラーキーを設定します。式がRegExpオブジェクトに評価される場合、これは直接使用されます。式が文字列に評価される場合は、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; 文字でラップした後、正規表現に変換されます。たとえば、 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; は &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="e3e8752f2ba54f28880c07ca6160f51e6dcbce12" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;pattern&lt;/code&gt; validation error key if the ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$viewValue&lt;/a&gt; value does not match a RegExp found by evaluating the AngularJS expression given in the attribute value. If the expression evaluates to a RegExp object, then this is used directly. If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$ viewValue&lt;/a&gt;値が、属性値で指定されたAngularJS式を評価して見つかったRegExpと一致しない場合、 &lt;code&gt;pattern&lt;/code&gt; 検証エラーキーを設定します。式がRegExpオブジェクトに評価される場合、これは直接使用されます。式が文字列に評価される場合は、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; 文字でラップした後、正規表現に変換されます。たとえば、 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; は &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="fa71f45381b24c79c20b2240ce099d6f0d446c1e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;required&lt;/code&gt; attribute if set to true</source>
          <target state="translated">セットが &lt;code&gt;required&lt;/code&gt; trueに設定する属性を</target>
        </trans-unit>
        <trans-unit id="6b636dc2386c068323a89c825f926210e65c3fb7" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;required&lt;/code&gt; validation error key if the value is not entered.</source>
          <target state="translated">値が入力されていない場合に &lt;code&gt;required&lt;/code&gt; 検証エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="7ebf47298a75f80321a25301b9796faaacaf5e69" translate="yes" xml:space="preserve">
          <source>Sets a value for given cookie key</source>
          <target state="translated">指定されたクッキーキーの値を設定します。</target>
        </trans-unit>
        <trans-unit id="3eb34af4b4c9bdef7b75e97d99a9be4d8f20504b" translate="yes" xml:space="preserve">
          <source>Sets and/or returns the CSS class regular expression that is checked when performing an animation. Upon bootstrap the classNameFilter value is not set at all and will therefore enable $animate to attempt to perform an animation on any element that is triggered. When setting the &lt;code&gt;classNameFilter&lt;/code&gt; value, animations will only be performed on elements that successfully match the filter expression. This in turn can boost performance for low-powered devices as well as applications containing a lot of structural operations.</source>
          <target state="translated">アニメーションの実行時にチェックされるCSSクラスの正規表現を設定または返します。ブートストラップ時にclassNameFilter値はまったく設定されないため、$ animateはトリガーされた任意の要素でアニメーションを実行できるようになります。 &lt;code&gt;classNameFilter&lt;/code&gt; 値を設定すると、フィルター式に正常に一致する要素に対してのみアニメーションが実行されます。これにより、低電力のデバイスや、多くの構造操作を含むアプリケーションのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="a3718a94f7b96f6b2b46917cfc688eefd896d791" translate="yes" xml:space="preserve">
          <source>Sets and/or returns the custom filter function that is used to &quot;filter&quot; animations, i.e. determine if an animation is allowed or not. When no filter is specified (the default), no animation will be blocked. Setting the &lt;code&gt;customFilter&lt;/code&gt; value will only allow animations for which the filter function's return value is truthy.</source>
          <target state="translated">アニメーションを「フィルタリング」するために使用されるカスタムフィルター関数を設定または返します。つまり、アニメーションが許可されるかどうかを決定します。フィルターが指定されていない場合（デフォルト）、アニメーションはブロックされません。 &lt;code&gt;customFilter&lt;/code&gt; 値を設定すると、フィルター関数の戻り値が真であるアニメーションのみが許可されます。</target>
        </trans-unit>
        <trans-unit id="39c997ee50a558fa22571f260f262fe465f1bc3e" translate="yes" xml:space="preserve">
          <source>Sets route definition that will be used on route change when no other route definition is matched.</source>
          <target state="translated">他の経路定義と一致しない場合に、経路変更時に使用する経路定義を設定します。</target>
        </trans-unit>
        <trans-unit id="fe509b1e70a37ac612ec68d5f9d1967360db9085" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;checked&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngChecked&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngChecked&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;checked&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="1920bb63442b2b014323d1fd8ee3eaca45f052b2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation constraint to the Date / ISO date string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">設定 &lt;code&gt;max&lt;/code&gt; 日付/ ISO日付文字列に検証制約 &lt;code&gt;ngMax&lt;/code&gt; の表現評価するには。 &lt;code&gt;max&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe04e4e1e4f798ae71b9f0d607c543e17ae65d2f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation constraint to the Date / ISO time string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">設定 &lt;code&gt;max&lt;/code&gt; 日付/ ISO時間文字列に検証制約 &lt;code&gt;ngMax&lt;/code&gt; の表現評価するには。 &lt;code&gt;max&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="33b3b16a800154c129abbf9a22996d3fc6393f12" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation constraint to the Date / ISO week string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">設定 &lt;code&gt;max&lt;/code&gt; 日付/ ISO週文字列に検証制約 &lt;code&gt;ngMax&lt;/code&gt; の表現評価するには。 &lt;code&gt;max&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6ec3cbf0ace78fd47d3695b13119051dc7e3d246" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">入力した値が &lt;code&gt;max&lt;/code&gt; より大きい場合、 &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定します。補間することができます。</target>
        </trans-unit>
        <trans-unit id="cfb5d601886fbe150a5012e311e1260560637c5a" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力した値が &lt;code&gt;max&lt;/code&gt; より大きい場合、 &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO日付文字列（yyyy-MM-dd）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;max=&quot;{{maxDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;max&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ef393f8471ebb5eda9f8a9c29cddcf2bf65d1f33" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力した値が &lt;code&gt;max&lt;/code&gt; より大きい場合、 &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO日時形式（yyyy-MM-ddTHH：mm：ss）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;max=&quot;{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;max&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="e67c2ec5b4e363d48e8544ff1c9386c2043be291" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力した値が &lt;code&gt;max&lt;/code&gt; より大きい場合、 &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO月形式（yyyy-MM）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;max=&quot;{{maxMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;max&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="59666806b357ecc78df92fb892f590406240f7de" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力した値が &lt;code&gt;max&lt;/code&gt; より大きい場合、 &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO時間形式（HH：mm：ss）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;max=&quot;{{maxTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;max&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="0bc1e49d650b2ab0a9db28fea0ec655222c81091" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力した値が &lt;code&gt;max&lt;/code&gt; より大きい場合、 &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO週形式（yyyy-W ##）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;max=&quot;{{maxWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;max&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="825b0ae9a349268cac080f98fb1a3959a28ec924" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key to the Date / ISO datetime string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">セットの &lt;code&gt;max&lt;/code&gt; 日付/ ISO日時文字列に検証エラーキー &lt;code&gt;ngMax&lt;/code&gt; の表現評価さへ。 &lt;code&gt;max&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f9a14056eac8a5d78ca16013c1477ef4d811e1b3" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation to ensure that the value entered is less than &lt;code&gt;max&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">入力された値が &lt;code&gt;max&lt;/code&gt; 未満であることを確認するために、 &lt;code&gt;max&lt;/code&gt; 検証を設定します。補間することができます。</target>
        </trans-unit>
        <trans-unit id="fff33e1997ea58cd25cb1c888022cbebc61b1312" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation constraint to the Date / ISO date string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">セット &lt;code&gt;min&lt;/code&gt; 日付/ ISO日付文字列に検証制約 &lt;code&gt;ngMin&lt;/code&gt; の表現評価さへ。 &lt;code&gt;min&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="be2605cf7cddb1791067d7d5283632d4959fb52f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation constraint to the Date / ISO time string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">セット &lt;code&gt;min&lt;/code&gt; 日付/ ISO時間文字列に検証制約 &lt;code&gt;ngMin&lt;/code&gt; の表現評価さへ。 &lt;code&gt;min&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f98850ed1615fc1d96ccc78512aa8c21ef004f5a" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation constraint to the Date / ISO week string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">セット &lt;code&gt;min&lt;/code&gt; 日付/ ISO週文字列に検証制約 &lt;code&gt;ngMin&lt;/code&gt; の表現評価さへ。 &lt;code&gt;min&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="edc23cbb72d610b87d89fb77d0293185c9e4d720" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定します。補間することができます。</target>
        </trans-unit>
        <trans-unit id="79ee42393e9f93ded75452638395e8e562b64e77" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO日付文字列（yyyy-MM-dd）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;min=&quot;{{minDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;min&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="f2795c9e822aa6cae9c2e11215a71e7b2b33811f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO日時形式（yyyy-MM-ddTHH：mm：ss）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;min=&quot;{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;min&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="9ccea6073c011efbba3158bd6322e1a8be432ab5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO月形式（yyyy-MM）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;min=&quot;{{minMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;min&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="425660c063af8309032bae04c418f809c38041c5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO時間形式（HH：mm：ss）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;min=&quot;{{minTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;min&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="979d4c0a1f5b3540d3d99dc920c9a6548f83444f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定します。これは、有効なISO週形式（yyyy-W ##）である必要があります。この属性内で補間を使用することもできます（例： &lt;code&gt;min=&quot;{{minWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt; ）。 &lt;code&gt;min&lt;/code&gt; は、ネイティブHTML5制約検証も追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="8642450476c0ed4a5dd1c8dad2d1f52f8ae6ca96" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key to the Date / ISO datetime string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">セット &lt;code&gt;min&lt;/code&gt; 日付/ ISO日時文字列に検証エラーキーを &lt;code&gt;ngMin&lt;/code&gt; の表現評価さへ。 &lt;code&gt;min&lt;/code&gt; 属性は設定されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f8bad570e70492739e003c3000dc9ca83ea22644" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation to ensure that the value entered is greater than &lt;code&gt;min&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">入力された値が &lt;code&gt;min&lt;/code&gt; より大きいことを確認するために、 &lt;code&gt;min&lt;/code&gt; 検証を設定します。補間することができます。</target>
        </trans-unit>
        <trans-unit id="5c99570524bdc8216da2b5396247486451cab54f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;open&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngOpen&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngOpen&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;open&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="6f565b5b574f15f6ae5ad19f06794dc2c944e8f2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;readonly&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngReadonly&lt;/code&gt; is truthy. Note that &lt;code&gt;readonly&lt;/code&gt; applies only to &lt;code&gt;input&lt;/code&gt; elements with specific types. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly&quot;&gt;See the input docs on MDN&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;ngReadonly&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;readonly&lt;/code&gt; 属性を設定します。 &lt;code&gt;readonly&lt;/code&gt; は特定のタイプの &lt;code&gt;input&lt;/code&gt; 要素にのみ適用されることに注意してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly&quot;&gt;詳細については、MDNの入力ドキュメントを参照して&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="37e13f7cb285022e632b2143b226eca3914cb348" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;selected&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngSelected&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngSelected&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;selected&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="fd0236e93dca6652c60911632c17041088c4ddfb" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;step&lt;/code&gt; validation error key if the value entered does not fit the &lt;code&gt;step&lt;/code&gt; constraint. Can be interpolated.</source>
          <target state="translated">入力した値が &lt;code&gt;step&lt;/code&gt; 制約に適合しない場合に、 &lt;code&gt;step&lt;/code&gt; 検証エラーキーを設定します。補間することができます。</target>
        </trans-unit>
        <trans-unit id="c87850acb5778acf50b5edeccc7acb99a1555559" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;step&lt;/code&gt; validation to ensure that the value entered matches the &lt;code&gt;step&lt;/code&gt; Can be interpolated.</source>
          <target state="translated">入力された値が &lt;code&gt;step&lt;/code&gt; 補間可能と一致することを確認するために &lt;code&gt;step&lt;/code&gt; 検証を設定します。</target>
        </trans-unit>
        <trans-unit id="9f4cb7bf52331e65ac69941f041ac363a81a3b12" translate="yes" xml:space="preserve">
          <source>Sets the control to its dirty state.</source>
          <target state="translated">コントロールをダーティ状態に設定します。</target>
        </trans-unit>
        <trans-unit id="e3bf3b958a072b69e62408d924915fb8a179eaff" translate="yes" xml:space="preserve">
          <source>Sets the control to its pristine state.</source>
          <target state="translated">コントロールを原始状態に設定します。</target>
        </trans-unit>
        <trans-unit id="e4a131591ff87bb79feac231f451d7031148843a" translate="yes" xml:space="preserve">
          <source>Sets the control to its touched state.</source>
          <target state="translated">コントロールをタッチ状態に設定します。</target>
        </trans-unit>
        <trans-unit id="a5b267b9a5cc9a25b454ab1eae10051e806b3f01" translate="yes" xml:space="preserve">
          <source>Sets the control to its untouched state.</source>
          <target state="translated">コントロールを手付かずの状態にします。</target>
        </trans-unit>
        <trans-unit id="4447a6517c090edca6f974fba3922639b9e1e12e" translate="yes" xml:space="preserve">
          <source>Sets the form to a dirty state.</source>
          <target state="translated">フォームをダーティな状態に設定します。</target>
        </trans-unit>
        <trans-unit id="9350ec632ab5fec79f1f724eae353ac0165bb757" translate="yes" xml:space="preserve">
          <source>Sets the form to its &lt;code&gt;$submitted&lt;/code&gt; state. This will also set &lt;code&gt;$submitted&lt;/code&gt; on all child and parent forms of the form.</source>
          <target state="translated">フォームを &lt;code&gt;$submitted&lt;/code&gt; 状態に設定します。これにより、フォームのすべての子フォームと親フォームにも &lt;code&gt;$submitted&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="7156388b7b1c6dc2e561c432025ee7840bcba522" translate="yes" xml:space="preserve">
          <source>Sets the form to its pristine state.</source>
          <target state="translated">フォームを原始状態に設定します。</target>
        </trans-unit>
        <trans-unit id="1bbab8786ad564dbebdb85217e4d437d9e57c99f" translate="yes" xml:space="preserve">
          <source>Sets the form to its untouched state.</source>
          <target state="translated">フォームを未処理の状態に設定します。</target>
        </trans-unit>
        <trans-unit id="925ac2c1e142b8f6831a46079d6b7d2faf4683d7" translate="yes" xml:space="preserve">
          <source>Sets the logging mode.</source>
          <target state="translated">ロギングモードを設定します。</target>
        </trans-unit>
        <trans-unit id="cc873a3ed61980bb62b3d8cb1fad2b7dbd3bbd9c" translate="yes" xml:space="preserve">
          <source>Sets the number of &lt;code&gt;$digest&lt;/code&gt; iterations the scope should attempt to execute before giving up and assuming that the model is unstable.</source>
          <target state="translated">モデルが不安定であるとあきらめて想定する前に、スコープが実行を試みる &lt;code&gt;$digest&lt;/code&gt; 反復の数を設定します。</target>
        </trans-unit>
        <trans-unit id="39ffbd76050afade95c03c6f563e7fe6698cdffe" translate="yes" xml:space="preserve">
          <source>Sets the number of times &lt;code&gt;$onChanges&lt;/code&gt; hooks can trigger new changes before giving up and assuming that the model is unstable.</source>
          <target state="translated">&lt;code&gt;$onChanges&lt;/code&gt; フックが新しい変更をトリガーできる回数を設定します。この回数を過ぎると、モデルが不安定であると見なされます。</target>
        </trans-unit>
        <trans-unit id="a0927437f1fcf14017c5e36fbcfc48793c5fd4cd" translate="yes" xml:space="preserve">
          <source>Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...) has fired on the given element or among any of its children. Once the listener is fired, the provided callback is fired with the following params:</source>
          <target state="translated">与えられた要素またはその子要素の中のいずれかでアニメーションイベント (enter,leave,move,etc...)が発生したときに発生するイベントリスナーを設定します。リスナーが実行されると、以下のパラメータを指定してコールバックが実行されます。</target>
        </trans-unit>
        <trans-unit id="4e7405ffe38d069afb052ce1338407e4fee09dd1" translate="yes" xml:space="preserve">
          <source>Sets/Gets the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; of trusted resource URLs.</source>
          <target state="translated">信頼できるリソースURLの &lt;code&gt;bannedResourceUrlList&lt;/code&gt; を設定/取得します。</target>
        </trans-unit>
        <trans-unit id="03431d02a61f42ebfbfef0fc744f1f69c2aa6fa2" translate="yes" xml:space="preserve">
          <source>Sets/Gets the blacklist of trusted resource URLs.</source>
          <target state="translated">信頼できるリソース URL のブラックリストを設定/取得します。</target>
        </trans-unit>
        <trans-unit id="f55d33d49e4a23b5a5ec6ce99c201ae8c2d83ebd" translate="yes" xml:space="preserve">
          <source>Sets/Gets the list trusted of resource URLs.</source>
          <target state="translated">リソースURLの信頼できるリストを設定/取得します。</target>
        </trans-unit>
        <trans-unit id="7d47f57707cf336befa5e43696e950bc75ae7ac4" translate="yes" xml:space="preserve">
          <source>Sets/Gets the whitelist of trusted resource URLs.</source>
          <target state="translated">信頼できるリソース URL のホワイトリストを設定/取得します。</target>
        </trans-unit>
        <trans-unit id="a4645a9bbcf8b0818a04f3d1e82f24a50d0fbb16" translate="yes" xml:space="preserve">
          <source>Setters and character encoding</source>
          <target state="translated">セッターと文字エンコーディング</target>
        </trans-unit>
        <trans-unit id="931d21b44fadaeb291fbdf83ce432278265cb3a4" translate="yes" xml:space="preserve">
          <source>Setting HTTP Headers</source>
          <target state="translated">HTTPヘッダの設定</target>
        </trans-unit>
        <trans-unit id="f77d1dec6bba3973c39fb19b56136fe4ae5c3468" translate="yes" xml:space="preserve">
          <source>Setting a form back to a pristine state is often useful when we want to 'reuse' a form after saving or resetting it.</source>
          <target state="translated">フォームを原始状態に戻す設定は、保存やリセット後にフォームを「再利用」したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8c6c2a7659542590f7cf49657b164806adad134c" translate="yes" xml:space="preserve">
          <source>Setting a form controls back to their untouched state is often useful when setting the form back to its pristine state.</source>
          <target state="translated">フォームコントロールを手つかずの状態に戻すことは、フォームを原始的な状態に戻すときに便利です。</target>
        </trans-unit>
        <trans-unit id="942eaaad186f1e9ad5700be9b0380f06a6b4a71b" translate="yes" xml:space="preserve">
          <source>Setting related css classes on the element (&lt;code&gt;ng-valid&lt;/code&gt;, &lt;code&gt;ng-invalid&lt;/code&gt;, &lt;code&gt;ng-dirty&lt;/code&gt;, &lt;code&gt;ng-pristine&lt;/code&gt;, &lt;code&gt;ng-touched&lt;/code&gt;, &lt;code&gt;ng-untouched&lt;/code&gt;, &lt;code&gt;ng-empty&lt;/code&gt;, &lt;code&gt;ng-not-empty&lt;/code&gt;) including animations.</source>
          <target state="translated">アニメーションを含む要素（ &lt;code&gt;ng-valid&lt;/code&gt; 、 &lt;code&gt;ng-invalid&lt;/code&gt; 、 &lt;code&gt;ng-dirty&lt;/code&gt; 、 &lt;code&gt;ng-pristine&lt;/code&gt; 、 &lt;code&gt;ng-touched&lt;/code&gt; 、 &lt;code&gt;ng-untouched&lt;/code&gt; 、 &lt;code&gt;ng-empty&lt;/code&gt; 、 &lt;code&gt;ng-not-empty&lt;/code&gt; ）に関連するCSSクラスを設定します。</target>
        </trans-unit>
        <trans-unit id="277f5f922447d11f1148440e274ee0c10496fee1" translate="yes" xml:space="preserve">
          <source>Setting up the initial state of a $scope object</source>
          <target state="translated">スコープオブジェクトの初期状態を設定する</target>
        </trans-unit>
        <trans-unit id="125fbd7f10dab7394cfc5048a85cdfbd854dbe5e" translate="yes" xml:space="preserve">
          <source>Shallow watches the properties of an object and fires whenever any of the properties change (for arrays, this implies watching the array items; for object maps, this implies watching the properties). If a change is detected, the &lt;code&gt;listener&lt;/code&gt; callback is fired.</source>
          <target state="translated">Shallowはオブジェクトのプロパティを監視し、プロパティが変更されると起動します（配列の場合、これは配列項目を監視することを意味します。オブジェクトマップの場合、これはプロパティを監視することを意味します）。変更が検出されると、 &lt;code&gt;listener&lt;/code&gt; コールバックが発生します。</target>
        </trans-unit>
        <trans-unit id="380e38945f7671e000cf05944b1ad2d0e741efa4" translate="yes" xml:space="preserve">
          <source>Share code or state across controllers &amp;mdash; Use &lt;a href=&quot;services&quot;&gt;AngularJS services&lt;/a&gt; instead.</source>
          <target state="translated">コントローラー間でコードまたは状態を共有する&amp;mdash; 代わりに&lt;a href=&quot;services&quot;&gt;AngularJSサービス&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="eeb5aa3705435324f9a5bad77066c4f0603ff2ac" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;DELETE&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;DELETE&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="632f1e0986a1ac579bc340ca9bb74040c8b7cb13" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;GET&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="37dbba8a58190de1ad30febf6bae4610d1046015" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;HEAD&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="f6519910ce1599fa85bedb60905d3494f744c8df" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;JSONP&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;JSONP&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="6eb1e4826d823c6b71cc1239ada1b4b018a1769d" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;PATCH&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;PATCH&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="4405ba4487cb7f0695953efdc04c5e771da5626e" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;POST&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="640cf1d6b1646eecd287defcded6b181e69acbab" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;PUT&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;PUT&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="e653854343ba72f7dfa236141ce0b3a4406ea1ab" translate="yes" xml:space="preserve">
          <source>Shortcut methods</source>
          <target state="translated">ショートカットの方法</target>
        </trans-unit>
        <trans-unit id="31798d7cfef4747fc3cb36381de4537963cb762a" translate="yes" xml:space="preserve">
          <source>Shortcut methods are also available. All shortcut methods require passing in the URL, and request data must be passed in for POST/PUT requests. An optional config can be passed as the last argument.</source>
          <target state="translated">ショートカットメソッドも利用可能です。すべてのショートカットメソッドは URL を渡す必要があり、POST/PUT リクエストの場合はリクエストデータを渡す必要があります。オプションの config を最後の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="991d7adb474623baf0e224580d1166d72616994d" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3f5066c6a161e53270e1d456af3c9dc058c98f5" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c12375f2444862456736917fe52c5dda61f0c40" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5a41650ca4ad0851b345f9ce1b1fa4dc13e0f829" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b33f0daae6cb6c1a84f39046e25569499b069f8a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46de0e5ba4dd5238608c0e20228a228dea8e97c8" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="acd8a216e26619bc4475238fcd266c75b856e72b" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsHtml(expression string)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsHtml(expression string)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="078d1ee5a55f2b5471440925757193e9a8a1180a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7443f5740c3808a5956caa9c740d58d830b2749d" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56b3a286669e172b604de34085d3681bf69c9d9a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c80ffad619c88a6d2fcc06d6b44928164a655a51" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f21f7bf64a73cd038d1ac38d2cbe3c19e0570c14" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8adcfcd8ce136be4af5a2fb15479ed63d6a06d0" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1c138911b8cec498130d3f5b57c5f37667fb15b8" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1120b4bcf5907d682846212855e4a465c5eef826" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43517b93f15b2e55b043359578fa0518911485bb" translate="yes" xml:space="preserve">
          <source>Show / Hide Table of Contents</source>
          <target state="translated">目次の表示/非表示</target>
        </trans-unit>
        <trans-unit id="7ff68a0ea37d6679788b11ca9d5b4cdd7f8e0e60" translate="yes" xml:space="preserve">
          <source>Show me an example using SCE.</source>
          <target state="translated">SCEを使った例を見せてくれ</target>
        </trans-unit>
        <trans-unit id="7c0f94dc3b6e8fd9618674ea67d06e6adf7ec8d8" translate="yes" xml:space="preserve">
          <source>Shown above, the ngAria module creates a directive with the same signature as the traditional &lt;code&gt;ng-disabled&lt;/code&gt; directive. But this ngAria version is dedicated to solely managing accessibility attributes on custom elements. The internal &lt;code&gt;$aria&lt;/code&gt; service is used to watch the boolean attribute &lt;code&gt;ngDisabled&lt;/code&gt;. If it has not been explicitly set by the developer, &lt;code&gt;aria-disabled&lt;/code&gt; is injected as an attribute with its value synchronized to the value in &lt;code&gt;ngDisabled&lt;/code&gt;.</source>
          <target state="translated">上に示したように、ngAriaモジュールは、従来の &lt;code&gt;ng-disabled&lt;/code&gt; ディレクティブと同じ署名を持つディレクティブを作成します。ただし、このngAriaバージョンは、カスタム要素のアクセシビリティ属性の管理のみを目的としています。内部の &lt;code&gt;$aria&lt;/code&gt; サービスは、ブール属性 &lt;code&gt;ngDisabled&lt;/code&gt; を監視するために使用されます。開発者によって明示的に設定されていない場合、 &lt;code&gt;aria-disabled&lt;/code&gt; は、その値が &lt;code&gt;ngDisabled&lt;/code&gt; の値に同期された属性として挿入されます。</target>
        </trans-unit>
        <trans-unit id="80d74256d71c12c70e6d5b83fef3f61ca9e24d1a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ngPattern&lt;/code&gt; except that the attribute value is the actual string that contains the regular expression body that will be converted to a regular expression as in the ngPattern directive.</source>
          <target state="translated">属性値が、ngPatternディレクティブのように正規表現に変換される正規表現本体を含む実際の文字列であることを除いて、 &lt;code&gt;ngPattern&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="5fbf095d64e8fe5aa6275f0d8781c810841a89da" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;redirectTo&lt;/code&gt;, if the return value is &lt;code&gt;undefined&lt;/code&gt; (or a promise that gets resolved to &lt;code&gt;undefined&lt;/code&gt;), no redirection takes place and the route transition occurs as though there was no redirection.</source>
          <target state="translated">同様 &lt;code&gt;redirectTo&lt;/code&gt; 、戻り値である場合には &lt;code&gt;undefined&lt;/code&gt; （またはに解決さ約束 &lt;code&gt;undefined&lt;/code&gt; ）、何リダイレクションが行われず、何らリダイレクションがなかったかのように経路遷移が起こります。</target>
        </trans-unit>
        <trans-unit id="b7900b7d5d07f82727f76c13818f1f10bae67ac1" translate="yes" xml:space="preserve">
          <source>Similar to the terminology used when an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.matches&quot;&gt;element &lt;strong&gt;matches&lt;/strong&gt; a selector&lt;/a&gt;, we say an element &lt;strong&gt;matches&lt;/strong&gt; a directive when the directive is part of its declaration.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.matches&quot;&gt;要素がセレクター&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;に&lt;strong&gt;一致&lt;/strong&gt;する場合に使用される用語と同様に、ディレクティブが宣言の一部である場合、要素はディレクティブに&lt;strong&gt;一致&lt;/strong&gt;すると言います。</target>
        </trans-unit>
        <trans-unit id="3877c491e6e23214903668db4f8f615dd271abe2" translate="yes" xml:space="preserve">
          <source>Similarly the browser itself offers &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; objects for caching data.</source>
          <target state="translated">同様に、ブラウザ自体は、データをキャッシュするための &lt;code&gt;localStorage&lt;/code&gt; および &lt;code&gt;sessionStorage&lt;/code&gt; オブジェクトを提供します。</target>
        </trans-unit>
        <trans-unit id="55fef1971466e90ac788430cdc912228b5b7171d" translate="yes" xml:space="preserve">
          <source>Similarly the controller can assign behavior to scope as seen by the &lt;code&gt;sayHello&lt;/code&gt; method, which is invoked when the user clicks on the 'greet' button. The &lt;code&gt;sayHello&lt;/code&gt; method can read the &lt;code&gt;username&lt;/code&gt; property and create a &lt;code&gt;greeting&lt;/code&gt; property. This demonstrates that the properties on scope update automatically when they are bound to HTML input widgets.</source>
          <target state="translated">同様に、コントローラーは、 &lt;code&gt;sayHello&lt;/code&gt; メソッドで表示される動作をスコープに割り当てることができます。このメソッドは、ユーザーが「挨拶」ボタンをクリックしたときに呼び出されます。 &lt;code&gt;sayHello&lt;/code&gt; の方法が読むことができる &lt;code&gt;username&lt;/code&gt; プロパティを作成し、 &lt;code&gt;greeting&lt;/code&gt; プロパティを。これは、スコープのプロパティがHTML入力ウィジェットにバインドされたときに自動的に更新されることを示しています。</target>
        </trans-unit>
        <trans-unit id="d96f9c5aaa25fbbb68757a349b61a3f9639f41c3" translate="yes" xml:space="preserve">
          <source>Similarly, an input control that has the &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive holds an instance of &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;. Such a control instance can be published as a property of the form instance using the &lt;code&gt;name&lt;/code&gt; attribute on the input control. The name attribute specifies the name of the property on the form instance.</source>
          <target state="translated">同様に、有する入力制御&lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModelの&lt;/a&gt;ディレクティブはのインスタンス保持&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;NgModelControllerを&lt;/a&gt;。このようなコントロールインスタンスは、入力コントロールの &lt;code&gt;name&lt;/code&gt; 属性を使用して、フォームインスタンスのプロパティとして公開できます。name属性は、フォームインスタンスのプロパティの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="670d0736a092699228ee118fa27e4f1c075ba154" translate="yes" xml:space="preserve">
          <source>Similarly, invoking a function &lt;code&gt;a.b.c()&lt;/code&gt; on &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; simply returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同様に、関数呼び出し &lt;code&gt;a.b.c()&lt;/code&gt; に &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; 単に戻る &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c88e131d548a3fcff63bbf97a9bf04e46be5233b" translate="yes" xml:space="preserve">
          <source>Simple HTML Element Directive</source>
          <target state="translated">シンプルな HTML 要素ディレクティブ</target>
        </trans-unit>
        <trans-unit id="d0c008ebf252b57d3dc089a4c5acee7f6e38bd98" translate="yes" xml:space="preserve">
          <source>Simple Usage</source>
          <target state="translated">シンプルな使い方</target>
        </trans-unit>
        <trans-unit id="84235c3cb3765eb50f195086225d801f2599517d" translate="yes" xml:space="preserve">
          <source>Simple form</source>
          <target state="translated">シンプルなフォーム</target>
        </trans-unit>
        <trans-unit id="a3cd4572b9d73188ee77a0e54ea25e4d608d9782" translate="yes" xml:space="preserve">
          <source>Simple select elements with static options</source>
          <target state="translated">静的なオプションを持つシンプルなセレクト要素</target>
        </trans-unit>
        <trans-unit id="03827a3f2a9c693e42982a518640a7eee54b2ec0" translate="yes" xml:space="preserve">
          <source>Simple service for logging. Default implementation safely writes the message into the browser's console (if present).</source>
          <target state="translated">ロギングのためのシンプルなサービス。デフォルトの実装では、ブラウザのコンソールにメッセージを安全に書き込みます (存在する場合)。</target>
        </trans-unit>
        <trans-unit id="ff7e4e9f9f31d98044b04d3c21cff29557191384" translate="yes" xml:space="preserve">
          <source>Simple toggle</source>
          <target state="translated">シンプルなトグル</target>
        </trans-unit>
        <trans-unit id="f59ba66ace97653b45c7cb9fa1f58b221143f9b5" translate="yes" xml:space="preserve">
          <source>Simply put, there are two ways to make use of animations when ngAnimate is used: by using &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;. The former works purely based using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via &lt;code&gt;module.animation()&lt;/code&gt;. For both CSS and JS animations the sole requirement is to have a matching &lt;code&gt;CSS class&lt;/code&gt; that exists both in the registered animation and within the HTML element that the animation will be triggered on.</source>
          <target state="translated">簡単に言えば、ngAnimateを使用するときにアニメーションを使用するには、&lt;strong&gt;CSS&lt;/strong&gt;と&lt;strong&gt;JavaScript&lt;/strong&gt;を使用する2つの方法があり&lt;strong&gt;ます&lt;/strong&gt;。前者はCSSを使用して（一致するCSSセレクター/スタイルを使用して）純粋にベースで動作し、後者は &lt;code&gt;module.animation()&lt;/code&gt; を介して登録されたアニメーションをトリガーします。 CSSアニメーションとJSアニメーションの両方について、唯一の要件は、登録されたアニメーションと、アニメーションがトリガーされるHTML要素内の両方に存在する一致する &lt;code&gt;CSS class&lt;/code&gt; を持つことです。</target>
        </trans-unit>
        <trans-unit id="8d4859bf7eff37bdd85712fbd099ff7698bacb58" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;ng-model&lt;/code&gt; does not do a deep watch, &lt;code&gt;$render()&lt;/code&gt; is only invoked if the values of &lt;code&gt;$modelValue&lt;/code&gt; and &lt;code&gt;$viewValue&lt;/code&gt; are actually different from their previous values. If &lt;code&gt;$modelValue&lt;/code&gt; or &lt;code&gt;$viewValue&lt;/code&gt; are objects (rather than a string or number) then &lt;code&gt;$render()&lt;/code&gt; will not be invoked if you only change a property on the objects.</source>
          <target state="translated">以来 &lt;code&gt;ng-model&lt;/code&gt; 深い時計をしない、 &lt;code&gt;$render()&lt;/code&gt; の値場合にのみ呼び出され、 &lt;code&gt;$modelValue&lt;/code&gt; と &lt;code&gt;$viewValue&lt;/code&gt; 、実際に、以前の値とは異なります。場合は &lt;code&gt;$modelValue&lt;/code&gt; または &lt;code&gt;$viewValue&lt;/code&gt; オブジェクト（というよりも、文字列または数値）ですその後、 &lt;code&gt;$render()&lt;/code&gt; あなただけのオブジェクトのプロパティを変更した場合に呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="aa0c4812062cb47a1f9de3c2cbc70c493f89f950" translate="yes" xml:space="preserve">
          <source>Since AngularJS itself uses &lt;code&gt;$validators&lt;/code&gt;, you can easily replace or remove built-in validators, should you find it necessary. The following example shows you how to overwrite the email validator in &lt;code&gt;input[email]&lt;/code&gt; from a custom directive so that it requires a specific top-level domain, &lt;code&gt;example.com&lt;/code&gt; to be present. Note that you can alternatively use &lt;code&gt;ng-pattern&lt;/code&gt; to further restrict the validation.</source>
          <target state="translated">AngularJS自体は &lt;code&gt;$validators&lt;/code&gt; 使用しているため、必要に応じて組み込みのバリデーターを簡単に置き換えたり削除したりできます。次の例は、特定のトップレベルドメイン &lt;code&gt;example.com&lt;/code&gt; が存在する必要があるように、カスタムディレクティブから &lt;code&gt;input[email]&lt;/code&gt; メールバリデーターを上書きする方法を示しています。別の方法として、 &lt;code&gt;ng-pattern&lt;/code&gt; を使用して検証をさらに制限できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5430e2f20e1f12ecf42559b930c20902825a9b60" translate="yes" xml:space="preserve">
          <source>Since AngularJS looks for this directive when it is loaded (doesn't wait for the DOMContentLoaded event), it must be placed on an element that comes before the script which loads angular. Also, only the first instance of &lt;code&gt;ng-jq&lt;/code&gt; will be used and all others ignored.</source>
          <target state="translated">AngularJSは、読み込まれたときにこのディレクティブを検索するため（DOMContentLoadedイベントを待機しないため）、angularを読み込むスクリプトの前にある要素に配置する必要があります。また、 &lt;code&gt;ng-jq&lt;/code&gt; の最初のインスタンスのみが使用され、他のすべては無視されます。</target>
        </trans-unit>
        <trans-unit id="28e56abe07923e1d07be0d87d2c7be61d8d34f6f" translate="yes" xml:space="preserve">
          <source>Since HTML attributes are case-insensitive, camelCase properties like &lt;code&gt;innerHTML&lt;/code&gt; must be escaped. AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so &lt;code&gt;innerHTML&lt;/code&gt; must be written as &lt;code&gt;ng-prop-inner_h_t_m_l=&quot;expression&quot;&lt;/code&gt; (Note that this is just an example, and for binding HTML &lt;a href=&quot;ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; should be used.</source>
          <target state="translated">HTML属性では大文字と小文字が区別されないため、 &lt;code&gt;innerHTML&lt;/code&gt; などのcamelCase プロパティはエスケープする必要があります。AngularJSは、文字の前にあるアンダースコア（_）を使用して大文字であることを示すため、 &lt;code&gt;innerHTML&lt;/code&gt; は &lt;code&gt;ng-prop-inner_h_t_m_l=&quot;expression&quot;&lt;/code&gt; として記述する必要があります（これは単なる例であり、HTMLをバインドするために&lt;a href=&quot;ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; &lt;/a&gt;は中古。</target>
        </trans-unit>
        <trans-unit id="6180f52ac744623bfbc50d4e6893b9f447288926" translate="yes" xml:space="preserve">
          <source>Since HTML attributes are case-insensitive, camelCase properties like &lt;code&gt;myEvent&lt;/code&gt; must be escaped. AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so &lt;code&gt;myEvent&lt;/code&gt; must be written as &lt;code&gt;ng-on-my_event=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">HTML属性では大文字と小文字が区別されないため、 &lt;code&gt;myEvent&lt;/code&gt; などのcamelCaseプロパティはエスケープする必要があります。AngularJSは、文字の前にあるアンダースコア（_）を使用して、それが大文字であることを示します。したがって、 &lt;code&gt;myEvent&lt;/code&gt; は &lt;code&gt;ng-on-my_event=&quot;expression&quot;&lt;/code&gt; として記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5f8c4edd14e615a9529c236970c4b73e5a525f6" translate="yes" xml:space="preserve">
          <source>Since a Factory is a more powerful version of the Value recipe, the same service can be constructed with it. Using our previous &lt;code&gt;clientId&lt;/code&gt; Value recipe example, we can rewrite it as a Factory recipe like this:</source>
          <target state="translated">FactoryはValueレシピのより強力なバージョンであるため、同じサービスをそれで構築できます。前の &lt;code&gt;clientId&lt;/code&gt; Valueレシピの例を使用して、次のようなFactoryレシピとして書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="6d6470589666e0247f95db4453af06bba535fd66" translate="yes" xml:space="preserve">
          <source>Since simple values, like URL prefixes, don't have dependencies or configuration, it's often handy to make them available in both the configuration and run phases. This is what the Constant recipe is for.</source>
          <target state="translated">URL接頭辞のような単純な値は依存関係や設定を持たないので、設定と実行の両方のフェーズで利用できるようにしておくと便利です。これが Constant のレシピです。</target>
        </trans-unit>
        <trans-unit id="ad773d9c369a2cbf2a3edcbfbb3bda586bbb4fa9" translate="yes" xml:space="preserve">
          <source>Since some CSS style names are not valid keys for an object, they must be quoted. See the 'background-color' style in the example below.</source>
          <target state="translated">いくつかのCSSスタイル名はオブジェクトの有効なキーではないので、それらは引用符で囲まれなければなりません。以下の例の 'background-color' スタイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="aee86cd3da47d151256d0ba9d57166d31b584bac" translate="yes" xml:space="preserve">
          <source>Since the directives are registered via the Factory recipe, we can use the same syntax as with factories.</source>
          <target state="translated">ディレクティブはFactoryレシピ経由で登録されているので、factoryと同じ構文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="3da73c2e58574c5c5bb5bab3aecd1685eb9aad46" translate="yes" xml:space="preserve">
          <source>Since the element value should always reflect the current model value, a range input will set the bound ngModel expression to the value that the browser has set for the input element. For example, in the following input &lt;code&gt;&amp;lt;input type=&quot;range&quot; ng-model=&quot;model.value&quot;&amp;gt;&lt;/code&gt;, if the application sets &lt;code&gt;model.value = null&lt;/code&gt;, the browser will set the input to &lt;code&gt;'50'&lt;/code&gt;. AngularJS will then set the model to &lt;code&gt;50&lt;/code&gt;, to prevent input and model value being out of sync.</source>
          <target state="translated">要素の値は常に現在のモデル値を反映する必要があるため、範囲入力は、バインドされたngModel式をブラウザが入力要素に設定した値に設定します。たとえば、次の入力 &lt;code&gt;&amp;lt;input type=&quot;range&quot; ng-model=&quot;model.value&quot;&amp;gt;&lt;/code&gt; で、アプリケーションが &lt;code&gt;model.value = null&lt;/code&gt; を設定すると、ブラウザは入力を &lt;code&gt;'50'&lt;/code&gt; 設定します。次に、AngularJSはモデルを &lt;code&gt;50&lt;/code&gt; に設定して、入力とモデル値が同期しないようにします。</target>
        </trans-unit>
        <trans-unit id="de2656cf829a163f90dcbaec4f540852bc0adf82" translate="yes" xml:space="preserve">
          <source>Since the role of forms in client-side AngularJS applications is different than in classical roundtrip apps, it is desirable for the browser not to translate the form submission into a full page reload that sends the data to the server. Instead some javascript logic should be triggered to handle the form submission in an application-specific way.</source>
          <target state="translated">クライアントサイドのAngularJSアプリケーションにおけるフォームの役割は従来のラウンドトリップアプリとは異なるため、ブラウザはフォーム送信をサーバーにデータを送るフルページリロードに変換しないことが望ましいです。その代わりに、アプリケーション固有の方法でフォーム送信を処理するためにjavascriptのロジックをトリガーする必要があります。</target>
        </trans-unit>
        <trans-unit id="0f8d61a46a9e62b0ab9b1fbc5b8b9b1845db6541" translate="yes" xml:space="preserve">
          <source>Since there is always a &lt;code&gt;.&lt;/code&gt; in the bindings, you don't have to worry about prototypal inheritance masking primitives.</source>
          <target state="translated">常にあるので &lt;code&gt;.&lt;/code&gt; バインディングでは、プロトタイプの継承マスキングプリミティブについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a49e716395a6fcc1d3c1224721ec121ecfc0eeaf" translate="yes" xml:space="preserve">
          <source>Since this function will be called extensively, keep the implementation of these functions fast, as the performance of these functions have a direct impact on the expressions parsing speed.</source>
          <target state="translated">この関数は広範囲に呼び出されるので、これらの関数の性能は式の解析速度に直接影響するので、実装は高速にしておきましょう。</target>
        </trans-unit>
        <trans-unit id="59722304fd011d17850e8a3823c58300ef1d80f6" translate="yes" xml:space="preserve">
          <source>Since this is not recommended usage, we do not test for this, and changes to AngularJS core may break your code.</source>
          <target state="translated">これは推奨される使い方ではないので、テストはしておらず、AngularJSコアへの変更はコードを壊す可能性があります。</target>
        </trans-unit>
        <trans-unit id="917832a239f3fd99dcae4d93657df711ad5f5d8f" translate="yes" xml:space="preserve">
          <source>Since we already have a constructor for our UnicornLauncher type, we can replace the Factory recipe above with a Service recipe like this:</source>
          <target state="translated">すでにUnicornLauncherタイプのコンストラクタを持っているので、上記のFactoryレシピを以下のようなServiceレシピに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="3b0eccf81fb8808c4fb4ac778066a0a4996cfb53" translate="yes" xml:space="preserve">
          <source>Since we're adding/removing CSS classes then the CSS transition will also pick those up:</source>
          <target state="translated">CSS クラスを追加したり削除したりしているので、CSS トランジションでもそれらのクラスがピックアップされます。</target>
        </trans-unit>
        <trans-unit id="9790252dd3fcd976ceaf1905ffedbaea284d3197" translate="yes" xml:space="preserve">
          <source>Since you can apply multiple decorators, it is noteworthy that decorator application always follows order of declaration:</source>
          <target state="translated">複数のデコレータを適用することができるので、デコレータの適用は常に宣言の順番に従うことに注目してください。</target>
        </trans-unit>
        <trans-unit id="221e7f46589fb8b5c943fabe0a90906e727a990e" translate="yes" xml:space="preserve">
          <source>Singletons &amp;ndash; Each component dependent on a service gets a reference to the single instance generated by the service factory.</source>
          <target state="translated">シングルトン&amp;ndash;サービスに依存する各コンポーネントは、サービスファクトリによって生成された単一のインスタンスへの参照を取得します。</target>
        </trans-unit>
        <trans-unit id="edf9f9f4ae8d57a352e36949269c63714ff489d8" translate="yes" xml:space="preserve">
          <source>Slots that are not marked as optional (&lt;code&gt;?&lt;/code&gt;) will trigger a compile time error if there are no matching elements in the transclude content. If you wish to know if an optional slot was filled with content, then you can call &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; on the transclude function passed to the directive's link function and injectable into the directive's controller.</source>
          <target state="translated">オプションとしてマークされていないスロット（ &lt;code&gt;?&lt;/code&gt; ）は、transcludeコンテンツに一致する要素がない場合、コンパイル時エラーをトリガーします。オプションのスロットがコンテンツで満たされているかどうかを知りたい場合は、ディレクティブのリンク関数に渡され、ディレクティブのコントローラーに注入可能な &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; 関数で$ transclude.isSlotFilled（slotName）を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1304e57395edce04375141065cec7a2b8aaaf6ee" translate="yes" xml:space="preserve">
          <source>So far we've explored how to feed in animations into an AngularJS application, but how do we trigger animations within our own directives in our application? By injecting the &lt;code&gt;$animate&lt;/code&gt; service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's imagine we have a greeting box that shows and hides itself when the data changes</source>
          <target state="translated">これまで、AngularJSアプリケーションにアニメーションをフィードする方法を検討してきましたが、アプリケーションの独自のディレクティブ内でアニメーションをトリガーするにはどうすればよいですか？注入することにより &lt;code&gt;$animate&lt;/code&gt; 私たちのディレクティブコードにサービスを、私たちは、その後、アニメーションによって消費することができ、構造とクラスベースのフックをトリガすることができます。データが変更されたときに表示と非表示を切り替えるグリーティングボックスがあるとします。</target>
        </trans-unit>
        <trans-unit id="b9b91374d2524cbd476e32f3e00d6bc93d1cf372" translate="yes" xml:space="preserve">
          <source>So where does this &lt;code&gt;myTabs&lt;/code&gt; controller come from? Directives can specify controllers using the unsurprisingly named &lt;code&gt;controller&lt;/code&gt; option. As you can see, the &lt;code&gt;myTabs&lt;/code&gt; directive uses this option. Just like &lt;code&gt;ngController&lt;/code&gt;, this option attaches a controller to the template of the directive.</source>
          <target state="translated">では、この &lt;code&gt;myTabs&lt;/code&gt; コントローラはどこから来たのでしょうか。ディレクティブは、驚くほど名前の付いていない &lt;code&gt;controller&lt;/code&gt; オプションを使用してコントローラーを指定できます。ご覧のとおり、 &lt;code&gt;myTabs&lt;/code&gt; ディレクティブはこのオプションを使用しています。 &lt;code&gt;ngController&lt;/code&gt; と同様に、このオプションはディレクティブのテンプレートにコントローラーをアタッチします。</target>
        </trans-unit>
        <trans-unit id="57f42d3af4e66a8c4d6f60a13630a4233309c21e" translate="yes" xml:space="preserve">
          <source>Some directives have options that will cause them to use a custom &lt;code&gt;$watchCollection&lt;/code&gt; on the model expression</source>
          <target state="translated">一部のディレクティブには、モデル式でカスタム &lt;code&gt;$watchCollection&lt;/code&gt; を使用させるオプションがあります</target>
        </trans-unit>
        <trans-unit id="7c01d13578172cd43fe55634eb54a9376d0ff04b" translate="yes" xml:space="preserve">
          <source>Some directives such as &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat&lt;/code&gt;&lt;/a&gt; clone DOM elements once for each item in a collection. Having a compile and link phase improves performance since the cloned template only needs to be compiled once, and then linked once for each clone instance.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;/a&gt;などの一部のディレクティブは、コレクション内のアイテムごとに1回ずつDOM要素を複製します。コンパイルおよびリンクフェーズを使用すると、クローンテンプレートを1回だけコンパイルして、各クローンインスタンスに対して1回リンクするだけでよいため、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="abbc5f6e9931e1cf9c3b6a86facb217df53278e5" translate="yes" xml:space="preserve">
          <source>Some of the things to consider are:</source>
          <target state="translated">考慮すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d096867d249bc9020052a71ba018f7a10b3ca19c" translate="yes" xml:space="preserve">
          <source>Something Missing?</source>
          <target state="translated">何か欠けていますか?</target>
        </trans-unit>
        <trans-unit id="cbbc1430e2b49afa7433be0a07729194e8717264" translate="yes" xml:space="preserve">
          <source>Sometimes it's helpful to bind &lt;code&gt;ngModel&lt;/code&gt; to a getter/setter function. A getter/setter is a function that returns a representation of the model when called with zero arguments, and sets the internal state of a model when called with an argument. It's sometimes useful to use this for models that have an internal representation that's different from what the model exposes to the view.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; をゲッター/セッター関数にバインドすると便利な場合があります。ゲッター/セッターは、引数なしで呼び出されたときにモデルの表現を返し、引数付きで呼び出されたときにモデルの内部状態を設定する関数です。モデルがビューに公開するものとは異なる内部表現を持つモデルにこれを使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="664a4aedf99dd7e1979fed0833f705180138c60a" translate="yes" xml:space="preserve">
          <source>Sometimes you need to animate between different expression states, whose values don't necessary need to be known or referenced in CSS styles. Unless possible with another &lt;a href=&quot;nganimate#directive-support.html&quot;&gt;&quot;animation aware&quot; directive&lt;/a&gt;, that specific use case can always be covered with &lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt;&lt;code&gt;ngAnimateSwap&lt;/code&gt;&lt;/a&gt; as can be seen in &lt;a href=&quot;nganimate/directive/nganimateswap#examples.html&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">異なる式の状態間でアニメーション化する必要がある場合があります。その値は、CSSスタイルで認識または参照する必要はありません。別の&lt;a href=&quot;nganimate#directive-support.html&quot;&gt;「アニメーション対応」ディレクティブ&lt;/a&gt;で可能でない限り、この特定のユースケースは、&lt;a href=&quot;nganimate/directive/nganimateswap#examples.html&quot;&gt;この例&lt;/a&gt;でわかるように、常に&lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt; &lt;code&gt;ngAnimateSwap&lt;/code&gt; &lt;/a&gt;でカバーできます。</target>
        </trans-unit>
        <trans-unit id="af888588d45874add63c6945bb37c6a42beb5dcf" translate="yes" xml:space="preserve">
          <source>Sometimes you want to get access to the injector of a currently running AngularJS app from outside AngularJS. Perhaps, you want to inject and compile some markup after the application has been bootstrapped. You can do this using the extra &lt;code&gt;injector()&lt;/code&gt; added to JQuery/jqLite elements. See &lt;a href=&quot;angular.element&quot;&gt;&lt;code&gt;angular.element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">AngularJSの外部から現在実行中のAngularJSアプリのインジェクターにアクセスしたい場合があります。おそらく、アプリケーションがブートストラップされた後で、マークアップを挿入してコンパイルする必要があります。これを行うには、JQuery / jqLit​​e要素に追加された余分なInjector &lt;code&gt;injector()&lt;/code&gt; を使用します。&lt;a href=&quot;angular.element&quot;&gt; &lt;code&gt;angular.element&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c70a3bbba0ad9cffadf0a0295881020387c4bed2" translate="yes" xml:space="preserve">
          <source>Sometimes, you want a component that's built from a combination of directives.</source>
          <target state="translated">時には、ディレクティブを組み合わせて構築されたコンポーネントが必要になることもあります。</target>
        </trans-unit>
        <trans-unit id="421892e3b6987a4ab2662bd41f03a6db11410f1c" translate="yes" xml:space="preserve">
          <source>Source object(s).</source>
          <target state="translated">ソースオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9d05b94407a845105e7d6912f2247f1fb5aedd40" translate="yes" xml:space="preserve">
          <source>Special Purpose Objects</source>
          <target state="translated">特殊用途オブジェクト</target>
        </trans-unit>
        <trans-unit id="b96ffd57764048c51c1bcf11257b309102be467e" translate="yes" xml:space="preserve">
          <source>Special case for object literals</source>
          <target state="translated">オブジェクトリテラルの特殊なケース</target>
        </trans-unit>
        <trans-unit id="0a8b23d3b38015cbdb0fb39f4fd51ce69124721c" translate="yes" xml:space="preserve">
          <source>Special properties are exposed on the local scope of each template instance, including:</source>
          <target state="translated">特別なプロパティは、以下のように各テンプレートインスタンスのローカルスコープで公開されます。</target>
        </trans-unit>
        <trans-unit id="a078a6274605136ba821d917e9eea575f76690d4" translate="yes" xml:space="preserve">
          <source>Special repeat start and end points</source>
          <target state="translated">特別なリピートの開始点と終了点</target>
        </trans-unit>
        <trans-unit id="57b7760bda7b4380592b5737a6a82c6ccba48801" translate="yes" xml:space="preserve">
          <source>Specialized objects conform to a specific AngularJS framework API. These objects are one of controllers, directives, filters or animations.</source>
          <target state="translated">特殊なオブジェクトは特定のAngularJSフレームワークのAPIに準拠しています。これらのオブジェクトはコントローラ、ディレクティブ、フィルタ、アニメーションのいずれかです。</target>
        </trans-unit>
        <trans-unit id="04c5112c22bab611b8969bac11e09ff8b1803c53" translate="yes" xml:space="preserve">
          <source>Specific Topics</source>
          <target state="translated">特定のトピック</target>
        </trans-unit>
        <trans-unit id="5111401f8ca4570e9c5c87b00d803bc9e5949a8f" translate="yes" xml:space="preserve">
          <source>Specifically, select with repeated options slows down significantly starting at 2000 options in Chrome and Internet Explorer / Edge.</source>
          <target state="translated">具体的には、ChromeやInternet Explorer/Edgeでは、オプションを繰り返し選択すると、2000個のオプションから大幅に遅くなります。</target>
        </trans-unit>
        <trans-unit id="ee5be6a3c404fec10a846b912d2167e79d9eb9d4" translate="yes" xml:space="preserve">
          <source>Specifies what the template should replace. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">テンプレートで置き換えるものを指定します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ebe7a17abd0db8768c02337625977fab8c51abe5" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on blur event.</source>
          <target state="translated">ぼかしイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="0fdd24bba9560ba7f15628258d8c85038b456928" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on copy event.</source>
          <target state="translated">コピーイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="45774185dbd7972d0db9bbbe77aed1f54b1dc5fe" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on cut event.</source>
          <target state="translated">カットイベント時のカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="69ee0cf954ecc6be76292ac30523261180946c32" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on focus event.</source>
          <target state="translated">フォーカスイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="2635e69da87a75b4a328ff60a4a617ced9b9ab84" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keydown event.</source>
          <target state="translated">キーダウンイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="364cf45ef5402fe8a77cfe94298efc046a399d5e" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keypress event.</source>
          <target state="translated">キープレスイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="d2fbffdaf1f164dd87a0d7306222c286addb62c2" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keyup event.</source>
          <target state="translated">キーアップイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="66046b450c8ca10135ebc76e12b5d56f6bd71fcf" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseenter event.</source>
          <target state="translated">マウス入力イベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="dc4396794528c548db1abf00c9509c4b1640d305" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseleave event.</source>
          <target state="translated">mouseleave イベントでのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="6f7dc3f5a81beb83b7f91c0492d6dd61c997efa8" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mousemove event.</source>
          <target state="translated">マウス移動イベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="2ecc906801a3e6a9462c1e80878ac4cb68a8a04b" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseover event.</source>
          <target state="translated">マウスオーバーイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="c9957119c462925749108fa90e18e12f28fbbf99" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseup event.</source>
          <target state="translated">マウスアップイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="9e739ba9d9452b11d6950ec065ccba6f29b0281e" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on paste event.</source>
          <target state="translated">ペーストイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="62ae044c38e8eea1750700749fdf95cb26a771d3" translate="yes" xml:space="preserve">
          <source>Specify custom behavior when an element is swiped to the left on a touchscreen device. A leftward swipe is a quick, right-to-left slide of the finger. Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag too.</source>
          <target state="translated">タッチスクリーンデバイス上で要素が左にスワイプされたときのカスタム動作を指定します。左方向へのスワイプとは、指を素早く右から左にスライドさせることです。ngSwipeLeft はタッチベースのデバイス向けに設計されていますが、マウスのクリックやドラッグでも動作します。</target>
        </trans-unit>
        <trans-unit id="ed5277106fc86f53ceb18f5891b049962ec8e692" translate="yes" xml:space="preserve">
          <source>Specify custom behavior when an element is swiped to the right on a touchscreen device. A rightward swipe is a quick, left-to-right slide of the finger. Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag too.</source>
          <target state="translated">タッチスクリーンデバイス上で要素が右にスワイプされたときのカスタム動作を指定します。右方向へのスワイプとは、指を左から右に素早くスライドさせることです。ngSwipeRight はタッチベースのデバイス向けに設計されていますが、マウスのクリックやドラッグでも動作します。</target>
        </trans-unit>
        <trans-unit id="e383a8d6c6a65b95bb3d6da162b3171ba830f168" translate="yes" xml:space="preserve">
          <source>Specifying both &lt;code&gt;no-unsafe-eval&lt;/code&gt; and &lt;code&gt;no-inline-style&lt;/code&gt; tells AngularJS that we must not inject styles nor use eval, which is the same as an empty: ng-csp. E.g.&lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;no-unsafe-eval&lt;/code&gt; と &lt;code&gt;no-inline-style&lt;/code&gt; の両方を指定すると、スタイルを挿入したり、evalを使用したりしてはならないことをAngularJSに伝えます。これは、空のng-cspと同じです。例： &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a48590887dc5ac3e1df0a031837fc5c9dd8ba17b" translate="yes" xml:space="preserve">
          <source>Specifying only &lt;code&gt;no-inline-style&lt;/code&gt; tells AngularJS that we must not inject styles, but that we can run eval - no automatic check for unsafe eval will occur. E.g. &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;no-inline-style&lt;/code&gt; のみを指定すると、スタイルを挿入してはならないが、evalを実行できることをAngularJSに伝えます-安全でないevalの自動チェックは行われません。例： &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9595e653885c174c53ed5a17c46760fe9aa2b31" translate="yes" xml:space="preserve">
          <source>Specifying only &lt;code&gt;no-unsafe-eval&lt;/code&gt; tells AngularJS that we must not use eval, but that we can inject inline styles. E.g. &lt;code&gt;&amp;lt;body ng-csp=&quot;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no-unsafe-eval&lt;/code&gt; だけを指定すると、AngularJSにevalを使用してはならないが、インラインスタイルを挿入できることが通知されます。例： &lt;code&gt;&amp;lt;body ng-csp=&quot;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b399f97c3ae5f107e746baac5c2d19b1a8d42cc9" translate="yes" xml:space="preserve">
          <source>Specifying timezones</source>
          <target state="translated">タイムゾーンの指定</target>
        </trans-unit>
        <trans-unit id="a54d839afff90b786485fc552138537ed9fe8312" translate="yes" xml:space="preserve">
          <source>Splitting on newline</source>
          <target state="translated">改行での分割</target>
        </trans-unit>
        <trans-unit id="bd460706c33e700b49c8ae9c041be0f8c0b2338d" translate="yes" xml:space="preserve">
          <source>Stackoverflow.com</source>
          <target state="translated">Stackoverflow.com</target>
        </trans-unit>
        <trans-unit id="01d799bca2a69a007158bc0e7affb53b76bb12cb" translate="yes" xml:space="preserve">
          <source>Stagger animations are currently only supported within CSS-defined animations.</source>
          <target state="translated">千鳥アニメーションは、現在のところCSSで定義されたアニメーション内でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="6dc5055d926eba0a5a0d1b7f405534e8dbc2e929" translate="yes" xml:space="preserve">
          <source>Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation will also be reset if one or more animation frames have passed since the multiple calls to &lt;code&gt;$animate&lt;/code&gt; were fired.</source>
          <target state="translated">ngRepeatでは、CSSクラスが定義されている限り、スタッガリングアニメーションがデフォルトで機能します。ngRepeatの外で、あなた自身で驚異的なアニメーションを使用するには、$ animateで同じイベントに複数の呼び出しを起動することでトリガーできます。ただし、これに関する制限は、各要素が同じCSS className値と同じ親要素を持つ必要があることです。 &lt;code&gt;$animate&lt;/code&gt; への複数の呼び出しが発生してから1つ以上のアニメーションフレームが渡された場合も、時間差操作はリセットされます。</target>
        </trans-unit>
        <trans-unit id="7dbcdb3d981762e092a8a0eb5b52a65e55ce9ea2" translate="yes" xml:space="preserve">
          <source>Standard HTML text input with AngularJS data binding, inherited by most of the &lt;code&gt;input&lt;/code&gt; elements.</source>
          <target state="translated">ほとんどの &lt;code&gt;input&lt;/code&gt; 要素に継承される、AngularJSデータバインディングを使用した標準のHTMLテキスト入力。</target>
        </trans-unit>
        <trans-unit id="1f1e7eba09c2ce4b9e9136f1a569e0232894be52" translate="yes" xml:space="preserve">
          <source>State object for pushState or replaceState</source>
          <target state="translated">pushStateまたはreplaceStateのためのステートオブジェクト</target>
        </trans-unit>
        <trans-unit id="7cf0be0a9e2a8d99b8c4759b4af56f29e76aa7ee" translate="yes" xml:space="preserve">
          <source>Stateful filters</source>
          <target state="translated">ステートフルフィルタ</target>
        </trans-unit>
        <trans-unit id="5e96a873a72243db5cb2df269e0f0d2cbf0c7b9d" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping</source>
          <target state="translated">厳密な文脈上のエスケープ</target>
        </trans-unit>
        <trans-unit id="3775eeb949b1fb2fd1955bcb420db6eb7b25e4a7" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.</source>
          <target state="translated">Strict Contextual Escaping (SCE)はAngularJSがバインディングを拘束して信頼された値のみをレンダリングするモードです。その目的は、(a)デフォルトで安全で、(b)XSSやクリックジャッキングなどのセキュリティ脆弱性の監査をより簡単にするようなコードを書くことを支援することです。</target>
        </trans-unit>
        <trans-unit id="1f5a49130979c6fca3781fbd1b1aaf18d84c7ba1" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain contexts to require a value that is marked as safe to use for that context.</source>
          <target state="translated">Strict Contextual Escaping (SCE)とは、AngularJSが特定のコンテキストでバインディングに、そのコンテキストで使用しても安全であるとマークされた値を要求するモードのことです。</target>
        </trans-unit>
        <trans-unit id="1c659f2d7b3b50a0d6469f82f986c1ebaf9b0d3d" translate="yes" xml:space="preserve">
          <source>Strict DI Mode</source>
          <target state="translated">厳格なDIモード</target>
        </trans-unit>
        <trans-unit id="2bfb8e4ab7ad26987612ed241301df64e4a5e6c8" translate="yes" xml:space="preserve">
          <source>Strict mode throws an error whenever a service tries to use implicit annotations.</source>
          <target state="translated">Strict モードは、サービスが暗黙のアノテーションを使用しようとするとエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="88d32ee4ea8feed876a112599c55110bdd530427" translate="yes" xml:space="preserve">
          <source>String expression to compile.</source>
          <target state="translated">コンパイルする文字列式。</target>
        </trans-unit>
        <trans-unit id="e12b4d937b999dc5172d2e40f3ebbc44d819487d" translate="yes" xml:space="preserve">
          <source>String of subset of &lt;code&gt;EACM&lt;/code&gt; which restricts the directive to a specific directive declaration style. If omitted, the defaults (elements and attributes) are used.</source>
          <target state="translated">ディレクティブを特定のディレクティブ宣言スタイルに制限する &lt;code&gt;EACM&lt;/code&gt; のサブセットの文字列。省略した場合、デフォルト（要素と属性）が使用されます。</target>
        </trans-unit>
        <trans-unit id="872c64e82c40b2d1cd4b6a9e18bb1db22bb67a26" translate="yes" xml:space="preserve">
          <source>String representing the document type used by the markup in the template. AngularJS needs this information as those elements need to be created and cloned in a special way when they are defined outside their usual containers like &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートのマークアップで使用されるドキュメントタイプを表す文字列。AngularJSは、 &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; などの通常のコンテナーの外で定義されている場合、これらの要素を特別な方法で作成および複製する必要があるため、この情報が必要です。</target>
        </trans-unit>
        <trans-unit id="88074187af21b77e29c2c3fb7338c2bfed9d4dc7" translate="yes" xml:space="preserve">
          <source>Strip &lt;code&gt;x-&lt;/code&gt; and &lt;code&gt;data-&lt;/code&gt; from the front of the element/attributes.</source>
          <target state="translated">ストリップは、 &lt;code&gt;x-&lt;/code&gt; と &lt;code&gt;data-&lt;/code&gt; 要素/属性の正面から。</target>
        </trans-unit>
        <trans-unit id="7ba69fbec00fde56296717c9d98342680ce6437e" translate="yes" xml:space="preserve">
          <source>Submitting a form and preventing the default action</source>
          <target state="translated">フォームの送信とデフォルトアクションの防止</target>
        </trans-unit>
        <trans-unit id="1776bd536ae1b98776c73edc90a250f79697f232" translate="yes" xml:space="preserve">
          <source>Success callback is called with (value (Object|Array), responseHeaders (Function), status (number), statusText (string)) arguments, where &lt;code&gt;value&lt;/code&gt; is the populated resource instance or collection object. The error callback is called with (httpResponse) argument.</source>
          <target state="translated">成功コールバックは、（値（オブジェクト|配列）、responseHeaders（関数）、ステータス（数値）、ステータステキスト（文字列））引数で呼び出されます。 &lt;code&gt;value&lt;/code&gt; は、入力されたリソースインスタンスまたはコレクションオブジェクトです。エラーコールバックは（httpResponse）引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="651a1eef515aca30b90f14ef4396087abadd6816" translate="yes" xml:space="preserve">
          <source>Super-powered by Google &amp;copy;2010-2018 ()</source>
          <target state="translated">Googleの強力な機能&amp;copy;2010-2018（）</target>
        </trans-unit>
        <trans-unit id="aaca8178a47080dd22a83473e9210240a39331e4" translate="yes" xml:space="preserve">
          <source>Super-powered by Google &amp;copy;2010-2020 ()</source>
          <target state="translated">グーグルによって超強力&amp;copy;2010-2020（）</target>
        </trans-unit>
        <trans-unit id="128ad4886b58c56808262e16c97c1fefa3d0364b" translate="yes" xml:space="preserve">
          <source>Support for forms and form validation.</source>
          <target state="translated">フォームとフォームの検証をサポートします。</target>
        </trans-unit>
        <trans-unit id="533c3fe8a11280b09049baeef1d18f1e2c66b251" translate="yes" xml:space="preserve">
          <source>Supported Animations</source>
          <target state="translated">サポートされているアニメーション</target>
        </trans-unit>
        <trans-unit id="61f41951ba384b168a3fd044153d2a0d7437a779" translate="yes" xml:space="preserve">
          <source>Supported Attributes</source>
          <target state="translated">サポートされている属性</target>
        </trans-unit>
        <trans-unit id="9e850d56a52a0f4a76ab102f64af3c41ced5ebbc" translate="yes" xml:space="preserve">
          <source>Supported directives</source>
          <target state="translated">サポートされているディレクティブ</target>
        </trans-unit>
        <trans-unit id="b844ebf9107f313b705243ff6e3c0e29c537e7bb" translate="yes" xml:space="preserve">
          <source>Supported locales in AngularJS</source>
          <target state="translated">AngularJSでサポートされているロケール</target>
        </trans-unit>
        <trans-unit id="d67aa352a36cef88c13b259bd33561d90b0365b1" translate="yes" xml:space="preserve">
          <source>Suspend watchers of this scope subtree so that they will not be invoked during digest.</source>
          <target state="translated">このスコープサブツリーのウォッチャーをサスペンドして、ダイジェスト中に呼び出されないようにします。</target>
        </trans-unit>
        <trans-unit id="0613e8d33b88eb5f715df8657a9f46a63b77c7cf" translate="yes" xml:space="preserve">
          <source>Suspending scopes from the digest cycle can have unwanted and difficult to debug results. Only use this approach if you are confident that you know what you are doing and have ample tests to ensure that bindings get updated as you expect.</source>
          <target state="translated">スコープをダイジェストサイクルからサスペンドすると、望ましくない結果になったりデバッグが困難になったりすることがあります。自分が何をしているのか分かっていて、バインディングが期待通りに更新されるように十分なテストを行っていると確信している場合にのみ、この方法を使用してください。</target>
        </trans-unit>
        <trans-unit id="32e904303ff61f5b2a1250947786bac2775a479c" translate="yes" xml:space="preserve">
          <source>Symbol to denote start of expression in the interpolated string. Defaults to &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">補間された文字列の式の開始を示す記号。デフォルトは &lt;code&gt;{{&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="010df4acd78408b0b90ae7e93dc3b612e04db36a" translate="yes" xml:space="preserve">
          <source>Symbol to denote the end of expression in the interpolated string. Defaults to &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">補間された文字列の式の終わりを示す記号。デフォルトは &lt;code&gt;}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6a5f18031d695445e63d4578e75564ff86e9c008" translate="yes" xml:space="preserve">
          <source>Symbol to denote the start of expression in the interpolated string. Defaults to &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">補間された文字列の式の開始を示す記号。デフォルトは &lt;code&gt;{{&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="24c5fe305312dc2c4ffb8fb7b9eb84e1aca41b7f" translate="yes" xml:space="preserve">
          <source>Synchronizes the URL with the browser when the user</source>
          <target state="translated">ユーザーが</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="0ffd830453cb1543a236124ebfabc6b09e44c420" translate="yes" xml:space="preserve">
          <source>Synthetic event object</source>
          <target state="translated">合成イベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="ef0c9c3ef9a9101037c044968d4ec8561862d66d" translate="yes" xml:space="preserve">
          <source>Synthetic event object.</source>
          <target state="translated">合成イベントオブジェクト。</target>
        </trans-unit>
        <trans-unit id="11208e323cd2d68ee6883f284ffb9391f1597c5e" translate="yes" xml:space="preserve">
          <source>Take note that:</source>
          <target state="translated">注意してください。</target>
        </trans-unit>
        <trans-unit id="68b7d169a5352c6fcac93577ccebfe033038e7f9" translate="yes" xml:space="preserve">
          <source>Taking a look at the following CSS code, we can see some transition and keyframe animation code set up for each of those events that occur when &lt;code&gt;ngRepeat&lt;/code&gt; triggers them:</source>
          <target state="translated">次のCSSコードを見てみると、 &lt;code&gt;ngRepeat&lt;/code&gt; がトリガーしたときに発生するこれらの各イベントに設定された遷移およびキーフレームアニメーションコードがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="652ac2cbbafccc62d55637f20bfa949ef565ffbd" translate="yes" xml:space="preserve">
          <source>Target:</source>
          <target state="translated">Target:</target>
        </trans-unit>
        <trans-unit id="122160c9a1a352e0c305c1636f954067859be86c" translate="yes" xml:space="preserve">
          <source>Teach the injector how to build a &lt;code&gt;greeter&lt;/code&gt; service, which is just an object that contains a &lt;code&gt;greet&lt;/code&gt; method. Notice that &lt;code&gt;greeter&lt;/code&gt; is dependent on the &lt;code&gt;$window&lt;/code&gt; service, which will be provided (injected into &lt;code&gt;greeter&lt;/code&gt;) by the injector.</source>
          <target state="translated">&lt;code&gt;greeter&lt;/code&gt; サービスを構築する方法をインジェクターに教えます。これは、 &lt;code&gt;greet&lt;/code&gt; メソッドを含む単なるオブジェクトです。 &lt;code&gt;greeter&lt;/code&gt; は &lt;code&gt;$window&lt;/code&gt; サービスに依存していることに注意してください。このサービスは、インジェクターによって提供されます（ &lt;code&gt;greeter&lt;/code&gt; に注入されます）。</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="efc74e06342f32d51bb6a68ec7bbc43d16692908" translate="yes" xml:space="preserve">
          <source>Template loading is asynchronous even if the template has been preloaded into the &lt;a href=&quot;%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">テンプレートが&lt;a href=&quot;%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;プリロードされていても、テンプレートの読み込みは非同期です</target>
        </trans-unit>
        <trans-unit id="143b0194de96c778d2d0cfe90268805e65a862d5" translate="yes" xml:space="preserve">
          <source>Template loading is asynchronous even if the template has been preloaded into the &lt;a href=&quot;%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートが&lt;a href=&quot;%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;プリロードされている場合でも、テンプレートのロードは非同期です。</target>
        </trans-unit>
        <trans-unit id="a288f6778aa522b317f30186b6639810acb48145" translate="yes" xml:space="preserve">
          <source>Template-expanding directive</source>
          <target state="translated">テンプレート拡張ディレクティブ</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="2846e2f8a5a3678dc3d156fda667b93314a7bc49" translate="yes" xml:space="preserve">
          <source>Test files may also have &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;afterEach&lt;/code&gt; blocks, which will be run before or after each &lt;code&gt;it&lt;/code&gt; block regardless of whether the block passes or fails.</source>
          <target state="translated">テストファイルも持っているかもしれ &lt;code&gt;beforeEach&lt;/code&gt; と &lt;code&gt;afterEach&lt;/code&gt; 前に実行されるブロックを、またはそれぞれの後に &lt;code&gt;it&lt;/code&gt; 関係なく、ブロックが成功したか失敗したかのブロック。</target>
        </trans-unit>
        <trans-unit id="96975959ea5e2bafaba38be5453d1411f8d89f35" translate="yes" xml:space="preserve">
          <source>Test using your keyboard to ensure &lt;code&gt;tabindex&lt;/code&gt; is used correctly.</source>
          <target state="translated">キーボードを使用してテストし、 &lt;code&gt;tabindex&lt;/code&gt; が正しく使用されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="1b0fcdbdca53eb09810029462dfa1eb106aa1e6a" translate="yes" xml:space="preserve">
          <source>Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.</source>
          <target state="translated">テスト可能性の話。ユニットテスト、エンドツーエンドテスト、モック、テストハーネス。</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="a3634a65dd330502bee5446e899329476bf7ded2" translate="yes" xml:space="preserve">
          <source>Testing Controllers</source>
          <target state="translated">テストコントローラ</target>
        </trans-unit>
        <trans-unit id="489b1748777814ce6ed91bbe7be089fedb156bb8" translate="yes" xml:space="preserve">
          <source>Testing Directives</source>
          <target state="translated">テストディレクティブ</target>
        </trans-unit>
        <trans-unit id="0ca51773188a324ba6500b945a5b499260a7faf7" translate="yes" xml:space="preserve">
          <source>Testing Directives With External Templates</source>
          <target state="translated">外部テンプレートを使用したディレクティブのテスト</target>
        </trans-unit>
        <trans-unit id="30e8834d5ca8918b8670c01a844e8692c7dd9722" translate="yes" xml:space="preserve">
          <source>Testing Filters</source>
          <target state="translated">テストフィルタ</target>
        </trans-unit>
        <trans-unit id="d231a55e7832988803b4830706f5cb4b4b35b05a" translate="yes" xml:space="preserve">
          <source>Testing Promises</source>
          <target state="translated">テストの約束</target>
        </trans-unit>
        <trans-unit id="33850105e908659abbaf812bf8e3ec66054d9c44" translate="yes" xml:space="preserve">
          <source>Testing Transclusion Directives</source>
          <target state="translated">封入指令のテスト</target>
        </trans-unit>
        <trans-unit id="49e5ae7dd39e7997ba6bd0d5dbbae1d459e3b000" translate="yes" xml:space="preserve">
          <source>Testing a Controller</source>
          <target state="translated">コントローラのテスト</target>
        </trans-unit>
        <trans-unit id="973cdd8387cb5fb2726eb68f3d034d82d78bcdc9" translate="yes" xml:space="preserve">
          <source>Testing custom filters</source>
          <target state="translated">カスタムフィルタのテスト</target>
        </trans-unit>
        <trans-unit id="d598eb7ac32708a825be100c99438a02348d3b2c" translate="yes" xml:space="preserve">
          <source>Testing with Screen Readers</source>
          <target state="translated">スクリーンリーダーでのテスト</target>
        </trans-unit>
        <trans-unit id="b685209d970c5dca203550b5a554b7a8f8925e69" translate="yes" xml:space="preserve">
          <source>Testing with the $location service</source>
          <target state="translated">ロケーションサービスでのテスト</target>
        </trans-unit>
        <trans-unit id="9df5706daf3eb9fa0be21aa54c6b83ea15bfa489" translate="yes" xml:space="preserve">
          <source>Text input that converts between a delimited string and an array of strings. The default delimiter is a comma followed by a space - equivalent to &lt;code&gt;ng-list=&quot;, &quot;&lt;/code&gt;. You can specify a custom delimiter as the value of the &lt;code&gt;ngList&lt;/code&gt; attribute - for example, &lt;code&gt;ng-list=&quot; | &quot;&lt;/code&gt;.</source>
          <target state="translated">区切られた文字列と文字列の配列の間で変換するテキスト入力。デフォルトの区切り文字は、カンマとそれに続くスペースです &lt;code&gt;ng-list=&quot;, &quot;&lt;/code&gt; と同等です。 &lt;code&gt;ng-list=&quot; | &quot;&lt;/code&gt; ように、 &lt;code&gt;ngList&lt;/code&gt; 属性の値としてカスタム区切り文字を指定できます。</target>
        </trans-unit>
        <trans-unit id="08499f5592515b6194a97fbdd3387f4effbc7ce9" translate="yes" xml:space="preserve">
          <source>Text input with URL validation. Sets the &lt;code&gt;url&lt;/code&gt; validation error key if the content is not a valid URL.</source>
          <target state="translated">URL検証を伴うテキスト入力。コンテンツが有効なURLでない場合に、 &lt;code&gt;url&lt;/code&gt; 検証エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="27b22ecdeb87e60f4c405bde495d52596c540982" translate="yes" xml:space="preserve">
          <source>Text input with email validation. Sets the &lt;code&gt;email&lt;/code&gt; validation error key if not a valid email address.</source>
          <target state="translated">電子メール検証を伴うテキスト入力。有効な電子メールアドレスでない場合は、 &lt;code&gt;email&lt;/code&gt; 検証エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="f0293e8e598a3e16d759932f3d09e6fa1eeac46e" translate="yes" xml:space="preserve">
          <source>Text input with number validation and transformation. Sets the &lt;code&gt;number&lt;/code&gt; validation error if not a valid number.</source>
          <target state="translated">数値の検証と変換を伴うテキスト入力。有効な番号でない場合は、 &lt;code&gt;number&lt;/code&gt; 検証エラーを設定します。</target>
        </trans-unit>
        <trans-unit id="1de6246c79ca810bc64260eac8505e55ffa2a6d4" translate="yes" xml:space="preserve">
          <source>That means attributes that contain AngularJS expressions will not be merged correctly, e.g. &lt;a href=&quot;../directive/ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../directive/ngclass&quot;&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; will cause a &lt;a href=&quot;%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; error:</source>
          <target state="translated">つまり、AngularJS式を含む属性は正しくマージされません。たとえば、&lt;a href=&quot;../directive/ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../directive/ngclass&quot;&gt; &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt;エラーを引き起こします。</target>
        </trans-unit>
        <trans-unit id="299f0c661d116cd8b3572b55171d60d4570639bc" translate="yes" xml:space="preserve">
          <source>That means the model for range will immediately be set to &lt;code&gt;50&lt;/code&gt; after &lt;code&gt;ngModel&lt;/code&gt; has been initialized. It also means a range input can never have the required error.</source>
          <target state="translated">つまり、範囲のモデルは、 &lt;code&gt;ngModel&lt;/code&gt; が初期化された直後に &lt;code&gt;50&lt;/code&gt; に設定されます。また、範囲入力で必要なエラーが発生することはありません。</target>
        </trans-unit>
        <trans-unit id="63ff583fb8237c8281eac9d6f606315184bc7596" translate="yes" xml:space="preserve">
          <source>That said, here's how you can completely disable SCE:</source>
          <target state="translated">そうは言っても、SCEを完全に無効にする方法は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f81198efd6db57b92b02b30cb7fceaac517d9ab6" translate="yes" xml:space="preserve">
          <source>That way, the parent component can decide what to do with the event (e.g. delete an item or update the properties)</source>
          <target state="translated">このようにして、親コンポーネントはイベントをどうするかを決めることができます (例:アイテムを削除したり、プロパティを更新したり)。</target>
        </trans-unit>
        <trans-unit id="6d3eac5bdaa666af92d76d51293ca60310104f3a" translate="yes" xml:space="preserve">
          <source>The $animate service exposes a series of DOM utility methods that provide support for animation hooks. The default behavior is the application of DOM operations, however, when an animation is detected (and animations are enabled), $animate will do the heavy lifting to ensure that animation runs with the triggered DOM operation.</source>
          <target state="translated">animate サービスは、アニメーションフックをサポートする一連の DOM ユーティリティメソッドを公開しています。デフォルトの動作は DOM 操作の適用ですが、アニメーションが検出されると (そしてアニメーションが有効になると)、$animate は DOM 操作をトリガーにしてアニメーションが実行されるように力仕事をします。</target>
        </trans-unit>
        <trans-unit id="194ce6e5460bfe72c3c1a681cca76c42c501ccf1" translate="yes" xml:space="preserve">
          <source>The $aria service contains helper methods for applying common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; attributes to HTML directives.</source>
          <target state="translated">$ ariaサービスには、一般的な&lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt;属性をHTMLディレクティブに適用するためのヘルパーメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="79a3614e75ea8477458c58fc75048cc9539f46a2" translate="yes" xml:space="preserve">
          <source>The $aria service contains helper methods for applying common &lt;a href=&quot;https://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; attributes to HTML directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57c4d3a5ab359e3a229c47a0ef2546a3f21789d" translate="yes" xml:space="preserve">
          <source>The $http API is based on the &lt;a href=&quot;%24q&quot;&gt;deferred/promise APIs&lt;/a&gt; exposed by the $q service. While for simple usage patterns this doesn't matter much, for advanced usage it is important to familiarize yourself with these APIs and the guarantees they provide.</source>
          <target state="translated">$ http APIは、$ qサービスによって公開された&lt;a href=&quot;%24q&quot;&gt;遅延/約束APIに&lt;/a&gt;基づいています。単純な使用パターンの場合、これはそれほど重要ではありませんが、高度な使用の場合、これらのAPIとそれらが提供する保証について理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="2b2c3423145ce27da91640721fecef8829429447" translate="yes" xml:space="preserve">
          <source>The $http service will automatically add certain HTTP headers to all requests. These defaults can be fully configured by accessing the &lt;code&gt;$httpProvider.defaults.headers&lt;/code&gt; configuration object, which currently contains this default configuration:</source>
          <target state="translated">$ httpサービスは、すべてのリクエストに特定のHTTPヘッダーを自動的に追加します。これらのデフォルトは、現在このデフォルト構成が含まれている &lt;code&gt;$httpProvider.defaults.headers&lt;/code&gt; 構成オブジェクトにアクセスすることで完全に構成できます。</target>
        </trans-unit>
        <trans-unit id="45025861cb09f44ceaf83405ae60d5eb6215c5e2" translate="yes" xml:space="preserve">
          <source>The $httpBackend used in production always responds to requests asynchronously. If we preserved this behavior in unit testing, we'd have to create async unit tests, which are hard to write, to follow and to maintain. But neither can the testing mock respond synchronously; that would change the execution of the code under test. For this reason, the mock $httpBackend has a &lt;code&gt;flush()&lt;/code&gt; method, which allows the test to explicitly flush pending requests. This preserves the async api of the backend, while allowing the test to execute synchronously.</source>
          <target state="translated">本番環境で使用される$ httpBackendは常に非同期でリクエストに応答します。ユニットテストでこの動作を維持する場合、非同期ユニットテストを作成する必要があります。これは、記述、追跡、維持が困難です。しかし、テストモックは同期的に応答できません。テスト中のコードの実行を変更します。このため、モック$ httpBackendには &lt;code&gt;flush()&lt;/code&gt; メソッドがあり、テストにより保留中の要求を明示的にフラッシュできます。これにより、バックエンドの非同期APIが保持され、同時にテストを同期的に実行できます。</target>
        </trans-unit>
        <trans-unit id="c1ea52ec168329f434923efb4ce5bc2ed84b4d58" translate="yes" xml:space="preserve">
          <source>The $inject property</source>
          <target state="translated">インジェクションプロパティ</target>
        </trans-unit>
        <trans-unit id="0503642384b0b90b167ab28e9af91eadecde392c" translate="yes" xml:space="preserve">
          <source>The $location service parses the URL in the browser address bar (based on the &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;window.location&lt;/a&gt;) and makes the URL available to your application. Changes to the URL in the address bar are reflected into $location service and changes to $location are reflected into the browser address bar.</source>
          <target state="translated">$ locationサービスは（&lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;window.locationに&lt;/a&gt;基づいて）ブラウザーのアドレスバーのURLを解析し、アプリケーションでURLを利用できるようにします。アドレスバーのURLの変更は$ locationサービスに反映され、$ locationの変更はブラウザーのアドレスバーに反映されます。</target>
        </trans-unit>
        <trans-unit id="b6de8f379ab401c8464aeb1b0f6a5f2ef4eea6d3" translate="yes" xml:space="preserve">
          <source>The $sceProvider provider allows developers to configure the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce&lt;/a&gt; service.</source>
          <target state="translated">$ sceProviderプロバイダは、開発者が設定することができます&lt;a href=&quot;../service/%24sce&quot;&gt;$のSCEの&lt;/a&gt;サービスを。</target>
        </trans-unit>
        <trans-unit id="42ac23357ad542fec9521b16840bf6f2a84458b8" translate="yes" xml:space="preserve">
          <source>The $sceProvider provider allows developers to configure the &lt;a href=&quot;service/%24sce&quot;&gt;$sce&lt;/a&gt; service.</source>
          <target state="translated">$ sceProviderプロバイダは、開発者が設定することができます&lt;a href=&quot;service/%24sce&quot;&gt;$のSCEの&lt;/a&gt;サービスを。</target>
        </trans-unit>
        <trans-unit id="7103c027a5428b05f3dc7b063e771e4fb90302b6" translate="yes" xml:space="preserve">
          <source>The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the directive's element. These local properties are useful for aliasing values for templates. The keys in the object hash map to the name of the property on the isolate scope; the values define how the property is bound to the parent scope, via matching attributes on the directive's element:</source>
          <target state="translated">isolate' スコープオブジェクトハッシュは、ディレクティブの要素の属性から派生したローカルなスコーププロパティのセットを定義します。これらのローカルプロパティは、テンプレートの値をエイリアス化するのに便利です。オブジェクトハッシュのキーはアイソレートスコープのプロパティの名前に対応し、値はディレクティブの要素の属性にマッチすることで、 プロパティがどのように親スコープにバインドされるかを定義します。</target>
        </trans-unit>
        <trans-unit id="b481cf5410b28b29fd4afeb84f24ebbec4ae8d39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;../../ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24provide&quot;&gt;$提供&lt;/a&gt;サービスとコンポーネントを登録するための多くの方法がある&lt;a href=&quot;%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。これらの関数の多くは、&lt;a href=&quot;../../ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;でも公開されています。</target>
        </trans-unit>
        <trans-unit id="c958fdaf4a8310848ce8c43ab113c9e38a864741" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24rootscope.scope&quot;&gt;&lt;code&gt;Scope&lt;/code&gt;&lt;/a&gt; that will be the &lt;code&gt;$parent&lt;/code&gt; of the newly created scope. Defaults to &lt;code&gt;this&lt;/code&gt; scope if not provided. This is used when creating a transclude scope to correctly place it in the scope hierarchy while maintaining the correct prototypical inheritance.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;/a&gt;となります &lt;code&gt;$parent&lt;/code&gt; 新しく作成されたスコープの。指定しない場合、デフォルトで &lt;code&gt;this&lt;/code&gt; スコープになります。これは、transcludeスコープを作成して、正しいプロトタイプの継承を維持しながらスコープ階層に正しく配置するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="5088c796c076c5afc03301480e93c045f4daa1f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watch&lt;/a&gt; listeners are fired immediately after the expression was executed using the &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;ウォッチ&lt;/a&gt;式が使用して実行された後にリスナーがすぐに解雇されている&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ダイジェスト（）&lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="e4efeed9dc1586cac88ab933a39d0104121705c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is executed using the &lt;a href=&quot;%24rootscope.scope#%24eval.html&quot;&gt;$eval()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt;使用して実行された&lt;a href=&quot;%24rootscope.scope#%24eval.html&quot;&gt;の$のeval（）&lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="3ba3a2e2a0f8ebb24ca8e23616e9111644536337" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/auto/service/%24provide#decorator.html&quot;&gt;decorator function&lt;/a&gt; allows access to a $delegate of the service once it has been instantiated. For example:</source>
          <target state="translated">&lt;a href=&quot;../api/auto/service/%24provide#decorator.html&quot;&gt;デコレータ機能は&lt;/a&gt;、それがインスタンス化された後のサービスの$デリゲートへのアクセスを可能にします。例えば：</target>
        </trans-unit>
        <trans-unit id="7eca4eaa295e01dc7c0723c82ed981b7f3a91d32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt; directive captures the change to the input's value and calls &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(&quot;name = 'X';&quot;)&lt;/code&gt; to update the application model inside the AngularJS execution context.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/input&quot;&gt;入力&lt;/a&gt;ディレクティブキャプチャ入力の値に変更し、呼び出します&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$が適用されます&lt;/a&gt; &lt;code&gt;(&quot;name = 'X';&quot;)&lt;/code&gt; AngularJSの実行コンテキスト内のアプリケーション・モデルを更新します。</target>
        </trans-unit>
        <trans-unit id="daeecc13c816cd15919cf3da0b745b55933dea25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/nghide&quot;&gt;ngHide&lt;/a&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngHide&lt;/code&gt; attribute. The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/nghide&quot;&gt;ngHide&lt;/a&gt;ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngHide&lt;/code&gt; の属性。要素は、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスを要素から削除または追加することによって表示または非表示になります。</target>
        </trans-unit>
        <trans-unit id="099b35bc2962fc88ae182201bfacdefb00ca7545" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/ngshow&quot;&gt;ngShow&lt;/a&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngShow&lt;/code&gt; attribute. The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngshow&quot;&gt;ngShow&lt;/a&gt;ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngShow&lt;/code&gt; の属性。要素は、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスを要素から削除または追加することによって表示または非表示になります。</target>
        </trans-unit>
        <trans-unit id="023460bb941f1035ef2c9715c8324ebe5039ac36" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page has a comprehensive list of directive options for reference.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; APIの&lt;/a&gt;ページには、参照用のディレクティブのオプションの包括的なリストを持っています。</target>
        </trans-unit>
        <trans-unit id="17a7fe7a9777db0b00b17b0cd4aa74010089b038" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt; is created during the application bootstrap by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. During template linking, some directives create new child scopes.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;ルートスコープを&lt;/a&gt;して、アプリケーションのブートストラップ中に作成された&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;$インジェクタ&lt;/a&gt;。テンプレートのリンク中に、いくつかのディレクティブは新しい子スコープを作成します。</target>
        </trans-unit>
        <trans-unit id="31494439d03e42dc5ca98a549ea110584d3df564" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop begins</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ダイジェスト&lt;/a&gt;ループが始まります</target>
        </trans-unit>
        <trans-unit id="380271a2fc3493b42bb9da3a0d80b696156b42a1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue is used to schedule work which needs to occur outside of current stack frame, but before the browser's view render. This is usually done with &lt;code&gt;setTimeout(0)&lt;/code&gt;, but the &lt;code&gt;setTimeout(0)&lt;/code&gt; approach suffers from slowness and may cause view flickering since the browser renders the view after each event.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsyncの&lt;/a&gt;キューは、現在のスタックフレームの外側に発生する必要があるスケジュールの作業に使用されるが、ブラウザの表示の前にレンダリングされます。通常、これは &lt;code&gt;setTimeout(0)&lt;/code&gt; で行われますが、 &lt;code&gt;setTimeout(0)&lt;/code&gt; のアプローチは速度が低下し、ブラウザが各イベントの後にビューをレンダリングするため、ビューのちらつきを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="459cfb582917d3376b9b43d01c4c6cb22284ba08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list detects a change on the &lt;code&gt;name&lt;/code&gt; property and notifies the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;interpolation&lt;/a&gt;, which in turn updates the DOM.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$のウォッチ&lt;/a&gt;リストには、上の変化を検知 &lt;code&gt;name&lt;/code&gt; プロパティと通知&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;補間&lt;/a&gt;順番にDOMを更新し、。</target>
        </trans-unit>
        <trans-unit id="547ef40c765ee6d2de24aad2fe611a70120f6eb2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list is a set of expressions which may have changed since last iteration. If a change is detected then the &lt;code&gt;$watch&lt;/code&gt; function is called which typically updates the DOM with the new value.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$のウォッチ&lt;/a&gt;リストには、最後の繰り返し以降に変更されたかもしれ式のセットです。変更が検出された場合、 &lt;code&gt;$watch&lt;/code&gt; 関数が呼び出され、通常、DOMを新しい値で更新します。</target>
        </trans-unit>
        <trans-unit id="cb49f0f51e19995f158a11d48d6f7dc556ba8c2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;Module&lt;/a&gt; API</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールの&lt;/a&gt; API</target>
        </trans-unit>
        <trans-unit id="41a35f6d62c6e21e8506f4e777c40bbfb88db54d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module API&lt;/a&gt; describes all the available methods and how they can be used.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールのAPIは&lt;/a&gt;、すべての利用可能な方法を説明し、それらがどのように使用することができます。</target>
        </trans-unit>
        <trans-unit id="10eea8f5fb8fe932631820e37257ff6183f4e46e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/a&gt; method accepts a function, which can be injected with &quot;providers&quot; and &quot;constants&quot; as dependencies. Note that you cannot inject &quot;services&quot; or &quot;values&quot; into configuration.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;config&lt;/code&gt; &lt;/a&gt;方法は、「プロバイダ」と依存関係として「定数」を注入することができる機能を受け付けます。「サービス」または「値」を構成に挿入できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0116235f6dcddbbe9019dacd62ffd604839fb3d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#provider.html&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; method can only be injected with other &quot;providers&quot;. However, only those that have been &lt;strong&gt;registered beforehand&lt;/strong&gt; can be injected. This is different from services, where the order of registration does not matter.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#provider.html&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;方法は、他の唯一の「プロバイダ」を注入することができます。ただし、&lt;strong&gt;事前に登録&lt;/strong&gt;さ&lt;strong&gt;れ&lt;/strong&gt;ているもののみ注入できます。これは、登録の順序が重要ではないサービスとは異なります。</target>
        </trans-unit>
        <trans-unit id="6f4613cc7644c093ce085f5bce14a14217368e32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method accepts a function, which can be injected with &quot;services&quot;, &quot;values&quot; and, &quot;constants&quot; as dependencies. Note that you cannot inject &quot;providers&quot; into &lt;code&gt;run&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt; &lt;code&gt;run&lt;/code&gt; &lt;/a&gt;方法は、依存関係として、「サービス」、「値」と、「定数」を注入することができる機能を受け付けます。「プロバイダー」を &lt;code&gt;run&lt;/code&gt; ブロックに挿入できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f60093769cb487082aa81cbfc58344c3fdafd53b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider#resourceUrlWhitelist()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider#resourceUrlBlacklist()&lt;/a&gt; can be used to restrict trusted origins for &lt;code&gt;RESOURCE_URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider＃resourceUrlWhitelist（）&lt;/a&gt;と&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider＃resourceUrlBlacklist（）&lt;/a&gt;のための信頼できる起源を制限するために使用することができ &lt;code&gt;RESOURCE_URL&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="d089b904853aaa231d1655d29dd2b323330e9820" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$sceDelegateProvider#trustedResourceUrlList()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$sceDelegateProvider#bannedResourceUrlList()&lt;/a&gt; can be used to restrict trusted origins for &lt;code&gt;RESOURCE_URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$ sceDelegateProvider＃trustedResourceUrlList（）&lt;/a&gt;と&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$ sceDelegateProvider＃bannedResourceUrlList（）&lt;/a&gt;のための信頼できる起源を制限するために使用することができ &lt;code&gt;RESOURCE_URL&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="e57e36fbb37332cf011f553838650abc7402b8fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24controller&quot;&gt;$controller service&lt;/a&gt; is used by AngularJS to create new controllers.</source>
          <target state="translated">&lt;a href=&quot;../service/%24controller&quot;&gt;$コントローラサービスは、&lt;/a&gt;新しいコントローラを作成するためにAngularJSで使用されています。</target>
        </trans-unit>
        <trans-unit id="1ccfed984f77c3facd3ea386d04c4a3fa1113f93" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; security context in which this value is safe for use, e.g. &lt;code&gt;$sce.URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;この値は、使用しても安全であるセキュリティコンテキスト、例えば &lt;code&gt;$sce.URL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fddcb39aa4dd12d545d29507700d006bc1fa117" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24templaterequest&quot;&gt;&lt;code&gt;$templateRequest&lt;/code&gt;&lt;/a&gt; will set the &lt;code&gt;cache&lt;/code&gt; and the &lt;code&gt;transformResponse&lt;/code&gt; properties of the options if not overridden here.</source>
          <target state="translated">&lt;a href=&quot;../service/%24templaterequest&quot;&gt; &lt;code&gt;$templateRequest&lt;/code&gt; &lt;/a&gt;設定されます &lt;code&gt;cache&lt;/code&gt; と &lt;code&gt;transformResponse&lt;/code&gt; のここでオーバーライドされない場合のオプションのプロパティを。</target>
        </trans-unit>
        <trans-unit id="3b52d2c0db8ddb52d6065d6884d9ec3ff16c1a2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../type/%24compile.directive.attributes&quot;&gt;Attributes&lt;/a&gt; object - passed as a parameter in the &lt;code&gt;link()&lt;/code&gt; or &lt;code&gt;compile()&lt;/code&gt; functions. It has a variety of uses.</source>
          <target state="translated">&lt;a href=&quot;../type/%24compile.directive.attributes&quot;&gt;属性&lt;/a&gt;オブジェクト-パラメータとして渡された &lt;code&gt;link()&lt;/code&gt; または &lt;code&gt;compile()&lt;/code&gt; 関数。さまざまな用途があります。</target>
        </trans-unit>
        <trans-unit id="1c2882ae56c5aa4de1a459527df88cd51d7a6ebc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../type/select.selectcontroller&quot;&gt;select controller&lt;/a&gt; exposes utility functions that can be used to manipulate the select's behavior.</source>
          <target state="translated">&lt;a href=&quot;../type/select.selectcontroller&quot;&gt;選択コントローラは、&lt;/a&gt;の選択行動を操作するために使用することができるユーティリティ機能を公開します。</target>
        </trans-unit>
        <trans-unit id="a54d6f95f373a13b94118214c60e9abb5b97f0fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;auto/service/%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;auto/service/%24provide&quot;&gt;$提供&lt;/a&gt;サービスとコンポーネントを登録するための多くの方法がある&lt;a href=&quot;auto/service/%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。これらの関数の多くは、&lt;a href=&quot;ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;でも公開されています。</target>
        </trans-unit>
        <trans-unit id="8d8ecbb875bfc81cc1d784ea21af391f75efbeda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;service/%24controller&quot;&gt;$controller service&lt;/a&gt; is used by AngularJS to create new controllers.</source>
          <target state="translated">&lt;a href=&quot;service/%24controller&quot;&gt;$コントローラサービスは、&lt;/a&gt;新しいコントローラを作成するためにAngularJSで使用されています。</target>
        </trans-unit>
        <trans-unit id="c6adbd4ea5d389ae62682a2aaa97a7e0b9ee7f80" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;service/%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;service/%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;../ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service/%24provide&quot;&gt;$提供&lt;/a&gt;サービスとコンポーネントを登録するための多くの方法がある&lt;a href=&quot;service/%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。これらの関数の多くは、&lt;a href=&quot;../ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;でも公開されています。</target>
        </trans-unit>
        <trans-unit id="a51ae40b8d9116e59242ac1c80711016fb25393e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animate&lt;/code&gt; service contains a variety of other methods like &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, &lt;code&gt;animate&lt;/code&gt; and &lt;code&gt;setClass&lt;/code&gt;. To learn more about what's possible be sure to visit the &lt;a href=&quot;ng/service/%24animate&quot;&gt;$animate service API page&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; サービスのような他の様々な方法が含ま &lt;code&gt;enter&lt;/code&gt; 、 &lt;code&gt;leave&lt;/code&gt; 、 &lt;code&gt;animate&lt;/code&gt; や &lt;code&gt;setClass&lt;/code&gt; を。可能なことの詳細については、&lt;a href=&quot;ng/service/%24animate&quot;&gt;$ animateサービスAPIページ&lt;/a&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="c0bea680af2ac70347d61de64353e3076449e907" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animateCss&lt;/code&gt; service is a useful utility to trigger customized CSS-based transitions/keyframes from a JavaScript-based animation or directly from a directive. The purpose of &lt;code&gt;$animateCss&lt;/code&gt; is NOT to side-step how &lt;code&gt;$animate&lt;/code&gt; and ngAnimate work, but the goal is to allow pre-existing animations or directives to create more complex animations that can be purely driven using CSS code.</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; サービスは、JavaScriptベースのアニメーションから、または直接指令からのトリガーにカスタマイズCSSベースのトランジション/キーフレームに便利なユーティリティです。 &lt;code&gt;$animateCss&lt;/code&gt; の目的は、$ &lt;code&gt;$animate&lt;/code&gt; とngAnimateの動作を回避することではありませんが、既存のアニメーションまたはディレクティブがCSSコードを使用して純粋に駆動できるより複雑なアニメーションを作成できるようにすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="a03d56b080753b701e1c124e274f1ac0aef66661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animateCss&lt;/code&gt; service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that data into &lt;code&gt;$animateCss&lt;/code&gt; directly:</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; 我々はCSSトランジションやキーフレームアニメーションに評価され、供給される余分な性質のすべての種類にフィードすることができますので、サービスは非常に強力です。たとえば、クラスを追加および削除するときに要素の高さをアニメーション化したい場合は、そのデータを &lt;code&gt;$animateCss&lt;/code&gt; 直接提供することで実行できます。</target>
        </trans-unit>
        <trans-unit id="c565a783926b4bfbda231d32dea91b35841ba214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$delegate&lt;/code&gt; may be either modified or completely replaced. Given a service &lt;code&gt;myService&lt;/code&gt; with a method &lt;code&gt;someFn&lt;/code&gt;, the following could all be viable solutions:</source>
          <target state="translated">&lt;code&gt;$delegate&lt;/code&gt; いずれかの変更または完全に置き換えることができます。 &lt;code&gt;someFn&lt;/code&gt; メソッドを持つサービス &lt;code&gt;myService&lt;/code&gt; が与えられた場合、以下はすべて実行可能なソリューションになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7fa11b953380784747a398f9fa8e3b039546e90d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$destroy()&lt;/code&gt; is usually used by directives such as &lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; for managing the unrolling of the loop.</source>
          <target state="translated">&lt;code&gt;$destroy()&lt;/code&gt; 通常のようなディレクティブで使用されている&lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;ループの展開を管理するため。</target>
        </trans-unit>
        <trans-unit id="e8334db42df3d0d08b39dade993ce0000f4dc06c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$evalAsync&lt;/code&gt; makes no guarantees as to when the &lt;code&gt;expression&lt;/code&gt; will be executed, only that:</source>
          <target state="translated">&lt;code&gt;$evalAsync&lt;/code&gt; ときに保証しません &lt;code&gt;expression&lt;/code&gt; 、唯一のことを実行されます。</target>
        </trans-unit>
        <trans-unit id="6b4e06ea9ef5ed5d40f568dbe2841a85a3b6fe3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a core AngularJS service that facilitates communication with the remote HTTP servers via the browser's &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/a&gt; object or via &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; サービスは、ブラウザのHTTP経由でリモートサーバとの通信を容易にコアAngularJSサービスで&lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;のXMLHttpRequest&lt;/a&gt;オブジェクトまたは経由&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="269f9de3b56f226ca44fc9a937b15e027fabab41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a core AngularJS service that facilitates communication with the remote HTTP servers via the browser's &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/a&gt; object or via &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7211e0b83ff36dcc386a0602ced9ab19495d96ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a function which takes a single argument &amp;mdash; a &lt;a href=&quot;%24http#usage.html&quot;&gt;configuration object&lt;/a&gt; &amp;mdash; that is used to generate an HTTP request and returns a &lt;a href=&quot;%24q&quot;&gt;promise&lt;/a&gt; that is resolved (request success) or rejected (request failure) with a &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;response&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; -サービスは、単一の引数を取る関数である&lt;a href=&quot;%24http#usage.html&quot;&gt;構成オブジェクト&lt;/a&gt; - HTTPリクエストとリターンを生成するために使用される&lt;a href=&quot;%24q&quot;&gt;約束&lt;/a&gt;で解決される（要求成功）または拒否（リクエストの失敗）&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;応答&lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="dd9167ac243a709e0bca1e4df418f519c2a08ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$httpProvider&lt;/code&gt; provider and &lt;code&gt;$http&lt;/code&gt; service expose &lt;code&gt;defaults.transformRequest&lt;/code&gt; and &lt;code&gt;defaults.transformResponse&lt;/code&gt; properties. If a request does not provide its own transformations then these will be applied.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; プロバイダと &lt;code&gt;$http&lt;/code&gt; サービスが公開 &lt;code&gt;defaults.transformRequest&lt;/code&gt; と &lt;code&gt;defaults.transformResponse&lt;/code&gt; プロパティを。リクエストが独自の変換を提供しない場合、これらが適用されます。</target>
        </trans-unit>
        <trans-unit id="1bc7ca8fb85381885e5cddb9a6542ad259fdb423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service allows you to change only the URL; it does not allow you to reload the page. When you need to change the URL and reload the page or navigate to a different page, please use a lower level API, &lt;a href=&quot;../api/ng/service/%24window&quot;&gt;$window.location.href&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスは、あなただけのURLを変更することができます。ページをリロードすることはできません。URLを変更してページを再読み込みするか、別のページに移動する必要がある場合は、下位レベルのAPI &lt;a href=&quot;../api/ng/service/%24window&quot;&gt;$ window.location.href&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="e98eb9ca822cf6facd0f8798305a215baf8cc63e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service can behave differently, depending on the configuration that was provided to it when it was instantiated. The default configuration is suitable for many applications, for others customizing the configuration can enable new features.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスは、それがインスタンス化されたとき、それに提供された構成に応じて、異なる動作をすることができます。デフォルトの構成は多くのアプリケーションに適しています。他の構成をカスタマイズすると、新しい機能を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1273172a4500d8d59c8a6787804ebe07e03ca23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service is not able to function properly if the current URL is outside the URL given as the base href. This can have subtle confusing consequences...</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; 現在のURLはベースのhrefとして与えられたURLの外にある場合、サービスが正常に機能することができません。これは微妙な混乱を招く結果になる可能性があります...</target>
        </trans-unit>
        <trans-unit id="a111a55f88592010648b78ca18b5cbbe04a7fd2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service parses the URL in the browser address bar (based on &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;&lt;code&gt;window.location&lt;/code&gt;&lt;/a&gt;) and makes the URL available to your application. Changes to the URL in the address bar are reflected into the &lt;code&gt;$location&lt;/code&gt; service and changes to &lt;code&gt;$location&lt;/code&gt; are reflected into the browser address bar.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスは、（に基づいて、ブラウザのアドレスバーにURLを解析し&lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt; &lt;code&gt;window.location&lt;/code&gt; の&lt;/a&gt;）とアプリケーションへのURLが利用できるようになります。アドレスバーのURLの変更はに反映されている &lt;code&gt;$location&lt;/code&gt; サービスとの変更 &lt;code&gt;$location&lt;/code&gt; 、ブラウザのアドレスバーに反映されます。</target>
        </trans-unit>
        <trans-unit id="f3824a56f15e043a5ac5fc5b11da473e44a6bfcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$parent&lt;/code&gt; scope hierarchy will look like this:</source>
          <target state="translated">&lt;code&gt;$parent&lt;/code&gt; スコープの階層は次のようになります。</target>
        </trans-unit>
        <trans-unit id="74392e585ce418fdbe387023a7bc76feedbc98eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$render()&lt;/code&gt; method is invoked in the following situations:</source>
          <target state="translated">&lt;code&gt;$render()&lt;/code&gt; メソッドは、以下の状況で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="748473c254c46349d9420cbf71f6c951b161be97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$rollbackViewValue()&lt;/code&gt; method should be called before programmatically changing the model of an input which may have such events pending. This is important in order to make sure that the input field will be updated with the new model value and any pending operations are cancelled.</source>
          <target state="translated">&lt;code&gt;$rollbackViewValue()&lt;/code&gt; メソッドは、プログラム保留中のそのようなイベントを有していてもよい入力のモデルを変更する前に呼び出されるべきです。これは、入力フィールドが新しいモデル値で更新され、保留中の操作がキャンセルされるようにするために重要です。</target>
        </trans-unit>
        <trans-unit id="00575ac4870897520049b0cd931bb9fc73db40f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; service is typically used in conjunction with the &lt;a href=&quot;../directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt; directive and the &lt;a href=&quot;%24routeparams&quot;&gt;&lt;code&gt;$routeParams&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; サービスは、一般的に関連して使用される&lt;a href=&quot;../directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; の&lt;/a&gt;指令と&lt;a href=&quot;%24routeparams&quot;&gt; &lt;code&gt;$routeParams&lt;/code&gt; &lt;/a&gt;サービス。</target>
        </trans-unit>
        <trans-unit id="fee32557765392ce5aee69704d74ba53c1edb4c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$routeParams&lt;/code&gt; service allows you to retrieve the current set of route parameters.</source>
          <target state="translated">&lt;code&gt;$routeParams&lt;/code&gt; サービスを使用すると、ルート・パラメータの現在のセットを取得することができます。</target>
        </trans-unit>
        <trans-unit id="249f28ebcdfc9fc97bfd4fe0abe8f8ef006036c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; allows one to get/set the &lt;code&gt;trustedResourceUrlList&lt;/code&gt; and &lt;code&gt;bannedResourceUrlList&lt;/code&gt; used to ensure that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all places that use the &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context). See &lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/a&gt; and &lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/a&gt;,</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 1を設定/取得することができます &lt;code&gt;trustedResourceUrlList&lt;/code&gt; と &lt;code&gt;bannedResourceUrlList&lt;/code&gt; URLが調達AngularJSのテンプレートを使用することを保証するために使用し、他のスクリプト実行中のURLは（使用するすべての場所に安全である &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; コンテキストを）。&lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.trustedResourceUrlList&lt;/a&gt;および&lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.bannedResourceUrlListを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8781071a65d92453570f44077b23cbc8a7036841" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; allows one to get/set the whitelists and blacklists used to ensure that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all places that use the &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context). See &lt;a href=&quot;%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; and &lt;a href=&quot;%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/a&gt;,</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 可能にするもので取得する/ AngularJSテンプレートと他のスクリプト実行されているURLを調達するために使用されるURLは、（使用しているすべての場所で安全であることを確認するために使用ホワイトリストとブラックリスト設定 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; コンテキストを）。&lt;a href=&quot;%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt;および&lt;a href=&quot;%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider.resourceUrlBlacklistを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3cb7f040cc4a7a870371a7f21b9d9290406c26e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; provider allows developers to configure the &lt;a href=&quot;../service/%24scedelegate&quot;&gt;$sceDelegate service&lt;/a&gt;, used as a delegate for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; プロバイダは、開発者が設定することができます&lt;a href=&quot;../service/%24scedelegate&quot;&gt;$ sceDelegateサービス&lt;/a&gt;のための代理人として使用する、&lt;a href=&quot;../service/%24sce&quot;&gt;厳格なコンテキストエスケープ（SCE）を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2828ee5c9feb24539f91bb197e1ea8986016182b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; provider allows developers to configure the &lt;a href=&quot;service/%24scedelegate&quot;&gt;$sceDelegate service&lt;/a&gt;, used as a delegate for &lt;a href=&quot;service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; プロバイダは、開発者が設定することができます&lt;a href=&quot;service/%24scedelegate&quot;&gt;$ sceDelegateサービス&lt;/a&gt;のための代理人として使用する、&lt;a href=&quot;service/%24sce&quot;&gt;厳格なコンテキストエスケープ（SCE）を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e445a092071434cfc79d2388fc50b3e9f36f160c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$swipe&lt;/code&gt; service is a service that abstracts the messier details of hold-and-drag swipe behavior, to make implementing swipe-related directives more convenient.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; サービスが実装スワイプ関連のディレクティブをより便利にするために、ホールドアンドドラッグスワイプ動作のメシエ詳細を抽象化するサービスです。</target>
        </trans-unit>
        <trans-unit id="f91a72fa68c6440c52aac8a9f497ac80aeed6564" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$swipe&lt;/code&gt; service is an object with a single method: &lt;code&gt;bind&lt;/code&gt;. &lt;code&gt;bind&lt;/code&gt; takes an element which is to be watched for swipes, and an object with four handler functions. See the documentation for &lt;code&gt;bind&lt;/code&gt; below.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; サービスは、単一のメソッドを持つオブジェクトです： &lt;code&gt;bind&lt;/code&gt; 。 &lt;code&gt;bind&lt;/code&gt; は、スワイプを監視する要素と、4つのハンドラー関数を持つオブジェクトを取ります。以下の &lt;code&gt;bind&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b5319952640d19c5acb759330531d620f329eabf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$templateRequest&lt;/code&gt; service runs security checks then downloads the provided template using &lt;code&gt;$http&lt;/code&gt; and, upon success, stores the contents inside of &lt;code&gt;$templateCache&lt;/code&gt;. If the HTTP request fails or the response data of the HTTP request is empty, a &lt;code&gt;$compile&lt;/code&gt; error will be thrown (the exception can be thwarted by setting the 2nd parameter of the function to true). Note that the contents of &lt;code&gt;$templateCache&lt;/code&gt; are trusted, so the call to &lt;code&gt;$sce.getTrustedUrl(tpl)&lt;/code&gt; is omitted when &lt;code&gt;tpl&lt;/code&gt; is of type string and &lt;code&gt;$templateCache&lt;/code&gt; has the matching entry.</source>
          <target state="translated">&lt;code&gt;$templateRequest&lt;/code&gt; サービスを使用して提供されるテンプレートをダウンロードし、セキュリティチェックを実行します &lt;code&gt;$http&lt;/code&gt; して、成功すると、内部の内容を保存する &lt;code&gt;$templateCache&lt;/code&gt; 。 HTTP要求が失敗するか、HTTP要求の応答データが空の場合、 &lt;code&gt;$compile&lt;/code&gt; エラーがスローされます（関数の2番目のパラメーターをtrueに設定することで、例外を阻止できます）。 &lt;code&gt;$templateCache&lt;/code&gt; の内容は信頼できるため、 &lt;code&gt;tpl&lt;/code&gt; が文字列型であり、 &lt;code&gt;$templateCache&lt;/code&gt; に一致するエントリがある場合、 &lt;code&gt;$sce.getTrustedUrl(tpl)&lt;/code&gt; 呼び出しは省略されます。</target>
        </trans-unit>
        <trans-unit id="712bd1e1acaf74fe7cbf90ecba87fe6face76244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$watchCollection()&lt;/code&gt; method only does a shallow comparison, meaning that changing properties deeper than the first level of the object (or only changing the properties of an item in the collection if it's an array) will still not trigger a re-rendering of the model.</source>
          <target state="translated">&lt;code&gt;$watchCollection()&lt;/code&gt; メソッドは、オブジェクトの最初のレベルよりも深いプロパティを変更（または唯一のそれは配列だ場合は、コレクション内の項目のプロパティを変更すると）まだの再レンダリングを誘発しないことを意味し、浅い比較を行いますモデル。</target>
        </trans-unit>
        <trans-unit id="8fa620e1ea873250c0c6536085a6a95fbd5119d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChildController&lt;/code&gt; scope, which inherits the &lt;code&gt;timeOfDay&lt;/code&gt; property but overrides (shadows) the &lt;code&gt;name&lt;/code&gt; property from the previous scope</source>
          <target state="translated">&lt;code&gt;ChildController&lt;/code&gt; の継承スコープ、 &lt;code&gt;timeOfDay&lt;/code&gt; プロパティが、オーバーライド（影） &lt;code&gt;name&lt;/code&gt; 前範囲からプロパティを</target>
        </trans-unit>
        <trans-unit id="232bc31c989247be45c7d4ec698e7a3006c2d43e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GrandChildController&lt;/code&gt; scope, which overrides (shadows) both the &lt;code&gt;timeOfDay&lt;/code&gt; property defined in &lt;code&gt;MainController&lt;/code&gt; and the &lt;code&gt;name&lt;/code&gt; property defined in &lt;code&gt;ChildController&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;GrandChildController&lt;/code&gt; の範囲、オーバーライド（影）の両方 &lt;code&gt;timeOfDay&lt;/code&gt; に定義されたプロパティ &lt;code&gt;MainController&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; で定義されたプロパティ &lt;code&gt;ChildController&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1fce0d1067b76b0bfc8b85d495db07116c8dec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MainController&lt;/code&gt; scope, which contains &lt;code&gt;timeOfDay&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties</source>
          <target state="translated">&lt;code&gt;MainController&lt;/code&gt; 含まれているスコープ、 &lt;code&gt;timeOfDay&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; プロパティを</target>
        </trans-unit>
        <trans-unit id="b82674350733edf566c9e2b672ef64af568aedc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;angular.module&lt;/code&gt; is a global place for creating, registering and retrieving AngularJS modules. All modules (AngularJS core or 3rd party) that should be available to an application must be registered using this mechanism.</source>
          <target state="translated">&lt;code&gt;angular.module&lt;/code&gt; は AngularJSモジュールを作成、登録および取得するための世界的な場所です。アプリケーションで使用できるすべてのモジュール（AngularJSコアまたはサードパーティ）は、このメカニズムを使用して登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="5dd144d30c65ccfb0a381886f3f857204784293d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batchLog&lt;/code&gt; service depends on the built-in &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; services.</source>
          <target state="translated">&lt;code&gt;batchLog&lt;/code&gt; のサービスは、ビルトインに依存&lt;a href=&quot;../api/ng/service/%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../api/ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;サービス。</target>
        </trans-unit>
        <trans-unit id="9acc1d82e771c84e56a2cc9cc13cac46b6160703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function should be of the form &lt;code&gt;function(method, url, data, headers, params)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、フォームでなければならない &lt;code&gt;function(method, url, data, headers, params)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="893ff87e78144aa5e991cba13601bae634bf2bea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classNameFilter&lt;/code&gt; approach generally gives a big speed boost compared to other strategies, because the matching is done before other animation disabling strategies are checked. However, that also means it is not possible to override class name matching with the two following strategies. It's of course still possible to enable / disable animations by changing an element's class name at runtime.</source>
          <target state="translated">&lt;code&gt;classNameFilter&lt;/code&gt; の他のアニメーション無効にする戦略がチェックされる前に、マッチングが行われるためのアプローチは、一般的に、他の戦略に比べて大きな速度向上を提供します。ただし、これは、次の2つの方法でクラス名の一致をオーバーライドすることができないことも意味します。もちろん、実行時に要素のクラス名を変更することで、アニメーションを有効/無効にすることも可能です。</target>
        </trans-unit>
        <trans-unit id="e7b52fad4bbb0c12479cdb97dacb16c5cb6f4aa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;collection&lt;/code&gt; can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray, String, etc).</source>
          <target state="translated">&lt;code&gt;collection&lt;/code&gt; あってもよい配列または配列のようなオブジェクト（例えばのNodeList、jQueryオブジェクト、TypedArray、文字列など）。</target>
        </trans-unit>
        <trans-unit id="b98e8dbeb02a19a783fedcd70d85dd392c902b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;customFilter&lt;/code&gt; approach generally gives a big speed boost compared to other strategies, because the matching is done before other animation disabling strategies are checked.</source>
          <target state="translated">&lt;code&gt;customFilter&lt;/code&gt; 他のアニメーション無効にする戦略がチェックされる前に、マッチングが行われるためのアプローチは、一般的に、他の戦略に比べて大きな速度向上を提供します。</target>
        </trans-unit>
        <trans-unit id="c80e31bf8e54fc961845669be04ec6fa510022fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; attribute is only valid for certain elements such as &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly disable custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;taco-tab&amp;gt;&lt;/code&gt;, using ngAria with &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;ngDisabled&lt;/a&gt; will also add &lt;code&gt;aria-disabled&lt;/code&gt;. This tells assistive technologies when a non-native input is disabled, helping custom controls to be more accessible.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; 属性は、以下のような特定の要素に対してのみ有効で &lt;code&gt;button&lt;/code&gt; 、 &lt;code&gt;input&lt;/code&gt; および &lt;code&gt;textarea&lt;/code&gt; 。 &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;taco-tab&amp;gt;&lt;/code&gt; などのカスタム要素ディレクティブを適切に無効にするために、ngDisabledで&lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;ngAria&lt;/a&gt;を使用すると、 &lt;code&gt;aria-disabled&lt;/code&gt; も追加されます。これは、非ネイティブ入力が無効になったときに支援技術に通知し、カスタムコントロールへのアクセスを容易にします。</target>
        </trans-unit>
        <trans-unit id="73a17df2bf22fb6c2ce21c05fcc1b44e34b6fe00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorMessage.type&lt;/code&gt; expression can be a string value or it can be an array so that multiple errors can be associated with a single error message:</source>
          <target state="translated">&lt;code&gt;errorMessage.type&lt;/code&gt; の発現は、文字列の値であってもよく、またはそれは複数のエラーが単一のエラー・メッセージに関連付けることができるように配列することができます。</target>
        </trans-unit>
        <trans-unit id="3a084d6f8e7f8661441da4af1ad1123d1cab079d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expression&lt;/code&gt; can be a single predicate, or a list of predicates each serving as a tie-breaker for the preceding one. The &lt;code&gt;expression&lt;/code&gt; is evaluated against each item and the output is used for comparing with other items.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 、単一の述語、又は前述のいずれかのタイブレーカとして述語それぞれのリストとすることができます。 &lt;code&gt;expression&lt;/code&gt; 各項目に対して評価され、出力は、他のアイテムとの比較のために使用されます。</target>
        </trans-unit>
        <trans-unit id="4827e6198b9fbd54046fee18d3735c7ce7869d32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; returned by the filter</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; フィルタによって返されました</target>
        </trans-unit>
        <trans-unit id="b31dfae45c6272a242eb94f18bc49a0cd37a7b29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called only when the value from the current &lt;code&gt;watchExpression&lt;/code&gt; and the previous call to &lt;code&gt;watchExpression&lt;/code&gt; are not equal (with the exception of the initial run, see below). Inequality is determined according to reference inequality, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;strict comparison&lt;/a&gt; via the &lt;code&gt;!==&lt;/code&gt; Javascript operator, unless &lt;code&gt;objectEquality == true&lt;/code&gt; (see next point)</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 現在の値場合にのみ呼び出され &lt;code&gt;watchExpression&lt;/code&gt; と前回の呼び出し &lt;code&gt;watchExpression&lt;/code&gt; が等しくない（最初のランを除いて、以下を参照のこと）。不等式は参照不等式に従って決定されます &lt;code&gt;objectEquality == true&lt;/code&gt; でない限り、 &lt;code&gt;!==&lt;/code&gt; Javascript演算子による&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;厳密な比較&lt;/a&gt;（次のポイントを参照）</target>
        </trans-unit>
        <trans-unit id="8807537fbb401dd1e629d897344c84de2f17464f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called whenever any expression in the &lt;code&gt;watchExpressions&lt;/code&gt; array changes.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 呼び出されるたびにある任意の式 &lt;code&gt;watchExpressions&lt;/code&gt; の配列が変化します。</target>
        </trans-unit>
        <trans-unit id="0b25c0075e8777fbd279f21bd0bf438be12f4f71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called whenever anything within the &lt;code&gt;obj&lt;/code&gt; has changed. Examples include adding, removing, and moving items belonging to an object or array.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 内の何でもいつでも呼ばれる &lt;code&gt;obj&lt;/code&gt; が変更されました。例には、オブジェクトまたは配列に属するアイテムの追加、削除、および移動が含まれます。</target>
        </trans-unit>
        <trans-unit id="3707cb673ad1f5c4676860cc0d76731209d56e8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locals&lt;/code&gt; will be assigned to the route scope's &lt;code&gt;$resolve&lt;/code&gt; property. You can override the property name, using &lt;code&gt;resolveAs&lt;/code&gt; in the route definition. See &lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; 、ルートスコープのに割り当てられます &lt;code&gt;$resolve&lt;/code&gt; プロパティ。ルート定義で &lt;code&gt;resolveAs&lt;/code&gt; を使用して、プロパティ名をオーバーライドできます。詳細は&lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$ routeProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2de812b5c2a400526a9f2d7e6d5c07f7a7a6b8b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;myField&lt;/code&gt; field is a required input of type &lt;code&gt;email&lt;/code&gt; with a maximum length of 15 characters.</source>
          <target state="translated">&lt;code&gt;myField&lt;/code&gt; でのフィールドは、タイプの必須入力され &lt;code&gt;email&lt;/code&gt; 15文字の最大長。</target>
        </trans-unit>
        <trans-unit id="df09b75bb835a6f8dbfc3b5c620a1f2831ad4c30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;myPane&lt;/code&gt; directive has a &lt;code&gt;require&lt;/code&gt; option with value &lt;code&gt;^^myTabs&lt;/code&gt;. When a directive uses this option, &lt;code&gt;$compile&lt;/code&gt; will throw an error unless the specified controller is found. The &lt;code&gt;^^&lt;/code&gt; prefix means that this directive searches for the controller on its parents. (A &lt;code&gt;^&lt;/code&gt; prefix would make the directive look for the controller on its own element or its parents; without any prefix, the directive would look on its own element only.)</source>
          <target state="translated">&lt;code&gt;myPane&lt;/code&gt; のディレクティブは、持っている &lt;code&gt;require&lt;/code&gt; 値とオプションを &lt;code&gt;^^myTabs&lt;/code&gt; 。ディレクティブがこのオプションを使用する場合、指定されたコントローラーが見つからない限り、 &lt;code&gt;$compile&lt;/code&gt; はエラーをスローします。 &lt;code&gt;^^&lt;/code&gt; プレフィックス手段その親のコントローラについて、このディレクティブを検索しています。（接頭辞 &lt;code&gt;^&lt;/code&gt; を使用すると、ディレクティブは独自の要素またはその親でコントローラーを検索します。接頭辞がない場合、ディレクティブは独自の要素のみを検索します。）</target>
        </trans-unit>
        <trans-unit id="5f266c73961bf941532ed2e38f387525a710231e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newCollection&lt;/code&gt; object is the newly modified data obtained from the &lt;code&gt;obj&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;newCollection&lt;/code&gt; の対象から得られた新たに修正されたデータである &lt;code&gt;obj&lt;/code&gt; 式</target>
        </trans-unit>
        <trans-unit id="8256d15e8434b47b4f6b90d7e29c8ddf53567463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newState&lt;/code&gt; and &lt;code&gt;oldState&lt;/code&gt; parameters may be defined only in HTML5 mode and when the browser supports the HTML5 History API.</source>
          <target state="translated">&lt;code&gt;newState&lt;/code&gt; と &lt;code&gt;oldState&lt;/code&gt; パラメータは唯一のHTML5モードで定義することができ、ブラウザがHTML5履歴APIをサポートしている場合。</target>
        </trans-unit>
        <trans-unit id="ff9e70b2fe50b302f4f792c8e818eff77a6b534d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-controller&lt;/code&gt; directive is used to (implicitly) create a scope for our template, and the scope is augmented (managed) by the &lt;code&gt;SpicyController&lt;/code&gt; Controller.</source>
          <target state="translated">&lt;code&gt;ng-controller&lt;/code&gt; ディレクティブは（暗黙的に）私たちのテンプレートのスコープを作成するために使用され、その範囲はで（管理）強化されて &lt;code&gt;SpicyController&lt;/code&gt; コントローラ。</target>
        </trans-unit>
        <trans-unit id="e032bbd650a410d166e41a9966e6526f7d12c83e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAnimate&lt;/code&gt; module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via callback hooks. Animations are not enabled by default, however, by including &lt;code&gt;ngAnimate&lt;/code&gt; the animation hooks are enabled for an AngularJS app.</source>
          <target state="translated">&lt;code&gt;ngAnimate&lt;/code&gt; のモジュールは、コールバックフックを介してCSSベースのアニメーション（キーフレーム及び遷移）のサポート、ならびにJavaScriptベースのアニメーションを提供します。アニメーションはデフォルトでは有効になっていませんが、 &lt;code&gt;ngAnimate&lt;/code&gt; を含めると、AngularJSアプリでアニメーションフックが有効になります。</target>
        </trans-unit>
        <trans-unit id="e61f4e26cb454ca0b7dbd192ab2951d7e905b82e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAria&lt;/code&gt; module provides support for common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/a&gt; attributes that convey state or semantic information about the application for users of assistive technologies, such as screen readers.</source>
          <target state="translated">&lt;code&gt;ngAria&lt;/code&gt; のモジュールは、共通のサポートを提供する&lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIAの&lt;/abbr&gt;&lt;/a&gt;スクリーンリーダーなどの支援技術のユーザーのためのアプリケーションに関する状態又は意味論的情報を伝える属性。</target>
        </trans-unit>
        <trans-unit id="0b10c9711b0cc2fe270f015f52ccc10d5e822cc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAria&lt;/code&gt; module provides support for common &lt;a href=&quot;https://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/a&gt; attributes that convey state or semantic information about the application for users of assistive technologies, such as screen readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ff906752a266b796309bea388504a040cbe49c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngBind&lt;/code&gt; attribute tells AngularJS to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</source>
          <target state="translated">&lt;code&gt;ngBind&lt;/code&gt; の属性が与えられた式の値で指定されたHTML要素のテキストの内容を置き換えるために、テキストの内容を更新するために、AngularJSを伝えるときに式の値が変化。</target>
        </trans-unit>
        <trans-unit id="4b045de9b1cc381e1d099c085b650a6eae4bee16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngBindTemplate&lt;/code&gt; directive specifies that the element text content should be replaced with the interpolation of the template in the &lt;code&gt;ngBindTemplate&lt;/code&gt; attribute. Unlike &lt;code&gt;ngBind&lt;/code&gt;, the &lt;code&gt;ngBindTemplate&lt;/code&gt; can contain multiple &lt;code&gt;{{&lt;/code&gt;&lt;code&gt;}}&lt;/code&gt; expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</source>
          <target state="translated">&lt;code&gt;ngBindTemplate&lt;/code&gt; 要素のテキストコンテンツは、テンプレートの補間に置き換えるべきことを指示指定 &lt;code&gt;ngBindTemplate&lt;/code&gt; の属性。 &lt;code&gt;ngBind&lt;/code&gt; とは異なり、 &lt;code&gt;ngBindTemplate&lt;/code&gt; には複数の &lt;code&gt;{{&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 式を含めることができます。一部のHTML要素（TITLEやOPTIONなど）にSPAN要素を含めることができないため、このディレクティブが必要です。</target>
        </trans-unit>
        <trans-unit id="85c4b39c89de8c839e2ae1224d9251c645f48e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngChange&lt;/code&gt; expression is only evaluated when a change in the input value causes a new value to be committed to the model.</source>
          <target state="translated">&lt;code&gt;ngChange&lt;/code&gt; の入力値の変化がモデルにコミットする新しい値を起こしたときの式にのみ評価されます。</target>
        </trans-unit>
        <trans-unit id="cd2d9be630e6f5ed0b76a70a6f720d3aef6159f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClass&lt;/code&gt; directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.</source>
          <target state="translated">&lt;code&gt;ngClass&lt;/code&gt; のディレクティブを使用すると、動的に追加されるすべてのクラスを表す式をデータバインディングによって、HTML要素のCSSクラスを設定することができます。</target>
        </trans-unit>
        <trans-unit id="eb143e7bbec7a51e2702ec0c2b659b98c872ffe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClassOdd&lt;/code&gt; and &lt;code&gt;ngClassEven&lt;/code&gt; directives work exactly as &lt;a href=&quot;directive/ngclass&quot;&gt;ngClass&lt;/a&gt;, except they work in conjunction with &lt;code&gt;ngRepeat&lt;/code&gt; and take effect only on odd (even) rows.</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; と &lt;code&gt;ngClassEven&lt;/code&gt; ディレクティブはまったく同じように動作&lt;a href=&quot;directive/ngclass&quot;&gt;ngClass&lt;/a&gt;彼らはと連携して動作を除いて、 &lt;code&gt;ngRepeat&lt;/code&gt; のみ奇数（偶数）行に有効になります。</target>
        </trans-unit>
        <trans-unit id="2822cc93e2d22ae5e829a8ed84a58be4d8de9b90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClassOdd&lt;/code&gt; and &lt;code&gt;ngClassEven&lt;/code&gt; directives work exactly as &lt;a href=&quot;ngclass&quot;&gt;ngClass&lt;/a&gt;, except they work in conjunction with &lt;code&gt;ngRepeat&lt;/code&gt; and take effect only on odd (even) rows.</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; と &lt;code&gt;ngClassEven&lt;/code&gt; ディレクティブはまったく同じように動作&lt;a href=&quot;ngclass&quot;&gt;ngClass&lt;/a&gt;彼らはと連携して動作を除いて、 &lt;code&gt;ngRepeat&lt;/code&gt; のみ奇数（偶数）行に有効になります。</target>
        </trans-unit>
        <trans-unit id="4c4a87e8244d4148c2c2f2d43d94a91ad7be7087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngCloak&lt;/code&gt; directive is used to prevent the AngularJS html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</source>
          <target state="translated">&lt;code&gt;ngCloak&lt;/code&gt; のディレクティブは、アプリケーションがロードされている間にその生（コンパイルされていない）形式でブラウザに表示、簡単であることからAngularJS HTMLテンプレートを防ぐために使用されます。このディレクティブを使用して、htmlテンプレートの表示によって引き起こされる望ましくないフリッカー効果を回避します。</target>
        </trans-unit>
        <trans-unit id="b36a150166cdfa6a15928e9e8ef2e9326745f7ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngController&lt;/code&gt; directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</source>
          <target state="translated">&lt;code&gt;ngController&lt;/code&gt; のディレクティブは、ビューにコントローラクラスを添付する。これは、angularがModel-View-Controller設計パターンの背後にある原理をどのようにサポートするかの重要な側面です。</target>
        </trans-unit>
        <trans-unit id="6bcc648246709c280b3b0364de36047cd3c0b90a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngCookies&lt;/code&gt; module provides a convenient wrapper for reading and writing browser cookies.</source>
          <target state="translated">&lt;code&gt;ngCookies&lt;/code&gt; モジュールは、ブラウザのクッキーを読み書きするための便利なラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="5a9c86f81072ed3420a40ead53377e5bc6d1bc76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngDblclick&lt;/code&gt; directive allows you to specify custom behavior on a dblclick event.</source>
          <target state="translated">&lt;code&gt;ngDblclick&lt;/code&gt; のディレクティブを使用すると、DBLCLICKイベントにカスタム動作を指定することができます。</target>
        </trans-unit>
        <trans-unit id="eac48f1e893ad5864f090789b466b632767c4206" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngHide&lt;/code&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngHide&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;ngHide&lt;/code&gt; ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngHide&lt;/code&gt; の属性。</target>
        </trans-unit>
        <trans-unit id="d381776a806006bc86dcce569e5adc2ebd5f055c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngIf&lt;/code&gt; directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to &lt;code&gt;ngIf&lt;/code&gt; evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; 指令削除し又は{式}に基づいて、DOMツリーの部分を再現。 &lt;code&gt;ngIf&lt;/code&gt; に割り当てられた式がfalse値に評価される場合、要素はDOMから削除されます。そうでない場合、要素のクローンがDOMに再挿入されます。</target>
        </trans-unit>
        <trans-unit id="a9d3c704979843b97982c647f1da581d30fd4d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngInit&lt;/code&gt; directive allows you to evaluate an expression in the current scope.</source>
          <target state="translated">&lt;code&gt;ngInit&lt;/code&gt; のディレクティブを使用すると、現在のスコープ内での発現を評価することができます。</target>
        </trans-unit>
        <trans-unit id="417a61e212c49154942fb721510044da379c7254" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMaxlength&lt;/code&gt; attribute must be an expression, while the &lt;code&gt;maxlength&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngMaxlength&lt;/code&gt; の間、属性は、式でなければなりません &lt;code&gt;maxlength&lt;/code&gt; 値を補間する必要があります。</target>
        </trans-unit>
        <trans-unit id="45c4265c4dbb1f2d586ef768e0851c8578c7667b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMessages&lt;/code&gt; directive allows keys in a key/value collection to be associated with a child element (or 'message') that will show or hide based on the truthiness of that key's value in the collection. A common use case for &lt;code&gt;ngMessages&lt;/code&gt; is to display error messages for inputs using the &lt;code&gt;$error&lt;/code&gt; object exposed by the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; のディレクティブは、キー/値のコレクション内のキーは、コレクション内のそのキーの値のtruthinessに基づいて表示または非表示になる子要素（または「メッセージ」）に関連付けることができます。 &lt;code&gt;ngMessages&lt;/code&gt; の一般的な使用例は、&lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;ディレクティブによって公開された &lt;code&gt;$error&lt;/code&gt; オブジェクトを使用して入力のエラーメッセージを表示することです。</target>
        </trans-unit>
        <trans-unit id="0d18c34180a240483d53674cf68de91b9894484a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMessages&lt;/code&gt; module provides enhanced support for displaying messages within templates (typically within forms or when rendering message objects that return key/value data). Instead of relying on JavaScript code and/or complex ng-if statements within your form template to show and hide error messages specific to the state of an input field, the &lt;code&gt;ngMessages&lt;/code&gt; and &lt;code&gt;ngMessage&lt;/code&gt; directives are designed to handle the complexity, inheritance and priority sequencing based on the order of how the messages are defined in the template.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; モジュールは、（通常はフォーム内またはメッセージをレンダリングすると、そのリターンキー/値データオブジェクトの場合）、テンプレート内のメッセージを表示するための拡張サポートを提供します。JavaScriptコードやフォームテンプレート内の複雑なng-ifステートメントに依存して入力フィールドの状態に固有のエラーメッセージを表示および非表示にする &lt;code&gt;ngMessages&lt;/code&gt; に、ngMessagesおよび &lt;code&gt;ngMessage&lt;/code&gt; ディレクティブは、複雑さ、継承、および優先順位付けに基づいて処理するように設計されていますテンプレートでのメッセージの定義順。</target>
        </trans-unit>
        <trans-unit id="b4f8fedc33954693b5bb572d1d7f500187e5e788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMinlength&lt;/code&gt; value must be an expression, while the &lt;code&gt;minlength&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngMinlength&lt;/code&gt; の間、値は、式でなければなりません &lt;code&gt;minlength&lt;/code&gt; 値を補間する必要があります。</target>
        </trans-unit>
        <trans-unit id="33dab09372104d4a4d45b7aa078905f409929cf1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMock&lt;/code&gt; module provides support to inject and mock AngularJS services into unit tests. In addition, ngMock also extends various core AngularJS services such that they can be inspected and controlled in a synchronous manner within test code.</source>
          <target state="translated">&lt;code&gt;ngMock&lt;/code&gt; のモジュールは、ユニットテストに注入し、モックAngularJSサービスへのサポートを提供します。さらに、ngMockはさまざまなコアAngularJSサービスを拡張し、テストコード内で同期的に検査および制御できるようにします。</target>
        </trans-unit>
        <trans-unit id="a1d1654b9cd04adec1909e895c88e508f9a0a9a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMockE2E&lt;/code&gt; is an AngularJS module which contains mocks suitable for end-to-end testing. Currently there is only one mock present in this module - the &lt;a href=&quot;ngmocke2e/service/%24httpbackend&quot;&gt;e2e $httpBackend&lt;/a&gt; mock.</source>
          <target state="translated">&lt;code&gt;ngMockE2E&lt;/code&gt; は、エンド・ツー・エンドのテストに適したモックを含有AngularJSモジュールです。現在、このモジュールにはモックが1つだけあります&lt;a href=&quot;ngmocke2e/service/%24httpbackend&quot;&gt;-e2e $ httpBackend&lt;/a&gt;モックです。</target>
        </trans-unit>
        <trans-unit id="a03456cf81ef1e81f30d53477f5db6541362dabe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModel&lt;/code&gt; directive binds an &lt;code&gt;input&lt;/code&gt;,&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; (or custom form control) to a property on the scope using &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;, which is created and exposed by this directive.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 指令結合 &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;textarea&lt;/code&gt; （またはカスタムフォームコントロール）を使用してスコープのプロパティに&lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelControllerを&lt;/a&gt;この指令によって作成され、露出されています、。</target>
        </trans-unit>
        <trans-unit id="3452bf57ac43f5bb1c78e3470aa773a04375cfd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModel&lt;/code&gt; directive binds an &lt;code&gt;input&lt;/code&gt;,&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; (or custom form control) to a property on the scope using &lt;a href=&quot;type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;, which is created and exposed by this directive.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 指令結合 &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;textarea&lt;/code&gt; （またはカスタムフォームコントロール）を使用してスコープのプロパティに&lt;a href=&quot;type/ngmodel.ngmodelcontroller&quot;&gt;NgModelControllerを&lt;/a&gt;この指令によって作成され、露出されています、。</target>
        </trans-unit>
        <trans-unit id="b487d1121c7dae27fef086afefdf78374bec811f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModelOptions&lt;/code&gt; expression is only evaluated once when the directive is linked; it is not watched for changes. However, it is possible to override the options on a single &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; instance with &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt;&lt;code&gt;NgModelController#$overrideModelOptions()&lt;/code&gt;&lt;/a&gt;. See also the example for &lt;a href=&quot;ngmodeloptions#default-events-extra-triggers-and-catch-all-debounce-values.html&quot;&gt;Default events, extra triggers, and catch-all debounce values&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; ディレクティブがリンクされているとき、式は一度だけ評価されます。変更は監視されません。ただし、単一の&lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;インスタンスのオプションを&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt; &lt;code&gt;NgModelController#$overrideModelOptions()&lt;/code&gt; &lt;/a&gt;オーバーライドすることは可能です。&lt;a href=&quot;ngmodeloptions#default-events-extra-triggers-and-catch-all-debounce-values.html&quot;&gt;デフォルトイベント、追加トリガー、キャッチオールデバウンス値&lt;/a&gt;の例もご覧ください。</target>
        </trans-unit>
        <trans-unit id="dd5b88d74d5a86e48055f8cee80df84b803c4347" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModelOptions&lt;/code&gt; settings are found by evaluating the value of the attribute directive as an AngularJS expression. This expression should evaluate to an object, whose properties contain the settings. For example: &lt;code&gt;&amp;lt;div ng-model-options=&quot;{ debounce: 100 }&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; の設定はAngularJS式として属性ディレクティブの値を評価することにより発見されました。この式は、プロパティが設定を含むオブジェクトに評価される必要があります。例： &lt;code&gt;&amp;lt;div ng-model-options=&quot;{ debounce: 100 }&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4a18f3d8624d933a72990e8d9aace68d9a5fa17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngNonBindable&lt;/code&gt; directive tells AngularJS not to compile or bind the contents of the current DOM element, including directives on the element itself that have a lower priority than &lt;code&gt;ngNonBindable&lt;/code&gt;. This is useful if the element contains what appears to be AngularJS directives and bindings but which should be ignored by AngularJS. This could be the case if you have a site that displays snippets of code, for instance.</source>
          <target state="translated">&lt;code&gt;ngNonBindable&lt;/code&gt; ディレクティブは、より低い優先順位持つ要素自体のディレクティブを含む現在のDOM要素の内容、コンパイルまたはバインドしないAngularJSを伝える &lt;code&gt;ngNonBindable&lt;/code&gt; を。これは、要素にAngularJSのディレクティブとバインディングのように見えても、AngularJSで無視する必要があるものが含まれている場合に役立ちます。たとえば、コードのスニペットを表示するサイトがある場合などです。</target>
        </trans-unit>
        <trans-unit id="18a8b01c2ac198af1bf17bd98c83cf041280c3cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOn&lt;/code&gt; directive adds an event listener to a DOM element via &lt;a href=&quot;../function/angular.element&quot;&gt;angular.element().on()&lt;/a&gt;, and evaluates an expression when the event is fired. &lt;code&gt;ngOn&lt;/code&gt; allows adding listeners for arbitrary events by including the event name in the attribute, e.g. &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; executes the 'onDrop()' expression when the &lt;code&gt;drop&lt;/code&gt; event is fired.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; ディレクティブは、経由してDOM要素にイベントリスナーを追加します&lt;a href=&quot;../function/angular.element&quot;&gt;（）で。）（angular.element&lt;/a&gt;、およびイベントが発生したときに式を評価します。 &lt;code&gt;ngOn&lt;/code&gt; では、属性にイベント名を含めることにより、任意のイベントのリスナーを追加できます。たとえば、 &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; は、 &lt;code&gt;drop&lt;/code&gt; イベントが発生したときに 'onDrop（）'式を実行します。</target>
        </trans-unit>
        <trans-unit id="2138d9397e0192f72c874be961465bd1c28d35a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOn&lt;/code&gt; directive adds an event listener to a DOM element via &lt;a href=&quot;function/angular.element&quot;&gt;angular.element().on()&lt;/a&gt;, and evaluates an expression when the event is fired. &lt;code&gt;ngOn&lt;/code&gt; allows adding listeners for arbitrary events by including the event name in the attribute, e.g. &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; executes the 'onDrop()' expression when the &lt;code&gt;drop&lt;/code&gt; event is fired.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; ディレクティブは、経由してDOM要素にイベントリスナーを追加します&lt;a href=&quot;function/angular.element&quot;&gt;（）で。）（angular.element&lt;/a&gt;、およびイベントが発生したときに式を評価します。 &lt;code&gt;ngOn&lt;/code&gt; では、属性にイベント名を含めることにより、任意のイベントのリスナーを追加できます。たとえば、 &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; は、 &lt;code&gt;drop&lt;/code&gt; イベントが発生したときに 'onDrop（）'式を実行します。</target>
        </trans-unit>
        <trans-unit id="3a5a3a5904b2e8cda5702d2eb4603a6e9e1ab0ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOptions&lt;/code&gt; attribute can be used to dynamically generate a list of &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements for the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element using the array or object obtained by evaluating the &lt;code&gt;ngOptions&lt;/code&gt; comprehension expression.</source>
          <target state="translated">&lt;code&gt;ngOptions&lt;/code&gt; 属性を動的リストを生成するために使用することができる &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; のための要素 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 評価したアレイまたはオブジェクト使用して要素 &lt;code&gt;ngOptions&lt;/code&gt; 理解発現。</target>
        </trans-unit>
        <trans-unit id="edcab80c917b627233174b158849e232c488cd89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngParseExt&lt;/code&gt; module provides functionality to allow Unicode characters in identifiers inside AngularJS expressions.</source>
          <target state="translated">&lt;code&gt;ngParseExt&lt;/code&gt; のモジュールは、AngularJS式の内部識別子にUnicode文字を許可する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="09d3a0b1ee99482f4b3b7b520c3b0c94485099f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngPattern&lt;/code&gt; attribute must be an expression, while the &lt;code&gt;pattern&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngPattern&lt;/code&gt; ながら属性は、式でなければならない &lt;code&gt;pattern&lt;/code&gt; 値を補間する必要があります。</target>
        </trans-unit>
        <trans-unit id="271ae01d79e2590ed7016379f17a5f47d6f0272e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngProp&lt;/code&gt; directive binds an expression to a DOM element property. &lt;code&gt;ngProp&lt;/code&gt; allows writing to arbitrary properties by including the property name in the attribute, e.g. &lt;code&gt;ng-prop-value=&quot;'my value'&quot;&lt;/code&gt; binds 'my value' to the &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;ngProp&lt;/code&gt; のディレクティブは、DOM要素のプロパティに式をバインドします。 &lt;code&gt;ngProp&lt;/code&gt; を使用すると、属性にプロパティ名を含めることにより、任意のプロパティに書き込むことができます。たとえば、 &lt;code&gt;ng-prop-value=&quot;'my value'&quot;&lt;/code&gt; は、 'my value'を &lt;code&gt;value&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="56078d890909a913d837393b28aca4870aaa743e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngRef&lt;/code&gt; attribute tells AngularJS to assign the controller of a component (or a directive) to the given property in the current scope. It is also possible to add the jqlite-wrapped DOM element to the scope.</source>
          <target state="translated">&lt;code&gt;ngRef&lt;/code&gt; の属性は、現在のスコープ内の指定されたプロパティにコンポーネントのコントローラ（または命令）を割り当てるAngularJSを伝えます。jqliteでラップされたDOM要素をスコープに追加することもできます。</target>
        </trans-unit>
        <trans-unit id="6ff4989bbff6fa7c231c2f0eb3505b944b90b0e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngRepeat&lt;/code&gt; directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and &lt;code&gt;$index&lt;/code&gt; is set to the item index or key.</source>
          <target state="translated">&lt;code&gt;ngRepeat&lt;/code&gt; のディレクティブは、コレクションから項目ごとに一度テンプレートをインスタンス化します。各テンプレートインスタンスは独自のスコープを取得します。指定されたループ変数は現在のコレクションアイテムに設定され、 &lt;code&gt;$index&lt;/code&gt; はアイテムのインデックスまたはキーに設定されます。</target>
        </trans-unit>
        <trans-unit id="f3258a5d7b59d2f657f7fe17a611da1f014e37dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngResource&lt;/code&gt; module provides interaction support with RESTful services via the $resource service.</source>
          <target state="translated">&lt;code&gt;ngResource&lt;/code&gt; のモジュールは、$リソースサービスを経由してRESTfulサービスとの相互作用のサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="9ddc195a90e2c72b0358a7cc99d02ccb7323a2b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngRoute&lt;/code&gt; module provides routing and deeplinking services and directives for AngularJS apps.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; のモジュールは、AngularJSのアプリのためのルーティングとディープリンクサービスとのディレクティブを提供します。</target>
        </trans-unit>
        <trans-unit id="b3e208ecff40d20920929e835051dd884ba87ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngSanitize&lt;/code&gt; module provides functionality to sanitize HTML.</source>
          <target state="translated">&lt;code&gt;ngSanitize&lt;/code&gt; のモジュールは、サニタイズHTMLに機能を提供します。</target>
        </trans-unit>
        <trans-unit id="52b3ba27765007bf524e878fcbc2019dfd26ae3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngShow&lt;/code&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngShow&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngShow&lt;/code&gt; の属性。</target>
        </trans-unit>
        <trans-unit id="faf99d24631b3a829e4bcd7302c5c47d13b5ad16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngStyle&lt;/code&gt; directive allows you to set CSS style on an HTML element conditionally.</source>
          <target state="translated">&lt;code&gt;ngStyle&lt;/code&gt; のディレクティブを使用すると、条件付きでHTML要素にCSSスタイルを設定することができます。</target>
        </trans-unit>
        <trans-unit id="100ff07ef6149d7ca57d5a58fc1db3c2ed44c1fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngSwitch&lt;/code&gt; directive is used to conditionally swap DOM structure on your template based on a scope expression. Elements within &lt;code&gt;ngSwitch&lt;/code&gt; but without &lt;code&gt;ngSwitchWhen&lt;/code&gt; or &lt;code&gt;ngSwitchDefault&lt;/code&gt; directives will be preserved at the location as specified in the template.</source>
          <target state="translated">&lt;code&gt;ngSwitch&lt;/code&gt; のディレクティブは、スコープ式に基づいて、テンプレートに条件付きでスワップDOM構造に使用されています。内の要素 &lt;code&gt;ngSwitch&lt;/code&gt; しかしせず &lt;code&gt;ngSwitchWhen&lt;/code&gt; または &lt;code&gt;ngSwitchDefault&lt;/code&gt; ディレクティブは、テンプレートで指定された場所に保存されます。</target>
        </trans-unit>
        <trans-unit id="a891433d4f844a3439f6448464836003a6666e46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngTouch&lt;/code&gt; module provides helpers for touch-enabled devices. The implementation is based on jQuery Mobile touch event handling (&lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jquerymobile.com&lt;/a&gt;). *</source>
          <target state="translated">&lt;code&gt;ngTouch&lt;/code&gt; のモジュールは、タッチ対応デバイスのためのヘルパーを提供します。実装は、jQuery Mobileタッチイベント処理（&lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jquerymobile.com&lt;/a&gt;）に基づいています。*</target>
        </trans-unit>
        <trans-unit id="effe6c005ddd837c2f44a279f59e8a8295f93a0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngTouch&lt;/code&gt; module provides helpers for touch-enabled devices. The implementation is based on jQuery Mobile touch event handling (&lt;a href=&quot;https://jquerymobile.com/&quot;&gt;jquerymobile.com&lt;/a&gt;). *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719edff275929380e8a63e3ec29b0aaffc381b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; collection is observed via standard $watch operation and is examined on every call to $digest() to see if any items have been added, removed, or moved.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; コレクションは、標準の$の時計の動作を介して観察され、任意の項目を追加、削除、または移動されたかどうかを確認するために$ダイジェスト（）を呼び出すたびに検査されます。</target>
        </trans-unit>
        <trans-unit id="851c27c48ef1a184f216635c0032b8034ac64b06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt; returned by the service</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; や &lt;code&gt;function&lt;/code&gt; サービスによって返さ</target>
        </trans-unit>
        <trans-unit id="78f03e71ba8da4c772e22f7cefb6a86de28fb156" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; attribute allows further customization of pluralized text, which can result in a better user experience. For example, instead of the message &quot;4 people are viewing this document&quot;, you might display &quot;John, Kate and 2 others are viewing this document&quot;. The offset attribute allows you to offset a number by any desired value. Let's take a look at an example:</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 属性は、より優れたユーザーエクスペリエンスをもたらし得る、複数形のテキストをさらにカスタマイズすることができます。たとえば、「4人がこのドキュメントを表示しています」というメッセージの代わりに、「John、Kateおよび2人がこのドキュメントを表示しています」と表示することができます。offset属性を使用すると、数値を任意の値でオフセットできます。例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="3841cc9d8c6ce2f408224f3cae680aa991a2ad9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oldCollection&lt;/code&gt; object is a copy of the former collection data. Due to performance considerations, the&lt;code&gt;oldCollection&lt;/code&gt; value is computed only if the &lt;code&gt;listener&lt;/code&gt; function declares two or more arguments.</source>
          <target state="translated">&lt;code&gt;oldCollection&lt;/code&gt; のオブジェクトは、以前の収集データのコピーです。パフォーマンスを考慮して、 &lt;code&gt;oldCollection&lt;/code&gt; 値は、 &lt;code&gt;listener&lt;/code&gt; 関数が2つ以上の引数を宣言した場合にのみ計算されます。</target>
        </trans-unit>
        <trans-unit id="92de2adf4257cb98e99d7c66015a3a4463b7f324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params&lt;/code&gt; object in the &lt;strong&gt;callback&lt;/strong&gt; will now have properties with these keys, which hold the value of the corresponding &lt;strong&gt;group&lt;/strong&gt; in the &lt;strong&gt;regex&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;コールバック&lt;/strong&gt;の &lt;code&gt;params&lt;/code&gt; オブジェクトには、これらのキーを持つプロパティがあり、これは&lt;strong&gt;regexの&lt;/strong&gt;対応する&lt;strong&gt;グループの&lt;/strong&gt;値を保持します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c809664e3f03c3d8135c609d28867a41b149ee5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;required&lt;/code&gt; message will be displayed to the user since it appears before the &lt;code&gt;email&lt;/code&gt; message in the DOM. Once the user types a single character, the &lt;code&gt;required&lt;/code&gt; message will disappear (since the field now has a value) but the &lt;code&gt;email&lt;/code&gt; message will be visible because it is still applicable.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; ことは、前に表示されますので、メッセージがユーザーに表示される &lt;code&gt;email&lt;/code&gt; DOMにメッセージ。ユーザーが単一の文字を入力すると、 &lt;code&gt;required&lt;/code&gt; メッセージは表示されなくなります（フィールドに値が設定されているため）が、 &lt;code&gt;email&lt;/code&gt; メッセージはまだ適用可能なため表示されます。</target>
        </trans-unit>
        <trans-unit id="4185c522e4249b9336c8172126c02efcc1c08358" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restrict&lt;/code&gt; option is typically set to:</source>
          <target state="translated">&lt;code&gt;restrict&lt;/code&gt; オプションは、一般的に設定されています：</target>
        </trans-unit>
        <trans-unit id="a4a3705bd9ff2aae6d9842de77dd5be730d87c0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;routeTemplateMonitor&lt;/code&gt; service depends on the built-in &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; service and our custom &lt;code&gt;batchLog&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;routeTemplateMonitor&lt;/code&gt; のサービスは、ビルトインに依存&lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt;サービスと私たちのカスタム &lt;code&gt;batchLog&lt;/code&gt; のサービス。</target>
        </trans-unit>
        <trans-unit id="afc148e7de524b6d85fc2a2af328dfe7cc13d5f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope()&lt;/code&gt; function is only available when &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.debugInfoEnabled()&lt;/code&gt;&lt;/a&gt; is true (which is the default).</source>
          <target state="translated">&lt;code&gt;scope()&lt;/code&gt; 関数は、ときにのみ使用可能です&lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.debugInfoEnabled()&lt;/code&gt; &lt;/a&gt;（デフォルトである）が真です。</target>
        </trans-unit>
        <trans-unit id="9fe9f3176578380f2a8892095126bf450cc2e55b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope&lt;/code&gt; argument refers to the current scope.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 引数は、現在のスコープを参照します。</target>
        </trans-unit>
        <trans-unit id="081d217fe995efb27d071685f735b72868a5a5e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; directive is used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; to provide data-binding between the scope and the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; control (including setting default values). It also handles dynamic &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements, which can be added using the &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ngoptions&quot;&gt;&lt;code&gt;ngOptions&lt;/code&gt;&lt;/a&gt; directives.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; ディレクティブは、一緒に使用される&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;データバインディングスコープとの間に提供する &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; （デフォルト設定値を含む）コントロール。また、&lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ngoptions&quot;&gt; &lt;code&gt;ngOptions&lt;/code&gt; &lt;/a&gt;ディレクティブを使用して追加できる動的な &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素も処理します。</target>
        </trans-unit>
        <trans-unit id="df77fb9c95dda0960bb631ed0b0471c3c15bf962" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;step&lt;/code&gt; validation will not work correctly for very large numbers (e.g. 9999999999) due to Javascript's arithmetic limitations. If you need to handle large numbers, purpose-built libraries (e.g. &lt;a href=&quot;https://github.com/MikeMcl/big.js/&quot;&gt;https://github.com/MikeMcl/big.js/&lt;/a&gt;), can be included into AngularJS by &lt;a href=&quot;../../../guide/forms#modifying-built-in-validators.html&quot;&gt;overwriting the validators&lt;/a&gt; for &lt;code&gt;number&lt;/code&gt; and / or &lt;code&gt;step&lt;/code&gt;, or by &lt;a href=&quot;../../../guide/forms#custom-validation.html&quot;&gt;applying custom validators&lt;/a&gt; to an &lt;code&gt;input[text]&lt;/code&gt; element. The source for &lt;code&gt;input[number]&lt;/code&gt; type can be used as a starting point for both implementations.</source>
          <target state="translated">&lt;code&gt;step&lt;/code&gt; の検証では、JavaScriptの算術制限により、非常に大きな数字（例えば9999999999）のために正しく動作しません。多数を処理する必要がある場合は、専用のライブラリ（&lt;a href=&quot;https://github.com/MikeMcl/big.js/&quot;&gt;https://github.com/MikeMcl/big.js/など&lt;/a&gt;）をAngularJSに含めることができ&lt;a href=&quot;../../../guide/forms#modifying-built-in-validators.html&quot;&gt;ます。これには&lt;/a&gt;、 &lt;code&gt;number&lt;/code&gt; や &lt;code&gt;step&lt;/code&gt; バリデーターを上書きするか、&lt;a href=&quot;../../../guide/forms#custom-validation.html&quot;&gt;カスタム&lt;/a&gt;を適用します。 &lt;code&gt;input[text]&lt;/code&gt; 要素へのバリデーター。 &lt;code&gt;input[number]&lt;/code&gt; タイプのソースは、両方の実装の開始点として使用できます。</target>
        </trans-unit>
        <trans-unit id="764c088d4b58451c39c5d707cf0b855450c788f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; for the invoked method.</source>
          <target state="translated">呼び出されたメソッドの &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f00eea4dd41ef348229b3babc12267733b6ae2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transclude&lt;/code&gt; option changes the way scopes are nested. It makes it so that the &lt;strong&gt;contents&lt;/strong&gt; of a transcluded directive have whatever scope is outside the directive, rather than whatever scope is on the inside. In doing so, it gives the contents access to the outside scope.</source>
          <target state="translated">&lt;code&gt;transclude&lt;/code&gt; のオプションは、スコープがネストされている方法を変更します。それはそうすることを可能&lt;strong&gt;内容&lt;/strong&gt;どんな範囲の内側にあるのではなく、トランスクルードディレクティブの外ディレクティブでどんなスコープがあります。そうすることで、コンテンツが外部スコープにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="0592776fbfd3e45c05d0a220d4166d8e78eef8e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;updateOn&lt;/code&gt; and &lt;code&gt;debounce&lt;/code&gt; properties allow you to specify a custom list of events that will trigger a model update and/or a debouncing delay so that the actual update only takes place when a timer expires; this timer will be reset after another change takes place.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; と &lt;code&gt;debounce&lt;/code&gt; プロパティを使用すると、タイマーが満了したときに実際の更新が唯一の場所をとるようにモデルの更新および/またはデバウンス遅延をトリガするイベントのカスタムリストを指定することができます。このタイマーは、別の変更が行われた後にリセットされます。</target>
        </trans-unit>
        <trans-unit id="865d012686bd8519148229c77d24cb9da639e749" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; that was originally provided to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;value&lt;/code&gt; is the result of such a call. Otherwise, returns &lt;code&gt;value&lt;/code&gt; unchanged.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 元々に提供された&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;場合 &lt;code&gt;value&lt;/code&gt; 、このようなA呼び出しの結果です。それ以外の場合は、 &lt;code&gt;value&lt;/code&gt; そのまま返します。</target>
        </trans-unit>
        <trans-unit id="024e3409a1e0aafe121f0936f278bfdbd6b8eded" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watchExpression&lt;/code&gt; is called on every call to &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; and should return the value that will be watched. (&lt;code&gt;watchExpression&lt;/code&gt; should not change its value when executed multiple times with the same input because it may be executed multiple times by &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt;. That is, &lt;code&gt;watchExpression&lt;/code&gt; should be &lt;a href=&quot;http://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;watchExpression&lt;/code&gt; は、すべての呼び出しで呼び出される&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;（$ダイジェスト）&lt;/a&gt;と見される値を返す必要があります。（ &lt;code&gt;watchExpression&lt;/code&gt; は&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest（）&lt;/a&gt;によって複数回実行される可能性があるため、同じ入力で複数回実行されたときに値を変更しないでください。つまり、 &lt;code&gt;watchExpression&lt;/code&gt; はべき&lt;a href=&quot;http://en.wikipedia.org/wiki/Idempotence&quot;&gt;等で&lt;/a&gt;なければなりません。）</target>
        </trans-unit>
        <trans-unit id="86fde5d1bd02ec01fe634ece4d5081351f050ef6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watchExpression&lt;/code&gt; is called on every call to &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; and should return the value that will be watched. (&lt;code&gt;watchExpression&lt;/code&gt; should not change its value when executed multiple times with the same input because it may be executed multiple times by &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt;. That is, &lt;code&gt;watchExpression&lt;/code&gt; should be &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77aba6041c9b36ae3635fef59bf7730092422df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;when&lt;/code&gt; attribute specifies the mappings between plural categories and the actual string to be displayed. The value of the attribute should be a JSON object.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 属性は、複数のカテゴリと表示される実際の文字列の間のマッピングを指定します。属性の値はJSONオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="61e68df71711b6d4bd08875b5c5eb39417bd8af3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no &lt;code&gt;trustedResourceUrlList&lt;/code&gt; has been explicitly set is &lt;code&gt;['self']&lt;/code&gt; allowing only same origin resource requests.</source>
          <target state="translated">&lt;code&gt;trustedResourceUrlList&lt;/code&gt; が明示的に設定されていない場合の&lt;strong&gt;デフォルト値&lt;/strong&gt;は、 &lt;code&gt;['self']&lt;/code&gt; であり、同じオリジンリソースリクエストのみを許可します。</target>
        </trans-unit>
        <trans-unit id="a141eee04cc9b2864dbdd7092accf079ffcc2135" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no trusted resource URL list has been explicitly set is the empty array (i.e. there is no &lt;code&gt;bannedResourceUrlList&lt;/code&gt;.)</source>
          <target state="translated">信頼できるリソースのURLリストが明示的に設定されていない場合の&lt;strong&gt;デフォルト値&lt;/strong&gt;は、空の配列です（つまり、 &lt;code&gt;bannedResourceUrlList&lt;/code&gt; はありません）。</target>
        </trans-unit>
        <trans-unit id="29c7438c3e58ad6cfeb1ab043f1d56e6013584d8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no whitelist has been explicitly set is &lt;code&gt;['self']&lt;/code&gt; allowing only same origin resource requests.</source>
          <target state="translated">ホワイトリストが明示的に設定されていない場合の&lt;strong&gt;デフォルト値&lt;/strong&gt;は &lt;code&gt;['self']&lt;/code&gt; であり、同じオリジンリソースリクエストのみを許可します。</target>
        </trans-unit>
        <trans-unit id="971a8e0fa1cf0babaa204065768792f07fb82390" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no whitelist has been explicitly set is the empty array (i.e. there is no blacklist.)</source>
          <target state="translated">ホワイトリストが明示的に設定されていない場合の&lt;strong&gt;デフォルト値&lt;/strong&gt;は空の配列です（つまり、ブラックリストはありません）。</target>
        </trans-unit>
        <trans-unit id="30b3a9c87fe99e11ad5c482f252d8b2795c7d39c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;normalization&lt;/strong&gt; process is as follows:</source>
          <target state="translated">&lt;strong&gt;正規化&lt;/strong&gt;プロセスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c92de0945f5d858e55599f74eae5a30cddcf871d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;scope option&lt;/strong&gt; is an object that contains a property for each isolate scope binding. In this case it has just one property:</source>
          <target state="translated">&lt;strong&gt;スコープオプションは、&lt;/strong&gt;結合、各単離物スコープのプロパティを含むオブジェクトです。この場合、プロパティは1つだけです。</target>
        </trans-unit>
        <trans-unit id="e6b40743da77f9678b10414f875798e060c42324" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;service factory function&lt;/strong&gt; generates the single object or function that represents the service to the rest of the application. The object or function returned by the service is injected into any component (controller, service, filter or directive) that specifies a dependency on the service.</source>
          <target state="translated">&lt;strong&gt;サービス工場の機能は、&lt;/strong&gt;アプリケーションの残りの部分にサービスを表す単一オブジェクトまたは関数を生成します。サービスによって返されるオブジェクトまたは関数は、サービスへの依存関係を指定するコンポーネント（コントローラー、サービス、フィルター、またはディレクティブ）に挿入されます。</target>
        </trans-unit>
        <trans-unit id="5ceadcbdd30d6b737f519c6b13401595572885d1" translate="yes" xml:space="preserve">
          <source>The AngularJS approach produces a stable DOM. The DOM element instance bound to a model item instance does not change for the lifetime of the binding. This means that the code can get hold of the elements and register event handlers and know that the reference will not be destroyed by template data merge.</source>
          <target state="translated">AngularJSのアプローチは安定したDOMを生成します。モデルアイテムのインスタンスにバインドされたDOM要素のインスタンスは、バインドの有効期間中は変化しません。これは、コードが要素を手に入れてイベントハンドラを登録することができ、テンプレートデータのマージによって参照が破棄されないことを知ることができることを意味します。</target>
        </trans-unit>
        <trans-unit id="cda5f891e99782bb7f2b57b3956c0a05ebdb49e3" translate="yes" xml:space="preserve">
          <source>The AngularJS datetime filter uses the time zone settings of the browser. The same application will show different time information depending on the time zone settings of the computer that the application is running on. Neither JavaScript nor AngularJS currently supports displaying the date with a timezone specified by the developer.</source>
          <target state="translated">AngularJSのdatetimeフィルターはブラウザのタイムゾーン設定を利用します。同じアプリケーションでも、アプリケーションが動作しているコンピュータのタイムゾーン設定によって異なる時間情報が表示されます。JavaScriptもAngularJSも現在のところ開発者が指定したタイムゾーンでの日付表示には対応していません。</target>
        </trans-unit>
        <trans-unit id="0ed09a1c05ea064927146d6b96bb2d8d5f52f6be" translate="yes" xml:space="preserve">
          <source>The AngularJS expression is followed by &lt;code&gt;, select,&lt;/code&gt; where the spaces are optional.</source>
          <target state="translated">AngularJS式の後には &lt;code&gt;, select,&lt;/code&gt; が続きます。スペースはオプションです。</target>
        </trans-unit>
        <trans-unit id="3e68d99150c2f319df83ed6c3b871e24960e46dc" translate="yes" xml:space="preserve">
          <source>The AngularJS injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested.</source>
          <target state="translated">AngularJSインジェクタサブシステムは、コンポーネントの作成、依存関係の解決、要求に応じて他のコンポーネントへの提供を担当しています。</target>
        </trans-unit>
        <trans-unit id="a093f7952b1838c4dd6aeda28ea5e1fc38030960" translate="yes" xml:space="preserve">
          <source>The Basics</source>
          <target state="translated">基本的なこと</target>
        </trans-unit>
        <trans-unit id="9d032f695a01d9cd7a1b6d3c12def6c50b9bd99f" translate="yes" xml:space="preserve">
          <source>The Component config object. (Note that, unlike the &lt;code&gt;.directive()&lt;/code&gt; method, this method does &lt;strong&gt;not&lt;/strong&gt; take a factory function.)</source>
          <target state="translated">コンポーネント構成オブジェクト。（ &lt;code&gt;.directive()&lt;/code&gt; メソッドとは異なり、このメソッドはファクトリー関数をとら&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。）</target>
        </trans-unit>
        <trans-unit id="8bac82729a1c26fcbe3c4f5867ac3b7453bf9540" translate="yes" xml:space="preserve">
          <source>The Controller methods and properties are available in the template (for both the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element and its children).</source>
          <target state="translated">コントローラのメソッドとプロパティは、テンプレートで使用できます（ &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素とその子の両方）。</target>
        </trans-unit>
        <trans-unit id="af868017ccf0c187453928340ab193c6139324bb" translate="yes" xml:space="preserve">
          <source>The DOM property name.</source>
          <target state="translated">DOM プロパティ名。</target>
        </trans-unit>
        <trans-unit id="d443ac9ac3502ca4aa895decc917e0fc27f2931f" translate="yes" xml:space="preserve">
          <source>The Deferred API</source>
          <target state="translated">繰延API</target>
        </trans-unit>
        <trans-unit id="1e7c1b13eac086e0802b173f73532f7f37f2370c" translate="yes" xml:space="preserve">
          <source>The DemoController is instantiated via its constructor, every time the app needs an instance of DemoController (in our simple app it's just once). So unlike services, controllers are not singletons. The constructor is called with all the requested services, in our case the &lt;code&gt;clientId&lt;/code&gt; service.</source>
          <target state="translated">DemoControllerは、アプリがDemoControllerのインスタンスを必要とするたびに（そのシンプルなアプリでは1回だけ）、コンストラクターを介してインスタンス化されます。したがって、サービスとは異なり、コントローラーはシングルトンではありません。コンストラクターは、要求されたすべてのサービス（この場合は &lt;code&gt;clientId&lt;/code&gt; サービス）で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b3fa2746de6d7246f13d0d1cffdff95010c93ad4" translate="yes" xml:space="preserve">
          <source>The Factory recipe constructs a new service using a function with zero or more arguments (these are dependencies on other services). The return value of this function is the service instance created by this recipe.</source>
          <target state="translated">Factoryレシピは、0個以上の引数(これらは他のサービスへの依存関係です)を持つ関数を使用して新しいサービスを構築します。この関数の戻り値は、このレシピによって作成されたサービスインスタンスです。</target>
        </trans-unit>
        <trans-unit id="ac50a19bbd375fef86664e01f67fa8affc02aed1" translate="yes" xml:space="preserve">
          <source>The HTTP request template URL</source>
          <target state="translated">HTTPリクエストテンプレートのURL</target>
        </trans-unit>
        <trans-unit id="ae5f1f8e1b81cdc0e20901352fa4e651557871f5" translate="yes" xml:space="preserve">
          <source>The JavaScript specification does not define the order of keys returned for an object, so AngularJS relies on the order returned by the browser when running &lt;code&gt;for key in myObj&lt;/code&gt;. Browsers generally follow the strategy of providing keys in the order in which they were defined, although there are exceptions when keys are deleted and reinstated. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes&quot;&gt;MDN page on &lt;code&gt;delete&lt;/code&gt; for more info&lt;/a&gt;.</source>
          <target state="translated">JavaScript仕様では、オブジェクトに対して返されるキーの順序は定義されていないため、AngularJSは &lt;code&gt;for key in myObj&lt;/code&gt; 実行するときにブラウザーから返される順序に依存しています。ブラウザは一般に、定義された順序でキーを提供する戦略に従いますが、キーを削除して元に戻す場合は例外です。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;に関するMDNページを参照してください。</target>
        </trans-unit>
        <trans-unit id="3bf8ccad6f9791756a44c25e1221b6b0a5e4e10b" translate="yes" xml:space="preserve">
          <source>The Promise API</source>
          <target state="translated">プロミスAPI</target>
        </trans-unit>
        <trans-unit id="c9652e0712d85f53b10f54c8b3d21746e8926806" translate="yes" xml:space="preserve">
          <source>The Provider recipe is syntactically defined as a custom type that implements a &lt;code&gt;$get&lt;/code&gt; method. This method is a factory function just like the one we use in the Factory recipe. In fact, if you define a Factory recipe, an empty Provider type with the &lt;code&gt;$get&lt;/code&gt; method set to your factory function is automatically created under the hood.</source>
          <target state="translated">プロバイダーレシピは、構文的に &lt;code&gt;$get&lt;/code&gt; メソッドを実装するカスタムタイプとして定義されます。このメソッドは、ファクトリレシピで使用するものと同じファクトリ関数です。実際、ファクトリレシピを定義すると、 &lt;code&gt;$get&lt;/code&gt; メソッドがファクトリ関数に設定された空のプロバイダータイプが内部で自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="5c03e42c5800d984cbbf4b29ceb9ec72c21a0335" translate="yes" xml:space="preserve">
          <source>The Provider recipe is the core recipe type and all the other ones are just syntactic sugar on it.</source>
          <target state="translated">プロバイダーレシピはコアレシピタイプであり、他のすべてのものはその上の構文上の砂糖です。</target>
        </trans-unit>
        <trans-unit id="a892a7bf5def9b0ea2286339b6f7a5da993546d3" translate="yes" xml:space="preserve">
          <source>The Resource instances and collections have these additional methods:</source>
          <target state="translated">リソースインスタンスとコレクションには、これらの追加メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="e66076755327d887f686ad69f837103a8b754a30" translate="yes" xml:space="preserve">
          <source>The Resource instances and collections have these additional properties:</source>
          <target state="translated">リソースインスタンスとコレクションは、これらの追加プロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="34621a3a20f723701bf1858b04f4ad3fb921a112" translate="yes" xml:space="preserve">
          <source>The Resource instances have these additional methods:</source>
          <target state="translated">リソースインスタンスには、これらの追加メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="a71937c0cf05c12db3a4b4bba8de6a062c6cf8f4" translate="yes" xml:space="preserve">
          <source>The Router holds reference to one or more of Outlets.</source>
          <target state="translated">ルータは、1 つ以上のアウトレットへの参照を保持する。</target>
        </trans-unit>
        <trans-unit id="87ff180e9a06b8bf6a17a8b51f3125e4d192aa91" translate="yes" xml:space="preserve">
          <source>The SCE context in which this result will be used.</source>
          <target state="translated">この結果が使用される SCE コンテキスト。</target>
        </trans-unit>
        <trans-unit id="823fe0827cbf252db7bc25081089c81fb8cdd103" translate="yes" xml:space="preserve">
          <source>The Safari browser throws a &lt;code&gt;RangeError&lt;/code&gt; instead of returning &lt;code&gt;null&lt;/code&gt; when it tries to stringify a &lt;code&gt;Date&lt;/code&gt; object with an invalid date value. The only reliable way to prevent this is to monkeypatch the &lt;code&gt;Date.prototype.toJSON&lt;/code&gt; method as follows:</source>
          <target state="translated">Safariブラウザは、無効な日付値で &lt;code&gt;Date&lt;/code&gt; オブジェクトを文字 &lt;code&gt;RangeError&lt;/code&gt; 化しようとすると、 &lt;code&gt;null&lt;/code&gt; を返す代わりにRangeErrorをスローします。これを防ぐ唯一の信頼できる方法は、次のように &lt;code&gt;Date.prototype.toJSON&lt;/code&gt; メソッドをモンキーパッチすることです。</target>
        </trans-unit>
        <trans-unit id="afb43aa0cd18509de40731a13b780ba28edd09b0" translate="yes" xml:space="preserve">
          <source>The Service recipe produces a service just like the Value or Factory recipes, but it does so by &lt;em&gt;invoking a constructor with the &lt;code&gt;new&lt;/code&gt; operator&lt;/em&gt;. The constructor can take zero or more arguments, which represent dependencies needed by the instance of this type.</source>
          <target state="translated">Serviceレシピは、ValueレシピまたはFactoryレシピと同じようにサービスを生成します&lt;em&gt;が、 &lt;code&gt;new&lt;/code&gt; オペレーターでコンストラクターを呼び出す&lt;/em&gt;ことによって生成します。コンストラクターは、このタイプのインスタンスが必要とする依存関係を表すゼロ個以上の引数を取ることができます。</target>
        </trans-unit>
        <trans-unit id="25546288f27af1b214ed293ad490dde0ee7283f3" translate="yes" xml:space="preserve">
          <source>The Value recipe is very simple to write, but lacks some important features we often need when creating services. Let's now look at the Value recipe's more powerful sibling, the Factory. The Factory recipe adds the following abilities:</source>
          <target state="translated">Valueレシピはとてもシンプルに書けますが、サービスを作成する際に必要となる重要な機能がいくつか欠けています。それでは、Valueレシピのより強力な兄弟であるFactoryを見てみましょう。Factoryレシピには以下の機能が追加されています。</target>
        </trans-unit>
        <trans-unit id="f208762d78ff0661e5bda0e7aac4b7d59f109453" translate="yes" xml:space="preserve">
          <source>The Zen of AngularJS</source>
          <target state="translated">AngularJSの禅</target>
        </trans-unit>
        <trans-unit id="c29d1c1afd3d55fd76dd7231c901e094f9916538" translate="yes" xml:space="preserve">
          <source>The above affects all kinds of element re-use due to tracking, but may be especially visible when tracking by &lt;code&gt;$index&lt;/code&gt; due to the way ngRepeat re-uses elements.</source>
          <target state="translated">上記は、追跡によるすべての種類の要素の再利用に影響しますが、ngRepeatが要素を再利用する方法が原因で、 &lt;code&gt;$index&lt;/code&gt; 追跡する場合に特に表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="1d020ab0c4519b74d0e2f34f58f59c7bb5764a61" translate="yes" xml:space="preserve">
          <source>The above is a suggestion. Tailor it to your needs.</source>
          <target state="translated">上記は提案です。あなたのニーズに合わせてください。</target>
        </trans-unit>
        <trans-unit id="97d188a64eaf391575058d7091fc3fa4a7f72e3b" translate="yes" xml:space="preserve">
          <source>The action methods on the class object or instance object can be invoked with the following parameters:</source>
          <target state="translated">クラスオブジェクトまたはインスタンスオブジェクト上のアクションメソッドは、以下のパラメータで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7eff8e112c923d4408ba2e75a0a922cfc87c536b" translate="yes" xml:space="preserve">
          <source>The actual value from the control's view. For &lt;code&gt;input&lt;/code&gt; elements, this is a String. See &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; for information about when the $viewValue is set.</source>
          <target state="translated">コントロールのビューからの実際の値。ための &lt;code&gt;input&lt;/code&gt; 要素、これは文字列です。$ viewValueがいつ設定されるかについては、&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="48378b09bf8458398be6b8d6a8a1f336579bf8ba" translate="yes" xml:space="preserve">
          <source>The amount of time moved forward.</source>
          <target state="translated">前進した分だけ。</target>
        </trans-unit>
        <trans-unit id="2b948d265fc57c10625e1ce0862575d8dd243a43" translate="yes" xml:space="preserve">
          <source>The application can have multiple scopes, because &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt; can create new child scopes. When new scopes are created, they are added as children of their parent scope. This creates a tree structure which parallels the DOM where they're attached.</source>
          <target state="translated">&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;は新しい子スコープを作成できるため、アプリケーションは複数のスコープを持つことができます。新しいスコープが作成されると、それらは親スコープの子として追加されます。これにより、接続先のDOMに対応するツリー構造が作成されます。</target>
        </trans-unit>
        <trans-unit id="38e5bbdd08561c9153847e92a500562dc014b342" translate="yes" xml:space="preserve">
          <source>The application developer is responsible for loading the code containing the modules; and for ensuring that lazy scripts are not downloaded and executed more often that desired.</source>
          <target state="translated">アプリケーション開発者は、モジュールを含むコードをロードし、遅延スクリプトがダウンロードされて実行されないようにする責任があります。</target>
        </trans-unit>
        <trans-unit id="60f11f10d202320b748ee12a06796244dbd227a5" translate="yes" xml:space="preserve">
          <source>The arguments present in the callback function are:</source>
          <target state="translated">コールバック関数に存在する引数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="81e6f0d0a80e18b7562f471ce77dd5009db58a45" translate="yes" xml:space="preserve">
          <source>The array notation</source>
          <target state="translated">配列表記法</target>
        </trans-unit>
        <trans-unit id="9ca59792e60c6511fe9a49d6033cb2a4c1439819" translate="yes" xml:space="preserve">
          <source>The attribute magic of ngAria may not work for every scenario. To disable individual attributes, you can use the &lt;a href=&quot;../api/ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; method. Just keep in mind this will tell ngAria to ignore the attribute globally.</source>
          <target state="translated">ngAriaの属性魔法は、すべてのシナリオで機能するとは限りません。個々の属性を無効にするには、&lt;a href=&quot;../api/ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt;メソッドを使用できます。これはngAriaに属性をグローバルに無視するように指示することを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="14d833ec5a36b34606ff7ead177dd258878c59e5" translate="yes" xml:space="preserve">
          <source>The behaviour of the directive is affected by the use of the &lt;code&gt;ngTrim&lt;/code&gt; attribute.</source>
          <target state="translated">ディレクティブの動作は、 &lt;code&gt;ngTrim&lt;/code&gt; 属性の使用によって影響を受けます。</target>
        </trans-unit>
        <trans-unit id="8aeca93c2626363ee4548fe610e8099df9c9c8b3" translate="yes" xml:space="preserve">
          <source>The boolean &lt;code&gt;readonly&lt;/code&gt; attribute is only valid for native form controls such as &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly indicate custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; as required, using ngAria with &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;ngReadonly&lt;/a&gt; will also add &lt;code&gt;aria-readonly&lt;/code&gt;. This tells accessibility APIs when a custom control is read-only.</source>
          <target state="translated">boolean &lt;code&gt;readonly&lt;/code&gt; 属性は、 &lt;code&gt;input&lt;/code&gt; や &lt;code&gt;textarea&lt;/code&gt; などのネイティブフォームコントロールでのみ有効です。必要に応じて &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; などのカスタム要素ディレクティブを適切に示すために、ngReadonlyで&lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;ngAria&lt;/a&gt;を使用すると、 &lt;code&gt;aria-readonly&lt;/code&gt; も追加されます。これは、カスタムコントロールが読み取り専用である場合に、アクセシビリティAPIに通知します。</target>
        </trans-unit>
        <trans-unit id="935e2113acf37c8fa60e8d363d9a4163dc3c40a0" translate="yes" xml:space="preserve">
          <source>The boolean &lt;code&gt;required&lt;/code&gt; attribute is only valid for native form controls such as &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly indicate custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; as required, using ngAria with &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;ngRequired&lt;/a&gt; will also add &lt;code&gt;aria-required&lt;/code&gt;. This tells accessibility APIs when a custom control is required.</source>
          <target state="translated">boolean &lt;code&gt;required&lt;/code&gt; 属性は、 &lt;code&gt;input&lt;/code&gt; や &lt;code&gt;textarea&lt;/code&gt; などのネイティブフォームコントロールでのみ有効です。必要に応じて &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; などのカスタム要素ディレクティブを適切に示すために、ngRequiredで&lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;ngAria&lt;/a&gt;を使用すると、 &lt;code&gt;aria-required&lt;/code&gt; も追加されます。これは、カスタムコントロールが必要なときにアクセシビリティAPIに通知します。</target>
        </trans-unit>
        <trans-unit id="9e8a4e50e5a91fb8867fe908b441bbfda7d826ab" translate="yes" xml:space="preserve">
          <source>The browser re-renders the view with the updated text.</source>
          <target state="translated">ブラウザは、更新されたテキストでビューを再表示します。</target>
        </trans-unit>
        <trans-unit id="65cf3e169c60d4db4937d1da68550b314b1b6e3d" translate="yes" xml:space="preserve">
          <source>The browser's event-loop waits for an event to arrive. An event is a user interaction, timer event, or network event (response from a server).</source>
          <target state="translated">ブラウザのイベントループはイベントの到着を待ちます。イベントとは、ユーザーインタラクション、タイマーイベント、ネットワークイベント(サーバーからの応答)のことです。</target>
        </trans-unit>
        <trans-unit id="707ecbb38e755bff0a1ac8d5a41800f59ce92ee0" translate="yes" xml:space="preserve">
          <source>The buggy way to write it:</source>
          <target state="translated">バグだらけの書き方。</target>
        </trans-unit>
        <trans-unit id="7daed9593b5b371d72c261edea4b25b4a7fbc58e" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;$id()&lt;/code&gt; function can be used to assign a unique &lt;code&gt;$$hashKey&lt;/code&gt; property to each item in the collection. This property is then used as a key to associated DOM elements with the corresponding item in the collection by identity. Moving the same object would move the DOM element in the same way in the DOM. Note that the default id function does not support duplicate primitive values (&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;), but supports duplictae non-primitive values (&lt;code&gt;object&lt;/code&gt;) that are &lt;em&gt;equal&lt;/em&gt; in shape.</source>
          <target state="translated">組み込みの &lt;code&gt;$id()&lt;/code&gt; 関数を使用して、コレクション内の各アイテムに一意の &lt;code&gt;$$hashKey&lt;/code&gt; プロパティを割り当てることができます。このプロパティは、IDによってコレクション内の対応するアイテムに関連付けられたDOM要素へのキーとして使用されます。同じオブジェクトを移動すると、DOM内で同じ方法でDOM要素が移動します。デフォルトのid関数は重複するプリミティブ値（ &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt; ）をサポートしていませんが、形状が&lt;em&gt;等しい&lt;/em&gt;重複していないプリミティブ値（ &lt;code&gt;object&lt;/code&gt; ）をサポートしています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="de84fb848d7974c1538967d70a061f09d136e209" translate="yes" xml:space="preserve">
          <source>The built-in AngularJS directives show in their documentation page which type of matching they support.</source>
          <target state="translated">ビルトインのAngularJSディレクティブは、どのタイプのマッチングをサポートしているかをドキュメントページに示しています。</target>
        </trans-unit>
        <trans-unit id="962a6ec28bdb795347091d826dbdec1364731a71" translate="yes" xml:space="preserve">
          <source>The built-in DOM manipulation directives, such as &lt;a href=&quot;../directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../directive/ngswitch&quot;&gt;&lt;code&gt;ngSwitch&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; automatically destroy their transcluded clones as necessary so you do not need to worry about this if you are simply using &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; to inject the transclusion into your directive.</source>
          <target state="translated">&lt;a href=&quot;../directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../directive/ngswitch&quot;&gt; &lt;code&gt;ngSwitch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;などの組み込みのDOM操作ディレクティブは、必要に応じて自動的にトランスクルードされたクローンを破棄するため、&lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt;を使用してトランスクルージョンをディレクティブに挿入するだけであれば、これについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8d5255e53ef3607b163dc1dff9b5cf6c85ff7edd" translate="yes" xml:space="preserve">
          <source>The built-in filters &lt;a href=&quot;../filter/orderby&quot;&gt;orderBy&lt;/a&gt; and &lt;a href=&quot;../filter/filter&quot;&gt;filter&lt;/a&gt; do not work with objects, and will throw an error if used with one.</source>
          <target state="translated">組み込みのフィルターである&lt;a href=&quot;../filter/orderby&quot;&gt;orderBy&lt;/a&gt;と&lt;a href=&quot;../filter/filter&quot;&gt;filter&lt;/a&gt;はオブジェクトでは機能せず、オブジェクトで使用するとエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="ff2c0fad2a4d5f40e3c8e45c0cb4b216d27b9103" translate="yes" xml:space="preserve">
          <source>The cache key is the request URL including search parameters; headers are not considered.</source>
          <target state="translated">キャッシュキーは検索パラメータを含むリクエストURLで、ヘッダは考慮されません。</target>
        </trans-unit>
        <trans-unit id="e4616eff1fba05855b623c26f362604c6b703e08" translate="yes" xml:space="preserve">
          <source>The child elements of the &lt;code&gt;ngMessages&lt;/code&gt; directive are matched to the collection keys by a &lt;code&gt;ngMessage&lt;/code&gt; or &lt;code&gt;ngMessageExp&lt;/code&gt; directive. The value of these attributes must match a key in the collection that is provided by the &lt;code&gt;ngMessages&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; ディレクティブの子要素は、 &lt;code&gt;ngMessage&lt;/code&gt; または &lt;code&gt;ngMessageExp&lt;/code&gt; ディレクティブによってコレクションキーと照合されます。これらの属性の値は、 &lt;code&gt;ngMessages&lt;/code&gt; ディレクティブによって提供されるコレクション内のキーと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="5336897e60e004333ab19b29ea3db63cbe8dfa69" translate="yes" xml:space="preserve">
          <source>The className expression which will be checked against all animations</source>
          <target state="translated">すべてのアニメーションに対してチェックされる className 式</target>
        </trans-unit>
        <trans-unit id="2c1b1a48a0af433b1673ea81113c3f7424fa7fcb" translate="yes" xml:space="preserve">
          <source>The className value that will be added to the element</source>
          <target state="translated">要素に追加される className の値</target>
        </trans-unit>
        <trans-unit id="01da935870671cfe5daa21f385f055010d61e8c9" translate="yes" xml:space="preserve">
          <source>The className value that will be removed from the element</source>
          <target state="translated">要素から削除される className の値</target>
        </trans-unit>
        <trans-unit id="4ee4fb39e9e5de140b856309f8187236336a4e7a" translate="yes" xml:space="preserve">
          <source>The collection (array or array-like object) to sort.</source>
          <target state="translated">ソートするコレクション(配列または配列のようなオブジェクト)。</target>
        </trans-unit>
        <trans-unit id="e22835faffad5508a02cb513445c12617c69ea54" translate="yes" xml:space="preserve">
          <source>The comparator function is used to sort the items, based on the derived values, types and indices.</source>
          <target state="translated">コンパレータ機能は、派生した値、型、インデックスに基づいて項目をソートするために使用されます。</target>
        </trans-unit>
        <trans-unit id="a43646046dc2a965f4d42e43008db64616266c7b" translate="yes" xml:space="preserve">
          <source>The comparator function used to determine the relative order of value pairs. If omitted, the built-in comparator will be used.</source>
          <target state="translated">値のペアの相対的な順序を決定するために使用されるコンパレータ関数です。省略した場合は、内蔵のコンパレータが使用されます。</target>
        </trans-unit>
        <trans-unit id="6baf3ab50c289d17bf3cfb5a4993fa32161e5046" translate="yes" xml:space="preserve">
          <source>The comparison is done using the &lt;code&gt;comparator&lt;/code&gt; function. If none is specified, a default, built-in comparator is used (see below for details - in a nutshell, it compares numbers numerically and strings alphabetically).</source>
          <target state="translated">比較は &lt;code&gt;comparator&lt;/code&gt; 機能を使用して行われます。何も指定されていない場合、デフォルトの組み込みコンパレータが使用されます（詳細については以下を参照してください-簡単に言えば、数値と文字列をアルファベット順に比較します）。</target>
        </trans-unit>
        <trans-unit id="67bff779900ff80c2c3c68a68a6f55dc6ec358a9" translate="yes" xml:space="preserve">
          <source>The compilation is a process of walking the DOM tree and matching DOM elements to &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">コンパイルは、DOMツリーをウォークし、DOM要素を&lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;ディレクティブに&lt;/a&gt;照合するプロセスです。</target>
        </trans-unit>
        <trans-unit id="10e4998d3da4ae02bc4b02f740db293d195492a3" translate="yes" xml:space="preserve">
          <source>The compile function deals with transforming the template DOM. Since most directives do not do template transformation, it is not used often. The compile function takes the following arguments:</source>
          <target state="translated">コンパイル関数はテンプレートDOMの変換を行います。ほとんどのディレクティブはテンプレートの変換を行わないので、あまり使われません。コンパイル関数は以下の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="e3ba37f0f20632b21daa2b1d0d783a59cb927a72" translate="yes" xml:space="preserve">
          <source>The compiler does not suspend the entire compilation to wait for templates to be loaded because this would result in the whole app &quot;stalling&quot; until all templates are loaded asynchronously - even in the case when only one deeply nested directive has &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">でも一つだけ深くネストされたディレクティブがある場合には-コンパイラは、これは、すべてのテンプレートが非同期的にロードされるまで「失速」は、全アプリにつながるので、ロードするテンプレートを待つために全体のコンパイルを中断しません &lt;code&gt;templateUrl&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8325dd3ca7b9ffd07716c535f23b0e8400e6a2b0" translate="yes" xml:space="preserve">
          <source>The component can create the dependency, typically using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">コンポーネントは、通常 &lt;code&gt;new&lt;/code&gt; 演算子を使用して依存関係を作成できます。</target>
        </trans-unit>
        <trans-unit id="079e1d898e7f8138744541edc30b9716548afef5" translate="yes" xml:space="preserve">
          <source>The component can have the dependency passed to it where it is needed.</source>
          <target state="translated">コンポーネントは必要なところに依存関係を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6d494d536751a59fe5fb79ed0078239843fed4f8" translate="yes" xml:space="preserve">
          <source>The component can look up the dependency, by referring to a global variable.</source>
          <target state="translated">コンポーネントは、グローバル変数を参照することで、依存関係を調べることができます。</target>
        </trans-unit>
        <trans-unit id="ba1696b0ee510ce7b698742d313d7841389de75d" translate="yes" xml:space="preserve">
          <source>The configuration object. May only contain the options that need to be updated. Supported keys:</source>
          <target state="translated">設定オブジェクト。更新が必要なオプションのみを含むことができます。サポートされているキー。</target>
        </trans-unit>
        <trans-unit id="c0221af8fa9351901bedb66ce06849fb170fa5da" translate="yes" xml:space="preserve">
          <source>The constant value.</source>
          <target state="translated">定数値です。</target>
        </trans-unit>
        <trans-unit id="21b4017fe5c763384985b8ae7689d4c632ed24d0" translate="yes" xml:space="preserve">
          <source>The context in which this value is safe for use, e.g. &lt;code&gt;$sce.URL&lt;/code&gt;, &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt;, &lt;code&gt;$sce.HTML&lt;/code&gt;, &lt;code&gt;$sce.JS&lt;/code&gt; or &lt;code&gt;$sce.CSS&lt;/code&gt;.</source>
          <target state="translated">この値が安全に使用できるコンテキスト。たとえば、 &lt;code&gt;$sce.URL&lt;/code&gt; 、 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 、 &lt;code&gt;$sce.HTML&lt;/code&gt; 、 &lt;code&gt;$sce.JS&lt;/code&gt; または &lt;code&gt;$sce.CSS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e02f32b11d4a96e094cc4cd481703dd1fae3a4d8" translate="yes" xml:space="preserve">
          <source>The context in which this value is to be used (such as &lt;code&gt;$sce.HTML&lt;/code&gt;).</source>
          <target state="translated">この値が使用されるコンテキスト（ &lt;code&gt;$sce.HTML&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="b2a00503e1aada1817f217fc39da46317b85f521" translate="yes" xml:space="preserve">
          <source>The context in which this value is to be used.</source>
          <target state="translated">この値が使用されるコンテキスト。</target>
        </trans-unit>
        <trans-unit id="527160a78c0a817c7ef349fdf9b2c7b8b40a0021" translate="yes" xml:space="preserve">
          <source>The contexts that can be sanitized are $sce.MEDIA_URL, $sce.URL and $sce.HTML. The first two are available by default, and the third one relies on the &lt;code&gt;$sanitize&lt;/code&gt; service (which may be loaded through the &lt;code&gt;ngSanitize&lt;/code&gt; module). Furthermore, for $sce.RESOURCE_URL context, a plain string may be accepted if the resource url policy defined by &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/code&gt;&lt;/a&gt; accepts that resource.</source>
          <target state="translated">サニタイズできるコンテキストは、$ sce.MEDIA_URL、$ sce.URL、および$ sce.HTMLです。最初の2つはデフォルトで使用可能で、3つ目は &lt;code&gt;$sanitize&lt;/code&gt; サービスに依存しています（ &lt;code&gt;ngSanitize&lt;/code&gt; モジュールを通じてロードできます）。さらに、$ sce.RESOURCE_URLコンテキストでは、&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/code&gt; &lt;/a&gt;定義されたリソースURLポリシーがそのリソースを受け入れる場合、プレーンな文字列が受け入れられる場合があります。</target>
        </trans-unit>
        <trans-unit id="49cec80d475c016bce4dcd2c0cb297088ab347dc" translate="yes" xml:space="preserve">
          <source>The contexts that can be sanitized are $sce.MEDIA_URL, $sce.URL and $sce.HTML. The first two are available by default, and the third one relies on the &lt;code&gt;$sanitize&lt;/code&gt; service (which may be loaded through the &lt;code&gt;ngSanitize&lt;/code&gt; module). Furthermore, for $sce.RESOURCE_URL context, a plain string may be accepted if the resource url policy defined by &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/code&gt;&lt;/a&gt; accepts that resource.</source>
          <target state="translated">サニタイズできるコンテキストは、$ sce.MEDIA_URL、$ sce.URL、および$ sce.HTMLです。最初の2つはデフォルトで使用可能であり、3つ目は &lt;code&gt;$sanitize&lt;/code&gt; サービス（ &lt;code&gt;ngSanitize&lt;/code&gt; モジュールを介してロードされる場合があります）に依存しています。さらに、$ sce.RESOURCE_URLコンテキストの場合、&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/code&gt; &lt;/a&gt;定義されたリソースURLポリシーがそのリソースを受け入れる場合、プレーン文字列を受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="f1ed1aa0329c6ec125f16d62f3f72745317d7c05" translate="yes" xml:space="preserve">
          <source>The control in this example updates by &quot;default&quot;, &quot;click&quot;, and &quot;blur&quot;, with different &lt;code&gt;debounce&lt;/code&gt; values. You can see that &quot;click&quot; doesn't have an individual &lt;code&gt;debounce&lt;/code&gt; value - therefore it uses the &lt;code&gt;*&lt;/code&gt; debounce value.</source>
          <target state="translated">この例のコントロールは、「デフォルト」、「クリック」、および「ぼかし」によって、異なる &lt;code&gt;debounce&lt;/code&gt; 値で更新されます。「クリック」には個別の &lt;code&gt;debounce&lt;/code&gt; 値がないことがわかります。したがって、 &lt;code&gt;*&lt;/code&gt; デバウンス値を使用しています。</target>
        </trans-unit>
        <trans-unit id="abfb67eb59ab08df12629d4b3ef24f1ebe6f52a0" translate="yes" xml:space="preserve">
          <source>The control is considered valid only if value is entered.</source>
          <target state="translated">コントロールは値が入力された場合にのみ有効とみなされます。</target>
        </trans-unit>
        <trans-unit id="fa321ff4c1ce8fe572062a8932217d90b3164a6f" translate="yes" xml:space="preserve">
          <source>The controller for the &lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt; directive. The controller exposes a few utility methods that can be used to augment the behavior of a regular or an &lt;a href=&quot;../directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt; select element.</source>
          <target state="translated">&lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt;ディレクティブのコントローラー。コントローラーは、通常のまたは&lt;a href=&quot;../directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt;選択要素の動作を強化するために使用できるいくつかのユーティリティメソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="7009c81217bd6326e450d4c97f26dbfd83bc15a0" translate="yes" xml:space="preserve">
          <source>The controller for the &lt;a href=&quot;directive/select&quot;&gt;select&lt;/a&gt; directive. The controller exposes a few utility methods that can be used to augment the behavior of a regular or an &lt;a href=&quot;directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt; select element.</source>
          <target state="translated">&lt;a href=&quot;directive/select&quot;&gt;select&lt;/a&gt;ディレクティブのコントローラー。コントローラーは、通常のまたは&lt;a href=&quot;directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt;選択要素の動作を拡張するために使用できるいくつかのユーティリティメソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="498432a4da793f7e778133b7144b7aa9f4769cd3" translate="yes" xml:space="preserve">
          <source>The controller instance can be published into a scope property by specifying &lt;code&gt;ng-controller=&quot;as propertyName&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-controller=&quot;as propertyName&quot;&lt;/code&gt; を指定することにより、コントローラーインスタンスをスコーププロパティに公開できます。</target>
        </trans-unit>
        <trans-unit id="d8ae95787b8cec655ad357bed40a98949c9101e8" translate="yes" xml:space="preserve">
          <source>The controller whose validity state is triggering the change.</source>
          <target state="translated">有効状態が変更のトリガーとなっているコントローラ。</target>
        </trans-unit>
        <trans-unit id="5e5b86677d2c9438f2a6d9bb85589a00354fcb67" translate="yes" xml:space="preserve">
          <source>The controls can be accessed normally, but adding to, or removing controls from the array has no effect on the form. Instead, use &lt;a href=&quot;form.formcontroller#%24addControl.html&quot;&gt;&lt;code&gt;$addControl()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;form.formcontroller#%24removeControl.html&quot;&gt;&lt;code&gt;$removeControl()&lt;/code&gt;&lt;/a&gt; for this use-case. Likewise, adding a control to, or removing a control from the form is not reflected in the shallow copy. That means you should get a fresh copy from &lt;code&gt;$getControls()&lt;/code&gt; every time you need access to the controls.</source>
          <target state="translated">コントロールは通常どおりアクセスできますが、配列にコントロールを追加または削除しても、フォームには影響しません。代わりに、この使用例では&lt;a href=&quot;form.formcontroller#%24addControl.html&quot;&gt; &lt;code&gt;$addControl()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;form.formcontroller#%24removeControl.html&quot;&gt; &lt;code&gt;$removeControl()&lt;/code&gt; &lt;/a&gt;を使用してください。同様に、コントロールをフォームに追加したり、フォームから削除したりしても、浅いコピーには反映されません。つまり、コントロールにアクセスする必要があるたびに、 &lt;code&gt;$getControls()&lt;/code&gt; から新しいコピーを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="90313e345675668509c608402c284aebafe8c90b" translate="yes" xml:space="preserve">
          <source>The copy or updated &lt;code&gt;destination&lt;/code&gt;, if &lt;code&gt;destination&lt;/code&gt; was specified.</source>
          <target state="translated">コピー &lt;code&gt;destination&lt;/code&gt; または更新されたコピー先（コピー &lt;code&gt;destination&lt;/code&gt; が指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="2ced3c50f80c61d3e28cb231ba0b8420428955dc" translate="yes" xml:space="preserve">
          <source>The correct way to write it:</source>
          <target state="translated">正しい書き方です。</target>
        </trans-unit>
        <trans-unit id="8375ae9af024014319d46b0caa7eb954a5fa2f4b" translate="yes" xml:space="preserve">
          <source>The current CSS className expression value. If null then there is no expression value</source>
          <target state="translated">現在のCSS classNameの式の値。null の場合は、式の値はありません。</target>
        </trans-unit>
        <trans-unit id="4382786c94714f27b89613774f7c4bebd55f76e9" translate="yes" xml:space="preserve">
          <source>The current CSS className value</source>
          <target state="translated">現在の CSS className の値</target>
        </trans-unit>
        <trans-unit id="c0b92d2699b7faed501975cc1cf13d3e78b33478" translate="yes" xml:space="preserve">
          <source>The current default is 10 iterations.</source>
          <target state="translated">現在のデフォルトは10回の繰り返しです。</target>
        </trans-unit>
        <trans-unit id="7aedd08ef47f8be2668af8dd80fb24b7ee28cfe2" translate="yes" xml:space="preserve">
          <source>The current filter function or &lt;code&gt;null&lt;/code&gt; if there is none set.</source>
          <target state="translated">現在のフィルター関数、または何も設定されていない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66a28e07fb4d893df0b667def66654991100a49e" translate="yes" xml:space="preserve">
          <source>The current info object for this module if called as a getter, or &lt;code&gt;this&lt;/code&gt; if called as a setter.</source>
          <target state="translated">ゲッターとして呼び出された場合、このモジュールの現在の情報オブジェクト、またはセッターとして呼び出された場合、 &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a9d02cc8cc112d35feadb1312a2714232a47ad3" translate="yes" xml:space="preserve">
          <source>The current scope is excluded from the count. The count includes all isolate child scopes.</source>
          <target state="translated">現在のスコープはカウントから除外されます。このカウントには、分離されたすべての子スコープが含まれます。</target>
        </trans-unit>
        <trans-unit id="a3ef084525022e52ff91e7bc6b6be1d8ef3c412b" translate="yes" xml:space="preserve">
          <source>The current value of the &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag if used as a getter or itself (for chaining) if used as a setter.</source>
          <target state="translated">ゲッターとして使用する場合は &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; フラグの現在の値、セッターとして使用する場合はそれ自体（チェーン用）です。</target>
        </trans-unit>
        <trans-unit id="b8d8863f6d1748e7bfd4ecc411b957bc6eb47d5f" translate="yes" xml:space="preserve">
          <source>The currently set &lt;code&gt;bannedResourceUrlList&lt;/code&gt; array.</source>
          <target state="translated">現在設定されている &lt;code&gt;bannedResourceUrlList&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="3c55e9fab58239a31ab41674e07793cb9edc1d92" translate="yes" xml:space="preserve">
          <source>The currently set blacklist array.</source>
          <target state="translated">現在設定されているブラックリストの配列。</target>
        </trans-unit>
        <trans-unit id="8e588d18f91da994d754a8248014492a329f43c0" translate="yes" xml:space="preserve">
          <source>The currently set trusted resource URL array.</source>
          <target state="translated">現在設定されている信頼できるリソースの URL 配列。</target>
        </trans-unit>
        <trans-unit id="9b8df1933a459dcfe4c11ef0936f54fd838b71b8" translate="yes" xml:space="preserve">
          <source>The currently set whitelist array.</source>
          <target state="translated">現在設定されているホワイトリストの配列。</target>
        </trans-unit>
        <trans-unit id="8c2f3e1e231bfffe01f6a171d21c8de2da159f70" translate="yes" xml:space="preserve">
          <source>The custom &lt;code&gt;redirectTo&lt;/code&gt; function is expected to return a string which will be used to update &lt;code&gt;$location.url()&lt;/code&gt;. If the function throws an error, no further processing will take place and the &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$routeChangeError&lt;/a&gt; event will be fired.</source>
          <target state="translated">カスタムの &lt;code&gt;redirectTo&lt;/code&gt; 関数は、 &lt;code&gt;$location.url()&lt;/code&gt; 更新に使用される文字列を返すことが期待されています。関数がエラーをスローした場合、それ以上の処理は行われず、&lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$ routeChangeError&lt;/a&gt;イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="517928a1a0c975c35a5f6371b16dbf98f8e18922" translate="yes" xml:space="preserve">
          <source>The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such as &lt;strong&gt;data-ng-repeat-start&lt;/strong&gt;, &lt;strong&gt;x-ng-repeat-start&lt;/strong&gt; and &lt;strong&gt;ng:repeat-start&lt;/strong&gt;).</source>
          <target state="translated">ngRepeatのカスタムの開始点と終了点は、AngularJSで提供される他のすべてのHTMLディレクティブ構文フレーバーもサポートします（&lt;strong&gt;data-ng-repeat-start&lt;/strong&gt;、&lt;strong&gt;x-ng-repeat-start&lt;/strong&gt;、&lt;strong&gt;ng：repeat-startなど&lt;/strong&gt;）。</target>
        </trans-unit>
        <trans-unit id="6cf9ca1b48f086d137d2fcb4ce7667c3b44ff3ed" translate="yes" xml:space="preserve">
          <source>The debugger allows you to access the currently selected element in the console as &lt;code&gt;$0&lt;/code&gt; variable.</source>
          <target state="translated">デバッガーを使用すると、コンソールで現在選択されている要素に &lt;code&gt;$0&lt;/code&gt; 変数としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3082e7b0af57ed1e4eff6c089ae1878d3da1901b" translate="yes" xml:space="preserve">
          <source>The declaration should be created in the format of &lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$http.config&lt;/a&gt;:</source>
          <target state="translated">宣言は&lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$ http.configの&lt;/a&gt;形式で作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d28f0c2f0f5b42bd7a8d61c72d07ab41bac315ed" translate="yes" xml:space="preserve">
          <source>The declarative process is easier to understand.</source>
          <target state="translated">宣言的な処理の方がわかりやすいです。</target>
        </trans-unit>
        <trans-unit id="c0cfb0f1a7c425f909fe0bc36aa9ca3838fbff7c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;$isEmpty&lt;/code&gt; function checks whether the value is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;$isEmpty&lt;/code&gt; 関数は、値が &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;''&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; 、または &lt;code&gt;NaN&lt;/code&gt; であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="6418bf8b84a736c531737d93d5eebd5e4c6bf159" translate="yes" xml:space="preserve">
          <source>The default CSS for &lt;code&gt;ngHide&lt;/code&gt;, the inverse method to &lt;code&gt;ngShow&lt;/code&gt;, makes ngAria redundant. It toggles &lt;code&gt;aria-hidden&lt;/code&gt; on the directive when it is hidden or shown, but the content is already hidden with &lt;code&gt;display: none&lt;/code&gt;. See explanation for &lt;a href=&quot;accessibility#ngshow.html&quot;&gt;ngShow&lt;/a&gt; when overriding the default CSS.</source>
          <target state="translated">デフォルトCSS &lt;code&gt;ngHide&lt;/code&gt; 、逆にこの方法 &lt;code&gt;ngShow&lt;/code&gt; は、ngAriaの冗長になります。ディレクティブが非表示または表示のときに &lt;code&gt;aria-hidden&lt;/code&gt; を切り替えますが、コンテンツは &lt;code&gt;display: none&lt;/code&gt; すでに非表示になっています。デフォルトのCSSをオーバーライドする場合は、&lt;a href=&quot;accessibility#ngshow.html&quot;&gt;ngShowの&lt;/a&gt;説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="58168ad0626f3db21d1a561fbfb468e194ad0a4e" translate="yes" xml:space="preserve">
          <source>The default actions are:</source>
          <target state="translated">デフォルトのアクションは</target>
        </trans-unit>
        <trans-unit id="165f67c4b986077c141a0b4eb8be5a4d57bb86e9" translate="yes" xml:space="preserve">
          <source>The default behaviour in &lt;code&gt;ngModel&lt;/code&gt; is that the model value is set to &lt;code&gt;undefined&lt;/code&gt; when the validation determines that the value is invalid. By setting the &lt;code&gt;allowInvalid&lt;/code&gt; property to true, the model will still be updated even if the value is invalid.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; のデフォルトの動作では、検証により値が無効であると判断された場合、モデルの値は &lt;code&gt;undefined&lt;/code&gt; に設定されます。 &lt;code&gt;allowInvalid&lt;/code&gt; プロパティをtrueに設定すると、値が無効な場合でもモデルは引き続き更新されます。</target>
        </trans-unit>
        <trans-unit id="f996c0e32ed6964a734c9d13e1970793b933d9c8" translate="yes" xml:space="preserve">
          <source>The default cache value can be set by updating the &lt;a href=&quot;%24http#defaults.html&quot;&gt;&lt;code&gt;$http.defaults.cache&lt;/code&gt;&lt;/a&gt; property or the &lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt;&lt;code&gt;$httpProvider.defaults.cache&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">デフォルトのキャッシュ値を更新することで設定することができます&lt;a href=&quot;%24http#defaults.html&quot;&gt; &lt;code&gt;$http.defaults.cache&lt;/code&gt; &lt;/a&gt;プロパティまたは&lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt; &lt;code&gt;$httpProvider.defaults.cache&lt;/code&gt; &lt;/a&gt;プロパティを。</target>
        </trans-unit>
        <trans-unit id="a306ec119f2eaccbe8d649fada9aaf660ff1448f" translate="yes" xml:space="preserve">
          <source>The default comparator</source>
          <target state="translated">デフォルトのコンパレータ</target>
        </trans-unit>
        <trans-unit id="3449c46250e0ef1f6af24c7d14ff151093f05f3a" translate="yes" xml:space="preserve">
          <source>The default instance of &lt;code&gt;$sceDelegate&lt;/code&gt; should work out of the box with little pain. While you can override it completely to change the behavior of &lt;code&gt;$sce&lt;/code&gt;, the common case would involve configuring the &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; instead by setting your own trusted and banned resource lists for trusting URLs used for loading AngularJS resources such as templates. Refer &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;$sceDelegate&lt;/code&gt; のデフォルトのインスタンスは、箱から出してすぐに機能するはずです。あなたは完全に振る舞い変更し、それを上書きすることができますが &lt;code&gt;$sce&lt;/code&gt; 、一般的なケースは、設定伴うだろう&lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProviderを&lt;/a&gt;テンプレートなどの負荷AngularJSのリソースのために使用されるURLを信頼するために、独自の信頼できると禁止されたリソースリストを設定することにより、代わりに。&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.trustedResourceUrlList&lt;/a&gt;および&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.bannedResourceUrlListを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="465c73e00ec2667af675d53734d888ec91f718c7" translate="yes" xml:space="preserve">
          <source>The default instance of &lt;code&gt;$sceDelegate&lt;/code&gt; should work out of the box with little pain. While you can override it completely to change the behavior of &lt;code&gt;$sce&lt;/code&gt;, the common case would involve configuring the &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; instead by setting your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as templates. Refer &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;$sceDelegate&lt;/code&gt; のデフォルトのインスタンスは、ほとんど問題なくそのまま使用できます。あなたは完全に振る舞い変更し、それを上書きすることができますが &lt;code&gt;$sce&lt;/code&gt; 、一般的なケースは、設定伴うだろう&lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProviderを&lt;/a&gt;テンプレートなどの負荷AngularJSのリソースのために使用されるURLを信頼するための独自のホワイトリストとブラックリストを設定することにより、代わりに。&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt;および&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider.resourceUrlBlacklistを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="3fe33aadf3de1f1f3b0fe8806c8376a4a04f5ea1" translate="yes" xml:space="preserve">
          <source>The default is to log &lt;code&gt;debug&lt;/code&gt; messages. You can use &lt;a href=&quot;../provider/%24logprovider&quot;&gt;ng.$logProvider#debugEnabled&lt;/a&gt; to change this.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;debug&lt;/code&gt; メッセージをログに記録します。&lt;a href=&quot;../provider/%24logprovider&quot;&gt;ng。$ logProvider＃debugEnabled&lt;/a&gt;を使用してこれを変更できます。</target>
        </trans-unit>
        <trans-unit id="04bb80a0e51b2e3fa92fe97b18ff2c753c1617a0" translate="yes" xml:space="preserve">
          <source>The default value for the prefix is &lt;code&gt;'!'&lt;/code&gt;.</source>
          <target state="translated">接頭辞のデフォルト値は &lt;code&gt;'!'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5bced592a048c4e28bc51dd718accfdb3fc3710b" translate="yes" xml:space="preserve">
          <source>The default value is false.</source>
          <target state="translated">デフォルト値は false です。</target>
        </trans-unit>
        <trans-unit id="d93c5aa93414c0c9151cab4bbeb573041c98a22c" translate="yes" xml:space="preserve">
          <source>The default value is true.</source>
          <target state="translated">デフォルト値は true です。</target>
        </trans-unit>
        <trans-unit id="1d4e6cb0347f97a10e0bfcabf516d77b15974d7c" translate="yes" xml:space="preserve">
          <source>The default values satisfy a wide range of usecases, but you may choose to overwrite any of them to further customize your instances. The available properties are:</source>
          <target state="translated">デフォルト値は様々なユースケースを満たしていますが、インスタンスをさらにカスタマイズするために、それらのいずれかを上書きすることもできます。利用可能なプロパティは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8d058a405d150881e8c02cef5a763d1a9cac9129" translate="yes" xml:space="preserve">
          <source>The default, built-in comparator should be sufficient for most usecases. In short, it compares numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to using their index in the original collection, sorts values of different types by type and puts &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; values at the end of the sorted list.</source>
          <target state="translated">ほとんどの場合、デフォルトの組み込みコンパレータで十分です。つまり、数値を数値で比較し、文字列をアルファベット順に（大文字と小文字を区別せずに）比較します。オブジェクトは元のコレクションのインデックスを使用するようにフォールバックし、タイプごとに異なるタイプの値をソートし、ソートされたリストの最後に &lt;code&gt;undefined&lt;/code&gt; と &lt;code&gt;null&lt;/code&gt; 値を配置します。 。</target>
        </trans-unit>
        <trans-unit id="f8a104f5d8a2055e932927787187ea1605cde61f" translate="yes" xml:space="preserve">
          <source>The defaults can also be set at runtime via the &lt;code&gt;$http.defaults&lt;/code&gt; object in the same fashion. For example:</source>
          <target state="translated">デフォルトは、同様に実行時に &lt;code&gt;$http.defaults&lt;/code&gt; オブジェクトを介して設定することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="a63d9c4d9deff7d05bd9e7b756db067981e19e91" translate="yes" xml:space="preserve">
          <source>The diagram and the example below describe how AngularJS interacts with the browser's event loop.</source>
          <target state="translated">下の図と例では、AngularJSがブラウザのイベントループとどのように相互作用するかを説明しています。</target>
        </trans-unit>
        <trans-unit id="5985a11da86b3a9b2c8dd516c741a69a00b22550" translate="yes" xml:space="preserve">
          <source>The difference between Compile and Link</source>
          <target state="translated">コンパイルとリンクの違い</target>
        </trans-unit>
        <trans-unit id="282c0e17a8f643432cf46d1ac582e22bfd94be70" translate="yes" xml:space="preserve">
          <source>The difference resides in the return value of the factory function. You can either return a &lt;a href=&quot;%24compile#directive-definition-object.html&quot;&gt;Directive Definition Object (see below)&lt;/a&gt; that defines the directive properties, or just the &lt;code&gt;postLink&lt;/code&gt; function (all other properties will have the default values).</source>
          <target state="translated">違いは、ファクトリ関数の戻り値にあります。ディレクティブプロパティを定義するディレクティブ&lt;a href=&quot;%24compile#directive-definition-object.html&quot;&gt;定義オブジェクト（以下を参照）&lt;/a&gt;、または &lt;code&gt;postLink&lt;/code&gt; 関数のみを返すことができます（他のすべてのプロパティにはデフォルト値があります）。</target>
        </trans-unit>
        <trans-unit id="9dd111b228d3d65fff5c43c5f7db648c685d4fa3" translate="yes" xml:space="preserve">
          <source>The directive can be applied to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, but the preferred usage is to apply multiple &lt;code&gt;ngCloak&lt;/code&gt; directives to small portions of the page to permit progressive rendering of the browser view.</source>
          <target state="translated">ディレクティブは &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 要素に適用できますが、ブラウザビューのプログレッシブレンダリングを可能にするために、ページの小さな部分に複数の &lt;code&gt;ngCloak&lt;/code&gt; ディレクティブを適用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="73b6dab32084cac10b23ad24d2acde7b9e588021" translate="yes" xml:space="preserve">
          <source>The directive definition object provides instructions to the &lt;a href=&quot;%24compile&quot;&gt;compiler&lt;/a&gt;. The attributes are:</source>
          <target state="translated">ディレクティブ定義オブジェクトは、&lt;a href=&quot;%24compile&quot;&gt;コンパイラに&lt;/a&gt;指示を提供します。属性は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="15084cf390b2739682db07ef53f0e5ed0841df53" translate="yes" xml:space="preserve">
          <source>The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it from the template cache), &lt;code&gt;ngSwitch&lt;/code&gt; simply chooses one of the nested elements and makes it visible based on which element matches the value obtained from the evaluated expression. In other words, you define a container element (where you place the directive), place an expression on the &lt;strong&gt;&lt;code&gt;on=&quot;...&quot;&lt;/code&gt; attribute&lt;/strong&gt; (or the &lt;strong&gt;&lt;code&gt;ng-switch=&quot;...&quot;&lt;/code&gt; attribute&lt;/strong&gt;), define any inner elements inside of the directive and place a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on expression is evaluated. If a matching expression is not found via a when attribute then an element with the default attribute is displayed.</source>
          <target state="translated">ディレクティブ自体はngIncludeと同様に機能しますが、テンプレートコードをダウンロードする（またはテンプレートキャッシュからロードする）代わりに、 &lt;code&gt;ngSwitch&lt;/code&gt; はネストされた要素の1つを選択し、評価された式から取得した値に一致する要素に基づいて表示します。つまり、コンテナエレメント（ディレクティブを配置する場所）を定義し、&lt;strong&gt; &lt;code&gt;on=&quot;...&quot;&lt;/code&gt; 属性&lt;/strong&gt;（または&lt;strong&gt; &lt;code&gt;ng-switch=&quot;...&quot;&lt;/code&gt; 属性に式を配置します&lt;/strong&gt;）、ディレクティブ内の内部要素を定義し、要素ごとにwhen属性を配置します。when属性は、on式が評価されるときに表示する要素をngSwitchに通知するために使用されます。when属性を介して一致する式が見つからない場合、デフォルトの属性を持つ要素が表示されます。</target>
        </trans-unit>
        <trans-unit id="bc305a9daf06fb29b927a141c769f1857bf13fe7" translate="yes" xml:space="preserve">
          <source>The directive operates in three different ways, depending on which of three types the expression evaluates to:</source>
          <target state="translated">このディレクティブは、式がどの型に評価されるかによって、3つの異なる方法で動作します。</target>
        </trans-unit>
        <trans-unit id="00457ef4c0d1bfc1d66159cc11032117ca66eb2f" translate="yes" xml:space="preserve">
          <source>The directive sets the &lt;code&gt;required&lt;/code&gt; attribute on the element if the AngularJS expression inside &lt;code&gt;ngRequired&lt;/code&gt; evaluates to true. A special directive for setting &lt;code&gt;required&lt;/code&gt; is necessary because we cannot use interpolation inside &lt;code&gt;required&lt;/code&gt;. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;ngRequired&lt;/code&gt; 内のAngularJS式がtrueと評価された場合、ディレクティブは要素に &lt;code&gt;required&lt;/code&gt; 属性を設定します。 &lt;code&gt;required&lt;/code&gt; 内では補間を使用できないため、requiredを設定するための特別なディレクティブが必要 &lt;code&gt;required&lt;/code&gt; 。詳細については、&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="511cc4dca94e3becdfd05d6159bf6c72e0c27b2a" translate="yes" xml:space="preserve">
          <source>The directive that identifies where the &lt;a href=&quot;../type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; should render its &lt;strong&gt;Components&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;が&lt;strong&gt;コンポーネント&lt;/strong&gt;をレンダリングする場所を識別するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="a19715b5a8ea141e59e2b3d389be6963e887a773" translate="yes" xml:space="preserve">
          <source>The directive that identifies where the &lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; should render its &lt;strong&gt;Components&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;が&lt;strong&gt;コンポーネント&lt;/strong&gt;をレンダリングする場所を識別するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="91b3106d7e0128b073f59400b2d855bf5dc85ef6" translate="yes" xml:space="preserve">
          <source>The directive that identifies where the &lt;a href=&quot;type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; should render its &lt;strong&gt;Components&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;が&lt;strong&gt;コンポーネント&lt;/strong&gt;をレンダリングする場所を識別するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="f8e427fdf8b7a0e2bc769988a131cb6027a72d85" translate="yes" xml:space="preserve">
          <source>The directive won't add duplicate classes if a particular class was already set.</source>
          <target state="translated">特定のクラスが既に設定されている場合は、このディレクティブは重複したクラスを追加しません。</target>
        </trans-unit>
        <trans-unit id="af273d442182f77e2838bf78efeac232e7701baf" translate="yes" xml:space="preserve">
          <source>The easiest way to reference the control's &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; method is by making sure the input is placed inside a form that has a &lt;code&gt;name&lt;/code&gt; attribute. This is important because &lt;code&gt;form&lt;/code&gt; controllers are published to the related scope under the name in their &lt;code&gt;name&lt;/code&gt; attribute.</source>
          <target state="translated">コントロールの&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;メソッドを参照する最も簡単な方法は、 &lt;code&gt;name&lt;/code&gt; 属性を持つフォーム内に入力が配置されていることを確認することです。 &lt;code&gt;form&lt;/code&gt; コントローラは &lt;code&gt;name&lt;/code&gt; 属性の名前で関連するスコープに公開されるため、これは重要です。</target>
        </trans-unit>
        <trans-unit id="b2fa37ba708729a70880e839aacbcf83f7ee4ecc" translate="yes" xml:space="preserve">
          <source>The easiest way to unit-test a component controller is by using the &lt;a href=&quot;../api/ngmock/service/%24componentcontroller&quot;&gt;$componentController&lt;/a&gt; that is included in &lt;a href=&quot;../api/ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt;. The advantage of this method is that you do not have to create any DOM elements. The following example shows how to do this for the &lt;code&gt;heroDetail&lt;/code&gt; component from above.</source>
          <target state="translated">コンポーネントコントローラーをユニットテストする最も簡単な方法は、&lt;a href=&quot;../api/ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; に&lt;/a&gt;含まれている&lt;a href=&quot;../api/ngmock/service/%24componentcontroller&quot;&gt;$ componentController&lt;/a&gt;を使用することです。この方法の利点は、DOM要素を作成する必要がないことです。次の例は、上記の &lt;code&gt;heroDetail&lt;/code&gt; コンポーネントに対してこれを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1dba15ddc68176129beff67ce23ae391d8f5e9b2" translate="yes" xml:space="preserve">
          <source>The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element. The &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is predefined in AngularJS and sets the display style to none (using an &lt;code&gt;!important&lt;/code&gt; flag). For CSP mode please add &lt;code&gt;angular-csp.css&lt;/code&gt; to your HTML file (see &lt;a href=&quot;ngcsp&quot;&gt;ngCsp&lt;/a&gt;).</source>
          <target state="translated">要素は、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスを要素から削除または追加することによって表示または非表示になります。 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスはAngularJSで事前に定義し、（使用noneに表示スタイルを設定している &lt;code&gt;!important&lt;/code&gt; フラグ）。CSPモードの &lt;code&gt;angular-csp.css&lt;/code&gt; は、HTMLファイルにangular-csp.cssを追加してください（&lt;a href=&quot;ngcsp&quot;&gt;ngCspを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7ccfb7caa29243ea5f83ef0ab8642feaa5add93c" translate="yes" xml:space="preserve">
          <source>The element name or '*' to match any element.</source>
          <target state="translated">任意の要素にマッチする要素名または'*'。</target>
        </trans-unit>
        <trans-unit id="d6f6332d7faa347a9930f464a7c8e2d5542086d4" translate="yes" xml:space="preserve">
          <source>The empty array in &lt;code&gt;angular.module('myApp', [])&lt;/code&gt;. This array is the list of modules &lt;code&gt;myApp&lt;/code&gt; depends on.</source>
          <target state="translated">&lt;code&gt;angular.module('myApp', [])&lt;/code&gt; の空の配列。この配列は、 &lt;code&gt;myApp&lt;/code&gt; が依存するモジュールのリストです。</target>
        </trans-unit>
        <trans-unit id="7bc9a115378ed99db9c2142b56d9fc3aa535767e" translate="yes" xml:space="preserve">
          <source>The enter and leave animation occur concurrently.</source>
          <target state="translated">入室と退室のアニメーションが同時に発生します。</target>
        </trans-unit>
        <trans-unit id="b13d56ee0aa77bc8cf191a0098e0ae12681eb3cb" translate="yes" xml:space="preserve">
          <source>The event life cycle starts at the scope on which &lt;code&gt;$broadcast&lt;/code&gt; was called. All &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; listening for &lt;code&gt;name&lt;/code&gt; event on this scope get notified. Afterwards, the event propagates to all direct and indirect scopes of the current scope and calls all registered listeners along the way. The event cannot be canceled.</source>
          <target state="translated">イベントのライフサイクルは、 &lt;code&gt;$broadcast&lt;/code&gt; が呼び出されたスコープから始まります。このスコープで &lt;code&gt;name&lt;/code&gt; イベントをリッスンしているすべての&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;リスナー&lt;/a&gt;に通知されます。その後、イベントは現在のスコープのすべての直接および間接スコープに伝播し、登録されているすべてのリスナーを途中で呼び出します。イベントはキャンセルできません。</target>
        </trans-unit>
        <trans-unit id="ef1ec4f5065965f767cdb19361d488e339b8e865" translate="yes" xml:space="preserve">
          <source>The event life cycle starts at the scope on which &lt;code&gt;$emit&lt;/code&gt; was called. All &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; listening for &lt;code&gt;name&lt;/code&gt; event on this scope get notified. Afterwards, the event traverses upwards toward the root scope and calls all registered listeners along the way. The event will stop propagating if one of the listeners cancels it.</source>
          <target state="translated">イベントのライフサイクルは、 &lt;code&gt;$emit&lt;/code&gt; が呼び出されたスコープから始まります。このスコープで &lt;code&gt;name&lt;/code&gt; イベントをリッスンしているすべての&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;リスナー&lt;/a&gt;に通知されます。その後、イベントはルートスコープに向かって上方に移動し、途中で登録されているすべてのリスナーを呼び出します。リスナーの1つがキャンセルすると、イベントの伝播は停止します。</target>
        </trans-unit>
        <trans-unit id="9dba21cdf767393b24f9c532ed6d7024629e7654" translate="yes" xml:space="preserve">
          <source>The event listener function format is: &lt;code&gt;function(event, args...)&lt;/code&gt;. The &lt;code&gt;event&lt;/code&gt; object passed into the listener has the following attributes:</source>
          <target state="translated">イベントリスナー関数の形式は &lt;code&gt;function(event, args...)&lt;/code&gt; です。 &lt;code&gt;event&lt;/code&gt; リスナーに渡されるオブジェクトは、次の属性があります。</target>
        </trans-unit>
        <trans-unit id="a9dc8aea8f492b469f1f28002083ced0171b9068" translate="yes" xml:space="preserve">
          <source>The event's callback gets executed. This enters the JavaScript context. The callback can modify the DOM structure.</source>
          <target state="translated">イベントのコールバックが実行されます。これは JavaScript のコンテキストに入ります。コールバックは DOM 構造を変更することができます。</target>
        </trans-unit>
        <trans-unit id="e6d577c1df19a49c4d3d3fea271e11112de46dcd" translate="yes" xml:space="preserve">
          <source>The example above also contains a &lt;a href=&quot;filter&quot;&gt;filter&lt;/a&gt;. A filter formats the value of an expression for display to the user. In the example above, the filter &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; formats a number into an output that looks like money.</source>
          <target state="translated">上記の例には&lt;a href=&quot;filter&quot;&gt;フィルタ&lt;/a&gt;も含まれています。フィルターは、ユーザーに表示するために式の値をフォーマットします。上記の例では、フィルター&lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt;は数値をお金のように見える出力にフォーマットします。</target>
        </trans-unit>
        <trans-unit id="93c49d25f095d6630edee2c4ee7687214904ed84" translate="yes" xml:space="preserve">
          <source>The example above sets up a transition for both the in and out phases, but we can also target the out or in phases directly via &lt;code&gt;ng-anchor-out&lt;/code&gt; and &lt;code&gt;ng-anchor-in&lt;/code&gt;.</source>
          <target state="translated">上記の例では、inフェーズとoutフェーズの両方に遷移を設定していますが、 &lt;code&gt;ng-anchor-out&lt;/code&gt; と &lt;code&gt;ng-anchor-in&lt;/code&gt; を介してoutまたはinフェーズを直接ターゲットにすることもできます。</target>
        </trans-unit>
        <trans-unit id="ae348e668faf38c45aa29b06f0b38359e62a7332" translate="yes" xml:space="preserve">
          <source>The example also shows the &quot;offset&quot; keyword, which allows you to offset the value of the &quot;#&quot; variable.</source>
          <target state="translated">この例では、&quot;offset&quot; キーワードを使用して、&quot;#&quot; 変数の値をオフセットすることもできます。</target>
        </trans-unit>
        <trans-unit id="dcef32a0c9e7e773d2caa1d0facc04649077955b" translate="yes" xml:space="preserve">
          <source>The example below demonstrates a simple &lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;, where the data is sorted by age in descending order (expression is set to &lt;code&gt;'-age'&lt;/code&gt;). The &lt;code&gt;comparator&lt;/code&gt; is not set, which means it defaults to the built-in comparator.</source>
          <target state="translated">以下の例は、単純な&lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeatを&lt;/a&gt;示しています。ここでは、データは年齢で降順にソートされています（式は &lt;code&gt;'-age'&lt;/code&gt; に設定されています）。 &lt;code&gt;comparator&lt;/code&gt; 内蔵のコンパレータにデフォルトを意味し、設定されていません。</target>
        </trans-unit>
        <trans-unit id="118b4a4365ad487da58b1630aea69b571bfdefff" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how to perform animations using ngClass.</source>
          <target state="translated">以下の例では、ngClass を使用してアニメーションを実行する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b5901cc794ac4afcb24616439a439ca1a38725ff" translate="yes" xml:space="preserve">
          <source>The example below illustrates the use of a vertical scroll-offset (specified as a fixed value). See &lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;$anchorScroll.yOffset&lt;/a&gt; for more details.</source>
          <target state="translated">以下の例は、垂直スクロールオフセット（固定値として指定）の使用法を示しています。詳細は&lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;$ anchorScroll.yOffset&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a78d05887665a9a98ad3b3ca5dd98170ce670e6e" translate="yes" xml:space="preserve">
          <source>The example below makes use of this feature:</source>
          <target state="translated">以下の例では、この機能を利用しています。</target>
        </trans-unit>
        <trans-unit id="14f320b8cc2e2763c82039f6b188aeca101a77fe" translate="yes" xml:space="preserve">
          <source>The example below showcases a more advanced version of the &lt;code&gt;.fold-animation&lt;/code&gt; from the example above:</source>
          <target state="translated">以下の例は、上記の例の &lt;code&gt;.fold-animation&lt;/code&gt; のより高度なバージョンを示しています。</target>
        </trans-unit>
        <trans-unit id="e6fe351ea2c33b51b2ae753847781d2a1ebb1324" translate="yes" xml:space="preserve">
          <source>The example below shows how an &lt;code&gt;enter&lt;/code&gt; animation can be made possible on an element using &lt;code&gt;ng-if&lt;/code&gt;:</source>
          <target state="translated">以下の例は、 &lt;code&gt;ng-if&lt;/code&gt; を使用して要素で &lt;code&gt;enter&lt;/code&gt; アニメーションを可能にする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d01c3c0993f97fc120473f6fed8b31a7663c420f" translate="yes" xml:space="preserve">
          <source>The example below shows how to perform animations during class changes:</source>
          <target state="translated">以下の例では、クラス変更時にアニメーションを実行する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="6205078d09d3fd1c6edadc598319a67cba2952e4" translate="yes" xml:space="preserve">
          <source>The example below shows how we can create a folding animation on an element using &lt;code&gt;ng-if&lt;/code&gt;:</source>
          <target state="translated">以下の例は、 &lt;code&gt;ng-if&lt;/code&gt; を使用して要素に折りたたみアニメーションを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9e746afeaac000344d9d6b97ab0c580a09fc7751" translate="yes" xml:space="preserve">
          <source>The example below therefore calls the filter directly in the controller. By this, the controller is able to call the filter only when needed (e.g. when the data is loaded from the backend or the filter expression is changed).</source>
          <target state="translated">したがって、以下の例では、コントローラ内で直接フィルタを呼び出しています。これにより、コントローラは必要なときだけフィルタを呼び出すことができます (バックエンドからデータが読み込まれたときやフィルタ式が変更されたときなど)。</target>
        </trans-unit>
        <trans-unit id="de23243571a260c0d0fc8a2c48e1af5d73b5b207" translate="yes" xml:space="preserve">
          <source>The example below uses the filter called &lt;a href=&quot;../api/ng/filter/filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;. This filter reduces arrays into sub arrays based on conditions. The filter can be applied in the view template with markup like &lt;code&gt;{{ctrl.array | filter:'a'}}&lt;/code&gt;, which would do a fulltext search for &quot;a&quot;. However, using a filter in a view template will reevaluate the filter on every digest, which can be costly if the array is big.</source>
          <target state="translated">以下の例では、filterという&lt;a href=&quot;../api/ng/filter/filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;使用しています。このフィルターは、条件に基づいて配列をサブ配列に縮小します。このフィルターは、 &lt;code&gt;{{ctrl.array | filter:'a'}}&lt;/code&gt; 、 &quot;a&quot;の全文検索を行います。ただし、ビューテンプレートでフィルタを使用すると、すべてのダイジェストでフィルタが再評価されます。これは、配列が大きい場合にコストがかかる可能性があります。</target>
        </trans-unit>
        <trans-unit id="dffb86218d7a4f9da6fc690c45a79f6af3702634" translate="yes" xml:space="preserve">
          <source>The example below will overwrite the default &lt;code&gt;$exceptionHandler&lt;/code&gt; in order to (a) log uncaught errors to the backend for later inspection by the developers and (b) to use &lt;code&gt;$log.warn()&lt;/code&gt; instead of &lt;code&gt;$log.error()&lt;/code&gt;.</source>
          <target state="translated">以下の例では、デフォルトの &lt;code&gt;$exceptionHandler&lt;/code&gt; を上書きして、（a）キャッチされていないエラーをバックエンドに記録して、後で開発者が検査できるようにし、（b） &lt;code&gt;$log.warn()&lt;/code&gt; 代わりに &lt;code&gt;$log.error()&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ffbd243d6aa30bd959233397fedd53c9c8be3b8b" translate="yes" xml:space="preserve">
          <source>The example module below has two services, each with various dependencies:</source>
          <target state="translated">以下のモジュールの例では、2つのサービスがあり、それぞれが様々な依存関係を持っています。</target>
        </trans-unit>
        <trans-unit id="26b88996606efd1a2fa2d1f8ee91c2b93f5de125" translate="yes" xml:space="preserve">
          <source>The examples use the &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; testing framework.</source>
          <target state="translated">例では、&lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt;テストフレームワークを使用しています。</target>
        </trans-unit>
        <trans-unit id="c48af1f0721fe39cf6b96615568339a6e74d80d0" translate="yes" xml:space="preserve">
          <source>The examples use the &lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; testing framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69df9ff2c507a1bca5d9605667ecdf1f7c1667e3" translate="yes" xml:space="preserve">
          <source>The expression indicating how to enumerate a collection. These formats are currently supported:</source>
          <target state="translated">コレクションを列挙する方法を示す式。これらの形式は現在サポートされています。</target>
        </trans-unit>
        <trans-unit id="fb146546194737424a42b8fcad30d7883d5da959" translate="yes" xml:space="preserve">
          <source>The factory function is invoked only once when the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;compiler&lt;/a&gt; matches the directive for the first time. You can perform any initialization work here. The function is invoked using &lt;a href=&quot;../api/auto/service/%24injector#invoke.html&quot;&gt;$injector.invoke&lt;/a&gt; which makes it injectable just like a controller.</source>
          <target state="translated">ファクトリー関数は、&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;コンパイラー&lt;/a&gt;がディレクティブに初めて一致したときに一度だけ呼び出されます。ここで初期化作業を実行できます。関数は&lt;a href=&quot;../api/auto/service/%24injector#invoke.html&quot;&gt;$ injector.invoke&lt;/a&gt;を使用して呼び出され、コントローラーのように注入可能になります。</target>
        </trans-unit>
        <trans-unit id="bac0300463ee737a9762b2ab131e79710f19a302" translate="yes" xml:space="preserve">
          <source>The factory function that will be executed to return the animation object.</source>
          <target state="translated">アニメーションオブジェクトを返すために実行されるファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="9b2b49cac29c83329e4d2e42cf31d5ed84a9baa0" translate="yes" xml:space="preserve">
          <source>The filter function is registered with the &lt;code&gt;$injector&lt;/code&gt; under the filter name suffix with &lt;code&gt;Filter&lt;/code&gt;.</source>
          <target state="translated">フィルター関数は、 &lt;code&gt;Filter&lt;/code&gt; のフィルター名サフィックスの下で &lt;code&gt;$injector&lt;/code&gt; 登録されます。</target>
        </trans-unit>
        <trans-unit id="ad14f184c35849cbc77ad9f33986e01e4fc80461" translate="yes" xml:space="preserve">
          <source>The filter function should be a &lt;a href=&quot;http://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;, which means that it should always return the same result given the same input arguments and should not affect external state, for example, other AngularJS services. AngularJS relies on this contract and will by default execute a filter only when the inputs to the function change. &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; are possible, but less performant.</source>
          <target state="translated">フィルター関数は&lt;a href=&quot;http://en.wikipedia.org/wiki/Pure_function&quot;&gt;純粋な関数&lt;/a&gt;である必要があります。つまり、同じ入力引数を指定すると常に同じ結果を返し、他のAngularJSサービスなどの外部状態に影響を与えないようにする必要があります。 AngularJSはこのコントラクトに依存しており、デフォルトでは、関数への入力が変更されたときにのみフィルターを実行します。&lt;a href=&quot;filter#stateful-filters.html&quot;&gt;ステートフルフィルター&lt;/a&gt;は可能ですが、パフォーマンスは低下します。</target>
        </trans-unit>
        <trans-unit id="4092e7241515a646369dbb925443cee4cadca86d" translate="yes" xml:space="preserve">
          <source>The filter function should be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;, which means that it should always return the same result given the same input arguments and should not affect external state, for example, other AngularJS services. AngularJS relies on this contract and will by default execute a filter only when the inputs to the function change. &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; are possible, but less performant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c03d18cc2cc78ca4084addd3298d3bc070061e" translate="yes" xml:space="preserve">
          <source>The filter function which will be used to filter all animations. If a falsy value is returned, no animation will be performed. The function will be called with the following arguments:</source>
          <target state="translated">すべてのアニメーションをフィルタリングするために使用されるフィルタ関数です。誤った値が返された場合、アニメーションは実行されません。この関数は以下の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a937ae27c98f5d7954639b98bccb584d67a2cdbf" translate="yes" xml:space="preserve">
          <source>The final result is an array of those elements that the predicate returned true for.</source>
          <target state="translated">最終的な結果は、述語が真を返した要素の配列です。</target>
        </trans-unit>
        <trans-unit id="c07e6b5dfc2388c07c722e7af813875eb5b9564a" translate="yes" xml:space="preserve">
          <source>The first issue we have to solve is that the dialog box template expects &lt;code&gt;title&lt;/code&gt; to be defined. But we would like the template's scope property &lt;code&gt;title&lt;/code&gt; to be the result of interpolating the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element's &lt;code&gt;title&lt;/code&gt; attribute (i.e. &lt;code&gt;&quot;Hello {{username}}&quot;&lt;/code&gt;). Furthermore, the buttons expect the &lt;code&gt;onOk&lt;/code&gt; and &lt;code&gt;onCancel&lt;/code&gt; functions to be present in the scope. This limits the usefulness of the widget. To solve the mapping issue we use the &lt;code&gt;scope&lt;/code&gt; to create local variables which the template expects as follows:</source>
          <target state="translated">私たちが解決しなければならない最初の問題は、ダイアログボックステンプレートが &lt;code&gt;title&lt;/code&gt; 定義を期待していることです。ただし、テンプレートのスコーププロパティの &lt;code&gt;title&lt;/code&gt; は、 &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;title&lt;/code&gt; 属性（つまり、 &lt;code&gt;&quot;Hello {{username}}&quot;&lt;/code&gt; ）を補間した結果にしたいとします。また、ボタンが期待 &lt;code&gt;onOk&lt;/code&gt; と &lt;code&gt;onCancel&lt;/code&gt; 関数がスコープ内に存在します。これにより、ウィジェットの有用性が制限されます。マッピングの問題を解決するには、 &lt;code&gt;scope&lt;/code&gt; を使用して、テンプレートが期待するローカル変数を次のように作成します。</target>
        </trans-unit>
        <trans-unit id="afe6d764a0f6fdc60d923fd9d9a7197ddd360bfa" translate="yes" xml:space="preserve">
          <source>The first kind of new markup are the &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt;. They apply special behavior to attributes or elements in the HTML. In the example above we use the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ng-app&lt;/code&gt;&lt;/a&gt; attribute, which is linked to a directive that automatically initializes our application. AngularJS also defines a directive for the &lt;a href=&quot;../api/ng/directive/input&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; element that adds extra behavior to the element. The &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;&lt;code&gt;ng-model&lt;/code&gt;&lt;/a&gt; directive stores/updates the value of the input field into/from a variable.</source>
          <target state="translated">新しいマークアップの最初の種類は&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;です。HTMLの属性または要素に特別な動作を適用します。上記の例では、アプリケーションを自動的に初期化するディレクティブにリンクされている&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ng-app&lt;/code&gt; &lt;/a&gt;属性を使用しています。AngularJSは、要素に追加の動作を追加する&lt;a href=&quot;../api/ng/directive/input&quot;&gt; &lt;code&gt;input&lt;/code&gt; &lt;/a&gt;要素のディレクティブも定義します。&lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt; &lt;code&gt;ng-model&lt;/code&gt; &lt;/a&gt;指令ストアは/変数から/への入力フィールドの値を更新します。</target>
        </trans-unit>
        <trans-unit id="72248b4ea7e8efbe0801cfc5a9d27f183313c350" translate="yes" xml:space="preserve">
          <source>The first time a template is used, it is loaded in the template cache for quick retrieval. You can load templates directly into the cache in a &lt;code&gt;script&lt;/code&gt; tag, by using &lt;a href=&quot;%24templaterequest&quot;&gt;&lt;code&gt;$templateRequest&lt;/code&gt;&lt;/a&gt;, or by consuming the &lt;code&gt;$templateCache&lt;/code&gt; service directly.</source>
          <target state="translated">テンプレートを初めて使用するときは、テンプレートキャッシュにロードされ、すばやく検索できます。&lt;a href=&quot;%24templaterequest&quot;&gt; &lt;code&gt;$templateRequest&lt;/code&gt; &lt;/a&gt;を使用するか、 &lt;code&gt;$templateCache&lt;/code&gt; サービスを直接使用することにより、 &lt;code&gt;script&lt;/code&gt; タグ内のキャッシュにテンプレートを直接ロードできます。</target>
        </trans-unit>
        <trans-unit id="61770f6e44a5dc9205ef2b85eee18df352de6525" translate="yes" xml:space="preserve">
          <source>The first two options of creating or looking up dependencies are not optimal because they hard code the dependency to the component. This makes it difficult, if not impossible, to modify the dependencies. This is especially problematic in tests, where it is often desirable to provide mock dependencies for test isolation.</source>
          <target state="translated">依存関係を作成または検索する最初の2つのオプションは、依存関係をコンポーネントにハードコードするため、最適ではありません。このため、依存関係を修正することは、不可能ではないにせよ、困難になります。これはテストにおいて特に問題があり、テストの分離のためにモック依存関係を提供することが望ましいことがよくあります。</target>
        </trans-unit>
        <trans-unit id="62d51362fba403748b0965a7020906ff662204d7" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element also &lt;strong&gt;matches&lt;/strong&gt;&lt;code&gt;ngModel&lt;/code&gt;:</source>
          <target state="translated">次の &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素も &lt;code&gt;ngModel&lt;/code&gt; と&lt;strong&gt;一致し&lt;/strong&gt;ます：</target>
        </trans-unit>
        <trans-unit id="1ce1ad6bc1a7291d5ceb94bf63f28f4491ef44ee" translate="yes" xml:space="preserve">
          <source>The following CSS classes are added and removed on the associated input/select/textarea element depending on the validity of the model.</source>
          <target state="translated">以下のCSSクラスは,モデルの有効性に応じて,関連するinput/select/textarea要素に追加されたり削除されたりします。</target>
        </trans-unit>
        <trans-unit id="24d21f0a2fb05faaab9a9fee5841089389838e09" translate="yes" xml:space="preserve">
          <source>The following actions are performed by this method:</source>
          <target state="translated">この方法では、以下の動作を行います。</target>
        </trans-unit>
        <trans-unit id="973c90fb359da23554571110c18a1c4f53efc003" translate="yes" xml:space="preserve">
          <source>The following always holds true:</source>
          <target state="translated">以下のことは、常に真実である。</target>
        </trans-unit>
        <trans-unit id="36b240b14e8533a4756636899c699ce28b123d00" translate="yes" xml:space="preserve">
          <source>The following code demonstrates adding a new response transformation to be run after the default response transformations have been run.</source>
          <target state="translated">次のコードは、デフォルトの応答変換が実行された後に実行される新しい応答変換を追加することを示しています。</target>
        </trans-unit>
        <trans-unit id="5254b655f465a130e45d925ee2b74ce105150f95" translate="yes" xml:space="preserve">
          <source>The following code shows how to setup and use the mock backend when unit testing a controller. First we create the controller under test:</source>
          <target state="translated">次のコードは、コントローラをユニットテストする際にモックバックエンドを設定して使用する方法を示しています。まず、テスト対象のコントローラを作成します。</target>
        </trans-unit>
        <trans-unit id="df345b34d500c13d2031f5af048b74463c6d90d4" translate="yes" xml:space="preserve">
          <source>The following code snippet shows a template with &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt; and curly-brace &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; bindings:</source>
          <target state="translated">次のコードスニペットは、&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;と中括弧&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;バインディングを含むテンプレートを示しています。</target>
        </trans-unit>
        <trans-unit id="c60eb5d3ceb258f2551ba66c48b7dc7f79064316" translate="yes" xml:space="preserve">
          <source>The following code will issue the &lt;strong&gt;ng-leave-stagger&lt;/strong&gt; event on the element provided:</source>
          <target state="translated">次のコードは、提供された要素で&lt;strong&gt;ng-leave-stagger&lt;/strong&gt;イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="4fd205de158756329787742f78166e78f85ffa62" translate="yes" xml:space="preserve">
          <source>The following default rules in CSP affect AngularJS:</source>
          <target state="translated">CSPの以下のデフォルトルールはAngularJSに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="90134ab79d7f6b3200f1037dc0cc7a63032e5047" translate="yes" xml:space="preserve">
          <source>The following demonstrates the various ways a directive (&lt;code&gt;myDir&lt;/code&gt; in this case) that matches all 4 types can be referenced from within a template.</source>
          <target state="translated">以下は、4つのタイプすべてに一致するディレクティブ（この場合は &lt;code&gt;myDir&lt;/code&gt; ）がテンプレート内から参照できるさまざまな方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cc2bb4d34c36efedb43f32cea70a8768eb4ff2f4" translate="yes" xml:space="preserve">
          <source>The following directives are &quot;animation aware&quot;:</source>
          <target state="translated">以下のディレクティブは「アニメーションを意識した」ものです。</target>
        </trans-unit>
        <trans-unit id="4afa83c5e442e93a0c03e046c0962ecf7210c99b" translate="yes" xml:space="preserve">
          <source>The following example demonstrates creating a &lt;code&gt;GreetingController&lt;/code&gt;, which attaches a &lt;code&gt;greeting&lt;/code&gt; property containing the string &lt;code&gt;'Hola!'&lt;/code&gt; to the &lt;code&gt;$scope&lt;/code&gt;:</source>
          <target state="translated">次の例では、作成実証 &lt;code&gt;GreetingController&lt;/code&gt; 添付し、 &lt;code&gt;greeting&lt;/code&gt; 含む文字列プロパティ &lt;code&gt;'Hola!'&lt;/code&gt; &lt;code&gt;$scope&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8f31c0ae4dcad4687f763e1857697fa67941c2cf" translate="yes" xml:space="preserve">
          <source>The following example expands on the simple component example and incorporates the concepts we introduced above:</source>
          <target state="translated">次の例は、単純なコンポーネントの例を拡張し、上で紹介した概念を取り入れたものです。</target>
        </trans-unit>
        <trans-unit id="a68dc016c804a0669d2cdafc91c3941186cea38f" translate="yes" xml:space="preserve">
          <source>The following example shows a simple way to utilize CSS transitions to style a form element that has been rendered as invalid after it has been validated:</source>
          <target state="translated">次の例は、検証後に無効と表示されたフォーム要素をスタイルするために CSS トランジションを利用する簡単な方法を示しています。</target>
        </trans-unit>
        <trans-unit id="56aa8c2fcf843e9817067b3a89350a550b362ccb" translate="yes" xml:space="preserve">
          <source>The following example shows a simple way to utilize CSS transitions to style an input element that has been rendered as invalid after it has been validated:</source>
          <target state="translated">次の例は、CSS トランジションを利用して、検証後に無効と表示された入力要素をスタイル化する簡単な方法を示しています。</target>
        </trans-unit>
        <trans-unit id="afb31a9a68862c6afcf96f6c3e11bb32e67080a5" translate="yes" xml:space="preserve">
          <source>The following example shows how to add two-way data-binding to contentEditable elements.</source>
          <target state="translated">以下の例では、contentEditable要素に双方向のデータバインディングを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d29bf3e06de230de3418eaafced38ca904f8bad6" translate="yes" xml:space="preserve">
          <source>The following example shows how to bind to getter/setters:</source>
          <target state="translated">以下の例では、ゲッター/セッターにバインドする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cf64ab22fdb663548e6a4a5465819cfebca2122b" translate="yes" xml:space="preserve">
          <source>The following example shows how to configure ngPluralize:</source>
          <target state="translated">以下の例では、ngPluralize の設定方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e211088f2987b057c3e47ee8d0f916c1b541890a" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a simple event tracking service and register it using &lt;a href=&quot;%24provide#provider.html&quot;&gt;$provide.provider()&lt;/a&gt;.</source>
          <target state="translated">次の例は、単純なイベント追跡サービスを作成し、&lt;a href=&quot;%24provide#provider.html&quot;&gt;$ provide.provider（）&lt;/a&gt;を使用して登録する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="49e8cb0259845374b5503fd5a0834e0ef3de3ec3" translate="yes" xml:space="preserve">
          <source>The following example shows how to override immediate updates. Changes on the inputs within the form will update the model only when the control loses focus (blur event).</source>
          <target state="translated">以下の例は、即時更新をオーバーライドする方法を示しています。フォーム内の入力に対する変更は、コントロールがフォーカスを失った場合(ブラーイベント)にのみモデルを更新します。</target>
        </trans-unit>
        <trans-unit id="608da6d18fbad58a833f943d30704c458a019301" translate="yes" xml:space="preserve">
          <source>The following example shows how to override immediate updates. Changes on the inputs within the form will update the model only when the control loses focus (blur event). If &lt;code&gt;escape&lt;/code&gt; key is pressed while the input field is focused, the value is reset to the value in the current model.</source>
          <target state="translated">次の例は、即時更新をオーバーライドする方法を示しています。フォーム内の入力を変更すると、コントロールがフォーカスを失ったときにのみモデルが更新されます（ぼかしイベント）。場合は &lt;code&gt;escape&lt;/code&gt; 入力フィールドにフォーカスがあるときにキーが押された場合、値は現在のモデルの値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="e25b61977236b595c690c1add8ceee3f297224e6" translate="yes" xml:space="preserve">
          <source>The following example shows how to use &lt;code&gt;ngModel&lt;/code&gt; with a getter/setter:</source>
          <target state="translated">次の例は、ゲッター/セッターで &lt;code&gt;ngModel&lt;/code&gt; を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d8828073febfc88b7e929349ee1005c112427e4d" translate="yes" xml:space="preserve">
          <source>The following example shows the effects of different actions with tracking:</source>
          <target state="translated">次の例では、トラッキングを使ったさまざまなアクションの効果を示しています。</target>
        </trans-unit>
        <trans-unit id="49526c0cbe72823024948149f2ba222e9dcacf1d" translate="yes" xml:space="preserve">
          <source>The following example uses a Controller to add a method, which doubles a number, to the scope:</source>
          <target state="translated">次の例では、コントローラを使用して、数値を2倍にするメソッドをスコープに追加しています。</target>
        </trans-unit>
        <trans-unit id="c5d5572a6af9e099a94051501ec7017d831c20b8" translate="yes" xml:space="preserve">
          <source>The following example uses the CSS to display validity of each form control. In the example both &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; are required, but are rendered with red background only after the input is blurred (loses focus). This ensures that the user is not distracted with an error until after interacting with the control, and failing to satisfy its validity.</source>
          <target state="translated">次の例では、CSSを使用して各フォームコントロールの有効性を表示しています。この例では、 &lt;code&gt;user.name&lt;/code&gt; と &lt;code&gt;user.email&lt;/code&gt; の両方が必要ですが、入力がぼやけた（フォーカスが失われた）後にのみ、赤い背景でレンダリングされます。これにより、ユーザーは、コントロールとやり取りしてその有効性を満たすことができなくなるまで、エラーに気を取られることがなくなります。</target>
        </trans-unit>
        <trans-unit id="33f68f854869fc32d143f52645cecc54d4d0c1ad" translate="yes" xml:space="preserve">
          <source>The following graphic shows how everything works together after we introduced the controller:</source>
          <target state="translated">以下の図は、コントローラを導入した後のすべての動作を示しています。</target>
        </trans-unit>
        <trans-unit id="385ffec593477822ca164a235f1fdf7ebf15040e" translate="yes" xml:space="preserve">
          <source>The following is a unit test for the &lt;code&gt;notify&lt;/code&gt; service from the &lt;a href=&quot;services#creating-services.html&quot;&gt;Creating AngularJS Services&lt;/a&gt; example above. The unit test example uses a Jasmine spy (mock) instead of a real browser alert.</source>
          <target state="translated">以下は、上記の&lt;a href=&quot;services#creating-services.html&quot;&gt;AngularJSサービス&lt;/a&gt;の作成の例からの &lt;code&gt;notify&lt;/code&gt; サービスの単体テストです。単体テストの例では、実際のブラウザアラートの代わりにJasmineスパイ（モック）を使用しています。</target>
        </trans-unit>
        <trans-unit id="fb989a297b5370085b89e00c936b323f1015a9ee" translate="yes" xml:space="preserve">
          <source>The following sample filter reverses a text string. In addition, it conditionally makes the text upper-case.</source>
          <target state="translated">次のサンプルフィルタは文字列を反転させます。また、条件付きで文字列を大文字にします。</target>
        </trans-unit>
        <trans-unit id="5abf89865b72c60e74a4308a79f260298a1552b3" translate="yes" xml:space="preserve">
          <source>The following sections provide examples each of a service decorator, a directive decorator, and a filter decorator.</source>
          <target state="translated">以下のセクションでは、サービスデコレータ、ディレクティブデコレータ、フィルタデコレータのそれぞれの例を示します。</target>
        </trans-unit>
        <trans-unit id="502dad06b34317ceffa57aeaaa0edcf7aa769750" translate="yes" xml:space="preserve">
          <source>The format of the displayed time can be adjusted with the &lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions&lt;/a&gt;&lt;code&gt;timeSecondsFormat&lt;/code&gt; and &lt;code&gt;timeStripZeroSeconds&lt;/code&gt;.</source>
          <target state="translated">表示時間のフォーマットを用いて調整することができる&lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions &lt;/a&gt; &lt;code&gt;timeSecondsFormat&lt;/code&gt; と &lt;code&gt;timeStripZeroSeconds&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef6e74dc8057c84b4bdc44fbe57d05d3eb5ca2ac" translate="yes" xml:space="preserve">
          <source>The former CSS className value</source>
          <target state="translated">以前のCSSのclassNameの値</target>
        </trans-unit>
        <trans-unit id="c347b16354fe80c4ac3b3f67a7e1632c4e3f4b10" translate="yes" xml:space="preserve">
          <source>The four events are &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, and &lt;code&gt;cancel&lt;/code&gt;. &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; receive as a parameter a coordinates object of the form &lt;code&gt;{ x: 150, y: 310 }&lt;/code&gt; and the raw &lt;code&gt;event&lt;/code&gt;. &lt;code&gt;cancel&lt;/code&gt; receives the raw &lt;code&gt;event&lt;/code&gt; as its single parameter.</source>
          <target state="translated">4つのイベントは、 &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;move&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; 、 &lt;code&gt;cancel&lt;/code&gt; です。 &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;move&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; は、 &lt;code&gt;{ x: 150, y: 310 }&lt;/code&gt; 形式の座標オブジェクトと生の &lt;code&gt;event&lt;/code&gt; パラメーターとして受け取ります。 &lt;code&gt;cancel&lt;/code&gt; は、生の &lt;code&gt;event&lt;/code&gt; を単一のパラメーターとして受け取ります。</target>
        </trans-unit>
        <trans-unit id="a6738ed4a6835a2dce72e58107db0aea9fd2a782" translate="yes" xml:space="preserve">
          <source>The full list of directives that interface with ngAria:</source>
          <target state="translated">ngAria とインターフェイスするディレクティブの完全なリストです。</target>
        </trans-unit>
        <trans-unit id="2c9494e0230a76ef255530c7ab61e30820ac57e4" translate="yes" xml:space="preserve">
          <source>The function that will decide whether the given character is a valid identifier continue character.</source>
          <target state="translated">与えられた文字が有効な識別子継続文字であるかどうかを判断する関数。</target>
        </trans-unit>
        <trans-unit id="e9633fa9ea971735772836de085d84d26552cd07" translate="yes" xml:space="preserve">
          <source>The function that will decide whether the given character is a valid identifier start character.</source>
          <target state="translated">与えられた文字が有効な識別子開始文字であるかどうかを判断する関数。</target>
        </trans-unit>
        <trans-unit id="f07c9484695ff7d7e62cb833d2009d5141f8f9c6" translate="yes" xml:space="preserve">
          <source>The functions are called in array order, each passing its return value through to the next. The last return value is forwarded to the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;&lt;code&gt;$validators&lt;/code&gt;&lt;/a&gt; collection.</source>
          <target state="translated">関数は配列順に呼び出され、それぞれが戻り値を次へ渡します。最後の戻り値は&lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt; &lt;code&gt;$validators&lt;/code&gt; &lt;/a&gt;コレクションに転送されます。</target>
        </trans-unit>
        <trans-unit id="dae7ea2912e98ee65a104da6c13925bc30a72664" translate="yes" xml:space="preserve">
          <source>The functions are called in reverse array order, each passing the value through to the next. The last return value is used as the actual DOM value.</source>
          <target state="translated">関数は配列の逆順に呼ばれ、それぞれの関数が値を次の関数に渡します。最後の戻り値が実際の DOM の値として使われます。</target>
        </trans-unit>
        <trans-unit id="c1882a81b786a1f235f2e723e4c9aff45edba984" translate="yes" xml:space="preserve">
          <source>The gender support is provided by the more generic &quot;select&quot; syntax that is more akin to a switch statement. It is general enough to support use for gender based messages.</source>
          <target state="translated">ジェンダーのサポートは、より一般的な &quot;select &quot;構文によって提供され、よりswitch文に似ています。これは、ジェンダーベースのメッセージの使用をサポートするのに十分な一般的なものです。</target>
        </trans-unit>
        <trans-unit id="f59bd7db60de9ce08437e7f3e011e5ca3fab98ac" translate="yes" xml:space="preserve">
          <source>The general syntax in templates is as follows:</source>
          <target state="translated">テンプレートにおける一般的な構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="56c426b734bed528f39225878bb25f07045e803d" translate="yes" xml:space="preserve">
          <source>The goal of ngAria is to improve AngularJS's default accessibility by enabling common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; attributes that convey state or semantic information for assistive technologies used by persons with disabilities.</source>
          <target state="translated">ngAriaの目標は、障害者が使用する支援技術の状態またはセマンティック情報を伝える一般的な&lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt;属性を有効にすることで、AngularJSのデフォルトのアクセシビリティを改善することです。</target>
        </trans-unit>
        <trans-unit id="c5cd8f9dc35c6a9263676234a5967f033f473c43" translate="yes" xml:space="preserve">
          <source>The goal of ngAria is to improve AngularJS's default accessibility by enabling common &lt;a href=&quot;https://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; attributes that convey state or semantic information for assistive technologies used by persons with disabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f795492acd77aa418074f3e83eb0705e35bd74" translate="yes" xml:space="preserve">
          <source>The hash specifying the element to scroll to. If omitted, the value of &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; will be used.</source>
          <target state="translated">スクロールする要素を指定するハッシュ。省略した場合、&lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash（）の&lt;/a&gt;値が使用されます。</target>
        </trans-unit>
        <trans-unit id="6c9c5a47c74673d3922e05343a422f461a8e6632" translate="yes" xml:space="preserve">
          <source>The header will &amp;mdash; by default &amp;mdash; &lt;strong&gt;not&lt;/strong&gt; be set for cross-domain requests. This prevents unauthorized servers (e.g. malicious or compromised 3rd-party APIs) from gaining access to your users' XSRF tokens and exposing them to Cross Site Request Forgery. If you want to, you can trust additional origins to also receive the XSRF token, by adding them to &lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt;. This might be useful, for example, if your application, served from &lt;code&gt;example.com&lt;/code&gt;, needs to access your API at &lt;code&gt;api.example.com&lt;/code&gt;. See &lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;$httpProvider.xsrfTrustedOrigins&lt;/a&gt; for more details.</source>
          <target state="translated">ヘッダーは、デフォルトでは、クロスドメインリクエストには設定され&lt;strong&gt;ません&lt;/strong&gt;。これにより、許可されていないサーバー（悪意のある、または侵害されたサードパーティAPIなど）がユーザーのXSRFトークンにアクセスして、クロスサイトリクエストフォージェリにさらされるのを防ぎます。あなたがしたい場合も、それらを追加することにより、XSRFトークンを受信するには、追加の起源を信頼することができ&lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt;。これは、たとえば、 &lt;code&gt;example.com&lt;/code&gt; から提供されるアプリケーションが &lt;code&gt;api.example.com&lt;/code&gt; のAPIにアクセスする必要がある場合に役立つことがあります。詳細については、&lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;$ httpProvider.xsrfTrustedOrigins&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="02053663b4fa96bc136f66df077e6715d30724e9" translate="yes" xml:space="preserve">
          <source>The header will &amp;mdash; by default &amp;mdash; &lt;strong&gt;not&lt;/strong&gt; be set for cross-domain requests. This prevents unauthorized servers (e.g. malicious or compromised 3rd-party APIs) from gaining access to your users' XSRF tokens and exposing them to Cross Site Request Forgery. If you want to, you can whitelist additional origins to also receive the XSRF token, by adding them to &lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;xsrfWhitelistedOrigins&lt;/a&gt;. This might be useful, for example, if your application, served from &lt;code&gt;example.com&lt;/code&gt;, needs to access your API at &lt;code&gt;api.example.com&lt;/code&gt;. See &lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;$httpProvider.xsrfWhitelistedOrigins&lt;/a&gt; for more details.</source>
          <target state="translated">ヘッダーは、デフォルトではクロスドメインリクエストに対して設定され&lt;strong&gt;ません&lt;/strong&gt;。これにより、不正なサーバー（悪意のある、または侵害されたサードパーティのAPIなど）がユーザーのXSRFトークンにアクセスし、それらをクロスサイトリクエストフォージェリに公開するのを防ぎます。あなたがしたい場合も、それらを追加することにより、XSRFトークンを受信するには、追加の起源をホワイトリストに登録することができます&lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;xsrfWhitelistedOrigins&lt;/a&gt;。これは、たとえば、 &lt;code&gt;example.com&lt;/code&gt; から提供されるアプリケーションが &lt;code&gt;api.example.com&lt;/code&gt; で APIにアクセスする必要がある場合に役立ちます。詳細については、&lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;$ httpProvider.xsrfWhitelistedOrigins&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9d882e0eea82bc7f30ad5b0b72c42474eb4cf87" translate="yes" xml:space="preserve">
          <source>The heroDetail component now contains new functionality:</source>
          <target state="translated">heroDetailコンポーネントに新機能が追加されました。</target>
        </trans-unit>
        <trans-unit id="118554a0cc7bb4ae6da007dc27bdce1b33af2df3" translate="yes" xml:space="preserve">
          <source>The impedance mismatch between dynamic applications and static documents is often solved with:</source>
          <target state="translated">動的なアプリケーションと静的な文書との間のインピーダンスの不整合は、多くの場合で解決されます。</target>
        </trans-unit>
        <trans-unit id="bc88ca9137a8a789d4223b3543e8b24f06c1df98" translate="yes" xml:space="preserve">
          <source>The important thing in the example is that AngularJS provides &lt;em&gt;live&lt;/em&gt; bindings: Whenever the input values change, the value of the expressions are automatically recalculated and the DOM is updated with their values. The concept behind this is &lt;a href=&quot;databinding&quot;&gt;two-way data binding&lt;/a&gt;.</source>
          <target state="translated">この例で重要なのは、AngularJSが&lt;em&gt;ライブ&lt;/em&gt;バインディングを提供することです。入力値が変更されると、式の値が自動的に再計算され、DOMがその値で更新されます。この背後にある概念は&lt;a href=&quot;databinding&quot;&gt;、双方向のデータバインディング&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="feb47f0357163525e9a17e43f4fdaa136b3a9b3a" translate="yes" xml:space="preserve">
          <source>The included &lt;a href=&quot;%24scedelegate&quot;&gt;$sceDelegate&lt;/a&gt; comes with sane defaults to allow you to load templates in &lt;code&gt;ng-include&lt;/code&gt; from your application's domain without having to even know about SCE. It blocks loading templates from other domains or loading templates over http from an https served document. You can change these by setting your own custom &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelists&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;blacklists&lt;/a&gt; for matching such URLs.</source>
          <target state="translated">含まれている&lt;a href=&quot;%24scedelegate&quot;&gt;$ sceDelegateに&lt;/a&gt;は、SCEについてさえ知らなくても、アプリケーションのドメインから &lt;code&gt;ng-include&lt;/code&gt; でテンプレートを読み込むことができる、適切なデフォルトが付属しています。他のドメインからのテンプレートの読み込み、またはhttpsで提供されるドキュメントからのhttpを介したテンプレートの読み込みをブロックします。これらのURLを照合するための独自のカスタム&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;ホワイトリスト&lt;/a&gt;と&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;ブラックリスト&lt;/a&gt;を設定することで、これらを変更できます。</target>
        </trans-unit>
        <trans-unit id="8653b4ff10badbdfdfe596b75b9e40afdc26c0ac" translate="yes" xml:space="preserve">
          <source>The included &lt;a href=&quot;%24scedelegate&quot;&gt;$sceDelegate&lt;/a&gt; comes with sane defaults to allow you to load templates in &lt;code&gt;ng-include&lt;/code&gt; from your application's domain without having to even know about SCE. It blocks loading templates from other domains or loading templates over http from an https served document. You can change these by setting your own custom &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trusted resource URL list&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;banned resource URL list&lt;/a&gt; for matching such URLs.</source>
          <target state="translated">含まれている&lt;a href=&quot;%24scedelegate&quot;&gt;$ sceDelegateに&lt;/a&gt;は、SCEについて知らなくても、アプリケーションのドメインから &lt;code&gt;ng-include&lt;/code&gt; でテンプレートをロードできるようにするための適切なデフォルトが付属しています。他のドメインからのテンプレートの読み込み、またはhttpsで提供されるドキュメントからのhttp経由でのテンプレートの読み込みをブロックします。これらを変更するには、独自のカスタム&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;信頼済みリソースURLリスト&lt;/a&gt;と、そのようなURLに一致する&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;禁止リソースURLリスト&lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="0d86ce90e809e5dafdbfc54a177b73d2ccac67ae" translate="yes" xml:space="preserve">
          <source>The inject function wraps a function into an injectable function. The inject() creates new instance of &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt; per test, which is then used for resolving references.</source>
          <target state="translated">注入関数は、関数を注入可能な関数にラップします。inject（）は、テストごとに&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorの&lt;/a&gt;新しいインスタンスを作成し、参照を解決するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c1092c772bcfea30a4aa4090625e6d56119e573a" translate="yes" xml:space="preserve">
          <source>The injectable $getFn for the instance creation. Internally this is a short hand for &lt;code&gt;$provide.provider(name, {$get: $getFn})&lt;/code&gt;.</source>
          <target state="translated">インスタンス作成用の注入可能な$ getFn。内部的には、これは &lt;code&gt;$provide.provider(name, {$get: $getFn})&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="605987405f3ba59ce7d26ad7a79cb1575f0f779c" translate="yes" xml:space="preserve">
          <source>The injectable function to invoke. Function parameters are injected according to the &lt;a href=&quot;../../../guide/di&quot;&gt;$inject Annotation&lt;/a&gt; rules.</source>
          <target state="translated">呼び出す注入可能な関数。関数パラメーターは、&lt;a href=&quot;../../../guide/di&quot;&gt;$ injectアノテーション&lt;/a&gt;ルールに従って挿入されます。</target>
        </trans-unit>
        <trans-unit id="677dfa999d3a98fad688a00276274a8900d320b0" translate="yes" xml:space="preserve">
          <source>The injector creates two types of objects, &lt;strong&gt;services&lt;/strong&gt; and &lt;strong&gt;specialized objects&lt;/strong&gt;.</source>
          <target state="translated">インジェクタは、オブジェクトの2種類作成し&lt;strong&gt;たサービス&lt;/strong&gt;や&lt;strong&gt;、特殊なオブジェクトを&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0e94cb4879f562aa129066b04f883ce6312f54d9" translate="yes" xml:space="preserve">
          <source>The injector needs to know how to create these objects. You tell it by registering a &quot;recipe&quot; for creating your object with the injector. There are five recipe types.</source>
          <target state="translated">インジェクターは、これらのオブジェクトを作成する方法を知る必要があります。インジェクターにオブジェクトを作成するための「レシピ」を登録することで、それを教えてくれます。レシピには5つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="6273feccee525d43053ba5dbf6fca985976d17e5" translate="yes" xml:space="preserve">
          <source>The injector uses recipes to create two types of objects: services and special purpose objects</source>
          <target state="translated">インジェクタはレシピを使用して、サービスと特別目的のオブジェクトの 2 種類のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="c3ee9058b51e0900c988e8ad2daa2f4fd48edb92" translate="yes" xml:space="preserve">
          <source>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a trusted URI list) are then serialized back to a properly escaped HTML string. This means that no unsafe input can make it into the returned string.</source>
          <target state="translated">入力は HTML を解析してトークンにすることでサニタイズされます。すべての安全なトークン (信頼できる URI リストからの)は、適切にエスケープされた HTML 文字列にシリアライズされて返されます。これは、安全ではない入力が返される文字列の中に入ることがないことを意味します。</target>
        </trans-unit>
        <trans-unit id="f953d4b077ce6a518bf5b06d0aef4b5f97e7e535" translate="yes" xml:space="preserve">
          <source>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are then serialized back to a properly escaped HTML string. This means that no unsafe input can make it into the returned string.</source>
          <target state="translated">入力は、HTML を解析してトークンにすることでサニタイズされます。すべての安全なトークン (ホワイトリストからの)は、適切にエスケープされた HTML 文字列にシリアライズされて返されます。これは、安全ではない入力が返される文字列の中に入ることがないことを意味します。</target>
        </trans-unit>
        <trans-unit id="59f809f5d96cab71f45dcf3fd61d5ada6a5b1113" translate="yes" xml:space="preserve">
          <source>The input may also contain SVG markup if this is enabled via &lt;a href=&quot;../provider/%24sanitizeprovider&quot;&gt;&lt;code&gt;$sanitizeProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24sanitizeprovider&quot;&gt; &lt;code&gt;$sanitizeProvider&lt;/code&gt; &lt;/a&gt;有効になっている場合、入力にはSVGマークアップも含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="c9721cff229ea27eaddea830cb215d9ecb24c54d" translate="yes" xml:space="preserve">
          <source>The instance.</source>
          <target state="translated">インスタンスです。</target>
        </trans-unit>
        <trans-unit id="d06ec46a0f6db466ce39dca76188695efd2cff45" translate="yes" xml:space="preserve">
          <source>The instructions for the injector to create these special objects (with the exception of the Controller objects) use the Factory recipe behind the scenes.</source>
          <target state="translated">これらの特別なオブジェクトを作成するためのインジェクタの指示は、(Controllerオブジェクトを除いて)裏でFactoryレシピを使用します。</target>
        </trans-unit>
        <trans-unit id="9641656e0f057252f61c1fb2d165a7e89b9e6899" translate="yes" xml:space="preserve">
          <source>The interceptors are service factories that are registered with the &lt;code&gt;$httpProvider&lt;/code&gt; by adding them to the &lt;code&gt;$httpProvider.interceptors&lt;/code&gt; array. The factory is called and injected with dependencies (if specified) and returns the interceptor.</source>
          <target state="translated">インターセプターは、 &lt;code&gt;$httpProvider.interceptors&lt;/code&gt; 配列に追加することによって &lt;code&gt;$httpProvider&lt;/code&gt; 登録されるサービスファクトリです。ファクトリーが呼び出され、依存関係（指定されている場合）が注入され、インターセプターが返されます。</target>
        </trans-unit>
        <trans-unit id="259abe29ae4ace32d8058fd4b583122111a0a58c" translate="yes" xml:space="preserve">
          <source>The items in the &lt;code&gt;watchExpressions&lt;/code&gt; array are observed via the standard &lt;code&gt;$watch&lt;/code&gt; operation. Their return values are examined for changes on every call to &lt;code&gt;$digest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;watchExpressions&lt;/code&gt; 配列の項目は、標準の &lt;code&gt;$watch&lt;/code&gt; オペレーションを介して監視されます。それらの戻り値は、 &lt;code&gt;$digest&lt;/code&gt; へのすべての呼び出しで変更がないか調べられます。</target>
        </trans-unit>
        <trans-unit id="ac4e2ed2134c4627770fca158ca734471daad86e" translate="yes" xml:space="preserve">
          <source>The key directive in understanding two-way data-binding is &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;. The &lt;code&gt;ngModel&lt;/code&gt; directive provides the two-way data-binding by synchronizing the model to the view, as well as view to the model. In addition it provides an &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;API&lt;/a&gt; for other directives to augment its behavior.</source>
          <target state="translated">双方向のデータバインディングを理解する上で重要なディレクティブは&lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;です。 &lt;code&gt;ngModel&lt;/code&gt; のディレクティブは、双方向ビューにモデルを同期させることにより、データバインディング、ならびにモデルのビューを提供します。さらに、他のディレクティブがその動作を強化するための&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;API&lt;/a&gt;を提供します。</target>
        </trans-unit>
        <trans-unit id="cf8fd3854844a5b37d09ac63b2f2a2265faf671e" translate="yes" xml:space="preserve">
          <source>The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two generated CSS classes will be applied to the element; in the example above we have &lt;code&gt;.ng-enter&lt;/code&gt; and &lt;code&gt;.ng-enter-active&lt;/code&gt;. For CSS transitions, the transition code &lt;strong&gt;must&lt;/strong&gt; be defined within the starting CSS class (in this case &lt;code&gt;.ng-enter&lt;/code&gt;). The destination class is what the transition will animate towards.</source>
          <target state="translated">ここで覚えておくべき重要なことは、アニメーションイベントに応じて（何が起こっているかに応じて上記の各ディレクティブがトリガーする）、2つの生成されたCSSクラスが要素に適用されることです。上記の例では、 &lt;code&gt;.ng-enter&lt;/code&gt; と &lt;code&gt;.ng-enter-active&lt;/code&gt; があります。 CSS遷移の場合、遷移コード&lt;strong&gt;は&lt;/strong&gt;、開始CSSクラス（この場合は &lt;code&gt;.ng-enter&lt;/code&gt; ）内で定義する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。宛先クラスは、遷移がアニメーション化する対象です。</target>
        </trans-unit>
        <trans-unit id="9bfe88c198504d0cc14a7b1ffef4d2e83779de3b" translate="yes" xml:space="preserve">
          <source>The last thing that changed in the example between the previous section and this section is that we now pass an array to the &lt;code&gt;module.controller&lt;/code&gt; function, instead of a plain function. The array first contains the names of the service dependencies that the controller needs. The last entry in the array is the controller constructor function. AngularJS uses this array syntax to define the dependencies so that the DI also works after minifying the code, which will most probably rename the argument name of the controller constructor function to something shorter like &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">前のセクションの例とこのセクションの例の間で変更した最後の点は、単純な関数ではなく、 &lt;code&gt;module.controller&lt;/code&gt; 関数に配列を渡すようにしたことです。この配列の最初には、コントローラーが必要とするサービスの依存関係の名前が含まれています。この配列の最後のエントリは、コントローラーコンストラクター関数です。 AngularJSはこの配列構文を使用して依存関係を定義します。このため、たとえばコントローラーコンストラクター関数の引数名を&lt;code&gt;a&lt;/code&gt;のような短い名前に変更するようにコードを縮小した後でも、DIが機能します。</target>
        </trans-unit>
        <trans-unit id="9bc17242596383b2aa73f58fe188aa93577a2dc8" translate="yes" xml:space="preserve">
          <source>The length of the returned array or string. If the &lt;code&gt;limit&lt;/code&gt; number is positive, &lt;code&gt;limit&lt;/code&gt; number of items from the beginning of the source array/string are copied. If the number is negative, &lt;code&gt;limit&lt;/code&gt; number of items from the end of the source array/string are copied. The &lt;code&gt;limit&lt;/code&gt; will be trimmed if it exceeds &lt;code&gt;array.length&lt;/code&gt;. If &lt;code&gt;limit&lt;/code&gt; is undefined, the input will be returned unchanged.</source>
          <target state="translated">返される配列または文字列の長さ。 &lt;code&gt;limit&lt;/code&gt; 数が正の場合、ソース配列/文字列の先頭からの &lt;code&gt;limit&lt;/code&gt; 数のアイテムがコピーされます。数値が負の場合、コピー元の配列/文字列の末尾から &lt;code&gt;limit&lt;/code&gt; 数のアイテムがコピーされます。 &lt;code&gt;array.length&lt;/code&gt; を超えると、 &lt;code&gt;limit&lt;/code&gt; が削除されます。場合は &lt;code&gt;limit&lt;/code&gt; 未定義で、入力がそのまま返されます。</target>
        </trans-unit>
        <trans-unit id="96f80bb4132ab5893f0e229db73744e61363387b" translate="yes" xml:space="preserve">
          <source>The link function is responsible for registering DOM listeners as well as updating the DOM. It is executed after the template has been cloned. This is where most of the directive logic will be put.</source>
          <target state="translated">リンク機能は、DOMリスナーの登録やDOMの更新を担当します。これはテンプレートが複製された後に実行されます。ここにはほとんどのディレクティブロジックが置かれています。</target>
        </trans-unit>
        <trans-unit id="25992899d7d94510e26d6aadc430072c9ca0c0f0" translate="yes" xml:space="preserve">
          <source>The main method of &lt;code&gt;$swipe&lt;/code&gt;. It takes an element to be watched for swipe motions, and an object containing event handlers. The pointer types that should be used can be specified via the optional third argument, which is an array of strings &lt;code&gt;'mouse'&lt;/code&gt;, &lt;code&gt;'touch'&lt;/code&gt; and &lt;code&gt;'pointer'&lt;/code&gt;. By default, &lt;code&gt;$swipe&lt;/code&gt; will listen for &lt;code&gt;mouse&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt; and &lt;code&gt;pointer&lt;/code&gt; events.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; のメインメソッド。スワイプモーションを監視する要素と、イベントハンドラーを含むオブジェクトを受け取ります。使用する必要があるポインタ型は、オプションの3番目の引数（文字列 &lt;code&gt;'mouse'&lt;/code&gt; 、 &lt;code&gt;'touch'&lt;/code&gt; および &lt;code&gt;'pointer'&lt;/code&gt; の配列）を介して指定できます。デフォルトでは、 &lt;code&gt;$swipe&lt;/code&gt; は &lt;code&gt;mouse&lt;/code&gt; 、 &lt;code&gt;touch&lt;/code&gt; 、 &lt;code&gt;pointer&lt;/code&gt; イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="1a172ed357f81e2238a43ea9dd78f148e9988e2e" translate="yes" xml:space="preserve">
          <source>The main purpose is to create Date-like instances with timezone fixed to the specified timezone offset, so that we can test code that depends on local timezone settings without dependency on the time zone settings of the machine where the code is running.</source>
          <target state="translated">主な目的は、指定したタイムゾーンオフセットにタイムゾーンを固定したDatateライクなインスタンスを作成することで、コードが実行されているマシンのタイムゾーン設定に依存することなく、ローカルのタイムゾーン設定に依存したコードをテストすることができるようにすることです。</target>
        </trans-unit>
        <trans-unit id="0b310ca323bcc83d7a5a4af3c0bc0d4391022eb7" translate="yes" xml:space="preserve">
          <source>The main purpose of one-time binding expression is to provide a way to create a binding that gets deregistered and frees up resources once the binding is stabilized. Reducing the number of expressions being watched makes the digest loop faster and allows more information to be displayed at the same time.</source>
          <target state="translated">ワンタイムバインディング式の主な目的は、バインディングが安定すると登録が解除され、リソースを解放するバインディングを作成する方法を提供することです。監視している式の数を減らすことで、ダイジェストループを高速化し、より多くの情報を同時に表示することができます。</target>
        </trans-unit>
        <trans-unit id="25503d1e5d98a9ab3cd9eaf52b8e382fdd6b749a" translate="yes" xml:space="preserve">
          <source>The main purpose of this service is to simplify debugging and troubleshooting.</source>
          <target state="translated">主にデバッグやトラブルシューティングの簡略化を目的としています。</target>
        </trans-unit>
        <trans-unit id="91c342052b273fbc763e3a770d83c916c0e2fd15" translate="yes" xml:space="preserve">
          <source>The map object is:</source>
          <target state="translated">マップオブジェクトは</target>
        </trans-unit>
        <trans-unit id="c3ba921f13d5d29a579ae0d65aabb1cf6c6ce2b7" translate="yes" xml:space="preserve">
          <source>The mapping between plural category to its corresponding strings.</source>
          <target state="translated">複数のカテゴリとそれに対応する文字列の間のマッピング。</target>
        </trans-unit>
        <trans-unit id="91b978fa871e53cfbb4757ac12f850437d085924" translate="yes" xml:space="preserve">
          <source>The message in our template contains a binding to the &lt;code&gt;spice&lt;/code&gt; model which, by default, is set to the string &quot;very&quot;. Depending on which button is clicked, the &lt;code&gt;spice&lt;/code&gt; model is set to &lt;code&gt;chili&lt;/code&gt; or &lt;code&gt;jalape&amp;ntilde;o&lt;/code&gt;, and the message is automatically updated by data-binding.</source>
          <target state="translated">テンプレートのメッセージには、デフォルトで文字列「very」に設定されている &lt;code&gt;spice&lt;/code&gt; モデルへのバインディングが含まれています。クリックされたボタンに応じて、 &lt;code&gt;spice&lt;/code&gt; モデルは &lt;code&gt;chili&lt;/code&gt; または &lt;code&gt;jalape&amp;ntilde;o&lt;/code&gt; に設定され、メッセージはデータバインディングによって自動的に更新されます。</target>
        </trans-unit>
        <trans-unit id="c79e17a2b6e79907beb19b379baae598ffbe689b" translate="yes" xml:space="preserve">
          <source>The missing pieces here are that we do not have a transition set (within the CSS code nor within the &lt;code&gt;$animateCss&lt;/code&gt; options) and the duration of the animation is going to be detected from what the keyframe styles on the CSS class are. In this event, &lt;code&gt;$animateCss&lt;/code&gt; will automatically create an inline transition style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition and keyframe animations to run in parallel on the element. Then when the animation is underway the provided &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; CSS styles will be applied and spread across the transition and keyframe animation.</source>
          <target state="translated">ここで欠けているのは、トランジションセット（CSSコード内または &lt;code&gt;$animateCss&lt;/code&gt; オプション内）がないことと、アニメーションの継続時間がCSSクラスのキーフレームスタイルから検出されることです。このイベントでは、 &lt;code&gt;$animateCss&lt;/code&gt; はキーフレームスタイル（追加されるCSSクラスに存在）から検出された継続時間に一致するインライントランジションスタイルを自動的に作成し、トランジションアニメーションとキーフレームアニメーションの両方を要素で並行して実行する準備をします。そして、アニメーションが進行中で提供されたとき &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; CSSスタイルが適用され、トランジションとキーフレームアニメーション全体で分散されます。</target>
        </trans-unit>
        <trans-unit id="f247262a0b550d2f691772406fe7244e9c1be40b" translate="yes" xml:space="preserve">
          <source>The model for the range input must always be a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">範囲入力のモデルは常に &lt;code&gt;Number&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="9d1136b7e9f9e2ec081fa959fce9e2b69f7dc7a8" translate="yes" xml:space="preserve">
          <source>The model must always be a Date object, otherwise AngularJS will throw an error. Invalid &lt;code&gt;Date&lt;/code&gt; objects (dates whose &lt;code&gt;getTime()&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;) will be rendered as an empty string.</source>
          <target state="translated">モデルは常にDateオブジェクトである必要があります。そうでない場合、AngularJSはエラーをスローします。無効な &lt;code&gt;Date&lt;/code&gt; オブジェクト（ &lt;code&gt;getTime()&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; である日付）は空の文字列としてレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="1f56b4dcf920e9c7dc11f7f32dd53fb1a36691f0" translate="yes" xml:space="preserve">
          <source>The model must always be a Date object, otherwise AngularJS will throw an error. Invalid &lt;code&gt;Date&lt;/code&gt; objects (dates whose &lt;code&gt;getTime()&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;) will be rendered as an empty string. If the model is not set to the first of the month, the next view to model update will set it to the first of the month.</source>
          <target state="translated">モデルは常にDateオブジェクトである必要があります。そうでない場合、AngularJSはエラーをスローします。無効な &lt;code&gt;Date&lt;/code&gt; オブジェクト（ &lt;code&gt;getTime()&lt;/code&gt; が &lt;code&gt;NaN&lt;/code&gt; である日付）は空の文字列としてレンダリングされます。モデルが月の1日に設定されていない場合、モデル更新の次のビューでモデルが月の1に設定されます。</target>
        </trans-unit>
        <trans-unit id="d1406ae87837c393f099238ed13c96e59ba59079" translate="yes" xml:space="preserve">
          <source>The model must always be of type &lt;code&gt;number&lt;/code&gt; otherwise AngularJS will throw an error. Be aware that a string containing a number is not enough. See the &lt;a href=&quot;error/ngmodel/numfmt&quot;&gt;&lt;code&gt;numfmt&lt;/code&gt;&lt;/a&gt; error docs for more information and an example of how to convert your model if necessary.</source>
          <target state="translated">モデルは常にタイプ &lt;code&gt;number&lt;/code&gt; である必要があります。そうでない場合、AngularJSはエラーをスローします。数字を含む文字列では不十分であることに注意してください。詳細と、必要に応じてモデルを変換する方法の例については、&lt;a href=&quot;error/ngmodel/numfmt&quot;&gt; &lt;code&gt;numfmt&lt;/code&gt; &lt;/a&gt;エラードキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5c0949f1bb9728ff0ffb32f807d413d44806a30f" translate="yes" xml:space="preserve">
          <source>The model must be assigned an entirely new object or collection before a re-rendering will occur.</source>
          <target state="translated">再レンダリングを行う前に、モデルには全く新しいオブジェクトまたはコレクションを割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="3ae22dc48b481f4e02eb16cb19edc1733fe699ba" translate="yes" xml:space="preserve">
          <source>The modules can be loaded in any order (or even in parallel) because modules delay execution.</source>
          <target state="translated">モジュールは実行を遅らせるため、任意の順番で(あるいは並列でも)ロードすることができます。</target>
        </trans-unit>
        <trans-unit id="529f242a37709897dbd946c5165c8aee6256feb1" translate="yes" xml:space="preserve">
          <source>The most common way to keep Controllers slim is by encapsulating work that doesn't belong to controllers into services and then using these services in Controllers via dependency injection. This is discussed in the &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; and &lt;a href=&quot;services&quot;&gt;Services&lt;/a&gt; sections of this guide.</source>
          <target state="translated">コントローラーをスリムに保つ最も一般的な方法は、コントローラーに属していない作業をサービスにカプセル化し、依存関係注入を介してこれらのサービスをコントローラーで使用することです。これについては、このガイドの&lt;a href=&quot;di&quot;&gt;依存性注入&lt;/a&gt;と&lt;a href=&quot;services&quot;&gt;サービスの&lt;/a&gt;セクションで説明します。</target>
        </trans-unit>
        <trans-unit id="faf758b67dc590ad824277c5b5f2a314b0605341" translate="yes" xml:space="preserve">
          <source>The most verbose, but also the most comprehensive one is a Provider recipe. The remaining four recipe types &amp;mdash; Value, Factory, Service and Constant &amp;mdash; are just syntactic sugar on top of a provider recipe.</source>
          <target state="translated">最も冗長で最も包括的なものは、プロバイダーレシピです。残りの4つのレシピタイプ（Value、Factory、Service、Constant）は、プロバイダーレシピの上にある単なる構文上の砂糖です。</target>
        </trans-unit>
        <trans-unit id="e93ee1a6dab4177437aeb5008d2c15cdeb9c5c03" translate="yes" xml:space="preserve">
          <source>The name attribute of the control.</source>
          <target state="translated">コントロールの名前属性。</target>
        </trans-unit>
        <trans-unit id="52a1406be0fd9b4498790d2b937925b4d86eab44" translate="yes" xml:space="preserve">
          <source>The name of the Component (as string).</source>
          <target state="translated">コンポーネントの名前(文字列)。</target>
        </trans-unit>
        <trans-unit id="f6aadfe17e9d7e5921f17aa8f89b4addde7625ab" translate="yes" xml:space="preserve">
          <source>The name of the animation (this is what the class-based CSS value will be compared to).</source>
          <target state="translated">アニメーションの名前(これはクラスベースのCSS値と比較されるものです)。</target>
        </trans-unit>
        <trans-unit id="5fa60c10f1cb65ee0552af457bf2e526a3e8f002" translate="yes" xml:space="preserve">
          <source>The name of the constant.</source>
          <target state="translated">定数の名前です。</target>
        </trans-unit>
        <trans-unit id="5ebd3314617eb25c4ca63e475dab29179d07a68b" translate="yes" xml:space="preserve">
          <source>The name of the cookie and the header can be specified using the &lt;code&gt;xsrfCookieName&lt;/code&gt; and &lt;code&gt;xsrfHeaderName&lt;/code&gt; properties of either &lt;code&gt;$httpProvider.defaults&lt;/code&gt; at config-time, &lt;code&gt;$http.defaults&lt;/code&gt; at run-time, or the per-request config object.</source>
          <target state="translated">クッキーとヘッダの名前を使用して指定することができ &lt;code&gt;xsrfCookieName&lt;/code&gt; と &lt;code&gt;xsrfHeaderName&lt;/code&gt; のいずれかのプロパティ &lt;code&gt;$httpProvider.defaults&lt;/code&gt; 、設定時に &lt;code&gt;$http.defaults&lt;/code&gt; 実行時、または要求ごとのconfigオブジェクトで。</target>
        </trans-unit>
        <trans-unit id="b5688f633c9943ed9963b6fac42bbab391f315da" translate="yes" xml:space="preserve">
          <source>The name of the instance to retrieve.</source>
          <target state="translated">取得するインスタンスの名前。</target>
        </trans-unit>
        <trans-unit id="3ce9a1a3f858c924570c179ce1f797aef67a7010" translate="yes" xml:space="preserve">
          <source>The name of the instance.</source>
          <target state="translated">インスタンスの名前。</target>
        </trans-unit>
        <trans-unit id="6914eeeb46cd50ced441dc387497bcc06ba59c09" translate="yes" xml:space="preserve">
          <source>The name of the instance. NOTE: the provider will be available under &lt;code&gt;name +
                        'Provider'&lt;/code&gt; key.</source>
          <target state="translated">インスタンスの名前。注：プロバイダーは、 &lt;code&gt;name + 'Provider'&lt;/code&gt; キーで使用できます。</target>
        </trans-unit>
        <trans-unit id="ef527986f7dd95521960193aaf626a363e2146dd" translate="yes" xml:space="preserve">
          <source>The name of the module to create or retrieve.</source>
          <target state="translated">作成または取得するモジュールの名前。</target>
        </trans-unit>
        <trans-unit id="5d9dc085c378b2687e35cbb2d483853c9af87fd6" translate="yes" xml:space="preserve">
          <source>The name of the service to decorate.</source>
          <target state="translated">飾るサービス名。</target>
        </trans-unit>
        <trans-unit id="a630443a3a5826d0976b6447615bfaff1727aedd" translate="yes" xml:space="preserve">
          <source>The names of the services which the function requires.</source>
          <target state="translated">この関数が必要とするサービスの名前です。</target>
        </trans-unit>
        <trans-unit id="d6e70987a77c802441d477d6206f9cfb9463cba2" translate="yes" xml:space="preserve">
          <source>The new Angular also uses life-cycle hooks for its components. While the AngularJS life-cycle hooks are similar there are some differences that you should be aware of, especially when it comes to moving your code from AngularJS to Angular:</source>
          <target state="translated">新しいAngularはコンポーネントにもライフサイクルフックを使用しています。AngularJSのライフサイクルフックは似ていますが、いくつかの違いがあり、特にコードをAngularJSからAngularに移行する際には注意が必要です。</target>
        </trans-unit>
        <trans-unit id="a41b334b9554bd05233c2fb4d0a3daaade91fce8" translate="yes" xml:space="preserve">
          <source>The newly created child scope.</source>
          <target state="translated">新しく作成された子スコープ。</target>
        </trans-unit>
        <trans-unit id="f3ce6bf462a57a8d8b163717a5d0f046f25c3465" translate="yes" xml:space="preserve">
          <source>The newly created promise.</source>
          <target state="translated">新たに作られた約束。</target>
        </trans-unit>
        <trans-unit id="ae09afc16f38ae9a9387c7b12e77a3a66d8888da" translate="yes" xml:space="preserve">
          <source>The next example shows how to debounce model changes. Model will be updated only 1 sec after last change. If the &lt;code&gt;Clear&lt;/code&gt; button is pressed, any debounced action is canceled and the value becomes empty.</source>
          <target state="translated">次の例は、モデルの変更をデバウンスする方法を示しています。モデルは、最後の変更からわずか1秒後に更新されます。場合は &lt;code&gt;Clear&lt;/code&gt; ボタンを押すと、任意のデバウンスアクションはキャンセルと値が空になっています。</target>
        </trans-unit>
        <trans-unit id="b76887d9d0fb60e4fc34d27b04b0219ff2d5a890" translate="yes" xml:space="preserve">
          <source>The ng-[event]-prepare class</source>
          <target state="translated">ng-[event]-prepare クラスは</target>
        </trans-unit>
        <trans-unit id="83832e96d19a35ce36d51f03002d6ffdbe1a0358" translate="yes" xml:space="preserve">
          <source>The ng-animate CSS class</source>
          <target state="translated">ng-animate CSS クラス</target>
        </trans-unit>
        <trans-unit id="9a9d315c0358a5c5e8b194937e0eee872f4b7280" translate="yes" xml:space="preserve">
          <source>The ngAnimate &lt;code&gt;$animate&lt;/code&gt; service documentation is the same for the core &lt;code&gt;$animate&lt;/code&gt; service.</source>
          <target state="translated">ngAnimate &lt;code&gt;$animate&lt;/code&gt; サービスのドキュメントは、コアの &lt;code&gt;$animate&lt;/code&gt; サービスと同じです。</target>
        </trans-unit>
        <trans-unit id="c26c0cdee12de4e472917c56086b0a3fb2d3b22f" translate="yes" xml:space="preserve">
          <source>The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure. Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure to view the step by step details of &lt;a href=&quot;../service/%24animate#addClass.html&quot;&gt;$animate.addClass&lt;/a&gt; and &lt;a href=&quot;../service/%24animate#removeClass.html&quot;&gt;$animate.removeClass&lt;/a&gt;.</source>
          <target state="translated">ngClassディレクティブは、ngAnimate CSS命名構造に従っていない場合でも、CSS3トランジション/アニメーションを引き続きサポートします。アニメーション時に、ngAnimateは補足のCSSクラスを適用してアニメーションの開始と終了を追跡しますが、これにより、要素にすでに存在するCSS遷移が妨げられることはありません。クラスベースのアニメーション中に何が起こるかを理解するには、&lt;a href=&quot;../service/%24animate#addClass.html&quot;&gt;$ animate.addClass&lt;/a&gt;と&lt;a href=&quot;../service/%24animate#removeClass.html&quot;&gt;$ animate.removeClassの&lt;/a&gt;詳細を段階的に確認してください。</target>
        </trans-unit>
        <trans-unit id="0635f6269423a28f71e76e780ec63cd5fb218795" translate="yes" xml:space="preserve">
          <source>The ngClick directive allows you to specify custom behavior when an element is clicked.</source>
          <target state="translated">ngClick ディレクティブは、要素がクリックされたときのカスタム動作を指定することができます。</target>
        </trans-unit>
        <trans-unit id="223eb922ce0ea7ac3447fe285277dffc1916f050" translate="yes" xml:space="preserve">
          <source>The ngMessageFormat module extends the AngularJS &lt;a href=&quot;ng/service/%24interpolate&quot;&gt;&lt;code&gt;$interpolate&lt;/code&gt;&lt;/a&gt; service with a syntax for handling pluralization and gender specific messages, which is based on the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;ICU MessageFormat syntax&lt;/a&gt;.</source>
          <target state="translated">ngMessageFormatモジュールは、AngularJS &lt;a href=&quot;ng/service/%24interpolate&quot;&gt; &lt;code&gt;$interpolate&lt;/code&gt; &lt;/a&gt;サービスを拡張して、&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;ICU MessageFormat構文に&lt;/a&gt;基づく、複数化および性別固有のメッセージを処理するための構文を提供します。</target>
        </trans-unit>
        <trans-unit id="d6139af9198c6ea6591d92b0c6e44a5918b0ef3f" translate="yes" xml:space="preserve">
          <source>The ngMessages module makes it easy to display form validation or other messages with priority sequencing and animation. To expose these visual messages to screen readers, ngAria injects &lt;code&gt;aria-live=&quot;assertive&quot;&lt;/code&gt;, causing them to be read aloud any time a message is shown, regardless of the user's focus location.</source>
          <target state="translated">ngMessagesモジュールを使用すると、優先順位付けとアニメーションでフォーム検証やその他のメッセージを簡単に表示できます。これらのビジュアルメッセージをスクリーンリーダーに公開するために、ngAriaは &lt;code&gt;aria-live=&quot;assertive&quot;&lt;/code&gt; assertive&quot;を注入します。これにより、ユーザーのフォーカス位置に関係なく、メッセージが表示されるたびに音声で読み上げられます。</target>
        </trans-unit>
        <trans-unit id="e5dcb2f0c1ee73bf49cf4d3307449f52a66c89cb" translate="yes" xml:space="preserve">
          <source>The ngMousedown directive allows you to specify custom behavior on mousedown event.</source>
          <target state="translated">ngMousedown ディレクティブは、マウスダウンイベントのカスタム動作を指定することができます。</target>
        </trans-unit>
        <trans-unit id="12a24db6cdaf7c8d7b5c7c9ac1712f0a02f045a2" translate="yes" xml:space="preserve">
          <source>The ngTouch module with the &lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt;&lt;code&gt;$swipe&lt;/code&gt;&lt;/a&gt; service and the &lt;a href=&quot;ngtouch/directive/ngswipeleft&quot;&gt;&lt;code&gt;ngSwipeLeft&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ngtouch/directive/ngswiperight&quot;&gt;&lt;code&gt;ngSwipeRight&lt;/code&gt;&lt;/a&gt; directives are deprecated. Instead, stand-alone libraries for touch handling and gesture interaction should be used, for example &lt;a href=&quot;https://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt; (which is also used by Angular).</source>
          <target state="translated">&lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt; &lt;code&gt;$swipe&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;ngtouch/directive/ngswipeleft&quot;&gt; &lt;code&gt;ngSwipeLeft&lt;/code&gt; &lt;/a&gt;サービスとngSwipeLeftおよび&lt;a href=&quot;ngtouch/directive/ngswiperight&quot;&gt; &lt;code&gt;ngSwipeRight&lt;/code&gt; &lt;/a&gt;ディレクティブを含むngTouchモジュールは非推奨です。代わりに、タッチ処理とジェスチャー操作用のスタンドアロンライブラリを使用する必要があります。たとえば、&lt;a href=&quot;https://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt;（Angularでも使用されます）などです。</target>
        </trans-unit>
        <trans-unit id="bd0e07d269ab6c4c785c9230592a8e454b8abbf0" translate="yes" xml:space="preserve">
          <source>The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as greensock.js and velocity.js.</source>
          <target state="translated">JSベースのアニメーションの良いところは、他のサービスを注入したり、greensock.jsやvelocity.jsのような高度なアニメーションライブラリを活用できるところです。</target>
        </trans-unit>
        <trans-unit id="fc6b6e566f3c4a65197842b008029ca49468b417" translate="yes" xml:space="preserve">
          <source>The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.</source>
          <target state="translated">ここでの良い点は、CSSベースのアニメーションコードにこだわることで帯域幅を節約でき、サードパーティのアニメーションフレームワークに頼る必要がないことです。</target>
        </trans-unit>
        <trans-unit id="b33d91c29f5b7375a54f9743cd38ebe14c38ac55" translate="yes" xml:space="preserve">
          <source>The normal flow of a browser receiving an event is that it executes a corresponding JavaScript callback. Once the callback completes the browser re-renders the DOM and returns to waiting for more events.</source>
          <target state="translated">ブラウザがイベントを受信した場合の通常の流れは、対応する JavaScript コールバックを実行することです。コールバックが完了すると、ブラウザは DOM を再レンダリングし、さらなるイベントを待つ状態に戻ります。</target>
        </trans-unit>
        <trans-unit id="e595827e846ea3517809cce5d8c144967ea0c1ef" translate="yes" xml:space="preserve">
          <source>The number of &lt;code&gt;$onChanges&lt;/code&gt; hook iterations.</source>
          <target state="translated">数 &lt;code&gt;$onChanges&lt;/code&gt; フックの繰り返し。</target>
        </trans-unit>
        <trans-unit id="10748404b29dfc81bb9c7e5cd26dc4c6c3875599" translate="yes" xml:space="preserve">
          <source>The number of digest iterations.</source>
          <target state="translated">ダイジェストの反復回数。</target>
        </trans-unit>
        <trans-unit id="0ec2f5ba906afbf68077b33918a003e2cbe4f8cd" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to flush.</source>
          <target state="translated">フラッシュするためのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="3ec3b6d1b9bf0ba9bca47ebec8531321e98b8a2c" translate="yes" xml:space="preserve">
          <source>The number of spaces to use per indentation, defaults to 2.</source>
          <target state="translated">インデントごとに使用するスペースの数を指定します。</target>
        </trans-unit>
        <trans-unit id="e318b90e5449cb088bf22638bad5bf3451b67f6f" translate="yes" xml:space="preserve">
          <source>The object may have following properties:</source>
          <target state="translated">オブジェクトは以下のプロパティを持つことがあります。</target>
        </trans-unit>
        <trans-unit id="c455371f2478051b104228b4d093ce69f37c3dee" translate="yes" xml:space="preserve">
          <source>The object returned from a call to &lt;code&gt;$resource&lt;/code&gt; is a resource &quot;class&quot; which has one &quot;static&quot; method for each action in the definition.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; 呼び出しから返されるオブジェクトは、定義内のアクションごとに1つの「静的」メソッドを持つリソース「クラス」です。</target>
        </trans-unit>
        <trans-unit id="0021d7966fedb869c64e8e751b9c6b3663b8b853" translate="yes" xml:space="preserve">
          <source>The observer function will be invoked once during the next &lt;code&gt;$digest&lt;/code&gt; following compilation. The observer is then invoked whenever the interpolated value changes.</source>
          <target state="translated">オブザーバー関数は、コンパイルに続く次の &lt;code&gt;$digest&lt;/code&gt; 間に一度呼び出されます。その後、補間された値が変化するたびにオブザーバーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f09b420cec82adc9e93555eea36b1573051e63e6" translate="yes" xml:space="preserve">
          <source>The options to be passed to the &lt;a href=&quot;../service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; service when making the request. You can use this to override options such as the &quot;Accept&quot; header for template requests.</source>
          <target state="translated">リクエストを行うときに&lt;a href=&quot;../service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;サービスに渡されるオプション。これを使用して、テンプレート要求の「Accept」ヘッダーなどのオプションをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="f020acdfb92309bd111f3fab8ddc649fcd4938a1" translate="yes" xml:space="preserve">
          <source>The order of identifiers in the array is the same as the order of argument names in the factory function.</source>
          <target state="translated">配列内の識別子の並び順は、ファクトリー関数の引数名の並び順と同じです。</target>
        </trans-unit>
        <trans-unit id="035c8a97bdb0e87e941aebeda2e7e759c1233766" translate="yes" xml:space="preserve">
          <source>The page should reload and the debug information should now be available.</source>
          <target state="translated">ページがリロードされ、デバッグ情報が利用できるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="269c704d66caa90f4de39092f24e2ae227e2de22" translate="yes" xml:space="preserve">
          <source>The parent scope will propagate the &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; event. The scope can be removed from the scope hierarchy using &lt;a href=&quot;%24rootscope.scope#%24destroy.html&quot;&gt;$destroy()&lt;/a&gt;.</source>
          <target state="translated">親スコープは&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest（）&lt;/a&gt;イベントを伝達します。&lt;a href=&quot;%24rootscope.scope#%24destroy.html&quot;&gt;$ destroy（）&lt;/a&gt;を使用して、スコープ階層からスコープを削除できます。</target>
        </trans-unit>
        <trans-unit id="d8541058d76a0f7d9d5c86cb32a517c836066fea" translate="yes" xml:space="preserve">
          <source>The plural syntax supports an optional &lt;code&gt;offset&lt;/code&gt; syntax that is used in matching. It's simpler to explain this with an example.</source>
          <target state="translated">複数の構文は、マッチングで使用されるオプションの &lt;code&gt;offset&lt;/code&gt; 構文をサポートします。これを例で説明する方が簡単です。</target>
        </trans-unit>
        <trans-unit id="ba16850007938f287f3d5f3ebf4f4bdd4d282552" translate="yes" xml:space="preserve">
          <source>The predicate to be used for selecting items from &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; から項目を選択するために使用される述語。</target>
        </trans-unit>
        <trans-unit id="82cb53a88d473e7292dcc9cba41cca1fec750b0a" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;draggable&lt;/code&gt; attribute on any element gives the element new behavior. We extended the vocabulary of the browser in a way which is natural to anyone who is familiar with the principles of HTML.</source>
          <target state="translated">要素に &lt;code&gt;draggable&lt;/code&gt; 属性が存在すると、要素に新しい動作が与えられます。HTMLの原則に詳しい人なら誰でも自然な方法で、ブラウザの語彙を拡張しました。</target>
        </trans-unit>
        <trans-unit id="e8b3768b71fbf0ccd49b698b097de049160fa839" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;ModelOptions&lt;/code&gt; value will not be modified. Instead, a new &lt;code&gt;ModelOptions&lt;/code&gt; object will inherit from the previous one overriding or inheriting settings that are defined in the given parameter.</source>
          <target state="translated">以前の &lt;code&gt;ModelOptions&lt;/code&gt; 値は変更されません。代わりに、新しい &lt;code&gt;ModelOptions&lt;/code&gt; オブジェクトは、指定されたパラメーターで定義されている設定をオーバーライドまたは継承する以前のオブジェクトから継承します。</target>
        </trans-unit>
        <trans-unit id="f32c9a1255f13a76d79607f3121c109beee3aef7" translate="yes" xml:space="preserve">
          <source>The purpose of the deferred object is to expose the associated Promise instance as well as APIs that can be used for signaling the successful or unsuccessful completion, as well as the status of the task.</source>
          <target state="translated">deferredオブジェクトの目的は、関連するPromiseインスタンスと、タスクのステータスと同様に、成功または失敗した完了を通知するために使用できるAPIを公開することです。</target>
        </trans-unit>
        <trans-unit id="84e8768d7c2eb6eea9fb7b09e5578fa5d987cd4d" translate="yes" xml:space="preserve">
          <source>The purpose of the promise object is to allow for interested parties to get access to the result of the deferred task when it completes.</source>
          <target state="translated">プロミスオブジェクトの目的は、延期されたタスクが完了したときに、利害関係者がその結果にアクセスできるようにすることです。</target>
        </trans-unit>
        <trans-unit id="12c0a0d61ee769dc0a7c1715994804f7277a2078" translate="yes" xml:space="preserve">
          <source>The recipe for getting help on your unique issue is to create an example that could work (even if it doesn't) in a shareable example on &lt;a href=&quot;http://plnkr.co/&quot;&gt;Plunker&lt;/a&gt;, &lt;a href=&quot;http://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;, or similar site and then post to one of the following:</source>
          <target state="translated">独自の問題についてヘルプを得る方法は、&lt;a href=&quot;http://plnkr.co/&quot;&gt;Plunker&lt;/a&gt;、&lt;a href=&quot;http://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;、または同様のサイトで共有可能なサンプルで機能する例を（機能しない場合でも）作成し、次のいずれかに投稿することです。</target>
        </trans-unit>
        <trans-unit id="079e8e819f81ee0245097308aa15905b30556b87" translate="yes" xml:space="preserve">
          <source>The recipe for getting help on your unique issue is to create an example that could work (even if it doesn't) in a shareable example on &lt;a href=&quot;http://plnkr.co/&quot;&gt;Plunker&lt;/a&gt;, &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;, or similar site and then post to one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fb232d4894865030ea1759887368f2aded3f73" translate="yes" xml:space="preserve">
          <source>The reference to &lt;code&gt;myApp&lt;/code&gt; module in &lt;code&gt;&amp;lt;div ng-app=&quot;myApp&quot;&amp;gt;&lt;/code&gt;. This is what bootstraps the app using your module.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div ng-app=&quot;myApp&quot;&amp;gt;&lt;/code&gt; 内の &lt;code&gt;myApp&lt;/code&gt; モジュールへの参照。これは、モジュールを使用してアプリをブートストラップするものです。</target>
        </trans-unit>
        <trans-unit id="d8810477942beaeaee286fe81161c775d9da02eb" translate="yes" xml:space="preserve">
          <source>The regular expression must be an instance of RegExp (i.e. not a string.) It is matched against the &lt;strong&gt;entire&lt;/strong&gt;&lt;em&gt;normalized / absolute URL&lt;/em&gt; of the resource being tested (even when the RegExp did not have the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; codes.) In addition, any flags present on the RegExp (such as multiline, global, ignoreCase) are ignored.</source>
          <target state="translated">正規表現はRegExpのインスタンスでなければなりません（つまり、文字列ではありません）。正規表現は、テストされているリソースの&lt;em&gt;正規化された/絶対URL &lt;/em&gt;&lt;strong&gt;全体&lt;/strong&gt;と照合されます（RegExpに &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; コードがなかった場合でも）。 RegExpに存在するフラグ（複数行、グローバル、ignoreCaseなど）は無視されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="862fa8a8a687fa2b536d9c358bd6db3e5af9b82c" translate="yes" xml:space="preserve">
          <source>The replacement process migrates all of the attributes / classes from the old element to the new one. See the &lt;a href=&quot;../../../guide/directive#template-expanding-directive.html&quot;&gt;Directives Guide&lt;/a&gt; for an example.</source>
          <target state="translated">置換プロセスは、すべての属性/クラスを古い要素から新しい要素に移行します。例については、&lt;a href=&quot;../../../guide/directive#template-expanding-directive.html&quot;&gt;ディレクティブガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="baae8e3179a72344916f02ad84053532a8debe76" translate="yes" xml:space="preserve">
          <source>The response object has these properties:</source>
          <target state="translated">レスポンスオブジェクトは、これらのプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="954fa0733320ae27181ccf9760b44cb912d27915" translate="yes" xml:space="preserve">
          <source>The result of a prior &lt;a href=&quot;%24sce#trustAs.html&quot;&gt;&lt;code&gt;$sce.trustAs&lt;/code&gt;&lt;/a&gt; call, or anything else (which will not be considered trusted.)</source>
          <target state="translated">以前の&lt;a href=&quot;%24sce#trustAs.html&quot;&gt; &lt;code&gt;$sce.trustAs&lt;/code&gt; &lt;/a&gt;呼び出しの結果、またはその他（信頼されているとは見なされません）。</target>
        </trans-unit>
        <trans-unit id="778ed68784500d80168f4f1cb8de42f22ef35550" translate="yes" xml:space="preserve">
          <source>The result of a prior &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; call or anything else.</source>
          <target state="translated">以前の&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;呼び出しまたはその他の結果。</target>
        </trans-unit>
        <trans-unit id="f6e45a4404226652de8c58acd05d8e6b3ea99beb" translate="yes" xml:space="preserve">
          <source>The result of a prior &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; call, or anything else (which will not be considered trusted.)</source>
          <target state="translated">以前の&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;呼び出し、またはその他のもの（信頼されているとは見なされません）の結果。</target>
        </trans-unit>
        <trans-unit id="0fbfd9ab10f2fcfc0e43605231238f6c0ded7faf" translate="yes" xml:space="preserve">
          <source>The result of evaluating the expression.</source>
          <target state="translated">式を評価した結果。</target>
        </trans-unit>
        <trans-unit id="24d1f7d570b94cc6ad9c9b7d800fac81d6320b04" translate="yes" xml:space="preserve">
          <source>The result of this is a live binding between the scope and the DOM. So at this point, a change in a model on the compiled scope will be reflected in the DOM.</source>
          <target state="translated">その結果、スコープとDOMの間でライブバインディングが行われます。つまり、この時点で、コンパイルされたスコープ上のモデルの変更がDOMに反映されることになります。</target>
        </trans-unit>
        <trans-unit id="a6b6643299e7c2857ed4c1427bec152f0e242127" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.CSS, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.CSS, value)&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="45a813410d787bc2a054b283286cdbe7c1020ab1" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.HTML, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.HTML, value)&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="b3ca9d9ba8ef58892b2647a2857931cb76ed96f4" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.JS, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.JS, value)&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="7f0c5cf3a8e15099fba3a60e6508cb831477a19c" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="295e8d1672e32e8c877e2dda418b912ffdc21e8b" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.URL, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.URL, value)&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="85ef2c181da5028df11fbde1df5de14ad91e5d03" translate="yes" xml:space="preserve">
          <source>The return value of calling &lt;code&gt;$timeout&lt;/code&gt; is a promise, which will be resolved when the delay has passed and the timeout function, if provided, is executed.</source>
          <target state="translated">&lt;code&gt;$timeout&lt;/code&gt; の呼び出しの戻り値はプロミスであり、遅延が経過し、タイムアウト関数（指定されている場合）が実行されると解決されます。</target>
        </trans-unit>
        <trans-unit id="3b91569091098ef8818bad33c1660a55b8735e97" translate="yes" xml:space="preserve">
          <source>The return value of registering an interval function is a promise. This promise will be notified upon each tick of the interval, and will be resolved after &lt;code&gt;count&lt;/code&gt; iterations, or run indefinitely if &lt;code&gt;count&lt;/code&gt; is not defined. The value of the notification will be the number of iterations that have run. To cancel an interval, call &lt;code&gt;$interval.cancel(promise)&lt;/code&gt;.</source>
          <target state="translated">間隔関数の登録の戻り値は、promiseです。このpromiseは、間隔のティックごとに通知され、 &lt;code&gt;count&lt;/code&gt; の反復後に解決されるか、 &lt;code&gt;count&lt;/code&gt; が定義されていない場合は無期限に実行されます。通知の値は、実行された反復の数になります。間隔をキャンセルするには、 &lt;code&gt;$interval.cancel(promise)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="ffa5113ebf43540eb4e8acfea21d2d33bd174676" translate="yes" xml:space="preserve">
          <source>The returned function also has the following properties:</source>
          <target state="translated">また、返される関数は以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="b5179be6b86116655b38058f0ad19bd9de4712c8" translate="yes" xml:space="preserve">
          <source>The returned resource object has action methods which provide high-level behaviors without the need to interact with the low level &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http&lt;/a&gt; service.</source>
          <target state="translated">返されたリソースオブジェクトには、低レベルの&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ http&lt;/a&gt;サービスとやり取りすることなく高レベルの動作を提供するアクションメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="6023496af7670d9c11586559bb4cd6e937a06ca6" translate="yes" xml:space="preserve">
          <source>The root element of AngularJS application. This is either the element where &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; was declared or the element passed into &lt;a href=&quot;../function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt;. The element represents the root element of application. It is also the location where the application's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt; service gets published, and can be retrieved using &lt;code&gt;$rootElement.injector()&lt;/code&gt;.</source>
          <target state="translated">AngularJSアプリケーションのルート要素。これは、&lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;が宣言された要素、またはangular.bootstrapに渡された要素のいずれか&lt;a href=&quot;../function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;。要素は、アプリケーションのルート要素を表します。これは、アプリケーションの&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injector&lt;/a&gt;サービスが公開される場所でもあり、 &lt;code&gt;$rootElement.injector()&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="24dbde550866bde503deb0950b1e8e1246eac032" translate="yes" xml:space="preserve">
          <source>The root element of AngularJS application. This is either the element where &lt;a href=&quot;directive/ngapp&quot;&gt;ngApp&lt;/a&gt; was declared or the element passed into &lt;a href=&quot;function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt;. The element represents the root element of application. It is also the location where the application's &lt;a href=&quot;../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt; service gets published, and can be retrieved using &lt;code&gt;$rootElement.injector()&lt;/code&gt;.</source>
          <target state="translated">AngularJSアプリケーションのルート要素。これは、&lt;a href=&quot;directive/ngapp&quot;&gt;ngApp&lt;/a&gt;が宣言された要素、またはangular.bootstrapに渡された要素のいずれか&lt;a href=&quot;function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;。要素は、アプリケーションのルート要素を表します。これは、アプリケーションの&lt;a href=&quot;../auto/service/%24injector&quot;&gt;$ injector&lt;/a&gt;サービスが公開される場所でもあり、 &lt;code&gt;$rootElement.injector()&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="9fcf79b2ca7c0e61431c4ddcce676e6a46e50533" translate="yes" xml:space="preserve">
          <source>The root scope</source>
          <target state="translated">ルートスコープ</target>
        </trans-unit>
        <trans-unit id="af6c0993a1b0bfa5a18a6aaa404dc362b0e915a7" translate="yes" xml:space="preserve">
          <source>The route change (and the &lt;code&gt;$location&lt;/code&gt; change that triggered it) can be prevented by calling &lt;code&gt;preventDefault&lt;/code&gt; method of the event. See &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; for more details about event object.</source>
          <target state="translated">ルートの変更（およびそれをトリガーした &lt;code&gt;$location&lt;/code&gt; 変更）は、イベントの &lt;code&gt;preventDefault&lt;/code&gt; メソッドを呼び出すことによって防止できます。イベントオブジェクトの詳細については、&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fa7560a7875748906d4d03990b3f182804ac86d0" translate="yes" xml:space="preserve">
          <source>The route parameters are a combination of &lt;a href=&quot;../../ng/service/%24location&quot;&gt;&lt;code&gt;$location&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;../../ng/service/%24location#search.html&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ng/service/%24location#path.html&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;path&lt;/code&gt; parameters are extracted when the &lt;a href=&quot;%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; path is matched.</source>
          <target state="translated">ルートパラメータは&lt;a href=&quot;../../ng/service/%24location&quot;&gt; &lt;code&gt;$location&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../ng/service/%24location#search.html&quot;&gt; &lt;code&gt;search()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ng/service/%24location#path.html&quot;&gt; &lt;code&gt;path()&lt;/code&gt; の&lt;/a&gt;組み合わせです。 &lt;code&gt;path&lt;/code&gt; 時にパラメータが抽出された&lt;a href=&quot;%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt;パスが一致しています。</target>
        </trans-unit>
        <trans-unit id="a43d955a33928fdf9831543b7e1ccfb18aac7d0a" translate="yes" xml:space="preserve">
          <source>The same approach to animation can be used using JavaScript code (&lt;strong&gt;for simplicity, we rely on jQuery to perform animations here&lt;/strong&gt;):</source>
          <target state="translated">JavaScriptコードを使用してアニメーションへの同じアプローチを使用できます（ここでは&lt;strong&gt;、簡単にするために、jQueryを使用してアニメーションを実行しています&lt;/strong&gt;）。</target>
        </trans-unit>
        <trans-unit id="523d2b0e20860e85d563f00d6bc85a673967639f" translate="yes" xml:space="preserve">
          <source>The sanitization is a security measure aimed at prevent XSS attacks via html links.</source>
          <target state="translated">サニタイズとは、htmlリンクを経由したXSS攻撃を防ぐためのセキュリティ対策です。</target>
        </trans-unit>
        <trans-unit id="1c5c39472248d0e17c07e839034df405aa0eb20b" translate="yes" xml:space="preserve">
          <source>The sanitization is a security measure aimed at preventing XSS attacks via html links.</source>
          <target state="translated">サニタイズとは、htmlリンクを経由したXSS攻撃を防ぐためのセキュリティ対策です。</target>
        </trans-unit>
        <trans-unit id="b4a02425298ded7dac67b95b4a87a03949623e78" translate="yes" xml:space="preserve">
          <source>The scope property can be &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, or an object:</source>
          <target state="translated">スコーププロパティは、 &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、またはオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="f955ab37c085081f8ecb0e355fa65bbe8fdd0a33" translate="yes" xml:space="preserve">
          <source>The second approach (including the locale JavaScript file in &lt;code&gt;index.html&lt;/code&gt;) may be slower because an extra script needs to be loaded.</source>
          <target state="translated">2番目の方法（ &lt;code&gt;index.html&lt;/code&gt; のロケールJavaScriptファイルを含む）は、追加のスクリプトをロードする必要があるため、遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ef0a91ee83246c2362ec6b21594ab31561d60a90" translate="yes" xml:space="preserve">
          <source>The second kind of new markup are the double curly braces &lt;code&gt;{{ expression | filter }}&lt;/code&gt;: When the compiler encounters this markup, it will replace it with the evaluated value of the markup. An &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; in a template is a JavaScript-like code snippet that allows AngularJS to read and write variables. Note that those variables are not global variables. Just like variables in a JavaScript function live in a scope, AngularJS provides a &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt; for the variables accessible to expressions. The values that are stored in variables on the scope are referred to as the &lt;em&gt;model&lt;/em&gt; in the rest of the documentation. Applied to the example above, the markup directs AngularJS to &quot;take the data we got from the input widgets and multiply them together&quot;.</source>
          <target state="translated">2番目の種類の新しいマークアップは、中かっこ &lt;code&gt;{{ expression | filter }}&lt;/code&gt; ：コンパイラーがこのマークアップを検出すると、マークアップの評価値に置き換えます。テンプレート内の&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;は、AngularJSが変数を読み書きできるようにするJavaScriptのようなコードスニペットです。これらの変数はグローバル変数ではないことに注意してください。 JavaScript関数の変数がスコープ内に存在するのと同じように、AngularJSは式にアクセス可能な変数の&lt;a href=&quot;scope&quot;&gt;スコープ&lt;/a&gt;を提供します。スコープの変数に格納される値は、以降のドキュメントでは&lt;em&gt;モデル&lt;/em&gt;と呼ばれます。上記の例に適用すると、マークアップはAngularJSに「入力ウィジェットから取得したデータを取得してそれらを乗算する」ように指示します。</target>
        </trans-unit>
        <trans-unit id="2ebae70ef1fa6d7815534c38bd1f7fc688ed15c4" translate="yes" xml:space="preserve">
          <source>The second option is more common in the AngularJS community, and is generally used in boilerplates and in this guide. However, there are advantages to binding properties directly to the controller and avoiding scope.</source>
          <target state="translated">2つ目のオプションはAngularJSコミュニティではより一般的で、一般的にはボイラープレートやこのガイドで使用されています。しかし、プロパティをコントローラに直接バインドしてスコープを回避するメリットがあります。</target>
        </trans-unit>
        <trans-unit id="58b2b19de1ee7661079f7d4e8bb9f6b0ded798f9" translate="yes" xml:space="preserve">
          <source>The section &lt;a href=&quot;scope#directives-that-create-scopes.html&quot;&gt;Directives that Create Scopes&lt;/a&gt; has more info about which directives create scopes.</source>
          <target state="translated">&lt;a href=&quot;scope#directives-that-create-scopes.html&quot;&gt;スコープを作成するディレクティブ&lt;/a&gt;のセクションには、どのディレクティブがスコープを作成するかについての詳細があります。</target>
        </trans-unit>
        <trans-unit id="7899b56cd85970f84bbdd5c6f66e1f854610afa5" translate="yes" xml:space="preserve">
          <source>The selection keywords can be either exact matches or language dependent &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;plural categories&lt;/a&gt;.</source>
          <target state="translated">選択キーワードは、完全一致または言語依存の&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;複数カテゴリの&lt;/a&gt;いずれかです。</target>
        </trans-unit>
        <trans-unit id="b8625b6727f5759d3c8e5906c05a932804143e94" translate="yes" xml:space="preserve">
          <source>The service guarantees that the identity of the &lt;code&gt;$routeParams&lt;/code&gt; object will remain unchanged (but its properties will likely change) even when a route change occurs.</source>
          <target state="translated">このサービスは、ルートが変更された場合でも、 &lt;code&gt;$routeParams&lt;/code&gt; オブジェクトのID が変更されないままであることを保証します（ただし、そのプロパティは変更される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="60b4ba9fbc0c43d1d89edc827281cf4b26db6b11" translate="yes" xml:space="preserve">
          <source>The simplest form is to extract the dependencies from the arguments of the function. This is done by converting the function into a string using &lt;code&gt;toString()&lt;/code&gt; method and extracting the argument names.</source>
          <target state="translated">最も簡単な形式は、関数の引数から依存関係を抽出することです。これは、 &lt;code&gt;toString()&lt;/code&gt; メソッドを使用して関数を文字列に変換し、引数名を抽出することによって行われます。</target>
        </trans-unit>
        <trans-unit id="3d8b353bfb07213b4379a03d5d422c15fb95b7ac" translate="yes" xml:space="preserve">
          <source>The simplest way to get hold of the dependencies is to assume that the function parameter names are the names of the dependencies.</source>
          <target state="translated">依存関係を把握する最も簡単な方法は、関数のパラメータ名が依存関係の名前であると仮定することです。</target>
        </trans-unit>
        <trans-unit id="c64a50b85ba98a676c625d981a6a8bbf9f4f8a52" translate="yes" xml:space="preserve">
          <source>The singleton instance of the &lt;a href=&quot;../type/rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; type, which is associated with the top level &lt;a href=&quot;%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最上位の&lt;a href=&quot;%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;関連付けられている&lt;a href=&quot;../type/rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt;タイプのシングルトンインスタンス。</target>
        </trans-unit>
        <trans-unit id="ba995a06669ab9293ed40548419fa1f16acfcf3f" translate="yes" xml:space="preserve">
          <source>The singleton instance of the &lt;a href=&quot;ngcomponentrouter/type/rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; type, which is associated with the top level &lt;a href=&quot;ngcomponentrouter/service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最上位の&lt;a href=&quot;ngcomponentrouter/service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;関連付けられている&lt;a href=&quot;ngcomponentrouter/type/rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt;タイプのシングルトンインスタンス。</target>
        </trans-unit>
        <trans-unit id="d028290d2d263328b04957680190b4fc0e324747" translate="yes" xml:space="preserve">
          <source>The singleton instance of the &lt;a href=&quot;type/rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; type, which is associated with the top level &lt;a href=&quot;service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最上位の&lt;a href=&quot;service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;関連付けられている&lt;a href=&quot;type/rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt;タイプのシングルトンインスタンス。</target>
        </trans-unit>
        <trans-unit id="767e784d7ccc55d7ed23bfc011d3d6882f0b815d" translate="yes" xml:space="preserve">
          <source>The solution is to break the compilation process into two phases:</source>
          <target state="translated">解決策は、コンパイルプロセスを2つのフェーズに分けることです。</target>
        </trans-unit>
        <trans-unit id="44bd33d4e5c5dbd425e1b01d352cce7c15b457b1" translate="yes" xml:space="preserve">
          <source>The sorted array.</source>
          <target state="translated">ソートされた配列。</target>
        </trans-unit>
        <trans-unit id="2132b1a1146e5e5ced071e842080bf9a009b6944" translate="yes" xml:space="preserve">
          <source>The source array.</source>
          <target state="translated">ソース配列です。</target>
        </trans-unit>
        <trans-unit id="0e88179bff5210ac7427674521c7a3345e2dd3b9" translate="yes" xml:space="preserve">
          <source>The source that will be used to make a copy. Can be any type, including primitives, &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">コピーの作成に使用されるソース。プリミティブ、 &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; など、任意のタイプを使用できます。</target>
        </trans-unit>
        <trans-unit id="d85a9cbe026aa1a3ba5f747284fb0ad3f412ddf3" translate="yes" xml:space="preserve">
          <source>The special &lt;strong&gt;string&lt;/strong&gt;, &lt;code&gt;'self'&lt;/code&gt;, can be used to match against all URLs of the &lt;strong&gt;same domain&lt;/strong&gt; as the application document using the &lt;strong&gt;same protocol&lt;/strong&gt;.</source>
          <target state="translated">特殊な&lt;strong&gt;文字列を&lt;/strong&gt;、 &lt;code&gt;'self'&lt;/code&gt; 、すべてのURLを照合するために使用することができ&lt;strong&gt;、同じドメイン&lt;/strong&gt;を使用してアプリケーション文書と&lt;strong&gt;同じプロトコルを&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b55be8e2b115455f7e384250866854b317142fba" translate="yes" xml:space="preserve">
          <source>The special property name that matches against any property. By default &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="translated">任意のプロパティと一致する特別なプロパティ名。デフォルトでは &lt;code&gt;$&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7279a354975752084c586a2a76858e65adbcf9b6" translate="yes" xml:space="preserve">
          <source>The streamlined ES6 style promise is essentially just using $q as a constructor which takes a &lt;code&gt;resolver&lt;/code&gt; function as the first argument. This is similar to the native Promise implementation from ES6, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="translated">合理化されたES6スタイルのpromiseは、基本的に、最初の引数として &lt;code&gt;resolver&lt;/code&gt; 関数をとるコンストラクターとして$ qを使用するだけです。これはES6からネイティブの約束の実装に似て、参照&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;MDNを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a25884531cd967bc8dd68721f141065ccbf8a1a8" translate="yes" xml:space="preserve">
          <source>The string can use the &lt;code&gt;controller as property&lt;/code&gt; syntax, where the controller instance is published as the specified property on the &lt;code&gt;scope&lt;/code&gt;; the &lt;code&gt;scope&lt;/code&gt; must be injected into &lt;code&gt;locals&lt;/code&gt; param for this to work correctly.</source>
          <target state="translated">文字列は、 &lt;code&gt;controller as property&lt;/code&gt; 構文として使用できます。コントローラーインスタンスは、 &lt;code&gt;scope&lt;/code&gt; 指定されたプロパティとして公開されます。これを正しく機能させるには、 &lt;code&gt;scope&lt;/code&gt; を &lt;code&gt;locals&lt;/code&gt; パラメータに挿入する必要があります。</target>
        </trans-unit>
        <trans-unit id="a64f560cdc5bc1215f3896949fd70a8f33418cdb" translate="yes" xml:space="preserve">
          <source>The string is matched against the full &lt;em&gt;normalized / absolute URL&lt;/em&gt; of the resource being tested (substring matches are not good enough.)</source>
          <target state="translated">文字列は、テストされるリソースの完全な&lt;em&gt;正規化/絶対URL&lt;/em&gt;と照合されます（部分文字列の照合では不十分です）。</target>
        </trans-unit>
        <trans-unit id="14ebe6cf667e2257d2375b20acaba4b014d40a48" translate="yes" xml:space="preserve">
          <source>The syntax extension is based on a subset of the ICU MessageFormat syntax that covers plurals and gender selections. Please refer to the links in the &amp;ldquo;Further Reading&amp;rdquo; section at the bottom of this section.</source>
          <target state="translated">構文拡張は、複数形と性別の選択をカバーするICU MessageFormat構文のサブセットに基づいています。このセクションの下部にある「関連資料」セクションのリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="b15b3f178b589324cba127ffcc8609a03ddf2842" translate="yes" xml:space="preserve">
          <source>The syntax for gender based message selection looks like the following:</source>
          <target state="translated">性別に基づくメッセージ選択の構文は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="514dc6d368ee619bf7af44246bc3cca46261a937" translate="yes" xml:space="preserve">
          <source>The syntax for plural based message selection looks like the following:</source>
          <target state="translated">複数形をベースにしたメッセージ選択の構文は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="331463984a3b27be7e66de67f6ec1c8959531bed" translate="yes" xml:space="preserve">
          <source>The text with markup to interpolate.</source>
          <target state="translated">マークアップで補間するテキスト。</target>
        </trans-unit>
        <trans-unit id="236530003226f5a2700778994862268772faf8ef" translate="yes" xml:space="preserve">
          <source>The third option is the most viable, since it removes the responsibility of locating the dependency from the component. The dependency is simply handed to the component.</source>
          <target state="translated">3 番目のオプションは、コンポーネントから依存関係を探す責任を取り除けるので、最も実行可能です。依存関係は単にコンポーネントに渡されます。</target>
        </trans-unit>
        <trans-unit id="4caf4221a8f1aa9f8dc16ac34dd67bede58930f0" translate="yes" xml:space="preserve">
          <source>The thrown error or the rejection reason of the promise. Usually the rejection reason is the error that caused the promise to get rejected.</source>
          <target state="translated">約束の投げられたエラーまたは拒絶理由。通常、拒絶理由は、約束を拒否された原因となったエラーです。</target>
        </trans-unit>
        <trans-unit id="0fcb5525777e571593fc5ca6445988612048c985" translate="yes" xml:space="preserve">
          <source>The timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model can be defined using &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;. By default, this is the timezone of the browser.</source>
          <target state="translated">モデル内の &lt;code&gt;Date&lt;/code&gt; インスタンスの読み取り/書き込みに使用されるタイムゾーンは、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;を使用して定義できます。デフォルトでは、これはブラウザのタイムゾーンです。</target>
        </trans-unit>
        <trans-unit id="868b7f5eb24b022a5fcaababfa42809503b39961" translate="yes" xml:space="preserve">
          <source>The timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model can be defined using &lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions&lt;/a&gt;. By default, this is the timezone of the browser.</source>
          <target state="translated">モデル内の &lt;code&gt;Date&lt;/code&gt; インスタンスの読み取り/書き込みに使用されるタイムゾーンは、&lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions&lt;/a&gt;を使用して定義できます。デフォルトでは、これはブラウザのタイムゾーンです。</target>
        </trans-unit>
        <trans-unit id="7a7b44ea3970e86105ad586eeb8a71485b91c29b" translate="yes" xml:space="preserve">
          <source>The top level &lt;strong&gt;Routing Component&lt;/strong&gt; associated with the &lt;a href=&quot;%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;関連付けられた最上位の&lt;strong&gt;ルーティングコンポーネント&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="548afd75a531de9081c581cb6d8715fb94f8f938" translate="yes" xml:space="preserve">
          <source>The top level &lt;strong&gt;Routing Component&lt;/strong&gt; associated with the &lt;a href=&quot;ngcomponentrouter/service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngcomponentrouter/service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;関連付けられた最上位の&lt;strong&gt;ルーティングコンポーネント&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="386ecc261ed1232a9a17fbea9ac69f87afe81bba" translate="yes" xml:space="preserve">
          <source>The top level &lt;strong&gt;Routing Component&lt;/strong&gt; associated with the &lt;a href=&quot;service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;関連付けられた最上位の&lt;strong&gt;ルーティングコンポーネント&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3c20caf8f7521f61e6feb092a5803374027a8c2b" translate="yes" xml:space="preserve">
          <source>The trusted URIs for URL sanitization of attribute values is configured using the functions &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; and &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; of &lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性値のURLサニタイズ用の信頼できるURIは、&lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;関数 &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; および &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; を使用して構成されます。</target>
        </trans-unit>
        <trans-unit id="5864476324c5e315d5688546efeaae47300579a1" translate="yes" xml:space="preserve">
          <source>The two images match since they share the same ref value. ngAnimate will now create a transport element (which is a clone of the first image element) and it will then attempt to animate to the position of the second image element in the next view. For the animation to work a special CSS class called &lt;code&gt;ng-anchor&lt;/code&gt; will be added to the transported element.</source>
          <target state="translated">2つの画像は同じ参照値を共有するため、一致します。ngAnimateはトランスポート要素（最初の画像要素のクローン）を作成し、次のビューで2番目の画像要素の位置にアニメーション化しようとします。アニメーションが機能するために、 &lt;code&gt;ng-anchor&lt;/code&gt; と呼ばれる特別なCSSクラスが転送された要素に追加されます。</target>
        </trans-unit>
        <trans-unit id="0e52841430957d24c12d016a27d0ebbbbee23eb5" translate="yes" xml:space="preserve">
          <source>The type of tasks to check for.</source>
          <target state="translated">チェックするタスクの種類。</target>
        </trans-unit>
        <trans-unit id="c9809d2c6f9fe9599eaef845df8e9b7ac65b418e" translate="yes" xml:space="preserve">
          <source>The types of tasks that are flushed include:</source>
          <target state="translated">流されるタスクの種類には、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="08cdbbdad2420a9ae88b4ca94f4b7acbe330690c" translate="yes" xml:space="preserve">
          <source>The typical usage for the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; is to &lt;strong&gt;block &lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;open redirects&lt;/a&gt;&lt;/strong&gt; served by your domain as these would otherwise be trusted but actually return content from the redirected domain.</source>
          <target state="translated">&lt;code&gt;bannedResourceUrlList&lt;/code&gt; の一般的な使用法は、ドメインによって提供される&lt;strong&gt;&lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;オープンリダイレクト&lt;/a&gt;&lt;/strong&gt;を&lt;strong&gt;ブロック&lt;/strong&gt;することです。そうしないと信頼されますが、実際にはリダイレクトされたドメインからコンテンツが返されます。</target>
        </trans-unit>
        <trans-unit id="41f63e429b9e9afc16e7c6b5cbf6dc618b7914d8" translate="yes" xml:space="preserve">
          <source>The typical usage for the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; is to &lt;strong&gt;block &lt;a href=&quot;https://cwe.mitre.org/data/definitions/601.html&quot;&gt;open redirects&lt;/a&gt;&lt;/strong&gt; served by your domain as these would otherwise be trusted but actually return content from the redirected domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b2bd429084177f8681f56d4ade922af6dc9c27" translate="yes" xml:space="preserve">
          <source>The typical usage for the blacklist is to &lt;strong&gt;block &lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;open redirects&lt;/a&gt;&lt;/strong&gt; served by your domain as these would otherwise be trusted but actually return content from the redirected domain.</source>
          <target state="translated">ブラックリストの一般的な使用法は、ドメインによって提供される&lt;strong&gt;&lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;オープンリダイレクト&lt;/a&gt;&lt;/strong&gt;を&lt;strong&gt;ブロック&lt;/strong&gt;することです。そうでない場合、これらは信頼されますが、実際にはリダイレクトされたドメインからコンテンツを返します。</target>
        </trans-unit>
        <trans-unit id="0870b31834bb02fbc73aaf4c9ab88489da8144fb" translate="yes" xml:space="preserve">
          <source>The underlying API is the &lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt;&lt;code&gt;$filterProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">基礎となるAPIは&lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt; &lt;code&gt;$filterProvider&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7da48aa48cb58f7d4f1b84542c5c4e396f23ea4f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;Function(string)&lt;/code&gt; and similar functions to dynamically create and execute code from strings is forbidden. AngularJS makes use of this in the &lt;a href=&quot;../service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service to provide a 30% increase in the speed of evaluating AngularJS expressions. (This CSP rule can be disabled with the CSP keyword &lt;code&gt;unsafe-eval&lt;/code&gt;, but it is generally not recommended as it would weaken the protections offered by CSP.)</source>
          <target state="translated">&lt;code&gt;Function(string)&lt;/code&gt; からコードを動的に作成および実行するための &lt;code&gt;eval()&lt;/code&gt; 、Function（string）および類似の関数の使用は禁止されています。 AngularJSはこれを&lt;a href=&quot;../service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt;サービスで利用して、AngularJS式の評価速度を30％向上させます。 （このCSPルールは、CSPキーワード &lt;code&gt;unsafe-eval&lt;/code&gt; を使用して無効にできますが、CSP が提供する保護を弱めるため、一般的には推奨されません。）</target>
        </trans-unit>
        <trans-unit id="ab18458a0f8961320a15a220d2d9624ea8d111c4" translate="yes" xml:space="preserve">
          <source>The use of inline resources, such as inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements, are forbidden. This prevents apps from injecting custom styles directly into the document. AngularJS makes use of this to include some CSS rules (e.g. &lt;a href=&quot;ngcloak&quot;&gt;&lt;code&gt;ngCloak&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;). To make these directives work when a CSP rule is blocking inline styles, you must link to the &lt;code&gt;angular-csp.css&lt;/code&gt; in your HTML manually. (This CSP rule can be disabled with the CSP keyword &lt;code&gt;unsafe-inline&lt;/code&gt;, but it is generally not recommended as it would weaken the protections offered by CSP.)</source>
          <target state="translated">インライン &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 要素や&amp;lt;style&amp;gt;要素などのインラインリソースの使用は禁止されています。これにより、アプリがカスタムスタイルをドキュメントに直接挿入できなくなります。 AngularJSはこれを利用して、いくつかのCSSルールを&lt;a href=&quot;ngcloak&quot;&gt; &lt;code&gt;ngCloak&lt;/code&gt; &lt;/a&gt;ます（例：ngCloakと&lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt;）。 CSPルールがインラインスタイルをブロックしているときにこれらのディレクティブを機能させるには、HTMLの &lt;code&gt;angular-csp.css&lt;/code&gt; に手動でリンクする必要があります。 （このCSPルールは、CSPキーワード &lt;code&gt;unsafe-inline&lt;/code&gt; を使用して無効にできますが、CSP によって提供される保護が弱まるため、通常は推奨されません。）</target>
        </trans-unit>
        <trans-unit id="eebb37fdb7d6c174eb9c065210d8ec5ba28ee2bf" translate="yes" xml:space="preserve">
          <source>The validator sets the &lt;code&gt;maxlength&lt;/code&gt; error key if the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; is longer than the integer obtained by evaluating the AngularJS expression given in the &lt;code&gt;ngMaxlength&lt;/code&gt; attribute value.</source>
          <target state="translated">&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;ngMaxlength&lt;/code&gt; 属性値で指定されたAngularJS式を評価することによって取得された整数よりも長い場合、バリデーターは &lt;code&gt;maxlength&lt;/code&gt; エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="95e23f64426ffefd09f928fb9dadff94eb920e6f" translate="yes" xml:space="preserve">
          <source>The validator sets the &lt;code&gt;minlength&lt;/code&gt; error key if the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; is shorter than the integer obtained by evaluating the AngularJS expression given in the &lt;code&gt;ngMinlength&lt;/code&gt; attribute value.</source>
          <target state="translated">&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;ngMinlength&lt;/code&gt; 属性値で指定されたAngularJS式を評価することによって取得された整数より短い場合、バリデーターは &lt;code&gt;minlength&lt;/code&gt; エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="e24301c2cb5d52b2ea32feb0ec399b5f0d739449" translate="yes" xml:space="preserve">
          <source>The validator sets the &lt;code&gt;pattern&lt;/code&gt; error key if the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; does not match a RegExp which is obtained from the &lt;code&gt;ngPattern&lt;/code&gt; attribute value:</source>
          <target state="translated">&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;ngPattern&lt;/code&gt; 属性値から取得されるRegExpと一致しない場合、バリデーターは &lt;code&gt;pattern&lt;/code&gt; エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="8b8747fb2ca401641b1a4ecf5eb6042bf5b61777" translate="yes" xml:space="preserve">
          <source>The validator will set the &lt;code&gt;required&lt;/code&gt; error key to true if the &lt;code&gt;required&lt;/code&gt; attribute is set and calling &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24isEmpty.html&quot;&gt;&lt;code&gt;NgModelController.$isEmpty&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;. For example, the &lt;code&gt;$isEmpty()&lt;/code&gt; implementation for &lt;code&gt;input[text]&lt;/code&gt; checks the length of the &lt;code&gt;$viewValue&lt;/code&gt;. When developing custom controls, &lt;code&gt;$isEmpty()&lt;/code&gt; can be overwritten to account for a $viewValue that is not string-based.</source>
          <target state="translated">バリデータが設定されます &lt;code&gt;required&lt;/code&gt; 場合は、trueにエラーキーを &lt;code&gt;required&lt;/code&gt; 属性が設定され、呼び出し&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24isEmpty.html&quot;&gt; &lt;code&gt;NgModelController.$isEmpty&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt;返します &lt;code&gt;true&lt;/code&gt; 。たとえば、 &lt;code&gt;input[text]&lt;/code&gt; の &lt;code&gt;$isEmpty()&lt;/code&gt; 実装は、 &lt;code&gt;$viewValue&lt;/code&gt; 長さをチェックします。カスタムコントロールを開発するとき、 &lt;code&gt;$isEmpty()&lt;/code&gt; を上書きして、文字列ベースではない$ viewValueを考慮することができます。</target>
        </trans-unit>
        <trans-unit id="da43acb6e9a82ff95654a25655433849b9f27b07" translate="yes" xml:space="preserve">
          <source>The value in the model that the control is bound to.</source>
          <target state="translated">制御がバインドされているモデル内の値。</target>
        </trans-unit>
        <trans-unit id="14b23e5ee2cfb999b445acbc780311b9a12fe737" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;ngModel&lt;/code&gt; won't be set unless it passes validation for the input field. For example: inputs of type &lt;code&gt;email&lt;/code&gt; must have a value in the form of &lt;code&gt;user@domain&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; の値は、入力フィールドの検証に合格しない限り設定されません。例： &lt;code&gt;email&lt;/code&gt; タイプの入力には、 &lt;code&gt;user@domain&lt;/code&gt; 形式の値が必要です。</target>
        </trans-unit>
        <trans-unit id="b7c0a4135d026e4590cabdf020b1214be6ef8102" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;count&lt;/code&gt; attribute can be either a string or an &lt;a href=&quot;../../../guide/expression&quot;&gt;AngularJS expression&lt;/a&gt;; these are evaluated on the current scope for its bound value.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 属性の値は、文字列または&lt;a href=&quot;../../../guide/expression&quot;&gt;AngularJS式の&lt;/a&gt;いずれかです。これらは、バインドされた値の現在のスコープで評価されます。</target>
        </trans-unit>
        <trans-unit id="1b73e986ca72f64054cdba299a9701373d5dfec0" translate="yes" xml:space="preserve">
          <source>The value of the input to check for emptiness.</source>
          <target state="translated">空っぽかどうかをチェックするための入力値です。</target>
        </trans-unit>
        <trans-unit id="68500ed77d9f6217be712f6f8cdb503a97df879b" translate="yes" xml:space="preserve">
          <source>The value of the resulting Date object will be set to Thursday at 00:00:00 of the requested week, due to ISO-8601 week numbering standards. Information on ISO's system for numbering the weeks of the year can be found at: &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&quot;&gt;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&lt;/a&gt;</source>
          <target state="translated">結果のDateオブジェクトの値は、ISO-8601の週番号付け標準により、要求された週の木曜日の00:00:00に設定されます。1年の週に番号を付けるためのISOのシステムに関する情報は、&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&quot;&gt;https&lt;/a&gt;：//en.wikipedia.org/wiki/ISO_8601#Week_datesにあります。</target>
        </trans-unit>
        <trans-unit id="44463f976abf31a5394099b3a0a4e6208a67f0fc" translate="yes" xml:space="preserve">
          <source>The value referenced by &lt;code&gt;ng-model&lt;/code&gt; is changed programmatically and both the &lt;code&gt;$modelValue&lt;/code&gt; and the &lt;code&gt;$viewValue&lt;/code&gt; are different from last time.</source>
          <target state="translated">参照値 &lt;code&gt;ng-model&lt;/code&gt; プログラムで変更され、両方の &lt;code&gt;$modelValue&lt;/code&gt; と &lt;code&gt;$viewValue&lt;/code&gt; 前回とは異なります。</target>
        </trans-unit>
        <trans-unit id="6b0143fd9ece1d0387124beb89dd5c7fd4bc5a91" translate="yes" xml:space="preserve">
          <source>The value that should be considered trusted.</source>
          <target state="translated">信頼されていると考えるべき値。</target>
        </trans-unit>
        <trans-unit id="6b506880f20531602ad2eb0fa099daa12bfb5b84" translate="yes" xml:space="preserve">
          <source>The value that that should be considered trusted.</source>
          <target state="translated">信頼されていると考えるべき価値観。</target>
        </trans-unit>
        <trans-unit id="3174f6de2b1a572b3ef68f749f440587119fa478" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.CSS&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.CSS&lt;/code&gt; コンテキストで信頼できるものとしてマークする値。</target>
        </trans-unit>
        <trans-unit id="c130aa44236fc44f23102a665d5d5963b688f052" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.HTML&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.HTML&lt;/code&gt; コンテキストで信頼できるものとしてマークする値。</target>
        </trans-unit>
        <trans-unit id="cf9b76745715759b224d248b10d334a51d267341" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.JS&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.JS&lt;/code&gt; コンテキストで信頼できるものとしてマークする値。</target>
        </trans-unit>
        <trans-unit id="def9516ca7a6eb4975cef660dfbfbd813f67783b" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; コンテキストで信頼できるものとしてマークする値。</target>
        </trans-unit>
        <trans-unit id="055605c6f52998605859dc20359c0bf18aa8a534" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.URL&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.URL&lt;/code&gt; コンテキストで信頼できるとマークする値。</target>
        </trans-unit>
        <trans-unit id="435759993cef3a1ebd9ea38393b7168b54598cf3" translate="yes" xml:space="preserve">
          <source>The value to pass to &lt;code&gt;$sce.getTrusted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted&lt;/code&gt; に渡す値。</target>
        </trans-unit>
        <trans-unit id="35971100dfde05b044e38f25dc4ec52471feb171" translate="yes" xml:space="preserve">
          <source>The value to pass to &lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt; に渡す値。</target>
        </trans-unit>
        <trans-unit id="ac85b0b337041f750863e0ac9290cbb89be4187d" translate="yes" xml:space="preserve">
          <source>The value to which the &lt;code&gt;ngModel&lt;/code&gt; expression should be set when selected. Note that &lt;code&gt;value&lt;/code&gt; only supports &lt;code&gt;string&lt;/code&gt; values, i.e. the scope model needs to be a string, too. Use &lt;code&gt;ngValue&lt;/code&gt; if you need complex models (&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, ...).</source>
          <target state="translated">選択時に &lt;code&gt;ngModel&lt;/code&gt; 式を設定する値。 &lt;code&gt;value&lt;/code&gt; は &lt;code&gt;string&lt;/code&gt; 値のみをサポートすることに注意してください。つまり、スコープモデルも文字列である必要があります。複雑なモデル（ &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;object&lt;/code&gt; 、...）が必要な場合は、 &lt;code&gt;ngValue&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4c416f0d3d013e85da9db521ca1012a12785ff0a" translate="yes" xml:space="preserve">
          <source>The value to which the expression should be set when not selected.</source>
          <target state="translated">選択されていないときに、式が設定されるべき値。</target>
        </trans-unit>
        <trans-unit id="24f1cbcb12e1756c07f79821079ed5875b8c6b04" translate="yes" xml:space="preserve">
          <source>The value to which the expression should be set when selected.</source>
          <target state="translated">選択されたときに設定されるべき式の値。</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">値です。</target>
        </trans-unit>
        <trans-unit id="62a76571179e7a797adcf5b0dca4482159e1774f" translate="yes" xml:space="preserve">
          <source>The variable to be bound to.</source>
          <target state="translated">拘束される変数。</target>
        </trans-unit>
        <trans-unit id="eb0c8dfaa72fe998ded88b434f150524ba3c8874" translate="yes" xml:space="preserve">
          <source>The version could then be read back out by accessing the module elsewhere:</source>
          <target state="translated">その後、他の場所でモジュールにアクセスすることで、バージョンを読み出すことができました。</target>
        </trans-unit>
        <trans-unit id="43454983a5496d952f24ef6981aa235148e2e821" translate="yes" xml:space="preserve">
          <source>The watch &lt;code&gt;listener&lt;/code&gt; may change the model, which may trigger other &lt;code&gt;listener&lt;/code&gt;s to fire. This is achieved by rerunning the watchers until no changes are detected. The rerun iteration limit is 10 to prevent an infinite loop deadlock.</source>
          <target state="translated">ウォッチ &lt;code&gt;listener&lt;/code&gt; はモデルを変更する可能性があり、他の &lt;code&gt;listener&lt;/code&gt; の起動をトリガーする場合があります。これは、変更が検出されなくなるまでウォッチャーを再実行することによって実現されます。無限ループのデッドロックを防ぐため、再実行の反復制限は10です。</target>
        </trans-unit>
        <trans-unit id="b3908c90281bc35a0fa4df23a51dff370901b1f6" translate="yes" xml:space="preserve">
          <source>The watchers of the current scope are included in the count and so are all the watchers of isolate child scopes.</source>
          <target state="translated">現在のスコープのウォッチャーはカウントに含まれており、孤立した子スコープのウォッチャーもすべてカウントに含まれています。</target>
        </trans-unit>
        <trans-unit id="f561ff816ae7aefdfc8fd009517d7b9fcbad64ce" translate="yes" xml:space="preserve">
          <source>The way you define a directive, service, or filter is with a factory function. The factory methods are registered with modules. The recommended way of declaring factories is:</source>
          <target state="translated">ディレクティブやサービス、フィルタを定義する方法は、ファクトリ関数で定義します。ファクトリーメソッドはモジュールに登録されます。推奨されるファクトリーの宣言方法は</target>
        </trans-unit>
        <trans-unit id="fb5175d364ed0ee1ef08306c1d28e391169ff525" translate="yes" xml:space="preserve">
          <source>The whitelist for URL sanitization of attribute values is configured using the functions &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; and &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; of &lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性値のURLサニタイズのホワイトリストは、&lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;関数 &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; および &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; を使用して構成されます。</target>
        </trans-unit>
        <trans-unit id="6bcb4b40a369e071e66ceee940ccd85ed11ee25c" translate="yes" xml:space="preserve">
          <source>The workaround is to ensure that such instances are separated by whitespace:</source>
          <target state="translated">回避策は、そのようなインスタンスを空白で区切ることです。</target>
        </trans-unit>
        <trans-unit id="b08b5bc31a0f9b0aaed1244795ed5323c9f55509" translate="yes" xml:space="preserve">
          <source>The wrong way to write it:</source>
          <target state="translated">間違った書き方をしています。</target>
        </trans-unit>
        <trans-unit id="987f327e589afcef1c088418e5aec840d608c486" translate="yes" xml:space="preserve">
          <source>Then load the module in your application by adding it as a dependent module:</source>
          <target state="translated">そして、依存モジュールとして追加することで、アプリケーションにモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="7d2b29d57502f260e757766c62c868a34c233461" translate="yes" xml:space="preserve">
          <source>Then the CSS animation code for the message container looks like so:</source>
          <target state="translated">すると、メッセージコンテナのCSSアニメーションのコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4420f082e957bdeb70a28e331407c72ac0fa9f6e" translate="yes" xml:space="preserve">
          <source>Then you can create an injector and load your modules like this:</source>
          <target state="translated">あとはインジェクターを作って、こんな感じでモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="b74684d8de56bfaa1c2e51da13b1734863d4fb9f" translate="yes" xml:space="preserve">
          <source>Then, configure your test runner to load &lt;code&gt;angular-mocks.js&lt;/code&gt; after &lt;code&gt;angular.js&lt;/code&gt;. This example uses &lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;:</source>
          <target state="translated">その後、ロードするために、あなたのテストランナーを設定し &lt;code&gt;angular-mocks.js&lt;/code&gt; した後 &lt;code&gt;angular.js&lt;/code&gt; 。この例では&lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;Karmaを&lt;/a&gt;使用しています。</target>
        </trans-unit>
        <trans-unit id="17997a7758c649177a887b54f0bdfea90bf19b92" translate="yes" xml:space="preserve">
          <source>Then, configure your test runner to load &lt;code&gt;angular-mocks.js&lt;/code&gt; after &lt;code&gt;angular.js&lt;/code&gt;. This example uses &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32bb96d5e92506ee0985b73373006273831ce51" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-animate.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-animate.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="be42b1b9ea22296aed835ed67fd0503f2d1c7ce1" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-aria.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-aria.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="ac37b863957206f52a67a02d8148afa2722ae351" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-cookies.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-cookies.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="ae69b27ed53748a28e2133d629a343fe3e5b36d0" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-message-format.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-message-format.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="33510a8d30ee13097925c8687d0b4a0dc5b54dd9" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-messages.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-messages.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="bb1a4ae9bcaf5171467ecc41d0db098c41b54bdb" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-mocks.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-mocks.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="b063c697f244bfb6f28cfccd98309c35fe2f0e16" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-parse-ext.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-parse-ext.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="14e0b01648408cdb8437a7490c7878d70c602c47" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-resource.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-resource.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="d20a74b3dd55a1d4eca8992c7a14fa2a1d9e3918" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-route.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-route.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="e735fd0e46663b7101645180fb23c07bb057a514" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-sanitize.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-sanitize.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="4104e34a174331405f4b0d2b7199cfaf3401d567" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-touch.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">次に、HTML に &lt;code&gt;angular-touch.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="d12134494475237ef73f311dad22d23a4a004ddd" translate="yes" xml:space="preserve">
          <source>Then, the &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;run&lt;/a&gt; blocks that have been collected from each module are executed in order of requirement.</source>
          <target state="translated">そして、各モジュールから収集した&lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;実行&lt;/a&gt;ブロックを必要な順に実行します。</target>
        </trans-unit>
        <trans-unit id="2e850ec6b850797a6a79db638c878c1fdc64c72f" translate="yes" xml:space="preserve">
          <source>There also exists a special &lt;a href=&quot;http://code.google.com/web/ajaxcrawling/docs/specification.html&quot;&gt;AJAX crawling scheme&lt;/a&gt; developed by Google that allows bots to crawl the static equivalent of a dynamically generated page, but this schema has been deprecated, and support for it may vary by search engine.</source>
          <target state="translated">Googleが開発した特別な&lt;a href=&quot;http://code.google.com/web/ajaxcrawling/docs/specification.html&quot;&gt;AJAXクロールスキーム&lt;/a&gt;もあり、ボットが動的に生成されたページの静的な同等物をクロールできるようにしていますが、このスキーマは廃止されており、そのサポートは検索エンジンによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="684969af05a92b61decf591b578ed776bf158d34" translate="yes" xml:space="preserve">
          <source>There also exists a special &lt;a href=&quot;https://code.google.com/web/ajaxcrawling/docs/specification.html&quot;&gt;AJAX crawling scheme&lt;/a&gt; developed by Google that allows bots to crawl the static equivalent of a dynamically generated page, but this schema has been deprecated, and support for it may vary by search engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130d9b350defbba659ae904cdf720b49833cb081" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note here. Just like the &lt;code&gt;module.controller&lt;/code&gt; API, the function argument in &lt;code&gt;module.directive&lt;/code&gt; is dependency injected. Because of this, we can use &lt;code&gt;$interval&lt;/code&gt; and &lt;code&gt;dateFilter&lt;/code&gt; inside our directive's &lt;code&gt;link&lt;/code&gt; function.</source>
          <target state="translated">ここで注意すべき点がいくつかあります。同じように &lt;code&gt;module.controller&lt;/code&gt; API、関数の引数 &lt;code&gt;module.directive&lt;/code&gt; は依存関係が注入されています。このため、ディレクティブの &lt;code&gt;link&lt;/code&gt; 関数内で &lt;code&gt;$interval&lt;/code&gt; と &lt;code&gt;dateFilter&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="22aac06fcbba861d9deabbd7db65ea5290a0d817" translate="yes" xml:space="preserve">
          <source>There are a few examples that showcase how to use AngularJS filters with various locale rule sets in the &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/i18n/e2e&quot;&gt;&lt;code&gt;i18n/e2e&lt;/code&gt; directory&lt;/a&gt; of the AngularJS source code.</source>
          <target state="translated">AngularJSソースコードの&lt;a href=&quot;https://github.com/angular/angular.js/tree/master/i18n/e2e&quot;&gt; &lt;code&gt;i18n/e2e&lt;/code&gt; ディレクトリ&lt;/a&gt;に、さまざまなロケールルールセットでAngularJSフィルターを使用する方法を示すいくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="d1bfb8991ae5c4f9e31fb56a70d6baff7aba4e7f" translate="yes" xml:space="preserve">
          <source>There are a few special events that AngularJS emits. When a DOM node that has been compiled with AngularJS's compiler is destroyed, it emits a &lt;code&gt;$destroy&lt;/code&gt; event. Similarly, when an AngularJS scope is destroyed, it broadcasts a &lt;code&gt;$destroy&lt;/code&gt; event to listening scopes.</source>
          <target state="translated">AngularJSが発行するいくつかの特別なイベントがあります。AngularJSのコンパイラーでコンパイルされたDOMノードが破棄されると、 &lt;code&gt;$destroy&lt;/code&gt; イベントが発生します。同様に、AngularJSスコープが破棄されると、リスニングスコープに &lt;code&gt;$destroy&lt;/code&gt; イベントがブロードキャストされます。</target>
        </trans-unit>
        <trans-unit id="2f1db69945853c0d37d9a79a76c27844cddebc4a" translate="yes" xml:space="preserve">
          <source>There are a few things to keep in mind regardless of automatic or manual bootstrapping:</source>
          <target state="translated">自動・手動のブートストラップに関わらず、いくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="95101ca63f8d69f5d9cdd1c823a21dd5e29b3a87" translate="yes" xml:space="preserve">
          <source>There are a few things to keep in mind when using &lt;code&gt;ngApp&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ngApp&lt;/code&gt; を使用する場合は、次の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="eaf3ee4bd5875653a956ae013e1f9a754843ecf9" translate="yes" xml:space="preserve">
          <source>There are a few things you might consider when running your AngularJS application in production.</source>
          <target state="translated">AngularJSアプリケーションを本番環境で実行する際に考慮すべきことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d4c519b820846227a1173c2c2eabfe5a86e6afa6" translate="yes" xml:space="preserve">
          <source>There are a number of ways that templates and expressions can be controlled:</source>
          <target state="translated">テンプレートや式を制御する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="6f12a2ba7d25176e96b87dc8a9715efae8e42b4f" translate="yes" xml:space="preserve">
          <source>There are exactly &lt;strong&gt;two wildcard sequences&lt;/strong&gt; - &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt;. All other characters match themselves.</source>
          <target state="translated">厳密にあります&lt;strong&gt;2ワイルドカードのシーケンス&lt;/strong&gt; - &lt;code&gt;*&lt;/code&gt; および &lt;code&gt;**&lt;/code&gt; は。他のすべての文字は自分自身と一致します。</target>
        </trans-unit>
        <trans-unit id="016247ec0111e77189147435add0171b2c62c098" translate="yes" xml:space="preserve">
          <source>There are five recipe types that define how to create objects: Value, Factory, Service, Provider and Constant.</source>
          <target state="translated">オブジェクトの作成方法を定義する5つのレシピタイプがあります。Value、Factory、Service、Provider、Constantです。</target>
        </trans-unit>
        <trans-unit id="b990c7868d77b4c950319ea8bf70ed42696c2ff8" translate="yes" xml:space="preserve">
          <source>There are many different options for a directive.</source>
          <target state="translated">ディレクティブには様々な選択肢があります。</target>
        </trans-unit>
        <trans-unit id="44a999479cdafb004f6c8616bcc95ef2dfa72651" translate="yes" xml:space="preserve">
          <source>There are no CSS or JS context bindings in AngularJS currently, so their corresponding &lt;code&gt;$sce.trustAs&lt;/code&gt; functions aren't useful yet. This might evolve.</source>
          <target state="translated">現在AngularJSにはCSSまたはJSコンテキストバインディングがないため、対応する &lt;code&gt;$sce.trustAs&lt;/code&gt; 関数はまだ使用できません。これは進化するかもしれません。</target>
        </trans-unit>
        <trans-unit id="00f60ceec8589342669960dc8d147c35c7893ead" translate="yes" xml:space="preserve">
          <source>There are only three ways a component (object or function) can get a hold of its dependencies:</source>
          <target state="translated">コンポーネント(オブジェクトや関数)がその依存関係を手に入れる方法は3つしかありません。</target>
        </trans-unit>
        <trans-unit id="66f6fbd80fe8ea46a687b78aa0411b5df8473d11" translate="yes" xml:space="preserve">
          <source>There are several different ways to disable animations, both globally and for specific animations. Disabling specific animations can help to speed up the render performance, for example for large &lt;code&gt;ngRepeat&lt;/code&gt; lists that don't actually have animations. Because &lt;code&gt;ngAnimate&lt;/code&gt; checks at runtime if animations are present, performance will take a hit even if an element has no animation.</source>
          <target state="translated">アニメーションをグローバルに、または特定のアニメーションに対して無効にする方法はいくつかあります。特定のアニメーションを無効にすると、たとえば実際にはアニメーションがない大きな &lt;code&gt;ngRepeat&lt;/code&gt; リストの場合など、レンダリングのパフォーマンスを高速化するのに役立ちます。 &lt;code&gt;ngAnimate&lt;/code&gt; は実行時にアニメーションが存在するかどうかをチェックするため、要素にアニメーションがない場合でもパフォーマンスに影響します。</target>
        </trans-unit>
        <trans-unit id="5215767d4d7638b5c9fa856bf4e4ce676b7f648e" translate="yes" xml:space="preserve">
          <source>There are several way to mitigate this problem:</source>
          <target state="translated">この問題を緩和する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="e6acde2bec5e72bfd06e3cfbf1f79236cbb60d66" translate="yes" xml:space="preserve">
          <source>There are three kinds of transclusion depending upon whether you want to transclude just the contents of the directive's element, the entire element or multiple parts of the element contents:</source>
          <target state="translated">ディレクティブの要素の内容だけをトランスクルージョンするのか、要素全体をトランスクルージョンするのか、要素の内容の複数の部分をトランスクルージョンするのかによって、3種類のトランスクルージョンがあります。</target>
        </trans-unit>
        <trans-unit id="2199989a69d3b490219217eaf3cfa4a17c693346" translate="yes" xml:space="preserve">
          <source>There are two &lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; in AngularJS's default en-US locale: &quot;one&quot; and &quot;other&quot;.</source>
          <target state="translated">AngularJSのデフォルトのen-USロケールには、「1つ」と「その他」の2つの&lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;複数カテゴリー&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="2f826eb668f3bf75499569546deccba627233780" translate="yes" xml:space="preserve">
          <source>There are two &lt;a href=&quot;https://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; in AngularJS's default en-US locale: &quot;one&quot; and &quot;other&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4cfb93c504b3cf5f31483d3014aea04a7a10e9" translate="yes" xml:space="preserve">
          <source>There are two approaches to providing locale rules to AngularJS:</source>
          <target state="translated">AngularJSにロケールルールを提供するには2つのアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="69520fd35811ca565d4a03687080e48476082679" translate="yes" xml:space="preserve">
          <source>There are two exceptions to this rule:</source>
          <target state="translated">このルールには2つの例外があります。</target>
        </trans-unit>
        <trans-unit id="3a315166c5b92460227594ad824a5f7dffe1174e" translate="yes" xml:space="preserve">
          <source>There are two kinds of Router: &lt;a href=&quot;rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;childrouter&quot;&gt;&lt;code&gt;ChildRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ルーターには、&lt;a href=&quot;rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;childrouter&quot;&gt; &lt;code&gt;ChildRouter&lt;/code&gt; の&lt;/a&gt; 2種類があります。</target>
        </trans-unit>
        <trans-unit id="8457172152396945221a9bb7abc47bdb2fb360a4" translate="yes" xml:space="preserve">
          <source>There are two kinds of interceptors (and two kinds of rejection interceptors):</source>
          <target state="translated">インターセプターには2種類のインターセプター(と2種類の拒絶インターセプター)があります。</target>
        </trans-unit>
        <trans-unit id="984ce92ebd9ffa671cbef47120514527e6ec5ced" translate="yes" xml:space="preserve">
          <source>There are two main differences:</source>
          <target state="translated">大きく分けて2つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="71aafbc13740296ddff7de52f6fd4b006802c2b8" translate="yes" xml:space="preserve">
          <source>There are two ways to register decorators</source>
          <target state="translated">デコレーターの登録方法は2つ</target>
        </trans-unit>
        <trans-unit id="f29586d91e000a0120c5f20624018b52e64c8adc" translate="yes" xml:space="preserve">
          <source>There are two ways to specify what test data should be returned as http responses by the mock backend when the code under test makes http requests:</source>
          <target state="translated">テスト対象のコードが http リクエストをしたときに、モックバックエンドが http レスポンスとして返すテストデータを指定する方法があります。</target>
        </trans-unit>
        <trans-unit id="05eed5a5bae2275e702df7fc9bbddf5598e8921e" translate="yes" xml:space="preserve">
          <source>There are various places that the browser can store (or cache) data. Within AngularJS there are objects created by the &lt;a href=&quot;../api/ng/service/%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt;. These objects, such as &lt;a href=&quot;../api/ng/service/%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt; are used to store and retrieve data, primarily used by &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../api/ng/directive/script&quot;&gt;&lt;code&gt;script&lt;/code&gt;&lt;/a&gt; directive to cache templates and other data.</source>
          <target state="translated">ブラウザがデータを保存（またはキャッシュ）できる場所はさまざまです。 AngularJS内には、&lt;a href=&quot;../api/ng/service/%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;によって作成されたオブジェクトがあります。&lt;a href=&quot;../api/ng/service/%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;などのこれらのオブジェクトは、主に&lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../api/ng/directive/script&quot;&gt; &lt;code&gt;script&lt;/code&gt; &lt;/a&gt;ディレクティブがテンプレートやその他のデータをキャッシュするために使用するデータを格納および取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c8876989e9de229aee2aea75b9ae2ca7d7de6211" translate="yes" xml:space="preserve">
          <source>There are very few scenarios where element replacement is required for the application function, the main one being reusable custom components that are used within SVG contexts (because SVG doesn't work with custom elements in the DOM tree).</source>
          <target state="translated">主なものは、SVG のコンテキスト内で使用される再利用可能なカスタムコンポーネントです(SVG は DOM ツリー内のカスタム要素では動作しないため)。</target>
        </trans-unit>
        <trans-unit id="4e6b2724368909d72a2a983621849f26c6af516a" translate="yes" xml:space="preserve">
          <source>There is a special &lt;code&gt;replace&lt;/code&gt; method which can be used to tell the $location service that the next time the $location service is synced with the browser, the last history record should be replaced instead of creating a new one. This is useful when you want to implement redirection, which would otherwise break the back button (navigating back would retrigger the redirection). To change the current URL without creating a new browser history record you can call:</source>
          <target state="translated">$ locationサービスに次回ブラウザーと同期するときに、新しいレコードを作成する代わりに最後の履歴レコードを置き換える必要があることを$ locationサービスに伝えるために使用できる特別な &lt;code&gt;replace&lt;/code&gt; メソッドがあります。これは、リダイレクトを実装する場合に役立ちます。リダイレクトを実装しないと、[戻る]ボタンが機能しなくなります（戻ると、リダイレクトが再トリガーされます）。新しいブラウザ履歴レコードを作成せずに現在のURLを変更するには、次のように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ad79f1d43f88c0ade864387a26e37d58a6049c9d" translate="yes" xml:space="preserve">
          <source>There is also a button that calls &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;$setViewValue&lt;/a&gt; directly with a &quot;custom&quot; event. Since &quot;custom&quot; is not defined in the &lt;code&gt;updateOn&lt;/code&gt; list, it is considered a &quot;default&quot; event and will update the control if &quot;default&quot; is defined in &lt;code&gt;updateOn&lt;/code&gt;, and will receive the &quot;default&quot; debounce value. Note that this is just to illustrate how custom controls would possibly call &lt;code&gt;$setViewValue&lt;/code&gt;.</source>
          <target state="translated">「カスタム」イベントで&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;$ setViewValueを&lt;/a&gt;直接呼び出すボタンもあります。 「カスタム」は &lt;code&gt;updateOn&lt;/code&gt; リストで定義されていないため、「デフォルト」イベントと見なされ、「デフォルト」が &lt;code&gt;updateOn&lt;/code&gt; で定義されている場合はコントロールを更新し、「デフォルト」デバウンス値を受け取ります。これは、カスタムコントロールが &lt;code&gt;$setViewValue&lt;/code&gt; 呼び出す方法を説明するためだけのものであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="36ecab9037408b71383cabd20abb76e35492f942" translate="yes" xml:space="preserve">
          <source>There is no guarantee that it works for every directive, because interpolation itself is a directive. If another directive accesses attribute data before interpolation has run, it will get the raw interpolation markup and not data.</source>
          <target state="translated">補間自体はディレクティブなので、すべてのディレクティブに対して動作するという保証はありません。補間が実行される前に別のディレクティブが属性データにアクセスした場合、そのディレクティブはデータではなく生の補間マークアップを取得します。</target>
        </trans-unit>
        <trans-unit id="4803d73431676005c82886122ad66c28a6c074d3" translate="yes" xml:space="preserve">
          <source>There is one exception: Links that only contain a hash fragment (e.g. &lt;code&gt;&amp;lt;a href=&quot;#target&quot;&amp;gt;&lt;/code&gt;) will only change &lt;code&gt;$location.hash()&lt;/code&gt; and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.</source>
          <target state="translated">例外が1つあります。ハッシュフラグメントのみを含むリンク（例： &lt;code&gt;&amp;lt;a href=&quot;#target&quot;&amp;gt;&lt;/code&gt; ）は &lt;code&gt;$location.hash()&lt;/code&gt; のみを変更し、それ以外の場合はURLを変更しません。これは、ユーザーが現在どのページにいるかを知らなくても、同じページのアンカーにスクロールするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2027737bb7068a96f000d4d33b193fa46fdcc492" translate="yes" xml:space="preserve">
          <source>There is only one instance of this type in a Component Router application injectable as the &lt;a href=&quot;../service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt; service. This &lt;strong&gt;Router&lt;/strong&gt; is associate with the &lt;strong&gt;Top Level Component&lt;/strong&gt; (&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;). It acts as the connection between the &lt;strong&gt;Routers&lt;/strong&gt; and the &lt;strong&gt;Location&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;サービスとして注入可能なコンポーネントルーターアプリケーションには、このタイプのインスタンスが1つだけあります。この&lt;strong&gt;ルーター&lt;/strong&gt;は&lt;strong&gt;トップレベルコンポーネント&lt;/strong&gt;（&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;）に関連付けられています。これは、&lt;strong&gt;ルーター&lt;/strong&gt;と&lt;strong&gt;ロケーション&lt;/strong&gt;間の接続として機能し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="72de6f193fb85300105ca6265046e6df92fea694" translate="yes" xml:space="preserve">
          <source>There was an error loading this resource. Please try again later.</source>
          <target state="translated">このリソースの読み込みにエラーが発生しました。後でもう一度試してみてください。</target>
        </trans-unit>
        <trans-unit id="3eda2078fc3d76325ba60baef00e4fc07ad7239d" translate="yes" xml:space="preserve">
          <source>Therefore the above can be simplified as:</source>
          <target state="translated">したがって、上記は次のように簡略化することができます。</target>
        </trans-unit>
        <trans-unit id="02108554d592d8fbabf9029cd9d2d981395f0bae" translate="yes" xml:space="preserve">
          <source>Therefore the final directive definition looks something like this:</source>
          <target state="translated">したがって、最終的なディレクティブの定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="dd132ceaead68d5aa4334853896ecc475000f044" translate="yes" xml:space="preserve">
          <source>Therefore, animations can be applied to an element using this temporary class directly via CSS.</source>
          <target state="translated">そのため、このテンポラリクラスを使って、CSSで直接要素にアニメーションを適用することができます。</target>
        </trans-unit>
        <trans-unit id="e76f4192528514d19abc24671684646a83898011" translate="yes" xml:space="preserve">
          <source>Therefore, the CSS code for the inner messages looks like so:</source>
          <target state="translated">そのため、内部メッセージのCSSコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="258dce51948dfa8d6b97e686c254e38bdd7527fc" translate="yes" xml:space="preserve">
          <source>These are the types of AngularJS elements and attributes you can use:</source>
          <target state="translated">以上がAngularJSの要素や属性の種類です。</target>
        </trans-unit>
        <trans-unit id="b4f66b8b15edc1f5323a3f2fe41e4c47e2e5caa0" translate="yes" xml:space="preserve">
          <source>These directives take an expression inside the attribute, and set the corresponding boolean attribute to true when the expression evaluates to truthy.</source>
          <target state="translated">これらのディレクティブは、属性内の式を取り、式がtruthyと評価されたときに対応するboolean属性をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="0914ebf2d4a4b0b0e72a29f4b227f8a9a21e62e7" translate="yes" xml:space="preserve">
          <source>These restrictions can all be combined as needed:</source>
          <target state="translated">これらの制限は、すべて必要に応じて組み合わせることができる。</target>
        </trans-unit>
        <trans-unit id="d1cc4346d96d189e151b816986a2f69e722fafcd" translate="yes" xml:space="preserve">
          <source>These service factories are ordered by request, i.e. they are applied in the same order as the array, on request, but reverse order, on response.</source>
          <target state="translated">これらのサービスファクトリはリクエスト順に並べられます。つまり、リクエスト時には配列と同じ順番で適用されますが、レスポンス時には逆の順番で適用されます。</target>
        </trans-unit>
        <trans-unit id="86ea12079184e49e6888fb5f8e9bf4a333312277" translate="yes" xml:space="preserve">
          <source>They can be used in view templates, controllers or services. AngularJS comes with a collection of &lt;a href=&quot;../filter&quot;&gt;built-in filters&lt;/a&gt;, but it is easy to define your own as well.</source>
          <target state="translated">ビューテンプレート、コントローラー、またはサービスで使用できます。AngularJSには&lt;a href=&quot;../filter&quot;&gt;組み込みのフィルターの&lt;/a&gt;コレクションが付属していますが、独自のフィルターを定義することも簡単です。</target>
        </trans-unit>
        <trans-unit id="4824221375d3ce9b6f04cd13e1f0c90e7b5aac9d" translate="yes" xml:space="preserve">
          <source>Things to keep in mind</source>
          <target state="translated">気をつけたいこと</target>
        </trans-unit>
        <trans-unit id="ab45627ffd28ba0b37493f184de9a27c3fad2e12" translate="yes" xml:space="preserve">
          <source>Things to notice in the example above:</source>
          <target state="translated">上記の例で気をつけるべきこと</target>
        </trans-unit>
        <trans-unit id="4d9616f497178549a1ceba85134b191dff85dc0a" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../api/ng/type/angular.module#decorator.html&quot;&gt;function&lt;/a&gt; is the same as the &lt;code&gt;$provide.decorator&lt;/code&gt; function except it is exposed through the module API. This allows you to separate your decorator patterns from your module config blocks.</source>
          <target state="translated">この&lt;a href=&quot;../api/ng/type/angular.module#decorator.html&quot;&gt;関数&lt;/a&gt;は、モジュールAPIを介して公開されることを除いて、 &lt;code&gt;$provide.decorator&lt;/code&gt; 関数と同じです。これにより、デコレータパターンをモジュール構成ブロックから分離できます。</target>
        </trans-unit>
        <trans-unit id="d2df585301cdbd155523396bd3c907ba55115f87" translate="yes" xml:space="preserve">
          <source>This allows to easily create arbitrarily complex rules for filtering animations, such as allowing specific events only, or enabling animations on specific subtrees of the DOM, etc. Filtering animations can also boost performance for low-powered devices, as well as applications containing a lot of structural operations.</source>
          <target state="translated">これにより、特定のイベントのみを許可したり、DOM の特定のサブツリーでアニメーションを有効にするなど、アニメーションをフィルタリングするための任意の複雑なルールを簡単に作成することができます。また、アニメーションのフィルタリングは、低消費電力のデバイスや、構造的な操作を多く含むアプリケーションのパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="62506bcdde04f9729f5e76db6021ecd55a120d85" translate="yes" xml:space="preserve">
          <source>This allows us to extend the above example with these features:</source>
          <target state="translated">これにより、これらの機能を備えた上記の例を拡張することができる。</target>
        </trans-unit>
        <trans-unit id="2b868a8a849cb543857bdf88802803ebaca814e1" translate="yes" xml:space="preserve">
          <source>This also applies to the &lt;code&gt;when&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt; shortcut methods.</source>
          <target state="translated">これは、 &lt;code&gt;when&lt;/code&gt; および &lt;code&gt;expect&lt;/code&gt; ショートカットメソッドにも適用されます。</target>
        </trans-unit>
        <trans-unit id="0e5d6967a2a93dd0eac33db309a1c3df407c1b33" translate="yes" xml:space="preserve">
          <source>This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation, applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with &lt;code&gt;$animateCss&lt;/code&gt;. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order to provide a working animation that will run in CSS.</source>
          <target state="translated">つまり、クラスの追加、クラスの削除、スタイルの設定、キーフレームアニメーションの動的な設定、ハードコードされた継続時間または遅延値の適用、アニメーションのイージングの変更またはスタッガーアニメーションの適用のほぼすべての組み合わせが、 &lt;code&gt;$animateCss&lt;/code&gt; で機能するすべてのオプションです。サービス自体は、CSSで実行される実際のアニメーションを提供するために、オプションの組み合わせを理解し、要素のスタイルプロパティを調べるのに十分なほどスマートです。</target>
        </trans-unit>
        <trans-unit id="9b79236b9af035a359b621e03d1e7e1f5da1644b" translate="yes" xml:space="preserve">
          <source>This applies both to the &lt;a href=&quot;../directive/nginclude&quot;&gt;&lt;code&gt;ng-include&lt;/code&gt;&lt;/a&gt; directive as well as &lt;code&gt;templateUrl&lt;/code&gt;'s specified by &lt;a href=&quot;../../../guide/directive&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">これは、両方に適用される&lt;a href=&quot;../directive/nginclude&quot;&gt; &lt;code&gt;ng-include&lt;/code&gt; &lt;/a&gt;ディレクティブと同様に &lt;code&gt;templateUrl&lt;/code&gt; さんによって指定された&lt;a href=&quot;../../../guide/directive&quot;&gt;ディレクティブ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58dd13a809bb64e55c8c52e976d75660f7dabd26" translate="yes" xml:space="preserve">
          <source>This behavior makes sense for a directive that wraps some content, because otherwise you'd have to pass in each model you wanted to use separately. If you have to pass in each model that you want to use, then you can't really have arbitrary contents, can you?</source>
          <target state="translated">この動作は、あるコンテンツをラップするディレクティブには意味があります。もし、使いたいモデルごとに渡さなければならないのであれば、実際には任意のコンテンツを持つことはできませんよね?</target>
        </trans-unit>
        <trans-unit id="1a337bc5cc0b991a707d4b759d185330407dbe1c" translate="yes" xml:space="preserve">
          <source>This can be set explicitly by calling $sce.trustAs(type, value) on the value that is trusted before passing it to the &lt;code&gt;ng-prop-*&lt;/code&gt; directive. There are exist shorthand methods for each context type in the form of &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;$sce.trustAsResourceUrl()&lt;/a&gt; et al.</source>
          <target state="translated">これは、 &lt;code&gt;ng-prop-*&lt;/code&gt; ディレクティブに渡す前に、信頼できる値に対して$ sce.trustAs（type、value）を呼び出すことで明示的に設定できます。&lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;$ sce.trustAsResourceUrl（）などの&lt;/a&gt;形式で、コンテキストタイプごとに省略形のメソッドが存在します。</target>
        </trans-unit>
        <trans-unit id="a642393bdc5a3f60fc505ec099d289ef977421cd" translate="yes" xml:space="preserve">
          <source>This can be used to optimize your application when you know that running those watchers is redundant.</source>
          <target state="translated">これは、これらのウォッチャーの実行が冗長であることがわかっている場合に、アプリケーションを最適化するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="5484a478821be02a7e449725201e87872e9c0d6b" translate="yes" xml:space="preserve">
          <source>This can be used to queue up multiple expressions which need to be evaluated in the same digest.</source>
          <target state="translated">これは、同じダイジェストで評価する必要がある複数の式をキューに入れるために使用できます。</target>
        </trans-unit>
        <trans-unit id="eafa978f765a5d0f54a51aca4a5c7f591b5982c5" translate="yes" xml:space="preserve">
          <source>This can cause unpredictable behavior, e.g. &lt;code&gt;ngClick&lt;/code&gt; or other event handlers will be attached again. It can also degrade performance, as watchers for text interpolation are added twice to the scope.</source>
          <target state="translated">これにより、予期しない動作が発生する可能性があります。たとえば、 &lt;code&gt;ngClick&lt;/code&gt; または他のイベントハンドラーが再度アタッチされます。また、テキスト補間のウォッチャーがスコープに2回追加されるため、パフォーマンスが低下する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="31737a8a0cfe19e93889da90104baa99509af66f" translate="yes" xml:space="preserve">
          <source>This change can be prevented by calling &lt;code&gt;preventDefault&lt;/code&gt; method of the event. See &lt;a href=&quot;../type/%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; for more details about event object. Upon successful change &lt;a href=&quot;%24location#%24locationChangeSuccess.html&quot;&gt;$locationChangeSuccess&lt;/a&gt; is fired.</source>
          <target state="translated">この変更は、イベントの &lt;code&gt;preventDefault&lt;/code&gt; メソッドを呼び出すことで防ぐことができます。イベントオブジェクトの詳細については、&lt;a href=&quot;../type/%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;を参照してください。変更が成功すると、&lt;a href=&quot;%24location#%24locationChangeSuccess.html&quot;&gt;$ locationChangeSuccess&lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="deaca4d4f1715e3cb81009a0b59af1557a02ca34" translate="yes" xml:space="preserve">
          <source>This continues until all module dependencies has been resolved.</source>
          <target state="translated">これは、すべてのモジュールの依存関係が解決されるまで続きます。</target>
        </trans-unit>
        <trans-unit id="0fdd710f9dc596720a9478bac918072a2e288c46" translate="yes" xml:space="preserve">
          <source>This directive allows you to modify the behaviour of &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives within your application. You can specify an &lt;code&gt;ngModelOptions&lt;/code&gt; directive on any element. All &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives will use the options of their nearest &lt;code&gt;ngModelOptions&lt;/code&gt; ancestor.</source>
          <target state="translated">このディレクティブを使用すると、アプリケーション内の&lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;ディレクティブの動作を変更できます。任意の要素で &lt;code&gt;ngModelOptions&lt;/code&gt; ディレクティブを指定できます。すべての&lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;ディレクティブは、最も近い &lt;code&gt;ngModelOptions&lt;/code&gt; 祖先のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="ac964e329bac06459a562f99c7acc0f4d9f8bc69" translate="yes" xml:space="preserve">
          <source>This directive allows you to modify the behaviour of &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives within your application. You can specify an &lt;code&gt;ngModelOptions&lt;/code&gt; directive on any element. All &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives will use the options of their nearest &lt;code&gt;ngModelOptions&lt;/code&gt; ancestor.</source>
          <target state="translated">このディレクティブを使用すると、アプリケーション内の&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;ディレクティブの動作を変更できます。任意の要素で &lt;code&gt;ngModelOptions&lt;/code&gt; ディレクティブを指定できます。すべての&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;ディレクティブは、最も近い &lt;code&gt;ngModelOptions&lt;/code&gt; 祖先のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="7965d373726e20c973548077757bfccc70ce0246" translate="yes" xml:space="preserve">
          <source>This directive can be abused to add unnecessary amounts of logic into your templates. There are only a few appropriate uses of &lt;code&gt;ngInit&lt;/code&gt;:</source>
          <target state="translated">このディレクティブは、テンプレートに不要なロジックを追加するために悪用される可能性があります。 &lt;code&gt;ngInit&lt;/code&gt; の適切な使用はごくわずかです。</target>
        </trans-unit>
        <trans-unit id="cbcba47b501b44e1b242996ce2f2fcb658bdde02" translate="yes" xml:space="preserve">
          <source>This directive can be applied only within the scope of an &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;.</source>
          <target state="translated">このディレクティブは&lt;a href=&quot;ngrepeat&quot;&gt;ngRepeatの&lt;/a&gt;スコープ内でのみ適用できます。</target>
        </trans-unit>
        <trans-unit id="eed1d5dab4e2a48debbd34ee6dd14a061b9c554b" translate="yes" xml:space="preserve">
          <source>This directive can be used as &lt;a href=&quot;../service/%24compile#-multielement-.html&quot;&gt;multiElement&lt;/a&gt;</source>
          <target state="translated">このディレクティブは&lt;a href=&quot;../service/%24compile#-multielement-.html&quot;&gt;multiElement&lt;/a&gt;として使用できます</target>
        </trans-unit>
        <trans-unit id="408d771ebedb5301b2e1e5d11014f21ad0ac991f" translate="yes" xml:space="preserve">
          <source>This directive creates new scope.</source>
          <target state="translated">このディレクティブは新しいスコープを作成します。</target>
        </trans-unit>
        <trans-unit id="b9eb9dfc0b36b5fb31bc5f06b2291cbce4731e8e" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level -400.</source>
          <target state="translated">このディレクティブは優先度レベル -400 で実行されます。</target>
        </trans-unit>
        <trans-unit id="11bb46f7885f2d0fb62afc45043a006f99b5c779" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 0.</source>
          <target state="translated">このディレクティブは優先度 0 で実行されます。</target>
        </trans-unit>
        <trans-unit id="ba1fba935acedd5a393ae9e732b4ecad2e9ba52a" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 1.</source>
          <target state="translated">このディレクティブは優先度 1 で実行されます。</target>
        </trans-unit>
        <trans-unit id="57fa09288f6c223f6b042c6fed89bc149865df0e" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 10.</source>
          <target state="translated">このディレクティブは優先度 10 で実行されます。</target>
        </trans-unit>
        <trans-unit id="20282e77f198233dc571257734f9c2d2da4f5aef" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 100.</source>
          <target state="translated">このディレクティブは優先度 100 で実行されます。</target>
        </trans-unit>
        <trans-unit id="83a14caae6f6310a1c64fde8d891125d5595d161" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 1000.</source>
          <target state="translated">このディレクティブは優先度レベル1000で実行されます。</target>
        </trans-unit>
        <trans-unit id="9042e7730b88dc8812901abaa43a978bb9618917" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 1200.</source>
          <target state="translated">このディレクティブは優先度レベル 1200 で実行されます。</target>
        </trans-unit>
        <trans-unit id="1b9ad97e1cbe1b2045ab90cbbde8cfbd6f81734f" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 400 restrict: AE.</source>
          <target state="translated">このディレクティブは、優先度レベル 400 のリストリクトで実行されます。AE.</target>
        </trans-unit>
        <trans-unit id="35ed58116dc2b01b349cc12677bcd3280b0cd2dd" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 400.</source>
          <target state="translated">このディレクティブは優先度400で実行されます。</target>
        </trans-unit>
        <trans-unit id="b6c8d120968e554de79c9923d45c2f7f16a1758c" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 450.</source>
          <target state="translated">この指令は、優先度レベル450で実行される。</target>
        </trans-unit>
        <trans-unit id="1aa13b7c0c442d44e8f33979384eb48bd2e2e8df" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 500.</source>
          <target state="translated">このディレクティブは優先度 500 で実行されます。</target>
        </trans-unit>
        <trans-unit id="7df93f519af67379f099a16f4ead3293cda924b8" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 600.</source>
          <target state="translated">このディレクティブは、優先度レベル 600 で実行されます。</target>
        </trans-unit>
        <trans-unit id="d60b4c0c247cba5c4a5f6b245e42416ae3e44c71" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 99.</source>
          <target state="translated">このディレクティブは優先度99で実行されます。</target>
        </trans-unit>
        <trans-unit id="749a139249322e3a0fa2d9fc94fa82bcb541e03b" translate="yes" xml:space="preserve">
          <source>This directive is used as a tag &lt;code&gt;&amp;lt;a-great-eye&amp;gt;&amp;lt;/a-great-eye&amp;gt;&lt;/code&gt;. It replaces the entire tag with the template &lt;code&gt;&amp;lt;h1&amp;gt;lidless, wreathed in flame, {{1 + 1}} times&amp;lt;/h1&amp;gt;&lt;/code&gt;. Now we are going to write a jasmine unit test to verify this functionality. Note that the expression &lt;code&gt;{{1 + 1}}&lt;/code&gt; times will also be evaluated in the rendered content.</source>
          <target state="translated">このディレクティブは、タグ &lt;code&gt;&amp;lt;a-great-eye&amp;gt;&amp;lt;/a-great-eye&amp;gt;&lt;/code&gt; として使用されます。これは、テンプレートにタグ全体を置き換える &lt;code&gt;&amp;lt;h1&amp;gt;lidless, wreathed in flame, {{1 + 1}} times&amp;lt;/h1&amp;gt;&lt;/code&gt; 。次に、この機能を検証するためのジャスミンユニットテストを作成します。式 &lt;code&gt;{{1 + 1}}&lt;/code&gt; 回もレンダリングされたコンテンツで評価されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0988891d1e4c9bf100a94a539e74ab83063f9e67" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;code&gt;disabled&lt;/code&gt; attribute on the element (typically a form control, e.g. &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; etc.) if the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; inside &lt;code&gt;ngDisabled&lt;/code&gt; evaluates to truthy.</source>
          <target state="translated">このディレクティブは、 &lt;code&gt;ngDisabled&lt;/code&gt; 内の&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;がtrueと評価された場合に、要素（通常は &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;button&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; などのフォームコントロール）の &lt;code&gt;disabled&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="c070fd68811002fede70f580a5780cdfa9a578c2" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;code&gt;disabled&lt;/code&gt; attribute on the element (typically a form control, e.g. &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; etc.) if the &lt;a href=&quot;../../guide/expression&quot;&gt;expression&lt;/a&gt; inside &lt;code&gt;ngDisabled&lt;/code&gt; evaluates to truthy.</source>
          <target state="translated">このディレクティブは、 &lt;code&gt;ngDisabled&lt;/code&gt; 内の&lt;a href=&quot;../../guide/expression&quot;&gt;式&lt;/a&gt;がtrueと評価された場合に、要素（通常は &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;button&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; などのフォームコントロール）の &lt;code&gt;disabled&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
