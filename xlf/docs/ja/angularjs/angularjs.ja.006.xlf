<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="a6e956b460cca90e672670086cda8aabd21f1997" translate="yes" xml:space="preserve">
          <source>This document explains some of AngularJS's security features and best practices that you should keep in mind as you build your application.</source>
          <target state="translated">このドキュメントでは、アプリケーションを構築する際に覚えておくべきAngularJSのセキュリティ機能とベストプラクティスについて説明しています。</target>
        </trans-unit>
        <trans-unit id="637bbb3be2c198a8a65ee2584634b52d3430c20e" translate="yes" xml:space="preserve">
          <source>This document explains when you'd want to create your own directives in your AngularJS app, and how to implement them.</source>
          <target state="translated">このドキュメントでは、AngularJSアプリで独自のディレクティブを作成したい場合と、それを実装する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="0d8406e6cc1ce626d3c2ac65aec7b3e141628b7c" translate="yes" xml:space="preserve">
          <source>This does not only affect changes to the model value, but also to the values of the &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt; attributes. When these change in a way that will cause the browser to modify the input value, AngularJS will also update the model value.</source>
          <target state="translated">これは、モデル値の変更だけでなく、 &lt;code&gt;min&lt;/code&gt; 、 &lt;code&gt;max&lt;/code&gt; 、および &lt;code&gt;step&lt;/code&gt; 属性の値にも影響します。ブラウザが入力値を変更するような方法でこれらが変更されると、AngularJSはモデル値も更新します。</target>
        </trans-unit>
        <trans-unit id="ba8f1e4ba7e8dbd333bd05bd1a50c7b95a9e90fd" translate="yes" xml:space="preserve">
          <source>This enables web-servers to prevent script injection attacks and defacing attacks, to some degree, while also enabling code examples to work without relying on the &lt;a href=&quot;../directive/ngnonbindable&quot;&gt;ngNonBindable&lt;/a&gt; directive.</source>
          <target state="translated">これにより、Webサーバーはスクリプトインジェクション攻撃や改ざん攻撃をある程度防ぐことができ、&lt;a href=&quot;../directive/ngnonbindable&quot;&gt;ngNonBindable&lt;/a&gt;ディレクティブに依存せずにコード例を機能させることもできます。</target>
        </trans-unit>
        <trans-unit id="076b9997e5dd41c8b9220b76be3ac831b79b0b74" translate="yes" xml:space="preserve">
          <source>This error is harmless but annoying. To prevent the error from showing up, put the &lt;code&gt;ngCsp&lt;/code&gt; directive on an element of the HTML document that appears before the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that loads the &lt;code&gt;angular.js&lt;/code&gt; file.</source>
          <target state="translated">このエラーは無害ですが、迷惑です。エラーが表示され &lt;code&gt;ngCsp&lt;/code&gt; ようにするには、 &lt;code&gt;angular.js&lt;/code&gt; ファイルをロードする &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグの前に表示されるHTMLドキュメントの要素にngCspディレクティブを配置します。</target>
        </trans-unit>
        <trans-unit id="0f6664d3c705a07b165dfd285730cd6fb277477c" translate="yes" xml:space="preserve">
          <source>This example demonstrates basic transclusion of content into a component directive.</source>
          <target state="translated">この例では、コンポーネントディレクティブへのコンテンツの基本的なトランスクルージョンを示しています。</target>
        </trans-unit>
        <trans-unit id="1f9ed6e6472967fa32c46a4975e28dfb3de3211f" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &quot;attach to &lt;code&gt;$scope&lt;/code&gt;&quot; style of controller.</source>
          <target state="translated">この例は、「attach to &lt;code&gt;$scope&lt;/code&gt; 」スタイルのコントローラーを示しています。</target>
        </trans-unit>
        <trans-unit id="28190992499c1193b7ef8ed135006e6081be0f60" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &lt;code&gt;controller as&lt;/code&gt; syntax.</source>
          <target state="translated">この例では、 &lt;code&gt;controller as&lt;/code&gt; 構文として示します。</target>
        </trans-unit>
        <trans-unit id="62ca703b8851a5d6363ffcdd5aa7392a42b74357" translate="yes" xml:space="preserve">
          <source>This example demonstrates using multi-slot transclusion in a component directive.</source>
          <target state="translated">この例では、コンポーネントディレクティブでマルチスロットトランスクルージョンを使用していることを示しています。</target>
        </trans-unit>
        <trans-unit id="54d4f92cb5daaa1c9a5ccf8ff554cfa4e0608d51" translate="yes" xml:space="preserve">
          <source>This example illustrates scopes in application, and prototypical inheritance of properties. The example is followed by a diagram depicting the scope boundaries.</source>
          <target state="translated">この例では、アプリケーションのスコープとプロパティのプロトタイプ継承について説明します。この例の後には、スコープの境界を示す図が続きます。</target>
        </trans-unit>
        <trans-unit id="964cf011bd5b116e12f4ea04fcf7924afb7cb764" translate="yes" xml:space="preserve">
          <source>This example sets a custom error &quot;unknownValue&quot; on the ngModelController when the select element's unknown option is selected, i.e. when the model is set to a value that is not matched by any option.</source>
          <target state="translated">この例では、select 要素の未知のオプションが選択されたとき、つまりモデルがどのオプションにもマッチしない値に設定されたときに ngModelController にカスタムエラー &quot;unknownValue&quot; を設定しています。</target>
        </trans-unit>
        <trans-unit id="2d1c53bde144ac2b71271ea09e4914b32aa2f17e" translate="yes" xml:space="preserve">
          <source>This example show how you might use &lt;code&gt;$doCheck&lt;/code&gt; to trigger changes in your component's inputs even if the actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large arrays or objects can have a negative impact on your application performance)</source>
          <target state="translated">この例は、コンポーネントの実際のIDが変更されない場合でも、 &lt;code&gt;$doCheck&lt;/code&gt; を使用してコンポーネントの入力の変更をトリガーする方法を示しています。 （大規模な配列またはオブジェクトの複製と詳細な等価チェックは、アプリケーションのパフォーマンスに悪影響を及ぼす可能性があることに注意してください）</target>
        </trans-unit>
        <trans-unit id="3081f65dd44283b2d2d12cb3d280958835d3f6df" translate="yes" xml:space="preserve">
          <source>This example show how you might use &lt;code&gt;$doCheck&lt;/code&gt; to trigger changes in your component's inputs even if the actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large arrays or objects can have a negative impact on your application performance.)</source>
          <target state="translated">この例は、コンポーネントの実際のIDが変更されていない場合でも、 &lt;code&gt;$doCheck&lt;/code&gt; を使用してコンポーネントの入力の変更をトリガーする方法を示しています。（大きな配列またはオブジェクトのクローン作成と詳細な同等性チェックは、アプリケーションのパフォーマンスに悪影響を与える可能性があることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="5ae8a0234d80385adab6edf6c69b9755596e3742" translate="yes" xml:space="preserve">
          <source>This example shows how &lt;code&gt;ngRef&lt;/code&gt; works with child scopes. The &lt;code&gt;ngRepeat&lt;/code&gt;-ed &lt;code&gt;myWrapper&lt;/code&gt; components are assigned to the scope of &lt;code&gt;myRoot&lt;/code&gt;, because the &lt;code&gt;toggles&lt;/code&gt; property has been initialized. The repeated &lt;code&gt;myToggle&lt;/code&gt; components are published to the child scopes created by &lt;code&gt;ngRepeat&lt;/code&gt;. &lt;code&gt;ngIf&lt;/code&gt; behaves similarly - the assignment of &lt;code&gt;myToggle&lt;/code&gt; happens in the &lt;code&gt;ngIf&lt;/code&gt; child scope, because the target property has not been initialized on the &lt;code&gt;myRoot&lt;/code&gt; component controller.</source>
          <target state="translated">この例は、 &lt;code&gt;ngRef&lt;/code&gt; が子スコープでどのように機能するかを示しています。 &lt;code&gt;ngRepeat&lt;/code&gt; は、 -ed &lt;code&gt;myWrapper&lt;/code&gt; コンポーネントがの範囲に割り当てられている &lt;code&gt;myRoot&lt;/code&gt; ので、 &lt;code&gt;toggles&lt;/code&gt; プロパティが初期化されています。繰り返される &lt;code&gt;myToggle&lt;/code&gt; コンポーネントは、 &lt;code&gt;ngRepeat&lt;/code&gt; によって作成された子スコープに公開されます。 &lt;code&gt;ngIf&lt;/code&gt; は同様に振る舞う-の割り当て &lt;code&gt;myToggle&lt;/code&gt; はで起こる &lt;code&gt;ngIf&lt;/code&gt; のターゲットプロパティは、上で初期化されていないため、子スコープ &lt;code&gt;myRoot&lt;/code&gt; 成分コントローラ。</target>
        </trans-unit>
        <trans-unit id="ee14ef2d78087f730132d6249684daaf02439508" translate="yes" xml:space="preserve">
          <source>This example shows how changing the URL hash causes the &lt;code&gt;$route&lt;/code&gt; to match a route against the URL, and the &lt;code&gt;ngView&lt;/code&gt; pulls in the partial.</source>
          <target state="translated">この例は、URLハッシュを変更すると &lt;code&gt;$route&lt;/code&gt; がURLに対してルートを照合し、 &lt;code&gt;ngView&lt;/code&gt; がパーシャルを取り込む方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9f4785f3aeb8fb8df8ff217d8f7532f2381938df" translate="yes" xml:space="preserve">
          <source>This example shows how the &quot;plural&quot; keyword is used to account for a variable number of entities. The &quot;#&quot; variable holds the current number and can be embedded in the message.</source>
          <target state="translated">この例では、「複数」キーワードを使用して、エンティティの可変数を説明する方法を示しています。変数「#」は現在の数を保持し、メッセージに埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="e55cb6ec0ca6093526d7c62828c0edb1a5287a8f" translate="yes" xml:space="preserve">
          <source>This example shows how the controller of the component toggle is reused in the template through the scope to use its logic.</source>
          <target state="translated">この例では、コンポーネントトグルのコントローラが、そのロジックを使用するためにスコープを介してテンプレート内で再利用される様子を示しています。</target>
        </trans-unit>
        <trans-unit id="69e881047eb340059e7a5c610f077c2d20a3c79a" translate="yes" xml:space="preserve">
          <source>This example shows how to apply the &lt;code&gt;ngCsp&lt;/code&gt; directive to the &lt;code&gt;html&lt;/code&gt; tag.</source>
          <target state="translated">この例は、 &lt;code&gt;ngCsp&lt;/code&gt; ディレクティブを &lt;code&gt;html&lt;/code&gt; タグに適用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ed56fc3aaeb01e292a55fc62f95abc22c84a204a" translate="yes" xml:space="preserve">
          <source>This example shows how to debounce model changes. Model will be updated only 250 milliseconds after last change.</source>
          <target state="translated">この例では、モデルの変更をデバウンスする方法を示しています。モデルは最後の変更から250ミリ秒後にのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="dc222f9782b698d44e5acc2eade213e958921a1d" translate="yes" xml:space="preserve">
          <source>This example shows how to force jqLite using the &lt;code&gt;ngJq&lt;/code&gt; directive to the &lt;code&gt;html&lt;/code&gt; tag.</source>
          <target state="translated">この例は、 &lt;code&gt;ngJq&lt;/code&gt; ディレクティブを使用して &lt;code&gt;html&lt;/code&gt; タグにjqLit​​eを強制する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="29ee8b3617765a9363a9be166a628c4aca7bac28" translate="yes" xml:space="preserve">
          <source>This example shows how to use &lt;code&gt;NgModelController&lt;/code&gt; with a custom control to achieve data-binding. Notice how different directives (&lt;code&gt;contenteditable&lt;/code&gt;, &lt;code&gt;ng-model&lt;/code&gt;, and &lt;code&gt;required&lt;/code&gt;) collaborate together to achieve the desired result.</source>
          <target state="translated">この例では、カスタムコントロールで &lt;code&gt;NgModelController&lt;/code&gt; を使用してデータバインディングを実現する方法を示します。さまざまなディレクティブ（ &lt;code&gt;contenteditable&lt;/code&gt; 、 &lt;code&gt;ng-model&lt;/code&gt; 、および &lt;code&gt;required&lt;/code&gt; ）がどのように連携して目的の結果を達成するかに注意してください。</target>
        </trans-unit>
        <trans-unit id="61fd9907007de818b0a51eb35a082e1bfacde0e8" translate="yes" xml:space="preserve">
          <source>This example shows how to use &lt;code&gt;NgTransclude&lt;/code&gt; with fallback content, that is displayed if no transcluded content is provided.</source>
          <target state="translated">この例は、 &lt;code&gt;NgTransclude&lt;/code&gt; されたコンテンツが提供されない場合に表示されるフォールバックコンテンツでNgTranscludeを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e6557ff22ab6eb5f2546a30b5f46c79ffc013794" translate="yes" xml:space="preserve">
          <source>This example shows how to use a jQuery based library of a different name. The library name must be available at the top most 'window'.</source>
          <target state="translated">この例では、別の名前の jQuery ベースのライブラリを使用する方法を示しています。ライブラリ名は、一番上の「ウィンドウ」で利用できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1bc1e70306fccb4e924402e50a8c62fd84c5d7bf" translate="yes" xml:space="preserve">
          <source>This example shows how we can replace the $log service with our own to display log messages.</source>
          <target state="translated">この例では、ログメッセージを表示するために $log サービスを独自のものに置き換える方法を示しています。</target>
        </trans-unit>
        <trans-unit id="98d3805b27d8a26b73944c9f271d3372cd57cd4f" translate="yes" xml:space="preserve">
          <source>This example shows how you can check for mutations to a Date object even though the identity of the object has not changed.</source>
          <target state="translated">この例では、オブジェクトの ID が変更されていないにもかかわらず、Date オブジェクトの突然変異をチェックする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="85cde9bfa8ac1bdf2bd3651b32a94cf481a55c6e" translate="yes" xml:space="preserve">
          <source>This example shows how you can specify gender rules for specific plural matches - in this case, =1 is special cased for gender.</source>
          <target state="translated">この例では、特定の複数のマッチに対して性別ルールを指定する方法を示しています-この例では、=1 は性別のために特殊なケースになっています。</target>
        </trans-unit>
        <trans-unit id="9749a4623a260025246f8b93aa5465ed0e4db5e8" translate="yes" xml:space="preserve">
          <source>This example shows the recommended path for integrating AngularJS with what we call automatic initialization.</source>
          <target state="translated">この例では、自動初期化と呼んでいるものとAngularJSを統合するための推奨パスを示しています。</target>
        </trans-unit>
        <trans-unit id="16aad3f4a7cb6d7e3f26212344ec18cf12df0870" translate="yes" xml:space="preserve">
          <source>This example shows the relationship between &quot;default&quot; update events and additional &lt;code&gt;updateOn&lt;/code&gt; triggers.</source>
          <target state="translated">この例は、「デフォルト」の更新イベントと追加の &lt;code&gt;updateOn&lt;/code&gt; トリガーの関係を示しています。</target>
        </trans-unit>
        <trans-unit id="5a8998cc45e803c5f7423eaa2a721c7a2920c113" translate="yes" xml:space="preserve">
          <source>This example shows various combinations of &lt;code&gt;href&lt;/code&gt;, &lt;code&gt;ng-href&lt;/code&gt; and &lt;code&gt;ng-click&lt;/code&gt; attributes in links and their different behaviors:</source>
          <target state="translated">この例は、リンクの &lt;code&gt;href&lt;/code&gt; 、 &lt;code&gt;ng-href&lt;/code&gt; および &lt;code&gt;ng-click&lt;/code&gt; 属性のさまざまな組み合わせとそれらの異なる動作を示しています。</target>
        </trans-unit>
        <trans-unit id="05ca10821b1fd973b5ab4a8e10404776b2b56f8c" translate="yes" xml:space="preserve">
          <source>This example uses &lt;code&gt;ngRepeat&lt;/code&gt; to display a list of people. A filter is used to restrict the displayed results by name or by age. New (entering) and removed (leaving) items are animated.</source>
          <target state="translated">この例では、 &lt;code&gt;ngRepeat&lt;/code&gt; を使用して人のリストを表示します。フィルターは、名前または年齢で表示結果を制限するために使用されます。新規（入力）および削除（終了）アイテムはアニメーション化されます。</target>
        </trans-unit>
        <trans-unit id="69806b8ba755780069d6f6cc5178b21da806ae26" translate="yes" xml:space="preserve">
          <source>This example uses the &quot;select&quot; keyword to specify the message based on gender.</source>
          <target state="translated">この例では、&quot;select &quot;キーワードを使用して、性別に基づいてメッセージを指定しています。</target>
        </trans-unit>
        <trans-unit id="9d7aedeff039b8214af79d9d1aa1f2262c75c572" translate="yes" xml:space="preserve">
          <source>This feature enables tools like &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt; and test runners to hook into angular's bootstrap process and sneak in more modules into the DI registry which can replace or augment DI services for the purpose of instrumentation or mocking out heavy dependencies.</source>
          <target state="translated">この機能により、&lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt;やテストランナーなどのツールがAngularのブートストラッププロセスにフックし、DIレジストリに潜入して、インスツルメンテーションまたは重い依存関係のモックアウトを目的としてDIサービスを置換または拡張できます。</target>
        </trans-unit>
        <trans-unit id="c02ae2a8961bbe5f114d4fe421285b2cfe5838cc" translate="yes" xml:space="preserve">
          <source>This feature is sometimes used to mix different markup languages, e.g. to wrap an AngularJS template within a Python Jinja template (or any other template language). Mixing templating languages is &lt;strong&gt;very dangerous&lt;/strong&gt;. The embedding template language will not safely escape AngularJS expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS) security bugs!</source>
          <target state="translated">この機能は、AngularJSテンプレートをPython Jinjaテンプレート（または他のテンプレート言語）内にラップするなど、さまざまなマークアップ言語を混在させるために使用されることがあります。テンプレート言語の混在は&lt;strong&gt;非常に危険&lt;/strong&gt;です。埋め込みテンプレート言語はAngularJS式を安全にエスケープしないため、テンプレート内のユーザー制御の値により、クロスサイトスクリプティング（XSS）セキュリティバグが発生します。</target>
        </trans-unit>
        <trans-unit id="72e289eefaf5aaf4145ca3a0206a0d8bebdbb225" translate="yes" xml:space="preserve">
          <source>This feels like too much overhead</source>
          <target state="translated">これはオーバーヘッドが多すぎる気がする</target>
        </trans-unit>
        <trans-unit id="e37ade63953d0e46c93b36ee67acdb6a7374a215" translate="yes" xml:space="preserve">
          <source>This filter is mostly useful for debugging. When using the double curly {{value}} notation the binding is automatically converted to JSON.</source>
          <target state="translated">このフィルタは主にデバッグに便利です。ダブルカーリー {{{value}}記法を使うと、バインディングは自動的に JSON に変換されます。</target>
        </trans-unit>
        <trans-unit id="55e88b554c469156081629a31c90300b4541a621" translate="yes" xml:space="preserve">
          <source>This function can be called during the &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; phase of an app. It takes a filter function as the only argument, which will then be used to &quot;filter&quot; animations (based on the animated element, the event type, and the animation options). Only when the filter function returns &lt;code&gt;true&lt;/code&gt;, will the animation be performed. This allows great flexibility - you can easily create complex rules, such as allowing specific events only or enabling animations on specific subtrees of the DOM, and dynamically modify them, for example disabling animations at certain points in time or under certain circumstances.</source>
          <target state="translated">この関数は、中に呼び出すことができる&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;設定&lt;/a&gt;アプリの相。これは、フィルター関数を唯一の引数として取り、アニメーションを「フィルター」するために使用されます（アニメーション要素、イベントタイプ、アニメーションオプションに基づいて）。 filter関数が &lt;code&gt;true&lt;/code&gt; を返した場合のみ、アニメーションが実行されます。これにより、柔軟性が大幅に向上します。特定のイベントのみを許可したり、DOMの特定のサブツリーでアニメーションを有効にしたり、特定の時点または特定の状況でアニメーションを無効にするなど、動的に変更するなどの複雑なルールを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="59700d24630b5cf9b8040af13c05f801039b3bd8" translate="yes" xml:space="preserve">
          <source>This function can be used to enable / disable animations in two different ways:</source>
          <target state="translated">この機能を使用すると、アニメーションの有効化/無効化を2つの方法で行うことができます。</target>
        </trans-unit>
        <trans-unit id="e0c8ee3e6d86ff0ba46d68a1e4de3e4dd2d574fb" translate="yes" xml:space="preserve">
          <source>This function can be used when the &lt;code&gt;$viewValue&lt;/code&gt; or the rendered DOM value are not correctly formatted and the &lt;code&gt;$modelValue&lt;/code&gt; must be run through the &lt;code&gt;$formatters&lt;/code&gt; again.</source>
          <target state="translated">この関数は、 &lt;code&gt;$viewValue&lt;/code&gt; またはレンダリングされたDOM値が正しくフォーマットされておらず、 &lt;code&gt;$modelValue&lt;/code&gt; &lt;code&gt;$formatters&lt;/code&gt; 再度実行する必要がある場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="cbe05ce09a70d470f85ee4dd7a1f4dd51855e2eb" translate="yes" xml:space="preserve">
          <source>This function ensures a single injector will be used for all tests in a given describe context. This contrasts with the default behaviour where a new injector is created per test case.</source>
          <target state="translated">この関数は、与えられた describe コンテキスト内のすべてのテストで単一のインジェクタが使用されることを保証します。これは、テストケースごとに新しいインジェクタが作成されるデフォルトの動作とは対照的です。</target>
        </trans-unit>
        <trans-unit id="874dbb62e56a0d601c13b08f260529654912b687" translate="yes" xml:space="preserve">
          <source>This function is deprecated, but will not be removed in the 1.x lifecycle. There are edge cases (see &lt;a href=&quot;angular.merge#known-issues.html&quot;&gt;known issues&lt;/a&gt;) that are not supported by this function. We suggest using another, similar library for all-purpose merging, such as &lt;a href=&quot;https://lodash.com/docs/4.17.4#merge&quot;&gt;lodash's merge()&lt;/a&gt;.</source>
          <target state="translated">この関数は非推奨ですが、1.xライフサイクルでは削除されません。この機能でサポートされていないエッジケースがあります（&lt;a href=&quot;angular.merge#known-issues.html&quot;&gt;既知の問題を&lt;/a&gt;参照）。&lt;a href=&quot;https://lodash.com/docs/4.17.4#merge&quot;&gt;lodashのmerge（）&lt;/a&gt;など、汎用のマージには別の同様のライブラリを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="104e4ee7bf47164b402b647bc9d4f92d3444f4cb" translate="yes" xml:space="preserve">
          <source>This function registers a module configuration code. It collects the configuration information which will be used when the injector is created by &lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt;.</source>
          <target state="translated">この関数は、モジュール構成コードを登録します。インジェクタが&lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt;によって作成されるときに使用される構成情報を収集します。</target>
        </trans-unit>
        <trans-unit id="66a348d878643285a3617b02bb385a84d7bd067c" translate="yes" xml:space="preserve">
          <source>This function too can be called during the &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; phase of an app. It takes a regex as the only argument, which will then be matched against the classes of any element that is about to be animated. The regex allows a lot of flexibility - you can either allow animations for specific classes only (useful when you are working with 3rd party animations), or exclude specific classes from getting animated.</source>
          <target state="translated">この関数は、あまりにも中に呼び出すことができる&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;設定&lt;/a&gt;アプリの相。これは、正規表現を唯一の引数として取り、アニメーション化されるすべての要素のクラスと照合されます。正規表現を使用すると、柔軟性が大幅に向上します。特定のクラスのアニメーションのみを許可するか（サードパーティのアニメーションを使用している場合に役立ちます）、特定のクラスをアニメーションから除外できます。</target>
        </trans-unit>
        <trans-unit id="c159109652872117256320d96144b40d035fe7a8" translate="yes" xml:space="preserve">
          <source>This function will be invoked when the service needs to be instantiated and should return the decorated service instance.</source>
          <target state="translated">この関数は、サービスをインスタンス化する必要があるときに呼び出され、デコレーションされたサービスのインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="a119154461db6dbbb0ee1429bb68c89f82a67750" translate="yes" xml:space="preserve">
          <source>This function will be invoked when the service needs to be provided and should return the decorated service instance. The function is called using the &lt;a href=&quot;%24injector#invoke.html&quot;&gt;injector.invoke&lt;/a&gt; method and is therefore fully injectable. Local injection arguments:</source>
          <target state="translated">この関数は、サービスを提供する必要があり、装飾されたサービスインスタンスを返す必要があるときに呼び出されます。関数は、&lt;a href=&quot;%24injector#invoke.html&quot;&gt;injector.invoke&lt;/a&gt;メソッドを使用して呼び出されるため、完全に注入可能です。ローカル注入引数：</target>
        </trans-unit>
        <trans-unit id="7ace1d7e9d12a0251168d9e9c7837973f650e71b" translate="yes" xml:space="preserve">
          <source>This function will throw if the safe type isn't appropriate for this context, or if the value given cannot be accepted in the context (which might be caused by sanitization not being available, or the value not being recognized as safe).</source>
          <target state="translated">この関数は、セーフ型がこのコンテキストに適していない場合や、 与えられた値がコンテキストで受け入れられない場合にスローされます (これは、サニタイズが利用できなかったり、値がセーフとして認識されなかったりすることが原因かもしれません)。</target>
        </trans-unit>
        <trans-unit id="a3003c5937dbb87501789f9984fa1b4cdce73d92" translate="yes" xml:space="preserve">
          <source>This has the following consequences for AngularJS:</source>
          <target state="translated">これはAngularJSに次のような結果をもたらします。</target>
        </trans-unit>
        <trans-unit id="868f6b7d204bd6db32315fed3c1b9cdaa4a62fb2" translate="yes" xml:space="preserve">
          <source>This implementation can be used to respond with static or dynamic responses via the &lt;code&gt;when&lt;/code&gt; api and its shortcuts (&lt;code&gt;whenGET&lt;/code&gt;, &lt;code&gt;whenPOST&lt;/code&gt;, etc) and optionally pass through requests to the real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch templates from a webserver).</source>
          <target state="translated">この実装は、 &lt;code&gt;when&lt;/code&gt; apiとそのショートカット（ &lt;code&gt;whenGET&lt;/code&gt; 、 &lt;code&gt;whenPOST&lt;/code&gt; など）を介して静的または動的な応答で応答し、オプションで特定の要求のために実際の$ httpBackendに要求を渡すことができます（たとえば、特定のリモートAPIと対話するため、またはフェッチするため）ウェブサーバーのテンプレート）。</target>
        </trans-unit>
        <trans-unit id="bbf3e56350b9c22d5e436b82ecd7c89f7a51c73d" translate="yes" xml:space="preserve">
          <source>This implies that the internal state of both the form and the control is available for binding in the view using the standard binding primitives.</source>
          <target state="translated">これは、フォームとコントロールの両方の内部状態が、標準のバインディングプリミティブを使ってビュー内でバインディングできることを意味します。</target>
        </trans-unit>
        <trans-unit id="6e4e2dd3c9342812b2650439b3f4dfe11726f42e" translate="yes" xml:space="preserve">
          <source>This includes the &quot;special&quot; numbers &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+Infinity&lt;/code&gt; and &lt;code&gt;-Infinity&lt;/code&gt;.</source>
          <target state="translated">これには、「特別な」数値 &lt;code&gt;NaN&lt;/code&gt; 、 &lt;code&gt;+Infinity&lt;/code&gt; および &lt;code&gt;-Infinity&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="80c58f6b6a5db22c94200d23e6f5ba515e0f7db1" translate="yes" xml:space="preserve">
          <source>This is a &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promises/A+&lt;/a&gt;-compliant implementation of promises/deferred objects inspired by &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Kris Kowal's Q&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Kris KowalのQに&lt;/a&gt;触発された&lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promises / A +&lt;/a&gt;準拠のpromises / deferredオブジェクトの実装です。</target>
        </trans-unit>
        <trans-unit id="0dba2df7f6ddcb854fb3341d09b04f21dab2773e" translate="yes" xml:space="preserve">
          <source>This is a collection of external, 3rd party resources for learning and developing AngularJS.</source>
          <target state="translated">AngularJSを学び、開発するための外部、サードパーティのリソースを集めたものです。</target>
        </trans-unit>
        <trans-unit id="21aeaba9662970643b7a9fb7ec7ea1ef8bfe63ac" translate="yes" xml:space="preserve">
          <source>This is a global (window) function that is only available when the &lt;a href=&quot;../../ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module is included.</source>
          <target state="translated">これは、&lt;a href=&quot;../../ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt;モジュールが含まれている場合にのみ使用できるグローバル（ウィンドウ）関数です。</target>
        </trans-unit>
        <trans-unit id="3aeed192065b716e51303fafb7933c0cc0d12aa7" translate="yes" xml:space="preserve">
          <source>This is a global (window) function that is only available when the &lt;a href=&quot;../ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module is included.</source>
          <target state="translated">これは、&lt;a href=&quot;../ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt;モジュールが含まれている場合にのみ使用できるグローバル（ウィンドウ）関数です。</target>
        </trans-unit>
        <trans-unit id="940be712194ff22a2b0c9f05c98206545090b459" translate="yes" xml:space="preserve">
          <source>This is a global (window) function that is only available when the &lt;a href=&quot;ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module is included.</source>
          <target state="translated">これは、&lt;a href=&quot;ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt;モジュールが含まれている場合にのみ使用できるグローバル（ウィンドウ）関数です。</target>
        </trans-unit>
        <trans-unit id="a9bc078a3179c93a01b2304ea5af8b2a3d4add3a" translate="yes" xml:space="preserve">
          <source>This is a list of (known) object types that are not handled correctly by this function:</source>
          <target state="translated">これは、この関数が正しく処理できない(既知の)オブジェクト型のリストです。</target>
        </trans-unit>
        <trans-unit id="e8e04a228b77e4ceb9e95143b611a06958ab031c" translate="yes" xml:space="preserve">
          <source>This is a list of libraries that enhance AngularJS, add common UI components or integrate with other libraries. You can find a larger list of AngularJS external libraries at &lt;a href=&quot;http://ngmodules.org/&quot;&gt;ngmodules.org&lt;/a&gt;.</source>
          <target state="translated">これは、AngularJSを拡張したり、一般的なUIコンポーネントを追加したり、他のライブラリと統合したりするライブラリのリストです。AngularJS外部ライブラリのより大きなリストは&lt;a href=&quot;http://ngmodules.org/&quot;&gt;ngmodules.orgにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8b4d2f9c6398ff6489ba72736fd69aa6792f94f7" translate="yes" xml:space="preserve">
          <source>This is a non-exhaustive list of object types / features that are not handled correctly by &lt;code&gt;angular.copy&lt;/code&gt;. Note that since this functions is used by the change detection code, this means binding or watching objects of these types (or that include these types) might not work correctly.</source>
          <target state="translated">これは、 &lt;code&gt;angular.copy&lt;/code&gt; で正しく処理されないオブジェクトタイプ/機能の完全ではないリストです。この関数は変更検出コードによって使用されるため、これらのタイプ（またはこれらのタイプを含む）のオブジェクトのバインドまたは監視が正しく機能しない可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="243531736be9806625723a16f6421de48871a398" translate="yes" xml:space="preserve">
          <source>This is a special class that can be used to prevent unwanted flickering / flash of content before the actual animation starts. The class is added as soon as an animation is initialized, but removed before the actual animation starts (after waiting for a $digest). It is also only added for &lt;em&gt;structural&lt;/em&gt; animations (&lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;leave&lt;/code&gt;).</source>
          <target state="translated">これは、実際のアニメーションが開始する前にコンテンツの不要なちらつき/フラッシュを防ぐために使用できる特別なクラスです。クラスはアニメーションが初期化されるとすぐに追加されますが、実際のアニメーションが開始する前に（$ digestを待った後）削除されます。また、&lt;em&gt;構造&lt;/em&gt;アニメーション（ &lt;code&gt;enter&lt;/code&gt; 、 &lt;code&gt;move&lt;/code&gt; 、および &lt;code&gt;leave&lt;/code&gt; ）の場合にのみ追加されます。</target>
        </trans-unit>
        <trans-unit id="8c921d5dab3491a0ede284d2c4169c0796dd9692" translate="yes" xml:space="preserve">
          <source>This is all done behind the scenes. Notice that by having the &lt;code&gt;ng-controller&lt;/code&gt; ask the injector to instantiate the class, it can satisfy all of the dependencies of &lt;code&gt;MyController&lt;/code&gt; without the controller ever knowing about the injector.</source>
          <target state="translated">これはすべて裏で行われます。持つことであることに注意してください &lt;code&gt;ng-controller&lt;/code&gt; クラスをインスタンス化するために、インジェクタを尋ね、それはのすべての依存関係を満たすことができ &lt;code&gt;MyController&lt;/code&gt; をコントローラがこれまでインジェクタについて知らなくても。</target>
        </trans-unit>
        <trans-unit id="c0c13bc636a5e20f5b33c815c14d171efa71421f" translate="yes" xml:space="preserve">
          <source>This is called when we need to determine if the value of an input is empty.</source>
          <target state="translated">これは、入力の値が空かどうかを判断する必要がある場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0705b013e2055b12840aa9f33bf1c6e01e702f6d" translate="yes" xml:space="preserve">
          <source>This is clearly not a great solution.</source>
          <target state="translated">これは明らかに大した解決策ではありません。</target>
        </trans-unit>
        <trans-unit id="8c0b33e0f52faca414488a07a74d8d29174945ba" translate="yes" xml:space="preserve">
          <source>This is desirable, but it puts the responsibility of getting hold of the dependency on the code that constructs &lt;code&gt;SomeClass&lt;/code&gt;.</source>
          <target state="translated">これは望ましいことですが、 &lt;code&gt;SomeClass&lt;/code&gt; を構築するコードへの依存関係を取得する責任があります。</target>
        </trans-unit>
        <trans-unit id="6e19cc504a64dbc7e5223f67be790ee5a786042e" translate="yes" xml:space="preserve">
          <source>This is followed by a list of selection keyword and corresponding message pairs. The &quot;other&quot; keyword and corresponding message are &lt;strong&gt;required&lt;/strong&gt; but you may have as few or as many of the other categories as you need.</source>
          <target state="translated">この後に、選択キーワードと対応するメッセージのペアのリストが続きます。「その他」のキーワードと対応するメッセージは&lt;strong&gt;必須です&lt;/strong&gt;が、その他のカテゴリは&lt;strong&gt;必要に応じ&lt;/strong&gt;て少なくても多くてもかまいません。</target>
        </trans-unit>
        <trans-unit id="830044fcd0e944858b0f63daf06beb477ee3aa4f" translate="yes" xml:space="preserve">
          <source>This is followed by a list of selection keyword and corresponding message pairs. The &quot;other&quot; keyword and corresponding message are &lt;strong&gt;required&lt;/strong&gt; but you may have as few or as many of the other gender values as you need (i.e. it isn't restricted to male/female.) Note however, that the matching is &lt;strong&gt;case-sensitive&lt;/strong&gt;.</source>
          <target state="translated">この後に、選択キーワードと対応するメッセージのペアのリストが続きます。「その他」のキーワードと対応するメッセージは&lt;strong&gt;必須です&lt;/strong&gt;が、その他の性別の値は&lt;strong&gt;必要な&lt;/strong&gt;数だけ含めることができます（つまり、男性/女性に限定されません）。ただし、&lt;strong&gt;大文字と小文字が区別さ&lt;/strong&gt;れることに注意してください。。</target>
        </trans-unit>
        <trans-unit id="bcc3f10937fdf2eb5b1c0d43e9871f7899de9628" translate="yes" xml:space="preserve">
          <source>This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.</source>
          <target state="translated">これは、Google Chrome ExtensionsやUniversal Windows Appsのようなものを開発するときに必要です。</target>
        </trans-unit>
        <trans-unit id="6f9743eeaff280817f27f1c2c3f8c185c14b8871" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;template&lt;/code&gt; but the template is loaded from the specified URL, asynchronously.</source>
          <target state="translated">これは &lt;code&gt;template&lt;/code&gt; 似ていますが、テンプレートは指定されたURLから非同期で読み込まれます。</target>
        </trans-unit>
        <trans-unit id="c2a22a93c5db90cc0e312d0bd6caa04b04b4c2eb" translate="yes" xml:space="preserve">
          <source>This is taken from the above example.</source>
          <target state="translated">これは、上記の例から取ったものです。</target>
        </trans-unit>
        <trans-unit id="6cc3106a660e4677bcc273826723ac7286f55964" translate="yes" xml:space="preserve">
          <source>This is the best outcome. The application code simply declares the dependencies it needs, without having to deal with the injector. This setup does not break the Law of Demeter.</source>
          <target state="translated">これが最良の結果です。アプリケーションコードは、インジェクタを扱うことなく、必要な依存関係を宣言するだけです。この設定はデメーテルの法則を破るものではありません。</target>
        </trans-unit>
        <trans-unit id="42cf60690a82822d827602db3861e00f4b6e5726" translate="yes" xml:space="preserve">
          <source>This is the core version of &lt;code&gt;$animateCss&lt;/code&gt;. By default, only when the &lt;code&gt;ngAnimate&lt;/code&gt; is included, then the &lt;code&gt;$animateCss&lt;/code&gt; service will actually perform animations.</source>
          <target state="translated">これは &lt;code&gt;$animateCss&lt;/code&gt; コアバージョンです。デフォルトでは、 &lt;code&gt;ngAnimate&lt;/code&gt; が含まれている場合のみ、 &lt;code&gt;$animateCss&lt;/code&gt; サービスは実際にアニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="8fe7c930ab124d17cccc4266216fed96a7db7677" translate="yes" xml:space="preserve">
          <source>This is the preferred way to annotate application components. This is how the examples in the documentation are written.</source>
          <target state="translated">これは、アプリケーションコンポーネントに注釈を付けるための好ましい方法です。ドキュメントの例はこのように書かれています。</target>
        </trans-unit>
        <trans-unit id="e99173c0622fc29819acb26a64190ef25cec6946" translate="yes" xml:space="preserve">
          <source>This is the sequence that your code should follow:</source>
          <target state="translated">これは、あなたのコードが従うべき順序です。</target>
        </trans-unit>
        <trans-unit id="bd952f6c2b0ab426ac04bd58194e1818a961d2b2" translate="yes" xml:space="preserve">
          <source>This is useful if a you have a default response that is overriden inside specific tests.</source>
          <target state="translated">これは、特定のテスト内でオーバーライドされるデフォルトのレスポンスがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="106a413d228469230b2f1ee6489f09b04a5ce051" translate="yes" xml:space="preserve">
          <source>This is where &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; comes into play. Dependency Injection (DI) is a software design pattern that deals with how objects and functions get created and how they get a hold of their dependencies. Everything within AngularJS (directives, filters, controllers, services, ...) is created and wired using dependency injection. Within AngularJS, the DI container is called the &lt;a href=&quot;di&quot;&gt;injector&lt;/a&gt;.</source>
          <target state="translated">ここで、&lt;a href=&quot;di&quot;&gt;依存性注入&lt;/a&gt;が機能します。Dependency Injection（DI）は、オブジェクトと関数がどのように作成され、依存関係を保持するかを扱うソフトウェア設計パターンです。AngularJS内のすべて（ディレクティブ、フィルター、コントローラー、サービスなど）は、依存関係注入を使用して作成および配線されます。AngularJSでは、DIコンテナーは&lt;a href=&quot;di&quot;&gt;インジェクター&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="bd73e2280f08f2867f649e593661732c488f0cde" translate="yes" xml:space="preserve">
          <source>This is, however, exactly the use-case that the Service recipe is the most suitable for.</source>
          <target state="translated">しかし、これはまさにサービスレシピが最も適しているユースケースです。</target>
        </trans-unit>
        <trans-unit id="7558a0b4c85e4c406f419884da5d0524791d2c44" translate="yes" xml:space="preserve">
          <source>This looks like normal HTML, with some new markup. In AngularJS, a file like this is called a &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt;. When AngularJS starts your application, it parses and processes this new markup from the template using the &lt;a href=&quot;compiler&quot;&gt;compiler&lt;/a&gt;. The loaded, transformed and rendered DOM is then called the &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">これは通常のHTMLのように見えますが、新しいマークアップがあります。AngularJSでは、このようなファイルは&lt;a href=&quot;templates&quot;&gt;テンプレート&lt;/a&gt;と呼ばれています。AngularJSがアプリケーションを起動すると、&lt;a href=&quot;compiler&quot;&gt;コンパイラ&lt;/a&gt;を使用してテンプレートからのこの新しいマークアップを解析および処理します。ロードされ、変換され、レンダリングされたDOMは、&lt;em&gt;ビュー&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="38b2e8311081c7751c2533d1619c905371007bd7" translate="yes" xml:space="preserve">
          <source>This makes it easier to write an app in a way that's similar to using Web Components or using the new Angular's style of application architecture.</source>
          <target state="translated">これにより、Web Componentsを使うのと同じような方法でアプリを書いたり、新しいAngularのスタイルであるアプリケーションアーキテクチャを使ったりすることが容易になります。</target>
        </trans-unit>
        <trans-unit id="a7f46c84b99f6c66daf57e614d0604305863fdee" translate="yes" xml:space="preserve">
          <source>This makes it possible for the widget to have private state for its template, while the transcluded content has access to its originating scope.</source>
          <target state="translated">これにより、ウィジェットはテンプレートのプライベートな状態を持つことが可能になり、トランスクロードされたコンテンツはその元のスコープにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="5b547a3365f5455bb23472c7583140ed975d34a1" translate="yes" xml:space="preserve">
          <source>This may seem to be unexpected complexity, but it gives the widget user and developer the least surprise.</source>
          <target state="translated">これは予想外の複雑さのように見えるかもしれませんが、ウィジェットのユーザーと開発者に最低限の驚きを与えます。</target>
        </trans-unit>
        <trans-unit id="c9d2b0a1a474c5c524a2e46ab836d1ad41fbe991" translate="yes" xml:space="preserve">
          <source>This means that any changes to the data need to be re-merged with the template and then &lt;code&gt;innerHTML&lt;/code&gt;ed into the DOM. Some of the issues with this approach are:</source>
          <target state="translated">つまり、データへの変更はすべてテンプレートに再度マージしてから、 &lt;code&gt;innerHTML&lt;/code&gt; を DOMに挿入する必要があります。このアプローチのいくつかの問題は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3797c257375c657fdb65bc7afd3178dde6553049" translate="yes" xml:space="preserve">
          <source>This method &lt;em&gt;returns a new promise&lt;/em&gt; which is resolved or rejected via the return value of the &lt;code&gt;successCallback&lt;/code&gt;, &lt;code&gt;errorCallback&lt;/code&gt; (unless that value is a promise, in which case it is resolved with the value which is resolved in that promise using &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues&quot;&gt;promise chaining&lt;/a&gt;). It also notifies via the return value of the &lt;code&gt;notifyCallback&lt;/code&gt; method. The promise cannot be resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback arguments are optional.</source>
          <target state="translated">この方法は、&lt;em&gt;新しい約束戻り&lt;/em&gt;の戻り値を介して解決するか拒否する &lt;code&gt;successCallback&lt;/code&gt; 、 &lt;code&gt;errorCallback&lt;/code&gt; を（その値は、それが使用してその約束で解決された値で解決された場合に約束、ない限り&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues&quot;&gt;約束連鎖が&lt;/a&gt;）。また、 &lt;code&gt;notifyCallback&lt;/code&gt; メソッドの戻り値を介して通知します。promiseは、notifyCallbackメソッドから解決または拒否できません。errorCallbackおよびnotifyCallback引数はオプションです。</target>
        </trans-unit>
        <trans-unit id="91d463f8e87c3e768a6349a76a7ce077a91552a4" translate="yes" xml:space="preserve">
          <source>This method &lt;em&gt;returns a new promise&lt;/em&gt; which is resolved or rejected via the return value of the &lt;code&gt;successCallback&lt;/code&gt;, &lt;code&gt;errorCallback&lt;/code&gt; (unless that value is a promise, in which case it is resolved with the value which is resolved in that promise using &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues&quot;&gt;promise chaining&lt;/a&gt;). It also notifies via the return value of the &lt;code&gt;notifyCallback&lt;/code&gt; method. The promise cannot be resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback arguments are optional.</source>
          <target state="translated">この方法は、&lt;em&gt;新しい約束戻り&lt;/em&gt;の戻り値を介して解決するか拒否する &lt;code&gt;successCallback&lt;/code&gt; 、 &lt;code&gt;errorCallback&lt;/code&gt; を（その値は、それが使用してその約束で解決された値で解決された場合に約束、ない限り&lt;a href=&quot;https://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues&quot;&gt;約束連鎖が&lt;/a&gt;）。また、 &lt;code&gt;notifyCallback&lt;/code&gt; メソッドの戻り値を介して通知します。約束を解決したり、notifyCallbackメソッドから拒否したりすることはできません。errorCallbackおよびnotifyCallback引数はオプションです。</target>
        </trans-unit>
        <trans-unit id="dfa92648c02e81fae7a25858df34af1dba44e2d7" translate="yes" xml:space="preserve">
          <source>This method can be called to add the 'ng-dirty' class and set the form to a dirty state (ng-dirty class). This method will also propagate to parent forms.</source>
          <target state="translated">このメソッドは、'ng-dirty'クラスを追加し、フォームをダーティな状態に設定するために呼び出すことができます(ng-dirtyクラス)。このメソッドは親フォームにも伝搬します。</target>
        </trans-unit>
        <trans-unit id="7b64a60d991bc92f86edf62edf6b119177e9387d" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the 'ng-touched' class and set the form controls to their untouched state (ng-untouched class).</source>
          <target state="translated">このメソッドは、'ng-touched' クラスを削除し、フォームコントロールを未タッチの状態に設定するために呼び出すことができます (ng-untouched クラス)。</target>
        </trans-unit>
        <trans-unit id="dce764038d2f1e780d1e96003245444b77962bbc" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-dirty&lt;/code&gt; class and set the control to its pristine state (&lt;code&gt;ng-pristine&lt;/code&gt; class). A model is considered to be pristine when the control has not been changed from when first compiled.</source>
          <target state="translated">このメソッドを呼び出して、 &lt;code&gt;ng-dirty&lt;/code&gt; クラスを削除し、コントロールを初期状態（ &lt;code&gt;ng-pristine&lt;/code&gt; クラス）に設定できます。コントロールが最初にコンパイルされたときから変更されていない場合、モデルは元の状態であると見なされます。</target>
        </trans-unit>
        <trans-unit id="a104f18bb62aee421639fe99f1a6b3715893e9cd" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-pristine&lt;/code&gt; class and set the control to its dirty state (&lt;code&gt;ng-dirty&lt;/code&gt; class). A model is considered to be dirty when the control has been changed from when first compiled.</source>
          <target state="translated">このメソッドを呼び出して、 &lt;code&gt;ng-pristine&lt;/code&gt; クラスを削除し、コントロールをダーティ状態に設定できます（ &lt;code&gt;ng-dirty&lt;/code&gt; クラス）。コントロールが最初にコンパイルされたときから変更されている場合、モデルはダーティであると見なされます。</target>
        </trans-unit>
        <trans-unit id="be236d70e3b76ac627108d742a7d930b6e5345dc" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-touched&lt;/code&gt; class and set the control to its untouched state (&lt;code&gt;ng-untouched&lt;/code&gt; class). Upon compilation, a model is set as untouched by default, however this function can be used to restore that state if the model has already been touched by the user.</source>
          <target state="translated">このメソッドを呼び出して、 &lt;code&gt;ng-touched&lt;/code&gt; クラスを削除し、コントロールをその非タッチ状態に設定できます（ &lt;code&gt;ng-untouched&lt;/code&gt; クラス）。コンパイル時には、モデルはデフォルトで変更されていない状態に設定されますが、モデルがすでにユーザーによって変更されている場合、この機能を使用してその状態を復元できます。</target>
        </trans-unit>
        <trans-unit id="09d3c1d51e251c93d6c1a6dd38b04fbbfccbd791" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-untouched&lt;/code&gt; class and set the control to its touched state (&lt;code&gt;ng-touched&lt;/code&gt; class). A model is considered to be touched when the user has first focused the control element and then shifted focus away from the control (blur event).</source>
          <target state="translated">このメソッドを呼び出して、 &lt;code&gt;ng-untouched&lt;/code&gt; クラスを削除し、コントロールをタッチされた状態に設定できます（ &lt;code&gt;ng-touched&lt;/code&gt; クラス）。ユーザーが最初にコントロール要素にフォーカスし、次にフォーカスをコントロールから移動したときに、モデルはタッチされたと見なされます（ぼかしイベント）。</target>
        </trans-unit>
        <trans-unit id="039cf05d82b99db28639e2f0df0e8df9fed6d706" translate="yes" xml:space="preserve">
          <source>This method can be called within $parsers/$formatters or a custom validation implementation. However, in most cases it should be sufficient to use the &lt;code&gt;ngModel.$validators&lt;/code&gt; and &lt;code&gt;ngModel.$asyncValidators&lt;/code&gt; collections which will call &lt;code&gt;$setValidity&lt;/code&gt; automatically.</source>
          <target state="translated">このメソッドは、$ parsers / $ formattersまたはカスタム検証実装内で呼び出すことができます。ただし、ほとんどの場合、 &lt;code&gt;ngModel.$validators&lt;/code&gt; および &lt;code&gt;ngModel.$asyncValidators&lt;/code&gt; コレクションを使用するだけで十分です。これにより、 &lt;code&gt;$setValidity&lt;/code&gt; 自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2a0539f5b7dcaa5c95fe933397c2c13fa49ebc03" translate="yes" xml:space="preserve">
          <source>This method can be used to change which mocked responses &lt;code&gt;$httpBackend&lt;/code&gt; returns, when defining them with &lt;a href=&quot;%24httpbackend#when.html&quot;&gt;$httpBackend.when()&lt;/a&gt; (and shortcut methods). By default, &lt;code&gt;$httpBackend&lt;/code&gt; returns the first definition that matches. When setting &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt;, it will use the last response that matches, i.e. the one that was added last.</source>
          <target state="translated">このメソッドを使用して、&lt;a href=&quot;%24httpbackend#when.html&quot;&gt;$ httpBackend.when（）&lt;/a&gt;（およびショートカットメソッド）でそれらを定義するときに、 &lt;code&gt;$httpBackend&lt;/code&gt; が返すモック応答を変更できます。デフォルトでは、 &lt;code&gt;$httpBackend&lt;/code&gt; は一致する最初の定義を返します。 &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt; 設定すると、一致する最後の応答、つまり最後に追加された応答が使用されます。</target>
        </trans-unit>
        <trans-unit id="dcc61f9b44cb07452831de5334ffe49067b455e3" translate="yes" xml:space="preserve">
          <source>This method can be used to change which mocked responses &lt;code&gt;$httpBackend&lt;/code&gt; returns, when defining them with &lt;a href=&quot;../../ngmock/service/%24httpbackend#when.html&quot;&gt;$httpBackend.when()&lt;/a&gt; (and shortcut methods). By default, &lt;code&gt;$httpBackend&lt;/code&gt; returns the first definition that matches. When setting &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt;, it will use the last response that matches, i.e. the one that was added last.</source>
          <target state="translated">このメソッドを使用して、&lt;a href=&quot;../../ngmock/service/%24httpbackend#when.html&quot;&gt;$ httpBackend.when（）&lt;/a&gt;（およびショートカットメソッド）でそれらを定義するときに、 &lt;code&gt;$httpBackend&lt;/code&gt; が返すモック応答を変更できます。デフォルトでは、 &lt;code&gt;$httpBackend&lt;/code&gt; は一致する最初の定義を返します。 &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt; 設定すると、一致する最後の応答、つまり最後に追加された応答が使用されます。</target>
        </trans-unit>
        <trans-unit id="95660a3cb5771d7b45b7bbb186218a518c26a470" translate="yes" xml:space="preserve">
          <source>This method does not work with code minification / obfuscation. For this reason the following annotation strategies are supported.</source>
          <target state="translated">このメソッドは、コードの最小化/難読化では動作しません。このため、以下のアノテーション戦略がサポートされています。</target>
        </trans-unit>
        <trans-unit id="3743c06b6e4464fc92789fb6a0e779ba20b62ec9" translate="yes" xml:space="preserve">
          <source>This method flushes all types of tasks (not only timeouts), which is unintuitive. It is recommended to use &lt;a href=&quot;%24flushpendingtasks&quot;&gt;&lt;code&gt;$flushPendingTasks&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは、タイムアウト以外のすべてのタイプのタスクをフラッシュしますが、これは直感的ではありません。代わりに&lt;a href=&quot;%24flushpendingtasks&quot;&gt; &lt;code&gt;$flushPendingTasks&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8360fbd33c9d5e68f4591a6c59f7a211a01b3d67" translate="yes" xml:space="preserve">
          <source>This method is called by ngModel internally when the bound scope value changes. Application developers usually do not have to call this function themselves.</source>
          <target state="translated">このメソッドは、バインドされたスコープの値が変更された場合に ngModel によって内部的に呼び出されます。アプリケーション開発者は通常この関数を自分で呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="72b7c97b0517d0df1caf70a23a32b6f05272b2eb" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24compileprovider#aHrefSanitizationTrustedUrlList.html&quot;&gt;aHrefSanitizationTrustedUrlList&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは非推奨です。代わりに&lt;a href=&quot;%24compileprovider#aHrefSanitizationTrustedUrlList.html&quot;&gt;aHrefSanitizationTrustedUrlList&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="4a9b174d9781fe7f514ce48f7b9ebfe656cdf51f" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24compileprovider#imgSrcSanitizationTrustedUrlList.html&quot;&gt;imgSrcSanitizationTrustedUrlList&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは非推奨です。代わりに&lt;a href=&quot;%24compileprovider#imgSrcSanitizationTrustedUrlList.html&quot;&gt;imgSrcSanitizationTrustedUrlList&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="753582e916c429d5b2dcd76cf9cbadb31194bc4c" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは非推奨です。代わりに&lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="246a8d841d5ed0951cb806948e108ae1472dcf34" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは非推奨です。代わりに&lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="111861b1f33e6ba16e0e2a46b6e09b6bdb15aa32" translate="yes" xml:space="preserve">
          <source>This method is getter / setter.</source>
          <target state="translated">このメソッドはゲッター/セッターです。</target>
        </trans-unit>
        <trans-unit id="ae01763d0e34b30b2df6b37f5dcec088ef8e5dfa" translate="yes" xml:space="preserve">
          <source>This method is getter only.</source>
          <target state="translated">このメソッドはゲッターのみです。</target>
        </trans-unit>
        <trans-unit id="c81e50c18dfe60ee4fd5f2abbf2491d1ef6cf978" translate="yes" xml:space="preserve">
          <source>This method is used to flush the pending callbacks and animation frames to either start an animation or conclude an animation. Note that this will not actually close an actively running animation (see &lt;a href=&quot;%24animate#closeAndFlush.html&quot;&gt;&lt;code&gt;closeAndFlush()&lt;/code&gt;&lt;/a&gt; for that).</source>
          <target state="translated">このメソッドは、保留中のコールバックとアニメーションフレームをフラッシュして、アニメーションを開始するか、アニメーションを終了するために使用されます。これは実際にアクティブに実行されているアニメーションを閉じないことに注意してください&lt;a href=&quot;%24animate#closeAndFlush.html&quot;&gt; &lt;code&gt;closeAndFlush()&lt;/code&gt; &lt;/a&gt;そのためのcloseAndFlush（）を参照してください）。</target>
        </trans-unit>
        <trans-unit id="d2f5be6e2442f3e5478eb9133bc83673c67fcec1" translate="yes" xml:space="preserve">
          <source>This method must be called during the &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; phase. Once the &lt;code&gt;$sanitize&lt;/code&gt; service has been instantiated, this method has no effect.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;設定&lt;/a&gt;フェーズ中に呼び出す必要があります。いったん &lt;code&gt;$sanitize&lt;/code&gt; サービスがインスタンス化された、この方法は効果がありません。</target>
        </trans-unit>
        <trans-unit id="b8fcc4fc5c0078d0531686af3fc817e06fcdb9f7" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;strong&gt;shallow copy&lt;/strong&gt; of the controls that are currently part of this form. The controls can be instances of &lt;a href=&quot;form.formcontroller&quot;&gt;&lt;code&gt;FormController&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;../directive/ngform&quot;&gt;&quot;child-forms&quot;&lt;/a&gt;) and of &lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;NgModelController&lt;/code&gt;&lt;/a&gt;. If you need access to the controls of child-forms, you have to call &lt;code&gt;$getControls()&lt;/code&gt; recursively on them. This can be used for example to iterate over all controls to validate them.</source>
          <target state="translated">このメソッドは、現在このフォームに含まれているコントロールの&lt;strong&gt;浅いコピー&lt;/strong&gt;を返します。コントロールは、インスタンスの可能&lt;a href=&quot;form.formcontroller&quot;&gt; &lt;code&gt;FormController&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;../directive/ngform&quot;&gt;「子-フォーム」&lt;/a&gt;）との&lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;NgModelController&lt;/code&gt; &lt;/a&gt;。子フォームのコントロールにアクセスする必要がある場合は、それらに対して &lt;code&gt;$getControls()&lt;/code&gt; 再帰的に呼び出す必要があります。これは、たとえば、すべてのコントロールを反復して検証するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7eb2bbddf37cf7ff14a48397a4375854d8e571a9" translate="yes" xml:space="preserve">
          <source>This method sets the form's &lt;code&gt;$pristine&lt;/code&gt; state to true, the &lt;code&gt;$dirty&lt;/code&gt; state to false, removes the &lt;code&gt;ng-dirty&lt;/code&gt; class and adds the &lt;code&gt;ng-pristine&lt;/code&gt; class. Additionally, it sets the &lt;code&gt;$submitted&lt;/code&gt; state to false.</source>
          <target state="translated">このメソッドはフォームの &lt;code&gt;$pristine&lt;/code&gt; 状態をtrueに、 &lt;code&gt;$dirty&lt;/code&gt; 状態をfalseに設定し、 &lt;code&gt;ng-dirty&lt;/code&gt; クラスを削除して &lt;code&gt;ng-pristine&lt;/code&gt; クラスを追加します。さらに、 &lt;code&gt;$submitted&lt;/code&gt; 状態をfalse に設定します。</target>
        </trans-unit>
        <trans-unit id="00f75c22912ee6d84e2b4439725f1730667f3fa5" translate="yes" xml:space="preserve">
          <source>This method should be called when a control wants to change the view value; typically, this is done from within a DOM event handler. For example, the &lt;a href=&quot;../directive/input&quot;&gt;input&lt;/a&gt; directive calls it when the value of the input changes and &lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt; calls it when an option is selected.</source>
          <target state="translated">このメソッドは、コントロールがビューの値を変更するときに呼び出す必要があります。通常、これはDOMイベントハンドラー内から行われます。たとえば、&lt;a href=&quot;../directive/input&quot;&gt;入力&lt;/a&gt;ディレクティブは入力の値が変更されたときにそれ&lt;a href=&quot;../directive/select&quot;&gt;を&lt;/a&gt;呼び出し、selectはオプションが選択されたときにそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="f87b6459717eafeb949467a7b18ce6ab71215fa0" translate="yes" xml:space="preserve">
          <source>This method takes all types of tasks (not only timeouts) into account, which is unintuitive. It is recommended to use &lt;a href=&quot;%24verifynopendingtasks&quot;&gt;&lt;code&gt;$verifyNoPendingTasks&lt;/code&gt;&lt;/a&gt; instead, which additionally allows checking for timeouts only (with &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt;).</source>
          <target state="translated">この方法では、（タイムアウトだけでなく）すべてのタイプのタスクが考慮されるため、直感的ではありません。代わりに&lt;a href=&quot;%24verifynopendingtasks&quot;&gt; &lt;code&gt;$verifyNoPendingTasks&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。これにより、タイムアウトのみをチェックできます（ &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d2705a3d550a46eddae0f388fab27d18be36a157" translate="yes" xml:space="preserve">
          <source>This method will add each of the injectables to the injector and execute all of the config and run blocks for each module passed to the method.</source>
          <target state="translated">このメソッドは、インジェクターに各インジェクターを追加し、メソッドに渡された各モジュールのすべての設定ブロックと実行ブロックを実行します。</target>
        </trans-unit>
        <trans-unit id="2a37d1349d00a1da78883f5fe65c38c4d72feb8f" translate="yes" xml:space="preserve">
          <source>This method will also propagate to all the controls contained in this form.</source>
          <target state="translated">このメソッドは、このフォームに含まれるすべてのコントロールにも伝搬します。</target>
        </trans-unit>
        <trans-unit id="27ac794b33b9e4188249c87bb5a53b20e784a575" translate="yes" xml:space="preserve">
          <source>This method will close all pending animations (both &lt;a href=&quot;../../nganimate#javascript-based-animations.html&quot;&gt;Javascript&lt;/a&gt; and &lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;CSS&lt;/a&gt;) and it will also flush any remaining animation frames and/or callbacks.</source>
          <target state="translated">このメソッドは保留中のすべてのアニメーション（&lt;a href=&quot;../../nganimate#javascript-based-animations.html&quot;&gt;Javascript&lt;/a&gt;と&lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;CSSの&lt;/a&gt;両方）を閉じ、残りのアニメーションフレームやコールバックもフラッシュします。</target>
        </trans-unit>
        <trans-unit id="915cfaa2d3ed2fa450c656592c6f02599354a0d6" translate="yes" xml:space="preserve">
          <source>This might also happen because some third-party frameworks place animation duration defaults across many element or className selectors in order to make their code small and reusable.</source>
          <target state="translated">また、サードパーティのフレームワークの中には、コードを小さくして再利用可能にするために、多くの要素やclassNameセレクタにアニメーションの持続時間のデフォルトを設定しているものがあるために、このようなことが起こる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6ee006904db7800e4b79b052720172e93492d2b3" translate="yes" xml:space="preserve">
          <source>This mock implementation can be used to respond with static or dynamic responses via the &lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; apis and their shortcuts (&lt;code&gt;expectGET&lt;/code&gt;, &lt;code&gt;whenPOST&lt;/code&gt;, etc).</source>
          <target state="translated">このモック実装を使用して、 &lt;code&gt;expect&lt;/code&gt; および &lt;code&gt;when&lt;/code&gt; &lt;code&gt;expectGET&lt;/code&gt; とそのショートカット（expectGET、 &lt;code&gt;whenPOST&lt;/code&gt; など）を介した静的または動的な応答で応答できます。</target>
        </trans-unit>
        <trans-unit id="fb22f4802e38eb9995c979b6ca1295aabe3cf8e8" translate="yes" xml:space="preserve">
          <source>This mode is implemented by the &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; service and various core directives.</source>
          <target state="translated">このモードは、&lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;サービスとさまざまなコアディレクティブによって実装されます。</target>
        </trans-unit>
        <trans-unit id="c233a6582d2d1e6bb77664600a84be278e1f11d2" translate="yes" xml:space="preserve">
          <source>This module allows the usage of any identifier that follows ES6 identifier naming convention to be used as an identifier in an AngularJS expression. ES6 delegates some of the identifier rules definition to Unicode, this module uses ES6 and Unicode 8.0 identifiers convention.</source>
          <target state="translated">このモジュールでは、ES6の識別子の命名規則に従った任意の識別子を、AngularJSの式の中で識別子として使用できるようにします。ES6は識別子のルール定義の一部をUnicodeに委譲していますが、このモジュールはES6とUnicode 8.0の識別子の命名規則を使用します。</target>
        </trans-unit>
        <trans-unit id="da9bb8e1f58198b53e9f9b910bc27da80d253883" translate="yes" xml:space="preserve">
          <source>This object has the following properties:</source>
          <target state="translated">このオブジェクトは以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="e7dde314902c57d9644c192713d0db6e938ac456" translate="yes" xml:space="preserve">
          <source>This object is a map where the keys are the name of the slot to fill and the value is an element selector used to match the HTML to the slot. The element selector should be in normalized form (e.g. &lt;code&gt;myElement&lt;/code&gt;) and will match the standard element variants (e.g. &lt;code&gt;my-element&lt;/code&gt;, &lt;code&gt;my:element&lt;/code&gt;, &lt;code&gt;data-my-element&lt;/code&gt;, etc).</source>
          <target state="translated">このオブジェクトはマップであり、キーは埋めるスロットの名前であり、値はHTMLをスロットに一致させるために使用される要素セレクターです。要素セレクターは正規化された形式（たとえば &lt;code&gt;myElement&lt;/code&gt; ）である必要があり、標準要素のバリアント（たとえば &lt;code&gt;my-element&lt;/code&gt; 、 &lt;code&gt;my:element&lt;/code&gt; 、 &lt;code&gt;data-my-element&lt;/code&gt; など）と一致します。</target>
        </trans-unit>
        <trans-unit id="f1709dc043ae963fcb6fd267e6b932727b496895" translate="yes" xml:space="preserve">
          <source>This page explains the AngularJS initialization process and how you can manually initialize AngularJS if necessary.</source>
          <target state="translated">このページでは、AngularJSの初期化の手順と、必要に応じて手動でAngularJSを初期化する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="5492bee79da51e22fa46e5f05f5e53037f44de5d" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Use &lt;a href=&quot;%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt; instead.</source>
          <target state="translated">このプロパティは非推奨です。代わりに&lt;a href=&quot;%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="2b833d5b65cdc313f0a542c48b1308d0e041ebe8" translate="yes" xml:space="preserve">
          <source>This property is used only if the &lt;code&gt;compile&lt;/code&gt; property is not defined.</source>
          <target state="translated">このプロパティは、 &lt;code&gt;compile&lt;/code&gt; プロパティが定義されていない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="883346a7fad915ebeff0e77021b15cf3830eda47" translate="yes" xml:space="preserve">
          <source>This property is used to bind scope properties directly to the controller. It can be either &lt;code&gt;true&lt;/code&gt; or an object hash with the same format as the &lt;code&gt;scope&lt;/code&gt; property.</source>
          <target state="translated">このプロパティは、スコーププロパティを直接コントローラーにバインドするために使用されます。 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;scope&lt;/code&gt; プロパティと同じ形式のオブジェクトハッシュのいずれかです。</target>
        </trans-unit>
        <trans-unit id="a357c7aacd82c6ccff19e2526aedf02dcd86f146" translate="yes" xml:space="preserve">
          <source>This provider allows controller registration via the &lt;a href=&quot;%24controllerprovider#register.html&quot;&gt;register&lt;/a&gt; method.</source>
          <target state="translated">このプロバイダーでは、&lt;a href=&quot;%24controllerprovider#register.html&quot;&gt;register&lt;/a&gt;メソッドを使用してコントローラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="0617c66c55cb594ee37dad4d27bb3dac77e7f902" translate="yes" xml:space="preserve">
          <source>This section briefly touches on all of the important parts of AngularJS using a simple example. For a more in-depth explanation, see the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、簡単な例を使用して、AngularJSのすべての重要な部分について簡単に触れます。より詳細な説明については、&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;チュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5bb3d5509db140228243eca3e2250fca46e665b9" translate="yes" xml:space="preserve">
          <source>This section briefly touches on all of the important parts of AngularJS using a simple example. For a more in-depth explanation, see the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、簡単な例を使用して、AngularJSのすべての重要な部分について簡単に触れます。より詳細な説明については、&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;チュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e465c56fdc1919202e61b4c838abdb2efdbe6b09" translate="yes" xml:space="preserve">
          <source>This section is useful to you if you're already familiar with the ICU MessageFormat syntax.</source>
          <target state="translated">このセクションは、すでにICU MessageFormatの構文に慣れている場合に役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="629fe3d641b010dc22c32cf60d9c51461dbc815f" translate="yes" xml:space="preserve">
          <source>This section motivates and explains AngularJS's use of DI. For how to use DI, see above.</source>
          <target state="translated">ここでは、AngularJSのDIの使用動機と説明をします。DIの使い方は上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b368495e290571221704fff68dedde03e3d8a9d" translate="yes" xml:space="preserve">
          <source>This service handles the lifecycle of callbacks to handle JSONP requests. Override this service if you wish to customise where the callbacks are stored and how they vary compared to the requested url.</source>
          <target state="translated">このサービスは、JSONP リクエストを処理するためのコールバックのライフサイクルを処理します。コールバックがどこに保存されているか、そしてリクエストされた URL と比較してどのように変化するかをカスタマイズしたい場合は、このサービスをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="91d45badcd0e43333ab51b6632a69a56a2a8478d" translate="yes" xml:space="preserve">
          <source>This service is just a simple decorator for &lt;a href=&quot;../../ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; service that adds a &quot;flush&quot; and &quot;verifyNoPendingTasks&quot; methods.</source>
          <target state="translated">このサービスは、 &quot;flush&quot;メソッドと &quot;verifyNoPendingTasks&quot;メソッドを追加する&lt;a href=&quot;../../ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt;サービスの単なるデコレーターです。</target>
        </trans-unit>
        <trans-unit id="11801c68b71dbf7b43ee58c584c0b6ddc76ef833" translate="yes" xml:space="preserve">
          <source>This service is just a simple decorator for &lt;a href=&quot;../ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; service that adds a &quot;flush&quot; and &quot;verifyNoPendingTasks&quot; methods.</source>
          <target state="translated">このサービスは、 &quot;flush&quot;メソッドと &quot;verifyNoPendingTasks&quot;メソッドを追加する&lt;a href=&quot;../ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt;サービスの単なるデコレーターです。</target>
        </trans-unit>
        <trans-unit id="1f835173917891572ec34a779591da7e750f83cc" translate="yes" xml:space="preserve">
          <source>This service is just a simple decorator for &lt;a href=&quot;ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; service that adds a &quot;flush&quot; and &quot;verifyNoPendingTasks&quot; methods.</source>
          <target state="translated">このサービスは、 &quot;flush&quot;メソッドと &quot;verifyNoPendingTasks&quot;メソッドを追加する&lt;a href=&quot;ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt;サービスの単なるデコレーターです。</target>
        </trans-unit>
        <trans-unit id="0ea40af4b0cece7853eaf6005c23cbc42ab9d2f2" translate="yes" xml:space="preserve">
          <source>This should not be used to watch for changes in objects that are (or contain) &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/File&quot;&gt;File&lt;/a&gt; objects due to limitations with &lt;a href=&quot;../function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; の&lt;/a&gt;制限により、これは&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/File&quot;&gt;File&lt;/a&gt;オブジェクトである（または含む）オブジェクトの変更を監視するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="8a1af7647b98d0fb330f0d8c1c4942701a28f04d" translate="yes" xml:space="preserve">
          <source>This significantly reduces the overhead. It is far easier to pay the small overhead and have an application that's secure and can be audited to verify that with much more ease than bolting security onto an application later.</source>
          <target state="translated">これは、オーバーヘッドを大幅に削減します。小さなオーバーヘッドを支払う方がはるかに簡単で、安全なアプリケーションを持っていて、後でアプリケーションにセキュリティをボルトで固定するよりもはるかに簡単にそれを検証するために監査することができます。</target>
        </trans-unit>
        <trans-unit id="9fef39daed2db411efe5a4c7dfa116cf26686648" translate="yes" xml:space="preserve">
          <source>This simple example shows a formatter that would convert the model value to uppercase:</source>
          <target state="translated">この単純な例は、モデル値を大文字に変換するフォーマッタを示しています。</target>
        </trans-unit>
        <trans-unit id="c4a9089b94815bb38543c89a6cef1127501717c7" translate="yes" xml:space="preserve">
          <source>This simple example shows a parser that would convert text input value to lowercase:</source>
          <target state="translated">この単純な例は、テキスト入力値を小文字に変換するパーサを示しています。</target>
        </trans-unit>
        <trans-unit id="514273f310733c11cdf3627df583ea49721cf88c" translate="yes" xml:space="preserve">
          <source>This site and all of its contents are referring to AngularJS (version 1.x), if you are looking for the latest Angular, please visit &lt;a href=&quot;https://angular.io/&quot;&gt;angular.io&lt;/a&gt;.</source>
          <target state="translated">このサイトとそのすべてのコンテンツはAngularJS（バージョン1.x）を参照しています。最新のAngularを探している場合は、&lt;a href=&quot;https://angular.io/&quot;&gt;angular.ioに&lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="3996593ddc4d041ab4093149112bcf781b10defe" translate="yes" xml:space="preserve">
          <source>This site refers to AngularJS (v1.x). &lt;a href=&quot;https://angular.io/&quot;&gt;Go to the latest Angular&lt;/a&gt;.</source>
          <target state="translated">このサイトはAngularJS（v1.x）を参照しています。&lt;a href=&quot;https://angular.io/&quot;&gt;最新のAngularに移動します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13256ca7859242e20651198514af51bbfcbee712" translate="yes" xml:space="preserve">
          <source>This syntax extension is provided by way of the &lt;code&gt;ngMessageFormat&lt;/code&gt; module that your application can depend upon (shipped separately as &lt;code&gt;angular-message-format.min.js&lt;/code&gt; and &lt;code&gt;angular-message-format.js&lt;/code&gt;.) A current limitation of the &lt;code&gt;ngMessageFormat&lt;/code&gt; module, is that it does not support redefining the &lt;code&gt;$interpolate&lt;/code&gt; start and end symbols. Only the default &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; are allowed.</source>
          <target state="translated">この構文拡張は、アプリケーションが依存できる &lt;code&gt;ngMessageFormat&lt;/code&gt; モジュールによって提供されます（ &lt;code&gt;angular-message-format.min.js&lt;/code&gt; および &lt;code&gt;angular-message-format.js&lt;/code&gt; として個別に出荷されます） &lt;code&gt;ngMessageFormat&lt;/code&gt; モジュールの現在の制限は、 &lt;code&gt;$interpolate&lt;/code&gt; 開始シンボルと終了シンボルの再定義はサポートしていません。デフォルトの &lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; のみが許可されています。</target>
        </trans-unit>
        <trans-unit id="fa80acf811fb7d3bc5d4d2945ffc786c2f86cb56" translate="yes" xml:space="preserve">
          <source>This syntax extension, while based on MessageFormat, has been designed to be backwards compatible with existing AngularJS interpolation expressions. The key rule is simply this: &lt;strong&gt;All interpolations are done inside double curlies.&lt;/strong&gt; The top level comma operator after an expression inside the double curlies causes MessageFormat extensions to be recognized. Such a top level comma is otherwise illegal in an AngularJS expression and is used by MessageFormat to specify the function (such as plural/select) and it's related syntax.</source>
          <target state="translated">この構文拡張はMessageFormatに基づいていますが、既存のAngularJS補間式と下位互換性を持つように設計されています。重要なルールはこれだけです。&lt;strong&gt;すべての補間は二重のカーリー内で行われます。&lt;/strong&gt;二重中括弧内の式の後のトップレベルのコンマ演算子により、MessageFormat拡張機能が認識されます。このような最上位のコンマは、AngularJS式では違法であり、関数（複数形/選択など）とそれに関連する構文を指定するためにMessageFormatによって使用されます。</target>
        </trans-unit>
        <trans-unit id="e599113b0edd4e670329932acb818d5adc536965" translate="yes" xml:space="preserve">
          <source>This technique is often used in unit tests to mock out a service's dependencies.</source>
          <target state="translated">このテクニックは、サービスの依存関係をモックアウトするためのユニットテストでよく使われます。</target>
        </trans-unit>
        <trans-unit id="addac971dd419fb36735ec5e40bf3e153ccc3c01" translate="yes" xml:space="preserve">
          <source>This test describes the requirements of a ToDo list, specifically, that it should be able to filter the list of items.</source>
          <target state="translated">このテストでは、ToDoリストの要件、具体的には、項目のリストをフィルタリングできることを説明します。</target>
        </trans-unit>
        <trans-unit id="00229fe7fc0568eb82dd05f9f9c12e34d0b73a38" translate="yes" xml:space="preserve">
          <source>This type extends the &lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このタイプは&lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;拡張します。</target>
        </trans-unit>
        <trans-unit id="9a55be7ee54799e91a1baaf9ec346a8b069e7054" translate="yes" xml:space="preserve">
          <source>This type extends the &lt;a href=&quot;router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このタイプは&lt;a href=&quot;router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;拡張します。</target>
        </trans-unit>
        <trans-unit id="3c90b3267c6b0702ff318db2cb8b8a8a313f9b31" translate="yes" xml:space="preserve">
          <source>This type extends the &lt;a href=&quot;type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このタイプは&lt;a href=&quot;type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;拡張します。</target>
        </trans-unit>
        <trans-unit id="194bdef428dc42d35d6d30db6c9d019109b9627e" translate="yes" xml:space="preserve">
          <source>This usually happens when the &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate module&lt;/a&gt; is included, but no actual animations are defined for &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;. Internet Explorer is affected more often than other browsers.</source>
          <target state="translated">これは通常、&lt;a href=&quot;../../nganimate&quot;&gt;ngAnimateモジュール&lt;/a&gt;が含まれている場合に発生しますが、実際のアニメーションは&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt;に対して定義されていません。Internet Explorerは、他のブラウザーよりも頻繁に影響を受けます。</target>
        </trans-unit>
        <trans-unit id="89941c3846f435420c0a0b5a2605676a55d335a2" translate="yes" xml:space="preserve">
          <source>This will ensure that all services in your application are properly annotated. See the &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;dependency injection strict mode&lt;/a&gt; docs for more.</source>
          <target state="translated">これにより、アプリケーション内のすべてのサービスに適切な注釈が付けられます。詳細については、&lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;依存関係注入の厳密モードの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f281cdd5d821befaa87c95331b8e4df644d3d012" translate="yes" xml:space="preserve">
          <source>This will not render properly, unless we do some scope magic.</source>
          <target state="translated">スコープマジックをしない限り、これは正しくレンダリングされません。</target>
        </trans-unit>
        <trans-unit id="7b981c7b156731dee59fa70a3a4d07e3181b03de" translate="yes" xml:space="preserve">
          <source>This will work:</source>
          <target state="translated">これなら大丈夫。</target>
        </trans-unit>
        <trans-unit id="aa02d37789c0eb90c790d94a8e42c3470d3ddc29" translate="yes" xml:space="preserve">
          <source>Those that stray from AngularJS standards (such as modifying AngularJS's core) may have difficulty updating, so keeping to AngularJS standards is not just a functionality issue, it's also critical in order to facilitate rapid security updates.</source>
          <target state="translated">AngularJSの標準から逸脱したもの(AngularJSのコアを変更するなど)はアップデートが困難になる可能性があるので、AngularJSの標準を守ることは機能の問題だけでなく、セキュリティアップデートを迅速に行うためにも重要なことです。</target>
        </trans-unit>
        <trans-unit id="18ff4d25dda80968c984aa603ada71e7f8445542" translate="yes" xml:space="preserve">
          <source>Though we have a core group of core contributors at Google, AngularJS is an open source project with hundreds of contributors. We'd love you to be one of them. When you're ready, please read the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/misc/contribute&quot;&gt;Guide for contributing to AngularJS&lt;/a&gt;.</source>
          <target state="translated">Googleにはコアな貢献者のコアグループがありますが、AngularJSは何百人もの貢献者がいるオープンソースプロジェクトです。私たちはあなたが彼らの一人であることを望んでいます。準備ができたら、&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/misc/contribute&quot;&gt;AngularJSに貢献するため&lt;/a&gt;のガイドをお読みください。</target>
        </trans-unit>
        <trans-unit id="c121b639ed0c89a5b45299557fb90f827f49791c" translate="yes" xml:space="preserve">
          <source>Though we have a core group of core contributors at Google, AngularJS is an open source project with hundreds of contributors. We'd love you to be one of them. When you're ready, please read the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/misc/contribute&quot;&gt;Guide for contributing to AngularJS&lt;/a&gt;.</source>
          <target state="translated">Googleにはコアコントリビューターのコアグループがありますが、AngularJSは数百人のコントリビューターがいるオープンソースプロジェクトです。私たちはあなたがそれらの1つであることを望んでいます。準備ができたら、&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/misc/contribute&quot;&gt;AngularJSに貢献するため&lt;/a&gt;のガイドをお読みください。</target>
        </trans-unit>
        <trans-unit id="d2c02671e16ad1b484fd37216c00f1f05c7c934d" translate="yes" xml:space="preserve">
          <source>Timestamp representing the desired time in &lt;em&gt;UTC&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;UTCで&lt;/em&gt;希望する時間を表すタイムスタンプ&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf36ae8fcb1d23b61ad6567c0e9d250610eb4692" translate="yes" xml:space="preserve">
          <source>Timezone to be used for formatting. It understands UTC/GMT and the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;'+0430'&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian) If not specified, the timezone of the browser will be used.</source>
          <target state="translated">フォーマットに使用するタイムゾーン。 UTC / GMTおよび米国大陸のタイムゾーンの省略形を理解しますが、一般的に使用するには、タイムゾーンオフセットを使用します。たとえば、 &lt;code&gt;'+0430'&lt;/code&gt; （グリニッジ子午線の東4時間30分）ブラウザが使用されます。</target>
        </trans-unit>
        <trans-unit id="791214dda21a45673e6a00a407416e403372c00e" translate="yes" xml:space="preserve">
          <source>Timezones</source>
          <target state="translated">Timezones</target>
        </trans-unit>
        <trans-unit id="a6f821f5dc3ea799d7cb08f9d99e08572d83b3a9" translate="yes" xml:space="preserve">
          <source>To actually start the animation we need to run &lt;code&gt;animation.start()&lt;/code&gt; which will then return a promise that we can hook into to detect when the animation ends. If we choose not to run the animation then we MUST run &lt;code&gt;animation.end()&lt;/code&gt; to perform a cleanup on the element (since some CSS classes and styles may have been applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties and that changing them will not reconfigure the parameters of the animation.</source>
          <target state="translated">アニメーションを実際に開始するには、animation.start &lt;code&gt;animation.start()&lt;/code&gt; を実行する必要があります。これにより、アニメーションが終了したことを検出するためにフックできるプロミスが返されます。アニメーションを実行しないことを選択した場合は、animation.end &lt;code&gt;animation.end()&lt;/code&gt; を実行して要素をクリーンアップする必要があります（準備フェーズ中に一部のCSSクラスおよびスタイルが要素に適用されている可能性があるため）。期間、遅延、トランジション、キーフレームなどの他のすべてのプロパティは単なるプロパティであり、それらを変更してもアニメーションのパラメータは再構成されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e9fc69ae1586e6188ab11de16fef9caf3e9a3443" translate="yes" xml:space="preserve">
          <source>To add or overwrite these defaults, simply add or remove a property from these configuration objects. To add headers for an HTTP method other than POST or PUT, simply add a new object with the lowercased HTTP method name as the key, e.g. &lt;code&gt;$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }&lt;/code&gt;.</source>
          <target state="translated">これらのデフォルトを追加または上書きするには、これらの構成オブジェクトにプロパティを追加または削除するだけです。POSTまたはPUT以外のHTTPメソッドのヘッダーを追加するには、小文字のHTTPメソッド名をキーとして新しいオブジェクトを追加します（例： &lt;code&gt;$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="440d40ccd05fbc44211e69b24f08900b7177a1db" translate="yes" xml:space="preserve">
          <source>To allow styling of form as well as controls, &lt;code&gt;ngModel&lt;/code&gt; adds these CSS classes:</source>
          <target state="translated">フォームとコントロールのスタイル設定を可能にするために、 &lt;code&gt;ngModel&lt;/code&gt; はこれらのCSSクラスを追加します：</target>
        </trans-unit>
        <trans-unit id="978b24255f9e2043c3815ab1e3ee6525a4048630" translate="yes" xml:space="preserve">
          <source>To allow the minifiers to rename the function parameters and still be able to inject the right services, the function needs to be annotated with the &lt;code&gt;$inject&lt;/code&gt; property. The &lt;code&gt;$inject&lt;/code&gt; property is an array of service names to inject.</source>
          <target state="translated">ミニファイアが関数パラメーターの名前を変更しても、適切なサービスを注入できるようにするには、関数に &lt;code&gt;$inject&lt;/code&gt; プロパティの注釈を付ける必要があります。 &lt;code&gt;$inject&lt;/code&gt; プロパティは、注入するためのサービス名の配列です。</target>
        </trans-unit>
        <trans-unit id="227bb446f977c7e7c29690779a58e5dcd3f7bc4a" translate="yes" xml:space="preserve">
          <source>To be secure by default, AngularJS makes sure bindings go through that sanitization, or any similar validation process, unless there's a good reason to trust the given value in this context. That trust is formalized with a function call. This means that as a developer, you can assume all untrusted bindings are safe. Then, to audit your code for binding security issues, you just need to ensure the values you mark as trusted indeed are safe - because they were received from your server, sanitized by your library, etc. You can organize your codebase to help with this - perhaps allowing only the files in a specific directory to do this. Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.</source>
          <target state="translated">デフォルトで安全にするために、AngularJSはバインディングがサニタイズや同様の検証プロセスを通過するようにしていますが、このコンテキストで与えられた値を信頼する正当な理由がない限り、そのようにしています。この信頼は関数呼び出しで形式化されます。つまり、開発者としては、信頼されていないバインディングはすべて安全だと考えることができます。そして、バインディングのセキュリティ問題がないかコードを監査するために、信頼されているとマークした値が実際に安全であることを確認する必要があります-なぜなら、それらはサーバから受け取ったものであり、ライブラリでサニタイズされているからです。これを支援するためにコードベースを整理することができます-特定のディレクトリ内のファイルのみにこの作業を許可することもできます。そのコードによって公開されている内部 API が任意の値を安全なものとしてマークアップしないことを保証することは、より管理しやすい作業になります。</target>
        </trans-unit>
        <trans-unit id="a3936bf1237487c27fb7d5526e836b9e6d510539" translate="yes" xml:space="preserve">
          <source>To bind the model to a non-string value, you can use one of the following strategies:</source>
          <target state="translated">モデルを文字列以外の値にバインドするには、以下の戦略のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="23a4965aa6aa6aa1e840b66494467e36b1d73b3a" translate="yes" xml:space="preserve">
          <source>To cancel a timeout request, call &lt;code&gt;$timeout.cancel(promise)&lt;/code&gt;.</source>
          <target state="translated">タイムアウト要求をキャンセルするには、 &lt;code&gt;$timeout.cancel(promise)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="56d3d8bb492af54889dcc66038949954edcd5e47" translate="yes" xml:space="preserve">
          <source>To configure the &lt;code&gt;$location&lt;/code&gt; service, retrieve the &lt;a href=&quot;../api/ng/provider/%24locationprovider&quot;&gt;$locationProvider&lt;/a&gt; and set the parameters as follows:</source>
          <target state="translated">設定するには、 &lt;code&gt;$location&lt;/code&gt; 、サービスを取得&lt;a href=&quot;../api/ng/provider/%24locationprovider&quot;&gt;$ locationProviderを&lt;/a&gt;し、次のようにパラメータを設定します。</target>
        </trans-unit>
        <trans-unit id="14e661d075a8d1d3220a38ac7fd86eacc04d62de" translate="yes" xml:space="preserve">
          <source>To cope with this you simply ensure that your 'element' transclude directive is wrapped in an element, such as a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これに対処するには、「要素」のtranscludeディレクティブが &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; などの要素にラップされていることを確認するだけです。</target>
        </trans-unit>
        <trans-unit id="31fe0e47804d71db9cfd7fffc117d4ab85d47fab" translate="yes" xml:space="preserve">
          <source>To disable comment and css class directives use the &lt;code&gt;$compileProvider&lt;/code&gt;:</source>
          <target state="translated">コメントとcssクラスディレクティブを無効にするには、 &lt;code&gt;$compileProvider&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="5387d2c27cc9dee45bb8cdc85e369fc9f5f17777" translate="yes" xml:space="preserve">
          <source>To disable the mouse click and drag functionality, add &lt;code&gt;ng-swipe-disable-mouse&lt;/code&gt; to the &lt;code&gt;ng-swipe-left&lt;/code&gt; or &lt;code&gt;ng-swipe-right&lt;/code&gt; DOM Element.</source>
          <target state="translated">マウスのクリックとドラッグ機能を無効にするには、 &lt;code&gt;ng-swipe-left&lt;/code&gt; -または &lt;code&gt;ng-swipe-right&lt;/code&gt; DOM要素に &lt;code&gt;ng-swipe-disable-mouse&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="5bc2cad6e2a562908f313cb486e4136ebcb8eee1" translate="yes" xml:space="preserve">
          <source>To do this, we need to use the &lt;code&gt;transclude&lt;/code&gt; option.</source>
          <target state="translated">これを行うには、 &lt;code&gt;transclude&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="035a6a87408acdde8a23ee0cf037d6f472188af6" translate="yes" xml:space="preserve">
          <source>To ease the transition between native inputs and custom controls, ngAria now supports &lt;a href=&quot;../api/ng/directive/ngvalue&quot;&gt;ngValue&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;ngChecked&lt;/a&gt;. The original directives were created for native inputs only, so ngAria extends support to custom elements by managing &lt;code&gt;aria-checked&lt;/code&gt; for accessibility.</source>
          <target state="translated">ネイティブ入力とカスタムコントロール間の移行を容易にするために、ngAriaは&lt;a href=&quot;../api/ng/directive/ngvalue&quot;&gt;ngValue&lt;/a&gt;および&lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;ngCheckedを&lt;/a&gt;サポートするようになりました。元のディレクティブはネイティブ入力に対してのみ作成されたため、ngAriaは、アクセシビリティのために &lt;code&gt;aria-checked&lt;/code&gt; を管理することにより、カスタム要素へのサポートを拡張します。</target>
        </trans-unit>
        <trans-unit id="5d168eb9b869dbfb344d7855a584554963333f9c" translate="yes" xml:space="preserve">
          <source>To enable strict di mode, you have two options:</source>
          <target state="translated">厳格なディモードを有効にするには、2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="4fb64437b796f4ba9a62ece5fde0e8c967dba837" translate="yes" xml:space="preserve">
          <source>To examine the scope in the debugger:</source>
          <target state="translated">デバッガでスコープを調べるには</target>
        </trans-unit>
        <trans-unit id="b590774031a2cf4725192dcbb7db9c57480cef1d" translate="yes" xml:space="preserve">
          <source>To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis, Use the &lt;code&gt;headers&lt;/code&gt; property, setting the desired header to &lt;code&gt;undefined&lt;/code&gt;. For example:</source>
          <target state="translated">リクエストごとに$ httpProvider.defaults.headersを介して自動的に追加されたヘッダーを明示的に削除するには、 &lt;code&gt;headers&lt;/code&gt; プロパティを使用して、目的のヘッダーを &lt;code&gt;undefined&lt;/code&gt; に設定します。例えば：</target>
        </trans-unit>
        <trans-unit id="c80d1fb8ce1e4bf1cd40c9acaf0eb4fe7ea79e3f" translate="yes" xml:space="preserve">
          <source>To help with this, the injected parameters can, optionally, be enclosed with underscores. These are ignored by the injector when the reference name is resolved.</source>
          <target state="translated">これを助けるために、注入されたパラメータをアンダースコアで囲むこともできます。これらは、参照名が解決されたときにインジェクタによって無視されます。</target>
        </trans-unit>
        <trans-unit id="220d6276002b8cffd3f24e9bec07ba42bc0c1add" translate="yes" xml:space="preserve">
          <source>To illustrate further how Controller components work in AngularJS, let's create a little app with the following components:</source>
          <target state="translated">AngularJSでControllerコンポーネントがどのように機能するかをさらに説明するために、以下のコンポーネントを使って小さなアプリを作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="4f97b5d532edfe4940fd9b38ad40a3cd6585eed2" translate="yes" xml:space="preserve">
          <source>To illustrate this, consider the &lt;code&gt;ng-bind-html&lt;/code&gt; directive. It renders its value directly as HTML: we call that the &lt;em&gt;context&lt;/em&gt;. When given an untrusted input, AngularJS will attempt to sanitize it before rendering if a sanitizer is available, and throw otherwise. To bypass sanitization and render the input as-is, you will need to mark it as trusted for that context before attempting to bind it.</source>
          <target state="translated">これを説明するために、 &lt;code&gt;ng-bind-html&lt;/code&gt; ディレクティブを検討してください。値を直接HTMLとしてレンダリングし&lt;em&gt;ます&lt;/em&gt;。これを&lt;em&gt;コンテキスト&lt;/em&gt;と呼び&lt;em&gt;ます&lt;/em&gt;。信頼できない入力が与えられた場合、AngularJSは、サニタイザーが使用可能な場合はレンダリングする前にサニタイズを試み、それ以外の場合はスローします。サニタイズをバイパスし、入力をそのままレンダリングするには、バインドする前に、そのコンテキストに対して信頼できるものとしてマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="902ec43adccfdb69ffa83ad123da01d2e0b94c0b" translate="yes" xml:space="preserve">
          <source>To illustrate this, see the example below. Notice that we've added a &lt;code&gt;link&lt;/code&gt; function in &lt;code&gt;script.js&lt;/code&gt; that redefines &lt;code&gt;name&lt;/code&gt; as &lt;code&gt;Jeff&lt;/code&gt;. What do you think the &lt;code&gt;{{name}}&lt;/code&gt; binding will resolve to now?</source>
          <target state="translated">これを説明するには、以下の例を参照してください。 &lt;code&gt;name&lt;/code&gt; を &lt;code&gt;Jeff&lt;/code&gt; として再定義する &lt;code&gt;link&lt;/code&gt; 関数を &lt;code&gt;script.js&lt;/code&gt; に追加したことに注意してください。 &lt;code&gt;{{name}}&lt;/code&gt; バインディングは今何に解決されると思いますか？</target>
        </trans-unit>
        <trans-unit id="e178b4a4fddd5e3eedf206140142188444cdeb8c" translate="yes" xml:space="preserve">
          <source>To learn more about enabling animation support, click here to visit the &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate module page&lt;/a&gt;.</source>
          <target state="translated">アニメーションサポートを有効にする方法の詳細については、ここをクリックして&lt;a href=&quot;../../nganimate&quot;&gt;ngAnimateモジュールのページ&lt;/a&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="adee17c33df52d3638d95bce546f5bc1b50438c9" translate="yes" xml:space="preserve">
          <source>To learn more about what's possible be sure to visit the &lt;a href=&quot;nganimate/service/%24animatecss&quot;&gt;$animateCss service&lt;/a&gt;.</source>
          <target state="translated">可能なことの詳細については、&lt;a href=&quot;nganimate/service/%24animatecss&quot;&gt;$ animateCssサービス&lt;/a&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="97a771699a9dc113a310959b23249232d9279e3f" translate="yes" xml:space="preserve">
          <source>To manage the responsibility of dependency creation, each AngularJS application has an &lt;a href=&quot;../api/ng/function/angular.injector&quot;&gt;injector&lt;/a&gt;. The injector is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locator&lt;/a&gt; that is responsible for construction and lookup of dependencies.</source>
          <target state="translated">依存関係の作成の責任を管理するために、各AngularJSアプリケーションには&lt;a href=&quot;../api/ng/function/angular.injector&quot;&gt;インジェクターがあり&lt;/a&gt;ます。インジェクターは、依存関係の構築と検索を担当する&lt;a href=&quot;http://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;サービスロケーター&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="86b2168fe84f703c716b7852559e4463bac2efd4" translate="yes" xml:space="preserve">
          <source>To manage the responsibility of dependency creation, each AngularJS application has an &lt;a href=&quot;../api/ng/function/angular.injector&quot;&gt;injector&lt;/a&gt;. The injector is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locator&lt;/a&gt; that is responsible for construction and lookup of dependencies.</source>
          <target state="translated">依存関係の作成の責任を管理するために、各AngularJSアプリケーションには&lt;a href=&quot;../api/ng/function/angular.injector&quot;&gt;インジェクターがあり&lt;/a&gt;ます。インジェクターは、依存関係の構築と検索を担当する&lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;サービスロケーター&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="87b7d6ced2affdb289caee17d8f374aa66ff02f9" translate="yes" xml:space="preserve">
          <source>To minimize creation of DOM elements, &lt;code&gt;ngRepeat&lt;/code&gt; uses a function to &quot;keep track&quot; of all items in the collection and their corresponding DOM elements. For example, if an item is added to the collection, &lt;code&gt;ngRepeat&lt;/code&gt; will know that all other items already have DOM elements, and will not re-render them.</source>
          <target state="translated">DOM要素の作成を最小限に抑えるために、 &lt;code&gt;ngRepeat&lt;/code&gt; は関数を使用して、コレクション内のすべての項目とそれらに対応するDOM要素を「追跡」します。たとえば、アイテムがコレクションに追加された場合、 &lt;code&gt;ngRepeat&lt;/code&gt; は他のすべてのアイテムがすでにDOM要素を持っていることを認識し、それらを再レンダリングしません。</target>
        </trans-unit>
        <trans-unit id="dec799d727684b5ec439ffba56606b33413cfdb2" translate="yes" xml:space="preserve">
          <source>To prevent double execution of the handler, use only one of the &lt;a href=&quot;ngsubmit&quot;&gt;ngSubmit&lt;/a&gt; or &lt;a href=&quot;ngclick&quot;&gt;ngClick&lt;/a&gt; directives. This is because of the following form submission rules in the HTML specification:</source>
          <target state="translated">ハンドラーの二重実行を防ぐには、&lt;a href=&quot;ngsubmit&quot;&gt;ngSubmit&lt;/a&gt;または&lt;a href=&quot;ngclick&quot;&gt;ngClick&lt;/a&gt;ディレクティブのいずれかのみを使用します。これは、HTML仕様に次のフォーム送信ルールがあるためです。</target>
        </trans-unit>
        <trans-unit id="7f0c03c455bcc97cd1a6acf7ad3e2c93c1a12ed0" translate="yes" xml:space="preserve">
          <source>To prevent this, you can apply styles to the &lt;code&gt;ng-[event]-prepare&lt;/code&gt; class, which is added as soon as an animation is initialized, but removed before the actual animation starts (after waiting for a &lt;code&gt;$digest&lt;/code&gt;). This class is only added for &lt;em&gt;structural&lt;/em&gt; animations (&lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;leave&lt;/code&gt;).</source>
          <target state="translated">これを防ぐには、 &lt;code&gt;ng-[event]-prepare&lt;/code&gt; クラスにスタイルを適用します。これは、アニメーションが初期化されるとすぐに追加されますが、実際のアニメーションが開始する前に削除されます（ &lt;code&gt;$digest&lt;/code&gt; 待った後）。このクラスは、&lt;em&gt;構造&lt;/em&gt;アニメーション（ &lt;code&gt;enter&lt;/code&gt; 、 &lt;code&gt;move&lt;/code&gt; 、および &lt;code&gt;leave&lt;/code&gt; ）に対してのみ追加されます。</target>
        </trans-unit>
        <trans-unit id="fea899b0c5f1ec32df106a9c01c18f45fc405eb5" translate="yes" xml:space="preserve">
          <source>To protect against these, explicitly setup &lt;code&gt;overflow: hidden&lt;/code&gt; css rule for all potential svg tags within the sanitized content:</source>
          <target state="translated">これらを防ぐには、 &lt;code&gt;overflow: hidden&lt;/code&gt; 明示的に設定します。サニタイズされたコンテンツ内のすべての潜在的なsvgタグの非表示の cssルール：</target>
        </trans-unit>
        <trans-unit id="943f7d13999a1f50a97c045b022c8dd2e2f3dcbb" translate="yes" xml:space="preserve">
          <source>To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending the range of the repeater by defining explicit start and end points by using &lt;strong&gt;ng-repeat-start&lt;/strong&gt; and &lt;strong&gt;ng-repeat-end&lt;/strong&gt; respectively. The &lt;strong&gt;ng-repeat-start&lt;/strong&gt; directive works the same as &lt;strong&gt;ng-repeat&lt;/strong&gt;, but will repeat all the HTML code (including the tag it's defined on) up to and including the ending HTML tag where &lt;strong&gt;ng-repeat-end&lt;/strong&gt; is placed.</source>
          <target state="translated">親要素を1つだけではなく一連の要素を繰り返すために、ngRepeat（およびその他のngディレクティブ）は、&lt;strong&gt;ng-repeat-start&lt;/strong&gt;および&lt;strong&gt;ng-repeat-endを&lt;/strong&gt;それぞれ使用して明示的な開始点と終了点を定義することにより、リピーターの範囲の拡張をサポートします。&lt;strong&gt;NG・リピート・スタート・&lt;/strong&gt;ディレクティブは、同じ作品&lt;strong&gt;リピートngの&lt;/strong&gt;が、これに（それが上で定義されていたタグを含む）すべてのHTMLコードを繰り返し、終了HTMLタグを含めます&lt;strong&gt;ngのリピートエンドが&lt;/strong&gt;置かれています。</target>
        </trans-unit>
        <trans-unit id="f668b9db355d141127ee33b275331ca28c9dfb88" translate="yes" xml:space="preserve">
          <source>To retrieve the associated scope in console execute: &lt;code&gt;angular.element($0).scope()&lt;/code&gt;</source>
          <target state="translated">関連するスコープをコンソールで取得するには、 &lt;code&gt;angular.element($0).scope()&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="de4573d3b8e714d7e13c12a8ebcb5312e186616d" translate="yes" xml:space="preserve">
          <source>To retrieve the template later, simply use it in your component:</source>
          <target state="translated">後でテンプレートを取得するには、コンポーネント内でテンプレートを使用するだけです。</target>
        </trans-unit>
        <trans-unit id="6b58c4c9070bb055028259d5cf6d5b517e4abcc6" translate="yes" xml:space="preserve">
          <source>To reveal the location of the calls to &lt;code&gt;$log&lt;/code&gt; in the JavaScript console, you can &quot;blackbox&quot; the AngularJS source in your browser:</source>
          <target state="translated">JavaScriptコンソールで &lt;code&gt;$log&lt;/code&gt; への呼び出しの場所を明らかにするには、ブラウザーでAngularJSソースを「ブラックボックス化」できます。</target>
        </trans-unit>
        <trans-unit id="2541170fa16acdab2fc366c6c63c6f8ff8ecc82c" translate="yes" xml:space="preserve">
          <source>To see a complete demo, see the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/step_14&quot;&gt;animation step in the phonecat tutorial&lt;/a&gt;.</source>
          <target state="translated">完全なデモを表示するに&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/step_14&quot;&gt;は、phonecatチュートリアルのアニメーションステップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7d67033ffde197e94525afd34a2c98fae0d38d45" translate="yes" xml:space="preserve">
          <source>To see a complete demo, see the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/step_14&quot;&gt;animation step in the phonecat tutorial&lt;/a&gt;.</source>
          <target state="translated">完全なデモを見るには&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/step_14&quot;&gt;、phonecatチュートリアルのアニメーションステップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b8d8130d29419030e1a83b2c86e3ff758ba4c5db" translate="yes" xml:space="preserve">
          <source>To see the functional implementation check out &lt;code&gt;src/ngAnimate/animate.js&lt;/code&gt;.</source>
          <target state="translated">機能的な実装を確認するには、 &lt;code&gt;src/ngAnimate/animate.js&lt;/code&gt; をチェックしてください。</target>
        </trans-unit>
        <trans-unit id="48944de5e140f1f4917a4abe8d0e9716456f969d" translate="yes" xml:space="preserve">
          <source>To setup the application to run with this http backend, you have to create a module that depends on the &lt;code&gt;ngMockE2E&lt;/code&gt; and your application modules and defines the fake backend:</source>
          <target state="translated">このhttpバックエンドで実行するようにアプリケーションを設定するには、 &lt;code&gt;ngMockE2E&lt;/code&gt; とアプリケーションモジュールに依存し、偽のバックエンドを定義するモジュールを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="22caed9641a69d6681b70e0e73387ff932f2cc11" translate="yes" xml:space="preserve">
          <source>To solve the issue of lack of isolation, the directive declares a new &lt;code&gt;isolated&lt;/code&gt; scope. An isolated scope does not prototypically inherit from the parent scope, and therefore we don't have to worry about accidentally clobbering any properties.</source>
          <target state="translated">分離の欠如の問題を解決するために、ディレクティブは新しい &lt;code&gt;isolated&lt;/code&gt; スコープを宣言します。分離されたスコープは親スコープからプロトタイプを継承しないため、誤ってプロパティを破壊することを心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="837139ebaec8a9499b512e4cd4d6e386dac34296" translate="yes" xml:space="preserve">
          <source>To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically run security checks on them (sanitizations, trusted URL resource, depending on context), or throw when it cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML can be sanitized, but template URLs cannot, for instance.</source>
          <target state="translated">XSSのセキュリティバグを体系的にブロックするために、AngularJSはHTMLやセンシティブなURLのバインディングではデフォルトですべての値を信頼されていないものとして扱います。信頼されていない値をバインドすると、AngularJSは自動的にセキュリティチェック(サニタイズ、信頼できるURLリソース、コンテキストに応じて)を実行し、結果のセキュリティを保証できない場合はスローします。この動作はコンテキストに強く依存します。例えばHTMLはサニタイズできますが、テンプレートURLはサニタイズできません。</target>
        </trans-unit>
        <trans-unit id="3a25c283d366fb9b4b8a14a99d214847f2dc0c90" translate="yes" xml:space="preserve">
          <source>To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically run security checks on them (sanitizations, whitelists, depending on context), or throw when it cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML can be sanitized, but template URLs cannot, for instance.</source>
          <target state="translated">XSSのセキュリティバグを体系的にブロックするために、AngularJSはHTMLやセンシティブなURLのバインディングではデフォルトですべての値を信頼されていないものとして扱います。信頼されていない値をバインドすると、AngularJSは自動的にセキュリティチェック(サニタイゼーション、ホワイトリスト、コンテキストに応じて)を実行し、結果のセキュリティを保証できない場合はスローします。この動作はコンテキストに強く依存します。例えばHTMLはサニタイズできますが、テンプレートURLはサニタイズできません。</target>
        </trans-unit>
        <trans-unit id="06ebef4f171a37657a117bc224081111b0d7f222" translate="yes" xml:space="preserve">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on the first HTTP GET request. On subsequent XHR requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only JavaScript running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server (to prevent the JavaScript from making up its own tokens). We recommend that the token is a digest of your site's authentication cookie with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;salt&lt;/a&gt; for added security.</source>
          <target state="translated">これを利用するには、サーバーは最初のHTTP GETリクエストで &lt;code&gt;XSRF-TOKEN&lt;/code&gt; と呼ばれるJavaScriptで読み取り可能なセッションCookieにトークンを設定する必要があります。後続のXHRリクエストでは、サーバーはCookieが &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTPヘッダーと一致することを確認できるため、ドメインで実行されているJavaScriptのみがリクエストを送信できたことを確認します。トークンはユーザーごとに一意である必要があり、サーバーで検証可能でなければなりません（JavaScriptが独自のトークンを構成しないようにするため）。トークンは、セキュリティを&lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;高める&lt;/a&gt;ために、サイトの認証Cookieとソルトのダイジェストにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a0203afddf9d65db821d61605534ec6d67099780" translate="yes" xml:space="preserve">
          <source>To turn the tinfoil shielding on in our app, we need to create a config function via the module API and have the UnicornLauncherProvider injected into it:</source>
          <target state="translated">アプリでtininfoilシールドを有効にするには、モジュールAPI経由でconfig関数を作成し、UnicornLauncherProviderをそれに注入する必要があります。</target>
        </trans-unit>
        <trans-unit id="553205f92ef2e18fbc6290adc32954aaf6a56cd0" translate="yes" xml:space="preserve">
          <source>To understand the extension, take a look at the ICU MessageFormat syntax as specified by the ICU documentation. Anywhere in that MessageFormat that you have regular message text and you want to substitute an expression, just put it in double curlies instead of single curlies that MessageFormat dictates. This has a huge advantage. &lt;strong&gt;You are no longer limited to simple identifiers for substitutions&lt;/strong&gt;. Because you are using double curlies, you can stick in any arbitrary interpolation syntax there, including nesting more MessageFormat expressions!</source>
          <target state="translated">拡張機能を理解するには、ICUドキュメントで指定されているICU MessageFormat構文をご覧ください。通常のメッセージテキストがあり、式を置き換えたいMessageFormatの任意の場所で、MessageFormatが指示する単一の中括弧ではなく、二重の中括弧に入れます。これには大きな利点があります。&lt;strong&gt;代替の単純な識別子に制限されなくなりました&lt;/strong&gt;。ダブルカーリーを使用しているため、MessageFormat式のネストを含め、任意の補間構文をそのまま使用できます。</target>
        </trans-unit>
        <trans-unit id="668388e5a3f0bc129762bfbfd5aa23b7c1098592" translate="yes" xml:space="preserve">
          <source>To understand, let's look at a real-world example with &lt;code&gt;ngRepeat&lt;/code&gt;:</source>
          <target state="translated">理解するために、 &lt;code&gt;ngRepeat&lt;/code&gt; を使用した実際の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="3d7ed49b07662b8833b62e5f33bb9164b025e055" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;jQuery&lt;/code&gt;, simply ensure it is loaded before the &lt;code&gt;angular.js&lt;/code&gt; file. You can also use the &lt;a href=&quot;../directive/ngjq&quot;&gt;&lt;code&gt;ngJq&lt;/code&gt;&lt;/a&gt; directive to specify that jqlite should be used over jQuery, or to use a specific version of jQuery if multiple versions exist on the page.</source>
          <target state="translated">&lt;code&gt;jQuery&lt;/code&gt; を使用するには、 &lt;code&gt;angular.js&lt;/code&gt; ファイルの前にjQueryがロードされていることを確認してください。また、使用することができます&lt;a href=&quot;../directive/ngjq&quot;&gt; &lt;code&gt;ngJq&lt;/code&gt; の&lt;/a&gt; jqliteは、jQueryの上で使用することを指定するために、または複数のバージョンがページ上に存在する場合はjQueryの特定のバージョンを使用するように指示を。</target>
        </trans-unit>
        <trans-unit id="0b532a90142adf829020e98b53c46a1fe9b0e63b" translate="yes" xml:space="preserve">
          <source>To use DI, there needs to be a place where all the things that should work together are registered. In AngularJS, this is the purpose of the &lt;a href=&quot;module&quot;&gt;modules&lt;/a&gt;. When AngularJS starts, it will use the configuration of the module with the name defined by the &lt;code&gt;ng-app&lt;/code&gt; directive, including the configuration of all modules that this module depends on.</source>
          <target state="translated">DIを使うには、連携すべきものがすべて登録されている場所が必要です。AngularJSでは、これが&lt;a href=&quot;module&quot;&gt;モジュール&lt;/a&gt;の目的です。AngularJSが起動すると、 &lt;code&gt;ng-app&lt;/code&gt; ディレクティブで定義された名前のモジュールの構成を使用します。これには、このモジュールが依存するすべてのモジュールの構成も含まれます。</target>
        </trans-unit>
        <trans-unit id="61b10e4c62d5b605a789c76144449e0198436d85" translate="yes" xml:space="preserve">
          <source>To use an AngularJS service, you add it as a dependency for the component (controller, service, filter or directive) that depends on the service. AngularJS's &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; subsystem takes care of the rest.</source>
          <target state="translated">AngularJSサービスを使用するには、サービスに依存するコンポーネント（コントローラー、サービス、フィルター、またはディレクティブ）の依存関係として追加します。AngularJSの&lt;a href=&quot;di&quot;&gt;依存性注入&lt;/a&gt;サブシステムが残りを処理します。</target>
        </trans-unit>
        <trans-unit id="eb5a31df8b9aafc070a499ecf9c86a92d155038d" translate="yes" xml:space="preserve">
          <source>To use it for serializing &lt;code&gt;$http&lt;/code&gt; request parameters, set it as the &lt;code&gt;paramSerializer&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; 要求パラメーターのシリアル化に使用するには、それを &lt;code&gt;paramSerializer&lt;/code&gt; プロパティとして設定します。</target>
        </trans-unit>
        <trans-unit id="34fe5ca24f7655ef4c0df8a8ce1da864c5daffcc" translate="yes" xml:space="preserve">
          <source>To wrap it up, let's summarize the most important points:</source>
          <target state="translated">まとめとしては、一番重要なポイントをまとめておきましょう。</target>
        </trans-unit>
        <trans-unit id="67e87905406bc002d915c4e863d71aecb21a48f5" translate="yes" xml:space="preserve">
          <source>Toaster Notifications</source>
          <target state="translated">トースターの通知</target>
        </trans-unit>
        <trans-unit id="89699e63b193e1ad3c1e57e75c1c6bbec6885d66" translate="yes" xml:space="preserve">
          <source>Token for the literal value. The literal name value must be a valid literal name.</source>
          <target state="translated">リテラル値のトークン。リテラル名の値は有効なリテラル名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="43fad2672c530239402dc3cd0dc6902dc62473f7" translate="yes" xml:space="preserve">
          <source>Tools like &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt; need this information to run, but you can disable this in production for a significant performance boost with:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt;や&lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt;などのツールを実行するにはこの情報が必要ですが、本番環境でこれを無効にして、次のようにしてパフォーマンスを大幅に向上させることができます。</target>
        </trans-unit>
        <trans-unit id="c1530f9880b2af5eaf175a15ace085e93796c97a" translate="yes" xml:space="preserve">
          <source>Tools like &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; let you use implicit dependency annotations in your app and automatically add inline array annotations prior to minifying. If you decide to take this approach, you probably want to use &lt;code&gt;ng-strict-di&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt;などのツールを使用すると、アプリで暗黙的な依存関係アノテーションを使用し、縮小する前にインライン配列アノテーションを自動的に追加できます。このアプローチを採用する場合は、おそらく &lt;code&gt;ng-strict-di&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aafa2966091cfe18b0886a79db159933dbbadccd" translate="yes" xml:space="preserve">
          <source>Total number of child scopes.</source>
          <target state="translated">子スコープの総数。</target>
        </trans-unit>
        <trans-unit id="a47abbef75ed2b9d1d65dbb4c1ee8007c1065795" translate="yes" xml:space="preserve">
          <source>Total number of watchers.</source>
          <target state="translated">ウォッチャーの総数。</target>
        </trans-unit>
        <trans-unit id="4d568499903ebd2d220b4d1aebe5751fe7c8e35c" translate="yes" xml:space="preserve">
          <source>Tracking and Duplicates</source>
          <target state="translated">トラッキングと重複</target>
        </trans-unit>
        <trans-unit id="66e03a0ac4dbd759832dd1962270988fb63c7705" translate="yes" xml:space="preserve">
          <source>Transclude fallback content</source>
          <target state="translated">フォールバックコンテンツを含める</target>
        </trans-unit>
        <trans-unit id="2ff8fb7265f6145db1964ce88bbfd53d7161548a" translate="yes" xml:space="preserve">
          <source>Transcluded content exists on a scope that inherits from outside a directive but exists as a child of the directive's containing scope. If the containing scope is suspended the transcluded scope will also be suspended, even if the scope from which the transcluded scope inherits is not suspended.</source>
          <target state="translated">除外された内容は、ディレクティブの外部から継承されたスコープ上に存在しますが、 ディレクティブの包含スコープの子として存在します。含むスコープが中断されている場合は、 除外されたスコープが継承しているスコープが中断されていなくても、 除外されたスコープも中断されます。</target>
        </trans-unit>
        <trans-unit id="795ce1bfcced4d4049cae5ddaeacbcb0c25e5cff" translate="yes" xml:space="preserve">
          <source>Transclusion</source>
          <target state="translated">Transclusion</target>
        </trans-unit>
        <trans-unit id="a5ed75b850fe44412f536f842d6bad363b3d1dc0" translate="yes" xml:space="preserve">
          <source>Transclusion Functions</source>
          <target state="translated">封入機能</target>
        </trans-unit>
        <trans-unit id="989bb50d78d8c039c498ff1aa5c4035592d45823" translate="yes" xml:space="preserve">
          <source>Transclusion Scopes</source>
          <target state="translated">トランスクルーションスコープ</target>
        </trans-unit>
        <trans-unit id="bd9f20a87bc27f598593beab138842764756b017" translate="yes" xml:space="preserve">
          <source>Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and copying them to another part of the DOM, while maintaining their connection to the original AngularJS scope from where they were taken.</source>
          <target state="translated">トランスクルージョンとは、DOMのある部分からDOM要素の集合体を抽出し、それらを別の部分にコピーしながら、それらが取り込まれた元のAngularJSスコープとの接続を維持するプロセスです。</target>
        </trans-unit>
        <trans-unit id="34a69ce955b679dd8ef55bd68ef5d2fb2de59126" translate="yes" xml:space="preserve">
          <source>Transclusion is used (often with &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt;) to insert the original contents of a directive's element into a specified place in the template of the directive. The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded content has access to the properties on the scope from which it was taken, even if the directive has isolated scope. See the &lt;a href=&quot;../../../guide/directive#creating-a-directive-that-wraps-other-elements.html&quot;&gt;Directives Guide&lt;/a&gt;.</source>
          <target state="translated">Transclusionは（多くの場合&lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; と共に&lt;/a&gt;）ディレクティブのテンプレートの指定された場所にディレクティブの要素の元のコンテンツを挿入するために使用されます。DOM要素を手動で移動するだけのトランスクルージョンの利点は、ディレクティブにスコープが分離されている場合でも、トランスクルージョンされたコンテンツは、取得元のスコープのプロパティにアクセスできることです。&lt;a href=&quot;../../../guide/directive#creating-a-directive-that-wraps-other-elements.html&quot;&gt;ディレクティブガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f5aa3a8fc4b42447f88fc712a14afe2cdc1f412" translate="yes" xml:space="preserve">
          <source>Transforming Requests and Responses</source>
          <target state="translated">リクエストとレスポンスの変換</target>
        </trans-unit>
        <trans-unit id="e66820e4851b71dffa2d6714b446c9480ae287d1" translate="yes" xml:space="preserve">
          <source>Translated strings/datetime formats can vary greatly in length. For example, &lt;code&gt;June 3, 1977&lt;/code&gt; will be translated to Spanish as &lt;code&gt;3 de junio de 1977&lt;/code&gt;.</source>
          <target state="translated">翻訳された文字列/日時形式は、長さが大幅に異なる場合があります。たとえば &lt;code&gt;June 3, 1977&lt;/code&gt; スペイン語に &lt;code&gt;3 de junio de 1977&lt;/code&gt; として翻訳されます。</target>
        </trans-unit>
        <trans-unit id="5ea519c83af9abea32e76f378b69d1f735efd77a" translate="yes" xml:space="preserve">
          <source>Translation length</source>
          <target state="translated">翻訳長</target>
        </trans-unit>
        <trans-unit id="529ba88fd78ba49c6c2f6f2560bd2ca3b71c2359" translate="yes" xml:space="preserve">
          <source>Triggering and debouncing model updates</source>
          <target state="translated">モデル更新のトリガーとデバウンス</target>
        </trans-unit>
        <trans-unit id="b30aa7b64c97b21bb201e26ce39656a62ae3ba6f" translate="yes" xml:space="preserve">
          <source>Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon execution, the removeClass operation will only be handled after the next digest and it will not trigger an animation if element does not contain the CSS class or if the class is added at a later step. Note that class-based animations are treated differently compared to structural animations (like enter, move and leave) since the CSS classes may be added/removed at different points depending if CSS or JavaScript animations are used.</source>
          <target state="translated">指定されたCSSクラスの削除を囲むremoveClassアニメーションをトリガします。実行時には、removeClass 操作は次のダイジェストの後にのみ処理され、要素に CSS クラスが含まれていない場合や、後のステップでクラスが追加された場合にはアニメーションは発生しません。クラスベースのアニメーションは、構造的なアニメーション(enter,move,leaveなど)とは異なる扱いになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a8c60d34c5c475354e584429d0db24f6b56f4c26" translate="yes" xml:space="preserve">
          <source>Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon execution, the addClass operation will only be handled after the next digest and it will not trigger an animation if element already contains the CSS class or if the class is removed at a later step. Note that class-based animations are treated differently compared to structural animations (like enter, move and leave) since the CSS classes may be added/removed at different points depending if CSS or JavaScript animations are used.</source>
          <target state="translated">指定されたCSSクラスの追加を囲むaddClassアニメーションをトリガします。実行時には、addClass 操作は次のダイジェストの後にのみ処理され、要素に既に CSS クラスが含まれている場合や、後のステップでクラスが削除された場合にはアニメーションは発生しません。クラスベースのアニメーションは、構造的なアニメーション(enter,move,leaveなど)とは異なる扱いになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a1ea2af226764114c06246658ad6eb3995bac408" translate="yes" xml:space="preserve">
          <source>Triggers an animation and then removes the element from the DOM. When the function is called a promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">アニメーションを起動し、DOM から要素を削除します。この関数が呼ばれると、アニメーションが完了した後、次のダイジェストの間に解決される約束が返されます。</target>
        </trans-unit>
        <trans-unit id="d33a09cfae6955e8ea96021c02a14a6f2135e6d2" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is &quot;empty&quot;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が「空」の場合はtrue 。</target>
        </trans-unit>
        <trans-unit id="7e9f928080be6817472e3edba6cd3728c6b44b07" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Date&lt;/code&gt; 場合は真。</target>
        </trans-unit>
        <trans-unit id="9d4620ea3af47d4b59be6c1ad6d376625a3bc5a3" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Function&lt;/code&gt; 場合は真。</target>
        </trans-unit>
        <trans-unit id="f2dc22bb4abc37c763c32e208299d55940817939" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Number&lt;/code&gt; の場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="629f2e041c0522e13feab339a108446527250afa" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;String&lt;/code&gt; の場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="c7206f8d3d0972b3265fbd63b451b2d141ee6fe8" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a DOM element (or wrapped jQuery element).</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; がDOM要素（またはラップされたjQuery要素）の場合はtrue 。</target>
        </trans-unit>
        <trans-unit id="e55cf1550d8a7a76c67c0e00faabad1dcabda075" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Array&lt;/code&gt; 場合は真。</target>
        </trans-unit>
        <trans-unit id="b7156770c7f10d6373aa8baaafb2baaeb8df6fff" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is an &lt;code&gt;Object&lt;/code&gt; but not &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Object&lt;/code&gt; であるが &lt;code&gt;null&lt;/code&gt; ではない場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="61bd97fd0cb8d2d1c177255faefe3a90f7d26d11" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is defined.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が定義されている場合は真。</target>
        </trans-unit>
        <trans-unit id="f4ccefcaf72f594cb16e5d8ae91db2c94271cc38" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is undefined.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が未定義の場合は真。</target>
        </trans-unit>
        <trans-unit id="0aa8d4b081c0f21cabda208483e50d393282d028" translate="yes" xml:space="preserve">
          <source>True if SCE is enabled, false otherwise.</source>
          <target state="translated">SCE が有効な場合は True、そうでない場合は false。</target>
        </trans-unit>
        <trans-unit id="9974e802cce85a25ca164e8503f6d27e58b29226" translate="yes" xml:space="preserve">
          <source>True if SCE is enabled, false otherwise. If you want to set the value, you have to do it at module config time on &lt;a href=&quot;../provider/%24sceprovider&quot;&gt;$sceProvider&lt;/a&gt;.</source>
          <target state="translated">SCEが有効な場合はtrue、それ以外の場合はfalse。値を設定したい場合は、&lt;a href=&quot;../provider/%24sceprovider&quot;&gt;$ sceProviderの&lt;/a&gt;モジュール構成時に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="7b26669371aa537bd9fb78e54420fba225d69357" translate="yes" xml:space="preserve">
          <source>True if all of the containing forms and controls are valid.</source>
          <target state="translated">含まれるフォームとコントロールがすべて有効であれば真。</target>
        </trans-unit>
        <trans-unit id="43aa5083507a3dfc1a3cb7fdf232cd1f4bf4e91f" translate="yes" xml:space="preserve">
          <source>True if arguments are equal.</source>
          <target state="translated">引数が等しい場合は真。</target>
        </trans-unit>
        <trans-unit id="9d333018eec7b900f39b653771161777b87197ae" translate="yes" xml:space="preserve">
          <source>True if at least one containing control or form is invalid.</source>
          <target state="translated">少なくとも1つのコントロールまたはフォームを含むものが無効な場合に真。</target>
        </trans-unit>
        <trans-unit id="181d1025fe366a64c937b96da6ec883bbf6e7ba0" translate="yes" xml:space="preserve">
          <source>True if at least one error on the control.</source>
          <target state="translated">コントロールに少なくとも1つのエラーがあれば真。</target>
        </trans-unit>
        <trans-unit id="56ff20210bccab95fcbf58367144ac067af68148" translate="yes" xml:space="preserve">
          <source>True if control has lost focus.</source>
          <target state="translated">コントロールがフォーカスを失った場合に真。</target>
        </trans-unit>
        <trans-unit id="c7fbe9ee2795fbddf37ec8d8c2d62f113e612f3b" translate="yes" xml:space="preserve">
          <source>True if control has not lost focus yet.</source>
          <target state="translated">制御がまだ焦点を失っていなければ真。</target>
        </trans-unit>
        <trans-unit id="3fa62205eae963b6a217b7f9c96dcf716528f35e" translate="yes" xml:space="preserve">
          <source>True if there is no error.</source>
          <target state="translated">エラーがなければ真。</target>
        </trans-unit>
        <trans-unit id="25ffcfd59486b9a5399542b4690b410851ea2474" translate="yes" xml:space="preserve">
          <source>True if user has already interacted with the control.</source>
          <target state="translated">ユーザーが既にコントロールと対話している場合は真。</target>
        </trans-unit>
        <trans-unit id="dbcbfbb295b5a8ea5518852d000e90ababb1c7f2" translate="yes" xml:space="preserve">
          <source>True if user has already interacted with the form.</source>
          <target state="translated">ユーザーが既にフォームと対話している場合は真。</target>
        </trans-unit>
        <trans-unit id="29b344f09475639539f4e83c2d015aaaed0bbd1d" translate="yes" xml:space="preserve">
          <source>True if user has not interacted with the control yet.</source>
          <target state="translated">ユーザーがまだコントロールと対話していない場合は真。</target>
        </trans-unit>
        <trans-unit id="635c3755d9bde31ca73c1d749bc707a37d18b709" translate="yes" xml:space="preserve">
          <source>True if user has not interacted with the form yet.</source>
          <target state="translated">ユーザーがまだフォームと対話していない場合は真。</target>
        </trans-unit>
        <trans-unit id="65825ee641a9445d6459e2ab76bdc68b70985738" translate="yes" xml:space="preserve">
          <source>True if user has submitted the form even if its invalid.</source>
          <target state="translated">フォームが無効であっても、ユーザーが送信した場合は真。</target>
        </trans-unit>
        <trans-unit id="b88445bdd7bea1365372168f7dbf74b80d853d03" translate="yes" xml:space="preserve">
          <source>Try it here: enter text in text box and watch the greeting change.</source>
          <target state="translated">ここで試してみてください:テキストボックスにテキストを入力して、挨拶が変わるのを見てください。</target>
        </trans-unit>
        <trans-unit id="df5a54a82b0bebef0de0f478ec3ab5b4c9f5c3ea" translate="yes" xml:space="preserve">
          <source>Try out the Live Preview above, and then let's walk through the example and describe what's going on.</source>
          <target state="translated">上記のLive Previewを試してみてから、例を見ながら何が起こっているのかを説明してみましょう。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="5392c950bdde4be7e5f5b8fdc6a1ca5f21e905cf" translate="yes" xml:space="preserve">
          <source>Twitter</source>
          <target state="translated">Twitter</target>
        </trans-unit>
        <trans-unit id="96e344023c95f59d40b4739ed0a85a635eee1b78" translate="yes" xml:space="preserve">
          <source>Two different declaration styles are included below:</source>
          <target state="translated">以下に2つの異なる宣言スタイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="ecb76bbc89ca1321805d931b227686253a851eed" translate="yes" xml:space="preserve">
          <source>Two objects or values are considered equivalent if at least one of the following is true:</source>
          <target state="translated">2つのオブジェクトまたは値は、以下のうち少なくとも1つが真である場合、等価とみなされます。</target>
        </trans-unit>
        <trans-unit id="85d3dd1c7508b8b456f004ed6161495afea6f854" translate="yes" xml:space="preserve">
          <source>Two-way binding to $location</source>
          <target state="translated">ロケーションへの双方向バインディング</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="e80662327a53bb36ba8ecc569bceb07d8d355e87" translate="yes" xml:space="preserve">
          <source>Type components in ng</source>
          <target state="translated">ngでのタイプ別コンポーネント</target>
        </trans-unit>
        <trans-unit id="a435bd7da8a147120f1a4b79e547e5c008143436" translate="yes" xml:space="preserve">
          <source>Type components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter でコンポーネントをタイプします。</target>
        </trans-unit>
        <trans-unit id="50a5d371f802a731c130768b7356728d742c17f8" translate="yes" xml:space="preserve">
          <source>Type components in ngMock</source>
          <target state="translated">ngMockのコンポーネントをタイプする</target>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="translated">Type:</target>
        </trans-unit>
        <trans-unit id="a37965c6d74cd91c105a5af7d17ac48c2ae2ac45" translate="yes" xml:space="preserve">
          <source>Typical usage</source>
          <target state="translated">代表的な使い方</target>
        </trans-unit>
        <trans-unit id="c8d61bd71fa3d7cafbb7128d3d9893fb96df94a4" translate="yes" xml:space="preserve">
          <source>Typically beforeAll is used to make many assertions about a single operation. This can cut down test run-time as the test setup doesn't need to be re-run, and enabling focussed tests each with a single assertion.</source>
          <target state="translated">通常、一つの操作について多くのアサーションを行うために beforeAll を使用します。これは、テストのセットアップを再実行する必要がないため、テストの実行時間を短縮することができ、単一のアサーションでそれぞれのテストを集中的に行うことができます。</target>
        </trans-unit>
        <trans-unit id="e6f0ae9524ce6acd2d2f63e97dbf18fe3aca600b" translate="yes" xml:space="preserve">
          <source>Typically, when you create an application you need to set up the initial state for the AngularJS &lt;code&gt;$scope&lt;/code&gt;. You set up the initial state of a scope by attaching properties to the &lt;code&gt;$scope&lt;/code&gt; object. The properties contain the &lt;strong&gt;view model&lt;/strong&gt; (the model that will be presented by the view). All the &lt;code&gt;$scope&lt;/code&gt; properties will be available to the &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt; at the point in the DOM where the Controller is registered.</source>
          <target state="translated">通常、アプリケーションを作成するときは、AngularJS &lt;code&gt;$scope&lt;/code&gt; 初期状態を設定する必要があります。 &lt;code&gt;$scope&lt;/code&gt; オブジェクトにプロパティをアタッチして、スコープの初期状態を設定します。プロパティには、&lt;strong&gt;ビューモデル&lt;/strong&gt;（ビューによって提示されるモデル）が含まれます。すべての &lt;code&gt;$scope&lt;/code&gt; プロパティは、コントローラーが登録されているDOMの時点で&lt;a href=&quot;templates&quot;&gt;テンプレート&lt;/a&gt;で使用できます。</target>
        </trans-unit>
        <trans-unit id="82ca3e622f497504b13ae95ba5174ca088e4d1be" translate="yes" xml:space="preserve">
          <source>Typically, you don't use &lt;code&gt;ngBind&lt;/code&gt; directly, but instead you use the double curly markup like &lt;code&gt;{{ expression }}&lt;/code&gt; which is similar but less verbose.</source>
          <target state="translated">通常、直接 &lt;code&gt;ngBind&lt;/code&gt; を使用するのではなく、代わりに &lt;code&gt;{{ expression }}&lt;/code&gt; ような二重のカーリーマークアップを使用します。</target>
        </trans-unit>
        <trans-unit id="f6a19ff69e8d695fff05426906779eaaae870446" translate="yes" xml:space="preserve">
          <source>Typically, you would call this method following each test case that asserts requests using an &quot;afterEach&quot; clause.</source>
          <target state="translated">通常は、&quot;afterEach &quot;節を使ってリクエストをアサートする各テストケースの後にこのメソッドを呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="7fdf8e24fee9641029d910c77e727fa987ff0d84" translate="yes" xml:space="preserve">
          <source>Typically, you would configure or override the &lt;a href=&quot;%24scedelegate&quot;&gt;$sceDelegate&lt;/a&gt; instead of the &lt;code&gt;$sce&lt;/code&gt; service to customize the way Strict Contextual Escaping works in AngularJS. This is because, while the &lt;code&gt;$sce&lt;/code&gt; provides numerous shorthand methods, etc., you really only need to override 3 core functions (&lt;code&gt;trustAs&lt;/code&gt;, &lt;code&gt;getTrusted&lt;/code&gt; and &lt;code&gt;valueOf&lt;/code&gt;) to replace the way things work because &lt;code&gt;$sce&lt;/code&gt; delegates to &lt;code&gt;$sceDelegate&lt;/code&gt; for these operations.</source>
          <target state="translated">通常は、設定またはオーバーライドします&lt;a href=&quot;%24scedelegate&quot;&gt;$ sceDelegate&lt;/a&gt;の代わりに、 &lt;code&gt;$sce&lt;/code&gt; 厳格な文脈エスケープはAngularJSで動作方法をカスタマイズするサービスを。一方で、これはある &lt;code&gt;$sce&lt;/code&gt; など数多くの速記法を、提供し、あなたが本当に唯一の3つのコア機能（オーバーライドする必要が &lt;code&gt;trustAs&lt;/code&gt; 、 &lt;code&gt;getTrusted&lt;/code&gt; と &lt;code&gt;valueOf&lt;/code&gt; するので、物事の働き方を置き換えるために） &lt;code&gt;$sce&lt;/code&gt; に代表団を &lt;code&gt;$sceDelegate&lt;/code&gt; これらの操作のために。</target>
        </trans-unit>
        <trans-unit id="4949e7b471c62f07ef5e8f49abbfc90b2fcee84d" translate="yes" xml:space="preserve">
          <source>URL format</source>
          <target state="translated">URL形式</target>
        </trans-unit>
        <trans-unit id="e18613f7569df4e87d46ab0c50bd2f0aa9fd3721" translate="yes" xml:space="preserve">
          <source>URL of content to load.</source>
          <target state="translated">ロードするコンテンツのURL。</target>
        </trans-unit>
        <trans-unit id="30e531717661ab3417ebc4cbe0c1de475ab6be26" translate="yes" xml:space="preserve">
          <source>URL of the request.</source>
          <target state="translated">リクエストのURL。</target>
        </trans-unit>
        <trans-unit id="d7bbc289db7f0b0052507421a9bcb3e65c45c45e" translate="yes" xml:space="preserve">
          <source>URL that was before it was changed.</source>
          <target state="translated">変更前のURL</target>
        </trans-unit>
        <trans-unit id="218f37ac7c7d3d4188879070d19d295a2d90c29a" translate="yes" xml:space="preserve">
          <source>Under the hood</source>
          <target state="translated">フードの下</target>
        </trans-unit>
        <trans-unit id="443978f12d579b038c008dea8e752b5d3e01d6d0" translate="yes" xml:space="preserve">
          <source>Understanding How Scopes Work with Transcluded Directives</source>
          <target state="translated">除外されたディレクティブを使用してスコープがどのように機能するかを理解する</target>
        </trans-unit>
        <trans-unit id="b476afa4e9575435e81ebe1e34e1ccc258d54e8e" translate="yes" xml:space="preserve">
          <source>Understanding Scopes</source>
          <target state="translated">スコープの理解</target>
        </trans-unit>
        <trans-unit id="3aea8612a3778098d091872872cceefb5e6bd7de" translate="yes" xml:space="preserve">
          <source>Understanding View</source>
          <target state="translated">ビューを理解する</target>
        </trans-unit>
        <trans-unit id="629ffb1444dbbb1b0dac1c29021a48b25b040df3" translate="yes" xml:space="preserve">
          <source>Unique scope ID (monotonically increasing) useful for debugging.</source>
          <target state="translated">デバッグに便利なユニークなスコープID(単調に増加)。</target>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="3b563841706d01128f360a08ae70337b23f59c44" translate="yes" xml:space="preserve">
          <source>Unit testing with mock $httpBackend</source>
          <target state="translated">モックを使ったユニットテスト $httpBackend</target>
        </trans-unit>
        <trans-unit id="03f9dd1dbb0519b8fb0d50867eeaf9173813a3e3" translate="yes" xml:space="preserve">
          <source>Unit testing, as the name implies, is about testing individual units of code. Unit tests try to answer questions such as &quot;Did I think about the logic correctly?&quot; or &quot;Does the sort function order the list in the right order?&quot;</source>
          <target state="translated">ユニットテストとは、その名の通り、コードの個々のユニットをテストすることです。ユニットテストは、&quot;ロジックを正しく考えたか?&quot; や &quot;ソート関数はリストを正しい順序で並べ替えているか?&quot; などの質問に答えようとします。</target>
        </trans-unit>
        <trans-unit id="57c368e336d005ba762d838d65c9d99e26f84dac" translate="yes" xml:space="preserve">
          <source>Unit tests only have to load relevant modules, which keeps them fast.</source>
          <target state="translated">ユニットテストは関連するモジュールをロードするだけなので、高速性が保たれます。</target>
        </trans-unit>
        <trans-unit id="3fb4e286e502a759b76367b0dba26a4db6774e6a" translate="yes" xml:space="preserve">
          <source>Unit-testing Component Controllers</source>
          <target state="translated">ユニットテスト コンポーネントコントローラ</target>
        </trans-unit>
        <trans-unit id="c532fb030d4057cff1a4adcec6eb4756fc91ef75" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;angular.extend&quot;&gt;extend()&lt;/a&gt;, &lt;code&gt;merge()&lt;/code&gt; recursively descends into object properties of source objects, performing a deep copy.</source>
          <target state="translated">&lt;a href=&quot;angular.extend&quot;&gt;extend（）&lt;/a&gt;とは異なり、 &lt;code&gt;merge()&lt;/code&gt; はソースオブジェクトのオブジェクトプロパティに再帰的に下降し、ディープコピーを実行します。</target>
        </trans-unit>
        <trans-unit id="c99e4d44f0c339bd48a75c15f4c96bd079f56c71" translate="yes" xml:space="preserve">
          <source>Unlike ES262's &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18&quot;&gt;Array.prototype.forEach&lt;/a&gt;, providing 'undefined' or 'null' values for &lt;code&gt;obj&lt;/code&gt; will not throw a TypeError, but rather just return the value provided.</source>
          <target state="translated">ES262の&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18&quot;&gt;Array.prototype.forEach&lt;/a&gt;とは異なり、 &lt;code&gt;obj&lt;/code&gt; に「未定義」または「null」の値を指定してもTypeErrorはスローされず、指定された値が返されるだけです。</target>
        </trans-unit>
        <trans-unit id="4a156ee932365a77fa24aeddf6e3028c19ec0b66" translate="yes" xml:space="preserve">
          <source>Unlike ES262's &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18&quot;&gt;Array.prototype.forEach&lt;/a&gt;, providing 'undefined' or 'null' values for &lt;code&gt;obj&lt;/code&gt; will not throw a TypeError, but rather just return the value provided.</source>
          <target state="translated">ES262の&lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18&quot;&gt;Array.prototype.forEach&lt;/a&gt;とは異なり、 &lt;code&gt;obj&lt;/code&gt; に「undefined」または「null」の値を指定すると、TypeErrorはスローされず、指定された値が返されます。</target>
        </trans-unit>
        <trans-unit id="209c8097836b9258765844c6a5792b2eb42a2408" translate="yes" xml:space="preserve">
          <source>Unlike services, there can be many instances of the same type of controller in an application.</source>
          <target state="translated">サービスとは異なり、アプリケーション内には同じタイプのコントローラのインスタンスが多数存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="41ae88da458d1d682765ae9e4d1fc2981948283c" translate="yes" xml:space="preserve">
          <source>Unlike simple values, object-literals are watched until every key is defined. See &lt;a href=&quot;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm&quot;&gt;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm&lt;/a&gt;</source>
          <target state="translated">単純な値とは異なり、オブジェクトリテラルはすべてのキーが定義されるまで監視されます。&lt;a href=&quot;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm&quot;&gt;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htmを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="73ae224e8735ac30c004ffdc6115aecdf9718361" translate="yes" xml:space="preserve">
          <source>Up until AngularJS 1.3, &lt;code&gt;$cookies&lt;/code&gt; exposed properties that represented the current browser cookie values. In version 1.4, this behavior has changed, and &lt;code&gt;$cookies&lt;/code&gt; now provides a standard api of getters, setters etc.</source>
          <target state="translated">AngularJS 1.3までは、 &lt;code&gt;$cookies&lt;/code&gt; は現在のブラウザーのcookie値を表すプロパティを公開していました。バージョン1.4では、この動作が変更され、 &lt;code&gt;$cookies&lt;/code&gt; がgetter、setterなどの標準APIを提供するようになりました。</target>
        </trans-unit>
        <trans-unit id="6a24966329bd38080b15cb29a9d8d9bbe7a67aba" translate="yes" xml:space="preserve">
          <source>Update the view value.</source>
          <target state="translated">ビューの値を更新します。</target>
        </trans-unit>
        <trans-unit id="48d94c781db18d8b60bf067bb589536cbf58bd78" translate="yes" xml:space="preserve">
          <source>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in &lt;code&gt;ng-model-options&lt;/code&gt;. This method is rarely needed as &lt;code&gt;NgModelController&lt;/code&gt; usually handles calling this in response to input events.</source>
          <target state="translated">デバウンスされたイベントによって、または入力が &lt;code&gt;ng-model-options&lt;/code&gt; で定義された将来のイベントを待機しているため、更新が保留されている可能性があります。 &lt;code&gt;NgModelController&lt;/code&gt; は通常、入力イベントに応答してこれを呼び出すため、このメソッドが必要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="a5ece24f05232383c973b3dcd8d5ec955602e4f9" translate="yes" xml:space="preserve">
          <source>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in &lt;code&gt;ng-model-options&lt;/code&gt;. This method is typically needed by the reset button of a form that uses &lt;code&gt;ng-model-options&lt;/code&gt; to pend updates.</source>
          <target state="translated">デバウンスされたイベントによって、または入力が &lt;code&gt;ng-model-options&lt;/code&gt; で定義された将来のイベントを待機しているため、更新が保留されている可能性があります。このメソッドは通常、 &lt;code&gt;ng-model-options&lt;/code&gt; を使用して更新を保留するフォームのリセットボタンで必要になります。</target>
        </trans-unit>
        <trans-unit id="c32c26b09b60884932de0735cac06908d3f7ccf0" translate="yes" xml:space="preserve">
          <source>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in &lt;code&gt;ng-model-options&lt;/code&gt;. this method is rarely needed as &lt;code&gt;NgModelController&lt;/code&gt; usually handles calling this in response to input events.</source>
          <target state="translated">デバウンスされたイベントによって、または入力が &lt;code&gt;ng-model-options&lt;/code&gt; で定義された将来のイベントを待機しているため、更新が保留されている可能性があります。 &lt;code&gt;NgModelController&lt;/code&gt; は通常、入力イベントに応答してこれを呼び出すため、このメソッドが必要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="e78c2b095e755aab9f8caa006dd4fd278929ad41" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;%24interval#flush.html&quot;&gt;&lt;code&gt;$interval.flush(millis)&lt;/code&gt;&lt;/a&gt; to move forward by &lt;code&gt;millis&lt;/code&gt; milliseconds and trigger any functions scheduled to run in that time.</source>
          <target state="translated">使用&lt;a href=&quot;%24interval#flush.html&quot;&gt; &lt;code&gt;$interval.flush(millis)&lt;/code&gt; &lt;/a&gt;で前進する &lt;code&gt;millis&lt;/code&gt; （ミリ秒）と、その時点で実行するようにスケジュールされた機能をトリガします。</target>
        </trans-unit>
        <trans-unit id="9d10cf3ebaf3f699b7cd183a40113d2096935796" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../provider/%24interpolateprovider#endSymbol.html&quot;&gt;&lt;code&gt;$interpolateProvider.endSymbol&lt;/code&gt;&lt;/a&gt; to change the symbol.</source>
          <target state="translated">シンボルを変更するには、&lt;a href=&quot;../provider/%24interpolateprovider#endSymbol.html&quot;&gt; &lt;code&gt;$interpolateProvider.endSymbol&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="d014a1c84c0cea27fad3b0edad9bcbb55cee2222" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../provider/%24interpolateprovider#startSymbol.html&quot;&gt;&lt;code&gt;$interpolateProvider.startSymbol&lt;/code&gt;&lt;/a&gt; to change the symbol.</source>
          <target state="translated">シンボルを変更するには、&lt;a href=&quot;../provider/%24interpolateprovider#startSymbol.html&quot;&gt; &lt;code&gt;$interpolateProvider.startSymbol&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="6a641c4af45db61a4d45240e4bc451c61620dd29" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ngswitch&quot;&gt;&lt;code&gt;ngSwitch&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; の&lt;/a&gt;代わりに&lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ngswitch&quot;&gt; &lt;code&gt;ngSwitch&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="218b05a9d83c943a410d416413419b99ab64cf02" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$anchorScrollProvider&lt;/code&gt; to disable automatic scrolling whenever &lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; changes.</source>
          <target state="translated">使用 &lt;code&gt;$anchorScrollProvider&lt;/code&gt; 無効に自動スクロールするたびに&lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$ location.hash（）&lt;/a&gt;の変更。</target>
        </trans-unit>
        <trans-unit id="b968b0787da9eecc71135a165258514b44ef0734" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$anchorScrollProvider&lt;/code&gt; to disable automatic scrolling whenever &lt;a href=&quot;service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; changes.</source>
          <target state="translated">使用 &lt;code&gt;$anchorScrollProvider&lt;/code&gt; 無効に自動スクロールするたびに&lt;a href=&quot;service/%24location#hash.html&quot;&gt;$ location.hash（）&lt;/a&gt;の変更。</target>
        </trans-unit>
        <trans-unit id="354512147e4e601cc546a9ec65841a61f9421903" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$cookiesProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;../service/%24cookies&quot;&gt;$cookies&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$cookiesProvider&lt;/code&gt; を使用して、&lt;a href=&quot;../service/%24cookies&quot;&gt;$ cookies&lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="a148f7331f736ce00c51361a431bda51bee1ed1d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$cookiesProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt;$cookies&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$cookiesProvider&lt;/code&gt; を使用して、&lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt;$ cookies&lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="ef936e3e20232f9a1650cc302f357cad6c4156ca" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$cookiesProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;service/%24cookies&quot;&gt;$cookies&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$cookiesProvider&lt;/code&gt; を使用して、&lt;a href=&quot;service/%24cookies&quot;&gt;$ cookies&lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="15fb01e25077c75bad5d011e5094bc75c8f3d896" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$httpProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; を使用して、&lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="687465cea5c0906f2e3249d57fd88fb9d657fefe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$httpProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;service/%24http&quot;&gt;$http&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; を使用して、&lt;a href=&quot;service/%24http&quot;&gt;$ http&lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="2392b2da1088beefbc29590ab2eda9ddba143d0a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$resourceProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;../service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; を使用して、&lt;a href=&quot;../service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="b88771011fc3cd5358447dc36675101538ddffcf" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$resourceProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;ngresource/service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; を使用して、&lt;a href=&quot;ngresource/service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="7ca460ac7b4debf1921b9d34cfa7a7f3a1ebd02a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$resourceProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; を使用して、&lt;a href=&quot;service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;サービスのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="cc1ec7cfcbd0280881371f3aa4ee3069843966fe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng-class=&quot;{'ng-hide': expression}&lt;/code&gt; instead of instead of &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;ng-class=&quot;{'ng-hide': expression}&lt;/code&gt; の代わりに、代わりの&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="252932316ac080237bfbd49d94e69b42c8202774" translate="yes" xml:space="preserve">
          <source>Use controllers to:</source>
          <target state="translated">コントローラーを使って</target>
        </trans-unit>
        <trans-unit id="ec78e24bb1beaec2fff0a05e747e3a518fdbd042" translate="yes" xml:space="preserve">
          <source>Use sharedInjector when you want to take advantage of Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt;, or mocha's &lt;code&gt;before()&lt;/code&gt; methods. Call &lt;code&gt;module.sharedInjector()&lt;/code&gt; before you setup any other hooks that will create (i.e call &lt;code&gt;module()&lt;/code&gt;) or use (i.e call &lt;code&gt;inject()&lt;/code&gt;) the injector.</source>
          <target state="translated">Jasmineの &lt;code&gt;beforeAll()&lt;/code&gt; またはmochaの &lt;code&gt;before()&lt;/code&gt; メソッドを利用する場合は、sharedInjectorを使用します。コール &lt;code&gt;module.sharedInjector()&lt;/code&gt; あなたのセットアップを作成します（つまり、呼び出し、他のフックの前 &lt;code&gt;module()&lt;/code&gt; ）または使用（すなわちコール &lt;code&gt;inject()&lt;/code&gt; インジェクターを。</target>
        </trans-unit>
        <trans-unit id="eb362d3d265854877b73c2022104238b8f662f3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$locationProvider&lt;/code&gt; to configure how the application deep linking paths are stored.</source>
          <target state="translated">使用 &lt;code&gt;$locationProvider&lt;/code&gt; 深いパスを結ぶアプリケーションが格納されている方法を設定。</target>
        </trans-unit>
        <trans-unit id="7a7084daedcbcf3cf58f8478d3a4ef6d9e3042e1" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$logProvider&lt;/code&gt; to configure how the application logs messages</source>
          <target state="translated">使用 &lt;code&gt;$logProvider&lt;/code&gt; 設定する方法アプリケーションログメッセージを</target>
        </trans-unit>
        <trans-unit id="359920a71e60b24c3e8679f4d1142b9de40dfe80" translate="yes" xml:space="preserve">
          <source>Use the latest AngularJS possible</source>
          <target state="translated">可能な限り最新のAngularJSを使用する</target>
        </trans-unit>
        <trans-unit id="9d4a7cc07d13aee2118147eae5b6204e02526bb6" translate="yes" xml:space="preserve">
          <source>Use the special CSS selector &lt;code&gt;ng-hide.ng-hide-animate&lt;/code&gt; to set &lt;code&gt;{display: none}&lt;/code&gt; or similar on the affected elements.</source>
          <target state="translated">特殊なCSSセレクター &lt;code&gt;ng-hide.ng-hide-animate&lt;/code&gt; を使用して、影響を受ける要素に &lt;code&gt;{display: none}&lt;/code&gt; などを設定します。</target>
        </trans-unit>
        <trans-unit id="01b6831d8484c409e8aabc8e2f585a365a461d33" translate="yes" xml:space="preserve">
          <source>Use this directive to &lt;strong&gt;auto-bootstrap&lt;/strong&gt; an AngularJS application. The &lt;code&gt;ngApp&lt;/code&gt; directive designates the &lt;strong&gt;root element&lt;/strong&gt; of the application and is typically placed near the root element of the page - e.g. on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">このディレクティブを使用して、AngularJSアプリケーションを&lt;strong&gt;自動ブートストラップ&lt;/strong&gt;します。 &lt;code&gt;ngApp&lt;/code&gt; のディレクティブは、指定&lt;strong&gt;ルート要素&lt;/strong&gt;アプリケーションのが、通常はページのルート要素の近くに配置される-に例えば &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; タグ。</target>
        </trans-unit>
        <trans-unit id="cffba56063404188829cf8f1f82edf386bbc1e59" translate="yes" xml:space="preserve">
          <source>Use this directive to force the angular.element library. This should be used to force either jqLite by leaving ng-jq blank or setting the name of the jquery variable under window (eg. jQuery).</source>
          <target state="translated">angular.elementライブラリを強制的に使用するには、このディレクティブを使用します。これは ng-jq を空欄にして jqLite を強制するか、ウィンドウ下の jquery 変数の名前を設定する (例:jQuery)ために使用します。</target>
        </trans-unit>
        <trans-unit id="294fecfb6e5d5ea18318309468bfa41aee69ee2b" translate="yes" xml:space="preserve">
          <source>Use this function to manually start up AngularJS application.</source>
          <target state="translated">AngularJSアプリケーションを手動で起動するには、この機能を使用します。</target>
        </trans-unit>
        <trans-unit id="c6f82f5bd67956f87473eb69dd807927f89430cf" translate="yes" xml:space="preserve">
          <source>Use this function to reload the current application with debug information turned on. This takes precedence over a call to &lt;code&gt;$compileProvider.debugInfoEnabled(false)&lt;/code&gt;.</source>
          <target state="translated">この関数を使用して、デバッグ情報をオンにして現在のアプリケーションを再ロードします。これは、 &lt;code&gt;$compileProvider.debugInfoEnabled(false)&lt;/code&gt; 呼び出しよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="d5a771a46afd23a79112854e27f186a09e2c9ba1" translate="yes" xml:space="preserve">
          <source>Use this method to configure services by injecting their &lt;a href=&quot;angular.module#provider.html&quot;&gt;&lt;code&gt;providers&lt;/code&gt;&lt;/a&gt;, e.g. for adding routes to the &lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt;.</source>
          <target state="translated">このメソッドを使用して、たとえば&lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;$ routeProviderに&lt;/a&gt;ルートを追加するために、&lt;a href=&quot;angular.module#provider.html&quot;&gt; &lt;code&gt;providers&lt;/code&gt; &lt;/a&gt;を挿入してサービスを設定します。</target>
        </trans-unit>
        <trans-unit id="94c8a5728df153aa8ef0f96f8c05e84b03dfd3da" translate="yes" xml:space="preserve">
          <source>Use this method to disable automatic scrolling.</source>
          <target state="translated">自動スクロールを無効にするには、この方法を使用します。</target>
        </trans-unit>
        <trans-unit id="b46c8e2625e9d1d564150470d764ef83f44ed6cd" translate="yes" xml:space="preserve">
          <source>Use this method to register work which should be performed when the injector is done loading all modules.</source>
          <target state="translated">このメソッドを使用して、インジェクタがすべてのモジュールのロードを完了したときに実行されるべき作業を登録します。</target>
        </trans-unit>
        <trans-unit id="e2c9ca4a68dc2a6884892d41b5a73fcdd5783521" translate="yes" xml:space="preserve">
          <source>Used for configuring routes.</source>
          <target state="translated">ルートの設定に使用します。</target>
        </trans-unit>
        <trans-unit id="1e20f817510e56e9b96cac2070c3e22126811c3b" translate="yes" xml:space="preserve">
          <source>Used for configuring the ARIA attributes injected and managed by ngAria.</source>
          <target state="translated">ngAriaが注入して管理するARIA属性を設定するために使用します。</target>
        </trans-unit>
        <trans-unit id="655c8e5a053e43f0c11ecfabef9bcc1912abfe26" translate="yes" xml:space="preserve">
          <source>Used for configuring the interpolation markup. Defaults to &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">補間マークアップの構成に使用されます。デフォルトは &lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1fb44e414995a58ae7d8e047aff02bcff4d56e5c" translate="yes" xml:space="preserve">
          <source>Used to configure the options passed to the &lt;a href=&quot;../service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; service when making a template request.</source>
          <target state="translated">テンプレート要求を行うときに&lt;a href=&quot;../service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;サービスに渡されるオプションを構成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e98fe6396bfb3427cbaf00c58b5487eb76c4659a" translate="yes" xml:space="preserve">
          <source>Used to configure the options passed to the &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; service when making a template request.</source>
          <target state="translated">テンプレート要求を行うときに&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;サービスに渡されるオプションを構成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1992cf3bd475bebb63dff75def762449cd8f0921" translate="yes" xml:space="preserve">
          <source>Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This function can be called in four ways:</source>
          <target state="translated">アプリケーション全体、または要素とその子要素に対してアニメーションを有効にするかどうかを取得したり設定したりするために使用します。この関数は4つの方法で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="77ca86ada0f9252bb106a6e6efdbff01c4a20438" translate="yes" xml:space="preserve">
          <source>Using $animate in your directive code</source>
          <target state="translated">ディレクティブコードで $animate を使う</target>
        </trans-unit>
        <trans-unit id="613a81888b42fb0d4ca5df60f2f42af801bb1b12" translate="yes" xml:space="preserve">
          <source>Using $location</source>
          <target state="translated">場所を使用する</target>
        </trans-unit>
        <trans-unit id="27c0cbbddba59723567250ee8aaf043d300dad88" translate="yes" xml:space="preserve">
          <source>Using $location outside of the scope life-cycle</source>
          <target state="translated">スコープのライフサイクル外での $location の使用</target>
        </trans-unit>
        <trans-unit id="29169efc69847444ce3da0120339548bb93f2578" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/ngaria&quot;&gt;ngAria&lt;/a&gt; is as simple as requiring the ngAria module in your application. ngAria hooks into standard AngularJS directives and quietly injects accessibility support into your application at runtime.</source>
          <target state="translated">&lt;a href=&quot;../api/ngaria&quot;&gt;ngAriaの&lt;/a&gt;使用は、アプリケーションでngAriaモジュールを必要とするほど簡単です。ngAriaは標準のAngularJSディレクティブにフックし、実行時にユーザー補助機能のサポートをアプリケーションに静かに注入します。</target>
        </trans-unit>
        <trans-unit id="187503b822cc41efce6fddb7ffa2ed2aec83c324" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;controller as&lt;/code&gt; makes it obvious which controller you are accessing in the template when multiple controllers apply to an element.</source>
          <target state="translated">&lt;code&gt;controller as&lt;/code&gt; 使用すると、複数のコントローラーが1つの要素に適用されるときに、テンプレートでアクセスしているコントローラーが明確になります。</target>
        </trans-unit>
        <trans-unit id="75fa788af800c949aecf96d72fda73c3d6a4da58" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ngStrictDi&lt;/code&gt;, you would see something like this:</source>
          <target state="translated">&lt;code&gt;ngStrictDi&lt;/code&gt; を使用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="618b214c025a81d4cdc55abe11cf88128651105c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt; will bind the result of the &lt;code&gt;select&lt;/code&gt; expression to the model, but the value of the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; html elements will be either the index (for array data sources) or property name (for object data sources) of the value within the collection. If a &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is used, the result of that expression will be set as the value of the &lt;code&gt;option&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt;を使用すると、 &lt;code&gt;select&lt;/code&gt; 式の結果がモデルにバインドさ&lt;strong&gt;れ&lt;/strong&gt;ますが、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; html要素の値は、インデックス（配列データソースの場合）またはプロパティ名（オブジェクトデータソースの場合）のいずれかになります。コレクション内の値。式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;が使用さ&lt;strong&gt;れている&lt;/strong&gt;場合、その式の結果が &lt;code&gt;option&lt;/code&gt; と &lt;code&gt;select&lt;/code&gt; 要素の値として設定されます。</target>
        </trans-unit>
        <trans-unit id="b48a3f6a40b09344260d8ec7bc24924a4a77ab6a" translate="yes" xml:space="preserve">
          <source>Using ARIA in HTML</source>
          <target state="translated">HTMLでのARIAの使用</target>
        </trans-unit>
        <trans-unit id="c4171cbd1d6f3ea14fcb721dacfb4707975d43ea" translate="yes" xml:space="preserve">
          <source>Using AngularJS markup like &lt;code&gt;{{hash}}&lt;/code&gt; in a &lt;code&gt;src&lt;/code&gt; attribute doesn't work right: The browser will fetch from the URL with the literal text &lt;code&gt;{{hash}}&lt;/code&gt; until AngularJS replaces the expression inside &lt;code&gt;{{hash}}&lt;/code&gt;. The &lt;code&gt;ngSrc&lt;/code&gt; directive solves this problem.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 属性で &lt;code&gt;{{hash}}&lt;/code&gt; のようなAngularJSマークアップを使用しても正しく機能しません。AngularJSが &lt;code&gt;{{hash}}&lt;/code&gt; 内の式を置き換えるまで、ブラウザはリテラルテキスト &lt;code&gt;{{hash}}&lt;/code&gt; で URLからフェッチします。 &lt;code&gt;ngSrc&lt;/code&gt; のディレクティブは、この問題を解決します。</target>
        </trans-unit>
        <trans-unit id="1544e2d4e4ae1fb37109d1352ffdb29d3bc70e81" translate="yes" xml:space="preserve">
          <source>Using AngularJS markup like &lt;code&gt;{{hash}}&lt;/code&gt; in a &lt;code&gt;srcset&lt;/code&gt; attribute doesn't work right: The browser will fetch from the URL with the literal text &lt;code&gt;{{hash}}&lt;/code&gt; until AngularJS replaces the expression inside &lt;code&gt;{{hash}}&lt;/code&gt;. The &lt;code&gt;ngSrcset&lt;/code&gt; directive solves this problem.</source>
          <target state="translated">以下のようなAngularJSマークアップを使用して &lt;code&gt;{{hash}}&lt;/code&gt; に &lt;code&gt;srcset&lt;/code&gt; 属性は正しく動作しません：ブラウザは、リテラルテキストとURLから取得します &lt;code&gt;{{hash}}&lt;/code&gt; AngularJSは、発現内部代わるまで、 &lt;code&gt;{{hash}}&lt;/code&gt; 。 &lt;code&gt;ngSrcset&lt;/code&gt; のディレクティブは、この問題を解決します。</target>
        </trans-unit>
        <trans-unit id="1c81f10b2e8d7a29e274525eca136b9b2754c57d" translate="yes" xml:space="preserve">
          <source>Using AngularJS markup like &lt;code&gt;{{hash}}&lt;/code&gt; in an href attribute will make the link go to the wrong URL if the user clicks it before AngularJS has a chance to replace the &lt;code&gt;{{hash}}&lt;/code&gt; markup with its value. Until AngularJS replaces the markup the link will be broken and will most likely return a 404 error. The &lt;code&gt;ngHref&lt;/code&gt; directive solves this problem.</source>
          <target state="translated">&lt;code&gt;{{hash}}&lt;/code&gt; のようなAngularJSマークアップをhref属性で使用すると、AngularJSが &lt;code&gt;{{hash}}&lt;/code&gt; マークアップをその値で置き換える前にユーザーがクリックすると、リンクが間違ったURLに移動します。AngularJSがマークアップを置き換えるまで、リンクは壊れており、おそらく404エラーを返します。 &lt;code&gt;ngHref&lt;/code&gt; のディレクティブは、この問題を解決します。</target>
        </trans-unit>
        <trans-unit id="26651671e648d817c38c64754ab40d68a2c9123a" translate="yes" xml:space="preserve">
          <source>Using CSS classes</source>
          <target state="translated">CSSクラスの使用</target>
        </trans-unit>
        <trans-unit id="22c59955943e9707b80f15aec8a1b0a32409db33" translate="yes" xml:space="preserve">
          <source>Using Dependency Injection</source>
          <target state="translated">依存性インジェクションの使用</target>
        </trans-unit>
        <trans-unit id="3f12d56b74c2eb2c6b5988dda7a6704cc676d3d4" translate="yes" xml:space="preserve">
          <source>Using Factory recipes, you can also define AngularJS's filters and animations, but the controllers are a bit special. You create a controller as a custom type that declares its dependencies as arguments for its constructor function. This constructor is then registered with a module. Let's take a look at the &lt;code&gt;DemoController&lt;/code&gt;, created in one of the early examples:</source>
          <target state="translated">Factoryレシピを使用して、AngularJSのフィルターとアニメーションを定義することもできますが、コントローラーは少し特殊です。コンストラクター関数の引数として依存関係を宣言するカスタム型としてコントローラーを作成します。次に、このコンストラクターがモジュールに登録されます。初期の例の1つで作成された &lt;code&gt;DemoController&lt;/code&gt; を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="142274a4bb4939c13a749da4226dd8927425fd22" translate="yes" xml:space="preserve">
          <source>Using Local Caches</source>
          <target state="translated">ローカルキャッシュの使用</target>
        </trans-unit>
        <trans-unit id="e8729bc93021a2e5283ed88952093ee0c9a0a8f3" translate="yes" xml:space="preserve">
          <source>Using Protractor</source>
          <target state="translated">分度器の使用</target>
        </trans-unit>
        <trans-unit id="cf6f695a6a43d5695aeb78a9aefcac36d5324914" translate="yes" xml:space="preserve">
          <source>Using Strict Dependency Injection</source>
          <target state="translated">厳密な依存性インジェクションの使用</target>
        </trans-unit>
        <trans-unit id="9e041c266624208fa4e65afd24d87690238c5434" translate="yes" xml:space="preserve">
          <source>Using a Service</source>
          <target state="translated">サービスの利用</target>
        </trans-unit>
        <trans-unit id="1870160824edb5f5d781284d76bb684b36c8a3ae" translate="yes" xml:space="preserve">
          <source>Using a custom comparator</source>
          <target state="translated">カスタムコンパレータの使用</target>
        </trans-unit>
        <trans-unit id="1513de7002759ec420dfa96ea93dd443a199efcb" translate="yes" xml:space="preserve">
          <source>Using an element for the &lt;code&gt;myCustomer&lt;/code&gt; directive is clearly the right choice because you're not decorating an element with some &quot;customer&quot; behavior; you're defining the core behavior of the element as a customer component.</source>
          <target state="translated">&lt;code&gt;myCustomer&lt;/code&gt; ディレクティブに要素を使用することは、「顧客」の動作で要素を装飾しないため、明らかに正しい選択です。要素のコア動作を顧客コンポーネントとして定義しています。</target>
        </trans-unit>
        <trans-unit id="0b7f582cdde801c5eb7ccd1f5f093fd2b744221d" translate="yes" xml:space="preserve">
          <source>Using beforeAll()</source>
          <target state="translated">beforeAll()の使用</target>
        </trans-unit>
        <trans-unit id="3bf81a946b8d6c54f33bc47f1e13b86d15e48e46" translate="yes" xml:space="preserve">
          <source>Using filters in controllers, services, and directives</source>
          <target state="translated">コントローラ、サービス、ディレクティブでのフィルタの使用</target>
        </trans-unit>
        <trans-unit id="e5733313ce1e48569bbeb7efa880f179d91eb616" translate="yes" xml:space="preserve">
          <source>Using filters in view templates</source>
          <target state="translated">ビューテンプレートでフィルタを使用する</target>
        </trans-unit>
        <trans-unit id="77968546fbbe30427c877e1f02f60fd695c65843" translate="yes" xml:space="preserve">
          <source>Using interceptors</source>
          <target state="translated">インターセプターの使用</target>
        </trans-unit>
        <trans-unit id="ebf3d55846a7cd7f43e5f8cb0e431673ff8d2495" translate="yes" xml:space="preserve">
          <source>Using ngAria</source>
          <target state="translated">ngAriaの使用</target>
        </trans-unit>
        <trans-unit id="0f90dda5b5582c6398d02b0a5b0ebe328da00024" translate="yes" xml:space="preserve">
          <source>Using ngDisabled with ngAria:</source>
          <target state="translated">ngDisabledをngAriaで使う。</target>
        </trans-unit>
        <trans-unit id="1937d07736980fa1e1cf14044c2d1eaa38088d68" translate="yes" xml:space="preserve">
          <source>Using ngRepeat to generate select options</source>
          <target state="translated">ngRepeatを使用してセレクトオプションを生成する</target>
        </trans-unit>
        <trans-unit id="5f900837ceda875bf4c544ccac4d6058c4d6e857" translate="yes" xml:space="preserve">
          <source>Using ngValue to bind the model to an array of objects</source>
          <target state="translated">ngValueを使用してモデルをオブジェクトの配列にバインドする</target>
        </trans-unit>
        <trans-unit id="175501655ff7f1694fc035936c74e9c893e388e0" translate="yes" xml:space="preserve">
          <source>Using orderBy inside a controller</source>
          <target state="translated">コントローラ内部で orderBy を使用する</target>
        </trans-unit>
        <trans-unit id="e38d72e573ba15e9d4f27541cef1ca49dafb855c" translate="yes" xml:space="preserve">
          <source>Using select with ngOptions and setting a default value</source>
          <target state="translated">ngOptionsでselectを使用してデフォルト値を設定する</target>
        </trans-unit>
        <trans-unit id="0726f73ae0c0e6e634886be4cf9fd3ceb9cfeaff" translate="yes" xml:space="preserve">
          <source>Using strict di mode in your production application will throw errors when an injectable function is not &lt;a href=&quot;di#dependency-annotation.html&quot;&gt;annotated explicitly&lt;/a&gt;. Strict di mode is intended to help you make sure that your code will work when minified. However, it also will force you to make sure that your injectable functions are explicitly annotated which will improve angular's performance when injecting dependencies in your injectable functions because it doesn't have to dynamically discover a function's dependencies. It is recommended to automate the explicit annotation via a tool like &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; when you deploy to production (and enable strict di mode)</source>
          <target state="translated">本番アプリケーションでstrict diモードを使用すると、注入可能な関数に&lt;a href=&quot;di#dependency-annotation.html&quot;&gt;明示的に注釈が付けられて&lt;/a&gt;いない場合にエラーがスローされます。Strict diモードは、コードが縮小されたときに確実に機能するようにすることを目的としています。ただし、関数の依存関係を動的に検出する必要がないため、注入可能な関数に明示的に注釈が付けられていることを確認する必要もあります。これにより、注入可能な関数に依存関係を注入するときのAngularのパフォーマンスが向上します。本番&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;環境&lt;/a&gt;にデプロイするとき（および厳密なdiモードを有効にするとき）ng-annotateなどのツールを使用して明示的な注釈を自動化することをお勧めします</target>
        </trans-unit>
        <trans-unit id="9c094e712cb148afcafcaaa4238f6b76abc53b26" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;$inject&lt;/code&gt; property annotation</source>
          <target state="translated">使用する &lt;code&gt;$inject&lt;/code&gt; プロパティアノテーションを</target>
        </trans-unit>
        <trans-unit id="cc139db8875164b29e6054bd8d872efa13f3e432" translate="yes" xml:space="preserve">
          <source>Using the inline array annotation (preferred)</source>
          <target state="translated">インライン配列アノテーションを使用する(推奨</target>
        </trans-unit>
        <trans-unit id="a32ba4858e6ecdf40bb878f10445086068b003aa" translate="yes" xml:space="preserve">
          <source>Using this mode requires URL rewriting on server side, basically you have to rewrite all your links to entry point of your application (e.g. index.html). Requiring a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag is also important for this case, as it allows AngularJS to differentiate between the part of the url that is the application base and the path that should be handled by the application.</source>
          <target state="translated">このモードを使用するには、サーバー側でURLの書き換えが必要です。基本的に、アプリケーションのエントリポイント（index.htmlなど）へのすべてのリンクを書き換える必要があります。必要 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; それはAngularJSは、アプリケーションベースおよびアプリケーションによって処理されるべきパスされているURLの部分を区別することを可能にするように、タグは、この場合もために重要です。</target>
        </trans-unit>
        <trans-unit id="dd90e467c164134d79cd404122f3459c75ef6850" translate="yes" xml:space="preserve">
          <source>Using your favorite element inspector, look for attributes added by ngAria in your own code.</source>
          <target state="translated">お気に入りの要素インスペクタを使って、自分のコードにngAriaが追加した属性を探します。</target>
        </trans-unit>
        <trans-unit id="a66911e37d51e0c3a3a47af728e0570297be65e2" translate="yes" xml:space="preserve">
          <source>Usually, it's not necessary to write to properties in AngularJS, as the built-in directives handle the most common use cases (instead of the above example, you would use &lt;a href=&quot;ngvalue&quot;&gt;&lt;code&gt;ngValue&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">通常、AngularJSでプロパティに書き込む必要はありません。組み込みのディレクティブが最も一般的な使用例を処理するためです（上記の例の代わりに、&lt;a href=&quot;ngvalue&quot;&gt; &lt;code&gt;ngValue&lt;/code&gt; &lt;/a&gt;を使用します）。</target>
        </trans-unit>
        <trans-unit id="9117e3d156ca57a740fa2681f3cbe9bcb779f7cd" translate="yes" xml:space="preserve">
          <source>Usually, you don't call &lt;code&gt;$digest()&lt;/code&gt; directly in &lt;a href=&quot;../directive/ngcontroller&quot;&gt;controllers&lt;/a&gt; or in &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;. Instead, you should call &lt;a href=&quot;%24rootscope.scope#%24apply.html&quot;&gt;$apply()&lt;/a&gt; (typically from within a &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt;), which will force a &lt;code&gt;$digest()&lt;/code&gt;.</source>
          <target state="translated">通常、&lt;a href=&quot;../directive/ngcontroller&quot;&gt;コントローラー&lt;/a&gt;や&lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;で &lt;code&gt;$digest()&lt;/code&gt; 直接呼び出すことはありません。代わりに、&lt;a href=&quot;%24rootscope.scope#%24apply.html&quot;&gt;$ apply（）を&lt;/a&gt;呼び出す必要があります（通常は&lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;内から）。これにより、 &lt;code&gt;$digest()&lt;/code&gt; が強制されます。</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="5cff1d4dcbaa6169803c618f64323129b1539f3d" translate="yes" xml:space="preserve">
          <source>Value Recipe</source>
          <target state="translated">バリューレシピ</target>
        </trans-unit>
        <trans-unit id="c113bc7c7f7db6557f503b649e374f64b15937e5" translate="yes" xml:space="preserve">
          <source>Value for this literal. All literal values must be primitives or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">このリテラルの値。すべてのリテラル値は、プリミティブまたは &lt;code&gt;undefined&lt;/code&gt; なければなりません。</target>
        </trans-unit>
        <trans-unit id="48274bf7792e3199e036a65ed34f449dc89eaf60" translate="yes" xml:space="preserve">
          <source>Value may be:</source>
          <target state="translated">価値はあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5c7b89964a32b7847cc384c42d59157b6aa66118" translate="yes" xml:space="preserve">
          <source>Value or a promise</source>
          <target state="translated">価値や約束</target>
        </trans-unit>
        <trans-unit id="6c81a08fcf7fb2e50a04e9b948fa82e0ea17df4a" translate="yes" xml:space="preserve">
          <source>Value services are similar to constant services, except that they cannot be injected into a module configuration function (see &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;) but they can be overridden by an AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">値サービスは、モジュール構成関数（&lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; を&lt;/a&gt;参照）に注入できないことを除いて、定数サービスに似ていますが、AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;デコレーター&lt;/a&gt;によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="3aa197e2c8a5fb13e9b7816824a89f4b3c5b3507" translate="yes" xml:space="preserve">
          <source>Value stabilization algorithm</source>
          <target state="translated">価値安定化アルゴリズム</target>
        </trans-unit>
        <trans-unit id="6c469ec6aaa554802630547915725303bf8f8b8f" translate="yes" xml:space="preserve">
          <source>Value to be stored.</source>
          <target state="translated">保存する値。</target>
        </trans-unit>
        <trans-unit id="605788684850e8a238a8726e1a0cb4c5099a9922" translate="yes" xml:space="preserve">
          <source>Value to set the attribute to. The value can be an interpolated string.</source>
          <target state="translated">属性を設定する値。値は補間された文字列にすることができます。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="a47ec135f296824132839931bbbe778322d52156" translate="yes" xml:space="preserve">
          <source>Verifies that all of the requests defined via the &lt;code&gt;expect&lt;/code&gt; api were made. If any of the requests were not made, verifyNoOutstandingExpectation throws an exception.</source>
          <target state="translated">&lt;code&gt;expect&lt;/code&gt; apiを介して定義されたすべてのリクエストが行われたことを確認します。要求が行われなかった場合、verifyNoOutstandingExpectationは例外をスローします。</target>
        </trans-unit>
        <trans-unit id="2b0950bdfc9c6382c1d7d6a757ca980cb3de9e74" translate="yes" xml:space="preserve">
          <source>Verifies that there are no outstanding requests that need to be flushed.</source>
          <target state="translated">フラッシュする必要のある未処理のリクエストがないことを確認します。</target>
        </trans-unit>
        <trans-unit id="d7f325a18a825f860634333d989a1d777ced5162" translate="yes" xml:space="preserve">
          <source>Verifies that there are no pending tasks that need to be flushed. It throws an error if there are still pending tasks.</source>
          <target state="translated">フラッシュする必要のある保留中のタスクがないことを確認します。保留中のタスクがある場合はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="7c6656dc823a752a3eb9bcea6c50275b8cfac7b8" translate="yes" xml:space="preserve">
          <source>Via CSS styles: overwriting styles in the ng-animate CSS class</source>
          <target state="translated">CSS スタイルを介して:ng-animate CSS クラスのスタイルを上書きする</target>
        </trans-unit>
        <trans-unit id="56b71e89fb1079caaadefd0889e9a22e8b0560e3" translate="yes" xml:space="preserve">
          <source>Videos</source>
          <target state="translated">Videos</target>
        </trans-unit>
        <trans-unit id="aa76b6711f0b6f7b9b50c7a4cf8c5e8df5a2790e" translate="yes" xml:space="preserve">
          <source>Videos:</source>
          <target state="translated">Videos:</target>
        </trans-unit>
        <trans-unit id="69bd4ef9fbd0894a22759c3766b859defbdedbc8" translate="yes" xml:space="preserve">
          <source>View</source>
          <target state="translated">View</target>
        </trans-unit>
        <trans-unit id="8a0159fc319678e56cbe357335bec37e3f693d44" translate="yes" xml:space="preserve">
          <source>View &amp;mdash; The template (HTML with data bindings) that is rendered into the View.</source>
          <target state="translated">ビュー&amp;mdash;ビューにレンダリングされるテンプレート（データバインディング付きのHTML）。</target>
        </trans-unit>
        <trans-unit id="a0f83aaccc440d1cf25ada9bc1856e7eb2641833" translate="yes" xml:space="preserve">
          <source>View-independent business logic: Services</source>
          <target state="translated">ビューに依存しないビジネスロジック。サービス</target>
        </trans-unit>
        <trans-unit id="80fbd7d99df33af15d63e1fddfb91adaa3951721" translate="yes" xml:space="preserve">
          <source>Views and routes (see the example)</source>
          <target state="translated">ビューとルート(例を参照</target>
        </trans-unit>
        <trans-unit id="346631241a6bd165883391eb2bf20f0dac472e27" translate="yes" xml:space="preserve">
          <source>W3C Accessibility Testing</source>
          <target state="translated">W3Cアクセシビリティテスト</target>
        </trans-unit>
        <trans-unit id="6173f8eb0b947a810d1db5e56255e90b7667262d" translate="yes" xml:space="preserve">
          <source>Watch and observe the URL.</source>
          <target state="translated">URLを見て観察してみてください。</target>
        </trans-unit>
        <trans-unit id="3db346c9726b530d1a2ae4cfb73287c8e81c97cc" translate="yes" xml:space="preserve">
          <source>Watching &lt;em&gt;by reference&lt;/em&gt; (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;scope.$watch&lt;/a&gt;&lt;code&gt;(watchExpression, listener)&lt;/code&gt;) detects a change when the whole value returned by the watch expression switches to a new value. If the value is an array or an object, changes inside it are not detected. This is the most efficient strategy.</source>
          <target state="translated">鑑賞&lt;em&gt;参照することにより&lt;/em&gt;（&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;スコープ。$腕時計&lt;/a&gt; &lt;code&gt;(watchExpression, listener)&lt;/code&gt; ウォッチ式によって返された値全体が新しい値に切り替えたときに）変化を検出します。値が配列またはオブジェクトの場合、その内部の変更は検出されません。これは最も効率的な戦略です。</target>
        </trans-unit>
        <trans-unit id="473a9c40eedd5fb0f115c451dd30526bd2c650ad" translate="yes" xml:space="preserve">
          <source>Watching &lt;em&gt;by value&lt;/em&gt; (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;scope.$watch&lt;/a&gt;&lt;code&gt;(watchExpression, listener, true)&lt;/code&gt;) detects any change in an arbitrarily nested data structure. It is the most powerful change detection strategy, but also the most expensive. A full traversal of the nested data structure is needed on each digest, and a full copy of it needs to be held in memory.</source>
          <target state="translated">鑑賞&lt;em&gt;値によって&lt;/em&gt;（&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;スコープ。$腕時計&lt;/a&gt; &lt;code&gt;(watchExpression, listener, true)&lt;/code&gt; ）任意にネストされたデータ構造の変化を検知します。これは最も強力な変更検出戦略ですが、最も費用がかかります。ネストされたデータ構造の完全な全探索が各ダイジェストで必要であり、その完全なコピーをメモリに保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="2af6bb4a94b9a1cb0fd67c6d5fc0095196e94650" translate="yes" xml:space="preserve">
          <source>Watching &lt;em&gt;collection contents&lt;/em&gt; (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watchCollection.html&quot;&gt;scope.$watchCollection&lt;/a&gt;&lt;code&gt;(watchExpression, listener)&lt;/code&gt;) detects changes that occur inside an array or an object: When items are added, removed, or reordered. The detection is shallow - it does not reach into nested collections. Watching collection contents is more expensive than watching by reference, because copies of the collection contents need to be maintained. However, the strategy attempts to minimize the amount of copying required.</source>
          <target state="translated">見て&lt;em&gt;コレクションの内容&lt;/em&gt;（&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watchCollection.html&quot;&gt;。スコープ$ watchCollection &lt;/a&gt; &lt;code&gt;(watchExpression, listener)&lt;/code&gt; の項目が追加されると、削除、または並べ替え：）アレイ又はオブジェクト内起こる変化を検出します。検出は浅いです-ネストされたコレクションには到達しません。コレクションコンテンツのコピーは保持する必要があるため、コレクションコンテンツの参照は参照による参照よりもコストがかかります。ただし、この戦略では、必要なコピーの量を最小限に抑えようとします。</target>
        </trans-unit>
        <trans-unit id="e57f32a79f955dc80e7b98c93ef9c5dff9e8992b" translate="yes" xml:space="preserve">
          <source>We also &lt;strong&gt;must&lt;/strong&gt; include animations for the views that are being entered and removed (otherwise anchoring wouldn't be possible since the new view would be inserted right away).</source>
          <target state="translated">また、入力および削除されるビューのアニメーションも含める&lt;strong&gt;必要があり&lt;/strong&gt;ます（そうしないと、新しいビューがすぐに挿入されるため、アンカーを付けることができません）。</target>
        </trans-unit>
        <trans-unit id="48d50b84720d06df376f308744283f116a6daf37" translate="yes" xml:space="preserve">
          <source>We also changed all expressions in the page to read and write variables within that controller instance by prefixing them with &lt;code&gt;invoice.&lt;/code&gt; . The possible currencies are defined in the controller and added to the template using &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat&lt;/code&gt;&lt;/a&gt;. As the controller contains a &lt;code&gt;total&lt;/code&gt; function we are also able to bind the result of that function to the DOM using &lt;code&gt;{{ invoice.total(...) }}&lt;/code&gt;.</source>
          <target state="translated">また、ページ内のすべての式を変更して、そのコントローラーインスタンス内の変数の前にinvoiceを付けて、変数の読み取りと書き込みを行いました &lt;code&gt;invoice.&lt;/code&gt; 。可能な通貨はコントローラーで定義され、&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;/a&gt;を使用してテンプレートに追加されます。コントローラーには &lt;code&gt;total&lt;/code&gt; 関数が含まれているため、 &lt;code&gt;{{ invoice.total(...) }}&lt;/code&gt; を使用して、その関数の結果をDOMにバインドすることもできます。</target>
        </trans-unit>
        <trans-unit id="e45e195299e27595cc434211c5af3181e81a8bd7" translate="yes" xml:space="preserve">
          <source>We are now ready to launch unicorns, but notice that UnicornLauncher depends on our &lt;code&gt;apiToken&lt;/code&gt;. We can satisfy this dependency on &lt;code&gt;apiToken&lt;/code&gt; using the Factory recipe:</source>
          <target state="translated">これでユニコーンを起動する準備ができましたが、UnicornLauncherがapiTokenに依存していることに注意して &lt;code&gt;apiToken&lt;/code&gt; 。Factoryレシピを使用して、この &lt;code&gt;apiToken&lt;/code&gt; への依存性を満たすことができます。</target>
        </trans-unit>
        <trans-unit id="ac1ea31a9d43166687a50ed3692e05ce4153dc7a" translate="yes" xml:space="preserve">
          <source>We are using the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce&lt;/a&gt; service here and include the &lt;a href=&quot;../../ngsanitize&quot;&gt;$sanitize&lt;/a&gt; module to automatically remove &quot;bad&quot; content like inline event listener (e.g. &lt;code&gt;&amp;lt;span onclick=&quot;...&quot;&amp;gt;&lt;/code&gt;). However, as we are using &lt;code&gt;$sce&lt;/code&gt; the model can still decide to provide unsafe content if it marks that content using the &lt;code&gt;$sce&lt;/code&gt; service.</source>
          <target state="translated">ここでは&lt;a href=&quot;../service/%24sce&quot;&gt;$ sce&lt;/a&gt;サービスを使用しており、&lt;a href=&quot;../../ngsanitize&quot;&gt;$ sanitize&lt;/a&gt;モジュールを含めて、インラインイベントリスナーなどの「悪い」コンテンツを自動的に削除します（例： &lt;code&gt;&amp;lt;span onclick=&quot;...&quot;&amp;gt;&lt;/code&gt; ）。ただし、 &lt;code&gt;$sce&lt;/code&gt; を使用しているため、 &lt;code&gt;$sce&lt;/code&gt; サービスを使用してコンテンツにマークを付けると、モデルは安全でないコンテンツを提供することを決定できます。</target>
        </trans-unit>
        <trans-unit id="0ddbe3412df53532770a5870b95d26cf007568fd" translate="yes" xml:space="preserve">
          <source>We attach our controller to the DOM using the &lt;code&gt;ng-controller&lt;/code&gt; directive. The &lt;code&gt;greeting&lt;/code&gt; property can now be data-bound to the template:</source>
          <target state="translated">&lt;code&gt;ng-controller&lt;/code&gt; ディレクティブを使用して、コントローラーをDOMに接続します。これで、 &lt;code&gt;greeting&lt;/code&gt; プロパティをテンプレートにデータバインドできます。</target>
        </trans-unit>
        <trans-unit id="ddeae2cedf9a788113de391be2a82b5796c82f33" translate="yes" xml:space="preserve">
          <source>We can also make use of &lt;strong&gt;CSS Keyframes&lt;/strong&gt; by referencing the keyframe animation within the starting CSS class:</source>
          <target state="translated">開始CSSクラス内のキーフレームアニメーションを参照して、&lt;strong&gt;CSSキーフレーム&lt;/strong&gt;を利用することもできます。</target>
        </trans-unit>
        <trans-unit id="a40a9d552fb5bc988807680efe848c3a0e26cf2b" translate="yes" xml:space="preserve">
          <source>We can also make use of CSS keyframes by placing them within the CSS classes.</source>
          <target state="translated">また、CSSのクラスの中にCSSのキーフレームを配置することで、CSSのキーフレームを活用することができます。</target>
        </trans-unit>
        <trans-unit id="844c06e399ab04678015537239ffb4d4f3dc9652" translate="yes" xml:space="preserve">
          <source>We can now attach a transition onto the &lt;code&gt;.banner.ng-anchor&lt;/code&gt; CSS class and then ngAnimate will handle the entire transition for us as well as the addition and removal of any changes of CSS classes between the elements:</source>
          <target state="translated">トランジションを &lt;code&gt;.banner.ng-anchor&lt;/code&gt; CSSクラスにアタッチできるようになり、ngAnimateがトランジション全体を処理し、要素間のCSSクラスの変更の追加と削除を処理します。</target>
        </trans-unit>
        <trans-unit id="4e80494b0409a0d993fa81a7d1f333388f5be423" translate="yes" xml:space="preserve">
          <source>We can show this by adding another property, &lt;code&gt;vojta&lt;/code&gt;, to our scope and trying to access it from within our directive's template:</source>
          <target state="translated">これを示すには、別のプロパティ &lt;code&gt;vojta&lt;/code&gt; をスコープに追加し、ディレクティブのテンプレート内からアクセスしようとします。</target>
        </trans-unit>
        <trans-unit id="fce0871e367a5372f3bc98dd4c0252dc8c77c3c6" translate="yes" xml:space="preserve">
          <source>We can specify functions to run at configuration and run time for a module by calling the &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; methods. These functions are injectable with dependencies just like the factory functions above.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; および &lt;code&gt;run&lt;/code&gt; メソッドを呼び出すことにより、モジュールの構成時および実行時に実行する関数を指定できます。これらの関数は、上記のファクトリ関数と同じように依存関係とともに注入できます。</target>
        </trans-unit>
        <trans-unit id="e36459843d047d9df4a4211084dc5c402b38cf07" translate="yes" xml:space="preserve">
          <source>We can then use the component like this:</source>
          <target state="translated">そして、このようなコンポーネントを使用することができます。</target>
        </trans-unit>
        <trans-unit id="21324a462f2b8d5e0c7c5b4446052c135414c236" translate="yes" xml:space="preserve">
          <source>We could then configure the unicornLauncherProvider like this:</source>
          <target state="translated">このように unicornLauncherProvider を設定することができます。</target>
        </trans-unit>
        <trans-unit id="ac57f6df21dcb977cf78d72cfa768c34c7356753" translate="yes" xml:space="preserve">
          <source>We create an &lt;a href=&quot;module&quot;&gt;AngularJS Module&lt;/a&gt;, &lt;code&gt;myApp&lt;/code&gt;, for our application. Then we add the controller's constructor function to the module using the &lt;code&gt;.controller()&lt;/code&gt; method. This keeps the controller's constructor function out of the global scope.</source>
          <target state="translated">私たちは、作成&lt;a href=&quot;module&quot;&gt;AngularJSモジュール&lt;/a&gt;、 &lt;code&gt;myApp&lt;/code&gt; 私たちのアプリケーションのために、。次に、 &lt;code&gt;.controller()&lt;/code&gt; メソッドを使用して、コントローラーのコンストラクター関数をモジュールに追加します。これにより、コントローラーのコンストラクター関数がグローバルスコープから除外されます。</target>
        </trans-unit>
        <trans-unit id="90dc4f28f2aa88baf0a0053350aecee511d1b878" translate="yes" xml:space="preserve">
          <source>We do our best to intercept calls to &quot;unimplemented&quot; methods, but since the list of methods is incomplete we might be missing some non-standard methods. This can result in errors like: &quot;Date.prototype.foo called on incompatible Object&quot;.</source>
          <target state="translated">実装されていない」メソッドの呼び出しを妨害するために最善を尽くしていますが、メソッドのリストが不完全なので、標準ではないメソッドを見落としている可能性があります。その結果、以下のようなエラーが発生する可能性があります。&quot;Date.prototype.foo は互換性のないオブジェクトで呼び出されました。</target>
        </trans-unit>
        <trans-unit id="e6fc82dc5284ffbf38ea98e85e63bcc39b7510a8" translate="yes" xml:space="preserve">
          <source>We have built &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt;, an end to end test runner which simulates user interactions that will help you verify the health of your AngularJS application.</source>
          <target state="translated">私たちは、内蔵されている&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;分度器&lt;/a&gt;、あなたはAngularJSアプリケーションの健全性を確認するのに役立ちますユーザーとの対話をシミュレートし、エンドエンドのテストランナーを。</target>
        </trans-unit>
        <trans-unit id="eff730b8cb2d8bb324e06d0e737eb8eccaed14f5" translate="yes" xml:space="preserve">
          <source>We have set up a guide to many resources provided by the community, where you can find lots of additional information and material on these topics, a list of complimentary libraries, and much more.</source>
          <target state="translated">コミュニティから提供されている多くのリソースについてのガイドを作成しました。</target>
        </trans-unit>
        <trans-unit id="ca17b1356cdf6d9a99a47902186386c56a19dd9d" translate="yes" xml:space="preserve">
          <source>We have used an &lt;strong&gt;inline injection annotation&lt;/strong&gt; to explicitly specify the dependency of the Controller on the &lt;code&gt;$scope&lt;/code&gt; service provided by AngularJS. See the guide on &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;インラインインジェクションアノテーション&lt;/strong&gt;を使用して、AngularJSが提供する &lt;code&gt;$scope&lt;/code&gt; サービスに対するコントローラーの依存関係を明示的に指定しました。詳細については、&lt;a href=&quot;di&quot;&gt;依存性注入&lt;/a&gt;に関するガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="9ca11f9dea4678a83cbe765017c379b901fb7de5" translate="yes" xml:space="preserve">
          <source>We inject the $compile service and $rootScope before each jasmine test. The $compile service is used to render the aGreatEye directive. After rendering the directive we ensure that the directive has replaced the content and &quot;lidless, wreathed in flame, 2 times&quot; is present.</source>
          <target state="translated">jasmine のテストの前に $compile サービスと $rootScope を注入します。compile サービスは aGreatEye ディレクティブのレンダリングに使われます。ディレクティブをレンダリングした後、ディレクティブが内容を置き換えたことと、 &quot;lidless,wreathed in flame,2 times&quot; が存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="ae572490bcf1a384d00d809014f9ef3a389a0f5d" translate="yes" xml:space="preserve">
          <source>We moved the &lt;code&gt;convertCurrency&lt;/code&gt; function and the definition of the existing currencies into the new file &lt;code&gt;finance2.js&lt;/code&gt;. But how does the controller get a hold of the now separated function?</source>
          <target state="translated">私たちは、移動 &lt;code&gt;convertCurrency&lt;/code&gt; の機能と新しいファイルに既存の通貨の定義 &lt;code&gt;finance2.js&lt;/code&gt; を。しかし、コントローラーはどのようにして現在分離された機能を保持するのでしょうか？</target>
        </trans-unit>
        <trans-unit id="023a9b93224bd84cddfe8a629e03f8aa9c858380" translate="yes" xml:space="preserve">
          <source>We register an event &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt;. What fires this &lt;code&gt;$destroy&lt;/code&gt; event?</source>
          <target state="translated">イベント &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt; を登録します。この &lt;code&gt;$destroy&lt;/code&gt; イベントを発生させるものは何ですか？</target>
        </trans-unit>
        <trans-unit id="9d48b2c91f5a6af75293c06facac5a89ab2fa1aa" translate="yes" xml:space="preserve">
          <source>We saw earlier how to use &lt;code&gt;=attr&lt;/code&gt; in the &lt;code&gt;scope&lt;/code&gt; option, but in the above example, we're using &lt;code&gt;&amp;amp;attr&lt;/code&gt; instead. The &lt;code&gt;&amp;amp;&lt;/code&gt; binding allows a directive to trigger evaluation of an expression in the context of the original scope, at a specific time. Any legal expression is allowed, including an expression which contains a function call. Because of this, &lt;code&gt;&amp;amp;&lt;/code&gt; bindings are ideal for binding callback functions to directive behaviors.</source>
          <target state="translated">以前、 &lt;code&gt;scope&lt;/code&gt; オプションで &lt;code&gt;=attr&lt;/code&gt; を使用する方法を説明しましたが、上記の例では、代わりに &lt;code&gt;&amp;amp;attr&lt;/code&gt; を使用しています。 &lt;code&gt;&amp;amp;&lt;/code&gt; 特異的結合時に、元の範囲の文脈における発現のトリガー評価に指示することを可能にします。関数呼び出しを含む式を含む、あらゆる正当な式が許可されます。このため、 &lt;code&gt;&amp;amp;&lt;/code&gt; バインディングは、コールバック関数をディレクティブの動作にバインドするのに最適です。</target>
        </trans-unit>
        <trans-unit id="d1926692f60d5568acf1d0bee7f667e3d7c0c99e" translate="yes" xml:space="preserve">
          <source>We want to run the function we pass by invoking it from the directive's scope, but have it run in the context of the scope where it's registered.</source>
          <target state="translated">ディレクティブのスコープから呼び出して渡す関数を実行したいのですが、 登録されているスコープのコンテキストで実行させたいのです。</target>
        </trans-unit>
        <trans-unit id="e8e0776ae3afa2fad60ff172ae662a5d77e9f6f7" translate="yes" xml:space="preserve">
          <source>We would expect AngularJS to be able to bind to this, but when we check the console we see something like &lt;code&gt;Error: Invalid value for attribute cx=&quot;{{cx}}&quot;&lt;/code&gt;. Because of the SVG DOM API's restrictions, you cannot simply write &lt;code&gt;cx=&quot;{{cx}}&quot;&lt;/code&gt;.</source>
          <target state="translated">AngularJSがこれにバインドできることを期待しますが、コンソールを確認すると、 &lt;code&gt;Error: Invalid value for attribute cx=&quot;{{cx}}&quot;&lt;/code&gt; ようなものが表示されます。SVG DOM APIの制限のため、単純に &lt;code&gt;cx=&quot;{{cx}}&quot;&lt;/code&gt; と書くことはできません。</target>
        </trans-unit>
        <trans-unit id="252941e0a55657728f76a621bbe228cd9bed318b" translate="yes" xml:space="preserve">
          <source>We'll go over a few common examples of directives, then dive deep into the different options and compilation process.</source>
          <target state="translated">ディレクティブの一般的な例をいくつか見てから、さまざまなオプションとコンパイルプロセスを深く掘り下げていきます。</target>
        </trans-unit>
        <trans-unit id="3db74eddb5abe4c6d69ca5073939b2ffdcd30492" translate="yes" xml:space="preserve">
          <source>We've just learned how AngularJS splits the life-cycle into configuration phase and run phase and how you can provide configuration to your application via the config function. Since the config function runs in the configuration phase when no services are available, it doesn't have access even to simple value objects created via the Value recipe.</source>
          <target state="translated">ここまで、AngularJSがどのようにライフサイクルをコンフィギュレーションフェーズとランフェーズに分けているか、そしてconfig関数を使ってアプリケーションにコンフィギュレーションを提供する方法を学びました。config関数はサービスが利用できないコンフィギュレーションフェーズで実行されるので、Valueレシピで作成された単純なvalueオブジェクトにすらアクセスできません。</target>
        </trans-unit>
        <trans-unit id="e7c295f69a771afaeb6fd0ffad7c2c66be9dc3e3" translate="yes" xml:space="preserve">
          <source>We've moved the duplication out and into the &lt;code&gt;beforeEach&lt;/code&gt; block. Each individual test now only contains the code specific to that test, and not code that is general across all tests. As you expand your tests, keep an eye out for locations where you can use &lt;code&gt;beforeEach&lt;/code&gt; to tidy up tests. &lt;code&gt;beforeEach&lt;/code&gt; isn't the only function of this sort that Jasmine provides, and the &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown&quot;&gt;documentation lists the others&lt;/a&gt;.</source>
          <target state="translated">複製を &lt;code&gt;beforeEach&lt;/code&gt; ブロックに移動しました。個々のテストには、そのテストに固有のコードのみが含まれ、すべてのテストに共通するコードは含まれなくなりました。テストを拡張するときは、 &lt;code&gt;beforeEach&lt;/code&gt; を使用してテストを整理できる場所に注意してください。 &lt;code&gt;beforeEach&lt;/code&gt; はJasmineが提供するこの種の機能だけではなく、&lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown&quot;&gt;ドキュメントには他の&lt;/a&gt;機能がリストされています。</target>
        </trans-unit>
        <trans-unit id="db22f098edcd754e67ee450cb20db228118b9fa9" translate="yes" xml:space="preserve">
          <source>We've moved the duplication out and into the &lt;code&gt;beforeEach&lt;/code&gt; block. Each individual test now only contains the code specific to that test, and not code that is general across all tests. As you expand your tests, keep an eye out for locations where you can use &lt;code&gt;beforeEach&lt;/code&gt; to tidy up tests. &lt;code&gt;beforeEach&lt;/code&gt; isn't the only function of this sort that Jasmine provides, and the &lt;a href=&quot;https://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown&quot;&gt;documentation lists the others&lt;/a&gt;.</source>
          <target state="translated">複製を &lt;code&gt;beforeEach&lt;/code&gt; ブロックに移動しました。個々のテストには、そのテストに固有のコードのみが含まれ、すべてのテストに一般的なコードは含まれなくなりました。テストを拡張するときは、 &lt;code&gt;beforeEach&lt;/code&gt; を使用してテストを整理できる場所に注意してください。 &lt;code&gt;beforeEach&lt;/code&gt; は、Jasmineが提供するこの種の関数だけではなく、&lt;a href=&quot;https://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown&quot;&gt;ドキュメントには他の&lt;/a&gt;関数がリストされています。</target>
        </trans-unit>
        <trans-unit id="a5f49816240da5c5e93a09a217e5e15251e2f600" translate="yes" xml:space="preserve">
          <source>We've seen that you can pass in models to a directive using the isolate scope, but sometimes it's desirable to be able to pass in an entire template rather than a string or an object. Let's say that we want to create a &quot;dialog box&quot; component. The dialog box should be able to wrap any arbitrary content.</source>
          <target state="translated">これまで、アイソレートスコープを使ってディレクティブにモデルを渡すことができることを見てきましたが、文字列やオブジェクトではなく、テンプレート全体を渡すことができる方が望ましい場合もあります。例えば、&quot;ダイアログボックス &quot;コンポーネントを作りたいとします。ダイアログボックスは、任意の内容をラップできるようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="abb1d6054f0ea55e7ce30bf24912bdf732c1589f" translate="yes" xml:space="preserve">
          <source>Web browsers are sometimes picky about what values they consider valid for attributes.</source>
          <target state="translated">Webブラウザは、属性に対して有効と考える値については、時に慎重になることがあります。</target>
        </trans-unit>
        <trans-unit id="4f9f39d112f26b6b483e5752ed5019d0587ba101" translate="yes" xml:space="preserve">
          <source>WebAIM</source>
          <target state="translated">WebAIM</target>
        </trans-unit>
        <trans-unit id="216b85a80c0458fafdebd3ba9ff38b76e657305e" translate="yes" xml:space="preserve">
          <source>What are Directives?</source>
          <target state="translated">ディレクティブとは何ですか?</target>
        </trans-unit>
        <trans-unit id="12c179e827df1ac7383cddb213d45ff08f32ebad" translate="yes" xml:space="preserve">
          <source>What are decorators?</source>
          <target state="translated">デコレーターとは?</target>
        </trans-unit>
        <trans-unit id="f9f442481556abfd102cc7155daba690e1a9a733" translate="yes" xml:space="preserve">
          <source>What changed?</source>
          <target state="translated">何が変わったの?</target>
        </trans-unit>
        <trans-unit id="6352305971f4abc98ce5ffab5abff8ed01207f3c" translate="yes" xml:space="preserve">
          <source>What changed? Our &lt;code&gt;currencyConverter&lt;/code&gt; service of the &lt;code&gt;finance&lt;/code&gt; module now uses the &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt;, a built-in service provided by AngularJS for accessing a server backend. &lt;code&gt;$http&lt;/code&gt; is a wrapper around &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; transports.</source>
          <target state="translated">何が変わったの？当社 &lt;code&gt;currencyConverter&lt;/code&gt; ののサービス &lt;code&gt;finance&lt;/code&gt; モジュールは現在、使用しています&lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;、内蔵のサーバーのバックエンドにアクセスするためのAngularJSが提供するサービス。 &lt;code&gt;$http&lt;/code&gt; は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt; &lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;トランスポートのラッパーです。</target>
        </trans-unit>
        <trans-unit id="5fd722f670ac5d7ebde1b488b8a9b681825ca997" translate="yes" xml:space="preserve">
          <source>What changed? Our &lt;code&gt;currencyConverter&lt;/code&gt; service of the &lt;code&gt;finance&lt;/code&gt; module now uses the &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt;, a built-in service provided by AngularJS for accessing a server backend. &lt;code&gt;$http&lt;/code&gt; is a wrapper around &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; transports.</source>
          <target state="translated">何が変わったの？当社 &lt;code&gt;currencyConverter&lt;/code&gt; ののサービス &lt;code&gt;finance&lt;/code&gt; モジュールは現在、使用しています&lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;、内蔵のサーバーのバックエンドにアクセスするためのAngularJSが提供するサービス。 &lt;code&gt;$http&lt;/code&gt; は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt; &lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;トランスポートのラッパーです。</target>
        </trans-unit>
        <trans-unit id="c9eedc43181be3fbaa803cb63186981f99ccc887" translate="yes" xml:space="preserve">
          <source>What does it not do?</source>
          <target state="translated">何をしないのか?</target>
        </trans-unit>
        <trans-unit id="3cfacea0972e3e84df3a18186fd33468ca795ebb" translate="yes" xml:space="preserve">
          <source>What does this &lt;code&gt;transclude&lt;/code&gt; option do, exactly? &lt;code&gt;transclude&lt;/code&gt; makes the contents of a directive with this option have access to the scope &lt;strong&gt;outside&lt;/strong&gt; of the directive rather than inside.</source>
          <target state="translated">この &lt;code&gt;transclude&lt;/code&gt; オプションは正確には何をしますか？ &lt;code&gt;transclude&lt;/code&gt; は、このオプションを使用してディレクティブの内容を、ディレクティブの内部ではなく&lt;strong&gt;外部&lt;/strong&gt;にアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="ada0e0f2c7af87060d54e95e4a96fd7138d3489e" translate="yes" xml:space="preserve">
          <source>What is AngularJS?</source>
          <target state="translated">AngularJSとは?</target>
        </trans-unit>
        <trans-unit id="447644911a568d0214e937333a19ccc004de8c3e" translate="yes" xml:space="preserve">
          <source>What is a Module?</source>
          <target state="translated">モジュールとは何ですか?</target>
        </trans-unit>
        <trans-unit id="fe08c3c8244699c5a8b273b2cab8b4200356ffcb" translate="yes" xml:space="preserve">
          <source>What is a locale ID?</source>
          <target state="translated">ロケールIDとは何ですか?</target>
        </trans-unit>
        <trans-unit id="beba7ea743f1dc2173ee282f653943a35f2a106b" translate="yes" xml:space="preserve">
          <source>What is ngMessageFormat?</source>
          <target state="translated">ngMessageFormatとは?</target>
        </trans-unit>
        <trans-unit id="3943480da5771dbbb46c706aaaea42bf22c5390d" translate="yes" xml:space="preserve">
          <source>What is returned</source>
          <target state="translated">返されるもの</target>
        </trans-unit>
        <trans-unit id="fbe9fcf5a0f59f8dbc56de5c706eccfe1288f8b9" translate="yes" xml:space="preserve">
          <source>What trusted context types are supported?</source>
          <target state="translated">どのような信頼できるコンテキストタイプがサポートされていますか?</target>
        </trans-unit>
        <trans-unit id="a4e67c138282d3bd3498f65dbfecf946d52210e9" translate="yes" xml:space="preserve">
          <source>What we want to be able to do is separate the scope inside a directive from the scope outside, and then map the outer scope to a directive's inner scope. We can do this by creating what we call an &lt;strong&gt;isolate scope&lt;/strong&gt;. To do this, we can use a &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;directive's &lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">私たちができることは、ディレクティブ内のスコープを外側のスコープから分離し、外側のスコープをディレクティブの内側のスコープにマップすることです。これを行うには、&lt;strong&gt;分離スコープ&lt;/strong&gt;と呼ばれるものを作成し&lt;strong&gt;ます&lt;/strong&gt;。これを行うには、&lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;ディレクティブの &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="be6b5657e71d140a3fc95978d677de4ea44df671" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$animate&lt;/code&gt; is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has ended by chaining onto the returned promise that animation method returns.</source>
          <target state="translated">とき &lt;code&gt;$animate&lt;/code&gt; 呼ばれ、それは、アニメーションが終了した際に捕捉するために使用することができる約束を返します。したがって、（ディレクティブコード内で）アニメーションをトリガーする場合、アニメーションが終了した後、アニメーションメソッドが返すという返されたプロミスにチェーンすることにより、ディレクティブとスコープに関連するアクティビティを引き続き実行できます。</target>
        </trans-unit>
        <trans-unit id="e5e660649c875315903afc08f2df11dfa21f3355" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$setViewValue&lt;/code&gt; is called, the new &lt;code&gt;value&lt;/code&gt; will be staged for committing through the &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$validators&lt;/code&gt; pipelines. If there are no special &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; specified then the staged value is sent directly for processing through the &lt;code&gt;$parsers&lt;/code&gt; pipeline. After this, the &lt;code&gt;$validators&lt;/code&gt; and &lt;code&gt;$asyncValidators&lt;/code&gt; are called and the value is applied to &lt;code&gt;$modelValue&lt;/code&gt;. Finally, the value is set to the &lt;strong&gt;expression&lt;/strong&gt; specified in the &lt;code&gt;ng-model&lt;/code&gt; attribute and all the registered change listeners, in the &lt;code&gt;$viewChangeListeners&lt;/code&gt; list are called.</source>
          <target state="translated">ときに &lt;code&gt;$setViewValue&lt;/code&gt; 呼ばれ、新しい &lt;code&gt;value&lt;/code&gt; 通過コミットするために開催される &lt;code&gt;$parsers&lt;/code&gt; と &lt;code&gt;$validators&lt;/code&gt; パイプライン。特別な&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; が&lt;/a&gt;指定されていない場合、ステージングされた値は &lt;code&gt;$parsers&lt;/code&gt; パイプラインを介して処理するために直接送信されます。この後、 &lt;code&gt;$validators&lt;/code&gt; と &lt;code&gt;$asyncValidators&lt;/code&gt; が呼び出され、値が &lt;code&gt;$modelValue&lt;/code&gt; 適用されます。最後に、値は &lt;code&gt;ng-model&lt;/code&gt; 属性で指定された&lt;strong&gt;式に&lt;/strong&gt;設定され、 &lt;code&gt;$viewChangeListeners&lt;/code&gt; リストに登録されているすべての変更リスナーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="15cbb91f0e77da9c30b5e74feba1ad5742a72dcd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;objectEquality == true&lt;/code&gt;, inequality of the &lt;code&gt;watchExpression&lt;/code&gt; is determined according to the &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; function. To save the value of the object for later comparison, the &lt;a href=&quot;../function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt; function is used. This therefore means that watching complex objects will have adverse memory and performance implications.</source>
          <target state="translated">場合 &lt;code&gt;objectEquality == true&lt;/code&gt; の不等式 &lt;code&gt;watchExpression&lt;/code&gt; は、に応じて決定される&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; の&lt;/a&gt;機能。後で比較するためにオブジェクトの値を保存するには、&lt;a href=&quot;../function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; &lt;/a&gt;関数を使用します。したがって、これは、複雑なオブジェクトを監視すると、メモリとパフォーマンスに悪影響を及ぼすことを意味します。</target>
        </trans-unit>
        <trans-unit id="8ce2cc0dab402897ec4863ce029e781d2d6d52fb" translate="yes" xml:space="preserve">
          <source>When AngularJS compiles the HTML, it processes the &lt;code&gt;ng-controller&lt;/code&gt; directive, which in turn asks the injector to create an instance of the controller and its dependencies.</source>
          <target state="translated">AngularJSがHTMLをコンパイルすると、 &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブが処理され、インジェクターにコントローラーのインスタンスとその依存関係の作成を要求します。</target>
        </trans-unit>
        <trans-unit id="ec9b10f946fc02c68139f8c80da5ef591eb2ef7e" translate="yes" xml:space="preserve">
          <source>When AngularJS evaluates &lt;code&gt;{{name}}&lt;/code&gt;, it first looks at the scope associated with the given element for the &lt;code&gt;name&lt;/code&gt; property. If no such property is found, it searches the parent scope and so on until the root scope is reached. In JavaScript this behavior is known as prototypical inheritance, and child scopes prototypically inherit from their parents.</source>
          <target state="translated">AngularJSが &lt;code&gt;{{name}}&lt;/code&gt; を評価するとき、最初に、 &lt;code&gt;name&lt;/code&gt; プロパティの指定された要素に関連付けられたスコープを調べます。そのようなプロパティが見つからない場合は、ルートスコープに到達するまで親スコープなどを検索します。JavaScriptでは、この動作はプロトタイプの継承と呼ばれ、子スコープはプロトタイプの親から継承します。</target>
        </trans-unit>
        <trans-unit id="51c935ad5701756b22938226bcc6b67e883b4629" translate="yes" xml:space="preserve">
          <source>When DOM elements are re-used, ngRepeat updates the scope for the element, which will automatically update any active bindings on the template. However, other functionality will not be updated, because the element is not re-created:</source>
          <target state="translated">DOM要素が再利用されると、ngRepeatはその要素のスコープを更新し、テンプレート上のアクティブなバインディングを自動的に更新します。しかし、要素が再作成されないため、他の機能は更新されません。</target>
        </trans-unit>
        <trans-unit id="185ed32d1839cf6b6b86790a50f091c5cad18d3a" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;replace&lt;/code&gt; directive encounters the same attribute on the original and the replace node, it will simply deduplicate the attribute and join the values with a space or with a &lt;code&gt;;&lt;/code&gt; in case of the &lt;code&gt;style&lt;/code&gt; attribute.</source>
          <target state="translated">ときに &lt;code&gt;replace&lt;/code&gt; ディレクティブの出会いにオリジナルと取り替えるのノードで同じ属性を、それは単に属性を重複排除し、スペースまたはで値を参加します &lt;code&gt;;&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; 属性の場合。</target>
        </trans-unit>
        <trans-unit id="5c230d77dd585240729675f16f4ddd67901e2eba" translate="yes" xml:space="preserve">
          <source>When a directive requests transclusion, the compiler extracts its contents and provides a &lt;strong&gt;transclusion function&lt;/strong&gt; to the directive's &lt;code&gt;link&lt;/code&gt; function and &lt;code&gt;controller&lt;/code&gt;. This transclusion function is a special &lt;strong&gt;linking function&lt;/strong&gt; that will return the compiled contents linked to a new transclusion scope.</source>
          <target state="translated">ディレクティブがトランスクルージョンを要求すると、コンパイラーはその内容を抽出し、ディレクティブの &lt;code&gt;link&lt;/code&gt; 関数と &lt;code&gt;controller&lt;/code&gt; &lt;strong&gt;トランスクルージョン関数&lt;/strong&gt;を提供します。このトランスクルージョン関数は、新しいトランスクルージョンスコープにリンクされたコンパイル済みコンテンツを返す特別な&lt;strong&gt;リンク関数&lt;/strong&gt;です。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27ba11fbb2203f0c5d97308aa2a93fd81f5c7f9e" translate="yes" xml:space="preserve">
          <source>When a user clicks on this link,</source>
          <target state="translated">ユーザーがこのリンクをクリックすると</target>
        </trans-unit>
        <trans-unit id="fbf62f2a97f03d4ac746191d9d45dd4869d7d443" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;offset&lt;/code&gt; is specified, the matching works as follows. First, the exact value of the AngularJS expression is matched against the exact matches (i.e. &lt;code&gt;=N&lt;/code&gt; selectors) to find a match. If there is one, that message is used. If there was no match, then the offset value is subtracted from the value of the expression and locale specific pluralization rules are applied to this new value to obtain its plural category (such as &amp;ldquo;one&amp;rdquo;, &amp;ldquo;few&amp;rdquo;, &amp;ldquo;many&amp;rdquo;, etc.) and a match is attempted against the keyword selectors and the matching message is used. If there was no match, then the &amp;ldquo;other&amp;rdquo; category (required) is used. The value of the &lt;code&gt;#&lt;/code&gt; character inside a message is the value of original expression reduced by the offset value that was specified.</source>
          <target state="translated">ときに &lt;code&gt;offset&lt;/code&gt; 指定され、以下のように、マッチングが動作します。まず、AngularJS式の正確な値を完全一致（つまり &lt;code&gt;=N&lt;/code&gt; セレクター）と照合して、一致を見つけます。存在する場合は、そのメッセージが使用されます。一致しなかった場合、式の値からオフセット値が減算され、ロケール固有の複数化ルールがこの新しい値に適用されて、複数カテゴリ（「1」、「少数」、「多数」など）が取得されます。 。）そして、キーワードセレクターに対して一致が試行され、一致するメッセージが使用されます。一致しなかった場合は、「その他」のカテゴリ（必須）が使用されます。メッセージ内の &lt;code&gt;#&lt;/code&gt; 文字の値は、指定されたオフセット値によって削減された元の式の値です。</target>
        </trans-unit>
        <trans-unit id="a149b30987e7663899511dac68ffedfef81a9f01" translate="yes" xml:space="preserve">
          <source>When an AngularJS application needs some data from a server, it calls the $http service, which sends the request to a real server using $httpBackend service. With dependency injection, it is easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify the requests and respond with some testing data without sending a request to a real server.</source>
          <target state="translated">AngularJSアプリケーションがサーバーから何らかのデータを必要とする場合、$httpサービスを呼び出し、$httpBackendサービスを使って実際のサーバーにリクエストを送ります。依存関係インジェクションを使えば、$httpBackendのモック($httpBackendと同じAPIを持っている)をインジェクションして、実際のサーバーにリクエストを送らずに、リクエストを検証したり、いくつかのテストデータを使って応答したりすることが簡単にできます。</target>
        </trans-unit>
        <trans-unit id="0819d9d7539f9a79a347a5055715a2649bfc1a04" translate="yes" xml:space="preserve">
          <source>When an AngularJS application starts with a given application module, AngularJS creates a new instance of injector, which in turn creates a registry of recipes as a union of all recipes defined in the core &quot;ng&quot; module, application module and its dependencies. The injector then consults the recipe registry when it needs to create an object for your application.</source>
          <target state="translated">AngularJSアプリケーションが特定のアプリケーションモジュールで起動すると、AngularJSはインジェクタの新しいインスタンスを作成し、インジェクタはコアの &quot;ng &quot;モジュール、アプリケーションモジュール、およびその依存関係で定義されたすべてのレシピの組み合わせとしてレシピのレジストリを作成します。インジェクターはアプリケーションのオブジェクトを作成する必要があるときにレシピレジストリを参照します。</target>
        </trans-unit>
        <trans-unit id="65f2bf10923606bb898bed54285676cbbd6a723c" translate="yes" xml:space="preserve">
          <source>When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting element is located on screen via absolute positioning. The cloned element will be placed inside of the root element of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The element will then animate into the &lt;code&gt;out&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; animations and will eventually reach the coordinates and match the dimensions of the destination element. During the entire animation a CSS class of &lt;code&gt;.ng-animate-shim&lt;/code&gt; will be applied to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class is: &lt;code&gt;visibility:hidden&lt;/code&gt;). Once the anchor reaches its destination then it will be removed and the destination element will become visible since the shim class will be removed.</source>
          <target state="translated">アンカーアニメーションが発生すると、ngAnimateは開始要素を複製し、絶対配置を介して画面上の開始要素が配置されている場所に正確に配置します。複製された要素は、アプリケーションのルート要素（ng-appが定義された場所）内に配置され、開始要素のすべてのCSSクラスが適用されます。要素は、 &lt;code&gt;out&lt;/code&gt; と &lt;code&gt;in&lt;/code&gt; アニメーションになり、最終的に座標に到達し、宛先要素の寸法と一致します。アニメーション全体で、 &lt;code&gt;.ng-animate-shim&lt;/code&gt; の CSSクラスが開始要素と宛先要素の両方に適用され、それらを非表示にする（クラスのCSSスタイルは、 &lt;code&gt;visibility:hidden&lt;/code&gt; です)）。アンカーが宛先に到達すると、アンカーが削除され、shimクラスが削除されるため、宛先要素が表示されます。</target>
        </trans-unit>
        <trans-unit id="14f3f7bcb4a87c6124202a009713b7534c14dfdf" translate="yes" xml:space="preserve">
          <source>When an external event (such as a user action, timer or XHR) is received, the associated &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; must be applied to the scope through the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply()&lt;/a&gt; method so that all listeners are updated correctly.</source>
          <target state="translated">外部イベント（ユーザーアクション、タイマー、XHRなど）が受信されると、すべてのリスナーが正しく更新されるように、関連付けられた&lt;a href=&quot;expression&quot;&gt;式を&lt;/a&gt;&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply（）&lt;/a&gt;メソッドを介してスコープに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c139d2a36c5e7dae8ba86d6f3fc970378a2fd7a1" translate="yes" xml:space="preserve">
          <source>When an isolate scope is used for a directive (see above), &lt;code&gt;bindToController: true&lt;/code&gt; will allow a component to have its properties bound to the controller, rather than to scope.</source>
          <target state="translated">ディレクティブに分離スコープが使用されている場合（上記を参照）、 &lt;code&gt;bindToController: true&lt;/code&gt; を使用すると、コンポーネントのプロパティをスコープではなくコントローラーにバインドできます。</target>
        </trans-unit>
        <trans-unit id="3153ef599b44531bab9272b7bd946ae582bdb412" translate="yes" xml:space="preserve">
          <source>When an item in the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; menu is selected, the array element or object property represented by the selected option will be bound to the model identified by the &lt;code&gt;ngModel&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; メニューの項目が選択されると、選択されたオプションによって表される配列要素またはオブジェクトプロパティは、 &lt;code&gt;ngModel&lt;/code&gt; ディレクティブによって識別されるモデルにバインドされます。</target>
        </trans-unit>
        <trans-unit id="3a676ca96b413f93e2b10f02f22a45badb9199fb" translate="yes" xml:space="preserve">
          <source>When an item in the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; menu is selected, the value of the selected option will be bound to the model identified by the &lt;code&gt;ngModel&lt;/code&gt; directive. With static or repeated options, this is the content of the &lt;code&gt;value&lt;/code&gt; attribute or the textContent of the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, if the value attribute is missing. Value and textContent can be interpolated.</source>
          <target state="translated">&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; メニューの項目が選択されると、選択されたオプションの値は、 &lt;code&gt;ngModel&lt;/code&gt; ディレクティブで識別されるモデルにバインドされます。静的オプションまたは繰り返しオプションの場合、これは &lt;code&gt;value&lt;/code&gt; 属性のコンテンツまたは &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; の textContentです（value属性がない場合）。ValueとtextContentは補間できます。</target>
        </trans-unit>
        <trans-unit id="d91d5acbcb6e8adb1db7278d2b85940b8c059799" translate="yes" xml:space="preserve">
          <source>When an item is added, a new instance of the template is added to the DOM.</source>
          <target state="translated">アイテムが追加されると、テンプレートの新しいインスタンスが DOM に追加されます。</target>
        </trans-unit>
        <trans-unit id="6812fd0a944e938e939802bbf208e98821182752" translate="yes" xml:space="preserve">
          <source>When an item is removed, its template instance is removed from the DOM.</source>
          <target state="translated">アイテムが削除されると、そのテンプレートインスタンスは DOM から削除されます。</target>
        </trans-unit>
        <trans-unit id="81dc823adbdf6d2fe5dc8bb040d0c817d8aeaa14" translate="yes" xml:space="preserve">
          <source>When caching is enabled, &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; stores the response from the server using the relevant cache object. The next time the same request is made, the response is returned from the cache without sending a request to the server.</source>
          <target state="translated">キャッシュが有効な場合、&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;は関連するキャッシュオブジェクトを使用してサーバーからの応答を保存します。次回同じ要求が行われると、サーバーに要求を送信せずに、キャッシュから応答が返されます。</target>
        </trans-unit>
        <trans-unit id="789467cb9245497d6ba720add302b2f1f1af706a" translate="yes" xml:space="preserve">
          <source>When called with a single argument the method acts as a setter, setting the &lt;code&gt;search&lt;/code&gt; component of &lt;code&gt;$location&lt;/code&gt; to the specified value.</source>
          <target state="translated">単一の引数で呼び出されると、メソッドはセッターとして機能し、 &lt;code&gt;$location&lt;/code&gt; &lt;code&gt;search&lt;/code&gt; コンポーネントを指定された値に設定します。</target>
        </trans-unit>
        <trans-unit id="14865eb2b6a51a444dc86a06c71f0100af295db4" translate="yes" xml:space="preserve">
          <source>When called, it scrolls to the element related to the specified &lt;code&gt;hash&lt;/code&gt; or (if omitted) to the current value of &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt;, according to the rules specified in the &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec&lt;/a&gt;.</source>
          <target state="translated">呼び出されると、&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5仕様で&lt;/a&gt;指定されたルールに従って、指定された &lt;code&gt;hash&lt;/code&gt; 関連する要素、または（省略されている場合）&lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash（）の&lt;/a&gt;現在の値までスクロールします。</target>
        </trans-unit>
        <trans-unit id="90257f29b1cdba9c8c8a632c62a7cf1100273275" translate="yes" xml:space="preserve">
          <source>When called, it scrolls to the element related to the specified &lt;code&gt;hash&lt;/code&gt; or (if omitted) to the current value of &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt;, according to the rules specified in the &lt;a href=&quot;https://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec&lt;/a&gt;.</source>
          <target state="translated">呼び出されると、&lt;a href=&quot;https://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5仕様で&lt;/a&gt;指定されたルールに従って、指定された &lt;code&gt;hash&lt;/code&gt; 関連する要素にスクロールするか、（省略されている場合は）&lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash（）の&lt;/a&gt;現在の値にスクロールします。</target>
        </trans-unit>
        <trans-unit id="e711b7dd7dcf0670b3366c5231f7791291b42079" translate="yes" xml:space="preserve">
          <source>When called, it scrolls to the element related to the specified &lt;code&gt;hash&lt;/code&gt; or (if omitted) to the current value of &lt;a href=&quot;service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt;, according to the rules specified in the &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec&lt;/a&gt;.</source>
          <target state="translated">呼び出されると、&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5仕様で&lt;/a&gt;指定されたルールに従って、指定された &lt;code&gt;hash&lt;/code&gt; 関連する要素、または（省略されている場合）&lt;a href=&quot;service/%24location#hash.html&quot;&gt;$ location.hash（）の&lt;/a&gt;現在の値までスクロールします。</target>
        </trans-unit>
        <trans-unit id="d9ed5664130857aa25013ee14a11af26977ec732" translate="yes" xml:space="preserve">
          <source>When called, it scrolls to the element related to the specified &lt;code&gt;hash&lt;/code&gt; or (if omitted) to the current value of &lt;a href=&quot;service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt;, according to the rules specified in the &lt;a href=&quot;https://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec&lt;/a&gt;.</source>
          <target state="translated">呼び出されると、&lt;a href=&quot;https://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5仕様で&lt;/a&gt;指定されたルールに従って、指定された &lt;code&gt;hash&lt;/code&gt; 関連する要素にスクロールするか、（省略されている場合は）&lt;a href=&quot;service/%24location#hash.html&quot;&gt;$ location.hash（）の&lt;/a&gt;現在の値にスクロールします。</target>
        </trans-unit>
        <trans-unit id="20cc03eae13b474c55c6832e1df3a3881e25f1de" translate="yes" xml:space="preserve">
          <source>When calling instance methods, the instance itself is used as the request body (if the action should have a body). By default, only actions using &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;PATCH&lt;/code&gt; have request bodies, but you can use the &lt;code&gt;hasBody&lt;/code&gt; configuration option to specify whether an action should have a body or not (regardless of its HTTP method).</source>
          <target state="translated">インスタンスメソッドを呼び出す場合、インスタンス自体がリクエストの本文として使用されます（アクションに本文が必要な場合）。デフォルトでは、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; 、または &lt;code&gt;PATCH&lt;/code&gt; を使用するアクションにのみリクエスト本文がありますが、 &lt;code&gt;hasBody&lt;/code&gt; 構成オプションを使用して、アクションに本文を含めるかどうかを指定できます（HTTPメソッドに関係なく）。</target>
        </trans-unit>
        <trans-unit id="839a4c899e007e634295e0d40ee38c44ffb9e7a9" translate="yes" xml:space="preserve">
          <source>When child scopes are no longer needed, it is the responsibility of the child scope creator to destroy them via &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24destroy.html&quot;&gt;scope.$destroy()&lt;/a&gt; API. This will stop propagation of &lt;code&gt;$digest&lt;/code&gt; calls into the child scope and allow for memory used by the child scope models to be reclaimed by the garbage collector.</source>
          <target state="translated">子スコープが不要になった場合、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24destroy.html&quot;&gt;scope。$ destroy（）&lt;/a&gt; APIを介して子スコープを破棄するのは子スコープの作成者の責任です。これにより、子スコープへの &lt;code&gt;$digest&lt;/code&gt; 呼び出しの伝播が停止し、子スコープモデルによって使用されるメモリがガベージコレクターによって再利用されるようになります。</target>
        </trans-unit>
        <trans-unit id="22459911d88501ffcc063a47051430d4e2088c3f" translate="yes" xml:space="preserve">
          <source>When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of &lt;code&gt;reject&lt;/code&gt; as the &lt;code&gt;throw&lt;/code&gt; keyword in JavaScript. This also means that if you &quot;catch&quot; an error via a promise error callback and you want to forward the error to the promise derived from the current promise, you have to &quot;rethrow&quot; the error by returning a rejection constructed via &lt;code&gt;reject&lt;/code&gt;.</source>
          <target state="translated">deferred / promiseをtry / catch / throwの一般的な動作と比較する場合、 &lt;code&gt;reject&lt;/code&gt; をJavaScriptの &lt;code&gt;throw&lt;/code&gt; キーワードと考えてください。これは、promiseエラーコールバックを介してエラーを「キャッチ」し、現在のpromiseから派生したpromiseにエラーを転送する場合、 &lt;code&gt;reject&lt;/code&gt; を介して構築された拒否を返すことによりエラーを「再スロー」する必要があることも意味します。</target>
        </trans-unit>
        <trans-unit id="7544d7a6d40240f2568b1c59cdeebb817b07875a" translate="yes" xml:space="preserve">
          <source>When designing web applications, consider security threats from:</source>
          <target state="translated">Web アプリケーションを設計する際には、以下のようなセキュリティ上の脅威を考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="1be6f29866ea88fbd287202394805d3eb43fe1cb" translate="yes" xml:space="preserve">
          <source>When digest loop is done and all the values have settled, process the queue of watch deregistration tasks. For each watch to be deregistered, check if it still evaluates to a value that is not &lt;code&gt;undefined&lt;/code&gt;. If that's the case, deregister the watch. Otherwise, keep dirty-checking the watch in the future digest loops by following the same algorithm starting from step 1</source>
          <target state="translated">ダイジェストループが完了し、すべての値が安定したら、監視登録解除タスクのキューを処理します。各時計が登録解除されるためには、それはまだされていない値に評価された場合、チェック &lt;code&gt;undefined&lt;/code&gt; 。その場合は、時計の登録を解除してください。それ以外の場合は、ステップ1から始まる同じアルゴリズムに従って、将来のダイジェストループでウォッチをダーティチェックし続けます。</target>
        </trans-unit>
        <trans-unit id="ada11b8bb4889ba1645ad55c7065dc38a11b087e" translate="yes" xml:space="preserve">
          <source>When filters are executed</source>
          <target state="translated">フィルタを実行した場合</target>
        </trans-unit>
        <trans-unit id="bc763fc382925e726e695a57a972bb42b82d1fcf" translate="yes" xml:space="preserve">
          <source>When interacting with &lt;code&gt;Scope&lt;/code&gt; in tests, additional helper methods are available on the instances of &lt;code&gt;Scope&lt;/code&gt; type. See &lt;a href=&quot;../../ngmock/type/%24rootscope.scope&quot;&gt;ngMock Scope&lt;/a&gt; for additional details.</source>
          <target state="translated">テストで &lt;code&gt;Scope&lt;/code&gt; とやり取りする場合、 &lt;code&gt;Scope&lt;/code&gt; タイプのインスタンスで追加のヘルパーメソッドを使用できます。詳細については、&lt;a href=&quot;../../ngmock/type/%24rootscope.scope&quot;&gt;ngMockスコープ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2316ea99ea91caa4a7fb2d4b06f1b8e10ed600db" translate="yes" xml:space="preserve">
          <source>When internationalizing your app, you need to do thorough testing to make sure UI components behave as expected even when their contents vary greatly in content size.</source>
          <target state="translated">アプリを国際化する際には、コンテンツのサイズが大きく異なる場合でも、UIコンポーネントが期待通りに動作するかどうかを徹底的にテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="750c827a48343dda9e5fe8addc1f6d41b2ad613b" translate="yes" xml:space="preserve">
          <source>When interpolating text or attributes:</source>
          <target state="translated">テキストや属性を補間する場合</target>
        </trans-unit>
        <trans-unit id="3383a24d31d85f720ecee22674153dda0032675f" translate="yes" xml:space="preserve">
          <source>When items are reordered, their respective templates are reordered in the DOM.</source>
          <target state="translated">アイテムが並べ替えられると、それぞれのテンプレートは DOM で並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="6632f6bff4755ea5460332c4224ec9a11c1cb149" translate="yes" xml:space="preserve">
          <source>When nesting elements with structural animations, such as &lt;code&gt;ngIf&lt;/code&gt;, into elements that have class-based animations such as &lt;code&gt;ngClass&lt;/code&gt;, it sometimes happens that before the actual animation starts, there is a brief flicker or flash of content where the animated element is briefly visible.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; などの構造アニメーションを含む要素を、 &lt;code&gt;ngClass&lt;/code&gt; などのクラスベースのアニメーションを含む要素にネストすると、実際のアニメーションが開始する前に、アニメーション化された要素が一時的に表示される短いちらつきや点滅が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="f71bcb4df00d381895c0df3a5c8a7dbd4ffa348d" translate="yes" xml:space="preserve">
          <source>When ngAnimate is animating an element it will apply the &lt;code&gt;ng-animate&lt;/code&gt; CSS class to the element for the duration of the animation. This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).</source>
          <target state="translated">ngAnimateが要素をアニメーション化しているとき、 &lt;code&gt;ng-animate&lt;/code&gt; CSSクラスを要素に適用して、アニメーションの継続時間を確保します。これは一時的なCSSクラスであり、アニメーションが終了すると削除されます（JavaScriptおよびCSSベースのアニメーションの両方）。</target>
        </trans-unit>
        <trans-unit id="3b8455755d949278198fe66a8823e52081309775" translate="yes" xml:space="preserve">
          <source>When not to use Components:</source>
          <target state="translated">コンポーネントを使用しない場合。</target>
        </trans-unit>
        <trans-unit id="db24cd6da9f265a13bfb64937b5a890c8a693e5a" translate="yes" xml:space="preserve">
          <source>When provided, replaces the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</source>
          <target state="translated">提供されている場合、 &lt;code&gt;bannedResourceUrlList&lt;/code&gt; を提供された値に置き換えます。これは配列またはnullである必要があります。このアレイのスナップショットが使用されるため、アレイへのそれ以上の変更は無視されます。</target>
        </trans-unit>
        <trans-unit id="6625b1391d7be3b24e194fa9d4b7155f0f6abba7" translate="yes" xml:space="preserve">
          <source>When provided, replaces the resourceUrlBlacklist with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</source>
          <target state="translated">指定した場合、resourceUrlBlacklist を指定した値で置き換えます。これは配列か null でなければなりません。この配列のスナップショットが使用されるので、それ以降の配列の変更は無視されます。</target>
        </trans-unit>
        <trans-unit id="4d9fdadc8992417ef4226cc2cbace2ccffdff1f6" translate="yes" xml:space="preserve">
          <source>When provided, replaces the resourceUrlWhitelist with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored. Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">指定した場合、resourceUrlWhitelistを指定した値に置き換えます。これは配列またはnullでなければなりません。このアレイのスナップショットが使用されるため、アレイへのそれ以上の変更は無視されます。この配列で許可されている項目の説明については、&lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;このリンク&lt;/a&gt;をクリックしてください。</target>
        </trans-unit>
        <trans-unit id="2a10e5defd097da13b777d840b25c295f260ebeb" translate="yes" xml:space="preserve">
          <source>When provided, replaces the trustedResourceUrlList with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored. Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">提供された場合、trustedResourceUrlListを提供された値に置き換えます。これは配列またはnullである必要があります。このアレイのスナップショットが使用されるため、アレイへのそれ以上の変更は無視されます。この配列で許可される項目の説明については、&lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;このリンク&lt;/a&gt;をたどってください。</target>
        </trans-unit>
        <trans-unit id="fefb6e795ed34de308a60ccca17742a8573190c3" translate="yes" xml:space="preserve">
          <source>When should I use $location?</source>
          <target state="translated">どのような場合に $location を使うべきですか?</target>
        </trans-unit>
        <trans-unit id="fc081f8c14691f7b31edca6d4fe98a8c36e29d01" translate="yes" xml:space="preserve">
          <source>When specifying the &lt;code&gt;placeholder&lt;/code&gt; attribute of &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, Internet Explorer will temporarily insert the placeholder value as the textarea's content. If the placeholder value contains interpolation (&lt;code&gt;{{ ... }}&lt;/code&gt;), an error will be logged in the console when AngularJS tries to update the value of the by-then-removed text node. This doesn't affect the functionality of the textarea, but can be undesirable.</source>
          <target state="translated">&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; の &lt;code&gt;placeholder&lt;/code&gt; 属性を指定すると、Internet Explorerは一時的にプレースホルダー値をテキストエリアのコンテンツとして挿入します。プレースホルダー値に補間（ &lt;code&gt;{{ ... }}&lt;/code&gt; ）が含まれている場合、AngularJSが削除されたテキストノードの値を更新しようとすると、コンソールにエラーが記録されます。これはtextareaの機能には影響しませんが、望ましくない場合があります。</target>
        </trans-unit>
        <trans-unit id="9f2ae1c603fd24b2d92261b8648add410fc1b1db" translate="yes" xml:space="preserve">
          <source>When testing promises, it's important to know that the resolution of promises is tied to the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;digest cycle&lt;/a&gt;. That means a promise's &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; callback functions are only called after a digest has run. In tests, you can trigger a digest by calling a scope's &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;&lt;code&gt;$apply&lt;/code&gt; function&lt;/a&gt;. If you don't have a scope in your test, you can inject the &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; and call &lt;code&gt;$apply&lt;/code&gt; on it. There is also an example of testing promises in the &lt;a href=&quot;../api/ng/service/%24q#testing.html&quot;&gt;&lt;code&gt;$q&lt;/code&gt; service documentation&lt;/a&gt;.</source>
          <target state="translated">promiseをテストするときは、promiseの解決が&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;ダイジェストサイクルに&lt;/a&gt;関連付けられていることを理解することが重要です。つまり、Promiseの &lt;code&gt;then&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、および &lt;code&gt;finally&lt;/code&gt; のコールバック関数は、ダイジェストが実行された後にのみ呼び出されます。テストでは、スコープの&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt; &lt;code&gt;$apply&lt;/code&gt; 関数を&lt;/a&gt;呼び出すことでダイジェストをトリガーできます。テストにスコープがない場合は、&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$ rootScope&lt;/a&gt;を注入して$ applyを呼び出すことができ &lt;code&gt;$apply&lt;/code&gt; 。&lt;a href=&quot;../api/ng/service/%24q#testing.html&quot;&gt; &lt;code&gt;$q&lt;/code&gt; サービスのドキュメントに&lt;/a&gt;は、約束をテストする例もあります。</target>
        </trans-unit>
        <trans-unit id="2a9b3721c7237b75d3afd4715763f1ab811416bc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;ngHide&lt;/code&gt; expression evaluates to a truthy value then the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is added to the class attribute on the element causing it to become hidden. When falsy, the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is removed from the element causing the element not to appear hidden.</source>
          <target state="translated">とき &lt;code&gt;ngHide&lt;/code&gt; の表現評価さtruthy値に続い &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスは、それが隠されてなることを引き起こし要素のclass属性に追加されます。偽の場合、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスが要素から削除され、要素が非表示に表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="a297ab931629d5a0763f7da3d096f081788fc874" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;ngShow&lt;/code&gt; expression evaluates to a falsy value then the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is added to the class attribute on the element causing it to become hidden. When truthy, the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is removed from the element causing the element not to appear hidden.</source>
          <target state="translated">とき &lt;code&gt;ngShow&lt;/code&gt; の表現評価さfalsy値に続い &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスは、それが隠されてなることを引き起こし要素のclass属性に追加されます。真実の場合、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスは要素から削除され、要素が非表示に表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="4bfc193dcf03be5fdd2e2cdb87b257d2455c123e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;willBreak&lt;/code&gt; service is instantiated, AngularJS will throw an error because of strict mode. This is useful when using a tool like &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; to ensure that all of your application components have annotations.</source>
          <target state="translated">とき &lt;code&gt;willBreak&lt;/code&gt; のサービスがインスタンス化され、AngularJSは理由strictモードのエラーがスローされます。これは、&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt;などのツールを使用して、すべてのアプリケーションコンポーネントに確実に注釈を付けるときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c7c18ae4170652195c550cf6ea2dba7c36696d41" translate="yes" xml:space="preserve">
          <source>When the above example is compiled, the compiler visits every node and looks for directives.</source>
          <target state="translated">上記の例をコンパイルすると、コンパイラはすべてのノードを訪問してディレクティブを探します。</target>
        </trans-unit>
        <trans-unit id="4f3975f977c06069a05aff73f180e1132f61ab9c" translate="yes" xml:space="preserve">
          <source>When the application containing &lt;code&gt;angular_de-de.js&lt;/code&gt; script instead of the generic angular.js script starts, AngularJS is automatically pre-configured with localization rules for the german locale.</source>
          <target state="translated">&lt;code&gt;angular_de-de.js&lt;/code&gt; スクリプトの代わりにangular_de-de.jsスクリプトを含むアプリケーションが起動すると、AngularJSは自動的にドイツ語ロケールのローカリゼーションルールで事前設定されます。</target>
        </trans-unit>
        <trans-unit id="9dc89b2e726de5f584f7c7b43803949e197d4a32" translate="yes" xml:space="preserve">
          <source>When the browser calls into JavaScript the code executes outside the AngularJS execution context, which means that AngularJS is unaware of model modifications. To properly process model modifications the execution has to enter the AngularJS execution context using the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;&lt;code&gt;$apply&lt;/code&gt;&lt;/a&gt; method. Only model modifications which execute inside the &lt;code&gt;$apply&lt;/code&gt; method will be properly accounted for by AngularJS. For example if a directive listens on DOM events, such as &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ng-click&lt;/code&gt;&lt;/a&gt; it must evaluate the expression inside the &lt;code&gt;$apply&lt;/code&gt; method.</source>
          <target state="translated">ブラウザがJavaScriptを呼び出すと、コードはAngularJS実行コンテキストの外部で実行されます。つまり、AngularJSはモデルの変更を認識しません。モデルの変更を適切に処理するには、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;/a&gt;メソッドを使用して、実行がAngularJS実行コンテキストに入る必要があります。 &lt;code&gt;$apply&lt;/code&gt; メソッド内で実行されるモデル変更のみが、AngularJSによって適切に考慮されます。たとえば、ディレクティブが&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ng-click&lt;/code&gt; &lt;/a&gt;などのDOMイベントをリッスンする場合、 &lt;code&gt;$apply&lt;/code&gt; メソッド内の式を評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="c4a0073d43d8ed80547cc46f1c39992f55fe9dcd" translate="yes" xml:space="preserve">
          <source>When the data is returned from the server then the object is an instance of the resource type and all of the non-GET methods are available with &lt;code&gt;$&lt;/code&gt; prefix. This allows you to easily support CRUD operations (create, read, update, delete) on server-side data.</source>
          <target state="translated">データがサーバーから返される場合、オブジェクトはリソースタイプのインスタンスであり、GET以外のすべてのメソッドは &lt;code&gt;$&lt;/code&gt; プレフィックスで使用できます。これにより、サーバー側のデータに対するCRUD操作（作成、読み取り、更新、削除）を簡単にサポートできます。</target>
        </trans-unit>
        <trans-unit id="a1ed9027d5eb4faa2d10f802af6772e8ffd7a989" translate="yes" xml:space="preserve">
          <source>When the expression changes, the previously added classes are removed and only then are the new classes added.</source>
          <target state="translated">式が変更されると、以前に追加されたクラスが削除され、その後に新しいクラスが追加されます。</target>
        </trans-unit>
        <trans-unit id="3821805d3a6f4eb90bb7345d51e2b2e665b5adba" translate="yes" xml:space="preserve">
          <source>When the first argument is a native DOM or jqLite/jQuery element, the function enables / disables animations on this element &lt;em&gt;and all its children&lt;/em&gt;: &lt;code&gt;$animate.enabled(myElement, false)&lt;/code&gt;. You can still use it to re-enable animations for a child element, even if you have disabled them on a parent element. And compared to the &lt;code&gt;classNameFilter&lt;/code&gt;, you can change the animation status at runtime instead of during the config phase.</source>
          <target state="translated">最初の引数がネイティブDOMまたはjqLit​​e / jQuery要素である場合、関数はこの要素&lt;em&gt;とそのすべての子の&lt;/em&gt;アニメーションを有効/無効にします： &lt;code&gt;$animate.enabled(myElement, false)&lt;/code&gt; 。親要素でアニメーションを無効にした場合でも、それを使用して子要素のアニメーションを再度有効にすることができます。また、 &lt;code&gt;classNameFilter&lt;/code&gt; と比較して、構成フェーズではなく実行時にアニメーションのステータスを変更できます。</target>
        </trans-unit>
        <trans-unit id="d2b8c3726e19191da644ea15837b664d0107b25a" translate="yes" xml:space="preserve">
          <source>When the original node and the replace template declare the same directive(s), they will be &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;compiled twice&lt;/a&gt; because the compiler does not deduplicate them. In many cases, this is not noticable, but e.g. &lt;a href=&quot;../directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; will attach &lt;code&gt;$formatters&lt;/code&gt; and &lt;code&gt;$parsers&lt;/code&gt; twice.</source>
          <target state="translated">元のノードと置換テンプレートが同じディレクティブを宣言すると、コンパイラーはそれらを重複排除しないため、それらは&lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;2回コンパイルされ&lt;/a&gt;ます。多くの場合、これは顕著ではありませんが、たとえば&lt;a href=&quot;../directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;$formatters&lt;/code&gt; と &lt;code&gt;$parsers&lt;/code&gt; parsersを2回アタッチします。</target>
        </trans-unit>
        <trans-unit id="7907a149033c64f8dcc623cf80201a3de41eea12" translate="yes" xml:space="preserve">
          <source>When the original node and the replace template declare the same directive(s), they will be &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;compiled twice&lt;/a&gt; because the compiler does not deduplicate them. In many cases, this is not noticeable, but e.g. &lt;a href=&quot;../directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; will attach &lt;code&gt;$formatters&lt;/code&gt; and &lt;code&gt;$parsers&lt;/code&gt; twice.</source>
          <target state="translated">元のノードと置換テンプレートが同じディレクティブを宣言する場合、コンパイラーがそれらを重複排除しないため、それらは&lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;2回コンパイルされ&lt;/a&gt;ます。多くの場合、これは目立ちませんが、たとえば&lt;a href=&quot;../directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;$formatters&lt;/code&gt; と &lt;code&gt;$parsers&lt;/code&gt; parsersを2回アタッチします。</target>
        </trans-unit>
        <trans-unit id="fd9c02d96b63bdc77f81f45e93ccaf214f2bcea7" translate="yes" xml:space="preserve">
          <source>When the replace template has a directive at the root node that uses &lt;a href=&quot;%24compile#-transclude-.html&quot;&gt;&lt;code&gt;transclude: element&lt;/code&gt;&lt;/a&gt;, e.g. &lt;a href=&quot;../directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, the DOM structure or scope inheritance can be incorrect. See the following issues:</source>
          <target state="translated">交換するテンプレートは用途があること、ルートノードの指示がある場合&lt;a href=&quot;%24compile#-transclude-.html&quot;&gt; &lt;code&gt;transclude: element&lt;/code&gt; &lt;/a&gt;、例えば&lt;a href=&quot;../directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; は&lt;/a&gt;、DOM構造やスコープの継承が正しくないことができます。次の問題を参照してください。</target>
        </trans-unit>
        <trans-unit id="9342cec159ce1c208d8802a510ac44a9f06fba8a" translate="yes" xml:space="preserve">
          <source>When the user clicks the &lt;code&gt;x&lt;/code&gt; in the dialog, the directive's &lt;code&gt;close&lt;/code&gt; function is called, thanks to &lt;code&gt;ng-click.&lt;/code&gt; This call to &lt;code&gt;close&lt;/code&gt; on the isolated scope actually evaluates the expression &lt;code&gt;hideDialog(message)&lt;/code&gt; in the context of the original scope, thus running &lt;code&gt;Controller&lt;/code&gt;'s &lt;code&gt;hideDialog&lt;/code&gt; function.</source>
          <target state="translated">ユーザーがダイアログで &lt;code&gt;x&lt;/code&gt; をクリックすると、 &lt;code&gt;ng-click.&lt;/code&gt; おかげで、ディレクティブの &lt;code&gt;close&lt;/code&gt; 関数が呼び出されます。分離されたスコープを &lt;code&gt;close&lt;/code&gt; この呼び出しは、実際には元のスコープのコンテキストで式 &lt;code&gt;hideDialog(message)&lt;/code&gt; を評価するため、 &lt;code&gt;Controller&lt;/code&gt; の &lt;code&gt;hideDialog&lt;/code&gt; 関数が実行されます。</target>
        </trans-unit>
        <trans-unit id="88a38c58d7d80b367d19d209a82c71a873027d20" translate="yes" xml:space="preserve">
          <source>When there are multiple directives defined on a single DOM element, sometimes it is necessary to specify the order in which the directives are applied. The &lt;code&gt;priority&lt;/code&gt; is used to sort the directives before their &lt;code&gt;compile&lt;/code&gt; functions get called. Priority is defined as a number. Directives with greater numerical &lt;code&gt;priority&lt;/code&gt; are compiled first. Pre-link functions are also run in priority order, but post-link functions are run in reverse order. The order of directives with the same priority is undefined. The default priority is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">1つのDOM要素に複数のディレクティブが定義されている場合、ディレクティブが適用される順序を指定する必要がある場合があります。 &lt;code&gt;priority&lt;/code&gt; 彼らの前にディレクティブをソートするために使用され &lt;code&gt;compile&lt;/code&gt; 機能が呼び出されます。優先度は数値として定義されます。数値的 &lt;code&gt;priority&lt;/code&gt; 高いディレクティブが最初にコンパイルされます。プリリンク機能も優先順位で実行されますが、ポストリンク機能は逆の順序で実行されます。同じ優先度のディレクティブの順序は定義されていません。デフォルトの優先度は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="848b2612d0c87e93e24fbe2550122caa0f1c577b" translate="yes" xml:space="preserve">
          <source>When this css rule is loaded by the browser, all html elements (including their children) that are tagged with the &lt;code&gt;ngCloak&lt;/code&gt; directive are hidden. When AngularJS encounters this directive during the compilation of the template it deletes the &lt;code&gt;ngCloak&lt;/code&gt; element attribute, making the compiled element visible.</source>
          <target state="translated">このcssルールがブラウザーによってロードされると、 &lt;code&gt;ngCloak&lt;/code&gt; ディレクティブでタグ付けされたすべてのhtml要素（その子を含む）が非表示になります。 AngularJSは、テンプレートのコンパイル中にこのディレクティブに遭遇すると、 &lt;code&gt;ngCloak&lt;/code&gt; 要素の属性を削除し、コンパイルされた要素を表示します。</target>
        </trans-unit>
        <trans-unit id="2fc91990fa11ae11c26ee5a24353aaebf1125812" translate="yes" xml:space="preserve">
          <source>When this property is set to true (default is &lt;code&gt;false&lt;/code&gt;), the HTML compiler will collect DOM nodes between nodes with the attributes &lt;code&gt;directive-name-start&lt;/code&gt; and &lt;code&gt;directive-name-end&lt;/code&gt;, and group them together as the directive elements. It is recommended that this feature be used on directives which are not strictly behavioral (such as &lt;a href=&quot;../directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt;), and which do not manipulate or replace child nodes (such as &lt;a href=&quot;../directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このプロパティがtrueに設定されている場合（デフォルトは &lt;code&gt;false&lt;/code&gt; ）、HTMLコンパイラーは属性 &lt;code&gt;directive-name-start&lt;/code&gt; と &lt;code&gt;directive-name-end&lt;/code&gt; を持つノード間のDOMノードを収集し、それらをディレクティブ要素としてグループ化します。この機能が（のような厳密に行動されないディレクティブで使用することをお勧めし&lt;a href=&quot;../directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;）、および操作または（のような子ノードを交換しない&lt;a href=&quot;../directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="0235d8d7bcd040be16e73b4398069ebc939ca474" translate="yes" xml:space="preserve">
          <source>When to use directives, controllers or services</source>
          <target state="translated">ディレクティブ、コントローラ、サービスを使用する場合</target>
        </trans-unit>
        <trans-unit id="799c93d8465b6c7356d72990ebf0c31dcca5897e" translate="yes" xml:space="preserve">
          <source>When unit testing (using &lt;a href=&quot;../../ngmock&quot;&gt;ngMock&lt;/a&gt;), it is necessary to call &lt;a href=&quot;../../ngmock/service/%24httpbackend#flush.html&quot;&gt;$httpBackend.flush()&lt;/a&gt; to flush each pending request using trained responses.</source>
          <target state="translated">ユニットテスト（&lt;a href=&quot;../../ngmock&quot;&gt;ngMock&lt;/a&gt;を使用）の場合、トレーニングされた応答を使用して保留中の各要求をフラッシュするために&lt;a href=&quot;../../ngmock/service/%24httpbackend#flush.html&quot;&gt;$ httpBackend.flush（）&lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="866465e227471da7aace7e851aaccc0bf7b51a44" translate="yes" xml:space="preserve">
          <source>When used with standard inputs, the view value will always be a string (which is in some cases parsed into another type, such as a &lt;code&gt;Date&lt;/code&gt; object for &lt;code&gt;input[date]&lt;/code&gt;.) However, custom controls might also pass objects to this method. In this case, we should make a copy of the object before passing it to &lt;code&gt;$setViewValue&lt;/code&gt;. This is because &lt;code&gt;ngModel&lt;/code&gt; does not perform a deep watch of objects, it only looks for a change of identity. If you only change the property of the object then ngModel will not realize that the object has changed and will not invoke the &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$validators&lt;/code&gt; pipelines. For this reason, you should not change properties of the copy once it has been passed to &lt;code&gt;$setViewValue&lt;/code&gt;. Otherwise you may cause the model value on the scope to change incorrectly.</source>
          <target state="translated">標準入力で使用する場合、ビューの値は常に文字列になります（場合によっては、 &lt;code&gt;input[date]&lt;/code&gt; &lt;code&gt;Date&lt;/code&gt; オブジェクトなど、別のタイプに解析されます）。ただし、カスタムコントロールもこのメソッドにオブジェクトを渡す場合があります。この場合、 &lt;code&gt;$setViewValue&lt;/code&gt; に渡す前にオブジェクトのコピーを作成する必要があります。これは、 &lt;code&gt;ngModel&lt;/code&gt; がオブジェクトの詳細な監視を実行せず、アイデンティティの変更のみを探すためです。オブジェクトのプロパティを変更するだけの場合、ngModelはオブジェクトが変更されたことを認識せず、 &lt;code&gt;$parsers&lt;/code&gt; および &lt;code&gt;$validators&lt;/code&gt; パイプラインを呼び出しません。このため、コピーが渡された後は、コピーのプロパティを変更しないでください。 &lt;code&gt;$setViewValue&lt;/code&gt; 。そうしないと、スコープのモデル値が誤って変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc64a729cd2e490dc065221b82d1cb45ab84daeb" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt;, you can often avoid some boilerplate, by passing the resolved route dependencies directly to the component. Since 1.5, ngRoute automatically assigns the resolves to the route scope property &lt;code&gt;$resolve&lt;/code&gt; (you can also configure the property name via &lt;code&gt;resolveAs&lt;/code&gt;). When using components, you can take advantage of this and pass resolves directly into your component without creating an extra route controller:</source>
          <target state="translated">&lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$ routeProvider&lt;/a&gt;を使用する場合、解決されたルートの依存関係をコンポーネントに直接渡すことで、ボイラープレートを回避できることがよくあります。1.5以降、ngRouteはルートスコーププロパティ &lt;code&gt;$resolve&lt;/code&gt; 解決を自動的に割り当てます（ &lt;code&gt;resolveAs&lt;/code&gt; を介してプロパティ名を構成することもできます）。コンポーネントを使用する場合、これを利用して、追加のルートコントローラーを作成することなく、解決をコンポーネントに直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="9ba0f63480183afb2de1595c7ae8b25bef84a87f" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; and / or &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt; to toggle between elements, it can happen that both the element to show and the element to hide are visible for a very short time.</source>
          <target state="translated">使用する場合&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt;及び/又は&lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; の&lt;/a&gt;要素を切り替えるためには、非表示にすることを示すための要素と要素の両方を発生する可能性が非常に短い時間のために表示されています。</target>
        </trans-unit>
        <trans-unit id="2d06d724db84ddaaec9c56ac07d4b9edf55b4c22" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;$location&lt;/code&gt; service during testing, you are outside of the angular's &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; life-cycle. This means it's your responsibility to call &lt;code&gt;scope.$apply()&lt;/code&gt;.</source>
          <target state="translated">テスト中に &lt;code&gt;$location&lt;/code&gt; サービスを使用すると、Angleの&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;スコープの&lt;/a&gt;ライフサイクルの範囲外になります。つまり、 &lt;code&gt;scope.$apply()&lt;/code&gt; を呼び出すのはユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="308def7ce1040ce8f8e90c771104d822bf9c454e" translate="yes" xml:space="preserve">
          <source>When using a directive that takes an expression:</source>
          <target state="translated">式を取るディレクティブを使う場合</target>
        </trans-unit>
        <trans-unit id="9af3cc5f2e0ae3fda308cd5ccc2df4b745158ea7" translate="yes" xml:space="preserve">
          <source>When using a directive with bidirectional binding and parameters that will not change:</source>
          <target state="translated">双方向バインディングとパラメータが変更されないディレクティブを使用する場合。</target>
        </trans-unit>
        <trans-unit id="ce320691763ef56ed7bc8d8107895e1c4a8418eb" translate="yes" xml:space="preserve">
          <source>When using this type of annotation, take care to keep the annotation array in sync with the parameters in the function declaration.</source>
          <target state="translated">このタイプのアノテーションを使用する場合は、関数宣言のパラメータとアノテーション配列が同期していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0788f3e044fd333f645148040ef0b7a3426b7c04" translate="yes" xml:space="preserve">
          <source>When you call a transclude function it returns a DOM fragment that is pre-bound to a &lt;strong&gt;transclusion scope&lt;/strong&gt;. This scope is special, in that it is a child of the directive's scope (and so gets destroyed when the directive's scope gets destroyed) but it inherits the properties of the scope from which it was taken.</source>
          <target state="translated">transclude関数を呼び出すと、&lt;strong&gt;transclusionスコープに&lt;/strong&gt;事前バインドされたDOMフラグメントが返されます。このスコープは特別です。ディレクティブのスコープの子であり（そのため、ディレクティブのスコープが破棄されると破棄されます）、スコープは元のスコープのプロパティを継承します。</target>
        </trans-unit>
        <trans-unit id="adc8cb01135df3a93cfcf63923b01b0b4bcfd2e2" translate="yes" xml:space="preserve">
          <source>When you call a transclusion function you can pass in a &lt;strong&gt;clone attach function&lt;/strong&gt;. This function accepts two parameters, &lt;code&gt;function(clone, scope) { ... }&lt;/code&gt;, where the &lt;code&gt;clone&lt;/code&gt; is a fresh compiled copy of your transcluded content and the &lt;code&gt;scope&lt;/code&gt; is the newly created transclusion scope, which the clone will be linked to.</source>
          <target state="translated">トランスクルージョン関数を呼び出すときは、&lt;strong&gt;クローンアタッチ関数を&lt;/strong&gt;渡すことができ&lt;strong&gt;ます&lt;/strong&gt;。この関数は2つのパラメーター &lt;code&gt;function(clone, scope) { ... }&lt;/code&gt; 受け入れます。ここで、 &lt;code&gt;clone&lt;/code&gt; はトランスクルードされたコンテンツの新しくコンパイルされたコピーであり、 &lt;code&gt;scope&lt;/code&gt; は新しく作成されたトランスクルージョンスコープであり、クローンはそれにリンクされます。</target>
        </trans-unit>
        <trans-unit id="c0d63bac8ebb474dd0a18c50994a65c24b136a76" translate="yes" xml:space="preserve">
          <source>When you call the &lt;code&gt;absUrl()&lt;/code&gt; method, the returned value is a full url with its segments encoded.</source>
          <target state="translated">&lt;code&gt;absUrl()&lt;/code&gt; メソッドを呼び出すと、戻り値はセグメントがエンコードされた完全なURLになります。</target>
        </trans-unit>
        <trans-unit id="96856534f37714d279ae2c0dc01f3e86884722a6" translate="yes" xml:space="preserve">
          <source>When you call the &lt;code&gt;url()&lt;/code&gt; method, the returned value is path, search and hash, in the form &lt;code&gt;/path?search=a&amp;amp;b=c#hash&lt;/code&gt;. The segments are encoded as well.</source>
          <target state="translated">&lt;code&gt;url()&lt;/code&gt; メソッドを呼び出すと、戻り値は &lt;code&gt;/path?search=a&amp;amp;b=c#hash&lt;/code&gt; の形式のパス、検索、ハッシュです。セグメントもエンコードされます。</target>
        </trans-unit>
        <trans-unit id="8e2a897977982bc35240ddd6d90240a08cedadc8" translate="yes" xml:space="preserve">
          <source>When you request a service, the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt; is responsible for finding the correct &lt;strong&gt;service provider&lt;/strong&gt;, instantiating it and then calling its &lt;code&gt;$get&lt;/code&gt;&lt;strong&gt;service factory&lt;/strong&gt; function to get the instance of the &lt;strong&gt;service&lt;/strong&gt;.</source>
          <target state="translated">あなたがサービスを要求すると、&lt;a href=&quot;%24injector&quot;&gt;$インジェクタは&lt;/a&gt;正しい見つけるための責任がある&lt;strong&gt;サービスプロバイダを&lt;/strong&gt;、それをインスタンス化して、その呼び出し &lt;code&gt;$get&lt;/code&gt; &lt;strong&gt;サービス工場&lt;/strong&gt;のインスタンスを取得する機能を&lt;strong&gt;サービスします&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="aa6de81ecf4cb6e26917389d536bee77c7c57932" translate="yes" xml:space="preserve">
          <source>When you use HTML5 history API mode, you will not need special hashbang links. All you have to do is specify regular URL links, such as: &lt;code&gt;&amp;lt;a href=&quot;/some?foo=bar&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">HTML5履歴APIモードを使用する場合、特別なハッシュバングリンクは必要ありません。次のような通常のURLリンクを指定するだけです： &lt;code&gt;&amp;lt;a href=&quot;/some?foo=bar&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d89b9c3c7ad0e72f71a638e459b847a4a1b6c92" translate="yes" xml:space="preserve">
          <source>Whenever an animation is started, &lt;code&gt;ngAnimate&lt;/code&gt; applies the &lt;code&gt;ng-animate&lt;/code&gt; class to the element for the whole duration of the animation. By applying CSS transition / animation styling to that class, you can skip an animation:</source>
          <target state="translated">アニメーションが開始されるたびに、 &lt;code&gt;ngAnimate&lt;/code&gt; は &lt;code&gt;ng-animate&lt;/code&gt; クラスをアニメーションの全期間にわたって要素に適用します。そのクラスにCSSトランジション/アニメーションスタイルを適用することで、アニメーションをスキップできます。</target>
        </trans-unit>
        <trans-unit id="986037565cd6579ad9d0ba68772c304b34c53a56" translate="yes" xml:space="preserve">
          <source>Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter and leave animation is triggered for each particular element bound to the &lt;code&gt;ngMessage&lt;/code&gt; directive.</source>
          <target state="translated">内部メッセージが添付される（表示されるようになる）か削除される（非表示になる）場合は &lt;code&gt;ngMessage&lt;/code&gt; 、ngMessageディレクティブにバインドされた特定の各要素に対してEnterおよびLeaveアニメーションがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="65ee722d839e36aed52fa460253fb75029459549" translate="yes" xml:space="preserve">
          <source>Whenever the &lt;code&gt;ngMessages&lt;/code&gt; directive contains one or more visible messages then the &lt;code&gt;.ng-active&lt;/code&gt; CSS class will be added to the element. The &lt;code&gt;.ng-inactive&lt;/code&gt; CSS class will be applied when there are no messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can hook into the animations whenever these classes are added/removed.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; ディレクティブに1つ以上の可視メッセージが含まれている場合は常に、 &lt;code&gt;.ng-active&lt;/code&gt; CSSクラスが要素に追加されます。 &lt;code&gt;.ng-inactive&lt;/code&gt; 現在メッセージがないときCSSクラスが適用されます。したがって、CSSトランジションとキーフレーム、およびJavaScriptアニメーションは、これらのクラスが追加/削除されるたびにアニメーションにフックできます。</target>
        </trans-unit>
        <trans-unit id="7960d3c2618b44613a36486dbb58d967ec476048" translate="yes" xml:space="preserve">
          <source>Whenever your application makes requests to a server there are potential security issues that need to be blocked. Both server and the client must cooperate in order to eliminate these threats. AngularJS comes pre-configured with strategies that address these issues, but for this to work backend server cooperation is required.</source>
          <target state="translated">アプリケーションがサーバにリクエストを出すときはいつでも、ブロックする必要がある潜在的なセキュリティ問題があります。これらの脅威を排除するためには、サーバーとクライアントの両方が協力しなければなりません。AngularJSにはこれらの問題に対処するための戦略があらかじめ設定されていますが、バックエンドサーバーの協力が必要です。</target>
        </trans-unit>
        <trans-unit id="460854c303f2e0076b9be3c2cbeafbd2741f25c0" translate="yes" xml:space="preserve">
          <source>Where the compiler has created a new scope, the scope and either &lt;code&gt;ng-scope&lt;/code&gt; or &lt;code&gt;ng-isolated-scope&lt;/code&gt; CSS class are attached to the corresponding element. These scope references can then be accessed via &lt;code&gt;element.scope()&lt;/code&gt; and &lt;code&gt;element.isolateScope()&lt;/code&gt;.</source>
          <target state="translated">コンパイラが新しいスコープを作成した場合、スコープと &lt;code&gt;ng-scope&lt;/code&gt; または &lt;code&gt;ng-isolated-scope&lt;/code&gt; CSSクラスのいずれかが対応する要素にアタッチされます。これらのスコープ参照には、 &lt;code&gt;element.scope()&lt;/code&gt; および &lt;code&gt;element.isolateScope()&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="750881ed39d8d4dbbabc8a525246358035450087" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;ngInclude&lt;/code&gt; should call &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll&lt;/a&gt; to scroll the viewport after the content is loaded.</source>
          <target state="translated">かどうか &lt;code&gt;ngInclude&lt;/code&gt; は、呼び出す必要があります&lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScrollを&lt;/a&gt;コンテンツがロードされた後、ビューポートをスクロールします。</target>
        </trans-unit>
        <trans-unit id="95e30e407f19a0df15c35e9a06f966233d1296da" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;ngView&lt;/code&gt; should call &lt;a href=&quot;../../ng/service/%24anchorscroll&quot;&gt;$anchorScroll&lt;/a&gt; to scroll the viewport after the view is updated.</source>
          <target state="translated">かどうか &lt;code&gt;ngView&lt;/code&gt; は、呼び出す必要があります&lt;a href=&quot;../../ng/service/%24anchorscroll&quot;&gt;$ anchorScrollを&lt;/a&gt;ビューが更新された後、ビューポートをスクロールします。</target>
        </trans-unit>
        <trans-unit id="b0799f71a28a8d4e41670e7cf10ec92b54b2fb4f" translate="yes" xml:space="preserve">
          <source>Whether or not to ignore the exception when the request fails or the template is empty</source>
          <target state="translated">リクエストが失敗した場合やテンプレートが空の場合に例外を無視するかどうか</target>
        </trans-unit>
        <trans-unit id="7a494ff3bb52752d0bc384651bd7d37989465cdc" translate="yes" xml:space="preserve">
          <source>Whether the current state is valid (true), invalid (false), pending (undefined), or skipped (null). Pending is used for unfulfilled &lt;code&gt;$asyncValidators&lt;/code&gt;. Skipped is used by AngularJS when validators do not run because of parse errors and when &lt;code&gt;$asyncValidators&lt;/code&gt; do not run because any of the &lt;code&gt;$validators&lt;/code&gt; failed.</source>
          <target state="translated">現在の状態が有効（true）、無効（false）、保留（undefined）、またはスキップ（null）のいずれであるか。保留は、満たされていない &lt;code&gt;$asyncValidators&lt;/code&gt; 使用されます。Skippedは、解析エラーのためにバリデーターが実行されない場合や、 &lt;code&gt;$validators&lt;/code&gt; いずれかが失敗したために &lt;code&gt;$asyncValidators&lt;/code&gt; が実行されない場合に、AngularJSによって使用されます。</target>
        </trans-unit>
        <trans-unit id="a7d197b14bb22dde26e7930ba72573db4afd74e5" translate="yes" xml:space="preserve">
          <source>Whether the injector should be in strict mode, which disallows argument name annotation inference.</source>
          <target state="translated">インジェクタが厳密モードであるべきかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="64739ed39c37793d5116ffd8cf13bce51648999d" translate="yes" xml:space="preserve">
          <source>Whether to generate an error when a rejected promise is not handled.</source>
          <target state="translated">拒否されたプロミスを処理しない場合にエラーを発生させるかどうか。</target>
        </trans-unit>
        <trans-unit id="04340f702909efe15652bdcae7630aa8d0a6c6a3" translate="yes" xml:space="preserve">
          <source>Which directives support animations?</source>
          <target state="translated">どのディレクティブがアニメーションをサポートしていますか?</target>
        </trans-unit>
        <trans-unit id="202e1367c10ec97bf55bcb003c4e2b1a5fb4d701" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;ngMessages&lt;/code&gt; will by default only display one error element at a time, the &lt;code&gt;ng-messages-multiple&lt;/code&gt; attribute can be applied to the &lt;code&gt;ngMessages&lt;/code&gt; container element to cause it to display all applicable error messages at once:</source>
          <target state="translated">一方で &lt;code&gt;ngMessages&lt;/code&gt; は、デフォルトでは一度に一つの誤差要素が表示されます、 &lt;code&gt;ng-messages-multiple&lt;/code&gt; 属性がに適用することができ &lt;code&gt;ngMessages&lt;/code&gt; それが一度に適用されるすべてのエラーメッセージを表示させるためにコンテナエレメント：</target>
        </trans-unit>
        <trans-unit id="b61c2bda7d6957ce6223a10bb226a52513d7256a" translate="yes" xml:space="preserve">
          <source>While a plural category may match many numbers (for example, in en-US locale, &quot;other&quot; can match any number that is not 1), an explicit number rule can only match one number. For example, the explicit number rule for &quot;3&quot; matches the number 3. There are examples of plural categories and explicit number rules throughout the rest of this documentation.</source>
          <target state="translated">複数のカテゴリは多くの数字にマッチしますが (例えば、米国ロケールでは &quot;other&quot; は 1 以外の数字にもマッチします)、明示的な数字の規則では 1 つの数字にしかマッチしません。例えば、&quot;3 &quot;の明示的な数値ルールは3にマッチします。このドキュメントの残りの部分には、複数のカテゴリと明示的な数の規則の例があります。</target>
        </trans-unit>
        <trans-unit id="65f1a4c7640c97be8f83de892ee1d05acd23dd84" translate="yes" xml:space="preserve">
          <source>While it is recommended to register injectables directly with the &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module API&lt;/a&gt;, it is also possible to register services, directives etc. by injecting &lt;a href=&quot;../api/auto/service/%24provide&quot;&gt;$provide&lt;/a&gt; or the individual service providers into the config function:</source>
          <target state="translated">インジェクタブルを&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールAPIに&lt;/a&gt;直接登録することをお勧めしますが、&lt;a href=&quot;../api/auto/service/%24provide&quot;&gt;$ provide&lt;/a&gt;または個々のサービスプロバイダーをconfig関数に挿入することで、サービスやディレクティブなどを登録することもできます。</target>
        </trans-unit>
        <trans-unit id="79ae9ea22fa5db92c007dbd07a4fbcab0aa55fb4" translate="yes" xml:space="preserve">
          <source>While it's possible to bootstrap more than one AngularJS application per page, we don't actively test against this scenario. It's possible that you'll run into problems, especially with complex apps, so caution is advised.</source>
          <target state="translated">1ページに複数のAngularJSアプリケーションをブートストラップすることは可能ですが、このシナリオについては積極的にテストしていません。特に複雑なアプリでは問題に遭遇する可能性がありますので、注意が必要です。</target>
        </trans-unit>
        <trans-unit id="a82dee00b39d8daed1da5528800a8c7ddbde426f" translate="yes" xml:space="preserve">
          <source>While the constructor-style use is supported, not all of the supporting methods from ES6 promises are available yet.</source>
          <target state="translated">コンストラクタ形式での使用はサポートされていますが、ES6のプロミスでサポートされているメソッドのすべてがまだ利用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="6cf978fc045daec3f25c0b99dc31760cd612ada9" translate="yes" xml:space="preserve">
          <source>While the example above is simple, it will not scale to large applications. Instead we recommend that you break your application to multiple modules like this:</source>
          <target state="translated">上記の例はシンプルですが、大規模なアプリケーションには対応できません。代わりに、アプリケーションをこのように複数のモジュールに分割することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fc6d8b80151efa65b509365d35de859e6d9b813c" translate="yes" xml:space="preserve">
          <source>While this may seem obvious it can be very difficult to call an individual function on a typical project. The reason is that the developers often mix concerns resulting in a piece of code which does everything. It makes an XHR request, it sorts the response data, and then it manipulates the DOM.</source>
          <target state="translated">これは明白に見えるかもしれませんが、典型的なプロジェクトでは個々の関数を呼び出すのは非常に難しいかもしれません。その理由は、開発者はしばしば懸念事項を混ぜ合わせてしまい、結果的にすべてを実行するコードになってしまうからです。これは XHR リクエストを行い、レスポンスデータをソートし、DOM を操作します。</target>
        </trans-unit>
        <trans-unit id="5d61d9a0a6e161682e0342ed06bfaa12eee85ebc" translate="yes" xml:space="preserve">
          <source>Why Dependency Injection?</source>
          <target state="translated">なぜ依存性注入なのか?</target>
        </trans-unit>
        <trans-unit id="669ff9e2a6793d3b75b94d0260040d47b3cbc679" translate="yes" xml:space="preserve">
          <source>Why is !important used?</source>
          <target state="translated">importantはなぜ使われているのですか?</target>
        </trans-unit>
        <trans-unit id="4616c58d9adc2d069251d8014e9dc1d4fb26a27f" translate="yes" xml:space="preserve">
          <source>Why mixing interpolation and expressions is bad practice:</source>
          <target state="translated">補間と表現を混ぜるのが悪い理由</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="fe732beca5e5d6794c8f103701bc47f9200286b7" translate="yes" xml:space="preserve">
          <source>Wijmo</source>
          <target state="translated">Wijmo</target>
        </trans-unit>
        <trans-unit id="4e29d9f8eb0462f006ae4c5ebd1af4e619375ebd" translate="yes" xml:space="preserve">
          <source>Window (&lt;code&gt;_blank|_self|_parent|_top&lt;/code&gt;) or named frame to open links in.</source>
          <target state="translated">リンクを開くウィンドウ（ &lt;code&gt;_blank|_self|_parent|_top&lt;/code&gt; ）または名前付きフレーム。</target>
        </trans-unit>
        <trans-unit id="fe79e3ee2d8eb6ed6e7fd0f621cd5a2c2e7958e5" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;ng-attr-cx&lt;/code&gt; you can work around this problem.</source>
          <target state="translated">で &lt;code&gt;ng-attr-cx&lt;/code&gt; あなたはこの問題を回避することができます。</target>
        </trans-unit>
        <trans-unit id="92df544bb7dbfe3ed04da3c434faef5602b4df3f" translate="yes" xml:space="preserve">
          <source>With AngularJS, we try to make it easy for you to do the right thing. For your XHR requests, we provide dependency injection, so your requests can be simulated. For the DOM, we abstract it, so you can test your model without having to manipulate the DOM directly. Your tests can then assert that the data has been sorted without having to create or look at the state of the DOM or to wait for any XHR requests to return data. The individual sort function can be tested in isolation.</source>
          <target state="translated">AngularJSでは、あなたが正しいことを簡単にできるように心がけています。XHRリクエストには依存性インジェクションを提供しているので、リクエストをシミュレートすることができます。DOMについては、DOMを抽象化しているので、DOMを直接操作しなくてもモデルをテストすることができます。テストでは、DOM を作成したり、DOM の状態を見たり、XHR リクエストがデータを返すのを待つことなく、データがソートされたことを主張することができます。個々のソート関数を分離してテストすることができます。</target>
        </trans-unit>
        <trans-unit id="c904b9835f56cd4b8010fe7952def1410fb5ce78" translate="yes" xml:space="preserve">
          <source>With a custom directive, you can add your own validation functions to the &lt;code&gt;$validators&lt;/code&gt; object on the &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;ngModelController&lt;/code&gt;&lt;/a&gt;. To get a hold of the controller, you require it in the directive as shown in the example below.</source>
          <target state="translated">カスタムディレクティブを使用して、独自の検証関数を&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;ngModelController&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;$validators&lt;/code&gt; オブジェクトに追加できます。コントローラを保持するには、以下の例に示すように、ディレクティブでそれを必要とします。</target>
        </trans-unit>
        <trans-unit id="a60123e9d2c9b6a9ca6c91377139ec6cb84cf751" translate="yes" xml:space="preserve">
          <source>With a single &lt;code&gt;boolean&lt;/code&gt; argument, it enables / disables animations globally: &lt;code&gt;$animate.enabled(false)&lt;/code&gt; disables all animations in your app.</source>
          <target state="translated">単一の &lt;code&gt;boolean&lt;/code&gt; 引数を使用して、アニメーションをグローバルに有効/無効にします。 &lt;code&gt;$animate.enabled(false)&lt;/code&gt; は、アプリ内のすべてのアニメーションを無効にします。</target>
        </trans-unit>
        <trans-unit id="0274004d1046e354f1b8c888093840ce67dd401a" translate="yes" xml:space="preserve">
          <source>With great power comes great responsibility</source>
          <target state="translated">権力には責任が伴う</target>
        </trans-unit>
        <trans-unit id="e5f24a86f871dcff0ad29cacea167d5d0ae19285" translate="yes" xml:space="preserve">
          <source>With ngStrictDi</source>
          <target state="translated">ngStrictDiで</target>
        </trans-unit>
        <trans-unit id="6bc76b8300fa6874bf5e467e1724761bef42ad90" translate="yes" xml:space="preserve">
          <source>With that you're ready to get started!</source>
          <target state="translated">これで準備が整いました。</target>
        </trans-unit>
        <trans-unit id="7169bbb61c830c1a8ef9311d0bf2f73b129f4feb" translate="yes" xml:space="preserve">
          <source>With the options &lt;code&gt;timeSecondsFormat&lt;/code&gt; and &lt;code&gt;timeStripZeroSeconds&lt;/code&gt; it is possible to adjust the value that is displayed in the control. Note that browsers may apply their own formatting in the user interface.</source>
          <target state="translated">オプション &lt;code&gt;timeSecondsFormat&lt;/code&gt; および &lt;code&gt;timeStripZeroSeconds&lt;/code&gt; を使用すると、コントロールに表示される値を調整できます。ブラウザは、ユーザーインターフェイスで独自のフォーマットを適用する場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="87980928967a29927ee2e7486ea2f236908cb941" translate="yes" xml:space="preserve">
          <source>With these generated CSS class names present on the element at the time, AngularJS automatically figures out whether to perform a CSS and/or JavaScript animation. Note that you can't have both CSS and JavaScript animations based on the same CSS class. See &lt;a href=&quot;../api/nganimate#css-js-animations-together.html&quot;&gt;here&lt;/a&gt; for more details.</source>
          <target state="translated">これらの生成されたCSSクラス名がその時点で要素に存在する場合、AngularJSはCSSやJavaScriptアニメーションを実行するかどうかを自動的に判断します。同じCSSクラスに基づくCSSアニメーションとJavaScriptアニメーションの両方を持つことはできないことに注意してください。詳細は&lt;a href=&quot;../api/nganimate#css-js-animations-together.html&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bc6fe5b6fbbc1fe7d11a4ca05c3c7616c7423766" translate="yes" xml:space="preserve">
          <source>Within this element we then create separate elements for each of the possible errors that &lt;code&gt;myField&lt;/code&gt; could have. The &lt;code&gt;ngMessage&lt;/code&gt; attribute is used to declare which element(s) will appear for which error - for example, setting &lt;code&gt;ng-message=&quot;required&quot;&lt;/code&gt; specifies that this particular element should be displayed when there is no value present for the required field &lt;code&gt;myField&lt;/code&gt; (because the key &lt;code&gt;required&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; in the object &lt;code&gt;myForm.myField.$error&lt;/code&gt;).</source>
          <target state="translated">次に、この要素内で、 &lt;code&gt;myField&lt;/code&gt; で発生する可能性のあるエラーごとに個別の要素を作成します。 &lt;code&gt;ngMessage&lt;/code&gt; の属性は、要素（複数可）は、エラーのために表示される宣言するために使用されている-例えば、設定 &lt;code&gt;ng-message=&quot;required&quot;&lt;/code&gt; に必要なフィールドに値が存在しない場合、この特定の要素が表示されるように指定し &lt;code&gt;myField&lt;/code&gt; であるために（ &lt;code&gt;required&lt;/code&gt; キーは、オブジェクト &lt;code&gt;myForm.myField.$error&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b3b7a4861859ba576e767644c3fb5fc7d5721768" translate="yes" xml:space="preserve">
          <source>Wrap the contents of the directive's element (if &lt;code&gt;transclude&lt;/code&gt; is true).</source>
          <target state="translated">ディレクティブの要素の内容をラップします（ &lt;code&gt;transclude&lt;/code&gt; がtrueの場合）。</target>
        </trans-unit>
        <trans-unit id="72722f4c797732533ba7026d7c3df1c24de1bdad" translate="yes" xml:space="preserve">
          <source>Wraps a raw DOM element or HTML string as a &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; element.</source>
          <target state="translated">生のDOM要素またはHTML文字列を&lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;要素としてラップします。</target>
        </trans-unit>
        <trans-unit id="b8c1eb08ad7710dac2fd9548e4107a97c34b4ec5" translate="yes" xml:space="preserve">
          <source>Wraps a raw DOM element or HTML string as a &lt;a href=&quot;https://jquery.com&quot;&gt;jQuery&lt;/a&gt; element.</source>
          <target state="translated">生のDOM要素またはHTML文字列を&lt;a href=&quot;https://jquery.com&quot;&gt;jQuery&lt;/a&gt;要素としてラップします。</target>
        </trans-unit>
        <trans-unit id="f548d42d1d697e0d1a7c80979624da1857e7b6ec" translate="yes" xml:space="preserve">
          <source>Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise. This is useful when you are dealing with an object that might or might not be a promise, or if the promise comes from a source that can't be trusted.</source>
          <target state="translated">値であるかもしれないオブジェクトや (サードパーティの)その時に使用可能なプロミスを $q プロミスにラップします。これは、プロミスであるかもしれない、あるいはプロミスではないかもしれないオブジェクトを扱う場合や、プロミスが信頼できないソースから来ている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="112f691d9f7b0f7f4199996d2ace4cb10376c810" translate="yes" xml:space="preserve">
          <source>Write a debug message</source>
          <target state="translated">デバッグメッセージを書く</target>
        </trans-unit>
        <trans-unit id="7c443f819e3b3e21bba19ef5c0641ab5f0b1a0f1" translate="yes" xml:space="preserve">
          <source>Write a log message</source>
          <target state="translated">ログメッセージを書く</target>
        </trans-unit>
        <trans-unit id="0c268d45897d3597f5960cb0d5bfc9a80c50dc1b" translate="yes" xml:space="preserve">
          <source>Write a warning message</source>
          <target state="translated">警告メッセージを書く</target>
        </trans-unit>
        <trans-unit id="45f921887871d529540460a3b822817a4d735c76" translate="yes" xml:space="preserve">
          <source>Write an error message</source>
          <target state="translated">エラーメッセージを書く</target>
        </trans-unit>
        <trans-unit id="7f78db32dc4888f39b2190a2a882a95f3b231138" translate="yes" xml:space="preserve">
          <source>Write an information message</source>
          <target state="translated">情報メッセージを書く</target>
        </trans-unit>
        <trans-unit id="6933a8aedae8c9e62cf74573670c5a9e472a670e" translate="yes" xml:space="preserve">
          <source>Writing Unit Tests that use $http</source>
          <target state="translated">http を使用したユニットテストの記述</target>
        </trans-unit>
        <trans-unit id="c4a1cc5507181a8c87b6fee1ad4eff525f395654" translate="yes" xml:space="preserve">
          <source>Writing your own filter is very easy: just register a new filter factory function with your module. Internally, this uses the &lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt;&lt;code&gt;filterProvider&lt;/code&gt;&lt;/a&gt;. This factory function should return a new filter function which takes the input value as the first argument. Any filter arguments are passed in as additional arguments to the filter function.</source>
          <target state="translated">独自のフィルターの作成は非常に簡単です。新しいフィルターファクトリー関数をモジュールに登録するだけです。内部的には、これは&lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt; &lt;code&gt;filterProvider&lt;/code&gt; を&lt;/a&gt;使用します。このファクトリ関数は、入力値を最初の引数として取る新しいフィルター関数を返す必要があります。フィルター引数はすべて、追加の引数としてフィルター関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="b5466fc435a09ee3e765475bc830ed969868c046" translate="yes" xml:space="preserve">
          <source>XSRF</source>
          <target state="translated">XSRF</target>
        </trans-unit>
        <trans-unit id="8fff039853f5c2bbb8a28d056b579c7dcb7d137f" translate="yes" xml:space="preserve">
          <source>YES</source>
          <target state="translated">YES</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="0682716a71bb47f20dfc13ef2209287ea8964cf9" translate="yes" xml:space="preserve">
          <source>Yes (binds to controller)</source>
          <target state="translated">あり(コントローラにバインド</target>
        </trans-unit>
        <trans-unit id="78db440be0ac76a9abe2906ac933955bbdf8e6bb" translate="yes" xml:space="preserve">
          <source>Yes (default &lt;code&gt;function() {}&lt;/code&gt;)</source>
          <target state="translated">はい（デフォルト &lt;code&gt;function() {}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="20405af6249fcf2f3cbc25821788782c0960a9d3" translate="yes" xml:space="preserve">
          <source>Yes (default: &lt;code&gt;$ctrl&lt;/code&gt;)</source>
          <target state="translated">はい（デフォルト： &lt;code&gt;$ctrl&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8fa6f7a1c6faa45037571019b52212a0c4d263d5" translate="yes" xml:space="preserve">
          <source>Yes (default: false)</source>
          <target state="translated">はい (デフォルト:false)</target>
        </trans-unit>
        <trans-unit id="b2de96ae5856057391d617d6b0650fb35486be33" translate="yes" xml:space="preserve">
          <source>Yes (deprecated)</source>
          <target state="translated">はい(非推奨</target>
        </trans-unit>
        <trans-unit id="3bcedb4f835fb2143087b97ec15aa4e83fe50624" translate="yes" xml:space="preserve">
          <source>Yes, injectable</source>
          <target state="translated">はい、注入可能</target>
        </trans-unit>
        <trans-unit id="9214e124b8d46401dfc684da1de9c5dd4e767005" translate="yes" xml:space="preserve">
          <source>Yes, you can. However, this is strongly discouraged. SCE gives you a lot of security benefits for little coding overhead. It will be much harder to take an SCE disabled application and either secure it on your own or enable SCE at a later stage. It might make sense to disable SCE for cases where you have a lot of existing code that was written before SCE was introduced and you're migrating them a module at a time. Also do note that this is an app-wide setting, so if you are writing a library, you will cause security bugs applications using it.</source>
          <target state="translated">はい、できます。しかし、これは強くお勧めしません。SCE はコーディングのオーバーヘッドが少なくて済むため、多くのセキュリティ上の利点があります。SCE を無効にしたアプリケーションを利用して、自分でセキュリティを確保したり、後から SCE を有効にしたりするのは、はるかに難しいでしょう。SCE が導入される前に書かれた既存のコードが多く、モジュールごとに移行しているような場合には、SCE を無効にすることは理にかなっているかもしれません。また、これはアプリ全体の設定なので、ライブラリを書いている場合は、それを使ったアプリケーションでセキュリティバグが発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="f995d213639053fe3fe26c3f46a1783739820dec" translate="yes" xml:space="preserve">
          <source>You also need to include ES6 shims for browsers that do not support ES6 code (Internet Explorer, iOs &amp;lt; 8, Android &amp;lt; 5.0, Windows Mobile &amp;lt; 10):</source>
          <target state="translated">また、ES6コードをサポートしないブラウザー（Internet Explorer、iOs &amp;lt;8、Android &amp;lt;5.0、Windows Mobile &amp;lt;10）のES6シムを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="1c96c31bec32911ba04c5e3d3bed2875c7164a10" translate="yes" xml:space="preserve">
          <source>You can add an &lt;code&gt;ng-strict-di&lt;/code&gt; directive on the same element as &lt;code&gt;ng-app&lt;/code&gt; to opt into strict DI mode:</source>
          <target state="translated">&lt;code&gt;ng-strict-di&lt;/code&gt; ディレクティブを &lt;code&gt;ng-app&lt;/code&gt; と同じ要素に追加して、厳密なDIモードを選択できます。</target>
        </trans-unit>
        <trans-unit id="88bbb3b1f6ce9bf8a5d73da2df05cc9c51c2659c" translate="yes" xml:space="preserve">
          <source>You can also access the &lt;code&gt;scope&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; in your templates:</source>
          <target state="translated">テンプレートで &lt;code&gt;this&lt;/code&gt; 使用して &lt;code&gt;scope&lt;/code&gt; アクセスすることもできます。</target>
        </trans-unit>
        <trans-unit id="d51687a76b88f9824bb332d32231a33249f7bc8a" translate="yes" xml:space="preserve">
          <source>You can also include the locale specific js file in the index.html page. For example, if one client requires German locale, you would serve index_de-de.html which will look something like this:</source>
          <target state="translated">ロケールに特化したjsファイルをindex.htmlページに含めることもできます。例えば、あるクライアントがドイツ語のロケールを要求している場合、index_de-de-de.htmlを提供すると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3a9ae66260a1d157f9089d2cc179f9d5301eddf4" translate="yes" xml:space="preserve">
          <source>You can also register services via the &lt;a href=&quot;../api/auto/service/%24provide&quot;&gt;&lt;code&gt;$provide&lt;/code&gt;&lt;/a&gt; service inside of a module's &lt;code&gt;config&lt;/code&gt; function:</source>
          <target state="translated">経由してあなたはまた、サービスを登録することができます&lt;a href=&quot;../api/auto/service/%24provide&quot;&gt; &lt;code&gt;$provide&lt;/code&gt; &lt;/a&gt;モジュールののサービス内の &lt;code&gt;config&lt;/code&gt; 機能を：</target>
        </trans-unit>
        <trans-unit id="1edb9a1866cb37ee7c8a705d58855e4474dd410b" translate="yes" xml:space="preserve">
          <source>You can also retrieve this information during runtime via the &lt;a href=&quot;../../auto/service/%24injector#modules.html&quot;&gt;&lt;code&gt;$injector.modules&lt;/code&gt;&lt;/a&gt; property:</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24injector#modules.html&quot;&gt; &lt;code&gt;$injector.modules&lt;/code&gt; &lt;/a&gt;プロパティを使用して、実行時にこの情報を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="c0befbcac9d9d01e3b63469abfe82d85e3d9b811" translate="yes" xml:space="preserve">
          <source>You can also specify a default callback parameter name in &lt;code&gt;$http.defaults.jsonpCallbackParam&lt;/code&gt;. Initially this is set to &lt;code&gt;'callback'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$http.defaults.jsonpCallbackParam&lt;/code&gt; でデフォルトのコールバックパラメータ名を指定することもできます。最初はこれは &lt;code&gt;'callback'&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="2d7de2c0112d4f97aedc82feb2a43df55ef558dd" translate="yes" xml:space="preserve">
          <source>You can also use filters in controllers, services, and directives.</source>
          <target state="translated">コントローラ、サービス、ディレクティブでフィルタを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f24ea7e29cd48bf6faab0eecdf7cb90ba2c45ec3" translate="yes" xml:space="preserve">
          <source>You can also use one of the other &lt;a href=&quot;animations#how-to-selectively-enable-disable-and-skip-animations.html&quot;&gt;strategies to disable animations&lt;/a&gt;.</source>
          <target state="translated">他の&lt;a href=&quot;animations#how-to-selectively-enable-disable-and-skip-animations.html&quot;&gt;戦略の&lt;/a&gt; 1つを使用して、アニメーションを無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="fe13f233d33f2317c9e1140e034697845e05b195" translate="yes" xml:space="preserve">
          <source>You can augment or replace the default transformations by modifying these properties by adding to or replacing the array.</source>
          <target state="translated">配列に追加したり置き換えたりすることで、これらのプロパティを変更することで、デフォルトの変換を追加したり置き換えたりすることができます。</target>
        </trans-unit>
        <trans-unit id="26d14f4eedb4fae61a21533414d119b82202b35c" translate="yes" xml:space="preserve">
          <source>You can change the &lt;code&gt;updateOn&lt;/code&gt; and &lt;code&gt;debounce&lt;/code&gt; configuration to test different scenarios. This is done with &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt;$overrideModelOptions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; および &lt;code&gt;debounce&lt;/code&gt; 構成を変更して、さまざまなシナリオをテストできます。これは&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt;$ overrideModelOptionsで&lt;/a&gt;行われます。</target>
        </trans-unit>
        <trans-unit id="95f072e3df7c685fac0ab3d9573d46c0869d70b1" translate="yes" xml:space="preserve">
          <source>You can change the sorting order by setting &lt;code&gt;reverse&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. By default, items are sorted in ascending order.</source>
          <target state="translated">ソート順を変更するには、 &lt;code&gt;reverse&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。デフォルトでは、アイテムは昇順でソートされます。</target>
        </trans-unit>
        <trans-unit id="5b7cb231a27ab416f35141ff7bd108e5cc769047" translate="yes" xml:space="preserve">
          <source>You can check for a specific type of tasks only, by specifying a &lt;code&gt;taskType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;taskType&lt;/code&gt; を指定すると、特定のタイプのタスクのみを確認できます。</target>
        </trans-unit>
        <trans-unit id="c7b4afaad293e0ab8ad424a0b72a63e37e669388" translate="yes" xml:space="preserve">
          <source>You can check whether a control is legitimately disabled for a screen reader by visiting &lt;a href=&quot;chrome://accessibility&quot;&gt;chrome://accessibility&lt;/a&gt; and inspecting &lt;a href=&quot;http://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/&quot;&gt;the accessibility tree&lt;/a&gt;.</source>
          <target state="translated">スクリーンリーダーのコントロールが正当に無効になっているかどうかを確認するには、&lt;a href=&quot;chrome://accessibility&quot;&gt;chrome：// accessibilityにアクセス&lt;/a&gt;して&lt;a href=&quot;http://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/&quot;&gt;、ユーザー補助ツリー&lt;/a&gt;を調べます。</target>
        </trans-unit>
        <trans-unit id="101c4d02cff99099bc46b58888f7e3b1b5c073de" translate="yes" xml:space="preserve">
          <source>You can compose any directives by using them within templates.</source>
          <target state="translated">テンプレート内で使用することで、任意のディレクティブを構成することができます。</target>
        </trans-unit>
        <trans-unit id="b731cd6d9510d79f51557d5ef94ff727e5832fe3" translate="yes" xml:space="preserve">
          <source>You can define routes through &lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt;'s API.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$ routeProvider&lt;/a&gt;のAPIを使用してルートを定義できます。</target>
        </trans-unit>
        <trans-unit id="31fd1fd68039c2988acf76d4b52a6bd46babbbf5" translate="yes" xml:space="preserve">
          <source>You can delay the model update/validation by using the &lt;code&gt;debounce&lt;/code&gt; key with the &lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive. This delay will also apply to parsers, validators and model flags like &lt;code&gt;$dirty&lt;/code&gt; or &lt;code&gt;$pristine&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;ディレクティブで &lt;code&gt;debounce&lt;/code&gt; キーを使用することで、モデルの更新/検証を遅らせることができます。この遅延は、パーサー、バリデーター、および &lt;code&gt;$dirty&lt;/code&gt; や &lt;code&gt;$pristine&lt;/code&gt; などのモデルフラグにも適用されます。</target>
        </trans-unit>
        <trans-unit id="394cd1db28c6a0eb81e64282e2056f4d03a03ffd" translate="yes" xml:space="preserve">
          <source>You can disallow this method by using strict injection mode.</source>
          <target state="translated">厳密な注入モードを使用することで、このメソッドを禁止することができます。</target>
        </trans-unit>
        <trans-unit id="f2d0006b7fc5df06a67c045557923aa476a252da" translate="yes" xml:space="preserve">
          <source>You can find a community &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;style guide&lt;/a&gt; to help yourself when application grows.</source>
          <target state="translated">アプリケーションが大きくなったときに役立つコミュニティ&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;スタイルガイド&lt;/a&gt;を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="b4ffdd20ca6d801378c6461b645c060b2afbe103" translate="yes" xml:space="preserve">
          <source>You can find out more about using decorators in the &lt;a href=&quot;../../../guide/decorators&quot;&gt;decorators&lt;/a&gt; guide.</source>
          <target state="translated">デコレータの使い方については、&lt;a href=&quot;../../../guide/decorators&quot;&gt;デコレータ&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="d817692a7365bfe66193ce98eb6fc60b3b2851d4" translate="yes" xml:space="preserve">
          <source>You can no longer use the &lt;code&gt;JSON_CALLBACK&lt;/code&gt; string as a placeholder for specifying where the callback parameter value should go.</source>
          <target state="translated">&lt;code&gt;JSON_CALLBACK&lt;/code&gt; 文字列を、コールバックパラメーター値の移動先を指定するためのプレースホルダーとして使用できなくなりました。</target>
        </trans-unit>
        <trans-unit id="81b72c68d5c402b72c089494c02ceecaa5f99cad" translate="yes" xml:space="preserve">
          <source>You can override this for input directives whose concept of being empty is different from the default. The &lt;code&gt;checkboxInputType&lt;/code&gt; directive does this because in its case a value of &lt;code&gt;false&lt;/code&gt; implies empty.</source>
          <target state="translated">空であるという概念がデフォルトとは異なる入力ディレクティブに対して、これをオーバーライドできます。この場合、値が &lt;code&gt;false&lt;/code&gt; の場合は空であることを意味するため、 &lt;code&gt;checkboxInputType&lt;/code&gt; ディレクティブがこれを行います。</target>
        </trans-unit>
        <trans-unit id="03e6bebea554786a5c69bfdcefb68b743a5a8836" translate="yes" xml:space="preserve">
          <source>You can package code as reusable modules.</source>
          <target state="translated">コードを再利用可能なモジュールとしてパッケージ化することができます。</target>
        </trans-unit>
        <trans-unit id="d1d497079860e0aef5a7334e1b6d3f917d87d536" translate="yes" xml:space="preserve">
          <source>You can pass special characters to &lt;code&gt;$location&lt;/code&gt; service and it will encode them according to rules specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;. When you access the methods:</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスに特殊文字を渡すことができ、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986で&lt;/a&gt;指定されたルールに従ってそれらをエンコードします。メソッドにアクセスすると：</target>
        </trans-unit>
        <trans-unit id="4214d93cb88074a0dc0a8a6112a0cd567c18df5e" translate="yes" xml:space="preserve">
          <source>You can pass special characters to &lt;code&gt;$location&lt;/code&gt; service and it will encode them according to rules specified in &lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;. When you access the methods:</source>
          <target state="translated">特殊文字を &lt;code&gt;$location&lt;/code&gt; サービスに渡すことができ、&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC3986で&lt;/a&gt;指定されたルールに従ってそれらをエンコードします。メソッドにアクセスするとき：</target>
        </trans-unit>
        <trans-unit id="9b734f12bf70df0a2e00394730665d5415debb85" translate="yes" xml:space="preserve">
          <source>You can pre-bundle the desired locale file with AngularJS by concatenating the content of the locale-specific file to the end of &lt;code&gt;angular.js&lt;/code&gt; or &lt;code&gt;angular.min.js&lt;/code&gt; file.</source>
          <target state="translated">ロケール固有のファイルのコンテンツを &lt;code&gt;angular.js&lt;/code&gt; または &lt;code&gt;angular.min.js&lt;/code&gt; ファイルの最後に連結することにより、AngularJSで目的のロケールファイルを事前にバンドルできます。</target>
        </trans-unit>
        <trans-unit id="85dc3a060a6c674c82381f94eb04968eb861374e" translate="yes" xml:space="preserve">
          <source>You can prevent this unwanted behavior by adding CSS to the &lt;code&gt;.ng-animate&lt;/code&gt; class, that is added for the whole duration of each animation. Simply overwrite the transition / animation duration. In the case of the spinner, this would be:</source>
          <target state="translated">CSSを &lt;code&gt;.ng-animate&lt;/code&gt; クラスに追加することで、この不要な動作を防ぐことができます。これは、各アニメーションの期間全体に追加されます。トランジション/アニメーション期間を上書きするだけです。スピナーの場合、これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6def1729bd1768b2cd779c4ef6b6f8325f5c9a2f" translate="yes" xml:space="preserve">
          <source>You can see the state of a router by inspecting the read-only field &lt;code&gt;router.navigating&lt;/code&gt;. This may be useful for showing a spinner, for instance.</source>
          <target state="translated">読み取り専用フィールド &lt;code&gt;router.navigating&lt;/code&gt; を調べると、ルーターの状態を確認できます。これは、例えばスピナーを表示するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2b352ff8d883043445bd8981d7dc50aa0f230033" translate="yes" xml:space="preserve">
          <source>You can specify &lt;code&gt;templateUrl&lt;/code&gt; as a string representing the URL or as a function which takes two arguments &lt;code&gt;tElement&lt;/code&gt; and &lt;code&gt;tAttrs&lt;/code&gt; (described in the &lt;code&gt;compile&lt;/code&gt; function api below) and returns a string value representing the url. In either case, the template URL is passed through &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; は、URLを表す文字列として、または2つの引数 &lt;code&gt;tElement&lt;/code&gt; と &lt;code&gt;tAttrs&lt;/code&gt; （以下の &lt;code&gt;compile&lt;/code&gt; 関数APIで説明）を取り、URLを表す文字列値を返す関数として指定できます。どちらの場合も、テンプレートURLは&lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;を介して渡されます。</target>
        </trans-unit>
        <trans-unit id="5a119aa77141737eb79be52385e2aee416f621dd" translate="yes" xml:space="preserve">
          <source>You can specify an &lt;strong&gt;AngularJS module&lt;/strong&gt; to be used as the root module for the application. This module will be loaded into the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;&lt;code&gt;$injector&lt;/code&gt;&lt;/a&gt; when the application is bootstrapped. It should contain the application code needed or have dependencies on other modules that will contain the code. See &lt;a href=&quot;../function/angular.module&quot;&gt;&lt;code&gt;angular.module&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">アプリケーションのルートモジュールとして使用する&lt;strong&gt;AngularJSモジュール&lt;/strong&gt;を指定できます。このモジュールは、アプリケーションがブートストラップされるときに&lt;a href=&quot;../../auto/service/%24injector&quot;&gt; &lt;code&gt;$injector&lt;/code&gt; &lt;/a&gt;にロードされます。必要なアプリケーションコードを含むか、コードを含む他のモジュールに依存する必要があります。詳細については、&lt;a href=&quot;../function/angular.module&quot;&gt; &lt;code&gt;angular.module&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="83e67cbe288ebfb9dc5625d108d58f784c85db1d" translate="yes" xml:space="preserve">
          <source>You can specify that all undefined settings are automatically inherited from an ancestor by including a property with key of &lt;code&gt;&quot;*&quot;&lt;/code&gt; and value of &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;*&quot;&lt;/code&gt; キーと &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt; 値を持つプロパティを含めることにより、すべての未定義の設定が祖先から自動的に継承されるように指定できます。</target>
        </trans-unit>
        <trans-unit id="1b455448fb10c3feb0f72d94c3ebc50d20590d06" translate="yes" xml:space="preserve">
          <source>You can specify that an &lt;code&gt;ngModelOptions&lt;/code&gt; setting should be inherited from a parent &lt;code&gt;ngModelOptions&lt;/code&gt; directive by giving it the value of &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt;. Then it will inherit that setting from the first &lt;code&gt;ngModelOptions&lt;/code&gt; directive found by traversing up the DOM tree. If there is no ancestor element containing an &lt;code&gt;ngModelOptions&lt;/code&gt; directive then default settings will be used.</source>
          <target state="translated">&lt;code&gt;&quot;$inherit&quot;&lt;/code&gt; 値を指定することにより、 &lt;code&gt;ngModelOptions&lt;/code&gt; 設定が親の &lt;code&gt;ngModelOptions&lt;/code&gt; ディレクティブから継承されるように指定できます。次に、DOMツリーを上に移動して見つかった最初の &lt;code&gt;ngModelOptions&lt;/code&gt; ディレクティブからその設定を継承します。 &lt;code&gt;ngModelOptions&lt;/code&gt; ディレクティブを含む祖先要素がない場合、デフォルト設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="cee8cd455fdb5702144ad7cd54e9ed881038580b" translate="yes" xml:space="preserve">
          <source>You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name as the value of the &lt;code&gt;ng-transclude&lt;/code&gt; or &lt;code&gt;ng-transclude-slot&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;ng-transclude&lt;/code&gt; または &lt;code&gt;ng-transclude-slot&lt;/code&gt; 属性の値としてスロット名を指定することにより、デフォルトのスロットではなく、名前付きのトランスクルージョンスロットを挿入することを指定できます。</target>
        </trans-unit>
        <trans-unit id="9bda3f14d47124d3a0cc71d6522064e0dae9bd21" translate="yes" xml:space="preserve">
          <source>You can specify the timezone that date/time input directives expect by providing its name in the &lt;code&gt;timezone&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;timezone&lt;/code&gt; プロパティで名前を指定することにより、日付/時刻入力ディレクティブが予期するタイムゾーンを指定できます。</target>
        </trans-unit>
        <trans-unit id="d238ae2804d6180fbe63f8987fedec23e3737291" translate="yes" xml:space="preserve">
          <source>You can specify which of the CSP related AngularJS features should be deactivated by providing a value for the &lt;code&gt;ng-csp&lt;/code&gt; attribute. The options are as follows:</source>
          <target state="translated">&lt;code&gt;ng-csp&lt;/code&gt; 属性の値を指定することで、CSPに関連するAngularJS機能のどれを非アクティブにするかを指定できます。オプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7a6cfaefefd7e989f4c8416822c363b3e888bae2" translate="yes" xml:space="preserve">
          <source>You can think of a module as a container for the different parts of your app &amp;ndash; controllers, services, filters, directives, etc.</source>
          <target state="translated">モジュールは、アプリのさまざまな部分（コントローラー、サービス、フィルター、ディレクティブなど）のコンテナーと考え​​ることができます。</target>
        </trans-unit>
        <trans-unit id="46083d20e43265af397b4bfea5060f6934b0e4f7" translate="yes" xml:space="preserve">
          <source>You can think of the scope and its properties as the data which is used to render the view. The scope is the single source-of-truth for all things view related.</source>
          <target state="translated">スコープとそのプロパティは、ビューをレンダリングするために使用するデータと考えることができます。スコープは、ビューに関連するすべてのことを網羅した唯一の真実の情報源です。</target>
        </trans-unit>
        <trans-unit id="bb7e801aed6bfa3b80705913fe37098596068e96" translate="yes" xml:space="preserve">
          <source>You can try evaluating different expressions here:</source>
          <target state="translated">ここでは、さまざまな式を評価してみることができます。</target>
        </trans-unit>
        <trans-unit id="01fb93ff7e945210b06d2632d87e6c20f7132855" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;%24injector#modules.html&quot;&gt;&lt;code&gt;$injector.modules&lt;/code&gt;&lt;/a&gt; to check whether a module has been loaded into the injector, which may indicate whether the script has been executed already.</source>
          <target state="translated">&lt;a href=&quot;%24injector#modules.html&quot;&gt; &lt;code&gt;$injector.modules&lt;/code&gt; &lt;/a&gt;を使用して、モジュールがインジェクターにロードされているかどうかを確認できます。これは、スクリプトがすでに実行されているかどうかを示す場合があります。</target>
        </trans-unit>
        <trans-unit id="fea4b46d76068b50a2610c7aa3ba09e4bbacf753" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;&lt;code&gt;$animate.pin(element, parentHost)&lt;/code&gt;&lt;/a&gt; to associate an element with another element that belongs to your application. Simply call it before the element is added to the DOM / before the animation starts, with the element you want to animate, and the element which should be its assumed parent.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt; &lt;code&gt;$animate.pin(element, parentHost)&lt;/code&gt; &lt;/a&gt;を使用して、アプリケーションに属する別の要素に要素を関連付けることができます。要素をDOMに追加する前/アニメーションを開始する前に、アニメーション化する要素と、想定される親となる要素を指定して呼び出します。</target>
        </trans-unit>
        <trans-unit id="90d096931a4a9014361011def3c70b0d88433ec1" translate="yes" xml:space="preserve">
          <source>You can use a set of closed braces (&lt;code&gt;{}&lt;/code&gt;) as a placeholder for the number that you want substituted into pluralized strings. In the previous example, AngularJS will replace &lt;code&gt;{}&lt;/code&gt; with &lt;code&gt;{{personCount}}&lt;/code&gt;. The closed braces &lt;code&gt;{}&lt;/code&gt; is a placeholder for {{numberExpression}}.</source>
          <target state="translated">複数の文字列に置換する数値のプレースホルダーとして、中かっこ（ &lt;code&gt;{}&lt;/code&gt; ）のセットを使用できます。前の例では、AngularJSは &lt;code&gt;{}&lt;/code&gt; を &lt;code&gt;{{personCount}}&lt;/code&gt; に置き換えます。閉じ括弧 &lt;code&gt;{}&lt;/code&gt; は、{{numberExpression}}のプレースホルダーです。</target>
        </trans-unit>
        <trans-unit id="5751169a6fe8d45d1d7e022ef3cd59712b6c869a" translate="yes" xml:space="preserve">
          <source>You can use interceptors to transform the request or response, perform additional operations, and modify the returned instance/collection. The following example, uses &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; interceptors to augment the returned instance with additional info:</source>
          <target state="translated">インターセプターを使用して、要求または応答を変換し、追加の操作を実行し、返されたインスタンス/コレクションを変更できます。次の例では、 &lt;code&gt;request&lt;/code&gt; インターセプターと &lt;code&gt;response&lt;/code&gt; インターセプターを使用して、返されたインスタンスに追加情報を追加しています。</target>
        </trans-unit>
        <trans-unit id="48fdf349ff70b287ccf87f104b20e5eb02329746" translate="yes" xml:space="preserve">
          <source>You can use one of the following two ways to specify what javascript method should be called when a form is submitted:</source>
          <target state="translated">フォームが送信されたときにどのjavascriptメソッドを呼び出すかを指定するには、以下の2つの方法のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="07a40d48550dced6bc4ecac1abed1172cae9631a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;*&lt;/code&gt; key to specify a debounce value that applies to all events that are not specifically listed. In the following example, &lt;code&gt;mouseup&lt;/code&gt; would have a debounce delay of 1000:</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; キーを使用して、具体的にリストされていないすべてのイベントに適用されるデバウンス値を指定できます。次の例では、 &lt;code&gt;mouseup&lt;/code&gt; のデバウンス遅延は1000になります。</target>
        </trans-unit>
        <trans-unit id="d05623d5cd6b9d05013708bdfc786b9260096b60" translate="yes" xml:space="preserve">
          <source>You can use these values in the following combinations:</source>
          <target state="translated">これらの値は、以下の組み合わせで使用できます。</target>
        </trans-unit>
        <trans-unit id="263ffe9bf05101cfe6ef8170633d8aab69c73c0c" translate="yes" xml:space="preserve">
          <source>You can use this property to find out information about a module via the &lt;a href=&quot;../../ng/type/angular.module#info.html&quot;&gt;&lt;code&gt;myModule.info(...)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このプロパティを使用すると、&lt;a href=&quot;../../ng/type/angular.module#info.html&quot;&gt; &lt;code&gt;myModule.info(...)&lt;/code&gt; &lt;/a&gt;メソッドを介してモジュールに関する情報を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="e06feb7fe4556feaddf828bb776f3d4141d0137a" translate="yes" xml:space="preserve">
          <source>You can work around this Internet Explorer issue by using &lt;code&gt;ng-attr-placeholder&lt;/code&gt; instead of &lt;code&gt;placeholder&lt;/code&gt; on textareas, whenever you need interpolation in the placeholder value. You can find more details on &lt;code&gt;ngAttr&lt;/code&gt; in the &lt;a href=&quot;../../../guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes.html&quot;&gt;Interpolation&lt;/a&gt; section of the Developer Guide.</source>
          <target state="translated">プレースホルダー値の補間が必要な場合はいつでも、textareas で &lt;code&gt;placeholder&lt;/code&gt; &lt;code&gt;ng-attr-placeholder&lt;/code&gt; 代わりにng-attr-placeholderを使用することにより、このInternet Explorerの問題を回避できます。あなたはの詳細を見つけることができます &lt;code&gt;ngAttr&lt;/code&gt; をして&lt;a href=&quot;../../../guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes.html&quot;&gt;補間&lt;/a&gt;開発者ガイドのセクション。</target>
        </trans-unit>
        <trans-unit id="8ac5062f58db70425ec02718519256c0e23fa9ef" translate="yes" xml:space="preserve">
          <source>You can write localizable plural and gender based messages in AngularJS interpolation expressions and &lt;code&gt;$interpolate&lt;/code&gt; calls.</source>
          <target state="translated">AngularJS補間式と &lt;code&gt;$interpolate&lt;/code&gt; 呼び出しでローカライズ可能な複数形と性別ベースのメッセージを記述できます。</target>
        </trans-unit>
        <trans-unit id="ce12a7493c6ecee3f467f8d9177628fab6c55d2f" translate="yes" xml:space="preserve">
          <source>You can't declare functions or create regular expressions from within AngularJS expressions. This is to avoid complex model transformation logic inside templates. Such logic is better placed in a controller or in a dedicated filter where it can be tested properly.</source>
          <target state="translated">AngularJSの式の中から関数を宣言したり、正規表現を作成したりすることはできません。これはテンプレート内の複雑なモデル変換ロジックを避けるためです。そのようなロジックは、適切にテストできるコントローラや専用のフィルターの中に配置するのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="9fa7a3275cffe456f2eb657d1f253178c3dc76c7" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;sharedInjector()&lt;/code&gt; from within a context already using &lt;code&gt;sharedInjector()&lt;/code&gt;.</source>
          <target state="translated">あなたは呼び出すことはできません &lt;code&gt;sharedInjector()&lt;/code&gt; をすでに使用してコンテキスト内から &lt;code&gt;sharedInjector()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77d8fda0634d7c68c1d8703be68103783c2c733c" translate="yes" xml:space="preserve">
          <source>You cannot spy on &lt;code&gt;angular.element&lt;/code&gt; if you are using Jasmine version 1.x. See &lt;a href=&quot;https://github.com/angular/angular.js/issues/14251&quot;&gt;https://github.com/angular/angular.js/issues/14251&lt;/a&gt; for more information.</source>
          <target state="translated">Jasmineバージョン1.xを使用している場合、 &lt;code&gt;angular.element&lt;/code&gt; をスパイすることはできません。詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/issues/14251&quot;&gt;https：//github.com/angular/angular.js/issues/14251&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="018339fa9294575012128284f4fe322332b53dbc" translate="yes" xml:space="preserve">
          <source>You cannot use Unicode characters for variable names in the &lt;a href=&quot;ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ng/directive/ngoptions&quot;&gt;&lt;code&gt;ngOptions&lt;/code&gt;&lt;/a&gt; expressions (e.g. &lt;code&gt;ng-repeat=&quot;f in поля&quot;&lt;/code&gt;), because even with &lt;code&gt;ngParseExt&lt;/code&gt; included, these special expressions are not parsed by the &lt;a href=&quot;ng/service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;ngParseExt&lt;/code&gt; が含まれていても、これらの特別な式は&lt;a href=&quot;ng/service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt;サービスによって解析されないため、&lt;a href=&quot;ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ng/directive/ngoptions&quot;&gt; &lt;code&gt;ngOptions&lt;/code&gt; &lt;/a&gt;式の変数名にUnicode文字を使用することはできません（例： &lt;code&gt;ng-repeat=&quot;f in поля&quot;&lt;/code&gt; inполя &quot;）。</target>
        </trans-unit>
        <trans-unit id="82db794867be25f27eff07c0ebfe6ef16a361fd2" translate="yes" xml:space="preserve">
          <source>You configure ngPluralize by providing 2 attributes: &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt;. You can also provide an optional attribute, &lt;code&gt;offset&lt;/code&gt;.</source>
          <target state="translated">ngPluralizeを設定するには、 &lt;code&gt;count&lt;/code&gt; と &lt;code&gt;when&lt;/code&gt; という 2つの属性を指定します。オプションの属性 &lt;code&gt;offset&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="7a92bea5f50a4fe4227230c04e414a92ac0d6314" translate="yes" xml:space="preserve">
          <source>You define a response to a request by chaining a call to &lt;code&gt;respond()&lt;/code&gt; onto a definition or expectation. If you provide a &lt;strong&gt;callback&lt;/strong&gt; as the first parameter to &lt;code&gt;respond(callback)&lt;/code&gt; then you can dynamically generate a response based on the properties of the request.</source>
          <target state="translated">要求への応答を定義するには、response &lt;code&gt;respond()&lt;/code&gt; 呼び出しを定義または期待にチェーンします。response &lt;code&gt;respond(callback)&lt;/code&gt; 最初のパラメータとして&lt;strong&gt;コールバック&lt;/strong&gt;を提供する場合、リクエストのプロパティに基づいて動的に応答を生成できます。</target>
        </trans-unit>
        <trans-unit id="3b530477dd3a42f3e637e20d02b029d89614e05e" translate="yes" xml:space="preserve">
          <source>You may also bypass sanitization for values you know are safe. To do so, bind to an explicitly trusted value via &lt;a href=&quot;../service/%24sce#trustAsHtml.html&quot;&gt;$sce.trustAsHtml&lt;/a&gt;. See the example under &lt;a href=&quot;../service/%24sce#show-me-an-example-using-sce-.html&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">安全であることがわかっている値のサニタイズをバイパスすることもできます。そのためには、&lt;a href=&quot;../service/%24sce#trustAsHtml.html&quot;&gt;$ sce.trustAsHtml&lt;/a&gt;を介して明示的に信頼された値にバインドします。&lt;a href=&quot;../service/%24sce#show-me-an-example-using-sce-.html&quot;&gt;Strict Contextual Escaping（SCE）&lt;/a&gt;の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="ccf7fee42b89952589b444c9ec99cb8e2d50cc8c" translate="yes" xml:space="preserve">
          <source>You may also want to setup a separate CSS file for defining CSS-based animations.</source>
          <target state="translated">また、CSSベースのアニメーションを定義するために、別のCSSファイルを設定しておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="af0393d281a0768d6f723f736ccec7c3b256d9bd" translate="yes" xml:space="preserve">
          <source>You may be wondering why &lt;code&gt;!important&lt;/code&gt; is used for the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class. This is because the &lt;code&gt;.ng-hide&lt;/code&gt; selector can be easily overridden by heavier selectors. For example, something as simple as changing the display style on a HTML list item would make hidden elements appear visible. This also becomes a bigger issue when dealing with CSS frameworks.</source>
          <target state="translated">&lt;code&gt;!important&lt;/code&gt; が &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスに使用されている理由に疑問を感じているかもしれません。これは、 &lt;code&gt;.ng-hide&lt;/code&gt; セレクターを重いセレクターで簡単にオーバーライドできるためです。たとえば、HTMLリストアイテムの表示スタイルを変更するだけで、非表示の要素が表示されます。これは、CSSフレームワークを扱うときにも大きな問題になります。</target>
        </trans-unit>
        <trans-unit id="da49d4f2bcb633f38bc6cc9dce6a58efe4115346" translate="yes" xml:space="preserve">
          <source>You may find it helpful to play with the following example as you read the explanations below:</source>
          <target state="translated">下の説明を読みながら、以下の例を参考にして遊んでみるといいかもしれません。</target>
        </trans-unit>
        <trans-unit id="605dd76e4ddd6491f31f4de2f358fa35adf6f2ab" translate="yes" xml:space="preserve">
          <source>You may want to disable the default behavior when unit-testing modules that depend on &lt;code&gt;ngRoute&lt;/code&gt;, in order to avoid an unexpected request for the default route's template.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; に依存するモジュールを単体テストするときは、デフォルトのルートのテンプレートに対する予期しないリクエストを回避するために、デフォルトの動作を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7f2e00b178abf5124fd75182086557120e8701b5" translate="yes" xml:space="preserve">
          <source>You may want to disable this in production for a significant performance boost. See &lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;Disabling Debug Data&lt;/a&gt; for more.</source>
          <target state="translated">本番環境でこれを無効にすると、パフォーマンスが大幅に向上します。詳細については、&lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;デバッグデータの無効化を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fbe35a7e05fed427062fb336bdada506f2694242" translate="yes" xml:space="preserve">
          <source>You might also be interested in an in-depth explanation of the compilation process that's available in the &lt;a href=&quot;compiler&quot;&gt;compiler guide&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;compiler&quot;&gt;コンパイラガイドで&lt;/a&gt;利用できるコンパイルプロセスの詳細な説明もご覧ください。</target>
        </trans-unit>
        <trans-unit id="0cb1f5c75cf0eca323a45284e434512ab65554de" translate="yes" xml:space="preserve">
          <source>You need to require the &lt;code&gt;ngAnimateMock&lt;/code&gt; module in your test suite for instance &lt;code&gt;beforeEach(module('ngAnimateMock'))&lt;/code&gt;</source>
          <target state="translated">たとえば、 &lt;code&gt;beforeEach(module('ngAnimateMock'))&lt;/code&gt; などのテストスイートで &lt;code&gt;ngAnimateMock&lt;/code&gt; モジュールを要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="df9ca6c1a182b06893d38928adf19d45fa7352c6" translate="yes" xml:space="preserve">
          <source>You should avoid dynamically changing the content of an interpolated string (e.g. attribute value or text node). Your changes are likely to be overwritten, when the original string gets evaluated. This restriction applies to both directly changing the content via JavaScript or indirectly using a directive.</source>
          <target state="translated">補間された文字列(属性値やテキストノードなど)の内容を動的に変更することは避けるべきです。元の文字列が評価されたときに、変更した内容が上書きされる可能性があります。この制限は、JavaScript を使って直接内容を変更する場合と、ディレクティブを使って間接的に変更する場合の両方に適用されます。</target>
        </trans-unit>
        <trans-unit id="0812fdddd6459d04d8044a62593320f963934181" translate="yes" xml:space="preserve">
          <source>You should avoid generating the URL for the JSONP request from user provided data. Provide additional query parameters via &lt;code&gt;params&lt;/code&gt; property of the &lt;code&gt;config&lt;/code&gt; parameter, rather than modifying the URL itself.</source>
          <target state="translated">ユーザーが提供したデータからJSONPリクエストのURLを生成することは避けてください。URL自体を変更するのではなく、 &lt;code&gt;config&lt;/code&gt; パラメータの &lt;code&gt;params&lt;/code&gt; プロパティを介して追加のクエリパラメータを提供します。</target>
        </trans-unit>
        <trans-unit id="18cb9bb0017681d3d8101f157e43e02a6c34118b" translate="yes" xml:space="preserve">
          <source>You should call &lt;code&gt;angular.bootstrap()&lt;/code&gt;&lt;em&gt;after&lt;/em&gt; you've loaded or defined your modules. You cannot add controllers, services, directives, etc after an application bootstraps.</source>
          <target state="translated">モジュールをロードまたは定義した&lt;em&gt;後、&lt;/em&gt; &lt;code&gt;angular.bootstrap()&lt;/code&gt; を呼び出す必要があります。アプリケーションのブートストラップ後は、コントローラー、サービス、ディレクティブなどを追加できません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="708894bed891642020be330ee41f65279a12308c" translate="yes" xml:space="preserve">
          <source>You should instead delegate the computation of complex expressions to the scope, like this:</source>
          <target state="translated">代わりに、複雑な式の計算をスコープに委譲する必要があります。</target>
        </trans-unit>
        <trans-unit id="00d05d0613122422197d607d0f5d480b82b7256a" translate="yes" xml:space="preserve">
          <source>You should never need to use this service directly, instead use the higher-level abstractions: &lt;a href=&quot;%24http&quot;&gt;$http&lt;/a&gt; or &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt;.</source>
          <target state="translated">このサービスを直接使用する必要はありません。代わりに、上位レベルの抽象化&lt;a href=&quot;%24http&quot;&gt;$ http&lt;/a&gt;または&lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$ resourceを使用してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8227b8f9162f84070a9b441550a8349a405f2d71" translate="yes" xml:space="preserve">
          <source>You should not modify this object. It should be treated as immutable.</source>
          <target state="translated">このオブジェクトを変更してはいけません。これは不変として扱われるべきです。</target>
        </trans-unit>
        <trans-unit id="5baf54133cc48e19725486ae5426bdd4a9f40085" translate="yes" xml:space="preserve">
          <source>You should not use &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation&lt;/a&gt; in the value of the &lt;code&gt;class&lt;/code&gt; attribute, when using the &lt;code&gt;ngClass&lt;/code&gt; directive on the same element. See &lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;here&lt;/a&gt; for more info.</source>
          <target state="translated">同じ要素で &lt;code&gt;ngClass&lt;/code&gt; ディレクティブを使用する場合、 &lt;code&gt;class&lt;/code&gt; 属性の値に&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間&lt;/a&gt;を使用しないでください。詳細は&lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="98d2de094c98f1cd2bdd5d2d54fef7a1683a9b0b" translate="yes" xml:space="preserve">
          <source>You should not use &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation&lt;/a&gt; in the value of the &lt;code&gt;style&lt;/code&gt; attribute, when using the &lt;code&gt;ngStyle&lt;/code&gt; directive on the same element. See &lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;here&lt;/a&gt; for more info.</source>
          <target state="translated">同じ要素で &lt;code&gt;ngStyle&lt;/code&gt; ディレクティブを使用する場合、 &lt;code&gt;style&lt;/code&gt; 属性の値に&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間&lt;/a&gt;を使用しないでください。詳細は&lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7c2fbe7ded595dba74eca502191373f662514b48" translate="yes" xml:space="preserve">
          <source>You should use &lt;a href=&quot;%24provide#service.html&quot;&gt;$provide.service(class)&lt;/a&gt; if you define your service as a type/class.</source>
          <target state="translated">サービスをタイプ/クラスとして定義する場合は、&lt;a href=&quot;%24provide#service.html&quot;&gt;$ provide.service（class）&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bea982bb9c2f6821b3f44edf8dad402dddc73177" translate="yes" xml:space="preserve">
          <source>You should use the Provider recipe only when you want to expose an API for application-wide configuration that must be made before the application starts. This is usually interesting only for reusable services whose behavior might need to vary slightly between applications.</source>
          <target state="translated">アプリケーションが起動する前に行わなければならないアプリケーション全体のコンフィギュレーションのためのAPIを公開したい場合にのみ、プロバイダレシピを使うべきです。これは通常、アプリケーション間で動作を少し変える必要があるかもしれない再利用可能なサービスのためだけに興味深いものです。</target>
        </trans-unit>
        <trans-unit id="189b161d716479306fb70aa6bdfa4c20ff0c5f21" translate="yes" xml:space="preserve">
          <source>You use this behavior by adding &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to an element that has &lt;code&gt;ng-model&lt;/code&gt; attached to it. You can also add &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, which will enable this behavior for all &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;s within it. See &lt;a href=&quot;ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; for more.</source>
          <target state="translated">この動作を使用するには、 &lt;code&gt;ng-model&lt;/code&gt; がアタッチされている要素に &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; を追加します。 &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; を &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; に追加することもできます。これにより、その中のすべての &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に対してこの動作が有効になります。詳細については、&lt;a href=&quot;ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ea026120b5159e1c3d1c13abf1a26ff24877e8b" translate="yes" xml:space="preserve">
          <source>You will need to escape curly braces or the &lt;code&gt;#&lt;/code&gt; character inside message texts if you want them to be treated literally with no special meaning. You may quote/escape any character in your message text by preceding it with a &lt;code&gt;\&lt;/code&gt; (backslash) character. The backslash character removes any special meaning to the character that immediately follows it. Therefore, you can escape or quote the backslash itself by preceding it with another backslash character.</source>
          <target state="translated">特別な意味を持たずに文字どおりに処理する場合は、メッセージテキスト内の中括弧または &lt;code&gt;#&lt;/code&gt; 文字をエスケープする必要があります。メッセージテキストの任意の文字の前に &lt;code&gt;\&lt;/code&gt; （バックスラッシュ）文字を付けることで、引用/エスケープできます。バックスラッシュ文字は、直後の文字に対する特別な意味を取り除きます。したがって、バックスラッシュの前に別のバックスラッシュ文字を付けることで、バックスラッシュ自体をエスケープまたは引用できます。</target>
        </trans-unit>
        <trans-unit id="2921d662338c8a9c41ad8161d433030686dc6951" translate="yes" xml:space="preserve">
          <source>You would then inject and use this service like this:</source>
          <target state="translated">そして、このようなサービスを注入して使用することになります。</target>
        </trans-unit>
        <trans-unit id="e70f2e38922e0df09ef7e7e8ce8d7191454edd9b" translate="yes" xml:space="preserve">
          <source>```html</source>
          <target state="translated">```html</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="9bb8776e05f401bf226d4252d267bbb3918ac6cc" translate="yes" xml:space="preserve">
          <source>a (directive)</source>
          <target state="translated">ア</target>
        </trans-unit>
        <trans-unit id="18b2c9e8cc1c31ba37b4b0c75cc55e65bb713d22" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;string&lt;/strong&gt; containing the name of the directive to pass to the linking function</source>
          <target state="translated">&lt;strong&gt;文字列&lt;/strong&gt;の連結関数に渡すディレクティブの名前を含みます</target>
        </trans-unit>
        <trans-unit id="af7d197c6e53486aa8dd1d58aa11f54606cd204d" translate="yes" xml:space="preserve">
          <source>a callback function called when a change is detected.</source>
          <target state="translated">変更が検出されたときに呼び出されるコールバック関数。</target>
        </trans-unit>
        <trans-unit id="31011fccb5641632048dbe4f55f910c10dc6ced5" translate="yes" xml:space="preserve">
          <source>a container for the different parts of an app including controllers, services, filters, directives which configures the Injector</source>
          <target state="translated">コントローラ、サービス、フィルター、ディレクティブなど、アプリのさまざまな部分のためのコンテナで、インジェクタを設定します。</target>
        </trans-unit>
        <trans-unit id="3ded06ab2199592f273fd39802162cd99749e136" translate="yes" xml:space="preserve">
          <source>a delete button that calls the bound &lt;code&gt;onDelete&lt;/code&gt; function of the heroList component</source>
          <target state="translated">heroListコンポーネントのバインドされた &lt;code&gt;onDelete&lt;/code&gt; 関数を呼び出す削除ボタン</target>
        </trans-unit>
        <trans-unit id="32d8a4a7d0456b1b2b1a671c3249e60a44f45f0f" translate="yes" xml:space="preserve">
          <source>a function which represents the compiled expression:</source>
          <target state="translated">コンパイルされた式を表す関数。</target>
        </trans-unit>
        <trans-unit id="bc00f7308a724af915cc60f837b686441f35ab88" translate="yes" xml:space="preserve">
          <source>a hash of options for the new child that will override the parent's options</source>
          <target state="translated">親のオプションを上書きする新しい子のオプションのハッシュ。</target>
        </trans-unit>
        <trans-unit id="706108cda1287413fa8f990c4835b11f413067b0" translate="yes" xml:space="preserve">
          <source>a hash of settings to override the previous options</source>
          <target state="translated">以前のオプションを上書きするための設定のハッシュ</target>
        </trans-unit>
        <trans-unit id="f05813f5739579fdd1d4b57cb660b6867f734ef7" translate="yes" xml:space="preserve">
          <source>a link function which is used to bind template (a DOM element/tree) to a scope. Where:</source>
          <target state="translated">テンプレート (DOM 要素/ツリー)をスコープにバインドするために使用するリンク関数。ここでは</target>
        </trans-unit>
        <trans-unit id="55695b0bf53f0f8364445a33b3ca2a369f478309" translate="yes" xml:space="preserve">
          <source>a new &lt;code&gt;ModelOptions&lt;/code&gt; object initialized with the given options.</source>
          <target state="translated">指定されたオプションで初期化された新しい &lt;code&gt;ModelOptions&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="379191e5b7fd6f760277a7555deef3fd119a2078" translate="yes" xml:space="preserve">
          <source>a promise for the HTTP response data of the given URL.</source>
          <target state="translated">指定されたURLのHTTPレスポンスデータのプロミス。</target>
        </trans-unit>
        <trans-unit id="becf8e47f951a02fd2b3105e8eb5160d4e08c6f1" translate="yes" xml:space="preserve">
          <source>a promise that resolves or rejects as soon as one of the &lt;code&gt;promises&lt;/code&gt; resolves or rejects, with the value or reason from that promise.</source>
          <target state="translated">いずれかの約束が解決または拒否されるとすぐに、その &lt;code&gt;promises&lt;/code&gt; の価値または理由とともに解決または拒否される約束。</target>
        </trans-unit>
        <trans-unit id="a5020c7b91f56938a8a85c71f7f5a4fe172243e4" translate="yes" xml:space="preserve">
          <source>a route controller in a &lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$route definition&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$ route定義の&lt;/a&gt;ルートコントローラー。</target>
        </trans-unit>
        <trans-unit id="dff4b804ed724a8ff290ba2788703c19231cfda7" translate="yes" xml:space="preserve">
          <source>a serialized string of the argument</source>
          <target state="translated">引数のシリアル化された文字列</target>
        </trans-unit>
        <trans-unit id="43daaff24d820f678dcec7a0ed85e0273e11ee74" translate="yes" xml:space="preserve">
          <source>a string value corresponding to the message key.</source>
          <target state="translated">メッセージキーに対応する文字列値。</target>
        </trans-unit>
        <trans-unit id="188a7880e1b109e7fc9b2e2e6f2a1becbcd44689" translate="yes" xml:space="preserve">
          <source>a string value corresponding to the remote template.</source>
          <target state="translated">リモートテンプレートに対応する文字列値。</target>
        </trans-unit>
        <trans-unit id="d2a9fe0146bf173c8e3a464f80b97a3d24f52244" translate="yes" xml:space="preserve">
          <source>aHrefSanitizationTrustedUrlList([regexp]);</source>
          <target state="translated">aHrefSanitizationTrustedUrlList([regexp]);</target>
        </trans-unit>
        <trans-unit id="414899530854dc40d6f390553e4322f52a52895f" translate="yes" xml:space="preserve">
          <source>aHrefSanitizationWhitelist();</source>
          <target state="translated">aHrefSanitizationWhitelist();</target>
        </trans-unit>
        <trans-unit id="b079c945daaff59541f623646ce5f9d2e0585dd1" translate="yes" xml:space="preserve">
          <source>aHrefSanitizationWhitelist([regexp]);</source>
          <target state="translated">aHrefSanitizationWhitelist([regexp]);</target>
        </trans-unit>
        <trans-unit id="0bfda8d377c2609cd9d50c5b636b767072ce4e18" translate="yes" xml:space="preserve">
          <source>ability to use other services (have dependencies)</source>
          <target state="translated">他サービス利用能力</target>
        </trans-unit>
        <trans-unit id="ef2d5d4fccdd96167467a3b99c1b7a180c5f7743" translate="yes" xml:space="preserve">
          <source>absUrl();</source>
          <target state="translated">absUrl();</target>
        </trans-unit>
        <trans-unit id="6b7378531c25e5fb815d3a0902f391d65d520c77" translate="yes" xml:space="preserve">
          <source>access variables and functions from the scope</source>
          <target state="translated">スコープから変数や関数にアクセスする</target>
        </trans-unit>
        <trans-unit id="326b426f9ac7a96ed6baf62f8838565416d27df8" translate="yes" xml:space="preserve">
          <source>actions</source>
          <target state="translated">actions</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="aec0daec959795395dcc905b9847b0612640147b" translate="yes" xml:space="preserve">
          <source>add and remove</source>
          <target state="translated">つけはらう</target>
        </trans-unit>
        <trans-unit id="cc8b8c2195e53bb8255cd71b8e16455a756e3798" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;../api/ng/directive/form#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">追加と削除（&lt;a href=&quot;../api/ng/directive/form#css-classes.html&quot;&gt;さまざまなクラス&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="9c802e4d0f2125c8ccd099abde937d2b0bf2441a" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;../api/ng/directive/ngmodel#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">追加と削除（&lt;a href=&quot;../api/ng/directive/ngmodel#css-classes.html&quot;&gt;さまざまなクラス&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f281cc8b5a559ab097bfd79225f63810cb81fb0f" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;ng/directive/form#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">追加と削除（&lt;a href=&quot;ng/directive/form#css-classes.html&quot;&gt;さまざまなクラス&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="ffad39d7805a618c642328731b65205c308b4f01" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;ng/directive/ngmodel#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">追加と削除（&lt;a href=&quot;ng/directive/ngmodel#css-classes.html&quot;&gt;さまざまなクラス&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="b5ff19582dcaad51bc41694d9238b32371b5ef56" translate="yes" xml:space="preserve">
          <source>add and remove (the &lt;code&gt;ng-active&lt;/code&gt;/&lt;code&gt;ng-inactive&lt;/code&gt; classes)</source>
          <target state="translated">追加および削除（ &lt;code&gt;ng-active&lt;/code&gt; / &lt;code&gt;ng-inactive&lt;/code&gt; クラス）</target>
        </trans-unit>
        <trans-unit id="ef3a686b4dece25feec634e5096ce9bfa0ab02e9" translate="yes" xml:space="preserve">
          <source>add and remove (the &lt;code&gt;ng-hide&lt;/code&gt; class)</source>
          <target state="translated">追加と削除（ &lt;code&gt;ng-hide&lt;/code&gt; クラス）</target>
        </trans-unit>
        <trans-unit id="4606cae7f1920e3c492cfaeabdc8c17954ded6e2" translate="yes" xml:space="preserve">
          <source>addClass</source>
          <target state="translated">addClass</target>
        </trans-unit>
        <trans-unit id="5344edbbbb944d873756285888c51ebfd1edc4eb" translate="yes" xml:space="preserve">
          <source>addClass - &lt;code&gt;{string|null}&lt;/code&gt; - space-separated CSS classes to add to the element</source>
          <target state="translated">addClass- &lt;code&gt;{string|null}&lt;/code&gt; -要素に追加するスペースで区切られたCSSクラス</target>
        </trans-unit>
        <trans-unit id="1ce7c21f30af5f5b10fedbd5346fdf4de554a180" translate="yes" xml:space="preserve">
          <source>addClass(element, className, [options]);</source>
          <target state="translated">addClass(element,className,[options])を使用しています。</target>
        </trans-unit>
        <trans-unit id="7d5c1898c8ce2da11d160f1391c7b4d49f3e4fa8" translate="yes" xml:space="preserve">
          <source>addClass: function(element, addedClasses, doneFunction, options)</source>
          <target state="translated">addClass:function(element,addedClasses,doneFunction,options)</target>
        </trans-unit>
        <trans-unit id="8a69fd19bd1b272f2742ad56fc2a3b8cfc501eb3" translate="yes" xml:space="preserve">
          <source>addLiteral(literalName, literalValue);</source>
          <target state="translated">リテラル(literalName,literalValue)を追加します。</target>
        </trans-unit>
        <trans-unit id="7355adcfc3b67f4cb2d06cc684bfdbbc71a5354b" translate="yes" xml:space="preserve">
          <source>addPropertySecurityContext(elementName, propertyName, ctx);</source>
          <target state="translated">addPropertySecurityContext(elementName,propertyName,ctx)を追加しました。</target>
        </trans-unit>
        <trans-unit id="333e96f32ede786dad3a524ea79bfedd0348fa8d" translate="yes" xml:space="preserve">
          <source>addValidAttrs(attrs);</source>
          <target state="translated">addValidAttrs(attrs);</target>
        </trans-unit>
        <trans-unit id="93587ca72e1d30ccc9c8bea63361be352f4ff1f6" translate="yes" xml:space="preserve">
          <source>addValidElements(elements);</source>
          <target state="translated">addValidElements(elements);</target>
        </trans-unit>
        <trans-unit id="0e60fa4d785ab2bc105ccf6c990933a65342e4cd" translate="yes" xml:space="preserve">
          <source>additional parameters to the executed function.</source>
          <target state="translated">実行される関数に追加のパラメータを追加します。</target>
        </trans-unit>
        <trans-unit id="94196134a8d9bdb1401da3bc2115cca0f04a7280" translate="yes" xml:space="preserve">
          <source>additionally, the current &lt;code&gt;step&lt;/code&gt; is respected, so the nearest value that satisfies a step is used.</source>
          <target state="translated">さらに、現在の &lt;code&gt;step&lt;/code&gt; が尊重されるため、ステップを満たす最も近い値が使用されます。</target>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="translated">after</target>
        </trans-unit>
        <trans-unit id="23df66181ba9e1f5fc4b8bd4eeeae0d7bf480aa4" translate="yes" xml:space="preserve">
          <source>after the ngSwitch contents change and just before the former contents are removed from the DOM</source>
          <target state="translated">ngSwitch のコンテンツが変更された後、以前のコンテンツが DOM から削除される直前に</target>
        </trans-unit>
        <trans-unit id="edfb3ff06c7d19c0160ebeef6b4e7aed6ac4f75f" translate="yes" xml:space="preserve">
          <source>after the ngSwitch contents change and the matched child element is placed inside the container</source>
          <target state="translated">ngSwitch の内容が変更され、一致した子要素がコンテナ内に配置された後に</target>
        </trans-unit>
        <trans-unit id="0203ff87b54e01303123f3cf6037e798d281c86c" translate="yes" xml:space="preserve">
          <source>aliasing special properties of &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, as seen in the demo below.</source>
          <target state="translated">以下のデモで見られるように、&lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; の&lt;/a&gt;特別なプロパティのエイリアス。</target>
        </trans-unit>
        <trans-unit id="7fd4541bdbf63dfb2866c26ed51bd47d9e487d39" translate="yes" xml:space="preserve">
          <source>all(promises);</source>
          <target state="translated">all(promises);</target>
        </trans-unit>
        <trans-unit id="853ec6940d908211cb464751067ad975ac2f9e24" translate="yes" xml:space="preserve">
          <source>allOrNothing</source>
          <target state="translated">allOrNothing</target>
        </trans-unit>
        <trans-unit id="2f805a6387252234e96b3821364c6eb5940fab41" translate="yes" xml:space="preserve">
          <source>allow read/write access to the current browser location</source>
          <target state="translated">現在のブラウザの場所への読み書きアクセスを許可する</target>
        </trans-unit>
        <trans-unit id="9cb6ff12fb81d5cd585d45ce555565a410036da6" translate="yes" xml:space="preserve">
          <source>amount</source>
          <target state="translated">amount</target>
        </trans-unit>
        <trans-unit id="ae8a168eb2baeaf9900333f86cc98d0863e7118c" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;%24animate#animate.html&quot;&gt;animate()&lt;/a&gt; call that adds and removes classes will fire the &lt;code&gt;setClass&lt;/code&gt; event, but if it either removes or adds classes, it will fire &lt;code&gt;animate&lt;/code&gt; instead.</source>
          <target state="translated">クラスを追加および削除する&lt;a href=&quot;%24animate#animate.html&quot;&gt;animate（）&lt;/a&gt;呼び出しは、 &lt;code&gt;setClass&lt;/code&gt; イベントを発生させますが、クラスを削除または追加する場合は、代わりに &lt;code&gt;animate&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="5465699dad7e5dd0885fad9e0bac00ac26c21aef" translate="yes" xml:space="preserve">
          <source>an &lt;strong&gt;array&lt;/strong&gt; containing the names of directives to pass to the linking function. The argument passed to the linking function will be an array of controllers in the same order as the names in the &lt;code&gt;require&lt;/code&gt; property</source>
          <target state="translated">&lt;strong&gt;アレイ&lt;/strong&gt;連結機能に渡す指令の名前を含みます。リンク関数に渡される引数は、 &lt;code&gt;require&lt;/code&gt; プロパティの名前と同じ順序のコントローラーの配列になります</target>
        </trans-unit>
        <trans-unit id="ee788da6d46e8da3b0f49448dd52abefd07cc965" translate="yes" xml:space="preserve">
          <source>an &lt;strong&gt;object&lt;/strong&gt; whose property values are the names of the directives to pass to the linking function. The argument passed to the linking function will also be an object with matching keys, whose values will hold the corresponding controllers.</source>
          <target state="translated">プロパティ値がリンク関数に渡すディレクティブの名前である&lt;strong&gt;オブジェクト&lt;/strong&gt;。リンク関数に渡される引数は、一致するキーを持つオブジェクトにもなり、その値は対応するコントローラーを保持します。</target>
        </trans-unit>
        <trans-unit id="05821434eff3a62ba5342040d2111f2be08735ae" translate="yes" xml:space="preserve">
          <source>an AngularJS expression evaluating to a key/value object (this is typically the $error object on an ngModel instance).</source>
          <target state="translated">キー/値オブジェクトに評価される AngularJS の式 (通常は ngModel インスタンスの $error オブジェクト)。</target>
        </trans-unit>
        <trans-unit id="5223bbc2ad5e3fff9138baae8bfe21fbad43a2e8" translate="yes" xml:space="preserve">
          <source>an array of modules to load into the application. Each item in the array should be the name of a predefined module or a (DI annotated) function that will be invoked by the injector as a &lt;code&gt;config&lt;/code&gt; block. See: &lt;a href=&quot;../../ng/function/angular.module&quot;&gt;modules&lt;/a&gt;</source>
          <target state="translated">アプリケーションにロードするモジュールの配列。アレイ内の各項目は、定義済みモジュールとして、または注射器によって呼び出される（DIは、注釈付き）関数の名前でなければならない &lt;code&gt;config&lt;/code&gt; ブロック。参照：&lt;a href=&quot;../../ng/function/angular.module&quot;&gt;モジュール&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da8d44712011870c5d24be6adc4a4262f3092988" translate="yes" xml:space="preserve">
          <source>an array of modules to load into the application. Each item in the array should be the name of a predefined module or a (DI annotated) function that will be invoked by the injector as a &lt;code&gt;config&lt;/code&gt; block. See: &lt;a href=&quot;angular.module&quot;&gt;modules&lt;/a&gt;</source>
          <target state="translated">アプリケーションにロードするモジュールの配列。アレイ内の各項目は、定義済みモジュールとして、または注射器によって呼び出される（DIは、注釈付き）関数の名前でなければならない &lt;code&gt;config&lt;/code&gt; ブロック。参照：&lt;a href=&quot;angular.module&quot;&gt;モジュール&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90631e69762c1d19d90bb8a46a025cb21f8df921" translate="yes" xml:space="preserve">
          <source>an expression value corresponding to the message key.</source>
          <target state="translated">メッセージキーに対応する式の値。</target>
        </trans-unit>
        <trans-unit id="45bfa910dd3346062d5b2f2326e6e9dc3d003dab" translate="yes" xml:space="preserve">
          <source>an input to change the hero location, in the form of a reusable editableField component. Instead of manipulating the hero object itself, it sends a changeset upwards to the heroDetail, which sends it upwards to the heroList component, which updates the original data.</source>
          <target state="translated">は、再利用可能なeditableFieldコンポーネントの形で、ヒーローの位置を変更するための入力です。英雄オブジェクト自体を操作するのではなく、変更セットを heroDetail に上向きに送り、それを heroList コンポーネントに上向きに送り、元のデータを更新します。</target>
        </trans-unit>
        <trans-unit id="c4f8c3e56d6ea7a98b8ce583803f04e27a178c17" translate="yes" xml:space="preserve">
          <source>an interpolation function which is used to compute the interpolated string. The function has these parameters:</source>
          <target state="translated">補間された文字列を計算するために使用される補間関数.この関数は以下のパラメータを持ちます。</target>
        </trans-unit>
        <trans-unit id="96f5899ab1e42548965ebb0918a658b5082f3063" translate="yes" xml:space="preserve">
          <source>an object for defining configuration options for the application. The following keys are supported:</source>
          <target state="translated">アプリケーションの構成オプションを定義するためのオブジェクト。以下のキーがサポートされています。</target>
        </trans-unit>
        <trans-unit id="41b1bb86f322794c4b59d2029143d339dffe9c38" translate="yes" xml:space="preserve">
          <source>an object with start and end methods and details about the animation.</source>
          <target state="translated">開始と終了のメソッドとアニメーションの詳細を持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="cff5806805287a8a5091b7bfe03e2728bc65d27b" translate="yes" xml:space="preserve">
          <source>an object with the following properties:</source>
          <target state="translated">以下のプロパティを持つオブジェクトを指定します。</target>
        </trans-unit>
        <trans-unit id="4954dcbf2681a7fe5b463d449cf3d333a65ac2c9" translate="yes" xml:space="preserve">
          <source>an optional CSS class that will be applied to the element for the duration of the animation. If this value is left as empty then a CSS class of &lt;code&gt;ng-inline-animate&lt;/code&gt; will be applied to the element. (Note that if no animation is detected then this value will not be applied to the element.)</source>
          <target state="translated">アニメーションの期間中に要素に適用されるオプションのCSSクラス。この値を空のままにすると、 &lt;code&gt;ng-inline-animate&lt;/code&gt; の CSSクラスが要素に適用されます。（アニメーションが検出されない場合、この値は要素に適用されないことに注意してください。）</target>
        </trans-unit>
        <trans-unit id="1d26a64bb51575a5bcd5ac9fbf9d191a30bdb33f" translate="yes" xml:space="preserve">
          <source>an optional application &lt;a href=&quot;../function/angular.module&quot;&gt;module&lt;/a&gt; name to load.</source>
          <target state="translated">ロードするオプションのアプリケーション&lt;a href=&quot;../function/angular.module&quot;&gt;モジュール&lt;/a&gt;名。</target>
        </trans-unit>
        <trans-unit id="0488f5c3e9c27a3de0f15222f058d92b00c3b4b3" translate="yes" xml:space="preserve">
          <source>an optional collection of options/styles that will be applied to the element. The object can have the following properties:</source>
          <target state="translated">要素に適用されるオプション/スタイルのコレクション。オブジェクトは以下のプロパティを持つことができます。</target>
        </trans-unit>
        <trans-unit id="a2c5893ec3808730c9b54a09da7acd2bf4523a33" translate="yes" xml:space="preserve">
          <source>and you have an open redirect at &lt;code&gt;http://myapp.example.com/clickThru?...&lt;/code&gt;.</source>
          <target state="translated">そして &lt;code&gt;http://myapp.example.com/clickThru?...&lt;/code&gt; にオープンリダイレクトがあります。</target>
        </trans-unit>
        <trans-unit id="842189d4cd0bc95c4173244059d6d935e9356ac8" translate="yes" xml:space="preserve">
          <source>angular-cache</source>
          <target state="translated">angular-cache</target>
        </trans-unit>
        <trans-unit id="d7e63c60af3e6ef654163ec8b1c37cc03f53eaa9" translate="yes" xml:space="preserve">
          <source>angular-gettext</source>
          <target state="translated">angular-gettext</target>
        </trans-unit>
        <trans-unit id="c487ffd8e0d32705e106c533a87219506b11ba3e" translate="yes" xml:space="preserve">
          <source>angular-localization</source>
          <target state="translated">angular-localization</target>
        </trans-unit>
        <trans-unit id="8931440bc4f416e51cbf0352e8eb4d6290f8cb98" translate="yes" xml:space="preserve">
          <source>angular-mocks</source>
          <target state="translated">angular-mocks</target>
        </trans-unit>
        <trans-unit id="c2ae28680459087103593b97c1765a429cde3da8" translate="yes" xml:space="preserve">
          <source>angular-translate</source>
          <target state="translated">angular-translate</target>
        </trans-unit>
        <trans-unit id="aaa278f1b58592edfbbe6ca17892adbdfa0a2687" translate="yes" xml:space="preserve">
          <source>angular.Module</source>
          <target state="translated">angular.Module</target>
        </trans-unit>
        <trans-unit id="e40c3c2a579932b4257eb890dc2cf82cb08001ef" translate="yes" xml:space="preserve">
          <source>angular.UNSAFE_restoreLegacyJqLiteXHTMLReplacement</source>
          <target state="translated">angular.UNSAFE_restoreLegacyJqLiteXHTMLReplacement</target>
        </trans-unit>
        <trans-unit id="acfc966f1c3eefd5dd5b33f6d3dbfe7f9950e7b7" translate="yes" xml:space="preserve">
          <source>angular.bind</source>
          <target state="translated">angular.bind</target>
        </trans-unit>
        <trans-unit id="6ef24dc5123e24ec1e73047cde117ea0f862b2f0" translate="yes" xml:space="preserve">
          <source>angular.bootstrap</source>
          <target state="translated">angular.bootstrap</target>
        </trans-unit>
        <trans-unit id="084f87c8d616dd8a72696e5cf75deae9362862e5" translate="yes" xml:space="preserve">
          <source>angular.copy</source>
          <target state="translated">angular.copy</target>
        </trans-unit>
        <trans-unit id="289117ee4fa89c021b09358307f9d29cb37d8626" translate="yes" xml:space="preserve">
          <source>angular.element</source>
          <target state="translated">angular.element</target>
        </trans-unit>
        <trans-unit id="8afc39aae7b640aac6a01dd764d887dbd319f348" translate="yes" xml:space="preserve">
          <source>angular.equals</source>
          <target state="translated">angular.equals</target>
        </trans-unit>
        <trans-unit id="d873104aaefb9d2c622a0e88dcf407718c2aafa1" translate="yes" xml:space="preserve">
          <source>angular.errorHandlingConfig</source>
          <target state="translated">angular.errorHandlingConfig</target>
        </trans-unit>
        <trans-unit id="ed43f3d91ba70ecd827ccb60e527cfed4540f35a" translate="yes" xml:space="preserve">
          <source>angular.extend</source>
          <target state="translated">angular.extend</target>
        </trans-unit>
        <trans-unit id="cc6fb334efbeace88d8ceda6a5d7209e3118dbcb" translate="yes" xml:space="preserve">
          <source>angular.forEach</source>
          <target state="translated">angular.forEach</target>
        </trans-unit>
        <trans-unit id="62bdb1d8f928bc2bdc3f55efdcf7d77864b06fd0" translate="yes" xml:space="preserve">
          <source>angular.fromJson</source>
          <target state="translated">angular.fromJson</target>
        </trans-unit>
        <trans-unit id="4713e41f57d71e268719a99dfa1156ecc3f56e18" translate="yes" xml:space="preserve">
          <source>angular.identity</source>
          <target state="translated">angular.identity</target>
        </trans-unit>
        <trans-unit id="18fd123be33edd3f46be16fe125cee585e9d6658" translate="yes" xml:space="preserve">
          <source>angular.injector</source>
          <target state="translated">angular.injector</target>
        </trans-unit>
        <trans-unit id="a31286add7fedab0d10de3a6f8a1276a3d044fd7" translate="yes" xml:space="preserve">
          <source>angular.isArray</source>
          <target state="translated">angular.isArray</target>
        </trans-unit>
        <trans-unit id="a54b37a2ae4b2efe3b863e28f197f8bca414e84d" translate="yes" xml:space="preserve">
          <source>angular.isDate</source>
          <target state="translated">angular.isDate</target>
        </trans-unit>
        <trans-unit id="443d8001d6a2cfe5ee7b5dbb4dc43a921d8a655f" translate="yes" xml:space="preserve">
          <source>angular.isDefined</source>
          <target state="translated">angular.isDefined</target>
        </trans-unit>
        <trans-unit id="c5b4400f11a2785d8be78fc0285ab6f07dd0ea79" translate="yes" xml:space="preserve">
          <source>angular.isElement</source>
          <target state="translated">angular.isElement</target>
        </trans-unit>
        <trans-unit id="1626b820c4590a7a3d0f71f624c6eb27ff61c638" translate="yes" xml:space="preserve">
          <source>angular.isFunction</source>
          <target state="translated">angular.isFunction</target>
        </trans-unit>
        <trans-unit id="6215687c5f8e1138ccaeb373658114af663989d4" translate="yes" xml:space="preserve">
          <source>angular.isNumber</source>
          <target state="translated">angular.isNumber</target>
        </trans-unit>
        <trans-unit id="e36c7b6570948cd73e0a796be751f7f1c7580320" translate="yes" xml:space="preserve">
          <source>angular.isObject</source>
          <target state="translated">angular.isObject</target>
        </trans-unit>
        <trans-unit id="e08cee9768a2f187a1f78dbb4130f90b065061e4" translate="yes" xml:space="preserve">
          <source>angular.isString</source>
          <target state="translated">angular.isString</target>
        </trans-unit>
        <trans-unit id="87d70f613ad68ddfbcbb25bf4bae84dbdaba4188" translate="yes" xml:space="preserve">
          <source>angular.isUndefined</source>
          <target state="translated">angular.isUndefined</target>
        </trans-unit>
        <trans-unit id="28df3c32b0096ff9d4f14e07b7084b2fe5df2937" translate="yes" xml:space="preserve">
          <source>angular.merge</source>
          <target state="translated">angular.merge</target>
        </trans-unit>
        <trans-unit id="89245787aa22672a9ec82e9ed193d77097a2e6f6" translate="yes" xml:space="preserve">
          <source>angular.mock</source>
          <target state="translated">angular.mock</target>
        </trans-unit>
        <trans-unit id="1057bc6bd1438c33e847fb263764825ea118f181" translate="yes" xml:space="preserve">
          <source>angular.mock.TzDate</source>
          <target state="translated">angular.mock.TzDate</target>
        </trans-unit>
        <trans-unit id="7ec2b7e84c01f4afbad10499e58ba9f1065a5228" translate="yes" xml:space="preserve">
          <source>angular.mock.dump</source>
          <target state="translated">angular.mock.dump</target>
        </trans-unit>
        <trans-unit id="4e1079a20a1c73595c70f494588e444108f058ab" translate="yes" xml:space="preserve">
          <source>angular.mock.inject</source>
          <target state="translated">angular.mock.inject</target>
        </trans-unit>
        <trans-unit id="0d9140c8b28b1003d4507e89fd0da492bce0f6ee" translate="yes" xml:space="preserve">
          <source>angular.mock.module</source>
          <target state="translated">angular.mock.module</target>
        </trans-unit>
        <trans-unit id="4db998eb9346c0678276d430fd1b6b43e1bfd89b" translate="yes" xml:space="preserve">
          <source>angular.mock.module.sharedInjector</source>
          <target state="translated">angular.mock.module.sharedInjector</target>
        </trans-unit>
        <trans-unit id="2201cf904d4135c875c0348c1491f8238491bda1" translate="yes" xml:space="preserve">
          <source>angular.module</source>
          <target state="translated">angular.module</target>
        </trans-unit>
        <trans-unit id="de91fecfc925b0b2cc27240fee7feb67743a18c8" translate="yes" xml:space="preserve">
          <source>angular.noop</source>
          <target state="translated">angular.noop</target>
        </trans-unit>
        <trans-unit id="b5a10803ae3d33076df4c531c9b92c93bd5fcc7f" translate="yes" xml:space="preserve">
          <source>angular.reloadWithDebugInfo</source>
          <target state="translated">angular.reloadWithDebugInfo</target>
        </trans-unit>
        <trans-unit id="ffb5ee41f2a070bfebdb128f99d8450e49dc3adc" translate="yes" xml:space="preserve">
          <source>angular.toJson</source>
          <target state="translated">angular.toJson</target>
        </trans-unit>
        <trans-unit id="acdaaaa7dc75ed39e2adedd65e5cb3b904c954c5" translate="yes" xml:space="preserve">
          <source>angular.version</source>
          <target state="translated">angular.version</target>
        </trans-unit>
        <trans-unit id="169a3090b90513760e751a009bbdcafd7df68c87" translate="yes" xml:space="preserve">
          <source>angularEvent</source>
          <target state="translated">angularEvent</target>
        </trans-unit>
        <trans-unit id="34a06e08bdac778f5cdfd18ba031db64177c92df" translate="yes" xml:space="preserve">
          <source>animate(element, from, to, [className], [options]);</source>
          <target state="translated">animate(element,from,to,[className],[options])。</target>
        </trans-unit>
        <trans-unit id="14155a2181766fbab4e269351165909947ec1d2f" translate="yes" xml:space="preserve">
          <source>animate: function(element, fromStyles, toStyles, doneFunction, options)</source>
          <target state="translated">animate:function(element,fromStyles,toStyles,doneFunction,options)</target>
        </trans-unit>
        <trans-unit id="50c35784ca24ea93b1c251c898d50534def5512c" translate="yes" xml:space="preserve">
          <source>animation name</source>
          <target state="translated">アニメーション名</target>
        </trans-unit>
        <trans-unit id="87c02be138ad482141b1bf75111827d854ea62d6" translate="yes" xml:space="preserve">
          <source>animation(name, animationFactory);</source>
          <target state="translated">animation(name,animationFactory)を使用しています。</target>
        </trans-unit>
        <trans-unit id="163b455b1500578e51ec68fe8d87553e543a7876" translate="yes" xml:space="preserve">
          <source>animationFactory</source>
          <target state="translated">animationFactory</target>
        </trans-unit>
        <trans-unit id="d278a42f8c25340bff558c0af33746ccabb6eeda" translate="yes" xml:space="preserve">
          <source>animationRunner</source>
          <target state="translated">animationRunner</target>
        </trans-unit>
        <trans-unit id="4c5e9e0c2e3f4a31c61cab98557f6c664dcb4a54" translate="yes" xml:space="preserve">
          <source>animationRunner the animation runner</source>
          <target state="translated">animationRunnerアニメーションランナー</target>
        </trans-unit>
        <trans-unit id="1a34f73a15c76cd6560e9bbde1d7e06ae2a5c71d" translate="yes" xml:space="preserve">
          <source>annotate(fn, [strictDi]);</source>
          <target state="translated">annotate(fn,[strictDi])。</target>
        </trans-unit>
        <trans-unit id="f26a883d1c94f85aeae879c2e851936374fdf0a0" translate="yes" xml:space="preserve">
          <source>any non-numerical value is set to &lt;code&gt;(max + min) / 2&lt;/code&gt;.</source>
          <target state="translated">数値以外の値は &lt;code&gt;(max + min) / 2&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="50cfea78b44cc7bc3769f7ad6be73b7ef777fe31" translate="yes" xml:space="preserve">
          <source>any number of functions which will be injected using the injector.</source>
          <target state="translated">インジェクタを使用して注入される関数の任意の数。</target>
        </trans-unit>
        <trans-unit id="cbebd8699f5c656ea45d3945ebb9dd830cb6a101" translate="yes" xml:space="preserve">
          <source>any number of modules which are represented as string aliases or as anonymous module initialization functions. The modules are used to configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an object literal is passed each key-value pair will be registered on the module via &lt;a href=&quot;../../auto/service/%24provide&quot;&gt;$provide&lt;/a&gt;.value, the key being the string name (or token) to associate with the value on the injector.</source>
          <target state="translated">文字列エイリアスまたは匿名モジュール初期化関数として表される任意の数のモジュール。モジュールはインジェクターの設定に使用されます。「ng」および「ngMock」モジュールは自動的にロードされます。オブジェクトリテラルが渡される場合、各キーと値のペアは&lt;a href=&quot;../../auto/service/%24provide&quot;&gt;$ provide&lt;/a&gt; .value を介してモジュールに登録されます。キーは、インジェクターの値に関連付ける文字列名（またはトークン）です。</target>
        </trans-unit>
        <trans-unit id="073409b35c0c0f930de30627faccf49f13191a84" translate="yes" xml:space="preserve">
          <source>any numerical value that is less than the current min val, or greater than the current max val is set to the min / max val respectively.</source>
          <target state="translated">現在の最小値よりも小さい数値、または現在の最大値よりも大きい数値は、それぞれ最小値/最大値に設定されます。</target>
        </trans-unit>
        <trans-unit id="b7ec3ce2d598d853d6424780cb28b3afd4e2473d" translate="yes" xml:space="preserve">
          <source>any object to turn into string.</source>
          <target state="translated">任意のオブジェクトを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="2fc3755cd6bceda22809a5406c917a80f78fcdc5" translate="yes" xml:space="preserve">
          <source>any string which can contain &lt;code&gt;{{}}&lt;/code&gt; markup.</source>
          <target state="translated">&lt;code&gt;{{}}&lt;/code&gt; マークアップを含むことができる任意の文字列。</target>
        </trans-unit>
        <trans-unit id="d8bc79225279efa2fa4466ac1769cf173cdcb84f" translate="yes" xml:space="preserve">
          <source>anyPropertyKey</source>
          <target state="translated">anyPropertyKey</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="e4da0169f8ee9bb9ce2fe06c120e2b8ce022d3f5" translate="yes" xml:space="preserve">
          <source>aria-checked</source>
          <target state="translated">aria-checked</target>
        </trans-unit>
        <trans-unit id="d5fe59cc1871df7168888f1c4f3da7789e897a42" translate="yes" xml:space="preserve">
          <source>aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles</source>
          <target state="translated">aria-checked,aria-valuemin,aria-valuemax,aria-valuenow,aria-invalid,aria-required,入力ロール</target>
        </trans-unit>
        <trans-unit id="574e314c2ead52924e57153fec36ea9a20af000a" translate="yes" xml:space="preserve">
          <source>aria-disabled</source>
          <target state="translated">aria-disabled</target>
        </trans-unit>
        <trans-unit id="90a7593352d8c689d57f37ffaacbf4c62a6c651b" translate="yes" xml:space="preserve">
          <source>aria-hidden</source>
          <target state="translated">aria-hidden</target>
        </trans-unit>
        <trans-unit id="7795a4309336e0340c95cced20ca0948d629b4a9" translate="yes" xml:space="preserve">
          <source>aria-invalid</source>
          <target state="translated">aria-invalid</target>
        </trans-unit>
        <trans-unit id="9e93023b7188c2db241a52468e43440beb3d4827" translate="yes" xml:space="preserve">
          <source>aria-live</source>
          <target state="translated">aria-live</target>
        </trans-unit>
        <trans-unit id="77b4ddb06eaf152e3dc51d63fbb49c3286acb31f" translate="yes" xml:space="preserve">
          <source>aria-readonly</source>
          <target state="translated">aria-readonly</target>
        </trans-unit>
        <trans-unit id="94bd81e6c0ebe2d9a57e2ba5ac2ee72e5f7afb53" translate="yes" xml:space="preserve">
          <source>aria-required</source>
          <target state="translated">aria-required</target>
        </trans-unit>
        <trans-unit id="90983d5633a71a7048532951c379dc59b217a063" translate="yes" xml:space="preserve">
          <source>aria-valuemax</source>
          <target state="translated">aria-valuemax</target>
        </trans-unit>
        <trans-unit id="f32e849c5ec1dc3616b9fd81906fa67dedc52ff9" translate="yes" xml:space="preserve">
          <source>aria-valuemin</source>
          <target state="translated">aria-valuemin</target>
        </trans-unit>
        <trans-unit id="1adf2b45cbb6530bac7108ab2cfed5cf715dec50" translate="yes" xml:space="preserve">
          <source>aria-valuenow</source>
          <target state="translated">aria-valuenow</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="577ae834d195d782658ea89d73d4c3e4866fd706" translate="yes" xml:space="preserve">
          <source>as CSS class:</source>
          <target state="translated">をCSSクラスとして使用しています。</target>
        </trans-unit>
        <trans-unit id="840026553d79a9da447f68666152e193eace3610" translate="yes" xml:space="preserve">
          <source>as attribute:</source>
          <target state="translated">を属性として使用します。</target>
        </trans-unit>
        <trans-unit id="169bb17a5f699de7f8cb1f8b0484f92b84304e03" translate="yes" xml:space="preserve">
          <source>as element:</source>
          <target state="translated">を要素として使用します。</target>
        </trans-unit>
        <trans-unit id="b116a5b7748ff3cc4dd3169437134d5fa71b0abe" translate="yes" xml:space="preserve">
          <source>assertEmpty();</source>
          <target state="translated">assertEmpty();</target>
        </trans-unit>
        <trans-unit id="5cc38f752fbcd20e0ede374ade87a15a97c630bb" translate="yes" xml:space="preserve">
          <source>assignable &lt;a href=&quot;../../../guide/expression&quot;&gt;Expression&lt;/a&gt; to bind to.</source>
          <target state="translated">バインドする割り当て可能な&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5b7edbd04742370944887cede91e6592b42168d1" translate="yes" xml:space="preserve">
          <source>at least one &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest cycle&lt;/a&gt; will be performed after &lt;code&gt;expression&lt;/code&gt; execution.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 実行後、少なくとも1つの&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digestサイクル&lt;/a&gt;が実行されます。</target>
        </trans-unit>
        <trans-unit id="d7f67a250d8254339cc572b200990d99fe1baf29" translate="yes" xml:space="preserve">
          <source>attributes</source>
          <target state="translated">attributes</target>
        </trans-unit>
        <trans-unit id="130856e90bbab066b8bff5aef533f2fbad235efb" translate="yes" xml:space="preserve">
          <source>attrs</source>
          <target state="translated">attrs</target>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="translated">auto</target>
        </trans-unit>
        <trans-unit id="cac128d85d9b3d4e3d16037672a113a7a3b261fb" translate="yes" xml:space="preserve">
          <source>autoscroll</source>
          <target state="translated">autoscroll</target>
        </trans-unit>
        <trans-unit id="71051decbb3eca6f79368145b80a9f8f850d7727" translate="yes" xml:space="preserve">
          <source>aware of docroot/context from which the application is loaded</source>
          <target state="translated">アプリケーションが読み込まれた docroot/コンテキストを認識します。</target>
        </trans-unit>
        <trans-unit id="cbc13ba1beddc85fae40d5033c2a906fc8a9e615" translate="yes" xml:space="preserve">
          <source>bannedResourceUrlList</source>
          <target state="translated">bannedResourceUrlList</target>
        </trans-unit>
        <trans-unit id="162fed3a9c4cd993b9faa61313b1cb13dfb348bb" translate="yes" xml:space="preserve">
          <source>bannedResourceUrlList([bannedResourceUrlList]);</source>
          <target state="translated">bannedResourceUrlList([bannedResourceUrlList]);</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="a949f399728844e8c30720f47d3006283047975b" translate="yes" xml:space="preserve">
          <source>bind();</source>
          <target state="translated">bind();</target>
        </trans-unit>
        <trans-unit id="de97464b94cd65657a2ecd7c108e1d89b7a2afb1" translate="yes" xml:space="preserve">
          <source>bindToController</source>
          <target state="translated">bindToController</target>
        </trans-unit>
        <trans-unit id="da3fe922683e598dda35cf79f8402e7036236b0b" translate="yes" xml:space="preserve">
          <source>bindings</source>
          <target state="translated">bindings</target>
        </trans-unit>
        <trans-unit id="2325d20186382d4e93e362f765f1f70fe128ee38" translate="yes" xml:space="preserve">
          <source>blacklist</source>
          <target state="translated">blacklist</target>
        </trans-unit>
        <trans-unit id="190c059ecd4f2e56f8305e2937324828ed1ead38" translate="yes" xml:space="preserve">
          <source>blueimp-fileupload for AngularJS</source>
          <target state="translated">blueimp-fileupload for AngularJS</target>
        </trans-unit>
        <trans-unit id="b58ccb7871e0261dfe6de9e4f5274543ebbebeb8" translate="yes" xml:space="preserve">
          <source>broadcast</source>
          <target state="translated">broadcast</target>
        </trans-unit>
        <trans-unit id="46994abe629a11abbf27bc5c871783c56252dd69" translate="yes" xml:space="preserve">
          <source>browserTrigger</source>
          <target state="translated">browserTrigger</target>
        </trans-unit>
        <trans-unit id="877621137926045b49299299f2d3475ae339a61b" translate="yes" xml:space="preserve">
          <source>but some of your templates are hosted on other domains you control such as &lt;code&gt;http://srv01.assets.example.com/&lt;/code&gt;, &lt;code&gt;http://srv02.assets.example.com/&lt;/code&gt;, etc.</source>
          <target state="translated">しかし、あなたのテンプレートのいくつかは、次のようなあなたがコントロールする他のドメインでホストされている &lt;code&gt;http://srv01.assets.example.com/&lt;/code&gt; 、 &lt;code&gt;http://srv02.assets.example.com/&lt;/code&gt; など</target>
        </trans-unit>
        <trans-unit id="c288f0ce0b3aef25df2b0e1cd1e040c2e3e587c0" translate="yes" xml:space="preserve">
          <source>but the scopes will inherit prototypically from different scopes to their &lt;code&gt;$parent&lt;/code&gt;.</source>
          <target state="translated">ただし、スコープは異なるスコープから &lt;code&gt;$parent&lt;/code&gt; プロトタイプ的に継承されます。</target>
        </trans-unit>
        <trans-unit id="aff989d6652269707fc47b298eaf4e3ee87f65f4" translate="yes" xml:space="preserve">
          <source>but this will not work:</source>
          <target state="translated">が、これではうまくいきません。</target>
        </trans-unit>
        <trans-unit id="724175b1a8337227fe8870a8833eb806b76198f0" translate="yes" xml:space="preserve">
          <source>cache a specific response - set config.cache value to TRUE or to a cache object</source>
          <target state="translated">特定のレスポンスをキャッシュする-config.cache の値を TRUE に設定するか、キャッシュオブジェクトに設定します。</target>
        </trans-unit>
        <trans-unit id="1734c3f5ac3155f420a99cb58fdf47a50edfc0a8" translate="yes" xml:space="preserve">
          <source>cache all responses - set the default cache value to TRUE or to a cache object</source>
          <target state="translated">すべてのレスポンスをキャッシュする-デフォルトのキャッシュ値を TRUE に設定するか、キャッシュオブジェクトに設定します。</target>
        </trans-unit>
        <trans-unit id="434f756dca9578d143eeca19d6f627fe526235e6" translate="yes" xml:space="preserve">
          <source>cacheId</source>
          <target state="translated">cacheId</target>
        </trans-unit>
        <trans-unit id="3aef7ed4858c4fd8a90214c8beb6982ca436a8ca" translate="yes" xml:space="preserve">
          <source>call &lt;code&gt;$setViewValue&lt;/code&gt; method, whenever the user interacts with the control and model needs to be updated. This is usually done inside a DOM Event listener.</source>
          <target state="translated">ユーザーがコントロールを操作してモデルを更新する必要がある場合は常に、 &lt;code&gt;$setViewValue&lt;/code&gt; メソッドを呼び出します。これは通常、DOMイベントリスナー内で行われます。</target>
        </trans-unit>
        <trans-unit id="b4d5b37bf7a986c138ede89e0806f366b5cb1830" translate="yes" xml:space="preserve">
          <source>callback</source>
          <target state="translated">callback</target>
        </trans-unit>
        <trans-unit id="731e833c4a19e6f39c4bc41eb6b12834fd6b31f1" translate="yes" xml:space="preserve">
          <source>callbackPath</source>
          <target state="translated">callbackPath</target>
        </trans-unit>
        <trans-unit id="14dc69de2a1e6087529f02b62fd2888c90d741d3" translate="yes" xml:space="preserve">
          <source>caller</source>
          <target state="translated">caller</target>
        </trans-unit>
        <trans-unit id="db8ce75ae53155b9f218960a43ae8b1e8c02c2b4" translate="yes" xml:space="preserve">
          <source>can create functions</source>
          <target state="translated">関数を作成することができます。</target>
        </trans-unit>
        <trans-unit id="ee5486cc556478a60a26970ecc14457607891544" translate="yes" xml:space="preserve">
          <source>can create primitives</source>
          <target state="translated">プリミティブを作成することができます。</target>
        </trans-unit>
        <trans-unit id="dac29db03a3e7c45ab887dc423aa190004f70acd" translate="yes" xml:space="preserve">
          <source>can have dependencies</source>
          <target state="translated">は依存関係を持つことができます。</target>
        </trans-unit>
        <trans-unit id="1c7e2c912e3b7dbb0a0c98890434f247ef0768b6" translate="yes" xml:space="preserve">
          <source>cancel([promise]);</source>
          <target state="translated">cancel([promise]);</target>
        </trans-unit>
        <trans-unit id="5bc3e47c7fdf2f9907d58b16de826f38b1259d58" translate="yes" xml:space="preserve">
          <source>cancel(animationRunner);</source>
          <target state="translated">cancel(animationRunner);</target>
        </trans-unit>
        <trans-unit id="4f70136abe7b9258b5514dad34f2da6d156dffe7" translate="yes" xml:space="preserve">
          <source>cancel(promise);</source>
          <target state="translated">cancel(promise);</target>
        </trans-unit>
        <trans-unit id="42063b59621b05ee7a679e016473663ab1e80c3a" translate="yes" xml:space="preserve">
          <source>caseInsensitiveMatch</source>
          <target state="translated">caseInsensitiveMatch</target>
        </trans-unit>
        <trans-unit id="ccadf5de3d738fbe992636fbe8daf8e3fae6b80c" translate="yes" xml:space="preserve">
          <source>cause</source>
          <target state="translated">cause</target>
        </trans-unit>
        <trans-unit id="df7aab38d211d1b2aba4e26f2e6a1d2098395488" translate="yes" xml:space="preserve">
          <source>check if a controller with given name is registered via &lt;code&gt;$controllerProvider&lt;/code&gt;</source>
          <target state="translated">指定された名前のコントローラが &lt;code&gt;$controllerProvider&lt;/code&gt; 介して登録されているかどうかを確認します</target>
        </trans-unit>
        <trans-unit id="8bdb257d0869949981da5c708b76d76605c0af5f" translate="yes" xml:space="preserve">
          <source>check if evaluating the string on the current scope returns a constructor</source>
          <target state="translated">現在のスコープで文字列を評価するとコンストラクタを返すかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="57018890029a5ca0506e051ea1f395b61b2a6106" translate="yes" xml:space="preserve">
          <source>checkbox</source>
          <target state="translated">checkbox</target>
        </trans-unit>
        <trans-unit id="d80a05355eb77272dccf26e73f9d554a520a954d" translate="yes" xml:space="preserve">
          <source>className</source>
          <target state="translated">className</target>
        </trans-unit>
        <trans-unit id="3c3e62555a91b543538f8b3245c62fd4f6db4e5a" translate="yes" xml:space="preserve">
          <source>classNameFilter([expression]);</source>
          <target state="translated">classNameFilter([expression]);</target>
        </trans-unit>
        <trans-unit id="24cae32cbee8b4b5816713f154a40fe2df0adb87" translate="yes" xml:space="preserve">
          <source>classVal</source>
          <target state="translated">classVal</target>
        </trans-unit>
        <trans-unit id="7fb4c90ded6fbb6855d5f176554ffa0ea42388ff" translate="yes" xml:space="preserve">
          <source>clobbering user input by overwriting it</source>
          <target state="translated">上書きでユーザー入力を潰す</target>
        </trans-unit>
        <trans-unit id="c37ff1bfc55740e0740226b95e9d08cd0c86a596" translate="yes" xml:space="preserve">
          <source>closeAndFlush();</source>
          <target state="translated">closeAndFlush();</target>
        </trans-unit>
        <trans-unit id="2037de437c80264ccbce8a8b61d0bf9f593d2322" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">collection</target>
        </trans-unit>
        <trans-unit id="5aba39998cf27c8ef94342577ad9ebeb9f463d7d" translate="yes" xml:space="preserve">
          <source>commentDirectivesEnabled(enabled);</source>
          <target state="translated">commentDirectivesEnabled(enabled);</target>
        </trans-unit>
        <trans-unit id="ce0a49abc9442bd4e296b8c48d50f5fd2153b073" translate="yes" xml:space="preserve">
          <source>comparator</source>
          <target state="translated">comparator</target>
        </trans-unit>
        <trans-unit id="36d0981b3375d78be03ea98700ecec8f4e4bd4f9" translate="yes" xml:space="preserve">
          <source>compile</source>
          <target state="translated">compile</target>
        </trans-unit>
        <trans-unit id="619fb7d090dcc14860e43539c9678d893b195223" translate="yes" xml:space="preserve">
          <source>compile function</source>
          <target state="translated">コンパイルきのう</target>
        </trans-unit>
        <trans-unit id="a41ec2fa885d28dc95ed5390662352cc679a3b8f" translate="yes" xml:space="preserve">
          <source>compile the DOM treating the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive as the root of the compilation. This allows you to tell it to treat only a portion of the DOM as an AngularJS application.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;ディレクティブをコンパイルのルートとして扱い、DOMをコンパイルします。これにより、DOMの一部のみをAngularJSアプリケーションとして扱うように指示することができます。</target>
        </trans-unit>
        <trans-unit id="79aeecd9743c66b9ac32bb23ba40b903bd867f61" translate="yes" xml:space="preserve">
          <source>component(name, options);</source>
          <target state="translated">コンポーネント(name,options)を使用しています。</target>
        </trans-unit>
        <trans-unit id="f71e5995177c9cbdd530543c3b5b6a750250117b" translate="yes" xml:space="preserve">
          <source>componentName</source>
          <target state="translated">componentName</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="dad39b1340f5e81b523db660b952fe576c7e3977" translate="yes" xml:space="preserve">
          <source>config(config);</source>
          <target state="translated">config(config);</target>
        </trans-unit>
        <trans-unit id="3f03e95fcc2408b112b3f02d6c26371489172350" translate="yes" xml:space="preserve">
          <source>config(configFn);</source>
          <target state="translated">config(configFn);</target>
        </trans-unit>
        <trans-unit id="4fcf288fd3f9fdb863872111e662433eeaab03c4" translate="yes" xml:space="preserve">
          <source>configFn</source>
          <target state="translated">configFn</target>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="translated">configuration</target>
        </trans-unit>
        <trans-unit id="6edc9d0d3b7323196588f09d3e69c0e707ddd214" translate="yes" xml:space="preserve">
          <source>constant name</source>
          <target state="translated">定数名</target>
        </trans-unit>
        <trans-unit id="022143400e27034e2b452902910052aa5d3d40bf" translate="yes" xml:space="preserve">
          <source>constant(name, object);</source>
          <target state="translated">定数(name,object)を使用しています。</target>
        </trans-unit>
        <trans-unit id="4eda1f65916982031b9996a7352588a92e2a256c" translate="yes" xml:space="preserve">
          <source>constant(name, value);</source>
          <target state="translated">定数(name,value)を使用しています。</target>
        </trans-unit>
        <trans-unit id="8a1c1339801686eb9bf9a9ac5b4719b8c8b8fc9b" translate="yes" xml:space="preserve">
          <source>constructor</source>
          <target state="translated">constructor</target>
        </trans-unit>
        <trans-unit id="255a762c36cdae2fe950e67e8b8a4efb260e7540" translate="yes" xml:space="preserve">
          <source>container</source>
          <target state="translated">container</target>
        </trans-unit>
        <trans-unit id="ec2727b3b71f07635f726026bef44352ec89e452" translate="yes" xml:space="preserve">
          <source>context</source>
          <target state="translated">context</target>
        </trans-unit>
        <trans-unit id="485de35f978382a7931552705084adc608782e98" translate="yes" xml:space="preserve">
          <source>context where the model is stored so that controllers, directives and expressions can access it</source>
          <target state="translated">モデルが保存されているコンテキストで、コントローラ、ディレクティブ、式がアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="2aeede80be6f6dfc0aa4d1cbd6487e24e27a81be" translate="yes" xml:space="preserve">
          <source>control</source>
          <target state="translated">control</target>
        </trans-unit>
        <trans-unit id="9214ada1a69c999c230aeef26b11135fccadd140" translate="yes" xml:space="preserve">
          <source>control object, either a &lt;a href=&quot;form.formcontroller&quot;&gt;&lt;code&gt;form.FormController&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">コントロールオブジェクト、&lt;a href=&quot;form.formcontroller&quot;&gt; &lt;code&gt;form.FormController&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f79a2222c311aaf3748e792896911891d1ff255b" translate="yes" xml:space="preserve">
          <source>controller</source>
          <target state="translated">controller</target>
        </trans-unit>
        <trans-unit id="3393f80dead0e92d893797bf9753446eea4c40e1" translate="yes" xml:space="preserve">
          <source>controller(name, constructor);</source>
          <target state="translated">コントローラ(name,コンストラクタ)を使用しています。</target>
        </trans-unit>
        <trans-unit id="c4312397de3d25f72ed2080de2f2babdc151d494" translate="yes" xml:space="preserve">
          <source>controllerAs</source>
          <target state="translated">controllerAs</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="f647f69aa4e0dca2154dbc32752637dcac0be56d" translate="yes" xml:space="preserve">
          <source>create the application &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector&lt;/a&gt;</source>
          <target state="translated">アプリケーション&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;インジェクターを&lt;/a&gt;作成する</target>
        </trans-unit>
        <trans-unit id="6e8cf6dc320940291233bbd8d2ca95e4fe3444aa" translate="yes" xml:space="preserve">
          <source>createCallback(url);</source>
          <target state="translated">createCallback(url);</target>
        </trans-unit>
        <trans-unit id="513123c7fa9777c8daa2fb60229e9768193a68c8" translate="yes" xml:space="preserve">
          <source>createChild(options);</source>
          <target state="translated">createChild(options);</target>
        </trans-unit>
        <trans-unit id="96eb6bc4bfbabdd67086be1fb93b2aad86b5b2ea" translate="yes" xml:space="preserve">
          <source>cssClassDirectivesEnabled(enabled);</source>
          <target state="translated">cssClassDirectivesEnabled(enabled);</target>
        </trans-unit>
        <trans-unit id="4024700fd9f055274c529971e23ba54c20b0907c" translate="yes" xml:space="preserve">
          <source>ctx</source>
          <target state="translated">ctx</target>
        </trans-unit>
        <trans-unit id="001517ee5d3d0c7f4481ec2cd77c6aefd2fa802e" translate="yes" xml:space="preserve">
          <source>currency</source>
          <target state="translated">currency</target>
        </trans-unit>
        <trans-unit id="17899e3230216b05a3a19ba5b02ad7fa35cba0c5" translate="yes" xml:space="preserve">
          <source>currency (filter)</source>
          <target state="translated">つうかフィルタ</target>
        </trans-unit>
        <trans-unit id="405ab5d2b930fe3725b3cb1ace051f9fd3d6d7af" translate="yes" xml:space="preserve">
          <source>current</source>
          <target state="translated">current</target>
        </trans-unit>
        <trans-unit id="0da51e9d88714e1d42bf061215fcb94e1ec317f3" translate="yes" xml:space="preserve">
          <source>current value if used as getter or itself (chaining) if used as setter</source>
          <target state="translated">ゲッターとして使用される場合は現在の値、セッターとして使用される場合はそれ自体(チェーニング)。</target>
        </trans-unit>
        <trans-unit id="83c235fa7153604b78de8f539a6e1ea81badd05c" translate="yes" xml:space="preserve">
          <source>customFilter([filterFn]);</source>
          <target state="translated">customFilter([filterFn]);</target>
        </trans-unit>
        <trans-unit id="a17c9aaa61e80a1bf71d0d850af4e5baa9800bbd" translate="yes" xml:space="preserve">
          <source>data</source>
          <target state="translated">data</target>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="1fed21df96f828bf4b17f3ade9d398644550665d" translate="yes" xml:space="preserve">
          <source>date (filter)</source>
          <target state="translated">日付</target>
        </trans-unit>
        <trans-unit id="79c4025f6426154a006772464eb9319e97b987a9" translate="yes" xml:space="preserve">
          <source>datetime-local</source>
          <target state="translated">datetime-local</target>
        </trans-unit>
        <trans-unit id="20a7d198d6afda6008beaadca12aaabe231fb979" translate="yes" xml:space="preserve">
          <source>debug();</source>
          <target state="translated">debug();</target>
        </trans-unit>
        <trans-unit id="11f91401a5caa7f84f60657a9bca5965ed824b1b" translate="yes" xml:space="preserve">
          <source>debug.logs</source>
          <target state="translated">debug.logs</target>
        </trans-unit>
        <trans-unit id="e6e0c9c822e67f9478cd303d5b7ece8c29fb4f85" translate="yes" xml:space="preserve">
          <source>debugEnabled([flag]);</source>
          <target state="translated">debugEnabled([flag]);</target>
        </trans-unit>
        <trans-unit id="db5d35916228e56660a5a8fac73a6225c3985e7b" translate="yes" xml:space="preserve">
          <source>debugInfoEnabled([enabled]);</source>
          <target state="translated">debugInfoEnabled([enabled]);</target>
        </trans-unit>
        <trans-unit id="ca321cad00ed1863a8f075f33678ed2975cf9b7f" translate="yes" xml:space="preserve">
          <source>decorFn</source>
          <target state="translated">decorFn</target>
        </trans-unit>
        <trans-unit id="ee329fb660d413c67e1d067f80ee172e6e8b17ed" translate="yes" xml:space="preserve">
          <source>decorator</source>
          <target state="translated">decorator</target>
        </trans-unit>
        <trans-unit id="e814d39b8c647482ee13d32af75b33398d6425dc" translate="yes" xml:space="preserve">
          <source>decorator(name, decorFn);</source>
          <target state="translated">デコレータ(name,decorFn)を使用しています。</target>
        </trans-unit>
        <trans-unit id="e49ce7f4d04a7768ca7de99536b8e613882bdde9" translate="yes" xml:space="preserve">
          <source>decorator(name, decorator);</source>
          <target state="translated">decorator(name,decorator)を使用しています。</target>
        </trans-unit>
        <trans-unit id="c5589a55905e805e54d0f51283348a0503beaab1" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;$element.parent()&lt;/code&gt; resp. &lt;code&gt;$element&lt;/code&gt; for &lt;code&gt;transclude:'element'&lt;/code&gt; resp. &lt;code&gt;transclude:true&lt;/code&gt;.</source>
          <target state="translated">デフォルト： &lt;code&gt;$element.parent()&lt;/code&gt; resp。 &lt;code&gt;$element&lt;/code&gt; のための &lt;code&gt;transclude:'element'&lt;/code&gt; RESP。 &lt;code&gt;transclude:true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b9d266e2ef305531f5a197b746021bf59090e45" translate="yes" xml:space="preserve">
          <source>defaults</source>
          <target state="translated">defaults</target>
        </trans-unit>
        <trans-unit id="2c23ae73fe80881dcfc64aec3d4e6419187ce51c" translate="yes" xml:space="preserve">
          <source>defer();</source>
          <target state="translated">defer();</target>
        </trans-unit>
        <trans-unit id="349221fc49e362e20c2cc36cb013b199bb94b8ed" translate="yes" xml:space="preserve">
          <source>defines the parent to which the &lt;code&gt;cloneLinkingFn&lt;/code&gt; will add the cloned elements.</source>
          <target state="translated">&lt;code&gt;cloneLinkingFn&lt;/code&gt; が複製された要素を追加する親を定義します。</target>
        </trans-unit>
        <trans-unit id="ab464f0252045aaf075411f0f1a6aed0797306c1" translate="yes" xml:space="preserve">
          <source>delay</source>
          <target state="translated">delay</target>
        </trans-unit>
        <trans-unit id="deb0c5efabe5381fec4da90741ac9ac67289b4ec" translate="yes" xml:space="preserve">
          <source>delayed/lazy initialization</source>
          <target state="translated">遅延/遅延初期化</target>
        </trans-unit>
        <trans-unit id="c451d26cc712fc49d59c203e486f0271dc52dfed" translate="yes" xml:space="preserve">
          <source>delete(url, [config]);</source>
          <target state="translated">delete(url,[config])。</target>
        </trans-unit>
        <trans-unit id="52913b58f7309ec1a10aef837f481b9cecc9707a" translate="yes" xml:space="preserve">
          <source>dependency injection container</source>
          <target state="translated">いぞんぞくせいインジェクションコンテナ</target>
        </trans-unit>
        <trans-unit id="0cf1bc84bb8baca804f9015a158e88642d415ffa" translate="yes" xml:space="preserve">
          <source>destination</source>
          <target state="translated">destination</target>
        </trans-unit>
        <trans-unit id="7af5b5c0ddd59324f0fbb610d085e24b862405a0" translate="yes" xml:space="preserve">
          <source>destroy();</source>
          <target state="translated">destroy();</target>
        </trans-unit>
        <trans-unit id="c3b8bd8133fead79ea023f3a6bba36ff2fbef59d" translate="yes" xml:space="preserve">
          <source>digestTtl(limit);</source>
          <target state="translated">digestTtl(limit);</target>
        </trans-unit>
        <trans-unit id="3d981bf920ab98c455a9796d062745b9d6b5cbfb" translate="yes" xml:space="preserve">
          <source>directive</source>
          <target state="translated">directive</target>
        </trans-unit>
        <trans-unit id="47b62e4cb2459e9ef19a8817586e10c8648f22ee" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../nganimate&quot;&gt;ngAnimateの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="0111c19cb3ab20c7c050a43b401903feb7ea963e" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngcomponentrouter&quot;&gt;ngComponentRouter&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../ngcomponentrouter&quot;&gt;ngComponentRouterの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="82aed0239debf8325e9be4f6bed1c9c18a2fe125" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngmessages&quot;&gt;ngMessages&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../ngmessages&quot;&gt;ngMessagesの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="9d171814614f791eb4b283550352d1fb4e11f06f" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngroute&quot;&gt;ngRoute&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../ngroute&quot;&gt;ngRouteの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="2a66c70c6e27b86a0f31ab611cf6a2218895fbf8" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngtouch&quot;&gt;ngTouch&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../ngtouch&quot;&gt;ngTouchの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="dbc2b432a84848b99b7873866c196a072fca402b" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ngの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="8d5a49a5ec875fa0d91d2962766558c31c917fef" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ngの&lt;/a&gt;ディレクティブ</target>
        </trans-unit>
        <trans-unit id="86637b3ffda5786b80965a8ea6d3ce474e20fbbe" translate="yes" xml:space="preserve">
          <source>directive(name, directiveFactory);</source>
          <target state="translated">ディレクティブ(name,directiveFactory)を使用しています。</target>
        </trans-unit>
        <trans-unit id="33b8875e5606c60e0239a2bc975e0b44cba62d4a" translate="yes" xml:space="preserve">
          <source>directiveFactory</source>
          <target state="translated">directiveFactory</target>
        </trans-unit>
        <trans-unit id="a937ebb2f9de267c334d1a23a85791e538aa721c" translate="yes" xml:space="preserve">
          <source>disableAutoScrolling();</source>
          <target state="translated">disableAutoScrolling();</target>
        </trans-unit>
        <trans-unit id="a7f719bf74e49f78da1a4edfed258b184a7054ff" translate="yes" xml:space="preserve">
          <source>dst</source>
          <target state="translated">dst</target>
        </trans-unit>
        <trans-unit id="bc03739443888c892beb69b563c0fbd968153207" translate="yes" xml:space="preserve">
          <source>eagerInstantiationEnabled([enabled]);</source>
          <target state="translated">eagerInstantiationEnabled([enabled]);</target>
        </trans-unit>
        <trans-unit id="6d1f7dd43b36cf6e1ef51a3c3f6d1344e4d9d46d" translate="yes" xml:space="preserve">
          <source>egghead.io</source>
          <target state="translated">egghead.io</target>
        </trans-unit>
        <trans-unit id="dece05484839df110745b0a800297c33cc078287" translate="yes" xml:space="preserve">
          <source>element</source>
          <target state="translated">element</target>
        </trans-unit>
        <trans-unit id="eb6166ad40e221ebed68bfdab1bbce8cc65810c7" translate="yes" xml:space="preserve">
          <source>elementName</source>
          <target state="translated">elementName</target>
        </trans-unit>
        <trans-unit id="6851b3982dec35e29a2f2f6d0b028f8311aa1a47" translate="yes" xml:space="preserve">
          <source>elements</source>
          <target state="translated">elements</target>
        </trans-unit>
        <trans-unit id="a88b7dcd1a9e3e17770bbaa6d7515b31a2d7e85d" translate="yes" xml:space="preserve">
          <source>email</source>
          <target state="translated">email</target>
        </trans-unit>
        <trans-unit id="2e96e89125f4c1aef797410a4bfdb32c0632ef0c" translate="yes" xml:space="preserve">
          <source>emit</source>
          <target state="translated">emit</target>
        </trans-unit>
        <trans-unit id="f086997bda9bf63d6c9e59f0964a38dfbc6f8f54" translate="yes" xml:space="preserve">
          <source>enable or disable debug level messages</source>
          <target state="translated">デバッグレベルのメッセージを有効または無効にする</target>
        </trans-unit>
        <trans-unit id="f6e41a60eca4bef5b429034e2b153253f2761beb" translate="yes" xml:space="preserve">
          <source>enable/disable Strict Contextual Escaping (SCE) in a module</source>
          <target state="translated">モジュールで厳密なコンテキストエスケープ (SCE)を有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="8bc933cbe3b110e20547014b2993b107c2447c75" translate="yes" xml:space="preserve">
          <source>enableSvg([flag]);</source>
          <target state="translated">enableSvg([flag]);</target>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="translated">enabled</target>
        </trans-unit>
        <trans-unit id="877a1c6f470f456114603d0e490364f4872a1631" translate="yes" xml:space="preserve">
          <source>enabled([element], [enabled]);</source>
          <target state="translated">enabled([element],[enabled])を使用しています。</target>
        </trans-unit>
        <trans-unit id="4a4ad8e3c4fe48aa830c680066f76acae5438ebe" translate="yes" xml:space="preserve">
          <source>enabled([value]);</source>
          <target state="translated">enabled([value]);</target>
        </trans-unit>
        <trans-unit id="201ad6c99ab5d8e0205ef873c7f6fc97ad74a5ae" translate="yes" xml:space="preserve">
          <source>end symbol.</source>
          <target state="translated">エンドシンボルです。</target>
        </trans-unit>
        <trans-unit id="fdb2ad96fab569039bb49548ff185e1481af777c" translate="yes" xml:space="preserve">
          <source>endSymbol();</source>
          <target state="translated">endSymbol();</target>
        </trans-unit>
        <trans-unit id="30d00ba2d57c5ad464794297a7ae81c8a2a1b978" translate="yes" xml:space="preserve">
          <source>endSymbol([value]);</source>
          <target state="translated">endSymbol([value]);</target>
        </trans-unit>
        <trans-unit id="3674951ec264a72168cb2d89a5f634e512f6629d" translate="yes" xml:space="preserve">
          <source>enter</source>
          <target state="translated">enter</target>
        </trans-unit>
        <trans-unit id="d8dd377cb3e469adeb813af0eaaf26d9079ab62b" translate="yes" xml:space="preserve">
          <source>enter and leave</source>
          <target state="translated">出入り</target>
        </trans-unit>
        <trans-unit id="2f6b8815207bb3d7f8a683bc4ad4c01c61ea035b" translate="yes" xml:space="preserve">
          <source>enter(element, parent, [after], [options]);</source>
          <target state="translated">enter(element,parent,[after],[options])。</target>
        </trans-unit>
        <trans-unit id="3ff05e39b6db7ae28005ad2565bca502710e96f5" translate="yes" xml:space="preserve">
          <source>enter, leave, and move</source>
          <target state="translated">出入りする</target>
        </trans-unit>
        <trans-unit id="72a898ee4de48190f7f76cec0956a5a5a7f56a1a" translate="yes" xml:space="preserve">
          <source>enter, leave, move: function(element, doneFunction, options)</source>
          <target state="translated">enter,leave,move:function(element,doneFunction,options)</target>
        </trans-unit>
        <trans-unit id="664e31f5f10da2f404d6364c868a8167c13e1acf" translate="yes" xml:space="preserve">
          <source>error();</source>
          <target state="translated">error();</target>
        </trans-unit>
        <trans-unit id="d95befb3b2a5832a908a4db4f3534e5e6e8d05fe" translate="yes" xml:space="preserve">
          <source>error.logs</source>
          <target state="translated">error.logs</target>
        </trans-unit>
        <trans-unit id="7e3bdbd182f7effdc78c07b78699dcbfec75d71c" translate="yes" xml:space="preserve">
          <source>errorCallback</source>
          <target state="translated">errorCallback</target>
        </trans-unit>
        <trans-unit id="84c8e2fd7b284a052478ebb0c729104f129ccb8a" translate="yes" xml:space="preserve">
          <source>errorOnUnhandledRejections([value]);</source>
          <target state="translated">errorOnUnhandledRejections([value]);</target>
        </trans-unit>
        <trans-unit id="5006ed0248a019713b762563076292379daf07b4" translate="yes" xml:space="preserve">
          <source>event</source>
          <target state="translated">event</target>
        </trans-unit>
        <trans-unit id="201f780d7a628efcc7dc2aa79a23bd8657fced73" translate="yes" xml:space="preserve">
          <source>event | container</source>
          <target state="translated">イベント|コンテナ</target>
        </trans-unit>
        <trans-unit id="4b4e79c5041a3518a8f1f56a688f67404e6cd0c9" translate="yes" xml:space="preserve">
          <source>eventData</source>
          <target state="translated">eventData</target>
        </trans-unit>
        <trans-unit id="c6b2d1e59b7df1013f4f87d97ff1bffc5a212b6c" translate="yes" xml:space="preserve">
          <source>eventType</source>
          <target state="translated">eventType</target>
        </trans-unit>
        <trans-unit id="5d42ad1769f229c76031f30a404b4f7863d68de0" translate="yes" xml:space="preserve">
          <source>exception</source>
          <target state="translated">exception</target>
        </trans-unit>
        <trans-unit id="86b77de2442fe05048f19c766138a551aa2543be" translate="yes" xml:space="preserve">
          <source>exp</source>
          <target state="translated">exp</target>
        </trans-unit>
        <trans-unit id="cb8acb66ef8c8601ef87dc98152d7f55e2c4e1ef" translate="yes" xml:space="preserve">
          <source>expect(method, url, [data], [headers], [keys]);</source>
          <target state="translated">expect(method,url,[data],[headers],[keys])。</target>
        </trans-unit>
        <trans-unit id="fdffe4d2bdd2f77ebd6338c0b222668ae5ab4121" translate="yes" xml:space="preserve">
          <source>expectDELETE(url, [headers], [keys]);</source>
          <target state="translated">expectDELETE(url,[header],[keys])。</target>
        </trans-unit>
        <trans-unit id="d34c2f8382fe1bb3d5a846704dbafd43df6177d0" translate="yes" xml:space="preserve">
          <source>expectGET(url, [headers], [keys]);</source>
          <target state="translated">expectGET(url,[headers],[keys])。</target>
        </trans-unit>
        <trans-unit id="b589fbac0470ac5b1ead26d2a8d55be33e19e8ba" translate="yes" xml:space="preserve">
          <source>expectHEAD(url, [headers], [keys]);</source>
          <target state="translated">expectHEAD(url,[headers],[keys])。</target>
        </trans-unit>
        <trans-unit id="fbe90b6b30245b31434fb5e458c93f34612977d9" translate="yes" xml:space="preserve">
          <source>expectJSONP(url, [keys]);</source>
          <target state="translated">となります。</target>
        </trans-unit>
        <trans-unit id="068de8bdba72b9723e5e3c8198bcfa1e17e763b2" translate="yes" xml:space="preserve">
          <source>expectPATCH(url, [data], [headers], [keys]);</source>
          <target state="translated">expectPATCH(url,[data],[header],[keys])。</target>
        </trans-unit>
        <trans-unit id="5e361ddfe0995ac36991c116e0534f23733c6dec" translate="yes" xml:space="preserve">
          <source>expectPOST(url, [data], [headers], [keys]);</source>
          <target state="translated">expectPOST(url,[data],[header],[keys])。</target>
        </trans-unit>
        <trans-unit id="f8976da304fdadbd1255de84166111cfb98c1e94" translate="yes" xml:space="preserve">
          <source>expectPUT(url, [data], [headers], [keys]);</source>
          <target state="translated">expectPUT(url,[data],[header],[keys])。</target>
        </trans-unit>
        <trans-unit id="8f35f2ad3a859c1c29f961b65f7d51a7a26ed108" translate="yes" xml:space="preserve">
          <source>expectRoute(method, url);</source>
          <target state="translated">とすることで、「expectRoute(method,url)」のようになります。</target>
        </trans-unit>
        <trans-unit id="f4c179cec9f41981b02442dccb7656db22cf776b" translate="yes" xml:space="preserve">
          <source>exposes &quot;raw&quot; object with properties that can be directly modified</source>
          <target state="translated">直接変更可能なプロパティを持つ &quot;生の&quot; オブジェクトを公開します。</target>
        </trans-unit>
        <trans-unit id="cd073c3c2c6f87a99b8741f9ec06932558451cd6" translate="yes" xml:space="preserve">
          <source>exposes jQuery-style getters and setters</source>
          <target state="translated">jQuery スタイルのゲッターとセッターを公開します。</target>
        </trans-unit>
        <trans-unit id="ec9814396ba26fa02dc3261046ba55a3b4bb32a6" translate="yes" xml:space="preserve">
          <source>expression</source>
          <target state="translated">expression</target>
        </trans-unit>
        <trans-unit id="dd3542698c8d474d084009d0f54effe3f281f317" translate="yes" xml:space="preserve">
          <source>expression to match against &lt;code&gt;ng-switch-when&lt;/code&gt;. On child elements add:</source>
          <target state="translated">&lt;code&gt;ng-switch-when&lt;/code&gt; と照合する式。子要素に次を追加します。</target>
        </trans-unit>
        <trans-unit id="937ab7a36113c2ad802ec17e0352cb05719ca9de" translate="yes" xml:space="preserve">
          <source>extend HTML with custom attributes and elements</source>
          <target state="translated">カスタム属性と要素でHTMLを拡張する</target>
        </trans-unit>
        <trans-unit id="7b202d57f214af016fe2923be40110740dd5bb91" translate="yes" xml:space="preserve">
          <source>factory</source>
          <target state="translated">factory</target>
        </trans-unit>
        <trans-unit id="51431ec4744ac283eb7231d4a8574ddcb6c42491" translate="yes" xml:space="preserve">
          <source>factory(name, $getFn);</source>
          <target state="translated">ファクトリー(name,$getFn).</target>
        </trans-unit>
        <trans-unit id="debb1a6bfaabae284e1dd5fbd69356412cd946ed" translate="yes" xml:space="preserve">
          <source>factory(name, providerFunction);</source>
          <target state="translated">ファクトリー(name,providerFunction)を使用しています。</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="ccf0eff8251d5d2e6b0a72571f7bc0ab830ed392" translate="yes" xml:space="preserve">
          <source>filter (filter)</source>
          <target state="translated">濾す</target>
        </trans-unit>
        <trans-unit id="2a7cce727e6ce3450f80d2eba3aaabc860e697cf" translate="yes" xml:space="preserve">
          <source>filter in module &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitizeの&lt;/a&gt;フィルター</target>
        </trans-unit>
        <trans-unit id="b58b121cec378be53223d364b8103a9b646bb9a2" translate="yes" xml:space="preserve">
          <source>filter in module &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ngの&lt;/a&gt;フィルター</target>
        </trans-unit>
        <trans-unit id="a49525f30e63f2049225fa212c85fe2320a4f736" translate="yes" xml:space="preserve">
          <source>filter in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ngの&lt;/a&gt;フィルター</target>
        </trans-unit>
        <trans-unit id="d575ec7fb7ae300e3127e48dcf5b4f9c341a07b2" translate="yes" xml:space="preserve">
          <source>filter(name, filterFactory);</source>
          <target state="translated">filter(name,filterFactory)を使用しています。</target>
        </trans-unit>
        <trans-unit id="13d83525d97c19f216e466d7c5ad44c265937cdc" translate="yes" xml:space="preserve">
          <source>filterFactory</source>
          <target state="translated">filterFactory</target>
        </trans-unit>
        <trans-unit id="9a73b41a3e25b1fe4ae7f66722179d67dcfb66d7" translate="yes" xml:space="preserve">
          <source>filterFn</source>
          <target state="translated">filterFn</target>
        </trans-unit>
        <trans-unit id="112f3a99b283a4e1788dedd8e0e5d35375c33747" translate="yes" xml:space="preserve">
          <source>flag</source>
          <target state="translated">flag</target>
        </trans-unit>
        <trans-unit id="7173ae30958deb9e47aa164e00f376f52584ad19" translate="yes" xml:space="preserve">
          <source>flush();</source>
          <target state="translated">flush();</target>
        </trans-unit>
        <trans-unit id="dfd237798ca041be9fbe0ab0e537b4d8298ea118" translate="yes" xml:space="preserve">
          <source>flush([count], [skip]);</source>
          <target state="translated">flush([count],[skip])。</target>
        </trans-unit>
        <trans-unit id="c1402bea9f88134f8bc07cb2f6e2553c3f5a671a" translate="yes" xml:space="preserve">
          <source>flush([delay]);</source>
          <target state="translated">flush([delay]);</target>
        </trans-unit>
        <trans-unit id="993c16ab62f88a46c3eca8c365b9879968f6a56f" translate="yes" xml:space="preserve">
          <source>flush(millis);</source>
          <target state="translated">flush(millis);</target>
        </trans-unit>
        <trans-unit id="47fdd9283ded80c62bb5e40ce65b0e49a48675b3" translate="yes" xml:space="preserve">
          <source>fn</source>
          <target state="translated">fn</target>
        </trans-unit>
        <trans-unit id="02ed8b1bddbce9e00f5850e2cb77e952d834581b" translate="yes" xml:space="preserve">
          <source>fns</source>
          <target state="translated">fns</target>
        </trans-unit>
        <trans-unit id="dc7b7daa04fef718ab8736c4d7325598e61a3b33" translate="yes" xml:space="preserve">
          <source>for array data sources:</source>
          <target state="translated">配列データソースのための</target>
        </trans-unit>
        <trans-unit id="cafe3d63b7da090a87138adde8ac83f43dfb0c57" translate="yes" xml:space="preserve">
          <source>for directives that need to perform actions in compile and pre-link functions, because they aren't available</source>
          <target state="translated">コンパイル関数やプリリンク関数でアクションを実行する必要があるディレクティブが利用できません。</target>
        </trans-unit>
        <trans-unit id="b7670c86af4cb114f150fe62360301f9949f6746" translate="yes" xml:space="preserve">
          <source>for example, &lt;code&gt;ngOptions&lt;/code&gt; will do so when a &lt;code&gt;track by&lt;/code&gt; clause is included in the comprehension expression or if the select is given the &lt;code&gt;multiple&lt;/code&gt; attribute.</source>
          <target state="translated">たとえば、 &lt;code&gt;ngOptions&lt;/code&gt; は、 &lt;code&gt;track by&lt;/code&gt; 句が内包式に含まれている場合、またはselectに &lt;code&gt;multiple&lt;/code&gt; 属性が指定されている場合にそうします。</target>
        </trans-unit>
        <trans-unit id="f42678cc70796a97bf5bc3ea4d9fab04eba12378" translate="yes" xml:space="preserve">
          <source>for object data sources:</source>
          <target state="translated">オブジェクトデータソースのための</target>
        </trans-unit>
        <trans-unit id="d00b39815c187d832cef3239eb7a77580728dc47" translate="yes" xml:space="preserve">
          <source>form</source>
          <target state="translated">form</target>
        </trans-unit>
        <trans-unit id="61e62b67c352e9c95ac08a1e01814af5b0b0ba11" translate="yes" xml:space="preserve">
          <source>form (directive)</source>
          <target state="translated">けいしき</target>
        </trans-unit>
        <trans-unit id="77ab24d984abc898aa6b04bd2ba231c82ccb745e" translate="yes" xml:space="preserve">
          <source>form / ngForm</source>
          <target state="translated">フォーム/ngForm</target>
        </trans-unit>
        <trans-unit id="4d9bd194eea91ba31eceb828e539bad68e682c7c" translate="yes" xml:space="preserve">
          <source>form.FormController</source>
          <target state="translated">form.FormController</target>
        </trans-unit>
        <trans-unit id="785987648f85190cfde9eadc69fc7c46fe8a7433" translate="yes" xml:space="preserve">
          <source>format</source>
          <target state="translated">format</target>
        </trans-unit>
        <trans-unit id="85135001148e5c30ae56e85b9f779455ac95e18a" translate="yes" xml:space="preserve">
          <source>formats the value of an expression for display to the user</source>
          <target state="translated">は、ユーザーに表示するために式の値をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="ca3ad6fbb8a83c0baf4db36b289fd1296aae5ee9" translate="yes" xml:space="preserve">
          <source>fractionSize</source>
          <target state="translated">fractionSize</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="942a84d29aa490822331c9095e5b784b79ed8b03" translate="yes" xml:space="preserve">
          <source>from - &lt;code&gt;{Object|null}&lt;/code&gt; - CSS properties &amp;amp; values at the beginning of the animation</source>
          <target state="translated">- &lt;code&gt;{Object|null}&lt;/code&gt; -アニメーションの先頭にCSSプロパティ＆値</target>
        </trans-unit>
        <trans-unit id="dda2f47c36a01d6dff7f5514b2c96de5bb42ff3d" translate="yes" xml:space="preserve">
          <source>full URL</source>
          <target state="translated">フルURL</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="9f411fbc41512390f09aa4194c2d4d420ca6bbcd" translate="yes" xml:space="preserve">
          <source>function available to directives - DEPRECATED.</source>
          <target state="translated">ディレクティブで利用可能な関数-DEPRECATED。</target>
        </trans-unit>
        <trans-unit id="48f4611c3d5b0ac6a0c91073b5d2f392f0380a4a" translate="yes" xml:space="preserve">
          <source>function in module &lt;a href=&quot;../../ngmock&quot;&gt;ngMock&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;../../ngmock&quot;&gt;ngMockの&lt;/a&gt;関数</target>
        </trans-unit>
        <trans-unit id="77c1501b90526395365d09f99fa02c98cb416963" translate="yes" xml:space="preserve">
          <source>function in module &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ngの&lt;/a&gt;関数</target>
        </trans-unit>
        <trans-unit id="187d172e6bec1ea023678bcdaea03195fdfb79b9" translate="yes" xml:space="preserve">
          <source>function in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ngの&lt;/a&gt;関数</target>
        </trans-unit>
        <trans-unit id="005a50334d33a38a723b1db11dd3faf29d3bedb2" translate="yes" xml:space="preserve">
          <source>get(cacheId);</source>
          <target state="translated">get(cacheId);</target>
        </trans-unit>
        <trans-unit id="d2c2f7019d27df382aae1474a42251734ae97c2d" translate="yes" xml:space="preserve">
          <source>get(key);</source>
          <target state="translated">get(key);</target>
        </trans-unit>
        <trans-unit id="cb02ade0695bd9427d9d12f83cdc79528d7f45ac" translate="yes" xml:space="preserve">
          <source>get(name, [caller]);</source>
          <target state="translated">get(name,[caller])。</target>
        </trans-unit>
        <trans-unit id="1b6aa88178cd386db7e6f6e59df1053b31367b51" translate="yes" xml:space="preserve">
          <source>get(url, [config]);</source>
          <target state="translated">get(url,[config])を取得します。</target>
        </trans-unit>
        <trans-unit id="13300e1c80eda74b6ff8b14081724fc0ee5416c2" translate="yes" xml:space="preserve">
          <source>getAll();</source>
          <target state="translated">getAll();</target>
        </trans-unit>
        <trans-unit id="11e2d0e3cfda6ab2a8aed0b68742304b84ab843f" translate="yes" xml:space="preserve">
          <source>getObject(key);</source>
          <target state="translated">getObject(key);</target>
        </trans-unit>
        <trans-unit id="d0ec47d3bfb6fc32354d73b84d4e8b4e8202d704" translate="yes" xml:space="preserve">
          <source>getOption(name);</source>
          <target state="translated">getOption(name);</target>
        </trans-unit>
        <trans-unit id="97a040f4d452cafdf708229143c844e00f42664a" translate="yes" xml:space="preserve">
          <source>getResponse(callbackPath);</source>
          <target state="translated">getResponse(callbackPath);</target>
        </trans-unit>
        <trans-unit id="27eb84097baaa0bfb02994e9af554a0f37e92d9f" translate="yes" xml:space="preserve">
          <source>getTrusted(type, maybeTrusted);</source>
          <target state="translated">getTrusted(type,maybeTrusted)。</target>
        </trans-unit>
        <trans-unit id="79ba6eb7d9b88ec662619b9907db0b5108f3a864" translate="yes" xml:space="preserve">
          <source>getTrustedCss(value);</source>
          <target state="translated">getTrustedCss(value);</target>
        </trans-unit>
        <trans-unit id="fc70e88a40dcbd4d0757bfb956d803623d2d5912" translate="yes" xml:space="preserve">
          <source>getTrustedHtml(value);</source>
          <target state="translated">getTrustedHtml(value);</target>
        </trans-unit>
        <trans-unit id="870fd3326442cb10007e0707cff9b63a2b366141" translate="yes" xml:space="preserve">
          <source>getTrustedJs(value);</source>
          <target state="translated">getTrustedJs(value);</target>
        </trans-unit>
        <trans-unit id="93db87de12a3fd001092d3dd6fb63b7af3ec32ba" translate="yes" xml:space="preserve">
          <source>getTrustedResourceUrl(value);</source>
          <target state="translated">getTrustedResourceUrl(value);</target>
        </trans-unit>
        <trans-unit id="dae21969c8522a157bb2f491d00264f56aff5bea" translate="yes" xml:space="preserve">
          <source>getTrustedUrl(value);</source>
          <target state="translated">getTrustedUrl(value);</target>
        </trans-unit>
        <trans-unit id="57b752316b777d8004d25d03ae168cfe92901a15" translate="yes" xml:space="preserve">
          <source>has(name);</source>
          <target state="translated">has(name);</target>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="5011f8c863ac0929fe6f292bb4c5780a2b68a457" translate="yes" xml:space="preserve">
          <source>hash([hash]);</source>
          <target state="translated">hash([hash]);</target>
        </trans-unit>
        <trans-unit id="7b3406e76e32f7bd7efc7d17d790718fa6b1d176" translate="yes" xml:space="preserve">
          <source>hashPrefix([prefix]);</source>
          <target state="translated">hashPrefix([prefix]);</target>
        </trans-unit>
        <trans-unit id="e949ab70bba0802d7f2a30ac9c254ded0a053780" translate="yes" xml:space="preserve">
          <source>hashbang URLs in all browsers</source>
          <target state="translated">全ブラウザでのハッシュバングURL</target>
        </trans-unit>
        <trans-unit id="2742e9f75a3216ba049cd4a687ccd4f30f3eeb19" translate="yes" xml:space="preserve">
          <source>head(url, [config]);</source>
          <target state="translated">head(url,[config])。</target>
        </trans-unit>
        <trans-unit id="26b47e3d825258ae534f85838d81e93ddd46db1f" translate="yes" xml:space="preserve">
          <source>headers</source>
          <target state="translated">headers</target>
        </trans-unit>
        <trans-unit id="8c617edd42200ec961f3e4700877ccc486005b22" translate="yes" xml:space="preserve">
          <source>host of current URL.</source>
          <target state="translated">現在のURLのホスト。</target>
        </trans-unit>
        <trans-unit id="3565db349b4ddc2cce331ecf3cf17a773858b8d9" translate="yes" xml:space="preserve">
          <source>host();</source>
          <target state="translated">host();</target>
        </trans-unit>
        <trans-unit id="950a39b6c2934bb72f2def76c71e88e9c035385f" translate="yes" xml:space="preserve">
          <source>html</source>
          <target state="translated">html</target>
        </trans-unit>
        <trans-unit id="42ecd656fcf59d096f584731f50607fa1e0f31af" translate="yes" xml:space="preserve">
          <source>html5Mode object if used as getter or itself (chaining) if used as setter</source>
          <target state="translated">ゲッターとして使用される場合は html5Mode オブジェクト、セッターとして使用される場合はそれ自体(チェーン)を使用します。</target>
        </trans-unit>
        <trans-unit id="be78385bc3b2282b25b438455f850a1c1919e3a6" translate="yes" xml:space="preserve">
          <source>html5Mode([mode]);</source>
          <target state="translated">html5Mode([mode]);</target>
        </trans-unit>
        <trans-unit id="233e9fc440ca4105099cbb152164be799308509d" translate="yes" xml:space="preserve">
          <source>httpOptions([value]);</source>
          <target state="translated">httpOptions([value]);</target>
        </trans-unit>
        <trans-unit id="77a7e87262d487488d8a620545c9be9bdf0ad8a8" translate="yes" xml:space="preserve">
          <source>i18n and l10n</source>
          <target state="translated">I18NとL10N</target>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="translated">id</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
