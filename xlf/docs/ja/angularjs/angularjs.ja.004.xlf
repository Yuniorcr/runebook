<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">どうやって使うのか?</target>
        </trans-unit>
        <trans-unit id="88ed97b08c81463ee06f53f3b6c1779c600aa1c6" translate="yes" xml:space="preserve">
          <source>How is the element transported?</source>
          <target state="translated">元素はどのようにして運ばれるのですか?</target>
        </trans-unit>
        <trans-unit id="8faafbf047891a8907eb94c858a2397c59b48b6b" translate="yes" xml:space="preserve">
          <source>How is the morphing handled?</source>
          <target state="translated">モーフィングはどのように処理されているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="f0b1fc1ac088c2160c01191d7d56a0bae6f8e3aa" translate="yes" xml:space="preserve">
          <source>How text and attribute bindings work</source>
          <target state="translated">テキストと属性バインディングの仕組み</target>
        </trans-unit>
        <trans-unit id="6348c07b83ad0bb6dae1ec6cd1b77c21662b9a62" translate="yes" xml:space="preserve">
          <source>How the Options are handled</source>
          <target state="translated">オプションの取り扱い方法</target>
        </trans-unit>
        <trans-unit id="2a6cb3a378b1a04b05ce40f114a5850c30af8933" translate="yes" xml:space="preserve">
          <source>How the string representation is computed</source>
          <target state="translated">文字列表現の計算方法</target>
        </trans-unit>
        <trans-unit id="4aa425ac030122afe10e7f53638d920844d71819" translate="yes" xml:space="preserve">
          <source>How they work</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="6e13b2dba241833a9f148d24533b2b4f0e74bb53" translate="yes" xml:space="preserve">
          <source>How to (selectively) enable, disable and skip animations</source>
          <target state="translated">アニメーションの有効化、無効化、スキップを(選択的に)行う方法</target>
        </trans-unit>
        <trans-unit id="a25fb8be7987e971198c72036edd9325e925e49a" translate="yes" xml:space="preserve">
          <source>How to benefit from one-time binding</source>
          <target state="translated">ワンタイムバインディングの恩恵を受ける方法</target>
        </trans-unit>
        <trans-unit id="cd8d1af145e22f4071b3803ea34db2257342448d" translate="yes" xml:space="preserve">
          <source>How to use decorators</source>
          <target state="translated">デコレーターの使い方</target>
        </trans-unit>
        <trans-unit id="c2a2f74412612724a85fc7c3904fcb3d54c23855" translate="yes" xml:space="preserve">
          <source>How would you ensure that every place that used these types of bindings was bound to a value that was sanitized by your library (or returned as safe for rendering by your server?) How can you ensure that you didn't accidentally delete the line that sanitized the value, or renamed some properties/fields and forgot to update the binding to the sanitized value?</source>
          <target state="translated">このようなタイプのバインディングを使用するすべての場所が、ライブラリによってサニタイズされた値にバインドされていることを保証するにはどうしたらよいでしょうか (あるいは、サーバによってレンダリングに安全な値として返されていることを保証するにはどうしたらよいでしょうか)値をサニタイズした行を誤って削除したり、プロパティやフィールドの名前を変更して、サニタイズされた値へのバインディングを更新するのを忘れてしまったりしないことを保証するにはどうしたらよいでしょうか?</target>
        </trans-unit>
        <trans-unit id="69e8e5e39cfe987166eee61d96837365193ccc8b" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;isolated&lt;/code&gt; scope creates a new problem: if a transcluded DOM is a child of the widget isolated scope then it will not be able to bind to anything. For this reason the transcluded scope is a child of the original scope, before the widget created an isolated scope for its local variables. This makes the transcluded and widget isolated scope siblings.</source>
          <target state="translated">ただし、 &lt;code&gt;isolated&lt;/code&gt; スコープは新しい問題を作成します。トランスクルードされたDOMがウィジェットの分離されたスコープの子である場合、何にもバインドできません。このため、ウィジェットがローカル変数の分離スコープを作成する前は、変換されたスコープは元のスコープの子です。これにより、変換されたウィジェットとスコープが分離されたスコープの兄弟になります。</target>
        </trans-unit>
        <trans-unit id="60975c6582a2823450029e613dcd8a25e14ebad5" translate="yes" xml:space="preserve">
          <source>However it's more likely that you'll just use &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; or &lt;a href=&quot;angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to simplify this process for you.</source>
          <target state="translated">ただし、このプロセスを簡略化するには、&lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;または&lt;a href=&quot;angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;を使用する可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="999f598a92635af8c6759e6c95a25535ddb1aa15" translate="yes" xml:space="preserve">
          <source>However this method will not work with JavaScript minifiers/obfuscators because of how they rename parameters.</source>
          <target state="translated">しかし、このメソッドはJavaScriptのminifiers/obfuscatorではパラメータの名前を変更するため、動作しません。</target>
        </trans-unit>
        <trans-unit id="74b78a2717429ba3b6055f58ec7371c056ceb4fc" translate="yes" xml:space="preserve">
          <source>However, &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; often use custom properties to hold data, and &lt;code&gt;ngProp&lt;/code&gt; can be used to provide input to these custom elements.</source>
          <target state="translated">ただし、&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素は&lt;/a&gt;データを保持するためにカスタムプロパティを使用することが多く、 &lt;code&gt;ngProp&lt;/code&gt; を使用してこれらのカスタム要素に入力を提供できます。</target>
        </trans-unit>
        <trans-unit id="6c6bf585a28c6122be3e1b01347c02c5c70bc897" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;step&lt;/code&gt; is currently only fully implemented by Firefox. Other browsers have problems when the step value changes dynamically - they do not adjust the element value correctly, but instead may set the &lt;code&gt;stepMismatch&lt;/code&gt; error. If that's the case, the AngularJS will set the &lt;code&gt;step&lt;/code&gt; error on the input, and set the model to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;step&lt;/code&gt; は現在Firefoxでのみ完全に実装されています。他のブラウザでは、ステップ値が動的に変化すると問題が発生します。要素値が正しく調整されませんが、代わりに &lt;code&gt;stepMismatch&lt;/code&gt; エラーが設定される場合があります。その場合、AngularJSは入力に &lt;code&gt;step&lt;/code&gt; エラーを設定し、モデルを &lt;code&gt;undefined&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="9ef1218d8c362088f0bcdd7920f20b4f50be4419" translate="yes" xml:space="preserve">
          <source>However, if the method is used programmatically, for example by adding dynamically created controls, or controls that have been previously removed without destroying their corresponding DOM element, it's the developers responsibility to make sure the current state propagates to the parent form.</source>
          <target state="translated">しかし、動的に作成されたコントロールを追加したり、対応する DOM 要素を破棄せずに以前に削除されたコントロールを追加したりするなど、プログラム的にこのメソッドが使われる場合、現在の状態が親フォームに伝搬することを確認するのは開発者の責任です。</target>
        </trans-unit>
        <trans-unit id="7833f0d3d950db315e3b6d2099d681792715c7c0" translate="yes" xml:space="preserve">
          <source>However, including generic messages may not be useful enough to match all input fields, therefore, &lt;code&gt;ngMessages&lt;/code&gt; provides the ability to override messages defined in the remote template by redefining them within the directive container.</source>
          <target state="translated">ただし、一般的なメッセージを含めることは、すべての入力フィールドを照合するには十分でない場合があるため、 &lt;code&gt;ngMessages&lt;/code&gt; は、ディレクティブコンテナー内でメッセージを再定義することにより、リモートテンプレートで定義されたメッセージをオーバーライドする機能を提供します。</target>
        </trans-unit>
        <trans-unit id="877ce4a445ea5e831a4f4c27b0f0efa155233b3c" translate="yes" xml:space="preserve">
          <source>However, the declarative language is also limited, as it does not allow you to teach the browser new syntax. For example, there is no easy way to get the browser to align the text at 1/3 the position instead of 1/2. What is needed is a way to teach the browser new HTML syntax.</source>
          <target state="translated">しかし、宣言型言語ではブラウザに新しい構文を教えることができないため、宣言型言語にも限界があります。例えば、ブラウザにテキストを1/2ではなく1/3の位置に整列させる簡単な方法はありません。必要なのは、ブラウザに新しいHTML構文を教える方法です。</target>
        </trans-unit>
        <trans-unit id="3c9c0adee926699e18a27b00b88771ce6b3e9fc7" translate="yes" xml:space="preserve">
          <source>However, the more traditional CommonJS-style usage is still available, and documented below.</source>
          <target state="translated">しかし、より伝統的なCommonJSスタイルの使用法はまだ利用可能であり、以下に文書化されています。</target>
        </trans-unit>
        <trans-unit id="00996f9232afaff711c6ebfe08928b5cfb6f6845" translate="yes" xml:space="preserve">
          <source>However, there are a few limitations compared to array iteration:</source>
          <target state="translated">ただし、配列の反復に比べていくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="9641eba78bfe582ed3a2749197725f94c33dd851" translate="yes" xml:space="preserve">
          <source>Html-linkified and &lt;a href=&quot;../service/%24sanitize&quot;&gt;sanitized&lt;/a&gt; text.</source>
          <target state="translated">HTMLリンクされ、サニタイズ&lt;a href=&quot;../service/%24sanitize&quot;&gt;された&lt;/a&gt;テキスト。</target>
        </trans-unit>
        <trans-unit id="c65236654eb6a81fbfab2170b0857f54bfc87642" translate="yes" xml:space="preserve">
          <source>I'm in a hurry. How do I get a Hello World module working?</source>
          <target state="translated">焦っています。ハローワールドのモジュールを動かすには?</target>
        </trans-unit>
        <trans-unit id="28163d85350de7d518abda78cb07443850692d4d" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; will wait for half a second since the last content change before triggering the model update and form validation.</source>
          <target state="translated">つまり、 &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; は、最後のコンテンツ変更から0.5秒待ってから、モデルの更新とフォームの検証をトリガーします。</target>
        </trans-unit>
        <trans-unit id="9ede6c3f478034a42df63b47c4dc0ad321990f8a" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">すなわち &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4129e8cbc1ebb2a2fb072b2b3daaef96575a5cc8" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</source>
          <target state="translated">すなわち、 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9072e6f660aab84e10c71086d8bd8d9d0e39518a" translate="yes" xml:space="preserve">
          <source>IE9 and other browsers that do not support the &lt;code&gt;range&lt;/code&gt; type fall back to a text input without any default values for &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt;. Model binding, validation and number parsing are nevertheless supported.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; タイプをサポートしないIE9およびその他のブラウザーは、 &lt;code&gt;min&lt;/code&gt; 、 &lt;code&gt;max&lt;/code&gt; 、および &lt;code&gt;step&lt;/code&gt; のデフォルト値なしでテキスト入力にフォールバックします。それでも、モデルのバインディング、検証、および番号の解析はサポートされています。</target>
        </trans-unit>
        <trans-unit id="a68fa8efe4a09d8c0c63ae60426d9366434bccb2" translate="yes" xml:space="preserve">
          <source>IRC</source>
          <target state="translated">IRC</target>
        </trans-unit>
        <trans-unit id="d7b1a1f2be81b4fe52f63eaaeeb40a859c845e0f" translate="yes" xml:space="preserve">
          <source>Id for the &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ID 。</target>
        </trans-unit>
        <trans-unit id="ec130e4d2cb91fe9bf063ea20a216bdcc71a84d6" translate="yes" xml:space="preserve">
          <source>Id of the key-value pair to delete.</source>
          <target state="translated">削除するキーと値のペアのID。</target>
        </trans-unit>
        <trans-unit id="7db857bacad045bd1f61b8fda21770e9d10e3b24" translate="yes" xml:space="preserve">
          <source>Id to use for lookup.</source>
          <target state="translated">検索に使用するID。</target>
        </trans-unit>
        <trans-unit id="4f2fb5d7f9da16cbc1d14fa704825b095fc9c79b" translate="yes" xml:space="preserve">
          <source>Identifier name for a reference to the controller in the directive's scope. This allows the controller to be referenced from the directive template. This is especially useful when a directive is used as component, i.e. with an &lt;code&gt;isolate&lt;/code&gt; scope. It's also possible to use it in a directive without an &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; scope, but you need to be aware that the &lt;code&gt;controllerAs&lt;/code&gt; reference might overwrite a property that already exists on the parent scope.</source>
          <target state="translated">ディレクティブのスコープ内のコントローラーへの参照の識別子名。これにより、ディレクティブテンプレートからコントローラーを参照できます。これは、ディレクティブがコンポーネントとして、つまり &lt;code&gt;isolate&lt;/code&gt; スコープで使用される場合に特に役立ちます。 &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; スコープのないディレクティブでそれを使用することも可能ですが、 &lt;code&gt;controllerAs&lt;/code&gt; 参照が親スコープに既に存在するプロパティを上書きする可能性があることに注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="79983926c885cfae871f9f76c7c14c825447c715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;mode&lt;/code&gt; configuration object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;, the browser will perform a full page reload for every link. &lt;code&gt;mode.rewriteLinks&lt;/code&gt; can also be set to a string, which will enable link rewriting only on anchor elements that have the given attribute.</source>
          <target state="translated">&lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; 渡された &lt;code&gt;mode&lt;/code&gt; 設定オブジェクトで &lt;code&gt;mode.rewriteLinks&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、ブラウザーはすべてのリンクに対してページ全体の再読み込みを実行します。 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; を文字列に設定することもできます。これにより、特定の属性を持つアンカー要素でのみリンクの書き換えが有効になります。</target>
        </trans-unit>
        <trans-unit id="613bfcabdb198dcf4290d1a13f26a43dcfef57c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in a node blacklist: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in the node blacklist. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt;, you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</source>
          <target state="translated">場合は &lt;code&gt;ng-click&lt;/code&gt; または &lt;code&gt;ng-dblclick&lt;/code&gt; 検出され、ngAriaが追加されます &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; ノードブラックリスト内の任意の要素ではないに：&lt;em&gt;ボタン&lt;/em&gt;のアンカー&lt;em&gt;入力&lt;/em&gt;テキストエリア&lt;em&gt;を選択&lt;/em&gt;して広範なアクセシビリティの問題を解決するには詳細/概要 &lt;code&gt;ng-click&lt;/code&gt; 上 &lt;code&gt;div&lt;/code&gt; 要素を、ngAriaを要素がノードのブラックリストにない限り、デフォルトでキープレスイベントを動的にバインドします。 &lt;code&gt;bindKeypress&lt;/code&gt; 構成オプションを使用して、この機能をオンまたはオフにできます。 ngAriaは、支援技術のユーザーと通信する &lt;code&gt;button&lt;/code&gt; 役割も追加します。これは &lt;code&gt;bindRoleForClick&lt;/code&gt; で無効にできます構成オプション。以下のために &lt;code&gt;ng-dblclick&lt;/code&gt; 、あなたはまだ手動で追加する必要があり &lt;code&gt;ng-keypress&lt;/code&gt; とのような非インタラクティブな要素に役割 &lt;code&gt;div&lt;/code&gt; や &lt;code&gt;taco-button&lt;/code&gt; キーボードアクセスを可能にするために。</target>
        </trans-unit>
        <trans-unit id="60f9ef56696025d8f02f54a53f118da87247ee51" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in the list of built in aria nodes: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in a node from the list of built in aria nodes. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt;, you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</source>
          <target state="translated">場合は &lt;code&gt;ng-click&lt;/code&gt; または &lt;code&gt;ng-dblclick&lt;/code&gt; 検出され、ngAriaが追加されます &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; ：アリア・ノードに建てられたのリスト内の任意の要素にない&lt;em&gt;ボタン&lt;/em&gt;アンカー&lt;em&gt;入力&lt;/em&gt;テキストエリア&lt;em&gt;を選択&lt;/em&gt;して広範なアクセシビリティの問題を解決するには詳細/概要 &lt;code&gt;ng-click&lt;/code&gt; 上 &lt;code&gt;div&lt;/code&gt; 要素、ngAriaは、要素が組み込みariaノードのリストのノードにない限り、デフォルトでキー押下イベントを動的にバインドします。この機能は、 &lt;code&gt;bindKeypress&lt;/code&gt; 構成オプションを使用してオンまたはオフにできます。 ngAriaも &lt;code&gt;button&lt;/code&gt; 追加します支援技術のユーザーと通信する役割。これは、 &lt;code&gt;bindRoleForClick&lt;/code&gt; 構成オプションで無効にできます。以下のために &lt;code&gt;ng-dblclick&lt;/code&gt; 、あなたはまだ手動で追加する必要があり &lt;code&gt;ng-keypress&lt;/code&gt; とのような非インタラクティブな要素に役割 &lt;code&gt;div&lt;/code&gt; や &lt;code&gt;taco-button&lt;/code&gt; キーボードアクセスを可能にするために。</target>
        </trans-unit>
        <trans-unit id="c95cf37a17f0d52871a2a1d59d4540b01148df2b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ngTrim&lt;/code&gt; is set to &lt;code&gt;&quot;false&quot;&lt;/code&gt; then whitespace around both the separator and each list item is respected. This implies that the user of the directive is responsible for dealing with whitespace but also allows you to use whitespace as a delimiter, such as a tab or newline character.</source>
          <target state="translated">&lt;code&gt;ngTrim&lt;/code&gt; が &lt;code&gt;&quot;false&quot;&lt;/code&gt; に設定されている場合、セパレーターと各リスト項目の両方の周囲の空白が考慮されます。これは、ディレクティブのユーザーが空白の処理を担当することを意味しますが、タブや改行文字などの区切り文字として空白を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="0829e8f931b8f25cd2b158be8e0b6def23ee7c6e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the property specified via the first argument will be deleted.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、最初の引数で指定されたプロパティは削除されます。</target>
        </trans-unit>
        <trans-unit id="5e5b3c116b7e282c2308f6ef1608442867791f58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the property specified via the first argument will be added with no value nor trailing equal sign.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、最初の引数で指定されたプロパティは、値も末尾の等号も付けずに追加されます。</target>
        </trans-unit>
        <trans-unit id="5f8a14370aff7380ce331b7293fef1918515ff58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is an array, it will override the property of the &lt;code&gt;search&lt;/code&gt; component of &lt;code&gt;$location&lt;/code&gt; specified via the first argument.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; が配列の場合、最初の引数で指定された &lt;code&gt;$location&lt;/code&gt; &lt;code&gt;search&lt;/code&gt; コンポーネントのプロパティをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="743650dbdbf5002c9eecb5f7379f1f0d2090bf89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;redirectTo&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">&lt;code&gt;redirectTo&lt;/code&gt; が関数の場合、次のパラメーターで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="777d9335c56dfe211081978a0fbb3906b4202502" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search&lt;/code&gt; is a string or number, then &lt;code&gt;paramValue&lt;/code&gt; will override only a single search property.</source>
          <target state="translated">場合は &lt;code&gt;search&lt;/code&gt; 、文字列または数値で、その後、 &lt;code&gt;paramValue&lt;/code&gt; は、単一の検索プロパティをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="8201c46ffa0db4f644f5e56359950eb7fb2a8045" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is identical to &lt;code&gt;destination&lt;/code&gt; an exception will be thrown.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; が &lt;code&gt;destination&lt;/code&gt; と同一の場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="8ed2725402e420ab1c414cd2715251710a33f8e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is not an object or array (inc. &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;source&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; がオブジェクトでも配列でもない場合（ &lt;code&gt;null&lt;/code&gt; や &lt;code&gt;undefined&lt;/code&gt; など）、 &lt;code&gt;source&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a624c93008a0a64091b974be67c1370e20df5fd0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; が関数の場合、次のパラメーターで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9f1b3360d3b66afd04318f5feac73437fb4929da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; が関数の場合、次のローカルが&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;注入さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="b743c62930c10b8e90047d6d33a622a656d9a6ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; が関数の場合、次のパラメーターで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="33c8b5674d0af42566982cc240093a252e34747e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; が関数の場合、次のローカルが&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;挿入さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="72f42dc0c99690482b2dac1ed67fcce01c622d32" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, reverse the sorting order.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、ソート順を逆にします。</target>
        </trans-unit>
        <trans-unit id="e5e1755ef85cb15eebe562cc36b63807bafca0ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;window.name&lt;/code&gt; contains prefix &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; when &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; is called, the bootstrap process will be paused until &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;window.name&lt;/code&gt; に接頭辞 &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; が含まれている場合！場合&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; が&lt;/a&gt;呼び出され、ブートストラッププロセスがされるまで一時停止される &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="a7fff279b5c9622029c122de3c8da07fa6ebeda1" translate="yes" xml:space="preserve">
          <source>If V is not undefined, mark the result of the expression as stable and schedule a task to deregister the watch for this expression when we exit the digest loop</source>
          <target state="translated">Vが未定義でない場合、式の結果を安定したものとしてマークし、ダイジェストループを終了するときにこの式のウォッチの登録を解除するタスクをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="345464413875ecc47aaed72ea3eeb05292b2706f" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations in the $http docs&lt;/a&gt;).</source>
          <target state="translated">XSRFプレフィックスが検出された場合は、それを取り除きます（&lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;$ http docsのセキュリティに関する考慮事項を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="99e0d1f20619d41f43e4adbe88a0fc055defdf60" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see Security Considerations section below).</source>
          <target state="translated">XSRF接頭辞が検出された場合は、それを削除します(後述の「セキュリティに関する考慮事項」を参照)。</target>
        </trans-unit>
        <trans-unit id="52b7eeb7ca086390168cbaa4c3ea07248c32233b" translate="yes" xml:space="preserve">
          <source>If a custom comparator still can't distinguish between two items, then they will be sorted based on their index using the built-in comparator.</source>
          <target state="translated">カスタムコンパレータでも2つの項目を区別できない場合は、組み込みコンパレータを使用してインデックスに基づいてソートされます。</target>
        </trans-unit>
        <trans-unit id="022ac35ee6ebafd19f7c4c717fbf1ccf2712e7bc" translate="yes" xml:space="preserve">
          <source>If a destination is provided, all of its elements (for arrays) or properties (for objects) are deleted and then all elements/properties from the source are copied to it.</source>
          <target state="translated">宛先が指定されている場合、その要素(配列の場合)またはプロパティ(オブジェクトの場合)はすべて削除され、その後、ソースからのすべての要素/プロパティがコピーされます。</target>
        </trans-unit>
        <trans-unit id="502bbbf8d84c6abdf7c8fd468936fe84d3df6d5a" translate="yes" xml:space="preserve">
          <source>If a form has only one input field then hitting enter in this field triggers form submit (&lt;code&gt;ngSubmit&lt;/code&gt;)</source>
          <target state="translated">フォームに入力フィールドが1つしかない場合、このフィールドで &lt;code&gt;ngSubmit&lt;/code&gt; フォーム送信（ngSubmit）がトリガーされます</target>
        </trans-unit>
        <trans-unit id="adb660bb29eb456fd541995beb9da63bcee77be2" translate="yes" xml:space="preserve">
          <source>If a function has an &lt;code&gt;$inject&lt;/code&gt; property and its value is an array of strings, then the strings represent names of services to be injected into the function.</source>
          <target state="translated">関数に &lt;code&gt;$inject&lt;/code&gt; プロパティがあり、その値が文字列の配列である場合、文字列は関数に注入されるサービスの名前を表します。</target>
        </trans-unit>
        <trans-unit id="cd412985992305562d7e70ff27e4c810956645c3" translate="yes" xml:space="preserve">
          <source>If a module has already been loaded into the injector then it will not be loaded again.</source>
          <target state="translated">モジュールが既にインジェクターにロードされている場合は、再度ロードされることはありません。</target>
        </trans-unit>
        <trans-unit id="26dc0654df6e7e0d396bfd5ad28c4b667f98d931" translate="yes" xml:space="preserve">
          <source>If a parent scope is suspended then all its descendants will be also excluded from future digests whether or not they have been suspended themselves. Note that this also applies to isolate child scopes.</source>
          <target state="translated">親スコープが一時停止されている場合は、その子孫もすべて、それ自体が一時停止されているかどうかにかかわらず、将来のダイジェストから除外されます。これは子スコープを分離する場合にも適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f325902be8527e0c6ea4b6c889b0905040354cc2" translate="yes" xml:space="preserve">
          <source>If a request didn't match any expectation or if the expectation doesn't have the response defined, the backend definitions are evaluated in sequential order to see if any of them match the request. The response from the first matched definition is returned.</source>
          <target state="translated">リクエストが期待値にマッチしなかったり、期待値にレスポンスが定義されていない場合、 バックエンドの定義が順に評価され、リクエストにマッチするものがあるかどうかを確認します。最初にマッチした定義からのレスポンスが返されます。</target>
        </trans-unit>
        <trans-unit id="0fd04e9e5b96e85cca8613d8294a4a6de3b25a55" translate="yes" xml:space="preserve">
          <source>If a request expectation has no response specified, the algorithm will search your backend definitions for an appropriate response.</source>
          <target state="translated">リクエストの期待値にレスポンスが指定されていない場合、アルゴリズムは適切なレスポンスを求めてバックエンドの定義を検索します。</target>
        </trans-unit>
        <trans-unit id="3c34b3f9a2baeaea1921d5fa87951146f390ffe3" translate="yes" xml:space="preserve">
          <source>If a required controller cannot be found, and it is optional, the instance is &lt;code&gt;null&lt;/code&gt;, otherwise the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing Required Controller&lt;/a&gt; error is thrown.</source>
          <target state="translated">必要なコントローラーが見つからず、それがオプションである場合、インスタンスは &lt;code&gt;null&lt;/code&gt; です。それ以外の場合は、&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing Required Controller&lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="e8ecc0e4af38e92205b4a945081b7e78cdb43a2c" translate="yes" xml:space="preserve">
          <source>If a required controller cannot be found, and it is optional, the instance is &lt;code&gt;null&lt;/code&gt;, otherwise the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing Required Controller&lt;/a&gt; error is thrown.</source>
          <target state="translated">必要なコントローラーが見つからず、オプションの場合、インスタンスは &lt;code&gt;null&lt;/code&gt; です。それ以外の場合は、&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing RequiredController&lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="3062c2d3fcf43cdcf6dc09ea8da967844fcf796b" translate="yes" xml:space="preserve">
          <source>If a service is decorated by both &lt;code&gt;$provide.decorator&lt;/code&gt; and &lt;code&gt;module.decorator&lt;/code&gt;, the decorators are applied in order:</source>
          <target state="translated">サービスは両方によって装飾された場合 &lt;code&gt;$provide.decorator&lt;/code&gt; と &lt;code&gt;module.decorator&lt;/code&gt; 、デコレータは順番に適用されます。</target>
        </trans-unit>
        <trans-unit id="8065da6f118dbd267964e5dadd97dd3d9850fb06" translate="yes" xml:space="preserve">
          <source>If a value is specified, returns the $httpProvider for chaining. otherwise, returns the current configured value.</source>
          <target state="translated">値を指定した場合は、チェーン接続用の $httpProvider を返します。</target>
        </trans-unit>
        <trans-unit id="1f41bc8f62e166a66fdd0b00ba6f38f10a023aad" translate="yes" xml:space="preserve">
          <source>If an action's configuration specifies that it is cancellable, you can cancel the request related to an instance or collection (as long as it is a result of a &quot;non-instance&quot; call):</source>
          <target state="translated">アクションの設定がキャンセル可能であることを指定している場合、インスタンスまたはコレクションに関連するリクエストをキャンセルすることができます(それが &quot;非インスタンス &quot;呼び出しの結果である限り)。</target>
        </trans-unit>
        <trans-unit id="cc7cda513ad242dc0410921f7e4d7987e45e3c2b" translate="yes" xml:space="preserve">
          <source>If an attribute with a binding is prefixed with the &lt;code&gt;ngAttr&lt;/code&gt; prefix (denormalized as &lt;code&gt;ng-attr-&lt;/code&gt;) then during the binding it will be applied to the corresponding unprefixed attribute. This allows you to bind to attributes that would otherwise be eagerly processed by browsers (e.g. an SVG element's &lt;code&gt;circle[cx]&lt;/code&gt; attributes). When using &lt;code&gt;ngAttr&lt;/code&gt;, the &lt;code&gt;allOrNothing&lt;/code&gt; flag of &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; is used, so if any expression in the interpolated string results in &lt;code&gt;undefined&lt;/code&gt;, the attribute is removed and not added to the element.</source>
          <target state="translated">バインディングを持つ属性の前に &lt;code&gt;ngAttr&lt;/code&gt; プレフィックス（ &lt;code&gt;ng-attr-&lt;/code&gt; として非正規化）が付いている場合、バインディング中に、対応するプレフィックスのない属性に適用されます。これにより、他の方法ではブラウザーによって積極的に処理される属性（SVG要素の &lt;code&gt;circle[cx]&lt;/code&gt; 属性など）にバインドできます。使用する場合 &lt;code&gt;ngAttr&lt;/code&gt; を、 &lt;code&gt;allOrNothing&lt;/code&gt; 用のフラグ&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;補間$が&lt;/a&gt;使用されているように補間された文字列結果の任意の式場合、 &lt;code&gt;undefined&lt;/code&gt; 属性を除去し、要素に追加されません。</target>
        </trans-unit>
        <trans-unit id="3c897c9ef737c27fdd08857ed2716fb1b8f4d9a5" translate="yes" xml:space="preserve">
          <source>If an expectation or definition uses a &lt;strong&gt;regex&lt;/strong&gt; to match the URL, you can provide an array of &lt;strong&gt;keys&lt;/strong&gt; via a &lt;code&gt;params&lt;/code&gt; argument. The index of each &lt;strong&gt;key&lt;/strong&gt; in the array will match the index of a &lt;strong&gt;group&lt;/strong&gt; in the &lt;strong&gt;regex&lt;/strong&gt;.</source>
          <target state="translated">期待値または定義が&lt;strong&gt;正規表現&lt;/strong&gt;を使用してURLと一致する場合、 &lt;code&gt;params&lt;/code&gt; 引数を介して&lt;strong&gt;キーの&lt;/strong&gt;配列を提供できます。配列の各&lt;strong&gt;キー&lt;/strong&gt;のインデックスは、&lt;strong&gt;正規表現の&lt;/strong&gt;&lt;strong&gt;グループ&lt;/strong&gt;のインデックスと一致します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e464595e0a743e0020b60c55e500247b0faf2671" translate="yes" xml:space="preserve">
          <source>If an interceptor object was provided, the promise will instead be resolved with the value returned by the response interceptor (on success) or responceError interceptor (on failure).</source>
          <target state="translated">インターセプターオブジェクトが提供された場合は、代わりにレスポンスインターセプター(成功時)または responceError インターセプター(失敗時)によって返される値でプロミスが解決されます。</target>
        </trans-unit>
        <trans-unit id="7550c3d4cbd675d41d3da8b71e0e2ec2f8a2fd48" translate="yes" xml:space="preserve">
          <source>If any expectation within an &lt;code&gt;it&lt;/code&gt; block fails, the runner marks the &lt;code&gt;it&lt;/code&gt; as &quot;failed&quot; and continues on to the next block.</source>
          <target state="translated">&lt;code&gt;it&lt;/code&gt; ブロック内の予想が失敗した場合、ランナーは &lt;code&gt;it&lt;/code&gt; を「失敗」としてマークし、次のブロックに進みます。</target>
        </trans-unit>
        <trans-unit id="1352dc692bed1cbf1f5076fcaeba257174fe28f2" translate="yes" xml:space="preserve">
          <source>If automatic scrolling is disabled, one must explicitly call &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll()&lt;/a&gt; in order to scroll to the element related to the current hash.</source>
          <target state="translated">自動スクロールが無効になっている場合、現在のハッシュに関連する要素にスクロールするには、&lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll（）を&lt;/a&gt;明示的に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="3b4e24e7eaa2ca32436552a01221de60832d916b" translate="yes" xml:space="preserve">
          <source>If boolean, sets &lt;code&gt;html5Mode.enabled&lt;/code&gt; to value. If object, sets &lt;code&gt;enabled&lt;/code&gt;, &lt;code&gt;requireBase&lt;/code&gt; and &lt;code&gt;rewriteLinks&lt;/code&gt; to respective values. Supported properties:</source>
          <target state="translated">ブール値の場合、 &lt;code&gt;html5Mode.enabled&lt;/code&gt; を値に設定します。オブジェクトの場合、 &lt;code&gt;enabled&lt;/code&gt; 、 &lt;code&gt;requireBase&lt;/code&gt; 、および &lt;code&gt;rewriteLinks&lt;/code&gt; をそれぞれの値に設定します。サポートされているプロパティ：</target>
        </trans-unit>
        <trans-unit id="7148e4e9bfb3ae0f9035089b0911fcd382c40701" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;bindToController&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; are defined and have object hashes, &lt;code&gt;bindToController&lt;/code&gt; overrides &lt;code&gt;scope&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bindToController&lt;/code&gt; と &lt;code&gt;scope&lt;/code&gt; の両方が定義され、オブジェクトハッシュがある場合、 &lt;code&gt;bindToController&lt;/code&gt; はscopeをオーバーライドし &lt;code&gt;scope&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1cabef013ace4e4c9c00e6712ac1e83f19c28fc9" translate="yes" xml:space="preserve">
          <source>If both values are objects, compare their indices instead.</source>
          <target state="translated">両方の値がオブジェクトの場合は、そのインデックスを比較します。</target>
        </trans-unit>
        <trans-unit id="e0f58fb3edabd2bfd4c52120891ecad3c7f08490" translate="yes" xml:space="preserve">
          <source>If both values are of type &lt;code&gt;string&lt;/code&gt;, compare them alphabetically in a case- and locale-insensitive way.</source>
          <target state="translated">両方の値が &lt;code&gt;string&lt;/code&gt; 型の場合は、大文字と小文字およびロケールを区別しない方法でアルファベット順に比較します。</target>
        </trans-unit>
        <trans-unit id="a3acd0c125665e994f5cc5d87ff32bae58ae7519" translate="yes" xml:space="preserve">
          <source>If caching is enabled, but neither the default cache nor config.cache are set to a cache object, then the default &lt;code&gt;$cacheFactory(&quot;$http&quot;)&lt;/code&gt; object is used.</source>
          <target state="translated">キャッシュが有効になっているが、デフォルトのキャッシュもconfig.cacheもキャッシュオブジェクトに設定されていない場合、デフォルトの &lt;code&gt;$cacheFactory(&quot;$http&quot;)&lt;/code&gt; オブジェクトが使用されます。</target>
        </trans-unit>
        <trans-unit id="6be3243cff2b9606141e7d8a8288624cc35fdc41" translate="yes" xml:space="preserve">
          <source>If called with a function then it's considered to be the controller constructor function. Otherwise it's considered to be a string which is used to retrieve the controller constructor using the following steps:</source>
          <target state="translated">関数で呼ばれた場合は、コントローラのコンストラクタ関数とみなされます。そうでない場合は文字列とみなされ、以下の手順でコントローラのコンストラクタを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="eca4a0606f2e890d1b99bf344fe5c04e4c526a90" translate="yes" xml:space="preserve">
          <source>If called with no arguments returns the parsed &lt;code&gt;search&lt;/code&gt; object. If called with one or more arguments returns &lt;code&gt;$location&lt;/code&gt; object itself.</source>
          <target state="translated">引数なしで呼び出された場合、解析された &lt;code&gt;search&lt;/code&gt; オブジェクトを返します。1つ以上の引数を指定して呼び出すと、 &lt;code&gt;$location&lt;/code&gt; オブジェクト自体が返されます。</target>
        </trans-unit>
        <trans-unit id="c24fb87cdf6ae1778bbb557cc0ff10b76544fa3c" translate="yes" xml:space="preserve">
          <source>If called, all changes to $location during the current &lt;code&gt;$digest&lt;/code&gt; will replace the current history record, instead of adding a new one.</source>
          <target state="translated">呼び出された場合、現在の &lt;code&gt;$digest&lt;/code&gt; 中に$ locationを変更すると、新しい履歴レコードが追加される代わりに、現在の履歴レコードが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="b025c8c144cafc2941eab97705006674236a7463" translate="yes" xml:space="preserve">
          <source>If custom triggers are used, custom debouncing timeouts can be set for each event using an object in &lt;code&gt;debounce&lt;/code&gt;. This can be useful to force immediate updates on some specific circumstances (like blur events).</source>
          <target state="translated">カスタムトリガーを使用する場合、 &lt;code&gt;debounce&lt;/code&gt; のオブジェクトを使用して、イベントごとにカスタムデバウンスタイムアウトを設定できます。これは、特定の状況（ブラーイベントなど）で即時更新を強制するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="50eecbd017e410f336fd4a83ba00bd8c53ebc392" translate="yes" xml:space="preserve">
          <source>If for example we wanted to create animations for &lt;code&gt;leave&lt;/code&gt; and &lt;code&gt;move&lt;/code&gt; (ngRepeat triggers move) then we can do so using the same CSS naming conventions:</source>
          <target state="translated">たとえば、 &lt;code&gt;leave&lt;/code&gt; と &lt;code&gt;move&lt;/code&gt; （ngRepeatトリガーの移動）のアニメーションを作成する場合は、同じCSS命名規則を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="107509b3211b546d6aa398c5cd00116593d484cf" translate="yes" xml:space="preserve">
          <source>If it is necessary to reference the controller or any functions bound to the controller from the template, you can use the option &lt;code&gt;controllerAs&lt;/code&gt; to specify the name of the controller as an alias. The directive needs to define a scope for this configuration to be used. This is particularly useful in the case when the directive is used as a component.</source>
          <target state="translated">コントローラー、またはテンプレートからコントローラーにバインドされた関数を参照する必要がある場合は、controllerAsオプションを使用して、 &lt;code&gt;controllerAs&lt;/code&gt; の名前をエイリアスとして指定できます。ディレクティブは、使用されるこの構成のスコープを定義する必要があります。これは、ディレクティブがコンポーネントとして使用される場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9a307e66a98c3ebe2ff88b0c79288c8c10c4b570" translate="yes" xml:space="preserve">
          <source>If jQuery is available, &lt;code&gt;angular.element&lt;/code&gt; is an alias for the &lt;a href=&quot;http://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt; function. If jQuery is not available, &lt;code&gt;angular.element&lt;/code&gt; delegates to AngularJS's built-in subset of jQuery, called &quot;jQuery lite&quot; or &lt;strong&gt;jqLite&lt;/strong&gt;.</source>
          <target state="translated">jQueryが使用可能な場合、 &lt;code&gt;angular.element&lt;/code&gt; は&lt;a href=&quot;http://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt;関数のエイリアスです。jQueryが使用できない場合、 &lt;code&gt;angular.element&lt;/code&gt; は、「jQuery lite」または&lt;strong&gt;jqLit​​e&lt;/strong&gt;と呼ばれるAngularJSの組み込みjQueryサブセットに&lt;strong&gt;委任し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4e331677d8d9a69eb364f066240d6d3481dd4425" translate="yes" xml:space="preserve">
          <source>If jQuery is available, &lt;code&gt;angular.element&lt;/code&gt; is an alias for the &lt;a href=&quot;https://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt; function. If jQuery is not available, &lt;code&gt;angular.element&lt;/code&gt; delegates to AngularJS's built-in subset of jQuery, called &quot;jQuery lite&quot; or &lt;strong&gt;jqLite&lt;/strong&gt;.</source>
          <target state="translated">jQueryが利用可能な場合、 &lt;code&gt;angular.element&lt;/code&gt; は&lt;a href=&quot;https://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt;関数のエイリアスです。 jQueryが利用できない場合、 &lt;code&gt;angular.element&lt;/code&gt; は、「&lt;strong&gt;jQuerylite&lt;/strong&gt;」または&lt;strong&gt;jqLit​​e&lt;/strong&gt;と呼ばれるAngularJSの組み込みjQueryサブセットに&lt;strong&gt;委任し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c701fc2f8dc85147ea98151e5bf3322bcac3aaee" translate="yes" xml:space="preserve">
          <source>If multiple controllers are required, the &lt;code&gt;require&lt;/code&gt; option of the directive can take an array argument. The corresponding parameter being sent to the &lt;code&gt;link&lt;/code&gt; function will also be an array.</source>
          <target state="translated">複数のコントローラーが必要な場合、ディレクティブの &lt;code&gt;require&lt;/code&gt; オプションは配列引数を取ることができます。 &lt;code&gt;link&lt;/code&gt; 関数に送信される対応するパラメーターも配列になります。</target>
        </trans-unit>
        <trans-unit id="9131087c07a27ae54bb5cb150194e99e5b9ded60" translate="yes" xml:space="preserve">
          <source>If multiple identical requests are made using the same cache, which is not yet populated, one request will be made to the server and remaining requests will return the same response.</source>
          <target state="translated">同じキャッシュを使用して複数の同一のリクエストが行われた場合は、まだキャッシュが存在していないため、1つのリクエストがサーバに行われ、残りのリクエストは同じレスポンスを返すことになります。</target>
        </trans-unit>
        <trans-unit id="5099fba28286973badadf5e09f2c704804e0e9a4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;templateNamespace&lt;/code&gt; is specified, then the namespace is considered to be &lt;code&gt;html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;templateNamespace&lt;/code&gt; が指定されていない場合、名前空間は &lt;code&gt;html&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="565e32b222f018c04759a0915c1eafd46c68d0e3" translate="yes" xml:space="preserve">
          <source>If no delay is specified, it uses a delay such that all currently pending tasks are flushed.</source>
          <target state="translated">遅延が指定されていない場合は、現在保留中のすべてのタスクがフラッシュされるような遅延を使用します。</target>
        </trans-unit>
        <trans-unit id="a343b02429ad2a626c45c677fe2309fc8eb6e9af" translate="yes" xml:space="preserve">
          <source>If no destination is supplied, a copy of the object or array is created.</source>
          <target state="translated">宛先を指定しない場合は、オブジェクトまたは配列のコピーが作成されます。</target>
        </trans-unit>
        <trans-unit id="613c17fb4d65c58a50bf306d9be2b19d42f72bd3" translate="yes" xml:space="preserve">
          <source>If no rule is defined for a category, then an empty string is displayed and a warning is generated. Note that some locales define more categories than &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. For example, fr-fr defines &lt;code&gt;few&lt;/code&gt; and &lt;code&gt;many&lt;/code&gt;.</source>
          <target state="translated">カテゴリにルールが定義されていない場合、空の文字列が表示され、警告が生成されます。一部のロケールは、より多くのカテゴリを定義することを注記 &lt;code&gt;one&lt;/code&gt; および &lt;code&gt;other&lt;/code&gt; 。たとえば、fr-frは &lt;code&gt;few&lt;/code&gt; と &lt;code&gt;many&lt;/code&gt; 定義します。</target>
        </trans-unit>
        <trans-unit id="68fc3fa08dbab4451ff79de79c9fc1a49cba71b3" translate="yes" xml:space="preserve">
          <source>If one of the values is undefined, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">一方の値が未定義の場合は、他方の値よりも &quot;大きい &quot;と考えてください。</target>
        </trans-unit>
        <trans-unit id="be847ed107cfee41deb9115ce6a8c35e338521f0" translate="yes" xml:space="preserve">
          <source>If one wants to modify a camelcased attribute (SVG elements have valid camelcased attributes), such as &lt;code&gt;viewBox&lt;/code&gt; on the &lt;code&gt;svg&lt;/code&gt; element, one can use underscores to denote that the attribute to bind to is naturally camelcased.</source>
          <target state="translated">1のような、（SVG要素が有効なキャメル記法属性を持つ）キャメル記法属性を変更したい場合は &lt;code&gt;viewBox&lt;/code&gt; 上 &lt;code&gt;svg&lt;/code&gt; 要素、1は、バインドの属性が自然キャメル記法されたことを示すためにアンダースコアを使用することができます。</target>
        </trans-unit>
        <trans-unit id="fa3a550f7e49feb35b5c38e18a628e43579977d7" translate="yes" xml:space="preserve">
          <source>If our animation code class-based (meaning that something like &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and &lt;code&gt;ngShow&lt;/code&gt; triggers it) then we can still define our animations inside of the same registered animation, however, the function input arguments are a bit different:</source>
          <target state="translated">アニメーションコードがクラスベースの場合（つまり、 &lt;code&gt;ngClass&lt;/code&gt; 、 &lt;code&gt;ngHide&lt;/code&gt; 、 &lt;code&gt;ngShow&lt;/code&gt; などがトリガーする場合）、同じ登録済みアニメーション内でアニメーションを定義できますが、関数の入力引数は少し異なります。</target>
        </trans-unit>
        <trans-unit id="3929b62e0e7741d149c634de5223054eef38f614" translate="yes" xml:space="preserve">
          <source>If provided, then enables/disables SCE application-wide.</source>
          <target state="translated">指定された場合、SCE アプリケーション全体を有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="420de9532a9310bd61b98d99b3e5431883df58a7" translate="yes" xml:space="preserve">
          <source>If provided, update the internal &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag.</source>
          <target state="translated">提供されている場合は、内部の &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; フラグを更新します。</target>
        </trans-unit>
        <trans-unit id="f6c236207f5e15b8cfb41e7366e363e30acf5b95" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt; skips model dirty checking, otherwise will invoke &lt;code&gt;fn&lt;/code&gt; within the &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、モデルのダーティチェックがスキップされます。それ以外の場合は、&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt;ブロック内で &lt;code&gt;fn&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="35a5cf1a0eea8e136f5c4728cf9e80e86d58aa15" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt; skips model dirty checking, otherwise will invoke &lt;code&gt;fn&lt;/code&gt; within the &lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、モデルのダーティチェックがスキップされます。それ以外の場合は、&lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt;ブロック内で &lt;code&gt;fn&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6d79cbe97b0cba018fd80c72312c2caecd191843" translate="yes" xml:space="preserve">
          <source>If set to false AngularJS will not automatically trim the input.</source>
          <target state="translated">falseに設定すると、AngularJSは入力を自動的にトリミングしません。</target>
        </trans-unit>
        <trans-unit id="99f750122c635a9c79ac25ba8a258a265ea9d70d" translate="yes" xml:space="preserve">
          <source>If set to false AngularJS will not automatically trim the input. This parameter is ignored for input[type=password] controls, which will never trim the input.</source>
          <target state="translated">falseに設定すると、AngularJSは自動的に入力をトリミングしません。このパラメータはinput[type=password]コントロールでは無視され、入力がトリムされることはありません。</target>
        </trans-unit>
        <trans-unit id="d365bd222f8aac61ea4ce4cf5f583497a646e6c8" translate="yes" xml:space="preserve">
          <source>If set to true then the current &lt;code&gt;priority&lt;/code&gt; will be the last set of directives which will execute (any directives at the current priority will still execute as the order of execution on same &lt;code&gt;priority&lt;/code&gt; is undefined). Note that expressions and other directives used in the directive's template will also be excluded from execution.</source>
          <target state="translated">trueに設定した場合、現在の &lt;code&gt;priority&lt;/code&gt; は、実行される最後のディレクティブセットになります（現在の優先順位のディレクティブは、同じ &lt;code&gt;priority&lt;/code&gt; での実行順序が定義されていないため、引き続き実行されます）。ディレクティブのテンプレートで使用されている式やその他のディレクティブも実行から除外されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8198e6aef6aaac2f45ebacc8a1aa2d4b63f0fc33" translate="yes" xml:space="preserve">
          <source>If set to true, the JSON output will contain newlines and whitespace. If set to an integer, the JSON output will contain that many spaces per indentation.</source>
          <target state="translated">true に設定すると、JSON 出力には改行と空白が含まれます。整数に設定すると、JSON 出力にはインデントごとに多くのスペースが含まれます。</target>
        </trans-unit>
        <trans-unit id="cd63bbd500f85b0aa9f3f57a50ef372022a6763d" translate="yes" xml:space="preserve">
          <source>If set, specifies a vertical scroll-offset. This is often useful when there are fixed positioned elements at the top of the page, such as navbars, headers etc.</source>
          <target state="translated">設定した場合、垂直スクロールオフセットを指定します。これは、ナビバーやヘッダーなど、ページの上部に固定された要素がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fe6333e8f42c68100e28d8d911a3367f20054d75" translate="yes" xml:space="preserve">
          <source>If specified then new module is being created. If unspecified then the module is being retrieved for further configuration.</source>
          <target state="translated">指定された場合、新しいモジュールが作成されています。指定されていない場合は、設定を進めるためにモジュールを取得しています。</target>
        </trans-unit>
        <trans-unit id="27aeb59cad0b804c6ef2d86a1dfa615624970c38" translate="yes" xml:space="preserve">
          <source>If that is the case, the compiler adds an interpolateDirective to the node and registers &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the computed interpolation function, which will update the corresponding text nodes or attribute values as part of the normal &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;digest&lt;/a&gt; cycle.</source>
          <target state="translated">その場合、コンパイラーはノードにinterpolateDirectiveを追加し、計算された補間関数の&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;を登録します。これにより、対応するテキストノードまたは属性値が通常の&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;ダイジェスト&lt;/a&gt;サイクルの一部として更新されます。</target>
        </trans-unit>
        <trans-unit id="06ebcf108a89a946fe69e686a9111125f0f020a4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is falsy then the element is removed from the DOM tree. If it is truthy a copy of the compiled element is added to the DOM tree.</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt; falsyで、その要素は、DOMツリーから削除されます。それが真実である場合、コンパイルされた要素のコピーがDOMツリーに追加されます。</target>
        </trans-unit>
        <trans-unit id="92018ed26fa3598f627e4578ebf49a3b9ed44b1b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;open&quot; will be set on the element</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;が真実である場合、特別な属性「オープン」が要素に設定されます</target>
        </trans-unit>
        <trans-unit id="431632c12958fee7c8e13e21d996c9067cd8b138" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;readonly&quot; will be set on the element</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;が真実である場合、要素に特別な属性「読み取り専用」が設定されます</target>
        </trans-unit>
        <trans-unit id="705b7850ed3cc932f2a8560a14e97c372e2c1a26" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;selected&quot; will be set on the element</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;が真実である場合、要素に「選択された」特別な属性が設定されます</target>
        </trans-unit>
        <trans-unit id="a2e2565ac63611a2ee4218e5debd4028869e44fa" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then the &lt;code&gt;checked&lt;/code&gt; attribute will be set on the element</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt; truthyで、その後 &lt;code&gt;checked&lt;/code&gt; 属性が要素に設定されます</target>
        </trans-unit>
        <trans-unit id="0fa6eb7b7fd73a6c228cab8613440b5f26fe154c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then the &lt;code&gt;disabled&lt;/code&gt; attribute will be set on the element</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt; truthyあり、その後、 &lt;code&gt;disabled&lt;/code&gt; 属性が要素に設定されます</target>
        </trans-unit>
        <trans-unit id="c8f2e6672bb03dd7bddaac75918cc6f50c5be88c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy/falsy then the element is hidden/shown respectively.</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;、発現は&lt;/a&gt; truthy / falsyその要素が隠れている/それぞれ示されています。</target>
        </trans-unit>
        <trans-unit id="1328e9d07bc981d3a2f225632334634a909a47c7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy/falsy then the element is shown/hidden respectively.</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;、発現は&lt;/a&gt; truthy / falsyその要素は、それぞれ表示/非表示です。</target>
        </trans-unit>
        <trans-unit id="57f738c91082e8b25cb1fa3c8475f9812310ab4e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; is &lt;code&gt;application/json&lt;/code&gt; or the response looks like JSON, deserialize it using a JSON parser.</source>
          <target state="translated">場合 &lt;code&gt;Content-Type&lt;/code&gt; ある &lt;code&gt;application/json&lt;/code&gt; またはJSONのような応答ルックス、JSONパーサーを使用して、それをデシリアライズ。</target>
        </trans-unit>
        <trans-unit id="569213aa4cfaa4bcb8cb504d5cc5158f580f2ef7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;data&lt;/code&gt; property of the request configuration object contains an object, serialize it into JSON format.</source>
          <target state="translated">リクエスト設定オブジェクトの &lt;code&gt;data&lt;/code&gt; プロパティにオブジェクトが含まれている場合は、それをJSON形式にシリアル化します。</target>
        </trans-unit>
        <trans-unit id="a575ef21797e38c6a9636004fb3da88ae0f427fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;name&lt;/code&gt; attribute is specified, the form controller is published onto the current scope under this name.</source>
          <target state="translated">場合は &lt;code&gt;name&lt;/code&gt; 属性が指定されている、フォームコントローラは、この名前の下にある現在のスコープ上に公開されています。</target>
        </trans-unit>
        <trans-unit id="26b0e12a78f6677dac08ad73f6c6c9206d29a49b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ngAnimate&lt;/code&gt; module is active within the application then the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessage&lt;/code&gt; and &lt;code&gt;ngMessageExp&lt;/code&gt; directives will trigger animations whenever any messages are added and removed from the DOM by the &lt;code&gt;ngMessages&lt;/code&gt; directive.</source>
          <target state="translated">場合 &lt;code&gt;ngAnimate&lt;/code&gt; のモジュールは、アプリケーション内でアクティブであり、その後 &lt;code&gt;ngMessages&lt;/code&gt; 、 &lt;code&gt;ngMessage&lt;/code&gt; と &lt;code&gt;ngMessageExp&lt;/code&gt; 任意のメッセージがによってDOMから追加及び削除されるたびに指示がアニメーションをトリガする &lt;code&gt;ngMessages&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="7620b6d1e4671d235ceba2b3eb50bbc8af56dbac" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;require&lt;/code&gt; property is an object and &lt;code&gt;bindToController&lt;/code&gt; is truthy, then the required controllers are bound to the controller using the keys of the &lt;code&gt;require&lt;/code&gt; property. This binding occurs after all the controllers have been constructed but before &lt;code&gt;$onInit&lt;/code&gt; is called. If the name of the required controller is the same as the local name (the key), the name can be omitted. For example, &lt;code&gt;{parentDir: '^^'}&lt;/code&gt; is equivalent to &lt;code&gt;{parentDir: '^^parentDir'}&lt;/code&gt;. See the &lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; helper for an example of how this can be used. If no such required directive(s) can be found, or if the directive does not have a controller, then an error is raised (unless no link function is specified and the required controllers are not being bound to the directive controller, in which case error checking is skipped). The name can be prefixed with:</source>
          <target state="translated">場合は &lt;code&gt;require&lt;/code&gt; プロパティがオブジェクトであり、 &lt;code&gt;bindToController&lt;/code&gt; が truthyあり、その後、必要なコントローラは、キーの使用してコントローラにバインドされている &lt;code&gt;require&lt;/code&gt; 性が。このバインディングは、すべてのコントローラーが構築された後、 &lt;code&gt;$onInit&lt;/code&gt; が呼び出される前に発生します。必要なコントローラーの名前がローカル名（キー）と同じ場合は、名前を省略できます。たとえば、 &lt;code&gt;{parentDir: '^^'}&lt;/code&gt; は &lt;code&gt;{parentDir: '^^parentDir'}&lt;/code&gt; と同等です。&lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;参照してくださいこれがどのように使用されるかの例のヘルパー。そのような必要なディレクティブが見つからない場合、またはディレクティブにコントローラーがない場合は、エラーが発生します（リンク関数が指定されておらず、必要なコントローラーがディレクティブコントローラーにバインドされていない場合）。エラーチェックはスキップされます）。名前の前に次を付けることができます。</target>
        </trans-unit>
        <trans-unit id="e9084553ff9f6768e27df6a51cf00d07607970ba" translate="yes" xml:space="preserve">
          <source>If the argument is a hash object containing an array of values, these values will be encoded as duplicate search parameters in the URL.</source>
          <target state="translated">引数が値の配列を含むハッシュオブジェクトの場合、これらの値はURL内の重複検索パラメータとしてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="bcb61a9e955126eaa26ea942a4627e94e63e44a6" translate="yes" xml:space="preserve">
          <source>If the compared values are of different types:</source>
          <target state="translated">比較された値が異なるタイプの場合。</target>
        </trans-unit>
        <trans-unit id="a6ebb8e7acaaad05ba88ba630bbcf4bb474a27c9" translate="yes" xml:space="preserve">
          <source>If the compiler finds that an element matches a directive, then the directive is added to the list of directives that match the DOM element. A single element may match multiple directives.</source>
          <target state="translated">コンパイラがある要素がディレクティブにマッチすることを発見した場合、そのディレクティブは DOM 要素にマッチするディレクティブのリストに追加されます。一つの要素が複数のディレクティブにマッチすることもあります。</target>
        </trans-unit>
        <trans-unit id="dba304c82bd0b93a1d184175d2e32a6154fed02c" translate="yes" xml:space="preserve">
          <source>If the controller has been attached using the &lt;code&gt;controller as&lt;/code&gt; syntax then the controller instance will be assigned to a property on the scope.</source>
          <target state="translated">構文 &lt;code&gt;controller as&lt;/code&gt; 使用してコントローラーが接続されている場合、コントローラーインスタンスはスコープのプロパティに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="6cd88d003715e1438f37dc2797bc52968605194f" translate="yes" xml:space="preserve">
          <source>If the directive is using 'element' transclusion, the compiler will actually remove the directive's entire element from the DOM and replace it with a comment node. The compiler then inserts the directive's template &quot;after&quot; this comment node, as a sibling.</source>
          <target state="translated">ディレクティブが 'element' トランスクルージョンを使っている場合、コンパイラは実際にはディレクティブの要素全体を DOM から削除し、コメントノードに置き換えます。コンパイラはこのコメントノードの &quot;後 &quot;にディレクティブのテンプレートを兄弟として挿入します。</target>
        </trans-unit>
        <trans-unit id="ccc0a0551436812b070e6ede527ae76f73bef649" translate="yes" xml:space="preserve">
          <source>If the element selector is prefixed with a &lt;code&gt;?&lt;/code&gt; then that slot is optional.</source>
          <target state="translated">要素セレクターの前に &lt;code&gt;?&lt;/code&gt; そのスロットはオプションです。</target>
        </trans-unit>
        <trans-unit id="539951d39c2b051017250ec693df08f36d0a8f58" translate="yes" xml:space="preserve">
          <source>If the element with &lt;code&gt;ngRef&lt;/code&gt; is destroyed &lt;code&gt;null&lt;/code&gt; is assigned to the property.</source>
          <target state="translated">&lt;code&gt;ngRef&lt;/code&gt; を持つ要素が破棄されると、 &lt;code&gt;null&lt;/code&gt; がプロパティに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="8c51b91039912156c6ef5160d6f7caa8d6f1e32c" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a RegExp object, then this is used directly.</source>
          <target state="translated">式が RegExp オブジェクトに対して評価される場合は、これが直接使用されます。</target>
        </trans-unit>
        <trans-unit id="8fb5cd62dfec3bda2d681b5166adcc87bc454767" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a string, the string should be one or more space-delimited class names.</source>
          <target state="translated">式が文字列として評価される場合、その文字列は 1 つ以上のスペースで区切られたクラス名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bb3c8751b0c61a411cfd191d56c199c86cb9d8a9" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">式が文字列に評価される場合、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; 文字でラップした後、正規表現に変換されます。たとえば、 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; は &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="0a90d5734dbd86cb9e55270bd3a9ec2a471d3da2" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to an array, each element of the array should either be a string as in type 1 or an object as in type 2. This means that you can mix strings and objects together in an array to give you more control over what CSS classes appear. See the code below for an example of this.</source>
          <target state="translated">式が配列として評価される場合、配列の各要素はタイプ 1 のように文字列か、タイプ 2 のようにオブジェクトでなければなりません。これは、配列の中で文字列とオブジェクトを混在させることで、どのCSSクラスを表示するかをより自由にコントロールできることを意味します。その例として、以下のコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="9f28d2244e2fc42662b32132ed29fd1499d1d52b" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to an object, then for each key-value pair of the object with a truthy value the corresponding key is used as a class name.</source>
          <target state="translated">式がオブジェクトに対して評価される場合、真偽値を持つオブジェクトの各キーと値のペアに対して、対応するキーがクラス名として使用されます。</target>
        </trans-unit>
        <trans-unit id="d90a6cf7f68c8935fa77929bee3b2d26568ebc77" translate="yes" xml:space="preserve">
          <source>If the expression is truthy, then the &lt;code&gt;checked&lt;/code&gt; attribute will be set on the element. &lt;strong&gt;Note&lt;/strong&gt; : &lt;code&gt;ngChecked&lt;/code&gt; should not be used alongside &lt;code&gt;ngModel&lt;/code&gt;. Checkout &lt;a href=&quot;../directive/ngchecked&quot;&gt;ngChecked&lt;/a&gt; for usage.</source>
          <target state="translated">式が真の場合、 &lt;code&gt;checked&lt;/code&gt; 属性が要素に設定されます。&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;ngChecked&lt;/code&gt; はngModelと一緒に使用しないで &lt;code&gt;ngModel&lt;/code&gt; 。チェックアウト&lt;a href=&quot;../directive/ngchecked&quot;&gt;ngChecked&lt;/a&gt;使用法。</target>
        </trans-unit>
        <trans-unit id="4f8a5c1d790a45cf8480b55c2ec6d0e8c83e21ad" translate="yes" xml:space="preserve">
          <source>If the expression will not change once set, it is a candidate for one-time binding. Here are three example cases.</source>
          <target state="translated">一度設定した式が変わらない場合は、ワンタイムバインディングの候補になります。以下に3つの例を示します。</target>
        </trans-unit>
        <trans-unit id="8a619d19d7445d7e347bec6f9960436c9602b51f" translate="yes" xml:space="preserve">
          <source>If the first argument was a string, a factory function for the filter to be registered.</source>
          <target state="translated">第一引数が文字列の場合は、登録するフィルタのファクトリ関数。</target>
        </trans-unit>
        <trans-unit id="361c8831315e17339674f0ae2feca36f02b8ac8a" translate="yes" xml:space="preserve">
          <source>If the function throws an error or the returned promise gets rejected, no further processing will take place and the &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$routeChangeError&lt;/a&gt; event will be fired.</source>
          <target state="translated">関数がエラーをスローした場合、または返されたpromiseが拒否された場合、それ以上の処理は行われず、&lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$ routeChangeError&lt;/a&gt;イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="801344aef470ca55925f85d5fc988659687084e2" translate="yes" xml:space="preserve">
          <source>If the horizontal distance is greater, this is a swipe and &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; events follow.</source>
          <target state="translated">水平距離が長い場合、これはスワイプであり、 &lt;code&gt;move&lt;/code&gt; イベントと &lt;code&gt;end&lt;/code&gt; イベントが続きます。</target>
        </trans-unit>
        <trans-unit id="a956873d372528560c2d21f9517980780e587b81" translate="yes" xml:space="preserve">
          <source>If the input is null or undefined, it will just be returned. If the input is infinite (Infinity or -Infinity), the Infinity symbol '&amp;infin;' or '-&amp;infin;' is returned, respectively. If the input is not a number an empty string is returned.</source>
          <target state="translated">入力がnullまたは未定義の場合は、単に返されます。入力が無限（Infinityまたは-Infinity）の場合、Infinityシンボル '&amp;infin;'または '-&amp;infin;'がそれぞれ返されます。入力が数値でない場合は、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="3c59983d990ab2fd7484efe71b9e5bc2142d0391" translate="yes" xml:space="preserve">
          <source>If the interpolated value is not a &lt;code&gt;String&lt;/code&gt;, it is computed as follows:</source>
          <target state="translated">補間された値が &lt;code&gt;String&lt;/code&gt; でない場合、次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="5201fb064f6147470f00f21dea4bab9f47241e2f" translate="yes" xml:space="preserve">
          <source>If the map of attributes contains a value for &lt;code&gt;target&lt;/code&gt;, it overrides the value of the target parameter.</source>
          <target state="translated">属性のマップに &lt;code&gt;target&lt;/code&gt; の値が含まれている場合、それはtargetパラメーターの値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="fbd620b139e2c7c9068fe0980b84af6bdfabe8c0" translate="yes" xml:space="preserve">
          <source>If the ngMessages renders no inner ngMessage directive (i.e. when none of the truthy keys are matched by a defined message), then it will render a default message using the &lt;a href=&quot;ngmessages/directive/ngmessagedefault&quot;&gt;&lt;code&gt;ngMessageDefault&lt;/code&gt;&lt;/a&gt; directive. Note that matched messages will always take precedence over unmatched messages. That means the default message will not be displayed when another message is matched. This is also true for &lt;code&gt;ng-messages-multiple&lt;/code&gt;.</source>
          <target state="translated">ngMessagesが内部のngMessageディレクティブをレンダリングしない場合（つまり、定義されたメッセージと一致する真のキーがない場合）、&lt;a href=&quot;ngmessages/directive/ngmessagedefault&quot;&gt; &lt;code&gt;ngMessageDefault&lt;/code&gt; &lt;/a&gt;ディレクティブを使用してデフォルトのメッセージをレンダリングします。一致したメッセージは常に、一致しないメッセージよりも優先されることに注意してください。つまり、別のメッセージが一致した場合、デフォルトのメッセージは表示されません。これは &lt;code&gt;ng-messages-multiple&lt;/code&gt; にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="b16925af72a4fed089f605a5771aa7712c7c7fd8" translate="yes" xml:space="preserve">
          <source>If the object has a &lt;code&gt;valueOf()&lt;/code&gt; method that returns a primitive, its return value will be used instead.</source>
          <target state="translated">オブジェクトにプリミティブを返す &lt;code&gt;valueOf()&lt;/code&gt; メソッドがある場合、その戻り値が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="3f1a13de46e7e46a68d029c7a50e792f652a12e1" translate="yes" xml:space="preserve">
          <source>If the object has a custom &lt;code&gt;toString()&lt;/code&gt; method (i.e. not the one inherited from &lt;code&gt;Object&lt;/code&gt;) that returns a primitive, its return value will be used instead.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 、プリミティブを返すカスタムの &lt;code&gt;toString()&lt;/code&gt; メソッド（つまり、Objectから継承したメソッドではない）がある場合、その戻り値が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="b4070dda3da26b7789461241d4d6a2028444a334" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;false&lt;/code&gt; and the URL in the browser changes, but the new URL maps to the same route, then a &lt;code&gt;$routeUpdate&lt;/code&gt; event is broadcasted on the root scope (without reloading the route).</source>
          <target state="translated">オプションが &lt;code&gt;false&lt;/code&gt; に設定されていて、ブラウザーのURLが変更されても、新しいURLが同じルートにマップされている場合、 &lt;code&gt;$routeUpdate&lt;/code&gt; イベントがルートスコープでブロードキャストされます（ルートを再読み込みしません）。</target>
        </trans-unit>
        <trans-unit id="4f675d1330a06aa7e73c29dee26c8f270d3431c5" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;false&lt;/code&gt; and the URL in the browser changes, then a &lt;code&gt;$routeUpdate&lt;/code&gt; event is broadcasted on the root scope (without reloading the route).</source>
          <target state="translated">オプションが &lt;code&gt;false&lt;/code&gt; に設定されていて、ブラウザーのURLが変更されている場合、 &lt;code&gt;$routeUpdate&lt;/code&gt; イベントがルートスコープでブロードキャストされます（ルートを再読み込みしません）。</target>
        </trans-unit>
        <trans-unit id="667711c7d75a7f70cf4b59c7711f0e8c0ddf7c8c" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;true&lt;/code&gt;, then the particular route can be matched without being case sensitive</source>
          <target state="translated">オプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合は、大文字と小文字を区別せずに特定のルートを照合できます</target>
        </trans-unit>
        <trans-unit id="2fa05f4335e8c37af4609e2cbfa503116352d3ed" translate="yes" xml:space="preserve">
          <source>If the parameter value is prefixed with &lt;code&gt;@&lt;/code&gt;, then the value for that parameter will be extracted from the corresponding property on the &lt;code&gt;data&lt;/code&gt; object (provided when calling actions with a request body). For example, if the &lt;code&gt;defaultParam&lt;/code&gt; object is &lt;code&gt;{someParam: '@someProp'}&lt;/code&gt; then the value of &lt;code&gt;someParam&lt;/code&gt; will be &lt;code&gt;data.someProp&lt;/code&gt;. Note that the parameter will be ignored, when calling a &quot;GET&quot; action method (i.e. an action method that does not accept a request body).</source>
          <target state="translated">パラメータ値の前に &lt;code&gt;@&lt;/code&gt; が付いている場合、そのパラメータの値は、 &lt;code&gt;data&lt;/code&gt; オブジェクトの対応するプロパティから抽出されます（リクエストの本文でアクションを呼び出すときに提供されます）。たとえば、 &lt;code&gt;defaultParam&lt;/code&gt; オブジェクトが &lt;code&gt;{someParam: '@someProp'}&lt;/code&gt; の場合、 &lt;code&gt;someParam&lt;/code&gt; の値はdata.somePropになり &lt;code&gt;data.someProp&lt;/code&gt; 。「GET」アクションメソッド（リクエストボディを受け付けないアクションメソッド）を呼び出す場合、パラメータは無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="748507705e8b73f2f2de5777914e00ac0057102d" translate="yes" xml:space="preserve">
          <source>If the passed parameter had been returned by a prior call to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;, returns the value that had been passed to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">渡されたパラメータが前の呼び出しによって返された場合は&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;に渡された値を返します&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="34bdf8299f97f8ef59f74107df302ae6779e17bc" translate="yes" xml:space="preserve">
          <source>If the passed parameter is not a value that had been returned by &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;, it must be returned as-is.</source>
          <target state="translated">渡されたパラメーターが&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;によって返された値でない場合は、そのまま返される必要があります。</target>
        </trans-unit>
        <trans-unit id="eba391f315a45facb41d9100a63641fbf14c5c21" translate="yes" xml:space="preserve">
          <source>If the provider is:</source>
          <target state="translated">プロバイダの場合。</target>
        </trans-unit>
        <trans-unit id="8fb90fddde351c69618ca1d22a26145a9faddc79" translate="yes" xml:space="preserve">
          <source>If the service has been declared multiple times, a decorator will decorate the service that has been declared last:</source>
          <target state="translated">サービスが複数回宣言されている場合、デコレータは最後に宣言されたサービスをデコレーションします。</target>
        </trans-unit>
        <trans-unit id="073e1a6fd73d36907ed730dd5649eee40ed506d0" translate="yes" xml:space="preserve">
          <source>If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing content of this element will be removed before the transcluded content is inserted. If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback content in the case that no transcluded content is provided.</source>
          <target state="translated">除外されたコンテンツが空でない場合(すなわち、空白のテキストノードを含む一つ以上のDOMノードを含む場合)、この要素の既存のコンテンツは、除外されたコンテンツが挿入される前に削除されます。除外されたコンテンツが空(またはホワイトスペースのみ)の場合、既存のコンテンツはそのまま残されます。これにより、トランスクロードされたコンテンツが提供されない場合に、フォールバックコンテンツを提供することができます。</target>
        </trans-unit>
        <trans-unit id="d9ff46f623d6f00d105132061348b4f635bc911c" translate="yes" xml:space="preserve">
          <source>If the value is a RegExp literal, e.g. &lt;code&gt;ngPattern=&quot;/^\d+$/&quot;&lt;/code&gt;, it is used directly.</source>
          <target state="translated">値がRegExpリテラルの場合（例： &lt;code&gt;ngPattern=&quot;/^\d+$/&quot;&lt;/code&gt; 、それは直接使用されます。</target>
        </trans-unit>
        <trans-unit id="691fa80c49c3faa2138cb82838f938dea193adbf" translate="yes" xml:space="preserve">
          <source>If the value is empty, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;on&lt;/code&gt;, then child animations are allowed. If the value is &lt;code&gt;false&lt;/code&gt;, child animations are not allowed.</source>
          <target state="translated">値が空、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;on&lt;/code&gt; の場合、子アニメーションが許可されます。値が &lt;code&gt;false&lt;/code&gt; の場合、子アニメーションは許可されません。</target>
        </trans-unit>
        <trans-unit id="34f1578079504e9d3dc1f5f790637a829842cb7f" translate="yes" xml:space="preserve">
          <source>If the vertical distance is greater, this is a scroll, and we let the browser take over. A &lt;code&gt;cancel&lt;/code&gt; event is sent.</source>
          <target state="translated">垂直方向の距離が大きい場合、これはスクロールであり、ブラウザーに引き継がせます。Aは &lt;code&gt;cancel&lt;/code&gt; イベントが送信されます。</target>
        </trans-unit>
        <trans-unit id="2d6b619ad1758255d1b68794d39d43746c76cfac" translate="yes" xml:space="preserve">
          <source>If the viewValue of &lt;code&gt;ngModel&lt;/code&gt; does not match any of the options, then the control will automatically add an &quot;unknown&quot; option, which it then removes when the mismatch is resolved.</source>
          <target state="translated">ngModelの &lt;code&gt;ngModel&lt;/code&gt; がどのオプションとも一致しない場合、コントロールは自動的に「不明」オプションを追加し、不一致が解決されたときに削除されます。</target>
        </trans-unit>
        <trans-unit id="9a9455b461bd0ed851b0a2e20ee353139e41bf20" translate="yes" xml:space="preserve">
          <source>If there are no pending requests to flush when the method is called, an exception is thrown (as this is typically a sign of programming error).</source>
          <target state="translated">メソッドが呼ばれたときにフラッシュするための保留中のリクエストがない場合、例外がスローされます (これは一般的にプログラミングエラーの兆候であるため)。</target>
        </trans-unit>
        <trans-unit id="060ea5570e9b3727e1af7089f2eeb073f6d7b905" translate="yes" xml:space="preserve">
          <source>If those attributes are added to an element, they will be applied to all the child elements and controls that inherit from it unless they are overridden.</source>
          <target state="translated">これらの属性が要素に追加された場合、それらの属性はオーバーライドされない限り、その要素を継承するすべての子要素とコントロールに適用されます。</target>
        </trans-unit>
        <trans-unit id="a0c1cfe0ec558e25c8faaad7729d14ba017c6c40" translate="yes" xml:space="preserve">
          <source>If true, then the scope does not prototypically inherit from the parent scope. The scope is isolated, as it can not see parent scope properties. When creating widgets, it is useful for the widget to not accidentally read parent state.</source>
          <target state="translated">true の場合、スコープは親スコープをプロトタイピング的に継承しません。スコープは親スコープのプロパティを見ることができないので、隔離されます。ウィジェットを作成する際に、誤って親の状態を読み込まないようにしておくと便利です。</target>
        </trans-unit>
        <trans-unit id="1a1eda02417fef4dacf554c54592d8c5e31f4371" translate="yes" xml:space="preserve">
          <source>If true, when requests are loaded, they will schedule a deferred &quot;apply&quot; on the next tick, giving time for subsequent requests in a roughly ~10ms window to load and share the same digest cycle.</source>
          <target state="translated">true の場合、リクエストがロードされたときに、次のティックで &quot;apply&quot; を遅延させ、後続のリクエストが約 10ms のウィンドウでロードされ、同じダイジェストサイクルを共有する時間を与えます。</target>
        </trans-unit>
        <trans-unit id="6f15cbe99032410d5987084ecc33f306be94d6db" translate="yes" xml:space="preserve">
          <source>If two directives suspend a scope, then one of them resumes the scope, the scope will no longer be suspended. This could result in the other directive believing a scope to be suspended when it is not.</source>
          <target state="translated">二つのディレクティブがスコープを一時停止した後、一方のディレクティブがスコープを再開した場合、 スコープはもう一時停止されません。これは、スコープが中断されていないのに、もう一方のディレクティブが スコープが中断されていると思い込んでしまうことになりかねません。</target>
        </trans-unit>
        <trans-unit id="62a2ab806aea83a4f315e6a0440d6fa1d95f6028" translate="yes" xml:space="preserve">
          <source>If we change the above to &lt;code&gt;{{ 1000 | currency:&quot;USD$&quot;}}&lt;/code&gt;, AngularJS will always show a balance of &lt;code&gt;USD$1000&lt;/code&gt; regardless of locale.</source>
          <target state="translated">上記を &lt;code&gt;{{ 1000 | currency:&quot;USD$&quot;}}&lt;/code&gt; 、AngularJSはロケールに関係なく常に &lt;code&gt;USD$1000&lt;/code&gt; 残高を表示します。</target>
        </trans-unit>
        <trans-unit id="8182958d3c9e9a8a4566ae6109e758f0624b87f7" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable component then you should be careful when using &lt;code&gt;&quot;*&quot;: &quot;$inherit&quot;&lt;/code&gt; since you may inadvertently inherit a setting in the future that changes the behavior of your component.</source>
          <target state="translated">再利用可能なコンポーネントを作成する場合、 &lt;code&gt;&quot;*&quot;: &quot;$inherit&quot;&lt;/code&gt; を使用するときは注意が必要です。コンポーネントの動作を変更する設定を将来誤って継承する可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="6824fd64e915a35e23d50509c5e4bba8e51856fc" translate="yes" xml:space="preserve">
          <source>If you are familiar with &lt;code&gt;ngInclude&lt;/code&gt;, &lt;code&gt;templateUrl&lt;/code&gt; works just like it. Here's the same example using &lt;code&gt;templateUrl&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;ngInclude&lt;/code&gt; に精通している場合、 &lt;code&gt;templateUrl&lt;/code&gt; は同じように機能します。代わりに &lt;code&gt;templateUrl&lt;/code&gt; を使用した同じ例を次に示します。</target>
        </trans-unit>
        <trans-unit id="77b4c3f9eed7868de1adc6770793e45e91738ff2" translate="yes" xml:space="preserve">
          <source>If you are generating your JavaScript from some other templating engine (not recommended, e.g. in issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;#4006&lt;/a&gt;), remember to escape your regular expression (and be aware that you might need more than one level of escaping depending on your templating engine and the way you interpolated the value.) Do make use of your platform's escaping mechanism as it might be good enough before coding your own. E.g. Ruby has &lt;a href=&quot;http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape(str)&lt;/a&gt; and Python has &lt;a href=&quot;http://docs.python.org/library/re.html#re.escape&quot;&gt;re.escape&lt;/a&gt;. Javascript lacks a similar built in function for escaping. Take a look at Google Closure library's &lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape(s)&lt;/a&gt;.</source>
          <target state="translated">他のテンプレートエンジンからJavaScriptを生成している場合（非推奨、例：&lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;＃4006で&lt;/a&gt;）、正規表現をエスケープすることを忘れないでください（テンプレートエンジンと方法によっては、複数のレベルのエスケープが必要になる場合があることに注意してください）独自にコーディングする前に十分な場合があるため、プラットフォームのエスケープメカニズムを利用してください。たとえば、Rubyには&lt;a href=&quot;http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape（str）が&lt;/a&gt;あり、Pythonには&lt;a href=&quot;http://docs.python.org/library/re.html#re.escape&quot;&gt;re.escapeがあり&lt;/a&gt;ます。 JavaScriptには、エスケープ用の同様の組み込み関数がありません。 Google Closureライブラリの&lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape（s）をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b6eb4ae425f6b3c3ae99c9d7fe5a3b19d677c5c" translate="yes" xml:space="preserve">
          <source>If you are generating your JavaScript from some other templating engine (not recommended, e.g. in issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;#4006&lt;/a&gt;), remember to escape your regular expression (and be aware that you might need more than one level of escaping depending on your templating engine and the way you interpolated the value.) Do make use of your platform's escaping mechanism as it might be good enough before coding your own. E.g. Ruby has &lt;a href=&quot;https://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape(str)&lt;/a&gt; and Python has &lt;a href=&quot;https://docs.python.org/library/re.html#re.escape&quot;&gt;re.escape&lt;/a&gt;. Javascript lacks a similar built in function for escaping. Take a look at Google Closure library's &lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape(s)&lt;/a&gt;.</source>
          <target state="translated">他のテンプレートエンジンからJavaScriptを生成している場合（推奨されない、たとえば問題&lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;＃4006&lt;/a&gt;）、正規表現をエスケープすることを忘れないでください（テンプレートエンジンと方法によっては、複数レベルのエスケープが必要になる場合があることに注意してください）。値を補間しました。）独自のコーディングを行う前に十分な場合があるため、プラットフォームのエスケープメカニズムを利用してください。たとえば、Rubyには&lt;a href=&quot;https://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape（str）が&lt;/a&gt;あり、Pythonには&lt;a href=&quot;https://docs.python.org/library/re.html#re.escape&quot;&gt;re.escapeがあり&lt;/a&gt;ます。 Javascriptには、エスケープするための同様の組み込み関数がありません。&lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;GoogleClosure&lt;/a&gt;ライブラリのgoog.string.regExpEscape（s）をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a29cc079c5381669c7a3a9da4c7b33b8f798e95e" translate="yes" xml:space="preserve">
          <source>If you are hitting any of these limitations, the recommended workaround is to convert your object into an array that is sorted into the order that you prefer before providing it to &lt;code&gt;ngRepeat&lt;/code&gt;. You could do this with a filter such as &lt;a href=&quot;http://ngmodules.org/modules/angular-toArrayFilter&quot;&gt;toArrayFilter&lt;/a&gt; or implement a &lt;code&gt;$watch&lt;/code&gt; on the object yourself.</source>
          <target state="translated">これらの制限のいずれかに &lt;code&gt;ngRepeat&lt;/code&gt; ている場合、推奨される回避策は、オブジェクトをngRepeatに提供する前に、お好みの順序でソートされた配列に変換することです。&lt;a href=&quot;http://ngmodules.org/modules/angular-toArrayFilter&quot;&gt;toArrayFilter&lt;/a&gt;などのフィルターを使用してこれを行うか、オブジェクトに &lt;code&gt;$watch&lt;/code&gt; を自分で実装できます。</target>
        </trans-unit>
        <trans-unit id="99dd2e2dc29df4f42bc993e77fee00d09330237a" translate="yes" xml:space="preserve">
          <source>If you are just using &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; then you don't need to worry about this function, since ngTransclude will deal with it for us.</source>
          <target state="translated">&lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt;を使用しているだけの場合は、ngTranscludeが処理するため、この関数について心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a45454eb838a97c3b99832ac7c22cb8a9f728800" translate="yes" xml:space="preserve">
          <source>If you are not asking the linking function to clone the template, create the DOM element(s) before you send them to the compiler and keep this reference around.</source>
          <target state="translated">リンク関数にテンプレートの複製を依頼していない場合は、コンパイラに送る前に DOM 要素を作成し、この参照を手元に置いておきます。</target>
        </trans-unit>
        <trans-unit id="05854a1d0c3c61abd34a6185ba88099223eaf1f6" translate="yes" xml:space="preserve">
          <source>If you are setting the option value with the option's &lt;code&gt;value&lt;/code&gt; attribute, or textContent, the value will always be a &lt;code&gt;string&lt;/code&gt; which means that the model value must also be a string. Otherwise the &lt;code&gt;select&lt;/code&gt; directive cannot match them correctly.</source>
          <target state="translated">あなたは、オプションのでオプションの値を設定している場合は &lt;code&gt;value&lt;/code&gt; 属性、またはのTextContent、値は常になり &lt;code&gt;string&lt;/code&gt; のモデル値も文字列でなければならないことを意味しています。そうでない場合、 &lt;code&gt;select&lt;/code&gt; ディレクティブはそれらを正しく一致させることができません。</target>
        </trans-unit>
        <trans-unit id="8616bb7e831e9c34f5ed1c22db4f4d693acd3c1c" translate="yes" xml:space="preserve">
          <source>If you are sure that your project only uses element and attribute directives, and you are not using any 3rd party library that uses directives inside element classes or html comments, you can disable the compilation of directives on element classes and comments for the whole application. This results in a compilation performance gain, as the compiler does not have to check comments and element classes looking for directives.</source>
          <target state="translated">プロジェクトが要素と属性のディレクティブのみを使用し、要素クラスや html コメントの中でディレクティブを使用するサードパーティのライブラリを使用していないことが確実であれば、アプリケーション全体の要素クラスとコメント上のディレクティブのコンパイルを無効にすることができます。これは、コンパイラがコメントや要素クラスをチェックしてディレクティブを探す必要がないので、コンパイルのパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="7f18d87980792564416a9131237779e5b2ab35b5" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;$element&lt;/code&gt; or &lt;code&gt;$attrs&lt;/code&gt; in the controller, make sure to provide them as &lt;code&gt;locals&lt;/code&gt;. The &lt;code&gt;$element&lt;/code&gt; must be a jqLite-wrapped DOM element, and &lt;code&gt;$attrs&lt;/code&gt; should be an object that has all properties / functions that you are using in the controller. If this is getting too complex, you should compile the component instead and access the component's controller via the &lt;a href=&quot;../../ng/function/angular.element#methods.html&quot;&gt;&lt;code&gt;controller&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">コントローラーで &lt;code&gt;$element&lt;/code&gt; または &lt;code&gt;$attrs&lt;/code&gt; を使用している場合は、それらを &lt;code&gt;locals&lt;/code&gt; として提供してください。 &lt;code&gt;$element&lt;/code&gt; jqLit​​e包まれたDOM要素でなければならない、と &lt;code&gt;$attrs&lt;/code&gt; あなたがコントローラで使用しているすべての特性/機能を持つオブジェクトでなければなりません。これが複雑になりすぎる場合は、代わりにコンポーネントをコンパイルし、&lt;a href=&quot;../../ng/function/angular.element#methods.html&quot;&gt; &lt;code&gt;controller&lt;/code&gt; &lt;/a&gt;関数を介してコンポーネントのコントローラーにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="62ca6a2bc0e076ff23829bf151f3637b4d8d77f5" translate="yes" xml:space="preserve">
          <source>If you are using a url with a suffix, just add the suffix, like this: &lt;code&gt;$resource('http://example.com/resource.json')&lt;/code&gt; or &lt;code&gt;$resource('http://example.com/:id.json')&lt;/code&gt; or even &lt;code&gt;$resource('http://example.com/resource/:resource_id.:format')&lt;/code&gt; If the parameter before the suffix is empty, :resource_id in this case, then the &lt;code&gt;/.&lt;/code&gt; will be collapsed down to a single &lt;code&gt;.&lt;/code&gt;. If you need this sequence to appear and not collapse then you can escape it with &lt;code&gt;/\.&lt;/code&gt;.</source>
          <target state="translated">サフィックス付きのURLを使用している場合は、次のようにサフィックスを追加するだけです： &lt;code&gt;$resource('http://example.com/resource.json')&lt;/code&gt; または &lt;code&gt;$resource('http://example.com/:id.json')&lt;/code&gt; または &lt;code&gt;$resource('http://example.com/resource/:resource_id.:format')&lt;/code&gt; サフィックスの前のパラメーターが空の場合、この場合は：resource_id、次に &lt;code&gt;/.&lt;/code&gt; 単一に折りたたまれ &lt;code&gt;.&lt;/code&gt; 。このシーケンスが表示され、折りたたまれないようにする必要がある場合は、 &lt;code&gt;/\.&lt;/code&gt; エスケープできます。。</target>
        </trans-unit>
        <trans-unit id="8175243d5dd6cd4ad446324c5b107b61705e0849" translate="yes" xml:space="preserve">
          <source>If you are writing your controllers as classes you have easier access to the properties and methods, which will appear on the scope, from inside the controller code.</source>
          <target state="translated">コントローラをクラスとして書く場合は、 スコープに表示されるプロパティやメソッドにコントローラのコード内から簡単にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="579b0bfd8c97d214c17252551f1e2da79f4821e2" translate="yes" xml:space="preserve">
          <source>If you choose to use the old style directive syntax &lt;code&gt;ng:&lt;/code&gt; then include xml-namespace in &lt;code&gt;html&lt;/code&gt; when running the page in the XHTML mode. (This is here for historical reasons, and we no longer recommend use of &lt;code&gt;ng:&lt;/code&gt;.)</source>
          <target state="translated">古いスタイルディレクティブ構文 &lt;code&gt;ng:&lt;/code&gt; を使用する場合は、XHTMLモードでページを実行するときに、 &lt;code&gt;html&lt;/code&gt; にxml-namespaceを含めます。（これは歴史的な理由によりここにあり、 &lt;code&gt;ng:&lt;/code&gt; の使用はお勧めしません。）</target>
        </trans-unit>
        <trans-unit id="95ac9993d00393a11c4032cc3f53f03837212f99" translate="yes" xml:space="preserve">
          <source>If you do have CSS transitions / animations defined for the animation events, make sure they have a higher priority than any styles that are not related to &lt;code&gt;ngAnimate&lt;/code&gt;.</source>
          <target state="translated">アニメーションイベントにCSSトランジション/アニメーションを定義している場合は、 &lt;code&gt;ngAnimate&lt;/code&gt; に関連しないスタイルよりも優先されるようにしてください。</target>
        </trans-unit>
        <trans-unit id="e60f87bc71cf08bbc7d9b1d676646a6c5716f48c" translate="yes" xml:space="preserve">
          <source>If you do not provide &lt;code&gt;ngCsp&lt;/code&gt; then AngularJS tries to autodetect if CSP is blocking dynamic code creation from strings (e.g., &lt;code&gt;unsafe-eval&lt;/code&gt; not specified in CSP header) and automatically deactivates this feature in the &lt;a href=&quot;../service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service. This autodetection, however, triggers a CSP error to be logged in the console:</source>
          <target state="translated">&lt;code&gt;ngCsp&lt;/code&gt; を指定しない場合、AngularJSは、CSPが文字列からの動的コードの作成をブロックしているかどうかを自動検出しようとし（たとえば、CSPヘッダーで指定されていない &lt;code&gt;unsafe-eval&lt;/code&gt; ）、&lt;a href=&quot;../service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt;サービスでこの機能を自動的に無効にします。ただし、この自動検出により、CSPエラーがコンソールに記録されます。</target>
        </trans-unit>
        <trans-unit id="090e07725aef98ccf8c178d8354126ccc84bb075" translate="yes" xml:space="preserve">
          <source>If you do want your animations to play when the app bootstraps, you can enable animations globally in your main module's &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;run&lt;/a&gt; function:</source>
          <target state="translated">アプリのブートストラップ時にアニメーションを再生したい場合は、メインモジュールの&lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;実行&lt;/a&gt;関数でアニメーションをグローバルに有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c54acd5a1055cc95784ce1576ee1d24938a564f3" translate="yes" xml:space="preserve">
          <source>If you have an input that uses &lt;code&gt;ng-model-options&lt;/code&gt; to set up debounced updates or updates that depend on special events such as &lt;code&gt;blur&lt;/code&gt;, there can be a period when the &lt;code&gt;$viewValue&lt;/code&gt; is out of sync with the ngModel's &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-model-options&lt;/code&gt; を使用して、デバウンスされた更新または &lt;code&gt;blur&lt;/code&gt; などの特別なイベントに依存する更新を設定する入力がある場合、 &lt;code&gt;$viewValue&lt;/code&gt; がngModelの &lt;code&gt;$modelValue&lt;/code&gt; と同期していない期間がある可能性があります。</target>
        </trans-unit>
        <trans-unit id="f76a6558a7d25629fa9ecb3f235d6240ed436b29" translate="yes" xml:space="preserve">
          <source>If you have awesome AngularJS resources that belong on that page, please tell us about them on &lt;a href=&quot;https://plus.google.com/u/0/+AngularJS&quot;&gt;Google+&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/angularjs&quot;&gt;Twitter&lt;/a&gt;.</source>
          <target state="translated">そのページに属する素晴らしいAngularJSリソースがある場合は、&lt;a href=&quot;https://plus.google.com/u/0/+AngularJS&quot;&gt;Google +&lt;/a&gt;または&lt;a href=&quot;https://twitter.com/angularjs&quot;&gt;Twitterで&lt;/a&gt;お知らせください。</target>
        </trans-unit>
        <trans-unit id="cc605f97c4d62e22545f2f1d9d3a0d4805d17f68" translate="yes" xml:space="preserve">
          <source>If you have very specific requirements about the way items are sorted, you can pass your own comparator function. For example, you might need to compare some strings in a locale-sensitive way. (When specifying a custom comparator, you also need to pass a value for the &lt;code&gt;reverse&lt;/code&gt; argument - passing &lt;code&gt;false&lt;/code&gt; retains the default sorting order, i.e. ascending.)</source>
          <target state="translated">アイテムのソート方法について非常に具体的な要件がある場合は、独自のコンパレーター関数を渡すことができます。たとえば、ロケールに依存した方法で一部の文字列を比較する必要がある場合があります。（カスタムコンパレータを指定するとき、あなたはまたのために値を渡す必要が &lt;code&gt;reverse&lt;/code&gt; 引き-渡す &lt;code&gt;false&lt;/code&gt; 順番を並べ替え、デフォルト、すなわち上昇を保持します。）</target>
        </trans-unit>
        <trans-unit id="83df81bb997c0451e68609a38aa5876c44d17de2" translate="yes" xml:space="preserve">
          <source>If you however do need to write a stateful filter, you have to mark the filter as &lt;code&gt;$stateful&lt;/code&gt;, which means that it will be executed one or more times during the each &lt;code&gt;$digest&lt;/code&gt; cycle.</source>
          <target state="translated">ただし、ステートフルフィルターを作成する必要がある場合は、フィルターを &lt;code&gt;$stateful&lt;/code&gt; としてマークする必要があります。つまり、各 &lt;code&gt;$digest&lt;/code&gt; サイクル中に1回以上実行されます。</target>
        </trans-unit>
        <trans-unit id="207d49b848c74ffcb21da0b752a994a1ebcb5c10" translate="yes" xml:space="preserve">
          <source>If you intend to implement CSP with these rules then you must tell AngularJS not to use these features.</source>
          <target state="translated">これらのルールでCSPを実装する場合は、AngularJSにこれらの機能を使用しないように指示しなければなりません。</target>
        </trans-unit>
        <trans-unit id="870c0ac7d5968a770c3f532b92db58783f974638" translate="yes" xml:space="preserve">
          <source>If you need access to the bound view, there are two ways to do it:</source>
          <target state="translated">バウンドビューへのアクセスが必要な場合は、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="2aa27655c9b71a602d902a015fc4942f9f7944c1" translate="yes" xml:space="preserve">
          <source>If you need to have more control over the initialization process, you can use a manual bootstrapping method instead. Examples of when you'd need to do this include using script loaders or the need to perform an operation before AngularJS compiles a page.</source>
          <target state="translated">初期化プロセスをよりコントロールしたい場合は、代わりに手動のブートストラップメソッドを使うことができます。このような場合の例としては、スクリプトローダーを使用したり、AngularJSがページをコンパイルする前に操作を行う必要がある場合などがあります。</target>
        </trans-unit>
        <trans-unit id="dbca727a7864fd896ef933ac7699c9e2ca5dac44" translate="yes" xml:space="preserve">
          <source>If you need to test a nested Controller you must create the same scope hierarchy in your test that exists in the DOM:</source>
          <target state="translated">入れ子になったControllerをテストする必要がある場合は、DOM内に存在するものと同じスコープ階層をテストで作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d9181af21716003a3c721a1845e6a9eddf078bb2" translate="yes" xml:space="preserve">
          <source>If you omit the &lt;code&gt;name&lt;/code&gt; attribute on a radio input, &lt;code&gt;ngModel&lt;/code&gt; will automatically assign it a unique name.</source>
          <target state="translated">ラジオ入力で &lt;code&gt;name&lt;/code&gt; 属性を省略すると、 &lt;code&gt;ngModel&lt;/code&gt; は自動的に一意の名前を割り当てます。</target>
        </trans-unit>
        <trans-unit id="ecb468ce29d2f458690fba5b025b3f86a8d80c22" translate="yes" xml:space="preserve">
          <source>If you only want a promise that will be resolved after some specified delay then you can call &lt;code&gt;$timeout&lt;/code&gt; without the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">特定の遅延の後に解決されるpromiseだけが必要な場合は、 &lt;code&gt;fn&lt;/code&gt; 関数なしで &lt;code&gt;$timeout&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a5b2fc07801a43a0c7f77b3da6fcfcbca33ad603" translate="yes" xml:space="preserve">
          <source>If you use a custom comparator, it will be called with pairs of objects of the form &lt;code&gt;{value: ..., type: '...', index: ...}&lt;/code&gt; and is expected to return &lt;code&gt;0&lt;/code&gt; if the objects are equal (as far as the comparator is concerned), &lt;code&gt;-1&lt;/code&gt; if the 1st one should be ranked higher than the second, or &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">カスタムコンパレーターを使用する場合、 &lt;code&gt;{value: ..., type: '...', index: ...}&lt;/code&gt; の形式のオブジェクトのペアで呼び出され、オブジェクトが等しい場合は &lt;code&gt;0&lt;/code&gt; を返すことが期待されます（コンパレータに関する限り）、1つ目を2つ目よりも高くランク付けする場合は &lt;code&gt;-1&lt;/code&gt; 、それ以外の場合は &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58f3058d3baff2b3a073006ea03f29eefad6d04e" translate="yes" xml:space="preserve">
          <source>If you want to be notified whenever &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; is called, you can register a &lt;code&gt;watchExpression&lt;/code&gt; function with no &lt;code&gt;listener&lt;/code&gt;. (Be prepared for multiple calls to your &lt;code&gt;watchExpression&lt;/code&gt; because it will execute multiple times in a single &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle if a change is detected.)</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;が呼び出されたときに通知を &lt;code&gt;watchExpression&lt;/code&gt; 場合は、 &lt;code&gt;listener&lt;/code&gt; なしでwatchExpression関数を登録できます。（ &lt;code&gt;watchExpression&lt;/code&gt; は、変更が検出された場合、単一の&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルで複数回実行されるため、watchExpressionを複数回呼び出す準備をしてください。）</target>
        </trans-unit>
        <trans-unit id="6f6cc8237e6dc46dbea8035f91ef1cceb56523a5" translate="yes" xml:space="preserve">
          <source>If you want to be notified whenever &lt;code&gt;$digest()&lt;/code&gt; is called, you can register a &lt;code&gt;watchExpression&lt;/code&gt; function with &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; with no &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$digest()&lt;/code&gt; が呼び出されたときに常に通知を &lt;code&gt;watchExpression&lt;/code&gt; たい場合は、 &lt;code&gt;listener&lt;/code&gt; なしで&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;でwatchExpression関数を登録できます。</target>
        </trans-unit>
        <trans-unit id="ac59abc08a6313ed9820733d9cddfe40a666fa59" translate="yes" xml:space="preserve">
          <source>If you want to keep the default behavior and just add new events that may trigger the model update and validation, add &quot;default&quot; as one of the specified events.</source>
          <target state="translated">デフォルトの動作を維持したまま、モデルの更新と検証のトリガーとなる可能性のある新しいイベントを追加するだけにしたい場合は、指定されたイベントの1つとして「default」を追加します。</target>
        </trans-unit>
        <trans-unit id="7ffb3f226f4ffeb1e0ee64801113cc17b7d6cb85" translate="yes" xml:space="preserve">
          <source>If you want to manually control the insertion and removal of the transcluded content in your directive then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery object that contains the compiled DOM, which is linked to the correct transclusion scope.</source>
          <target state="translated">ディレクティブの中でトランスクルードされたコンテンツの挿入と削除を手動で制御したい場合は、この transclude 関数を使用しなければなりません。transclude 関数を呼び出すと、コンパイルされた DOM を含む jqLite/JQuery オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="a0ea1c4594995ec365515b0f24785bafbd02e2b9" translate="yes" xml:space="preserve">
          <source>If you want to manually control the insertion and removal of the transcluded content in your directive then you must use this transclude function. When you call a transclude function it returns a jqLite/JQuery object that contains the compiled DOM, which is linked to the correct transclusion scope.</source>
          <target state="translated">ディレクティブの中でトランスクルードされたコンテンツの挿入と削除を手動で制御したい場合は、この transclude 関数を使用しなければなりません。transclude 関数を呼び出すと、コンパイルされた DOM を含む jqLite/JQuery オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="350e89977f66c00f278ba622f5c870b1d11fc27e" translate="yes" xml:space="preserve">
          <source>If you want to pass custom options to the &lt;code&gt;$http&lt;/code&gt; service, such as setting the Accept header you can configure this via &lt;a href=&quot;../provider/%24templaterequestprovider#httpOptions.html&quot;&gt;&lt;code&gt;$templateRequestProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Acceptヘッダーの設定などのカスタムオプションを &lt;code&gt;$http&lt;/code&gt; サービスに渡す場合は、&lt;a href=&quot;../provider/%24templaterequestprovider#httpOptions.html&quot;&gt; &lt;code&gt;$templateRequestProvider&lt;/code&gt; &lt;/a&gt;使用してこれを構成できます。</target>
        </trans-unit>
        <trans-unit id="55cac270f43d60bf68fc09da3ef0e7d2fc46b878" translate="yes" xml:space="preserve">
          <source>If you want to run more complex JavaScript code, you should make it a controller method and call the method from your view. If you want to &lt;code&gt;eval()&lt;/code&gt; an AngularJS expression yourself, use the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24eval.html&quot;&gt;&lt;code&gt;$eval()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">より複雑なJavaScriptコードを実行する場合は、それをコントローラーメソッドにして、ビューからメソッドを呼び出す必要があります。AngularJS式を自分で &lt;code&gt;eval()&lt;/code&gt; したい場合は、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24eval.html&quot;&gt; &lt;code&gt;$eval()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="94ef57a2b10b7fb543b9ad681272e7260b865493" translate="yes" xml:space="preserve">
          <source>If you wish to be able to navigate to the application via a URL such as &lt;code&gt;/base&lt;/code&gt; then you should ensure that your server is setup to redirect such requests to &lt;code&gt;/base/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/base&lt;/code&gt; などのURLを介してアプリケーションに移動できるようにする場合は、サーバーがそのような要求を &lt;code&gt;/base/&lt;/code&gt; にリダイレクトするように設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a461bd3d1f4cd564f100034e6f4c026c6547ba8" translate="yes" xml:space="preserve">
          <source>If you wish to debug an application with this information then you should open up a debug console in the browser then call this method directly in this console:</source>
          <target state="translated">この情報を使ってアプリケーションをデバッグしたい場合は、ブラウザでデバッグコンソールを開き、このコンソールで直接このメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="67961efc8f60d457340202b3fece6ab62a772fa8" translate="yes" xml:space="preserve">
          <source>If you wish to exclude these then you can use the native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite&quot;&gt;`isFinite'&lt;/a&gt; method.</source>
          <target state="translated">これらを除外したい場合は、ネイティブの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite&quot;&gt;「isFinite」&lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="febd4482ea90c369092b50e44a77405198b68c7e" translate="yes" xml:space="preserve">
          <source>If you wish to override the request/response transformations only for a single request then provide &lt;code&gt;transformRequest&lt;/code&gt; and/or &lt;code&gt;transformResponse&lt;/code&gt; properties on the configuration object passed into &lt;code&gt;$http&lt;/code&gt;.</source>
          <target state="translated">単一のリクエストに対してのみリクエスト/レスポンス変換をオーバーライドしたい場合は、 &lt;code&gt;$http&lt;/code&gt; 渡された設定オブジェクトに &lt;code&gt;transformRequest&lt;/code&gt; および/または &lt;code&gt;transformResponse&lt;/code&gt; プロパティを提供します。</target>
        </trans-unit>
        <trans-unit id="92efd56723876207dc42707b797385c44e1ed645" translate="yes" xml:space="preserve">
          <source>If you wish, you can manually delegate exceptions, e.g. &lt;code&gt;try { ... } catch(e) { $exceptionHandler(e); }&lt;/code&gt;</source>
          <target state="translated">必要に応じて、例外を手動で委任することができます。たとえば、 &lt;code&gt;try { ... } catch(e) { $exceptionHandler(e); }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5dede550c88c109a7aa713ce10867aee17cad1fe" translate="yes" xml:space="preserve">
          <source>If you would like to customise where and how the callbacks are stored then try overriding or decorating the &lt;a href=&quot;%24jsonpcallbacks&quot;&gt;&lt;code&gt;$jsonpCallbacks&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">コールバックが保存される場所と方法をカスタマイズしたい場合は、&lt;a href=&quot;%24jsonpcallbacks&quot;&gt; &lt;code&gt;$jsonpCallbacks&lt;/code&gt; &lt;/a&gt;サービスをオーバーライドまたは装飾してみてください。</target>
        </trans-unit>
        <trans-unit id="6de6f522958da34b1dcc259678edc0cbe2c6e606" translate="yes" xml:space="preserve">
          <source>If you're using manual bootstrapping, you can also use strict DI by providing &lt;code&gt;strictDi: true&lt;/code&gt; in the optional config argument:</source>
          <target state="translated">手動ブートストラップを使用している場合は、オプションのconfig引数に &lt;code&gt;strictDi: true&lt;/code&gt; を指定することで、strict DIを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="27ab337d46310ca730ffb687877a71fd87b9ffd3" translate="yes" xml:space="preserve">
          <source>If your app is currently in the &lt;code&gt;en-US&lt;/code&gt; locale, the browser will show &lt;code&gt;$1000.00&lt;/code&gt;. If someone in the Japanese locale (&lt;code&gt;ja&lt;/code&gt;) views your app, their browser will show a balance of &lt;code&gt;&amp;yen;1000.00&lt;/code&gt; instead. This is problematic because $1000 is not the same as &amp;yen;1000.</source>
          <target state="translated">アプリが現在 &lt;code&gt;en-US&lt;/code&gt; ロケールにある場合、ブラウザーには &lt;code&gt;$1000.00&lt;/code&gt; と表示されます。日本語ロケール（ &lt;code&gt;ja&lt;/code&gt; ）の誰かがアプリを表示した場合、代わりにブラウザーの残高が &lt;code&gt;&amp;yen;1000.00&lt;/code&gt; と表示されます。$ 1000は&amp;yen;1000と同じではないので、これには問題があります。</target>
        </trans-unit>
        <trans-unit id="1430bac2eebac9bf88d3059ad02454360c8556c7" translate="yes" xml:space="preserve">
          <source>If your directive uses &lt;code&gt;templateUrl&lt;/code&gt;, consider using &lt;a href=&quot;https://github.com/karma-runner/karma-ng-html2js-preprocessor&quot;&gt;karma-ng-html2js-preprocessor&lt;/a&gt; to pre-compile HTML templates and thus avoid having to load them over HTTP during test execution. Otherwise you may run into issues if the test directory hierarchy differs from the application's.</source>
          <target state="translated">ディレクティブで &lt;code&gt;templateUrl&lt;/code&gt; を使用する場合は、&lt;a href=&quot;https://github.com/karma-runner/karma-ng-html2js-preprocessor&quot;&gt;karma-ng-html2js-preprocessor&lt;/a&gt;を使用してHTMLテンプレートをプリコンパイルすることを検討してください。これにより、テストの実行中にHTTP経由でテンプレートをロードする必要がなくなります。そうしないと、テストディレクトリの階層がアプリケーションと異なる場合に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="93fe649037fb09c8d4e2db87fdce1cee0df7982c" translate="yes" xml:space="preserve">
          <source>If your expressions are constant literals, they're automatically trusted and you don't need to call &lt;code&gt;$sce.trustAs&lt;/code&gt; on them (e.g. &lt;code&gt;&amp;lt;div ng-bind-html=&quot;'&amp;lt;b&amp;gt;implicitly trusted&amp;lt;/b&amp;gt;'&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;) just works (remember to include the &lt;code&gt;ngSanitize&lt;/code&gt; module). The &lt;code&gt;$sceDelegate&lt;/code&gt; will also use the &lt;code&gt;$sanitize&lt;/code&gt; service if it is available when binding untrusted values to &lt;code&gt;$sce.HTML&lt;/code&gt; context. AngularJS provides an implementation in &lt;code&gt;angular-sanitize.js&lt;/code&gt;, and if you wish to use it, you will also need to depend on the &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module in your application.</source>
          <target state="translated">式が定数リテラルの場合、それらは自動的に信頼され、 &lt;code&gt;$sce.trustAs&lt;/code&gt; を呼び出す必要はありません（例： &lt;code&gt;&amp;lt;div ng-bind-html=&quot;'&amp;lt;b&amp;gt;implicitly trusted&amp;lt;/b&amp;gt;'&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; ）機能します（ &lt;code&gt;ngSanitize&lt;/code&gt; モジュールを含めることを忘れないでください）。 &lt;code&gt;$sceDelegate&lt;/code&gt; また、使用する &lt;code&gt;$sanitize&lt;/code&gt; に信頼されていない値をバインドするとき、それが利用可能な場合はサービスを &lt;code&gt;$sce.HTML&lt;/code&gt; コンテキスト。 AngularJSは &lt;code&gt;angular-sanitize.js&lt;/code&gt; の実装を提供します。これを使用したい場合は、アプリケーションの&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;モジュールに依存する必要もあります。</target>
        </trans-unit>
        <trans-unit id="ab4db8d966388aab90159f0307d07fcccc35f63f" translate="yes" xml:space="preserve">
          <source>Imagine you want to have a container with tabs in which the contents of the container correspond to which tab is active.</source>
          <target state="translated">コンテナの内容がアクティブなタブに対応しているタブ付きコンテナが欲しいと想像してみてください。</target>
        </trans-unit>
        <trans-unit id="6b84004070116f71855a9922d8e631eb72f699dc" translate="yes" xml:space="preserve">
          <source>Impact on loading templates</source>
          <target state="translated">テンプレートを読み込む際の影響</target>
        </trans-unit>
        <trans-unit id="20b1bba1cb06ab8386a24bd0d8dfecea07cd7671" translate="yes" xml:space="preserve">
          <source>Implementing custom form controls (using ngModel)</source>
          <target state="translated">カスタムフォームコントロールの実装 (ngModel を使用)</target>
        </trans-unit>
        <trans-unit id="bd06cedc31ae5b22c03264197e96ab3c19ffede6" translate="yes" xml:space="preserve">
          <source>Implicit Annotation</source>
          <target state="translated">暗黙のアノテーション</target>
        </trans-unit>
        <trans-unit id="096ba44a184249033cb9a0bb4ffebe2657bba416" translate="yes" xml:space="preserve">
          <source>Implicit module which gets automatically added to each &lt;a href=&quot;auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">各&lt;a href=&quot;auto/service/%24injector&quot;&gt;$ injectorに&lt;/a&gt;自動的に追加される暗黙のモジュール。</target>
        </trans-unit>
        <trans-unit id="4723ddf746f3809e3b1477e490d52c8337146616" translate="yes" xml:space="preserve">
          <source>Implicitly from the function parameter names (has caveats)</source>
          <target state="translated">関数のパラメータ名から暗黙のうちに (注意点あり)</target>
        </trans-unit>
        <trans-unit id="8eecc4f94a1b1fe69acddb79e183178a9e26df1a" translate="yes" xml:space="preserve">
          <source>Important things to notice:</source>
          <target state="translated">注意すべき重要なこと</target>
        </trans-unit>
        <trans-unit id="3f98eeaab6110938e71c2879641215dabb0c66ef" translate="yes" xml:space="preserve">
          <source>In AngularJS applications, you move the job of filling page templates with data from the server to the client. The result is a system better structured for dynamic page updates. Below are the core features you'll use.</source>
          <target state="translated">AngularJSアプリケーションでは、ページテンプレートをデータで埋める作業をサーバーからクライアントに移します。その結果、動的なページ更新のためのより良い構造化されたシステムになります。以下に使用するコア機能を紹介します。</target>
        </trans-unit>
        <trans-unit id="1c4f4ac01e027f6469e6478b81104e9792711986" translate="yes" xml:space="preserve">
          <source>In AngularJS forms, this is not necessary. The input's state will be updated based on the value of the underlying model data.</source>
          <target state="translated">AngularJSのフォームでは、これは必要ありません。入力の状態は、基礎となるモデルデータの値に基づいて更新されます。</target>
        </trans-unit>
        <trans-unit id="b597dc43f8f9e0a6d2155495f4e5474be04320ca" translate="yes" xml:space="preserve">
          <source>In AngularJS, a Component is a special kind of &lt;a href=&quot;directive&quot;&gt;directive&lt;/a&gt; that uses a simpler configuration which is suitable for a component-based application structure.</source>
          <target state="translated">AngularJSでは、コンポーネントは、コンポーネントベースのアプリケーション構造に適した、より単純な構成を使用する特別な種類の&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="cbbc814b28ce35865c1e769b822e5f29dc4de827" translate="yes" xml:space="preserve">
          <source>In AngularJS, a Controller is defined by a JavaScript &lt;strong&gt;constructor function&lt;/strong&gt; that is used to augment the &lt;a href=&quot;scope&quot;&gt;AngularJS Scope&lt;/a&gt;.</source>
          <target state="translated">AngularJSでは、コントローラーは、&lt;a href=&quot;scope&quot;&gt;AngularJS Scope&lt;/a&gt;を拡張するために使用されるJavaScript &lt;strong&gt;コンストラクター関数&lt;/strong&gt;によって定義されます。</target>
        </trans-unit>
        <trans-unit id="1a5efbd64f006dff6c25bf138c6b220b436c7355" translate="yes" xml:space="preserve">
          <source>In AngularJS, forms can be nested. This means that the outer form is valid when all of the child forms are valid as well. However, browsers do not allow nesting of &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements, so AngularJS provides the &lt;a href=&quot;ngform&quot;&gt;&lt;code&gt;ngForm&lt;/code&gt;&lt;/a&gt; directive, which behaves identically to &lt;code&gt;form&lt;/code&gt; but can be nested. Nested forms can be useful, for example, if the validity of a sub-group of controls needs to be determined.</source>
          <target state="translated">AngularJSでは、フォームをネストできます。これは、すべての子フォームも同様に有効な場合に、外部フォームも有効であることを意味します。ただし、ブラウザーは &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素のネストを許可しないため、AngularJSは&lt;a href=&quot;ngform&quot;&gt; &lt;code&gt;ngForm&lt;/code&gt; &lt;/a&gt;ディレクティブを提供します。これは &lt;code&gt;form&lt;/code&gt; と同じように動作しますが、ネストすることができます。入れ子になったフォームは、たとえば、コントロールのサブグループの有効性を判断する必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="03844de6e8b1d50475106d63d0d10f3d8c611949" translate="yes" xml:space="preserve">
          <source>In AngularJS, templates are written with HTML that contains AngularJS-specific elements and attributes. AngularJS combines the template with information from the model and controller to render the dynamic view that a user sees in the browser.</source>
          <target state="translated">AngularJSでは、テンプレートはAngularJS固有の要素や属性を含むHTMLで書かれています。AngularJSはテンプレートとモデルやコントローラからの情報を組み合わせて、ユーザーがブラウザで見るダイナミックなビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="a1f619517bf2bbf5ed7ed5d2dc4a8bbb5b243e43" translate="yes" xml:space="preserve">
          <source>In HTML Template Binding</source>
          <target state="translated">HTMLテンプレートのバインディングで</target>
        </trans-unit>
        <trans-unit id="2e80ed003402377171ce0924403b8c90164f9832" translate="yes" xml:space="preserve">
          <source>In HTML5 mode, the &lt;code&gt;$location&lt;/code&gt; service getters and setters interact with the browser URL address through the HTML5 history API. This allows for use of regular URL path and search segments, instead of their hashbang equivalents. If the HTML5 History API is not supported by a browser, the &lt;code&gt;$location&lt;/code&gt; service will fall back to using the hashbang URLs automatically. This frees you from having to worry about whether the browser displaying your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service transparently uses the best available option.</source>
          <target state="translated">HTML5モードでは、 &lt;code&gt;$location&lt;/code&gt; サービスのゲッターとセッターは、HTML5履歴APIを介してブラウザーのURLアドレスとやり取りします。これにより、対応するハッシュバングの代わりに、通常のURLパスと検索セグメントを使用できます。HTML5 History APIがブラウザーでサポートされていない場合、 &lt;code&gt;$location&lt;/code&gt; サービスはハッシュバングURLを自動的に使用するようにフォールバックします。これにより、アプリを表示するブラウザーが履歴APIをサポートしているかどうかを心配する必要がなくなります。 &lt;code&gt;$location&lt;/code&gt; サービスは、透過的に利用可能な最善のオプションを使用しています。</target>
        </trans-unit>
        <trans-unit id="c291168b9231a4e5740fc0f7c7f24071d1ef1309" translate="yes" xml:space="preserve">
          <source>In Jasmine we use the &lt;code&gt;describe&lt;/code&gt; function to group our tests together:</source>
          <target state="translated">Jasmineでは、 &lt;code&gt;describe&lt;/code&gt; 関数を使用してテストをグループ化します。</target>
        </trans-unit>
        <trans-unit id="a823b45ca87464c258e471b13899cdf061f7a1d1" translate="yes" xml:space="preserve">
          <source>In JavaScript</source>
          <target state="translated">JavaScriptでは</target>
        </trans-unit>
        <trans-unit id="bbd50f6eadbfc76eda0b9ce7716de2fb5a24fcf4" translate="yes" xml:space="preserve">
          <source>In JavaScript calling &lt;code&gt;toString()&lt;/code&gt; on a function returns the function definition. The definition can then be parsed and the function arguments can be extracted. This method of discovering annotations is disallowed when the injector is in strict mode. &lt;em&gt;NOTE:&lt;/em&gt; This does not work with minification, and obfuscation tools since these tools change the argument names.</source>
          <target state="translated">JavaScriptで関数に対して &lt;code&gt;toString()&lt;/code&gt; を呼び出すと、関数定義が返されます。その後、定義を解析し、関数の引数を抽出できます。注釈を検出するこの方法は、インジェクターがストリクトモードの場合は許可されません。&lt;em&gt;注：&lt;/em&gt;これらのツールは引数名を変更するため、これは縮小化ツールと難読化ツールでは機能しません。</target>
        </trans-unit>
        <trans-unit id="1b54f06dab3f6e1ac9b946e1f4b43d7b0403e35c" translate="yes" xml:space="preserve">
          <source>In a legacy browser, the URL changes to &lt;code&gt;/index.html#!/some?foo=bar&lt;/code&gt;</source>
          <target state="translated">従来のブラウザでは、URLは &lt;code&gt;/index.html#!/some?foo=bar&lt;/code&gt; に変更されます</target>
        </trans-unit>
        <trans-unit id="1c5b58dd4eafa0d4a18da8ca18883a8ad953b136" translate="yes" xml:space="preserve">
          <source>In a modern browser, the URL changes to &lt;code&gt;/some?foo=bar&lt;/code&gt;</source>
          <target state="translated">最新のブラウザーでは、URLは &lt;code&gt;/some?foo=bar&lt;/code&gt; に変更されます</target>
        </trans-unit>
        <trans-unit id="a3a7a9d6c6de28fb043fa931b25966d7356a56f7" translate="yes" xml:space="preserve">
          <source>In a more complex app, you can display multiple views within one main page using &quot;partials&quot; &amp;ndash; segments of template located in separate HTML files. You can use the &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt; directive to load partials based on configuration passed to the &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service. The &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;AngularJS tutorial&lt;/a&gt; shows this technique in steps seven and eight.</source>
          <target state="translated">より複雑なアプリでは、「パーシャル」（個別のHTMLファイルにあるテンプレートのセグメント）を使用して、1つのメインページ内に複数のビューを表示できます。&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;ディレクティブを使用して、&lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt;サービスに渡された設定に基づいてパーシャルをロードできます。&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;チュートリアルAngularJS&lt;/a&gt;手順7と8でのショーにこの技術を。</target>
        </trans-unit>
        <trans-unit id="9f1cddade303a6c5111dc5a24b1534a289b20314" translate="yes" xml:space="preserve">
          <source>In a more complex app, you can display multiple views within one main page using &quot;partials&quot; &amp;ndash; segments of template located in separate HTML files. You can use the &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt; directive to load partials based on configuration passed to the &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service. The &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;AngularJS tutorial&lt;/a&gt; shows this technique in steps seven and eight.</source>
          <target state="translated">より複雑なアプリでは、「部分」（個別のHTMLファイルにあるテンプレートのセグメント）を使用して、1つのメインページ内に複数のビューを表示できます。&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;ディレクティブを使用して、&lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt;サービスに渡された構成に基づいてパーシャルをロードできます。&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;チュートリアルAngularJS&lt;/a&gt;手順7と8でのショーにこの技術を。</target>
        </trans-unit>
        <trans-unit id="0c0c40a1378e0d2f42f6d4f7be33566e03db6b53" translate="yes" xml:space="preserve">
          <source>In a simple app, the template consists of HTML, CSS, and AngularJS directives contained in just one HTML file (usually &lt;code&gt;index.html&lt;/code&gt;).</source>
          <target state="translated">単純なアプリでは、テンプレートはHTML、CSS、およびAngularJSディレクティブで構成され、1つのHTMLファイル（通常は &lt;code&gt;index.html&lt;/code&gt; ）に含まれています。</target>
        </trans-unit>
        <trans-unit id="e674faa938f37f1939ece405364297bb3d2958a2" translate="yes" xml:space="preserve">
          <source>In a single module the order of execution is as follows:</source>
          <target state="translated">単一のモジュールでは、実行順序は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="749307d1cbfaf16fe4aabba520b82ae1902a1b6a" translate="yes" xml:space="preserve">
          <source>In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation with CSS styles.</source>
          <target state="translated">CSS クラスの追加と削除に加えて、ngAnimate には、CSS スタイルでアニメーションをさらに装飾するために使用できる 2 つのヘルパーメソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="6321ce8bd6ac1756913a159906eecc022bf64796" translate="yes" xml:space="preserve">
          <source>In addition to all the regular &lt;code&gt;Scope&lt;/code&gt; methods, the following helper methods are available:</source>
          <target state="translated">すべての通常の &lt;code&gt;Scope&lt;/code&gt; メソッドに加えて、次のヘルパーメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="b766677551b49d250621b2a334d198d39eec2e53" translate="yes" xml:space="preserve">
          <source>In addition to prioritization, ngMessages also allows for including messages from a remote or an inline template. This allows for generic collection of messages to be reused across multiple parts of an application.</source>
          <target state="translated">優先順位付けに加えて、 ngMessages では、リモートまたはインラインのテンプレートからのメッセージを含めることもできます。これにより、一般的なメッセージのコレクションをアプリケーションの複数の部分で再利用することができます。</target>
        </trans-unit>
        <trans-unit id="716143d7f33a871721bcf40bfd2db07a6cdb72d7" translate="yes" xml:space="preserve">
          <source>In addition to the above elements, tests may also contain helper functions to avoid duplicating code in the &lt;code&gt;it&lt;/code&gt; blocks.</source>
          <target state="translated">上記の要素に加えて、テストには、 &lt;code&gt;it&lt;/code&gt; ブロック内のコードの重複を避けるためのヘルパー関数も含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="470ea7a4e5c2fe6de7091aa6f7ec21ee51897509" translate="yes" xml:space="preserve">
          <source>In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering an event listener using the &lt;code&gt;$animate&lt;/code&gt; service. Let's say for example that an animation was triggered on our view routing controller to hook into that:</source>
          <target state="translated">アニメーションプロミスに加えて、 &lt;code&gt;$animate&lt;/code&gt; サービスを使用してイベントリスナーを登録することにより、ディレクティブとコントローラーコード内でアニメーション関連のコールバックを利用することもできます。たとえば、ビュールーティングコントローラーでアニメーションがトリガーされ、それにフックしたとします。</target>
        </trans-unit>
        <trans-unit id="1699cbe96c0e4716d740c691996232ad4e5fe565" translate="yes" xml:space="preserve">
          <source>In addition, the browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy may further restrict whether the template is successfully loaded. For example, &lt;code&gt;ngInclude&lt;/code&gt; won't work for cross-domain requests on all browsers and for &lt;code&gt;file://&lt;/code&gt; access on some browsers.</source>
          <target state="translated">さらに、ブラウザの&lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;同一生成元ポリシー&lt;/a&gt;と&lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;クロスオリジンリソースシェアリング（CORS）&lt;/a&gt;ポリシーにより、テンプレートが正常に読み込まれるかどうかがさらに制限される場合があります。たとえば、 &lt;code&gt;ngInclude&lt;/code&gt; は、すべてのブラウザーのクロスドメインリクエストや一部のブラウザーの &lt;code&gt;file://&lt;/code&gt; アクセスでは機能しません。</target>
        </trans-unit>
        <trans-unit id="7f1875411be4e88ea3dbfceb834e9ffd360b6eb7" translate="yes" xml:space="preserve">
          <source>In addition, the browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy may further restrict whether the template is successfully loaded. For example, &lt;code&gt;ngInclude&lt;/code&gt; won't work for cross-domain requests on all browsers and for &lt;code&gt;file://&lt;/code&gt; access on some browsers.</source>
          <target state="translated">さらに、ブラウザの&lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;同一生成元ポリシー&lt;/a&gt;と&lt;a href=&quot;https://www.w3.org/TR/cors/&quot;&gt;クロスオリジンリソースシェアリング（CORS）&lt;/a&gt;ポリシーにより、テンプレートが正常に読み込まれるかどうかがさらに制限される場合があります。たとえば、 &lt;code&gt;ngInclude&lt;/code&gt; は、すべてのブラウザでのクロスドメインリクエスト、および一部のブラウザでの &lt;code&gt;file://&lt;/code&gt; アクセスに対しては機能しません。</target>
        </trans-unit>
        <trans-unit id="a57b0290a74b9eb78ccc15559fe648219b660cfc" translate="yes" xml:space="preserve">
          <source>In addition, you can supply a &lt;code&gt;headers&lt;/code&gt; property in the config object passed when calling &lt;code&gt;$http(config)&lt;/code&gt;, which overrides the defaults without changing them globally.</source>
          <target state="translated">さらに、 &lt;code&gt;$http(config)&lt;/code&gt; 呼び出すときに渡されるconfigオブジェクトで &lt;code&gt;headers&lt;/code&gt; プロパティを指定すると、グローバルに変更せずにデフォルトをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="589af7f1aae2e3ad6aab5df9c86b6c8e31638595" translate="yes" xml:space="preserve">
          <source>In all of these examples we are going to assume this module definition:</source>
          <target state="translated">これらの例では、すべてこのモジュール定義を前提としています。</target>
        </trans-unit>
        <trans-unit id="2ba4bd29bc7d7975c3e58c60de7ab29abd9339c6" translate="yes" xml:space="preserve">
          <source>In an effort to keep synchronized with router changes in the new Angular, this implementation of the Component Router (ngComponentRouter module) has been deprecated and will not receive further updates. We are investigating backporting the Router for the new Angular to AngularJS, but alternatively, use the &lt;a href=&quot;../../ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module or community developed projects (e.g. &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;).</source>
          <target state="translated">新しいAngularでのルーターの変更との同期を維持するため、コンポーネントルーター（ngComponentRouterモジュール）のこの実装は非推奨になり、それ以上の更新を受信しません。新しいAngularからAngularJSへのルーターのバックポートを調査していますが、&lt;a href=&quot;../../ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt;モジュールまたはコミュニティが開発したプロジェクト（たとえば&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;）を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="667b1ad2855f853d06e0711549d307d56aa4fdca" translate="yes" xml:space="preserve">
          <source>In an effort to keep synchronized with router changes in the new Angular, this implementation of the Component Router (ngComponentRouter module) has been deprecated and will not receive further updates. We are investigating backporting the Router for the new Angular to AngularJS, but alternatively, use the &lt;a href=&quot;ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module or community developed projects (e.g. &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;).</source>
          <target state="translated">新しいAngularでのルーターの変更との同期を維持するため、コンポーネントルーター（ngComponentRouterモジュール）のこの実装は非推奨になり、それ以上の更新を受信しません。新しいAngularからAngularJSへのルーターのバックポートを調査していますが、&lt;a href=&quot;ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt;モジュールまたはコミュニティが開発したプロジェクト（たとえば&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;）を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9386991172b647254fafb7d351016e610e121394" translate="yes" xml:space="preserve">
          <source>In any case, the value passed to the method should always reflect the current value of the control. For example, if you are calling &lt;code&gt;$setViewValue&lt;/code&gt; for an input element, you should pass the input DOM value. Otherwise, the control and the scope model become out of sync. It's also important to note that &lt;code&gt;$setViewValue&lt;/code&gt; does not call &lt;code&gt;$render&lt;/code&gt; or change the control's DOM value in any way. If we want to change the control's DOM value programmatically, we should update the &lt;code&gt;ngModel&lt;/code&gt; scope expression. Its new value will be picked up by the model controller, which will run it through the &lt;code&gt;$formatters&lt;/code&gt;, &lt;code&gt;$render&lt;/code&gt; it to update the DOM, and finally call &lt;code&gt;$validate&lt;/code&gt; on it.</source>
          <target state="translated">いずれの場合も、メソッドに渡される値は常にコントロールの現在の値を反映する必要があります。たとえば、入力要素に対して &lt;code&gt;$setViewValue&lt;/code&gt; を呼び出す場合は、入力DOM値を渡す必要があります。そうしないと、コントロールとスコープモデルが同期しなくなります。 &lt;code&gt;$setViewValue&lt;/code&gt; が &lt;code&gt;$render&lt;/code&gt; 呼び出したり、コントロールのDOM値を変更したりしないことに注意することも重要です。コントロールのDOM値をプログラムで変更する場合は、 &lt;code&gt;ngModel&lt;/code&gt; スコープ式を更新する必要があります。その新しい値はモデルコントローラーによって取得され、 &lt;code&gt;$formatters&lt;/code&gt; を介して実行され、 &lt;code&gt;$render&lt;/code&gt; を実行してDOMを更新し、最後に &lt;code&gt;$validate&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="68fe7d927164f0e298a884af50c62aebe47691da" translate="yes" xml:space="preserve">
          <source>In both examples, the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is applied successfully to each &lt;code&gt;item&lt;/code&gt; in the &lt;code&gt;items&lt;/code&gt; array. Because the selected option has been set programmatically in the controller, the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is also applied to the &lt;code&gt;ngModel&lt;/code&gt; value. In the first example, the &lt;code&gt;ngModel&lt;/code&gt; value is &lt;code&gt;items[0]&lt;/code&gt; and the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression evaluates to &lt;code&gt;items[0].id&lt;/code&gt; with no issue. In the second example, the &lt;code&gt;ngModel&lt;/code&gt; value is &lt;code&gt;items[0].subItem&lt;/code&gt; and the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression evaluates to &lt;code&gt;items[0].subItem.id&lt;/code&gt; (which is undefined). As a result, the model value is not matched against any &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; appears as having no selected value.</source>
          <target state="translated">どちらの例でも&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;式&lt;strong&gt;による追跡&lt;/strong&gt;は、 &lt;code&gt;items&lt;/code&gt; 配列の各 &lt;code&gt;item&lt;/code&gt; に正常に適用されます。選択したオプションはコントローラーでプログラムで設定されているため、式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;も &lt;code&gt;ngModel&lt;/code&gt; 値に適用されます。最初の例では、 &lt;code&gt;ngModel&lt;/code&gt; 値は &lt;code&gt;items[0]&lt;/code&gt; あり、式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;は問題なく &lt;code&gt;items[0].id&lt;/code&gt; 評価されます。 2番目の例では、 &lt;code&gt;ngModel&lt;/code&gt; 値は &lt;code&gt;items[0].subItem&lt;/code&gt; あり、式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;はitems [0] .subItem.idに評価され &lt;code&gt;items[0].subItem.id&lt;/code&gt; &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;（これは未定義です）。その結果、モデル値はどの &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; とも照合されず、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; は選択された値がないように見えます。</target>
        </trans-unit>
        <trans-unit id="5db12307c0b10381c7de9de7d244ed95abd76ff2" translate="yes" xml:space="preserve">
          <source>In browsers that follow the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29&quot;&gt;HTML5 specification&lt;/a&gt;, &lt;code&gt;input[number]&lt;/code&gt; does not work as expected with &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt;&lt;/a&gt;. If a non-number is entered in the input, the browser will report the value as an empty string, which means the view / model values in &lt;code&gt;ngModel&lt;/code&gt; and subsequently the scope value will also be an empty string.</source>
          <target state="translated">&lt;a href=&quot;https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29&quot;&gt;HTML5仕様に準拠している&lt;/a&gt;ブラウザーでは、 &lt;code&gt;input[number]&lt;/code&gt; は&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt; で&lt;/a&gt;期待どおりに機能しません。入力に数値以外が入力された場合、ブラウザは値を空の文字列として報告します。これは、 &lt;code&gt;ngModel&lt;/code&gt; のビュー/モデル値を意味し、その後、スコープ値も空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="e3e1a3ce31bec47d5200ef4cf60ace5abb3ccfe7" translate="yes" xml:space="preserve">
          <source>In case of parameter name collision, &lt;code&gt;path&lt;/code&gt; params take precedence over &lt;code&gt;search&lt;/code&gt; params.</source>
          <target state="translated">パラメータ名の衝突が発生した場合、 &lt;code&gt;path&lt;/code&gt; パラメータは &lt;code&gt;search&lt;/code&gt; パラメータよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="c26867c8ed3c13342fd31b32bf994a5c01045f08" translate="yes" xml:space="preserve">
          <source>In case the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive is used with &lt;code&gt;updateOn&lt;/code&gt; and the &lt;code&gt;default&lt;/code&gt; trigger is not listed, all those actions will remain pending until one of the &lt;code&gt;updateOn&lt;/code&gt; events is triggered on the DOM element. All these actions will be debounced if the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive is used with a custom debounce for this particular event. Note that a &lt;code&gt;$digest&lt;/code&gt; is only triggered once the &lt;code&gt;updateOn&lt;/code&gt; events are fired, or if &lt;code&gt;debounce&lt;/code&gt; is specified, once the timer runs out.</source>
          <target state="translated">場合&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;ディレクティブが一緒に使用され &lt;code&gt;updateOn&lt;/code&gt; と &lt;code&gt;default&lt;/code&gt; トリガーがリストされていないの1まで、すべてのこれらのアクションは、保留中のままになります &lt;code&gt;updateOn&lt;/code&gt; のイベントはDOM要素にトリガされます。&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;ディレクティブがこの特定のイベントのカスタムデバウンスと共に使用される場合、これらすべてのアクションはデバウンスされます。ことを注意 &lt;code&gt;$digest&lt;/code&gt; 一度のみトリガされ &lt;code&gt;updateOn&lt;/code&gt; のイベントが発生している場合、または &lt;code&gt;debounce&lt;/code&gt; タイマーが切れると、指定されています。</target>
        </trans-unit>
        <trans-unit id="dbb2128824b196014baa5c500781714a968857a4" translate="yes" xml:space="preserve">
          <source>In cases like the following, links are not rewritten; instead, the browser will perform a full page reload to the original link.</source>
          <target state="translated">以下のような場合、リンクは書き換えられず、代わりにブラウザは元のリンクへの全ページリロードを行います。</target>
        </trans-unit>
        <trans-unit id="eb1595edfe03ceecabe189afd4c1478336da4f55" translate="yes" xml:space="preserve">
          <source>In cases where both backend definitions and request expectations are specified during unit testing, the request expectations are evaluated first.</source>
          <target state="translated">単体テストでバックエンド定義とリクエスト期待値の両方が指定されている場合は、リクエスト期待値が先に評価されます。</target>
        </trans-unit>
        <trans-unit id="bf55b6216c29164cc9616d092551ba62d75a0676" translate="yes" xml:space="preserve">
          <source>In complex applications it's possible that dependencies between &lt;code&gt;$onChanges&lt;/code&gt; hooks and bindings will result in several iterations of calls to these hooks. However if an application needs more than the default 10 iterations to stabilize then you should investigate what is causing the model to continuously change during the &lt;code&gt;$onChanges&lt;/code&gt; hook execution.</source>
          <target state="translated">複雑なアプリケーションでは、 &lt;code&gt;$onChanges&lt;/code&gt; フックとバインディング間の依存関係により、これらのフックの呼び出しが数回繰り返される可能性があります。ただし、アプリケーションが安定化するためにデフォルトの10回を超える反復が必要な場合は、 &lt;code&gt;$onChanges&lt;/code&gt; フックの実行中にモデルが継続的に変化する原因を調査する必要があります。</target>
        </trans-unit>
        <trans-unit id="572607a7218cef33ac940e82902038d02ae937e5" translate="yes" xml:space="preserve">
          <source>In complex applications it's possible that the dependencies between &lt;code&gt;$watch&lt;/code&gt;s will result in several digest iterations. However if an application needs more than the default 10 digest iterations for its model to stabilize then you should investigate what is causing the model to continuously change during the digest.</source>
          <target state="translated">複雑なアプリケーションでは、 &lt;code&gt;$watch&lt;/code&gt; 間の依存関係により、複数のダイジェストが繰り返される可能性があります。ただし、モデルの安定化のためにアプリケーションがデフォルトの10を超えるダイジェスト反復を必要とする場合は、ダイジェスト中にモデルが継続的に変化する原因を調査する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6327a6402c02d7879a52df32482acae297464b3" translate="yes" xml:space="preserve">
          <source>In general it's possible to apply more than one directive to one element, but there might be limitations depending on the type of scope required by the directives. The following points will help explain these limitations. For simplicity only two directives are taken into account, but it is also applicable for several directives:</source>
          <target state="translated">一般的には1つの要素に複数のディレクティブを適用することは可能ですが、ディレクティブが要求するスコープの種類によっては制限がある場合があります。以下のポイントで、これらの制限について説明します。単純化のために2つのディレクティブのみを考慮に入れていますが、複数のディレクティブに適用することも可能です。</target>
        </trans-unit>
        <trans-unit id="d65eb267b1b0354141999d7194c0a15d48c760f2" translate="yes" xml:space="preserve">
          <source>In general, a Controller shouldn't try to do too much. It should contain only the business logic needed for a single view.</source>
          <target state="translated">一般的に、コントローラはあまり多くのことをしようとするべきではありません。1つのビューに必要なビジネスロジックのみを含むべきです。</target>
        </trans-unit>
        <trans-unit id="12b68495b61d68a58ae4306b8d4fa6a9c7a5a8c9" translate="yes" xml:space="preserve">
          <source>In general, the match between the model and an option is evaluated by strictly comparing the model value against the value of the available options.</source>
          <target state="translated">一般的に、モデルとオプションの一致は、モデルの値と利用可能なオプションの値を厳密に比較することで評価されます。</target>
        </trans-unit>
        <trans-unit id="c9ab8714b380fd88731ce6a010864a6dad2a5821" translate="yes" xml:space="preserve">
          <source>In general, this applies only to filters that take &lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; as inputs. Filters that receive &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects&quot;&gt;Objects&lt;/a&gt; as input are executed on each &lt;code&gt;$digest&lt;/code&gt;, as it would be too costly to track if the inputs have changed.</source>
          <target state="translated">一般に、これは&lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;を入力として受け取るフィルターにのみ適用されます。入力として&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects&quot;&gt;オブジェクト&lt;/a&gt;を受け取るフィルターは、各 &lt;code&gt;$digest&lt;/code&gt; で実行されます。これは、入力が変更されたかどうかを追跡するにはコストがかかりすぎるためです。</target>
        </trans-unit>
        <trans-unit id="223c150544e590c3b09b2f83432104d5c677b5fc" translate="yes" xml:space="preserve">
          <source>In its current implementation, we'd need to create a different controller each time in order to re-use such a directive:</source>
          <target state="translated">現在の実装では、このようなディレクティブを再利用するために、毎回別のコントローラを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="aaf87ac010abced2fa8d3d211eaa4cf5c460607b" translate="yes" xml:space="preserve">
          <source>In its default setup, ngAria for &lt;code&gt;ngShow&lt;/code&gt; is actually redundant. It toggles &lt;code&gt;aria-hidden&lt;/code&gt; on the directive when it is hidden or shown. However, the default CSS of &lt;code&gt;display: none !important&lt;/code&gt;, already hides child elements from a screen reader. It becomes more useful when the default CSS is overridden with properties that don&amp;rsquo;t affect assistive technologies, such as &lt;code&gt;opacity&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt;. By toggling &lt;code&gt;aria-hidden&lt;/code&gt; dynamically with ngAria, we can ensure content visually hidden with this technique will not be read aloud in a screen reader.</source>
          <target state="translated">デフォルトの設定では、ngShowの &lt;code&gt;ngShow&lt;/code&gt; は実際には冗長です。ディレクティブが非表示または表示されている場合、ディレクティブで &lt;code&gt;aria-hidden&lt;/code&gt; を切り替えます。ただし、 &lt;code&gt;display: none !important&lt;/code&gt; のデフォルトCSS ：none！importantは、子要素をスクリーンリーダーから既に非表示にしています。デフォルトのCSSが、 &lt;code&gt;opacity&lt;/code&gt; や &lt;code&gt;transform&lt;/code&gt; などの支援技術に影響を及ぼさないプロパティでオーバーライドされていると、より便利になります。トグルすることによって &lt;code&gt;aria-hidden&lt;/code&gt; この技術は、スクリーンリーダーで読み上げられないだろうとngAriaで動的に、我々は視覚的に隠された内容を保証することができます。</target>
        </trans-unit>
        <trans-unit id="9ac48986b940877fd638b3f87daf87350f3cd59a" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; can be used on &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements instead of &lt;code&gt;ngOptions&lt;/code&gt; to achieve a similar result. However, &lt;code&gt;ngOptions&lt;/code&gt; provides some benefits:</source>
          <target state="translated">多くの場合、&lt;a href=&quot;ngrepeat&quot;&gt;ngOptionsの&lt;/a&gt;代わりに &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;ngOptions&lt;/code&gt; を使用して、同様の結果を得ることができます。ただし、 &lt;code&gt;ngOptions&lt;/code&gt; にはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="816f5a467069e8684ca6c8eac56b04421f4f9aac" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;code&gt;ngRepeat&lt;/code&gt; can be used on &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements instead of &lt;a href=&quot;ngoptions&quot;&gt;ngOptions&lt;/a&gt; to achieve a similar result. However, &lt;code&gt;ngOptions&lt;/code&gt; provides some benefits:</source>
          <target state="translated">多くの場合、 &lt;code&gt;ngRepeat&lt;/code&gt; 代わりに &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素で&lt;a href=&quot;ngoptions&quot;&gt;ngRepeat&lt;/a&gt;を使用して、同様の結果を得ることができます。ただし、 &lt;code&gt;ngOptions&lt;/code&gt; にはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="23a74c3d278c8929951ba5893b635995005f8e65" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; and scopes interact but do not create new instances of scope. However, some directives, such as &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ng-repeat&lt;/a&gt;, create new child scopes and attach the child scope to the corresponding DOM element.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;とスコープは相互作用しますが、スコープの新しいインスタンスを作成しません。ただし、&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;や&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ng-repeat&lt;/a&gt;などの一部のディレクティブは、新しい子スコープを作成し、対応するDOM要素に子スコープをアタッチします。</target>
        </trans-unit>
        <trans-unit id="a6d61eeade717370e6792f08603d2f769bf7909b" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;yOffset&lt;/code&gt; to work properly, scrolling should take place on the document's root and not some child element.</source>
          <target state="translated">&lt;code&gt;yOffset&lt;/code&gt; が正しく機能するためには、スクロールは、子要素ではなくドキュメントのルートで行われる必要があります。</target>
        </trans-unit>
        <trans-unit id="43159b000f095713d7995347d0aa0418f3baf129" translate="yes" xml:space="preserve">
          <source>In order for custom control to work with &lt;code&gt;ngModel&lt;/code&gt; and to achieve two-way data-binding it needs to:</source>
          <target state="translated">カスタムコントロールが &lt;code&gt;ngModel&lt;/code&gt; と連携して双方向のデータバインディングを実現するためには、次のことが必要です。</target>
        </trans-unit>
        <trans-unit id="93e76425878be6a245b2b5122baa300334e1d96a" translate="yes" xml:space="preserve">
          <source>In order for the injector to know how to create and wire together all of these objects, it needs a registry of &quot;recipes&quot;. Each recipe has an identifier of the object and the description of how to create this object.</source>
          <target state="translated">インジェクターがこれらのオブジェクトを作成して配線する方法を知るためには、&quot;レシピ &quot;のレジストリが必要です。各レシピにはオブジェクトの識別子と、このオブジェクトの作成方法の説明があります。</target>
        </trans-unit>
        <trans-unit id="41ca1c0cfc3250833efe87b946e6688542d335f0" translate="yes" xml:space="preserve">
          <source>In order to answer such a question it is very important that we can isolate the unit of code under test. That is because when we are testing the sort function we don't want to be forced into creating related pieces such as the DOM elements, or making any XHR calls to fetch the data to sort.</source>
          <target state="translated">このような質問に答えるためには、テスト中のコードの単位を分離することが非常に重要です。ソート関数をテストしているときに、DOM 要素のような関連部分を作成したり、ソートするデータを取得するために XHR 呼び出しをしたりすることを余儀なくされたくないからです。</target>
        </trans-unit>
        <trans-unit id="83939e2bc9f9e5b599175fbfb5fec4456c3a2747" translate="yes" xml:space="preserve">
          <source>In order to enable animations the &lt;code&gt;ngAnimate&lt;/code&gt; module has to be loaded.</source>
          <target state="translated">アニメーションを有効にするには、 &lt;code&gt;ngAnimate&lt;/code&gt; モジュールをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="d6563365aaa2bf57b65af1a6e2ab56f748edc001" translate="yes" xml:space="preserve">
          <source>In order to ensure that the sorting will be deterministic across platforms, if none of the specified predicates can distinguish between two items, &lt;code&gt;orderBy&lt;/code&gt; will automatically introduce a dummy predicate that returns the item's index as &lt;code&gt;value&lt;/code&gt;. (If you are using a custom comparator, make sure it can handle this predicate as well.)</source>
          <target state="translated">ソートがプラットフォーム間で確実に行われるようにするために、指定された述語のいずれも2つのアイテムを区別できない場合、 &lt;code&gt;orderBy&lt;/code&gt; は、アイテムのインデックスを &lt;code&gt;value&lt;/code&gt; として返すダミーの述語を自動的に導入します。（カスタムコンパレーターを使用している場合は、それがこの述語も処理できることを確認してください。）</target>
        </trans-unit>
        <trans-unit id="ba07d896b98bd38aa92e1a51979d43b5762c90ac" translate="yes" xml:space="preserve">
          <source>In order to make the definition easier, components enforce best practices like use of &lt;code&gt;controllerAs&lt;/code&gt;, &lt;code&gt;bindToController&lt;/code&gt;. They always have &lt;strong&gt;isolate scope&lt;/strong&gt; and are restricted to elements.</source>
          <target state="translated">定義を簡単にするために、コンポーネントは &lt;code&gt;controllerAs&lt;/code&gt; 、 &lt;code&gt;bindToController&lt;/code&gt; の使用などのベストプラクティスを適用します。それらは常に&lt;strong&gt;分離スコープ&lt;/strong&gt;を持ち、要素に制限されています。</target>
        </trans-unit>
        <trans-unit id="92f3760b5ddb703592c1c344abf1808f65b67a46" translate="yes" xml:space="preserve">
          <source>In order to prevent collisions in environments where multiple AngularJS apps share the same domain or subdomain, we recommend that each application uses a unique cookie name.</source>
          <target state="translated">複数のAngularJSアプリが同じドメインやサブドメインを共有している環境での衝突を防ぐために、それぞれのアプリで固有のクッキー名を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="c431fcb3d2dd29f9f6877e5863d11e1c5282ac1f" translate="yes" xml:space="preserve">
          <source>In order to react to events or execute computation in the view we must provide behavior to the scope. We add behavior to the scope by attaching methods to the &lt;code&gt;$scope&lt;/code&gt; object. These methods are then available to be called from the template/view.</source>
          <target state="translated">イベントに反応したり、ビューで計算を実行したりするには、スコープに動作を提供する必要があります。 &lt;code&gt;$scope&lt;/code&gt; オブジェクトにメソッドをアタッチすることにより、スコープに動作を追加します。これらのメソッドは、テンプレート/ビューから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="64d69397877d61d2ffddceb4be6f794cc00dd86f" translate="yes" xml:space="preserve">
          <source>In order to show error messages corresponding to &lt;code&gt;myField&lt;/code&gt; we first create an element with an &lt;code&gt;ngMessages&lt;/code&gt; attribute set to the &lt;code&gt;$error&lt;/code&gt; object owned by the &lt;code&gt;myField&lt;/code&gt; input in our &lt;code&gt;myForm&lt;/code&gt; form.</source>
          <target state="translated">&lt;code&gt;myField&lt;/code&gt; に対応するエラーメッセージを表示するために、最初に &lt;code&gt;ngMessages&lt;/code&gt; 属性を &lt;code&gt;myForm&lt;/code&gt; フォームの &lt;code&gt;myField&lt;/code&gt; 入力が所有する &lt;code&gt;$error&lt;/code&gt; オブジェクトに設定した要素を作成します。</target>
        </trans-unit>
        <trans-unit id="38ca262d53b30c1c185b66f2480b52ad395cd555" translate="yes" xml:space="preserve">
          <source>In order to:</source>
          <target state="translated">そのためには</target>
        </trans-unit>
        <trans-unit id="cee56acce42439af4e48556eac71fd143eec3563" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;link&lt;/code&gt; function, we want to update the displayed time once a second, or whenever a user changes the time formatting string that our directive binds to. We will use the &lt;code&gt;$interval&lt;/code&gt; service to call a handler on a regular basis. This is easier than using &lt;code&gt;$timeout&lt;/code&gt; but also works better with end-to-end testing, where we want to ensure that all &lt;code&gt;$timeout&lt;/code&gt;s have completed before completing the test. We also want to remove the &lt;code&gt;$interval&lt;/code&gt; if the directive is deleted so we don't introduce a memory leak.</source>
          <target state="translated">当社では &lt;code&gt;link&lt;/code&gt; 機能、我々は、第二一度表示された時間を更新する、またはユーザーは、当社の指示が結合することを、文字列の書式を設定時間を変更するたびに。 &lt;code&gt;$interval&lt;/code&gt; サービスを使用して、定期的にハンドラーを呼び出します。これは &lt;code&gt;$timeout&lt;/code&gt; を使用するよりも簡単ですが、エンドツーエンドのテストでもうまく機能します。テストを完了する前にすべての &lt;code&gt;$timeout&lt;/code&gt; が完了していることを確認する必要があります。また、ディレクティブが削除された場合は &lt;code&gt;$interval&lt;/code&gt; を削除して、メモリリークが発生しないようにします。</target>
        </trans-unit>
        <trans-unit id="1b484d590e22004602005d9748c97e5a23a50efa" translate="yes" xml:space="preserve">
          <source>In plain HTML forms, the &lt;code&gt;name&lt;/code&gt; attribute is used to identify groups of radio inputs, so that the browser can manage their state (checked/unchecked) based on the state of other inputs in the same group.</source>
          <target state="translated">プレーンHTMLフォームでは、 &lt;code&gt;name&lt;/code&gt; 属性を使用して無線入力のグループを識別し、ブラウザーが同じグループ内の他の入力の状​​態に基づいてそれらの状態（チェック済み/チェックなし）を管理できるようにします。</target>
        </trans-unit>
        <trans-unit id="46cfb3934a0deeee576ac8393203dd312b39eb1f" translate="yes" xml:space="preserve">
          <source>In practice</source>
          <target state="translated">実際には</target>
        </trans-unit>
        <trans-unit id="23f474e3365b6841390e2d04f8b7b183101fc5b0" translate="yes" xml:space="preserve">
          <source>In practice, flickering can appear when nesting elements with structural animations such as &lt;code&gt;ngIf&lt;/code&gt; into elements that have class-based animations such as &lt;code&gt;ngClass&lt;/code&gt;.</source>
          <target state="translated">実際には、 &lt;code&gt;ngIf&lt;/code&gt; などの構造アニメーションを持つ要素を、 &lt;code&gt;ngClass&lt;/code&gt; などのクラスベースのアニメーションを持つ要素にネストすると、ちらつきが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b6b3f1479d15949f893579bddd17a5c4695b028" translate="yes" xml:space="preserve">
          <source>In privileged contexts, directives and code will bind to the result of &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(context, value)&lt;/a&gt; rather than to the value directly. Think of this function as a way to enforce the required security context in your data sink. Directives use &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;$sce.parseAs&lt;/a&gt; rather than &lt;code&gt;$parse&lt;/code&gt; to watch attribute bindings, which performs the &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted&lt;/a&gt; behind the scenes on non-constant literals. Also, when binding without directives, AngularJS will understand the context of your bindings automatically.</source>
          <target state="translated">特権コンテキストでは、ディレクティブとコードは、値に直接バインドするのではなく&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;、$ sce.getTrusted（context、value）&lt;/a&gt;の結果にバインドします。この関数は、データシンクに必要なセキュリティコンテキストを適用する方法と考えてください。ディレクティブは、 &lt;code&gt;$parse&lt;/code&gt; ではなく&lt;a href=&quot;%24sce#parseAs.html&quot;&gt;$ sce.parseAsを&lt;/a&gt;使用して属性バインディングを監視します。これにより、非定数リテラルで舞台裏で&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$ sce.getTrusted&lt;/a&gt;が実行されます。また、ディレクティブなしでバインドすると、AngularJSはバインドのコンテキストを自動的に理解します。</target>
        </trans-unit>
        <trans-unit id="ad0a78c7ea83ece459db4a6b9e0ec41e1d081220" translate="yes" xml:space="preserve">
          <source>In some cases you can also rely upon automatic sanitization of untrusted values - see below.</source>
          <target state="translated">場合によっては、信頼されていない値の自動サニタイズに頼ることもできます。</target>
        </trans-unit>
        <trans-unit id="ced5561a26558d4d24bd44d63f6ee1bbb96f6f9e" translate="yes" xml:space="preserve">
          <source>In templates, filters are only executed when their inputs have changed. This is more performant than executing a filter on each &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;&lt;code&gt;$digest&lt;/code&gt;&lt;/a&gt; as is the case with &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt;.</source>
          <target state="translated">テンプレートでは、入力が変更されたときにのみフィルターが実行されます。これは、&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;の場合のように、各&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;/a&gt;フィルターを実行するよりもパフォーマンスが高くなります。</target>
        </trans-unit>
        <trans-unit id="b3df173ca7c9246d6aeebf7b82e7ed92a41a33d7" translate="yes" xml:space="preserve">
          <source>In tests you can use &lt;a href=&quot;../../ngmock/service/%24interval#flush.html&quot;&gt;&lt;code&gt;$interval.flush(millis)&lt;/code&gt;&lt;/a&gt; to move forward by &lt;code&gt;millis&lt;/code&gt; milliseconds and trigger any functions scheduled to run in that time.</source>
          <target state="translated">テストでは、&lt;a href=&quot;../../ngmock/service/%24interval#flush.html&quot;&gt; &lt;code&gt;$interval.flush(millis)&lt;/code&gt; &lt;/a&gt;を使用してミリ秒ミリ秒だけ先に &lt;code&gt;millis&lt;/code&gt; 、その時間に実行するようにスケジュールされた関数をトリガーできます。</target>
        </trans-unit>
        <trans-unit id="e6d6b4db41ec26c414ad5cfb1ba6c62e946416d6" translate="yes" xml:space="preserve">
          <source>In tests you can use &lt;a href=&quot;../../ngmock/service/%24timeout&quot;&gt;&lt;code&gt;$timeout.flush()&lt;/code&gt;&lt;/a&gt; to synchronously flush the queue of deferred functions.</source>
          <target state="translated">テストでは、&lt;a href=&quot;../../ngmock/service/%24timeout&quot;&gt; &lt;code&gt;$timeout.flush()&lt;/code&gt; &lt;/a&gt;を使用して、遅延関数のキューを同期的にフラッシュできます。</target>
        </trans-unit>
        <trans-unit id="9afa5f460758c21238a4ac6be52ef14781fd6696" translate="yes" xml:space="preserve">
          <source>In that case, it is necessary to intercept the &lt;em&gt;initial&lt;/em&gt; compilation of the element:</source>
          <target state="translated">その場合、要素の&lt;em&gt;初期&lt;/em&gt;コンパイルをインターセプトする必要があります。</target>
        </trans-unit>
        <trans-unit id="f664cca1d4ca20781d1fa172027d128144824737" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;SomeClass&lt;/code&gt; is not concerned with creating or locating the &lt;code&gt;greeter&lt;/code&gt; dependency, it is simply handed the &lt;code&gt;greeter&lt;/code&gt; when it is instantiated.</source>
          <target state="translated">上記の例では、 &lt;code&gt;SomeClass&lt;/code&gt; は &lt;code&gt;greeter&lt;/code&gt; 依存関係の作成や検索に関係しておらず、インスタンス化されるときに &lt;code&gt;greeter&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="d6351961d5f7c7bedc28b2fb3f9404a2fa13777f" translate="yes" xml:space="preserve">
          <source>In the above example notice that the &lt;code&gt;MyController&lt;/code&gt; assigns &lt;code&gt;World&lt;/code&gt; to the &lt;code&gt;username&lt;/code&gt; property of the scope. The scope then notifies the &lt;code&gt;input&lt;/code&gt; of the assignment, which then renders the input with username pre-filled. This demonstrates how a controller can write data into the scope.</source>
          <target state="translated">上記の例では、 &lt;code&gt;MyController&lt;/code&gt; がスコープのスコープの &lt;code&gt;username&lt;/code&gt; プロパティに &lt;code&gt;World&lt;/code&gt; を割り当てていることに注意してください。次に、スコープは割り当ての &lt;code&gt;input&lt;/code&gt; を通知し、ユーザー名が事前に入力された入力をレンダリングします。これは、コントローラーがスコープにデータを書き込む方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e594bf894541dbfbfa549d5ac280e9f9712c2570" translate="yes" xml:space="preserve">
          <source>In the case of AngularJS' SCE service, one uses &lt;a href=&quot;%24sce#trustAs.html&quot;&gt;$sce.trustAs&lt;/a&gt; (and shorthand methods such as &lt;a href=&quot;%24sce#trustAsHtml.html&quot;&gt;$sce.trustAsHtml&lt;/a&gt;, etc.) to build the trusted versions of your values.</source>
          <target state="translated">AngularJS」SCEサービス、1用途の場合は&lt;a href=&quot;%24sce#trustAs.html&quot;&gt;$ sce.trustAs&lt;/a&gt;（などと速記方法&lt;a href=&quot;%24sce#trustAsHtml.html&quot;&gt;$ sce.trustAsHtml&lt;/a&gt;自分の価値観の信頼されたバージョンを構築するなど、）。</target>
        </trans-unit>
        <trans-unit id="959810922e73332af4b6023c346f0a5b1acbe45e" translate="yes" xml:space="preserve">
          <source>In the code above, we see how the &lt;code&gt;apiToken&lt;/code&gt; service is defined via the Factory recipe that depends on the &lt;code&gt;clientId&lt;/code&gt; service. The factory service then uses NSA-proof encryption to produce an authentication token.</source>
          <target state="translated">上記のコードでは、 &lt;code&gt;apiToken&lt;/code&gt; サービスに依存するFactoryレシピを介してapiTokenサービスがどのように定義されているかが &lt;code&gt;clientId&lt;/code&gt; ます。次に、ファクトリサービスはNSAに対応した暗号化を使用して認証トークンを生成します。</target>
        </trans-unit>
        <trans-unit id="84f8e46a5ef8dfd7b5fa4f69ef21284f0f989e10" translate="yes" xml:space="preserve">
          <source>In the example HTML code above the message that is set on required will override the corresponding required message defined within the remote template. Therefore, with particular input fields (such email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied while more generic messages can be used to handle other, more general input errors.</source>
          <target state="translated">上記のHTMLコードの例では、requiredに設定されたメッセージは、リモートテンプレート内で定義された対応するrequiredメッセージを上書きします。したがって、特定の入力フィールド(メールアドレス、日付フィールド、オートコンプリート入力など)では、特殊なエラーメッセージを適用することができますが、より一般的なメッセージは他のより一般的な入力エラーを処理するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="fd65d4b7c7659da1f46b3e642c3fddcc6b9572ba" translate="yes" xml:space="preserve">
          <source>In the example above we in-lined the value of the &lt;code&gt;template&lt;/code&gt; option, but this will become annoying as the size of your template grows.</source>
          <target state="translated">上記の例では、 &lt;code&gt;template&lt;/code&gt; オプションの値をインライン化しましたが、テンプレートのサイズが大きくなると、これは面倒になります。</target>
        </trans-unit>
        <trans-unit id="4ea40c9ac185962c5537c5bf56297794190e4724" translate="yes" xml:space="preserve">
          <source>In the example above: The template contains the directive &lt;code&gt;ng-app=&quot;invoice2&quot;&lt;/code&gt;. This tells AngularJS to use the &lt;code&gt;invoice2&lt;/code&gt; module as the main module for the application. The code snippet &lt;code&gt;angular.module('invoice2', ['finance2'])&lt;/code&gt; specifies that the &lt;code&gt;invoice2&lt;/code&gt; module depends on the &lt;code&gt;finance2&lt;/code&gt; module. By this, AngularJS uses the &lt;code&gt;InvoiceController&lt;/code&gt; as well as the &lt;code&gt;currencyConverter&lt;/code&gt; service.</source>
          <target state="translated">上記の例では：テンプレートには &lt;code&gt;ng-app=&quot;invoice2&quot;&lt;/code&gt; ディレクティブが含まれています。これにより、アプリケーションのメインモジュールとして &lt;code&gt;invoice2&lt;/code&gt; モジュールを使用するようAngularJSに指示します。コードスニペット &lt;code&gt;angular.module('invoice2', ['finance2'])&lt;/code&gt; ことを指定 &lt;code&gt;invoice2&lt;/code&gt; モジュールが依存 &lt;code&gt;finance2&lt;/code&gt; モジュール。これにより、AngularJSは &lt;code&gt;InvoiceController&lt;/code&gt; と &lt;code&gt;currencyConverter&lt;/code&gt; サービスを使用します。</target>
        </trans-unit>
        <trans-unit id="06c6dacfa62f890f4ce330dacbb04a271d1a5f52" translate="yes" xml:space="preserve">
          <source>In the example below if the &lt;code&gt;ngApp&lt;/code&gt; directive were not placed on the &lt;code&gt;html&lt;/code&gt; element then the document would not be compiled, the &lt;code&gt;AppController&lt;/code&gt; would not be instantiated and the &lt;code&gt;{{ a+b }}&lt;/code&gt; would not be resolved to &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="translated">以下の例では、 &lt;code&gt;ngApp&lt;/code&gt; ディレクティブが &lt;code&gt;html&lt;/code&gt; 要素に配置されていない場合、ドキュメントはコンパイルされず、 &lt;code&gt;AppController&lt;/code&gt; はインスタンス化されず、 &lt;code&gt;{{ a+b }}&lt;/code&gt; は &lt;code&gt;3&lt;/code&gt; に解決されません。</target>
        </trans-unit>
        <trans-unit id="f0733690aa73762a66daf4ab130eb29e196bfdd6" translate="yes" xml:space="preserve">
          <source>In the example below we are testing a service that takes a long time to generate its answer. To avoid having all of the assertions we want to write in a single test case, &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector()&lt;/a&gt; and Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt; are used to run the service only once. The test cases then all make assertions about the properties added to the service instance.</source>
          <target state="translated">以下の例では、応答の生成に長い時間がかかるサービスをテストしています。単一のテストケースで記述したいすべてのアサーションを回避するために、&lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector（）&lt;/a&gt;とJasmineの &lt;code&gt;beforeAll()&lt;/code&gt; を使用して、サービスを1回だけ実行します。次に、テストケースはすべて、サービスインスタンスに追加されたプロパティに関するアサーションを作成します。</target>
        </trans-unit>
        <trans-unit id="bab3c31c5347dae0fee8eb746e2e91d85348416e" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;&quot;0: Nobody is viewing.&quot;&lt;/code&gt; is an explicit number rule. If you did not specify this rule, 0 would be matched to the &quot;other&quot; category and &quot;0 people are viewing&quot; would be shown instead of &quot;Nobody is viewing&quot;. You can specify an explicit number rule for other numbers, for example 12, so that instead of showing &quot;12 people are viewing&quot;, you can show &quot;a dozen people are viewing&quot;.</source>
          <target state="translated">例では、 &lt;code&gt;&quot;0: Nobody is viewing.&quot;&lt;/code&gt; 明示的な数値規則です。このルールを指定しなかった場合、0は「その他」カテゴリに一致し、「誰も表示していない」の代わりに「0人が表示中」が表示されます。他の数値（12など）に明示的な数値規則を指定して、「12人が表示している」ではなく「12人が表示している」と表示することができます。</target>
        </trans-unit>
        <trans-unit id="9240f6b392f9f24d3f0cc0e6e9f1b6f87bdaa61f" translate="yes" xml:space="preserve">
          <source>In the example, note that:</source>
          <target state="translated">例では、そのことに注意してください。</target>
        </trans-unit>
        <trans-unit id="84ff38ef3acedf57990298f438e0044989906ff2" translate="yes" xml:space="preserve">
          <source>In the following example a new block of HTML containing a &lt;code&gt;ng-controller&lt;/code&gt; directive is added to the end of the document body by JQuery. We then compile and link it into the current AngularJS scope.</source>
          <target state="translated">次の例では、 &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブを含むHTMLの新しいブロックが、JQueryによってドキュメント本文の最後に追加されます。次に、それをコンパイルして現在のAngularJSスコープにリンクします。</target>
        </trans-unit>
        <trans-unit id="e5310456ee5d9fc9becb78c6016bab204fd72bf8" translate="yes" xml:space="preserve">
          <source>In the following example we create two directives:</source>
          <target state="translated">次の例では、2つのディレクティブを作成します。</target>
        </trans-unit>
        <trans-unit id="e5133af465b2e35bb8a87b952a090800d0de494d" translate="yes" xml:space="preserve">
          <source>In the following example we will build a form to calculate the costs of an invoice in different currencies.</source>
          <target state="translated">次の例では、異なる通貨で請求書のコストを計算するフォームを作成します。</target>
        </trans-unit>
        <trans-unit id="77918f42e8ba84df32a20e6ed8fa56c3f1646559" translate="yes" xml:space="preserve">
          <source>In the following example, the interpolation information would be ignored and the browser would simply interpret the attribute as present, meaning that the button would always be disabled.</source>
          <target state="translated">次の例では、補間情報は無視され、ブラウザは単に属性が存在すると解釈し、ボタンが常に無効になることを意味します。</target>
        </trans-unit>
        <trans-unit id="efef16f2696255d51f1a599a09667ffbb53142df" translate="yes" xml:space="preserve">
          <source>In the following example, we say that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element &lt;strong&gt;matches&lt;/strong&gt; the &lt;code&gt;ngModel&lt;/code&gt; directive</source>
          <target state="translated">次の例では、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素が &lt;code&gt;ngModel&lt;/code&gt; ディレクティブに&lt;strong&gt;一致&lt;/strong&gt;するとします</target>
        </trans-unit>
        <trans-unit id="79560f8749a4459cf00c1e8ac63200d2b09c35ab" translate="yes" xml:space="preserve">
          <source>In the link function, link the compiled element with the element's scope.</source>
          <target state="translated">link関数では、コンパイルされた要素とその要素のスコープをリンクします。</target>
        </trans-unit>
        <trans-unit id="cae02af11dc52e4c34dfd155a0e09f2c35b21656" translate="yes" xml:space="preserve">
          <source>In the new JavaScript file we are also creating a &lt;a href=&quot;concepts#module.html&quot;&gt;module&lt;/a&gt; at which we register the controller. We will talk about modules in the next section.</source>
          <target state="translated">新しいJavaScriptファイルでは、コントローラーを登録する&lt;a href=&quot;concepts#module.html&quot;&gt;モジュール&lt;/a&gt;も作成しています。モジュールについては次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="ddb9bac8dbb551492f9275fbd24cd7951d7d8c0c" translate="yes" xml:space="preserve">
          <source>In these examples we use &lt;code&gt;&amp;lt;base href=&quot;/base/index.html&quot; /&amp;gt;&lt;/code&gt;. The inputs represent the address bar of the browser.</source>
          <target state="translated">これらの例では、 &lt;code&gt;&amp;lt;base href=&quot;/base/index.html&quot; /&amp;gt;&lt;/code&gt; を使用しています。入力は、ブラウザのアドレスバーを表します。</target>
        </trans-unit>
        <trans-unit id="b67dc576ed7fd6345e84f4eb6c7018ca4bfbcc4f" translate="yes" xml:space="preserve">
          <source>In this case, you can use &lt;code&gt;$rollbackViewValue()&lt;/code&gt; to manually cancel the debounced / future update and reset the input to the last committed view value.</source>
          <target state="translated">この場合、 &lt;code&gt;$rollbackViewValue()&lt;/code&gt; を使用して、デバウンスされた/将来の更新を手動でキャンセルし、最後にコミットされたビューの値に入力をリセットできます。</target>
        </trans-unit>
        <trans-unit id="6505ab30bfaaaac0b15030b3f3986050a80340d6" translate="yes" xml:space="preserve">
          <source>In this case, you need to override the default currency symbol by providing the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; currency filter with a currency symbol as a parameter.</source>
          <target state="translated">この場合、パラメーターとして通貨記号を使用して&lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt;通貨フィルターを提供することにより、デフォルトの通貨記号をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="14e832106d47cd2398f7a2e9a5e870b31e8b80af" translate="yes" xml:space="preserve">
          <source>In this example there are two locations where a simple interpolation binding (&lt;code&gt;{{}}&lt;/code&gt;) is present, but the one wrapped in &lt;code&gt;ngNonBindable&lt;/code&gt; is left alone.</source>
          <target state="translated">この例では、単純な補間バインディング（ &lt;code&gt;{{}}&lt;/code&gt; ）が存在する場所が2つありますが、 &lt;code&gt;ngNonBindable&lt;/code&gt; でラップされた場所はそのままです。</target>
        </trans-unit>
        <trans-unit id="4d3a54eba3caaff060cebf9bc0469b28b7141602" translate="yes" xml:space="preserve">
          <source>In this example we create a custom method on our resource to make a PUT request:</source>
          <target state="translated">この例では、リソースにカスタムメソッドを作成してPUTリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="6899b61e7576501948474a864710fc73cabc4d8a" translate="yes" xml:space="preserve">
          <source>In this example we will build a directive that displays the current time. Once a second, it updates the DOM to reflect the current time.</source>
          <target state="translated">この例では、現在の時刻を表示するディレクティブを作ります。一秒に一度、現在の時刻を反映するように DOM を更新します。</target>
        </trans-unit>
        <trans-unit id="4439980cd7f8e616e932b5cf07209756402b8a31" translate="yes" xml:space="preserve">
          <source>In this example, we've used the Value recipe to define the value to provide when &lt;code&gt;DemoController&lt;/code&gt; asks for the service with id &quot;clientId&quot;.</source>
          <target state="translated">この例では、Valueレシピを使用して、 &lt;code&gt;DemoController&lt;/code&gt; が &quot;clientId&quot;というIDのサービスを要求したときに提供する値を定義しています。</target>
        </trans-unit>
        <trans-unit id="7a7d32308b0ce66221de3ff0ef1900cca2184aa8" translate="yes" xml:space="preserve">
          <source>In this mode, &lt;code&gt;$location&lt;/code&gt; uses Hashbang URLs in all browsers. AngularJS also does not intercept and rewrite links in this mode. I.e. links work as expected and also perform full page reloads when other parts of the url than the hash fragment was changed.</source>
          <target state="translated">このモードでは、 &lt;code&gt;$location&lt;/code&gt; はすべてのブラウザーでHashbang URLを使用します。このモードでは、AngularJSはリンクのインターセプトと書き換えも行いません。つまり、リンクは期待どおりに動作し、ハッシュフラグメント以外のURLの部分が変更されたときに、ページ全体の再読み込みを実行します。</target>
        </trans-unit>
        <trans-unit id="5becec1b89211dd88c512f01dd020136e19e6976" translate="yes" xml:space="preserve">
          <source>In this scenario the ordering of the values in the &lt;code&gt;$inject&lt;/code&gt; array must match the ordering of the parameters in &lt;code&gt;MyController&lt;/code&gt;.</source>
          <target state="translated">このシナリオでは、 &lt;code&gt;$inject&lt;/code&gt; 配列の値の順序は、 &lt;code&gt;MyController&lt;/code&gt; のパラメーターの順序と一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="13f2a9a690a1e6a57d2a22be202ab6f40a5e27bc" translate="yes" xml:space="preserve">
          <source>In unit tests, if &lt;code&gt;angular-mocks.js&lt;/code&gt; is loaded, this service is overridden by &lt;a href=&quot;../../ngmock/service/%24exceptionhandler&quot;&gt;mock $exceptionHandler&lt;/a&gt; which aids in testing.</source>
          <target state="translated">単体テストでは、 &lt;code&gt;angular-mocks.js&lt;/code&gt; が読み込まれると、このサービスは、テストを支援する&lt;a href=&quot;../../ngmock/service/%24exceptionhandler&quot;&gt;モック$ exceptionHandler&lt;/a&gt;によってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="f65268ee4fca5a690bd7ec3d41fb1bec92988ebd" translate="yes" xml:space="preserve">
          <source>In unit tests, you may need to call &lt;code&gt;$digest()&lt;/code&gt; to simulate the scope life cycle.</source>
          <target state="translated">単体テストでは、スコープのライフサイクルをシミュレートするために &lt;code&gt;$digest()&lt;/code&gt; を呼び出す必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="1175103ab9a357b144d5afd8b6a34c7357be8f89" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;angular_1_router.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">HTMLに &lt;code&gt;angular_1_router.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="eee121d0108cf587e09cedc45732972ef8bcd660" translate="yes" xml:space="preserve">
          <source>Including ngAria</source>
          <target state="translated">ngAriaを含む</target>
        </trans-unit>
        <trans-unit id="97ab23190c81b3035d6f0736f1e943af6dedb556" translate="yes" xml:space="preserve">
          <source>Including the &lt;code&gt;angular-mocks.js&lt;/code&gt; file automatically adds the &lt;code&gt;ngMock&lt;/code&gt; module, so your tests are ready to go!</source>
          <target state="translated">&lt;code&gt;angular-mocks.js&lt;/code&gt; ファイルを含めると、 &lt;code&gt;ngMock&lt;/code&gt; モジュールが自動的に追加されるので、テストを開始する準備が整います。</target>
        </trans-unit>
        <trans-unit id="022e67bfe4c9d31f23e277e933c1ffc2d7b2553f" translate="yes" xml:space="preserve">
          <source>Incorrect scope on replaced element: &lt;a href=&quot;https://github.com/angular/angular.js/issues/9837&quot;&gt;#9837&lt;/a&gt;</source>
          <target state="translated">置き換えられた要素の誤ったスコープ：&lt;a href=&quot;https://github.com/angular/angular.js/issues/9837&quot;&gt;＃9837&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4bc6cb47d35d34b7a2afa7d59d3ad1affaa2fd4d" translate="yes" xml:space="preserve">
          <source>Increasing the TTL could have performance implications, so you should not change it without proper justification.</source>
          <target state="translated">TTLを上げるとパフォーマンスに影響を与える可能性があるので、正当な理由なく変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="fe65a117b989a572706242b27f193dcbfe4cccb2" translate="yes" xml:space="preserve">
          <source>Index at which to begin limitation. As a negative index, &lt;code&gt;begin&lt;/code&gt; indicates an offset from the end of &lt;code&gt;input&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">制限を開始するインデックス。負のインデックスとして、 &lt;code&gt;begin&lt;/code&gt; は &lt;code&gt;input&lt;/code&gt; の終わりからのオフセットを示します。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="be561e9cda308e941f15c8f2d92167d741116500" translate="yes" xml:space="preserve">
          <source>Inference</source>
          <target state="translated">Inference</target>
        </trans-unit>
        <trans-unit id="e3429591e14050c72d5c0051bbbbd1a28af8277c" translate="yes" xml:space="preserve">
          <source>Information about the module</source>
          <target state="translated">モジュールに関する情報</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="5dfb1d0123ddef5f4f1709bff3cd4b6a227f90d4" translate="yes" xml:space="preserve">
          <source>Inheritance works with methods in the same way as it does with properties. So in our previous examples, all of the properties could be replaced with methods that return string values.</source>
          <target state="translated">継承はプロパティと同じようにメソッドでも動作します。ですから、先ほどの例では、すべてのプロパティを文字列の値を返すメソッドに置き換えることができました。</target>
        </trans-unit>
        <trans-unit id="0b0ccb7ae52acb2325f9958f72c6588fcb209c80" translate="yes" xml:space="preserve">
          <source>Inheriting Options</source>
          <target state="translated">オプションの継承</target>
        </trans-unit>
        <trans-unit id="96a10dd68557ab7a42e636872dcf0b6dfbfa7c5b" translate="yes" xml:space="preserve">
          <source>Injection Function Annotation</source>
          <target state="translated">注入機能アノテーション</target>
        </trans-unit>
        <trans-unit id="a9fff665a0f0f15d16e0d15e587df45688563f62" translate="yes" xml:space="preserve">
          <source>Injection locals for Controller.</source>
          <target state="translated">コントローラー用のインジェクションローカル。</target>
        </trans-unit>
        <trans-unit id="2ca8a0d344a0e19a0d77c7ff904b9681383397eb" translate="yes" xml:space="preserve">
          <source>Injector</source>
          <target state="translated">Injector</target>
        </trans-unit>
        <trans-unit id="79f0f713c81b40636682b05fc5367727bac538b1" translate="yes" xml:space="preserve">
          <source>Injector API</source>
          <target state="translated">インジェクタAPI</target>
        </trans-unit>
        <trans-unit id="14473111235c870eaff95fa0c0269e33135347df" translate="yes" xml:space="preserve">
          <source>Injector object. See &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">インジェクターオブジェクト。&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e347f4ceb23a6d8637cc8028fda9ad8c7b7c47f" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="translated">Inline</target>
        </trans-unit>
        <trans-unit id="925743fe777d805151236206dc7c89eab96a1877" translate="yes" xml:space="preserve">
          <source>Inline Array Annotation</source>
          <target state="translated">インライン配列アノテーション</target>
        </trans-unit>
        <trans-unit id="6b04e7cb97df1376cafddfa71719f04eb50b9a6e" translate="yes" xml:space="preserve">
          <source>Input elements using ngModelController do this automatically when they are destroyed.</source>
          <target state="translated">ngModelController を使用した入力要素が破棄された場合、自動的にこれを行います。</target>
        </trans-unit>
        <trans-unit id="746797b58353ee493a111e047d8432803b2bf4f0" translate="yes" xml:space="preserve">
          <source>Input text.</source>
          <target state="translated">テキストを入力します。</target>
        </trans-unit>
        <trans-unit id="5e4c6a9c5fc75d66498cf6d23beea81ac1405c3b" translate="yes" xml:space="preserve">
          <source>Input to be serialized into JSON.</source>
          <target state="translated">JSONにシリアライズされる入力。</target>
        </trans-unit>
        <trans-unit id="36c92f17e709bebc8508b025911cc23c819f2bdc" translate="yes" xml:space="preserve">
          <source>Input to filter.</source>
          <target state="translated">フィルターに入力します。</target>
        </trans-unit>
        <trans-unit id="b469f7b387e7ea5a8aa43ef249909abf751dad91" translate="yes" xml:space="preserve">
          <source>Input with date validation and transformation. In browsers that do not yet support the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601 date format (yyyy-MM-dd), for example: &lt;code&gt;2009-01-06&lt;/code&gt;. Since many modern browsers do not yet support this input type, it is important to provide cues to users on the expected input format via a placeholder or label.</source>
          <target state="translated">日付の検証と変換を使用して入力します。HTML5の日付入力をまだサポートしていないブラウザでは、テキスト要素が使用されます。その場合、テキストは有効なISO-8601日付形式（yyyy-MM-dd）で入力する必要があります（例： &lt;code&gt;2009-01-06&lt;/code&gt; )。最近の多くのブラウザはこの入力タイプをまだサポートしていないため、プレースホルダーまたはラベルを介して、予想される入力形式でユーザーにキューを提供することが重要です。</target>
        </trans-unit>
        <trans-unit id="368b3f90c079e89422060af3560495bdef962d93" translate="yes" xml:space="preserve">
          <source>Input with datetime validation and transformation. In browsers that do not yet support the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 local datetime format (yyyy-MM-ddTHH:mm:ss), for example: &lt;code&gt;2010-12-28T14:57:00&lt;/code&gt;.</source>
          <target state="translated">日時の検証と変換を使用して入力します。HTML5の日付入力をまだサポートしていないブラウザでは、テキスト要素が使用されます。その場合、テキストは有効なISO-8601ローカル日時形式（yyyy-MM-ddTHH：mm：ss）で入力する必要があります（例： &lt;code&gt;2010-12-28T14:57:00&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="f055ea0fb91bafd4e2519ef585345bddd83e494f" translate="yes" xml:space="preserve">
          <source>Input with month validation and transformation. In browsers that do not yet support the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 month format (yyyy-MM), for example: &lt;code&gt;2009-01&lt;/code&gt;.</source>
          <target state="translated">月の検証と変換を使用して入力します。HTML5の月の入力をまだサポートしていないブラウザでは、テキスト要素が使用されます。その場合、テキストは有効なISO-8601月形式（yyyy-MM）で入力する必要があります（例： &lt;code&gt;2009-01&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="2d19ccf55a4ce32c01abc960d0eb8d89049b6ff3" translate="yes" xml:space="preserve">
          <source>Input with time validation and transformation. In browsers that do not yet support the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 local time format (HH:mm:ss), for example: &lt;code&gt;14:57:00&lt;/code&gt;. Model must be a Date object. This binding will always output a Date object to the model of January 1, 1970, or local date &lt;code&gt;new Date(1970, 0, 1, HH, mm, ss)&lt;/code&gt;.</source>
          <target state="translated">時間の検証と変換を伴う入力。HTML5の時間入力をまだサポートしていないブラウザでは、テキスト要素が使用されます。その場合、テキストは有効なISO-8601現地時間形式（HH：mm：ss）で入力する必要があります（例： &lt;code&gt;14:57:00&lt;/code&gt; ：57：00）。モデルはDateオブジェクトである必要があります。このバインディングは、常にDateオブジェクトを1970年1月1日のモデル、またはローカル日付 &lt;code&gt;new Date(1970, 0, 1, HH, mm, ss)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="87b35cff3f70eb2b5963a0cee4a1695a8c2487fc" translate="yes" xml:space="preserve">
          <source>Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601 week format (yyyy-W##), for example: &lt;code&gt;2013-W02&lt;/code&gt;.</source>
          <target state="translated">週の検証と日付への変換を使用して入力します。HTML5週の入力をまだサポートしていないブラウザーでは、テキスト要素が使用されます。その場合、テキストは有効なISO-8601週形式（yyyy-W ##）で入力する必要があります（例： &lt;code&gt;2013-W02&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="8623e06b7bf838dfcd7440cde11477a28bd943b1" translate="yes" xml:space="preserve">
          <source>Inputs should be using &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; bindings. The &lt;code&gt;&amp;lt;&lt;/code&gt; symbol denotes &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;one-way bindings&lt;/a&gt; which are available since 1.5. The difference to &lt;code&gt;=&lt;/code&gt; is that the bound properties in the component scope are not watched, which means if you assign a new value to the property in the component scope, it will not update the parent scope. Note however, that both parent and component scope reference the same object, so if you are changing object properties or array elements in the component, the parent will still reflect that change. The general rule should therefore be to never change an object or array property in the component scope. &lt;code&gt;@&lt;/code&gt; bindings can be used when the input is a string, especially when the value of the binding doesn't change.</source>
          <target state="translated">入力には &lt;code&gt;&amp;lt;&lt;/code&gt; および &lt;code&gt;@&lt;/code&gt; バインディングを使用する必要があります。 &lt;code&gt;&amp;lt;&lt;/code&gt; 記号は意味&lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;一方向のバインディング&lt;/a&gt; 1.5以降で利用可能です。 &lt;code&gt;=&lt;/code&gt; との違いは、コンポーネントスコープのバインドされたプロパティが監視されないことです。つまり、コンポーネントスコープのプロパティに新しい値を割り当てても、親スコープは更新されません。ただし、親スコープとコンポーネントスコープの両方が同じオブジェクトを参照するため、コンポーネントのオブジェクトプロパティまたは配列要素を変更する場合でも、親はその変更を反映します。したがって、一般的な規則は、コンポーネントスコープのオブジェクトまたは配列のプロパティを変更しないことです。 &lt;code&gt;@&lt;/code&gt; バインディングは、入力が文字列の場合、特にバインディングの値が変化しない場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="9e52682fa7935f8560c99962baa2e9b2e2f695aa" translate="yes" xml:space="preserve">
          <source>Inserts (moves) the element into its new position in the DOM either after the &lt;code&gt;after&lt;/code&gt; element (if provided) or as the first child within the &lt;code&gt;parent&lt;/code&gt; element and then triggers an animation. A promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">要素をDOMの新しい位置に、要素の &lt;code&gt;after&lt;/code&gt; （指定されている場合）または &lt;code&gt;parent&lt;/code&gt; 要素内の最初の子として挿入（移動）してから、アニメーションをトリガーします。アニメーションが完了したら、次のダイジェストで解決されるプロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="9d08db8a2f848ef678473f1e8f3fc6d65efc3930" translate="yes" xml:space="preserve">
          <source>Inserts a named entry into the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object to be retrieved later, and incrementing the size of the cache if the key was not already present in the cache. If behaving like an LRU cache, it will also remove stale entries from the set.</source>
          <target state="translated">後で取得するために名前付きエントリを&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトに挿入し、キーがまだキャッシュに存在しない場合はキャッシュのサイズをインクリメントします。LRUキャッシュのように動作する場合は、古いエントリもセットから削除されます。</target>
        </trans-unit>
        <trans-unit id="b56347e262d3cfcb832a5204694e59add55e7c8a" translate="yes" xml:space="preserve">
          <source>Inserts the element into the DOM either after the &lt;code&gt;after&lt;/code&gt; element (if provided) or as the first child within the &lt;code&gt;parent&lt;/code&gt; element and then triggers an animation. A promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">要素をDOMの &lt;code&gt;after&lt;/code&gt; 要素の後に（指定されている場合）、または &lt;code&gt;parent&lt;/code&gt; 要素内の最初の子として挿入し、アニメーションをトリガーします。アニメーションが完了したら、次のダイジェストで解決されるプロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="4a974602fd15a3bb043838c33a55716734438b42" translate="yes" xml:space="preserve">
          <source>Inside this directive's compile function, add any other directive attributes to the template.</source>
          <target state="translated">このディレクティブのコンパイル関数の中で、他のディレクティブの属性をテンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="8282d74914fee52414c245630944283136d0ee0c" translate="yes" xml:space="preserve">
          <source>Instance of given controller.</source>
          <target state="translated">与えられたコントローラのインスタンス。</target>
        </trans-unit>
        <trans-unit id="062b9f18d0fd09a55820ed08041572545f617364" translate="yes" xml:space="preserve">
          <source>Instance of requested controller.</source>
          <target state="translated">要求されたコントローラのインスタンス。</target>
        </trans-unit>
        <trans-unit id="211f21858ca1d5311a2538cd51c3ed72a3d7a141" translate="yes" xml:space="preserve">
          <source>Instantiating &lt;code&gt;$route&lt;/code&gt; early is necessary for capturing the initial &lt;a href=&quot;../../ng/service/%24location#%24locationChangeStart.html&quot;&gt;$locationChangeStart&lt;/a&gt; event and navigating to the appropriate route. Usually, &lt;code&gt;$route&lt;/code&gt; is instantiated in time by the &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; directive. Yet, in cases where &lt;code&gt;ngView&lt;/code&gt; is included in an asynchronously loaded template (e.g. in another directive's template), the directive factory might not be called soon enough for &lt;code&gt;$route&lt;/code&gt; to be instantiated &lt;em&gt;before&lt;/em&gt; the initial &lt;code&gt;$locationChangeSuccess&lt;/code&gt; event is fired. Eager instantiation ensures that &lt;code&gt;$route&lt;/code&gt; is always instantiated in time, regardless of when &lt;code&gt;ngView&lt;/code&gt; will be loaded.</source>
          <target state="translated">最初の&lt;a href=&quot;../../ng/service/%24location#%24locationChangeStart.html&quot;&gt;$ locationChangeStart&lt;/a&gt;イベントをキャプチャして適切なルートに移動するには、 &lt;code&gt;$route&lt;/code&gt; 早期にインスタンス化する必要があります。通常、 &lt;code&gt;$route&lt;/code&gt; は&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;ディレクティブによって適時にインスタンス化されます。ただし、 &lt;code&gt;ngView&lt;/code&gt; が非同期に読み込まれたテンプレート（たとえば、別のディレクティブのテンプレート）に含まれている場合、最初の &lt;code&gt;$locationChangeSuccess&lt;/code&gt; イベントが発生する&lt;em&gt;前に&lt;/em&gt; &lt;code&gt;$route&lt;/code&gt; がインスタンス化されるのに十分早くディレクティブファクトリが呼び出されない可能性があります。熱心なインスタンス化により、 &lt;code&gt;ngView&lt;/code&gt; がいつ読み込まれるかに関係なく、 &lt;code&gt;$route&lt;/code&gt; は常に時間内にインスタンス化されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d3a7f6588b1415794dfce3d5d197e1c86baed2d" translate="yes" xml:space="preserve">
          <source>Instead of an ngController, we now have a heroList component that holds the data of different heroes, and creates a heroDetail for each of them.</source>
          <target state="translated">ngController の代わりに、異なるヒーローのデータを保持し、それぞれのヒーローの heroDetail を作成する heroList コンポーネントを用意しました。</target>
        </trans-unit>
        <trans-unit id="6f3dfbdc7d4af7c104dfa249eb6020271af2c661" translate="yes" xml:space="preserve">
          <source>Instead of manipulating Input Data, the component calls the correct Output Event with the changed data. For a deletion, that means the component doesn't delete the &lt;code&gt;hero&lt;/code&gt; itself, but sends it back to the owner component via the correct event.</source>
          <target state="translated">コンポーネントは、入力データを操作する代わりに、変更されたデータで正しい出力イベントを呼び出します。削除の場合、それはコンポーネントが &lt;code&gt;hero&lt;/code&gt; 自体を削除するのではなく、正しいイベントを介して所有者コンポーネントに送り返すことを意味します。</target>
        </trans-unit>
        <trans-unit id="83be5bd3ffd4491816aabd2cd39c2c3b9c8878ac" translate="yes" xml:space="preserve">
          <source>Instead the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; directive compiles &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; separately. The result of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element compilation is a linking function which contains all of the directives contained in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, ready to be attached to a specific clone of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">代わりに、&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;ディレクティブは &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; を個別にコンパイルします。結果 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のコンパイルは、ディレクティブのすべてに含まれている含まリンク関数である &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; の特定のクローンに取り付けられるように準備ができて、要素 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="633968d37033cd055bb2eb774fd1e896dbbc403f" translate="yes" xml:space="preserve">
          <source>Instead use services like &lt;code&gt;$window&lt;/code&gt; and &lt;code&gt;$location&lt;/code&gt; in functions on controllers, which are then called from expressions. Such services provide mockable access to globals.</source>
          <target state="translated">代わりに、コントローラーの関数で &lt;code&gt;$window&lt;/code&gt; や &lt;code&gt;$location&lt;/code&gt; などのサービスを使用します。これらは、式から呼び出されます。このようなサービスは、グローバルへのモック可能なアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="e907f4bb49fd3c2e897bc3769f08b3d04e07eddb" translate="yes" xml:space="preserve">
          <source>Integration with the browser event loop</source>
          <target state="translated">ブラウザのイベントループとの統合</target>
        </trans-unit>
        <trans-unit id="f9c3ced7a72c2e86229aee91105ee78487714dbb" translate="yes" xml:space="preserve">
          <source>Interceptors</source>
          <target state="translated">Interceptors</target>
        </trans-unit>
        <trans-unit id="9db23e6c66b8f703c4c5170aac080107d2e70814" translate="yes" xml:space="preserve">
          <source>Interceptors detailed info</source>
          <target state="translated">インターセプターの詳細情報</target>
        </trans-unit>
        <trans-unit id="9ce9437cbc666edc9eb9fcee34199bb7906c0c55" translate="yes" xml:space="preserve">
          <source>Intercomponent Communication</source>
          <target state="translated">コンポーネント間通信</target>
        </trans-unit>
        <trans-unit id="062715707c7ec1cacc1e15b12597b7e7f10f0e06" translate="yes" xml:space="preserve">
          <source>Interface for configuring AngularJS &lt;a href=&quot;../function/angular.module&quot;&gt;modules&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../function/angular.module&quot;&gt;モジュール&lt;/a&gt;を構成するためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="e4d32358862ac0edaba0242863407cf48322048c" translate="yes" xml:space="preserve">
          <source>Interface for configuring AngularJS &lt;a href=&quot;function/angular.module&quot;&gt;modules&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;a href=&quot;function/angular.module&quot;&gt;モジュール&lt;/a&gt;を構成するためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="ecd5ccdaf3148a44137ddcbe0c56ca93bd059aa4" translate="yes" xml:space="preserve">
          <source>Internally it looks a bit like this:</source>
          <target state="translated">内部的にはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="7b741cdf9b58113f65f5de5d9a4967edb5170093" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;ngAnimate&lt;/code&gt; waits until all template downloads that are started right after bootstrap have finished. Then, it waits for the currently running &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; and one more after that, to finish. This ensures that the whole app has been compiled fully before animations are attempted.</source>
          <target state="translated">内部的には、 &lt;code&gt;ngAnimate&lt;/code&gt; は、ブートストラップが完了した直後に開始されるすべてのテンプレートのダウンロードが完了するまで待機します。次に、現在実行中の&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;とそのあと1つが終了するのを待ちます。これにより、アニメーションが試行される前に、アプリ全体が完全にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="22c5f10ca7f996927beededd6dc71f14380c408d" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily. Localization (l10n), is the process of adapting applications and text to enable their usability in a particular cultural or linguistic market. For application developers, internationalizing an application means abstracting all of the strings and other locale-specific bits (such as date or currency formats) out of the application. Localizing an application means providing translations and localized formats for the abstracted bits.</source>
          <target state="translated">国際化(i18n)とは、製品を言語や文化に合わせて簡単にローカライズできるように開発するプロセスです。ローカライゼーション(l10n)とは、特定の文化や言語市場での使用を可能にするために、アプリケーションやテキストを適応させるプロセスです。アプリケーション開発者にとって、アプリケーションを国際化するということは、文字列や他の地域固有のビット(日付や通貨形式など)をすべてアプリケーションから抽象化することを意味します。アプリケーションをローカライズするとは、抽象化されたビットの翻訳とローカライズされたフォーマットを提供することを意味します。</target>
        </trans-unit>
        <trans-unit id="627598da36f0488e21c56b4623e3c3ac29134995" translate="yes" xml:space="preserve">
          <source>Internet Explorer and Edge do not support the &lt;code&gt;details&lt;/code&gt; element, it is recommended to use &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Internet ExplorerとEdgeは &lt;code&gt;details&lt;/code&gt; 要素をサポートしていません。代わりに&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="3da05a3ab5e77c32bfb542c759dbb3b2f9921337" translate="yes" xml:space="preserve">
          <source>Interpolation markup with embedded &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt; is used by AngularJS to provide data-binding to text nodes and attribute values.</source>
          <target state="translated">埋め込み&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;を使用した補間マークアップは、テキストノードと属性値へのデータバインドを提供するためにAngularJSによって使用されます。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="464d6921114c284acd9c8fb8f85d8fdc2d3aa0a2" translate="yes" xml:space="preserve">
          <source>Introductory Material</source>
          <target state="translated">入門資料</target>
        </trans-unit>
        <trans-unit id="6ef14993cacdc6240416f3e705cd81fa9aedff49" translate="yes" xml:space="preserve">
          <source>Invoke the method and supply the method arguments from the &lt;code&gt;$injector&lt;/code&gt;.</source>
          <target state="translated">メソッドを呼び出し、 &lt;code&gt;$injector&lt;/code&gt; からメソッド引数を提供します。</target>
        </trans-unit>
        <trans-unit id="35b43899a3f83610ba7b4c6c1390ee4e1f1b7e31" translate="yes" xml:space="preserve">
          <source>Invokes the &lt;code&gt;iterator&lt;/code&gt; function once for each item in &lt;code&gt;obj&lt;/code&gt; collection, which can be either an object or an array. The &lt;code&gt;iterator&lt;/code&gt; function is invoked with &lt;code&gt;iterator(value, key, obj)&lt;/code&gt;, where &lt;code&gt;value&lt;/code&gt; is the value of an object property or an array element, &lt;code&gt;key&lt;/code&gt; is the object property key or array element index and obj is the &lt;code&gt;obj&lt;/code&gt; itself. Specifying a &lt;code&gt;context&lt;/code&gt; for the function is optional.</source>
          <target state="translated">オブジェクトまたは配列のいずれかである &lt;code&gt;obj&lt;/code&gt; コレクションの項目ごとに1回 &lt;code&gt;iterator&lt;/code&gt; 関数を呼び出します。 &lt;code&gt;iterator&lt;/code&gt; 関数を用いて呼び出される &lt;code&gt;iterator(value, key, obj)&lt;/code&gt; 、 &lt;code&gt;value&lt;/code&gt; オブジェクトのプロパティまたは配列要素の値であり、 &lt;code&gt;key&lt;/code&gt; オブジェクトのプロパティキーまたは配列要素のインデックスであり、objがある &lt;code&gt;obj&lt;/code&gt; 自体。関数の &lt;code&gt;context&lt;/code&gt; 指定はオプションです。</target>
        </trans-unit>
        <trans-unit id="a5ab7787ce6bc4362a9f13777edcdaf6b98998bd" translate="yes" xml:space="preserve">
          <source>Ionic Framework</source>
          <target state="translated">イオンフレームワーク</target>
        </trans-unit>
        <trans-unit id="1a782aa74f75185993195ad4bcbc102f9f427def" translate="yes" xml:space="preserve">
          <source>Isolating the Scope of a Directive</source>
          <target state="translated">指令の範囲の分離</target>
        </trans-unit>
        <trans-unit id="d20f2f6b4e6d817ba6e89b3f9673aecdf3113258" translate="yes" xml:space="preserve">
          <source>Issues with replace: true</source>
          <target state="translated">replace:true の問題</target>
        </trans-unit>
        <trans-unit id="553315737e3b34b8f0ca05c4145e5f178bea3093" translate="yes" xml:space="preserve">
          <source>It also watches the &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; and automatically scrolls to match any anchor whenever it changes. This can be disabled by calling &lt;a href=&quot;../provider/%24anchorscrollprovider#disableAutoScrolling.html&quot;&gt;$anchorScrollProvider.disableAutoScrolling()&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash（）&lt;/a&gt;を監視し、アンカーが変更されるたびに自動的にスクロールしてアンカーに一致させます。これは、&lt;a href=&quot;../provider/%24anchorscrollprovider#disableAutoScrolling.html&quot;&gt;$ anchorScrollProvider.disableAutoScrolling（）を&lt;/a&gt;呼び出すことで無効にできます。</target>
        </trans-unit>
        <trans-unit id="c489374ee92d89df88a69e803f218fae80bb3039" translate="yes" xml:space="preserve">
          <source>It can also be used to achieve one-way binding of a given expression to an input element such as an &lt;code&gt;input[text]&lt;/code&gt; or a &lt;code&gt;textarea&lt;/code&gt;, when that element does not use ngModel.</source>
          <target state="translated">またような入力要素に与えられた式の結合一方向を達成するために使用することができる &lt;code&gt;input[text]&lt;/code&gt; または &lt;code&gt;textarea&lt;/code&gt; その要素がngModelを使用していません。</target>
        </trans-unit>
        <trans-unit id="6ead9df0c1b0575bc0d0a33bce64a5d7d3f5aebc" translate="yes" xml:space="preserve">
          <source>It can be used like so:</source>
          <target state="translated">のように使うことができます。</target>
        </trans-unit>
        <trans-unit id="db03d0c1d6f65c6696ad45dd10b046e86fb2b5bc" translate="yes" xml:space="preserve">
          <source>It can be used to trigger a native browser event on an element, which is useful for unit testing.</source>
          <target state="translated">要素のネイティブブラウザイベントをトリガーするために使用することができ、ユニットテストに便利です。</target>
        </trans-unit>
        <trans-unit id="92cd05db0fac39e05b3a78129dbc2c13bb5d210c" translate="yes" xml:space="preserve">
          <source>It does not cause a full page reload when the browser URL is changed. To reload the page after changing the URL, use the lower-level API, &lt;code&gt;$window.location.href&lt;/code&gt;.</source>
          <target state="translated">ブラウザのURLが変更されても、ページ全体が再読み込みされることはありません。URLの変更後にページをリロードするには、下位レベルのAPI、 &lt;code&gt;$window.location.href&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6dd0e3b492e0e9ddf8f072cf8217d885fc9dc93f" translate="yes" xml:space="preserve">
          <source>It impacts performance, as interpolation adds another watcher to the scope.</source>
          <target state="translated">これは、補間がスコープに別のウォッチャーを追加するため、パフォーマンスに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="4d5b67bbcac712f4a34e5aa8cfdb8f074f88c7b5" translate="yes" xml:space="preserve">
          <source>It increases the complexity of the markup</source>
          <target state="translated">マークアップの複雑さを増す</target>
        </trans-unit>
        <trans-unit id="fc05bcff5f72991e69c700ce73817afcbbb8bd13" translate="yes" xml:space="preserve">
          <source>It indicates to the compiler whether or not directives on comments should be compiled. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">コメントに関するディレクティブをコンパイルするかどうかをコンパイラーに指示します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="906af1e36dfdfa37c091ab433fc206589b32aa37" translate="yes" xml:space="preserve">
          <source>It indicates to the compiler whether or not directives on element classes should be compiled. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">要素クラスのディレクティブをコンパイルするかどうかをコンパイラーに指示します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a5ee5553d7a8187ba379677bf68a64abd66747eb" translate="yes" xml:space="preserve">
          <source>It is a really, &lt;em&gt;really&lt;/em&gt; good idea to regard app testing as equal in importance to app writing. Testing difficulty is dramatically affected by the way the code is structured.</source>
          <target state="translated">アプリのテストはアプリの作成と同じくらい重要であると考えるのは、本当に、&lt;em&gt;本当に&lt;/em&gt;良い考えです。テストの難しさは、コードの構造に大きく影響されます。</target>
        </trans-unit>
        <trans-unit id="8855a2587ecadec73d7a3421fc455403fbc8a53a" translate="yes" xml:space="preserve">
          <source>It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves the testability of the code.</source>
          <target state="translated">DOM の操作をアプリのロジックから切り離すことは非常に良いアイデアです。これにより、コードのテスト性が劇的に向上します。</target>
        </trans-unit>
        <trans-unit id="727b35094155043ed303b76b370615c80c2ab5a2" translate="yes" xml:space="preserve">
          <source>It is also possible that you run into difficulties if you try to update the ngModel's &lt;code&gt;$modelValue&lt;/code&gt; programmatically before these debounced/future events have resolved/occurred, because AngularJS's dirty checking mechanism is not able to tell whether the model has actually changed or not.</source>
          <target state="translated">AngularJSのダーティーチェックメカニズムはモデルが実際に変更されたかどうかを判断できないため、これらのデバウンス/将来のイベントが解決/発生する前にngModelの &lt;code&gt;$modelValue&lt;/code&gt; プログラムで更新しようとすると、問題が発生する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="80c4111be6bb24188a6a2bea325a2c92f6ed5f77" translate="yes" xml:space="preserve">
          <source>It is also possible to call the &lt;code&gt;orderBy&lt;/code&gt; filter manually, by injecting &lt;code&gt;orderByFilter&lt;/code&gt;, and calling it with the desired parameters. (Alternatively, you could inject the &lt;code&gt;$filter&lt;/code&gt; factory and retrieve the &lt;code&gt;orderBy&lt;/code&gt; filter with &lt;code&gt;$filter('orderBy')&lt;/code&gt;.)</source>
          <target state="translated">呼び出すことも可能である &lt;code&gt;orderBy&lt;/code&gt; 注入することで、手動でフィルタを &lt;code&gt;orderByFilter&lt;/code&gt; をし、必要なパラメータとそれを呼び出します。（あるいは、 &lt;code&gt;$filter&lt;/code&gt; ファクトリを注入し、 &lt;code&gt;$filter('orderBy')&lt;/code&gt; を使用して &lt;code&gt;orderBy&lt;/code&gt; フィルターを取得することもできます。）</target>
        </trans-unit>
        <trans-unit id="ca7a590d3c2d53e278b044a014b894acece3725f" translate="yes" xml:space="preserve">
          <source>It is also possible to set &lt;code&gt;bindToController&lt;/code&gt; to an object hash with the same format as the &lt;code&gt;scope&lt;/code&gt; property. This will set up the scope bindings to the controller directly. Note that &lt;code&gt;scope&lt;/code&gt; can still be used to define which kind of scope is created. By default, no scope is created. Use &lt;code&gt;scope: {}&lt;/code&gt; to create an isolate scope (useful for component directives).</source>
          <target state="translated">&lt;code&gt;bindToController&lt;/code&gt; を &lt;code&gt;scope&lt;/code&gt; プロパティと同じ形式のオブジェクトハッシュに設定することもできます。これにより、スコープバインディングがコントローラーに直接設定されます。ことを注意 &lt;code&gt;scope&lt;/code&gt; まだ作成されたスコープの種類を定義するために使用することができます。デフォルトでは、スコープは作成されません。使用 &lt;code&gt;scope: {}&lt;/code&gt; （成分指令するのに有用な）を単離スコープを作成します。</target>
        </trans-unit>
        <trans-unit id="25431739b654d8cc47b28b9c43eeca226e65b9a6" translate="yes" xml:space="preserve">
          <source>It is also possible to set it as the default &lt;code&gt;paramSerializer&lt;/code&gt; in the &lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt;&lt;code&gt;$httpProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt; &lt;code&gt;$httpProvider&lt;/code&gt; &lt;/a&gt;でデフォルトの &lt;code&gt;paramSerializer&lt;/code&gt; として設定することもできます。</target>
        </trans-unit>
        <trans-unit id="1d5c13dd91385416023d0e8e5aa828224c7f5217" translate="yes" xml:space="preserve">
          <source>It is always good to make common tasks trivial and difficult tasks possible.</source>
          <target state="translated">共通の課題を些細で難しいものにするのは、いつでもいいことです。</target>
        </trans-unit>
        <trans-unit id="b3e683fad2f9309dfaa4db918783ad8289246cf8" translate="yes" xml:space="preserve">
          <source>It is an excellent idea to decouple the client side of an app from the server side. This allows development work to progress in parallel, and allows for reuse of both sides.</source>
          <target state="translated">アプリのクライアント側とサーバー側を切り離すのは素晴らしいアイデアです。これにより、開発作業を並行して進めることができ、双方の再利用が可能になります。</target>
        </trans-unit>
        <trans-unit id="0b0fa48b6950751b768005b01d414197a136d433" translate="yes" xml:space="preserve">
          <source>It is common to attach Controllers at different levels of the DOM hierarchy. Since the &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; directive creates a new child scope, we get a hierarchy of scopes that inherit from each other. The &lt;code&gt;$scope&lt;/code&gt; that each Controller receives will have access to properties and methods defined by Controllers higher up the hierarchy. See &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;Understanding Scopes&lt;/a&gt; for more information about scope inheritance.</source>
          <target state="translated">DOM階層のさまざまなレベルでコントローラーを接続するのが一般的です。&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;ディレクティブは新しい子スコープを作成するので、互いに継承するスコープの階層を取得します。 &lt;code&gt;$scope&lt;/code&gt; 各コントローラが受信するには、階層までの上位コントローラで定義されたプロパティとメソッドにアクセスする必要があります。スコープの継承の詳細&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;については、スコープ&lt;/a&gt;についてを参照してください。</target>
        </trans-unit>
        <trans-unit id="898e639ea78a3295cd345092429425a8851a4def" translate="yes" xml:space="preserve">
          <source>It is currently not possible for an interpolated expression to contain the interpolation end symbol. For example, &lt;code&gt;{{ '}}' }}&lt;/code&gt; will be incorrectly interpreted as &lt;code&gt;{{ ' }}&lt;/code&gt; + &lt;code&gt;' }}&lt;/code&gt;, i.e. an interpolated expression consisting of a single-quote (&lt;code&gt;'&lt;/code&gt;) and the &lt;code&gt;' }}&lt;/code&gt; string.</source>
          <target state="translated">現在、内挿式に内挿終了記号を含めることはできません。たとえば、 &lt;code&gt;{{ '}}' }}&lt;/code&gt; は誤って &lt;code&gt;{{ ' }}&lt;/code&gt; + &lt;code&gt;' }}&lt;/code&gt; と解釈されます。つまり、単一引用符（ &lt;code&gt;'&lt;/code&gt; ）と &lt;code&gt;' }}&lt;/code&gt; 文字列で構成される補間式です。</target>
        </trans-unit>
        <trans-unit id="78735c155bc5c04e168b61fd0cfb26236c9dbc1c" translate="yes" xml:space="preserve">
          <source>It is documented that &lt;code&gt;animation.start()&lt;/code&gt; will return a promise object and this is true, however, there is also an additional method available on the runner called &lt;code&gt;.done(callbackFn)&lt;/code&gt;. The done method works the same as &lt;code&gt;.finally(callbackFn)&lt;/code&gt;, however, it does &lt;strong&gt;not trigger a digest to occur&lt;/strong&gt;. Therefore, for performance reasons, it's always best to use &lt;code&gt;runner.done(callback)&lt;/code&gt; instead of &lt;code&gt;runner.then()&lt;/code&gt;, &lt;code&gt;runner.catch()&lt;/code&gt; or &lt;code&gt;runner.finally()&lt;/code&gt; unless you really need a digest to kick off afterwards.</source>
          <target state="translated">&lt;code&gt;animation.start()&lt;/code&gt; がpromiseオブジェクトを返すことが記載されていますが、これはtrueですが、 &lt;code&gt;.done(callbackFn)&lt;/code&gt; と呼ばれる追加のメソッドもランナーで利用できます。 doneメソッドは &lt;code&gt;.finally(callbackFn)&lt;/code&gt; と同じように機能&lt;strong&gt;しますが、ダイジェストの発生をトリガー&lt;/strong&gt;しませ&lt;strong&gt;ん&lt;/strong&gt;。したがって、パフォーマンス上の理由から、後でダイジェストを実際に開始する必要がない限り、 &lt;code&gt;runner.catch()&lt;/code&gt; 、runner.catch（）、または &lt;code&gt;runner.finally()&lt;/code&gt; の代わりに &lt;code&gt;runner.then()&lt;/code&gt; &lt;code&gt;runner.done(callback)&lt;/code&gt; を使用することが常に最善です。</target>
        </trans-unit>
        <trans-unit id="9adf8cb48d55887fa324e58aa54a93785a13c110" translate="yes" xml:space="preserve">
          <source>It is important to be aware of this when writing tests for directives that use 'element' transclusion. If you place the directive on the root element of the DOM fragment that you pass to &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;, then the DOM node returned from the linking function will be the comment node and you will lose the ability to access the template and transcluded content.</source>
          <target state="translated">「要素」トランスクルージョンを使用するディレクティブのテストを作成するときは、このことに注意することが重要です。&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;に渡すDOMフラグメントのルート要素にディレクティブを配置すると、リンク関数から返されたDOMノードがコメントノードになり、テンプレートやトランスクルードされたコンテンツにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="ade37c34e6742fe81576b7d98f9b8cab2717a032" translate="yes" xml:space="preserve">
          <source>It is important to realize that invoking a &lt;code&gt;$resource&lt;/code&gt; object method immediately returns an empty reference (object or array depending on &lt;code&gt;isArray&lt;/code&gt;). Once the data is returned from the server the existing reference is populated with the actual data. This is a useful trick since usually the resource is assigned to a model which is then rendered by the view. Having an empty object results in no rendering, once the data arrives from the server then the object is populated with the data and the view automatically re-renders itself showing the new data. This means that in most cases one never has to write a callback function for the action methods.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; オブジェクトメソッドを呼び出すと、空の参照（ &lt;code&gt;isArray&lt;/code&gt; に応じてオブジェクトまたは配列）がすぐに返されることを理解することが重要です。サーバーからデータが返されると、既存の参照に実際のデータが入力されます。通常、リソースはモデルに割り当てられ、ビューによってレンダリングされるため、これは便利なトリックです。空のオブジェクトがあるとレンダリングは行われません。サーバーからデータが到着すると、オブジェクトにデータが入力され、ビューは自動的に再レン​​ダリングして新しいデータを表示します。つまり、ほとんどの場合、アクションメソッドのコールバック関数を記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="44e11a7a5909b52ab207ef70f4ca59576a8afb49" translate="yes" xml:space="preserve">
          <source>It is mainly used on &lt;a href=&quot;../input/input%5Bradio%5D&quot;&gt;&lt;code&gt;input[radio]&lt;/code&gt;&lt;/a&gt; and option elements, so that when the element is selected, the &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; of that element (or its &lt;a href=&quot;select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; parent element) is set to the bound value. It is especially useful for dynamically generated lists using &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, as shown below.</source>
          <target state="translated">これは主に&lt;a href=&quot;../input/input%5Bradio%5D&quot;&gt; &lt;code&gt;input[radio]&lt;/code&gt; &lt;/a&gt;およびoption要素で使用されるため、要素が選択されると、その要素（またはその&lt;a href=&quot;select&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt;親要素）の&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;がバインドされた値に設定されます。これは、&lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;示すように、ngRepeatを使用して動的に生成されたリストに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd54d32cbd1f2ba51acb0890230e9b3c8d1d18e0" translate="yes" xml:space="preserve">
          <source>It is normal practice to attach your transcluded content (&lt;code&gt;clone&lt;/code&gt;) to the DOM inside your &lt;strong&gt;clone attach function&lt;/strong&gt;:</source>
          <target state="translated">トランスアタッチされたコンテンツ（ &lt;code&gt;clone&lt;/code&gt; ）を、&lt;strong&gt;クローンattach関数&lt;/strong&gt;内のDOM に添付するのが通常の方法&lt;strong&gt;です&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="43e9284ca16e984dd2b44c46563b6814669b9eaa" translate="yes" xml:space="preserve">
          <source>It is not possible to trust specific URLs/paths. The &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; parts of a URL will be ignored. For example, &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; will be treated as &lt;code&gt;https://foo.com&lt;/code&gt;, meaning that &lt;strong&gt;all&lt;/strong&gt; requests to URLs starting with &lt;code&gt;https://foo.com/&lt;/code&gt; will include the XSRF token.</source>
          <target state="translated">特定のURL /パスを信頼することはできません。URLの &lt;code&gt;path&lt;/code&gt; 、 &lt;code&gt;query&lt;/code&gt; 、 &lt;code&gt;fragment&lt;/code&gt; 部分は無視されます。たとえば、 &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; はhttps://foo.comとして扱われ &lt;code&gt;https://foo.com&lt;/code&gt; 。つまり、 &lt;code&gt;https://foo.com/&lt;/code&gt; //foo.com/で始まるURLへの&lt;strong&gt;すべての&lt;/strong&gt;リクエストにはXSRFトークン。</target>
        </trans-unit>
        <trans-unit id="13587fb80feb5ab37440031b46d39c968c78429f" translate="yes" xml:space="preserve">
          <source>It is not possible to whitelist specific URLs/paths. The &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; parts of a URL will be ignored. For example, &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; will be treated as &lt;code&gt;https://foo.com&lt;/code&gt;, meaning that &lt;strong&gt;all&lt;/strong&gt; requests to URLs starting with &lt;code&gt;https://foo.com/&lt;/code&gt; will include the XSRF token.</source>
          <target state="translated">特定のURL /パスをホワイトリストに登録することはできません。URL の &lt;code&gt;path&lt;/code&gt; 、 &lt;code&gt;query&lt;/code&gt; 、 &lt;code&gt;fragment&lt;/code&gt; 部分は無視されます。たとえば、 &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; はhttps://foo.comとして扱われ &lt;code&gt;https://foo.com&lt;/code&gt; 。つまり、 &lt;code&gt;https://foo.com/&lt;/code&gt; //foo.com/で始まるURLへの&lt;strong&gt;すべての&lt;/strong&gt;リクエストには、 XSRFトークン。</target>
        </trans-unit>
        <trans-unit id="f5755149536ff4c33eaf7b094db38129ae71d347" translate="yes" xml:space="preserve">
          <source>It is often desirable to inline Injected functions and that's when setting the &lt;code&gt;$inject&lt;/code&gt; property is very inconvenient. In these situations using the array notation to specify the dependencies in a way that survives minification is a better choice:</source>
          <target state="translated">多くの場合、Injected関数をインライン化することが望ましく、その場合、 &lt;code&gt;$inject&lt;/code&gt; プロパティの設定は非常に不便です。これらの状況では、配列表記を使用して依存関係を指定し、縮小化後も存続する方法をお勧めします。</target>
        </trans-unit>
        <trans-unit id="ea74d8637b90b9e1696533460b703c6c41293ed9" translate="yes" xml:space="preserve">
          <source>It is possible that during the &lt;code&gt;enter&lt;/code&gt; animation, the &lt;code&gt;.message&lt;/code&gt; div will be briefly visible before it starts animating. In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; アニメーション中に、 &lt;code&gt;.message&lt;/code&gt; divがアニメーションを開始する前に一時的に表示される可能性があります。その場合、CSSにスタイルを追加して、アニメーションが開始する前に要素が非表示のままであることを確認できます。</target>
        </trans-unit>
        <trans-unit id="f82d2b045366df68d3ac3e59440164fdc698eb46" translate="yes" xml:space="preserve">
          <source>It is possible that during the &lt;code&gt;enter&lt;/code&gt; event, the &lt;code&gt;.message&lt;/code&gt; div will be briefly visible before it starts animating. In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; イベント中に、アニメーションを開始する前に &lt;code&gt;.message&lt;/code&gt; divが一時的に表示される可能性があります。その場合、CSSにスタイルを追加して、アニメーションが開始する前に要素が非表示のままであることを確認できます。</target>
        </trans-unit>
        <trans-unit id="c69afb8c7919c982dfe15812d0593df59e687ac6" translate="yes" xml:space="preserve">
          <source>It is possible to access the context object using the identifier &lt;code&gt;this&lt;/code&gt; and the locals object using the identifier &lt;code&gt;$locals&lt;/code&gt;.</source>
          <target state="translated">識別子 &lt;code&gt;this&lt;/code&gt; を使用してコンテキストオブジェクトにアクセスし、識別子 &lt;code&gt;$locals&lt;/code&gt; を使用してlocalsオブジェクトにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="3066c08f5caeabdd7acdc8e45264d026b7139d6e" translate="yes" xml:space="preserve">
          <source>It is possible to create chains of any length and since a promise can be resolved with another promise (which will defer its resolution further), it is possible to pause/defer resolution of the promises at any point in the chain. This makes it possible to implement powerful APIs like $http's response interceptors.</source>
          <target state="translated">任意の長さのチェーンを作成することが可能で、あるプロミスは別のプロミスで解決することができるので (その解決をさらに遅らせることができます)、チェーンのどの時点でもプロミスの解決を一時停止/延期することが可能です。これにより、$http のレスポンスインターセプターのような強力な API を実装することが可能になります。</target>
        </trans-unit>
        <trans-unit id="ccda427b3a1fede3c12595f91bdd135712e54499" translate="yes" xml:space="preserve">
          <source>It is possible to disable individual attributes added by ngAria with the &lt;a href=&quot;ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; method. For more details, see the &lt;a href=&quot;../guide/accessibility&quot;&gt;Developer Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt;メソッドでngAriaによって追加された個々の属性を無効にすることが可能です。詳しくは、&lt;a href=&quot;../guide/accessibility&quot;&gt;デベロッパーガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="463de9ded47806d9b1e436ee2e11963140db8b5f" translate="yes" xml:space="preserve">
          <source>It is possible to get &lt;code&gt;ngRepeat&lt;/code&gt; to iterate over the properties of an object using the following syntax:</source>
          <target state="translated">次の構文を使用して、 &lt;code&gt;ngRepeat&lt;/code&gt; にオブジェクトのプロパティを反復させることができます。</target>
        </trans-unit>
        <trans-unit id="e6efc27732c8ebe9e9e84ddd4403a59ab8aa7bee" translate="yes" xml:space="preserve">
          <source>It is possible to inject other providers into the provider function, but the injected provider must have been defined before the one that requires it.</source>
          <target state="translated">プロバイダ機能に他のプロバイダを注入することは可能ですが、注入されたプロバイダは、それを必要とするプロバイダの前に定義されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="996e7a28852c7c4983233eb69326521205c8d521" translate="yes" xml:space="preserve">
          <source>It is possible to make &lt;code&gt;ngAria&lt;/code&gt; ignore a specific element, by adding the &lt;code&gt;ng-aria-disable&lt;/code&gt; attribute on it. Note that only the element itself (and not its child elements) will be ignored.</source>
          <target state="translated">&lt;code&gt;ngAria&lt;/code&gt; に特定の要素を無視させるには、それに &lt;code&gt;ng-aria-disable&lt;/code&gt; 属性を追加します。無視されるのは要素自体（子要素ではない）のみであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7dcf70c9223ffd381f61a6b912e2f0febfd3f458" translate="yes" xml:space="preserve">
          <source>It is preferable to use &lt;code&gt;ngBind&lt;/code&gt; instead of &lt;code&gt;{{ expression }}&lt;/code&gt; if a template is momentarily displayed by the browser in its raw state before AngularJS compiles it. Since &lt;code&gt;ngBind&lt;/code&gt; is an element attribute, it makes the bindings invisible to the user while the page is loading.</source>
          <target state="translated">AngularJSがテンプレートをコンパイルする前に、テンプレートがブラウザによって生の状態で一時的に表示される場合は、 &lt;code&gt;{{ expression }}&lt;/code&gt; ではなく &lt;code&gt;ngBind&lt;/code&gt; を使用することをお勧めします。以来 &lt;code&gt;ngBind&lt;/code&gt; は、要素の属性であるページがロードされている間、それは利用者へのバインディングが見えなくなります。</target>
        </trans-unit>
        <trans-unit id="e7fa93572d942a68934418e0f950bd76f13eabf5" translate="yes" xml:space="preserve">
          <source>It is recommended that the&lt;code&gt;$animate&lt;/code&gt; service is always used when executing DOM-related procedures within directives.</source>
          <target state="translated">ディレクティブ内でDOM関連のプロシージャを実行するときは、常に &lt;code&gt;$animate&lt;/code&gt; サービスを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="20dd27ac14a6636e950bb55c4e920c64e3cfa0d1" translate="yes" xml:space="preserve">
          <source>It is recommended to use &lt;a href=&quot;%24verifynopendingtasks&quot;&gt;&lt;code&gt;$verifyNoPendingTasks&lt;/code&gt;&lt;/a&gt; instead, which additionally supports verifying a specific type of tasks. For example, you can verify there are no pending timeouts with &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt;.</source>
          <target state="translated">代わりに&lt;a href=&quot;%24verifynopendingtasks&quot;&gt; &lt;code&gt;$verifyNoPendingTasks&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。これは、特定のタイプのタスクの検証をさらにサポートします。たとえば、 &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt; て、保留中のタイムアウトがないことを確認できます。</target>
        </trans-unit>
        <trans-unit id="5f45818ee9136dc6dadbc2fa5e5ca2b49e58cb3e" translate="yes" xml:space="preserve">
          <source>It is safe to do DOM transformation in the post-linking function on elements that are not waiting for their async templates to be resolved.</source>
          <target state="translated">非同期テンプレートが解決されるのを待っていない要素に対して、ポストリンク機能でDOM変換を行っても安全です。</target>
        </trans-unit>
        <trans-unit id="5cd79d0b11c62c96f4bc727951641d2d5341dda9" translate="yes" xml:space="preserve">
          <source>It is strongly discouraged to write filters that are stateful, because the execution of those can't be optimized by AngularJS, which often leads to performance issues. Many stateful filters can be converted into stateless filters just by exposing the hidden state as a model and turning it into an argument for the filter.</source>
          <target state="translated">ステートフルなフィルタを書くことは強くお勧めできません。多くのステートフルフィルタは、隠れた状態をモデルとして公開し、それをフィルタの引数にするだけでステートレスフィルタに変換することができます。</target>
        </trans-unit>
        <trans-unit id="6c70092309a32e4d1a0bcae4da2f3f0c325e2cf9" translate="yes" xml:space="preserve">
          <source>It is very helpful indeed if the framework guides developers through the entire journey of building an app: From designing the UI, through writing the business logic, to testing.</source>
          <target state="translated">フレームワークがアプリ構築の全行程を通して開発者をガイドしてくれるのであれば、本当に助かります。UI の設計から、ビジネスロジックの記述、テストに至るまで、開発者をガイドしてくれるのであれば、本当に助かります。</target>
        </trans-unit>
        <trans-unit id="a8e33bee9be3d901e4da72984e940ec4a7e8a400" translate="yes" xml:space="preserve">
          <source>It is worth noting that &lt;code&gt;.forEach&lt;/code&gt; does not iterate over inherited properties because it filters using the &lt;code&gt;hasOwnProperty&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.forEach&lt;/code&gt; は、 &lt;code&gt;hasOwnProperty&lt;/code&gt; メソッドを使用してフィルタリングするため、継承されたプロパティを反復処理しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="611cdb339d280f84c55eabf4024dabc2e5e34ff2" translate="yes" xml:space="preserve">
          <source>It makes more sense to show nothing than to throw an exception if &lt;code&gt;a&lt;/code&gt; is undefined (perhaps we are waiting for the server response, and it will become defined soon). If expression evaluation wasn't forgiving we'd have to write bindings that clutter the code, for example: &lt;code&gt;{{((a||{}).b||{}).c}}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; が未定義の場合は例外をスローするよりも何も表示しない方が理にかなっています（おそらく、サーバーの応答を待っているので、すぐに定義されます）。式の評価が許されなかった場合、コードを乱雑にするバインディングを作成する必要があります。例： &lt;code&gt;{{((a||{}).b||{}).c}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3741e91b84dec124290a25fd27ad2bd88202ce9" translate="yes" xml:space="preserve">
          <source>It needs to be able to clone new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements for every &lt;code&gt;action&lt;/code&gt; in &lt;code&gt;user.actions&lt;/code&gt;. This initially seems trivial, but it becomes more complicated when you consider that &lt;code&gt;user.actions&lt;/code&gt; might have items added to it later. This means that it needs to save a clean copy of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element for cloning purposes.</source>
          <target state="translated">これは、新しいクローンできるようにする必要があります &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; すべてのための要素 &lt;code&gt;action&lt;/code&gt; で &lt;code&gt;user.actions&lt;/code&gt; を。これは最初は &lt;code&gt;user.actions&lt;/code&gt; ことのように見えますが、後でuser.actionsに項目が追加される可能性があると考えると、さらに複雑になります。つまり、クローン作成のために、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のクリーンなコピーを保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="044534907de0e3d02f1d6dcf3bd09783d0a7ce1a" translate="yes" xml:space="preserve">
          <source>It will not be evaluated:</source>
          <target state="translated">評価されることはありません。</target>
        </trans-unit>
        <trans-unit id="51d3504ce322f478d04b175eb950e68a8c86c2ed" translate="yes" xml:space="preserve">
          <source>It will not insert undefined values into the cache.</source>
          <target state="translated">未定義の値をキャッシュに挿入しません。</target>
        </trans-unit>
        <trans-unit id="647a38d6c647676338b60b9a322ac3dc18d5d2e4" translate="yes" xml:space="preserve">
          <source>It's also possible to add components via &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; in a module's config phase.</source>
          <target state="translated">モジュールの設定フェーズで&lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;を介してコンポーネントを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="22f4771591ad7899072f54bc41e4b386849c26e5" translate="yes" xml:space="preserve">
          <source>It's important to note that AngularJS operates on DOM nodes rather than strings. Usually, you don't notice this restriction because when a page loads, the web browser parses HTML into the DOM automatically.</source>
          <target state="translated">AngularJSは文字列ではなくDOMノードで動作することに注意してください。通常、ページが読み込まれるとブラウザが自動的にHTMLをDOMに解析するので、この制限に気づくことはありません。</target>
        </trans-unit>
        <trans-unit id="63749726fcc574a51f6aa95ccfbd08fbb78f8122" translate="yes" xml:space="preserve">
          <source>It's important to remember that SCE only applies to interpolation expressions.</source>
          <target state="translated">SCEは補間式にしか適用されないことを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="97fe1b00d73664eb3be824469d6bc43514c62a58" translate="yes" xml:space="preserve">
          <source>It's just a simple call to &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;, but extracted into a service, so that one can override this service with &lt;a href=&quot;https://gist.github.com/1649788&quot;&gt;BC version&lt;/a&gt;.</source>
          <target state="translated">これは単なる&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorの&lt;/a&gt;呼び出しですが、サービスに抽出されるため、このサービスを&lt;a href=&quot;https://gist.github.com/1649788&quot;&gt;BCバージョンで&lt;/a&gt;オーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="8e7cdaffe82fa8054dcd10304a4d6e6e817934e7" translate="yes" xml:space="preserve">
          <source>It's rare for directives to have a &lt;strong&gt;compile function&lt;/strong&gt;, since most directives are concerned with working with a specific DOM element instance rather than changing its overall structure.</source>
          <target state="translated">ほとんどのディレクティブは、全体的な構造を変更するのではなく、特定のDOM要素インスタンスを操作することに関係しているため、ディレクティブが&lt;strong&gt;コンパイル関数&lt;/strong&gt;を持つことはまれです。</target>
        </trans-unit>
        <trans-unit id="d8f50a90fa099f10e64b9bd1dc9869f5899151a0" translate="yes" xml:space="preserve">
          <source>It's worth noting that the success callback for &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and other methods gets called with the resource instance (populated with the data that came from the server) as well as an &lt;code&gt;$http&lt;/code&gt; header getter function, the HTTP status code and the response status text. So one could rewrite the above example and get access to HTTP headers as follows:</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;query&lt;/code&gt; 、およびその他のメソッドの成功コールバックは、リソースインスタンス（サーバーから取得したデータが入力されている）、および &lt;code&gt;$http&lt;/code&gt; ヘッダーのゲッター関数、HTTPステータスコード、応答ステータステキストで呼び出されることに注意してください。。したがって、上記の例を書き換えて、次のようにHTTPヘッダーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b5c6b93cece7b56e6dd78ac2666ff04806c02f52" translate="yes" xml:space="preserve">
          <source>Iterating over object properties</source>
          <target state="translated">オブジェクトのプロパティを繰り返し処理する</target>
        </trans-unit>
        <trans-unit id="d168d1da3e52bad6c8a376a1d89c87495a6d115b" translate="yes" xml:space="preserve">
          <source>Iterator function.</source>
          <target state="translated">イテレータ関数。</target>
        </trans-unit>
        <trans-unit id="92529e5e57daf03b5c7563eb34fd6f6925c58ee2" translate="yes" xml:space="preserve">
          <source>Its name (&lt;code&gt;customerInfo&lt;/code&gt;) corresponds to the directive's &lt;strong&gt;isolate scope&lt;/strong&gt; property, &lt;code&gt;customerInfo&lt;/code&gt;.</source>
          <target state="translated">その名前（ &lt;code&gt;customerInfo&lt;/code&gt; ）は、ディレクティブの&lt;strong&gt;分離スコープ&lt;/strong&gt;プロパティ &lt;code&gt;customerInfo&lt;/code&gt; に対応しています。</target>
        </trans-unit>
        <trans-unit id="e18ffa2ef59d4b87123bc4116b7fecfc6e23eb76" translate="yes" xml:space="preserve">
          <source>Its value (&lt;code&gt;=info&lt;/code&gt;) tells &lt;code&gt;$compile&lt;/code&gt; to bind to the &lt;code&gt;info&lt;/code&gt; attribute.</source>
          <target state="translated">その値（ &lt;code&gt;=info&lt;/code&gt; ）は、 &lt;code&gt;$compile&lt;/code&gt; に &lt;code&gt;info&lt;/code&gt; 属性にバインドするように指示します。</target>
        </trans-unit>
        <trans-unit id="e2109f35483e028183630e81dec66527c27fcb3c" translate="yes" xml:space="preserve">
          <source>JSON Hijacking Protection</source>
          <target state="translated">JSON ハイジャック対策</target>
        </trans-unit>
        <trans-unit id="a73f31364f316869a18b10faeec2662cc4789dca" translate="yes" xml:space="preserve">
          <source>JSON Vulnerability Protection</source>
          <target state="translated">JSON 脆弱性の保護</target>
        </trans-unit>
        <trans-unit id="1a3f795e84cd2bbb65926a8a582d42403b1d5c7a" translate="yes" xml:space="preserve">
          <source>JSON string to deserialize.</source>
          <target state="translated">デシリアライズするJSON文字列。</target>
        </trans-unit>
        <trans-unit id="e7310488497f531f2e417022cb940817561304d1" translate="yes" xml:space="preserve">
          <source>JSON string.</source>
          <target state="translated">JSON文字列。</target>
        </trans-unit>
        <trans-unit id="cd109ddd9abf44c82c6e482563ac9c2d1dab6b46" translate="yes" xml:space="preserve">
          <source>JSON vulnerability</source>
          <target state="translated">JSON脆弱性</target>
        </trans-unit>
        <trans-unit id="f3231f4d14fc745f083c6fc41fdecc2a60618120" translate="yes" xml:space="preserve">
          <source>JSON-ified string representing &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; を表すJSON化された文字列。</target>
        </trans-unit>
        <trans-unit id="df2d62a7c9d7c1a7fdd0de39b8a9f3b75d1b3fe4" translate="yes" xml:space="preserve">
          <source>JSONP requests must specify a callback to be used in the response from the server. This callback is passed as a query parameter in the request. You must specify the name of this parameter by setting the &lt;code&gt;jsonpCallbackParam&lt;/code&gt; property on the request config object.</source>
          <target state="translated">JSONPリクエストは、サーバーからの応答で使用されるコールバックを指定する必要があります。このコールバックは、リクエストのクエリパラメータとして渡されます。リクエスト設定オブジェクトの &lt;code&gt;jsonpCallbackParam&lt;/code&gt; プロパティを設定して、このパラメーターの名前を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3755f3f206953314cab133719791d70c7c568127" translate="yes" xml:space="preserve">
          <source>Jasmine</source>
          <target state="translated">Jasmine</target>
        </trans-unit>
        <trans-unit id="ec4307a3b7c7279b22900f7258d244467b4170ca" translate="yes" xml:space="preserve">
          <source>Jasmine comes with a number of matchers that help you make a variety of assertions. You should &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Matchers&quot;&gt;read the Jasmine documentation&lt;/a&gt; to see what they are. To use Jasmine with Karma, we use the &lt;a href=&quot;https://github.com/karma-runner/karma-jasmine&quot;&gt;karma-jasmine&lt;/a&gt; test runner.</source>
          <target state="translated">Jasmineには、さまざまなアサーションを作成するのに役立つ多数のマッチャーが付属しています。あなたはすべきである&lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Matchers&quot;&gt;ジャスミンのドキュメントを読んで&lt;/a&gt;、彼らが何であるかを見るために。KarmaでJasmineを使用するには、&lt;a href=&quot;https://github.com/karma-runner/karma-jasmine&quot;&gt;karma-jasmine&lt;/a&gt;テストランナーを使用します。</target>
        </trans-unit>
        <trans-unit id="c99a1165231f7c8e9e9bd2f1b1be048a851e7b28" translate="yes" xml:space="preserve">
          <source>Jasmine comes with a number of matchers that help you make a variety of assertions. You should &lt;a href=&quot;https://jasmine.github.io/1.3/introduction.html#section-Matchers&quot;&gt;read the Jasmine documentation&lt;/a&gt; to see what they are. To use Jasmine with Karma, we use the &lt;a href=&quot;https://github.com/karma-runner/karma-jasmine&quot;&gt;karma-jasmine&lt;/a&gt; test runner.</source>
          <target state="translated">Jasmineには、さまざまなアサーションを作成するのに役立つ多数のマッチャーが付属しています。あなたはすべきである&lt;a href=&quot;https://jasmine.github.io/1.3/introduction.html#section-Matchers&quot;&gt;ジャスミンのドキュメントを読んで&lt;/a&gt;、彼らが何であるかを見るために。&lt;a href=&quot;https://github.com/karma-runner/karma-jasmine&quot;&gt;カルマでジャスミン&lt;/a&gt;を使用するには、カルマ-ジャスミンテストランナーを使用します。</target>
        </trans-unit>
        <trans-unit id="06353eaa73f71ca7f32f2abd2d524ecc102f0f53" translate="yes" xml:space="preserve">
          <source>Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt; and mocha's &lt;code&gt;before()&lt;/code&gt; hooks are often useful for sharing test setup - either to reduce test run-time or simply to make for more focused test cases.</source>
          <target state="translated">Jasmineの &lt;code&gt;beforeAll()&lt;/code&gt; およびmochaの &lt;code&gt;before()&lt;/code&gt; フックは、テストの実行時間を短縮するため、または単により集中したテストケースを作成するために、テストセットアップを共有するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="cd26eab17c125b6d4053a3b51afa63e0255f89fb" translate="yes" xml:space="preserve">
          <source>JavaScript developers often use custom types to write object-oriented code. Let's explore how we could launch a unicorn into space via our &lt;code&gt;unicornLauncher&lt;/code&gt; service which is an instance of a custom type:</source>
          <target state="translated">JavaScript開発者は、カスタム型を使用してオブジェクト指向コードを作成することがよくあります。カスタムタイプのインスタンスである &lt;code&gt;unicornLauncher&lt;/code&gt; サービスを介してユニコーンを空間に起動する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ee93c12cc73a4b3357dead9e3073e9c84333533a" translate="yes" xml:space="preserve">
          <source>JavaScript does not have annotations, and annotations are needed for dependency injection. The following are all valid ways of annotating function with injection arguments and are equivalent.</source>
          <target state="translated">JavaScriptにはアノテーションがなく、依存性注入にはアノテーションが必要です。以下は、インジェクション引数を持つ関数にアノテーションを付ける有効な方法であり、すべて同等です。</target>
        </trans-unit>
        <trans-unit id="f87f3f5a13f550d2b612f32c40eed8fdfb04d4d7" translate="yes" xml:space="preserve">
          <source>JavaScript is a dynamically typed language which comes with great power of expression, but it also comes with almost no help from the compiler. For this reason we feel very strongly that any code written in JavaScript needs to come with a strong set of tests. We have built many features into AngularJS which make testing your AngularJS applications easy. With AngularJS, there is no excuse for not testing.</source>
          <target state="translated">JavaScript は動的型付けされた言語であり、非常に強力な表現力を持っていますが、コンパイラの助けをほとんど必要としません。そのため、JavaScriptで書かれたコードには強力なテストが必要だと強く感じています。私たちはAngularJSに多くの機能を組み込み、AngularJSアプリケーションのテストを簡単にしています。AngularJSがあれば、テストをしない言い訳はありません。</target>
        </trans-unit>
        <trans-unit id="4fadc60e22e889ef4a5db8d9566fc1f75d1e1fc3" translate="yes" xml:space="preserve">
          <source>JavaScript-based Animations</source>
          <target state="translated">JavaScriptベースのアニメーション</target>
        </trans-unit>
        <trans-unit id="f0c95a02174fcae881d51cda5ca7ab7183d9d05f" translate="yes" xml:space="preserve">
          <source>Just before a scope is destroyed, a &lt;code&gt;$destroy&lt;/code&gt; event is broadcasted on this scope. Application code can register a &lt;code&gt;$destroy&lt;/code&gt; event handler that will give it a chance to perform any necessary cleanup.</source>
          <target state="translated">スコープが破棄される直前に、 &lt;code&gt;$destroy&lt;/code&gt; イベントがこのスコープでブロードキャストされます。アプリケーションコードは、必要なクリーンアップを実行する機会を与える &lt;code&gt;$destroy&lt;/code&gt; イベントハンドラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="446df7317547fafc6781146fe724896a641a6589" translate="yes" xml:space="preserve">
          <source>Just like with the Value recipe, the Factory recipe can create a service of any type, whether it be a primitive, object literal, function, or even an instance of a custom type.</source>
          <target state="translated">Valueレシピと同じように、Factoryレシピは、プリミティブ、オブジェクトリテラル、関数、カスタムタイプのインスタンスであっても、任意のタイプのサービスを作成することができます。</target>
        </trans-unit>
        <trans-unit id="6f3bad15c258125fed5359f408174ac231480f45" translate="yes" xml:space="preserve">
          <source>Just like with the array annotation, you'll need to take care to keep the &lt;code&gt;$inject&lt;/code&gt; in sync with the parameters in the function declaration.</source>
          <target state="translated">配列注釈の場合と同様に、 &lt;code&gt;$inject&lt;/code&gt; が関数宣言のパラメーターと同期するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="83b97c0c14f5a90f7cfc308d350169d4502ed064" translate="yes" xml:space="preserve">
          <source>Just starting out with AngularJS? Try working through our step by step tutorial or try building on our seed project.</source>
          <target state="translated">AngularJSを使い始めたばかりですか?ステップバイステップのチュートリアルで作業してみたり、シードプロジェクトで構築してみたりしてください。</target>
        </trans-unit>
        <trans-unit id="835db6cf74c39f78cc6a89ccd0b07490be2e3f7d" translate="yes" xml:space="preserve">
          <source>Karma</source>
          <target state="translated">Karma</target>
        </trans-unit>
        <trans-unit id="796757c2eef12e78a1cedcfc4dd244620a421fe3" translate="yes" xml:space="preserve">
          <source>Karma is a NodeJS application, and should be installed through npm/yarn. Full installation instructions are available on &lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;the Karma website&lt;/a&gt;.</source>
          <target state="translated">KarmaはNodeJSアプリケーションであり、npm / yarnを介してインストールする必要があります。完全なインストール手順は&lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;、Karma Webサイトで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="de4b46bddc1d81bc6aee30be4e8a8e8715fb1c30" translate="yes" xml:space="preserve">
          <source>Karma is a NodeJS application, and should be installed through npm/yarn. Full installation instructions are available on &lt;a href=&quot;https://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;the Karma website&lt;/a&gt;.</source>
          <target state="translated">KarmaはNodeJSアプリケーションであり、npm / yarnを介してインストールする必要があります。完全なインストール手順は&lt;a href=&quot;https://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;、KarmaのWebサイトで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="b3f05628aa30b14f4028806e1eb5cdfe5f20cc24" translate="yes" xml:space="preserve">
          <source>Keep in mind that extending the built-in list of attributes may expose your app to XSS or other vulnerabilities. Be very mindful of the attributes you add.</source>
          <target state="translated">ビルトインの属性リストを拡張すると、アプリがXSSやその他の脆弱性にさらされる可能性があることに注意してください。追加する属性には十分に注意してください。</target>
        </trans-unit>
        <trans-unit id="a92f7b09ee83168618ccf21bf5c35dba619424e7" translate="yes" xml:space="preserve">
          <source>Keep in mind that extending the built-in lists of elements may expose your app to XSS or other vulnerabilities. Be very mindful of the elements you add.</source>
          <target state="translated">組み込みの要素リストを拡張すると、アプリが XSS やその他の脆弱性にさらされる可能性があることに注意してください。追加する要素には十分に注意してください。</target>
        </trans-unit>
        <trans-unit id="0b7234c93db939ba9dc42512dc4a50d3d5fc5e8d" translate="yes" xml:space="preserve">
          <source>Keep in mind that ngAnimate can detect each of these classes when added and removed.</source>
          <target state="translated">これらのクラスが追加されたり削除されたりした場合、ngAnimate はそれぞれのクラスを検出できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c7b11c7d42b4f9176649a2805e7a06ba3998ac5d" translate="yes" xml:space="preserve">
          <source>Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property to block during animation states - ngAnimate will automatically handle the style toggling for you.</source>
          <target state="translated">AngularJSバージョン1.3では、アニメーションの状態でdisplayプロパティをブロックするように変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8f7f42cad636bff6a772bcf1eda4ec9fe24b543e" translate="yes" xml:space="preserve">
          <source>Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss (so there is no need to call &lt;code&gt;runner.done(doneFn)&lt;/code&gt; inside of your JavaScript animation code). Check the &lt;a href=&quot;%24animatecss#usage.html&quot;&gt;animation code above&lt;/a&gt; to see how this works.</source>
          <target state="translated">これを簡単にするために、ngAnimateはJSアニメーションAPIを微調整して、ランナーインスタンスが$ animateCssから返されたときを認識するようにしています &lt;code&gt;runner.done(doneFn)&lt;/code&gt; 、JavaScriptアニメーションコード内でrunner.done（doneFn）を呼び出す必要はありません）。&lt;a href=&quot;%24animatecss#usage.html&quot;&gt;上記&lt;/a&gt;のアニメーションコードを確認して、これがどのように機能するかを確認してください。</target>
        </trans-unit>
        <trans-unit id="f6da5d91090ed7c6d5814b2991a120259c7d9e93" translate="yes" xml:space="preserve">
          <source>Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).</source>
          <target state="translated">コントロールの状態(有効/無効、ダーティ/原始、タッチ/アンタッチ、バリデーションエラー)を保持します。</target>
        </trans-unit>
        <trans-unit id="249603dc1891319661212764d6ba00d514a14c84" translate="yes" xml:space="preserve">
          <source>KendoUI</source>
          <target state="translated">KendoUI</target>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="50f8aa7cf7544eeebc75090c7d2c1e1a09370875" translate="yes" xml:space="preserve">
          <source>Large numbers and step validation</source>
          <target state="translated">大規模な数字とステップの検証</target>
        </trans-unit>
        <trans-unit id="5b0c7a2bd6ffad5686bfa5559eb7d1db15d82077" translate="yes" xml:space="preserve">
          <source>Later, if you want to remove the transcluded content from your DOM then you should also destroy the associated transclusion scope:</source>
          <target state="translated">後日、トランスクルージョンされたコンテンツを DOM から削除したい場合は、関連するトランスクルージョンスコープも破棄しなければなりません。</target>
        </trans-unit>
        <trans-unit id="80de8be3b722879c53efa51624711a0b6a01add8" translate="yes" xml:space="preserve">
          <source>Lazily instantiated &amp;ndash; AngularJS only instantiates a service when an application component depends on it.</source>
          <target state="translated">遅延インスタンス化&amp;ndash; AngularJSは、アプリケーションコンポーネントが依存しているサービスのみをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="b048378ee8f5a0297ca090e6904d0ccf8b77cd20" translate="yes" xml:space="preserve">
          <source>Learn</source>
          <target state="translated">Learn</target>
        </trans-unit>
        <trans-unit id="dbeb304ace39b2772a333789790e10087fec101d" translate="yes" xml:space="preserve">
          <source>Let's add some more logic to the example that allows us to enter and calculate the costs in different currencies and also pay the invoice.</source>
          <target state="translated">異なる通貨でコストを入力して計算し、請求書の支払いもできるようにする例にロジックを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="90ea8d67278fa3e22b77b8cc09d3a394d5450b4e" translate="yes" xml:space="preserve">
          <source>Let's change our directive to use &lt;code&gt;restrict: 'E'&lt;/code&gt;:</source>
          <target state="translated">ディレクティブを &lt;code&gt;restrict: 'E'&lt;/code&gt; を使用するように変更してみましょう： 'E'：</target>
        </trans-unit>
        <trans-unit id="d91be5ddf9ad7a7db54de0a3590a672352083fa1" translate="yes" xml:space="preserve">
          <source>Let's create a directive that simply replaces its contents with a static template:</source>
          <target state="translated">内容を静的なテンプレートに置き換えるだけのディレクティブを作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="e3b2a3b462354632d09f1e671f1d24fa08274712" translate="yes" xml:space="preserve">
          <source>Let's finish our example by fetching the exchange rates from the &lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;exchangeratesapi.io&lt;/a&gt; exchange rate API. The following example shows how this is done with AngularJS:</source>
          <target state="translated">&lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;Exchangeatesatesapi.io&lt;/a&gt;為替レートAPI から為替レートをフェッチして、例を完成させましょう。次の例は、AngularJSでこれを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a2d73fe9e2675c4a6e225d3286eff53e81aab313" translate="yes" xml:space="preserve">
          <source>Let's refactor our example and move the currency conversion into a service in another file:</source>
          <target state="translated">この例をリファクタリングして、通貨変換を別のファイルのサービスに移動してみましょう。</target>
        </trans-unit>
        <trans-unit id="e33ef1ad31a993b44b167589b8164ec89e801fcb" translate="yes" xml:space="preserve">
          <source>Let's say for example we have two views that are managed by &lt;code&gt;ng-view&lt;/code&gt; and we want to show that there is a relationship between two components situated in within these views. By using the &lt;code&gt;ng-animate-ref&lt;/code&gt; attribute we can identify that the two components are paired together and we can then attach an animation, which is triggered when the view changes.</source>
          <target state="translated">たとえば、 &lt;code&gt;ng-view&lt;/code&gt; によって管理される2つのビューがあり、これらのビュー内にある2つのコンポーネント間に関係があることを示したいとしましょう。使用して、 &lt;code&gt;ng-animate-ref&lt;/code&gt; 属性を我々は2つの成分が一緒に対になっていることを識別することができると我々は、ビューが変更されたときにトリガされたアニメーションを、取り付けることができます。</target>
        </trans-unit>
        <trans-unit id="298a3adba79b2a136a068e0087e224c280869e40" translate="yes" xml:space="preserve">
          <source>Let's say that our &lt;code&gt;unicornLauncher&lt;/code&gt; service can stamp a unicorn with the planet name it's being launched from if this name was provided during the configuration phase. The planet name is application specific and is used also by various controllers during the runtime of the application. We can then define the planet name as a constant like this:</source>
          <target state="translated">ユニコーン &lt;code&gt;unicornLauncher&lt;/code&gt; サービスは、構成フェーズ中にこの名前が提供された場合、起動元の惑星名でユニコーンにスタンプを付けることができるとしましょう。惑星名はアプリケーション固有であり、アプリケーションの実行中にさまざまなコントローラーによっても使用されます。次に、惑星名を次のような定数として定義できます。</target>
        </trans-unit>
        <trans-unit id="9f0321f70aa92a49f56c96150c79e4cd2b88e227" translate="yes" xml:space="preserve">
          <source>Let's say that our &lt;code&gt;unicornLauncher&lt;/code&gt; service is so awesome that many apps use it. By default the launcher shoots unicorns into space without any protective shielding. But on some planets the atmosphere is so thick that we must wrap every unicorn in tinfoil before sending it on its intergalactic trip, otherwise they would burn while passing through the atmosphere. It would then be great if we could configure the launcher to use the tinfoil shielding for each launch in apps that need it. We can make it configurable like so:</source>
          <target state="translated">私たちの &lt;code&gt;unicornLauncher&lt;/code&gt; サービスが非常に素晴らしく、多くのアプリがそれを使用しているとしましょう。デフォルトでは、ランチャーはユニコーンを保護シールドなしで宇宙に発射します。しかし、一部の惑星では大気が非常に厚いため、銀河間旅行に送る前にすべてのユニコーンをアルミホイルで包む必要があります。そうしないと、大気を通過中に燃焼します。それから、それを必要とするアプリでの起動ごとにアルミ箔シールドを使用するようにランチャーを構成できれば、すばらしいでしょう。次のように構成可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="7d4554d27f3ea48a7db947cce4f856a4b1a611a8" translate="yes" xml:space="preserve">
          <source>Let's say that our HTML code for our messages container looks like so:</source>
          <target state="translated">メッセージコンテナのHTMLコードが以下のようになっているとしましょう。</target>
        </trans-unit>
        <trans-unit id="f866ae3fd006fdb24ccbab98934a0c21ceee6ca1" translate="yes" xml:space="preserve">
          <source>Let's say that we want to have a very simple service called &quot;clientId&quot; that provides a string representing an authentication id used for some remote API. You would define it like this:</source>
          <target state="translated">例えば、リモート API で使用する認証 ID を表す文字列を提供する &quot;clientId&quot; という非常にシンプルなサービスが欲しいとしましょう。このサービスは次のように定義します。</target>
        </trans-unit>
        <trans-unit id="6b8a3e62938bff7b32e460edfe415d213c9c307c" translate="yes" xml:space="preserve">
          <source>Let's say we have created an app that uses the default format for many of our &lt;code&gt;Date&lt;/code&gt; filters. Suddenly requirements have changed (that never happens) and we need all of our default dates to be &lt;code&gt;'shortDate'&lt;/code&gt; instead of &lt;code&gt;'mediumDate'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; フィルターの多くにデフォルトのフォーマットを使用するアプリを作成したとしましょう。突然の要件は（起こらないことを）変更されていると、私たちはあることを私たちのデフォルトの日付のすべてを必要とする &lt;code&gt;'shortDate'&lt;/code&gt; の代わりに &lt;code&gt;'mediumDate'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a869f2b1dc009607a199a9b62ccec65eadcb3a2" translate="yes" xml:space="preserve">
          <source>Let's say you are writing a banking app and you want to display an account balance of 1000 dollars. You write the following binding using the currency filter:</source>
          <target state="translated">銀行アプリを書いていて、1000ドルの口座残高を表示したいとします。通貨フィルターを使って以下のようなバインディングを書きます。</target>
        </trans-unit>
        <trans-unit id="c628b1fd2c31e5e7025394209d765b5f5e59eda2" translate="yes" xml:space="preserve">
          <source>Let's say you have a chunk of your template that represents a customer's information. This template is repeated many times in your code. When you change it in one place, you have to change it in several others. This is a good opportunity to use a directive to simplify your template.</source>
          <target state="translated">顧客情報を表すテンプレートの塊があるとしましょう。このテンプレートはコードの中で何度も繰り返されます。ある場所で変更すると、他の場所でも変更しなければなりません。これはテンプレートを単純化するためにディレクティブを使う良い機会です。</target>
        </trans-unit>
        <trans-unit id="c8c58cb6d56f10eb4cc5271ca81a0f4260534c05" translate="yes" xml:space="preserve">
          <source>Let's say, however, that we would also like to create a service that computes a token used for authentication against a remote API. This token will be called &lt;code&gt;apiToken&lt;/code&gt; and will be computed based on the &lt;code&gt;clientId&lt;/code&gt; value and a secret stored in the browser's local storage:</source>
          <target state="translated">ただし、リモートAPIに対する認証に使用されるトークンを計算するサービスも作成したいとします。このトークンは &lt;code&gt;apiToken&lt;/code&gt; と呼ばれ、 &lt;code&gt;clientId&lt;/code&gt; 値とブラウザーのローカルストレージに保存されているシークレットに基づいて計算されます。</target>
        </trans-unit>
        <trans-unit id="ebb2113b148155b9fb3e678b86a1b6292b725041" translate="yes" xml:space="preserve">
          <source>Let's see an example of a enter/leave animation using &lt;code&gt;ngRepeat&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ngRepeat&lt;/code&gt; を使用した開始/終了アニメーションの例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="dd679a2e36289a34afcd1847fbd10d9cfe7cf0a5" translate="yes" xml:space="preserve">
          <source>Let's start with an AngularJS app with no dependencies.</source>
          <target state="translated">まずは依存関係のないAngularJSアプリから始めてみましょう。</target>
        </trans-unit>
        <trans-unit id="853b64b22116270e945534edd7f9f969ae039277" translate="yes" xml:space="preserve">
          <source>Let's start with input fields for quantity and cost whose values are multiplied to produce the total of the invoice:</source>
          <target state="translated">まず、請求書の合計を生成するために、その値を乗算する数量とコストの入力フィールドから始めましょう。</target>
        </trans-unit>
        <trans-unit id="3a87426a46ae3a1bd831c83a8ac22a86b6a2ddc6" translate="yes" xml:space="preserve">
          <source>Let's take a closer look at the scope option:</source>
          <target state="translated">スコープオプションについて詳しく見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="ad6f98d49bcc332ad093324b782e6e8ec7a31f24" translate="yes" xml:space="preserve">
          <source>Let's take a look at how we would create a very simple component via the directive api that depends on the &lt;code&gt;planetName&lt;/code&gt; constant we've just defined and displays the planet name, in our case: &quot;Planet Name: Greasy Giant&quot;.</source>
          <target state="translated">先ほど定義した &lt;code&gt;planetName&lt;/code&gt; 定数に依存するディレクティブapiを使用して非常に単純なコンポーネントを作成し、惑星名を表示する方法を見てみましょう。この例では、「惑星名：脂っこい巨人」です。</target>
        </trans-unit>
        <trans-unit id="02630abdf06f034279a0636877f3aa1fce289330" translate="yes" xml:space="preserve">
          <source>Let's take a look at the different scenarios for creating and using services via various recipe types. We'll start with the simplest case possible where various places in your code need a shared string and we'll accomplish this via Value recipe.</source>
          <target state="translated">さまざまなレシピタイプを介してサービスを作成して使用するためのさまざまなシナリオを見てみましょう。コードの様々な場所で共有文字列を必要とする最もシンプルなケースから始め、Valueレシピを介してこれを達成します。</target>
        </trans-unit>
        <trans-unit id="65084febdc505a3aedac5a7c194b2efa216e2144" translate="yes" xml:space="preserve">
          <source>Let's write some tests to show how to override configuration in tests.</source>
          <target state="translated">テストで設定を上書きする方法を示すために、いくつかのテストを書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="7db120ff0add5b38c6339cbb76ef30243d16848f" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 3.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示ライセンス3.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="e91f6ba4ec02c67a796600daa345b1a2b526d763" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 4.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示ライセンス4.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="d3911533e30bd2745884e44a33dc2841ba42a193" translate="yes" xml:space="preserve">
          <source>Life-cycle hook examples</source>
          <target state="translated">ライフサイクルフックの例</target>
        </trans-unit>
        <trans-unit id="72d665ddd236e21d4dba142cf80503414b7be118" translate="yes" xml:space="preserve">
          <source>Life-cycle hooks</source>
          <target state="translated">ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="a28d0799ebeb3a447cb6b6539c436a3337a59d6e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;max&lt;/code&gt;, sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;ngMax&lt;/code&gt;, but does not trigger HTML5 native validation. Takes an expression.</source>
          <target state="translated">&lt;code&gt;max&lt;/code&gt; と同様に、入力された値が &lt;code&gt;ngMax&lt;/code&gt; より大きい場合に &lt;code&gt;max&lt;/code&gt; 検証エラーキーを設定しますが、HTML5ネイティブ検証はトリガーされません。式を取ります。</target>
        </trans-unit>
        <trans-unit id="736200b3c3163acfc763d1dee6a087b566995823" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;min&lt;/code&gt;, sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;ngMin&lt;/code&gt;, but does not trigger HTML5 native validation. Takes an expression.</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; と同様に、入力された値が &lt;code&gt;ngMin&lt;/code&gt; 未満の場合、 &lt;code&gt;min&lt;/code&gt; 検証エラーキーを設定しますが、HTML5ネイティブ検証はトリガーされません。式を取ります。</target>
        </trans-unit>
        <trans-unit id="53200f8a62b7c0c12c64684c5c3a36ca905e973d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;step&lt;/code&gt;, sets the &lt;code&gt;step&lt;/code&gt; validation error key if the value entered does not fit the &lt;code&gt;ngStep&lt;/code&gt; constraint, but does not trigger HTML5 native validation. Takes an expression.</source>
          <target state="translated">&lt;code&gt;step&lt;/code&gt; と同様に、入力された値が &lt;code&gt;ngStep&lt;/code&gt; 制約に適合しない場合に &lt;code&gt;step&lt;/code&gt; 検証エラーキーを設定しますが、HTML5ネイティブ検証をトリガーしません。式を取ります。</target>
        </trans-unit>
        <trans-unit id="ad7b72d8ff408e1dcf3b167cf8de1b0af89c8cd1" translate="yes" xml:space="preserve">
          <source>Like any software library, it is critical to keep AngularJS up to date. Please track the &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; and make sure you are aware of upcoming security patches and other updates.</source>
          <target state="translated">他のソフトウェアライブラリと同様に、AngularJSを最新の状態に保つことが重要です。&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;を追跡し、今後のセキュリティパッチやその他の更新を知っていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4aff2bb0aea69064ecfe10bde17f80bcd00b4eab" translate="yes" xml:space="preserve">
          <source>Like with &lt;code&gt;$provide.decorator&lt;/code&gt;, the &lt;code&gt;module.decorator&lt;/code&gt; function runs during the config phase of the app. That means you can define a &lt;code&gt;module.decorator&lt;/code&gt; before the decorated service is defined.</source>
          <target state="translated">同じように &lt;code&gt;$provide.decorator&lt;/code&gt; 、 &lt;code&gt;module.decorator&lt;/code&gt; の機能は、アプリの設定の段階で実行されます。つまり、装飾されたサービスを定義する前に &lt;code&gt;module.decorator&lt;/code&gt; を定義できます。</target>
        </trans-unit>
        <trans-unit id="a33352096ab23bfe64b61b04f4606de68cb10c82" translate="yes" xml:space="preserve">
          <source>Links starting with '/' that lead to a different base path</source>
          <target state="translated">'/' で始まるリンクは、別のベースパスへとつながります。</target>
        </trans-unit>
        <trans-unit id="6c73374c914b151e896711eea2feec173d938d57" translate="yes" xml:space="preserve">
          <source>Links that contain &lt;code&gt;target&lt;/code&gt; element</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 要素を含むリンク</target>
        </trans-unit>
        <trans-unit id="82538d88e9ab837cce2872605a50080ea1374920" translate="yes" xml:space="preserve">
          <source>Listener directives, such as &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ng-click&lt;/a&gt;, register a listener with the DOM. When the DOM listener fires, the directive executes the associated expression and updates the view using the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ng-click&lt;/a&gt;などのリスナーディレクティブは、リスナーをDOMに登録します。DOMリスナーが起動すると、ディレクティブは関連付けられた式を実行し、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply（）&lt;/a&gt;メソッドを使用してビューを更新します。</target>
        </trans-unit>
        <trans-unit id="cd36de4b8e171b9332630e621a9c668d36e80403" translate="yes" xml:space="preserve">
          <source>Listens on events of a given type. See &lt;a href=&quot;%24rootscope.scope#%24emit.html&quot;&gt;$emit&lt;/a&gt; for discussion of event life cycle.</source>
          <target state="translated">指定されたタイプのイベントをリッスンします。イベントのライフサイクルについては、&lt;a href=&quot;%24rootscope.scope#%24emit.html&quot;&gt;$ emit&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d5f227fbe66da636f154d7a55f6e58ac8bc7df94" translate="yes" xml:space="preserve">
          <source>Load the content of a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element into &lt;a href=&quot;../service/%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;, so that the template can be used by &lt;a href=&quot;nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../../guide/directive&quot;&gt;directives&lt;/a&gt;. The type of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element must be specified as &lt;code&gt;text/ng-template&lt;/code&gt;, and a cache name for the template must be assigned through the element's &lt;code&gt;id&lt;/code&gt;, which can then be used as a directive's &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のコンテンツを&lt;a href=&quot;../service/%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;にロードして、テンプレートを&lt;a href=&quot;nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../../guide/directive&quot;&gt;ディレクティブ&lt;/a&gt;で使用できるようにします。 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のタイプは &lt;code&gt;text/ng-template&lt;/code&gt; として指定する必要があり、テンプレートのキャッシュ名は要素の &lt;code&gt;id&lt;/code&gt; を通じて割り当てる必要があります。これは、ディレクティブの &lt;code&gt;templateUrl&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="d2682f5818fdf3a2c34a3d670292ba36031d8c26" translate="yes" xml:space="preserve">
          <source>Load the content of a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element into &lt;a href=&quot;service/%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;, so that the template can be used by &lt;a href=&quot;directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../guide/directive&quot;&gt;directives&lt;/a&gt;. The type of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element must be specified as &lt;code&gt;text/ng-template&lt;/code&gt;, and a cache name for the template must be assigned through the element's &lt;code&gt;id&lt;/code&gt;, which can then be used as a directive's &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のコンテンツを&lt;a href=&quot;service/%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;にロードして、テンプレートを&lt;a href=&quot;directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../guide/directive&quot;&gt;ディレクティブ&lt;/a&gt;で使用できるようにします。 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のタイプは &lt;code&gt;text/ng-template&lt;/code&gt; として指定する必要があり、テンプレートのキャッシュ名は要素の &lt;code&gt;id&lt;/code&gt; を通じて割り当てる必要があります。これは、ディレクティブの &lt;code&gt;templateUrl&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="386bb84f82a8ccd818e6513db565d7414d459020" translate="yes" xml:space="preserve">
          <source>Loading &amp;hellip;</source>
          <target state="translated">読み込み中&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="92daf596f9c7373f5742e7adea3239594ef098ac" translate="yes" xml:space="preserve">
          <source>Local Storage and session: &lt;a href=&quot;https://github.com/gsklee/ngStorage&quot;&gt;ngStorage&lt;/a&gt;</source>
          <target state="translated">ローカルストレージとセッション：&lt;a href=&quot;https://github.com/gsklee/ngStorage&quot;&gt;ngStorage&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f197bc8d0c1a5832b3ddd1cbb680e16792aa794b" translate="yes" xml:space="preserve">
          <source>Local variables object, useful for overriding values in scope.</source>
          <target state="translated">スコープ内の値をオーバーライドするのに便利なローカル変数オブジェクト。</target>
        </trans-unit>
        <trans-unit id="9e2b5c22af01ee07caf3e1b6e0e50b119b72a276" translate="yes" xml:space="preserve">
          <source>Localizable pluralization is supported via the &lt;a href=&quot;../api/ng/directive/ngpluralize&quot;&gt;&lt;code&gt;ngPluralize&lt;/code&gt; directive&lt;/a&gt;. Additionally, you can use &lt;a href=&quot;i18n#messageformat-extensions.html&quot;&gt;MessageFormat extensions&lt;/a&gt; to &lt;code&gt;$interpolate&lt;/code&gt; for localizable pluralization and gender support in all interpolations via the &lt;code&gt;ngMessageFormat&lt;/code&gt; module.</source>
          <target state="translated">ローカライズ可能な複数化は、&lt;a href=&quot;../api/ng/directive/ngpluralize&quot;&gt; &lt;code&gt;ngPluralize&lt;/code&gt; ディレクティブ&lt;/a&gt;を介してサポートされます。さらに、 &lt;code&gt;ngMessageFormat&lt;/code&gt; モジュールを介して、すべての補間でローカライズ可能な複数化と性別サポートのために &lt;code&gt;$interpolate&lt;/code&gt; への&lt;a href=&quot;i18n#messageformat-extensions.html&quot;&gt;MessageFormat拡張&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="3c38c9e8280edd6b4b9e66ce981d790b329a5986" translate="yes" xml:space="preserve">
          <source>Logically the rendering of &lt;code&gt;{{greeting}}&lt;/code&gt; involves:</source>
          <target state="translated">論理的には、 &lt;code&gt;{{greeting}}&lt;/code&gt; のレンダリングには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="88c1ecf02babeb5ad2e55e9263728fa80f7464a9" translate="yes" xml:space="preserve">
          <source>Looking at &lt;code&gt;index.html&lt;/code&gt;, the first &lt;code&gt;&amp;lt;my-customer&amp;gt;&lt;/code&gt; element binds the &lt;code&gt;info&lt;/code&gt; attribute to &lt;code&gt;naomi&lt;/code&gt;, which we have exposed on our controller's scope. The second binds &lt;code&gt;info&lt;/code&gt; to &lt;code&gt;igor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; を見ると、最初の &lt;code&gt;&amp;lt;my-customer&amp;gt;&lt;/code&gt; 要素が &lt;code&gt;info&lt;/code&gt; 属性を &lt;code&gt;naomi&lt;/code&gt; にバインドしています。これは、コントローラーのスコープで公開しています。2番目は &lt;code&gt;info&lt;/code&gt; を &lt;code&gt;igor&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="e62713f092f6126d14c257b1a2ea3e1321cd8698" translate="yes" xml:space="preserve">
          <source>Looking back at &lt;code&gt;myPane&lt;/code&gt;'s definition, notice the last argument in its &lt;code&gt;link&lt;/code&gt; function: &lt;code&gt;tabsCtrl&lt;/code&gt;. When a directive requires a controller, it receives that controller as the fourth argument of its &lt;code&gt;link&lt;/code&gt; function. Taking advantage of this, &lt;code&gt;myPane&lt;/code&gt; can call the &lt;code&gt;addPane&lt;/code&gt; function of &lt;code&gt;myTabs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;myPane&lt;/code&gt; の定義を振り返ると、 &lt;code&gt;link&lt;/code&gt; 関数の最後の引数 &lt;code&gt;tabsCtrl&lt;/code&gt; に注目してください。ディレクティブがコントローラーを必要とする場合、そのコントローラーは &lt;code&gt;link&lt;/code&gt; 関数の4番目の引数としてそのコントローラーを受け取ります。このことの利点を生かし、 &lt;code&gt;myPane&lt;/code&gt; を呼び出すことができ &lt;code&gt;addPane&lt;/code&gt; の機能 &lt;code&gt;myTabs&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="84817f41d25fc5b19c9eb66508717663ce503692" translate="yes" xml:space="preserve">
          <source>MVC components in angular:</source>
          <target state="translated">アングラーのMVCコンポーネント。</target>
        </trans-unit>
        <trans-unit id="c4c061d266032ace287629ddef3b630f9da95456" translate="yes" xml:space="preserve">
          <source>Mailing List</source>
          <target state="translated">メーリングリスト</target>
        </trans-unit>
        <trans-unit id="2aed1946399b485ebf0139306da8f10efbf28a7d" translate="yes" xml:space="preserve">
          <source>Maintains synchronization between itself and the browser's URL when the user</source>
          <target state="translated">ユーザーが</target>
        </trans-unit>
        <trans-unit id="f4e937da2bde1d6d0cfc0d02a86baa0ee73041b8" translate="yes" xml:space="preserve">
          <source>Make sure to trigger the &lt;code&gt;doneFunction&lt;/code&gt; once the animation is fully complete.</source>
          <target state="translated">アニメーションが完全に完了したら、必ず &lt;code&gt;doneFunction&lt;/code&gt; をトリガーしてください。</target>
        </trans-unit>
        <trans-unit id="85f50f3c3504cad9a5153e8c3e0188d355cdd4c4" translate="yes" xml:space="preserve">
          <source>Manage the life-cycle of other components (for example, to create service instances).</source>
          <target state="translated">他のコンポーネントのライフサイクルを管理する(例えば、サービスインスタンスを作成する)。</target>
        </trans-unit>
        <trans-unit id="1849bd470e0a02c13c2a2ddb02f3758c9affbd6a" translate="yes" xml:space="preserve">
          <source>Manipulate DOM &amp;mdash; Controllers should contain only business logic. Putting any presentation logic into Controllers significantly affects its testability. AngularJS has &lt;a href=&quot;databinding&quot;&gt;databinding&lt;/a&gt; for most cases and &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt; to encapsulate manual DOM manipulation.</source>
          <target state="translated">DOMの操作&amp;mdash;コントローラーにはビジネスロジックのみを含める必要があります。プレゼンテーションロジックをコントローラーに配置すると、そのテスト容易性に大きく影響します。AngularJSには、ほとんどの場合の&lt;a href=&quot;databinding&quot;&gt;データバインディングと&lt;/a&gt;、手動DOM操作をカプセル化する&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="9af5b7cc102e62cfc978a4d85d9c90ff03b0df28" translate="yes" xml:space="preserve">
          <source>Manual Initialization</source>
          <target state="translated">手動での初期化</target>
        </trans-unit>
        <trans-unit id="90f5e60e65fca1294553bf2cd139697a3ef29d83" translate="yes" xml:space="preserve">
          <source>Map of service factory which need to be provided for the current scope. Defaults to &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;&lt;code&gt;ng&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のスコープに提供する必要があるサービスファクトリのマップ。デフォルトは&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt; &lt;code&gt;ng&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ccbcbed9e1a75b205a840a23be21449dd188c578" translate="yes" xml:space="preserve">
          <source>Map of service factory which need to be provided for the current scope. Defaults to &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;&lt;code&gt;ng&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のスコープに提供する必要があるサービスファクトリのマップ。デフォルトは&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt; &lt;code&gt;ng&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5269958ad384de42d0b63bacb9f5157d606dc742" translate="yes" xml:space="preserve">
          <source>Mapping information to be assigned to &lt;code&gt;$route.current&lt;/code&gt; on route match.</source>
          <target state="translated">ルート一致時に &lt;code&gt;$route.current&lt;/code&gt; に割り当てられるマッピング情報。</target>
        </trans-unit>
        <trans-unit id="da3d8cef85e180466f01ff233815f53e0dd3ef41" translate="yes" xml:space="preserve">
          <source>Mapping information to be assigned to &lt;code&gt;$route.current&lt;/code&gt;. If called with a string, the value maps to &lt;code&gt;redirectTo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$route.current&lt;/code&gt; 割り当てられるマッピング情報。文字列で呼び出された場合、値は &lt;code&gt;redirectTo&lt;/code&gt; にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="44a921d79f06891bfc2ef6533b9ad081d31ae1c1" translate="yes" xml:space="preserve">
          <source>Matching Directives</source>
          <target state="translated">マッチングディレクティブ</target>
        </trans-unit>
        <trans-unit id="3e5d7daf956c2a40411ad8f2caaffa9353d8e9cb" translate="yes" xml:space="preserve">
          <source>Matching model and option values</source>
          <target state="translated">モデルとオプション値のマッチング</target>
        </trans-unit>
        <trans-unit id="ce55e08fd61078003560d3df48ca614d3ef433a6" translate="yes" xml:space="preserve">
          <source>Matching route requests</source>
          <target state="translated">ルートリクエストのマッチング</target>
        </trans-unit>
        <trans-unit id="a5beb361a1706e9b51cb40edde5a3ab468f07e34" translate="yes" xml:space="preserve">
          <source>Message order</source>
          <target state="translated">メッセージの順序</target>
        </trans-unit>
        <trans-unit id="9344efa286fd5e9da95be089754f4d314f0c308d" translate="yes" xml:space="preserve">
          <source>MessageFormat extensions</source>
          <target state="translated">メッセージフォーマット拡張機能</target>
        </trans-unit>
        <trans-unit id="f1702b4686278becffc88baabe6f4b7a8355532c" translate="yes" xml:space="preserve">
          <source>Messages</source>
          <target state="translated">Messages</target>
        </trans-unit>
        <trans-unit id="218cc71b2cafc9fcbd7fceeec963d55a35fec45c" translate="yes" xml:space="preserve">
          <source>Messages immediately follow a selection keyword and are optionally preceded by whitespace. They are written in single curly braces (&lt;code&gt;{}&lt;/code&gt;). They may contain AngularJS interpolation syntax inside them.</source>
          <target state="translated">メッセージは選択キーワードの直後に続き、オプションで空白を前に付けることができます。それらは単一の中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で書かれています。それらの中にAngularJS補間構文が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="22617e3b4156662ce4d8bd4830be681f85178aee" translate="yes" xml:space="preserve">
          <source>Messages immediately follow a selection keyword and are optionally preceded by whitespace. They are written in single curly braces (&lt;code&gt;{}&lt;/code&gt;). They may contain AngularJS interpolation syntax inside them. In addition, the &lt;code&gt;#&lt;/code&gt; symbol is a placeholder for the actual numeric value of the expression.</source>
          <target state="translated">メッセージは選択キーワードの直後に続き、オプションで空白を前に付けることができます。それらは単一の中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で書かれています。それらの中にAngularJS補間構文が含まれている場合があります。さらに、 &lt;code&gt;#&lt;/code&gt; 記号は、式の実際の数値のプレースホルダーです。</target>
        </trans-unit>
        <trans-unit id="4360339f6ba188dfc1f3a475e862ec2c0d68ad84" translate="yes" xml:space="preserve">
          <source>Method for serializing common AngularJS objects (scope, elements, etc..) into strings. It is useful for logging objects to the console when debugging.</source>
          <target state="translated">一般的なAngularJSオブジェクト(スコープ、エレメントなど)を文字列にシリアライズするメソッド。デバッグ時にオブジェクトをコンソールにロギングするのに便利です。</target>
        </trans-unit>
        <trans-unit id="43639e3b7d3b45a703fcba77c83b24edff6ec4cf" translate="yes" xml:space="preserve">
          <source>Method's `this`</source>
          <target state="translated">メソッドの `this` の</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="b1d702459399a2512fba5a402d4d5f26aee34693" translate="yes" xml:space="preserve">
          <source>Mobile</source>
          <target state="translated">Mobile</target>
        </trans-unit>
        <trans-unit id="d724e7ec1e548df829cecc5ca677f6410b0ee24d" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; that rethrows or logs errors passed to it. See &lt;a href=&quot;../provider/%24exceptionhandlerprovider&quot;&gt;$exceptionHandlerProvider&lt;/a&gt; for configuration information.</source>
          <target state="translated">渡されたエラーを再スローまたはログに記録する&lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装。構成情報については、&lt;a href=&quot;../provider/%24exceptionhandlerprovider&quot;&gt;$ exceptionHandlerProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="95690efafa1aec8a5967e5ca97f434409e9cbdee" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../../ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as &lt;code&gt;logs&lt;/code&gt; property of each of the level-specific log function, e.g. for level &lt;code&gt;error&lt;/code&gt; the array is exposed as &lt;code&gt;$log.error.logs&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;記録されたすべてのメッセージを配列に収集する$ logのモック実装（ログレベルごとに1つの配列）。これらの配列は、レベル固有の各ログ関数の &lt;code&gt;logs&lt;/code&gt; プロパティとして公開されます。たとえば、レベル &lt;code&gt;error&lt;/code&gt; 、配列は &lt;code&gt;$log.error.logs&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="c792a9824ded906f50da531e1c45870b67a1a1f1" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; that rethrows or logs errors passed to it. See &lt;a href=&quot;provider/%24exceptionhandlerprovider&quot;&gt;$exceptionHandlerProvider&lt;/a&gt; for configuration information.</source>
          <target state="translated">渡されたエラーを再スローまたはログに記録する&lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装。構成情報については、&lt;a href=&quot;provider/%24exceptionhandlerprovider&quot;&gt;$ exceptionHandlerProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="68cd4a92c7e27b6bb0d8d5d52580a952d3a23598" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as &lt;code&gt;logs&lt;/code&gt; property of each of the level-specific log function, e.g. for level &lt;code&gt;error&lt;/code&gt; the array is exposed as &lt;code&gt;$log.error.logs&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;記録されたすべてのメッセージを配列に収集する$ logのモック実装（ログレベルごとに1つの配列）。これらの配列は、レベル固有の各ログ関数の &lt;code&gt;logs&lt;/code&gt; プロパティとして公開されます。たとえば、レベル &lt;code&gt;error&lt;/code&gt; 、配列は &lt;code&gt;$log.error.logs&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="752de6efdd11fb76bababaaf2aeeed8daf63a62a" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; that rethrows or logs errors passed to it. See &lt;a href=&quot;ngmock/provider/%24exceptionhandlerprovider&quot;&gt;$exceptionHandlerProvider&lt;/a&gt; for configuration information.</source>
          <target state="translated">渡されたエラーを再スローまたはログに記録する&lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装。構成情報については、&lt;a href=&quot;ngmock/provider/%24exceptionhandlerprovider&quot;&gt;$ exceptionHandlerProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6663abd0c82d9922ac001aab44db50268d035bb7" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as &lt;code&gt;logs&lt;/code&gt; property of each of the level-specific log function, e.g. for level &lt;code&gt;error&lt;/code&gt; the array is exposed as &lt;code&gt;$log.error.logs&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;記録されたすべてのメッセージを配列に収集する$ logのモック実装（ログレベルごとに1つの配列）。これらの配列は、レベル固有の各ログ関数の &lt;code&gt;logs&lt;/code&gt; プロパティとして公開されます。たとえば、レベル &lt;code&gt;error&lt;/code&gt; 、配列は &lt;code&gt;$log.error.logs&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="9a4f99f800b8c2a3c8606af42b64ef2f40a52496" translate="yes" xml:space="preserve">
          <source>Mock implementation of the $interval service.</source>
          <target state="translated">インターバルサービスのモック実装。</target>
        </trans-unit>
        <trans-unit id="17e556de84f8d6be56cb0a460b4ed4cfe2347048" translate="yes" xml:space="preserve">
          <source>Mock implementation of the &lt;a href=&quot;../../ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt; service. Exposes two additional methods for testing animations.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;サービスのモック実装。アニメーションをテストするための2つの追加メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="a5cb86aae12fa34c71428443e8ea53d839ee3299" translate="yes" xml:space="preserve">
          <source>Mock implementation of the &lt;a href=&quot;../ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt; service. Exposes two additional methods for testing animations.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;サービスのモック実装。アニメーションをテストするための2つの追加メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="50e36573f2e41d3b17e543c2e8cd625f0cb46dd2" translate="yes" xml:space="preserve">
          <source>Mock implementation of the &lt;a href=&quot;ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt; service. Exposes two additional methods for testing animations.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;サービスのモック実装。アニメーションをテストするための2つの追加メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="2283a4fa911cb4d414dca0de238334e1c9113cf1" translate="yes" xml:space="preserve">
          <source>Mock of the Date type which has its timezone specified via constructor arg.</source>
          <target state="translated">コンストラクタ arg でタイムゾーンを指定した Date 型のモック。</target>
        </trans-unit>
        <trans-unit id="2103a63a9856b3815fb037adeec81b1f3b88e8c7" translate="yes" xml:space="preserve">
          <source>Mode of operation, defaults to &lt;code&gt;rethrow&lt;/code&gt;.</source>
          <target state="translated">動作モード。デフォルトは &lt;code&gt;rethrow&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="d10c1d6ff062accb0017a7a34ed190f79cc9dc67" translate="yes" xml:space="preserve">
          <source>Model &amp;mdash; Models are the properties of a scope; scopes are attached to the DOM where scope properties are accessed through bindings.</source>
          <target state="translated">モデル&amp;mdash;モデルはスコープのプロパティです。スコープは、バインディングを通じてスコーププロパティにアクセスするDOMにアタッチされます。</target>
        </trans-unit>
        <trans-unit id="a0babb0f360230e95d42d97a77bd9a2ca869ead1" translate="yes" xml:space="preserve">
          <source>Model updates and validation</source>
          <target state="translated">モデルの更新と検証</target>
        </trans-unit>
        <trans-unit id="11d8a9f1a171b04d6657a278d94d71665b02f7f3" translate="yes" xml:space="preserve">
          <source>ModelOptions</source>
          <target state="translated">ModelOptions</target>
        </trans-unit>
        <trans-unit id="45054a7aa80d7c8287ad5c465dc0e7de6ba32a41" translate="yes" xml:space="preserve">
          <source>Modern browser will rewrite hashbang URLs to regular URLs.</source>
          <target state="translated">最近のブラウザはハッシュバングのURLを通常のURLに書き換えます。</target>
        </trans-unit>
        <trans-unit id="820d0a285c630d7723527339445562c6186a70c3" translate="yes" xml:space="preserve">
          <source>Modifies the default behavior of the html a tag so that the default action is prevented when the href attribute is empty.</source>
          <target state="translated">href属性が空の場合にデフォルトの動作が行われないように、html aタグのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="60affe2a59dff1baf449afaa8e69c15e4a1a2bd0" translate="yes" xml:space="preserve">
          <source>Modifying built-in validators</source>
          <target state="translated">組み込みバリデータの変更</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="b4e47c4a8861a9aac47d0d5b25ff49b2077eaa5b" translate="yes" xml:space="preserve">
          <source>Module Components</source>
          <target state="translated">モジュールコンポーネント</target>
        </trans-unit>
        <trans-unit id="d81b6c3fe7d7f3ded3174d2cd156b032d228112b" translate="yes" xml:space="preserve">
          <source>Module Loading</source>
          <target state="translated">モジュールの読み込み</target>
        </trans-unit>
        <trans-unit id="b3c0d8ccd032afe728bc7677d8f1b82146252c2e" translate="yes" xml:space="preserve">
          <source>Module Methods</source>
          <target state="translated">モジュールメソッド</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="f5676031d7eb7334f1e212a85e0629bf21c4a263" translate="yes" xml:space="preserve">
          <source>Modules are a way of managing $injector configuration, and have nothing to do with loading of scripts into a VM. There are existing projects which deal with script loading, which may be used with AngularJS. Because modules do nothing at load time they can be loaded into the VM in any order and thus script loaders can take advantage of this property and parallelize the loading process.</source>
          <target state="translated">モジュールは$injectorの設定を管理する方法であり、VMへのスクリプトのロードとは何の関係もありません。スクリプトのロードを扱う既存のプロジェクトがあり、AngularJSと一緒に使うことができます。モジュールはロード時には何もしないので、任意の順番でVMにロードすることができ、スクリプトローダーはこの特性を利用してロードプロセスを並列化することができます。</target>
        </trans-unit>
        <trans-unit id="ddf8a006e80c713702e5a7c272966dd2af4a2f36" translate="yes" xml:space="preserve">
          <source>Modules can list other modules as their dependencies. Depending on a module implies that the required module will be loaded before the requiring module is loaded.</source>
          <target state="translated">モジュールは、他のモジュールを依存関係としてリストアップすることができます。モジュールに依存するということは、必要なモジュールがロードされる前に、 必要なモジュールがロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="c5c5ac536e9458ce6b1c893d8a9eed0ef866164a" translate="yes" xml:space="preserve">
          <source>Modules cannot be unloaded.</source>
          <target state="translated">モジュールのアンロードはできません。</target>
        </trans-unit>
        <trans-unit id="d3eef75b2abb3353ef96fa4c958b29a3b973ad79" translate="yes" xml:space="preserve">
          <source>More Advanced Uses</source>
          <target state="translated">より高度な用途</target>
        </trans-unit>
        <trans-unit id="418d11009885a828d7747f211903e923c55650a8" translate="yes" xml:space="preserve">
          <source>More Topics</source>
          <target state="translated">その他のトピック</target>
        </trans-unit>
        <trans-unit id="9e1aceda0913803b7af1cbac40b818d7b4e0a493" translate="yes" xml:space="preserve">
          <source>More about animations</source>
          <target state="translated">アニメーションの詳細</target>
        </trans-unit>
        <trans-unit id="ff1c8d0ffd1a8365adbfecdf5260da4ce1225fe0" translate="yes" xml:space="preserve">
          <source>More information about using &lt;code&gt;ngMessage&lt;/code&gt; can be found in the &lt;a href=&quot;../../ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt; module documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngMessage&lt;/code&gt; の使用に関する詳細は、&lt;a href=&quot;../../ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; モジュールのドキュメントに記載&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="6b67e8753649b7d6d8714798e1353c9a36bc83e4" translate="yes" xml:space="preserve">
          <source>More information about using &lt;code&gt;ngMessageDefault&lt;/code&gt; can be found in the &lt;a href=&quot;../../ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt; module documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngMessageDefault&lt;/code&gt; の使用の詳細については、&lt;a href=&quot;../../ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; モジュールのドキュメントを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86538f30d68e13efb3ce4ea2e7bb61bbd3bdb2ef" translate="yes" xml:space="preserve">
          <source>More specifically, it follows these steps to determine the relative order of items:</source>
          <target state="translated">より具体的には、以下の手順に従って、項目の相対的な順序を決定する。</target>
        </trans-unit>
        <trans-unit id="7d5c68a394c71124c6fcf54230d4eeb10dd1d33a" translate="yes" xml:space="preserve">
          <source>Moreover, additional dependencies are made available to Controllers:</source>
          <target state="translated">さらに、コントローラは追加の依存関係を利用できるようになっています。</target>
        </trans-unit>
        <trans-unit id="712827c0d97b4d3b4a04a5896cfe1915383ddc14" translate="yes" xml:space="preserve">
          <source>Most applications have a main method that instantiates and wires together the different parts of the application.</source>
          <target state="translated">ほとんどのアプリケーションには、アプリケーションのさまざまな部分をインスタンス化して配線するメインメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="51bcbe4ed0c2178dc07e3908a9fd0bee0ee90626" translate="yes" xml:space="preserve">
          <source>Most modern search engines are able to crawl AJAX applications with dynamic content, provided all included resources are available to the crawler bots.</source>
          <target state="translated">ほとんどの最新の検索エンジンは、すべての含まれているリソースがクローラーボットに利用可能であれば、動的なコンテンツを持つAJAXアプリケーションをクロールすることができます。</target>
        </trans-unit>
        <trans-unit id="747ba7435637638bbd15e8ae21703dcf856ff388" translate="yes" xml:space="preserve">
          <source>Most of what ngAria does is only visible &quot;under the hood&quot;. To see the module in action, once you've added it as a dependency, you can test a few things:</source>
          <target state="translated">ngAriaが行うことのほとんどは、&quot;フードの下 &quot;でしか見ることができません。モジュールの動作を見るには、一度依存関係として追加した後、いくつかのことをテストすることができます。</target>
        </trans-unit>
        <trans-unit id="19f501e7075bf76219f10ebfc5ad08e05b72506c" translate="yes" xml:space="preserve">
          <source>Most other templating systems consume a static string template and combine it with data, resulting in a new string. The resulting text is then &lt;code&gt;innerHTML&lt;/code&gt;ed into an element.</source>
          <target state="translated">他のほとんどのテンプレートシステムは、静的な文字列テンプレートを使用し、それをデータと組み合わせて、新しい文字列を生成します。結果のテキストは、 &lt;code&gt;innerHTML&lt;/code&gt; で要素に変換されます。</target>
        </trans-unit>
        <trans-unit id="086508416bb179789c4bccdcedba3ca8939c6c3f" translate="yes" xml:space="preserve">
          <source>Most templating systems bind data in only one direction: they merge template and model components together into a view. After the merge occurs, changes to the model or related sections of the view are NOT automatically reflected in the view. Worse, any changes that the user makes to the view are not reflected in the model. This means that the developer has to write code that constantly syncs the view with the model and the model with the view.</source>
          <target state="translated">ほとんどのテンプレートシステムは、1つの方向にのみデータをバインドします:テンプレートとモデルのコンポーネントをビューにマージします。マージが発生した後、モデルやビューの関連セクションへの変更は自動的にビューに反映されません。さらに悪いことに、ユーザーがビューに加えた変更はモデルに反映されません。これは、開発者がビューとモデル、モデルとビューを常に同期させるコードを書かなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d52bae3c10aff36233610ff3bdec1bf84f987e77" translate="yes" xml:space="preserve">
          <source>Much of ngAria's heavy lifting happens in the &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive. For elements using ngModel, special attention is paid by ngAria if that element also has a role or type of &lt;code&gt;checkbox&lt;/code&gt;, &lt;code&gt;radio&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt; or &lt;code&gt;textbox&lt;/code&gt;.</source>
          <target state="translated">ngAriaの重労働の多くは、&lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;ディレクティブで発生します。ngModelを使用する要素の場合、その要素にも &lt;code&gt;checkbox&lt;/code&gt; 、 &lt;code&gt;radio&lt;/code&gt; 、 &lt;code&gt;range&lt;/code&gt; または &lt;code&gt;textbox&lt;/code&gt; ボックスの役割またはタイプがある場合、ngAriaによって特別な注意が払われます。</target>
        </trans-unit>
        <trans-unit id="41d3f0ba4eb4a4f6a8f2357e3f45a9724879b4b6" translate="yes" xml:space="preserve">
          <source>Much simpler!</source>
          <target state="translated">もっとシンプルに!</target>
        </trans-unit>
        <trans-unit id="8c836dc52529f23f775aa7226aae8e07d35fcd7a" translate="yes" xml:space="preserve">
          <source>Multi-slot transclusion</source>
          <target state="translated">マルチスロットトランスクルージョン</target>
        </trans-unit>
        <trans-unit id="65cb2723f95ca2511451a3da1b3266635717e52a" translate="yes" xml:space="preserve">
          <source>Multiple directives trying to manage the suspended status of a scope can confuse each other:</source>
          <target state="translated">スコープのサスペンドされた状態を管理しようとする複数のディレクティブは、お互いを混乱させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="43ee7b873340c29badb35669536547e420b30242" translate="yes" xml:space="preserve">
          <source>Must be set to &lt;code&gt;'text/ng-template'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'text/ng-template'&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a0509b7780628bd9d9abc7eb8a2163477341053a" translate="yes" xml:space="preserve">
          <source>NO</source>
          <target state="translated">NO</target>
        </trans-unit>
        <trans-unit id="6482d00c26b4ecb8dd78f5db3674319bacb19283" translate="yes" xml:space="preserve">
          <source>NOTE: This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API (i.e. methods &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;). If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">注：このメソッドは、HTML5モードで、HTML5 History APIをサポートするブラウザー（つまり、 &lt;code&gt;pushState&lt;/code&gt; および &lt;code&gt;replaceState&lt;/code&gt; メソッド）でのみサポートされています。古いブラウザ（IE9やAndroid &amp;lt;4.0など）をサポートする必要がある場合は、この方法を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="9407fb27f323515c53fff87ba47269667f06a0ad" translate="yes" xml:space="preserve">
          <source>Name of a constructor function registered with the current &lt;a href=&quot;../provider/%24controllerprovider&quot;&gt;$controllerProvider&lt;/a&gt; or an &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; that on the current scope evaluates to a constructor function.</source>
          <target state="translated">現在の&lt;a href=&quot;../provider/%24controllerprovider&quot;&gt;$ controllerProviderに&lt;/a&gt;登録されているコンストラクター関数の名前、または現在のスコープでコンストラクター関数に評価される&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="06124546cb53397fd0c1fe917a2d06c9730752d5" translate="yes" xml:space="preserve">
          <source>Name of the component in camelCase (i.e. &lt;code&gt;myComp&lt;/code&gt; which will match &lt;code&gt;&amp;lt;my-comp&amp;gt;&lt;/code&gt;), or an object map of components where the keys are the names and the values are the component definition objects.</source>
          <target state="translated">camelCase内のコンポーネントの名前（つまり &lt;code&gt;&amp;lt;my-comp&amp;gt;&lt;/code&gt; と一致する &lt;code&gt;myComp&lt;/code&gt; ）、またはキーが名前で値がコンポーネント定義オブジェクトであるコンポーネントのオブジェクトマップ。</target>
        </trans-unit>
        <trans-unit id="072d5c784d720162e01f22fc1db2129c7f844161" translate="yes" xml:space="preserve">
          <source>Name of the directive in camel-case (i.e. &lt;code&gt;ngBind&lt;/code&gt; which will match as &lt;code&gt;ng-bind&lt;/code&gt;), or an object map of directives where the keys are the names and the values are the factories.</source>
          <target state="translated">キャメルケースのディレクティブの名前（つまり、 &lt;code&gt;ng-bind&lt;/code&gt; として一致する &lt;code&gt;ngBind&lt;/code&gt; ）、またはキーが名前で値がファクトリであるディレクティブのオブジェクトマップ。</target>
        </trans-unit>
        <trans-unit id="e6a914b6fb9551d259b79ae1dbd0cd9ae591131f" translate="yes" xml:space="preserve">
          <source>Name of the filter function to retrieve</source>
          <target state="translated">取得するフィルタ関数の名前</target>
        </trans-unit>
        <trans-unit id="48fe49bedf694afeeba33df340c5f5206f900829" translate="yes" xml:space="preserve">
          <source>Name of the filter function, or an object map of filters where the keys are the filter names and the values are the filter factories.</source>
          <target state="translated">フィルタ関数の名前、またはフィルタのオブジェクトマップで、キーはフィルタ名、値はフィルタ工場です。</target>
        </trans-unit>
        <trans-unit id="548763f0d3866204ba6e7b35db5d3f96ad31cf16" translate="yes" xml:space="preserve">
          <source>Name of the form. If specified, the form controller will be published into related scope, under this name.</source>
          <target state="translated">フォームの名前。指定された場合、フォームコントローラはこの名前で関連スコープに公開されます。</target>
        </trans-unit>
        <trans-unit id="9e53ab7e7738ab49a15d16836113abe4d510b286" translate="yes" xml:space="preserve">
          <source>Name of the form. If specified, the form controller will be published into the related scope, under this name.</source>
          <target state="translated">フォームの名前。指定された場合、フォームコントローラはこの名前で関連スコープに公開されます。</target>
        </trans-unit>
        <trans-unit id="2b0878caaba3e3087d38d9fa863cec474456870b" translate="yes" xml:space="preserve">
          <source>Name of the module.</source>
          <target state="translated">モジュールの名前。</target>
        </trans-unit>
        <trans-unit id="18fd8b70f87ab6b31b561c63ec64d92c5698eb18" translate="yes" xml:space="preserve">
          <source>Name of the service to query.</source>
          <target state="translated">クエリするサービスの名前。</target>
        </trans-unit>
        <trans-unit id="82cb2408f4510676ea3921c7dc32b0ed22111b44" translate="yes" xml:space="preserve">
          <source>Name of the validator. The &lt;code&gt;validationErrorKey&lt;/code&gt; will be assigned to either &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; or &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; (for unfulfilled &lt;code&gt;$asyncValidators&lt;/code&gt;), so that it is available for data-binding. The &lt;code&gt;validationErrorKey&lt;/code&gt; should be in camelCase and will get converted into dash-case for class name. Example: &lt;code&gt;myError&lt;/code&gt; will result in &lt;code&gt;ng-valid-my-error&lt;/code&gt; and &lt;code&gt;ng-invalid-my-error&lt;/code&gt; classes and can be bound to as &lt;code&gt;{{ someForm.$error.myError }}&lt;/code&gt;.</source>
          <target state="translated">バリデーターの名前。 &lt;code&gt;validationErrorKey&lt;/code&gt; のいずれかに割り当てられる &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; または &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; （満たされていないため &lt;code&gt;$asyncValidators&lt;/code&gt; ）ので、データバインディングのために利用可能であること。 &lt;code&gt;validationErrorKey&lt;/code&gt; はキャメルケースであるべきとクラス名のダッシュケースに変換されます。例： &lt;code&gt;myError&lt;/code&gt; は &lt;code&gt;ng-valid-my-error&lt;/code&gt; および &lt;code&gt;ng-invalid-my-error&lt;/code&gt; クラスを &lt;code&gt;{{ someForm.$error.myError }}&lt;/code&gt; 、{{someForm。$ error.myError}}としてバインドできます。</target>
        </trans-unit>
        <trans-unit id="85289b1ba972a7f24ee7623acf7573ae60b50a4a" translate="yes" xml:space="preserve">
          <source>Name of the validator. The &lt;code&gt;validationErrorKey&lt;/code&gt; will be assigned to either &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; or &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; (for unfulfilled &lt;code&gt;$asyncValidators&lt;/code&gt;), so that it is available for data-binding. The &lt;code&gt;validationErrorKey&lt;/code&gt; should be in camelCase and will get converted into dash-case for class name. Example: &lt;code&gt;myError&lt;/code&gt; will result in &lt;code&gt;ng-valid-my-error&lt;/code&gt; and &lt;code&gt;ng-invalid-my-error&lt;/code&gt; classes and can be bound to as &lt;code&gt;{{ someForm.someControl.$error.myError }}&lt;/code&gt;.</source>
          <target state="translated">バリデーターの名前。 &lt;code&gt;validationErrorKey&lt;/code&gt; のいずれかに割り当てられる &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; または &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; （満たされていないため &lt;code&gt;$asyncValidators&lt;/code&gt; ）ので、データバインディングのために利用可能であること。 &lt;code&gt;validationErrorKey&lt;/code&gt; はキャメルケースであるべきとクラス名のダッシュケースに変換されます。例： &lt;code&gt;myError&lt;/code&gt; は &lt;code&gt;ng-valid-my-error&lt;/code&gt; および &lt;code&gt;ng-invalid-my-error&lt;/code&gt; クラスを &lt;code&gt;{{ someForm.someControl.$error.myError }}&lt;/code&gt; 、{{someForm.someControl。$ error.myError}}としてバインドできます。</target>
        </trans-unit>
        <trans-unit id="c6dadcd7b87a8d68370b138a9b117a7ab56bec1f" translate="yes" xml:space="preserve">
          <source>Name or id of a cache to access.</source>
          <target state="translated">アクセスするキャッシュの名前または ID。</target>
        </trans-unit>
        <trans-unit id="1cc839cd419511980445e1dd8371a817f1b64734" translate="yes" xml:space="preserve">
          <source>Name or id of the newly created cache.</source>
          <target state="translated">新しく作成されたキャッシュの名前または ID。</target>
        </trans-unit>
        <trans-unit id="0de929bec5077041e37d818b7a7097719fecd549" translate="yes" xml:space="preserve">
          <source>Name to normalize</source>
          <target state="translated">正規化する名前</target>
        </trans-unit>
        <trans-unit id="07487ab347f8a5946bbf4a7ce75a38afca586f21" translate="yes" xml:space="preserve">
          <source>Namespace from 'angular-mocks.js' which contains testing related code.</source>
          <target state="translated">テスト関連のコードを含む'angular-mocks.js'の名前空間。</target>
        </trans-unit>
        <trans-unit id="34956fb712b5af5e64b1d1e8c8bcaf652008c2f6" translate="yes" xml:space="preserve">
          <source>Native range input with validation and transformation.</source>
          <target state="translated">検証および変換機能を備えたネイティブな範囲入力。</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="309c7dfccaca7701bd78f84e8b381d4d0275d9db" translate="yes" xml:space="preserve">
          <source>New URL</source>
          <target state="translated">新しいURL</target>
        </trans-unit>
        <trans-unit id="a014f3cd7850f6e9c71c46467e552b11d3de79a6" translate="yes" xml:space="preserve">
          <source>New URL without base prefix (e.g. &lt;code&gt;/path?a=b#hash&lt;/code&gt;)</source>
          <target state="translated">ベースプレフィックスのない新しいURL（例 &lt;code&gt;/path?a=b#hash&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6165acb81f2917de772cffb70b019703cffc138d" translate="yes" xml:space="preserve">
          <source>New hash fragment</source>
          <target state="translated">新しいハッシュフラグメント</target>
        </trans-unit>
        <trans-unit id="5a73ca3fba6bb247c517d68e0cd4de0f73708ffb" translate="yes" xml:space="preserve">
          <source>New history state object</source>
          <target state="translated">新しい歴史状態のオブジェクト</target>
        </trans-unit>
        <trans-unit id="1523c8acdb2ee4d7786ae768261d0c785a7a6dd4" translate="yes" xml:space="preserve">
          <source>New path</source>
          <target state="translated">新しいパス</target>
        </trans-unit>
        <trans-unit id="8db704d10996287f306c82d9804ae000900aa1c3" translate="yes" xml:space="preserve">
          <source>New regexp to trust urls with.</source>
          <target state="translated">新しい正規表現を使ってURLを信頼できるようにしました。</target>
        </trans-unit>
        <trans-unit id="20f8323c20517bd9bedeb523464666a743f37eca" translate="yes" xml:space="preserve">
          <source>New regexp to whitelist urls with.</source>
          <target state="translated">新しい正規表現を使用して、URLをホワイトリスト化するようにしました。</target>
        </trans-unit>
        <trans-unit id="dad34ec1ee8bacd2e9041cd0903b5c9069ff92f6" translate="yes" xml:space="preserve">
          <source>New search params - string or hash object.</source>
          <target state="translated">新しい検索パラメータ-文字列またはハッシュオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b804c31a8623f2816dbf7f69ecf28929e801a795" translate="yes" xml:space="preserve">
          <source>Newly created cache object with the following set of methods:</source>
          <target state="translated">以下のメソッドのセットを持つ新規に作成されたキャッシュオブジェクト。</target>
        </trans-unit>
        <trans-unit id="329a1c91ff3f72a700f6b29e306ae7d1fe09310b" translate="yes" xml:space="preserve">
          <source>Newly created scope.</source>
          <target state="translated">新たに作成されたスコープ。</target>
        </trans-unit>
        <trans-unit id="61456090d5fe7bf739399fed88265d12f9613af2" translate="yes" xml:space="preserve">
          <source>Next, we want to add buttons to this dialog box, and allow someone using the directive to bind their own behavior to it.</source>
          <target state="translated">次に、このダイアログボックスにボタンを追加して、ディレクティブを使っている人が自分の振る舞いをここにバインドできるようにしたいと思います。</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="c4d55e8a99a370ad4de49aff15c4c44511823de9" translate="yes" xml:space="preserve">
          <source>No (restricted to elements only)</source>
          <target state="translated">なし(要素のみに限定</target>
        </trans-unit>
        <trans-unit id="109595eb5dc1869fbf21a971f7aa0f381c49f943" translate="yes" xml:space="preserve">
          <source>No (scope is always isolate)</source>
          <target state="translated">いいえ (スコープは常に分離されています)</target>
        </trans-unit>
        <trans-unit id="2f486ce8e2e4c561b4a09d4b910696530061716a" translate="yes" xml:space="preserve">
          <source>No (use bindings instead)</source>
          <target state="translated">いいえ(代わりにバインディングを使用してください</target>
        </trans-unit>
        <trans-unit id="680a8d06076faf3861dc12dd6c01bc3981abc532" translate="yes" xml:space="preserve">
          <source>No Control Flow Statements</source>
          <target state="translated">制御フロー文なし</target>
        </trans-unit>
        <trans-unit id="62ba91f2c31ef5c4a122749bdddf7004b57597ab" translate="yes" xml:space="preserve">
          <source>No conversion; the object itself is used.</source>
          <target state="translated">変換はせず、オブジェクト自体を使用します。</target>
        </trans-unit>
        <trans-unit id="b477c2fb0db2220aabe25a86981bcf26c5b788ac" translate="yes" xml:space="preserve">
          <source>No declaration means that AngularJS will assume that you can do inline styles, but it will do a runtime check for unsafe-eval. E.g. &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. This is backwardly compatible with previous versions of AngularJS.</source>
          <target state="translated">宣言がないことは、AngularJSがインラインスタイルを実行できると想定することを意味しますが、unsafe-evalのランタイムチェックを実行します。例： &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 。これは、AngularJSの以前のバージョンとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="6eb8bd5e680e864c50300934b57de696d6282a04" translate="yes" xml:space="preserve">
          <source>No function declarations or RegExp creation with literal notation</source>
          <target state="translated">リテラル表記での関数宣言やRegExpの作成ができない</target>
        </trans-unit>
        <trans-unit id="3ddeaa27a6c6629f743c53a762ac439d7628c772" translate="yes" xml:space="preserve">
          <source>Non-immediate (debounced) model updates</source>
          <target state="translated">非即効性のある(デバウンスされた)モデルの更新</target>
        </trans-unit>
        <trans-unit id="b8c54e5e1e867a54e9d75697c450f4be835f910e" translate="yes" xml:space="preserve">
          <source>Normalization</source>
          <target state="translated">Normalization</target>
        </trans-unit>
        <trans-unit id="0538f85d0c3c3f8fa12699be15d0d496f65654b6" translate="yes" xml:space="preserve">
          <source>Normalized element attribute name of the property to modify. The name is reverse-translated using the &lt;a href=&quot;%24compile.directive.attributes#%24attr.html&quot;&gt;$attr&lt;/a&gt; property to the original name.</source>
          <target state="translated">変更するプロパティの正規化された要素属性名。この名前は、&lt;a href=&quot;%24compile.directive.attributes#%24attr.html&quot;&gt;$ attr&lt;/a&gt;プロパティを使用して元の名前に逆変換されます。</target>
        </trans-unit>
        <trans-unit id="42edd323f35213654eaf5568a5b6ad2beea08650" translate="yes" xml:space="preserve">
          <source>Normalized key. (ie ngAttribute) .</source>
          <target state="translated">正規化されたキー。(すなわち ngAttribute).</target>
        </trans-unit>
        <trans-unit id="ed68fc07c0bcd36453eb89a7b1304551a073ed7f" translate="yes" xml:space="preserve">
          <source>Note also that component directives, which are created with the &lt;a href=&quot;../api/ng/type/angular.module#component.html&quot;&gt;.component()&lt;/a&gt; helper always create an isolate scope.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#component.html&quot;&gt;.component（）&lt;/a&gt;ヘルパーで作成されたコンポーネントディレクティブは常に分離スコープを作成することにも注意してください。</target>
        </trans-unit>
        <trans-unit id="8aa993a00ba6dab2bd4ba7c5837f5d462e2f62de" translate="yes" xml:space="preserve">
          <source>Note however that the &lt;code&gt;$animate.enabled()&lt;/code&gt; state for individual elements does not overwrite disabling rules that have been set in the &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;classNameFilter&lt;/a&gt;.</source>
          <target state="translated">ただし、個々の要素の &lt;code&gt;$animate.enabled()&lt;/code&gt; 状態は、&lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;classNameFilterで&lt;/a&gt;設定された無効化ルールを上書きしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5ee9f05a205194a145267c81de693fc4c5f07a17" translate="yes" xml:space="preserve">
          <source>Note in the example above how we can pass in &lt;code&gt;$event&lt;/code&gt; to &lt;code&gt;clickMe&lt;/code&gt;, but how it does not show up in &lt;code&gt;{{$event}}&lt;/code&gt;. This is because &lt;code&gt;$event&lt;/code&gt; is outside the scope of that binding.</source>
          <target state="translated">上記の例では、 &lt;code&gt;$event&lt;/code&gt; を &lt;code&gt;clickMe&lt;/code&gt; に渡す方法に注意してください。ただし、 &lt;code&gt;{{$event}}&lt;/code&gt; は表示されません。これは、 &lt;code&gt;$event&lt;/code&gt; がそのバインディングのスコープ外にあるためです。</target>
        </trans-unit>
        <trans-unit id="cb458ac4c395d1b568721519300e24a944cc46d1" translate="yes" xml:space="preserve">
          <source>Note that &quot;=1&quot; takes precedence over &quot;one&quot;.</source>
          <target state="translated">1」よりも「=1」が優先されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="434bc4aa7a04baed5fd5937b7268a8d770b70508" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;directive#normalization.html&quot;&gt;attribute name normalization&lt;/a&gt; does not apply here, so &lt;code&gt;'internalLink'&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; match &lt;code&gt;'internal-link'&lt;/code&gt;.</source>
          <target state="translated">注ことを&lt;a href=&quot;directive#normalization.html&quot;&gt;属性名の正規化は、&lt;/a&gt;ここでは適用されませんので、 &lt;code&gt;'internalLink'&lt;/code&gt; う&lt;strong&gt;ではない&lt;/strong&gt;一致 &lt;code&gt;'internal-link'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a1a58c3fbcaa18d57812a2d20a3557e11472cb2" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt;&lt;code&gt;ngAnimateSwap&lt;/code&gt;&lt;/a&gt; is a &lt;em&gt;structural directive&lt;/em&gt;, which means it creates a new instance of the element (including any other/child directives it may have) and links it to a new scope every time &lt;em&gt;swap&lt;/em&gt; happens. In some cases this might not be desirable (e.g. for performance reasons, or when you wish to retain internal state on the original element instance).</source>
          <target state="translated">&lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt; &lt;code&gt;ngAnimateSwap&lt;/code&gt; &lt;/a&gt;は&lt;em&gt;構造ディレクティブ&lt;/em&gt;であることに注意してください。つまり、要素の新しいインスタンス（他の/​​子ディレクティブを含む）を作成し、&lt;em&gt;スワップ&lt;/em&gt;が発生するたびに新しいスコープにリンクします。場合によっては、これは望ましくないことがあります（パフォーマンス上の理由から、または元の要素インスタンスの内部状態を保持したい場合など）。</target>
        </trans-unit>
        <trans-unit id="a0b460923b8c2ebd1c623d370f0b9ad6d939ad9c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; makes a stronger statement about the URL than &lt;code&gt;$sce.URL&lt;/code&gt; or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; do and therefore contexts requiring values trusted for &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; can be used anywhere that values trusted for &lt;code&gt;$sce.URL&lt;/code&gt; or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; are required.</source>
          <target state="translated">なお、 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; よりURLについての強い声明ます &lt;code&gt;$sce.URL&lt;/code&gt; または &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; んし、値を必要とするため、コンテキストは、信頼のために &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 値がために、信頼できる場所であればどこでも使用することができます &lt;code&gt;$sce.URL&lt;/code&gt; または &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="cc1bf3983b1102710be771517de48e27fd68d37a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$watchCollection&lt;/code&gt; does a shallow comparison of the properties of the object (or the items in the collection if the model is an array). This means that changing a property deeper than the first level inside the object/collection will not trigger a re-rendering.</source>
          <target state="translated">&lt;code&gt;$watchCollection&lt;/code&gt; は、オブジェクト（またはモデルが配列の場合はコレクション内の項目）のプロパティの浅い比較を行うことに注意してください。つまり、オブジェクト/コレクション内の最初のレベルよりも深いプロパティを変更しても、再レンダリングはトリガーされません。</target>
        </trans-unit>
        <trans-unit id="2dee39f5a021ca087206f120df7d48fc93821a3b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;input[range]&lt;/code&gt; is not compatible with&lt;code&gt;ngMax&lt;/code&gt;, &lt;code&gt;ngMin&lt;/code&gt;, and &lt;code&gt;ngStep&lt;/code&gt;, because they do not set the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; attributes, which means that the browser won't automatically adjust the input value based on their values, and will always assume min = 0, max = 100, and step = 1.</source>
          <target state="translated">ことを注意 &lt;code&gt;input[range]&lt;/code&gt; と互換性がありません &lt;code&gt;ngMax&lt;/code&gt; 、 &lt;code&gt;ngMin&lt;/code&gt; 、および &lt;code&gt;ngStep&lt;/code&gt; 彼らは設定されていないため、 &lt;code&gt;min&lt;/code&gt; と &lt;code&gt;max&lt;/code&gt; の属性を、どのブラウザが自動的にそれらの値に基づいて入力値を調整しないだろう、と常に仮定することを意味します最小= 0、最大= 100、およびステップ= 1。</target>
        </trans-unit>
        <trans-unit id="9d27b908b7897290c16b7b7bb8b9495950a6a26e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;novalidate&lt;/code&gt; is used to disable browser's native form validation.</source>
          <target state="translated">&lt;code&gt;novalidate&lt;/code&gt; は、ブラウザーのネイティブフォーム検証を無効にするために使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="03cc51fc0228dd8abc334f43fcb44d8105df0c96" translate="yes" xml:space="preserve">
          <source>Note that a named property will match properties on the same level only, while the special &lt;code&gt;$&lt;/code&gt; property will match properties on the same level or deeper. E.g. an array item like &lt;code&gt;{name: {first: 'John', last: 'Doe'}}&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be matched by &lt;code&gt;{name: 'John'}&lt;/code&gt;, but &lt;strong&gt;will&lt;/strong&gt; be matched by &lt;code&gt;{$: 'John'}&lt;/code&gt;.</source>
          <target state="translated">名前付きプロパティは同じレベルのプロパティにのみ一致し、特別な &lt;code&gt;$&lt;/code&gt; プロパティは同じレベル以上のプロパティに一致することに注意してください。例えば配列項目のように &lt;code&gt;{name: {first: 'John', last: 'Doe'}}&lt;/code&gt; なり&lt;strong&gt;ません&lt;/strong&gt;でマッチする &lt;code&gt;{name: 'John'}&lt;/code&gt; 、しかし&lt;strong&gt;ます&lt;/strong&gt;によって一致する &lt;code&gt;{$: 'John'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa75d31f67261d997c50bc28147928d5dc77fe26" translate="yes" xml:space="preserve">
          <source>Note that an empty trusted resource URL list will block every resource URL from being loaded, and will require you to manually mark each one as trusted with &lt;code&gt;$sce.trustAsResourceUrl&lt;/code&gt;. However, templates requested by &lt;a href=&quot;../service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; that are present in &lt;a href=&quot;../service/%24templatecache&quot;&gt;$templateCache&lt;/a&gt; will not go through this check. If you have a mechanism to populate your templates in that cache at config time, then it is a good idea to remove 'self' from the trusted resource URL lsit. This helps to mitigate the security impact of certain types of issues, like for instance attacker-controlled &lt;code&gt;ng-includes&lt;/code&gt;.</source>
          <target state="translated">空の信頼できるリソースURLリストは、すべてのリソースURLの読み込みをブロックし、 &lt;code&gt;$sce.trustAsResourceUrl&lt;/code&gt; して各リソースを手動で信頼済みとしてマークする必要があることに注意してください。ただし、&lt;a href=&quot;../service/%24templaterequest&quot;&gt;$ templateCache&lt;/a&gt;に存在する、&lt;a href=&quot;../service/%24templatecache&quot;&gt;$ templateRequest&lt;/a&gt;によって要求されたテンプレートは、このチェックを通過しません。構成時にそのキャッシュにテンプレートを設定するメカニズムがある場合は、信頼できるリソースのURLlsitから「self」を削除することをお勧めします。これは、たとえば攻撃者が制御する &lt;code&gt;ng-includes&lt;/code&gt; など、特定の種類の問題によるセキュリティへの影響を軽減するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f9ecf6346c2070b6c0ab4c14bc7c542fb88a7f2d" translate="yes" xml:space="preserve">
          <source>Note that an empty whitelist will block every resource URL from being loaded, and will require you to manually mark each one as trusted with &lt;code&gt;$sce.trustAsResourceUrl&lt;/code&gt;. However, templates requested by &lt;a href=&quot;../service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; that are present in &lt;a href=&quot;../service/%24templatecache&quot;&gt;$templateCache&lt;/a&gt; will not go through this check. If you have a mechanism to populate your templates in that cache at config time, then it is a good idea to remove 'self' from that whitelist. This helps to mitigate the security impact of certain types of issues, like for instance attacker-controlled &lt;code&gt;ng-includes&lt;/code&gt;.</source>
          <target state="translated">空のホワイトリストを使用すると、すべてのリソースURLのロードがブロックされ、 &lt;code&gt;$sce.trustAsResourceUrl&lt;/code&gt; 各リソースを信頼できるものとして手動でマークする必要があります。ただし、&lt;a href=&quot;../service/%24templaterequest&quot;&gt;$ templateCacheに&lt;/a&gt;ある$ templateRequestによって要求された&lt;a href=&quot;../service/%24templatecache&quot;&gt;テンプレート&lt;/a&gt;は、このチェックを受けません。設定時にキャッシュにテンプレートを入力するメカニズムがある場合は、ホワイトリストから「自分」を削除することをお勧めします。これは、たとえば攻撃者が制御する &lt;code&gt;ng-includes&lt;/code&gt; など、特定の種類の問題によるセキュリティへの影響を軽減するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7060fae7453c3d445c4f38cba4bd21dedf19b39d" translate="yes" xml:space="preserve">
          <source>Note that child elements that contain &lt;code&gt;templateUrl&lt;/code&gt; directives will not have been compiled and linked since they are waiting for their template to load asynchronously and their own compilation and linking has been suspended until that occurs.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; ディレクティブを含む子要素は、テンプレートが非同期に読み込まれるのを待っており、独自のコンパイルとリンクが発生するまで中断されているため、コンパイルおよびリンクされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c99053b76829524b72c418b0f4b8f9dc7e529792" translate="yes" xml:space="preserve">
          <source>Note that different from config methods on providers, &lt;code&gt;matchLatestDefinitionEnabled()&lt;/code&gt; can be changed even when the application is already running.</source>
          <target state="translated">プロバイダのconfigメソッドとは異なり、 &lt;code&gt;matchLatestDefinitionEnabled()&lt;/code&gt; は、アプリケーションがすでに実行されている場合でも変更できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c4e1e4289fbf35f5faf80c5307adaaad54b9551d" translate="yes" xml:space="preserve">
          <source>Note that even if &lt;code&gt;ngAnimateChildren&lt;/code&gt; is set, no child animations will run when the parent element is removed from the DOM (&lt;code&gt;leave&lt;/code&gt; animation).</source>
          <target state="translated">&lt;code&gt;ngAnimateChildren&lt;/code&gt; が設定されている場合でも、親要素がDOMから削除されると子アニメーションは実行されないことに注意してください（アニメーションを &lt;code&gt;leave&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c7c140cbe8e284d7d91b2523d922769f21bf4f4b" translate="yes" xml:space="preserve">
          <source>Note that if the directive did not create its own scope, then &lt;code&gt;scope&lt;/code&gt; in &lt;code&gt;scope.name = 'Jeff'&lt;/code&gt; would reference the outside scope and we would see &lt;code&gt;Jeff&lt;/code&gt; in the output.</source>
          <target state="translated">ディレクティブは、独自のスコープを作成しなかった場合は、その &lt;code&gt;scope&lt;/code&gt; 内 &lt;code&gt;scope.name = 'Jeff'&lt;/code&gt; 外のスコープを参照しますと、私たちは見ることが &lt;code&gt;Jeff&lt;/code&gt; 出力に。</target>
        </trans-unit>
        <trans-unit id="b69d7fb66d4f2706680e48a28fa8422bbf4e8619" translate="yes" xml:space="preserve">
          <source>Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning that the outcome (success or error) will be determined by the final response status code.</source>
          <target state="translated">レスポンスがリダイレクトの場合、XMLHttpRequest は透過的にそれに従うことに注意してください。つまり、結果 (成功かエラーか)は最終的なレスポンスのステータスコードによって決定されます。</target>
        </trans-unit>
        <trans-unit id="52178123f14ee320297cad57648610e144298b96" translate="yes" xml:space="preserve">
          <source>Note that if the root element is on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element then the cloned node will be placed inside of body.</source>
          <target state="translated">ルート要素が &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素上にある場合、複製されたノードはbodyの内部に配置されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7c6dba9ed0e82c79a5e7151ec5feb744119ce28b" translate="yes" xml:space="preserve">
          <source>Note that if you provide these properties on the config object the default transformations will be overwritten. If you wish to augment the default transformations then you must include them in your local transformation array.</source>
          <target state="translated">これらのプロパティを config オブジェクト上で指定すると、デフォルトの変換は上書きされることに注意してください。デフォルトの変換を拡張したい場合は、ローカルの変換配列に含める必要があります。</target>
        </trans-unit>
        <trans-unit id="00812766716b60ebac71cd394d6a7fe6f3350e0c" translate="yes" xml:space="preserve">
          <source>Note that if you want to assign from a child into the parent scope, you must initialize the target property on the parent scope, otherwise &lt;code&gt;ngRef&lt;/code&gt; will assign on the child scope. This commonly happens when assigning elements or components wrapped in &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;. See the second example below.</source>
          <target state="translated">子から親スコープに割り当てる場合は、親スコープのターゲットプロパティを初期化する必要があります。それ以外の場合、 &lt;code&gt;ngRef&lt;/code&gt; は子スコープに割り当てます。これは通常、&lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; で&lt;/a&gt;ラップされた要素またはコンポーネントを割り当てるときに発生します。以下の2番目の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f0fa4368d83b81bf923d569ddb949c70bea7f44" translate="yes" xml:space="preserve">
          <source>Note that in this mode, AngularJS intercepts all links (subject to the &quot;Html link rewriting&quot; rules below) and updates the url in a way that never performs a full page reload.</source>
          <target state="translated">このモードでは、AngularJSはすべてのリンクを遮断し(下記の「Htmlリンクの書き換え」ルールに従います)、ページ全体のリロードを行わない方法でURLを更新することに注意してください。</target>
        </trans-unit>
        <trans-unit id="c08cd1bfbb11534ce5e7fae83491bc8949dbc417" translate="yes" xml:space="preserve">
          <source>Note that only browsers that support CSS transitions and/or keyframe animations are capable of rendering animations triggered via &lt;code&gt;$animateCss&lt;/code&gt; (bad news for IE9 and lower).</source>
          <target state="translated">CSSトランジションまたはキーフレームアニメーション、あるいはその両方をサポートするブラウザのみが、 &lt;code&gt;$animateCss&lt;/code&gt; を介してトリガーされたアニメーションをレンダリングできることに注意してください（IE9以下では悪いニュースです）。</target>
        </trans-unit>
        <trans-unit id="86e2e236826b266700273a74ec0d099fb253557f" translate="yes" xml:space="preserve">
          <source>Note that only the removed control's validation state (&lt;code&gt;$errors&lt;/code&gt;etc.) will be removed from the form. &lt;code&gt;$dirty&lt;/code&gt;, &lt;code&gt;$submitted&lt;/code&gt; states will not be changed, because the expected behavior can be different from case to case. For example, removing the only &lt;code&gt;$dirty&lt;/code&gt; control from a form may or may not mean that the form is still &lt;code&gt;$dirty&lt;/code&gt;.</source>
          <target state="translated">削除されたコントロールの検証状態（ &lt;code&gt;$errors&lt;/code&gt; など）のみがフォームから削除されることに注意してください。 &lt;code&gt;$dirty&lt;/code&gt; 、 &lt;code&gt;$submitted&lt;/code&gt; 状態は変更されません。これは、予想される動作がケースごとに異なる可能性があるためです。たとえば、フォームから唯一の &lt;code&gt;$dirty&lt;/code&gt; コントロールを削除しても、フォームがまだ &lt;code&gt;$dirty&lt;/code&gt; あることを意味する場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="ba3b53de509e58a62730e40c650af0e249cde701" translate="yes" xml:space="preserve">
          <source>Note that serializer will sort the request parameters alphabetically.</source>
          <target state="translated">シリアライザはリクエストパラメータをアルファベット順に並べ替えることに注意してください。</target>
        </trans-unit>
        <trans-unit id="361cd364814ae208a63b23f1fe54b88cb0b4da83" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;!&lt;/code&gt; prefix in the hashbang mode is not part of &lt;code&gt;$location.path()&lt;/code&gt;; it is actually &lt;code&gt;hashPrefix&lt;/code&gt;.</source>
          <target state="translated">なお &lt;code&gt;!&lt;/code&gt; ハッシュバンモードのプレフィックスは &lt;code&gt;$location.path()&lt;/code&gt; 一部ではありません。実際には &lt;code&gt;hashPrefix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="255b65aefef25adace72fa2d5ba49a9bb01df7db" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;$routeParams&lt;/code&gt; are only updated &lt;em&gt;after&lt;/em&gt; a route change completes successfully. This means that you cannot rely on &lt;code&gt;$routeParams&lt;/code&gt; being correct in route resolve functions. Instead you can use &lt;code&gt;$route.current.params&lt;/code&gt; to access the new route's parameters.</source>
          <target state="translated">&lt;code&gt;$routeParams&lt;/code&gt; は、ルート変更が正常に完了した&lt;em&gt;後に&lt;/em&gt;のみ更新されることに注意してください。つまり、ルート解決関数で &lt;code&gt;$routeParams&lt;/code&gt; が正しいことを信頼することはできません。代わりに、 &lt;code&gt;$route.current.params&lt;/code&gt; を使用して、新しいルートのパラメーターにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="8ed0048fcbcf6b9f1d9c9796273aa944cdd8c09d" translate="yes" xml:space="preserve">
          <source>Note that the callback does not trigger a scope digest. Wrap your call into a &lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;scope.$apply&lt;/a&gt; to propagate changes to the scope.</source>
          <target state="translated">コールバックはスコープダイジェストをトリガーしないことに注意してください。呼び出しを&lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;scope。$ apply&lt;/a&gt;にラップして、変更をスコープに伝播します。</target>
        </trans-unit>
        <trans-unit id="88e8f90425456fee890aba473cd13936b00c42f7" translate="yes" xml:space="preserve">
          <source>Note that the current state of the control will not be reflected on the new parent form. This is not an issue with normal use, as freshly compiled and linked controls are in a &lt;code&gt;$pristine&lt;/code&gt; state.</source>
          <target state="translated">コントロールの現在の状態は新しい親フォームに反映されないことに注意してください。新しくコンパイルおよびリンクされたコントロールは &lt;code&gt;$pristine&lt;/code&gt; 状態であるため、これは通常の使用に関する問題ではありません。</target>
        </trans-unit>
        <trans-unit id="bc392f2c46cf2ff9d24ffab306a297a902ca69ec" translate="yes" xml:space="preserve">
          <source>Note that the interpolateDirective has a priority of 100 and sets up the watch in the preLink function.</source>
          <target state="translated">interpolateDirectiveの優先度は100で、preLink機能で時計を設定していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1e7a8adb55af74b5da7969da9a3763d122026199" translate="yes" xml:space="preserve">
          <source>Note that the required controllers will not be available during the instantiation of the controller, but they are guaranteed to be available just before the &lt;code&gt;$onInit&lt;/code&gt; method is executed!</source>
          <target state="translated">必要なコントローラーは、コントローラーのインスタンス化中は使用できませんが、 &lt;code&gt;$onInit&lt;/code&gt; メソッドが実行される直前に使用できることが保証されています。</target>
        </trans-unit>
        <trans-unit id="8c34ae91c81cc9b2d0be6d7e1934c17d8776d6a7" translate="yes" xml:space="preserve">
          <source>Note that the setters don't update &lt;code&gt;window.location&lt;/code&gt; immediately. Instead, the &lt;code&gt;$location&lt;/code&gt; service is aware of the &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; life-cycle and coalesces multiple &lt;code&gt;$location&lt;/code&gt; mutations into one &quot;commit&quot; to the &lt;code&gt;window.location&lt;/code&gt; object during the scope &lt;code&gt;$digest&lt;/code&gt; phase. Since multiple changes to the $location's state will be pushed to the browser as a single change, it's enough to call the &lt;code&gt;replace()&lt;/code&gt; method just once to make the entire &quot;commit&quot; a replace operation rather than an addition to the browser history. Once the browser is updated, the $location service resets the flag set by &lt;code&gt;replace()&lt;/code&gt; method and future mutations will create new history records, unless &lt;code&gt;replace()&lt;/code&gt; is called again.</source>
          <target state="translated">セッターは &lt;code&gt;window.location&lt;/code&gt; をすぐに更新しないことに注意してください。代わりに、 &lt;code&gt;$location&lt;/code&gt; サービスは&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;スコープの&lt;/a&gt;ライフサイクルを認識し、スコープの &lt;code&gt;$digest&lt;/code&gt; フェーズ中に、複数の &lt;code&gt;$location&lt;/code&gt; ミュー &lt;code&gt;window.location&lt;/code&gt; オブジェクトへの1つの「コミット」に統合します。 $ locationの状態に対する複数の変更は1つの変更としてブラウザーにプッシュされる &lt;code&gt;replace()&lt;/code&gt; 、replace（）メソッドを1回呼び出すだけで、ブラウザーの履歴に追加するのではなく、「commit」で置換操作全体を実行できます。ブラウザーが更新されると、$ locationサービスは &lt;code&gt;replace()&lt;/code&gt; によって設定されたフラグをリセットしますメソッドと将来のミューテーションは、 &lt;code&gt;replace()&lt;/code&gt; が再度呼び出されない限り、新しい履歴レコードを作成します。</target>
        </trans-unit>
        <trans-unit id="23e7bfea25426540eb64b363a42574d6fb731133" translate="yes" xml:space="preserve">
          <source>Note that this directive should not be used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, as this can lead to unexpected behavior.</source>
          <target state="translated">このディレクティブを&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;と一緒に使用しないでください。予期しない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a113d4b03841c78edec91e5f83c98fd737fcdc85" translate="yes" xml:space="preserve">
          <source>Note that this feature is only active when the &lt;code&gt;ngAnimate&lt;/code&gt; module is used.</source>
          <target state="translated">この機能は、 &lt;code&gt;ngAnimate&lt;/code&gt; モジュールが使用されている場合にのみアクティブになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="287fb53c098a514c8ea13e5c815f04f74ffde3ad" translate="yes" xml:space="preserve">
          <source>Note that this only patches jqLite. If you use jQuery 3.5.0 or newer, please read the &lt;a href=&quot;https://jquery.com/upgrade-guide/3.5/&quot;&gt;jQuery 3.5 upgrade guide&lt;/a&gt; for more details about the workarounds.</source>
          <target state="translated">これはjqLit​​eにのみパッチを適用することに注意してください。jQuery 3.5.0以降を使用している場合、回避策の詳細については、&lt;a href=&quot;https://jquery.com/upgrade-guide/3.5/&quot;&gt;jQuery3.5アップグレードガイド&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="533bf055a177afefc469a9231695b1feea4c317e" translate="yes" xml:space="preserve">
          <source>Note that we have used non-prefixed CSS transition properties in our examples as the major browsers now support non-prefixed properties. If you intend to support older browsers or certain mobile browsers then you will need to include prefixed versions of the transition properties. Take a look at &lt;a href=&quot;http://caniuse.com/#feat=css-transitions&quot;&gt;http://caniuse.com/#feat=css-transitions&lt;/a&gt; for what browsers require prefixes, and &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;https://github.com/postcss/autoprefixer&lt;/a&gt; for a tool that can automatically generate the prefixes for you.</source>
          <target state="translated">主要なブラウザーが非プレフィックスプロパティをサポートするようになったため、例ではプレフィックスのないCSS遷移プロパティを使用していることに注意してください。古いブラウザーまたは特定のモバイルブラウザーをサポートする場合は、遷移プロパティのプレフィックスバージョンを含める必要があります。プレフィックスが必要なブラウザーについては&lt;a href=&quot;http://caniuse.com/#feat=css-transitions&quot;&gt;http://caniuse.com/#feat=css-transitions&lt;/a&gt;を、プレフィックスを自動的に生成できるツールについては&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;https://github.com/postcss/autoprefixer&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="8d3f05319b58c25245386778c79a07fe8cf8fe0a" translate="yes" xml:space="preserve">
          <source>Note that we have used non-prefixed CSS transition properties in our examples as the major browsers now support non-prefixed properties. If you intend to support older browsers or certain mobile browsers then you will need to include prefixed versions of the transition properties. Take a look at &lt;a href=&quot;https://caniuse.com/#feat=css-transitions&quot;&gt;http://caniuse.com/#feat=css-transitions&lt;/a&gt; for what browsers require prefixes, and &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;https://github.com/postcss/autoprefixer&lt;/a&gt; for a tool that can automatically generate the prefixes for you.</source>
          <target state="translated">主要なブラウザがプレフィックスなしのプロパティをサポートするようになったため、例ではプレフィックスなしのCSS遷移プロパティを使用していることに注意してください。古いブラウザまたは特定のモバイルブラウザをサポートする場合は、トランジションプロパティのプレフィックス付きバージョンを含める必要があります。プレフィックスが必要なブラウザについては&lt;a href=&quot;https://caniuse.com/#feat=css-transitions&quot;&gt;http://caniuse.com/#feat=css-transitions&lt;/a&gt;を、プレフィックスを自動的に生成できるツールについては&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;https://github.com/postcss/autoprefixer&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="9c3e1cc0ee20d7a72fe1a7d291a53df28e47882d" translate="yes" xml:space="preserve">
          <source>Note that we provided the name of our application module to be loaded into the injector as the second parameter of the &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; function. Notice that &lt;code&gt;angular.bootstrap&lt;/code&gt; will not create modules on the fly. You must create any custom &lt;a href=&quot;module&quot;&gt;modules&lt;/a&gt; before you pass them as a parameter.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;関数の2番目のパラメーターとして、インジェクターに読み込まれるアプリケーションモジュールの名前を指定したことに注意してください。 &lt;code&gt;angular.bootstrap&lt;/code&gt; はその場でモジュールを作成しないことに注意してください。パラメータとして渡す前に、カスタム&lt;a href=&quot;module&quot;&gt;モジュールを&lt;/a&gt;作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ead3bf4970f104fb56e684eaff167f7cdae7eea" translate="yes" xml:space="preserve">
          <source>Note that whatever is returned by the decorator function will replace that which is being decorated. For example, a missing return statement will wipe out the entire object being decorated.</source>
          <target state="translated">decorator 関数が返すものは何であれ、装飾されているものを置き換えることに注意してください。例えば、return文がないと、デコレーションされているオブジェクト全体が一掃されてしまいます。</target>
        </trans-unit>
        <trans-unit id="fa3e23fba7c51ee609d4ecc4d18b8ad2d0d55f3e" translate="yes" xml:space="preserve">
          <source>Note that when an element is removed using &lt;code&gt;ngIf&lt;/code&gt; its scope is destroyed and a new scope is created when the element is restored. The scope created within &lt;code&gt;ngIf&lt;/code&gt; inherits from its parent scope using &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance&quot;&gt;prototypal inheritance&lt;/a&gt;. An important implication of this is if &lt;code&gt;ngModel&lt;/code&gt; is used within &lt;code&gt;ngIf&lt;/code&gt; to bind to a javascript primitive defined in the parent scope. In this case any modifications made to the variable within the child scope will override (hide) the value in the parent scope.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; を使用して要素が削除されると、そのスコープが破棄され、要素が復元されるときに新しいスコープが作成されることに注意してください。 &lt;code&gt;ngIf&lt;/code&gt; 内で作成されたスコープは、&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance&quot;&gt;プロトタイプ継承&lt;/a&gt;を使用して親スコープから継承します。場合は、この重要な含意はある &lt;code&gt;ngModel&lt;/code&gt; が内で使用されて &lt;code&gt;ngIf&lt;/code&gt; 親スコープで定義されたJavaScriptのプリミティブにバインドします。この場合、子スコープ内の変数に加えられた変更は、親スコープの値をオーバーライド（非表示）します。</target>
        </trans-unit>
        <trans-unit id="ec430e54b4e4cb65b0f886e7a9ce1cc6897310e8" translate="yes" xml:space="preserve">
          <source>Note that when you specify offsets, you must provide explicit number rules for numbers from 0 up to and including the offset. If you use an offset of 3, for example, you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for plural categories &quot;one&quot; and &quot;other&quot;.</source>
          <target state="translated">オフセットを指定する場合は、0 からオフセットまでの数値に対して明示的な数値規則を指定する必要があることに注意してください。例えば、3 のオフセットを使用する場合は、0、1、2、および 3 の明示的な数値規則を指定する必要があります。また、複数のカテゴリ &quot;one&quot; と &quot;other&quot; には、複数の文字列を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bb502c46c9a90c606dcc935a89c49887979e77d" translate="yes" xml:space="preserve">
          <source>Note that when you type hashbang url into the first browser (or vice versa) it doesn't rewrite / redirect to regular / hashbang url, as this conversion happens only during parsing the initial URL = on page reload.</source>
          <target state="translated">あなたが最初のブラウザ(またはその逆)にハッシュバングURLを入力するとき、それは、この変換は、最初のURLを解析中にのみ発生するように、通常の/ハッシュバングURLに書き換え/リダイレクトしないことに注意してください=ページのリロード上で。</target>
        </trans-unit>
        <trans-unit id="b178156524e6cb72a5162e49e917632f00765f48" translate="yes" xml:space="preserve">
          <source>Note that you are not registering a &lt;strong&gt;service instance&lt;/strong&gt;, but rather a &lt;strong&gt;factory function&lt;/strong&gt; that will create this instance when called.</source>
          <target state="translated">&lt;strong&gt;サービスインスタンスを&lt;/strong&gt;登録するのではなく、呼び出されたときにこのインスタンスを作成する&lt;strong&gt;ファクトリ関数&lt;/strong&gt;を登録することに注意してください。</target>
        </trans-unit>
        <trans-unit id="426af06ec89b5b89375d353f1e16d2216df4049e" translate="yes" xml:space="preserve">
          <source>Note that you can also attach controllers to the DOM by declaring it in a route definition via the &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service. A common mistake is to declare the controller again using &lt;code&gt;ng-controller&lt;/code&gt; in the template itself. This will cause the controller to be attached and executed twice.</source>
          <target state="translated">&lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt;サービスを介してルート定義で宣言することにより、コントローラーをDOMに接続することもできます。よくある間違いは、テンプレート自体で &lt;code&gt;ng-controller&lt;/code&gt; を使用してコントローラーを再度宣言することです。これにより、コントローラーが接続され、2回実行されます。</target>
        </trans-unit>
        <trans-unit id="768387cfb355f78bebd7f61156633279bb4ef574" translate="yes" xml:space="preserve">
          <source>Note that you can also require the directive's own controller - it will be made available like any other controller.</source>
          <target state="translated">ディレクティブ自身のコントローラを要求することもできることに注意してください-他のコントローラと同じように利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0856f9e27bd71605496c72bdce7db828215d5caa" translate="yes" xml:space="preserve">
          <source>Note that you can only inject &lt;a href=&quot;angular.module#provider.html&quot;&gt;&lt;code&gt;providers&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;angular.module#constant.html&quot;&gt;&lt;code&gt;constants&lt;/code&gt;&lt;/a&gt; into this function.</source>
          <target state="translated">この関数に挿入できるのは&lt;a href=&quot;angular.module#provider.html&quot;&gt; &lt;code&gt;providers&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;angular.module#constant.html&quot;&gt; &lt;code&gt;constants&lt;/code&gt; &lt;/a&gt;だけであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7fca268533ad52bcf0c065e75a8a1bda0b9ae178" translate="yes" xml:space="preserve">
          <source>Note that, in AngularJS, there is also a &lt;code&gt;$destroy&lt;/code&gt; jQuery event, which can be used to clean up DOM bindings before an element is removed from the DOM.</source>
          <target state="translated">AngularJSには、要素がDOMから削除される前にDOMバインディングをクリーンアップするために使用できる &lt;code&gt;$destroy&lt;/code&gt; jQueryイベントもあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b50a7b94348fd5ca87221af2d3704fcd38ed6945" translate="yes" xml:space="preserve">
          <source>Note that, since JSONP requests are sensitive because the response is given full access to the browser, the url must be declared, via &lt;a href=&quot;%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; as a trusted resource URL. You can trust a URL by adding it to the trusted resource URL list via &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/code&gt;&lt;/a&gt; or by explicitly trusting the URL via &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;&lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JSONPリクエストはブラウザへのフルアクセスが応答に与えられるため機密性が高いため、信頼できるリソースURLとして&lt;a href=&quot;%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;を介してURLを宣言する必要があることに注意してください。URLを信頼するには、&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/code&gt; &lt;/a&gt;を介して信頼できるリソースのURLリストに追加するか、&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt; &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; &lt;/a&gt;介してURLを明示的に信頼します。</target>
        </trans-unit>
        <trans-unit id="28eeae6418e548c9d53253ae27de441a4197d400" translate="yes" xml:space="preserve">
          <source>Note that, since JSONP requests are sensitive because the response is given full access to the browser, the url must be declared, via &lt;a href=&quot;%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; as a trusted resource URL. You can trust a URL by adding it to the whitelist via &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt;&lt;/a&gt; or by explicitly trusting the URL via &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;&lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答にはブラウザーへの完全なアクセス権が与えられているため、JSONP要求は機密であるため、URLは&lt;a href=&quot;%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;を介して信頼できるリソースURLとして宣言する必要があります。&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt; &lt;/a&gt;を介してホワイトリストにURLを追加するか、&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt; &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; &lt;/a&gt;介してURLを明示的に信頼することで、URLを信頼できます。</target>
        </trans-unit>
        <trans-unit id="c149229cd726688ef5b9a6babd1d42d388052bde" translate="yes" xml:space="preserve">
          <source>Note, that code executed in event-listeners (even those registered using jqLite's &lt;code&gt;on&lt;/code&gt;/&lt;code&gt;bind&lt;/code&gt; methods) does not delegate exceptions to the &lt;a href=&quot;%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; (unless executed during a digest).</source>
          <target state="translated">イベントリスナーで実行されるコード（jqLit​​eの &lt;code&gt;on&lt;/code&gt; / &lt;code&gt;bind&lt;/code&gt; メソッドを使用して登録されたコードでも）は、例外を&lt;a href=&quot;%24exceptionhandler&quot;&gt;$ exceptionHandlerに&lt;/a&gt;委譲しないことに注意してください（ダイジェスト中に実行されない限り）。</target>
        </trans-unit>
        <trans-unit id="9e38d74b6819f720cd61a7094b0d049052abbf0b" translate="yes" xml:space="preserve">
          <source>Note, this directive requires &lt;code&gt;ngModel&lt;/code&gt; to be present.</source>
          <target state="translated">このディレクティブには &lt;code&gt;ngModel&lt;/code&gt; が存在する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b59520eea72ca86bfd70bf545fa47501473c8a9a" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;ngModel&lt;/code&gt; will try to bind to the property given by evaluating the expression on the current scope. If the property doesn't already exist on this scope, it will be created implicitly and added to the scope.</source>
          <target state="translated">注： &lt;code&gt;ngModel&lt;/code&gt; は、現在のスコープで式を評価することによって指定されたプロパティにバインドしようとします。プロパティがこのスコープに存在しない場合は、暗黙的に作成され、スコープに追加されます。</target>
        </trans-unit>
        <trans-unit id="c67b04ea81758d7b804ada0ab90cd4b709045975" translate="yes" xml:space="preserve">
          <source>Note: A Word on Modules</source>
          <target state="translated">注意:モジュールについての一言</target>
        </trans-unit>
        <trans-unit id="ded91630c0d7419f8e1e784dda3b45c381bb9947" translate="yes" xml:space="preserve">
          <source>Note: All services in AngularJS are singletons. That means that the injector uses each recipe at most once to create the object. The injector then caches the reference for all future needs.</source>
          <target state="translated">注意:AngularJSのすべてのサービスはシングルトンです。つまり、インジェクターはオブジェクトを作成するためにそれぞれのレシピを最大一度だけ使用します。その後、インジェクターは将来の必要性のために参照をキャッシュします。</target>
        </trans-unit>
        <trans-unit id="9e323b77fe9b73f870ed3df7c5fd2a58db5399d7" translate="yes" xml:space="preserve">
          <source>Note: As the &lt;code&gt;blur&lt;/code&gt; event is executed synchronously also during DOM manipulations (e.g. removing a focussed input), AngularJS executes the expression using &lt;code&gt;scope.$evalAsync&lt;/code&gt; if the event is fired during an &lt;code&gt;$apply&lt;/code&gt; to ensure a consistent state.</source>
          <target state="translated">注： &lt;code&gt;blur&lt;/code&gt; イベントはDOM操作（たとえば、フォーカスされた入力の削除）中にも同期的に実行 &lt;code&gt;$apply&lt;/code&gt; れるため、$ apply中にイベントが発生して一貫した状態を保証する場合、AngularJSは &lt;code&gt;scope.$evalAsync&lt;/code&gt; を使用して式を実行します。</target>
        </trans-unit>
        <trans-unit id="c280156fbac945785329bf6b2c4598680af419de" translate="yes" xml:space="preserve">
          <source>Note: As the &lt;code&gt;focus&lt;/code&gt; event is executed synchronously when calling &lt;code&gt;input.focus()&lt;/code&gt; AngularJS executes the expression using &lt;code&gt;scope.$evalAsync&lt;/code&gt; if the event is fired during an &lt;code&gt;$apply&lt;/code&gt; to ensure a consistent state.</source>
          <target state="translated">注： &lt;code&gt;input.focus()&lt;/code&gt; の呼び出し時に &lt;code&gt;focus&lt;/code&gt; イベントが同期的に実行 &lt;code&gt;$apply&lt;/code&gt; れるため、一貫性のある状態を保証するために$ apply中にイベントが &lt;code&gt;scope.$evalAsync&lt;/code&gt; 場合、AngularJSはscope。$ evalAsyncを使用して式を実行します。</target>
        </trans-unit>
        <trans-unit id="389de76ccd42531e06d862c273bd31729b8ac968" translate="yes" xml:space="preserve">
          <source>Note: By default, the address that appears in your &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag will be used as the path. This is important so that cookies will be visible for all routes when html5mode is enabled.</source>
          <target state="translated">注：デフォルトでは、 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; タグに表示されるアドレスがパスとして使用されます。これは、html5modeが有効な場合にすべてのルートでCookieが表示されるようにするために重要です。</target>
        </trans-unit>
        <trans-unit id="e31495007ee5e25b71e93337695e741041bb6b41" translate="yes" xml:space="preserve">
          <source>Note: If a &lt;code&gt;$sanitize&lt;/code&gt; service is unavailable and the bound value isn't explicitly trusted, you will have an exception (instead of an exploit.)</source>
          <target state="translated">注： &lt;code&gt;$sanitize&lt;/code&gt; サービスが利用できず、バインドされた値が明示的に信頼されていない場合は、エクスプロイトではなく例外が発生します。</target>
        </trans-unit>
        <trans-unit id="377131b4062957e0cd54324140e9b1862488c89c" translate="yes" xml:space="preserve">
          <source>Note: Not all browsers support blackboxing.</source>
          <target state="translated">注意:すべてのブラウザがブラックボックスをサポートしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="a089d7d30df3e20d1229e11d2f529063219abf86" translate="yes" xml:space="preserve">
          <source>Note: Path should always begin with forward slash (/), this method will add the forward slash if it is missing.</source>
          <target state="translated">注意:パスは常にフォワードスラッシュ (/)で始まる必要があり、このメソッドはフォワードスラッシュがない場合にフォワードスラッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="eb8c13038a41fd0eff7f4877829e9fd98a3545b0" translate="yes" xml:space="preserve">
          <source>Note: Service recipes follow a design pattern called &lt;a href=&quot;http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&quot;&gt;constructor injection&lt;/a&gt;.</source>
          <target state="translated">注：サービスレシピは、&lt;a href=&quot;http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&quot;&gt;コンストラクターインジェクション&lt;/a&gt;と呼ばれる設計パターンに従います。</target>
        </trans-unit>
        <trans-unit id="475834278a9624d0a055bc9effed019c3ae7d13c" translate="yes" xml:space="preserve">
          <source>Note: compared to the non-AngularJS version &lt;code&gt;location.host&lt;/code&gt; which returns &lt;code&gt;hostname:port&lt;/code&gt;, this returns the &lt;code&gt;hostname&lt;/code&gt; portion only.</source>
          <target state="translated">注： &lt;code&gt;hostname:port&lt;/code&gt; を返す非AngularJSバージョンの &lt;code&gt;location.host&lt;/code&gt; と比較すると、これは &lt;code&gt;hostname&lt;/code&gt; 部分のみを返します。</target>
        </trans-unit>
        <trans-unit id="29b3409bac783620b70260279692f3e46f1b409c" translate="yes" xml:space="preserve">
          <source>Note: each module is only loaded once, even if multiple other modules require it. Note: the factory function for &quot;values&quot; and &quot;services&quot; is called lazily when the value/service is injected for the first time.</source>
          <target state="translated">注意:他の複数のモジュールが必要な場合でも、各モジュールは一度だけロードされます。注意:&quot;value&quot; と &quot;service&quot; のファクトリ関数は、値/サービスが初めて注入されたときに怠惰に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="097deab2d3194da828c79a657f91e42bb7760b81" translate="yes" xml:space="preserve">
          <source>Note: progress/notify callbacks are not currently supported via the ES6-style interface.</source>
          <target state="translated">注意:プログレス/通知コールバックは、現在のところ ES6 スタイルのインターフェイスではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5db2b0e614cd03b6d341dbe39badf2f8a3c6edee" translate="yes" xml:space="preserve">
          <source>Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.</source>
          <target state="translated">注意:ES6 の動作とは異なり、コンストラクタ関数で例外がスローされても、暗黙のうちにプロミスを拒否することはありません。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="c54075f533215ab50d0fd7cf38a3eeb8c23fc08c" translate="yes" xml:space="preserve">
          <source>Notice how by nesting the &lt;code&gt;describe&lt;/code&gt; calls and being descriptive when calling them with strings, the test is very clear. It documents exactly what it is testing, and at a glance you can quickly see what is happening. Now let's add the test for when the password is less than three characters, which should see &lt;code&gt;$scope.strength&lt;/code&gt; set to &quot;weak&quot;:</source>
          <target state="translated">&lt;code&gt;describe&lt;/code&gt; 呼び出しをネストし、文字列でそれらを呼び出すときに記述的であることにより、テストが非常に明確になることに注意してください。何がテストされているかを正確に文書化し、一目で何が起こっているかをすばやく確認できます。次に、パスワードが3文字未満の場合のテストを追加してみましょう。 &lt;code&gt;$scope.strength&lt;/code&gt; が「弱い」に設定されているはずです。</target>
        </trans-unit>
        <trans-unit id="ea973d032cbe0e4a3acb5cd3fd8438e47c464d8c" translate="yes" xml:space="preserve">
          <source>Notice how we created an AngularJS module called &lt;code&gt;myApp&lt;/code&gt;, and specified that this module definition contains a &quot;recipe&quot; for constructing the &lt;code&gt;clientId&lt;/code&gt; service, which is a simple string in this case.</source>
          <target state="translated">&lt;code&gt;myApp&lt;/code&gt; というAngularJSモジュールを作成し、このモジュール定義に &lt;code&gt;clientId&lt;/code&gt; サービスを構築するための「レシピ」が含まれていることを指定したことに注意してください。これは、この場合は単純な文字列です。</target>
        </trans-unit>
        <trans-unit id="6e1c89c353e0b2bfa617e6200563c1f70f6b36b2" translate="yes" xml:space="preserve">
          <source>Notice how we nested three &lt;code&gt;ng-controller&lt;/code&gt; directives in our template. This will result in four scopes being created for our view:</source>
          <target state="translated">テンプレートで3つの &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブをネストしていることに注目してください。これにより、ビュー用に4つのスコープが作成されます。</target>
        </trans-unit>
        <trans-unit id="866554109e207e68affe8a1878fa43779923f1b4" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;ng-bind-html&lt;/code&gt; is bound to &lt;code&gt;userHtml&lt;/code&gt; controlled by the user. With SCE disabled, this application allows the user to render arbitrary HTML into the DIV, which would be an XSS security bug. In a more realistic example, one may be rendering user comments, blog articles, etc. via bindings. (HTML is just one example of a context where rendering user controlled input creates security vulnerabilities.)</source>
          <target state="translated">&lt;code&gt;ng-bind-html&lt;/code&gt; は、ユーザーが制御する &lt;code&gt;userHtml&lt;/code&gt; にバインドされていることに注意してください。SCEを無効にすると、このアプリケーションにより、ユーザーは任意のHTMLをDIVにレンダリングできますが、これはXSSセキュリティバグになります。より現実的な例では、バインディングを介してユーザーのコメント、ブログ記事などをレンダリングする場合があります。（HTMLは、ユーザーが制御した入力をレンダリングするとセキュリティの脆弱性が生じるコンテキストのほんの一例です。）</target>
        </trans-unit>
        <trans-unit id="73b624fb6abc400437a5b17f43dc406ad4cba089" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;{{vojta.name}}&lt;/code&gt; and &lt;code&gt;{{vojta.address}}&lt;/code&gt; are empty, meaning they are undefined. Although we defined &lt;code&gt;vojta&lt;/code&gt; in the controller, it's not available within the directive.</source>
          <target state="translated">ことに注意してください &lt;code&gt;{{vojta.name}}&lt;/code&gt; と &lt;code&gt;{{vojta.address}}&lt;/code&gt; それらは不定ですつまり、空です。コントローラーで &lt;code&gt;vojta&lt;/code&gt; を定義しましたが、ディレクティブ内では使用できません。</target>
        </trans-unit>
        <trans-unit id="0298da2c4dfd3a77cc9d26ed5cd330121c43f588" translate="yes" xml:space="preserve">
          <source>Notice that AngularJS automatically places &lt;code&gt;ng-scope&lt;/code&gt; class on elements where scopes are attached. The &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; definition in this example highlights in red the new scope locations. The child scopes are necessary because the repeater evaluates &lt;code&gt;{{name}}&lt;/code&gt; expression, but depending on which scope the expression is evaluated it produces different result. Similarly the evaluation of &lt;code&gt;{{department}}&lt;/code&gt; prototypically inherits from root scope, as it is the only place where the &lt;code&gt;department&lt;/code&gt; property is defined.</source>
          <target state="translated">AngularJS は、スコープがアタッチされている要素に &lt;code&gt;ng-scope&lt;/code&gt; クラスを自動的に配置することに注意してください。この例の &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 定義は、新しいスコープの場所を赤で強調表示しています。リピーターは &lt;code&gt;{{name}}&lt;/code&gt; 式を評価するため、子スコープが必要ですが、式が評価されるスコープに応じて、結果は異なります。同様に、 &lt;code&gt;{{department}}&lt;/code&gt; の評価は、プロトタイプとしてルートスコープから継承されます。これは、 &lt;code&gt;department&lt;/code&gt; プロパティが定義されている唯一の場所だからです。</target>
        </trans-unit>
        <trans-unit id="3839958f8944ea1c22c3c00974493cea51d7518b" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;SpicyController&lt;/code&gt; Controller now defines just one method called &lt;code&gt;spicy&lt;/code&gt;, which takes one argument called &lt;code&gt;spice&lt;/code&gt;. The template then refers to this Controller method and passes in a string constant &lt;code&gt;'chili'&lt;/code&gt; in the binding for the first button and a model property &lt;code&gt;customSpice&lt;/code&gt; (bound to an input box) in the second button.</source>
          <target state="translated">&lt;code&gt;SpicyController&lt;/code&gt; コントローラーが &lt;code&gt;spicy&lt;/code&gt; と呼ばれる1つのメソッドのみを定義することに注意してください。このメソッドは、 &lt;code&gt;spice&lt;/code&gt; と呼ばれる1つの引数を取ります。次に、テンプレートはこのControllerメソッドを参照し、最初のボタンのバインディングで文字列定数 &lt;code&gt;'chili'&lt;/code&gt; を &lt;code&gt;customSpice&lt;/code&gt; 、2番目のボタンでモデルプロパティcustomSpice（入力ボックスにバインド）を渡します。</target>
        </trans-unit>
        <trans-unit id="fcafb839ae2e19c3003dbe181ab743c7da4deb5d" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;debounce&lt;/code&gt; setting now inherits the value from the outer &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; 設定が外側の &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素から値を継承することに注意してください。</target>
        </trans-unit>
        <trans-unit id="11c8b074765da89c55e8bddbf88d6d735cedb6db" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;debounce&lt;/code&gt; setting was not inherited and used the default value instead.</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; 設定は継承されておらず、代わりにデフォルト値が使用されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="84e33f4c42c94171ec70e888a6080924ce7f9f08" translate="yes" xml:space="preserve">
          <source>Notice that the unicorn provider is injected into the config function. This injection is done by a provider injector which is different from the regular instance injector, in that it instantiates and wires (injects) all provider instances only.</source>
          <target state="translated">ユニコーン・プロバイダが config 関数に注入されていることに注目してください。このインジェクションは、通常のインスタンスインジェクタとは異なり、すべてのプロバイダインスタンスのみをインスタンス化して配線する (インジェクションする)プロバイダインジェクタによって行われます。</target>
        </trans-unit>
        <trans-unit id="199e1ec52bd8dfa3947e323243561950569a2371" translate="yes" xml:space="preserve">
          <source>Notice that we are still using two plural categories(one, other), but we added three explicit number rules 0, 1 and 2. When one person, perhaps John, views the document, &quot;John is viewing&quot; will be shown. When three people view the document, no explicit number rule is found, so an offset of 2 is taken off 3, and AngularJS uses 1 to decide the plural category. In this case, plural category 'one' is matched and &quot;John, Mary and one other person are viewing&quot; is shown.</source>
          <target state="translated">2つの複数のカテゴリ(one,other)を使用していますが、0,1,2の3つの明示的な数の規則を追加しています。1人、おそらくJohnがドキュメントを閲覧した場合、&quot;John is viewing &quot;と表示されます。3人がドキュメントを閲覧した場合は、明示的な数値ルールが見つからないので、3から2のオフセットを取り、AngularJSは1を使って複数のカテゴリを決定します。この場合、複数のカテゴリ「1」がマッチし、「ジョン、メアリー、もう一人が閲覧中」と表示されます。</target>
        </trans-unit>
        <trans-unit id="1994c2630a8638f99ab205cb6033d30163f18599" translate="yes" xml:space="preserve">
          <source>Notice that we have bindings in this directive. After &lt;code&gt;$compile&lt;/code&gt; compiles and links &lt;code&gt;&amp;lt;div my-customer&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, it will try to match directives on the element's children. This means you can compose directives of other directives. We'll see how to do that in &lt;a href=&quot;directive#creating-directives-that-communicate.html&quot;&gt;an example&lt;/a&gt; below.</source>
          <target state="translated">このディレクティブにはバインディングがあることに注意してください。 &lt;code&gt;$compile&lt;/code&gt; &lt;code&gt;&amp;lt;div my-customer&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; をコンパイルしてリンクした後、要素の子のディレクティブに一致させようとします。これは、他のディレクティブのディレクティブを作成できることを意味します。以下&lt;a href=&quot;directive#creating-directives-that-communicate.html&quot;&gt;の例で&lt;/a&gt;その方法を説明します。</target>
        </trans-unit>
        <trans-unit id="81bd7a0e3da58bfc17640a279f9a5cbc48aaad4b" translate="yes" xml:space="preserve">
          <source>Notice the CSS class &lt;strong&gt;fade&lt;/strong&gt;? We can now create the CSS transition code that references this class:</source>
          <target state="translated">CSSクラスの&lt;strong&gt;フェードに&lt;/strong&gt;注意してください。これで、このクラスを参照するCSS遷移コードを作成できます。</target>
        </trans-unit>
        <trans-unit id="8e5507629b5d2276102b44fefc2c3db40187c151" translate="yes" xml:space="preserve">
          <source>Now that AngularJS knows of all the parts of the application, it needs to create them. In the previous section we saw that controllers are created using a constructor function. For services, there are multiple ways to specify how they are created (see the &lt;a href=&quot;services&quot;&gt;service guide&lt;/a&gt;). In the example above, we are using an anonymous function as the factory function for the &lt;code&gt;currencyConverter&lt;/code&gt; service. This function should return the &lt;code&gt;currencyConverter&lt;/code&gt; service instance.</source>
          <target state="translated">AngularJSがアプリケーションのすべての部分を認識したので、それらを作成する必要があります。前のセクションで、コンストラクター関数を使用してコントローラーが作成されることを確認しました。サービスの場合、作成方法を指定する方法は複数あります（&lt;a href=&quot;services&quot;&gt;サービスガイドを&lt;/a&gt;参照）。上記の例では、 &lt;code&gt;currencyConverter&lt;/code&gt; サービスのファクトリ関数として匿名関数を使用しています。この関数は、 &lt;code&gt;currencyConverter&lt;/code&gt; サービスインスタンスを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3023743de3fc166f2614a5025a30366a01a0be40" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;on&lt;/code&gt; CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element in our HTML code then we can trigger a CSS or JS animation to happen.</source>
          <target state="translated">これで、 &lt;code&gt;on&lt;/code&gt; CSSクラスがグリーティングボックスコンポーネントに追加および削除されます。次に、HTMLコードのグリーティングボックス要素の上にCSSクラスを追加すると、CSSまたはJSアニメーションをトリガーできます。</target>
        </trans-unit>
        <trans-unit id="5a9c4611e97cb75f64fecd19f3bf1eb542109c4a" translate="yes" xml:space="preserve">
          <source>Now we can add a directive to our app.</source>
          <target state="translated">これで、アプリにディレクティブを追加することができます。</target>
        </trans-unit>
        <trans-unit id="6ddd006ee96483952150cc966e2ccc3310f3a60b" translate="yes" xml:space="preserve">
          <source>Now we can fill in the rest via our transition CSS code:</source>
          <target state="translated">あとは、遷移用のCSSコードを使って埋めていきましょう。</target>
        </trans-unit>
        <trans-unit id="1dd4db9a4bc3a4df724b8949105cc438f10d21ff" translate="yes" xml:space="preserve">
          <source>Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur: an &lt;code&gt;out&lt;/code&gt; and an &lt;code&gt;in&lt;/code&gt; stage. The &lt;code&gt;out&lt;/code&gt; stage happens first and that is when the element is animated away from its origin. Once that animation is over then the &lt;code&gt;in&lt;/code&gt; stage occurs which animates the element to its destination. The reason why there are two animations is to give enough time for the enter animation on the new element to be ready.</source>
          <target state="translated">これで、アンカーアニメーションに戻ることができます。アニメーションが発生 &lt;code&gt;out&lt;/code&gt; と、アウトと &lt;code&gt;in&lt;/code&gt; 2つのステージが発生します。 &lt;code&gt;out&lt;/code&gt; ステージは、最初に、その要素は、その原点から離れてアニメーション化されたときであるが起こります。そのアニメーションが終了すると、要素をその目的地までアニメーション化する &lt;code&gt;in&lt;/code&gt; ステージが発生します。アニメーションが2つあるのは、新しい要素のEnterアニメーションを準備するのに十分な時間を与えるためです。</target>
        </trans-unit>
        <trans-unit id="85942980bd72608eb2e7385f2bd59154033057d3" translate="yes" xml:space="preserve">
          <source>Now we create the &lt;strong&gt;JavaScript animation&lt;/strong&gt; that will trigger the CSS transition:</source>
          <target state="translated">次に、CSSの移行をトリガーする&lt;strong&gt;JavaScriptアニメーション&lt;/strong&gt;を作成し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b6aea76798fd7c993834e12f5affe0d762a73898" translate="yes" xml:space="preserve">
          <source>Now we have two tests, but notice the duplication between the tests. Both have to create the &lt;code&gt;$scope&lt;/code&gt; variable and create the controller. As we add new tests, this duplication is only going to get worse. Thankfully, Jasmine provides &lt;code&gt;beforeEach&lt;/code&gt;, which lets us run a function before each individual test. Let's see how that would tidy up our tests:</source>
          <target state="translated">これで2つのテストがありますが、テスト間の重複に注意してください。どちらも &lt;code&gt;$scope&lt;/code&gt; 変数を作成し、コントローラーを作成する必要があります。新しいテストを追加すると、この重複はさらに悪化します。ありがたいことに、Jasmineは &lt;code&gt;beforeEach&lt;/code&gt; を提供します。これにより、個々のテストの前に関数を実行できます。それがどのようにテストを整理するか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="01bc994e095baae01166aef817062cc1507de306" translate="yes" xml:space="preserve">
          <source>Now we setup the mock backend and create the test specs:</source>
          <target state="translated">ここでは、モックバックエンドを設定し、テスト仕様を作成します。</target>
        </trans-unit>
        <trans-unit id="e2b8c1c02a592bac26655509f0d4ef8342a63dc4" translate="yes" xml:space="preserve">
          <source>Now what do the contents of our &lt;code&gt;animator&lt;/code&gt; variable look like:</source>
          <target state="translated">&lt;code&gt;animator&lt;/code&gt; 変数の内容は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c69de682241b16fef357ef55cb7730c3f9464cc0" translate="yes" xml:space="preserve">
          <source>Now, when the &lt;code&gt;ngIf&lt;/code&gt; expression changes, &lt;code&gt;ngAnimate&lt;/code&gt; will see the spinner animation and use it to animate the &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;leave&lt;/code&gt; event, which doesn't work because the animation is infinite. The element will still be added / removed after a timeout, but there will be a noticeable delay.</source>
          <target state="translated">これで、 &lt;code&gt;ngIf&lt;/code&gt; 式が変更されると、 &lt;code&gt;ngAnimate&lt;/code&gt; はスピナーアニメーションを表示し、それを使用して &lt;code&gt;enter&lt;/code&gt; / &lt;code&gt;leave&lt;/code&gt; イベントをアニメーション化します。これは、アニメーションが無限であるため機能しません。タイムアウト後も要素は追加/削除されますが、顕著な遅延が発生します。</target>
        </trans-unit>
        <trans-unit id="7d0d5f99a37ee70edab031267785cec623ef0119" translate="yes" xml:space="preserve">
          <source>Now, when the view changes (once the link is clicked), ngAnimate will examine the HTML contents to see if there is a match reference between any components in the view that is leaving and the view that is entering. It will scan both the view which is being removed (leave) and inserted (enter) to see if there are any paired DOM elements that contain a matching ref value.</source>
          <target state="translated">これで、ビューが変更されると(リンクがクリックされると)、ngAnimate は HTML コンテンツを検査して、退出するビューと入室するビューのコンポーネント間に一致する参照があるかどうかを確認します。これにより、削除されるビュー(退出)と挿入されるビュー(入室)の両方をスキャンして、一致する参照値を含むペアの DOM 要素があるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f95dbfde74296ed5d57d3a973b8c06886fc00be8" translate="yes" xml:space="preserve">
          <source>Nowadays most of the AngularJS projects are using only element and attribute directives, and in such projects there is no need to compile comments and classes.</source>
          <target state="translated">現在ではAngularJSのプロジェクトのほとんどが要素と属性のディレクティブのみを使用しており、そのようなプロジェクトではコメントやクラスをコンパイルする必要はありません。</target>
        </trans-unit>
        <trans-unit id="c05a46d489572fe209bbfcd6fd0cae15d381835c" translate="yes" xml:space="preserve">
          <source>Number of decimal places to round the amount to, defaults to default max fraction size for current locale</source>
          <target state="translated">金額を四捨五入する小数点以下の桁数、デフォルトは現在のロケールでの最大端数サイズ</target>
        </trans-unit>
        <trans-unit id="2de873c3c8c40a30dc87a6efdf6c6b6b808f8957" translate="yes" xml:space="preserve">
          <source>Number of decimal places to round the number to. If this is not provided then the fraction size is computed from the current locale's number formatting pattern. In the case of the default locale, it will be 3.</source>
          <target state="translated">数値を四捨五入する小数点以下の桁数。これを指定しなかった場合は、現在のロケールの数値書式パターンから端数の大きさを計算します。デフォルトのロケールの場合は 3 となります。</target>
        </trans-unit>
        <trans-unit id="1cab7d05ea962fa769885ebf77b5f10eb16d0782" translate="yes" xml:space="preserve">
          <source>Number of milliseconds between each function call.</source>
          <target state="translated">各関数の呼び出し間のミリ秒数。</target>
        </trans-unit>
        <trans-unit id="7344ecd696099cafba5489c27372c57dd66d2a02" translate="yes" xml:space="preserve">
          <source>Number of pending requests to skip. For example, a value of &lt;code&gt;5&lt;/code&gt; would skip the first 5 pending requests and start flushing from the 6th onwards.</source>
          <target state="translated">スキップする保留中のリクエストの数。たとえば、値 &lt;code&gt;5&lt;/code&gt; は、保留中の最初の5つのリクエストをスキップし、6番目以降のフラッシュを開始します。</target>
        </trans-unit>
        <trans-unit id="8eac9b329b2c580c8d444a64eb6fd91be474f30c" translate="yes" xml:space="preserve">
          <source>Number of responses to flush. If undefined/null, all pending requests (starting after &lt;code&gt;skip&lt;/code&gt;) will be flushed.</source>
          <target state="translated">フラッシュする応答の数。未定義/ nullの場合、（ &lt;code&gt;skip&lt;/code&gt; の後に開始する）保留中のすべての要求がフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="f68b421f294e9b31cc2b54567e284f63c5469db0" translate="yes" xml:space="preserve">
          <source>Number of times to repeat. If not set, or 0, will repeat indefinitely.</source>
          <target state="translated">繰り返し回数を設定します。設定されていない場合、または0の場合は無期限に繰り返します。</target>
        </trans-unit>
        <trans-unit id="e8550249d090d9100ad4508016e764db78774af3" translate="yes" xml:space="preserve">
          <source>Number rounded to &lt;code&gt;fractionSize&lt;/code&gt; appropriately formatted based on the current locale (e.g., in the en_US locale it will have &quot;.&quot; as the decimal separator and include &quot;,&quot; group separators after each third digit).</source>
          <target state="translated">現在のロケールに基づいて適切にフォーマットされた &lt;code&gt;fractionSize&lt;/code&gt; に丸められた数値（たとえば、en_USロケールでは、小数点記号として「。」があり、3番目の各桁の後に「、」グループ区切り記号が含まれます）。</target>
        </trans-unit>
        <trans-unit id="bcd00e774ff736ecae6ca4c95d8c126b66654ba9" translate="yes" xml:space="preserve">
          <source>Number to format.</source>
          <target state="translated">番号をフォーマットに</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="5d0d0d8ab6d5d3a672af3a8d509722442303836e" translate="yes" xml:space="preserve">
          <source>Object components in ng</source>
          <target state="translated">ngのオブジェクトコンポーネント</target>
        </trans-unit>
        <trans-unit id="e11c5730b47cb2ae0f3be1f4242cef69f0b5793c" translate="yes" xml:space="preserve">
          <source>Object components in ngMock</source>
          <target state="translated">ngMock のオブジェクトコンポーネント</target>
        </trans-unit>
        <trans-unit id="0c7088859ca13e9dfdbb54c021c04f3e6cd0c7cb" translate="yes" xml:space="preserve">
          <source>Object containing default options to pass when setting cookies.</source>
          <target state="translated">クッキーを設定する際に渡すデフォルトのオプションを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="995d78c863aed54dbb876e5ea4c402cae1dd9572" translate="yes" xml:space="preserve">
          <source>Object containing default options used when creating &lt;code&gt;$resource&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; インスタンスの作成時に使用されるデフォルトオプションを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="657930111284b6f69526339fc342bb6150cc6a1b" translate="yes" xml:space="preserve">
          <source>Object containing default values for all &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; requests.</source>
          <target state="translated">すべての&lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt;リクエストのデフォルト値を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="759fd0d572c4011472fed205eac43611faa1366f" translate="yes" xml:space="preserve">
          <source>Object describing the request to be made and how it should be processed. The object has following properties:</source>
          <target state="translated">行われるリクエストとその処理方法を記述したオブジェクト。オブジェクトは以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="49310707de14d25a2b81072b3f31cead565e8a0a" translate="yes" xml:space="preserve">
          <source>Object or value to compare.</source>
          <target state="translated">比較するオブジェクトまたは値。</target>
        </trans-unit>
        <trans-unit id="dd24b197b8c1db2163e1ac796ff37f51ee66294a" translate="yes" xml:space="preserve">
          <source>Object properties:</source>
          <target state="translated">オブジェクトのプロパティです。</target>
        </trans-unit>
        <trans-unit id="661911c1c58762c1a751a12e82b587ad0734d14f" translate="yes" xml:space="preserve">
          <source>Object to become context (&lt;code&gt;this&lt;/code&gt;) for the iterator function.</source>
          <target state="translated">反復関数のコンテキスト（ &lt;code&gt;this&lt;/code&gt; ）になるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="28a82450c0a24a36b7195543cddb1b53d9eb4603" translate="yes" xml:space="preserve">
          <source>Object to iterate over.</source>
          <target state="translated">反復処理を行うオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fa827302c104f3c03bab5c1912db8174154c1c51" translate="yes" xml:space="preserve">
          <source>Object with all route configuration Objects as its properties.</source>
          <target state="translated">すべてのルート構成オブジェクトをプロパティとして持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="19569f4887493f227cb304cc348f8b757202b03d" translate="yes" xml:space="preserve">
          <source>Observes an interpolated attribute.</source>
          <target state="translated">補間された属性を観測します。</target>
        </trans-unit>
        <trans-unit id="5d89917fa7619007c94c10f147a56a81bbebfd52" translate="yes" xml:space="preserve">
          <source>Observing &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;, such as double-curly expressions &lt;code&gt;{{expression}}&lt;/code&gt;, register listeners using the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; method. This type of directive needs to be notified whenever the expression changes so that it can update the view.</source>
          <target state="translated">二重カーリー式 &lt;code&gt;{{expression}}&lt;/code&gt; などの監視&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;は、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;メソッドを使用してリスナーを登録します。このタイプのディレクティブは、ビューが更新されるように、式が変更されるたびに通知を受ける必要があります。</target>
        </trans-unit>
        <trans-unit id="fa8994e94ae63340255decacb1a40a4119cd94c0" translate="yes" xml:space="preserve">
          <source>Occurs</source>
          <target state="translated">Occurs</target>
        </trans-unit>
        <trans-unit id="942e0589c947be65474a002d509b097c5723a042" translate="yes" xml:space="preserve">
          <source>Official AngularJS Tutorial</source>
          <target state="translated">AngularJS公式チュートリアル</target>
        </trans-unit>
        <trans-unit id="5211024b2c932653139044bde2ef35e801bc766a" translate="yes" xml:space="preserve">
          <source>Official Communications</source>
          <target state="translated">公式通信</target>
        </trans-unit>
        <trans-unit id="3dbb82784f4ceea929a606b795d9c5a9fff56ccd" translate="yes" xml:space="preserve">
          <source>Official announcements, news and releases are posted to our blog, G+ and Twitter:</source>
          <target state="translated">公式発表、ニュース、リリースはブログ、G+、Twitterに掲載しています。</target>
        </trans-unit>
        <trans-unit id="aee2a58d9d00b28c3d6357134f216912f4105e7f" translate="yes" xml:space="preserve">
          <source>Offset of the &lt;em&gt;desired&lt;/em&gt; timezone in hours (fractions will be honored)</source>
          <target state="translated">&lt;em&gt;希望する&lt;/em&gt;タイムゾーンのオフセット（時間単位）（一部は優先されます）</target>
        </trans-unit>
        <trans-unit id="45919291790453a621a3d3ca6cb3d2791302bb6c" translate="yes" xml:space="preserve">
          <source>Offset to deduct from the total number.</source>
          <target state="translated">合計数から差し引くためのオフセット。</target>
        </trans-unit>
        <trans-unit id="3397619639d18ef70105382abc79e8b41ababef1" translate="yes" xml:space="preserve">
          <source>Often it's desirable to pass data from the isolate scope via an expression to the parent scope, this can be done by passing a map of local variable names and values into the expression wrapper function. For example, the &lt;code&gt;hideDialog&lt;/code&gt; function takes a message to display when the dialog is hidden. This is specified in the directive by calling &lt;code&gt;close({message: 'closing for now'})&lt;/code&gt;. Then the local variable &lt;code&gt;message&lt;/code&gt; will be available within the &lt;code&gt;on-close&lt;/code&gt; expression.</source>
          <target state="translated">分離スコープから式を介して親スコープにデータを渡すことが望ましい場合がよくあります。これは、ローカル変数名と値のマップを式ラッパー関数に渡すことで実行できます。たとえば、 &lt;code&gt;hideDialog&lt;/code&gt; 関数は、ダイアログが非表示のときに表示するメッセージを受け取ります。これは、 &lt;code&gt;close({message: 'closing for now'})&lt;/code&gt; 呼び出すことにより、ディレクティブで指定されます。次に、ローカル変数 &lt;code&gt;message&lt;/code&gt; が &lt;code&gt;on-close&lt;/code&gt; 式内で使用可能になります。</target>
        </trans-unit>
        <trans-unit id="fc10f6b83c02595fc0e689a6e9a864045ddab25f" translate="yes" xml:space="preserve">
          <source>Often services have no configuration options and there is no need to add methods to the service provider. The provider will be no more than a constructor function with a &lt;code&gt;$get&lt;/code&gt; property. For these cases the &lt;a href=&quot;%24provide&quot;&gt;$provide&lt;/a&gt; service has additional helper methods to register services without specifying a provider.</source>
          <target state="translated">多くの場合、サービスには構成オプションがなく、サービスプロバイダーにメソッドを追加する必要はありません。プロバイダーは、 &lt;code&gt;$get&lt;/code&gt; プロパティを持つコンストラクター関数にすぎません。これらの場合、&lt;a href=&quot;%24provide&quot;&gt;$ provide&lt;/a&gt;サービスには、プロバイダーを指定せずにサービスを登録するための追加のヘルパーメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="5ea29abb9e633dfb97ed5c1299fc4f4bd33508a9" translate="yes" xml:space="preserve">
          <source>Often, we would like to inject a reference once, in a &lt;code&gt;beforeEach()&lt;/code&gt; block and reuse this in multiple &lt;code&gt;it()&lt;/code&gt; clauses. To be able to do this we must assign the reference to a variable that is declared in the scope of the &lt;code&gt;describe()&lt;/code&gt; block. Since we would, most likely, want the variable to have the same name of the reference we have a problem, since the parameter to the &lt;code&gt;inject()&lt;/code&gt; function would hide the outer variable.</source>
          <target state="translated">多くの場合、参照を &lt;code&gt;beforeEach()&lt;/code&gt; ブロックに1回だけ挿入し、これを複数の &lt;code&gt;it()&lt;/code&gt; 句で再利用します。これを行うには、 &lt;code&gt;describe()&lt;/code&gt; ブロックのスコープで宣言されている変数に参照を割り当てる必要があります。 &lt;code&gt;inject()&lt;/code&gt; 関数のパラメーターが外部変数を非表示にするため、ほとんどの場合、変数に参照と同じ名前を付ける必要があるため、問題があります。</target>
        </trans-unit>
        <trans-unit id="55cc916839b43a01a85adc73fa724a6b9294ff71" translate="yes" xml:space="preserve">
          <source>Older browsers will redirect regular URLs to hashbang URLs.</source>
          <target state="translated">古いブラウザでは、通常のURLはハッシュバングURLにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="730fe0b7474bfd48c7cbf76d43e5e9fcaa819084" translate="yes" xml:space="preserve">
          <source>Omitted or undefined options will leave the corresponding configuration values unchanged.</source>
          <target state="translated">オプションを省略した場合や未定義の場合は、対応する構成値は変更されません。</target>
        </trans-unit>
        <trans-unit id="3d94300e6072360828bff66e63d1c6eb5a9039e5" translate="yes" xml:space="preserve">
          <source>On failure, the promise is rejected with the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;http response&lt;/a&gt; object.</source>
          <target state="translated">失敗すると、&lt;a href=&quot;../../ng/service/%24http&quot;&gt;http応答&lt;/a&gt;オブジェクトでプロミスが拒否されます。</target>
        </trans-unit>
        <trans-unit id="3150ca64068eaff88aaa9f32a3f98bf979b1b891" translate="yes" xml:space="preserve">
          <source>On success, the promise is resolved with the same resource instance or collection object, updated with data from server. This makes it easy to use in the &lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;&lt;code&gt;resolve&lt;/code&gt; section of &lt;code&gt;$routeProvider.when()&lt;/code&gt;&lt;/a&gt; to defer view rendering until the resource(s) are loaded.</source>
          <target state="translated">成功すると、promiseは同じリソースインスタンスまたはコレクションオブジェクトで解決され、サーバーからのデータで更新されます。これにより&lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;、&lt;/a&gt; &lt;code&gt;$routeProvider.when()&lt;/code&gt; &lt;code&gt;resolve&lt;/code&gt; セクションでの使用が容易になり、リソースがロードされるまでビューのレンダリングを延期できます。</target>
        </trans-unit>
        <trans-unit id="03e6a8fff8ee4ceb9f5d6a1cede49118cf8c5e9d" translate="yes" xml:space="preserve">
          <source>On this page, you will find a list of official AngularJS resources on various topics.</source>
          <target state="translated">このページでは、様々なトピックに関する公式のAngularJSリソースの一覧を見ることができます。</target>
        </trans-unit>
        <trans-unit id="7f0b69c7df5f5044072412f7dcb0c295c8f63c40" translate="yes" xml:space="preserve">
          <source>On to more complex examples!</source>
          <target state="translated">もっと複雑な例を見てみましょう!</target>
        </trans-unit>
        <trans-unit id="a20c241950bf7f4ec7065c9cedf5f5b4df396af2" translate="yes" xml:space="preserve">
          <source>Once again, &lt;code&gt;$animateCss&lt;/code&gt; is designed to be used inside of a registered JavaScript animation that is powered by ngAnimate. It is possible to use &lt;code&gt;$animateCss&lt;/code&gt; directly inside of a directive, however, any automatic control over cancelling animations and/or preventing animations from being run on child elements will not be handled by AngularJS. For this to work as expected, please use &lt;code&gt;$animate&lt;/code&gt; to trigger the animation and then setup a JavaScript animation that injects &lt;code&gt;$animateCss&lt;/code&gt; to trigger the CSS animation.</source>
          <target state="translated">繰り返しになりますが、 &lt;code&gt;$animateCss&lt;/code&gt; は、ngAnimateを使用して登録されたJavaScriptアニメーション内で使用するように設計されています。 &lt;code&gt;$animateCss&lt;/code&gt; をディレクティブ内で直接使用することは可能ですが、アニメーションのキャンセルおよび/またはアニメーションが子要素で実行されるのを防止する自動制御は、AngularJSでは処理されません。これを期待どおりに機能させるには、 &lt;code&gt;$animate&lt;/code&gt; を使用してアニメーションをトリガーし、次に &lt;code&gt;$animateCss&lt;/code&gt; を挿入してCSS アニメーションをトリガーするJavaScriptアニメーションを設定してください。</target>
        </trans-unit>
        <trans-unit id="832079f71980ce1bf7e842ef4695d9a39eb9d0c3" translate="yes" xml:space="preserve">
          <source>Once all directives matching a DOM element have been identified, the compiler sorts the directives by their &lt;code&gt;priority&lt;/code&gt;.</source>
          <target state="translated">DOM要素に一致するすべてのディレクティブが識別されると、コンパイラはディレクティブを &lt;code&gt;priority&lt;/code&gt; ソートします。</target>
        </trans-unit>
        <trans-unit id="a5f730f0b3ca3a229d8d79e42506be6dbbf141ef" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;$location&lt;/code&gt; service is instantiated, you can interact with it via jQuery-style getter and setter methods that allow you to get or change the current URL in the browser.</source>
          <target state="translated">いったん &lt;code&gt;$location&lt;/code&gt; サービスがインスタンス化され、あなたがブラウザで現在のURLを取得したり、変更することができるようにjQueryスタイルのgetterメソッドとsetterメソッド経由で相互作用することができます。</target>
        </trans-unit>
        <trans-unit id="a6e75b43c6e8a6eaaaf021b30cd3620a33cd3961" translate="yes" xml:space="preserve">
          <source>Once the AngularJS &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop finishes, the execution leaves the AngularJS and JavaScript context. This is followed by the browser re-rendering the DOM to reflect any changes.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;ループが終了すると、実行はAngularJSとJavaScriptコンテキストを離れます。これに続いて、ブラウザがDOMを再レンダリングして変更を反映します。</target>
        </trans-unit>
        <trans-unit id="e021990af4a5931d2b41ef6a3af610ec4c360b79" translate="yes" xml:space="preserve">
          <source>Once the Controller has been attached to the DOM, the &lt;code&gt;double&lt;/code&gt; method can be invoked in an AngularJS expression in the template:</source>
          <target state="translated">コントローラーがDOMにアタッチされると、テンプレートのAngularJS式で &lt;code&gt;double&lt;/code&gt; メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="539e0ec3e60f15ed5b3ffd14cdc4bf07b3d5f281" translate="yes" xml:space="preserve">
          <source>Once the callback executes, the browser leaves the JavaScript context and re-renders the view based on DOM changes.</source>
          <target state="translated">コールバックが実行されると、ブラウザは JavaScript のコンテキストを離れ、DOM の変更に基づいてビューを再レンダリングします。</target>
        </trans-unit>
        <trans-unit id="c42a629e99e7a6cb394fb6dd8cda3b8c140669fe" translate="yes" xml:space="preserve">
          <source>Once the configuration phase is over, interaction with providers is disallowed and the process of creating services starts. We call this part of the application life-cycle the run phase.</source>
          <target state="translated">設定フェーズが終わると、プロバイダとのやりとりは禁止され、サービスを作成するプロセスが始まります。アプリケーションのライフサイクルのこの部分をランフェーズと呼んでいます。</target>
        </trans-unit>
        <trans-unit id="4f503d8cfa1aefbfebbf220fc051e38e94c15149" translate="yes" xml:space="preserve">
          <source>Once this threshold is exceeded, either the horizontal or vertical delta is greater.</source>
          <target state="translated">このしきい値を超えると、水平または垂直方向のデルタのどちらかが大きくなります。</target>
        </trans-unit>
        <trans-unit id="ee5e5d4a8e33c0f18fe55ea3714b42beb7574f24" translate="yes" xml:space="preserve">
          <source>One advantage of this approach is that there's no array of names to keep in sync with the function parameters. You can also freely reorder dependencies.</source>
          <target state="translated">このアプローチの利点の一つは、関数のパラメータと同期させるための名前の配列がないことです。また、依存関係を自由に並べ替えることもできます。</target>
        </trans-unit>
        <trans-unit id="e81236156cec40b8f929730878ed25e4592cd246" translate="yes" xml:space="preserve">
          <source>One caveat with this combination of CSS and &lt;code&gt;aria-hidden&lt;/code&gt;: you must also remove links and other interactive child elements from the tab order using &lt;code&gt;tabIndex=&amp;ldquo;-1&amp;rdquo;&lt;/code&gt; on each control. This ensures screen reader users won't accidentally focus on &quot;mystery elements&quot;. Managing tab index on every child control can be complex and affect performance, so it&amp;rsquo;s best to just stick with the default &lt;code&gt;display: none&lt;/code&gt; CSS. See the &lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use&quot;&gt;fourth rule of ARIA use&lt;/a&gt;.</source>
          <target state="translated">このCSSと &lt;code&gt;aria-hidden&lt;/code&gt; の組み合わせに関する1つの注意点：各コントロールで &lt;code&gt;tabIndex=&amp;ldquo;-1&amp;rdquo;&lt;/code&gt; を使用して、リンクやその他のインタラクティブな子要素をタブオーダーから削除する必要があります。これにより、スクリーンリーダーのユーザーが誤って「ミステリー要素」に集中することがなくなります。すべての子コントロールのタブインデックスの管理は複雑でパフォーマンスに影響を与える可能性があるため、デフォルトの &lt;code&gt;display: none&lt;/code&gt; CSSを使用しないことをお勧めします。&lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use&quot;&gt;ARIA使用の4番目のルールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eaf5124a2290846d7bfbe410481264aa4df480c2" translate="yes" xml:space="preserve">
          <source>One caveat with this combination of CSS and &lt;code&gt;aria-hidden&lt;/code&gt;: you must also remove links and other interactive child elements from the tab order using &lt;code&gt;tabIndex=&amp;ldquo;-1&amp;rdquo;&lt;/code&gt; on each control. This ensures screen reader users won't accidentally focus on &quot;mystery elements&quot;. Managing tab index on every child control can be complex and affect performance, so it&amp;rsquo;s best to just stick with the default &lt;code&gt;display: none&lt;/code&gt; CSS. See the &lt;a href=&quot;https://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use&quot;&gt;fourth rule of ARIA use&lt;/a&gt;.</source>
          <target state="translated">CSSと &lt;code&gt;aria-hidden&lt;/code&gt; のこの組み合わせに関する1つの注意点：各コントロールで &lt;code&gt;tabIndex=&amp;ldquo;-1&amp;rdquo;&lt;/code&gt; を使用して、タブ順序からリンクやその他のインタラクティブな子要素も削除する必要があります。これにより、スクリーンリーダーのユーザーが誤って「謎の要素」に集中することがなくなります。すべての子コントロールのタブインデックスの管理は複雑でパフォーマンスに影響を与える可能性があるため、デフォルトの &lt;code&gt;display: none&lt;/code&gt; CSSなし）を使用することをお勧めします。&lt;a href=&quot;https://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use&quot;&gt;ARIA使用の4番目のルールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4801ac26d4a643695f54dd7f69d290e1fed765ee" translate="yes" xml:space="preserve">
          <source>One example of such a context is rendering arbitrary content via the &lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; directive. If the content is provided by a user there is a chance of Cross Site Scripting (XSS) attacks. The &lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; directive will not render content that is not marked as safe by &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;../api/ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module can be used to clean such user provided content and mark the content as safe.</source>
          <target state="translated">このようなコンテキストの1つの例は、&lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; &lt;/a&gt;ディレクティブを介して任意のコンテンツをレンダリングすることです。コンテンツがユーザーによって提供された場合、クロスサイトスクリプティング（XSS）攻撃の可能性があります。&lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; の&lt;/a&gt;ディレクティブは、によって安全であるとマークされていないコンテンツ表示されません&lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../api/ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; の&lt;/a&gt;モジュールは、クリーン、ユーザ提供内容に使用され、安全であるとコンテンツをマークすることができます。</target>
        </trans-unit>
        <trans-unit id="8da34b97a8ac7368cf4a952a5049271759ff499d" translate="yes" xml:space="preserve">
          <source>One issue occurs if you want to preselect an option. For example, if you set the model to an object that is equal to an object in your collection, &lt;code&gt;ngOptions&lt;/code&gt; won't be able to set the selection, because the objects are not identical. So by default, you should always reference the item in your collection for preselections, e.g.: &lt;code&gt;$scope.selected = $scope.collection[3]&lt;/code&gt;.</source>
          <target state="translated">オプションを事前に選択する場合、1つの問題が発生します。たとえば、コレクション内のオブジェクトと等しいオブジェクトにモデルを設定した場合、オブジェクトが同一ではないため、 &lt;code&gt;ngOptions&lt;/code&gt; は選択を設定できません。したがって、デフォルトでは、事前選択のために常にコレクション内のアイテムを参照する必要があります。例： &lt;code&gt;$scope.selected = $scope.collection[3]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03cf224c49b28630f423eb00b170a96952f63750" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; is required.</source>
          <target state="translated">一つ &lt;code&gt;template&lt;/code&gt; や &lt;code&gt;templateUrl&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="1e0b15fa92a730eefc11a4f041fe211c93f8a77f" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;template&lt;/code&gt; is required.</source>
          <target state="translated">一つ &lt;code&gt;templateUrl&lt;/code&gt; または &lt;code&gt;template&lt;/code&gt; 必要です。</target>
        </trans-unit>
        <trans-unit id="854c677d0ec17d170fc8ceb1283231687845a9df" translate="yes" xml:space="preserve">
          <source>One of the most common use cases for directives is to create reusable components.</source>
          <target state="translated">ディレクティブの最も一般的なユースケースの一つは、再利用可能なコンポーネントを作成することです。</target>
        </trans-unit>
        <trans-unit id="0a1e704a493b53f759675b1a40b45e4e787bc094" translate="yes" xml:space="preserve">
          <source>One-time binding</source>
          <target state="translated">ワンタイムバインディング</target>
        </trans-unit>
        <trans-unit id="d835907bfc4fb4d1c778ab9ea9cff8835777aba5" translate="yes" xml:space="preserve">
          <source>One-time binding expressions will retain the value of the expression at the end of the digest cycle as long as that value is not undefined. If the value of the expression is set within the digest loop and later, within the same digest loop, it is set to undefined, then the expression is not fulfilled and will remain watched.</source>
          <target state="translated">一回限りのバインディング式は、その値が未定義でない限り、ダイジェストサイクルの終了時に式の値を保持します。式の値がダイジェストループ内で設定され、その後、同じダイジェストループ内で未定義に設定された場合、その式は満たされず、監視されたままになります。</target>
        </trans-unit>
        <trans-unit id="96499287e9d0872201af20706453570303a19464" translate="yes" xml:space="preserve">
          <source>One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings back to the parent. However, it does not make this completely impossible.</source>
          <target state="translated">一方向バインディングは、分離されたスコープバインディングへの変更を親に伝搬させる予定がない場合に便利です。しかし、これを完全に不可能にするわけではありません。</target>
        </trans-unit>
        <trans-unit id="dccdcd12500ea529350f72fe2d3b19576485f9d7" translate="yes" xml:space="preserve">
          <source>Only GET and JSONP requests are cached.</source>
          <target state="translated">GETリクエストとJSONPリクエストのみキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="cdbf524cafe4d97e9aa889d4e8172073d5ad8692" translate="yes" xml:space="preserve">
          <source>Only enumerable properties are taken into account. Non-enumerable properties (both on &lt;code&gt;source&lt;/code&gt; and on &lt;code&gt;destination&lt;/code&gt;) will be ignored.</source>
          <target state="translated">列挙可能なプロパティのみが考慮されます。列挙できないプロパティ（ &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;destination&lt;/code&gt; の両方）は無視されます。</target>
        </trans-unit>
        <trans-unit id="87ef77c843d94d8412ef52b8157422f49c4e5ce1" translate="yes" xml:space="preserve">
          <source>Only trusted origins that you have control over and make sure you understand the implications of doing so.</source>
          <target state="translated">自分がコントロールできる信頼できるオリジンだけが、そうすることの意味合いを理解しているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="fd014ff097e63e654d665440447b5e12e4b2ada5" translate="yes" xml:space="preserve">
          <source>Only whitelist origins that you have control over and make sure you understand the implications of doing so.</source>
          <target state="translated">自分がコントロールできるオリジンのみをホワイトリスト化し、その意味を理解しているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="a8bfc2e5f51edb5b85fb55866f0e43ef5e595160" translate="yes" xml:space="preserve">
          <source>Opening a regular URL in a legacy browser -&amp;gt; redirects to a hashbang URL</source>
          <target state="translated">レガシーブラウザで通常のURLを開く-&amp;gt;ハッシュバングURLにリダイレクトする</target>
        </trans-unit>
        <trans-unit id="eac6c8960165a7f26749c618d7083ac4d241844c" translate="yes" xml:space="preserve">
          <source>Opening hashbang URL in a modern browser -&amp;gt; rewrites to a regular URL</source>
          <target state="translated">最新のブラウザーでハッシュバングURLを開く-&amp;gt;通常のURLに書き換える</target>
        </trans-unit>
        <trans-unit id="4cb67181c995794bf3233189f17b34d6d6217d98" translate="yes" xml:space="preserve">
          <source>Optional arguments to be prebound to the &lt;code&gt;fn&lt;/code&gt; function call.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; 関数呼び出しに事前バインドされるオプションの引数。</target>
        </trans-unit>
        <trans-unit id="ac0d0c08de325f31e275247f3679a58b231c7aae" translate="yes" xml:space="preserve">
          <source>Optional configuration function for the module. Same as &lt;a href=&quot;../type/angular.module#config.html&quot;&gt;Module#config()&lt;/a&gt;.</source>
          <target state="translated">モジュールのオプション設定機能。&lt;a href=&quot;../type/angular.module#config.html&quot;&gt;Module＃config（）と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="b0e8d88ea45891039fc896a3cf76fcc8a6285b7f" translate="yes" xml:space="preserve">
          <source>Optional configuration object. See &lt;a href=&quot;%24http#%24http-arguments.html&quot;&gt;&lt;code&gt;$http()&lt;/code&gt; arguments&lt;/a&gt;.</source>
          <target state="translated">オプションの構成オブジェクト。&lt;a href=&quot;%24http#%24http-arguments.html&quot;&gt; &lt;code&gt;$http()&lt;/code&gt; 引数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ef8683e6e87ff851919c02dfa80a3465f8201585" translate="yes" xml:space="preserve">
          <source>Optional event type. If none is specified, the function tries to determine the right event type for the element, e.g. &lt;code&gt;change&lt;/code&gt; for &lt;code&gt;input[text]&lt;/code&gt;.</source>
          <target state="translated">オプションのイベントタイプ。何も指定されていない場合、関数は要素の正しいイベントタイプを決定しようとします（たとえば、 &lt;code&gt;input[text]&lt;/code&gt; &lt;code&gt;change&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d9e2a88dac526935cb244eb3725881ffa83069f2" translate="yes" xml:space="preserve">
          <source>Optional information about the context in which the error was thrown.</source>
          <target state="translated">エラーがスローされたコンテキストに関するオプション情報。</target>
        </trans-unit>
        <trans-unit id="1a8192981f2869d35df047f536371348437dfb99" translate="yes" xml:space="preserve">
          <source>Optional object. If preset then any argument names are read from this object first, before the &lt;code&gt;$injector&lt;/code&gt; is consulted.</source>
          <target state="translated">オプションのオブジェクト。事前設定されている場合、 &lt;code&gt;$injector&lt;/code&gt; が調べられる前に、引数名がこのオブジェクトから最初に読み取られます。</target>
        </trans-unit>
        <trans-unit id="5308b40f28c97e7121b60297dbc6d959146a267f" translate="yes" xml:space="preserve">
          <source>Optional one or more arguments which will be passed onto the event listeners.</source>
          <target state="translated">イベントリスナーに渡される1つ以上の引数。</target>
        </trans-unit>
        <trans-unit id="ffb1a7ca3375dfcc6ea76b0ae3ce4b9bb97b4432" translate="yes" xml:space="preserve">
          <source>Optionally, a single hard-coded &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element, with the value set to an empty string, can be nested into the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element. This element will then represent the &lt;code&gt;null&lt;/code&gt; or &quot;not selected&quot; option. See example below for demonstration.</source>
          <target state="translated">オプションで、値が空の文字列に設定された単一のハードコードされた &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素にネストできます。この要素は、 &lt;code&gt;null&lt;/code&gt; または「選択されていない」オプションを表します。デモについては、以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="be30a36044b515fd6383450db5f35c6cd47f0ba2" translate="yes" xml:space="preserve">
          <source>Optionally, you can also pass a &lt;code&gt;delay&lt;/code&gt; argument to only flush tasks that are scheduled to be executed within &lt;code&gt;delay&lt;/code&gt; milliseconds. Currently, &lt;code&gt;delay&lt;/code&gt; only applies to timeouts, since all other tasks have a delay of 0 (i.e. they are scheduled to be executed as soon as possible, but still asynchronously).</source>
          <target state="translated">オプションで、 &lt;code&gt;delay&lt;/code&gt; 引数を渡して、 &lt;code&gt;delay&lt;/code&gt; ミリ秒以内に実行されるようにスケジュールされているタスクのみをフラッシュすることもできます。現在、 &lt;code&gt;delay&lt;/code&gt; はタイムアウトにのみ適用されます。これは、他のすべてのタスクの遅延が0であるためです（つまり、できるだけ早く実行されるようにスケジュールされていますが、非同期的に実行されます）。</target>
        </trans-unit>
        <trans-unit id="4b5f9957c039daa83cf25452707710c1e43b965d" translate="yes" xml:space="preserve">
          <source>Options object that specifies the cache behavior. Properties:</source>
          <target state="translated">キャッシュの動作を指定するオプションオブジェクト。プロパティを指定します。</target>
        </trans-unit>
        <trans-unit id="0dfe73319c3612f8a3b2d0b40ebbd05b380be0ec" translate="yes" xml:space="preserve">
          <source>Options object. See &lt;a href=&quot;../provider/%24cookiesprovider#defaults.html&quot;&gt;$cookiesProvider.defaults&lt;/a&gt;</source>
          <target state="translated">オプションオブジェクト。&lt;a href=&quot;../provider/%24cookiesprovider#defaults.html&quot;&gt;$ cookiesProvider.defaultsを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="b1a0580f34c8e279c5382e2d17c2d33fd81d807e" translate="yes" xml:space="preserve">
          <source>Or you can even overwrite the whole &lt;code&gt;actions&lt;/code&gt; list and specify your own:</source>
          <target state="translated">または、 &lt;code&gt;actions&lt;/code&gt; リスト全体を上書きして、独自のアクションリストを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="53ea91d4f8d828842a74887526a654e8ed22c0de" translate="yes" xml:space="preserve">
          <source>Order of requests matters</source>
          <target state="translated">依頼の順番に関する事項</target>
        </trans-unit>
        <trans-unit id="545aec36915e5edaf380fe6995274a74ca310fc5" translate="yes" xml:space="preserve">
          <source>Ordering a table with ngRepeat</source>
          <target state="translated">ngRepeatでテーブルを注文する</target>
        </trans-unit>
        <trans-unit id="b328f238cd54c5675a77847bfa732f0014d578b3" translate="yes" xml:space="preserve">
          <source>Ordering the specified &lt;code&gt;collection&lt;/code&gt; happens in two phases:</source>
          <target state="translated">指定された &lt;code&gt;collection&lt;/code&gt; 注文は、次の2つのフェーズで行われます。</target>
        </trans-unit>
        <trans-unit id="ab286f64bf8ad2bdaf9ba29734918078d2434ff7" translate="yes" xml:space="preserve">
          <source>Ordinarily, we would expect that &lt;code&gt;{{name}}&lt;/code&gt; would be &lt;code&gt;Jeff&lt;/code&gt;. However, we see in this example that the &lt;code&gt;{{name}}&lt;/code&gt; binding is still &lt;code&gt;Tobias&lt;/code&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;{{name}}&lt;/code&gt; は &lt;code&gt;Jeff&lt;/code&gt; になると予想されます。ただし、この例では、 &lt;code&gt;{{name}}&lt;/code&gt; バインディングがまだ &lt;code&gt;Tobias&lt;/code&gt; であることがわかります。</target>
        </trans-unit>
        <trans-unit id="1167c4f1730b003f23191dfd48807c264f48a17b" translate="yes" xml:space="preserve">
          <source>Other Features</source>
          <target state="translated">その他の特徴</target>
        </trans-unit>
        <trans-unit id="456d2677e518e26ef0d24a4e5e0c50a00c1e8bbd" translate="yes" xml:space="preserve">
          <source>Other Languages</source>
          <target state="translated">その他の言語</target>
        </trans-unit>
        <trans-unit id="020a1308bcbd2b8d869bb1b5c21560f23a1fa146" translate="yes" xml:space="preserve">
          <source>Other attributes may also not work as expected when they contain interpolation markup, and can be used with &lt;code&gt;ngAttr&lt;/code&gt; instead. The following is a list of known problematic attributes:</source>
          <target state="translated">他の属性も、補間マークアップが含まれていると期待どおりに &lt;code&gt;ngAttr&lt;/code&gt; ず、代わりにngAttrで使用できます。以下は、既知の問題のある属性のリストです。</target>
        </trans-unit>
        <trans-unit id="e4dd7ab1c0e39f0f88a1797f64ef4a8003416e45" translate="yes" xml:space="preserve">
          <source>Otherwise whitespace around the delimiter is ignored when splitting (although it is respected when joining the list items back together) and whitespace around each list item is stripped before it is added to the model.</source>
          <target state="translated">それ以外の場合、デリミタの周りの空白は分割時に無視され(リスト項目を結合する際には尊重されますが)、各リスト項目の周りの空白はモデルに追加される前に取り除かれます。</target>
        </trans-unit>
        <trans-unit id="a0675534b64e196386b94e2804a59bd1bc23fa8e" translate="yes" xml:space="preserve">
          <source>Otherwise, return:</source>
          <target state="translated">そうでなければ戻ります。</target>
        </trans-unit>
        <trans-unit id="072eb9bf03eeb09cbe67d59dcba2963501dc97e5" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;myCustomer&lt;/code&gt; directive above is great, but it has a fatal flaw. We can only use it once within a given scope.</source>
          <target state="translated">私たちの &lt;code&gt;myCustomer&lt;/code&gt; ディレクティブは、上記素晴らしいですが、それは致命的な欠陥を持っています。特定のスコープ内で1回だけ使用できます。</target>
        </trans-unit>
        <trans-unit id="558209072aafaacde0c7cdb5a66cdfe66c0d2c5d" translate="yes" xml:space="preserve">
          <source>Outputs are realized with &lt;code&gt;&amp;amp;&lt;/code&gt; bindings, which function as callbacks to component events.</source>
          <target state="translated">出力は、コンポーネントイベントへのコールバックとして機能する &lt;code&gt;&amp;amp;&lt;/code&gt; バインディングで実現されます。</target>
        </trans-unit>
        <trans-unit id="22ba9ea1494be6e8782c0e21dbbf76a0b41e8a62" translate="yes" xml:space="preserve">
          <source>Override the current model options settings programmatically.</source>
          <target state="translated">現在のモデルオプション設定をプログラムで上書きします。</target>
        </trans-unit>
        <trans-unit id="ef041aeb92c07c1a85fa7fdac09f3f7219358b54" translate="yes" xml:space="preserve">
          <source>Override the property name to use when attaching the controller to the scope.</source>
          <target state="translated">コントローラをスコープにアタッチする際に使用するプロパティ名をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="22b14e1048bf2a3d5b605204778ea44f9663ce36" translate="yes" xml:space="preserve">
          <source>Overriding .ng-hide</source>
          <target state="translated">.ng-hideをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="9a7fbfe01d220ff7f0962d309017a2ffc384f7fe" translate="yes" xml:space="preserve">
          <source>Overriding immediate updates</source>
          <target state="translated">即時更新を上書きする</target>
        </trans-unit>
        <trans-unit id="fa09aea495028381f0827010d76af2aac843fe48" translate="yes" xml:space="preserve">
          <source>Overriding the Default Transformations Per Request</source>
          <target state="translated">リクエストごとのデフォルトの変換を上書きする</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="b4524ad64470cfefa0e6ef5ccaabb2ecf125384c" translate="yes" xml:space="preserve">
          <source>Page reload navigation</source>
          <target state="translated">ページのリロードナビゲーション</target>
        </trans-unit>
        <trans-unit id="0f332eeefd007bb0043ccb46738196508c6a602b" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="6cf3b6abb1b4f5ccecfcf57f0c3af07ef7fb83d1" translate="yes" xml:space="preserve">
          <source>Parse all your application element classes.</source>
          <target state="translated">すべてのアプリケーション要素クラスを解析します。</target>
        </trans-unit>
        <trans-unit id="8ca73572c8320134a2008b43c3b43eeb683a50e5" translate="yes" xml:space="preserve">
          <source>Parse all your application html comments.</source>
          <target state="translated">すべてのアプリケーションのhtmlコメントを解析します。</target>
        </trans-unit>
        <trans-unit id="3f4af19a0d34ae188e13ee7ba944ba662612d7e9" translate="yes" xml:space="preserve">
          <source>Parsers are used to sanitize / convert the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パーサーは&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt; /変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d7cd56f2a2a3f47830760edfb89946eb7b9e2cd1" translate="yes" xml:space="preserve">
          <source>Pass</source>
          <target state="translated">Pass</target>
        </trans-unit>
        <trans-unit id="3724e4e357a62c0e307b4b1ff0955749ca8faa98" translate="yes" xml:space="preserve">
          <source>Passing an array (&lt;code&gt;[...]&lt;/code&gt;) is equivalent to passing &lt;code&gt;{htmlElements: [...]}&lt;/code&gt;.</source>
          <target state="translated">配列（ &lt;code&gt;[...]&lt;/code&gt; ）を渡すことは、 &lt;code&gt;{htmlElements: [...]}&lt;/code&gt; を渡すことと同じです。</target>
        </trans-unit>
        <trans-unit id="f7ca9f03a097ecb064033e0b20fd57b688e73b06" translate="yes" xml:space="preserve">
          <source>Passing one argument retrieves an existing &lt;a href=&quot;../type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;, whereas passing more than one argument creates a new &lt;a href=&quot;../type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">1つの引数を渡すと、既存の&lt;a href=&quot;../type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; が&lt;/a&gt;取得されますが、複数の引数を渡すと、新しい&lt;a href=&quot;../type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; が&lt;/a&gt;作成されます。</target>
        </trans-unit>
        <trans-unit id="5ee5be4397673c7b0cfcf05f36fb561ca4a2f795" translate="yes" xml:space="preserve">
          <source>Patch the $delegate</source>
          <target state="translated">代議員にパッチを当てる</target>
        </trans-unit>
        <trans-unit id="c24b1eabafb92c695a49765eb3856c47bb2e3c5e" translate="yes" xml:space="preserve">
          <source>Pending tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;を介してスケジュールされた保留中のタスク。</target>
        </trans-unit>
        <trans-unit id="949f1fe22a6e90a316f8a5355573c25a0073893c" translate="yes" xml:space="preserve">
          <source>Pending tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;. These include tasks scheduled via &lt;code&gt;$evalAsync()&lt;/code&gt; indirectly (such as &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises).</source>
          <target state="translated">&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;を介してスケジュールされた保留中のタスク。これらには、 &lt;code&gt;$evalAsync()&lt;/code&gt; を介して間接的にスケジュールされたタスク（&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; promiseなど）が含まれます。</target>
        </trans-unit>
        <trans-unit id="37a92dc5c98d97bbf900c4f6991b8aac335f50fc" translate="yes" xml:space="preserve">
          <source>Pending timeouts (via &lt;a href=&quot;%24timeout&quot;&gt;&lt;code&gt;$timeout&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">保留中のタイムアウト（&lt;a href=&quot;%24timeout&quot;&gt; &lt;code&gt;$timeout&lt;/code&gt; &lt;/a&gt;経由）。</target>
        </trans-unit>
        <trans-unit id="c7c922ddec77e6492fd9602470ecd3c278ff489f" translate="yes" xml:space="preserve">
          <source>Performs an inline animation on the element which applies the provided to and from CSS styles to the element. If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take on the provided styles. For example, if a transition animation is set for the given className, then the provided &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; styles will be applied alongside the given transition. If the CSS style provided in &lt;code&gt;from&lt;/code&gt; does not have a corresponding style in &lt;code&gt;to&lt;/code&gt;, the style in &lt;code&gt;from&lt;/code&gt; is applied immediately, and no animation is run. If a JavaScript animation is detected then the provided styles will be given in as function parameters into the &lt;code&gt;animate&lt;/code&gt; method (or as part of the &lt;code&gt;options&lt;/code&gt; parameter):</source>
          <target state="translated">提供されたCSSスタイルを要素に適用するインラインアニメーションを要素に実行します。検出されたCSS遷移、キーフレーム、またはJavaScriptが指定されたclassName値と一致する場合、アニメーションは指定されたスタイルを引き継ぎます。たとえば、トランジションアニメーションが指定されたclassNameに設定されている場合、提供さ &lt;code&gt;from&lt;/code&gt; および &lt;code&gt;to&lt;/code&gt; スタイルは、指定されたトランジションと一緒に適用されます。で提供CSSスタイル場合 &lt;code&gt;from&lt;/code&gt; 、対応するスタイルを持っていない &lt;code&gt;to&lt;/code&gt; 、中のスタイル &lt;code&gt;from&lt;/code&gt; すぐに適用され、何のアニメーションは実行されません。 JavaScriptアニメーションが検出されると、提供されたスタイルが関数パラメーターとして &lt;code&gt;animate&lt;/code&gt; 渡されます。メソッド（または &lt;code&gt;options&lt;/code&gt; パラメータの一部として）：</target>
        </trans-unit>
        <trans-unit id="0fe8ef331e3e18dd6d6ee2e94ecd618e64625c03" translate="yes" xml:space="preserve">
          <source>Performs both the addition and removal of a CSS classes on an element and (during the process) triggers an animation surrounding the class addition/removal. Much like &lt;code&gt;$animate.addClass&lt;/code&gt; and &lt;code&gt;$animate.removeClass&lt;/code&gt;, &lt;code&gt;setClass&lt;/code&gt; will only evaluate the classes being added/removed once a digest has passed. Note that class-based animations are treated differently compared to structural animations (like enter, move and leave) since the CSS classes may be added/removed at different points depending if CSS or JavaScript animations are used.</source>
          <target state="translated">要素のCSSクラスの追加と削除の両方を実行し、（プロセス中に）クラスの追加/削除を取り巻くアニメーションをトリガーします。多くのように &lt;code&gt;$animate.addClass&lt;/code&gt; と &lt;code&gt;$animate.removeClass&lt;/code&gt; 、 &lt;code&gt;setClass&lt;/code&gt; はダイジェストが経過した後のクラスが追加/削除されるのみを評価します。CSSまたはJavaScriptアニメーションが使用されているかどうかに応じて、CSSクラスが異なるポイントで追加/削除される可能性があるため、クラスベースのアニメーションは、構造アニメーション（Enter、Move、Leaveなど）とは異なる方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="fde22c44087196711ccbb71078d1ff22cb70d919" translate="yes" xml:space="preserve">
          <source>Periodic tasks scheduled via &lt;a href=&quot;%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; use a different queue and are not flushed by &lt;code&gt;$flushPendingTasks()&lt;/code&gt;. Use &lt;a href=&quot;%24interval#flush.html&quot;&gt;$interval.flush(millis)&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;を介してスケジュールされた定期的なタスクは別のキューを使用し、 &lt;code&gt;$flushPendingTasks()&lt;/code&gt; によってフラッシュされません。代わりに&lt;a href=&quot;%24interval#flush.html&quot;&gt;$ interval.flush（millis）を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="ccb639561dbe9976233905fa4c560e41d0cddf85" translate="yes" xml:space="preserve">
          <source>Periodic tasks scheduled via &lt;a href=&quot;%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; use a different queue and are not taken into account by &lt;code&gt;$verifyNoPendingTasks()&lt;/code&gt;. There is currently no way to verify that there are no pending &lt;a href=&quot;%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; tasks.</source>
          <target state="translated">&lt;a href=&quot;%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;を介してスケジュールされた定期的なタスクは別のキューを使用し、 &lt;code&gt;$verifyNoPendingTasks()&lt;/code&gt; によって考慮されません。現在、保留中の&lt;a href=&quot;%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;タスクがないことを確認する方法はありません。</target>
        </trans-unit>
        <trans-unit id="9175845018286100e8c4dd426601703543b596bf" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;ng-app&lt;/code&gt; to the root of your application, typically on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag if you want AngularJS to auto-bootstrap your application.</source>
          <target state="translated">場所 &lt;code&gt;ng-app&lt;/code&gt; 、アプリケーションのルートには、一般的に &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; タグを使用するには、自動ブートストラップにAngularJSアプリケーションをしたい場合。</target>
        </trans-unit>
        <trans-unit id="b78ac8ca34cd41564ccb9b7e0ba05721f3cb269f" translate="yes" xml:space="preserve">
          <source>Place the &lt;code&gt;script&lt;/code&gt; tag at the bottom of the page. Placing script tags at the end of the page improves app load time because the HTML loading is not blocked by loading of the &lt;code&gt;angular.js&lt;/code&gt; script. You can get the latest bits from &lt;a href=&quot;http://code.angularjs.org&quot;&gt;http://code.angularjs.org&lt;/a&gt;. Please don't link your production code to this URL, as it will expose a security hole on your site. For experimental development linking to our site is fine.</source>
          <target state="translated">ページの下部に &lt;code&gt;script&lt;/code&gt; タグを配置します。ページの最後にスクリプトタグを配置すると、 &lt;code&gt;angular.js&lt;/code&gt; スクリプトの読み込みによってHTMLの読み込みがブロックされないため、アプリの読み込み時間が短縮されます。最新のビットは&lt;a href=&quot;http://code.angularjs.org&quot;&gt;http://code.angularjs.org&lt;/a&gt;から入手できます。本番コードをこのURLにリンクしないでください。サイトにセキュリティホールが露呈します。私たちのサイトにリンクする実験的な開発のために結構です。</target>
        </trans-unit>
        <trans-unit id="d41f5191f36242fba26edcab7cdae2ac55f00a60" translate="yes" xml:space="preserve">
          <source>Placeholder comments for structural directives will contain information about what directive and binding caused the placeholder. E.g. &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">構造ディレクティブのプレースホルダーコメントには、プレースホルダーの原因となったディレクティブとバインディングに関する情報が含まれます。例： &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6d23dce11abfc04d22b576b279be0582a4674d8" translate="yes" xml:space="preserve">
          <source>Placeholder comments will contain information about what directive and binding caused the placeholder. E.g. &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">プレースホルダーのコメントには、プレースホルダーの原因となったディレクティブとバインディングに関する情報が含まれます。例： &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba144cb01be20139ef167effe8a39441ca2909ab" translate="yes" xml:space="preserve">
          <source>Please keep in mind the points below about AngularJS's expression language.</source>
          <target state="translated">AngularJSの表現言語については、以下の点に留意してください。</target>
        </trans-unit>
        <trans-unit id="936d7dabb804fdafdee688afad175b795e535e73" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;as [variable name]&lt;/code&gt; is not an operator but rather a part of ngRepeat micro-syntax so it can be used only after all filters (and not as operator, inside an expression).</source>
          <target state="translated">&lt;code&gt;as [variable name]&lt;/code&gt; は演算子ではなく、ngRepeatマイクロ構文の一部であるため、すべてのフィルターの後でのみ使用できることに注意してください（式内の演算子としてではありません）。</target>
        </trans-unit>
        <trans-unit id="8fb457fc228fdb314328599f4f48cd78fc2cb244" translate="yes" xml:space="preserve">
          <source>Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only after all filters (and not as operator, inside an expression).</source>
          <target state="translated">as [変数名]は演算子ではなく ngRepeat マイクロシンタックスの一部なので、すべてのフィルタの後にのみ使用できることに注意してください (式の中の演算子としてではなく)。</target>
        </trans-unit>
        <trans-unit id="5864ee00ebaaffa52efb0e40ba7741e0c1980903" translate="yes" xml:space="preserve">
          <source>Please note that if $http is used then it is important that the server returns a success HTTP response code in order to fulfill the validation and a status level of &lt;code&gt;4xx&lt;/code&gt; in order to reject the validation.</source>
          <target state="translated">$ httpを使用する場合、検証を満たすためにサーバーが成功HTTP応答コードを返し、検証を拒否するためにステータスレベル &lt;code&gt;4xx&lt;/code&gt; を返すことが重要です。</target>
        </trans-unit>
        <trans-unit id="402875a9ef4cbfb33f456a217bbc17d01b959a8a" translate="yes" xml:space="preserve">
          <source>Please note that if these are intended to reach a translator and be translated, it is recommended that the messages appear as a whole and not be split up.</source>
          <target state="translated">これらが翻訳者に届いて翻訳されることを目的としている場合は、メッセージは全体として表示され、分割されないことをお勧めしますのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="634d576f91a735237019985afbde7d8d151fc66d" translate="yes" xml:space="preserve">
          <source>Please note that whitespace (including newline) is generally insignificant except as part of the actual message text that occurs in curly braces. Whitespace is generally used to aid readability.</source>
          <target state="translated">空白(改行を含む)は、中括弧で囲まれた実際のメッセージテキストの一部を除いて、一般的には重要ではないことに注意してください。空白は一般的に読みやすくするために使用されます。</target>
        </trans-unit>
        <trans-unit id="4ef8776654a5598bd9bf8265ea86a4a13f90f500" translate="yes" xml:space="preserve">
          <source>Plural</source>
          <target state="translated">Plural</target>
        </trans-unit>
        <trans-unit id="be452558ab8a9d90c33c6ce5d76a1fb64db222cf" translate="yes" xml:space="preserve">
          <source>Plural Syntax</source>
          <target state="translated">複数形構文</target>
        </trans-unit>
        <trans-unit id="677291ce1832a3291ebfefdce4206c36b5695d5c" translate="yes" xml:space="preserve">
          <source>Plural and Gender together</source>
          <target state="translated">複数形と性別を一緒に</target>
        </trans-unit>
        <trans-unit id="30ea53b5f87201afcd442579a963613a5bfcf069" translate="yes" xml:space="preserve">
          <source>Plural categories and explicit number rules</source>
          <target state="translated">複数のカテゴリと明示的な数の規則</target>
        </trans-unit>
        <trans-unit id="179566a6a07c07bfd96129c294fa82e9392f11c5" translate="yes" xml:space="preserve">
          <source>Plural category matches are single words corresponding to the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;plural categories&lt;/a&gt; of the CLDR plural category spec. These categories vary by locale. The &quot;en&quot; (English) locale, for example, defines just &quot;one&quot; and &quot;other&quot; while the &quot;ga&quot; (Irish) locale defines &quot;one&quot;, &quot;two&quot;, &quot;few&quot;, &quot;many&quot; and &quot;other&quot;. Typically, you would just write the categories for your language. During translation, the translators will add or remove more categories depending on the target locale.</source>
          <target state="translated">複数のカテゴリの一致はに対応する単一の単語で&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;複数のカテゴリー&lt;/a&gt; CLDR複数のカテゴリ仕様の。これらのカテゴリはロケールによって異なります。たとえば、「en」（英語）ロケールは「1」と「その他」のみを定義し、「ga」（アイルランド）ロケールは「1」、「2」、「少」、「多」、「その他」を定義します。 。通常は、言語のカテゴリを記述します。翻訳中、翻訳者はターゲットロケールに応じてカテゴリを追加または削除します。</target>
        </trans-unit>
        <trans-unit id="cd288f230e5e528cd142ef52cbb884894ff3ac60" translate="yes" xml:space="preserve">
          <source>Plural syntax with optional offset</source>
          <target state="translated">オプションのオフセットを含む複数形構文</target>
        </trans-unit>
        <trans-unit id="af1d180211f1fc8c7b2d6c46daa5db30af6e55bc" translate="yes" xml:space="preserve">
          <source>Post-linking function</source>
          <target state="translated">ポストリンキング機能</target>
        </trans-unit>
        <trans-unit id="5c90cf7f41a8da16012e1f3fcd7e3e25047730d5" translate="yes" xml:space="preserve">
          <source>Pre-linking function</source>
          <target state="translated">プリリンク機能</target>
        </trans-unit>
        <trans-unit id="9ec3d53b91c1e1f2ab71a67e94e59a4e5b149247" translate="yes" xml:space="preserve">
          <source>Prefix for hash part (containing path and search)</source>
          <target state="translated">ハッシュ部分の接頭辞 (パスと検索を含む)</target>
        </trans-unit>
        <trans-unit id="a6966604f1f1b212381bad520d36ae4193da4261" translate="yes" xml:space="preserve">
          <source>Prefix used for Hashbang URLs (used in Hashbang mode or in legacy browsers in HTML5 mode).</source>
          <target state="translated">Hashbang URL で使用されるプレフィックス (Hashbang モードや HTML5 モードのレガシーブラウザで使用されます)。</target>
        </trans-unit>
        <trans-unit id="60d63afbc58e76c10cdc1e0426f8ae18cd1a3642" translate="yes" xml:space="preserve">
          <source>Pressing an '&lt;code&gt;X&lt;/code&gt;' key causes the browser to emit a &lt;code&gt;keydown&lt;/code&gt; event on the input control.</source>
          <target state="translated">' &lt;code&gt;X&lt;/code&gt; 'キーを押すと、ブラウザは入力コントロールで &lt;code&gt;keydown&lt;/code&gt; イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="af8404ddcb19d0ee7bb4e3ada0c8ab29709d3381" translate="yes" xml:space="preserve">
          <source>Preventing collisions with existing animations and third-party libraries</source>
          <target state="translated">既存のアニメーションやサードパーティ製ライブラリとの衝突を防ぐ</target>
        </trans-unit>
        <trans-unit id="db2be9312367b0f1226840803e164f31490ec678" translate="yes" xml:space="preserve">
          <source>Preventing flicker before an animation starts</source>
          <target state="translated">アニメーション開始前のフリッカー防止</target>
        </trans-unit>
        <trans-unit id="f11dc6c496b3bea9136c75e36fb573c80908b9bf" translate="yes" xml:space="preserve">
          <source>Previous route information, or undefined if current is first route entered.</source>
          <target state="translated">前のルート情報、または現在のルートが最初に入力されたルートの場合は未定義。</target>
        </trans-unit>
        <trans-unit id="c853815d467b47e8ed78315578dd45ccb8c7d2ec" translate="yes" xml:space="preserve">
          <source>Previous route information.</source>
          <target state="translated">前回のルート情報です。</target>
        </trans-unit>
        <trans-unit id="6c2d988f12e64b7e45565826d807a919907ae496" translate="yes" xml:space="preserve">
          <source>Previously compiled HTML will not be affected by newly loaded directives, filters and components.</source>
          <target state="translated">以前にコンパイルされた HTML は、新たにロードされたディレクティブ、フィルタ、コンポーネントの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="cd339205264cf6840eb650823d064e5a8b67fcfd" translate="yes" xml:space="preserve">
          <source>Previously, we used the &lt;code&gt;link&lt;/code&gt; function to create a directive that manipulated its DOM elements. Building upon that example, let's make a directive that reacts to events on its elements.</source>
          <target state="translated">以前は、 &lt;code&gt;link&lt;/code&gt; 関数を使用して、DOM要素を操作するディレクティブを作成しました。その例を基に、その要素のイベントに反応するディレクティブを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="c9e51fc63f08ba85c648b29ea8ba3f3e3bb81df0" translate="yes" xml:space="preserve">
          <source>Problems arise when the application is bootstrapped on a different element, and animations are attempted on elements that are outside the application tree, e.g. when libraries append popup or modal elements to the body tag.</source>
          <target state="translated">問題は、アプリケーションが別の要素でブートストラップされ、アプリケーションツリーの外にある要素でアニメーションを試みた場合に発生します。</target>
        </trans-unit>
        <trans-unit id="4fb08e5643a533ad7c05b134e9e747b584dc75f7" translate="yes" xml:space="preserve">
          <source>Process the digest loop as normal</source>
          <target state="translated">通常通りダイジェストループを処理する</target>
        </trans-unit>
        <trans-unit id="3b0fe78c753fdde32ba8bad6bdf5db38803ba21b" translate="yes" xml:space="preserve">
          <source>Processes all of the &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watchers&lt;/a&gt; of the current scope and its children. Because a &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watcher&lt;/a&gt;'s listener can change the model, the &lt;code&gt;$digest()&lt;/code&gt; keeps calling the &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watchers&lt;/a&gt; until no more listeners are firing. This means that it is possible to get into an infinite loop. This function will throw &lt;code&gt;'Maximum iteration limit exceeded.'&lt;/code&gt; if the number of iterations exceeds 10.</source>
          <target state="translated">現在のスコープとその子のすべての&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;ウォッチャー&lt;/a&gt;を処理します。&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;ウォッチャー&lt;/a&gt;のリスナーはモデルを変更できるため、 &lt;code&gt;$digest()&lt;/code&gt; は、リスナーが&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;起動&lt;/a&gt;しなくなるまでウォッチャーを呼び出し続けます。これは、無限ループに入る可能性があることを意味します。この関数は、 &lt;code&gt;'Maximum iteration limit exceeded.'&lt;/code&gt; をスローします。反復数が10を超える場合</target>
        </trans-unit>
        <trans-unit id="75965b4edaaa41b0b73d45b63157b2b38036c091" translate="yes" xml:space="preserve">
          <source>Professional AngularJS</source>
          <target state="translated">プロフェッショナル AngularJS</target>
        </trans-unit>
        <trans-unit id="80a2b88f2f6d0fed4bc5bba789ac7b216657a3a4" translate="yes" xml:space="preserve">
          <source>Programmatically changing options</source>
          <target state="translated">プログラムでオプションを変更</target>
        </trans-unit>
        <trans-unit id="3956d65e997700fbbe6962701c6c46976d9eae6b" translate="yes" xml:space="preserve">
          <source>Promise returned by the &lt;code&gt;$timeout&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;$timeout&lt;/code&gt; 関数によって返されるPromise 。</target>
        </trans-unit>
        <trans-unit id="8a59aafa09d6e49c77e62ffcdc6d53d10993c4e6" translate="yes" xml:space="preserve">
          <source>Promise that will be resolved when the timeout is reached. The promise will be resolved with the return value of the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">タイムアウトに達したときに解決されることを約束します。promiseは、 &lt;code&gt;fn&lt;/code&gt; 関数の戻り値で解決されます。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="bc9c3590c4b80616037b44fc342b9db9dab484bc" translate="yes" xml:space="preserve">
          <source>Properties to add to the controller before invoking the constructor. This is used to simulate the &lt;code&gt;bindToController&lt;/code&gt; feature and simplify certain kinds of tests.</source>
          <target state="translated">コンストラクターを呼び出す前にコントローラーに追加するプロパティ。これは、 &lt;code&gt;bindToController&lt;/code&gt; 機能をシミュレートし、特定の種類のテストを簡略化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f8bd5483ecc0eeaa299f08dfff7f347a4fe2fec5" translate="yes" xml:space="preserve">
          <source>Properties to add to the controller instance. This is used to simulate the &lt;code&gt;bindToController&lt;/code&gt; feature and simplify certain kinds of tests.</source>
          <target state="translated">コントローラーインスタンスに追加するプロパティ。これは、 &lt;code&gt;bindToController&lt;/code&gt; 機能をシミュレートし、特定の種類のテストを簡略化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c0ec888619fe8d4c92ba83e3a1d78dab13efeb93" translate="yes" xml:space="preserve">
          <source>Property name of the form under which the control is published.</source>
          <target state="translated">制御を公開している形態のプロパティ名。</target>
        </trans-unit>
        <trans-unit id="1e8b2a7060963cf04221774fa7b7b5a02b0e287b" translate="yes" xml:space="preserve">
          <source>Protection from JSON Hijacking is provided if the server prefixes all JSON requests with following string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;. AngularJS will automatically strip the prefix before processing it as JSON. For more information please visit &lt;a href=&quot;../api/ng/service/%24http#json-vulnerability-protection.html&quot;&gt;JSON Hijacking Protection&lt;/a&gt;.</source>
          <target state="translated">サーバーがすべてのJSONリクエストの前に次の文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; 付けると、JSONハイジャックからの保護が提供されます。AngularJSは、プレフィックスをJSONとして処理する前に自動的に削除します。詳細については、&lt;a href=&quot;../api/ng/service/%24http#json-vulnerability-protection.html&quot;&gt;JSONハイジャック保護&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f9390e0ef5f71d138bc596eddbe51b8e38d4521a" translate="yes" xml:space="preserve">
          <source>Protection from XSRF is provided by using the double-submit cookie defense pattern. For more information please visit &lt;a href=&quot;../api/ng/service/%24http#cross-site-request-forgery-xsrf-protection.html&quot;&gt;XSRF protection&lt;/a&gt;.</source>
          <target state="translated">XSRFからの保護は、二重送信Cookie防御パターンを使用して提供されます。詳細については、&lt;a href=&quot;../api/ng/service/%24http#cross-site-request-forgery-xsrf-protection.html&quot;&gt;XSRF保護に&lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="90f86c4a0449e7e5adb2fe6a2e9e1a00e1f16c40" translate="yes" xml:space="preserve">
          <source>Protractor does not work out-of-the-box with apps that bootstrap manually using &lt;code&gt;angular.bootstrap&lt;/code&gt;. You must use the &lt;code&gt;ng-app&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;angular.bootstrap&lt;/code&gt; を使用して手動でブートストラップするアプリでは、分度器はそのままでは機能しません。 &lt;code&gt;ng-app&lt;/code&gt; ディレクティブを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb5d793ecb6593e91414a3b5b89cbf50a0df7252" translate="yes" xml:space="preserve">
          <source>Protractor is a &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; program, and runs end-to-end tests that are also written in JavaScript and run with node. Protractor uses &lt;a href=&quot;https://code.google.com/p/selenium/wiki/GettingStarted&quot;&gt;WebDriver&lt;/a&gt; to control browsers and simulate user actions.</source>
          <target state="translated">Protractorは&lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;プログラムであり、JavaScriptで記述され、ノードで実行されるエンドツーエンドのテストを実行します。Protractorは&lt;a href=&quot;https://code.google.com/p/selenium/wiki/GettingStarted&quot;&gt;WebDriver&lt;/a&gt;を使用してブラウザーを制御し、ユーザーアクションをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="fcceaa2d0fc62e3edac0797323ef0c3f6392d9f9" translate="yes" xml:space="preserve">
          <source>Protractor is a &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; program, and runs end-to-end tests that are also written in JavaScript and run with node. Protractor uses &lt;a href=&quot;https://code.google.com/p/selenium/wiki/GettingStarted&quot;&gt;WebDriver&lt;/a&gt; to control browsers and simulate user actions.</source>
          <target state="translated">分度器は&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt;プログラムであり、JavaScriptで記述され、ノードで実行されるエンドツーエンドのテストを実行します。分度器は&lt;a href=&quot;https://code.google.com/p/selenium/wiki/GettingStarted&quot;&gt;WebDriver&lt;/a&gt;を使用してブラウザを制御し、ユーザーアクションをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="bb3f0ccf64c0877d614e1a06bb00e1452bd032c9" translate="yes" xml:space="preserve">
          <source>Protractor uses &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html&quot;&gt;Jasmine&lt;/a&gt; for its test syntax. As in unit testing, a test file is comprised of one or more &lt;code&gt;it&lt;/code&gt; blocks that describe the requirements of your application. &lt;code&gt;it&lt;/code&gt; blocks are made of &lt;strong&gt;commands&lt;/strong&gt; and &lt;strong&gt;expectations&lt;/strong&gt;. Commands tell Protractor to do something with the application such as navigate to a page or click on a button. Expectations tell Protractor to assert something about the application's state, such as the value of a field or the current URL.</source>
          <target state="translated">分度器はテスト構文に&lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html&quot;&gt;Jasmine&lt;/a&gt;を使用します。単体テストと同様に、テストファイルは、アプリケーションの要件を記述する1つ以上の &lt;code&gt;it&lt;/code&gt; ブロックで構成されます。ブロックは&lt;strong&gt;コマンド&lt;/strong&gt;と&lt;strong&gt;期待&lt;/strong&gt; &lt;code&gt;it&lt;/code&gt; 構成されてい&lt;strong&gt;ます&lt;/strong&gt;。コマンドは、ページに移動したり、ボタンをクリックしたりするなど、アプリケーションで何かを行うようにProtractorに指示します。期待は、フィールドの値や現在のURLなど、アプリケーションの状態について何かをアサートするようにProtractorに指示します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c61ef8a9ae8574f2223b6fa30c0eff6a51d5b84d" translate="yes" xml:space="preserve">
          <source>Protractor uses &lt;a href=&quot;https://jasmine.github.io/1.3/introduction.html&quot;&gt;Jasmine&lt;/a&gt; for its test syntax. As in unit testing, a test file is comprised of one or more &lt;code&gt;it&lt;/code&gt; blocks that describe the requirements of your application. &lt;code&gt;it&lt;/code&gt; blocks are made of &lt;strong&gt;commands&lt;/strong&gt; and &lt;strong&gt;expectations&lt;/strong&gt;. Commands tell Protractor to do something with the application such as navigate to a page or click on a button. Expectations tell Protractor to assert something about the application's state, such as the value of a field or the current URL.</source>
          <target state="translated">分度器は、テスト構文に&lt;a href=&quot;https://jasmine.github.io/1.3/introduction.html&quot;&gt;Jasmine&lt;/a&gt;を使用します。ユニットテストのように、テストファイルは、1つまたは複数で構成されている &lt;code&gt;it&lt;/code&gt; 、アプリケーションの要件を説明したブロック。ブロックは&lt;strong&gt;コマンド&lt;/strong&gt;と&lt;strong&gt;期待&lt;/strong&gt; &lt;code&gt;it&lt;/code&gt; 構成されてい&lt;strong&gt;ます&lt;/strong&gt;。コマンドは、ページに移動したりボタンをクリックしたりするなど、アプリケーションで何かを行うように分度器に指示します。期待値は、フィールドの値や現在のURLなど、アプリケーションの状態について何かを表明するように分度器に指示します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ceee3f3615a2bbe4ce0ac5a269a311e4821daf4" translate="yes" xml:space="preserve">
          <source>Provider</source>
          <target state="translated">Provider</target>
        </trans-unit>
        <trans-unit id="d1ee5ed53bb0014f222cf9a775404d40f04a276f" translate="yes" xml:space="preserve">
          <source>Provider Recipe</source>
          <target state="translated">プロバイダレシピ</target>
        </trans-unit>
        <trans-unit id="faeb91f343caefcfbfb0f7ef0ebef566e9f808d2" translate="yes" xml:space="preserve">
          <source>Provider components in ng</source>
          <target state="translated">プロバイダの構成要素をNG</target>
        </trans-unit>
        <trans-unit id="aac6643460d97ee9f664d62a35a270349841cf75" translate="yes" xml:space="preserve">
          <source>Provider components in ngAria</source>
          <target state="translated">ngAriaのプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="3697f23641b772bbaabfc5f9418598d9a7d11a6f" translate="yes" xml:space="preserve">
          <source>Provider components in ngCookies</source>
          <target state="translated">ngCookiesのプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="607b375320386821b2b91b0abb605d476671a991" translate="yes" xml:space="preserve">
          <source>Provider components in ngMock</source>
          <target state="translated">ngMock のプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="27f092cf1e72b65217dc348f8fb9eef609ef0f86" translate="yes" xml:space="preserve">
          <source>Provider components in ngResource</source>
          <target state="translated">ngResourceのプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="82fa91bef1fcd6b27dcb61546d819b59f500cbf9" translate="yes" xml:space="preserve">
          <source>Provider components in ngRoute</source>
          <target state="translated">ngRoute のプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="64e454af2188dee8d60382135ae30ceba7b9fb7b" translate="yes" xml:space="preserve">
          <source>Provider components in ngSanitize</source>
          <target state="translated">ngSanitize のプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="0b7f95fe00b27ad60f556fe51d59a14ae33eea20" translate="yes" xml:space="preserve">
          <source>Provider for the $rootScope service.</source>
          <target state="translated">rootScope サービスのプロバイダ。</target>
        </trans-unit>
        <trans-unit id="53d2419e2fad27c745ab7837fb34c5b4cb3b5535" translate="yes" xml:space="preserve">
          <source>Provider is the most complex recipe type. You don't need it unless you are building a reusable piece of code that needs global configuration.</source>
          <target state="translated">プロバイダーは最も複雑なレシピタイプです。グローバルな設定を必要とする再利用可能なコードを構築しているのでなければ、必要ありません。</target>
        </trans-unit>
        <trans-unit id="87b7c08baed1c8e93db95b79bcdca55b631dd7bb" translate="yes" xml:space="preserve">
          <source>Providers</source>
          <target state="translated">Providers</target>
        </trans-unit>
        <trans-unit id="3c19717766308f184231292bb4ec1e53f9ff7873" translate="yes" xml:space="preserve">
          <source>Provides pre-instantiated services which should append/override services provided by &lt;code&gt;providers&lt;/code&gt;. This is handy when unit-testing and having the need to override a default service.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; によって提供されるサービスを追加/オーバーライドする、事前にインスタンス化されたサービスを提供します。これは、単体テストを行い、デフォルトのサービスをオーバーライドする必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8eae5c3fc815670c73fa3a65878af6b41fec633e" translate="yes" xml:space="preserve">
          <source>Provides read/write access to browser's cookies.</source>
          <target state="translated">ブラウザのクッキーへの読み書きアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="1a023f9aad6dc377039a1b87b20af53972b89720" translate="yes" xml:space="preserve">
          <source>Providing locale rules to AngularJS</source>
          <target state="translated">AngularJSにロケールルールを提供する</target>
        </trans-unit>
        <trans-unit id="ddd8ad56b330bca54c9be9804edc93d69e2dea69" translate="yes" xml:space="preserve">
          <source>Providing validation behavior (i.e. required, number, email, url).</source>
          <target state="translated">バリデーション動作を提供します(必須、番号、電子メール、URLなど)。</target>
        </trans-unit>
        <trans-unit id="b73be446095cb68833313fd87ebc08cef7cbc028" translate="yes" xml:space="preserve">
          <source>Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains all the important functionality needed for common async tasks.</source>
          <target state="translated">Q は $q よりも多くの機能を持っていますが、バイト数を犠牲にしています。q は小さいですが、一般的な非同期タスクに必要な重要な機能をすべて含んでいます。</target>
        </trans-unit>
        <trans-unit id="a17b9bb70264b6c8d6ecde29f85b3a88abcad433" translate="yes" xml:space="preserve">
          <source>Query parameters</source>
          <target state="translated">クエリパラメータ</target>
        </trans-unit>
        <trans-unit id="6c66d1dc2e56375fe263d76a3be7b856f40b76c8" translate="yes" xml:space="preserve">
          <source>Range Input with ngMin &amp;amp; ngMax attributes</source>
          <target state="translated">ngMinおよびngMax属性を使用した範囲入力</target>
        </trans-unit>
        <trans-unit id="aa28402b349eaa855997074022329eee97704df9" translate="yes" xml:space="preserve">
          <source>Raw cookie value.</source>
          <target state="translated">生のクッキーの値。</target>
        </trans-unit>
        <trans-unit id="1618100fea13078aa76080795808feb6be857d99" translate="yes" xml:space="preserve">
          <source>Raw value to be stored.</source>
          <target state="translated">保存する生の値。</target>
        </trans-unit>
        <trans-unit id="2b86c80b3e4094ce9a3d04d4536abffffbad8e90" translate="yes" xml:space="preserve">
          <source>Read and write custom information about this module. For example you could put the version of the module in here.</source>
          <target state="translated">このモジュールについてのカスタム情報を読み書きします。例えば、ここにモジュールのバージョンを入れることができます。</target>
        </trans-unit>
        <trans-unit id="4d7732dd14cd9ae15d39f4a1ba98522f1578cf57" translate="yes" xml:space="preserve">
          <source>Read more about &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping（SCE）の&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="51c8f5fa0bf495bbdab1fb9e3c43c6038a6fa0dc" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../../../guide/accessibility&quot;&gt;ngAria Developer Guide&lt;/a&gt; for a thorough explanation of each directive.</source>
          <target state="translated">各ディレクティブの詳細な説明については、&lt;a href=&quot;../../../guide/accessibility&quot;&gt;ngAria開発者ガイド&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="354d2d712f48b41905c006f1295a07a5166ec835" translate="yes" xml:space="preserve">
          <source>Ready to find out more about AngularJS?</source>
          <target state="translated">AngularJSについてもっと知りたいですか?</target>
        </trans-unit>
        <trans-unit id="434f7fd2e7fbbeb863bbeb23079429e58d437bae" translate="yes" xml:space="preserve">
          <source>Reasons for using one-time binding</source>
          <target state="translated">ワンタイムバインディングを利用する理由</target>
        </trans-unit>
        <trans-unit id="c400f997011216a042b977f816c836e8b9842bfe" translate="yes" xml:space="preserve">
          <source>Recommended Setup</source>
          <target state="translated">推奨設定</target>
        </trans-unit>
        <trans-unit id="4a36b4af5afa45bcf158d1716fdc3677a5e0a895" translate="yes" xml:space="preserve">
          <source>Refer &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; for an example.</source>
          <target state="translated">例として&lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5b195da530d0efe734a7d53c8b68080b3cc3c7f" translate="yes" xml:space="preserve">
          <source>Refer &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; to configure this service.</source>
          <target state="translated">このサービスを構成するには、&lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b627a0fb853040d3e0434dbbefd5809d93b210f" translate="yes" xml:space="preserve">
          <source>Reference to &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dst&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="acd87679cf893a1dd2dca79c61d0e9d748b5026f" translate="yes" xml:space="preserve">
          <source>Reference to &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="b671addffac0b2e853bfb7228e292c171a7d6ed5" translate="yes" xml:space="preserve">
          <source>Reference to check.</source>
          <target state="translated">チェックするための参考にしてください。</target>
        </trans-unit>
        <trans-unit id="3b633a4c1143db3741cc3f064fe12f9828a781e6" translate="yes" xml:space="preserve">
          <source>Reference to the current route definition. The route definition contains:</source>
          <target state="translated">現在のルート定義への参照。経路定義には以下が含まれています。</target>
        </trans-unit>
        <trans-unit id="bb91dbe53666db180aa57161eb36d124fa150320" translate="yes" xml:space="preserve">
          <source>Reference to the parent scope.</source>
          <target state="translated">親スコープへの参照。</target>
        </trans-unit>
        <trans-unit id="bed990515ae3cd84556c4d6208760d018bf3b353" translate="yes" xml:space="preserve">
          <source>Reference to the root scope.</source>
          <target state="translated">ルートスコープへの参照。</target>
        </trans-unit>
        <trans-unit id="b8d49172c668642e2f62c37bc331faa62a3e1ab5" translate="yes" xml:space="preserve">
          <source>Regex parameter matching</source>
          <target state="translated">正規表現パラメータのマッチング</target>
        </trans-unit>
        <trans-unit id="fc0504148c30c6097df7cfb4174da0f1a4cbd9e0" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;component definition&lt;/strong&gt; with the compiler. This is a shorthand for registering a special type of directive, which represents a self-contained UI component in your application. Such components are always isolated (i.e. &lt;code&gt;scope: {}&lt;/code&gt;) and are always restricted to elements (i.e. &lt;code&gt;restrict: 'E'&lt;/code&gt;).</source>
          <target state="translated">コンパイラに&lt;strong&gt;コンポーネント定義&lt;/strong&gt;を登録し&lt;strong&gt;ます&lt;/strong&gt;。これは、アプリケーションの自己完結型UIコンポーネントを表す、特別なタイプのディレクティブを登録するための省略形です。このようなコンポーネントは常に分離され（つまり、 &lt;code&gt;scope: {}&lt;/code&gt; ）、常に要素に制限されます（つまり、 &lt;code&gt;restrict: 'E'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e65f3ece273368fd8433f2cdcda7c960e1f6572d" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;constant service&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;, such as a string, a number, an array, an object or a function. Like the &lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;, it is not possible to inject other services into a constant.</source>
          <target state="translated">文字列、数値、配列、オブジェクト、関数などの&lt;strong&gt;定数サービス&lt;/strong&gt;を&lt;a href=&quot;%24injector&quot;&gt;$ injector&lt;/a&gt;に登録します。&lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;と同様に、他のサービスを定数に注入することはできません。</target>
        </trans-unit>
        <trans-unit id="45524c2eb035d8e9328d31f7bed278f90e7c83fc" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;decorator function&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. A decorator function intercepts the creation of a service, allowing it to override or modify the behavior of the service. The return value of the decorator function may be the original service, or a new service that replaces (or wraps and delegates to) the original service.</source>
          <target state="translated">&lt;a href=&quot;%24injector&quot;&gt;$ injectorで&lt;/a&gt;&lt;strong&gt;デコレータ関数&lt;/strong&gt;を登録します。デコレーター関数はサービスの作成をインターセプトし、サービスの動作をオーバーライドまたは変更できるようにします。デコレータ関数の戻り値は、元のサービス、または元のサービスを置き換える（またはラップしてデリゲートする）新しいサービスの場合があります。</target>
        </trans-unit>
        <trans-unit id="ea020b086a634153190597650e70f48a24258953" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;provider function&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. Provider functions are constructor functions, whose instances are responsible for &quot;providing&quot; a factory for a service.</source>
          <target state="translated">&lt;strong&gt;プロバイダー関数&lt;/strong&gt;を&lt;a href=&quot;%24injector&quot;&gt;$ injectorに&lt;/a&gt;登録し&lt;strong&gt;ます&lt;/strong&gt;。プロバイダー関数はコンストラクター関数であり、そのインスタンスはサービスのファクトリーを「提供」する責任があります。</target>
        </trans-unit>
        <trans-unit id="45783c066e03d8c03ea0efb06a359bae85613169" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;service constructor&lt;/strong&gt;, which will be invoked with &lt;code&gt;new&lt;/code&gt; to create the service instance. This is short for registering a service where its provider's &lt;code&gt;$get&lt;/code&gt; property is a factory function that returns an instance instantiated by the injector from the service constructor function.</source>
          <target state="translated">&lt;strong&gt;サービスコンストラクターを&lt;/strong&gt;登録し&lt;strong&gt;ます。サービスコンストラクター&lt;/strong&gt;は、サービスインスタンスを作成するために &lt;code&gt;new&lt;/code&gt; で呼び出されます。これは、プロバイダーの &lt;code&gt;$get&lt;/code&gt; プロパティが、サービスコンストラクター関数からインジェクターによってインスタンス化されたインスタンスを返すファクトリ関数であるサービスを登録するための略語です。</target>
        </trans-unit>
        <trans-unit id="eed2257ce18cce4c83839c3ad49253c60a762e9c" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;service factory&lt;/strong&gt;, which will be called to return the service instance. This is short for registering a service where its provider consists of only a &lt;code&gt;$get&lt;/code&gt; property, which is the given service factory function. You should use &lt;a href=&quot;%24provide#factory.html&quot;&gt;$provide.factory(getFn)&lt;/a&gt; if you do not need to configure your service in a provider.</source>
          <target state="translated">サービスインスタンスを返すために呼び出される&lt;strong&gt;サービスファクトリを&lt;/strong&gt;登録します。これは、プロバイダーが &lt;code&gt;$get&lt;/code&gt; プロパティのみで構成されているサービスを登録するための省略形です。これは、指定されたサービスファクトリ関数です。プロバイダーでサービスを構成する必要がない場合は、&lt;a href=&quot;%24provide#factory.html&quot;&gt;$ provide.factory（getFn）&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="635024287d83106675ce8f580b6af894b0ca524f" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;value service&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;, such as a string, a number, an array, an object or a function. This is short for registering a service where its provider's &lt;code&gt;$get&lt;/code&gt; property is a factory function that takes no arguments and returns the &lt;strong&gt;value service&lt;/strong&gt;. That also means it is not possible to inject other services into a value service.</source>
          <target state="translated">文字列、数値、配列、オブジェクト、関数などの&lt;strong&gt;値サービス&lt;/strong&gt;を&lt;a href=&quot;%24injector&quot;&gt;$ injector&lt;/a&gt;に登録し&lt;strong&gt;ます&lt;/strong&gt;。これは、プロバイダーの &lt;code&gt;$get&lt;/code&gt; プロパティが引数を取らずに&lt;strong&gt;値service&lt;/strong&gt;を返すファクトリー関数であるサービスを登録するための略語です。つまり、他のサービスをバリューサービスに挿入することはできません。</target>
        </trans-unit>
        <trans-unit id="b87eb97a1c3c8baad3cdae5ff8ff853d06484051" translate="yes" xml:space="preserve">
          <source>Register a control with the form. Input elements using ngModelController do this automatically when they are linked.</source>
          <target state="translated">フォームにコントロールを登録します。ngModelController を使用した入力要素がリンクされると自動的にこれを行います。</target>
        </trans-unit>
        <trans-unit id="eb48cfa4c810ae8c4bb96fcfdc6c3eb349e97e1e" translate="yes" xml:space="preserve">
          <source>Register a new directive with the compiler.</source>
          <target state="translated">コンパイラに新しいディレクティブを登録します。</target>
        </trans-unit>
        <trans-unit id="d51fd0243e0e86d898e850537c07b7bc17d03dc4" translate="yes" xml:space="preserve">
          <source>Registered filter instance, or if a map of filters was provided then a map of the registered filter instances.</source>
          <target state="translated">登録されたフィルタインスタンス、またはフィルタのマップが提供された場合は登録されたフィルタインスタンスのマップ。</target>
        </trans-unit>
        <trans-unit id="e34c75266465d4da9d7310c64a01438305b252b5" translate="yes" xml:space="preserve">
          <source>Registering Services</source>
          <target state="translated">登録サービス</target>
        </trans-unit>
        <trans-unit id="d1260ea7fdb8f8f1a5f99c1e31524881fab210aa" translate="yes" xml:space="preserve">
          <source>Registering a Service with $provide</source>
          <target state="translated">サービスを$provideで登録する</target>
        </trans-unit>
        <trans-unit id="48d1928dfaff8d1fc38b25397535b4cf15cf8700" translate="yes" xml:space="preserve">
          <source>Registering the control with its parent &lt;a href=&quot;form&quot;&gt;form&lt;/a&gt;.</source>
          <target state="translated">コントロールをその親&lt;a href=&quot;form&quot;&gt;フォームに&lt;/a&gt;登録します。</target>
        </trans-unit>
        <trans-unit id="ce3b34d6f14031683c49fcb0996fc9a2287467ec" translate="yes" xml:space="preserve">
          <source>Registers a &lt;code&gt;listener&lt;/code&gt; callback to be executed whenever the &lt;code&gt;watchExpression&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;watchExpression&lt;/code&gt; が変更されるたびに実行される &lt;code&gt;listener&lt;/code&gt; コールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="e755ff9b4f19ef2d1c7dc5cbea80131344b000f0" translate="yes" xml:space="preserve">
          <source>Registers a new injectable animation factory function. The factory function produces the animation object which contains callback functions for each event that is expected to be animated.</source>
          <target state="translated">新しいインジェクト可能なアニメーション ファクトリー関数を登録します。ファクトリー関数は、アニメーションされると予想される各イベントのコールバック関数を含むアニメーションオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="40aec920014d2862cafad66b448612b687f31308" translate="yes" xml:space="preserve">
          <source>Registration in the config block</source>
          <target state="translated">設定ブロックへの登録</target>
        </trans-unit>
        <trans-unit id="98fdd77196db1b5bf3eb22caffc45a13dfad7a74" translate="yes" xml:space="preserve">
          <source>Related API</source>
          <target state="translated">関連API</target>
        </trans-unit>
        <trans-unit id="cfbc9e10239e3aa2884b26233bd2772c8b87a636" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">関連トピック</target>
        </trans-unit>
        <trans-unit id="8f7bfe2a8726123d4d57d9e3cb41a80d80eefbfc" translate="yes" xml:space="preserve">
          <source>Relative links</source>
          <target state="translated">関連リンク</target>
        </trans-unit>
        <trans-unit id="98eb2443ddb19e4af9222b182551b238c57fffed" translate="yes" xml:space="preserve">
          <source>Relative or absolute URL specifying the destination of the request</source>
          <target state="translated">リクエストの送信先を指定する相対 URL または絶対 URL</target>
        </trans-unit>
        <trans-unit id="e6e7b36b90301e1149d1fd8dbda9f15e4b6881b3" translate="yes" xml:space="preserve">
          <source>Remove given cookie</source>
          <target state="translated">与えられたクッキーを取り除く</target>
        </trans-unit>
        <trans-unit id="ee2741c4b98105f982c53a03fff032d207b158a9" translate="yes" xml:space="preserve">
          <source>Removes an entry from the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトからエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="8920f5ca9f0566bd4a9f1e7b0ee0099b999aa651" translate="yes" xml:space="preserve">
          <source>Removes the CSS class value specified by the classVal parameter from the element. If animations are enabled then an animation will be triggered for the class removal.</source>
          <target state="translated">classVal パラメータで指定された CSS クラスの値を要素から削除します。アニメーションが有効になっている場合は、クラスの削除のためにアニメーションが起動されます。</target>
        </trans-unit>
        <trans-unit id="04b5e728a8d34f70ce59d4ce19242f609cb92274" translate="yes" xml:space="preserve">
          <source>Removes the current scope (and all of its children) from the parent scope. Removal implies that calls to &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; will no longer propagate to the current scope and its children. Removal also implies that the current scope is eligible for garbage collection.</source>
          <target state="translated">現在のスコープ（およびそのすべての子）を親スコープから削除します。削除は、&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest（）の&lt;/a&gt;呼び出しが現在のスコープとその子に伝播しないことを意味します。削除は、現在のスコープがガベージコレクションの対象であることも意味します。</target>
        </trans-unit>
        <trans-unit id="f5cfe4b8875850cebab31b8ae5ebdb0f01a98015" translate="yes" xml:space="preserve">
          <source>Replace method</source>
          <target state="translated">メソッドの置き換え</target>
        </trans-unit>
        <trans-unit id="abed80d59c3cc2cdfd2934eac8defa722471a0e8" translate="yes" xml:space="preserve">
          <source>Replace or decorate this service to create your own custom XMLHttpRequest objects.</source>
          <target state="translated">このサービスを置き換えたり、装飾したりして、独自のカスタム XMLHttpRequest オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="7fdab89988ce8fbbc75820a42b26b98ef91641e9" translate="yes" xml:space="preserve">
          <source>Replace the contents of the directive's element (default).</source>
          <target state="translated">ディレクティブの要素の内容を置き換えます(デフォルト)。</target>
        </trans-unit>
        <trans-unit id="8d8db9b8f187119d598467a295084104278dca63" translate="yes" xml:space="preserve">
          <source>Replace the directive's element itself (if &lt;code&gt;replace&lt;/code&gt; is true - DEPRECATED).</source>
          <target state="translated">ディレクティブの要素自体を &lt;code&gt;replace&lt;/code&gt; ます（replaceがtrueの場合-非推奨）。</target>
        </trans-unit>
        <trans-unit id="1b74ba244acc5851ea1e932d4c6f319a815eeff5" translate="yes" xml:space="preserve">
          <source>Reporting a security issue</source>
          <target state="translated">セキュリティ問題の報告</target>
        </trans-unit>
        <trans-unit id="c922eca42e3d5120a6bfc72bcad1d30519cb4e28" translate="yes" xml:space="preserve">
          <source>Represents the URL object as a set of methods (protocol, host, port, path, search, hash).</source>
          <target state="translated">URLオブジェクトをメソッド(プロトコル、ホスト、ポート、パス、検索、ハッシュ)のセットとして表現します。</target>
        </trans-unit>
        <trans-unit id="44275cc926494215c0dd8c311f508c08138ab44c" translate="yes" xml:space="preserve">
          <source>Request Expectations vs Backend Definitions</source>
          <target state="translated">リクエストの期待値とバックエンドの定義</target>
        </trans-unit>
        <trans-unit id="fb7dc677c72c08388ac26aa5b3b8bf37f74b4a0b" translate="yes" xml:space="preserve">
          <source>Request content</source>
          <target state="translated">コンテンツのリクエスト</target>
        </trans-unit>
        <trans-unit id="4e9c03db567af687cbcde897eb8e4e49684606e8" translate="yes" xml:space="preserve">
          <source>Request expectations</source>
          <target state="translated">期待値を要求する</target>
        </trans-unit>
        <trans-unit id="7c76d91bc3fe714b2e19d415024bc0ce817ca932" translate="yes" xml:space="preserve">
          <source>Request expectations provide a way to make assertions about requests made by the application and to define responses for those requests. The test will fail if the expected requests are not made or they are made in the wrong order.</source>
          <target state="translated">期待されるリクエストは、アプリケーションが行うリクエストについてアサーションを行い、それらのリクエストに対するレスポンスを定義する方法を提供します。期待されるリクエストが実行されなかったり、間違った順番で実行されたりするとテストは失敗します。</target>
        </trans-unit>
        <trans-unit id="c3d3aaf0c7d684713b0e633e09eb2de9d118d464" translate="yes" xml:space="preserve">
          <source>Request required</source>
          <target state="translated">要リクエスト</target>
        </trans-unit>
        <trans-unit id="2ef4b562f29645c2c4f2482326315042cb223eaa" translate="yes" xml:space="preserve">
          <source>Request transformations (&lt;code&gt;$httpProvider.defaults.transformRequest&lt;/code&gt; and &lt;code&gt;$http.defaults.transformRequest&lt;/code&gt;) is an array with one function that does the following:</source>
          <target state="translated">要求の変換（ &lt;code&gt;$httpProvider.defaults.transformRequest&lt;/code&gt; および &lt;code&gt;$http.defaults.transformRequest&lt;/code&gt; ）は、次のことを行う1つの関数を持つ配列です。</target>
        </trans-unit>
        <trans-unit id="90f650d7162ff6af24a4492b8baa19c6caca946c" translate="yes" xml:space="preserve">
          <source>Require another directive and inject its controller as the fourth argument to the linking function. The &lt;code&gt;require&lt;/code&gt; property can be a string, an array or an object:</source>
          <target state="translated">別のディレクティブを必要とし、そのコントローラーをリンク関数の4番目の引数として挿入します。 &lt;code&gt;require&lt;/code&gt; プロパティは、文字列、配列またはオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="e1d5e0b06dfa562e69981647c63bd3b86e664409" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngaria&quot;&gt;&lt;code&gt;ngAria&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngaria&quot;&gt; &lt;code&gt;ngAria&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="7ec0099c504303c4c9c48e96dc4609ad55904f4a" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngcookies&quot;&gt;&lt;code&gt;ngCookies&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngcookies&quot;&gt; &lt;code&gt;ngCookies&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="c5862a5cb0ec6abe952c905b15a9f3429f373234" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngresource&quot;&gt;&lt;code&gt;ngResource&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngresource&quot;&gt; &lt;code&gt;ngResource&lt;/code&gt; &lt;/a&gt;モジュールがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="928e58682d0c86f23af73ec08890f10c14e4c472" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="537fea66db726eae9da189c87f27644f84ba9348" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="1a11c4501de6ba56e5400e26238d9a6bec494d4b" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngtouch&quot;&gt;&lt;code&gt;ngTouch&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngtouch&quot;&gt; &lt;code&gt;ngTouch&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="4dc1287fe5b5d1c6b627f7a7a956e26221d21611" translate="yes" xml:space="preserve">
          <source>Reset all of the logging arrays to empty.</source>
          <target state="translated">すべてのロギングアレイを空にリセットします。</target>
        </trans-unit>
        <trans-unit id="2b0b4d40965cbdcf2bc7f1639bd05a9faab1c19d" translate="yes" xml:space="preserve">
          <source>Resets all request expectations, but preserves all backend definitions. Typically, you would call resetExpectations during a multiple-phase test when you want to reuse the same instance of $httpBackend mock.</source>
          <target state="translated">すべてのリクエストの期待値をリセットしますが、 バックエンドの定義はすべて保持します。通常、複数のフェーズのテスト中に resetExpectations をコールするのは、 $httpBackend モックの同じインスタンスを再利用したい場合です。</target>
        </trans-unit>
        <trans-unit id="9b1627a90ba7fe159014541f613675e06126b296" translate="yes" xml:space="preserve">
          <source>Resolved promises, e.g. from explicit &lt;code&gt;$q&lt;/code&gt; deferreds and &lt;code&gt;$http&lt;/code&gt; calls, trigger &lt;code&gt;$apply()&lt;/code&gt; against the &lt;code&gt;$rootScope&lt;/code&gt; and so will still trigger a global digest even if the promise was initiated by a component that lives on a suspended scope.</source>
          <target state="translated">明示的な &lt;code&gt;$q&lt;/code&gt; 遅延や &lt;code&gt;$http&lt;/code&gt; 呼び出しなどの解決されたプロミスは、 &lt;code&gt;$rootScope&lt;/code&gt; に対して &lt;code&gt;$apply()&lt;/code&gt; をトリガーするため、中断されたスコープに存在するコンポーネントによってプロミスが開始された場合でも、グローバルダイジェストをトリガーします。</target>
        </trans-unit>
        <trans-unit id="5171c896616adb2c3ae9357c2a11116e0ab2aa7b" translate="yes" xml:space="preserve">
          <source>Resolving References (Underscore Wrapping)</source>
          <target state="translated">参考文献の解決(アンダースコアのラッピング</target>
        </trans-unit>
        <trans-unit id="1fdbddda0698a34f465a4a76d405fca85c2bc495" translate="yes" xml:space="preserve">
          <source>Response required</source>
          <target state="translated">必要な対応</target>
        </trans-unit>
        <trans-unit id="4279f5f3a3f43e3e9697fcb9701f9133954216d8" translate="yes" xml:space="preserve">
          <source>Response transformations (&lt;code&gt;$httpProvider.defaults.transformResponse&lt;/code&gt; and &lt;code&gt;$http.defaults.transformResponse&lt;/code&gt;) is an array with one function that does the following:</source>
          <target state="translated">応答変換（ &lt;code&gt;$httpProvider.defaults.transformResponse&lt;/code&gt; および &lt;code&gt;$http.defaults.transformResponse&lt;/code&gt; ）は、以下を実行する1つの関数を持つ配列です。</target>
        </trans-unit>
        <trans-unit id="34f624389800f45b8f738aae8d6df1ee633e353c" translate="yes" xml:space="preserve">
          <source>Restores the pre-1.8 behavior of jqLite that turns XHTML-like strings like &lt;code&gt;&amp;lt;div /&amp;gt;&amp;lt;span /&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;. The new behavior is a security fix. Thus, if you need to call this function, please try to adjust your code for this change and remove your use of this function as soon as possible.</source>
          <target state="translated">以下のような文字列-のようなXHTMLをオンjqLit​​eの事前1.8行動復元 &lt;code&gt;&amp;lt;div /&amp;gt;&amp;lt;span /&amp;gt;&lt;/code&gt; へ &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; 代わりに &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 。新しい動作はセキュリティ修正です。したがって、この関数を呼び出す必要がある場合は、この変更に合わせてコードを調整し、この関数の使用をできるだけ早く削除してください。</target>
        </trans-unit>
        <trans-unit id="71af08d07b3e60fd452cd1d0a14b65208dec62a8" translate="yes" xml:space="preserve">
          <source>Resume watchers of this scope subtree in case it was suspended.</source>
          <target state="translated">サスペンドされた場合に備えて、このスコープサブツリーのウォッチャーを再開します。</target>
        </trans-unit>
        <trans-unit id="c3cc9b89d7252c496c37f0adc038b1ff7352e328" translate="yes" xml:space="preserve">
          <source>Retrieve information regarding a particular &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;.</source>
          <target state="translated">特定の&lt;a href=&quot;%24cachefactory.cache&quot;&gt;キャッシュ&lt;/a&gt;に関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="029ee2c69a33b0a01589d3072b7fe14eb14fae75" translate="yes" xml:space="preserve">
          <source>Retrieves named data stored in the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトに格納されている名前付きデータを取得します。</target>
        </trans-unit>
        <trans-unit id="8171a153e7113cb47d5271b3cbb42b84ff913e5a" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides the default regular expression that is used for determining trusted safe urls during a[href] sanitization.</source>
          <target state="translated">href]のサニタイズ時に信頼できる安全なURLを決定するために使用されるデフォルトの正規表現を取得またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="d82de9afda7c8c459229787af42476d98ee66468" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides the default regular expression that is used for determining trusted safe urls during img[src] sanitization.</source>
          <target state="translated">img[src]のサニタイズ時に信頼できる安全なURLを決定するために使用されるデフォルトの正規表現を取得またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="b79d873410e3c147f2393994b51801ea7b9e7971" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides the default regular expression that is used for whitelisting of safe urls during a[href] sanitization.</source>
          <target state="translated">a[href]サニタイズ時に安全なURLのホワイトリスト化に使用されるデフォルトの正規表現を取得またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="0f87729394a5fbe13e20ab17fd7dfea291758f33" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides the default regular expression that is used for whitelisting of safe urls during img[src] sanitization.</source>
          <target state="translated">img[src]のサニタイズ時に安全なURLのホワイトリスト化に使用されるデフォルトの正規表現を取得またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="56c2ae0bea288f2deb96af027ca9db1c1e0b88dc" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides whether to generate an error when a rejected promise is not handled. This feature is enabled by default.</source>
          <target state="translated">拒否されたプロミスが処理されなかった場合にエラーを生成するかどうかを取得または上書きします。この機能はデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="c185b622ce0745aa94f9eb7657d6eb237ec2b1fa" translate="yes" xml:space="preserve">
          <source>Retrieving Scopes from the DOM.</source>
          <target state="translated">DOM からスコープを取得します。</target>
        </trans-unit>
        <trans-unit id="b94fccf633ef32d6a7adbbcb71ca77e3795f319f" translate="yes" xml:space="preserve">
          <source>Return URL (e.g. &lt;code&gt;/path?a=b#hash&lt;/code&gt;) when called without any parameter.</source>
          <target state="translated">パラメータなしで呼び出された場合 &lt;code&gt;/path?a=b#hash&lt;/code&gt; URL（例/ path？a = b＃hash）を返します。</target>
        </trans-unit>
        <trans-unit id="140d46868b4d533c15312ce7397910001cda166b" translate="yes" xml:space="preserve">
          <source>Return an instance of the service.</source>
          <target state="translated">サービスのインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="52c77045e19f27ad9c42170b240a88aba2880086" translate="yes" xml:space="preserve">
          <source>Return full URL representation with all segments encoded according to rules specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986で&lt;/a&gt;指定されたルールに従ってエンコードされたすべてのセグメントを含む完全なURL表現を返します。</target>
        </trans-unit>
        <trans-unit id="31aeb718a4be80941d5d1eeff641732d8db235fb" translate="yes" xml:space="preserve">
          <source>Return full URL representation with all segments encoded according to rules specified in &lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC3986で&lt;/a&gt;指定されたルールに従ってエンコードされたすべてのセグメントを含む完全なURL表現を返します。</target>
        </trans-unit>
        <trans-unit id="a84b48c4bccbb0cc57fe52888fad2de77796bd94" translate="yes" xml:space="preserve">
          <source>Return host of current URL.</source>
          <target state="translated">現在のURLのホストを返します。</target>
        </trans-unit>
        <trans-unit id="d9571c514202bc742683b59fda7b96fff7838c64" translate="yes" xml:space="preserve">
          <source>Return path of current URL when called without any parameter.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合、現在のURLのパスを返します。</target>
        </trans-unit>
        <trans-unit id="1fa7a4a66728b565c4e07673c76f2345202fcefb" translate="yes" xml:space="preserve">
          <source>Return port of current URL.</source>
          <target state="translated">現在のURLのポートを返します。</target>
        </trans-unit>
        <trans-unit id="1d7c6f2975be06cdce751120c8ce17812edf9714" translate="yes" xml:space="preserve">
          <source>Return protocol of current URL.</source>
          <target state="translated">現在のURLのプロトコルを返します。</target>
        </trans-unit>
        <trans-unit id="18b8fbc14549d13332fe634d60cd64acc7bbf234" translate="yes" xml:space="preserve">
          <source>Return search part (as object) of current URL when called without any parameter.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合、現在のURLの検索部分(オブジェクト)を返します。</target>
        </trans-unit>
        <trans-unit id="9e2043f80bfdb23de9427764cc68baf2ef7904c2" translate="yes" xml:space="preserve">
          <source>Return the history state object when called without any parameter.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合は、履歴状態オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="110ff013828ec54e25bfc2b37603def46e139ae4" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;undefined&lt;/code&gt; from a parser means a parse error occurred. In that case, no &lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;&lt;code&gt;$validators&lt;/code&gt;&lt;/a&gt; will run and the &lt;code&gt;ngModel&lt;/code&gt; will be set to &lt;code&gt;undefined&lt;/code&gt; unless &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;true&lt;/code&gt;. The parse error is stored in &lt;code&gt;ngModel.$error.parse&lt;/code&gt;.</source>
          <target state="translated">パーサーから &lt;code&gt;undefined&lt;/code&gt; を返すと、解析エラーが発生しました。その場合、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; に設定されて &lt;code&gt;undefined&lt;/code&gt; ない限り、&lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt; &lt;code&gt;$validators&lt;/code&gt; &lt;/a&gt;は実行されず、 &lt;code&gt;ngModel&lt;/code&gt; はundefinedに設定されます。解析エラーは &lt;code&gt;ngModel.$error.parse&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="6322592f617b52f15e691f0664eb67413ed6b4d9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the select element currently has an empty option element, i.e. an option that signifies that the select is empty / the selection is null.</source>
          <target state="translated">select要素に現在空のoption要素がある場合、つまり選択が空であることを示すオプション/選択がnullの場合、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2be820c292c48c220766945900a106842fe92493" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the select element has an empty option and this empty option is currently selected. Returns &lt;code&gt;false&lt;/code&gt; if the select element has no empty option or it is not selected.</source>
          <target state="translated">select要素に空のオプションがあり、この空のオプションが現在選択されている場合は、 &lt;code&gt;true&lt;/code&gt; を返します。select要素に空のオプションがないか、選択されていない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="84bd2e384f903fbc16707ec0fe6ebfd47faeb625" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the select element's unknown option is selected. The unknown option is added and automatically selected whenever the select model doesn't match any option.</source>
          <target state="translated">select要素の不明なオプションが選択されている場合は &lt;code&gt;true&lt;/code&gt; を返します。不明なオプションが追加され、選択したモデルがどのオプションとも一致しない場合は常に自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="181f1c7690856bcb7fcf6731a0fb5201a6ccccc9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the task hasn't executed yet and was successfully canceled.</source>
          <target state="translated">タスクがまだ実行されておらず、正常にキャンセルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="96717e8f9258537bda3c42a8756552de8cced4c1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the task was successfully canceled.</source>
          <target state="translated">タスクが正常にキャンセルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="867a62db9c23f0997b39841b28f2e59ddad2bb16" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the task was successfully cancelled.</source>
          <target state="translated">タスクが正常にキャンセルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="15f8467fdef401d96fd8e32cecf9dae076fe71cc" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating if SCE is enabled.</source>
          <target state="translated">SCEが有効かどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="6a4b36d75da9780449e67995a0c9d8f2357adca9" translate="yes" xml:space="preserve">
          <source>Returns a de-registration function for all listeners.</source>
          <target state="translated">すべてのリスナーの登録解除関数を返します。</target>
        </trans-unit>
        <trans-unit id="b3199c479081525ca17de9a88b742996c4d4425b" translate="yes" xml:space="preserve">
          <source>Returns a de-registration function for this listener. When the de-registration function is executed, the internal watch operation is terminated.</source>
          <target state="translated">このリスナーの登録解除関数を返します。登録解除関数が実行されると、内部監視動作を終了します。</target>
        </trans-unit>
        <trans-unit id="da8b706e428495422b325816f68f7d9fb0924119" translate="yes" xml:space="preserve">
          <source>Returns a deregistration function for this listener.</source>
          <target state="translated">このリスナーの登録解除関数を返します。</target>
        </trans-unit>
        <trans-unit id="a62e22e5f831bc88dd6a0a893e8a44c0774a1e17" translate="yes" xml:space="preserve">
          <source>Returns a deregistration function for this observer.</source>
          <target state="translated">このオブザーバの登録解除関数を返します。</target>
        </trans-unit>
        <trans-unit id="70a6eca6b0045b166ed0f2aa0ff409c9e7abdd47" translate="yes" xml:space="preserve">
          <source>Returns a function which calls function &lt;code&gt;fn&lt;/code&gt; bound to &lt;code&gt;self&lt;/code&gt; (&lt;code&gt;self&lt;/code&gt; becomes the &lt;code&gt;this&lt;/code&gt; for &lt;code&gt;fn&lt;/code&gt;). You can supply optional &lt;code&gt;args&lt;/code&gt; that are prebound to the function. This feature is also known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_application&quot;&gt;partial application&lt;/a&gt;, as distinguished from &lt;a href=&quot;http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;function currying&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; バインドされた関数 &lt;code&gt;fn&lt;/code&gt; を呼び出す関数を返します（ &lt;code&gt;self&lt;/code&gt; が &lt;code&gt;fn&lt;/code&gt; の &lt;code&gt;this&lt;/code&gt; になります）。関数に事前バインドされているオプションの &lt;code&gt;args&lt;/code&gt; を指定できます。この機能は、&lt;a href=&quot;http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;関数のカリー化とは異なり&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_application&quot;&gt;部分適用&lt;/a&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="f39dc8249e9412f7df548468361f9e69c32802eb" translate="yes" xml:space="preserve">
          <source>Returns a function which calls function &lt;code&gt;fn&lt;/code&gt; bound to &lt;code&gt;self&lt;/code&gt; (&lt;code&gt;self&lt;/code&gt; becomes the &lt;code&gt;this&lt;/code&gt; for &lt;code&gt;fn&lt;/code&gt;). You can supply optional &lt;code&gt;args&lt;/code&gt; that are prebound to the function. This feature is also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;partial application&lt;/a&gt;, as distinguished from &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;function currying&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; にバインドされた関数 &lt;code&gt;fn&lt;/code&gt; を呼び出す関数を返します（ &lt;code&gt;self&lt;/code&gt; は &lt;code&gt;fn&lt;/code&gt; の &lt;code&gt;this&lt;/code&gt; になります）。関数に事前にバインドされているオプションの &lt;code&gt;args&lt;/code&gt; を指定できます。この機能は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;関数カリー化とは異なり&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;部分適用&lt;/a&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="76eaba577560004aed48cfdfe1aa3c8424fd0aa9" translate="yes" xml:space="preserve">
          <source>Returns a key value object with all the cookies</source>
          <target state="translated">すべての Cookie を含むキー値オブジェクトを返します</target>
        </trans-unit>
        <trans-unit id="0a52a1fd016452a1dacdc288a006e2e537121c87" translate="yes" xml:space="preserve">
          <source>Returns a new instance of deferred.</source>
          <target state="translated">deferredの新しいインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="136a5149676161a6fd098efcaeeef0ff90a14b7a" translate="yes" xml:space="preserve">
          <source>Returns a promise of the passed value or promise</source>
          <target state="translated">渡された値のプロミス、またはプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="53f41d95873bd14bb41b9b13964b73702f270a5c" translate="yes" xml:space="preserve">
          <source>Returns a promise that resolves or rejects as soon as one of those promises resolves or rejects, with the value or reason from that promise.</source>
          <target state="translated">いずれかの約束が解決または拒否されるとすぐに解決または拒否される約束を、その約束の値または理由とともに返します。</target>
        </trans-unit>
        <trans-unit id="ef857672d8e5bb92df878c0cd409b4cd4a641e9f" translate="yes" xml:space="preserve">
          <source>Returns a promise that was already resolved as rejected with the &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; 拒否されたものとしてすでに解決されたプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="0f1de3ceadfe205063fa5015ea7133427f3c14e4" translate="yes" xml:space="preserve">
          <source>Returns a single promise that will be resolved with an array/hash of values, each value corresponding to the promise at the same index/key in the &lt;code&gt;promises&lt;/code&gt; array/hash. If any of the promises is resolved with a rejection, this resulting promise will be rejected with the same rejection value.</source>
          <target state="translated">戻り値の配列/ハッシュで解決される単一の約束で同じインデックス/キーでの約束に対応する各値 &lt;code&gt;promises&lt;/code&gt; 配列/ハッシュ。いずれかの約束が拒否によって解決される場合、この結果として生じる約束は同じ拒否値で拒否されます。</target>
        </trans-unit>
        <trans-unit id="2b7aae4d3bb18f409e3f426b3c452cfcca7d02e8" translate="yes" xml:space="preserve">
          <source>Returns a trusted representation of the parameter for the specified context. This trusted object will later on be used as-is, without any security check, by bindings or directives that require this security context. For instance, marking a string as trusted for the &lt;code&gt;$sce.HTML&lt;/code&gt; context will entirely bypass the potential &lt;code&gt;$sanitize&lt;/code&gt; call in corresponding &lt;code&gt;$sce.HTML&lt;/code&gt; bindings or directives, such as &lt;code&gt;ng-bind-html&lt;/code&gt;. Note that in most cases you won't need to call this function: if you have the sanitizer loaded, passing the value itself will render all the HTML that does not pose a security risk.</source>
          <target state="translated">指定されたコンテキストのパラメーターの信頼できる表現を返します。この信頼されたオブジェクトは、後でこのセキュリティコンテキストを必要とするバインディングまたはディレクティブによって、セキュリティチェックなしでそのまま使用されます。たとえば、文字列を &lt;code&gt;$sce.HTML&lt;/code&gt; コンテキストに対して信頼できるものとしてマークすると、対応する &lt;code&gt;$sce.HTML&lt;/code&gt; バインディングまたは &lt;code&gt;ng-bind-html&lt;/code&gt; などのディレクティブでの潜在的な &lt;code&gt;$sanitize&lt;/code&gt; 呼び出しが完全にバイパスされます。ほとんどの場合、この関数を呼び出す必要はないことに注意してください。サニタイザーをロードしている場合、値自体を渡すと、セキュリティリスクを引き起こさないすべてのHTMLがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="e63ee47d380d94c7114daa75d9a484cd818b0895" translate="yes" xml:space="preserve">
          <source>Returns an array containing the items from the specified &lt;code&gt;collection&lt;/code&gt;, ordered by a &lt;code&gt;comparator&lt;/code&gt; function based on the values computed using the &lt;code&gt;expression&lt;/code&gt; predicate.</source>
          <target state="translated">指定された &lt;code&gt;collection&lt;/code&gt; アイテムを含む配列を返します。 &lt;code&gt;expression&lt;/code&gt; 述語を使用して計算された値に基づいて &lt;code&gt;comparator&lt;/code&gt; 関数によって順序付けされます。</target>
        </trans-unit>
        <trans-unit id="c7812902dff27c75deda49f81fee7823d71feecf" translate="yes" xml:space="preserve">
          <source>Returns an array of service names which the function is requesting for injection. This API is used by the injector to determine which services need to be injected into the function when the function is invoked. There are three ways in which the function can be annotated with the needed dependencies.</source>
          <target state="translated">関数が注入を要求しているサービス名の配列を返します。この API は、関数が起動された際にどのサービスが関数に注入される必要があるかを判断するためにインジェクタによって使用されます。関数に必要な依存関係をアノテーションするには、3 つの方法があります。</target>
        </trans-unit>
        <trans-unit id="92130a2ac23bc3fb5d32303cc360ae1afb6c8f1e" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; and &lt;code&gt;passThrough&lt;/code&gt; methods that control how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; or &lt;code&gt;passThrough&lt;/code&gt; again in order to change how a matched request is handled.</source>
          <target state="translated">一致した要求の処理方法を制御 &lt;code&gt;respond&lt;/code&gt; および &lt;code&gt;passThrough&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために、 &lt;code&gt;respond&lt;/code&gt; または &lt;code&gt;passThrough&lt;/code&gt; を再度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b12454311ab476fb55e3d251419c65cd614f0f0d" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8f047416d0b927febeecefb5e718bd2f9a2df1b6" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled. See #expect for more info.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。詳細は#expectを参照してください。</target>
        </trans-unit>
        <trans-unit id="febb41850b2ea1bde8532f9d32840c151719f31c" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled. See &lt;a href=&quot;%24httpbackend#expect.html&quot;&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。詳細について&lt;a href=&quot;%24httpbackend#expect.html&quot;&gt; &lt;code&gt;expect&lt;/code&gt; &lt;/a&gt;、expectを参照してください。</target>
        </trans-unit>
        <trans-unit id="02fb6420d8c8e60003b530a7c0b9efa52506b950" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled. See &lt;a href=&quot;%24httpbackend#when.html&quot;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。詳細については&lt;a href=&quot;%24httpbackend#when.html&quot;&gt; &lt;code&gt;when&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fbcad89ebd6ebd347f43b569c186847060998b49" translate="yes" xml:space="preserve">
          <source>Returns self for chaining.</source>
          <target state="translated">連鎖のための self を返します。</target>
        </trans-unit>
        <trans-unit id="c1a2a6fe4c577bdba410ad77f0ccde833e7c1887" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;../service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; options when used as getter and self if used as setter.</source>
          <target state="translated">ゲッターとして使用した場合は&lt;a href=&quot;../service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;オプションを、セッターとして使用した場合はselfを返します。</target>
        </trans-unit>
        <trans-unit id="7a0b054676e6ac8ef163680f448b297979e55786" translate="yes" xml:space="preserve">
          <source>Returns the currently configured value if called without an argument or self for chaining otherwise.</source>
          <target state="translated">引数なしで呼び出された場合は現在設定されている値を返し、そうでない場合は連結のためにselfを返します。</target>
        </trans-unit>
        <trans-unit id="7566a0737921da5fa5699819d77a23be22ebc138" translate="yes" xml:space="preserve">
          <source>Returns the deserialized value of given cookie key</source>
          <target state="translated">与えられたクッキーキーのデシリアライズされた値を返します。</target>
        </trans-unit>
        <trans-unit id="ac1fa2af0777e89e79281d48c66da8366cebd038" translate="yes" xml:space="preserve">
          <source>Returns the hash fragment when called without any parameters.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合、ハッシュフラグメントを返します。</target>
        </trans-unit>
        <trans-unit id="bc4c7aa6bc7052877ba14c90df407adc10fbbf79" translate="yes" xml:space="preserve">
          <source>Returns the newly created injector for this app.</source>
          <target state="translated">このアプリのために新しく作成されたインジェクタを返します。</target>
        </trans-unit>
        <trans-unit id="b123de86d068011c16640c3bb3f09ea32bf5b046" translate="yes" xml:space="preserve">
          <source>Returns the symbol when used as getter and self if used as setter.</source>
          <target state="translated">ゲッターとして使用した場合はシンボルを、セッターとして使用した場合はselfを返します。</target>
        </trans-unit>
        <trans-unit id="1c26a024ab2a1085285618d5276acb4f34dbdaba" translate="yes" xml:space="preserve">
          <source>Returns the value of given cookie key</source>
          <target state="translated">指定したクッキーキーの値を返します。</target>
        </trans-unit>
        <trans-unit id="4b0f507f707432410cc232ce8c8391aa310c2b61" translate="yes" xml:space="preserve">
          <source>Returns the value of the given option</source>
          <target state="translated">指定したオプションの値を返します。</target>
        </trans-unit>
        <trans-unit id="f2ef6265c021653aef5295a30225ad8ccd92d4d1" translate="yes" xml:space="preserve">
          <source>Reusing and Overriding Messages</source>
          <target state="translated">メッセージの再利用とオーバーライド</target>
        </trans-unit>
        <trans-unit id="3cf34505e224585e164828aeb4eda4ea440ca96d" translate="yes" xml:space="preserve">
          <source>Right click on the element of interest in your browser and select 'inspect element'. You should see the browser debugger with the element you clicked on highlighted.</source>
          <target state="translated">ブラウザで興味のある要素を右クリックし、「要素の検査」を選択します。クリックした要素がハイライトされたブラウザデバッガが表示されます。</target>
        </trans-unit>
        <trans-unit id="b1282afa099110ef5bab27cf0d0743ad34ccd017" translate="yes" xml:space="preserve">
          <source>Right now, the &lt;code&gt;InvoiceController&lt;/code&gt; contains all logic of our example. When the application grows it is a good practice to move view-independent logic from the controller into a &lt;a href=&quot;services&quot;&gt;service&lt;/a&gt;, so it can be reused by other parts of the application as well. Later on, we could also change that service to load the exchange rates from the web, e.g. by calling the &lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;exchangeratesapi.io&lt;/a&gt; exchange rate API, without changing the controller.</source>
          <target state="translated">現在、 &lt;code&gt;InvoiceController&lt;/code&gt; には例のすべてのロジックが含まれています。アプリケーションが大きくなったときは、ビューに依存しないロジックをコントローラーから&lt;a href=&quot;services&quot;&gt;サービス&lt;/a&gt;に移動することをお勧めします。これにより、アプリケーションの他の部分でも再利用できます。後で、コントローラを変更せずに、&lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;exchangerateatesapi.io&lt;/a&gt;為替レートAPIを呼び出すなどして、ウェブから為替レートを読み込むようにそのサービスを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="388dc3a13e7c2df62a7d0113aee4bc60c22fb08f" translate="yes" xml:space="preserve">
          <source>Rollback all form controls pending updates to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$modelValue&lt;/code&gt; への更新を保留しているすべてのフォームコントロールをロールバックします。</target>
        </trans-unit>
        <trans-unit id="5996cf7c4ec8a2ea89e5c3d6b6268347017db8ab" translate="yes" xml:space="preserve">
          <source>RootRouter</source>
          <target state="translated">RootRouter</target>
        </trans-unit>
        <trans-unit id="a8b9a80d5b6fe314ec0617a6cf219163ebb328aa" translate="yes" xml:space="preserve">
          <source>Route path (matched against &lt;code&gt;$location.path&lt;/code&gt;). If &lt;code&gt;$location.path&lt;/code&gt; contains redundant trailing slash or is missing one, the route will still match and the &lt;code&gt;$location.path&lt;/code&gt; will be updated to add or drop the trailing slash to exactly match the route definition.</source>
          <target state="translated">ルートパス（ &lt;code&gt;$location.path&lt;/code&gt; と照合）。場合は &lt;code&gt;$location.path&lt;/code&gt; 冗長末尾にスラッシュが含まれているか、1が欠落している、ルートはまだ一致し、 &lt;code&gt;$location.path&lt;/code&gt; 正確にルート定義に一致するように末尾のスラッシュを追加または削除するように更新されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
