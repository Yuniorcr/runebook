<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="8cd86c75fc7a16bf892639137450bfd3eefeac9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$timeout&lt;/code&gt;: Pending timeouts (via &lt;a href=&quot;%24timeout&quot;&gt;&lt;code&gt;$timeout&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;$timeout&lt;/code&gt; ：保留中のタイムアウト（&lt;a href=&quot;%24timeout&quot;&gt; &lt;code&gt;$timeout&lt;/code&gt; &lt;/a&gt;経由）。</target>
        </trans-unit>
        <trans-unit id="f4030ab89071f67fc913b064bc6745c828e87306" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$transclude&lt;/code&gt; - A transclude linking function pre-bound to the correct transclusion scope: &lt;code&gt;function([scope], cloneLinkingFn, futureParentElement, slotName)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;$transclude&lt;/code&gt; &lt;code&gt;function([scope], cloneLinkingFn, futureParentElement, slotName)&lt;/code&gt; 正しいトランスクルージョンスコープに事前バインドされたトランスクルードリンク関数：function（[scope]、cloneLinkingFn、futureParentElement、slotName）：</target>
        </trans-unit>
        <trans-unit id="88625547e1d3dd6aea0b06e5147468fadbf848b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;attr&lt;/code&gt; - provides a way to execute an expression in the context of the parent scope. If no &lt;code&gt;attr&lt;/code&gt; name is specified then the attribute name is assumed to be the same as the local name. Given &lt;code&gt;&amp;lt;my-component my-attr=&quot;count = count + value&quot;&amp;gt;&lt;/code&gt; and the isolate scope definition &lt;code&gt;scope: {
localFn:'&amp;amp;myAttr' }&lt;/code&gt;, the isolate scope property &lt;code&gt;localFn&lt;/code&gt; will point to a function wrapper for the &lt;code&gt;count = count + value&lt;/code&gt; expression. Often it's desirable to pass data from the isolated scope via an expression to the parent scope. This can be done by passing a map of local variable names and values into the expression wrapper fn. For example, if the expression is &lt;code&gt;increment(amount)&lt;/code&gt; then we can specify the amount value by calling the &lt;code&gt;localFn&lt;/code&gt; as &lt;code&gt;localFn({amount: 22})&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; または &lt;code&gt;&amp;amp;attr&lt;/code&gt; -親スコープのコンテキストで式を実行する方法を提供します。いいえの場合 &lt;code&gt;attr&lt;/code&gt; 名前が指定されていない属性名はローカル名と同じであると仮定されます。所与の &lt;code&gt;&amp;lt;my-component my-attr=&quot;count = count + value&quot;&amp;gt;&lt;/code&gt; および単離スコープ定義 &lt;code&gt;scope: { localFn:'&amp;amp;myAttr' }&lt;/code&gt; 、単離スコーププロパティ &lt;code&gt;localFn&lt;/code&gt; をする機能ラッパーを指します &lt;code&gt;count = count + value&lt;/code&gt; 式。分離されたスコープから式を介して親スコープにデータを渡すことが望ましい場合がよくあります。これは、ローカル変数の名前と値のマップを式ラッパーfnに渡すことで実行できます。例えば、式が &lt;code&gt;increment(amount)&lt;/code&gt; の場合次に、 &lt;code&gt;localFn&lt;/code&gt; を &lt;code&gt;localFn({amount: 22})&lt;/code&gt; として呼び出すことで、金額の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="8b73fd3e4123cc56472fb162568d4edb1de1d812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;lt;attr&lt;/code&gt; - set up a one-way (one-directional) binding between a local scope property and an expression passed via the attribute &lt;code&gt;attr&lt;/code&gt;. The expression is evaluated in the context of the parent scope. If no &lt;code&gt;attr&lt;/code&gt; name is specified then the attribute name is assumed to be the same as the local name.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; または &lt;code&gt;&amp;lt;attr&lt;/code&gt; -ローカルスコーププロパティと属性 &lt;code&gt;attr&lt;/code&gt; を介して渡される式の間に一方向（一方向）バインディングを設定します。式は、親スコープのコンテキストで評価されます。いいえの場合 &lt;code&gt;attr&lt;/code&gt; 名前が指定されていない属性名はローカルの名前と同じであると仮定されます。</target>
        </trans-unit>
        <trans-unit id="4c93e6723e2f012293083cf8df433db8952b0089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;a href=&quot;/some/path&quot; internal-link&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt; will be rewritten</source>
          <target state="translated">&lt;code&gt;&amp;lt;a href=&quot;/some/path&quot; internal-link&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt; は書き換えられます</target>
        </trans-unit>
        <trans-unit id="ca85bd57db47701654feaf58ce22da660ea45aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;a href=&quot;/some/path&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt; will perform a full page reload</source>
          <target state="translated">&lt;code&gt;&amp;lt;a href=&quot;/some/path&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt; はページ全体の再読み込みを実行します</target>
        </trans-unit>
        <trans-unit id="421fd87c4cfbb2e340cfb5bce7a8401b7d87c1f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'A'&lt;/code&gt; - only matches attribute name</source>
          <target state="translated">&lt;code&gt;'A'&lt;/code&gt; A'-属性名のみに一致</target>
        </trans-unit>
        <trans-unit id="0969bafeaaf7cb189f1ce25a57b59ec4d5ec52b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'AEC'&lt;/code&gt; - matches either attribute or element or class name</source>
          <target state="translated">&lt;code&gt;'AEC'&lt;/code&gt; -属性、要素、またはクラス名のいずれかに一致</target>
        </trans-unit>
        <trans-unit id="be80ac22a150162e81e647877538e5f836cc9640" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'C'&lt;/code&gt; - only matches class name</source>
          <target state="translated">&lt;code&gt;'C'&lt;/code&gt; C'-クラス名のみに一致</target>
        </trans-unit>
        <trans-unit id="d561c70c26589e36e4407cf47190e56037dcea39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'E'&lt;/code&gt; - only matches element name</source>
          <target state="translated">&lt;code&gt;'E'&lt;/code&gt; E'-要素名のみに一致</target>
        </trans-unit>
        <trans-unit id="2ef5665019adfadd791d2729e0112ac8b1483542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'EEE'&lt;/code&gt;: Day in Week, (Sun-Sat)</source>
          <target state="translated">&lt;code&gt;'EEE'&lt;/code&gt; ：曜日、（日〜土）</target>
        </trans-unit>
        <trans-unit id="50a71144bfa0907e5bcd9ce3d5cc89868adb9af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'EEEE'&lt;/code&gt;: Day in Week,(Sunday-Saturday)</source>
          <target state="translated">&lt;code&gt;'EEEE'&lt;/code&gt; ：曜日、（日曜から土曜）</target>
        </trans-unit>
        <trans-unit id="1a328b9537d02cdbe570fca917f76f0454d324b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'G'&lt;/code&gt;, &lt;code&gt;'GG'&lt;/code&gt;, &lt;code&gt;'GGG'&lt;/code&gt;: The abbreviated form of the era string (e.g. 'AD')</source>
          <target state="translated">&lt;code&gt;'G'&lt;/code&gt; 、 &lt;code&gt;'GG'&lt;/code&gt; 、 &lt;code&gt;'GGG'&lt;/code&gt; ：元号文字列の省略形（例： 'AD'）</target>
        </trans-unit>
        <trans-unit id="e5d80882c8061f72b524bc49426365a32a257e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'GGGG'&lt;/code&gt;: The long form of the era string (e.g. 'Anno Domini')</source>
          <target state="translated">&lt;code&gt;'GGGG'&lt;/code&gt; ：元号の長い形式（例： 'Anno Domini'）</target>
        </trans-unit>
        <trans-unit id="5c2d6a4ae2ac477f6629f97d03fa5b61a40e9b2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'H'&lt;/code&gt;: Hour in day (0-23)</source>
          <target state="translated">&lt;code&gt;'H'&lt;/code&gt; ：時間（0〜23）</target>
        </trans-unit>
        <trans-unit id="92467cf9effd6f49d7085b9b8653117a607e75ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'HH'&lt;/code&gt;: Hour in day, padded (00-23)</source>
          <target state="translated">&lt;code&gt;'HH'&lt;/code&gt; ：パッドされた1日の時（00-23）</target>
        </trans-unit>
        <trans-unit id="8a0a1b29878917c99f174ff736a7463018e0cbf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'LLLL'&lt;/code&gt;: Stand-alone month in year (January-December)</source>
          <target state="translated">&lt;code&gt;'LLLL'&lt;/code&gt; ：スタンドアロンの月（1月から12月）</target>
        </trans-unit>
        <trans-unit id="8b354fc28323ff9f322bdd282f57cc638f669cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'M'&lt;/code&gt; - only matches comment</source>
          <target state="translated">&lt;code&gt;'M'&lt;/code&gt; -コメントのみに一致</target>
        </trans-unit>
        <trans-unit id="06f3df2fed67deb4a7874eea81e2fbab50991779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'M'&lt;/code&gt;: Month in year (1-12)</source>
          <target state="translated">&lt;code&gt;'M'&lt;/code&gt; ：月（1〜12）</target>
        </trans-unit>
        <trans-unit id="2f28c7091360ca91edabcbe6cbd2c248c8d6df2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'MM'&lt;/code&gt;: Month in year, padded (01-12)</source>
          <target state="translated">&lt;code&gt;'MM'&lt;/code&gt; ：年の月、パディング（01-12）</target>
        </trans-unit>
        <trans-unit id="d4feab245a646de1d779a8ac25edc60ead89aa71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'MMM'&lt;/code&gt;: Month in year (Jan-Dec)</source>
          <target state="translated">&lt;code&gt;'MMM'&lt;/code&gt; ：月（1月から12月）</target>
        </trans-unit>
        <trans-unit id="29e6dfe23e2ed107945f132f3ed9346844347823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'MMMM'&lt;/code&gt;: Month in year (January-December)</source>
          <target state="translated">&lt;code&gt;'MMMM'&lt;/code&gt; ：年の月（1月から12月）</target>
        </trans-unit>
        <trans-unit id="a32ecbaa2dcd462708ab46be2ac422f0cc0e67b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'Z'&lt;/code&gt;: 4 digit (+sign) representation of the timezone offset (-1200-+1200)</source>
          <target state="translated">&lt;code&gt;'Z'&lt;/code&gt; ：タイムゾーンオフセットの4桁（+符号）表現（-1200- + 1200）</target>
        </trans-unit>
        <trans-unit id="6302338100642d0f374d7065a8e20e48d4758fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'a'&lt;/code&gt;: AM/PM marker</source>
          <target state="translated">&lt;code&gt;'a'&lt;/code&gt; ：AM / PMマーカー</target>
        </trans-unit>
        <trans-unit id="90b0789d5186ad0f16e7ddeef5ccd47cc4687c24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'d'&lt;/code&gt;: Day in month (1-31)</source>
          <target state="translated">&lt;code&gt;'d'&lt;/code&gt; ：月の日（1-31）</target>
        </trans-unit>
        <trans-unit id="0e3452b787cd2276bcd3e67074c648d11eb6511d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'dd'&lt;/code&gt;: Day in month, padded (01-31)</source>
          <target state="translated">&lt;code&gt;'dd'&lt;/code&gt; ：パディングされた月の日（01-31）</target>
        </trans-unit>
        <trans-unit id="a97780a7803724d81b9d5f0afb45a63453f34255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'element'&lt;/code&gt; - transclude the whole of the directive's element including any directives on this element that are defined at a lower priority than this directive. When used, the &lt;code&gt;template&lt;/code&gt; property is ignored.</source>
          <target state="translated">&lt;code&gt;'element'&lt;/code&gt; element'-このディレクティブよりも低い優先度で定義されているこの要素のディレクティブを含む、ディレクティブの要素全体をトランスクルージョンします。使用する場合、 &lt;code&gt;template&lt;/code&gt; プロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="6378ef6805e9c7dcffacdc0930f63f1aaa77320c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'element'&lt;/code&gt; - transclude the whole of the directive's element including any directives on this element that defined at a lower priority than this directive. When used, the &lt;code&gt;template&lt;/code&gt; property is ignored.</source>
          <target state="translated">&lt;code&gt;'element'&lt;/code&gt; element'-このディレクティブよりも低い優先度で定義されているこのエレメントのディレクティブを含む、ディレクティブのエレメント全体をトランスクルードします。使用すると、 &lt;code&gt;template&lt;/code&gt; プロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="3c1e771a51135e21e055caecca9b92e31b0232de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'fullDate'&lt;/code&gt;: equivalent to &lt;code&gt;'EEEE, MMMM d, y'&lt;/code&gt; for en_US locale (e.g. Friday, September 3, 2010)</source>
          <target state="translated">&lt;code&gt;'fullDate'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'EEEE, MMMM d, y'&lt;/code&gt; と同等（例：2010年9月3日金曜日）</target>
        </trans-unit>
        <trans-unit id="3eb6af31030bd2baca93aca59a220af295305477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'h'&lt;/code&gt;: Hour in AM/PM, (1-12)</source>
          <target state="translated">&lt;code&gt;'h'&lt;/code&gt; ：AM / PMでの時、（1-12）</target>
        </trans-unit>
        <trans-unit id="6b2eac549e03e2dc96a0c80cad0a3dda7ef1f434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'hh'&lt;/code&gt;: Hour in AM/PM, padded (01-12)</source>
          <target state="translated">&lt;code&gt;'hh'&lt;/code&gt; ：AM / PMでの時、埋め込み（01-12）</target>
        </trans-unit>
        <trans-unit id="27a7f059529eb400535e22614ed6e40a4bf0e231" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'longDate'&lt;/code&gt;: equivalent to &lt;code&gt;'MMMM d, y'&lt;/code&gt; for en_US locale (e.g. September 3, 2010)</source>
          <target state="translated">&lt;code&gt;'longDate'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'MMMM d, y'&lt;/code&gt; と同等（例：2010年9月3日）</target>
        </trans-unit>
        <trans-unit id="c619c05794cc0276b81fde54ac0ec3a5139a0f5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'m'&lt;/code&gt;: Minute in hour (0-59)</source>
          <target state="translated">&lt;code&gt;'m'&lt;/code&gt; ：時間の分（0-59）</target>
        </trans-unit>
        <trans-unit id="0390304b92147bdf876f9de9be9e6a6b0669a1a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'medium'&lt;/code&gt;: equivalent to &lt;code&gt;'MMM d, y h:mm:ss a'&lt;/code&gt; for en_US locale (e.g. Sep 3, 2010 12:05:08 PM)</source>
          <target state="translated">&lt;code&gt;'medium'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'MMM d, y h:mm:ss a'&lt;/code&gt; と同等（例：2010年9月3日12:05:08 PM）</target>
        </trans-unit>
        <trans-unit id="16e7c68cf6d9b2b392283fa0034867b0f0e5be32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'mediumDate'&lt;/code&gt;: equivalent to &lt;code&gt;'MMM d, y'&lt;/code&gt; for en_US locale (e.g. Sep 3, 2010)</source>
          <target state="translated">&lt;code&gt;'mediumDate'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'MMM d, y'&lt;/code&gt; と同等（例：2010年9月3日）</target>
        </trans-unit>
        <trans-unit id="8b4f4c842a81b831bac7dff1d5826ff6683f3b34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'mediumTime'&lt;/code&gt;: equivalent to &lt;code&gt;'h:mm:ss a'&lt;/code&gt; for en_US locale (e.g. 12:05:08 PM)</source>
          <target state="translated">&lt;code&gt;'mediumTime'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'h:mm:ss a'&lt;/code&gt; と同等（例：12:05:08 PM）</target>
        </trans-unit>
        <trans-unit id="469d17a3c8653da67806972907e8ddf6cda14bc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'mm'&lt;/code&gt;: Minute in hour, padded (00-59)</source>
          <target state="translated">&lt;code&gt;'mm'&lt;/code&gt; ：パッドされた時間（分）（00-59）</target>
        </trans-unit>
        <trans-unit id="99f6b6074b979d185b013adbeee07ce417afe272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'s'&lt;/code&gt;: Second in minute (0-59)</source>
          <target state="translated">&lt;code&gt;'s'&lt;/code&gt; ：秒の秒（0-59）</target>
        </trans-unit>
        <trans-unit id="d06db156974a571757ea1e03202102319abb8edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'short'&lt;/code&gt;: equivalent to &lt;code&gt;'M/d/yy h:mm a'&lt;/code&gt; for en_US locale (e.g. 9/3/10 12:05 PM)</source>
          <target state="translated">&lt;code&gt;'short'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'M/d/yy h:mm a'&lt;/code&gt; と同等（例：9/3/10 12:05 PM）</target>
        </trans-unit>
        <trans-unit id="9e1addb5268d3d32c463920a6040c062e89da990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'shortDate'&lt;/code&gt;: equivalent to &lt;code&gt;'M/d/yy'&lt;/code&gt; for en_US locale (e.g. 9/3/10)</source>
          <target state="translated">&lt;code&gt;'shortDate'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'M/d/yy'&lt;/code&gt; と同等（例：9/3/10）</target>
        </trans-unit>
        <trans-unit id="cc41b46afd44c36976dcae9bf343e3b37894f617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'shortTime'&lt;/code&gt;: equivalent to &lt;code&gt;'h:mm a'&lt;/code&gt; for en_US locale (e.g. 12:05 PM)</source>
          <target state="translated">&lt;code&gt;'shortTime'&lt;/code&gt; ：en_USロケールの &lt;code&gt;'h:mm a'&lt;/code&gt; と同等（例：12:05 PM）</target>
        </trans-unit>
        <trans-unit id="8dec6d4834788541c4af7bca9267798ea4d1298e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'ss'&lt;/code&gt;: Second in minute, padded (00-59)</source>
          <target state="translated">&lt;code&gt;'ss'&lt;/code&gt; ：秒単位の秒、パディング（00-59）</target>
        </trans-unit>
        <trans-unit id="0c6184bda41d2ff90825ec7fe25259838c166476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'sss'&lt;/code&gt;: Millisecond in second, padded (000-999)</source>
          <target state="translated">&lt;code&gt;'sss'&lt;/code&gt; ：ミリ秒、秒をパディング（000-999）</target>
        </trans-unit>
        <trans-unit id="1a6644dc88aac5d9f59e076745c0805b3a21df85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'w'&lt;/code&gt;: Week of year (0-53). Week 1 is the week with the first Thursday of the year</source>
          <target state="translated">&lt;code&gt;'w'&lt;/code&gt; ：週（0〜53）。第1週は、その年の第1木曜日のある週です</target>
        </trans-unit>
        <trans-unit id="10032ab0b231d6778b4478446d3a3f97431deaa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'ww'&lt;/code&gt;: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year</source>
          <target state="translated">&lt;code&gt;'ww'&lt;/code&gt; ：年の週、埋め込み（00-53）。週01は、その年の最初の木曜日のある週です</target>
        </trans-unit>
        <trans-unit id="d15283963a9c9b2ae64bcff8162f439d3f6e4daf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'y'&lt;/code&gt;: 1 digit representation of year, e.g. (AD 1 =&amp;gt; 1, AD 199 =&amp;gt; 199)</source>
          <target state="translated">&lt;code&gt;'y'&lt;/code&gt; ：年の1桁表記、たとえば（AD 1 =&amp;gt; 1、AD 199 =&amp;gt; 199）</target>
        </trans-unit>
        <trans-unit id="3dd39b1667b5ef9dd807cb7139e1d265438f638c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'yy'&lt;/code&gt;: 2 digit representation of year, padded (00-99). (e.g. AD 2001 =&amp;gt; 01, AD 2010 =&amp;gt; 10)</source>
          <target state="translated">&lt;code&gt;'yy'&lt;/code&gt; ：年の2桁の表記、埋め込み（00-99）。（例：AD 2001 =&amp;gt; 01、AD 2010 =&amp;gt; 10）</target>
        </trans-unit>
        <trans-unit id="efe81a29cb10a83d3e13b939233c61ab1d9d1a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'yyyy'&lt;/code&gt;: 4 digit representation of year (e.g. AD 1 =&amp;gt; 0001, AD 2010 =&amp;gt; 2010)</source>
          <target state="translated">&lt;code&gt;'yyyy'&lt;/code&gt; ：年の4桁表記（例：AD 1 =&amp;gt; 0001、AD 2010 =&amp;gt; 2010）</target>
        </trans-unit>
        <trans-unit id="90d1af0e349665059fb59cd047c66e8aff65956e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(key, value) in expression&lt;/code&gt; &amp;ndash; where &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; can be any user defined identifiers, and &lt;code&gt;expression&lt;/code&gt; is the scope expression giving the collection to enumerate.</source>
          <target state="translated">&lt;code&gt;(key, value) in expression&lt;/code&gt; &amp;ndash; &lt;code&gt;key&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; は任意のユーザー定義の識別子にすることができ、 &lt;code&gt;expression&lt;/code&gt; はコレクションに列挙するスコープ式です。</target>
        </trans-unit>
        <trans-unit id="f3af284ec449b09d12963fe6391b6587a8b6fade" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt;: matches zero or more occurrences of &lt;em&gt;any&lt;/em&gt; character. As such, it's not appropriate for use in a scheme, domain, etc. as it would match too much. (e.g. http://**.example.com/ would match &lt;a href=&quot;http://evil.com/?ignore=.example.com/&quot;&gt;http://evil.com/?ignore=.example.com/&lt;/a&gt; and that might not have been the intention.) Its usage at the very end of the path is ok. (e.g. &lt;a href=&quot;http://foo.example.com/templates/**&quot;&gt;http://foo.example.com/templates/**&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; ：&lt;em&gt;任意の&lt;/em&gt;文字の0回以上の出現に一致します。そのため、一致率が高すぎるため、スキームやドメインなどでの使用には適していません。（たとえば、http：//**.example.com/は&lt;a href=&quot;http://evil.com/?ignore=.example.com/&quot;&gt;http://evil.com/?ignore=.example.com/&lt;/a&gt;と一致し、それは意図されていなかった可能性があります。）パスの最後での使用大丈夫です。（例：&lt;a href=&quot;http://foo.example.com/templates/**&quot;&gt;http&lt;/a&gt; : //foo.example.com/templates/**）。</target>
        </trans-unit>
        <trans-unit id="85211e19768804adf714f984824a1301c8bd1728" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt;: matches zero or more occurrences of any character other than one of the following 6 characters: '&lt;code&gt;:&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;', '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;?&lt;/code&gt;', '&lt;code&gt;&amp;amp;&lt;/code&gt;' and '&lt;code&gt;;&lt;/code&gt;'. It's a useful wildcard for use for matching resource URL lists.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; ：次の6文字のいずれか以外の文字の0回以上の出現に一致します： ' &lt;code&gt;:&lt;/code&gt; '、 ' &lt;code&gt;/&lt;/code&gt; '、 ' &lt;code&gt;.&lt;/code&gt; '、' &lt;code&gt;?&lt;/code&gt; '、' &lt;code&gt;&amp;amp;&lt;/code&gt; 'および' &lt;code&gt;;&lt;/code&gt; '。これは、リソースURLリストの照合に使用するのに便利なワイルドカードです。</target>
        </trans-unit>
        <trans-unit id="a712c883416ef1dd325016811cf86f98bf8a2148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt;: matches zero or more occurrences of any character other than one of the following 6 characters: '&lt;code&gt;:&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;', '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;?&lt;/code&gt;', '&lt;code&gt;&amp;amp;&lt;/code&gt;' and '&lt;code&gt;;&lt;/code&gt;'. It's a useful wildcard for use in a whitelist.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; ：次の6文字のいずれか以外の文字の0回以上の出現に一致します： ' &lt;code&gt;:&lt;/code&gt; '、 ' &lt;code&gt;/&lt;/code&gt; '、 ' &lt;code&gt;.&lt;/code&gt; '、' &lt;code&gt;?&lt;/code&gt; '、' &lt;code&gt;&amp;amp;&lt;/code&gt; 'および' &lt;code&gt;;&lt;/code&gt; '。これは、ホワイトリストで使用するのに役立つワイルドカードです。</target>
        </trans-unit>
        <trans-unit id="56b6f9405c013038abc60c31538d49a7922da466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-1&lt;/code&gt;, if the 1st value is &quot;less than&quot; the 2nd value (compared using the &lt;code&gt;&amp;lt;&lt;/code&gt; operator).</source>
          <target state="translated">&lt;code&gt;-1&lt;/code&gt; 、1番目の値が2番目の値より「小さい」場合（ &lt;code&gt;&amp;lt;&lt;/code&gt; 演算子を使用して比較）。</target>
        </trans-unit>
        <trans-unit id="591ffe0f6935c96365fd287143293e851e64a446" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt;, if the values are equal (by strict equality comparison, i.e. using &lt;code&gt;===&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; 、値が等しい場合（厳密な等価比較、つまり &lt;code&gt;===&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="025357d9e6915ad915e4343ef9b1039849fa7183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1&lt;/code&gt;, otherwise.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; 、それ以外の場合。</target>
        </trans-unit>
        <trans-unit id="7d4aba58c3b62237a9885cb4f78ac6589d3e8996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&lt;/code&gt; or &lt;code&gt;=attr&lt;/code&gt; - set up a bidirectional binding between a local scope property and an expression passed via the attribute &lt;code&gt;attr&lt;/code&gt;. The expression is evaluated in the context of the parent scope. If no &lt;code&gt;attr&lt;/code&gt; name is specified then the attribute name is assumed to be the same as the local name. Given &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; and the isolate scope definition &lt;code&gt;scope: {
localModel: '=myAttr' }&lt;/code&gt;, the property &lt;code&gt;localModel&lt;/code&gt; on the directive's scope will reflect the value of &lt;code&gt;parentModel&lt;/code&gt; on the parent scope. Changes to &lt;code&gt;parentModel&lt;/code&gt; will be reflected in &lt;code&gt;localModel&lt;/code&gt; and vice versa. If the binding expression is non-assignable, or if the attribute isn't optional and doesn't exist, an exception (&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/nonassign&quot;&gt;&lt;code&gt;$compile:nonassign&lt;/code&gt;&lt;/a&gt;) will be thrown upon discovering changes to the local value, since it will be impossible to sync them back to the parent scope.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; または &lt;code&gt;=attr&lt;/code&gt; -ローカルスコーププロパティと属性 &lt;code&gt;attr&lt;/code&gt; を介して渡される式の間の双方向バインディングを設定します。式は、親スコープのコンテキストで評価されます。いいえの場合 &lt;code&gt;attr&lt;/code&gt; 名前が指定されていない属性名はローカル名と同じであると仮定されます。与えられた &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; と分離株スコープ定義 &lt;code&gt;scope: { localModel: '=myAttr' }&lt;/code&gt; 、プロパティ &lt;code&gt;localModel&lt;/code&gt; ディレクティブのスコープには、の値が反映されます &lt;code&gt;parentModel&lt;/code&gt; を親スコープに。 &lt;code&gt;parentModel&lt;/code&gt; への変更はlocalModelに反映され &lt;code&gt;localModel&lt;/code&gt; およびその逆。バインディング式が割り当て可能でない場合、または属性がオプションではなく、存在しない場合、ローカル値への変更を検出すると、それらを同期することができないため、例外（&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/nonassign&quot;&gt; &lt;code&gt;$compile:nonassign&lt;/code&gt; &lt;/a&gt;）がスローされます。親スコープに戻ります。</target>
        </trans-unit>
        <trans-unit id="331e1bbf381a42072735b78f93e05c9b17d79d8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&lt;/code&gt; or &lt;code&gt;=attr&lt;/code&gt; - set up a bidirectional binding between a local scope property and an expression passed via the attribute &lt;code&gt;attr&lt;/code&gt;. The expression is evaluated in the context of the parent scope. If no &lt;code&gt;attr&lt;/code&gt; name is specified then the attribute name is assumed to be the same as the local name. Given &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; and the isolate scope definition &lt;code&gt;scope: {
localModel: '=myAttr' }&lt;/code&gt;, the property &lt;code&gt;localModel&lt;/code&gt; on the directive's scope will reflect the value of &lt;code&gt;parentModel&lt;/code&gt; on the parent scope. Changes to &lt;code&gt;parentModel&lt;/code&gt; will be reflected in &lt;code&gt;localModel&lt;/code&gt; and vice versa. If the binding expression is non-assignable, or if the attribute isn't optional and doesn't exist, an exception (&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/service/error/%24compile/nonassign&quot;&gt;&lt;code&gt;$compile:nonassign&lt;/code&gt;&lt;/a&gt;) will be thrown upon discovering changes to the local value, since it will be impossible to sync them back to the parent scope.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; または &lt;code&gt;=attr&lt;/code&gt; -ローカルスコーププロパティと属性 &lt;code&gt;attr&lt;/code&gt; を介して渡される式の間に双方向バインディングを設定します。式は、親スコープのコンテキストで評価されます。いいえの場合 &lt;code&gt;attr&lt;/code&gt; 名前が指定されていない属性名はローカル名と同じであると仮定されます。与えられた &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; と分離株スコープ定義 &lt;code&gt;scope: { localModel: '=myAttr' }&lt;/code&gt; 、プロパティ &lt;code&gt;localModel&lt;/code&gt; ディレクティブのスコープには、の値が反映されます &lt;code&gt;parentModel&lt;/code&gt; を親スコープに。 &lt;code&gt;parentModel&lt;/code&gt; への変更はlocalModelに反映され &lt;code&gt;localModel&lt;/code&gt; およびその逆。バインディング式が割り当て不可能な場合、または属性がオプションではなく存在しない場合、ローカル値への変更を検出すると例外（&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/service/error/%24compile/nonassign&quot;&gt; &lt;code&gt;$compile:nonassign&lt;/code&gt; &lt;/a&gt;）がスローされます。これは、それらを同期できないためです。親スコープに戻ります。</target>
        </trans-unit>
        <trans-unit id="276e096706d29741cc00a5d39cb9abf46320dd89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&lt;/code&gt; - Attempt to locate the required controller or pass &lt;code&gt;null&lt;/code&gt; to the &lt;code&gt;link&lt;/code&gt; fn if not found.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; -必要なコントローラーを見つけるか、見つからない場合は &lt;code&gt;link&lt;/code&gt; fnに &lt;code&gt;null&lt;/code&gt; を渡そうとします。</target>
        </trans-unit>
        <trans-unit id="3addafa45ca1035c29fe7542bccb53677faf5102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?^&lt;/code&gt; - Attempt to locate the required controller by searching the element and its parents or pass &lt;code&gt;null&lt;/code&gt; to the &lt;code&gt;link&lt;/code&gt; fn if not found.</source>
          <target state="translated">&lt;code&gt;?^&lt;/code&gt; -要素とその親を検索して必要なコントローラーを見つけるか、見つからない場合は &lt;code&gt;link&lt;/code&gt; fnに &lt;code&gt;null&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="242a7dd16b1e9f05b4f27a2ded61f207cd716052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?^^&lt;/code&gt; - Attempt to locate the required controller by searching the element's parents, or pass &lt;code&gt;null&lt;/code&gt; to the &lt;code&gt;link&lt;/code&gt; fn if not found.</source>
          <target state="translated">&lt;code&gt;?^^&lt;/code&gt; -要素の親を検索して必要なコントローラを見つけるか、見つからない場合は &lt;code&gt;link&lt;/code&gt; fnに &lt;code&gt;null&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="8eec78f6cd576d162c890f95185586acb9332aed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt; or &lt;code&gt;@attr&lt;/code&gt; - bind a local scope property to the value of DOM attribute. The result is always a string since DOM attributes are strings. If no &lt;code&gt;attr&lt;/code&gt; name is specified then the attribute name is assumed to be the same as the local name. Given &lt;code&gt;&amp;lt;my-component
my-attr=&quot;hello {{name}}&quot;&amp;gt;&lt;/code&gt; and the isolate scope definition &lt;code&gt;scope: { localName:'@myAttr' }&lt;/code&gt;, the directive's scope property &lt;code&gt;localName&lt;/code&gt; will reflect the interpolated value of &lt;code&gt;hello
{{name}}&lt;/code&gt;. As the &lt;code&gt;name&lt;/code&gt; attribute changes so will the &lt;code&gt;localName&lt;/code&gt; property on the directive's scope. The &lt;code&gt;name&lt;/code&gt; is read from the parent scope (not the directive's scope).</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; または@ &lt;code&gt;@attr&lt;/code&gt; ローカルスコーププロパティをDOM属性の値にバインドします。 DOM属性は文字列であるため、結果は常に文字列になります。いいえの場合 &lt;code&gt;attr&lt;/code&gt; 名前が指定されていない属性名はローカル名と同じであると仮定されます。与えられた &lt;code&gt;&amp;lt;my-component my-attr=&quot;hello {{name}}&quot;&amp;gt;&lt;/code&gt; と分離株スコープ定義 &lt;code&gt;scope: { localName:'@myAttr' }&lt;/code&gt; 、ディレクティブのスコープのプロパティの &lt;code&gt;localName&lt;/code&gt; の補間値が反映されます &lt;code&gt;hello {{name}}&lt;/code&gt; 。通り &lt;code&gt;name&lt;/code&gt; 属性がそうする変更 &lt;code&gt;localName&lt;/code&gt; ディレクティブのスコープのプロパティを。 &lt;code&gt;name&lt;/code&gt; 親スコープ（ないディレクティブのスコープ）から読み込まれます。</target>
        </trans-unit>
        <trans-unit id="d08163529d1ee05684bfc3c8986615ba4859c2a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A&lt;/code&gt; - Attribute (default): &lt;code&gt;&amp;lt;div my-directive=&quot;exp&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; -属性（デフォルト）： &lt;code&gt;&amp;lt;div my-directive=&quot;exp&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb477ad6dcfb6c5b5c633fa0dc3e80aca744b57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.&amp;lt;Promise&amp;gt;&lt;/code&gt;&lt;code&gt;Object.&amp;lt;Promise&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array.&amp;lt;Promise&amp;gt;&lt;/code&gt;&lt;code&gt;Object.&amp;lt;Promise&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e17dc35a734b3aa8c0c11b0ac16ecb292c964bf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.&amp;lt;String&amp;gt;&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array.&amp;lt;String&amp;gt;&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4155223cd29801d5d59519db0542889866ff99b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt;: An array of function and/or string predicates. If a predicate cannot determine the relative order of two items, the next predicate is used as a tie-breaker.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; ：関数や文字列の述語の配列。述語が2つの項目の相対的な順序を決定できない場合、次の述語がタイブレーカーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="6274ede8c21162f9306686e7250f2cf51cc4ae07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;ArrayLike&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;ArrayLike&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="49f3bf1ba4e71d9ec66c6a80f9faa6811176b261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;ArrayLike&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;ArrayLike&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30c15f5438017ec8fea6cbe3317b4e7d4a20d884" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f8fecfc6db73aeedd84373054de9dd52597646a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; - Class: &lt;code&gt;&amp;lt;div class=&quot;my-directive: exp;&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; -クラス： &lt;code&gt;&amp;lt;div class=&quot;my-directive: exp;&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ee569e2fcb14b32fcee365083b58066596e1df4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ComponentInstructions&lt;/code&gt; is a public API. Instances of &lt;code&gt;ComponentInstruction&lt;/code&gt; are passed to route lifecycle hooks, like &lt;code&gt;$routerCanActivate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ComponentInstructions&lt;/code&gt; はパブリックAPIです。 &lt;code&gt;ComponentInstruction&lt;/code&gt; のインスタンスは、 &lt;code&gt;$routerCanActivate&lt;/code&gt; などのルートライフサイクルフックに渡されます。</target>
        </trans-unit>
        <trans-unit id="dfe4f4b9b96296cc929f1fe6a262391fc87886a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Constructor&lt;/code&gt;: a new instance of the provider will be created using &lt;a href=&quot;%24injector#instantiate.html&quot;&gt;$injector.instantiate()&lt;/a&gt;, then treated as &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Constructor&lt;/code&gt; ：プロバイダーの新しいインスタンスが&lt;a href=&quot;%24injector#instantiate.html&quot;&gt;$ injector.instantiate（）&lt;/a&gt;を使用して作成され、 &lt;code&gt;object&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="030a553c41310b0a32b753cba6f1fa77bbdd8f96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Date&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85726497c0d9fec73a653c5e30caef7348c1ead4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&lt;/code&gt; - Element name (default): &lt;code&gt;&amp;lt;my-directive&amp;gt;&amp;lt;/my-directive&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;E&lt;/code&gt; -要素名（デフォルト）： &lt;code&gt;&amp;lt;my-directive&amp;gt;&amp;lt;/my-directive&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f5be366661d75b470e3e2ce0ec596f570daad80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FormController&lt;/code&gt; keeps track of all its controls and nested forms as well as the state of them, such as being valid/invalid or dirty/pristine.</source>
          <target state="translated">&lt;code&gt;FormController&lt;/code&gt; は、そのすべてのコントロールとネストされたフォーム、およびそれらの状態（有効/無効またはダーティ/元の状態など）を追跡します。</target>
        </trans-unit>
        <trans-unit id="adbe3f67ea70880bacd5589162452bfdf199f9a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt;: A getter function. This function will be called with each item as argument and the return value will be used for sorting.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; ：ゲッター関数。この関数は、各項目を引数として呼び出され、戻り値はソートに使用されます。</target>
        </trans-unit>
        <trans-unit id="6b1e40d77fd626280f8064bb19a89d5d843321cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;M&lt;/code&gt; - Comment: &lt;code&gt;&amp;lt;!-- directive: my-directive exp --&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; -コメント： &lt;code&gt;&amp;lt;!-- directive: my-directive exp --&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="678595eccf1ff6c2450de5e2208bfd68bdbd5cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NgModelController&lt;/code&gt; provides API for the &lt;a href=&quot;../directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directive. The controller contains services for data-binding, validation, CSS updates, and value formatting and parsing. It purposefully does not contain any logic which deals with DOM rendering or listening to DOM events. Such DOM related logic should be provided by other directives which make use of &lt;code&gt;NgModelController&lt;/code&gt; for data-binding to control elements. AngularJS provides this DOM logic for most &lt;a href=&quot;../directive/input&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; elements. At the end of this page you can find a &lt;a href=&quot;ngmodel.ngmodelcontroller#custom-control-example.html&quot;&gt;custom control example&lt;/a&gt; that uses &lt;code&gt;ngModelController&lt;/code&gt; to bind to &lt;code&gt;contenteditable&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;NgModelController&lt;/code&gt; は&lt;a href=&quot;../directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;ディレクティブのAPIを提供します。コントローラーには、データバインディング、検証、CSS更新、および値のフォーマットと解析のためのサービスが含まれています。 DOMレンダリングやDOMイベントのリスニングを処理するロジックは意図的に含まれていません。このようなDOM関連のロジックは、制御要素へのデータバインディングに &lt;code&gt;NgModelController&lt;/code&gt; を利用する他のディレクティブによって提供される必要があります。 AngularJSは、ほとんどの&lt;a href=&quot;../directive/input&quot;&gt; &lt;code&gt;input&lt;/code&gt; &lt;/a&gt;要素に対してこのDOMロジックを提供します。このページの最後に、 &lt;code&gt;ngModelController&lt;/code&gt; を使用し &lt;code&gt;contenteditable&lt;/code&gt; 要素にバインドする&lt;a href=&quot;ngmodel.ngmodelcontroller#custom-control-example.html&quot;&gt;カスタムコントロールの例&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="25de0f6ee742520f08515369b24e6a360a62025b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NgModelController&lt;/code&gt; provides API for the &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directive. The controller contains services for data-binding, validation, CSS updates, and value formatting and parsing. It purposefully does not contain any logic which deals with DOM rendering or listening to DOM events. Such DOM related logic should be provided by other directives which make use of &lt;code&gt;NgModelController&lt;/code&gt; for data-binding to control elements. AngularJS provides this DOM logic for most &lt;a href=&quot;directive/input&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; elements. At the end of this page you can find a &lt;a href=&quot;type/ngmodel.ngmodelcontroller#custom-control-example.html&quot;&gt;custom control example&lt;/a&gt; that uses &lt;code&gt;ngModelController&lt;/code&gt; to bind to &lt;code&gt;contenteditable&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;NgModelController&lt;/code&gt; は&lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;ディレクティブのAPIを提供します。コントローラーには、データバインディング、検証、CSS更新、および値のフォーマットと解析のためのサービスが含まれています。 DOMレンダリングやDOMイベントのリスニングを処理するロジックは意図的に含まれていません。このようなDOM関連のロジックは、制御要素へのデータバインディングに &lt;code&gt;NgModelController&lt;/code&gt; を利用する他のディレクティブによって提供される必要があります。 AngularJSは、ほとんどの&lt;a href=&quot;directive/input&quot;&gt; &lt;code&gt;input&lt;/code&gt; &lt;/a&gt;要素に対してこのDOMロジックを提供します。このページの最後に、 &lt;code&gt;ngModelController&lt;/code&gt; を使用し &lt;code&gt;contenteditable&lt;/code&gt; 要素にバインドする&lt;a href=&quot;type/ngmodel.ngmodelcontroller#custom-control-example.html&quot;&gt;カスタムコントロールの例&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="a69d39e4a6f42d306e1d072c6d4937020d012d32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NgModelController&lt;/code&gt;&lt;code&gt;FormController&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;NgModelController&lt;/code&gt;&lt;code&gt;FormController&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bf8f0d9b31ea6dc7a1165f01ac3cb490830f275" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;: A pattern object can be used to filter specific properties on objects contained by &lt;code&gt;array&lt;/code&gt;. For example &lt;code&gt;{name:&quot;M&quot;, phone:&quot;1&quot;}&lt;/code&gt; predicate will return an array of items which have property &lt;code&gt;name&lt;/code&gt; containing &quot;M&quot; and property &lt;code&gt;phone&lt;/code&gt; containing &quot;1&quot;. A special property name (&lt;code&gt;$&lt;/code&gt; by default) can be used (e.g. as in &lt;code&gt;{$: &quot;text&quot;}&lt;/code&gt;) to accept a match against any property of the object or its nested object properties. That's equivalent to the simple substring match with a &lt;code&gt;string&lt;/code&gt; as described above. The special property name can be overwritten, using the &lt;code&gt;anyPropertyKey&lt;/code&gt; parameter. The predicate can be negated by prefixing the string with &lt;code&gt;!&lt;/code&gt;. For example &lt;code&gt;{name: &quot;!M&quot;}&lt;/code&gt; predicate will return an array of items which have property &lt;code&gt;name&lt;/code&gt; not containing &quot;M&quot;.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; ：パターンオブジェクトを使用して、 &lt;code&gt;array&lt;/code&gt; 含まれるオブジェクトの特定のプロパティをフィルタリングできます。たとえば、 &lt;code&gt;{name:&quot;M&quot;, phone:&quot;1&quot;}&lt;/code&gt; 述語は、&quot;M&quot;を含むプロパティ &lt;code&gt;name&lt;/code&gt; と&quot;1&quot;を含むプロパティ &lt;code&gt;phone&lt;/code&gt; を持つアイテムの配列を返します。特別なプロパティ名（デフォルトでは &lt;code&gt;$&lt;/code&gt; ）を使用して（たとえば、 &lt;code&gt;{$: &quot;text&quot;}&lt;/code&gt; ）、オブジェクトまたはそのネストされたオブジェクトプロパティの任意のプロパティに対する一致を受け入れることができます。これは、上記の &lt;code&gt;string&lt;/code&gt; 列との単純な部分文字列の一致に相当します。特別なプロパティ名は、 &lt;code&gt;anyPropertyKey&lt;/code&gt; を使用して上書きできます。パラメータ。文字列の前に &lt;code&gt;!&lt;/code&gt; を付けると、述語を否定できます。。たとえば、 &lt;code&gt;{name: &quot;!M&quot;}&lt;/code&gt; 述語は、&quot;M&quot;を含まないプロパティ &lt;code&gt;name&lt;/code&gt; を持つアイテムの配列を返します。</target>
        </trans-unit>
        <trans-unit id="f2938534d39f20b732428343c451ffcdae68acdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;: then it should have a &lt;code&gt;$get&lt;/code&gt; method. The &lt;code&gt;$get&lt;/code&gt; method will be invoked using &lt;a href=&quot;%24injector#invoke.html&quot;&gt;$injector.invoke()&lt;/a&gt; when an instance needs to be created.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; ： &lt;code&gt;$get&lt;/code&gt; メソッドが必要です。 &lt;code&gt;$get&lt;/code&gt; 方法は使用して呼び出されます&lt;a href=&quot;%24injector#invoke.html&quot;&gt;）$ injector.invokeを（&lt;/a&gt;インスタンスを作成する必要があるとき。</target>
        </trans-unit>
        <trans-unit id="db2b774592ddfd5ff96412c611cf34fbc920134d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89a29f0edb8f921d20f37b7ad5fd2f5c6bd8a55d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;Date&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;Date&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;&lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c996207dcead9d7a10fdd4ed9ec7d64d47d683d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc58c9b95cd0422a0cfa28d4c1dd5b9bac33891c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Module&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;Module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a3ec6be53242c12e63b930f0663cd3fbb8183c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="42d283f68d36e0bf78bfb675694e1b1f2576c1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function(Object)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function(Object)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e336b5b9d4ca78a2e639e8b6953b69ada856e5a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="710c7dc609d05df37f5d0c5e6633b583180e0da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;ng.$compileProvider&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;ng.$compileProvider&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea596c6bc79857b297df36ecd7164d42cae989a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Route&lt;/code&gt;&lt;code&gt;Undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Route&lt;/code&gt;&lt;code&gt;Undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc209144ce76de5ff5dffcc953ad54f6463fd044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SpicyController&lt;/code&gt; is just a plain JavaScript function. As an (optional) naming convention the name starts with capital letter and ends with &quot;Controller&quot;.</source>
          <target state="translated">&lt;code&gt;SpicyController&lt;/code&gt; は単なるJavaScript関数です。（オプションの）命名規則として、名前は大文字で始まり、「Controller」で終わります。</target>
        </trans-unit>
        <trans-unit id="ea6e21883a77d2efdad2ed609bea3d27cb413992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[caseInsensitiveMatch=false]&lt;/code&gt; - &lt;code&gt;{boolean=}&lt;/code&gt; - match routes without being case sensitive</source>
          <target state="translated">&lt;code&gt;[caseInsensitiveMatch=false]&lt;/code&gt; - &lt;code&gt;{boolean=}&lt;/code&gt; -大文字と小文字を区別せずにルートを照合します</target>
        </trans-unit>
        <trans-unit id="0075ca0cd929238aff13a889c6003eec4f60e8fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[reloadOnSearch=true]&lt;/code&gt; - &lt;code&gt;{boolean=}&lt;/code&gt; - reload route when only &lt;code&gt;$location.search()&lt;/code&gt; or &lt;code&gt;$location.hash()&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;[reloadOnSearch=true]&lt;/code&gt; - &lt;code&gt;{boolean=}&lt;/code&gt; - &lt;code&gt;$location.search()&lt;/code&gt; または &lt;code&gt;$location.hash()&lt;/code&gt; が変更されたときにルートをリロードします。</target>
        </trans-unit>
        <trans-unit id="b37ba5a61f5e746c8cb037a2ce84d76bcd845445" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[reloadOnUrl=true]&lt;/code&gt; - &lt;code&gt;{boolean=}&lt;/code&gt; - reload route when any part of the URL changes (including the path) even if the new URL maps to the same route.</source>
          <target state="translated">&lt;code&gt;[reloadOnUrl=true]&lt;/code&gt; - &lt;code&gt;{boolean=}&lt;/code&gt; -新しいURLが同じルートにマップされている場合でも、URLの一部（パスを含む）が変更されたときにルートを再読み込みします。</target>
        </trans-unit>
        <trans-unit id="04e413c5721d051e89a88262b5d8729da9410a88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; - Locate the required controller by searching the element and its parents. Throw an error if not found.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; -要素とその親を検索して、必要なコントローラーを見つけます。見つからない場合はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="bdcdb1a5d927603ee992af605dfd4ad5c5fe7c7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^^&lt;/code&gt; - Locate the required controller by searching the element's parents. Throw an error if not found.</source>
          <target state="translated">&lt;code&gt;^^&lt;/code&gt; -要素の親を検索して、必要なコントローラーを見つけます。見つからない場合はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="df4c2c12e1c0672689604b12ac1824d4aec3407a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addClass&lt;/code&gt; - A space separated list of CSS classes that will be added to the element and spread across the animation.</source>
          <target state="translated">&lt;code&gt;addClass&lt;/code&gt; -要素に追加され、アニメーション全体に広がるCSSクラスのスペースで区切られたリスト。</target>
        </trans-unit>
        <trans-unit id="11b594a5a642e38fa53af414b7bb750a4cdb6288" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allOrNothing&lt;/code&gt; is useful for interpolating URLs. &lt;code&gt;ngSrc&lt;/code&gt; and &lt;code&gt;ngSrcset&lt;/code&gt; use this behavior.</source>
          <target state="translated">&lt;code&gt;allOrNothing&lt;/code&gt; は、URLの補間に役立ちます。 &lt;code&gt;ngSrc&lt;/code&gt; と &lt;code&gt;ngSrcset&lt;/code&gt; はこの動作を使用します。</target>
        </trans-unit>
        <trans-unit id="eb1e935aa495651ee593c95aa6fd72c6d9b333b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allowInvalid&lt;/code&gt;: boolean value which indicates that the model can be set with values that did not validate correctly instead of the default behavior of setting the model to undefined.</source>
          <target state="translated">&lt;code&gt;allowInvalid&lt;/code&gt; ：モデルを未定義に設定するデフォルトの動作の代わりに、モデルが正しく検証されなかった値で設定できることを示すブール値。</target>
        </trans-unit>
        <trans-unit id="e51aeb627397bcc1b8658947574917c448553c75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;angular.copy&lt;/code&gt; does not check if destination and source are of the same type. It's the developer's responsibility to make sure they are compatible.</source>
          <target state="translated">&lt;code&gt;angular.copy&lt;/code&gt; は、宛先とソースが同じタイプであるかどうかをチェックしません。それらに互換性があることを確認するのは開発者の責任です。</target>
        </trans-unit>
        <trans-unit id="c8b20d6fdbd254d2a3f020b8e0c28b846790e494" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;angular.merge&lt;/code&gt; also does not support merging objects with circular references.</source>
          <target state="translated">&lt;code&gt;angular.merge&lt;/code&gt; は、循環参照を持つオブジェクトのマージもサポートしていません。</target>
        </trans-unit>
        <trans-unit id="768bef476452668e0c5f7963d5fb224e99333821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; takes an optional array of modules that should be added to the original list of modules that the app was about to be bootstrapped with.</source>
          <target state="translated">&lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; は、アプリがブートストラップされるモジュールの元のリストに追加する必要があるモジュールのオプションの配列を取ります。</target>
        </trans-unit>
        <trans-unit id="d23f1289abccdbc303d87403bcffb8937081cefe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applyClassesEarly&lt;/code&gt; - Whether or not the classes being added or removed will be used when detecting the animation. This is set by &lt;code&gt;$animate&lt;/code&gt; when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)</source>
          <target state="translated">&lt;code&gt;applyClassesEarly&lt;/code&gt; -追加または削除されるクラスがアニメーションの検出時に使用されるかどうか。これは、CSSクラスが時間内に解決されるように、Enter / Leave / Moveアニメーションが発生したときに &lt;code&gt;$animate&lt;/code&gt; によって設定されます。（これにより、追加および削除されるクラスで遷移が発生しなくなります。）</target>
        </trans-unit>
        <trans-unit id="25f2299b1e7c02b3b494e75bf39f91c831ef7879" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; / &lt;code&gt;object&lt;/code&gt;: an expression which evaluates to an array / object to iterate over.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; / &lt;code&gt;object&lt;/code&gt; ：反復する配列/オブジェクトに評価される式。</target>
        </trans-unit>
        <trans-unit id="13d616fba019934893c24626dd683403282d59e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt;: array of controller instances</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; ：コントローラインスタンスの配列</target>
        </trans-unit>
        <trans-unit id="ea7cfa683bc8e28b8816aca72130c9572ada6d40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assign&lt;/code&gt; &amp;ndash; &lt;code&gt;{?function(context, value)}&lt;/code&gt; &amp;ndash; if the expression is assignable, this will be set to a function to change its value on the given context.</source>
          <target state="translated">&lt;code&gt;assign&lt;/code&gt; &amp;ndash; &lt;code&gt;{?function(context, value)}&lt;/code&gt; &amp;ndash;式が割り当て可能な場合、これは関数に設定され、指定されたコンテキストでその値を変更します。</target>
        </trans-unit>
        <trans-unit id="fd29b2e6ba513c69a51141925b54a8b1bc28948c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attrs&lt;/code&gt; is a hash object with key-value pairs of normalized attribute names and their corresponding attribute values.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; は、正規化された属性名とそれに対応する属性値のキーと値のペアを持つハッシュオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="e900eb1334388f3a65a60acbb090e856fd92eb6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bindings&lt;/code&gt; &amp;ndash; &lt;code&gt;{object=}&lt;/code&gt; &amp;ndash; defines bindings between DOM attributes and component properties. Component properties are always bound to the component controller and not to the scope. See &lt;a href=&quot;../service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bindings&lt;/code&gt; &amp;ndash; &lt;code&gt;{object=}&lt;/code&gt; &amp;ndash; DOM属性とコンポーネントプロパティ間のバインディングを定義します。コンポーネントプロパティは、スコープではなく、常にコンポーネントコントローラにバインドされます。&lt;a href=&quot;../service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3e3c235c0f048c351ea50a9d2f0830bcdfc5916b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;$sanitizeProvider&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;$sanitizeProvider&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c00b10b49c2aedb1cdcf5f9dc1ac8f615268fe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b39b03a8af0842e2238cbf4158aa056dcf59d18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;ng.$qProvider&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;ng.$qProvider&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e868289ed64280fae08519e316807bffbf4e883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33da9fab0b4b53f772b31ae8a9d70da1f9e4cd60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a0cdab7b6af98404b78712346ab17998ef3e7b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bubbles&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Event/bubbles&quot;&gt;Event.bubbles&lt;/a&gt;. Not applicable to all events.</source>
          <target state="translated">&lt;code&gt;bubbles&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Event/bubbles&quot;&gt;Event.bubbles&lt;/a&gt;。すべてのイベントに適用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="b41bf1988ff51eeca7ea6e27544bf8cf02df6596" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancel&lt;/code&gt; is called either on a &lt;code&gt;touchcancel&lt;/code&gt; or &lt;code&gt;pointercancel&lt;/code&gt; from the browser, or when we begin scrolling as described above.</source>
          <target state="translated">&lt;code&gt;cancel&lt;/code&gt; は、ブラウザーからの &lt;code&gt;touchcancel&lt;/code&gt; または &lt;code&gt;pointercancel&lt;/code&gt; で、または上記のようにスクロールを開始したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cf30eebaf18256c21d7e27f9381f8b572a1662b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancelable&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Event/cancelable&quot;&gt;Event.cancelable&lt;/a&gt;. Not applicable to all events.</source>
          <target state="translated">&lt;code&gt;cancelable&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Event/cancelable&quot;&gt;Event.cancelable&lt;/a&gt;。すべてのイベントに適用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="f7e90ffb64e324910d608e87a7579d85f36b215f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch(errorCallback)&lt;/code&gt; &amp;ndash; shorthand for &lt;code&gt;promise.then(null, errorCallback)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;catch(errorCallback)&lt;/code&gt; &amp;ndash; &lt;code&gt;promise.then(null, errorCallback)&lt;/code&gt; 省略表現</target>
        </trans-unit>
        <trans-unit id="1ffc8a416c5a3e29580420c09c60b8c944c10517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charcode&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charcode&quot;&gt;charCode&lt;/a&gt; for keyboard events (keydown, keypress, and keyup).</source>
          <target state="translated">&lt;code&gt;charcode&lt;/code&gt; ：キーボードイベント（keydown、keypress、keyup）の&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charcode&quot;&gt;charCode&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f9621a2bc8472f4304a72cb638e562e87e2a812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cleanupStyles&lt;/code&gt; - Whether or not the provided &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; styles will be removed once the animation is closed. This is useful for when the styles are used purely for the sake of the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation). By default this value is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cleanupStyles&lt;/code&gt; -アニメーションを閉じると、提供さ &lt;code&gt;from&lt;/code&gt; &lt;code&gt;to&lt;/code&gt; スタイルのtoとtoのスタイルが削除されるかどうか。これは、スタイルが純粋にアニメーションのために使用されていて、要素に永続的な視覚効果がない場合（たとえば、折りたたみと開いたアニメーション）に役立ちます。デフォルトでは、この値は &lt;code&gt;false&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="9b26fb58436b12c397715dc5ec21bc8d52f95602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cloneAttachFn(clonedElement, scope)&lt;/code&gt; where:</source>
          <target state="translated">&lt;code&gt;cloneAttachFn(clonedElement, scope)&lt;/code&gt; ここで：</target>
        </trans-unit>
        <trans-unit id="50eb39711a70c9fa088bba8a66c7191894c56127" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cloneAttachFn&lt;/code&gt; - If &lt;code&gt;cloneAttachFn&lt;/code&gt; is provided, then the link function will clone the &lt;code&gt;template&lt;/code&gt; and call the &lt;code&gt;cloneAttachFn&lt;/code&gt; function allowing the caller to attach the cloned elements to the DOM document at the appropriate place. The &lt;code&gt;cloneAttachFn&lt;/code&gt; is called as:</source>
          <target state="translated">&lt;code&gt;cloneAttachFn&lt;/code&gt; - &lt;code&gt;cloneAttachFn&lt;/code&gt; が指定されている場合、リンク関数は &lt;code&gt;template&lt;/code&gt; を複製し、 &lt;code&gt;cloneAttachFn&lt;/code&gt; 関数を呼び出して、呼び出し元が複製された要素を適切な場所のDOMドキュメントに添付できるようにします。 &lt;code&gt;cloneAttachFn&lt;/code&gt; はと呼ばれています。</target>
        </trans-unit>
        <trans-unit id="80f80f58d022034b4408356f305f0ebe5d559940" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cloneLinkingFn&lt;/code&gt;: (optional) argument to create clones of the original transcluded content.</source>
          <target state="translated">&lt;code&gt;cloneLinkingFn&lt;/code&gt; ：（オプション）元の変換されたコンテンツのクローンを作成するための引数。</target>
        </trans-unit>
        <trans-unit id="fe0bce1e019253801bbea8dba33b481fb88cf4a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clonedElement&lt;/code&gt; - is a clone of the original &lt;code&gt;element&lt;/code&gt; passed into the compiler.</source>
          <target state="translated">&lt;code&gt;clonedElement&lt;/code&gt; -コンパイラーに渡された元の &lt;code&gt;element&lt;/code&gt; クローンです。</target>
        </trans-unit>
        <trans-unit id="c36f008d8d2600fca06e8f74498e98f321d6c8f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;codeName&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Code name of the release, such as &quot;jiggling-armfat&quot;.</source>
          <target state="translated">&lt;code&gt;codeName&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;リリースのコード名（「jiggling-armfat」など）。</target>
        </trans-unit>
        <trans-unit id="849900f7345afe9bc98b2d56bd0297e48e89b41b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;component&lt;/code&gt;, &lt;code&gt;loader&lt;/code&gt;, &lt;code&gt;redirectTo&lt;/code&gt; (requires exactly one of these)</source>
          <target state="translated">&lt;code&gt;component&lt;/code&gt; 、 &lt;code&gt;loader&lt;/code&gt; 、 &lt;code&gt;redirectTo&lt;/code&gt; （これらのいずれか1つが必要）</target>
        </trans-unit>
        <trans-unit id="f77ee27682ccf9fa647bc92baab0067fe8d248c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;constant&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; whether the expression is made entirely of JavaScript constant literals.</source>
          <target state="translated">&lt;code&gt;constant&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;式が完全にJavaScript定数リテラルで構成されているかどうか。</target>
        </trans-unit>
        <trans-unit id="53c96bd8601bdfa54bd985ab7eaa6b45dd18b92f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contenteditable&lt;/code&gt; is an HTML5 attribute, which tells the browser to let the element contents be edited in place by the user.</source>
          <target state="translated">&lt;code&gt;contenteditable&lt;/code&gt; はHTML5属性であり、ユーザーが要素のコンテンツを編集できるようにブラウザーに指示します。</target>
        </trans-unit>
        <trans-unit id="0a4b7c22538d3a7bddc9055a1cad25fe5ca00735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context&lt;/code&gt; &amp;ndash; &lt;code&gt;{object}&lt;/code&gt; &amp;ndash; an object against which any expressions embedded in the strings are evaluated against (typically a scope object).</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; &amp;ndash; &lt;code&gt;{object}&lt;/code&gt; &amp;ndash;文字列に埋め込まれた式が評価されるオブジェクト（通常はスコープオブジェクト）。</target>
        </trans-unit>
        <trans-unit id="36cd6e0d0044fb9e73606584644452f42d047ac3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context&lt;/code&gt;: evaluation context for all expressions embedded in the interpolated text</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; ：補間されたテキストに埋め込まれたすべての式の評価コンテキスト</target>
        </trans-unit>
        <trans-unit id="6f438b7d6871106411793e3f211b7f98a01b9526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controller(name)&lt;/code&gt; - retrieves the controller of the current element or its parent. By default retrieves controller associated with the &lt;code&gt;ngController&lt;/code&gt; directive. If &lt;code&gt;name&lt;/code&gt; is provided as camelCase directive name, then the controller for this directive will be retrieved (e.g. &lt;code&gt;'ngModel'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;controller(name)&lt;/code&gt; -現在の要素またはその親のコントローラーを取得します。デフォルトでは、 &lt;code&gt;ngController&lt;/code&gt; ディレクティブに関連付けられたコントローラーを取得します。camelCaseディレクティブ名として &lt;code&gt;name&lt;/code&gt; が指定されている場合、このディレクティブのコントローラーが取得されます（例： &lt;code&gt;'ngModel'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e8dc122ef38d075f5ac28b2898dea3061d2aff4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controller&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; Controller fn that should be associated with newly created scope or the name of a &lt;a href=&quot;../../ng/type/angular.module#controller.html&quot;&gt;registered controller&lt;/a&gt; if passed as a string.</source>
          <target state="translated">&lt;code&gt;controller&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash;新しく作成されたスコープに関連付けられるコントローラーfn、または文字列として渡される場合は&lt;a href=&quot;../../ng/type/angular.module#controller.html&quot;&gt;登録済みコントローラーの&lt;/a&gt;名前。</target>
        </trans-unit>
        <trans-unit id="f5c992f453aa5a9abfe5ea57c299b7e772446661" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controller&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|function()=}&lt;/code&gt; &amp;ndash; controller constructor function that should be associated with newly created scope or the name of a &lt;a href=&quot;../service/%24compile#-controller-.html&quot;&gt;registered controller&lt;/a&gt; if passed as a string. An empty &lt;code&gt;noop&lt;/code&gt; function by default.</source>
          <target state="translated">&lt;code&gt;controller&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|function()=}&lt;/code&gt; &amp;ndash;新しく作成されたスコープに関連付けられるコントローラーコンストラクター関数、または文字列として渡される場合は&lt;a href=&quot;../service/%24compile#-controller-.html&quot;&gt;登録済みコントローラーの&lt;/a&gt;名前デフォルトでは空の &lt;code&gt;noop&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="7fabc11cdc1ae9046c9631fb94f694c8cefaa149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controller&lt;/code&gt; - the directive's required controller instance(s) - Instances are shared among all directives, which allows the directives to use the controllers as a communication channel. The exact value depends on the directive's &lt;code&gt;require&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;controller&lt;/code&gt; -ディレクティブに必要なコントローラーインスタンス-インスタンスはすべてのディレクティブ間で共有されます。これにより、ディレクティブはコントローラーを通信チャネルとして使用できます。正確な値は、ディレクティブの &lt;code&gt;require&lt;/code&gt; プロパティによって異なります。</target>
        </trans-unit>
        <trans-unit id="c572e71c3f4e1084c861f50e25a84070007aed98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controller&lt;/code&gt; is the directive's required controller instance(s) or its own controller (if any). The exact value depends on the directive's require property.</source>
          <target state="translated">&lt;code&gt;controller&lt;/code&gt; は、ディレクティブに必要なコントローラーインスタンスまたは独自のコントローラー（存在する場合）です。正確な値は、ディレクティブのrequireプロパティによって異なります。</target>
        </trans-unit>
        <trans-unit id="666f9edafe49d10e7cbe582943a6a628f7b810fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controller&lt;/code&gt;: The controller constructor as defined in the route definition.</source>
          <target state="translated">&lt;code&gt;controller&lt;/code&gt; ：ルート定義で定義されたコントローラーコンストラクター。</target>
        </trans-unit>
        <trans-unit id="de97795b4693ffcc0599376a82d2281b8aed5968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controllerAs&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=}&lt;/code&gt; &amp;ndash; An identifier name for a reference to the controller. If present, the controller will be published to scope under the &lt;code&gt;controllerAs&lt;/code&gt; name.</source>
          <target state="translated">&lt;code&gt;controllerAs&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=}&lt;/code&gt; &amp;ndash;コントローラーへの参照の識別子名。存在する場合、コントローラーは &lt;code&gt;controllerAs&lt;/code&gt; という名前でスコープに公開されます。</target>
        </trans-unit>
        <trans-unit id="35044f6b10114bdaecdf847efcb2c9e15190dc13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controllerAs&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=}&lt;/code&gt; &amp;ndash; identifier name for to reference the controller in the component's scope. If present, the controller will be published to scope under the &lt;code&gt;controllerAs&lt;/code&gt; name. If not present, this will default to be &lt;code&gt;$ctrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;controllerAs&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=}&lt;/code&gt; &amp;ndash;コンポーネントのスコープでコントローラーを参照するための識別子名。存在する場合、コントローラーは &lt;code&gt;controllerAs&lt;/code&gt; という名前でスコープに公開されます。存在しない場合、これはデフォルトで &lt;code&gt;$ctrl&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e3d9f7929e336c9abb89233aca14a78b56a06ef8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentScope&lt;/code&gt; - &lt;code&gt;{Scope}&lt;/code&gt;: the scope that is currently handling the event. Once the event propagates through the scope hierarchy, this property is set to null.</source>
          <target state="translated">&lt;code&gt;currentScope&lt;/code&gt; - &lt;code&gt;{Scope}&lt;/code&gt; ：現在イベントを処理しているスコープ。イベントがスコープ階層を伝播すると、このプロパティはnullに設定されます。</target>
        </trans-unit>
        <trans-unit id="0d9e426278d320271f7630aabfe54819ef13c371" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; (optional)</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; （オプション）</target>
        </trans-unit>
        <trans-unit id="7e0474374d4d2afa718094e485fb0f5f77bcaada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; - an object with these properties:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; -これらのプロパティを持つオブジェクト：</target>
        </trans-unit>
        <trans-unit id="a18023ef6854a9ba57dd74ff2eeff9f4146dd3d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data&quot;&gt;data&lt;/a&gt; for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent&quot;&gt;CompositionEvents&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data&quot;&gt;データ&lt;/a&gt;用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent&quot;&gt;CompositionEvents&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6918d6bf4c0e7097e9358db9fb2c4a7015b50414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;date&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f088a34d0260aa96981df421799e14d87b17c980" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debounce&lt;/code&gt;: integer value which contains the debounce model update value in milliseconds. A value of 0 triggers an immediate update. If an object is supplied instead, you can specify a custom value for each event. For example:</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; ：ミリ秒単位のデバウンスモデル更新値を含む整数値。値0は、即時更新をトリガーします。代わりにオブジェクトが提供されている場合は、各イベントにカスタム値を指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="6553d251504f706217cffde2f636caa643840444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; events are those that are bound to the control, and when fired, update the &lt;code&gt;$viewValue&lt;/code&gt; via &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;$setViewValue&lt;/a&gt;. Every event that is not listed in &lt;code&gt;updateOn&lt;/code&gt; is considered a &quot;default&quot; event, since different control types have different default events.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; イベントは、コントロールにバインドされているものであり、焼成したとき、更新 &lt;code&gt;$viewValue&lt;/code&gt; 介して、&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;$ setViewValue&lt;/a&gt;。異なるコントロールタイプには異なるデフォルトイベントがあるため、 &lt;code&gt;updateOn&lt;/code&gt; にリストされていないすべてのイベントは「デフォルト」イベントと見なされます。</target>
        </trans-unit>
        <trans-unit id="ccf86cca2b957aa302b0a368196c4a0622a85d41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultPrevented&lt;/code&gt; - &lt;code&gt;{boolean}&lt;/code&gt;: true if &lt;code&gt;preventDefault&lt;/code&gt; was called.</source>
          <target state="translated">&lt;code&gt;defaultPrevented&lt;/code&gt; - &lt;code&gt;{boolean}&lt;/code&gt; ：trueの場合 &lt;code&gt;preventDefault&lt;/code&gt; 呼ばれました。</target>
        </trans-unit>
        <trans-unit id="ec6fd0574a59e4f3c8e45c08d5336bdff9fd85d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delay&lt;/code&gt; - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of &lt;code&gt;true&lt;/code&gt; is used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value of the element will be &lt;code&gt;transition-delay: DETECTED_VALUE&lt;/code&gt;). Using &lt;code&gt;true&lt;/code&gt; is useful when you want the CSS classes and inline styles to all share the same CSS delay value.</source>
          <target state="translated">&lt;code&gt;delay&lt;/code&gt; -遷移及び/又はキーフレームの総遅延を表す数値（1の値が1000ミリ秒であることに留意されたいです）。 &lt;code&gt;true&lt;/code&gt; の値が使用される場合、CSSクラスから検出された遅延値はすべて要素のスタイルに反映されます（たとえば、delayをtrueに設定すると、要素のスタイル値は &lt;code&gt;transition-delay: DETECTED_VALUE&lt;/code&gt; ）。CSSクラスとインラインスタイルですべて同じCSS遅延値を共有する &lt;code&gt;true&lt;/code&gt; は、trueを使用すると便利です。</target>
        </trans-unit>
        <trans-unit id="02471651a4d351152eb294709b0ba5c877f477fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disable&lt;/code&gt;: The result of this expression will be used to disable the rendered &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element. Return &lt;code&gt;true&lt;/code&gt; to disable.</source>
          <target state="translated">&lt;code&gt;disable&lt;/code&gt; ：この式の結果は、レンダリングされた &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素を無効にするために使用されます。無効にするには &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0c9dad2247678fa44b131fd1964fb6d12c9728f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dot&lt;/code&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; Dot version number, such as &quot;18&quot;.</source>
          <target state="translated">&lt;code&gt;dot&lt;/code&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;「18」などのドットバージョン番号。</target>
        </trans-unit>
        <trans-unit id="e79cef804615e19ff5db231b7f25acd8a56f8ec8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duration&lt;/code&gt; - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of &lt;code&gt;0&lt;/code&gt; is provided then the animation will be skipped entirely.</source>
          <target state="translated">&lt;code&gt;duration&lt;/code&gt; -トランジションまたはキーフレーム、あるいはその両方の合計持続時間を表す数値（1の値は1000msです）。値 &lt;code&gt;0&lt;/code&gt; を指定すると、アニメーションは完全にスキップされます。</target>
        </trans-unit>
        <trans-unit id="b6c3c6a475ab5086c4c21a1ec807864bb9588f34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;easing&lt;/code&gt; - The CSS easing value that will be applied to the transition or keyframe animation (or both).</source>
          <target state="translated">&lt;code&gt;easing&lt;/code&gt; -トランジションまたはキーフレームアニメーション（またはその両方）に適用されるCSSイージング値。</target>
        </trans-unit>
        <trans-unit id="0b70259ab6e67325e6bba346bea7cd9b78055fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elapsedTime&lt;/code&gt;: the elapsedTime for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TransitionEvent&quot;&gt;TransitionEvent&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/AnimationEvent&quot;&gt;AnimationEvent&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;elapsedTime&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TransitionEvent&quot;&gt;TransitionEvent&lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/AnimationEvent&quot;&gt;AnimationEventの&lt;/a&gt;経過時間。</target>
        </trans-unit>
        <trans-unit id="82faa5e3e808394b144d0d2b0847b84203127404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;element&lt;/code&gt; - The captured DOM element that the animation was fired on.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; -アニメーションがで解雇されたことをキャプチャDOM要素。</target>
        </trans-unit>
        <trans-unit id="cb8a638a7d243a71595b7e1ec1c2bcc7f94a2a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;element&lt;/code&gt; is the jqLite-wrapped element that this directive matches.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; は、このディレクティブが一致するjqLit​​eでラップされた要素です。</target>
        </trans-unit>
        <trans-unit id="a04cc99d013452cf909001c6f62d716617ccb9a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; - This method will cancel the animation and remove all applied CSS classes and styles.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; -このメソッドはアニメーションをキャンセルし、適用されたすべてのCSSクラスとスタイルを削除します。</target>
        </trans-unit>
        <trans-unit id="324cab10f9312cb328ca55bc90b5af8b75fcbc2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; is called when a swipe is successfully completed with a &lt;code&gt;touchend&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt; or &lt;code&gt;pointerup&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; は、 &lt;code&gt;touchend&lt;/code&gt; 、 &lt;code&gt;mouseup&lt;/code&gt; アップ、または &lt;code&gt;pointerup&lt;/code&gt; アップでスワイプが正常に完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="289cb15261e3ed613cf954e9f37fb5d7b1f21ee5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of &lt;code&gt;ng-EVENT&lt;/code&gt; and &lt;code&gt;ng-EVENT-active&lt;/code&gt; will be applied to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)</source>
          <target state="translated">&lt;code&gt;event&lt;/code&gt; -DOMイベント（例：Enter、Leave、Move）。使用すると、生成された &lt;code&gt;ng-EVENT&lt;/code&gt; および &lt;code&gt;ng-EVENT-active&lt;/code&gt; の CSSクラスがアニメーション中に要素に適用されます。スペースを区切り文字として使用すると、複数のイベントを提供できます。（これはDOM操作を実行しないことに注意してください。）</target>
        </trans-unit>
        <trans-unit id="1ed2634a78173c6734900e086430541787a2c645" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventFn&lt;/code&gt;: &lt;code&gt;function(element, ... , doneFunction, options)&lt;/code&gt; The element to animate, the &lt;code&gt;doneFunction&lt;/code&gt; and the options fed into the animation. Depending on the type of animation additional arguments will be injected into the animation function. The list below explains the function signatures for the different animation methods:</source>
          <target state="translated">&lt;code&gt;eventFn&lt;/code&gt; ： &lt;code&gt;function(element, ... , doneFunction, options)&lt;/code&gt; アニメーション化する要素、 &lt;code&gt;doneFunction&lt;/code&gt; 、およびアニメーションに供給されるオプション。アニメーションのタイプに応じて、追加の引数がアニメーション関数に注入されます。以下のリストは、さまざまなアニメーションメソッドの関数シグネチャについて説明しています。</target>
        </trans-unit>
        <trans-unit id="53daf6b23a94cf05e663b5e53b06a84092c9371f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expression&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="004d270be9666e35719fdcccdc2ded48c1db2637" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;factory&lt;/code&gt; - &lt;code&gt;{string|Function}&lt;/code&gt;: If &lt;code&gt;string&lt;/code&gt; then it is an alias for a service. Otherwise if function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; and the return value is treated as the dependency. If the result is a promise, it is resolved before its value is injected into the controller. Be aware that &lt;code&gt;ngRoute.$routeParams&lt;/code&gt; will still refer to the previous route within these resolve functions. Use &lt;code&gt;$route.current.params&lt;/code&gt; to access the new route parameters, instead.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; - &lt;code&gt;{string|Function}&lt;/code&gt; ：場合は &lt;code&gt;string&lt;/code&gt; 、それがサービスの別名です。それ以外の場合、関数の場合、それが&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;注入さ&lt;/a&gt;れ、戻り値が依存関係として扱われます。結果がpromiseの場合、値がコントローラーに注入される前に解決されます。 &lt;code&gt;ngRoute.$routeParams&lt;/code&gt; はこれらの解決関数内の以前のルートを引き続き参照することに注意してください。使用 &lt;code&gt;$route.current.params&lt;/code&gt; 代わりに、新しいルートのパラメータにアクセスします。</target>
        </trans-unit>
        <trans-unit id="2a7e488a50f35770b6fe7faf6fbd0122858dcc59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; - the template will replace the contents of the directive's element.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; -テンプレートはディレクティブの要素の内容を置き換えます。</target>
        </trans-unit>
        <trans-unit id="ae1e37c2f9ee70ba41f00c299d08775742e4fcc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the compiler may ignore directives on comments</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; コンパイラがコメントのディレクティブを無視する場合はfalse</target>
        </trans-unit>
        <trans-unit id="072d2a05e6d8ee27fcfc865c9ae562a59f9a3e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the compiler may ignore directives on element classes</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; コンパイラが要素クラスのディレクティブを無視する場合はfalse</target>
        </trans-unit>
        <trans-unit id="b9a2d5745ae63d4643b98602d174427d890209ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;{enabled: false}&lt;/code&gt; (default) - see &lt;a href=&quot;%24location#hashbang-mode-default-mode-.html&quot;&gt;Hashbang mode&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; または &lt;code&gt;{enabled: false}&lt;/code&gt; （デフォルト）&lt;a href=&quot;%24location#hashbang-mode-default-mode-.html&quot;&gt;-Hashbangモードを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="6e503894d1c454b83b37b35e67c141fc054266cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;: A short hand for a function which will look for a substring match in a case insensitive way. Primitive values are converted to strings. Objects are not compared against primitives, unless they have a custom &lt;code&gt;toString&lt;/code&gt; method (e.g. &lt;code&gt;Date&lt;/code&gt; objects).</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; ：大文字と小文字を区別しない方法で部分文字列の一致を検索する関数の省略形。プリミティブ値は文字列に変換されます。オブジェクトは、カスタムの &lt;code&gt;toString&lt;/code&gt; メソッド（ &lt;code&gt;Date&lt;/code&gt; オブジェクトなど）がない限り、プリミティブと比較されません。</target>
        </trans-unit>
        <trans-unit id="25a3629244295d5b90c767a1d53e9f2eda998a4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finally(callback, notifyCallback)&lt;/code&gt; &amp;ndash; allows you to observe either the fulfillment or rejection of a promise, but to do so without modifying the final value. This is useful to release resources or do some clean-up that needs to be done whether the promise was rejected or resolved. See the &lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback&quot;&gt;full specification&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;finally(callback, notifyCallback)&lt;/code&gt; &amp;ndash;約束の履行または拒否のいずれかを監視できますが、最終値を変更せずに確認できます。これは、リソースが解放されたり、約束が拒否されたり解決されたりしたかどうかに関係なく実行する必要があるいくつかのクリーンアップを実行するのに役立ちます。詳細については、&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback&quot;&gt;完全な仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="199eff7709bd2482aac2bbe453f233af5ffdd2e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; string can also be one of the following predefined &lt;a href=&quot;../../../guide/i18n&quot;&gt;localizable formats&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 文字列は、次の事前定義された&lt;a href=&quot;../../../guide/i18n&quot;&gt;ローカライズ可能なフォーマットのいずれか&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="276879e95d7b4df2b7d4bf0fe7afa4dae8a9761d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; string can be composed of the following elements:</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 文字列は、次の要素で構成できます。</target>
        </trans-unit>
        <trans-unit id="ab41ba228793aacc2ebd7d815af8e82148ed74c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; string can contain literal values. These need to be escaped by surrounding with single quotes (e.g. &lt;code&gt;&quot;h 'in the morning'&quot;&lt;/code&gt;). In order to output a single quote, escape it - i.e., two single quotes in a sequence (e.g. &lt;code&gt;&quot;h 'o''clock'&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 文字列にはリテラル値を含めることができます。これらは一重引用符で囲むことでエスケープする必要があります（例： &lt;code&gt;&quot;h 'in the morning'&quot;&lt;/code&gt; ）。一重引用符を出力するには、エスケープします-つまり、シーケンス内の2つの一重引用符（例： &lt;code&gt;&quot;h 'o''clock'&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d63bc250c76a1ae170058ba9bcbb7f827b13d340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from&lt;/code&gt; - The starting CSS styles (a key/value object) that will be applied at the start of the animation.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; -アニメーションの開始時に適用される出発CSSスタイル（キー/値のオブジェクト）。</target>
        </trans-unit>
        <trans-unit id="0f08eed1fd3b2d8e38851e3cf3f09a5940040718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;full&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Full version string, such as &quot;0.9.18&quot;.</source>
          <target state="translated">&lt;code&gt;full&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; &quot;0.9.18&quot;などの完全なバージョン文字列。</target>
        </trans-unit>
        <trans-unit id="429d93bd0d17f08b0e40c3d6da80921b6aaa0529" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Array.&amp;lt;(string|function())&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Array.&amp;lt;(string|function())&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8381cd528c610c6de08afd482276f0dfb52b0986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="861f0cd9e655adce6cb03c08c08c4778fdf53e44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a594959a16a19ad965cfd1447521b9bd7209cd2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Array.&amp;lt;(function()|string)&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Array.&amp;lt;(function()|string)&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c73e01ceae203cf62e3b98ca7cc2b8a116d66429" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function(actual, expected)&lt;/code&gt;: The function will be given the object value and the predicate value to compare and should return true if both values should be considered equal.</source>
          <target state="translated">&lt;code&gt;function(actual, expected)&lt;/code&gt; ：関数には、比較するオブジェクト値と述語値が与えられ、両方の値が等しいと見なされる場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="2e939e5d6fafeda79432f990ec440682a26aa0bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function(actual, expected)&lt;/code&gt;&lt;code&gt;true&lt;/code&gt;&lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function(actual, expected)&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d02087652931d4c5d085fe407dc171f28f1a795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function(scope)&lt;/code&gt;: called with current &lt;code&gt;scope&lt;/code&gt; as a parameter.</source>
          <target state="translated">&lt;code&gt;function(scope)&lt;/code&gt; ：現在の &lt;code&gt;scope&lt;/code&gt; をパラメーターとして呼び出されます。</target>
        </trans-unit>
        <trans-unit id="60006b86642dc851fcc3621291570c38987718c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function(scope)&lt;/code&gt;: execute the function with current &lt;code&gt;scope&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;function(scope)&lt;/code&gt; ：現在の &lt;code&gt;scope&lt;/code&gt; パラメータで関数を実行します。</target>
        </trans-unit>
        <trans-unit id="b153cfbbf06d8df129cb96359e83362f139fb3b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function(scope)&lt;/code&gt;: execute the function with the current &lt;code&gt;scope&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;function(scope)&lt;/code&gt; ：現在の &lt;code&gt;scope&lt;/code&gt; パラメータで関数を実行します。</target>
        </trans-unit>
        <trans-unit id="0967d7e554075748b1944a27ac0389d3dd643754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function(value, index, array)&lt;/code&gt;: A predicate function can be used to write arbitrary filters. The function is called for each element of the array, with the element, its index, and the entire array itself as arguments.</source>
          <target state="translated">&lt;code&gt;function(value, index, array)&lt;/code&gt; ：述語関数を使用して、任意のフィルターを作成できます。関数は、要素、そのインデックス、および配列全体を引数として、配列の各要素に対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3d64053a6a9ed65253ec2d901dd56bd923a48f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt;: Takes the url as a parameter and returns a map of attributes</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; ：パラメータとしてURLを取り、属性のマップを返します</target>
        </trans-unit>
        <trans-unit id="efa031cfa23b0b607e7f6ba7af5f9f7710e28189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;futureParentElement&lt;/code&gt; (optional):</source>
          <target state="translated">&lt;code&gt;futureParentElement&lt;/code&gt; （オプション）：</target>
        </trans-unit>
        <trans-unit id="bc0e430ebede72ce3a8ab587ceffff6a5ea51b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;futureParentElement&lt;/code&gt; - defines the parent to which the &lt;code&gt;cloneAttachFn&lt;/code&gt; will add the cloned elements; only needed for transcludes that are allowed to contain non HTML elements (e.g. SVG elements). See also the &lt;code&gt;directive.controller&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;futureParentElement&lt;/code&gt; - &lt;code&gt;cloneAttachFn&lt;/code&gt; が複製された要素を追加する親を定義します。HTML以外の要素（SVG要素など）を含めることが許可されているトランスクルージョンにのみ必要です。 &lt;code&gt;directive.controller&lt;/code&gt; プロパティも参照してください。</target>
        </trans-unit>
        <trans-unit id="c57584699f6586aaf11a26f27af27a0d67af5ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;futureParentElement&lt;/code&gt; - defines the parent to which the &lt;code&gt;cloneAttachFn&lt;/code&gt; will add the cloned elements; only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements). See also the directive.controller property.</source>
          <target state="translated">&lt;code&gt;futureParentElement&lt;/code&gt; - &lt;code&gt;cloneAttachFn&lt;/code&gt; が複製された要素を追加する親を定義します。HTML以外の要素（SVG要素など）を含めることができるトランスクルードにのみ必要です。directive.controllerプロパティも参照してください。</target>
        </trans-unit>
        <trans-unit id="66a2863ff76ff053c0a7ebffd44f1470a3d8cbbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getterSetter&lt;/code&gt;: boolean value which determines whether or not to treat functions bound to &lt;code&gt;ngModel&lt;/code&gt; as getters/setters.</source>
          <target state="translated">&lt;code&gt;getterSetter&lt;/code&gt; ：ngModelにバインドされた &lt;code&gt;ngModel&lt;/code&gt; をゲッター/セッターとして扱うかどうかを決定するブール値。</target>
        </trans-unit>
        <trans-unit id="18ec400771d4a3173ba604fbb4cae452e107bb97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;group&lt;/code&gt;: The result of this expression will be used to group options using the &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; DOM element.</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; ：この式の結果は、 &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; DOM要素を使用してオプションをグループ化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5d59607a4e244c3df8099700f52374f93d71b26e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;html
&amp;lt;div ng-click=&quot;toggleMenu()&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; Becomes: &lt;code&gt;html
&amp;lt;div ng-click=&quot;toggleMenu()&quot; tabindex=&quot;0&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;html &amp;lt;div ng-click=&quot;toggleMenu()&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; なる： &lt;code&gt;html &amp;lt;div ng-click=&quot;toggleMenu()&quot; tabindex=&quot;0&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c37c7a29e99c9be1c459c31a96e949c6bd2ce0a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;html&lt;/code&gt; - All root nodes in the template are HTML. Root nodes may also be top-level elements such as &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;html&lt;/code&gt; -テンプレートのすべてのルートノードはHTMLです。ルートノードは、 &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; などのトップレベルの要素である場合もあります。</target>
        </trans-unit>
        <trans-unit id="ce59e0c7aa1bf537d0eac6b5076eab2b8e4f576b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htmlElements&lt;/code&gt;: A list of elements (tag names) to extend the current list of safe HTML elements. HTML elements considered safe will not be removed during sanitization. All other elements will be stripped off.</source>
          <target state="translated">&lt;code&gt;htmlElements&lt;/code&gt; ：安全なHTML要素の現在のリストを拡張するための要素（タグ名）のリスト。安全と見なされたHTML要素は、サニタイズ中に削除されません。他のすべての要素は取り除かれます。</target>
        </trans-unit>
        <trans-unit id="4db3031979133d5aad6b57a0494714b42722b3f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htmlVoidElements&lt;/code&gt;: This is similar to &lt;code&gt;htmlElements&lt;/code&gt;, but marks the elements as &quot;void elements&quot; (similar to HTML &lt;a href=&quot;https://rawgit.com/w3c/html/html5.1-2/single-page.html#void-elements&quot;&gt;void elements&lt;/a&gt;). These elements have no end tag and cannot have content.</source>
          <target state="translated">&lt;code&gt;htmlVoidElements&lt;/code&gt; ：これはと似て &lt;code&gt;htmlElements&lt;/code&gt; が、（HTMLに似た「空の要素」としてマーク要素を&lt;a href=&quot;https://rawgit.com/w3c/html/html5.1-2/single-page.html#void-elements&quot;&gt;空要素&lt;/a&gt;）。これらの要素には終了タグがなく、コンテンツを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="2069e43f2190b45d9b3869fa1e2eb15aff62f822" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iAttrs&lt;/code&gt; - instance attributes - Normalized list of attributes declared on this element shared between all directive linking functions.</source>
          <target state="translated">&lt;code&gt;iAttrs&lt;/code&gt; -インスタンス属性-この要素で宣言された属性の正規化されたリストは、すべてのディレクティブリンク関数間で共有されます。</target>
        </trans-unit>
        <trans-unit id="c8c214617290bc9ea47b4984c4b2d74f2a1a8726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iElement&lt;/code&gt; - instance element - The element where the directive is to be used. It is safe to manipulate the children of the element only in &lt;code&gt;postLink&lt;/code&gt; function since the children have already been linked.</source>
          <target state="translated">&lt;code&gt;iElement&lt;/code&gt; -インスタンス要素-ディレクティブが使用される要素。子はすでにリンクされているため、要素の子を &lt;code&gt;postLink&lt;/code&gt; 関数でのみ操作しても安全です。</target>
        </trans-unit>
        <trans-unit id="6cb05d465a8ade9f4fd33816118a84e9542b93f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; locale id formatted as &lt;code&gt;languageId-countryId&lt;/code&gt; (e.g. &lt;code&gt;en-us&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; &lt;code&gt;languageId-countryId&lt;/code&gt; としてフォーマットされたロケールID （例 &lt;code&gt;en-us&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bea5664a1b1ff5bb9816dad6a50d3a7173e5f0ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inheritedData()&lt;/code&gt; - same as &lt;code&gt;data()&lt;/code&gt;, but walks up the DOM until a value is found or the top parent element is reached.</source>
          <target state="translated">&lt;code&gt;inheritedData()&lt;/code&gt; - &lt;code&gt;data()&lt;/code&gt; と同じですが、値が見つかるか、最上位の親要素に到達するまでDOMを調べます。</target>
        </trans-unit>
        <trans-unit id="54369ecdd7ce3497853ff479fc02f0619d9d218c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;injector()&lt;/code&gt; - retrieves the injector of the current element or its parent.</source>
          <target state="translated">&lt;code&gt;injector()&lt;/code&gt; -現在の要素またはその親のインジェクタを取得します。</target>
        </trans-unit>
        <trans-unit id="d4fa2f3230016bd7c502ed311dcddc3400777129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isolateScope()&lt;/code&gt; - retrieves an isolate &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; if one is attached directly to the current element. This getter should be used only on elements that contain a directive which starts a new isolate scope. Calling &lt;code&gt;scope()&lt;/code&gt; on this element always returns the original non-isolate scope. Requires &lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;Debug Data&lt;/a&gt; to be enabled.</source>
          <target state="translated">&lt;code&gt;isolateScope()&lt;/code&gt; - 現在の要素に直接接続されている分離&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;スコープを&lt;/a&gt;取得します。このゲッターは、新しい分離スコープを開始するディレクティブを含む要素でのみ使用する必要があります。この要素で &lt;code&gt;scope()&lt;/code&gt; を呼び出すと、常に元の分離されていないスコープが返されます。&lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;デバッグデータ&lt;/a&gt;を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="39cd0455d2e26701e8c095f43e061f3207660b11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt;: a name of a dependency to be injected into the controller.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; ：コントローラに注入される依存関係の名前。</target>
        </trans-unit>
        <trans-unit id="29a05476d5fc83148db1830944b7dd067b7dec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt;: local variable which will refer to a property name in &lt;code&gt;object&lt;/code&gt; during iteration.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; ：反復中に &lt;code&gt;object&lt;/code&gt; プロパティ名を参照するローカル変数。</target>
        </trans-unit>
        <trans-unit id="737aeccc3cf0e60e5fcffa55a35383bbe4db5a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keycode&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keycode&quot;&gt;keyCode&lt;/a&gt; for keyboard events (keydown, keypress, and keyup).</source>
          <target state="translated">&lt;code&gt;keycode&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keycode&quot;&gt;のkeyCode&lt;/a&gt;キーボードイベント（KeyDownイベント、キー入力、およびkeyUpなど）のために。</target>
        </trans-unit>
        <trans-unit id="22cfda562520f61e8f63c1192868802b61203a47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyframeStyle&lt;/code&gt; - The raw CSS keyframe animation style that will be used (e.g. &lt;code&gt;1s my_animation linear&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;keyframeStyle&lt;/code&gt; -使用される生のCSSのキーフレームアニメーションのスタイル（例えば &lt;code&gt;1s my_animation linear&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="80064931c718c82a5aace4967a027aa38a6ca367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keys&lt;/code&gt;: an array of possible modifier keys (ctrl, alt, shift, meta) for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt; and keyboard events (keydown, keypress, and keyup).</source>
          <target state="translated">&lt;code&gt;keys&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;とキーボードイベント（keydown、keypress、およびkeyup）の可能な修飾キー（ctrl、alt、shift、meta）の配列。</target>
        </trans-unit>
        <trans-unit id="ec2cd5127fbb87bdf09efe118a208a2d37effbf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;: The result of this expression will be the label for &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element. The &lt;code&gt;expression&lt;/code&gt; will most likely refer to the &lt;code&gt;value&lt;/code&gt; variable (e.g. &lt;code&gt;value.propertyName&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; ：この式の結果は、 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素のラベルになります。 &lt;code&gt;expression&lt;/code&gt; 最も可能性に言及する &lt;code&gt;value&lt;/code&gt; の変数（例えば &lt;code&gt;value.propertyName&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ef4929818fc2466265fcc001a228ca0451177d95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;disable when&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;disable&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for (&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for (&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;を&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;disable when&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;disable&lt;/code&gt; &lt;strong&gt;と&lt;/strong&gt;ラベルは&lt;strong&gt;無効に&lt;/strong&gt;&lt;strong&gt;なり&lt;/strong&gt;ます&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ccf117e4340cd0e5c881544794c26e21b3b2c268" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;disable when&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;disable&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;disable&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; &lt;code&gt;disable when&lt;/code&gt; &lt;/strong&gt;ラベルを&lt;strong&gt;無効に&lt;/strong&gt;する&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9540fd2275cebef3cc8a6a51148e37e52aee1976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;disable when&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;disable&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;&lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;trackexpr&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;code&gt;trackexpr&lt;/code&gt; &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;array&lt;/code&gt; &lt;strong&gt;トラックの&lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;disable&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; &lt;code&gt;disable when&lt;/code&gt; &lt;/strong&gt;ラベル&lt;strong&gt;無効&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="78c2f119da8be4cd5bb9221d33dd05bdedb9b514" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for (&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for (&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt;ラベル</target>
        </trans-unit>
        <trans-unit id="150dae485bcdc6fd89a169f94fc804d6cfea8ac5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cac922f89af3031718777be214cb2254862b957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt; | orderBy:&lt;code&gt;orderexpr&lt;/code&gt;&lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;trackexpr&lt;/code&gt; (for including a filter with &lt;code&gt;track by&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;array&lt;/code&gt; | orderBy： &lt;code&gt;orderexpr&lt;/code&gt; &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;trackexpr&lt;/code&gt; （ &lt;code&gt;track by&lt;/code&gt; withフィルターを含めるため）</target>
        </trans-unit>
        <trans-unit id="239b083c5563ddec531d240e282fa03ea0d12742" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;group by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;group&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for (&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;group by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;group&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for (&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d15e5a05956b00117a99d74f86391f9b3b03391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;group by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;group&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;group by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;group&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b744685d4c016beb0d171f357e6e3a2918f6cad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;group by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;group&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;&lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;trackexpr&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;group by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;group&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;array&lt;/code&gt; &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;trackexpr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9606e1cb604162fc76bc7af0a34d91ea9e2e1be4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;largecode: code/with/slashes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;largecode: code/with/slashes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7de6cd206a6029c07ba144786966d13d325a8834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;link&lt;/code&gt; takes a function with the following signature, &lt;code&gt;function link(scope, element, attrs, controller, transcludeFn) { ... }&lt;/code&gt;, where:</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; は、 &lt;code&gt;function link(scope, element, attrs, controller, transcludeFn) { ... }&lt;/code&gt; シグネチャを持つ関数を取ります。ここで、</target>
        </trans-unit>
        <trans-unit id="91502fccc5972bb347507763a06927869d965f95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;literal&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; whether the expression's top-level node is a JavaScript literal.</source>
          <target state="translated">&lt;code&gt;literal&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;式の最上位ノードがJavaScriptリテラルかどうか。</target>
        </trans-unit>
        <trans-unit id="a99b524479aede3fd79e80331f756f1478f0b5c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locals&lt;/code&gt; &amp;ndash; &lt;code&gt;{object=}&lt;/code&gt; &amp;ndash; local variables context object, useful for overriding values in &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; &amp;ndash; &lt;code&gt;{object=}&lt;/code&gt; &amp;ndash;ローカル変数のコンテキストオブジェクト。 &lt;code&gt;context&lt;/code&gt; 値をオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="590bc891c9dd13d8306c6c63406770789ba9332c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locals&lt;/code&gt;: A map of locals which is used by &lt;a href=&quot;../../ng/service/%24controller&quot;&gt;$controller&lt;/a&gt; service for controller instantiation. The &lt;code&gt;locals&lt;/code&gt; contain the resolved values of the &lt;code&gt;resolve&lt;/code&gt; map. Additionally the &lt;code&gt;locals&lt;/code&gt; also contain:</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; ：&lt;a href=&quot;../../ng/service/%24controller&quot;&gt;$ controller&lt;/a&gt;サービスがコントローラーのインスタンス化に使用するローカルのマップ。 &lt;code&gt;locals&lt;/code&gt; の解決値が含まれている &lt;code&gt;resolve&lt;/code&gt; マップを。さらに、 &lt;code&gt;locals&lt;/code&gt; も含まれています：</target>
        </trans-unit>
        <trans-unit id="3b9fec05c81f4409175b6aff6e900595f1b83faa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt;: Sometimes it is desirable to test that an error is thrown, for this case the &lt;code&gt;log&lt;/code&gt; mode stores an array of errors in &lt;code&gt;$exceptionHandler.errors&lt;/code&gt;, to allow later assertion of them. See &lt;a href=&quot;../service/%24log#assertEmpty.html&quot;&gt;assertEmpty()&lt;/a&gt; and &lt;a href=&quot;../service/%24log#reset.html&quot;&gt;reset()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; ：エラーがスローされることをテストすることが望ましい場合があり &lt;code&gt;log&lt;/code&gt; この場合、ログモードはエラーの配列を &lt;code&gt;$exceptionHandler.errors&lt;/code&gt; に格納し、後でエラーをアサートできるようにします。&lt;a href=&quot;../service/%24log#assertEmpty.html&quot;&gt;assertEmpty（）&lt;/a&gt;および&lt;a href=&quot;../service/%24log#reset.html&quot;&gt;reset（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="23d705fb9a5b721b08a150808b4a91f33ed38caf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;major&lt;/code&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; Major version number, such as &quot;0&quot;.</source>
          <target state="translated">&lt;code&gt;major&lt;/code&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;「0」などのメジャーバージョン番号。</target>
        </trans-unit>
        <trans-unit id="b4cd6c73f46311daa402dd24b20f4410838cb724" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; - The root nodes in the template are MathML elements (excluding &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; -テンプレートのルートノードはMathML要素です（ &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; を除く）。</target>
        </trans-unit>
        <trans-unit id="f2095f8112312be3562bd13bd8bc8d9296995b41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minor&lt;/code&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; Minor version number, such as &quot;9&quot;.</source>
          <target state="translated">&lt;code&gt;minor&lt;/code&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;「9」などのマイナーバージョン番号。</target>
        </trans-unit>
        <trans-unit id="125783d49311a4a4654af4659c07419f3603ac0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;move&lt;/code&gt; is called on &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt; and &lt;code&gt;pointermove&lt;/code&gt; after the above logic has determined that a swipe is in progress.</source>
          <target state="translated">&lt;code&gt;move&lt;/code&gt; 上記のロジックでスワイプが進行中であると判断した後、moveは &lt;code&gt;mousemove&lt;/code&gt; 、 &lt;code&gt;touchmove&lt;/code&gt; 、および &lt;code&gt;pointermove&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e5ac219119a3637cf6a6df19977f057805eea9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; - &lt;code&gt;{string}&lt;/code&gt;: name of the event.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; - &lt;code&gt;{string}&lt;/code&gt; ：イベントの名前。</target>
        </trans-unit>
        <trans-unit id="975e32cbc82da131c161356b29799f7ce94c31a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; - the name used to identify the &lt;strong&gt;Route Definition&lt;/strong&gt; when generating links</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; -識別するために使用される名前&lt;strong&gt;ルート定義を&lt;/strong&gt;リンクを生成するとき</target>
        </trans-unit>
        <trans-unit id="c188d7646687abc76ecbb191336ba8bc2780b258" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newVal&lt;/code&gt; contains the current value of the &lt;code&gt;watchExpression&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;newVal&lt;/code&gt; には、 &lt;code&gt;watchExpression&lt;/code&gt; の現在の値が含まれます</target>
        </trans-unit>
        <trans-unit id="b80cf26a7729355a695d3b19b43c96415742c475" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-binding&lt;/code&gt; CSS class</source>
          <target state="translated">&lt;code&gt;ng-binding&lt;/code&gt; CSSクラス</target>
        </trans-unit>
        <trans-unit id="30a226ee9de2698e4ec87aa4474f0b6af7267eeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-dirty&lt;/code&gt; is set if the form is dirty.</source>
          <target state="translated">&lt;code&gt;ng-dirty&lt;/code&gt; フォームが汚れている場合は、ng-dirtyが設定されます。</target>
        </trans-unit>
        <trans-unit id="0beddb7582ff5fa7f1e6d0c85f363447c0a19ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-dirty&lt;/code&gt;: the control has been interacted with</source>
          <target state="translated">&lt;code&gt;ng-dirty&lt;/code&gt; ：コントロールが操作されました</target>
        </trans-unit>
        <trans-unit id="c21e8f2f3c54b50e5e555c735dda37042ac64711" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-empty&lt;/code&gt;: the view does not contain a value or the value is deemed &quot;empty&quot;, as defined by the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24isEmpty.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="translated">&lt;code&gt;ng-empty&lt;/code&gt; ：ビューに値が含まれていないか、&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24isEmpty.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;メソッドで定義されているように、値は「空」と見なされます</target>
        </trans-unit>
        <trans-unit id="b99ef4af22c9fb6a451fe884e40a7931a0f322c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-invalid-[key]&lt;/code&gt;: for each invalid key added by &lt;code&gt;$setValidity&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ng-invalid-[key]&lt;/code&gt; ： &lt;code&gt;$setValidity&lt;/code&gt; によって追加された無効なキーごと</target>
        </trans-unit>
        <trans-unit id="923f282ef8365be30f91981d1d1c3973067c3265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-invalid&lt;/code&gt; is set if the form is invalid.</source>
          <target state="translated">&lt;code&gt;ng-invalid&lt;/code&gt; フォームが無効な場合、ng-invalidが設定されます。</target>
        </trans-unit>
        <trans-unit id="50b1d37cead127adfc2ab3b05545ac1ea90b33f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-invalid&lt;/code&gt;: the model is invalid</source>
          <target state="translated">&lt;code&gt;ng-invalid&lt;/code&gt; ：モデルが無効です</target>
        </trans-unit>
        <trans-unit id="b21acf7875fdec254e1fafd418785479dec919a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-not-empty&lt;/code&gt;: the view contains a non-empty value</source>
          <target state="translated">&lt;code&gt;ng-not-empty&lt;/code&gt; ：ビューに空でない値が含まれています</target>
        </trans-unit>
        <trans-unit id="f49e7d0c87ab98e2baaf973237fca884ffa1864d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-pending&lt;/code&gt; is set if the form is pending.</source>
          <target state="translated">&lt;code&gt;ng-pending&lt;/code&gt; は、フォームが保留中の場合に設定されます。</target>
        </trans-unit>
        <trans-unit id="8c29be0dc25d3a62897cadf8b0d8dfb5fe57f1d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-pending&lt;/code&gt;: any &lt;code&gt;$asyncValidators&lt;/code&gt; are unfulfilled</source>
          <target state="translated">&lt;code&gt;ng-pending&lt;/code&gt; ： &lt;code&gt;$asyncValidators&lt;/code&gt; は実行されません</target>
        </trans-unit>
        <trans-unit id="4f4607fe86906a3185b79609205eea1facc90022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-pristine&lt;/code&gt; is set if the form is pristine.</source>
          <target state="translated">&lt;code&gt;ng-pristine&lt;/code&gt; フォームが初期状態の場合、ng-pristineが設定されます。</target>
        </trans-unit>
        <trans-unit id="9fdcbae8a8c9841884cbdf71bf988ee44392e34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-pristine&lt;/code&gt;: the control hasn't been interacted with yet</source>
          <target state="translated">&lt;code&gt;ng-pristine&lt;/code&gt; ：コントロールはまだ操作されていません</target>
        </trans-unit>
        <trans-unit id="3be9f306b9daa956aa3d3b9d3883fb975708599c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-scope&lt;/code&gt; and &lt;code&gt;ng-isolated-scope&lt;/code&gt; CSS classes</source>
          <target state="translated">&lt;code&gt;ng-scope&lt;/code&gt; および &lt;code&gt;ng-isolated-scope&lt;/code&gt; CSSクラス</target>
        </trans-unit>
        <trans-unit id="dc36091ac4203dbce713248aab1bf8d32d5e9db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-submitted&lt;/code&gt; is set if the form was submitted.</source>
          <target state="translated">&lt;code&gt;ng-submitted&lt;/code&gt; フォームが送信された場合、ng-submittedが設定されます。</target>
        </trans-unit>
        <trans-unit id="ca2b0935cdfc2eea8341f1300df9e86268c5004d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-touched&lt;/code&gt;: the control has been blurred</source>
          <target state="translated">&lt;code&gt;ng-touched&lt;/code&gt; ：コントロールがぼやけています</target>
        </trans-unit>
        <trans-unit id="1c2bfe48281f36a21e5d7616cbe01f403bd984a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-untouched&lt;/code&gt;: the control hasn't been blurred</source>
          <target state="translated">&lt;code&gt;ng-untouched&lt;/code&gt; ：コントロールはぼかされていません</target>
        </trans-unit>
        <trans-unit id="de3dba15ce0defd0d5547c5c2c7dbd6a646ba9e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-valid-[key]&lt;/code&gt;: for each valid key added by &lt;code&gt;$setValidity&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ng-valid-[key]&lt;/code&gt; ： &lt;code&gt;$setValidity&lt;/code&gt; によって追加された有効なキーごと</target>
        </trans-unit>
        <trans-unit id="2ac31fd00954301a4c22330591645fcac2503d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-valid&lt;/code&gt; is set if the form is valid.</source>
          <target state="translated">&lt;code&gt;ng-valid&lt;/code&gt; フォームが有効な場合、ng-validが設定されます。</target>
        </trans-unit>
        <trans-unit id="b52a7eafe9685920d2d321993b552754176cff7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ng-valid&lt;/code&gt;: the model is valid</source>
          <target state="translated">&lt;code&gt;ng-valid&lt;/code&gt; ：モデルは有効です</target>
        </trans-unit>
        <trans-unit id="9e6b3e2c83e8513a75336e33c29508b177e2f75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngApp&lt;/code&gt; is the easiest, and most common way to bootstrap an application.</source>
          <target state="translated">&lt;code&gt;ngApp&lt;/code&gt; は、アプリケーションをブートストラップする最も簡単で一般的な方法です。</target>
        </trans-unit>
        <trans-unit id="f4e9b3e723a2653596698d787fd8c138acff8b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngCloak&lt;/code&gt; works in cooperation with the following css rule embedded within &lt;code&gt;angular.js&lt;/code&gt; and &lt;code&gt;angular.min.js&lt;/code&gt;. For CSP mode please add &lt;code&gt;angular-csp.css&lt;/code&gt; to your html file (see &lt;a href=&quot;ngcsp&quot;&gt;ngCsp&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;ngCloak&lt;/code&gt; は、 &lt;code&gt;angular.js&lt;/code&gt; および &lt;code&gt;angular.min.js&lt;/code&gt; に埋め込まれた次のcssルールと連携して機能します。CSPモードの &lt;code&gt;angular-csp.css&lt;/code&gt; は、htmlファイルにangular-csp.cssを追加してください（&lt;a href=&quot;ngcsp&quot;&gt;ngCspを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e1344d983ebcb1500e54cc9032d0098ae949c0cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngIf&lt;/code&gt; differs from &lt;code&gt;ngShow&lt;/code&gt; and &lt;code&gt;ngHide&lt;/code&gt; in that &lt;code&gt;ngIf&lt;/code&gt; completely removes and recreates the element in the DOM rather than changing its visibility via the &lt;code&gt;display&lt;/code&gt; css property. A common case when this difference is significant is when using css selectors that rely on an element's position within the DOM, such as the &lt;code&gt;:first-child&lt;/code&gt; or &lt;code&gt;:last-child&lt;/code&gt; pseudo-classes.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; のと異なる &lt;code&gt;ngShow&lt;/code&gt; と &lt;code&gt;ngHide&lt;/code&gt; ことで &lt;code&gt;ngIf&lt;/code&gt; が完全に削除され、DOMなく介してその視認性を変化させるの要素を再現 &lt;code&gt;display&lt;/code&gt; CSSプロパティ。この違いが顕著である一般的なケースは、 &lt;code&gt;:first-child&lt;/code&gt; または &lt;code&gt;:last-child&lt;/code&gt; 疑似クラスなど、DOM内の要素の位置に依存するcssセレクターを使用する場合です。</target>
        </trans-unit>
        <trans-unit id="8f2b1a8c7c74f4a72b84008810d60aae6876ec38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMaxlength&lt;/code&gt; does not set the &lt;code&gt;maxlength&lt;/code&gt; attribute and therefore HTML5 constraint validation is not available.</source>
          <target state="translated">&lt;code&gt;ngMaxlength&lt;/code&gt; は &lt;code&gt;maxlength&lt;/code&gt; 属性を設定しないため、HTML5制約の検証は使用できません。</target>
        </trans-unit>
        <trans-unit id="db13a53844c35f39db15d827af72f1f4dd5faf15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessage&lt;/code&gt; is a directive with the purpose to show and hide a particular message. For &lt;code&gt;ngMessage&lt;/code&gt; to operate, a parent &lt;code&gt;ngMessages&lt;/code&gt; directive on a parent DOM element must be situated since it determines which messages are visible based on the state of the provided key/value map that &lt;code&gt;ngMessages&lt;/code&gt; listens on.</source>
          <target state="translated">&lt;code&gt;ngMessage&lt;/code&gt; は、特定のメッセージを表示および非表示にすることを目的としたディレクティブです。 &lt;code&gt;ngMessage&lt;/code&gt; を動作させるために、親 &lt;code&gt;ngMessages&lt;/code&gt; のそれがいることを提供するキー/値のマップの状態に基づいて表示されたメッセージを決定するため、親のDOM要素のディレクティブが置かれなければならない &lt;code&gt;ngMessages&lt;/code&gt; のリッスンが上。</target>
        </trans-unit>
        <trans-unit id="f911f404708ca43b90710b63367d9f7e096d76ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessageDefault&lt;/code&gt; is a directive with the purpose to show and hide a default message for &lt;a href=&quot;directive/ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt;&lt;/a&gt;, when none of provided messages matches.</source>
          <target state="translated">&lt;code&gt;ngMessageDefault&lt;/code&gt; は、指定されたメッセージのいずれにも一致しない場合に&lt;a href=&quot;directive/ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; の&lt;/a&gt;デフォルトメッセージを表示および非表示にする目的のディレクティブです。</target>
        </trans-unit>
        <trans-unit id="d1a80e58641d77464a243d33a8baca83ef0e4e76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessageDefault&lt;/code&gt; is a directive with the purpose to show and hide a default message for &lt;a href=&quot;ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt;&lt;/a&gt;, when none of provided messages matches.</source>
          <target state="translated">&lt;code&gt;ngMessageDefault&lt;/code&gt; は、指定されたメッセージのいずれにも一致しない場合に&lt;a href=&quot;ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; の&lt;/a&gt;デフォルトメッセージを表示および非表示にする目的のディレクティブです。</target>
        </trans-unit>
        <trans-unit id="c3b74d6dd89600441fe433653f134a4402b67e4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessageDefault&lt;/code&gt; is a directive with the purpose to show and hide a default message for &lt;a href=&quot;ngmessages/directive/ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt;&lt;/a&gt;, when none of provided messages matches.</source>
          <target state="translated">&lt;code&gt;ngMessageDefault&lt;/code&gt; は、指定されたメッセージのいずれにも一致しない場合に&lt;a href=&quot;ngmessages/directive/ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; の&lt;/a&gt;デフォルトメッセージを表示および非表示にする目的のディレクティブです。</target>
        </trans-unit>
        <trans-unit id="2bfa15ead3e460ba86fff00e38b0a131a1e70400" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessageExp&lt;/code&gt; is the same as &lt;a href=&quot;directive/ngmessage&quot;&gt;&lt;code&gt;ngMessage&lt;/code&gt;&lt;/a&gt;, but instead of a static value, it accepts an expression to be evaluated for the message key.</source>
          <target state="translated">&lt;code&gt;ngMessageExp&lt;/code&gt; は同じである&lt;a href=&quot;directive/ngmessage&quot;&gt; &lt;code&gt;ngMessage&lt;/code&gt; &lt;/a&gt;、代わりに静的な値を、それがメッセージ鍵のために評価される式を受け付けます。</target>
        </trans-unit>
        <trans-unit id="faa25613ff7585c31d67851fd46b326faf503062" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessageExp&lt;/code&gt; is the same as &lt;a href=&quot;ngmessage&quot;&gt;&lt;code&gt;ngMessage&lt;/code&gt;&lt;/a&gt;, but instead of a static value, it accepts an expression to be evaluated for the message key.</source>
          <target state="translated">&lt;code&gt;ngMessageExp&lt;/code&gt; は同じである&lt;a href=&quot;ngmessage&quot;&gt; &lt;code&gt;ngMessage&lt;/code&gt; &lt;/a&gt;、代わりに静的な値を、それがメッセージ鍵のために評価される式を受け付けます。</target>
        </trans-unit>
        <trans-unit id="7982442a9c2318a173836d1c521123cc36b990fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessageExp&lt;/code&gt; is the same as &lt;a href=&quot;ngmessages/directive/ngmessage&quot;&gt;&lt;code&gt;ngMessage&lt;/code&gt;&lt;/a&gt;, but instead of a static value, it accepts an expression to be evaluated for the message key.</source>
          <target state="translated">&lt;code&gt;ngMessageExp&lt;/code&gt; は同じである&lt;a href=&quot;ngmessages/directive/ngmessage&quot;&gt; &lt;code&gt;ngMessage&lt;/code&gt; &lt;/a&gt;、代わりに静的な値を、それがメッセージ鍵のために評価される式を受け付けます。</target>
        </trans-unit>
        <trans-unit id="dcb05c000aa291e242ba387df0d24ae198e50e66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessages&lt;/code&gt; is a directive that is designed to show and hide messages based on the state of a key/value object that it listens on. The directive itself complements error message reporting with the &lt;code&gt;ngModel&lt;/code&gt; $error object (which stores a key/value state of validation errors).</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; は、リッスンするキー/値オブジェクトの状態に基づいてメッセージを表示および非表示にするように設計されたディレクティブです。ディレクティブ自体は、 &lt;code&gt;ngModel&lt;/code&gt; $ errorオブジェクト（検証エラーのキー/値の状態を格納）でエラーメッセージレポートを補完します。</target>
        </trans-unit>
        <trans-unit id="46cec3ebcc130190a8bf4f882325c13fc47490c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessages&lt;/code&gt; manages the state of internal messages within its container element. The internal messages use the &lt;code&gt;ngMessage&lt;/code&gt; directive and will be inserted/removed from the page depending on if they're present within the key/value object. By default, only one message will be displayed at a time and this depends on the prioritization of the messages within the template. (This can be changed by using the &lt;code&gt;ng-messages-multiple&lt;/code&gt; or &lt;code&gt;multiple&lt;/code&gt; attribute on the directive container.)</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; は、コンテナー要素内の内部メッセージの状態を管理します。内部メッセージは &lt;code&gt;ngMessage&lt;/code&gt; ディレクティブを使用し、キー/値オブジェクト内に存在するかどうかに応じて、ページから挿入/削除されます。デフォルトでは、一度に1つのメッセージのみが表示されます。これは、テンプレート内のメッセージの優先順位に依存します。 （これは、ディレクティブコンテナーで &lt;code&gt;ng-messages-multiple&lt;/code&gt; または &lt;code&gt;multiple&lt;/code&gt; 属性を使用して変更できます。）</target>
        </trans-unit>
        <trans-unit id="95207d1e12738a0a7551521de5b64fb2906efa0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMessagesInclude&lt;/code&gt; is a directive with the purpose to import existing ngMessage template code from a remote template and place the downloaded template code into the exact spot that the ngMessagesInclude directive is placed within the ngMessages container. This allows for a series of pre-defined messages to be reused and also allows for the developer to determine what messages are overridden due to the placement of the ngMessagesInclude directive.</source>
          <target state="translated">&lt;code&gt;ngMessagesInclude&lt;/code&gt; は、リモートテンプレートから既存のngMessageテンプレートコードをインポートし、ダウンロードしたテンプレートコードをngMessagesIncludeディレクティブがngMessagesコンテナ内に配置されている正確な場所に配置することを目的としたディレクティブです。これにより、一連の事前定義されたメッセージを再利用できるようになり、また、ngMessagesIncludeディレクティブの配置が原因でオーバーライドされるメッセージを開発者が決定できるようになります。</target>
        </trans-unit>
        <trans-unit id="74d56cd06c7ea109502b88c81cf5c7eff74988e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngMinlength&lt;/code&gt; does not set the &lt;code&gt;minlength&lt;/code&gt; attribute and therefore HTML5 constraint validation is not available.</source>
          <target state="translated">&lt;code&gt;ngMinlength&lt;/code&gt; は &lt;code&gt;minlength&lt;/code&gt; 属性を設定しないため、HTML5制約の検証は使用できません。</target>
        </trans-unit>
        <trans-unit id="ef379b2bdb17a6aa70d0e2a234446548bf8838f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngModel&lt;/code&gt; is responsible for:</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; は次のことを担当します。</target>
        </trans-unit>
        <trans-unit id="54ad428c19612f8cc1afb064726c65e13153f3e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngModelOptions&lt;/code&gt; considers every event that is not listed in &lt;code&gt;updateOn&lt;/code&gt; a &quot;default&quot; event, since different control types use different default events.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; は、異なるコントロールタイプが異なるデフォルトイベントを使用するため、 &lt;code&gt;updateOn&lt;/code&gt; にリストされていないすべてのイベントを「デフォルト」イベントと見なします。</target>
        </trans-unit>
        <trans-unit id="d8150f0605412f7e6ac4d7b9458215dfc01f7a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngPattern&lt;/code&gt; does not set the &lt;code&gt;pattern&lt;/code&gt; attribute and therefore HTML5 constraint validation is not available.</source>
          <target state="translated">&lt;code&gt;ngPattern&lt;/code&gt; は &lt;code&gt;pattern&lt;/code&gt; 属性を設定しないため、HTML5制約の検証は使用できません。</target>
        </trans-unit>
        <trans-unit id="36eb735d8ddc0df12b590d08dfab085319cf628b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngPluralize&lt;/code&gt; is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see &lt;a href=&quot;../../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt; dev guide). You configure ngPluralize directive by specifying the mappings between &lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; and the strings to be displayed.</source>
          <target state="translated">&lt;code&gt;ngPluralize&lt;/code&gt; は、en-USローカリゼーションルールに従ってメッセージを表示するディレクティブです。これらのルールはangular.jsにバンドルされていますが、オーバーライドできます（&lt;a href=&quot;../../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt;開発ガイドを参照）。ngPluralizeディレクティブを設定するには、&lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;複数のカテゴリ&lt;/a&gt;と表示する文字列の間のマッピングを指定します。</target>
        </trans-unit>
        <trans-unit id="733e0a6c001358bfcc55878b46fa7c256b0488ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngPluralize&lt;/code&gt; is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see &lt;a href=&quot;../../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt; dev guide). You configure ngPluralize directive by specifying the mappings between &lt;a href=&quot;https://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; and the strings to be displayed.</source>
          <target state="translated">&lt;code&gt;ngPluralize&lt;/code&gt; は、en-USローカリゼーションルールに従ってメッセージを表示するディレクティブです。これらのルールはangular.jsにバンドルされていますが、オーバーライドできます（&lt;a href=&quot;../../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt;開発ガイドを参照）。ngPluralizeディレクティブを構成するには、&lt;a href=&quot;https://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;複数のカテゴリ&lt;/a&gt;と表示する文字列の間のマッピングを指定します。</target>
        </trans-unit>
        <trans-unit id="64c65db94135f3ad2d778c3ce04f82f75c867a1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngPluralize&lt;/code&gt; is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see &lt;a href=&quot;../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt; dev guide). You configure ngPluralize directive by specifying the mappings between &lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; and the strings to be displayed.</source>
          <target state="translated">&lt;code&gt;ngPluralize&lt;/code&gt; は、en-USローカリゼーションルールに従ってメッセージを表示するディレクティブです。これらのルールはangular.jsにバンドルされていますが、オーバーライドできます（&lt;a href=&quot;../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt;開発ガイドを参照）。ngPluralizeディレクティブを設定するには、&lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;複数のカテゴリ&lt;/a&gt;と表示する文字列の間のマッピングを指定します。</target>
        </trans-unit>
        <trans-unit id="c5ffee4986710b36864794e5c8b2f194bd2e384a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngPluralize&lt;/code&gt; is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see &lt;a href=&quot;../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt; dev guide). You configure ngPluralize directive by specifying the mappings between &lt;a href=&quot;https://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; and the strings to be displayed.</source>
          <target state="translated">&lt;code&gt;ngPluralize&lt;/code&gt; は、en-USローカリゼーションルールに従ってメッセージを表示するディレクティブです。これらのルールはangular.jsにバンドルされていますが、オーバーライドできます（&lt;a href=&quot;../../guide/i18n&quot;&gt;AngularJS i18n&lt;/a&gt;開発ガイドを参照）。ngPluralizeディレクティブを構成するには、&lt;a href=&quot;https://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;複数のカテゴリ&lt;/a&gt;と表示する文字列の間のマッピングを指定します。</target>
        </trans-unit>
        <trans-unit id="9c7da06054e0eee606bb7d41cf80a7e3b6064d5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngRepeat&lt;/code&gt; uses &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;$watchCollection&lt;/a&gt; to detect changes in the collection. When a change happens, &lt;code&gt;ngRepeat&lt;/code&gt; then makes the corresponding changes to the DOM:</source>
          <target state="translated">&lt;code&gt;ngRepeat&lt;/code&gt; は&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;$ watchCollection&lt;/a&gt;を使用してコレクションの変更を検出します。変更が発生すると、 &lt;code&gt;ngRepeat&lt;/code&gt; はDOMに対応する変更を行います。</target>
        </trans-unit>
        <trans-unit id="0ef05042cf653c60d66fcc71fc7263f462a72584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngRepeat&lt;/code&gt; will silently &lt;em&gt;ignore&lt;/em&gt; object keys starting with &lt;code&gt;$&lt;/code&gt;, because it's a prefix used by AngularJS for public (&lt;code&gt;$&lt;/code&gt;) and private (&lt;code&gt;$$&lt;/code&gt;) properties.</source>
          <target state="translated">&lt;code&gt;ngRepeat&lt;/code&gt; は &lt;code&gt;$&lt;/code&gt; で始まるオブジェクトキーを暗黙的に&lt;em&gt;無視し&lt;/em&gt;ます。これは、AngularJSがパブリック（ &lt;code&gt;$&lt;/code&gt; ）およびプライベート（ &lt;code&gt;$$&lt;/code&gt; ）プロパティに使用するプレフィックスであるためです。</target>
        </trans-unit>
        <trans-unit id="7e07f8283af122ec2f11d8b6db9fb3ea9638f299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngSwitchDefault&lt;/code&gt;: the default case when no other case match. If there are multiple default cases, all of them will be displayed when no other case match.</source>
          <target state="translated">&lt;code&gt;ngSwitchDefault&lt;/code&gt; ：他に一致するケースがない場合のデフォルトのケース。デフォルトのケースが複数ある場合、他に一致するケースがない場合、それらすべてが表示されます。</target>
        </trans-unit>
        <trans-unit id="545ee93181f375cea5911031644e79b948292b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngSwitchWhen&lt;/code&gt;: the case statement to match against. If match then this case will be displayed. If the same match appears multiple times, all the elements will be displayed. It is possible to associate multiple values to the same &lt;code&gt;ngSwitchWhen&lt;/code&gt; by defining the optional attribute &lt;code&gt;ngSwitchWhenSeparator&lt;/code&gt;. The separator will be used to split the value of the &lt;code&gt;ngSwitchWhen&lt;/code&gt; attribute into multiple tokens, and the element will show if any of the &lt;code&gt;ngSwitch&lt;/code&gt; evaluates to any of these tokens.</source>
          <target state="translated">&lt;code&gt;ngSwitchWhen&lt;/code&gt; ：照合するケースステートメント。一致する場合、このケースが表示されます。同じ一致が複数回出現する場合、すべての要素が表示されます。オプションの属性 &lt;code&gt;ngSwitchWhenSeparator&lt;/code&gt; を定義することにより、同じ &lt;code&gt;ngSwitchWhen&lt;/code&gt; に複数の値を関連付けることが可能です。セパレーターは、 &lt;code&gt;ngSwitchWhen&lt;/code&gt; 属性の値を複数のトークンに分割するために使用され、要素は、 &lt;code&gt;ngSwitch&lt;/code&gt; のいずれかがこれらのトークンのいずれかに評価されるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="7238547c1b1155f65a58512287667a801baefba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngView&lt;/code&gt; is a directive that complements the &lt;a href=&quot;../service/%24route&quot;&gt;$route&lt;/a&gt; service by including the rendered template of the current route into the main layout (&lt;code&gt;index.html&lt;/code&gt;) file. Every time the current route changes, the included view changes with it according to the configuration of the &lt;code&gt;$route&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;ngView&lt;/code&gt; は、現在のルートのレンダリングされたテンプレートをメインレイアウト（ &lt;code&gt;index.html&lt;/code&gt; ）ファイルに含めることにより、&lt;a href=&quot;../service/%24route&quot;&gt;$ route&lt;/a&gt;サービスを補完するディレクティブです。現在のルートが変更されるたびに、 &lt;code&gt;$route&lt;/code&gt; サービスの構成に従って、含まれるビューが変更されます。</target>
        </trans-unit>
        <trans-unit id="8cc80ee7f99d1380308b63ca29f7b7f512266f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngView&lt;/code&gt; is a directive that complements the &lt;a href=&quot;ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service by including the rendered template of the current route into the main layout (&lt;code&gt;index.html&lt;/code&gt;) file. Every time the current route changes, the included view changes with it according to the configuration of the &lt;code&gt;$route&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;ngView&lt;/code&gt; は、現在のルートのレンダリングされたテンプレートをメインレイアウト（ &lt;code&gt;index.html&lt;/code&gt; ）ファイルに含めることにより、&lt;a href=&quot;ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt;サービスを補完するディレクティブです。現在のルートが変更されるたびに、 &lt;code&gt;$route&lt;/code&gt; サービスの構成に従って、含まれるビューが変更されます。</target>
        </trans-unit>
        <trans-unit id="aa251076acf5bb3eaa6af46d48d2c8d93a861eec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngView&lt;/code&gt; is a directive that complements the &lt;a href=&quot;service/%24route&quot;&gt;$route&lt;/a&gt; service by including the rendered template of the current route into the main layout (&lt;code&gt;index.html&lt;/code&gt;) file. Every time the current route changes, the included view changes with it according to the configuration of the &lt;code&gt;$route&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;ngView&lt;/code&gt; は、現在のルートのレンダリングされたテンプレートをメインレイアウト（ &lt;code&gt;index.html&lt;/code&gt; ）ファイルに含めることにより、&lt;a href=&quot;service/%24route&quot;&gt;$ route&lt;/a&gt;サービスを補完するディレクティブです。現在のルートが変更されるたびに、 &lt;code&gt;$route&lt;/code&gt; サービスの構成に従って、含まれるビューが変更されます。</target>
        </trans-unit>
        <trans-unit id="c4fd3ebadc39f2649df08c5d1b4c98a1de321282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify(value)&lt;/code&gt; - provides updates on the status of the promise's execution. This may be called multiple times before the promise is either resolved or rejected.</source>
          <target state="translated">&lt;code&gt;notify(value)&lt;/code&gt; -promiseの実行ステータスの更新を提供します。これは、promiseが解決または拒否される前に複数回呼び出される可能性があります。</target>
        </trans-unit>
        <trans-unit id="16b86354fb37d3ca3347ae6c7172c56af0cbcfa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;jqLite&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;jqLite&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bed0d33fb76669a4c767a2d600317da01f350f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8028b6836b472ed8a423e3528c7becca76431628" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93ad0324d43b1a6a467f477d6400301dda1cf747" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;object&lt;/code&gt;: A map of attributes</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; ：属性のマップ</target>
        </trans-unit>
        <trans-unit id="e53ce134b54611e421a70eb043225f3d3bf1cdbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;object&lt;/code&gt;&lt;code&gt;function(url)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt;&lt;code&gt;function(url)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17a46cd54e5f73299d9eb311adf5a2dedafa29e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectMaxDepth&lt;/code&gt;&lt;strong&gt;{Number}&lt;/strong&gt; - The max depth for stringifying objects. Setting to a non-positive or non-numeric value, removes the max depth limit. Default: 5</source>
          <target state="translated">&lt;code&gt;objectMaxDepth&lt;/code&gt; &lt;strong&gt;{Number}&lt;/strong&gt; -オブジェクトを文字列化するための最大深度。正または数値以外の値に設定すると、最大深度制限が削除されます。デフォルト：5</target>
        </trans-unit>
        <trans-unit id="08cde7202b34490c55f62fb494ab4bdfffb8d20b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oldVal&lt;/code&gt; contains the previous value of the &lt;code&gt;watchExpression&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;oldVal&lt;/code&gt; 、以前の値が含まれてい &lt;code&gt;watchExpression&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="c3d9d572f7c9c8de5cb11ae4eaa174e4cbbad796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - An optional object hash with linking options. If &lt;code&gt;options&lt;/code&gt; is provided, then the following keys may be used to control linking behavior:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; -リンクオプション付きのオプションのオブジェクトハッシュ。 &lt;code&gt;options&lt;/code&gt; が指定されている場合、次のキーを使用してリンク動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="20786a12f072e3c91a7ea25badf7acb56adf04a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parentBoundTranscludeFn&lt;/code&gt; - the transclude function made available to directives; if given, it will be passed through to the link functions of directives found in &lt;code&gt;element&lt;/code&gt; during compilation.</source>
          <target state="translated">&lt;code&gt;parentBoundTranscludeFn&lt;/code&gt; -ディレクティブが使用できるようにするtransclude関数。指定すると、コンパイル中に &lt;code&gt;element&lt;/code&gt; にあるディレクティブのリンク関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="2294bbc26469b48270a626ca074054bfba75f5e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; can contain named groups starting with a colon and ending with a star: e.g.&lt;code&gt;:name*&lt;/code&gt;. All characters are eagerly stored in &lt;code&gt;$routeParams&lt;/code&gt; under the given &lt;code&gt;name&lt;/code&gt; when the route matches.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; は、コロンで始まり、スターで終わる名前付きグループを含めることができます（例 &lt;code&gt;:name*&lt;/code&gt; 。ルートが一致すると、すべての文字が所定の &lt;code&gt;name&lt;/code&gt; で &lt;code&gt;$routeParams&lt;/code&gt; 熱心に格納されます。</target>
        </trans-unit>
        <trans-unit id="81661063ed89ce01f1c4fbc9c9a7f4aff9fa95b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; can contain named groups starting with a colon: e.g. &lt;code&gt;:name&lt;/code&gt;. All characters up to the next slash are matched and stored in &lt;code&gt;$routeParams&lt;/code&gt; under the given &lt;code&gt;name&lt;/code&gt; when the route matches.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; は、コロンで始まる名前付きグループを含めることができます（例 &lt;code&gt;:name&lt;/code&gt; )。次のスラッシュまでのすべての文字が一致したとに格納されている &lt;code&gt;$routeParams&lt;/code&gt; 与えられた下の &lt;code&gt;name&lt;/code&gt; ルートが一致。</target>
        </trans-unit>
        <trans-unit id="ae8d0ef38cbe2a709ef10e0396d080c2ba085ba2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; can contain optional named groups with a question mark: e.g.&lt;code&gt;:name?&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; は、疑問符の付いたオプションの名前付きグループを含めることができます。例 &lt;code&gt;:name?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb63deb69dad86f4634d2a23b301f6e1bd9d48f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; or (&lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;serializer&lt;/code&gt;) - defines how to recognize and generate this route</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; または（ &lt;code&gt;regex&lt;/code&gt; と &lt;code&gt;serializer&lt;/code&gt; ）-このルートを認識して生成する方法を定義します</target>
        </trans-unit>
        <trans-unit id="76bee225438966ab0e0bbdf3425c45ec097bfa0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;phase&lt;/code&gt; - The phase of the animation. The two possible phases are &lt;strong&gt;start&lt;/strong&gt; (when the animation starts) and &lt;strong&gt;close&lt;/strong&gt; (when it ends).</source>
          <target state="translated">&lt;code&gt;phase&lt;/code&gt; -アニメーションのフェーズ。2つの可能なフェーズは、&lt;strong&gt;開始&lt;/strong&gt;（アニメーションの開始時）と&lt;strong&gt;終了&lt;/strong&gt;（アニメーションの終了時）です。</target>
        </trans-unit>
        <trans-unit id="de7daf300c8eb687174393ed660f833827ee2a39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preventDefault&lt;/code&gt; - &lt;code&gt;{function}&lt;/code&gt;: calling &lt;code&gt;preventDefault&lt;/code&gt; sets &lt;code&gt;defaultPrevented&lt;/code&gt; flag to true.</source>
          <target state="translated">&lt;code&gt;preventDefault&lt;/code&gt; - &lt;code&gt;{function}&lt;/code&gt; ：呼び出し &lt;code&gt;preventDefault&lt;/code&gt; セットが &lt;code&gt;defaultPrevented&lt;/code&gt; trueにフラグ。</target>
        </trans-unit>
        <trans-unit id="836e9753a716a8b14973de5b11e39509a28ba069" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redirectTo&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; value to update &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$location&lt;/a&gt; path with and trigger route redirection.</source>
          <target state="translated">&lt;code&gt;redirectTo&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$ location&lt;/a&gt;パスを更新してルートリダイレクトをトリガーする値。</target>
        </trans-unit>
        <trans-unit id="53bfd1bd5ebce6b4fb02ad847a587ad65779268d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redirectTo&lt;/code&gt; takes precedence over &lt;code&gt;resolveRedirectTo&lt;/code&gt;, so specifying both on the same route definition, will cause the latter to be ignored.</source>
          <target state="translated">&lt;code&gt;redirectTo&lt;/code&gt; は &lt;code&gt;resolveRedirectTo&lt;/code&gt; よりも優先されるため、同じルート定義で両方を指定すると、後者は無視されます。</target>
        </trans-unit>
        <trans-unit id="432322d2ac55769a5f9ded5079284078193e4ba7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reject(reason)&lt;/code&gt; &amp;ndash; rejects the derived promise with the &lt;code&gt;reason&lt;/code&gt;. This is equivalent to resolving it with a rejection constructed via &lt;code&gt;$q.reject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reject(reason)&lt;/code&gt; &amp;ndash;導出されたpromiseを &lt;code&gt;reason&lt;/code&gt; とともに拒否します。これは、 &lt;code&gt;$q.reject&lt;/code&gt; 作成された拒否で解決することと同じです。</target>
        </trans-unit>
        <trans-unit id="a35877a90203b1fa9d354636135763cf53bc8359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relatedTarget&lt;/code&gt;: the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget&quot;&gt;relatedTarget&lt;/a&gt; for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;relatedTarget&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget&quot;&gt;relatedTarget&lt;/a&gt;ため&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;のMouseEvent&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b18bc1c28f2bbde7b314eb2cc9383214fa98745b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;removeClass&lt;/code&gt; - A space separated list of CSS classes that will be removed from the element and spread across the animation.</source>
          <target state="translated">&lt;code&gt;removeClass&lt;/code&gt; -要素から削除され、アニメーション全体に広がるCSSクラスのスペースで区切られたリスト。</target>
        </trans-unit>
        <trans-unit id="a415a93582b2467f1c659ff2dce0388b2574124e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;request&lt;/code&gt;: interceptors get called with a http &lt;a href=&quot;%24http#usage.html&quot;&gt;config&lt;/a&gt; object. The function is free to modify the &lt;code&gt;config&lt;/code&gt; object or create a new one. The function needs to return the &lt;code&gt;config&lt;/code&gt; object directly, or a promise containing the &lt;code&gt;config&lt;/code&gt; or a new &lt;code&gt;config&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; ：インターセプターはhttp &lt;a href=&quot;%24http#usage.html&quot;&gt;設定&lt;/a&gt;オブジェクトで呼び出されます。関数は &lt;code&gt;config&lt;/code&gt; オブジェクトを自由に変更したり、新しいものを作成したりできます。関数は &lt;code&gt;config&lt;/code&gt; オブジェクトを直接返すか、 &lt;code&gt;config&lt;/code&gt; または新しい &lt;code&gt;config&lt;/code&gt; オブジェクトを含むプロミスを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="331af1d76f0a76c9ba20ba92c5f9420779ebbb4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requestError&lt;/code&gt;: interceptor gets called when a previous interceptor threw an error or resolved with a rejection.</source>
          <target state="translated">&lt;code&gt;requestError&lt;/code&gt; ：前のインターセプターがエラーをスローしたか、拒否によって解決されたときにインターセプターが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8d53e1f7b99ff33379860e3d4b9916bb2c54ec36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; - &lt;code&gt;{Object&amp;lt;string, string&amp;gt;=}&lt;/code&gt; - requires the controllers of other directives and binds them to this component's controller. The object keys specify the property names under which the required controllers (object values) will be bound. See &lt;a href=&quot;../service/%24compile#-require-.html&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; - &lt;code&gt;{Object&amp;lt;string, string&amp;gt;=}&lt;/code&gt; -このコンポーネントのコントローラに他のディレクティブと結合するそれらのコントローラを必要とします。オブジェクトキーは、必要なコントローラー（オブジェクト値）がバインドされるプロパティ名を指定します。&lt;a href=&quot;../service/%24compile#-require-.html&quot;&gt; &lt;code&gt;require&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="09e2d15681ac6c3af7cdc3e0faa85e6c1f2c6777" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve(value)&lt;/code&gt; &amp;ndash; resolves the derived promise with the &lt;code&gt;value&lt;/code&gt;. If the value is a rejection constructed via &lt;code&gt;$q.reject&lt;/code&gt;, the promise will be rejected instead.</source>
          <target state="translated">&lt;code&gt;resolve(value)&lt;/code&gt; &amp;ndash;派生したpromiseを &lt;code&gt;value&lt;/code&gt; で解決します。値が &lt;code&gt;$q.reject&lt;/code&gt; によって作成された拒否である場合、代わりにpromiseが拒否されます。</target>
        </trans-unit>
        <trans-unit id="5f8dc8bdadd7275656aa9a2245d9915031e3eef5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve&lt;/code&gt; - &lt;code&gt;{Object.&amp;lt;string, Function&amp;gt;=}&lt;/code&gt; - An optional map of dependencies which should be injected into the controller. If any of these dependencies are promises, the router will wait for them all to be resolved or one to be rejected before the controller is instantiated. If all the promises are resolved successfully, the values of the resolved promises are injected and &lt;a href=&quot;../service/%24route#%24routeChangeSuccess.html&quot;&gt;$routeChangeSuccess&lt;/a&gt; event is fired. If any of the promises are rejected the &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$routeChangeError&lt;/a&gt; event is fired. For easier access to the resolved dependencies from the template, the &lt;code&gt;resolve&lt;/code&gt; map will be available on the scope of the route, under &lt;code&gt;$resolve&lt;/code&gt; (by default) or a custom name specified by the &lt;code&gt;resolveAs&lt;/code&gt; property (see below). This can be particularly useful, when working with &lt;a href=&quot;../../ng/type/angular.module#component.html&quot;&gt;components&lt;/a&gt; as route templates.</source>
          <target state="translated">&lt;code&gt;resolve&lt;/code&gt; - &lt;code&gt;{Object.&amp;lt;string, Function&amp;gt;=}&lt;/code&gt; -コントローラに注入しなければならない依存関係の任意地図。これらの依存関係のいずれかが約束である場合、ルーターはそれらがすべて解決されるか、1つが拒否されるのを待ってからコントローラーがインスタンス化されます。すべての&lt;a href=&quot;../service/%24route#%24routeChangeSuccess.html&quot;&gt;promise&lt;/a&gt;が正常に解決されると、解決されたpromiseの値が挿入され、$ routeChangeSuccessイベントが発生します。&lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;promiseの&lt;/a&gt;いずれかが拒否された場合、$ routeChangeErrorイベントが発生します。テンプレートから解決された依存関係に簡単にアクセスするために、ルートのスコープの &lt;code&gt;$resolve&lt;/code&gt; （デフォルト）または &lt;code&gt;resolveAs&lt;/code&gt; で指定されたカスタム名で、 &lt;code&gt;resolve&lt;/code&gt; マップを使用できますプロパティ（下記参照）。これは、&lt;a href=&quot;../../ng/type/angular.module#component.html&quot;&gt;コンポーネント&lt;/a&gt;をルートテンプレートとして使用する場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="a2853893bb4934b2127ba4a826d10942682da97a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolveAs&lt;/code&gt; - &lt;code&gt;{string=}&lt;/code&gt; - The name under which the &lt;code&gt;resolve&lt;/code&gt; map will be available on the scope of the route. If omitted, defaults to &lt;code&gt;$resolve&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;resolveAs&lt;/code&gt; - &lt;code&gt;{string=}&lt;/code&gt; -その下に名前 &lt;code&gt;resolve&lt;/code&gt; マップは、ルートの範囲で利用できるようになります。省略した場合のデフォルトは &lt;code&gt;$resolve&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0579caa94ef9d589691969e4e7cdd2b9d7b8630f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolveRedirectTo&lt;/code&gt; &amp;ndash; &lt;code&gt;{Function=}&lt;/code&gt; &amp;ndash; a function that will (eventually) return the value to update &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$location&lt;/a&gt; URL with and trigger route redirection. In contrast to &lt;code&gt;redirectTo&lt;/code&gt;, dependencies can be injected into &lt;code&gt;resolveRedirectTo&lt;/code&gt; and the return value can be either a string or a promise that will be resolved to a string.</source>
          <target state="translated">&lt;code&gt;resolveRedirectTo&lt;/code&gt; &amp;ndash; &lt;code&gt;{Function=}&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$ location&lt;/a&gt; URL を更新し、ルートリダイレクトをトリガーする値を（最終的に）返す関数。 &lt;code&gt;redirectTo&lt;/code&gt; とは対照的に、依存関係は &lt;code&gt;resolveRedirectTo&lt;/code&gt; に注入でき、戻り値は文字列または文字列に解決されるpromiseのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="5ab2ec6458031d39af546da03f98a06cebfc1619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;response&lt;/code&gt;: interceptors get called with http &lt;code&gt;response&lt;/code&gt; object. The function is free to modify the &lt;code&gt;response&lt;/code&gt; object or create a new one. The function needs to return the &lt;code&gt;response&lt;/code&gt; object directly, or as a promise containing the &lt;code&gt;response&lt;/code&gt; or a new &lt;code&gt;response&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;response&lt;/code&gt; ：インターセプターはhttp &lt;code&gt;response&lt;/code&gt; オブジェクトで呼び出されます。この関数は、 &lt;code&gt;response&lt;/code&gt; オブジェクトを自由に変更したり、新しいオブジェクトを作成したりできます。関数は、 &lt;code&gt;response&lt;/code&gt; オブジェクトを直接返すか、 &lt;code&gt;response&lt;/code&gt; または新しい &lt;code&gt;response&lt;/code&gt; オブジェクトを含むプロミスとして返す必要があります。</target>
        </trans-unit>
        <trans-unit id="0dd63b36c3ef0ce81278313f0238a8cd71299e7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;responseError&lt;/code&gt;: interceptor gets called when a previous interceptor threw an error or resolved with a rejection.</source>
          <target state="translated">&lt;code&gt;responseError&lt;/code&gt; ：前のインターセプターがエラーをスローしたか、拒否によって解決されたときにインターセプターが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bc0beab4f33a756458e6c67169de1e2b21de9069" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rethrow&lt;/code&gt;: If any errors are passed to the handler in tests, it typically means that there is a bug in the application or test, so this mock will make these tests fail. For any implementations that expect exceptions to be thrown, the &lt;code&gt;rethrow&lt;/code&gt; mode will also maintain a log of thrown errors in &lt;code&gt;$exceptionHandler.errors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rethrow&lt;/code&gt; ：テストでエラーがハンドラーに渡された場合、通常はアプリケーションまたはテストにバグがあるため、このモックによりこれらのテストが失敗します。例外がスローされることを期待する実装の場合、 &lt;code&gt;rethrow&lt;/code&gt; モードでは、スローされたエラーのログも &lt;code&gt;$exceptionHandler.errors&lt;/code&gt; 保持されます。</target>
        </trans-unit>
        <trans-unit id="733e798121af904a4c72364967d66e459418a0a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope()&lt;/code&gt; - retrieves the &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; of the current element or its parent. Requires &lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;Debug Data&lt;/a&gt; to be enabled.</source>
          <target state="translated">&lt;code&gt;scope()&lt;/code&gt; - 現在の要素またはその親の&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;スコープ&lt;/a&gt;を取得します。&lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;デバッグデータ&lt;/a&gt;を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="0e7d1bd8355897fbc6f28e344ade30d5cf8bd1fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; - &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;Scope&lt;/a&gt; - The scope to be used by the directive for registering &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; - &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;Scope- &lt;/a&gt;&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;を登録するためのディレクティブによって使用されるスコープ。</target>
        </trans-unit>
        <trans-unit id="736a155bfe5b0f906748b542ca148a3e128bf938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; - A &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;Scope&lt;/a&gt; to bind to.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; - &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;適用範囲&lt;/a&gt;にバインドします。</target>
        </trans-unit>
        <trans-unit id="023503073b8e1c5e7628dda472aca0b7be7b79bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; - is the current scope with which the linking function is working with.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; -リンク機能が使用している現在のスコープです。</target>
        </trans-unit>
        <trans-unit id="cbb567d727f2e753041bffeb6c72e3fb3ce75a58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; is an AngularJS scope object.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; はAngularJSスコープオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="6df6e689423958b8b13ffb0a6a5742c72252b129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; refers to the current scope</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; は現在のスコープを指します</target>
        </trans-unit>
        <trans-unit id="6570b17255a636d66f9fa82bb833e5c0f7586e6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt;: (optional) override the scope.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; ：（オプション）スコープをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="3ae667447104aaa6f9f5e76dfcf12ece25e6e761" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;: The result of this expression will be bound to the model of the parent &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element. If not specified, &lt;code&gt;select&lt;/code&gt; expression will default to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; ：この式の結果は、親の &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素のモデルにバインドされます。指定しない場合、 &lt;code&gt;select&lt;/code&gt; 式はデフォルトで &lt;code&gt;value&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="78e458052a16c01b3670ea39bf0e5b65aeae45ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;disable when&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;disable&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; &lt;code&gt;(&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;disable&lt;/code&gt; &lt;strong&gt;に&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;disable when&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;label&lt;/code&gt; &lt;strong&gt;無効&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt;選択&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e0b61ae68ccf6a0fefe789619ae7c985ee70b82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for (&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;code&gt;object&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for (&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt;選択&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca66b2e6ac07e7ca29ddae160544b3bc7b0ebca7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68502af231efc1bd12a7d337f6cf5a0798c290b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;group by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;group&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;group by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;group&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85b6c9eeacbfb84c2c4b45f9b1ff493799d0771f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slotName&lt;/code&gt;: (optional) the name of the slot to transclude. If falsy (e.g. &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt;) then the default transclusion is provided. The &lt;code&gt;$transclude&lt;/code&gt; function also has a method on it, &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt;, which returns &lt;code&gt;true&lt;/code&gt; if the specified slot contains content (i.e. one or more DOM nodes).</source>
          <target state="translated">&lt;code&gt;slotName&lt;/code&gt; ：（オプション）変換するスロットの名前。偽物（たとえば &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;''&lt;/code&gt; ）の場合、デフォルトのトランスクルージョンが提供されます。 &lt;code&gt;$transclude&lt;/code&gt; 機能もそれに方法、あり &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; を返し、 &lt;code&gt;true&lt;/code&gt; 指定されたスロットは、コンテンツ（すなわち、1つまたは複数のDOMノード）が含まれている場合を。</target>
        </trans-unit>
        <trans-unit id="2d38932d58ae4db4450e491cc28b4e0e8782b480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stagger&lt;/code&gt; - A numeric time value representing the delay between successively animated elements (&lt;a href=&quot;../../nganimate#css-staggering-animations.html&quot;&gt;Click here to learn how CSS-based staggering works in ngAnimate.&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;stagger&lt;/code&gt; -連続してアニメーション要素間の遅延を表す数値の時間値（&lt;a href=&quot;../../nganimate#css-staggering-animations.html&quot;&gt;ngAnimateで作品をずらすCSSベースの方法については、ここをクリックしてください。&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e831bf85661d4350f937ca1ee30582dab7b941fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;staggerIndex&lt;/code&gt; - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a &lt;code&gt;stagger&lt;/code&gt; option value of &lt;code&gt;0.1&lt;/code&gt; is used then there will be a stagger delay of &lt;code&gt;600ms&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;staggerIndex&lt;/code&gt; -ずらしアイテムを表す数値インデックス（たとえば、5の値は、ずらしの6番目のアイテムに等しい。したがって、 &lt;code&gt;0.1&lt;/code&gt; の &lt;code&gt;stagger&lt;/code&gt; オプション値を使用すると、 &lt;code&gt;600ms&lt;/code&gt; ずらし遅延が発生する）</target>
        </trans-unit>
        <trans-unit id="4b45e4978dcf7ce6b7b883c7dd98db8f0f80ca71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; - The method to start the animation. This will return a &lt;code&gt;Promise&lt;/code&gt; when called.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; -アニメーションを開始するメソッド。呼び出されると、 &lt;code&gt;Promise&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3cb9ccde0ec19acd597bd9145a2a92a9b69d53db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; is called on either &lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;touchstart&lt;/code&gt; or &lt;code&gt;pointerdown&lt;/code&gt;. After this event, &lt;code&gt;$swipe&lt;/code&gt; is watching for &lt;code&gt;touchmove&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt; or &lt;code&gt;pointermove&lt;/code&gt; events. These events are ignored until the total distance moved in either dimension exceeds a small threshold.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; は、 &lt;code&gt;mousedown&lt;/code&gt; 、 &lt;code&gt;touchstart&lt;/code&gt; 、または &lt;code&gt;pointerdown&lt;/code&gt; で呼び出されます。このイベントの後、 &lt;code&gt;$swipe&lt;/code&gt; &lt;code&gt;pointermove&lt;/code&gt; は &lt;code&gt;touchmove&lt;/code&gt; 、 &lt;code&gt;mousemove&lt;/code&gt; 、またはpointermoveイベントを監視しています。これらのイベントは、いずれかの次元で移動した合計距離が小さなしきい値を超えるまで無視されます。</target>
        </trans-unit>
        <trans-unit id="4470450130ac3b5e4842fb970bfa6aa99c71833c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stopPropagation&lt;/code&gt; - &lt;code&gt;{function=}&lt;/code&gt;: calling &lt;code&gt;stopPropagation&lt;/code&gt; function will cancel further event propagation (available only for events that were &lt;code&gt;$emit&lt;/code&gt;-ed).</source>
          <target state="translated">&lt;code&gt;stopPropagation&lt;/code&gt; - &lt;code&gt;{function=}&lt;/code&gt; ：呼び出し &lt;code&gt;stopPropagation&lt;/code&gt; 関数は（のみであったイベントのために利用可能なさらなるイベント伝播をキャンセルします &lt;code&gt;$emit&lt;/code&gt; -edを）。</target>
        </trans-unit>
        <trans-unit id="562f32dbb4ed76736045cbd8fdf38a6b2f9b9379" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strictDi&lt;/code&gt; - disable automatic function annotation for the application. This is meant to assist in finding bugs which break minified code. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strictDi&lt;/code&gt; -アプリケーションの自動関数注釈を無効にします。これは、縮小されたコードを壊すバグの発見を支援するためのものです。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c7276b814226305e007944b2417ca4a18386b0d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: An AngularJS expression. This expression will be evaluated against each item and the result will be used for sorting. For example, use &lt;code&gt;'label'&lt;/code&gt; to sort by a property called &lt;code&gt;label&lt;/code&gt; or &lt;code&gt;'label.substring(0, 3)'&lt;/code&gt; to sort by the first 3 characters of the &lt;code&gt;label&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：AngularJS式。この式は各アイテムに対して評価され、結果はソートに使用されます。例えば、利用 &lt;code&gt;'label'&lt;/code&gt; というプロパティによってソートする &lt;code&gt;label&lt;/code&gt; または &lt;code&gt;'label.substring(0, 3)'&lt;/code&gt; の最初の3つの文字でソートする &lt;code&gt;label&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="87065c1b0a8c3b424a3bf885c83aec838ee244e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: Evaluated as &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;として評価</target>
        </trans-unit>
        <trans-unit id="1f120efe592339b69657624de23eb491c8d1b860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: The string is used for matching against the contents of the &lt;code&gt;array&lt;/code&gt;. All strings or objects with string properties in &lt;code&gt;array&lt;/code&gt; that match this string will be returned. This also applies to nested object properties. The predicate can be negated by prefixing the string with &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：文字列は、 &lt;code&gt;array&lt;/code&gt; 内容との照合に使用されます。この文字列と一致する &lt;code&gt;array&lt;/code&gt; 内の文字列プロパティを持つすべての文字列またはオブジェクトが返されます。これは、ネストされたオブジェクトのプロパティにも適用されます。文字列の前に &lt;code&gt;!&lt;/code&gt; を付けると、述語を否定できます。。</target>
        </trans-unit>
        <trans-unit id="0fac8b9ae85918a1b9bc8ddbaeca59ac4b4bdd0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: execute using the rules as defined in &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：&lt;a href=&quot;../../../guide/expression&quot;&gt;式で&lt;/a&gt;定義されたルールを使用して実行します。</target>
        </trans-unit>
        <trans-unit id="96c6e2cb8a41f3ff6df278ab114004a459396f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: the controller instance</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：コントローラインスタンス</target>
        </trans-unit>
        <trans-unit id="94b44bd8ed432ec208416beb4e35097bab5affc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;DOMElement&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;DOMElement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="910d44622a6107a3b19072bdef477ba5ae9f8f6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Number&lt;/code&gt;&lt;code&gt;Array.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Number&lt;/code&gt;&lt;code&gt;Array.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b0b56a1549a08913f8940eb735e9bc52b22b15a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;Object.&amp;lt;Array.&amp;lt;string&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;Object.&amp;lt;Array.&amp;lt;string&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52a43af812236606133b2286a90533aa1da9dce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0617274d3eb14a8dc52328b1796f76e5008bdb89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="333110296a642e5efb3711dbb16416e1cab4cf22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5c9c81312a04d037526e6aaf5a2317937e86260" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b79898c77a9158ed9a3b37da256dd059ffe3c81c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9eaac284d7e4378b9085c54e3296234cdfaab404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedObject&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedObject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c392a5b127563010af8428bead8b621d39ab9f3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedResourceUrl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedResourceUrl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0841c37de01d8a9cca515bc654a12239afab25d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76df6b50f223f89d90393b827dfbded897257a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2797717466ee7c0a14d61e2cca32c8deba9e887a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="895ee3aad440c5ee332da06917bd8f67a4bda274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function(scope)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function(scope)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6eae39d5eadf0ab32025ed06721ddcabd1fe903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9f4b43f7a2cf03aecf02ecdf8aaa8da5e8670ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="746d33f90849146f5b6d6cb98d0e6d0c1d1bfd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;self&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;self&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd29f8ef866a70b2bfb061ce2616ab1e279f7e87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="158ce96b5b8e7c15256896a4b3412574b9b96c2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;structural&lt;/code&gt; - Indicates that the &lt;code&gt;ng-&lt;/code&gt; prefix will be added to the event class. Setting to &lt;code&gt;false&lt;/code&gt; or omitting will turn &lt;code&gt;ng-EVENT&lt;/code&gt; and &lt;code&gt;ng-EVENT-active&lt;/code&gt; in &lt;code&gt;EVENT&lt;/code&gt; and &lt;code&gt;EVENT-active&lt;/code&gt;. Unused if &lt;code&gt;event&lt;/code&gt; is omitted.</source>
          <target state="translated">&lt;code&gt;structural&lt;/code&gt; &lt;code&gt;ng-&lt;/code&gt; プレフィックスがイベントクラスに追加されることを示します。 &lt;code&gt;false&lt;/code&gt; に設定するか省略すると、 &lt;code&gt;EVENT&lt;/code&gt; および &lt;code&gt;EVENT-active&lt;/code&gt; で &lt;code&gt;ng-EVENT&lt;/code&gt; および &lt;code&gt;ng-EVENT-active&lt;/code&gt; がオンになります。 &lt;code&gt;event&lt;/code&gt; が省略されている場合は使用されません。</target>
        </trans-unit>
        <trans-unit id="8544943dc901d069323d20e2530a0add4888fae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svg&lt;/code&gt; - The root nodes in the template are SVG elements (excluding &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;svg&lt;/code&gt; -テンプレートのルートノードはSVG要素です（ &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; を除く）。</target>
        </trans-unit>
        <trans-unit id="786046ffc4529a4e093a1303dfa9a1ee93ec701f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svgElements&lt;/code&gt;: This is similar to &lt;code&gt;htmlElements&lt;/code&gt;, but for SVG elements. This list is only taken into account if SVG is &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;enabled&lt;/a&gt; for &lt;code&gt;$sanitize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;svgElements&lt;/code&gt; ：これはと似て &lt;code&gt;htmlElements&lt;/code&gt; が、SVG要素について。このリストは、SVGが &lt;code&gt;$sanitize&lt;/code&gt; &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;有効になっ&lt;/a&gt;ている場合にのみ考慮されます。</target>
        </trans-unit>
        <trans-unit id="a9515e5426c7450b18d455b87febbca653c16d06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tAttrs&lt;/code&gt; - template attributes - Normalized list of attributes declared on this element shared between all directive compile functions.</source>
          <target state="translated">&lt;code&gt;tAttrs&lt;/code&gt; -テンプレート属性-この要素で宣言された属性の正規化されたリストは、すべてのディレクティブコンパイル関数間で共有されます。</target>
        </trans-unit>
        <trans-unit id="640b5f8f1c6fb750f1bcf0be926a6f7cccf24306" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tElement&lt;/code&gt; - template element - The element where the directive has been declared. It is safe to do template transformation on the element and child elements only.</source>
          <target state="translated">&lt;code&gt;tElement&lt;/code&gt; -テンプレート要素-ディレクティブが宣言されている要素。要素と子要素に対してのみテンプレート変換を実行しても安全です。</target>
        </trans-unit>
        <trans-unit id="72d0667731893a2127528a59238286dff75d5787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;targetScope&lt;/code&gt; - &lt;code&gt;{Scope}&lt;/code&gt;: the scope on which the event was &lt;code&gt;$emit&lt;/code&gt;-ed or &lt;code&gt;$broadcast&lt;/code&gt;-ed.</source>
          <target state="translated">&lt;code&gt;targetScope&lt;/code&gt; - &lt;code&gt;{Scope}&lt;/code&gt; ：イベントがされたスコープ &lt;code&gt;$emit&lt;/code&gt; -edまたは &lt;code&gt;$broadcast&lt;/code&gt; -ed。</target>
        </trans-unit>
        <trans-unit id="d9d78aa42995096a3743024a59381d174315f3db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; html template as a string or a function that returns an html template as a string which should be used by &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; or &lt;a href=&quot;../../ng/directive/nginclude&quot;&gt;ngInclude&lt;/a&gt; directives. This property takes precedence over &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash;文字列としてのhtmlテンプレート、または&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;または&lt;a href=&quot;../../ng/directive/nginclude&quot;&gt;ngInclude&lt;/a&gt;ディレクティブで使用される文字列としてhtmlテンプレートを返す関数。このプロパティは &lt;code&gt;templateUrl&lt;/code&gt; よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="b847eeb83e71a1ccc9378c6a72a5b750311dd281" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash; html template as a string or a function that returns an html template as a string which should be used as the contents of this component. Empty string by default.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash;文字列としてのhtmlテンプレート、またはこのコンポーネントのコンテンツとして使用される文字列としてhtmlテンプレートを返す関数。デフォルトでは空の文字列。</target>
        </trans-unit>
        <trans-unit id="0429ae61ad47c1536dc730ee0afecadf00bc6957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; path or function that returns a path to an html template that should be used by &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;で使用されるhtmlテンプレートへのパスを返すパスまたは関数。</target>
        </trans-unit>
        <trans-unit id="1f165003a7442135289074eae552a6c8ec021d4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash; path or function that returns a path to an html template that should be used as the contents of this component.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash;このコンポーネントのコンテンツとして使用されるhtmlテンプレートへのパスを返すパスまたは関数。</target>
        </trans-unit>
        <trans-unit id="ee42cbd3774e590fa40f0b97c140df868c1c1461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateUrl&lt;/code&gt; can also be a function which returns the URL of an HTML template to be loaded and used for the directive. AngularJS will call the &lt;code&gt;templateUrl&lt;/code&gt; function with two parameters: the element that the directive was called on, and an &lt;code&gt;attr&lt;/code&gt; object associated with that element.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; は、ロードしてディレクティブに使用するHTMLテンプレートのURLを返す関数にすることもできます。AngularJSは、ディレクティブが呼び出された要素と、その要素に関連付けられている &lt;code&gt;attr&lt;/code&gt; オブジェクトの2つのパラメーターで &lt;code&gt;templateUrl&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ea870e647b9ea89f6e12722c036f7bb3d691164f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;then(successCallback, [errorCallback], [notifyCallback])&lt;/code&gt; &amp;ndash; regardless of when the promise was or will be resolved or rejected, &lt;code&gt;then&lt;/code&gt; calls one of the success or error callbacks asynchronously as soon as the result is available. The callbacks are called with a single argument: the result or rejection reason. Additionally, the notify callback may be called zero or more times to provide a progress indication, before the promise is resolved or rejected.</source>
          <target state="translated">&lt;code&gt;then(successCallback, [errorCallback], [notifyCallback])&lt;/code&gt; -かかわらず、約束があったか、または解決されるか、拒否されたときの、 &lt;code&gt;then&lt;/code&gt; 非同期とすぐに結果が利用可能であるとして成功またはエラーのコールバックのいずれかを呼び出します。コールバックは、結果または拒否理由という単一の引数で呼び出されます。さらに、promiseが解決または拒否される前に、通知コールバックを0回以上呼び出して、進行状況を示すことができます。</target>
        </trans-unit>
        <trans-unit id="d443cc9d4071a44cd6714aa6913e16543351cdf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; for chaining</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; は連鎖用</target>
        </trans-unit>
        <trans-unit id="d2d6fd71723f49cd4579527a989629fb9d4d03d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeSecondsFormat&lt;/code&gt;: Defines if the &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime-local&lt;/code&gt; types should show seconds and milliseconds. The option follows the format string of &lt;a href=&quot;../filter/date&quot;&gt;date filter&lt;/a&gt;. By default, the options is &lt;code&gt;undefined&lt;/code&gt; which is equal to &lt;code&gt;'ss.sss'&lt;/code&gt; (seconds and milliseconds). The other options are &lt;code&gt;'ss'&lt;/code&gt; (strips milliseconds), and &lt;code&gt;''&lt;/code&gt; (empty string), which strips both seconds and milliseconds. Note that browsers that support &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime-local&lt;/code&gt; require the hour and minutes part of the time string, and may show the value differently in the user interface. &lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;See the example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;timeSecondsFormat&lt;/code&gt; ： &lt;code&gt;time&lt;/code&gt; および &lt;code&gt;datetime-local&lt;/code&gt; タイプが秒とミリ秒を表示するかどうかを定義します。オプションは、&lt;a href=&quot;../filter/date&quot;&gt;日付フィルターの&lt;/a&gt;フォーマット文字列に従います。デフォルトでは、オプションは &lt;code&gt;'ss.sss'&lt;/code&gt; （秒とミリ秒）に等しい &lt;code&gt;undefined&lt;/code&gt; です。他のオプションは &lt;code&gt;'ss'&lt;/code&gt; （ミリ秒をストリップ）と &lt;code&gt;''&lt;/code&gt; （空の文字列）で、秒とミリ秒の両方を除去します。 &lt;code&gt;time&lt;/code&gt; と &lt;code&gt;datetime-local&lt;/code&gt; をサポートするブラウザでは、時間文字列の時間と分の部分が必要であり、ユーザーインターフェイスで値が異なる場合があることに注意してください。&lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;例を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="228f9fa9bef945471bcee9dc6f546084669857e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeStripZeroSeconds&lt;/code&gt;: Defines if the &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime-local&lt;/code&gt; types should strip the seconds and milliseconds from the formatted value if they are zero. This option is applied after &lt;code&gt;timeSecondsFormat&lt;/code&gt;. This option can be used to make the formatting consistent over different browsers, as some browsers with support for &lt;code&gt;time&lt;/code&gt; will natively hide the milliseconds and seconds if they are zero, but others won't, and browsers that don't implement these input types will always show the full string. &lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;See the example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;timeStripZeroSeconds&lt;/code&gt; ： &lt;code&gt;time&lt;/code&gt; および &lt;code&gt;datetime-local&lt;/code&gt; タイプが秒とミリ秒をゼロにする場合、フォーマットされた値から秒とミリ秒を取り除くかどうかを定義します。このオプションは、 &lt;code&gt;timeSecondsFormat&lt;/code&gt; の後に適用されます。ミリ秒と秒がゼロの場合、 &lt;code&gt;time&lt;/code&gt; をサポートする一部のブラウザーはネイティブで非表示になりますが、他のブラウザーは非表示になり、これらの入力タイプを実装していないブラウザーは、このオプションを使用して、異なるブラウザー間でフォーマットを一致させることができます。常に完全な文字列を表示します。&lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;例を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a8cf0b2913a0db255f8c2c6df6d233dc95a24ffc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timezone&lt;/code&gt;: Defines the timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model for &lt;code&gt;&amp;lt;input type=&quot;date&quot; /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;time&quot; /&amp;gt;&lt;/code&gt;, ... . It understands UTC/GMT and the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;'+0430'&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian) If not specified, the timezone of the browser will be used. Note that changing the timezone will have no effect on the current date, and is only applied after the next input / model change.</source>
          <target state="translated">&lt;code&gt;timezone&lt;/code&gt; ： &lt;code&gt;&amp;lt;input type=&quot;date&quot; /&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;input type=&quot;time&quot; /&amp;gt;&lt;/code&gt; 、... のモデルで &lt;code&gt;Date&lt;/code&gt; インスタンスの読み取り/書き込みに使用されるタイムゾーンを定義します。UTC / GMTと米国本土のタイムゾーンの省略形を理解しますが、一般的な使用には、タイムゾーンオフセットを使用します。たとえば、 &lt;code&gt;'+0430'&lt;/code&gt; （グリニッジ子午線の東4時間30分）指定しない場合、ブラウザが使用されます。タイムゾーンを変更しても現在の日付には影響せず、次の入力/モデルの変更後にのみ適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1387f6c816d68d8c1111f49ddff0725feea9741e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to&lt;/code&gt; - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; -CSSトランジションを介してアニメーション全体に適用される終了CSSスタイル（キー/値オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="3d33e6e6f66d624736af3942dc236de0a529ac2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJSON&lt;/code&gt;: It returns a simple object without any of the extra properties added as part of the Resource API. This object can be serialized through &lt;a href=&quot;../../ng/function/angular.tojson&quot;&gt;&lt;code&gt;angular.toJson&lt;/code&gt;&lt;/a&gt; safely without attaching AngularJS-specific fields. Notice that &lt;code&gt;JSON.stringify&lt;/code&gt; (and &lt;code&gt;angular.toJson&lt;/code&gt;) automatically use this method when serializing a Resource instance (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior&quot;&gt;MDN&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;toJSON&lt;/code&gt; ：Resource APIの一部として追加された追加のプロパティのない単純なオブジェクトを返します。このオブジェクトは、AngularJS固有のフィールドをアタッチせずに、&lt;a href=&quot;../../ng/function/angular.tojson&quot;&gt; &lt;code&gt;angular.toJson&lt;/code&gt; &lt;/a&gt;を通じて安全にシリアル化できます。 &lt;code&gt;JSON.stringify&lt;/code&gt; （および &lt;code&gt;angular.toJson&lt;/code&gt; ）は、Resourceインスタンスをシリアル化するときにこのメソッドを自動的に使用することに注意してください（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior&quot;&gt;MDNを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b268b94b454ee57eb30bc251dc84638c344e172e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trackexpr&lt;/code&gt;: Used when working with an array of objects. The result of this expression will be used to identify the objects in the array. The &lt;code&gt;trackexpr&lt;/code&gt; will most likely refer to the &lt;code&gt;value&lt;/code&gt; variable (e.g. &lt;code&gt;value.propertyName&lt;/code&gt;). With this the selection is preserved even when the options are recreated (e.g. reloaded from the server).</source>
          <target state="translated">&lt;code&gt;trackexpr&lt;/code&gt; ：オブジェクトの配列を操作するときに使用されます。この式の結果は、配列内のオブジェクトを識別するために使用されます。 &lt;code&gt;trackexpr&lt;/code&gt; は、最も可能性に言及する &lt;code&gt;value&lt;/code&gt; の変数（例えば &lt;code&gt;value.propertyName&lt;/code&gt; ）。これにより、オプションが再作成された場合（サーバーから再ロードされた場合など）でも選択内容が保持されます。</target>
        </trans-unit>
        <trans-unit id="3f094ebe4b7290c61e9499ebb0b6c3b80541f847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transclude&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean=}&lt;/code&gt; &amp;ndash; whether &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;content transclusion&lt;/a&gt; is enabled. Disabled by default.</source>
          <target state="translated">&lt;code&gt;transclude&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean=}&lt;/code&gt; &amp;ndash; &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;コンテンツのトランスクルージョン&lt;/a&gt;が有効かどうか。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="847676ced2371e533c2148870bad52b1da205f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transclude&lt;/code&gt; - [&lt;em&gt;DEPRECATED&lt;/em&gt;!] A transclude linking function: &lt;code&gt;function(scope, cloneLinkingFn)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;transclude&lt;/code&gt; [ - &lt;em&gt;非推奨&lt;/em&gt;！] A transclude連携機能： &lt;code&gt;function(scope, cloneLinkingFn)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65712ae8d4a77115277acd1f52e30f6601b939d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transcludeControllers&lt;/code&gt; - an object hash with keys that map controller names to a hash with the key &lt;code&gt;instance&lt;/code&gt;, which maps to the controller instance; if given, it will make the controllers available to directives on the compileNode:</source>
          <target state="translated">&lt;code&gt;transcludeControllers&lt;/code&gt; -コントローラ名をキー &lt;code&gt;instance&lt;/code&gt; を持つハッシュにマッピングするキーを持つオブジェクトハッシュ。指定すると、compileNodeのディレクティブでコントローラを使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="37d92d08b7ef416b01c5f305b2c61d07d365d9cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transcludeFn&lt;/code&gt; - A transclude linking function pre-bound to the correct transclusion scope. This is the same as the &lt;code&gt;$transclude&lt;/code&gt; parameter of directive controllers, see &lt;a href=&quot;%24compile#-controller-.html&quot;&gt;the controller section for details&lt;/a&gt;. &lt;code&gt;function([scope], cloneLinkingFn, futureParentElement)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transcludeFn&lt;/code&gt; -正しいトランスクルージョンスコープに事前バインドされたトランスクルードリンク関数。これは、ディレクティブコントローラーの &lt;code&gt;$transclude&lt;/code&gt; パラメーターと同じです。&lt;a href=&quot;%24compile#-controller-.html&quot;&gt;詳細&lt;/a&gt;については、コントローラーのセクションを参照してください。 &lt;code&gt;function([scope], cloneLinkingFn, futureParentElement)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d16ff7ca5be8284ed85e6eb4694c10ec231342f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transcludeFn&lt;/code&gt; is a transclude linking function pre-bound to the correct transclusion scope.</source>
          <target state="translated">&lt;code&gt;transcludeFn&lt;/code&gt; は、正しいトランスクルージョンスコープに事前バインドされたトランスクルードリンク関数です。</target>
        </trans-unit>
        <trans-unit id="ffb35396e95b58bb7c8f48a2fbe498f67c401065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transitionStyle&lt;/code&gt; - The raw CSS transition style that will be used (e.g. &lt;code&gt;1s linear all&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;transitionStyle&lt;/code&gt; -使用される生のCSS遷移スタイル（例： &lt;code&gt;1s linear all&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="acb77224c6ceb61fd094da2474b6ea580eb395e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; - the template will replace the directive's element.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; -テンプレートはディレクティブの要素を置き換えます。</target>
        </trans-unit>
        <trans-unit id="d1f524d3ded436a245165aaa4f109e71bf8b5f91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; - transclude the content (i.e. the child nodes) of the directive's element.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; - transcludeディレクティブの要素の内容（つまり、子ノード）。</target>
        </trans-unit>
        <trans-unit id="7564f800bc370a2796451ba70257f53a5325b839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if injector has given service.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; インジェクターがサービスを提供している場合はtrue。</target>
        </trans-unit>
        <trans-unit id="0d4ccfa8d3922c854b6dd6344e7f34130ef1d616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;{enabled: true}&lt;/code&gt; - see &lt;a href=&quot;%24location#html5-mode.html&quot;&gt;HTML5 mode&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; または &lt;code&gt;{enabled: true}&lt;/code&gt; &lt;a href=&quot;%24location#html5-mode.html&quot;&gt;-HTML5モードを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="af162df4dc94fd9daba3aafea0161c62a70863fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;: A shorthand for &lt;code&gt;function(actual, expected) { return angular.equals(actual, expected)}&lt;/code&gt;. This is essentially strict comparison of expected and actual.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ： &lt;code&gt;function(actual, expected) { return angular.equals(actual, expected)}&lt;/code&gt; の省略表現です。これは、基本的に、予想と実際の厳密な比較です。</target>
        </trans-unit>
        <trans-unit id="fbe4c50fd0a9abce8570e4e958c2d4e2146509ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are converted to &lt;code&gt;''&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; と &lt;code&gt;null&lt;/code&gt; は &lt;code&gt;''&lt;/code&gt; に変換されます</target>
        </trans-unit>
        <trans-unit id="5c98b8e988d02e1ba1e97b4721ab935dd4f217c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;updateOn&lt;/code&gt;: string specifying which event should the input be bound to. You can set several events using an space delimited list. There is a special event called &lt;code&gt;default&lt;/code&gt; that matches the default events belonging to the control. These are the events that are bound to the control, and when fired, update the &lt;code&gt;$viewValue&lt;/code&gt; via &lt;code&gt;$setViewValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; ：入力をバインドするイベントを指定する文字列。スペース区切りのリストを使用して、複数のイベントを設定できます。呼ばれる特別なイベントがあり &lt;code&gt;default&lt;/code&gt; コントロールに属するデフォルトのイベントに一致します。これらは、コントロールにバインドされているイベントで、焼成時に、更新 &lt;code&gt;$viewValue&lt;/code&gt; 介して、 &lt;code&gt;$setViewValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29d95699dd6c95d5464de3151d2264f965e177b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;urlErrorParamsEnabled&lt;/code&gt;&lt;strong&gt;{Boolean}&lt;/strong&gt; - Specifies wether the generated error url will contain the parameters of the thrown error. Disabling the parameters can be useful if the generated error url is very long.</source>
          <target state="translated">&lt;code&gt;urlErrorParamsEnabled&lt;/code&gt; &lt;strong&gt;{Boolean}&lt;/strong&gt; -生成されたエラーURLに、スローされたエラーのパラメーターが含まれるかどうかを指定します。生成されたエラーURLが非常に長い場合は、パラメーターを無効にすると便利です。</target>
        </trans-unit>
        <trans-unit id="a357e96da249e2f1af903ec3f3e684cad3bb821c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;urlErrorParamsEnabled&lt;/code&gt;&lt;strong&gt;{Boolean}&lt;/strong&gt; - Specifies whether the generated error url will contain the parameters of the thrown error. Disabling the parameters can be useful if the generated error url is very long.</source>
          <target state="translated">&lt;code&gt;urlErrorParamsEnabled&lt;/code&gt; &lt;strong&gt;{Boolean}&lt;/strong&gt; -生成されたエラーURLにスローされたエラーのパラメーターを含めるかどうかを指定します。生成されたエラーURLが非常に長い場合は、パラメータを無効にすると便利です。</target>
        </trans-unit>
        <trans-unit id="3eb74c0fa899bba332ead017a3a8b0909948754f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: local variable which will refer to each item in the &lt;code&gt;array&lt;/code&gt; or each property value of &lt;code&gt;object&lt;/code&gt; during iteration.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ：反復中に &lt;code&gt;array&lt;/code&gt; 各項目または &lt;code&gt;object&lt;/code&gt; 各プロパティ値を参照するローカル変数。</target>
        </trans-unit>
        <trans-unit id="94509a804195595227a5cfe6a6953e645a82587d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable in expression as alias_expression&lt;/code&gt; &amp;ndash; You can also provide an optional alias expression which will then store the intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message when a filter is active on the repeater, but the filtered result set is empty.</source>
          <target state="translated">&lt;code&gt;variable in expression as alias_expression&lt;/code&gt; エイリアス式としての式の変数 &amp;ndash;オプションのエイリアス式を指定して、フィルターが適用された後のリピーターの中間結果を保存することもできます。通常、これはリピーターでフィルターがアクティブであるが、フィルターされた結果セットが空の場合に、特別なメッセージをレンダリングするために使用されます。</target>
        </trans-unit>
        <trans-unit id="da0e272e8acc0a6195e3bcaf512b0a10321a73a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable in expression track by tracking_expression&lt;/code&gt; &amp;ndash; You can also provide an optional tracking expression which can be used to associate the objects in the collection with the DOM elements. If no tracking expression is specified, ng-repeat associates elements by identity. It is an error to have more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are mapped to the same DOM element, which is not possible.)</source>
          <target state="translated">&lt;code&gt;variable in expression track by tracking_expression&lt;/code&gt; &amp;ndash;コレクション内のオブジェクトをDOM要素に関連付けるために使用できるオプションの追跡式を提供することもできます。追跡式が指定されていない場合、ng-repeatはアイデンティティによって要素を関連付けます。複数のトラッキング式の値を同じキーに解決するとエラーになります。（これは、2つの異なるオブジェクトが同じDOM要素にマップされることを意味しますが、これは不可能です。）</target>
        </trans-unit>
        <trans-unit id="92f234e3ec0cb367320a3a220f4b20ef2167912e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable in expression&lt;/code&gt; &amp;ndash; where variable is the user defined loop variable and &lt;code&gt;expression&lt;/code&gt; is a scope expression giving the collection to enumerate.</source>
          <target state="translated">&lt;code&gt;variable in expression&lt;/code&gt; &amp;ndash;ここで、variableはユーザー定義のループ変数で、 &lt;code&gt;expression&lt;/code&gt; はコレクションを列挙するスコープ式です。</target>
        </trans-unit>
        <trans-unit id="334ac9044b19555f1050ecb68b25a14f4bb8c986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;which&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/which&quot;&gt;which&lt;/a&gt; for keyboard events (keydown, keypress, and keyup).</source>
          <target state="translated">&lt;code&gt;which&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/which&quot;&gt;これは&lt;/a&gt;キーボードイベント（KeyDownイベント、キー入力、およびkeyUpなど）のために。</target>
        </trans-unit>
        <trans-unit id="1ac658084647c61610cc182b520bbea0c2f421a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;: x-coordinates for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEvent&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEventの&lt;/a&gt; x座標。</target>
        </trans-unit>
        <trans-unit id="e77c7788c746962515a474a5d749e1a79e210076" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt;: y-coordinates for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEvent&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEventの&lt;/a&gt; y座標。</target>
        </trans-unit>
        <trans-unit id="c7e687c0043c071c6aece0047f6ecce75d19741c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yOffset&lt;/code&gt; can be specified in various ways:</source>
          <target state="translated">&lt;code&gt;yOffset&lt;/code&gt; はさまざまな方法で指定できます。</target>
        </trans-unit>
        <trans-unit id="a617d5ce788306d35a28f1b23deafa05516a552c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': 'bar'}&lt;/code&gt; results in &lt;code&gt;foo=bar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{'foo': 'bar'}&lt;/code&gt; は &lt;code&gt;foo=bar&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="40f5e12482264d458011441d8acd229f0c146c27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': Date.now()}&lt;/code&gt; results in &lt;code&gt;foo=2015-04-01T09%3A50%3A49.262Z&lt;/code&gt; (&lt;code&gt;toISOString()&lt;/code&gt; and encoded representation of a Date object)</source>
          <target state="translated">&lt;code&gt;{'foo': Date.now()}&lt;/code&gt; は &lt;code&gt;foo=2015-04-01T09%3A50%3A49.262Z&lt;/code&gt; （ &lt;code&gt;toISOString()&lt;/code&gt; およびエンコードされたDateオブジェクトの表現）になります</target>
        </trans-unit>
        <trans-unit id="57485b09d81aab721ab707b73b044a684f8e5060" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': ['bar', 'baz']}&lt;/code&gt; results in &lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt; (repeated key for each array element)</source>
          <target state="translated">&lt;code&gt;{'foo': ['bar', 'baz']}&lt;/code&gt; は、 &lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt; （各配列要素のキーの繰り返し）になります。</target>
        </trans-unit>
        <trans-unit id="d3da24ed0f0d4b7cfaff7dad39818886793dbdd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': {'bar':'baz'}}&lt;/code&gt; results in &lt;code&gt;foo=%7B%22bar%22%3A%22baz%22%7D&lt;/code&gt; (stringified and encoded representation of an object)</source>
          <target state="translated">&lt;code&gt;{'foo': {'bar':'baz'}}&lt;/code&gt; 結果は &lt;code&gt;foo=%7B%22bar%22%3A%22baz%22%7D&lt;/code&gt; （オブジェクトの文字列化およびエンコードされた表現）</target>
        </trans-unit>
        <trans-unit id="911108b4676c74e69e2c8a5425b9290805810576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{..., requireBase: true/false}&lt;/code&gt; (only affects HTML5 mode) - see &lt;a href=&quot;%24location#relative-links.html&quot;&gt;Relative links&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;{..., requireBase: true/false}&lt;/code&gt; （HTML5モードにのみ影響）- &lt;a href=&quot;%24location#relative-links.html&quot;&gt;相対リンクを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="b318179a9e271f3e2ae88a0a62abd131b8304a27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{..., rewriteLinks: true/false/'string'}&lt;/code&gt; (only affects HTML5 mode) - see &lt;a href=&quot;%24location#html-link-rewriting.html&quot;&gt;HTML link rewriting&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;{..., rewriteLinks: true/false/'string'}&lt;/code&gt; （HTML5モードにのみ影響します）-HTML &lt;a href=&quot;%24location#html-link-rewriting.html&quot;&gt;リンクの書き換えを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="54f251c1df022ee72aa09d55c18a4cad4642a15c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Array.&amp;lt;Object&amp;gt;}&lt;/code&gt; - route parameters extracted from the current &lt;code&gt;$location.path()&lt;/code&gt; by applying the current route</source>
          <target state="translated">&lt;code&gt;{Array.&amp;lt;Object&amp;gt;}&lt;/code&gt; - 現在のルートを適用して現在の &lt;code&gt;$location.path()&lt;/code&gt; から抽出されたルートパラメータ</target>
        </trans-unit>
        <trans-unit id="d55397a3691fb7f16c2b68ceccf09396cffff1e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Object.&amp;lt;string&amp;gt;}&lt;/code&gt; - route parameters extracted from the current &lt;code&gt;$location.path()&lt;/code&gt; by applying the current route templateUrl.</source>
          <target state="translated">&lt;code&gt;{Object.&amp;lt;string&amp;gt;}&lt;/code&gt; - 現在のルートtemplateUrlを適用して現在の &lt;code&gt;$location.path()&lt;/code&gt; から抽出されたルートパラメーター。</target>
        </trans-unit>
        <trans-unit id="5dd320208f2f8b6bd9bf61c72c4ecba3a9f5f0df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Object}&lt;/code&gt; - current &lt;code&gt;$location.search()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{Object}&lt;/code&gt; -現在の &lt;code&gt;$location.search()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2149ad1bd6c42b49cd543b148dfb2f6388d925cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{number=}&lt;/code&gt;&lt;code&gt;capacity&lt;/code&gt; &amp;mdash; turns the cache into LRU cache.</source>
          <target state="translated">&lt;code&gt;{number=}&lt;/code&gt; &lt;code&gt;capacity&lt;/code&gt; &amp;mdash;キャッシュをLRUキャッシュに変換します。</target>
        </trans-unit>
        <trans-unit id="da407c21ae2fa7bb980f78d9a8da4ee25cc9f350" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{object}&lt;/code&gt;&lt;code&gt;info()&lt;/code&gt; &amp;mdash; Returns id, size, and options of cache.</source>
          <target state="translated">&lt;code&gt;{object}&lt;/code&gt; &lt;code&gt;info()&lt;/code&gt; &amp;mdash;キャッシュのID、サイズ、オプションを返します。</target>
        </trans-unit>
        <trans-unit id="3e3ad3b4a976be784d9931118a3ade95ac665494" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{string}&lt;/code&gt; - current &lt;code&gt;$location.path()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{string}&lt;/code&gt; -現在の &lt;code&gt;$location.path()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c522d995b45e3440f20bd443030478095e596984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{void}&lt;/code&gt;&lt;code&gt;destroy()&lt;/code&gt; &amp;mdash; Removes references to this cache from $cacheFactory.</source>
          <target state="translated">&lt;code&gt;{void}&lt;/code&gt; &lt;code&gt;destroy()&lt;/code&gt; &amp;mdash; $ cacheFactoryからこのキャッシュへの参照を削除します。</target>
        </trans-unit>
        <trans-unit id="e4a6fd63772f52f96e9f426f81d54c33fb4eb1c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{void}&lt;/code&gt;&lt;code&gt;remove({string} key)&lt;/code&gt; &amp;mdash; Removes a key-value pair from the cache.</source>
          <target state="translated">&lt;code&gt;{void}&lt;/code&gt; &lt;code&gt;remove({string} key)&lt;/code&gt; &amp;mdash;キーと値のペアをキャッシュから削除します。</target>
        </trans-unit>
        <trans-unit id="18479675af1aa11b86509fba5caaf0f831d9057b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{void}&lt;/code&gt;&lt;code&gt;removeAll()&lt;/code&gt; &amp;mdash; Removes all cached values.</source>
          <target state="translated">&lt;code&gt;{void}&lt;/code&gt; &lt;code&gt;removeAll()&lt;/code&gt; &amp;mdash;キャッシュされた値をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="1d36ed26057d8216f3c08e045608a09b11e71945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{*}}&lt;/code&gt;&lt;code&gt;get({string} key)&lt;/code&gt; &amp;mdash; Returns cached value for &lt;code&gt;key&lt;/code&gt; or undefined for cache miss.</source>
          <target state="translated">&lt;code&gt;{{*}}&lt;/code&gt; &lt;code&gt;get({string} key)&lt;/code&gt; -戻り値の値をキャッシュされた &lt;code&gt;key&lt;/code&gt; またはキャッシュ・ミスのために未定義。</target>
        </trans-unit>
        <trans-unit id="a7970ce53d560ba63cd690ee2c2257e390612fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{*}}&lt;/code&gt;&lt;code&gt;put({string} key, {*} value)&lt;/code&gt; &amp;mdash; Puts a new key-value pair into the cache and returns it.</source>
          <target state="translated">&lt;code&gt;{{*}}&lt;/code&gt; &lt;code&gt;put({string} key, {*} value)&lt;/code&gt; &amp;mdash;新しいキーと値のペアをキャッシュに入れて返します。</target>
        </trans-unit>
        <trans-unit id="c158b45018b20241b7d64f0e6fb6c158205d5d3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{user.name}}&lt;/code&gt; matches the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;interpolation directive&lt;/a&gt; and &lt;code&gt;ng-repeat&lt;/code&gt; matches the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt; directive&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;{{user.name}}&lt;/code&gt; が一致する&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;補間指令&lt;/a&gt;と &lt;code&gt;ng-repeat&lt;/code&gt; 一致&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; のディレクティブ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e726282d380a1534e9fad60131be5ac0b29e3297" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;$index&lt;/em&gt;: This special property tracks the collection items by their index, and re-uses the DOM elements that match that index, e.g. &lt;code&gt;item in items track by $index&lt;/code&gt;. This can be used for a performance improvement if no unique identfier is available and the identity of the collection items cannot be easily computed. It also allows duplicates.</source>
          <target state="translated">&lt;em&gt;$ index&lt;/em&gt;：この特別なプロパティは、コレクションアイテムをインデックスで追跡し、そのインデックスに一致するDOM要素を再利用します。たとえば、 &lt;code&gt;item in items track by $index&lt;/code&gt; 。これは、一意の識別子が利用できず、コレクションアイテムのIDを簡単に計算できない場合に、パフォーマンスの向上に使用できます。また、重複を許可します。</target>
        </trans-unit>
        <trans-unit id="a044b72eb8a0781c9343b5af12f792aab95c9bcb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: 0)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（デフォルト：0）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e751ce11ad956dd90cd36a0afb9b0b1dcbe4b08c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: 2)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（デフォルト：2）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a816a476b72a253b7763dfcfe1c04c484bed8eaa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: false)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（デフォルト：false）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa5362d88f02d84c0f6072e31087130279fa90f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: this)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（デフォルト：これ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="98d2aadf95d2d40783636f5c4b85be8f3d958303" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: true)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（デフォルト：true）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cbb24e41dd32901d004d12d257493c3c5c0bda11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(optional)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(optional)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="754ecad7a95e3b7f4e5db644ceb0b025a5bf0881" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing normalized attribute names:&lt;/em&gt; Directives like 'ngBind' can be expressed in many ways: 'ng:bind', &lt;code&gt;data-ng-bind&lt;/code&gt;, or 'x-ng-bind'. The attributes object allows for normalized access to the attributes.</source>
          <target state="translated">&lt;em&gt;正規化された属性名へのアクセス：&lt;/em&gt;「ngBind」などのディレクティブは、「ng：bind」、 &lt;code&gt;data-ng-bind&lt;/code&gt; 、または「x-ng-bind」など、さまざまな方法で表現できます。属性オブジェクトは、属性への正規化されたアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="6a131b596ef5d4c5c10460c2653d9d85004ad11d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing normalized attribute names:&lt;/em&gt; Directives like &lt;code&gt;ngBind&lt;/code&gt; can be expressed in many ways: &lt;code&gt;ng:bind&lt;/code&gt;, &lt;code&gt;data-ng-bind&lt;/code&gt;, or &lt;code&gt;x-ng-bind&lt;/code&gt;. The attributes object allows for normalized access to the attributes.</source>
          <target state="translated">&lt;em&gt;正規化された属性名へのアクセス：&lt;/em&gt; &lt;code&gt;ngBind&lt;/code&gt; などのディレクティブは、 &lt;code&gt;ng:bind&lt;/code&gt; 、 &lt;code&gt;data-ng-bind&lt;/code&gt; 、または &lt;code&gt;x-ng-bind&lt;/code&gt; などのさまざまな方法で表現できます。属性オブジェクトは、属性への正規化されたアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="e111c27e75a56741f56869876541081c8dedd0a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Caveat&lt;/em&gt;: While regular expressions are powerful and offer great flexibility, their syntax (and all the inevitable escaping) makes them &lt;em&gt;harder to maintain&lt;/em&gt;. It's easy to accidentally introduce a bug when one updates a complex expression (imho, all regexes should have good test coverage). For instance, the use of &lt;code&gt;.&lt;/code&gt; in the regex is correct only in a small number of cases. A &lt;code&gt;.&lt;/code&gt; character in the regex used when matching the scheme or a subdomain could be matched against a &lt;code&gt;:&lt;/code&gt; or literal &lt;code&gt;.&lt;/code&gt; that was likely not intended. It is highly recommended to use the string patterns and only fall back to regular expressions as a last resort.</source>
          <target state="translated">&lt;em&gt;警告&lt;/em&gt;：正規表現は強力で柔軟性に優れていますが、その構文（およびすべての避けられないエスケープ）により&lt;em&gt;、保守が難しくなります&lt;/em&gt;。複雑な式を更新するときに、誤ってバグを導入するのは簡単です（ただし、すべての正規表現のテストカバレッジが適切である必要があります）。たとえば、の使用 &lt;code&gt;.&lt;/code&gt; 正規表現では、少数の場合にのみ正しいです。 A &lt;code&gt;.&lt;/code&gt; スキームまたはサブドメインを照合するときに使用される正規表現の文字は、 &lt;code&gt;:&lt;/code&gt; またはリテラルと照合できます &lt;code&gt;.&lt;/code&gt; それはおそらく意図されていなかった。文字列パターンを使用し、最後の手段として正規表現のみにフォールバックすることを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="e30982b90f66fca844979a6a9a4f7586be2a1a77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Custom Expression&lt;/em&gt;: It is possible to use any AngularJS expression to compute the tracking id, for example with a function, or using a property on the collection items. &lt;code&gt;item in items track by item.id&lt;/code&gt; is a typical pattern when the items have a unique identifier, e.g. database id. In this case the object identity does not matter. Two objects are considered equivalent as long as their &lt;code&gt;id&lt;/code&gt; property is same. Tracking by unique identifier is the most performant way and should be used whenever possible.</source>
          <target state="translated">&lt;em&gt;カスタム式&lt;/em&gt;：任意のAngularJS式を使用して、たとえば関数で、またはコレクションアイテムのプロパティを使用して、追跡IDを計算できます。 &lt;code&gt;item in items track by item.id&lt;/code&gt; は、項目にデータベースIDなどの一意の識別子がある場合の典型的なパターンです。この場合、オブジェクトIDは重要ではありません。2つのオブジェクトは、 &lt;code&gt;id&lt;/code&gt; プロパティが同じである限り、同等と見なされます。一意の識別子による追跡が最もパフォーマンスが高く、可能な限り使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fb6033f7c259e56bf4d1d68342cdc278b40229d9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Default tracking: $id()&lt;/em&gt;: &lt;code&gt;item in items&lt;/code&gt; is equivalent to &lt;code&gt;item in items track by $id(item)&lt;/code&gt;. This implies that the DOM elements will be associated by item identity in the collection.</source>
          <target state="translated">&lt;em&gt;デフォルトの追跡：$ id（）&lt;/em&gt;： &lt;code&gt;item in items&lt;/code&gt; は &lt;code&gt;item in items track by $id(item)&lt;/code&gt; 内のアイテムと同等です。これは、DOM要素がコレクション内のアイテムIDによって関連付けられることを意味します。</target>
        </trans-unit>
        <trans-unit id="b852f0315e4ce34566ab5c876166ae5f304785c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Directive inter-communication:&lt;/em&gt; All directives share the same instance of the attributes object which allows the directives to use the attributes object as inter directive communication.</source>
          <target state="translated">&lt;em&gt;ディレクティブの相互通信：&lt;/em&gt;すべてのディレクティブは、属性オブジェクトの同じインスタンスを共有します。これにより、ディレクティブが属性オブジェクトをディレクティブ間の通信として使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="dacb1691370dfd3920557255152348a22cf3b5d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: This function is also published on window for easy access.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：この機能は、簡単にアクセスできるようにウィンドウにも公開されます。</target>
        </trans-unit>
        <trans-unit id="b596967063bc267febec1b76dc2c374401a146b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: This function is declared ONLY WHEN running tests with jasmine or mocha</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：この関数は、ジャスミンまたはモカでテストを実行しているときにのみ宣言されます</target>
        </trans-unit>
        <trans-unit id="c0d3c19141a200045b21b9fcad67eb34dedcb2de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: This is not an injectable instance, just a globally available function.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：これは注入可能なインスタンスではなく、グローバルに使用できる関数です。</target>
        </trans-unit>
        <trans-unit id="e8fbdfd4557770e7bbafe78d8a96bbbde024637b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: this is not an injectable instance, just a globally available mock class of &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：これは注入可能なインスタンスではなく、単に &lt;code&gt;Date&lt;/code&gt; のグローバルに利用可能なモッククラスです。</target>
        </trans-unit>
        <trans-unit id="ea949e8b6b51b83ce83927bd1d2ab8eed8069172" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Child links, buttons or other interactive controls must also be removed from the tab order.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：子リンク、ボタン、その他のインタラクティブコントロールもタブオーダーから削除する必要があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca1bdf6fca422a6f0c552750122a3a2b40e96654" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: This directive is only available in the &lt;code&gt;ng-csp&lt;/code&gt; and &lt;code&gt;data-ng-csp&lt;/code&gt; attribute form.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：このディレクティブは、 &lt;code&gt;ng-csp&lt;/code&gt; および &lt;code&gt;data-ng-csp&lt;/code&gt; 属性形式でのみ使用できます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77a2682333273242b4c5e6bda8deff61d9bd60c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Observing interpolated attributes:&lt;/em&gt; Use &lt;code&gt;$observe&lt;/code&gt; to observe the value changes of attributes that contain interpolation (e.g. &lt;code&gt;src=&quot;{{bar}}&quot;&lt;/code&gt;). Not only is this very efficient but it's also the only way to easily get the actual value because during the linking phase the interpolation hasn't been evaluated yet and so the value is at this time set to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;補間された属性の&lt;/em&gt; &lt;code&gt;$observe&lt;/code&gt; &lt;em&gt;：&lt;/em&gt;$ observeを使用して、補間を含む属性の値の変化を監視します（例： &lt;code&gt;src=&quot;{{bar}}&quot;&lt;/code&gt; ）。これは非常に効率的であるだけでなく、実際の値を簡単に取得する唯一の方法でもあります。これは、リンク段階では補間がまだ評価されていないため、この時点では値が &lt;code&gt;undefined&lt;/code&gt; に設定されているためです。</target>
        </trans-unit>
        <trans-unit id="5aae482cd8880389624b85fc425ae110f5121a77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please note&lt;/em&gt;: The browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy apply in addition to this and may further restrict whether the template is successfully loaded. This means that without the right CORS policy, loading templates from a different domain won't work on all browsers. Also, loading templates from &lt;code&gt;file://&lt;/code&gt; URL does not work on some browsers.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：これに加えて、ブラウザの&lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;同一生成元ポリシー&lt;/a&gt;と&lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;クロスオリジンリソースシェアリング（CORS）&lt;/a&gt;ポリシーが適用され、テンプレートが正常にロードされるかどうかをさらに制限する場合があります。つまり、正しいCORSポリシーがないと、別のドメインからテンプレートをロードしても、すべてのブラウザーで機能しません。また、一部のブラウザでは、 &lt;code&gt;file://&lt;/code&gt; URL からのテンプレートの読み込みが機能しません。</target>
        </trans-unit>
        <trans-unit id="3cac4e9f9bd824a31fd59bf57403db40fab7a120" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please note&lt;/em&gt;: The browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy apply in addition to this and may further restrict whether the template is successfully loaded. This means that without the right CORS policy, loading templates from a different domain won't work on all browsers. Also, loading templates from &lt;code&gt;file://&lt;/code&gt; URL does not work on some browsers.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：これに加えて、ブラウザの&lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;同一生成元ポリシー&lt;/a&gt;と&lt;a href=&quot;https://www.w3.org/TR/cors/&quot;&gt;クロスオリジンリソースシェアリング（CORS）&lt;/a&gt;ポリシーが適用され、テンプレートが正常に読み込まれるかどうかがさらに制限される場合があります。つまり、適切なCORSポリシーがないと、別のドメインからテンプレートを読み込むことがすべてのブラウザで機能するとは限りません。また、 &lt;code&gt;file://&lt;/code&gt; URLからのテンプレートのロードは、一部のブラウザーでは機能しません。</target>
        </trans-unit>
        <trans-unit id="8db5bad99fcd4bad5c64bc6f0cd52fe53c5671ef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Supports interpolation:&lt;/em&gt; Interpolation attributes are assigned to the attribute object allowing other directives to read the interpolated value.</source>
          <target state="translated">&lt;em&gt;補間をサポート：&lt;/em&gt;補間属性が属性オブジェクトに割り当てられ、他のディレクティブが補間された値を読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="d36f936e1ce70c281c0f3b29312665e6e0fa9952" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This is fairly rare but could be the case if a third party library is injecting the markup.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;これはかなりまれですが、サードパーティのライブラリがマークアップを挿入している場合は、そうなる可能性があります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="366e250bee7007fcaea094681e23e7a415c9b803" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This method is essentially an alias of &lt;a href=&quot;%24flushpendingtasks&quot;&gt;&lt;code&gt;$flushPendingTasks&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;このメソッドは基本的に&lt;a href=&quot;%24flushpendingtasks&quot;&gt; &lt;code&gt;$flushPendingTasks&lt;/code&gt; &lt;/a&gt;エイリアスです。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f0f567975629635167fbde2583ef0602afeaa7c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This method is essentially an alias of &lt;a href=&quot;%24verifynopendingtasks&quot;&gt;&lt;code&gt;$verifyNoPendingTasks&lt;/code&gt;&lt;/a&gt; (called with no arguments).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;このメソッドは基本的に&lt;a href=&quot;%24verifynopendingtasks&quot;&gt; &lt;code&gt;$verifyNoPendingTasks&lt;/code&gt; &lt;/a&gt;エイリアスです（引数なしで呼び出されます）。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3520b15297383cde81b70725936914a0e5c00b82" translate="yes" xml:space="preserve">
          <source>&lt;small id=&quot;drtvArray&quot;&gt;1. Multiple directives may be registered to the same selector/name&lt;/small&gt;</source>
          <target state="translated">&lt;small id=&quot;drtvArray&quot;&gt;1.複数のディレクティブを同じセレクター/名前に登録できます&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="68b9d92a12caafebe3855b5e3346edcc26067843" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngclick&quot;&gt;ngClick&lt;/span&gt; and &lt;span id=&quot;ngdblclick&quot;&gt;ngDblclick&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngclick&quot;&gt;ngClick&lt;/span&gt;および&lt;span id=&quot;ngdblclick&quot;&gt;ngDblclick&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1f8e28fe31dc034c9871f375e6dfe2b703d202d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;'self'&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;'self'&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="015a1117f6703ba8bef821a627eaa71af0db5e6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;...&lt;/strong&gt;: any additional properties from the options object when creating the cache.</source>
          <target state="translated">&lt;strong&gt;...&lt;/strong&gt;：キャッシュを作成するときのオプションオブジェクトからの追加のプロパティ。</target>
        </trans-unit>
        <trans-unit id="a544b3a64559b2b7cd3fa3fe814e5954fe808a68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;action&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {string} &amp;ndash; The name of action. This name becomes the name of the method on your resource object.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;action&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {string} &amp;ndash;アクションの名前。この名前は、リソースオブジェクトのメソッドの名前になります。</target>
        </trans-unit>
        <trans-unit id="f808f87280400577500827dc90a1f628ac1389e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cache&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Cache}&lt;/code&gt; &amp;ndash; A boolean value or object created with &lt;a href=&quot;../../ng/service/%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt; to enable or disable caching of the HTTP response. See &lt;a href=&quot;../../ng/service/%24http#caching.html&quot;&gt;$http Caching&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;cache&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Cache}&lt;/code&gt; &amp;ndash;HTTP応答のキャッシュを有効または無効にするために&lt;a href=&quot;../../ng/service/%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;作成されたブール値またはオブジェクト。詳細については、&lt;a href=&quot;../../ng/service/%24http#caching.html&quot;&gt; $ httpキャッシュ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5cb11994b5e6616708f025693d6148ee298b90fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cancellable&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, the request made by a &quot;non-instance&quot; call will be cancelled (if not already completed) by calling &lt;code&gt;$cancelRequest()&lt;/code&gt; on the call's return value. Calling &lt;code&gt;$cancelRequest()&lt;/code&gt; for a non-cancellable or an already completed/cancelled request will have no effect.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;cancellable&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; trueの場合、「インスタンス以外の」呼び出しによって行われた要求は、呼び出しの戻り値で &lt;code&gt;$cancelRequest()&lt;/code&gt; を呼び出すことによってキャンセルされます（まだ完了していない場合）。キャンセル不可または既に完了/キャンセルされたリクエストに対して &lt;code&gt;$cancelRequest()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="d26a33190f844946474d7e0488694940a6da6635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cancellable&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash; If true, the request made by a &quot;non-instance&quot; call will be cancelled (if not already completed) by calling &lt;code&gt;$cancelRequest()&lt;/code&gt; on the call's return value. This can be overwritten per action. (Defaults to false.)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;cancellable&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash; trueの場合、「インスタンス以外の」呼び出しによって行われた要求は、呼び出しの戻り値で &lt;code&gt;$cancelRequest()&lt;/code&gt; を呼び出すことによってキャンセルされます（まだ完了していない場合）。これはアクションごとに上書きできます。（デフォルトはfalseです。）</target>
        </trans-unit>
        <trans-unit id="2aa9849f2fa96ee47a768e94764889dff2b45b78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.cache&lt;/code&gt;&lt;/strong&gt; - {boolean|Object} - A boolean value or object created with &lt;a href=&quot;../service/%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt; to enable or disable caching of HTTP responses by default. See &lt;a href=&quot;../service/%24http#caching.html&quot;&gt;$http Caching&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.cache&lt;/code&gt; -&lt;/strong&gt; {boolean | Object}-デフォルトでHTTP応答のキャッシュを有効または無効にするために&lt;a href=&quot;../service/%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;作成されたブール値またはオブジェクト。詳細については、&lt;a href=&quot;../service/%24http#caching.html&quot;&gt; $ httpキャッシュ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="26448d453ee4f5fa77860aaf5e8d2a0a8c02f8a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.common&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.common&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a19d9dca2d591347552c0f80f4943484d1fc595" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.patch&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.patch&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01250ad1bd780612d6896e760534ed4963daca0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.post&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.post&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3572907c9434da9a2cbd4aa1d71c3bcb51cc0c1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.put&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.put&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cecf31eef476a01c594653984af1546d95027cac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers&lt;/code&gt;&lt;/strong&gt; - {Object} - Default headers for all $http requests. Refer to &lt;a href=&quot;../service/%24http#setting-http-headers.html&quot;&gt;$http&lt;/a&gt; for documentation on setting default headers.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.headers&lt;/code&gt; -&lt;/strong&gt; {Object}-すべての$ httpリクエストのデフォルトヘッダー。デフォルトのヘッダーの設定に関するドキュメントについては、&lt;a href=&quot;../service/%24http#setting-http-headers.html&quot;&gt; $ http&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fc36634214d9ac2415c40c2549f7de1cb60e3feb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.jsonpCallbackParam&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - the name of the query parameter that passes the name of the callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the &lt;a href=&quot;../service/%24jsonpcallbacks&quot;&gt;&lt;code&gt;$jsonpCallbacks&lt;/code&gt;&lt;/a&gt; service. Defaults to &lt;code&gt;'callback'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.jsonpCallbackParam&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - JSONP要求にコールバックの名前を渡すクエリパラメータの名前。このパラメーターの値は、&lt;a href=&quot;../service/%24jsonpcallbacks&quot;&gt; &lt;code&gt;$jsonpCallbacks&lt;/code&gt; &lt;/a&gt;サービスによって生成された式に置き換えられます。デフォルトは &lt;code&gt;'callback'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1a58794246bb5fa501c3b1836a60304b9cf9bb59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.paramSerializer&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; - A function used to the prepare string representation of request parameters (specified as an object). If specified as string, it is interpreted as a function registered with the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Defaults to &lt;a href=&quot;../service/%24httpparamserializer&quot;&gt;$httpParamSerializer&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.paramSerializer&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; - （オブジェクトとして指定された）要求パラメータの文字列表現を調製するために使用される機能。文字列として指定すると、&lt;a href=&quot;../../auto/service/%24injector&quot;&gt; $ injectorで&lt;/a&gt;登録された関数として解釈されます。デフォルトは&lt;a href=&quot;../service/%24httpparamserializer&quot;&gt; $ httpParamSerializer&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="042a55b56f1a54d0925ee17b60cfc038408dcdb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.transformRequest&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter)&amp;gt;|function(data, headersGetter)}&lt;/code&gt; - An array of functions (or a single function) which are applied to the request data. By default, this is an array with one request transformation function:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.transformRequest&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter)&amp;gt;|function(data, headersGetter)}&lt;/code&gt; 要求データに適用される関数の配列（または単一の機能） - 。デフォルトでは、これは1つの要求変換関数を持つ配列です。</target>
        </trans-unit>
        <trans-unit id="be710c6b3bfc678c19bcab77b8a8b2eef9e9b20a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.transformResponse&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter, status)&amp;gt;|function(data, headersGetter, status)}&lt;/code&gt; - An array of functions (or a single function) which are applied to the response data. By default, this is an array which applies one response transformation function that does two things:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.transformResponse&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter, status)&amp;gt;|function(data, headersGetter, status)}&lt;/code&gt; 応答データに適用される関数の配列（または単一の機能） - 。デフォルトでは、これは2つのことを行う1つの応答変換関数を適用する配列です。</target>
        </trans-unit>
        <trans-unit id="4261b76b3fa76174bbb5b55b8872a690a00997de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.xsrfCookieName&lt;/code&gt;&lt;/strong&gt; - {string} - Name of cookie containing the XSRF token. Defaults value is &lt;code&gt;'XSRF-TOKEN'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.xsrfCookieName&lt;/code&gt; -&lt;/strong&gt; {string}-XSRFトークンを含むCookieの名前。デフォルト値は &lt;code&gt;'XSRF-TOKEN'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d8167ea5cadbe074374e2a50533eb74dc4f94fc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.xsrfHeaderName&lt;/code&gt;&lt;/strong&gt; - {string} - Name of HTTP header to populate with the XSRF token. Defaults value is &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.xsrfHeaderName&lt;/code&gt; -&lt;/strong&gt; {string}-XSRFトークンを入力するHTTPヘッダーの名前。デフォルト値は &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b93d026301ec002f48aa1ac86163db37461abe45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;false&lt;/code&gt; (default):&lt;/strong&gt; No scope will be created for the directive. The directive will use its parent's scope.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;false&lt;/code&gt; （デフォルト）：&lt;/strong&gt;ディレクティブのスコープは作成されません。ディレクティブはその親のスコープを使用します。</target>
        </trans-unit>
        <trans-unit id="5e9b13e113acd277b44549b14aae31153cec5b74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;hasBody&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, then the request will have a body. If not specified, then only POST, PUT and PATCH requests will have a body. *</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;hasBody&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; trueの場合、リクエストには本文が含まれます。指定しない場合、POST、PUT、およびPATCHリクエストのみが本文を持ちます。 *</target>
        </trans-unit>
        <trans-unit id="d734241778e6e421ce70dbb15f7c7edc8059d04e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;interceptor&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object=}&lt;/code&gt; &amp;ndash; The interceptor object has four optional methods - &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;requestError&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt;, and &lt;code&gt;responseError&lt;/code&gt;. See &lt;a href=&quot;../../ng/service/%24http#interceptors.html&quot;&gt;$http interceptors&lt;/a&gt; for details. Note that &lt;code&gt;request&lt;/code&gt;/&lt;code&gt;requestError&lt;/code&gt; interceptors are applied before calling &lt;code&gt;$http&lt;/code&gt;, thus before any global &lt;code&gt;$http&lt;/code&gt; interceptors. Also, rejecting or throwing an error inside the &lt;code&gt;request&lt;/code&gt; interceptor will result in calling the &lt;code&gt;responseError&lt;/code&gt; interceptor. The resource instance or collection is available on the &lt;code&gt;resource&lt;/code&gt; property of the &lt;code&gt;http response&lt;/code&gt; object passed to &lt;code&gt;response&lt;/code&gt;/&lt;code&gt;responseError&lt;/code&gt; interceptors. Keep in mind that the associated promise will be resolved with the value returned by the response interceptors. Make sure you return an appropriate value and not the &lt;code&gt;response&lt;/code&gt; object passed as input. For reference, the default &lt;code&gt;response&lt;/code&gt; interceptor (which gets applied if you don't specify a custom one) returns &lt;code&gt;response.resource&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;interceptor&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object=}&lt;/code&gt; &amp;ndash; interceptorオブジェクトには、 &lt;code&gt;request&lt;/code&gt; 、 &lt;code&gt;requestError&lt;/code&gt; 、 &lt;code&gt;response&lt;/code&gt; 、および &lt;code&gt;responseError&lt;/code&gt; の 4つのオプションメソッドがあります。詳細については、&lt;a href=&quot;../../ng/service/%24http#interceptors.html&quot;&gt; $ httpインターセプター&lt;/a&gt;を参照してください。 &lt;code&gt;request&lt;/code&gt; / &lt;code&gt;requestError&lt;/code&gt; インターセプターは、 &lt;code&gt;$http&lt;/code&gt; 呼び出す前に、つまりグローバル &lt;code&gt;$http&lt;/code&gt; インターセプターの前に適用されることに注意してください。また、 &lt;code&gt;request&lt;/code&gt; インターセプター内でエラーを拒否またはスローすると、 &lt;code&gt;responseError&lt;/code&gt; インターセプターが呼び出されます。リソースインスタンスまたはコレクションが利用可能である &lt;code&gt;resource&lt;/code&gt; のプロパティ &lt;code&gt;http response&lt;/code&gt; &lt;code&gt;response&lt;/code&gt; / &lt;code&gt;responseError&lt;/code&gt; インターセプターに渡されるhttp応答オブジェクト。関連するpromiseは、レスポンスインターセプターから返される値で解決されることに注意してください。入力として渡された &lt;code&gt;response&lt;/code&gt; オブジェクトではなく、適切な値を返すようにしてください。参考までに、デフォルトの &lt;code&gt;response&lt;/code&gt; インターセプター（カスタムインターセプターを指定しない場合に適用されます）は、 &lt;code&gt;response.resource&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e08864f200d427bae3213d382a4ee126b33b73be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isArray&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {boolean=} &amp;ndash; If true then the returned object for this action is an array, see &lt;code&gt;returns&lt;/code&gt; section.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;isArray&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {boolean =} &amp;ndash; trueの場合、このアクションで返されるオブジェクトは配列です。 &lt;code&gt;returns&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c72d3596d9a1d4896c0d5cb60a5cd09bf5574ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;method&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {string} &amp;ndash; Case insensitive HTTP method (e.g. &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;JSONP&lt;/code&gt;, etc).</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;method&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {string} &amp;ndash;大文字と小文字を区別しないHTTPメソッド（例： &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt; 、 &lt;code&gt;JSONP&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="aae376e10a8f77b6721b4bc1bf0c98819c82c0b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;params&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {Object=} &amp;ndash; Optional set of pre-bound parameters for this action. If any of the parameter value is a function, it will be called every time when a param value needs to be obtained for a request (unless the param was overridden). The function will be passed the current data value as an argument.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;params&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {Object =} &amp;ndash;このアクションの事前バインドされたパラメーターのオプションセット。パラメータ値のいずれかが関数である場合、（paramがオーバーライドされない限り）リクエストのparam値を取得する必要があるたびに呼び出されます。関数には、現在のデータ値が引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="e667830ad1b6b97bb07009b7b43101e62855c36c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType&quot;&gt;XMLHttpRequest.responseType&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;responseType&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType&quot;&gt; XMLHttpRequest.responseTypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a6f8bfd7bb40362c4448b97ea0540c59bda61b34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;stripTrailingSlashes&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash; If true then the trailing slashes from any calculated URL will be stripped. (Defaults to true.)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;stripTrailingSlashes&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash; trueの場合、計算されたURLの末尾のスラッシュが削除されます。（デフォルトはtrueです。）</target>
        </trans-unit>
        <trans-unit id="ee12f09df154c39b895e5f3233f8d96b41eb95d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; Timeout in milliseconds.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;timeout&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;ミリ秒単位のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="8860939df6552cef90fec239ad04c99010175f84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;transformRequest&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash; Transform function or an array of such functions. The transform function takes the http request body and headers and returns its transformed (typically serialized) version. By default, transformRequest will contain one function that checks if the request data is an object and serializes it using &lt;code&gt;angular.toJson&lt;/code&gt;. To prevent this behavior, set &lt;code&gt;transformRequest&lt;/code&gt; to an empty array: &lt;code&gt;transformRequest: []&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;transformRequest&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash;変換関数またはそのような関数の配列。変換関数は、httpリクエストの本文とヘッダーを受け取り、変換された（通常はシリアル化された）バージョンを返します。デフォルトでは、transformRequestには、要求データがオブジェクトであるかどうかをチェックし、 &lt;code&gt;angular.toJson&lt;/code&gt; を使用してそれをシリアル化する1つの関数が含まれます。この動作を防ぐには、 &lt;code&gt;transformRequest&lt;/code&gt; を空の配列に設定します： &lt;code&gt;transformRequest: []&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4b07be3a2acec82f0b9a59f65ad187c54cc4a40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;transformResponse&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash; Transform function or an array of such functions. The transform function takes the HTTP response body, headers and status and returns its transformed (typically deserialized) version. By default, transformResponse will contain one function that checks if the response looks like a JSON string and deserializes it using &lt;code&gt;angular.fromJson&lt;/code&gt;. To prevent this behavior, set &lt;code&gt;transformResponse&lt;/code&gt; to an empty array: &lt;code&gt;transformResponse: []&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;transformResponse&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash;変換関数またはそのような関数の配列。変換関数は、HTTP応答の本文、ヘッダー、およびステータスを取り、変換された（通常は逆シリアル化された）バージョンを返します。デフォルトでは、transformResponseには、応答がJSON文字列のように見えるかどうかをチェックし、 &lt;code&gt;angular.fromJson&lt;/code&gt; を使用してそれを逆シリアル化する1つの関数が含まれます。この動作を防ぐには、 &lt;code&gt;transformResponse&lt;/code&gt; を空の配列に設定します &lt;code&gt;transformResponse: []&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a0fb5bc58db9aba768f380cd413475c058f2676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;true&lt;/code&gt;:&lt;/strong&gt; A new child scope that prototypically inherits from its parent will be created for the directive's element. If multiple directives on the same element request a new scope, only one new scope is created.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;true&lt;/code&gt; ：&lt;/strong&gt;親からプロトタイプ的に継承する新しい子スコープがディレクティブの要素に対して作成されます。同じ要素の複数のディレクティブが新しい​​スコープを要求する場合、1つの新しいスコープのみが作成されます。</target>
        </trans-unit>
        <trans-unit id="f954c335fa1c88b9e6f54185f3e45307c2692170" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;url&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {string} &amp;ndash; Action specific &lt;code&gt;url&lt;/code&gt; override. The url templating is supported just like for the resource-level urls.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;url&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {string} &amp;ndash;アクション固有の &lt;code&gt;url&lt;/code&gt; オーバーライド。URLテンプレートは、リソースレベルのURLと同様にサポートされます。</target>
        </trans-unit>
        <trans-unit id="8282452aa2df4d7986a97ad42ae713ded09cdf66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;withCredentials&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Whether to set the &lt;code&gt;withCredentials&lt;/code&gt; flag on the XHR object. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials&quot;&gt;XMLHttpRequest.withCredentials&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;withCredentials&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;XHRオブジェクトに &lt;code&gt;withCredentials&lt;/code&gt; フラグを設定するかどうか。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials&quot;&gt; XMLHttpRequest.withCredentials&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5534420a1f0d70bfdf49536229b84023ea80de7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;{...}&lt;/code&gt; (an object hash):&lt;/strong&gt; - map elements of the content onto transclusion &quot;slots&quot; in the template.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;{...}&lt;/code&gt; （オブジェクトハッシュ）：&lt;/strong&gt; -コンテンツの要素をテンプレートのトランスクルージョン「スロット」にマッピングします。</target>
        </trans-unit>
        <trans-unit id="71dd11f48572c56893f6273d285f51870813fbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;{...}&lt;/code&gt; (an object hash):&lt;/strong&gt; A new &quot;isolate&quot; scope is created for the directive's template. The 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent scope. This is useful when creating reusable components, which should not accidentally read or modify data in the parent scope. Note that an isolate scope directive without a &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; will not apply the isolate scope to its children elements.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;{...}&lt;/code&gt; （オブジェクトハッシュ）：&lt;/strong&gt;ディレクティブのテンプレートに新しい「分離」スコープが作成されます。「分離」スコープは、親スコープからプロトタイプ的に継承しないという点で通常のスコープとは異なります。これは、親スコープのデータを誤って読み取ったり変更したりしない再利用可能なコンポーネントを作成するときに役立ちます。 &lt;code&gt;template&lt;/code&gt; または &lt;code&gt;templateUrl&lt;/code&gt; なしの分離スコープディレクティブは、分離スコープをその子要素に適用しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="55716f0cf97f955d54001576e8203120c29a8dd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Accessibility:&lt;/strong&gt;&lt;a href=&quot;guide/accessibility&quot;&gt;ngAria&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Accessibility:&lt;/strong&gt;&lt;a href=&quot;guide/accessibility&quot;&gt;ngAria&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32d5678c93da3911d14629087f800c16a9214e81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advanced Routing:&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UI-Router&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;高度なルーティング：&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UIルーター&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ec468f4ccb9634ebf835fc9cc003046af4d82e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An application is a tree of components:&lt;/strong&gt; Ideally, the whole application should be a tree of components that implement clearly defined inputs and outputs, and minimize two-way data binding. That way, it's easier to predict when data changes and what the state of a component is.</source>
          <target state="translated">&lt;strong&gt;アプリケーションはコンポーネントのツリーです。&lt;/strong&gt;理想的には、アプリケーション全体が、明確に定義された入力と出力を実装し、双方向のデータバインディングを最小限に抑えるコンポーネントのツリーである必要があります。そうすることで、データがいつ変更され、コンポーネントの状態がどうなるかを簡単に予測できます。</target>
        </trans-unit>
        <trans-unit id="fc3cbfeb9923528544cefb117bda81db350ba626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Analytics and Logging:&lt;/strong&gt;&lt;a href=&quot;http://ngmodules.org/modules/angularytics&quot;&gt;Angularytics (Google Analytics)&lt;/a&gt;, &lt;a href=&quot;https://github.com/luisfarzati/angulartics&quot;&gt;Angulartics (Analytics)&lt;/a&gt;, &lt;a href=&quot;http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm&quot;&gt;Logging Client-Side Errors&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;分析とロギング：&lt;/strong&gt;&lt;a href=&quot;http://ngmodules.org/modules/angularytics&quot;&gt;Angularytics（Google Analytics）&lt;/a&gt;、&lt;a href=&quot;https://github.com/luisfarzati/angulartics&quot;&gt;Angulartics（Analytics）&lt;/a&gt;、&lt;a href=&quot;http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm&quot;&gt;ロギングクライアント側エラー&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4f6be7f6dde452ce0886e715bc87ec6823e4a1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Animation:&lt;/strong&gt;&lt;a href=&quot;guide/animations&quot;&gt;Core concepts&lt;/a&gt;, &lt;a href=&quot;api/nganimate&quot;&gt;ngAnimate API&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;アニメーション：&lt;/strong&gt;&lt;a href=&quot;guide/animations&quot;&gt;コアコンセプト&lt;/a&gt;、&lt;a href=&quot;api/nganimate&quot;&gt;ngAnimate API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="278a6aea40fd074492b2bd66393c9b7aa694664a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Announcing changes&lt;/strong&gt;: When filtering or other UI messaging happens away from the user's focus, notify with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions&quot;&gt;ARIA Live Regions&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;変更の発表&lt;/strong&gt;：フィルタリングやその他のUIメッセージングがユーザーの焦点から外れた場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions&quot;&gt;ARIA Live Regions&lt;/a&gt;で通知します。</target>
        </trans-unit>
        <trans-unit id="4f18c14e214158a783463e0a863bdd40977505c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;App wiring:&lt;/strong&gt;&lt;a href=&quot;guide/di&quot;&gt;Dependency injection&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;アプリの配線：&lt;/strong&gt;&lt;a href=&quot;guide/di&quot;&gt;依存性注入&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fb419a1909e8e3b534b459c7f7480b57df90a1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attackers with local access can retrieve sensitive data from this cache even when users are not authenticated.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ローカルアクセスを持つ攻撃者は、ユーザーが認証されていない場合でも、このキャッシュから機密データを取得できます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0404b26fa72f75ae0a463aa6f030e67901db44fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Authentication/Login: &lt;/strong&gt;&lt;a href=&quot;https://developers.google.com/+/photohunt/python&quot;&gt;Google example&lt;/a&gt;, &lt;a href=&quot;https://github.com/pc035860/angular-easyfb&quot;&gt;AngularJS Facebook library&lt;/a&gt;, &lt;a href=&quot;http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app&quot;&gt;Facebook example&lt;/a&gt;, &lt;a href=&quot;http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app&quot;&gt;authentication strategy&lt;/a&gt;, &lt;a href=&quot;http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/&quot;&gt;unix-style authorization&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;認証/ログイン：&lt;/strong&gt;&lt;a href=&quot;https://developers.google.com/+/photohunt/python&quot;&gt;Googleの例&lt;/a&gt;、&lt;a href=&quot;https://github.com/pc035860/angular-easyfb&quot;&gt;AngularJS Facebookライブラリ&lt;/a&gt;、&lt;a href=&quot;http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app&quot;&gt;Facebookの例&lt;/a&gt;、&lt;a href=&quot;http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app&quot;&gt;認証戦略&lt;/a&gt;、&lt;a href=&quot;http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/&quot;&gt;UNIXスタイルの承認&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cb41941bf9973471001e39b14773894e1600d9ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Authentication:&lt;/strong&gt;&lt;a href=&quot;https://github.com/witoldsz/angular-http-auth&quot;&gt;Http Auth Interceptor&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;認証：&lt;/strong&gt;&lt;a href=&quot;https://github.com/witoldsz/angular-http-auth&quot;&gt;Http Auth Interceptor&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3613cfafa439088ac45f401ceea5a3a7878004c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Be aware that marking untrusted data as safe via calls to &lt;a href=&quot;../api/ng/service/%24sce#trustAsHtml.html&quot;&gt;&lt;code&gt;$sce.trustAsHtml&lt;/code&gt;&lt;/a&gt;, etc is dangerous and will lead to Cross Site Scripting exploits.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;../api/ng/service/%24sce#trustAsHtml.html&quot;&gt; &lt;code&gt;$sce.trustAsHtml&lt;/code&gt; &lt;/a&gt;などへの呼び出しを介して信頼できないデータを安全であるとマークすることは危険であり、クロスサイトスクリプティングの悪用につながることに注意してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d1565baa0d8c0800213288fd11e963f8abddc9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Any operation which can be shared among the instance of directives should be moved to the compile function for performance reasons.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;ディレクティブのインスタンス間で共有できる操作は、パフォーマンス上の理由からコンパイル関数に移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="154a0af44d6ebb41a4e868d63cdb4d863d1d5ad4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Comment directives were commonly used in places where the DOM API limits the ability to create directives that spanned multiple elements (e.g. inside &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements). AngularJS 1.2 introduces &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat-start&lt;/code&gt; and &lt;code&gt;ng-repeat-end&lt;/code&gt;&lt;/a&gt; as a better solution to this problem. Developers are encouraged to use this over custom comment directives when possible.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;コメントディレクティブは、DOM APIが複数の要素（ &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 要素内など）にまたがるディレクティブを作成する機能を制限する場所で一般的に使用されていました。AngularJS 1.2では、この問題のより良い解決策として&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat-start&lt;/code&gt; と &lt;code&gt;ng-repeat-end&lt;/code&gt; が&lt;/a&gt;導入されています。開発者は、可能であれば、カスタムコメントディレクティブよりもこれを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="eec82de673765c49099d465321288990084a66d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Directives should clean up after themselves. You can use &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt; or &lt;code&gt;scope.$on('$destroy', ...)&lt;/code&gt; to run a clean-up function when the directive is removed.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;ディレクティブは自分自身でクリーンアップする必要があります。あなたは使用することができます &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt; または &lt;code&gt;scope.$on('$destroy', ...)&lt;/code&gt; ディレクティブが除去された場合、クリーンアップ機能を実行します。</target>
        </trans-unit>
        <trans-unit id="e208258b909cdfe75b3c3165f6e087ea396480bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; If you are working with objects that have a unique identifier property, you should track by this identifier instead of the object instance, e.g. &lt;code&gt;item in items track by item.id&lt;/code&gt;. Should you reload your data later, &lt;code&gt;ngRepeat&lt;/code&gt; will not have to rebuild the DOM elements for items it has already rendered, even if the JavaScript objects in the collection have been substituted for new ones. For large collections, this significantly improves rendering performance.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;一意の識別子プロパティを持つオブジェクトを使用している場合は、オブジェクトインスタンスではなくこの識別子で追跡する必要があります。たとえば、 &lt;code&gt;item in items track by item.id&lt;/code&gt; 。後でデータを再 &lt;code&gt;ngRepeat&lt;/code&gt; する場合、ngRepeatは、コレクション内のJavaScriptオブジェクトが新しいものに置き換えられていても、すでにレンダリングされたアイテムのDOM要素を再構築する必要はありません。大きなコレクションの場合、これによりレンダリングのパフォーマンスが大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="b23c4bfb3b2b379e51d133233ee4beb35c63fb4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; If your app will be used only in one locale, it is fine to rely on the default currency symbol. If you anticipate that viewers in other locales might use your app, you should explicitly provide a currency symbol.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;アプリが1つのロケールでのみ使用される場合は、デフォルトの通貨記号を使用しても問題ありません。他のロケールのビューアがアプリを使用する可能性がある場合は、通貨記号を明示的に提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="eaa374cd5f757d0f8bdee6a83204e711ef11c463" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; In order to avoid collisions with some future standard, it's best to prefix your own directive names. For instance, if you created a &lt;code&gt;&amp;lt;carousel&amp;gt;&lt;/code&gt; directive, it would be problematic if HTML7 introduced the same element. A two or three letter prefix (e.g. &lt;code&gt;btfCarousel&lt;/code&gt;) works well. Similarly, do not prefix your own directives with &lt;code&gt;ng&lt;/code&gt; or they might conflict with directives included in a future version of AngularJS.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;将来の標準との衝突を回避するために、独自のディレクティブ名にプレフィックスを付けることをお勧めします。たとえば、 &lt;code&gt;&amp;lt;carousel&amp;gt;&lt;/code&gt; ディレクティブを作成した場合、HTML7が同じ要素を導入すると問題が発生します。2文字または3文字の接頭辞（例： &lt;code&gt;btfCarousel&lt;/code&gt; ）が適切に機能します。同様に、独自のディレクティブの先頭に &lt;code&gt;ng&lt;/code&gt; を付けないでください。ngularJSの将来のバージョンに含まれるディレクティブと競合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e91a547aa7a90f5913cc0361874deea48265913c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; It's best to keep getters fast because AngularJS is likely to call them more frequently than other parts of your code.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt; AngularJSはコードの他の部分よりも頻繁にゲッターを呼び出す可能性が高いため、ゲッターを高速に保つことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="562ae68aa5a7c95fda85899cccdcbaf4ca298e2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; It's recommended to use the &quot;directive definition object&quot; form.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;「ディレクティブ定義オブジェクト」フォームを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7a47336f4b17a025f5af5052c3624880d8987c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Keep the filtering function as lean as possible, because it will be called for each DOM action (e.g. insertion, removal, class change) performed by &quot;animation-aware&quot; directives. See &lt;a href=&quot;../../../guide/animations#which-directives-support-animations-.html&quot;&gt;here&lt;/a&gt; for a list of built-in directives that support animations. Performing computationally expensive or time-consuming operations on each call of the filtering function can make your animations sluggish.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;「アニメーション対応」ディレクティブによって実行されるDOMアクション（挿入、削除、クラスの変更など）ごとに呼び出されるため、フィルタリング機能は可能な限り無駄のないようにしてください。アニメーションをサポートする組み込みディレクティブのリストについては、&lt;a href=&quot;../../../guide/animations#which-directives-support-animations-.html&quot;&gt;こちら&lt;/a&gt;をご覧ください。フィルタリング関数の呼び出しごとに、計算量の多い操作または時間のかかる操作を実行すると、アニメーションが遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="42b89654abdc85c287788fb956a5415b67b03df9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Keep the filtering function as lean as possible, because it will be called for each DOM action (e.g. insertion, removal, class change) performed by &quot;animation-aware&quot; directives. See &lt;a href=&quot;animations#which-directives-support-animations-.html&quot;&gt;here&lt;/a&gt; for a list of built-in directives that support animations. Performing computationally expensive or time-consuming operations on each call of the filtering function can make your animations sluggish.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;「アニメーション対応」ディレクティブによって実行されるDOMアクション（挿入、削除、クラスの変更など）ごとに呼び出されるため、フィルタリング機能は可能な限り無駄のないようにしてください。アニメーションをサポートする組み込みディレクティブのリストについては、&lt;a href=&quot;animations#which-directives-support-animations-.html&quot;&gt;こちら&lt;/a&gt;をご覧ください。フィルタリング関数の呼び出しごとに、計算量の多い操作または時間のかかる操作を実行すると、アニメーションが遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b204a0bc6447763a2a9eed14261cd6cb3e7bbf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Prefer using directives via tag name and attributes over comment and class names. Doing so generally makes it easier to determine what directives a given element matches.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;コメントやクラス名よりも、タグ名と属性を介してディレクティブを使用することをお勧めします。そうすることで、特定の要素がどのディレクティブに一致するかを簡単に判断できるようになります。</target>
        </trans-unit>
        <trans-unit id="ea37a8ba38693a6357c550cc3e8fed26616432d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Prefer using the dash-delimited format (e.g. &lt;code&gt;ng-bind&lt;/code&gt; for &lt;code&gt;ngBind&lt;/code&gt;). If you want to use an HTML validating tool, you can instead use the &lt;code&gt;data&lt;/code&gt;-prefixed version (e.g. &lt;code&gt;data-ng-bind&lt;/code&gt; for &lt;code&gt;ngBind&lt;/code&gt;). The other forms shown above are accepted for legacy reasons but we advise you to avoid them.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;ダッシュ区切り形式を使用 &lt;code&gt;ng-bind&lt;/code&gt; をお &lt;code&gt;ngBind&lt;/code&gt; ます（例：ngBindのng-bind）。あなたがHTMLの検証ツールを使用したい場合は、代わりに使用することができ &lt;code&gt;data&lt;/code&gt; -prefixedバージョン（例えば &lt;code&gt;data-ng-bind&lt;/code&gt; 用 &lt;code&gt;ngBind&lt;/code&gt; を）。上記の他の形式は、従来の理由で受け入れられますが、それらを避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1082802fce10851c5a44b53099be49c1bff97de3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Unless your template is very small, it's typically better to break it apart into its own HTML file and load it with the &lt;code&gt;templateUrl&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;テンプレートが非常に小さい場合を除き、通常は &lt;code&gt;templateUrl&lt;/code&gt; 独自のHTMLファイルに分割し、templateUrlオプションを使用してロードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0a61c999a12dbbaaf9b15f01f05db8b33b1207d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Use the &lt;code&gt;scope&lt;/code&gt; option to create isolate scopes when making components that you want to reuse throughout your app.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;アプリ全体で再利用するコンポーネントを作成するときは、 &lt;code&gt;scope&lt;/code&gt; オプションを使用して分離スコープを作成します。</target>
        </trans-unit>
        <trans-unit id="cf3ab3a718158f6dc5f57a13fa63897bb4d9a05c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; name the factory functions as &lt;code&gt;&amp;lt;serviceId&amp;gt;Factory&lt;/code&gt; (e.g., apiTokenFactory). While this naming convention is not required, it helps when navigating the codebase or looking at stack traces in the debugger.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;ファクトリ関数の名前を &lt;code&gt;&amp;lt;serviceId&amp;gt;Factory&lt;/code&gt; （たとえば、apiTokenFactory）にします。この命名規則は必須ではありませんが、コードベースをナビゲートしたり、デバッガーでスタックトレースを確認したりするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="fd01d844b7cc208ec811e4a8e61f854e64737953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; only use &lt;code&gt;transclude: true&lt;/code&gt; when you want to create a directive that wraps arbitrary content.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;任意のコンテンツをラップするディレクティブを作成する場合にのみ、 &lt;code&gt;transclude: true&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="7dedb89ac35c7defeb1581c33c4fe4fc5e767eb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; use &lt;code&gt;&amp;amp;attr&lt;/code&gt; in the &lt;code&gt;scope&lt;/code&gt; option when you want your directive to expose an API for binding to behaviors.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt;ディレクティブで動作にバインドするためのAPIを公開する場合は、 &lt;code&gt;scope&lt;/code&gt; オプションで &lt;code&gt;&amp;amp;attr&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="494ca317afa0a1c099d1ccb6267751ae377ac8af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; use &lt;code&gt;controller&lt;/code&gt; when you want to expose an API to other directives. Otherwise use &lt;code&gt;link&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス：&lt;/strong&gt; APIを他のディレクティブに公開する場合は、 &lt;code&gt;controller&lt;/code&gt; 使用します。それ以外の場合は &lt;code&gt;link&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="afc296414277849789c9310271d222c899f7860a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice&lt;/strong&gt;: Always provide a &lt;code&gt;cloneFn&lt;/code&gt; (clone attach function) when you call a transclude function since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス&lt;/strong&gt;：元のDOMの新しいクローンを取得し、新しいトランスクルージョンスコープにもアクセスできるため、 &lt;code&gt;cloneFn&lt;/code&gt; 関数を呼び出すときは常にcloneFn（クローンアタッチ関数）を提供します。</target>
        </trans-unit>
        <trans-unit id="539e490e5b11ba68c8d7a1e07354c117dea53cef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice&lt;/strong&gt;: if you intend to add and remove transcluded content manually in your directive (by calling the transclude function to get the DOM and calling &lt;code&gt;element.remove()&lt;/code&gt; to remove it), then you are also responsible for calling &lt;code&gt;$destroy&lt;/code&gt; on the transclusion scope.</source>
          <target state="translated">&lt;strong&gt;ベストプラクティス&lt;/strong&gt;：トランスクルードされたコンテンツをディレクティブで手動で追加および削除する場合（transclude関数を呼び出してDOMを取得し、 &lt;code&gt;element.remove()&lt;/code&gt; を呼び出して削除する）、トランスクルージョンで &lt;code&gt;$destroy&lt;/code&gt; を呼び出す必要があります。範囲。</target>
        </trans-unit>
        <trans-unit id="bb5ccbde708321e45669e8a636a6ff900cf5b928" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bootstrap:&lt;/strong&gt;&lt;a href=&quot;guide/bootstrap&quot;&gt;Bootstrapping an app&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ブートストラップ：&lt;/strong&gt;&lt;a href=&quot;guide/bootstrap&quot;&gt;アプリのブートストラップ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab44cfa01ef866a58f7f9728eb8d0893aec0fc94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Careful:&lt;/strong&gt; If you plan to &lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_(programming)&quot;&gt;minify&lt;/a&gt; your code, your service names will get renamed and break your app.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;コードを&lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_(programming)&quot;&gt;縮小&lt;/a&gt;する場合は、サービス名が変更され、アプリが破損します。</target>
        </trans-unit>
        <trans-unit id="f4209bb60ea5373eb3dc30ff3ef1108bccb09e22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Careful:&lt;/strong&gt; If you plan to &lt;a href=&quot;https://en.wikipedia.org/wiki/Minification_(programming)&quot;&gt;minify&lt;/a&gt; your code, your service names will get renamed and break your app.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;コードを&lt;a href=&quot;https://en.wikipedia.org/wiki/Minification_(programming)&quot;&gt;縮小&lt;/a&gt;する場合は、サービス名の名前が変更され、アプリが破損します。</target>
        </trans-unit>
        <trans-unit id="56179cbf2aff90b5b65d0a399af34f3432b2cd0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Color contrast and scale&lt;/strong&gt;: Make sure content is legible and interactive controls are usable at all screen sizes. Consider configurable UI themes for people with color blindness, low vision or other visual impairments.</source>
          <target state="translated">&lt;strong&gt;色のコントラストとスケール&lt;/strong&gt;：コンテンツが読みやすく、インタラクティブなコントロールがすべての画面サイズで使用できることを確認します。色覚異常、視力障害、またはその他の視覚障害を持つ人々のために構成可能なUIテーマを検討してください。</target>
        </trans-unit>
        <trans-unit id="ac547823d94131b4d29fe5107223764e7946bf5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Communicating with servers:&lt;/strong&gt;&lt;a href=&quot;api/ng/service/%24http&quot;&gt;$http&lt;/a&gt;, &lt;a href=&quot;api/ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;サーバーとの通信：&lt;/strong&gt;&lt;a href=&quot;api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt;、&lt;a href=&quot;api/ngresource/service/%24resource&quot;&gt;$ resource&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33029029bed4b443c712a3a281f8467c8da8dfc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compile:&lt;/strong&gt; traverse the DOM and collect all of the directives. The result is a linking function.</source>
          <target state="translated">&lt;strong&gt;コンパイル：&lt;/strong&gt; DOMをトラバースし、すべてのディレクティブを収集します。結果はリンク関数です。</target>
        </trans-unit>
        <trans-unit id="0c95db3b1f38a8001b8fcd9ace33e6cdea0243f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components have a well-defined lifecycle:&lt;/strong&gt; Each component can implement &quot;lifecycle hooks&quot;. These are methods that will be called at certain points in the life of the component. The following hook methods can be implemented:</source>
          <target state="translated">&lt;strong&gt;コンポーネントには明確に定義されたライフサイクルがあります。&lt;/strong&gt;各コンポーネントは「ライフサイクルフック」を実装できます。これらは、コンポーネントの有効期間の特定の時点で呼び出されるメソッドです。次のフックメソッドを実装できます。</target>
        </trans-unit>
        <trans-unit id="dc33ce1740fb347751434152e84b19712b1a8f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components have a well-defined public API - Inputs and Outputs:&lt;/strong&gt; However, scope isolation only goes so far, because AngularJS uses two-way binding. So if you pass an object to a component like this - &lt;code&gt;bindings: {item: '='}&lt;/code&gt;, and modify one of its properties, the change will be reflected in the parent component. For components however, only the component that owns the data should modify it, to make it easy to reason about what data is changed, and when. For that reason, components should follow a few simple conventions:</source>
          <target state="translated">&lt;strong&gt;コンポーネントには、明確に定義されたパブリックAPI（入力と出力）があります。&lt;/strong&gt;ただし、AngularJSは双方向バインディングを使用するため、スコープの分離はこれまでのところしか行われません。したがって、次のようにオブジェクトをコンポーネントに渡した場合 &lt;code&gt;bindings: {item: '='}&lt;/code&gt; 、そのプロパティの1つを変更すると、変更は親コンポーネントに反映されます。ただし、コンポーネントの場合は、データを所有するコンポーネントのみがそれを変更して、どのデータがいつ変更されるかを簡単に判断できるようにする必要があります。そのため、コンポーネントはいくつかの単純な規則に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="fdbc3c0b82f0fdd2e38b13e622456e7527414d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components only control their own View and Data:&lt;/strong&gt; Components should never modify any data or DOM that is out of their own scope. Normally, in AngularJS it is possible to modify data anywhere in the application through scope inheritance and watches. This is practical, but can also lead to problems when it is not clear which part of the application is responsible for modifying the data. That is why component directives use an isolate scope, so a whole class of scope manipulation is not possible.</source>
          <target state="translated">&lt;strong&gt;コンポーネントは独自のビューとデータのみを制御します。&lt;/strong&gt;コンポーネントは、独自のスコープ外のデータやDOMを変更してはなりません。通常、AngularJSでは、スコープの継承と監視により、アプリケーションの任意の場所でデータを変更できます。これは実用的ですが、アプリケーションのどの部分がデータの変更を担当しているかが明確でない場合にも問題が発生する可能性があります。そのため、コンポーネントディレクティブは分離スコープを使用するため、スコープ操作のクラス全体を実行することはできません。</target>
        </trans-unit>
        <trans-unit id="ea5024441518186f1d8d19e15ff04550168838b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Context:&lt;/strong&gt; JavaScript expressions are evaluated against the global &lt;code&gt;window&lt;/code&gt;. In AngularJS, expressions are evaluated against a &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;strong&gt;コンテキスト：&lt;/strong&gt; JavaScript式はグローバル &lt;code&gt;window&lt;/code&gt; に対して評価されます。AngularJSでは、式は&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;オブジェクトに対して評価されます。</target>
        </trans-unit>
        <trans-unit id="25b9d3e57b4590062259c3449266ebe5e34703c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller Definition:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コントローラー定義：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4eb25f46c9ed2a0a0131f2096bc9e0ff89ef620" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller Test:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コントローラテスト：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d21e7e084fc25e99d1555970d47ff8a6c8ffc4a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Creation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d15196e2bb706cf7a298552f36e5aa63a4fa9578" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Custom directives to access the DOM&lt;/strong&gt;: In AngularJS, the only place where an application should access the DOM is within directives. This is important because artifacts that access the DOM are hard to test. If you need to access the DOM directly you should write a custom directive for this. The &lt;a href=&quot;directive&quot;&gt;directives guide&lt;/a&gt; explains how to do this.</source>
          <target state="translated">&lt;strong&gt;DOMにアクセスするためのカスタムディレクティブ&lt;/strong&gt;：AngularJSでは、アプリケーションがDOMにアクセスする唯一の場所はディレクティブ内です。DOMにアクセスするアーティファクトはテストが難しいため、これは重要です。DOMに直接アクセスする必要がある場合は、このためのカスタムディレクティブを作成する必要があります。&lt;a href=&quot;directive&quot;&gt;ディレクティブガイドは&lt;/a&gt;、これを行う方法について説明します。</target>
        </trans-unit>
        <trans-unit id="05f7e5084b082e3e86f79e93392adf8dab0cd628" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Handling&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;データ処理&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cdcaa96f16edae165b34c183a8af244b806db88b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debugging:&lt;/strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en&quot;&gt;Batarang&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Debugging:&lt;/strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en&quot;&gt;Batarang&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dcc6d0189a9829bde92474bed45b16ba9f9f0224" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3b88a22e2271f42fe87df0e187227576e5a9612" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.6.5)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;（1.6.5以降）</target>
        </trans-unit>
        <trans-unit id="b336024f1362b00347db2024e13812fdfef548d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.7.0)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;（1.7.0以降）</target>
        </trans-unit>
        <trans-unit id="9115d2a2f5f4763c5242dee073391a13ca26deff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.7.3)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;（1.7.3以降）</target>
        </trans-unit>
        <trans-unit id="67d38588133d020ef7537448f842ffa75477f1a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.8.1)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;（1.8.1以降）</target>
        </trans-unit>
        <trans-unit id="9962f993ae5f02cb5239548a1e42a4a3f263c7c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Django:&lt;/strong&gt;&lt;a href=&quot;http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework&quot;&gt;Tutorial&lt;/a&gt;, &lt;a href=&quot;http://django-angular.readthedocs.org/en/latest/integration.html&quot;&gt;Integrating AngularJS with Django&lt;/a&gt;, &lt;a href=&quot;http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html&quot;&gt;Getting Started with Django Rest Framework and AngularJS&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ジャンゴ：&lt;/strong&gt;&lt;a href=&quot;http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework&quot;&gt;チュートリアル&lt;/a&gt;、&lt;a href=&quot;http://django-angular.readthedocs.org/en/latest/integration.html&quot;&gt;ジャンゴとAngularJSの統合&lt;/a&gt;、&lt;a href=&quot;http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html&quot;&gt;Djangoの休憩FrameworkとAngularJS入門&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59f77700177f6c1272669fa24caa78493a84bec2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Django:&lt;/strong&gt;&lt;a href=&quot;http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework&quot;&gt;Tutorial&lt;/a&gt;, &lt;a href=&quot;https://django-angular.readthedocs.org/en/latest/integration.html&quot;&gt;Integrating AngularJS with Django&lt;/a&gt;, &lt;a href=&quot;http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html&quot;&gt;Getting Started with Django Rest Framework and AngularJS&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ジャンゴ：&lt;/strong&gt;&lt;a href=&quot;http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework&quot;&gt;チュートリアル&lt;/a&gt;、&lt;a href=&quot;https://django-angular.readthedocs.org/en/latest/integration.html&quot;&gt;ジャンゴとAngularJSの統合&lt;/a&gt;、&lt;a href=&quot;http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html&quot;&gt;Djangoの休憩FrameworkとAngularJS入門&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ea0aaeacdcb99323968249d0f4da6d418a46a63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use this property to attempt to modify the modules after the application has been bootstrapped.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アプリケーションがブートストラップされた後、このプロパティを使用してモジュールを変更しないでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35c64fc4414905e1dac355fee722a3b4f7563854" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editor support:&lt;/strong&gt;&lt;a href=&quot;http://plugins.jetbrains.com/plugin/6971&quot;&gt;Webstorm&lt;/a&gt; (and &lt;a href=&quot;http://www.youtube.com/watch?v=LJOyrSh1kDU&quot;&gt;video&lt;/a&gt;), &lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&quot;http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012&quot;&gt;Visual Studio&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular-ui/AngularJS-Atom&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://github.com/burnettk/vim-angular&quot;&gt;Vim&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;エディターのサポート：&lt;/strong&gt;&lt;a href=&quot;http://plugins.jetbrains.com/plugin/6971&quot;&gt;Webstorm&lt;/a&gt;（および&lt;a href=&quot;http://www.youtube.com/watch?v=LJOyrSh1kDU&quot;&gt;ビデオ&lt;/a&gt;）、&lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime Text&lt;/a&gt;、&lt;a href=&quot;http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012&quot;&gt;Visual Studio&lt;/a&gt;、&lt;a href=&quot;https://github.com/angular-ui/AngularJS-Atom&quot;&gt;Atom&lt;/a&gt;、&lt;a href=&quot;https://github.com/burnettk/vim-angular&quot;&gt;Vim&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53831e9d1a4486979b3c9db3602122daaf1d3c11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editor support:&lt;/strong&gt;&lt;a href=&quot;http://plugins.jetbrains.com/plugin/6971&quot;&gt;Webstorm&lt;/a&gt; (and &lt;a href=&quot;https://www.youtube.com/watch?v=LJOyrSh1kDU&quot;&gt;video&lt;/a&gt;), &lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&quot;http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012&quot;&gt;Visual Studio&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular-ui/AngularJS-Atom&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://github.com/burnettk/vim-angular&quot;&gt;Vim&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;エディターのサポート：&lt;/strong&gt;&lt;a href=&quot;http://plugins.jetbrains.com/plugin/6971&quot;&gt;Webstorm&lt;/a&gt;（および&lt;a href=&quot;https://www.youtube.com/watch?v=LJOyrSh1kDU&quot;&gt;ビデオ&lt;/a&gt;）、&lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime Text&lt;/a&gt;、&lt;a href=&quot;http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012&quot;&gt;Visual Studio&lt;/a&gt;、&lt;a href=&quot;https://github.com/angular-ui/AngularJS-Atom&quot;&gt;Atom&lt;/a&gt;、&lt;a href=&quot;https://github.com/burnettk/vim-angular&quot;&gt;Vim&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c918741e4ebe8c6f874a77e7b6b027496a491b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;End-to-End Testing:&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt;, &lt;a href=&quot;guide/e2e-testing&quot;&gt;e2e testing guide&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;エンドツーエンドのテスト：&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;分度器&lt;/a&gt;、&lt;a href=&quot;guide/e2e-testing&quot;&gt;e2eテストガイド&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5eb90a61d13dbb1be010d1d795ccea91ff166125" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;: Consider the following case.</source>
          <target state="translated">&lt;strong&gt;例&lt;/strong&gt;：次のケースを考えます。</target>
        </trans-unit>
        <trans-unit id="e6ff57a661932efb3d4a52d964964919eb790b57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exposing model to templates:&lt;/strong&gt;&lt;a href=&quot;guide/scope&quot;&gt;Scopes&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;テンプレートへのモデルの公開：&lt;/strong&gt;&lt;a href=&quot;guide/scope&quot;&gt;スコープ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="29419687192edcb313a9e8cb642fbcf74067c9e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fileupload:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Fileupload:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="728ae224a4f3f6513bbafc04078c292e46e0bd3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Filters:&lt;/strong&gt; You can use &lt;a href=&quot;filter&quot;&gt;filters&lt;/a&gt; within expressions to format data before displaying it.</source>
          <target state="translated">&lt;strong&gt;フィルター：&lt;/strong&gt;式内で&lt;a href=&quot;filter&quot;&gt;フィルター&lt;/a&gt;を使用して、データを表示する前にフォーマットできます。</target>
        </trans-unit>
        <trans-unit id="e7c1fa4b2eaf7626d1792029e5b26b13d72fcf3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FireBase:&lt;/strong&gt;&lt;a href=&quot;http://angularfire.com/&quot;&gt;AngularFire&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;Realtime Apps with AngularJS and FireBase (video)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;FireBase：&lt;/strong&gt;&lt;a href=&quot;http://angularfire.com/&quot;&gt;AngularFire&lt;/a&gt;、&lt;a href=&quot;http://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;AngularJSとFireBaseを使用したリアルタイムアプリ（ビデオ）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fd82b68d1f62fc2e9756da6c2c2cb64a89eebf03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FireBase:&lt;/strong&gt;&lt;a href=&quot;http://angularfire.com/&quot;&gt;AngularFire&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;Realtime Apps with AngularJS and FireBase (video)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;FireBase：&lt;/strong&gt;&lt;a href=&quot;http://angularfire.com/&quot;&gt;AngularFire&lt;/a&gt;、&lt;a href=&quot;https://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;AngularJSとFireBaseを備えたリアルタイムアプリ（ビデオ）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf84010d7a6b61f41ee63c802ccd44de864e5dba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Focus management&lt;/strong&gt;: Guide the user around the app as views are appended/removed. Focus should &lt;em&gt;never&lt;/em&gt; be lost, as this causes unexpected behavior and much confusion (referred to as &quot;freak-out mode&quot;).</source>
          <target state="translated">&lt;strong&gt;フォーカス管理&lt;/strong&gt;：ビューが追加/削除されると、アプリ内でユーザーをガイドします。フォーカスが失われることはあり&lt;em&gt;ませ&lt;/em&gt;ん。これにより、予期しない動作と多くの混乱が生じます（「フリークアウトモード」と呼ばれます）。</target>
        </trans-unit>
        <trans-unit id="2af7f91debc00c4d66b54ff27066486fa7fb3a61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For security purposes, it is strongly encouraged that web servers escape user-supplied data, replacing angle brackets (&amp;lt;, &amp;gt;) with &amp;amp;lt; and &amp;amp;gt; respectively, and replacing all interpolation start/end markers with their escaped counterparts.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;セキュリティ上の理由から、ウェブサーバーは山かっこ（&amp;lt;、&amp;gt;）を＆lt;に置き換えて、ユーザー指定のデータをエスケープすることを強くお勧めします。と＆gt; それぞれ、すべての補間開始/終了マーカーをエスケープされた対応するマーカーで置き換えます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b581a24703a37b7af937ecbc3944d0890b25a5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Forgiving:&lt;/strong&gt; In JavaScript, trying to evaluate undefined properties generates &lt;code&gt;ReferenceError&lt;/code&gt; or &lt;code&gt;TypeError&lt;/code&gt;. In AngularJS, expression evaluation is forgiving to &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;寛容：&lt;/strong&gt; JavaScriptでは、未定義のプロパティを評価しようとすると、 &lt;code&gt;ReferenceError&lt;/code&gt; または &lt;code&gt;TypeError&lt;/code&gt; が生成されます。AngularJSでは、式の評価は &lt;code&gt;undefined&lt;/code&gt; および &lt;code&gt;null&lt;/code&gt; を許容します。</target>
        </trans-unit>
        <trans-unit id="118ae1efbf212c1af6f2ec7a52d16996705f9a9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Free online:&lt;/strong&gt;&lt;a href=&quot;http://thinkster.io&quot;&gt;thinkster.io&lt;/a&gt;, &lt;a href=&quot;http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;CodeAcademy&lt;/a&gt;, &lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;CodeSchool&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;無料オンライン：&lt;/strong&gt;&lt;a href=&quot;http://thinkster.io&quot;&gt;thinkster.io&lt;/a&gt;、&lt;a href=&quot;http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;CodeAcademy&lt;/a&gt;、&lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;CodeSchool&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36cfed557b0d54596718c47a3502e52e7f0d5983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Free online:&lt;/strong&gt;&lt;a href=&quot;http://thinkster.io&quot;&gt;thinkster.io&lt;/a&gt;, &lt;a href=&quot;https://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;CodeAcademy&lt;/a&gt;, &lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;CodeSchool&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;無料オンライン：&lt;/strong&gt;&lt;a href=&quot;http://thinkster.io&quot;&gt;thinkster.io&lt;/a&gt;、&lt;a href=&quot;https://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;CodeAcademy&lt;/a&gt;、&lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;CodeSchool&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e321247d81350096c762f426ea37a7f7f65c46b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;General UI Libraries:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一般的なUIライブラリ：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c62cc2644917c0c78a5ad290cc5c9b4a3cbc9f21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;General options&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;一般的なオプション&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="83069315cc099dddfa6736b90e27c48bdf031e5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generating AngularJS templates on the server containing user-provided content&lt;/strong&gt;. This is the most common pitfall where you are generating HTML via some server-side engine such as PHP, Java or ASP.NET.</source>
          <target state="translated">&lt;strong&gt;ユーザー提供のコンテンツを含むサーバーでAngularJSテンプレートを生成する&lt;/strong&gt;。これは、PHP、Java、ASP.NETなどのサーバー側エンジンを介してHTMLを生成する最も一般的な落とし穴です。</target>
        </trans-unit>
        <trans-unit id="b7704441aa8773f48d301f0f5b37cfd7c03c0699" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting Started:&lt;/strong&gt;&lt;a href=&quot;http://www.dancancro.com/comparison-of-angularjs-application-starters/&quot;&gt;Comparison of the options for starting a new project&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;はじめに：&lt;/strong&gt;&lt;a href=&quot;http://www.dancancro.com/comparison-of-angularjs-application-starters/&quot;&gt;新しいプロジェクトを開始するためのオプションの比較&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d6b4902ff6c42ae4bb55caf32e3267d18fa47e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Google Cloud Platform:&lt;/strong&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/appengine-angular-gotodos&quot;&gt;with Go&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Google Cloud Platform：&lt;/strong&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/appengine-angular-gotodos&quot;&gt;Goを使用&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc400a339550b52ce6b0be7cd10a7b9a81323f48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML Semantics&lt;/strong&gt;: If you're creating custom element directives, Web Components or HTML in general, use native elements wherever possible to utilize built-in events and properties. Alternatively, use ARIA to communicate semantic meaning. See &lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html&quot;&gt;notes on ARIA use&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;HTMLセマンティクス&lt;/strong&gt;：一般にカスタム要素ディレクティブ、Webコンポーネント、またはHTMLを作成する場合は、組み込みのイベントとプロパティを利用するために、可能な限りネイティブ要素を使用してください。または、ARIAを使用してセマンティックな意味を伝えます。&lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html&quot;&gt;ARIAの使用に関する注意を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c47092e73259d220507e10f0b2a6bb5286e27864" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML Semantics&lt;/strong&gt;: If you're creating custom element directives, Web Components or HTML in general, use native elements wherever possible to utilize built-in events and properties. Alternatively, use ARIA to communicate semantic meaning. See &lt;a href=&quot;https://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html&quot;&gt;notes on ARIA use&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;HTMLセマンティクス&lt;/strong&gt;：カスタム要素ディレクティブ、Webコンポーネント、またはHTML全般を作成する場合は、可能な限りネイティブ要素を使用して、組み込みのイベントとプロパティを利用します。または、ARIAを使用して意味的な意味を伝えます。&lt;a href=&quot;https://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html&quot;&gt;ARIAの使用に関する注意事項を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="772e80ba0b22ef620ca409833085ad693b23ee9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hood.ie:&lt;/strong&gt;&lt;a href=&quot;http://www.roberthorvick.com/2013/06/30/todomvc-angularjs-hood-ie-60-minutes-to-awesome/&quot;&gt;60 Minutes to Awesome&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Hood.ie：&lt;/strong&gt;&lt;a href=&quot;http://www.roberthorvick.com/2013/06/30/todomvc-angularjs-hood-ie-60-minutes-to-awesome/&quot;&gt;素晴らしい60分&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19085e0a2c5cd050d84b7d76363211819ff976a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If an attacker has access to control AngularJS templates or expressions, they can exploit an AngularJS application via an XSS attack, regardless of the version.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;攻撃者がAngularJSテンプレートまたは式を制御するアクセス権を持っている場合、バージョンに関係なく、XSS攻撃を介してAngularJSアプリケーションを悪用する可能性があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="deaff8edd96bc66f4727a4f3ab4978724f45f6e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you must continue to allow user-provided content in an AngularJS template then the safest option is to ensure that it is only present in the part of the template that is made inert via the &lt;a href=&quot;../api/ng/directive/ngnonbindable&quot;&gt;&lt;code&gt;ngNonBindable&lt;/code&gt;&lt;/a&gt; directive.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;AngularJSテンプレートでユーザー提供のコンテンツを引き続き許可する必要がある場合、最も安全なオプションは、&lt;a href=&quot;../api/ng/directive/ngnonbindable&quot;&gt; &lt;code&gt;ngNonBindable&lt;/code&gt; &lt;/a&gt;ディレクティブを介して非アクティブにされるテンプレートの部分にのみ存在することを確認することです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b01ec1aed4e21712373f6ba89f7d3b02564dd612" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input-type specific options&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;入力タイプ固有のオプション&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="f943ecf537936d45c56dbe1a62ccb2ab16e8ccfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Internationalization and Localization:&lt;/strong&gt;&lt;a href=&quot;guide/i18n&quot;&gt;AngularJS Guide to i18n and l10n&lt;/a&gt;, &lt;a href=&quot;api/ng/filter/date&quot;&gt;date filter&lt;/a&gt;, &lt;a href=&quot;api/ng/filter/currency&quot;&gt;currency filter&lt;/a&gt;, &lt;a href=&quot;https://blog.novanet.no/creating-multilingual-support-using-angularjs/&quot;&gt;Creating multilingual support&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;国際化とローカリゼーション：&lt;/strong&gt;&lt;a href=&quot;guide/i18n&quot;&gt;i18nおよびl10nのAngularJSガイド&lt;/a&gt;、&lt;a href=&quot;api/ng/filter/date&quot;&gt;日付フィルター&lt;/a&gt;、&lt;a href=&quot;api/ng/filter/currency&quot;&gt;通貨フィルター&lt;/a&gt;、&lt;a href=&quot;https://blog.novanet.no/creating-multilingual-support-using-angularjs/&quot;&gt;多言語サポートの作成&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13d22bd673d3e8b5f004e45768f0644ef8cf6802" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Internationalization and Localization:&lt;/strong&gt;&lt;a href=&quot;http://www.novanet.no/blog/hallstein-brotan/dates/2013/10/creating-multilingual-support-using-angularjs/&quot;&gt;Creating multilingual support&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;国際化とローカリゼーション：&lt;/strong&gt;&lt;a href=&quot;http://www.novanet.no/blog/hallstein-brotan/dates/2013/10/creating-multilingual-support-using-angularjs/&quot;&gt;多言語サポートの作成&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0e5f409cb2ee335a9867f4c6a6b23ca8aa2e621" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Internationalization:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Internationalization:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ea751c15b641e55b67020dc80776c68a6993488" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's best to design your application in such a way that users cannot change client-side templates.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ユーザーがクライアント側のテンプレートを変更できないようにアプリケーションを設計することをお勧めします。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bd2654d1202485a2e442179165da1e7c418c60d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Javascript minification: &lt;/strong&gt;&lt;a href=&quot;http://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/&quot;&gt;Background&lt;/a&gt;, &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate automation tool&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Javascriptの縮小：&lt;/strong&gt;&lt;a href=&quot;http://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/&quot;&gt;背景&lt;/a&gt;、&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate自動化ツール&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3718e4787ff542a8c7ad10f699c1d7d52546cd86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Javascript minification: &lt;/strong&gt;&lt;a href=&quot;https://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/&quot;&gt;Background&lt;/a&gt;, &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate automation tool&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Javascriptの縮小：&lt;/strong&gt;&lt;a href=&quot;https://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/&quot;&gt;背景&lt;/a&gt;、&lt;strong&gt;ng-&lt;/strong&gt;&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;注釈自動化ツール&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="091f846e69bd67ba0e23902bb84fa8e87a680de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Life cycle: Pseudo-Code of &lt;code&gt;$apply()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ライフサイクル： &lt;code&gt;$apply()&lt;/code&gt; 疑似コード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="487183e5f206a39ee969219ee284ebe8a02babcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Link:&lt;/strong&gt; combine the directives with a scope and produce a live view. Any changes in the scope model are reflected in the view, and any user interactions with the view are reflected in the scope model. This makes the scope model the single source of truth.</source>
          <target state="translated">&lt;strong&gt;リンク：&lt;/strong&gt;ディレクティブとスコープを組み合わせて、ライブビューを作成します。スコープモデルの変更はビューに反映され、ビューに対するユーザー操作はスコープモデルに反映されます。これにより、スコープモデルが単一の真の情報源になります。</target>
        </trans-unit>
        <trans-unit id="96b3884d0059c68bd05c7315cffd0cf62ea0f114" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MEAN Stack: &lt;/strong&gt;&lt;a href=&quot;http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and&quot;&gt;Blog post&lt;/a&gt;, &lt;a href=&quot;http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/&quot;&gt;Setup&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/live/shows/913996610&quot;&gt;GDL Video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;MEANスタック：&lt;/strong&gt;&lt;a href=&quot;http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and&quot;&gt;ブログ投稿&lt;/a&gt;、&lt;a href=&quot;http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/&quot;&gt;セットアップ&lt;/a&gt;、&lt;a href=&quot;https://developers.google.com/live/shows/913996610&quot;&gt;GDLビデオ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e8bf181242f884595d886cd03aeec144f719d0af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MEAN Stack: &lt;/strong&gt;&lt;a href=&quot;http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and&quot;&gt;Blog post&lt;/a&gt;, &lt;a href=&quot;https://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/&quot;&gt;Setup&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/live/shows/913996610&quot;&gt;GDL Video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;MEANスタック：&lt;/strong&gt;&lt;a href=&quot;http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and&quot;&gt;ブログ投稿&lt;/a&gt;、&lt;a href=&quot;https://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/&quot;&gt;セットアップ&lt;/a&gt;、&lt;a href=&quot;https://developers.google.com/live/shows/913996610&quot;&gt;GDLビデオ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2911fd9d126848f8eb1eed1ab9acba880de28cac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Manipulating HTML DOM programmatically:&lt;/strong&gt; Manipulating HTML DOM is a cornerstone of AJAX applications, but it's cumbersome and error-prone. By declaratively describing how the UI should change as your application state changes, you are freed from low-level DOM manipulation tasks. Most applications written with AngularJS never have to programmatically manipulate the DOM, although you can if you want to.</source>
          <target state="translated">&lt;strong&gt;プログラムによるHTML DOMの操作：&lt;/strong&gt; HTML DOMの操作はAJAXアプリケーションの基礎ですが、煩雑でエラーが発生しやすくなります。アプリケーションの状態が変化したときにUIがどのように変化するかを宣言的に説明することで、低レベルのDOM操作タスクから解放されます。 AngularJSで作成されたほとんどのアプリケーションは、プログラムでDOMを操作する必要はありませんが、必要に応じて操作できます。</target>
        </trans-unit>
        <trans-unit id="ae65de1008d93ac10e5147e1a16fe4001e84f1a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Marshaling data to and from the UI:&lt;/strong&gt; CRUD operations make up the majority of AJAX applications' tasks. The flow of marshaling data from the server to an internal object to an HTML form, allowing users to modify the form, validating the form, displaying validation errors, returning to an internal model, and then back to the server, creates a lot of boilerplate code. AngularJS eliminates almost all of this boilerplate, leaving code that describes the overall flow of the application rather than all of the implementation details.</source>
          <target state="translated">&lt;strong&gt;UIとの間のデータのマーシャリング：&lt;/strong&gt; CRUD操作は、AJAXアプリケーションのタスクの大部分を占めます。サーバーから内部オブジェクト、HTMLフォームへのデータのマーシャリングのフロー。これにより、ユーザーはフォームを変更し、フォームを検証し、検証エラーを表示し、内部モデルに戻ってからサーバーに戻ることができ、多くのボイラープレートが作成されます。コード。AngularJSは、このボイラープレートのほとんどすべてを排除し、実装の詳細のすべてではなく、アプリケーションの全体的なフローを記述するコードを残します。</target>
        </trans-unit>
        <trans-unit id="2a275a422f10bed3a56df7995304ed16eed43489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Meteor: &lt;/strong&gt;&lt;a href=&quot;https://github.com/Urigo/angular-meteor&quot;&gt;angular-meteor package&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Meteor：&lt;/strong&gt;&lt;a href=&quot;https://github.com/Urigo/angular-meteor&quot;&gt;angular-meteorパッケージ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db0671b387ecea8787251da7e07fd8e9fdaf4483" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Methods&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Methods&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6d8a78379558acab3af04cd587819d30c75521e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model mutation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;モデル変異&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7086e1ce6f42d5fad9cba2e1f5646b1b825187cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mult-slot transclusion&lt;/strong&gt; is declared by providing an object for the &lt;code&gt;transclude&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;マルチスロットのトランスクルージョン&lt;/strong&gt;は、 &lt;code&gt;transclude&lt;/code&gt; プロパティのオブジェクトを提供することによって宣言されます。</target>
        </trans-unit>
        <trans-unit id="05b165b285b72caa9c78970e10aab8026dcef25d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multi-slot transclusion&lt;/strong&gt; is declared by providing an object for the &lt;code&gt;transclude&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;マルチスロットトランスクルージョン&lt;/strong&gt;は、 &lt;code&gt;transclude&lt;/code&gt; プロパティのオブジェクトを提供することによって宣言されます。</target>
        </trans-unit>
        <trans-unit id="6659bd2912ce42ac1bdd194ad91b297788435e7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mutation observation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;変異観察&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b23529e246744b68c2bd6ef0af4dd7ff9830bcef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; Developers should take care in how and why they are modifying the &lt;code&gt;$delegate&lt;/code&gt; for the service. Not only should expectations for the consumer be kept, but some functionality (such as directive registration) does not take place after decoration, but during creation/registration of the original service. This means, for example, that an action such as pushing a directive object to a directive &lt;code&gt;$delegate&lt;/code&gt; will likely result in unexpected behavior. Furthermore, great care should be taken when decorating core services, directives, or filters as this may unexpectedly or adversely affect the functionality of the framework.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;開発者は、サービスの &lt;code&gt;$delegate&lt;/code&gt; を変更する方法と理由に注意する必要があります。消費者への期待を維持するだけでなく、一部の機能（ディレクティブの登録など）は装飾後に行われず、元のサービスの作成/登録中に行われます。これは、たとえば、ディレクティブオブジェクトをディレクティブ &lt;code&gt;$delegate&lt;/code&gt; プッシュするなどのアクションでは、予期しない動作が発生する可能性が高いことを意味します。さらに、コアサービス、ディレクティブ、またはフィルターを装飾するときは、フレームワークの機能に予期せずまたは悪影響を与える可能性があるため、細心の注意を払う必要があります。</target>
        </trans-unit>
        <trans-unit id="68ff0628f16e24ea841c9bf624378b977ece4f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; This guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このガイドは、AngularJSの基本にすでに精通している開発者を対象としています。始めたばかりの場合は、最初に&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;チュートリアル&lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="64e04f4558e73933f8913d26f295b4e0d5431015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; This guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このガイドは、AngularJSの基本に既に精通している開発者を対象としています。始めたばかりの場合は、最初に&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;チュートリアル&lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="fdb079ff35eeaa09176e6b1ab92674e118487a5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: animations take effect only if the &lt;strong&gt;ngAnimate&lt;/strong&gt; module is loaded.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：アニメーションは、&lt;strong&gt;ngAnimate&lt;/strong&gt;モジュールがロードされている場合にのみ有効に&lt;strong&gt;なり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="29bce9ed0569284644bd5abffe0b6b3ff5ca463c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Bitwise, Comma, And Void Operators:&lt;/strong&gt; You cannot use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;Bitwise&lt;/a&gt;, &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;void&lt;/code&gt; operators in an AngularJS expression.</source>
          <target state="translated">&lt;strong&gt;ノービット単位、カンマ、ボイド演算子：&lt;/strong&gt;あなたが使用することはできません&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;ビット単位の&lt;/a&gt;、 &lt;code&gt;,&lt;/code&gt; または &lt;code&gt;void&lt;/code&gt; AngularJS式で演算子を。</target>
        </trans-unit>
        <trans-unit id="ac0995069bdfdc8439b558ebbcd92d17a5af46db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Control Flow Statements:&lt;/strong&gt; You cannot use the following in an AngularJS expression: conditionals, loops, or exceptions.</source>
          <target state="translated">&lt;strong&gt;制御フローステートメントなし：&lt;/strong&gt; AngularJS式では、条件、ループ、または例外を使用できません。</target>
        </trans-unit>
        <trans-unit id="f763c2d5219a3a509a21ff61c916fa107b127c3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Function Declarations:&lt;/strong&gt; You cannot declare functions in an AngularJS expression, even inside &lt;code&gt;ng-init&lt;/code&gt; directive.</source>
          <target state="translated">&lt;strong&gt;関数の宣言なし：&lt;/strong&gt; &lt;code&gt;ng-init&lt;/code&gt; ディレクティブ内でも、AngularJS式で&lt;strong&gt;関数を宣言&lt;/strong&gt;することはできません。</target>
        </trans-unit>
        <trans-unit id="3111894aec8cae77ef6914c2f135257f6ecd663c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Object Creation With New Operator:&lt;/strong&gt; You cannot use &lt;code&gt;new&lt;/code&gt; operator in an AngularJS expression.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;new&lt;/code&gt; 演算子で&lt;strong&gt;オブジェクトを作成し&lt;/strong&gt;ない&lt;strong&gt;：&lt;/strong&gt; AngularJS式で新しい演算子を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="4884a66d9e6f11c9d9f4d185ac827f2e5cf991df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No RegExp Creation With Literal Notation:&lt;/strong&gt; You cannot create regular expressions in an AngularJS expression. An exception to this rule is &lt;a href=&quot;../api/ng/directive/ngpattern&quot;&gt;&lt;code&gt;ng-pattern&lt;/code&gt;&lt;/a&gt; which accepts valid RegExp.</source>
          <target state="translated">&lt;strong&gt;リテラル表記によるRegExpの作成なし：&lt;/strong&gt; AngularJS式で正規表現を作成することはできません。このルールの例外は、有効なRegExpを受け入れる&lt;a href=&quot;../api/ng/directive/ngpattern&quot;&gt; &lt;code&gt;ng-pattern&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="65dcf051b0f8d4d6b70a92dd10d98dbbb05e7cdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="754b4f64006bb56947e7f8ed014b7227d3ff1a01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; All element references in AngularJS are always wrapped with jQuery or jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; AngularJSのすべての要素参照は、常にjQueryまたはjqLit​​eでラップされます（ディレクティブのコンパイル/リンク関数の要素引数など）。生のDOM参照になることはありません。</target>
        </trans-unit>
        <trans-unit id="6bccc0e1ef7219cdcae1c7eee6b50dfe79beaa7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; An &quot;origin&quot; consists of the &lt;a href=&quot;https://en.wikipedia.org/wiki/URI_scheme&quot;&gt;URI scheme&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hostname&quot;&gt;hostname&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Port_(computer_networking&quot;&gt;port number&lt;/a&gt;. For &lt;code&gt;http:&lt;/code&gt; and &lt;code&gt;https:&lt;/code&gt;, the port number can be omitted if using th default ports (80 and 443 respectively). Examples: &lt;code&gt;http://example.com&lt;/code&gt;, &lt;code&gt;https://api.example.com:9876&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;「オリジン」は、&lt;a href=&quot;https://en.wikipedia.org/wiki/URI_scheme&quot;&gt;URIスキーム&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Hostname&quot;&gt;ホスト名&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Port_(computer_networking&quot;&gt;ポート番号で構成され&lt;/a&gt;ます。以下のため &lt;code&gt;http:&lt;/code&gt; および &lt;code&gt;https:&lt;/code&gt; 番目のデフォルトのポート（80および443それぞれ）を使用した場合、ポート番号は省略することができます。例： &lt;code&gt;http://example.com&lt;/code&gt; 、 &lt;code&gt;https://api.example.com:9876&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07d16e1f6d934f26fde4c4dbf393c311b322112b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; AngularJS directive attributes take either expressions &lt;em&gt;or&lt;/em&gt; interpolation markup with embedded expressions. It is considered &lt;strong&gt;bad practice&lt;/strong&gt; to embed interpolation markup inside an expression:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; AngularJSディレクティブ属性は、式&lt;em&gt;または&lt;/em&gt;埋め込み式を使用した補間マークアップのいずれかを取ります。式内に補間マークアップを埋め込むことは&lt;strong&gt;悪い習慣&lt;/strong&gt;と考えられています：</target>
        </trans-unit>
        <trans-unit id="9f30dc881f403b4408bffc55af0c839141d80f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; AngularJS does not make a copy of the &lt;code&gt;data&lt;/code&gt; parameter before it is passed into the &lt;code&gt;transformRequest&lt;/code&gt; pipeline. That means changes to the properties of &lt;code&gt;data&lt;/code&gt; are not local to the transform function (since Javascript passes objects by reference). For example, when calling &lt;code&gt;$http.get(url, $scope.myObject)&lt;/code&gt;, modifications to the object's properties in a transformRequest function will be reflected on the scope and in any templates where the object is data-bound. To prevent this, transform functions should have no side-effects. If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; AngularJSは、 &lt;code&gt;transformRequest&lt;/code&gt; パイプラインに渡される前に &lt;code&gt;data&lt;/code&gt; パラメーターのコピーを作成しません。つまり、 &lt;code&gt;data&lt;/code&gt; のプロパティの変更は変換関数に対してローカルではありません（JavaScriptはオブジェクトを参照渡しするため）。たとえば、 &lt;code&gt;$http.get(url, $scope.myObject)&lt;/code&gt; 呼び出すと、transformRequest関数でのオブジェクトのプロパティへの変更は、スコープと、オブジェクトがデータにバインドされているすべてのテンプレートに反映されます。これを防ぐには、変換関数に副作用があってはなりません。プロパティを変更する必要がある場合は、データのコピーを作成するか、返される新しいオブジェクトを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="62e8d769efbb38bebbae56179db43581fb022339" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; AngularJS uses &lt;a href=&quot;http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/&quot;&gt;&lt;strong&gt;constructor injection&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; AngularJSは&lt;a href=&quot;http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/&quot;&gt;&lt;strong&gt;コンストラクター注入を&lt;/strong&gt;&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="ea8f867f10d41b8ea0eac218ad0e389751b74337" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Any unspecified options will use the default value. You can see the default values below.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;指定されていないオプションはすべてデフォルト値を使用します。以下のデフォルト値を確認できます。</target>
        </trans-unit>
        <trans-unit id="0be1272e4ff520c7319bf0af92eafbe034baf447" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Avoid using the &lt;code&gt;g&lt;/code&gt; flag on the RegExp, as it will cause each successive search to start at the index of the last search's match, thus not taking the whole input value into account.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; RegExpで &lt;code&gt;g&lt;/code&gt; フラグを使用しないでください。gフラグを使用すると、連続する各検索が最後の検索の一致のインデックスから開始されるため、入力値全体が考慮されません。</target>
        </trans-unit>
        <trans-unit id="9646681f60adbf1cab980b4c3672b602175ba12b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not bootstrap the app on an element with a directive that uses &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt;, such as &lt;a href=&quot;../directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Doが使用するディレクティブを持つ要素でアプリをブートストラップない&lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;トランスクルーを&lt;/a&gt;など、&lt;a href=&quot;../directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;。これを行うと、アプリの&lt;a href=&quot;../service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;とアプリの&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;インジェクターが&lt;/a&gt;置き換わり、アニメーションが機能しなくなり、アプリの外部からインジェクターにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="ee7d1df2da097b762e8500ab2bc8acc5c59dd5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Filter names must be valid AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;&lt;code&gt;Expressions&lt;/code&gt;&lt;/a&gt; identifiers, such as &lt;code&gt;uppercase&lt;/code&gt; or &lt;code&gt;orderBy&lt;/code&gt;. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (&lt;code&gt;myappSubsectionFilterx&lt;/code&gt;) or underscores (&lt;code&gt;myapp_subsection_filterx&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;フィルター名は、 &lt;code&gt;uppercase&lt;/code&gt; や &lt;code&gt;orderBy&lt;/code&gt; などの有効なAngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt; &lt;code&gt;Expressions&lt;/code&gt; &lt;/a&gt;識別子である必要があります。ハイフンやドットなどの特殊文字を含む名前は使用できません。フィルターの名前空間を設定する場合は、大文字（ &lt;code&gt;myappSubsectionFilterx&lt;/code&gt; ）または下線（ &lt;code&gt;myapp_subsection_filterx&lt;/code&gt; ）を使用できます。</target>
        </trans-unit>
        <trans-unit id="b6db5293b8274f7a74ad2c0a15707b9a31946b87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Filter names must be valid AngularJS &lt;a href=&quot;expression&quot;&gt;&lt;code&gt;Expressions&lt;/code&gt;&lt;/a&gt; identifiers, such as &lt;code&gt;uppercase&lt;/code&gt; or &lt;code&gt;orderBy&lt;/code&gt;. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (&lt;code&gt;myappSubsectionFilterx&lt;/code&gt;) or underscores (&lt;code&gt;myapp_subsection_filterx&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;フィルター名は、 &lt;code&gt;uppercase&lt;/code&gt; や &lt;code&gt;orderBy&lt;/code&gt; などの有効なAngularJS &lt;a href=&quot;expression&quot;&gt; &lt;code&gt;Expressions&lt;/code&gt; &lt;/a&gt;識別子である必要があります。ハイフンやドットなどの特殊文字を含む名前は使用できません。フィルターの名前空間を設定する場合は、大文字（ &lt;code&gt;myappSubsectionFilterx&lt;/code&gt; ）または下線（ &lt;code&gt;myapp_subsection_filterx&lt;/code&gt; ）を使用できます。</target>
        </trans-unit>
        <trans-unit id="09b3de40dff5562853d96db36635c9e72bd0fad2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If present, &lt;code&gt;classNameFilter&lt;/code&gt; will be checked after &lt;a href=&quot;%24animateprovider#customFilter.html&quot;&gt;customFilter&lt;/a&gt;. If &lt;code&gt;customFilter&lt;/code&gt; is present and returns false, &lt;code&gt;classNameFilter&lt;/code&gt; will not be checked.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;存在する場合、 &lt;code&gt;classNameFilter&lt;/code&gt; は&lt;a href=&quot;%24animateprovider#customFilter.html&quot;&gt;customFilterの&lt;/a&gt;後にチェックされます。 &lt;code&gt;customFilter&lt;/code&gt; が存在し、falseを返す場合、 &lt;code&gt;classNameFilter&lt;/code&gt; はチェックされません。</target>
        </trans-unit>
        <trans-unit id="29f87520727c565590339f924ac7cca7cfc0196b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If present, &lt;code&gt;customFilter&lt;/code&gt; will be checked before &lt;a href=&quot;%24animateprovider#classNameFilter.html&quot;&gt;classNameFilter&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;存在する場合、 &lt;code&gt;customFilter&lt;/code&gt; は&lt;a href=&quot;%24animateprovider#classNameFilter.html&quot;&gt;classNameFilterの&lt;/a&gt;前にチェックされます。</target>
        </trans-unit>
        <trans-unit id="8336bca83b29dfc525f1cedfe875ac2325965bd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the predicate is missing or empty then it defaults to &lt;code&gt;'+'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;述部がないか空の場合、デフォルトで &lt;code&gt;'+'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="fb48c215391d9e21f60d1b4f3e5128f35325a987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you notice numbers not being sorted as expected, make sure they are actually being saved as numbers and not strings. &lt;strong&gt;Note:&lt;/strong&gt; For the purpose of sorting, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are considered &quot;greater than&quot; any other value (with undefined &quot;greater than&quot; null). This effectively means that &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values end up at the end of a list sorted in ascending order. &lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;null&lt;/code&gt; values use &lt;code&gt;'null'&lt;/code&gt; as their type to be able to distinguish them from objects.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;数値が期待どおりに並べ替えられていないことに気付いた場合は、実際には文字列ではなく数値として保存されていることを確認してください。&lt;strong&gt;注：&lt;/strong&gt;並べ替えの目的で、 &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; は他の値よりも「大きい」と見なされます（未定義の「より大きい」nullがある場合）。つまり、 &lt;code&gt;null&lt;/code&gt; 値と &lt;code&gt;undefined&lt;/code&gt; 値は、昇順で並べ替えられたリストの最後に配置されます。&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt; 値は、オブジェクトと区別できるように、タイプとして &lt;code&gt;'null'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7dcfa7bc4217aa09ca0ac15abc5df872e42c3cb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If your scope already contains a property with this name, it will be hidden or overwritten. Make sure, you specify an appropriate name for this property, that does not collide with other properties on the scope.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;スコープにこの名前のプロパティが既に含まれている場合、そのプロパティは非表示または上書きされます。このプロパティには、スコープの他のプロパティと競合しない適切な名前を指定してください。</target>
        </trans-unit>
        <trans-unit id="6de6d75d2a08de0ddaf214e94f5c491a4f41f785" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In contrast to &lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$http.config&lt;/a&gt;, &lt;a href=&quot;../../ng/service/%24q&quot;&gt;promises&lt;/a&gt; are &lt;strong&gt;not&lt;/strong&gt; supported in &lt;code&gt;$resource&lt;/code&gt;, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the &lt;code&gt;cancellable&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;とは対照的に&lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$ http.config&lt;/a&gt;、&lt;a href=&quot;../../ng/service/%24q&quot;&gt;約束は&lt;/a&gt;され&lt;strong&gt;ない&lt;/strong&gt;でサポート &lt;code&gt;$resource&lt;/code&gt; に同じ値が複数の要求のために使用されるため、。リクエストをキャンセルする方法を探している場合は、 &lt;code&gt;cancellable&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a9960a1716b955d15c8ef82b1ff61b1bfaa4a68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Keep in mind that &lt;code&gt;angular.extend&lt;/code&gt; does not support recursive merge (deep copy). Use &lt;a href=&quot;angular.merge&quot;&gt;&lt;code&gt;angular.merge&lt;/code&gt;&lt;/a&gt; for this.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;angular.extend&lt;/code&gt; は再帰的なマージ（ディープコピー）をサポートしていないことに&lt;strong&gt;注意して&lt;/strong&gt;ください。これには&lt;a href=&quot;angular.merge&quot;&gt; &lt;code&gt;angular.merge&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="a737670eed793e3a7f5e79a30adcd1dd5cf06a3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Keep in mind that this function will not find elements by tag name / CSS selector. For lookups by tag name, try instead &lt;code&gt;angular.element(document).find(...)&lt;/code&gt; or &lt;code&gt;$document.find()&lt;/code&gt;, or use the standard DOM APIs, e.g. &lt;code&gt;document.querySelectorAll()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数はタグ名/ CSSセレクターで要素を検索しないことに&lt;strong&gt;注意して&lt;/strong&gt;ください。タグ名で検索の場合は、代わりにしてみてください &lt;code&gt;angular.element(document).find(...)&lt;/code&gt; または &lt;code&gt;$document.find()&lt;/code&gt; 、または、例えば標準DOM APIを使用 &lt;code&gt;document.querySelectorAll()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25007ddb7e4598a0075b438ca00a30fc96476806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Like other core AngularJS identifiers, built-in services always start with &lt;code&gt;$&lt;/code&gt; (e.g. &lt;code&gt;$http&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;他のコアAngularJS識別子と同様に、組み込みサービスは常に &lt;code&gt;$&lt;/code&gt; で始まります（例： &lt;code&gt;$http&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4932f6167e601a77c161e5c189cbfa99ccc31644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Normally, a scope prototypically inherits from its parent. An isolated scope does not. See the &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;&quot;Directive Definition Object - scope&quot;&lt;/a&gt; section for more information about isolate scopes.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;通常、スコープはプロトタイプとして親から継承します。孤立したスコープにはありません。分離スコープの詳細については、&lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;「ディレクティブ定義オブジェクト-スコープ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1da042f7bf95ae6c4e993f7e979d273468251963" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not every feature offered is available for all input types. Specifically, data binding and event handling via &lt;code&gt;ng-model&lt;/code&gt; is unsupported for &lt;code&gt;input[file]&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;提供されているすべての機能がすべての入力タイプで使用できるわけではありません。特に、 &lt;code&gt;ng-model&lt;/code&gt; を介したデータバインディングとイベント処理は、 &lt;code&gt;input[file]&lt;/code&gt; サポートされていません。</target>
        </trans-unit>
        <trans-unit id="43c9bbd85138c973366badefbee28f8a58515f29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Passing a &lt;code&gt;transclude&lt;/code&gt; function to the $compile function is deprecated, as it e.g. will not use the right outer scope. Please pass the transclude function as a &lt;code&gt;parentBoundTranscludeFn&lt;/code&gt; to the link function instead.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;transclude&lt;/code&gt; 関数を$ compile関数に渡すことは非推奨です。たとえば、正しい外側のスコープを使用しないためです。代わりに、 &lt;code&gt;parentBoundTranscludeFn&lt;/code&gt; 関数をparentBoundTranscludeFnとしてリンク関数に渡してください。</target>
        </trans-unit>
        <trans-unit id="0c375e47ef7907278cde581e097943b5b5c842c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Protractor based end-to-end tests cannot use this function to bootstrap manually. They must use &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;分度器ベースのエンドツーエンドテストでは、この関数を使用して手動でブートストラップすることはできません。&lt;a href=&quot;../directive/ngapp&quot;&gt;ngAppを&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8cf1ad8dcecbe51df5c09b1d4e999791e1bdb417" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Re-using DOM elements can have unforeseen effects. Read the &lt;a href=&quot;ngrepeat#tracking-and-duplicates.html&quot;&gt;section on tracking and duplicates&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; DOM要素を再利用すると、予期しない影響が生じる可能性があります。詳細については&lt;a href=&quot;ngrepeat#tracking-and-duplicates.html&quot;&gt;、追跡と複製に関するセクションを参照し&lt;/a&gt;てください。</target>
        </trans-unit>
        <trans-unit id="64d9e466303a2306994cdaf48132f8a30be292b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;transclude&lt;/code&gt; function that is passed to the compile function is deprecated, as it e.g. does not know about the right outer scope. Please use the transclude function that is passed to the link function instead.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;transclude&lt;/code&gt; のそれは例えば右の外側のスコープについて知っていないと、コンパイル関数に渡される関数は、廃止されました。代わりに、リンク関数に渡されるトランスクルード関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="1d372d7dabca924b84525cbea0b2c53815c203cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The compile function cannot handle directives that recursively use themselves in their own templates or compile functions. Compiling these directives results in an infinite loop and stack overflow errors. This can be avoided by manually using $compile in the postLink function to imperatively compile a directive's template instead of relying on automatic template compilation via &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; declaration or manual compilation inside the compile function.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コンパイル関数は、独自のテンプレートまたはコンパイル関数で自分自身を再帰的に使用するディレクティブを処理できません。これらのディレクティブをコンパイルすると、無限ループとスタックオーバーフローエラーが発生します。これは、 &lt;code&gt;template&lt;/code&gt; または &lt;code&gt;templateUrl&lt;/code&gt; 宣言による自動テンプレートコンパイルやコンパイル関数内の手動コンパイルに依存するのではなく、postLink関数で$ compileを手動で使用してディレクティブのテンプレートを強制的にコンパイルすることで回避できます。</target>
        </trans-unit>
        <trans-unit id="fef5ea5f7e6008b5573646b693cf5d0dd8ef25d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The compile function cannot handle directives that recursively use themselves in their own templates or compile functions. Compiling these directives results in an infinite loop and stack overflow errors. This can be avoided by manually using &lt;code&gt;$compile&lt;/code&gt; in the postLink function to imperatively compile a directive's template instead of relying on automatic template compilation via &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; declaration or manual compilation inside the compile function.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コンパイル関数は、独自のテンプレートまたはコンパイル関数で再帰的に使用するディレクティブを処理できません。これらのディレクティブをコンパイルすると、無限ループとスタックオーバーフローエラーが発生します。これは、postLink関数で &lt;code&gt;$compile&lt;/code&gt; を手動で使用して、 &lt;code&gt;template&lt;/code&gt; または &lt;code&gt;templateUrl&lt;/code&gt; 宣言による自動テンプレートコンパイルや、コンパイル関数内での手動コンパイルに依存する代わりに、ディレクティブのテンプレートを命令的にコンパイルすることで回避できます。</target>
        </trans-unit>
        <trans-unit id="c1a7cf77f06230eb77dc4be6a59d85af8ef8f296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The template instance and the link instance may be different objects if the template has been cloned. For this reason it is &lt;strong&gt;not&lt;/strong&gt; safe to do anything other than DOM transformations that apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration should be done in a linking function rather than in a compile function.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;テンプレートが複製されている場合、テンプレートインスタンスとリンクインスタンスは異なるオブジェクトである可能性があります。このため、コンパイル関数内で複製されたすべてのDOMノードに適用されるDOM変換以外のことを行うの&lt;strong&gt;は&lt;/strong&gt;安全ではあり&lt;strong&gt;ません&lt;/strong&gt;。特に、DOMリスナーの登録は、コンパイル関数ではなくリンク関数で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="4c1bb05a6bbf37a35eb2ec554716d99aa62c0f75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These &lt;code&gt;=attr&lt;/code&gt; attributes in the &lt;code&gt;scope&lt;/code&gt; option of directives are normalized just like directive names. To bind to the attribute in &lt;code&gt;&amp;lt;div bind-to-this=&quot;thing&quot;&amp;gt;&lt;/code&gt;, you'd specify a binding of &lt;code&gt;=bindToThis&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ディレクティブの &lt;code&gt;scope&lt;/code&gt; オプションのこれらの &lt;code&gt;=attr&lt;/code&gt; 属性は、ディレクティブ名と同じように正規化されます。 &lt;code&gt;&amp;lt;div bind-to-this=&quot;thing&quot;&amp;gt;&lt;/code&gt; の属性にバインドするには、 &lt;code&gt;=bindToThis&lt;/code&gt; のバインディングを指定します。</target>
        </trans-unit>
        <trans-unit id="26330f0aa2b3354d455a060a2a0ed9b50f0e0816" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This directive is also added when the plain &lt;code&gt;maxlength&lt;/code&gt; attribute is used, with two differences:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このディレクティブは、プレーンな &lt;code&gt;maxlength&lt;/code&gt; 属性が使用されている場合にも追加されますが、2つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="238371dbb97a0e21fd538ddd42aa26554743d3ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This directive is also added when the plain &lt;code&gt;minlength&lt;/code&gt; attribute is used, with two differences:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このディレクティブは、プレーンな &lt;code&gt;minlength&lt;/code&gt; 属性が使用されている場合にも追加されますが、2つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="054250c4eff180ddca708b0e13aaa9156bc4280e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This directive is also added when the plain &lt;code&gt;pattern&lt;/code&gt; attribute is used, with two differences:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このディレクティブは、プレーン &lt;code&gt;pattern&lt;/code&gt; 属性が使用されている場合にも追加されますが、2つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="9a3171a730d4dfd4d4e95771c02006e09d50cdce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This document is an in-depth reference of all directive options. For a gentle introduction to directives with examples of common use cases, see the &lt;a href=&quot;../../../guide/directive&quot;&gt;directive guide&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このドキュメントは、すべてのディレクティブオプションの詳細なリファレンスです。一般的な使用例のあるディレクティブの穏やかな紹介については、&lt;a href=&quot;../../../guide/directive&quot;&gt;ディレクティブガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2dd59fef3a0d3dd52af38640e43c530d57bae301" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This option has no effect if &lt;code&gt;reloadOnUrl&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;reloadOnUrl&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="66f44d93a693e4c8d18278d6f5c209ad5bac8242" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When testing an element transclude directive you must not place the directive at the root of the DOM fragment that is being compiled. See &lt;a href=&quot;../../../guide/unit-testing#testing-transclusion-directives.html&quot;&gt;Testing Transclusion Directives&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;要素のトランスクルードディレクティブをテストするときは、コンパイルするDOMフラグメントのルートにディレクティブを配置しないでください。&lt;a href=&quot;../../../guide/unit-testing#testing-transclusion-directives.html&quot;&gt;テストTransclusionディレクティブを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b58b0c8530e6790b470560e7f408cab50785f3ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using onload on SVG elements in IE11, the browser will try to call a function with the name on the window element, which will usually throw a &quot;function is undefined&quot; error. To fix this, you can instead use &lt;code&gt;data-onload&lt;/code&gt; or a different form that &lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;matches&lt;/a&gt;&lt;code&gt;onload&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; IE11のSVG要素でonloadを使用すると、ブラウザーはウィンドウ要素の名前で関数を呼び出そうとしますが、通常は「関数が未定義です」というエラーがスローされます。これを修正するには、代わりに &lt;code&gt;data-onload&lt;/code&gt; または &lt;code&gt;onload&lt;/code&gt; に&lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;一致&lt;/a&gt;する別のフォームを使用できます。</target>
        </trans-unit>
        <trans-unit id="43f275432395642736507de1fe9a315f4610ac22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you create a directive, it is restricted to attribute and elements only by default. In order to create directives that are triggered by class name, you need to use the &lt;code&gt;restrict&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ディレクティブを作成すると、デフォルトでは属性と要素のみに制限されます。クラス名によってトリガーされるディレクティブを作成するには、 &lt;code&gt;restrict&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="32cd8109a72d8948eb03c5cd4ec38de5ffe9496c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You do not currently have the ability to access scope variables from the &lt;code&gt;templateUrl&lt;/code&gt; function, since the template is requested before the scope is initialized.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;テンプレートはスコープが初期化される前に要求されるため、現在、 &lt;code&gt;templateUrl&lt;/code&gt; 関数からスコープ変数にアクセスする機能はありません。</target>
        </trans-unit>
        <trans-unit id="c3bc51797a8a7ef94a8e3d3ab8bec2861e246ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You should not use the ng-app directive when manually bootstrapping your app.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;アプリを手動でブートストラップするときは、ng-appディレクティブを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="e718d160fc8fa7b57d62c3c0b94a711ce06db0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if this function is called outside of a &lt;code&gt;$digest&lt;/code&gt; cycle, a new &lt;code&gt;$digest&lt;/code&gt; cycle will be scheduled. However, it is encouraged to always call code that changes the model from within an &lt;code&gt;$apply&lt;/code&gt; call. That includes code evaluated via &lt;code&gt;$evalAsync&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数が &lt;code&gt;$digest&lt;/code&gt; サイクルの外で呼び出された場合、新しい &lt;code&gt;$digest&lt;/code&gt; サイクルがスケジュールされます。ただし、 &lt;code&gt;$apply&lt;/code&gt; 呼び出し内からモデルを変更するコードを常に呼び出すことをお勧めします。これには、 &lt;code&gt;$evalAsync&lt;/code&gt; を介して評価されるコードが含まれます。</target>
        </trans-unit>
        <trans-unit id="2bfcfeb91f4c7f896d2812380dae3170c526be42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; it is not possible to override the &lt;code&gt;getterSetter&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;getterSetter&lt;/code&gt; オプションをオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="54b44c51ce581455eb6d9bebb63519e9ccd54302" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;script&lt;/code&gt; tag containing the template does not need to be included in the &lt;code&gt;head&lt;/code&gt; of the document, but it must be a descendent of the &lt;a href=&quot;%24rootelement&quot;&gt;$rootElement&lt;/a&gt; (e.g. element with &lt;a href=&quot;../directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; attribute), otherwise the template will be ignored.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;script&lt;/code&gt; テンプレートを含むタグが含まれている必要はありません &lt;code&gt;head&lt;/code&gt; 文書のが、の子孫でなければならない&lt;a href=&quot;%24rootelement&quot;&gt;の$ rootElement&lt;/a&gt;（と例えば要素&lt;a href=&quot;../directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; の&lt;/a&gt;属性）、そうでない場合、テンプレートは無視されます。</target>
        </trans-unit>
        <trans-unit id="937ca5efe376d5fad14e43dc0eebc369b4c45d8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;track by&lt;/code&gt; expression must come last - after any filters, and the alias expression: &lt;code&gt;item in items | filter:searchText as results  track by item.id&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;track by&lt;/code&gt; の式は最後に来なければなりません-任意のフィルタの後、およびエイリアスの式： &lt;code&gt;item in items | filter:searchText as results track by item.id&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8b05e820f0b4e3dbb8babe7b4acadcbcf440844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the default &lt;code&gt;trustedResourceUrlList&lt;/code&gt; of 'self' is not recommended if your app shares its origin with other apps! It is a good idea to limit it to only your application's directory.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;アプリが他のアプリとオリジンを共有している場合、デフォルトの「self」の &lt;code&gt;trustedResourceUrlList&lt;/code&gt; は推奨されません。アプリケーションのディレクトリのみに制限することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5c758091459e087cd64a7d9d853e92c0229d1b7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the default whitelist of 'self' is not recommended if your app shares its origin with other apps! It is a good idea to limit it to only your application's directory.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;アプリが他のアプリとその起源を共有している場合、デフォルトの「自己」のホワイトリストは推奨されません！アプリケーションのディレクトリのみに制限することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="580217ca4b9a925610a894a2a8a3fbeec3d61913" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this function only affects the options set on the &lt;code&gt;ngModelController&lt;/code&gt;, and not the options on the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; directive from which they might have been obtained initially.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数は &lt;code&gt;ngModelController&lt;/code&gt; に設定されたオプションにのみ影響し、最初に取得された&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;ディレクティブのオプションには影響しません。</target>
        </trans-unit>
        <trans-unit id="d7a9b2da896eca14042d2367f2756e8843535ce0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first. If you just want to create custom directives, we recommend the &lt;a href=&quot;directive&quot;&gt;directives guide&lt;/a&gt;. If you want a deeper look into AngularJS's compilation process, you're in the right place.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このガイドは、AngularJSの基本に既に精通している開発者を対象としています。始めたばかりの場合は、最初に&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;チュートリアル&lt;/a&gt;をお勧めします。カスタムディレクティブを作成するだけの場合は、&lt;a href=&quot;directive&quot;&gt;ディレクティブガイド&lt;/a&gt;をお勧めします。AngularJSのコンパイルプロセスをさらに詳しく知りたい場合は、適切な場所にいます。</target>
        </trans-unit>
        <trans-unit id="06f01bce739b9a30fca8b2e435855aebf0d4be03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first. If you're looking for the &lt;strong&gt;directives API&lt;/strong&gt;, you can find it in the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このガイドは、AngularJSの基本に既に精通している開発者を対象としています。始めたばかりの場合は、最初に&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;チュートリアル&lt;/a&gt;をお勧めします。あなたが探している場合は&lt;strong&gt;ディレクティブのAPI&lt;/strong&gt;、あなたはそれを見つけることができます&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; APIドキュメント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7bf0543d9aad4b2ba4b3e77e506fe9ddef0a1e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first. If you just want to create custom directives, we recommend the &lt;a href=&quot;directive&quot;&gt;directives guide&lt;/a&gt;. If you want a deeper look into AngularJS's compilation process, you're in the right place.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このガイドは、AngularJSの基本に既に精通している開発者を対象としています。始めたばかりの場合は、最初に&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;チュートリアル&lt;/a&gt;をお勧めします。カスタムディレクティブを作成するだけの場合は、&lt;a href=&quot;directive&quot;&gt;ディレクティブガイド&lt;/a&gt;をお勧めします。AngularJSのコンパイルプロセスを詳しく調べたい場合は、適切な場所にいます。</target>
        </trans-unit>
        <trans-unit id="382775d4e2e2878662ae90d8914053bb159602b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first. If you're looking for the &lt;strong&gt;directives API&lt;/strong&gt;, you can find it in the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このガイドは、AngularJSの基本に既に精通している開発者を対象としています。始めたばかりの場合は、最初に&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;チュートリアル&lt;/a&gt;をお勧めします。あなたが探している場合は&lt;strong&gt;ディレクティブのAPI&lt;/strong&gt;、あなたはそれを見つけることができます&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; APIドキュメント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ca6b07f8e9745f83f6cc1954ff3ba302eda41da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;input[email]&lt;/code&gt; uses a regex to validate email addresses that is derived from the regex used in Chromium, which may not fulfill your app's requirements. If you need stricter (e.g. requiring a top-level domain), or more relaxed validation (e.g. allowing IPv6 address literals) you can use &lt;code&gt;ng-pattern&lt;/code&gt; or modify the built-in validators (see the &lt;a href=&quot;../../../guide/forms&quot;&gt;Forms guide&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;input[email]&lt;/code&gt; は、正規表現を使用して、Chromiumで使用されている正規表現から派生したメールアドレスを検証します。これは、アプリの要件を満たしていない可能性があります。より厳密なもの（トップレベルドメインの要求など）またはより緩和された検証（IPv6アドレスリテラルの許可など）が必要な場合は、 &lt;code&gt;ng-pattern&lt;/code&gt; を使用するか、組み込みのバリデーターを変更できます（&lt;a href=&quot;../../../guide/forms&quot;&gt;フォームガイドを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d22ee8558a30b08ad6773cab5195b08247eb462a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;input[url]&lt;/code&gt; uses a regex to validate urls that is derived from the regex used in Chromium. If you need stricter validation, you can use &lt;code&gt;ng-pattern&lt;/code&gt; or modify the built-in validators (see the &lt;a href=&quot;../../../guide/forms&quot;&gt;Forms guide&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;input[url]&lt;/code&gt; は、正規表現を使用して、Chromiumで使用される正規表現から派生したURLを検証します。より厳密な検証が必要な場合は、 &lt;code&gt;ng-pattern&lt;/code&gt; を使用するか、組み込みのバリデーターを変更できます（&lt;a href=&quot;../../../guide/forms&quot;&gt;フォームガイドを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="43578b6de6d5a04f8a47794d2395d123f9352a38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;ngSelected&lt;/code&gt; does not interact with the &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;ngModel&lt;/code&gt; directives, it only sets the &lt;code&gt;selected&lt;/code&gt; attribute on the element. If you are using &lt;code&gt;ngModel&lt;/code&gt; on the select, you should not use &lt;code&gt;ngSelected&lt;/code&gt; on the options, as &lt;code&gt;ngModel&lt;/code&gt; will set the select value and selected options.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;ngSelected&lt;/code&gt; は、 &lt;code&gt;select&lt;/code&gt; および &lt;code&gt;ngModel&lt;/code&gt; ディレクティブと相互作用しません。要素の &lt;code&gt;selected&lt;/code&gt; 属性を設定するだけです。使用している場合は &lt;code&gt;ngModel&lt;/code&gt; を選択の上、あなたは使用しないでください &lt;code&gt;ngSelected&lt;/code&gt; を通り、オプションに &lt;code&gt;ngModel&lt;/code&gt; が選択値と選択したオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="9674dd656cd0bb33b36917505723e467176e6355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;null&lt;/code&gt; values use &lt;code&gt;'null'&lt;/code&gt; as their type.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt; 値は、タイプとして &lt;code&gt;'null'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7ce3871382cfc81e140c332a7381c6d7ded995c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;replace&lt;/code&gt; is deprecated in AngularJS and has been removed in the new Angular (v2+).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;replace&lt;/code&gt; はAngularJSでは非推奨であり、新しいAngular（v2 +）では削除されています。</target>
        </trans-unit>
        <trans-unit id="094902b4f074c52d206de76a0d6c62c38c4f99cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Link&lt;/em&gt; means setting up listeners on the DOM and setting up &lt;code&gt;$watch&lt;/code&gt; on the Scope to keep the two in sync.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;リンクと&lt;/em&gt;は、DOMでリスナーを設定し、スコープで &lt;code&gt;$watch&lt;/code&gt; を設定して、2つのリスナーを同期させることです。</target>
        </trans-unit>
        <trans-unit id="abd92687b99044b4eddf773d671c4667439b4622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="4e7e869df02e986a8bd9dd779b5592b5c9faf996" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;%24compile#-replace-.html&quot;&gt;&lt;code&gt;replace: true&lt;/code&gt;&lt;/a&gt; is deprecated and not recommended to use, mainly due to the issues listed here. It has been completely removed in the new Angular.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;%24compile#-replace-.html&quot;&gt; &lt;code&gt;replace: true&lt;/code&gt; &lt;/a&gt;は非推奨であり、主にここにリストされている問題のため、使用は推奨されません。新しいAngularでは完全に削除されています。</target>
        </trans-unit>
        <trans-unit id="a4451c5f79942d8017493f279d2afc73973a025d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;ngForm&lt;/code&gt; cannot be used as a replacement for &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, because it lacks its &lt;a href=&quot;https://html.spec.whatwg.org/#the-form-element&quot;&gt;built-in HTML functionality&lt;/a&gt;. Specifically, you cannot submit &lt;code&gt;ngForm&lt;/code&gt; like a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. That means, you cannot send data to the server with &lt;code&gt;ngForm&lt;/code&gt;, or integrate it with &lt;a href=&quot;ngsubmit&quot;&gt;&lt;code&gt;ngSubmit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;ngForm&lt;/code&gt; には&lt;a href=&quot;https://html.spec.whatwg.org/#the-form-element&quot;&gt;組み込みのHTML機能&lt;/a&gt;がないため、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; の代わりに使用することはできません。特に、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグのように &lt;code&gt;ngForm&lt;/code&gt; を送信することはできません。ことは、あなたがサーバーにデータを送信することはできません &lt;code&gt;ngForm&lt;/code&gt; 、またはとの統合&lt;a href=&quot;ngsubmit&quot;&gt; &lt;code&gt;ngSubmit&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d01ba8914ae532b4b38f3b54193bdb550f9cf269" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For fake HTTP backend implementation suitable for end-to-end testing or backend-less development please see &lt;a href=&quot;../../ngmocke2e/service/%24httpbackend&quot;&gt;e2e $httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：エンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装については、&lt;a href=&quot;../../ngmocke2e/service/%24httpbackend&quot;&gt;e2e $ httpBackend mock&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b02c202d12207861a5f5725222e593ed8c38b35f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For fake http backend implementation suitable for unit testing please see &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;unit-testing $httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：単体テストに適した偽のhttpバックエンド実装については&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;、単体テスト$ httpBackendモック&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c97b6b23eb89dc034c80ac1fd70c6ded60d55024" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Generally, the events that are fired correspond 1:1 to &lt;code&gt;$animate&lt;/code&gt; method names, e.g. &lt;a href=&quot;%24animate#addClass.html&quot;&gt;addClass()&lt;/a&gt; will fire &lt;code&gt;addClass&lt;/code&gt;, and &lt;a href=&quot;../directive/ngclass&quot;&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; will fire &lt;code&gt;addClass&lt;/code&gt; if classes are added, and &lt;code&gt;removeClass&lt;/code&gt; if classes are removed. However, there are two exceptions:</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：一般的に、対応1解雇されるイベント：1〜 &lt;code&gt;$animate&lt;/code&gt; メソッド名、例えば&lt;a href=&quot;%24animate#addClass.html&quot;&gt;addClass（）が&lt;/a&gt;起動します &lt;code&gt;addClass&lt;/code&gt; を、そして&lt;a href=&quot;../directive/ngclass&quot;&gt; &lt;code&gt;ngClass&lt;/code&gt; が&lt;/a&gt;発生します &lt;code&gt;addClass&lt;/code&gt; をクラスが追加された場合、および &lt;code&gt;removeClass&lt;/code&gt; クラスが削除された場合。ただし、2つの例外があります。</target>
        </trans-unit>
        <trans-unit id="7cacd31a04d29b782a40c79d6c3ab3a6d3435a24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the array contains objects that reference themselves, filtering is not possible.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：配列に自身を参照するオブジェクトが含まれている場合、フィルタリングはできません。</target>
        </trans-unit>
        <trans-unit id="ac4a26705c378eb8deb6df0e71f71d7c21815409" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you have assignment in &lt;code&gt;ngInit&lt;/code&gt; along with a &lt;a href=&quot;../service/%24filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;, make sure you have parentheses to ensure correct operator precedence:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;../service/%24filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;とともに &lt;code&gt;ngInit&lt;/code&gt; に割り当てがある場合は、括弧を使用して、演算子の優先順位が正しいことを確認してください。</target>
        </trans-unit>
        <trans-unit id="458f3e8132df2dd3d5450a74a9df936fbcdd5440" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Intervals created by this service must be explicitly destroyed when you are finished with them. In particular they are not automatically destroyed when a controller's scope or a directive's element are destroyed. You should take this into consideration and make sure to always cancel the interval at the appropriate moment. See the example below for more details on how and when to do this.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このサービスによって作成された間隔は、終了時に明示的に破棄する必要があります。特に、コントローラーのスコープまたはディレクティブの要素が破棄されても、自動的には破棄されません。これを考慮に入れて、常に適切なタイミングで間隔をキャンセルするようにしてください。これを行う方法とタイミングの詳細については、以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba6f1fdd102bb501811f6bf2972b3d2642460a55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The element will be taken into account only as long as its &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;fixed&lt;/code&gt;. This option is useful, when dealing with responsive navbars/headers that adjust their height and/or positioning according to the viewport's size.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：要素は、その &lt;code&gt;position&lt;/code&gt; が &lt;code&gt;fixed&lt;/code&gt; 設定されている場合にのみ考慮されます。このオプションは、ビューポートのサイズに応じて高さや位置を調整するレスポンシブナビゲーションバー/ヘッダーを扱う場合に便利です。</target>
        </trans-unit>
        <trans-unit id="40dca13cccab54863c3086362ebaf70a41480134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The new attributes will not be treated as URI attributes, which means their values will not be sanitized as URIs using &lt;code&gt;$compileProvider&lt;/code&gt;'s &lt;a href=&quot;../../ng/provider/%24compileprovider#aHrefSanitizationTrustedUrlList.html&quot;&gt;aHrefSanitizationTrustedUrlList&lt;/a&gt; and &lt;a href=&quot;../../ng/provider/%24compileprovider#imgSrcSanitizationTrustedUrlList.html&quot;&gt;imgSrcSanitizationTrustedUrlList&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：新しい属性はURI属性として扱われません。つまり、それらの値は、 &lt;code&gt;$compileProvider&lt;/code&gt; の&lt;a href=&quot;../../ng/provider/%24compileprovider#aHrefSanitizationTrustedUrlList.html&quot;&gt;aHrefSanitizationTrustedUrlList&lt;/a&gt;および&lt;a href=&quot;../../ng/provider/%24compileprovider#imgSrcSanitizationTrustedUrlList.html&quot;&gt;imgSrcSanitizationTrustedUrlList&lt;/a&gt;を使用してURIとしてサニタイズされません。</target>
        </trans-unit>
        <trans-unit id="137a110690fcaf3ac66664419099f281ac00252c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The new attributes will not be treated as URI attributes, which means their values will not be sanitized as URIs using &lt;code&gt;$compileProvider&lt;/code&gt;'s &lt;a href=&quot;../../ng/provider/%24compileprovider#aHrefSanitizationWhitelist.html&quot;&gt;aHrefSanitizationWhitelist&lt;/a&gt; and &lt;a href=&quot;../../ng/provider/%24compileprovider#imgSrcSanitizationWhitelist.html&quot;&gt;imgSrcSanitizationWhitelist&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：新しい属性はURI属性として扱われません。&lt;a href=&quot;../../ng/provider/%24compileprovider#aHrefSanitizationWhitelist.html&quot;&gt;つまり&lt;/a&gt;、 &lt;code&gt;$compileProvider&lt;/code&gt; のaHrefSanitizationWhitelistおよび&lt;a href=&quot;../../ng/provider/%24compileprovider#imgSrcSanitizationWhitelist.html&quot;&gt;imgSrcSanitizationWhitelist&lt;/a&gt;を使用して、それらの値がURIとしてサニタイズされません。</target>
        </trans-unit>
        <trans-unit id="55917c01e65338e57270513362a867e1b4c0feee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Typically directives are registered with &lt;code&gt;module.directive&lt;/code&gt;. The example below is to illustrate how &lt;code&gt;$compile&lt;/code&gt; works.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：通常、ディレクティブは &lt;code&gt;module.directive&lt;/code&gt; で登録されます。以下の例は、 &lt;code&gt;$compile&lt;/code&gt; 動作を示しています。</target>
        </trans-unit>
        <trans-unit id="b0494f4ee055225c681e0e403b86a484ffd8980e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP: &lt;/strong&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource&quot;&gt;Building a RESTful web service&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;End to End with Laravel 4 (video)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;PHP：&lt;/strong&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource&quot;&gt;RESTfulなWebサービスを構築&lt;/a&gt;、&lt;a href=&quot;http://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;Laravel 4との端から端まで（動画）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0b0b5a4d5f92ad612f527894de27f246836d4b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP: &lt;/strong&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource&quot;&gt;Building a RESTful web service&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;End to End with Laravel 4 (video)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;PHP：&lt;/strong&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource&quot;&gt;RESTfulなWebサービスを構築&lt;/a&gt;、&lt;a href=&quot;https://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;Laravel 4との端から端まで（動画）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b054fa14b9f8995a1c15e748a733fb1cf28c399a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Paid online:&lt;/strong&gt;&lt;a href=&quot;https://www.pluralsight.com/search?q=angularjs&quot;&gt;Pluralsight&lt;/a&gt;, &lt;a href=&quot;https://tutsplus.com/course/easier-js-apps-with-angular/&quot;&gt;Tuts+&lt;/a&gt;, &lt;a href=&quot;http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/133318-2.html&quot;&gt;lynda.com&lt;/a&gt;, &lt;a href=&quot;http://www.wintellectnow.com/Course/Detail/mastering-angularjs&quot;&gt;WintellectNOW (4 lessons)&lt;/a&gt;, &lt;a href=&quot;https://www.packtpub.com/web-development/angularjs-maintaining-web-applications&quot;&gt;Packt&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;オンラインで&lt;/strong&gt;&lt;a href=&quot;https://www.pluralsight.com/search?q=angularjs&quot;&gt;支払われる&lt;/a&gt;&lt;strong&gt;：&lt;/strong&gt;Pluralsight、Tuts &lt;a href=&quot;https://tutsplus.com/course/easier-js-apps-with-angular/&quot;&gt;+&lt;/a&gt;、&lt;a href=&quot;http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/133318-2.html&quot;&gt;lynda.com&lt;/a&gt;、&lt;a href=&quot;http://www.wintellectnow.com/Course/Detail/mastering-angularjs&quot;&gt;WintellectNOW（4レッスン）&lt;/a&gt;、&lt;a href=&quot;https://www.packtpub.com/web-development/angularjs-maintaining-web-applications&quot;&gt;Packt&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ed46aedfd7b0fd6c026a8e38d2a8ce283872b1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Paid onsite:&lt;/strong&gt;&lt;a href=&quot;http://angularbootcamp.com/&quot;&gt;angularbootcamp.com&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;オンサイトで&lt;/strong&gt;&lt;a href=&quot;http://angularbootcamp.com/&quot;&gt;支払い済み&lt;/a&gt;&lt;strong&gt;：&lt;/strong&gt;angularbootcamp.com</target>
        </trans-unit>
        <trans-unit id="ef361f872ee0abe6437ca670508f1edf68b6175d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing an expression generated from user provided content as a predicate to &lt;code&gt;orderBy&lt;/code&gt; pipe&lt;/strong&gt;: &lt;code&gt;{{ value | orderBy : userContent }}&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;ユーザー提供のコンテンツから生成された式を述語として &lt;code&gt;orderBy&lt;/code&gt; パイプに渡します&lt;/strong&gt;： &lt;code&gt;{{ value | orderBy : userContent }}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a49a97f0edbf657da69f757aee03a753983b32c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing an expression generated from user-provided content in calls to services that parse expressions&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;式を解析するサービスへの呼び出しで、ユーザー提供のコンテンツから生成された式を渡す&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ba373bfdf6ea17c370636f865ce98036d187cbe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing an expression generated from user-provided content in calls to the following methods on a &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;scope&quot;&gt;スコープの&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;次のメソッドへの呼び出しで、ユーザー提供のコンテンツから生成された式を渡し&lt;/strong&gt;&lt;strong&gt;ます&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="cf7b6c34e4e6dfb6bb513c537e719eef4875800a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Progressive enhancement&lt;/strong&gt;: Some users do not browse with JavaScript enabled or do not have the latest browser. An accessible message about site requirements can inform users and improve the experience.</source>
          <target state="translated">&lt;strong&gt;プログレッシブエンハンスメント&lt;/strong&gt;：一部のユーザーは、JavaScriptを有効にして閲覧しないか、最新のブラウザを使用していません。サイトの要件に関するアクセス可能なメッセージは、ユーザーに通知し、エクスペリエンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="e5dbbea29c67d64aa80bbcb732589e138e7f1c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b2caabe019481b97276f492b585ec123276f9ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RESTful services:&lt;/strong&gt;&lt;a href=&quot;https://github.com/mgonto/restangular&quot;&gt;Restangular&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;RESTfulサービス：&lt;/strong&gt;&lt;a href=&quot;https://github.com/mgonto/restangular&quot;&gt;Restangular&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fc726fc1694d2026c213ec7c238c454994e3951" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rails: &lt;/strong&gt;&lt;a href=&quot;http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/&quot;&gt;Tutorial&lt;/a&gt;, &lt;a href=&quot;https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4&quot;&gt;AngularJS with Rails4&lt;/a&gt;, &lt;a href=&quot;https://github.com/hiravgandhi/angularjs-rails&quot;&gt;angularjs-rails&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Rails：&lt;/strong&gt;&lt;a href=&quot;http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/&quot;&gt;チュートリアル&lt;/a&gt;、&lt;a href=&quot;https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4&quot;&gt;AngularJS with Rails4&lt;/a&gt;、&lt;a href=&quot;https://github.com/hiravgandhi/angularjs-rails&quot;&gt;angularjs-rails&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="35f61f48a504bab275e88d2b627834431d260550" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Realtime Communication: &lt;/strong&gt;&lt;a href=&quot;http://www.creativebloq.com/javascript/angularjs-collaboration-board-socketio-2132885&quot;&gt;Socket.io&lt;/a&gt;, &lt;a href=&quot;https://github.com/jeffbcross/omnibinder&quot;&gt;OmniBinder&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;リアルタイム通信：&lt;/strong&gt;&lt;a href=&quot;http://www.creativebloq.com/javascript/angularjs-collaboration-board-socketio-2132885&quot;&gt;Socket.io&lt;/a&gt;、&lt;a href=&quot;https://github.com/jeffbcross/omnibinder&quot;&gt;OmniBinder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4c4b1881e3ea790d1b4cb8dcf56958e79b072995" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RegExp&lt;/strong&gt; (&lt;em&gt;see caveat below&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt;RegExp&lt;/strong&gt;（&lt;em&gt;下記の警告を参照&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="2f424009ac2309fbb979e7f9569fcfa54550fbb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Registering callbacks:&lt;/strong&gt; Registering callbacks clutters your code, making it hard to see the forest for the trees. Removing common boilerplate code such as callbacks is a good thing. It vastly reduces the amount of JavaScript coding &lt;em&gt;you&lt;/em&gt; have to do, and it makes it easier to see what your application does.</source>
          <target state="translated">&lt;strong&gt;コールバックの登録：コールバックを&lt;/strong&gt;登録すると、コードが煩雑になり、ツリーのフォレストが見づらくなります。コールバックなどの一般的な定型コードを削除することは良いことです。それは非常にコーディングのJavaScript量削減&lt;em&gt;あなたが&lt;/em&gt;しなければならないが、それはそれが簡単にあなたのアプリケーションが何を見することができます。</target>
        </trans-unit>
        <trans-unit id="8bda6b80bdaa77386bd7e68ba0999abefbe67c29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SEO:&lt;/strong&gt;&lt;a href=&quot;http://www.yearofmoo.com/2012/11/angularjs-and-seo.html&quot;&gt;By hand&lt;/a&gt;, &lt;a href=&quot;http://prerender.io/&quot;&gt;prerender.io&lt;/a&gt;, &lt;a href=&quot;http://www.brombone.com/&quot;&gt;Brombone&lt;/a&gt;, &lt;a href=&quot;http://getseojs.com/&quot;&gt;SEO.js&lt;/a&gt;, &lt;a href=&quot;http://www.seo4ajax.com/&quot;&gt;SEO4Ajax&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;SEO：&lt;/strong&gt;&lt;a href=&quot;http://www.yearofmoo.com/2012/11/angularjs-and-seo.html&quot;&gt;手作業で&lt;/a&gt;、&lt;a href=&quot;http://prerender.io/&quot;&gt;prerender.io&lt;/a&gt;、&lt;a href=&quot;http://www.brombone.com/&quot;&gt;Brombone&lt;/a&gt;、&lt;a href=&quot;http://getseojs.com/&quot;&gt;SEO.js&lt;/a&gt;、&lt;a href=&quot;http://www.seo4ajax.com/&quot;&gt;SEO4Ajax&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b7329df37cbcee74f573d40974e8bfc0d92b934" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SQL and NoSQL backends:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SQLおよびNoSQLバックエンド：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acf1014f44dc0693085e4a0ab0bf149931716756" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scope destruction&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スコープ破壊&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076280b82e27232af3c9aa1b34ea31f26250c8e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security:&lt;/strong&gt;&lt;a href=&quot;guide/security&quot;&gt;Security Docs&lt;/a&gt;, &lt;a href=&quot;api/ng/service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;, &lt;a href=&quot;api/ng/directive/ngcsp&quot;&gt;Content Security Policy&lt;/a&gt;, &lt;a href=&quot;api/ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;セキュリティ：&lt;/strong&gt;&lt;a href=&quot;guide/security&quot;&gt;セキュリティドキュメント&lt;/a&gt;、&lt;a href=&quot;api/ng/service/%24sce&quot;&gt;厳格なコンテキストエスケープ&lt;/a&gt;、&lt;a href=&quot;api/ng/directive/ngcsp&quot;&gt;コンテンツセキュリティポリシー&lt;/a&gt;、&lt;a href=&quot;api/ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;、&lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;ビデオ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3818895c2eaf69923be55c09ae40035c7a33fc1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security:&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Security:&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;video&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="731d5463075faa14e1925cfee5778a98b6fb8b60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specific UI Elements:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;特定のUI要素：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9d146aba5991ca9690d0ebf1b69c1d2ad2110eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String&lt;/strong&gt; (except the special value &lt;code&gt;'self'&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;文字列&lt;/strong&gt;（特別な値 &lt;code&gt;'self'&lt;/code&gt; を除く）</target>
        </trans-unit>
        <trans-unit id="45fd1f66005840cbb6e08d3413cddd2bf1c094d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Text alternatives&lt;/strong&gt;: Add alternate text content to make visual information accessible using &lt;a href=&quot;http://www.w3.org/TR/html-alt-techniques/&quot;&gt;these W3C guidelines&lt;/a&gt;. The appropriate technique depends on the specific markup but can be accomplished using offscreen spans, &lt;code&gt;aria-label&lt;/code&gt; or label elements, image &lt;code&gt;alt&lt;/code&gt; attributes, &lt;code&gt;figure&lt;/code&gt;/&lt;code&gt;figcaption&lt;/code&gt; elements and more.</source>
          <target state="translated">&lt;strong&gt;代替テキスト&lt;/strong&gt;：使用して視覚的な情報にアクセスできるように代替テキストの内容を追加します。&lt;a href=&quot;http://www.w3.org/TR/html-alt-techniques/&quot;&gt;これらのW3Cのガイドラインを&lt;/a&gt;。適切な手法は、特定のマークアップによって異なりますが、オフスクリーンスパン、 &lt;code&gt;aria-label&lt;/code&gt; またはlabel要素、画像の &lt;code&gt;alt&lt;/code&gt; 属性、 &lt;code&gt;figure&lt;/code&gt; / &lt;code&gt;figcaption&lt;/code&gt; 要素などを使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="6c47c9e2038c2eaa848fd0b4109affbd2ef7aa9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Text alternatives&lt;/strong&gt;: Add alternate text content to make visual information accessible using &lt;a href=&quot;https://www.w3.org/TR/html-alt-techniques/&quot;&gt;these W3C guidelines&lt;/a&gt;. The appropriate technique depends on the specific markup but can be accomplished using offscreen spans, &lt;code&gt;aria-label&lt;/code&gt; or label elements, image &lt;code&gt;alt&lt;/code&gt; attributes, &lt;code&gt;figure&lt;/code&gt;/&lt;code&gt;figcaption&lt;/code&gt; elements and more.</source>
          <target state="translated">&lt;strong&gt;代替テキスト&lt;/strong&gt;：使用して視覚的な情報にアクセスできるように代替テキストの内容を追加します。&lt;a href=&quot;https://www.w3.org/TR/html-alt-techniques/&quot;&gt;これらのW3Cのガイドラインを&lt;/a&gt;。適切な手法は特定のマークアップによって異なりますが、オフスクリーンスパン、 &lt;code&gt;aria-label&lt;/code&gt; またはlabel要素、画像の &lt;code&gt;alt&lt;/code&gt; 属性、 &lt;code&gt;figure&lt;/code&gt; / &lt;code&gt;figcaption&lt;/code&gt; 要素などを使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="fba8d19cd4f7dea6aaa365182952d5236f7ad9d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The $location service:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;$ locationサービス：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7007892454ee4088595e9c377a077a8c78c5c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a dangerous API, which you use at your own risk!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これは危険なAPIであり、自己責任で使用してください！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="101f5499ee7b85073fb5b7d462d7ebab58281432" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Touch events:&lt;/strong&gt;&lt;a href=&quot;api/ngtouch&quot;&gt;Touch events&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;タッチイベント：&lt;/strong&gt;&lt;a href=&quot;api/ngtouch&quot;&gt;タッチイベント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca46b9f8a99de723a70b66185c89b9dce9c64fbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Underscore notation&lt;/strong&gt;: The use of the underscore notation (e.g.: &lt;code&gt;_$rootScope_&lt;/code&gt;) is a convention wide spread in AngularJS community to keep the variable names clean in your tests. That's why the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;&lt;code&gt;$injector&lt;/code&gt;&lt;/a&gt; strips out the leading and the trailing underscores when matching the parameters. The underscore rule applies &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; if the name starts &lt;strong&gt;and&lt;/strong&gt; ends with exactly one underscore, otherwise no replacing happens.</source>
          <target state="translated">&lt;strong&gt;アンダースコア表記法&lt;/strong&gt;：アンダースコア表記法（例： &lt;code&gt;_$rootScope_&lt;/code&gt; ）は、テストで変数名をクリーンに保つために、AngularJSコミュニティで広く使用されている規則です。そのため、&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt; &lt;code&gt;$injector&lt;/code&gt; &lt;/a&gt;は、パラメーターを照合するときに、先頭と末尾のアンダースコアを削除します。下線の規則は、名前の開始&lt;strong&gt;と&lt;/strong&gt;終了がちょうど1つの下線の場合に&lt;strong&gt;&lt;em&gt;のみ&lt;/em&gt;&lt;/strong&gt;適用されます。それ以外の場合、置換は行われません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c9695aa3f0771d41376db49cc30e5d66abe41a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing:&lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;, &lt;a href=&quot;guide/unit-testing&quot;&gt;Unit testing&lt;/a&gt;, &lt;a href=&quot;guide/services#unit-testing.html&quot;&gt;Testing services&lt;/a&gt;,</source>
          <target state="translated">&lt;strong&gt;ユニットテスト：&lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;、&lt;a href=&quot;guide/unit-testing&quot;&gt;ユニットテスト&lt;/a&gt;、&lt;a href=&quot;guide/services#unit-testing.html&quot;&gt;テストサービス&lt;/a&gt;、</target>
        </trans-unit>
        <trans-unit id="eeca4842d131502c4e4d20da777344377746dd2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing:&lt;/strong&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=YG5DEzaQBIc&quot;&gt;Using Karma (video)&lt;/a&gt;, &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;Karma in Webstorm&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;単体テスト：&lt;/strong&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=YG5DEzaQBIc&quot;&gt;Karma（ビデオ）&lt;/a&gt;、&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;Webstorm&lt;/a&gt;でのKarmaの使用</target>
        </trans-unit>
        <trans-unit id="4e96eb862380ee10159ac0f04081c6be09d5050f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing:&lt;/strong&gt;&lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;, &lt;a href=&quot;guide/unit-testing&quot;&gt;Unit testing&lt;/a&gt;, &lt;a href=&quot;guide/services#unit-testing.html&quot;&gt;Testing services&lt;/a&gt;,</source>
          <target state="translated">&lt;strong&gt;ユニットテスト：&lt;/strong&gt;&lt;a href=&quot;https://karma-runner.github.io&quot;&gt;カルマ&lt;/a&gt;、&lt;a href=&quot;guide/unit-testing&quot;&gt;ユニットテスト&lt;/a&gt;、&lt;a href=&quot;guide/services#unit-testing.html&quot;&gt;テストサービス&lt;/a&gt;、</target>
        </trans-unit>
        <trans-unit id="61766f4d41999f9545c0e79b733db41b2c455d4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing:&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YG5DEzaQBIc&quot;&gt;Using Karma (video)&lt;/a&gt;, &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;Karma in Webstorm&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ユニットテスト：&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YG5DEzaQBIc&quot;&gt;Karma（ビデオ）の使用&lt;/a&gt;&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;、Webstorm&lt;/a&gt;でのKarma</target>
        </trans-unit>
        <trans-unit id="c1824507e8d65146ba51fd2f682f8bce763fbcb3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Visualization:&lt;/strong&gt;&lt;a href=&quot;http://gaslight.co/blog/angular-backed-svgs&quot;&gt;SVG&lt;/a&gt;, &lt;a href=&quot;http://www.ng-newsletter.com/posts/d3-on-angular.html&quot;&gt;D3.js&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;視覚化：&lt;/strong&gt;&lt;a href=&quot;http://gaslight.co/blog/angular-backed-svgs&quot;&gt;SVG&lt;/a&gt;、&lt;a href=&quot;http://www.ng-newsletter.com/posts/d3-on-angular.html&quot;&gt;D3.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43b420f64ccef0d7a45849c939b529e0440f143d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Be careful not to cause &quot;double-submission&quot; by using both the &lt;code&gt;ngClick&lt;/code&gt; and &lt;code&gt;ngSubmit&lt;/code&gt; handlers together. See the &lt;a href=&quot;form#submitting-a-form-and-preventing-the-default-action.html&quot;&gt;&lt;code&gt;form&lt;/code&gt; directive documentation&lt;/a&gt; for a detailed discussion of when &lt;code&gt;ngSubmit&lt;/code&gt; may be triggered.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;code&gt;ngSubmit&lt;/code&gt; ハンドラーとngSubmitハンドラーの両方を一緒に使用して、「二重 &lt;code&gt;ngClick&lt;/code&gt; 」を引き起こさないように注意してください。 &lt;code&gt;ngSubmit&lt;/code&gt; がトリガーされるタイミングの詳細については、&lt;a href=&quot;form#submitting-a-form-and-preventing-the-default-action.html&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;ディレクティブのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2756abf1eaa19230be9bb95e04f5d2e16307d6dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Warning&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5217522448e77af8b97a21a877276a4ab365b46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Watcher registration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ウォッチャー登録&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28bd0a25092a659fd8466d8287ab8ba78d234c4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What does it mean to &quot;compile&quot; an HTML template?&lt;/strong&gt; For AngularJS, &quot;compilation&quot; means attaching directives to the HTML to make it interactive. The reason we use the term &quot;compile&quot; is that the recursive process of attaching directives mirrors the process of compiling source code in &lt;a href=&quot;http://en.wikipedia.org/wiki/Compiled_languages&quot;&gt;compiled programming languages&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;HTMLテンプレートを「コンパイル」するとはどういう意味ですか？&lt;/strong&gt;AngularJSの場合、「コンパイル」とは、HTMLにディレクティブを付加してインタラクティブにすることを意味します。「コンパイル」という用語を使用する理由は、ディレクティブをアタッチする再帰的なプロセスが、&lt;a href=&quot;http://en.wikipedia.org/wiki/Compiled_languages&quot;&gt;コンパイルされたプログラミング言語&lt;/a&gt;でソースコードをコンパイルするプロセスを反映しているためです。</target>
        </trans-unit>
        <trans-unit id="2d24291d6e3286f4e5bdbf1ae66c824b749125e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What does it mean to &quot;compile&quot; an HTML template?&lt;/strong&gt; For AngularJS, &quot;compilation&quot; means attaching directives to the HTML to make it interactive. The reason we use the term &quot;compile&quot; is that the recursive process of attaching directives mirrors the process of compiling source code in &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiled_languages&quot;&gt;compiled programming languages&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;HTMLテンプレートを「コンパイル」するとはどういう意味ですか？&lt;/strong&gt;AngularJSの場合、「コンパイル」とは、HTMLにディレクティブを添付してインタラクティブにすることを意味します。「コンパイル」という用語を使用する理由は、ディレクティブをアタッチする再帰的なプロセスが、&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiled_languages&quot;&gt;コンパイルされたプログラミング言語&lt;/a&gt;でソースコードをコンパイルするプロセスを反映しているためです。</target>
        </trans-unit>
        <trans-unit id="664e7640cdaa2696eb7827afab80580a8f9cf489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When should I use an attribute versus an element?&lt;/strong&gt; Use an element when you are creating a component that is in control of the template. The common case for this is when you are creating a Domain-Specific Language for parts of your template. Use an attribute when you are decorating an existing element with new functionality.</source>
          <target state="translated">&lt;strong&gt;属性と要素のどちらを使用すればよいですか？&lt;/strong&gt;テンプレートを制御するコンポーネントを作成する場合は、要素を使用します。この一般的なケースは、テンプレートの一部にドメイン固有言語を作成する場合です。既存の要素を新しい機能で装飾する場合は、属性を使用します。</target>
        </trans-unit>
        <trans-unit id="2feab5c0d7b5da0795b0fa56ef78488f3d7f1a9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workflow:&lt;/strong&gt;&lt;a href=&quot;https://github.com/yeoman/generator-angular&quot;&gt;Yeoman.io&lt;/a&gt; and &lt;a href=&quot;http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/&quot;&gt;AngularJS Yeoman Tutorial&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ワークフロー：&lt;/strong&gt;&lt;a href=&quot;https://github.com/yeoman/generator-angular&quot;&gt;Yeoman.io&lt;/a&gt;および&lt;a href=&quot;http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/&quot;&gt;AngularJS Yeomanチュートリアル&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f3f6ab59fb7d12e56b5eff068180765cef04fe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing tons of initialization code just to get started:&lt;/strong&gt; Typically you need to write a lot of plumbing just to get a basic &quot;Hello World&quot; AJAX app working. With AngularJS you can bootstrap your app easily using services, which are auto-injected into your application in a &lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;-like dependency-injection style. This allows you to get started developing features quickly. As a bonus, you get full control over the initialization process in automated tests.</source>
          <target state="translated">&lt;strong&gt;始めるためだけに大量の初期化コード&lt;/strong&gt;を作成する&lt;strong&gt;：&lt;/strong&gt;通常、基本的な「Hello World」AJAXアプリを機能させるために、多くの配管を作成する必要があります。AngularJSを使用すると、&lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guiceの&lt;/a&gt;ような依存関係注入スタイルでアプリケーションに自動注入されるサービスを使用して、アプリを簡単にブートストラップできます。これにより、機能の開発をすばやく開始できます。おまけとして、自動テストの初期化プロセスを完全に制御できます。</target>
        </trans-unit>
        <trans-unit id="837a994c27693c0ffafa5e8b6bbd93b59ef4b61a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can use suitably sanitized server-side templating to dynamically generate CSS, URLs, etc, but not for generating templates that are bootstrapped/compiled by AngularJS.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;適切にサニタイズされたサーバー側テンプレートを使用して、CSS、URLなどを動的に生成できますが、AngularJSによってブートストラップ/コンパイルされるテンプレートを生成するためには使用できません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f42b5ce071116456c1fc4e1cc56cd6b04c6d1be1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;a library&lt;/strong&gt; - a collection of functions which are useful when writing web apps. Your code is in charge and it calls into the library when it sees fit. E.g., &lt;code&gt;jQuery&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ライブラリ&lt;/strong&gt; -Webアプリを作成するときに役立つ関数のコレクション。あなたのコードが担当し、それが適切だと思われるときにライブラリを呼び出します。たとえば、 &lt;code&gt;jQuery&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98932b647226b8e2849198caedd642fb90dab6d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;actions&lt;/strong&gt; - &lt;code&gt;{Object.&amp;lt;Object&amp;gt;}&lt;/code&gt; - A hash with default actions declarations. Actions are high-level methods corresponding to RESTful actions/methods on resources. An action may specify what HTTP method to use, what URL to hit, if the return value will be a single object or a collection (array) of objects etc. For more details, see &lt;a href=&quot;../service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt;. The actions can also be enhanced or overwritten per resource class.</source>
          <target state="translated">&lt;strong&gt;アクション&lt;/strong&gt; - &lt;code&gt;{Object.&amp;lt;Object&amp;gt;}&lt;/code&gt; -デフォルトのアクション宣言を持つハッシュ。アクションは、リソースのRESTfulアクション/メソッドに対応する高レベルのメソッドです。アクションは、使用するHTTPメソッド、ヒットするURL、戻り値が単一のオブジェクトまたはオブジェクトのコレクション（配列）かどうかを指定する場合があります。詳細については、&lt;a href=&quot;../service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;参照してください。アクションは、リソースクラスごとに拡張または上書きすることもできます。</target>
        </trans-unit>
        <trans-unit id="2f2d2c0ce8d29d9f4e2bfa9fb62c6f4ed866864e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;addClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - space-separated CSS classes to add to element</source>
          <target state="translated">&lt;strong&gt;addClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -要素に追加するためのスペースで区切られたCSSクラス</target>
        </trans-unit>
        <trans-unit id="3b880e37bc32e5066151f7c349b650275f496d8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaChecked&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-checked tags</source>
          <target state="translated">&lt;strong&gt;ariaChecked&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-checkedタグを有効/無効にします</target>
        </trans-unit>
        <trans-unit id="b4566b629259ed3938a66f9e2c09e41cca0eff67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaDisabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-disabled tags</source>
          <target state="translated">&lt;strong&gt;ariaDisabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-disabledタグを有効/無効にする</target>
        </trans-unit>
        <trans-unit id="ec84a05dd50e86c6d693d672c9a56938940d4df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaHidden&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-hidden tags</source>
          <target state="translated">&lt;strong&gt;ariaHidden&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-hiddenタグを有効/無効にする</target>
        </trans-unit>
        <trans-unit id="f5b6a851da6c7f1da90b7c258c89ea999da5724f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaInvalid&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-invalid tags</source>
          <target state="translated">&lt;strong&gt;ariaInvalid&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-invalidタグを有効/無効にする</target>
        </trans-unit>
        <trans-unit id="30e1dd087a2dff3e1ba2b39d2a8f8f28db460895" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaReadonly&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-readonly tags</source>
          <target state="translated">&lt;strong&gt;ariaReadonly&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-readonlyタグを有効または無効にする</target>
        </trans-unit>
        <trans-unit id="74982eb7100114452e4662b17862a0c7316b3e8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaRequired&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-required tags</source>
          <target state="translated">&lt;strong&gt;ariaRequired&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-requiredタグを有効/無効にする</target>
        </trans-unit>
        <trans-unit id="3de219a7746396ec7fc8c7048e94be789af81626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaValue&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags</source>
          <target state="translated">&lt;strong&gt;ariaValue&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; aria-valuemin、aria-valuemax、およびaria-valuenowタグを有効または無効にする</target>
        </trans-unit>
        <trans-unit id="a93636a21222157a7d39caeced98d0d0220354e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bindKeydown&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables keyboard event binding on non-interactive elements (such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;li&lt;/code&gt;) using ng-click, making them more accessible to users of assistive technologies</source>
          <target state="translated">&lt;strong&gt;bindKeydown&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; ng-clickを使用して非インタラクティブ要素（ &lt;code&gt;div&lt;/code&gt; や &lt;code&gt;li&lt;/code&gt; など）のキーボードイベントバインディングを有効または無効にし、支援技術のユーザーがアクセスしやすくする</target>
        </trans-unit>
        <trans-unit id="1f938a576e462e2e78209117c19b46118b383162" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bindRoleForClick&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Adds role=button to non-interactive elements (such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;li&lt;/code&gt;) using ng-click, making them more accessible to users of assistive technologies</source>
          <target state="translated">&lt;strong&gt;bindRoleForClick&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; ng-clickを使用して非インタラクティブ要素（ &lt;code&gt;div&lt;/code&gt; や &lt;code&gt;li&lt;/code&gt; など）にrole = buttonを追加し、支援技術のユーザーがアクセスしやすくします</target>
        </trans-unit>
        <trans-unit id="1ebc19fcbae29f07eb55d62df4481b4901b11803" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Object}&lt;/code&gt; &amp;ndash; A boolean value or object created with &lt;a href=&quot;%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt; to enable or disable caching of the HTTP response. See &lt;a href=&quot;%24http#caching.html&quot;&gt;$http Caching&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Object}&lt;/code&gt; &amp;ndash; HTTP応答のキャッシュを有効または無効にするために&lt;a href=&quot;%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;作成されたブール値またはオブジェクト。詳細については、&lt;a href=&quot;%24http#caching.html&quot;&gt;$ httpキャッシュ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d19728a0bfc86797b2d9cc70edb8c8754da2aec7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cancellable&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, the request made by a &quot;non-instance&quot; call will be cancelled (if not already completed) by calling &lt;code&gt;$cancelRequest()&lt;/code&gt; on the call's return value. For more details, see &lt;a href=&quot;../service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt;. This can be overwritten per resource class or action.</source>
          <target state="translated">&lt;strong&gt;cancellable&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; trueの場合、「インスタンス以外」の呼び出しによって行われた要求は、呼び出しの戻り値で &lt;code&gt;$cancelRequest()&lt;/code&gt; を呼び出すことによってキャンセルされます（まだ完了していない場合）。詳細については、&lt;a href=&quot;../service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;参照してください。これは、リソースクラスまたはアクションごとに上書きできます。</target>
        </trans-unit>
        <trans-unit id="54ba2b4f61e1d9303b95bacf774efcb814bbe9c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;child scope&lt;/strong&gt; + &lt;strong&gt;child scope&lt;/strong&gt; =&amp;gt; Both directives will share one single child scope</source>
          <target state="translated">&lt;strong&gt;子スコープ&lt;/strong&gt; + &lt;strong&gt;子スコープ&lt;/strong&gt; =&amp;gt;両方のディレクティブが1つの子スコープを共有します</target>
        </trans-unit>
        <trans-unit id="8e9bcb2c30cc37bc699c2bf46b1e5cd7b8752bd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;child scope&lt;/strong&gt; + &lt;strong&gt;no scope&lt;/strong&gt; =&amp;gt; Both directives will share one single child scope</source>
          <target state="translated">&lt;strong&gt;子スコープ&lt;/strong&gt; + &lt;strong&gt;スコープ&lt;/strong&gt;&lt;strong&gt;なし&lt;/strong&gt; =&amp;gt;両方のディレクティブが単一の子スコープを共有します</target>
        </trans-unit>
        <trans-unit id="8502152cb2a6790191684eea0be8b0e6958819b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;config&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash; The configuration object that was used to generate the request.</source>
          <target state="translated">&lt;strong&gt;config&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash;リクエストの生成に使用された構成オブジェクト。</target>
        </trans-unit>
        <trans-unit id="662140cf1387a85b485f928c62a84c04f36e2aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash; Data to be sent as the request message data.</source>
          <target state="translated">&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash;リクエストメッセージデータとして送信されるデータ。</target>
        </trans-unit>
        <trans-unit id="5f1af385a1cc7a95bfbe95753d773f2d47e066fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash; The response body transformed with the transform functions.</source>
          <target state="translated">&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash;変換関数で変換された応答本文。</target>
        </trans-unit>
        <trans-unit id="b80e157d8b23723a50936794e8e443415bc93df4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - The cookie will be available only for this domain and its sub-domains. For security reasons the user agent will not accept the cookie if the current domain is not a sub-domain of this domain or equal to it.</source>
          <target state="translated">&lt;strong&gt;ドメイン&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -クッキーは、このドメインとそのサブドメインのために利用可能であろう。セキュリティ上の理由から、現在のドメインがこのドメインのサブドメインでないか、またはそれに等しい場合、ユーザーエージェントはCookieを受け入れません。</target>
        </trans-unit>
        <trans-unit id="128553ab9ab0e05c4ab4a84338d7a953631a3185" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;enabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; (default: false) If true, will rely on &lt;code&gt;history.pushState&lt;/code&gt; to change urls where supported. Will fall back to hash-prefixed paths in browsers that do not support &lt;code&gt;pushState&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;enabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;（デフォルト：false）trueの場合、 &lt;code&gt;history.pushState&lt;/code&gt; に依存して、サポートされているURLを変更します。 &lt;code&gt;pushState&lt;/code&gt; をサポートしないブラウザでは、ハッシュプレフィックス付きのパスにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="d727d563ac38884edda5ae3de43341e5d7ae4a4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event&lt;/strong&gt;&lt;code&gt;{String}&lt;/code&gt; - The name of the animation event (e.g. &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, &lt;code&gt;addClass&lt;/code&gt; etc).</source>
          <target state="translated">&lt;strong&gt;event &lt;/strong&gt; &lt;code&gt;{String}&lt;/code&gt; -アニメーションイベントの名前（例： &lt;code&gt;enter&lt;/code&gt; 、 &lt;code&gt;leave&lt;/code&gt; 、 &lt;code&gt;addClass&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="63abc4452ff2982408c11e34a986d4b004794707" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eventHandlers&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - Event listeners to be bound to the XMLHttpRequest object. To bind events to the XMLHttpRequest upload object, use &lt;code&gt;uploadEventHandlers&lt;/code&gt;. The handler will be called in the context of a &lt;code&gt;$apply&lt;/code&gt; block.</source>
          <target state="translated">&lt;strong&gt;eventHandlersが&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; -のXMLHttpRequestオブジェクトにバインドされるイベントリスナー。イベントをXMLHttpRequestアップロードオブジェクトにバインドするには、 &lt;code&gt;uploadEventHandlers&lt;/code&gt; を使用します。ハンドラーは &lt;code&gt;$apply&lt;/code&gt; ブロックのコンテキストで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dcfcdc7c176b0da776cad529dafbf2335547158e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; - &lt;code&gt;{string|Date}&lt;/code&gt; - String of the form &quot;Wdy, DD Mon YYYY HH:MM:SS GMT&quot; or a Date object indicating the exact date/time this cookie will expire.</source>
          <target state="translated">&lt;strong&gt;期限が切れる&lt;/strong&gt; - &lt;code&gt;{string|Date}&lt;/code&gt; -文字列形式&quot;WDY、DD月YYYY HH：MM：SS GMT&quot;のか、このクッキーの有効期限が切れる正確な日付/時刻を示すDateオブジェクト。</target>
        </trans-unit>
        <trans-unit id="2656cc29c637fb21f8e27327beb17e5e36dfd9e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;frameworks&lt;/strong&gt; - a particular implementation of a web application, where your code fills in the details. The framework is in charge and it calls into your code when it needs something app specific. E.g., &lt;code&gt;durandal&lt;/code&gt;, &lt;code&gt;ember&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;strong&gt;フレームワーク&lt;/strong&gt; -Webアプリケーションの特定の実装で、コードが詳細を入力します。フレームワークが担当し、アプリ固有の何かが必要なときにコードを呼び出します。たとえば、 &lt;code&gt;durandal&lt;/code&gt; 、 &lt;code&gt;ember&lt;/code&gt; などです。</target>
        </trans-unit>
        <trans-unit id="5670e234f5705492daf7befb2ad1d2ae5caf2766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;from&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - CSS properties &amp;amp; values at the beginning of animation. Must have matching &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;- &lt;code&gt;{Object}&lt;/code&gt; -アニメーションの開始時にCSSプロパティ＆値。に一致 &lt;code&gt;to&lt;/code&gt; ている必要があります</target>
        </trans-unit>
        <trans-unit id="0b091f4e3a87ebd01ba917c0b3435cc77e175a24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt;: A getter function called everytime &lt;code&gt;$anchorScroll()&lt;/code&gt; is executed. Must return a number representing the offset (in pixels).</source>
          <target state="translated">&lt;strong&gt;function&lt;/strong&gt;： &lt;code&gt;$anchorScroll()&lt;/code&gt; が実行されるたびに呼び出されるゲッター関数。オフセットを表す数値（ピクセル単位）を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="92e857dff4997c9bc1ff36c7b2cf176c608091e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hashPrefix(prefix)&lt;/strong&gt;: &lt;code&gt;{string}&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;hashPrefix（prefix）&lt;/strong&gt;： &lt;code&gt;{string}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="582f879f3edebaeff4ee118aaf6df855b64a7075" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash; Map of strings or functions which return strings representing HTTP headers to send to the server. If the return value of a function is null, the header will not be sent. Functions accept a config object as an argument.</source>
          <target state="translated">&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash;サーバーに送信するHTTPヘッダーを表す文字列を返す文字列または関数のマップ。関数の戻り値がnullの場合、ヘッダーは送信されません。関数は、構成オブジェクトを引数として受け入れます。</target>
        </trans-unit>
        <trans-unit id="e9daa8346bf248ada6861d23bf92e78d2db4888b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function([headerName])}&lt;/code&gt; &amp;ndash; Header getter function.</source>
          <target state="translated">&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function([headerName])}&lt;/code&gt; &amp;ndash;ヘッダーゲッター関数。</target>
        </trans-unit>
        <trans-unit id="feb861ab325127f385f259aec3c6d753d18eb488" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;html5Mode(mode)&lt;/strong&gt;: &lt;code&gt;{boolean|Object}&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;html5Mode（mode）&lt;/strong&gt;： &lt;code&gt;{boolean|Object}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a792522659c8bad0c4f41a9fed876f069c7f3001" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;htmlElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - A list of elements to extend the current list of HTML elements.</source>
          <target state="translated">&lt;strong&gt;htmlElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - HTML要素の現在のリストを拡張する要素のリスト。</target>
        </trans-unit>
        <trans-unit id="0a42c76c3fb4084b470b98106340ac1b01895367" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;htmlVoidElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - A list of elements to extend the current list of void HTML elements; i.e. elements that do not have an end tag.</source>
          <target state="translated">&lt;strong&gt;htmlVoidElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; -ボイドHTML要素の現在のリストを拡張する要素のリスト。つまり、終了タグを持たない要素。</target>
        </trans-unit>
        <trans-unit id="e3fba7c55daba09f699627d6ddf5c7f98aebf5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;id&lt;/strong&gt;: the id of the cache instance</source>
          <target state="translated">&lt;strong&gt;id&lt;/strong&gt;：キャッシュインスタンスのID</target>
        </trans-unit>
        <trans-unit id="f8de2446f97561038f35cfbca3fe049fc42c4852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isolated scope&lt;/strong&gt; + &lt;strong&gt;child scope&lt;/strong&gt; =&amp;gt; &lt;strong&gt;Won't work!&lt;/strong&gt; Only one scope can be related to one element. Therefore these directives cannot be applied to the same element.</source>
          <target state="translated">&lt;strong&gt;分離スコープ&lt;/strong&gt; + &lt;strong&gt;子スコープ&lt;/strong&gt; =&amp;gt;機能し&lt;strong&gt;ません！&lt;/strong&gt;1つの要素に関連付けることができるスコープは1つだけです。したがって、これらのディレクティブを同じ要素に適用することはできません。</target>
        </trans-unit>
        <trans-unit id="124d7d31ddab47d2d156da6e7c9218c9f4e303b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isolated scope&lt;/strong&gt; + &lt;strong&gt;isolated scope&lt;/strong&gt; =&amp;gt; &lt;strong&gt;Won't work!&lt;/strong&gt; Only one scope can be related to one element. Therefore these directives cannot be applied to the same element.</source>
          <target state="translated">&lt;strong&gt;分離スコープ&lt;/strong&gt; + &lt;strong&gt;分離スコープ&lt;/strong&gt; =&amp;gt;機能し&lt;strong&gt;ません！&lt;/strong&gt;1つの要素に関連付けることができるスコープは1つだけです。したがって、これらのディレクティブを同じ要素に適用することはできません。</target>
        </trans-unit>
        <trans-unit id="f6d1f2d0baa4d824cae5e0344ad362c468b1df71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isolated scope&lt;/strong&gt; + &lt;strong&gt;no scope&lt;/strong&gt; =&amp;gt; The isolated directive will use it's own created isolated scope. The other directive will use its parent's scope</source>
          <target state="translated">&lt;strong&gt;分離スコープ&lt;/strong&gt; + &lt;strong&gt;スコープ&lt;/strong&gt;&lt;strong&gt;なし&lt;/strong&gt; =&amp;gt;分離ディレクティブは、独自に作成した分離スコープを使用します。他のディレクティブはその親のスコープを使用します</target>
        </trans-unit>
        <trans-unit id="c4773c7c7695330d0fb94c9c57adbbb2bf149700" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jqLite&lt;/strong&gt;: A jqLite/jQuery element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset.</source>
          <target state="translated">&lt;strong&gt;jqLit​​e&lt;/strong&gt;：オフセットの指定に使用されるjqLit​​e / jQuery要素。ページの上部から要素の下部までの距離がオフセットとして使用されます。</target>
        </trans-unit>
        <trans-unit id="27a1edc20316d5c41ba1140a1cc228f9cdb92f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; HTTP method (e.g. 'GET', 'POST', etc)</source>
          <target state="translated">&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; HTTPメソッド（例： 'GET'、 'POST'など）</target>
        </trans-unit>
        <trans-unit id="472a1c0dd6eba526a0d890b034eed386d8c720fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngChecked&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngChecked&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70fc8b469422f1f474b80f7559adcdafa8acc541" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngClick&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngClick&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b30905df0c41644b97c88e17a4e2aae25421c0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngDblclick&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngDblclick&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0042728db4a7425e83fc3ca6506f743967f15951" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngDisabled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngDisabled&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2db62cc9ac9e510cec6e7a85b0e5cca0a776c22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngHide&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngHide&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b886b884a1ce37c912725f18088479a0f28f7656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngMessages&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngMessages&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a4d8dfe81c8895c78f6e3357901304d0cd44850" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngModel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngModel&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c5677f2c2b6dbc22614b195a66736898381ee68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngReadonly&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngReadonly&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89d98b0b52119ade4d2a7b5f2d670596c5b39876" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngRequired&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngRequired&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf7a7022978dccaf06ccb1ddc0c800a13d076723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngShow&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngShow&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b99247b583ed841bbc7526f85a6d31bf86dfddb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngValue&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ngValue&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8c8b20a9898829cf0f68deb23102862860694a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;no scope&lt;/strong&gt; + &lt;strong&gt;no scope&lt;/strong&gt; =&amp;gt; Two directives which don't require their own scope will use their parent's scope</source>
          <target state="translated">&lt;strong&gt;スコープなし&lt;/strong&gt; + &lt;strong&gt;スコープ&lt;/strong&gt;&lt;strong&gt;なし&lt;/strong&gt; =&amp;gt;独自のスコープを必要としない2つのディレクティブは、親のスコープを使用します</target>
        </trans-unit>
        <trans-unit id="0e93dba1c9076df304aac7edb503b800b45a7c1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;node&lt;/strong&gt;&lt;code&gt;{DOMElement}&lt;/code&gt; - The DOM element to be animated.</source>
          <target state="translated">&lt;strong&gt;node &lt;/strong&gt; &lt;code&gt;{DOMElement}&lt;/code&gt; -アニメーション化されるDOM要素。</target>
        </trans-unit>
        <trans-unit id="72addb38a35523e85f22360331c35045c03519b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;number&lt;/strong&gt;: A fixed number of pixels to be used as offset.</source>
          <target state="translated">&lt;strong&gt;number&lt;/strong&gt;：オフセットとして使用される固定ピクセル数。</target>
        </trans-unit>
        <trans-unit id="6bfe42c01803398822405d49a5823f112f8c8264" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;objectMaxDepth&lt;/strong&gt;: The maximum depth to which objects are traversed when stringified for error messages.</source>
          <target state="translated">&lt;strong&gt;objectMaxDepth&lt;/strong&gt;：エラーメッセージ用に文字列化されたときにオブジェクトが走査される最大深度。</target>
        </trans-unit>
        <trans-unit id="59d0f8dde98a32b496242d2a29226f215bf7c086" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt;&lt;code&gt;{Object}&lt;/code&gt; - A collection of options/styles used for the animation.</source>
          <target state="translated">&lt;strong&gt;options &lt;/strong&gt; &lt;code&gt;{Object}&lt;/code&gt; -アニメーションに使用されるオプション/スタイルのコレクション。</target>
        </trans-unit>
        <trans-unit id="d651a44f16d7b9f660fb78f4848f8fe899718c1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;paramSerializer&lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; - A function used to prepare the string representation of request parameters (specified as an object). If specified as string, it is interpreted as function registered with the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;, which means you can create your own serializer by registering it as a &lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;service&lt;/a&gt;. The default serializer is the &lt;a href=&quot;%24httpparamserializer&quot;&gt;$httpParamSerializer&lt;/a&gt;; alternatively, you can use the &lt;a href=&quot;%24httpparamserializerjqlike&quot;&gt;$httpParamSerializerJQLike&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;paramSerializer&lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; - （オブジェクトとして指定された）要求パラメータの文字列表現を調製するために使用される機能。文字列として指定すると、&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorに&lt;/a&gt;登録された関数として解釈されます。つまり、&lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;サービス&lt;/a&gt;として登録することで、独自のシリアライザーを作成できます。デフォルトのシリアライザは&lt;a href=&quot;%24httpparamserializer&quot;&gt;$ httpParamSerializer&lt;/a&gt;です。または、&lt;a href=&quot;%24httpparamserializerjqlike&quot;&gt;$ httpParamSerializerJQLikeを&lt;/a&gt;使用することもできます</target>
        </trans-unit>
        <trans-unit id="eb412c19087d047d702d4bb44d9b2be7ab1a675c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;params&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object.&amp;lt;string|Object&amp;gt;}&lt;/code&gt; &amp;ndash; Map of strings or objects which will be serialized with the &lt;code&gt;paramSerializer&lt;/code&gt; and appended as GET parameters.</source>
          <target state="translated">&lt;strong&gt;params&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object.&amp;lt;string|Object&amp;gt;}&lt;/code&gt; &amp;ndash; &lt;code&gt;paramSerializer&lt;/code&gt; でシリアル化され、GETパラメータとして追加される文字列またはオブジェクトのマップ。</target>
        </trans-unit>
        <trans-unit id="060adaafb51ecc8f11beb5c933aa7af0d463cd31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - The cookie will be available only for this path and its sub-paths. By default, this is the URL that appears in your &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;strong&gt;パス&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -クッキーは、このパスとサブパスのために利用できるようになります。デフォルトでは、これは &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; タグに表示されるURLです。</target>
        </trans-unit>
        <trans-unit id="5f3eaf2d48263b11c832c76ce400f5db9b03ae2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;placeholder&lt;/strong&gt; in &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; in Internet Explorer 10/11 (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;issue 5025&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;プレースホルダ&lt;/strong&gt;で &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; Internet Explorerの10月11日に（参照&lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;5025の問題を&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="4958679eaea1cd6781d8263b662a8d5fd1a73530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;removeClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - space-separated CSS classes to remove from element</source>
          <target state="translated">&lt;strong&gt;removeClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -スペースで区切られたCSSクラス要素から削除します</target>
        </trans-unit>
        <trans-unit id="98c7a336bebc4478053dfdd092b76fa1a2505115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;requireBase&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - (default: &lt;code&gt;true&lt;/code&gt;) When html5Mode is enabled, specifies whether or not a  tag is required to be present. If &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;requireBase&lt;/code&gt; are true, and a base tag is not present, an error will be thrown when &lt;code&gt;$location&lt;/code&gt; is injected. See the &lt;a href=&quot;../../../guide/%24location&quot;&gt;$location guide for more information&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;requireBase&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - （デフォルト： &lt;code&gt;true&lt;/code&gt; ）html5Modeが有効になっている、タグが存在することが必要であるかどうかを指定。場合は &lt;code&gt;enabled&lt;/code&gt; と &lt;code&gt;requireBase&lt;/code&gt; は真であり、ベースタグが存在しない場合、エラーがスローされます &lt;code&gt;$location&lt;/code&gt; 注入されます。詳細については、&lt;a href=&quot;../../../guide/%24location&quot;&gt;$ locationガイドをご覧ください&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ff98c63e2f8647761676a30d4ba3fbaef42096f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;responseType&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype&quot;&gt;XMLHttpRequest.responseType&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;responseType&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -参照&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype&quot;&gt;XMLHttpRequest.responseTypeを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83429cc05bf49200558ea7c8b13a952af6c8c748" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rewriteLinks&lt;/strong&gt; - &lt;code&gt;{boolean|string}&lt;/code&gt; - (default: &lt;code&gt;true&lt;/code&gt;) When html5Mode is enabled, enables/disables URL rewriting for relative links. If set to a string, URL rewriting will only happen on links with an attribute that matches the given string. For example, if set to &lt;code&gt;'internal-link'&lt;/code&gt;, then the URL will only be rewritten for &lt;code&gt;&amp;lt;a internal-link&amp;gt;&lt;/code&gt; links. Note that &lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;attribute name normalization&lt;/a&gt; does not apply here, so &lt;code&gt;'internalLink'&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; match &lt;code&gt;'internal-link'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;rewriteLinks&lt;/strong&gt; - &lt;code&gt;{boolean|string}&lt;/code&gt; - （デフォルト： &lt;code&gt;true&lt;/code&gt; ）html5Modeが有効になっている、URLが相対リンクの書き換え有効/無効にします。文字列に設定すると、URLの書き換えは、指定した文字列に一致する属性を持つリンクでのみ発生します。たとえば、 &lt;code&gt;'internal-link'&lt;/code&gt; に設定した場合、URLは &lt;code&gt;&amp;lt;a internal-link&amp;gt;&lt;/code&gt; リンクに対してのみ書き換えられます。注ことを&lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;属性名の正規化は、&lt;/a&gt;ここでは適用されませんので、 &lt;code&gt;'internalLink'&lt;/code&gt; う&lt;strong&gt;ではない&lt;/strong&gt;一致 &lt;code&gt;'internal-link'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f51a95c24827c45784afc6a3873a40fbc1bd7fef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samesite&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - prevents the browser from sending the cookie along with cross-site requests. Accepts the values &lt;code&gt;lax&lt;/code&gt; and &lt;code&gt;strict&lt;/code&gt;. See the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;OWASP Wiki&lt;/a&gt; for more info. Note that as of May 2018, not all browsers support &lt;code&gt;SameSite&lt;/code&gt;, so it cannot be used as a single measure against Cross-Site-Request-Forgery (CSRF) attacks.</source>
          <target state="translated">&lt;strong&gt;samesite&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -クロスサイト要求と共にクッキーを送信し、ブラウザを防止します。値 &lt;code&gt;lax&lt;/code&gt; および &lt;code&gt;strict&lt;/code&gt; を受け入れます。詳細については、&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;OWASP Wiki&lt;/a&gt;を参照してください。2018年5月の時点では、すべてのブラウザーが &lt;code&gt;SameSite&lt;/code&gt; をサポートしているわけではないため、クロスサイトリクエストフォージェリ（CSRF）攻撃に対する単一の対策として使用することはできません。</target>
        </trans-unit>
        <trans-unit id="2d7da530df946f3545fca78880b34ff024bfaaa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - If &lt;code&gt;true&lt;/code&gt;, then the cookie will only be available through a secured connection.</source>
          <target state="translated">&lt;strong&gt;固定&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; -場合は &lt;code&gt;true&lt;/code&gt; 、その後クッキーのみセキュアな接続を介して利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="1e2a25b2159af2f5d84818851dec8d42f417bf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt; in &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/1619&quot;&gt;issue 1619&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;サイズ&lt;/strong&gt;で &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素（参照&lt;a href=&quot;https://github.com/angular/angular.js/issues/1619&quot;&gt;問題1619&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="9f4ef8b00882dfdcc97c71765bf22fb7abfccf47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt;: the number of entries kept in the cache instance</source>
          <target state="translated">&lt;strong&gt;size&lt;/strong&gt;：キャッシュインスタンスに保持されるエントリの数</target>
        </trans-unit>
        <trans-unit id="df2a02b6376cc0ebb01f5e18aa2d102288edb907" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;status&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; HTTP status code of the response.</source>
          <target state="translated">&lt;strong&gt;status&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;応答のHTTPステータスコード。</target>
        </trans-unit>
        <trans-unit id="35ce03bf58d6ec7f55ac8f04a8ebccad62becdbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;statusText&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; HTTP status text of the response.</source>
          <target state="translated">&lt;strong&gt;statusText&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;応答のHTTPステータステキスト。</target>
        </trans-unit>
        <trans-unit id="0345fb2cc138ca84d0cde834fd433d751d6414af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stripTrailingSlashes&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, then the trailing slashes from any calculated URL will be stripped.</source>
          <target state="translated">&lt;strong&gt;stripTrailingSlashes&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; trueの場合、計算されたURLの末尾のスラッシュは削除されます。</target>
        </trans-unit>
        <trans-unit id="d3ea7e3d61cd6b089004feefdef3261d48887930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;svgElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - A list of elements to extend the current list of SVG elements. The list of SVG elements is only taken into account if SVG is &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;enabled&lt;/a&gt; for &lt;code&gt;$sanitize&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;svgElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - SVG要素の現在のリストを拡張する要素のリスト。SVGが &lt;code&gt;$sanitize&lt;/code&gt; &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;有効になっ&lt;/a&gt;ている場合にのみ、SVG要素のリストが考慮されます。</target>
        </trans-unit>
        <trans-unit id="50e376066f3f2ada02d92730374d9ebd58e1e323" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tabindex&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables tabindex tags</source>
          <target state="translated">&lt;strong&gt;tabindex&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; tabindexタグを有効/無効にします</target>
        </trans-unit>
        <trans-unit id="70e324de17d76b0a9ec0d32b1e7654a6240d0e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;timeout&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number|Promise}&lt;/code&gt; &amp;ndash; timeout in milliseconds, or &lt;a href=&quot;%24q&quot;&gt;promise&lt;/a&gt; that should abort the request when resolved.</source>
          <target state="translated">&lt;strong&gt;timeout&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number|Promise}&lt;/code&gt; &amp;ndash;ミリ秒単位のタイムアウト、または解決時に要求を中止する&lt;a href=&quot;%24q&quot;&gt;約束&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e679bd6dc14d74c998593892b9b48ccec9f3a8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;to&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - CSS properties &amp;amp; values at end of animation. Must have matching &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;- &lt;code&gt;{Object}&lt;/code&gt; -アニメーションの終了時にCSSプロパティ＆値。 &lt;code&gt;from&lt;/code&gt; 一致が必要です</target>
        </trans-unit>
        <trans-unit id="3d33b5c0716f7f5b554828e3c86a6d260fde2f1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transformRequest&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash; transform function or an array of such functions. The transform function takes the http request body and headers and returns its transformed (typically serialized) version. See &lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;Overriding the Default Transformations&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;transformRequest&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash;変換関数またはそのような関数の配列。変換関数は、httpリクエストの本文とヘッダーを受け取り、変換された（通常はシリアル化された）バージョンを返します。&lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;デフォルトの変換のオーバーライドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="87f825777fa4ed7bb1205871ba42d32b29aacd6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transformResponse&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash; transform function or an array of such functions. The transform function takes the http response body, headers and status and returns its transformed (typically deserialized) version. See &lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;Overriding the Default Transformations&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;transformResponse&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash;変換関数またはそのような関数の配列。変換関数は、http応答の本文、ヘッダー、およびステータスを受け取り、その変換された（通常は逆シリアル化された）バージョンを返します。&lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;デフォルトの変換のオーバーライドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d039bff6529a3e51b665953058a2578bf03ae530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; in &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in Internet Explorer 11 (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;issue 14117&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Internet Explorer 11 で &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; を&lt;strong&gt;入力&lt;/strong&gt;します（&lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;問題14117を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="9043907a2669b340d01a39ec2d66417c24b13029" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;uploadEventHandlers&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - Event listeners to be bound to the XMLHttpRequest upload object. To bind events to the XMLHttpRequest object, use &lt;code&gt;eventHandlers&lt;/code&gt;. The handler will be called in the context of a &lt;code&gt;$apply&lt;/code&gt; block.</source>
          <target state="translated">&lt;strong&gt;uploadEventHandlers&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - XMLHttpRequestのアップロードオブジェクトにバインドされるイベントリスナー。イベントをXMLHttpRequestオブジェクトにバインドするには、 &lt;code&gt;eventHandlers&lt;/code&gt; を使用します。ハンドラーは &lt;code&gt;$apply&lt;/code&gt; ブロックのコンテキストで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6bca94c5d01d86c53e05d7e629d478ec3750e7c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|TrustedObject}&lt;/code&gt; &amp;ndash; Absolute or relative URL of the resource that is being requested; or an object created by a call to &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;url&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|TrustedObject}&lt;/code&gt; &amp;ndash;要求されているリソースの絶対または相対URL。または、 &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; 呼び出しによって作成されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="0a760b7dddba992bcb6c8a6db574124bfeae2eb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; in &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; in Internet Explorer = 11 (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/7218&quot;&gt;issue 7218&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;値&lt;/strong&gt;で &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; Internet Explorerの= 11（参照&lt;a href=&quot;https://github.com/angular/angular.js/issues/7218&quot;&gt;問題7218を&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="d9d9e23f794cf05d52a0d2a6fe3ab544fb89b0e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;withCredentials&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - whether to set the &lt;code&gt;withCredentials&lt;/code&gt; flag on the XHR object. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials&quot;&gt;requests with credentials&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;withCredentials&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; -設定するか否か &lt;code&gt;withCredentials&lt;/code&gt; の XHRオブジェクトにフラグ。詳細について&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials&quot;&gt;は、認証情報付きのリクエストを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b6b9f84e97e3ba1d5fd7cc6a758d16b678b9e932" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xhrStatus&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Status of the XMLHttpRequest (&lt;code&gt;complete&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt; or &lt;code&gt;abort&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;xhrStatus&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; XMLHttpRequestのステータス（ &lt;code&gt;complete&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; または &lt;code&gt;abort&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d2bbd1de159541f1410dcb870ff574d3ec923734" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xsrfCookieName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Name of cookie containing the XSRF token.</source>
          <target state="translated">&lt;strong&gt;xsrfCookieName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; XSRFトークンを含むCookieの名前。</target>
        </trans-unit>
        <trans-unit id="82ebc64de30022400b91cd2832387f47ce545a88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xsrfHeaderName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Name of HTTP header to populate with the XSRF token.</source>
          <target state="translated">&lt;strong&gt;xsrfHeaderName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; XSRFトークンを入力するHTTPヘッダーの名前。</target>
        </trans-unit>
        <trans-unit id="2b2697460deb5f5b660f6f33232f0bbe0994052e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;%24q&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that will be resolved (request success) or rejected (request failure) with a response object.</source>
          <target state="translated">A &lt;a href=&quot;%24q&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;レスポンスオブジェクトを持つ（要求成功）または拒否（リクエストの失敗を）解決されます。</target>
        </trans-unit>
        <trans-unit id="9f670bf823c39c6ce15ca2cee63a5bda25c59bf4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module&lt;/a&gt; is a collection of providers, services, directives etc., and optionally config and run blocks which get applied to the application during the bootstrap process.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールは、&lt;/a&gt;ディレクティブなどのプロバイダー、サービスの集合であり、かつ、必要に応じて、ブートストラッププロセス中にアプリケーションに適用されますブロックをconfigおよび実行します。</target>
        </trans-unit>
        <trans-unit id="99f98a62c49c1d357ce0e0c6e22da8b20e044b38" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function/angular.element&quot;&gt;jQuery or jqLite&lt;/a&gt; wrapper for the browser's &lt;code&gt;window.document&lt;/code&gt; object.</source>
          <target state="translated">A &lt;a href=&quot;../function/angular.element&quot;&gt;jQueryのかjqLit​​e&lt;/a&gt;ブラウザのためのラッパー &lt;code&gt;window.document&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1b2e7a0bbc83c26ed075072213b62d4c6f673112" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function/angular.element&quot;&gt;jQuery or jqLite&lt;/a&gt; wrapper for the browser's &lt;code&gt;window.document&lt;/code&gt; object.</source>
          <target state="translated">A &lt;a href=&quot;function/angular.element&quot;&gt;jQueryのかjqLit​​e&lt;/a&gt;ブラウザのためのラッパー &lt;code&gt;window.document&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7839c71de200f27fd2e542514415551d06c81302" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx&quot;&gt;JSON vulnerability&lt;/a&gt; allows third party website to turn your JSON resource URL into &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; request under some conditions. To counter this your server can prefix all JSON requests with following string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;. AngularJS will automatically strip the prefix before processing it as JSON.</source>
          <target state="translated">A &lt;a href=&quot;http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx&quot;&gt;JSONの脆弱性は&lt;/a&gt;、第三者のウェブサイトはあなたにJSONリソースのURLをオンにすることができます&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPの&lt;/a&gt;いくつかの条件の下で要求。これに対抗するために、サーバーはすべてのJSONリクエストの前に次の文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; を付けることができます。AngularJSは、プレフィックスをJSONとして処理する前に自動的に削除します。</target>
        </trans-unit>
        <trans-unit id="1ae6a5e280a12c410587e20c5ad774e784785882" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx&quot;&gt;JSON vulnerability&lt;/a&gt; allows third party website to turn your JSON resource URL into &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; request under some conditions. To counter this your server can prefix all JSON requests with following string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;. AngularJS will automatically strip the prefix before processing it as JSON.</source>
          <target state="translated">A &lt;a href=&quot;http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx&quot;&gt;JSONの脆弱性は&lt;/a&gt;、第三者のウェブサイトはあなたにJSONリソースのURLをオンにすることができます&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPの&lt;/a&gt;いくつかの条件の下で要求。これに対抗するために、サーバーはすべてのJSONリクエストの前に次の文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; を付けることができます。AngularJSは、JSONとして処理する前に、プレフィックスを自動的に削除します。</target>
        </trans-unit>
        <trans-unit id="2fa15ce24236637c6517ab3482040ede6e84b058" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/blur&quot;&gt;blur event&lt;/a&gt; fires when an element has lost focus.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/blur&quot;&gt;ぼかしイベント&lt;/a&gt;要素がフォーカスを失った火災。</target>
        </trans-unit>
        <trans-unit id="40add3cdd16405c074177fc8110bb43b5ac7fb2b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt; with two buttons and a simple message</source>
          <target state="translated">2つのボタンと簡単なメッセージを含む&lt;a href=&quot;templates&quot;&gt;テンプレート&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="050f37f110fc9fa63e63cd7117b1384816703419" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentInstruction&lt;/code&gt; represents the route state for a single component. An &lt;code&gt;Instruction&lt;/code&gt; is composed of a tree of these &lt;code&gt;ComponentInstruction&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;ComponentInstruction&lt;/code&gt; は、単一コンポーネントのルート状態を表します。 &lt;code&gt;Instruction&lt;/code&gt; これらのツリーで構成されている &lt;code&gt;ComponentInstruction&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="f8f1e492c2e32412cc2e9ab7f4b7de5a17b72edc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Router&lt;/code&gt; is responsible for mapping URLs to components.</source>
          <target state="translated">A &lt;code&gt;Router&lt;/code&gt; コンポーネントにURLをマッピングするための責任があります。</target>
        </trans-unit>
        <trans-unit id="afe91777794606fc3697cc65d25283b9e3db37d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;username&lt;/code&gt; directive that asynchronously checks if a user-entered value is already taken. We mock the server request with a &lt;code&gt;$q&lt;/code&gt; deferred.</source>
          <target state="translated">ユーザーが入力した値が既に使用されているかどうかを非同期的にチェックする &lt;code&gt;username&lt;/code&gt; ディレクティブ。 &lt;code&gt;$q&lt;/code&gt; 据え置きでサーバー要求をモックします。</target>
        </trans-unit>
        <trans-unit id="a7878972a098fc3249b245269b4fd298ddb5e251" translate="yes" xml:space="preserve">
          <source>A Controller with two functions that set the value of &lt;code&gt;spice&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;spice&lt;/code&gt; の価値を設定する2つの機能を持つコントローラー</target>
        </trans-unit>
        <trans-unit id="099221b87692bd857151be9e3c242bd9da492b16" translate="yes" xml:space="preserve">
          <source>A Promise that will be resolved or rejected with a response object. See &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;&lt;code&gt;$http()&lt;/code&gt; return value&lt;/a&gt;.</source>
          <target state="translated">応答オブジェクトで解決または拒否されるプロミス。&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt; &lt;code&gt;$http()&lt;/code&gt; 戻り値を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="08542be42901cd2d3503e21ba713f703abed31db" translate="yes" xml:space="preserve">
          <source>A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a curtain-like effect. The ngAnimate module (versions &amp;gt;=1.2) supports staggering animations and the stagger effect can be performed by creating a &lt;strong&gt;ng-EVENT-stagger&lt;/strong&gt; CSS class and attaching that class to the base CSS class used for the animation. The style property expected within the stagger class can either be a &lt;strong&gt;transition-delay&lt;/strong&gt; or an &lt;strong&gt;animation-delay&lt;/strong&gt; property (or both if your animation contains both transitions and keyframe animations).</source>
          <target state="translated">驚異的なアニメーションとは、連続する各操作の間にわずかな遅延が発生し、カーテンのような効果が生じるアニメーションのコレクションです。ngAnimateモジュール（バージョン&amp;gt; = 1.2）は、驚異的なアニメーションをサポートし、&lt;strong&gt;ng-EVENT-stagger&lt;/strong&gt; CSSクラスを作成し、そのクラスをアニメーションに使用される基本CSSクラスにアタッチすることにより、驚異的な効果を実行できます。staggerクラス内で予期されるスタイルプロパティは、&lt;strong&gt;transition-delay&lt;/strong&gt;または&lt;strong&gt;animation-delay&lt;/strong&gt;プロパティのいずれか（またはアニメーションにトランジションとキーフレームアニメーションの両方が含まれている場合は両方）です。</target>
        </trans-unit>
        <trans-unit id="8b1041ce62379a6088fbb9d282654cc4b528feba" translate="yes" xml:space="preserve">
          <source>A boolean property indicating if routes defined using this provider should be matched using a case insensitive algorithm. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このプロバイダーを使用して定義されたルートを、大文字と小文字を区別しないアルゴリズムを使用して照合する必要があるかどうかを示すブールプロパティ。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fca8caeaa11957e504e1245c3676b49630f2625d" translate="yes" xml:space="preserve">
          <source>A cache object used to store and retrieve data, primarily used by &lt;a href=&quot;../service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; and the &lt;a href=&quot;../directive/script&quot;&gt;script&lt;/a&gt; directive to cache templates and other data.</source>
          <target state="translated">データの保存と取得に使用されるキャッシュオブジェクト。主にテンプレートやその他のデータをキャッシュするために&lt;a href=&quot;../service/%24templaterequest&quot;&gt;$ templateRequest&lt;/a&gt;および&lt;a href=&quot;../directive/script&quot;&gt;スクリプト&lt;/a&gt;ディレクティブで使用されます。</target>
        </trans-unit>
        <trans-unit id="7741c0b5eadb3178c8fd1b6d3cbe41c65898491f" translate="yes" xml:space="preserve">
          <source>A cache object used to store and retrieve data, primarily used by &lt;a href=&quot;service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; and the &lt;a href=&quot;directive/script&quot;&gt;script&lt;/a&gt; directive to cache templates and other data.</source>
          <target state="translated">データの保存と取得に使用されるキャッシュオブジェクト。主にテンプレートやその他のデータをキャッシュするために&lt;a href=&quot;service/%24templaterequest&quot;&gt;$ templateRequest&lt;/a&gt;および&lt;a href=&quot;directive/script&quot;&gt;スクリプト&lt;/a&gt;ディレクティブで使用されます。</target>
        </trans-unit>
        <trans-unit id="9ef2ed6994f65370ddeaf83f5b2e47c35d4d5e29" translate="yes" xml:space="preserve">
          <source>A cache-control header on the response does not affect if or how responses are cached.</source>
          <target state="translated">応答のキャッシュ制御ヘッダは、応答がキャッシュされるかどうか、またはどのようにキャッシュされるかには影響しません。</target>
        </trans-unit>
        <trans-unit id="8bfa439ad785ad69c4e2d9f497dacaf475106385" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;$resume()&lt;/code&gt; on a non-suspended scope is a no-op.</source>
          <target state="translated">一時停止されていないスコープでの &lt;code&gt;$resume()&lt;/code&gt; 呼び出しは何もしません。</target>
        </trans-unit>
        <trans-unit id="9133b855702802c397e165028750356edd7047a4" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;$suspend()&lt;/code&gt; on an already suspended scope is a no-op.</source>
          <target state="translated">すでに中断されているスコープでの &lt;code&gt;$suspend()&lt;/code&gt; 呼び出しは何もしません。</target>
        </trans-unit>
        <trans-unit id="0ea4006eb2cb656edf669af2a4fe53b47d3e21e0" translate="yes" xml:space="preserve">
          <source>A collection of validations that are expected to perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided is expected to return a promise when it is run during the model validation process. Once the promise is delivered then the validation status will be set to true when fulfilled and false when rejected. When the asynchronous validators are triggered, each of the validators will run in parallel and the model value will only be updated once all validators have been fulfilled. As long as an asynchronous validator is unfulfilled, its key will be added to the controllers &lt;code&gt;$pending&lt;/code&gt; property. Also, all asynchronous validators will only run once all synchronous validators have passed.</source>
          <target state="translated">非同期の検証（HTTPリクエストなど）の実行が期待される検証のコレクション。提供される検証関数は、モデル検証プロセス中に実行されると、promiseを返すことが期待されています。promiseが配信されると、検証ステータスは、満たされた場合はtrueに、拒否された場合はfalseに設定されます。非同期バリデーターがトリガーされると、各バリデーターは並行して実行され、モデル値はすべてのバリデーターが満たされた場合にのみ更新されます。非同期バリデーターが満たされていない限り、そのキーはコントローラーの &lt;code&gt;$pending&lt;/code&gt; プロパティに追加されます。また、すべての非同期バリデーターは、すべての同期バリデーターが渡されたときにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="229fac7603e8188798542bcb67ff90d46994a3c3" translate="yes" xml:space="preserve">
          <source>A collection of validators that are applied whenever the model value changes. The key value within the object refers to the name of the validator while the function refers to the validation operation. The validation operation is provided with the model value as an argument and must return a true or false value depending on the response of that validation.</source>
          <target state="translated">モデルの値が変更されるたびに適用されるバリデータのコレクションです。オブジェクト内のキー値はバリデータの名前を指し、関数はバリデーション操作を指します。バリデーション操作はモデル値を引数として提供され、バリデーションのレスポンスに応じて真か偽の値を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="be0235f4b74d82983b712495add7b645995775dd" translate="yes" xml:space="preserve">
          <source>A compile function can have a return value which can be either a function or an object.</source>
          <target state="translated">コンパイル関数は、関数またはオブジェクトのいずれかの戻り値を持つことができます。</target>
        </trans-unit>
        <trans-unit id="e05e2a218277dd6b00da94dc6067e64b2045df3e" translate="yes" xml:space="preserve">
          <source>A complete client-side solution</source>
          <target state="translated">完全なクライアントサイドソリューション</target>
        </trans-unit>
        <trans-unit id="e60157b6585baedc59c4d7575ad7dc9ea71f80e6" translate="yes" xml:space="preserve">
          <source>A constructor function that will be instantiated.</source>
          <target state="translated">インスタンス化されるコンストラクタ関数。</target>
        </trans-unit>
        <trans-unit id="73f2b01348f1ce5048a10e6122982c908f8be945" translate="yes" xml:space="preserve">
          <source>A container for the options set by the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; directive</source>
          <target state="translated">&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;ディレクティブによって設定されたオプションのコンテナー</target>
        </trans-unit>
        <trans-unit id="1704347efadba97c8861b4da7846bbc0b00699ef" translate="yes" xml:space="preserve">
          <source>A container for the options set by the &lt;a href=&quot;directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; directive</source>
          <target state="translated">&lt;a href=&quot;directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;ディレクティブによって設定されたオプションのコンテナー</target>
        </trans-unit>
        <trans-unit id="39f7ee12cd4358531c59cddc0da19e827ffc1dee" translate="yes" xml:space="preserve">
          <source>A decorator for &lt;a href=&quot;../../ng/service/%24controller&quot;&gt;&lt;code&gt;$controller&lt;/code&gt;&lt;/a&gt; with additional &lt;code&gt;bindings&lt;/code&gt; parameter, useful when testing controllers of directives that use &lt;a href=&quot;../../ng/service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">追加の &lt;code&gt;bindings&lt;/code&gt; パラメータを持つ&lt;a href=&quot;../../ng/service/%24controller&quot;&gt; &lt;code&gt;$controller&lt;/code&gt; &lt;/a&gt;のデコレータ&lt;a href=&quot;../../ng/service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; &lt;/a&gt;を使用するディレクティブのコントローラをテストするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4d65491f42f9e447fd2de27ab73792203123c4e5" translate="yes" xml:space="preserve">
          <source>A decorator for &lt;a href=&quot;../ng/service/%24controller&quot;&gt;&lt;code&gt;$controller&lt;/code&gt;&lt;/a&gt; with additional &lt;code&gt;bindings&lt;/code&gt; parameter, useful when testing controllers of directives that use &lt;a href=&quot;../ng/service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">追加の &lt;code&gt;bindings&lt;/code&gt; パラメータを持つ&lt;a href=&quot;../ng/service/%24controller&quot;&gt; &lt;code&gt;$controller&lt;/code&gt; &lt;/a&gt;のデコレータ&lt;a href=&quot;../ng/service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; &lt;/a&gt;を使用するディレクティブのコントローラをテストするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a6ddae07840c68a872552d4cb70b579cf8c24aef" translate="yes" xml:space="preserve">
          <source>A decorator for &lt;a href=&quot;ng/service/%24controller&quot;&gt;&lt;code&gt;$controller&lt;/code&gt;&lt;/a&gt; with additional &lt;code&gt;bindings&lt;/code&gt; parameter, useful when testing controllers of directives that use &lt;a href=&quot;ng/service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">追加の &lt;code&gt;bindings&lt;/code&gt; パラメータを持つ&lt;a href=&quot;ng/service/%24controller&quot;&gt; &lt;code&gt;$controller&lt;/code&gt; &lt;/a&gt;のデコレータ&lt;a href=&quot;ng/service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; &lt;/a&gt;を使用するディレクティブのコントローラをテストするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ce088c4e794e32fe14c0927041d2cdf88cfae0c8" translate="yes" xml:space="preserve">
          <source>A default message can also be displayed when no &lt;code&gt;ngMessage&lt;/code&gt; directive is inserted, using the &lt;a href=&quot;ngmessagedefault&quot;&gt;&lt;code&gt;ngMessageDefault&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">いかなる場合、デフォルトのメッセージも表示することができる &lt;code&gt;ngMessage&lt;/code&gt; のディレクティブを使用して、挿入されていない&lt;a href=&quot;ngmessagedefault&quot;&gt; &lt;code&gt;ngMessageDefault&lt;/code&gt; の&lt;/a&gt;ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="36be02f1c6d94ec102591f40a3981d2fe909e18c" translate="yes" xml:space="preserve">
          <source>A different issue with objects or collections is that ngModel won't detect if an object property or a collection item changes. For that reason, &lt;code&gt;ngOptions&lt;/code&gt; additionally watches the model using &lt;code&gt;$watchCollection&lt;/code&gt;, when the expression contains a &lt;code&gt;track by&lt;/code&gt; clause or the the select has the &lt;code&gt;multiple&lt;/code&gt; attribute. This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection has not changed identity, but only a property on the object or an item in the collection changes.</source>
          <target state="translated">オブジェクトまたはコレクションの別の問題は、ngModelがオブジェクトプロパティまたはコレクションアイテムが変更されたかどうかを検出しないことです。そのため、 &lt;code&gt;ngOptions&lt;/code&gt; はさらに使用してモデルを見て &lt;code&gt;$watchCollection&lt;/code&gt; 表現が含まれている場合、 &lt;code&gt;track by&lt;/code&gt; WHERE句または選択が持つ &lt;code&gt;multiple&lt;/code&gt; 属性を。これにより、実際のオブジェクト/コレクションがIDを変更していない場合でも、ngOptionsはオプションの再レンダリングをトリガーできますが、オブジェクトのプロパティまたはコレクション内のアイテムのみが変更されます。</target>
        </trans-unit>
        <trans-unit id="3708b5167f652cc7a6cae8807f541525f153a1c0" translate="yes" xml:space="preserve">
          <source>A directive can specify which of the 4 matching types it supports in the &lt;a href=&quot;../api/ng/service/%24compile#-restrict-.html&quot;&gt;&lt;code&gt;restrict&lt;/code&gt;&lt;/a&gt; property of the directive definition object. The default is &lt;code&gt;EA&lt;/code&gt;.</source>
          <target state="translated">ディレクティブは、ディレクティブ定義オブジェクトの&lt;a href=&quot;../api/ng/service/%24compile#-restrict-.html&quot;&gt; &lt;code&gt;restrict&lt;/code&gt; &lt;/a&gt;プロパティで、4つの一致するタイプのどれをサポートするかを指定できます。デフォルトは &lt;code&gt;EA&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="06d7072e7c82651d679b053abc62ab52bfe11d8d" translate="yes" xml:space="preserve">
          <source>A directive is a behavior which should be triggered when specific HTML constructs are encountered during the compilation process. The directives can be placed in element names, attributes, class names, as well as comments. Here are some equivalent examples of invoking the &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt;&lt;code&gt;ng-bind&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">ディレクティブは、コンパイルプロセス中に特定のHTML構造が検出されたときにトリガーされる動作です。ディレクティブは、要素名、属性、クラス名、およびコメントに配置できます。&lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt; &lt;code&gt;ng-bind&lt;/code&gt; &lt;/a&gt;ディレクティブを呼び出す同等の例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="327c78294c94992b0cd933d4b87c5e9699e89329" translate="yes" xml:space="preserve">
          <source>A directive is just a function which executes when the compiler encounters it in the DOM. See &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directive API&lt;/a&gt; for in-depth documentation on how to write directives.</source>
          <target state="translated">ディレクティブは、コンパイラがDOMでディレクティブを検出したときに実行される関数です。&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブの&lt;/a&gt;記述方法の詳細については、ディレクティブAPIを参照してください。</target>
        </trans-unit>
        <trans-unit id="00783a21194e4ab3c93280470d34ea3574675381" translate="yes" xml:space="preserve">
          <source>A factory which creates a resource object that lets you interact with &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;RESTful&lt;/a&gt; server-side data sources.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;RESTful&lt;/a&gt;サーバー側データソースとの対話を可能にするリソースオブジェクトを作成するファクトリ。</target>
        </trans-unit>
        <trans-unit id="5c8486262a8cc125f156fc196df5ff94ab056589" translate="yes" xml:space="preserve">
          <source>A factory which creates a resource object that lets you interact with &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;RESTful&lt;/a&gt; server-side data sources.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;RESTful&lt;/a&gt;サーバー側データソースと対話できるようにするリソースオブジェクトを作成するファクトリ。</target>
        </trans-unit>
        <trans-unit id="75674063b61a643301023ae7950ffed53283453a" translate="yes" xml:space="preserve">
          <source>A first example: Data binding</source>
          <target state="translated">最初の例。データバインディング</target>
        </trans-unit>
        <trans-unit id="e0ea85d6b6af2158aa8c6e9605380b608e4a22b9" translate="yes" xml:space="preserve">
          <source>A form is an instance of &lt;a href=&quot;../api/ng/type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;. The form instance can optionally be published into the scope using the &lt;code&gt;name&lt;/code&gt; attribute.</source>
          <target state="translated">フォームは&lt;a href=&quot;../api/ng/type/form.formcontroller&quot;&gt;FormControllerの&lt;/a&gt;インスタンスです。フォームインスタンスは、オプションで &lt;code&gt;name&lt;/code&gt; 属性を使用してスコープに公開できます。</target>
        </trans-unit>
        <trans-unit id="09b0457141fd71126f4f5b1856e175c7bdc679f5" translate="yes" xml:space="preserve">
          <source>A function that performs no operations. This function can be useful when writing code in the functional style.</source>
          <target state="translated">演算を行わない関数です。この関数は、関数型のコードを書くときに便利です。</target>
        </trans-unit>
        <trans-unit id="927c2853c79260f99382637d60b1f31d09e600d8" translate="yes" xml:space="preserve">
          <source>A function that returns its first argument. This function is useful when writing code in the functional style.</source>
          <target state="translated">第一引数を返す関数です。この関数は、関数型のコードを書くときに便利です。</target>
        </trans-unit>
        <trans-unit id="3bf96ebee31efd450a90bce44c461047308f3f00" translate="yes" xml:space="preserve">
          <source>A function that should be called repeatedly.</source>
          <target state="translated">繰り返し呼び出すべき関数です。</target>
        </trans-unit>
        <trans-unit id="d5fe795730c98a599df718415511d721ffaffbbc" translate="yes" xml:space="preserve">
          <source>A function that should be called repeatedly. If no additional arguments are passed (see below), the function is called with the current iteration count.</source>
          <target state="translated">繰り返し呼び出されるべき関数。追加の引数が渡されない場合(以下を参照)、関数は現在の反復回数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f48966c4d92539555740018c51cafcd2b987c9f4" translate="yes" xml:space="preserve">
          <source>A function which represents the compiled expression:</source>
          <target state="translated">コンパイルされた式を表す関数。</target>
        </trans-unit>
        <trans-unit id="03e8ddc04c009e88be1986ce9071a6ff42d38f7e" translate="yes" xml:space="preserve">
          <source>A function which takes two arguments &lt;code&gt;tElement&lt;/code&gt; and &lt;code&gt;tAttrs&lt;/code&gt; (described in the &lt;code&gt;compile&lt;/code&gt; function api below) and returns a string value.</source>
          <target state="translated">2つの引数 &lt;code&gt;tElement&lt;/code&gt; と &lt;code&gt;tAttrs&lt;/code&gt; （以下の &lt;code&gt;compile&lt;/code&gt; 関数apiで説明）を取り、文字列値を返す関数。</target>
        </trans-unit>
        <trans-unit id="02dbdfe8aec371363fd2d4f9088e6efc174fd5a2" translate="yes" xml:space="preserve">
          <source>A function, whose execution should be delayed.</source>
          <target state="translated">実行を遅らせるべき関数。</target>
        </trans-unit>
        <trans-unit id="56056728c573b2a14e4a6b4609fd75c358098fed" translate="yes" xml:space="preserve">
          <source>A handful of common AngularJS directives support and trigger animation hooks whenever any major event occurs during their life cycle. The table below explains in detail which animation events are triggered:</source>
          <target state="translated">一握りの一般的なAngularJSディレクティブは、そのライフサイクルの中で大きなイベントが発生するたびにアニメーションフックをサポートし、トリガーします。下の表はどのアニメーションイベントがトリガーされるかを詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="e4ed6112409252387811e119060f0e3fb404c17f" translate="yes" xml:space="preserve">
          <source>A hash containing all the modules that have been loaded into the $injector.</source>
          <target state="translated">インジェクタにロードされたすべてのモジュールを含むハッシュ。</target>
        </trans-unit>
        <trans-unit id="6280bbd23fbf02ccab69cad3ae2df8798d0ede5f" translate="yes" xml:space="preserve">
          <source>A list of module functions or their aliases. See &lt;a href=&quot;angular.module&quot;&gt;&lt;code&gt;angular.module&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;ng&lt;/code&gt; module must be explicitly added.</source>
          <target state="translated">モジュール関数またはそのエイリアスのリスト。&lt;a href=&quot;angular.module&quot;&gt; &lt;code&gt;angular.module&lt;/code&gt; を&lt;/a&gt;参照してください。 &lt;code&gt;ng&lt;/code&gt; のモジュールを明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="94127fa72f5be9627d12463f3a9a89dc6e85f8d2" translate="yes" xml:space="preserve">
          <source>A list of valid HTML elements or an object with one or more of the following properties:</source>
          <target state="translated">有効なHTML要素のリスト、または以下のプロパティの1つ以上を持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="05e8a415e27bf82becfd6d37ac93442a77ca6c5f" translate="yes" xml:space="preserve">
          <source>A list of valid attributes.</source>
          <target state="translated">有効な属性のリスト。</target>
        </trans-unit>
        <trans-unit id="a2cff4a5b3056231e50fc5df06de40e59768b479" translate="yes" xml:space="preserve">
          <source>A locale is a specific geographical, political, or cultural region. The most commonly used locale ID consists of two parts: language code and country code. For example, &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;en-AU&lt;/code&gt;, and &lt;code&gt;zh-CN&lt;/code&gt; are all valid locale IDs that have both language codes and country codes. Because specifying a country code in locale ID is optional, locale IDs such as &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;zh&lt;/code&gt;, and &lt;code&gt;sk&lt;/code&gt; are also valid. See the &lt;a href=&quot;http://userguide.icu-project.org/locale&quot;&gt;ICU&lt;/a&gt; website for more information about using locale IDs.</source>
          <target state="translated">ロケールは、特定の地理的、政治的、または文化的地域です。最も一般的に使用されるロケールIDは、言語コードと国コードの2つの部分で構成されています。たとえば、 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;en-AU&lt;/code&gt; 、および &lt;code&gt;zh-CN&lt;/code&gt; はすべて、言語コードと国コードの両方を持つ有効なロケールIDです。ロケールIDで国コードを指定することはオプションであるため、 &lt;code&gt;en&lt;/code&gt; 、 &lt;code&gt;zh&lt;/code&gt; 、および &lt;code&gt;sk&lt;/code&gt; などのロケールID も有効です。ロケールIDの使用の詳細については、&lt;a href=&quot;http://userguide.icu-project.org/locale&quot;&gt;ICUの&lt;/a&gt; Webサイトを参照してください。</target>
        </trans-unit>
        <trans-unit id="1ffed9d0df0955721113607f963949822e354ee2" translate="yes" xml:space="preserve">
          <source>A map of DOM element attribute names to the normalized name. This is needed to do reverse lookup from normalized name back to actual name.</source>
          <target state="translated">DOM 要素の属性名を正規化された名前にマップしたもの。これは、正規化された名前から実際の名前への逆引きを行うために必要です。</target>
        </trans-unit>
        <trans-unit id="ac050f8b13fbbe0e23861b0e31a09920964b0407" translate="yes" xml:space="preserve">
          <source>A map of parameters for a given route, passed as part of the &lt;a href=&quot;componentinstruction&quot;&gt;&lt;code&gt;ComponentInstruction&lt;/code&gt;&lt;/a&gt; to the Lifecycle Hooks, such as &lt;code&gt;$routerOnActivate&lt;/code&gt; and &lt;code&gt;$routerOnDeactivate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$routerOnActivate&lt;/code&gt; や &lt;code&gt;$routerOnDeactivate&lt;/code&gt; など、&lt;a href=&quot;componentinstruction&quot;&gt; &lt;code&gt;ComponentInstruction&lt;/code&gt; の&lt;/a&gt;一部としてライフサイクルフックに渡される、特定のルートのパラメーターのマップ。</target>
        </trans-unit>
        <trans-unit id="09b167f576d80fcd815b55aefdf9875dc0673668" translate="yes" xml:space="preserve">
          <source>A map of parameters for a given route, passed as part of the &lt;a href=&quot;ngcomponentrouter/type/componentinstruction&quot;&gt;&lt;code&gt;ComponentInstruction&lt;/code&gt;&lt;/a&gt; to the Lifecycle Hooks, such as &lt;code&gt;$routerOnActivate&lt;/code&gt; and &lt;code&gt;$routerOnDeactivate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$routerOnActivate&lt;/code&gt; や &lt;code&gt;$routerOnDeactivate&lt;/code&gt; など、&lt;a href=&quot;ngcomponentrouter/type/componentinstruction&quot;&gt; &lt;code&gt;ComponentInstruction&lt;/code&gt; の&lt;/a&gt;一部としてライフサイクルフックに渡される、特定のルートのパラメーターのマップ。</target>
        </trans-unit>
        <trans-unit id="9324f5aeabd030e8b469f119f264258ae0a72395" translate="yes" xml:space="preserve">
          <source>A map of parameters for a given route, passed as part of the &lt;a href=&quot;type/componentinstruction&quot;&gt;&lt;code&gt;ComponentInstruction&lt;/code&gt;&lt;/a&gt; to the Lifecycle Hooks, such as &lt;code&gt;$routerOnActivate&lt;/code&gt; and &lt;code&gt;$routerOnDeactivate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$routerOnActivate&lt;/code&gt; や &lt;code&gt;$routerOnDeactivate&lt;/code&gt; など、&lt;a href=&quot;type/componentinstruction&quot;&gt; &lt;code&gt;ComponentInstruction&lt;/code&gt; の&lt;/a&gt;一部としてライフサイクルフックに渡される、特定のルートのパラメーターのマップ。</target>
        </trans-unit>
        <trans-unit id="3aca56da114e66b6c7c9831f0302af945e2b9423" translate="yes" xml:space="preserve">
          <source>A model consisting of a string named &lt;code&gt;spice&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;spice&lt;/code&gt; という名前のストリングで構成されるモデル</target>
        </trans-unit>
        <trans-unit id="ac776570f178191e1b9faf4c959abe7440ff6155" translate="yes" xml:space="preserve">
          <source>A module for each feature</source>
          <target state="translated">各機能に対応したモジュール</target>
        </trans-unit>
        <trans-unit id="263fee6d5c3ddbbb6ce730daf5dc87f3fdbb2fed" translate="yes" xml:space="preserve">
          <source>A module for each reusable component (especially directives and filters)</source>
          <target state="translated">各再利用可能なコンポーネント(特にディレクティブとフィルタ)のためのモジュール</target>
        </trans-unit>
        <trans-unit id="225d25f6753d494a37f0848446bbaa811f297e5e" translate="yes" xml:space="preserve">
          <source>A module is a collection of services, directives, controllers, filters, and configuration information. &lt;code&gt;angular.module&lt;/code&gt; is used to configure the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">モジュールは、サービス、ディレクティブ、コントローラー、フィルター、および構成情報のコレクションです。 &lt;code&gt;angular.module&lt;/code&gt; は&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorの&lt;/a&gt;設定に使用されます。</target>
        </trans-unit>
        <trans-unit id="1b9810a38acec3b0112fef4ba925967a0ec7560a" translate="yes" xml:space="preserve">
          <source>A more complex example, featuring different show/hide animations:</source>
          <target state="translated">より複雑な例では、異なるショー/非表示のアニメーションを特徴としています。</target>
        </trans-unit>
        <trans-unit id="9802b05fcc81cdbc44d9f5ea5e204cb68b0b7cc8" translate="yes" xml:space="preserve">
          <source>A naive approach to solving this problem would be to simply insert a copy of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element and then compile it. The problem with this approach is that compiling on every &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that we clone would duplicate a lot of the work. Specifically, we'd be traversing &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; each time before cloning it to find the directives. This would cause the compilation process to be slower, in turn making applications less responsive when inserting new nodes.</source>
          <target state="translated">この問題を解決する素朴なアプローチは、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のコピーを挿入してコンパイルするだけです。このアプローチの問題は、クローンを作成するすべての &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素でコンパイルすると、多くの作業が重複することです。特に、ディレクティブを見つけるためにそれを複製する前に、毎回 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; をトラバースします。これにより、コンパイルプロセスが遅くなり、新しいノードを挿入するときにアプリケーションの応答が遅くなります。</target>
        </trans-unit>
        <trans-unit id="a3f1861ea558e04a53d812f2833cbf6d5066b137" translate="yes" xml:space="preserve">
          <source>A new instance of deferred is constructed by calling &lt;code&gt;$q.defer()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$q.defer()&lt;/code&gt; 呼び出すことにより、deferredの新しいインスタンスが構築されます。</target>
        </trans-unit>
        <trans-unit id="cb83fe916c440c15ab744b5d59e5a6ebfa47364e" translate="yes" xml:space="preserve">
          <source>A new promise instance is created when a deferred instance is created and can be retrieved by calling &lt;code&gt;deferred.promise&lt;/code&gt;.</source>
          <target state="translated">繰延インスタンスが作成され、呼び出すことによって取得することができたときに新しい約束インスタンスが作成され &lt;code&gt;deferred.promise&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="713a88d680af18fb58af607a73c855c9cc2e0e1b" translate="yes" xml:space="preserve">
          <source>A new sub-array or substring of length &lt;code&gt;limit&lt;/code&gt; or less if the input had less than &lt;code&gt;limit&lt;/code&gt; elements.</source>
          <target state="translated">入力に &lt;code&gt;limit&lt;/code&gt; 未満の要素がある場合は、長さ &lt;code&gt;limit&lt;/code&gt; 以下の新しいサブ配列または部分文字列。</target>
        </trans-unit>
        <trans-unit id="2b7a002c87fcd8660e3544e9875caa6df20fec19" translate="yes" xml:space="preserve">
          <source>A note about browser compatibility</source>
          <target state="translated">ブラウザの互換性についての注意点</target>
        </trans-unit>
        <trans-unit id="29ae56a350199f61ba8d6960a863d68ba1e1280c" translate="yes" xml:space="preserve">
          <source>A numerical timeout or a promise returned from &lt;a href=&quot;%24timeout&quot;&gt;$timeout&lt;/a&gt;, will set the &lt;code&gt;xhrStatus&lt;/code&gt; in the &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;response&lt;/a&gt; to &quot;timeout&quot;, and any other resolved promise will set it to &quot;abort&quot;, following standard XMLHttpRequest behavior.</source>
          <target state="translated">数値のタイムアウトまたは&lt;a href=&quot;%24timeout&quot;&gt;$ timeout&lt;/a&gt;から返される &lt;code&gt;xhrStatus&lt;/code&gt; は、&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;レスポンス&lt;/a&gt;のxhrStatusを「タイムアウト」に設定し、その他の解決済みプロミスは、標準のXMLHttpRequestの動作に従って「中止」に設定します。</target>
        </trans-unit>
        <trans-unit id="1116347f621c5180dfe109771a3b63007d50e2f3" translate="yes" xml:space="preserve">
          <source>A parameterized URL template with parameters prefixed by &lt;code&gt;:&lt;/code&gt; as in &lt;code&gt;/user/:username&lt;/code&gt;. If you are using a URL with a port number (e.g. &lt;code&gt;http://example.com:8080/api&lt;/code&gt;), it will be respected.</source>
          <target state="translated">始まるパラメータを持つパラメータ化URLテンプレート &lt;code&gt;:&lt;/code&gt; のように &lt;code&gt;/user/:username&lt;/code&gt; 。ポート番号（例： &lt;code&gt;http://example.com:8080/api&lt;/code&gt; : //example.com : 8080/api）を含むURLを使用している場合は、それが尊重されます。</target>
        </trans-unit>
        <trans-unit id="452392dbf344d122f7b332400f90489eab5c05a3" translate="yes" xml:space="preserve">
          <source>A path should always begin with forward slash (&lt;code&gt;/&lt;/code&gt;); the &lt;code&gt;$location.path()&lt;/code&gt; setter will add the forward slash if it is missing.</source>
          <target state="translated">パスは常にスラッシュ（ &lt;code&gt;/&lt;/code&gt; ）で始める必要があります。 &lt;code&gt;$location.path()&lt;/code&gt; それが欠落している場合セッターは、スラッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="6a8dda83e3a1b0ef1feb44da945442f04db8d3e9" translate="yes" xml:space="preserve">
          <source>A predicate (or list of predicates) to be used by the comparator to determine the order of elements.</source>
          <target state="translated">要素の順序を決定するために比較器によって使用される述語(または述語のリスト)。</target>
        </trans-unit>
        <trans-unit id="5e0995f849e5cdc1b945ea8fbb9875c89ea13cf7" translate="yes" xml:space="preserve">
          <source>A promise from calling the &lt;code&gt;$interval&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;$interval&lt;/code&gt; 関数を呼び出すことからの約束。</target>
        </trans-unit>
        <trans-unit id="4e7cf7245f1fe3b7e365471f31c20059d76f5920" translate="yes" xml:space="preserve">
          <source>A promise which will be notified on each iteration.</source>
          <target state="translated">反復のたびに通知される約束。</target>
        </trans-unit>
        <trans-unit id="5212905179099b47b09b21e5997cb8a49f0a5971" translate="yes" xml:space="preserve">
          <source>A promise which will be notified on each iteration. It will resolve once all iterations of the interval complete.</source>
          <target state="translated">反復ごとに通知される約束。インターバルのすべての反復が完了すると解決されます。</target>
        </trans-unit>
        <trans-unit id="040660a941ed0ab75c40a02ea66cad58886ab53e" translate="yes" xml:space="preserve">
          <source>A reference to the browser's &lt;code&gt;window&lt;/code&gt; object. While &lt;code&gt;window&lt;/code&gt; is globally available in JavaScript, it causes testability problems, because it is a global variable. In AngularJS we always refer to it through the &lt;code&gt;$window&lt;/code&gt; service, so it may be overridden, removed or mocked for testing.</source>
          <target state="translated">ブラウザの &lt;code&gt;window&lt;/code&gt; オブジェクトへの参照。一方で &lt;code&gt;window&lt;/code&gt; JavaScriptでグローバルに使用され、それはグローバル変数であるので、それは、テスト容易性の問題が発生します。AngularJSでは、常に &lt;code&gt;$window&lt;/code&gt; サービスを通じて参照するため、テストのためにオーバーライド、削除、またはモックすることができます。</target>
        </trans-unit>
        <trans-unit id="de848095c9da48c3f2897c90875017cd0e56d38e" translate="yes" xml:space="preserve">
          <source>A remote template can also be used (With &lt;a href=&quot;ngmessagesinclude&quot;&gt;&lt;code&gt;ngMessagesInclude&lt;/code&gt;&lt;/a&gt;) to promote message reusability and messages can also be overridden.</source>
          <target state="translated">リモートテンプレートを（&lt;a href=&quot;ngmessagesinclude&quot;&gt; &lt;code&gt;ngMessagesInclude&lt;/code&gt; とともに&lt;/a&gt;）使用して、メッセージの再利用性を促進することもでき、メッセージをオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="54b9cbb30f599a8403b248268c58e667bbc74bf9" translate="yes" xml:space="preserve">
          <source>A resource &quot;class&quot; object with methods for the default set of resource actions optionally extended with custom &lt;code&gt;actions&lt;/code&gt;. The default set contains these actions:</source>
          <target state="translated">オプションのカスタム &lt;code&gt;actions&lt;/code&gt; 拡張されたリソースアクションのデフォルトセットのメソッドを持つリソース「クラス」オブジェクト。デフォルトセットには、次のアクションが含まれています。</target>
        </trans-unit>
        <trans-unit id="8a72795321ece67e315ace2352d61342be26d7a9" translate="yes" xml:space="preserve">
          <source>A response status code between 200 and 299 is considered a success status and will result in the success callback being called. Any response status code outside of that range is considered an error status and will result in the error callback being called. Also, status codes less than -1 are normalized to zero. -1 usually means the request was aborted, e.g. using a &lt;code&gt;config.timeout&lt;/code&gt;. More information about the status might be available in the &lt;code&gt;xhrStatus&lt;/code&gt; property.</source>
          <target state="translated">200〜299の応答ステータスコードは成功ステータスと見なされ、成功コールバックが呼び出されます。その範囲外の応答ステータスコードはエラーステータスと見なされ、エラーコールバックが呼び出されます。また、-1未満のステータスコードはゼロに正規化されます。 -1は通常、たとえば &lt;code&gt;config.timeout&lt;/code&gt; を使用して、リクエストが中止されたことを意味します。ステータスの詳細については、 &lt;code&gt;xhrStatus&lt;/code&gt; プロパティを参照してください。</target>
        </trans-unit>
        <trans-unit id="4d78c5ef35ba9a3a351b9b8b8ececf7e7781e688" translate="yes" xml:space="preserve">
          <source>A root scope can be retrieved using the &lt;a href=&quot;../service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; key from the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Child scopes are created using the &lt;a href=&quot;%24rootscope.scope#%24new.html&quot;&gt;$new()&lt;/a&gt; method. (Most scopes are created automatically when compiled HTML template is executed.) See also the &lt;a href=&quot;../../../guide/scope&quot;&gt;Scopes guide&lt;/a&gt; for an in-depth introduction and usage examples.</source>
          <target state="translated">ルートスコープを使用して取得することができます&lt;a href=&quot;../service/%24rootscope&quot;&gt;$ rootScopeの&lt;/a&gt;からキー&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。子スコープは&lt;a href=&quot;%24rootscope.scope#%24new.html&quot;&gt;$ new（）&lt;/a&gt;メソッドを使用して作成されます。（ほとんどのスコープは、コンパイルされたHTMLテンプレートが実行されると自動的に作成されます。）詳細な導入と使用例については、&lt;a href=&quot;../../../guide/scope&quot;&gt;スコープガイド&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="004008a8c97d3672714468bc8cfe76b2c7cab307" translate="yes" xml:space="preserve">
          <source>A root scope can be retrieved using the &lt;a href=&quot;service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; key from the &lt;a href=&quot;../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Child scopes are created using the &lt;a href=&quot;type/%24rootscope.scope#%24new.html&quot;&gt;$new()&lt;/a&gt; method. (Most scopes are created automatically when compiled HTML template is executed.) See also the &lt;a href=&quot;../../guide/scope&quot;&gt;Scopes guide&lt;/a&gt; for an in-depth introduction and usage examples.</source>
          <target state="translated">ルートスコープを使用して取得することができます&lt;a href=&quot;service/%24rootscope&quot;&gt;$ rootScopeの&lt;/a&gt;からキー&lt;a href=&quot;../auto/service/%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。子スコープは&lt;a href=&quot;type/%24rootscope.scope#%24new.html&quot;&gt;$ new（）&lt;/a&gt;メソッドを使用して作成されます。（ほとんどのスコープは、コンパイルされたHTMLテンプレートが実行されると自動的に作成されます。）詳細な導入と使用例については、&lt;a href=&quot;../../guide/scope&quot;&gt;スコープガイド&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9472f1a4df3f71716a86325e4dcd0e27c0314c58" translate="yes" xml:space="preserve">
          <source>A scope can inherit from a parent scope, as in this example:</source>
          <target state="translated">スコープは、この例のように親スコープを継承することができます。</target>
        </trans-unit>
        <trans-unit id="8a3e8603742beaaec4dd1f083ac44804290ac748" translate="yes" xml:space="preserve">
          <source>A service that can be used to create instances of component controllers. Useful for unit-testing.</source>
          <target state="translated">コンポーネントコントローラのインスタンスを作成するために使用できるサービス。ユニットテストに便利です。</target>
        </trans-unit>
        <trans-unit id="9909d73dae5dc48bf7bd8f099425c18f2ccd1383" translate="yes" xml:space="preserve">
          <source>A service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing.</source>
          <target state="translated">関数を非同期に実行し、処理が終わったときにその戻り値(または例外)を使用するのを支援するサービスです。</target>
        </trans-unit>
        <trans-unit id="7fa98307bb925b7e78fec6db866350c8f5850d65" translate="yes" xml:space="preserve">
          <source>A shared object between directive compile / linking functions which contains normalized DOM element attributes. The values reflect current binding state &lt;code&gt;{{ }}&lt;/code&gt;. The normalization is needed since all of these are treated as equivalent in AngularJS:</source>
          <target state="translated">正規化されたDOM要素の属性を含む、ディレクティブのコンパイル/リンク関数間の共有オブジェクト。値は現在のバインディング状態 &lt;code&gt;{{ }}&lt;/code&gt; 反映しています。これらすべてがAngularJSでは同等として扱われるため、正規化が必要です。</target>
        </trans-unit>
        <trans-unit id="578c6a6777e13169afd3ec0627d9cbccce541d6b" translate="yes" xml:space="preserve">
          <source>A simple &lt;code&gt;ng-csp&lt;/code&gt; (or &lt;code&gt;data-ng-csp&lt;/code&gt;) attribute will tell AngularJS to deactivate both inline styles and unsafe eval. E.g. &lt;code&gt;&amp;lt;body ng-csp&amp;gt;&lt;/code&gt;. This is backwardly compatible with previous versions of AngularJS.</source>
          <target state="translated">単純な &lt;code&gt;ng-csp&lt;/code&gt; （または &lt;code&gt;data-ng-csp&lt;/code&gt; ）属性は、AngularJSにインラインスタイルと安全でないevalの両方を無効にするように指示します。例： &lt;code&gt;&amp;lt;body ng-csp&amp;gt;&lt;/code&gt; 。これは、AngularJSの以前のバージョンとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="8eab9356a6cee0bd4192aaa4fe8dc2252df33c89" translate="yes" xml:space="preserve">
          <source>A simple example, animating the element's opacity:</source>
          <target state="translated">簡単な例では、要素の不透明度をアニメーション化しています。</target>
        </trans-unit>
        <trans-unit id="13ca11ee80a7423b520a8cbb9b876c83a8413e4b" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;checked&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;checked&lt;/code&gt; 属性内では補間を使用できないため、特別なディレクティブが必要です。詳細については、&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="96ec97c9bf5c06b46afd2259dcdc487df739471f" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;disabled&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; 属性内では補間を使用できないため、特別なディレクティブが必要です。詳細については、&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e86a8cbd4ddf2dfcb7e716138595387a4e5a85fe" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;open&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 属性内では補間を使用できないため、特別なディレクティブが必要です。詳細については、&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b91103bfde51390004606921a7b8fb1ff063be2b" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;readonly&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;readonly&lt;/code&gt; 属性内では補間を使用できないため、特別なディレクティブが必要です。詳細については、&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6493fd9ee730755cb99067d28aafe6366edf30cf" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;selected&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;selected&lt;/code&gt; 属性内では補間を使用できないため、特別なディレクティブが必要です。詳細については、&lt;a href=&quot;../../../guide/interpolation&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d5e64837c87ce8f3783157fa15fe926b963dac1" translate="yes" xml:space="preserve">
          <source>A special type of scope is the &lt;code&gt;isolate&lt;/code&gt; scope, which does not inherit prototypically from the parent scope. This type of scope is useful for component directives that should be isolated from their parent scope. See the &lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;directives guide&lt;/a&gt; for more information about isolate scopes in custom directives.</source>
          <target state="translated">特別なタイプのスコープは &lt;code&gt;isolate&lt;/code&gt; スコープです。これは親スコープからプロトタイプを継承しません。このタイプのスコープは、親スコープから分離する必要があるコンポーネントディレクティブに役立ちます。カスタムディレクティブの分離スコープの詳細については、&lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;ディレクティブガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="59ad40cb735425875e2d4a8ab8e7371e40ff26f7" translate="yes" xml:space="preserve">
          <source>A string. For example &lt;code&gt;&amp;lt;div red-on-hover&amp;gt;{{delete_str}}&amp;lt;/div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">文字列。たとえば、 &lt;code&gt;&amp;lt;div red-on-hover&amp;gt;{{delete_str}}&amp;lt;/div&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8b0ca9801d5fb35012af168b081343748fd65273" translate="yes" xml:space="preserve">
          <source>A trusted representation of value, that can be used in the given context.</source>
          <target state="translated">指定されたコンテキストで使用できる信頼された値の表現。</target>
        </trans-unit>
        <trans-unit id="5b850d32e9f4e83610766a68bff4d1eb00b0f5a4" translate="yes" xml:space="preserve">
          <source>A unit test is a way of instantiating a subset of an application to apply stimulus to it. Small, structured modules help keep unit tests concise and focused.</source>
          <target state="translated">ユニットテストは、アプリケーションのサブセットをインスタンス化して、それに刺激を適用する方法です。小規模で構造化されたモジュールは、ユニットテストを簡潔かつ集中的に保つのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="cd209eeff32e50f79f69edda44a79e2b6ab0898e" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; where it watches an array of &lt;code&gt;watchExpressions&lt;/code&gt;. If any one expression in the collection changes the &lt;code&gt;listener&lt;/code&gt; is executed.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）の&lt;/a&gt;バリアントで、 &lt;code&gt;watchExpressions&lt;/code&gt; の配列を監視します。コレクション内のいずれかの式が変更されると、 &lt;code&gt;listener&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="1b45ac319be996d2d941a9d9450c2984ad5ce01e" translate="yes" xml:space="preserve">
          <source>A version of the value that's safe to use in the given context, or throws an exception if this is impossible.</source>
          <target state="translated">与えられたコンテキストで使用しても安全な値のバージョン、あるいはそれが不可能な場合は例外をスローします。</target>
        </trans-unit>
        <trans-unit id="2114b9cf09c04eaad419c5fd2210545525228750" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.CSS&lt;/code&gt; context. This context is currently unused, so there are almost no reasons to use this function so far.</source>
          <target state="translated">あなたの信頼できるバリアントとして使用することができます値の包まれたバージョン &lt;code&gt;value&lt;/code&gt; に &lt;code&gt;$sce.CSS&lt;/code&gt; コンテキスト。このコンテキストは現在使用されていないため、これまでこの関数を使用する理由はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="6aac2364c23b77028d5fac2c7100d9e6ad6e89db" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.HTML&lt;/code&gt; context (like &lt;code&gt;ng-bind-html&lt;/code&gt;).</source>
          <target state="translated">あなたの信頼できるバリアントとして使用することができます値のラップバージョン &lt;code&gt;value&lt;/code&gt; で &lt;code&gt;$sce.HTML&lt;/code&gt; コンテキスト（のような &lt;code&gt;ng-bind-html&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="943e357106396a3e0df4457b98387b3baac1cd3d" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.JS&lt;/code&gt; context. That context is currently unused, so there are almost no reasons to use this function so far.</source>
          <target state="translated">あなたの信頼できるバリアントとして使用することができます値の包まれたバージョン &lt;code&gt;value&lt;/code&gt; に &lt;code&gt;$sce.JS&lt;/code&gt; コンテキスト。そのコンテキストは現在使用されていないため、これまでこの関数を使用する理由はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="aee72dee5c81b8892475ad7e50e66f541550e109" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context (template URLs in &lt;code&gt;ng-include&lt;/code&gt;, most &lt;code&gt;src&lt;/code&gt; attribute bindings, ...)</source>
          <target state="translated">あなたの信頼できるバリアントとして使用することができます値のラップバージョン &lt;code&gt;value&lt;/code&gt; で &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; コンテキスト（でテンプレートのURL &lt;code&gt;ng-include&lt;/code&gt; 、ほとんど &lt;code&gt;src&lt;/code&gt; 属性バインディング、...）</target>
        </trans-unit>
        <trans-unit id="e93e7d74205a414b8e296caec821b600388e6ede" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.URL&lt;/code&gt; context. That context is currently unused, so there are almost no reasons to use this function so far.</source>
          <target state="translated">あなたの信頼できるバリアントとして使用することができます値のラップバージョン &lt;code&gt;value&lt;/code&gt; で &lt;code&gt;$sce.URL&lt;/code&gt; コンテキスト。そのコンテキストは現在使用されていないため、これまでこの関数を使用する理由はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="94634151636234123b70b002561d0dc752c67a9e" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in the context you specified.</source>
          <target state="translated">指定したコンテキストで &lt;code&gt;value&lt;/code&gt; 信頼できるバリアントとして使用できるラップされた値のバージョン。</target>
        </trans-unit>
        <trans-unit id="e5742b7d392c9ff17c292adaab06bd43e7effa1d" translate="yes" xml:space="preserve">
          <source>A11y Project</source>
          <target state="translated">A11yプロジェクト</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API リファレンス</target>
        </trans-unit>
        <trans-unit id="771b5051428b8e31be4c1e9b28544157fe69eb11" translate="yes" xml:space="preserve">
          <source>Absolute links that go to a different domain</source>
          <target state="translated">別ドメインに行く絶対リンク</target>
        </trans-unit>
        <trans-unit id="abb8862cb5fd053f1431200782dd6b2385ba3889" translate="yes" xml:space="preserve">
          <source>Absolute or relative URL of the resource that is being requested; or an object created by a call to &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;.</source>
          <target state="translated">要求されているリソースの絶対または相対URL。または、 &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; 呼び出しによって作成されたオブジェクト。</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="932d041badc29d5b5f5f02116595faeaf3e79a51" translate="yes" xml:space="preserve">
          <source>Accessibility best practices that apply to web apps in general also apply to AngularJS.</source>
          <target state="translated">ウェブアプリ全般に適用されるアクセシビリティのベストプラクティスはAngularJSにも適用されます。</target>
        </trans-unit>
        <trans-unit id="a368acd524486ce1ec9e162bc6921361dffc280e" translate="yes" xml:space="preserve">
          <source>Accessing the backend</source>
          <target state="translated">バックエンドへのアクセス</target>
        </trans-unit>
        <trans-unit id="73f18c14545e6b8de39ba7a2b2dae679a17ad3cd" translate="yes" xml:space="preserve">
          <source>Accessing the response</source>
          <target state="translated">レスポンスへのアクセス</target>
        </trans-unit>
        <trans-unit id="53dfdad6a297f31a276521fd544f3049a48d0385" translate="yes" xml:space="preserve">
          <source>Add behavior to the &lt;code&gt;$scope&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;$scope&lt;/code&gt; オブジェクトに動作を追加します。</target>
        </trans-unit>
        <trans-unit id="354177651f5bd3ccb60bca3a000a1293dfe5c051" translate="yes" xml:space="preserve">
          <source>Add custom attributes to the link element.</source>
          <target state="translated">link要素にカスタム属性を追加します。</target>
        </trans-unit>
        <trans-unit id="aa635fd7300af5b89def28983561aaf159169195" translate="yes" xml:space="preserve">
          <source>Add the specified modules to the current injector.</source>
          <target state="translated">指定されたモジュールを現在のインジェクタに追加します。</target>
        </trans-unit>
        <trans-unit id="8cf8d577c9d621dfe11c43d243bcf5df4901001a" translate="yes" xml:space="preserve">
          <source>Adding Behavior to a Scope Object</source>
          <target state="translated">スコープオブジェクトに動作を追加する</target>
        </trans-unit>
        <trans-unit id="0dd3cd9ca66b96853fa6aa63eec6ed109ced7c1d" translate="yes" xml:space="preserve">
          <source>Adding UI logic: Controllers</source>
          <target state="translated">UIロジックを追加します。コントローラ</target>
        </trans-unit>
        <trans-unit id="16fadc2c4c92cb401aef05833ef060e854d83464" translate="yes" xml:space="preserve">
          <source>Adding via the &lt;code&gt;$templateCache&lt;/code&gt; service:</source>
          <target state="translated">&lt;code&gt;$templateCache&lt;/code&gt; サービスを介して追加：</target>
        </trans-unit>
        <trans-unit id="92ae3f2635c80ce7fb8d316d1172975f449ef38b" translate="yes" xml:space="preserve">
          <source>Adding via the &lt;code&gt;script&lt;/code&gt; tag:</source>
          <target state="translated">&lt;code&gt;script&lt;/code&gt; タグを介して追加：</target>
        </trans-unit>
        <trans-unit id="d8b82f8ac1fd93a8c5863d25cc6558cb656b7f40" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
          <target state="translated">追加リソース</target>
        </trans-unit>
        <trans-unit id="8c2ac4451a90f41ac885a24324949060081e16e9" translate="yes" xml:space="preserve">
          <source>Additional tools for testing AngularJS applications</source>
          <target state="translated">AngularJSアプリケーションをテストするためのその他のツール</target>
        </trans-unit>
        <trans-unit id="28b5580670d0ebc7e0ca1d7a532bdf62dab04cfd" translate="yes" xml:space="preserve">
          <source>Additionally it prevents the default action (which for form means sending the request to the server and reloading the current page), but only if the form does not contain &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;data-action&lt;/code&gt;, or &lt;code&gt;x-action&lt;/code&gt; attributes.</source>
          <target state="translated">さらに、デフォルトのアクション（フォームの場合はサーバーにリクエストを送信して現在のページをリロードすることを意味します）を防ぎますが、フォームに &lt;code&gt;action&lt;/code&gt; 、 &lt;code&gt;data-action&lt;/code&gt; 、または &lt;code&gt;x-action&lt;/code&gt; 属性が含まれていない場合のみです。</target>
        </trans-unit>
        <trans-unit id="bed9edff008eef6908d8593fd49a8d5e98f6d618" translate="yes" xml:space="preserve">
          <source>Additionally the promise api allows for composition that is very hard to do with the traditional callback (&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;) approach. For more on this please see the &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q documentation&lt;/a&gt; especially the section on serial or parallel joining of promises.</source>
          <target state="translated">さらに、promise APIは、従来のコールバック（&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;）アプローチで行うことが非常に難しい構成を可能にします。詳細については、&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Qドキュメント&lt;/a&gt;を参照してください。特に、promiseのシリアルまたはパラレル結合に関するセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="388c994bb48bcb45051e5120639de339c11c8f6b" translate="yes" xml:space="preserve">
          <source>Additionally the promise api allows for composition that is very hard to do with the traditional callback (&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;) approach. For more on this please see the &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q documentation&lt;/a&gt; especially the section on serial or parallel joining of promises.</source>
          <target state="translated">さらに、promise apiは、従来のコールバック（&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;）アプローチでは非常に難しい構成を可能にします。詳細については、&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Qドキュメント、&lt;/a&gt;特にPromiseのシリアルまたはパラレル結合に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fa2c2f3d21d9dad1d8fad53911125d3af2babd45" translate="yes" xml:space="preserve">
          <source>Additionally, there is the &lt;code&gt;$asyncValidators&lt;/code&gt; object which handles asynchronous validation, such as making an &lt;code&gt;$http&lt;/code&gt; request to the backend. Functions added to the object must return a promise that must be &lt;code&gt;resolved&lt;/code&gt; when valid or &lt;code&gt;rejected&lt;/code&gt; when invalid. In-progress async validations are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24pending.html&quot;&gt;&lt;code&gt;ngModelController.$pending&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さらに、バックエンドへの &lt;code&gt;$http&lt;/code&gt; リクエストの作成など、非同期検証を処理する &lt;code&gt;$asyncValidators&lt;/code&gt; オブジェクトがあります。オブジェクトに追加された関数は、有効なときに &lt;code&gt;resolved&lt;/code&gt; するか、無効なときに &lt;code&gt;rejected&lt;/code&gt; プロミスを返す必要があります。進行中の非同期検証は、キーによって&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24pending.html&quot;&gt; &lt;code&gt;ngModelController.$pending&lt;/code&gt; &lt;/a&gt;保存されます。</target>
        </trans-unit>
        <trans-unit id="5f35feb0b8448abd58c67d83a67eece168f7873e" translate="yes" xml:space="preserve">
          <source>Additionally, we don't want to manually have to flush mocked out requests like we do during unit testing. For this reason the e2e $httpBackend flushes mocked out requests automatically, closely simulating the behavior of the XMLHttpRequest object.</source>
          <target state="translated">さらに、ユニットテストの時のように、手動でモックアウトされたリクエストをフラッシュする必要はありません。このため、e2e $httpBackend は、XMLHttpRequest オブジェクトの動作を忠実にシミュレートして、モックアウトされたリクエストを自動的にフラッシュします。</target>
        </trans-unit>
        <trans-unit id="aacc914ff1ea9003accb975048b58f1c019e22cb" translate="yes" xml:space="preserve">
          <source>Additionally, you can inject the serializer and use it explicitly, for example to serialize form data for submission:</source>
          <target state="translated">さらに、シリアライザを注入して明示的に使用することができます。</target>
        </trans-unit>
        <trans-unit id="3fb165889f8d056e976595e427b1057d57a14099" translate="yes" xml:space="preserve">
          <source>Additionally, you can provide animations via the &lt;code&gt;ngAnimate&lt;/code&gt; module to animate the &lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt; effects.</source>
          <target state="translated">さらに、 &lt;code&gt;ngAnimate&lt;/code&gt; モジュールを介してアニメーションを提供し、 &lt;code&gt;enter&lt;/code&gt; および &lt;code&gt;leave&lt;/code&gt; エフェクトをアニメーション化できます。</target>
        </trans-unit>
        <trans-unit id="652ae66e59651bbad3fc4132547c5b43954a085e" translate="yes" xml:space="preserve">
          <source>Additionally, you can use its &lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;yOffset&lt;/a&gt; property to specify a vertical scroll-offset (either fixed or dynamic).</source>
          <target state="translated">さらに、&lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;yOffset&lt;/a&gt;プロパティを使用して、垂直スクロールオフセット（固定または動的）を指定できます。</target>
        </trans-unit>
        <trans-unit id="7b94dcd84fce535cb2ad08093b0e0a53afb78af9" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;required&lt;/code&gt; attribute and &lt;code&gt;required&lt;/code&gt; validation constraint to the element when the ngRequired expression evaluates to true. Use &lt;code&gt;ngRequired&lt;/code&gt; instead of &lt;code&gt;required&lt;/code&gt; when you want to data-bind to the &lt;code&gt;required&lt;/code&gt; attribute.</source>
          <target state="translated">ngRequired式がtrueと評価されたときに、要素に &lt;code&gt;required&lt;/code&gt; 属性と &lt;code&gt;required&lt;/code&gt; 検証制約を追加します。 &lt;code&gt;required&lt;/code&gt; 属性にデータバインドする場合は、 &lt;code&gt;required&lt;/code&gt; なく &lt;code&gt;ngRequired&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="662d0e8b0c96e71d3b79c9ae2fe8da8d5ea0749b" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;required&lt;/code&gt; validation error key if the value is not entered.</source>
          <target state="translated">値が入力されていない場合、 &lt;code&gt;required&lt;/code&gt; 検証エラーキーを追加します。</target>
        </trans-unit>
        <trans-unit id="9e69d9b4b904de4d8853a3704d0f29a9f6bee390" translate="yes" xml:space="preserve">
          <source>Adds a new route definition to the &lt;code&gt;$route&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; サービスに新しいルート定義を追加します。</target>
        </trans-unit>
        <trans-unit id="59c0db8eda34b5ba002750f3013c112f07dba20a" translate="yes" xml:space="preserve">
          <source>Adds and removes the appropriate CSS class values to the element based on the difference between the new and old CSS class values (specified as newClasses and oldClasses).</source>
          <target state="translated">新旧のCSSクラス値(newClassesとoldClassesで指定)の差に基づいて、適切なCSSクラス値を要素に追加・削除します。</target>
        </trans-unit>
        <trans-unit id="70ceb392ed0c1f4b5afec6718451ca7c7a9a3166" translate="yes" xml:space="preserve">
          <source>Adds required attribute and required validation constraint to the element when the ngRequired expression evaluates to true. Use ngRequired instead of required when you want to data-bind to the required attribute.</source>
          <target state="translated">ngRequired式が真と評価された場合に、必須属性と必須検証制約を要素に追加します。必須属性にデータをバインドしたい場合は、requiredの代わりにngRequiredを使用します。</target>
        </trans-unit>
        <trans-unit id="f110af3382ef95a8b0c07d1c94b21dc5bb62ac38" translate="yes" xml:space="preserve">
          <source>Adds the CSS class value specified by the classVal parameter to the element. If animations are enabled then an animation will be triggered for the class addition.</source>
          <target state="translated">classVal パラメータで指定した CSS クラスの値を要素に追加します。アニメーションが有効になっている場合は、クラスの追加に対してアニメーションがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="292c1947617a2554dd67a2e52cb2cdbd0ae73d9c" translate="yes" xml:space="preserve">
          <source>Advantages of Components:</source>
          <target state="translated">コンポーネントの利点。</target>
        </trans-unit>
        <trans-unit id="847093b1cdaeebf405b6651e84441c000a9a1757" translate="yes" xml:space="preserve">
          <source>After a watcher is registered with the scope, the &lt;code&gt;listener&lt;/code&gt; fn is called asynchronously (via &lt;a href=&quot;%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;) to initialize the watcher. In rare cases, this is undesirable because the listener is called when the result of &lt;code&gt;watchExpression&lt;/code&gt; didn't change. To detect this scenario within the &lt;code&gt;listener&lt;/code&gt; fn, you can compare the &lt;code&gt;newVal&lt;/code&gt; and &lt;code&gt;oldVal&lt;/code&gt;. If these two values are identical (&lt;code&gt;===&lt;/code&gt;) then the listener was called due to initialization.</source>
          <target state="translated">ウォッチャーがスコープに登録された後、 &lt;code&gt;listener&lt;/code&gt; fnが非同期に呼び出され（&lt;a href=&quot;%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;を介して）、ウォッチャーが初期化されます。まれに、 &lt;code&gt;watchExpression&lt;/code&gt; の結果が変化しないときにリスナーが呼び出されるため、これは望ましくありません。 &lt;code&gt;listener&lt;/code&gt; fn 内でこのシナリオを検出するには、 &lt;code&gt;newVal&lt;/code&gt; と &lt;code&gt;oldVal&lt;/code&gt; を比較できます。これらの2つの値が同一（ &lt;code&gt;===&lt;/code&gt; ）の場合、初期化のためにリスナーが呼び出されました。</target>
        </trans-unit>
        <trans-unit id="6d837481cd1f8b253b815490aa92a842b47bafbe" translate="yes" xml:space="preserve">
          <source>After compilation:</source>
          <target state="translated">コンパイル後。</target>
        </trans-unit>
        <trans-unit id="714bd774e9df38ca603bcb1b8775b4dd02aa4f0c" translate="yes" xml:space="preserve">
          <source>After evaluating the expression, the &lt;code&gt;$apply&lt;/code&gt; method performs a &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;&lt;code&gt;$digest&lt;/code&gt;&lt;/a&gt;. In the $digest phase the scope examines all of the &lt;code&gt;$watch&lt;/code&gt; expressions and compares them with the previous value. This dirty checking is done asynchronously. This means that assignment such as &lt;code&gt;$scope.username=&quot;angular&quot;&lt;/code&gt; will not immediately cause a &lt;code&gt;$watch&lt;/code&gt; to be notified, instead the &lt;code&gt;$watch&lt;/code&gt; notification is delayed until the &lt;code&gt;$digest&lt;/code&gt; phase. This delay is desirable, since it coalesces multiple model updates into one &lt;code&gt;$watch&lt;/code&gt; notification as well as guarantees that during the &lt;code&gt;$watch&lt;/code&gt; notification no other &lt;code&gt;$watch&lt;/code&gt;es are running. If a &lt;code&gt;$watch&lt;/code&gt; changes the value of the model, it will force additional &lt;code&gt;$digest&lt;/code&gt; cycle.</source>
          <target state="translated">式を評価した後、 &lt;code&gt;$apply&lt;/code&gt; メソッドは&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;/a&gt;実行します。 $ digestフェーズでは、スコープはすべての &lt;code&gt;$watch&lt;/code&gt; 式を調べ、それらを以前の値と比較します。このダーティーチェックは非同期で行われます。つまり、 &lt;code&gt;$scope.username=&quot;angular&quot;&lt;/code&gt; などの割り当てでは、すぐに &lt;code&gt;$watch&lt;/code&gt; に通知されず、代わりに &lt;code&gt;$watch&lt;/code&gt; 通知は &lt;code&gt;$digest&lt;/code&gt; フェーズまで遅延されます。この遅延は、複数のモデルの更新を1つの &lt;code&gt;$watch&lt;/code&gt; 通知に統合し、 &lt;code&gt;$watch&lt;/code&gt; 通知中に他の &lt;code&gt;$watch&lt;/code&gt; ないことを保証するため、望ましいです。esが実行されています。場合は &lt;code&gt;$watch&lt;/code&gt; モデルの値を変更し、それは追加の力になる &lt;code&gt;$digest&lt;/code&gt; サイクルを。</target>
        </trans-unit>
        <trans-unit id="0f6ac511eee4f8b67cef9c9c0f8eb0dbd8113bdd" translate="yes" xml:space="preserve">
          <source>After linking the view is not updated until after a call to $digest which typically is done by AngularJS automatically.</source>
          <target state="translated">リンクした後、通常はAngularJSが自動的に行う$digestを呼び出すまでビューは更新されません。</target>
        </trans-unit>
        <trans-unit id="9faaad4e241429762a959c088c6221ff8561ce1c" translate="yes" xml:space="preserve">
          <source>After linking the view is not updated until after a call to &lt;code&gt;$digest&lt;/code&gt;, which typically is done by AngularJS automatically.</source>
          <target state="translated">リンク後、ビューは &lt;code&gt;$digest&lt;/code&gt; 呼び出しが完了するまで更新されません。これは通常、AngularJSによって自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="4b4c5b8a75d9c61cd56a5a198356ed3648ef2dcc" translate="yes" xml:space="preserve">
          <source>After that, the configuration blocks (&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; functions) are executed. This means the configuration blocks of the required modules execute before the configuration blocks of any requiring module.</source>
          <target state="translated">その後、構成ブロック（&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;設定&lt;/a&gt;機能）が実行されます。つまり、必要なモジュールの構成ブロックは、必要なモジュールの構成ブロックの前に実行されます。</target>
        </trans-unit>
        <trans-unit id="d4c88341f5c5a27217b8f49b95476ac841a5d629" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;$log&lt;/code&gt; service has been instantiated the decorator is fired. The decorator function has a &lt;code&gt;$delegate&lt;/code&gt; object injected to provide access to the service that matches the selector in the decorator. This &lt;code&gt;$delegate&lt;/code&gt; will be the service you are decorating. The return value of the function &lt;em&gt;provided to the decorator&lt;/em&gt; will take place of the service, directive, or filter being decorated.</source>
          <target state="translated">&lt;code&gt;$log&lt;/code&gt; サービスがインスタンス化された後、デコレーターが起動されます。デコレーター関数には、デコレーターのセレクターと一致するサービスへのアクセスを提供するために挿入された &lt;code&gt;$delegate&lt;/code&gt; オブジェクトがあります。この &lt;code&gt;$delegate&lt;/code&gt; は、装飾するサービスになります。&lt;em&gt;デコレーターに提供され&lt;/em&gt;た関数の戻り値は、&lt;em&gt;装飾されて&lt;/em&gt;いるサービス、ディレクティブ、またはフィルターの代わりになります。</target>
        </trans-unit>
        <trans-unit id="cce55f18d89c3103fa1947be1b088e997277d8d3" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngHide&lt;/code&gt; expression evaluates to a non truthy value and just before contents are set to visible.</source>
          <target state="translated">&lt;code&gt;ngHide&lt;/code&gt; 式が真でない値に評価された後、コンテンツが可視に設定される直前。</target>
        </trans-unit>
        <trans-unit id="e1ab027a6f7956cab176653dfbf6557bc5215022" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngHide&lt;/code&gt; expression evaluates to a truthy value and just before the contents are set to hidden.</source>
          <target state="translated">&lt;code&gt;ngHide&lt;/code&gt; 式が真の値に評価された後、コンテンツが非表示に設定される直前。</target>
        </trans-unit>
        <trans-unit id="9d89921bca08cb6fce6a3bb709fa68541674e402" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngShow&lt;/code&gt; expression evaluates to a non truthy value and just before the contents are set to hidden.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; 式が真でない値に評価された後、コンテンツが非表示に設定される直前。</target>
        </trans-unit>
        <trans-unit id="111f924f0a9aa3bf53d410fe9609866c67688702" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngShow&lt;/code&gt; expression evaluates to a truthy value and just before contents are set to visible.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; 式が真の値に評価された後、コンテンツが可視に設定される直前。</target>
        </trans-unit>
        <trans-unit id="4f48526b77c6460bb06d0ccd8371e34af473f98d" translate="yes" xml:space="preserve">
          <source>After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller properties. You can access these bindings once they have been initialized by providing a controller method called &lt;code&gt;$onInit&lt;/code&gt;, which is called after all the controllers on an element have been constructed and had their bindings initialized.</source>
          <target state="translated">コントローラーがインスタンス化された後、分離スコープバインディングの初期値がコントローラープロパティにバインドされます。要素のすべてのコントローラーが構築されてバインディングが初期化された後に呼び出される &lt;code&gt;$onInit&lt;/code&gt; と呼ばれるコントローラーメソッドを提供することで、これらのバインディングにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c607ef5c745b6810ea7c3c7628151983d81c150d" translate="yes" xml:space="preserve">
          <source>After the page and all of the code is loaded, find the root element of your AngularJS application, which is typically the root of the document.</source>
          <target state="translated">ページとすべてのコードが読み込まれたら、AngularJSアプリケーションのルート要素を見つけてください。</target>
        </trans-unit>
        <trans-unit id="9cbf70d065f21f96da19dec3004f6ea32dededec" translate="yes" xml:space="preserve">
          <source>After transclusion extraction</source>
          <target state="translated">トランスクルージョン抽出後</target>
        </trans-unit>
        <trans-unit id="ed0a35043da2cf495a2d6be468099e7a542faec9" translate="yes" xml:space="preserve">
          <source>After transclusion extraction:</source>
          <target state="translated">トランスクルージョン抽出後。</target>
        </trans-unit>
        <trans-unit id="e285e9768c55f6517ffdb13c849b48bbb147341e" translate="yes" xml:space="preserve">
          <source>Afterwards, bootstrap your app with this new module.</source>
          <target state="translated">その後、この新しいモジュールでアプリをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="fdc54aaa92409b498b3e55cfe625a5ae6919300c" translate="yes" xml:space="preserve">
          <source>Again, this binding is live, i.e. the DOM will be automatically updated whenever the result of the function changes. The button to pay the invoice uses the directive &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt;. This will evaluate the corresponding expression whenever the button is clicked.</source>
          <target state="translated">繰り返しますが、このバインディングはライブです。つまり、DOMは、関数の結果が変更されるたびに自動的に更新されます。請求書を支払うボタンは&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;ディレクティブを使用します。これにより、ボタンがクリックされるたびに、対応する式が評価されます。</target>
        </trans-unit>
        <trans-unit id="79db2c9fda03e69529128dc503983397397f3639" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;%24q#when.html&quot;&gt;when&lt;/a&gt; to maintain naming consistency with ES6.</source>
          <target state="translated">ES6との命名の一貫性を維持する&lt;a href=&quot;%24q#when.html&quot;&gt;タイミングの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="d53b765cff1cd744d3fd72e862c814dcbde8f0ca" translate="yes" xml:space="preserve">
          <source>Alias: &lt;a href=&quot;ngform&quot;&gt;&lt;code&gt;ngForm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">エイリアス：&lt;a href=&quot;ngform&quot;&gt; &lt;code&gt;ngForm&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="982e50610ee1a463d2de619756fddf0b7506d21c" translate="yes" xml:space="preserve">
          <source>All 4 kinds of bindings (&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt;) can be made optional by adding &lt;code&gt;?&lt;/code&gt; to the expression. The marker must come after the mode and before the attribute name. See the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/iscp&quot;&gt;Invalid Isolate Scope Definition error&lt;/a&gt; for definition examples. This is useful to refine the interface directives provide. One subtle difference between optional and non-optional happens &lt;strong&gt;when the binding attribute is not set&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; を追加することで、4種類のバインディング（ &lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、および &lt;code&gt;&amp;amp;&lt;/code&gt; ）をすべてオプションにすることができます。式に。マーカーは、モードの後、属性名の前に置く必要があります。定義の例については、&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/iscp&quot;&gt;無効な分離スコープ定義エラー&lt;/a&gt;を参照してください。これは、ディレクティブが提供するインターフェースを改良するのに役立ちます。&lt;strong&gt;バインディング属性が設定されていない場合、&lt;/strong&gt;オプションと非オプションのわずかな違いが1つ発生&lt;strong&gt;します&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="24a20eff43d8a6f79ffe3d6809926de75d13e9fe" translate="yes" xml:space="preserve">
          <source>All 4 kinds of bindings (&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt;) can be made optional by adding &lt;code&gt;?&lt;/code&gt; to the expression. The marker must come after the mode and before the attribute name. See the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/service/error/%24compile/iscp&quot;&gt;Invalid Isolate Scope Definition error&lt;/a&gt; for definition examples. This is useful to refine the interface directives provide. One subtle difference between optional and non-optional happens &lt;strong&gt;when the binding attribute is not set&lt;/strong&gt;:</source>
          <target state="translated">4種類のバインディング（ &lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; ）はすべて、 &lt;code&gt;?&lt;/code&gt; を追加することでオプションにすることができます。式に。マーカーは、モードの後、属性名の前に配置する必要があります。定義の例については、&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/service/error/%24compile/iscp&quot;&gt;Invalid Isolate ScopeDefinitionエラー&lt;/a&gt;を参照してください。これは、ディレクティブが提供するインターフェイスを改良するのに役立ちます。オプションと非オプションの微妙な違いは&lt;strong&gt;、バインディング属性が設定されていない場合&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="86d85c5a64cd00727842decd6d1b20b43012da09" translate="yes" xml:space="preserve">
          <source>All cookies</source>
          <target state="translated">すべてのクッキー</target>
        </trans-unit>
        <trans-unit id="ec0b516f012da1a300f51233f3fc532b53f1545b" translate="yes" xml:space="preserve">
          <source>All different types of tracking functions, their syntax, and their support for duplicate items in collections can be found in the &lt;a href=&quot;ngrepeat#ngRepeat-arguments.html&quot;&gt;ngRepeat expression description&lt;/a&gt;.</source>
          <target state="translated">すべての異なるタイプの追跡関数、その構文、およびコレクション内の重複アイテムのサポートは、&lt;a href=&quot;ngrepeat#ngRepeat-arguments.html&quot;&gt;ngRepeat式の説明にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e3159c7682fd037fbbeed77e34c757d4c52e444c" translate="yes" xml:space="preserve">
          <source>All directives and components must use the standard &lt;code&gt;{{&lt;/code&gt;&lt;code&gt;}}&lt;/code&gt; interpolation symbols in their templates. If you change the application interpolation symbols the &lt;a href=&quot;%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt; service will attempt to denormalize the standard symbols to the custom symbols. The denormalization process is not clever enough to know not to replace instances of the standard symbols where they would not normally be treated as interpolation symbols. For example in the following code snippet the closing braces of the literal object will get incorrectly denormalized:</source>
          <target state="translated">すべてのディレクティブとコンポーネントは、テンプレートで標準の &lt;code&gt;{{&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 補間記号を使用する必要があります。アプリケーション補間シンボルを変更すると、&lt;a href=&quot;%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;サービスは標準シンボルをカスタムシンボルに非正規化しようとします。非正規化プロセスは、通常は内挿記号として扱われない標準記号のインスタンスを置き換えないことを知るほど賢くはありません。たとえば、次のコードスニペットでは、リテラルオブジェクトの右中括弧が誤って非正規化されます。</target>
        </trans-unit>
        <trans-unit id="2bdb3d3484c5f6ff45a3aa2942e714a0e193ce8d" translate="yes" xml:space="preserve">
          <source>All inputs controlled by &lt;a href=&quot;../directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; (including those of type &lt;code&gt;radio&lt;/code&gt;) will use the value of their &lt;code&gt;name&lt;/code&gt; attribute to determine the property under which their &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt; will be published on the parent &lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;. Thus, if you use the same &lt;code&gt;name&lt;/code&gt; for multiple inputs of a form (e.g. a group of radio inputs), only &lt;em&gt;one&lt;/em&gt;&lt;code&gt;NgModelController&lt;/code&gt; will be published on the parent &lt;code&gt;FormController&lt;/code&gt; under that name. The rest of the controllers will continue to work as expected, but you won't be able to access them as properties on the parent &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;によって制御されるすべての入力（ &lt;code&gt;radio&lt;/code&gt; タイプの入力を含む）は、 &lt;code&gt;name&lt;/code&gt; 属性の値を使用して、&lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;が親&lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormControllerで&lt;/a&gt;公開されるプロパティを決定します。したがって、フォームの複数の入力（たとえば、無線入力のグループ）に同じ &lt;code&gt;name&lt;/code&gt; を使用する場合、&lt;em&gt;1つの&lt;/em&gt; &lt;code&gt;NgModelController&lt;/code&gt; のみがその名前で親 &lt;code&gt;FormController&lt;/code&gt; に公開されます。残りのコントローラーは引き続き期待どおりに機能しますが、親 &lt;code&gt;FormController&lt;/code&gt; のプロパティとしてそれらにアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="73501beef5e8878433719d4f65aeedc3d1bb85c4" translate="yes" xml:space="preserve">
          <source>All items are passed through the predicate (or predicates), and the returned values are saved along with their type (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt; etc). For example, an item &lt;code&gt;{label: 'foo'}&lt;/code&gt;, passed through a predicate that extracts the value of the &lt;code&gt;label&lt;/code&gt; property, would be transformed to:</source>
          <target state="translated">すべての項目は述語（または複数の述語）を介して渡され、戻り値はその型（ &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;number&lt;/code&gt; など）とともに保存されます。たとえば、 &lt;code&gt;label&lt;/code&gt; プロパティの値を抽出する述語に渡されたアイテム &lt;code&gt;{label: 'foo'}&lt;/code&gt; 、次のように変換されます。</target>
        </trans-unit>
        <trans-unit id="a25aaffbef3857cd123066d794fffb0b8d68aa35" translate="yes" xml:space="preserve">
          <source>All localizable AngularJS components depend on locale-specific rule sets managed by the &lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;&lt;code&gt;$locale&lt;/code&gt; service&lt;/a&gt;.</source>
          <target state="translated">ローカライズ可能なすべてのAngularJSコンポーネントは、&lt;a href=&quot;../api/ng/service/%24locale&quot;&gt; &lt;code&gt;$locale&lt;/code&gt; サービス&lt;/a&gt;によって管理されるロケール固有のルールセットに依存します。</target>
        </trans-unit>
        <trans-unit id="6a47817fa29a225834088f98ddaf9bf379a62572" translate="yes" xml:space="preserve">
          <source>All of the setter methods return the same &lt;code&gt;$location&lt;/code&gt; object to allow chaining. For example, to change multiple segments in one go, chain setters like this:</source>
          <target state="translated">すべてのセッターメソッドは同じ &lt;code&gt;$location&lt;/code&gt; オブジェクトを返し、連鎖を可能にします。たとえば、一度に複数のセグメントを変更するには、次のようにセッターをチェーンします。</target>
        </trans-unit>
        <trans-unit id="e5665273a60bfa82bedc39a2b20426fbbdbe35b2" translate="yes" xml:space="preserve">
          <source>All of this compilation takes place in the web browser; no server side or pre-compilation step is involved.</source>
          <target state="translated">このコンパイルはすべてWebブラウザで行われ、サーバーサイドやコンパイル前のステップは必要ありません。</target>
        </trans-unit>
        <trans-unit id="2bb32db6893580bdfa7e771a49c32315a6221726" translate="yes" xml:space="preserve">
          <source>All parameters can be changed dynamically. The next example shows how you can make the columns of a table sortable, by binding the &lt;code&gt;expression&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; parameters to scope properties.</source>
          <target state="translated">すべてのパラメーターは動的に変更できます。次の例は、 &lt;code&gt;expression&lt;/code&gt; と &lt;code&gt;reverse&lt;/code&gt; パラメーターをスコーププロパティにバインドすることにより、テーブルの列を並べ替え可能にする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="15074bf6692ab4d76bbae6a637a1292c7beea479" translate="yes" xml:space="preserve">
          <source>All special purpose objects except for the Controller are defined via Factory recipes.</source>
          <target state="translated">コントローラ以外のすべての特殊目的オブジェクトは、ファクトリーレシピを介して定義されています。</target>
        </trans-unit>
        <trans-unit id="2cad0a05b7bc6c8be5db0377e3f07206383a266c" translate="yes" xml:space="preserve">
          <source>All that is going on here with ngShow/ngHide behind the scenes is the &lt;code&gt;.ng-hide&lt;/code&gt; class is added/removed (when the hidden state is valid). Since ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.</source>
          <target state="translated">ここでngShow / ngHideが舞台裏で行われているのは、 &lt;code&gt;.ng-hide&lt;/code&gt; クラスが追加/削除されていることです（非表示状態が有効な場合）。ngShowとngHideはアニメーションに対応しているので、遷移を一致させ、ngAnimateが残りを処理できます。</target>
        </trans-unit>
        <trans-unit id="8e830154a70aba6c6c2d76c09999e74a8801b263" translate="yes" xml:space="preserve">
          <source>All values that are passed to &lt;code&gt;$location&lt;/code&gt; setter methods, &lt;code&gt;path()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;hash()&lt;/code&gt;, are encoded.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; セッターメソッド、 &lt;code&gt;path()&lt;/code&gt; 、 &lt;code&gt;search()&lt;/code&gt; 、 &lt;code&gt;hash()&lt;/code&gt; に渡されるすべての値はエンコードされます。</target>
        </trans-unit>
        <trans-unit id="ee866773b32bc215a390a39a4f20f9a341baa022" translate="yes" xml:space="preserve">
          <source>Allows defining the set of characters that are allowed in AngularJS expressions. The function &lt;code&gt;identifierStart&lt;/code&gt; will get called to know if a given character is a valid character to be the first character for an identifier. The function &lt;code&gt;identifierContinue&lt;/code&gt; will get called to know if a given character is a valid character to be a follow-up identifier character. The functions &lt;code&gt;identifierStart&lt;/code&gt; and &lt;code&gt;identifierContinue&lt;/code&gt; will receive as arguments the single character to be identifier and the character code point. These arguments will be &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;numeric&lt;/code&gt;. Keep in mind that the &lt;code&gt;string&lt;/code&gt; parameter can be two characters long depending on the character representation. It is expected for the function to return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, whether that character is allowed or not.</source>
          <target state="translated">AngularJS式で許可される文字のセットを定義できます。関数 &lt;code&gt;identifierStart&lt;/code&gt; は、指定された文字が識別子の最初の文字になる有効な文字かどうかを知るために呼び出されます。関数 &lt;code&gt;identifierContinue&lt;/code&gt; が呼び出され、指定された文字がフォローアップ識別子文字として有効な文字であるかどうかを確認します。関数 &lt;code&gt;identifierStart&lt;/code&gt; と &lt;code&gt;identifierContinue&lt;/code&gt; は、引数として、識別子となる単一の文字と文字コードポイントを受け取ります。これらの引数は &lt;code&gt;string&lt;/code&gt; と &lt;code&gt;numeric&lt;/code&gt; なります。ことを覚えておいてください &lt;code&gt;string&lt;/code&gt; パラメータは、文字表現によっては2文字の長さにすることができます。その文字が許可されているかどうかにかかわらず、関数は &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返すことが期待されています。</target>
        </trans-unit>
        <trans-unit id="5a0dfc44a8bb5647973347c240aca24c18c76b6e" translate="yes" xml:space="preserve">
          <source>Allows multiple options to be selected. The selected values will be bound to the model as an array.</source>
          <target state="translated">複数のオプションを選択できるようにします。選択された値は、配列としてモデルにバインドされます。</target>
        </trans-unit>
        <trans-unit id="6893f81d9274e77bed184d8c69170d4bd9bc82d3" translate="yes" xml:space="preserve">
          <source>Allows the user to query if the particular service exists.</source>
          <target state="translated">特定のサービスが存在するかどうかを問い合わせることができます。</target>
        </trans-unit>
        <trans-unit id="c700927994271f378f5571025a478be8044ec069" translate="yes" xml:space="preserve">
          <source>Allows you to convert a JavaScript object into JSON string.</source>
          <target state="translated">JavaScriptオブジェクトをJSON文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="8d2ed1f71a67126f9d5f6f5fb8ead5d97d9e1cdd" translate="yes" xml:space="preserve">
          <source>Also there is special case for Moz prefix starting with upper case letter.</source>
          <target state="translated">また、Mozのプレフィックスが大文字で始まる場合は特殊なケースがあります。</target>
        </trans-unit>
        <trans-unit id="ef2bcb812e9ddd641d60f5e796d9a28cdbad4e2c" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;ngIf&lt;/code&gt; recreates elements using their compiled state. An example of this behavior is if an element's class attribute is directly modified after it's compiled, using something like jQuery's &lt;code&gt;.addClass()&lt;/code&gt; method, and the element is later removed. When &lt;code&gt;ngIf&lt;/code&gt; recreates the element the added class will be lost because the original compiled state is used to regenerate the element.</source>
          <target state="translated">また、 &lt;code&gt;ngIf&lt;/code&gt; は、コンパイルされた状態を使用して要素を再作成します。この動作の例は、jQueryの &lt;code&gt;.addClass()&lt;/code&gt; メソッドのようなものを使用して、要素のクラス属性がコンパイル後に直接変更され、要素が後で削除される場合です。とき &lt;code&gt;ngIf&lt;/code&gt; は、要素を再作成し、元のコンパイルされた状態で要素を再生するために使用されているため、追加されたクラスは失われます。</target>
        </trans-unit>
        <trans-unit id="cae8ad452ed52b4364f25ab05ff05e650916df18" translate="yes" xml:space="preserve">
          <source>Alternative &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that follows jQuery's &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;param()&lt;/code&gt;&lt;/a&gt; method logic. The serializer will also sort the params alphabetically.</source>
          <target state="translated">jQueryの&lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;param()&lt;/code&gt; &lt;/a&gt;メソッドロジックに従う代替&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; paramsシリアライザー。シリアライザは、パラメータをアルファベット順に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="7cd890a8044b9b586873b8ac1a1b8c16c0dc844a" translate="yes" xml:space="preserve">
          <source>Alternative &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that follows jQuery's &lt;a href=&quot;https://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;param()&lt;/code&gt;&lt;/a&gt; method logic. The serializer will also sort the params alphabetically.</source>
          <target state="translated">jQueryの&lt;a href=&quot;https://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;param()&lt;/code&gt; &lt;/a&gt;メソッドロジックに従う代替の&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;シリアライザー。シリアライザーは、パラメーターをアルファベット順にソートします。</target>
        </trans-unit>
        <trans-unit id="1986d05c6408cc68f17db3c47392a453a7bfa1f3" translate="yes" xml:space="preserve">
          <source>Alternative &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that follows jQuery's &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;param()&lt;/code&gt;&lt;/a&gt; method logic. The serializer will also sort the params alphabetically.</source>
          <target state="translated">jQueryの&lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;param()&lt;/code&gt; &lt;/a&gt;メソッドロジックに従う代替&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; paramsシリアライザー。シリアライザは、パラメータをアルファベット順に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="642a4630b3a0fa938edfdfacea5c8b4a58ceb47c" translate="yes" xml:space="preserve">
          <source>Alternative &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that follows jQuery's &lt;a href=&quot;https://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;param()&lt;/code&gt;&lt;/a&gt; method logic. The serializer will also sort the params alphabetically.</source>
          <target state="translated">jQueryの&lt;a href=&quot;https://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;param()&lt;/code&gt; &lt;/a&gt;メソッドロジックに従う代替の&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;シリアライザー。シリアライザーは、パラメーターをアルファベット順にソートします。</target>
        </trans-unit>
        <trans-unit id="0e831c9cda5cf6bfb0807f5344ad0dc49c8046ab" translate="yes" xml:space="preserve">
          <source>Although AngularJS makes i18n convenient, there are several things you need to be conscious of as you develop your app.</source>
          <target state="translated">AngularJSはi18nを便利にしてくれますが、アプリを開発する上で意識しなければならないことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="cc361285cac50472d68caba2b407d041dcf954eb" translate="yes" xml:space="preserve">
          <source>Although the CSS is a little different than what we saw before, the idea is the same.</source>
          <target state="translated">先ほどのCSSとは少し違いますが、考え方は同じです。</target>
        </trans-unit>
        <trans-unit id="1d3f0a93f4e12755f9ed54ee382ddaf25896e70f" translate="yes" xml:space="preserve">
          <source>Although there are many ways to test a Controller, one of the best conventions, shown below, involves injecting the &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; and &lt;a href=&quot;../api/ng/service/%24controller&quot;&gt;$controller&lt;/a&gt;:</source>
          <target state="translated">コントローラーをテストするには多くの方法がありますが、以下に示す最良の規則の1つは、&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$ rootScope&lt;/a&gt;と&lt;a href=&quot;../api/ng/service/%24controller&quot;&gt;$ controller&lt;/a&gt;を注入することです。</target>
        </trans-unit>
        <trans-unit id="664ea04f360cf50ee3034fb79c72bfc990a51803" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Array.&amp;lt;DirectiveObject&amp;gt;&lt;/code&gt;&lt;sub&gt;&lt;a href=&quot;decorators#drtvArray.html&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;Array.&amp;lt;DirectiveObject&amp;gt;&lt;/code&gt; &lt;sub&gt;&lt;a href=&quot;decorators#drtvArray.html&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="72132aa9016db41ce813e2e986f465c21ae9978a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt; directive that validates whether the input is a valid integer. For example, &lt;code&gt;1.23&lt;/code&gt; is an invalid value, since it contains a fraction. Note that we validate the viewValue (the string value of the control), and not the modelValue. This is because input[number] converts the viewValue to a number when running the &lt;code&gt;$parsers&lt;/code&gt;.</source>
          <target state="translated">入力が有効な整数かどうかを検証する &lt;code&gt;integer&lt;/code&gt; ディレクティブ。たとえば、 &lt;code&gt;1.23&lt;/code&gt; は分数を含むため、無効な値です。モデル値ではなく、viewValue（コントロールの文字列値）を検証することに注意してください。これは、 &lt;code&gt;$parsers&lt;/code&gt; parsersの実行時にinput [number]がviewValueを数値に変換するためです。</target>
        </trans-unit>
        <trans-unit id="7c21d96b949c9521f03fc61f9044eaf72551b8b6" translate="yes" xml:space="preserve">
          <source>An AngularJS &lt;strong&gt;service&lt;/strong&gt; is a singleton object created by a &lt;strong&gt;service factory&lt;/strong&gt;. These &lt;strong&gt;service factories&lt;/strong&gt; are functions which, in turn, are created by a &lt;strong&gt;service provider&lt;/strong&gt;. The &lt;strong&gt;service providers&lt;/strong&gt; are constructor functions. When instantiated they must contain a property called &lt;code&gt;$get&lt;/code&gt;, which holds the &lt;strong&gt;service factory&lt;/strong&gt; function.</source>
          <target state="translated">AngularJS &lt;strong&gt;サービス&lt;/strong&gt;は、&lt;strong&gt;サービスファクトリ&lt;/strong&gt;によって作成されたシングルトンオブジェクトです。これらの&lt;strong&gt;サービスファクトリ&lt;/strong&gt;は、&lt;strong&gt;サービスプロバイダ&lt;/strong&gt;によって作成された&lt;strong&gt;機能です&lt;/strong&gt;。&lt;strong&gt;サービスプロバイダは、&lt;/strong&gt;コンストラクタ関数です。インスタンス化されるとき、それらは &lt;code&gt;$get&lt;/code&gt; と呼ばれるプロパティを含まなければなりません、そしてそれは&lt;strong&gt;サービスファクトリ&lt;/strong&gt;関数を保持します。</target>
        </trans-unit>
        <trans-unit id="5f5e902fbb09480c376fa0194b1e609ced186aa3" translate="yes" xml:space="preserve">
          <source>An AngularJS expression to be executed.</source>
          <target state="translated">実行されるAngularJSの式。</target>
        </trans-unit>
        <trans-unit id="b37bf8f17fc0e4cf752fc858258841e0042e4bb7" translate="yes" xml:space="preserve">
          <source>An Example of &quot;Compile&quot; Versus &quot;Link&quot;</source>
          <target state="translated">コンパイル」と「リンク」の例</target>
        </trans-unit>
        <trans-unit id="9ef9cd2a9880a76f773b11fee32868da9ed975cc" translate="yes" xml:space="preserve">
          <source>An alternative solution to this problem would be using the &lt;a href=&quot;ngcloak&quot;&gt;ngCloak&lt;/a&gt; directive.</source>
          <target state="translated">この問題の代替ソリューションは、&lt;a href=&quot;ngcloak&quot;&gt;ngCloak&lt;/a&gt;ディレクティブを使用することです。</target>
        </trans-unit>
        <trans-unit id="7e680432122c70e32424dcdf0fd61139308710c4" translate="yes" xml:space="preserve">
          <source>An animation runner returned by an $animate function.</source>
          <target state="translated">animate 関数が返すアニメーションランナー。</target>
        </trans-unit>
        <trans-unit id="7056c57ecc4a5b129adb248caf351bdeae7d09c4" translate="yes" xml:space="preserve">
          <source>An array or hash of promises.</source>
          <target state="translated">約束の配列またはハッシュ。</target>
        </trans-unit>
        <trans-unit id="438126d6254d3420fb8b54716dd74b0c0c91bd27" translate="yes" xml:space="preserve">
          <source>An example of interpolation is shown below:</source>
          <target state="translated">補間の例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="25266bc9e38243de1cfb398019dfc315000d1f50" translate="yes" xml:space="preserve">
          <source>An example on how to implement animations using &lt;code&gt;ngClassEven&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ngClassEven&lt;/code&gt; を使用してアニメーションを実装する方法の例：</target>
        </trans-unit>
        <trans-unit id="255badf5f975c2e6c577cd02fbbd0dd9ce5fa56a" translate="yes" xml:space="preserve">
          <source>An example on how to implement animations using &lt;code&gt;ngClassOdd&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; を使用してアニメーションを実装する方法の例：</target>
        </trans-unit>
        <trans-unit id="62dc53f9c709ad888e01b1a59fcc76fe0155aa4c" translate="yes" xml:space="preserve">
          <source>An expression can be optionally prefixed with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; to control the sorting direction, ascending or descending. For example, &lt;code&gt;'+label'&lt;/code&gt; or &lt;code&gt;'-label'&lt;/code&gt;. If no property is provided, (e.g. &lt;code&gt;'+'&lt;/code&gt; or &lt;code&gt;'-'&lt;/code&gt;), the collection element itself is used in comparisons.</source>
          <target state="translated">必要に応じて、式の前に &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; を付けて、昇順または降順のソート方向を制御できます。たとえば、 &lt;code&gt;'+label'&lt;/code&gt; または &lt;code&gt;'-label'&lt;/code&gt; です。プロパティが指定されていない場合（例： &lt;code&gt;'+'&lt;/code&gt; または &lt;code&gt;'-'&lt;/code&gt; ）、コレクション要素自体が比較に使用されます。</target>
        </trans-unit>
        <trans-unit id="3f036173d46ad7b878cf3296d2b2dac5c0eb15db" translate="yes" xml:space="preserve">
          <source>An expression that starts with &lt;code&gt;::&lt;/code&gt; is considered a one-time expression. One-time expressions will stop recalculating once they are stable, which happens after the first digest if the expression result is a non-undefined value (see value stabilization algorithm below).</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; で始まる式は、1回限りの式と見なされます。1回限りの式は、安定すると再計算を停止します。これは、式の結果が未定義の値でない場合、最初のダイジェストの後に発生します（以下の値安定化アルゴリズムを参照）。</target>
        </trans-unit>
        <trans-unit id="1377c3d192d7bf8b19b573abc270573ee59d7ec8" translate="yes" xml:space="preserve">
          <source>An injectable class (constructor function) that will be instantiated.</source>
          <target state="translated">インスタンス化されるインジェクト可能なクラス(コンストラクタ関数)。</target>
        </trans-unit>
        <trans-unit id="a9b6840dea47811dc05aae5027aa0a40ccd033fa" translate="yes" xml:space="preserve">
          <source>An injectable directive factory function. See the &lt;a href=&quot;../../../guide/directive&quot;&gt;directive guide&lt;/a&gt; and the &lt;a href=&quot;../service/%24compile&quot;&gt;compile API&lt;/a&gt; for more info.</source>
          <target state="translated">注入可能なディレクティブファクトリ関数。詳細については、&lt;a href=&quot;../../../guide/directive&quot;&gt;ディレクティブガイド&lt;/a&gt;と&lt;a href=&quot;../service/%24compile&quot;&gt;コンパイルAPI&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a2c035f4bab2a6ca81a26cf1561e460c12d7af3" translate="yes" xml:space="preserve">
          <source>An object hash with all failing validator ids as keys.</source>
          <target state="translated">失敗したすべてのバリデータIDをキーとするオブジェクトハッシュ。</target>
        </trans-unit>
        <trans-unit id="7481e3cf882547d1cafefe1993d08399c2f33260" translate="yes" xml:space="preserve">
          <source>An object hash with all pending validator ids as keys.</source>
          <target state="translated">保留中のすべてのバリデータIDをキーとするオブジェクトハッシュ。</target>
        </trans-unit>
        <trans-unit id="f2cf8cfd906e9099c3100166fe9e3fd7080b9f49" translate="yes" xml:space="preserve">
          <source>An object hash, containing references to controls or forms with failing validators, where:</source>
          <target state="translated">バリデータが失敗したコントロールやフォームへの参照を含むオブジェクトハッシュ。</target>
        </trans-unit>
        <trans-unit id="b4699c85185b56a805c395192bbb329ac54ca51f" translate="yes" xml:space="preserve">
          <source>An object hash, containing references to controls or forms with pending validators, where:</source>
          <target state="translated">保留中のバリデータを持つコントロールやフォームへの参照を含むオブジェクトハッシュ。</target>
        </trans-unit>
        <trans-unit id="e28988a5accfd6915ed9bed343b184db496ecd37" translate="yes" xml:space="preserve">
          <source>An object that contains information about the current AngularJS version.</source>
          <target state="translated">現在のAngularJSのバージョンに関する情報を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="174ed948b808866039efe36a930b9f1ce4822c05" translate="yes" xml:space="preserve">
          <source>An optional object which contains additional event data that is used when creating the event:</source>
          <target state="translated">イベントを作成する際に使用する追加のイベントデータを含むオプションのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fc3637df868e602451404b5f647130a18cca9153" translate="yes" xml:space="preserve">
          <source>An optional string to provide the origin of the function call for error messages.</source>
          <target state="translated">エラーメッセージの関数呼び出し元を指定するためのオプションの文字列。</target>
        </trans-unit>
        <trans-unit id="890f2279934dc8a6b8499be1df29aafd89f69b59" translate="yes" xml:space="preserve">
          <source>Anchoring Demo</source>
          <target state="translated">アンカリングデモ</target>
        </trans-unit>
        <trans-unit id="326eb1ddaaabb3b6d3a467b41d5832d75f3ed666" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;$animateCss&lt;/code&gt; will figure out the rest. Just make sure to have the &lt;code&gt;done()&lt;/code&gt; callback fire the &lt;code&gt;doneFn&lt;/code&gt; function to signal when the animation is over.</source>
          <target state="translated">そして &lt;code&gt;$animateCss&lt;/code&gt; が残りを計算します。アニメーションが &lt;code&gt;doneFn&lt;/code&gt; ことを知らせるために、 &lt;code&gt;done()&lt;/code&gt; コールバックがdoneFn関数を起動することを確認してください。</target>
        </trans-unit>
        <trans-unit id="d4e0c6972a0d5d288dd0cd636689c2317a6bcbb1" translate="yes" xml:space="preserve">
          <source>And an application level module which depends on the above modules and contains any initialization code.</source>
          <target state="translated">そして、上記のモジュールに依存し、任意の初期化コードを含むアプリケーションレベルのモジュール。</target>
        </trans-unit>
        <trans-unit id="66d5e630fa1d9e7e00b2527efa6f276e0610f85b" translate="yes" xml:space="preserve">
          <source>And since Constant recipe makes the value also available at runtime just like the Value recipe, we can also use it in our controller and template:</source>
          <target state="translated">また、ConstantレシピはValueレシピのように実行時に値を利用できるようにするので、コントローラとテンプレートでそれを使うことができます。</target>
        </trans-unit>
        <trans-unit id="2ae7dabd4284493793044636058e6d4510506040" translate="yes" xml:space="preserve">
          <source>And the following &lt;code&gt;&amp;lt;person&amp;gt;&lt;/code&gt; element &lt;strong&gt;matches&lt;/strong&gt; the &lt;code&gt;person&lt;/code&gt; directive:</source>
          <target state="translated">また、次の &lt;code&gt;&amp;lt;person&amp;gt;&lt;/code&gt; 要素は &lt;code&gt;person&lt;/code&gt; ディレクティブと&lt;strong&gt;一致&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="e074b907bd18b60b4c8b9d046fe304e0a1334c25" translate="yes" xml:space="preserve">
          <source>And then each individual test is defined within a call to the &lt;code&gt;it&lt;/code&gt; function:</source>
          <target state="translated">そして、個々のテストは &lt;code&gt;it&lt;/code&gt; 関数の呼び出し内で定義されます。</target>
        </trans-unit>
        <trans-unit id="bcab3a39fd9e6cc3ee88ad70caa5024094be413f" translate="yes" xml:space="preserve">
          <source>And this is how you would display it via AngularJS's data-binding:</source>
          <target state="translated">そして、AngularJSのデータバインディングを介して表示するとこんな感じです。</target>
        </trans-unit>
        <trans-unit id="12546996946dd46b31df4b813318ccd8f12a4142" translate="yes" xml:space="preserve">
          <source>And with an input of &lt;code&gt;['A','B']&lt;/code&gt; for the items variable in the example above, the output will evaluate to:</source>
          <target state="translated">そして、の入力と &lt;code&gt;['A','B']&lt;/code&gt; 上記の例ではアイテム変数の、出力が評価されます。</target>
        </trans-unit>
        <trans-unit id="7be54da4aeef061feb2dd88f21e1e293d3e62c45" translate="yes" xml:space="preserve">
          <source>Angular.js</source>
          <target state="translated">Angular.js</target>
        </trans-unit>
        <trans-unit id="13791425bfb26b4e4a5449e290a7555a8da39a41" translate="yes" xml:space="preserve">
          <source>AngularFire</source>
          <target state="translated">AngularFire</target>
        </trans-unit>
        <trans-unit id="ab3119bf73d8058434a4147335dfd43554aec933" translate="yes" xml:space="preserve">
          <source>AngularJS  Tag</source>
          <target state="translated">AngularJS タグ</target>
        </trans-unit>
        <trans-unit id="3f0faae0118505f14f548205980339e05517f7b2" translate="yes" xml:space="preserve">
          <source>AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of AngularJS, defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in &lt;strong&gt;JS animations taking charge of the animation&lt;/strong&gt;:</source>
          <target state="translated">AngularJS 1.4以降では、CSSとJSアニメーションの融合をより柔軟にするための対策が講じられています。ただし、AngularJSの以前のバージョンとは異なり、同じCSSクラスで動作するようにCSSおよびJSアニメーションを定義すると機能しなくなります。したがって、以下の例では、&lt;strong&gt;JSアニメーション&lt;/strong&gt;のみが&lt;strong&gt;アニメーションを担当し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0991984fb2b8a5470a91fe03e8798b2bb70f6d5d" translate="yes" xml:space="preserve">
          <source>AngularJS &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scopes&lt;/a&gt;;</source>
          <target state="translated">AngularJS &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;スコープ&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="7cf4e203d1f24008eb58eb8fa122f0e7859f0b96" translate="yes" xml:space="preserve">
          <source>AngularJS &lt;strong&gt;normalizes&lt;/strong&gt; an element's tag and attribute name to determine which elements match which directives. We typically refer to directives by their case-sensitive &lt;a href=&quot;http://en.wikipedia.org/wiki/CamelCase&quot;&gt;camelCase&lt;/a&gt;&lt;strong&gt;normalized&lt;/strong&gt; name (e.g. &lt;code&gt;ngModel&lt;/code&gt;). However, since HTML is case-insensitive, we refer to directives in the DOM by lower-case forms, typically using &lt;a href=&quot;https://en.wikipedia.org/wiki/Letter_case#Special_case_styles&quot;&gt;dash-delimited&lt;/a&gt; attributes on DOM elements (e.g. &lt;code&gt;ng-model&lt;/code&gt;).</source>
          <target state="translated">AngularJSは、要素のタグと属性名を&lt;strong&gt;正規化して&lt;/strong&gt;、どの要素がどのディレクティブに一致するかを判断します。通常、ディレクティブは、大文字と小文字を区別する&lt;a href=&quot;http://en.wikipedia.org/wiki/CamelCase&quot;&gt;camelCaseの&lt;/a&gt;&lt;strong&gt;正規化された&lt;/strong&gt;名前（ &lt;code&gt;ngModel&lt;/code&gt; など）で参照します。ただし、HTMLでは大文字と小文字が区別されないため、通常はDOM要素の&lt;a href=&quot;https://en.wikipedia.org/wiki/Letter_case#Special_case_styles&quot;&gt;ダッシュ区切りの&lt;/a&gt;属性を使用して、小文字の形式でDOMのディレクティブを参照します（例： &lt;code&gt;ng-model&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8287559f1a2b5acb873956724f65bd59e38fd39c" translate="yes" xml:space="preserve">
          <source>AngularJS &lt;strong&gt;normalizes&lt;/strong&gt; an element's tag and attribute name to determine which elements match which directives. We typically refer to directives by their case-sensitive &lt;a href=&quot;https://en.wikipedia.org/wiki/CamelCase&quot;&gt;camelCase&lt;/a&gt;&lt;strong&gt;normalized&lt;/strong&gt; name (e.g. &lt;code&gt;ngModel&lt;/code&gt;). However, since HTML is case-insensitive, we refer to directives in the DOM by lower-case forms, typically using &lt;a href=&quot;https://en.wikipedia.org/wiki/Letter_case#Special_case_styles&quot;&gt;dash-delimited&lt;/a&gt; attributes on DOM elements (e.g. &lt;code&gt;ng-model&lt;/code&gt;).</source>
          <target state="translated">AngularJSは、要素のタグと属性名を&lt;strong&gt;正規化して&lt;/strong&gt;、どの要素がどのディレクティブに一致するかを判別します。通常、ディレクティブは大文字と小文字が区別される&lt;a href=&quot;https://en.wikipedia.org/wiki/CamelCase&quot;&gt;キャメルケースの&lt;/a&gt;&lt;strong&gt;正規化された&lt;/strong&gt;名前（ &lt;code&gt;ngModel&lt;/code&gt; など）で参照されます。ただし、HTMLでは大文字と小文字が区別されないため、通常はDOM要素（ &lt;code&gt;ng-model&lt;/code&gt; など）で&lt;a href=&quot;https://en.wikipedia.org/wiki/Letter_case#Special_case_styles&quot;&gt;ダッシュで区切られた&lt;/a&gt;属性を使用して、小文字の形式でDOM内のディレクティブを参照します。</target>
        </trans-unit>
        <trans-unit id="f4a2157fd4651f5ccd744058540881b06b68a586" translate="yes" xml:space="preserve">
          <source>AngularJS Accessibility at ngEurope</source>
          <target state="translated">ngEuropeでのAngularJSアクセシビリティ</target>
        </trans-unit>
        <trans-unit id="58966c0a99e9180ce8cf2c8238894a17e5acefa3" translate="yes" xml:space="preserve">
          <source>AngularJS Blog</source>
          <target state="translated">AngularJSブログ</target>
        </trans-unit>
        <trans-unit id="10935422d37be07b1f9d03bd4bd4648742ed57f5" translate="yes" xml:space="preserve">
          <source>AngularJS Expressions vs. JavaScript Expressions</source>
          <target state="translated">AngularJS Expressions vs.JavaScript Expressions</target>
        </trans-unit>
        <trans-unit id="fa4112920b48d03503b9cfdbeff4addf37de8003" translate="yes" xml:space="preserve">
          <source>AngularJS IRC channel</source>
          <target state="translated">AngularJS IRCチャンネル</target>
        </trans-unit>
        <trans-unit id="8709ab6a8289c4a260c3e11677b31fbb21a2a30d" translate="yes" xml:space="preserve">
          <source>AngularJS Material</source>
          <target state="translated">AngularJS素材</target>
        </trans-unit>
        <trans-unit id="2cced466cd886f24b57c2f6ae044b2c12669f782" translate="yes" xml:space="preserve">
          <source>AngularJS Scopes</source>
          <target state="translated">AngularJSのスコープ</target>
        </trans-unit>
        <trans-unit id="cc3917a0e77e480943a79e1de65aac43cd92aabb" translate="yes" xml:space="preserve">
          <source>AngularJS Seed</source>
          <target state="translated">AngularJSシード</target>
        </trans-unit>
        <trans-unit id="6c5d29b4a87b1dc1dda5895fca5ac894b2cad8db" translate="yes" xml:space="preserve">
          <source>AngularJS Service API</source>
          <target state="translated">AngularJSサービスAPI</target>
        </trans-unit>
        <trans-unit id="6ea95f8da2f97d39b353d9d6c1e8c0ca783d16e2" translate="yes" xml:space="preserve">
          <source>AngularJS Styleguide</source>
          <target state="translated">AngularJSスタイルガイド</target>
        </trans-unit>
        <trans-unit id="19c7c3ee2f637e8d9c1e5f271cfa0f66e077975b" translate="yes" xml:space="preserve">
          <source>AngularJS Templates</source>
          <target state="translated">AngularJSテンプレート</target>
        </trans-unit>
        <trans-unit id="0453b2acb9baff1f059cf73da1f3ca1a4a489724" translate="yes" xml:space="preserve">
          <source>AngularJS Templates and Expressions</source>
          <target state="translated">AngularJSのテンプレートと式</target>
        </trans-unit>
        <trans-unit id="a50311307d9b448cd7b8f1579e7819949f998f99" translate="yes" xml:space="preserve">
          <source>AngularJS UI Bootstrap</source>
          <target state="translated">AngularJS UI Bootstrap</target>
        </trans-unit>
        <trans-unit id="3757aac570708761ec4fe9543f6d5b9883dd0ffc" translate="yes" xml:space="preserve">
          <source>AngularJS UI Grid</source>
          <target state="translated">AngularJS UIグリッド</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
